{"test_class": {"identifier": "DownloaderWebClientTest", "superclass": "extends AbstractDownloaderTest", "interfaces": "", "fields": [], "file": "herd-code/herd-tools/herd-downloader/src/test/java/org/finra/herd/tools/downloader/DownloaderWebClientTest.java"}, "test_case": {"identifier": "testGetS3KeyPrefix", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetS3KeyPrefix() throws Exception\n    {\n        // Upload and register business object data parents.\n        uploadAndRegisterTestDataParents(downloaderWebClient);\n\n        // Upload and register the initial version if of the test business object data.\n        uploadTestDataFilesToS3(S3_TEST_PATH_V0);\n        final UploaderInputManifestDto uploaderInputManifestDto = getTestUploaderInputManifestDto();\n\n        executeWithoutLogging(DataBridgeWebClient.class, new Command()\n        {\n            @Override\n            public void execute() throws Exception\n            {\n                BusinessObjectData businessObjectData =\n                    downloaderWebClient.preRegisterBusinessObjectData(uploaderInputManifestDto, StorageEntity.MANAGED_STORAGE, false);\n                BusinessObjectDataKey businessObjectDataKey = businessObjectDataHelper.getBusinessObjectDataKey(businessObjectData);\n                downloaderWebClient\n                    .addStorageFiles(businessObjectDataKey, uploaderInputManifestDto, getTestS3FileTransferRequestParamsDto(S3_TEST_PATH_V0 + \"/\"),\n                        StorageEntity.MANAGED_STORAGE);\n                downloaderWebClient.updateBusinessObjectDataStatus(businessObjectDataKey, BusinessObjectDataStatusEntity.VALID);\n            }\n        });\n\n        // Get S3 key prefix.\n        BusinessObjectData businessObjectData = toBusinessObjectData(uploaderInputManifestDto);\n        S3KeyPrefixInformation resultS3KeyPrefixInformation = downloaderWebClient.getS3KeyPrefix(businessObjectData);\n\n        // Validate the results.\n        assertNotNull(resultS3KeyPrefixInformation);\n        assertEquals(S3_SIMPLE_TEST_PATH, resultS3KeyPrefixInformation.getS3KeyPrefix());\n    }", "signature": "void testGetS3KeyPrefix()", "full_signature": "@Test public void testGetS3KeyPrefix()", "class_method_signature": "DownloaderWebClientTest.testGetS3KeyPrefix()", "testcase": true, "constructor": false, "invocations": ["uploadAndRegisterTestDataParents", "uploadTestDataFilesToS3", "getTestUploaderInputManifestDto", "executeWithoutLogging", "preRegisterBusinessObjectData", "getBusinessObjectDataKey", "addStorageFiles", "getTestS3FileTransferRequestParamsDto", "updateBusinessObjectDataStatus", "toBusinessObjectData", "getS3KeyPrefix", "assertNotNull", "assertEquals", "getS3KeyPrefix"]}, "focal_class": {"identifier": "DownloaderWebClient", "superclass": "extends DataBridgeWebClient", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DownloaderWebClient.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DownloaderWebClient.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "getBusinessObjectData", "parameters": "(DownloaderInputManifestDto manifest)", "modifiers": "public", "return": "BusinessObjectData", "signature": "BusinessObjectData getBusinessObjectData(DownloaderInputManifestDto manifest)", "full_signature": "public BusinessObjectData getBusinessObjectData(DownloaderInputManifestDto manifest)", "class_method_signature": "DownloaderWebClient.getBusinessObjectData(DownloaderInputManifestDto manifest)", "testcase": false, "constructor": false}, {"identifier": "getS3KeyPrefix", "parameters": "(BusinessObjectData businessObjectData)", "modifiers": "public", "return": "S3KeyPrefixInformation", "signature": "S3KeyPrefixInformation getS3KeyPrefix(BusinessObjectData businessObjectData)", "full_signature": "public S3KeyPrefixInformation getS3KeyPrefix(BusinessObjectData businessObjectData)", "class_method_signature": "DownloaderWebClient.getS3KeyPrefix(BusinessObjectData businessObjectData)", "testcase": false, "constructor": false}, {"identifier": "getStorageUnitDownloadCredential", "parameters": "(DownloaderInputManifestDto manifest, String storageName)", "modifiers": "public", "return": "StorageUnitDownloadCredential", "signature": "StorageUnitDownloadCredential getStorageUnitDownloadCredential(DownloaderInputManifestDto manifest, String storageName)", "full_signature": "public StorageUnitDownloadCredential getStorageUnitDownloadCredential(DownloaderInputManifestDto manifest, String storageName)", "class_method_signature": "DownloaderWebClient.getStorageUnitDownloadCredential(DownloaderInputManifestDto manifest, String storageName)", "testcase": false, "constructor": false}, {"identifier": "getStorageUnitDownloadCredential", "parameters": "(CloseableHttpResponse response)", "modifiers": "private", "return": "StorageUnitDownloadCredential", "signature": "StorageUnitDownloadCredential getStorageUnitDownloadCredential(CloseableHttpResponse response)", "full_signature": "private StorageUnitDownloadCredential getStorageUnitDownloadCredential(CloseableHttpResponse response)", "class_method_signature": "DownloaderWebClient.getStorageUnitDownloadCredential(CloseableHttpResponse response)", "testcase": false, "constructor": false}], "file": "herd-code/herd-tools/herd-downloader/src/main/java/org/finra/herd/tools/downloader/DownloaderWebClient.java"}, "focal_method": {"identifier": "getS3KeyPrefix", "parameters": "(BusinessObjectData businessObjectData)", "modifiers": "public", "return": "S3KeyPrefixInformation", "body": "public S3KeyPrefixInformation getS3KeyPrefix(BusinessObjectData businessObjectData)\n        throws IOException, JAXBException, URISyntaxException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException\n    {\n        DataBridgeBaseManifestDto dataBridgeBaseManifestDto = new DataBridgeBaseManifestDto();\n        dataBridgeBaseManifestDto.setNamespace(businessObjectData.getNamespace());\n        dataBridgeBaseManifestDto.setBusinessObjectDefinitionName(businessObjectData.getBusinessObjectDefinitionName());\n        dataBridgeBaseManifestDto.setBusinessObjectFormatUsage(businessObjectData.getBusinessObjectFormatUsage());\n        dataBridgeBaseManifestDto.setBusinessObjectFormatFileType(businessObjectData.getBusinessObjectFormatFileType());\n        dataBridgeBaseManifestDto.setBusinessObjectFormatVersion(String.valueOf(businessObjectData.getBusinessObjectFormatVersion()));\n        dataBridgeBaseManifestDto.setPartitionKey(businessObjectData.getPartitionKey());\n        dataBridgeBaseManifestDto.setPartitionValue(businessObjectData.getPartitionValue());\n        dataBridgeBaseManifestDto.setSubPartitionValues(businessObjectData.getSubPartitionValues());\n        dataBridgeBaseManifestDto.setStorageName(businessObjectData.getStorageUnits().get(0).getStorage().getName());\n        return super.getS3KeyPrefix(dataBridgeBaseManifestDto, businessObjectData.getVersion(), Boolean.FALSE);\n    }", "signature": "S3KeyPrefixInformation getS3KeyPrefix(BusinessObjectData businessObjectData)", "full_signature": "public S3KeyPrefixInformation getS3KeyPrefix(BusinessObjectData businessObjectData)", "class_method_signature": "DownloaderWebClient.getS3KeyPrefix(BusinessObjectData businessObjectData)", "testcase": false, "constructor": false, "invocations": ["setNamespace", "getNamespace", "setBusinessObjectDefinitionName", "getBusinessObjectDefinitionName", "setBusinessObjectFormatUsage", "getBusinessObjectFormatUsage", "setBusinessObjectFormatFileType", "getBusinessObjectFormatFileType", "setBusinessObjectFormatVersion", "valueOf", "getBusinessObjectFormatVersion", "setPartitionKey", "getPartitionKey", "setPartitionValue", "getPartitionValue", "setSubPartitionValues", "getSubPartitionValues", "setStorageName", "getName", "getStorage", "get", "getStorageUnits", "getS3KeyPrefix", "getVersion"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}