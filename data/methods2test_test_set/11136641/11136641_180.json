{"test_class": {"identifier": "BaseLdapPathBeanPostProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BaseLdapPathBeanPostProcessor tested;", "modifier": "private", "type": "BaseLdapPathBeanPostProcessor", "declarator": "tested", "var_name": "tested"}, {"original_string": "private BaseLdapPathAware ldapPathAwareMock;", "modifier": "private", "type": "BaseLdapPathAware", "declarator": "ldapPathAwareMock", "var_name": "ldapPathAwareMock"}, {"original_string": "private ApplicationContext applicationContextMock;", "modifier": "private", "type": "ApplicationContext", "declarator": "applicationContextMock", "var_name": "applicationContextMock"}, {"original_string": "private BaseLdapNameAware ldapNameAwareMock;", "modifier": "private", "type": "BaseLdapNameAware", "declarator": "ldapNameAwareMock", "var_name": "ldapNameAwareMock"}], "file": "core/src/test/java/org/springframework/ldap/core/support/BaseLdapPathBeanPostProcessorTest.java"}, "test_case": {"identifier": "testGetAbstractContextSourceFromApplicationContextTwoContextSources", "parameters": "()", "modifiers": "@Test(expected = NoSuchBeanDefinitionException.class) public", "return": "void", "body": "@Test(expected = NoSuchBeanDefinitionException.class)\n\tpublic void testGetAbstractContextSourceFromApplicationContextTwoContextSources() throws Exception {\n\t\twhen(applicationContextMock\n\t\t\t\t.getBeanNamesForType(BaseLdapPathSource.class)).thenReturn(new String[2]);\n\n        tested.getBaseLdapPathSourceFromApplicationContext();\n    }", "signature": "void testGetAbstractContextSourceFromApplicationContextTwoContextSources()", "full_signature": "@Test(expected = NoSuchBeanDefinitionException.class) public void testGetAbstractContextSourceFromApplicationContextTwoContextSources()", "class_method_signature": "BaseLdapPathBeanPostProcessorTest.testGetAbstractContextSourceFromApplicationContextTwoContextSources()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getBeanNamesForType", "getBaseLdapPathSourceFromApplicationContext"]}, "focal_class": {"identifier": "BaseLdapPathBeanPostProcessor", "superclass": "", "interfaces": "implements BeanPostProcessor, ApplicationContextAware, Ordered", "fields": [{"original_string": "private ApplicationContext applicationContext;", "modifier": "private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private LdapName basePath;", "modifier": "private", "type": "LdapName", "declarator": "basePath", "var_name": "basePath"}, {"original_string": "private String baseLdapPathSourceName;", "modifier": "private", "type": "String", "declarator": "baseLdapPathSourceName", "var_name": "baseLdapPathSourceName"}, {"original_string": "private int order = Ordered.LOWEST_PRECEDENCE;", "modifier": "private", "type": "int", "declarator": "order = Ordered.LOWEST_PRECEDENCE", "var_name": "order"}], "methods": [{"identifier": "postProcessBeforeInitialization", "parameters": "(Object bean, String beanName)", "modifiers": "@Override public", "return": "Object", "signature": "Object postProcessBeforeInitialization(Object bean, String beanName)", "full_signature": "@Override public Object postProcessBeforeInitialization(Object bean, String beanName)", "class_method_signature": "BaseLdapPathBeanPostProcessor.postProcessBeforeInitialization(Object bean, String beanName)", "testcase": false, "constructor": false}, {"identifier": "getBaseLdapPathSourceFromApplicationContext", "parameters": "()", "modifiers": "", "return": "BaseLdapPathSource", "signature": "BaseLdapPathSource getBaseLdapPathSourceFromApplicationContext()", "full_signature": " BaseLdapPathSource getBaseLdapPathSourceFromApplicationContext()", "class_method_signature": "BaseLdapPathBeanPostProcessor.getBaseLdapPathSourceFromApplicationContext()", "testcase": false, "constructor": false}, {"identifier": "postProcessAfterInitialization", "parameters": "(Object bean, String beanName)", "modifiers": "@Override public", "return": "Object", "signature": "Object postProcessAfterInitialization(Object bean, String beanName)", "full_signature": "@Override public Object postProcessAfterInitialization(Object bean, String beanName)", "class_method_signature": "BaseLdapPathBeanPostProcessor.postProcessAfterInitialization(Object bean, String beanName)", "testcase": false, "constructor": false}, {"identifier": "setApplicationContext", "parameters": "(ApplicationContext applicationContext)", "modifiers": "@Override public", "return": "void", "signature": "void setApplicationContext(ApplicationContext applicationContext)", "full_signature": "@Override public void setApplicationContext(ApplicationContext applicationContext)", "class_method_signature": "BaseLdapPathBeanPostProcessor.setApplicationContext(ApplicationContext applicationContext)", "testcase": false, "constructor": false}, {"identifier": "setBasePath", "parameters": "(DistinguishedName basePath)", "modifiers": "public", "return": "void", "signature": "void setBasePath(DistinguishedName basePath)", "full_signature": "public void setBasePath(DistinguishedName basePath)", "class_method_signature": "BaseLdapPathBeanPostProcessor.setBasePath(DistinguishedName basePath)", "testcase": false, "constructor": false}, {"identifier": "setBasePath", "parameters": "(String basePath)", "modifiers": "public", "return": "void", "signature": "void setBasePath(String basePath)", "full_signature": "public void setBasePath(String basePath)", "class_method_signature": "BaseLdapPathBeanPostProcessor.setBasePath(String basePath)", "testcase": false, "constructor": false}, {"identifier": "setBaseLdapPathSourceName", "parameters": "(String contextSourceName)", "modifiers": "public", "return": "void", "signature": "void setBaseLdapPathSourceName(String contextSourceName)", "full_signature": "public void setBaseLdapPathSourceName(String contextSourceName)", "class_method_signature": "BaseLdapPathBeanPostProcessor.setBaseLdapPathSourceName(String contextSourceName)", "testcase": false, "constructor": false}, {"identifier": "setOrder", "parameters": "(int order)", "modifiers": "public", "return": "void", "signature": "void setOrder(int order)", "full_signature": "public void setOrder(int order)", "class_method_signature": "BaseLdapPathBeanPostProcessor.setOrder(int order)", "testcase": false, "constructor": false}, {"identifier": "getOrder", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getOrder()", "full_signature": "public int getOrder()", "class_method_signature": "BaseLdapPathBeanPostProcessor.getOrder()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/core/support/BaseLdapPathBeanPostProcessor.java"}, "focal_method": {"identifier": "getBaseLdapPathSourceFromApplicationContext", "parameters": "()", "modifiers": "", "return": "BaseLdapPathSource", "body": "BaseLdapPathSource getBaseLdapPathSourceFromApplicationContext() {\n\t\tif (StringUtils.hasLength(baseLdapPathSourceName)) {\n\t\t\treturn applicationContext.getBean(baseLdapPathSourceName, BaseLdapPathSource.class);\n\t\t}\n\n        Collection<BaseLdapPathSource> beans = applicationContext.getBeansOfType(BaseLdapPathSource.class).values();\n        if (beans.isEmpty()) {\n            throw new NoSuchBeanDefinitionException(\"No BaseLdapPathSource implementation definition found\");\n        } else if (beans.size() == 1) {\n            return beans.iterator().next();\n        } else {\n            BaseLdapPathSource found = null;\n\n            // Try to find the correct one\n            for (BaseLdapPathSource bean : beans) {\n                if(bean instanceof AbstractContextSource) {\n                    if(found != null) {\n                        // More than one found - nothing much to do.\n                        throw new NoSuchBeanDefinitionException(\n                                \"More than BaseLdapPathSource implementation definition found in current ApplicationContext; \" +\n                                        \"unable to determine the one to use. Please specify 'baseLdapPathSourceName'\");\n                    }\n\n                    found = bean;\n                }\n            }\n\n            if(found == null) {\n                throw new NoSuchBeanDefinitionException(\n                        \"More than BaseLdapPathSource implementation definition found in current ApplicationContext; \" +\n                                \"unable to determine the one to use (one of them should be an AbstractContextSource instance). \" +\n                                \"Please specify 'baseLdapPathSourceName'\");\n            }\n\n            return found;\n        }\n\t}", "signature": "BaseLdapPathSource getBaseLdapPathSourceFromApplicationContext()", "full_signature": " BaseLdapPathSource getBaseLdapPathSourceFromApplicationContext()", "class_method_signature": "BaseLdapPathBeanPostProcessor.getBaseLdapPathSourceFromApplicationContext()", "testcase": false, "constructor": false, "invocations": ["hasLength", "getBean", "values", "getBeansOfType", "isEmpty", "size", "next", "iterator"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}