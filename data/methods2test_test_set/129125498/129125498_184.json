{"test_class": {"identifier": "GraphiteClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BASE_URI = \"http://graphite\";", "modifier": "private static final", "type": "String", "declarator": "BASE_URI = \"http://graphite\"", "var_name": "BASE_URI"}, {"original_string": "private static final String METRIC_URI = fetchMetricsUri(\"metricName\");", "modifier": "private static final", "type": "String", "declarator": "METRIC_URI = fetchMetricsUri(\"metricName\")", "var_name": "METRIC_URI"}, {"original_string": "private static final String METRIC_URI_CANT_GET = fetchMetricsUri(\"metricNameCantGet\");", "modifier": "private static final", "type": "String", "declarator": "METRIC_URI_CANT_GET = fetchMetricsUri(\"metricNameCantGet\")", "var_name": "METRIC_URI_CANT_GET"}, {"original_string": "private static final String METRIC_URI_CANT_READ = fetchMetricsUri(\"metricNameCantRead\");", "modifier": "private static final", "type": "String", "declarator": "METRIC_URI_CANT_READ = fetchMetricsUri(\"metricNameCantRead\")", "var_name": "METRIC_URI_CANT_READ"}, {"original_string": "private static final int ONE_DAY_IN_SECONDS = 60 * 60 * 24;", "modifier": "private static final", "type": "int", "declarator": "ONE_DAY_IN_SECONDS = 60 * 60 * 24", "var_name": "ONE_DAY_IN_SECONDS"}, {"original_string": "private static final int FROM_TIME_IN_SECONDS = 1580815495;", "modifier": "private static final", "type": "int", "declarator": "FROM_TIME_IN_SECONDS = 1580815495", "var_name": "FROM_TIME_IN_SECONDS"}, {"original_string": "private static final int UNTIL_TIME_IN_SECONDS = FROM_TIME_IN_SECONDS + ONE_DAY_IN_SECONDS;", "modifier": "private static final", "type": "int", "declarator": "UNTIL_TIME_IN_SECONDS = FROM_TIME_IN_SECONDS + ONE_DAY_IN_SECONDS", "var_name": "UNTIL_TIME_IN_SECONDS"}, {"original_string": "private static final int INTERVAL_LENGTH = 60;", "modifier": "private static final", "type": "int", "declarator": "INTERVAL_LENGTH = 60", "var_name": "INTERVAL_LENGTH"}, {"original_string": "private GraphiteClient clientUnderTest;", "modifier": "private", "type": "GraphiteClient", "declarator": "clientUnderTest", "var_name": "clientUnderTest"}, {"original_string": "@Mock\n    private HttpClientWrapper httpClient;", "modifier": "@Mock\n    private", "type": "HttpClientWrapper", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "@Mock\n    private ObjectMapper objectMapper;", "modifier": "@Mock\n    private", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "@Mock\n    private Content docsContent;", "modifier": "@Mock\n    private", "type": "Content", "declarator": "docsContent", "var_name": "docsContent"}, {"original_string": "@Mock\n    private Content docContent_cantRead;", "modifier": "@Mock\n    private", "type": "Content", "declarator": "docContent_cantRead", "var_name": "docContent_cantRead"}, {"original_string": "private byte[] docsBytes = \"docsBytes\".getBytes();", "modifier": "private", "type": "byte[]", "declarator": "docsBytes = \"docsBytes\".getBytes()", "var_name": "docsBytes"}, {"original_string": "private byte[] docBytes_cantRead = \"docBytes_cantRead\".getBytes();", "modifier": "private", "type": "byte[]", "declarator": "docBytes_cantRead = \"docBytes_cantRead\".getBytes()", "var_name": "docBytes_cantRead"}, {"original_string": "private GraphiteResult[] docs = {};", "modifier": "private", "type": "GraphiteResult[]", "declarator": "docs = {}", "var_name": "docs"}, {"original_string": "private Map<String, String> headers = Collections.singletonMap(\"x-org-id\", \"1\");", "modifier": "private", "type": "Map<String, String>", "declarator": "headers = Collections.singletonMap(\"x-org-id\", \"1\")", "var_name": "headers"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/source/data/graphite/GraphiteClientTest.java"}, "test_case": {"identifier": "testGetMetricData_cant_get", "parameters": "()", "modifiers": "@Test(expected = GraphiteClientException.class) public", "return": "void", "body": "@Test(expected = GraphiteClientException.class)\n    public void testGetMetricData_cant_get() {\n        clientUnderTest.getData(FROM_TIME_IN_SECONDS, UNTIL_TIME_IN_SECONDS, INTERVAL_LENGTH, \"metricNameCantGet\");\n    }", "signature": "void testGetMetricData_cant_get()", "full_signature": "@Test(expected = GraphiteClientException.class) public void testGetMetricData_cant_get()", "class_method_signature": "GraphiteClientTest.testGetMetricData_cant_get()", "testcase": true, "constructor": false, "invocations": ["getData"]}, "focal_class": {"identifier": "GraphiteClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String FETCH_METRICS_PATH = \"/render?from=%d&until=%d&maxDataPoints=%d&format=json&target=%s\";", "modifier": "public static final", "type": "String", "declarator": "FETCH_METRICS_PATH = \"/render?from=%d&until=%d&maxDataPoints=%d&format=json&target=%s\"", "var_name": "FETCH_METRICS_PATH"}, {"original_string": "@NonNull\n    private final String baseUri;", "modifier": "@NonNull\n    private final", "type": "String", "declarator": "baseUri", "var_name": "baseUri"}, {"original_string": "@NonNull\n    private final HttpClientWrapper httpClient;", "modifier": "@NonNull\n    private final", "type": "HttpClientWrapper", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "@NonNull\n    private final ObjectMapper objectMapper;", "modifier": "@NonNull\n    private final", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}], "methods": [{"identifier": "getData", "parameters": "(long from, long until, int intervalLength, String target)", "modifiers": "public", "return": "List<GraphiteResult>", "signature": "List<GraphiteResult> getData(long from, long until, int intervalLength, String target)", "full_signature": "public List<GraphiteResult> getData(long from, long until, int intervalLength, String target)", "class_method_signature": "GraphiteClient.getData(long from, long until, int intervalLength, String target)", "testcase": false, "constructor": false}, {"identifier": "calculateMaxDataPointsPerDay", "parameters": "(long from, long until, int intervalLength)", "modifiers": "private", "return": "long", "signature": "long calculateMaxDataPointsPerDay(long from, long until, int intervalLength)", "full_signature": "private long calculateMaxDataPointsPerDay(long from, long until, int intervalLength)", "class_method_signature": "GraphiteClient.calculateMaxDataPointsPerDay(long from, long until, int intervalLength)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/source/data/graphite/GraphiteClient.java"}, "focal_method": {"identifier": "getData", "parameters": "(long from, long until, int intervalLength, String target)", "modifiers": "public", "return": "List<GraphiteResult>", "body": "public List<GraphiteResult> getData(long from, long until, int intervalLength, String target) {\n\n        notNull(from, \"from can't be null\");\n        notNull(until, \"until can't be null\");\n        notNull(target, \"target can't be null\");\n\n        // Explicitly specify maxDataPoints in case the number of metrics per day required exceeds server's default maxDataPoints limit\n        val maxDataPoints = calculateMaxDataPointsPerDay(from, until, intervalLength);\n        val uri = String.format(baseUri + FETCH_METRICS_PATH, from, until, maxDataPoints, target);\n        log.debug(\"Sending query to Graphite target: {}\", uri);\n\n        //FIXME x-org-id is a mandatory header for metric tank.\n        // In future, we would like to make it configurable as the only difference between graphite client and metric tank client is x-org-id header.\n        val headers = Collections.singletonMap(\"x-org-id\", \"1\");\n        Content content;\n        try {\n            content = httpClient.get(uri, headers);\n        } catch (IOException e) {\n            val message = String.format(\"Encountered IOException while querying Metrictank target '%s': httpMethod=GET, uri=%s, message=%s\",\n                    target,\n                    uri,\n                    e.getMessage());\n            throw new GraphiteClientException(message, e);\n        }\n\n        List<GraphiteResult> results;\n        try {\n            results = Arrays.asList(objectMapper.readValue(content.asBytes(), GraphiteResult[].class));\n        } catch (IOException e) {\n            throw new GraphiteClientException(String.format(\"IOException while parsing response from Metrictank target: %s\", target), e);\n        }\n        return results;\n    }", "signature": "List<GraphiteResult> getData(long from, long until, int intervalLength, String target)", "full_signature": "public List<GraphiteResult> getData(long from, long until, int intervalLength, String target)", "class_method_signature": "GraphiteClient.getData(long from, long until, int intervalLength, String target)", "testcase": false, "constructor": false, "invocations": ["notNull", "notNull", "notNull", "calculateMaxDataPointsPerDay", "format", "debug", "singletonMap", "get", "format", "getMessage", "asList", "readValue", "asBytes", "format"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}