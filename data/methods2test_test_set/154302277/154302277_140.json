{"test_class": {"identifier": "FirmwareServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private FirmwareFileCachingRepository firmwareFileCachingRepository;", "modifier": "@Mock\n    private", "type": "FirmwareFileCachingRepository", "declarator": "firmwareFileCachingRepository", "var_name": "firmwareFileCachingRepository"}, {"original_string": "@Mock\n    private GetFirmwareVersionsCommandExecutor getFirmwareVersionsCommandExecutor;", "modifier": "@Mock\n    private", "type": "GetFirmwareVersionsCommandExecutor", "declarator": "getFirmwareVersionsCommandExecutor", "var_name": "getFirmwareVersionsCommandExecutor"}, {"original_string": "@Mock\n    private UpdateFirmwareCommandExecutor updateFirmwareCommandExecutor;", "modifier": "@Mock\n    private", "type": "UpdateFirmwareCommandExecutor", "declarator": "updateFirmwareCommandExecutor", "var_name": "updateFirmwareCommandExecutor"}, {"original_string": "@Mock\n    private DlmsConnectionManager dlmsConnectionManagerMock;", "modifier": "@Mock\n    private", "type": "DlmsConnectionManager", "declarator": "dlmsConnectionManagerMock", "var_name": "dlmsConnectionManagerMock"}, {"original_string": "@Mock\n    private DlmsDevice dlmsDeviceMock;", "modifier": "@Mock\n    private", "type": "DlmsDevice", "declarator": "dlmsDeviceMock", "var_name": "dlmsDeviceMock"}, {"original_string": "@InjectMocks\n    private FirmwareService firmwareService;", "modifier": "@InjectMocks\n    private", "type": "FirmwareService", "declarator": "firmwareService", "var_name": "firmwareService"}], "file": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/FirmwareServiceTest.java"}, "test_case": {"identifier": "updateFirmwareShouldThrowExceptionWhenFirmwareFileNotInCache", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void updateFirmwareShouldThrowExceptionWhenFirmwareFileNotInCache() throws OsgpException {\n        // Arrange\n        final String firmwareIdentification = \"fw\";\n        when(this.firmwareFileCachingRepository.retrieve(firmwareIdentification)).thenReturn(null);\n\n        // Act\n        assertThatExceptionOfType(ProtocolAdapterException.class).isThrownBy(() -> {\n            this.firmwareService.updateFirmware(this.dlmsConnectionManagerMock, this.dlmsDeviceMock,\n                    firmwareIdentification);\n\n            // Assert\n            // Nothing to do, as exception will be thrown;\n        });\n    }", "signature": "void updateFirmwareShouldThrowExceptionWhenFirmwareFileNotInCache()", "full_signature": "@Test public void updateFirmwareShouldThrowExceptionWhenFirmwareFileNotInCache()", "class_method_signature": "FirmwareServiceTest.updateFirmwareShouldThrowExceptionWhenFirmwareFileNotInCache()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "retrieve", "isThrownBy", "assertThatExceptionOfType", "updateFirmware"]}, "focal_class": {"identifier": "FirmwareService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(FirmwareService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(FirmwareService.class)", "var_name": "LOGGER"}, {"original_string": "private static final String EXCEPTION_MSG_FIRMWARE_FILE_NOT_AVAILABLE = \"Firmware file is not available.\";", "modifier": "private static final", "type": "String", "declarator": "EXCEPTION_MSG_FIRMWARE_FILE_NOT_AVAILABLE = \"Firmware file is not available.\"", "var_name": "EXCEPTION_MSG_FIRMWARE_FILE_NOT_AVAILABLE"}, {"original_string": "@Autowired\n    private FirmwareFileCachingRepository firmwareRepository;", "modifier": "@Autowired\n    private", "type": "FirmwareFileCachingRepository", "declarator": "firmwareRepository", "var_name": "firmwareRepository"}, {"original_string": "@Autowired\n    private GetFirmwareVersionsCommandExecutor getFirmwareVersionsCommandExecutor;", "modifier": "@Autowired\n    private", "type": "GetFirmwareVersionsCommandExecutor", "declarator": "getFirmwareVersionsCommandExecutor", "var_name": "getFirmwareVersionsCommandExecutor"}, {"original_string": "@Autowired\n    private UpdateFirmwareCommandExecutor updateFirmwareCommandExecutor;", "modifier": "@Autowired\n    private", "type": "UpdateFirmwareCommandExecutor", "declarator": "updateFirmwareCommandExecutor", "var_name": "updateFirmwareCommandExecutor"}], "methods": [{"identifier": "getFirmwareVersions", "parameters": "(final DlmsConnectionManager conn, final DlmsDevice device)", "modifiers": "public", "return": "List<FirmwareVersionDto>", "signature": "List<FirmwareVersionDto> getFirmwareVersions(final DlmsConnectionManager conn, final DlmsDevice device)", "full_signature": "public List<FirmwareVersionDto> getFirmwareVersions(final DlmsConnectionManager conn, final DlmsDevice device)", "class_method_signature": "FirmwareService.getFirmwareVersions(final DlmsConnectionManager conn, final DlmsDevice device)", "testcase": false, "constructor": false}, {"identifier": "updateFirmware", "parameters": "(final DlmsConnectionManager conn, final DlmsDevice device,\n            final String firmwareIdentification)", "modifiers": "public", "return": "UpdateFirmwareResponseDto", "signature": "UpdateFirmwareResponseDto updateFirmware(final DlmsConnectionManager conn, final DlmsDevice device,\n            final String firmwareIdentification)", "full_signature": "public UpdateFirmwareResponseDto updateFirmware(final DlmsConnectionManager conn, final DlmsDevice device,\n            final String firmwareIdentification)", "class_method_signature": "FirmwareService.updateFirmware(final DlmsConnectionManager conn, final DlmsDevice device,\n            final String firmwareIdentification)", "testcase": false, "constructor": false}, {"identifier": "updateFirmware", "parameters": "(final DlmsConnectionManager conn, final DlmsDevice device,\n            final FirmwareFileDto firmwareFileDto)", "modifiers": "public", "return": "UpdateFirmwareResponseDto", "signature": "UpdateFirmwareResponseDto updateFirmware(final DlmsConnectionManager conn, final DlmsDevice device,\n            final FirmwareFileDto firmwareFileDto)", "full_signature": "public UpdateFirmwareResponseDto updateFirmware(final DlmsConnectionManager conn, final DlmsDevice device,\n            final FirmwareFileDto firmwareFileDto)", "class_method_signature": "FirmwareService.updateFirmware(final DlmsConnectionManager conn, final DlmsDevice device,\n            final FirmwareFileDto firmwareFileDto)", "testcase": false, "constructor": false}, {"identifier": "isFirmwareFileAvailable", "parameters": "(final String firmwareIdentification)", "modifiers": "public", "return": "boolean", "signature": "boolean isFirmwareFileAvailable(final String firmwareIdentification)", "full_signature": "public boolean isFirmwareFileAvailable(final String firmwareIdentification)", "class_method_signature": "FirmwareService.isFirmwareFileAvailable(final String firmwareIdentification)", "testcase": false, "constructor": false}, {"identifier": "executeFirmwareUpdate", "parameters": "(final DlmsConnectionManager conn, final DlmsDevice device,\n            final String firmwareIdentification)", "modifiers": "private", "return": "UpdateFirmwareResponseDto", "signature": "UpdateFirmwareResponseDto executeFirmwareUpdate(final DlmsConnectionManager conn, final DlmsDevice device,\n            final String firmwareIdentification)", "full_signature": "private UpdateFirmwareResponseDto executeFirmwareUpdate(final DlmsConnectionManager conn, final DlmsDevice device,\n            final String firmwareIdentification)", "class_method_signature": "FirmwareService.executeFirmwareUpdate(final DlmsConnectionManager conn, final DlmsDevice device,\n            final String firmwareIdentification)", "testcase": false, "constructor": false}], "file": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/FirmwareService.java"}, "focal_method": {"identifier": "updateFirmware", "parameters": "(final DlmsConnectionManager conn, final DlmsDevice device,\n            final String firmwareIdentification)", "modifiers": "public", "return": "UpdateFirmwareResponseDto", "body": "public UpdateFirmwareResponseDto updateFirmware(final DlmsConnectionManager conn, final DlmsDevice device,\n            final String firmwareIdentification) throws OsgpException {\n        LOGGER.info(\"Updating firmware of device {} to firmware with identification {}\", device,\n                firmwareIdentification);\n\n        return this.executeFirmwareUpdate(conn, device, firmwareIdentification);\n    }", "signature": "UpdateFirmwareResponseDto updateFirmware(final DlmsConnectionManager conn, final DlmsDevice device,\n            final String firmwareIdentification)", "full_signature": "public UpdateFirmwareResponseDto updateFirmware(final DlmsConnectionManager conn, final DlmsDevice device,\n            final String firmwareIdentification)", "class_method_signature": "FirmwareService.updateFirmware(final DlmsConnectionManager conn, final DlmsDevice device,\n            final String firmwareIdentification)", "testcase": false, "constructor": false, "invocations": ["info", "executeFirmwareUpdate"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}