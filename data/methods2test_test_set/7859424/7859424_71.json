{"test_class": {"identifier": "NotEyeLikeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Board board;", "modifier": "private", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private NotEyeLike notEyeLike;", "modifier": "private", "type": "NotEyeLike", "declarator": "notEyeLike", "var_name": "notEyeLike"}], "file": "src/edu/lclark/orego/feature/NotEyeLikeTest.java"}, "test_case": {"identifier": "testCenter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCenter() {\n\t\tString[] before = {\n\t\t\t\t\".....\",\n\t\t\t\t\".#O#.\",\n\t\t\t\t\"#.#.#\",\n\t\t\t\t\".#.#O\",\n\t\t\t\t\".....\",\n\t\t};\n\t\tboard.setUpProblem(before, BLACK);\n\t\tassertFalse(notEyeLike.at(at(\"b3\")));\n\t\tassertTrue(notEyeLike.at(at(\"d3\")));\n\t\tassertTrue(notEyeLike.at(at(\"c2\")));\n\t}", "signature": "void testCenter()", "full_signature": "@Test public void testCenter()", "class_method_signature": "NotEyeLikeTest.testCenter()", "testcase": true, "constructor": false, "invocations": ["setUpProblem", "assertFalse", "at", "at", "assertTrue", "at", "at", "assertTrue", "at", "at"]}, "focal_class": {"identifier": "NotEyeLike", "superclass": "", "interfaces": "implements Predicate", "fields": [{"original_string": "private final Board board;", "modifier": "private final", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private final int[] edgeEnemies;", "modifier": "private final", "type": "int[]", "declarator": "edgeEnemies", "var_name": "edgeEnemies"}], "methods": [{"identifier": "NotEyeLike", "parameters": "(Board board)", "modifiers": "public", "return": "", "signature": " NotEyeLike(Board board)", "full_signature": "public  NotEyeLike(Board board)", "class_method_signature": "NotEyeLike.NotEyeLike(Board board)", "testcase": false, "constructor": true}, {"identifier": "at", "parameters": "(short p)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean at(short p)", "full_signature": "@Override public boolean at(short p)", "class_method_signature": "NotEyeLike.at(short p)", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/feature/NotEyeLike.java"}, "focal_method": {"identifier": "at", "parameters": "(short p)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean at(short p) {\n\t\tassert board.getColorAt(p) == VACANT;\n\t\tfinal StoneColor color = board.getColorToPlay();\n\t\tif (!board.hasMaxNeighborsForColor(color, p)) {\n\t\t\treturn true;\n\t\t}\n\t\tint count = edgeEnemies[p];\n\t\tfinal StoneColor enemy = color.opposite();\n\t\tfinal short[] neighbors = board.getCoordinateSystem().getNeighbors(p);\n\t\tfor (int i = FIRST_DIAGONAL_NEIGHBOR; i <= LAST_DIAGONAL_NEIGHBOR; i++) {\n\t\t\tif (board.getColorAt(neighbors[i]) == enemy) {\n\t\t\t\tcount++;\n\t\t\t\tif (count >= 2) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "signature": "boolean at(short p)", "full_signature": "@Override public boolean at(short p)", "class_method_signature": "NotEyeLike.at(short p)", "testcase": false, "constructor": false, "invocations": ["getColorAt", "getColorToPlay", "hasMaxNeighborsForColor", "opposite", "getNeighbors", "getCoordinateSystem", "getColorAt"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}