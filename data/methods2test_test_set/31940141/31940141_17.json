{"test_class": {"identifier": "VariableTableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ClassNode classNode;", "modifier": "private", "type": "ClassNode", "declarator": "classNode", "var_name": "classNode"}, {"original_string": "private MethodNode methodNode;", "modifier": "private", "type": "MethodNode", "declarator": "methodNode", "var_name": "methodNode"}], "file": "instrumenter/src/test/java/com/offbynull/coroutines/instrumenter/asm/VariableTableTest.java"}, "test_case": {"identifier": "mustBeAbleToAcquireExtraVariable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mustBeAbleToAcquireExtraVariable() {\n        VariableTable fixture = new VariableTable(classNode, methodNode);\n        \n        Variable var1 = fixture.acquireExtra(Type.LONG_TYPE);\n        assertEquals(var1.getType(), Type.LONG_TYPE);\n        assertEquals(var1.getIndex(), 1);\n        assertTrue(var1.isUsed());\n        \n        Variable var2 = fixture.acquireExtra(Type.BOOLEAN_TYPE);\n        assertEquals(var2.getType(), Type.BOOLEAN_TYPE);\n        assertEquals(var2.getIndex(), 3);\n        assertTrue(var2.isUsed());\n    }", "signature": "void mustBeAbleToAcquireExtraVariable()", "full_signature": "@Test public void mustBeAbleToAcquireExtraVariable()", "class_method_signature": "VariableTableTest.mustBeAbleToAcquireExtraVariable()", "testcase": true, "constructor": false, "invocations": ["acquireExtra", "assertEquals", "getType", "assertEquals", "getIndex", "assertTrue", "isUsed", "acquireExtra", "assertEquals", "getType", "assertEquals", "getIndex", "assertTrue", "isUsed"]}, "focal_class": {"identifier": "VariableTable", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<Variable> argVars;", "modifier": "private", "type": "List<Variable>", "declarator": "argVars", "var_name": "argVars"}, {"original_string": "private int extraOffset;", "modifier": "private", "type": "int", "declarator": "extraOffset", "var_name": "extraOffset"}, {"original_string": "private List<Variable> extraVars;", "modifier": "private", "type": "List<Variable>", "declarator": "extraVars", "var_name": "extraVars"}], "methods": [{"identifier": "VariableTable", "parameters": "(ClassNode classNode, MethodNode methodNode)", "modifiers": "public", "return": "", "signature": " VariableTable(ClassNode classNode, MethodNode methodNode)", "full_signature": "public  VariableTable(ClassNode classNode, MethodNode methodNode)", "class_method_signature": "VariableTable.VariableTable(ClassNode classNode, MethodNode methodNode)", "testcase": false, "constructor": true}, {"identifier": "VariableTable", "parameters": "(boolean isStatic, Type objectType, Type methodType, int maxLocals)", "modifiers": "private", "return": "", "signature": " VariableTable(boolean isStatic, Type objectType, Type methodType, int maxLocals)", "full_signature": "private  VariableTable(boolean isStatic, Type objectType, Type methodType, int maxLocals)", "class_method_signature": "VariableTable.VariableTable(boolean isStatic, Type objectType, Type methodType, int maxLocals)", "testcase": false, "constructor": true}, {"identifier": "getArgument", "parameters": "(int index)", "modifiers": "public", "return": "Variable", "signature": "Variable getArgument(int index)", "full_signature": "public Variable getArgument(int index)", "class_method_signature": "VariableTable.getArgument(int index)", "testcase": false, "constructor": false}, {"identifier": "acquireExtra", "parameters": "(Class<?> type)", "modifiers": "public", "return": "Variable", "signature": "Variable acquireExtra(Class<?> type)", "full_signature": "public Variable acquireExtra(Class<?> type)", "class_method_signature": "VariableTable.acquireExtra(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "acquireExtra", "parameters": "(Type type)", "modifiers": "public", "return": "Variable", "signature": "Variable acquireExtra(Type type)", "full_signature": "public Variable acquireExtra(Type type)", "class_method_signature": "VariableTable.acquireExtra(Type type)", "testcase": false, "constructor": false}, {"identifier": "releaseExtra", "parameters": "(Variable variable)", "modifiers": "public", "return": "void", "signature": "void releaseExtra(Variable variable)", "full_signature": "public void releaseExtra(Variable variable)", "class_method_signature": "VariableTable.releaseExtra(Variable variable)", "testcase": false, "constructor": false}, {"identifier": "getArgCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getArgCount()", "full_signature": "public int getArgCount()", "class_method_signature": "VariableTable.getArgCount()", "testcase": false, "constructor": false}], "file": "instrumenter/src/main/java/com/offbynull/coroutines/instrumenter/asm/VariableTable.java"}, "focal_method": {"identifier": "acquireExtra", "parameters": "(Class<?> type)", "modifiers": "public", "return": "Variable", "body": "public Variable acquireExtra(Class<?> type) {\n        Validate.notNull(type);\n        \n        return acquireExtra(Type.getType(type));\n    }", "signature": "Variable acquireExtra(Class<?> type)", "full_signature": "public Variable acquireExtra(Class<?> type)", "class_method_signature": "VariableTable.acquireExtra(Class<?> type)", "testcase": false, "constructor": false, "invocations": ["notNull", "acquireExtra", "getType"]}, "repository": {"repo_id": 31940141, "url": "https://github.com/offbynull/coroutines", "language": "Java", "is_fork": false, "fork_count": 45, "stargazer_count": 287, "size": 841, "license": "licensed"}}