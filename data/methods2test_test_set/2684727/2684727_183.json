{"test_class": {"identifier": "PaymentMethodDatabaseAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int ID = 5;", "modifier": "private static final", "type": "int", "declarator": "ID = 5", "var_name": "ID"}, {"original_string": "private static final String METHOD = \"abcd\";", "modifier": "private static final", "type": "String", "declarator": "METHOD = \"abcd\"", "var_name": "METHOD"}, {"original_string": "private static final long CUSTOM_ORDER = 8;", "modifier": "private static final", "type": "long", "declarator": "CUSTOM_ORDER = 8", "var_name": "CUSTOM_ORDER"}, {"original_string": "private static final UUID PM_UUID = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "PM_UUID = UUID.randomUUID()", "var_name": "PM_UUID"}, {"original_string": "PaymentMethodDatabaseAdapter mPaymentMethodDatabaseAdapter;", "modifier": "", "type": "PaymentMethodDatabaseAdapter", "declarator": "mPaymentMethodDatabaseAdapter", "var_name": "mPaymentMethodDatabaseAdapter"}, {"original_string": "@Mock\n    Cursor mCursor;", "modifier": "@Mock", "type": "Cursor", "declarator": "mCursor", "var_name": "mCursor"}, {"original_string": "@Mock\n    PaymentMethod mPaymentMethod;", "modifier": "@Mock", "type": "PaymentMethod", "declarator": "mPaymentMethod", "var_name": "mPaymentMethod"}, {"original_string": "@Mock\n    SyncStateAdapter mSyncStateAdapter;", "modifier": "@Mock", "type": "SyncStateAdapter", "declarator": "mSyncStateAdapter", "var_name": "mSyncStateAdapter"}, {"original_string": "@Mock\n    SyncState mSyncState, mGetSyncState;", "modifier": "@Mock", "type": "SyncState", "declarator": "mSyncState", "var_name": "mSyncState"}], "file": "app/src/test/java/co/smartreceipts/android/persistence/database/tables/adapters/PaymentMethodDatabaseAdapterTest.java"}, "test_case": {"identifier": "build", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void build() throws Exception {\n        final PaymentMethod paymentMethod = new PaymentMethodBuilderFactory()\n                .setId(ID)\n                .setUuid(PM_UUID)\n                .setMethod(METHOD)\n                .setSyncState(mGetSyncState)\n                .setCustomOrderId(CUSTOM_ORDER)\n                .build();\n        final PaymentMethod actual = mPaymentMethodDatabaseAdapter.build(mPaymentMethod, ID, PM_UUID, mock(DatabaseOperationMetadata.class));\n\n        assertEquals(paymentMethod, actual);\n    }", "signature": "void build()", "full_signature": "@Test public void build()", "class_method_signature": "PaymentMethodDatabaseAdapterTest.build()", "testcase": true, "constructor": false, "invocations": ["build", "setCustomOrderId", "setSyncState", "setMethod", "setUuid", "setId", "build", "mock", "assertEquals"]}, "focal_class": {"identifier": "PaymentMethodDatabaseAdapter", "superclass": "", "interfaces": "implements DatabaseAdapter<PaymentMethod>", "fields": [{"original_string": "private final SyncStateAdapter mSyncStateAdapter;", "modifier": "private final", "type": "SyncStateAdapter", "declarator": "mSyncStateAdapter", "var_name": "mSyncStateAdapter"}], "methods": [{"identifier": "PaymentMethodDatabaseAdapter", "parameters": "()", "modifiers": "public", "return": "", "signature": " PaymentMethodDatabaseAdapter()", "full_signature": "public  PaymentMethodDatabaseAdapter()", "class_method_signature": "PaymentMethodDatabaseAdapter.PaymentMethodDatabaseAdapter()", "testcase": false, "constructor": true}, {"identifier": "PaymentMethodDatabaseAdapter", "parameters": "(@NonNull SyncStateAdapter syncStateAdapter)", "modifiers": "public", "return": "", "signature": " PaymentMethodDatabaseAdapter(@NonNull SyncStateAdapter syncStateAdapter)", "full_signature": "public  PaymentMethodDatabaseAdapter(@NonNull SyncStateAdapter syncStateAdapter)", "class_method_signature": "PaymentMethodDatabaseAdapter.PaymentMethodDatabaseAdapter(@NonNull SyncStateAdapter syncStateAdapter)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "(@NonNull Cursor cursor)", "modifiers": "@NonNull @Override public", "return": "PaymentMethod", "signature": "PaymentMethod read(@NonNull Cursor cursor)", "full_signature": "@NonNull @Override public PaymentMethod read(@NonNull Cursor cursor)", "class_method_signature": "PaymentMethodDatabaseAdapter.read(@NonNull Cursor cursor)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(@NonNull PaymentMethod paymentMethod, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@NonNull @Override public", "return": "ContentValues", "signature": "ContentValues write(@NonNull PaymentMethod paymentMethod, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@NonNull @Override public ContentValues write(@NonNull PaymentMethod paymentMethod, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "PaymentMethodDatabaseAdapter.write(@NonNull PaymentMethod paymentMethod, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(@NonNull PaymentMethod paymentMethod, int primaryKey,\n                               @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@NonNull @Override public", "return": "PaymentMethod", "signature": "PaymentMethod build(@NonNull PaymentMethod paymentMethod, int primaryKey,\n                               @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@NonNull @Override public PaymentMethod build(@NonNull PaymentMethod paymentMethod, int primaryKey,\n                               @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "PaymentMethodDatabaseAdapter.build(@NonNull PaymentMethod paymentMethod, int primaryKey,\n                               @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/persistence/database/tables/adapters/PaymentMethodDatabaseAdapter.java"}, "focal_method": {"identifier": "build", "parameters": "(@NonNull PaymentMethod paymentMethod, int primaryKey,\n                               @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@NonNull @Override public", "return": "PaymentMethod", "body": "@NonNull\n    @Override\n    public PaymentMethod build(@NonNull PaymentMethod paymentMethod, int primaryKey,\n                               @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata) {\n        return new PaymentMethodBuilderFactory()\n                .setId(primaryKey)\n                .setUuid(uuid)\n                .setMethod(paymentMethod.getMethod())\n                .setSyncState(mSyncStateAdapter.get(paymentMethod.getSyncState(), databaseOperationMetadata))\n                .setCustomOrderId(paymentMethod.getCustomOrderId())\n                .setReimbursable(paymentMethod.isReimbursable())\n                .build();\n    }", "signature": "PaymentMethod build(@NonNull PaymentMethod paymentMethod, int primaryKey,\n                               @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@NonNull @Override public PaymentMethod build(@NonNull PaymentMethod paymentMethod, int primaryKey,\n                               @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "PaymentMethodDatabaseAdapter.build(@NonNull PaymentMethod paymentMethod, int primaryKey,\n                               @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false, "invocations": ["build", "setReimbursable", "setCustomOrderId", "setSyncState", "setMethod", "setUuid", "setId", "getMethod", "get", "getSyncState", "getCustomOrderId", "isReimbursable"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}