{"test_class": {"identifier": "QueueCircuitBreakerConfigurationResourceManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private ResourceStorage storage;", "modifier": "private", "type": "ResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final String CONFIGURATION_URI = \"/playground/server/admin/v1/circuitbreaker\";", "modifier": "private final", "type": "String", "declarator": "CONFIGURATION_URI = \"/playground/server/admin/v1/circuitbreaker\"", "var_name": "CONFIGURATION_URI"}, {"original_string": "private final String INITIAL_CONFIG_RESOURCE = ResourcesUtils.loadResource(\"testresource_inital_circuitbreaker_resource\", true);", "modifier": "private final", "type": "String", "declarator": "INITIAL_CONFIG_RESOURCE = ResourcesUtils.loadResource(\"testresource_inital_circuitbreaker_resource\", true)", "var_name": "INITIAL_CONFIG_RESOURCE"}, {"original_string": "private final String VALID_CONFIG_RESOURCE = ResourcesUtils.loadResource(\"testresource_valid_circuitbreaker_resource\", true);", "modifier": "private final", "type": "String", "declarator": "VALID_CONFIG_RESOURCE = ResourcesUtils.loadResource(\"testresource_valid_circuitbreaker_resource\", true)", "var_name": "VALID_CONFIG_RESOURCE"}, {"original_string": "private final String INVALID_CONFIG_RESOURCE = ResourcesUtils.loadResource(\"testresource_invalid_circuitbreaker_resource\", true);", "modifier": "private final", "type": "String", "declarator": "INVALID_CONFIG_RESOURCE = ResourcesUtils.loadResource(\"testresource_invalid_circuitbreaker_resource\", true)", "var_name": "INVALID_CONFIG_RESOURCE"}], "file": "gateleen-queue/src/test/java/org/swisspush/gateleen/queue/queuing/circuitbreaker/configuration/QueueCircuitBreakerConfigurationResourceManagerTest.java"}, "test_case": {"identifier": "testDefaultConfigValues", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDefaultConfigValues(TestContext context){\n        QueueCircuitBreakerConfigurationResourceManager manager = new QueueCircuitBreakerConfigurationResourceManager(vertx, new MockResourceStorage(), CONFIGURATION_URI);\n\n        QueueCircuitBreakerConfigurationResource config = manager.getConfigurationResource();\n\n        context.assertFalse(config.isCircuitCheckEnabled());\n        context.assertFalse(config.isStatisticsUpdateEnabled());\n        context.assertEquals(90, config.getErrorThresholdPercentage());\n        context.assertEquals(86400000, config.getEntriesMaxAgeMS());\n        context.assertEquals(100, config.getMinQueueSampleCount());\n        context.assertEquals(5000, config.getMaxQueueSampleCount());\n        context.assertFalse(config.isOpenToHalfOpenTaskEnabled());\n        context.assertEquals(120000, config.getOpenToHalfOpenTaskInterval());\n        context.assertFalse(config.isUnlockQueuesTaskEnabled());\n        context.assertEquals(10000, config.getUnlockQueuesTaskInterval());\n        context.assertFalse(config.isUnlockSampleQueuesTaskEnabled());\n        context.assertEquals(120000, config.getUnlockSampleQueuesTaskInterval());\n    }", "signature": "void testDefaultConfigValues(TestContext context)", "full_signature": "@Test public void testDefaultConfigValues(TestContext context)", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManagerTest.testDefaultConfigValues(TestContext context)", "testcase": true, "constructor": false, "invocations": ["getConfigurationResource", "assertFalse", "isCircuitCheckEnabled", "assertFalse", "isStatisticsUpdateEnabled", "assertEquals", "getErrorThresholdPercentage", "assertEquals", "getEntriesMaxAgeMS", "assertEquals", "getMinQueueSampleCount", "assertEquals", "getMaxQueueSampleCount", "assertFalse", "isOpenToHalfOpenTaskEnabled", "assertEquals", "getOpenToHalfOpenTaskInterval", "assertFalse", "isUnlockQueuesTaskEnabled", "assertEquals", "getUnlockQueuesTaskInterval", "assertFalse", "isUnlockSampleQueuesTaskEnabled", "assertEquals", "getUnlockSampleQueuesTaskInterval"]}, "focal_class": {"identifier": "QueueCircuitBreakerConfigurationResourceManager", "superclass": "", "interfaces": "implements LoggableResource", "fields": [{"original_string": "private static final String UPDATE_ADDRESS = \"gateleen.queue-circuit-breaker.config-updated\";", "modifier": "private static final", "type": "String", "declarator": "UPDATE_ADDRESS = \"gateleen.queue-circuit-breaker.config-updated\"", "var_name": "UPDATE_ADDRESS"}, {"original_string": "private boolean logConfigurationResourceChanges = false;", "modifier": "private", "type": "boolean", "declarator": "logConfigurationResourceChanges = false", "var_name": "logConfigurationResourceChanges"}, {"original_string": "private final String circuitBreakerConfigUri;", "modifier": "private final", "type": "String", "declarator": "circuitBreakerConfigUri", "var_name": "circuitBreakerConfigUri"}, {"original_string": "private final ResourceStorage storage;", "modifier": "private final", "type": "ResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final Logger log = LoggerFactory.getLogger(QueueCircuitBreakerConfigurationResourceManager.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(QueueCircuitBreakerConfigurationResourceManager.class)", "var_name": "log"}, {"original_string": "private final Vertx vertx;", "modifier": "private final", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private QueueCircuitBreakerConfigurationResource configurationResource;", "modifier": "private", "type": "QueueCircuitBreakerConfigurationResource", "declarator": "configurationResource", "var_name": "configurationResource"}, {"original_string": "private final List<Refreshable> refreshables;", "modifier": "private final", "type": "List<Refreshable>", "declarator": "refreshables", "var_name": "refreshables"}, {"original_string": "private final String configResourceSchema;", "modifier": "private final", "type": "String", "declarator": "configResourceSchema", "var_name": "configResourceSchema"}], "methods": [{"identifier": "QueueCircuitBreakerConfigurationResourceManager", "parameters": "(Vertx vertx, ResourceStorage storage, String circuitBreakerConfigUri)", "modifiers": "public", "return": "", "signature": " QueueCircuitBreakerConfigurationResourceManager(Vertx vertx, ResourceStorage storage, String circuitBreakerConfigUri)", "full_signature": "public  QueueCircuitBreakerConfigurationResourceManager(Vertx vertx, ResourceStorage storage, String circuitBreakerConfigUri)", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManager.QueueCircuitBreakerConfigurationResourceManager(Vertx vertx, ResourceStorage storage, String circuitBreakerConfigUri)", "testcase": false, "constructor": true}, {"identifier": "getConfigurationResource", "parameters": "()", "modifiers": "public", "return": "QueueCircuitBreakerConfigurationResource", "signature": "QueueCircuitBreakerConfigurationResource getConfigurationResource()", "full_signature": "public QueueCircuitBreakerConfigurationResource getConfigurationResource()", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManager.getConfigurationResource()", "testcase": false, "constructor": false}, {"identifier": "enableResourceLogging", "parameters": "(boolean resourceLoggingEnabled)", "modifiers": "@Override public", "return": "void", "signature": "void enableResourceLogging(boolean resourceLoggingEnabled)", "full_signature": "@Override public void enableResourceLogging(boolean resourceLoggingEnabled)", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManager.enableResourceLogging(boolean resourceLoggingEnabled)", "testcase": false, "constructor": false}, {"identifier": "addRefreshable", "parameters": "(Refreshable refreshable)", "modifiers": "public", "return": "void", "signature": "void addRefreshable(Refreshable refreshable)", "full_signature": "public void addRefreshable(Refreshable refreshable)", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManager.addRefreshable(Refreshable refreshable)", "testcase": false, "constructor": false}, {"identifier": "handleConfigurationResource", "parameters": "(final HttpServerRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean handleConfigurationResource(final HttpServerRequest request)", "full_signature": "public boolean handleConfigurationResource(final HttpServerRequest request)", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManager.handleConfigurationResource(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "notifyRefreshables", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void notifyRefreshables()", "full_signature": "private void notifyRefreshables()", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManager.notifyRefreshables()", "testcase": false, "constructor": false}, {"identifier": "updateConfigurationResource", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateConfigurationResource()", "full_signature": "private void updateConfigurationResource()", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManager.updateConfigurationResource()", "testcase": false, "constructor": false}, {"identifier": "extractConfigurationValues", "parameters": "(Buffer configResourceBuffer)", "modifiers": "private", "return": "void", "signature": "void extractConfigurationValues(Buffer configResourceBuffer)", "full_signature": "private void extractConfigurationValues(Buffer configResourceBuffer)", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManager.extractConfigurationValues(Buffer configResourceBuffer)", "testcase": false, "constructor": false}], "file": "gateleen-queue/src/main/java/org/swisspush/gateleen/queue/queuing/circuitbreaker/configuration/QueueCircuitBreakerConfigurationResourceManager.java"}, "focal_method": {"identifier": "getConfigurationResource", "parameters": "()", "modifiers": "public", "return": "QueueCircuitBreakerConfigurationResource", "body": "public QueueCircuitBreakerConfigurationResource getConfigurationResource() {\n        if (configurationResource == null) {\n            configurationResource = new QueueCircuitBreakerConfigurationResource();\n        }\n        return configurationResource;\n    }", "signature": "QueueCircuitBreakerConfigurationResource getConfigurationResource()", "full_signature": "public QueueCircuitBreakerConfigurationResource getConfigurationResource()", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManager.getConfigurationResource()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}