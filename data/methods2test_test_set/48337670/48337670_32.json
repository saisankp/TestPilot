{"test_class": {"identifier": "ProxyFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ProxyFilter filter = new ProxyFilter();", "modifier": "private final", "type": "ProxyFilter", "declarator": "filter = new ProxyFilter()", "var_name": "filter"}, {"original_string": "private @Mock ContainerRequestContext context;", "modifier": "private @Mock", "type": "ContainerRequestContext", "declarator": "context", "var_name": "context"}, {"original_string": "private @Mock UriInfo uriInfo;", "modifier": "private @Mock", "type": "UriInfo", "declarator": "uriInfo", "var_name": "uriInfo"}], "file": "bundles/org.openhab.core.io.rest/src/test/java/org/openhab/core/io/rest/internal/filter/ProxyFilterTest.java"}, "test_case": {"identifier": "onlyHostTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onlyHostTest() throws Exception {\n        String baseURI = \"http://localhost/rest\";\n        String requestURI = \"http://localhost/rest/test\";\n        setupContextURIs(baseURI, requestURI);\n\n        setupContextHeaders(null, \"eclipse.org:8081\");\n\n        filter.filter(context);\n\n        URI newBaseURI = new URI(\"http://eclipse.org:8081/rest\");\n        URI newRequestURI = new URI(\"http://eclipse.org:8081/rest/test\");\n        verify(context).setRequestUri(eq(newBaseURI), eq(newRequestURI));\n    }", "signature": "void onlyHostTest()", "full_signature": "@Test public void onlyHostTest()", "class_method_signature": "ProxyFilterTest.onlyHostTest()", "testcase": true, "constructor": false, "invocations": ["setupContextURIs", "setupContextHeaders", "filter", "setRequestUri", "verify", "eq", "eq"]}, "focal_class": {"identifier": "ProxyFilter", "superclass": "", "interfaces": "implements ContainerRequestFilter", "fields": [{"original_string": "static final String PROTO_PROXY_HEADER = \"x-forwarded-proto\";", "modifier": "static final", "type": "String", "declarator": "PROTO_PROXY_HEADER = \"x-forwarded-proto\"", "var_name": "PROTO_PROXY_HEADER"}, {"original_string": "static final String HOST_PROXY_HEADER = \"x-forwarded-host\";", "modifier": "static final", "type": "String", "declarator": "HOST_PROXY_HEADER = \"x-forwarded-host\"", "var_name": "HOST_PROXY_HEADER"}, {"original_string": "private final transient Logger logger = LoggerFactory.getLogger(ProxyFilter.class);", "modifier": "private final transient", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ProxyFilter.class)", "var_name": "logger"}], "methods": [{"identifier": "filter", "parameters": "(ContainerRequestContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void filter(ContainerRequestContext ctx)", "full_signature": "@Override public void filter(ContainerRequestContext ctx)", "class_method_signature": "ProxyFilter.filter(ContainerRequestContext ctx)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(MultivaluedMap<String, String> headers, String header)", "modifiers": "private", "return": "String", "signature": "String getValue(MultivaluedMap<String, String> headers, String header)", "full_signature": "private String getValue(MultivaluedMap<String, String> headers, String header)", "class_method_signature": "ProxyFilter.getValue(MultivaluedMap<String, String> headers, String header)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core.io.rest/src/main/java/org/openhab/core/io/rest/internal/filter/ProxyFilter.java"}, "focal_method": {"identifier": "filter", "parameters": "(ContainerRequestContext ctx)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void filter(ContainerRequestContext ctx) throws IOException {\n        String host = getValue(ctx.getHeaders(), HOST_PROXY_HEADER);\n        String scheme = getValue(ctx.getHeaders(), PROTO_PROXY_HEADER);\n\n        // if our request does not have neither headers end right here\n        if (scheme == null && host == null) {\n            return;\n        }\n\n        UriInfo uriInfo = ctx.getUriInfo();\n        URI requestUri = uriInfo.getRequestUri();\n\n        UriBuilder baseBuilder = uriInfo.getBaseUriBuilder();\n        UriBuilder requestBuilder = uriInfo.getRequestUriBuilder();\n\n        // if only one of our headers is missing replace it with default value\n        if (scheme == null) {\n            scheme = requestUri.getScheme();\n        }\n\n        if (host == null) {\n            host = requestUri.getHost();\n\n            int port = requestUri.getPort();\n            if (port != -1) {\n                host += (\":\" + port);\n            }\n        }\n\n        // create a new URI from the current scheme + host in order to validate\n        // it\n        String uriString = scheme + \"://\" + host;\n\n        URI newBaseUri = null;\n        try {\n            newBaseUri = new URI(uriString);\n        } catch (URISyntaxException e) {\n            logger.error(\"Invalid X-Forwarded-Proto + X-Forwarded-Host header combination: {}\", uriString, e);\n            return;\n        }\n\n        // URI is valid replace base and request builder parts with ones\n        // obtained from the given headers\n        host = newBaseUri.getHost();\n        if (host != null) {\n            baseBuilder.host(host);\n            requestBuilder.host(host);\n        }\n\n        int port = newBaseUri.getPort();\n        baseBuilder.port(port);\n        requestBuilder.port(port);\n\n        scheme = newBaseUri.getScheme();\n        if (scheme != null) {\n            baseBuilder.scheme(scheme);\n            requestBuilder.scheme(scheme);\n        }\n\n        ctx.setRequestUri(baseBuilder.build(), requestBuilder.build());\n    }", "signature": "void filter(ContainerRequestContext ctx)", "full_signature": "@Override public void filter(ContainerRequestContext ctx)", "class_method_signature": "ProxyFilter.filter(ContainerRequestContext ctx)", "testcase": false, "constructor": false, "invocations": ["getValue", "getHeaders", "getValue", "getHeaders", "getUriInfo", "getRequestUri", "getBaseUriBuilder", "getRequestUriBuilder", "getScheme", "getHost", "getPort", "error", "getHost", "host", "host", "getPort", "port", "port", "getScheme", "scheme", "scheme", "setRequestUri", "build", "build"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}