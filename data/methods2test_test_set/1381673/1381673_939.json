{"test_class": {"identifier": "LhsBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-decisiontables/src/test/java/org/drools/decisiontable/parser/LhsBuilderTest.java"}, "test_case": {"identifier": "testIdentifyFieldTypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIdentifyFieldTypes() {\n        LhsBuilder builder = new LhsBuilder( 9, 1, \"\" );\n        assertEquals(FieldType.SINGLE_FIELD, builder.calcFieldType(\"age\"));\n        assertEquals(FieldType.OPERATOR_FIELD, builder.calcFieldType(\"age <\"));\n        assertEquals(FieldType.NORMAL_FIELD, builder.calcFieldType(\"age < $param\"));\n        assertEquals(FieldType.FORALL_FIELD, builder.calcFieldType(\"forall(||){age < $}\"));\n        assertEquals(FieldType.FORALL_FIELD, builder.calcFieldType(\"forall(&&){age < $}\"));\n        assertEquals(FieldType.FORALL_FIELD, builder.calcFieldType(\"forall(,){age < $}\"));\n        assertEquals(FieldType.FORALL_FIELD, builder.calcFieldType(\"forall(){age < $}\"));\n        assertEquals(FieldType.FORALL_FIELD, builder.calcFieldType(\"forall(){age < $} && forall(){age == $}\"));\n        assertEquals(FieldType.FORALL_FIELD, builder.calcFieldType(\"x && forall(){age < $} && forall(){age == $}\"));\n        assertEquals(FieldType.FORALL_FIELD, builder.calcFieldType(\"x && forall(){age < $} && forall(){age == $} && y\"));\n        assertEquals(FieldType.SINGLE_FIELD, builder.calcFieldType(\"age < $para\"));\n        assertEquals(FieldType.SINGLE_FIELD, builder.calcFieldType(\"forall{||}{age < $}\"));\n        assertEquals(FieldType.SINGLE_FIELD, builder.calcFieldType(\"forall(){}\"));\n        assertEquals(FieldType.SINGLE_FIELD, builder.calcFieldType(\"forall(){age < $\"));\n        assertEquals(FieldType.SINGLE_FIELD, builder.calcFieldType(\"forall(){,\"));\n        assertEquals(FieldType.SINGLE_FIELD, builder.calcFieldType(\"forall({})\"));\n        assertEquals(FieldType.SINGLE_FIELD, builder.calcFieldType(\"forall({}){test})\"));\n        assertEquals(FieldType.SINGLE_FIELD, builder.calcFieldType(\"forall(&&){{}})\"));\n        assertEquals(FieldType.SINGLE_FIELD, builder.calcFieldType(\"forall(&&){{})\"));\n    }", "signature": "void testIdentifyFieldTypes()", "full_signature": "@Test public void testIdentifyFieldTypes()", "class_method_signature": "LhsBuilderTest.testIdentifyFieldTypes()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "calcFieldType", "assertEquals", "calcFieldType", "assertEquals", "calcFieldType", "assertEquals", "calcFieldType", "assertEquals", "calcFieldType", "assertEquals", "calcFieldType", "assertEquals", "calcFieldType", "assertEquals", "calcFieldType", "assertEquals", "calcFieldType", "assertEquals", "calcFieldType", "assertEquals", "calcFieldType", "assertEquals", "calcFieldType", "assertEquals", "calcFieldType", "assertEquals", "calcFieldType", "assertEquals", "calcFieldType", "assertEquals", "calcFieldType", "assertEquals", "calcFieldType", "assertEquals", "calcFieldType", "assertEquals", "calcFieldType"]}, "focal_class": {"identifier": "LhsBuilder", "superclass": "", "interfaces": "implements SourceBuilder", "fields": [{"original_string": "private static final char QUOTE_DOUBLE = 0x22;", "modifier": "private static final", "type": "char", "declarator": "QUOTE_DOUBLE = 0x22", "var_name": "QUOTE_DOUBLE"}, {"original_string": "private static final char QUOTE_LEFT = 0x201c;", "modifier": "private static final", "type": "char", "declarator": "QUOTE_LEFT = 0x201c", "var_name": "QUOTE_LEFT"}, {"original_string": "private static final char QUOTE_RIGHT = 0x201d;", "modifier": "private static final", "type": "char", "declarator": "QUOTE_RIGHT = 0x201d", "var_name": "QUOTE_RIGHT"}, {"original_string": "private int headerRow;", "modifier": "private", "type": "int", "declarator": "headerRow", "var_name": "headerRow"}, {"original_string": "private int headerCol;", "modifier": "private", "type": "int", "declarator": "headerCol", "var_name": "headerCol"}, {"original_string": "private String colDefPrefix;", "modifier": "private", "type": "String", "declarator": "colDefPrefix", "var_name": "colDefPrefix"}, {"original_string": "private String colDefSuffix;", "modifier": "private", "type": "String", "declarator": "colDefSuffix", "var_name": "colDefSuffix"}, {"original_string": "private boolean multiple;", "modifier": "private", "type": "boolean", "declarator": "multiple", "var_name": "multiple"}, {"original_string": "private boolean forAll;", "modifier": "private", "type": "boolean", "declarator": "forAll", "var_name": "forAll"}, {"original_string": "private String andop;", "modifier": "private", "type": "String", "declarator": "andop", "var_name": "andop"}, {"original_string": "private Map<Integer, String> constraints;", "modifier": "private", "type": "Map<Integer, String>", "declarator": "constraints", "var_name": "constraints"}, {"original_string": "private List<String> values;", "modifier": "private", "type": "List<String>", "declarator": "values", "var_name": "values"}, {"original_string": "private boolean hasValues;", "modifier": "private", "type": "boolean", "declarator": "hasValues", "var_name": "hasValues"}, {"original_string": "private Map<Integer, FieldType> fieldTypes;", "modifier": "private", "type": "Map<Integer, FieldType>", "declarator": "fieldTypes", "var_name": "fieldTypes"}, {"original_string": "private static Set<String> operators;", "modifier": "private static", "type": "Set<String>", "declarator": "operators", "var_name": "operators"}, {"original_string": "private static Set<String> annotations;", "modifier": "private static", "type": "Set<String>", "declarator": "annotations", "var_name": "annotations"}, {"original_string": "private static final Pattern patParFrm = Pattern.compile( \"\\\\(\\\\s*\\\\)\\\\s*from\\\\b\" );", "modifier": "private static final", "type": "Pattern", "declarator": "patParFrm = Pattern.compile( \"\\\\(\\\\s*\\\\)\\\\s*from\\\\b\" )", "var_name": "patParFrm"}, {"original_string": "private static final Pattern patFrm = Pattern.compile( \"\\\\s+from\\\\s+\" );", "modifier": "private static final", "type": "Pattern", "declarator": "patFrm = Pattern.compile( \"\\\\s+from\\\\s+\" )", "var_name": "patFrm"}, {"original_string": "private static final Pattern patPar = Pattern.compile( \"\\\\(\\\\s*\\\\)\\\\s*\\\\Z\" );", "modifier": "private static final", "type": "Pattern", "declarator": "patPar = Pattern.compile( \"\\\\(\\\\s*\\\\)\\\\s*\\\\Z\" )", "var_name": "patPar"}, {"original_string": "private static final Pattern patEval = Pattern.compile( \"\\\\beval\\\\s*(?:\\\\(\\\\s*\\\\)\\\\s*)?$\" );", "modifier": "private static final", "type": "Pattern", "declarator": "patEval = Pattern.compile( \"\\\\beval\\\\s*(?:\\\\(\\\\s*\\\\)\\\\s*)?$\" )", "var_name": "patEval"}, {"original_string": "private static final Pattern patOopath = Pattern.compile( \".*\\\\:\\\\s*/.*\" );", "modifier": "private static final", "type": "Pattern", "declarator": "patOopath = Pattern.compile( \".*\\\\:\\\\s*/.*\" )", "var_name": "patOopath"}], "methods": [{"identifier": "LhsBuilder", "parameters": "( int row,\n                       int column,\n                       String colDefinition )", "modifiers": "public", "return": "", "signature": " LhsBuilder( int row,\n                       int column,\n                       String colDefinition )", "full_signature": "public  LhsBuilder( int row,\n                       int column,\n                       String colDefinition )", "class_method_signature": "LhsBuilder.LhsBuilder( int row,\n                       int column,\n                       String colDefinition )", "testcase": false, "constructor": true}, {"identifier": "findFirstAnnotationPos", "parameters": "(String colDef)", "modifiers": "private", "return": "int", "signature": "int findFirstAnnotationPos(String colDef)", "full_signature": "private int findFirstAnnotationPos(String colDef)", "class_method_signature": "LhsBuilder.findFirstAnnotationPos(String colDef)", "testcase": false, "constructor": false}, {"identifier": "getActionTypeCode", "parameters": "()", "modifiers": "public", "return": "ActionType.Code", "signature": "ActionType.Code getActionTypeCode()", "full_signature": "public ActionType.Code getActionTypeCode()", "class_method_signature": "LhsBuilder.getActionTypeCode()", "testcase": false, "constructor": false}, {"identifier": "addTemplate", "parameters": "( int row,\n                             int column,\n                             String content )", "modifiers": "public", "return": "void", "signature": "void addTemplate( int row,\n                             int column,\n                             String content )", "full_signature": "public void addTemplate( int row,\n                             int column,\n                             String content )", "class_method_signature": "LhsBuilder.addTemplate( int row,\n                             int column,\n                             String content )", "testcase": false, "constructor": false}, {"identifier": "clearValues", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearValues()", "full_signature": "public void clearValues()", "class_method_signature": "LhsBuilder.clearValues()", "testcase": false, "constructor": false}, {"identifier": "addCellValue", "parameters": "( int row, int column, String value)", "modifiers": "public", "return": "void", "signature": "void addCellValue( int row, int column, String value)", "full_signature": "public void addCellValue( int row, int column, String value)", "class_method_signature": "LhsBuilder.addCellValue( int row, int column, String value)", "testcase": false, "constructor": false}, {"identifier": "addCellValue", "parameters": "( int row, int column, String value, boolean trim)", "modifiers": "public", "return": "void", "signature": "void addCellValue( int row, int column, String value, boolean trim)", "full_signature": "public void addCellValue( int row, int column, String value, boolean trim)", "class_method_signature": "LhsBuilder.addCellValue( int row, int column, String value, boolean trim)", "testcase": false, "constructor": false}, {"identifier": "fixValue", "parameters": "( final int column,\n                             final String value )", "modifiers": "private", "return": "String", "signature": "String fixValue( final int column,\n                             final String value )", "full_signature": "private String fixValue( final int column,\n                             final String value )", "class_method_signature": "LhsBuilder.fixValue( final int column,\n                             final String value )", "testcase": false, "constructor": false}, {"identifier": "getResult", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getResult()", "full_signature": "public String getResult()", "class_method_signature": "LhsBuilder.getResult()", "testcase": false, "constructor": false}, {"identifier": "isMultipleConstraints", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isMultipleConstraints()", "full_signature": " boolean isMultipleConstraints()", "class_method_signature": "LhsBuilder.isMultipleConstraints()", "testcase": false, "constructor": false}, {"identifier": "isForAll", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isForAll()", "full_signature": " boolean isForAll()", "class_method_signature": "LhsBuilder.isForAll()", "testcase": false, "constructor": false}, {"identifier": "calcFieldType", "parameters": "( String content )", "modifiers": "public", "return": "FieldType", "signature": "FieldType calcFieldType( String content )", "full_signature": "public FieldType calcFieldType( String content )", "class_method_signature": "LhsBuilder.calcFieldType( String content )", "testcase": false, "constructor": false}, {"identifier": "hasValues", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasValues()", "full_signature": "public boolean hasValues()", "class_method_signature": "LhsBuilder.hasValues()", "testcase": false, "constructor": false}, {"identifier": "isDelimitedString", "parameters": "( final String content )", "modifiers": "private", "return": "boolean", "signature": "boolean isDelimitedString( final String content )", "full_signature": "private boolean isDelimitedString( final String content )", "class_method_signature": "LhsBuilder.isDelimitedString( final String content )", "testcase": false, "constructor": false}, {"identifier": "isDelimitedString", "parameters": "( final String content,\n                                       final char openQuote,\n                                       final char closeQuote )", "modifiers": "private", "return": "boolean", "signature": "boolean isDelimitedString( final String content,\n                                       final char openQuote,\n                                       final char closeQuote )", "full_signature": "private boolean isDelimitedString( final String content,\n                                       final char openQuote,\n                                       final char closeQuote )", "class_method_signature": "LhsBuilder.isDelimitedString( final String content,\n                                       final char openQuote,\n                                       final char closeQuote )", "testcase": false, "constructor": false}, {"identifier": "getColumn", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getColumn()", "full_signature": "public int getColumn()", "class_method_signature": "LhsBuilder.getColumn()", "testcase": false, "constructor": false}], "file": "drools-decisiontables/src/main/java/org/drools/decisiontable/parser/LhsBuilder.java"}, "focal_method": {"identifier": "calcFieldType", "parameters": "( String content )", "modifiers": "public", "return": "FieldType", "body": "public FieldType calcFieldType( String content ) {\n        final SnippetBuilder.SnippetType snippetType = SnippetBuilder.getType( content );\n        if ( snippetType.equals( SnippetBuilder.SnippetType.FORALL ) ) {\n            return FieldType.FORALL_FIELD;\n        } else if ( !snippetType.equals(\n                SnippetBuilder.SnippetType.SINGLE ) ) {\n            return FieldType.NORMAL_FIELD;\n        }\n        for ( String op : operators ) {\n            if ( content.endsWith( op ) ) {\n                return FieldType.OPERATOR_FIELD;\n            }\n        }\n        return FieldType.SINGLE_FIELD;\n    }", "signature": "FieldType calcFieldType( String content )", "full_signature": "public FieldType calcFieldType( String content )", "class_method_signature": "LhsBuilder.calcFieldType( String content )", "testcase": false, "constructor": false, "invocations": ["getType", "equals", "equals", "endsWith"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}