{"test_class": {"identifier": "RococoaTypeMapperTest", "superclass": "extends RococoaTestCase", "interfaces": "", "fields": [{"original_string": "private TypeMapper typeMapper = new RococoaTypeMapper();", "modifier": "private", "type": "TypeMapper", "declarator": "typeMapper = new RococoaTypeMapper()", "var_name": "typeMapper"}], "file": "rococoa/rococoa-core/src/test/java/org/rococoa/internal/RococoaTypeMapperTest.java"}, "test_case": {"identifier": "testObjCObject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testObjCObject() {\n\t// ToNative only has to get the ID, so it only has to know about ObjCObject\n        ObjCObjectTypeConverter toNativeConverter = (ObjCObjectTypeConverter) typeMapper.getToNativeConverter(NSNumber.class);\n\tassertTrue(toNativeConverter.convertsJavaType(ObjCObject.class));\n\n\t// FromNative needs to know the actual type so that it can create the right Java subclass of ObjCObject\n\tObjCObjectTypeConverter fromNativeConverter = (ObjCObjectTypeConverter) typeMapper.getFromNativeConverter(NSNumber.class);\n\tassertTrue(fromNativeConverter.convertsJavaType(NSNumber.class));\n    }", "signature": "void testObjCObject()", "full_signature": "@Test public void testObjCObject()", "class_method_signature": "RococoaTypeMapperTest.testObjCObject()", "testcase": true, "constructor": false, "invocations": ["getToNativeConverter", "assertTrue", "convertsJavaType", "getFromNativeConverter", "assertTrue", "convertsJavaType"]}, "focal_class": {"identifier": "RococoaTypeMapper", "superclass": "extends DefaultTypeMapper", "interfaces": "", "fields": [], "methods": [{"identifier": "RococoaTypeMapper", "parameters": "()", "modifiers": "public", "return": "", "signature": " RococoaTypeMapper()", "full_signature": "public  RococoaTypeMapper()", "class_method_signature": "RococoaTypeMapper.RococoaTypeMapper()", "testcase": false, "constructor": true}, {"identifier": "getFromNativeConverter", "parameters": "(Class javaType)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "FromNativeConverter", "signature": "FromNativeConverter getFromNativeConverter(Class javaType)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public FromNativeConverter getFromNativeConverter(Class javaType)", "class_method_signature": "RococoaTypeMapper.getFromNativeConverter(Class javaType)", "testcase": false, "constructor": false}], "file": "rococoa/rococoa-core/src/main/java/org/rococoa/internal/RococoaTypeMapper.java"}, "focal_method": {"identifier": "getFromNativeConverter", "parameters": "(Class javaType)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "FromNativeConverter", "body": "@SuppressWarnings(\"unchecked\")\n    @Override public FromNativeConverter getFromNativeConverter(Class javaType) {\n        if (ObjCObject.class.isAssignableFrom(javaType)) {\n            // return a new converter that knows the subtype it is going to create\n            return new ObjCObjectTypeConverter((Class<ObjCObject>)javaType);\n        }\n        return super.getFromNativeConverter(javaType);\n    }", "signature": "FromNativeConverter getFromNativeConverter(Class javaType)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public FromNativeConverter getFromNativeConverter(Class javaType)", "class_method_signature": "RococoaTypeMapper.getFromNativeConverter(Class javaType)", "testcase": false, "constructor": false, "invocations": ["isAssignableFrom", "getFromNativeConverter"]}, "repository": {"repo_id": 32143635, "url": "https://github.com/iterate-ch/rococoa", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 17, "size": 2377, "license": "licensed"}}