{"test_class": {"identifier": "DefaultJobServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String JOB_NAME = \"sampleJob\";", "modifier": "private static final", "type": "String", "declarator": "JOB_NAME = \"sampleJob\"", "var_name": "JOB_NAME"}, {"original_string": "private static final String JOB_NAME_2 = \"sampleJob2\";", "modifier": "private static final", "type": "String", "declarator": "JOB_NAME_2 = \"sampleJob2\"", "var_name": "JOB_NAME_2"}, {"original_string": "private static final String JOB_NAME_3 = \"sampleJob3\";", "modifier": "private static final", "type": "String", "declarator": "JOB_NAME_3 = \"sampleJob3\"", "var_name": "JOB_NAME_3"}, {"original_string": "private static final String[] JOB_NAMES = new String[]{JOB_NAME, JOB_NAME_2, JOB_NAME_3};", "modifier": "private static final", "type": "String[]", "declarator": "JOB_NAMES = new String[]{JOB_NAME, JOB_NAME_2, JOB_NAME_3}", "var_name": "JOB_NAMES"}, {"original_string": "@InjectMocks\n    private DefaultJobService jobService;", "modifier": "@InjectMocks\n    private", "type": "DefaultJobService", "declarator": "jobService", "var_name": "jobService"}, {"original_string": "@Mock\n    private JobOperator jobOperator;", "modifier": "@Mock\n    private", "type": "JobOperator", "declarator": "jobOperator", "var_name": "jobOperator"}, {"original_string": "@Mock\n    private JobRegistry jobRegistry;", "modifier": "@Mock\n    private", "type": "JobRegistry", "declarator": "jobRegistry", "var_name": "jobRegistry"}, {"original_string": "@Mock\n    private JobExplorer jobExplorer;", "modifier": "@Mock\n    private", "type": "JobExplorer", "declarator": "jobExplorer", "var_name": "jobExplorer"}, {"original_string": "@Mock\n    private LightminJobExecutionDao lightminJobExecutionDao;", "modifier": "@Mock\n    private", "type": "LightminJobExecutionDao", "declarator": "lightminJobExecutionDao", "var_name": "lightminJobExecutionDao"}], "file": "spring-batch-lightmin-core/spring-batch-lightmin-core-service/src/test/java/org/tuxdevelop/spring/batch/lightmin/service/DefaultJobServiceTest.java"}, "test_case": {"identifier": "attachJobInstanceTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void attachJobInstanceTest() {\n        final JobExecution jobExecution = DomainTestHelper.createJobExecution(10L);\n        final JobInstance jobInstance = DomainTestHelper.createJobInstance(20L, JOB_NAME);\n        jobExecution.setJobInstance(jobInstance);\n        when(this.jobExplorer.getJobInstance(jobExecution.getJobInstance().getId())).thenReturn(jobInstance);\n        this.jobService.attachJobInstance(jobExecution);\n        assertThat(jobExecution.getJobInstance()).isEqualTo(jobInstance);\n    }", "signature": "void attachJobInstanceTest()", "full_signature": "@Test public void attachJobInstanceTest()", "class_method_signature": "DefaultJobServiceTest.attachJobInstanceTest()", "testcase": true, "constructor": false, "invocations": ["createJobExecution", "createJobInstance", "setJobInstance", "thenReturn", "when", "getJobInstance", "getId", "getJobInstance", "attachJobInstance", "isEqualTo", "assertThat", "getJobInstance"]}, "focal_class": {"identifier": "DefaultJobService", "superclass": "", "interfaces": "implements JobService", "fields": [{"original_string": "private final JobOperator jobOperator;", "modifier": "private final", "type": "JobOperator", "declarator": "jobOperator", "var_name": "jobOperator"}, {"original_string": "private final JobRegistry jobRegistry;", "modifier": "private final", "type": "JobRegistry", "declarator": "jobRegistry", "var_name": "jobRegistry"}, {"original_string": "private final JobExplorer jobExplorer;", "modifier": "private final", "type": "JobExplorer", "declarator": "jobExplorer", "var_name": "jobExplorer"}, {"original_string": "private final LightminJobExecutionDao lightminJobExecutionDao;", "modifier": "private final", "type": "LightminJobExecutionDao", "declarator": "lightminJobExecutionDao", "var_name": "lightminJobExecutionDao"}], "methods": [{"identifier": "DefaultJobService", "parameters": "(final JobOperator jobOperator,\n                             final JobRegistry jobRegistry,\n                             final JobExplorer jobExplorer,\n                             final LightminJobExecutionDao lightminJobExecutionDao)", "modifiers": "public", "return": "", "signature": " DefaultJobService(final JobOperator jobOperator,\n                             final JobRegistry jobRegistry,\n                             final JobExplorer jobExplorer,\n                             final LightminJobExecutionDao lightminJobExecutionDao)", "full_signature": "public  DefaultJobService(final JobOperator jobOperator,\n                             final JobRegistry jobRegistry,\n                             final JobExplorer jobExplorer,\n                             final LightminJobExecutionDao lightminJobExecutionDao)", "class_method_signature": "DefaultJobService.DefaultJobService(final JobOperator jobOperator,\n                             final JobRegistry jobRegistry,\n                             final JobExplorer jobExplorer,\n                             final LightminJobExecutionDao lightminJobExecutionDao)", "testcase": false, "constructor": true}, {"identifier": "getJobInstanceCount", "parameters": "(final String jobName)", "modifiers": "@Override public", "return": "int", "signature": "int getJobInstanceCount(final String jobName)", "full_signature": "@Override public int getJobInstanceCount(final String jobName)", "class_method_signature": "DefaultJobService.getJobInstanceCount(final String jobName)", "testcase": false, "constructor": false}, {"identifier": "getJobExecutionCount", "parameters": "(final JobInstance jobInstance)", "modifiers": "@Override public", "return": "int", "signature": "int getJobExecutionCount(final JobInstance jobInstance)", "full_signature": "@Override public int getJobExecutionCount(final JobInstance jobInstance)", "class_method_signature": "DefaultJobService.getJobExecutionCount(final JobInstance jobInstance)", "testcase": false, "constructor": false}, {"identifier": "getJobNames", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getJobNames()", "full_signature": "@Override public Set<String> getJobNames()", "class_method_signature": "DefaultJobService.getJobNames()", "testcase": false, "constructor": false}, {"identifier": "getJobByName", "parameters": "(final String jobName)", "modifiers": "@Override public", "return": "Job", "signature": "Job getJobByName(final String jobName)", "full_signature": "@Override public Job getJobByName(final String jobName)", "class_method_signature": "DefaultJobService.getJobByName(final String jobName)", "testcase": false, "constructor": false}, {"identifier": "getJobInstances", "parameters": "(final String jobName, final int startIndex, final int pageSize)", "modifiers": "@Override public", "return": "Collection<JobInstance>", "signature": "Collection<JobInstance> getJobInstances(final String jobName, final int startIndex, final int pageSize)", "full_signature": "@Override public Collection<JobInstance> getJobInstances(final String jobName, final int startIndex, final int pageSize)", "class_method_signature": "DefaultJobService.getJobInstances(final String jobName, final int startIndex, final int pageSize)", "testcase": false, "constructor": false}, {"identifier": "getJobExecutions", "parameters": "(final JobInstance jobInstance)", "modifiers": "@Override public", "return": "Collection<JobExecution>", "signature": "Collection<JobExecution> getJobExecutions(final JobInstance jobInstance)", "full_signature": "@Override public Collection<JobExecution> getJobExecutions(final JobInstance jobInstance)", "class_method_signature": "DefaultJobService.getJobExecutions(final JobInstance jobInstance)", "testcase": false, "constructor": false}, {"identifier": "getJobExecutions", "parameters": "(final JobInstance jobInstance, final int start, final int count)", "modifiers": "@Override public", "return": "Collection<JobExecution>", "signature": "Collection<JobExecution> getJobExecutions(final JobInstance jobInstance, final int start, final int count)", "full_signature": "@Override public Collection<JobExecution> getJobExecutions(final JobInstance jobInstance, final int start, final int count)", "class_method_signature": "DefaultJobService.getJobExecutions(final JobInstance jobInstance, final int start, final int count)", "testcase": false, "constructor": false}, {"identifier": "getJobExecution", "parameters": "(final Long jobExecutionId)", "modifiers": "@Override public", "return": "JobExecution", "signature": "JobExecution getJobExecution(final Long jobExecutionId)", "full_signature": "@Override public JobExecution getJobExecution(final Long jobExecutionId)", "class_method_signature": "DefaultJobService.getJobExecution(final Long jobExecutionId)", "testcase": false, "constructor": false}, {"identifier": "getJobInstance", "parameters": "(final Long jobInstanceId)", "modifiers": "@Override public", "return": "JobInstance", "signature": "JobInstance getJobInstance(final Long jobInstanceId)", "full_signature": "@Override public JobInstance getJobInstance(final Long jobInstanceId)", "class_method_signature": "DefaultJobService.getJobInstance(final Long jobInstanceId)", "testcase": false, "constructor": false}, {"identifier": "attachJobInstance", "parameters": "(final JobExecution jobExecution)", "modifiers": "@Override public", "return": "void", "signature": "void attachJobInstance(final JobExecution jobExecution)", "full_signature": "@Override public void attachJobInstance(final JobExecution jobExecution)", "class_method_signature": "DefaultJobService.attachJobInstance(final JobExecution jobExecution)", "testcase": false, "constructor": false}, {"identifier": "restartJobExecution", "parameters": "(final Long jobExecutionId)", "modifiers": "@Override public", "return": "void", "signature": "void restartJobExecution(final Long jobExecutionId)", "full_signature": "@Override public void restartJobExecution(final Long jobExecutionId)", "class_method_signature": "DefaultJobService.restartJobExecution(final Long jobExecutionId)", "testcase": false, "constructor": false}, {"identifier": "stopJobExecution", "parameters": "(final Long jobExecutionId)", "modifiers": "@Override public", "return": "void", "signature": "void stopJobExecution(final Long jobExecutionId)", "full_signature": "@Override public void stopJobExecution(final Long jobExecutionId)", "class_method_signature": "DefaultJobService.stopJobExecution(final Long jobExecutionId)", "testcase": false, "constructor": false}, {"identifier": "getLastJobParameters", "parameters": "(final String jobName)", "modifiers": "@Override public", "return": "JobParameters", "signature": "JobParameters getLastJobParameters(final String jobName)", "full_signature": "@Override public JobParameters getLastJobParameters(final String jobName)", "class_method_signature": "DefaultJobService.getLastJobParameters(final String jobName)", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "DefaultJobService.afterPropertiesSet()", "testcase": false, "constructor": false}], "file": "spring-batch-lightmin-core/spring-batch-lightmin-core-service/src/main/java/org/tuxdevelop/spring/batch/lightmin/service/DefaultJobService.java"}, "focal_method": {"identifier": "attachJobInstance", "parameters": "(final JobExecution jobExecution)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void attachJobInstance(final JobExecution jobExecution) {\n        if (jobExecution != null) {\n            if (jobExecution.getJobInstance() != null) {\n                final JobInstance jobInstance = this.jobExplorer.getJobInstance(jobExecution.getJobInstance().getId());\n                jobExecution.setJobInstance(jobInstance);\n            } else {\n                throw new SpringBatchLightminApplicationException(\"JobInstance of JobExecution with id:\" + jobExecution.getJobId() + \"is null, cannot provide information\");\n            }\n        } else {\n            throw new SpringBatchLightminApplicationException(\"jobExecution is null, cannot provide information\");\n        }\n    }", "signature": "void attachJobInstance(final JobExecution jobExecution)", "full_signature": "@Override public void attachJobInstance(final JobExecution jobExecution)", "class_method_signature": "DefaultJobService.attachJobInstance(final JobExecution jobExecution)", "testcase": false, "constructor": false, "invocations": ["getJobInstance", "getJobInstance", "getId", "getJobInstance", "setJobInstance", "getJobId"]}, "repository": {"repo_id": 29479059, "url": "https://github.com/tuxdevelop/spring-batch-lightmin", "language": "Java", "is_fork": false, "fork_count": 34, "stargazer_count": 109, "size": 12355, "license": "licensed"}}