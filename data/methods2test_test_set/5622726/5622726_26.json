{"test_class": {"identifier": "CobrandNameSanitizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "inputvalidation/src/test/java/com/switchfly/inputvalidation/sanitizer/CobrandNameSanitizerTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws Exception {\n\n        CobrandNameSanitizer sanitizer = new CobrandNameSanitizer();\n\n        assertEquals(\"Abc-12_3\", sanitizer.execute(\"Abc-12_3\"));\n        assertEquals(\"\", sanitizer.execute(\"\"));\n        assertEquals(\" \", sanitizer.execute(\" \"));\n        assertEquals(null, sanitizer.execute(null));\n        assertEquals(\"default\", sanitizer.execute(\"Abc- 12_3\"));\n        assertEquals(\"default\", sanitizer.execute(\"Abc-12_3!\"));\n        assertEquals(\"default\", sanitizer.execute(\"Abc-12_3'\"));\n        assertEquals(\"default\", sanitizer.execute(\"Abc-12_3\\\"\"));\n        assertEquals(\"default\", sanitizer.execute(\"<script>\"));\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "CobrandNameSanitizerTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "execute", "assertEquals", "execute", "assertEquals", "execute", "assertEquals", "execute", "assertEquals", "execute", "assertEquals", "execute", "assertEquals", "execute", "assertEquals", "execute", "assertEquals", "execute"]}, "focal_class": {"identifier": "CobrandNameSanitizer", "superclass": "", "interfaces": "implements Sanitizer<String>", "fields": [{"original_string": "private static final Logger _logger = Logger.getLogger(CobrandNameSanitizer.class);", "modifier": "private static final", "type": "Logger", "declarator": "_logger = Logger.getLogger(CobrandNameSanitizer.class)", "var_name": "_logger"}], "methods": [{"identifier": "execute", "parameters": "(String content)", "modifiers": "@Override public", "return": "String", "signature": "String execute(String content)", "full_signature": "@Override public String execute(String content)", "class_method_signature": "CobrandNameSanitizer.execute(String content)", "testcase": false, "constructor": false}], "file": "inputvalidation/src/main/java/com/switchfly/inputvalidation/sanitizer/CobrandNameSanitizer.java"}, "focal_method": {"identifier": "execute", "parameters": "(String content)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String execute(String content) {\n        if (StringUtils.isBlank(content)) {\n            return content;\n        }\n        Pattern pattern = Pattern.compile(\"[\\\\w-]+\");\n        if (!pattern.matcher(content).matches()) {\n            String sanitized = new HtmlSanitizer().execute(content);\n            _logger.warn(\"Invalid cobrand name (\" + sanitized + \"). Setting cobrand name to \\\"default\\\".\");\n            return \"default\";\n        }\n        return content;\n    }", "signature": "String execute(String content)", "full_signature": "@Override public String execute(String content)", "class_method_signature": "CobrandNameSanitizer.execute(String content)", "testcase": false, "constructor": false, "invocations": ["isBlank", "compile", "matches", "matcher", "execute", "warn"]}, "repository": {"repo_id": 5622726, "url": "https://github.com/switchfly/switchfly-java", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 752, "license": "licensed"}}