{"test_class": {"identifier": "AesCtrKeyManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final AesCtrKeyManager manager = new AesCtrKeyManager();", "modifier": "private final", "type": "AesCtrKeyManager", "declarator": "manager = new AesCtrKeyManager()", "var_name": "manager"}, {"original_string": "private final KeyTypeManager.KeyFactory<AesCtrKeyFormat, AesCtrKey> factory =\n      manager.keyFactory();", "modifier": "private final", "type": "KeyTypeManager.KeyFactory<AesCtrKeyFormat, AesCtrKey>", "declarator": "factory =\n      manager.keyFactory()", "var_name": "factory"}], "file": "java_src/src/test/java/com/google/crypto/tink/aead/AesCtrKeyManagerTest.java"}, "test_case": {"identifier": "createKey_correctVersion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void createKey_correctVersion() throws Exception {\n    assertThat(factory.createKey(createFormat(16, 16)).getVersion()).isEqualTo(0);\n  }", "signature": "void createKey_correctVersion()", "full_signature": "@Test public void createKey_correctVersion()", "class_method_signature": "AesCtrKeyManagerTest.createKey_correctVersion()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getVersion", "createKey", "createFormat"]}, "focal_class": {"identifier": "AesCtrKeyManager", "superclass": "extends KeyTypeManager<AesCtrKey>", "interfaces": "", "fields": [{"original_string": "private static final int MIN_IV_SIZE_IN_BYTES = 12;", "modifier": "private static final", "type": "int", "declarator": "MIN_IV_SIZE_IN_BYTES = 12", "var_name": "MIN_IV_SIZE_IN_BYTES"}], "methods": [{"identifier": "AesCtrKeyManager", "parameters": "()", "modifiers": "", "return": "", "signature": " AesCtrKeyManager()", "full_signature": "  AesCtrKeyManager()", "class_method_signature": "AesCtrKeyManager.AesCtrKeyManager()", "testcase": false, "constructor": true}, {"identifier": "getKeyType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getKeyType()", "full_signature": "@Override public String getKeyType()", "class_method_signature": "AesCtrKeyManager.getKeyType()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getVersion()", "full_signature": "@Override public int getVersion()", "class_method_signature": "AesCtrKeyManager.getVersion()", "testcase": false, "constructor": false}, {"identifier": "keyMaterialType", "parameters": "()", "modifiers": "@Override public", "return": "KeyMaterialType", "signature": "KeyMaterialType keyMaterialType()", "full_signature": "@Override public KeyMaterialType keyMaterialType()", "class_method_signature": "AesCtrKeyManager.keyMaterialType()", "testcase": false, "constructor": false}, {"identifier": "validateKey", "parameters": "(AesCtrKey key)", "modifiers": "@Override public", "return": "void", "signature": "void validateKey(AesCtrKey key)", "full_signature": "@Override public void validateKey(AesCtrKey key)", "class_method_signature": "AesCtrKeyManager.validateKey(AesCtrKey key)", "testcase": false, "constructor": false}, {"identifier": "parseKey", "parameters": "(ByteString byteString)", "modifiers": "@Override public", "return": "AesCtrKey", "signature": "AesCtrKey parseKey(ByteString byteString)", "full_signature": "@Override public AesCtrKey parseKey(ByteString byteString)", "class_method_signature": "AesCtrKeyManager.parseKey(ByteString byteString)", "testcase": false, "constructor": false}, {"identifier": "keyFactory", "parameters": "()", "modifiers": "@Override public", "return": "KeyFactory<AesCtrKeyFormat, AesCtrKey>", "signature": "KeyFactory<AesCtrKeyFormat, AesCtrKey> keyFactory()", "full_signature": "@Override public KeyFactory<AesCtrKeyFormat, AesCtrKey> keyFactory()", "class_method_signature": "AesCtrKeyManager.keyFactory()", "testcase": false, "constructor": false}, {"identifier": "validateParams", "parameters": "(AesCtrParams params)", "modifiers": "private", "return": "void", "signature": "void validateParams(AesCtrParams params)", "full_signature": "private void validateParams(AesCtrParams params)", "class_method_signature": "AesCtrKeyManager.validateParams(AesCtrParams params)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(boolean newKeyAllowed)", "modifiers": "public static", "return": "void", "signature": "void register(boolean newKeyAllowed)", "full_signature": "public static void register(boolean newKeyAllowed)", "class_method_signature": "AesCtrKeyManager.register(boolean newKeyAllowed)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/aead/AesCtrKeyManager.java"}, "focal_method": {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int getVersion() {\n    return 0;\n  }", "signature": "int getVersion()", "full_signature": "@Override public int getVersion()", "class_method_signature": "AesCtrKeyManager.getVersion()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}