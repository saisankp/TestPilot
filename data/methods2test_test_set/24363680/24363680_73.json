{"test_class": {"identifier": "BitcoinSerializerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final byte[] addrMessage = Hex.decode(\"f9beb4d96164647200000000000000001f000000\" +\n            \"ed52399b01e215104d010000000000000000000000000000000000ffff0a000001208d\");", "modifier": "private final", "type": "byte[]", "declarator": "addrMessage = Hex.decode(\"f9beb4d96164647200000000000000001f000000\" +\n            \"ed52399b01e215104d010000000000000000000000000000000000ffff0a000001208d\")", "var_name": "addrMessage"}, {"original_string": "private final byte[] txMessage = Hex.decode(\n            \"F9 BE B4 D9 74 78 00 00  00 00 00 00 00 00 00 00\" +\n            \"02 01 00 00 E2 93 CD BE  01 00 00 00 01 6D BD DB\" +\n            \"08 5B 1D 8A F7 51 84 F0  BC 01 FA D5 8D 12 66 E9\" +\n            \"B6 3B 50 88 19 90 E4 B4  0D 6A EE 36 29 00 00 00\" +\n            \"00 8B 48 30 45 02 21 00  F3 58 1E 19 72 AE 8A C7\" +\n            \"C7 36 7A 7A 25 3B C1 13  52 23 AD B9 A4 68 BB 3A\" +\n            \"59 23 3F 45 BC 57 83 80  02 20 59 AF 01 CA 17 D0\" +\n            \"0E 41 83 7A 1D 58 E9 7A  A3 1B AE 58 4E DE C2 8D\" +\n            \"35 BD 96 92 36 90 91 3B  AE 9A 01 41 04 9C 02 BF\" +\n            \"C9 7E F2 36 CE 6D 8F E5  D9 40 13 C7 21 E9 15 98\" +\n            \"2A CD 2B 12 B6 5D 9B 7D  59 E2 0A 84 20 05 F8 FC\" +\n            \"4E 02 53 2E 87 3D 37 B9  6F 09 D6 D4 51 1A DA 8F\" +\n            \"14 04 2F 46 61 4A 4C 70  C0 F1 4B EF F5 FF FF FF\" +\n            \"FF 02 40 4B 4C 00 00 00  00 00 19 76 A9 14 1A A0\" +\n            \"CD 1C BE A6 E7 45 8A 7A  BA D5 12 A9 D9 EA 1A FB\" +\n            \"22 5E 88 AC 80 FA E9 C7  00 00 00 00 19 76 A9 14\" +\n            \"0E AB 5B EA 43 6A 04 84  CF AB 12 48 5E FD A0 B7\" +\n            \"8B 4E CC 52 88 AC 00 00  00 00\");", "modifier": "private final", "type": "byte[]", "declarator": "txMessage = Hex.decode(\n            \"F9 BE B4 D9 74 78 00 00  00 00 00 00 00 00 00 00\" +\n            \"02 01 00 00 E2 93 CD BE  01 00 00 00 01 6D BD DB\" +\n            \"08 5B 1D 8A F7 51 84 F0  BC 01 FA D5 8D 12 66 E9\" +\n            \"B6 3B 50 88 19 90 E4 B4  0D 6A EE 36 29 00 00 00\" +\n            \"00 8B 48 30 45 02 21 00  F3 58 1E 19 72 AE 8A C7\" +\n            \"C7 36 7A 7A 25 3B C1 13  52 23 AD B9 A4 68 BB 3A\" +\n            \"59 23 3F 45 BC 57 83 80  02 20 59 AF 01 CA 17 D0\" +\n            \"0E 41 83 7A 1D 58 E9 7A  A3 1B AE 58 4E DE C2 8D\" +\n            \"35 BD 96 92 36 90 91 3B  AE 9A 01 41 04 9C 02 BF\" +\n            \"C9 7E F2 36 CE 6D 8F E5  D9 40 13 C7 21 E9 15 98\" +\n            \"2A CD 2B 12 B6 5D 9B 7D  59 E2 0A 84 20 05 F8 FC\" +\n            \"4E 02 53 2E 87 3D 37 B9  6F 09 D6 D4 51 1A DA 8F\" +\n            \"14 04 2F 46 61 4A 4C 70  C0 F1 4B EF F5 FF FF FF\" +\n            \"FF 02 40 4B 4C 00 00 00  00 00 19 76 A9 14 1A A0\" +\n            \"CD 1C BE A6 E7 45 8A 7A  BA D5 12 A9 D9 EA 1A FB\" +\n            \"22 5E 88 AC 80 FA E9 C7  00 00 00 00 19 76 A9 14\" +\n            \"0E AB 5B EA 43 6A 04 84  CF AB 12 48 5E FD A0 B7\" +\n            \"8B 4E CC 52 88 AC 00 00  00 00\")", "var_name": "txMessage"}], "file": "core/src/test/java/com/google/bitcoin/core/BitcoinSerializerTest.java"}, "test_case": {"identifier": "testHeaders2", "parameters": "()", "modifiers": "@Test /** * Get 6 headers of blocks 1-6 in the chain */ public", "return": "void", "body": "@Test\n    /**\n     * Get 6 headers of blocks 1-6 in the chain\n     */\n    public void testHeaders2() throws Exception {\n        BitcoinSerializer bs = new BitcoinSerializer(MainNetParams.get());\n\n        HeadersMessage hm = (HeadersMessage) bs.deserialize(ByteBuffer.wrap(Hex.decode(\"f9beb4d96865616465\" +\n                \"72730000000000e701000085acd4ea06010000006fe28c0ab6f1b372c1a6a246ae63f74f931e\" +\n                \"8365e15a089c68d6190000000000982051fd1e4ba744bbbe680e1fee14677ba1a3c3540bf7b1c\" +\n                \"db606e857233e0e61bc6649ffff001d01e3629900010000004860eb18bf1b1620e37e9490fc8a\" +\n                \"427514416fd75159ab86688e9a8300000000d5fdcc541e25de1c7a5addedf24858b8bb665c9f36\" +\n                \"ef744ee42c316022c90f9bb0bc6649ffff001d08d2bd610001000000bddd99ccfda39da1b108ce1\" +\n                \"a5d70038d0a967bacb68b6b63065f626a0000000044f672226090d85db9a9f2fbfe5f0f9609b387\" +\n                \"af7be5b7fbb7a1767c831c9e995dbe6649ffff001d05e0ed6d00010000004944469562ae1c2c74\" +\n                \"d9a535e00b6f3e40ffbad4f2fda3895501b582000000007a06ea98cd40ba2e3288262b28638cec\" +\n                \"5337c1456aaf5eedc8e9e5a20f062bdf8cc16649ffff001d2bfee0a9000100000085144a84488e\" +\n                \"a88d221c8bd6c059da090e88f8a2c99690ee55dbba4e00000000e11c48fecdd9e72510ca84f023\" +\n                \"370c9a38bf91ac5cae88019bee94d24528526344c36649ffff001d1d03e4770001000000fc33f5\" +\n                \"96f822a0a1951ffdbf2a897b095636ad871707bf5d3162729b00000000379dfb96a5ea8c81700ea4\" +\n                \"ac6b97ae9a9312b2d4301a29580e924ee6761a2520adc46649ffff001d189c4c9700\")));\n\n        int nBlocks = hm.getBlockHeaders().size();\n        assertEquals(nBlocks, 6);\n\n        // index 0 block is the number 1 block in the block chain\n        // http://blockexplorer.com/b/1\n        Block zeroBlock = hm.getBlockHeaders().get(0);\n        String zeroBlockHash = zeroBlock.getHashAsString();\n\n        assertEquals(\"00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048\",\n                zeroBlockHash);\n        assertEquals(zeroBlock.getNonce(), 2573394689L);\n\n\n        Block thirdBlock = hm.getBlockHeaders().get(3);\n        String thirdBlockHash = thirdBlock.getHashAsString();\n\n        // index 3 block is the number 4 block in the block chain\n        // http://blockexplorer.com/b/4\n        assertEquals(\"000000004ebadb55ee9096c9a2f8880e09da59c0d68b1c228da88e48844a1485\",\n                thirdBlockHash);\n        assertEquals(thirdBlock.getNonce(), 2850094635L);\n    }", "signature": "void testHeaders2()", "full_signature": "@Test /** * Get 6 headers of blocks 1-6 in the chain */ public void testHeaders2()", "class_method_signature": "BitcoinSerializerTest.testHeaders2()", "testcase": true, "constructor": false, "invocations": ["get", "deserialize", "wrap", "decode", "size", "getBlockHeaders", "assertEquals", "get", "getBlockHeaders", "getHashAsString", "assertEquals", "assertEquals", "getNonce", "get", "getBlockHeaders", "getHashAsString", "assertEquals", "assertEquals", "getNonce"]}, "focal_class": {"identifier": "BitcoinSerializer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(BitcoinSerializer.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(BitcoinSerializer.class)", "var_name": "log"}, {"original_string": "private static final int COMMAND_LEN = 12;", "modifier": "private static final", "type": "int", "declarator": "COMMAND_LEN = 12", "var_name": "COMMAND_LEN"}, {"original_string": "private NetworkParameters params;", "modifier": "private", "type": "NetworkParameters", "declarator": "params", "var_name": "params"}, {"original_string": "private boolean parseLazy = false;", "modifier": "private", "type": "boolean", "declarator": "parseLazy = false", "var_name": "parseLazy"}, {"original_string": "private boolean parseRetain = false;", "modifier": "private", "type": "boolean", "declarator": "parseRetain = false", "var_name": "parseRetain"}, {"original_string": "private static Map<Class<? extends Message>, String> names = new HashMap<Class<? extends Message>, String>();", "modifier": "private static", "type": "Map<Class<? extends Message>, String>", "declarator": "names = new HashMap<Class<? extends Message>, String>()", "var_name": "names"}], "methods": [{"identifier": "BitcoinSerializer", "parameters": "(NetworkParameters params)", "modifiers": "public", "return": "", "signature": " BitcoinSerializer(NetworkParameters params)", "full_signature": "public  BitcoinSerializer(NetworkParameters params)", "class_method_signature": "BitcoinSerializer.BitcoinSerializer(NetworkParameters params)", "testcase": false, "constructor": true}, {"identifier": "BitcoinSerializer", "parameters": "(NetworkParameters params, boolean parseLazy, boolean parseRetain)", "modifiers": "public", "return": "", "signature": " BitcoinSerializer(NetworkParameters params, boolean parseLazy, boolean parseRetain)", "full_signature": "public  BitcoinSerializer(NetworkParameters params, boolean parseLazy, boolean parseRetain)", "class_method_signature": "BitcoinSerializer.BitcoinSerializer(NetworkParameters params, boolean parseLazy, boolean parseRetain)", "testcase": false, "constructor": true}, {"identifier": "serialize", "parameters": "(String name, byte[] message, OutputStream out)", "modifiers": "public", "return": "void", "signature": "void serialize(String name, byte[] message, OutputStream out)", "full_signature": "public void serialize(String name, byte[] message, OutputStream out)", "class_method_signature": "BitcoinSerializer.serialize(String name, byte[] message, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(Message message, OutputStream out)", "modifiers": "public", "return": "void", "signature": "void serialize(Message message, OutputStream out)", "full_signature": "public void serialize(Message message, OutputStream out)", "class_method_signature": "BitcoinSerializer.serialize(Message message, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(ByteBuffer in)", "modifiers": "public", "return": "Message", "signature": "Message deserialize(ByteBuffer in)", "full_signature": "public Message deserialize(ByteBuffer in)", "class_method_signature": "BitcoinSerializer.deserialize(ByteBuffer in)", "testcase": false, "constructor": false}, {"identifier": "deserializeHeader", "parameters": "(ByteBuffer in)", "modifiers": "public", "return": "BitcoinPacketHeader", "signature": "BitcoinPacketHeader deserializeHeader(ByteBuffer in)", "full_signature": "public BitcoinPacketHeader deserializeHeader(ByteBuffer in)", "class_method_signature": "BitcoinSerializer.deserializeHeader(ByteBuffer in)", "testcase": false, "constructor": false}, {"identifier": "deserializePayload", "parameters": "(BitcoinPacketHeader header, ByteBuffer in)", "modifiers": "public", "return": "Message", "signature": "Message deserializePayload(BitcoinPacketHeader header, ByteBuffer in)", "full_signature": "public Message deserializePayload(BitcoinPacketHeader header, ByteBuffer in)", "class_method_signature": "BitcoinSerializer.deserializePayload(BitcoinPacketHeader header, ByteBuffer in)", "testcase": false, "constructor": false}, {"identifier": "makeMessage", "parameters": "(String command, int length, byte[] payloadBytes, byte[] hash, byte[] checksum)", "modifiers": "private", "return": "Message", "signature": "Message makeMessage(String command, int length, byte[] payloadBytes, byte[] hash, byte[] checksum)", "full_signature": "private Message makeMessage(String command, int length, byte[] payloadBytes, byte[] hash, byte[] checksum)", "class_method_signature": "BitcoinSerializer.makeMessage(String command, int length, byte[] payloadBytes, byte[] hash, byte[] checksum)", "testcase": false, "constructor": false}, {"identifier": "seekPastMagicBytes", "parameters": "(ByteBuffer in)", "modifiers": "public", "return": "void", "signature": "void seekPastMagicBytes(ByteBuffer in)", "full_signature": "public void seekPastMagicBytes(ByteBuffer in)", "class_method_signature": "BitcoinSerializer.seekPastMagicBytes(ByteBuffer in)", "testcase": false, "constructor": false}, {"identifier": "isParseLazyMode", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isParseLazyMode()", "full_signature": "public boolean isParseLazyMode()", "class_method_signature": "BitcoinSerializer.isParseLazyMode()", "testcase": false, "constructor": false}, {"identifier": "isParseRetainMode", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isParseRetainMode()", "full_signature": "public boolean isParseRetainMode()", "class_method_signature": "BitcoinSerializer.isParseRetainMode()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/google/bitcoin/core/BitcoinSerializer.java"}, "focal_method": {"identifier": "deserialize", "parameters": "(ByteBuffer in)", "modifiers": "public", "return": "Message", "body": "public Message deserialize(ByteBuffer in) throws ProtocolException, IOException {\n        // A Bitcoin protocol message has the following format.\n        //\n        //   - 4 byte magic number: 0xfabfb5da for the testnet or\n        //                          0xf9beb4d9 for production\n        //   - 12 byte command in ASCII\n        //   - 4 byte payload size\n        //   - 4 byte checksum\n        //   - Payload data\n        //\n        // The checksum is the first 4 bytes of a SHA256 hash of the message payload. It isn't\n        // present for all messages, notably, the first one on a connection.\n        //\n        // Satoshi's implementation ignores garbage before the magic header bytes. We have to do the same because\n        // sometimes it sends us stuff that isn't part of any message.\n        seekPastMagicBytes(in);\n        BitcoinPacketHeader header = new BitcoinPacketHeader(in);\n        // Now try to read the whole message.\n        return deserializePayload(header, in);\n    }", "signature": "Message deserialize(ByteBuffer in)", "full_signature": "public Message deserialize(ByteBuffer in)", "class_method_signature": "BitcoinSerializer.deserialize(ByteBuffer in)", "testcase": false, "constructor": false, "invocations": ["seekPastMagicBytes", "deserializePayload"]}, "repository": {"repo_id": 24363680, "url": "https://github.com/cannabiscoindev/cannabiscoinj", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 10126, "license": "licensed"}}