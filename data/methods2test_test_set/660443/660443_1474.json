{"test_class": {"identifier": "AromaticAtomsCountDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/AromaticAtomsCountDescriptorTest.java"}, "test_case": {"identifier": "testViaFlags", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testViaFlags() throws Exception {\n        IAtomContainer molecule = TestMoleculeFactory.makeBenzene();\n        for (Iterator atoms = molecule.atoms().iterator(); atoms.hasNext();) {\n            ((IAtom) atoms.next()).setFlag(CDKConstants.ISAROMATIC, true);\n        }\n        Assert.assertEquals(6, ((IntegerResult) descriptor.calculate(molecule).getValue()).intValue());\n    }", "signature": "void testViaFlags()", "full_signature": "@Test public void testViaFlags()", "class_method_signature": "AromaticAtomsCountDescriptorTest.testViaFlags()", "testcase": true, "constructor": false, "invocations": ["makeBenzene", "iterator", "atoms", "hasNext", "setFlag", "next", "assertEquals", "intValue", "getValue", "calculate"]}, "focal_class": {"identifier": "AromaticAtomsCountDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private boolean               checkAromaticity = false;", "modifier": "private", "type": "boolean", "declarator": "checkAromaticity = false", "var_name": "checkAromaticity"}, {"original_string": "private static final String[] NAMES            = {\"naAromAtom\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES            = {\"naAromAtom\"}", "var_name": "NAMES"}], "methods": [{"identifier": "AromaticAtomsCountDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " AromaticAtomsCountDescriptor()", "full_signature": "public  AromaticAtomsCountDescriptor()", "class_method_signature": "AromaticAtomsCountDescriptor.AromaticAtomsCountDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "AromaticAtomsCountDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "AromaticAtomsCountDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "AromaticAtomsCountDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "AromaticAtomsCountDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "AromaticAtomsCountDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "AromaticAtomsCountDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "AromaticAtomsCountDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "AromaticAtomsCountDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/AromaticAtomsCountDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer atomContainer) {\n        IAtomContainer ac;\n        try {\n            ac = (IAtomContainer) atomContainer.clone();\n        } catch (CloneNotSupportedException e) {\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new IntegerResult(\n                    (int) Double.NaN), getDescriptorNames(), new CDKException(\"Error during clone\"));\n        }\n\n        int aromaticAtomsCount = 0;\n        if (checkAromaticity) {\n            try {\n                AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(ac);\n            } catch (CDKException e) {\n                return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new IntegerResult(\n                        (int) Double.NaN), getDescriptorNames(), new CDKException(\"Error during atom type perception\"));\n            }\n            try {\n                Aromaticity.cdkLegacy().apply(ac);\n            } catch (CDKException e) {\n                return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new IntegerResult(\n                        (int) Double.NaN), getDescriptorNames(), new CDKException(\n                        \"Error during aromaticity detection: \" + e.getMessage()));\n            }\n        }\n        for (int i = 0; i < ac.getAtomCount(); i++) {\n            if (ac.getAtom(i).getFlag(CDKConstants.ISAROMATIC)) {\n                aromaticAtomsCount += 1;\n            }\n        }\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new IntegerResult(\n                aromaticAtomsCount), getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "AromaticAtomsCountDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["clone", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "percieveAtomTypesAndConfigureAtoms", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "apply", "cdkLegacy", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "getMessage", "getAtomCount", "getFlag", "getAtom", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}