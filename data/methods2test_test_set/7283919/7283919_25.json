{"test_class": {"identifier": "DataCellTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private DataRow row;", "modifier": "@Mock private", "type": "DataRow", "declarator": "row", "var_name": "row"}, {"original_string": "@Mock private DataRow row2;", "modifier": "@Mock private", "type": "DataRow", "declarator": "row2", "var_name": "row2"}, {"original_string": "@Mock private DataRow row3;", "modifier": "@Mock private", "type": "DataRow", "declarator": "row3", "var_name": "row3"}, {"original_string": "private DataCell cell;", "modifier": "private", "type": "DataCell", "declarator": "cell", "var_name": "cell"}, {"original_string": "private DataCell nullValueCell;", "modifier": "private", "type": "DataCell", "declarator": "nullValueCell", "var_name": "nullValueCell"}, {"original_string": "private DataCell nullValueCell2;", "modifier": "private", "type": "DataCell", "declarator": "nullValueCell2", "var_name": "nullValueCell2"}], "file": "dbfit-java/core/src/test/java/dbfit/util/DataCellTest.java"}, "test_case": {"identifier": "twoNullValueCellsShouldBeEqualToEachOther", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void twoNullValueCellsShouldBeEqualToEachOther() {\n        assertTrue(nullValueCell.equalTo(nullValueCell2));\n    }", "signature": "void twoNullValueCellsShouldBeEqualToEachOther()", "full_signature": "@Test public void twoNullValueCellsShouldBeEqualToEachOther()", "class_method_signature": "DataCellTest.twoNullValueCellsShouldBeEqualToEachOther()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equalTo"]}, "focal_class": {"identifier": "DataCell", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DataRow row;", "modifier": "private", "type": "DataRow", "declarator": "row", "var_name": "row"}, {"original_string": "private String columnName;", "modifier": "private", "type": "String", "declarator": "columnName", "var_name": "columnName"}], "methods": [{"identifier": "DataCell", "parameters": "(final DataRow row, final String columnName)", "modifiers": "public", "return": "", "signature": " DataCell(final DataRow row, final String columnName)", "full_signature": "public  DataCell(final DataRow row, final String columnName)", "class_method_signature": "DataCell.DataCell(final DataRow row, final String columnName)", "testcase": false, "constructor": true}, {"identifier": "createDataCell", "parameters": "(final DataRow row, final String col)", "modifiers": "public static", "return": "DataCell", "signature": "DataCell createDataCell(final DataRow row, final String col)", "full_signature": "public static DataCell createDataCell(final DataRow row, final String col)", "class_method_signature": "DataCell.createDataCell(final DataRow row, final String col)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DataCell.toString()", "testcase": false, "constructor": false}, {"identifier": "equalTo", "parameters": "(final DataCell cell2)", "modifiers": "public", "return": "boolean", "signature": "boolean equalTo(final DataCell cell2)", "full_signature": "public boolean equalTo(final DataCell cell2)", "class_method_signature": "DataCell.equalTo(final DataCell cell2)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "private", "return": "Object", "signature": "Object getValue()", "full_signature": "private Object getValue()", "class_method_signature": "DataCell.getValue()", "testcase": false, "constructor": false}], "file": "dbfit-java/core/src/main/java/dbfit/util/DataCell.java"}, "focal_method": {"identifier": "equalTo", "parameters": "(final DataCell cell2)", "modifiers": "public", "return": "boolean", "body": "public boolean equalTo(final DataCell cell2) {\n        return (cell2 != null) &&\n            ( (this == cell2) || Objects.equals(getValue(), cell2.getValue()) );\n    }", "signature": "boolean equalTo(final DataCell cell2)", "full_signature": "public boolean equalTo(final DataCell cell2)", "class_method_signature": "DataCell.equalTo(final DataCell cell2)", "testcase": false, "constructor": false, "invocations": ["equals", "getValue", "getValue"]}, "repository": {"repo_id": 7283919, "url": "https://github.com/dbfit/dbfit", "language": "Java", "is_fork": false, "fork_count": 83, "stargazer_count": 181, "size": 6978, "license": "licensed"}}