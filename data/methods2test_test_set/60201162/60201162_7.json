{"test_class": {"identifier": "TestC3QueryUtils", "superclass": "", "interfaces": "", "fields": [], "file": "uReplicator-Common/src/test/java/com/uber/stream/kafka/mirrormaker/common/utils/TestC3QueryUtils.java"}, "test_case": {"identifier": "testExtractJsonResults", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testExtractJsonResults() {\n    Map<String, TopicWorkload> workloads = new HashMap<>();\n\n    // full results\n    C3QueryUtils.extractJsonResults(\n        \"{\\\"topic1\\\":[{\\\"endTimeSec\\\":1485991200,\\\"startTimeSec\\\":1485988200,\\\"totalBytes\\\":30000,\\\"totalCount\\\":3000}],\"\n            + \"\\\"topic2\\\":[{\\\"endTimeSec\\\":1485991200,\\\"invalidCount\\\":0,\\\"maxLatencyFromCreation\\\":3750,\\\"meanLatencyFromCreation\\\":1576.2152157017917,\\\"p99LatencyFromCreation\\\":3529,\\\"startTimeSec\\\":1485988200,\\\"totalBytes\\\":3000000,\\\"totalCount\\\":1500}]}\",\n        Arrays.asList(\"topic1\", \"topic2\"), workloads);\n    TopicWorkload tw1 = workloads.get(\"topic1\");\n    Assert.assertEquals(tw1.getBytesPerSecond(), 10, 0.01);\n    Assert.assertEquals(tw1.getMsgsPerSecond(), 1, 0.01);\n    TopicWorkload tw2 = workloads.get(\"topic2\");\n    Assert.assertEquals(tw2.getBytesPerSecond(), 1000, 0.01);\n    Assert.assertEquals(tw2.getMsgsPerSecond(), 0.5, 0.01);\n    workloads.clear();\n\n    // no result\n    C3QueryUtils.extractJsonResults(\"\", Arrays.asList(\"topic1\", \"topic2\"), workloads);\n    Assert.assertTrue(workloads.isEmpty());\n\n    // no result\n    C3QueryUtils.extractJsonResults(\"{}\", Arrays.asList(\"topic1\", \"topic2\"), workloads);\n    Assert.assertTrue(workloads.isEmpty());\n\n    // empty result\n    C3QueryUtils.extractJsonResults(\"{\\\"topic1\\\":[]}\", Arrays.asList(\"topic1\", \"topic2\"), workloads);\n    Assert.assertTrue(workloads.isEmpty());\n\n    // missing partial result for one of the topics\n    C3QueryUtils.extractJsonResults(\n        \"{\\\"topic1\\\":[{,\\\"startTimeSec\\\":1485988200,\\\"totalBytes\\\":30000,\\\"totalCount\\\":3000}],\"\n            + \"\\\"topic2\\\":[{\\\"endTimeSec\\\":1485991200,\\\"invalidCount\\\":0,\\\"maxLatencyFromCreation\\\":3750,\\\"meanLatencyFromCreation\\\":1576.2152157017917,\\\"p99LatencyFromCreation\\\":3529,\\\"startTimeSec\\\":1485988200,\\\"totalBytes\\\":3000000,\\\"totalCount\\\":1500}]}\",\n        Arrays.asList(\"topic1\", \"topic2\"), workloads);\n    tw1 = workloads.get(\"topic1\");\n    Assert.assertNull(tw1);\n    tw2 = workloads.get(\"topic2\");\n    Assert.assertEquals(tw2.getBytesPerSecond(), 1000, 0.01);\n    Assert.assertEquals(tw2.getMsgsPerSecond(), 0.5, 0.01);\n    workloads.clear();\n\n    // invalid partial result for one of the topics\n    C3QueryUtils.extractJsonResults(\n        \"{\\\"topic1\\\":[{\\\"endTimeSec\\\":1485988200,\\\"startTimeSec\\\":1485988200,\\\"totalBytes\\\":30000,\\\"totalCount\\\":3000}],\"\n            + \"\\\"topic2\\\":[{\\\"endTimeSec\\\":1485991200,\\\"invalidCount\\\":0,\\\"maxLatencyFromCreation\\\":3750,\\\"meanLatencyFromCreation\\\":1576.2152157017917,\\\"p99LatencyFromCreation\\\":3529,\\\"startTimeSec\\\":1485988200,\\\"totalBytes\\\":3000000,\\\"totalCount\\\":1500}]}\",\n        Arrays.asList(\"topic1\", \"topic2\"), workloads);\n    tw1 = workloads.get(\"topic1\");\n    Assert.assertNull(tw1);\n    tw2 = workloads.get(\"topic2\");\n    Assert.assertEquals(tw2.getBytesPerSecond(), 1000, 0.01);\n    Assert.assertEquals(tw2.getMsgsPerSecond(), 0.5, 0.01);\n    workloads.clear();\n  }", "signature": "void testExtractJsonResults()", "full_signature": "@Test public void testExtractJsonResults()", "class_method_signature": "TestC3QueryUtils.testExtractJsonResults()", "testcase": true, "constructor": false, "invocations": ["extractJsonResults", "asList", "get", "assertEquals", "getBytesPerSecond", "assertEquals", "getMsgsPerSecond", "get", "assertEquals", "getBytesPerSecond", "assertEquals", "getMsgsPerSecond", "clear", "extractJsonResults", "asList", "assertTrue", "isEmpty", "extractJsonResults", "asList", "assertTrue", "isEmpty", "extractJsonResults", "asList", "assertTrue", "isEmpty", "extractJsonResults", "asList", "get", "assertNull", "get", "assertEquals", "getBytesPerSecond", "assertEquals", "getMsgsPerSecond", "clear", "extractJsonResults", "asList", "get", "assertNull", "get", "assertEquals", "getBytesPerSecond", "assertEquals", "getMsgsPerSecond", "clear"]}, "focal_class": {"identifier": "C3QueryUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(C3QueryUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(C3QueryUtils.class)", "var_name": "LOGGER"}, {"original_string": "private static final String DEFAULT_QUERY_PATH = \"/chaperone3/rawmetrics?\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_QUERY_PATH = \"/chaperone3/rawmetrics?\"", "var_name": "DEFAULT_QUERY_PATH"}, {"original_string": "private static final long DEFAULT_QUERY_MINIMUM_END_TO_CURRENT_SEC = 600;", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_QUERY_MINIMUM_END_TO_CURRENT_SEC = 600", "var_name": "DEFAULT_QUERY_MINIMUM_END_TO_CURRENT_SEC"}, {"original_string": "private static final int DEFAULT_BATCH_TOPICS = 100;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_BATCH_TOPICS = 100", "var_name": "DEFAULT_BATCH_TOPICS"}], "methods": [{"identifier": "retrieveTopicInRate", "parameters": "(long timeInMs, long windowInMs, String c3Host,\n      int c3Port, String kafkaCluster, List<String> topics)", "modifiers": "public static", "return": "Map<String, TopicWorkload>", "signature": "Map<String, TopicWorkload> retrieveTopicInRate(long timeInMs, long windowInMs, String c3Host,\n      int c3Port, String kafkaCluster, List<String> topics)", "full_signature": "public static Map<String, TopicWorkload> retrieveTopicInRate(long timeInMs, long windowInMs, String c3Host,\n      int c3Port, String kafkaCluster, List<String> topics)", "class_method_signature": "C3QueryUtils.retrieveTopicInRate(long timeInMs, long windowInMs, String c3Host,\n      int c3Port, String kafkaCluster, List<String> topics)", "testcase": false, "constructor": false}, {"identifier": "extractJsonResults", "parameters": "(String jsonStr, List<String> topics, Map<String, TopicWorkload> workloads)", "modifiers": "static", "return": "void", "signature": "void extractJsonResults(String jsonStr, List<String> topics, Map<String, TopicWorkload> workloads)", "full_signature": "static void extractJsonResults(String jsonStr, List<String> topics, Map<String, TopicWorkload> workloads)", "class_method_signature": "C3QueryUtils.extractJsonResults(String jsonStr, List<String> topics, Map<String, TopicWorkload> workloads)", "testcase": false, "constructor": false}, {"identifier": "makeQuery", "parameters": "(String c3Host, int c3Port, String query)", "modifiers": "private static", "return": "String", "signature": "String makeQuery(String c3Host, int c3Port, String query)", "full_signature": "private static String makeQuery(String c3Host, int c3Port, String query)", "class_method_signature": "C3QueryUtils.makeQuery(String c3Host, int c3Port, String query)", "testcase": false, "constructor": false}], "file": "uReplicator-Common/src/main/java/com/uber/stream/kafka/mirrormaker/common/utils/C3QueryUtils.java"}, "focal_method": {"identifier": "extractJsonResults", "parameters": "(String jsonStr, List<String> topics, Map<String, TopicWorkload> workloads)", "modifiers": "static", "return": "void", "body": "static void extractJsonResults(String jsonStr, List<String> topics, Map<String, TopicWorkload> workloads) {\n    try {\n      JSONObject jsonObj = JSON.parseObject(jsonStr);\n      if (jsonObj == null) {\n        LOGGER.info(\"Failed to parse C3 result: \" + jsonStr);\n        return;\n      }\n      for (String topic : topics) {\n        JSONArray arr = jsonObj.getJSONArray(topic);\n        if (arr == null || arr.size() == 0) {\n          continue;\n        }\n        JSONObject metrics = arr.getJSONObject(0);\n        if (metrics == null) {\n          LOGGER.info(\"Failed to parse C3 result for topic '\" + topic + \"'\");\n          continue;\n        }\n        Long startTimeSec = metrics.getLong(\"startTimeSec\");\n        Long endTimeSec = metrics.getLong(\"endTimeSec\");\n        Long totalBytes = metrics.getLong(\"totalBytes\");\n        Long totalCount = metrics.getLong(\"totalCount\");\n        if (startTimeSec == null || endTimeSec == null || totalBytes == null || totalCount == null) {\n          LOGGER.info(\"Failed to parse C3 result for topic '\" + topic + \"'\");\n          continue;\n        }\n        double period = endTimeSec - startTimeSec;\n        if (period <= 0) {\n          LOGGER.info(\"Invalid C3 result for topic '\" + topic + \"': startTimeSec=\" + startTimeSec + \",\"\n              + \" endTimeSec=\" + endTimeSec);\n          continue;\n        }\n        TopicWorkload tw = new TopicWorkload(totalBytes / period, totalCount / period);\n        tw.setLastUpdate(endTimeSec * 1000);\n        workloads.put(topic, tw);\n      }\n    } catch (Exception e) {\n      LOGGER.error(\"Failed to extract workload information from JSON: \" + jsonStr, e);\n    }\n  }", "signature": "void extractJsonResults(String jsonStr, List<String> topics, Map<String, TopicWorkload> workloads)", "full_signature": "static void extractJsonResults(String jsonStr, List<String> topics, Map<String, TopicWorkload> workloads)", "class_method_signature": "C3QueryUtils.extractJsonResults(String jsonStr, List<String> topics, Map<String, TopicWorkload> workloads)", "testcase": false, "constructor": false, "invocations": ["parseObject", "info", "getJSONArray", "size", "getJSONObject", "info", "getLong", "getLong", "getLong", "getLong", "info", "info", "setLastUpdate", "put", "error"]}, "repository": {"repo_id": 60201162, "url": "https://github.com/uber/uReplicator", "language": "Java", "is_fork": false, "fork_count": 148, "stargazer_count": 652, "size": 2223, "license": "licensed"}}