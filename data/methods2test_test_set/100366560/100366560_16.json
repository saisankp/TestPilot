{"test_class": {"identifier": "TypeTokenUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "beanmother-core/src/test/java/io/beanmother/core/util/TypeTokenUtilsTest.java"}, "test_case": {"identifier": "testRaiseException_extractElementTypeToken", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testRaiseException_extractElementTypeToken() {\n        TypeTokenUtils.extractElementTypeToken(TypeToken.of(Integer.class));\n    }", "signature": "void testRaiseException_extractElementTypeToken()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testRaiseException_extractElementTypeToken()", "class_method_signature": "TypeTokenUtilsTest.testRaiseException_extractElementTypeToken()", "testcase": true, "constructor": false, "invocations": ["extractElementTypeToken", "of"]}, "focal_class": {"identifier": "TypeTokenUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "extractElementTypeToken", "parameters": "(TypeToken<?> typeToken)", "modifiers": "public static", "return": "TypeToken<?>", "signature": "TypeToken<?> extractElementTypeToken(TypeToken<?> typeToken)", "full_signature": "public static TypeToken<?> extractElementTypeToken(TypeToken<?> typeToken)", "class_method_signature": "TypeTokenUtils.extractElementTypeToken(TypeToken<?> typeToken)", "testcase": false, "constructor": false}, {"identifier": "extractGenericTypeTokens", "parameters": "(TypeToken<?> typeToken)", "modifiers": "public static", "return": "List<TypeToken<?>>", "signature": "List<TypeToken<?>> extractGenericTypeTokens(TypeToken<?> typeToken)", "full_signature": "public static List<TypeToken<?>> extractGenericTypeTokens(TypeToken<?> typeToken)", "class_method_signature": "TypeTokenUtils.extractGenericTypeTokens(TypeToken<?> typeToken)", "testcase": false, "constructor": false}], "file": "beanmother-core/src/main/java/io/beanmother/core/util/TypeTokenUtils.java"}, "focal_method": {"identifier": "extractElementTypeToken", "parameters": "(TypeToken<?> typeToken)", "modifiers": "public static", "return": "TypeToken<?>", "body": "public static TypeToken<?> extractElementTypeToken(TypeToken<?> typeToken) {\n        if (typeToken.isSubtypeOf(Collection.class)) {\n            List<TypeToken<?>> genericTypeTokens = TypeTokenUtils.extractGenericTypeTokens(typeToken);\n            if (genericTypeTokens.size() == 0) {\n                return TypeToken.of(Object.class);\n            } else {\n                return genericTypeTokens.get(0);\n            }\n        } else if (typeToken.isArray()) {\n            return typeToken.getComponentType();\n        } else {\n            throw new IllegalArgumentException(\"typeToken must be from List or array\");\n        }\n    }", "signature": "TypeToken<?> extractElementTypeToken(TypeToken<?> typeToken)", "full_signature": "public static TypeToken<?> extractElementTypeToken(TypeToken<?> typeToken)", "class_method_signature": "TypeTokenUtils.extractElementTypeToken(TypeToken<?> typeToken)", "testcase": false, "constructor": false, "invocations": ["isSubtypeOf", "extractGenericTypeTokens", "size", "of", "get", "isArray", "getComponentType"]}, "repository": {"repo_id": 100366560, "url": "https://github.com/keepcosmos/beanmother", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 95, "size": 688, "license": "licensed"}}