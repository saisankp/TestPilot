{"test_class": {"identifier": "ComponentEventRestServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger( ComponentEventRestServiceTest.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( ComponentEventRestServiceTest.class )", "var_name": "logger"}, {"original_string": "private ConnectorStatistics connectorStatistics;", "modifier": "private", "type": "ConnectorStatistics", "declarator": "connectorStatistics", "var_name": "connectorStatistics"}, {"original_string": "private Server server;", "modifier": "private", "type": "Server", "declarator": "server", "var_name": "server"}], "file": "modules/hms-core/src/test/java/com/vmware/vrack/hms/rest/services/ComponentEventRestServiceTest.java"}, "test_case": {"identifier": "getComponentEvents_nodeNotInNodeMap", "parameters": "()", "modifiers": "@Test( expected = HMSRestException.class ) public", "return": "void", "body": "@Test( expected = HMSRestException.class )\n    public void getComponentEvents_nodeNotInNodeMap()\n        throws HMSRestException\n    {\n        clearNodeMapAndBoardService();\n\n        ComponentEventRestService restService = new ComponentEventRestService();\n        restService.getComponnetEvents( \"N1\", EventComponent.CPU );\n    }", "signature": "void getComponentEvents_nodeNotInNodeMap()", "full_signature": "@Test( expected = HMSRestException.class ) public void getComponentEvents_nodeNotInNodeMap()", "class_method_signature": "ComponentEventRestServiceTest.getComponentEvents_nodeNotInNodeMap()", "testcase": true, "constructor": false, "invocations": ["clearNodeMapAndBoardService", "getComponnetEvents"]}, "focal_class": {"identifier": "ComponentEventRestService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ServerNodeConnector serverConnector = ServerNodeConnector.getInstance();", "modifier": "private", "type": "ServerNodeConnector", "declarator": "serverConnector = ServerNodeConnector.getInstance()", "var_name": "serverConnector"}, {"original_string": "private SwitchNodeConnector switchConnector = SwitchNodeConnector.getInstance();", "modifier": "private", "type": "SwitchNodeConnector", "declarator": "switchConnector = SwitchNodeConnector.getInstance()", "var_name": "switchConnector"}, {"original_string": "private Logger logger = LoggerFactory.getLogger( ComponentEventRestService.class );", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( ComponentEventRestService.class )", "var_name": "logger"}], "methods": [{"identifier": "getComponnetEvents", "parameters": "( @PathParam( \"host_id\" ) String host_id,\n                                           @PathParam( \"event_source\" ) EventComponent event_source )", "modifiers": "@GET @Path( \"/host/{host_id}/{event_source}\" ) @Produces( \"application/json\" ) public", "return": "List<Event>", "signature": "List<Event> getComponnetEvents( @PathParam( \"host_id\" ) String host_id,\n                                           @PathParam( \"event_source\" ) EventComponent event_source )", "full_signature": "@GET @Path( \"/host/{host_id}/{event_source}\" ) @Produces( \"application/json\" ) public List<Event> getComponnetEvents( @PathParam( \"host_id\" ) String host_id,\n                                           @PathParam( \"event_source\" ) EventComponent event_source )", "class_method_signature": "ComponentEventRestService.getComponnetEvents( @PathParam( \"host_id\" ) String host_id,\n                                           @PathParam( \"event_source\" ) EventComponent event_source )", "testcase": false, "constructor": false}, {"identifier": "getComponnetNmeEvents", "parameters": "( @PathParam( \"host_id\" ) String host_id )", "modifiers": "@GET @Path( \"/host/nme/{host_id}\" ) @Produces( \"application/json\" ) public", "return": "List<Event>", "signature": "List<Event> getComponnetNmeEvents( @PathParam( \"host_id\" ) String host_id )", "full_signature": "@GET @Path( \"/host/nme/{host_id}\" ) @Produces( \"application/json\" ) public List<Event> getComponnetNmeEvents( @PathParam( \"host_id\" ) String host_id )", "class_method_signature": "ComponentEventRestService.getComponnetNmeEvents( @PathParam( \"host_id\" ) String host_id )", "testcase": false, "constructor": false}, {"identifier": "getComponentEvents", "parameters": "()", "modifiers": "@GET @Path( value = \"/host/HMS\" ) @Produces( \"application/json\" ) public", "return": "List<Event>", "signature": "List<Event> getComponentEvents()", "full_signature": "@GET @Path( value = \"/host/HMS\" ) @Produces( \"application/json\" ) public List<Event> getComponentEvents()", "class_method_signature": "ComponentEventRestService.getComponentEvents()", "testcase": false, "constructor": false}, {"identifier": "getSwitchComponentEvents", "parameters": "( @PathParam( \"switch_id\" ) String switchId,\n                                                 @PathParam( \"event_source\" ) EventComponent eventSource )", "modifiers": "@GET @Path( \"/switches/{switch_id}/{event_source}\" ) @Produces( \"application/json\" ) public", "return": "List<Event>", "signature": "List<Event> getSwitchComponentEvents( @PathParam( \"switch_id\" ) String switchId,\n                                                 @PathParam( \"event_source\" ) EventComponent eventSource )", "full_signature": "@GET @Path( \"/switches/{switch_id}/{event_source}\" ) @Produces( \"application/json\" ) public List<Event> getSwitchComponentEvents( @PathParam( \"switch_id\" ) String switchId,\n                                                 @PathParam( \"event_source\" ) EventComponent eventSource )", "class_method_signature": "ComponentEventRestService.getSwitchComponentEvents( @PathParam( \"switch_id\" ) String switchId,\n                                                 @PathParam( \"event_source\" ) EventComponent eventSource )", "testcase": false, "constructor": false}, {"identifier": "getSwitchComponentNmeEvents", "parameters": "( @PathParam( \"switch_id\" ) String switchId )", "modifiers": "@GET @Path( \"/switches/nme/{switch_id}\" ) @Produces( \"application/json\" ) public", "return": "List<Event>", "signature": "List<Event> getSwitchComponentNmeEvents( @PathParam( \"switch_id\" ) String switchId )", "full_signature": "@GET @Path( \"/switches/nme/{switch_id}\" ) @Produces( \"application/json\" ) public List<Event> getSwitchComponentNmeEvents( @PathParam( \"switch_id\" ) String switchId )", "class_method_signature": "ComponentEventRestService.getSwitchComponentNmeEvents( @PathParam( \"switch_id\" ) String switchId )", "testcase": false, "constructor": false}, {"identifier": "executeServerMonitorTask", "parameters": "( ServerNode node, ServerComponent component )", "modifiers": "private", "return": "void", "signature": "void executeServerMonitorTask( ServerNode node, ServerComponent component )", "full_signature": "private void executeServerMonitorTask( ServerNode node, ServerComponent component )", "class_method_signature": "ComponentEventRestService.executeServerMonitorTask( ServerNode node, ServerComponent component )", "testcase": false, "constructor": false}, {"identifier": "executeSwitchMonitorTask", "parameters": "( HmsNode node, SwitchComponentEnum component, SwitchRoleType switchrole )", "modifiers": "private", "return": "void", "signature": "void executeSwitchMonitorTask( HmsNode node, SwitchComponentEnum component, SwitchRoleType switchrole )", "full_signature": "private void executeSwitchMonitorTask( HmsNode node, SwitchComponentEnum component, SwitchRoleType switchrole )", "class_method_signature": "ComponentEventRestService.executeSwitchMonitorTask( HmsNode node, SwitchComponentEnum component, SwitchRoleType switchrole )", "testcase": false, "constructor": false}, {"identifier": "executeHealthMonitorTask", "parameters": "( ServerNode node, ServerComponent component )", "modifiers": "private", "return": "void", "signature": "void executeHealthMonitorTask( ServerNode node, ServerComponent component )", "full_signature": "private void executeHealthMonitorTask( ServerNode node, ServerComponent component )", "class_method_signature": "ComponentEventRestService.executeHealthMonitorTask( ServerNode node, ServerComponent component )", "testcase": false, "constructor": false}], "file": "modules/hms-core/src/main/java/com/vmware/vrack/hms/rest/services/ComponentEventRestService.java"}, "focal_method": {"identifier": "getComponnetEvents", "parameters": "( @PathParam( \"host_id\" ) String host_id,\n                                           @PathParam( \"event_source\" ) EventComponent event_source )", "modifiers": "@GET @Path( \"/host/{host_id}/{event_source}\" ) @Produces( \"application/json\" ) public", "return": "List<Event>", "body": "@GET\n    @Path( \"/host/{host_id}/{event_source}\" )\n    @Produces( \"application/json\" )\n    public List<Event> getComponnetEvents( @PathParam( \"host_id\" ) String host_id,\n                                           @PathParam( \"event_source\" ) EventComponent event_source )\n        throws HMSRestException\n    {\n\n        if ( !serverConnector.getNodeMap().containsKey( host_id ) )\n            throw new HMSRestException( Status.NOT_FOUND.getStatusCode(), \"Invalid Request\",\n                                        \"Can't find host with id \" + host_id );\n        else\n        {\n\n            ServerNode node = (ServerNode) serverConnector.getNodeMap().get( host_id );\n            try\n            {\n                ServerComponent component = EventMonitoringSubscriptionHolder.getMappedServerComponents( event_source );\n                executeServerMonitorTask( node, component );\n                return EventMonitoringSubscriptionHolder.getEventList( node, component );\n            }\n            catch ( HmsOperationNotSupportedException e )\n            {\n                logger.error( \"Operation not supported for node :\" + host_id + \" component: \" + event_source );\n                throw new HMSRestException( Status.INTERNAL_SERVER_ERROR.getStatusCode(), \"Server Error\",\n                                            e.getMessage() );\n            }\n            catch ( HMSRestException e )\n            {\n                logger.error( \"Error getting sensor events for node :\" + host_id + \" component: \" + event_source, e );\n                throw e;\n            }\n            catch ( HmsException e )\n            {\n                logger.error( \"Error getting sensor events for node :\" + host_id + \" component: \" + event_source, e );\n                throw new HMSRestException( Status.INTERNAL_SERVER_ERROR.getStatusCode(), \"Server Error\",\n                                            e.getMessage() );\n            }\n            catch ( Exception e )\n            {\n                logger.error( \"Error getting sensor events for node :\" + host_id + \" component: \" + event_source, e );\n                throw new HMSRestException( Status.INTERNAL_SERVER_ERROR.getStatusCode(), \"Server Error\",\n                                            e.getMessage() );\n            }\n        }\n    }", "signature": "List<Event> getComponnetEvents( @PathParam( \"host_id\" ) String host_id,\n                                           @PathParam( \"event_source\" ) EventComponent event_source )", "full_signature": "@GET @Path( \"/host/{host_id}/{event_source}\" ) @Produces( \"application/json\" ) public List<Event> getComponnetEvents( @PathParam( \"host_id\" ) String host_id,\n                                           @PathParam( \"event_source\" ) EventComponent event_source )", "class_method_signature": "ComponentEventRestService.getComponnetEvents( @PathParam( \"host_id\" ) String host_id,\n                                           @PathParam( \"event_source\" ) EventComponent event_source )", "testcase": false, "constructor": false, "invocations": ["containsKey", "getNodeMap", "getStatusCode", "get", "getNodeMap", "getMappedServerComponents", "executeServerMonitorTask", "getEventList", "error", "getStatusCode", "getMessage", "error", "error", "getStatusCode", "getMessage", "error", "getStatusCode", "getMessage"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}