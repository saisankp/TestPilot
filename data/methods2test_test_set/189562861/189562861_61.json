{"test_class": {"identifier": "WebserviceProtocolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();", "modifier": "private", "type": "Protocol", "declarator": "protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension()", "var_name": "protocol"}, {"original_string": "private ProxyFactory proxy = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();", "modifier": "private", "type": "ProxyFactory", "declarator": "proxy = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension()", "var_name": "proxy"}], "file": "dubbo-rpc/dubbo-rpc-webservice/src/test/java/com/alibaba/dubbo/rpc/protocol/webservice/WebserviceProtocolTest.java"}, "test_case": {"identifier": "testWebserviceProtocol", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWebserviceProtocol() throws Exception {\n        DemoService service = new DemoServiceImpl();\n        protocol.export(proxy.getInvoker(service, DemoService.class, URL.valueOf(\"webservice://127.0.0.1:9019/\" + DemoService.class.getName())));\n        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf(\"webservice://127.0.0.1:9019/\" + DemoService.class.getName() + \"?timeout=3000\")));\n        assertEquals(service.create(1,\"kk\").getName(), \"kk\");\n        assertEquals(service.getSize(null), -1);\n        assertEquals(service.getSize(new String[]{\"\", \"\", \"\"}), 3);\n        Object object = service.invoke(\"webservice://127.0.0.1:9019/\" + DemoService.class.getName() + \"\", \"invoke\");\n        System.out.println(object);\n        assertEquals(\"webservice://127.0.0.1:9019/com.alibaba.dubbo.rpc.protocol.webservice.DemoService:invoke\", object);\n\n        StringBuffer buf = new StringBuffer();\n        for (int i = 0; i < 1024 * 32 + 32; i++)\n            buf.append('A');\n        assertEquals(32800,service.stringLength(buf.toString()));\n\n//  a method start with $ is illegal in soap\n//        // cast to EchoService\n//        EchoService echo = proxy.getProxy(protocol.refer(EchoService.class, URL.valueOf(\"webservice://127.0.0.1:9010/\" + DemoService.class.getName() + \"?client=netty\")));\n//        assertEquals(echo.echo(buf.toString()), buf.toString());\n//        assertEquals(echo.$echo(\"test\"), \"test\");\n//        assertEquals(echo.$echo(\"abcdefg\"), \"abcdefg\");\n//        assertEquals(echo.$echo(1234), 1234);\n    }", "signature": "void testWebserviceProtocol()", "full_signature": "@Test public void testWebserviceProtocol()", "class_method_signature": "WebserviceProtocolTest.testWebserviceProtocol()", "testcase": true, "constructor": false, "invocations": ["export", "getInvoker", "valueOf", "getName", "getProxy", "refer", "valueOf", "getName", "assertEquals", "getName", "create", "assertEquals", "getSize", "assertEquals", "getSize", "invoke", "getName", "println", "assertEquals", "append", "assertEquals", "stringLength", "toString"]}, "focal_class": {"identifier": "WebServiceProtocol", "superclass": "extends AbstractProxyProtocol", "interfaces": "", "fields": [{"original_string": "public static final int DEFAULT_PORT = 80;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_PORT = 80", "var_name": "DEFAULT_PORT"}, {"original_string": "private final Map<String, HttpServer> serverMap = new ConcurrentHashMap<String, HttpServer>();", "modifier": "private final", "type": "Map<String, HttpServer>", "declarator": "serverMap = new ConcurrentHashMap<String, HttpServer>()", "var_name": "serverMap"}, {"original_string": "private final ExtensionManagerBus bus = new ExtensionManagerBus();", "modifier": "private final", "type": "ExtensionManagerBus", "declarator": "bus = new ExtensionManagerBus()", "var_name": "bus"}, {"original_string": "private final HTTPTransportFactory transportFactory = new HTTPTransportFactory();", "modifier": "private final", "type": "HTTPTransportFactory", "declarator": "transportFactory = new HTTPTransportFactory()", "var_name": "transportFactory"}, {"original_string": "private HttpBinder httpBinder;", "modifier": "private", "type": "HttpBinder", "declarator": "httpBinder", "var_name": "httpBinder"}], "methods": [{"identifier": "WebServiceProtocol", "parameters": "()", "modifiers": "public", "return": "", "signature": " WebServiceProtocol()", "full_signature": "public  WebServiceProtocol()", "class_method_signature": "WebServiceProtocol.WebServiceProtocol()", "testcase": false, "constructor": true}, {"identifier": "setHttpBinder", "parameters": "(HttpBinder httpBinder)", "modifiers": "public", "return": "void", "signature": "void setHttpBinder(HttpBinder httpBinder)", "full_signature": "public void setHttpBinder(HttpBinder httpBinder)", "class_method_signature": "WebServiceProtocol.setHttpBinder(HttpBinder httpBinder)", "testcase": false, "constructor": false}, {"identifier": "getDefaultPort", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDefaultPort()", "full_signature": "@Override public int getDefaultPort()", "class_method_signature": "WebServiceProtocol.getDefaultPort()", "testcase": false, "constructor": false}, {"identifier": "doExport", "parameters": "(T impl, Class<T> type, URL url)", "modifiers": "@Override protected", "return": "Runnable", "signature": "Runnable doExport(T impl, Class<T> type, URL url)", "full_signature": "@Override protected Runnable doExport(T impl, Class<T> type, URL url)", "class_method_signature": "WebServiceProtocol.doExport(T impl, Class<T> type, URL url)", "testcase": false, "constructor": false}, {"identifier": "doRefer", "parameters": "(final Class<T> serviceType, final URL url)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") protected", "return": "T", "signature": "T doRefer(final Class<T> serviceType, final URL url)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") protected T doRefer(final Class<T> serviceType, final URL url)", "class_method_signature": "WebServiceProtocol.doRefer(final Class<T> serviceType, final URL url)", "testcase": false, "constructor": false}, {"identifier": "getErrorCode", "parameters": "(Throwable e)", "modifiers": "@Override protected", "return": "int", "signature": "int getErrorCode(Throwable e)", "full_signature": "@Override protected int getErrorCode(Throwable e)", "class_method_signature": "WebServiceProtocol.getErrorCode(Throwable e)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-webservice/src/main/java/com/alibaba/dubbo/rpc/protocol/webservice/WebServiceProtocol.java"}, "focal_method": {"identifier": "WebServiceProtocol", "parameters": "()", "modifiers": "public", "return": "", "body": "public WebServiceProtocol() {\n        super(Fault.class);\n        bus.setExtension(new ServletDestinationFactory(), HttpDestinationFactory.class);\n    }", "signature": " WebServiceProtocol()", "full_signature": "public  WebServiceProtocol()", "class_method_signature": "WebServiceProtocol.WebServiceProtocol()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}