{"test_class": {"identifier": "WorkerCounterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long TIMEOUT = 1000;", "modifier": "private static final", "type": "long", "declarator": "TIMEOUT = 1000", "var_name": "TIMEOUT"}, {"original_string": "@Rule\n    public final ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public final", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private final EventSpy events = new EventSpy();", "modifier": "private final", "type": "EventSpy", "declarator": "events = new EventSpy()", "var_name": "events"}, {"original_string": "private final UncaughtExceptionCollector uncaughtExceptions = new UncaughtExceptionCollector();", "modifier": "private final", "type": "UncaughtExceptionCollector", "declarator": "uncaughtExceptions = new UncaughtExceptionCollector()", "var_name": "uncaughtExceptions"}, {"original_string": "private ExecutorService realExecutor = Executors.newCachedThreadPool(new ThreadFactory() {\n        private int counter = 0;\n\n        @Override\n        public Thread newThread(Runnable r) {\n            counter++;\n            Thread t = new Thread(r, \"pool-thread-\" + counter);\n            t.setUncaughtExceptionHandler(uncaughtExceptions);\n            return t;\n        }\n    });", "modifier": "private", "type": "ExecutorService", "declarator": "realExecutor = Executors.newCachedThreadPool(new ThreadFactory() {\n        private int counter = 0;\n\n        @Override\n        public Thread newThread(Runnable r) {\n            counter++;\n            Thread t = new Thread(r, \"pool-thread-\" + counter);\n            t.setUncaughtExceptionHandler(uncaughtExceptions);\n            return t;\n        }\n    })", "var_name": "realExecutor"}], "file": "jumi-actors/src/test/java/fi/jumi/actors/workers/WorkerCounterTest.java"}, "test_case": {"identifier": "a_new_callback_can_be_set_after_workers_are_finished", "parameters": "()", "modifiers": "@Test(timeout = TIMEOUT) public", "return": "void", "body": "@Test(timeout = TIMEOUT)\n    public void a_new_callback_can_be_set_after_workers_are_finished() {\n        WorkerCounter counter = new WorkerCounter(realExecutor);\n        counter.afterPreviousWorkersFinished(log(\"callback 1\"));\n\n        counter.afterPreviousWorkersFinished(log(\"callback 2\"));\n\n        events.assertContains(\"callback 1\", \"callback 2\");\n    }", "signature": "void a_new_callback_can_be_set_after_workers_are_finished()", "full_signature": "@Test(timeout = TIMEOUT) public void a_new_callback_can_be_set_after_workers_are_finished()", "class_method_signature": "WorkerCounterTest.a_new_callback_can_be_set_after_workers_are_finished()", "testcase": true, "constructor": false, "invocations": ["afterPreviousWorkersFinished", "log", "afterPreviousWorkersFinished", "log", "assertContains"]}, "focal_class": {"identifier": "WorkerCounter", "superclass": "", "interfaces": "implements Executor", "fields": [{"original_string": "private final Executor realExecutor;", "modifier": "private final", "type": "Executor", "declarator": "realExecutor", "var_name": "realExecutor"}, {"original_string": "private final AtomicInteger activeWorkers = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "activeWorkers = new AtomicInteger(0)", "var_name": "activeWorkers"}, {"original_string": "@GuardedBy(\"this\")\n    private ActorRef<WorkerListener> onFinished;", "modifier": "@GuardedBy(\"this\")\n    private", "type": "ActorRef<WorkerListener>", "declarator": "onFinished", "var_name": "onFinished"}], "methods": [{"identifier": "WorkerCounter", "parameters": "(Executor realExecutor)", "modifiers": "public", "return": "", "signature": " WorkerCounter(Executor realExecutor)", "full_signature": "public  WorkerCounter(Executor realExecutor)", "class_method_signature": "WorkerCounter.WorkerCounter(Executor realExecutor)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(Runnable command)", "modifiers": "@Override public", "return": "void", "signature": "void execute(Runnable command)", "full_signature": "@Override public void execute(Runnable command)", "class_method_signature": "WorkerCounter.execute(Runnable command)", "testcase": false, "constructor": false}, {"identifier": "afterPreviousWorkersFinished", "parameters": "(ActorRef<WorkerListener> onFinished)", "modifiers": "public synchronized", "return": "void", "signature": "void afterPreviousWorkersFinished(ActorRef<WorkerListener> onFinished)", "full_signature": "public synchronized void afterPreviousWorkersFinished(ActorRef<WorkerListener> onFinished)", "class_method_signature": "WorkerCounter.afterPreviousWorkersFinished(ActorRef<WorkerListener> onFinished)", "testcase": false, "constructor": false}, {"identifier": "fireAllWorkersFinished", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void fireAllWorkersFinished()", "full_signature": "private synchronized void fireAllWorkersFinished()", "class_method_signature": "WorkerCounter.fireAllWorkersFinished()", "testcase": false, "constructor": false}, {"identifier": "fireWorkerCreated", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fireWorkerCreated()", "full_signature": "private void fireWorkerCreated()", "class_method_signature": "WorkerCounter.fireWorkerCreated()", "testcase": false, "constructor": false}, {"identifier": "fireWorkerFinished", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fireWorkerFinished()", "full_signature": "private void fireWorkerFinished()", "class_method_signature": "WorkerCounter.fireWorkerFinished()", "testcase": false, "constructor": false}], "file": "jumi-actors/src/main/java/fi/jumi/actors/workers/WorkerCounter.java"}, "focal_method": {"identifier": "afterPreviousWorkersFinished", "parameters": "(ActorRef<WorkerListener> onFinished)", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void afterPreviousWorkersFinished(ActorRef<WorkerListener> onFinished) {\n        if (this.onFinished != null) {\n            throw new IllegalStateException(\"a callback already exists; wait for the workers to finish before setting a new callback\");\n        }\n        this.onFinished = onFinished;\n        if (activeWorkers.get() == 0) {\n            fireAllWorkersFinished();\n        }\n    }", "signature": "void afterPreviousWorkersFinished(ActorRef<WorkerListener> onFinished)", "full_signature": "public synchronized void afterPreviousWorkersFinished(ActorRef<WorkerListener> onFinished)", "class_method_signature": "WorkerCounter.afterPreviousWorkersFinished(ActorRef<WorkerListener> onFinished)", "testcase": false, "constructor": false, "invocations": ["get", "fireAllWorkersFinished"]}, "repository": {"repo_id": 6426667, "url": "https://github.com/luontola/jumi-actors", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 78, "size": 2989, "license": "licensed"}}