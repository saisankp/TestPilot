{"test_class": {"identifier": "AcceptMediaTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HeaderDelegate<AcceptMediaType> headerDelegate;", "modifier": "private", "type": "HeaderDelegate<AcceptMediaType>", "declarator": "headerDelegate", "var_name": "headerDelegate"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/header/AcceptMediaTypeTest.java"}, "test_case": {"identifier": "testValueOf", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValueOf() {\n        AcceptMediaType acceptMediaType = acceptMediaType(\"text\", \"xml\");\n        when(headerDelegate.fromString(\"text/xml\")).thenReturn(acceptMediaType);\n\n        assertSame(acceptMediaType, AcceptMediaType.valueOf(\"text/xml\"));\n    }", "signature": "void testValueOf()", "full_signature": "@Test public void testValueOf()", "class_method_signature": "AcceptMediaTypeTest.testValueOf()", "testcase": true, "constructor": false, "invocations": ["acceptMediaType", "thenReturn", "when", "fromString", "assertSame", "valueOf"]}, "focal_class": {"identifier": "AcceptMediaType", "superclass": "", "interfaces": "implements QualityValue", "fields": [{"original_string": "public static final AcceptMediaType DEFAULT = new AcceptMediaType(\"*\", \"*\");", "modifier": "public static final", "type": "AcceptMediaType", "declarator": "DEFAULT = new AcceptMediaType(\"*\", \"*\")", "var_name": "DEFAULT"}, {"original_string": "private final float qValue;", "modifier": "private final", "type": "float", "declarator": "qValue", "var_name": "qValue"}, {"original_string": "private final MediaType mediaType;", "modifier": "private final", "type": "MediaType", "declarator": "mediaType", "var_name": "mediaType"}], "methods": [{"identifier": "valueOf", "parameters": "(String header)", "modifiers": "public static", "return": "AcceptMediaType", "signature": "AcceptMediaType valueOf(String header)", "full_signature": "public static AcceptMediaType valueOf(String header)", "class_method_signature": "AcceptMediaType.valueOf(String header)", "testcase": false, "constructor": false}, {"identifier": "AcceptMediaType", "parameters": "()", "modifiers": "public", "return": "", "signature": " AcceptMediaType()", "full_signature": "public  AcceptMediaType()", "class_method_signature": "AcceptMediaType.AcceptMediaType()", "testcase": false, "constructor": true}, {"identifier": "AcceptMediaType", "parameters": "(String type, String subtype, Map<String, String> parameters)", "modifiers": "public", "return": "", "signature": " AcceptMediaType(String type, String subtype, Map<String, String> parameters)", "full_signature": "public  AcceptMediaType(String type, String subtype, Map<String, String> parameters)", "class_method_signature": "AcceptMediaType.AcceptMediaType(String type, String subtype, Map<String, String> parameters)", "testcase": false, "constructor": true}, {"identifier": "AcceptMediaType", "parameters": "(String type, String subtype)", "modifiers": "public", "return": "", "signature": " AcceptMediaType(String type, String subtype)", "full_signature": "public  AcceptMediaType(String type, String subtype)", "class_method_signature": "AcceptMediaType.AcceptMediaType(String type, String subtype)", "testcase": false, "constructor": true}, {"identifier": "AcceptMediaType", "parameters": "(MediaType mediaType)", "modifiers": "public", "return": "", "signature": " AcceptMediaType(MediaType mediaType)", "full_signature": "public  AcceptMediaType(MediaType mediaType)", "class_method_signature": "AcceptMediaType.AcceptMediaType(MediaType mediaType)", "testcase": false, "constructor": true}, {"identifier": "AcceptMediaType", "parameters": "(MediaType mediaType, float qValue)", "modifiers": "public", "return": "", "signature": " AcceptMediaType(MediaType mediaType, float qValue)", "full_signature": "public  AcceptMediaType(MediaType mediaType, float qValue)", "class_method_signature": "AcceptMediaType.AcceptMediaType(MediaType mediaType, float qValue)", "testcase": false, "constructor": true}, {"identifier": "getMediaType", "parameters": "()", "modifiers": "public", "return": "MediaType", "signature": "MediaType getMediaType()", "full_signature": "public MediaType getMediaType()", "class_method_signature": "AcceptMediaType.getMediaType()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getType()", "full_signature": "public String getType()", "class_method_signature": "AcceptMediaType.getType()", "testcase": false, "constructor": false}, {"identifier": "isWildcardType", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isWildcardType()", "full_signature": "public boolean isWildcardType()", "class_method_signature": "AcceptMediaType.isWildcardType()", "testcase": false, "constructor": false}, {"identifier": "getSubtype", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSubtype()", "full_signature": "public String getSubtype()", "class_method_signature": "AcceptMediaType.getSubtype()", "testcase": false, "constructor": false}, {"identifier": "isWildcardSubtype", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isWildcardSubtype()", "full_signature": "public boolean isWildcardSubtype()", "class_method_signature": "AcceptMediaType.isWildcardSubtype()", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getParameters()", "full_signature": "public Map<String, String> getParameters()", "class_method_signature": "AcceptMediaType.getParameters()", "testcase": false, "constructor": false}, {"identifier": "isCompatible", "parameters": "(MediaType other)", "modifiers": "public", "return": "boolean", "signature": "boolean isCompatible(MediaType other)", "full_signature": "public boolean isCompatible(MediaType other)", "class_method_signature": "AcceptMediaType.isCompatible(MediaType other)", "testcase": false, "constructor": false}, {"identifier": "isCompatible", "parameters": "(AcceptMediaType other)", "modifiers": "public", "return": "boolean", "signature": "boolean isCompatible(AcceptMediaType other)", "full_signature": "public boolean isCompatible(AcceptMediaType other)", "class_method_signature": "AcceptMediaType.isCompatible(AcceptMediaType other)", "testcase": false, "constructor": false}, {"identifier": "getQvalue", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float getQvalue()", "full_signature": "@Override public float getQvalue()", "class_method_signature": "AcceptMediaType.getQvalue()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "AcceptMediaType.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AcceptMediaType.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AcceptMediaType.toString()", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/header/AcceptMediaType.java"}, "focal_method": {"identifier": "valueOf", "parameters": "(String header)", "modifiers": "public static", "return": "AcceptMediaType", "body": "public static AcceptMediaType valueOf(String header) {\n        return RuntimeDelegate.getInstance().createHeaderDelegate(AcceptMediaType.class).fromString(header);\n    }", "signature": "AcceptMediaType valueOf(String header)", "full_signature": "public static AcceptMediaType valueOf(String header)", "class_method_signature": "AcceptMediaType.valueOf(String header)", "testcase": false, "constructor": false, "invocations": ["fromString", "createHeaderDelegate", "getInstance"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}