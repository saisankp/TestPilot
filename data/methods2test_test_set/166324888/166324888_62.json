{"test_class": {"identifier": "BigDecimalUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@Rule\n    public RxJavaTestSchedulerRule rule = new RxJavaTestSchedulerRule();", "modifier": "@Rule\n    public", "type": "RxJavaTestSchedulerRule", "declarator": "rule = new RxJavaTestSchedulerRule()", "var_name": "rule"}, {"original_string": "@Mock\n    public NodeManager nodeManager;", "modifier": "@Mock\n    public", "type": "NodeManager", "declarator": "nodeManager", "var_name": "nodeManager"}, {"original_string": "@Mock\n    public Node node;", "modifier": "@Mock\n    public", "type": "Node", "declarator": "node", "var_name": "node"}], "file": "wallet/src/test/java/com/platon/aton/utils/BigDecimalUtilTest.java"}, "test_case": {"identifier": "add2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void add2() {\n        BigDecimal result = BigDecimal.ZERO;\n        String  v1 = \"456456456.46554\";\n        String v2 = \"4545889963333333.6456\";\n        BigDecimal b1 = new BigDecimal(v1);\n        BigDecimal b2 = new BigDecimal(v2);\n        result = b1.add(b2);\n\n        Log.d(\"======\", \"\u5f97\u5230\u7ed3\u679cresult---------->\" + result);\n    }", "signature": "void add2()", "full_signature": "@Test public void add2()", "class_method_signature": "BigDecimalUtilTest.add2()", "testcase": true, "constructor": false, "invocations": ["add", "d"]}, "focal_class": {"identifier": "BigDecimalUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DEF_DIV_SCALE = 8;", "modifier": "private static final", "type": "int", "declarator": "DEF_DIV_SCALE = 8", "var_name": "DEF_DIV_SCALE"}], "methods": [{"identifier": "BigDecimalUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " BigDecimalUtil()", "full_signature": "private  BigDecimalUtil()", "class_method_signature": "BigDecimalUtil.BigDecimalUtil()", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(long v1, long v2)", "modifiers": "public static", "return": "double", "signature": "double add(long v1, long v2)", "full_signature": "public static double add(long v1, long v2)", "class_method_signature": "BigDecimalUtil.add(long v1, long v2)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(double v1, double v2)", "modifiers": "public static", "return": "double", "signature": "double add(double v1, double v2)", "full_signature": "public static double add(double v1, double v2)", "class_method_signature": "BigDecimalUtil.add(double v1, double v2)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(String v1, String v2)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal add(String v1, String v2)", "full_signature": "public static BigDecimal add(String v1, String v2)", "class_method_signature": "BigDecimalUtil.add(String v1, String v2)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(double v1, double v2, int scale, RoundingMode roundingMode)", "modifiers": "public static", "return": "double", "signature": "double add(double v1, double v2, int scale, RoundingMode roundingMode)", "full_signature": "public static double add(double v1, double v2, int scale, RoundingMode roundingMode)", "class_method_signature": "BigDecimalUtil.add(double v1, double v2, int scale, RoundingMode roundingMode)", "testcase": false, "constructor": false}, {"identifier": "sub", "parameters": "(double v1, double v2)", "modifiers": "public static", "return": "double", "signature": "double sub(double v1, double v2)", "full_signature": "public static double sub(double v1, double v2)", "class_method_signature": "BigDecimalUtil.sub(double v1, double v2)", "testcase": false, "constructor": false}, {"identifier": "sub", "parameters": "(String v1, String v2)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal sub(String v1, String v2)", "full_signature": "public static BigDecimal sub(String v1, String v2)", "class_method_signature": "BigDecimalUtil.sub(String v1, String v2)", "testcase": false, "constructor": false}, {"identifier": "mul", "parameters": "(double v1, double v2)", "modifiers": "public static", "return": "double", "signature": "double mul(double v1, double v2)", "full_signature": "public static double mul(double v1, double v2)", "class_method_signature": "BigDecimalUtil.mul(double v1, double v2)", "testcase": false, "constructor": false}, {"identifier": "mul", "parameters": "(String v1, String v2)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal mul(String v1, String v2)", "full_signature": "public static BigDecimal mul(String v1, String v2)", "class_method_signature": "BigDecimalUtil.mul(String v1, String v2)", "testcase": false, "constructor": false}, {"identifier": "div", "parameters": "(String v1, String v2)", "modifiers": "public static", "return": "String", "signature": "String div(String v1, String v2)", "full_signature": "public static String div(String v1, String v2)", "class_method_signature": "BigDecimalUtil.div(String v1, String v2)", "testcase": false, "constructor": false}, {"identifier": "div", "parameters": "(double v1, double v2)", "modifiers": "public static", "return": "double", "signature": "double div(double v1, double v2)", "full_signature": "public static double div(double v1, double v2)", "class_method_signature": "BigDecimalUtil.div(double v1, double v2)", "testcase": false, "constructor": false}, {"identifier": "div", "parameters": "(double v1, double v2, int scale)", "modifiers": "public static", "return": "double", "signature": "double div(double v1, double v2, int scale)", "full_signature": "public static double div(double v1, double v2, int scale)", "class_method_signature": "BigDecimalUtil.div(double v1, double v2, int scale)", "testcase": false, "constructor": false}, {"identifier": "div", "parameters": "(String v1, String v2, int scale)", "modifiers": "public static", "return": "String", "signature": "String div(String v1, String v2, int scale)", "full_signature": "public static String div(String v1, String v2, int scale)", "class_method_signature": "BigDecimalUtil.div(String v1, String v2, int scale)", "testcase": false, "constructor": false}, {"identifier": "div", "parameters": "(String v1, String v2, int scale, int roundingMode)", "modifiers": "public static", "return": "String", "signature": "String div(String v1, String v2, int scale, int roundingMode)", "full_signature": "public static String div(String v1, String v2, int scale, int roundingMode)", "class_method_signature": "BigDecimalUtil.div(String v1, String v2, int scale, int roundingMode)", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(double v, int scale)", "modifiers": "public static", "return": "double", "signature": "double round(double v, int scale)", "full_signature": "public static double round(double v, int scale)", "class_method_signature": "BigDecimalUtil.round(double v, int scale)", "testcase": false, "constructor": false}, {"identifier": "convertsToFloat", "parameters": "(double v)", "modifiers": "public static", "return": "float", "signature": "float convertsToFloat(double v)", "full_signature": "public static float convertsToFloat(double v)", "class_method_signature": "BigDecimalUtil.convertsToFloat(double v)", "testcase": false, "constructor": false}, {"identifier": "convertsToFloat", "parameters": "(String v)", "modifiers": "public static", "return": "float", "signature": "float convertsToFloat(String v)", "full_signature": "public static float convertsToFloat(String v)", "class_method_signature": "BigDecimalUtil.convertsToFloat(String v)", "testcase": false, "constructor": false}, {"identifier": "convertsToInt", "parameters": "(double v)", "modifiers": "public static", "return": "int", "signature": "int convertsToInt(double v)", "full_signature": "public static int convertsToInt(double v)", "class_method_signature": "BigDecimalUtil.convertsToInt(double v)", "testcase": false, "constructor": false}, {"identifier": "convertsToLong", "parameters": "(double v)", "modifiers": "public static", "return": "long", "signature": "long convertsToLong(double v)", "full_signature": "public static long convertsToLong(double v)", "class_method_signature": "BigDecimalUtil.convertsToLong(double v)", "testcase": false, "constructor": false}, {"identifier": "returnMax", "parameters": "(double v1, double v2)", "modifiers": "public static", "return": "double", "signature": "double returnMax(double v1, double v2)", "full_signature": "public static double returnMax(double v1, double v2)", "class_method_signature": "BigDecimalUtil.returnMax(double v1, double v2)", "testcase": false, "constructor": false}, {"identifier": "returnMin", "parameters": "(double v1, double v2)", "modifiers": "public static", "return": "double", "signature": "double returnMin(double v1, double v2)", "full_signature": "public static double returnMin(double v1, double v2)", "class_method_signature": "BigDecimalUtil.returnMin(double v1, double v2)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(double v1, double v2)", "modifiers": "public static", "return": "int", "signature": "int compareTo(double v1, double v2)", "full_signature": "public static int compareTo(double v1, double v2)", "class_method_signature": "BigDecimalUtil.compareTo(double v1, double v2)", "testcase": false, "constructor": false}, {"identifier": "parseString", "parameters": "(double value)", "modifiers": "public static", "return": "String", "signature": "String parseString(double value)", "full_signature": "public static String parseString(double value)", "class_method_signature": "BigDecimalUtil.parseString(double value)", "testcase": false, "constructor": false}, {"identifier": "isBigger", "parameters": "(String val1, String val2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBigger(String val1, String val2)", "full_signature": "public static boolean isBigger(String val1, String val2)", "class_method_signature": "BigDecimalUtil.isBigger(String val1, String val2)", "testcase": false, "constructor": false}, {"identifier": "isNotSmaller", "parameters": "(String val1, String val2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotSmaller(String val1, String val2)", "full_signature": "public static boolean isNotSmaller(String val1, String val2)", "class_method_signature": "BigDecimalUtil.isNotSmaller(String val1, String val2)", "testcase": false, "constructor": false}, {"identifier": "isBiggerThanZero", "parameters": "(String val1)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBiggerThanZero(String val1)", "full_signature": "public static boolean isBiggerThanZero(String val1)", "class_method_signature": "BigDecimalUtil.isBiggerThanZero(String val1)", "testcase": false, "constructor": false}, {"identifier": "isEqualsZero", "parameters": "(BigDecimal bigDecimal)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEqualsZero(BigDecimal bigDecimal)", "full_signature": "public static boolean isEqualsZero(BigDecimal bigDecimal)", "class_method_signature": "BigDecimalUtil.isEqualsZero(BigDecimal bigDecimal)", "testcase": false, "constructor": false}, {"identifier": "toBigDecimal", "parameters": "(String value)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal toBigDecimal(String value)", "full_signature": "public static BigDecimal toBigDecimal(String value)", "class_method_signature": "BigDecimalUtil.toBigDecimal(String value)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(String val1, String val2)", "modifiers": "public static", "return": "int", "signature": "int compareTo(String val1, String val2)", "full_signature": "public static int compareTo(String val1, String val2)", "class_method_signature": "BigDecimalUtil.compareTo(String val1, String val2)", "testcase": false, "constructor": false}], "file": "wallet/src/main/java/com/platon/aton/utils/BigDecimalUtil.java"}, "focal_method": {"identifier": "add", "parameters": "(long v1, long v2)", "modifiers": "public static", "return": "double", "body": "public static double add(long v1, long v2) {\n        return add(NumberParserUtils.parseDouble(v1), NumberParserUtils.parseDouble(v2));\n    }", "signature": "double add(long v1, long v2)", "full_signature": "public static double add(long v1, long v2)", "class_method_signature": "BigDecimalUtil.add(long v1, long v2)", "testcase": false, "constructor": false, "invocations": ["add", "parseDouble", "parseDouble"]}, "repository": {"repo_id": 166324888, "url": "https://github.com/PlatONnetwork/ATON-Android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 118901, "license": "licensed"}}