{"test_class": {"identifier": "RuleStatelessScenarioExecutableBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private KieContainer kieContainerMock;", "modifier": "@Mock\n    private", "type": "KieContainer", "declarator": "kieContainerMock", "var_name": "kieContainerMock"}, {"original_string": "@Mock\n    private StatelessKieSession statelessKieSessionMock;", "modifier": "@Mock\n    private", "type": "StatelessKieSession", "declarator": "statelessKieSessionMock", "var_name": "statelessKieSessionMock"}, {"original_string": "@Mock\n    private KieBase kieBaseMock;", "modifier": "@Mock\n    private", "type": "KieBase", "declarator": "kieBaseMock", "var_name": "kieBaseMock"}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/fluent/RuleStatelessScenarioExecutableBuilderTest.java"}, "test_case": {"identifier": "testBuilder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuilder() {\n        when(kieContainerMock.newStatelessKieSession(anyString())).thenReturn(statelessKieSessionMock);\n        when(statelessKieSessionMock.getKieBase()).thenReturn(kieBaseMock);\n        when(kieBaseMock.getKiePackages()).thenReturn(Collections.emptyList());\n        String sessionName = \"sessionName\";\n        RuleStatelessScenarioExecutableBuilder builder = new RuleStatelessScenarioExecutableBuilder(kieContainerMock, sessionName);\n\n        Map<String, Object> result = builder.run();\n        verify(kieContainerMock, times(1)).newStatelessKieSession(eq(sessionName));\n        assertTrue(result.containsKey(RuleScenarioExecutableBuilder.COVERAGE_LISTENER));\n        assertTrue(result.containsKey(RuleScenarioExecutableBuilder.RULES_AVAILABLE));\n    }", "signature": "void testBuilder()", "full_signature": "@Test public void testBuilder()", "class_method_signature": "RuleStatelessScenarioExecutableBuilderTest.testBuilder()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "newStatelessKieSession", "anyString", "thenReturn", "when", "getKieBase", "thenReturn", "when", "getKiePackages", "emptyList", "run", "newStatelessKieSession", "verify", "times", "eq", "assertTrue", "containsKey", "assertTrue", "containsKey"]}, "focal_class": {"identifier": "RuleStatelessScenarioExecutableBuilder", "superclass": "", "interfaces": "implements RuleScenarioExecutableBuilder", "fields": [{"original_string": "private final KieContainer kieContainer;", "modifier": "private final", "type": "KieContainer", "declarator": "kieContainer", "var_name": "kieContainer"}, {"original_string": "private final String sessionName;", "modifier": "private final", "type": "String", "declarator": "sessionName", "var_name": "sessionName"}, {"original_string": "private final List<Object> inputs = new ArrayList<>();", "modifier": "private final", "type": "List<Object>", "declarator": "inputs = new ArrayList<>()", "var_name": "inputs"}, {"original_string": "private final Map<FactIdentifier, List<FactCheckerHandle>> internalConditions = new HashMap<>();", "modifier": "private final", "type": "Map<FactIdentifier, List<FactCheckerHandle>>", "declarator": "internalConditions = new HashMap<>()", "var_name": "internalConditions"}, {"original_string": "private final KieCommands commands = KieServices.get().getCommands();", "modifier": "private final", "type": "KieCommands", "declarator": "commands = KieServices.get().getCommands()", "var_name": "commands"}, {"original_string": "private String agendaGroup;", "modifier": "private", "type": "String", "declarator": "agendaGroup", "var_name": "agendaGroup"}], "methods": [{"identifier": "RuleStatelessScenarioExecutableBuilder", "parameters": "(KieContainer kieContainer, String sessionName)", "modifiers": "protected", "return": "", "signature": " RuleStatelessScenarioExecutableBuilder(KieContainer kieContainer, String sessionName)", "full_signature": "protected  RuleStatelessScenarioExecutableBuilder(KieContainer kieContainer, String sessionName)", "class_method_signature": "RuleStatelessScenarioExecutableBuilder.RuleStatelessScenarioExecutableBuilder(KieContainer kieContainer, String sessionName)", "testcase": false, "constructor": true}, {"identifier": "addInternalCondition", "parameters": "(Class<?> clazz,\n                                     Function<Object, ValueWrapper> checkFunction,\n                                     ScenarioResult scenarioResult)", "modifiers": "@Override public", "return": "void", "signature": "void addInternalCondition(Class<?> clazz,\n                                     Function<Object, ValueWrapper> checkFunction,\n                                     ScenarioResult scenarioResult)", "full_signature": "@Override public void addInternalCondition(Class<?> clazz,\n                                     Function<Object, ValueWrapper> checkFunction,\n                                     ScenarioResult scenarioResult)", "class_method_signature": "RuleStatelessScenarioExecutableBuilder.addInternalCondition(Class<?> clazz,\n                                     Function<Object, ValueWrapper> checkFunction,\n                                     ScenarioResult scenarioResult)", "testcase": false, "constructor": false}, {"identifier": "setActiveAgendaGroup", "parameters": "(String agendaGroup)", "modifiers": "@Override public", "return": "void", "signature": "void setActiveAgendaGroup(String agendaGroup)", "full_signature": "@Override public void setActiveAgendaGroup(String agendaGroup)", "class_method_signature": "RuleStatelessScenarioExecutableBuilder.setActiveAgendaGroup(String agendaGroup)", "testcase": false, "constructor": false}, {"identifier": "setActiveRuleFlowGroup", "parameters": "(String ruleFlowGroup)", "modifiers": "@Override public", "return": "void", "signature": "void setActiveRuleFlowGroup(String ruleFlowGroup)", "full_signature": "@Override public void setActiveRuleFlowGroup(String ruleFlowGroup)", "class_method_signature": "RuleStatelessScenarioExecutableBuilder.setActiveRuleFlowGroup(String ruleFlowGroup)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(Object element)", "modifiers": "@Override public", "return": "void", "signature": "void insert(Object element)", "full_signature": "@Override public void insert(Object element)", "class_method_signature": "RuleStatelessScenarioExecutableBuilder.insert(Object element)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> run()", "full_signature": "@Override public Map<String, Object> run()", "class_method_signature": "RuleStatelessScenarioExecutableBuilder.run()", "testcase": false, "constructor": false}, {"identifier": "generateCommands", "parameters": "(CoverageAgendaListener coverageAgendaListener)", "modifiers": "protected", "return": "Command<ExecutionResults>", "signature": "Command<ExecutionResults> generateCommands(CoverageAgendaListener coverageAgendaListener)", "full_signature": "protected Command<ExecutionResults> generateCommands(CoverageAgendaListener coverageAgendaListener)", "class_method_signature": "RuleStatelessScenarioExecutableBuilder.generateCommands(CoverageAgendaListener coverageAgendaListener)", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/fluent/RuleStatelessScenarioExecutableBuilder.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Object>", "body": "@Override\n    public Map<String, Object> run() {\n        StatelessKieSession statelessKieSession = kieContainer.newStatelessKieSession(sessionName);\n\n        CoverageAgendaListener coverageAgendaListener = new CoverageAgendaListener();\n\n        statelessKieSession.execute(generateCommands(coverageAgendaListener));\n\n        Map<String, Object> toReturn = new HashMap<>();\n\n        toReturn.put(COVERAGE_LISTENER, coverageAgendaListener);\n        toReturn.put(RULES_AVAILABLE, getAvailableRules(statelessKieSession.getKieBase(), agendaGroup));\n        return toReturn;\n    }", "signature": "Map<String, Object> run()", "full_signature": "@Override public Map<String, Object> run()", "class_method_signature": "RuleStatelessScenarioExecutableBuilder.run()", "testcase": false, "constructor": false, "invocations": ["newStatelessKieSession", "execute", "generateCommands", "put", "put", "getAvailableRules", "getKieBase"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}