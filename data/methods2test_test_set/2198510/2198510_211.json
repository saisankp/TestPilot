{"test_class": {"identifier": "RemoveHeaderInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HEADER1 = \"my-header10\";", "modifier": "private static final", "type": "String", "declarator": "HEADER1 = \"my-header10\"", "var_name": "HEADER1"}, {"original_string": "private static final String HEADER2 = \"my-header11\";", "modifier": "private static final", "type": "String", "declarator": "HEADER2 = \"my-header11\"", "var_name": "HEADER2"}, {"original_string": "private static final String HEADER3 = \"my-header12\";", "modifier": "private static final", "type": "String", "declarator": "HEADER3 = \"my-header12\"", "var_name": "HEADER3"}, {"original_string": "private static final String HEADER4 = \"my-header20\";", "modifier": "private static final", "type": "String", "declarator": "HEADER4 = \"my-header20\"", "var_name": "HEADER4"}, {"original_string": "private static final String HEADER5 = \"my-header21\";", "modifier": "private static final", "type": "String", "declarator": "HEADER5 = \"my-header21\"", "var_name": "HEADER5"}, {"original_string": "private static final String DEFAULT_SEPARATOR = \", \";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_SEPARATOR = \", \"", "var_name": "DEFAULT_SEPARATOR"}, {"original_string": "private static final String MY_SEPARATOR = \";\";", "modifier": "private static final", "type": "String", "declarator": "MY_SEPARATOR = \";\"", "var_name": "MY_SEPARATOR"}], "file": "flume-ng-core/src/test/java/org/apache/flume/interceptor/RemoveHeaderInterceptorTest.java"}, "test_case": {"identifier": "testAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAll() throws Exception {\n    final Interceptor removeHeaderInterceptor = new RemoveHeaderIntBuilder()\n        .matchRegex(\"my-header2.*\")\n        .fromList(HEADER1 + MY_SEPARATOR + HEADER3, MY_SEPARATOR)\n        .withName(HEADER2).build();\n    final Event event1 = buildEventWithHeader();\n    Assert.assertEquals(HEADER1, event1.getHeaders().get(HEADER1));\n    Assert.assertEquals(HEADER2, event1.getHeaders().get(HEADER2));\n    Assert.assertEquals(HEADER3, event1.getHeaders().get(HEADER3));\n    Assert.assertEquals(HEADER4, event1.getHeaders().get(HEADER4));\n    Assert.assertEquals(HEADER5, event1.getHeaders().get(HEADER5));\n    removeHeaderInterceptor.intercept(event1);\n    Assert.assertTrue(event1.getHeaders().isEmpty());\n\n    final Event event2 = buildEventWithoutHeader();\n    Assert.assertTrue(event2.getHeaders().isEmpty());\n    removeHeaderInterceptor.intercept(event2);\n    Assert.assertTrue(event2.getHeaders().isEmpty());\n  }", "signature": "void testAll()", "full_signature": "@Test public void testAll()", "class_method_signature": "RemoveHeaderInterceptorTest.testAll()", "testcase": true, "constructor": false, "invocations": ["build", "withName", "fromList", "matchRegex", "buildEventWithHeader", "assertEquals", "get", "getHeaders", "assertEquals", "get", "getHeaders", "assertEquals", "get", "getHeaders", "assertEquals", "get", "getHeaders", "assertEquals", "get", "getHeaders", "intercept", "assertTrue", "isEmpty", "getHeaders", "buildEventWithoutHeader", "assertTrue", "isEmpty", "getHeaders", "intercept", "assertTrue", "isEmpty", "getHeaders"]}, "focal_class": {"identifier": "RemoveHeaderInterceptor", "superclass": "", "interfaces": "implements Interceptor", "fields": [{"original_string": "static final String WITH_NAME = \"withName\";", "modifier": "static final", "type": "String", "declarator": "WITH_NAME = \"withName\"", "var_name": "WITH_NAME"}, {"original_string": "static final String FROM_LIST = \"fromList\";", "modifier": "static final", "type": "String", "declarator": "FROM_LIST = \"fromList\"", "var_name": "FROM_LIST"}, {"original_string": "static final String LIST_SEPARATOR = \"fromListSeparator\";", "modifier": "static final", "type": "String", "declarator": "LIST_SEPARATOR = \"fromListSeparator\"", "var_name": "LIST_SEPARATOR"}, {"original_string": "static final String LIST_SEPARATOR_DEFAULT = \"\\\\s*,\\\\s*\";", "modifier": "static final", "type": "String", "declarator": "LIST_SEPARATOR_DEFAULT = \"\\\\s*,\\\\s*\"", "var_name": "LIST_SEPARATOR_DEFAULT"}, {"original_string": "static final String MATCH_REGEX = \"matching\";", "modifier": "static final", "type": "String", "declarator": "MATCH_REGEX = \"matching\"", "var_name": "MATCH_REGEX"}, {"original_string": "private static final Logger LOG = LoggerFactory\n      .getLogger(RemoveHeaderInterceptor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory\n      .getLogger(RemoveHeaderInterceptor.class)", "var_name": "LOG"}, {"original_string": "private final String withName;", "modifier": "private final", "type": "String", "declarator": "withName", "var_name": "withName"}, {"original_string": "private final Set<String> fromList;", "modifier": "private final", "type": "Set<String>", "declarator": "fromList", "var_name": "fromList"}, {"original_string": "private final Pattern matchRegex;", "modifier": "private final", "type": "Pattern", "declarator": "matchRegex", "var_name": "matchRegex"}], "methods": [{"identifier": "RemoveHeaderInterceptor", "parameters": "(final String withName, final String fromList,\n                                  final String listSeparator, final Pattern matchRegex)", "modifiers": "private", "return": "", "signature": " RemoveHeaderInterceptor(final String withName, final String fromList,\n                                  final String listSeparator, final Pattern matchRegex)", "full_signature": "private  RemoveHeaderInterceptor(final String withName, final String fromList,\n                                  final String listSeparator, final Pattern matchRegex)", "class_method_signature": "RemoveHeaderInterceptor.RemoveHeaderInterceptor(final String withName, final String fromList,\n                                  final String listSeparator, final Pattern matchRegex)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "RemoveHeaderInterceptor.initialize()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "RemoveHeaderInterceptor.close()", "testcase": false, "constructor": false}, {"identifier": "intercept", "parameters": "(final List<Event> events)", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> intercept(final List<Event> events)", "full_signature": "@Override public List<Event> intercept(final List<Event> events)", "class_method_signature": "RemoveHeaderInterceptor.intercept(final List<Event> events)", "testcase": false, "constructor": false}, {"identifier": "intercept", "parameters": "(final Event event)", "modifiers": "@Override public", "return": "Event", "signature": "Event intercept(final Event event)", "full_signature": "@Override public Event intercept(final Event event)", "class_method_signature": "RemoveHeaderInterceptor.intercept(final Event event)", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/interceptor/RemoveHeaderInterceptor.java"}, "focal_method": {"identifier": "intercept", "parameters": "(final List<Event> events)", "modifiers": "@Override public", "return": "List<Event>", "body": "@Override\n  public List<Event> intercept(final List<Event> events) {\n    for (final Event event : events) {\n      intercept(event);\n    }\n    return events;\n  }", "signature": "List<Event> intercept(final List<Event> events)", "full_signature": "@Override public List<Event> intercept(final List<Event> events)", "class_method_signature": "RemoveHeaderInterceptor.intercept(final List<Event> events)", "testcase": false, "constructor": false, "invocations": ["intercept"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}