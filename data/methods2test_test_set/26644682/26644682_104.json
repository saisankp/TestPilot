{"test_class": {"identifier": "PreparationServiceTest", "superclass": "extends BasePreparationTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private PreparationService preparationService;", "modifier": "@Autowired\n    private", "type": "PreparationService", "declarator": "preparationService", "var_name": "preparationService"}], "file": "dataprep-preparation/src/test/java/org/talend/dataprep/preparation/service/PreparationServiceTest.java"}, "test_case": {"identifier": "testListAllShouldListWhenFolderAndPreparationNameContainsSpecialCharactersAsInTDP4779", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testListAllShouldListWhenFolderAndPreparationNameContainsSpecialCharactersAsInTDP4779()\n            throws Exception {\n        init();\n        // then : : should list preparation with special character in folder and preparation (see\n        // https://jira.talendforge.org/browse/TDP-4779)\n        assertThat(preparationService\n                .listAll(null, null,\n                        \"Folder Cr((eate Email A!ddressrrrbb[zzzz (copie-\u00e9'(-\u00e8_\u00e7\u00e0)+&.csv/Cr((eate Email A!ddressrrrbb[zzzz (copie-\u00e9'(-\u00e8_\u00e7\u00e0)+&.csv\",\n                        null, null)\n                .collect(Collectors.toList())\n                .size(), is(1));\n    }", "signature": "void testListAllShouldListWhenFolderAndPreparationNameContainsSpecialCharactersAsInTDP4779()", "full_signature": "@Test public void testListAllShouldListWhenFolderAndPreparationNameContainsSpecialCharactersAsInTDP4779()", "class_method_signature": "PreparationServiceTest.testListAllShouldListWhenFolderAndPreparationNameContainsSpecialCharactersAsInTDP4779()", "testcase": true, "constructor": false, "invocations": ["init", "assertThat", "size", "collect", "listAll", "toList", "is"]}, "focal_class": {"identifier": "PreparationService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PreparationService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PreparationService.class)", "var_name": "LOGGER"}, {"original_string": "private static final String STEP_ID = \"stepId\";", "modifier": "private static final", "type": "String", "declarator": "STEP_ID = \"stepId\"", "var_name": "STEP_ID"}, {"original_string": "private static final String DATASET_ID = \"dataSetId\";", "modifier": "private static final", "type": "String", "declarator": "DATASET_ID = \"dataSetId\"", "var_name": "DATASET_ID"}, {"original_string": "private static final String ID = \"id\";", "modifier": "private static final", "type": "String", "declarator": "ID = \"id\"", "var_name": "ID"}, {"original_string": "private static final String FOLDER_ID = \"folderId\";", "modifier": "private static final", "type": "String", "declarator": "FOLDER_ID = \"folderId\"", "var_name": "FOLDER_ID"}, {"original_string": "private static final String ORIGIN = \"origin\";", "modifier": "private static final", "type": "String", "declarator": "ORIGIN = \"origin\"", "var_name": "ORIGIN"}, {"original_string": "private static final String HEAD = \"head\";", "modifier": "private static final", "type": "String", "declarator": "HEAD = \"head\"", "var_name": "HEAD"}, {"original_string": "private static final String NAME = \"name\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"name\"", "var_name": "NAME"}, {"original_string": "private static final String FIRST_COLUMN_INDEX = \"0000\";", "modifier": "private static final", "type": "String", "declarator": "FIRST_COLUMN_INDEX = \"0000\"", "var_name": "FIRST_COLUMN_INDEX"}, {"original_string": "private final ActionFactory factory = new ActionFactory();", "modifier": "private final", "type": "ActionFactory", "declarator": "factory = new ActionFactory()", "var_name": "factory"}, {"original_string": "@Autowired\n    protected PreparationRepository preparationRepository;", "modifier": "@Autowired\n    protected", "type": "PreparationRepository", "declarator": "preparationRepository", "var_name": "preparationRepository"}, {"original_string": "@Autowired\n    protected Security security;", "modifier": "@Autowired\n    protected", "type": "Security", "declarator": "security", "var_name": "security"}, {"original_string": "@Autowired\n    private FolderRepository folderRepository;", "modifier": "@Autowired\n    private", "type": "FolderRepository", "declarator": "folderRepository", "var_name": "folderRepository"}, {"original_string": "@Autowired\n    private ActionMetadataValidation validator;", "modifier": "@Autowired\n    private", "type": "ActionMetadataValidation", "declarator": "validator", "var_name": "validator"}, {"original_string": "@Autowired\n    private VersionService versionService;", "modifier": "@Autowired\n    private", "type": "VersionService", "declarator": "versionService", "var_name": "versionService"}, {"original_string": "@Autowired\n    private ActionRegistry actionRegistry;", "modifier": "@Autowired\n    private", "type": "ActionRegistry", "declarator": "actionRegistry", "var_name": "actionRegistry"}, {"original_string": "@Autowired\n    private LockedResourceRepository lockedResourceRepository;", "modifier": "@Autowired\n    private", "type": "LockedResourceRepository", "declarator": "lockedResourceRepository", "var_name": "lockedResourceRepository"}, {"original_string": "@Autowired\n    private MetadataChangesOnActionsGenerator stepDiffDelegate;", "modifier": "@Autowired\n    private", "type": "MetadataChangesOnActionsGenerator", "declarator": "stepDiffDelegate", "var_name": "stepDiffDelegate"}, {"original_string": "@Autowired\n    private ReorderStepsUtils reorderStepsUtils;", "modifier": "@Autowired\n    private", "type": "ReorderStepsUtils", "declarator": "reorderStepsUtils", "var_name": "reorderStepsUtils"}, {"original_string": "@Autowired\n    private BeanConversionService beanConversionService;", "modifier": "@Autowired\n    private", "type": "BeanConversionService", "declarator": "beanConversionService", "var_name": "beanConversionService"}, {"original_string": "@Autowired\n    private PreparationUtils preparationUtils;", "modifier": "@Autowired\n    private", "type": "PreparationUtils", "declarator": "preparationUtils", "var_name": "preparationUtils"}, {"original_string": "@Autowired\n    private DatasetClient datasetClient;", "modifier": "@Autowired\n    private", "type": "DatasetClient", "declarator": "datasetClient", "var_name": "datasetClient"}, {"original_string": "@Autowired\n    private OwnerInjection ownerInjection;", "modifier": "@Autowired\n    private", "type": "OwnerInjection", "declarator": "ownerInjection", "var_name": "ownerInjection"}, {"original_string": "@Autowired\n    private SharedInjection sharedInjection;", "modifier": "@Autowired\n    private", "type": "SharedInjection", "declarator": "sharedInjection", "var_name": "sharedInjection"}, {"original_string": "@Autowired\n    private BaseDataprepAuditService auditService;", "modifier": "@Autowired\n    private", "type": "BaseDataprepAuditService", "declarator": "auditService", "var_name": "auditService"}, {"original_string": "@Autowired\n    private DataSetNameInjection dataSetNameInjection;", "modifier": "@Autowired\n    private", "type": "DataSetNameInjection", "declarator": "dataSetNameInjection", "var_name": "dataSetNameInjection"}], "methods": [{"identifier": "disallowColumnCreationChange", "parameters": "(ActionForm form)", "modifiers": "private static", "return": "ActionForm", "signature": "ActionForm disallowColumnCreationChange(ActionForm form)", "full_signature": "private static ActionForm disallowColumnCreationChange(ActionForm form)", "class_method_signature": "PreparationService.disallowColumnCreationChange(ActionForm form)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final Preparation preparation, String folderId)", "modifiers": "public", "return": "String", "signature": "String create(final Preparation preparation, String folderId)", "full_signature": "public String create(final Preparation preparation, String folderId)", "class_method_signature": "PreparationService.create(final Preparation preparation, String folderId)", "testcase": false, "constructor": false}, {"identifier": "listAll", "parameters": "(String name, String folderPath, String path, Sort sort, Order order)", "modifiers": "public", "return": "Stream<PreparationDTO>", "signature": "Stream<PreparationDTO> listAll(String name, String folderPath, String path, Sort sort, Order order)", "full_signature": "public Stream<PreparationDTO> listAll(String name, String folderPath, String path, Sort sort, Order order)", "class_method_signature": "PreparationService.listAll(String name, String folderPath, String path, Sort sort, Order order)", "testcase": false, "constructor": false}, {"identifier": "listAll", "parameters": "(PreparationSearchCriterion searchCriterion, Sort sort, Order order)", "modifiers": "public", "return": "Stream<PreparationDTO>", "signature": "Stream<PreparationDTO> listAll(PreparationSearchCriterion searchCriterion, Sort sort, Order order)", "full_signature": "public Stream<PreparationDTO> listAll(PreparationSearchCriterion searchCriterion, Sort sort, Order order)", "class_method_signature": "PreparationService.listAll(PreparationSearchCriterion searchCriterion, Sort sort, Order order)", "testcase": false, "constructor": false}, {"identifier": "listSummary", "parameters": "(String name, String folderPath, String path, Sort sort, Order order)", "modifiers": "public", "return": "Stream<PreparationDTO>", "signature": "Stream<PreparationDTO> listSummary(String name, String folderPath, String path, Sort sort, Order order)", "full_signature": "public Stream<PreparationDTO> listSummary(String name, String folderPath, String path, Sort sort, Order order)", "class_method_signature": "PreparationService.listSummary(String name, String folderPath, String path, Sort sort, Order order)", "testcase": false, "constructor": false}, {"identifier": "searchPreparations", "parameters": "(String dataSetId, String folderId, String name, boolean exactMatch,\n            String path, Sort sort, Order order)", "modifiers": "public", "return": "Stream<PreparationDTO>", "signature": "Stream<PreparationDTO> searchPreparations(String dataSetId, String folderId, String name, boolean exactMatch,\n            String path, Sort sort, Order order)", "full_signature": "public Stream<PreparationDTO> searchPreparations(String dataSetId, String folderId, String name, boolean exactMatch,\n            String path, Sort sort, Order order)", "class_method_signature": "PreparationService.searchPreparations(String dataSetId, String folderId, String name, boolean exactMatch,\n            String path, Sort sort, Order order)", "testcase": false, "constructor": false}, {"identifier": "getNameFilter", "parameters": "(String name, boolean exactMatch)", "modifiers": "private", "return": "Expression", "signature": "Expression getNameFilter(String name, boolean exactMatch)", "full_signature": "private Expression getNameFilter(String name, boolean exactMatch)", "class_method_signature": "PreparationService.getNameFilter(String name, boolean exactMatch)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(String preparationId, String name, String destination)", "modifiers": "public", "return": "String", "signature": "String copy(String preparationId, String name, String destination)", "full_signature": "public String copy(String preparationId, String name, String destination)", "class_method_signature": "PreparationService.copy(String preparationId, String name, String destination)", "testcase": false, "constructor": false}, {"identifier": "cloneStepsListBetweenPreparations", "parameters": "(Preparation originalPrep, Preparation targetPrep)", "modifiers": "private", "return": "void", "signature": "void cloneStepsListBetweenPreparations(Preparation originalPrep, Preparation targetPrep)", "full_signature": "private void cloneStepsListBetweenPreparations(Preparation originalPrep, Preparation targetPrep)", "class_method_signature": "PreparationService.cloneStepsListBetweenPreparations(Preparation originalPrep, Preparation targetPrep)", "testcase": false, "constructor": false}, {"identifier": "checkIfPreparationNameIsAvailable", "parameters": "(String folderId, String name)", "modifiers": "private", "return": "void", "signature": "void checkIfPreparationNameIsAvailable(String folderId, String name)", "full_signature": "private void checkIfPreparationNameIsAvailable(String folderId, String name)", "class_method_signature": "PreparationService.checkIfPreparationNameIsAvailable(String folderId, String name)", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "(String preparationId, String folder, String destination, String newName)", "modifiers": "public", "return": "void", "signature": "void move(String preparationId, String folder, String destination, String newName)", "full_signature": "public void move(String preparationId, String folder, String destination, String newName)", "class_method_signature": "PreparationService.move(String preparationId, String folder, String destination, String newName)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String preparationId)", "modifiers": "public", "return": "void", "signature": "void delete(String preparationId)", "full_signature": "public void delete(String preparationId)", "class_method_signature": "PreparationService.delete(String preparationId)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(String preparationId, final PreparationDTO preparation)", "modifiers": "public", "return": "String", "signature": "String update(String preparationId, final PreparationDTO preparation)", "full_signature": "public String update(String preparationId, final PreparationDTO preparation)", "class_method_signature": "PreparationService.update(String preparationId, final PreparationDTO preparation)", "testcase": false, "constructor": false}, {"identifier": "copyStepsFrom", "parameters": "(String id, String from)", "modifiers": "public", "return": "void", "signature": "void copyStepsFrom(String id, String from)", "full_signature": "public void copyStepsFrom(String id, String from)", "class_method_signature": "PreparationService.copyStepsFrom(String id, String from)", "testcase": false, "constructor": false}, {"identifier": "getPreparationDetails", "parameters": "(String id, String stepId)", "modifiers": "public", "return": "PreparationDTO", "signature": "PreparationDTO getPreparationDetails(String id, String stepId)", "full_signature": "public PreparationDTO getPreparationDetails(String id, String stepId)", "class_method_signature": "PreparationService.getPreparationDetails(String id, String stepId)", "testcase": false, "constructor": false}, {"identifier": "getPreparationDetailsFull", "parameters": "(String id, String stepId)", "modifiers": "public", "return": "PreparationDetailsDTO", "signature": "PreparationDetailsDTO getPreparationDetailsFull(String id, String stepId)", "full_signature": "public PreparationDetailsDTO getPreparationDetailsFull(String id, String stepId)", "class_method_signature": "PreparationService.getPreparationDetailsFull(String id, String stepId)", "testcase": false, "constructor": false}, {"identifier": "injectActionsForms", "parameters": "(PreparationDetailsDTO details)", "modifiers": "private", "return": "PreparationDetailsDTO", "signature": "PreparationDetailsDTO injectActionsForms(PreparationDetailsDTO details)", "full_signature": "private PreparationDetailsDTO injectActionsForms(PreparationDetailsDTO details)", "class_method_signature": "PreparationService.injectActionsForms(PreparationDetailsDTO details)", "testcase": false, "constructor": false}, {"identifier": "adaptActionDefinition", "parameters": "(PreparationDetailsDTO details, Action action,\n            String stepBeforeAction)", "modifiers": "private", "return": "ActionDefinition", "signature": "ActionDefinition adaptActionDefinition(PreparationDetailsDTO details, Action action,\n            String stepBeforeAction)", "full_signature": "private ActionDefinition adaptActionDefinition(PreparationDetailsDTO details, Action action,\n            String stepBeforeAction)", "class_method_signature": "PreparationService.adaptActionDefinition(PreparationDetailsDTO details, Action action,\n            String stepBeforeAction)", "testcase": false, "constructor": false}, {"identifier": "ensurePreparationConsistency", "parameters": "(PersistentPreparation preparation)", "modifiers": "private", "return": "void", "signature": "void ensurePreparationConsistency(PersistentPreparation preparation)", "full_signature": "private void ensurePreparationConsistency(PersistentPreparation preparation)", "class_method_signature": "PreparationService.ensurePreparationConsistency(PersistentPreparation preparation)", "testcase": false, "constructor": false}, {"identifier": "searchLocation", "parameters": "(String id)", "modifiers": "public", "return": "Folder", "signature": "Folder searchLocation(String id)", "full_signature": "public Folder searchLocation(String id)", "class_method_signature": "PreparationService.searchLocation(String id)", "testcase": false, "constructor": false}, {"identifier": "getSteps", "parameters": "(String id)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getSteps(String id)", "full_signature": "public List<String> getSteps(String id)", "class_method_signature": "PreparationService.getSteps(String id)", "testcase": false, "constructor": false}, {"identifier": "addPreparationAction", "parameters": "(final String preparationId, final AppendStep appendStep)", "modifiers": "public", "return": "void", "signature": "void addPreparationAction(final String preparationId, final AppendStep appendStep)", "full_signature": "public void addPreparationAction(final String preparationId, final AppendStep appendStep)", "class_method_signature": "PreparationService.addPreparationAction(final String preparationId, final AppendStep appendStep)", "testcase": false, "constructor": false}, {"identifier": "buildActions", "parameters": "(List<Action> allActions)", "modifiers": "private", "return": "List<RunnableAction>", "signature": "List<RunnableAction> buildActions(List<Action> allActions)", "full_signature": "private List<RunnableAction> buildActions(List<Action> allActions)", "class_method_signature": "PreparationService.buildActions(List<Action> allActions)", "testcase": false, "constructor": false}, {"identifier": "updateAction", "parameters": "(final String preparationId, final String stepToModifyId, final AppendStep newStep)", "modifiers": "public", "return": "void", "signature": "void updateAction(final String preparationId, final String stepToModifyId, final AppendStep newStep)", "full_signature": "public void updateAction(final String preparationId, final String stepToModifyId, final AppendStep newStep)", "class_method_signature": "PreparationService.updateAction(final String preparationId, final String stepToModifyId, final AppendStep newStep)", "testcase": false, "constructor": false}, {"identifier": "deleteAction", "parameters": "(final String id, final String stepToDeleteId)", "modifiers": "public", "return": "void", "signature": "void deleteAction(final String id, final String stepToDeleteId)", "full_signature": "public void deleteAction(final String id, final String stepToDeleteId)", "class_method_signature": "PreparationService.deleteAction(final String id, final String stepToDeleteId)", "testcase": false, "constructor": false}, {"identifier": "setPreparationHead", "parameters": "(final String preparationId, final String headId)", "modifiers": "public", "return": "void", "signature": "void setPreparationHead(final String preparationId, final String headId)", "full_signature": "public void setPreparationHead(final String preparationId, final String headId)", "class_method_signature": "PreparationService.setPreparationHead(final String preparationId, final String headId)", "testcase": false, "constructor": false}, {"identifier": "getVersionedAction", "parameters": "(final String id, final String version)", "modifiers": "public", "return": "List<Action>", "signature": "List<Action> getVersionedAction(final String id, final String version)", "full_signature": "public List<Action> getVersionedAction(final String id, final String version)", "class_method_signature": "PreparationService.getVersionedAction(final String id, final String version)", "testcase": false, "constructor": false}, {"identifier": "getVersionedAction", "parameters": "(final PersistentPreparation preparation, final String version)", "modifiers": "private", "return": "List<Action>", "signature": "List<Action> getVersionedAction(final PersistentPreparation preparation, final String version)", "full_signature": "private List<Action> getVersionedAction(final PersistentPreparation preparation, final String version)", "class_method_signature": "PreparationService.getVersionedAction(final PersistentPreparation preparation, final String version)", "testcase": false, "constructor": false}, {"identifier": "listErrors", "parameters": "()", "modifiers": "public", "return": "Iterable<JsonErrorCodeDescription>", "signature": "Iterable<JsonErrorCodeDescription> listErrors()", "full_signature": "public Iterable<JsonErrorCodeDescription> listErrors()", "class_method_signature": "PreparationService.listErrors()", "testcase": false, "constructor": false}, {"identifier": "isDatasetUsedInPreparation", "parameters": "(final String datasetId)", "modifiers": "public", "return": "boolean", "signature": "boolean isDatasetUsedInPreparation(final String datasetId)", "full_signature": "public boolean isDatasetUsedInPreparation(final String datasetId)", "class_method_signature": "PreparationService.isDatasetUsedInPreparation(final String datasetId)", "testcase": false, "constructor": false}, {"identifier": "isDatasetBaseOfPreparation", "parameters": "(String datasetId)", "modifiers": "private", "return": "boolean", "signature": "boolean isDatasetBaseOfPreparation(String datasetId)", "full_signature": "private boolean isDatasetBaseOfPreparation(String datasetId)", "class_method_signature": "PreparationService.isDatasetBaseOfPreparation(String datasetId)", "testcase": false, "constructor": false}, {"identifier": "isDatasetUsedToLookupInPreparationHead", "parameters": "(String datasetId)", "modifiers": "private", "return": "boolean", "signature": "boolean isDatasetUsedToLookupInPreparationHead(String datasetId)", "full_signature": "private boolean isDatasetUsedToLookupInPreparationHead(String datasetId)", "class_method_signature": "PreparationService.isDatasetUsedToLookupInPreparationHead(String datasetId)", "testcase": false, "constructor": false}, {"identifier": "moveStep", "parameters": "(final String preparationId, String stepId, String parentStepId)", "modifiers": "public", "return": "void", "signature": "void moveStep(final String preparationId, String stepId, String parentStepId)", "full_signature": "public void moveStep(final String preparationId, String stepId, String parentStepId)", "class_method_signature": "PreparationService.moveStep(final String preparationId, String stepId, String parentStepId)", "testcase": false, "constructor": false}, {"identifier": "getStepId", "parameters": "(final String version, final PersistentPreparation preparation)", "modifiers": "protected", "return": "String", "signature": "String getStepId(final String version, final PersistentPreparation preparation)", "full_signature": "protected String getStepId(final String version, final PersistentPreparation preparation)", "class_method_signature": "PreparationService.getStepId(final String version, final PersistentPreparation preparation)", "testcase": false, "constructor": false}, {"identifier": "getActions", "parameters": "(final PersistentStep step)", "modifiers": "protected", "return": "List<Action>", "signature": "List<Action> getActions(final PersistentStep step)", "full_signature": "protected List<Action> getActions(final PersistentStep step)", "class_method_signature": "PreparationService.getActions(final PersistentStep step)", "testcase": false, "constructor": false}, {"identifier": "getStep", "parameters": "(final String stepId)", "modifiers": "public", "return": "PersistentStep", "signature": "PersistentStep getStep(final String stepId)", "full_signature": "public PersistentStep getStep(final String stepId)", "class_method_signature": "PreparationService.getStep(final String stepId)", "testcase": false, "constructor": false}, {"identifier": "getPreparation", "parameters": "(final String preparationId)", "modifiers": "public", "return": "PreparationDTO", "signature": "PreparationDTO getPreparation(final String preparationId)", "full_signature": "public PreparationDTO getPreparation(final String preparationId)", "class_method_signature": "PreparationService.getPreparation(final String preparationId)", "testcase": false, "constructor": false}, {"identifier": "extractActionsAfterStep", "parameters": "(final List<String> stepsIds, final String afterStep)", "modifiers": "private", "return": "List<AppendStep>", "signature": "List<AppendStep> extractActionsAfterStep(final List<String> stepsIds, final String afterStep)", "full_signature": "private List<AppendStep> extractActionsAfterStep(final List<String> stepsIds, final String afterStep)", "class_method_signature": "PreparationService.extractActionsAfterStep(final List<String> stepsIds, final String afterStep)", "testcase": false, "constructor": false}, {"identifier": "extractSteps", "parameters": "(final PersistentPreparation preparation, final String fromStepId)", "modifiers": "private", "return": "List<String>", "signature": "List<String> extractSteps(final PersistentPreparation preparation, final String fromStepId)", "full_signature": "private List<String> extractSteps(final PersistentPreparation preparation, final String fromStepId)", "class_method_signature": "PreparationService.extractSteps(final PersistentPreparation preparation, final String fromStepId)", "testcase": false, "constructor": false}, {"identifier": "lockPreparation", "parameters": "(String preparationId)", "modifiers": "public", "return": "PersistentPreparation", "signature": "PersistentPreparation lockPreparation(String preparationId)", "full_signature": "public PersistentPreparation lockPreparation(String preparationId)", "class_method_signature": "PreparationService.lockPreparation(String preparationId)", "testcase": false, "constructor": false}, {"identifier": "unlockPreparation", "parameters": "(String preparationId)", "modifiers": "public", "return": "void", "signature": "void unlockPreparation(String preparationId)", "full_signature": "public void unlockPreparation(String preparationId)", "class_method_signature": "PreparationService.unlockPreparation(String preparationId)", "testcase": false, "constructor": false}, {"identifier": "isPreparationHead", "parameters": "(final PersistentPreparation preparation, final String stepId)", "modifiers": "private", "return": "boolean", "signature": "boolean isPreparationHead(final PersistentPreparation preparation, final String stepId)", "full_signature": "private boolean isPreparationHead(final PersistentPreparation preparation, final String stepId)", "class_method_signature": "PreparationService.isPreparationHead(final PersistentPreparation preparation, final String stepId)", "testcase": false, "constructor": false}, {"identifier": "checkActionStepConsistency", "parameters": "(final AppendStep step)", "modifiers": "private", "return": "void", "signature": "void checkActionStepConsistency(final AppendStep step)", "full_signature": "private void checkActionStepConsistency(final AppendStep step)", "class_method_signature": "PreparationService.checkActionStepConsistency(final AppendStep step)", "testcase": false, "constructor": false}, {"identifier": "getStepsWithShiftedColumnIds", "parameters": "(final List<String> stepsIds, final String afterStepId,\n            final List<String> deletedColumns, final int shiftColumnAfterId, final int shiftNumber)", "modifiers": "private", "return": "List<AppendStep>", "signature": "List<AppendStep> getStepsWithShiftedColumnIds(final List<String> stepsIds, final String afterStepId,\n            final List<String> deletedColumns, final int shiftColumnAfterId, final int shiftNumber)", "full_signature": "private List<AppendStep> getStepsWithShiftedColumnIds(final List<String> stepsIds, final String afterStepId,\n            final List<String> deletedColumns, final int shiftColumnAfterId, final int shiftNumber)", "class_method_signature": "PreparationService.getStepsWithShiftedColumnIds(final List<String> stepsIds, final String afterStepId,\n            final List<String> deletedColumns, final int shiftColumnAfterId, final int shiftNumber)", "testcase": false, "constructor": false}, {"identifier": "shiftCreatedColumns", "parameters": "(final int shiftColumnAfterId, final int shiftNumber)", "modifiers": "private", "return": "Function<AppendStep, AppendStep>", "signature": "Function<AppendStep, AppendStep> shiftCreatedColumns(final int shiftColumnAfterId, final int shiftNumber)", "full_signature": "private Function<AppendStep, AppendStep> shiftCreatedColumns(final int shiftColumnAfterId, final int shiftNumber)", "class_method_signature": "PreparationService.shiftCreatedColumns(final int shiftColumnAfterId, final int shiftNumber)", "testcase": false, "constructor": false}, {"identifier": "shiftStepParameter", "parameters": "(final int shiftColumnAfterId, final int shiftNumber)", "modifiers": "private", "return": "Function<AppendStep, AppendStep>", "signature": "Function<AppendStep, AppendStep> shiftStepParameter(final int shiftColumnAfterId, final int shiftNumber)", "full_signature": "private Function<AppendStep, AppendStep> shiftStepParameter(final int shiftColumnAfterId, final int shiftNumber)", "class_method_signature": "PreparationService.shiftStepParameter(final int shiftColumnAfterId, final int shiftNumber)", "testcase": false, "constructor": false}, {"identifier": "stepColumnIsNotIn", "parameters": "(final List<String> columns)", "modifiers": "private", "return": "Predicate<AppendStep>", "signature": "Predicate<AppendStep> stepColumnIsNotIn(final List<String> columns)", "full_signature": "private Predicate<AppendStep> stepColumnIsNotIn(final List<String> columns)", "class_method_signature": "PreparationService.stepColumnIsNotIn(final List<String> columns)", "testcase": false, "constructor": false}, {"identifier": "setPreparationHead", "parameters": "(final PersistentPreparation preparation, final PersistentStep head)", "modifiers": "private", "return": "void", "signature": "void setPreparationHead(final PersistentPreparation preparation, final PersistentStep head)", "full_signature": "private void setPreparationHead(final PersistentPreparation preparation, final PersistentStep head)", "class_method_signature": "PreparationService.setPreparationHead(final PersistentPreparation preparation, final PersistentStep head)", "testcase": false, "constructor": false}, {"identifier": "replaceHistory", "parameters": "(final PersistentPreparation preparation, final String startStepId,\n            final List<AppendStep> actionsSteps)", "modifiers": "private", "return": "void", "signature": "void replaceHistory(final PersistentPreparation preparation, final String startStepId,\n            final List<AppendStep> actionsSteps)", "full_signature": "private void replaceHistory(final PersistentPreparation preparation, final String startStepId,\n            final List<AppendStep> actionsSteps)", "class_method_signature": "PreparationService.replaceHistory(final PersistentPreparation preparation, final String startStepId,\n            final List<AppendStep> actionsSteps)", "testcase": false, "constructor": false}, {"identifier": "appendStepToHead", "parameters": "(final PersistentPreparation preparation, final AppendStep appendStep)", "modifiers": "private", "return": "void", "signature": "void appendStepToHead(final PersistentPreparation preparation, final AppendStep appendStep)", "full_signature": "private void appendStepToHead(final PersistentPreparation preparation, final AppendStep appendStep)", "class_method_signature": "PreparationService.appendStepToHead(final PersistentPreparation preparation, final AppendStep appendStep)", "testcase": false, "constructor": false}, {"identifier": "deleteAction", "parameters": "(PersistentPreparation preparation, String stepToDeleteId)", "modifiers": "private", "return": "void", "signature": "void deleteAction(PersistentPreparation preparation, String stepToDeleteId)", "full_signature": "private void deleteAction(PersistentPreparation preparation, String stepToDeleteId)", "class_method_signature": "PreparationService.deleteAction(PersistentPreparation preparation, String stepToDeleteId)", "testcase": false, "constructor": false}, {"identifier": "reorderSteps", "parameters": "(final PersistentPreparation preparation, final String stepId, final String parentStepId)", "modifiers": "private", "return": "void", "signature": "void reorderSteps(final PersistentPreparation preparation, final String stepId, final String parentStepId)", "full_signature": "private void reorderSteps(final PersistentPreparation preparation, final String stepId, final String parentStepId)", "class_method_signature": "PreparationService.reorderSteps(final PersistentPreparation preparation, final String stepId, final String parentStepId)", "testcase": false, "constructor": false}, {"identifier": "updatePreparationStep", "parameters": "(String stepId, RowMetadata rowMetadata)", "modifiers": "public", "return": "void", "signature": "void updatePreparationStep(String stepId, RowMetadata rowMetadata)", "full_signature": "public void updatePreparationStep(String stepId, RowMetadata rowMetadata)", "class_method_signature": "PreparationService.updatePreparationStep(String stepId, RowMetadata rowMetadata)", "testcase": false, "constructor": false}, {"identifier": "invalidatePreparationStep", "parameters": "(String stepId)", "modifiers": "public", "return": "void", "signature": "void invalidatePreparationStep(String stepId)", "full_signature": "public void invalidatePreparationStep(String stepId)", "class_method_signature": "PreparationService.invalidatePreparationStep(String stepId)", "testcase": false, "constructor": false}, {"identifier": "invalidatePreparationStep", "parameters": "(PersistentStep step)", "modifiers": "private", "return": "void", "signature": "void invalidatePreparationStep(PersistentStep step)", "full_signature": "private void invalidatePreparationStep(PersistentStep step)", "class_method_signature": "PreparationService.invalidatePreparationStep(PersistentStep step)", "testcase": false, "constructor": false}, {"identifier": "getPreparationStep", "parameters": "(String stepId)", "modifiers": "public", "return": "RowMetadata", "signature": "RowMetadata getPreparationStep(String stepId)", "full_signature": "public RowMetadata getPreparationStep(String stepId)", "class_method_signature": "PreparationService.getPreparationStep(String stepId)", "testcase": false, "constructor": false}], "file": "dataprep-preparation/src/main/java/org/talend/dataprep/preparation/service/PreparationService.java"}, "focal_method": {"identifier": "listAll", "parameters": "(String name, String folderPath, String path, Sort sort, Order order)", "modifiers": "public", "return": "Stream<PreparationDTO>", "body": "public Stream<PreparationDTO> listAll(String name, String folderPath, String path, Sort sort, Order order) {\n        if (path != null) {\n            // Transform path argument into folder path + preparation name\n            if (path.contains(PATH_SEPARATOR.toString())) {\n                // Special case the path should start with /\n                if (!path.startsWith(PATH_SEPARATOR.toString())) {\n                    path = PATH_SEPARATOR.toString().concat(path);\n                }\n                folderPath = StringUtils.substringBeforeLast(path, PATH_SEPARATOR.toString());\n                // Special case if the preparation is in the root folder\n                if (org.apache.commons.lang3.StringUtils.isEmpty(folderPath)) {\n                    folderPath = PATH_SEPARATOR.toString();\n                }\n                name = StringUtils.substringAfterLast(path, PATH_SEPARATOR.toString());\n            } else {\n                // the preparation is in the root folder\n                folderPath = PATH_SEPARATOR.toString();\n                name = path;\n                LOGGER.warn(\"Using path argument without '{}'. {} filter has been transformed into {}{}.\",\n                        PATH_SEPARATOR, path, PATH_SEPARATOR, name);\n            }\n        }\n        return listAll(filterPreparation().byName(name).withNameExactMatch(true).byFolderPath(folderPath), sort, order);\n    }", "signature": "Stream<PreparationDTO> listAll(String name, String folderPath, String path, Sort sort, Order order)", "full_signature": "public Stream<PreparationDTO> listAll(String name, String folderPath, String path, Sort sort, Order order)", "class_method_signature": "PreparationService.listAll(String name, String folderPath, String path, Sort sort, Order order)", "testcase": false, "constructor": false, "invocations": ["contains", "toString", "startsWith", "toString", "concat", "toString", "substringBeforeLast", "toString", "isEmpty", "toString", "substringAfterLast", "toString", "toString", "warn", "listAll", "byFolderPath", "withNameExactMatch", "byName", "filterPreparation"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}