{"test_class": {"identifier": "CacheBaseTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CacheBase cut;", "modifier": "private", "type": "CacheBase", "declarator": "cut", "var_name": "cut"}], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/aop/CacheBaseTest.java"}, "test_case": {"identifier": "getUpdateData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getUpdateData() throws Exception {\n        AnnotationData annotationData = new AnnotationData();\n        annotationData.setDataIndex(-1);\n        Object entity = new Object();\n\n        Object result = cut.getUpdateData(annotationData, null, null, entity);\n        assertSame(entity, result);\n\n        annotationData = new AnnotationData();\n        annotationData.setReturnDataIndex(true);\n        result = cut.getUpdateData(annotationData, null, null, entity);\n        assertSame(entity, result);\n\n        annotationData = new AnnotationData();\n        annotationData.setDataIndex(1);\n        Method method = UpdateData.class.getMethod(\"update\", new Class[] { int.class, Object.class });\n        result = cut.getUpdateData(annotationData, method, new Object[] { 144, entity }, entity);\n        assertSame(entity, result);\n\n    }", "signature": "void getUpdateData()", "full_signature": "@Test public void getUpdateData()", "class_method_signature": "CacheBaseTest.getUpdateData()", "testcase": true, "constructor": false, "invocations": ["setDataIndex", "getUpdateData", "assertSame", "setReturnDataIndex", "getUpdateData", "assertSame", "setDataIndex", "getMethod", "getUpdateData", "assertSame"]}, "focal_class": {"identifier": "CacheBase", "superclass": "", "interfaces": "implements ApplicationContextAware, InitializingBean", "fields": [{"original_string": "public static final String DISABLE_CACHE_PROPERTY = \"ssm.cache.disable\";", "modifier": "public static final", "type": "String", "declarator": "DISABLE_CACHE_PROPERTY = \"ssm.cache.disable\"", "var_name": "DISABLE_CACHE_PROPERTY"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(CacheBase.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(CacheBase.class)", "var_name": "LOG"}, {"original_string": "private CacheKeyBuilder cacheKeyBuilder = new CacheKeyBuilderImpl();", "modifier": "private", "type": "CacheKeyBuilder", "declarator": "cacheKeyBuilder = new CacheKeyBuilderImpl()", "var_name": "cacheKeyBuilder"}, {"original_string": "private BridgeMethodMappingStore bridgeMethodMappingStore = new BridgeMethodMappingStoreImpl();", "modifier": "private", "type": "BridgeMethodMappingStore", "declarator": "bridgeMethodMappingStore = new BridgeMethodMappingStoreImpl()", "var_name": "bridgeMethodMappingStore"}, {"original_string": "private final Map<String, Cache> caches = new HashMap<String, Cache>();", "modifier": "private final", "type": "Map<String, Cache>", "declarator": "caches = new HashMap<String, Cache>()", "var_name": "caches"}, {"original_string": "private Settings settings = new Settings();", "modifier": "private", "type": "Settings", "declarator": "settings = new Settings()", "var_name": "settings"}, {"original_string": "private ApplicationContext context;", "modifier": "private", "type": "ApplicationContext", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "CacheBase.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "setApplicationContext", "parameters": "(final ApplicationContext applicationContext)", "modifiers": "@Override public", "return": "void", "signature": "void setApplicationContext(final ApplicationContext applicationContext)", "full_signature": "@Override public void setApplicationContext(final ApplicationContext applicationContext)", "class_method_signature": "CacheBase.setApplicationContext(final ApplicationContext applicationContext)", "testcase": false, "constructor": false}, {"identifier": "setCacheKeyBuilder", "parameters": "(final CacheKeyBuilder cacheKeyBuilder)", "modifiers": "public", "return": "void", "signature": "void setCacheKeyBuilder(final CacheKeyBuilder cacheKeyBuilder)", "full_signature": "public void setCacheKeyBuilder(final CacheKeyBuilder cacheKeyBuilder)", "class_method_signature": "CacheBase.setCacheKeyBuilder(final CacheKeyBuilder cacheKeyBuilder)", "testcase": false, "constructor": false}, {"identifier": "getCacheKeyBuilder", "parameters": "()", "modifiers": "public", "return": "CacheKeyBuilder", "signature": "CacheKeyBuilder getCacheKeyBuilder()", "full_signature": "public CacheKeyBuilder getCacheKeyBuilder()", "class_method_signature": "CacheBase.getCacheKeyBuilder()", "testcase": false, "constructor": false}, {"identifier": "getBridgeMethodMappingStore", "parameters": "()", "modifiers": "public", "return": "BridgeMethodMappingStore", "signature": "BridgeMethodMappingStore getBridgeMethodMappingStore()", "full_signature": "public BridgeMethodMappingStore getBridgeMethodMappingStore()", "class_method_signature": "CacheBase.getBridgeMethodMappingStore()", "testcase": false, "constructor": false}, {"identifier": "setBridgeMethodMappingStore", "parameters": "(final BridgeMethodMappingStore bridgeMethodMappingStore)", "modifiers": "public", "return": "void", "signature": "void setBridgeMethodMappingStore(final BridgeMethodMappingStore bridgeMethodMappingStore)", "full_signature": "public void setBridgeMethodMappingStore(final BridgeMethodMappingStore bridgeMethodMappingStore)", "class_method_signature": "CacheBase.setBridgeMethodMappingStore(final BridgeMethodMappingStore bridgeMethodMappingStore)", "testcase": false, "constructor": false}, {"identifier": "getCache", "parameters": "(final AnnotationData data)", "modifiers": "public", "return": "Cache", "signature": "Cache getCache(final AnnotationData data)", "full_signature": "public Cache getCache(final AnnotationData data)", "class_method_signature": "CacheBase.getCache(final AnnotationData data)", "testcase": false, "constructor": false}, {"identifier": "isCacheDisabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCacheDisabled()", "full_signature": "public boolean isCacheDisabled()", "class_method_signature": "CacheBase.isCacheDisabled()", "testcase": false, "constructor": false}, {"identifier": "getMethodToCache", "parameters": "(final JoinPoint jp, final Class<T> annotationClass)", "modifiers": "public", "return": "Method", "signature": "Method getMethodToCache(final JoinPoint jp, final Class<T> annotationClass)", "full_signature": "public Method getMethodToCache(final JoinPoint jp, final Class<T> annotationClass)", "class_method_signature": "CacheBase.getMethodToCache(final JoinPoint jp, final Class<T> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "getUpdateData", "parameters": "(final AnnotationData data, final Method method, final Object[] args, final Object returnValue)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T getUpdateData(final AnnotationData data, final Method method, final Object[] args, final Object returnValue)", "full_signature": "@SuppressWarnings(\"unchecked\") public T getUpdateData(final AnnotationData data, final Method method, final Object[] args, final Object returnValue)", "class_method_signature": "CacheBase.getUpdateData(final AnnotationData data, final Method method, final Object[] args, final Object returnValue)", "testcase": false, "constructor": false}, {"identifier": "getSettings", "parameters": "()", "modifiers": "protected", "return": "Settings", "signature": "Settings getSettings()", "full_signature": "protected Settings getSettings()", "class_method_signature": "CacheBase.getSettings()", "testcase": false, "constructor": false}, {"identifier": "getSubmission", "parameters": "(final Object o)", "modifiers": "protected", "return": "Object", "signature": "Object getSubmission(final Object o)", "full_signature": "protected Object getSubmission(final Object o)", "class_method_signature": "CacheBase.getSubmission(final Object o)", "testcase": false, "constructor": false}, {"identifier": "getResult", "parameters": "(final Object result)", "modifiers": "protected", "return": "Object", "signature": "Object getResult(final Object result)", "full_signature": "protected Object getResult(final Object result)", "class_method_signature": "CacheBase.getResult(final Object result)", "testcase": false, "constructor": false}, {"identifier": "verifyReturnTypeIsList", "parameters": "(final Method method, final Class<?> annotationClass)", "modifiers": "protected", "return": "void", "signature": "void verifyReturnTypeIsList(final Method method, final Class<?> annotationClass)", "full_signature": "protected void verifyReturnTypeIsList(final Method method, final Class<?> annotationClass)", "class_method_signature": "CacheBase.verifyReturnTypeIsList(final Method method, final Class<?> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "verifyTypeIsList", "parameters": "(final Class<?> clazz)", "modifiers": "protected", "return": "boolean", "signature": "boolean verifyTypeIsList(final Class<?> clazz)", "full_signature": "protected boolean verifyTypeIsList(final Class<?> clazz)", "class_method_signature": "CacheBase.verifyTypeIsList(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "verifyReturnTypeIsNoVoid", "parameters": "(final Method method, final Class<?> annotationClass)", "modifiers": "protected", "return": "void", "signature": "void verifyReturnTypeIsNoVoid(final Method method, final Class<?> annotationClass)", "full_signature": "protected void verifyReturnTypeIsNoVoid(final Method method, final Class<?> annotationClass)", "class_method_signature": "CacheBase.verifyReturnTypeIsNoVoid(final Method method, final Class<?> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "getSerializationType", "parameters": "(final Method method)", "modifiers": "protected", "return": "SerializationType", "signature": "SerializationType getSerializationType(final Method method)", "full_signature": "protected SerializationType getSerializationType(final Method method)", "class_method_signature": "CacheBase.getSerializationType(final Method method)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "protected", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "protected Logger getLogger()", "class_method_signature": "CacheBase.getLogger()", "testcase": false, "constructor": false}, {"identifier": "addCache", "parameters": "(final Cache cache)", "modifiers": "protected", "return": "void", "signature": "void addCache(final Cache cache)", "full_signature": "protected void addCache(final Cache cache)", "class_method_signature": "CacheBase.addCache(final Cache cache)", "testcase": false, "constructor": false}, {"identifier": "findMethodFromTargetGivenNameAndParams", "parameters": "(final Object target, final String name, final Class<?>[] parameters)", "modifiers": "private", "return": "Method", "signature": "Method findMethodFromTargetGivenNameAndParams(final Object target, final String name, final Class<?>[] parameters)", "full_signature": "private Method findMethodFromTargetGivenNameAndParams(final Object target, final String name, final Class<?>[] parameters)", "class_method_signature": "CacheBase.findMethodFromTargetGivenNameAndParams(final Object target, final String name, final Class<?>[] parameters)", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/aop/CacheBase.java"}, "focal_method": {"identifier": "getUpdateData", "parameters": "(final AnnotationData data, final Method method, final Object[] args, final Object returnValue)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "body": "@SuppressWarnings(\"unchecked\")\n    public <T> T getUpdateData(final AnnotationData data, final Method method, final Object[] args, final Object returnValue)\n            throws Exception {\n        return data.isReturnDataIndex() ? (T) returnValue : (T) Utils.getMethodArg(data.getDataIndex(), args, method.toString());\n    }", "signature": "T getUpdateData(final AnnotationData data, final Method method, final Object[] args, final Object returnValue)", "full_signature": "@SuppressWarnings(\"unchecked\") public T getUpdateData(final AnnotationData data, final Method method, final Object[] args, final Object returnValue)", "class_method_signature": "CacheBase.getUpdateData(final AnnotationData data, final Method method, final Object[] args, final Object returnValue)", "testcase": false, "constructor": false, "invocations": ["isReturnDataIndex", "getMethodArg", "getDataIndex", "toString"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}