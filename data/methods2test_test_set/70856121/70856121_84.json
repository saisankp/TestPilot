{"test_class": {"identifier": "RingRangeTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/server/src/test/java/io/cassandrareaper/service/RingRangeTest.java"}, "test_case": {"identifier": "mergeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void mergeTest() {\n    List<RingRange> ranges = Lists.newArrayList();\n    ranges.add(new RingRange(BigInteger.valueOf(30L), BigInteger.valueOf(50L)));\n    ranges.add(new RingRange(BigInteger.valueOf(10L), BigInteger.valueOf(30L)));\n    ranges.add(new RingRange(BigInteger.valueOf(80L), BigInteger.valueOf(10L)));\n    RingRange merged = RingRange.merge(ranges);\n    assertEquals(\"80\", merged.getStart().toString());\n    assertEquals(\"50\", merged.getEnd().toString());\n  }", "signature": "void mergeTest()", "full_signature": "@Test public void mergeTest()", "class_method_signature": "RingRangeTest.mergeTest()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "add", "valueOf", "valueOf", "add", "valueOf", "valueOf", "add", "valueOf", "valueOf", "merge", "assertEquals", "toString", "getStart", "assertEquals", "toString", "getEnd"]}, "focal_class": {"identifier": "RingRange", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Comparator<RingRange> START_COMPARATOR\n      = (RingRange o1, RingRange o2) -> o1.start.compareTo(o2.start);", "modifier": "public static final", "type": "Comparator<RingRange>", "declarator": "START_COMPARATOR\n      = (RingRange o1, RingRange o2) -> o1.start.compareTo(o2.start)", "var_name": "START_COMPARATOR"}, {"original_string": "private final BigInteger start;", "modifier": "private final", "type": "BigInteger", "declarator": "start", "var_name": "start"}, {"original_string": "private final BigInteger end;", "modifier": "private final", "type": "BigInteger", "declarator": "end", "var_name": "end"}], "methods": [{"identifier": "RingRange", "parameters": "(BigInteger start, BigInteger end)", "modifiers": "public", "return": "", "signature": " RingRange(BigInteger start, BigInteger end)", "full_signature": "public  RingRange(BigInteger start, BigInteger end)", "class_method_signature": "RingRange.RingRange(BigInteger start, BigInteger end)", "testcase": false, "constructor": true}, {"identifier": "RingRange", "parameters": "(String... range)", "modifiers": "public", "return": "", "signature": " RingRange(String... range)", "full_signature": "public  RingRange(String... range)", "class_method_signature": "RingRange.RingRange(String... range)", "testcase": false, "constructor": true}, {"identifier": "getStart", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getStart()", "full_signature": "public BigInteger getStart()", "class_method_signature": "RingRange.getStart()", "testcase": false, "constructor": false}, {"identifier": "getEnd", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getEnd()", "full_signature": "public BigInteger getEnd()", "class_method_signature": "RingRange.getEnd()", "testcase": false, "constructor": false}, {"identifier": "span", "parameters": "(BigInteger ringSize)", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger span(BigInteger ringSize)", "full_signature": "public BigInteger span(BigInteger ringSize)", "class_method_signature": "RingRange.span(BigInteger ringSize)", "testcase": false, "constructor": false}, {"identifier": "encloses", "parameters": "(RingRange other)", "modifiers": "public", "return": "boolean", "signature": "boolean encloses(RingRange other)", "full_signature": "public boolean encloses(RingRange other)", "class_method_signature": "RingRange.encloses(RingRange other)", "testcase": false, "constructor": false}, {"identifier": "isWrapping", "parameters": "()", "modifiers": "@JsonIgnore public", "return": "boolean", "signature": "boolean isWrapping()", "full_signature": "@JsonIgnore public boolean isWrapping()", "class_method_signature": "RingRange.isWrapping()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RingRange.toString()", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(List<RingRange> ranges)", "modifiers": "public static", "return": "RingRange", "signature": "RingRange merge(List<RingRange> ranges)", "full_signature": "public static RingRange merge(List<RingRange> ranges)", "class_method_signature": "RingRange.merge(List<RingRange> ranges)", "testcase": false, "constructor": false}], "file": "src/server/src/main/java/io/cassandrareaper/service/RingRange.java"}, "focal_method": {"identifier": "merge", "parameters": "(List<RingRange> ranges)", "modifiers": "public static", "return": "RingRange", "body": "public static RingRange merge(List<RingRange> ranges) {\n    // sor\n    Collections.sort(ranges, START_COMPARATOR);\n\n    // find gap\n    int gap = 0;\n    for (; gap < ranges.size() - 1; gap++) {\n      RingRange left = ranges.get(gap);\n      RingRange right = ranges.get(gap + 1);\n      if (!left.end.equals(right.start)) {\n        break;\n      }\n    }\n\n    // return merged\n    if (gap == ranges.size() - 1) {\n      return new RingRange(ranges.get(0).start, ranges.get(gap).end);\n    } else {\n      return new RingRange(ranges.get(gap + 1).start, ranges.get(gap).end);\n    }\n  }", "signature": "RingRange merge(List<RingRange> ranges)", "full_signature": "public static RingRange merge(List<RingRange> ranges)", "class_method_signature": "RingRange.merge(List<RingRange> ranges)", "testcase": false, "constructor": false, "invocations": ["sort", "size", "get", "get", "equals", "size", "get", "get", "get", "get"]}, "repository": {"repo_id": 70856121, "url": "https://github.com/thelastpickle/cassandra-reaper", "language": "Java", "is_fork": false, "fork_count": 156, "stargazer_count": 353, "size": 43662, "license": "licensed"}}