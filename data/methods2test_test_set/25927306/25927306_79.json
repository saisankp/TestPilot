{"test_class": {"identifier": "ActivePassiveConnectionStrategyTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/ActivePassiveConnectionStrategyTest.java"}, "test_case": {"identifier": "firstAndSecondUrlInactive", "parameters": "()", "modifiers": "@Test(groups = \"conn\") public", "return": "void", "body": "@Test(groups = \"conn\")\n  public void firstAndSecondUrlInactive()\n    throws Exception\n  {\n    final ActivePassiveConnectionStrategy strategy = new ActivePassiveConnectionStrategy();\n    final ConnectionConfig cc = new ConnectionConfig();\n    cc.setLdapUrl(\"ldap://directory-1.ldaptive.org ldap://directory-2.ldaptive.org ldap://directory-3.ldaptive.org\");\n    cc.setConnectionStrategy(strategy);\n    final MockConnection conn = new MockConnection(cc);\n    conn.setOpenPredicate(ldapURL -> !ldapURL.getHostname().contains(\"-1\") && !ldapURL.getHostname().contains(\"-2\"));\n    conn.setTestPredicate(ldapURL -> true);\n    Assert.assertEquals(strategy.ldapURLSet.getActiveUrls().size(), 3);\n    Assert.assertEquals(\n      strategy.ldapURLSet.getActiveUrls(),\n      Arrays.asList(\n        new LdapURL(\"ldap://directory-1.ldaptive.org\"),\n        new LdapURL(\"ldap://directory-2.ldaptive.org\"),\n        new LdapURL(\"ldap://directory-3.ldaptive.org\")));\n    Assert.assertEquals(strategy.ldapURLSet.getInactiveUrls().size(), 0);\n\n    // first and second entry should fail, list should reorder with those entries last\n    conn.open();\n    Assert.assertEquals(strategy.ldapURLSet.getActiveUrls().size(), 1);\n    Assert.assertEquals(\n      strategy.ldapURLSet.getActiveUrls().iterator().next(),\n      new LdapURL(\"ldap://directory-3.ldaptive.org\"));\n    Assert.assertEquals(strategy.ldapURLSet.getInactiveUrls().size(), 2);\n    Assert.assertEquals(\n      strategy.ldapURLSet.getInactiveUrls(),\n      Arrays.asList(\n        new LdapURL(\"ldap://directory-1.ldaptive.org\"),\n        new LdapURL(\"ldap://directory-2.ldaptive.org\")));\n\n    // confirm the inactive entries stay at the end\n    Assert.assertEquals(\n      StreamSupport.stream(strategy.spliterator(), false).collect(Collectors.toList()),\n      Arrays.asList(\n        new LdapURL(\"ldap://directory-3.ldaptive.org\"),\n        new LdapURL(\"ldap://directory-1.ldaptive.org\"),\n        new LdapURL(\"ldap://directory-2.ldaptive.org\")));\n    Assert.assertEquals(strategy.ldapURLSet.getActiveUrls().size(), 1);\n    Assert.assertEquals(\n      strategy.ldapURLSet.getActiveUrls().iterator().next(),\n      new LdapURL(\"ldap://directory-3.ldaptive.org\"));\n    Assert.assertEquals(strategy.ldapURLSet.getInactiveUrls().size(), 2);\n    Assert.assertEquals(\n      strategy.ldapURLSet.getInactiveUrls(),\n      Arrays.asList(\n        new LdapURL(\"ldap://directory-1.ldaptive.org\"),\n        new LdapURL(\"ldap://directory-2.ldaptive.org\")));\n\n    // mark first entry as active, list should reorder with that entry first\n    strategy.success(strategy.ldapURLSet.getInactiveUrls().iterator().next());\n    Assert.assertEquals(\n      StreamSupport.stream(strategy.spliterator(), false).collect(Collectors.toList()),\n      Arrays.asList(\n        new LdapURL(\"ldap://directory-1.ldaptive.org\"),\n        new LdapURL(\"ldap://directory-3.ldaptive.org\"),\n        new LdapURL(\"ldap://directory-2.ldaptive.org\")));\n    Assert.assertEquals(strategy.ldapURLSet.getActiveUrls().size(), 2);\n    Assert.assertEquals(\n      strategy.ldapURLSet.getActiveUrls(),\n      Arrays.asList(\n        new LdapURL(\"ldap://directory-1.ldaptive.org\"),\n        new LdapURL(\"ldap://directory-3.ldaptive.org\")));\n    Assert.assertEquals(strategy.ldapURLSet.getInactiveUrls().size(), 1);\n    Assert.assertEquals(\n      strategy.ldapURLSet.getInactiveUrls().iterator().next(),\n      new LdapURL(\"ldap://directory-2.ldaptive.org\"));\n\n    // mark second entry as active, list should reorder with that entry second\n    strategy.success(strategy.ldapURLSet.getInactiveUrls().iterator().next());\n    Assert.assertEquals(\n      StreamSupport.stream(strategy.spliterator(), false).collect(Collectors.toList()),\n      Arrays.asList(\n        new LdapURL(\"ldap://directory-1.ldaptive.org\"),\n        new LdapURL(\"ldap://directory-2.ldaptive.org\"),\n        new LdapURL(\"ldap://directory-3.ldaptive.org\")));\n    Assert.assertEquals(strategy.ldapURLSet.getActiveUrls().size(), 3);\n    Assert.assertEquals(\n      strategy.ldapURLSet.getActiveUrls(),\n      Arrays.asList(\n        new LdapURL(\"ldap://directory-1.ldaptive.org\"),\n        new LdapURL(\"ldap://directory-2.ldaptive.org\"),\n        new LdapURL(\"ldap://directory-3.ldaptive.org\")));\n    Assert.assertEquals(strategy.ldapURLSet.getInactiveUrls().size(), 0);\n  }", "signature": "void firstAndSecondUrlInactive()", "full_signature": "@Test(groups = \"conn\") public void firstAndSecondUrlInactive()", "class_method_signature": "ActivePassiveConnectionStrategyTest.firstAndSecondUrlInactive()", "testcase": true, "constructor": false, "invocations": ["setLdapUrl", "setConnectionStrategy", "setOpenPredicate", "contains", "getHostname", "contains", "getHostname", "setTestPredicate", "assertEquals", "size", "getActiveUrls", "assertEquals", "getActiveUrls", "asList", "assertEquals", "size", "getInactiveUrls", "open", "assertEquals", "size", "getActiveUrls", "assertEquals", "next", "iterator", "getActiveUrls", "assertEquals", "size", "getInactiveUrls", "assertEquals", "getInactiveUrls", "asList", "assertEquals", "collect", "stream", "spliterator", "toList", "asList", "assertEquals", "size", "getActiveUrls", "assertEquals", "next", "iterator", "getActiveUrls", "assertEquals", "size", "getInactiveUrls", "assertEquals", "getInactiveUrls", "asList", "success", "next", "iterator", "getInactiveUrls", "assertEquals", "collect", "stream", "spliterator", "toList", "asList", "assertEquals", "size", "getActiveUrls", "assertEquals", "getActiveUrls", "asList", "assertEquals", "size", "getInactiveUrls", "assertEquals", "next", "iterator", "getInactiveUrls", "success", "next", "iterator", "getInactiveUrls", "assertEquals", "collect", "stream", "spliterator", "toList", "asList", "assertEquals", "size", "getActiveUrls", "assertEquals", "getActiveUrls", "asList", "assertEquals", "size", "getInactiveUrls"]}, "focal_class": {"identifier": "ActivePassiveConnectionStrategy", "superclass": "extends AbstractConnectionStrategy", "interfaces": "", "fields": [{"original_string": "private final Function<List<LdapURL>, Iterator<LdapURL>> iterFunction;", "modifier": "private final", "type": "Function<List<LdapURL>, Iterator<LdapURL>>", "declarator": "iterFunction", "var_name": "iterFunction"}], "methods": [{"identifier": "ActivePassiveConnectionStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " ActivePassiveConnectionStrategy()", "full_signature": "public  ActivePassiveConnectionStrategy()", "class_method_signature": "ActivePassiveConnectionStrategy.ActivePassiveConnectionStrategy()", "testcase": false, "constructor": true}, {"identifier": "ActivePassiveConnectionStrategy", "parameters": "(final Function<List<LdapURL>, Iterator<LdapURL>> function)", "modifiers": "public", "return": "", "signature": " ActivePassiveConnectionStrategy(final Function<List<LdapURL>, Iterator<LdapURL>> function)", "full_signature": "public  ActivePassiveConnectionStrategy(final Function<List<LdapURL>, Iterator<LdapURL>> function)", "class_method_signature": "ActivePassiveConnectionStrategy.ActivePassiveConnectionStrategy(final Function<List<LdapURL>, Iterator<LdapURL>> function)", "testcase": false, "constructor": true}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<LdapURL>", "signature": "Iterator<LdapURL> iterator()", "full_signature": "@Override public Iterator<LdapURL> iterator()", "class_method_signature": "ActivePassiveConnectionStrategy.iterator()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/ActivePassiveConnectionStrategy.java"}, "focal_method": {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<LdapURL>", "body": "@Override\n  public Iterator<LdapURL> iterator()\n  {\n    if (!isInitialized()) {\n      throw new IllegalStateException(\"Strategy is not initialized\");\n    }\n    if (iterFunction != null) {\n      return iterFunction.apply(ldapURLSet.getUrls());\n    }\n    return new DefaultLdapURLIterator(ldapURLSet.getUrls());\n  }", "signature": "Iterator<LdapURL> iterator()", "full_signature": "@Override public Iterator<LdapURL> iterator()", "class_method_signature": "ActivePassiveConnectionStrategy.iterator()", "testcase": false, "constructor": false, "invocations": ["isInitialized", "apply", "getUrls", "getUrls"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}