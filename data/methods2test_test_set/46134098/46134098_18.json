{"test_class": {"identifier": "JsonResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File INPUT_FILE = new File(\"src/test/resource/resfilter/json/input.json\");", "modifier": "private static final", "type": "File", "declarator": "INPUT_FILE = new File(\"src/test/resource/resfilter/json/input.json\")", "var_name": "INPUT_FILE"}, {"original_string": "private static final File OUTPUT_FILE = new File(\"src/test/resource/resfilter/json/output.json\");", "modifier": "private static final", "type": "File", "declarator": "OUTPUT_FILE = new File(\"src/test/resource/resfilter/json/output.json\")", "var_name": "OUTPUT_FILE"}, {"original_string": "private static final File INPUT_FILE2 = new File(\"src/test/resource/resfilter/json/other-input.json\");", "modifier": "private static final", "type": "File", "declarator": "INPUT_FILE2 = new File(\"src/test/resource/resfilter/json/other-input.json\")", "var_name": "INPUT_FILE2"}, {"original_string": "private static final File SPLITKEYS = new File(\"src/test/resource/resfilter/json/testSplitKeys.json\");", "modifier": "private static final", "type": "File", "declarator": "SPLITKEYS = new File(\"src/test/resource/resfilter/json/testSplitKeys.json\")", "var_name": "SPLITKEYS"}, {"original_string": "private static final File EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/json/write-output.json\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/json/write-output.json\")", "var_name": "EXPECTED_WRITE_FILE"}, {"original_string": "private static final Collection<ResourceString> EXPECTED_INPUT_RES_LIST;", "modifier": "private static final", "type": "Collection<ResourceString>", "declarator": "EXPECTED_INPUT_RES_LIST", "var_name": "EXPECTED_INPUT_RES_LIST"}, {"original_string": "private static LanguageBundle WRITE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "WRITE_BUNDLE", "var_name": "WRITE_BUNDLE"}, {"original_string": "private static final JsonResource res = new JsonResource();", "modifier": "private static final", "type": "JsonResource", "declarator": "res = new JsonResource()", "var_name": "res"}], "file": "gp-res-filter/src/test/java/com/ibm/g11n/pipeline/resfilter/impl/JsonResourceTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse() throws IOException, ResourceFilterException {\n        assertTrue(\"The input test file <\" + INPUT_FILE + \"> does not exist.\", INPUT_FILE.exists());\n\n        try (InputStream is = new FileInputStream(INPUT_FILE)) {\n            LanguageBundle bundle = res.parse(is, null);\n            List<ResourceString> resStrList = new ArrayList<>(bundle.getResourceStrings());\n            Collections.sort(resStrList, new ResourceStringComparator());\n            assertArrayEquals(\"ResourceStrings did not match.\", EXPECTED_INPUT_RES_LIST.toArray(),\n                    resStrList.toArray());\n        }\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "JsonResourceTest.testParse()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "exists", "parse", "getResourceStrings", "sort", "assertArrayEquals", "toArray", "toArray"]}, "focal_class": {"identifier": "JsonResource", "superclass": "extends ResourceFilter", "interfaces": "", "fields": [{"original_string": "private static final String JSONPATH_ROOT = \"$\";", "modifier": "private static final", "type": "String", "declarator": "JSONPATH_ROOT = \"$\"", "var_name": "JSONPATH_ROOT"}, {"original_string": "private static final Pattern USE_JSONPATH_PATTERN = Pattern.compile(\"^\\\\$[.\\\\[].*\");", "modifier": "private static final", "type": "Pattern", "declarator": "USE_JSONPATH_PATTERN = Pattern.compile(\"^\\\\$[.\\\\[].*\")", "var_name": "USE_JSONPATH_PATTERN"}, {"original_string": "private static final Pattern USE_BRACKET_PATTERN = Pattern.compile(\"[.'\\\\[\\\\]]\");", "modifier": "private static final", "type": "Pattern", "declarator": "USE_BRACKET_PATTERN = Pattern.compile(\"[.'\\\\[\\\\]]\")", "var_name": "USE_BRACKET_PATTERN"}], "methods": [{"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "JsonResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "addBundleStrings", "parameters": "(JsonObject obj, String keyPrefix, LanguageBundleBuilder bb, int sequenceNum)", "modifiers": "protected", "return": "int", "signature": "int addBundleStrings(JsonObject obj, String keyPrefix, LanguageBundleBuilder bb, int sequenceNum)", "full_signature": "protected int addBundleStrings(JsonObject obj, String keyPrefix, LanguageBundleBuilder bb, int sequenceNum)", "class_method_signature": "JsonResource.addBundleStrings(JsonObject obj, String keyPrefix, LanguageBundleBuilder bb, int sequenceNum)", "testcase": false, "constructor": false}, {"identifier": "encodeResourceKey", "parameters": "(String parent, String key, boolean isLeaf)", "modifiers": "protected", "return": "String", "signature": "String encodeResourceKey(String parent, String key, boolean isLeaf)", "full_signature": "protected String encodeResourceKey(String parent, String key, boolean isLeaf)", "class_method_signature": "JsonResource.encodeResourceKey(String parent, String key, boolean isLeaf)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "JsonResource.write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "splitKeyPieces", "parameters": "(String key)", "modifiers": "static", "return": "List<KeyPiece>", "signature": "List<KeyPiece> splitKeyPieces(String key)", "full_signature": "static List<KeyPiece> splitKeyPieces(String key)", "class_method_signature": "JsonResource.splitKeyPieces(String key)", "testcase": false, "constructor": false}, {"identifier": "addToken", "parameters": "(List<KeyPiece> result, String s, boolean inSubscript)", "modifiers": "static", "return": "void", "signature": "void addToken(List<KeyPiece> result, String s, boolean inSubscript)", "full_signature": "static void addToken(List<KeyPiece> result, String s, boolean inSubscript)", "class_method_signature": "JsonResource.addToken(List<KeyPiece> result, String s, boolean inSubscript)", "testcase": false, "constructor": false}], "file": "gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/JsonResource.java"}, "focal_method": {"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "body": "@Override\n    public LanguageBundle parse(InputStream inStream, FilterOptions options)\n            throws IOException, ResourceFilterException {\n        LanguageBundleBuilder bb = new LanguageBundleBuilder(false);    // TODO: Can we use auto sequence# mode?\n        try (InputStreamReader reader = new InputStreamReader(new BomInputStream(inStream), StandardCharsets.UTF_8)) {\n            JsonElement root = new JsonParser().parse(reader);\n            if (!root.isJsonObject()) {\n                throw new IllegalResourceFormatException(\"The root JSON element is not an JSON object.\");\n            }\n            addBundleStrings(root.getAsJsonObject(), \"\", bb, 0);\n        } catch (JsonParseException e) {\n            throw new IllegalResourceFormatException(\"Failed to parse the specified JSON contents.\", e);\n        }\n        return bb.build();\n    }", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "JsonResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false, "invocations": ["parse", "isJsonObject", "addBundleStrings", "getAsJsonObject", "build"]}, "repository": {"repo_id": 46134098, "url": "https://github.com/IBM-Cloud/gp-java-tools", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 9, "size": 6216, "license": "licensed"}}