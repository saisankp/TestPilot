{"test_class": {"identifier": "FileServiceTest", "superclass": "extends PrimeTimeTest", "interfaces": "", "fields": [{"original_string": "private FileService fileService;", "modifier": "private", "type": "FileService", "declarator": "fileService", "var_name": "fileService"}, {"original_string": "private ScreenService screenService;", "modifier": "private", "type": "ScreenService", "declarator": "screenService", "var_name": "screenService"}, {"original_string": "private PageService pageService;", "modifier": "private", "type": "PageService", "declarator": "pageService", "var_name": "pageService"}], "file": "common/app/src/test/java/com/sap/primetime/api/FileServiceTest.java"}, "test_case": {"identifier": "testAddOwners", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddOwners() throws Exception {\n\t\tFile file = fileService.createFile(\"f1\", \"jpg\", \"f1\", 99);\n\t\tassertEquals(1, fileService.getFile(file.getId()).getOwners().size());\n\n\t\tfileService.addOwners(file.getId(), new Owner[] { new Owner(new User(\"i1\")) });\n\t\tassertEquals(2, fileService.getFile(file.getId()).getOwners().size());\n\t\tList<Owner> owners = fileService.getFile(file.getId()).getOwners();\n\t\tassertEquals(\"i1\", owners.get(1).getUser().getUserId());\n\n\t\tfileService.addOwners(file.getId(), new Owner[] { new Owner(new User(\"i2\")) });\n\t\tassertEquals(3, fileService.getFile(file.getId()).getOwners().size());\n\t}", "signature": "void testAddOwners()", "full_signature": "@Test public void testAddOwners()", "class_method_signature": "FileServiceTest.testAddOwners()", "testcase": true, "constructor": false, "invocations": ["createFile", "assertEquals", "size", "getOwners", "getFile", "getId", "addOwners", "getId", "assertEquals", "size", "getOwners", "getFile", "getId", "getOwners", "getFile", "getId", "assertEquals", "getUserId", "getUser", "get", "addOwners", "getId", "assertEquals", "size", "getOwners", "getFile", "getId"]}, "focal_class": {"identifier": "FileService", "superclass": "extends BasicService", "interfaces": "implements OwnerAPISupport<File>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(FileService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FileService.class)", "var_name": "logger"}], "methods": [{"identifier": "getFiles", "parameters": "(@QueryParam(\"userId\") String userId)", "modifiers": "@GET @Path(\"/files\") @Produces(MediaType.APPLICATION_JSON) public", "return": "List<File>", "signature": "List<File> getFiles(@QueryParam(\"userId\") String userId)", "full_signature": "@GET @Path(\"/files\") @Produces(MediaType.APPLICATION_JSON) public List<File> getFiles(@QueryParam(\"userId\") String userId)", "class_method_signature": "FileService.getFiles(@QueryParam(\"userId\") String userId)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(@PathParam(\"fileId\") long id)", "modifiers": "@GET @Path(\"/files/{fileId}\") @Produces(MediaType.APPLICATION_JSON) public", "return": "File", "signature": "File getFile(@PathParam(\"fileId\") long id)", "full_signature": "@GET @Path(\"/files/{fileId}\") @Produces(MediaType.APPLICATION_JSON) public File getFile(@PathParam(\"fileId\") long id)", "class_method_signature": "FileService.getFile(@PathParam(\"fileId\") long id)", "testcase": false, "constructor": false}, {"identifier": "updateFile", "parameters": "(@PathParam(\"fileId\") long fileId, File fileData)", "modifiers": "@PUT @Path(\"/files/{fileId}\") @Produces(MediaType.APPLICATION_JSON) public", "return": "File", "signature": "File updateFile(@PathParam(\"fileId\") long fileId, File fileData)", "full_signature": "@PUT @Path(\"/files/{fileId}\") @Produces(MediaType.APPLICATION_JSON) public File updateFile(@PathParam(\"fileId\") long fileId, File fileData)", "class_method_signature": "FileService.updateFile(@PathParam(\"fileId\") long fileId, File fileData)", "testcase": false, "constructor": false}, {"identifier": "uploadFile", "parameters": "()", "modifiers": "@POST @Path(\"/files\") public", "return": "Response", "signature": "Response uploadFile()", "full_signature": "@POST @Path(\"/files\") public Response uploadFile()", "class_method_signature": "FileService.uploadFile()", "testcase": false, "constructor": false}, {"identifier": "rotateImage", "parameters": "(@PathParam(\"fileId\") long fileId)", "modifiers": "@POST @Path(\"/files/{fileId}/rotate\") public", "return": "Response", "signature": "Response rotateImage(@PathParam(\"fileId\") long fileId)", "full_signature": "@POST @Path(\"/files/{fileId}/rotate\") public Response rotateImage(@PathParam(\"fileId\") long fileId)", "class_method_signature": "FileService.rotateImage(@PathParam(\"fileId\") long fileId)", "testcase": false, "constructor": false}, {"identifier": "updateFileContent", "parameters": "(@PathParam(\"fileId\") long fileId)", "modifiers": "@POST @Path(\"/files/{fileId}/content\") public", "return": "Response", "signature": "Response updateFileContent(@PathParam(\"fileId\") long fileId)", "full_signature": "@POST @Path(\"/files/{fileId}/content\") public Response updateFileContent(@PathParam(\"fileId\") long fileId)", "class_method_signature": "FileService.updateFileContent(@PathParam(\"fileId\") long fileId)", "testcase": false, "constructor": false}, {"identifier": "addContentMetadata", "parameters": "(File existingFile, InputStream stream)", "modifiers": "private", "return": "boolean", "signature": "boolean addContentMetadata(File existingFile, InputStream stream)", "full_signature": "private boolean addContentMetadata(File existingFile, InputStream stream)", "class_method_signature": "FileService.addContentMetadata(File existingFile, InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "parseTemplate", "parameters": "(File existingFile, InputStream stream)", "modifiers": "private", "return": "boolean", "signature": "boolean parseTemplate(File existingFile, InputStream stream)", "full_signature": "private boolean parseTemplate(File existingFile, InputStream stream)", "class_method_signature": "FileService.parseTemplate(File existingFile, InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "deleteFile", "parameters": "(@PathParam(\"fileId\") long fileId)", "modifiers": "@DELETE @Path(\"/files/{fileId}\") public", "return": "Response", "signature": "Response deleteFile(@PathParam(\"fileId\") long fileId)", "full_signature": "@DELETE @Path(\"/files/{fileId}\") public Response deleteFile(@PathParam(\"fileId\") long fileId)", "class_method_signature": "FileService.deleteFile(@PathParam(\"fileId\") long fileId)", "testcase": false, "constructor": false}, {"identifier": "getReferences", "parameters": "(@PathParam(\"fileId\") long fileId)", "modifiers": "@GET @Path(\"/files/{fileId}/references\") @Produces(MediaType.APPLICATION_JSON) public", "return": "FileReferences", "signature": "FileReferences getReferences(@PathParam(\"fileId\") long fileId)", "full_signature": "@GET @Path(\"/files/{fileId}/references\") @Produces(MediaType.APPLICATION_JSON) public FileReferences getReferences(@PathParam(\"fileId\") long fileId)", "class_method_signature": "FileService.getReferences(@PathParam(\"fileId\") long fileId)", "testcase": false, "constructor": false}, {"identifier": "getFileContent", "parameters": "(@PathParam(\"fileId\") long fileId,\n\t\t\t@DefaultValue(\"false\") @QueryParam(\"thumbnail\") boolean thumbnail,\n\t\t\t@DefaultValue(\"0\") @QueryParam(\"page\") int page,\n\t\t\t@DefaultValue(\"false\") @QueryParam(\"download\") boolean download)", "modifiers": "@GET @Path(\"/files/{fileId}/content\") @Produces({ \"image/jpeg,image/png,image/gif,image/bmp,application/pdf,image/svg+xml,image/x-icon,video/mp4\" }) public", "return": "Response", "signature": "Response getFileContent(@PathParam(\"fileId\") long fileId,\n\t\t\t@DefaultValue(\"false\") @QueryParam(\"thumbnail\") boolean thumbnail,\n\t\t\t@DefaultValue(\"0\") @QueryParam(\"page\") int page,\n\t\t\t@DefaultValue(\"false\") @QueryParam(\"download\") boolean download)", "full_signature": "@GET @Path(\"/files/{fileId}/content\") @Produces({ \"image/jpeg,image/png,image/gif,image/bmp,application/pdf,image/svg+xml,image/x-icon,video/mp4\" }) public Response getFileContent(@PathParam(\"fileId\") long fileId,\n\t\t\t@DefaultValue(\"false\") @QueryParam(\"thumbnail\") boolean thumbnail,\n\t\t\t@DefaultValue(\"0\") @QueryParam(\"page\") int page,\n\t\t\t@DefaultValue(\"false\") @QueryParam(\"download\") boolean download)", "class_method_signature": "FileService.getFileContent(@PathParam(\"fileId\") long fileId,\n\t\t\t@DefaultValue(\"false\") @QueryParam(\"thumbnail\") boolean thumbnail,\n\t\t\t@DefaultValue(\"0\") @QueryParam(\"page\") int page,\n\t\t\t@DefaultValue(\"false\") @QueryParam(\"download\") boolean download)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "(String value, int beginIndex, int endIndex)", "modifiers": "private", "return": "long", "signature": "long getLong(String value, int beginIndex, int endIndex)", "full_signature": "private long getLong(String value, int beginIndex, int endIndex)", "class_method_signature": "FileService.getLong(String value, int beginIndex, int endIndex)", "testcase": false, "constructor": false}, {"identifier": "createThumbnail", "parameters": "(File file, int page)", "modifiers": "private", "return": "boolean", "signature": "boolean createThumbnail(File file, int page)", "full_signature": "private boolean createThumbnail(File file, int page)", "class_method_signature": "FileService.createThumbnail(File file, int page)", "testcase": false, "constructor": false}, {"identifier": "getFileContent", "parameters": "(@PathParam(\"fileId\") long fileId, @PathParam(\"path\") String path,\n\t\t\t@DefaultValue(\"0\") @QueryParam(\"page\") long pageId)", "modifiers": "@GET @Path(\"/files/{fileId}/content/{path}\") @Produces({ \"text/html,image/jpeg,image/png,image/gif,image/bmp,application/pdf,image/svg+xml,image/x-icon,video/mp4\" }) public", "return": "Response", "signature": "Response getFileContent(@PathParam(\"fileId\") long fileId, @PathParam(\"path\") String path,\n\t\t\t@DefaultValue(\"0\") @QueryParam(\"page\") long pageId)", "full_signature": "@GET @Path(\"/files/{fileId}/content/{path}\") @Produces({ \"text/html,image/jpeg,image/png,image/gif,image/bmp,application/pdf,image/svg+xml,image/x-icon,video/mp4\" }) public Response getFileContent(@PathParam(\"fileId\") long fileId, @PathParam(\"path\") String path,\n\t\t\t@DefaultValue(\"0\") @QueryParam(\"page\") long pageId)", "class_method_signature": "FileService.getFileContent(@PathParam(\"fileId\") long fileId, @PathParam(\"path\") String path,\n\t\t\t@DefaultValue(\"0\") @QueryParam(\"page\") long pageId)", "testcase": false, "constructor": false}, {"identifier": "addOwners", "parameters": "(@PathParam(\"fileId\") long fileId, Owner[] ownerData)", "modifiers": "@Override @POST @Path(\"/files/{fileId}/owners\") @Consumes(MediaType.APPLICATION_JSON) public", "return": "File", "signature": "File addOwners(@PathParam(\"fileId\") long fileId, Owner[] ownerData)", "full_signature": "@Override @POST @Path(\"/files/{fileId}/owners\") @Consumes(MediaType.APPLICATION_JSON) public File addOwners(@PathParam(\"fileId\") long fileId, Owner[] ownerData)", "class_method_signature": "FileService.addOwners(@PathParam(\"fileId\") long fileId, Owner[] ownerData)", "testcase": false, "constructor": false}, {"identifier": "deleteOwner", "parameters": "(@PathParam(\"fileId\") long fileId, @PathParam(\"ownerId\") long ownerId)", "modifiers": "@Override @DELETE @Path(\"/files/{fileId}/owners/{ownerId}\") @Produces(MediaType.APPLICATION_JSON) public", "return": "File", "signature": "File deleteOwner(@PathParam(\"fileId\") long fileId, @PathParam(\"ownerId\") long ownerId)", "full_signature": "@Override @DELETE @Path(\"/files/{fileId}/owners/{ownerId}\") @Produces(MediaType.APPLICATION_JSON) public File deleteOwner(@PathParam(\"fileId\") long fileId, @PathParam(\"ownerId\") long ownerId)", "class_method_signature": "FileService.deleteOwner(@PathParam(\"fileId\") long fileId, @PathParam(\"ownerId\") long ownerId)", "testcase": false, "constructor": false}, {"identifier": "getScreenshotContent", "parameters": "(@PathParam(\"key\") String key)", "modifiers": "@GET @Path(\"/screenkey/{key}\") @Produces({ \"image/jpeg,image/png,image/gif,image/bmp,application/pdf,image/svg+xml,image/x-icon,video/mp4\" }) public", "return": "Response", "signature": "Response getScreenshotContent(@PathParam(\"key\") String key)", "full_signature": "@GET @Path(\"/screenkey/{key}\") @Produces({ \"image/jpeg,image/png,image/gif,image/bmp,application/pdf,image/svg+xml,image/x-icon,video/mp4\" }) public Response getScreenshotContent(@PathParam(\"key\") String key)", "class_method_signature": "FileService.getScreenshotContent(@PathParam(\"key\") String key)", "testcase": false, "constructor": false}, {"identifier": "uploadScreenshot", "parameters": "(@PathParam(\"key\") String key)", "modifiers": "@POST @Path(\"/screenkey/{key}\") public", "return": "Response", "signature": "Response uploadScreenshot(@PathParam(\"key\") String key)", "full_signature": "@POST @Path(\"/screenkey/{key}\") public Response uploadScreenshot(@PathParam(\"key\") String key)", "class_method_signature": "FileService.uploadScreenshot(@PathParam(\"key\") String key)", "testcase": false, "constructor": false}, {"identifier": "getRawECM", "parameters": "()", "modifiers": "@GET @Path(\"/ecm\") @Produces(MediaType.APPLICATION_JSON) public", "return": "List<File>", "signature": "List<File> getRawECM()", "full_signature": "@GET @Path(\"/ecm\") @Produces(MediaType.APPLICATION_JSON) public List<File> getRawECM()", "class_method_signature": "FileService.getRawECM()", "testcase": false, "constructor": false}, {"identifier": "deleteECMFile", "parameters": "(@PathParam(\"key\") String ecmKey)", "modifiers": "@DELETE @Path(\"/ecm/{key}\") @Produces(MediaType.APPLICATION_JSON) public", "return": "Response", "signature": "Response deleteECMFile(@PathParam(\"key\") String ecmKey)", "full_signature": "@DELETE @Path(\"/ecm/{key}\") @Produces(MediaType.APPLICATION_JSON) public Response deleteECMFile(@PathParam(\"key\") String ecmKey)", "class_method_signature": "FileService.deleteECMFile(@PathParam(\"key\") String ecmKey)", "testcase": false, "constructor": false}, {"identifier": "deleteThumbnails", "parameters": "()", "modifiers": "@POST @Path(\"/deletethumbnails\") public", "return": "Response", "signature": "Response deleteThumbnails()", "full_signature": "@POST @Path(\"/deletethumbnails\") public Response deleteThumbnails()", "class_method_signature": "FileService.deleteThumbnails()", "testcase": false, "constructor": false}, {"identifier": "deleteThumbnails", "parameters": "(String fileKey)", "modifiers": "private", "return": "void", "signature": "void deleteThumbnails(String fileKey)", "full_signature": "private void deleteThumbnails(String fileKey)", "class_method_signature": "FileService.deleteThumbnails(String fileKey)", "testcase": false, "constructor": false}, {"identifier": "copyPartialStream", "parameters": "(InputStream in, OutputStream out, long startIdx, long length)", "modifiers": "private", "return": "void", "signature": "void copyPartialStream(InputStream in, OutputStream out, long startIdx, long length)", "full_signature": "private void copyPartialStream(InputStream in, OutputStream out, long startIdx, long length)", "class_method_signature": "FileService.copyPartialStream(InputStream in, OutputStream out, long startIdx, long length)", "testcase": false, "constructor": false}], "file": "common/app/src/main/java/com/sap/primetime/api/FileService.java"}, "focal_method": {"identifier": "addOwners", "parameters": "(@PathParam(\"fileId\") long fileId, Owner[] ownerData)", "modifiers": "@Override @POST @Path(\"/files/{fileId}/owners\") @Consumes(MediaType.APPLICATION_JSON) public", "return": "File", "body": "@Override\n\t@POST\n\t@Path(\"/files/{fileId}/owners\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\tpublic File addOwners(@PathParam(\"fileId\") long fileId, Owner[] ownerData) {\n\t\tFile existingFile = getExistingFile(fileId, true);\n\t\tdoAddOwners(existingFile, ownerData);\n\n\t\treturn FileDAO.save(existingFile);\n\t}", "signature": "File addOwners(@PathParam(\"fileId\") long fileId, Owner[] ownerData)", "full_signature": "@Override @POST @Path(\"/files/{fileId}/owners\") @Consumes(MediaType.APPLICATION_JSON) public File addOwners(@PathParam(\"fileId\") long fileId, Owner[] ownerData)", "class_method_signature": "FileService.addOwners(@PathParam(\"fileId\") long fileId, Owner[] ownerData)", "testcase": false, "constructor": false, "invocations": ["getExistingFile", "doAddOwners", "save"]}, "repository": {"repo_id": 172529766, "url": "https://github.com/SAP/cloud-primetime", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 25, "size": 7529, "license": "licensed"}}