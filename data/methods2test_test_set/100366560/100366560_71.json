{"test_class": {"identifier": "StringToNumberConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "StringToNumberConverter converter = new StringToNumberConverter();", "modifier": "", "type": "StringToNumberConverter", "declarator": "converter = new StringToNumberConverter()", "var_name": "converter"}], "file": "beanmother-core/src/test/java/io/beanmother/core/converter/std/StringToNumberConverterTest.java"}, "test_case": {"identifier": "testConvert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvert() {\n        assertEquals(1, converter.convert(\"1\", TypeToken.of(Integer.class)));\n        assertEquals(1.1d, converter.convert(\"1.1\", TypeToken.of(Double.class)));\n    }", "signature": "void testConvert()", "full_signature": "@Test public void testConvert()", "class_method_signature": "StringToNumberConverterTest.testConvert()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "convert", "of", "assertEquals", "convert", "of"]}, "focal_class": {"identifier": "StringToNumberConverter", "superclass": "extends AbstractConverter", "interfaces": "", "fields": [], "methods": [{"identifier": "convert", "parameters": "(Object source, TypeToken<?> targetTypeToken)", "modifiers": "@Override public", "return": "Object", "signature": "Object convert(Object source, TypeToken<?> targetTypeToken)", "full_signature": "@Override public Object convert(Object source, TypeToken<?> targetTypeToken)", "class_method_signature": "StringToNumberConverter.convert(Object source, TypeToken<?> targetTypeToken)", "testcase": false, "constructor": false}, {"identifier": "canHandle", "parameters": "(Object source, TypeToken<?> targetTypeToken)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canHandle(Object source, TypeToken<?> targetTypeToken)", "full_signature": "@Override public boolean canHandle(Object source, TypeToken<?> targetTypeToken)", "class_method_signature": "StringToNumberConverter.canHandle(Object source, TypeToken<?> targetTypeToken)", "testcase": false, "constructor": false}], "file": "beanmother-core/src/main/java/io/beanmother/core/converter/std/StringToNumberConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(Object source, TypeToken<?> targetTypeToken)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object convert(Object source, TypeToken<?> targetTypeToken) {\n        if (targetTypeToken.isPrimitive()) {\n            targetTypeToken = PrimitiveTypeUtils.toWrapperTypeToken(targetTypeToken);\n        }\n\n        if (canHandle(source, targetTypeToken)) {\n            return NumberUtils.parseNumber((String) source, (Class) targetTypeToken.getType());\n        } else {\n            throw new ConverterException(\"can not convert '\" + source + \"' to \" + targetTypeToken.getRawType());\n        }\n    }", "signature": "Object convert(Object source, TypeToken<?> targetTypeToken)", "full_signature": "@Override public Object convert(Object source, TypeToken<?> targetTypeToken)", "class_method_signature": "StringToNumberConverter.convert(Object source, TypeToken<?> targetTypeToken)", "testcase": false, "constructor": false, "invocations": ["isPrimitive", "toWrapperTypeToken", "canHandle", "parseNumber", "getType", "getRawType"]}, "repository": {"repo_id": 100366560, "url": "https://github.com/keepcosmos/beanmother", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 95, "size": 688, "license": "licensed"}}