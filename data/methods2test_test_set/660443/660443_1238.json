{"test_class": {"identifier": "EquitablePartitionRefinerTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "tool/group/src/test/java/org/openscience/cdk/group/EquitablePartitionRefinerTest.java"}, "test_case": {"identifier": "refineTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void refineTest() {\n        EquitablePartitionRefiner refiner = new EquitablePartitionRefiner(makeExampleTable());\n        Partition coarser = Partition.fromString(\"[0|1,2,3]\");\n        Partition finer = refiner.refine(coarser);\n        Partition expected = Partition.fromString(\"[0|1,2|3]\");\n        Assert.assertEquals(expected, finer);\n    }", "signature": "void refineTest()", "full_signature": "@Test public void refineTest()", "class_method_signature": "EquitablePartitionRefinerTest.refineTest()", "testcase": true, "constructor": false, "invocations": ["makeExampleTable", "fromString", "refine", "fromString", "assertEquals"]}, "focal_class": {"identifier": "EquitablePartitionRefiner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Refinable refinable;", "modifier": "private final", "type": "Refinable", "declarator": "refinable", "var_name": "refinable"}, {"original_string": "private SplitOrder          splitOrder = SplitOrder.FORWARD;", "modifier": "private", "type": "SplitOrder", "declarator": "splitOrder = SplitOrder.FORWARD", "var_name": "splitOrder"}, {"original_string": "private int                 currentBlockIndex;", "modifier": "private", "type": "int", "declarator": "currentBlockIndex", "var_name": "currentBlockIndex"}, {"original_string": "private Queue<Set<Integer>> blocksToRefine;", "modifier": "private", "type": "Queue<Set<Integer>>", "declarator": "blocksToRefine", "var_name": "blocksToRefine"}], "methods": [{"identifier": "EquitablePartitionRefiner", "parameters": "(Refinable refinable)", "modifiers": "public", "return": "", "signature": " EquitablePartitionRefiner(Refinable refinable)", "full_signature": "public  EquitablePartitionRefiner(Refinable refinable)", "class_method_signature": "EquitablePartitionRefiner.EquitablePartitionRefiner(Refinable refinable)", "testcase": false, "constructor": true}, {"identifier": "setSplitOrder", "parameters": "(SplitOrder splitOrder)", "modifiers": "public", "return": "void", "signature": "void setSplitOrder(SplitOrder splitOrder)", "full_signature": "public void setSplitOrder(SplitOrder splitOrder)", "class_method_signature": "EquitablePartitionRefiner.setSplitOrder(SplitOrder splitOrder)", "testcase": false, "constructor": false}, {"identifier": "refine", "parameters": "(Partition coarser)", "modifiers": "public", "return": "Partition", "signature": "Partition refine(Partition coarser)", "full_signature": "public Partition refine(Partition coarser)", "class_method_signature": "EquitablePartitionRefiner.refine(Partition coarser)", "testcase": false, "constructor": false}, {"identifier": "getInvariants", "parameters": "(Partition partition, Set<Integer> targetBlock)", "modifiers": "private", "return": "Map<Invariant, SortedSet<Integer>>", "signature": "Map<Invariant, SortedSet<Integer>> getInvariants(Partition partition, Set<Integer> targetBlock)", "full_signature": "private Map<Invariant, SortedSet<Integer>> getInvariants(Partition partition, Set<Integer> targetBlock)", "class_method_signature": "EquitablePartitionRefiner.getInvariants(Partition partition, Set<Integer> targetBlock)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(Map<Invariant, SortedSet<Integer>> invariants, Partition partition)", "modifiers": "private", "return": "void", "signature": "void split(Map<Invariant, SortedSet<Integer>> invariants, Partition partition)", "full_signature": "private void split(Map<Invariant, SortedSet<Integer>> invariants, Partition partition)", "class_method_signature": "EquitablePartitionRefiner.split(Map<Invariant, SortedSet<Integer>> invariants, Partition partition)", "testcase": false, "constructor": false}], "file": "tool/group/src/main/java/org/openscience/cdk/group/EquitablePartitionRefiner.java"}, "focal_method": {"identifier": "refine", "parameters": "(Partition coarser)", "modifiers": "public", "return": "Partition", "body": "public Partition refine(Partition coarser) {\n        Partition finer = new Partition(coarser);\n\n        // start the queue with the blocks of a in reverse order\n        blocksToRefine = new LinkedList<Set<Integer>>();\n        for (int i = 0; i < finer.size(); i++) {\n            blocksToRefine.add(finer.copyBlock(i));\n        }\n\n        int numberOfVertices = refinable.getVertexCount();\n        while (!blocksToRefine.isEmpty()) {\n            Set<Integer> t = blocksToRefine.remove();\n            currentBlockIndex = 0;\n            while (currentBlockIndex < finer.size() && finer.size() < numberOfVertices) {\n                if (!finer.isDiscreteCell(currentBlockIndex)) {\n\n                    // get the neighbor invariants for this block\n                    Map<Invariant, SortedSet<Integer>> invariants = getInvariants(finer, t);\n\n                    // split the block on the basis of these invariants\n                    split(invariants, finer);\n                }\n                currentBlockIndex++;\n            }\n\n            // the partition is discrete\n            if (finer.size() == numberOfVertices) {\n                return finer;\n            }\n        }\n        return finer;\n    }", "signature": "Partition refine(Partition coarser)", "full_signature": "public Partition refine(Partition coarser)", "class_method_signature": "EquitablePartitionRefiner.refine(Partition coarser)", "testcase": false, "constructor": false, "invocations": ["size", "add", "copyBlock", "getVertexCount", "isEmpty", "remove", "size", "size", "isDiscreteCell", "getInvariants", "split", "size"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}