{"test_class": {"identifier": "GtidSetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String UUID1 = \"24bc7850-2c16-11e6-a073-0242ac110002\";", "modifier": "private static final", "type": "String", "declarator": "UUID1 = \"24bc7850-2c16-11e6-a073-0242ac110002\"", "var_name": "UUID1"}, {"original_string": "private GtidSet gtids;", "modifier": "private", "type": "GtidSet", "declarator": "gtids", "var_name": "gtids"}], "file": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/GtidSetTest.java"}, "test_case": {"identifier": "shouldNotCollapseNonAdjacentIntervals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotCollapseNonAdjacentIntervals() {\n        gtids = new GtidSet(UUID1 + \":1-191:193-199\");\n        asertIntervalCount(UUID1, 2);\n        asertFirstInterval(UUID1, 1, 191);\n        asertLastInterval(UUID1, 193, 199);\n        assertThat(gtids.toString()).isEqualTo(UUID1 + \":1-191:193-199\");\n    }", "signature": "void shouldNotCollapseNonAdjacentIntervals()", "full_signature": "@Test public void shouldNotCollapseNonAdjacentIntervals()", "class_method_signature": "GtidSetTest.shouldNotCollapseNonAdjacentIntervals()", "testcase": true, "constructor": false, "invocations": ["asertIntervalCount", "asertFirstInterval", "asertLastInterval", "isEqualTo", "assertThat", "toString"]}, "focal_class": {"identifier": "GtidSet", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<String, UUIDSet> uuidSetsByServerId = new TreeMap<>();", "modifier": "private final", "type": "Map<String, UUIDSet>", "declarator": "uuidSetsByServerId = new TreeMap<>()", "var_name": "uuidSetsByServerId"}], "methods": [{"identifier": "GtidSet", "parameters": "(Map<String, UUIDSet> uuidSetsByServerId)", "modifiers": "protected", "return": "", "signature": " GtidSet(Map<String, UUIDSet> uuidSetsByServerId)", "full_signature": "protected  GtidSet(Map<String, UUIDSet> uuidSetsByServerId)", "class_method_signature": "GtidSet.GtidSet(Map<String, UUIDSet> uuidSetsByServerId)", "testcase": false, "constructor": true}, {"identifier": "GtidSet", "parameters": "(String gtids)", "modifiers": "public", "return": "", "signature": " GtidSet(String gtids)", "full_signature": "public  GtidSet(String gtids)", "class_method_signature": "GtidSet.GtidSet(String gtids)", "testcase": false, "constructor": true}, {"identifier": "retainAll", "parameters": "(Predicate<String> sourceFilter)", "modifiers": "public", "return": "GtidSet", "signature": "GtidSet retainAll(Predicate<String> sourceFilter)", "full_signature": "public GtidSet retainAll(Predicate<String> sourceFilter)", "class_method_signature": "GtidSet.retainAll(Predicate<String> sourceFilter)", "testcase": false, "constructor": false}, {"identifier": "getUUIDSets", "parameters": "()", "modifiers": "public", "return": "Collection<UUIDSet>", "signature": "Collection<UUIDSet> getUUIDSets()", "full_signature": "public Collection<UUIDSet> getUUIDSets()", "class_method_signature": "GtidSet.getUUIDSets()", "testcase": false, "constructor": false}, {"identifier": "forServerWithId", "parameters": "(String uuid)", "modifiers": "public", "return": "UUIDSet", "signature": "UUIDSet forServerWithId(String uuid)", "full_signature": "public UUIDSet forServerWithId(String uuid)", "class_method_signature": "GtidSet.forServerWithId(String uuid)", "testcase": false, "constructor": false}, {"identifier": "isContainedWithin", "parameters": "(GtidSet other)", "modifiers": "public", "return": "boolean", "signature": "boolean isContainedWithin(GtidSet other)", "full_signature": "public boolean isContainedWithin(GtidSet other)", "class_method_signature": "GtidSet.isContainedWithin(GtidSet other)", "testcase": false, "constructor": false}, {"identifier": "with", "parameters": "(GtidSet other)", "modifiers": "public", "return": "GtidSet", "signature": "GtidSet with(GtidSet other)", "full_signature": "public GtidSet with(GtidSet other)", "class_method_signature": "GtidSet.with(GtidSet other)", "testcase": false, "constructor": false}, {"identifier": "getGtidSetBeginning", "parameters": "()", "modifiers": "public", "return": "GtidSet", "signature": "GtidSet getGtidSetBeginning()", "full_signature": "public GtidSet getGtidSetBeginning()", "class_method_signature": "GtidSet.getGtidSetBeginning()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "GtidSet.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "GtidSet.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "GtidSet.toString()", "testcase": false, "constructor": false}], "file": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/GtidSet.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String toString() {\n        List<String> gtids = new ArrayList<String>();\n        for (UUIDSet uuidSet : uuidSetsByServerId.values()) {\n            gtids.add(uuidSet.toString());\n        }\n        return String.join(\",\", gtids);\n    }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "GtidSet.toString()", "testcase": false, "constructor": false, "invocations": ["values", "add", "toString", "join"]}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}