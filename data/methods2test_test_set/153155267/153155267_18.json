{"test_class": {"identifier": "JmsSourceTest", "superclass": "extends JmsTestBase", "interfaces": "", "fields": [{"original_string": "private JMSContext jms;", "modifier": "private", "type": "JMSContext", "declarator": "jms", "var_name": "jms"}, {"original_string": "private ActiveMQJMSConnectionFactory factory;", "modifier": "private", "type": "ActiveMQJMSConnectionFactory", "declarator": "factory", "var_name": "factory"}], "file": "smallrye-reactive-messaging-jms/src/test/java/io/smallrye/reactive/messaging/jms/JmsSourceTest.java"}, "test_case": {"identifier": "testMultipleRequests", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultipleRequests() {\n        JmsSource source = new JmsSource(jms,\n                new JmsConnectorIncomingConfiguration(new MapBasedConfig.Builder().put(\"channel-name\", \"queue\").build()),\n                null, null);\n        Publisher<IncomingJmsMessage<?>> publisher = source.getSource().buildRs();\n\n        new Thread(() -> {\n            JMSContext context = factory.createContext();\n            JMSProducer producer = context.createProducer();\n            Queue q = context.createQueue(\"queue\");\n            for (int i = 0; i < 50; i++) {\n                producer.send(q, i);\n            }\n        }).start();\n\n        List<IncomingJmsMessage<?>> list = new CopyOnWriteArrayList<>();\n        AtomicReference<Subscription> upstream = new AtomicReference<>();\n        //noinspection SubscriberImplementation\n        publisher.subscribe(new Subscriber<IncomingJmsMessage<?>>() {\n            @Override\n            public void onSubscribe(Subscription s) {\n                upstream.set(s);\n            }\n\n            @Override\n            public void onNext(IncomingJmsMessage<?> incomingJmsMessage) {\n                list.add(incomingJmsMessage);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                // ignored\n            }\n\n            @Override\n            public void onComplete() {\n                // ignored\n            }\n        });\n\n        await().untilAtomic(upstream, is(notNullValue()));\n        upstream.get().request(10);\n        await().until(() -> list.size() == 10);\n        upstream.get().request(4);\n        await().until(() -> list.size() == 14);\n        upstream.get().request(Long.MAX_VALUE);\n        await().until(() -> list.size() == 50);\n        assertThat(list.stream().map(r -> (Integer) r.getPayload()).collect(Collectors.toList()))\n                .containsAll(IntStream.of(49).boxed().collect(Collectors.toList()));\n    }", "signature": "void testMultipleRequests()", "full_signature": "@Test public void testMultipleRequests()", "class_method_signature": "JmsSourceTest.testMultipleRequests()", "testcase": true, "constructor": false, "invocations": ["build", "put", "buildRs", "getSource", "start", "createContext", "createProducer", "createQueue", "send", "subscribe", "set", "add", "untilAtomic", "await", "is", "notNullValue", "request", "get", "until", "await", "size", "request", "get", "until", "await", "size", "request", "get", "until", "await", "size", "containsAll", "assertThat", "collect", "map", "stream", "getPayload", "toList", "collect", "boxed", "of", "toList"]}, "focal_class": {"identifier": "JmsSource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PublisherBuilder<IncomingJmsMessage<?>> source;", "modifier": "private final", "type": "PublisherBuilder<IncomingJmsMessage<?>>", "declarator": "source", "var_name": "source"}, {"original_string": "private final JmsPublisher publisher;", "modifier": "private final", "type": "JmsPublisher", "declarator": "publisher", "var_name": "publisher"}], "methods": [{"identifier": "JmsSource", "parameters": "(JMSContext context, JmsConnectorIncomingConfiguration config, Jsonb json, Executor executor)", "modifiers": "", "return": "", "signature": " JmsSource(JMSContext context, JmsConnectorIncomingConfiguration config, Jsonb json, Executor executor)", "full_signature": "  JmsSource(JMSContext context, JmsConnectorIncomingConfiguration config, Jsonb json, Executor executor)", "class_method_signature": "JmsSource.JmsSource(JMSContext context, JmsConnectorIncomingConfiguration config, Jsonb json, Executor executor)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "", "return": "void", "signature": "void close()", "full_signature": " void close()", "class_method_signature": "JmsSource.close()", "testcase": false, "constructor": false}, {"identifier": "getDestination", "parameters": "(JMSContext context, String name, JmsConnectorIncomingConfiguration config)", "modifiers": "private", "return": "Destination", "signature": "Destination getDestination(JMSContext context, String name, JmsConnectorIncomingConfiguration config)", "full_signature": "private Destination getDestination(JMSContext context, String name, JmsConnectorIncomingConfiguration config)", "class_method_signature": "JmsSource.getDestination(JMSContext context, String name, JmsConnectorIncomingConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "getSource", "parameters": "()", "modifiers": "", "return": "PublisherBuilder<IncomingJmsMessage<?>>", "signature": "PublisherBuilder<IncomingJmsMessage<?>> getSource()", "full_signature": " PublisherBuilder<IncomingJmsMessage<?>> getSource()", "class_method_signature": "JmsSource.getSource()", "testcase": false, "constructor": false}], "file": "smallrye-reactive-messaging-jms/src/main/java/io/smallrye/reactive/messaging/jms/JmsSource.java"}, "focal_method": {"identifier": "getSource", "parameters": "()", "modifiers": "", "return": "PublisherBuilder<IncomingJmsMessage<?>>", "body": "PublisherBuilder<IncomingJmsMessage<?>> getSource() {\n        return source;\n    }", "signature": "PublisherBuilder<IncomingJmsMessage<?>> getSource()", "full_signature": " PublisherBuilder<IncomingJmsMessage<?>> getSource()", "class_method_signature": "JmsSource.getSource()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 153155267, "url": "https://github.com/smallrye/smallrye-reactive-messaging", "stars": 45, "created": "10/15/2018 5:36:05 PM +00:00", "updates": "2020-01-26T16:55:44+00:00", "fork": "False", "license": "licensed"}}