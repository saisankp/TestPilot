{"test_class": {"identifier": "CoalescingDecoratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "vars-jpa/src/test/java/vars/query/results/CoalescingDecoratorTest.java"}, "test_case": {"identifier": "test01", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test01() {\n        Map<String, List<Object>> data = new HashMap<>();\n        data.put(\"Foo\", Lists.newArrayList(1, 1, 3, 3, 4));\n        data.put(\"Bar\", Lists.newArrayList(\"1a\", \"1b\", \"3a\", \"3b\", \"4a\"));\n        QueryResults queryResults = new QueryResults(data);\n        QueryResults cqr = CoalescingDecorator.coalesce(queryResults, \"Foo\");\n        assertEquals(cqr.getColumns(), 2);\n        assertEquals(cqr.getRows(), 3);\n    }", "signature": "void test01()", "full_signature": "@Test public void test01()", "class_method_signature": "CoalescingDecoratorTest.test01()", "testcase": true, "constructor": false, "invocations": ["put", "newArrayList", "put", "newArrayList", "coalesce", "assertEquals", "getColumns", "assertEquals", "getRows"]}, "focal_class": {"identifier": "CoalescingDecorator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "coalesce", "parameters": "(QueryResults queryResults, String keyColumnName)", "modifiers": "public static", "return": "QueryResults", "signature": "QueryResults coalesce(QueryResults queryResults, String keyColumnName)", "full_signature": "public static QueryResults coalesce(QueryResults queryResults, String keyColumnName)", "class_method_signature": "CoalescingDecorator.coalesce(QueryResults queryResults, String keyColumnName)", "testcase": false, "constructor": false}, {"identifier": "combineRows", "parameters": "(Map<String, List<Object>> rowsToCombine)", "modifiers": "private static", "return": "Map<String, Object>", "signature": "Map<String, Object> combineRows(Map<String, List<Object>> rowsToCombine)", "full_signature": "private static Map<String, Object> combineRows(Map<String, List<Object>> rowsToCombine)", "class_method_signature": "CoalescingDecorator.combineRows(Map<String, List<Object>> rowsToCombine)", "testcase": false, "constructor": false}, {"identifier": "extractRowsWithSameKey", "parameters": "(Map<String, List<Object>> resultsMap, List<Object> keyColumn, Object key)", "modifiers": "private static", "return": "Map<String, List<Object>>", "signature": "Map<String, List<Object>> extractRowsWithSameKey(Map<String, List<Object>> resultsMap, List<Object> keyColumn, Object key)", "full_signature": "private static Map<String, List<Object>> extractRowsWithSameKey(Map<String, List<Object>> resultsMap, List<Object> keyColumn, Object key)", "class_method_signature": "CoalescingDecorator.extractRowsWithSameKey(Map<String, List<Object>> resultsMap, List<Object> keyColumn, Object key)", "testcase": false, "constructor": false}, {"identifier": "newEmptyResultMap", "parameters": "(Map<String, List<Object>> resultsMap)", "modifiers": "private static", "return": "Map<String, List<Object>>", "signature": "Map<String, List<Object>> newEmptyResultMap(Map<String, List<Object>> resultsMap)", "full_signature": "private static Map<String, List<Object>> newEmptyResultMap(Map<String, List<Object>> resultsMap)", "class_method_signature": "CoalescingDecorator.newEmptyResultMap(Map<String, List<Object>> resultsMap)", "testcase": false, "constructor": false}, {"identifier": "addNewRowToMap", "parameters": "(Map<String, List<Object>> combinedMap, Map<String, Object> row)", "modifiers": "private static", "return": "void", "signature": "void addNewRowToMap(Map<String, List<Object>> combinedMap, Map<String, Object> row)", "full_signature": "private static void addNewRowToMap(Map<String, List<Object>> combinedMap, Map<String, Object> row)", "class_method_signature": "CoalescingDecorator.addNewRowToMap(Map<String, List<Object>> combinedMap, Map<String, Object> row)", "testcase": false, "constructor": false}, {"identifier": "addRowToMap", "parameters": "(Map<String, List<Object>> combinedMap, Map<String, List<Object>> row)", "modifiers": "private static", "return": "void", "signature": "void addRowToMap(Map<String, List<Object>> combinedMap, Map<String, List<Object>> row)", "full_signature": "private static void addRowToMap(Map<String, List<Object>> combinedMap, Map<String, List<Object>> row)", "class_method_signature": "CoalescingDecorator.addRowToMap(Map<String, List<Object>> combinedMap, Map<String, List<Object>> row)", "testcase": false, "constructor": false}], "file": "vars-jpa/src/main/java/vars/query/results/CoalescingDecorator.java"}, "focal_method": {"identifier": "coalesce", "parameters": "(QueryResults queryResults, String keyColumnName)", "modifiers": "public static", "return": "QueryResults", "body": "public static QueryResults coalesce(QueryResults queryResults, String keyColumnName) {\n        final Map<String, List<Object>> resultsMap = queryResults.copyData();\n        final Map<String, List<Object>> combinedMap = newEmptyResultMap(resultsMap);\n\n        List<Object>  keyColumn = queryResults.getValues(keyColumnName);\n        List<Object> distinctKeys = keyColumn.stream()\n                .distinct()\n                .collect(Collectors.toList());\n        distinctKeys.forEach(key -> {\n            //System.out.print(\"key = \" + key);\n            Map<String, List<Object>> rows = extractRowsWithSameKey(resultsMap, keyColumn, key);\n            //System.out.println(\". Found \" + rows.values().iterator().next().size() + \" rows\");\n            if (rows.values().iterator().next().size() == 1) {\n                addRowToMap(combinedMap, rows);\n            }\n            else {\n                Map<String, Object> row = combineRows(rows);\n                addNewRowToMap(combinedMap, row);\n            }\n\n        });\n\n        return new QueryResults(combinedMap);\n\n\n    }", "signature": "QueryResults coalesce(QueryResults queryResults, String keyColumnName)", "full_signature": "public static QueryResults coalesce(QueryResults queryResults, String keyColumnName)", "class_method_signature": "CoalescingDecorator.coalesce(QueryResults queryResults, String keyColumnName)", "testcase": false, "constructor": false, "invocations": ["copyData", "newEmptyResultMap", "getValues", "collect", "distinct", "stream", "toList", "forEach", "extractRowsWithSameKey", "size", "next", "iterator", "values", "addRowToMap", "combineRows", "addNewRowToMap"]}, "repository": {"repo_id": 13933675, "url": "https://github.com/hohonuuli/vars", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 18273, "license": "licensed"}}