{"test_class": {"identifier": "StatsTrendActionTest", "superclass": "extends ActionTest", "interfaces": "", "fields": [], "file": "foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/actions/StatsTrendActionTest.java"}, "test_case": {"identifier": "testStatsTrendActionTextFieldNested", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStatsTrendActionTextFieldNested() throws FoxtrotException {\n        StatsTrendRequest request = new StatsTrendRequest();\n        request.setTable(TestUtils.TEST_TABLE_NAME);\n        request.setTimestamp(\"_timestamp\");\n        request.setField(\"os\");\n        request.setNesting(ImmutableList.of(\"os\", \"device\"));\n        request.setStats(Collections.singleton(Stat.AVG));\n\n        BetweenFilter betweenFilter = new BetweenFilter();\n        betweenFilter.setFrom(1L);\n        betweenFilter.setTo(System.currentTimeMillis());\n        betweenFilter.setTemporal(true);\n        betweenFilter.setField(\"_timestamp\");\n        request.setFilters(Collections.singletonList(betweenFilter));\n\n        StatsTrendResponse statsTrendResponse = StatsTrendResponse.class.cast(getQueryExecutor().execute(request));\n        try {\n            System.out.println(Jackson.newObjectMapper()\n                                       .writerWithDefaultPrettyPrinter()\n                                       .writeValueAsString(statsTrendResponse));\n        }\n        catch (JsonProcessingException e) {\n            e.printStackTrace();\n        }\n        assertNull(statsTrendResponse.getResult());\n        assertNotNull(statsTrendResponse.getBuckets());\n        //No clean way to validate this .. gonna wing it\n        Assert.assertNull(statsTrendResponse.getBuckets().get(0).getResult());\n        Assert.assertNotNull(statsTrendResponse.getBuckets().get(0).getBuckets());\n        //android-nexus\n        Assert.assertEquals(1L,\n                            statsTrendResponse.getBuckets().get(0).getBuckets().get(0).getResult().get(0).getStats().get(\"count\"));\n        //Make sure  few of them are actually zero\n        Assert.assertEquals(0L,\n                            statsTrendResponse.getBuckets().get(0).getBuckets().get(0).getResult().get(2).getStats().get(\"count\"));\n        Assert.assertEquals(0L,\n                            statsTrendResponse.getBuckets().get(0).getBuckets().get(0).getResult().get(12).getStats().get(\"count\"));\n        //Now data should come\n        Assert.assertEquals(1L,\n                            statsTrendResponse.getBuckets().get(0).getBuckets().get(0).getResult().get(13).getStats().get(\"count\"));\n        //ios-galaxy\n        Assert.assertEquals(1L,\n                            statsTrendResponse.getBuckets().get(1).getBuckets().get(0).getResult().get(0).getStats().get(\"count\"));\n        //ios-nexus\n        Assert.assertEquals(1L,\n                            statsTrendResponse.getBuckets().get(1).getBuckets().get(1).getResult().get(0).getStats().get(\"count\"));\n        //wp\n        Assert.assertEquals(1L,\n                            statsTrendResponse.getBuckets().get(2).getBuckets().get(0).getResult().get(0).getStats().get(\"count\"));\n    }", "signature": "void testStatsTrendActionTextFieldNested()", "full_signature": "@Test public void testStatsTrendActionTextFieldNested()", "class_method_signature": "StatsTrendActionTest.testStatsTrendActionTextFieldNested()", "testcase": true, "constructor": false, "invocations": ["setTable", "setTimestamp", "setField", "setNesting", "of", "setStats", "singleton", "setFrom", "setTo", "currentTimeMillis", "setTemporal", "setField", "setFilters", "singletonList", "cast", "execute", "getQueryExecutor", "println", "writeValueAsString", "writerWithDefaultPrettyPrinter", "newObjectMapper", "printStackTrace", "assertNull", "getResult", "assertNotNull", "getBuckets", "assertNull", "getResult", "get", "getBuckets", "assertNotNull", "getBuckets", "get", "getBuckets", "assertEquals", "get", "getStats", "get", "getResult", "get", "getBuckets", "get", "getBuckets", "assertEquals", "get", "getStats", "get", "getResult", "get", "getBuckets", "get", "getBuckets", "assertEquals", "get", "getStats", "get", "getResult", "get", "getBuckets", "get", "getBuckets", "assertEquals", "get", "getStats", "get", "getResult", "get", "getBuckets", "get", "getBuckets", "assertEquals", "get", "getStats", "get", "getResult", "get", "getBuckets", "get", "getBuckets", "assertEquals", "get", "getStats", "get", "getResult", "get", "getBuckets", "get", "getBuckets", "assertEquals", "get", "getStats", "get", "getResult", "get", "getBuckets", "get", "getBuckets"]}, "focal_class": {"identifier": "StatsTrendAction", "superclass": "extends Action<StatsTrendRequest>", "interfaces": "", "fields": [{"original_string": "private final ElasticsearchTuningConfig elasticsearchTuningConfig;", "modifier": "private final", "type": "ElasticsearchTuningConfig", "declarator": "elasticsearchTuningConfig", "var_name": "elasticsearchTuningConfig"}], "methods": [{"identifier": "StatsTrendAction", "parameters": "(StatsTrendRequest parameter, AnalyticsLoader analyticsLoader)", "modifiers": "public", "return": "", "signature": " StatsTrendAction(StatsTrendRequest parameter, AnalyticsLoader analyticsLoader)", "full_signature": "public  StatsTrendAction(StatsTrendRequest parameter, AnalyticsLoader analyticsLoader)", "class_method_signature": "StatsTrendAction.StatsTrendAction(StatsTrendRequest parameter, AnalyticsLoader analyticsLoader)", "testcase": false, "constructor": true}, {"identifier": "preprocess", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void preprocess()", "full_signature": "@Override public void preprocess()", "class_method_signature": "StatsTrendAction.preprocess()", "testcase": false, "constructor": false}, {"identifier": "getMetricKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMetricKey()", "full_signature": "@Override public String getMetricKey()", "class_method_signature": "StatsTrendAction.getMetricKey()", "testcase": false, "constructor": false}, {"identifier": "getRequestCacheKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRequestCacheKey()", "full_signature": "@Override public String getRequestCacheKey()", "class_method_signature": "StatsTrendAction.getRequestCacheKey()", "testcase": false, "constructor": false}, {"identifier": "validateImpl", "parameters": "(StatsTrendRequest parameter)", "modifiers": "@Override public", "return": "void", "signature": "void validateImpl(StatsTrendRequest parameter)", "full_signature": "@Override public void validateImpl(StatsTrendRequest parameter)", "class_method_signature": "StatsTrendAction.validateImpl(StatsTrendRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(StatsTrendRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse execute(StatsTrendRequest parameter)", "full_signature": "@Override public ActionResponse execute(StatsTrendRequest parameter)", "class_method_signature": "StatsTrendAction.execute(StatsTrendRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getRequestBuilder", "parameters": "(StatsTrendRequest parameter)", "modifiers": "@Override public", "return": "SearchRequestBuilder", "signature": "SearchRequestBuilder getRequestBuilder(StatsTrendRequest parameter)", "full_signature": "@Override public SearchRequestBuilder getRequestBuilder(StatsTrendRequest parameter)", "class_method_signature": "StatsTrendAction.getRequestBuilder(StatsTrendRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getResponse", "parameters": "(org.elasticsearch.action.ActionResponse response, StatsTrendRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse getResponse(org.elasticsearch.action.ActionResponse response, StatsTrendRequest parameter)", "full_signature": "@Override public ActionResponse getResponse(org.elasticsearch.action.ActionResponse response, StatsTrendRequest parameter)", "class_method_signature": "StatsTrendAction.getResponse(org.elasticsearch.action.ActionResponse response, StatsTrendRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "buildAggregation", "parameters": "(StatsTrendRequest request, String table)", "modifiers": "private", "return": "AbstractAggregationBuilder", "signature": "AbstractAggregationBuilder buildAggregation(StatsTrendRequest request, String table)", "full_signature": "private AbstractAggregationBuilder buildAggregation(StatsTrendRequest request, String table)", "class_method_signature": "StatsTrendAction.buildAggregation(StatsTrendRequest request, String table)", "testcase": false, "constructor": false}, {"identifier": "buildResponse", "parameters": "(StatsTrendRequest request, Aggregations aggregations)", "modifiers": "private", "return": "StatsTrendResponse", "signature": "StatsTrendResponse buildResponse(StatsTrendRequest request, Aggregations aggregations)", "full_signature": "private StatsTrendResponse buildResponse(StatsTrendRequest request, Aggregations aggregations)", "class_method_signature": "StatsTrendAction.buildResponse(StatsTrendRequest request, Aggregations aggregations)", "testcase": false, "constructor": false}, {"identifier": "buildNestedTrendStats", "parameters": "(\n            List<String> nesting,\n            Aggregations aggregations)", "modifiers": "private", "return": "List<BucketResponse<List<StatsTrendValue>>>", "signature": "List<BucketResponse<List<StatsTrendValue>>> buildNestedTrendStats(\n            List<String> nesting,\n            Aggregations aggregations)", "full_signature": "private List<BucketResponse<List<StatsTrendValue>>> buildNestedTrendStats(\n            List<String> nesting,\n            Aggregations aggregations)", "class_method_signature": "StatsTrendAction.buildNestedTrendStats(\n            List<String> nesting,\n            Aggregations aggregations)", "testcase": false, "constructor": false}, {"identifier": "buildStatsTrendValue", "parameters": "(String field, Aggregations aggregations)", "modifiers": "private", "return": "List<StatsTrendValue>", "signature": "List<StatsTrendValue> buildStatsTrendValue(String field, Aggregations aggregations)", "full_signature": "private List<StatsTrendValue> buildStatsTrendValue(String field, Aggregations aggregations)", "class_method_signature": "StatsTrendAction.buildStatsTrendValue(String field, Aggregations aggregations)", "testcase": false, "constructor": false}, {"identifier": "getDefaultTimeSpan", "parameters": "()", "modifiers": "@Override protected", "return": "Filter", "signature": "Filter getDefaultTimeSpan()", "full_signature": "@Override protected Filter getDefaultTimeSpan()", "class_method_signature": "StatsTrendAction.getDefaultTimeSpan()", "testcase": false, "constructor": false}], "file": "foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/actions/StatsTrendAction.java"}, "focal_method": {"identifier": "execute", "parameters": "(StatsTrendRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "body": "@Override\n    public ActionResponse execute(StatsTrendRequest parameter) {\n        SearchRequestBuilder searchRequestBuilder = getRequestBuilder(parameter);\n\n        try {\n            SearchResponse response = searchRequestBuilder.execute()\n                    .actionGet(getGetQueryTimeout());\n            return getResponse(response, parameter);\n        }\n        catch (ElasticsearchException e) {\n            throw FoxtrotExceptions.createQueryExecutionException(parameter, e);\n        }\n    }", "signature": "ActionResponse execute(StatsTrendRequest parameter)", "full_signature": "@Override public ActionResponse execute(StatsTrendRequest parameter)", "class_method_signature": "StatsTrendAction.execute(StatsTrendRequest parameter)", "testcase": false, "constructor": false, "invocations": ["getRequestBuilder", "actionGet", "execute", "getGetQueryTimeout", "getResponse", "createQueryExecutionException"]}, "repository": {"repo_id": 19980663, "url": "https://github.com/Flipkart/foxtrot", "stars": 22, "created": "5/20/2014 12:52:55 PM +00:00", "updates": "2020-01-07T07:05:03+00:00", "fork": "False", "license": "licensed"}}