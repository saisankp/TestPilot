{"test_class": {"identifier": "BannerManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/core/src/test/java/org/apache/tamaya/core/internal/BannerManagerTest.java"}, "test_case": {"identifier": "valueLoggerSendsBannerToSystemOut", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void valueLoggerSendsBannerToSystemOut() {\n\n        SecurityManager sm = new SecurityManager();\n        AccessControlContext con = AccessController.getContext();\n\n        Permission p = new RuntimePermission(\"setIO\");\n\n        /*\n         * Here we check the precondition for this unit test\n         * and the correct setup of the test environment\n         * The JVM must have been started with\n         * -Djava.security.policy=<path_to_core_module</src/test/resources/java-security.policy\n         */\n        sm.checkPermission(p, con);\n\n        PrintStream standard = System.out;\n        PrintStream printStream = Mockito.mock(PrintStream.class);\n\n        System.setOut(printStream);\n        standard.println(\"Changed stream for STDOUT successfully\");\n\n        try {\n            BannerManager bm = new BannerManager(\"LOGGER\");\n            bm.outputBanner();\n\n        } finally {\n            System.setOut(standard);\n        }\n\n        Mockito.verifyZeroInteractions(printStream);\n    }", "signature": "void valueLoggerSendsBannerToSystemOut()", "full_signature": "@Test public void valueLoggerSendsBannerToSystemOut()", "class_method_signature": "BannerManagerTest.valueLoggerSendsBannerToSystemOut()", "testcase": true, "constructor": false, "invocations": ["getContext", "checkPermission", "mock", "setOut", "println", "outputBanner", "setOut", "verifyZeroInteractions"]}, "focal_class": {"identifier": "BannerManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String BANNER_RESOURCE_PATH = \"/tamaya-banner.txt\";", "modifier": "protected static final", "type": "String", "declarator": "BANNER_RESOURCE_PATH = \"/tamaya-banner.txt\"", "var_name": "BANNER_RESOURCE_PATH"}, {"original_string": "private BannerTarget bannerTarget;", "modifier": "private", "type": "BannerTarget", "declarator": "bannerTarget", "var_name": "bannerTarget"}], "methods": [{"identifier": "BannerManager", "parameters": "(String value)", "modifiers": "public", "return": "", "signature": " BannerManager(String value)", "full_signature": "public  BannerManager(String value)", "class_method_signature": "BannerManager.BannerManager(String value)", "testcase": false, "constructor": true}, {"identifier": "outputBanner", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void outputBanner()", "full_signature": "public void outputBanner()", "class_method_signature": "BannerManager.outputBanner()", "testcase": false, "constructor": false}], "file": "code/core/src/main/java/org/apache/tamaya/core/internal/BannerManager.java"}, "focal_method": {"identifier": "outputBanner", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void outputBanner() {\n        BannerPrinter bp = new SilentBannerPrinter();\n\n        switch (bannerTarget) {\n            case CONSOLE:\n                bp = new ConsoleBannerPrinter();\n                break;\n            case LOGGER:\n                bp = new LoggingBannerPrinter();\n                break;\n            case OFF:\n            default:\n                break;\n        }\n\n        bp.outputBanner();\n    }", "signature": "void outputBanner()", "full_signature": "public void outputBanner()", "class_method_signature": "BannerManager.outputBanner()", "testcase": false, "constructor": false, "invocations": ["outputBanner"]}, "repository": {"repo_id": 26951044, "url": "https://github.com/apache/incubator-tamaya", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 44, "size": 7630, "license": "licensed"}}