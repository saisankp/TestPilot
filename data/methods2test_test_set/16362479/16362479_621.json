{"test_class": {"identifier": "ShardStrategyFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ShardStrategyFactory factory;", "modifier": "private", "type": "ShardStrategyFactory", "declarator": "factory", "var_name": "factory"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/shardstrategy/ShardStrategyFactoryTest.java"}, "test_case": {"identifier": "testGetStrategyForKnownModuleName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetStrategyForKnownModuleName() {\n        ShardStrategy strategy = factory.getStrategy(YangInstanceIdentifier.of(CarsModel.BASE_QNAME));\n        assertTrue(strategy instanceof ModuleShardStrategy);\n    }", "signature": "void testGetStrategyForKnownModuleName()", "full_signature": "@Test public void testGetStrategyForKnownModuleName()", "class_method_signature": "ShardStrategyFactoryTest.testGetStrategyForKnownModuleName()", "testcase": true, "constructor": false, "invocations": ["getStrategy", "of", "assertTrue"]}, "focal_class": {"identifier": "ShardStrategyFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String UNKNOWN_MODULE_NAME = \"unknown\";", "modifier": "private static final", "type": "String", "declarator": "UNKNOWN_MODULE_NAME = \"unknown\"", "var_name": "UNKNOWN_MODULE_NAME"}, {"original_string": "private final Configuration configuration;", "modifier": "private final", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final LogicalDatastoreType logicalStoreType;", "modifier": "private final", "type": "LogicalDatastoreType", "declarator": "logicalStoreType", "var_name": "logicalStoreType"}], "methods": [{"identifier": "ShardStrategyFactory", "parameters": "(final Configuration configuration, final LogicalDatastoreType logicalStoreType)", "modifiers": "public", "return": "", "signature": " ShardStrategyFactory(final Configuration configuration, final LogicalDatastoreType logicalStoreType)", "full_signature": "public  ShardStrategyFactory(final Configuration configuration, final LogicalDatastoreType logicalStoreType)", "class_method_signature": "ShardStrategyFactory.ShardStrategyFactory(final Configuration configuration, final LogicalDatastoreType logicalStoreType)", "testcase": false, "constructor": true}, {"identifier": "getStrategy", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "public", "return": "ShardStrategy", "signature": "ShardStrategy getStrategy(final YangInstanceIdentifier path)", "full_signature": "public ShardStrategy getStrategy(final YangInstanceIdentifier path)", "class_method_signature": "ShardStrategyFactory.getStrategy(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "newShardStrategyInstance", "parameters": "(final String moduleName, final String strategyName,\n            final Configuration configuration)", "modifiers": "public static", "return": "ShardStrategy", "signature": "ShardStrategy newShardStrategyInstance(final String moduleName, final String strategyName,\n            final Configuration configuration)", "full_signature": "public static ShardStrategy newShardStrategyInstance(final String moduleName, final String strategyName,\n            final Configuration configuration)", "class_method_signature": "ShardStrategyFactory.newShardStrategyInstance(final String moduleName, final String strategyName,\n            final Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "getModuleName", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "private", "return": "String", "signature": "String getModuleName(final YangInstanceIdentifier path)", "full_signature": "private String getModuleName(final YangInstanceIdentifier path)", "class_method_signature": "ShardStrategyFactory.getModuleName(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/shardstrategy/ShardStrategyFactory.java"}, "focal_method": {"identifier": "getStrategy", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "public", "return": "ShardStrategy", "body": "public ShardStrategy getStrategy(final YangInstanceIdentifier path) {\n        // try with the legacy module based shard mapping\n        final String moduleName = getModuleName(requireNonNull(path, \"path should not be null\"));\n        final ShardStrategy shardStrategy = configuration.getStrategyForModule(moduleName);\n        if (shardStrategy == null) {\n            // retry with prefix based sharding\n            final ShardStrategy strategyForPrefix =\n                    configuration.getStrategyForPrefix(new DOMDataTreeIdentifier(logicalStoreType, path));\n            if (strategyForPrefix == null) {\n                return DefaultShardStrategy.getInstance();\n            }\n            return strategyForPrefix;\n        }\n\n        return shardStrategy;\n    }", "signature": "ShardStrategy getStrategy(final YangInstanceIdentifier path)", "full_signature": "public ShardStrategy getStrategy(final YangInstanceIdentifier path)", "class_method_signature": "ShardStrategyFactory.getStrategy(final YangInstanceIdentifier path)", "testcase": false, "constructor": false, "invocations": ["getModuleName", "requireNonNull", "getStrategyForModule", "getStrategyForPrefix", "getInstance"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}