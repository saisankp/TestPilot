{"test_class": {"identifier": "EntityUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static TemporaryFolder testFolder = new TemporaryFolder();", "modifier": "@ClassRule\n    public static", "type": "TemporaryFolder", "declarator": "testFolder = new TemporaryFolder()", "var_name": "testFolder"}, {"original_string": "private JCodeModel jCodeModel = new JCodeModel();", "modifier": "private", "type": "JCodeModel", "declarator": "jCodeModel = new JCodeModel()", "var_name": "jCodeModel"}], "file": "neo4j/src/test/java/eu/drus/jpa/unit/neo4j/dataset/EntityUtilsTest.java"}, "test_case": {"identifier": "testGetNamesOfIdPropertiesFromAClassHierarchyHavingAMethodAnnotatedWithEmbeddedId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetNamesOfIdPropertiesFromAClassHierarchyHavingAMethodAnnotatedWithEmbeddedId() throws Exception {\n        // GIVEN\n        final String simpleClassNameBase = \"EntityClass\";\n        final String simpleClassNameB = \"SubEntityClass\";\n        final String compositeIdPropertyName = \"compositeKey\";\n        final String id1PropertyName = \"key1\";\n        final String id2PropertyName = \"key2\";\n\n        final JPackage jp = jCodeModel.rootPackage();\n\n        final JDefinedClass jIdTypeClass = jp._class(JMod.PUBLIC, \"IdType\");\n        jIdTypeClass.annotate(Embeddable.class);\n        jIdTypeClass.field(JMod.PRIVATE, Integer.class, id1PropertyName);\n        jIdTypeClass.field(JMod.PRIVATE, String.class, id2PropertyName);\n\n        final JDefinedClass jBaseClass = jp._class(JMod.PUBLIC, simpleClassNameBase);\n        jBaseClass.annotate(Entity.class);\n        jBaseClass.annotate(Inheritance.class).param(\"strategy\", InheritanceType.TABLE_PER_CLASS);\n        final JMethod method = jBaseClass.method(JMod.PUBLIC, jIdTypeClass, \"getCompositeKey\");\n        method.annotate(EmbeddedId.class);\n        method.body()._return(JExpr._null());\n\n        final JDefinedClass jSubclass = jp._class(JMod.PUBLIC, simpleClassNameB)._extends(jBaseClass);\n        jSubclass.annotate(Entity.class);\n\n        buildModel(testFolder.getRoot(), jCodeModel);\n\n        compileModel(testFolder.getRoot());\n\n        final Class<?> entityClass = loadClass(testFolder.getRoot(), jSubclass.name());\n\n        // WHEN\n        final List<String> namesOfIdProperties = EntityUtils.getNamesOfIdProperties(entityClass);\n\n        // THEN\n        assertThat(namesOfIdProperties.size(), equalTo(2));\n        assertThat(namesOfIdProperties,\n                hasItems(compositeIdPropertyName + \".\" + id1PropertyName, compositeIdPropertyName + \".\" + id2PropertyName));\n    }", "signature": "void testGetNamesOfIdPropertiesFromAClassHierarchyHavingAMethodAnnotatedWithEmbeddedId()", "full_signature": "@Test public void testGetNamesOfIdPropertiesFromAClassHierarchyHavingAMethodAnnotatedWithEmbeddedId()", "class_method_signature": "EntityUtilsTest.testGetNamesOfIdPropertiesFromAClassHierarchyHavingAMethodAnnotatedWithEmbeddedId()", "testcase": true, "constructor": false, "invocations": ["rootPackage", "_class", "annotate", "field", "field", "_class", "annotate", "param", "annotate", "method", "annotate", "_return", "body", "_null", "_extends", "_class", "annotate", "buildModel", "getRoot", "compileModel", "getRoot", "loadClass", "getRoot", "name", "getNamesOfIdProperties", "assertThat", "size", "equalTo", "assertThat", "hasItems"]}, "focal_class": {"identifier": "EntityUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "EntityUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " EntityUtils()", "full_signature": "private  EntityUtils()", "class_method_signature": "EntityUtils.EntityUtils()", "testcase": false, "constructor": true}, {"identifier": "getNamesOfIdProperties", "parameters": "(final Class<?> clazz)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getNamesOfIdProperties(final Class<?> clazz)", "full_signature": "public static List<String> getNamesOfIdProperties(final Class<?> clazz)", "class_method_signature": "EntityUtils.getNamesOfIdProperties(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "collectIdNamesFromMethods", "parameters": "(final List<String> idList, final Class<?> c)", "modifiers": "private static", "return": "void", "signature": "void collectIdNamesFromMethods(final List<String> idList, final Class<?> c)", "full_signature": "private static void collectIdNamesFromMethods(final List<String> idList, final Class<?> c)", "class_method_signature": "EntityUtils.collectIdNamesFromMethods(final List<String> idList, final Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "collectIdNamesFromFields", "parameters": "(final List<String> idList, final Class<?> clazz)", "modifiers": "private static", "return": "void", "signature": "void collectIdNamesFromFields(final List<String> idList, final Class<?> clazz)", "full_signature": "private static void collectIdNamesFromFields(final List<String> idList, final Class<?> clazz)", "class_method_signature": "EntityUtils.collectIdNamesFromFields(final List<String> idList, final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getPropertyName", "parameters": "(final Field field)", "modifiers": "private static", "return": "String", "signature": "String getPropertyName(final Field field)", "full_signature": "private static String getPropertyName(final Field field)", "class_method_signature": "EntityUtils.getPropertyName(final Field field)", "testcase": false, "constructor": false}, {"identifier": "getEntityClassFromNodeLabels", "parameters": "(final List<String> labels, final List<Class<?>> classes)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getEntityClassFromNodeLabels(final List<String> labels, final List<Class<?>> classes)", "full_signature": "public static Class<?> getEntityClassFromNodeLabels(final List<String> labels, final List<Class<?>> classes)", "class_method_signature": "EntityUtils.getEntityClassFromNodeLabels(final List<String> labels, final List<Class<?>> classes)", "testcase": false, "constructor": false}], "file": "neo4j/src/main/java/eu/drus/jpa/unit/neo4j/dataset/EntityUtils.java"}, "focal_method": {"identifier": "getNamesOfIdProperties", "parameters": "(final Class<?> clazz)", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> getNamesOfIdProperties(final Class<?> clazz) {\n        final List<String> idList = new ArrayList<>();\n\n        for (Class<?> c = clazz; c != null; c = c.getSuperclass()) {\n            collectIdNamesFromFields(idList, c);\n            collectIdNamesFromMethods(idList, c);\n        }\n\n        return idList;\n    }", "signature": "List<String> getNamesOfIdProperties(final Class<?> clazz)", "full_signature": "public static List<String> getNamesOfIdProperties(final Class<?> clazz)", "class_method_signature": "EntityUtils.getNamesOfIdProperties(final Class<?> clazz)", "testcase": false, "constructor": false, "invocations": ["getSuperclass", "collectIdNamesFromFields", "collectIdNamesFromMethods"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}