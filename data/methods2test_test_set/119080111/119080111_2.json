{"test_class": {"identifier": "EpsilonSamplingSelectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "opt4j-optimizers/src/test/java/org/opt4j/optimizers/ea/aeseh/EpsilonSamplingSelectorTest.java"}, "test_case": {"identifier": "testGetLames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetLames() {\n\t\tESamplingSurvivorGeneration survivorGeneration = mock(ESamplingSurvivorGenerationBasic.class);\n\t\tEpsilonSamplingSelector selector = new EpsilonSamplingSelector(survivorGeneration);\n\n\t\tIndividual first = mock(Individual.class);\n\t\tIndividual second = mock(Individual.class);\n\t\tIndividual third = mock(Individual.class);\n\n\t\tSet<Individual> survivors = new HashSet<>();\n\t\tsurvivors.add(first);\n\t\tsurvivors.add(second);\n\n\t\tPopulation population = new Population();\n\t\tpopulation.add(first);\n\t\tpopulation.add(second);\n\t\tpopulation.add(third);\n\n\t\twhen(survivorGeneration.getSurvivors(population, 2)).thenReturn(survivors);\n\t\tCollection<Individual> result = selector.getLames(1, population);\n\t\tverify(survivorGeneration).getSurvivors(population, 2);\n\t\tassertEquals(1, result.size());\n\t\tassertTrue(result.contains(third));\n\t}", "signature": "void testGetLames()", "full_signature": "@Test public void testGetLames()", "class_method_signature": "EpsilonSamplingSelectorTest.testGetLames()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "add", "add", "add", "add", "add", "thenReturn", "when", "getSurvivors", "getLames", "getSurvivors", "verify", "assertEquals", "size", "assertTrue", "contains"]}, "focal_class": {"identifier": "EpsilonSamplingSelector", "superclass": "", "interfaces": "implements Selector", "fields": [{"original_string": "protected final ESamplingSurvivorGeneration survivorGeneration;", "modifier": "protected final", "type": "ESamplingSurvivorGeneration", "declarator": "survivorGeneration", "var_name": "survivorGeneration"}], "methods": [{"identifier": "EpsilonSamplingSelector", "parameters": "(ESamplingSurvivorGeneration survivorGeneration)", "modifiers": "@Inject public", "return": "", "signature": " EpsilonSamplingSelector(ESamplingSurvivorGeneration survivorGeneration)", "full_signature": "@Inject public  EpsilonSamplingSelector(ESamplingSurvivorGeneration survivorGeneration)", "class_method_signature": "EpsilonSamplingSelector.EpsilonSamplingSelector(ESamplingSurvivorGeneration survivorGeneration)", "testcase": false, "constructor": true}, {"identifier": "getParents", "parameters": "(int mu, Collection<Individual> population)", "modifiers": "@Override public", "return": "Collection<Individual>", "signature": "Collection<Individual> getParents(int mu, Collection<Individual> population)", "full_signature": "@Override public Collection<Individual> getParents(int mu, Collection<Individual> population)", "class_method_signature": "EpsilonSamplingSelector.getParents(int mu, Collection<Individual> population)", "testcase": false, "constructor": false}, {"identifier": "getLames", "parameters": "(int lambda, Collection<Individual> population)", "modifiers": "@Override public", "return": "Collection<Individual>", "signature": "Collection<Individual> getLames(int lambda, Collection<Individual> population)", "full_signature": "@Override public Collection<Individual> getLames(int lambda, Collection<Individual> population)", "class_method_signature": "EpsilonSamplingSelector.getLames(int lambda, Collection<Individual> population)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(int maxsize)", "modifiers": "@Override public", "return": "void", "signature": "void init(int maxsize)", "full_signature": "@Override public void init(int maxsize)", "class_method_signature": "EpsilonSamplingSelector.init(int maxsize)", "testcase": false, "constructor": false}], "file": "opt4j-optimizers/src/main/java/org/opt4j/optimizers/ea/aeseh/EpsilonSamplingSelector.java"}, "focal_method": {"identifier": "getLames", "parameters": "(int lambda, Collection<Individual> population)", "modifiers": "@Override public", "return": "Collection<Individual>", "body": "@Override\n\tpublic Collection<Individual> getLames(int lambda, Collection<Individual> population) {\n\t\tint survivorNumber = population.size() - lambda;\n\t\tSet<Individual> survivors = survivorGeneration.getSurvivors(population, survivorNumber);\n\t\tSet<Individual> lames = new HashSet<>(population);\n\t\tlames.removeAll(survivors);\n\t\treturn lames;\n\t}", "signature": "Collection<Individual> getLames(int lambda, Collection<Individual> population)", "full_signature": "@Override public Collection<Individual> getLames(int lambda, Collection<Individual> population)", "class_method_signature": "EpsilonSamplingSelector.getLames(int lambda, Collection<Individual> population)", "testcase": false, "constructor": false, "invocations": ["size", "getSurvivors", "removeAll"]}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}