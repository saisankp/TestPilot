{"test_class": {"identifier": "DubboParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock Invocation invocation;", "modifier": "@Mock", "type": "Invocation", "declarator": "invocation", "var_name": "invocation"}, {"original_string": "@Mock Invoker invoker;", "modifier": "@Mock", "type": "Invoker", "declarator": "invoker", "var_name": "invoker"}], "file": "instrumentation/dubbo-rpc/src/test/java/brave/dubbo/rpc/DubboParserTest.java"}, "test_case": {"identifier": "method", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void method() {\n    when(invocation.getMethodName()).thenReturn(\"sayHello\");\n\n    assertThat(DubboParser.method(invocation))\n        .isEqualTo(\"sayHello\");\n  }", "signature": "void method()", "full_signature": "@Test public void method()", "class_method_signature": "DubboParserTest.method()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getMethodName", "isEqualTo", "assertThat", "method"]}, "focal_class": {"identifier": "DubboParser", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "method", "parameters": "(Invocation invocation)", "modifiers": "static @Nullable", "return": "String", "signature": "String method(Invocation invocation)", "full_signature": "static @Nullable String method(Invocation invocation)", "class_method_signature": "DubboParser.method(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "service", "parameters": "(Invoker<?> invoker)", "modifiers": "@Nullable static", "return": "String", "signature": "String service(Invoker<?> invoker)", "full_signature": "@Nullable static String service(Invoker<?> invoker)", "class_method_signature": "DubboParser.service(Invoker<?> invoker)", "testcase": false, "constructor": false}, {"identifier": "parseRemoteIpAndPort", "parameters": "(Span span)", "modifiers": "static", "return": "boolean", "signature": "boolean parseRemoteIpAndPort(Span span)", "full_signature": "static boolean parseRemoteIpAndPort(Span span)", "class_method_signature": "DubboParser.parseRemoteIpAndPort(Span span)", "testcase": false, "constructor": false}, {"identifier": "errorCode", "parameters": "(Throwable error)", "modifiers": "@Nullable static", "return": "String", "signature": "String errorCode(Throwable error)", "full_signature": "@Nullable static String errorCode(Throwable error)", "class_method_signature": "DubboParser.errorCode(Throwable error)", "testcase": false, "constructor": false}], "file": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java"}, "focal_method": {"identifier": "method", "parameters": "(Invocation invocation)", "modifiers": "static @Nullable", "return": "String", "body": "static @Nullable String method(Invocation invocation) {\n    String methodName = invocation.getMethodName();\n    if (\"$invoke\".equals(methodName)) {\n      Object[] arguments = invocation.getArguments();\n      if (arguments != null && arguments.length > 0 && arguments[0] instanceof String) {\n        methodName = (String) arguments[0];\n      } else {\n        methodName = null;\n      }\n    }\n    return methodName != null && !methodName.isEmpty() ? methodName : null;\n  }", "signature": "String method(Invocation invocation)", "full_signature": "static @Nullable String method(Invocation invocation)", "class_method_signature": "DubboParser.method(Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["getMethodName", "equals", "getArguments", "isEmpty"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}