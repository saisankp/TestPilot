{"test_class": {"identifier": "StubDescriptorReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private StubDescriptorJsonFactory stubConfigurationJsonBuilder;", "modifier": "@Mock\n    private", "type": "StubDescriptorJsonFactory", "declarator": "stubConfigurationJsonBuilder", "var_name": "stubConfigurationJsonBuilder"}, {"original_string": "@Mock\n    private RoutingService routingService;", "modifier": "@Mock\n    private", "type": "RoutingService", "declarator": "routingService", "var_name": "routingService"}, {"original_string": "@Mock\n    private SequenceDescriptorHolder sequenceDescriptorHolder;", "modifier": "@Mock\n    private", "type": "SequenceDescriptorHolder", "declarator": "sequenceDescriptorHolder", "var_name": "sequenceDescriptorHolder"}, {"original_string": "@Mock\n    private NewStubDescriptorJsonCommandFactory newStubDescriptorJsonCommandFactory;", "modifier": "@Mock\n    private", "type": "NewStubDescriptorJsonCommandFactory", "declarator": "newStubDescriptorJsonCommandFactory", "var_name": "newStubDescriptorJsonCommandFactory"}, {"original_string": "@Mock\n    private ServiceMap serviceMap;", "modifier": "@Mock\n    private", "type": "ServiceMap", "declarator": "serviceMap", "var_name": "serviceMap"}, {"original_string": "@InjectMocks\n    private StubDescriptorReader underTest;", "modifier": "@InjectMocks\n    private", "type": "StubDescriptorReader", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private NewStubDescriptorCommand command;", "modifier": "@Mock\n    private", "type": "NewStubDescriptorCommand", "declarator": "command", "var_name": "command"}], "file": "wilma-application/modules/wilma-engine/src/test/java/com/epam/wilma/engine/initializer/StubDescriptorReaderTest.java"}, "test_case": {"identifier": "testLoadSpecificStubDescriptors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadSpecificStubDescriptors() throws FileNotFoundException, ClassNotFoundException {\n        //GIVEN\n        List<String> paths = new ArrayList<>();\n        paths.add(\"test\");\n        given(newStubDescriptorJsonCommandFactory.create(\"test\", stubConfigurationJsonBuilder, sequenceDescriptorHolder)).willReturn(command);\n        //WHEN\n        underTest.loadSpecificStubDescriptors(paths);\n        //THEN\n        verify(routingService, times(1)).performModification(command);\n    }", "signature": "void testLoadSpecificStubDescriptors()", "full_signature": "@Test public void testLoadSpecificStubDescriptors()", "class_method_signature": "StubDescriptorReaderTest.testLoadSpecificStubDescriptors()", "testcase": true, "constructor": false, "invocations": ["add", "willReturn", "given", "create", "loadSpecificStubDescriptors", "performModification", "verify", "times"]}, "focal_class": {"identifier": "StubDescriptorReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private StubDescriptorJsonFactory stubConfigurationJsonBuilder;", "modifier": "@Autowired\n    private", "type": "StubDescriptorJsonFactory", "declarator": "stubConfigurationJsonBuilder", "var_name": "stubConfigurationJsonBuilder"}, {"original_string": "@Autowired\n    private RoutingService routingService;", "modifier": "@Autowired\n    private", "type": "RoutingService", "declarator": "routingService", "var_name": "routingService"}, {"original_string": "@Autowired\n    private SequenceDescriptorHolder sequenceDescriptorHolder;", "modifier": "@Autowired\n    private", "type": "SequenceDescriptorHolder", "declarator": "sequenceDescriptorHolder", "var_name": "sequenceDescriptorHolder"}, {"original_string": "@Autowired\n    private NewStubDescriptorJsonCommandFactory newStubDescriptorJsonCommandFactory;", "modifier": "@Autowired\n    private", "type": "NewStubDescriptorJsonCommandFactory", "declarator": "newStubDescriptorJsonCommandFactory", "var_name": "newStubDescriptorJsonCommandFactory"}, {"original_string": "@Autowired\n    private ServiceMap serviceMap;", "modifier": "@Autowired\n    private", "type": "ServiceMap", "declarator": "serviceMap", "var_name": "serviceMap"}], "methods": [{"identifier": "loadSpecificStubDescriptors", "parameters": "(final List<String> filePaths)", "modifiers": "public", "return": "void", "signature": "void loadSpecificStubDescriptors(final List<String> filePaths)", "full_signature": "public void loadSpecificStubDescriptors(final List<String> filePaths)", "class_method_signature": "StubDescriptorReader.loadSpecificStubDescriptors(final List<String> filePaths)", "testcase": false, "constructor": false}, {"identifier": "createStubDescriptor", "parameters": "(final String jsonFilePath)", "modifiers": "private", "return": "void", "signature": "void createStubDescriptor(final String jsonFilePath)", "full_signature": "private void createStubDescriptor(final String jsonFilePath)", "class_method_signature": "StubDescriptorReader.createStubDescriptor(final String jsonFilePath)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-engine/src/main/java/com/epam/wilma/engine/initializer/StubDescriptorReader.java"}, "focal_method": {"identifier": "loadSpecificStubDescriptors", "parameters": "(final List<String> filePaths)", "modifiers": "public", "return": "void", "body": "public void loadSpecificStubDescriptors(final List<String> filePaths) {\n        for (String jsonFilePath : filePaths) {\n            createStubDescriptor(jsonFilePath);\n        }\n        serviceMap.detectServices();\n    }", "signature": "void loadSpecificStubDescriptors(final List<String> filePaths)", "full_signature": "public void loadSpecificStubDescriptors(final List<String> filePaths)", "class_method_signature": "StubDescriptorReader.loadSpecificStubDescriptors(final List<String> filePaths)", "testcase": false, "constructor": false, "invocations": ["createStubDescriptor", "detectServices"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}