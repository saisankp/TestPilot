{"test_class": {"identifier": "TestTypeUtils", "superclass": "", "interfaces": "", "fields": [], "file": "firefly-common/src/test/java/com/fireflysource/common/object/TestTypeUtils.java"}, "test_case": {"identifier": "convertHexDigitTest", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void convertHexDigitTest() {\n        assertEquals((byte) 0, TypeUtils.convertHexDigit((byte) '0'));\n        assertEquals((byte) 9, TypeUtils.convertHexDigit((byte) '9'));\n        assertEquals((byte) 10, TypeUtils.convertHexDigit((byte) 'a'));\n        assertEquals((byte) 10, TypeUtils.convertHexDigit((byte) 'A'));\n        assertEquals((byte) 15, TypeUtils.convertHexDigit((byte) 'f'));\n        assertEquals((byte) 15, TypeUtils.convertHexDigit((byte) 'F'));\n\n        assertEquals(0, TypeUtils.convertHexDigit((int) '0'));\n        assertEquals(9, TypeUtils.convertHexDigit((int) '9'));\n        assertEquals(10, TypeUtils.convertHexDigit((int) 'a'));\n        assertEquals(10, TypeUtils.convertHexDigit((int) 'A'));\n        assertEquals(15, TypeUtils.convertHexDigit((int) 'f'));\n        assertEquals(15, TypeUtils.convertHexDigit((int) 'F'));\n    }", "signature": "void convertHexDigitTest()", "full_signature": "@Test void convertHexDigitTest()", "class_method_signature": "TestTypeUtils.convertHexDigitTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "convertHexDigit", "assertEquals", "convertHexDigit", "assertEquals", "convertHexDigit", "assertEquals", "convertHexDigit", "assertEquals", "convertHexDigit", "assertEquals", "convertHexDigit", "assertEquals", "convertHexDigit", "assertEquals", "convertHexDigit", "assertEquals", "convertHexDigit", "assertEquals", "convertHexDigit", "assertEquals", "convertHexDigit", "assertEquals", "convertHexDigit"]}, "focal_class": {"identifier": "TypeUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Class<?>[] NO_ARGS = new Class[]{};", "modifier": "public static final", "type": "Class<?>[]", "declarator": "NO_ARGS = new Class[]{}", "var_name": "NO_ARGS"}, {"original_string": "public static final int CR = '\\015';", "modifier": "public static final", "type": "int", "declarator": "CR = '\\015'", "var_name": "CR"}, {"original_string": "public static final int LF = '\\012';", "modifier": "public static final", "type": "int", "declarator": "LF = '\\012'", "var_name": "LF"}, {"original_string": "private static final HashMap<String, Class<?>> name2Class = new HashMap<>();", "modifier": "private static final", "type": "HashMap<String, Class<?>>", "declarator": "name2Class = new HashMap<>()", "var_name": "name2Class"}, {"original_string": "private static final HashMap<Class<?>, String> class2Name = new HashMap<>();", "modifier": "private static final", "type": "HashMap<Class<?>, String>", "declarator": "class2Name = new HashMap<>()", "var_name": "class2Name"}, {"original_string": "private static final HashMap<Class<?>, Method> class2Value = new HashMap<>();", "modifier": "private static final", "type": "HashMap<Class<?>, Method>", "declarator": "class2Value = new HashMap<>()", "var_name": "class2Value"}], "methods": [{"identifier": "asList", "parameters": "(T[] a)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> asList(T[] a)", "full_signature": "public static List<T> asList(T[] a)", "class_method_signature": "TypeUtils.asList(T[] a)", "testcase": false, "constructor": false}, {"identifier": "fromName", "parameters": "(String name)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> fromName(String name)", "full_signature": "public static Class<?> fromName(String name)", "class_method_signature": "TypeUtils.fromName(String name)", "testcase": false, "constructor": false}, {"identifier": "toName", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "String", "signature": "String toName(Class<?> type)", "full_signature": "public static String toName(Class<?> type)", "class_method_signature": "TypeUtils.toName(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(Class<?> type, String value)", "modifiers": "public static", "return": "Object", "signature": "Object valueOf(Class<?> type, String value)", "full_signature": "public static Object valueOf(Class<?> type, String value)", "class_method_signature": "TypeUtils.valueOf(Class<?> type, String value)", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(String type, String value)", "modifiers": "public static", "return": "Object", "signature": "Object valueOf(String type, String value)", "full_signature": "public static Object valueOf(String type, String value)", "class_method_signature": "TypeUtils.valueOf(String type, String value)", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "(String s, int offset, int length, int base)", "modifiers": "public static", "return": "int", "signature": "int parseInt(String s, int offset, int length, int base)", "full_signature": "public static int parseInt(String s, int offset, int length, int base)", "class_method_signature": "TypeUtils.parseInt(String s, int offset, int length, int base)", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "(byte[] b, int offset, int length, int base)", "modifiers": "public static", "return": "int", "signature": "int parseInt(byte[] b, int offset, int length, int base)", "full_signature": "public static int parseInt(byte[] b, int offset, int length, int base)", "class_method_signature": "TypeUtils.parseInt(byte[] b, int offset, int length, int base)", "testcase": false, "constructor": false}, {"identifier": "parseBytes", "parameters": "(String s, int base)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] parseBytes(String s, int base)", "full_signature": "public static byte[] parseBytes(String s, int base)", "class_method_signature": "TypeUtils.parseBytes(String s, int base)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(byte[] bytes, int base)", "modifiers": "public static", "return": "String", "signature": "String toString(byte[] bytes, int base)", "full_signature": "public static String toString(byte[] bytes, int base)", "class_method_signature": "TypeUtils.toString(byte[] bytes, int base)", "testcase": false, "constructor": false}, {"identifier": "convertHexDigit", "parameters": "(byte c)", "modifiers": "public static", "return": "byte", "signature": "byte convertHexDigit(byte c)", "full_signature": "public static byte convertHexDigit(byte c)", "class_method_signature": "TypeUtils.convertHexDigit(byte c)", "testcase": false, "constructor": false}, {"identifier": "convertHexDigit", "parameters": "(char c)", "modifiers": "public static", "return": "int", "signature": "int convertHexDigit(char c)", "full_signature": "public static int convertHexDigit(char c)", "class_method_signature": "TypeUtils.convertHexDigit(char c)", "testcase": false, "constructor": false}, {"identifier": "convertHexDigit", "parameters": "(int c)", "modifiers": "public static", "return": "int", "signature": "int convertHexDigit(int c)", "full_signature": "public static int convertHexDigit(int c)", "class_method_signature": "TypeUtils.convertHexDigit(int c)", "testcase": false, "constructor": false}, {"identifier": "toHex", "parameters": "(byte b, Appendable buf)", "modifiers": "public static", "return": "void", "signature": "void toHex(byte b, Appendable buf)", "full_signature": "public static void toHex(byte b, Appendable buf)", "class_method_signature": "TypeUtils.toHex(byte b, Appendable buf)", "testcase": false, "constructor": false}, {"identifier": "toHex", "parameters": "(int value, Appendable buf)", "modifiers": "public static", "return": "void", "signature": "void toHex(int value, Appendable buf)", "full_signature": "public static void toHex(int value, Appendable buf)", "class_method_signature": "TypeUtils.toHex(int value, Appendable buf)", "testcase": false, "constructor": false}, {"identifier": "toHex", "parameters": "(long value, Appendable buf)", "modifiers": "public static", "return": "void", "signature": "void toHex(long value, Appendable buf)", "full_signature": "public static void toHex(long value, Appendable buf)", "class_method_signature": "TypeUtils.toHex(long value, Appendable buf)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(byte b)", "modifiers": "public static", "return": "String", "signature": "String toHexString(byte b)", "full_signature": "public static String toHexString(byte b)", "class_method_signature": "TypeUtils.toHexString(byte b)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(byte[] b)", "modifiers": "public static", "return": "String", "signature": "String toHexString(byte[] b)", "full_signature": "public static String toHexString(byte[] b)", "class_method_signature": "TypeUtils.toHexString(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(byte[] b, int offset, int length)", "modifiers": "public static", "return": "String", "signature": "String toHexString(byte[] b, int offset, int length)", "full_signature": "public static String toHexString(byte[] b, int offset, int length)", "class_method_signature": "TypeUtils.toHexString(byte[] b, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "fromHexString", "parameters": "(String s)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] fromHexString(String s)", "full_signature": "public static byte[] fromHexString(String s)", "class_method_signature": "TypeUtils.fromHexString(String s)", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "(Class<?> c)", "modifiers": "public static", "return": "void", "signature": "void dump(Class<?> c)", "full_signature": "public static void dump(Class<?> c)", "class_method_signature": "TypeUtils.dump(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "(ClassLoader cl)", "modifiers": "public static", "return": "void", "signature": "void dump(ClassLoader cl)", "full_signature": "public static void dump(ClassLoader cl)", "class_method_signature": "TypeUtils.dump(ClassLoader cl)", "testcase": false, "constructor": false}, {"identifier": "isTrue", "parameters": "(Object o)", "modifiers": "public static", "return": "boolean", "signature": "boolean isTrue(Object o)", "full_signature": "public static boolean isTrue(Object o)", "class_method_signature": "TypeUtils.isTrue(Object o)", "testcase": false, "constructor": false}, {"identifier": "isFalse", "parameters": "(Object o)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFalse(Object o)", "full_signature": "public static boolean isFalse(Object o)", "class_method_signature": "TypeUtils.isFalse(Object o)", "testcase": false, "constructor": false}], "file": "firefly-common/src/main/java/com/fireflysource/common/object/TypeUtils.java"}, "focal_method": {"identifier": "convertHexDigit", "parameters": "(byte c)", "modifiers": "public static", "return": "byte", "body": "public static byte convertHexDigit(byte c) {\n        byte b = (byte) ((c & 0x1f) + ((c >> 6) * 0x19) - 0x10);\n        if (b < 0 || b > 15)\n            throw new NumberFormatException(\"!hex \" + c);\n        return b;\n    }", "signature": "byte convertHexDigit(byte c)", "full_signature": "public static byte convertHexDigit(byte c)", "class_method_signature": "TypeUtils.convertHexDigit(byte c)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}