{"test_class": {"identifier": "ElementParentsIterableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public CompilationRule compilation = new CompilationRule();", "modifier": "@Rule\n    public", "type": "CompilationRule", "declarator": "compilation = new CompilationRule()", "var_name": "compilation"}], "file": "feature-matcher-generator/src/test/java/ru/yandex/qatools/processors/matcher/gen/elements/ElementParentsIterableTest.java"}, "test_case": {"identifier": "shouldGetParents", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldGetParents() throws Exception {\n        TypeElement twiceNested = compilation.getElements()\n                .getTypeElement(Outer.Nested.TwiceNested.class.getCanonicalName());\n        List<? extends Element> members = compilation.getElements().getAllMembers(twiceNested);\n\n        Element field = members.stream().filter(ofKind(ElementKind.FIELD)).findFirst()\n                .orElseThrow(IllegalStateException::new);\n\n        List<String> parents = stream(field)\n                .map(element -> element.getSimpleName().toString())\n                .collect(Collectors.toList());\n\n        assertThat(parents, hasItems(\"field\", \"TwiceNested\", \"Nested\", \"Outer\"));\n    }", "signature": "void shouldGetParents()", "full_signature": "@Test public void shouldGetParents()", "class_method_signature": "ElementParentsIterableTest.shouldGetParents()", "testcase": true, "constructor": false, "invocations": ["getTypeElement", "getElements", "getCanonicalName", "getAllMembers", "getElements", "orElseThrow", "findFirst", "filter", "stream", "ofKind", "collect", "map", "stream", "toString", "getSimpleName", "toList", "assertThat", "hasItems"]}, "focal_class": {"identifier": "ElementParentsIterable", "superclass": "", "interfaces": "implements Iterable<Element>", "fields": [{"original_string": "private final Element start;", "modifier": "private final", "type": "Element", "declarator": "start", "var_name": "start"}], "methods": [{"identifier": "ElementParentsIterable", "parameters": "(Element start)", "modifiers": "public", "return": "", "signature": " ElementParentsIterable(Element start)", "full_signature": "public  ElementParentsIterable(Element start)", "class_method_signature": "ElementParentsIterable.ElementParentsIterable(Element start)", "testcase": false, "constructor": true}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Element>", "signature": "Iterator<Element> iterator()", "full_signature": "@Override public Iterator<Element> iterator()", "class_method_signature": "ElementParentsIterable.iterator()", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "(Element element)", "modifiers": "public static", "return": "Stream<Element>", "signature": "Stream<Element> stream(Element element)", "full_signature": "public static Stream<Element> stream(Element element)", "class_method_signature": "ElementParentsIterable.stream(Element element)", "testcase": false, "constructor": false}], "file": "feature-matcher-generator/src/main/java/ru/yandex/qatools/processors/matcher/gen/elements/ElementParentsIterable.java"}, "focal_method": {"identifier": "stream", "parameters": "(Element element)", "modifiers": "public static", "return": "Stream<Element>", "body": "public static Stream<Element> stream(Element element) {\n        return StreamSupport.stream(new ElementParentsIterable(element).spliterator(), false);\n    }", "signature": "Stream<Element> stream(Element element)", "full_signature": "public static Stream<Element> stream(Element element)", "class_method_signature": "ElementParentsIterable.stream(Element element)", "testcase": false, "constructor": false, "invocations": ["stream", "spliterator"]}, "repository": {"repo_id": 25434304, "url": "https://github.com/yandex-qatools/hamcrest-pojo-matcher-generator", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 31, "size": 112, "license": "licensed"}}