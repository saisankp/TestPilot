{"test_class": {"identifier": "Ed25519Test", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/Ed25519Test.java"}, "test_case": {"identifier": "testGroupOrder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGroupOrder() throws Exception {\n    assertEquals(32, Ed25519.GROUP_ORDER.length);\n    byte[] result = Ed25519.scalarMultWithBaseToBytes(Ed25519.GROUP_ORDER);\n    assertEquals(1, result[0]);\n    for (int i = 1; i < 32; i++) {\n      assertEquals(0, result[i]);\n    }\n  }", "signature": "void testGroupOrder()", "full_signature": "@Test public void testGroupOrder()", "class_method_signature": "Ed25519Test.testGroupOrder()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "scalarMultWithBaseToBytes", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "Ed25519", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int SECRET_KEY_LEN = FIELD_LEN;", "modifier": "public static final", "type": "int", "declarator": "SECRET_KEY_LEN = FIELD_LEN", "var_name": "SECRET_KEY_LEN"}, {"original_string": "public static final int PUBLIC_KEY_LEN = FIELD_LEN;", "modifier": "public static final", "type": "int", "declarator": "PUBLIC_KEY_LEN = FIELD_LEN", "var_name": "PUBLIC_KEY_LEN"}, {"original_string": "public static final int SIGNATURE_LEN = FIELD_LEN * 2;", "modifier": "public static final", "type": "int", "declarator": "SIGNATURE_LEN = FIELD_LEN * 2", "var_name": "SIGNATURE_LEN"}, {"original_string": "private static final CachedXYT CACHED_NEUTRAL = new CachedXYT(\n      new long[]{1, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n      new long[]{1, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n      new long[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0});", "modifier": "private static final", "type": "CachedXYT", "declarator": "CACHED_NEUTRAL = new CachedXYT(\n      new long[]{1, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n      new long[]{1, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n      new long[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0})", "var_name": "CACHED_NEUTRAL"}, {"original_string": "private static final PartialXYZT NEUTRAL = new PartialXYZT(\n      new XYZ(new long[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n          new long[]{1, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n          new long[]{1, 0, 0, 0, 0, 0, 0, 0, 0, 0}),\n      new long[]{1, 0, 0, 0, 0, 0, 0, 0, 0, 0});", "modifier": "private static final", "type": "PartialXYZT", "declarator": "NEUTRAL = new PartialXYZT(\n      new XYZ(new long[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n          new long[]{1, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n          new long[]{1, 0, 0, 0, 0, 0, 0, 0, 0, 0}),\n      new long[]{1, 0, 0, 0, 0, 0, 0, 0, 0, 0})", "var_name": "NEUTRAL"}, {"original_string": "static final byte[] GROUP_ORDER = new byte[] {\n     (byte) 0xed, (byte) 0xd3, (byte) 0xf5, (byte) 0x5c,\n     (byte) 0x1a, (byte) 0x63, (byte) 0x12, (byte) 0x58,\n     (byte) 0xd6, (byte) 0x9c, (byte) 0xf7, (byte) 0xa2,\n     (byte) 0xde, (byte) 0xf9, (byte) 0xde, (byte) 0x14,\n     (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n     (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n     (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n     (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x10};", "modifier": "static final", "type": "byte[]", "declarator": "GROUP_ORDER = new byte[] {\n     (byte) 0xed, (byte) 0xd3, (byte) 0xf5, (byte) 0x5c,\n     (byte) 0x1a, (byte) 0x63, (byte) 0x12, (byte) 0x58,\n     (byte) 0xd6, (byte) 0x9c, (byte) 0xf7, (byte) 0xa2,\n     (byte) 0xde, (byte) 0xf9, (byte) 0xde, (byte) 0x14,\n     (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n     (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n     (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n     (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x10}", "var_name": "GROUP_ORDER"}], "methods": [{"identifier": "add", "parameters": "(PartialXYZT partialXYZT, XYZT extended, CachedXYT cached)", "modifiers": "private static", "return": "void", "signature": "void add(PartialXYZT partialXYZT, XYZT extended, CachedXYT cached)", "full_signature": "private static void add(PartialXYZT partialXYZT, XYZT extended, CachedXYT cached)", "class_method_signature": "Ed25519.add(PartialXYZT partialXYZT, XYZT extended, CachedXYT cached)", "testcase": false, "constructor": false}, {"identifier": "sub", "parameters": "(PartialXYZT partialXYZT, XYZT extended, CachedXYT cached)", "modifiers": "private static", "return": "void", "signature": "void sub(PartialXYZT partialXYZT, XYZT extended, CachedXYT cached)", "full_signature": "private static void sub(PartialXYZT partialXYZT, XYZT extended, CachedXYT cached)", "class_method_signature": "Ed25519.sub(PartialXYZT partialXYZT, XYZT extended, CachedXYT cached)", "testcase": false, "constructor": false}, {"identifier": "doubleXYZ", "parameters": "(PartialXYZT partialXYZT, XYZ p)", "modifiers": "private static", "return": "void", "signature": "void doubleXYZ(PartialXYZT partialXYZT, XYZ p)", "full_signature": "private static void doubleXYZ(PartialXYZT partialXYZT, XYZ p)", "class_method_signature": "Ed25519.doubleXYZ(PartialXYZT partialXYZT, XYZ p)", "testcase": false, "constructor": false}, {"identifier": "doubleXYZT", "parameters": "(PartialXYZT partialXYZT, XYZT p)", "modifiers": "private static", "return": "void", "signature": "void doubleXYZT(PartialXYZT partialXYZT, XYZT p)", "full_signature": "private static void doubleXYZT(PartialXYZT partialXYZT, XYZT p)", "class_method_signature": "Ed25519.doubleXYZT(PartialXYZT partialXYZT, XYZT p)", "testcase": false, "constructor": false}, {"identifier": "eq", "parameters": "(int a, int b)", "modifiers": "private static", "return": "int", "signature": "int eq(int a, int b)", "full_signature": "private static int eq(int a, int b)", "class_method_signature": "Ed25519.eq(int a, int b)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(CachedXYT t, int pos, byte b)", "modifiers": "private static", "return": "void", "signature": "void select(CachedXYT t, int pos, byte b)", "full_signature": "private static void select(CachedXYT t, int pos, byte b)", "class_method_signature": "Ed25519.select(CachedXYT t, int pos, byte b)", "testcase": false, "constructor": false}, {"identifier": "scalarMultWithBase", "parameters": "(byte[] a)", "modifiers": "@SuppressWarnings(\"NarrowingCompoundAssignment\") private static", "return": "XYZ", "signature": "XYZ scalarMultWithBase(byte[] a)", "full_signature": "@SuppressWarnings(\"NarrowingCompoundAssignment\") private static XYZ scalarMultWithBase(byte[] a)", "class_method_signature": "Ed25519.scalarMultWithBase(byte[] a)", "testcase": false, "constructor": false}, {"identifier": "scalarMultWithBaseToBytes", "parameters": "(byte[] a)", "modifiers": "static", "return": "byte[]", "signature": "byte[] scalarMultWithBaseToBytes(byte[] a)", "full_signature": "static byte[] scalarMultWithBaseToBytes(byte[] a)", "class_method_signature": "Ed25519.scalarMultWithBaseToBytes(byte[] a)", "testcase": false, "constructor": false}, {"identifier": "slide", "parameters": "(byte[] a)", "modifiers": "@SuppressWarnings(\"NarrowingCompoundAssignment\") private static", "return": "byte[]", "signature": "byte[] slide(byte[] a)", "full_signature": "@SuppressWarnings(\"NarrowingCompoundAssignment\") private static byte[] slide(byte[] a)", "class_method_signature": "Ed25519.slide(byte[] a)", "testcase": false, "constructor": false}, {"identifier": "doubleScalarMultVarTime", "parameters": "(byte[] a, XYZT pointA, byte[] b)", "modifiers": "private static", "return": "XYZ", "signature": "XYZ doubleScalarMultVarTime(byte[] a, XYZT pointA, byte[] b)", "full_signature": "private static XYZ doubleScalarMultVarTime(byte[] a, XYZT pointA, byte[] b)", "class_method_signature": "Ed25519.doubleScalarMultVarTime(byte[] a, XYZT pointA, byte[] b)", "testcase": false, "constructor": false}, {"identifier": "isNonZeroVarTime", "parameters": "(long[] in)", "modifiers": "private static", "return": "boolean", "signature": "boolean isNonZeroVarTime(long[] in)", "full_signature": "private static boolean isNonZeroVarTime(long[] in)", "class_method_signature": "Ed25519.isNonZeroVarTime(long[] in)", "testcase": false, "constructor": false}, {"identifier": "getLsb", "parameters": "(long[] in)", "modifiers": "private static", "return": "int", "signature": "int getLsb(long[] in)", "full_signature": "private static int getLsb(long[] in)", "class_method_signature": "Ed25519.getLsb(long[] in)", "testcase": false, "constructor": false}, {"identifier": "neg", "parameters": "(long[] out, long[] in)", "modifiers": "private static", "return": "void", "signature": "void neg(long[] out, long[] in)", "full_signature": "private static void neg(long[] out, long[] in)", "class_method_signature": "Ed25519.neg(long[] out, long[] in)", "testcase": false, "constructor": false}, {"identifier": "pow2252m3", "parameters": "(long[] out, long[] in)", "modifiers": "private static", "return": "void", "signature": "void pow2252m3(long[] out, long[] in)", "full_signature": "private static void pow2252m3(long[] out, long[] in)", "class_method_signature": "Ed25519.pow2252m3(long[] out, long[] in)", "testcase": false, "constructor": false}, {"identifier": "load3", "parameters": "(byte[] in, int idx)", "modifiers": "private static", "return": "long", "signature": "long load3(byte[] in, int idx)", "full_signature": "private static long load3(byte[] in, int idx)", "class_method_signature": "Ed25519.load3(byte[] in, int idx)", "testcase": false, "constructor": false}, {"identifier": "load4", "parameters": "(byte[] in, int idx)", "modifiers": "private static", "return": "long", "signature": "long load4(byte[] in, int idx)", "full_signature": "private static long load4(byte[] in, int idx)", "class_method_signature": "Ed25519.load4(byte[] in, int idx)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(byte[] s)", "modifiers": "private static", "return": "void", "signature": "void reduce(byte[] s)", "full_signature": "private static void reduce(byte[] s)", "class_method_signature": "Ed25519.reduce(byte[] s)", "testcase": false, "constructor": false}, {"identifier": "mulAdd", "parameters": "(byte[] s, byte[] a, byte[] b, byte[] c)", "modifiers": "private static", "return": "void", "signature": "void mulAdd(byte[] s, byte[] a, byte[] b, byte[] c)", "full_signature": "private static void mulAdd(byte[] s, byte[] a, byte[] b, byte[] c)", "class_method_signature": "Ed25519.mulAdd(byte[] s, byte[] a, byte[] b, byte[] c)", "testcase": false, "constructor": false}, {"identifier": "getHashedScalar", "parameters": "(final byte[] privateKey)", "modifiers": "static", "return": "byte[]", "signature": "byte[] getHashedScalar(final byte[] privateKey)", "full_signature": "static byte[] getHashedScalar(final byte[] privateKey)", "class_method_signature": "Ed25519.getHashedScalar(final byte[] privateKey)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(final byte[] message, final byte[] publicKey, final byte[] hashedPrivateKey)", "modifiers": "static", "return": "byte[]", "signature": "byte[] sign(final byte[] message, final byte[] publicKey, final byte[] hashedPrivateKey)", "full_signature": "static byte[] sign(final byte[] message, final byte[] publicKey, final byte[] hashedPrivateKey)", "class_method_signature": "Ed25519.sign(final byte[] message, final byte[] publicKey, final byte[] hashedPrivateKey)", "testcase": false, "constructor": false}, {"identifier": "isSmallerThanGroupOrder", "parameters": "(byte[] s)", "modifiers": "private static", "return": "boolean", "signature": "boolean isSmallerThanGroupOrder(byte[] s)", "full_signature": "private static boolean isSmallerThanGroupOrder(byte[] s)", "class_method_signature": "Ed25519.isSmallerThanGroupOrder(byte[] s)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(final byte[] message, final byte[] signature,\n      final byte[] publicKey)", "modifiers": "static", "return": "boolean", "signature": "boolean verify(final byte[] message, final byte[] signature,\n      final byte[] publicKey)", "full_signature": "static boolean verify(final byte[] message, final byte[] signature,\n      final byte[] publicKey)", "class_method_signature": "Ed25519.verify(final byte[] message, final byte[] signature,\n      final byte[] publicKey)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/Ed25519.java"}, "focal_method": {"identifier": "scalarMultWithBaseToBytes", "parameters": "(byte[] a)", "modifiers": "static", "return": "byte[]", "body": "static byte[] scalarMultWithBaseToBytes(byte[] a) {\n    return scalarMultWithBase(a).toBytes();\n  }", "signature": "byte[] scalarMultWithBaseToBytes(byte[] a)", "full_signature": "static byte[] scalarMultWithBaseToBytes(byte[] a)", "class_method_signature": "Ed25519.scalarMultWithBaseToBytes(byte[] a)", "testcase": false, "constructor": false, "invocations": ["toBytes", "scalarMultWithBase"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}