{"test_class": {"identifier": "ProjectClassesInstanceFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "profilers/testSrc/com/android/tools/profilers/memory/adapters/instancefilters/ProjectClassesInstanceFilterTest.java"}, "test_case": {"identifier": "testFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFilter() {\n    FakeIdeProfilerServices ideServices = new FakeIdeProfilerServices();\n    ideServices.addProjectClasses(\"my.foo.bar\", \"your.bar.foo\");\n\n    String matchedClass = \"my.foo.bar\";\n    String matchedInnerClass = \"your.bar.foo$1\";\n    String mismatchedClass = \"my.bar\";\n    String mismatchedInnerClass = \"your.foo$1\";\n    FakeCaptureObject capture = new FakeCaptureObject.Builder().build();\n\n    FakeInstanceObject matchedClassInstance = new FakeInstanceObject.Builder(capture, 1, matchedClass).build();\n    FakeInstanceObject matchedInnerClassInstance = new FakeInstanceObject.Builder(capture, 2, matchedInnerClass).build();\n    FakeInstanceObject mismatchedClassInstance = new FakeInstanceObject.Builder(capture, 3, mismatchedClass).build();\n    FakeInstanceObject mismatchedInnerClassInstance = new FakeInstanceObject.Builder(capture, 4, mismatchedInnerClass).build();\n    Set<InstanceObject> instances = ImmutableSet.of(matchedClassInstance,\n                                                    matchedInnerClassInstance,\n                                                    mismatchedClassInstance,\n                                                    mismatchedInnerClassInstance);\n\n    ProjectClassesInstanceFilter filter = new ProjectClassesInstanceFilter(ideServices);\n    Set<InstanceObject> result = filter.filter(instances, capture.getClassDatabase());\n    assertThat(result).containsExactly(matchedClassInstance, matchedInnerClassInstance);\n  }", "signature": "void testFilter()", "full_signature": "@Test public void testFilter()", "class_method_signature": "ProjectClassesInstanceFilterTest.testFilter()", "testcase": true, "constructor": false, "invocations": ["addProjectClasses", "build", "build", "build", "build", "build", "of", "filter", "getClassDatabase", "containsExactly", "assertThat"]}, "focal_class": {"identifier": "ProjectClassesInstanceFilter", "superclass": "", "interfaces": "implements CaptureObjectInstanceFilter", "fields": [{"original_string": "@NotNull private final IdeProfilerServices myIdeProfilerServices;", "modifier": "@NotNull private final", "type": "IdeProfilerServices", "declarator": "myIdeProfilerServices", "var_name": "myIdeProfilerServices"}], "methods": [{"identifier": "ProjectClassesInstanceFilter", "parameters": "(@NotNull IdeProfilerServices profilerServices)", "modifiers": "public", "return": "", "signature": " ProjectClassesInstanceFilter(@NotNull IdeProfilerServices profilerServices)", "full_signature": "public  ProjectClassesInstanceFilter(@NotNull IdeProfilerServices profilerServices)", "class_method_signature": "ProjectClassesInstanceFilter.ProjectClassesInstanceFilter(@NotNull IdeProfilerServices profilerServices)", "testcase": false, "constructor": true}, {"identifier": "getDisplayName", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getDisplayName()", "full_signature": "@NotNull @Override public String getDisplayName()", "class_method_signature": "ProjectClassesInstanceFilter.getDisplayName()", "testcase": false, "constructor": false}, {"identifier": "getSummaryDescription", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getSummaryDescription()", "full_signature": "@NotNull @Override public String getSummaryDescription()", "class_method_signature": "ProjectClassesInstanceFilter.getSummaryDescription()", "testcase": false, "constructor": false}, {"identifier": "getDetailedDescription", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "String", "signature": "String getDetailedDescription()", "full_signature": "@Nullable @Override public String getDetailedDescription()", "class_method_signature": "ProjectClassesInstanceFilter.getDetailedDescription()", "testcase": false, "constructor": false}, {"identifier": "getDocumentationLink", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "String", "signature": "String getDocumentationLink()", "full_signature": "@Nullable @Override public String getDocumentationLink()", "class_method_signature": "ProjectClassesInstanceFilter.getDocumentationLink()", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(@NotNull Set<InstanceObject> instances, @NotNull ClassDb classDatabase)", "modifiers": "@Override public", "return": "Set<InstanceObject>", "signature": "Set<InstanceObject> filter(@NotNull Set<InstanceObject> instances, @NotNull ClassDb classDatabase)", "full_signature": "@Override public Set<InstanceObject> filter(@NotNull Set<InstanceObject> instances, @NotNull ClassDb classDatabase)", "class_method_signature": "ProjectClassesInstanceFilter.filter(@NotNull Set<InstanceObject> instances, @NotNull ClassDb classDatabase)", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/memory/adapters/instancefilters/ProjectClassesInstanceFilter.java"}, "focal_method": {"identifier": "filter", "parameters": "(@NotNull Set<InstanceObject> instances, @NotNull ClassDb classDatabase)", "modifiers": "@Override public", "return": "Set<InstanceObject>", "body": "@Override\n  public Set<InstanceObject> filter(@NotNull Set<InstanceObject> instances, @NotNull ClassDb classDatabase) {\n    Set<String> projectClasses = myIdeProfilerServices.getAllProjectClasses();\n    return instances.stream().filter(instance -> {\n      String className = instance.getClassEntry().getClassName();\n\n      // Ignore inner classes since they can contain lambdas (e.g. topLevelClass$1). All inner classes should be included anyway if\n      // the top-level class belongs to the project.\n      int innerClassStartIndex = className.indexOf(\"$\");\n      if (innerClassStartIndex != -1) {\n        className = className.substring(0, innerClassStartIndex);\n      }\n\n      return projectClasses.contains(className);\n    }).collect(Collectors.toSet());\n  }", "signature": "Set<InstanceObject> filter(@NotNull Set<InstanceObject> instances, @NotNull ClassDb classDatabase)", "full_signature": "@Override public Set<InstanceObject> filter(@NotNull Set<InstanceObject> instances, @NotNull ClassDb classDatabase)", "class_method_signature": "ProjectClassesInstanceFilter.filter(@NotNull Set<InstanceObject> instances, @NotNull ClassDb classDatabase)", "testcase": false, "constructor": false, "invocations": ["getAllProjectClasses", "collect", "filter", "stream", "getClassName", "getClassEntry", "indexOf", "substring", "contains", "toSet"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}