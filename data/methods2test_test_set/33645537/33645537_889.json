{"test_class": {"identifier": "CopyOnWriteBPlusTreeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CopyOnWriteBPlusTree<Integer, String> tree;", "modifier": "private", "type": "CopyOnWriteBPlusTree<Integer, String>", "declarator": "tree", "var_name": "tree"}], "file": "zava/src/test/java/com/github/NoahShen/jue/bplustree/CopyOnWriteBPlusTreeTest.java"}, "test_case": {"identifier": "testTreePut", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testTreePut() {\n\t\tfor (int i = 1; i <= 100; ++i) {\n\t\t\tAssert.assertTrue(tree.put(i, i + \"\"));\n\t\t}\n\t}", "signature": "void testTreePut()", "full_signature": "@Test public void testTreePut()", "class_method_signature": "CopyOnWriteBPlusTreeTest.testTreePut()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "put"]}, "focal_class": {"identifier": "CopyOnWriteBPlusTree", "superclass": "", "interfaces": "implements BPlusTree<K, V>", "fields": [{"original_string": "private final ReentrantLock lock = new ReentrantLock();", "modifier": "private final", "type": "ReentrantLock", "declarator": "lock = new ReentrantLock()", "var_name": "lock"}, {"original_string": "private volatile DefaultBPlusTree<K, V> tree;", "modifier": "private volatile", "type": "DefaultBPlusTree<K, V>", "declarator": "tree", "var_name": "tree"}], "methods": [{"identifier": "CopyOnWriteBPlusTree", "parameters": "(int m)", "modifiers": "public", "return": "", "signature": " CopyOnWriteBPlusTree(int m)", "full_signature": "public  CopyOnWriteBPlusTree(int m)", "class_method_signature": "CopyOnWriteBPlusTree.CopyOnWriteBPlusTree(int m)", "testcase": false, "constructor": true}, {"identifier": "getM", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getM()", "full_signature": "public int getM()", "class_method_signature": "CopyOnWriteBPlusTree.getM()", "testcase": false, "constructor": false}, {"identifier": "getKeySum", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getKeySum()", "full_signature": "public int getKeySum()", "class_method_signature": "CopyOnWriteBPlusTree.getKeySum()", "testcase": false, "constructor": false}, {"identifier": "getNodeSum", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNodeSum()", "full_signature": "public int getNodeSum()", "class_method_signature": "CopyOnWriteBPlusTree.getNodeSum()", "testcase": false, "constructor": false}, {"identifier": "getTreeLevel", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTreeLevel()", "full_signature": "public int getTreeLevel()", "class_method_signature": "CopyOnWriteBPlusTree.getTreeLevel()", "testcase": false, "constructor": false}, {"identifier": "getFirstLeafNode", "parameters": "()", "modifiers": "public", "return": "BNode<K, V>", "signature": "BNode<K, V> getFirstLeafNode()", "full_signature": "public BNode<K, V> getFirstLeafNode()", "class_method_signature": "CopyOnWriteBPlusTree.getFirstLeafNode()", "testcase": false, "constructor": false}, {"identifier": "getLastLeafNode", "parameters": "()", "modifiers": "public", "return": "BNode<K, V>", "signature": "BNode<K, V> getLastLeafNode()", "full_signature": "public BNode<K, V> getLastLeafNode()", "class_method_signature": "CopyOnWriteBPlusTree.getLastLeafNode()", "testcase": false, "constructor": false}, {"identifier": "getRootNode", "parameters": "()", "modifiers": "public", "return": "BNode<K, V>", "signature": "BNode<K, V> getRootNode()", "full_signature": "public BNode<K, V> getRootNode()", "class_method_signature": "CopyOnWriteBPlusTree.getRootNode()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(K key, V value)", "modifiers": "public", "return": "boolean", "signature": "boolean put(K key, V value)", "full_signature": "public boolean put(K key, V value)", "class_method_signature": "CopyOnWriteBPlusTree.put(K key, V value)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(K key, V value, TreeCallBack<K, V> callback)", "modifiers": "public", "return": "boolean", "signature": "boolean put(K key, V value, TreeCallBack<K, V> callback)", "full_signature": "public boolean put(K key, V value, TreeCallBack<K, V> callback)", "class_method_signature": "CopyOnWriteBPlusTree.put(K key, V value, TreeCallBack<K, V> callback)", "testcase": false, "constructor": false}, {"identifier": "createNewTree", "parameters": "()", "modifiers": "private", "return": "DefaultBPlusTree<K, V>", "signature": "DefaultBPlusTree<K, V> createNewTree()", "full_signature": "private DefaultBPlusTree<K, V> createNewTree()", "class_method_signature": "CopyOnWriteBPlusTree.createNewTree()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(K key)", "modifiers": "public", "return": "V", "signature": "V get(K key)", "full_signature": "public V get(K key)", "class_method_signature": "CopyOnWriteBPlusTree.get(K key)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(K key)", "modifiers": "public", "return": "boolean", "signature": "boolean delete(K key)", "full_signature": "public boolean delete(K key)", "class_method_signature": "CopyOnWriteBPlusTree.delete(K key)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(K key, TreeCallBack<K, V> callback)", "modifiers": "public", "return": "boolean", "signature": "boolean delete(K key, TreeCallBack<K, V> callback)", "full_signature": "public boolean delete(K key, TreeCallBack<K, V> callback)", "class_method_signature": "CopyOnWriteBPlusTree.delete(K key, TreeCallBack<K, V> callback)", "testcase": false, "constructor": false}, {"identifier": "updateNewTree", "parameters": "(BNode<K, V> newRootNode)", "modifiers": "public", "return": "void", "signature": "void updateNewTree(BNode<K, V> newRootNode)", "full_signature": "public void updateNewTree(BNode<K, V> newRootNode)", "class_method_signature": "CopyOnWriteBPlusTree.updateNewTree(BNode<K, V> newRootNode)", "testcase": false, "constructor": false}, {"identifier": "traverseAllNodes", "parameters": "(TraverseCallBack<K, V> traverseCallBack)", "modifiers": "@Override public", "return": "void", "signature": "void traverseAllNodes(TraverseCallBack<K, V> traverseCallBack)", "full_signature": "@Override public void traverseAllNodes(TraverseCallBack<K, V> traverseCallBack)", "class_method_signature": "CopyOnWriteBPlusTree.traverseAllNodes(TraverseCallBack<K, V> traverseCallBack)", "testcase": false, "constructor": false}, {"identifier": "entryArray", "parameters": "()", "modifiers": "@Override public", "return": "Entry<K, V>[]", "signature": "Entry<K, V>[] entryArray()", "full_signature": "@Override public Entry<K, V>[] entryArray()", "class_method_signature": "CopyOnWriteBPlusTree.entryArray()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CopyOnWriteBPlusTree.toString()", "testcase": false, "constructor": false}], "file": "zava/src/main/java/com/github/NoahShen/jue/bplustree/CopyOnWriteBPlusTree.java"}, "focal_method": {"identifier": "put", "parameters": "(K key, V value)", "modifiers": "public", "return": "boolean", "body": "public boolean put(K key, V value) {\n\t\treturn put(key, value, null);\n\t}", "signature": "boolean put(K key, V value)", "full_signature": "public boolean put(K key, V value)", "class_method_signature": "CopyOnWriteBPlusTree.put(K key, V value)", "testcase": false, "constructor": false, "invocations": ["put"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}