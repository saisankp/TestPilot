{"test_class": {"identifier": "ParameterPlaceholderTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private ParameterPlaceholder underTest;", "modifier": "@InjectMocks\n    private", "type": "ParameterPlaceholder", "declarator": "underTest", "var_name": "underTest"}], "file": "junit4/src/test/java/com/tngtech/java/junit/dataprovider/internal/placeholder/ParameterPlaceholderTest.java"}, "test_case": {"identifier": "testFormatAllReplacesNullTerminatorWithTheirPrintableCounterpart", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFormatAllReplacesNullTerminatorWithTheirPrintableCounterpart() {\n        // Given:\n        final Object[] parameters = new Object[] { \"\\0\" };\n\n        // When:\n        String result = underTest.formatAll(parameters);\n\n        // Then:\n        assertThat(result).isEqualTo(\"\\\\0\");\n    }", "signature": "void testFormatAllReplacesNullTerminatorWithTheirPrintableCounterpart()", "full_signature": "@Test public void testFormatAllReplacesNullTerminatorWithTheirPrintableCounterpart()", "class_method_signature": "ParameterPlaceholderTest.testFormatAllReplacesNullTerminatorWithTheirPrintableCounterpart()", "testcase": true, "constructor": false, "invocations": ["formatAll", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ParameterPlaceholder", "superclass": "extends ArgumentPlaceholder", "interfaces": "", "fields": [{"original_string": "static final String STRING_NULL = ArgumentPlaceholder.STRING_NULL;", "modifier": "static final", "type": "String", "declarator": "STRING_NULL = ArgumentPlaceholder.STRING_NULL", "var_name": "STRING_NULL"}, {"original_string": "static final String STRING_EMPTY = ArgumentPlaceholder.STRING_EMPTY;", "modifier": "static final", "type": "String", "declarator": "STRING_EMPTY = ArgumentPlaceholder.STRING_EMPTY", "var_name": "STRING_EMPTY"}, {"original_string": "static final String STRING_NON_PRINTABLE = ArgumentPlaceholder.STRING_NON_PRINTABLE;", "modifier": "static final", "type": "String", "declarator": "STRING_NON_PRINTABLE = ArgumentPlaceholder.STRING_NON_PRINTABLE", "var_name": "STRING_NON_PRINTABLE"}, {"original_string": "protected Method method;", "modifier": "protected", "type": "Method", "declarator": "method", "var_name": "method"}, {"original_string": "protected int idx;", "modifier": "protected", "type": "int", "declarator": "idx", "var_name": "idx"}, {"original_string": "protected Object[] parameters;", "modifier": "protected", "type": "Object[]", "declarator": "parameters", "var_name": "parameters"}], "methods": [{"identifier": "setContext", "parameters": "(Method method, int idx, Object[] parameters)", "modifiers": "public", "return": "void", "signature": "void setContext(Method method, int idx, Object[] parameters)", "full_signature": "public void setContext(Method method, int idx, Object[] parameters)", "class_method_signature": "ParameterPlaceholder.setContext(Method method, int idx, Object[] parameters)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(String formatPattern)", "modifiers": "public", "return": "String", "signature": "String process(String formatPattern)", "full_signature": "public String process(String formatPattern)", "class_method_signature": "ParameterPlaceholder.process(String formatPattern)", "testcase": false, "constructor": false}, {"identifier": "getReplacementFor", "parameters": "(String placeholder)", "modifiers": "protected", "return": "String", "signature": "String getReplacementFor(String placeholder)", "full_signature": "protected String getReplacementFor(String placeholder)", "class_method_signature": "ParameterPlaceholder.getReplacementFor(String placeholder)", "testcase": false, "constructor": false}, {"identifier": "formatAll", "parameters": "(Object[] parameters)", "modifiers": "protected", "return": "String", "signature": "String formatAll(Object[] parameters)", "full_signature": "protected String formatAll(Object[] parameters)", "class_method_signature": "ParameterPlaceholder.formatAll(Object[] parameters)", "testcase": false, "constructor": false}, {"identifier": "formatAll", "parameters": "(List<Object> arguments)", "modifiers": "@Override protected", "return": "String", "signature": "String formatAll(List<Object> arguments)", "full_signature": "@Override protected String formatAll(List<Object> arguments)", "class_method_signature": "ParameterPlaceholder.formatAll(List<Object> arguments)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(Object param)", "modifiers": "@Override protected", "return": "String", "signature": "String format(Object param)", "full_signature": "@Override protected String format(Object param)", "class_method_signature": "ParameterPlaceholder.format(Object param)", "testcase": false, "constructor": false}], "file": "junit4/src/main/java/com/tngtech/java/junit/dataprovider/internal/placeholder/ParameterPlaceholder.java"}, "focal_method": {"identifier": "formatAll", "parameters": "(Object[] parameters)", "modifiers": "protected", "return": "String", "body": "protected String formatAll(Object[] parameters) {\n        return super.formatAll(Arrays.asList(parameters));\n    }", "signature": "String formatAll(Object[] parameters)", "full_signature": "protected String formatAll(Object[] parameters)", "class_method_signature": "ParameterPlaceholder.formatAll(Object[] parameters)", "testcase": false, "constructor": false, "invocations": ["formatAll", "asList"]}, "repository": {"repo_id": 8175611, "url": "https://github.com/TNG/junit-dataprovider", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 215, "size": 1383, "license": "licensed"}}