{"test_class": {"identifier": "ProjectionTest", "superclass": "", "interfaces": "", "fields": [], "file": "streams/catalog/src/test/java/com/hortonworks/streamline/streams/catalog/ProjectionTest.java"}, "test_case": {"identifier": "testProjectionToString1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProjectionToString1() throws Exception {\n        Projection projection = new Projection(\"UPPER(review_id) AS Camel\", null, null, null);\n        String str = projection.toString();\n        Assert.assertEquals(\"UPPER(review_id) AS \\\"Camel\\\"\", str);\n    }", "signature": "void testProjectionToString1()", "full_signature": "@Test public void testProjectionToString1()", "class_method_signature": "ProjectionTest.testProjectionToString1()", "testcase": true, "constructor": false, "invocations": ["toString", "assertEquals"]}, "focal_class": {"identifier": "Projection", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String expr;", "modifier": "private", "type": "String", "declarator": "expr", "var_name": "expr"}, {"original_string": "@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)\n    private String functionName;", "modifier": "@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)\n    private", "type": "String", "declarator": "functionName", "var_name": "functionName"}, {"original_string": "@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)\n    private List<String> args;", "modifier": "@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)\n    private", "type": "List<String>", "declarator": "args", "var_name": "args"}, {"original_string": "@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)\n    private String outputFieldName;", "modifier": "@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)\n    private", "type": "String", "declarator": "outputFieldName", "var_name": "outputFieldName"}], "methods": [{"identifier": "Projection", "parameters": "()", "modifiers": "public", "return": "", "signature": " Projection()", "full_signature": "public  Projection()", "class_method_signature": "Projection.Projection()", "testcase": false, "constructor": true}, {"identifier": "Projection", "parameters": "(Projection other)", "modifiers": "public", "return": "", "signature": " Projection(Projection other)", "full_signature": "public  Projection(Projection other)", "class_method_signature": "Projection.Projection(Projection other)", "testcase": false, "constructor": true}, {"identifier": "Projection", "parameters": "(String expr, String functionName, List<String> args, String outputFieldName)", "modifiers": "public", "return": "", "signature": " Projection(String expr, String functionName, List<String> args, String outputFieldName)", "full_signature": "public  Projection(String expr, String functionName, List<String> args, String outputFieldName)", "class_method_signature": "Projection.Projection(String expr, String functionName, List<String> args, String outputFieldName)", "testcase": false, "constructor": true}, {"identifier": "getExpr", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getExpr()", "full_signature": "public String getExpr()", "class_method_signature": "Projection.getExpr()", "testcase": false, "constructor": false}, {"identifier": "getFunctionName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFunctionName()", "full_signature": "public String getFunctionName()", "class_method_signature": "Projection.getFunctionName()", "testcase": false, "constructor": false}, {"identifier": "getArgs", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getArgs()", "full_signature": "public List<String> getArgs()", "class_method_signature": "Projection.getArgs()", "testcase": false, "constructor": false}, {"identifier": "getOutputFieldName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOutputFieldName()", "full_signature": "public String getOutputFieldName()", "class_method_signature": "Projection.getOutputFieldName()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Projection.toString()", "testcase": false, "constructor": false}, {"identifier": "quoteAlias", "parameters": "(String expr)", "modifiers": "private", "return": "String", "signature": "String quoteAlias(String expr)", "full_signature": "private String quoteAlias(String expr)", "class_method_signature": "Projection.quoteAlias(String expr)", "testcase": false, "constructor": false}, {"identifier": "toExpr", "parameters": "(boolean quoteAlias)", "modifiers": "private", "return": "String", "signature": "String toExpr(boolean quoteAlias)", "full_signature": "private String toExpr(boolean quoteAlias)", "class_method_signature": "Projection.toExpr(boolean quoteAlias)", "testcase": false, "constructor": false}, {"identifier": "removeSuffix", "parameters": "(String fn)", "modifiers": "private", "return": "String", "signature": "String removeSuffix(String fn)", "full_signature": "private String removeSuffix(String fn)", "class_method_signature": "Projection.removeSuffix(String fn)", "testcase": false, "constructor": false}], "file": "streams/catalog/src/main/java/com/hortonworks/streamline/streams/catalog/Projection.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String toString() {\n        String str;\n        if (!StringUtils.isEmpty(functionName)) {\n            str = toExpr(true);\n        } else if (!StringUtils.isEmpty(expr)) {\n            str = quoteAlias(expr);\n        } else {\n            throw new IllegalArgumentException(\"expr or functionName should be specified\");\n        }\n        return str;\n    }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Projection.toString()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "toExpr", "isEmpty", "quoteAlias"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}