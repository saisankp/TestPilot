{"test_class": {"identifier": "ProgramStageInstanceBasicCheckTest", "superclass": "extends BaseValidationTest", "interfaces": "", "fields": [{"original_string": "private ProgramStageInstanceBasicCheck rule;", "modifier": "private", "type": "ProgramStageInstanceBasicCheck", "declarator": "rule", "var_name": "rule"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheckTest.java"}, "test_case": {"identifier": "failOnMissingProgramStageInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void failOnMissingProgramStageInstance()\n    {\n        when( workContext.getProgramStageInstanceMap() ).thenReturn( new HashMap<>() );\n\n        ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n        assertHasError( summary, event,\n            \"Event ID \" + event.getEvent() + \" doesn't point to valid event\" );\n    }", "signature": "void failOnMissingProgramStageInstance()", "full_signature": "@Test public void failOnMissingProgramStageInstance()", "class_method_signature": "ProgramStageInstanceBasicCheckTest.failOnMissingProgramStageInstance()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getProgramStageInstanceMap", "check", "assertHasError", "getEvent"]}, "focal_class": {"identifier": "ProgramStageInstanceBasicCheck", "superclass": "", "interfaces": "implements Checker", "fields": [], "methods": [{"identifier": "check", "parameters": "( final ImmutableEvent event, final WorkContext ctx )", "modifiers": "@Override public", "return": "ImportSummary", "signature": "ImportSummary check( final ImmutableEvent event, final WorkContext ctx )", "full_signature": "@Override public ImportSummary check( final ImmutableEvent event, final WorkContext ctx )", "class_method_signature": "ProgramStageInstanceBasicCheck.check( final ImmutableEvent event, final WorkContext ctx )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java"}, "focal_method": {"identifier": "check", "parameters": "( final ImmutableEvent event, final WorkContext ctx )", "modifiers": "@Override public", "return": "ImportSummary", "body": "@Override\n    public ImportSummary check( final ImmutableEvent event, final WorkContext ctx )\n    {\n        final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n\n        if ( programStageInstance == null )\n        {\n            final ImportSummary error = error( \"Event ID \" + event.getEvent() + \" doesn't point to valid event\",\n                event.getEvent() );\n            error.getConflicts().add( new ImportConflict( \"Invalid Event ID\", event.getEvent() ) );\n\n            return error;\n        }\n        else if ( programStageInstance.isDeleted() || ctx.getImportOptions().getImportStrategy().isCreate() )\n        {\n            return error(\n                \"Event ID \" + event.getEvent() + \" was already used and/or deleted. This event can not be modified.\" )\n                    .setReference( event.getEvent() );\n        }\n\n        return success();\n    }", "signature": "ImportSummary check( final ImmutableEvent event, final WorkContext ctx )", "full_signature": "@Override public ImportSummary check( final ImmutableEvent event, final WorkContext ctx )", "class_method_signature": "ProgramStageInstanceBasicCheck.check( final ImmutableEvent event, final WorkContext ctx )", "testcase": false, "constructor": false, "invocations": ["get", "getProgramStageInstanceMap", "getEvent", "error", "getEvent", "getEvent", "add", "getConflicts", "getEvent", "isDeleted", "isCreate", "getImportStrategy", "getImportOptions", "setReference", "error", "getEvent", "getEvent", "success"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}