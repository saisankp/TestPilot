{"test_class": {"identifier": "SegmentTest", "superclass": "", "interfaces": "", "fields": [], "file": "geoxygene-spatial/src/test/java/fr/ign/cogit/geoxygene/util/algo/geomstructure/SegmentTest.java"}, "test_case": {"identifier": "testGetWeightedMiddlePoint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetWeightedMiddlePoint() {\n    IDirectPosition p1 = new DirectPosition(0.0, 0.0);\n    IDirectPosition p2 = new DirectPosition(10.0, 10.0);\n    IDirectPosition p3 = new DirectPosition(5.0, 5.0);\n    IDirectPosition p4 = new DirectPosition(2.5, 2.5);\n    IDirectPosition p5 = new DirectPosition(7.5, 7.5);\n    Segment segment = new Segment(p1, p2);\n    Assert.assertTrue(p3.equals(segment.getWeightedMiddlePoint(1.0), 0.01));\n    Assert.assertTrue(p4.equals(segment.getWeightedMiddlePoint(0.5), 0.01));\n    Assert.assertTrue(p5.equals(segment.getWeightedMiddlePoint(2.0), 0.01));\n  }", "signature": "void testGetWeightedMiddlePoint()", "full_signature": "@Test public void testGetWeightedMiddlePoint()", "class_method_signature": "SegmentTest.testGetWeightedMiddlePoint()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "getWeightedMiddlePoint", "assertTrue", "equals", "getWeightedMiddlePoint", "assertTrue", "equals", "getWeightedMiddlePoint"]}, "focal_class": {"identifier": "Segment", "superclass": "extends GM_LineSegment", "interfaces": "", "fields": [{"original_string": "private double coefA;", "modifier": "private", "type": "double", "declarator": "coefA", "var_name": "coefA"}, {"original_string": "private double coefB;", "modifier": "private", "type": "double", "declarator": "coefB", "var_name": "coefB"}, {"original_string": "private double coefC;", "modifier": "private", "type": "double", "declarator": "coefC", "var_name": "coefC"}], "methods": [{"identifier": "Segment", "parameters": "(IDirectPosition point1, IDirectPosition point2)", "modifiers": "public", "return": "", "signature": " Segment(IDirectPosition point1, IDirectPosition point2)", "full_signature": "public  Segment(IDirectPosition point1, IDirectPosition point2)", "class_method_signature": "Segment.Segment(IDirectPosition point1, IDirectPosition point2)", "testcase": false, "constructor": true}, {"identifier": "getCoefA", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCoefA()", "full_signature": "public double getCoefA()", "class_method_signature": "Segment.getCoefA()", "testcase": false, "constructor": false}, {"identifier": "getCoefB", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCoefB()", "full_signature": "public double getCoefB()", "class_method_signature": "Segment.getCoefB()", "testcase": false, "constructor": false}, {"identifier": "getCoefC", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCoefC()", "full_signature": "public double getCoefC()", "class_method_signature": "Segment.getCoefC()", "testcase": false, "constructor": false}, {"identifier": "getPerpendicularSegment", "parameters": "(boolean start)", "modifiers": "public", "return": "Segment", "signature": "Segment getPerpendicularSegment(boolean start)", "full_signature": "public Segment getPerpendicularSegment(boolean start)", "class_method_signature": "Segment.getPerpendicularSegment(boolean start)", "testcase": false, "constructor": false}, {"identifier": "getBisectionSegment", "parameters": "()", "modifiers": "public", "return": "Segment", "signature": "Segment getBisectionSegment()", "full_signature": "public Segment getBisectionSegment()", "class_method_signature": "Segment.getBisectionSegment()", "testcase": false, "constructor": false}, {"identifier": "straightLineIntersection", "parameters": "(Segment other)", "modifiers": "public", "return": "IDirectPosition", "signature": "IDirectPosition straightLineIntersection(Segment other)", "full_signature": "public IDirectPosition straightLineIntersection(Segment other)", "class_method_signature": "Segment.straightLineIntersection(Segment other)", "testcase": false, "constructor": false}, {"identifier": "intersectionWithCircle", "parameters": "(IDirectPosition centre,\n      double radius)", "modifiers": "public", "return": "Set<IDirectPosition>", "signature": "Set<IDirectPosition> intersectionWithCircle(IDirectPosition centre,\n      double radius)", "full_signature": "public Set<IDirectPosition> intersectionWithCircle(IDirectPosition centre,\n      double radius)", "class_method_signature": "Segment.intersectionWithCircle(IDirectPosition centre,\n      double radius)", "testcase": false, "constructor": false}, {"identifier": "distanceToPoint", "parameters": "(IDirectPosition point)", "modifiers": "public", "return": "double", "signature": "double distanceToPoint(IDirectPosition point)", "full_signature": "public double distanceToPoint(IDirectPosition point)", "class_method_signature": "Segment.distanceToPoint(IDirectPosition point)", "testcase": false, "constructor": false}, {"identifier": "orientation", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double orientation()", "full_signature": "public double orientation()", "class_method_signature": "Segment.orientation()", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void print()", "full_signature": "public void print()", "class_method_signature": "Segment.print()", "testcase": false, "constructor": false}, {"identifier": "getSegmentList", "parameters": "(ILineString line)", "modifiers": "public static", "return": "List<Segment>", "signature": "List<Segment> getSegmentList(ILineString line)", "full_signature": "public static List<Segment> getSegmentList(ILineString line)", "class_method_signature": "Segment.getSegmentList(ILineString line)", "testcase": false, "constructor": false}, {"identifier": "getSegmentList", "parameters": "(IPolygon polygon,\n      IDirectPosition origin)", "modifiers": "public static", "return": "List<Segment>", "signature": "List<Segment> getSegmentList(IPolygon polygon,\n      IDirectPosition origin)", "full_signature": "public static List<Segment> getSegmentList(IPolygon polygon,\n      IDirectPosition origin)", "class_method_signature": "Segment.getSegmentList(IPolygon polygon,\n      IDirectPosition origin)", "testcase": false, "constructor": false}, {"identifier": "getSegmentList", "parameters": "(IRing ring, IDirectPosition origin)", "modifiers": "public static", "return": "List<Segment>", "signature": "List<Segment> getSegmentList(IRing ring, IDirectPosition origin)", "full_signature": "public static List<Segment> getSegmentList(IRing ring, IDirectPosition origin)", "class_method_signature": "Segment.getSegmentList(IRing ring, IDirectPosition origin)", "testcase": false, "constructor": false}, {"identifier": "getReverseSegmentList", "parameters": "(IPolygon polygon,\n      IDirectPosition origin)", "modifiers": "public static", "return": "List<Segment>", "signature": "List<Segment> getReverseSegmentList(IPolygon polygon,\n      IDirectPosition origin)", "full_signature": "public static List<Segment> getReverseSegmentList(IPolygon polygon,\n      IDirectPosition origin)", "class_method_signature": "Segment.getReverseSegmentList(IPolygon polygon,\n      IDirectPosition origin)", "testcase": false, "constructor": false}, {"identifier": "getReverseSegmentList", "parameters": "(IRing ring,\n      IDirectPosition origin)", "modifiers": "public static", "return": "List<Segment>", "signature": "List<Segment> getReverseSegmentList(IRing ring,\n      IDirectPosition origin)", "full_signature": "public static List<Segment> getReverseSegmentList(IRing ring,\n      IDirectPosition origin)", "class_method_signature": "Segment.getReverseSegmentList(IRing ring,\n      IDirectPosition origin)", "testcase": false, "constructor": false}, {"identifier": "containsPoint", "parameters": "(IDirectPosition point, double tolerance)", "modifiers": "public", "return": "boolean", "signature": "boolean containsPoint(IDirectPosition point, double tolerance)", "full_signature": "public boolean containsPoint(IDirectPosition point, double tolerance)", "class_method_signature": "Segment.containsPoint(IDirectPosition point, double tolerance)", "testcase": false, "constructor": false}, {"identifier": "containsPoint", "parameters": "(IDirectPosition point)", "modifiers": "public", "return": "boolean", "signature": "boolean containsPoint(IDirectPosition point)", "full_signature": "public boolean containsPoint(IDirectPosition point)", "class_method_signature": "Segment.containsPoint(IDirectPosition point)", "testcase": false, "constructor": false}, {"identifier": "lineContainsPoint", "parameters": "(IDirectPosition point)", "modifiers": "public", "return": "boolean", "signature": "boolean lineContainsPoint(IDirectPosition point)", "full_signature": "public boolean lineContainsPoint(IDirectPosition point)", "class_method_signature": "Segment.lineContainsPoint(IDirectPosition point)", "testcase": false, "constructor": false}, {"identifier": "lineContainsPoint", "parameters": "(IDirectPosition point, double tolerance)", "modifiers": "public", "return": "boolean", "signature": "boolean lineContainsPoint(IDirectPosition point, double tolerance)", "full_signature": "public boolean lineContainsPoint(IDirectPosition point, double tolerance)", "class_method_signature": "Segment.lineContainsPoint(IDirectPosition point, double tolerance)", "testcase": false, "constructor": false}, {"identifier": "getMiddlePoint", "parameters": "()", "modifiers": "public", "return": "IDirectPosition", "signature": "IDirectPosition getMiddlePoint()", "full_signature": "public IDirectPosition getMiddlePoint()", "class_method_signature": "Segment.getMiddlePoint()", "testcase": false, "constructor": false}, {"identifier": "getWeightedMiddlePoint", "parameters": "(double ratio)", "modifiers": "public", "return": "IDirectPosition", "signature": "IDirectPosition getWeightedMiddlePoint(double ratio)", "full_signature": "public IDirectPosition getWeightedMiddlePoint(double ratio)", "class_method_signature": "Segment.getWeightedMiddlePoint(double ratio)", "testcase": false, "constructor": false}, {"identifier": "extendAtExtremities", "parameters": "(double length)", "modifiers": "public", "return": "Segment", "signature": "Segment extendAtExtremities(double length)", "full_signature": "public Segment extendAtExtremities(double length)", "class_method_signature": "Segment.extendAtExtremities(double length)", "testcase": false, "constructor": false}], "file": "geoxygene-spatial/src/main/java/fr/ign/cogit/geoxygene/util/algo/geomstructure/Segment.java"}, "focal_method": {"identifier": "getWeightedMiddlePoint", "parameters": "(double ratio)", "modifiers": "public", "return": "IDirectPosition", "body": "public IDirectPosition getWeightedMiddlePoint(double ratio) {\n    Vector2D vect = new Vector2D(getStartPoint(), getEndPoint());\n    if (ratio == 1.0)\n      return this.getMiddlePoint();\n    else if (ratio < 1) {\n      vect.scalarMultiplication(ratio / 2.0);\n      return vect.translate(getStartPoint());\n    } else {\n      vect.scalarMultiplication(3.0 / (2.0 * ratio));\n      return vect.translate(getStartPoint());\n    }\n  }", "signature": "IDirectPosition getWeightedMiddlePoint(double ratio)", "full_signature": "public IDirectPosition getWeightedMiddlePoint(double ratio)", "class_method_signature": "Segment.getWeightedMiddlePoint(double ratio)", "testcase": false, "constructor": false, "invocations": ["getStartPoint", "getEndPoint", "getMiddlePoint", "scalarMultiplication", "translate", "getStartPoint", "scalarMultiplication", "translate", "getStartPoint"]}, "repository": {"repo_id": 56582318, "url": "https://github.com/IGNF/geoxygene", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 22, "size": 323511, "license": "licensed"}}