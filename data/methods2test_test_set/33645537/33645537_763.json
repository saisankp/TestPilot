{"test_class": {"identifier": "SubscriberTest", "superclass": "", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/SubscriberTest.java"}, "test_case": {"identifier": "testNegativeRequestThrowsIllegalArgumentException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNegativeRequestThrowsIllegalArgumentException() throws InterruptedException {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();\n        Observable.just(1,2,3,4).subscribe(new Subscriber<Integer>() {\n\n            @Override\n            public void onStart() {\n                request(1);\n            }\n            \n            @Override\n            public void onCompleted() {\n                \n            }\n\n            @Override\n            public void onError(Throwable e) {\n               exception.set(e);\n               latch.countDown();\n            }\n\n            @Override\n            public void onNext(Integer t) {\n                request(-1);\n                request(1);\n            }});\n        assertTrue(latch.await(10, TimeUnit.SECONDS));\n        assertTrue(exception.get() instanceof IllegalArgumentException);\n    }", "signature": "void testNegativeRequestThrowsIllegalArgumentException()", "full_signature": "@Test public void testNegativeRequestThrowsIllegalArgumentException()", "class_method_signature": "SubscriberTest.testNegativeRequestThrowsIllegalArgumentException()", "testcase": true, "constructor": false, "invocations": ["subscribe", "just", "request", "set", "countDown", "request", "request", "assertTrue", "await", "assertTrue", "get"]}, "focal_class": {"identifier": "Subscriber", "superclass": "", "interfaces": "implements Observer<T>, Subscription", "fields": [{"original_string": "private final SubscriptionList cs;", "modifier": "private final", "type": "SubscriptionList", "declarator": "cs", "var_name": "cs"}, {"original_string": "private final Subscriber<?> op;", "modifier": "private final", "type": "Subscriber<?>", "declarator": "op", "var_name": "op"}, {"original_string": "private Producer p;", "modifier": "private", "type": "Producer", "declarator": "p", "var_name": "p"}, {"original_string": "private long requested = Long.MIN_VALUE;", "modifier": "private", "type": "long", "declarator": "requested = Long.MIN_VALUE", "var_name": "requested"}], "methods": [{"identifier": "Subscriber", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Subscriber()", "full_signature": "protected  Subscriber()", "class_method_signature": "Subscriber.Subscriber()", "testcase": false, "constructor": true}, {"identifier": "Subscriber", "parameters": "(Subscriber<?> op)", "modifiers": "protected", "return": "", "signature": " Subscriber(Subscriber<?> op)", "full_signature": "protected  Subscriber(Subscriber<?> op)", "class_method_signature": "Subscriber.Subscriber(Subscriber<?> op)", "testcase": false, "constructor": true}, {"identifier": "Subscriber", "parameters": "(Subscriber<?> op, boolean shareSubscriptions)", "modifiers": "protected", "return": "", "signature": " Subscriber(Subscriber<?> op, boolean shareSubscriptions)", "full_signature": "protected  Subscriber(Subscriber<?> op, boolean shareSubscriptions)", "class_method_signature": "Subscriber.Subscriber(Subscriber<?> op, boolean shareSubscriptions)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(Subscription s)", "modifiers": "public final", "return": "void", "signature": "void add(Subscription s)", "full_signature": "public final void add(Subscription s)", "class_method_signature": "Subscriber.add(Subscription s)", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void unsubscribe()", "full_signature": "@Override public final void unsubscribe()", "class_method_signature": "Subscriber.unsubscribe()", "testcase": false, "constructor": false}, {"identifier": "isUnsubscribed", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean isUnsubscribed()", "full_signature": "@Override public final boolean isUnsubscribed()", "class_method_signature": "Subscriber.isUnsubscribed()", "testcase": false, "constructor": false}, {"identifier": "onStart", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void onStart()", "full_signature": "public void onStart()", "class_method_signature": "Subscriber.onStart()", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(long n)", "modifiers": "protected final", "return": "void", "signature": "void request(long n)", "full_signature": "protected final void request(long n)", "class_method_signature": "Subscriber.request(long n)", "testcase": false, "constructor": false}, {"identifier": "setProducer", "parameters": "(Producer producer)", "modifiers": "public", "return": "void", "signature": "void setProducer(Producer producer)", "full_signature": "public void setProducer(Producer producer)", "class_method_signature": "Subscriber.setProducer(Producer producer)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/Subscriber.java"}, "focal_method": {"identifier": "request", "parameters": "(long n)", "modifiers": "protected final", "return": "void", "body": "protected final void request(long n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"number requested cannot be negative: \" + n);\n        } \n        Producer shouldRequest = null;\n        synchronized (this) {\n            if (p != null) {\n                shouldRequest = p;\n            } else if (requested == Long.MIN_VALUE) {\n                requested = n;\n            } else { \n                final long total = requested + n;\n                // check if overflow occurred\n                if (total < 0) {\n                    requested = Long.MAX_VALUE;\n                } else {\n                    requested = total;\n                }\n            }\n        }\n        // after releasing lock\n        if (shouldRequest != null) {\n            shouldRequest.request(n);\n        }\n    }", "signature": "void request(long n)", "full_signature": "protected final void request(long n)", "class_method_signature": "Subscriber.request(long n)", "testcase": false, "constructor": false, "invocations": ["request"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}