{"test_class": {"identifier": "SqlDateNormaliserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedEx = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedEx = ExpectedException.none()", "var_name": "expectedEx"}], "file": "dbfit-java/oracle/src/test/java/dbfit/environment/SqlDateNormaliserTest.java"}, "test_case": {"identifier": "shouldReturnNullIfGivenNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnNullIfGivenNull() throws SQLException {\n        assertNull(new SqlDateNormaliser().transform(null));\n    }", "signature": "void shouldReturnNullIfGivenNull()", "full_signature": "@Test public void shouldReturnNullIfGivenNull()", "class_method_signature": "SqlDateNormaliserTest.shouldReturnNullIfGivenNull()", "testcase": true, "constructor": false, "invocations": ["assertNull", "transform"]}, "focal_class": {"identifier": "SqlDateNormaliser", "superclass": "", "interfaces": "implements TypeTransformer", "fields": [], "methods": [{"identifier": "transform", "parameters": "(Object o)", "modifiers": "@Override public", "return": "Object", "signature": "Object transform(Object o)", "full_signature": "@Override public Object transform(Object o)", "class_method_signature": "SqlDateNormaliser.transform(Object o)", "testcase": false, "constructor": false}], "file": "dbfit-java/oracle/src/main/java/dbfit/environment/SqlDateNormaliser.java"}, "focal_method": {"identifier": "transform", "parameters": "(Object o)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object transform(Object o) throws SQLException {\n        if (o == null)\n            return null;\n        if (!(o instanceof java.sql.Date)) {\n            throw new UnsupportedOperationException(\n                    \"SqlDateNormaliser cannot work with \" + o.getClass());\n        }\n        java.sql.Date ts = (java.sql.Date) o;\n        return new java.sql.Timestamp(ts.getTime());\n    }", "signature": "Object transform(Object o)", "full_signature": "@Override public Object transform(Object o)", "class_method_signature": "SqlDateNormaliser.transform(Object o)", "testcase": false, "constructor": false, "invocations": ["getClass", "getTime"]}, "repository": {"repo_id": 7283919, "url": "https://github.com/dbfit/dbfit", "language": "Java", "is_fork": false, "fork_count": 83, "stargazer_count": 181, "size": 6978, "license": "licensed"}}