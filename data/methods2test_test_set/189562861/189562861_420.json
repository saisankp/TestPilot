{"test_class": {"identifier": "ReferenceConfigCacheTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-config/dubbo-config-api/src/test/java/com/alibaba/dubbo/config/utils/ReferenceConfigCacheTest.java"}, "test_case": {"identifier": "testDestroy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDestroy() throws Exception {\n        ReferenceConfigCache cache = ReferenceConfigCache.getCache();\n        MockReferenceConfig config = buildMockReferenceConfig(\"FooService\", \"group1\", \"1.0.0\");\n        cache.get(config);\n        MockReferenceConfig configCopy = buildMockReferenceConfig(\"XxxService\", \"group1\", \"1.0.0\");\n        cache.get(configCopy);\n        assertEquals(2, cache.cache.size());\n        cache.destroy(config);\n        assertTrue(config.isDestroyMethodRun());\n        assertEquals(1, cache.cache.size());\n        cache.destroy(configCopy);\n        assertTrue(configCopy.isDestroyMethodRun());\n        assertEquals(0, cache.cache.size());\n    }", "signature": "void testDestroy()", "full_signature": "@Test public void testDestroy()", "class_method_signature": "ReferenceConfigCacheTest.testDestroy()", "testcase": true, "constructor": false, "invocations": ["getCache", "buildMockReferenceConfig", "get", "buildMockReferenceConfig", "get", "assertEquals", "size", "destroy", "assertTrue", "isDestroyMethodRun", "assertEquals", "size", "destroy", "assertTrue", "isDestroyMethodRun", "assertEquals", "size"]}, "focal_class": {"identifier": "ReferenceConfigCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String DEFAULT_NAME = \"_DEFAULT_\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_NAME = \"_DEFAULT_\"", "var_name": "DEFAULT_NAME"}, {"original_string": "public static final KeyGenerator DEFAULT_KEY_GENERATOR = new KeyGenerator() {\n        @Override\n        public String generateKey(ReferenceConfig<?> referenceConfig) {\n            String iName = referenceConfig.getInterface();\n            if (StringUtils.isBlank(iName)) {\n                Class<?> clazz = referenceConfig.getInterfaceClass();\n                iName = clazz.getName();\n            }\n            if (StringUtils.isBlank(iName)) {\n                throw new IllegalArgumentException(\"No interface info in ReferenceConfig\" + referenceConfig);\n            }\n\n            StringBuilder ret = new StringBuilder();\n            if (!StringUtils.isBlank(referenceConfig.getGroup())) {\n                ret.append(referenceConfig.getGroup()).append(\"/\");\n            }\n            ret.append(iName);\n            if (!StringUtils.isBlank(referenceConfig.getVersion())) {\n                ret.append(\":\").append(referenceConfig.getVersion());\n            }\n            return ret.toString();\n        }\n    };", "modifier": "public static final", "type": "KeyGenerator", "declarator": "DEFAULT_KEY_GENERATOR = new KeyGenerator() {\n        @Override\n        public String generateKey(ReferenceConfig<?> referenceConfig) {\n            String iName = referenceConfig.getInterface();\n            if (StringUtils.isBlank(iName)) {\n                Class<?> clazz = referenceConfig.getInterfaceClass();\n                iName = clazz.getName();\n            }\n            if (StringUtils.isBlank(iName)) {\n                throw new IllegalArgumentException(\"No interface info in ReferenceConfig\" + referenceConfig);\n            }\n\n            StringBuilder ret = new StringBuilder();\n            if (!StringUtils.isBlank(referenceConfig.getGroup())) {\n                ret.append(referenceConfig.getGroup()).append(\"/\");\n            }\n            ret.append(iName);\n            if (!StringUtils.isBlank(referenceConfig.getVersion())) {\n                ret.append(\":\").append(referenceConfig.getVersion());\n            }\n            return ret.toString();\n        }\n    }", "var_name": "DEFAULT_KEY_GENERATOR"}, {"original_string": "static final ConcurrentMap<String, ReferenceConfigCache> cacheHolder = new ConcurrentHashMap<String, ReferenceConfigCache>();", "modifier": "static final", "type": "ConcurrentMap<String, ReferenceConfigCache>", "declarator": "cacheHolder = new ConcurrentHashMap<String, ReferenceConfigCache>()", "var_name": "cacheHolder"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final KeyGenerator generator;", "modifier": "private final", "type": "KeyGenerator", "declarator": "generator", "var_name": "generator"}, {"original_string": "ConcurrentMap<String, ReferenceConfig<?>> cache = new ConcurrentHashMap<String, ReferenceConfig<?>>();", "modifier": "", "type": "ConcurrentMap<String, ReferenceConfig<?>>", "declarator": "cache = new ConcurrentHashMap<String, ReferenceConfig<?>>()", "var_name": "cache"}], "methods": [{"identifier": "ReferenceConfigCache", "parameters": "(String name, KeyGenerator generator)", "modifiers": "private", "return": "", "signature": " ReferenceConfigCache(String name, KeyGenerator generator)", "full_signature": "private  ReferenceConfigCache(String name, KeyGenerator generator)", "class_method_signature": "ReferenceConfigCache.ReferenceConfigCache(String name, KeyGenerator generator)", "testcase": false, "constructor": true}, {"identifier": "getCache", "parameters": "()", "modifiers": "public static", "return": "ReferenceConfigCache", "signature": "ReferenceConfigCache getCache()", "full_signature": "public static ReferenceConfigCache getCache()", "class_method_signature": "ReferenceConfigCache.getCache()", "testcase": false, "constructor": false}, {"identifier": "getCache", "parameters": "(String name)", "modifiers": "public static", "return": "ReferenceConfigCache", "signature": "ReferenceConfigCache getCache(String name)", "full_signature": "public static ReferenceConfigCache getCache(String name)", "class_method_signature": "ReferenceConfigCache.getCache(String name)", "testcase": false, "constructor": false}, {"identifier": "getCache", "parameters": "(String name, KeyGenerator keyGenerator)", "modifiers": "public static", "return": "ReferenceConfigCache", "signature": "ReferenceConfigCache getCache(String name, KeyGenerator keyGenerator)", "full_signature": "public static ReferenceConfigCache getCache(String name, KeyGenerator keyGenerator)", "class_method_signature": "ReferenceConfigCache.getCache(String name, KeyGenerator keyGenerator)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(ReferenceConfig<T> referenceConfig)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T get(ReferenceConfig<T> referenceConfig)", "full_signature": "@SuppressWarnings(\"unchecked\") public T get(ReferenceConfig<T> referenceConfig)", "class_method_signature": "ReferenceConfigCache.get(ReferenceConfig<T> referenceConfig)", "testcase": false, "constructor": false}, {"identifier": "destroyKey", "parameters": "(String key)", "modifiers": "", "return": "void", "signature": "void destroyKey(String key)", "full_signature": " void destroyKey(String key)", "class_method_signature": "ReferenceConfigCache.destroyKey(String key)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(ReferenceConfig<T> referenceConfig)", "modifiers": "public", "return": "void", "signature": "void destroy(ReferenceConfig<T> referenceConfig)", "full_signature": "public void destroy(ReferenceConfig<T> referenceConfig)", "class_method_signature": "ReferenceConfigCache.destroy(ReferenceConfig<T> referenceConfig)", "testcase": false, "constructor": false}, {"identifier": "destroyAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroyAll()", "full_signature": "public void destroyAll()", "class_method_signature": "ReferenceConfigCache.destroyAll()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ReferenceConfigCache.toString()", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/utils/ReferenceConfigCache.java"}, "focal_method": {"identifier": "destroy", "parameters": "(ReferenceConfig<T> referenceConfig)", "modifiers": "public", "return": "void", "body": "public <T> void destroy(ReferenceConfig<T> referenceConfig) {\n        String key = generator.generateKey(referenceConfig);\n        destroyKey(key);\n    }", "signature": "void destroy(ReferenceConfig<T> referenceConfig)", "full_signature": "public void destroy(ReferenceConfig<T> referenceConfig)", "class_method_signature": "ReferenceConfigCache.destroy(ReferenceConfig<T> referenceConfig)", "testcase": false, "constructor": false, "invocations": ["generateKey", "destroyKey"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}