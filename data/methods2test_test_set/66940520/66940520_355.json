{"test_class": {"identifier": "SchemaToDataFetcherTest", "superclass": "extends DhisConvenienceTest", "interfaces": "", "fields": [{"original_string": "private SchemaToDataFetcher subject;", "modifier": "private", "type": "SchemaToDataFetcher", "declarator": "subject", "var_name": "subject"}, {"original_string": "@Mock\n    private SessionFactory sessionFactory;", "modifier": "@Mock\n    private", "type": "SessionFactory", "declarator": "sessionFactory", "var_name": "sessionFactory"}, {"original_string": "@Mock\n    private Session session;", "modifier": "@Mock\n    private", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "@Mock\n    private Query query;", "modifier": "@Mock\n    private", "type": "Query", "declarator": "query", "var_name": "query"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}], "file": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/preheat/SchemaToDataFetcherTest.java"}, "test_case": {"identifier": "verifyInput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyInput()\n    {\n        assertThat(subject.fetch( null ), hasSize(0));\n    }", "signature": "void verifyInput()", "full_signature": "@Test public void verifyInput()", "class_method_signature": "SchemaToDataFetcherTest.verifyInput()", "testcase": true, "constructor": false, "invocations": ["assertThat", "fetch", "hasSize"]}, "focal_class": {"identifier": "SchemaToDataFetcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Log log = LogFactory.getLog( SchemaToDataFetcher.class );", "modifier": "protected static final", "type": "Log", "declarator": "log = LogFactory.getLog( SchemaToDataFetcher.class )", "var_name": "log"}, {"original_string": "private final SessionFactory sessionFactory;", "modifier": "private final", "type": "SessionFactory", "declarator": "sessionFactory", "var_name": "sessionFactory"}], "methods": [{"identifier": "SchemaToDataFetcher", "parameters": "( SessionFactory sessionFactory )", "modifiers": "public", "return": "", "signature": " SchemaToDataFetcher( SessionFactory sessionFactory )", "full_signature": "public  SchemaToDataFetcher( SessionFactory sessionFactory )", "class_method_signature": "SchemaToDataFetcher.SchemaToDataFetcher( SessionFactory sessionFactory )", "testcase": false, "constructor": true}, {"identifier": "fetch", "parameters": "( Schema schema )", "modifiers": "public", "return": "List<? extends IdentifiableObject>", "signature": "List<? extends IdentifiableObject> fetch( Schema schema )", "full_signature": "public List<? extends IdentifiableObject> fetch( Schema schema )", "class_method_signature": "SchemaToDataFetcher.fetch( Schema schema )", "testcase": false, "constructor": false}, {"identifier": "mapUniqueFields", "parameters": "( Schema schema )", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "List<? extends IdentifiableObject>", "signature": "List<? extends IdentifiableObject> mapUniqueFields( Schema schema )", "full_signature": "@SuppressWarnings(\"unchecked\") private List<? extends IdentifiableObject> mapUniqueFields( Schema schema )", "class_method_signature": "SchemaToDataFetcher.mapUniqueFields( Schema schema )", "testcase": false, "constructor": false}, {"identifier": "handleMultipleColumn", "parameters": "( List<Object[]> objects, List<Property> uniqueProperties,\n        Schema schema )", "modifiers": "private", "return": "List<IdentifiableObject>", "signature": "List<IdentifiableObject> handleMultipleColumn( List<Object[]> objects, List<Property> uniqueProperties,\n        Schema schema )", "full_signature": "private List<IdentifiableObject> handleMultipleColumn( List<Object[]> objects, List<Property> uniqueProperties,\n        Schema schema )", "class_method_signature": "SchemaToDataFetcher.handleMultipleColumn( List<Object[]> objects, List<Property> uniqueProperties,\n        Schema schema )", "testcase": false, "constructor": false}, {"identifier": "handleSingleColumn", "parameters": "( List<Object> objects, List<Property> uniqueProperties,\n        Schema schema )", "modifiers": "private", "return": "List<IdentifiableObject>", "signature": "List<IdentifiableObject> handleSingleColumn( List<Object> objects, List<Property> uniqueProperties,\n        Schema schema )", "full_signature": "private List<IdentifiableObject> handleSingleColumn( List<Object> objects, List<Property> uniqueProperties,\n        Schema schema )", "class_method_signature": "SchemaToDataFetcher.handleSingleColumn( List<Object> objects, List<Property> uniqueProperties,\n        Schema schema )", "testcase": false, "constructor": false}, {"identifier": "addToResult", "parameters": "( Schema schema, Map<String, Object> valuesMap, List<IdentifiableObject> resultsObjects )", "modifiers": "private", "return": "void", "signature": "void addToResult( Schema schema, Map<String, Object> valuesMap, List<IdentifiableObject> resultsObjects )", "full_signature": "private void addToResult( Schema schema, Map<String, Object> valuesMap, List<IdentifiableObject> resultsObjects )", "class_method_signature": "SchemaToDataFetcher.addToResult( Schema schema, Map<String, Object> valuesMap, List<IdentifiableObject> resultsObjects )", "testcase": false, "constructor": false}, {"identifier": "extractUniqueFields", "parameters": "( List<Property> uniqueProperties )", "modifiers": "private", "return": "String", "signature": "String extractUniqueFields( List<Property> uniqueProperties )", "full_signature": "private String extractUniqueFields( List<Property> uniqueProperties )", "class_method_signature": "SchemaToDataFetcher.extractUniqueFields( List<Property> uniqueProperties )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/preheat/SchemaToDataFetcher.java"}, "focal_method": {"identifier": "fetch", "parameters": "( Schema schema )", "modifiers": "public", "return": "List<? extends IdentifiableObject>", "body": "public List<? extends IdentifiableObject> fetch( Schema schema )\n    {\n        if ( schema == null )\n        {\n            return Collections.emptyList();\n        }\n\n        return mapUniqueFields(schema);\n    }", "signature": "List<? extends IdentifiableObject> fetch( Schema schema )", "full_signature": "public List<? extends IdentifiableObject> fetch( Schema schema )", "class_method_signature": "SchemaToDataFetcher.fetch( Schema schema )", "testcase": false, "constructor": false, "invocations": ["emptyList", "mapUniqueFields"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}