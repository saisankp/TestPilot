{"test_class": {"identifier": "ThreadUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ThreadUtilTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ThreadUtilTest.class)", "var_name": "logger"}], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/ThreadUtilTest.java"}, "test_case": {"identifier": "getAllThreadsMatching", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAllThreadsMatching() {\n        // try various regular expressions\n\n        Thread[] allThreads0 = ThreadUtil.getAllThreadsMatching(\"main\");\n        Assert.assertEquals(1, allThreads0.length);\n\n        Thread[] allThreads1 = ThreadUtil.getAllThreadsMatching(\"(?i).*Main.*\");\n        Assert.assertEquals(1, allThreads1.length);\n\n        // the two previous should match\n        Assert.assertEquals(allThreads0[0].getId(), allThreads1[0].getId());\n\n        Thread[] allThreads2 = ThreadUtil.getAllThreadsMatching(\".*main.*\");\n        Assert.assertEquals(1, allThreads2.length);\n\n        // the two previous should match\n        Assert.assertEquals(allThreads0[0].getId(), allThreads2[0].getId());\n        \n        // no matches\n        Thread[] allThreads3 = ThreadUtil.getAllThreadsMatching(\".*Main.*\");\n        Assert.assertEquals(0, allThreads3.length);\n    }", "signature": "void getAllThreadsMatching()", "full_signature": "@Test public void getAllThreadsMatching()", "class_method_signature": "ThreadUtilTest.getAllThreadsMatching()", "testcase": true, "constructor": false, "invocations": ["getAllThreadsMatching", "assertEquals", "getAllThreadsMatching", "assertEquals", "assertEquals", "getId", "getId", "getAllThreadsMatching", "assertEquals", "assertEquals", "getId", "getId", "getAllThreadsMatching", "assertEquals"]}, "focal_class": {"identifier": "ThreadUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getRootThreadGroup", "parameters": "()", "modifiers": "static public", "return": "ThreadGroup", "signature": "ThreadGroup getRootThreadGroup()", "full_signature": "static public ThreadGroup getRootThreadGroup()", "class_method_signature": "ThreadUtil.getRootThreadGroup()", "testcase": false, "constructor": false}, {"identifier": "getAllThreads", "parameters": "()", "modifiers": "static public", "return": "Thread[]", "signature": "Thread[] getAllThreads()", "full_signature": "static public Thread[] getAllThreads()", "class_method_signature": "ThreadUtil.getAllThreads()", "testcase": false, "constructor": false}, {"identifier": "getThread", "parameters": "(final long id)", "modifiers": "static public", "return": "Thread", "signature": "Thread getThread(final long id)", "full_signature": "static public Thread getThread(final long id)", "class_method_signature": "ThreadUtil.getThread(final long id)", "testcase": false, "constructor": false}, {"identifier": "getAllThreadsMatching", "parameters": "(final String regex)", "modifiers": "static public", "return": "Thread[]", "signature": "Thread[] getAllThreadsMatching(final String regex)", "full_signature": "static public Thread[] getAllThreadsMatching(final String regex)", "class_method_signature": "ThreadUtil.getAllThreadsMatching(final String regex)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/ThreadUtil.java"}, "focal_method": {"identifier": "getAllThreadsMatching", "parameters": "(final String regex)", "modifiers": "static public", "return": "Thread[]", "body": "static public Thread[] getAllThreadsMatching(final String regex) {\n        if (regex == null)\n            throw new NullPointerException(\"Null thread name regex\");\n        final Thread[] threads = getAllThreads();\n        ArrayList<Thread> matchingThreads = new ArrayList<Thread>();\n        for (Thread thread : threads) {\n            if (thread.getName().matches(regex)) {\n                matchingThreads.add(thread);\n            }\n        }\n        return matchingThreads.toArray(new Thread[0]);\n    }", "signature": "Thread[] getAllThreadsMatching(final String regex)", "full_signature": "static public Thread[] getAllThreadsMatching(final String regex)", "class_method_signature": "ThreadUtil.getAllThreadsMatching(final String regex)", "testcase": false, "constructor": false, "invocations": ["getAllThreads", "matches", "getName", "add", "toArray"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}