{"test_class": {"identifier": "ServiceProviderConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@MockBean\n  ConfigHolder mockConfigHolder;", "modifier": "@MockBean", "type": "ConfigHolder", "declarator": "mockConfigHolder", "var_name": "mockConfigHolder"}], "file": "eidas-middleware/src/test/java/de/governikus/eumw/eidasmiddleware/ServiceProviderConfigTest.java"}, "test_case": {"identifier": "testTwoMetadataFiles", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testTwoMetadataFiles() throws CertificateException, URISyntaxException, FileNotFoundException\n  {\n    URL metadataDirURL = this.getClass().getResource(\"/twoMetadataFiles\");\n    Mockito.when(mockConfigHolder.getProviderConfigDir()).thenReturn(new File(metadataDirURL.toURI()));\n    URL sigCertURL = this.getClass().getResource(\"/twoMetadataFiles/sigCert.crt\");\n    Mockito.when(mockConfigHolder.getMetadataSignatureCert())\n           .thenReturn(readCertificate(new File(sigCertURL.toURI())));\n\n    ServiceProviderConfig config = new ServiceProviderConfig(mockConfigHolder);\n    Assertions.assertNotNull(config.getProviderByEntityID(\"https://demo.mein-servicekonto.de/EidasNode/ConnectorMetadata?SP=demo_epa_20\"),\n                             \"First metadata expected\");\n    Assertions.assertNotNull(config.getProviderByEntityID(\"https://demo.mein-servicekonto.de/EidasNode/ConnectorMetadata?SP=demo_epa\"),\n                             \"Second metadata expected\");\n  }", "signature": "void testTwoMetadataFiles()", "full_signature": "@Test void testTwoMetadataFiles()", "class_method_signature": "ServiceProviderConfigTest.testTwoMetadataFiles()", "testcase": true, "constructor": false, "invocations": ["getResource", "getClass", "thenReturn", "when", "getProviderConfigDir", "toURI", "getResource", "getClass", "thenReturn", "when", "getMetadataSignatureCert", "readCertificate", "toURI", "assertNotNull", "getProviderByEntityID", "assertNotNull", "getProviderByEntityID"]}, "focal_class": {"identifier": "ServiceProviderConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ConfigHolder configHolder;", "modifier": "private final", "type": "ConfigHolder", "declarator": "configHolder", "var_name": "configHolder"}, {"original_string": "private final Map<String, RequestingServiceProvider> allProviders = new HashMap<>();", "modifier": "private final", "type": "Map<String, RequestingServiceProvider>", "declarator": "allProviders = new HashMap<>()", "var_name": "allProviders"}], "methods": [{"identifier": "ServiceProviderConfig", "parameters": "(ConfigHolder configHolder)", "modifiers": "public", "return": "", "signature": " ServiceProviderConfig(ConfigHolder configHolder)", "full_signature": "public  ServiceProviderConfig(ConfigHolder configHolder)", "class_method_signature": "ServiceProviderConfig.ServiceProviderConfig(ConfigHolder configHolder)", "testcase": false, "constructor": true}, {"identifier": "loadMetadataFiles", "parameters": "()", "modifiers": "private final", "return": "void", "signature": "void loadMetadataFiles()", "full_signature": "private final void loadMetadataFiles()", "class_method_signature": "ServiceProviderConfig.loadMetadataFiles()", "testcase": false, "constructor": false}, {"identifier": "getProviderByEntityID", "parameters": "(String entityID)", "modifiers": "public", "return": "RequestingServiceProvider", "signature": "RequestingServiceProvider getProviderByEntityID(String entityID)", "full_signature": "public RequestingServiceProvider getProviderByEntityID(String entityID)", "class_method_signature": "ServiceProviderConfig.getProviderByEntityID(String entityID)", "testcase": false, "constructor": false}], "file": "eidas-middleware/src/main/java/de/governikus/eumw/eidasmiddleware/ServiceProviderConfig.java"}, "focal_method": {"identifier": "getProviderByEntityID", "parameters": "(String entityID)", "modifiers": "public", "return": "RequestingServiceProvider", "body": "public RequestingServiceProvider getProviderByEntityID(String entityID)\n  {\n    return allProviders.get(entityID);\n  }", "signature": "RequestingServiceProvider getProviderByEntityID(String entityID)", "full_signature": "public RequestingServiceProvider getProviderByEntityID(String entityID)", "class_method_signature": "ServiceProviderConfig.getProviderByEntityID(String entityID)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 133799133, "url": "https://github.com/Governikus/eidas-middleware", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 15, "size": 2286, "license": "licensed"}}