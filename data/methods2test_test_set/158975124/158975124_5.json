{"test_class": {"identifier": "DefaultIoTSerializationSchemaTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-iotdb-connector/src/test/java/org/apache/iotdb/flink/DefaultIoTSerializationSchemaTest.java"}, "test_case": {"identifier": "serialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void serialize() {\n        IoTDBOptions options = new IoTDBOptions();\n        options.setTimeseriesOptionList(Lists.newArrayList(new IoTDBOptions.TimeseriesOption(\"root.sg.D01.temperature\")));\n        DefaultIoTSerializationSchema serializationSchema = new DefaultIoTSerializationSchema();\n\n        Map<String,String> tuple = new HashMap();\n        tuple.put(\"device\", \"root.sg.D01\");\n        tuple.put(\"timestamp\", \"1581861293000\");\n        tuple.put(\"measurements\", \"temperature\");\n        tuple.put(\"types\", \"DOUBLE\");\n        tuple.put(\"values\", \"36.5\");\n\n        Event event = serializationSchema.serialize(tuple);\n        assertEquals(tuple.get(\"device\"), event.getDevice());\n        assertEquals(tuple.get(\"timestamp\"), String.valueOf(event.getTimestamp()));\n        assertEquals(tuple.get(\"measurements\"), event.getMeasurements().get(0));\n        assertEquals(tuple.get(\"types\"), event.getTypes().get(0).toString());\n        assertEquals(tuple.get(\"values\"), String.valueOf(event.getValues().get(0)));\n    }", "signature": "void serialize()", "full_signature": "@Test public void serialize()", "class_method_signature": "DefaultIoTSerializationSchemaTest.serialize()", "testcase": true, "constructor": false, "invocations": ["setTimeseriesOptionList", "newArrayList", "put", "put", "put", "put", "put", "serialize", "assertEquals", "get", "getDevice", "assertEquals", "get", "valueOf", "getTimestamp", "assertEquals", "get", "get", "getMeasurements", "assertEquals", "get", "toString", "get", "getTypes", "assertEquals", "get", "valueOf", "get", "getValues"]}, "focal_class": {"identifier": "DefaultIoTSerializationSchema", "superclass": "", "interfaces": "implements IoTSerializationSchema<Map<String, String>>", "fields": [{"original_string": "private String fieldDevice = \"device\";", "modifier": "private", "type": "String", "declarator": "fieldDevice = \"device\"", "var_name": "fieldDevice"}, {"original_string": "private String fieldTimestamp = \"timestamp\";", "modifier": "private", "type": "String", "declarator": "fieldTimestamp = \"timestamp\"", "var_name": "fieldTimestamp"}, {"original_string": "private String fieldMeasurements = \"measurements\";", "modifier": "private", "type": "String", "declarator": "fieldMeasurements = \"measurements\"", "var_name": "fieldMeasurements"}, {"original_string": "private String fieldValues = \"values\";", "modifier": "private", "type": "String", "declarator": "fieldValues = \"values\"", "var_name": "fieldValues"}, {"original_string": "private String fieldTypes = \"types\";", "modifier": "private", "type": "String", "declarator": "fieldTypes = \"types\"", "var_name": "fieldTypes"}, {"original_string": "private String separator = \",\";", "modifier": "private", "type": "String", "declarator": "separator = \",\"", "var_name": "separator"}], "methods": [{"identifier": "serialize", "parameters": "(Map<String, String> tuple)", "modifiers": "@Override public", "return": "Event", "signature": "Event serialize(Map<String, String> tuple)", "full_signature": "@Override public Event serialize(Map<String, String> tuple)", "class_method_signature": "DefaultIoTSerializationSchema.serialize(Map<String, String> tuple)", "testcase": false, "constructor": false}, {"identifier": "getFieldDevice", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFieldDevice()", "full_signature": "public String getFieldDevice()", "class_method_signature": "DefaultIoTSerializationSchema.getFieldDevice()", "testcase": false, "constructor": false}, {"identifier": "setFieldDevice", "parameters": "(String fieldDevice)", "modifiers": "public", "return": "void", "signature": "void setFieldDevice(String fieldDevice)", "full_signature": "public void setFieldDevice(String fieldDevice)", "class_method_signature": "DefaultIoTSerializationSchema.setFieldDevice(String fieldDevice)", "testcase": false, "constructor": false}, {"identifier": "getFieldTimestamp", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFieldTimestamp()", "full_signature": "public String getFieldTimestamp()", "class_method_signature": "DefaultIoTSerializationSchema.getFieldTimestamp()", "testcase": false, "constructor": false}, {"identifier": "setFieldTimestamp", "parameters": "(String fieldTimestamp)", "modifiers": "public", "return": "void", "signature": "void setFieldTimestamp(String fieldTimestamp)", "full_signature": "public void setFieldTimestamp(String fieldTimestamp)", "class_method_signature": "DefaultIoTSerializationSchema.setFieldTimestamp(String fieldTimestamp)", "testcase": false, "constructor": false}, {"identifier": "getFieldMeasurements", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFieldMeasurements()", "full_signature": "public String getFieldMeasurements()", "class_method_signature": "DefaultIoTSerializationSchema.getFieldMeasurements()", "testcase": false, "constructor": false}, {"identifier": "setFieldMeasurements", "parameters": "(String fieldMeasurements)", "modifiers": "public", "return": "void", "signature": "void setFieldMeasurements(String fieldMeasurements)", "full_signature": "public void setFieldMeasurements(String fieldMeasurements)", "class_method_signature": "DefaultIoTSerializationSchema.setFieldMeasurements(String fieldMeasurements)", "testcase": false, "constructor": false}, {"identifier": "getFieldValues", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFieldValues()", "full_signature": "public String getFieldValues()", "class_method_signature": "DefaultIoTSerializationSchema.getFieldValues()", "testcase": false, "constructor": false}, {"identifier": "setFieldValues", "parameters": "(String fieldValues)", "modifiers": "public", "return": "void", "signature": "void setFieldValues(String fieldValues)", "full_signature": "public void setFieldValues(String fieldValues)", "class_method_signature": "DefaultIoTSerializationSchema.setFieldValues(String fieldValues)", "testcase": false, "constructor": false}, {"identifier": "getSeparator", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSeparator()", "full_signature": "public String getSeparator()", "class_method_signature": "DefaultIoTSerializationSchema.getSeparator()", "testcase": false, "constructor": false}, {"identifier": "setSeparator", "parameters": "(String separator)", "modifiers": "public", "return": "void", "signature": "void setSeparator(String separator)", "full_signature": "public void setSeparator(String separator)", "class_method_signature": "DefaultIoTSerializationSchema.setSeparator(String separator)", "testcase": false, "constructor": false}], "file": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/DefaultIoTSerializationSchema.java"}, "focal_method": {"identifier": "serialize", "parameters": "(Map<String, String> tuple)", "modifiers": "@Override public", "return": "Event", "body": "@Override\n  public Event serialize(Map<String, String> tuple) {\n    if (tuple == null) {\n      return null;\n    }\n\n    String device = tuple.get(fieldDevice);\n\n    String ts = tuple.get(fieldTimestamp);\n    Long timestamp = ts == null ? System.currentTimeMillis() : Long.parseLong(ts);\n\n    List<String> measurements = null;\n    if (tuple.get(fieldMeasurements) != null) {\n      measurements = Arrays.asList(tuple.get(fieldMeasurements).split(separator));\n    }\n\n    List<TSDataType> types = new ArrayList<>();\n    for (String type : tuple.get(fieldTypes).split(separator)) {\n      types.add(TSDataType.valueOf(type));\n    }\n\n    List<Object> values = new ArrayList<>();\n    String[] valuesStr = tuple.get(fieldValues).split(separator);\n    for (int i = 0; i < valuesStr.length; i++) {\n      switch (types.get(i)) {\n        case INT64:\n          values.add(Long.parseLong(valuesStr[i]));\n          break;\n        case DOUBLE:\n          values.add(Double.parseDouble(valuesStr[i]));\n          break;\n        case INT32:\n          values.add(Integer.parseInt(valuesStr[i]));\n          break;\n        case TEXT:\n          values.add(valuesStr[i]);\n          break;\n        case FLOAT:\n          values.add(Float.parseFloat(valuesStr[i]));\n          break;\n        case BOOLEAN:\n          values.add(Boolean.parseBoolean(valuesStr[i]));\n          break;\n      }\n    }\n\n    return new Event(device, timestamp, measurements, types, values);\n  }", "signature": "Event serialize(Map<String, String> tuple)", "full_signature": "@Override public Event serialize(Map<String, String> tuple)", "class_method_signature": "DefaultIoTSerializationSchema.serialize(Map<String, String> tuple)", "testcase": false, "constructor": false, "invocations": ["get", "get", "currentTimeMillis", "parseLong", "get", "asList", "split", "get", "split", "get", "add", "valueOf", "split", "get", "get", "add", "parseLong", "add", "parseDouble", "add", "parseInt", "add", "add", "parseFloat", "add", "parseBoolean"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}