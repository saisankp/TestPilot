{"test_class": {"identifier": "HttpClientImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HttpClientImpl httpClient;", "modifier": "private", "type": "HttpClientImpl", "declarator": "httpClient", "var_name": "httpClient"}], "file": "http-support/src/test/java/org/eclipse/sw360/antenna/http/HttpClientImplTest.java"}, "test_case": {"identifier": "testResponseIsClosed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResponseIsClosed() throws IOException {\n        Object result = new Object();\n        Response response = createResponseMock();\n        CompletableFuture<Object> future = new CompletableFuture<>();\n        ResponseProcessor<Object> processor = createProcessorMock();\n        when(processor.process(any())).thenReturn(result);\n\n        Callback callback = httpClient.createCallback(processor, future);\n        callback.onResponse(createCallMock(), response);\n        assertThat(future.join()).isEqualTo(result);\n        verify(response).close();\n    }", "signature": "void testResponseIsClosed()", "full_signature": "@Test public void testResponseIsClosed()", "class_method_signature": "HttpClientImplTest.testResponseIsClosed()", "testcase": true, "constructor": false, "invocations": ["createResponseMock", "createProcessorMock", "thenReturn", "when", "process", "any", "createCallback", "onResponse", "createCallMock", "isEqualTo", "assertThat", "join", "close", "verify"]}, "focal_class": {"identifier": "HttpClientImpl", "superclass": "", "interfaces": "implements HttpClient", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(HttpClientImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(HttpClientImpl.class)", "var_name": "LOG"}, {"original_string": "private final OkHttpClient client;", "modifier": "private final", "type": "OkHttpClient", "declarator": "client", "var_name": "client"}, {"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "HttpClientImpl", "parameters": "(OkHttpClient client, ObjectMapper mapper)", "modifiers": "public", "return": "", "signature": " HttpClientImpl(OkHttpClient client, ObjectMapper mapper)", "full_signature": "public  HttpClientImpl(OkHttpClient client, ObjectMapper mapper)", "class_method_signature": "HttpClientImpl.HttpClientImpl(OkHttpClient client, ObjectMapper mapper)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(Consumer<? super RequestBuilder> producer,\n                                            ResponseProcessor<? extends T> processor)", "modifiers": "@Override public", "return": "CompletableFuture<T>", "signature": "CompletableFuture<T> execute(Consumer<? super RequestBuilder> producer,\n                                            ResponseProcessor<? extends T> processor)", "full_signature": "@Override public CompletableFuture<T> execute(Consumer<? super RequestBuilder> producer,\n                                            ResponseProcessor<? extends T> processor)", "class_method_signature": "HttpClientImpl.execute(Consumer<? super RequestBuilder> producer,\n                                            ResponseProcessor<? extends T> processor)", "testcase": false, "constructor": false}, {"identifier": "createCallback", "parameters": "(ResponseProcessor<? extends T> processor, CompletableFuture<T> resultFuture)", "modifiers": "", "return": "Callback", "signature": "Callback createCallback(ResponseProcessor<? extends T> processor, CompletableFuture<T> resultFuture)", "full_signature": " Callback createCallback(ResponseProcessor<? extends T> processor, CompletableFuture<T> resultFuture)", "class_method_signature": "HttpClientImpl.createCallback(ResponseProcessor<? extends T> processor, CompletableFuture<T> resultFuture)", "testcase": false, "constructor": false}, {"identifier": "getClient", "parameters": "()", "modifiers": "", "return": "OkHttpClient", "signature": "OkHttpClient getClient()", "full_signature": " OkHttpClient getClient()", "class_method_signature": "HttpClientImpl.getClient()", "testcase": false, "constructor": false}, {"identifier": "getMapper", "parameters": "()", "modifiers": "", "return": "ObjectMapper", "signature": "ObjectMapper getMapper()", "full_signature": " ObjectMapper getMapper()", "class_method_signature": "HttpClientImpl.getMapper()", "testcase": false, "constructor": false}], "file": "http-support/src/main/java/org/eclipse/sw360/antenna/http/HttpClientImpl.java"}, "focal_method": {"identifier": "createCallback", "parameters": "(ResponseProcessor<? extends T> processor, CompletableFuture<T> resultFuture)", "modifiers": "", "return": "Callback", "body": "<T> Callback createCallback(ResponseProcessor<? extends T> processor, CompletableFuture<T> resultFuture) {\n        return new Callback() {\n            @Override\n            public void onFailure(@NotNull Call call, @NotNull IOException e) {\n                resultFuture.completeExceptionally(e);\n                LOG.error(\"Failed HTTP request {} {}\", call.request().method(), call.request().url(), e);\n            }\n\n            @Override\n            public void onResponse(@NotNull Call call, @NotNull Response response) {\n                try {\n                    LOG.debug(\"HTTP response {} - {} {}\", response.code(), response.request().method(),\n                            response.request().url());\n                    T result = processor.process(new ResponseImpl(response));\n                    resultFuture.complete(result);\n                } catch (Exception e) {\n                    // we really need to catch all exceptions here; otherwise, a client waiting for the\n                    // future to complete will wait forever\n                    resultFuture.completeExceptionally(e);\n                    LOG.error(\"Failed HTTP request {} {}\", call.request().method(), call.request().url(), e);\n                } finally {\n                    response.close();\n                }\n            }\n        };\n    }", "signature": "Callback createCallback(ResponseProcessor<? extends T> processor, CompletableFuture<T> resultFuture)", "full_signature": " Callback createCallback(ResponseProcessor<? extends T> processor, CompletableFuture<T> resultFuture)", "class_method_signature": "HttpClientImpl.createCallback(ResponseProcessor<? extends T> processor, CompletableFuture<T> resultFuture)", "testcase": false, "constructor": false, "invocations": ["completeExceptionally", "error", "method", "request", "url", "request", "debug", "code", "method", "request", "url", "request", "process", "complete", "completeExceptionally", "error", "method", "request", "url", "request", "close"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}