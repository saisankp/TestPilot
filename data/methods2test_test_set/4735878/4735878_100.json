{"test_class": {"identifier": "RSyntaxSQLParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String DATABASE_PATH = \"jdbc:h2:mem:syntax\";", "modifier": "public static final", "type": "String", "declarator": "DATABASE_PATH = \"jdbc:h2:mem:syntax\"", "var_name": "DATABASE_PATH"}], "file": "bundles/sqlconsole-parser/src/test/java/org/orbisgis/scp/RSyntaxSQLParserTest.java"}, "test_case": {"identifier": "testBounds", "parameters": "()", "modifiers": "@Test //(timeout = 500) public", "return": "void", "body": "@Test //(timeout = 500)\n    public void testBounds() throws Exception {\n        assumeTrue(!GraphicsEnvironment.isHeadless());\n        // Create H2 DataSource\n        org.h2.Driver driver = org.h2.Driver.load();\n        OsgiDataSourceFactory dataSourceFactory = new OsgiDataSourceFactory(driver);\n        Properties properties = new Properties();\n        properties.setProperty(OsgiDataSourceFactory.JDBC_URL, DATABASE_PATH);\n\n        // Create document\n        RSyntaxDocument document = new RSyntaxDocument(\"sql\");\n        RSyntaxTextArea rSyntaxTextArea = new RSyntaxTextArea(document);\n        rSyntaxTextArea.setText(\"alter\");\n        RSyntaxSQLParser parser = new RSyntaxSQLParser(dataSourceFactory.createDataSource(properties));\n\n        ParseResult res = parser.parse((RSyntaxDocument)rSyntaxTextArea.getDocument(), \"\");\n        List noticeList = res.getNotices();\n        assertEquals(1, noticeList.size());\n        ParserNotice notice = (ParserNotice) noticeList.get(0);\n        assertEquals(0, notice.getLine());\n        assertEquals(0, notice.getOffset());\n        assertEquals(5, notice.getLength());\n    }", "signature": "void testBounds()", "full_signature": "@Test //(timeout = 500) public void testBounds()", "class_method_signature": "RSyntaxSQLParserTest.testBounds()", "testcase": true, "constructor": false, "invocations": ["assumeTrue", "isHeadless", "load", "setProperty", "setText", "createDataSource", "parse", "getDocument", "getNotices", "assertEquals", "size", "get", "assertEquals", "getLine", "assertEquals", "getOffset", "assertEquals", "getLength"]}, "focal_class": {"identifier": "RSyntaxSQLParser", "superclass": "extends AbstractParser", "interfaces": "", "fields": [{"original_string": "private DataSource dataSource;", "modifier": "private", "type": "DataSource", "declarator": "dataSource", "var_name": "dataSource"}, {"original_string": "private Logger log = LoggerFactory.getLogger(RSyntaxSQLParser.class);", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RSyntaxSQLParser.class)", "var_name": "log"}, {"original_string": "public static int WORD_POSITION = 0;", "modifier": "public static", "type": "int", "declarator": "WORD_POSITION = 0", "var_name": "WORD_POSITION"}, {"original_string": "public static int WORD_LENGTH = 1;", "modifier": "public static", "type": "int", "declarator": "WORD_LENGTH = 1", "var_name": "WORD_LENGTH"}], "methods": [{"identifier": "RSyntaxSQLParser", "parameters": "(DataSource dataSource)", "modifiers": "public", "return": "", "signature": " RSyntaxSQLParser(DataSource dataSource)", "full_signature": "public  RSyntaxSQLParser(DataSource dataSource)", "class_method_signature": "RSyntaxSQLParser.RSyntaxSQLParser(DataSource dataSource)", "testcase": false, "constructor": true}, {"identifier": "getLastWordPositionAndLength", "parameters": "(String statement, int end)", "modifiers": "public static", "return": "int[]", "signature": "int[] getLastWordPositionAndLength(String statement, int end)", "full_signature": "public static int[] getLastWordPositionAndLength(String statement, int end)", "class_method_signature": "RSyntaxSQLParser.getLastWordPositionAndLength(String statement, int end)", "testcase": false, "constructor": false}, {"identifier": "setDataSource", "parameters": "(DataSource dataSource)", "modifiers": "public", "return": "void", "signature": "void setDataSource(DataSource dataSource)", "full_signature": "public void setDataSource(DataSource dataSource)", "class_method_signature": "RSyntaxSQLParser.setDataSource(DataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(RSyntaxDocument doc, String style)", "modifiers": "@Override public", "return": "ParseResult", "signature": "ParseResult parse(RSyntaxDocument doc, String style)", "full_signature": "@Override public ParseResult parse(RSyntaxDocument doc, String style)", "class_method_signature": "RSyntaxSQLParser.parse(RSyntaxDocument doc, String style)", "testcase": false, "constructor": false}], "file": "bundles/sqlconsole-parser/src/main/java/org/orbisgis/scp/RSyntaxSQLParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(RSyntaxDocument doc, String style)", "modifiers": "@Override public", "return": "ParseResult", "body": "@Override\n    public ParseResult parse(RSyntaxDocument doc, String style) {\n        DefaultParseResult res = new DefaultParseResult(this);\n        int docLength = doc.getLength();\n        if (docLength==0) {\n            return res;\n        }\n        DocumentSQLReader documentReader = new DocumentSQLReader(doc);\n        long start = System.currentTimeMillis();\n        try {\n            try (Connection connection = dataSource.getConnection()) {\n                while (documentReader.hasNext()) {\n                    String statement = documentReader.next();\n                    if (!documentReader.isInsideRemark()) {\n                        try {\n                            connection.prepareStatement(statement);\n                        } catch (SQLException ex) {\n                            // Find the beginning of the rightmost word in error\n                            int syntaxErrorPosition = ex.getLocalizedMessage().indexOf(\"[*]\");\n                            int syntaxErrorLength;\n                            if (syntaxErrorPosition == -1) {\n                                // Could not find exact position, underline all the statement (remove preceding line break)\n                                syntaxErrorPosition = statement.indexOf(statement.trim());\n                                syntaxErrorLength = statement.length() - syntaxErrorPosition;\n                            } else {\n                                int[] syntaxWord = getLastWordPositionAndLength(ex.getLocalizedMessage(), syntaxErrorPosition);\n                                String word = ex.getLocalizedMessage().substring(syntaxWord[WORD_POSITION], syntaxWord[WORD_POSITION] + syntaxWord[WORD_LENGTH]);\n                                syntaxErrorPosition = statement.toLowerCase().indexOf(word.toLowerCase());\n                                syntaxErrorLength = syntaxWord[WORD_LENGTH];\n                            }\n                            // Compute syntax error position from the beginning of the document, (-1 is length of ; char)\n                            int syntaxErrorPositionOffset = Math.min(docLength,\n                                    documentReader.getPosition() + syntaxErrorPosition);\n                            DefaultParserNotice notice = new DefaultParserNotice(this, ex.getLocalizedMessage(),\n                                    documentReader.getLineIndex(syntaxErrorPositionOffset), syntaxErrorPositionOffset,\n                                    syntaxErrorLength);\n                            notice.setLevel(ParserNotice.Level.ERROR);\n                            res.addNotice(notice);\n                        }\n                    }\n                }\n            }\n        } catch (SQLException ex) {\n            log.trace(ex.getLocalizedMessage(), ex);\n            // ignore\n        }\n        long time = System.currentTimeMillis() - start;\n        res.setParseTime(time);\n        return res;\n    }", "signature": "ParseResult parse(RSyntaxDocument doc, String style)", "full_signature": "@Override public ParseResult parse(RSyntaxDocument doc, String style)", "class_method_signature": "RSyntaxSQLParser.parse(RSyntaxDocument doc, String style)", "testcase": false, "constructor": false, "invocations": ["getLength", "currentTimeMillis", "getConnection", "hasNext", "next", "isInsideRemark", "prepareStatement", "indexOf", "getLocalizedMessage", "indexOf", "trim", "length", "getLastWordPositionAndLength", "getLocalizedMessage", "substring", "getLocalizedMessage", "indexOf", "toLowerCase", "toLowerCase", "min", "getPosition", "getLocalizedMessage", "getLineIndex", "setLevel", "addNotice", "trace", "getLocalizedMessage", "currentTimeMillis", "setParseTime"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}