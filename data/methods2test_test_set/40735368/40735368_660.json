{"test_class": {"identifier": "ImageWorkerTest", "superclass": "extends GridProcessingTestBase", "interfaces": "", "fields": [{"original_string": "private final static String GOOGLE_MERCATOR_WKT=\"PROJCS[\\\"WGS 84 / Pseudo-Mercator\\\",\"+\n            \"GEOGCS[\\\"Popular Visualisation CRS\\\",\"+\n                \"DATUM[\\\"Popular_Visualisation_Datum\\\",\"+\n                    \"SPHEROID[\\\"Popular Visualisation Sphere\\\",6378137,0,\"+\n                        \"AUTHORITY[\\\"EPSG\\\",\\\"7059\\\"]],\"+\n                    \"TOWGS84[0,0,0,0,0,0,0],\"+\n                    \"AUTHORITY[\\\"EPSG\\\",\\\"6055\\\"]],\"+\n                \"PRIMEM[\\\"Greenwich\\\",0,\"+\n                    \"AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],\"+\n                \"UNIT[\\\"degree\\\",0.01745329251994328,\"+\n                    \"AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],\"+\n                \"AUTHORITY[\\\"EPSG\\\",\\\"4055\\\"]],\"+\n            \"UNIT[\\\"metre\\\",1,\"+\n                \"AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],\"+\n            \"PROJECTION[\\\"Mercator_1SP\\\"],\"+\n            \"PARAMETER[\\\"central_meridian\\\",0],\"+\n            \"PARAMETER[\\\"scale_factor\\\",1],\"+\n            \"PARAMETER[\\\"false_easting\\\",0],\"+\n            \"PARAMETER[\\\"false_northing\\\",0],\"+\n            \"AUTHORITY[\\\"EPSG\\\",\\\"3785\\\"],\"+\n            \"AXIS[\\\"X\\\",EAST],\"+\n            \"AXIS[\\\"Y\\\",NORTH]]\";", "modifier": "private final static", "type": "String", "declarator": "GOOGLE_MERCATOR_WKT=\"PROJCS[\\\"WGS 84 / Pseudo-Mercator\\\",\"+\n            \"GEOGCS[\\\"Popular Visualisation CRS\\\",\"+\n                \"DATUM[\\\"Popular_Visualisation_Datum\\\",\"+\n                    \"SPHEROID[\\\"Popular Visualisation Sphere\\\",6378137,0,\"+\n                        \"AUTHORITY[\\\"EPSG\\\",\\\"7059\\\"]],\"+\n                    \"TOWGS84[0,0,0,0,0,0,0],\"+\n                    \"AUTHORITY[\\\"EPSG\\\",\\\"6055\\\"]],\"+\n                \"PRIMEM[\\\"Greenwich\\\",0,\"+\n                    \"AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],\"+\n                \"UNIT[\\\"degree\\\",0.01745329251994328,\"+\n                    \"AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],\"+\n                \"AUTHORITY[\\\"EPSG\\\",\\\"4055\\\"]],\"+\n            \"UNIT[\\\"metre\\\",1,\"+\n                \"AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],\"+\n            \"PROJECTION[\\\"Mercator_1SP\\\"],\"+\n            \"PARAMETER[\\\"central_meridian\\\",0],\"+\n            \"PARAMETER[\\\"scale_factor\\\",1],\"+\n            \"PARAMETER[\\\"false_easting\\\",0],\"+\n            \"PARAMETER[\\\"false_northing\\\",0],\"+\n            \"AUTHORITY[\\\"EPSG\\\",\\\"3785\\\"],\"+\n            \"AXIS[\\\"X\\\",EAST],\"+\n            \"AXIS[\\\"Y\\\",NORTH]]\"", "var_name": "GOOGLE_MERCATOR_WKT"}, {"original_string": "private static RenderedImage sstImage, worldImage, chlImage, bathy, smallWorld, gray, grayAlpha;", "modifier": "private static", "type": "RenderedImage", "declarator": "sstImage", "var_name": "sstImage"}, {"original_string": "private static final boolean SHOW = TestData.isInteractiveTest();", "modifier": "private static final", "type": "boolean", "declarator": "SHOW = TestData.isInteractiveTest()", "var_name": "SHOW"}, {"original_string": "private static BufferedImage worldDEMImage = null;", "modifier": "private static", "type": "BufferedImage", "declarator": "worldDEMImage = null", "var_name": "worldDEMImage"}], "file": "modules/library/coverage/src/test/java/org/geotools/image/ImageWorkerTest.java"}, "test_case": {"identifier": "rescaleToBytes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void rescaleToBytes(){\n\n        assertTrue(\"Assertions should be enabled.\", ImageWorker.class.desiredAssertionStatus());\n        \n    \t// set up synthetic images for testing\n    \tfinal RenderedImage test1= ConstantDescriptor.create(128.0f, 128.0f, new Double[]{20000.0}, null);\n    \tfinal RenderedImage test2= ConstantDescriptor.create(128.0f, 128.0f, new Double[]{255.0}, null);\n    \tfinal RenderedImage test3= getSynthetic(20000);\n    \tfinal RenderedImage test4= getSynthetic(255);\n    \t\n    \t// starting to check the results\n    \t\n    \t// single band value exceed the byte upper bound and is constant\n    \tfinal ImageWorker test1I=new ImageWorker(test1).rescaleToBytes();\n    \tAssert.assertEquals(\"Format\",test1I.getRenderedOperation().getOperationName());\n    \tfinal double[] maximums1 = test1I.getMaximums();\n    \tAssert.assertTrue(maximums1.length==1);\n    \tAssert.assertEquals(255.0,maximums1[0],1E-10);\n    \tfinal double[] minimums1 = test1I.getMinimums();\n    \tAssert.assertTrue(minimums1.length==1);\n    \tAssert.assertEquals(255.0,minimums1[0],1E-10);\n    \t\n    \t\n    \t// single band value does not exceed the byte upper bound and is constant\n    \tfinal ImageWorker test2I=new ImageWorker(test2).rescaleToBytes();\n    \tAssert.assertEquals(\"Format\",test2I.getRenderedOperation().getOperationName());\n    \tfinal double[] maximums2 = test1I.getMaximums();\n    \tAssert.assertTrue(maximums2.length==1);\n    \tAssert.assertEquals(255.0,maximums2[0],1E-10);    \t\n    \tfinal double[] minimums2 = test1I.getMinimums();\n    \tAssert.assertTrue(minimums2.length==1);\n    \tAssert.assertEquals(255.0,minimums2[0],1E-10);    \t\n    \t\n    \t// single band value exceed the byte upper bound\n    \tImageWorker test3I=new ImageWorker(test3);\n    \tfinal double[] maximums3a = test3I.getMaximums();\n    \tfinal double[] minimums3a = test3I.getMinimums();\n    \ttest3I.rescaleToBytes();\n    \tAssert.assertEquals(\"Rescale\",test3I.getRenderedOperation().getOperationName());\n    \tfinal double[] maximums3b = test3I.getMaximums();\n    \tfinal double[] minimums3b = test3I.getMinimums();\n\n    \tif(maximums3a[0]>255)\n    \t{\n    \t\tAssert.assertTrue(Math.abs(maximums3a[0]-maximums3b[0])>1E-10); \n    \t\tAssert.assertTrue(Math.abs(255.0-maximums3b[0])>=0);\n    \t}\n    \t\n    \tif(minimums3a[0]<0)\n    \t{\n    \t\tAssert.assertTrue(minimums3b[0]>=0);\n    \t}\n    \t\n    \t// single band value does not exceed the byte upper bound\n    \tImageWorker test4I=new ImageWorker(test4);\n    \tfinal double[] maximums4a = test4I.getMaximums();\n    \tfinal double[] minimums4a = test4I.getMinimums();\n    \ttest4I.rescaleToBytes();\n    \tAssert.assertEquals(\"Format\",test4I.getRenderedOperation().getOperationName());\n    \tfinal double[] maximums4b = test4I.getMaximums();\n    \tfinal double[] minimums4b = test4I.getMinimums();\n    \tAssert.assertEquals(maximums4a[0],maximums4b[0],1E-10);\n    \tAssert.assertEquals(minimums4a[0],minimums4b[0],1E-10);\n    \t\n    \t// now test multibands case\n    \tfinal RenderedImage multiband=BandMergeDescriptor.create(test2, test3, null);\n    \tImageWorker testmultibandI=new ImageWorker(multiband);\n    \tfinal double[] maximums5a = testmultibandI.getMaximums();\n    \tfinal double[] minimums5a = testmultibandI.getMinimums();    \n    \ttestmultibandI.rescaleToBytes();\n    \tfinal double[] maximums5b = testmultibandI.getMaximums();\n    \tfinal double[] minimums5b = testmultibandI.getMinimums();\n    \tAssert.assertEquals(maximums5a[0],maximums5b[0],1E-10);\n    \tAssert.assertEquals(minimums5a[0],minimums5b[0],1E-10);    \n\n    \tAssert.assertTrue(Math.abs(maximums5a[1]-maximums5b[1])>1E-10);\n    \tAssert.assertTrue(Math.abs(minimums5a[1]-minimums5b[1])>1E-10);    \n    \t\n    \t\n    }", "signature": "void rescaleToBytes()", "full_signature": "@Test public void rescaleToBytes()", "class_method_signature": "ImageWorkerTest.rescaleToBytes()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "desiredAssertionStatus", "create", "create", "getSynthetic", "getSynthetic", "rescaleToBytes", "assertEquals", "getOperationName", "getRenderedOperation", "getMaximums", "assertTrue", "assertEquals", "getMinimums", "assertTrue", "assertEquals", "rescaleToBytes", "assertEquals", "getOperationName", "getRenderedOperation", "getMaximums", "assertTrue", "assertEquals", "getMinimums", "assertTrue", "assertEquals", "getMaximums", "getMinimums", "rescaleToBytes", "assertEquals", "getOperationName", "getRenderedOperation", "getMaximums", "getMinimums", "assertTrue", "abs", "assertTrue", "abs", "assertTrue", "getMaximums", "getMinimums", "rescaleToBytes", "assertEquals", "getOperationName", "getRenderedOperation", "getMaximums", "getMinimums", "assertEquals", "assertEquals", "create", "getMaximums", "getMinimums", "rescaleToBytes", "getMaximums", "getMinimums", "assertEquals", "assertEquals", "assertTrue", "abs", "assertTrue", "abs"]}, "focal_class": {"identifier": "ImageWorker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger LOGGER = Logging.getLogger(\"org.geotools.image\");", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = Logging.getLogger(\"org.geotools.image\")", "var_name": "LOGGER"}, {"original_string": "private static final boolean CODEC_LIB_AVAILABLE = PackageUtil.isCodecLibAvailable();", "modifier": "private static final", "type": "boolean", "declarator": "CODEC_LIB_AVAILABLE = PackageUtil.isCodecLibAvailable()", "var_name": "CODEC_LIB_AVAILABLE"}, {"original_string": "private static final ImageWriterSpi JDK_JPEG_IMAGE_WRITER_SPI;", "modifier": "private static final", "type": "ImageWriterSpi", "declarator": "JDK_JPEG_IMAGE_WRITER_SPI", "var_name": "JDK_JPEG_IMAGE_WRITER_SPI"}, {"original_string": "private static final ImageWriterSpi IMAGEIO_GIF_IMAGE_WRITER_SPI;", "modifier": "private static final", "type": "ImageWriterSpi", "declarator": "IMAGEIO_GIF_IMAGE_WRITER_SPI", "var_name": "IMAGEIO_GIF_IMAGE_WRITER_SPI"}, {"original_string": "private static final ImageWriterSpi IMAGEIO_JPEG_IMAGE_WRITER_SPI;", "modifier": "private static final", "type": "ImageWriterSpi", "declarator": "IMAGEIO_JPEG_IMAGE_WRITER_SPI", "var_name": "IMAGEIO_JPEG_IMAGE_WRITER_SPI"}, {"original_string": "private static final ImageWriterSpi IMAGEIO_EXT_TIFF_IMAGE_WRITER_SPI;", "modifier": "private static final", "type": "ImageWriterSpi", "declarator": "IMAGEIO_EXT_TIFF_IMAGE_WRITER_SPI", "var_name": "IMAGEIO_EXT_TIFF_IMAGE_WRITER_SPI"}, {"original_string": "private static final ImageWriterSpi CLIB_PNG_IMAGE_WRITER_SPI;", "modifier": "private static final", "type": "ImageWriterSpi", "declarator": "CLIB_PNG_IMAGE_WRITER_SPI", "var_name": "CLIB_PNG_IMAGE_WRITER_SPI"}, {"original_string": "static final float RS_EPS = 1E-02f;", "modifier": "static final", "type": "float", "declarator": "RS_EPS = 1E-02f", "var_name": "RS_EPS"}, {"original_string": "public static final String WARP_REDUCTION_ENABLED_KEY = \"org.geotools.image.reduceWarpAffine\";", "modifier": "public static final", "type": "String", "declarator": "WARP_REDUCTION_ENABLED_KEY = \"org.geotools.image.reduceWarpAffine\"", "var_name": "WARP_REDUCTION_ENABLED_KEY"}, {"original_string": "static boolean WARP_REDUCTION_ENABLED = Boolean.parseBoolean(System.getProperty(\n            WARP_REDUCTION_ENABLED_KEY, \"TRUE\"));", "modifier": "static", "type": "boolean", "declarator": "WARP_REDUCTION_ENABLED = Boolean.parseBoolean(System.getProperty(\n            WARP_REDUCTION_ENABLED_KEY, \"TRUE\"))", "var_name": "WARP_REDUCTION_ENABLED"}, {"original_string": "static final ColorSpace CS_PYCC;", "modifier": "static final", "type": "ColorSpace", "declarator": "CS_PYCC", "var_name": "CS_PYCC"}, {"original_string": "public static final Hints.Key TILING_ALLOWED = new Hints.Key(Boolean.class);", "modifier": "public static final", "type": "Hints.Key", "declarator": "TILING_ALLOWED = new Hints.Key(Boolean.class)", "var_name": "TILING_ALLOWED"}, {"original_string": "private static final String EXTREMA = \"extrema\";", "modifier": "private static final", "type": "String", "declarator": "EXTREMA = \"extrema\"", "var_name": "EXTREMA"}, {"original_string": "private RenderedImage inheritanceStopPoint;", "modifier": "private", "type": "RenderedImage", "declarator": "inheritanceStopPoint", "var_name": "inheritanceStopPoint"}, {"original_string": "protected RenderedImage image;", "modifier": "protected", "type": "RenderedImage", "declarator": "image", "var_name": "image"}, {"original_string": "private ROI roi;", "modifier": "private", "type": "ROI", "declarator": "roi", "var_name": "roi"}, {"original_string": "private RenderingHints commonHints;", "modifier": "private", "type": "RenderingHints", "declarator": "commonHints", "var_name": "commonHints"}, {"original_string": "private int tileCacheDisabled = 0;", "modifier": "private", "type": "int", "declarator": "tileCacheDisabled = 0", "var_name": "tileCacheDisabled"}], "methods": [{"identifier": "ImageWorker", "parameters": "()", "modifiers": "public", "return": "", "signature": " ImageWorker()", "full_signature": "public  ImageWorker()", "class_method_signature": "ImageWorker.ImageWorker()", "testcase": false, "constructor": true}, {"identifier": "ImageWorker", "parameters": "(final File input)", "modifiers": "public", "return": "", "signature": " ImageWorker(final File input)", "full_signature": "public  ImageWorker(final File input)", "class_method_signature": "ImageWorker.ImageWorker(final File input)", "testcase": false, "constructor": true}, {"identifier": "ImageWorker", "parameters": "(final RenderedImage image)", "modifiers": "public", "return": "", "signature": " ImageWorker(final RenderedImage image)", "full_signature": "public  ImageWorker(final RenderedImage image)", "class_method_signature": "ImageWorker.ImageWorker(final RenderedImage image)", "testcase": false, "constructor": true}, {"identifier": "setImage", "parameters": "(final RenderedImage image)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker setImage(final RenderedImage image)", "full_signature": "public final ImageWorker setImage(final RenderedImage image)", "class_method_signature": "ImageWorker.setImage(final RenderedImage image)", "testcase": false, "constructor": false}, {"identifier": "fork", "parameters": "(final RenderedImage image)", "modifiers": "private", "return": "ImageWorker", "signature": "ImageWorker fork(final RenderedImage image)", "full_signature": "private ImageWorker fork(final RenderedImage image)", "class_method_signature": "ImageWorker.fork(final RenderedImage image)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(final String source, final int imageChoice, final boolean readMetadata)", "modifiers": "public final", "return": "void", "signature": "void load(final String source, final int imageChoice, final boolean readMetadata)", "full_signature": "public final void load(final String source, final int imageChoice, final boolean readMetadata)", "class_method_signature": "ImageWorker.load(final String source, final int imageChoice, final boolean readMetadata)", "testcase": false, "constructor": false}, {"identifier": "getRenderedImage", "parameters": "()", "modifiers": "public final", "return": "RenderedImage", "signature": "RenderedImage getRenderedImage()", "full_signature": "public final RenderedImage getRenderedImage()", "class_method_signature": "ImageWorker.getRenderedImage()", "testcase": false, "constructor": false}, {"identifier": "getBufferedImage", "parameters": "()", "modifiers": "public final", "return": "BufferedImage", "signature": "BufferedImage getBufferedImage()", "full_signature": "public final BufferedImage getBufferedImage()", "class_method_signature": "ImageWorker.getBufferedImage()", "testcase": false, "constructor": false}, {"identifier": "getPlanarImage", "parameters": "()", "modifiers": "public final", "return": "PlanarImage", "signature": "PlanarImage getPlanarImage()", "full_signature": "public final PlanarImage getPlanarImage()", "class_method_signature": "ImageWorker.getPlanarImage()", "testcase": false, "constructor": false}, {"identifier": "getRenderedOperation", "parameters": "()", "modifiers": "public final", "return": "RenderedOp", "signature": "RenderedOp getRenderedOperation()", "full_signature": "public final RenderedOp getRenderedOperation()", "class_method_signature": "ImageWorker.getRenderedOperation()", "testcase": false, "constructor": false}, {"identifier": "getImageAsROI", "parameters": "()", "modifiers": "public final", "return": "ROI", "signature": "ROI getImageAsROI()", "full_signature": "public final ROI getImageAsROI()", "class_method_signature": "ImageWorker.getImageAsROI()", "testcase": false, "constructor": false}, {"identifier": "getROI", "parameters": "()", "modifiers": "public final", "return": "ROI", "signature": "ROI getROI()", "full_signature": "public final ROI getROI()", "class_method_signature": "ImageWorker.getROI()", "testcase": false, "constructor": false}, {"identifier": "setROI", "parameters": "(final ROI roi)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker setROI(final ROI roi)", "full_signature": "public final ImageWorker setROI(final ROI roi)", "class_method_signature": "ImageWorker.setROI(final ROI roi)", "testcase": false, "constructor": false}, {"identifier": "getRenderingHint", "parameters": "(final RenderingHints.Key key)", "modifiers": "public final", "return": "Object", "signature": "Object getRenderingHint(final RenderingHints.Key key)", "full_signature": "public final Object getRenderingHint(final RenderingHints.Key key)", "class_method_signature": "ImageWorker.getRenderingHint(final RenderingHints.Key key)", "testcase": false, "constructor": false}, {"identifier": "setRenderingHint", "parameters": "(final RenderingHints.Key key, final Object value)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker setRenderingHint(final RenderingHints.Key key, final Object value)", "full_signature": "public final ImageWorker setRenderingHint(final RenderingHints.Key key, final Object value)", "class_method_signature": "ImageWorker.setRenderingHint(final RenderingHints.Key key, final Object value)", "testcase": false, "constructor": false}, {"identifier": "setRenderingHints", "parameters": "(final RenderingHints hints)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker setRenderingHints(final RenderingHints hints)", "full_signature": "public final ImageWorker setRenderingHints(final RenderingHints hints)", "class_method_signature": "ImageWorker.setRenderingHints(final RenderingHints hints)", "testcase": false, "constructor": false}, {"identifier": "removeRenderingHint", "parameters": "(final RenderingHints.Key key)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker removeRenderingHint(final RenderingHints.Key key)", "full_signature": "public final ImageWorker removeRenderingHint(final RenderingHints.Key key)", "class_method_signature": "ImageWorker.removeRenderingHint(final RenderingHints.Key key)", "testcase": false, "constructor": false}, {"identifier": "getRenderingHints", "parameters": "()", "modifiers": "public final", "return": "RenderingHints", "signature": "RenderingHints getRenderingHints()", "full_signature": "public final RenderingHints getRenderingHints()", "class_method_signature": "ImageWorker.getRenderingHints()", "testcase": false, "constructor": false}, {"identifier": "getRenderingHints", "parameters": "(final int type)", "modifiers": "private final", "return": "RenderingHints", "signature": "RenderingHints getRenderingHints(final int type)", "full_signature": "private final RenderingHints getRenderingHints(final int type)", "class_method_signature": "ImageWorker.getRenderingHints(final int type)", "testcase": false, "constructor": false}, {"identifier": "getImageLayout", "parameters": "(final RenderingHints hints)", "modifiers": "private static", "return": "ImageLayout", "signature": "ImageLayout getImageLayout(final RenderingHints hints)", "full_signature": "private static ImageLayout getImageLayout(final RenderingHints hints)", "class_method_signature": "ImageWorker.getImageLayout(final RenderingHints hints)", "testcase": false, "constructor": false}, {"identifier": "tileCacheEnabled", "parameters": "(final boolean status)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker tileCacheEnabled(final boolean status)", "full_signature": "public final ImageWorker tileCacheEnabled(final boolean status)", "class_method_signature": "ImageWorker.tileCacheEnabled(final boolean status)", "testcase": false, "constructor": false}, {"identifier": "getNumBands", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getNumBands()", "full_signature": "public final int getNumBands()", "class_method_signature": "ImageWorker.getNumBands()", "testcase": false, "constructor": false}, {"identifier": "getTransparentPixel", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getTransparentPixel()", "full_signature": "public final int getTransparentPixel()", "class_method_signature": "ImageWorker.getTransparentPixel()", "testcase": false, "constructor": false}, {"identifier": "getComputedProperty", "parameters": "(final String name)", "modifiers": "private", "return": "Object", "signature": "Object getComputedProperty(final String name)", "full_signature": "private Object getComputedProperty(final String name)", "class_method_signature": "ImageWorker.getComputedProperty(final String name)", "testcase": false, "constructor": false}, {"identifier": "getExtremas", "parameters": "()", "modifiers": "private", "return": "double[][]", "signature": "double[][] getExtremas()", "full_signature": "private double[][] getExtremas()", "class_method_signature": "ImageWorker.getExtremas()", "testcase": false, "constructor": false}, {"identifier": "invalidateStatistics", "parameters": "()", "modifiers": "private", "return": "ImageWorker", "signature": "ImageWorker invalidateStatistics()", "full_signature": "private ImageWorker invalidateStatistics()", "class_method_signature": "ImageWorker.invalidateStatistics()", "testcase": false, "constructor": false}, {"identifier": "getMinimums", "parameters": "()", "modifiers": "public final", "return": "double[]", "signature": "double[] getMinimums()", "full_signature": "public final double[] getMinimums()", "class_method_signature": "ImageWorker.getMinimums()", "testcase": false, "constructor": false}, {"identifier": "getMaximums", "parameters": "()", "modifiers": "public final", "return": "double[]", "signature": "double[] getMaximums()", "full_signature": "public final double[] getMaximums()", "class_method_signature": "ImageWorker.getMaximums()", "testcase": false, "constructor": false}, {"identifier": "isBytes", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isBytes()", "full_signature": "public final boolean isBytes()", "class_method_signature": "ImageWorker.isBytes()", "testcase": false, "constructor": false}, {"identifier": "isBinary", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isBinary()", "full_signature": "public final boolean isBinary()", "class_method_signature": "ImageWorker.isBinary()", "testcase": false, "constructor": false}, {"identifier": "isIndexed", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isIndexed()", "full_signature": "public final boolean isIndexed()", "class_method_signature": "ImageWorker.isIndexed()", "testcase": false, "constructor": false}, {"identifier": "isColorSpaceRGB", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isColorSpaceRGB()", "full_signature": "public final boolean isColorSpaceRGB()", "class_method_signature": "ImageWorker.isColorSpaceRGB()", "testcase": false, "constructor": false}, {"identifier": "isColorSpaceYCbCr", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isColorSpaceYCbCr()", "full_signature": "public final boolean isColorSpaceYCbCr()", "class_method_signature": "ImageWorker.isColorSpaceYCbCr()", "testcase": false, "constructor": false}, {"identifier": "isColorSpaceIHS", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isColorSpaceIHS()", "full_signature": "public final boolean isColorSpaceIHS()", "class_method_signature": "ImageWorker.isColorSpaceIHS()", "testcase": false, "constructor": false}, {"identifier": "isColorSpaceGRAYScale", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isColorSpaceGRAYScale()", "full_signature": "public final boolean isColorSpaceGRAYScale()", "class_method_signature": "ImageWorker.isColorSpaceGRAYScale()", "testcase": false, "constructor": false}, {"identifier": "isTranslucent", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isTranslucent()", "full_signature": "public final boolean isTranslucent()", "class_method_signature": "ImageWorker.isTranslucent()", "testcase": false, "constructor": false}, {"identifier": "rescaleToBytes", "parameters": "()", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker rescaleToBytes()", "full_signature": "public final ImageWorker rescaleToBytes()", "class_method_signature": "ImageWorker.rescaleToBytes()", "testcase": false, "constructor": false}, {"identifier": "forceIndexColorModel", "parameters": "(final boolean error)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker forceIndexColorModel(final boolean error)", "full_signature": "public final ImageWorker forceIndexColorModel(final boolean error)", "class_method_signature": "ImageWorker.forceIndexColorModel(final boolean error)", "testcase": false, "constructor": false}, {"identifier": "forceBitmaskIndexColorModel", "parameters": "()", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker forceBitmaskIndexColorModel()", "full_signature": "public final ImageWorker forceBitmaskIndexColorModel()", "class_method_signature": "ImageWorker.forceBitmaskIndexColorModel()", "testcase": false, "constructor": false}, {"identifier": "forceBitmaskIndexColorModel", "parameters": "(int suggestedTransparent,\n            final boolean errorDiffusion)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker forceBitmaskIndexColorModel(int suggestedTransparent,\n            final boolean errorDiffusion)", "full_signature": "public final ImageWorker forceBitmaskIndexColorModel(int suggestedTransparent,\n            final boolean errorDiffusion)", "class_method_signature": "ImageWorker.forceBitmaskIndexColorModel(int suggestedTransparent,\n            final boolean errorDiffusion)", "testcase": false, "constructor": false}, {"identifier": "forceIndexColorModelForGIF", "parameters": "(final boolean errorDiffusion)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker forceIndexColorModelForGIF(final boolean errorDiffusion)", "full_signature": "public final ImageWorker forceIndexColorModelForGIF(final boolean errorDiffusion)", "class_method_signature": "ImageWorker.forceIndexColorModelForGIF(final boolean errorDiffusion)", "testcase": false, "constructor": false}, {"identifier": "forceComponentColorModel", "parameters": "()", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker forceComponentColorModel()", "full_signature": "public final ImageWorker forceComponentColorModel()", "class_method_signature": "ImageWorker.forceComponentColorModel()", "testcase": false, "constructor": false}, {"identifier": "forceComponentColorModel", "parameters": "(boolean checkTransparent, boolean optimizeGray)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker forceComponentColorModel(boolean checkTransparent, boolean optimizeGray)", "full_signature": "public final ImageWorker forceComponentColorModel(boolean checkTransparent, boolean optimizeGray)", "class_method_signature": "ImageWorker.forceComponentColorModel(boolean checkTransparent, boolean optimizeGray)", "testcase": false, "constructor": false}, {"identifier": "forceComponentColorModel", "parameters": "(boolean checkTransparent)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker forceComponentColorModel(boolean checkTransparent)", "full_signature": "public final ImageWorker forceComponentColorModel(boolean checkTransparent)", "class_method_signature": "ImageWorker.forceComponentColorModel(boolean checkTransparent)", "testcase": false, "constructor": false}, {"identifier": "forceColorSpaceRGB", "parameters": "()", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker forceColorSpaceRGB()", "full_signature": "public final ImageWorker forceColorSpaceRGB()", "class_method_signature": "ImageWorker.forceColorSpaceRGB()", "testcase": false, "constructor": false}, {"identifier": "forceColorSpaceYCbCr", "parameters": "()", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker forceColorSpaceYCbCr()", "full_signature": "public final ImageWorker forceColorSpaceYCbCr()", "class_method_signature": "ImageWorker.forceColorSpaceYCbCr()", "testcase": false, "constructor": false}, {"identifier": "forceColorSpaceIHS", "parameters": "()", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker forceColorSpaceIHS()", "full_signature": "public final ImageWorker forceColorSpaceIHS()", "class_method_signature": "ImageWorker.forceColorSpaceIHS()", "testcase": false, "constructor": false}, {"identifier": "forceColorModel", "parameters": "(final ColorModel cm)", "modifiers": "private", "return": "void", "signature": "void forceColorModel(final ColorModel cm)", "full_signature": "private void forceColorModel(final ColorModel cm)", "class_method_signature": "ImageWorker.forceColorModel(final ColorModel cm)", "testcase": false, "constructor": false}, {"identifier": "bandMerge", "parameters": "(int writeband)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker bandMerge(int writeband)", "full_signature": "public final ImageWorker bandMerge(int writeband)", "class_method_signature": "ImageWorker.bandMerge(int writeband)", "testcase": false, "constructor": false}, {"identifier": "addBand", "parameters": "(RenderedImage image, boolean before)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker addBand(RenderedImage image, boolean before)", "full_signature": "public final ImageWorker addBand(RenderedImage image, boolean before)", "class_method_signature": "ImageWorker.addBand(RenderedImage image, boolean before)", "testcase": false, "constructor": false}, {"identifier": "forceColorSpaceGRAYScale", "parameters": "()", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker forceColorSpaceGRAYScale()", "full_signature": "public final ImageWorker forceColorSpaceGRAYScale()", "class_method_signature": "ImageWorker.forceColorSpaceGRAYScale()", "testcase": false, "constructor": false}, {"identifier": "intensity", "parameters": "()", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker intensity()", "full_signature": "public final ImageWorker intensity()", "class_method_signature": "ImageWorker.intensity()", "testcase": false, "constructor": false}, {"identifier": "retainFirstBand", "parameters": "()", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker retainFirstBand()", "full_signature": "public final ImageWorker retainFirstBand()", "class_method_signature": "ImageWorker.retainFirstBand()", "testcase": false, "constructor": false}, {"identifier": "retainLastBand", "parameters": "()", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker retainLastBand()", "full_signature": "public final ImageWorker retainLastBand()", "class_method_signature": "ImageWorker.retainLastBand()", "testcase": false, "constructor": false}, {"identifier": "retainBands", "parameters": "(final int numBands)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker retainBands(final int numBands)", "full_signature": "public final ImageWorker retainBands(final int numBands)", "class_method_signature": "ImageWorker.retainBands(final int numBands)", "testcase": false, "constructor": false}, {"identifier": "retainBands", "parameters": "(final int[] bands)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker retainBands(final int[] bands)", "full_signature": "public final ImageWorker retainBands(final int[] bands)", "class_method_signature": "ImageWorker.retainBands(final int[] bands)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(final int dataType)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker format(final int dataType)", "full_signature": "public final ImageWorker format(final int dataType)", "class_method_signature": "ImageWorker.format(final int dataType)", "testcase": false, "constructor": false}, {"identifier": "binarize", "parameters": "()", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker binarize()", "full_signature": "public final ImageWorker binarize()", "class_method_signature": "ImageWorker.binarize()", "testcase": false, "constructor": false}, {"identifier": "binarize", "parameters": "(double threshold)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker binarize(double threshold)", "full_signature": "public final ImageWorker binarize(double threshold)", "class_method_signature": "ImageWorker.binarize(double threshold)", "testcase": false, "constructor": false}, {"identifier": "binarize", "parameters": "(final int value0, final int value1)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker binarize(final int value0, final int value1)", "full_signature": "public final ImageWorker binarize(final int value0, final int value1)", "class_method_signature": "ImageWorker.binarize(final int value0, final int value1)", "testcase": false, "constructor": false}, {"identifier": "makeColorTransparent", "parameters": "(final Color transparentColor)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker makeColorTransparent(final Color transparentColor)", "full_signature": "public final ImageWorker makeColorTransparent(final Color transparentColor)", "class_method_signature": "ImageWorker.makeColorTransparent(final Color transparentColor)", "testcase": false, "constructor": false}, {"identifier": "maskIndexColorModel", "parameters": "(final Color transparentColor)", "modifiers": "private final", "return": "ImageWorker", "signature": "ImageWorker maskIndexColorModel(final Color transparentColor)", "full_signature": "private final ImageWorker maskIndexColorModel(final Color transparentColor)", "class_method_signature": "ImageWorker.maskIndexColorModel(final Color transparentColor)", "testcase": false, "constructor": false}, {"identifier": "maskComponentColorModelByte", "parameters": "(final Color transparentColor)", "modifiers": "private final", "return": "ImageWorker", "signature": "ImageWorker maskComponentColorModelByte(final Color transparentColor)", "full_signature": "private final ImageWorker maskComponentColorModelByte(final Color transparentColor)", "class_method_signature": "ImageWorker.maskComponentColorModelByte(final Color transparentColor)", "testcase": false, "constructor": false}, {"identifier": "invert", "parameters": "()", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker invert()", "full_signature": "public final ImageWorker invert()", "class_method_signature": "ImageWorker.invert()", "testcase": false, "constructor": false}, {"identifier": "mask", "parameters": "(RenderedImage mask, final boolean maskValue, int newValue)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker mask(RenderedImage mask, final boolean maskValue, int newValue)", "full_signature": "public final ImageWorker mask(RenderedImage mask, final boolean maskValue, int newValue)", "class_method_signature": "ImageWorker.mask(RenderedImage mask, final boolean maskValue, int newValue)", "testcase": false, "constructor": false}, {"identifier": "addImage", "parameters": "(final RenderedImage renderedImage)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker addImage(final RenderedImage renderedImage)", "full_signature": "public final ImageWorker addImage(final RenderedImage renderedImage)", "class_method_signature": "ImageWorker.addImage(final RenderedImage renderedImage)", "testcase": false, "constructor": false}, {"identifier": "multiplyConst", "parameters": "(double[] inValues)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker multiplyConst(double[] inValues)", "full_signature": "public final ImageWorker multiplyConst(double[] inValues)", "class_method_signature": "ImageWorker.multiplyConst(double[] inValues)", "testcase": false, "constructor": false}, {"identifier": "xorConst", "parameters": "(int[] values)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker xorConst(int[] values)", "full_signature": "public final ImageWorker xorConst(int[] values)", "class_method_signature": "ImageWorker.xorConst(int[] values)", "testcase": false, "constructor": false}, {"identifier": "addTransparencyToIndexColorModel", "parameters": "(final RenderedImage alphaChannel,\n            final boolean errorDiffusion)", "modifiers": "public", "return": "ImageWorker", "signature": "ImageWorker addTransparencyToIndexColorModel(final RenderedImage alphaChannel,\n            final boolean errorDiffusion)", "full_signature": "public ImageWorker addTransparencyToIndexColorModel(final RenderedImage alphaChannel,\n            final boolean errorDiffusion)", "class_method_signature": "ImageWorker.addTransparencyToIndexColorModel(final RenderedImage alphaChannel,\n            final boolean errorDiffusion)", "testcase": false, "constructor": false}, {"identifier": "addTransparencyToIndexColorModel", "parameters": "(final RenderedImage alphaChannel,\n            final boolean translucent, int transparent, final boolean errorDiffusion)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker addTransparencyToIndexColorModel(final RenderedImage alphaChannel,\n            final boolean translucent, int transparent, final boolean errorDiffusion)", "full_signature": "public final ImageWorker addTransparencyToIndexColorModel(final RenderedImage alphaChannel,\n            final boolean translucent, int transparent, final boolean errorDiffusion)", "class_method_signature": "ImageWorker.addTransparencyToIndexColorModel(final RenderedImage alphaChannel,\n            final boolean translucent, int transparent, final boolean errorDiffusion)", "testcase": false, "constructor": false}, {"identifier": "tile", "parameters": "()", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker tile()", "full_signature": "public final ImageWorker tile()", "class_method_signature": "ImageWorker.tile()", "testcase": false, "constructor": false}, {"identifier": "applyOpacity", "parameters": "(float opacity)", "modifiers": "public", "return": "ImageWorker", "signature": "ImageWorker applyOpacity(float opacity)", "full_signature": "public ImageWorker applyOpacity(float opacity)", "class_method_signature": "ImageWorker.applyOpacity(float opacity)", "testcase": false, "constructor": false}, {"identifier": "buildOpacityLookupTable", "parameters": "(float opacity, final int bands, int alphaBand)", "modifiers": "", "return": "LookupTableJAI", "signature": "LookupTableJAI buildOpacityLookupTable(float opacity, final int bands, int alphaBand)", "full_signature": " LookupTableJAI buildOpacityLookupTable(float opacity, final int bands, int alphaBand)", "class_method_signature": "ImageWorker.buildOpacityLookupTable(float opacity, final int bands, int alphaBand)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(final File output)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker write(final File output)", "full_signature": "public final ImageWorker write(final File output)", "class_method_signature": "ImageWorker.write(final File output)", "testcase": false, "constructor": false}, {"identifier": "writePNG", "parameters": "(final Object destination, final String compression,\n            final float compressionRate, final boolean nativeAcc, final boolean paletted)", "modifiers": "public final", "return": "void", "signature": "void writePNG(final Object destination, final String compression,\n            final float compressionRate, final boolean nativeAcc, final boolean paletted)", "full_signature": "public final void writePNG(final Object destination, final String compression,\n            final float compressionRate, final boolean nativeAcc, final boolean paletted)", "class_method_signature": "ImageWorker.writePNG(final Object destination, final String compression,\n            final float compressionRate, final boolean nativeAcc, final boolean paletted)", "testcase": false, "constructor": false}, {"identifier": "writeGIF", "parameters": "(final Object destination, final String compression,\n            final float compressionRate)", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker writeGIF(final Object destination, final String compression,\n            final float compressionRate)", "full_signature": "public final ImageWorker writeGIF(final Object destination, final String compression,\n            final float compressionRate)", "class_method_signature": "ImageWorker.writeGIF(final Object destination, final String compression,\n            final float compressionRate)", "testcase": false, "constructor": false}, {"identifier": "writeJPEG", "parameters": "(final Object destination, final String compression,\n            final float compressionRate, final boolean nativeAcc)", "modifiers": "public final", "return": "void", "signature": "void writeJPEG(final Object destination, final String compression,\n            final float compressionRate, final boolean nativeAcc)", "full_signature": "public final void writeJPEG(final Object destination, final String compression,\n            final float compressionRate, final boolean nativeAcc)", "class_method_signature": "ImageWorker.writeJPEG(final Object destination, final String compression,\n            final float compressionRate, final boolean nativeAcc)", "testcase": false, "constructor": false}, {"identifier": "writeTIFF", "parameters": "(final Object destination, final String compression,\n            final float compressionRate, final int tileSizeX, final int tileSizeY)", "modifiers": "public final", "return": "void", "signature": "void writeTIFF(final Object destination, final String compression,\n            final float compressionRate, final int tileSizeX, final int tileSizeY)", "full_signature": "public final void writeTIFF(final Object destination, final String compression,\n            final float compressionRate, final int tileSizeX, final int tileSizeY)", "class_method_signature": "ImageWorker.writeTIFF(final Object destination, final String compression,\n            final float compressionRate, final int tileSizeX, final int tileSizeY)", "testcase": false, "constructor": false}, {"identifier": "affine", "parameters": "(AffineTransform tx, Interpolation interpolation, double[] bgValues)", "modifiers": "public", "return": "ImageWorker", "signature": "ImageWorker affine(AffineTransform tx, Interpolation interpolation, double[] bgValues)", "full_signature": "public ImageWorker affine(AffineTransform tx, Interpolation interpolation, double[] bgValues)", "class_method_signature": "ImageWorker.affine(AffineTransform tx, Interpolation interpolation, double[] bgValues)", "testcase": false, "constructor": false}, {"identifier": "crop", "parameters": "(float x, float y, float width, float height)", "modifiers": "public", "return": "ImageWorker", "signature": "ImageWorker crop(float x, float y, float width, float height)", "full_signature": "public ImageWorker crop(float x, float y, float width, float height)", "class_method_signature": "ImageWorker.crop(float x, float y, float width, float height)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(final Object output, final Iterator<? extends ImageWriter> encoders)", "modifiers": "private", "return": "ImageWorker", "signature": "ImageWorker write(final Object output, final Iterator<? extends ImageWriter> encoders)", "full_signature": "private ImageWorker write(final Object output, final Iterator<? extends ImageWriter> encoders)", "class_method_signature": "ImageWorker.write(final Object output, final Iterator<? extends ImageWriter> encoders)", "testcase": false, "constructor": false}, {"identifier": "acceptInputType", "parameters": "(final Class<?>[] types, final Class<?> searchFor)", "modifiers": "private static", "return": "boolean", "signature": "boolean acceptInputType(final Class<?>[] types, final Class<?> searchFor)", "full_signature": "private static boolean acceptInputType(final Class<?>[] types, final Class<?> searchFor)", "class_method_signature": "ImageWorker.acceptInputType(final Class<?>[] types, final Class<?> searchFor)", "testcase": false, "constructor": false}, {"identifier": "containsFormatName", "parameters": "(final String[] formats, final String searchFor)", "modifiers": "private static", "return": "boolean", "signature": "boolean containsFormatName(final String[] formats, final String searchFor)", "full_signature": "private static boolean containsFormatName(final String[] formats, final String searchFor)", "class_method_signature": "ImageWorker.containsFormatName(final String[] formats, final String searchFor)", "testcase": false, "constructor": false}, {"identifier": "show", "parameters": "()", "modifiers": "public final", "return": "ImageWorker", "signature": "ImageWorker show()", "full_signature": "public final ImageWorker show()", "class_method_signature": "ImageWorker.show()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void dispose()", "full_signature": "public final void dispose()", "class_method_signature": "ImageWorker.dispose()", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "ImageWorker.main(String[] args)", "testcase": false, "constructor": false}], "file": "modules/library/coverage/src/main/java/org/geotools/image/ImageWorker.java"}, "focal_method": {"identifier": "rescaleToBytes", "parameters": "()", "modifiers": "public final", "return": "ImageWorker", "body": "public final ImageWorker rescaleToBytes() {\n\n        if (isBytes()) {\n            // Already using bytes - nothing to do.\n            return this;\n        }\n\n        // this is to support 16 bits IndexColorModel\n        forceComponentColorModel(true, true);\n\n        final double[][] extrema = getExtremas();\n        final int length = extrema[0].length;\n        final double[] scale = new double[length];\n        final double[] offset = new double[length];\n        boolean computeRescale = false;\n        for (int i = 0; i < length; i++) {\n            final double delta = extrema[1][i] - extrema[0][i];\n            if (Math.abs(delta) > 1E-6 // maximum and minimum does not coincide\n                    && ((extrema[1][i] - 255 > 1E-6) // the maximum is greater than 255\n                    || (extrema[0][i] < -1E-6))) // the minimum is smaller than 0\n            {\n                // we need to rescale\n                computeRescale = true;\n\n                // rescale factors\n                scale[i] = 255 / delta;\n                offset[i] = -scale[i] * extrema[0][i];\n            } else {\n                // we do not rescale explicitly bu in case we have to, we relay on the clamping capabilities of the format operator\n                scale[i] = 1;\n                offset[i] = 0;\n            }\n        }\n        final RenderingHints hints = getRenderingHints(DataBuffer.TYPE_BYTE);\n        if (computeRescale)\n            image = RescaleDescriptor.create(image, // The source image.\n                    scale, // The per-band constants to multiply by.\n                    offset, // The per-band offsets to be added.\n                    hints); // The rendering hints.\n        else\n            image = FormatDescriptor.create(image, // The source image.\n                    DataBuffer.TYPE_BYTE, // The destination image data type (BYTE)\n                    hints); // The rendering hints.\n        invalidateStatistics(); // Extremas are no longer valid.\n\n        // All post conditions for this method contract.\n        assert isBytes();\n        return this;\n    }", "signature": "ImageWorker rescaleToBytes()", "full_signature": "public final ImageWorker rescaleToBytes()", "class_method_signature": "ImageWorker.rescaleToBytes()", "testcase": false, "constructor": false, "invocations": ["isBytes", "forceComponentColorModel", "getExtremas", "abs", "getRenderingHints", "create", "create", "invalidateStatistics", "isBytes"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}