{"test_class": {"identifier": "RecordWriterTest", "superclass": "", "interfaces": "", "fields": [], "file": "log/src/test/java/org/cloudname/log/recordstore/RecordWriterTest.java"}, "test_case": {"identifier": "writeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void writeTest() throws Exception {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        RecordWriter writer = new RecordWriter(out);\n\n        // Generate some log messages and write them\n        int numMessages = 10;\n        for (int i = 0; i < numMessages; i++) {\n            int n = writer.write(createMessage(\"This is log message \" + i));\n            assertTrue(n > 0);\n        }\n\n        byte[] data = out.toByteArray();\n\n        ByteArrayInputStream inp = new ByteArrayInputStream(data);\n\n        Timber.LogEvent ev = null;\n        int count = 0;\n        do {\n            ev = Timber.LogEvent.parseDelimitedFrom(inp);\n            if (null != ev) {\n                count++;\n                assertEquals(\"T\", ev.getType());\n            }\n        } while (null != ev);\n\n        assertEquals(numMessages, count);\n    }", "signature": "void writeTest()", "full_signature": "@Test public void writeTest()", "class_method_signature": "RecordWriterTest.writeTest()", "testcase": true, "constructor": false, "invocations": ["write", "createMessage", "assertTrue", "toByteArray", "parseDelimitedFrom", "assertEquals", "getType", "assertEquals"]}, "focal_class": {"identifier": "RecordWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CountingOutputStream out;", "modifier": "private", "type": "CountingOutputStream", "declarator": "out", "var_name": "out"}], "methods": [{"identifier": "RecordWriter", "parameters": "(OutputStream out)", "modifiers": "public", "return": "", "signature": " RecordWriter(OutputStream out)", "full_signature": "public  RecordWriter(OutputStream out)", "class_method_signature": "RecordWriter.RecordWriter(OutputStream out)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(Timber.LogEvent logEvent)", "modifiers": "public", "return": "int", "signature": "int write(Timber.LogEvent logEvent)", "full_signature": "public int write(Timber.LogEvent logEvent)", "class_method_signature": "RecordWriter.write(Timber.LogEvent logEvent)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "RecordWriter.close()", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void flush()", "full_signature": "public void flush()", "class_method_signature": "RecordWriter.flush()", "testcase": false, "constructor": false}], "file": "log/src/main/java/org/cloudname/log/recordstore/RecordWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(Timber.LogEvent logEvent)", "modifiers": "public", "return": "int", "body": "public int write(Timber.LogEvent logEvent) throws IOException {\n        logEvent.writeDelimitedTo(out);\n        return out.getLastBytesWritten();\n    }", "signature": "int write(Timber.LogEvent logEvent)", "full_signature": "public int write(Timber.LogEvent logEvent)", "class_method_signature": "RecordWriter.write(Timber.LogEvent logEvent)", "testcase": false, "constructor": false, "invocations": ["writeDelimitedTo", "getLastBytesWritten"]}, "repository": {"repo_id": 2329961, "url": "https://github.com/Cloudname/cloudname", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 21, "size": 26031, "license": "licensed"}}