{"test_class": {"identifier": "AggregationRepositoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "fds-common-dynamodb/src/test/java/com/provectus/fds/dynamodb/repositories/AggregationRepositoryTest.java"}, "test_case": {"identifier": "getGrouped", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getGrouped() {\n        AggregationRepository repository = new AggregationRepository();\n        List<Aggregation> aggregations = Arrays.asList(\n                new Aggregation(-1987217790,1546068600,0L,0L,17986L)\n        );\n\n        List<Aggregation> expected = Arrays.asList(\n                new Aggregation(-1987217790,1546041600,0L,0L,17986L)\n        );\n\n        List<Aggregation> result = repository.getGrouped(aggregations, ChronoUnit.DAYS, ZoneOffset.UTC, false);\n        assertArrayEquals(expected.toArray(), result.toArray());\n\n    }", "signature": "void getGrouped()", "full_signature": "@Test public void getGrouped()", "class_method_signature": "AggregationRepositoryTest.getGrouped()", "testcase": true, "constructor": false, "invocations": ["asList", "asList", "getGrouped", "assertArrayEquals", "toArray", "toArray"]}, "focal_class": {"identifier": "AggregationRepository", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DynamoDBMapper dynamoDBMapper;", "modifier": "private final", "type": "DynamoDBMapper", "declarator": "dynamoDBMapper", "var_name": "dynamoDBMapper"}, {"original_string": "private final String tableName;", "modifier": "private final", "type": "String", "declarator": "tableName", "var_name": "tableName"}, {"original_string": "private final DynamoDBMapperConfig config;", "modifier": "private final", "type": "DynamoDBMapperConfig", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "AggregationRepository", "parameters": "(AmazonDynamoDB amazonDynamoDB, String tableName)", "modifiers": "public", "return": "", "signature": " AggregationRepository(AmazonDynamoDB amazonDynamoDB, String tableName)", "full_signature": "public  AggregationRepository(AmazonDynamoDB amazonDynamoDB, String tableName)", "class_method_signature": "AggregationRepository.AggregationRepository(AmazonDynamoDB amazonDynamoDB, String tableName)", "testcase": false, "constructor": true}, {"identifier": "AggregationRepository", "parameters": "()", "modifiers": "public", "return": "", "signature": " AggregationRepository()", "full_signature": "public  AggregationRepository()", "class_method_signature": "AggregationRepository.AggregationRepository()", "testcase": false, "constructor": true}, {"identifier": "getAll", "parameters": "(long campaignItemId)", "modifiers": "public", "return": "List<Aggregation>", "signature": "List<Aggregation> getAll(long campaignItemId)", "full_signature": "public List<Aggregation> getAll(long campaignItemId)", "class_method_signature": "AggregationRepository.getAll(long campaignItemId)", "testcase": false, "constructor": false}, {"identifier": "getAllByPeriod", "parameters": "(long campaignItemId, ZonedDateTime from, ZonedDateTime to)", "modifiers": "public", "return": "List<Aggregation>", "signature": "List<Aggregation> getAllByPeriod(long campaignItemId, ZonedDateTime from, ZonedDateTime to)", "full_signature": "public List<Aggregation> getAllByPeriod(long campaignItemId, ZonedDateTime from, ZonedDateTime to)", "class_method_signature": "AggregationRepository.getAllByPeriod(long campaignItemId, ZonedDateTime from, ZonedDateTime to)", "testcase": false, "constructor": false}, {"identifier": "total", "parameters": "(long campaignItemId)", "modifiers": "public", "return": "Aggregation", "signature": "Aggregation total(long campaignItemId)", "full_signature": "public Aggregation total(long campaignItemId)", "class_method_signature": "AggregationRepository.total(long campaignItemId)", "testcase": false, "constructor": false}, {"identifier": "getGrouped", "parameters": "(long campaignItemId, ChronoUnit chronoUnit, ZoneId timeZone, ZonedDateTime from, ZonedDateTime to, boolean desc)", "modifiers": "public", "return": "List<Aggregation>", "signature": "List<Aggregation> getGrouped(long campaignItemId, ChronoUnit chronoUnit, ZoneId timeZone, ZonedDateTime from, ZonedDateTime to, boolean desc)", "full_signature": "public List<Aggregation> getGrouped(long campaignItemId, ChronoUnit chronoUnit, ZoneId timeZone, ZonedDateTime from, ZonedDateTime to, boolean desc)", "class_method_signature": "AggregationRepository.getGrouped(long campaignItemId, ChronoUnit chronoUnit, ZoneId timeZone, ZonedDateTime from, ZonedDateTime to, boolean desc)", "testcase": false, "constructor": false}, {"identifier": "getGrouped", "parameters": "(long campaignItemId, ChronoUnit chronoUnit, ZoneId timeZone, boolean desc)", "modifiers": "public", "return": "List<Aggregation>", "signature": "List<Aggregation> getGrouped(long campaignItemId, ChronoUnit chronoUnit, ZoneId timeZone, boolean desc)", "full_signature": "public List<Aggregation> getGrouped(long campaignItemId, ChronoUnit chronoUnit, ZoneId timeZone, boolean desc)", "class_method_signature": "AggregationRepository.getGrouped(long campaignItemId, ChronoUnit chronoUnit, ZoneId timeZone, boolean desc)", "testcase": false, "constructor": false}, {"identifier": "getGrouped", "parameters": "(List<Aggregation> aggregations, ChronoUnit chronoUnit, ZoneId timeZone, boolean desc)", "modifiers": "public", "return": "List<Aggregation>", "signature": "List<Aggregation> getGrouped(List<Aggregation> aggregations, ChronoUnit chronoUnit, ZoneId timeZone, boolean desc)", "full_signature": "public List<Aggregation> getGrouped(List<Aggregation> aggregations, ChronoUnit chronoUnit, ZoneId timeZone, boolean desc)", "class_method_signature": "AggregationRepository.getGrouped(List<Aggregation> aggregations, ChronoUnit chronoUnit, ZoneId timeZone, boolean desc)", "testcase": false, "constructor": false}, {"identifier": "periodSorter", "parameters": "(boolean desc)", "modifiers": "private", "return": "Comparator<Aggregation>", "signature": "Comparator<Aggregation> periodSorter(boolean desc)", "full_signature": "private Comparator<Aggregation> periodSorter(boolean desc)", "class_method_signature": "AggregationRepository.periodSorter(boolean desc)", "testcase": false, "constructor": false}, {"identifier": "sorter", "parameters": "(boolean desc, Function<Aggregation, T> getter, Comparator<T> comparator)", "modifiers": "private", "return": "Comparator<Aggregation>", "signature": "Comparator<Aggregation> sorter(boolean desc, Function<Aggregation, T> getter, Comparator<T> comparator)", "full_signature": "private Comparator<Aggregation> sorter(boolean desc, Function<Aggregation, T> getter, Comparator<T> comparator)", "class_method_signature": "AggregationRepository.sorter(boolean desc, Function<Aggregation, T> getter, Comparator<T> comparator)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(Aggregation left, Aggregation right)", "modifiers": "private", "return": "Aggregation", "signature": "Aggregation merge(Aggregation left, Aggregation right)", "full_signature": "private Aggregation merge(Aggregation left, Aggregation right)", "class_method_signature": "AggregationRepository.merge(Aggregation left, Aggregation right)", "testcase": false, "constructor": false}], "file": "fds-common-dynamodb/src/main/java/com/provectus/fds/dynamodb/repositories/AggregationRepository.java"}, "focal_method": {"identifier": "getGrouped", "parameters": "(long campaignItemId, ChronoUnit chronoUnit, ZoneId timeZone, ZonedDateTime from, ZonedDateTime to, boolean desc)", "modifiers": "public", "return": "List<Aggregation>", "body": "public List<Aggregation> getGrouped(long campaignItemId, ChronoUnit chronoUnit, ZoneId timeZone, ZonedDateTime from, ZonedDateTime to, boolean desc) {\n        return this.getGrouped(this.getAllByPeriod(campaignItemId,from,to), chronoUnit, timeZone, desc);\n    }", "signature": "List<Aggregation> getGrouped(long campaignItemId, ChronoUnit chronoUnit, ZoneId timeZone, ZonedDateTime from, ZonedDateTime to, boolean desc)", "full_signature": "public List<Aggregation> getGrouped(long campaignItemId, ChronoUnit chronoUnit, ZoneId timeZone, ZonedDateTime from, ZonedDateTime to, boolean desc)", "class_method_signature": "AggregationRepository.getGrouped(long campaignItemId, ChronoUnit chronoUnit, ZoneId timeZone, ZonedDateTime from, ZonedDateTime to, boolean desc)", "testcase": false, "constructor": false, "invocations": ["getGrouped", "getAllByPeriod"]}, "repository": {"repo_id": 156757718, "url": "https://github.com/provectus/streaming-data-platform", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 12, "size": 616, "license": "licensed"}}