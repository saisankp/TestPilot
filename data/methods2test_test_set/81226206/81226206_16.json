{"test_class": {"identifier": "StringUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "karate-core/src/test/java/com/intuit/karate/StringUtilsTest.java"}, "test_case": {"identifier": "testWrappedLinesEstimate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWrappedLinesEstimate() {\n        assertEquals(6,\n                StringUtils.wrappedLinesEstimate(\"foobarbazfoobarbaz\", 3));\n        assertEquals(1,\n                StringUtils.wrappedLinesEstimate(\"foobarbazfoobarbaz\", 20));\n        assertEquals(0,\n                StringUtils.wrappedLinesEstimate(\"\", 2));\n    }", "signature": "void testWrappedLinesEstimate()", "full_signature": "@Test public void testWrappedLinesEstimate()", "class_method_signature": "StringUtilsTest.testWrappedLinesEstimate()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "wrappedLinesEstimate", "assertEquals", "wrappedLinesEstimate", "assertEquals", "wrappedLinesEstimate"]}, "focal_class": {"identifier": "StringUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EMPTY = \"\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY = \"\"", "var_name": "EMPTY"}, {"original_string": "private static final Pattern FUNCTION_PATTERN = Pattern.compile(\"^function[^(]*\\\\(\");", "modifier": "private static final", "type": "Pattern", "declarator": "FUNCTION_PATTERN = Pattern.compile(\"^function[^(]*\\\\(\")", "var_name": "FUNCTION_PATTERN"}], "methods": [{"identifier": "StringUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " StringUtils()", "full_signature": "private  StringUtils()", "class_method_signature": "StringUtils.StringUtils()", "testcase": false, "constructor": true}, {"identifier": "pair", "parameters": "(String left, String right)", "modifiers": "public static", "return": "Pair", "signature": "Pair pair(String left, String right)", "full_signature": "public static Pair pair(String left, String right)", "class_method_signature": "StringUtils.pair(String left, String right)", "testcase": false, "constructor": false}, {"identifier": "truncate", "parameters": "(String s, int length, boolean addDots)", "modifiers": "public static", "return": "String", "signature": "String truncate(String s, int length, boolean addDots)", "full_signature": "public static String truncate(String s, int length, boolean addDots)", "class_method_signature": "StringUtils.truncate(String s, int length, boolean addDots)", "testcase": false, "constructor": false}, {"identifier": "trimToEmpty", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String trimToEmpty(String s)", "full_signature": "public static String trimToEmpty(String s)", "class_method_signature": "StringUtils.trimToEmpty(String s)", "testcase": false, "constructor": false}, {"identifier": "trimToNull", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String trimToNull(String s)", "full_signature": "public static String trimToNull(String s)", "class_method_signature": "StringUtils.trimToNull(String s)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "(char c, int count)", "modifiers": "public static", "return": "String", "signature": "String repeat(char c, int count)", "full_signature": "public static String repeat(char c, int count)", "class_method_signature": "StringUtils.repeat(char c, int count)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Object[] a, char delimiter)", "modifiers": "public static", "return": "String", "signature": "String join(Object[] a, char delimiter)", "full_signature": "public static String join(Object[] a, char delimiter)", "class_method_signature": "StringUtils.join(Object[] a, char delimiter)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Collection<String> c, char delimiter)", "modifiers": "public static", "return": "String", "signature": "String join(Collection<String> c, char delimiter)", "full_signature": "public static String join(Collection<String> c, char delimiter)", "class_method_signature": "StringUtils.join(Collection<String> c, char delimiter)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String s, char delimiter, boolean skipBackSlash)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> split(String s, char delimiter, boolean skipBackSlash)", "full_signature": "public static List<String> split(String s, char delimiter, boolean skipBackSlash)", "class_method_signature": "StringUtils.split(String s, char delimiter, boolean skipBackSlash)", "testcase": false, "constructor": false}, {"identifier": "isBlank", "parameters": "(String s)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBlank(String s)", "full_signature": "public static boolean isBlank(String s)", "class_method_signature": "StringUtils.isBlank(String s)", "testcase": false, "constructor": false}, {"identifier": "toIdString", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String toIdString(String name)", "full_signature": "public static String toIdString(String name)", "class_method_signature": "StringUtils.toIdString(String name)", "testcase": false, "constructor": false}, {"identifier": "splitByFirstLineFeed", "parameters": "(String text)", "modifiers": "public static", "return": "StringUtils.Pair", "signature": "StringUtils.Pair splitByFirstLineFeed(String text)", "full_signature": "public static StringUtils.Pair splitByFirstLineFeed(String text)", "class_method_signature": "StringUtils.splitByFirstLineFeed(String text)", "testcase": false, "constructor": false}, {"identifier": "toStringLines", "parameters": "(String text)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> toStringLines(String text)", "full_signature": "public static List<String> toStringLines(String text)", "class_method_signature": "StringUtils.toStringLines(String text)", "testcase": false, "constructor": false}, {"identifier": "countLineFeeds", "parameters": "(String text)", "modifiers": "public static", "return": "int", "signature": "int countLineFeeds(String text)", "full_signature": "public static int countLineFeeds(String text)", "class_method_signature": "StringUtils.countLineFeeds(String text)", "testcase": false, "constructor": false}, {"identifier": "wrappedLinesEstimate", "parameters": "(String text, int colWidth)", "modifiers": "public static", "return": "int", "signature": "int wrappedLinesEstimate(String text, int colWidth)", "full_signature": "public static int wrappedLinesEstimate(String text, int colWidth)", "class_method_signature": "StringUtils.wrappedLinesEstimate(String text, int colWidth)", "testcase": false, "constructor": false}, {"identifier": "isJavaScriptFunction", "parameters": "(String text)", "modifiers": "public static", "return": "boolean", "signature": "boolean isJavaScriptFunction(String text)", "full_signature": "public static boolean isJavaScriptFunction(String text)", "class_method_signature": "StringUtils.isJavaScriptFunction(String text)", "testcase": false, "constructor": false}, {"identifier": "fixJavaScriptFunction", "parameters": "(String text)", "modifiers": "public static", "return": "String", "signature": "String fixJavaScriptFunction(String text)", "full_signature": "public static String fixJavaScriptFunction(String text)", "class_method_signature": "StringUtils.fixJavaScriptFunction(String text)", "testcase": false, "constructor": false}], "file": "karate-core/src/main/java/com/intuit/karate/StringUtils.java"}, "focal_method": {"identifier": "wrappedLinesEstimate", "parameters": "(String text, int colWidth)", "modifiers": "public static", "return": "int", "body": "public static int wrappedLinesEstimate(String text, int colWidth) {\n        List<String> lines = toStringLines(text);\n        int estimate = 0;\n        for (String s : lines) {\n            int wrapEstimate = (int) Math.ceil(s.length() / colWidth);\n            if (wrapEstimate == 0) {\n                estimate++;\n            } else {\n                estimate += wrapEstimate;\n            }\n        }\n        return estimate;\n    }", "signature": "int wrappedLinesEstimate(String text, int colWidth)", "full_signature": "public static int wrappedLinesEstimate(String text, int colWidth)", "class_method_signature": "StringUtils.wrappedLinesEstimate(String text, int colWidth)", "testcase": false, "constructor": false, "invocations": ["toStringLines", "ceil", "length"]}, "repository": {"repo_id": 81226206, "url": "https://github.com/intuit/karate", "stars": 2712, "created": "2/7/2017 3:59:17 PM +00:00", "updates": "2020-01-27T21:00:57+00:00", "fork": "False", "license": "licensed"}}