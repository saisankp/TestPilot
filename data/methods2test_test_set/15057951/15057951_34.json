{"test_class": {"identifier": "ParameterDAOTest", "superclass": "extends DatabaseTest", "interfaces": "", "fields": [], "file": "smartparam-repository-jdbc/src/test/java/org/smartparam/repository/jdbc/dao/ParameterDAOTest.java"}, "test_case": {"identifier": "shouldUpdateContentsOfParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldUpdateContentsOfParameter() {\n        // given\n        database().withParameter(\"test\").build();\n\n        ParameterDAO parameterDAO = get(ParameterDAO.class);\n        QueryRunner runner = queryRunner();\n\n        Parameter updatedParameterData = parameter().withName(\"updatedTest\").build();\n\n        // when\n        parameterDAO.update(runner, \"test\", updatedParameterData);\n        runner.close();\n\n        // then\n        assertDatabase().hasNoParameter(\"test\").hasParameter(\"updatedTest\");\n    }", "signature": "void shouldUpdateContentsOfParameter()", "full_signature": "@Test public void shouldUpdateContentsOfParameter()", "class_method_signature": "ParameterDAOTest.shouldUpdateContentsOfParameter()", "testcase": true, "constructor": false, "invocations": ["build", "withParameter", "database", "get", "queryRunner", "build", "withName", "parameter", "update", "close", "hasParameter", "hasNoParameter", "assertDatabase"]}, "focal_class": {"identifier": "ParameterDAO", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final JdbcConfig configuration;", "modifier": "private final", "type": "JdbcConfig", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final SimpleQueryRunner simpleQueryRunner;", "modifier": "private final", "type": "SimpleQueryRunner", "declarator": "simpleQueryRunner", "var_name": "simpleQueryRunner"}], "methods": [{"identifier": "ParameterDAO", "parameters": "(JdbcConfig configuration, SimpleQueryRunner simpleQueryRunner)", "modifiers": "public", "return": "", "signature": " ParameterDAO(JdbcConfig configuration, SimpleQueryRunner simpleQueryRunner)", "full_signature": "public  ParameterDAO(JdbcConfig configuration, SimpleQueryRunner simpleQueryRunner)", "class_method_signature": "ParameterDAO.ParameterDAO(JdbcConfig configuration, SimpleQueryRunner simpleQueryRunner)", "testcase": false, "constructor": true}, {"identifier": "insert", "parameters": "(QueryRunner queryRunner, Parameter parameter)", "modifiers": "public", "return": "long", "signature": "long insert(QueryRunner queryRunner, Parameter parameter)", "full_signature": "public long insert(QueryRunner queryRunner, Parameter parameter)", "class_method_signature": "ParameterDAO.insert(QueryRunner queryRunner, Parameter parameter)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(QueryRunner queryRunner, String parameterName)", "modifiers": "public", "return": "void", "signature": "void delete(QueryRunner queryRunner, String parameterName)", "full_signature": "public void delete(QueryRunner queryRunner, String parameterName)", "class_method_signature": "ParameterDAO.delete(QueryRunner queryRunner, String parameterName)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getParameterNames()", "full_signature": "public Set<String> getParameterNames()", "class_method_signature": "ParameterDAO.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "(ParameterFilter filter)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getParameterNames(ParameterFilter filter)", "full_signature": "public List<String> getParameterNames(ParameterFilter filter)", "class_method_signature": "ParameterDAO.getParameterNames(ParameterFilter filter)", "testcase": false, "constructor": false}, {"identifier": "getParameter", "parameters": "(QueryRunner queryRunner, String parameterName)", "modifiers": "public", "return": "JdbcParameter", "signature": "JdbcParameter getParameter(QueryRunner queryRunner, String parameterName)", "full_signature": "public JdbcParameter getParameter(QueryRunner queryRunner, String parameterName)", "class_method_signature": "ParameterDAO.getParameter(QueryRunner queryRunner, String parameterName)", "testcase": false, "constructor": false}, {"identifier": "parameterExists", "parameters": "(String parameterName)", "modifiers": "public", "return": "boolean", "signature": "boolean parameterExists(String parameterName)", "full_signature": "public boolean parameterExists(String parameterName)", "class_method_signature": "ParameterDAO.parameterExists(String parameterName)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(QueryRunner queryRunner, String parameterName, Parameter parameter)", "modifiers": "public", "return": "void", "signature": "void update(QueryRunner queryRunner, String parameterName, Parameter parameter)", "full_signature": "public void update(QueryRunner queryRunner, String parameterName, Parameter parameter)", "class_method_signature": "ParameterDAO.update(QueryRunner queryRunner, String parameterName, Parameter parameter)", "testcase": false, "constructor": false}], "file": "smartparam-repository-jdbc/src/main/java/org/smartparam/repository/jdbc/dao/ParameterDAO.java"}, "focal_method": {"identifier": "update", "parameters": "(QueryRunner queryRunner, String parameterName, Parameter parameter)", "modifiers": "public", "return": "void", "body": "public void update(QueryRunner queryRunner, String parameterName, Parameter parameter) {\n        UpdateQuery query = QueryFactory.update(configuration.parameterEntityName()).where(\"name = :name\")\n                .withArgument(\"name\", parameterName)\n                .set(\"name\", parameter.getName())\n                .set(\"input_levels\", parameter.getInputLevels())\n                .set(\"cacheable\", parameter.isCacheable())\n                .set(\"nullable\", parameter.isNullable())\n                .set(\"identify_entries\", parameter.isIdentifyEntries())\n                .set(\"array_separator\", parameter.getArraySeparator());\n\n        queryRunner.update(query);\n    }", "signature": "void update(QueryRunner queryRunner, String parameterName, Parameter parameter)", "full_signature": "public void update(QueryRunner queryRunner, String parameterName, Parameter parameter)", "class_method_signature": "ParameterDAO.update(QueryRunner queryRunner, String parameterName, Parameter parameter)", "testcase": false, "constructor": false, "invocations": ["set", "set", "set", "set", "set", "set", "withArgument", "where", "update", "parameterEntityName", "getName", "getInputLevels", "isCacheable", "isNullable", "isIdentifyEntries", "getArraySeparator", "update"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}