{"test_class": {"identifier": "SMILESWriterTest", "superclass": "extends ChemObjectIOTest", "interfaces": "", "fields": [], "file": "storage/smiles/src/test/java/org/openscience/cdk/io/SMILESWriterTest.java"}, "test_case": {"identifier": "testAccepts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAccepts() throws Exception {\n        SMILESWriter reader = new SMILESWriter();\n        Assert.assertTrue(reader.accepts(AtomContainer.class));\n        Assert.assertTrue(reader.accepts(AtomContainerSet.class));\n    }", "signature": "void testAccepts()", "full_signature": "@Test public void testAccepts()", "class_method_signature": "SMILESWriterTest.testAccepts()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "accepts", "assertTrue", "accepts"]}, "focal_class": {"identifier": "SMILESWriter", "superclass": "extends DefaultChemObjectWriter", "interfaces": "", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(SMILESWriter.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(SMILESWriter.class)", "var_name": "logger"}, {"original_string": "private BufferedWriter      writer;", "modifier": "private", "type": "BufferedWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "private BooleanIOSetting    useAromaticityFlag;", "modifier": "private", "type": "BooleanIOSetting", "declarator": "useAromaticityFlag", "var_name": "useAromaticityFlag"}], "methods": [{"identifier": "SMILESWriter", "parameters": "(Writer out)", "modifiers": "public", "return": "", "signature": " SMILESWriter(Writer out)", "full_signature": "public  SMILESWriter(Writer out)", "class_method_signature": "SMILESWriter.SMILESWriter(Writer out)", "testcase": false, "constructor": true}, {"identifier": "SMILESWriter", "parameters": "(OutputStream output)", "modifiers": "public", "return": "", "signature": " SMILESWriter(OutputStream output)", "full_signature": "public  SMILESWriter(OutputStream output)", "class_method_signature": "SMILESWriter.SMILESWriter(OutputStream output)", "testcase": false, "constructor": true}, {"identifier": "SMILESWriter", "parameters": "()", "modifiers": "public", "return": "", "signature": " SMILESWriter()", "full_signature": "public  SMILESWriter()", "class_method_signature": "SMILESWriter.SMILESWriter()", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "IResourceFormat", "signature": "IResourceFormat getFormat()", "full_signature": "@Override public IResourceFormat getFormat()", "class_method_signature": "SMILESWriter.getFormat()", "testcase": false, "constructor": false}, {"identifier": "setWriter", "parameters": "(Writer out)", "modifiers": "@Override public", "return": "void", "signature": "void setWriter(Writer out)", "full_signature": "@Override public void setWriter(Writer out)", "class_method_signature": "SMILESWriter.setWriter(Writer out)", "testcase": false, "constructor": false}, {"identifier": "setWriter", "parameters": "(OutputStream output)", "modifiers": "@Override public", "return": "void", "signature": "void setWriter(OutputStream output)", "full_signature": "@Override public void setWriter(OutputStream output)", "class_method_signature": "SMILESWriter.setWriter(OutputStream output)", "testcase": false, "constructor": false}, {"identifier": "SMILESWriter", "parameters": "(FileOutputStream out)", "modifiers": "public", "return": "", "signature": " SMILESWriter(FileOutputStream out)", "full_signature": "public  SMILESWriter(FileOutputStream out)", "class_method_signature": "SMILESWriter.SMILESWriter(FileOutputStream out)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SMILESWriter.close()", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> classObject)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accepts(Class<? extends IChemObject> classObject)", "full_signature": "@Override public boolean accepts(Class<? extends IChemObject> classObject)", "class_method_signature": "SMILESWriter.accepts(Class<? extends IChemObject> classObject)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(IChemObject object)", "modifiers": "@Override public", "return": "void", "signature": "void write(IChemObject object)", "full_signature": "@Override public void write(IChemObject object)", "class_method_signature": "SMILESWriter.write(IChemObject object)", "testcase": false, "constructor": false}, {"identifier": "writeAtomContainerSet", "parameters": "(IAtomContainerSet som)", "modifiers": "public", "return": "void", "signature": "void writeAtomContainerSet(IAtomContainerSet som)", "full_signature": "public void writeAtomContainerSet(IAtomContainerSet som)", "class_method_signature": "SMILESWriter.writeAtomContainerSet(IAtomContainerSet som)", "testcase": false, "constructor": false}, {"identifier": "writeAtomContainer", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "void", "signature": "void writeAtomContainer(IAtomContainer molecule)", "full_signature": "public void writeAtomContainer(IAtomContainer molecule)", "class_method_signature": "SMILESWriter.writeAtomContainer(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "initIOSettings", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initIOSettings()", "full_signature": "private void initIOSettings()", "class_method_signature": "SMILESWriter.initIOSettings()", "testcase": false, "constructor": false}, {"identifier": "customizeJob", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void customizeJob()", "full_signature": "public void customizeJob()", "class_method_signature": "SMILESWriter.customizeJob()", "testcase": false, "constructor": false}], "file": "storage/smiles/src/main/java/org/openscience/cdk/io/SMILESWriter.java"}, "focal_method": {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> classObject)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean accepts(Class<? extends IChemObject> classObject) {\n        if (IAtomContainer.class.equals(classObject)) return true;\n        if (IAtomContainerSet.class.equals(classObject)) return true;\n        Class<?>[] interfaces = classObject.getInterfaces();\n        for (int i = 0; i < interfaces.length; i++) {\n            if (IAtomContainerSet.class.equals(interfaces[i])) return true;\n            if (IAtomContainer.class.equals(interfaces[i])) return true;\n        }\n        Class superClass = classObject.getSuperclass();\n        if (superClass != null) return this.accepts(superClass);\n        return false;\n    }", "signature": "boolean accepts(Class<? extends IChemObject> classObject)", "full_signature": "@Override public boolean accepts(Class<? extends IChemObject> classObject)", "class_method_signature": "SMILESWriter.accepts(Class<? extends IChemObject> classObject)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "getInterfaces", "equals", "equals", "getSuperclass", "accepts"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}