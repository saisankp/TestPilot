{"test_class": {"identifier": "MigrationManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "step-controller/step-controller-initialization/src/test/java/step/migration/MigrationManagerTest.java"}, "test_case": {"identifier": "testUpgrade2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testUpgrade2() {\n\t\tStringBuilder s = new StringBuilder();\n\t\tMigrationManager m = getMigrationManager(s);\n\t\tm.migrate(new Version(1, 2, 2), new Version(5, 2, 4));\n\t\tassertEquals(\"1.2.3,1.2.4,1.2.5,2.2.5,\", s.toString());\n\t}", "signature": "void testUpgrade2()", "full_signature": "@Test public void testUpgrade2()", "class_method_signature": "MigrationManagerTest.testUpgrade2()", "testcase": true, "constructor": false, "invocations": ["getMigrationManager", "migrate", "assertEquals", "toString"]}, "focal_class": {"identifier": "MigrationManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(MigrationManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MigrationManager.class)", "var_name": "logger"}, {"original_string": "protected final GlobalContext context;", "modifier": "protected final", "type": "GlobalContext", "declarator": "context", "var_name": "context"}, {"original_string": "protected List<MigrationTask> migrators = new ArrayList<>();", "modifier": "protected", "type": "List<MigrationTask>", "declarator": "migrators = new ArrayList<>()", "var_name": "migrators"}], "methods": [{"identifier": "MigrationManager", "parameters": "(GlobalContext context)", "modifiers": "public", "return": "", "signature": " MigrationManager(GlobalContext context)", "full_signature": "public  MigrationManager(GlobalContext context)", "class_method_signature": "MigrationManager.MigrationManager(GlobalContext context)", "testcase": false, "constructor": true}, {"identifier": "register", "parameters": "(MigrationTask migrationTask)", "modifiers": "public", "return": "void", "signature": "void register(MigrationTask migrationTask)", "full_signature": "public void register(MigrationTask migrationTask)", "class_method_signature": "MigrationManager.register(MigrationTask migrationTask)", "testcase": false, "constructor": false}, {"identifier": "migrate", "parameters": "(Version from, Version to)", "modifiers": "public", "return": "boolean", "signature": "boolean migrate(Version from, Version to)", "full_signature": "public boolean migrate(Version from, Version to)", "class_method_signature": "MigrationManager.migrate(Version from, Version to)", "testcase": false, "constructor": false}], "file": "step-controller/step-controller-initialization/src/main/java/step/migration/MigrationManager.java"}, "focal_method": {"identifier": "migrate", "parameters": "(Version from, Version to)", "modifiers": "public", "return": "boolean", "body": "public boolean migrate(Version from, Version to) {\n\t\tlogger.info(\"Migrating from \"+from+\" to \"+to);\n\t\tAtomicBoolean successful = new AtomicBoolean(true);\n\t\tList<MigrationTask> matchedMigrators = new ArrayList<>();\n\n\t\tboolean upgrade = to.compareTo(from)>=1;\n\t\tfor(MigrationTask migrator:migrators) {\n\t\t\tif(migrator.asOfVersion.compareTo(upgrade?from:to)>=1 && migrator.asOfVersion.compareTo(upgrade?to:from)<=0) {\n\t\t\t\tmatchedMigrators.add(migrator);\n\t\t\t}\n\t\t}\t\n\t\tmatchedMigrators.sort(new Comparator<MigrationTask>() {\n\t\t\t@Override\n\t\t\tpublic int compare(MigrationTask o1, MigrationTask o2) {\n\t\t\t\treturn (upgrade?1:-1)*o1.asOfVersion.compareTo(o2.asOfVersion);\n\t\t\t}\n\t\t});\n\t\tmatchedMigrators.forEach(m->{\n\t\t\tlogger.info(\"Running migration task \"+m);\n\t\t\tlong t1 = System.currentTimeMillis();\n\t\t\ttry {\n\t\t\t\tif(upgrade) {\n\t\t\t\t\tm.runUpgradeScript();\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tm.runDowngradeScript();\n\t\t\t\t}\n\t\t\t\tlogger.info(\"Migration task \"+m+\" successfully executed in \"+(System.currentTimeMillis()-t1)+\"ms\");\n\t\t\t} catch(Exception e) {\n\t\t\t\tlogger.error(\"Error while running upgrade/downgrade script \"+m, e);\n\t\t\t\tsuccessful.set(false);\n\t\t\t}\n\t\t});\n\t\treturn successful.get();\n\t}", "signature": "boolean migrate(Version from, Version to)", "full_signature": "public boolean migrate(Version from, Version to)", "class_method_signature": "MigrationManager.migrate(Version from, Version to)", "testcase": false, "constructor": false, "invocations": ["info", "compareTo", "compareTo", "compareTo", "add", "sort", "compareTo", "forEach", "info", "currentTimeMillis", "runUpgradeScript", "runDowngradeScript", "info", "currentTimeMillis", "error", "set", "get"]}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}