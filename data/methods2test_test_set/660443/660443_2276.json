{"test_class": {"identifier": "ElementTest", "superclass": "extends AbstractElementTest", "interfaces": "", "fields": [], "file": "base/silent/src/test/java/org/openscience/cdk/silent/ElementTest.java"}, "test_case": {"identifier": "compareDiffAtomicNumber", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void compareDiffAtomicNumber() {\n        Element e1 = new Element(new String(\"H\"), 1);\n        Element e2 = new Element(new String(\"H\"), null);\n        Assert.assertFalse(e1.compare(e2));\n    }", "signature": "void compareDiffAtomicNumber()", "full_signature": "@Test public void compareDiffAtomicNumber()", "class_method_signature": "ElementTest.compareDiffAtomicNumber()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "compare"]}, "focal_class": {"identifier": "Element", "superclass": "extends ChemObject", "interfaces": "implements Serializable, IElement, Cloneable", "fields": [{"original_string": "private static final long serialVersionUID = 3062529834691231436L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 3062529834691231436L", "var_name": "serialVersionUID"}, {"original_string": "protected Integer atomicNumber = null;", "modifier": "protected", "type": "Integer", "declarator": "atomicNumber = null", "var_name": "atomicNumber"}], "methods": [{"identifier": "Element", "parameters": "()", "modifiers": "public", "return": "", "signature": " Element()", "full_signature": "public  Element()", "class_method_signature": "Element.Element()", "testcase": false, "constructor": true}, {"identifier": "Element", "parameters": "(IElement element)", "modifiers": "public", "return": "", "signature": " Element(IElement element)", "full_signature": "public  Element(IElement element)", "class_method_signature": "Element.Element(IElement element)", "testcase": false, "constructor": true}, {"identifier": "Element", "parameters": "(String symbol)", "modifiers": "public", "return": "", "signature": " Element(String symbol)", "full_signature": "public  Element(String symbol)", "class_method_signature": "Element.Element(String symbol)", "testcase": false, "constructor": true}, {"identifier": "Element", "parameters": "(String symbol, Integer atomicNumber)", "modifiers": "public", "return": "", "signature": " Element(String symbol, Integer atomicNumber)", "full_signature": "public  Element(String symbol, Integer atomicNumber)", "class_method_signature": "Element.Element(String symbol, Integer atomicNumber)", "testcase": false, "constructor": true}, {"identifier": "getAtomicNumber", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getAtomicNumber()", "full_signature": "@Override public Integer getAtomicNumber()", "class_method_signature": "Element.getAtomicNumber()", "testcase": false, "constructor": false}, {"identifier": "setAtomicNumber", "parameters": "(Integer atomicNumber)", "modifiers": "@Override public", "return": "void", "signature": "void setAtomicNumber(Integer atomicNumber)", "full_signature": "@Override public void setAtomicNumber(Integer atomicNumber)", "class_method_signature": "Element.setAtomicNumber(Integer atomicNumber)", "testcase": false, "constructor": false}, {"identifier": "getSymbol", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSymbol()", "full_signature": "@Override public String getSymbol()", "class_method_signature": "Element.getSymbol()", "testcase": false, "constructor": false}, {"identifier": "setSymbol", "parameters": "(String symbol)", "modifiers": "@Override public", "return": "void", "signature": "void setSymbol(String symbol)", "full_signature": "@Override public void setSymbol(String symbol)", "class_method_signature": "Element.setSymbol(String symbol)", "testcase": false, "constructor": false}, {"identifier": "setSymbolInternal", "parameters": "(String symbol)", "modifiers": "private", "return": "void", "signature": "void setSymbolInternal(String symbol)", "full_signature": "private void setSymbolInternal(String symbol)", "class_method_signature": "Element.setSymbolInternal(String symbol)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Element.toString()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "Element.clone()", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(Object object)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean compare(Object object)", "full_signature": "@Override public boolean compare(Object object)", "class_method_signature": "Element.compare(Object object)", "testcase": false, "constructor": false}], "file": "base/silent/src/main/java/org/openscience/cdk/silent/Element.java"}, "focal_method": {"identifier": "compare", "parameters": "(Object object)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean compare(Object object) {\n        if (!(object instanceof Element)) {\n            return false;\n        }\n        if (!super.compare(object)) {\n            return false;\n        }\n        Element elem = (Element) object;\n        return Objects.equal(atomicNumber, elem.atomicNumber);\n    }", "signature": "boolean compare(Object object)", "full_signature": "@Override public boolean compare(Object object)", "class_method_signature": "Element.compare(Object object)", "testcase": false, "constructor": false, "invocations": ["compare", "equal"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}