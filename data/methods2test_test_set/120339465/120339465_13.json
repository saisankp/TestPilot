{"test_class": {"identifier": "IntervalRegistryLoggerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IntervalRegistryLogger logger;", "modifier": "private", "type": "IntervalRegistryLogger", "declarator": "logger", "var_name": "logger"}, {"original_string": "private HostRequestIntervalRegistry requestRegistry = mock(HostRequestIntervalRegistry.class);", "modifier": "private", "type": "HostRequestIntervalRegistry", "declarator": "requestRegistry = mock(HostRequestIntervalRegistry.class)", "var_name": "requestRegistry"}], "file": "common/transport/src/test/java/com/hashmapinc/server/common/transport/quota/inmemory/IntervalRegistryLoggerTest.java"}, "test_case": {"identifier": "onlyMaxHostsCollected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onlyMaxHostsCollected() {\n        Map<String, Long> map = ImmutableMap.of(\"a\", 8L, \"b\", 3L, \"c\", 1L, \"d\", 3L);\n        Map<String, Long> actual = logger.getTopElements(map);\n        Map<String, Long> expected = ImmutableMap.of(\"a\", 8L, \"b\", 3L, \"d\", 3L);\n\n        assertEquals(expected, actual);\n    }", "signature": "void onlyMaxHostsCollected()", "full_signature": "@Test public void onlyMaxHostsCollected()", "class_method_signature": "IntervalRegistryLoggerTest.onlyMaxHostsCollected()", "testcase": true, "constructor": false, "invocations": ["of", "getTopElements", "of", "assertEquals"]}, "focal_class": {"identifier": "IntervalRegistryLogger", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int topSize;", "modifier": "private final", "type": "int", "declarator": "topSize", "var_name": "topSize"}, {"original_string": "private final HostRequestIntervalRegistry intervalRegistry;", "modifier": "private final", "type": "HostRequestIntervalRegistry", "declarator": "intervalRegistry", "var_name": "intervalRegistry"}, {"original_string": "private final long logIntervalMin;", "modifier": "private final", "type": "long", "declarator": "logIntervalMin", "var_name": "logIntervalMin"}, {"original_string": "private ScheduledExecutorService executor;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "executor", "var_name": "executor"}], "methods": [{"identifier": "IntervalRegistryLogger", "parameters": "(@Value(\"${quota.log.topSize}\") int topSize, @Value(\"${quota.log.intervalMin}\") long logIntervalMin,\n                                  HostRequestIntervalRegistry intervalRegistry)", "modifiers": "public", "return": "", "signature": " IntervalRegistryLogger(@Value(\"${quota.log.topSize}\") int topSize, @Value(\"${quota.log.intervalMin}\") long logIntervalMin,\n                                  HostRequestIntervalRegistry intervalRegistry)", "full_signature": "public  IntervalRegistryLogger(@Value(\"${quota.log.topSize}\") int topSize, @Value(\"${quota.log.intervalMin}\") long logIntervalMin,\n                                  HostRequestIntervalRegistry intervalRegistry)", "class_method_signature": "IntervalRegistryLogger.IntervalRegistryLogger(@Value(\"${quota.log.topSize}\") int topSize, @Value(\"${quota.log.intervalMin}\") long logIntervalMin,\n                                  HostRequestIntervalRegistry intervalRegistry)", "testcase": false, "constructor": true}, {"identifier": "schedule", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void schedule()", "full_signature": "public void schedule()", "class_method_signature": "IntervalRegistryLogger.schedule()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "IntervalRegistryLogger.stop()", "testcase": false, "constructor": false}, {"identifier": "logStatistic", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void logStatistic()", "full_signature": "public void logStatistic()", "class_method_signature": "IntervalRegistryLogger.logStatistic()", "testcase": false, "constructor": false}, {"identifier": "getTopElements", "parameters": "(Map<String, Long> countMap)", "modifiers": "protected", "return": "Map<String, Long>", "signature": "Map<String, Long> getTopElements(Map<String, Long> countMap)", "full_signature": "protected Map<String, Long> getTopElements(Map<String, Long> countMap)", "class_method_signature": "IntervalRegistryLogger.getTopElements(Map<String, Long> countMap)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(Map<String, Long> top, int uniqHosts, long requestsCount)", "modifiers": "private", "return": "void", "signature": "void log(Map<String, Long> top, int uniqHosts, long requestsCount)", "full_signature": "private void log(Map<String, Long> top, int uniqHosts, long requestsCount)", "class_method_signature": "IntervalRegistryLogger.log(Map<String, Long> top, int uniqHosts, long requestsCount)", "testcase": false, "constructor": false}], "file": "common/transport/src/main/java/com/hashmapinc/server/common/transport/quota/inmemory/IntervalRegistryLogger.java"}, "focal_method": {"identifier": "getTopElements", "parameters": "(Map<String, Long> countMap)", "modifiers": "protected", "return": "Map<String, Long>", "body": "protected Map<String, Long> getTopElements(Map<String, Long> countMap) {\n        MinMaxPriorityQueue<Map.Entry<String, Long>> topQueue = MinMaxPriorityQueue\n                .orderedBy(Comparator.comparing((Function<Map.Entry<String, Long>, Long>) Map.Entry::getValue).reversed())\n                .maximumSize(topSize)\n                .create(countMap.entrySet());\n\n        return topQueue.stream().collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n    }", "signature": "Map<String, Long> getTopElements(Map<String, Long> countMap)", "full_signature": "protected Map<String, Long> getTopElements(Map<String, Long> countMap)", "class_method_signature": "IntervalRegistryLogger.getTopElements(Map<String, Long> countMap)", "testcase": false, "constructor": false, "invocations": ["create", "maximumSize", "orderedBy", "reversed", "comparing", "entrySet", "collect", "stream", "toMap"]}, "repository": {"repo_id": 120339465, "url": "https://github.com/hashmapinc/Tempus", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 22, "size": 57693, "license": "licensed"}}