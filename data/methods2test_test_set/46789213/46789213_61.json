{"test_class": {"identifier": "TestMascotResourcePoolImpl", "superclass": "", "interfaces": "", "fields": [], "file": "tools/mascot/src/test/java/dk/alexandra/fresco/tools/mascot/TestMascotResourcePoolImpl.java"}, "test_case": {"identifier": "testCreateRotForSelf", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void testCreateRotForSelf() {\n    MascotResourcePool resourcePool = new MascotResourcePoolImpl(1, 1, 1,\n        new AesCtrDrbg(new byte[32]), null, new MascotSecurityParameters(),\n        new BigIntegerFieldDefinition(ModulusFinder.findSuitableModulus(128)));\n    resourcePool.createRot(1, null);\n  }", "signature": "void testCreateRotForSelf()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testCreateRotForSelf()", "class_method_signature": "TestMascotResourcePoolImpl.testCreateRotForSelf()", "testcase": true, "constructor": false, "invocations": ["findSuitableModulus", "createRot"]}, "focal_class": {"identifier": "MascotResourcePoolImpl", "superclass": "extends ResourcePoolImpl", "interfaces": "implements MascotResourcePool", "fields": [{"original_string": "private final Map<Integer, RotList> seedOts;", "modifier": "private final", "type": "Map<Integer, RotList>", "declarator": "seedOts", "var_name": "seedOts"}, {"original_string": "private final int instanceId;", "modifier": "private final", "type": "int", "declarator": "instanceId", "var_name": "instanceId"}, {"original_string": "private final FieldDefinition fieldDefinition;", "modifier": "private final", "type": "FieldDefinition", "declarator": "fieldDefinition", "var_name": "fieldDefinition"}, {"original_string": "private final FieldElementPrg localSampler;", "modifier": "private final", "type": "FieldElementPrg", "declarator": "localSampler", "var_name": "localSampler"}, {"original_string": "private final MessageDigest messageDigest;", "modifier": "private final", "type": "MessageDigest", "declarator": "messageDigest", "var_name": "messageDigest"}, {"original_string": "private final MascotSecurityParameters mascotSecurityParameters;", "modifier": "private final", "type": "MascotSecurityParameters", "declarator": "mascotSecurityParameters", "var_name": "mascotSecurityParameters"}, {"original_string": "private final Drbg drbg;", "modifier": "private final", "type": "Drbg", "declarator": "drbg", "var_name": "drbg"}], "methods": [{"identifier": "MascotResourcePoolImpl", "parameters": "(int myId, int noOfParties, int instanceId, Drbg drbg,\n      Map<Integer, RotList> seedOts, MascotSecurityParameters mascotSecurityParameters,\n      FieldDefinition fieldDefinition)", "modifiers": "public", "return": "", "signature": " MascotResourcePoolImpl(int myId, int noOfParties, int instanceId, Drbg drbg,\n      Map<Integer, RotList> seedOts, MascotSecurityParameters mascotSecurityParameters,\n      FieldDefinition fieldDefinition)", "full_signature": "public  MascotResourcePoolImpl(int myId, int noOfParties, int instanceId, Drbg drbg,\n      Map<Integer, RotList> seedOts, MascotSecurityParameters mascotSecurityParameters,\n      FieldDefinition fieldDefinition)", "class_method_signature": "MascotResourcePoolImpl.MascotResourcePoolImpl(int myId, int noOfParties, int instanceId, Drbg drbg,\n      Map<Integer, RotList> seedOts, MascotSecurityParameters mascotSecurityParameters,\n      FieldDefinition fieldDefinition)", "testcase": false, "constructor": true}, {"identifier": "getFieldDefinition", "parameters": "()", "modifiers": "@Override public", "return": "FieldDefinition", "signature": "FieldDefinition getFieldDefinition()", "full_signature": "@Override public FieldDefinition getFieldDefinition()", "class_method_signature": "MascotResourcePoolImpl.getFieldDefinition()", "testcase": false, "constructor": false}, {"identifier": "getInstanceId", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getInstanceId()", "full_signature": "@Override public int getInstanceId()", "class_method_signature": "MascotResourcePoolImpl.getInstanceId()", "testcase": false, "constructor": false}, {"identifier": "getModBitLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getModBitLength()", "full_signature": "@Override public int getModBitLength()", "class_method_signature": "MascotResourcePoolImpl.getModBitLength()", "testcase": false, "constructor": false}, {"identifier": "getLambdaSecurityParam", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getLambdaSecurityParam()", "full_signature": "@Override public int getLambdaSecurityParam()", "class_method_signature": "MascotResourcePoolImpl.getLambdaSecurityParam()", "testcase": false, "constructor": false}, {"identifier": "getNumCandidatesPerTriple", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNumCandidatesPerTriple()", "full_signature": "@Override public int getNumCandidatesPerTriple()", "class_method_signature": "MascotResourcePoolImpl.getNumCandidatesPerTriple()", "testcase": false, "constructor": false}, {"identifier": "getLocalSampler", "parameters": "()", "modifiers": "@Override public", "return": "FieldElementPrg", "signature": "FieldElementPrg getLocalSampler()", "full_signature": "@Override public FieldElementPrg getLocalSampler()", "class_method_signature": "MascotResourcePoolImpl.getLocalSampler()", "testcase": false, "constructor": false}, {"identifier": "createRot", "parameters": "(int otherId, Network network)", "modifiers": "@Override public", "return": "RotBatch", "signature": "RotBatch createRot(int otherId, Network network)", "full_signature": "@Override public RotBatch createRot(int otherId, Network network)", "class_method_signature": "MascotResourcePoolImpl.createRot(int otherId, Network network)", "testcase": false, "constructor": false}, {"identifier": "getRandomGenerator", "parameters": "()", "modifiers": "@Override public", "return": "Drbg", "signature": "Drbg getRandomGenerator()", "full_signature": "@Override public Drbg getRandomGenerator()", "class_method_signature": "MascotResourcePoolImpl.getRandomGenerator()", "testcase": false, "constructor": false}, {"identifier": "getMessageDigest", "parameters": "()", "modifiers": "@Override public", "return": "MessageDigest", "signature": "MessageDigest getMessageDigest()", "full_signature": "@Override public MessageDigest getMessageDigest()", "class_method_signature": "MascotResourcePoolImpl.getMessageDigest()", "testcase": false, "constructor": false}, {"identifier": "getPrgSeedLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getPrgSeedLength()", "full_signature": "@Override public int getPrgSeedLength()", "class_method_signature": "MascotResourcePoolImpl.getPrgSeedLength()", "testcase": false, "constructor": false}], "file": "tools/mascot/src/main/java/dk/alexandra/fresco/tools/mascot/MascotResourcePoolImpl.java"}, "focal_method": {"identifier": "createRot", "parameters": "(int otherId, Network network)", "modifiers": "@Override public", "return": "RotBatch", "body": "@Override\n  public RotBatch createRot(int otherId, Network network) {\n    if (getMyId() == otherId) {\n      throw new IllegalArgumentException(\"Cannot initialize with self\");\n    }\n    CoinTossing ct = new CoinTossing(getMyId(), otherId, getRandomGenerator());\n    ct.initialize(network);\n    OtExtensionResourcePool otResources = new OtExtensionResourcePoolImpl(getMyId(), otherId,\n        getPrgSeedLength(), getLambdaSecurityParam(), getInstanceId(),\n        getRandomGenerator(), ct, seedOts.get(otherId));\n    return new BristolRotBatch(new RotFactory(otResources, network),\n        getPrgSeedLength(), getLambdaSecurityParam());\n  }", "signature": "RotBatch createRot(int otherId, Network network)", "full_signature": "@Override public RotBatch createRot(int otherId, Network network)", "class_method_signature": "MascotResourcePoolImpl.createRot(int otherId, Network network)", "testcase": false, "constructor": false, "invocations": ["getMyId", "getMyId", "getRandomGenerator", "initialize", "getMyId", "getPrgSeedLength", "getLambdaSecurityParam", "getInstanceId", "getRandomGenerator", "get", "getPrgSeedLength", "getLambdaSecurityParam"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}