{"test_class": {"identifier": "IsMachinePortOpenTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String RESULT = \"result\";", "modifier": "private static final", "type": "String", "declarator": "RESULT = \"result\"", "var_name": "RESULT"}], "file": "core/src/test/java/com/axemblr/provisionr/core/activities/IsMachinePortOpenTest.java"}, "test_case": {"identifier": "testWithRandomClosedPort", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithRandomClosedPort() throws Exception {\n        DelegateExecution execution = mock(DelegateExecution.class);\n\n        when(execution.getVariable(eq(IsMachinePortOpen.MACHINE)))\n            .thenReturn(Machine.builder().localhost().createMachine());\n\n        ProcessVariablesCollector collector = new ProcessVariablesCollector();\n        collector.install(execution);\n\n        JavaDelegate delegate = new IsMachinePortOpen(RESULT, findRandomNotUsedPort());\n        delegate.execute(execution);\n\n        assertThat((Boolean) collector.getVariable(RESULT)).isFalse();\n    }", "signature": "void testWithRandomClosedPort()", "full_signature": "@Test public void testWithRandomClosedPort()", "class_method_signature": "IsMachinePortOpenTest.testWithRandomClosedPort()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getVariable", "eq", "createMachine", "localhost", "builder", "install", "findRandomNotUsedPort", "execute", "isFalse", "assertThat", "getVariable"]}, "focal_class": {"identifier": "IsMachinePortOpen", "superclass": "", "interfaces": "implements JavaDelegate", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(IsMachinePortOpen.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(IsMachinePortOpen.class)", "var_name": "LOG"}, {"original_string": "public static final String MACHINE = \"machine\";", "modifier": "public static final", "type": "String", "declarator": "MACHINE = \"machine\"", "var_name": "MACHINE"}, {"original_string": "public static final int TIMEOUT_IN_MILLISECONDS = 1000;", "modifier": "public static final", "type": "int", "declarator": "TIMEOUT_IN_MILLISECONDS = 1000", "var_name": "TIMEOUT_IN_MILLISECONDS"}, {"original_string": "private final String resultVariable;", "modifier": "private final", "type": "String", "declarator": "resultVariable", "var_name": "resultVariable"}, {"original_string": "private final int port;", "modifier": "private final", "type": "int", "declarator": "port", "var_name": "port"}], "methods": [{"identifier": "IsMachinePortOpen", "parameters": "(String resultVariable, int port)", "modifiers": "public", "return": "", "signature": " IsMachinePortOpen(String resultVariable, int port)", "full_signature": "public  IsMachinePortOpen(String resultVariable, int port)", "class_method_signature": "IsMachinePortOpen.IsMachinePortOpen(String resultVariable, int port)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(DelegateExecution execution)", "modifiers": "@Override public", "return": "void", "signature": "void execute(DelegateExecution execution)", "full_signature": "@Override public void execute(DelegateExecution execution)", "class_method_signature": "IsMachinePortOpen.execute(DelegateExecution execution)", "testcase": false, "constructor": false}, {"identifier": "isPortOpen", "parameters": "(Machine machine, int port)", "modifiers": "private", "return": "boolean", "signature": "boolean isPortOpen(Machine machine, int port)", "full_signature": "private boolean isPortOpen(Machine machine, int port)", "class_method_signature": "IsMachinePortOpen.isPortOpen(Machine machine, int port)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/axemblr/provisionr/core/activities/IsMachinePortOpen.java"}, "focal_method": {"identifier": "execute", "parameters": "(DelegateExecution execution)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(DelegateExecution execution) throws Exception {\n        Machine machine = (Machine) execution.getVariable(MACHINE);\n        checkNotNull(machine, \"expecting a process variable named machine (multi-instance?)\");\n\n        if (isPortOpen(machine, port)) {\n            LOG.info(\"<< Port {} is OPEN on {}\", port, machine.getPublicDnsName());\n            execution.setVariable(resultVariable, true);\n\n        } else {\n            LOG.info(\"<< Port {} is CLOSED on {}\", port, machine.getPublicDnsName());\n            execution.setVariable(resultVariable, false);\n        }\n    }", "signature": "void execute(DelegateExecution execution)", "full_signature": "@Override public void execute(DelegateExecution execution)", "class_method_signature": "IsMachinePortOpen.execute(DelegateExecution execution)", "testcase": false, "constructor": false, "invocations": ["getVariable", "checkNotNull", "isPortOpen", "info", "getPublicDnsName", "setVariable", "info", "getPublicDnsName", "setVariable"]}, "repository": {"repo_id": 6035195, "url": "https://github.com/axemblr/axemblr-provisionr", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 30, "size": 3329, "license": "licensed"}}