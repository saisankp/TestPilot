{"test_class": {"identifier": "PolicyInvalidExceptionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final JsonObject KNOWN_JSON = JsonFactory.newObjectBuilder()\n            .set(DittoRuntimeException.JsonFields.STATUS, PolicyInvalidException.STATUS_CODE.toInt())\n            .set(DittoRuntimeException.JsonFields.ERROR_CODE, PolicyInvalidException.ERROR_CODE)\n            .set(DittoRuntimeException.JsonFields.MESSAGE,\n                    TestConstants.Thing.POLICY_INVALID_EXCEPTION.getMessage())\n            .set(DittoRuntimeException.JsonFields.DESCRIPTION,\n                    TestConstants.Thing.POLICY_INVALID_EXCEPTION.getDescription().orElse(null),\n                    JsonField.isValueNonNull())\n            .set(DittoRuntimeException.JsonFields.HREF,\n                    TestConstants.Thing.POLICY_INVALID_EXCEPTION.getHref()\n                            .map(URI::toString).orElse(null),\n                    JsonField.isValueNonNull())\n            .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "KNOWN_JSON = JsonFactory.newObjectBuilder()\n            .set(DittoRuntimeException.JsonFields.STATUS, PolicyInvalidException.STATUS_CODE.toInt())\n            .set(DittoRuntimeException.JsonFields.ERROR_CODE, PolicyInvalidException.ERROR_CODE)\n            .set(DittoRuntimeException.JsonFields.MESSAGE,\n                    TestConstants.Thing.POLICY_INVALID_EXCEPTION.getMessage())\n            .set(DittoRuntimeException.JsonFields.DESCRIPTION,\n                    TestConstants.Thing.POLICY_INVALID_EXCEPTION.getDescription().orElse(null),\n                    JsonField.isValueNonNull())\n            .set(DittoRuntimeException.JsonFields.HREF,\n                    TestConstants.Thing.POLICY_INVALID_EXCEPTION.getHref()\n                            .map(URI::toString).orElse(null),\n                    JsonField.isValueNonNull())\n            .build()", "var_name": "KNOWN_JSON"}], "file": "signals/commands/things/src/test/java/org/eclipse/ditto/signals/commands/things/exceptions/PolicyInvalidExceptionTest.java"}, "test_case": {"identifier": "copy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void copy() {\n        final DittoRuntimeException copy =\n                DittoRuntimeException.newBuilder(TestConstants.Thing.POLICY_INVALID_EXCEPTION).build();\n\n        assertThat(copy).isEqualTo(TestConstants.Thing.POLICY_INVALID_EXCEPTION);\n    }", "signature": "void copy()", "full_signature": "@Test public void copy()", "class_method_signature": "PolicyInvalidExceptionTest.copy()", "testcase": true, "constructor": false, "invocations": ["build", "newBuilder", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "PolicyInvalidException", "superclass": "extends DittoRuntimeException", "interfaces": "implements ThingException", "fields": [{"original_string": "public static final String ERROR_CODE = ERROR_CODE_PREFIX + \"policy.invalid\";", "modifier": "public static final", "type": "String", "declarator": "ERROR_CODE = ERROR_CODE_PREFIX + \"policy.invalid\"", "var_name": "ERROR_CODE"}, {"original_string": "static final HttpStatusCode STATUS_CODE = HttpStatusCode.BAD_REQUEST;", "modifier": "static final", "type": "HttpStatusCode", "declarator": "STATUS_CODE = HttpStatusCode.BAD_REQUEST", "var_name": "STATUS_CODE"}, {"original_string": "private static final String MESSAGE_TEMPLATE = \"The Policy specified for the Thing with ID ''{0}'' is invalid.\";", "modifier": "private static final", "type": "String", "declarator": "MESSAGE_TEMPLATE = \"The Policy specified for the Thing with ID ''{0}'' is invalid.\"", "var_name": "MESSAGE_TEMPLATE"}, {"original_string": "private static final String DESCRIPTION_TEMPLATE =\n            \"It must contain at least one Subject with the following permission(s): ''{0}''!\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION_TEMPLATE =\n            \"It must contain at least one Subject with the following permission(s): ''{0}''!\"", "var_name": "DESCRIPTION_TEMPLATE"}, {"original_string": "private static final long serialVersionUID = -4503670096839743360L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -4503670096839743360L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "PolicyInvalidException", "parameters": "(final DittoHeaders dittoHeaders,\n            @Nullable final String message,\n            @Nullable final String description,\n            @Nullable final Throwable cause,\n            @Nullable final URI href)", "modifiers": "private", "return": "", "signature": " PolicyInvalidException(final DittoHeaders dittoHeaders,\n            @Nullable final String message,\n            @Nullable final String description,\n            @Nullable final Throwable cause,\n            @Nullable final URI href)", "full_signature": "private  PolicyInvalidException(final DittoHeaders dittoHeaders,\n            @Nullable final String message,\n            @Nullable final String description,\n            @Nullable final Throwable cause,\n            @Nullable final URI href)", "class_method_signature": "PolicyInvalidException.PolicyInvalidException(final DittoHeaders dittoHeaders,\n            @Nullable final String message,\n            @Nullable final String description,\n            @Nullable final Throwable cause,\n            @Nullable final URI href)", "testcase": false, "constructor": true}, {"identifier": "newBuilder", "parameters": "(final Collection<String> permissions, final ThingId thingId)", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder(final Collection<String> permissions, final ThingId thingId)", "full_signature": "public static Builder newBuilder(final Collection<String> permissions, final ThingId thingId)", "class_method_signature": "PolicyInvalidException.newBuilder(final Collection<String> permissions, final ThingId thingId)", "testcase": false, "constructor": false}, {"identifier": "newBuilderForCause", "parameters": "(final Throwable cause, final ThingId thingId)", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilderForCause(final Throwable cause, final ThingId thingId)", "full_signature": "public static Builder newBuilderForCause(final Throwable cause, final ThingId thingId)", "class_method_signature": "PolicyInvalidException.newBuilderForCause(final Throwable cause, final ThingId thingId)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "PolicyInvalidException", "signature": "PolicyInvalidException fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "full_signature": "public static PolicyInvalidException fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "class_method_signature": "PolicyInvalidException.fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "getEmptyBuilder", "parameters": "()", "modifiers": "@Override protected", "return": "DittoRuntimeExceptionBuilder<? extends DittoRuntimeException>", "signature": "DittoRuntimeExceptionBuilder<? extends DittoRuntimeException> getEmptyBuilder()", "full_signature": "@Override protected DittoRuntimeExceptionBuilder<? extends DittoRuntimeException> getEmptyBuilder()", "class_method_signature": "PolicyInvalidException.getEmptyBuilder()", "testcase": false, "constructor": false}, {"identifier": "getSupportedSchemaVersions", "parameters": "()", "modifiers": "@Override public", "return": "JsonSchemaVersion[]", "signature": "JsonSchemaVersion[] getSupportedSchemaVersions()", "full_signature": "@Override public JsonSchemaVersion[] getSupportedSchemaVersions()", "class_method_signature": "PolicyInvalidException.getSupportedSchemaVersions()", "testcase": false, "constructor": false}], "file": "signals/commands/things/src/main/java/org/eclipse/ditto/signals/commands/things/exceptions/PolicyInvalidException.java"}, "focal_method": {"identifier": "newBuilder", "parameters": "(final Collection<String> permissions, final ThingId thingId)", "modifiers": "public static", "return": "Builder", "body": "public static Builder newBuilder(final Collection<String> permissions, final ThingId thingId) {\n        checkNotNull(permissions, \"permissions\");\n        checkNotNull(thingId, \"thingId\");\n        return new Builder(permissions, thingId);\n    }", "signature": "Builder newBuilder(final Collection<String> permissions, final ThingId thingId)", "full_signature": "public static Builder newBuilder(final Collection<String> permissions, final ThingId thingId)", "class_method_signature": "PolicyInvalidException.newBuilder(final Collection<String> permissions, final ThingId thingId)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}