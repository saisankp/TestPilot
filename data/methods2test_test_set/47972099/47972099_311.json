{"test_class": {"identifier": "PartitionRequestQueueTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/PartitionRequestQueueTest.java"}, "test_case": {"identifier": "testProducerFailedException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testProducerFailedException() throws Exception {\n\t\tPartitionRequestQueue queue = new PartitionRequestQueue();\n\n\t\tEmbeddedChannel ch = new EmbeddedChannel(queue);\n\n\t\tResultSubpartitionView view = mock(ResultSubpartitionView.class);\n\t\twhen(view.isReleased()).thenReturn(true);\n\t\twhen(view.getFailureCause()).thenReturn(new RuntimeException(\"Expected test exception\"));\n\n\t\t// Enqueue the erroneous view\n\t\tqueue.enqueue(view, new InputChannelID());\n\t\tch.runPendingTasks();\n\n\t\t// Read the enqueued msg\n\t\tObject msg = ch.readOutbound();\n\n\t\tassertEquals(msg.getClass(), NettyMessage.ErrorResponse.class);\n\n\t\tNettyMessage.ErrorResponse err = (NettyMessage.ErrorResponse) msg;\n\t\tassertTrue(err.cause instanceof CancelTaskException);\n\t}", "signature": "void testProducerFailedException()", "full_signature": "@Test public void testProducerFailedException()", "class_method_signature": "PartitionRequestQueueTest.testProducerFailedException()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "isReleased", "thenReturn", "when", "getFailureCause", "enqueue", "runPendingTasks", "readOutbound", "assertEquals", "getClass", "assertTrue"]}, "focal_class": {"identifier": "PartitionRequestQueue", "superclass": "extends ChannelInboundHandlerAdapter", "interfaces": "", "fields": [{"original_string": "private final Logger LOG = LoggerFactory.getLogger(PartitionRequestQueue.class);", "modifier": "private final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PartitionRequestQueue.class)", "var_name": "LOG"}, {"original_string": "private final ChannelFutureListener writeListener = new WriteAndFlushNextMessageIfPossibleListener();", "modifier": "private final", "type": "ChannelFutureListener", "declarator": "writeListener = new WriteAndFlushNextMessageIfPossibleListener()", "var_name": "writeListener"}, {"original_string": "private final Queue<SequenceNumberingSubpartitionView> queue = new ArrayDeque<SequenceNumberingSubpartitionView>();", "modifier": "private final", "type": "Queue<SequenceNumberingSubpartitionView>", "declarator": "queue = new ArrayDeque<SequenceNumberingSubpartitionView>()", "var_name": "queue"}, {"original_string": "private final Set<InputChannelID> released = Sets.newHashSet();", "modifier": "private final", "type": "Set<InputChannelID>", "declarator": "released = Sets.newHashSet()", "var_name": "released"}, {"original_string": "private SequenceNumberingSubpartitionView currentPartitionQueue;", "modifier": "private", "type": "SequenceNumberingSubpartitionView", "declarator": "currentPartitionQueue", "var_name": "currentPartitionQueue"}, {"original_string": "private boolean fatalError;", "modifier": "private", "type": "boolean", "declarator": "fatalError", "var_name": "fatalError"}, {"original_string": "private ChannelHandlerContext ctx;", "modifier": "private", "type": "ChannelHandlerContext", "declarator": "ctx", "var_name": "ctx"}], "methods": [{"identifier": "channelRegistered", "parameters": "(final ChannelHandlerContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void channelRegistered(final ChannelHandlerContext ctx)", "full_signature": "@Override public void channelRegistered(final ChannelHandlerContext ctx)", "class_method_signature": "PartitionRequestQueue.channelRegistered(final ChannelHandlerContext ctx)", "testcase": false, "constructor": false}, {"identifier": "enqueue", "parameters": "(ResultSubpartitionView partitionQueue, InputChannelID receiverId)", "modifiers": "public", "return": "void", "signature": "void enqueue(ResultSubpartitionView partitionQueue, InputChannelID receiverId)", "full_signature": "public void enqueue(ResultSubpartitionView partitionQueue, InputChannelID receiverId)", "class_method_signature": "PartitionRequestQueue.enqueue(ResultSubpartitionView partitionQueue, InputChannelID receiverId)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "(InputChannelID receiverId)", "modifiers": "public", "return": "void", "signature": "void cancel(InputChannelID receiverId)", "full_signature": "public void cancel(InputChannelID receiverId)", "class_method_signature": "PartitionRequestQueue.cancel(InputChannelID receiverId)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "PartitionRequestQueue.close()", "testcase": false, "constructor": false}, {"identifier": "userEventTriggered", "parameters": "(ChannelHandlerContext ctx, Object msg)", "modifiers": "@Override public", "return": "void", "signature": "void userEventTriggered(ChannelHandlerContext ctx, Object msg)", "full_signature": "@Override public void userEventTriggered(ChannelHandlerContext ctx, Object msg)", "class_method_signature": "PartitionRequestQueue.userEventTriggered(ChannelHandlerContext ctx, Object msg)", "testcase": false, "constructor": false}, {"identifier": "channelWritabilityChanged", "parameters": "(ChannelHandlerContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void channelWritabilityChanged(ChannelHandlerContext ctx)", "full_signature": "@Override public void channelWritabilityChanged(ChannelHandlerContext ctx)", "class_method_signature": "PartitionRequestQueue.channelWritabilityChanged(ChannelHandlerContext ctx)", "testcase": false, "constructor": false}, {"identifier": "writeAndFlushNextMessageIfPossible", "parameters": "(final Channel channel)", "modifiers": "private", "return": "void", "signature": "void writeAndFlushNextMessageIfPossible(final Channel channel)", "full_signature": "private void writeAndFlushNextMessageIfPossible(final Channel channel)", "class_method_signature": "PartitionRequestQueue.writeAndFlushNextMessageIfPossible(final Channel channel)", "testcase": false, "constructor": false}, {"identifier": "channelInactive", "parameters": "(ChannelHandlerContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void channelInactive(ChannelHandlerContext ctx)", "full_signature": "@Override public void channelInactive(ChannelHandlerContext ctx)", "class_method_signature": "PartitionRequestQueue.channelInactive(ChannelHandlerContext ctx)", "testcase": false, "constructor": false}, {"identifier": "exceptionCaught", "parameters": "(ChannelHandlerContext ctx, Throwable cause)", "modifiers": "@Override public", "return": "void", "signature": "void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)", "full_signature": "@Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)", "class_method_signature": "PartitionRequestQueue.exceptionCaught(ChannelHandlerContext ctx, Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "handleException", "parameters": "(Channel channel, Throwable cause)", "modifiers": "private", "return": "void", "signature": "void handleException(Channel channel, Throwable cause)", "full_signature": "private void handleException(Channel channel, Throwable cause)", "class_method_signature": "PartitionRequestQueue.handleException(Channel channel, Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "releaseAllResources", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void releaseAllResources()", "full_signature": "private void releaseAllResources()", "class_method_signature": "PartitionRequestQueue.releaseAllResources()", "testcase": false, "constructor": false}, {"identifier": "markAsReleased", "parameters": "(InputChannelID receiverId)", "modifiers": "private", "return": "void", "signature": "void markAsReleased(InputChannelID receiverId)", "full_signature": "private void markAsReleased(InputChannelID receiverId)", "class_method_signature": "PartitionRequestQueue.markAsReleased(InputChannelID receiverId)", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/PartitionRequestQueue.java"}, "focal_method": {"identifier": "enqueue", "parameters": "(ResultSubpartitionView partitionQueue, InputChannelID receiverId)", "modifiers": "public", "return": "void", "body": "public void enqueue(ResultSubpartitionView partitionQueue, InputChannelID receiverId) throws Exception {\n\t\tctx.pipeline().fireUserEventTriggered(new SequenceNumberingSubpartitionView(partitionQueue, receiverId));\n\t}", "signature": "void enqueue(ResultSubpartitionView partitionQueue, InputChannelID receiverId)", "full_signature": "public void enqueue(ResultSubpartitionView partitionQueue, InputChannelID receiverId)", "class_method_signature": "PartitionRequestQueue.enqueue(ResultSubpartitionView partitionQueue, InputChannelID receiverId)", "testcase": false, "constructor": false, "invocations": ["fireUserEventTriggered", "pipeline"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}