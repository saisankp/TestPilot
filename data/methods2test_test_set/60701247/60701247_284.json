{"test_class": {"identifier": "DeviceRendererTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String manufacturer = \"google\";", "modifier": "private static", "type": "String", "declarator": "manufacturer = \"google\"", "var_name": "manufacturer"}, {"original_string": "private static String model = \"nexus 4\";", "modifier": "private static", "type": "String", "declarator": "model = \"nexus 4\"", "var_name": "model"}, {"original_string": "private static String buildVersion = \"4.2\";", "modifier": "private static", "type": "String", "declarator": "buildVersion = \"4.2\"", "var_name": "buildVersion"}, {"original_string": "private static String apiLevel = \"17\";", "modifier": "private static", "type": "String", "declarator": "apiLevel = \"17\"", "var_name": "apiLevel"}], "file": "android/testSrc/com/android/tools/idea/ddms/DeviceRendererTest.java"}, "test_case": {"identifier": "showSerialTrueForDuplicate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void showSerialTrueForDuplicate() throws Exception {\n    List<IDevice> devices = new ArrayList<>();\n\n    IDevice d1 = createDevice(false, null, manufacturer, model, buildVersion, apiLevel, \"123\", IDevice.DeviceState.ONLINE);\n    devices.add(d1);\n    devices.add(createDevice(false, null, manufacturer, model, buildVersion, apiLevel, \"1234\", IDevice.DeviceState.ONLINE));\n\n    assertTrue(DeviceRenderer.shouldShowSerialNumbers(devices));\n  }", "signature": "void showSerialTrueForDuplicate()", "full_signature": "@Test public void showSerialTrueForDuplicate()", "class_method_signature": "DeviceRendererTest.showSerialTrueForDuplicate()", "testcase": true, "constructor": false, "invocations": ["createDevice", "add", "add", "createDevice", "assertTrue", "shouldShowSerialNumbers"]}, "focal_class": {"identifier": "DeviceRenderer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "DeviceRenderer", "parameters": "()", "modifiers": "private", "return": "", "signature": " DeviceRenderer()", "full_signature": "private  DeviceRenderer()", "class_method_signature": "DeviceRenderer.DeviceRenderer()", "testcase": false, "constructor": true}, {"identifier": "renderDeviceName", "parameters": "(@NotNull IDevice d,\n                                      @NotNull DeviceNameProperties deviceProperties,\n                                      @NotNull ColoredTextContainer component,\n                                      boolean showSerialNumber)", "modifiers": "public static", "return": "void", "signature": "void renderDeviceName(@NotNull IDevice d,\n                                      @NotNull DeviceNameProperties deviceProperties,\n                                      @NotNull ColoredTextContainer component,\n                                      boolean showSerialNumber)", "full_signature": "public static void renderDeviceName(@NotNull IDevice d,\n                                      @NotNull DeviceNameProperties deviceProperties,\n                                      @NotNull ColoredTextContainer component,\n                                      boolean showSerialNumber)", "class_method_signature": "DeviceRenderer.renderDeviceName(@NotNull IDevice d,\n                                      @NotNull DeviceNameProperties deviceProperties,\n                                      @NotNull ColoredTextContainer component,\n                                      boolean showSerialNumber)", "testcase": false, "constructor": false}, {"identifier": "renderDeviceName", "parameters": "(@NotNull IDevice d,\n                                      @NotNull DeviceNameProperties deviceNameProperties,\n                                      @NotNull ColoredTextContainer component,\n                                      boolean showSerialNumber,\n                                      @Nullable AvdManager avdManager)", "modifiers": "public static", "return": "void", "signature": "void renderDeviceName(@NotNull IDevice d,\n                                      @NotNull DeviceNameProperties deviceNameProperties,\n                                      @NotNull ColoredTextContainer component,\n                                      boolean showSerialNumber,\n                                      @Nullable AvdManager avdManager)", "full_signature": "public static void renderDeviceName(@NotNull IDevice d,\n                                      @NotNull DeviceNameProperties deviceNameProperties,\n                                      @NotNull ColoredTextContainer component,\n                                      boolean showSerialNumber,\n                                      @Nullable AvdManager avdManager)", "class_method_signature": "DeviceRenderer.renderDeviceName(@NotNull IDevice d,\n                                      @NotNull DeviceNameProperties deviceNameProperties,\n                                      @NotNull ColoredTextContainer component,\n                                      boolean showSerialNumber,\n                                      @Nullable AvdManager avdManager)", "testcase": false, "constructor": false}, {"identifier": "getEmulatorDeviceName", "parameters": "(@NotNull IDevice d, @Nullable AvdManager avdManager)", "modifiers": "@NotNull private static", "return": "String", "signature": "String getEmulatorDeviceName(@NotNull IDevice d, @Nullable AvdManager avdManager)", "full_signature": "@NotNull private static String getEmulatorDeviceName(@NotNull IDevice d, @Nullable AvdManager avdManager)", "class_method_signature": "DeviceRenderer.getEmulatorDeviceName(@NotNull IDevice d, @Nullable AvdManager avdManager)", "testcase": false, "constructor": false}, {"identifier": "getDeviceName", "parameters": "(@NotNull DeviceNameProperties deviceNameProperties)", "modifiers": "@NotNull private static", "return": "String", "signature": "String getDeviceName(@NotNull DeviceNameProperties deviceNameProperties)", "full_signature": "@NotNull private static String getDeviceName(@NotNull DeviceNameProperties deviceNameProperties)", "class_method_signature": "DeviceRenderer.getDeviceName(@NotNull DeviceNameProperties deviceNameProperties)", "testcase": false, "constructor": false}, {"identifier": "getDeviceName", "parameters": "(@NotNull IDevice d)", "modifiers": "@NotNull private static", "return": "String", "signature": "String getDeviceName(@NotNull IDevice d)", "full_signature": "@NotNull private static String getDeviceName(@NotNull IDevice d)", "class_method_signature": "DeviceRenderer.getDeviceName(@NotNull IDevice d)", "testcase": false, "constructor": false}, {"identifier": "shouldShowSerialNumbers", "parameters": "(@NotNull List<IDevice> devices)", "modifiers": "public static", "return": "boolean", "signature": "boolean shouldShowSerialNumbers(@NotNull List<IDevice> devices)", "full_signature": "public static boolean shouldShowSerialNumbers(@NotNull List<IDevice> devices)", "class_method_signature": "DeviceRenderer.shouldShowSerialNumbers(@NotNull List<IDevice> devices)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/ddms/DeviceRenderer.java"}, "focal_method": {"identifier": "shouldShowSerialNumbers", "parameters": "(@NotNull List<IDevice> devices)", "modifiers": "public static", "return": "boolean", "body": "public static boolean shouldShowSerialNumbers(@NotNull List<IDevice> devices) {\n    Set<String> myNames = new HashSet<String>();\n    for (IDevice currentDevice : devices) {\n      if (currentDevice.isEmulator()) {\n        continue;\n      }\n\n      String currentName = getDeviceName(currentDevice);\n      if (myNames.contains(currentName)) {\n        return true;\n      }\n      myNames.add(currentName);\n    }\n    return false;\n  }", "signature": "boolean shouldShowSerialNumbers(@NotNull List<IDevice> devices)", "full_signature": "public static boolean shouldShowSerialNumbers(@NotNull List<IDevice> devices)", "class_method_signature": "DeviceRenderer.shouldShowSerialNumbers(@NotNull List<IDevice> devices)", "testcase": false, "constructor": false, "invocations": ["isEmulator", "getDeviceName", "contains", "add"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}