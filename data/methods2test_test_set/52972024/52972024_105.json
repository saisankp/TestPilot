{"test_class": {"identifier": "FeatureTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IFilesystemTracker filesystemTrackerMock;", "modifier": "private", "type": "IFilesystemTracker", "declarator": "filesystemTrackerMock", "var_name": "filesystemTrackerMock"}, {"original_string": "private BlockingDeque<ExecutionPair> queue;", "modifier": "private", "type": "BlockingDeque<ExecutionPair>", "declarator": "queue", "var_name": "queue"}, {"original_string": "private ArgumentCaptor<IAction> trackerActionCaptor;", "modifier": "private", "type": "ArgumentCaptor<IAction>", "declarator": "trackerActionCaptor", "var_name": "trackerActionCaptor"}], "file": "CoreFeatures/FeatureLoadingSystem/FeatureManager/src/test/java/info/smart_tools/smartactors/feature_loading_system/feature_manager/FeatureTest.java"}, "test_case": {"identifier": "Should_getNameReturnNameGivenOnInitialization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_getNameReturnNameGivenOnInitialization()\n            throws Exception {\n        Feature feature = new Feature(\"bug\", filesystemTrackerMock, queue);\n\n        assertEquals(\"bug\", feature.getName());\n    }", "signature": "void Should_getNameReturnNameGivenOnInitialization()", "full_signature": "@Test public void Should_getNameReturnNameGivenOnInitialization()", "class_method_signature": "FeatureTest.Should_getNameReturnNameGivenOnInitialization()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getName"]}, "focal_class": {"identifier": "Feature", "superclass": "", "interfaces": "implements IFeature", "fields": [{"original_string": "private Set<String> expectedFileNames;", "modifier": "private", "type": "Set<String>", "declarator": "expectedFileNames", "var_name": "expectedFileNames"}, {"original_string": "private List<IPath> presentFiles;", "modifier": "private", "type": "List<IPath>", "declarator": "presentFiles", "var_name": "presentFiles"}, {"original_string": "private List<IAction<Collection<IPath>>> actions;", "modifier": "private", "type": "List<IAction<Collection<IPath>>>", "declarator": "actions", "var_name": "actions"}, {"original_string": "private boolean isListening;", "modifier": "private", "type": "boolean", "declarator": "isListening", "var_name": "isListening"}, {"original_string": "private boolean isPresent;", "modifier": "private", "type": "boolean", "declarator": "isPresent", "var_name": "isPresent"}, {"original_string": "private final Object lock;", "modifier": "private final", "type": "Object", "declarator": "lock", "var_name": "lock"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private IAction<IPath> fileHandleAction;", "modifier": "private", "type": "IAction<IPath>", "declarator": "fileHandleAction", "var_name": "fileHandleAction"}, {"original_string": "private IFilesystemTracker filesystemTracker;", "modifier": "private", "type": "IFilesystemTracker", "declarator": "filesystemTracker", "var_name": "filesystemTracker"}, {"original_string": "private FileSystem fileSystem = FileSystems.getDefault();", "modifier": "private", "type": "FileSystem", "declarator": "fileSystem = FileSystems.getDefault()", "var_name": "fileSystem"}, {"original_string": "private BlockingQueue<ExecutionPair> queue;", "modifier": "private", "type": "BlockingQueue<ExecutionPair>", "declarator": "queue", "var_name": "queue"}], "methods": [{"identifier": "Feature", "parameters": "(final String name, final IFilesystemTracker filesystemTracker, final BlockingQueue<ExecutionPair> queue)", "modifiers": "", "return": "", "signature": " Feature(final String name, final IFilesystemTracker filesystemTracker, final BlockingQueue<ExecutionPair> queue)", "full_signature": "  Feature(final String name, final IFilesystemTracker filesystemTracker, final BlockingQueue<ExecutionPair> queue)", "class_method_signature": "Feature.Feature(final String name, final IFilesystemTracker filesystemTracker, final BlockingQueue<ExecutionPair> queue)", "testcase": false, "constructor": true}, {"identifier": "requireFile", "parameters": "(final String fileName)", "modifiers": "@Override public", "return": "void", "signature": "void requireFile(final String fileName)", "full_signature": "@Override public void requireFile(final String fileName)", "class_method_signature": "Feature.requireFile(final String fileName)", "testcase": false, "constructor": false}, {"identifier": "whenPresent", "parameters": "(final IAction<Collection<IPath>> action)", "modifiers": "@Override public", "return": "void", "signature": "void whenPresent(final IAction<Collection<IPath>> action)", "full_signature": "@Override public void whenPresent(final IAction<Collection<IPath>> action)", "class_method_signature": "Feature.whenPresent(final IAction<Collection<IPath>> action)", "testcase": false, "constructor": false}, {"identifier": "listen", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void listen()", "full_signature": "@Override public void listen()", "class_method_signature": "Feature.listen()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "Feature.getName()", "testcase": false, "constructor": false}], "file": "CoreFeatures/FeatureLoadingSystem/FeatureManager/src/main/java/info/smart_tools/smartactors/feature_loading_system/feature_manager/Feature.java"}, "focal_method": {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getName() {\n        return this.name;\n    }", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "Feature.getName()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}