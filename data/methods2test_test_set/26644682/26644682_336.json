{"test_class": {"identifier": "ZippedContentCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ContentCache delegate;", "modifier": "@Mock\n    private", "type": "ContentCache", "declarator": "delegate", "var_name": "delegate"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/cache/ZippedContentCacheTest.java"}, "test_case": {"identifier": "shouldReturnNullInputStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnNullInputStream() {\n        // given\n        when(delegate.get(any())).thenReturn(null);\n        ContentCache contentCache = new ZippedContentCache(delegate);\n\n        // when\n        final InputStream stream = contentCache.get(() -> StringUtils.EMPTY);\n\n        // then\n        verify(delegate, times(1)).get(any());\n        assertNull(stream);\n    }", "signature": "void shouldReturnNullInputStream()", "full_signature": "@Test public void shouldReturnNullInputStream()", "class_method_signature": "ZippedContentCacheTest.shouldReturnNullInputStream()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "get", "any", "get", "get", "verify", "times", "any", "assertNull"]}, "focal_class": {"identifier": "ZippedContentCache", "superclass": "", "interfaces": "implements ContentCache", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ZippedContentCache.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ZippedContentCache.class)", "var_name": "LOGGER"}, {"original_string": "private final ContentCache delegate;", "modifier": "private final", "type": "ContentCache", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "ZippedContentCache", "parameters": "(ContentCache delegate)", "modifiers": "public", "return": "", "signature": " ZippedContentCache(ContentCache delegate)", "full_signature": "public  ZippedContentCache(ContentCache delegate)", "class_method_signature": "ZippedContentCache.ZippedContentCache(ContentCache delegate)", "testcase": false, "constructor": true}, {"identifier": "has", "parameters": "(ContentCacheKey key)", "modifiers": "@Override @Timed public", "return": "boolean", "signature": "boolean has(ContentCacheKey key)", "full_signature": "@Override @Timed public boolean has(ContentCacheKey key)", "class_method_signature": "ZippedContentCache.has(ContentCacheKey key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(ContentCacheKey key)", "modifiers": "@Override @VolumeMetered public", "return": "InputStream", "signature": "InputStream get(ContentCacheKey key)", "full_signature": "@Override @VolumeMetered public InputStream get(ContentCacheKey key)", "class_method_signature": "ZippedContentCache.get(ContentCacheKey key)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(ContentCacheKey key, TimeToLive timeToLive)", "modifiers": "@Override @VolumeMetered public", "return": "OutputStream", "signature": "OutputStream put(ContentCacheKey key, TimeToLive timeToLive)", "full_signature": "@Override @VolumeMetered public OutputStream put(ContentCacheKey key, TimeToLive timeToLive)", "class_method_signature": "ZippedContentCache.put(ContentCacheKey key, TimeToLive timeToLive)", "testcase": false, "constructor": false}, {"identifier": "evict", "parameters": "(ContentCacheKey key)", "modifiers": "@Override @Timed public", "return": "void", "signature": "void evict(ContentCacheKey key)", "full_signature": "@Override @Timed public void evict(ContentCacheKey key)", "class_method_signature": "ZippedContentCache.evict(ContentCacheKey key)", "testcase": false, "constructor": false}, {"identifier": "evictMatch", "parameters": "(ContentCacheKey key)", "modifiers": "@Override @Timed public", "return": "void", "signature": "void evictMatch(ContentCacheKey key)", "full_signature": "@Override @Timed public void evictMatch(ContentCacheKey key)", "class_method_signature": "ZippedContentCache.evictMatch(ContentCacheKey key)", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "(ContentCacheKey from, ContentCacheKey to, TimeToLive toTimeToLive)", "modifiers": "@Override @Timed public", "return": "void", "signature": "void move(ContentCacheKey from, ContentCacheKey to, TimeToLive toTimeToLive)", "full_signature": "@Override @Timed public void move(ContentCacheKey from, ContentCacheKey to, TimeToLive toTimeToLive)", "class_method_signature": "ZippedContentCache.move(ContentCacheKey from, ContentCacheKey to, TimeToLive toTimeToLive)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override @Timed public", "return": "void", "signature": "void clear()", "full_signature": "@Override @Timed public void clear()", "class_method_signature": "ZippedContentCache.clear()", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/cache/ZippedContentCache.java"}, "focal_method": {"identifier": "get", "parameters": "(ContentCacheKey key)", "modifiers": "@Override @VolumeMetered public", "return": "InputStream", "body": "@Override\n    @VolumeMetered\n    public InputStream get(ContentCacheKey key) {\n        return ofNullable(delegate.get(key)) //\n                .map(entry -> {\n                    try {\n                        return new GZIPInputStream(entry);\n                    } catch (ZipException e) {\n                        try {\n                            entry.close();\n                        } catch (IOException closeException) {\n                            LOGGER.debug(\"Unable to close stream\", e);\n                        }\n                        return delegate.get(key);\n                    } catch (IOException e) {\n                        throw new TDPException(CommonErrorCodes.UNEXPECTED_EXCEPTION, e);\n                    }\n                }) //\n                .orElse(null);\n    }", "signature": "InputStream get(ContentCacheKey key)", "full_signature": "@Override @VolumeMetered public InputStream get(ContentCacheKey key)", "class_method_signature": "ZippedContentCache.get(ContentCacheKey key)", "testcase": false, "constructor": false, "invocations": ["orElse", "map", "ofNullable", "get", "close", "debug", "get"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}