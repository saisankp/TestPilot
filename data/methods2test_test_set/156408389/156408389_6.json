{"test_class": {"identifier": "BlockchainEventsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ACCOUNT_ID = \"GBLUDU6Y6KVM5MCJWOLPVVSJEVICGEGXHOOHEAPWRSXJ7XVMBFKISOLR\";", "modifier": "private static final", "type": "String", "declarator": "ACCOUNT_ID = \"GBLUDU6Y6KVM5MCJWOLPVVSJEVICGEGXHOOHEAPWRSXJ7XVMBFKISOLR\"", "var_name": "ACCOUNT_ID"}, {"original_string": "@Rule\n    public ExpectedException expectedEx = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedEx = ExpectedException.none()", "var_name": "expectedEx"}, {"original_string": "@Mock\n    private Server server;", "modifier": "@Mock\n    private", "type": "Server", "declarator": "server", "var_name": "server"}, {"original_string": "@Mock\n    private TransactionsRequestBuilder mockTransactionsRequestBuilder;", "modifier": "@Mock\n    private", "type": "TransactionsRequestBuilder", "declarator": "mockTransactionsRequestBuilder", "var_name": "mockTransactionsRequestBuilder"}, {"original_string": "@Mock\n    private ServerSentEvent mockServerSentEvent;", "modifier": "@Mock\n    private", "type": "ServerSentEvent", "declarator": "mockServerSentEvent", "var_name": "mockServerSentEvent"}, {"original_string": "private BlockchainEvents blockchainEvents;", "modifier": "private", "type": "BlockchainEvents", "declarator": "blockchainEvents", "var_name": "blockchainEvents"}, {"original_string": "private ConcurrentLinkedQueue<TransactionResponse> responsesQueue = new ConcurrentLinkedQueue<>();", "modifier": "private", "type": "ConcurrentLinkedQueue<TransactionResponse>", "declarator": "responsesQueue = new ConcurrentLinkedQueue<>()", "var_name": "responsesQueue"}, {"original_string": "private volatile boolean isCancelled = false;", "modifier": "private volatile", "type": "boolean", "declarator": "isCancelled = false", "var_name": "isCancelled"}], "file": "kin-sdk/kin-sdk-lib/src/test/java/kin/sdk/BlockchainEventsTest.java"}, "test_case": {"identifier": "addBalanceListener_StopListener_NoEvents", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addBalanceListener_StopListener_NoEvents() throws Exception {\n        final int[] eventsCount = {0};\n        ListenerRegistration listenerRegistration = blockchainEvents\n                .addBalanceListener(new EventListener<Balance>() {\n                    @Override\n                    public void onEvent(Balance data) {\n                        eventsCount[0]++;\n                    }\n                });\n        listenerRegistration.remove();\n        enqueueCreateAccountResponses();\n        Thread.sleep(500);\n        assertThat(eventsCount[0], equalTo(0));\n    }", "signature": "void addBalanceListener_StopListener_NoEvents()", "full_signature": "@Test public void addBalanceListener_StopListener_NoEvents()", "class_method_signature": "BlockchainEventsTest.addBalanceListener_StopListener_NoEvents()", "testcase": true, "constructor": false, "invocations": ["addBalanceListener", "remove", "enqueueCreateAccountResponses", "sleep", "assertThat", "equalTo"]}, "focal_class": {"identifier": "BlockchainEvents", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ASSET_TYPE_NATIVE = \"native\";", "modifier": "private static final", "type": "String", "declarator": "ASSET_TYPE_NATIVE = \"native\"", "var_name": "ASSET_TYPE_NATIVE"}, {"original_string": "private static final String CURSOR_FUTURE_ONLY = \"now\";", "modifier": "private static final", "type": "String", "declarator": "CURSOR_FUTURE_ONLY = \"now\"", "var_name": "CURSOR_FUTURE_ONLY"}, {"original_string": "private final KeyPair accountKeyPair;", "modifier": "private final", "type": "KeyPair", "declarator": "accountKeyPair", "var_name": "accountKeyPair"}, {"original_string": "private final ManagedServerSentEventStream<TransactionResponse> transactionsStream;", "modifier": "private final", "type": "ManagedServerSentEventStream<TransactionResponse>", "declarator": "transactionsStream", "var_name": "transactionsStream"}], "methods": [{"identifier": "BlockchainEvents", "parameters": "(Server server, String accountId)", "modifiers": "", "return": "", "signature": " BlockchainEvents(Server server, String accountId)", "full_signature": "  BlockchainEvents(Server server, String accountId)", "class_method_signature": "BlockchainEvents.BlockchainEvents(Server server, String accountId)", "testcase": false, "constructor": true}, {"identifier": "addBalanceListener", "parameters": "(@NonNull final EventListener<Balance> listener)", "modifiers": "", "return": "ListenerRegistration", "signature": "ListenerRegistration addBalanceListener(@NonNull final EventListener<Balance> listener)", "full_signature": " ListenerRegistration addBalanceListener(@NonNull final EventListener<Balance> listener)", "class_method_signature": "BlockchainEvents.addBalanceListener(@NonNull final EventListener<Balance> listener)", "testcase": false, "constructor": false}, {"identifier": "extractBalanceChangeFromTransaction", "parameters": "(TransactionResponse transactionResponse,\n                                                     @NonNull EventListener<Balance> listener)", "modifiers": "private", "return": "void", "signature": "void extractBalanceChangeFromTransaction(TransactionResponse transactionResponse,\n                                                     @NonNull EventListener<Balance> listener)", "full_signature": "private void extractBalanceChangeFromTransaction(TransactionResponse transactionResponse,\n                                                     @NonNull EventListener<Balance> listener)", "class_method_signature": "BlockchainEvents.extractBalanceChangeFromTransaction(TransactionResponse transactionResponse,\n                                                     @NonNull EventListener<Balance> listener)", "testcase": false, "constructor": false}, {"identifier": "extractBalanceFromUpdate", "parameters": "(@NonNull EventListener<Balance> listener,\n                                          LedgerEntryChange ledgerEntryUpdate)", "modifiers": "private", "return": "void", "signature": "void extractBalanceFromUpdate(@NonNull EventListener<Balance> listener,\n                                          LedgerEntryChange ledgerEntryUpdate)", "full_signature": "private void extractBalanceFromUpdate(@NonNull EventListener<Balance> listener,\n                                          LedgerEntryChange ledgerEntryUpdate)", "class_method_signature": "BlockchainEvents.extractBalanceFromUpdate(@NonNull EventListener<Balance> listener,\n                                          LedgerEntryChange ledgerEntryUpdate)", "testcase": false, "constructor": false}, {"identifier": "addPaymentListener", "parameters": "(@NonNull final EventListener<PaymentInfo> listener)", "modifiers": "", "return": "ListenerRegistration", "signature": "ListenerRegistration addPaymentListener(@NonNull final EventListener<PaymentInfo> listener)", "full_signature": " ListenerRegistration addPaymentListener(@NonNull final EventListener<PaymentInfo> listener)", "class_method_signature": "BlockchainEvents.addPaymentListener(@NonNull final EventListener<PaymentInfo> listener)", "testcase": false, "constructor": false}, {"identifier": "addAccountCreationListener", "parameters": "(final EventListener<Void> listener)", "modifiers": "", "return": "ListenerRegistration", "signature": "ListenerRegistration addAccountCreationListener(final EventListener<Void> listener)", "full_signature": " ListenerRegistration addAccountCreationListener(final EventListener<Void> listener)", "class_method_signature": "BlockchainEvents.addAccountCreationListener(final EventListener<Void> listener)", "testcase": false, "constructor": false}, {"identifier": "extractPaymentsFromTransaction", "parameters": "(TransactionResponse transactionResponse,\n                                                EventListener<PaymentInfo> listener)", "modifiers": "private", "return": "void", "signature": "void extractPaymentsFromTransaction(TransactionResponse transactionResponse,\n                                                EventListener<PaymentInfo> listener)", "full_signature": "private void extractPaymentsFromTransaction(TransactionResponse transactionResponse,\n                                                EventListener<PaymentInfo> listener)", "class_method_signature": "BlockchainEvents.extractPaymentsFromTransaction(TransactionResponse transactionResponse,\n                                                EventListener<PaymentInfo> listener)", "testcase": false, "constructor": false}, {"identifier": "isPaymentNative", "parameters": "(Asset asset)", "modifiers": "private", "return": "boolean", "signature": "boolean isPaymentNative(Asset asset)", "full_signature": "private boolean isPaymentNative(Asset asset)", "class_method_signature": "BlockchainEvents.isPaymentNative(Asset asset)", "testcase": false, "constructor": false}, {"identifier": "extractSourceAccountId", "parameters": "(TransactionResponse transactionResponse, Operation operation)", "modifiers": "private", "return": "String", "signature": "String extractSourceAccountId(TransactionResponse transactionResponse, Operation operation)", "full_signature": "private String extractSourceAccountId(TransactionResponse transactionResponse, Operation operation)", "class_method_signature": "BlockchainEvents.extractSourceAccountId(TransactionResponse transactionResponse, Operation operation)", "testcase": false, "constructor": false}, {"identifier": "extractHashTextIfAny", "parameters": "(TransactionResponse transactionResponse)", "modifiers": "private", "return": "String", "signature": "String extractHashTextIfAny(TransactionResponse transactionResponse)", "full_signature": "private String extractHashTextIfAny(TransactionResponse transactionResponse)", "class_method_signature": "BlockchainEvents.extractHashTextIfAny(TransactionResponse transactionResponse)", "testcase": false, "constructor": false}], "file": "kin-sdk/kin-sdk-lib/src/main/java/kin/sdk/BlockchainEvents.java"}, "focal_method": {"identifier": "addBalanceListener", "parameters": "(@NonNull final EventListener<Balance> listener)", "modifiers": "", "return": "ListenerRegistration", "body": "ListenerRegistration addBalanceListener(@NonNull final EventListener<Balance> listener) {\n        checkNotNull(listener, \"listener\");\n\n        final kin.base.requests.EventListener<TransactionResponse> responseListener = new kin.base.requests.EventListener<TransactionResponse>() {\n            @Override\n            public void onEvent(TransactionResponse transactionResponse) {\n                extractBalanceChangeFromTransaction(transactionResponse, listener);\n            }\n        };\n\n        transactionsStream.addListener(responseListener);\n\n        return new ListenerRegistration(new Runnable() {\n            @Override\n            public void run() {\n                transactionsStream.removeListener(responseListener);\n            }\n        });\n    }", "signature": "ListenerRegistration addBalanceListener(@NonNull final EventListener<Balance> listener)", "full_signature": " ListenerRegistration addBalanceListener(@NonNull final EventListener<Balance> listener)", "class_method_signature": "BlockchainEvents.addBalanceListener(@NonNull final EventListener<Balance> listener)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "extractBalanceChangeFromTransaction", "addListener", "removeListener"]}, "repository": {"repo_id": 156408389, "url": "https://github.com/kinecosystem/kin-sdk-android", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 9, "size": 3232, "license": "licensed"}}