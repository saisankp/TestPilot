{"test_class": {"identifier": "TestRecommendationScopeProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ASTQueryContainer ast;", "modifier": "private", "type": "ASTQueryContainer", "declarator": "ast", "var_name": "ast"}], "file": "recommendation-servlet/src/test/java/org/sindice/analytics/queryProcessor/TestRecommendationScopeProcessor.java"}, "test_case": {"identifier": "testGraphGraphPattern2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGraphGraphPattern2()\n  throws Exception {\n    final String q = \"SELECT * { ?s1 ?POF ?g . GRAPH ?g { ?o ?p ?s. } ?a ?b ?c }\";\n    ast = SyntaxTreeBuilder.parseQuery(q);\n\n    final String expected = \"QueryContainer\\n\" +\n                            \" SelectQuery\\n\" +\n                            \"  Select ( * )\\n\" +\n                            \"  WhereClause\\n\" +\n                            \"   GraphPatternGroup\\n\" +\n                            \"    BasicGraphPattern\\n\" +\n                            \"     TriplesSameSubjectPath\\n\" +\n                            \"      Var (s1)\\n\" +\n                            \"      PropertyListPath\\n\" +\n                            \"       Var (POF)\\n\" +\n                            \"       ObjectList\\n\" +\n                            \"        Var (g)\\n\" +\n                            \"    GraphGraphPattern\\n\" +\n                            \"     Var (g)\\n\" +\n                            \"     GraphPatternGroup\\n\" +\n                            \"      BasicGraphPattern\\n\" +\n                            \"       TriplesSameSubjectPath\\n\" +\n                            \"        Var (o)\\n\" +\n                            \"        PropertyListPath\\n\" +\n                            \"         Var (p)\\n\" +\n                            \"         ObjectList\\n\" +\n                            \"          Var (s)\";\n    RecommendationScopeProcessor.process(ast);\n    assertEquals(expected, ast.dump(\"\"));\n  }", "signature": "void testGraphGraphPattern2()", "full_signature": "@Test public void testGraphGraphPattern2()", "class_method_signature": "TestRecommendationScopeProcessor.testGraphGraphPattern2()", "testcase": true, "constructor": false, "invocations": ["parseQuery", "process", "assertEquals", "dump"]}, "focal_class": {"identifier": "RecommendationScopeProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RecommendationScopeProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RecommendationScopeProcessor.class)", "var_name": "logger"}], "methods": [{"identifier": "RecommendationScopeProcessor", "parameters": "()", "modifiers": "private", "return": "", "signature": " RecommendationScopeProcessor()", "full_signature": "private  RecommendationScopeProcessor()", "class_method_signature": "RecommendationScopeProcessor.RecommendationScopeProcessor()", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(ASTQueryContainer ast)", "modifiers": "public static", "return": "void", "signature": "void process(ASTQueryContainer ast)", "full_signature": "public static void process(ASTQueryContainer ast)", "class_method_signature": "RecommendationScopeProcessor.process(ASTQueryContainer ast)", "testcase": false, "constructor": false}, {"identifier": "pruneToScope", "parameters": "(SimpleNode node)", "modifiers": "private static", "return": "void", "signature": "void pruneToScope(SimpleNode node)", "full_signature": "private static void pruneToScope(SimpleNode node)", "class_method_signature": "RecommendationScopeProcessor.pruneToScope(SimpleNode node)", "testcase": false, "constructor": false}], "file": "recommendation-servlet/src/main/java/org/sindice/analytics/queryProcessor/RecommendationScopeProcessor.java"}, "focal_method": {"identifier": "process", "parameters": "(ASTQueryContainer ast)", "modifiers": "public static", "return": "void", "body": "public static void process(ASTQueryContainer ast)\n  throws VisitorException {\n    final ScopedVariables scopedVariables = new ScopedVariables();\n    final POFConnected scope = new POFConnected();\n\n    // Initialize the seed\n    scopedVariables.newConnectedVars.add(Hash.get(SyntaxTreeBuilder.PointOfFocus));\n    // Define the recommendation scope\n    do {\n      scopedVariables.updateVars();\n      scope.visit(ast, scopedVariables);\n    } while (!scopedVariables.newConnectedVars.isEmpty());\n    // Prune disconnected parts of the AST\n    pruneToScope(ast);\n  }", "signature": "void process(ASTQueryContainer ast)", "full_signature": "public static void process(ASTQueryContainer ast)", "class_method_signature": "RecommendationScopeProcessor.process(ASTQueryContainer ast)", "testcase": false, "constructor": false, "invocations": ["add", "get", "updateVars", "visit", "isEmpty", "pruneToScope"]}, "repository": {"repo_id": 4797319, "url": "https://github.com/sindice/sparqled", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 33, "size": 12885, "license": "licensed"}}