{"test_class": {"identifier": "RpkiRepositoryCleanupServiceTest", "superclass": "extends GenericStorageTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private TrustAnchorsFactory factory;", "modifier": "@Autowired\n    private", "type": "TrustAnchorsFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "@Autowired\n    private RpkiRepositoryCleanupService subject;", "modifier": "@Autowired\n    private", "type": "RpkiRepositoryCleanupService", "declarator": "subject", "var_name": "subject"}, {"original_string": "@Autowired\n    private RpkiRepositories rpkiRepositories;", "modifier": "@Autowired\n    private", "type": "RpkiRepositories", "declarator": "rpkiRepositories", "var_name": "rpkiRepositories"}], "file": "rpki-validator/src/test/java/net/ripe/rpki/validator3/domain/cleanup/RpkiRepositoryCleanupServiceTest.java"}, "test_case": {"identifier": "should_delete_repositories_not_referenced_during_validation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_delete_repositories_not_referenced_during_validation() throws Exception {\n        TrustAnchor trustAnchor = TestObjects.newTrustAnchor();\n        wtx0(tx -> this.getTrustAnchors().add(tx, trustAnchor));\n\n        final Ref<TrustAnchor> trustAnchorRef = rtx(tx -> this.getTrustAnchors().makeRef(tx, trustAnchor.key()));\n        RpkiRepository repository = wtx(tx -> this.getRpkiRepositories().register(tx,\n                trustAnchorRef, \"rsync://some.rsync.repo\", RpkiRepository.Type.RSYNC));\n\n        assertThat(rtx(tx -> rpkiRepositories.findRsyncRepositories(tx).collect(Collectors.toList())), hasSize(1));\n        assertThat(subject.cleanupRpkiRepositories(), is(0L));\n\n        repository.getTrustAnchors().put(trustAnchorRef, InstantWithoutNanos.from(ZonedDateTime.now().minusDays(20).toInstant()));\n        wtx0(tx -> rpkiRepositories.update(tx, repository));\n\n        assertThat(subject.cleanupRpkiRepositories(), is(1L));\n\n        assertThat(rtx(tx -> rpkiRepositories.findRsyncRepositories(tx).collect(Collectors.toList())), is(empty()));\n    }", "signature": "void should_delete_repositories_not_referenced_during_validation()", "full_signature": "@Test public void should_delete_repositories_not_referenced_during_validation()", "class_method_signature": "RpkiRepositoryCleanupServiceTest.should_delete_repositories_not_referenced_during_validation()", "testcase": true, "constructor": false, "invocations": ["newTrustAnchor", "wtx0", "add", "getTrustAnchors", "rtx", "makeRef", "getTrustAnchors", "key", "wtx", "register", "getRpkiRepositories", "assertThat", "rtx", "collect", "findRsyncRepositories", "toList", "hasSize", "assertThat", "cleanupRpkiRepositories", "is", "put", "getTrustAnchors", "from", "toInstant", "minusDays", "now", "wtx0", "update", "assertThat", "cleanupRpkiRepositories", "is", "assertThat", "rtx", "collect", "findRsyncRepositories", "toList", "is", "empty"]}, "focal_class": {"identifier": "RpkiRepositoryCleanupService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private RpkiRepositories rpkiRepositories;", "modifier": "@Autowired\n    private", "type": "RpkiRepositories", "declarator": "rpkiRepositories", "var_name": "rpkiRepositories"}, {"original_string": "private final Duration cleanupGraceDuration;", "modifier": "private final", "type": "Duration", "declarator": "cleanupGraceDuration", "var_name": "cleanupGraceDuration"}, {"original_string": "private final Storage storage;", "modifier": "private final", "type": "Storage", "declarator": "storage", "var_name": "storage"}], "methods": [{"identifier": "RpkiRepositoryCleanupService", "parameters": "(\n            @Value(\"${rpki.validator.rpki.repository.cleanup.grace.duration:P7D}\") Duration cleanupGraceDuration,\n            Storage storage\n    )", "modifiers": "public", "return": "", "signature": " RpkiRepositoryCleanupService(\n            @Value(\"${rpki.validator.rpki.repository.cleanup.grace.duration:P7D}\") Duration cleanupGraceDuration,\n            Storage storage\n    )", "full_signature": "public  RpkiRepositoryCleanupService(\n            @Value(\"${rpki.validator.rpki.repository.cleanup.grace.duration:P7D}\") Duration cleanupGraceDuration,\n            Storage storage\n    )", "class_method_signature": "RpkiRepositoryCleanupService.RpkiRepositoryCleanupService(\n            @Value(\"${rpki.validator.rpki.repository.cleanup.grace.duration:P7D}\") Duration cleanupGraceDuration,\n            Storage storage\n    )", "testcase": false, "constructor": true}, {"identifier": "cleanupRpkiRepositories", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long cleanupRpkiRepositories()", "full_signature": "public long cleanupRpkiRepositories()", "class_method_signature": "RpkiRepositoryCleanupService.cleanupRpkiRepositories()", "testcase": false, "constructor": false}], "file": "rpki-validator/src/main/java/net/ripe/rpki/validator3/domain/cleanup/RpkiRepositoryCleanupService.java"}, "focal_method": {"identifier": "cleanupRpkiRepositories", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long cleanupRpkiRepositories() {\n        final InstantWithoutNanos unreferencedSince = InstantWithoutNanos.now().minus(cleanupGraceDuration);\n        final Pair<Long, Long> deleted = Time.timed(() -> storage.writeTx(tx -> rpkiRepositories.deleteUnreferencedRepositories(tx, unreferencedSince)));\n        log.info(\"Removed {} RPKI repositories that have not been referenced since {}, took {}ms\", deleted.getLeft(), unreferencedSince, deleted.getRight());\n        return deleted.getLeft();\n    }", "signature": "long cleanupRpkiRepositories()", "full_signature": "public long cleanupRpkiRepositories()", "class_method_signature": "RpkiRepositoryCleanupService.cleanupRpkiRepositories()", "testcase": false, "constructor": false, "invocations": ["minus", "now", "timed", "writeTx", "deleteUnreferencedRepositories", "info", "getLeft", "getRight", "getLeft"]}, "repository": {"repo_id": 104217624, "url": "https://github.com/RIPE-NCC/rpki-validator-3", "stars": 32, "created": "9/20/2017 1:15:05 PM +00:00", "updates": "2020-01-27T10:48:38+00:00", "fork": "False", "license": "licensed"}}