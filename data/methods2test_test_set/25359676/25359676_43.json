{"test_class": {"identifier": "StyleRepositoryServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private DataObjectService dataObjectService;", "modifier": "@Mock private", "type": "DataObjectService", "declarator": "dataObjectService", "var_name": "dataObjectService"}, {"original_string": "@InjectMocks private StyleRepositoryServiceImpl styleRepositoryService = new StyleRepositoryServiceImpl();", "modifier": "@InjectMocks private", "type": "StyleRepositoryServiceImpl", "declarator": "styleRepositoryService = new StyleRepositoryServiceImpl()", "var_name": "styleRepositoryService"}, {"original_string": "private static final String STYLE_ID = \"1\";", "modifier": "private static final", "type": "String", "declarator": "STYLE_ID = \"1\"", "var_name": "STYLE_ID"}, {"original_string": "private static final String NAME = \"MyFirstStyle\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"MyFirstStyle\"", "var_name": "NAME"}, {"original_string": "private static final boolean ACTIVE = true;", "modifier": "private static final", "type": "boolean", "declarator": "ACTIVE = true", "var_name": "ACTIVE"}, {"original_string": "private static final String XML_CONTENT = \"<my><awesome><xml-stylesheet/></awesome></my>\";", "modifier": "private static final", "type": "String", "declarator": "XML_CONTENT = \"<my><awesome><xml-stylesheet/></awesome></my>\"", "var_name": "XML_CONTENT"}, {"original_string": "private static final Long VERSION_NUMBER = 1L;", "modifier": "private static final", "type": "Long", "declarator": "VERSION_NUMBER = 1L", "var_name": "VERSION_NUMBER"}, {"original_string": "private static final String OBJECT_ID = UUID.randomUUID().toString();", "modifier": "private static final", "type": "String", "declarator": "OBJECT_ID = UUID.randomUUID().toString()", "var_name": "OBJECT_ID"}, {"original_string": "private static final Style style = createStyle();", "modifier": "private static final", "type": "Style", "declarator": "style = createStyle()", "var_name": "style"}, {"original_string": "private StyleRepositoryService styleService = styleRepositoryService;", "modifier": "private", "type": "StyleRepositoryService", "declarator": "styleService = styleRepositoryService", "var_name": "styleService"}], "file": "rice-middleware/core-service/impl/src/test/java/org/kuali/rice/coreservice/impl/style/StyleRepositoryServiceImplTest.java"}, "test_case": {"identifier": "testGetStyle_valid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetStyle_valid() throws Exception{\n        setDataObjectServiceFetchStyle(style);\n        Style styleFetched = getStyleRepositoryService().getStyle(NAME);\n        assertTrue(\"Style fetched correctly\",styleFetched != null &&\n                        StringUtils.equals(styleFetched.getName(),style.getName()));\n        verify(dataObjectService,times(1)).findMatching(Matchers.argThat(\n                new ClassOrSubclassMatcher<StyleBo>(StyleBo.class)), any(\n                QueryByCriteria.class));\n    }", "signature": "void testGetStyle_valid()", "full_signature": "@Test public void testGetStyle_valid()", "class_method_signature": "StyleRepositoryServiceImplTest.testGetStyle_valid()", "testcase": true, "constructor": false, "invocations": ["setDataObjectServiceFetchStyle", "getStyle", "getStyleRepositoryService", "assertTrue", "equals", "getName", "getName", "findMatching", "verify", "times", "argThat", "any"]}, "focal_class": {"identifier": "StyleRepositoryServiceImpl", "superclass": "", "interfaces": "implements StyleRepositoryService", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(StyleRepositoryServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(StyleRepositoryServiceImpl.class)", "var_name": "LOG"}, {"original_string": "private static final String STYLE_CONFIG_PREFIX = \"edl.style\";", "modifier": "private static final", "type": "String", "declarator": "STYLE_CONFIG_PREFIX = \"edl.style\"", "var_name": "STYLE_CONFIG_PREFIX"}, {"original_string": "private StyleXmlParser styleXmlParser;", "modifier": "private", "type": "StyleXmlParser", "declarator": "styleXmlParser", "var_name": "styleXmlParser"}, {"original_string": "private DataObjectService dataObjectService;", "modifier": "private", "type": "DataObjectService", "declarator": "dataObjectService", "var_name": "dataObjectService"}, {"original_string": "private StyleDao styleDao;", "modifier": "private", "type": "StyleDao", "declarator": "styleDao", "var_name": "styleDao"}], "methods": [{"identifier": "setStyleXmlParser", "parameters": "(StyleXmlParser styleXmlParser)", "modifiers": "public", "return": "void", "signature": "void setStyleXmlParser(StyleXmlParser styleXmlParser)", "full_signature": "public void setStyleXmlParser(StyleXmlParser styleXmlParser)", "class_method_signature": "StyleRepositoryServiceImpl.setStyleXmlParser(StyleXmlParser styleXmlParser)", "testcase": false, "constructor": false}, {"identifier": "getStyle", "parameters": "(String styleName)", "modifiers": "@Override public", "return": "Style", "signature": "Style getStyle(String styleName)", "full_signature": "@Override public Style getStyle(String styleName)", "class_method_signature": "StyleRepositoryServiceImpl.getStyle(String styleName)", "testcase": false, "constructor": false}, {"identifier": "getUnableToLoadMessage", "parameters": "(String propertyName, String location)", "modifiers": "private", "return": "String", "signature": "String getUnableToLoadMessage(String propertyName, String location)", "full_signature": "private String getUnableToLoadMessage(String propertyName, String location)", "class_method_signature": "StyleRepositoryServiceImpl.getUnableToLoadMessage(String propertyName, String location)", "testcase": false, "constructor": false}, {"identifier": "getStyleByName", "parameters": "(String styleName)", "modifiers": "private", "return": "StyleBo", "signature": "StyleBo getStyleByName(String styleName)", "full_signature": "private StyleBo getStyleByName(String styleName)", "class_method_signature": "StyleRepositoryServiceImpl.getStyleByName(String styleName)", "testcase": false, "constructor": false}, {"identifier": "saveStyle", "parameters": "(Style data)", "modifiers": "@Override public", "return": "void", "signature": "void saveStyle(Style data)", "full_signature": "@Override public void saveStyle(Style data)", "class_method_signature": "StyleRepositoryServiceImpl.saveStyle(Style data)", "testcase": false, "constructor": false}, {"identifier": "saveStyleBo", "parameters": "(StyleBo styleBo)", "modifiers": "protected", "return": "void", "signature": "void saveStyleBo(StyleBo styleBo)", "full_signature": "protected void saveStyleBo(StyleBo styleBo)", "class_method_signature": "StyleRepositoryServiceImpl.saveStyleBo(StyleBo styleBo)", "testcase": false, "constructor": false}, {"identifier": "getAllStyleNames", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getAllStyleNames()", "full_signature": "@Override public List<String> getAllStyleNames()", "class_method_signature": "StyleRepositoryServiceImpl.getAllStyleNames()", "testcase": false, "constructor": false}, {"identifier": "getDataObjectService", "parameters": "()", "modifiers": "public", "return": "DataObjectService", "signature": "DataObjectService getDataObjectService()", "full_signature": "public DataObjectService getDataObjectService()", "class_method_signature": "StyleRepositoryServiceImpl.getDataObjectService()", "testcase": false, "constructor": false}, {"identifier": "setDataObjectService", "parameters": "(DataObjectService dataObjectService)", "modifiers": "@Required public", "return": "void", "signature": "void setDataObjectService(DataObjectService dataObjectService)", "full_signature": "@Required public void setDataObjectService(DataObjectService dataObjectService)", "class_method_signature": "StyleRepositoryServiceImpl.setDataObjectService(DataObjectService dataObjectService)", "testcase": false, "constructor": false}, {"identifier": "setStyleDao", "parameters": "(StyleDao styleDao)", "modifiers": "@Required public", "return": "void", "signature": "void setStyleDao(StyleDao styleDao)", "full_signature": "@Required public void setStyleDao(StyleDao styleDao)", "class_method_signature": "StyleRepositoryServiceImpl.setStyleDao(StyleDao styleDao)", "testcase": false, "constructor": false}], "file": "rice-middleware/core-service/impl/src/main/java/org/kuali/rice/coreservice/impl/style/StyleRepositoryServiceImpl.java"}, "focal_method": {"identifier": "getStyle", "parameters": "(String styleName)", "modifiers": "@Override public", "return": "Style", "body": "@Override\n    public Style getStyle(String styleName) {\n        if (StringUtils.isBlank(styleName)) {\n            throw new RiceIllegalArgumentException(\"styleName was null or blank\");\n        }\n\n        StyleBo style = getStyleByName(styleName);\n        // try to fetch the style from the database\n\n\n        // if it's null, look for a config param specifiying a file to load\n        if (style == null) {\n            String propertyName = STYLE_CONFIG_PREFIX + \".\" + styleName;\n            String location = ConfigContext.getCurrentContextConfig().getProperty(propertyName);\n            if (location != null) {\n\n                final InputStream xml;\n\n                try {\n                    xml = RiceUtilities.getResourceAsStream(location);\n                } catch (MalformedURLException e) {\n                    throw new RiceRuntimeException(getUnableToLoadMessage(propertyName, location), e);\n                } catch (IOException e) {\n                    throw new RiceRuntimeException(getUnableToLoadMessage(propertyName, location), e);\n                }\n\n                if (xml == null) {\n                    throw new RiceRuntimeException(getUnableToLoadMessage(propertyName, location) + \", no such file\");\n                }\n\n                LOG.info(\"Automatically loading style '\" + styleName + \"' from '\" + location + \"' as configured by \" + propertyName);\n                List<Style> styles = styleXmlParser.parseStyles(xml);\n                for (Style autoLoadedStyle : styles) {\n                    if (autoLoadedStyle.getName().equals(styleName)) {\n                        return autoLoadedStyle;\n                    }\n                }\n                throw new RiceRuntimeException(\"Failed to locate auto-loaded style '\" + styleName + \"' after successful parsing of file from '\" + location + \"' as configured by \" + propertyName);\n            }\n        }\n        return StyleBo.to(style);\n    }", "signature": "Style getStyle(String styleName)", "full_signature": "@Override public Style getStyle(String styleName)", "class_method_signature": "StyleRepositoryServiceImpl.getStyle(String styleName)", "testcase": false, "constructor": false, "invocations": ["isBlank", "getStyleByName", "getProperty", "getCurrentContextConfig", "getResourceAsStream", "getUnableToLoadMessage", "getUnableToLoadMessage", "getUnableToLoadMessage", "info", "parseStyles", "equals", "getName", "to"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}