{"test_class": {"identifier": "FilterActionTest", "superclass": "extends ActionTest", "interfaces": "", "fields": [], "file": "foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/actions/FilterActionTest.java"}, "test_case": {"identifier": "testMissingIndicesQuery", "parameters": "()", "modifiers": "@SuppressWarnings(\"deprecation\") @Test public", "return": "void", "body": "@SuppressWarnings(\"deprecation\")\n    @Test\n    public void testMissingIndicesQuery() throws FoxtrotException {\n        final ObjectMapper mapper = getMapper();\n        List<Document> documents = TestUtils.getQueryDocumentsDifferentDate(mapper, new Date(2014 - 1900, 4, 1).getTime());\n        documents.addAll(TestUtils.getQueryDocumentsDifferentDate(mapper, new Date(2014 - 1900, 4, 5).getTime()));\n        getQueryStore().save(TestUtils.TEST_TABLE_NAME, documents);\n        for(Document document : documents) {\n            getElasticsearchConnection().getClient()\n                    .admin()\n                    .indices()\n                    .prepareRefresh(ElasticsearchUtils.getCurrentIndex(TestUtils.TEST_TABLE_NAME, document.getTimestamp()))\n                    .execute()\n                    .actionGet();\n        }\n        GetIndexResponse response = getElasticsearchConnection().getClient()\n                .admin()\n                .indices()\n                .getIndex(new GetIndexRequest())\n                .actionGet();\n        // Find all indices returned for this table name.. (using regex to match)\n        assertEquals(3, Arrays.stream(response.getIndices())\n                .filter(index -> index.matches(\".*-\" + TestUtils.TEST_TABLE_NAME + \"-.*\"))\n                .count());\n\n        Query query = new Query();\n        query.setLimit(documents.size());\n        query.setTable(TestUtils.TEST_TABLE_NAME);\n        BetweenFilter betweenFilter = new BetweenFilter();\n        betweenFilter.setField(\"_timestamp\");\n        betweenFilter.setFrom(documents.get(0)\n                                      .getTimestamp());\n        betweenFilter.setTo(documents.get(documents.size() - 1)\n                                    .getTimestamp());\n        betweenFilter.setTemporal(true);\n        query.setFilters(Lists.<Filter>newArrayList(betweenFilter));\n        QueryResponse actualResponse = QueryResponse.class.cast(getQueryExecutor().execute(query));\n        assertEquals(documents.size(), actualResponse.getDocuments()\n                .size());\n    }", "signature": "void testMissingIndicesQuery()", "full_signature": "@SuppressWarnings(\"deprecation\") @Test public void testMissingIndicesQuery()", "class_method_signature": "FilterActionTest.testMissingIndicesQuery()", "testcase": true, "constructor": false, "invocations": ["getMapper", "getQueryDocumentsDifferentDate", "getTime", "addAll", "getQueryDocumentsDifferentDate", "getTime", "save", "getQueryStore", "actionGet", "execute", "prepareRefresh", "indices", "admin", "getClient", "getElasticsearchConnection", "getCurrentIndex", "getTimestamp", "actionGet", "getIndex", "indices", "admin", "getClient", "getElasticsearchConnection", "assertEquals", "count", "filter", "stream", "getIndices", "matches", "setLimit", "size", "setTable", "setField", "setFrom", "getTimestamp", "get", "setTo", "getTimestamp", "get", "size", "setTemporal", "setFilters", "newArrayList", "cast", "execute", "getQueryExecutor", "assertEquals", "size", "size", "getDocuments"]}, "focal_class": {"identifier": "FilterAction", "superclass": "extends Action<Query>", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(FilterAction.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FilterAction.class)", "var_name": "logger"}], "methods": [{"identifier": "FilterAction", "parameters": "(Query parameter, AnalyticsLoader analyticsLoader)", "modifiers": "public", "return": "", "signature": " FilterAction(Query parameter, AnalyticsLoader analyticsLoader)", "full_signature": "public  FilterAction(Query parameter, AnalyticsLoader analyticsLoader)", "class_method_signature": "FilterAction.FilterAction(Query parameter, AnalyticsLoader analyticsLoader)", "testcase": false, "constructor": true}, {"identifier": "preprocess", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void preprocess()", "full_signature": "@Override public void preprocess()", "class_method_signature": "FilterAction.preprocess()", "testcase": false, "constructor": false}, {"identifier": "getMetricKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMetricKey()", "full_signature": "@Override public String getMetricKey()", "class_method_signature": "FilterAction.getMetricKey()", "testcase": false, "constructor": false}, {"identifier": "getRequestCacheKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRequestCacheKey()", "full_signature": "@Override public String getRequestCacheKey()", "class_method_signature": "FilterAction.getRequestCacheKey()", "testcase": false, "constructor": false}, {"identifier": "validateImpl", "parameters": "(Query parameter)", "modifiers": "@Override public", "return": "void", "signature": "void validateImpl(Query parameter)", "full_signature": "@Override public void validateImpl(Query parameter)", "class_method_signature": "FilterAction.validateImpl(Query parameter)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Query parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse execute(Query parameter)", "full_signature": "@Override public ActionResponse execute(Query parameter)", "class_method_signature": "FilterAction.execute(Query parameter)", "testcase": false, "constructor": false}, {"identifier": "getRequestBuilder", "parameters": "(Query parameter)", "modifiers": "@Override public", "return": "SearchRequestBuilder", "signature": "SearchRequestBuilder getRequestBuilder(Query parameter)", "full_signature": "@Override public SearchRequestBuilder getRequestBuilder(Query parameter)", "class_method_signature": "FilterAction.getRequestBuilder(Query parameter)", "testcase": false, "constructor": false}, {"identifier": "getResponse", "parameters": "(org.elasticsearch.action.ActionResponse response, Query parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse getResponse(org.elasticsearch.action.ActionResponse response, Query parameter)", "full_signature": "@Override public ActionResponse getResponse(org.elasticsearch.action.ActionResponse response, Query parameter)", "class_method_signature": "FilterAction.getResponse(org.elasticsearch.action.ActionResponse response, Query parameter)", "testcase": false, "constructor": false}], "file": "foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/actions/FilterAction.java"}, "focal_method": {"identifier": "execute", "parameters": "(Query parameter)", "modifiers": "@Override public", "return": "ActionResponse", "body": "@Override\n    public ActionResponse execute(Query parameter) {\n        SearchRequestBuilder search = getRequestBuilder(parameter);\n        try {\n            logger.info(\"Search: {}\", search);\n            SearchResponse response = search.execute()\n                    .actionGet(getGetQueryTimeout());\n            return getResponse(response, parameter);\n        } catch (ElasticsearchException e) {\n            throw FoxtrotExceptions.createQueryExecutionException(parameter, e);\n        }\n    }", "signature": "ActionResponse execute(Query parameter)", "full_signature": "@Override public ActionResponse execute(Query parameter)", "class_method_signature": "FilterAction.execute(Query parameter)", "testcase": false, "constructor": false, "invocations": ["getRequestBuilder", "info", "actionGet", "execute", "getGetQueryTimeout", "getResponse", "createQueryExecutionException"]}, "repository": {"repo_id": 19980663, "url": "https://github.com/Flipkart/foxtrot", "stars": 22, "created": "5/20/2014 12:52:55 PM +00:00", "updates": "2020-01-07T07:05:03+00:00", "fork": "False", "license": "licensed"}}