{"test_class": {"identifier": "BinarySearchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "int[] array = {-2, -1, 0, 2, 3, 4, 5, 8, 10};", "modifier": "", "type": "int[]", "declarator": "array = {-2, -1, 0, 2, 3, 4, 5, 8, 10}", "var_name": "array"}], "file": "algs/src/test/java/org/buptdavid/datastructure/search/BinarySearchTest.java"}, "test_case": {"identifier": "testSearchRecursive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSearchRecursive(){\n\t\tAssert.assertEquals(Integer.valueOf(-2), BinarySearch.searchRecursive(array, -2));\n\t\tAssert.assertEquals(Integer.valueOf(10), BinarySearch.searchRecursive(array, 10));\n\t\t\n\t\tAssert.assertEquals(Integer.valueOf(0), BinarySearch.searchRecursive(array, 0));\n\t\t\n\t\tAssert.assertEquals(null, BinarySearch.searchRecursive(array, 1));\n\t}", "signature": "void testSearchRecursive()", "full_signature": "@Test public void testSearchRecursive()", "class_method_signature": "BinarySearchTest.testSearchRecursive()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "valueOf", "searchRecursive", "assertEquals", "valueOf", "searchRecursive", "assertEquals", "valueOf", "searchRecursive", "assertEquals", "searchRecursive"]}, "focal_class": {"identifier": "BinarySearch", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "searchCirculation", "parameters": "(int[] array, int value)", "modifiers": "public static", "return": "Integer", "signature": "Integer searchCirculation(int[] array, int value)", "full_signature": "public static Integer searchCirculation(int[] array, int value)", "class_method_signature": "BinarySearch.searchCirculation(int[] array, int value)", "testcase": false, "constructor": false}, {"identifier": "searchRecursive", "parameters": "(int[] array, int value)", "modifiers": "public static", "return": "Integer", "signature": "Integer searchRecursive(int[] array, int value)", "full_signature": "public static Integer searchRecursive(int[] array, int value)", "class_method_signature": "BinarySearch.searchRecursive(int[] array, int value)", "testcase": false, "constructor": false}, {"identifier": "searchRecursive", "parameters": "(int[] array, int value, int low, int high)", "modifiers": "private static", "return": "Integer", "signature": "Integer searchRecursive(int[] array, int value, int low, int high)", "full_signature": "private static Integer searchRecursive(int[] array, int value, int low, int high)", "class_method_signature": "BinarySearch.searchRecursive(int[] array, int value, int low, int high)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/org/buptdavid/datastructure/search/BinarySearch.java"}, "focal_method": {"identifier": "searchRecursive", "parameters": "(int[] array, int value)", "modifiers": "public static", "return": "Integer", "body": "public static Integer searchRecursive(int[] array, int value){\n\t\treturn searchRecursive(array, value, 0, array.length - 1);\n\t}", "signature": "Integer searchRecursive(int[] array, int value)", "full_signature": "public static Integer searchRecursive(int[] array, int value)", "class_method_signature": "BinarySearch.searchRecursive(int[] array, int value)", "testcase": false, "constructor": false, "invocations": ["searchRecursive"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}