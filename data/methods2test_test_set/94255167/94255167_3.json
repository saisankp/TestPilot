{"test_class": {"identifier": "TextInstructionsTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "osrm-text-instructions/libjava-osrm-instructions/src/test/java/org/project_osrm/instructions/TextInstructionsTest.java"}, "test_case": {"identifier": "testValidDirectionFromDegree", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testValidDirectionFromDegree() {\n    TextInstructions textInstructions = new TextInstructions(\"en\", \"v5\");\n    assertEquals(\"\", textInstructions.directionFromDegree(null));\n    assertEquals(\"north\", textInstructions.directionFromDegree(0.));\n    assertEquals(\"north\", textInstructions.directionFromDegree(1.));\n    assertEquals(\"north\", textInstructions.directionFromDegree(20.));\n    assertEquals(\"northeast\", textInstructions.directionFromDegree(21.));\n    assertEquals(\"northeast\", textInstructions.directionFromDegree(69.));\n    assertEquals(\"east\", textInstructions.directionFromDegree(70.));\n    assertEquals(\"east\", textInstructions.directionFromDegree(110.));\n    assertEquals(\"southeast\", textInstructions.directionFromDegree(111.));\n    assertEquals(\"southeast\", textInstructions.directionFromDegree(159.));\n    assertEquals(\"south\", textInstructions.directionFromDegree(160.));\n    assertEquals(\"south\", textInstructions.directionFromDegree(200.));\n    assertEquals(\"southwest\", textInstructions.directionFromDegree(201.));\n    assertEquals(\"southwest\", textInstructions.directionFromDegree(249.));\n    assertEquals(\"west\", textInstructions.directionFromDegree(250.));\n    assertEquals(\"west\", textInstructions.directionFromDegree(290.));\n    assertEquals(\"northwest\", textInstructions.directionFromDegree(291.));\n    assertEquals(\"northwest\", textInstructions.directionFromDegree(339.));\n    assertEquals(\"north\", textInstructions.directionFromDegree(340.));\n    assertEquals(\"north\", textInstructions.directionFromDegree(360.));\n  }", "signature": "void testValidDirectionFromDegree()", "full_signature": "@Test public void testValidDirectionFromDegree()", "class_method_signature": "TextInstructionsTest.testValidDirectionFromDegree()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree", "assertEquals", "directionFromDegree"]}, "focal_class": {"identifier": "TextInstructions", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(TextInstructions.class.getSimpleName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(TextInstructions.class.getSimpleName())", "var_name": "logger"}, {"original_string": "private TokenizedInstructionHook tokenizedInstructionHook;", "modifier": "private", "type": "TokenizedInstructionHook", "declarator": "tokenizedInstructionHook", "var_name": "tokenizedInstructionHook"}, {"original_string": "private JsonObject rootObject;", "modifier": "private", "type": "JsonObject", "declarator": "rootObject", "var_name": "rootObject"}, {"original_string": "private JsonObject versionObject;", "modifier": "private", "type": "JsonObject", "declarator": "versionObject", "var_name": "versionObject"}], "methods": [{"identifier": "TextInstructions", "parameters": "(String language, String version)", "modifiers": "public", "return": "", "signature": " TextInstructions(String language, String version)", "full_signature": "public  TextInstructions(String language, String version)", "class_method_signature": "TextInstructions.TextInstructions(String language, String version)", "testcase": false, "constructor": true}, {"identifier": "getTokenizedInstructionHook", "parameters": "()", "modifiers": "public", "return": "TokenizedInstructionHook", "signature": "TokenizedInstructionHook getTokenizedInstructionHook()", "full_signature": "public TokenizedInstructionHook getTokenizedInstructionHook()", "class_method_signature": "TextInstructions.getTokenizedInstructionHook()", "testcase": false, "constructor": false}, {"identifier": "setTokenizedInstructionHook", "parameters": "(TokenizedInstructionHook tokenizedInstructionHook)", "modifiers": "public", "return": "void", "signature": "void setTokenizedInstructionHook(TokenizedInstructionHook tokenizedInstructionHook)", "full_signature": "public void setTokenizedInstructionHook(TokenizedInstructionHook tokenizedInstructionHook)", "class_method_signature": "TextInstructions.setTokenizedInstructionHook(TokenizedInstructionHook tokenizedInstructionHook)", "testcase": false, "constructor": false}, {"identifier": "getRootObject", "parameters": "()", "modifiers": "public", "return": "JsonObject", "signature": "JsonObject getRootObject()", "full_signature": "public JsonObject getRootObject()", "class_method_signature": "TextInstructions.getRootObject()", "testcase": false, "constructor": false}, {"identifier": "getVersionObject", "parameters": "()", "modifiers": "public", "return": "JsonObject", "signature": "JsonObject getVersionObject()", "full_signature": "public JsonObject getVersionObject()", "class_method_signature": "TextInstructions.getVersionObject()", "testcase": false, "constructor": false}, {"identifier": "capitalizeFirstLetter", "parameters": "(String text)", "modifiers": "public static", "return": "String", "signature": "String capitalizeFirstLetter(String text)", "full_signature": "public static String capitalizeFirstLetter(String text)", "class_method_signature": "TextInstructions.capitalizeFirstLetter(String text)", "testcase": false, "constructor": false}, {"identifier": "ordinalize", "parameters": "(Integer number)", "modifiers": "public", "return": "String", "signature": "String ordinalize(Integer number)", "full_signature": "public String ordinalize(Integer number)", "class_method_signature": "TextInstructions.ordinalize(Integer number)", "testcase": false, "constructor": false}, {"identifier": "directionFromDegree", "parameters": "(Double degree)", "modifiers": "public", "return": "String", "signature": "String directionFromDegree(Double degree)", "full_signature": "public String directionFromDegree(Double degree)", "class_method_signature": "TextInstructions.directionFromDegree(Double degree)", "testcase": false, "constructor": false}, {"identifier": "laneConfig", "parameters": "(LegStep step)", "modifiers": "public", "return": "String", "signature": "String laneConfig(LegStep step)", "full_signature": "public String laneConfig(LegStep step)", "class_method_signature": "TextInstructions.laneConfig(LegStep step)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(LegStep step)", "modifiers": "public", "return": "String", "signature": "String compile(LegStep step)", "full_signature": "public String compile(LegStep step)", "class_method_signature": "TextInstructions.compile(LegStep step)", "testcase": false, "constructor": false}], "file": "osrm-text-instructions/libjava-osrm-instructions/src/main/java/org/project_osrm/instructions/TextInstructions.java"}, "focal_method": {"identifier": "directionFromDegree", "parameters": "(Double degree)", "modifiers": "public", "return": "String", "body": "public String directionFromDegree(Double degree) {\n    if (degree == null) {\n      // step had no bearing_after degree, ignoring\n      return \"\";\n    } else if (degree >= 0 && degree <= 20) {\n      return getVersionObject().getAsJsonObject(\"constants\").getAsJsonObject(\"direction\")\n        .getAsJsonPrimitive(\"north\").getAsString();\n    } else if (degree > 20 && degree < 70) {\n      return getVersionObject().getAsJsonObject(\"constants\").getAsJsonObject(\"direction\")\n        .getAsJsonPrimitive(\"northeast\").getAsString();\n    } else if (degree >= 70 && degree <= 110) {\n      return getVersionObject().getAsJsonObject(\"constants\").getAsJsonObject(\"direction\")\n        .getAsJsonPrimitive(\"east\").getAsString();\n    } else if (degree > 110 && degree < 160) {\n      return getVersionObject().getAsJsonObject(\"constants\").getAsJsonObject(\"direction\")\n        .getAsJsonPrimitive(\"southeast\").getAsString();\n    } else if (degree >= 160 && degree <= 200) {\n      return getVersionObject().getAsJsonObject(\"constants\").getAsJsonObject(\"direction\")\n        .getAsJsonPrimitive(\"south\").getAsString();\n    } else if (degree > 200 && degree < 250) {\n      return getVersionObject().getAsJsonObject(\"constants\").getAsJsonObject(\"direction\")\n        .getAsJsonPrimitive(\"southwest\").getAsString();\n    } else if (degree >= 250 && degree <= 290) {\n      return getVersionObject().getAsJsonObject(\"constants\").getAsJsonObject(\"direction\")\n        .getAsJsonPrimitive(\"west\").getAsString();\n    } else if (degree > 290 && degree < 340) {\n      return getVersionObject().getAsJsonObject(\"constants\").getAsJsonObject(\"direction\")\n        .getAsJsonPrimitive(\"northwest\").getAsString();\n    } else if (degree >= 340 && degree <= 360) {\n      return getVersionObject().getAsJsonObject(\"constants\").getAsJsonObject(\"direction\")\n        .getAsJsonPrimitive(\"north\").getAsString();\n    } else {\n      throw new RuntimeException(\"Degree is invalid: \" + degree);\n    }\n  }", "signature": "String directionFromDegree(Double degree)", "full_signature": "public String directionFromDegree(Double degree)", "class_method_signature": "TextInstructions.directionFromDegree(Double degree)", "testcase": false, "constructor": false, "invocations": ["getAsString", "getAsJsonPrimitive", "getAsJsonObject", "getAsJsonObject", "getVersionObject", "getAsString", "getAsJsonPrimitive", "getAsJsonObject", "getAsJsonObject", "getVersionObject", "getAsString", "getAsJsonPrimitive", "getAsJsonObject", "getAsJsonObject", "getVersionObject", "getAsString", "getAsJsonPrimitive", "getAsJsonObject", "getAsJsonObject", "getVersionObject", "getAsString", "getAsJsonPrimitive", "getAsJsonObject", "getAsJsonObject", "getVersionObject", "getAsString", "getAsJsonPrimitive", "getAsJsonObject", "getAsJsonObject", "getVersionObject", "getAsString", "getAsJsonPrimitive", "getAsJsonObject", "getAsJsonObject", "getVersionObject", "getAsString", "getAsJsonPrimitive", "getAsJsonObject", "getAsJsonObject", "getVersionObject", "getAsString", "getAsJsonPrimitive", "getAsJsonObject", "getAsJsonObject", "getVersionObject"]}, "repository": {"repo_id": 94255167, "url": "https://github.com/Project-OSRM/osrm-text-instructions.java", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 255, "license": "licensed"}}