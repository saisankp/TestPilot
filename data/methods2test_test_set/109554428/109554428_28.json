{"test_class": {"identifier": "BrokerInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final AtomicInteger n = new AtomicInteger(0);", "modifier": "private static final", "type": "AtomicInteger", "declarator": "n = new AtomicInteger(0)", "var_name": "n"}, {"original_string": "private static final BrokerInterceptor interceptor = new BrokerInterceptor(\n        Collections.<InterceptHandler>singletonList(new MockObserver()));", "modifier": "private static final", "type": "BrokerInterceptor", "declarator": "interceptor = new BrokerInterceptor(\n        Collections.<InterceptHandler>singletonList(new MockObserver()))", "var_name": "interceptor"}], "file": "broker/src/test/java/io/moquette/spi/impl/BrokerInterceptorTest.java"}, "test_case": {"identifier": "testNotifyClientConnected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNotifyClientConnected() throws Exception {\n        interceptor.notifyClientConnected(MqttMessageBuilders.connect().build());\n        interval();\n        assertEquals(40, n.get());\n    }", "signature": "void testNotifyClientConnected()", "full_signature": "@Test public void testNotifyClientConnected()", "class_method_signature": "BrokerInterceptorTest.testNotifyClientConnected()", "testcase": true, "constructor": false, "invocations": ["notifyClientConnected", "build", "connect", "interval", "assertEquals", "get"]}, "focal_class": {"identifier": "BrokerInterceptor", "superclass": "", "interfaces": "implements Interceptor", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(BrokerInterceptor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(BrokerInterceptor.class)", "var_name": "LOG"}, {"original_string": "private final Map<Class<?>, List<InterceptHandler>> handlers;", "modifier": "private final", "type": "Map<Class<?>, List<InterceptHandler>>", "declarator": "handlers", "var_name": "handlers"}, {"original_string": "private final ExecutorService executor;", "modifier": "private final", "type": "ExecutorService", "declarator": "executor", "var_name": "executor"}], "methods": [{"identifier": "BrokerInterceptor", "parameters": "(int poolSize, List<InterceptHandler> handlers)", "modifiers": "private", "return": "", "signature": " BrokerInterceptor(int poolSize, List<InterceptHandler> handlers)", "full_signature": "private  BrokerInterceptor(int poolSize, List<InterceptHandler> handlers)", "class_method_signature": "BrokerInterceptor.BrokerInterceptor(int poolSize, List<InterceptHandler> handlers)", "testcase": false, "constructor": true}, {"identifier": "BrokerInterceptor", "parameters": "(List<InterceptHandler> handlers)", "modifiers": "", "return": "", "signature": " BrokerInterceptor(List<InterceptHandler> handlers)", "full_signature": "  BrokerInterceptor(List<InterceptHandler> handlers)", "class_method_signature": "BrokerInterceptor.BrokerInterceptor(List<InterceptHandler> handlers)", "testcase": false, "constructor": true}, {"identifier": "BrokerInterceptor", "parameters": "(IConfig props, List<InterceptHandler> handlers)", "modifiers": "", "return": "", "signature": " BrokerInterceptor(IConfig props, List<InterceptHandler> handlers)", "full_signature": "  BrokerInterceptor(IConfig props, List<InterceptHandler> handlers)", "class_method_signature": "BrokerInterceptor.BrokerInterceptor(IConfig props, List<InterceptHandler> handlers)", "testcase": false, "constructor": true}, {"identifier": "stop", "parameters": "()", "modifiers": "", "return": "void", "signature": "void stop()", "full_signature": " void stop()", "class_method_signature": "BrokerInterceptor.stop()", "testcase": false, "constructor": false}, {"identifier": "notifyClientConnected", "parameters": "(final MqttConnectMessage msg)", "modifiers": "@Override public", "return": "void", "signature": "void notifyClientConnected(final MqttConnectMessage msg)", "full_signature": "@Override public void notifyClientConnected(final MqttConnectMessage msg)", "class_method_signature": "BrokerInterceptor.notifyClientConnected(final MqttConnectMessage msg)", "testcase": false, "constructor": false}, {"identifier": "notifyClientDisconnected", "parameters": "(final String clientID, final String username)", "modifiers": "@Override public", "return": "void", "signature": "void notifyClientDisconnected(final String clientID, final String username)", "full_signature": "@Override public void notifyClientDisconnected(final String clientID, final String username)", "class_method_signature": "BrokerInterceptor.notifyClientDisconnected(final String clientID, final String username)", "testcase": false, "constructor": false}, {"identifier": "notifyClientConnectionLost", "parameters": "(final String clientID, final String username)", "modifiers": "@Override public", "return": "void", "signature": "void notifyClientConnectionLost(final String clientID, final String username)", "full_signature": "@Override public void notifyClientConnectionLost(final String clientID, final String username)", "class_method_signature": "BrokerInterceptor.notifyClientConnectionLost(final String clientID, final String username)", "testcase": false, "constructor": false}, {"identifier": "notifyTopicPublished", "parameters": "(final MqttPublishMessage msg, final String clientID, final String username)", "modifiers": "@Override public", "return": "void", "signature": "void notifyTopicPublished(final MqttPublishMessage msg, final String clientID, final String username)", "full_signature": "@Override public void notifyTopicPublished(final MqttPublishMessage msg, final String clientID, final String username)", "class_method_signature": "BrokerInterceptor.notifyTopicPublished(final MqttPublishMessage msg, final String clientID, final String username)", "testcase": false, "constructor": false}, {"identifier": "notifyTopicSubscribed", "parameters": "(final Subscription sub, final String username)", "modifiers": "@Override public", "return": "void", "signature": "void notifyTopicSubscribed(final Subscription sub, final String username)", "full_signature": "@Override public void notifyTopicSubscribed(final Subscription sub, final String username)", "class_method_signature": "BrokerInterceptor.notifyTopicSubscribed(final Subscription sub, final String username)", "testcase": false, "constructor": false}, {"identifier": "notifyTopicUnsubscribed", "parameters": "(final String topic, final String clientID, final String username)", "modifiers": "@Override public", "return": "void", "signature": "void notifyTopicUnsubscribed(final String topic, final String clientID, final String username)", "full_signature": "@Override public void notifyTopicUnsubscribed(final String topic, final String clientID, final String username)", "class_method_signature": "BrokerInterceptor.notifyTopicUnsubscribed(final String topic, final String clientID, final String username)", "testcase": false, "constructor": false}, {"identifier": "notifyMessageAcknowledged", "parameters": "(final InterceptAcknowledgedMessage msg)", "modifiers": "@Override public", "return": "void", "signature": "void notifyMessageAcknowledged(final InterceptAcknowledgedMessage msg)", "full_signature": "@Override public void notifyMessageAcknowledged(final InterceptAcknowledgedMessage msg)", "class_method_signature": "BrokerInterceptor.notifyMessageAcknowledged(final InterceptAcknowledgedMessage msg)", "testcase": false, "constructor": false}, {"identifier": "addInterceptHandler", "parameters": "(InterceptHandler interceptHandler)", "modifiers": "@Override public", "return": "void", "signature": "void addInterceptHandler(InterceptHandler interceptHandler)", "full_signature": "@Override public void addInterceptHandler(InterceptHandler interceptHandler)", "class_method_signature": "BrokerInterceptor.addInterceptHandler(InterceptHandler interceptHandler)", "testcase": false, "constructor": false}, {"identifier": "removeInterceptHandler", "parameters": "(InterceptHandler interceptHandler)", "modifiers": "@Override public", "return": "void", "signature": "void removeInterceptHandler(InterceptHandler interceptHandler)", "full_signature": "@Override public void removeInterceptHandler(InterceptHandler interceptHandler)", "class_method_signature": "BrokerInterceptor.removeInterceptHandler(InterceptHandler interceptHandler)", "testcase": false, "constructor": false}, {"identifier": "getInterceptedMessageTypes", "parameters": "(InterceptHandler interceptHandler)", "modifiers": "private static", "return": "Class<?>[]", "signature": "Class<?>[] getInterceptedMessageTypes(InterceptHandler interceptHandler)", "full_signature": "private static Class<?>[] getInterceptedMessageTypes(InterceptHandler interceptHandler)", "class_method_signature": "BrokerInterceptor.getInterceptedMessageTypes(InterceptHandler interceptHandler)", "testcase": false, "constructor": false}], "file": "broker/src/main/java/io/moquette/spi/impl/BrokerInterceptor.java"}, "focal_method": {"identifier": "notifyClientConnected", "parameters": "(final MqttConnectMessage msg)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void notifyClientConnected(final MqttConnectMessage msg) {\n        for (final InterceptHandler handler : this.handlers.get(InterceptConnectMessage.class)) {\n            LOG.debug(\"Sending MQTT CONNECT message to interceptor. CId={}, interceptorId={}\",\n                    msg.payload().clientIdentifier(), handler.getID());\n            executor.execute(() -> handler.onConnect(new InterceptConnectMessage(msg)));\n        }\n    }", "signature": "void notifyClientConnected(final MqttConnectMessage msg)", "full_signature": "@Override public void notifyClientConnected(final MqttConnectMessage msg)", "class_method_signature": "BrokerInterceptor.notifyClientConnected(final MqttConnectMessage msg)", "testcase": false, "constructor": false, "invocations": ["get", "debug", "clientIdentifier", "payload", "getID", "execute", "onConnect"]}, "repository": {"repo_id": 109554428, "url": "https://github.com/historicvally/springboot-mqtt", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 91, "size": 318, "license": "licensed"}}