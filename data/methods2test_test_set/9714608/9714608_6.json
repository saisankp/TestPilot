{"test_class": {"identifier": "NaryTreeNodeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TreeNodeListenerStub<DefaultNaryTreeNode<Object>> listener =\n\t\tnew TreeNodeListenerStub<>();", "modifier": "private final", "type": "TreeNodeListenerStub<DefaultNaryTreeNode<Object>>", "declarator": "listener =\n\t\tnew TreeNodeListenerStub<>()", "var_name": "listener"}, {"original_string": "private DefaultNaryTreeNode<Object> root;", "modifier": "private", "type": "DefaultNaryTreeNode<Object>", "declarator": "root", "var_name": "root"}, {"original_string": "private DefaultNaryTreeNode<Object> child1;", "modifier": "private", "type": "DefaultNaryTreeNode<Object>", "declarator": "child1", "var_name": "child1"}, {"original_string": "private DefaultNaryTreeNode<Object> child2;", "modifier": "private", "type": "DefaultNaryTreeNode<Object>", "declarator": "child2", "var_name": "child2"}, {"original_string": "private DefaultNaryTreeNode<Object> node;", "modifier": "private", "type": "DefaultNaryTreeNode<Object>", "declarator": "node", "var_name": "node"}, {"original_string": "private DefaultNaryTreeNode<Object> newNode;", "modifier": "private", "type": "DefaultNaryTreeNode<Object>", "declarator": "newNode", "var_name": "newNode"}], "file": "core/maths/mathtree/src/test/java/org/arakhne/afc/math/tree/node/NaryTreeNodeTest.java"}, "test_case": {"identifier": "getChildCount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getChildCount() {\n\t\tassertEquals(2, this.root.getChildCount());\n\t\tassertEquals(1, this.child1.getChildCount());\n\t\tassertEquals(0, this.child2.getChildCount());\n\t\tassertEquals(0, this.node.getChildCount());\n\t}", "signature": "void getChildCount()", "full_signature": "@Test public void getChildCount()", "class_method_signature": "NaryTreeNodeTest.getChildCount()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getChildCount", "assertEquals", "getChildCount", "assertEquals", "getChildCount", "assertEquals", "getChildCount"]}, "focal_class": {"identifier": "NaryTreeNode", "superclass": "extends AbstractTreeNode<D, N>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -1313340976961548532L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -1313340976961548532L", "var_name": "serialVersionUID"}, {"original_string": "private List<N> children;", "modifier": "private", "type": "List<N>", "declarator": "children", "var_name": "children"}], "methods": [{"identifier": "NaryTreeNode", "parameters": "()", "modifiers": "public", "return": "", "signature": " NaryTreeNode()", "full_signature": "public  NaryTreeNode()", "class_method_signature": "NaryTreeNode.NaryTreeNode()", "testcase": false, "constructor": true}, {"identifier": "NaryTreeNode", "parameters": "(Collection<D> data)", "modifiers": "public", "return": "", "signature": " NaryTreeNode(Collection<D> data)", "full_signature": "public  NaryTreeNode(Collection<D> data)", "class_method_signature": "NaryTreeNode.NaryTreeNode(Collection<D> data)", "testcase": false, "constructor": true}, {"identifier": "NaryTreeNode", "parameters": "(D data)", "modifiers": "public", "return": "", "signature": " NaryTreeNode(D data)", "full_signature": "public  NaryTreeNode(D data)", "class_method_signature": "NaryTreeNode.NaryTreeNode(D data)", "testcase": false, "constructor": true}, {"identifier": "NaryTreeNode", "parameters": "(boolean useLinkedList)", "modifiers": "public", "return": "", "signature": " NaryTreeNode(boolean useLinkedList)", "full_signature": "public  NaryTreeNode(boolean useLinkedList)", "class_method_signature": "NaryTreeNode.NaryTreeNode(boolean useLinkedList)", "testcase": false, "constructor": true}, {"identifier": "NaryTreeNode", "parameters": "(boolean useLinkedList, boolean copyDataCollection, List<D> data)", "modifiers": "public", "return": "", "signature": " NaryTreeNode(boolean useLinkedList, boolean copyDataCollection, List<D> data)", "full_signature": "public  NaryTreeNode(boolean useLinkedList, boolean copyDataCollection, List<D> data)", "class_method_signature": "NaryTreeNode.NaryTreeNode(boolean useLinkedList, boolean copyDataCollection, List<D> data)", "testcase": false, "constructor": true}, {"identifier": "NaryTreeNode", "parameters": "(boolean useLinkedList, D data)", "modifiers": "public", "return": "", "signature": " NaryTreeNode(boolean useLinkedList, D data)", "full_signature": "public  NaryTreeNode(boolean useLinkedList, D data)", "class_method_signature": "NaryTreeNode.NaryTreeNode(boolean useLinkedList, D data)", "testcase": false, "constructor": true}, {"identifier": "getPartitionEnumeration", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Class<? extends Enum<?>>", "signature": "Class<? extends Enum<?>> getPartitionEnumeration()", "full_signature": "@Pure @Override public Class<? extends Enum<?>> getPartitionEnumeration()", "class_method_signature": "NaryTreeNode.getPartitionEnumeration()", "testcase": false, "constructor": false}, {"identifier": "newInternalList", "parameters": "(int size)", "modifiers": "private", "return": "List<N>", "signature": "List<N> newInternalList(int size)", "full_signature": "private List<N> newInternalList(int size)", "class_method_signature": "NaryTreeNode.newInternalList(int size)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream in)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream in)", "full_signature": "private void readObject(ObjectInputStream in)", "class_method_signature": "NaryTreeNode.readObject(ObjectInputStream in)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "NaryTreeNode.clear()", "testcase": false, "constructor": false}, {"identifier": "getChildCount", "parameters": "()", "modifiers": "@Pure @Override public final", "return": "int", "signature": "int getChildCount()", "full_signature": "@Pure @Override public final int getChildCount()", "class_method_signature": "NaryTreeNode.getChildCount()", "testcase": false, "constructor": false}, {"identifier": "getNotNullChildCount", "parameters": "()", "modifiers": "@Pure @Override public", "return": "int", "signature": "int getNotNullChildCount()", "full_signature": "@Pure @Override public int getNotNullChildCount()", "class_method_signature": "NaryTreeNode.getNotNullChildCount()", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(N child)", "modifiers": "@Pure @Override public final", "return": "int", "signature": "int indexOf(N child)", "full_signature": "@Pure @Override public final int indexOf(N child)", "class_method_signature": "NaryTreeNode.indexOf(N child)", "testcase": false, "constructor": false}, {"identifier": "getChildAt", "parameters": "(int index)", "modifiers": "@Pure @Override public final", "return": "N", "signature": "N getChildAt(int index)", "full_signature": "@Pure @Override public final N getChildAt(int index)", "class_method_signature": "NaryTreeNode.getChildAt(int index)", "testcase": false, "constructor": false}, {"identifier": "moveTo", "parameters": "(N newParent)", "modifiers": "public", "return": "boolean", "signature": "boolean moveTo(N newParent)", "full_signature": "public boolean moveTo(N newParent)", "class_method_signature": "NaryTreeNode.moveTo(N newParent)", "testcase": false, "constructor": false}, {"identifier": "moveTo", "parameters": "(N newParent, int index)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean moveTo(N newParent, int index)", "full_signature": "@Override public boolean moveTo(N newParent, int index)", "class_method_signature": "NaryTreeNode.moveTo(N newParent, int index)", "testcase": false, "constructor": false}, {"identifier": "setChildAt", "parameters": "(int index, N newChild)", "modifiers": "@Override @SuppressWarnings(\"checkstyle:npathcomplexity\") public", "return": "boolean", "signature": "boolean setChildAt(int index, N newChild)", "full_signature": "@Override @SuppressWarnings(\"checkstyle:npathcomplexity\") public boolean setChildAt(int index, N newChild)", "class_method_signature": "NaryTreeNode.setChildAt(int index, N newChild)", "testcase": false, "constructor": false}, {"identifier": "setChildAtWithoutEventFiring", "parameters": "(int index, N newChild)", "modifiers": "@Override protected", "return": "void", "signature": "void setChildAtWithoutEventFiring(int index, N newChild)", "full_signature": "@Override protected void setChildAtWithoutEventFiring(int index, N newChild)", "class_method_signature": "NaryTreeNode.setChildAtWithoutEventFiring(int index, N newChild)", "testcase": false, "constructor": false}, {"identifier": "removeChild", "parameters": "(N child)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean removeChild(N child)", "full_signature": "@Override public final boolean removeChild(N child)", "class_method_signature": "NaryTreeNode.removeChild(N child)", "testcase": false, "constructor": false}, {"identifier": "addChild", "parameters": "(N child)", "modifiers": "public final", "return": "boolean", "signature": "boolean addChild(N child)", "full_signature": "public final boolean addChild(N child)", "class_method_signature": "NaryTreeNode.addChild(N child)", "testcase": false, "constructor": false}, {"identifier": "addChild", "parameters": "(int index, N newChild)", "modifiers": "public final", "return": "boolean", "signature": "boolean addChild(int index, N newChild)", "full_signature": "public final boolean addChild(int index, N newChild)", "class_method_signature": "NaryTreeNode.addChild(int index, N newChild)", "testcase": false, "constructor": false}, {"identifier": "isLeaf", "parameters": "()", "modifiers": "@Pure @Override public final", "return": "boolean", "signature": "boolean isLeaf()", "full_signature": "@Pure @Override public final boolean isLeaf()", "class_method_signature": "NaryTreeNode.isLeaf()", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "(Object[] array)", "modifiers": "@Override public", "return": "void", "signature": "void getChildren(Object[] array)", "full_signature": "@Override public void getChildren(Object[] array)", "class_method_signature": "NaryTreeNode.getChildren(Object[] array)", "testcase": false, "constructor": false}, {"identifier": "getMinHeight", "parameters": "()", "modifiers": "@Pure @Override public", "return": "int", "signature": "int getMinHeight()", "full_signature": "@Pure @Override public int getMinHeight()", "class_method_signature": "NaryTreeNode.getMinHeight()", "testcase": false, "constructor": false}, {"identifier": "getMaxHeight", "parameters": "()", "modifiers": "@Pure @Override public", "return": "int", "signature": "int getMaxHeight()", "full_signature": "@Pure @Override public int getMaxHeight()", "class_method_signature": "NaryTreeNode.getMaxHeight()", "testcase": false, "constructor": false}, {"identifier": "getHeights", "parameters": "(int currentHeight, List<Integer> heights)", "modifiers": "@Override protected", "return": "void", "signature": "void getHeights(int currentHeight, List<Integer> heights)", "full_signature": "@Override protected void getHeights(int currentHeight, List<Integer> heights)", "class_method_signature": "NaryTreeNode.getHeights(int currentHeight, List<Integer> heights)", "testcase": false, "constructor": false}], "file": "core/maths/mathtree/src/main/java/org/arakhne/afc/math/tree/node/NaryTreeNode.java"}, "focal_method": {"identifier": "getChildCount", "parameters": "()", "modifiers": "@Pure @Override public final", "return": "int", "body": "@Pure\n\t@Override\n\tpublic final int getChildCount() {\n\t\treturn (this.children == null) ? 0 : this.children.size();\n\t}", "signature": "int getChildCount()", "full_signature": "@Pure @Override public final int getChildCount()", "class_method_signature": "NaryTreeNode.getChildCount()", "testcase": false, "constructor": false, "invocations": ["size"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}