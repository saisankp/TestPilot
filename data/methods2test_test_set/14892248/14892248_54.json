{"test_class": {"identifier": "MultiFilteredRenderListenerTest", "superclass": "", "interfaces": "", "fields": [], "file": "itext/src/test/java/com/itextpdf/text/pdf/parser/MultiFilteredRenderListenerTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() throws IOException {\n        final PdfReader pdfReader = TestResourceUtils.getResourceAsPdfReader(this, \"test.pdf\");\n\n        final String expectedText[] = new String[] {\n                \"PostScript Compatibility\",\n                \"Because the PostScript language does not support the transparent imaging \\n\" +\n                        \"model, PDF 1.4 consumer applications must have some means for converting the \\n\" +\n                        \"appearance of a document that uses transparency to a purely opaque description \\n\" +\n                        \"for printing on PostScript output devices. Similar techniques can also be used to \\n\" +\n                        \"convert such documents to a form that can be correctly viewed by PDF 1.3 and \\n\" +\n                        \"earlier consumers. \",\n                \"Otherwise, flatten the colors to some assumed device color space with pre-\\n\" +\n                        \"determined calibration. In the generated PostScript output, paint the flattened \\n\" +\n                        \"colors in a CIE-based color space having that calibration. \"};\n\n        final Rectangle[] regions = new Rectangle[] {new Rectangle(90, 605, 220, 581),\n                new Rectangle(80, 578, 450, 486), new Rectangle(103, 196, 460, 143)};\n\n        final RegionTextRenderFilter[] regionFilters = new RegionTextRenderFilter[regions.length];\n        for (int i = 0; i < regions.length; i++)\n            regionFilters[i] = new RegionTextRenderFilter(regions[i]);\n\n\n        MultiFilteredRenderListener listener = new MultiFilteredRenderListener();\n        LocationTextExtractionStrategy[] extractionStrategies = new LocationTextExtractionStrategy[regions.length];\n        for (int i = 0; i < regions.length; i++)\n            extractionStrategies[i] = (LocationTextExtractionStrategy)listener.attachRenderListener(new LocationTextExtractionStrategy(), regionFilters[i]);\n\n        new PdfReaderContentParser(pdfReader).processContent(1, listener);\n\n        for (int i = 0; i < regions.length; i++)\n        {\n            String actualText = extractionStrategies[i].getResultantText() ;\n            Assert.assertEquals(expectedText[i], actualText);\n        }\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "MultiFilteredRenderListenerTest.test()", "testcase": true, "constructor": false, "invocations": ["getResourceAsPdfReader", "attachRenderListener", "processContent", "getResultantText", "assertEquals"]}, "focal_class": {"identifier": "MultiFilteredRenderListener", "superclass": "", "interfaces": "implements RenderListener", "fields": [{"original_string": "private final List<RenderListener> delegates;", "modifier": "private final", "type": "List<RenderListener>", "declarator": "delegates", "var_name": "delegates"}, {"original_string": "private final List<RenderFilter[]> filters;", "modifier": "private final", "type": "List<RenderFilter[]>", "declarator": "filters", "var_name": "filters"}], "methods": [{"identifier": "MultiFilteredRenderListener", "parameters": "()", "modifiers": "public", "return": "", "signature": " MultiFilteredRenderListener()", "full_signature": "public  MultiFilteredRenderListener()", "class_method_signature": "MultiFilteredRenderListener.MultiFilteredRenderListener()", "testcase": false, "constructor": true}, {"identifier": "attachRenderListener", "parameters": "(E delegate, RenderFilter... filterSet)", "modifiers": "public", "return": "E", "signature": "E attachRenderListener(E delegate, RenderFilter... filterSet)", "full_signature": "public E attachRenderListener(E delegate, RenderFilter... filterSet)", "class_method_signature": "MultiFilteredRenderListener.attachRenderListener(E delegate, RenderFilter... filterSet)", "testcase": false, "constructor": false}, {"identifier": "beginTextBlock", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void beginTextBlock()", "full_signature": "public void beginTextBlock()", "class_method_signature": "MultiFilteredRenderListener.beginTextBlock()", "testcase": false, "constructor": false}, {"identifier": "renderText", "parameters": "(TextRenderInfo renderInfo)", "modifiers": "public", "return": "void", "signature": "void renderText(TextRenderInfo renderInfo)", "full_signature": "public void renderText(TextRenderInfo renderInfo)", "class_method_signature": "MultiFilteredRenderListener.renderText(TextRenderInfo renderInfo)", "testcase": false, "constructor": false}, {"identifier": "endTextBlock", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void endTextBlock()", "full_signature": "public void endTextBlock()", "class_method_signature": "MultiFilteredRenderListener.endTextBlock()", "testcase": false, "constructor": false}, {"identifier": "renderImage", "parameters": "(ImageRenderInfo renderInfo)", "modifiers": "public", "return": "void", "signature": "void renderImage(ImageRenderInfo renderInfo)", "full_signature": "public void renderImage(ImageRenderInfo renderInfo)", "class_method_signature": "MultiFilteredRenderListener.renderImage(ImageRenderInfo renderInfo)", "testcase": false, "constructor": false}], "file": "itext/src/main/java/com/itextpdf/text/pdf/parser/MultiFilteredRenderListener.java"}, "focal_method": {"identifier": "attachRenderListener", "parameters": "(E delegate, RenderFilter... filterSet)", "modifiers": "public", "return": "E", "body": "public <E extends RenderListener> E attachRenderListener(E delegate, RenderFilter... filterSet) {\n        delegates.add(delegate);\n        filters.add(filterSet);\n\n        return delegate;\n    }", "signature": "E attachRenderListener(E delegate, RenderFilter... filterSet)", "full_signature": "public E attachRenderListener(E delegate, RenderFilter... filterSet)", "class_method_signature": "MultiFilteredRenderListener.attachRenderListener(E delegate, RenderFilter... filterSet)", "testcase": false, "constructor": false, "invocations": ["add", "add"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}