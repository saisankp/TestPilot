{"test_class": {"identifier": "GroupMemberServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private GroupMemberService groupMemberService;", "modifier": "@Mock\n    private", "type": "GroupMemberService", "declarator": "groupMemberService", "var_name": "groupMemberService"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/service/GroupMemberServiceTest.java"}, "test_case": {"identifier": "validatePermisionUpdateAndDeleteTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validatePermisionUpdateAndDeleteTest() throws Exception {\n        LoginUser user = LoginUser.builder().id(1L).build();\n        UserGroup userGroup = UserGroup.builder().update_user_no(\"name\").build();\n        Errors errors = new BeanPropertyBindingResult(userGroup, \"userGroup\", true, 256);\n        Assert.assertTrue(groupMemberService.validatePermisionUpdateAndDelete(user, userGroup, errors).validate().isValid());\n    }", "signature": "void validatePermisionUpdateAndDeleteTest()", "full_signature": "@Test public void validatePermisionUpdateAndDeleteTest()", "class_method_signature": "GroupMemberServiceTest.validatePermisionUpdateAndDeleteTest()", "testcase": true, "constructor": false, "invocations": ["build", "id", "builder", "build", "update_user_no", "builder", "assertTrue", "isValid", "validate", "validatePermisionUpdateAndDelete"]}, "focal_class": {"identifier": "GroupMemberService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private Consts consts;", "modifier": "@Autowired\n    private", "type": "Consts", "declarator": "consts", "var_name": "consts"}, {"original_string": "@Autowired\n    private UserService userService;", "modifier": "@Autowired\n    private", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "@Autowired\n    private UserGroupDao userGroupDao;", "modifier": "@Autowired\n    private", "type": "UserGroupDao", "declarator": "userGroupDao", "var_name": "userGroupDao"}, {"original_string": "@Autowired\n    private PermissionService permissionService;", "modifier": "@Autowired\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}], "methods": [{"identifier": "validatePermisionAdd", "parameters": "(LoginUser user, UserGroup userGroup, Errors errors)", "modifiers": "public", "return": "ValidatorChain", "signature": "ValidatorChain validatePermisionAdd(LoginUser user, UserGroup userGroup, Errors errors)", "full_signature": "public ValidatorChain validatePermisionAdd(LoginUser user, UserGroup userGroup, Errors errors)", "class_method_signature": "GroupMemberService.validatePermisionAdd(LoginUser user, UserGroup userGroup, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "validatePermisionUpdateAndDelete", "parameters": "(LoginUser user, UserGroup userGroup, Errors errors)", "modifiers": "public", "return": "ValidatorChain", "signature": "ValidatorChain validatePermisionUpdateAndDelete(LoginUser user, UserGroup userGroup, Errors errors)", "full_signature": "public ValidatorChain validatePermisionUpdateAndDelete(LoginUser user, UserGroup userGroup, Errors errors)", "class_method_signature": "GroupMemberService.validatePermisionUpdateAndDelete(LoginUser user, UserGroup userGroup, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "validateUserOptUserPermisionInGroup", "parameters": "(LoginUser user, UserGroup userGroup)", "modifiers": "private", "return": "boolean", "signature": "boolean validateUserOptUserPermisionInGroup(LoginUser user, UserGroup userGroup)", "full_signature": "private boolean validateUserOptUserPermisionInGroup(LoginUser user, UserGroup userGroup)", "class_method_signature": "GroupMemberService.validateUserOptUserPermisionInGroup(LoginUser user, UserGroup userGroup)", "testcase": false, "constructor": false}, {"identifier": "validateUserPermisionCompare", "parameters": "(LoginUser user, UserGroup userGroup)", "modifiers": "private", "return": "boolean", "signature": "boolean validateUserPermisionCompare(LoginUser user, UserGroup userGroup)", "full_signature": "private boolean validateUserPermisionCompare(LoginUser user, UserGroup userGroup)", "class_method_signature": "GroupMemberService.validateUserPermisionCompare(LoginUser user, UserGroup userGroup)", "testcase": false, "constructor": false}, {"identifier": "canOpterateGroupMember", "parameters": "(Long userId, Long currentGroupId)", "modifiers": "public", "return": "boolean", "signature": "boolean canOpterateGroupMember(Long userId, Long currentGroupId)", "full_signature": "public boolean canOpterateGroupMember(Long userId, Long currentGroupId)", "class_method_signature": "GroupMemberService.canOpterateGroupMember(Long userId, Long currentGroupId)", "testcase": false, "constructor": false}, {"identifier": "isUserInGroup", "parameters": "(Long userId, Long groupId)", "modifiers": "public", "return": "boolean", "signature": "boolean isUserInGroup(Long userId, Long groupId)", "full_signature": "public boolean isUserInGroup(Long userId, Long groupId)", "class_method_signature": "GroupMemberService.isUserInGroup(Long userId, Long groupId)", "testcase": false, "constructor": false}, {"identifier": "isRepeatMemberInGroup", "parameters": "(Long currentGroupId, Long childGroupId)", "modifiers": "private", "return": "boolean", "signature": "boolean isRepeatMemberInGroup(Long currentGroupId, Long childGroupId)", "full_signature": "private boolean isRepeatMemberInGroup(Long currentGroupId, Long childGroupId)", "class_method_signature": "GroupMemberService.isRepeatMemberInGroup(Long currentGroupId, Long childGroupId)", "testcase": false, "constructor": false}, {"identifier": "findGroupMemberPageList", "parameters": "(Paging<UserGroup> paging)", "modifiers": "public", "return": "ListResult<MemberView>", "signature": "ListResult<MemberView> findGroupMemberPageList(Paging<UserGroup> paging)", "full_signature": "public ListResult<MemberView> findGroupMemberPageList(Paging<UserGroup> paging)", "class_method_signature": "GroupMemberService.findGroupMemberPageList(Paging<UserGroup> paging)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/service/GroupMemberService.java"}, "focal_method": {"identifier": "validatePermisionUpdateAndDelete", "parameters": "(LoginUser user, UserGroup userGroup, Errors errors)", "modifiers": "public", "return": "ValidatorChain", "body": "public ValidatorChain validatePermisionUpdateAndDelete(LoginUser user, UserGroup userGroup, Errors errors) throws SQLException {\n        return ValidatorChain.newInstance().controllerValidate(errors)\n                .addAssert(() -> this.validateUserOptUserPermisionInGroup(user, userGroup), \"\u4f60\u6ca1\u6709\u5f53\u524dDAS Team\u7684\u7ec4\u5458\u64cd\u4f5c\u6743\u9650.\")\n                .addAssert(() -> this.validateUserPermisionCompare(user, userGroup), \"\u4f60\u6240\u6388\u4e88\u7684\u6743\u9650\u5927\u4e8e\u4f60\u6240\u62e5\u6709\u7684\u6743\u9650.\");\n    }", "signature": "ValidatorChain validatePermisionUpdateAndDelete(LoginUser user, UserGroup userGroup, Errors errors)", "full_signature": "public ValidatorChain validatePermisionUpdateAndDelete(LoginUser user, UserGroup userGroup, Errors errors)", "class_method_signature": "GroupMemberService.validatePermisionUpdateAndDelete(LoginUser user, UserGroup userGroup, Errors errors)", "testcase": false, "constructor": false, "invocations": ["addAssert", "addAssert", "controllerValidate", "newInstance", "validateUserOptUserPermisionInGroup", "validateUserPermisionCompare"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}