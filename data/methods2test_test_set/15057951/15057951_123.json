{"test_class": {"identifier": "TypeDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Type<?> type = new IntegerType();", "modifier": "private final", "type": "Type<?>", "declarator": "type = new IntegerType()", "var_name": "type"}], "file": "smartparam-engine/src/test/java/org/smartparam/engine/core/type/decode/TypeDecoderTest.java"}, "test_case": {"identifier": "testDecode__illegalArgument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecode__illegalArgument() {\n\n        // przypadki testowe, ktore nie moga zostac zdekodowane do IntegerHoldera\n        String[] illegals = {\"1.1\", \"9aa\", \".\"};\n\n        // wykonanie testow, oczekujemy wyjatku\n        for (String text : illegals) {\n            try {\n                TypeDecoder.decode(type, text);\n                fail();\n            } catch (TypeDecodingException e) {\n                // success\n            }\n        }\n    }", "signature": "void testDecode__illegalArgument()", "full_signature": "@Test public void testDecode__illegalArgument()", "class_method_signature": "TypeDecoderTest.testDecode__illegalArgument()", "testcase": true, "constructor": false, "invocations": ["decode", "fail"]}, "focal_class": {"identifier": "TypeDecoder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "TypeDecoder", "parameters": "()", "modifiers": "private", "return": "", "signature": " TypeDecoder()", "full_signature": "private  TypeDecoder()", "class_method_signature": "TypeDecoder.TypeDecoder()", "testcase": false, "constructor": true}, {"identifier": "decode", "parameters": "(Type<?> type, String text)", "modifiers": "public static", "return": "ValueHolder", "signature": "ValueHolder decode(Type<?> type, String text)", "full_signature": "public static ValueHolder decode(Type<?> type, String text)", "class_method_signature": "TypeDecoder.decode(Type<?> type, String text)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Type<?> type, Object obj)", "modifiers": "public static", "return": "ValueHolder", "signature": "ValueHolder convert(Type<?> type, Object obj)", "full_signature": "public static ValueHolder convert(Type<?> type, Object obj)", "class_method_signature": "TypeDecoder.convert(Type<?> type, Object obj)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Type<?> type, Object[] array)", "modifiers": "public static", "return": "ValueHolder[]", "signature": "ValueHolder[] convert(Type<?> type, Object[] array)", "full_signature": "public static ValueHolder[] convert(Type<?> type, Object[] array)", "class_method_signature": "TypeDecoder.convert(Type<?> type, Object[] array)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Type<?> type, Collection<?> coll)", "modifiers": "public static", "return": "ValueHolder[]", "signature": "ValueHolder[] convert(Type<?> type, Collection<?> coll)", "full_signature": "public static ValueHolder[] convert(Type<?> type, Collection<?> coll)", "class_method_signature": "TypeDecoder.convert(Type<?> type, Collection<?> coll)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/core/type/decode/TypeDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(Type<?> type, String text)", "modifiers": "public static", "return": "ValueHolder", "body": "public static ValueHolder decode(Type<?> type, String text) {\n        try {\n            return type.decode(text != null ? text.trim() : null);\n        } catch (RuntimeException exception) {\n            throw new TypeDecodingException(exception, text, type);\n        }\n    }", "signature": "ValueHolder decode(Type<?> type, String text)", "full_signature": "public static ValueHolder decode(Type<?> type, String text)", "class_method_signature": "TypeDecoder.decode(Type<?> type, String text)", "testcase": false, "constructor": false, "invocations": ["decode", "trim"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}