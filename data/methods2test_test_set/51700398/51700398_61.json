{"test_class": {"identifier": "AdminServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate PairService pairService;", "modifier": "@Autowired\n\tprivate", "type": "PairService", "declarator": "pairService", "var_name": "pairService"}, {"original_string": "@Autowired\n\tprivate RateService rateService;", "modifier": "@Autowired\n\tprivate", "type": "RateService", "declarator": "rateService", "var_name": "rateService"}, {"original_string": "@MockBean\n\tprivate LookupService lookupService;", "modifier": "@MockBean\n\tprivate", "type": "LookupService", "declarator": "lookupService", "var_name": "lookupService"}, {"original_string": "@MockBean\n\tprivate RateProviderService rateProviderService;", "modifier": "@MockBean\n\tprivate", "type": "RateProviderService", "declarator": "rateProviderService", "var_name": "rateProviderService"}, {"original_string": "@Autowired\n\tprivate AdminService adminService;", "modifier": "@Autowired\n\tprivate", "type": "AdminService", "declarator": "adminService", "var_name": "adminService"}, {"original_string": "@Autowired\n\tprivate HistoricalRateRepository hRateRepo;", "modifier": "@Autowired\n\tprivate", "type": "HistoricalRateRepository", "declarator": "hRateRepo", "var_name": "hRateRepo"}, {"original_string": "@Mock\n\tprivate HistoricalRateProvider hrp;", "modifier": "@Mock\n\tprivate", "type": "HistoricalRateProvider", "declarator": "hrp", "var_name": "hrp"}, {"original_string": "@Mock\n\tprivate LatestRateProvider lrp;", "modifier": "@Mock\n\tprivate", "type": "LatestRateProvider", "declarator": "lrp", "var_name": "lrp"}], "file": "trading-common/src/test/java/fr/ymanvieu/trading/common/admin/AdminServiceTest.java"}, "test_case": {"identifier": "testDelete", "parameters": "()", "modifiers": "@Sql(\"/sql/insert_data.sql\") @Test public", "return": "void", "body": "@Sql(\"/sql/insert_data.sql\")\n\t@Test\n\tpublic void testDelete() throws Exception {\n\t\t// given\n\t\tString providerCode = \"RR.L\";\n\n\t\t// when\n\t\tadminService.delete(providerCode, \"YAHOO\");\n\n\t\t// then\n\t\tassertThat(pairService.getForCodeAndProvider(providerCode, \"YAHOO\")).isNull();\n\t}", "signature": "void testDelete()", "full_signature": "@Sql(\"/sql/insert_data.sql\") @Test public void testDelete()", "class_method_signature": "AdminServiceTest.testDelete()", "testcase": true, "constructor": false, "invocations": ["delete", "isNull", "assertThat", "getForCodeAndProvider"]}, "focal_class": {"identifier": "AdminService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate SymbolService symbolService;", "modifier": "@Autowired\n\tprivate", "type": "SymbolService", "declarator": "symbolService", "var_name": "symbolService"}, {"original_string": "@Autowired\n\tprivate PairService pairService;", "modifier": "@Autowired\n\tprivate", "type": "PairService", "declarator": "pairService", "var_name": "pairService"}, {"original_string": "@Autowired\n\tprivate RateService rateService;", "modifier": "@Autowired\n\tprivate", "type": "RateService", "declarator": "rateService", "var_name": "rateService"}, {"original_string": "@Autowired\n\tprivate RateProviderService rateProviderService;", "modifier": "@Autowired\n\tprivate", "type": "RateProviderService", "declarator": "rateProviderService", "var_name": "rateProviderService"}, {"original_string": "@Autowired\n\tprivate LookupService lookupService;", "modifier": "@Autowired\n\tprivate", "type": "LookupService", "declarator": "lookupService", "var_name": "lookupService"}], "methods": [{"identifier": "add", "parameters": "(String code, String provider)", "modifiers": "public", "return": "SymbolInfo", "signature": "SymbolInfo add(String code, String provider)", "full_signature": "public SymbolInfo add(String code, String provider)", "class_method_signature": "AdminService.add(String code, String provider)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String code, String provider)", "modifiers": "public", "return": "void", "signature": "void delete(String code, String provider)", "full_signature": "public void delete(String code, String provider)", "class_method_signature": "AdminService.delete(String code, String provider)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(String symbolOrName)", "modifiers": "public", "return": "SearchResult", "signature": "SearchResult search(String symbolOrName)", "full_signature": "public SearchResult search(String symbolOrName)", "class_method_signature": "AdminService.search(String symbolOrName)", "testcase": false, "constructor": false}, {"identifier": "removeDuplicates", "parameters": "(List<LookupInfo> availableSymbols, List<UpdatedPair> existingSymbols)", "modifiers": "private", "return": "void", "signature": "void removeDuplicates(List<LookupInfo> availableSymbols, List<UpdatedPair> existingSymbols)", "full_signature": "private void removeDuplicates(List<LookupInfo> availableSymbols, List<UpdatedPair> existingSymbols)", "class_method_signature": "AdminService.removeDuplicates(List<LookupInfo> availableSymbols, List<UpdatedPair> existingSymbols)", "testcase": false, "constructor": false}], "file": "trading-common/src/main/java/fr/ymanvieu/trading/common/admin/AdminService.java"}, "focal_method": {"identifier": "delete", "parameters": "(String code, String provider)", "modifiers": "public", "return": "void", "body": "public void delete(String code, String provider) {\n\t\tStopwatch sw = Stopwatch.createStarted();\n\n\t\tpairService.remove(code, provider);\n\n\t\tlog.info(\"Pair [symbol: {}, provider: {}] deleted in: {}\", code, provider, sw);\n\t}", "signature": "void delete(String code, String provider)", "full_signature": "public void delete(String code, String provider)", "class_method_signature": "AdminService.delete(String code, String provider)", "testcase": false, "constructor": false, "invocations": ["createStarted", "remove", "info"]}, "repository": {"repo_id": 51700398, "url": "https://github.com/ymanvieu/trading", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 988, "license": "licensed"}}