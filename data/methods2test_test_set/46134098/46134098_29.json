{"test_class": {"identifier": "XLIFFResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File INPUT_FILE = new File(\"src/test/resource/resfilter/xliff/input.xlf\");", "modifier": "private static final", "type": "File", "declarator": "INPUT_FILE = new File(\"src/test/resource/resfilter/xliff/input.xlf\")", "var_name": "INPUT_FILE"}, {"original_string": "private static final File EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/xliff/write-output.xlf\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/xliff/write-output.xlf\")", "var_name": "EXPECTED_WRITE_FILE"}, {"original_string": "private static final File MERGE_INPUT_1_FILE = new File(\"src/test/resource/resfilter/xliff/merge-input-1.xlf\");", "modifier": "private static final", "type": "File", "declarator": "MERGE_INPUT_1_FILE = new File(\"src/test/resource/resfilter/xliff/merge-input-1.xlf\")", "var_name": "MERGE_INPUT_1_FILE"}, {"original_string": "private static final File MERGE_INPUT_2_FILE = new File(\"src/test/resource/resfilter/xliff/merge-input-2.xlf\");", "modifier": "private static final", "type": "File", "declarator": "MERGE_INPUT_2_FILE = new File(\"src/test/resource/resfilter/xliff/merge-input-2.xlf\")", "var_name": "MERGE_INPUT_2_FILE"}, {"original_string": "@SuppressWarnings(\"unused\")\n    private static final File EXPECTED_MERGE_1_FILE = new File(\"src/test/resource/resfilter/xliff/merge-output-1.xlf\");", "modifier": "@SuppressWarnings(\"unused\")\n    private static final", "type": "File", "declarator": "EXPECTED_MERGE_1_FILE = new File(\"src/test/resource/resfilter/xliff/merge-output-1.xlf\")", "var_name": "EXPECTED_MERGE_1_FILE"}, {"original_string": "@SuppressWarnings(\"unused\")\n    private static final File EXPECTED_MERGE_2_FILE = new File(\"src/test/resource/resfilter/xliff/merge-output-2.xlf\");", "modifier": "@SuppressWarnings(\"unused\")\n    private static final", "type": "File", "declarator": "EXPECTED_MERGE_2_FILE = new File(\"src/test/resource/resfilter/xliff/merge-output-2.xlf\")", "var_name": "EXPECTED_MERGE_2_FILE"}, {"original_string": "private static final Collection<ResourceString> EXPECTED_INPUT_RES_LIST;", "modifier": "private static final", "type": "Collection<ResourceString>", "declarator": "EXPECTED_INPUT_RES_LIST", "var_name": "EXPECTED_INPUT_RES_LIST"}, {"original_string": "private static LanguageBundle WRITE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "WRITE_BUNDLE", "var_name": "WRITE_BUNDLE"}, {"original_string": "private static LanguageBundle MERGE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "MERGE_BUNDLE", "var_name": "MERGE_BUNDLE"}, {"original_string": "private static final XLIFFResource res = new XLIFFResource();", "modifier": "private static final", "type": "XLIFFResource", "declarator": "res = new XLIFFResource()", "var_name": "res"}], "file": "gp-res-filter/src/test/java/com/ibm/g11n/pipeline/resfilter/impl/XLIFFResourceTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse() throws IOException, ResourceFilterException {\n        assertTrue(\"The input test file <\" + INPUT_FILE + \"> does not exist.\", INPUT_FILE.exists());\n\n        try (InputStream is = new FileInputStream(INPUT_FILE)) {\n            LanguageBundle bundle = res.parse(is, null);\n            List<ResourceString> resStrList = new ArrayList<>(bundle.getResourceStrings());\n            Collections.sort(resStrList, new ResourceStringComparator());\n            assertEquals(\"ResourceStrings did not match.\", EXPECTED_INPUT_RES_LIST, resStrList);\n        }\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "XLIFFResourceTest.testParse()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "exists", "parse", "getResourceStrings", "sort", "assertEquals"]}, "focal_class": {"identifier": "XLIFFResource", "superclass": "extends ResourceFilter", "interfaces": "", "fields": [{"original_string": "private static final String VERSION_STRING = \"version\";", "modifier": "private static final", "type": "String", "declarator": "VERSION_STRING = \"version\"", "var_name": "VERSION_STRING"}, {"original_string": "private static final String VERSION_NUMBER_STRING = \"1.2\";", "modifier": "private static final", "type": "String", "declarator": "VERSION_NUMBER_STRING = \"1.2\"", "var_name": "VERSION_NUMBER_STRING"}, {"original_string": "private static final String XMLNS_STRING = \"xmlns:xsi\";", "modifier": "private static final", "type": "String", "declarator": "XMLNS_STRING = \"xmlns:xsi\"", "var_name": "XMLNS_STRING"}, {"original_string": "private static final String XMLNS_VALUE_STRING = \"http://www.w3.org/2001/XMLSchema-instance\";", "modifier": "private static final", "type": "String", "declarator": "XMLNS_VALUE_STRING = \"http://www.w3.org/2001/XMLSchema-instance\"", "var_name": "XMLNS_VALUE_STRING"}, {"original_string": "private static final String XSI_STRING = \"xsi:schemaLocation\";", "modifier": "private static final", "type": "String", "declarator": "XSI_STRING = \"xsi:schemaLocation\"", "var_name": "XSI_STRING"}, {"original_string": "private static final String XSI_VALUE_STRING = \"urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-strict.xsd\";", "modifier": "private static final", "type": "String", "declarator": "XSI_VALUE_STRING = \"urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-strict.xsd\"", "var_name": "XSI_VALUE_STRING"}, {"original_string": "private static final String UNIT_STRING = \"trans-unit\";", "modifier": "private static final", "type": "String", "declarator": "UNIT_STRING = \"trans-unit\"", "var_name": "UNIT_STRING"}, {"original_string": "private static final String ID_STRING = \"id\";", "modifier": "private static final", "type": "String", "declarator": "ID_STRING = \"id\"", "var_name": "ID_STRING"}, {"original_string": "private static final String SOURCE_STRING = \"source\";", "modifier": "private static final", "type": "String", "declarator": "SOURCE_STRING = \"source\"", "var_name": "SOURCE_STRING"}, {"original_string": "private static final String TARGET_STRING = \"target\";", "modifier": "private static final", "type": "String", "declarator": "TARGET_STRING = \"target\"", "var_name": "TARGET_STRING"}, {"original_string": "private static final String XLIFF_STRING = \"xliff\";", "modifier": "private static final", "type": "String", "declarator": "XLIFF_STRING = \"xliff\"", "var_name": "XLIFF_STRING"}, {"original_string": "private static final String FILE_STRING = \"file\";", "modifier": "private static final", "type": "String", "declarator": "FILE_STRING = \"file\"", "var_name": "FILE_STRING"}, {"original_string": "private static final String ORIGINAL_STRING = \"original\";", "modifier": "private static final", "type": "String", "declarator": "ORIGINAL_STRING = \"original\"", "var_name": "ORIGINAL_STRING"}, {"original_string": "private static final String GLOBAL_STRING = \"g11n-pipeline\";", "modifier": "private static final", "type": "String", "declarator": "GLOBAL_STRING = \"g11n-pipeline\"", "var_name": "GLOBAL_STRING"}, {"original_string": "private static final String DATATYPE_STRING = \"datatype\";", "modifier": "private static final", "type": "String", "declarator": "DATATYPE_STRING = \"datatype\"", "var_name": "DATATYPE_STRING"}, {"original_string": "private static final String PLAINTEXT_STRING = \"plaintext\";", "modifier": "private static final", "type": "String", "declarator": "PLAINTEXT_STRING = \"plaintext\"", "var_name": "PLAINTEXT_STRING"}, {"original_string": "private static final String SOURCE_LANGUAGE_STRING = \"source-language\";", "modifier": "private static final", "type": "String", "declarator": "SOURCE_LANGUAGE_STRING = \"source-language\"", "var_name": "SOURCE_LANGUAGE_STRING"}, {"original_string": "private static final String ENGLISH = \"en\";", "modifier": "private static final", "type": "String", "declarator": "ENGLISH = \"en\"", "var_name": "ENGLISH"}, {"original_string": "private static final String TARGET_LANGUAGE_STRING = \"target-language\";", "modifier": "private static final", "type": "String", "declarator": "TARGET_LANGUAGE_STRING = \"target-language\"", "var_name": "TARGET_LANGUAGE_STRING"}, {"original_string": "private static final String BODY_STRING = \"body\";", "modifier": "private static final", "type": "String", "declarator": "BODY_STRING = \"body\"", "var_name": "BODY_STRING"}], "methods": [{"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "XLIFFResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "collectResourceStrings", "parameters": "(NodeList nodeList, LanguageBundleBuilder bb, int version, String key)", "modifiers": "private", "return": "void", "signature": "void collectResourceStrings(NodeList nodeList, LanguageBundleBuilder bb, int version, String key)", "full_signature": "private void collectResourceStrings(NodeList nodeList, LanguageBundleBuilder bb, int version, String key)", "class_method_signature": "XLIFFResource.collectResourceStrings(NodeList nodeList, LanguageBundleBuilder bb, int version, String key)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "XLIFFResource.write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override @Deprecated /* * This method is incomplete and may not produce the expected output. * * (non-Javadoc) * @see com.ibm.g11n.pipeline.resfilter.ResourceFilter#merge(java.io.InputStream, java.io.OutputStream, java.lang.String, java.util.Collection) */ public", "return": "void", "signature": "void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override @Deprecated /* * This method is incomplete and may not produce the expected output. * * (non-Javadoc) * @see com.ibm.g11n.pipeline.resfilter.ResourceFilter#merge(java.io.InputStream, java.io.OutputStream, java.lang.String, java.util.Collection) */ public void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "XLIFFResource.merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}], "file": "gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/XLIFFResource.java"}, "focal_method": {"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "body": "@Override\n    public LanguageBundle parse(InputStream inStream, FilterOptions options)\n            throws IOException, ResourceFilterException {\n\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder builder = null;\n        try {\n            builder = factory.newDocumentBuilder();\n        } catch (ParserConfigurationException e) {\n            // runtime problem\n            throw new RuntimeException(e);\n        }\n\n        Document document = null;\n        try {\n            document = builder.parse(inStream);\n        } catch (SAXException e) {\n            throw new IllegalResourceFormatException(e);\n        }\n\n        Element elem = document.getDocumentElement();\n        NodeList nodeList = elem.getChildNodes();\n\n        int version = (int) Float.parseFloat(elem.getAttribute(VERSION_STRING));\n\n        LanguageBundleBuilder bb = new LanguageBundleBuilder(true);\n        collectResourceStrings(nodeList, bb, version, \"\");\n        return bb.build();\n    }", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "XLIFFResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false, "invocations": ["newInstance", "newDocumentBuilder", "parse", "getDocumentElement", "getChildNodes", "parseFloat", "getAttribute", "collectResourceStrings", "build"]}, "repository": {"repo_id": 46134098, "url": "https://github.com/IBM-Cloud/gp-java-tools", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 9, "size": 6216, "license": "licensed"}}