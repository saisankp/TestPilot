{"test_class": {"identifier": "TestConnectionPartition", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BoneCP mockPool = createNiceMock(BoneCP.class);", "modifier": "private", "type": "BoneCP", "declarator": "mockPool = createNiceMock(BoneCP.class)", "var_name": "mockPool"}, {"original_string": "private Logger mockLogger;", "modifier": "private", "type": "Logger", "declarator": "mockLogger", "var_name": "mockLogger"}, {"original_string": "private BoneCPConfig mockConfig;", "modifier": "private", "type": "BoneCPConfig", "declarator": "mockConfig", "var_name": "mockConfig"}, {"original_string": "private ConnectionPartition testClass;", "modifier": "private", "type": "ConnectionPartition", "declarator": "testClass", "var_name": "testClass"}], "file": "bonecp/src/test/java/com/jolbox/bonecp/TestConnectionPartition.java"}, "test_case": {"identifier": "testFinalizer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFinalizer() throws SQLException, InterruptedException{\n\t\tConnectionHandle mockConnectionHandle = createNiceMock(ConnectionHandle.class); \n\t\texpect(mockConnectionHandle.isInReplayMode()).andReturn(true).anyTimes();\n\t\tConnection mockConnection = createNiceMock(Connection.class);\n\t\tConnection connection = MemorizeTransactionProxy.memorize(mockConnection, mockConnectionHandle);\n\t\texpect(mockConnectionHandle.getInternalConnection()).andReturn(connection).anyTimes();\n\t\tmockConnection.close();\n\t\texpectLastCall().once();\n\t\treset(this.mockPool, this.mockConfig);\n\t\tMap<Connection, Reference<ConnectionHandle>> refs = new HashMap<Connection, Reference<ConnectionHandle>>();\n\t\texpect(this.mockPool.getFinalizableRefs()).andReturn(refs).anyTimes();\n\t\tFinalizableReferenceQueue finalizableRefQueue = new FinalizableReferenceQueue();\n\t\texpect(this.mockPool.getFinalizableRefQueue()).andReturn(finalizableRefQueue).anyTimes();\n\t\texpect(mockConnectionHandle.getPool()).andReturn(this.mockPool).anyTimes();\n\t\texpect(this.mockPool.getConfig()).andReturn(mockConfig).anyTimes();\n\t\texpect(mockConfig.getPoolName()).andReturn(\"foo\").once();\n\t\tmakeThreadSafe(this.mockPool, true);\n\n\t\treplay(mockConnection, mockConnectionHandle, this.mockPool, mockConfig);\n\n\n\t\t\ttestClass.trackConnectionFinalizer(mockConnectionHandle);\n\t\t\treset(mockConnectionHandle);\n\n\t\t\tmockConnectionHandle = null; // prompt GC to kick in\n\t\t\tfor (int i=0; i < 500; i++){\n\t\t\t\tSystem.gc();System.gc();System.gc();\n\t\t\t\tThread.sleep(20);\n\t\t\t\ttry{\n\t\t\t\t\tverify(mockConnection);\n\t\t\t\t\tbreak; // we succeeded\n\t\t\t\t} catch (Throwable t){\n\t\t\t\t\t//\t\t\t\tt.printStackTrace();\n\t\t\t\t\t// do nothing, try again\n\t\t\t\t\tThread.sleep(20);\n\t\t\t\t}\n\t\t\t}\n\t}", "signature": "void testFinalizer()", "full_signature": "@Test public void testFinalizer()", "class_method_signature": "TestConnectionPartition.testFinalizer()", "testcase": true, "constructor": false, "invocations": ["createNiceMock", "anyTimes", "andReturn", "expect", "isInReplayMode", "createNiceMock", "memorize", "anyTimes", "andReturn", "expect", "getInternalConnection", "close", "once", "expectLastCall", "reset", "anyTimes", "andReturn", "expect", "getFinalizableRefs", "anyTimes", "andReturn", "expect", "getFinalizableRefQueue", "anyTimes", "andReturn", "expect", "getPool", "anyTimes", "andReturn", "expect", "getConfig", "once", "andReturn", "expect", "getPoolName", "makeThreadSafe", "replay", "trackConnectionFinalizer", "reset", "gc", "gc", "gc", "sleep", "verify", "sleep"]}, "focal_class": {"identifier": "ConnectionPartition", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -7864443421028454573L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -7864443421028454573L", "var_name": "serialVersionUID"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(ConnectionPartition.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ConnectionPartition.class)", "var_name": "logger"}, {"original_string": "private BlockingQueue<ConnectionHandle> freeConnections;", "modifier": "private", "type": "BlockingQueue<ConnectionHandle>", "declarator": "freeConnections", "var_name": "freeConnections"}, {"original_string": "private final int acquireIncrement;", "modifier": "private final", "type": "int", "declarator": "acquireIncrement", "var_name": "acquireIncrement"}, {"original_string": "private final int minConnections;", "modifier": "private final", "type": "int", "declarator": "minConnections", "var_name": "minConnections"}, {"original_string": "private final int maxConnections;", "modifier": "private final", "type": "int", "declarator": "maxConnections", "var_name": "maxConnections"}, {"original_string": "protected ReentrantReadWriteLock statsLock = new ReentrantReadWriteLock();", "modifier": "protected", "type": "ReentrantReadWriteLock", "declarator": "statsLock = new ReentrantReadWriteLock()", "var_name": "statsLock"}, {"original_string": "private int createdConnections=0;", "modifier": "private", "type": "int", "declarator": "createdConnections=0", "var_name": "createdConnections"}, {"original_string": "private final String url;", "modifier": "private final", "type": "String", "declarator": "url", "var_name": "url"}, {"original_string": "private final String username;", "modifier": "private final", "type": "String", "declarator": "username", "var_name": "username"}, {"original_string": "private final String password;", "modifier": "private final", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "private volatile boolean unableToCreateMoreTransactions=false;", "modifier": "private volatile", "type": "boolean", "declarator": "unableToCreateMoreTransactions=false", "var_name": "unableToCreateMoreTransactions"}, {"original_string": "private boolean disableTracking;", "modifier": "private", "type": "boolean", "declarator": "disableTracking", "var_name": "disableTracking"}, {"original_string": "private BlockingQueue<Object> poolWatchThreadSignalQueue = new ArrayBlockingQueue<Object>(1);", "modifier": "private", "type": "BlockingQueue<Object>", "declarator": "poolWatchThreadSignalQueue = new ArrayBlockingQueue<Object>(1)", "var_name": "poolWatchThreadSignalQueue"}, {"original_string": "private long queryExecuteTimeLimitInNanoSeconds;", "modifier": "private", "type": "long", "declarator": "queryExecuteTimeLimitInNanoSeconds", "var_name": "queryExecuteTimeLimitInNanoSeconds"}, {"original_string": "private String poolName;", "modifier": "private", "type": "String", "declarator": "poolName", "var_name": "poolName"}, {"original_string": "protected BoneCP pool;", "modifier": "protected", "type": "BoneCP", "declarator": "pool", "var_name": "pool"}], "methods": [{"identifier": "getPoolWatchThreadSignalQueue", "parameters": "()", "modifiers": "protected", "return": "BlockingQueue<Object>", "signature": "BlockingQueue<Object> getPoolWatchThreadSignalQueue()", "full_signature": "protected BlockingQueue<Object> getPoolWatchThreadSignalQueue()", "class_method_signature": "ConnectionPartition.getPoolWatchThreadSignalQueue()", "testcase": false, "constructor": false}, {"identifier": "updateCreatedConnections", "parameters": "(int increment)", "modifiers": "protected", "return": "void", "signature": "void updateCreatedConnections(int increment)", "full_signature": "protected void updateCreatedConnections(int increment)", "class_method_signature": "ConnectionPartition.updateCreatedConnections(int increment)", "testcase": false, "constructor": false}, {"identifier": "addFreeConnection", "parameters": "(ConnectionHandle connectionHandle)", "modifiers": "protected", "return": "void", "signature": "void addFreeConnection(ConnectionHandle connectionHandle)", "full_signature": "protected void addFreeConnection(ConnectionHandle connectionHandle)", "class_method_signature": "ConnectionPartition.addFreeConnection(ConnectionHandle connectionHandle)", "testcase": false, "constructor": false}, {"identifier": "trackConnectionFinalizer", "parameters": "(ConnectionHandle connectionHandle)", "modifiers": "protected", "return": "void", "signature": "void trackConnectionFinalizer(ConnectionHandle connectionHandle)", "full_signature": "protected void trackConnectionFinalizer(ConnectionHandle connectionHandle)", "class_method_signature": "ConnectionPartition.trackConnectionFinalizer(ConnectionHandle connectionHandle)", "testcase": false, "constructor": false}, {"identifier": "getFreeConnections", "parameters": "()", "modifiers": "protected", "return": "BlockingQueue<ConnectionHandle>", "signature": "BlockingQueue<ConnectionHandle> getFreeConnections()", "full_signature": "protected BlockingQueue<ConnectionHandle> getFreeConnections()", "class_method_signature": "ConnectionPartition.getFreeConnections()", "testcase": false, "constructor": false}, {"identifier": "setFreeConnections", "parameters": "(BlockingQueue<ConnectionHandle> freeConnections)", "modifiers": "protected", "return": "void", "signature": "void setFreeConnections(BlockingQueue<ConnectionHandle> freeConnections)", "full_signature": "protected void setFreeConnections(BlockingQueue<ConnectionHandle> freeConnections)", "class_method_signature": "ConnectionPartition.setFreeConnections(BlockingQueue<ConnectionHandle> freeConnections)", "testcase": false, "constructor": false}, {"identifier": "ConnectionPartition", "parameters": "(BoneCP pool)", "modifiers": "public", "return": "", "signature": " ConnectionPartition(BoneCP pool)", "full_signature": "public  ConnectionPartition(BoneCP pool)", "class_method_signature": "ConnectionPartition.ConnectionPartition(BoneCP pool)", "testcase": false, "constructor": true}, {"identifier": "getAcquireIncrement", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int getAcquireIncrement()", "full_signature": "protected int getAcquireIncrement()", "class_method_signature": "ConnectionPartition.getAcquireIncrement()", "testcase": false, "constructor": false}, {"identifier": "getMinConnections", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int getMinConnections()", "full_signature": "protected int getMinConnections()", "class_method_signature": "ConnectionPartition.getMinConnections()", "testcase": false, "constructor": false}, {"identifier": "getMaxConnections", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int getMaxConnections()", "full_signature": "protected int getMaxConnections()", "class_method_signature": "ConnectionPartition.getMaxConnections()", "testcase": false, "constructor": false}, {"identifier": "getCreatedConnections", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int getCreatedConnections()", "full_signature": "protected int getCreatedConnections()", "class_method_signature": "ConnectionPartition.getCreatedConnections()", "testcase": false, "constructor": false}, {"identifier": "getUrl", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getUrl()", "full_signature": "protected String getUrl()", "class_method_signature": "ConnectionPartition.getUrl()", "testcase": false, "constructor": false}, {"identifier": "getUsername", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getUsername()", "full_signature": "protected String getUsername()", "class_method_signature": "ConnectionPartition.getUsername()", "testcase": false, "constructor": false}, {"identifier": "getPassword", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getPassword()", "full_signature": "protected String getPassword()", "class_method_signature": "ConnectionPartition.getPassword()", "testcase": false, "constructor": false}, {"identifier": "isUnableToCreateMoreTransactions", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isUnableToCreateMoreTransactions()", "full_signature": "protected boolean isUnableToCreateMoreTransactions()", "class_method_signature": "ConnectionPartition.isUnableToCreateMoreTransactions()", "testcase": false, "constructor": false}, {"identifier": "setUnableToCreateMoreTransactions", "parameters": "(boolean unableToCreateMoreTransactions)", "modifiers": "protected", "return": "void", "signature": "void setUnableToCreateMoreTransactions(boolean unableToCreateMoreTransactions)", "full_signature": "protected void setUnableToCreateMoreTransactions(boolean unableToCreateMoreTransactions)", "class_method_signature": "ConnectionPartition.setUnableToCreateMoreTransactions(boolean unableToCreateMoreTransactions)", "testcase": false, "constructor": false}, {"identifier": "getAvailableConnections", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int getAvailableConnections()", "full_signature": "protected int getAvailableConnections()", "class_method_signature": "ConnectionPartition.getAvailableConnections()", "testcase": false, "constructor": false}, {"identifier": "getRemainingCapacity", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRemainingCapacity()", "full_signature": "public int getRemainingCapacity()", "class_method_signature": "ConnectionPartition.getRemainingCapacity()", "testcase": false, "constructor": false}, {"identifier": "getQueryExecuteTimeLimitinNanoSeconds", "parameters": "()", "modifiers": "protected", "return": "long", "signature": "long getQueryExecuteTimeLimitinNanoSeconds()", "full_signature": "protected long getQueryExecuteTimeLimitinNanoSeconds()", "class_method_signature": "ConnectionPartition.getQueryExecuteTimeLimitinNanoSeconds()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ConnectionPartition.toString()", "testcase": false, "constructor": false}], "file": "bonecp/src/main/java/com/jolbox/bonecp/ConnectionPartition.java"}, "focal_method": {"identifier": "trackConnectionFinalizer", "parameters": "(ConnectionHandle connectionHandle)", "modifiers": "protected", "return": "void", "body": "protected void trackConnectionFinalizer(ConnectionHandle connectionHandle) {\n\t\tif (!this.disableTracking){\n\t\t//\tassert !connectionHandle.getPool().getFinalizableRefs().containsKey(connectionHandle) : \"Already tracking this handle\";\n\t\t\tConnection con = connectionHandle.getInternalConnection();\n\t\t\tif (con != null && con instanceof Proxy && Proxy.getInvocationHandler(con) instanceof MemorizeTransactionProxy){\n\t\t\t\ttry {\n\t\t\t\t\t// if this is a proxy, get the correct target so that when we call close we're actually calling close on the database\n\t\t\t\t\t// handle and not a proxy-based close.\n\t\t\t\t\tcon = (Connection) Proxy.getInvocationHandler(con).invoke(con, ConnectionHandle.class.getMethod(\"getProxyTarget\"), null);\n\t\t\t\t} catch (Throwable t) {\n\t\t\t\t\tlogger.error(\"Error while attempting to track internal db connection\", t); // should never happen\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal Connection internalDBConnection = con;\n\t\t\tfinal BoneCP pool = connectionHandle.getPool();\n\t\t\tconnectionHandle.getPool().getFinalizableRefs().put(internalDBConnection, new FinalizableWeakReference<ConnectionHandle>(connectionHandle, connectionHandle.getPool().getFinalizableRefQueue()) {\n\t\t\t\t@SuppressWarnings(\"synthetic-access\")\n\t\t\t\tpublic void finalizeReferent() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpool.getFinalizableRefs().remove(internalDBConnection);\n\t\t\t\t\t\tif (internalDBConnection != null && !internalDBConnection.isClosed()){ // safety!\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlogger.warn(\"BoneCP detected an unclosed connection \"+ConnectionPartition.this.poolName + \"and will now attempt to close it for you. \" +\n\t\t\t\t\t\t\t\"You should be closing this connection in your application - enable connectionWatch for additional debugging assistance or set disableConnectionTracking to true to disable this feature entirely.\");\n\t\t\t\t\t\t\tinternalDBConnection.close();\n\t\t\t\t\t\t\tupdateCreatedConnections(-1);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Throwable t) {\n\t\t\t\t\t\tlogger.error(\"Error while closing off internal db connection\", t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}", "signature": "void trackConnectionFinalizer(ConnectionHandle connectionHandle)", "full_signature": "protected void trackConnectionFinalizer(ConnectionHandle connectionHandle)", "class_method_signature": "ConnectionPartition.trackConnectionFinalizer(ConnectionHandle connectionHandle)", "testcase": false, "constructor": false, "invocations": ["getInternalConnection", "getInvocationHandler", "invoke", "getInvocationHandler", "getMethod", "error", "getPool", "put", "getFinalizableRefs", "getPool", "getFinalizableRefQueue", "getPool", "remove", "getFinalizableRefs", "isClosed", "warn", "close", "updateCreatedConnections", "error"]}, "repository": {"repo_id": 466142, "url": "https://github.com/wwadge/bonecp", "language": "Java", "is_fork": false, "fork_count": 161, "stargazer_count": 544, "size": 3833, "license": "licensed"}}