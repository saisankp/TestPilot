{"test_class": {"identifier": "GetAsStringModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AttributeResolver resolver;", "modifier": "private", "type": "AttributeResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private GetAsStringModel model;", "modifier": "private", "type": "GetAsStringModel", "declarator": "model", "var_name": "model"}], "file": "tiles-template/src/test/java/org/apache/tiles/template/GetAsStringModelTest.java"}, "test_case": {"identifier": "testExecuteIgnore", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecuteIgnore() throws IOException {\n        TilesContainer container = createMock(TilesContainer.class);\n        AttributeContext attributeContext = createMock(AttributeContext.class);\n        Request request = createMock(Request.class);\n        Writer writer = createMock(Writer.class);\n        Map<String, Object> requestScope = new HashMap<String, Object>();\n        Deque<Object> composeStack = new ArrayDeque<Object>();\n        requestScope.put(ComposeStackUtil.COMPOSE_STACK_ATTRIBUTE_NAME, composeStack);\n        requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\n        ApplicationContext applicationContext = createMock(ApplicationContext.class);\n        ModelBody modelBody = createMock(ModelBody.class);\n\n        modelBody.evaluateWithoutWriting();\n        expect(request.getApplicationContext()).andReturn(applicationContext).times(2);\n        expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\n        expect(request.getWriter()).andReturn(writer);\n        container.prepare(\"myPreparer\", request);\n        expect(resolver.computeAttribute(container, null, \"myName\", \"myRole\", true, \"myDefaultValue\",\n                \"myDefaultValueRole\", \"myDefaultValueType\", request)).andReturn(null);\n        expect(container.startContext(request)).andReturn(attributeContext);\n        container.endContext(request);\n\n        replay(resolver, container, writer, request, applicationContext, modelBody);\n        model.execute(true, \"myPreparer\", \"myRole\", \"myDefaultValue\", \"myDefaultValueRole\", \"myDefaultValueType\",\n                \"myName\", null, request, modelBody);\n        verify(resolver, container, writer, request, applicationContext, modelBody);\n    }", "signature": "void testExecuteIgnore()", "full_signature": "@Test public void testExecuteIgnore()", "class_method_signature": "GetAsStringModelTest.testExecuteIgnore()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "createMock", "put", "put", "createMock", "createMock", "evaluateWithoutWriting", "times", "andReturn", "expect", "getApplicationContext", "anyTimes", "andReturn", "expect", "getContext", "andReturn", "expect", "getWriter", "prepare", "andReturn", "expect", "computeAttribute", "andReturn", "expect", "startContext", "endContext", "replay", "execute", "verify"]}, "focal_class": {"identifier": "GetAsStringModel", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger log = LoggerFactory.getLogger(getClass());", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(getClass())", "var_name": "log"}, {"original_string": "private AttributeResolver attributeResolver;", "modifier": "private", "type": "AttributeResolver", "declarator": "attributeResolver", "var_name": "attributeResolver"}], "methods": [{"identifier": "GetAsStringModel", "parameters": "()", "modifiers": "public", "return": "", "signature": " GetAsStringModel()", "full_signature": "public  GetAsStringModel()", "class_method_signature": "GetAsStringModel.GetAsStringModel()", "testcase": false, "constructor": true}, {"identifier": "GetAsStringModel", "parameters": "(AttributeResolver attributeResolver)", "modifiers": "public", "return": "", "signature": " GetAsStringModel(AttributeResolver attributeResolver)", "full_signature": "public  GetAsStringModel(AttributeResolver attributeResolver)", "class_method_signature": "GetAsStringModel.GetAsStringModel(AttributeResolver attributeResolver)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(boolean ignore, String preparer, String role,\n            Object defaultValue, String defaultValueRole,\n            String defaultValueType, @Parameter(required = true) String name,\n            Attribute value, Request request, ModelBody modelBody)", "modifiers": "public", "return": "void", "signature": "void execute(boolean ignore, String preparer, String role,\n            Object defaultValue, String defaultValueRole,\n            String defaultValueType, @Parameter(required = true) String name,\n            Attribute value, Request request, ModelBody modelBody)", "full_signature": "public void execute(boolean ignore, String preparer, String role,\n            Object defaultValue, String defaultValueRole,\n            String defaultValueType, @Parameter(required = true) String name,\n            Attribute value, Request request, ModelBody modelBody)", "class_method_signature": "GetAsStringModel.execute(boolean ignore, String preparer, String role,\n            Object defaultValue, String defaultValueRole,\n            String defaultValueType, @Parameter(required = true) String name,\n            Attribute value, Request request, ModelBody modelBody)", "testcase": false, "constructor": false}, {"identifier": "resolveAttribute", "parameters": "(TilesContainer container,\n            boolean ignore, String preparer, String role, Object defaultValue,\n            String defaultValueRole, String defaultValueType, String name,\n            Attribute value, Request request)", "modifiers": "private", "return": "Attribute", "signature": "Attribute resolveAttribute(TilesContainer container,\n            boolean ignore, String preparer, String role, Object defaultValue,\n            String defaultValueRole, String defaultValueType, String name,\n            Attribute value, Request request)", "full_signature": "private Attribute resolveAttribute(TilesContainer container,\n            boolean ignore, String preparer, String role, Object defaultValue,\n            String defaultValueRole, String defaultValueType, String name,\n            Attribute value, Request request)", "class_method_signature": "GetAsStringModel.resolveAttribute(TilesContainer container,\n            boolean ignore, String preparer, String role, Object defaultValue,\n            String defaultValueRole, String defaultValueType, String name,\n            Attribute value, Request request)", "testcase": false, "constructor": false}, {"identifier": "renderAttribute", "parameters": "(Attribute attribute, TilesContainer container,\n            Writer writer, boolean ignore, Request request)", "modifiers": "private", "return": "void", "signature": "void renderAttribute(Attribute attribute, TilesContainer container,\n            Writer writer, boolean ignore, Request request)", "full_signature": "private void renderAttribute(Attribute attribute, TilesContainer container,\n            Writer writer, boolean ignore, Request request)", "class_method_signature": "GetAsStringModel.renderAttribute(Attribute attribute, TilesContainer container,\n            Writer writer, boolean ignore, Request request)", "testcase": false, "constructor": false}], "file": "tiles-template/src/main/java/org/apache/tiles/template/GetAsStringModel.java"}, "focal_method": {"identifier": "execute", "parameters": "(boolean ignore, String preparer, String role,\n            Object defaultValue, String defaultValueRole,\n            String defaultValueType, @Parameter(required = true) String name,\n            Attribute value, Request request, ModelBody modelBody)", "modifiers": "public", "return": "void", "body": "public void execute(boolean ignore, String preparer, String role,\n            Object defaultValue, String defaultValueRole,\n            String defaultValueType, @Parameter(required = true) String name,\n            Attribute value, Request request, ModelBody modelBody)\n            throws IOException {\n        TilesContainer container = TilesAccess.getCurrentContainer(request);\n        Deque<Object> composeStack = ComposeStackUtil.getComposeStack(request);\n        Attribute attribute = resolveAttribute(container, ignore, preparer,\n                role, defaultValue, defaultValueRole, defaultValueType, name,\n                value, request);\n        if (attribute != null) {\n            composeStack.push(attribute);\n        }\n        modelBody.evaluateWithoutWriting();\n        container = TilesAccess.getCurrentContainer(request);\n        Writer writer = request.getWriter();\n        if (attribute != null) {\n            attribute = (Attribute) composeStack.pop();\n        }\n        renderAttribute(attribute, container, writer, ignore, request);\n    }", "signature": "void execute(boolean ignore, String preparer, String role,\n            Object defaultValue, String defaultValueRole,\n            String defaultValueType, @Parameter(required = true) String name,\n            Attribute value, Request request, ModelBody modelBody)", "full_signature": "public void execute(boolean ignore, String preparer, String role,\n            Object defaultValue, String defaultValueRole,\n            String defaultValueType, @Parameter(required = true) String name,\n            Attribute value, Request request, ModelBody modelBody)", "class_method_signature": "GetAsStringModel.execute(boolean ignore, String preparer, String role,\n            Object defaultValue, String defaultValueRole,\n            String defaultValueType, @Parameter(required = true) String name,\n            Attribute value, Request request, ModelBody modelBody)", "testcase": false, "constructor": false, "invocations": ["getCurrentContainer", "getComposeStack", "resolveAttribute", "push", "evaluateWithoutWriting", "getCurrentContainer", "getWriter", "pop", "renderAttribute"]}, "repository": {"repo_id": 2641714, "url": "https://github.com/apache/tiles", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 99, "size": 12554, "license": "licensed"}}