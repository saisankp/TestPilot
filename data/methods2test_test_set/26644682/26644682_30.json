{"test_class": {"identifier": "DataSetServiceTest", "superclass": "extends DataSetBaseTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ContentCache cacheManager;", "modifier": "@Autowired\n    private", "type": "ContentCache", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "@Autowired\n    private ResourceResolver resolver;", "modifier": "@Autowired\n    private", "type": "ResourceResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "@MockBean\n    private QuotaService quotaService;", "modifier": "@MockBean\n    private", "type": "QuotaService", "declarator": "quotaService", "var_name": "quotaService"}], "file": "dataprep-dataset/src/test/java/org/talend/dataprep/dataset/service/DataSetServiceTest.java"}, "test_case": {"identifier": "test_TDP_2052", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_TDP_2052() throws Exception {\n        // given\n        String dataSetId = UUID.randomUUID().toString();\n        DataSetMetadata dataSetMetadata = metadataBuilder.metadata().id(dataSetId).build();\n        dataSetMetadataRepository.save(dataSetMetadata);\n\n        given()\n                .body(IOUtils.toString(this.getClass().getResourceAsStream(TAGADA_CSV), UTF_8))\n                .when()\n                .put(\"/datasets/{id}/raw?name=original\", dataSetId)\n                .then()\n                .statusCode(OK.value());\n\n        String datasets = when().get(\"/datasets\").asString();\n        List<DataSetMetadata> datasetsMetadata =\n                mapper.readValue(datasets, new TypeReference<ArrayList<DataSetMetadata>>() {\n                });\n        final DataSetMetadata original = datasetsMetadata.get(0);\n\n        // when\n        given()\n                .body(IOUtils.toString(this.getClass().getResourceAsStream(TAGADA2_CSV), UTF_8))\n                .when()\n                .put(\"/datasets/{id}/raw?name=\", dataSetId)\n                .then()\n                .statusCode(OK.value());\n\n        // then\n        datasets = when().get(\"/datasets\").asString();\n        datasetsMetadata = mapper.readValue(datasets, new TypeReference<ArrayList<DataSetMetadata>>() {\n        });\n        final DataSetMetadata copy = datasetsMetadata.get(0);\n\n        assertThat(copy.getId(), equalTo(original.getId()));\n        assertThat(copy.getName(), equalTo(original.getName()));\n    }", "signature": "void test_TDP_2052()", "full_signature": "@Test public void test_TDP_2052()", "class_method_signature": "DataSetServiceTest.test_TDP_2052()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "build", "id", "metadata", "save", "statusCode", "then", "put", "when", "body", "given", "toString", "getResourceAsStream", "getClass", "value", "asString", "get", "when", "readValue", "get", "statusCode", "then", "put", "when", "body", "given", "toString", "getResourceAsStream", "getClass", "value", "asString", "get", "when", "readValue", "get", "assertThat", "getId", "equalTo", "getId", "assertThat", "getName", "equalTo", "getName"]}, "focal_class": {"identifier": "DataSetService", "superclass": "extends BaseDataSetService", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DataSetService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DataSetService.class)", "var_name": "LOG"}, {"original_string": "private static final String CONTENT_TYPE = \"Content-Type\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE = \"Content-Type\"", "var_name": "CONTENT_TYPE"}, {"original_string": "private static final String STORAGE_LIMIT = \"limit\";", "modifier": "private static final", "type": "String", "declarator": "STORAGE_LIMIT = \"limit\"", "var_name": "STORAGE_LIMIT"}, {"original_string": "@Autowired\n    private FormatAnalysis formatAnalyzer;", "modifier": "@Autowired\n    private", "type": "FormatAnalysis", "declarator": "formatAnalyzer", "var_name": "formatAnalyzer"}, {"original_string": "@Autowired\n    private UserDataRepository userDataRepository;", "modifier": "@Autowired\n    private", "type": "UserDataRepository", "declarator": "userDataRepository", "var_name": "userDataRepository"}, {"original_string": "@Autowired\n    private FormatFamilyFactory formatFamilyFactory;", "modifier": "@Autowired\n    private", "type": "FormatFamilyFactory", "declarator": "formatFamilyFactory", "var_name": "formatFamilyFactory"}, {"original_string": "@Autowired\n    private DataSetLocatorService datasetLocator;", "modifier": "@Autowired\n    private", "type": "DataSetLocatorService", "declarator": "datasetLocator", "var_name": "datasetLocator"}, {"original_string": "@Autowired\n    private Security security;", "modifier": "@Autowired\n    private", "type": "Security", "declarator": "security", "var_name": "security"}, {"original_string": "@Autowired\n    private DataSetLocationService locationsService;", "modifier": "@Autowired\n    private", "type": "DataSetLocationService", "declarator": "locationsService", "var_name": "locationsService"}, {"original_string": "@Autowired\n    private VersionService versionService;", "modifier": "@Autowired\n    private", "type": "VersionService", "declarator": "versionService", "var_name": "versionService"}, {"original_string": "@Autowired\n    private BeanConversionService conversionService;", "modifier": "@Autowired\n    private", "type": "BeanConversionService", "declarator": "conversionService", "var_name": "conversionService"}, {"original_string": "@Autowired\n    private QuotaService quotaService;", "modifier": "@Autowired\n    private", "type": "QuotaService", "declarator": "quotaService", "var_name": "quotaService"}, {"original_string": "@Value(\"#{'${dataset.imports}'.split(',')}\")\n    private Set<String> enabledImports;", "modifier": "@Value(\"#{'${dataset.imports}'.split(',')}\")\n    private", "type": "Set<String>", "declarator": "enabledImports", "var_name": "enabledImports"}, {"original_string": "@Value(\"${dataset.list.limit:10}\")\n    private int datasetListLimit;", "modifier": "@Value(\"${dataset.list.limit:10}\")\n    private", "type": "int", "declarator": "datasetListLimit", "var_name": "datasetListLimit"}, {"original_string": "@Autowired\n    private AnalyzerService analyzerService;", "modifier": "@Autowired\n    private", "type": "AnalyzerService", "declarator": "analyzerService", "var_name": "analyzerService"}, {"original_string": "@Autowired\n    private FilterService filterService;", "modifier": "@Autowired\n    private", "type": "FilterService", "declarator": "filterService", "var_name": "filterService"}, {"original_string": "@Value(\"${dataset.local.file.size.limit:20000000}\")\n    private long maximumInputStreamSize;", "modifier": "@Value(\"${dataset.local.file.size.limit:20000000}\")\n    private", "type": "long", "declarator": "maximumInputStreamSize", "var_name": "maximumInputStreamSize"}, {"original_string": "@Autowired\n    private ContentCache cacheManager;", "modifier": "@Autowired\n    private", "type": "ContentCache", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "@Resource(name = \"serializer#dataset#executor\")\n    private TaskExecutor executor;", "modifier": "@Resource(name = \"serializer#dataset#executor\")\n    private", "type": "TaskExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "@Autowired\n    private SecurityProxy securityProxy;", "modifier": "@Autowired\n    private", "type": "SecurityProxy", "declarator": "securityProxy", "var_name": "securityProxy"}, {"original_string": "@Autowired\n    private BeanConversionService beanConversionService;", "modifier": "@Autowired\n    private", "type": "BeanConversionService", "declarator": "beanConversionService", "var_name": "beanConversionService"}, {"original_string": "@Autowired\n    private DataSetContentLimit dataSetContentLimit;", "modifier": "@Autowired\n    private", "type": "DataSetContentLimit", "declarator": "dataSetContentLimit", "var_name": "dataSetContentLimit"}], "methods": [{"identifier": "list", "parameters": "(\n            @ApiParam(value = \"Sort key (by name, creation or modification date)\") @RequestParam(\n                    defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc or modif)\") @RequestParam(\n                    defaultValue = \"desc\") Order order,\n            @ApiParam(value = \"Filter on name containing the specified name\") @RequestParam(\n                    required = false) String name,\n            @ApiParam(value = \"Filter on name containing the specified name strictness\") @RequestParam(\n                    defaultValue = \"false\") boolean nameStrict,\n            @ApiParam(value = \"Filter on certified data sets\") @RequestParam(defaultValue = \"false\") boolean certified,\n            @ApiParam(value = \"Filter on favorite data sets\") @RequestParam(defaultValue = \"false\") boolean favorite,\n            @ApiParam(value = \"Only return a limited number of data sets\") @RequestParam(\n                    defaultValue = \"false\") boolean limit)", "modifiers": "@RequestMapping(value = \"/datasets\", method = RequestMethod.GET) @ApiOperation(value = \"List all data sets and filters on certified, or favorite or a limited number when asked\", notes = \"Returns the list of data sets (and filters) the current user is allowed to see. Creation date is a Epoch time value (in UTC time zone).\") @Timed public", "return": "Stream<DatasetDTO>", "signature": "Stream<DatasetDTO> list(\n            @ApiParam(value = \"Sort key (by name, creation or modification date)\") @RequestParam(\n                    defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc or modif)\") @RequestParam(\n                    defaultValue = \"desc\") Order order,\n            @ApiParam(value = \"Filter on name containing the specified name\") @RequestParam(\n                    required = false) String name,\n            @ApiParam(value = \"Filter on name containing the specified name strictness\") @RequestParam(\n                    defaultValue = \"false\") boolean nameStrict,\n            @ApiParam(value = \"Filter on certified data sets\") @RequestParam(defaultValue = \"false\") boolean certified,\n            @ApiParam(value = \"Filter on favorite data sets\") @RequestParam(defaultValue = \"false\") boolean favorite,\n            @ApiParam(value = \"Only return a limited number of data sets\") @RequestParam(\n                    defaultValue = \"false\") boolean limit)", "full_signature": "@RequestMapping(value = \"/datasets\", method = RequestMethod.GET) @ApiOperation(value = \"List all data sets and filters on certified, or favorite or a limited number when asked\", notes = \"Returns the list of data sets (and filters) the current user is allowed to see. Creation date is a Epoch time value (in UTC time zone).\") @Timed public Stream<DatasetDTO> list(\n            @ApiParam(value = \"Sort key (by name, creation or modification date)\") @RequestParam(\n                    defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc or modif)\") @RequestParam(\n                    defaultValue = \"desc\") Order order,\n            @ApiParam(value = \"Filter on name containing the specified name\") @RequestParam(\n                    required = false) String name,\n            @ApiParam(value = \"Filter on name containing the specified name strictness\") @RequestParam(\n                    defaultValue = \"false\") boolean nameStrict,\n            @ApiParam(value = \"Filter on certified data sets\") @RequestParam(defaultValue = \"false\") boolean certified,\n            @ApiParam(value = \"Filter on favorite data sets\") @RequestParam(defaultValue = \"false\") boolean favorite,\n            @ApiParam(value = \"Only return a limited number of data sets\") @RequestParam(\n                    defaultValue = \"false\") boolean limit)", "class_method_signature": "DataSetService.list(\n            @ApiParam(value = \"Sort key (by name, creation or modification date)\") @RequestParam(\n                    defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc or modif)\") @RequestParam(\n                    defaultValue = \"desc\") Order order,\n            @ApiParam(value = \"Filter on name containing the specified name\") @RequestParam(\n                    required = false) String name,\n            @ApiParam(value = \"Filter on name containing the specified name strictness\") @RequestParam(\n                    defaultValue = \"false\") boolean nameStrict,\n            @ApiParam(value = \"Filter on certified data sets\") @RequestParam(defaultValue = \"false\") boolean certified,\n            @ApiParam(value = \"Filter on favorite data sets\") @RequestParam(defaultValue = \"false\") boolean favorite,\n            @ApiParam(value = \"Only return a limited number of data sets\") @RequestParam(\n                    defaultValue = \"false\") boolean limit)", "testcase": false, "constructor": false}, {"identifier": "injectFavorite", "parameters": "(Set<String> favoritesDatasets)", "modifiers": "private", "return": "BiFunction<DataSetMetadata, DatasetDTO, DatasetDTO>", "signature": "BiFunction<DataSetMetadata, DatasetDTO, DatasetDTO> injectFavorite(Set<String> favoritesDatasets)", "full_signature": "private BiFunction<DataSetMetadata, DatasetDTO, DatasetDTO> injectFavorite(Set<String> favoritesDatasets)", "class_method_signature": "DataSetService.injectFavorite(Set<String> favoritesDatasets)", "testcase": false, "constructor": false}, {"identifier": "listWithFullDetails", "parameters": "(\n            @ApiParam(value = \"Sort key (by name, creation or modification date)\") @RequestParam(\n                    defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc or modif)\") @RequestParam(\n                    defaultValue = \"desc\") Order order,\n            @ApiParam(value = \"Filter on name containing the specified name\") @RequestParam(\n                    required = false) String name,\n            @ApiParam(value = \"Filter on name containing the specified name strictness\") @RequestParam(\n                    defaultValue = \"false\") boolean nameStrict,\n            @ApiParam(value = \"Filter on certified data sets\") @RequestParam(defaultValue = \"false\") boolean certified,\n            @ApiParam(value = \"Filter on favorite data sets\") @RequestParam(defaultValue = \"false\") boolean favorite,\n            @ApiParam(value = \"Only return a limited number of data sets\") @RequestParam(\n                    defaultValue = \"false\") boolean limit)", "modifiers": "@RequestMapping(value = \"/datasets/details\", method = RequestMethod.GET) @ApiOperation(value = \"List all data sets and filters on certified, or favorite or a limited number when asked\", notes = \"Returns the list of data sets (and filters) the current user is allowed to see. Creation date is a Epoch time value (in UTC time zone).\") @Timed public", "return": "Stream<UserDataSetMetadata>", "signature": "Stream<UserDataSetMetadata> listWithFullDetails(\n            @ApiParam(value = \"Sort key (by name, creation or modification date)\") @RequestParam(\n                    defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc or modif)\") @RequestParam(\n                    defaultValue = \"desc\") Order order,\n            @ApiParam(value = \"Filter on name containing the specified name\") @RequestParam(\n                    required = false) String name,\n            @ApiParam(value = \"Filter on name containing the specified name strictness\") @RequestParam(\n                    defaultValue = \"false\") boolean nameStrict,\n            @ApiParam(value = \"Filter on certified data sets\") @RequestParam(defaultValue = \"false\") boolean certified,\n            @ApiParam(value = \"Filter on favorite data sets\") @RequestParam(defaultValue = \"false\") boolean favorite,\n            @ApiParam(value = \"Only return a limited number of data sets\") @RequestParam(\n                    defaultValue = \"false\") boolean limit)", "full_signature": "@RequestMapping(value = \"/datasets/details\", method = RequestMethod.GET) @ApiOperation(value = \"List all data sets and filters on certified, or favorite or a limited number when asked\", notes = \"Returns the list of data sets (and filters) the current user is allowed to see. Creation date is a Epoch time value (in UTC time zone).\") @Timed public Stream<UserDataSetMetadata> listWithFullDetails(\n            @ApiParam(value = \"Sort key (by name, creation or modification date)\") @RequestParam(\n                    defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc or modif)\") @RequestParam(\n                    defaultValue = \"desc\") Order order,\n            @ApiParam(value = \"Filter on name containing the specified name\") @RequestParam(\n                    required = false) String name,\n            @ApiParam(value = \"Filter on name containing the specified name strictness\") @RequestParam(\n                    defaultValue = \"false\") boolean nameStrict,\n            @ApiParam(value = \"Filter on certified data sets\") @RequestParam(defaultValue = \"false\") boolean certified,\n            @ApiParam(value = \"Filter on favorite data sets\") @RequestParam(defaultValue = \"false\") boolean favorite,\n            @ApiParam(value = \"Only return a limited number of data sets\") @RequestParam(\n                    defaultValue = \"false\") boolean limit)", "class_method_signature": "DataSetService.listWithFullDetails(\n            @ApiParam(value = \"Sort key (by name, creation or modification date)\") @RequestParam(\n                    defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc or modif)\") @RequestParam(\n                    defaultValue = \"desc\") Order order,\n            @ApiParam(value = \"Filter on name containing the specified name\") @RequestParam(\n                    required = false) String name,\n            @ApiParam(value = \"Filter on name containing the specified name strictness\") @RequestParam(\n                    defaultValue = \"false\") boolean nameStrict,\n            @ApiParam(value = \"Filter on certified data sets\") @RequestParam(defaultValue = \"false\") boolean certified,\n            @ApiParam(value = \"Filter on favorite data sets\") @RequestParam(defaultValue = \"false\") boolean favorite,\n            @ApiParam(value = \"Only return a limited number of data sets\") @RequestParam(\n                    defaultValue = \"false\") boolean limit)", "testcase": false, "constructor": false}, {"identifier": "listCompatibleDatasets", "parameters": "(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the data set metadata\") String dataSetId,\n            @ApiParam(value = \"Sort key (by name or date).\") @RequestParam(defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc).\") @RequestParam(defaultValue = \"desc\") Order order)", "modifiers": "@RequestMapping(value = \"/datasets/{id}/compatibledatasets\", method = RequestMethod.GET) @ApiOperation(value = \"List all compatible data sets\", notes = \"Returns the list of data sets the current user is allowed to see and which are compatible with the specified data set id.\") @Timed public", "return": "Iterable<UserDataSetMetadata>", "signature": "Iterable<UserDataSetMetadata> listCompatibleDatasets(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the data set metadata\") String dataSetId,\n            @ApiParam(value = \"Sort key (by name or date).\") @RequestParam(defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc).\") @RequestParam(defaultValue = \"desc\") Order order)", "full_signature": "@RequestMapping(value = \"/datasets/{id}/compatibledatasets\", method = RequestMethod.GET) @ApiOperation(value = \"List all compatible data sets\", notes = \"Returns the list of data sets the current user is allowed to see and which are compatible with the specified data set id.\") @Timed public Iterable<UserDataSetMetadata> listCompatibleDatasets(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the data set metadata\") String dataSetId,\n            @ApiParam(value = \"Sort key (by name or date).\") @RequestParam(defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc).\") @RequestParam(defaultValue = \"desc\") Order order)", "class_method_signature": "DataSetService.listCompatibleDatasets(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the data set metadata\") String dataSetId,\n            @ApiParam(value = \"Sort key (by name or date).\") @RequestParam(defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc).\") @RequestParam(defaultValue = \"desc\") Order order)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(\n            @ApiParam(value = \"User readable name of the data set (e.g. 'Finance Report 2015', 'Test Data Set').\") @RequestParam(defaultValue = \"\") String name,\n            @ApiParam(value = \"An optional tag to be added in data set metadata once created.\") @RequestParam(defaultValue = \"\") String tag,\n            @ApiParam(value = \"Size of the data set, in bytes.\") @RequestParam(required = false) Long size,\n            @RequestHeader(CONTENT_TYPE) String contentType,\n            @ApiParam(value = \"content\") InputStream content)", "modifiers": "@RequestMapping(value = \"/datasets\", method = POST, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Create a data set\", produces = TEXT_PLAIN_VALUE, notes = \"Create a new data set based on content provided in POST body. For documentation purposes, body is typed as 'text/plain' but operation accepts binary content too. Returns the id of the newly created data set.\") @Timed @VolumeMetered public", "return": "String", "signature": "String create(\n            @ApiParam(value = \"User readable name of the data set (e.g. 'Finance Report 2015', 'Test Data Set').\") @RequestParam(defaultValue = \"\") String name,\n            @ApiParam(value = \"An optional tag to be added in data set metadata once created.\") @RequestParam(defaultValue = \"\") String tag,\n            @ApiParam(value = \"Size of the data set, in bytes.\") @RequestParam(required = false) Long size,\n            @RequestHeader(CONTENT_TYPE) String contentType,\n            @ApiParam(value = \"content\") InputStream content)", "full_signature": "@RequestMapping(value = \"/datasets\", method = POST, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Create a data set\", produces = TEXT_PLAIN_VALUE, notes = \"Create a new data set based on content provided in POST body. For documentation purposes, body is typed as 'text/plain' but operation accepts binary content too. Returns the id of the newly created data set.\") @Timed @VolumeMetered public String create(\n            @ApiParam(value = \"User readable name of the data set (e.g. 'Finance Report 2015', 'Test Data Set').\") @RequestParam(defaultValue = \"\") String name,\n            @ApiParam(value = \"An optional tag to be added in data set metadata once created.\") @RequestParam(defaultValue = \"\") String tag,\n            @ApiParam(value = \"Size of the data set, in bytes.\") @RequestParam(required = false) Long size,\n            @RequestHeader(CONTENT_TYPE) String contentType,\n            @ApiParam(value = \"content\") InputStream content)", "class_method_signature": "DataSetService.create(\n            @ApiParam(value = \"User readable name of the data set (e.g. 'Finance Report 2015', 'Test Data Set').\") @RequestParam(defaultValue = \"\") String name,\n            @ApiParam(value = \"An optional tag to be added in data set metadata once created.\") @RequestParam(defaultValue = \"\") String tag,\n            @ApiParam(value = \"Size of the data set, in bytes.\") @RequestParam(required = false) Long size,\n            @RequestHeader(CONTENT_TYPE) String contentType,\n            @ApiParam(value = \"content\") InputStream content)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(\n            @RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\",\n                    value = \"Include metadata information in the response\") boolean metadata, //\n            @RequestParam(defaultValue = \"false\") @ApiParam(name = \"includeInternalContent\",\n                    value = \"Include internal content in the response\") boolean includeInternalContent, //\n            @RequestParam(defaultValue = \"-1\") @ApiParam(name = STORAGE_LIMIT, value = STORAGE_LIMIT) long limit, //\n            @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\",\n                    defaultValue = \"\") String filter,\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the requested data set\") String dataSetId)", "modifiers": "@RequestMapping(value = \"/datasets/{id}/content\", method = RequestMethod.GET) @ApiOperation(value = \"Get a data set by id\", notes = \"Get a data set content based on provided id. Id should be a UUID returned by the list operation. Not valid or non existing data set id returns empty content.\") @Timed @ResponseBody public", "return": "Callable<DataSet>", "signature": "Callable<DataSet> get(\n            @RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\",\n                    value = \"Include metadata information in the response\") boolean metadata, //\n            @RequestParam(defaultValue = \"false\") @ApiParam(name = \"includeInternalContent\",\n                    value = \"Include internal content in the response\") boolean includeInternalContent, //\n            @RequestParam(defaultValue = \"-1\") @ApiParam(name = STORAGE_LIMIT, value = STORAGE_LIMIT) long limit, //\n            @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\",\n                    defaultValue = \"\") String filter,\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the requested data set\") String dataSetId)", "full_signature": "@RequestMapping(value = \"/datasets/{id}/content\", method = RequestMethod.GET) @ApiOperation(value = \"Get a data set by id\", notes = \"Get a data set content based on provided id. Id should be a UUID returned by the list operation. Not valid or non existing data set id returns empty content.\") @Timed @ResponseBody public Callable<DataSet> get(\n            @RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\",\n                    value = \"Include metadata information in the response\") boolean metadata, //\n            @RequestParam(defaultValue = \"false\") @ApiParam(name = \"includeInternalContent\",\n                    value = \"Include internal content in the response\") boolean includeInternalContent, //\n            @RequestParam(defaultValue = \"-1\") @ApiParam(name = STORAGE_LIMIT, value = STORAGE_LIMIT) long limit, //\n            @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\",\n                    defaultValue = \"\") String filter,\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the requested data set\") String dataSetId)", "class_method_signature": "DataSetService.get(\n            @RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\",\n                    value = \"Include metadata information in the response\") boolean metadata, //\n            @RequestParam(defaultValue = \"false\") @ApiParam(name = \"includeInternalContent\",\n                    value = \"Include internal content in the response\") boolean includeInternalContent, //\n            @RequestParam(defaultValue = \"-1\") @ApiParam(name = STORAGE_LIMIT, value = STORAGE_LIMIT) long limit, //\n            @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\",\n                    defaultValue = \"\") String filter,\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the requested data set\") String dataSetId)", "testcase": false, "constructor": false}, {"identifier": "insertWordPatternAnalysis", "parameters": "(DataSetMetadata dataSetMetadata, Stream<DataSetRow> records)", "modifiers": "private", "return": "Stream<DataSetRow>", "signature": "Stream<DataSetRow> insertWordPatternAnalysis(DataSetMetadata dataSetMetadata, Stream<DataSetRow> records)", "full_signature": "private Stream<DataSetRow> insertWordPatternAnalysis(DataSetMetadata dataSetMetadata, Stream<DataSetRow> records)", "class_method_signature": "DataSetService.insertWordPatternAnalysis(DataSetMetadata dataSetMetadata, Stream<DataSetRow> records)", "testcase": false, "constructor": false}, {"identifier": "getMetadata", "parameters": "(@PathVariable(value = \"id\") @ApiParam(name = \"id\",\n            value = \"Id of the data set metadata\") String dataSetId)", "modifiers": "@RequestMapping(value = \"/datasets/{id}/metadata\", method = RequestMethod.GET) @ApiOperation(value = \"Get metadata information of a data set by id\", notes = \"Get metadata information of a data set by id. Not valid or non existing data set id returns empty content.\") @Timed @ResponseBody public", "return": "DataSet", "signature": "DataSet getMetadata(@PathVariable(value = \"id\") @ApiParam(name = \"id\",\n            value = \"Id of the data set metadata\") String dataSetId)", "full_signature": "@RequestMapping(value = \"/datasets/{id}/metadata\", method = RequestMethod.GET) @ApiOperation(value = \"Get metadata information of a data set by id\", notes = \"Get metadata information of a data set by id. Not valid or non existing data set id returns empty content.\") @Timed @ResponseBody public DataSet getMetadata(@PathVariable(value = \"id\") @ApiParam(name = \"id\",\n            value = \"Id of the data set metadata\") String dataSetId)", "class_method_signature": "DataSetService.getMetadata(@PathVariable(value = \"id\") @ApiParam(name = \"id\",\n            value = \"Id of the data set metadata\") String dataSetId)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@PathVariable(value = \"id\") @ApiParam(name = \"id\",\n            value = \"Id of the data set to delete\") String dataSetId)", "modifiers": "@RequestMapping(value = \"/datasets/{id}\", method = RequestMethod.DELETE) @ApiOperation(value = \"Delete a data set by id\", notes = \"Delete a data set content based on provided id. Id should be a UUID returned by the list operation. Not valid or non existing data set id returns empty content.\") @Timed public", "return": "void", "signature": "void delete(@PathVariable(value = \"id\") @ApiParam(name = \"id\",\n            value = \"Id of the data set to delete\") String dataSetId)", "full_signature": "@RequestMapping(value = \"/datasets/{id}\", method = RequestMethod.DELETE) @ApiOperation(value = \"Delete a data set by id\", notes = \"Delete a data set content based on provided id. Id should be a UUID returned by the list operation. Not valid or non existing data set id returns empty content.\") @Timed public void delete(@PathVariable(value = \"id\") @ApiParam(name = \"id\",\n            value = \"Id of the data set to delete\") String dataSetId)", "class_method_signature": "DataSetService.delete(@PathVariable(value = \"id\") @ApiParam(name = \"id\",\n            value = \"Id of the data set to delete\") String dataSetId)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the data set to clone\") String dataSetId,\n            @ApiParam(value = \"The name of the cloned dataset.\") @RequestParam(required = false) String copyName)", "modifiers": "@RequestMapping(value = \"/datasets/{id}/copy\", method = POST, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Copy a data set\", produces = TEXT_PLAIN_VALUE, notes = \"Copy a new data set based on the given id. Returns the id of the newly created data set.\") @Timed public", "return": "String", "signature": "String copy(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the data set to clone\") String dataSetId,\n            @ApiParam(value = \"The name of the cloned dataset.\") @RequestParam(required = false) String copyName)", "full_signature": "@RequestMapping(value = \"/datasets/{id}/copy\", method = POST, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Copy a data set\", produces = TEXT_PLAIN_VALUE, notes = \"Copy a new data set based on the given id. Returns the id of the newly created data set.\") @Timed public String copy(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the data set to clone\") String dataSetId,\n            @ApiParam(value = \"The name of the cloned dataset.\") @RequestParam(required = false) String copyName)", "class_method_signature": "DataSetService.copy(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the data set to clone\") String dataSetId,\n            @ApiParam(value = \"The name of the cloned dataset.\") @RequestParam(required = false) String copyName)", "testcase": false, "constructor": false}, {"identifier": "updateRawDataSet", "parameters": "(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the data set to update\") String dataSetId, //\n            @RequestParam(value = \"name\", required = false) @ApiParam(name = \"name\",\n                    value = \"New value for the data set name\") String name, //\n            @RequestParam(value = \"size\", required = false) @ApiParam(name = \"size\",\n                    value = \"The size of the dataSet\") Long size, //\n            @ApiParam(value = \"content\") InputStream dataSetContent)", "modifiers": "@RequestMapping(value = \"/datasets/{id}/raw\", method = PUT) @ApiOperation(value = \"Update a data set by id\", notes = \"Update a data set content based on provided id and PUT body. Id should be a UUID returned by the list operation. Not valid or non existing data set id returns empty content. For documentation purposes, body is typed as 'text/plain' but operation accepts binary content too.\") @Timed @VolumeMetered public", "return": "String", "signature": "String updateRawDataSet(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the data set to update\") String dataSetId, //\n            @RequestParam(value = \"name\", required = false) @ApiParam(name = \"name\",\n                    value = \"New value for the data set name\") String name, //\n            @RequestParam(value = \"size\", required = false) @ApiParam(name = \"size\",\n                    value = \"The size of the dataSet\") Long size, //\n            @ApiParam(value = \"content\") InputStream dataSetContent)", "full_signature": "@RequestMapping(value = \"/datasets/{id}/raw\", method = PUT) @ApiOperation(value = \"Update a data set by id\", notes = \"Update a data set content based on provided id and PUT body. Id should be a UUID returned by the list operation. Not valid or non existing data set id returns empty content. For documentation purposes, body is typed as 'text/plain' but operation accepts binary content too.\") @Timed @VolumeMetered public String updateRawDataSet(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the data set to update\") String dataSetId, //\n            @RequestParam(value = \"name\", required = false) @ApiParam(name = \"name\",\n                    value = \"New value for the data set name\") String name, //\n            @RequestParam(value = \"size\", required = false) @ApiParam(name = \"size\",\n                    value = \"The size of the dataSet\") Long size, //\n            @ApiParam(value = \"content\") InputStream dataSetContent)", "class_method_signature": "DataSetService.updateRawDataSet(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the data set to update\") String dataSetId, //\n            @RequestParam(value = \"name\", required = false) @ApiParam(name = \"name\",\n                    value = \"New value for the data set name\") String name, //\n            @RequestParam(value = \"size\", required = false) @ApiParam(name = \"size\",\n                    value = \"The size of the dataSet\") Long size, //\n            @ApiParam(value = \"content\") InputStream dataSetContent)", "testcase": false, "constructor": false}, {"identifier": "dataSetContentToNull", "parameters": "(InputStream content)", "modifiers": "private", "return": "void", "signature": "void dataSetContentToNull(InputStream content)", "full_signature": "private void dataSetContentToNull(InputStream content)", "class_method_signature": "DataSetService.dataSetContentToNull(InputStream content)", "testcase": false, "constructor": false}, {"identifier": "listErrors", "parameters": "()", "modifiers": "@RequestMapping(value = \"/datasets/errors\", method = RequestMethod.GET) @ApiOperation(value = \"Get all dataset related error codes.\", notes = \"Returns the list of all dataset related error codes.\") @Timed public", "return": "Iterable<JsonErrorCodeDescription>", "signature": "Iterable<JsonErrorCodeDescription> listErrors()", "full_signature": "@RequestMapping(value = \"/datasets/errors\", method = RequestMethod.GET) @ApiOperation(value = \"Get all dataset related error codes.\", notes = \"Returns the list of all dataset related error codes.\") @Timed public Iterable<JsonErrorCodeDescription> listErrors()", "class_method_signature": "DataSetService.listErrors()", "testcase": false, "constructor": false}, {"identifier": "preview", "parameters": "(@RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\",\n                    value = \"Include metadata information in the response\") boolean metadata, //\n                    @RequestParam(defaultValue = \"\") @ApiParam(name = \"sheetName\",\n                            value = \"Sheet name to preview\") String sheetName, //\n                    @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                            value = \"Id of the requested data set\") String dataSetId)", "modifiers": "@RequestMapping(value = \"/datasets/{id}/preview\", method = RequestMethod.GET) @ApiOperation(value = \"Get a data preview set by id\", notes = \"Get a data set preview content based on provided id. Not valid or non existing data set id returns empty content. Data set not in drat status will return a redirect 301\") @Timed @ResponseBody public", "return": "DataSet", "signature": "DataSet preview(@RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\",\n                    value = \"Include metadata information in the response\") boolean metadata, //\n                    @RequestParam(defaultValue = \"\") @ApiParam(name = \"sheetName\",\n                            value = \"Sheet name to preview\") String sheetName, //\n                    @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                            value = \"Id of the requested data set\") String dataSetId)", "full_signature": "@RequestMapping(value = \"/datasets/{id}/preview\", method = RequestMethod.GET) @ApiOperation(value = \"Get a data preview set by id\", notes = \"Get a data set preview content based on provided id. Not valid or non existing data set id returns empty content. Data set not in drat status will return a redirect 301\") @Timed @ResponseBody public DataSet preview(@RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\",\n                    value = \"Include metadata information in the response\") boolean metadata, //\n                    @RequestParam(defaultValue = \"\") @ApiParam(name = \"sheetName\",\n                            value = \"Sheet name to preview\") String sheetName, //\n                    @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                            value = \"Id of the requested data set\") String dataSetId)", "class_method_signature": "DataSetService.preview(@RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\",\n                    value = \"Include metadata information in the response\") boolean metadata, //\n                    @RequestParam(defaultValue = \"\") @ApiParam(name = \"sheetName\",\n                            value = \"Sheet name to preview\") String sheetName, //\n                    @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                            value = \"Id of the requested data set\") String dataSetId)", "testcase": false, "constructor": false}, {"identifier": "updateDataSet", "parameters": "(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the data set to update\") String dataSetId,\n            @RequestBody DataSetMetadata dataSetMetadata)", "modifiers": "@RequestMapping(value = \"/datasets/{id}\", method = PUT) @ApiOperation(value = \"Update a data set metadata by id\", notes = \"Update a data set metadata according to the content of the PUT body. Id should be a UUID returned by the list operation. Not valid or non existing data set id return an error response.\") @Timed public", "return": "void", "signature": "void updateDataSet(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the data set to update\") String dataSetId,\n            @RequestBody DataSetMetadata dataSetMetadata)", "full_signature": "@RequestMapping(value = \"/datasets/{id}\", method = PUT) @ApiOperation(value = \"Update a data set metadata by id\", notes = \"Update a data set metadata according to the content of the PUT body. Id should be a UUID returned by the list operation. Not valid or non existing data set id return an error response.\") @Timed public void updateDataSet(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the data set to update\") String dataSetId,\n            @RequestBody DataSetMetadata dataSetMetadata)", "class_method_signature": "DataSetService.updateDataSet(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the data set to update\") String dataSetId,\n            @RequestBody DataSetMetadata dataSetMetadata)", "testcase": false, "constructor": false}, {"identifier": "favorites", "parameters": "()", "modifiers": "@RequestMapping(value = \"/datasets/favorites\", method = RequestMethod.GET) @ApiOperation(value = \"return all favorites datasets of the current user\", notes = \"Returns the list of favorites datasets.\") @Timed public", "return": "Iterable<String>", "signature": "Iterable<String> favorites()", "full_signature": "@RequestMapping(value = \"/datasets/favorites\", method = RequestMethod.GET) @ApiOperation(value = \"return all favorites datasets of the current user\", notes = \"Returns the list of favorites datasets.\") @Timed public Iterable<String> favorites()", "class_method_signature": "DataSetService.favorites()", "testcase": false, "constructor": false}, {"identifier": "setFavorites", "parameters": "(@RequestParam(defaultValue = \"false\") @ApiParam(name = \"unset\",\n            value = \"if true then unset the dataset as favorite, if false (default value) set the favorite flag\") boolean unset, //\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the favorite data set, do nothing is the id does not exist.\") String dataSetId)", "modifiers": "@RequestMapping(value = \"/datasets/{id}/favorite\", method = PUT) @ApiOperation(value = \"set or unset a dataset as favorite\", notes = \"Specify if a dataset is or is not a favorite for the current user.\") @Timed public", "return": "void", "signature": "void setFavorites(@RequestParam(defaultValue = \"false\") @ApiParam(name = \"unset\",\n            value = \"if true then unset the dataset as favorite, if false (default value) set the favorite flag\") boolean unset, //\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the favorite data set, do nothing is the id does not exist.\") String dataSetId)", "full_signature": "@RequestMapping(value = \"/datasets/{id}/favorite\", method = PUT) @ApiOperation(value = \"set or unset a dataset as favorite\", notes = \"Specify if a dataset is or is not a favorite for the current user.\") @Timed public void setFavorites(@RequestParam(defaultValue = \"false\") @ApiParam(name = \"unset\",\n            value = \"if true then unset the dataset as favorite, if false (default value) set the favorite flag\") boolean unset, //\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the favorite data set, do nothing is the id does not exist.\") String dataSetId)", "class_method_signature": "DataSetService.setFavorites(@RequestParam(defaultValue = \"false\") @ApiParam(name = \"unset\",\n            value = \"if true then unset the dataset as favorite, if false (default value) set the favorite flag\") boolean unset, //\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the favorite data set, do nothing is the id does not exist.\") String dataSetId)", "testcase": false, "constructor": false}, {"identifier": "updateDatasetColumn", "parameters": "(\n            @PathVariable(value = \"datasetId\") @ApiParam(name = \"datasetId\",\n                    value = \"Id of the dataset\") final String dataSetId,\n            @PathVariable(value = \"columnId\") @ApiParam(name = \"columnId\",\n                    value = \"Id of the column\") final String columnId,\n            @RequestBody final UpdateColumnParameters parameters)", "modifiers": "@RequestMapping(value = \"/datasets/{datasetId}/column/{columnId}\", method = POST) @ApiOperation(value = \"Update a column type and/or domain\") @Timed public", "return": "void", "signature": "void updateDatasetColumn(\n            @PathVariable(value = \"datasetId\") @ApiParam(name = \"datasetId\",\n                    value = \"Id of the dataset\") final String dataSetId,\n            @PathVariable(value = \"columnId\") @ApiParam(name = \"columnId\",\n                    value = \"Id of the column\") final String columnId,\n            @RequestBody final UpdateColumnParameters parameters)", "full_signature": "@RequestMapping(value = \"/datasets/{datasetId}/column/{columnId}\", method = POST) @ApiOperation(value = \"Update a column type and/or domain\") @Timed public void updateDatasetColumn(\n            @PathVariable(value = \"datasetId\") @ApiParam(name = \"datasetId\",\n                    value = \"Id of the dataset\") final String dataSetId,\n            @PathVariable(value = \"columnId\") @ApiParam(name = \"columnId\",\n                    value = \"Id of the column\") final String columnId,\n            @RequestBody final UpdateColumnParameters parameters)", "class_method_signature": "DataSetService.updateDatasetColumn(\n            @PathVariable(value = \"datasetId\") @ApiParam(name = \"datasetId\",\n                    value = \"Id of the dataset\") final String dataSetId,\n            @PathVariable(value = \"columnId\") @ApiParam(name = \"columnId\",\n                    value = \"Id of the column\") final String columnId,\n            @RequestBody final UpdateColumnParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "( //\n            @RequestParam @ApiParam(value = \"What to search in data sets\") final String name, //\n            @RequestParam @ApiParam(value = \"The searched name should be the full name\") final boolean strict)", "modifiers": "@RequestMapping(value = \"/datasets/search\", method = GET) @ApiOperation(value = \"Search the dataset metadata\", notes = \"Search the dataset metadata.\") @Timed @Deprecated public", "return": "Stream<DatasetDTO>", "signature": "Stream<DatasetDTO> search( //\n            @RequestParam @ApiParam(value = \"What to search in data sets\") final String name, //\n            @RequestParam @ApiParam(value = \"The searched name should be the full name\") final boolean strict)", "full_signature": "@RequestMapping(value = \"/datasets/search\", method = GET) @ApiOperation(value = \"Search the dataset metadata\", notes = \"Search the dataset metadata.\") @Timed @Deprecated public Stream<DatasetDTO> search( //\n            @RequestParam @ApiParam(value = \"What to search in data sets\") final String name, //\n            @RequestParam @ApiParam(value = \"The searched name should be the full name\") final boolean strict)", "class_method_signature": "DataSetService.search( //\n            @RequestParam @ApiParam(value = \"What to search in data sets\") final String name, //\n            @RequestParam @ApiParam(value = \"The searched name should be the full name\") final boolean strict)", "testcase": false, "constructor": false}, {"identifier": "getImportParameters", "parameters": "(@PathVariable(\"import\") final String importType)", "modifiers": "@RequestMapping(value = \"/datasets/imports/{import}/parameters\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get the import parameters\", notes = \"This list can be used by user to change dataset encoding.\") @Timed @PublicAPI // This method have to return Object because it can either return the legacy List<Parameter> or the new TComp // oriented // ComponentProperties public", "return": "Object", "signature": "Object getImportParameters(@PathVariable(\"import\") final String importType)", "full_signature": "@RequestMapping(value = \"/datasets/imports/{import}/parameters\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get the import parameters\", notes = \"This list can be used by user to change dataset encoding.\") @Timed @PublicAPI // This method have to return Object because it can either return the legacy List<Parameter> or the new TComp // oriented // ComponentProperties public Object getImportParameters(@PathVariable(\"import\") final String importType)", "class_method_signature": "DataSetService.getImportParameters(@PathVariable(\"import\") final String importType)", "testcase": false, "constructor": false}, {"identifier": "getDataStoreParameters", "parameters": "(@PathVariable(\"id\") final String dataSetId)", "modifiers": "@RequestMapping(value = \"/datasets/{id}/datastore/properties\", method = GET) @ApiOperation(value = \"Get the dataset import parameters\", notes = \"This list can be used by user to change dataset encoding.\") @Timed // This method have to return Object because it can either return the legacy List<Parameter> or the new TComp // oriented // ComponentProperties public", "return": "Object", "signature": "Object getDataStoreParameters(@PathVariable(\"id\") final String dataSetId)", "full_signature": "@RequestMapping(value = \"/datasets/{id}/datastore/properties\", method = GET) @ApiOperation(value = \"Get the dataset import parameters\", notes = \"This list can be used by user to change dataset encoding.\") @Timed // This method have to return Object because it can either return the legacy List<Parameter> or the new TComp // oriented // ComponentProperties public Object getDataStoreParameters(@PathVariable(\"id\") final String dataSetId)", "class_method_signature": "DataSetService.getDataStoreParameters(@PathVariable(\"id\") final String dataSetId)", "testcase": false, "constructor": false}, {"identifier": "listSupportedImports", "parameters": "()", "modifiers": "@RequestMapping(value = \"/datasets/imports\", method = GET) @ApiOperation(value = \"list the supported encodings for dataset\", notes = \"This list can be used by user to change dataset encoding.\") @Timed @PublicAPI public", "return": "Stream<Import>", "signature": "Stream<Import> listSupportedImports()", "full_signature": "@RequestMapping(value = \"/datasets/imports\", method = GET) @ApiOperation(value = \"list the supported encodings for dataset\", notes = \"This list can be used by user to change dataset encoding.\") @Timed @PublicAPI public Stream<Import> listSupportedImports()", "class_method_signature": "DataSetService.listSupportedImports()", "testcase": false, "constructor": false}, {"identifier": "getDataSetColumnSemanticCategories", "parameters": "(\n            @ApiParam(value = \"The dataset id\") @PathVariable String datasetId,\n            @ApiParam(value = \"The column id\") @PathVariable String columnId)", "modifiers": "@RequestMapping(value = \"/datasets/{datasetId}/columns/{columnId}/types\", method = GET) @ApiOperation(value = \"list the types of the wanted column\", notes = \"This list can be used by user to change the column type.\") @Timed @PublicAPI public", "return": "List<SemanticDomain>", "signature": "List<SemanticDomain> getDataSetColumnSemanticCategories(\n            @ApiParam(value = \"The dataset id\") @PathVariable String datasetId,\n            @ApiParam(value = \"The column id\") @PathVariable String columnId)", "full_signature": "@RequestMapping(value = \"/datasets/{datasetId}/columns/{columnId}/types\", method = GET) @ApiOperation(value = \"list the types of the wanted column\", notes = \"This list can be used by user to change the column type.\") @Timed @PublicAPI public List<SemanticDomain> getDataSetColumnSemanticCategories(\n            @ApiParam(value = \"The dataset id\") @PathVariable String datasetId,\n            @ApiParam(value = \"The column id\") @PathVariable String columnId)", "class_method_signature": "DataSetService.getDataSetColumnSemanticCategories(\n            @ApiParam(value = \"The dataset id\") @PathVariable String datasetId,\n            @ApiParam(value = \"The column id\") @PathVariable String columnId)", "testcase": false, "constructor": false}, {"identifier": "checkDataSetName", "parameters": "(String dataSetName)", "modifiers": "private", "return": "void", "signature": "void checkDataSetName(String dataSetName)", "full_signature": "private void checkDataSetName(String dataSetName)", "class_method_signature": "DataSetService.checkDataSetName(String dataSetName)", "testcase": false, "constructor": false}, {"identifier": "getMaxDataSetSizeAllowed", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getMaxDataSetSizeAllowed()", "full_signature": "private long getMaxDataSetSizeAllowed()", "class_method_signature": "DataSetService.getMaxDataSetSizeAllowed()", "testcase": false, "constructor": false}, {"identifier": "findDataset", "parameters": "(Sort sort, Order order, String name, boolean nameStrict,\n            boolean certified, boolean favorite, boolean limit, Set<String> favoritesIds)", "modifiers": "private", "return": "Stream<DataSetMetadata>", "signature": "Stream<DataSetMetadata> findDataset(Sort sort, Order order, String name, boolean nameStrict,\n            boolean certified, boolean favorite, boolean limit, Set<String> favoritesIds)", "full_signature": "private Stream<DataSetMetadata> findDataset(Sort sort, Order order, String name, boolean nameStrict,\n            boolean certified, boolean favorite, boolean limit, Set<String> favoritesIds)", "class_method_signature": "DataSetService.findDataset(Sort sort, Order order, String name, boolean nameStrict,\n            boolean certified, boolean favorite, boolean limit, Set<String> favoritesIds)", "testcase": false, "constructor": false}], "file": "dataprep-dataset/src/main/java/org/talend/dataprep/dataset/service/DataSetService.java"}, "focal_method": {"identifier": "get", "parameters": "(\n            @RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\",\n                    value = \"Include metadata information in the response\") boolean metadata, //\n            @RequestParam(defaultValue = \"false\") @ApiParam(name = \"includeInternalContent\",\n                    value = \"Include internal content in the response\") boolean includeInternalContent, //\n            @RequestParam(defaultValue = \"-1\") @ApiParam(name = STORAGE_LIMIT, value = STORAGE_LIMIT) long limit, //\n            @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\",\n                    defaultValue = \"\") String filter,\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the requested data set\") String dataSetId)", "modifiers": "@RequestMapping(value = \"/datasets/{id}/content\", method = RequestMethod.GET) @ApiOperation(value = \"Get a data set by id\", notes = \"Get a data set content based on provided id. Id should be a UUID returned by the list operation. Not valid or non existing data set id returns empty content.\") @Timed @ResponseBody public", "return": "Callable<DataSet>", "body": "@RequestMapping(value = \"/datasets/{id}/content\", method = RequestMethod.GET)\n    @ApiOperation(value = \"Get a data set by id\",\n            notes = \"Get a data set content based on provided id. Id should be a UUID returned by the list operation. Not valid or non existing data set id returns empty content.\")\n    @Timed\n    @ResponseBody\n    public Callable<DataSet> get(\n            @RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\",\n                    value = \"Include metadata information in the response\") boolean metadata, //\n            @RequestParam(defaultValue = \"false\") @ApiParam(name = \"includeInternalContent\",\n                    value = \"Include internal content in the response\") boolean includeInternalContent, //\n            @RequestParam(defaultValue = \"-1\") @ApiParam(name = STORAGE_LIMIT, value = STORAGE_LIMIT) long limit, //\n            @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\",\n                    defaultValue = \"\") String filter,\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the requested data set\") String dataSetId) {\n        return () -> {\n            final Marker marker = Markers.dataset(dataSetId);\n            LOG.debug(marker, \"Get data set #{}\", dataSetId);\n            Stream<DataSetRow> stream = null;\n            try {\n                DataSetMetadata dataSetMetadata = dataSetMetadataRepository.get(dataSetId);\n                assertDataSetMetadata(dataSetMetadata, dataSetId);\n                // Build the result\n                DataSet dataSet = new DataSet();\n                if (metadata) {\n                    dataSet.setMetadata(conversionService.convert(dataSetMetadata, UserDataSetMetadata.class));\n                }\n                stream = contentStore.stream(dataSetMetadata, limit); // Disable line limit\n\n                // on-demand analyzer for dataset (See TDP-4404, migration problems)\n                if (dataSetMetadata.getRowMetadata().getColumns().stream().anyMatch(\n                        c -> c.getStatistics().getWordPatternFrequencyTable().isEmpty())) {\n                    stream = insertWordPatternAnalysis(dataSetMetadata, stream);\n                }\n\n                if (!includeInternalContent) {\n                    LOG.debug(\"Skip internal content when serving data set #{} content.\", dataSetId);\n                    stream = stream.map(r -> {\n                        final Map<String, Object> values = r.values();\n                        final Map<String, Object> filteredValues = new HashMap<>(values);\n                        // Remove technical properties from returned values.\n                        values.forEach((k, v) -> {\n                            if (k != null && k.startsWith(FlagNames.INTERNAL_PROPERTY_PREFIX)) {\n                                filteredValues.remove(k);\n                            }\n                        });\n                        filteredValues.put(FlagNames.TDP_ID, r.getTdpId()); // Include TDP_ID anyway\n                        return new DataSetRow(r.getRowMetadata(), filteredValues);\n                    });\n                }\n\n                // Filter content\n                stream = stream.filter(filterService.build(filter, dataSetMetadata.getRowMetadata()));\n\n                dataSet.setRecords(stream);\n                return dataSet;\n            } catch (Exception e) {\n                if (stream != null) {\n                    stream.close();\n                }\n                throw e;\n            } finally {\n                LOG.debug(marker, \"Get done.\");\n            }\n        };\n    }", "signature": "Callable<DataSet> get(\n            @RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\",\n                    value = \"Include metadata information in the response\") boolean metadata, //\n            @RequestParam(defaultValue = \"false\") @ApiParam(name = \"includeInternalContent\",\n                    value = \"Include internal content in the response\") boolean includeInternalContent, //\n            @RequestParam(defaultValue = \"-1\") @ApiParam(name = STORAGE_LIMIT, value = STORAGE_LIMIT) long limit, //\n            @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\",\n                    defaultValue = \"\") String filter,\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the requested data set\") String dataSetId)", "full_signature": "@RequestMapping(value = \"/datasets/{id}/content\", method = RequestMethod.GET) @ApiOperation(value = \"Get a data set by id\", notes = \"Get a data set content based on provided id. Id should be a UUID returned by the list operation. Not valid or non existing data set id returns empty content.\") @Timed @ResponseBody public Callable<DataSet> get(\n            @RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\",\n                    value = \"Include metadata information in the response\") boolean metadata, //\n            @RequestParam(defaultValue = \"false\") @ApiParam(name = \"includeInternalContent\",\n                    value = \"Include internal content in the response\") boolean includeInternalContent, //\n            @RequestParam(defaultValue = \"-1\") @ApiParam(name = STORAGE_LIMIT, value = STORAGE_LIMIT) long limit, //\n            @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\",\n                    defaultValue = \"\") String filter,\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the requested data set\") String dataSetId)", "class_method_signature": "DataSetService.get(\n            @RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\",\n                    value = \"Include metadata information in the response\") boolean metadata, //\n            @RequestParam(defaultValue = \"false\") @ApiParam(name = \"includeInternalContent\",\n                    value = \"Include internal content in the response\") boolean includeInternalContent, //\n            @RequestParam(defaultValue = \"-1\") @ApiParam(name = STORAGE_LIMIT, value = STORAGE_LIMIT) long limit, //\n            @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\",\n                    defaultValue = \"\") String filter,\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the requested data set\") String dataSetId)", "testcase": false, "constructor": false, "invocations": ["dataset", "debug", "get", "assertDataSetMetadata", "setMetadata", "convert", "stream", "anyMatch", "stream", "getColumns", "getRowMetadata", "isEmpty", "getWordPatternFrequencyTable", "getStatistics", "insertWordPatternAnalysis", "debug", "map", "values", "forEach", "startsWith", "remove", "put", "getTdpId", "getRowMetadata", "filter", "build", "getRowMetadata", "setRecords", "close", "debug"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}