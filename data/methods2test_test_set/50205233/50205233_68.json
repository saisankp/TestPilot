{"test_class": {"identifier": "JacksonWriterTest", "superclass": "", "interfaces": "implements Testing", "fields": [{"original_string": "private Document doc;", "modifier": "private", "type": "Document", "declarator": "doc", "var_name": "doc"}, {"original_string": "private Document after;", "modifier": "private", "type": "Document", "declarator": "after", "var_name": "after"}, {"original_string": "private JacksonWriter writer = JacksonWriter.INSTANCE;", "modifier": "private", "type": "JacksonWriter", "declarator": "writer = JacksonWriter.INSTANCE", "var_name": "writer"}, {"original_string": "private JacksonReader reader = JacksonReader.DEFAULT_INSTANCE;", "modifier": "private", "type": "JacksonReader", "declarator": "reader = JacksonReader.DEFAULT_INSTANCE", "var_name": "reader"}], "file": "debezium-core/src/test/java/io/debezium/document/JacksonWriterTest.java"}, "test_case": {"identifier": "shouldWriteDocumentWithNestedDocument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldWriteDocumentWithNestedDocument() throws Exception {\n        doc.set(\"field1\", \"value\");\n        doc.set(\"field2\", 22);\n        doc.set(\"field3\", Document.create(\"a\", \"A\", \"b\", \"B\"));\n        after = reader.read(writer.write(doc));\n        Testing.print(after);\n        assertThat(after.getString(\"field1\")).isEqualTo(\"value\");\n        assertThat(after.getInteger(\"field2\")).isEqualTo(22);\n        assertThat(after.size()).isEqualTo(3);\n        Document nested = after.getDocument(\"field3\");\n        assertThat(nested.getString(\"a\")).isEqualTo(\"A\");\n        assertThat(nested.getString(\"b\")).isEqualTo(\"B\");\n        assertThat(nested.size()).isEqualTo(2);\n    }", "signature": "void shouldWriteDocumentWithNestedDocument()", "full_signature": "@Test public void shouldWriteDocumentWithNestedDocument()", "class_method_signature": "JacksonWriterTest.shouldWriteDocumentWithNestedDocument()", "testcase": true, "constructor": false, "invocations": ["set", "set", "set", "create", "read", "write", "print", "isEqualTo", "assertThat", "getString", "isEqualTo", "assertThat", "getInteger", "isEqualTo", "assertThat", "size", "getDocument", "isEqualTo", "assertThat", "getString", "isEqualTo", "assertThat", "getString", "isEqualTo", "assertThat", "size"]}, "focal_class": {"identifier": "JacksonWriter", "superclass": "", "interfaces": "implements DocumentWriter, ArrayWriter", "fields": [{"original_string": "public static final JacksonWriter INSTANCE = new JacksonWriter(false);", "modifier": "public static final", "type": "JacksonWriter", "declarator": "INSTANCE = new JacksonWriter(false)", "var_name": "INSTANCE"}, {"original_string": "public static final JacksonWriter PRETTY_WRITER = new JacksonWriter(true);", "modifier": "public static final", "type": "JacksonWriter", "declarator": "PRETTY_WRITER = new JacksonWriter(true)", "var_name": "PRETTY_WRITER"}, {"original_string": "private static final JsonFactory factory;", "modifier": "private static final", "type": "JsonFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private final boolean pretty;", "modifier": "private final", "type": "boolean", "declarator": "pretty", "var_name": "pretty"}], "methods": [{"identifier": "JacksonWriter", "parameters": "(boolean pretty)", "modifiers": "private", "return": "", "signature": " JacksonWriter(boolean pretty)", "full_signature": "private  JacksonWriter(boolean pretty)", "class_method_signature": "JacksonWriter.JacksonWriter(boolean pretty)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(Document document, OutputStream jsonStream)", "modifiers": "@Override public", "return": "void", "signature": "void write(Document document, OutputStream jsonStream)", "full_signature": "@Override public void write(Document document, OutputStream jsonStream)", "class_method_signature": "JacksonWriter.write(Document document, OutputStream jsonStream)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Document document, Writer jsonWriter)", "modifiers": "@Override public", "return": "void", "signature": "void write(Document document, Writer jsonWriter)", "full_signature": "@Override public void write(Document document, Writer jsonWriter)", "class_method_signature": "JacksonWriter.write(Document document, Writer jsonWriter)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Document document)", "modifiers": "@Override public", "return": "String", "signature": "String write(Document document)", "full_signature": "@Override public String write(Document document)", "class_method_signature": "JacksonWriter.write(Document document)", "testcase": false, "constructor": false}, {"identifier": "writeAsBytes", "parameters": "(Document document)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] writeAsBytes(Document document)", "full_signature": "@Override public byte[] writeAsBytes(Document document)", "class_method_signature": "JacksonWriter.writeAsBytes(Document document)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Array array, OutputStream jsonStream)", "modifiers": "@Override public", "return": "void", "signature": "void write(Array array, OutputStream jsonStream)", "full_signature": "@Override public void write(Array array, OutputStream jsonStream)", "class_method_signature": "JacksonWriter.write(Array array, OutputStream jsonStream)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Array array, Writer jsonWriter)", "modifiers": "@Override public", "return": "void", "signature": "void write(Array array, Writer jsonWriter)", "full_signature": "@Override public void write(Array array, Writer jsonWriter)", "class_method_signature": "JacksonWriter.write(Array array, Writer jsonWriter)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Array array)", "modifiers": "@Override public", "return": "String", "signature": "String write(Array array)", "full_signature": "@Override public String write(Array array)", "class_method_signature": "JacksonWriter.write(Array array)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(JsonGenerator generator)", "modifiers": "protected", "return": "void", "signature": "void configure(JsonGenerator generator)", "full_signature": "protected void configure(JsonGenerator generator)", "class_method_signature": "JacksonWriter.configure(JsonGenerator generator)", "testcase": false, "constructor": false}, {"identifier": "writeDocument", "parameters": "(Document document, JsonGenerator generator)", "modifiers": "protected", "return": "void", "signature": "void writeDocument(Document document, JsonGenerator generator)", "full_signature": "protected void writeDocument(Document document, JsonGenerator generator)", "class_method_signature": "JacksonWriter.writeDocument(Document document, JsonGenerator generator)", "testcase": false, "constructor": false}, {"identifier": "writeArray", "parameters": "(Array array, JsonGenerator generator)", "modifiers": "protected", "return": "void", "signature": "void writeArray(Array array, JsonGenerator generator)", "full_signature": "protected void writeArray(Array array, JsonGenerator generator)", "class_method_signature": "JacksonWriter.writeArray(Array array, JsonGenerator generator)", "testcase": false, "constructor": false}, {"identifier": "writeValue", "parameters": "(Value value, JsonGenerator generator)", "modifiers": "protected", "return": "void", "signature": "void writeValue(Value value, JsonGenerator generator)", "full_signature": "protected void writeValue(Value value, JsonGenerator generator)", "class_method_signature": "JacksonWriter.writeValue(Value value, JsonGenerator generator)", "testcase": false, "constructor": false}], "file": "debezium-core/src/main/java/io/debezium/document/JacksonWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(Document document, OutputStream jsonStream)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void write(Document document, OutputStream jsonStream) throws IOException {\n        try (JsonGenerator jsonGenerator = factory.createGenerator(jsonStream)) {\n            configure(jsonGenerator);\n            writeDocument(document, jsonGenerator);\n        }\n    }", "signature": "void write(Document document, OutputStream jsonStream)", "full_signature": "@Override public void write(Document document, OutputStream jsonStream)", "class_method_signature": "JacksonWriter.write(Document document, OutputStream jsonStream)", "testcase": false, "constructor": false, "invocations": ["createGenerator", "configure", "writeDocument"]}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}