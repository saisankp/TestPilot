{"test_class": {"identifier": "UpgradeServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private UpgradeService service;", "modifier": "@InjectMocks\n    private", "type": "UpgradeService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n    private UpgradeTaskRepository repository;", "modifier": "@Mock\n    private", "type": "UpgradeTaskRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private List<UpgradeTask> tasks = new ArrayList<>();", "modifier": "private", "type": "List<UpgradeTask>", "declarator": "tasks = new ArrayList<>()", "var_name": "tasks"}], "file": "dataprep-upgrade-common/src/test/java/org/talend/dataprep/upgrade/UpgradeServiceTest.java"}, "test_case": {"identifier": "shouldApplyTasksForVersion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldApplyTasksForVersion() throws Exception {\n        // given\n        List<UpgradeTask> expected = new ArrayList<>();\n        expected.add(new MockUpgradeTask(\"1.2.0-PE\", \"1.2.0-preums\", 1, VERSION));\n        expected.add(new MockUpgradeTask(\"1.2.0-PE\", \"1.2.0-deuz\", 2, VERSION));\n        expected.add(new MockUpgradeTask(\"1.2.0-PE\", \"1.2.0-troiz\", 3, VERSION));\n\n        List<UpgradeTask> unexpected = new ArrayList<>();\n        unexpected.add(new MockUpgradeTask(\"1.2.0-PE\", \"1.2.0-deuz\", 2, USER));\n        unexpected.add(new MockUpgradeTask(\"1.3.0-PE\", \"1.3.0-1-troiz\", 3, USER));\n        unexpected.add(new MockUpgradeTask(\"1.4.0-PE\", \"1.4.0-preums\", 1, USER));\n\n        tasks.addAll(expected);\n        tasks.addAll(unexpected);\n\n        // when\n        when(repository.isAlreadyApplied(anyString(), any())).thenReturn(false);\n        service.upgradeVersion();\n\n        // then\n        for (UpgradeTask task : expected) {\n            final MockUpgradeTask mockTask = (MockUpgradeTask) task;\n            assertTrue(mockTask.applied);\n        }\n        for (UpgradeTask task : unexpected) {\n            final MockUpgradeTask mockTask = (MockUpgradeTask) task;\n            assertFalse(mockTask.applied);\n        }\n    }", "signature": "void shouldApplyTasksForVersion()", "full_signature": "@Test public void shouldApplyTasksForVersion()", "class_method_signature": "UpgradeServiceTest.shouldApplyTasksForVersion()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "addAll", "addAll", "thenReturn", "when", "isAlreadyApplied", "anyString", "any", "upgradeVersion", "assertTrue", "assertFalse"]}, "focal_class": {"identifier": "UpgradeService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = getLogger(UpgradeService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = getLogger(UpgradeService.class)", "var_name": "LOG"}, {"original_string": "@Autowired\n    private UpgradeTaskRepository repository;", "modifier": "@Autowired\n    private", "type": "UpgradeTaskRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Autowired(required = false)\n    private List<UpgradeTask> tasks = emptyList();", "modifier": "@Autowired(required = false)\n    private", "type": "List<UpgradeTask>", "declarator": "tasks = emptyList()", "var_name": "tasks"}], "methods": [{"identifier": "sortAndCheckTasks", "parameters": "()", "modifiers": "@PostConstruct", "return": "void", "signature": "void sortAndCheckTasks()", "full_signature": "@PostConstruct void sortAndCheckTasks()", "class_method_signature": "UpgradeService.sortAndCheckTasks()", "testcase": false, "constructor": false}, {"identifier": "needUpgrade", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean needUpgrade()", "full_signature": "public boolean needUpgrade()", "class_method_signature": "UpgradeService.needUpgrade()", "testcase": false, "constructor": false}, {"identifier": "upgradeVersion", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void upgradeVersion()", "full_signature": "public void upgradeVersion()", "class_method_signature": "UpgradeService.upgradeVersion()", "testcase": false, "constructor": false}, {"identifier": "upgradeUser", "parameters": "(String userId)", "modifiers": "public", "return": "void", "signature": "void upgradeUser(String userId)", "full_signature": "public void upgradeUser(String userId)", "class_method_signature": "UpgradeService.upgradeUser(String userId)", "testcase": false, "constructor": false}, {"identifier": "setTasks", "parameters": "(List<UpgradeTask> tasks)", "modifiers": "", "return": "void", "signature": "void setTasks(List<UpgradeTask> tasks)", "full_signature": " void setTasks(List<UpgradeTask> tasks)", "class_method_signature": "UpgradeService.setTasks(List<UpgradeTask> tasks)", "testcase": false, "constructor": false}], "file": "dataprep-upgrade-common/src/main/java/org/talend/dataprep/upgrade/UpgradeService.java"}, "focal_method": {"identifier": "upgradeVersion", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void upgradeVersion() {\n\n        LOG.info(\"Global upgrade process starting\");\n\n        int alreadyApplied = 0;\n        int numberOfTasksApplied = 0;\n        for (UpgradeTask task : tasks) {\n\n            final UpgradeTaskId taskId = task.getId();\n\n            // skip non version upgrade task\n            if (task.getTarget() != VERSION) {\n                LOG.debug(\"{} does not target version\", taskId);\n                continue;\n            }\n\n            final String targetId = VERSION.name() + '-' + taskId.getVersion();\n\n            if (repository.isAlreadyApplied(targetId, taskId)) {\n                LOG.debug(\"{} already applied, let's skip it\", taskId);\n                alreadyApplied++;\n            } else {\n                LOG.debug(\"apply upgrade {}\", taskId);\n                try {\n                    task.run();\n                } catch (Exception exception) {\n                    LOG.error(\"Failed to apply upgrade {}\", taskId, exception);\n                    break;\n                }\n                repository.applied(targetId, taskId);\n                numberOfTasksApplied++;\n            }\n        }\n        LOG.info(\"Global upgrade process finished, {}/{} upgrade(s) performed ({} already applied).\",\n                numberOfTasksApplied, tasks.size(), alreadyApplied);\n    }", "signature": "void upgradeVersion()", "full_signature": "public void upgradeVersion()", "class_method_signature": "UpgradeService.upgradeVersion()", "testcase": false, "constructor": false, "invocations": ["info", "getId", "getTarget", "debug", "name", "getVersion", "isAlreadyApplied", "debug", "debug", "run", "error", "applied", "info", "size"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}