{"test_class": {"identifier": "ZMSAuthorizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String ZMS_CLIENT_PROP_TEST_ADMIN = \"athenz.zms.client.test_admin\";", "modifier": "private static", "type": "String", "declarator": "ZMS_CLIENT_PROP_TEST_ADMIN = \"athenz.zms.client.test_admin\"", "var_name": "ZMS_CLIENT_PROP_TEST_ADMIN"}, {"original_string": "private static final String AUDIT_REF = \"zmsjcltauthtest\";", "modifier": "private static final", "type": "String", "declarator": "AUDIT_REF = \"zmsjcltauthtest\"", "var_name": "AUDIT_REF"}, {"original_string": "private String systemAdminUser = null;", "modifier": "private", "type": "String", "declarator": "systemAdminUser = null", "var_name": "systemAdminUser"}, {"original_string": "private String systemAdminFullUser = null;", "modifier": "private", "type": "String", "declarator": "systemAdminFullUser = null", "var_name": "systemAdminFullUser"}, {"original_string": "private final String zmsUrl = \"http://localhost:10080/\";", "modifier": "private final", "type": "String", "declarator": "zmsUrl = \"http://localhost:10080/\"", "var_name": "zmsUrl"}], "file": "clients/java/zms/src/test/java/com/yahoo/athenz/zms/ZMSAuthorizerTest.java"}, "test_case": {"identifier": "testIsRoleToken", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsRoleToken() {\n        String domain = \"AuthorizerRoleToken\";\n        ZMSAuthorizer authorizer = new ZMSAuthorizer(zmsUrl, domain);\n        \n        assertTrue(authorizer.isRoleToken(\"v=Z1;d=domain;r=roles;s=signature\"));\n        assertTrue(authorizer.isRoleToken(\"d=domain;r=roles;v=Z1;s=signature\"));\n        assertFalse(authorizer.isRoleToken(\"v=S1;d=domain;n=server;s=signature\"));\n        assertFalse(authorizer.isRoleToken(\"d=domain;r=roles;s=signature\"));\n        assertFalse(authorizer.isRoleToken(\"vZ1\"));\n        authorizer.close();\n    }", "signature": "void testIsRoleToken()", "full_signature": "@Test public void testIsRoleToken()", "class_method_signature": "ZMSAuthorizerTest.testIsRoleToken()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isRoleToken", "assertTrue", "isRoleToken", "assertFalse", "isRoleToken", "assertFalse", "isRoleToken", "assertFalse", "isRoleToken", "close"]}, "focal_class": {"identifier": "ZMSAuthorizer", "superclass": "", "interfaces": "implements Authorizer, Closeable", "fields": [{"original_string": "String endpoint = null;", "modifier": "", "type": "String", "declarator": "endpoint = null", "var_name": "endpoint"}, {"original_string": "String serviceDomain = null;", "modifier": "", "type": "String", "declarator": "serviceDomain = null", "var_name": "serviceDomain"}, {"original_string": "protected ZMSClient client = null;", "modifier": "protected", "type": "ZMSClient", "declarator": "client = null", "var_name": "client"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ZMSAuthorizer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ZMSAuthorizer.class)", "var_name": "LOGGER"}, {"original_string": "private static final PrincipalAuthority PRINCIPAL_AUTHORITY = new PrincipalAuthority();", "modifier": "private static final", "type": "PrincipalAuthority", "declarator": "PRINCIPAL_AUTHORITY = new PrincipalAuthority()", "var_name": "PRINCIPAL_AUTHORITY"}, {"original_string": "private static final RoleAuthority ROLE_AUTHORITY = new RoleAuthority();", "modifier": "private static final", "type": "RoleAuthority", "declarator": "ROLE_AUTHORITY = new RoleAuthority()", "var_name": "ROLE_AUTHORITY"}], "methods": [{"identifier": "ZMSAuthorizer", "parameters": "(String serviceDomain)", "modifiers": "public", "return": "", "signature": " ZMSAuthorizer(String serviceDomain)", "full_signature": "public  ZMSAuthorizer(String serviceDomain)", "class_method_signature": "ZMSAuthorizer.ZMSAuthorizer(String serviceDomain)", "testcase": false, "constructor": true}, {"identifier": "ZMSAuthorizer", "parameters": "(String endpoint, String serviceDomain)", "modifiers": "public", "return": "", "signature": " ZMSAuthorizer(String endpoint, String serviceDomain)", "full_signature": "public  ZMSAuthorizer(String endpoint, String serviceDomain)", "class_method_signature": "ZMSAuthorizer.ZMSAuthorizer(String endpoint, String serviceDomain)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ZMSAuthorizer.close()", "testcase": false, "constructor": false}, {"identifier": "setZMSClient", "parameters": "(ZMSClient client)", "modifiers": "public", "return": "void", "signature": "void setZMSClient(ZMSClient client)", "full_signature": "public void setZMSClient(ZMSClient client)", "class_method_signature": "ZMSAuthorizer.setZMSClient(ZMSClient client)", "testcase": false, "constructor": false}, {"identifier": "access", "parameters": "(String action, String resource, String token, String trustDomain)", "modifiers": "public", "return": "boolean", "signature": "boolean access(String action, String resource, String token, String trustDomain)", "full_signature": "public boolean access(String action, String resource, String token, String trustDomain)", "class_method_signature": "ZMSAuthorizer.access(String action, String resource, String token, String trustDomain)", "testcase": false, "constructor": false}, {"identifier": "access", "parameters": "(String action, String resource, Principal principal, String trustDomain)", "modifiers": "public", "return": "boolean", "signature": "boolean access(String action, String resource, Principal principal, String trustDomain)", "full_signature": "public boolean access(String action, String resource, Principal principal, String trustDomain)", "class_method_signature": "ZMSAuthorizer.access(String action, String resource, Principal principal, String trustDomain)", "testcase": false, "constructor": false}, {"identifier": "isRoleToken", "parameters": "(String token)", "modifiers": "", "return": "boolean", "signature": "boolean isRoleToken(String token)", "full_signature": " boolean isRoleToken(String token)", "class_method_signature": "ZMSAuthorizer.isRoleToken(String token)", "testcase": false, "constructor": false}], "file": "clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSAuthorizer.java"}, "focal_method": {"identifier": "isRoleToken", "parameters": "(String token)", "modifiers": "", "return": "boolean", "body": "boolean isRoleToken(String token) {\n        \n        // we're only looking for the version component\n        // which is usually the first one so we're not\n        // going to parse the full token\n        \n        boolean roleToken = false;\n        for (String item : token.split(\";\")) {\n            if (\"v=Z1\".equalsIgnoreCase(item)) {\n                roleToken = true;\n                break;\n            }\n        }\n        return roleToken;\n    }", "signature": "boolean isRoleToken(String token)", "full_signature": " boolean isRoleToken(String token)", "class_method_signature": "ZMSAuthorizer.isRoleToken(String token)", "testcase": false, "constructor": false, "invocations": ["split", "equalsIgnoreCase"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}