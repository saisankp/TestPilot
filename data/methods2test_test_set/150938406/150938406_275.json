{"test_class": {"identifier": "DenseMatrixTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double TOL = 1.0e-6;", "modifier": "private static final", "type": "double", "declarator": "TOL = 1.0e-6", "var_name": "TOL"}], "file": "core/src/test/java/com/alibaba/alink/common/linalg/DenseMatrixTest.java"}, "test_case": {"identifier": "testMinus", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMinus() throws Exception {\n        DenseMatrix matA = new DenseMatrix(new double[][]{\n            new double[]{1, 3, 5},\n            new double[]{2, 4, 6},\n        });\n        DenseMatrix matB = DenseMatrix.ones(2, 3);\n        DenseMatrix matC = matA.minus(matB);\n        Assert.assertArrayEquals(matC.getData(), new double[]{0, 1, 2, 3, 4, 5}, TOL);\n    }", "signature": "void testMinus()", "full_signature": "@Test public void testMinus()", "class_method_signature": "DenseMatrixTest.testMinus()", "testcase": true, "constructor": false, "invocations": ["ones", "minus", "assertArrayEquals", "getData"]}, "focal_class": {"identifier": "DenseMatrix", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "int m;", "modifier": "", "type": "int", "declarator": "m", "var_name": "m"}, {"original_string": "int n;", "modifier": "", "type": "int", "declarator": "n", "var_name": "n"}, {"original_string": "double[] data;", "modifier": "", "type": "double[]", "declarator": "data", "var_name": "data"}], "methods": [{"identifier": "DenseMatrix", "parameters": "()", "modifiers": "public", "return": "", "signature": " DenseMatrix()", "full_signature": "public  DenseMatrix()", "class_method_signature": "DenseMatrix.DenseMatrix()", "testcase": false, "constructor": true}, {"identifier": "DenseMatrix", "parameters": "(int m, int n)", "modifiers": "public", "return": "", "signature": " DenseMatrix(int m, int n)", "full_signature": "public  DenseMatrix(int m, int n)", "class_method_signature": "DenseMatrix.DenseMatrix(int m, int n)", "testcase": false, "constructor": true}, {"identifier": "DenseMatrix", "parameters": "(int m, int n, double[] data)", "modifiers": "public", "return": "", "signature": " DenseMatrix(int m, int n, double[] data)", "full_signature": "public  DenseMatrix(int m, int n, double[] data)", "class_method_signature": "DenseMatrix.DenseMatrix(int m, int n, double[] data)", "testcase": false, "constructor": true}, {"identifier": "DenseMatrix", "parameters": "(int m, int n, double[] data, boolean inRowMajor)", "modifiers": "public", "return": "", "signature": " DenseMatrix(int m, int n, double[] data, boolean inRowMajor)", "full_signature": "public  DenseMatrix(int m, int n, double[] data, boolean inRowMajor)", "class_method_signature": "DenseMatrix.DenseMatrix(int m, int n, double[] data, boolean inRowMajor)", "testcase": false, "constructor": true}, {"identifier": "DenseMatrix", "parameters": "(double[][] data)", "modifiers": "public", "return": "", "signature": " DenseMatrix(double[][] data)", "full_signature": "public  DenseMatrix(double[][] data)", "class_method_signature": "DenseMatrix.DenseMatrix(double[][] data)", "testcase": false, "constructor": true}, {"identifier": "eye", "parameters": "(int n)", "modifiers": "public static", "return": "DenseMatrix", "signature": "DenseMatrix eye(int n)", "full_signature": "public static DenseMatrix eye(int n)", "class_method_signature": "DenseMatrix.eye(int n)", "testcase": false, "constructor": false}, {"identifier": "eye", "parameters": "(int m, int n)", "modifiers": "public static", "return": "DenseMatrix", "signature": "DenseMatrix eye(int m, int n)", "full_signature": "public static DenseMatrix eye(int m, int n)", "class_method_signature": "DenseMatrix.eye(int m, int n)", "testcase": false, "constructor": false}, {"identifier": "zeros", "parameters": "(int m, int n)", "modifiers": "public static", "return": "DenseMatrix", "signature": "DenseMatrix zeros(int m, int n)", "full_signature": "public static DenseMatrix zeros(int m, int n)", "class_method_signature": "DenseMatrix.zeros(int m, int n)", "testcase": false, "constructor": false}, {"identifier": "ones", "parameters": "(int m, int n)", "modifiers": "public static", "return": "DenseMatrix", "signature": "DenseMatrix ones(int m, int n)", "full_signature": "public static DenseMatrix ones(int m, int n)", "class_method_signature": "DenseMatrix.ones(int m, int n)", "testcase": false, "constructor": false}, {"identifier": "rand", "parameters": "(int m, int n)", "modifiers": "public static", "return": "DenseMatrix", "signature": "DenseMatrix rand(int m, int n)", "full_signature": "public static DenseMatrix rand(int m, int n)", "class_method_signature": "DenseMatrix.rand(int m, int n)", "testcase": false, "constructor": false}, {"identifier": "randSymmetric", "parameters": "(int n)", "modifiers": "public static", "return": "DenseMatrix", "signature": "DenseMatrix randSymmetric(int n)", "full_signature": "public static DenseMatrix randSymmetric(int n)", "class_method_signature": "DenseMatrix.randSymmetric(int n)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int i, int j)", "modifiers": "public", "return": "double", "signature": "double get(int i, int j)", "full_signature": "public double get(int i, int j)", "class_method_signature": "DenseMatrix.get(int i, int j)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getData()", "full_signature": "public double[] getData()", "class_method_signature": "DenseMatrix.getData()", "testcase": false, "constructor": false}, {"identifier": "getArrayCopy2D", "parameters": "()", "modifiers": "public", "return": "double[][]", "signature": "double[][] getArrayCopy2D()", "full_signature": "public double[][] getArrayCopy2D()", "class_method_signature": "DenseMatrix.getArrayCopy2D()", "testcase": false, "constructor": false}, {"identifier": "getArrayCopy1D", "parameters": "(boolean inRowMajor)", "modifiers": "public", "return": "double[]", "signature": "double[] getArrayCopy1D(boolean inRowMajor)", "full_signature": "public double[] getArrayCopy1D(boolean inRowMajor)", "class_method_signature": "DenseMatrix.getArrayCopy1D(boolean inRowMajor)", "testcase": false, "constructor": false}, {"identifier": "getRow", "parameters": "(int row)", "modifiers": "public", "return": "double[]", "signature": "double[] getRow(int row)", "full_signature": "public double[] getRow(int row)", "class_method_signature": "DenseMatrix.getRow(int row)", "testcase": false, "constructor": false}, {"identifier": "getColumn", "parameters": "(int col)", "modifiers": "public", "return": "double[]", "signature": "double[] getColumn(int col)", "full_signature": "public double[] getColumn(int col)", "class_method_signature": "DenseMatrix.getColumn(int col)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "DenseMatrix", "signature": "DenseMatrix clone()", "full_signature": "@Override public DenseMatrix clone()", "class_method_signature": "DenseMatrix.clone()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "DenseMatrix.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "selectRows", "parameters": "(int[] rows)", "modifiers": "public", "return": "DenseMatrix", "signature": "DenseMatrix selectRows(int[] rows)", "full_signature": "public DenseMatrix selectRows(int[] rows)", "class_method_signature": "DenseMatrix.selectRows(int[] rows)", "testcase": false, "constructor": false}, {"identifier": "getSubMatrix", "parameters": "(int m0, int m1, int n0, int n1)", "modifiers": "public", "return": "DenseMatrix", "signature": "DenseMatrix getSubMatrix(int m0, int m1, int n0, int n1)", "full_signature": "public DenseMatrix getSubMatrix(int m0, int m1, int n0, int n1)", "class_method_signature": "DenseMatrix.getSubMatrix(int m0, int m1, int n0, int n1)", "testcase": false, "constructor": false}, {"identifier": "setSubMatrix", "parameters": "(DenseMatrix sub, int m0, int m1, int n0, int n1)", "modifiers": "public", "return": "void", "signature": "void setSubMatrix(DenseMatrix sub, int m0, int m1, int n0, int n1)", "full_signature": "public void setSubMatrix(DenseMatrix sub, int m0, int m1, int n0, int n1)", "class_method_signature": "DenseMatrix.setSubMatrix(DenseMatrix sub, int m0, int m1, int n0, int n1)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int i, int j, double s)", "modifiers": "public", "return": "void", "signature": "void set(int i, int j, double s)", "full_signature": "public void set(int i, int j, double s)", "class_method_signature": "DenseMatrix.set(int i, int j, double s)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int i, int j, double s)", "modifiers": "public", "return": "void", "signature": "void add(int i, int j, double s)", "full_signature": "public void add(int i, int j, double s)", "class_method_signature": "DenseMatrix.add(int i, int j, double s)", "testcase": false, "constructor": false}, {"identifier": "isSquare", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSquare()", "full_signature": "public boolean isSquare()", "class_method_signature": "DenseMatrix.isSquare()", "testcase": false, "constructor": false}, {"identifier": "isSymmetric", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSymmetric()", "full_signature": "public boolean isSymmetric()", "class_method_signature": "DenseMatrix.isSymmetric()", "testcase": false, "constructor": false}, {"identifier": "numRows", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int numRows()", "full_signature": "public int numRows()", "class_method_signature": "DenseMatrix.numRows()", "testcase": false, "constructor": false}, {"identifier": "numCols", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int numCols()", "full_signature": "public int numCols()", "class_method_signature": "DenseMatrix.numCols()", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double sum()", "full_signature": "public double sum()", "class_method_signature": "DenseMatrix.sum()", "testcase": false, "constructor": false}, {"identifier": "scale", "parameters": "(double v)", "modifiers": "public", "return": "DenseMatrix", "signature": "DenseMatrix scale(double v)", "full_signature": "public DenseMatrix scale(double v)", "class_method_signature": "DenseMatrix.scale(double v)", "testcase": false, "constructor": false}, {"identifier": "scaleEqual", "parameters": "(double v)", "modifiers": "public", "return": "void", "signature": "void scaleEqual(double v)", "full_signature": "public void scaleEqual(double v)", "class_method_signature": "DenseMatrix.scaleEqual(double v)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(DenseMatrix mat)", "modifiers": "public", "return": "DenseMatrix", "signature": "DenseMatrix plus(DenseMatrix mat)", "full_signature": "public DenseMatrix plus(DenseMatrix mat)", "class_method_signature": "DenseMatrix.plus(DenseMatrix mat)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(double alpha)", "modifiers": "public", "return": "DenseMatrix", "signature": "DenseMatrix plus(double alpha)", "full_signature": "public DenseMatrix plus(double alpha)", "class_method_signature": "DenseMatrix.plus(double alpha)", "testcase": false, "constructor": false}, {"identifier": "plusEquals", "parameters": "(DenseMatrix mat)", "modifiers": "public", "return": "void", "signature": "void plusEquals(DenseMatrix mat)", "full_signature": "public void plusEquals(DenseMatrix mat)", "class_method_signature": "DenseMatrix.plusEquals(DenseMatrix mat)", "testcase": false, "constructor": false}, {"identifier": "plusEquals", "parameters": "(double alpha)", "modifiers": "public", "return": "void", "signature": "void plusEquals(double alpha)", "full_signature": "public void plusEquals(double alpha)", "class_method_signature": "DenseMatrix.plusEquals(double alpha)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(DenseMatrix mat)", "modifiers": "public", "return": "DenseMatrix", "signature": "DenseMatrix minus(DenseMatrix mat)", "full_signature": "public DenseMatrix minus(DenseMatrix mat)", "class_method_signature": "DenseMatrix.minus(DenseMatrix mat)", "testcase": false, "constructor": false}, {"identifier": "minusEquals", "parameters": "(DenseMatrix mat)", "modifiers": "public", "return": "void", "signature": "void minusEquals(DenseMatrix mat)", "full_signature": "public void minusEquals(DenseMatrix mat)", "class_method_signature": "DenseMatrix.minusEquals(DenseMatrix mat)", "testcase": false, "constructor": false}, {"identifier": "multiplies", "parameters": "(DenseMatrix mat)", "modifiers": "public", "return": "DenseMatrix", "signature": "DenseMatrix multiplies(DenseMatrix mat)", "full_signature": "public DenseMatrix multiplies(DenseMatrix mat)", "class_method_signature": "DenseMatrix.multiplies(DenseMatrix mat)", "testcase": false, "constructor": false}, {"identifier": "multiplies", "parameters": "(DenseVector x)", "modifiers": "public", "return": "DenseVector", "signature": "DenseVector multiplies(DenseVector x)", "full_signature": "public DenseVector multiplies(DenseVector x)", "class_method_signature": "DenseMatrix.multiplies(DenseVector x)", "testcase": false, "constructor": false}, {"identifier": "multiplies", "parameters": "(SparseVector x)", "modifiers": "public", "return": "DenseVector", "signature": "DenseVector multiplies(SparseVector x)", "full_signature": "public DenseVector multiplies(SparseVector x)", "class_method_signature": "DenseMatrix.multiplies(SparseVector x)", "testcase": false, "constructor": false}, {"identifier": "transpose", "parameters": "()", "modifiers": "public", "return": "DenseMatrix", "signature": "DenseMatrix transpose()", "full_signature": "public DenseMatrix transpose()", "class_method_signature": "DenseMatrix.transpose()", "testcase": false, "constructor": false}, {"identifier": "toColumnMajor", "parameters": "(int m, int n, double[] data)", "modifiers": "private static", "return": "void", "signature": "void toColumnMajor(int m, int n, double[] data)", "full_signature": "private static void toColumnMajor(int m, int n, double[] data)", "class_method_signature": "DenseMatrix.toColumnMajor(int m, int n, double[] data)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DenseMatrix.toString()", "testcase": false, "constructor": false}, {"identifier": "norm2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double norm2()", "full_signature": "public double norm2()", "class_method_signature": "DenseMatrix.norm2()", "testcase": false, "constructor": false}, {"identifier": "cond", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double cond()", "full_signature": "public double cond()", "class_method_signature": "DenseMatrix.cond()", "testcase": false, "constructor": false}, {"identifier": "det", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double det()", "full_signature": "public double det()", "class_method_signature": "DenseMatrix.det()", "testcase": false, "constructor": false}, {"identifier": "rank", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int rank()", "full_signature": "public int rank()", "class_method_signature": "DenseMatrix.rank()", "testcase": false, "constructor": false}, {"identifier": "solve", "parameters": "(DenseMatrix matB)", "modifiers": "public", "return": "DenseMatrix", "signature": "DenseMatrix solve(DenseMatrix matB)", "full_signature": "public DenseMatrix solve(DenseMatrix matB)", "class_method_signature": "DenseMatrix.solve(DenseMatrix matB)", "testcase": false, "constructor": false}, {"identifier": "solve", "parameters": "(DenseVector b)", "modifiers": "public", "return": "DenseVector", "signature": "DenseVector solve(DenseVector b)", "full_signature": "public DenseVector solve(DenseVector b)", "class_method_signature": "DenseMatrix.solve(DenseVector b)", "testcase": false, "constructor": false}, {"identifier": "solveLS", "parameters": "(DenseMatrix matB)", "modifiers": "public", "return": "DenseMatrix", "signature": "DenseMatrix solveLS(DenseMatrix matB)", "full_signature": "public DenseMatrix solveLS(DenseMatrix matB)", "class_method_signature": "DenseMatrix.solveLS(DenseMatrix matB)", "testcase": false, "constructor": false}, {"identifier": "solveLS", "parameters": "(DenseVector b)", "modifiers": "public", "return": "DenseVector", "signature": "DenseVector solveLS(DenseVector b)", "full_signature": "public DenseVector solveLS(DenseVector b)", "class_method_signature": "DenseMatrix.solveLS(DenseVector b)", "testcase": false, "constructor": false}, {"identifier": "inverse", "parameters": "()", "modifiers": "public", "return": "DenseMatrix", "signature": "DenseMatrix inverse()", "full_signature": "public DenseMatrix inverse()", "class_method_signature": "DenseMatrix.inverse()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/common/linalg/DenseMatrix.java"}, "focal_method": {"identifier": "minus", "parameters": "(DenseMatrix mat)", "modifiers": "public", "return": "DenseMatrix", "body": "public DenseMatrix minus(DenseMatrix mat) {\n        DenseMatrix r = this.clone();\n        BLAS.axpy(-1.0, mat, r);\n        return r;\n    }", "signature": "DenseMatrix minus(DenseMatrix mat)", "full_signature": "public DenseMatrix minus(DenseMatrix mat)", "class_method_signature": "DenseMatrix.minus(DenseMatrix mat)", "testcase": false, "constructor": false, "invocations": ["clone", "axpy"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}