{"test_class": {"identifier": "SecurityAnalysisExecutionHandlersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FileSystem fileSystem;", "modifier": "private", "type": "FileSystem", "declarator": "fileSystem", "var_name": "fileSystem"}, {"original_string": "private Path workingDir;", "modifier": "private", "type": "Path", "declarator": "workingDir", "var_name": "workingDir"}], "file": "security-analysis-api/src/test/java/com/powsybl/security/distributed/SecurityAnalysisExecutionHandlersTest.java"}, "test_case": {"identifier": "forwardedAfterWithLogs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void forwardedAfterWithLogs() throws IOException {\n        JsonSecurityAnalysisResultExporter exporter = new JsonSecurityAnalysisResultExporter();\n\n        Set<String> expectedLogs = ImmutableSet.of(\"logs.zip\",\n                \"security-analysis.out\",\n                \"security-analysis.err\");\n\n        for (String logFileName : expectedLogs) {\n            Files.write(workingDir.resolve(logFileName), \"logs\".getBytes(StandardCharsets.UTF_8));\n        }\n\n        SecurityAnalysisExecutionInput input = new SecurityAnalysisExecutionInput();\n\n        ExecutionHandler<SecurityAnalysisResultWithLog> handler2 = SecurityAnalysisExecutionHandlers.forwardedWithLogs(input, 2);\n\n        assertThatExceptionOfType(ComputationException.class)\n                .isThrownBy(() -> handler2.after(workingDir, new DefaultExecutionReport()))\n                .withStackTraceContaining(\"NoSuchFile\")\n                .withStackTraceContaining(\"result.json\")\n                .satisfies(ce -> {\n                    assertEquals(\"logs\", ce.getErrLogs().get(\"security-analysis.err\"));\n                    assertEquals(\"logs\", ce.getOutLogs().get(\"security-analysis.out\"));\n                });\n\n        ExecutionHandler<SecurityAnalysisResultWithLog> handler = SecurityAnalysisExecutionHandlers.forwardedWithLogs(input, 2);\n\n        try (Writer writer = Files.newBufferedWriter(workingDir.resolve(\"result.json\"))) {\n            exporter.export(resultForContingency(\"c1\"), writer);\n        }\n        SecurityAnalysisResultWithLog resultWithLog = handler.after(workingDir, new DefaultExecutionReport());\n        SecurityAnalysisResult result = resultWithLog.getResult();\n\n        assertNotNull(result);\n        assertTrue(result.getPreContingencyResult().isComputationOk());\n        assertTrue(result.getPreContingencyResult().getLimitViolations().isEmpty());\n        assertEquals(1, result.getPostContingencyResults().size());\n        assertEquals(\"c1\", result.getPostContingencyResults().get(0).getContingency().getId());\n\n        assertTrue(resultWithLog.getLogBytes().isPresent());\n\n        byte[] logBytes = resultWithLog.getLogBytes()\n                .orElseThrow(AssertionError::new);\n        Set<String> foundNames = getFileNamesFromZip(logBytes);\n        assertEquals(expectedLogs, foundNames);\n    }", "signature": "void forwardedAfterWithLogs()", "full_signature": "@Test public void forwardedAfterWithLogs()", "class_method_signature": "SecurityAnalysisExecutionHandlersTest.forwardedAfterWithLogs()", "testcase": true, "constructor": false, "invocations": ["of", "write", "resolve", "getBytes", "forwardedWithLogs", "satisfies", "withStackTraceContaining", "withStackTraceContaining", "isThrownBy", "assertThatExceptionOfType", "after", "assertEquals", "get", "getErrLogs", "assertEquals", "get", "getOutLogs", "forwardedWithLogs", "newBufferedWriter", "resolve", "export", "resultForContingency", "after", "getResult", "assertNotNull", "assertTrue", "isComputationOk", "getPreContingencyResult", "assertTrue", "isEmpty", "getLimitViolations", "getPreContingencyResult", "assertEquals", "size", "getPostContingencyResults", "assertEquals", "getId", "getContingency", "get", "getPostContingencyResults", "assertTrue", "isPresent", "getLogBytes", "orElseThrow", "getLogBytes", "getFileNamesFromZip", "assertEquals"]}, "focal_class": {"identifier": "SecurityAnalysisExecutionHandlers", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String OUTPUT_FILE_FMT = \"task_%d_result.json\";", "modifier": "private static final", "type": "String", "declarator": "OUTPUT_FILE_FMT = \"task_%d_result.json\"", "var_name": "OUTPUT_FILE_FMT"}, {"original_string": "private static final String OUTPUT_FILE = \"result.json\";", "modifier": "private static final", "type": "String", "declarator": "OUTPUT_FILE = \"result.json\"", "var_name": "OUTPUT_FILE"}, {"original_string": "private static final String SA_TASK_CMD_ID = \"security-analysis-task\";", "modifier": "private static final", "type": "String", "declarator": "SA_TASK_CMD_ID = \"security-analysis-task\"", "var_name": "SA_TASK_CMD_ID"}, {"original_string": "private static final String SA_CMD_ID = \"security-analysis\";", "modifier": "private static final", "type": "String", "declarator": "SA_CMD_ID = \"security-analysis\"", "var_name": "SA_CMD_ID"}, {"original_string": "private static final String TASK_COUNT_ERROR_MESSAGE = \"Number of subtasks must be 1 or greather, was %s.\";", "modifier": "private static final", "type": "String", "declarator": "TASK_COUNT_ERROR_MESSAGE = \"Number of subtasks must be 1 or greather, was %s.\"", "var_name": "TASK_COUNT_ERROR_MESSAGE"}], "methods": [{"identifier": "SecurityAnalysisExecutionHandlers", "parameters": "()", "modifiers": "private", "return": "", "signature": " SecurityAnalysisExecutionHandlers()", "full_signature": "private  SecurityAnalysisExecutionHandlers()", "class_method_signature": "SecurityAnalysisExecutionHandlers.SecurityAnalysisExecutionHandlers()", "testcase": false, "constructor": true}, {"identifier": "forwarded", "parameters": "(SecurityAnalysisExecutionInput input)", "modifiers": "public static", "return": "ExecutionHandler<SecurityAnalysisResult>", "signature": "ExecutionHandler<SecurityAnalysisResult> forwarded(SecurityAnalysisExecutionInput input)", "full_signature": "public static ExecutionHandler<SecurityAnalysisResult> forwarded(SecurityAnalysisExecutionInput input)", "class_method_signature": "SecurityAnalysisExecutionHandlers.forwarded(SecurityAnalysisExecutionInput input)", "testcase": false, "constructor": false}, {"identifier": "forwarded", "parameters": "(SecurityAnalysisExecutionInput input, Integer forwardedTaskCount)", "modifiers": "public static", "return": "ExecutionHandler<SecurityAnalysisResult>", "signature": "ExecutionHandler<SecurityAnalysisResult> forwarded(SecurityAnalysisExecutionInput input, Integer forwardedTaskCount)", "full_signature": "public static ExecutionHandler<SecurityAnalysisResult> forwarded(SecurityAnalysisExecutionInput input, Integer forwardedTaskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.forwarded(SecurityAnalysisExecutionInput input, Integer forwardedTaskCount)", "testcase": false, "constructor": false}, {"identifier": "forwardedWithLogs", "parameters": "(SecurityAnalysisExecutionInput input)", "modifiers": "public static", "return": "ExecutionHandler<SecurityAnalysisResultWithLog>", "signature": "ExecutionHandler<SecurityAnalysisResultWithLog> forwardedWithLogs(SecurityAnalysisExecutionInput input)", "full_signature": "public static ExecutionHandler<SecurityAnalysisResultWithLog> forwardedWithLogs(SecurityAnalysisExecutionInput input)", "class_method_signature": "SecurityAnalysisExecutionHandlers.forwardedWithLogs(SecurityAnalysisExecutionInput input)", "testcase": false, "constructor": false}, {"identifier": "forwardedWithLogs", "parameters": "(SecurityAnalysisExecutionInput input, Integer forwardedTaskCount)", "modifiers": "public static", "return": "ExecutionHandler<SecurityAnalysisResultWithLog>", "signature": "ExecutionHandler<SecurityAnalysisResultWithLog> forwardedWithLogs(SecurityAnalysisExecutionInput input, Integer forwardedTaskCount)", "full_signature": "public static ExecutionHandler<SecurityAnalysisResultWithLog> forwardedWithLogs(SecurityAnalysisExecutionInput input, Integer forwardedTaskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.forwardedWithLogs(SecurityAnalysisExecutionInput input, Integer forwardedTaskCount)", "testcase": false, "constructor": false}, {"identifier": "distributed", "parameters": "(SecurityAnalysisExecutionInput input, int subtaskCount)", "modifiers": "public static", "return": "ExecutionHandler<SecurityAnalysisResult>", "signature": "ExecutionHandler<SecurityAnalysisResult> distributed(SecurityAnalysisExecutionInput input, int subtaskCount)", "full_signature": "public static ExecutionHandler<SecurityAnalysisResult> distributed(SecurityAnalysisExecutionInput input, int subtaskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.distributed(SecurityAnalysisExecutionInput input, int subtaskCount)", "testcase": false, "constructor": false}, {"identifier": "distributedWithLog", "parameters": "(SecurityAnalysisExecutionInput input, int subtaskCount)", "modifiers": "public static", "return": "ExecutionHandler<SecurityAnalysisResultWithLog>", "signature": "ExecutionHandler<SecurityAnalysisResultWithLog> distributedWithLog(SecurityAnalysisExecutionInput input, int subtaskCount)", "full_signature": "public static ExecutionHandler<SecurityAnalysisResultWithLog> distributedWithLog(SecurityAnalysisExecutionInput input, int subtaskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.distributedWithLog(SecurityAnalysisExecutionInput input, int subtaskCount)", "testcase": false, "constructor": false}, {"identifier": "readSingleResult", "parameters": "(Path workingDir)", "modifiers": "public static", "return": "SecurityAnalysisResult", "signature": "SecurityAnalysisResult readSingleResult(Path workingDir)", "full_signature": "public static SecurityAnalysisResult readSingleResult(Path workingDir)", "class_method_signature": "SecurityAnalysisExecutionHandlers.readSingleResult(Path workingDir)", "testcase": false, "constructor": false}, {"identifier": "readSingleResultWithLogs", "parameters": "(Path workingDir)", "modifiers": "public static", "return": "SecurityAnalysisResultWithLog", "signature": "SecurityAnalysisResultWithLog readSingleResultWithLogs(Path workingDir)", "full_signature": "public static SecurityAnalysisResultWithLog readSingleResultWithLogs(Path workingDir)", "class_method_signature": "SecurityAnalysisExecutionHandlers.readSingleResultWithLogs(Path workingDir)", "testcase": false, "constructor": false}, {"identifier": "saCmdOutLogName", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String saCmdOutLogName()", "full_signature": "private static String saCmdOutLogName()", "class_method_signature": "SecurityAnalysisExecutionHandlers.saCmdOutLogName()", "testcase": false, "constructor": false}, {"identifier": "saCmdErrLogName", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String saCmdErrLogName()", "full_signature": "private static String saCmdErrLogName()", "class_method_signature": "SecurityAnalysisExecutionHandlers.saCmdErrLogName()", "testcase": false, "constructor": false}, {"identifier": "forwardedOptions", "parameters": "(Path workingDir, SecurityAnalysisCommandOptions options, Integer taskCount)", "modifiers": "public static", "return": "void", "signature": "void forwardedOptions(Path workingDir, SecurityAnalysisCommandOptions options, Integer taskCount)", "full_signature": "public static void forwardedOptions(Path workingDir, SecurityAnalysisCommandOptions options, Integer taskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.forwardedOptions(Path workingDir, SecurityAnalysisCommandOptions options, Integer taskCount)", "testcase": false, "constructor": false}, {"identifier": "forwardedWithLogsOptions", "parameters": "(Path workingDir, SecurityAnalysisCommandOptions options, Integer taskCount)", "modifiers": "public static", "return": "void", "signature": "void forwardedWithLogsOptions(Path workingDir, SecurityAnalysisCommandOptions options, Integer taskCount)", "full_signature": "public static void forwardedWithLogsOptions(Path workingDir, SecurityAnalysisCommandOptions options, Integer taskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.forwardedWithLogsOptions(Path workingDir, SecurityAnalysisCommandOptions options, Integer taskCount)", "testcase": false, "constructor": false}, {"identifier": "distributedOptions", "parameters": "(Path workingDir, SecurityAnalysisCommandOptions options, int taskCount)", "modifiers": "public static", "return": "void", "signature": "void distributedOptions(Path workingDir, SecurityAnalysisCommandOptions options, int taskCount)", "full_signature": "public static void distributedOptions(Path workingDir, SecurityAnalysisCommandOptions options, int taskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.distributedOptions(Path workingDir, SecurityAnalysisCommandOptions options, int taskCount)", "testcase": false, "constructor": false}, {"identifier": "distributedWithLogsOptions", "parameters": "(Path workingDir, SecurityAnalysisCommandOptions options, int taskCount)", "modifiers": "public static", "return": "void", "signature": "void distributedWithLogsOptions(Path workingDir, SecurityAnalysisCommandOptions options, int taskCount)", "full_signature": "public static void distributedWithLogsOptions(Path workingDir, SecurityAnalysisCommandOptions options, int taskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.distributedWithLogsOptions(Path workingDir, SecurityAnalysisCommandOptions options, int taskCount)", "testcase": false, "constructor": false}, {"identifier": "getOutputPathForTask", "parameters": "(Path workingDir, int taskIndex)", "modifiers": "public static", "return": "Path", "signature": "Path getOutputPathForTask(Path workingDir, int taskIndex)", "full_signature": "public static Path getOutputPathForTask(Path workingDir, int taskIndex)", "class_method_signature": "SecurityAnalysisExecutionHandlers.getOutputPathForTask(Path workingDir, int taskIndex)", "testcase": false, "constructor": false}, {"identifier": "readResults", "parameters": "(Path workingDir, int subtaskCount)", "modifiers": "public static", "return": "SecurityAnalysisResult", "signature": "SecurityAnalysisResult readResults(Path workingDir, int subtaskCount)", "full_signature": "public static SecurityAnalysisResult readResults(Path workingDir, int subtaskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.readResults(Path workingDir, int subtaskCount)", "testcase": false, "constructor": false}, {"identifier": "readResultsWithLogs", "parameters": "(Path workingDir, int subtaskCount)", "modifiers": "public static", "return": "SecurityAnalysisResultWithLog", "signature": "SecurityAnalysisResultWithLog readResultsWithLogs(Path workingDir, int subtaskCount)", "full_signature": "public static SecurityAnalysisResultWithLog readResultsWithLogs(Path workingDir, int subtaskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.readResultsWithLogs(Path workingDir, int subtaskCount)", "testcase": false, "constructor": false}, {"identifier": "generateExceptionWithLogs", "parameters": "(Path workingDir, Exception cause, int count)", "modifiers": "private static", "return": "ComputationException", "signature": "ComputationException generateExceptionWithLogs(Path workingDir, Exception cause, int count)", "full_signature": "private static ComputationException generateExceptionWithLogs(Path workingDir, Exception cause, int count)", "class_method_signature": "SecurityAnalysisExecutionHandlers.generateExceptionWithLogs(Path workingDir, Exception cause, int count)", "testcase": false, "constructor": false}, {"identifier": "generateExceptionWithLogs", "parameters": "(Path workingDir, Exception cause)", "modifiers": "private static", "return": "ComputationException", "signature": "ComputationException generateExceptionWithLogs(Path workingDir, Exception cause)", "full_signature": "private static ComputationException generateExceptionWithLogs(Path workingDir, Exception cause)", "class_method_signature": "SecurityAnalysisExecutionHandlers.generateExceptionWithLogs(Path workingDir, Exception cause)", "testcase": false, "constructor": false}, {"identifier": "satErrName", "parameters": "(int i)", "modifiers": "private static", "return": "String", "signature": "String satErrName(int i)", "full_signature": "private static String satErrName(int i)", "class_method_signature": "SecurityAnalysisExecutionHandlers.satErrName(int i)", "testcase": false, "constructor": false}, {"identifier": "satOutName", "parameters": "(int i)", "modifiers": "private static", "return": "String", "signature": "String satOutName(int i)", "full_signature": "private static String satOutName(int i)", "class_method_signature": "SecurityAnalysisExecutionHandlers.satOutName(int i)", "testcase": false, "constructor": false}, {"identifier": "getLogPathForTask", "parameters": "(Path workingDir, int taskNumber)", "modifiers": "public static", "return": "Path", "signature": "Path getLogPathForTask(Path workingDir, int taskNumber)", "full_signature": "public static Path getLogPathForTask(Path workingDir, int taskNumber)", "class_method_signature": "SecurityAnalysisExecutionHandlers.getLogPathForTask(Path workingDir, int taskNumber)", "testcase": false, "constructor": false}, {"identifier": "getLogPath", "parameters": "(Path workingDir)", "modifiers": "public static", "return": "Path", "signature": "Path getLogPath(Path workingDir)", "full_signature": "public static Path getLogPath(Path workingDir)", "class_method_signature": "SecurityAnalysisExecutionHandlers.getLogPath(Path workingDir)", "testcase": false, "constructor": false}], "file": "security-analysis-api/src/main/java/com/powsybl/security/distributed/SecurityAnalysisExecutionHandlers.java"}, "focal_method": {"identifier": "forwardedWithLogs", "parameters": "(SecurityAnalysisExecutionInput input)", "modifiers": "public static", "return": "ExecutionHandler<SecurityAnalysisResultWithLog>", "body": "public static ExecutionHandler<SecurityAnalysisResultWithLog> forwardedWithLogs(SecurityAnalysisExecutionInput input) {\n        return forwardedWithLogs(input, null);\n    }", "signature": "ExecutionHandler<SecurityAnalysisResultWithLog> forwardedWithLogs(SecurityAnalysisExecutionInput input)", "full_signature": "public static ExecutionHandler<SecurityAnalysisResultWithLog> forwardedWithLogs(SecurityAnalysisExecutionInput input)", "class_method_signature": "SecurityAnalysisExecutionHandlers.forwardedWithLogs(SecurityAnalysisExecutionInput input)", "testcase": false, "constructor": false, "invocations": ["forwardedWithLogs"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}