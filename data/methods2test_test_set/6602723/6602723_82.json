{"test_class": {"identifier": "TestPerHostServiceWrappedHttpClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PerHostServiceWrappedHttpClient impl;", "modifier": "private", "type": "PerHostServiceWrappedHttpClient", "declarator": "impl", "var_name": "impl"}, {"original_string": "private HttpClient mockBackend;", "modifier": "private", "type": "HttpClient", "declarator": "mockBackend", "var_name": "mockBackend"}, {"original_string": "private ServiceWrapperFactory mockFactory;", "modifier": "private", "type": "ServiceWrapperFactory", "declarator": "mockFactory", "var_name": "mockFactory"}, {"original_string": "private final static String HOST_STRING = \"foo.example.com:8080\";", "modifier": "private final static", "type": "String", "declarator": "HOST_STRING = \"foo.example.com:8080\"", "var_name": "HOST_STRING"}, {"original_string": "private HttpHost host;", "modifier": "private", "type": "HttpHost", "declarator": "host", "var_name": "host"}, {"original_string": "private HttpRequest req;", "modifier": "private", "type": "HttpRequest", "declarator": "req", "var_name": "req"}, {"original_string": "private HttpContext ctx;", "modifier": "private", "type": "HttpContext", "declarator": "ctx", "var_name": "ctx"}, {"original_string": "private HttpResponse resp;", "modifier": "private", "type": "HttpResponse", "declarator": "resp", "var_name": "resp"}], "file": "jrugged-httpclient/src/test/java/org/fishwife/jrugged/httpclient/TestPerHostServiceWrappedHttpClient.java"}, "test_case": {"identifier": "reusesWrapperForRequestsFromEquivalentHostsCaseInsensitiveHostName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void reusesWrapperForRequestsFromEquivalentHostsCaseInsensitiveHostName() throws Exception {\n        ServiceWrapper wrapper = new NullWrapper();\n        HttpUriRequest req1 = new HttpGet(\"http://foo.example.com/bar\");\n        HttpUriRequest req2 = new HttpGet(\"http://FOO.Example.cOM/baz\");\n        HttpResponse resp1 = resp;\n        HttpResponse resp2 = new BasicHttpResponse(HttpVersion.HTTP_1_1, HttpStatus.SC_OK, \"OK\");\n        expect(mockFactory.getWrapperWithName(isA(String.class))).andReturn(wrapper);\n        expect(mockBackend.execute(isA(HttpHost.class), isA(HttpRequest.class), isA(HttpContext.class)))\n            .andReturn(resp1);\n        expect(mockBackend.execute(isA(HttpHost.class), isA(HttpRequest.class), isA(HttpContext.class)))\n            .andReturn(resp2);\n\n        replayMocks();\n        impl.execute(req1, ctx);\n        impl.execute(req2, ctx);\n        verifyMocks();\n    }", "signature": "void reusesWrapperForRequestsFromEquivalentHostsCaseInsensitiveHostName()", "full_signature": "@Test public void reusesWrapperForRequestsFromEquivalentHostsCaseInsensitiveHostName()", "class_method_signature": "TestPerHostServiceWrappedHttpClient.reusesWrapperForRequestsFromEquivalentHostsCaseInsensitiveHostName()", "testcase": true, "constructor": false, "invocations": ["andReturn", "expect", "getWrapperWithName", "isA", "andReturn", "expect", "execute", "isA", "isA", "isA", "andReturn", "expect", "execute", "isA", "isA", "isA", "replayMocks", "execute", "execute", "verifyMocks"]}, "focal_class": {"identifier": "PerHostServiceWrappedHttpClient", "superclass": "extends AbstractHttpClientDecorator", "interfaces": "", "fields": [{"original_string": "private ServiceWrapperFactory factory;", "modifier": "private", "type": "ServiceWrapperFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private Map<HttpHost, HttpClient> clients = new HashMap<HttpHost, HttpClient>();", "modifier": "private", "type": "Map<HttpHost, HttpClient>", "declarator": "clients = new HashMap<HttpHost, HttpClient>()", "var_name": "clients"}], "methods": [{"identifier": "PerHostServiceWrappedHttpClient", "parameters": "(HttpClient backend, ServiceWrapperFactory factory)", "modifiers": "public", "return": "", "signature": " PerHostServiceWrappedHttpClient(HttpClient backend, ServiceWrapperFactory factory)", "full_signature": "public  PerHostServiceWrappedHttpClient(HttpClient backend, ServiceWrapperFactory factory)", "class_method_signature": "PerHostServiceWrappedHttpClient.PerHostServiceWrappedHttpClient(HttpClient backend, ServiceWrapperFactory factory)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(HttpHost host, HttpRequest req, HttpContext ctx)", "modifiers": "public", "return": "HttpResponse", "signature": "HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx)", "full_signature": "public HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx)", "class_method_signature": "PerHostServiceWrappedHttpClient.execute(HttpHost host, HttpRequest req, HttpContext ctx)", "testcase": false, "constructor": false}, {"identifier": "getCanonicalHost", "parameters": "(HttpHost host)", "modifiers": "private", "return": "HttpHost", "signature": "HttpHost getCanonicalHost(HttpHost host)", "full_signature": "private HttpHost getCanonicalHost(HttpHost host)", "class_method_signature": "PerHostServiceWrappedHttpClient.getCanonicalHost(HttpHost host)", "testcase": false, "constructor": false}], "file": "jrugged-httpclient/src/main/java/org/fishwife/jrugged/httpclient/PerHostServiceWrappedHttpClient.java"}, "focal_method": {"identifier": "execute", "parameters": "(HttpHost host, HttpRequest req, HttpContext ctx)", "modifiers": "public", "return": "HttpResponse", "body": "public HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx)\n            throws IOException, ClientProtocolException {\n        host = getCanonicalHost(host);\n        HttpClient client = clients.get(host);\n        if (client == null) {\n            ServiceWrapper wrapper = factory.getWrapperWithName(host.toHostString());\n            client = new ServiceWrappedHttpClient(backend, wrapper);\n            clients.put(host, client);\n        }\n        return client.execute(host, req, ctx);\n    }", "signature": "HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx)", "full_signature": "public HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx)", "class_method_signature": "PerHostServiceWrappedHttpClient.execute(HttpHost host, HttpRequest req, HttpContext ctx)", "testcase": false, "constructor": false, "invocations": ["getCanonicalHost", "get", "getWrapperWithName", "toHostString", "put", "execute"]}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}