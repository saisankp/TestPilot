{"test_class": {"identifier": "JsonResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File INPUT_FILE = new File(\"src/test/resource/resfilter/json/input.json\");", "modifier": "private static final", "type": "File", "declarator": "INPUT_FILE = new File(\"src/test/resource/resfilter/json/input.json\")", "var_name": "INPUT_FILE"}, {"original_string": "private static final File OUTPUT_FILE = new File(\"src/test/resource/resfilter/json/output.json\");", "modifier": "private static final", "type": "File", "declarator": "OUTPUT_FILE = new File(\"src/test/resource/resfilter/json/output.json\")", "var_name": "OUTPUT_FILE"}, {"original_string": "private static final File INPUT_FILE2 = new File(\"src/test/resource/resfilter/json/other-input.json\");", "modifier": "private static final", "type": "File", "declarator": "INPUT_FILE2 = new File(\"src/test/resource/resfilter/json/other-input.json\")", "var_name": "INPUT_FILE2"}, {"original_string": "private static final File SPLITKEYS = new File(\"src/test/resource/resfilter/json/testSplitKeys.json\");", "modifier": "private static final", "type": "File", "declarator": "SPLITKEYS = new File(\"src/test/resource/resfilter/json/testSplitKeys.json\")", "var_name": "SPLITKEYS"}, {"original_string": "private static final File EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/json/write-output.json\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/json/write-output.json\")", "var_name": "EXPECTED_WRITE_FILE"}, {"original_string": "private static final Collection<ResourceString> EXPECTED_INPUT_RES_LIST;", "modifier": "private static final", "type": "Collection<ResourceString>", "declarator": "EXPECTED_INPUT_RES_LIST", "var_name": "EXPECTED_INPUT_RES_LIST"}, {"original_string": "private static LanguageBundle WRITE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "WRITE_BUNDLE", "var_name": "WRITE_BUNDLE"}, {"original_string": "private static final JsonResource res = new JsonResource();", "modifier": "private static final", "type": "JsonResource", "declarator": "res = new JsonResource()", "var_name": "res"}], "file": "gp-res-filter/src/test/java/com/ibm/g11n/pipeline/resfilter/impl/JsonResourceTest.java"}, "test_case": {"identifier": "testSplitKeyPieces", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSplitKeyPieces() throws FileNotFoundException, IOException {\n        /*\n         * Initial data generated with: Gson g = new GsonBuilder().create();\n         * TreeMap<String, List<KeyPiece>> tm = new TreeMap<String,\n         * List<KeyPiece>>();\n         * \n         * for (final ResourceString s : EXPECTED_INPUT_RES_LIST) {\n         * tm.put(s.getKey(), JsonResource.splitKeyPieces(s.getKey())); }\n         * System.out.println(g.toJson(tm));\n         */\n\n        JsonObject SPLITKEY_DATA = ResourceTestUtil.parseJson(SPLITKEYS).getAsJsonObject();\n        for (final Entry<String, JsonElement> e : SPLITKEY_DATA.entrySet()) {\n            final String key = e.getKey();\n            final JsonArray expectList = e.getValue().getAsJsonArray();\n\n            List<KeyPiece> actualList = JsonResource.splitKeyPieces(key);\n\n            String prefix = \"\u2018\" + key + \"\u2019: \";\n            assertEquals(prefix + \"key count\", expectList.size(), actualList.size());\n            for (int n = 0; n < expectList.size(); n++) {\n                JsonObject expectObject = expectList.get(n).getAsJsonObject();\n                KeyPiece actualObject = actualList.get(n);\n                String subPrefix = prefix + \" key \" + n;\n                assertEquals(subPrefix + \" value \", expectObject.get(\"keyValue\").getAsString(), actualObject.keyValue);\n                assertEquals(subPrefix + \" type \", expectObject.get(\"keyType\").getAsString(),\n                        actualObject.keyType.name());\n            }\n        }\n    }", "signature": "void testSplitKeyPieces()", "full_signature": "@Test public void testSplitKeyPieces()", "class_method_signature": "JsonResourceTest.testSplitKeyPieces()", "testcase": true, "constructor": false, "invocations": ["getAsJsonObject", "parseJson", "entrySet", "getKey", "getAsJsonArray", "getValue", "splitKeyPieces", "assertEquals", "size", "size", "size", "getAsJsonObject", "get", "get", "assertEquals", "getAsString", "get", "assertEquals", "getAsString", "get", "name"]}, "focal_class": {"identifier": "JsonResource", "superclass": "extends ResourceFilter", "interfaces": "", "fields": [{"original_string": "private static final String JSONPATH_ROOT = \"$\";", "modifier": "private static final", "type": "String", "declarator": "JSONPATH_ROOT = \"$\"", "var_name": "JSONPATH_ROOT"}, {"original_string": "private static final Pattern USE_JSONPATH_PATTERN = Pattern.compile(\"^\\\\$[.\\\\[].*\");", "modifier": "private static final", "type": "Pattern", "declarator": "USE_JSONPATH_PATTERN = Pattern.compile(\"^\\\\$[.\\\\[].*\")", "var_name": "USE_JSONPATH_PATTERN"}, {"original_string": "private static final Pattern USE_BRACKET_PATTERN = Pattern.compile(\"[.'\\\\[\\\\]]\");", "modifier": "private static final", "type": "Pattern", "declarator": "USE_BRACKET_PATTERN = Pattern.compile(\"[.'\\\\[\\\\]]\")", "var_name": "USE_BRACKET_PATTERN"}], "methods": [{"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "JsonResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "addBundleStrings", "parameters": "(JsonObject obj, String keyPrefix, LanguageBundleBuilder bb, int sequenceNum)", "modifiers": "protected", "return": "int", "signature": "int addBundleStrings(JsonObject obj, String keyPrefix, LanguageBundleBuilder bb, int sequenceNum)", "full_signature": "protected int addBundleStrings(JsonObject obj, String keyPrefix, LanguageBundleBuilder bb, int sequenceNum)", "class_method_signature": "JsonResource.addBundleStrings(JsonObject obj, String keyPrefix, LanguageBundleBuilder bb, int sequenceNum)", "testcase": false, "constructor": false}, {"identifier": "encodeResourceKey", "parameters": "(String parent, String key, boolean isLeaf)", "modifiers": "protected", "return": "String", "signature": "String encodeResourceKey(String parent, String key, boolean isLeaf)", "full_signature": "protected String encodeResourceKey(String parent, String key, boolean isLeaf)", "class_method_signature": "JsonResource.encodeResourceKey(String parent, String key, boolean isLeaf)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "JsonResource.write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "splitKeyPieces", "parameters": "(String key)", "modifiers": "static", "return": "List<KeyPiece>", "signature": "List<KeyPiece> splitKeyPieces(String key)", "full_signature": "static List<KeyPiece> splitKeyPieces(String key)", "class_method_signature": "JsonResource.splitKeyPieces(String key)", "testcase": false, "constructor": false}, {"identifier": "addToken", "parameters": "(List<KeyPiece> result, String s, boolean inSubscript)", "modifiers": "static", "return": "void", "signature": "void addToken(List<KeyPiece> result, String s, boolean inSubscript)", "full_signature": "static void addToken(List<KeyPiece> result, String s, boolean inSubscript)", "class_method_signature": "JsonResource.addToken(List<KeyPiece> result, String s, boolean inSubscript)", "testcase": false, "constructor": false}], "file": "gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/JsonResource.java"}, "focal_method": {"identifier": "splitKeyPieces", "parameters": "(String key)", "modifiers": "static", "return": "List<KeyPiece>", "body": "static List<KeyPiece> splitKeyPieces(String key) {\n        if (USE_JSONPATH_PATTERN.matcher(key).matches()) {\n            List<KeyPiece> result = new ArrayList<KeyPiece>();\n            boolean inQuotes = false;\n            StringBuilder currentToken = new StringBuilder();\n            // Disregard $ at the beginning - it's not really part of the key...\n            StringCharacterIterator i = new StringCharacterIterator(key.substring(JSONPATH_ROOT.length()));\n            boolean inSubscript = false;\n            while (i.current() != StringCharacterIterator.DONE) {\n                char c = i.current();\n                if (c == '\\'') {\n                    inQuotes = !inQuotes;\n                }\n                if (!inQuotes && (c == '.' || c == '[' || c == ']')) {\n                    if (currentToken.length() > 0) {\n                        addToken(result, currentToken.toString(), inSubscript);\n                        currentToken.setLength(0);\n                        if (inSubscript) {\n                            inSubscript = false;\n                        }\n                    }\n                    if (c == '[') {\n                        inSubscript = true; // Record that the next token had an\n                                        // array subscript on it.\n                    }\n                } else {\n                    currentToken.append(c);\n                }\n                i.next();\n            }\n            addToken(result, currentToken.toString(), inSubscript);\n\n            return Collections.unmodifiableList(result);\n        }\n        // Otherwise, this is a plain JSON object label\n        return Collections.singletonList(new KeyPiece(key, JsonToken.BEGIN_OBJECT));\n    }", "signature": "List<KeyPiece> splitKeyPieces(String key)", "full_signature": "static List<KeyPiece> splitKeyPieces(String key)", "class_method_signature": "JsonResource.splitKeyPieces(String key)", "testcase": false, "constructor": false, "invocations": ["matches", "matcher", "substring", "length", "current", "current", "length", "addToken", "toString", "setLength", "append", "next", "addToken", "toString", "unmodifiableList", "singletonList"]}, "repository": {"repo_id": 46134098, "url": "https://github.com/IBM-Cloud/gp-java-tools", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 9, "size": 6216, "license": "licensed"}}