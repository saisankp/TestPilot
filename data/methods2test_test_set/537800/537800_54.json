{"test_class": {"identifier": "ThreadStatesGaugeSetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ThreadMXBean threads = mock(ThreadMXBean.class);", "modifier": "private final", "type": "ThreadMXBean", "declarator": "threads = mock(ThreadMXBean.class)", "var_name": "threads"}, {"original_string": "private final ThreadDeadlockDetector detector = mock(ThreadDeadlockDetector.class);", "modifier": "private final", "type": "ThreadDeadlockDetector", "declarator": "detector = mock(ThreadDeadlockDetector.class)", "var_name": "detector"}, {"original_string": "private final ThreadStatesGaugeSet gauges = new ThreadStatesGaugeSet(threads, detector);", "modifier": "private final", "type": "ThreadStatesGaugeSet", "declarator": "gauges = new ThreadStatesGaugeSet(threads, detector)", "var_name": "gauges"}, {"original_string": "private final long[] ids = new long[]{1, 2, 3};", "modifier": "private final", "type": "long[]", "declarator": "ids = new long[]{1, 2, 3}", "var_name": "ids"}, {"original_string": "private final ThreadInfo newThread = mock(ThreadInfo.class);", "modifier": "private final", "type": "ThreadInfo", "declarator": "newThread = mock(ThreadInfo.class)", "var_name": "newThread"}, {"original_string": "private final ThreadInfo runnableThread = mock(ThreadInfo.class);", "modifier": "private final", "type": "ThreadInfo", "declarator": "runnableThread = mock(ThreadInfo.class)", "var_name": "runnableThread"}, {"original_string": "private final ThreadInfo blockedThread = mock(ThreadInfo.class);", "modifier": "private final", "type": "ThreadInfo", "declarator": "blockedThread = mock(ThreadInfo.class)", "var_name": "blockedThread"}, {"original_string": "private final ThreadInfo waitingThread = mock(ThreadInfo.class);", "modifier": "private final", "type": "ThreadInfo", "declarator": "waitingThread = mock(ThreadInfo.class)", "var_name": "waitingThread"}, {"original_string": "private final ThreadInfo timedWaitingThread = mock(ThreadInfo.class);", "modifier": "private final", "type": "ThreadInfo", "declarator": "timedWaitingThread = mock(ThreadInfo.class)", "var_name": "timedWaitingThread"}, {"original_string": "private final ThreadInfo terminatedThread = mock(ThreadInfo.class);", "modifier": "private final", "type": "ThreadInfo", "declarator": "terminatedThread = mock(ThreadInfo.class)", "var_name": "terminatedThread"}, {"original_string": "private final Set<String> deadlocks = new HashSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "deadlocks = new HashSet<>()", "var_name": "deadlocks"}], "file": "metrics-jvm/src/test/java/com/codahale/metrics/jvm/ThreadStatesGaugeSetTest.java"}, "test_case": {"identifier": "hasAGaugeForTheNumberOfThreads", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void hasAGaugeForTheNumberOfThreads() {\n        assertThat(((Gauge<?>) gauges.getMetrics().get(\"count\")).getValue())\n            .isEqualTo(12);\n    }", "signature": "void hasAGaugeForTheNumberOfThreads()", "full_signature": "@Test public void hasAGaugeForTheNumberOfThreads()", "class_method_signature": "ThreadStatesGaugeSetTest.hasAGaugeForTheNumberOfThreads()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getValue", "get", "getMetrics"]}, "focal_class": {"identifier": "ThreadStatesGaugeSet", "superclass": "", "interfaces": "implements MetricSet", "fields": [{"original_string": "private final static int STACK_TRACE_DEPTH = 0;", "modifier": "private final static", "type": "int", "declarator": "STACK_TRACE_DEPTH = 0", "var_name": "STACK_TRACE_DEPTH"}, {"original_string": "private final ThreadMXBean threads;", "modifier": "private final", "type": "ThreadMXBean", "declarator": "threads", "var_name": "threads"}, {"original_string": "private final ThreadDeadlockDetector deadlockDetector;", "modifier": "private final", "type": "ThreadDeadlockDetector", "declarator": "deadlockDetector", "var_name": "deadlockDetector"}], "methods": [{"identifier": "ThreadStatesGaugeSet", "parameters": "()", "modifiers": "public", "return": "", "signature": " ThreadStatesGaugeSet()", "full_signature": "public  ThreadStatesGaugeSet()", "class_method_signature": "ThreadStatesGaugeSet.ThreadStatesGaugeSet()", "testcase": false, "constructor": true}, {"identifier": "ThreadStatesGaugeSet", "parameters": "(ThreadMXBean threads,\n                                ThreadDeadlockDetector deadlockDetector)", "modifiers": "public", "return": "", "signature": " ThreadStatesGaugeSet(ThreadMXBean threads,\n                                ThreadDeadlockDetector deadlockDetector)", "full_signature": "public  ThreadStatesGaugeSet(ThreadMXBean threads,\n                                ThreadDeadlockDetector deadlockDetector)", "class_method_signature": "ThreadStatesGaugeSet.ThreadStatesGaugeSet(ThreadMXBean threads,\n                                ThreadDeadlockDetector deadlockDetector)", "testcase": false, "constructor": true}, {"identifier": "getMetrics", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Metric>", "signature": "Map<String, Metric> getMetrics()", "full_signature": "@Override public Map<String, Metric> getMetrics()", "class_method_signature": "ThreadStatesGaugeSet.getMetrics()", "testcase": false, "constructor": false}, {"identifier": "getThreadCount", "parameters": "(Thread.State state)", "modifiers": "private", "return": "int", "signature": "int getThreadCount(Thread.State state)", "full_signature": "private int getThreadCount(Thread.State state)", "class_method_signature": "ThreadStatesGaugeSet.getThreadCount(Thread.State state)", "testcase": false, "constructor": false}, {"identifier": "getThreadInfo", "parameters": "()", "modifiers": "", "return": "ThreadInfo[]", "signature": "ThreadInfo[] getThreadInfo()", "full_signature": " ThreadInfo[] getThreadInfo()", "class_method_signature": "ThreadStatesGaugeSet.getThreadInfo()", "testcase": false, "constructor": false}], "file": "metrics-jvm/src/main/java/com/codahale/metrics/jvm/ThreadStatesGaugeSet.java"}, "focal_method": {"identifier": "getMetrics", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Metric>", "body": "@Override\n    public Map<String, Metric> getMetrics() {\n        final Map<String, Metric> gauges = new HashMap<>();\n\n        for (final Thread.State state : Thread.State.values()) {\n            gauges.put(name(state.toString().toLowerCase(), \"count\"),\n                    (Gauge<Object>) () -> getThreadCount(state));\n        }\n\n        gauges.put(\"count\", (Gauge<Integer>) threads::getThreadCount);\n        gauges.put(\"daemon.count\", (Gauge<Integer>) threads::getDaemonThreadCount);\n        gauges.put(\"peak.count\", (Gauge<Integer>) threads::getPeakThreadCount);\n        gauges.put(\"total_started.count\", (Gauge<Long>) threads::getTotalStartedThreadCount);\n        gauges.put(\"deadlock.count\", (Gauge<Integer>) () -> deadlockDetector.getDeadlockedThreads().size());\n        gauges.put(\"deadlocks\", (Gauge<Set<String>>) deadlockDetector::getDeadlockedThreads);\n\n        return Collections.unmodifiableMap(gauges);\n    }", "signature": "Map<String, Metric> getMetrics()", "full_signature": "@Override public Map<String, Metric> getMetrics()", "class_method_signature": "ThreadStatesGaugeSet.getMetrics()", "testcase": false, "constructor": false, "invocations": ["values", "put", "name", "toLowerCase", "toString", "getThreadCount", "put", "put", "put", "put", "put", "size", "getDeadlockedThreads", "put", "unmodifiableMap"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}