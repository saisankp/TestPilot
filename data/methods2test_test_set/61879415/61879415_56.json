{"test_class": {"identifier": "DefaultValueGeneratorManagerTest", "superclass": "extends AbstractGeneratorTest", "interfaces": "", "fields": [], "file": "Realization/backend/core/core-impl/src/test/java/eu/bcvsolutions/idm/core/model/service/impl/DefaultValueGeneratorManagerTest.java"}, "test_case": {"identifier": "testGeneratorTypesForIdentity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGeneratorTypesForIdentity() {\n\t\tList<ValueGeneratorDto> generators = valueGeneratorManager\n\t\t\t\t.getAvailableGenerators(IdmIdentityDto.class);\n\n\t\tfor (ValueGeneratorDto generator : generators) {\n\t\t\ttry {\n\t\t\t\tClass.forName(generator.getDtoType());\n\t\t\t\tClass.forName(generator.getGeneratorType());\n\t\t\t\tassertEquals(IdmIdentityDto.class.getCanonicalName(), generator.getDtoType());\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tfail(e.getMessage());\n\t\t\t}\n\t\t}\n\t}", "signature": "void testGeneratorTypesForIdentity()", "full_signature": "@Test public void testGeneratorTypesForIdentity()", "class_method_signature": "DefaultValueGeneratorManagerTest.testGeneratorTypesForIdentity()", "testcase": true, "constructor": false, "invocations": ["getAvailableGenerators", "forName", "getDtoType", "forName", "getGeneratorType", "assertEquals", "getCanonicalName", "getDtoType", "fail", "getMessage"]}, "focal_class": {"identifier": "DefaultValueGeneratorManager", "superclass": "", "interfaces": "implements ValueGeneratorManager", "fields": [{"original_string": "private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(DefaultValueGeneratorManager.class);", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "LOG = org.slf4j.LoggerFactory.getLogger(DefaultValueGeneratorManager.class)", "var_name": "LOG"}, {"original_string": "@Autowired\n\tprivate IdmGenerateValueService service;", "modifier": "@Autowired\n\tprivate", "type": "IdmGenerateValueService", "declarator": "service", "var_name": "service"}, {"original_string": "@Autowired\n\tprivate ApplicationContext context;", "modifier": "@Autowired\n\tprivate", "type": "ApplicationContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Autowired\n\tprivate EnabledEvaluator enabledEvaluator;", "modifier": "@Autowired\n\tprivate", "type": "EnabledEvaluator", "declarator": "enabledEvaluator", "var_name": "enabledEvaluator"}, {"original_string": "private Map<String, ValueGenerator<? extends AbstractDto>> generators = null;", "modifier": "private", "type": "Map<String, ValueGenerator<? extends AbstractDto>>", "declarator": "generators = null", "var_name": "generators"}], "methods": [{"identifier": "generate", "parameters": "(DTO dto)", "modifiers": "@Override public", "return": "DTO", "signature": "DTO generate(DTO dto)", "full_signature": "@Override public DTO generate(DTO dto)", "class_method_signature": "DefaultValueGeneratorManager.generate(DTO dto)", "testcase": false, "constructor": false}, {"identifier": "getAvailableGenerators", "parameters": "(Class<? extends AbstractDto> dtoType)", "modifiers": "@Override public", "return": "List<ValueGeneratorDto>", "signature": "List<ValueGeneratorDto> getAvailableGenerators(Class<? extends AbstractDto> dtoType)", "full_signature": "@Override public List<ValueGeneratorDto> getAvailableGenerators(Class<? extends AbstractDto> dtoType)", "class_method_signature": "DefaultValueGeneratorManager.getAvailableGenerators(Class<? extends AbstractDto> dtoType)", "testcase": false, "constructor": false}, {"identifier": "getSupportedTypes", "parameters": "()", "modifiers": "@Override public", "return": "Set<Class<? extends AbstractDto>>", "signature": "Set<Class<? extends AbstractDto>> getSupportedTypes()", "full_signature": "@Override public Set<Class<? extends AbstractDto>> getSupportedTypes()", "class_method_signature": "DefaultValueGeneratorManager.getSupportedTypes()", "testcase": false, "constructor": false}, {"identifier": "supportsGenerating", "parameters": "(AbstractDto dto)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsGenerating(AbstractDto dto)", "full_signature": "@Override public boolean supportsGenerating(AbstractDto dto)", "class_method_signature": "DefaultValueGeneratorManager.supportsGenerating(AbstractDto dto)", "testcase": false, "constructor": false}, {"identifier": "getGenerator", "parameters": "(IdmGenerateValueDto generatorDto)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "ValueGenerator<E>", "signature": "ValueGenerator<E> getGenerator(IdmGenerateValueDto generatorDto)", "full_signature": "@SuppressWarnings(\"unchecked\") private ValueGenerator<E> getGenerator(IdmGenerateValueDto generatorDto)", "class_method_signature": "DefaultValueGeneratorManager.getGenerator(IdmGenerateValueDto generatorDto)", "testcase": false, "constructor": false}, {"identifier": "toDto", "parameters": "(ValueGenerator<?> valueGenerator)", "modifiers": "private", "return": "ValueGeneratorDto", "signature": "ValueGeneratorDto toDto(ValueGenerator<?> valueGenerator)", "full_signature": "private ValueGeneratorDto toDto(ValueGenerator<?> valueGenerator)", "class_method_signature": "DefaultValueGeneratorManager.toDto(ValueGenerator<?> valueGenerator)", "testcase": false, "constructor": false}, {"identifier": "getAllGenerators", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Map<String, ValueGenerator<? extends AbstractDto>>", "signature": "Map<String, ValueGenerator<? extends AbstractDto>> getAllGenerators()", "full_signature": "@SuppressWarnings(\"unchecked\") private Map<String, ValueGenerator<? extends AbstractDto>> getAllGenerators()", "class_method_signature": "DefaultValueGeneratorManager.getAllGenerators()", "testcase": false, "constructor": false}, {"identifier": "getEnabledGenerateValues", "parameters": "(Class<? extends AbstractDto> dtoType)", "modifiers": "private", "return": "List<IdmGenerateValueDto>", "signature": "List<IdmGenerateValueDto> getEnabledGenerateValues(Class<? extends AbstractDto> dtoType)", "full_signature": "private List<IdmGenerateValueDto> getEnabledGenerateValues(Class<? extends AbstractDto> dtoType)", "class_method_signature": "DefaultValueGeneratorManager.getEnabledGenerateValues(Class<? extends AbstractDto> dtoType)", "testcase": false, "constructor": false}], "file": "Realization/backend/core/core-impl/src/main/java/eu/bcvsolutions/idm/core/model/service/impl/DefaultValueGeneratorManager.java"}, "focal_method": {"identifier": "getAvailableGenerators", "parameters": "(Class<? extends AbstractDto> dtoType)", "modifiers": "@Override public", "return": "List<ValueGeneratorDto>", "body": "@Override\n\tpublic List<ValueGeneratorDto> getAvailableGenerators(Class<? extends AbstractDto> dtoType) {\n\t\treturn getAllGenerators()\n\t\t\t\t.values()\n\t\t\t\t.stream()\n\t\t\t\t.filter(generator -> {\n\t\t\t\t\treturn !generator.isDisabled() \n\t\t\t\t\t\t\t&& enabledEvaluator.isEnabled(generator)\n\t\t\t\t\t\t\t&& (dtoType == null || generator.supports(dtoType));\n\t\t\t\t})\n\t\t\t\t.map(this::toDto)\n\t\t\t\t.collect(Collectors.toList());\n\t}", "signature": "List<ValueGeneratorDto> getAvailableGenerators(Class<? extends AbstractDto> dtoType)", "full_signature": "@Override public List<ValueGeneratorDto> getAvailableGenerators(Class<? extends AbstractDto> dtoType)", "class_method_signature": "DefaultValueGeneratorManager.getAvailableGenerators(Class<? extends AbstractDto> dtoType)", "testcase": false, "constructor": false, "invocations": ["collect", "map", "filter", "stream", "values", "getAllGenerators", "isDisabled", "isEnabled", "supports", "toList"]}, "repository": {"repo_id": 61879415, "url": "https://github.com/bcvsolutions/CzechIdMng", "stars": 25, "created": "6/24/2016 11:18:23 AM +00:00", "updates": "2020-01-27T15:14:40+00:00", "fork": "False", "license": "licensed"}}