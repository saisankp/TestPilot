{"test_class": {"identifier": "IdWorkerTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/modules/common/src/test/java/org/onetwo/common/id/IdWorkerTest.java"}, "test_case": {"identifier": "testId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testId(){\n\t\tIdWorker idw = new IdWorker(1, 1);\n\t\t\n\t\tLangOps.ntimesRun(100, ()->{\n\t\t\tSystem.out.println(\"id:\"+idw.nextId());\n\t\t});\n\t}", "signature": "void testId()", "full_signature": "@Test public void testId()", "class_method_signature": "IdWorkerTest.testId()", "testcase": true, "constructor": false, "invocations": ["ntimesRun", "println", "nextId"]}, "focal_class": {"identifier": "IdWorker", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Logger LOG = LoggerFactory.getLogger(IdWorker.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(IdWorker.class)", "var_name": "LOG"}, {"original_string": "private long workerId;", "modifier": "private", "type": "long", "declarator": "workerId", "var_name": "workerId"}, {"original_string": "private long datacenterId;", "modifier": "private", "type": "long", "declarator": "datacenterId", "var_name": "datacenterId"}, {"original_string": "private long sequence = 0L;", "modifier": "private", "type": "long", "declarator": "sequence = 0L", "var_name": "sequence"}, {"original_string": "private long twepoch = 1288834974657L;", "modifier": "private", "type": "long", "declarator": "twepoch = 1288834974657L", "var_name": "twepoch"}, {"original_string": "private long workerIdBits = 5L;", "modifier": "private", "type": "long", "declarator": "workerIdBits = 5L", "var_name": "workerIdBits"}, {"original_string": "private long datacenterIdBits = 5L;", "modifier": "private", "type": "long", "declarator": "datacenterIdBits = 5L", "var_name": "datacenterIdBits"}, {"original_string": "private long maxWorkerId = -1L ^ (-1L << workerIdBits);", "modifier": "private", "type": "long", "declarator": "maxWorkerId = -1L ^ (-1L << workerIdBits)", "var_name": "maxWorkerId"}, {"original_string": "private long maxDatacenterId = -1L ^ (-1L << datacenterIdBits);", "modifier": "private", "type": "long", "declarator": "maxDatacenterId = -1L ^ (-1L << datacenterIdBits)", "var_name": "maxDatacenterId"}, {"original_string": "private long sequenceBits = 12L;", "modifier": "private", "type": "long", "declarator": "sequenceBits = 12L", "var_name": "sequenceBits"}, {"original_string": "private long workerIdShift = sequenceBits;", "modifier": "private", "type": "long", "declarator": "workerIdShift = sequenceBits", "var_name": "workerIdShift"}, {"original_string": "private long datacenterIdShift = sequenceBits + workerIdBits;", "modifier": "private", "type": "long", "declarator": "datacenterIdShift = sequenceBits + workerIdBits", "var_name": "datacenterIdShift"}, {"original_string": "private long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;", "modifier": "private", "type": "long", "declarator": "timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits", "var_name": "timestampLeftShift"}, {"original_string": "private long sequenceMask = -1L ^ (-1L << sequenceBits);", "modifier": "private", "type": "long", "declarator": "sequenceMask = -1L ^ (-1L << sequenceBits)", "var_name": "sequenceMask"}, {"original_string": "private long lastTimestamp = -1L;", "modifier": "private", "type": "long", "declarator": "lastTimestamp = -1L", "var_name": "lastTimestamp"}], "methods": [{"identifier": "IdWorker", "parameters": "(long workerId, long datacenterId)", "modifiers": "public", "return": "", "signature": " IdWorker(long workerId, long datacenterId)", "full_signature": "public  IdWorker(long workerId, long datacenterId)", "class_method_signature": "IdWorker.IdWorker(long workerId, long datacenterId)", "testcase": false, "constructor": true}, {"identifier": "nextId", "parameters": "()", "modifiers": "public synchronized", "return": "long", "signature": "long nextId()", "full_signature": "public synchronized long nextId()", "class_method_signature": "IdWorker.nextId()", "testcase": false, "constructor": false}, {"identifier": "tilNextMillis", "parameters": "(long lastTimestamp)", "modifiers": "protected", "return": "long", "signature": "long tilNextMillis(long lastTimestamp)", "full_signature": "protected long tilNextMillis(long lastTimestamp)", "class_method_signature": "IdWorker.tilNextMillis(long lastTimestamp)", "testcase": false, "constructor": false}, {"identifier": "timeGen", "parameters": "()", "modifiers": "protected", "return": "long", "signature": "long timeGen()", "full_signature": "protected long timeGen()", "class_method_signature": "IdWorker.timeGen()", "testcase": false, "constructor": false}], "file": "core/modules/common/src/main/java/org/onetwo/common/id/IdWorker.java"}, "focal_method": {"identifier": "nextId", "parameters": "()", "modifiers": "public synchronized", "return": "long", "body": "public synchronized long nextId() {  \n        long timestamp = timeGen();  \n  \n        if (timestamp < lastTimestamp) {  \n            LOG.error(String.format(\"clock is moving backwards.  Rejecting requests until %d.\", lastTimestamp));  \n            throw new RuntimeException(String.format(\"Clock moved backwards.  Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));  \n        }  \n  \n        if (lastTimestamp == timestamp) {  \n            sequence = (sequence + 1) & sequenceMask;  \n            if (sequence == 0) {  \n                timestamp = tilNextMillis(lastTimestamp);  \n            }  \n        } else {  \n            sequence = 0L;  \n        }  \n  \n        lastTimestamp = timestamp;  \n  \n        return ((timestamp - twepoch) << timestampLeftShift) | (datacenterId << datacenterIdShift) | (workerId << workerIdShift) | sequence;  \n    }", "signature": "long nextId()", "full_signature": "public synchronized long nextId()", "class_method_signature": "IdWorker.nextId()", "testcase": false, "constructor": false, "invocations": ["timeGen", "error", "format", "format", "tilNextMillis"]}, "repository": {"repo_id": 47802308, "url": "https://github.com/wayshall/onetwo", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 16, "size": 57582, "license": "licensed"}}