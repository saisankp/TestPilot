{"test_class": {"identifier": "CancellableDisposableTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/disposables/CancellableDisposableTest.java"}, "test_case": {"identifier": "disposeRace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void disposeRace() {\n\n        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n            final AtomicInteger count = new AtomicInteger();\n\n            Cancellable c = new Cancellable() {\n                @Override\n                public void cancel() throws Exception {\n                    count.getAndIncrement();\n                }\n            };\n\n            final CancellableDisposable cd = new CancellableDisposable(c);\n\n            Runnable r = new Runnable() {\n                @Override\n                public void run() {\n                    cd.dispose();\n                }\n            };\n\n            TestHelper.race(r, r);\n\n            assertEquals(1, count.get());\n        }\n    }", "signature": "void disposeRace()", "full_signature": "@Test public void disposeRace()", "class_method_signature": "CancellableDisposableTest.disposeRace()", "testcase": true, "constructor": false, "invocations": ["getAndIncrement", "dispose", "race", "assertEquals", "get"]}, "focal_class": {"identifier": "CancellableDisposable", "superclass": "extends AtomicReference<Cancellable>", "interfaces": "implements Disposable", "fields": [{"original_string": "private static final long serialVersionUID = 5718521705281392066L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 5718521705281392066L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "CancellableDisposable", "parameters": "(Cancellable cancellable)", "modifiers": "public", "return": "", "signature": " CancellableDisposable(Cancellable cancellable)", "full_signature": "public  CancellableDisposable(Cancellable cancellable)", "class_method_signature": "CancellableDisposable.CancellableDisposable(Cancellable cancellable)", "testcase": false, "constructor": true}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "CancellableDisposable.isDisposed()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "CancellableDisposable.dispose()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/disposables/CancellableDisposable.java"}, "focal_method": {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void dispose() {\n        if (get() != null) {\n            Cancellable c = getAndSet(null);\n            if (c != null) {\n                try {\n                    c.cancel();\n                } catch (Exception ex) {\n                    Exceptions.throwIfFatal(ex);\n                    RxJavaPlugins.onError(ex);\n                }\n            }\n        }\n    }", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "CancellableDisposable.dispose()", "testcase": false, "constructor": false, "invocations": ["get", "getAndSet", "cancel", "throwIfFatal", "onError"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}