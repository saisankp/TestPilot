{"test_class": {"identifier": "InstructionOffsetMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "dexlib2/src/test/java/org/jf/dexlib2/util/InstructionOffsetMapTest.java"}, "test_case": {"identifier": "testInstructionOffsetMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInstructionOffsetMap() {\n        ImmutableList<ImmutableInstruction> instructions = ImmutableList.of(\n                /*00: 0x00*/ new ImmutableInstruction10t(Opcode.GOTO, 1),\n                /*01: 0x01*/ new ImmutableInstruction10x(Opcode.NOP),\n                /*02: 0x02*/ new ImmutableInstruction11n(Opcode.CONST_4, 2, 3),\n                /*03: 0x03*/ new ImmutableInstruction11x(Opcode.RETURN, 4),\n                /*04: 0x04*/ new ImmutableInstruction12x(Opcode.ARRAY_LENGTH, 5, 6),\n                /*05: 0x05*/ new ImmutableInstruction20t(Opcode.GOTO_16, 7),\n                /*06: 0x07*/ new ImmutableInstruction21c(Opcode.CONST_STRING, 8, new ImmutableStringReference(\"blah\")),\n                /*07: 0x09*/ new ImmutableInstruction21ih(Opcode.CONST_HIGH16, 9, 0x10000),\n                /*08: 0x0b*/ new ImmutableInstruction21lh(Opcode.CONST_WIDE_HIGH16, 10, 0x1000000000000L),\n                /*09: 0x0d*/ new ImmutableInstruction21s(Opcode.CONST_16, 11, 12),\n                /*10: 0x0f*/ new ImmutableInstruction21t(Opcode.IF_EQZ, 12, 13),\n                /*11: 0x11*/ new ImmutableInstruction22b(Opcode.ADD_INT_LIT8, 14, 15, 16),\n                /*12: 0x13*/ new ImmutableInstruction22c(Opcode.INSTANCE_OF, 0, 1,\n                                                         new ImmutableTypeReference(\"Ltype;\")),\n                /*13: 0x15*/ new ImmutableInstruction22s(Opcode.ADD_INT_LIT16, 2, 3, 17),\n                /*14: 0x17*/ new ImmutableInstruction22t(Opcode.IF_EQ, 4, 5, 18),\n                /*15: 0x19*/ new ImmutableInstruction22x(Opcode.MOVE_FROM16, 19, 20),\n                /*16: 0x1b*/ new ImmutableInstruction23x(Opcode.AGET, 21, 22, 23),\n                /*17: 0x1d*/ new ImmutableInstruction30t(Opcode.GOTO_32, 24),\n                /*18: 0x20*/ new ImmutableInstruction31c(Opcode.CONST_STRING_JUMBO, 25,\n                                                         new ImmutableStringReference(\"this is a string\")),\n                /*19: 0x23*/ new ImmutableInstruction31i(Opcode.CONST, 26, 27),\n                /*20: 0x26*/ new ImmutableInstruction31t(Opcode.FILL_ARRAY_DATA, 28, 29),\n                /*21: 0x29*/ new ImmutableInstruction32x(Opcode.MOVE_16, 30, 31),\n                /*22: 0x2c*/ new ImmutableInstruction35c(Opcode.FILLED_NEW_ARRAY, 0, 0, 0, 0, 0, 0,\n                                                         new ImmutableTypeReference(\"Ltype;\")),\n                /*23: 0x2f*/ new ImmutableInstruction3rc(Opcode.FILLED_NEW_ARRAY_RANGE, 0, 0,\n                                                         new ImmutableTypeReference(\"Ltype;\")),\n                /*24: 0x32*/ new ImmutableInstruction51l(Opcode.CONST_WIDE, 32, 33),\n                /*25: 0x37*/ new ImmutableInstruction10t(Opcode.GOTO, 1)\n        );\n        ImmutableMethodImplementation impl = new ImmutableMethodImplementation(33, instructions, null, null);\n        InstructionOffsetMap instructionOffsetMap = new InstructionOffsetMap(instructions);\n\n        int[] expectedOffsets = new int[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x07, 0x09, 0x0b, 0x0d, 0x0f, 0x11,\n                0x13, 0x15, 0x17, 0x19, 0x1b, 0x1d, 0x20, 0x23, 0x26, 0x29, 0x2c, 0x2f, 0x32, 0x37};\n\n        for (int i=0; i<instructions.size(); i++) {\n            Assert.assertEquals(expectedOffsets[i], instructionOffsetMap.getInstructionCodeOffset(i));\n            Assert.assertEquals(i, instructionOffsetMap.getInstructionIndexAtCodeOffset(expectedOffsets[i], true));\n            Assert.assertEquals(i, instructionOffsetMap.getInstructionIndexAtCodeOffset(expectedOffsets[i], false));\n        }\n\n        int instructionIndex = -1;\n        for (int codeOffset=0; codeOffset<=expectedOffsets[expectedOffsets.length-1]; codeOffset++) {\n            if (codeOffset == expectedOffsets[instructionIndex+1]) {\n                // this offset is at the beginning of an instruction\n                instructionIndex++;\n            } else {\n                // this offset is in the middle of an instruction\n                Assert.assertEquals(instructionIndex,\n                        instructionOffsetMap.getInstructionIndexAtCodeOffset(codeOffset, false));\n\n                try {\n                    instructionOffsetMap.getInstructionIndexAtCodeOffset(codeOffset, true);\n                    Assert.fail(String.format(\"Exception exception didn't occur for code offset 0x%x\", codeOffset));\n                } catch (ExceptionWithContext ex) {\n                    // expected exception\n                }\n            }\n        }\n        Assert.assertEquals(expectedOffsets.length-1,\n                instructionOffsetMap.getInstructionIndexAtCodeOffset(expectedOffsets[expectedOffsets.length-1]+1, false));\n        Assert.assertEquals(expectedOffsets.length-1,\n                instructionOffsetMap.getInstructionIndexAtCodeOffset(expectedOffsets[expectedOffsets.length-1]+10, false));\n    }", "signature": "void testInstructionOffsetMap()", "full_signature": "@Test public void testInstructionOffsetMap()", "class_method_signature": "InstructionOffsetMapTest.testInstructionOffsetMap()", "testcase": true, "constructor": false, "invocations": ["of", "size", "assertEquals", "getInstructionCodeOffset", "assertEquals", "getInstructionIndexAtCodeOffset", "assertEquals", "getInstructionIndexAtCodeOffset", "assertEquals", "getInstructionIndexAtCodeOffset", "getInstructionIndexAtCodeOffset", "fail", "format", "assertEquals", "getInstructionIndexAtCodeOffset", "assertEquals", "getInstructionIndexAtCodeOffset"]}, "focal_class": {"identifier": "InstructionOffsetMap", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Nonnull private final int[] instructionCodeOffsets;", "modifier": "@Nonnull private final", "type": "int[]", "declarator": "instructionCodeOffsets", "var_name": "instructionCodeOffsets"}], "methods": [{"identifier": "InstructionOffsetMap", "parameters": "(@Nonnull List<? extends Instruction> instructions)", "modifiers": "public", "return": "", "signature": " InstructionOffsetMap(@Nonnull List<? extends Instruction> instructions)", "full_signature": "public  InstructionOffsetMap(@Nonnull List<? extends Instruction> instructions)", "class_method_signature": "InstructionOffsetMap.InstructionOffsetMap(@Nonnull List<? extends Instruction> instructions)", "testcase": false, "constructor": true}, {"identifier": "getInstructionIndexAtCodeOffset", "parameters": "(int codeOffset)", "modifiers": "public", "return": "int", "signature": "int getInstructionIndexAtCodeOffset(int codeOffset)", "full_signature": "public int getInstructionIndexAtCodeOffset(int codeOffset)", "class_method_signature": "InstructionOffsetMap.getInstructionIndexAtCodeOffset(int codeOffset)", "testcase": false, "constructor": false}, {"identifier": "getInstructionIndexAtCodeOffset", "parameters": "(int codeOffset, boolean exact)", "modifiers": "public", "return": "int", "signature": "int getInstructionIndexAtCodeOffset(int codeOffset, boolean exact)", "full_signature": "public int getInstructionIndexAtCodeOffset(int codeOffset, boolean exact)", "class_method_signature": "InstructionOffsetMap.getInstructionIndexAtCodeOffset(int codeOffset, boolean exact)", "testcase": false, "constructor": false}, {"identifier": "getInstructionCodeOffset", "parameters": "(int index)", "modifiers": "public", "return": "int", "signature": "int getInstructionCodeOffset(int index)", "full_signature": "public int getInstructionCodeOffset(int index)", "class_method_signature": "InstructionOffsetMap.getInstructionCodeOffset(int index)", "testcase": false, "constructor": false}], "file": "dexlib2/src/main/java/org/jf/dexlib2/util/InstructionOffsetMap.java"}, "focal_method": {"identifier": "InstructionOffsetMap", "parameters": "(@Nonnull List<? extends Instruction> instructions)", "modifiers": "public", "return": "", "body": "public InstructionOffsetMap(@Nonnull List<? extends Instruction> instructions) {\n        this.instructionCodeOffsets = new int[instructions.size()];\n\n        int codeOffset = 0;\n        for (int i=0; i<instructions.size(); i++) {\n            instructionCodeOffsets[i] = codeOffset;\n            codeOffset += instructions.get(i).getCodeUnits();\n        }\n    }", "signature": " InstructionOffsetMap(@Nonnull List<? extends Instruction> instructions)", "full_signature": "public  InstructionOffsetMap(@Nonnull List<? extends Instruction> instructions)", "class_method_signature": "InstructionOffsetMap.InstructionOffsetMap(@Nonnull List<? extends Instruction> instructions)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 5925560, "url": "https://github.com/JesusFreke/smali", "language": "Java", "is_fork": false, "fork_count": 875, "stargazer_count": 4465, "size": 9375, "license": "licensed"}}