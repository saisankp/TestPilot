{"test_class": {"identifier": "VersionFacadeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/jcrfacade/version/VersionFacadeTest.java"}, "test_case": {"identifier": "testGetCreated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCreated() throws Exception {\n        Version delegate = mock(Version.class);\n        VersionFacade<Session> facade = getFacade(delegate);\n        final Calendar value = Calendar.getInstance();\n        when(delegate.getCreated()).thenReturn(value);\n        assertSame(\"is same\", value, facade.getCreated());\n    }", "signature": "void testGetCreated()", "full_signature": "@Test public void testGetCreated()", "class_method_signature": "VersionFacadeTest.testGetCreated()", "testcase": true, "constructor": false, "invocations": ["mock", "getFacade", "getInstance", "thenReturn", "when", "getCreated", "assertSame", "getCreated"]}, "focal_class": {"identifier": "VersionFacade", "superclass": "extends NodeFacade<Version, S>", "interfaces": "implements Version", "fields": [], "methods": [{"identifier": "VersionFacade", "parameters": "(final @NotNull Version delegate, final @NotNull SessionFacade<S> session)", "modifiers": "public", "return": "", "signature": " VersionFacade(final @NotNull Version delegate, final @NotNull SessionFacade<S> session)", "full_signature": "public  VersionFacade(final @NotNull Version delegate, final @NotNull SessionFacade<S> session)", "class_method_signature": "VersionFacade.VersionFacade(final @NotNull Version delegate, final @NotNull SessionFacade<S> session)", "testcase": false, "constructor": true}, {"identifier": "getContainingHistory", "parameters": "()", "modifiers": "@Override public", "return": "VersionHistory", "signature": "VersionHistory getContainingHistory()", "full_signature": "@Override public VersionHistory getContainingHistory()", "class_method_signature": "VersionFacade.getContainingHistory()", "testcase": false, "constructor": false}, {"identifier": "getCreated", "parameters": "()", "modifiers": "@Override public", "return": "Calendar", "signature": "Calendar getCreated()", "full_signature": "@Override public Calendar getCreated()", "class_method_signature": "VersionFacade.getCreated()", "testcase": false, "constructor": false}, {"identifier": "getLinearSuccessor", "parameters": "()", "modifiers": "@Override public", "return": "Version", "signature": "Version getLinearSuccessor()", "full_signature": "@Override public Version getLinearSuccessor()", "class_method_signature": "VersionFacade.getLinearSuccessor()", "testcase": false, "constructor": false}, {"identifier": "getLinearPredecessor", "parameters": "()", "modifiers": "@Override public", "return": "Version", "signature": "Version getLinearPredecessor()", "full_signature": "@Override public Version getLinearPredecessor()", "class_method_signature": "VersionFacade.getLinearPredecessor()", "testcase": false, "constructor": false}, {"identifier": "wrapVersions", "parameters": "(final @Nullable Version[] internalVersions)", "modifiers": "private", "return": "Version[]", "signature": "Version[] wrapVersions(final @Nullable Version[] internalVersions)", "full_signature": "private Version[] wrapVersions(final @Nullable Version[] internalVersions)", "class_method_signature": "VersionFacade.wrapVersions(final @Nullable Version[] internalVersions)", "testcase": false, "constructor": false}, {"identifier": "getSuccessors", "parameters": "()", "modifiers": "@Override public", "return": "Version[]", "signature": "Version[] getSuccessors()", "full_signature": "@Override public Version[] getSuccessors()", "class_method_signature": "VersionFacade.getSuccessors()", "testcase": false, "constructor": false}, {"identifier": "getPredecessors", "parameters": "()", "modifiers": "@Override public", "return": "Version[]", "signature": "Version[] getPredecessors()", "full_signature": "@Override public Version[] getPredecessors()", "class_method_signature": "VersionFacade.getPredecessors()", "testcase": false, "constructor": false}, {"identifier": "getFrozenNode", "parameters": "()", "modifiers": "@Override public", "return": "Node", "signature": "Node getFrozenNode()", "full_signature": "@Override public Node getFrozenNode()", "class_method_signature": "VersionFacade.getFrozenNode()", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/jcrfacade/version/VersionFacade.java"}, "focal_method": {"identifier": "getCreated", "parameters": "()", "modifiers": "@Override public", "return": "Calendar", "body": "@Override\n    public Calendar getCreated() throws RepositoryException {\n        return delegate.getCreated();\n    }", "signature": "Calendar getCreated()", "full_signature": "@Override public Calendar getCreated()", "class_method_signature": "VersionFacade.getCreated()", "testcase": false, "constructor": false, "invocations": ["getCreated"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}