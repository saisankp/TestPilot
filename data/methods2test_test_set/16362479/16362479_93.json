{"test_class": {"identifier": "EntityOwnershipListenerSupportTest", "superclass": "extends AbstractEntityOwnershipTest", "interfaces": "", "fields": [{"original_string": "private final TestActorFactory actorFactory = new TestActorFactory(getSystem());", "modifier": "private final", "type": "TestActorFactory", "declarator": "actorFactory = new TestActorFactory(getSystem())", "var_name": "actorFactory"}, {"original_string": "private ActorContext actorContext;", "modifier": "private", "type": "ActorContext", "declarator": "actorContext", "var_name": "actorContext"}], "file": "opendaylight/md-sal/sal-distributed-eos/src/test/java/org/opendaylight/controller/cluster/entityownership/EntityOwnershipListenerSupportTest.java"}, "test_case": {"identifier": "testNotifyEntityOwnershipListeners", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNotifyEntityOwnershipListeners() {\n        EntityOwnershipListenerSupport support = new EntityOwnershipListenerSupport(actorContext, \"test\");\n\n        DOMEntityOwnershipListener mockListener1 = mock(DOMEntityOwnershipListener.class, \"EntityOwnershipListener1\");\n        DOMEntityOwnershipListener mockListener2 = mock(DOMEntityOwnershipListener.class, \"EntityOwnershipListener2\");\n        DOMEntityOwnershipListener mockListener12 = mock(DOMEntityOwnershipListener.class,\n                \"EntityOwnershipListener1_2\");\n        String entityType1 = \"type1\";\n        String entityType2 = \"type2\";\n        final DOMEntity entity1 = new DOMEntity(entityType1, YangInstanceIdentifier.of(QName.create(\"test\", \"id1\")));\n        final DOMEntity entity2 = new DOMEntity(entityType2, YangInstanceIdentifier.of(QName.create(\"test\", \"id2\")));\n        final DOMEntity entity3 = new DOMEntity(\"noListener\", YangInstanceIdentifier.of(QName.create(\"test\", \"id5\")));\n\n        // Add EntityOwnershipListener registrations.\n\n        support.addEntityOwnershipListener(entityType1, mockListener1);\n        support.addEntityOwnershipListener(entityType1, mockListener1); // register again - should be noop\n        support.addEntityOwnershipListener(entityType1, mockListener12);\n        support.addEntityOwnershipListener(entityType2, mockListener2);\n\n        // Notify entity1 changed and verify appropriate listeners are notified.\n\n        support.notifyEntityOwnershipListeners(entity1, false, true, true);\n\n        verify(mockListener1, timeout(5000)).ownershipChanged(ownershipChange(entity1, false, true, true));\n        verify(mockListener12, timeout(5000)).ownershipChanged(ownershipChange(entity1, false, true, true));\n        Uninterruptibles.sleepUninterruptibly(300, TimeUnit.MILLISECONDS);\n        verify(mockListener2, never()).ownershipChanged(any(DOMEntityOwnershipChange.class));\n        assertEquals(\"# of listener actors\", 2, actorContext.children().size());\n        reset(mockListener1, mockListener2, mockListener12);\n\n        // Notify entity2 changed and verify appropriate listeners are notified.\n\n        support.notifyEntityOwnershipListeners(entity2, false, true, true);\n\n        verify(mockListener2, timeout(5000)).ownershipChanged(ownershipChange(entity2, false, true, true));\n        Uninterruptibles.sleepUninterruptibly(300, TimeUnit.MILLISECONDS);\n        verify(mockListener1, never()).ownershipChanged(any(DOMEntityOwnershipChange.class));\n        verify(mockListener12, never()).ownershipChanged(any(DOMEntityOwnershipChange.class));\n        assertEquals(\"# of listener actors\", 3, actorContext.children().size());\n        reset(mockListener1, mockListener2, mockListener12);\n\n        // Notify entity3 changed and verify no listeners are notified.\n\n        support.notifyEntityOwnershipListeners(entity3, true, false, true);\n\n        Uninterruptibles.sleepUninterruptibly(300, TimeUnit.MILLISECONDS);\n        verify(mockListener1, never()).ownershipChanged(any(DOMEntityOwnershipChange.class));\n        verify(mockListener2, never()).ownershipChanged(any(DOMEntityOwnershipChange.class));\n        verify(mockListener12, never()).ownershipChanged(any(DOMEntityOwnershipChange.class));\n        reset(mockListener1, mockListener2, mockListener12);\n\n        Iterable<ActorRef> listenerActors = actorContext.children();\n        assertEquals(\"# of listener actors\", 3, listenerActors.size());\n\n        // Unregister mockListener1, issue a change for entity1 and verify only remaining listeners are notified.\n\n        support.removeEntityOwnershipListener(entityType1, mockListener1);\n        support.notifyEntityOwnershipListeners(entity1, true, false, true);\n\n        verify(mockListener12, timeout(5000)).ownershipChanged(ownershipChange(entity1, true, false, true));\n        Uninterruptibles.sleepUninterruptibly(300, TimeUnit.MILLISECONDS);\n        verify(mockListener1, never()).ownershipChanged(any(DOMEntityOwnershipChange.class));\n        reset(mockListener1, mockListener2, mockListener12);\n\n        // Unregister all listeners and verify their listener actors are destroyed.\n\n        List<TestKit> watchers = new ArrayList<>();\n        for (Iterator<ActorRef> iter = listenerActors.iterator(); iter.hasNext();) {\n            TestKit kit = new TestKit(getSystem());\n            kit.watch(iter.next());\n            watchers.add(kit);\n        }\n\n        support.removeEntityOwnershipListener(entityType1, mockListener12);\n        support.removeEntityOwnershipListener(entityType1, mockListener12); // un-register again - should be noop\n        support.removeEntityOwnershipListener(entityType2, mockListener2);\n\n        Iterator<ActorRef> iter = listenerActors.iterator();\n        for (TestKit kit: watchers) {\n            kit.expectTerminated(kit.duration(\"3 seconds\"), iter.next());\n        }\n\n        assertEquals(\"# of listener actors\", 0, actorContext.children().size());\n\n        // Re-register mockListener1 and verify it is notified.\n\n        reset(mockListener1, mockListener2);\n\n        support.addEntityOwnershipListener(entityType1, mockListener1);\n        support.notifyEntityOwnershipListeners(entity1, false, false, true);\n\n        verify(mockListener1, timeout(5000)).ownershipChanged(ownershipChange(entity1, false, false, true));\n        verify(mockListener12, never()).ownershipChanged(any(DOMEntityOwnershipChange.class));\n        verify(mockListener2, never()).ownershipChanged(any(DOMEntityOwnershipChange.class));\n\n        // Quickly register and unregister mockListener2 - expecting no exceptions.\n\n        support.addEntityOwnershipListener(entityType1, mockListener2);\n        support.removeEntityOwnershipListener(entityType1, mockListener2);\n    }", "signature": "void testNotifyEntityOwnershipListeners()", "full_signature": "@Test public void testNotifyEntityOwnershipListeners()", "class_method_signature": "EntityOwnershipListenerSupportTest.testNotifyEntityOwnershipListeners()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "of", "create", "of", "create", "of", "create", "addEntityOwnershipListener", "addEntityOwnershipListener", "addEntityOwnershipListener", "addEntityOwnershipListener", "notifyEntityOwnershipListeners", "ownershipChanged", "verify", "timeout", "ownershipChange", "ownershipChanged", "verify", "timeout", "ownershipChange", "sleepUninterruptibly", "ownershipChanged", "verify", "never", "any", "assertEquals", "size", "children", "reset", "notifyEntityOwnershipListeners", "ownershipChanged", "verify", "timeout", "ownershipChange", "sleepUninterruptibly", "ownershipChanged", "verify", "never", "any", "ownershipChanged", "verify", "never", "any", "assertEquals", "size", "children", "reset", "notifyEntityOwnershipListeners", "sleepUninterruptibly", "ownershipChanged", "verify", "never", "any", "ownershipChanged", "verify", "never", "any", "ownershipChanged", "verify", "never", "any", "reset", "children", "assertEquals", "size", "removeEntityOwnershipListener", "notifyEntityOwnershipListeners", "ownershipChanged", "verify", "timeout", "ownershipChange", "sleepUninterruptibly", "ownershipChanged", "verify", "never", "any", "reset", "iterator", "hasNext", "getSystem", "watch", "next", "add", "removeEntityOwnershipListener", "removeEntityOwnershipListener", "removeEntityOwnershipListener", "iterator", "expectTerminated", "duration", "next", "assertEquals", "size", "children", "reset", "addEntityOwnershipListener", "notifyEntityOwnershipListeners", "ownershipChanged", "verify", "timeout", "ownershipChange", "ownershipChanged", "verify", "never", "any", "ownershipChanged", "verify", "never", "any", "addEntityOwnershipListener", "removeEntityOwnershipListener"]}, "focal_class": {"identifier": "EntityOwnershipListenerSupport", "superclass": "extends EntityOwnershipChangePublisher", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(EntityOwnershipListenerSupport.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(EntityOwnershipListenerSupport.class)", "var_name": "LOG"}, {"original_string": "private final String logId;", "modifier": "private final", "type": "String", "declarator": "logId", "var_name": "logId"}, {"original_string": "private final ActorContext actorContext;", "modifier": "private final", "type": "ActorContext", "declarator": "actorContext", "var_name": "actorContext"}, {"original_string": "private final ReadWriteLock listenerLock = new ReentrantReadWriteLock();", "modifier": "private final", "type": "ReadWriteLock", "declarator": "listenerLock = new ReentrantReadWriteLock()", "var_name": "listenerLock"}, {"original_string": "@GuardedBy(\"listenerLock\")\n    private final Map<DOMEntityOwnershipListener, ListenerActorRefEntry> listenerActorMap = new IdentityHashMap<>();", "modifier": "@GuardedBy(\"listenerLock\")\n    private final", "type": "Map<DOMEntityOwnershipListener, ListenerActorRefEntry>", "declarator": "listenerActorMap = new IdentityHashMap<>()", "var_name": "listenerActorMap"}, {"original_string": "@GuardedBy(\"listenerLock\")\n    private final Multimap<String, DOMEntityOwnershipListener> entityTypeListenerMap = HashMultimap.create();", "modifier": "@GuardedBy(\"listenerLock\")\n    private final", "type": "Multimap<String, DOMEntityOwnershipListener>", "declarator": "entityTypeListenerMap = HashMultimap.create()", "var_name": "entityTypeListenerMap"}, {"original_string": "private volatile boolean inJeopardy = false;", "modifier": "private volatile", "type": "boolean", "declarator": "inJeopardy = false", "var_name": "inJeopardy"}], "methods": [{"identifier": "EntityOwnershipListenerSupport", "parameters": "(final ActorContext actorContext, final String logId)", "modifiers": "", "return": "", "signature": " EntityOwnershipListenerSupport(final ActorContext actorContext, final String logId)", "full_signature": "  EntityOwnershipListenerSupport(final ActorContext actorContext, final String logId)", "class_method_signature": "EntityOwnershipListenerSupport.EntityOwnershipListenerSupport(final ActorContext actorContext, final String logId)", "testcase": false, "constructor": true}, {"identifier": "getLogId", "parameters": "()", "modifiers": "@Override", "return": "String", "signature": "String getLogId()", "full_signature": "@Override String getLogId()", "class_method_signature": "EntityOwnershipListenerSupport.getLogId()", "testcase": false, "constructor": false}, {"identifier": "setInJeopardy", "parameters": "(final boolean inJeopardy)", "modifiers": "@SuppressWarnings(\"checkstyle:hiddenField\")", "return": "boolean", "signature": "boolean setInJeopardy(final boolean inJeopardy)", "full_signature": "@SuppressWarnings(\"checkstyle:hiddenField\") boolean setInJeopardy(final boolean inJeopardy)", "class_method_signature": "EntityOwnershipListenerSupport.setInJeopardy(final boolean inJeopardy)", "testcase": false, "constructor": false}, {"identifier": "addEntityOwnershipListener", "parameters": "(final String entityType, final DOMEntityOwnershipListener listener)", "modifiers": "", "return": "void", "signature": "void addEntityOwnershipListener(final String entityType, final DOMEntityOwnershipListener listener)", "full_signature": " void addEntityOwnershipListener(final String entityType, final DOMEntityOwnershipListener listener)", "class_method_signature": "EntityOwnershipListenerSupport.addEntityOwnershipListener(final String entityType, final DOMEntityOwnershipListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeEntityOwnershipListener", "parameters": "(final String entityType, final DOMEntityOwnershipListener listener)", "modifiers": "", "return": "void", "signature": "void removeEntityOwnershipListener(final String entityType, final DOMEntityOwnershipListener listener)", "full_signature": " void removeEntityOwnershipListener(final String entityType, final DOMEntityOwnershipListener listener)", "class_method_signature": "EntityOwnershipListenerSupport.removeEntityOwnershipListener(final String entityType, final DOMEntityOwnershipListener listener)", "testcase": false, "constructor": false}, {"identifier": "notifyEntityOwnershipListeners", "parameters": "(final DOMEntity entity, final boolean wasOwner, final boolean isOwner,\n            final boolean hasOwner)", "modifiers": "@Override", "return": "void", "signature": "void notifyEntityOwnershipListeners(final DOMEntity entity, final boolean wasOwner, final boolean isOwner,\n            final boolean hasOwner)", "full_signature": "@Override void notifyEntityOwnershipListeners(final DOMEntity entity, final boolean wasOwner, final boolean isOwner,\n            final boolean hasOwner)", "class_method_signature": "EntityOwnershipListenerSupport.notifyEntityOwnershipListeners(final DOMEntity entity, final boolean wasOwner, final boolean isOwner,\n            final boolean hasOwner)", "testcase": false, "constructor": false}, {"identifier": "notifyEntityOwnershipListener", "parameters": "(final DOMEntity entity, final boolean wasOwner, final boolean isOwner,\n            final boolean hasOwner, final DOMEntityOwnershipListener listener)", "modifiers": "", "return": "void", "signature": "void notifyEntityOwnershipListener(final DOMEntity entity, final boolean wasOwner, final boolean isOwner,\n            final boolean hasOwner, final DOMEntityOwnershipListener listener)", "full_signature": " void notifyEntityOwnershipListener(final DOMEntity entity, final boolean wasOwner, final boolean isOwner,\n            final boolean hasOwner, final DOMEntityOwnershipListener listener)", "class_method_signature": "EntityOwnershipListenerSupport.notifyEntityOwnershipListener(final DOMEntity entity, final boolean wasOwner, final boolean isOwner,\n            final boolean hasOwner, final DOMEntityOwnershipListener listener)", "testcase": false, "constructor": false}, {"identifier": "notifyListeners", "parameters": "(final DOMEntity entity, final boolean wasOwner, final boolean isOwner,\n            final boolean hasOwner, final Collection<ListenerActorRefEntry> listenerEntries)", "modifiers": "@Holding(\"listenerLock\") private", "return": "void", "signature": "void notifyListeners(final DOMEntity entity, final boolean wasOwner, final boolean isOwner,\n            final boolean hasOwner, final Collection<ListenerActorRefEntry> listenerEntries)", "full_signature": "@Holding(\"listenerLock\") private void notifyListeners(final DOMEntity entity, final boolean wasOwner, final boolean isOwner,\n            final boolean hasOwner, final Collection<ListenerActorRefEntry> listenerEntries)", "class_method_signature": "EntityOwnershipListenerSupport.notifyListeners(final DOMEntity entity, final boolean wasOwner, final boolean isOwner,\n            final boolean hasOwner, final Collection<ListenerActorRefEntry> listenerEntries)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-eos/src/main/java/org/opendaylight/controller/cluster/entityownership/EntityOwnershipListenerSupport.java"}, "focal_method": {"identifier": "notifyEntityOwnershipListeners", "parameters": "(final DOMEntity entity, final boolean wasOwner, final boolean isOwner,\n            final boolean hasOwner)", "modifiers": "@Override", "return": "void", "body": "@Override\n    void notifyEntityOwnershipListeners(final DOMEntity entity, final boolean wasOwner, final boolean isOwner,\n            final boolean hasOwner) {\n        listenerLock.readLock().lock();\n        try {\n            Collection<DOMEntityOwnershipListener> listeners = entityTypeListenerMap.get(entity.getType());\n            if (!listeners.isEmpty()) {\n                notifyListeners(entity, wasOwner, isOwner, hasOwner,\n                        listeners.stream().map(listenerActorMap::get).collect(Collectors.toList()));\n            }\n        } finally {\n            listenerLock.readLock().unlock();\n        }\n    }", "signature": "void notifyEntityOwnershipListeners(final DOMEntity entity, final boolean wasOwner, final boolean isOwner,\n            final boolean hasOwner)", "full_signature": "@Override void notifyEntityOwnershipListeners(final DOMEntity entity, final boolean wasOwner, final boolean isOwner,\n            final boolean hasOwner)", "class_method_signature": "EntityOwnershipListenerSupport.notifyEntityOwnershipListeners(final DOMEntity entity, final boolean wasOwner, final boolean isOwner,\n            final boolean hasOwner)", "testcase": false, "constructor": false, "invocations": ["lock", "readLock", "get", "getType", "isEmpty", "notifyListeners", "collect", "map", "stream", "toList", "unlock", "readLock"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}