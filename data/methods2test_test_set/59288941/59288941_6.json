{"test_class": {"identifier": "RouteServiceTest", "superclass": "", "interfaces": "implements SelectTestSql", "fields": [{"original_string": "private RouteService routeService = new RouteService();", "modifier": "private", "type": "RouteService", "declarator": "routeService = new RouteService()", "var_name": "routeService"}], "file": "baymax-core/src/test/java/com/tongbanjie/baymax/router/RouteServiceTest.java"}, "test_case": {"identifier": "testRoute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRoute() throws Exception {\n        List<String> tables = new ArrayList<String>();\n        List<CalculateUnit > units = new ArrayList<CalculateUnit>();\n\n        tables.add(\"table1\");\n\n        CalculateUnit unit1 = new CalculateUnit();\n        unit1.addCondition(ConditionUnit.buildConditionUnit(\"table1\", \"a\", new String[]{\"2\"}, ConditionUnitOperator.EQUAL));\n\n        units.add(unit1);\n\n        ExecutePlan plan =routeService.route(tables, units, \"select\", SqlType.SELECT);\n\n        System.out.println(plan);\n    }", "signature": "void testRoute()", "full_signature": "@Test public void testRoute()", "class_method_signature": "RouteServiceTest.testRoute()", "testcase": true, "constructor": false, "invocations": ["add", "addCondition", "buildConditionUnit", "add", "route", "println"]}, "focal_class": {"identifier": "RouteService", "superclass": "", "interfaces": "implements IRouteService", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(RouteService.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RouteService.class)", "var_name": "logger"}], "methods": [{"identifier": "doRoute", "parameters": "(String sql, Map<Integer, ParameterCommand> parameterCommand)", "modifiers": "public", "return": "ExecutePlan", "signature": "ExecutePlan doRoute(String sql, Map<Integer, ParameterCommand> parameterCommand)", "full_signature": "public ExecutePlan doRoute(String sql, Map<Integer, ParameterCommand> parameterCommand)", "class_method_signature": "RouteService.doRoute(String sql, Map<Integer, ParameterCommand> parameterCommand)", "testcase": false, "constructor": false}, {"identifier": "route", "parameters": "(List<String> tables, List<CalculateUnit> units, String sql, SqlType sqlType)", "modifiers": "public", "return": "ExecutePlan", "signature": "ExecutePlan route(List<String> tables, List<CalculateUnit> units, String sql, SqlType sqlType)", "full_signature": "public ExecutePlan route(List<String> tables, List<CalculateUnit> units, String sql, SqlType sqlType)", "class_method_signature": "RouteService.route(List<String> tables, List<CalculateUnit> units, String sql, SqlType sqlType)", "testcase": false, "constructor": false}, {"identifier": "buildExecutePlanTypeNo", "parameters": "(String sql, String tableName, SqlType sqlType)", "modifiers": "private", "return": "ExecutePlan", "signature": "ExecutePlan buildExecutePlanTypeNo(String sql, String tableName, SqlType sqlType)", "full_signature": "private ExecutePlan buildExecutePlanTypeNo(String sql, String tableName, SqlType sqlType)", "class_method_signature": "RouteService.buildExecutePlanTypeNo(String sql, String tableName, SqlType sqlType)", "testcase": false, "constructor": false}, {"identifier": "buildExecutePlanTypeAll", "parameters": "(PartitionTable partitionTable, SqlType sqlType)", "modifiers": "private", "return": "ExecutePlan", "signature": "ExecutePlan buildExecutePlanTypeAll(PartitionTable partitionTable, SqlType sqlType)", "full_signature": "private ExecutePlan buildExecutePlanTypeAll(PartitionTable partitionTable, SqlType sqlType)", "class_method_signature": "RouteService.buildExecutePlanTypeAll(PartitionTable partitionTable, SqlType sqlType)", "testcase": false, "constructor": false}, {"identifier": "buildExecutePlanTypePartition", "parameters": "(PartitionTable partitionTable, SqlType sqlType, Set<TargetTableEntity> nodeSet)", "modifiers": "private", "return": "ExecutePlan", "signature": "ExecutePlan buildExecutePlanTypePartition(PartitionTable partitionTable, SqlType sqlType, Set<TargetTableEntity> nodeSet)", "full_signature": "private ExecutePlan buildExecutePlanTypePartition(PartitionTable partitionTable, SqlType sqlType, Set<TargetTableEntity> nodeSet)", "class_method_signature": "RouteService.buildExecutePlanTypePartition(PartitionTable partitionTable, SqlType sqlType, Set<TargetTableEntity> nodeSet)", "testcase": false, "constructor": false}, {"identifier": "buildParameters", "parameters": "(Map<Integer, ParameterCommand> commonds)", "modifiers": "public", "return": "List<Object>", "signature": "List<Object> buildParameters(Map<Integer, ParameterCommand> commonds)", "full_signature": "public List<Object> buildParameters(Map<Integer, ParameterCommand> commonds)", "class_method_signature": "RouteService.buildParameters(Map<Integer, ParameterCommand> commonds)", "testcase": false, "constructor": false}], "file": "baymax-core/src/main/java/com/tongbanjie/baymax/router/RouteService.java"}, "focal_method": {"identifier": "route", "parameters": "(List<String> tables, List<CalculateUnit> units, String sql, SqlType sqlType)", "modifiers": "public", "return": "ExecutePlan", "body": "public ExecutePlan route(List<String> tables, List<CalculateUnit> units, String sql, SqlType sqlType){\n        if (logger.isDebugEnabled()){\n            logger.debug(\"\u8ba1\u7b97\u5355\u5143:\" + PrintUtil.printCalculates(units));\n        }\n\n        // \u5224\u65ad\u662f\u5426\u89e3\u6790\u5230\u8868\u540d\n        if (tables == null || tables.size() == 0){\n            return buildExecutePlanTypeNo(sql, null, sqlType);\n        }\n        // \u67e5\u627e\u903b\u8f91\u8868\u5bf9\u5e94\u7684\u5206\u533a\u89c4\u5219\n        PartitionTable partitionTable = null;\n        for (String tableName : tables){\n            if (BaymaxContext.isPartitionTable(tableName)){\n                if (partitionTable != null){\n                    throw new BayMaxException(\"sql\u4e2d\u5305\u542b\u4e86\u4e24\u4e2a\u5206\u533a\u8868\");\n                }else {\n                    partitionTable = BaymaxContext.getPartitionTable(tableName);\n                }\n            }\n        }\n        // \u6ca1\u6709\u89c4\u5219 \u65e0\u9700\u8def\u7531\n        if (partitionTable == null){\n            return buildExecutePlanTypeNo(sql, null, sqlType);\n        }\n\n        // \u6ca1\u6709\u8ba1\u7b97\u5355\u5143 \u5168\u8868\u626b\u63cf\n        if (units == null || units.size() == 0){\n            return buildExecutePlanTypeAll(partitionTable, sqlType);\n        }\n\n        // \u8def\u7531\u5355\u5143\u8ba1\u7b97-\u5408\u5e76\n        Set<TargetTableEntity> nodeSet = new LinkedHashSet<TargetTableEntity>();\n        for (CalculateUnit unit : units) {\n            List<TargetTableEntity> temp = partitionTable.execute(unit);\n            if (temp == null || temp.size() == 0){\n                // \u8fd9\u4e2a\u5355\u5143\u6ca1\u6709\u8def\u7531\u7ed3\u679c \u9700\u8981\u5168\u8868\u626b\u63cf\n                return buildExecutePlanTypeAll(partitionTable, sqlType);\n            }else {\n                nodeSet.addAll(temp);\n            }\n        }\n\n        if (nodeSet.size() == 0){\n            return buildExecutePlanTypeNo(sql, partitionTable.getLogicTableName(), sqlType);\n        }\n\n        return buildExecutePlanTypePartition(partitionTable, sqlType, nodeSet);\n    }", "signature": "ExecutePlan route(List<String> tables, List<CalculateUnit> units, String sql, SqlType sqlType)", "full_signature": "public ExecutePlan route(List<String> tables, List<CalculateUnit> units, String sql, SqlType sqlType)", "class_method_signature": "RouteService.route(List<String> tables, List<CalculateUnit> units, String sql, SqlType sqlType)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "culates(units))", "size", "buildExecutePlanTypeNo", "isPartitionTable", "getPartitionTable", "buildExecutePlanTypeNo", "size", "buildExecutePlanTypeAll", "execute", "size", "buildExecutePlanTypeAll", "addAll", "size", "buildExecutePlanTypeNo", "getLogicTableName", "buildExecutePlanTypePartition"]}, "repository": {"repo_id": 59288941, "url": "https://github.com/tongbanjie/baymax", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 45, "size": 1578, "license": "licensed"}}