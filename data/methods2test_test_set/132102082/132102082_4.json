{"test_class": {"identifier": "StringWrapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "smali/util/src/test/java/org/jf/util/StringWrapperTest.java"}, "test_case": {"identifier": "testWrapString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWrapString() {\n        validateResult(\n                new String[]{\"abc\", \"abcdef\", \"abcdef\"},\n                StringWrapper.wrapString(\"abc\\nabcdefabcdef\", 6, null));\n\n        validateResult(\n                new String[]{\"abc\"},\n                StringWrapper.wrapString(\"abc\", 6, new String[3]));\n\n        validateResult(\n                new String[]{\"abc\"},\n                StringWrapper.wrapString(\"abc\", 6, new String[0]));\n\n        validateResult(\n                new String[]{\"abc\"},\n                StringWrapper.wrapString(\"abc\", 6, new String[1]));\n\n        validateResult(\n                new String[]{\"\"},\n                StringWrapper.wrapString(\"\", 6, new String[3]));\n\n        validateResult(\n                new String[]{\"abcdef\"},\n                StringWrapper.wrapString(\"abcdef\", 6, new String[3]));\n\n        validateResult(\n                new String[]{\"abcdef\", \"abcdef\"},\n                StringWrapper.wrapString(\"abcdef\\nabcdef\", 6, new String[3]));\n\n        validateResult(\n                new String[]{\"abc\", \"\", \"def\"},\n                StringWrapper.wrapString(\"abc\\n\\ndef\", 6, new String[3]));\n\n        validateResult(\n                new String[]{\"\", \"abcdef\"},\n                StringWrapper.wrapString(\"\\nabcdef\", 6, new String[3]));\n\n        validateResult(\n                new String[]{\"\", \"\", \"abcdef\"},\n                StringWrapper.wrapString(\"\\n\\nabcdef\", 6, new String[3]));\n\n        validateResult(\n                new String[]{\"\", \"\", \"abcdef\"},\n                StringWrapper.wrapString(\"\\n\\nabcdef\", 6, new String[4]));\n\n        validateResult(\n                new String[]{\"\", \"\", \"abcdef\", \"\"},\n                StringWrapper.wrapString(\"\\n\\nabcdef\\n\\n\", 6, new String[4]));\n\n        validateResult(\n                new String[]{\"\", \"\", \"abcdef\", \"a\", \"\"},\n                StringWrapper.wrapString(\"\\n\\nabcdefa\\n\\n\", 6, new String[4]));\n\n        validateResult(\n                new String[]{\"\", \"\", \"abcdef\", \"a\", \"\"},\n                StringWrapper.wrapString(\"\\n\\nabcdefa\\n\\n\", 6, new String[0]));\n\n        validateResult(\n                new String[]{\"\", \"\", \"abcdef\", \"a\", \"\"},\n                StringWrapper.wrapString(\"\\n\\nabcdefa\\n\\n\", 6, new String[5]));\n\n        validateResult(\n                new String[]{\"\", \"\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"a\", \"\"},\n                StringWrapper.wrapString(\"\\n\\nabcdefa\\n\\n\", 1, new String[5]));\n    }", "signature": "void testWrapString()", "full_signature": "@Test public void testWrapString()", "class_method_signature": "StringWrapperTest.testWrapString()", "testcase": true, "constructor": false, "invocations": ["validateResult", "wrapString", "validateResult", "wrapString", "validateResult", "wrapString", "validateResult", "wrapString", "validateResult", "wrapString", "validateResult", "wrapString", "validateResult", "wrapString", "validateResult", "wrapString", "validateResult", "wrapString", "validateResult", "wrapString", "validateResult", "wrapString", "validateResult", "wrapString", "validateResult", "wrapString", "validateResult", "wrapString", "validateResult", "wrapString", "validateResult", "wrapString"]}, "focal_class": {"identifier": "StringWrapper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "wrapStringOnBreaks", "parameters": "(@Nonnull final String string, final int maxWidth)", "modifiers": "public static", "return": "Iterable<String>", "signature": "Iterable<String> wrapStringOnBreaks(@Nonnull final String string, final int maxWidth)", "full_signature": "public static Iterable<String> wrapStringOnBreaks(@Nonnull final String string, final int maxWidth)", "class_method_signature": "StringWrapper.wrapStringOnBreaks(@Nonnull final String string, final int maxWidth)", "testcase": false, "constructor": false}, {"identifier": "wrapString", "parameters": "(@Nonnull String str, int maxWidth, @Nullable String[] output)", "modifiers": "public static", "return": "String[]", "signature": "String[] wrapString(@Nonnull String str, int maxWidth, @Nullable String[] output)", "full_signature": "public static String[] wrapString(@Nonnull String str, int maxWidth, @Nullable String[] output)", "class_method_signature": "StringWrapper.wrapString(@Nonnull String str, int maxWidth, @Nullable String[] output)", "testcase": false, "constructor": false}, {"identifier": "addString", "parameters": "(@Nonnull String[] arr, String str, int index)", "modifiers": "private static", "return": "String[]", "signature": "String[] addString(@Nonnull String[] arr, String str, int index)", "full_signature": "private static String[] addString(@Nonnull String[] arr, String str, int index)", "class_method_signature": "StringWrapper.addString(@Nonnull String[] arr, String str, int index)", "testcase": false, "constructor": false}, {"identifier": "addString", "parameters": "(@Nonnull String[] arr, String str, int index, int newLength)", "modifiers": "private static", "return": "String[]", "signature": "String[] addString(@Nonnull String[] arr, String str, int index, int newLength)", "full_signature": "private static String[] addString(@Nonnull String[] arr, String str, int index, int newLength)", "class_method_signature": "StringWrapper.addString(@Nonnull String[] arr, String str, int index, int newLength)", "testcase": false, "constructor": false}, {"identifier": "enlargeArray", "parameters": "(String[] arr, int newLength)", "modifiers": "private static", "return": "String[]", "signature": "String[] enlargeArray(String[] arr, int newLength)", "full_signature": "private static String[] enlargeArray(String[] arr, int newLength)", "class_method_signature": "StringWrapper.enlargeArray(String[] arr, int newLength)", "testcase": false, "constructor": false}, {"identifier": "printWrappedString", "parameters": "(@Nonnull PrintStream stream, @Nonnull String string)", "modifiers": "public static", "return": "void", "signature": "void printWrappedString(@Nonnull PrintStream stream, @Nonnull String string)", "full_signature": "public static void printWrappedString(@Nonnull PrintStream stream, @Nonnull String string)", "class_method_signature": "StringWrapper.printWrappedString(@Nonnull PrintStream stream, @Nonnull String string)", "testcase": false, "constructor": false}, {"identifier": "printWrappedString", "parameters": "(@Nonnull PrintStream stream, @Nonnull String string, int maxWidth)", "modifiers": "public static", "return": "void", "signature": "void printWrappedString(@Nonnull PrintStream stream, @Nonnull String string, int maxWidth)", "full_signature": "public static void printWrappedString(@Nonnull PrintStream stream, @Nonnull String string, int maxWidth)", "class_method_signature": "StringWrapper.printWrappedString(@Nonnull PrintStream stream, @Nonnull String string, int maxWidth)", "testcase": false, "constructor": false}], "file": "smali/util/src/main/java/org/jf/util/StringWrapper.java"}, "focal_method": {"identifier": "wrapString", "parameters": "(@Nonnull String str, int maxWidth, @Nullable String[] output)", "modifiers": "public static", "return": "String[]", "body": "public static String[] wrapString(@Nonnull String str, int maxWidth, @Nullable String[] output) {\n        if (output == null) {\n            output = new String[(int)((str.length() / maxWidth) * 1.5d + 1)];\n        }\n\n        int lineStart = 0;\n        int arrayIndex = 0;\n        int i;\n        for (i=0; i<str.length(); i++) {\n            char c = str.charAt(i);\n\n            if (c == '\\n') {\n                output = addString(output, str.substring(lineStart, i), arrayIndex++);\n                lineStart = i+1;\n            } else if (i - lineStart == maxWidth) {\n                output = addString(output, str.substring(lineStart, i), arrayIndex++);\n                lineStart = i;\n            }\n        }\n        if (lineStart != i || i == 0) {\n            output = addString(output, str.substring(lineStart), arrayIndex++, output.length+1);\n        }\n\n        if (arrayIndex < output.length) {\n            output[arrayIndex] = null;\n        }\n        return output;\n    }", "signature": "String[] wrapString(@Nonnull String str, int maxWidth, @Nullable String[] output)", "full_signature": "public static String[] wrapString(@Nonnull String str, int maxWidth, @Nullable String[] output)", "class_method_signature": "StringWrapper.wrapString(@Nonnull String str, int maxWidth, @Nullable String[] output)", "testcase": false, "constructor": false, "invocations": ["length", "length", "charAt", "addString", "substring", "addString", "substring", "addString", "substring"]}, "repository": {"repo_id": 132102082, "url": "https://github.com/marshalyauly/vmp", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 12726, "license": "licensed"}}