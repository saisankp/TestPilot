{"test_class": {"identifier": "IpAddressResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private InetAddressFactory inetAddressFactory;", "modifier": "@Mock\n    private", "type": "InetAddressFactory", "declarator": "inetAddressFactory", "var_name": "inetAddressFactory"}, {"original_string": "@InjectMocks\n    private IpAddressResolver underTest;", "modifier": "@InjectMocks\n    private", "type": "IpAddressResolver", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private InetAddress inetAddress;", "modifier": "@Mock\n    private", "type": "InetAddress", "declarator": "inetAddress", "var_name": "inetAddress"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/helper/IpAddressResolverTest.java"}, "test_case": {"identifier": "testResolveToHostNameShouldReturnHostName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResolveToHostNameShouldReturnHostName() throws UnknownHostException {\n        //GIVEN\n        String expectedHostName = \"expectedHostName\";\n        given(inetAddressFactory.createByName(\"anIPAddress\")).willReturn(inetAddress);\n        given(inetAddress.getHostName()).willReturn(expectedHostName);\n        //WHEN\n        String actualHostName = underTest.resolveToHostName(\"anIPAddress\");\n        //THEN\n        assertEquals(expectedHostName, actualHostName);\n    }", "signature": "void testResolveToHostNameShouldReturnHostName()", "full_signature": "@Test public void testResolveToHostNameShouldReturnHostName()", "class_method_signature": "IpAddressResolverTest.testResolveToHostNameShouldReturnHostName()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "createByName", "willReturn", "given", "getHostName", "resolveToHostName", "assertEquals"]}, "focal_class": {"identifier": "IpAddressResolver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEBUG_MESSAGE = \"Host could not be resolved: \";", "modifier": "private static final", "type": "String", "declarator": "DEBUG_MESSAGE = \"Host could not be resolved: \"", "var_name": "DEBUG_MESSAGE"}, {"original_string": "private static final String UNKNOWN_HOST_TEMPLATE = \"UNKNOWN HOST(%s)\";", "modifier": "private static final", "type": "String", "declarator": "UNKNOWN_HOST_TEMPLATE = \"UNKNOWN HOST(%s)\"", "var_name": "UNKNOWN_HOST_TEMPLATE"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(IpAddressResolver.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(IpAddressResolver.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private InetAddressFactory inetAddressFactory;", "modifier": "@Autowired\n    private", "type": "InetAddressFactory", "declarator": "inetAddressFactory", "var_name": "inetAddressFactory"}], "methods": [{"identifier": "resolveToHostName", "parameters": "(final String ip)", "modifiers": "public", "return": "String", "signature": "String resolveToHostName(final String ip)", "full_signature": "public String resolveToHostName(final String ip)", "class_method_signature": "IpAddressResolver.resolveToHostName(final String ip)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/helper/IpAddressResolver.java"}, "focal_method": {"identifier": "resolveToHostName", "parameters": "(final String ip)", "modifiers": "public", "return": "String", "body": "public String resolveToHostName(final String ip) {\n        String host = \"\";\n        try {\n            InetAddress address = inetAddressFactory.createByName(ip);\n            host = address.getHostName();\n        } catch (UnknownHostException e) {\n            logger.debug(DEBUG_MESSAGE + host, e);\n            host = String.format(UNKNOWN_HOST_TEMPLATE, ip);\n        }\n        return host;\n    }", "signature": "String resolveToHostName(final String ip)", "full_signature": "public String resolveToHostName(final String ip)", "class_method_signature": "IpAddressResolver.resolveToHostName(final String ip)", "testcase": false, "constructor": false, "invocations": ["createByName", "getHostName", "debug", "format"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}