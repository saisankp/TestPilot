{"test_class": {"identifier": "BadgeIssuerActorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final FiniteDuration ACTOR_MAX_WAIT_DURATION = duration(\"100 second\");", "modifier": "private static final", "type": "FiniteDuration", "declarator": "ACTOR_MAX_WAIT_DURATION = duration(\"100 second\")", "var_name": "ACTOR_MAX_WAIT_DURATION"}, {"original_string": "private ActorSystem system;", "modifier": "private", "type": "ActorSystem", "declarator": "system", "var_name": "system"}, {"original_string": "private Props props;", "modifier": "private", "type": "Props", "declarator": "props", "var_name": "props"}, {"original_string": "private TestKit probe;", "modifier": "private", "type": "TestKit", "declarator": "probe", "var_name": "probe"}, {"original_string": "private ActorRef subject;", "modifier": "private", "type": "ActorRef", "declarator": "subject", "var_name": "subject"}, {"original_string": "private Request actorMessage;", "modifier": "private", "type": "Request", "declarator": "actorMessage", "var_name": "actorMessage"}, {"original_string": "BadgrServiceImpl mockBadgingService;", "modifier": "", "type": "BadgrServiceImpl", "declarator": "mockBadgingService", "var_name": "mockBadgingService"}, {"original_string": "ProjectCommonException resourceNotFoundException;", "modifier": "", "type": "ProjectCommonException", "declarator": "resourceNotFoundException", "var_name": "resourceNotFoundException"}], "file": "actors/badge/src/test/java/org/sunbird/badge/actors/BadgeIssuerActorTest.java"}, "test_case": {"identifier": "testGetBadgeIssuer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetBadgeIssuer() throws IOException {\n    Response response = new Response();\n\n    response.put(JsonKey.RESPONSE, createHttpUtilRes(200, mapToJson(createBadgeIssuerResponse())));\n\n    PowerMockito.when(mockBadgingService.getIssuerDetails(actorMessage)).thenReturn(response);\n    actorMessage.setOperation(BadgeOperations.getBadgeIssuer.name());\n    subject.tell(actorMessage, probe.getRef());\n    Response resp = probe.expectMsgClass(ACTOR_MAX_WAIT_DURATION, Response.class);\n    Assert.assertTrue(null != resp);\n  }", "signature": "void testGetBadgeIssuer()", "full_signature": "@Test public void testGetBadgeIssuer()", "class_method_signature": "BadgeIssuerActorTest.testGetBadgeIssuer()", "testcase": true, "constructor": false, "invocations": ["put", "createHttpUtilRes", "mapToJson", "createBadgeIssuerResponse", "thenReturn", "when", "getIssuerDetails", "setOperation", "name", "tell", "getRef", "expectMsgClass", "assertTrue"]}, "focal_class": {"identifier": "BadgeIssuerActor", "superclass": "extends BaseActor", "interfaces": "", "fields": [{"original_string": "private BadgingService badgingService;", "modifier": "private", "type": "BadgingService", "declarator": "badgingService", "var_name": "badgingService"}], "methods": [{"identifier": "BadgeIssuerActor", "parameters": "()", "modifiers": "public", "return": "", "signature": " BadgeIssuerActor()", "full_signature": "public  BadgeIssuerActor()", "class_method_signature": "BadgeIssuerActor.BadgeIssuerActor()", "testcase": false, "constructor": true}, {"identifier": "BadgeIssuerActor", "parameters": "(BadgingService badgingService)", "modifiers": "public", "return": "", "signature": " BadgeIssuerActor(BadgingService badgingService)", "full_signature": "public  BadgeIssuerActor(BadgingService badgingService)", "class_method_signature": "BadgeIssuerActor.BadgeIssuerActor(BadgingService badgingService)", "testcase": false, "constructor": true}, {"identifier": "onReceive", "parameters": "(Request request)", "modifiers": "@Override public", "return": "void", "signature": "void onReceive(Request request)", "full_signature": "@Override public void onReceive(Request request)", "class_method_signature": "BadgeIssuerActor.onReceive(Request request)", "testcase": false, "constructor": false}, {"identifier": "createBadgeIssuer", "parameters": "(Request actorMessage)", "modifiers": "private", "return": "void", "signature": "void createBadgeIssuer(Request actorMessage)", "full_signature": "private void createBadgeIssuer(Request actorMessage)", "class_method_signature": "BadgeIssuerActor.createBadgeIssuer(Request actorMessage)", "testcase": false, "constructor": false}, {"identifier": "getBadgeIssuer", "parameters": "(Request actorMessage)", "modifiers": "private", "return": "void", "signature": "void getBadgeIssuer(Request actorMessage)", "full_signature": "private void getBadgeIssuer(Request actorMessage)", "class_method_signature": "BadgeIssuerActor.getBadgeIssuer(Request actorMessage)", "testcase": false, "constructor": false}, {"identifier": "getAllIssuer", "parameters": "(Request actorMessage)", "modifiers": "private", "return": "void", "signature": "void getAllIssuer(Request actorMessage)", "full_signature": "private void getAllIssuer(Request actorMessage)", "class_method_signature": "BadgeIssuerActor.getAllIssuer(Request actorMessage)", "testcase": false, "constructor": false}, {"identifier": "deleteIssuer", "parameters": "(Request request)", "modifiers": "private", "return": "void", "signature": "void deleteIssuer(Request request)", "full_signature": "private void deleteIssuer(Request request)", "class_method_signature": "BadgeIssuerActor.deleteIssuer(Request request)", "testcase": false, "constructor": false}], "file": "actors/badge/src/main/java/org/sunbird/badge/actors/BadgeIssuerActor.java"}, "focal_method": {"identifier": "getBadgeIssuer", "parameters": "(Request actorMessage)", "modifiers": "private", "return": "void", "body": "private void getBadgeIssuer(Request actorMessage) throws IOException {\n    Response response = badgingService.getIssuerDetails(actorMessage);\n    sender().tell(response, self());\n  }", "signature": "void getBadgeIssuer(Request actorMessage)", "full_signature": "private void getBadgeIssuer(Request actorMessage)", "class_method_signature": "BadgeIssuerActor.getBadgeIssuer(Request actorMessage)", "testcase": false, "constructor": false, "invocations": ["getIssuerDetails", "tell", "sender", "self"]}, "repository": {"repo_id": 96122408, "url": "https://github.com/project-sunbird/sunbird-lms-mw", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 5, "size": 15380, "license": "licensed"}}