{"test_class": {"identifier": "PublicSharingTest", "superclass": "", "interfaces": "", "fields": [], "file": "pross-common/src/test/java/com/ibm/pross/common/util/pvss/PublicSharingTest.java"}, "test_case": {"identifier": "testProofPerformance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testProofPerformance() {\n\n\t\tfinal int keyLength = 2048;\n\t\tfinal int n = 11;\n\t\tfinal int t = ((n - 1) / 2) + 1;\n\n\t\t// Generate shareholder public keys\n\t\tfinal PaillierKeyPair[] keyPairs = new PaillierKeyPair[n];\n\t\tfinal PaillierPublicKey[] publicKeys = new PaillierPublicKey[n];\n\t\tfinal PaillierPrivateKey[] privateKeys = new PaillierPrivateKey[n];\n\t\tfinal PaillierKeyGenerator generator = new PaillierKeyGenerator(keyLength);\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tkeyPairs[i] = generator.generate();\n\t\t\tpublicKeys[i] = keyPairs[i].getPublicKey();\n\t\t\tprivateKeys[i] = keyPairs[i].getPrivateKey();\n\t\t}\n\n\t\t// Warm up\n\t\tfinal PublicSharingGenerator pvssDealer = new PublicSharingGenerator(n, t);\n\t\tPublicSharing sharing = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tsharing = pvssDealer.shareSecret(BigInteger.valueOf(1), publicKeys);\n\t\t}\n\t\tSystem.out.println(\"Sharing size: \" + sharing.getSize());\n\n\t\t// Do test\n\t\tlong timeNs = 0;\n\t\tfinal int iterations = 1000;\n\t\tfor (int i = 0; i < iterations; i++) {\n\t\t\tfinal long start = System.nanoTime();\n\t\t\tpvssDealer.shareRandomSecret(publicKeys);\n\t\t\tfinal long end = System.nanoTime();\n\t\t\ttimeNs += (end - start);\n\t\t}\n\n\t\tSystem.out.println(\"Total time (ms): \" + timeNs / (((long) iterations) * 1_000_000.0));\n\t}", "signature": "void testProofPerformance()", "full_signature": "@Test public void testProofPerformance()", "class_method_signature": "PublicSharingTest.testProofPerformance()", "testcase": true, "constructor": false, "invocations": ["generate", "getPublicKey", "getPrivateKey", "shareSecret", "valueOf", "println", "getSize", "nanoTime", "shareRandomSecret", "nanoTime", "println"]}, "focal_class": {"identifier": "PublicSharing", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -7866009350143080725L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -7866009350143080725L", "var_name": "serialVersionUID"}, {"original_string": "private final EcPoint[] pedersenCommitments;", "modifier": "private final", "type": "EcPoint[]", "declarator": "pedersenCommitments", "var_name": "pedersenCommitments"}, {"original_string": "private final BigInteger[] encryptedShares1;", "modifier": "private final", "type": "BigInteger[]", "declarator": "encryptedShares1", "var_name": "encryptedShares1"}, {"original_string": "private final BigInteger[] encryptedShares2;", "modifier": "private final", "type": "BigInteger[]", "declarator": "encryptedShares2", "var_name": "encryptedShares2"}, {"original_string": "private final PedersenEqRangeProof[] proofs;", "modifier": "private final", "type": "PedersenEqRangeProof[]", "declarator": "proofs", "var_name": "proofs"}, {"original_string": "private final int numShares;", "modifier": "private final", "type": "int", "declarator": "numShares", "var_name": "numShares"}, {"original_string": "private final int threshold;", "modifier": "private final", "type": "int", "declarator": "threshold", "var_name": "threshold"}], "methods": [{"identifier": "PublicSharing", "parameters": "(final EcPoint[] pedersenCommitments, final BigInteger[] encryptedShares1,\n\t\t\tfinal BigInteger[] encryptedShares2, final PedersenEqRangeProof[] proofs)", "modifiers": "public", "return": "", "signature": " PublicSharing(final EcPoint[] pedersenCommitments, final BigInteger[] encryptedShares1,\n\t\t\tfinal BigInteger[] encryptedShares2, final PedersenEqRangeProof[] proofs)", "full_signature": "public  PublicSharing(final EcPoint[] pedersenCommitments, final BigInteger[] encryptedShares1,\n\t\t\tfinal BigInteger[] encryptedShares2, final PedersenEqRangeProof[] proofs)", "class_method_signature": "PublicSharing.PublicSharing(final EcPoint[] pedersenCommitments, final BigInteger[] encryptedShares1,\n\t\t\tfinal BigInteger[] encryptedShares2, final PedersenEqRangeProof[] proofs)", "testcase": false, "constructor": true}, {"identifier": "getPedersenCommitments", "parameters": "()", "modifiers": "public", "return": "EcPoint[]", "signature": "EcPoint[] getPedersenCommitments()", "full_signature": "public EcPoint[] getPedersenCommitments()", "class_method_signature": "PublicSharing.getPedersenCommitments()", "testcase": false, "constructor": false}, {"identifier": "getEncryptedShares1", "parameters": "()", "modifiers": "public", "return": "BigInteger[]", "signature": "BigInteger[] getEncryptedShares1()", "full_signature": "public BigInteger[] getEncryptedShares1()", "class_method_signature": "PublicSharing.getEncryptedShares1()", "testcase": false, "constructor": false}, {"identifier": "getEncryptedShares2", "parameters": "()", "modifiers": "public", "return": "BigInteger[]", "signature": "BigInteger[] getEncryptedShares2()", "full_signature": "public BigInteger[] getEncryptedShares2()", "class_method_signature": "PublicSharing.getEncryptedShares2()", "testcase": false, "constructor": false}, {"identifier": "getProofs", "parameters": "()", "modifiers": "public", "return": "PedersenEqRangeProof[]", "signature": "PedersenEqRangeProof[] getProofs()", "full_signature": "public PedersenEqRangeProof[] getProofs()", "class_method_signature": "PublicSharing.getProofs()", "testcase": false, "constructor": false}, {"identifier": "getNumShares", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumShares()", "full_signature": "public int getNumShares()", "class_method_signature": "PublicSharing.getNumShares()", "testcase": false, "constructor": false}, {"identifier": "getThreshold", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getThreshold()", "full_signature": "public int getThreshold()", "class_method_signature": "PublicSharing.getThreshold()", "testcase": false, "constructor": false}, {"identifier": "verifyAllShares", "parameters": "(final PaillierPublicKey[] shareholderKeys)", "modifiers": "public", "return": "boolean", "signature": "boolean verifyAllShares(final PaillierPublicKey[] shareholderKeys)", "full_signature": "public boolean verifyAllShares(final PaillierPublicKey[] shareholderKeys)", "class_method_signature": "PublicSharing.verifyAllShares(final PaillierPublicKey[] shareholderKeys)", "testcase": false, "constructor": false}, {"identifier": "verifyShare", "parameters": "(final int shareIndex, final PaillierPublicKey encryptionKey)", "modifiers": "public", "return": "boolean", "signature": "boolean verifyShare(final int shareIndex, final PaillierPublicKey encryptionKey)", "full_signature": "public boolean verifyShare(final int shareIndex, final PaillierPublicKey encryptionKey)", "class_method_signature": "PublicSharing.verifyShare(final int shareIndex, final PaillierPublicKey encryptionKey)", "testcase": false, "constructor": false}, {"identifier": "getSecretCommitment", "parameters": "()", "modifiers": "public", "return": "EcPoint", "signature": "EcPoint getSecretCommitment()", "full_signature": "public EcPoint getSecretCommitment()", "class_method_signature": "PublicSharing.getSecretCommitment()", "testcase": false, "constructor": false}, {"identifier": "accessShare1", "parameters": "(final int shareIndex, final PaillierPrivateKey decryptionKey)", "modifiers": "public", "return": "ShamirShare", "signature": "ShamirShare accessShare1(final int shareIndex, final PaillierPrivateKey decryptionKey)", "full_signature": "public ShamirShare accessShare1(final int shareIndex, final PaillierPrivateKey decryptionKey)", "class_method_signature": "PublicSharing.accessShare1(final int shareIndex, final PaillierPrivateKey decryptionKey)", "testcase": false, "constructor": false}, {"identifier": "accessShare2", "parameters": "(final int shareIndex, final PaillierPrivateKey decryptionKey)", "modifiers": "public", "return": "ShamirShare", "signature": "ShamirShare accessShare2(final int shareIndex, final PaillierPrivateKey decryptionKey)", "full_signature": "public ShamirShare accessShare2(final int shareIndex, final PaillierPrivateKey decryptionKey)", "class_method_signature": "PublicSharing.accessShare2(final int shareIndex, final PaillierPrivateKey decryptionKey)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PublicSharing.toString()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSize()", "full_signature": "public long getSize()", "class_method_signature": "PublicSharing.getSize()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PublicSharing.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "PublicSharing.equals(Object obj)", "testcase": false, "constructor": false}], "file": "pross-common/src/main/java/com/ibm/pross/common/util/pvss/PublicSharing.java"}, "focal_method": {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long getSize() {\n\t\tlong size = 0;\n\t\tfor (final EcPoint pedersenCommitment : this.pedersenCommitments) {\n\t\t\tsize += pedersenCommitment.getX().toByteArray().length + 1; // Assumes point compression\n\t\t}\n\t\tfor (final BigInteger encryptedShare1 : this.encryptedShares1) {\n\t\t\tsize += encryptedShare1.toByteArray().length;\n\t\t}\n\t\tfor (final BigInteger encryptedShare2 : this.encryptedShares2) {\n\t\t\tsize += encryptedShare2.toByteArray().length;\n\t\t}\n\t\tfor (final PedersenEqRangeProof proof : this.proofs) {\n\t\t\tsize += proof.getSize();\n\t\t}\n\t\treturn size;\n\t}", "signature": "long getSize()", "full_signature": "public long getSize()", "class_method_signature": "PublicSharing.getSize()", "testcase": false, "constructor": false, "invocations": ["toByteArray", "getX", "toByteArray", "toByteArray", "getSize"]}, "repository": {"repo_id": 144309611, "url": "https://github.com/jasonkresch/protect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 38, "size": 1932, "license": "licensed"}}