{"test_class": {"identifier": "KafkaClusterObserverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final KafkaConsumer kafkaConsumer = EasyMock.createMock(KafkaConsumer.class);", "modifier": "private final", "type": "KafkaConsumer", "declarator": "kafkaConsumer = EasyMock.createMock(KafkaConsumer.class)", "var_name": "kafkaConsumer"}, {"original_string": "private final KafkaClusterObserver observer = new KafkaClusterObserver(kafkaConsumer);", "modifier": "private final", "type": "KafkaClusterObserver", "declarator": "observer = new KafkaClusterObserver(kafkaConsumer)", "var_name": "observer"}, {"original_string": "private String testTopic1 = \"KafkaClusterObserverTest1\";", "modifier": "private", "type": "String", "declarator": "testTopic1 = \"KafkaClusterObserverTest1\"", "var_name": "testTopic1"}, {"original_string": "private final List<PartitionInfo> partitionInfo1 = new ArrayList<>();", "modifier": "private final", "type": "List<PartitionInfo>", "declarator": "partitionInfo1 = new ArrayList<>()", "var_name": "partitionInfo1"}, {"original_string": "private String testTopic2 = \"KafkaClusterObserverTest2\";", "modifier": "private", "type": "String", "declarator": "testTopic2 = \"KafkaClusterObserverTest2\"", "var_name": "testTopic2"}, {"original_string": "private final List<PartitionInfo> partitionInfo2 = new ArrayList<>();", "modifier": "private final", "type": "List<PartitionInfo>", "declarator": "partitionInfo2 = new ArrayList<>()", "var_name": "partitionInfo2"}, {"original_string": "private Map<TopicPartition, Integer> mockPartitionLeaderMap = new HashMap<>();", "modifier": "private", "type": "Map<TopicPartition, Integer>", "declarator": "mockPartitionLeaderMap = new HashMap<>()", "var_name": "mockPartitionLeaderMap"}], "file": "uReplicator-Common/src/test/java/com/uber/stream/ureplicator/common/KafkaClusterObserverTest.java"}, "test_case": {"identifier": "testKafkaClusterObserver", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testKafkaClusterObserver() {\n    EasyMock.reset(kafkaConsumer);\n\n    TopicPartition tp1 = new TopicPartition(testTopic1, 1);\n    TopicPartition tp2 = new TopicPartition(testTopic2, 1);\n    Map<String, List<PartitionInfo>> partitionInfoMap = new HashMap<>();\n    partitionInfoMap.put(testTopic1, partitionInfo1);\n    partitionInfoMap.put(testTopic2, partitionInfo2);\n\n    EasyMock.expect(kafkaConsumer.listTopics()).andReturn(partitionInfoMap);\n    EasyMock.replay(kafkaConsumer);\n\n    Map<TopicPartition, Integer> result =\n        observer.findLeaderForPartitions(ImmutableList.of(tp1, tp2));\n    Assert.assertEquals(result.get(tp1), Integer.valueOf(1));\n    Assert.assertEquals(result.get(tp2), Integer.valueOf(2));\n\n    EasyMock.verify(kafkaConsumer);\n  }", "signature": "void testKafkaClusterObserver()", "full_signature": "@Test public void testKafkaClusterObserver()", "class_method_signature": "KafkaClusterObserverTest.testKafkaClusterObserver()", "testcase": true, "constructor": false, "invocations": ["reset", "put", "put", "andReturn", "expect", "listTopics", "replay", "findLeaderForPartitions", "of", "assertEquals", "get", "valueOf", "assertEquals", "get", "valueOf", "verify"]}, "focal_class": {"identifier": "KafkaClusterObserver", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(KafkaClusterObserver.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(KafkaClusterObserver.class)", "var_name": "LOGGER"}, {"original_string": "private static final String DESERIALIZER_CLASS = \"org.apache.kafka.common.serialization.ByteArrayDeserializer\";", "modifier": "private static final", "type": "String", "declarator": "DESERIALIZER_CLASS = \"org.apache.kafka.common.serialization.ByteArrayDeserializer\"", "var_name": "DESERIALIZER_CLASS"}, {"original_string": "private final KafkaConsumer kafkaConsumer;", "modifier": "private final", "type": "KafkaConsumer", "declarator": "kafkaConsumer", "var_name": "kafkaConsumer"}], "methods": [{"identifier": "KafkaClusterObserver", "parameters": "(String bootstrapServer)", "modifiers": "public", "return": "", "signature": " KafkaClusterObserver(String bootstrapServer)", "full_signature": "public  KafkaClusterObserver(String bootstrapServer)", "class_method_signature": "KafkaClusterObserver.KafkaClusterObserver(String bootstrapServer)", "testcase": false, "constructor": true}, {"identifier": "KafkaClusterObserver", "parameters": "(KafkaConsumer kafkaConsumer)", "modifiers": "@VisibleForTesting protected", "return": "", "signature": " KafkaClusterObserver(KafkaConsumer kafkaConsumer)", "full_signature": "@VisibleForTesting protected  KafkaClusterObserver(KafkaConsumer kafkaConsumer)", "class_method_signature": "KafkaClusterObserver.KafkaClusterObserver(KafkaConsumer kafkaConsumer)", "testcase": false, "constructor": true}, {"identifier": "findLeaderForPartitions", "parameters": "(\n      List<TopicPartition> topicPartitions)", "modifiers": "public", "return": "Map<TopicPartition, Integer>", "signature": "Map<TopicPartition, Integer> findLeaderForPartitions(\n      List<TopicPartition> topicPartitions)", "full_signature": "public Map<TopicPartition, Integer> findLeaderForPartitions(\n      List<TopicPartition> topicPartitions)", "class_method_signature": "KafkaClusterObserver.findLeaderForPartitions(\n      List<TopicPartition> topicPartitions)", "testcase": false, "constructor": false}, {"identifier": "findLeaderId", "parameters": "(TopicPartition topicPartition,\n      List<PartitionInfo> partitionInfoList)", "modifiers": "private", "return": "Integer", "signature": "Integer findLeaderId(TopicPartition topicPartition,\n      List<PartitionInfo> partitionInfoList)", "full_signature": "private Integer findLeaderId(TopicPartition topicPartition,\n      List<PartitionInfo> partitionInfoList)", "class_method_signature": "KafkaClusterObserver.findLeaderId(TopicPartition topicPartition,\n      List<PartitionInfo> partitionInfoList)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "KafkaClusterObserver.close()", "testcase": false, "constructor": false}], "file": "uReplicator-Common/src/main/java/com/uber/stream/ureplicator/common/KafkaClusterObserver.java"}, "focal_method": {"identifier": "KafkaClusterObserver", "parameters": "(String bootstrapServer)", "modifiers": "public", "return": "", "body": "public KafkaClusterObserver(String bootstrapServer) {\n    Properties properties = new Properties();\n    properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServer);\n    properties.setProperty(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, String.valueOf(false));\n    properties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,\n        DESERIALIZER_CLASS);\n    properties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,\n        DESERIALIZER_CLASS);\n    this.kafkaConsumer = new KafkaConsumer(properties);\n  }", "signature": " KafkaClusterObserver(String bootstrapServer)", "full_signature": "public  KafkaClusterObserver(String bootstrapServer)", "class_method_signature": "KafkaClusterObserver.KafkaClusterObserver(String bootstrapServer)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 60201162, "url": "https://github.com/uber/uReplicator", "language": "Java", "is_fork": false, "fork_count": 148, "stargazer_count": 652, "size": 2223, "license": "licensed"}}