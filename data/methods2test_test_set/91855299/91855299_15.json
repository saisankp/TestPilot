{"test_class": {"identifier": "PluginLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PluginLoader loader;", "modifier": "private", "type": "PluginLoader", "declarator": "loader", "var_name": "loader"}, {"original_string": "private DataTypes dataTypes;", "modifier": "private", "type": "DataTypes", "declarator": "dataTypes", "var_name": "dataTypes"}, {"original_string": "private SourceTypes sourceTypes;", "modifier": "private", "type": "SourceTypes", "declarator": "sourceTypes", "var_name": "sourceTypes"}, {"original_string": "private Components components;", "modifier": "private", "type": "Components", "declarator": "components", "var_name": "components"}, {"original_string": "private Themes themes;", "modifier": "private", "type": "Themes", "declarator": "themes", "var_name": "themes"}, {"original_string": "private TabInfoRegistry tabInfoRegistry;", "modifier": "private", "type": "TabInfoRegistry", "declarator": "tabInfoRegistry", "var_name": "tabInfoRegistry"}], "file": "app/src/test/java/edu/wpi/first/shuffleboard/app/plugin/PluginLoaderTest.java"}, "test_case": {"identifier": "testDependentOnHigherVersion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDependentOnHigherVersion() {\n    assumeTrue(loader.load(new MockPlugin()));\n    assertFalse(loader.load(new DependentOnHigherVersion()));\n  }", "signature": "void testDependentOnHigherVersion()", "full_signature": "@Test public void testDependentOnHigherVersion()", "class_method_signature": "PluginLoaderTest.testDependentOnHigherVersion()", "testcase": true, "constructor": false, "invocations": ["assumeTrue", "load", "assertFalse", "load"]}, "focal_class": {"identifier": "PluginLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(PluginLoader.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(PluginLoader.class.getName())", "var_name": "log"}, {"original_string": "private static final PluginLoader defaultLoader =\n      new PluginLoader(\n          DataTypes.getDefault(),\n          SourceTypes.getDefault(),\n          Components.getDefault(),\n          Themes.getDefault(),\n          TabInfoRegistry.getDefault(),\n          Converters.getDefault(),\n          PropertyParsers.getDefault());", "modifier": "private static final", "type": "PluginLoader", "declarator": "defaultLoader =\n      new PluginLoader(\n          DataTypes.getDefault(),\n          SourceTypes.getDefault(),\n          Components.getDefault(),\n          Themes.getDefault(),\n          TabInfoRegistry.getDefault(),\n          Converters.getDefault(),\n          PropertyParsers.getDefault())", "var_name": "defaultLoader"}, {"original_string": "private final ObservableSet<Plugin> loadedPlugins = FXCollections.observableSet(new LinkedHashSet<>());", "modifier": "private final", "type": "ObservableSet<Plugin>", "declarator": "loadedPlugins = FXCollections.observableSet(new LinkedHashSet<>())", "var_name": "loadedPlugins"}, {"original_string": "private final Set<Class<? extends Plugin>> knownPluginClasses = new HashSet<>();", "modifier": "private final", "type": "Set<Class<? extends Plugin>>", "declarator": "knownPluginClasses = new HashSet<>()", "var_name": "knownPluginClasses"}, {"original_string": "private final ObservableList<Plugin> knownPlugins = FXCollections.observableArrayList();", "modifier": "private final", "type": "ObservableList<Plugin>", "declarator": "knownPlugins = FXCollections.observableArrayList()", "var_name": "knownPlugins"}, {"original_string": "private final ObservableList<ClassLoader> classLoaders = FXCollections.observableArrayList();", "modifier": "private final", "type": "ObservableList<ClassLoader>", "declarator": "classLoaders = FXCollections.observableArrayList()", "var_name": "classLoaders"}, {"original_string": "private final DataTypes dataTypes;", "modifier": "private final", "type": "DataTypes", "declarator": "dataTypes", "var_name": "dataTypes"}, {"original_string": "private final SourceTypes sourceTypes;", "modifier": "private final", "type": "SourceTypes", "declarator": "sourceTypes", "var_name": "sourceTypes"}, {"original_string": "private final Components components;", "modifier": "private final", "type": "Components", "declarator": "components", "var_name": "components"}, {"original_string": "private final Themes themes;", "modifier": "private final", "type": "Themes", "declarator": "themes", "var_name": "themes"}, {"original_string": "private final TabInfoRegistry tabInfoRegistry;", "modifier": "private final", "type": "TabInfoRegistry", "declarator": "tabInfoRegistry", "var_name": "tabInfoRegistry"}, {"original_string": "private final Converters converters;", "modifier": "private final", "type": "Converters", "declarator": "converters", "var_name": "converters"}, {"original_string": "private final PropertyParsers propertyParsers;", "modifier": "private final", "type": "PropertyParsers", "declarator": "propertyParsers", "var_name": "propertyParsers"}], "methods": [{"identifier": "PluginLoader", "parameters": "(DataTypes dataTypes,\n                      SourceTypes sourceTypes,\n                      Components components,\n                      Themes themes,\n                      TabInfoRegistry tabInfoRegistry,\n                      Converters converters,\n                      PropertyParsers propertyParsers)", "modifiers": "public", "return": "", "signature": " PluginLoader(DataTypes dataTypes,\n                      SourceTypes sourceTypes,\n                      Components components,\n                      Themes themes,\n                      TabInfoRegistry tabInfoRegistry,\n                      Converters converters,\n                      PropertyParsers propertyParsers)", "full_signature": "public  PluginLoader(DataTypes dataTypes,\n                      SourceTypes sourceTypes,\n                      Components components,\n                      Themes themes,\n                      TabInfoRegistry tabInfoRegistry,\n                      Converters converters,\n                      PropertyParsers propertyParsers)", "class_method_signature": "PluginLoader.PluginLoader(DataTypes dataTypes,\n                      SourceTypes sourceTypes,\n                      Components components,\n                      Themes themes,\n                      TabInfoRegistry tabInfoRegistry,\n                      Converters converters,\n                      PropertyParsers propertyParsers)", "testcase": false, "constructor": true}, {"identifier": "getDefault", "parameters": "()", "modifiers": "public static", "return": "PluginLoader", "signature": "PluginLoader getDefault()", "full_signature": "public static PluginLoader getDefault()", "class_method_signature": "PluginLoader.getDefault()", "testcase": false, "constructor": false}, {"identifier": "loadAllJarsFromDir", "parameters": "(Path directory)", "modifiers": "public", "return": "void", "signature": "void loadAllJarsFromDir(Path directory)", "full_signature": "public void loadAllJarsFromDir(Path directory)", "class_method_signature": "PluginLoader.loadAllJarsFromDir(Path directory)", "testcase": false, "constructor": false}, {"identifier": "loadPluginJar", "parameters": "(URI jarUri)", "modifiers": "public", "return": "void", "signature": "void loadPluginJar(URI jarUri)", "full_signature": "public void loadPluginJar(URI jarUri)", "class_method_signature": "PluginLoader.loadPluginJar(URI jarUri)", "testcase": false, "constructor": false}, {"identifier": "comparePluginsByDependencyGraph", "parameters": "(Class<? extends Plugin> p1, Class<? extends Plugin> p2)", "modifiers": "@VisibleForTesting", "return": "int", "signature": "int comparePluginsByDependencyGraph(Class<? extends Plugin> p1, Class<? extends Plugin> p2)", "full_signature": "@VisibleForTesting int comparePluginsByDependencyGraph(Class<? extends Plugin> p1, Class<? extends Plugin> p2)", "class_method_signature": "PluginLoader.comparePluginsByDependencyGraph(Class<? extends Plugin> p1, Class<? extends Plugin> p2)", "testcase": false, "constructor": false}, {"identifier": "loadPluginClass", "parameters": "(Class<? extends Plugin> clazz)", "modifiers": "public", "return": "boolean", "signature": "boolean loadPluginClass(Class<? extends Plugin> clazz)", "full_signature": "public boolean loadPluginClass(Class<? extends Plugin> clazz)", "class_method_signature": "PluginLoader.loadPluginClass(Class<? extends Plugin> clazz)", "testcase": false, "constructor": false}, {"identifier": "unloadOldVersion", "parameters": "(Plugin plugin)", "modifiers": "private", "return": "void", "signature": "void unloadOldVersion(Plugin plugin)", "full_signature": "private void unloadOldVersion(Plugin plugin)", "class_method_signature": "PluginLoader.unloadOldVersion(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(Plugin plugin)", "modifiers": "public", "return": "boolean", "signature": "boolean load(Plugin plugin)", "full_signature": "public boolean load(Plugin plugin)", "class_method_signature": "PluginLoader.load(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "requires", "parameters": "(Class<? extends Plugin> pluginA, Class<? extends Plugin> pluginB)", "modifiers": "private", "return": "boolean", "signature": "boolean requires(Class<? extends Plugin> pluginA, Class<? extends Plugin> pluginB)", "full_signature": "private boolean requires(Class<? extends Plugin> pluginA, Class<? extends Plugin> pluginB)", "class_method_signature": "PluginLoader.requires(Class<? extends Plugin> pluginA, Class<? extends Plugin> pluginB)", "testcase": false, "constructor": false}, {"identifier": "isDirectRequirement", "parameters": "(Class<? extends Plugin> pluginA, Class<? extends Plugin> pluginB)", "modifiers": "private static", "return": "boolean", "signature": "boolean isDirectRequirement(Class<? extends Plugin> pluginA, Class<? extends Plugin> pluginB)", "full_signature": "private static boolean isDirectRequirement(Class<? extends Plugin> pluginA, Class<? extends Plugin> pluginB)", "class_method_signature": "PluginLoader.isDirectRequirement(Class<? extends Plugin> pluginA, Class<? extends Plugin> pluginB)", "testcase": false, "constructor": false}, {"identifier": "canLoad", "parameters": "(Plugin plugin)", "modifiers": "public", "return": "boolean", "signature": "boolean canLoad(Plugin plugin)", "full_signature": "public boolean canLoad(Plugin plugin)", "class_method_signature": "PluginLoader.canLoad(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "tryRestoreSource", "parameters": "(Widget widget, DestroyedSource destroyedSource)", "modifiers": "private", "return": "void", "signature": "void tryRestoreSource(Widget widget, DestroyedSource destroyedSource)", "full_signature": "private void tryRestoreSource(Widget widget, DestroyedSource destroyedSource)", "class_method_signature": "PluginLoader.tryRestoreSource(Widget widget, DestroyedSource destroyedSource)", "testcase": false, "constructor": false}, {"identifier": "unload", "parameters": "(Plugin plugin)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "boolean", "signature": "boolean unload(Plugin plugin)", "full_signature": "@SuppressWarnings(\"unchecked\") public boolean unload(Plugin plugin)", "class_method_signature": "PluginLoader.unload(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "getKnownPlugins", "parameters": "()", "modifiers": "public", "return": "ObservableList<Plugin>", "signature": "ObservableList<Plugin> getKnownPlugins()", "full_signature": "public ObservableList<Plugin> getKnownPlugins()", "class_method_signature": "PluginLoader.getKnownPlugins()", "testcase": false, "constructor": false}, {"identifier": "getLoadedPlugins", "parameters": "()", "modifiers": "public", "return": "ObservableSet<Plugin>", "signature": "ObservableSet<Plugin> getLoadedPlugins()", "full_signature": "public ObservableSet<Plugin> getLoadedPlugins()", "class_method_signature": "PluginLoader.getLoadedPlugins()", "testcase": false, "constructor": false}, {"identifier": "getClassLoaders", "parameters": "()", "modifiers": "public", "return": "ObservableList<ClassLoader>", "signature": "ObservableList<ClassLoader> getClassLoaders()", "full_signature": "public ObservableList<ClassLoader> getClassLoaders()", "class_method_signature": "PluginLoader.getClassLoaders()", "testcase": false, "constructor": false}], "file": "app/src/main/java/edu/wpi/first/shuffleboard/app/plugin/PluginLoader.java"}, "focal_method": {"identifier": "load", "parameters": "(Plugin plugin)", "modifiers": "public", "return": "boolean", "body": "public boolean load(Plugin plugin) {\n    if (loadedPlugins.contains(plugin)) {\n      // Already loaded\n      return false;\n    }\n    final Stopwatch timer = Stopwatch.createStarted(); // NOPMD -- need to time as much as posible\n\n    // Unload an already-loaded version of this plugin, if it exists\n    // This allows us to load\n    unloadOldVersion(plugin);\n    knownPluginClasses.add(plugin.getClass());\n\n    if (!canLoad(plugin)) {\n      log.warning(\"Not all requirements are present for \" + plugin.fullIdString());\n      if (!knownPlugins.contains(plugin)) {\n        knownPlugins.add(plugin);\n      }\n      return false;\n    }\n    log.info(\"Loading plugin \" + plugin.fullIdString());\n    dataTypes.registerAll(plugin.getDataTypes());\n    sourceTypes.registerAll(plugin.getSourceTypes());\n    plugin.getTypeAdapters().forEach(Serializers::add);\n    components.registerAll(plugin.getComponents());\n    plugin.getDefaultComponents().forEach(components::setDefaultComponent);\n    components.getActiveWidgets().stream()\n        .filter(w -> w.getSources().stream().anyMatch(s -> s instanceof DestroyedSource))\n        .filter(w -> {\n          return plugin.getComponents().stream().anyMatch(t -> t.getType().equals(w.getClass()))\n              || w.getSources().stream().anyMatch(s -> plugin.getDataTypes().contains(s.getDataType()))\n              || w.getSources().stream().anyMatch(s -> plugin.getSourceTypes().contains(s.getType()));\n        })\n        .filter(w -> w.getSources().stream().anyMatch(s -> sourceTypes.isRegistered(s.getType())))\n        .forEach(w -> {\n          w.getSources().stream()\n              .filter(s -> s instanceof DestroyedSource)\n              .forEach(s -> tryRestoreSource(w, (DestroyedSource) s));\n        });\n    plugin.getThemes().forEach(themes::register);\n    tabInfoRegistry.registerAll(plugin.getDefaultTabInfo());\n    converters.registerAll(plugin.getRecordingConverters());\n    propertyParsers.registerAll(plugin.getPropertyParsers());\n\n    plugin.onLoad();\n    plugin.setLoaded(true);\n\n    loadedPlugins.add(plugin);\n    if (!knownPlugins.contains(plugin)) {\n      knownPlugins.add(plugin);\n    }\n    log.info(\"Loaded plugin \" + plugin.idString() + \" in \" + timer.elapsed(TimeUnit.MILLISECONDS) + \"ms\");\n    return true;\n  }", "signature": "boolean load(Plugin plugin)", "full_signature": "public boolean load(Plugin plugin)", "class_method_signature": "PluginLoader.load(Plugin plugin)", "testcase": false, "constructor": false, "invocations": ["contains", "createStarted", "unloadOldVersion", "add", "getClass", "canLoad", "warning", "fullIdString", "contains", "add", "info", "fullIdString", "registerAll", "getDataTypes", "registerAll", "getSourceTypes", "forEach", "getTypeAdapters", "registerAll", "getComponents", "forEach", "getDefaultComponents", "forEach", "filter", "filter", "filter", "stream", "getActiveWidgets", "anyMatch", "stream", "getSources", "anyMatch", "stream", "getComponents", "equals", "getType", "getClass", "anyMatch", "stream", "getSources", "contains", "getDataTypes", "getDataType", "anyMatch", "stream", "getSources", "contains", "getSourceTypes", "getType", "anyMatch", "stream", "getSources", "isRegistered", "getType", "forEach", "filter", "stream", "getSources", "tryRestoreSource", "forEach", "getThemes", "registerAll", "getDefaultTabInfo", "registerAll", "getRecordingConverters", "registerAll", "getPropertyParsers", "onLoad", "setLoaded", "add", "contains", "add", "info", "idString", "elapsed"]}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}