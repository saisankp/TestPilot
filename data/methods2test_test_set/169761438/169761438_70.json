{"test_class": {"identifier": "OadrPKISecurityTest", "superclass": "", "interfaces": "", "fields": [], "file": "OpenADRSecurity/src/test/java/com/avob/openadr/security/OadrPKISecurityTest.java"}, "test_case": {"identifier": "generateCredentialsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void generateCredentialsTest()\n\t\t\tthrows NoSuchAlgorithmException, IOException, CertificateException, NoSuchProviderException,\n\t\t\tOadrSecurityException, InvalidKeyException, SignatureException, OperatorCreationException {\n\t\tKeyPair ca = OadrPKISecurity.generateRsaKeyPair();\n\t\tSubjectPublicKeyInfo subPubKeyInfo = SubjectPublicKeyInfo.getInstance(ca.getPublic().getEncoded());\n\t\tAlgorithmIdentifier sigAlgId = new DefaultSignatureAlgorithmIdentifierFinder().find(\"SHA256withRSA\");\n\t\tAlgorithmIdentifier digAlgId = new DefaultDigestAlgorithmIdentifierFinder().find(sigAlgId);\n\t\tSecurity.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n\t\tBigInteger sn = new BigInteger(64, new SecureRandom());\n\t\tX509v3CertificateBuilder certificateGenerator = new X509v3CertificateBuilder(\n\t\t\t\t// These are the details of the CA\n\t\t\t\tnew X500Name(\"cn=TestCa\"),\n\t\t\t\t// This should be a serial number that the CA keeps track of\n\t\t\t\tsn,\n\t\t\t\t// Certificate validity start\n\t\t\t\tDate.from(LocalDateTime.now().minusDays(1).toInstant(ZoneOffset.UTC)),\n\t\t\t\t// Certificate validity end\n\t\t\t\tDate.from(LocalDateTime.now().plusDays(365).toInstant(ZoneOffset.UTC)),\n\t\t\t\t// Blanket grant the subject as requested in the CSR\n\t\t\t\t// A real CA would want to vet this.\n\t\t\t\tnew X500Name(\"cn=TestSubject\"),\n\t\t\t\t// Public key of the certificate authority\n\t\t\t\tsubPubKeyInfo);\n\n\t\tContentSigner sigGen = new BcRSAContentSignerBuilder(sigAlgId, digAlgId)\n\t\t\t\t.build(PrivateKeyFactory.createKey(ca.getPrivate().getEncoded()));\n\n\t\tX509CertificateHolder holder = certificateGenerator.build(sigGen);\n\t\tCertificateFactory certificateFactory = CertificateFactory.getInstance(\"X.509\", \"BC\");\n\t\tX509Certificate caCert = (X509Certificate) certificateFactory\n\t\t\t\t.generateCertificate(new ByteArrayInputStream(holder.toASN1Structure().getEncoded()));\n\n\t\tString commonName = \"test.oadr.com\";\n\n\t\t// TEST RSA\n\t\tOadrUserX509Credential generateCredentials = OadrPKISecurity.generateCredentials(ca, caCert, commonName,\n\t\t\t\tOadrPKIAlgorithm.SHA256_RSA);\n\t\ttestGeneratedCredential(generateCredentials, \"SHA256withRSA\");\n\n\t\t// TEST DSA\n\t\tgenerateCredentials = OadrPKISecurity.generateCredentials(ca, caCert, commonName, OadrPKIAlgorithm.SHA256_DSA);\n\t\ttestGeneratedCredential(generateCredentials, \"SHA256withDSA\");\n\n\t}", "signature": "void generateCredentialsTest()", "full_signature": "@Test public void generateCredentialsTest()", "class_method_signature": "OadrPKISecurityTest.generateCredentialsTest()", "testcase": true, "constructor": false, "invocations": ["generateRsaKeyPair", "getInstance", "getEncoded", "getPublic", "find", "find", "addProvider", "from", "toInstant", "minusDays", "now", "from", "toInstant", "plusDays", "now", "build", "createKey", "getEncoded", "getPrivate", "build", "getInstance", "generateCertificate", "getEncoded", "toASN1Structure", "generateCredentials", "testGeneratedCredential", "generateCredentials", "testGeneratedCredential"]}, "focal_class": {"identifier": "OadrPKISecurity", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "OadrPKISecurity", "parameters": "()", "modifiers": "private", "return": "", "signature": " OadrPKISecurity()", "full_signature": "private  OadrPKISecurity()", "class_method_signature": "OadrPKISecurity.OadrPKISecurity()", "testcase": false, "constructor": true}, {"identifier": "parsePrivateKey", "parameters": "(String privateKeyFilePath)", "modifiers": "public static", "return": "PrivateKey", "signature": "PrivateKey parsePrivateKey(String privateKeyFilePath)", "full_signature": "public static PrivateKey parsePrivateKey(String privateKeyFilePath)", "class_method_signature": "OadrPKISecurity.parsePrivateKey(String privateKeyFilePath)", "testcase": false, "constructor": false}, {"identifier": "parsePrivateKey", "parameters": "(FileReader fileReader)", "modifiers": "public static", "return": "PrivateKey", "signature": "PrivateKey parsePrivateKey(FileReader fileReader)", "full_signature": "public static PrivateKey parsePrivateKey(FileReader fileReader)", "class_method_signature": "OadrPKISecurity.parsePrivateKey(FileReader fileReader)", "testcase": false, "constructor": false}, {"identifier": "parseCertificate", "parameters": "(String certificateFilePath)", "modifiers": "public static", "return": "X509Certificate", "signature": "X509Certificate parseCertificate(String certificateFilePath)", "full_signature": "public static X509Certificate parseCertificate(String certificateFilePath)", "class_method_signature": "OadrPKISecurity.parseCertificate(String certificateFilePath)", "testcase": false, "constructor": false}, {"identifier": "parseCertificate", "parameters": "(FileReader fileReader)", "modifiers": "public static", "return": "X509Certificate", "signature": "X509Certificate parseCertificate(FileReader fileReader)", "full_signature": "public static X509Certificate parseCertificate(FileReader fileReader)", "class_method_signature": "OadrPKISecurity.parseCertificate(FileReader fileReader)", "testcase": false, "constructor": false}, {"identifier": "createKeyStore", "parameters": "(String privateKeyFilePath, String clientCertificatefilePath, String password)", "modifiers": "public static", "return": "KeyStore", "signature": "KeyStore createKeyStore(String privateKeyFilePath, String clientCertificatefilePath, String password)", "full_signature": "public static KeyStore createKeyStore(String privateKeyFilePath, String clientCertificatefilePath, String password)", "class_method_signature": "OadrPKISecurity.createKeyStore(String privateKeyFilePath, String clientCertificatefilePath, String password)", "testcase": false, "constructor": false}, {"identifier": "createKeyManagerFactory", "parameters": "(String clientPrivateKeyPemFilePath,\n\t\t\tString clientCertificatePemFilePath, String password)", "modifiers": "public static", "return": "KeyManagerFactory", "signature": "KeyManagerFactory createKeyManagerFactory(String clientPrivateKeyPemFilePath,\n\t\t\tString clientCertificatePemFilePath, String password)", "full_signature": "public static KeyManagerFactory createKeyManagerFactory(String clientPrivateKeyPemFilePath,\n\t\t\tString clientCertificatePemFilePath, String password)", "class_method_signature": "OadrPKISecurity.createKeyManagerFactory(String clientPrivateKeyPemFilePath,\n\t\t\tString clientCertificatePemFilePath, String password)", "testcase": false, "constructor": false}, {"identifier": "createTrustStore", "parameters": "(List<String> certificates)", "modifiers": "public static", "return": "KeyStore", "signature": "KeyStore createTrustStore(List<String> certificates)", "full_signature": "public static KeyStore createTrustStore(List<String> certificates)", "class_method_signature": "OadrPKISecurity.createTrustStore(List<String> certificates)", "testcase": false, "constructor": false}, {"identifier": "createTrustManagerFactory", "parameters": "(List<String> trustedCertificateFilePath)", "modifiers": "public static", "return": "TrustManagerFactory", "signature": "TrustManagerFactory createTrustManagerFactory(List<String> trustedCertificateFilePath)", "full_signature": "public static TrustManagerFactory createTrustManagerFactory(List<String> trustedCertificateFilePath)", "class_method_signature": "OadrPKISecurity.createTrustManagerFactory(List<String> trustedCertificateFilePath)", "testcase": false, "constructor": false}, {"identifier": "createSSLContext", "parameters": "(String clientPrivateKeyPemFilePath, String clientCertificatePemFilePath,\n\t\t\tList<String> trustCertificates, String password)", "modifiers": "public static", "return": "SSLContext", "signature": "SSLContext createSSLContext(String clientPrivateKeyPemFilePath, String clientCertificatePemFilePath,\n\t\t\tList<String> trustCertificates, String password)", "full_signature": "public static SSLContext createSSLContext(String clientPrivateKeyPemFilePath, String clientCertificatePemFilePath,\n\t\t\tList<String> trustCertificates, String password)", "class_method_signature": "OadrPKISecurity.createSSLContext(String clientPrivateKeyPemFilePath, String clientCertificatePemFilePath,\n\t\t\tList<String> trustCertificates, String password)", "testcase": false, "constructor": false}, {"identifier": "md5Hex", "parameters": "(String data)", "modifiers": "public static", "return": "String", "signature": "String md5Hex(String data)", "full_signature": "public static String md5Hex(String data)", "class_method_signature": "OadrPKISecurity.md5Hex(String data)", "testcase": false, "constructor": false}, {"identifier": "generateRsaKeyPair", "parameters": "()", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair generateRsaKeyPair()", "full_signature": "public static KeyPair generateRsaKeyPair()", "class_method_signature": "OadrPKISecurity.generateRsaKeyPair()", "testcase": false, "constructor": false}, {"identifier": "generateEccKeyPair", "parameters": "()", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair generateEccKeyPair()", "full_signature": "public static KeyPair generateEccKeyPair()", "class_method_signature": "OadrPKISecurity.generateEccKeyPair()", "testcase": false, "constructor": false}, {"identifier": "generateCredentials", "parameters": "(KeyPair caKeyPair, X509Certificate caCert,\n\t\t\tString commonName, OadrPKIAlgorithm algo)", "modifiers": "public static", "return": "OadrUserX509Credential", "signature": "OadrUserX509Credential generateCredentials(KeyPair caKeyPair, X509Certificate caCert,\n\t\t\tString commonName, OadrPKIAlgorithm algo)", "full_signature": "public static OadrUserX509Credential generateCredentials(KeyPair caKeyPair, X509Certificate caCert,\n\t\t\tString commonName, OadrPKIAlgorithm algo)", "class_method_signature": "OadrPKISecurity.generateCredentials(KeyPair caKeyPair, X509Certificate caCert,\n\t\t\tString commonName, OadrPKIAlgorithm algo)", "testcase": false, "constructor": false}, {"identifier": "generateKeyPair", "parameters": "(String algo, int length)", "modifiers": "private static", "return": "KeyPair", "signature": "KeyPair generateKeyPair(String algo, int length)", "full_signature": "private static KeyPair generateKeyPair(String algo, int length)", "class_method_signature": "OadrPKISecurity.generateKeyPair(String algo, int length)", "testcase": false, "constructor": false}, {"identifier": "signCsr", "parameters": "(PKCS10CertificationRequest csr, KeyPair caKeyPair, X509Certificate caCert,\n\t\t\tBigInteger serialNumber)", "modifiers": "private static", "return": "X509Certificate", "signature": "X509Certificate signCsr(PKCS10CertificationRequest csr, KeyPair caKeyPair, X509Certificate caCert,\n\t\t\tBigInteger serialNumber)", "full_signature": "private static X509Certificate signCsr(PKCS10CertificationRequest csr, KeyPair caKeyPair, X509Certificate caCert,\n\t\t\tBigInteger serialNumber)", "class_method_signature": "OadrPKISecurity.signCsr(PKCS10CertificationRequest csr, KeyPair caKeyPair, X509Certificate caCert,\n\t\t\tBigInteger serialNumber)", "testcase": false, "constructor": false}, {"identifier": "writeCrtToString", "parameters": "(X509Certificate certificate)", "modifiers": "private static", "return": "String", "signature": "String writeCrtToString(X509Certificate certificate)", "full_signature": "private static String writeCrtToString(X509Certificate certificate)", "class_method_signature": "OadrPKISecurity.writeCrtToString(X509Certificate certificate)", "testcase": false, "constructor": false}, {"identifier": "writeKeyToString", "parameters": "(KeyPair pair)", "modifiers": "private static", "return": "String", "signature": "String writeKeyToString(KeyPair pair)", "full_signature": "private static String writeKeyToString(KeyPair pair)", "class_method_signature": "OadrPKISecurity.writeKeyToString(KeyPair pair)", "testcase": false, "constructor": false}, {"identifier": "writePemToString", "parameters": "(String type, byte[] content)", "modifiers": "private static", "return": "String", "signature": "String writePemToString(String type, byte[] content)", "full_signature": "private static String writePemToString(String type, byte[] content)", "class_method_signature": "OadrPKISecurity.writePemToString(String type, byte[] content)", "testcase": false, "constructor": false}, {"identifier": "writeToFile", "parameters": "(String fileName, String fileExtension, String content)", "modifiers": "private static", "return": "File", "signature": "File writeToFile(String fileName, String fileExtension, String content)", "full_signature": "private static File writeToFile(String fileName, String fileExtension, String content)", "class_method_signature": "OadrPKISecurity.writeToFile(String fileName, String fileExtension, String content)", "testcase": false, "constructor": false}, {"identifier": "generateCsr", "parameters": "(KeyPair pair, String x509PrincipalName, String algo)", "modifiers": "private static", "return": "PKCS10CertificationRequest", "signature": "PKCS10CertificationRequest generateCsr(KeyPair pair, String x509PrincipalName, String algo)", "full_signature": "private static PKCS10CertificationRequest generateCsr(KeyPair pair, String x509PrincipalName, String algo)", "class_method_signature": "OadrPKISecurity.generateCsr(KeyPair pair, String x509PrincipalName, String algo)", "testcase": false, "constructor": false}, {"identifier": "parsePem", "parameters": "(FileReader fileReader)", "modifiers": "private static", "return": "Object", "signature": "Object parsePem(FileReader fileReader)", "full_signature": "private static Object parsePem(FileReader fileReader)", "class_method_signature": "OadrPKISecurity.parsePem(FileReader fileReader)", "testcase": false, "constructor": false}], "file": "OpenADRSecurity/src/main/java/com/avob/openadr/security/OadrPKISecurity.java"}, "focal_method": {"identifier": "generateCredentials", "parameters": "(KeyPair caKeyPair, X509Certificate caCert,\n\t\t\tString commonName, OadrPKIAlgorithm algo)", "modifiers": "public static", "return": "OadrUserX509Credential", "body": "public static OadrUserX509Credential generateCredentials(KeyPair caKeyPair, X509Certificate caCert,\n\t\t\tString commonName, OadrPKIAlgorithm algo) throws OadrSecurityException {\n\t\ttry {\n\t\t\tlong now = System.currentTimeMillis();\n\t\t\tString venCN = commonName;\n\t\t\tBigInteger serialNumber = BigInteger.valueOf(now);\n\n\t\t\tKeyPair venCred = null;\n\t\t\tString csrAlgo = \"\";\n\n\t\t\tif (OadrPKIAlgorithm.SHA256_DSA.equals(algo)) {\n\t\t\t\tvenCred = OadrPKISecurity.generateEccKeyPair();\n\t\t\t\tcsrAlgo = \"SHA256withDSA\";\n\t\t\t} else if (OadrPKIAlgorithm.SHA256_RSA.equals(algo)) {\n\t\t\t\tvenCred = OadrPKISecurity.generateRsaKeyPair();\n\t\t\t\tcsrAlgo = \"SHA256withRSA\";\n\t\t\t}\n\n\t\t\tString x509PrincipalName = \"C=FR, ST=Paris, L=Paris, O=Avob, OU=Avob, CN=\" + venCN;\n\t\t\tPKCS10CertificationRequest csr = OadrPKISecurity.generateCsr(venCred, x509PrincipalName, csrAlgo);\n\t\t\tX509Certificate crt = OadrPKISecurity.signCsr(csr, caKeyPair, caCert, serialNumber);\n\n\t\t\tString fingerprint = OadrFingerprintSecurity.getOadr20bFingerprint(crt);\n\n\t\t\tFile crtFile = writeToFile(venCN, \"crt\", OadrPKISecurity.writeCrtToString(crt));\n\t\t\tFile caCrtFile = writeToFile(\"ca\", \"crt\", OadrPKISecurity.writeCrtToString(caCert));\n\t\t\tFile keyFile = writeToFile(venCN, \"key\", OadrPKISecurity.writeKeyToString(venCred));\n\t\t\tFile fingerprintFile = writeToFile(venCN, \"fingerprint\", fingerprint);\n\n\t\t\treturn new OadrUserX509Credential(fingerprint, caCrtFile, crtFile, keyFile, fingerprintFile);\n\t\t} catch (NoSuchAlgorithmException | OperatorCreationException | CertificateException | NoSuchProviderException\n\t\t\t\t| IOException e) {\n\t\t\tthrow new OadrSecurityException(e);\n\t\t}\n\n\t}", "signature": "OadrUserX509Credential generateCredentials(KeyPair caKeyPair, X509Certificate caCert,\n\t\t\tString commonName, OadrPKIAlgorithm algo)", "full_signature": "public static OadrUserX509Credential generateCredentials(KeyPair caKeyPair, X509Certificate caCert,\n\t\t\tString commonName, OadrPKIAlgorithm algo)", "class_method_signature": "OadrPKISecurity.generateCredentials(KeyPair caKeyPair, X509Certificate caCert,\n\t\t\tString commonName, OadrPKIAlgorithm algo)", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "valueOf", "equals", "generateEccKeyPair", "equals", "generateRsaKeyPair", "generateCsr", "signCsr", "getOadr20bFingerprint", "writeToFile", "writeCrtToString", "writeToFile", "writeCrtToString", "writeToFile", "writeKeyToString", "writeToFile"]}, "repository": {"repo_id": 169761438, "url": "https://github.com/avob/OpenADR", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 55915, "license": "licensed"}}