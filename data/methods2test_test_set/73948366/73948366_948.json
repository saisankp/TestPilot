{"test_class": {"identifier": "CloudStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String AWS_INSTANCE_DOCUMENT = \"{\\n\"\n            + \"  \\\"devpayProductCodes\\\" : null,\\n\"\n            + \"  \\\"availabilityZone\\\" : \\\"us-west-2a\\\",\\n\"\n            + \"  \\\"privateIp\\\" : \\\"10.10.10.10\\\",\\n\"\n            + \"  \\\"version\\\" : \\\"2010-08-31\\\",\\n\"\n            + \"  \\\"instanceId\\\" : \\\"i-056921225f1fbb47a\\\",\\n\"\n            + \"  \\\"billingProducts\\\" : null,\\n\"\n            + \"  \\\"instanceType\\\" : \\\"t2.micro\\\",\\n\"\n            + \"  \\\"accountId\\\" : \\\"111111111111\\\",\\n\"\n            + \"  \\\"pendingTime\\\" : \\\"2016-04-26T05:37:23Z\\\",\\n\"\n            + \"  \\\"imageId\\\" : \\\"ami-c229c0a2\\\",\\n\"\n            + \"  \\\"architecture\\\" : \\\"x86_64\\\",\\n\"\n            + \"  \\\"kernelId\\\" : null,\\n\"\n            + \"  \\\"ramdiskId\\\" : null,\\n\"\n            + \"  \\\"region\\\" : \\\"us-west-2\\\"\\n\"\n            + \"}\";", "modifier": "private final static", "type": "String", "declarator": "AWS_INSTANCE_DOCUMENT = \"{\\n\"\n            + \"  \\\"devpayProductCodes\\\" : null,\\n\"\n            + \"  \\\"availabilityZone\\\" : \\\"us-west-2a\\\",\\n\"\n            + \"  \\\"privateIp\\\" : \\\"10.10.10.10\\\",\\n\"\n            + \"  \\\"version\\\" : \\\"2010-08-31\\\",\\n\"\n            + \"  \\\"instanceId\\\" : \\\"i-056921225f1fbb47a\\\",\\n\"\n            + \"  \\\"billingProducts\\\" : null,\\n\"\n            + \"  \\\"instanceType\\\" : \\\"t2.micro\\\",\\n\"\n            + \"  \\\"accountId\\\" : \\\"111111111111\\\",\\n\"\n            + \"  \\\"pendingTime\\\" : \\\"2016-04-26T05:37:23Z\\\",\\n\"\n            + \"  \\\"imageId\\\" : \\\"ami-c229c0a2\\\",\\n\"\n            + \"  \\\"architecture\\\" : \\\"x86_64\\\",\\n\"\n            + \"  \\\"kernelId\\\" : null,\\n\"\n            + \"  \\\"ramdiskId\\\" : null,\\n\"\n            + \"  \\\"region\\\" : \\\"us-west-2\\\"\\n\"\n            + \"}\"", "var_name": "AWS_INSTANCE_DOCUMENT"}, {"original_string": "private final static String AWS_IAM_ROLE_INFO = \"{\\n\"\n            + \"\\\"Code\\\" : \\\"Success\\\",\\n\"\n            + \"\\\"LastUpdated\\\" : \\\"2016-04-26T05:37:04Z\\\",\\n\"\n            + \"\\\"InstanceProfileArn\\\" : \\\"arn:aws:iam::111111111111:instance-profile/athenz.zts,athenz\\\",\\n\"\n            + \"\\\"InstanceProfileId\\\" : \\\"AIPAJAVNLUGEWFWTIDPRA\\\"\\n\"\n            + \"}\";", "modifier": "private final static", "type": "String", "declarator": "AWS_IAM_ROLE_INFO = \"{\\n\"\n            + \"\\\"Code\\\" : \\\"Success\\\",\\n\"\n            + \"\\\"LastUpdated\\\" : \\\"2016-04-26T05:37:04Z\\\",\\n\"\n            + \"\\\"InstanceProfileArn\\\" : \\\"arn:aws:iam::111111111111:instance-profile/athenz.zts,athenz\\\",\\n\"\n            + \"\\\"InstanceProfileId\\\" : \\\"AIPAJAVNLUGEWFWTIDPRA\\\"\\n\"\n            + \"}\"", "var_name": "AWS_IAM_ROLE_INFO"}], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/store/CloudStoreTest.java"}, "test_case": {"identifier": "testGetS3Client", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetS3Client() {\n\n        System.setProperty(ZTS_PROP_AWS_PUBLIC_CERT, \"src/test/resources/aws_public.crt\");\n        CloudStore store = new CloudStore();\n        store.credentials = new BasicSessionCredentials(\"accessKey\", \"secretKey\", \"token\");\n        store.awsEnabled = true;\n        store.awsRegion = \"us-west-2\";\n        assertNotNull(store.getS3Client());\n\n        assertNotNull(store.getS3Client());\n        store.close();\n    }", "signature": "void testGetS3Client()", "full_signature": "@Test public void testGetS3Client()", "class_method_signature": "CloudStoreTest.testGetS3Client()", "testcase": true, "constructor": false, "invocations": ["setProperty", "assertNotNull", "getS3Client", "assertNotNull", "getS3Client", "close"]}, "focal_class": {"identifier": "CloudStore", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CloudStore.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CloudStore.class)", "var_name": "LOGGER"}, {"original_string": "private static final String AWS_ROLE_SESSION_NAME = \"athenz-zts-service\";", "modifier": "private static final", "type": "String", "declarator": "AWS_ROLE_SESSION_NAME = \"athenz-zts-service\"", "var_name": "AWS_ROLE_SESSION_NAME"}, {"original_string": "String awsRole = null;", "modifier": "", "type": "String", "declarator": "awsRole = null", "var_name": "awsRole"}, {"original_string": "String awsRegion;", "modifier": "", "type": "String", "declarator": "awsRegion", "var_name": "awsRegion"}, {"original_string": "boolean awsEnabled;", "modifier": "", "type": "boolean", "declarator": "awsEnabled", "var_name": "awsEnabled"}, {"original_string": "int cacheTimeout;", "modifier": "", "type": "int", "declarator": "cacheTimeout", "var_name": "cacheTimeout"}, {"original_string": "int invalidCacheTimeout;", "modifier": "", "type": "int", "declarator": "invalidCacheTimeout", "var_name": "invalidCacheTimeout"}, {"original_string": "BasicSessionCredentials credentials;", "modifier": "", "type": "BasicSessionCredentials", "declarator": "credentials", "var_name": "credentials"}, {"original_string": "private Map<String, String> cloudAccountCache;", "modifier": "private", "type": "Map<String, String>", "declarator": "cloudAccountCache", "var_name": "cloudAccountCache"}, {"original_string": "ConcurrentHashMap<String, AWSTemporaryCredentials> awsCredsCache;", "modifier": "", "type": "ConcurrentHashMap<String, AWSTemporaryCredentials>", "declarator": "awsCredsCache", "var_name": "awsCredsCache"}, {"original_string": "ConcurrentHashMap<String, Long> awsInvalidCredsCache;", "modifier": "", "type": "ConcurrentHashMap<String, Long>", "declarator": "awsInvalidCredsCache", "var_name": "awsInvalidCredsCache"}, {"original_string": "private HttpClient httpClient;", "modifier": "private", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "private ScheduledExecutorService scheduledThreadPool = null;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "scheduledThreadPool = null", "var_name": "scheduledThreadPool"}], "methods": [{"identifier": "CloudStore", "parameters": "()", "modifiers": "public", "return": "", "signature": " CloudStore()", "full_signature": "public  CloudStore()", "class_method_signature": "CloudStore.CloudStore()", "testcase": false, "constructor": true}, {"identifier": "setupHttpClient", "parameters": "(HttpClient client)", "modifiers": "", "return": "void", "signature": "void setupHttpClient(HttpClient client)", "full_signature": " void setupHttpClient(HttpClient client)", "class_method_signature": "CloudStore.setupHttpClient(HttpClient client)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "CloudStore.close()", "testcase": false, "constructor": false}, {"identifier": "setHttpClient", "parameters": "(HttpClient client)", "modifiers": "public", "return": "void", "signature": "void setHttpClient(HttpClient client)", "full_signature": "public void setHttpClient(HttpClient client)", "class_method_signature": "CloudStore.setHttpClient(HttpClient client)", "testcase": false, "constructor": false}, {"identifier": "stopHttpClient", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void stopHttpClient()", "full_signature": "private void stopHttpClient()", "class_method_signature": "CloudStore.stopHttpClient()", "testcase": false, "constructor": false}, {"identifier": "isAwsEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAwsEnabled()", "full_signature": "public boolean isAwsEnabled()", "class_method_signature": "CloudStore.isAwsEnabled()", "testcase": false, "constructor": false}, {"identifier": "initializeAwsSupport", "parameters": "()", "modifiers": "", "return": "void", "signature": "void initializeAwsSupport()", "full_signature": " void initializeAwsSupport()", "class_method_signature": "CloudStore.initializeAwsSupport()", "testcase": false, "constructor": false}, {"identifier": "getS3Client", "parameters": "()", "modifiers": "public", "return": "AmazonS3", "signature": "AmazonS3 getS3Client()", "full_signature": "public AmazonS3 getS3Client()", "class_method_signature": "CloudStore.getS3Client()", "testcase": false, "constructor": false}, {"identifier": "loadBootMetaData", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean loadBootMetaData()", "full_signature": " boolean loadBootMetaData()", "class_method_signature": "CloudStore.loadBootMetaData()", "testcase": false, "constructor": false}, {"identifier": "parseInstanceInfo", "parameters": "(String document)", "modifiers": "", "return": "boolean", "signature": "boolean parseInstanceInfo(String document)", "full_signature": " boolean parseInstanceInfo(String document)", "class_method_signature": "CloudStore.parseInstanceInfo(String document)", "testcase": false, "constructor": false}, {"identifier": "parseIamRoleInfo", "parameters": "(String iamRole)", "modifiers": "", "return": "boolean", "signature": "boolean parseIamRoleInfo(String iamRole)", "full_signature": " boolean parseIamRoleInfo(String iamRole)", "class_method_signature": "CloudStore.parseIamRoleInfo(String iamRole)", "testcase": false, "constructor": false}, {"identifier": "parseInstanceProfileArn", "parameters": "(String profileArn)", "modifiers": "", "return": "boolean", "signature": "boolean parseInstanceProfileArn(String profileArn)", "full_signature": " boolean parseInstanceProfileArn(String profileArn)", "class_method_signature": "CloudStore.parseInstanceProfileArn(String profileArn)", "testcase": false, "constructor": false}, {"identifier": "fetchRoleCredentials", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean fetchRoleCredentials()", "full_signature": " boolean fetchRoleCredentials()", "class_method_signature": "CloudStore.fetchRoleCredentials()", "testcase": false, "constructor": false}, {"identifier": "getMetaData", "parameters": "(String path)", "modifiers": "", "return": "String", "signature": "String getMetaData(String path)", "full_signature": " String getMetaData(String path)", "class_method_signature": "CloudStore.getMetaData(String path)", "testcase": false, "constructor": false}, {"identifier": "getAssumeRoleRequest", "parameters": "(String account, String roleName, String principal,\n                                           Integer durationSeconds, String externalId)", "modifiers": "", "return": "AssumeRoleRequest", "signature": "AssumeRoleRequest getAssumeRoleRequest(String account, String roleName, String principal,\n                                           Integer durationSeconds, String externalId)", "full_signature": " AssumeRoleRequest getAssumeRoleRequest(String account, String roleName, String principal,\n                                           Integer durationSeconds, String externalId)", "class_method_signature": "CloudStore.getAssumeRoleRequest(String account, String roleName, String principal,\n                                           Integer durationSeconds, String externalId)", "testcase": false, "constructor": false}, {"identifier": "getTokenServiceClient", "parameters": "()", "modifiers": "", "return": "AWSSecurityTokenService", "signature": "AWSSecurityTokenService getTokenServiceClient()", "full_signature": " AWSSecurityTokenService getTokenServiceClient()", "class_method_signature": "CloudStore.getTokenServiceClient()", "testcase": false, "constructor": false}, {"identifier": "getCacheKey", "parameters": "(final String account, final String roleName, final String principal,\n                       Integer durationSeconds, final String externalId)", "modifiers": "", "return": "String", "signature": "String getCacheKey(final String account, final String roleName, final String principal,\n                       Integer durationSeconds, final String externalId)", "full_signature": " String getCacheKey(final String account, final String roleName, final String principal,\n                       Integer durationSeconds, final String externalId)", "class_method_signature": "CloudStore.getCacheKey(final String account, final String roleName, final String principal,\n                       Integer durationSeconds, final String externalId)", "testcase": false, "constructor": false}, {"identifier": "removeExpiredCredentials", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean removeExpiredCredentials()", "full_signature": " boolean removeExpiredCredentials()", "class_method_signature": "CloudStore.removeExpiredCredentials()", "testcase": false, "constructor": false}, {"identifier": "removeExpiredInvalidCredentials", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean removeExpiredInvalidCredentials()", "full_signature": " boolean removeExpiredInvalidCredentials()", "class_method_signature": "CloudStore.removeExpiredInvalidCredentials()", "testcase": false, "constructor": false}, {"identifier": "isFailedTempCredsRequest", "parameters": "(final String cacheKey)", "modifiers": "", "return": "boolean", "signature": "boolean isFailedTempCredsRequest(final String cacheKey)", "full_signature": " boolean isFailedTempCredsRequest(final String cacheKey)", "class_method_signature": "CloudStore.isFailedTempCredsRequest(final String cacheKey)", "testcase": false, "constructor": false}, {"identifier": "putInvalidCacheCreds", "parameters": "(final String key)", "modifiers": "", "return": "void", "signature": "void putInvalidCacheCreds(final String key)", "full_signature": " void putInvalidCacheCreds(final String key)", "class_method_signature": "CloudStore.putInvalidCacheCreds(final String key)", "testcase": false, "constructor": false}, {"identifier": "getCachedCreds", "parameters": "(final String cacheKey, Integer durationSeconds)", "modifiers": "", "return": "AWSTemporaryCredentials", "signature": "AWSTemporaryCredentials getCachedCreds(final String cacheKey, Integer durationSeconds)", "full_signature": " AWSTemporaryCredentials getCachedCreds(final String cacheKey, Integer durationSeconds)", "class_method_signature": "CloudStore.getCachedCreds(final String cacheKey, Integer durationSeconds)", "testcase": false, "constructor": false}, {"identifier": "putCacheCreds", "parameters": "(final String key, AWSTemporaryCredentials tempCreds)", "modifiers": "", "return": "void", "signature": "void putCacheCreds(final String key, AWSTemporaryCredentials tempCreds)", "full_signature": " void putCacheCreds(final String key, AWSTemporaryCredentials tempCreds)", "class_method_signature": "CloudStore.putCacheCreds(final String key, AWSTemporaryCredentials tempCreds)", "testcase": false, "constructor": false}, {"identifier": "assumeAWSRole", "parameters": "(String account, String roleName, String principal,\n                                                 Integer durationSeconds, String externalId)", "modifiers": "public", "return": "AWSTemporaryCredentials", "signature": "AWSTemporaryCredentials assumeAWSRole(String account, String roleName, String principal,\n                                                 Integer durationSeconds, String externalId)", "full_signature": "public AWSTemporaryCredentials assumeAWSRole(String account, String roleName, String principal,\n                                                 Integer durationSeconds, String externalId)", "class_method_signature": "CloudStore.assumeAWSRole(String account, String roleName, String principal,\n                                                 Integer durationSeconds, String externalId)", "testcase": false, "constructor": false}, {"identifier": "getCloudAccount", "parameters": "(String domainName)", "modifiers": "public", "return": "String", "signature": "String getCloudAccount(String domainName)", "full_signature": "public String getCloudAccount(String domainName)", "class_method_signature": "CloudStore.getCloudAccount(String domainName)", "testcase": false, "constructor": false}, {"identifier": "updateAccount", "parameters": "(String domainName, String account)", "modifiers": "", "return": "void", "signature": "void updateAccount(String domainName, String account)", "full_signature": " void updateAccount(String domainName, String account)", "class_method_signature": "CloudStore.updateAccount(String domainName, String account)", "testcase": false, "constructor": false}, {"identifier": "getSshKeyReqType", "parameters": "(String sshKeyReq)", "modifiers": "", "return": "String", "signature": "String getSshKeyReqType(String sshKeyReq)", "full_signature": " String getSshKeyReqType(String sshKeyReq)", "class_method_signature": "CloudStore.getSshKeyReqType(String sshKeyReq)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/store/CloudStore.java"}, "focal_method": {"identifier": "getS3Client", "parameters": "()", "modifiers": "public", "return": "AmazonS3", "body": "public AmazonS3 getS3Client() {\n\n        if (!awsEnabled) {\n            throw new ResourceException(ResourceException.INTERNAL_SERVER_ERROR,\n                    \"AWS Support not enabled\");\n        }\n\n        if (credentials == null) {\n            throw new ResourceException(ResourceException.INTERNAL_SERVER_ERROR,\n                    \"AWS Role credentials are not available\");\n        }\n\n        return AmazonS3ClientBuilder.standard()\n                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .withRegion(Regions.fromName(awsRegion))\n                .build();\n    }", "signature": "AmazonS3 getS3Client()", "full_signature": "public AmazonS3 getS3Client()", "class_method_signature": "CloudStore.getS3Client()", "testcase": false, "constructor": false, "invocations": ["build", "withRegion", "withCredentials", "standard", "fromName"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}