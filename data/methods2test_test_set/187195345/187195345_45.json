{"test_class": {"identifier": "LineDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "LineDecoder lineDecoder = new LineDecoder(new LocationReferencePointDecoder());", "modifier": "", "type": "LineDecoder", "declarator": "lineDecoder = new LineDecoder(new LocationReferencePointDecoder())", "var_name": "lineDecoder"}], "file": "proto/src/test/java/openlr/proto/decoder/LineDecoderTest.java"}, "test_case": {"identifier": "testValidLocationReference", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidLocationReference() throws PhysicalFormatException {\n        Coordinates firstCoordinates = Coordinates.newBuilder()\n                .setLongitude(1)\n                .setLatitude(2)\n                .build();\n\n        LineAttributes firstLineAttributes = LineAttributes.newBuilder()\n                .setBearing(90)\n                .setFrc(FRC.FRC_0)\n                .setFow(FOW.FOW_MOTORWAY)\n                .build();\n\n        PathAttributes firstPathAttributes = PathAttributes.newBuilder()\n                .setDistanceToNext(100)\n                .setLowestFrcAlongPath(FRC.FRC_1)\n                .build();\n\n        LocationReferencePoint first = LocationReferencePoint.newBuilder()\n                .setCoordinates(firstCoordinates)\n                .setLineAttributes(firstLineAttributes)\n                .setPathAttributes(firstPathAttributes)\n                .build();\n\n        Coordinates lastCoordinates = Coordinates.newBuilder()\n                .setLongitude(3)\n                .setLatitude(4)\n                .build();\n\n        LineAttributes lastLineAttributes = LineAttributes.newBuilder()\n                .setBearing(270)\n                .setFrc(FRC.FRC_1)\n                .setFow(FOW.FOW_MULTIPLE_CARRIAGEWAY)\n                .build();\n\n        LocationReferencePoint last = LocationReferencePoint.newBuilder()\n                .setCoordinates(lastCoordinates)\n                .setLineAttributes(lastLineAttributes)\n                .build();\n\n        LineLocationReference lineLocationReference = LineLocationReference.newBuilder()\n                .addLocationReferencePoints(first)\n                .addLocationReferencePoints(last)\n                .setPositiveOffset(1)\n                .setNegativeOffset(2)\n                .build();\n\n        LocationReferenceData locationReferenceData = LocationReferenceData.newBuilder()\n                .setLineLocationReference(lineLocationReference)\n                .build();\n\n        RawLocationReference rawLocationReference = lineDecoder.decode(\"1\", locationReferenceData);\n\n        assertNotNull(rawLocationReference);\n        assertEquals(rawLocationReference.getID(), \"1\");\n        assertEquals(rawLocationReference.getLocationType(), LocationType.LINE_LOCATION);\n\n        List<openlr.LocationReferencePoint> locationReferencePoints = rawLocationReference.getLocationReferencePoints();\n        assertNotNull(locationReferencePoints);\n        assertEquals(locationReferencePoints.size(), 2);\n\n        openlr.LocationReferencePoint firstLrp = locationReferencePoints.get(0);\n        assertEquals(firstLrp.getLongitudeDeg(), 1);\n        assertEquals(firstLrp.getLatitudeDeg(), 2);\n        assertEquals(firstLrp.getBearing(), 90);\n        assertEquals(firstLrp.getFRC(), FunctionalRoadClass.FRC_0);\n        assertEquals(firstLrp.getFOW(), FormOfWay.MOTORWAY);\n        assertEquals(firstLrp.getDistanceToNext(),100);\n        assertEquals(firstLrp.getLfrc(), FunctionalRoadClass.FRC_1);\n\n        openlr.LocationReferencePoint lastLrp = locationReferencePoints.get(1);\n        assertEquals(lastLrp.getLongitudeDeg(), 3);\n        assertEquals(lastLrp.getLatitudeDeg(),4);\n        assertEquals(lastLrp.getBearing(), 270);\n        assertEquals(lastLrp.getFRC(), FunctionalRoadClass.FRC_1);\n        assertEquals(lastLrp.getFOW(), FormOfWay.MULTIPLE_CARRIAGEWAY);\n\n        Offsets offsets = rawLocationReference.getOffsets();\n        assertNotNull(offsets);\n        assertEquals(offsets.getPositiveOffset(100), 1);\n        assertEquals(offsets.getNegativeOffset(100), 2);\n    }", "signature": "void testValidLocationReference()", "full_signature": "@Test public void testValidLocationReference()", "class_method_signature": "LineDecoderTest.testValidLocationReference()", "testcase": true, "constructor": false, "invocations": ["build", "setLatitude", "setLongitude", "newBuilder", "build", "setFow", "setFrc", "setBearing", "newBuilder", "build", "setLowestFrcAlongPath", "setDistanceToNext", "newBuilder", "build", "setPathAttributes", "setLineAttributes", "setCoordinates", "newBuilder", "build", "setLatitude", "setLongitude", "newBuilder", "build", "setFow", "setFrc", "setBearing", "newBuilder", "build", "setLineAttributes", "setCoordinates", "newBuilder", "build", "setNegativeOffset", "setPositiveOffset", "addLocationReferencePoints", "addLocationReferencePoints", "newBuilder", "build", "setLineLocationReference", "newBuilder", "decode", "assertNotNull", "assertEquals", "getID", "assertEquals", "getLocationType", "getLocationReferencePoints", "assertNotNull", "assertEquals", "size", "get", "assertEquals", "getLongitudeDeg", "assertEquals", "getLatitudeDeg", "assertEquals", "getBearing", "assertEquals", "getFRC", "assertEquals", "getFOW", "assertEquals", "getDistanceToNext", "assertEquals", "getLfrc", "get", "assertEquals", "getLongitudeDeg", "assertEquals", "getLatitudeDeg", "assertEquals", "getBearing", "assertEquals", "getFRC", "assertEquals", "getFOW", "getOffsets", "assertNotNull", "assertEquals", "getPositiveOffset", "assertEquals", "getNegativeOffset"]}, "focal_class": {"identifier": "LineDecoder", "superclass": "", "interfaces": "implements LocationReferenceDecoder", "fields": [{"original_string": "private final LocationReferencePointDecoder locationReferencePointDecoder;", "modifier": "private final", "type": "LocationReferencePointDecoder", "declarator": "locationReferencePointDecoder", "var_name": "locationReferencePointDecoder"}], "methods": [{"identifier": "LineDecoder", "parameters": "(LocationReferencePointDecoder locationReferencePointDecoder)", "modifiers": "", "return": "", "signature": " LineDecoder(LocationReferencePointDecoder locationReferencePointDecoder)", "full_signature": "  LineDecoder(LocationReferencePointDecoder locationReferencePointDecoder)", "class_method_signature": "LineDecoder.LineDecoder(LocationReferencePointDecoder locationReferencePointDecoder)", "testcase": false, "constructor": true}, {"identifier": "decode", "parameters": "(String id, LocationReferenceData data)", "modifiers": "@Override public", "return": "RawLocationReference", "signature": "RawLocationReference decode(String id, LocationReferenceData data)", "full_signature": "@Override public RawLocationReference decode(String id, LocationReferenceData data)", "class_method_signature": "LineDecoder.decode(String id, LocationReferenceData data)", "testcase": false, "constructor": false}], "file": "proto/src/main/java/openlr/proto/decoder/LineDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(String id, LocationReferenceData data)", "modifiers": "@Override public", "return": "RawLocationReference", "body": "@Override\n    public RawLocationReference decode(String id, LocationReferenceData data) throws OpenLRProtoException {\n        if (!data.hasLineLocationReference()) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.MISSING_LOCATION_REFERENCE);\n        }\n\n        LineLocationReference lineLocationReference = data.getLineLocationReference();\n\n        int lrpCount = lineLocationReference.getLocationReferencePointsCount();\n\n        if (lrpCount < 2) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);\n        }\n\n        List<LocationReferencePoint> locationReferencePoints = new ArrayList<>();\n\n        for (int sequenceNumber = 1; sequenceNumber <= lrpCount; sequenceNumber++) {\n            LocationReferencePoint locationReferencePoint = locationReferencePointDecoder.decode(\n                    lineLocationReference.getLocationReferencePoints(sequenceNumber - 1),\n                    sequenceNumber,\n                    sequenceNumber == lrpCount);\n            locationReferencePoints.add(locationReferencePoint);\n        }\n\n        Offsets offsets = new OffsetsProtoImpl(\n                lineLocationReference.getPositiveOffset(),\n                lineLocationReference.getNegativeOffset());\n\n        return new RawLineLocRef(id, locationReferencePoints, offsets);\n    }", "signature": "RawLocationReference decode(String id, LocationReferenceData data)", "full_signature": "@Override public RawLocationReference decode(String id, LocationReferenceData data)", "class_method_signature": "LineDecoder.decode(String id, LocationReferenceData data)", "testcase": false, "constructor": false, "invocations": ["hasLineLocationReference", "getLineLocationReference", "getLocationReferencePointsCount", "decode", "getLocationReferencePoints", "add", "getPositiveOffset", "getNegativeOffset"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}