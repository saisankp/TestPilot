{"test_class": {"identifier": "AuthenticatorDataConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ObjectConverter objectConverter = new ObjectConverter();", "modifier": "private", "type": "ObjectConverter", "declarator": "objectConverter = new ObjectConverter()", "var_name": "objectConverter"}], "file": "webauthn4j-core/src/test/java/com/webauthn4j/converter/AuthenticatorDataConverterTest.java"}, "test_case": {"identifier": "convert_too_short_data_test", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void convert_too_short_data_test() {\n        //Given\n        //noinspection SpellCheckingInspection\n        byte[] input = Base64UrlUtil.decode(\"SZYN5YgOjGh0NBcP\");\n        AuthenticatorDataConverter authenticatorDataConverter = new AuthenticatorDataConverter(objectConverter);\n\n        //When\n        assertThrows(DataConversionException.class,\n                () -> authenticatorDataConverter.convert(input)\n        );\n    }", "signature": "void convert_too_short_data_test()", "full_signature": "@Test void convert_too_short_data_test()", "class_method_signature": "AuthenticatorDataConverterTest.convert_too_short_data_test()", "testcase": true, "constructor": false, "invocations": ["decode", "assertThrows", "convert"]}, "focal_class": {"identifier": "AuthenticatorDataConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int RPID_HASH_LENGTH = 32;", "modifier": "private static final", "type": "int", "declarator": "RPID_HASH_LENGTH = 32", "var_name": "RPID_HASH_LENGTH"}, {"original_string": "private static final int FLAGS_LENGTH = 1;", "modifier": "private static final", "type": "int", "declarator": "FLAGS_LENGTH = 1", "var_name": "FLAGS_LENGTH"}, {"original_string": "private static final int COUNTER_LENGTH = 4;", "modifier": "private static final", "type": "int", "declarator": "COUNTER_LENGTH = 4", "var_name": "COUNTER_LENGTH"}, {"original_string": "private static final int AAGUID_LENGTH = 16;", "modifier": "private static final", "type": "int", "declarator": "AAGUID_LENGTH = 16", "var_name": "AAGUID_LENGTH"}, {"original_string": "private static final int L_LENGTH = 2;", "modifier": "private static final", "type": "int", "declarator": "L_LENGTH = 2", "var_name": "L_LENGTH"}, {"original_string": "private static final int COUNTER_INDEX = RPID_HASH_LENGTH + FLAGS_LENGTH;", "modifier": "private static final", "type": "int", "declarator": "COUNTER_INDEX = RPID_HASH_LENGTH + FLAGS_LENGTH", "var_name": "COUNTER_INDEX"}, {"original_string": "private static final int ATTESTED_CREDENTIAL_DATA_INDEX = RPID_HASH_LENGTH + FLAGS_LENGTH + COUNTER_LENGTH;", "modifier": "private static final", "type": "int", "declarator": "ATTESTED_CREDENTIAL_DATA_INDEX = RPID_HASH_LENGTH + FLAGS_LENGTH + COUNTER_LENGTH", "var_name": "ATTESTED_CREDENTIAL_DATA_INDEX"}, {"original_string": "private static final int L_INDEX = ATTESTED_CREDENTIAL_DATA_INDEX + AAGUID_LENGTH;", "modifier": "private static final", "type": "int", "declarator": "L_INDEX = ATTESTED_CREDENTIAL_DATA_INDEX + AAGUID_LENGTH", "var_name": "L_INDEX"}, {"original_string": "private static final int CREDENTIAL_ID_INDEX = L_INDEX + L_LENGTH;", "modifier": "private static final", "type": "int", "declarator": "CREDENTIAL_ID_INDEX = L_INDEX + L_LENGTH", "var_name": "CREDENTIAL_ID_INDEX"}, {"original_string": "private final CborConverter cborConverter;", "modifier": "private final", "type": "CborConverter", "declarator": "cborConverter", "var_name": "cborConverter"}, {"original_string": "private final AttestedCredentialDataConverter attestedCredentialDataConverter;", "modifier": "private final", "type": "AttestedCredentialDataConverter", "declarator": "attestedCredentialDataConverter", "var_name": "attestedCredentialDataConverter"}], "methods": [{"identifier": "AuthenticatorDataConverter", "parameters": "(ObjectConverter objectConverter)", "modifiers": "public", "return": "", "signature": " AuthenticatorDataConverter(ObjectConverter objectConverter)", "full_signature": "public  AuthenticatorDataConverter(ObjectConverter objectConverter)", "class_method_signature": "AuthenticatorDataConverter.AuthenticatorDataConverter(ObjectConverter objectConverter)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(AuthenticatorData<T> source)", "modifiers": "public", "return": "byte[]", "signature": "byte[] convert(AuthenticatorData<T> source)", "full_signature": "public byte[] convert(AuthenticatorData<T> source)", "class_method_signature": "AuthenticatorDataConverter.convert(AuthenticatorData<T> source)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(byte[] source)", "modifiers": "public", "return": "AuthenticatorData<T>", "signature": "AuthenticatorData<T> convert(byte[] source)", "full_signature": "public AuthenticatorData<T> convert(byte[] source)", "class_method_signature": "AuthenticatorDataConverter.convert(byte[] source)", "testcase": false, "constructor": false}, {"identifier": "convertToExtensions", "parameters": "(ByteBuffer byteBuffer)", "modifiers": "private", "return": "AuthenticationExtensionsAuthenticatorOutputs<T>", "signature": "AuthenticationExtensionsAuthenticatorOutputs<T> convertToExtensions(ByteBuffer byteBuffer)", "full_signature": "private AuthenticationExtensionsAuthenticatorOutputs<T> convertToExtensions(ByteBuffer byteBuffer)", "class_method_signature": "AuthenticatorDataConverter.convertToExtensions(ByteBuffer byteBuffer)", "testcase": false, "constructor": false}, {"identifier": "extractAttestedCredentialData", "parameters": "(byte[] authenticatorData)", "modifiers": "public", "return": "byte[]", "signature": "byte[] extractAttestedCredentialData(byte[] authenticatorData)", "full_signature": "public byte[] extractAttestedCredentialData(byte[] authenticatorData)", "class_method_signature": "AuthenticatorDataConverter.extractAttestedCredentialData(byte[] authenticatorData)", "testcase": false, "constructor": false}, {"identifier": "extractSignCount", "parameters": "(byte[] authenticatorData)", "modifiers": "public", "return": "long", "signature": "long extractSignCount(byte[] authenticatorData)", "full_signature": "public long extractSignCount(byte[] authenticatorData)", "class_method_signature": "AuthenticatorDataConverter.extractSignCount(byte[] authenticatorData)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(AuthenticationExtensionsAuthenticatorOutputs<T> extensions)", "modifiers": "", "return": "byte[]", "signature": "byte[] convert(AuthenticationExtensionsAuthenticatorOutputs<T> extensions)", "full_signature": " byte[] convert(AuthenticationExtensionsAuthenticatorOutputs<T> extensions)", "class_method_signature": "AuthenticatorDataConverter.convert(AuthenticationExtensionsAuthenticatorOutputs<T> extensions)", "testcase": false, "constructor": false}], "file": "webauthn4j-core/src/main/java/com/webauthn4j/converter/AuthenticatorDataConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(AuthenticatorData<T> source)", "modifiers": "public", "return": "byte[]", "body": "public <T extends ExtensionAuthenticatorOutput> byte[] convert(AuthenticatorData<T> source) {\n        try {\n            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n            byte[] rpIdHash = source.getRpIdHash();\n            byteArrayOutputStream.write(rpIdHash);\n            byteArrayOutputStream.write(new byte[]{source.getFlags()});\n            byteArrayOutputStream.write(UnsignedNumberUtil.toBytes(source.getSignCount()));\n            if (source.getAttestedCredentialData() != null) {\n                byteArrayOutputStream.write(attestedCredentialDataConverter.convert(source.getAttestedCredentialData()));\n            }\n            byteArrayOutputStream.write(convert(source.getExtensions()));\n            return byteArrayOutputStream.toByteArray();\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }", "signature": "byte[] convert(AuthenticatorData<T> source)", "full_signature": "public byte[] convert(AuthenticatorData<T> source)", "class_method_signature": "AuthenticatorDataConverter.convert(AuthenticatorData<T> source)", "testcase": false, "constructor": false, "invocations": ["getRpIdHash", "write", "write", "getFlags", "write", "toBytes", "getSignCount", "getAttestedCredentialData", "write", "convert", "getAttestedCredentialData", "write", "convert", "getExtensions", "toByteArray"]}, "repository": {"repo_id": 134147639, "url": "https://github.com/webauthn4j/webauthn4j", "stars": 101, "created": "5/20/2018 12:14:36 PM +00:00", "updates": "2020-01-27T13:01:46+00:00", "fork": "False", "license": "licensed"}}