{"test_class": {"identifier": "AppKeyExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final CamelContext context = new DefaultCamelContext();", "modifier": "final", "type": "CamelContext", "declarator": "context = new DefaultCamelContext()", "var_name": "context"}, {"original_string": "final String appKeyName = \"appkey\";", "modifier": "final", "type": "String", "declarator": "appKeyName = \"appkey\"", "var_name": "appKeyName"}, {"original_string": "final String appHeaderName = \"appheader\";", "modifier": "final", "type": "String", "declarator": "appHeaderName = \"appheader\"", "var_name": "appHeaderName"}], "file": "exposure-engine/auth-manager/src/test/java/com/alu/e3/auth/executor/AppKeyExecutorTest.java"}, "test_case": {"identifier": "testWinHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testWinHeader() {\n\t\tExchange exchange = new DefaultExchange(context);\n\t\texchange.setProperty(ExchangeConstantKeys.E3_REQUEST_PARAMETERS.toString(), new HashMap<String, Object>());\n\t\t\n\t\tApi api = new Api();\n\t\tapi.setId(\"1234\");\n\n\t\t// Setting the key in the header - should be removed\n\t\texchange.getIn().setHeader(appHeaderName, \"asdf\");\n\t\t\n\t\tAppKeyExecutor executor = new AppKeyExecutor(appKeyName, appHeaderName, new MockAuthDataAccess(\"asdf\", null, null));\n\t\t\n\t\tAuthReport authReport = executor.checkAllowed(exchange, api);\n\t\t\n\t\tassertNotNull(\"This authentication should have succeeded\", authReport.getAuthIdentity());\n\n\t\t// Check the query parameter\n\t\tassertNull(\"The header should have been removed\", exchange.getIn().getHeader(appHeaderName));\n\t}", "signature": "void testWinHeader()", "full_signature": "@Test public void testWinHeader()", "class_method_signature": "AppKeyExecutorTest.testWinHeader()", "testcase": true, "constructor": false, "invocations": ["setProperty", "toString", "setId", "setHeader", "getIn", "checkAllowed", "assertNotNull", "getAuthIdentity", "assertNull", "getHeader", "getIn"]}, "focal_class": {"identifier": "AppKeyExecutor", "superclass": "", "interfaces": "implements IAuthExecutor", "fields": [{"original_string": "private static final CategoryLogger logger = CategoryLoggerFactory.getLogger(AppKeyExecutor.class, Category.AUTH);", "modifier": "private static final", "type": "CategoryLogger", "declarator": "logger = CategoryLoggerFactory.getLogger(AppKeyExecutor.class, Category.AUTH)", "var_name": "logger"}, {"original_string": "private String keyName = \"\";", "modifier": "private", "type": "String", "declarator": "keyName = \"\"", "var_name": "keyName"}, {"original_string": "private String headerName = \"\";", "modifier": "private", "type": "String", "declarator": "headerName = \"\"", "var_name": "headerName"}, {"original_string": "private IAuthDataAccess dataAccess;", "modifier": "private", "type": "IAuthDataAccess", "declarator": "dataAccess", "var_name": "dataAccess"}], "methods": [{"identifier": "AppKeyExecutor", "parameters": "(String keyname, String headerName, IAuthDataAccess dataAccess)", "modifiers": "public", "return": "", "signature": " AppKeyExecutor(String keyname, String headerName, IAuthDataAccess dataAccess)", "full_signature": "public  AppKeyExecutor(String keyname, String headerName, IAuthDataAccess dataAccess)", "class_method_signature": "AppKeyExecutor.AppKeyExecutor(String keyname, String headerName, IAuthDataAccess dataAccess)", "testcase": false, "constructor": true}, {"identifier": "removeHttpQueryValue", "parameters": "(Exchange exchange, String value)", "modifiers": "private", "return": "void", "signature": "void removeHttpQueryValue(Exchange exchange, String value)", "full_signature": "private void removeHttpQueryValue(Exchange exchange, String value)", "class_method_signature": "AppKeyExecutor.removeHttpQueryValue(Exchange exchange, String value)", "testcase": false, "constructor": false}, {"identifier": "checkAllowed", "parameters": "(Exchange exchange, Api api)", "modifiers": "@Override public", "return": "AuthReport", "signature": "AuthReport checkAllowed(Exchange exchange, Api api)", "full_signature": "@Override public AuthReport checkAllowed(Exchange exchange, Api api)", "class_method_signature": "AppKeyExecutor.checkAllowed(Exchange exchange, Api api)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "AuthType", "signature": "AuthType getType()", "full_signature": "@Override public AuthType getType()", "class_method_signature": "AppKeyExecutor.getType()", "testcase": false, "constructor": false}, {"identifier": "getErrorCode", "parameters": "()", "modifiers": "@Override public", "return": "GatewayExceptionCode", "signature": "GatewayExceptionCode getErrorCode()", "full_signature": "@Override public GatewayExceptionCode getErrorCode()", "class_method_signature": "AppKeyExecutor.getErrorCode()", "testcase": false, "constructor": false}], "file": "exposure-engine/auth-manager/src/main/java/com/alu/e3/auth/executor/AppKeyExecutor.java"}, "focal_method": {"identifier": "checkAllowed", "parameters": "(Exchange exchange, Api api)", "modifiers": "@Override public", "return": "AuthReport", "body": "@Override\n\tpublic AuthReport checkAllowed(Exchange exchange, Api api) {\n\t\t\n\t\tAuthReport authReport = new AuthReport();\n\t\tObject keyObj = null;\n\t\t\n\t\tMap<?, ?> parameters = exchange.getProperty(ExchangeConstantKeys.E3_REQUEST_PARAMETERS.toString(), Map.class);\n\t\tif (parameters == null) {\n\t\t\tif(logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Request parameters not set\");\n\t\t\t}\n\t\t\tauthReport.setBadRequest(true);\n\t\t} else {\n\t\t\n\t\t\tkeyObj = parameters.get(keyName);\n\t\t\tif (keyObj == null) { // No parameter by keyName, checking for a header \"headerName\"\n\t\t\t\tkeyObj = exchange.getIn().getHeader(headerName, String.class); \n\t\t\t\tif (keyObj == null) {\t\t\n\t\t\t\t\t// Abort\n\t\t\t\t\tif(logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(\"Unable to find url parameter or header matching the provisioned api key name\");\n\t\t\t\t\t}\n\t\t\t\t\tauthReport.setBadRequest(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// if not a bad request\n\t\tif(!authReport.isBadRequest()) {\n\t\t\n\t\t\tString authKey = keyObj.toString();\n\t\t\tif(logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"authKey= \" + authKey);\n\t\t\t}\n\t\t\t\n\t\t\t// remove the credential from URL\n\t\t\tremoveHttpQueryValue(exchange, keyName+\"=\"+authKey);\n\t\t\t\n\t\t\t// remove the credential from Header\n\t\t\texchange.getIn().removeHeader(headerName);\n\t\n\t\t\t//Call AuthManager\n\t\t\ttry {\n\t\t\t\tauthReport = dataAccess.checkAllowed(api, authKey);\n\t\t\t} catch(DataAccessRuntimeException e) {\n\t\t\t\t\tlogger.error(\"Data Access Issue\", e);\n\t\t\t} catch(Exception e) {\n\t\t\t\t\tlogger.error(\"Data Access Issue\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn authReport;\n\t}", "signature": "AuthReport checkAllowed(Exchange exchange, Api api)", "full_signature": "@Override public AuthReport checkAllowed(Exchange exchange, Api api)", "class_method_signature": "AppKeyExecutor.checkAllowed(Exchange exchange, Api api)", "testcase": false, "constructor": false, "invocations": ["getProperty", "toString", "isDebugEnabled", "debug", "setBadRequest", "get", "getHeader", "getIn", "isDebugEnabled", "debug", "setBadRequest", "isBadRequest", "toString", "isDebugEnabled", "debug", "removeHttpQueryValue", "removeHeader", "getIn", "checkAllowed", "error", "error"]}, "repository": {"repo_id": 5239065, "url": "https://github.com/apigrove/apigrove", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 118, "size": 215144, "license": "licensed"}}