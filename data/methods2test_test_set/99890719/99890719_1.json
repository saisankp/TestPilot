{"test_class": {"identifier": "OverlapWithoutEdgesToMissingNodesWeightFunctionTest", "superclass": "", "interfaces": "", "fields": [], "file": "mubench/src/test/java/de/tu_darmstadt/stg/mudetect/ranking/OverlapWithoutEdgesToMissingNodesWeightFunctionTest.java"}, "test_case": {"identifier": "noMissingElements_withEdge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void noMissingElements_withEdge() {\n        Overlap instance = instance(buildAUG().withActionNodes(\"A\", \"B\").withEdge(\"A\", ORDER, \"B\"));\n\n        double weight = getWeight(instance, node -> 1);\n\n        assertThat(weight, is(1.0));\n    }", "signature": "void noMissingElements_withEdge()", "full_signature": "@Test public void noMissingElements_withEdge()", "class_method_signature": "OverlapWithoutEdgesToMissingNodesWeightFunctionTest.noMissingElements_withEdge()", "testcase": true, "constructor": false, "invocations": ["instance", "withEdge", "withActionNodes", "buildAUG", "getWeight", "assertThat", "is"]}, "focal_class": {"identifier": "OverlapWithoutEdgesToMissingNodesWeightFunction", "superclass": "", "interfaces": "implements ViolationWeightFunction", "fields": [{"original_string": "private NodeWeightFunction nodeWeight;", "modifier": "private", "type": "NodeWeightFunction", "declarator": "nodeWeight", "var_name": "nodeWeight"}], "methods": [{"identifier": "OverlapWithoutEdgesToMissingNodesWeightFunction", "parameters": "(NodeWeightFunction nodeWeight)", "modifiers": "public", "return": "", "signature": " OverlapWithoutEdgesToMissingNodesWeightFunction(NodeWeightFunction nodeWeight)", "full_signature": "public  OverlapWithoutEdgesToMissingNodesWeightFunction(NodeWeightFunction nodeWeight)", "class_method_signature": "OverlapWithoutEdgesToMissingNodesWeightFunction.OverlapWithoutEdgesToMissingNodesWeightFunction(NodeWeightFunction nodeWeight)", "testcase": false, "constructor": true}, {"identifier": "getWeight", "parameters": "(Overlap violation, Overlaps overlaps, Model model)", "modifiers": "@Override public", "return": "double", "signature": "double getWeight(Overlap violation, Overlaps overlaps, Model model)", "full_signature": "@Override public double getWeight(Overlap violation, Overlaps overlaps, Model model)", "class_method_signature": "OverlapWithoutEdgesToMissingNodesWeightFunction.getWeight(Overlap violation, Overlaps overlaps, Model model)", "testcase": false, "constructor": false}, {"identifier": "getFormula", "parameters": "(Overlap violation, Overlaps overlaps, Model model)", "modifiers": "@Override public", "return": "String", "signature": "String getFormula(Overlap violation, Overlaps overlaps, Model model)", "full_signature": "@Override public String getFormula(Overlap violation, Overlaps overlaps, Model model)", "class_method_signature": "OverlapWithoutEdgesToMissingNodesWeightFunction.getFormula(Overlap violation, Overlaps overlaps, Model model)", "testcase": false, "constructor": false}, {"identifier": "getMappedElementsWeight", "parameters": "(Overlap violation)", "modifiers": "private", "return": "double", "signature": "double getMappedElementsWeight(Overlap violation)", "full_signature": "private double getMappedElementsWeight(Overlap violation)", "class_method_signature": "OverlapWithoutEdgesToMissingNodesWeightFunction.getMappedElementsWeight(Overlap violation)", "testcase": false, "constructor": false}, {"identifier": "getPatternWeight", "parameters": "(Overlap violation)", "modifiers": "private", "return": "double", "signature": "double getPatternWeight(Overlap violation)", "full_signature": "private double getPatternWeight(Overlap violation)", "class_method_signature": "OverlapWithoutEdgesToMissingNodesWeightFunction.getPatternWeight(Overlap violation)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfEdgesBetweenMappedNodes", "parameters": "(Overlap violation, APIUsagePattern pattern)", "modifiers": "private", "return": "long", "signature": "long getNumberOfEdgesBetweenMappedNodes(Overlap violation, APIUsagePattern pattern)", "full_signature": "private long getNumberOfEdgesBetweenMappedNodes(Overlap violation, APIUsagePattern pattern)", "class_method_signature": "OverlapWithoutEdgesToMissingNodesWeightFunction.getNumberOfEdgesBetweenMappedNodes(Overlap violation, APIUsagePattern pattern)", "testcase": false, "constructor": false}, {"identifier": "isConnectedTo", "parameters": "(Edge patternEdge, Set<Node> missingNodes)", "modifiers": "private", "return": "boolean", "signature": "boolean isConnectedTo(Edge patternEdge, Set<Node> missingNodes)", "full_signature": "private boolean isConnectedTo(Edge patternEdge, Set<Node> missingNodes)", "class_method_signature": "OverlapWithoutEdgesToMissingNodesWeightFunction.isConnectedTo(Edge patternEdge, Set<Node> missingNodes)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "OverlapWithoutEdgesToMissingNodesWeightFunction.getId()", "testcase": false, "constructor": false}], "file": "mubench/src/main/java/de/tu_darmstadt/stg/mudetect/ranking/OverlapWithoutEdgesToMissingNodesWeightFunction.java"}, "focal_method": {"identifier": "getWeight", "parameters": "(Overlap violation, Overlaps overlaps, Model model)", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double getWeight(Overlap violation, Overlaps overlaps, Model model) {\n        return getMappedElementsWeight(violation) / getPatternWeight(violation);\n    }", "signature": "double getWeight(Overlap violation, Overlaps overlaps, Model model)", "full_signature": "@Override public double getWeight(Overlap violation, Overlaps overlaps, Model model)", "class_method_signature": "OverlapWithoutEdgesToMissingNodesWeightFunction.getWeight(Overlap violation, Overlaps overlaps, Model model)", "testcase": false, "constructor": false, "invocations": ["getMappedElementsWeight", "getPatternWeight"]}, "repository": {"repo_id": 99890719, "url": "https://github.com/stg-tud/MUDetect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 5, "size": 11835, "license": "licensed"}}