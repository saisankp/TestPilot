{"test_class": {"identifier": "StringKeyValueSchemeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private StringKeyValueScheme scheme = new StringKeyValueScheme();", "modifier": "private", "type": "StringKeyValueScheme", "declarator": "scheme = new StringKeyValueScheme()", "var_name": "scheme"}], "file": "storm/storm-app/src/test/java/storm/kafka/StringKeyValueSchemeTest.java"}, "test_case": {"identifier": "testDeserializeWithKeyAndValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeserializeWithKeyAndValue() throws Exception {\n        assertEquals(Arrays.asList(ImmutableMap.of(\"key\", \"test\")),\n                scheme.deserializeKeyAndValue(\"key\".getBytes(), \"test\".getBytes()));\n    }", "signature": "void testDeserializeWithKeyAndValue()", "full_signature": "@Test public void testDeserializeWithKeyAndValue()", "class_method_signature": "StringKeyValueSchemeTest.testDeserializeWithKeyAndValue()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "asList", "of", "deserializeKeyAndValue", "getBytes", "getBytes"]}, "focal_class": {"identifier": "StringKeyValueScheme", "superclass": "extends StringScheme", "interfaces": "implements KeyValueScheme", "fields": [], "methods": [{"identifier": "deserializeKeyAndValue", "parameters": "(byte[] key, byte[] value)", "modifiers": "@Override public", "return": "List<Object>", "signature": "List<Object> deserializeKeyAndValue(byte[] key, byte[] value)", "full_signature": "@Override public List<Object> deserializeKeyAndValue(byte[] key, byte[] value)", "class_method_signature": "StringKeyValueScheme.deserializeKeyAndValue(byte[] key, byte[] value)", "testcase": false, "constructor": false}], "file": "storm/storm-app/src/main/java/storm/kafka/StringKeyValueScheme.java"}, "focal_method": {"identifier": "deserializeKeyAndValue", "parameters": "(byte[] key, byte[] value)", "modifiers": "@Override public", "return": "List<Object>", "body": "@Override\n    public List<Object> deserializeKeyAndValue(byte[] key, byte[] value) {\n        if ( key == null ) {\n            return deserialize(value);\n        }\n        String keyString = StringScheme.deserializeString(key);\n        String valueString = StringScheme.deserializeString(value);\n        return new Values(ImmutableMap.of(keyString, valueString));\n    }", "signature": "List<Object> deserializeKeyAndValue(byte[] key, byte[] value)", "full_signature": "@Override public List<Object> deserializeKeyAndValue(byte[] key, byte[] value)", "class_method_signature": "StringKeyValueScheme.deserializeKeyAndValue(byte[] key, byte[] value)", "testcase": false, "constructor": false, "invocations": ["deserialize", "deserializeString", "deserializeString", "of"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}