{"test_class": {"identifier": "UniversalDiscCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock DiscCacheAware delegate;", "modifier": "@Mock", "type": "DiscCacheAware", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "@InjectMocks UniversalDiscCache discCache;", "modifier": "@InjectMocks", "type": "UniversalDiscCache", "declarator": "discCache", "var_name": "discCache"}], "file": "volley-caches/src/test/java/com/navercorp/volleyextensions/cache/universalimageloader/disc/UniversalDiscCacheTest.java"}, "test_case": {"identifier": "entryShouldBeNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void entryShouldBeNull() {\n\t\t// When\n\t\tEntry entry = discCache.get(null);\n\t\t// Then\n\t\tassertNull(entry);\n\t}", "signature": "void entryShouldBeNull()", "full_signature": "@Test public void entryShouldBeNull()", "class_method_signature": "UniversalDiscCacheTest.entryShouldBeNull()", "testcase": true, "constructor": false, "invocations": ["get", "assertNull"]}, "focal_class": {"identifier": "UniversalDiscCache", "superclass": "", "interfaces": "implements Cache", "fields": [{"original_string": "private static final String TAG = UniversalDiscCache.class.getSimpleName();", "modifier": "private static final", "type": "String", "declarator": "TAG = UniversalDiscCache.class.getSimpleName()", "var_name": "TAG"}, {"original_string": "private final DiscCacheAware delegate;", "modifier": "private final", "type": "DiscCacheAware", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "UniversalDiscCache", "parameters": "(DiscCacheAware delegate)", "modifiers": "public", "return": "", "signature": " UniversalDiscCache(DiscCacheAware delegate)", "full_signature": "public  UniversalDiscCache(DiscCacheAware delegate)", "class_method_signature": "UniversalDiscCache.UniversalDiscCache(DiscCacheAware delegate)", "testcase": false, "constructor": true}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "UniversalDiscCache.clear()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key)", "modifiers": "@Override public", "return": "Entry", "signature": "Entry get(String key)", "full_signature": "@Override public Entry get(String key)", "class_method_signature": "UniversalDiscCache.get(String key)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String key, Entry entry)", "modifiers": "@Override public", "return": "void", "signature": "void put(String key, Entry entry)", "full_signature": "@Override public void put(String key, Entry entry)", "class_method_signature": "UniversalDiscCache.put(String key, Entry entry)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "UniversalDiscCache.initialize()", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "(String key, boolean arg1)", "modifiers": "@Override public", "return": "void", "signature": "void invalidate(String key, boolean arg1)", "full_signature": "@Override public void invalidate(String key, boolean arg1)", "class_method_signature": "UniversalDiscCache.invalidate(String key, boolean arg1)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String key)", "modifiers": "@Override public", "return": "void", "signature": "void remove(String key)", "full_signature": "@Override public void remove(String key)", "class_method_signature": "UniversalDiscCache.remove(String key)", "testcase": false, "constructor": false}], "file": "volley-caches/src/main/java/com/navercorp/volleyextensions/cache/universalimageloader/disc/UniversalDiscCache.java"}, "focal_method": {"identifier": "get", "parameters": "(String key)", "modifiers": "@Override public", "return": "Entry", "body": "@Override\n\tpublic Entry get(String key) {\n\t\tif (key == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tFile file = this.delegate.get(key);\n\t\tif (file == null || !file.exists()) {\n\t\t\treturn null;\n\t\t}\n\t\tCountingInputStream cis = null;\n\t\ttry {\n\t\t\tcis = new CountingInputStream(new FileInputStream(file));\n\n\t\t\tCacheHeader header = CacheHeader.readHeader(cis); // eat header\n\t\t\tbyte[] data = StreamUtils.streamToBytes(cis,\n\t\t\t\t\t(int) (file.length() - cis.bytesRead));\n\n\t\t\treturn header.toCacheEntry(data);\n\t\t} catch (IOException e) {\n\t\t\tVolleyLog.e(e, \"Exception in file path %s\", file.getAbsolutePath());\n\t\t\tremove(key);\n\t\t\treturn null;\n\t\t} finally {\n\t\t\tIoUtils.closeQuietly(cis);\n\t\t}\n\t}", "signature": "Entry get(String key)", "full_signature": "@Override public Entry get(String key)", "class_method_signature": "UniversalDiscCache.get(String key)", "testcase": false, "constructor": false, "invocations": ["get", "exists", "readHeader", "streamToBytes", "length", "toCacheEntry", "e", "getAbsolutePath", "remove", "closeQuietly"]}, "repository": {"repo_id": 17432029, "url": "https://github.com/naver/volley-extensions", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 138, "size": 666, "license": "licensed"}}