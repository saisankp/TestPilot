{"test_class": {"identifier": "TestLogAggregationService", "superclass": "extends BaseContainerManagerTest", "interfaces": "", "fields": [{"original_string": "private Map<ApplicationAccessType, String> acls = createAppAcls();", "modifier": "private", "type": "Map<ApplicationAccessType, String>", "declarator": "acls = createAppAcls()", "var_name": "acls"}, {"original_string": "private static RecordFactory recordFactory = RecordFactoryProvider\n      .getRecordFactory(null);", "modifier": "private static", "type": "RecordFactory", "declarator": "recordFactory = RecordFactoryProvider\n      .getRecordFactory(null)", "var_name": "recordFactory"}, {"original_string": "private File remoteRootLogDir = new File(\"target\", this.getClass()\n      .getName() + \"-remoteLogDir\");", "modifier": "private", "type": "File", "declarator": "remoteRootLogDir = new File(\"target\", this.getClass()\n      .getName() + \"-remoteLogDir\")", "var_name": "remoteRootLogDir"}, {"original_string": "DrainDispatcher dispatcher;", "modifier": "", "type": "DrainDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "EventHandler<ApplicationEvent> appEventHandler;", "modifier": "", "type": "EventHandler<ApplicationEvent>", "declarator": "appEventHandler", "var_name": "appEventHandler"}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/TestLogAggregationService.java"}, "test_case": {"identifier": "testNoLogsUploadedOnAppFinish", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNoLogsUploadedOnAppFinish() throws Exception {\n    this.delSrvc = new DeletionService(createContainerExecutor());\n    delSrvc = spy(delSrvc);\n    this.delSrvc.init(conf);\n    this.conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\n    this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n        this.remoteRootLogDir.getAbsolutePath());\n\n    LogAggregationService logAggregationService = new LogAggregationService(\n        dispatcher, this.context, this.delSrvc, super.dirsHandler);\n    logAggregationService.init(this.conf);\n    logAggregationService.start();\n\n    ApplicationId app = BuilderUtils.newApplicationId(1234, 1);\n    File appLogDir = new File(localLogDir, ConverterUtils.toString(app));\n    appLogDir.mkdir();\n    LogAggregationContext context =\n        LogAggregationContext.newInstance(\"HOST*\", \"sys*\");\n    logAggregationService.handle(new LogHandlerAppStartedEvent(app, this.user,\n        null, ContainerLogsRetentionPolicy.ALL_CONTAINERS, this.acls, context));\n\n    ApplicationAttemptId appAttemptId =\n        BuilderUtils.newApplicationAttemptId(app, 1);\n    ContainerId cont = BuilderUtils.newContainerId(appAttemptId, 1);\n    writeContainerLogs(appLogDir, cont, new String[] { \"stdout\",\n        \"stderr\", \"syslog\" });\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(cont, 0));\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(app));\n    logAggregationService.stop();\n    delSrvc.stop();\n    // Aggregated logs should not be deleted if not uploaded.\n    verify(delSrvc, times(0)).delete(user, null);\n  }", "signature": "void testNoLogsUploadedOnAppFinish()", "full_signature": "@Test public void testNoLogsUploadedOnAppFinish()", "class_method_signature": "TestLogAggregationService.testNoLogsUploadedOnAppFinish()", "testcase": true, "constructor": false, "invocations": ["createContainerExecutor", "spy", "init", "set", "getAbsolutePath", "set", "getAbsolutePath", "init", "start", "newApplicationId", "toString", "mkdir", "newInstance", "handle", "newApplicationAttemptId", "newContainerId", "writeContainerLogs", "handle", "handle", "stop", "stop", "delete", "verify", "times"]}, "focal_class": {"identifier": "LogAggregationService", "superclass": "extends AbstractService", "interfaces": "implements\n    LogHandler", "fields": [{"original_string": "private static final Log LOG = LogFactory\n      .getLog(LogAggregationService.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory\n      .getLog(LogAggregationService.class)", "var_name": "LOG"}, {"original_string": "private static final FsPermission TLDIR_PERMISSIONS = FsPermission\n      .createImmutable((short) 01777);", "modifier": "private static final", "type": "FsPermission", "declarator": "TLDIR_PERMISSIONS = FsPermission\n      .createImmutable((short) 01777)", "var_name": "TLDIR_PERMISSIONS"}, {"original_string": "private static final FsPermission APP_DIR_PERMISSIONS = FsPermission\n      .createImmutable((short) 0770);", "modifier": "private static final", "type": "FsPermission", "declarator": "APP_DIR_PERMISSIONS = FsPermission\n      .createImmutable((short) 0770)", "var_name": "APP_DIR_PERMISSIONS"}, {"original_string": "private final Context context;", "modifier": "private final", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private final DeletionService deletionService;", "modifier": "private final", "type": "DeletionService", "declarator": "deletionService", "var_name": "deletionService"}, {"original_string": "private final Dispatcher dispatcher;", "modifier": "private final", "type": "Dispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "private LocalDirsHandlerService dirsHandler;", "modifier": "private", "type": "LocalDirsHandlerService", "declarator": "dirsHandler", "var_name": "dirsHandler"}, {"original_string": "Path remoteRootLogDir;", "modifier": "", "type": "Path", "declarator": "remoteRootLogDir", "var_name": "remoteRootLogDir"}, {"original_string": "String remoteRootLogDirSuffix;", "modifier": "", "type": "String", "declarator": "remoteRootLogDirSuffix", "var_name": "remoteRootLogDirSuffix"}, {"original_string": "private NodeId nodeId;", "modifier": "private", "type": "NodeId", "declarator": "nodeId", "var_name": "nodeId"}, {"original_string": "private final ConcurrentMap<ApplicationId, AppLogAggregator> appLogAggregators;", "modifier": "private final", "type": "ConcurrentMap<ApplicationId, AppLogAggregator>", "declarator": "appLogAggregators", "var_name": "appLogAggregators"}, {"original_string": "private final ExecutorService threadPool;", "modifier": "private final", "type": "ExecutorService", "declarator": "threadPool", "var_name": "threadPool"}], "methods": [{"identifier": "LogAggregationService", "parameters": "(Dispatcher dispatcher, Context context,\n      DeletionService deletionService, LocalDirsHandlerService dirsHandler)", "modifiers": "public", "return": "", "signature": " LogAggregationService(Dispatcher dispatcher, Context context,\n      DeletionService deletionService, LocalDirsHandlerService dirsHandler)", "full_signature": "public  LogAggregationService(Dispatcher dispatcher, Context context,\n      DeletionService deletionService, LocalDirsHandlerService dirsHandler)", "class_method_signature": "LogAggregationService.LogAggregationService(Dispatcher dispatcher, Context context,\n      DeletionService deletionService, LocalDirsHandlerService dirsHandler)", "testcase": false, "constructor": true}, {"identifier": "serviceInit", "parameters": "(Configuration conf)", "modifiers": "protected", "return": "void", "signature": "void serviceInit(Configuration conf)", "full_signature": "protected void serviceInit(Configuration conf)", "class_method_signature": "LogAggregationService.serviceInit(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "serviceStart", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void serviceStart()", "full_signature": "@Override protected void serviceStart()", "class_method_signature": "LogAggregationService.serviceStart()", "testcase": false, "constructor": false}, {"identifier": "serviceStop", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void serviceStop()", "full_signature": "@Override protected void serviceStop()", "class_method_signature": "LogAggregationService.serviceStop()", "testcase": false, "constructor": false}, {"identifier": "stopAggregators", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void stopAggregators()", "full_signature": "private void stopAggregators()", "class_method_signature": "LogAggregationService.stopAggregators()", "testcase": false, "constructor": false}, {"identifier": "getFileSystem", "parameters": "(Configuration conf)", "modifiers": "protected", "return": "FileSystem", "signature": "FileSystem getFileSystem(Configuration conf)", "full_signature": "protected FileSystem getFileSystem(Configuration conf)", "class_method_signature": "LogAggregationService.getFileSystem(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "verifyAndCreateRemoteLogDir", "parameters": "(Configuration conf)", "modifiers": "", "return": "void", "signature": "void verifyAndCreateRemoteLogDir(Configuration conf)", "full_signature": " void verifyAndCreateRemoteLogDir(Configuration conf)", "class_method_signature": "LogAggregationService.verifyAndCreateRemoteLogDir(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getRemoteNodeLogFileForApp", "parameters": "(ApplicationId appId, String user)", "modifiers": "", "return": "Path", "signature": "Path getRemoteNodeLogFileForApp(ApplicationId appId, String user)", "full_signature": " Path getRemoteNodeLogFileForApp(ApplicationId appId, String user)", "class_method_signature": "LogAggregationService.getRemoteNodeLogFileForApp(ApplicationId appId, String user)", "testcase": false, "constructor": false}, {"identifier": "getRemoteAppLogDir", "parameters": "(ApplicationId appId, String user)", "modifiers": "", "return": "Path", "signature": "Path getRemoteAppLogDir(ApplicationId appId, String user)", "full_signature": " Path getRemoteAppLogDir(ApplicationId appId, String user)", "class_method_signature": "LogAggregationService.getRemoteAppLogDir(ApplicationId appId, String user)", "testcase": false, "constructor": false}, {"identifier": "createDir", "parameters": "(FileSystem fs, Path path, FsPermission fsPerm)", "modifiers": "private", "return": "void", "signature": "void createDir(FileSystem fs, Path path, FsPermission fsPerm)", "full_signature": "private void createDir(FileSystem fs, Path path, FsPermission fsPerm)", "class_method_signature": "LogAggregationService.createDir(FileSystem fs, Path path, FsPermission fsPerm)", "testcase": false, "constructor": false}, {"identifier": "checkExists", "parameters": "(FileSystem fs, Path path, FsPermission fsPerm)", "modifiers": "private", "return": "boolean", "signature": "boolean checkExists(FileSystem fs, Path path, FsPermission fsPerm)", "full_signature": "private boolean checkExists(FileSystem fs, Path path, FsPermission fsPerm)", "class_method_signature": "LogAggregationService.checkExists(FileSystem fs, Path path, FsPermission fsPerm)", "testcase": false, "constructor": false}, {"identifier": "createAppDir", "parameters": "(final String user, final ApplicationId appId,\n      UserGroupInformation userUgi)", "modifiers": "protected", "return": "void", "signature": "void createAppDir(final String user, final ApplicationId appId,\n      UserGroupInformation userUgi)", "full_signature": "protected void createAppDir(final String user, final ApplicationId appId,\n      UserGroupInformation userUgi)", "class_method_signature": "LogAggregationService.createAppDir(final String user, final ApplicationId appId,\n      UserGroupInformation userUgi)", "testcase": false, "constructor": false}, {"identifier": "initApp", "parameters": "(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map<ApplicationAccessType, String> appAcls,\n      LogAggregationContext logAggregationContext)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void initApp(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map<ApplicationAccessType, String> appAcls,\n      LogAggregationContext logAggregationContext)", "full_signature": "@SuppressWarnings(\"unchecked\") private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map<ApplicationAccessType, String> appAcls,\n      LogAggregationContext logAggregationContext)", "class_method_signature": "LogAggregationService.initApp(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map<ApplicationAccessType, String> appAcls,\n      LogAggregationContext logAggregationContext)", "testcase": false, "constructor": false}, {"identifier": "getLocalFileContext", "parameters": "(Configuration conf)", "modifiers": "", "return": "FileContext", "signature": "FileContext getLocalFileContext(Configuration conf)", "full_signature": " FileContext getLocalFileContext(Configuration conf)", "class_method_signature": "LogAggregationService.getLocalFileContext(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "initAppAggregator", "parameters": "(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map<ApplicationAccessType, String> appAcls,\n      LogAggregationContext logAggregationContext)", "modifiers": "protected", "return": "void", "signature": "void initAppAggregator(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map<ApplicationAccessType, String> appAcls,\n      LogAggregationContext logAggregationContext)", "full_signature": "protected void initAppAggregator(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map<ApplicationAccessType, String> appAcls,\n      LogAggregationContext logAggregationContext)", "class_method_signature": "LogAggregationService.initAppAggregator(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map<ApplicationAccessType, String> appAcls,\n      LogAggregationContext logAggregationContext)", "testcase": false, "constructor": false}, {"identifier": "closeFileSystems", "parameters": "(final UserGroupInformation userUgi)", "modifiers": "protected", "return": "void", "signature": "void closeFileSystems(final UserGroupInformation userUgi)", "full_signature": "protected void closeFileSystems(final UserGroupInformation userUgi)", "class_method_signature": "LogAggregationService.closeFileSystems(final UserGroupInformation userUgi)", "testcase": false, "constructor": false}, {"identifier": "getNumAggregators", "parameters": "()", "modifiers": "@Private", "return": "int", "signature": "int getNumAggregators()", "full_signature": "@Private int getNumAggregators()", "class_method_signature": "LogAggregationService.getNumAggregators()", "testcase": false, "constructor": false}, {"identifier": "stopContainer", "parameters": "(ContainerId containerId, int exitCode)", "modifiers": "private", "return": "void", "signature": "void stopContainer(ContainerId containerId, int exitCode)", "full_signature": "private void stopContainer(ContainerId containerId, int exitCode)", "class_method_signature": "LogAggregationService.stopContainer(ContainerId containerId, int exitCode)", "testcase": false, "constructor": false}, {"identifier": "stopApp", "parameters": "(ApplicationId appId)", "modifiers": "private", "return": "void", "signature": "void stopApp(ApplicationId appId)", "full_signature": "private void stopApp(ApplicationId appId)", "class_method_signature": "LogAggregationService.stopApp(ApplicationId appId)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(LogHandlerEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void handle(LogHandlerEvent event)", "full_signature": "@Override public void handle(LogHandlerEvent event)", "class_method_signature": "LogAggregationService.handle(LogHandlerEvent event)", "testcase": false, "constructor": false}, {"identifier": "getAppLogAggregators", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "ConcurrentMap<ApplicationId, AppLogAggregator>", "signature": "ConcurrentMap<ApplicationId, AppLogAggregator> getAppLogAggregators()", "full_signature": "@VisibleForTesting public ConcurrentMap<ApplicationId, AppLogAggregator> getAppLogAggregators()", "class_method_signature": "LogAggregationService.getAppLogAggregators()", "testcase": false, "constructor": false}, {"identifier": "getNodeId", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "NodeId", "signature": "NodeId getNodeId()", "full_signature": "@VisibleForTesting public NodeId getNodeId()", "class_method_signature": "LogAggregationService.getNodeId()", "testcase": false, "constructor": false}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java"}, "focal_method": {"identifier": "handle", "parameters": "(LogHandlerEvent event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void handle(LogHandlerEvent event) {\n    switch (event.getType()) {\n      case APPLICATION_STARTED:\n        LogHandlerAppStartedEvent appStartEvent =\n            (LogHandlerAppStartedEvent) event;\n        initApp(appStartEvent.getApplicationId(), appStartEvent.getUser(),\n            appStartEvent.getCredentials(),\n            appStartEvent.getLogRetentionPolicy(),\n            appStartEvent.getApplicationAcls(),\n            appStartEvent.getLogAggregationContext());\n        break;\n      case CONTAINER_FINISHED:\n        LogHandlerContainerFinishedEvent containerFinishEvent =\n            (LogHandlerContainerFinishedEvent) event;\n        stopContainer(containerFinishEvent.getContainerId(),\n            containerFinishEvent.getExitCode());\n        break;\n      case APPLICATION_FINISHED:\n        LogHandlerAppFinishedEvent appFinishedEvent =\n            (LogHandlerAppFinishedEvent) event;\n        stopApp(appFinishedEvent.getApplicationId());\n        break;\n      default:\n        ; // Ignore\n    }\n\n  }", "signature": "void handle(LogHandlerEvent event)", "full_signature": "@Override public void handle(LogHandlerEvent event)", "class_method_signature": "LogAggregationService.handle(LogHandlerEvent event)", "testcase": false, "constructor": false, "invocations": ["getType", "initApp", "getApplicationId", "getUser", "getCredentials", "getLogRetentionPolicy", "getApplicationAcls", "getLogAggregationContext", "stopContainer", "getContainerId", "getExitCode", "stopApp", "getApplicationId"]}, "repository": {"repo_id": 195808004, "url": "https://github.com/mouzwang/hadoop-2.7.2", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 24927, "license": "licensed"}}