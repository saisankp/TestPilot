{"test_class": {"identifier": "BeekeeperServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int generation = nextInt(90) + 1;", "modifier": "private final", "type": "int", "declarator": "generation = nextInt(90) + 1", "var_name": "generation"}, {"original_string": "private final long fibonacciValue = nextLong();", "modifier": "private final", "type": "long", "declarator": "fibonacciValue = nextLong()", "var_name": "fibonacciValue"}, {"original_string": "private final FibonacciCalculator fibonacciCalculator = mock(FibonacciCalculator.class);", "modifier": "private final", "type": "FibonacciCalculator", "declarator": "fibonacciCalculator = mock(FibonacciCalculator.class)", "var_name": "fibonacciCalculator"}, {"original_string": "private final BeekeeperService beekeeperService = new BeekeeperServiceImpl(fibonacciCalculator);", "modifier": "private final", "type": "BeekeeperService", "declarator": "beekeeperService = new BeekeeperServiceImpl(fibonacciCalculator)", "var_name": "beekeeperService"}], "file": "beekeeper/src/test/java/io/servicecomb/company/beekeeper/BeekeeperServiceImplTest.java"}, "test_case": {"identifier": "calculatesAncestorsOfQueenAtGenerationN", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void calculatesAncestorsOfQueenAtGenerationN() {\n    when(fibonacciCalculator.term(generation + 2)).thenReturn(fibonacciValue);\n\n    long ancestors = beekeeperService.ancestorsOfQueenAt(generation);\n\n    assertThat(ancestors).isEqualTo(fibonacciValue);\n  }", "signature": "void calculatesAncestorsOfQueenAtGenerationN()", "full_signature": "@Test public void calculatesAncestorsOfQueenAtGenerationN()", "class_method_signature": "BeekeeperServiceImplTest.calculatesAncestorsOfQueenAtGenerationN()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "term", "ancestorsOfQueenAt", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "BeekeeperServiceImpl", "superclass": "", "interfaces": "implements BeekeeperService", "fields": [{"original_string": "private final FibonacciCalculator fibonacciCalculator;", "modifier": "private final", "type": "FibonacciCalculator", "declarator": "fibonacciCalculator", "var_name": "fibonacciCalculator"}], "methods": [{"identifier": "BeekeeperServiceImpl", "parameters": "(FibonacciCalculator fibonacciCalculator)", "modifiers": "", "return": "", "signature": " BeekeeperServiceImpl(FibonacciCalculator fibonacciCalculator)", "full_signature": "  BeekeeperServiceImpl(FibonacciCalculator fibonacciCalculator)", "class_method_signature": "BeekeeperServiceImpl.BeekeeperServiceImpl(FibonacciCalculator fibonacciCalculator)", "testcase": false, "constructor": true}, {"identifier": "ancestorsOfDroneAt", "parameters": "(int generation)", "modifiers": "@Override public", "return": "long", "signature": "long ancestorsOfDroneAt(int generation)", "full_signature": "@Override public long ancestorsOfDroneAt(int generation)", "class_method_signature": "BeekeeperServiceImpl.ancestorsOfDroneAt(int generation)", "testcase": false, "constructor": false}, {"identifier": "ancestorsOfQueenAt", "parameters": "(int generation)", "modifiers": "@Override public", "return": "long", "signature": "long ancestorsOfQueenAt(int generation)", "full_signature": "@Override public long ancestorsOfQueenAt(int generation)", "class_method_signature": "BeekeeperServiceImpl.ancestorsOfQueenAt(int generation)", "testcase": false, "constructor": false}], "file": "beekeeper/src/main/java/io/servicecomb/company/beekeeper/BeekeeperServiceImpl.java"}, "focal_method": {"identifier": "ancestorsOfQueenAt", "parameters": "(int generation)", "modifiers": "@Override public", "return": "long", "body": "@Override\n  public long ancestorsOfQueenAt(int generation) {\n    if (generation <= 0) {\n      return 0;\n    }\n    // please refer to the link in javadoc for the reason of + 2\n    return fibonacciCalculator.term(generation + 2);\n  }", "signature": "long ancestorsOfQueenAt(int generation)", "full_signature": "@Override public long ancestorsOfQueenAt(int generation)", "class_method_signature": "BeekeeperServiceImpl.ancestorsOfQueenAt(int generation)", "testcase": false, "constructor": false, "invocations": ["term"]}, "repository": {"repo_id": 93611636, "url": "https://github.com/huaweicse/ServiceComb-Company-WorkShop", "language": "Java", "is_fork": false, "fork_count": 49, "stargazer_count": 79, "size": 1350, "license": "licensed"}}