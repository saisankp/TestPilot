{"test_class": {"identifier": "ZMatrixToolsTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "storage/io/src/test/java/org/openscience/cdk/geometry/ZMatrixToolsTest.java"}, "test_case": {"identifier": "testZmatrixToCartesian_arraydouble_arrayint_arraydouble_arrayint_arraydouble_arrayint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testZmatrixToCartesian_arraydouble_arrayint_arraydouble_arrayint_arraydouble_arrayint() {\n        // acetaldehyde example from http://www.shodor.org/chemviz/zmatrices/babelex.html\n        int[] first_atoms = {0, 0, 0, 0, 3, 3, 3};\n        double[] distances = {0, 1.2, 1.1, 1.5, 1.1, 1.1, 1.1};\n        int[] second_atoms = {0, 0, 1, 1, 0, 0, 0};\n        double[] angles = {0, 0, 120, 120, 110, 110, 110};\n        int[] third_atoms = {0, 0, 0, 2, 1, 1, 1};\n        double[] dihedrals = {0, 0, 0, 180, 0, 120, -120};\n        Point3d points[] = ZMatrixTools.zmatrixToCartesian(distances, first_atoms, angles, second_atoms, dihedrals,\n                third_atoms);\n        Assert.assertEquals(-0.5500, points[2].x, 0.0001);\n        Assert.assertEquals(-1.3664, points[5].y, 0.0001);\n        Assert.assertEquals(-0.8952, points[6].z, 0.0001);\n    }", "signature": "void testZmatrixToCartesian_arraydouble_arrayint_arraydouble_arrayint_arraydouble_arrayint()", "full_signature": "@Test public void testZmatrixToCartesian_arraydouble_arrayint_arraydouble_arrayint_arraydouble_arrayint()", "class_method_signature": "ZMatrixToolsTest.testZmatrixToCartesian_arraydouble_arrayint_arraydouble_arrayint_arraydouble_arrayint()", "testcase": true, "constructor": false, "invocations": ["zmatrixToCartesian", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "ZMatrixTools", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "zmatrixToCartesian", "parameters": "(double[] distances, int[] first_atoms, double[] angles,\n            int[] second_atoms, double[] dihedrals, int[] third_atoms)", "modifiers": "public static", "return": "Point3d[]", "signature": "Point3d[] zmatrixToCartesian(double[] distances, int[] first_atoms, double[] angles,\n            int[] second_atoms, double[] dihedrals, int[] third_atoms)", "full_signature": "public static Point3d[] zmatrixToCartesian(double[] distances, int[] first_atoms, double[] angles,\n            int[] second_atoms, double[] dihedrals, int[] third_atoms)", "class_method_signature": "ZMatrixTools.zmatrixToCartesian(double[] distances, int[] first_atoms, double[] angles,\n            int[] second_atoms, double[] dihedrals, int[] third_atoms)", "testcase": false, "constructor": false}, {"identifier": "rotate", "parameters": "(Vector3d vector, Vector3d axis, double angle)", "modifiers": "private static", "return": "Vector3d", "signature": "Vector3d rotate(Vector3d vector, Vector3d axis, double angle)", "full_signature": "private static Vector3d rotate(Vector3d vector, Vector3d axis, double angle)", "class_method_signature": "ZMatrixTools.rotate(Vector3d vector, Vector3d axis, double angle)", "testcase": false, "constructor": false}], "file": "storage/io/src/main/java/org/openscience/cdk/geometry/ZMatrixTools.java"}, "focal_method": {"identifier": "zmatrixToCartesian", "parameters": "(double[] distances, int[] first_atoms, double[] angles,\n            int[] second_atoms, double[] dihedrals, int[] third_atoms)", "modifiers": "public static", "return": "Point3d[]", "body": "public static Point3d[] zmatrixToCartesian(double[] distances, int[] first_atoms, double[] angles,\n            int[] second_atoms, double[] dihedrals, int[] third_atoms) {\n        Point3d[] cartesianCoords = new Point3d[distances.length];\n        for (int index = 0; index < distances.length; index++) {\n            if (index == 0) {\n                cartesianCoords[index] = new Point3d(0d, 0d, 0d);\n            } else if (index == 1) {\n                cartesianCoords[index] = new Point3d(distances[1], 0d, 0d);\n            } else if (index == 2) {\n                cartesianCoords[index] = new Point3d(-Math.cos((angles[2] / 180) * Math.PI) * distances[2]\n                        + distances[1], Math.sin((angles[2] / 180) * Math.PI) * distances[2], 0d);\n                if (first_atoms[index] == 0) cartesianCoords[index].x = (cartesianCoords[index].x - distances[1]) * -1;\n            } else {\n                Vector3d cd = new Vector3d();\n                cd.sub(cartesianCoords[third_atoms[index]], cartesianCoords[second_atoms[index]]);\n\n                Vector3d bc = new Vector3d();\n                bc.sub(cartesianCoords[second_atoms[index]], cartesianCoords[first_atoms[index]]);\n\n                Vector3d n1 = new Vector3d();\n                n1.cross(cd, bc);\n\n                Vector3d n2 = rotate(n1, bc, -dihedrals[index]);\n                Vector3d ba = rotate(bc, n2, -angles[index]);\n\n                ba.normalize();\n                ba.scale(distances[index]);\n\n                Point3d result = new Point3d();\n                result.add(cartesianCoords[first_atoms[index]], ba);\n                cartesianCoords[index] = result;\n            }\n        }\n        return cartesianCoords;\n    }", "signature": "Point3d[] zmatrixToCartesian(double[] distances, int[] first_atoms, double[] angles,\n            int[] second_atoms, double[] dihedrals, int[] third_atoms)", "full_signature": "public static Point3d[] zmatrixToCartesian(double[] distances, int[] first_atoms, double[] angles,\n            int[] second_atoms, double[] dihedrals, int[] third_atoms)", "class_method_signature": "ZMatrixTools.zmatrixToCartesian(double[] distances, int[] first_atoms, double[] angles,\n            int[] second_atoms, double[] dihedrals, int[] third_atoms)", "testcase": false, "constructor": false, "invocations": ["cos", "sin", "sub", "sub", "cross", "rotate", "rotate", "normalize", "scale", "add"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}