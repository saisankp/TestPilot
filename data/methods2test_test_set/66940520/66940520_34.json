{"test_class": {"identifier": "AdxPeriodTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Period period;", "modifier": "private", "type": "Period", "declarator": "period", "var_name": "period"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/adx/AdxPeriodTest.java"}, "test_case": {"identifier": "testBadDuration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBadDuration()\n    {\n        try\n        {\n            period = AdxPeriod.parse( \"2014-01-01/P1\" );\n            fail( \"Should have thrown exception parsing 2015-01-01/P1\" );\n        } \n        catch ( Exception ex )\n        {\n            assertEquals( AdxException.class, ex.getClass() );\n        }\n    }", "signature": "void testBadDuration()", "full_signature": "@Test public void testBadDuration()", "class_method_signature": "AdxPeriodTest.testBadDuration()", "testcase": true, "constructor": false, "invocations": ["parse", "fail", "assertEquals", "getClass"]}, "focal_class": {"identifier": "AdxPeriod", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parse", "parameters": "( String periodString )", "modifiers": "public static", "return": "Period", "signature": "Period parse( String periodString )", "full_signature": "public static Period parse( String periodString )", "class_method_signature": "AdxPeriod.parse( String periodString )", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "( Period period )", "modifiers": "public static", "return": "String", "signature": "String serialize( Period period )", "full_signature": "public static String serialize( Period period )", "class_method_signature": "AdxPeriod.serialize( Period period )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/adx/AdxPeriod.java"}, "focal_method": {"identifier": "parse", "parameters": "( String periodString )", "modifiers": "public static", "return": "Period", "body": "public static Period parse( String periodString ) \n        throws AdxException\n    {\n        String[] tokens = periodString.split( \"/\" );\n        \n        if ( tokens.length != 2 )\n        {\n            throw new AdxException( periodString + \" not in valid <date>/<duration> format\" );\n        }\n\n        try\n        {\n            Period period;\n            PeriodType periodType = null;\n            Date startDate = DateUtils.getMediumDate( tokens[0] );\n            Calendar cal = Calendar.getInstance();\n            cal.setTime( startDate );\n            Duration duration = Duration.valueOf( tokens[1] );\n\n            switch ( duration )\n            {\n                case P1D:\n                    periodType = new DailyPeriodType();\n                    break;\n                case P7D:\n                    periodType = new WeeklyPeriodType();\n                    break;\n                case P1M:\n                    periodType = new MonthlyPeriodType();\n                    break;\n                case P2M:\n                    periodType = new BiMonthlyPeriodType();\n                    break;\n                case P3M:\n                    periodType = new QuarterlyPeriodType();\n                    break;\n                case P6M:\n                    switch ( cal.get( Calendar.MONTH ) )\n                    {\n                        case 0:\n                            periodType = new SixMonthlyPeriodType();\n                            break;\n                        case 6:\n                            periodType = new SixMonthlyAprilPeriodType();\n                            break;\n                        default:\n                            throw new AdxException( periodString + \"is invalid sixmonthly type\" );\n                    }\n                case P1Y:\n                    switch ( cal.get( Calendar.MONTH ) )\n                    {\n                        case 0:\n                            periodType = new YearlyPeriodType();\n                            break;\n                        case 3:\n                            periodType = new FinancialAprilPeriodType();\n                            break;\n                        case 6:\n                            periodType = new FinancialJulyPeriodType();\n                            break;\n                        case 9:\n                            periodType = new FinancialOctoberPeriodType();\n                            break;\n                        default:\n                            throw new AdxException( periodString + \"is invalid yearly type\" );\n                    }\n            }\n\n            if ( periodType != null )\n            {\n                period = periodType.createPeriod( startDate );\n            } \n            else\n            {\n                throw new AdxException( \"Failed to create period type from \" + duration );\n            }\n\n            return period;\n\n        }\n        catch ( IllegalArgumentException ex )\n        {\n            throw new AdxException( tokens[1] + \" is not a supported duration type\" );\n        }\n    }", "signature": "Period parse( String periodString )", "full_signature": "public static Period parse( String periodString )", "class_method_signature": "AdxPeriod.parse( String periodString )", "testcase": false, "constructor": false, "invocations": ["split", "getMediumDate", "getInstance", "setTime", "valueOf", "get", "get", "createPeriod"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}