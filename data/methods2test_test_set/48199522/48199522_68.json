{"test_class": {"identifier": "GoogleMonitoringIngesterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(GoogleMonitoringIngesterTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(GoogleMonitoringIngesterTest.class)", "var_name": "log"}, {"original_string": "private MacroBaseConf conf;", "modifier": "private", "type": "MacroBaseConf", "declarator": "conf", "var_name": "conf"}], "file": "contrib/src/test/java/macrobase/ingest/GoogleMonitoringIngesterTest.java"}, "test_case": {"identifier": "testProcessRecordMissingMetric", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void testProcessRecordMissingMetric() throws Exception {\n        Record record = new Record();\n        record.attributes = new TreeMap<>();\n        record.attributes.put(\"attr1\", \"foo\");\n        record.attributes.put(\"attr2\", \"bar\");\n        record.values = new HashMap<>();\n\n        GoogleMonitoringIngester ingester = new GoogleMonitoringIngester(conf);\n        ingester.processRecord(record);\n    }", "signature": "void testProcessRecordMissingMetric()", "full_signature": "@Test(expected = NullPointerException.class) public void testProcessRecordMissingMetric()", "class_method_signature": "GoogleMonitoringIngesterTest.testProcessRecordMissingMetric()", "testcase": true, "constructor": false, "invocations": ["put", "put", "processRecord"]}, "focal_class": {"identifier": "GoogleMonitoringIngester", "superclass": "extends DataIngester", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(GoogleMonitoringIngester.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(GoogleMonitoringIngester.class)", "var_name": "log"}, {"original_string": "public static final String GOOGLE_MONITORING_QUERIES = \"macrobase.loader.googlemonitoring.queries\";", "modifier": "public static final", "type": "String", "declarator": "GOOGLE_MONITORING_QUERIES = \"macrobase.loader.googlemonitoring.queries\"", "var_name": "GOOGLE_MONITORING_QUERIES"}, {"original_string": "public static final String GOOGLE_MONITORING_START_TIME = \"macrobase.loader.googlemonitoring.startTime\";", "modifier": "public static final", "type": "String", "declarator": "GOOGLE_MONITORING_START_TIME = \"macrobase.loader.googlemonitoring.startTime\"", "var_name": "GOOGLE_MONITORING_START_TIME"}, {"original_string": "public static final String GOOGLE_MONITORING_END_TIME = \"macrobase.loader.googlemonitoring.endTime\";", "modifier": "public static final", "type": "String", "declarator": "GOOGLE_MONITORING_END_TIME = \"macrobase.loader.googlemonitoring.endTime\"", "var_name": "GOOGLE_MONITORING_END_TIME"}, {"original_string": "private MBStream<Datum> dataStream;", "modifier": "private", "type": "MBStream<Datum>", "declarator": "dataStream", "var_name": "dataStream"}, {"original_string": "private boolean loaded = false;", "modifier": "private", "type": "boolean", "declarator": "loaded = false", "var_name": "loaded"}, {"original_string": "private int pointsAdded = 0;", "modifier": "private", "type": "int", "declarator": "pointsAdded = 0", "var_name": "pointsAdded"}, {"original_string": "private int skippedTimeSeries = 0;", "modifier": "private", "type": "int", "declarator": "skippedTimeSeries = 0", "var_name": "skippedTimeSeries"}, {"original_string": "private int skippedPoints = 0;", "modifier": "private", "type": "int", "declarator": "skippedPoints = 0", "var_name": "skippedPoints"}], "methods": [{"identifier": "GoogleMonitoringIngester", "parameters": "(MacroBaseConf conf)", "modifiers": "public", "return": "", "signature": " GoogleMonitoringIngester(MacroBaseConf conf)", "full_signature": "public  GoogleMonitoringIngester(MacroBaseConf conf)", "class_method_signature": "GoogleMonitoringIngester.GoogleMonitoringIngester(MacroBaseConf conf)", "testcase": false, "constructor": true}, {"identifier": "getStream", "parameters": "()", "modifiers": "@Override public", "return": "MBStream<Datum>", "signature": "MBStream<Datum> getStream()", "full_signature": "@Override public MBStream<Datum> getStream()", "class_method_signature": "GoogleMonitoringIngester.getStream()", "testcase": false, "constructor": false}, {"identifier": "getQueries", "parameters": "(String queryJson)", "modifiers": "", "return": "QueryConf", "signature": "QueryConf getQueries(String queryJson)", "full_signature": " QueryConf getQueries(String queryJson)", "class_method_signature": "GoogleMonitoringIngester.getQueries(String queryJson)", "testcase": false, "constructor": false}, {"identifier": "processResponse", "parameters": "(ListTimeSeriesResponse response, List<String> allMetrics,\n                         Map<String, Map<String, Record>> byTime)", "modifiers": "", "return": "void", "signature": "void processResponse(ListTimeSeriesResponse response, List<String> allMetrics,\n                         Map<String, Map<String, Record>> byTime)", "full_signature": " void processResponse(ListTimeSeriesResponse response, List<String> allMetrics,\n                         Map<String, Map<String, Record>> byTime)", "class_method_signature": "GoogleMonitoringIngester.processResponse(ListTimeSeriesResponse response, List<String> allMetrics,\n                         Map<String, Map<String, Record>> byTime)", "testcase": false, "constructor": false}, {"identifier": "processRecord", "parameters": "(Record rec)", "modifiers": "", "return": "Datum", "signature": "Datum processRecord(Record rec)", "full_signature": " Datum processRecord(Record rec)", "class_method_signature": "GoogleMonitoringIngester.processRecord(Record rec)", "testcase": false, "constructor": false}, {"identifier": "convertToStream", "parameters": "(Map<String, Map<String, Record>> byTime)", "modifiers": "", "return": "MBStream<Datum>", "signature": "MBStream<Datum> convertToStream(Map<String, Map<String, Record>> byTime)", "full_signature": " MBStream<Datum> convertToStream(Map<String, Map<String, Record>> byTime)", "class_method_signature": "GoogleMonitoringIngester.convertToStream(Map<String, Map<String, Record>> byTime)", "testcase": false, "constructor": false}, {"identifier": "buildClient", "parameters": "()", "modifiers": "private", "return": "Monitoring", "signature": "Monitoring buildClient()", "full_signature": "private Monitoring buildClient()", "class_method_signature": "GoogleMonitoringIngester.buildClient()", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/ingest/GoogleMonitoringIngester.java"}, "focal_method": {"identifier": "processRecord", "parameters": "(Record rec)", "modifiers": "", "return": "Datum", "body": "Datum processRecord(Record rec) throws Exception {\n        int idx = 0;\n        RealVector metricVec = new ArrayRealVector(metrics.size());\n        for (String metric : metrics) {\n            metricVec.setEntry(idx, rec.values.get(metric));\n            ++idx;\n        }\n\n        idx = 1;\n        List<Integer> attrList = new ArrayList<>(attributes.size());\n        for (String attr : attributes) {\n            attrList.add(conf.getEncoder().getIntegerEncoding(idx, rec.attributes.get(attr)));\n            ++idx;\n        }\n\n        return new Datum(attrList, metricVec);\n    }", "signature": "Datum processRecord(Record rec)", "full_signature": " Datum processRecord(Record rec)", "class_method_signature": "GoogleMonitoringIngester.processRecord(Record rec)", "testcase": false, "constructor": false, "invocations": ["size", "setEntry", "get", "size", "add", "getIntegerEncoding", "getEncoder", "get"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}