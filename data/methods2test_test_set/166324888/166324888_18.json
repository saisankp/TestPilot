{"test_class": {"identifier": "ImportMnemonicPhrasePresenterTest", "superclass": "extends BaseTestCase", "interfaces": "", "fields": [{"original_string": "@Mock\n    ImportMnemonicPhraseContract.View view;", "modifier": "@Mock", "type": "ImportMnemonicPhraseContract.View", "declarator": "view", "var_name": "view"}, {"original_string": "ImportMnemonicPhrasePresenter presenter;", "modifier": "", "type": "ImportMnemonicPhrasePresenter", "declarator": "presenter", "var_name": "presenter"}], "file": "wallet/src/test/java/com/platon/aton/component/ui/presenter/ImportMnemonicPhrasePresenterTest.java"}, "test_case": {"identifier": "importMnemonic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void importMnemonic(){\n        String str = \"a b c d e f g i q t h e\";\n        presenter.importMnemonic(str,\"Ella\",\"qq123456\",\"qq123456\", WalletType.ORDINARY_WALLET);\n    }", "signature": "void importMnemonic()", "full_signature": "@Test public void importMnemonic()", "class_method_signature": "ImportMnemonicPhrasePresenterTest.importMnemonic()", "testcase": true, "constructor": false, "invocations": ["importMnemonic"]}, "focal_class": {"identifier": "ImportMnemonicPhrasePresenter", "superclass": "extends BasePresenter<ImportMnemonicPhraseContract.View>", "interfaces": "implements ImportMnemonicPhraseContract.Presenter", "fields": [{"original_string": "private static final int MSG_OK = 1;", "modifier": "private static final", "type": "int", "declarator": "MSG_OK = 1", "var_name": "MSG_OK"}, {"original_string": "private static final int MSG_PASSWORD_FAILED = -1;", "modifier": "private static final", "type": "int", "declarator": "MSG_PASSWORD_FAILED = -1", "var_name": "MSG_PASSWORD_FAILED"}, {"original_string": "private static final int MSG_MNEMONIC_ERROR = -2;", "modifier": "private static final", "type": "int", "declarator": "MSG_MNEMONIC_ERROR = -2", "var_name": "MSG_MNEMONIC_ERROR"}, {"original_string": "private static final int MSG_WALLET_EXISTS = -3;", "modifier": "private static final", "type": "int", "declarator": "MSG_WALLET_EXISTS = -3", "var_name": "MSG_WALLET_EXISTS"}, {"original_string": "private Handler mHandler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            super.handleMessage(msg);\n            switch (msg.what) {\n                case MSG_OK:\n                    EventPublisher.getInstance().sendWalletNumberChangeEvent();\n                    dismissLoadingDialogImmediately();\n                    MainActivity.actionStart(currentActivity());\n                    currentActivity().finish();\n                    break;\n                case MSG_PASSWORD_FAILED:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.validPasswordError));\n                    break;\n                case MSG_MNEMONIC_ERROR:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.parsedError, string(R.string.mnemonicPhrase)));\n                    break;\n                case MSG_WALLET_EXISTS:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.walletExists));\n                    break;\n                default:\n                    break;\n            }\n        }\n    };", "modifier": "private", "type": "Handler", "declarator": "mHandler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            super.handleMessage(msg);\n            switch (msg.what) {\n                case MSG_OK:\n                    EventPublisher.getInstance().sendWalletNumberChangeEvent();\n                    dismissLoadingDialogImmediately();\n                    MainActivity.actionStart(currentActivity());\n                    currentActivity().finish();\n                    break;\n                case MSG_PASSWORD_FAILED:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.validPasswordError));\n                    break;\n                case MSG_MNEMONIC_ERROR:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.parsedError, string(R.string.mnemonicPhrase)));\n                    break;\n                case MSG_WALLET_EXISTS:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.walletExists));\n                    break;\n                default:\n                    break;\n            }\n        }\n    }", "var_name": "mHandler"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "ImportMnemonicPhrasePresenter.init()", "testcase": false, "constructor": false}, {"identifier": "parseQRCode", "parameters": "(String QRCode)", "modifiers": "@Override public", "return": "void", "signature": "void parseQRCode(String QRCode)", "full_signature": "@Override public void parseQRCode(String QRCode)", "class_method_signature": "ImportMnemonicPhrasePresenter.parseQRCode(String QRCode)", "testcase": false, "constructor": false}, {"identifier": "importMnemonic", "parameters": "(String phrase, String name, String password, String repeatPassword, @WalletType int walletType)", "modifiers": "@Override public", "return": "void", "signature": "void importMnemonic(String phrase, String name, String password, String repeatPassword, @WalletType int walletType)", "full_signature": "@Override public void importMnemonic(String phrase, String name, String password, String repeatPassword, @WalletType int walletType)", "class_method_signature": "ImportMnemonicPhrasePresenter.importMnemonic(String phrase, String name, String password, String repeatPassword, @WalletType int walletType)", "testcase": false, "constructor": false}, {"identifier": "isExists", "parameters": "(String walletName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isExists(String walletName)", "full_signature": "@Override public boolean isExists(String walletName)", "class_method_signature": "ImportMnemonicPhrasePresenter.isExists(String walletName)", "testcase": false, "constructor": false}, {"identifier": "loadDBWalletNumber", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void loadDBWalletNumber()", "full_signature": "@Override public void loadDBWalletNumber()", "class_method_signature": "ImportMnemonicPhrasePresenter.loadDBWalletNumber()", "testcase": false, "constructor": false}], "file": "wallet/src/main/java/com/platon/aton/component/ui/presenter/ImportMnemonicPhrasePresenter.java"}, "focal_method": {"identifier": "importMnemonic", "parameters": "(String phrase, String name, String password, String repeatPassword, @WalletType int walletType)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void importMnemonic(String phrase, String name, String password, String repeatPassword, @WalletType int walletType) {\n\n        if (isExists(name)) {\n            return;\n        }\n        if (!password.equals(repeatPassword)) {\n            showShortToast(string(R.string.passwordTips));\n            return;\n        }\n\n\n\n        showLoadingDialog();\n        new Thread() {\n            @Override\n            public void run() {\n                int code = WalletManager.getInstance().importMnemonic(phrase, name, password,walletType);\n                switch (code) {\n                    case WalletManager.CODE_OK:\n                        mHandler.sendEmptyMessage(MSG_OK);\n                        break;\n                    case WalletManager.CODE_ERROR_MNEMONIC:\n                        mHandler.sendEmptyMessage(MSG_MNEMONIC_ERROR);\n                        break;\n                    case WalletManager.CODE_ERROR_NAME:\n                        break;\n                    case WalletManager.CODE_ERROR_PASSWORD:\n                        mHandler.sendEmptyMessage(MSG_PASSWORD_FAILED);\n                        break;\n                    case WalletManager.CODE_ERROR_WALLET_EXISTS:\n                        mHandler.sendEmptyMessage(MSG_WALLET_EXISTS);\n                        break;\n                    case WalletManager.CODE_ERROR_UNKNOW:\n                        mHandler.sendEmptyMessage(MSG_PASSWORD_FAILED);\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }.start();\n    }", "signature": "void importMnemonic(String phrase, String name, String password, String repeatPassword, @WalletType int walletType)", "full_signature": "@Override public void importMnemonic(String phrase, String name, String password, String repeatPassword, @WalletType int walletType)", "class_method_signature": "ImportMnemonicPhrasePresenter.importMnemonic(String phrase, String name, String password, String repeatPassword, @WalletType int walletType)", "testcase": false, "constructor": false, "invocations": ["isExists", "equals", "showShortToast", "string", "showLoadingDialog", "start", "importMnemonic", "getInstance", "sendEmptyMessage", "sendEmptyMessage", "sendEmptyMessage", "sendEmptyMessage", "sendEmptyMessage"]}, "repository": {"repo_id": 166324888, "url": "https://github.com/PlatONnetwork/ATON-Android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 118901, "license": "licensed"}}