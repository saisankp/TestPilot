{"test_class": {"identifier": "CompositeRrdParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String[] FLAT_TEMPLATES = new String[]{\n            \"/subsystem=undertow\",\n            \"/subsystem=undertow/server=*\",\n            \"/subsystem=undertow/server=*/host=*\",\n            \"/subsystem=undertow/server=*/http-listener=*\",\n            \"/subsystem=undertow/server=*/https-listener=*\",\n            \"/subsystem=undertow/server=*/ajp-listener=*\"\n    };", "modifier": "private static final", "type": "String[]", "declarator": "FLAT_TEMPLATES = new String[]{\n            \"/subsystem=undertow\",\n            \"/subsystem=undertow/server=*\",\n            \"/subsystem=undertow/server=*/host=*\",\n            \"/subsystem=undertow/server=*/http-listener=*\",\n            \"/subsystem=undertow/server=*/https-listener=*\",\n            \"/subsystem=undertow/server=*/ajp-listener=*\"\n    }", "var_name": "FLAT_TEMPLATES"}, {"original_string": "private static final String[] RECURSIVE_TEMPLATES = Stream.concat(Arrays.stream(FLAT_TEMPLATES),\n            Arrays.stream(new String[]{\n                    // additional templates\n                    \"/subsystem=undertow/configuration=filter\",\n                    \"/subsystem=undertow/configuration=filter/error-page=*\",\n                    \"/subsystem=undertow/configuration=filter/expression-filter=*\",\n                    \"/subsystem=undertow/configuration=filter/gzip=*\",\n                    \"/subsystem=undertow/configuration=filter/mod-cluster=*\",\n                    \"/subsystem=undertow/configuration=filter/mod-cluster=*/balancer=*\",\n                    \"/subsystem=undertow/configuration=filter/mod-cluster=*/balancer=*/node=*\",\n                    \"/subsystem=undertow/configuration=filter/mod-cluster=*/balancer=*/node=*/context=*\",\n                    \"/subsystem=undertow/configuration=filter/mod-cluster=*/balancer=*/load-balancing-group=*\",\n                    \"/subsystem=undertow/configuration=filter/rewrite=*\",\n                    \"/subsystem=undertow/configuration=filter/connection-limit=*\",\n                    \"/subsystem=undertow/configuration=filter/response-header=*\",\n                    \"/subsystem=undertow/configuration=filter/custom-filter=*\",\n                    \"/subsystem=undertow/configuration=handler\",\n                    \"/subsystem=undertow/configuration=handler/file=*\",\n                    \"/subsystem=undertow/configuration=handler/reverse-proxy=*\",\n                    \"/subsystem=undertow/configuration=handler/reverse-proxy=*/host=*\",\n                    \"/subsystem=undertow/servlet-container=*\",\n                    \"/subsystem=undertow/servlet-container=*/welcome-file=*\",\n                    \"/subsystem=undertow/servlet-container=*/mime-mapping=*\",\n                    \"/subsystem=undertow/servlet-container=*/setting=jsp\",\n                    \"/subsystem=undertow/servlet-container=*/setting=persistent-sessions\",\n                    \"/subsystem=undertow/servlet-container=*/setting=session-cookie\",\n                    \"/subsystem=undertow/servlet-container=*/setting=websockets\",\n                    \"/subsystem=undertow/server=*/host=*/setting=access-log\",\n                    \"/subsystem=undertow/server=*/host=*/setting=single-sign-on\",\n                    \"/subsystem=undertow/server=*/host=*/location=*\",\n                    \"/subsystem=undertow/server=*/host=*/location=*/filter-ref=*\",\n                    \"/subsystem=undertow/server=*/host=*/filter-ref=*\",\n                    \"/subsystem=undertow/buffer-cache=*\",\n            })).toArray(String[]::new);", "modifier": "private static final", "type": "String[]", "declarator": "RECURSIVE_TEMPLATES = Stream.concat(Arrays.stream(FLAT_TEMPLATES),\n            Arrays.stream(new String[]{\n                    // additional templates\n                    \"/subsystem=undertow/configuration=filter\",\n                    \"/subsystem=undertow/configuration=filter/error-page=*\",\n                    \"/subsystem=undertow/configuration=filter/expression-filter=*\",\n                    \"/subsystem=undertow/configuration=filter/gzip=*\",\n                    \"/subsystem=undertow/configuration=filter/mod-cluster=*\",\n                    \"/subsystem=undertow/configuration=filter/mod-cluster=*/balancer=*\",\n                    \"/subsystem=undertow/configuration=filter/mod-cluster=*/balancer=*/node=*\",\n                    \"/subsystem=undertow/configuration=filter/mod-cluster=*/balancer=*/node=*/context=*\",\n                    \"/subsystem=undertow/configuration=filter/mod-cluster=*/balancer=*/load-balancing-group=*\",\n                    \"/subsystem=undertow/configuration=filter/rewrite=*\",\n                    \"/subsystem=undertow/configuration=filter/connection-limit=*\",\n                    \"/subsystem=undertow/configuration=filter/response-header=*\",\n                    \"/subsystem=undertow/configuration=filter/custom-filter=*\",\n                    \"/subsystem=undertow/configuration=handler\",\n                    \"/subsystem=undertow/configuration=handler/file=*\",\n                    \"/subsystem=undertow/configuration=handler/reverse-proxy=*\",\n                    \"/subsystem=undertow/configuration=handler/reverse-proxy=*/host=*\",\n                    \"/subsystem=undertow/servlet-container=*\",\n                    \"/subsystem=undertow/servlet-container=*/welcome-file=*\",\n                    \"/subsystem=undertow/servlet-container=*/mime-mapping=*\",\n                    \"/subsystem=undertow/servlet-container=*/setting=jsp\",\n                    \"/subsystem=undertow/servlet-container=*/setting=persistent-sessions\",\n                    \"/subsystem=undertow/servlet-container=*/setting=session-cookie\",\n                    \"/subsystem=undertow/servlet-container=*/setting=websockets\",\n                    \"/subsystem=undertow/server=*/host=*/setting=access-log\",\n                    \"/subsystem=undertow/server=*/host=*/setting=single-sign-on\",\n                    \"/subsystem=undertow/server=*/host=*/location=*\",\n                    \"/subsystem=undertow/server=*/host=*/location=*/filter-ref=*\",\n                    \"/subsystem=undertow/server=*/host=*/filter-ref=*\",\n                    \"/subsystem=undertow/buffer-cache=*\",\n            })).toArray(String[]::new)", "var_name": "RECURSIVE_TEMPLATES"}], "file": "meta/src/test/java/org/jboss/hal/meta/processing/CompositeRrdParserTest.java"}, "test_case": {"identifier": "parseRecursive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseRecursive() {\n        List<Operation> operations = Arrays.stream(FLAT_TEMPLATES)\n                .map(template -> new Operation.Builder(AddressTemplate.of(template).resolve(StatementContext.NOOP),\n                        READ_RESOURCE_DESCRIPTION_OPERATION\n                ).param(RECURSIVE, true).build())\n                .collect(toList());\n        Composite composite = new Composite(operations);\n\n        ModelNode modelNode = ExternalModelNode\n                .read(CompositeRrdParserTest.class.getResourceAsStream(\"composite_rrd_recursive_description_only.dmr\"));\n        RrdResult rrdResult = new CompositeRrdParser(composite).parse(new CompositeResult(modelNode));\n\n        // There must be no duplicates!\n        assertResourceDescriptions(rrdResult, 36, RECURSIVE_TEMPLATES);\n    }", "signature": "void parseRecursive()", "full_signature": "@Test public void parseRecursive()", "class_method_signature": "CompositeRrdParserTest.parseRecursive()", "testcase": true, "constructor": false, "invocations": ["collect", "map", "stream", "build", "param", "resolve", "of", "toList", "read", "getResourceAsStream", "parse", "assertResourceDescriptions"]}, "focal_class": {"identifier": "CompositeRrdParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CompositeRrdParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CompositeRrdParser.class)", "var_name": "logger"}, {"original_string": "private final Composite composite;", "modifier": "private final", "type": "Composite", "declarator": "composite", "var_name": "composite"}], "methods": [{"identifier": "CompositeRrdParser", "parameters": "(Composite composite)", "modifiers": "", "return": "", "signature": " CompositeRrdParser(Composite composite)", "full_signature": "  CompositeRrdParser(Composite composite)", "class_method_signature": "CompositeRrdParser.CompositeRrdParser(Composite composite)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(CompositeResult compositeResult)", "modifiers": "public", "return": "RrdResult", "signature": "RrdResult parse(CompositeResult compositeResult)", "full_signature": "public RrdResult parse(CompositeResult compositeResult)", "class_method_signature": "CompositeRrdParser.parse(CompositeResult compositeResult)", "testcase": false, "constructor": false}, {"identifier": "operationAddress", "parameters": "(int index)", "modifiers": "private", "return": "ResourceAddress", "signature": "ResourceAddress operationAddress(int index)", "full_signature": "private ResourceAddress operationAddress(int index)", "class_method_signature": "CompositeRrdParser.operationAddress(int index)", "testcase": false, "constructor": false}, {"identifier": "makeFqAddress", "parameters": "(ResourceAddress operationAddress, ResourceAddress resultAddress)", "modifiers": "@SuppressWarnings(\"DuplicateStringLiteralInspection\") private", "return": "ResourceAddress", "signature": "ResourceAddress makeFqAddress(ResourceAddress operationAddress, ResourceAddress resultAddress)", "full_signature": "@SuppressWarnings(\"DuplicateStringLiteralInspection\") private ResourceAddress makeFqAddress(ResourceAddress operationAddress, ResourceAddress resultAddress)", "class_method_signature": "CompositeRrdParser.makeFqAddress(ResourceAddress operationAddress, ResourceAddress resultAddress)", "testcase": false, "constructor": false}], "file": "meta/src/main/java/org/jboss/hal/meta/processing/CompositeRrdParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(CompositeResult compositeResult)", "modifiers": "public", "return": "RrdResult", "body": "public RrdResult parse(CompositeResult compositeResult) throws ParserException {\n        int index = 0;\n        RrdResult rrdResult = new RrdResult();\n\n        for (ModelNode step : compositeResult) {\n            if (step.isFailure()) {\n                throw new ParserException(\"Failed step 'step-\" + (index + 1) + \"' in composite rrd result: \" + step\n                        .getFailureDescription());\n            }\n\n            ModelNode stepResult = step.get(RESULT);\n\n            if (stepResult.getType() == ModelType.LIST) {\n                // multiple rrd results each with its own address\n                for (ModelNode modelNode : stepResult.asList()) {\n                    ModelNode result = modelNode.get(RESULT);\n                    if (result.isDefined()) {\n                        ResourceAddress operationAddress = operationAddress(index);\n                        ResourceAddress resultAddress = new ResourceAddress(modelNode.get(ADDRESS));\n                        ResourceAddress resolvedAddress = makeFqAddress(operationAddress, resultAddress);\n\n                        new SingleRrdParser(rrdResult).parse(resolvedAddress, result);\n                    }\n                }\n\n            } else {\n                // a single rrd result\n                ResourceAddress address = operationAddress(index);\n                new SingleRrdParser(rrdResult).parse(address, stepResult);\n            }\n            index++;\n        }\n\n        return rrdResult;\n    }", "signature": "RrdResult parse(CompositeResult compositeResult)", "full_signature": "public RrdResult parse(CompositeResult compositeResult)", "class_method_signature": "CompositeRrdParser.parse(CompositeResult compositeResult)", "testcase": false, "constructor": false, "invocations": ["isFailure", "getFailureDescription", "get", "getType", "asList", "get", "isDefined", "operationAddress", "get", "makeFqAddress", "parse", "operationAddress", "parse"]}, "repository": {"repo_id": 38317187, "url": "https://github.com/hal/console", "stars": 34, "created": "6/30/2015 3:26:19 PM +00:00", "updates": "2020-01-26T16:25:43+00:00", "fork": "False", "license": "licensed"}}