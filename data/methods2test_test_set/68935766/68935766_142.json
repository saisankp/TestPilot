{"test_class": {"identifier": "ReadersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "StringReader reader = new StringReader(\"abcd\");", "modifier": "", "type": "StringReader", "declarator": "reader = new StringReader(\"abcd\")", "var_name": "reader"}], "file": "commons/src/test/java/com/karuslabs/commons/command/ReadersTest.java"}, "test_case": {"identifier": "until_predicate", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void until_predicate() {\n        assertEquals(\"abc\", Readers.until(reader, val -> val == 'd'));\n    }", "signature": "void until_predicate()", "full_signature": "@Test void until_predicate()", "class_method_signature": "ReadersTest.until_predicate()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "until"]}, "focal_class": {"identifier": "Readers", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Pattern COMMA = Pattern.compile(\"([,]\\\\s*)\");", "modifier": "public static final", "type": "Pattern", "declarator": "COMMA = Pattern.compile(\"([,]\\\\s*)\")", "var_name": "COMMA"}], "methods": [{"identifier": "until", "parameters": "(StringReader reader, char delimiter)", "modifiers": "public static", "return": "String", "signature": "String until(StringReader reader, char delimiter)", "full_signature": "public static String until(StringReader reader, char delimiter)", "class_method_signature": "Readers.until(StringReader reader, char delimiter)", "testcase": false, "constructor": false}, {"identifier": "until", "parameters": "(StringReader reader, char... delimiters)", "modifiers": "public static", "return": "String", "signature": "String until(StringReader reader, char... delimiters)", "full_signature": "public static String until(StringReader reader, char... delimiters)", "class_method_signature": "Readers.until(StringReader reader, char... delimiters)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(char[] characters, char value)", "modifiers": "private static", "return": "boolean", "signature": "boolean contains(char[] characters, char value)", "full_signature": "private static boolean contains(char[] characters, char value)", "class_method_signature": "Readers.contains(char[] characters, char value)", "testcase": false, "constructor": false}, {"identifier": "until", "parameters": "(StringReader reader, Predicate<Character> end)", "modifiers": "public static", "return": "String", "signature": "String until(StringReader reader, Predicate<Character> end)", "full_signature": "public static String until(StringReader reader, Predicate<Character> end)", "class_method_signature": "Readers.until(StringReader reader, Predicate<Character> end)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/command/Readers.java"}, "focal_method": {"identifier": "until", "parameters": "(StringReader reader, char delimiter)", "modifiers": "public static", "return": "String", "body": "public static String until(StringReader reader, char delimiter) {\n        var start = reader.getCursor();\n        while (reader.canRead() && reader.peek() != delimiter) {\n            reader.skip();\n        }\n        \n        return reader.getString().substring(start, reader.getCursor());\n    }", "signature": "String until(StringReader reader, char delimiter)", "full_signature": "public static String until(StringReader reader, char delimiter)", "class_method_signature": "Readers.until(StringReader reader, char delimiter)", "testcase": false, "constructor": false, "invocations": ["getCursor", "canRead", "peek", "skip", "substring", "getString", "getCursor"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}