{"test_class": {"identifier": "JunctionTreeBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-beliefs/src/test/java/org/drools/beliefs/bayes/JunctionTreeBuilderTest.java"}, "test_case": {"identifier": "testFullExample2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFullExample2() {\n        // Bayesian Networks -  A Self-contained introduction with implementation remarks\n        // http://www.mathcs.emory.edu/~whalen/Papers/BNs/Intros/BayesianNetworksTutorial.pdf\n        Graph<BayesVariable> graph = new BayesNetwork();\n        GraphNode xElectricity = addNode(graph);   // 0\n        GraphNode xTelecom = addNode(graph);       // 1\n        GraphNode xRail = addNode(graph);          // 2\n        GraphNode xAirTravel = addNode(graph);     // 3\n        GraphNode xTransportation = addNode(graph);// 4\n        GraphNode xUtilities = addNode(graph);     // 5\n        GraphNode xUSBanks = addNode(graph);       // 6\n        GraphNode xUSStocks = addNode(graph);      // 7\n\n        connectParentToChildren( xElectricity, xRail, xAirTravel, xUtilities, xTelecom );\n        connectParentToChildren( xTelecom, xUtilities, xUSBanks );\n        connectParentToChildren( xRail, xTransportation );\n        connectParentToChildren( xAirTravel, xTransportation );\n        connectParentToChildren( xUtilities, xUSStocks );\n        connectParentToChildren( xUSBanks, xUSStocks );\n        connectParentToChildren( xTransportation, xUSStocks );\n\n\n        OpenBitSet clique1 = bitSet(\"11110000\"); // Utilities, Transportation, USBanks, UStocks\n        OpenBitSet clique2 = bitSet(\"01110001\"); // Electricity, Transportation, Utilities, USBanks\n        OpenBitSet clique3 = bitSet(\"01100011\"); // Electricity, Telecom, Utilities, USBanks\n        OpenBitSet clique4 = bitSet(\"00011101\"); // Electricity, Rail, AirTravel, Transportation\n\n        OpenBitSet clique1And2 = bitSet(\"01110000\"); // Utilities, Transportation, USBanks\n        OpenBitSet clique2And3 = bitSet(\"01100001\"); // Electricity, Utilities, USBanks\n        OpenBitSet clique2And4 = bitSet(\"00010001\"); // Electricity, Transportation\n\n\n        xElectricity.setContent(new BayesVariable<String>(\"Electricity\", xElectricity.getId(),\n                                                          new String[]{\"Working\", \"Reduced\", \"NotWorking\"}, new double[][]{{0.6, 0.3, 0.099}}));\n\n        xTelecom.setContent(new BayesVariable<String>(\"Telecom\", xTelecom.getId(),\n                                                      new String[]{\"Working\", \"Reduced\", \"NotWorking\"}, new double[][]{{0.544, 0.304, 0.151}}));\n\n        xRail.setContent(new BayesVariable<String>(\"Rail\", xRail.getId(),\n                                                   new String[]{\"Working\", \"Reduced\", \"NotWorking\"}, new double[][]{{0.579, 0.230, 0.190}}));\n\n        xAirTravel.setContent(new BayesVariable<String>(\"AirTravel\", xAirTravel.getId(),\n                                                        new String[]{\"Working\", \"Reduced\", \"NotWorking\"}, new double[][]{{0.449, 0.330, 0.219}}));\n\n        xTransportation.setContent(new BayesVariable<String>(\"Transportation\", xTransportation.getId(),\n                                                             new String[]{\"Working\", \"Moderate\", \"Severe\", \"Failure\"}, new double[][]{{0.658, 0.167, 0.097, 0.077}}));\n\n        xUtilities.setContent(new BayesVariable<String>(\"Utilities\", xUtilities.getId(),\n                                                        new String[]{\"Working\", \"Moderate\", \"Severe\", \"Failure\"}, new double[][]{{0.541, 0.272, 0.097, 0.088}}));\n\n        xUSBanks.setContent(new BayesVariable<String>(\"USBanks\", xUSBanks.getId(),\n                                                      new String[]{\"Working\", \"Reduced\", \"NotWorking\"}, new double[][]{{0.488, 0.370, 0.141}}));\n\n        xUSStocks.setContent(new BayesVariable<String>(\"USStocks\", xUSStocks.getId(),\n                                                       new String[]{\"Up\", \"Down\", \"Crash\"}, new double[][]{{0.433, 0.386, 0.179}}));\n\n        JunctionTreeBuilder jtBuilder = new JunctionTreeBuilder( graph );\n        JunctionTreeClique root = jtBuilder.build(false).getRoot();\n\n        // clique1\n        assertEquals( clique1, root.getBitSet() );\n        assertEquals( 1, root.getChildren().size() );\n\n        // clique2\n        JunctionTreeSeparator sep =  root.getChildren().get(0);\n        assertEquals( clique1And2, sep.getBitSet() );\n        JunctionTreeClique jtNode2 = sep.getChild();\n        assertEquals( clique1, sep.getParent().getBitSet() );\n        assertEquals( clique2, jtNode2.getBitSet() );\n        assertEquals(2, jtNode2.getChildren().size());\n\n        // clique3\n        assertSame( sep, jtNode2.getParentSeparator() );\n        sep =  jtNode2.getChildren().get(0);\n        assertEquals( clique2And3, sep.getBitSet() );\n        JunctionTreeClique jtNode3 = sep.getChild();\n        assertEquals( clique2, sep.getParent().getBitSet() );\n        assertEquals( clique3, jtNode3.getBitSet() );\n        assertEquals(0, jtNode3.getChildren().size());\n\n        // clique4\n        sep =  jtNode2.getChildren().get(1);\n        assertEquals( clique2And4, sep.getBitSet() );\n        JunctionTreeClique jtNode4 = sep.getChild();\n        assertEquals( clique2, sep.getParent().getBitSet() );\n        assertEquals( clique4, jtNode4.getBitSet() );\n        assertEquals(0, jtNode4.getChildren().size());\n    }", "signature": "void testFullExample2()", "full_signature": "@Test public void testFullExample2()", "class_method_signature": "JunctionTreeBuilderTest.testFullExample2()", "testcase": true, "constructor": false, "invocations": ["addNode", "addNode", "addNode", "addNode", "addNode", "addNode", "addNode", "addNode", "connectParentToChildren", "connectParentToChildren", "connectParentToChildren", "connectParentToChildren", "connectParentToChildren", "connectParentToChildren", "connectParentToChildren", "bitSet", "bitSet", "bitSet", "bitSet", "bitSet", "bitSet", "bitSet", "setContent", "getId", "setContent", "getId", "setContent", "getId", "setContent", "getId", "setContent", "getId", "setContent", "getId", "setContent", "getId", "setContent", "getId", "getRoot", "build", "assertEquals", "getBitSet", "assertEquals", "size", "getChildren", "get", "getChildren", "assertEquals", "getBitSet", "getChild", "assertEquals", "getBitSet", "getParent", "assertEquals", "getBitSet", "assertEquals", "size", "getChildren", "assertSame", "getParentSeparator", "get", "getChildren", "assertEquals", "getBitSet", "getChild", "assertEquals", "getBitSet", "getParent", "assertEquals", "getBitSet", "assertEquals", "size", "getChildren", "get", "getChildren", "assertEquals", "getBitSet", "getChild", "assertEquals", "getBitSet", "getParent", "assertEquals", "getBitSet", "assertEquals", "size", "getChildren"]}, "focal_class": {"identifier": "JunctionTreeBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Graph<BayesVariable> graph;", "modifier": "private", "type": "Graph<BayesVariable>", "declarator": "graph", "var_name": "graph"}, {"original_string": "private boolean[][]          adjacencyMatrix;", "modifier": "private", "type": "boolean[][]", "declarator": "adjacencyMatrix", "var_name": "adjacencyMatrix"}], "methods": [{"identifier": "getGraph", "parameters": "()", "modifiers": "public", "return": "Graph<BayesVariable>", "signature": "Graph<BayesVariable> getGraph()", "full_signature": "public Graph<BayesVariable> getGraph()", "class_method_signature": "JunctionTreeBuilder.getGraph()", "testcase": false, "constructor": false}, {"identifier": "JunctionTreeBuilder", "parameters": "(Graph<BayesVariable> graph)", "modifiers": "public", "return": "", "signature": " JunctionTreeBuilder(Graph<BayesVariable> graph)", "full_signature": "public  JunctionTreeBuilder(Graph<BayesVariable> graph)", "class_method_signature": "JunctionTreeBuilder.JunctionTreeBuilder(Graph<BayesVariable> graph)", "testcase": false, "constructor": true}, {"identifier": "build", "parameters": "()", "modifiers": "public", "return": "JunctionTree", "signature": "JunctionTree build()", "full_signature": "public JunctionTree build()", "class_method_signature": "JunctionTreeBuilder.build()", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(boolean init)", "modifiers": "public", "return": "JunctionTree", "signature": "JunctionTree build(boolean init)", "full_signature": "public JunctionTree build(boolean init)", "class_method_signature": "JunctionTreeBuilder.build(boolean init)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(Resource resource, String namespace, String name)", "modifiers": "public", "return": "JunctionTree", "signature": "JunctionTree build(Resource resource, String namespace, String name)", "full_signature": "public JunctionTree build(Resource resource, String namespace, String name)", "class_method_signature": "JunctionTreeBuilder.build(Resource resource, String namespace, String name)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(Resource resource, String namespace, String name, boolean init)", "modifiers": "public", "return": "JunctionTree", "signature": "JunctionTree build(Resource resource, String namespace, String name, boolean init)", "full_signature": "public JunctionTree build(Resource resource, String namespace, String name, boolean init)", "class_method_signature": "JunctionTreeBuilder.build(Resource resource, String namespace, String name, boolean init)", "testcase": false, "constructor": false}, {"identifier": "moralize", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void moralize()", "full_signature": "public void moralize()", "class_method_signature": "JunctionTreeBuilder.moralize()", "testcase": false, "constructor": false}, {"identifier": "moralize", "parameters": "(GraphNode<BayesVariable> v, GraphNode v1)", "modifiers": "public", "return": "void", "signature": "void moralize(GraphNode<BayesVariable> v, GraphNode v1)", "full_signature": "public void moralize(GraphNode<BayesVariable> v, GraphNode v1)", "class_method_signature": "JunctionTreeBuilder.moralize(GraphNode<BayesVariable> v, GraphNode v1)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(boolean[][] adjMatrix, int v1, int v2)", "modifiers": "public static", "return": "void", "signature": "void connect(boolean[][] adjMatrix, int v1, int v2)", "full_signature": "public static void connect(boolean[][] adjMatrix, int v1, int v2)", "class_method_signature": "JunctionTreeBuilder.connect(boolean[][] adjMatrix, int v1, int v2)", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "(boolean[][] adjMatrix, int v1, int v2)", "modifiers": "public static", "return": "void", "signature": "void disconnect(boolean[][] adjMatrix, int v1, int v2)", "full_signature": "public static void disconnect(boolean[][] adjMatrix, int v1, int v2)", "class_method_signature": "JunctionTreeBuilder.disconnect(boolean[][] adjMatrix, int v1, int v2)", "testcase": false, "constructor": false}, {"identifier": "triangulate", "parameters": "()", "modifiers": "public", "return": "List<OpenBitSet>", "signature": "List<OpenBitSet> triangulate()", "full_signature": "public List<OpenBitSet> triangulate()", "class_method_signature": "JunctionTreeBuilder.triangulate()", "testcase": false, "constructor": false}, {"identifier": "eliminateVertex", "parameters": "(PriorityQueue<EliminationCandidate> p, Map<Integer, EliminationCandidate> elmVertMap, boolean[][] clonedAdjMatrix, boolean[] adjList, Set<Integer> verticesToUpdate, EliminationCandidate v)", "modifiers": "public", "return": "void", "signature": "void eliminateVertex(PriorityQueue<EliminationCandidate> p, Map<Integer, EliminationCandidate> elmVertMap, boolean[][] clonedAdjMatrix, boolean[] adjList, Set<Integer> verticesToUpdate, EliminationCandidate v)", "full_signature": "public void eliminateVertex(PriorityQueue<EliminationCandidate> p, Map<Integer, EliminationCandidate> elmVertMap, boolean[][] clonedAdjMatrix, boolean[] adjList, Set<Integer> verticesToUpdate, EliminationCandidate v)", "class_method_signature": "JunctionTreeBuilder.eliminateVertex(PriorityQueue<EliminationCandidate> p, Map<Integer, EliminationCandidate> elmVertMap, boolean[][] clonedAdjMatrix, boolean[] adjList, Set<Integer> verticesToUpdate, EliminationCandidate v)", "testcase": false, "constructor": false}, {"identifier": "createClique", "parameters": "(int v, boolean[][] clonedAdjMatrix, Set<Integer> verticesToUpdate, boolean[] adjList)", "modifiers": "public", "return": "void", "signature": "void createClique(int v, boolean[][] clonedAdjMatrix, Set<Integer> verticesToUpdate, boolean[] adjList)", "full_signature": "public void createClique(int v, boolean[][] clonedAdjMatrix, Set<Integer> verticesToUpdate, boolean[] adjList)", "class_method_signature": "JunctionTreeBuilder.createClique(int v, boolean[][] clonedAdjMatrix, Set<Integer> verticesToUpdate, boolean[] adjList)", "testcase": false, "constructor": false}, {"identifier": "getRelatedVerticesToUpdate", "parameters": "(int v, boolean[][] clonedAdjMatrix, Set<Integer> verticesToUpdate, int i)", "modifiers": "private", "return": "void", "signature": "void getRelatedVerticesToUpdate(int v, boolean[][] clonedAdjMatrix, Set<Integer> verticesToUpdate, int i)", "full_signature": "private void getRelatedVerticesToUpdate(int v, boolean[][] clonedAdjMatrix, Set<Integer> verticesToUpdate, int i)", "class_method_signature": "JunctionTreeBuilder.getRelatedVerticesToUpdate(int v, boolean[][] clonedAdjMatrix, Set<Integer> verticesToUpdate, int i)", "testcase": false, "constructor": false}, {"identifier": "updateCliques", "parameters": "(List<OpenBitSet> cliques, OpenBitSet newClique)", "modifiers": "public static", "return": "void", "signature": "void updateCliques(List<OpenBitSet> cliques, OpenBitSet newClique)", "full_signature": "public static void updateCliques(List<OpenBitSet> cliques, OpenBitSet newClique)", "class_method_signature": "JunctionTreeBuilder.updateCliques(List<OpenBitSet> cliques, OpenBitSet newClique)", "testcase": false, "constructor": false}, {"identifier": "getAdjacencyMatrix", "parameters": "()", "modifiers": "public", "return": "boolean[][]", "signature": "boolean[][] getAdjacencyMatrix()", "full_signature": "public boolean[][] getAdjacencyMatrix()", "class_method_signature": "JunctionTreeBuilder.getAdjacencyMatrix()", "testcase": false, "constructor": false}, {"identifier": "cloneAdjacencyMarix", "parameters": "(boolean[][] src)", "modifiers": "public static", "return": "boolean[][]", "signature": "boolean[][] cloneAdjacencyMarix(boolean[][] src)", "full_signature": "public static boolean[][] cloneAdjacencyMarix(boolean[][] src)", "class_method_signature": "JunctionTreeBuilder.cloneAdjacencyMarix(boolean[][] src)", "testcase": false, "constructor": false}, {"identifier": "junctionTree", "parameters": "(List<OpenBitSet> cliques, boolean init)", "modifiers": "public", "return": "JunctionTree", "signature": "JunctionTree junctionTree(List<OpenBitSet> cliques, boolean init)", "full_signature": "public JunctionTree junctionTree(List<OpenBitSet> cliques, boolean init)", "class_method_signature": "JunctionTreeBuilder.junctionTree(List<OpenBitSet> cliques, boolean init)", "testcase": false, "constructor": false}, {"identifier": "junctionTree", "parameters": "(Resource resource, String namespace, String name, List<OpenBitSet> cliques, boolean init)", "modifiers": "public", "return": "JunctionTree", "signature": "JunctionTree junctionTree(Resource resource, String namespace, String name, List<OpenBitSet> cliques, boolean init)", "full_signature": "public JunctionTree junctionTree(Resource resource, String namespace, String name, List<OpenBitSet> cliques, boolean init)", "class_method_signature": "JunctionTreeBuilder.junctionTree(Resource resource, String namespace, String name, List<OpenBitSet> cliques, boolean init)", "testcase": false, "constructor": false}, {"identifier": "mergeGraphs", "parameters": "(SeparatorSet[][][] graphs, SeparatorSet separatorSet)", "modifiers": "public", "return": "void", "signature": "void mergeGraphs(SeparatorSet[][][] graphs, SeparatorSet separatorSet)", "full_signature": "public void mergeGraphs(SeparatorSet[][][] graphs, SeparatorSet separatorSet)", "class_method_signature": "JunctionTreeBuilder.mergeGraphs(SeparatorSet[][][] graphs, SeparatorSet separatorSet)", "testcase": false, "constructor": false}, {"identifier": "createJunctionTreeGraph", "parameters": "(SeparatorSet[][] sepGraph, JunctionTreeClique parent, JunctionTreeClique[] jtNodes, JunctionTreeSeparator[] jtSeps, int i)", "modifiers": "public", "return": "int", "signature": "int createJunctionTreeGraph(SeparatorSet[][] sepGraph, JunctionTreeClique parent, JunctionTreeClique[] jtNodes, JunctionTreeSeparator[] jtSeps, int i)", "full_signature": "public int createJunctionTreeGraph(SeparatorSet[][] sepGraph, JunctionTreeClique parent, JunctionTreeClique[] jtNodes, JunctionTreeSeparator[] jtSeps, int i)", "class_method_signature": "JunctionTreeBuilder.createJunctionTreeGraph(SeparatorSet[][] sepGraph, JunctionTreeClique parent, JunctionTreeClique[] jtNodes, JunctionTreeSeparator[] jtSeps, int i)", "testcase": false, "constructor": false}, {"identifier": "mapNodeToCliqueFamily", "parameters": "(OpenBitSet[] varNodeToCliques, JunctionTreeClique[] jtNodes)", "modifiers": "public", "return": "void", "signature": "void mapNodeToCliqueFamily(OpenBitSet[] varNodeToCliques, JunctionTreeClique[] jtNodes)", "full_signature": "public void mapNodeToCliqueFamily(OpenBitSet[] varNodeToCliques, JunctionTreeClique[] jtNodes)", "class_method_signature": "JunctionTreeBuilder.mapNodeToCliqueFamily(OpenBitSet[] varNodeToCliques, JunctionTreeClique[] jtNodes)", "testcase": false, "constructor": false}, {"identifier": "mapVarNodeToCliques", "parameters": "(OpenBitSet[] nodeToCliques, int id, OpenBitSet clique)", "modifiers": "public", "return": "void", "signature": "void mapVarNodeToCliques(OpenBitSet[] nodeToCliques, int id, OpenBitSet clique)", "full_signature": "public void mapVarNodeToCliques(OpenBitSet[] nodeToCliques, int id, OpenBitSet clique)", "class_method_signature": "JunctionTreeBuilder.mapVarNodeToCliques(OpenBitSet[] nodeToCliques, int id, OpenBitSet clique)", "testcase": false, "constructor": false}, {"identifier": "getAdjacentVertices", "parameters": "(boolean[][] adjacencyMatrix, int i)", "modifiers": "public static", "return": "List<Integer>", "signature": "List<Integer> getAdjacentVertices(boolean[][] adjacencyMatrix, int i)", "full_signature": "public static List<Integer> getAdjacentVertices(boolean[][] adjacencyMatrix, int i)", "class_method_signature": "JunctionTreeBuilder.getAdjacentVertices(boolean[][] adjacencyMatrix, int i)", "testcase": false, "constructor": false}], "file": "drools-beliefs/src/main/java/org/drools/beliefs/bayes/JunctionTreeBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "()", "modifiers": "public", "return": "JunctionTree", "body": "public JunctionTree build() {\n        return build(true);\n    }", "signature": "JunctionTree build()", "full_signature": "public JunctionTree build()", "class_method_signature": "JunctionTreeBuilder.build()", "testcase": false, "constructor": false, "invocations": ["build"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}