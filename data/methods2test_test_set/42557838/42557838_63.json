{"test_class": {"identifier": "FileSessionStorageTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String VALID_SESSION_ID = \"sessionidsjdfhgskldjfsghldkfjsgg\";", "modifier": "private static final", "type": "String", "declarator": "VALID_SESSION_ID = \"sessionidsjdfhgskldjfsghldkfjsgg\"", "var_name": "VALID_SESSION_ID"}, {"original_string": "private static final String ILLEGAL_SESSION_ID = \"////////////////////////////////\";", "modifier": "private static final", "type": "String", "declarator": "ILLEGAL_SESSION_ID = \"////////////////////////////////\"", "var_name": "ILLEGAL_SESSION_ID"}, {"original_string": "private static FileSessionStorage fileSessionStorage;", "modifier": "private static", "type": "FileSessionStorage", "declarator": "fileSessionStorage", "var_name": "fileSessionStorage"}, {"original_string": "private static String workingDirectory;", "modifier": "private static", "type": "String", "declarator": "workingDirectory", "var_name": "workingDirectory"}], "file": "http/src/test/java/ro/polak/http/session/storage/FileSessionStorageTest.java"}, "test_case": {"identifier": "shouldValidateSessionNameLength", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void shouldValidateSessionNameLength() throws IOException {\n        HttpSessionImpl sessionWrapper = new HttpSessionImpl(\"abcX8\", System.currentTimeMillis());\n        fileSessionStorage.persistSession(sessionWrapper);\n    }", "signature": "void shouldValidateSessionNameLength()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void shouldValidateSessionNameLength()", "class_method_signature": "FileSessionStorageTest.shouldValidateSessionNameLength()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "persistSession"]}, "focal_class": {"identifier": "FileSessionStorage", "superclass": "", "interfaces": "implements SessionStorage", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(FileSessionStorage.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(FileSessionStorage.class.getName())", "var_name": "LOGGER"}, {"original_string": "private static final String SESSION_FILE_SUFFIX = \"_session\";", "modifier": "private static final", "type": "String", "declarator": "SESSION_FILE_SUFFIX = \"_session\"", "var_name": "SESSION_FILE_SUFFIX"}, {"original_string": "private static final Pattern SESSION_ID_PATTERN = Pattern.compile(\"[a-z]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "SESSION_ID_PATTERN = Pattern.compile(\"[a-z]+\")", "var_name": "SESSION_ID_PATTERN"}, {"original_string": "private static final int SESSION_ID_EXPECTED_LENGTH = 32;", "modifier": "private static final", "type": "int", "declarator": "SESSION_ID_EXPECTED_LENGTH = 32", "var_name": "SESSION_ID_EXPECTED_LENGTH"}, {"original_string": "private final String tempPath;", "modifier": "private final", "type": "String", "declarator": "tempPath", "var_name": "tempPath"}], "methods": [{"identifier": "FileSessionStorage", "parameters": "(final String tempPath)", "modifiers": "public", "return": "", "signature": " FileSessionStorage(final String tempPath)", "full_signature": "public  FileSessionStorage(final String tempPath)", "class_method_signature": "FileSessionStorage.FileSessionStorage(final String tempPath)", "testcase": false, "constructor": true}, {"identifier": "persistSession", "parameters": "(final HttpSessionImpl session)", "modifiers": "@Override public", "return": "void", "signature": "void persistSession(final HttpSessionImpl session)", "full_signature": "@Override public void persistSession(final HttpSessionImpl session)", "class_method_signature": "FileSessionStorage.persistSession(final HttpSessionImpl session)", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "(final String id)", "modifiers": "@Override public", "return": "HttpSessionImpl", "signature": "HttpSessionImpl getSession(final String id)", "full_signature": "@Override public HttpSessionImpl getSession(final String id)", "class_method_signature": "FileSessionStorage.getSession(final String id)", "testcase": false, "constructor": false}, {"identifier": "isSessionIdValid", "parameters": "(final String id)", "modifiers": "private", "return": "boolean", "signature": "boolean isSessionIdValid(final String id)", "full_signature": "private boolean isSessionIdValid(final String id)", "class_method_signature": "FileSessionStorage.isSessionIdValid(final String id)", "testcase": false, "constructor": false}, {"identifier": "removeSession", "parameters": "(final HttpSessionImpl session)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeSession(final HttpSessionImpl session)", "full_signature": "@Override public boolean removeSession(final HttpSessionImpl session)", "class_method_signature": "FileSessionStorage.removeSession(final HttpSessionImpl session)", "testcase": false, "constructor": false}, {"identifier": "readSession", "parameters": "(final String id, final File file)", "modifiers": "private", "return": "HttpSessionImpl", "signature": "HttpSessionImpl readSession(final String id, final File file)", "full_signature": "private HttpSessionImpl readSession(final String id, final File file)", "class_method_signature": "FileSessionStorage.readSession(final String id, final File file)", "testcase": false, "constructor": false}, {"identifier": "writeSession", "parameters": "(final HttpSessionImpl session, final File file)", "modifiers": "private", "return": "void", "signature": "void writeSession(final HttpSessionImpl session, final File file)", "full_signature": "private void writeSession(final HttpSessionImpl session, final File file)", "class_method_signature": "FileSessionStorage.writeSession(final HttpSessionImpl session, final File file)", "testcase": false, "constructor": false}, {"identifier": "getSessionStoragePath", "parameters": "(final String id)", "modifiers": "private", "return": "String", "signature": "String getSessionStoragePath(final String id)", "full_signature": "private String getSessionStoragePath(final String id)", "class_method_signature": "FileSessionStorage.getSessionStoragePath(final String id)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/session/storage/FileSessionStorage.java"}, "focal_method": {"identifier": "persistSession", "parameters": "(final HttpSessionImpl session)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void persistSession(final HttpSessionImpl session) throws IOException {\n        if (!isSessionIdValid(session.getId())) {\n            throw new IllegalArgumentException(\"Session ID can not be empty and must be composed of 32 characters\");\n        }\n\n        File file = new File(getSessionStoragePath(session.getId()));\n        if (!file.exists() && !file.createNewFile()) {\n            throw new IOException(\"Unable to create new file \" + file.getAbsolutePath());\n        }\n        writeSession(session, file);\n\n        LOGGER.log(Level.FINE, \"Persisted session {0} in {1}\",\n                new Object[]{session.getId(), tempPath});\n    }", "signature": "void persistSession(final HttpSessionImpl session)", "full_signature": "@Override public void persistSession(final HttpSessionImpl session)", "class_method_signature": "FileSessionStorage.persistSession(final HttpSessionImpl session)", "testcase": false, "constructor": false, "invocations": ["isSessionIdValid", "getId", "getSessionStoragePath", "getId", "exists", "createNewFile", "getAbsolutePath", "writeSession", "log", "getId"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}