{"test_class": {"identifier": "NativeTypesTest", "superclass": "", "interfaces": "", "fields": [], "file": "processor/src/test/java/org/mapstruct/ap/internal/util/NativeTypesTest.java"}, "test_case": {"identifier": "testFloatingPoingLiteralFromJLS", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFloatingPoingLiteralFromJLS() {\n\n        // The largest positive finite literal of type float is 3.4028235e38f.\n        assertThat( getLiteral( float.class.getCanonicalName(), \"3.4028235e38f\" ) ).isNotNull();\n        // The smallest positive finite non-zero literal of type float is 1.40e-45f.\n        assertThat( getLiteral( float.class.getCanonicalName(), \"1.40e-45f\" ) ).isNotNull();\n        // The largest positive finite literal of type double is 1.7976931348623157e308.\n        assertThat( getLiteral( double.class.getCanonicalName(), \"1.7976931348623157e308\" ) ).isNotNull();\n        // The smallest positive finite non-zero literal of type double is 4.9e-324\n        assertThat( getLiteral( double.class.getCanonicalName(), \"4.9e-324\" ) ).isNotNull();\n\n        // some floats\n        assertThat( getLiteral( float.class.getCanonicalName(), \"3.1e1F\" ) ).isNotNull();\n        assertThat( getLiteral( float.class.getCanonicalName(), \"2.f\" ) ).isNotNull();\n        assertThat( getLiteral( float.class.getCanonicalName(), \".3f\" ) ).isNotNull();\n        assertThat( getLiteral( float.class.getCanonicalName(), \"0f\" ) ).isNotNull();\n        assertThat( getLiteral( float.class.getCanonicalName(), \"3.14f\" ) ).isNotNull();\n        assertThat( getLiteral( float.class.getCanonicalName(), \"6.022137e+23f\" ) ).isNotNull();\n        assertThat( getLiteral( float.class.getCanonicalName(), \"-3.14f\" ) ).isNotNull();\n\n        // some doubles\n        assertThat( getLiteral( double.class.getCanonicalName(), \"1e1\" ) ).isNotNull();\n        assertThat( getLiteral( double.class.getCanonicalName(), \"1e+1\" ) ).isNotNull();\n        assertThat( getLiteral( double.class.getCanonicalName(), \"2.\" ) ).isNotNull();\n        assertThat( getLiteral( double.class.getCanonicalName(), \".3\" ) ).isNotNull();\n        assertThat( getLiteral( double.class.getCanonicalName(), \"0.0\" ) ).isNotNull();\n        assertThat( getLiteral( double.class.getCanonicalName(), \"3.14\" ) ).isNotNull();\n        assertThat( getLiteral( double.class.getCanonicalName(), \"-3.14\" ) ).isNotNull();\n        assertThat( getLiteral( double.class.getCanonicalName(), \"1e-9D\" ) ).isNotNull();\n        assertThat( getLiteral( double.class.getCanonicalName(), \"1e137\" ) ).isNotNull();\n\n        // too large (infinitve)\n        assertThat( getLiteral( float.class.getCanonicalName(), \"3.4028235e38f\" ) ).isNotNull();\n        assertThat( getLiteral( double.class.getCanonicalName(), \"1.7976931348623157e308\" ) ).isNotNull();\n\n        // too large (infinitve)\n        assertThat( getLiteral( float.class.getCanonicalName(), \"3.4028235e39f\" ) ).isNull();\n        assertThat( getLiteral( double.class.getCanonicalName(), \"1.7976931348623159e308\" ) ).isNull();\n\n        // small\n        assertThat( getLiteral( float.class.getCanonicalName(), \"1.40e-45f\" ) ).isNotNull();\n        assertThat( getLiteral( float.class.getCanonicalName(), \"0x1.0p-149\" ) ).isNotNull();\n        assertThat( getLiteral( double.class.getCanonicalName(), \"4.9e-324\" ) ).isNotNull();\n        assertThat( getLiteral( double.class.getCanonicalName(), \"0x0.001P-1062d\" ) ).isNotNull();\n\n        // too small\n        assertThat( getLiteral( float.class.getCanonicalName(), \"1.40e-46f\" ) ).isNull();\n        assertThat( getLiteral( float.class.getCanonicalName(), \"0x1.0p-150\" ) ).isNull();\n        assertThat( getLiteral( double.class.getCanonicalName(), \"4.9e-325\" ) ).isNull();\n        assertThat( getLiteral( double.class.getCanonicalName(), \"0x0.001p-1063d\" ) ).isNull();\n    }", "signature": "void testFloatingPoingLiteralFromJLS()", "full_signature": "@Test public void testFloatingPoingLiteralFromJLS()", "class_method_signature": "NativeTypesTest.testFloatingPoingLiteralFromJLS()", "testcase": true, "constructor": false, "invocations": ["isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNull", "assertThat", "getLiteral", "getCanonicalName", "isNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNotNull", "assertThat", "getLiteral", "getCanonicalName", "isNull", "assertThat", "getLiteral", "getCanonicalName", "isNull", "assertThat", "getLiteral", "getCanonicalName", "isNull", "assertThat", "getLiteral", "getCanonicalName", "isNull", "assertThat", "getLiteral", "getCanonicalName"]}, "focal_class": {"identifier": "NativeTypes", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<Class<?>, Class<?>> WRAPPER_TO_PRIMITIVE_TYPES;", "modifier": "private static final", "type": "Map<Class<?>, Class<?>>", "declarator": "WRAPPER_TO_PRIMITIVE_TYPES", "var_name": "WRAPPER_TO_PRIMITIVE_TYPES"}, {"original_string": "private static final Map<Class<?>, Class<?>> PRIMITIVE_TO_WRAPPER_TYPES;", "modifier": "private static final", "type": "Map<Class<?>, Class<?>>", "declarator": "PRIMITIVE_TO_WRAPPER_TYPES", "var_name": "PRIMITIVE_TO_WRAPPER_TYPES"}, {"original_string": "private static final Set<Class<?>> NUMBER_TYPES = new HashSet<>();", "modifier": "private static final", "type": "Set<Class<?>>", "declarator": "NUMBER_TYPES = new HashSet<>()", "var_name": "NUMBER_TYPES"}, {"original_string": "private static final Map<TypeKind, String> TYPE_KIND_NAME = new EnumMap<>( TypeKind.class );", "modifier": "private static final", "type": "Map<TypeKind, String>", "declarator": "TYPE_KIND_NAME = new EnumMap<>( TypeKind.class )", "var_name": "TYPE_KIND_NAME"}, {"original_string": "private static final Map<String, LiteralAnalyzer> ANALYZERS;", "modifier": "private static final", "type": "Map<String, LiteralAnalyzer>", "declarator": "ANALYZERS", "var_name": "ANALYZERS"}, {"original_string": "private static final Map<String, Integer> NARROWING_LUT;", "modifier": "private static final", "type": "Map<String, Integer>", "declarator": "NARROWING_LUT", "var_name": "NARROWING_LUT"}, {"original_string": "private static final Pattern PTRN_HEX = Pattern.compile( \"^0[x|X].*\" );", "modifier": "private static final", "type": "Pattern", "declarator": "PTRN_HEX = Pattern.compile( \"^0[x|X].*\" )", "var_name": "PTRN_HEX"}, {"original_string": "private static final Pattern PTRN_OCT = Pattern.compile( \"^0_*[0-7].*\" );", "modifier": "private static final", "type": "Pattern", "declarator": "PTRN_OCT = Pattern.compile( \"^0_*[0-7].*\" )", "var_name": "PTRN_OCT"}, {"original_string": "private static final Pattern PTRN_BIN = Pattern.compile( \"^0[b|B].*\" );", "modifier": "private static final", "type": "Pattern", "declarator": "PTRN_BIN = Pattern.compile( \"^0[b|B].*\" )", "var_name": "PTRN_BIN"}, {"original_string": "private static final Pattern PTRN_FLOAT_DEC_ZERO = Pattern.compile( \"^[^eE]*[1-9].*[eE]?.*\" );", "modifier": "private static final", "type": "Pattern", "declarator": "PTRN_FLOAT_DEC_ZERO = Pattern.compile( \"^[^eE]*[1-9].*[eE]?.*\" )", "var_name": "PTRN_FLOAT_DEC_ZERO"}, {"original_string": "private static final Pattern PTRN_FLOAT_HEX_ZERO = Pattern.compile( \"^[^pP]*[1-9a-fA-F].*[pP]?.*\" );", "modifier": "private static final", "type": "Pattern", "declarator": "PTRN_FLOAT_HEX_ZERO = Pattern.compile( \"^[^pP]*[1-9a-fA-F].*[pP]?.*\" )", "var_name": "PTRN_FLOAT_HEX_ZERO"}, {"original_string": "private static final Pattern PTRN_SIGN = Pattern.compile( \"^[\\\\+|-]\" );", "modifier": "private static final", "type": "Pattern", "declarator": "PTRN_SIGN = Pattern.compile( \"^[\\\\+|-]\" )", "var_name": "PTRN_SIGN"}, {"original_string": "private static final Pattern PTRN_LONG = Pattern.compile( \"[l|L]$\" );", "modifier": "private static final", "type": "Pattern", "declarator": "PTRN_LONG = Pattern.compile( \"[l|L]$\" )", "var_name": "PTRN_LONG"}, {"original_string": "private static final Pattern PTRN_FLOAT = Pattern.compile( \"[f|F]$\" );", "modifier": "private static final", "type": "Pattern", "declarator": "PTRN_FLOAT = Pattern.compile( \"[f|F]$\" )", "var_name": "PTRN_FLOAT"}, {"original_string": "private static final Pattern PTRN_DOUBLE = Pattern.compile( \"[d|D]$\" );", "modifier": "private static final", "type": "Pattern", "declarator": "PTRN_DOUBLE = Pattern.compile( \"[d|D]$\" )", "var_name": "PTRN_DOUBLE"}, {"original_string": "private static final Pattern PTRN_FAULTY_UNDERSCORE_INT = Pattern.compile( \"^_|_$|-_|_-|\\\\+_|_\\\\+\" );", "modifier": "private static final", "type": "Pattern", "declarator": "PTRN_FAULTY_UNDERSCORE_INT = Pattern.compile( \"^_|_$|-_|_-|\\\\+_|_\\\\+\" )", "var_name": "PTRN_FAULTY_UNDERSCORE_INT"}, {"original_string": "private static final Pattern PTRN_FAULTY_UNDERSCORE_FLOAT = Pattern.compile( \"^_|_$|-_|_-|\\\\+_|_\\\\+|\\\\._|_\\\\.\" );", "modifier": "private static final", "type": "Pattern", "declarator": "PTRN_FAULTY_UNDERSCORE_FLOAT = Pattern.compile( \"^_|_$|-_|_-|\\\\+_|_\\\\+|\\\\._|_\\\\.\" )", "var_name": "PTRN_FAULTY_UNDERSCORE_FLOAT"}, {"original_string": "private static final Pattern PTRN_FAULTY_DEC_UNDERSCORE_FLOAT = Pattern.compile( \"_e|_E|e_|E_\" );", "modifier": "private static final", "type": "Pattern", "declarator": "PTRN_FAULTY_DEC_UNDERSCORE_FLOAT = Pattern.compile( \"_e|_E|e_|E_\" )", "var_name": "PTRN_FAULTY_DEC_UNDERSCORE_FLOAT"}, {"original_string": "private static final Pattern PTRN_FAULTY_HEX_UNDERSCORE_FLOAT = Pattern.compile( \"_p|_P|p_|P_\" );", "modifier": "private static final", "type": "Pattern", "declarator": "PTRN_FAULTY_HEX_UNDERSCORE_FLOAT = Pattern.compile( \"_p|_P|p_|P_\" )", "var_name": "PTRN_FAULTY_HEX_UNDERSCORE_FLOAT"}], "methods": [{"identifier": "NativeTypes", "parameters": "()", "modifiers": "private", "return": "", "signature": " NativeTypes()", "full_signature": "private  NativeTypes()", "class_method_signature": "NativeTypes.NativeTypes()", "testcase": false, "constructor": true}, {"identifier": "getWrapperType", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getWrapperType(Class<?> clazz)", "full_signature": "public static Class<?> getWrapperType(Class<?> clazz)", "class_method_signature": "NativeTypes.getWrapperType(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveType", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getPrimitiveType(Class<?> clazz)", "full_signature": "public static Class<?> getPrimitiveType(Class<?> clazz)", "class_method_signature": "NativeTypes.getPrimitiveType(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isNative", "parameters": "(String fullyQualifiedName)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNative(String fullyQualifiedName)", "full_signature": "public static boolean isNative(String fullyQualifiedName)", "class_method_signature": "NativeTypes.isNative(String fullyQualifiedName)", "testcase": false, "constructor": false}, {"identifier": "isNumber", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNumber(Class<?> clazz)", "full_signature": "public static boolean isNumber(Class<?> clazz)", "class_method_signature": "NativeTypes.isNumber(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getLiteral", "parameters": "(String className, String literal)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getLiteral(String className, String literal)", "full_signature": "public static Class<?> getLiteral(String className, String literal)", "class_method_signature": "NativeTypes.getLiteral(String className, String literal)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(TypeKind typeKind)", "modifiers": "public static", "return": "String", "signature": "String getName(TypeKind typeKind)", "full_signature": "public static String getName(TypeKind typeKind)", "class_method_signature": "NativeTypes.getName(TypeKind typeKind)", "testcase": false, "constructor": false}, {"identifier": "isNarrowing", "parameters": "( String sourceFQN, String targetFQN )", "modifiers": "public static", "return": "boolean", "signature": "boolean isNarrowing( String sourceFQN, String targetFQN )", "full_signature": "public static boolean isNarrowing( String sourceFQN, String targetFQN )", "class_method_signature": "NativeTypes.isNarrowing( String sourceFQN, String targetFQN )", "testcase": false, "constructor": false}], "file": "processor/src/main/java/org/mapstruct/ap/internal/util/NativeTypes.java"}, "focal_method": {"identifier": "getLiteral", "parameters": "(String className, String literal)", "modifiers": "public static", "return": "Class<?>", "body": "public static Class<?> getLiteral(String className, String literal) {\n        LiteralAnalyzer analyzer = ANALYZERS.get( className );\n        Class result = null;\n        if ( analyzer != null ) {\n            analyzer.validate( literal );\n            result = analyzer.getLiteral();\n        }\n        return result;\n    }", "signature": "Class<?> getLiteral(String className, String literal)", "full_signature": "public static Class<?> getLiteral(String className, String literal)", "class_method_signature": "NativeTypes.getLiteral(String className, String literal)", "testcase": false, "constructor": false, "invocations": ["get", "validate", "getLiteral"]}, "repository": {"repo_id": 4470435, "url": "https://github.com/mapstruct/mapstruct", "stars": 2319, "created": "5/28/2012 12:42:42 PM +00:00", "updates": "2020-01-27T19:16:09+00:00", "fork": "False", "license": "licensed"}}