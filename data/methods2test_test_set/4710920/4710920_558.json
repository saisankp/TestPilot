{"test_class": {"identifier": "LFUCacheTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/LFUCacheTest.java"}, "test_case": {"identifier": "testCapacity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCapacity() throws Exception {\n        LFUCache<String, Integer> cache = new LFUCache<String, Integer>();\n        assertThat(cache.getCapacity(), equalTo(1000));\n    }", "signature": "void testCapacity()", "full_signature": "@Test public void testCapacity()", "class_method_signature": "LFUCacheTest.testCapacity()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getCapacity", "equalTo"]}, "focal_class": {"identifier": "LFUCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<K, CacheNode<K, V>> map;", "modifier": "private", "type": "Map<K, CacheNode<K, V>>", "declarator": "map", "var_name": "map"}, {"original_string": "private CacheDeque<K, V>[] freqTable;", "modifier": "private", "type": "CacheDeque<K, V>[]", "declarator": "freqTable", "var_name": "freqTable"}, {"original_string": "private final int capacity;", "modifier": "private final", "type": "int", "declarator": "capacity", "var_name": "capacity"}, {"original_string": "private int evictionCount;", "modifier": "private", "type": "int", "declarator": "evictionCount", "var_name": "evictionCount"}, {"original_string": "private int curSize = 0;", "modifier": "private", "type": "int", "declarator": "curSize = 0", "var_name": "curSize"}, {"original_string": "private final ReentrantLock lock = new ReentrantLock();", "modifier": "private final", "type": "ReentrantLock", "declarator": "lock = new ReentrantLock()", "var_name": "lock"}, {"original_string": "private static final int DEFAULT_LOAD_FACTOR = 1000;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_LOAD_FACTOR = 1000", "var_name": "DEFAULT_LOAD_FACTOR"}, {"original_string": "private static final float DEFAULT_EVICTION_CAPACITY = 0.75f;", "modifier": "private static final", "type": "float", "declarator": "DEFAULT_EVICTION_CAPACITY = 0.75f", "var_name": "DEFAULT_EVICTION_CAPACITY"}], "methods": [{"identifier": "LFUCache", "parameters": "()", "modifiers": "public", "return": "", "signature": " LFUCache()", "full_signature": "public  LFUCache()", "class_method_signature": "LFUCache.LFUCache()", "testcase": false, "constructor": true}, {"identifier": "LFUCache", "parameters": "(final int maxCapacity, final float evictionFactor)", "modifiers": "public", "return": "", "signature": " LFUCache(final int maxCapacity, final float evictionFactor)", "full_signature": "public  LFUCache(final int maxCapacity, final float evictionFactor)", "class_method_signature": "LFUCache.LFUCache(final int maxCapacity, final float evictionFactor)", "testcase": false, "constructor": true}, {"identifier": "getCapacity", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCapacity()", "full_signature": "public int getCapacity()", "class_method_signature": "LFUCache.getCapacity()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(final K key, final V value)", "modifiers": "public", "return": "V", "signature": "V put(final K key, final V value)", "full_signature": "public V put(final K key, final V value)", "class_method_signature": "LFUCache.put(final K key, final V value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final K key)", "modifiers": "public", "return": "V", "signature": "V remove(final K key)", "full_signature": "public V remove(final K key)", "class_method_signature": "LFUCache.remove(final K key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final K key)", "modifiers": "public", "return": "V", "signature": "V get(final K key)", "full_signature": "public V get(final K key)", "class_method_signature": "LFUCache.get(final K key)", "testcase": false, "constructor": false}, {"identifier": "proceedEviction", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int proceedEviction()", "full_signature": "private int proceedEviction()", "class_method_signature": "LFUCache.proceedEviction()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSize()", "full_signature": "public int getSize()", "class_method_signature": "LFUCache.getSize()", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/LFUCache.java"}, "focal_method": {"identifier": "getCapacity", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int getCapacity() {\n        return capacity;\n    }", "signature": "int getCapacity()", "full_signature": "public int getCapacity()", "class_method_signature": "LFUCache.getCapacity()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}