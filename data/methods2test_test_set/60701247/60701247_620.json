{"test_class": {"identifier": "ThreadsViewTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ImmutableList<HttpData> FAKE_DATA =\n    new ImmutableList.Builder<HttpData>()\n      .add(newData(1, 1, 10, 11, \"threadA\"))\n      .add(newData(2, 5, 12, 12, \"threadB\"))\n      .add(newData(3, 13, 15, 11, \"threadA\"))\n      .add(newData(4, 20, 25, 11, \"threadA\"))\n      .add(newData(5, 14, 21, 12, \"threadB\"))\n\n      .add(newData(11, 100, 110, 13, \"threadC\"))\n      .add(newData(12, 115, 120, 14, \"threadC\"))\n      .build();", "modifier": "private static final", "type": "ImmutableList<HttpData>", "declarator": "FAKE_DATA =\n    new ImmutableList.Builder<HttpData>()\n      .add(newData(1, 1, 10, 11, \"threadA\"))\n      .add(newData(2, 5, 12, 12, \"threadB\"))\n      .add(newData(3, 13, 15, 11, \"threadA\"))\n      .add(newData(4, 20, 25, 11, \"threadA\"))\n      .add(newData(5, 14, 21, 12, \"threadB\"))\n\n      .add(newData(11, 100, 110, 13, \"threadC\"))\n      .add(newData(12, 115, 120, 14, \"threadC\"))\n      .build()", "var_name": "FAKE_DATA"}, {"original_string": "private final FakeTimer myTimer = new FakeTimer();", "modifier": "private final", "type": "FakeTimer", "declarator": "myTimer = new FakeTimer()", "var_name": "myTimer"}, {"original_string": "@Rule public FakeGrpcChannel myGrpcChannel =\n    new FakeGrpcChannel(\"ThreadsViewTest\", new FakeTransportService(myTimer, false), new FakeProfilerService(myTimer),\n                        FakeNetworkService.newBuilder().setHttpDataList(FAKE_DATA).build());", "modifier": "@Rule public", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel =\n    new FakeGrpcChannel(\"ThreadsViewTest\", new FakeTransportService(myTimer, false), new FakeProfilerService(myTimer),\n                        FakeNetworkService.newBuilder().setHttpDataList(FAKE_DATA).build())", "var_name": "myGrpcChannel"}, {"original_string": "private NetworkProfilerStageView myStageView;", "modifier": "private", "type": "NetworkProfilerStageView", "declarator": "myStageView", "var_name": "myStageView"}, {"original_string": "private ThreadsView myThreadsView;", "modifier": "private", "type": "ThreadsView", "declarator": "myThreadsView", "var_name": "myThreadsView"}, {"original_string": "private FakeUi myUi;", "modifier": "private", "type": "FakeUi", "declarator": "myUi", "var_name": "myUi"}], "file": "profilers-ui/testSrc/com/android/tools/profilers/network/ThreadsViewTest.java"}, "test_case": {"identifier": "clickingOnARequestSelectsIt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void clickingOnARequestSelectsIt() {\n    Range selection = myStageView.getStage().getTimeline().getSelectionRange();\n    // The following selection puts threads in the first and second rows on the left\n    // half of the view. The right half is mostly blank.\n    selection.set(0, TimeUnit.SECONDS.toMicros(44));\n\n    int badX = myThreadsView.getComponent().getWidth() - 1;\n    int goodX = getTable().getColumnModel().getColumn(0).getWidth() + 10;\n    int goodY = getTable().getRowHeight() / 2;\n\n    assertNull(myStageView.getStage().getSelectedConnection());\n    // Click on empty space - doesn't select anything\n    myUi.mouse.click(badX, goodY);\n    assertNull(myStageView.getStage().getSelectedConnection());\n\n    myUi.mouse.click(goodX, goodY);\n    assertNotNull(myStageView.getStage().getSelectedConnection());\n\n    // After clicking on a request, clicking on empty space doesn't deselect\n    myUi.mouse.click(badX, goodY);\n    assertNotNull(myStageView.getStage().getSelectedConnection());\n  }", "signature": "void clickingOnARequestSelectsIt()", "full_signature": "@Test public void clickingOnARequestSelectsIt()", "class_method_signature": "ThreadsViewTest.clickingOnARequestSelectsIt()", "testcase": true, "constructor": false, "invocations": ["getSelectionRange", "getTimeline", "getStage", "set", "toMicros", "getWidth", "getComponent", "getWidth", "getColumn", "getColumnModel", "getTable", "getRowHeight", "getTable", "assertNull", "getSelectedConnection", "getStage", "click", "assertNull", "getSelectedConnection", "getStage", "click", "assertNotNull", "getSelectedConnection", "getStage", "click", "assertNotNull", "getSelectedConnection", "getStage"]}, "focal_class": {"identifier": "ThreadsView", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int STATE_HEIGHT = JBUI.scale(15);", "modifier": "private static final", "type": "int", "declarator": "STATE_HEIGHT = JBUI.scale(15)", "var_name": "STATE_HEIGHT"}, {"original_string": "private static final int SELECTION_OUTLINE_PADDING = JBUI.scale(3);", "modifier": "private static final", "type": "int", "declarator": "SELECTION_OUTLINE_PADDING = JBUI.scale(3)", "var_name": "SELECTION_OUTLINE_PADDING"}, {"original_string": "private static final int SELECTION_OUTLINE_BORDER = JBUI.scale(2);", "modifier": "private static final", "type": "int", "declarator": "SELECTION_OUTLINE_BORDER = JBUI.scale(2)", "var_name": "SELECTION_OUTLINE_BORDER"}, {"original_string": "private static final int ROW_HEIGHT = STATE_HEIGHT + 2 * (SELECTION_OUTLINE_BORDER + SELECTION_OUTLINE_PADDING);", "modifier": "private static final", "type": "int", "declarator": "ROW_HEIGHT = STATE_HEIGHT + 2 * (SELECTION_OUTLINE_BORDER + SELECTION_OUTLINE_PADDING)", "var_name": "ROW_HEIGHT"}, {"original_string": "@NotNull\n  private final JTable myThreadsTable;", "modifier": "@NotNull\n  private final", "type": "JTable", "declarator": "myThreadsTable", "var_name": "myThreadsTable"}, {"original_string": "@NotNull\n  private final AspectObserver myObserver;", "modifier": "@NotNull\n  private final", "type": "AspectObserver", "declarator": "myObserver", "var_name": "myObserver"}], "methods": [{"identifier": "ThreadsView", "parameters": "(@NotNull NetworkProfilerStageView stageView)", "modifiers": "", "return": "", "signature": " ThreadsView(@NotNull NetworkProfilerStageView stageView)", "full_signature": "  ThreadsView(@NotNull NetworkProfilerStageView stageView)", "class_method_signature": "ThreadsView.ThreadsView(@NotNull NetworkProfilerStageView stageView)", "testcase": false, "constructor": true}, {"identifier": "getComponent", "parameters": "()", "modifiers": "@NotNull", "return": "JComponent", "signature": "JComponent getComponent()", "full_signature": "@NotNull JComponent getComponent()", "class_method_signature": "ThreadsView.getComponent()", "testcase": false, "constructor": false}, {"identifier": "findHttpDataUnderCursor", "parameters": "(@NotNull JTable table, @NotNull Range range, @NotNull MouseEvent e)", "modifiers": "@Nullable private static", "return": "HttpData", "signature": "HttpData findHttpDataUnderCursor(@NotNull JTable table, @NotNull Range range, @NotNull MouseEvent e)", "full_signature": "@Nullable private static HttpData findHttpDataUnderCursor(@NotNull JTable table, @NotNull Range range, @NotNull MouseEvent e)", "class_method_signature": "ThreadsView.findHttpDataUnderCursor(@NotNull JTable table, @NotNull Range range, @NotNull MouseEvent e)", "testcase": false, "constructor": false}, {"identifier": "positionToRange", "parameters": "(double x, double width, @NotNull Range range)", "modifiers": "private static", "return": "double", "signature": "double positionToRange(double x, double width, @NotNull Range range)", "full_signature": "private static double positionToRange(double x, double width, @NotNull Range range)", "class_method_signature": "ThreadsView.positionToRange(double x, double width, @NotNull Range range)", "testcase": false, "constructor": false}], "file": "profilers-ui/src/com/android/tools/profilers/network/ThreadsView.java"}, "focal_method": {"identifier": "getComponent", "parameters": "()", "modifiers": "@NotNull", "return": "JComponent", "body": "@NotNull\n  JComponent getComponent() {\n    return myThreadsTable;\n  }", "signature": "JComponent getComponent()", "full_signature": "@NotNull JComponent getComponent()", "class_method_signature": "ThreadsView.getComponent()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}