{"test_class": {"identifier": "CustomTreeVisitorTest", "superclass": "", "interfaces": "", "fields": [], "file": "dart-lang/src/test/java/fr/insideapp/sonarqube/dart/lang/antlr/CustomTreeVisitorTest.java"}, "test_case": {"identifier": "visit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void visit() throws IOException {\n\n        final CharStream charStream = CharStreams.fromStream(this.getClass().getResourceAsStream(\"/dart/main.dart\"));\n        final Dart2Lexer lexer = new Dart2Lexer(charStream);\n        lexer.removeErrorListeners();\n        final CommonTokenStream stream = new CommonTokenStream(lexer);\n        stream.fill();\n        final Dart2Parser parser = new Dart2Parser(stream);\n        parser.removeErrorListeners();\n        final ParseTree root = parser.compilationUnit();\n\n        CustomTreeVisitor customTreeVisitor = new CustomTreeVisitor(new ParseTreeItemVisitor() {\n            @Override\n            public void apply(ParseTree tree) {\n\n            }\n\n            @Override\n            public void fillContext(SensorContext context, AntlrContext antlrContext) {\n                assertThat(antlrContext.getTokens().length).isEqualTo(371);\n            }\n        });\n        AntlrContext antlrContext = AntlrUtils.getRequest(IOUtils.toString(this.getClass().getResourceAsStream(\"/dart/main.dart\"), \"UTF-8\"));\n        customTreeVisitor.visit(root);\n        customTreeVisitor.fillContext(null, antlrContext);\n    }", "signature": "void visit()", "full_signature": "@Test public void visit()", "class_method_signature": "CustomTreeVisitorTest.visit()", "testcase": true, "constructor": false, "invocations": ["fromStream", "getResourceAsStream", "getClass", "removeErrorListeners", "fill", "removeErrorListeners", "compilationUnit", "isEqualTo", "assertThat", "getTokens", "getRequest", "toString", "getResourceAsStream", "getClass", "visit", "fillContext"]}, "focal_class": {"identifier": "CustomTreeVisitor", "superclass": "extends AbstractParseTreeVisitor", "interfaces": "implements ParseTreeItemVisitor", "fields": [{"original_string": "private final ParseTreeItemVisitor[] visitors;", "modifier": "private final", "type": "ParseTreeItemVisitor[]", "declarator": "visitors", "var_name": "visitors"}], "methods": [{"identifier": "CustomTreeVisitor", "parameters": "(final ParseTreeItemVisitor... visitors)", "modifiers": "public", "return": "", "signature": " CustomTreeVisitor(final ParseTreeItemVisitor... visitors)", "full_signature": "public  CustomTreeVisitor(final ParseTreeItemVisitor... visitors)", "class_method_signature": "CustomTreeVisitor.CustomTreeVisitor(final ParseTreeItemVisitor... visitors)", "testcase": false, "constructor": true}, {"identifier": "visit", "parameters": "(final ParseTree tree)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(final ParseTree tree)", "full_signature": "@Override public Object visit(final ParseTree tree)", "class_method_signature": "CustomTreeVisitor.visit(final ParseTree tree)", "testcase": false, "constructor": false}, {"identifier": "fillContext", "parameters": "(SensorContext context, AntlrContext antlrContext)", "modifiers": "@Override public", "return": "void", "signature": "void fillContext(SensorContext context, AntlrContext antlrContext)", "full_signature": "@Override public void fillContext(SensorContext context, AntlrContext antlrContext)", "class_method_signature": "CustomTreeVisitor.fillContext(SensorContext context, AntlrContext antlrContext)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(ParseTree tree)", "modifiers": "@Override public", "return": "void", "signature": "void apply(ParseTree tree)", "full_signature": "@Override public void apply(ParseTree tree)", "class_method_signature": "CustomTreeVisitor.apply(ParseTree tree)", "testcase": false, "constructor": false}], "file": "dart-lang/src/main/java/fr/insideapp/sonarqube/dart/lang/antlr/CustomTreeVisitor.java"}, "focal_method": {"identifier": "visit", "parameters": "(final ParseTree tree)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object visit(final ParseTree tree) {\n\n        final int n = tree.getChildCount();\n\n        for (int i = 0; i < n; i++) {\n            final ParseTree c = tree.getChild(i);\n            visit(c);\n        }\n        for (final ParseTreeItemVisitor visitor : this.visitors) {\n            visitor.apply(tree);\n        }\n\n        return null;\n    }", "signature": "Object visit(final ParseTree tree)", "full_signature": "@Override public Object visit(final ParseTree tree)", "class_method_signature": "CustomTreeVisitor.visit(final ParseTree tree)", "testcase": false, "constructor": false, "invocations": ["getChildCount", "getChild", "visit", "apply"]}, "repository": {"repo_id": 235879795, "url": "https://github.com/insideapp-oss/sonar-flutter", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 70, "size": 799, "license": "licensed"}}