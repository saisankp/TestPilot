{"test_class": {"identifier": "MCSPlusHandlerTest", "superclass": "extends AbstractMCSAlgorithmTest", "interfaces": "", "fields": [], "file": "legacy/src/test/java/org/openscience/cdk/smsd/algorithm/mcsplus/MCSPlusHandlerTest.java"}, "test_case": {"identifier": "testGetAllMapping", "parameters": "()", "modifiers": "@Test @Ignore(\"Failing but not going to be fixed\") public", "return": "void", "body": "@Test\n    @Ignore(\"Failing but not going to be fixed\")\n    public void testGetAllMapping() throws CDKException {\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        sp.kekulise(false);\n        IAtomContainer target = sp.parseSmiles(\"C\\\\C=C/Nc1cccc(c1)N(O)\\\\C=C\\\\C\\\\C=C\\\\C=C/C\");\n        IAtomContainer queryac = sp.parseSmiles(\"Nc1ccccc1\");\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(target);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(queryac);\n\n        MCSPlusHandler smsd1 = new MCSPlusHandler();\n        MolHandler mol1 = new MolHandler(queryac, true, true);\n        MolHandler mol2 = new MolHandler(target, true, true);\n        smsd1.set(mol1, mol2);\n        smsd1.searchMCS(true);\n        assertNotNull(smsd1.getFirstMapping());\n\n        assertEquals(4, smsd1.getAllMapping().size());\n    }", "signature": "void testGetAllMapping()", "full_signature": "@Test @Ignore(\"Failing but not going to be fixed\") public void testGetAllMapping()", "class_method_signature": "MCSPlusHandlerTest.testGetAllMapping()", "testcase": true, "constructor": false, "invocations": ["getInstance", "kekulise", "parseSmiles", "parseSmiles", "percieveAtomTypesAndConfigureAtoms", "percieveAtomTypesAndConfigureAtoms", "set", "searchMCS", "assertNotNull", "getFirstMapping", "assertEquals", "size", "getAllMapping"]}, "focal_class": {"identifier": "MCSPlusHandler", "superclass": "extends AbstractMCSAlgorithm", "interfaces": "implements IMCSBase", "fields": [{"original_string": "private static List<Map<IAtom, IAtom>>     allAtomMCS   = null;", "modifier": "private static", "type": "List<Map<IAtom, IAtom>>", "declarator": "allAtomMCS   = null", "var_name": "allAtomMCS"}, {"original_string": "private static Map<IAtom, IAtom>           atomsMCS     = null;", "modifier": "private static", "type": "Map<IAtom, IAtom>", "declarator": "atomsMCS     = null", "var_name": "atomsMCS"}, {"original_string": "private static Map<Integer, Integer>       firstMCS     = null;", "modifier": "private static", "type": "Map<Integer, Integer>", "declarator": "firstMCS     = null", "var_name": "firstMCS"}, {"original_string": "private static List<Map<Integer, Integer>> allMCS       = null;", "modifier": "private static", "type": "List<Map<Integer, Integer>>", "declarator": "allMCS       = null", "var_name": "allMCS"}, {"original_string": "private IAtomContainer                     source       = null;", "modifier": "private", "type": "IAtomContainer", "declarator": "source       = null", "var_name": "source"}, {"original_string": "private IAtomContainer                     target       = null;", "modifier": "private", "type": "IAtomContainer", "declarator": "target       = null", "var_name": "target"}, {"original_string": "private boolean                            flagExchange = false;", "modifier": "private", "type": "boolean", "declarator": "flagExchange = false", "var_name": "flagExchange"}], "methods": [{"identifier": "MCSPlusHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " MCSPlusHandler()", "full_signature": "public  MCSPlusHandler()", "class_method_signature": "MCSPlusHandler.MCSPlusHandler()", "testcase": false, "constructor": true}, {"identifier": "set", "parameters": "(MolHandler source, MolHandler target)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void set(MolHandler source, MolHandler target)", "full_signature": "@Override public synchronized void set(MolHandler source, MolHandler target)", "class_method_signature": "MCSPlusHandler.set(MolHandler source, MolHandler target)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(IQueryAtomContainer source, IAtomContainer target)", "modifiers": "@Override public", "return": "void", "signature": "void set(IQueryAtomContainer source, IAtomContainer target)", "full_signature": "@Override public void set(IQueryAtomContainer source, IAtomContainer target)", "class_method_signature": "MCSPlusHandler.set(IQueryAtomContainer source, IAtomContainer target)", "testcase": false, "constructor": false}, {"identifier": "searchMCS", "parameters": "(boolean shouldMatchBonds)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void searchMCS(boolean shouldMatchBonds)", "full_signature": "@Override public synchronized void searchMCS(boolean shouldMatchBonds)", "class_method_signature": "MCSPlusHandler.searchMCS(boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "setAllMapping", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void setAllMapping()", "full_signature": "private synchronized void setAllMapping()", "class_method_signature": "MCSPlusHandler.setAllMapping()", "testcase": false, "constructor": false}, {"identifier": "setAllAtomMapping", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void setAllAtomMapping()", "full_signature": "private synchronized void setAllAtomMapping()", "class_method_signature": "MCSPlusHandler.setAllAtomMapping()", "testcase": false, "constructor": false}, {"identifier": "setFirstMapping", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void setFirstMapping()", "full_signature": "private synchronized void setFirstMapping()", "class_method_signature": "MCSPlusHandler.setFirstMapping()", "testcase": false, "constructor": false}, {"identifier": "setFirstAtomMapping", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void setFirstAtomMapping()", "full_signature": "private synchronized void setFirstAtomMapping()", "class_method_signature": "MCSPlusHandler.setFirstAtomMapping()", "testcase": false, "constructor": false}, {"identifier": "getAllMapping", "parameters": "()", "modifiers": "@Override public synchronized", "return": "List<Map<Integer, Integer>>", "signature": "List<Map<Integer, Integer>> getAllMapping()", "full_signature": "@Override public synchronized List<Map<Integer, Integer>> getAllMapping()", "class_method_signature": "MCSPlusHandler.getAllMapping()", "testcase": false, "constructor": false}, {"identifier": "getFirstMapping", "parameters": "()", "modifiers": "@Override public synchronized", "return": "Map<Integer, Integer>", "signature": "Map<Integer, Integer> getFirstMapping()", "full_signature": "@Override public synchronized Map<Integer, Integer> getFirstMapping()", "class_method_signature": "MCSPlusHandler.getFirstMapping()", "testcase": false, "constructor": false}, {"identifier": "getAllAtomMapping", "parameters": "()", "modifiers": "@Override public synchronized", "return": "List<Map<IAtom, IAtom>>", "signature": "List<Map<IAtom, IAtom>> getAllAtomMapping()", "full_signature": "@Override public synchronized List<Map<IAtom, IAtom>> getAllAtomMapping()", "class_method_signature": "MCSPlusHandler.getAllAtomMapping()", "testcase": false, "constructor": false}, {"identifier": "getFirstAtomMapping", "parameters": "()", "modifiers": "@Override public synchronized", "return": "Map<IAtom, IAtom>", "signature": "Map<IAtom, IAtom> getFirstAtomMapping()", "full_signature": "@Override public synchronized Map<IAtom, IAtom> getFirstAtomMapping()", "class_method_signature": "MCSPlusHandler.getFirstAtomMapping()", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/smsd/algorithm/mcsplus/MCSPlusHandler.java"}, "focal_method": {"identifier": "getAllMapping", "parameters": "()", "modifiers": "@Override public synchronized", "return": "List<Map<Integer, Integer>>", "body": "@Override\n    public synchronized List<Map<Integer, Integer>> getAllMapping() {\n        return allMCS;\n    }", "signature": "List<Map<Integer, Integer>> getAllMapping()", "full_signature": "@Override public synchronized List<Map<Integer, Integer>> getAllMapping()", "class_method_signature": "MCSPlusHandler.getAllMapping()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}