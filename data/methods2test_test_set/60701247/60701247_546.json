{"test_class": {"identifier": "SidePanelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  private AttachedToolWindow<String> myToolWindow1;", "modifier": "@Mock\n  private", "type": "AttachedToolWindow<String>", "declarator": "myToolWindow1", "var_name": "myToolWindow1"}, {"original_string": "@Mock\n  private AttachedToolWindow<String> myToolWindow2;", "modifier": "@Mock\n  private", "type": "AttachedToolWindow<String>", "declarator": "myToolWindow2", "var_name": "myToolWindow2"}, {"original_string": "@Mock\n  private SideModel<String> myModel;", "modifier": "@Mock\n  private", "type": "SideModel<String>", "declarator": "myModel", "var_name": "myModel"}, {"original_string": "private JComponent myToolWindowComponent1;", "modifier": "private", "type": "JComponent", "declarator": "myToolWindowComponent1", "var_name": "myToolWindowComponent1"}, {"original_string": "private JComponent myToolWindowComponent2;", "modifier": "private", "type": "JComponent", "declarator": "myToolWindowComponent2", "var_name": "myToolWindowComponent2"}, {"original_string": "private SidePanel<String> myPanel;", "modifier": "private", "type": "SidePanel<String>", "declarator": "myPanel", "var_name": "myPanel"}], "file": "adt-ui/src/test/java/com/android/tools/adtui/workbench/SidePanelTest.java"}, "test_case": {"identifier": "testTwoVisibleTools", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTwoVisibleTools() {\n    when(myModel.getVisibleTools(Side.LEFT)).thenReturn(ImmutableList.of(myToolWindow1, myToolWindow2));\n    when(myModel.getHiddenTools(Side.LEFT)).thenReturn(Collections.emptyList());\n    myPanel.modelChanged(myModel, SideModel.EventType.LOCAL_UPDATE);\n\n    assertThat(myPanel.isVisible()).isTrue();\n    Component visible = findVisibleComponent();\n    Splitter splitter = visible instanceof Splitter ? (Splitter)visible : null;\n    assertThat(splitter).isNotNull();\n    assertThat(splitter.getFirstComponent()).isEqualTo(myToolWindowComponent1);\n    assertThat(splitter.getSecondComponent()).isEqualTo(myToolWindowComponent2);\n    assertThat(findHiddenComponents()).containsNoneOf(myToolWindowComponent1, myToolWindowComponent2);\n  }", "signature": "void testTwoVisibleTools()", "full_signature": "@Test public void testTwoVisibleTools()", "class_method_signature": "SidePanelTest.testTwoVisibleTools()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getVisibleTools", "of", "thenReturn", "when", "getHiddenTools", "emptyList", "modelChanged", "isTrue", "assertThat", "isVisible", "findVisibleComponent", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getFirstComponent", "isEqualTo", "assertThat", "getSecondComponent", "containsNoneOf", "assertThat", "findHiddenComponents"]}, "focal_class": {"identifier": "SidePanel", "superclass": "extends JPanel", "interfaces": "implements SideModel.Listener<T>", "fields": [{"original_string": "private static final String SPLITTER = \"SPLITTER\";", "modifier": "private static final", "type": "String", "declarator": "SPLITTER = \"SPLITTER\"", "var_name": "SPLITTER"}, {"original_string": "private static final String EMPTY = \"EMPTY\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY = \"EMPTY\"", "var_name": "EMPTY"}, {"original_string": "private final Side mySide;", "modifier": "private final", "type": "Side", "declarator": "mySide", "var_name": "mySide"}, {"original_string": "private final JPanel myCards;", "modifier": "private final", "type": "JPanel", "declarator": "myCards", "var_name": "myCards"}, {"original_string": "private final CardLayout myLayout;", "modifier": "private final", "type": "CardLayout", "declarator": "myLayout", "var_name": "myLayout"}, {"original_string": "private final JPanel myEmpty;", "modifier": "private final", "type": "JPanel", "declarator": "myEmpty", "var_name": "myEmpty"}, {"original_string": "private final Splitter mySplitter;", "modifier": "private final", "type": "Splitter", "declarator": "mySplitter", "var_name": "mySplitter"}], "methods": [{"identifier": "SidePanel", "parameters": "(@NotNull Side side, @NotNull SideModel<T> model)", "modifiers": "", "return": "", "signature": " SidePanel(@NotNull Side side, @NotNull SideModel<T> model)", "full_signature": "  SidePanel(@NotNull Side side, @NotNull SideModel<T> model)", "class_method_signature": "SidePanel.SidePanel(@NotNull Side side, @NotNull SideModel<T> model)", "testcase": false, "constructor": true}, {"identifier": "modelChanged", "parameters": "(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "modifiers": "@Override public", "return": "void", "signature": "void modelChanged(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "full_signature": "@Override public void modelChanged(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "class_method_signature": "SidePanel.modelChanged(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "testcase": false, "constructor": false}, {"identifier": "addVisibleTools", "parameters": "(@NotNull List<AttachedToolWindow> tools)", "modifiers": "private", "return": "void", "signature": "void addVisibleTools(@NotNull List<AttachedToolWindow> tools)", "full_signature": "private void addVisibleTools(@NotNull List<AttachedToolWindow> tools)", "class_method_signature": "SidePanel.addVisibleTools(@NotNull List<AttachedToolWindow> tools)", "testcase": false, "constructor": false}, {"identifier": "addHiddenTools", "parameters": "(@NotNull List<AttachedToolWindow> tools)", "modifiers": "private", "return": "void", "signature": "void addHiddenTools(@NotNull List<AttachedToolWindow> tools)", "full_signature": "private void addHiddenTools(@NotNull List<AttachedToolWindow> tools)", "class_method_signature": "SidePanel.addHiddenTools(@NotNull List<AttachedToolWindow> tools)", "testcase": false, "constructor": false}], "file": "adt-ui/src/main/java/com/android/tools/adtui/workbench/SidePanel.java"}, "focal_method": {"identifier": "modelChanged", "parameters": "(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void modelChanged(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused) {\n    myCards.removeAll();\n    myCards.add(mySplitter, SPLITTER);\n    myCards.add(myEmpty, EMPTY);\n    addVisibleTools(model.getVisibleTools(mySide));\n    addHiddenTools(model.getHiddenTools(mySide));\n    revalidate();\n    repaint();\n  }", "signature": "void modelChanged(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "full_signature": "@Override public void modelChanged(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "class_method_signature": "SidePanel.modelChanged(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "testcase": false, "constructor": false, "invocations": ["removeAll", "add", "add", "addVisibleTools", "getVisibleTools", "addHiddenTools", "getHiddenTools", "revalidate", "repaint"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}