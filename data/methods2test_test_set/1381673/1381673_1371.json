{"test_class": {"identifier": "KiePMMLModelFactoryUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SOURCE = \"TransformationsSample.pmml\";", "modifier": "private static final", "type": "String", "declarator": "SOURCE = \"TransformationsSample.pmml\"", "var_name": "SOURCE"}, {"original_string": "private static final String TEMPLATE_SOURCE = \"Template.tmpl\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_SOURCE = \"Template.tmpl\"", "var_name": "TEMPLATE_SOURCE"}, {"original_string": "private static final String TEMPLATE_CLASS_NAME = \"Template\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_CLASS_NAME = \"Template\"", "var_name": "TEMPLATE_CLASS_NAME"}, {"original_string": "private static PMML pmmlModel;", "modifier": "private static", "type": "PMML", "declarator": "pmmlModel", "var_name": "pmmlModel"}, {"original_string": "private static TreeModel model;", "modifier": "private static", "type": "TreeModel", "declarator": "model", "var_name": "model"}, {"original_string": "private ConstructorDeclaration constructorDeclaration;", "modifier": "private", "type": "ConstructorDeclaration", "declarator": "constructorDeclaration", "var_name": "constructorDeclaration"}, {"original_string": "private ClassOrInterfaceDeclaration classOrInterfaceDeclaration;", "modifier": "private", "type": "ClassOrInterfaceDeclaration", "declarator": "classOrInterfaceDeclaration", "var_name": "classOrInterfaceDeclaration"}], "file": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/KiePMMLModelFactoryUtilsTest.java"}, "test_case": {"identifier": "addOutputFieldsPopulation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addOutputFieldsPopulation() {\n        BlockStmt blockStmt = new BlockStmt();\n        List<KiePMMLOutputField> outputFields = IntStream.range(0, 3)\n                .mapToObj(index -> KiePMMLOutputField.builder(\"OUTPUTFIELD-\" + index, Collections.emptyList())\n                        .withRank(new Random().nextInt(3))\n                        .withValue(\"VALUE-\" + index)\n                        .withTargetField(\"TARGETFIELD-\" + index)\n                        .build())\n                .collect(Collectors.toList());\n        KiePMMLModelFactoryUtils.addOutputFieldsPopulation(blockStmt, outputFields);\n        List<MethodCallExpr> retrieved = getMethodCallExprList(blockStmt, outputFields.size(), \"outputFields\", \"add\");\n        for (KiePMMLOutputField outputField : outputFields) {\n            assertTrue(retrieved.stream()\n                               .filter(methodCallExpr -> methodCallExpr.getArguments().size() == 1)\n                               .map(methodCallExpr -> methodCallExpr.getArgument(0))\n                               .filter(Expression::isMethodCallExpr)\n                               .map(expressionArgument -> (MethodCallExpr) expressionArgument)\n                               .anyMatch(methodCallExpr -> evaluateOutputFieldPopulation(methodCallExpr, outputField)));\n        }\n    }", "signature": "void addOutputFieldsPopulation()", "full_signature": "@Test public void addOutputFieldsPopulation()", "class_method_signature": "KiePMMLModelFactoryUtilsTest.addOutputFieldsPopulation()", "testcase": true, "constructor": false, "invocations": ["collect", "mapToObj", "range", "build", "withTargetField", "withValue", "withRank", "builder", "emptyList", "nextInt", "toList", "addOutputFieldsPopulation", "getMethodCallExprList", "size", "assertTrue", "anyMatch", "map", "filter", "map", "filter", "stream", "size", "getArguments", "getArgument", "evaluateOutputFieldPopulation"]}, "focal_class": {"identifier": "KiePMMLModelFactoryUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "KiePMMLModelFactoryUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " KiePMMLModelFactoryUtils()", "full_signature": "private  KiePMMLModelFactoryUtils()", "class_method_signature": "KiePMMLModelFactoryUtils.KiePMMLModelFactoryUtils()", "testcase": false, "constructor": true}, {"identifier": "setConstructorSuperNameInvocation", "parameters": "(final String generatedClassName,\n                                      final ConstructorDeclaration constructorDeclaration,\n                                      final String name)", "modifiers": "public static", "return": "void", "signature": "void setConstructorSuperNameInvocation(final String generatedClassName,\n                                      final ConstructorDeclaration constructorDeclaration,\n                                      final String name)", "full_signature": "public static void setConstructorSuperNameInvocation(final String generatedClassName,\n                                      final ConstructorDeclaration constructorDeclaration,\n                                      final String name)", "class_method_signature": "KiePMMLModelFactoryUtils.setConstructorSuperNameInvocation(final String generatedClassName,\n                                      final ConstructorDeclaration constructorDeclaration,\n                                      final String name)", "testcase": false, "constructor": false}, {"identifier": "addOutputFieldsPopulation", "parameters": "(final BlockStmt body, final List<KiePMMLOutputField> outputFields)", "modifiers": "public static", "return": "void", "signature": "void addOutputFieldsPopulation(final BlockStmt body, final List<KiePMMLOutputField> outputFields)", "full_signature": "public static void addOutputFieldsPopulation(final BlockStmt body, final List<KiePMMLOutputField> outputFields)", "class_method_signature": "KiePMMLModelFactoryUtils.addOutputFieldsPopulation(final BlockStmt body, final List<KiePMMLOutputField> outputFields)", "testcase": false, "constructor": false}, {"identifier": "addTransformationsInClassOrInterfaceDeclaration", "parameters": "(final ClassOrInterfaceDeclaration toPopulate, final TransformationDictionary transformationDictionary, final LocalTransformations localTransformations)", "modifiers": "public static", "return": "void", "signature": "void addTransformationsInClassOrInterfaceDeclaration(final ClassOrInterfaceDeclaration toPopulate, final TransformationDictionary transformationDictionary, final LocalTransformations localTransformations)", "full_signature": "public static void addTransformationsInClassOrInterfaceDeclaration(final ClassOrInterfaceDeclaration toPopulate, final TransformationDictionary transformationDictionary, final LocalTransformations localTransformations)", "class_method_signature": "KiePMMLModelFactoryUtils.addTransformationsInClassOrInterfaceDeclaration(final ClassOrInterfaceDeclaration toPopulate, final TransformationDictionary transformationDictionary, final LocalTransformations localTransformations)", "testcase": false, "constructor": false}, {"identifier": "populateTransformationsInConstructor", "parameters": "(final ConstructorDeclaration constructorDeclaration, final Map<String, MethodDeclaration> commonDerivedFieldsMethodMap, final Map<String, MethodDeclaration> localDerivedFieldsMethodMap)", "modifiers": "static", "return": "void", "signature": "void populateTransformationsInConstructor(final ConstructorDeclaration constructorDeclaration, final Map<String, MethodDeclaration> commonDerivedFieldsMethodMap, final Map<String, MethodDeclaration> localDerivedFieldsMethodMap)", "full_signature": "static void populateTransformationsInConstructor(final ConstructorDeclaration constructorDeclaration, final Map<String, MethodDeclaration> commonDerivedFieldsMethodMap, final Map<String, MethodDeclaration> localDerivedFieldsMethodMap)", "class_method_signature": "KiePMMLModelFactoryUtils.populateTransformationsInConstructor(final ConstructorDeclaration constructorDeclaration, final Map<String, MethodDeclaration> commonDerivedFieldsMethodMap, final Map<String, MethodDeclaration> localDerivedFieldsMethodMap)", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLModelFactoryUtils.java"}, "focal_method": {"identifier": "addOutputFieldsPopulation", "parameters": "(final BlockStmt body, final List<KiePMMLOutputField> outputFields)", "modifiers": "public static", "return": "void", "body": "public static void addOutputFieldsPopulation(final BlockStmt body, final List<KiePMMLOutputField> outputFields) {\n        for (KiePMMLOutputField outputField : outputFields) {\n            NodeList<Expression> expressions = NodeList.nodeList(new StringLiteralExpr(outputField.getName()), new NameExpr(\"Collections.emptyList()\"));\n            MethodCallExpr builder = new MethodCallExpr(new NameExpr(\"KiePMMLOutputField\"), \"builder\", expressions);\n            if (outputField.getRank() != null) {\n                expressions = NodeList.nodeList(new IntegerLiteralExpr(outputField.getRank()));\n                builder = new MethodCallExpr(builder, \"withRank\", expressions);\n            }\n            if (outputField.getValue() != null) {\n                expressions = NodeList.nodeList(new StringLiteralExpr(outputField.getValue().toString()));\n                builder = new MethodCallExpr(builder, \"withValue\", expressions);\n            }\n            String targetField = outputField.getTargetField().orElse(null);\n            if (targetField != null) {\n                expressions = NodeList.nodeList(new StringLiteralExpr(targetField));\n                builder = new MethodCallExpr(builder, \"withTargetField\", expressions);\n            }\n            if (outputField.getResultFeature() != null) {\n                expressions = NodeList.nodeList(new NameExpr(RESULT_FEATURE.class.getName() + \".\" + outputField.getResultFeature().toString()));\n                builder = new MethodCallExpr(builder, \"withResultFeature\", expressions);\n            }\n            Expression newOutputField = new MethodCallExpr(builder, \"build\");\n            expressions = NodeList.nodeList(newOutputField);\n            body.addStatement(new MethodCallExpr(new NameExpr(\"outputFields\"), \"add\", expressions));\n        }\n    }", "signature": "void addOutputFieldsPopulation(final BlockStmt body, final List<KiePMMLOutputField> outputFields)", "full_signature": "public static void addOutputFieldsPopulation(final BlockStmt body, final List<KiePMMLOutputField> outputFields)", "class_method_signature": "KiePMMLModelFactoryUtils.addOutputFieldsPopulation(final BlockStmt body, final List<KiePMMLOutputField> outputFields)", "testcase": false, "constructor": false, "invocations": ["nodeList", "getName", "getRank", "nodeList", "getRank", "getValue", "nodeList", "toString", "getValue", "orElse", "getTargetField", "nodeList", "getResultFeature", "nodeList", "getName", "toString", "getResultFeature", "nodeList", "addStatement"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}