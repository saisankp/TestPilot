{"test_class": {"identifier": "SshUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger( SshUtilTest.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger( SshUtilTest.class )", "var_name": "logger"}], "file": "modules/hms-core/src/test/java/com/vmware/vrack/hms/utils/SshUtilTest.java"}, "test_case": {"identifier": "testExecuteCommandWithNullSessionObj", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecuteCommandWithNullSessionObj()\n    {\n        logger.info( \"[TS] :  testExecuteCommandWithNullSessionObj\" );\n        Session sessionobj = null;\n        String command = \"random cmd\";\n        String expResult = \"\";\n        String result = null;\n        try\n        {\n            result = SshUtil.executeCommand( sessionobj, command );\n        }\n        catch ( JSchException ex )\n        {\n        }\n        catch ( IOException ex )\n        {\n        }\n\n        logger.info( \"[TS] : Expected result : Result of the command is NULL, actual result : Result of the command = \"\n            + result );\n        assertNull( result );\n    }", "signature": "void testExecuteCommandWithNullSessionObj()", "full_signature": "@Test public void testExecuteCommandWithNullSessionObj()", "class_method_signature": "SshUtilTest.testExecuteCommandWithNullSessionObj()", "testcase": true, "constructor": false, "invocations": ["info", "executeCommand", "info", "assertNull"]}, "focal_class": {"identifier": "SshUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger( SshUtil.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger( SshUtil.class )", "var_name": "logger"}], "methods": [{"identifier": "getSessionObject", "parameters": "( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "modifiers": "public static", "return": "Session", "signature": "Session getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "full_signature": "public static Session getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "class_method_signature": "SshUtil.getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "testcase": false, "constructor": false}, {"identifier": "executeCommand", "parameters": "( Session sessionObj, String command )", "modifiers": "public static", "return": "String", "signature": "String executeCommand( Session sessionObj, String command )", "full_signature": "public static String executeCommand( Session sessionObj, String command )", "class_method_signature": "SshUtil.executeCommand( Session sessionObj, String command )", "testcase": false, "constructor": false}, {"identifier": "upload", "parameters": "( Session session, InputStream localInputStream, String remoteFile )", "modifiers": "public static", "return": "void", "signature": "void upload( Session session, InputStream localInputStream, String remoteFile )", "full_signature": "public static void upload( Session session, InputStream localInputStream, String remoteFile )", "class_method_signature": "SshUtil.upload( Session session, InputStream localInputStream, String remoteFile )", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "( Session session, OutputStream localOutputStream, String remoteFile )", "modifiers": "public static", "return": "void", "signature": "void download( Session session, OutputStream localOutputStream, String remoteFile )", "full_signature": "public static void download( Session session, OutputStream localOutputStream, String remoteFile )", "class_method_signature": "SshUtil.download( Session session, OutputStream localOutputStream, String remoteFile )", "testcase": false, "constructor": false}, {"identifier": "lstat", "parameters": "( Session session, String remoteFile )", "modifiers": "public static", "return": "SftpATTRS", "signature": "SftpATTRS lstat( Session session, String remoteFile )", "full_signature": "public static SftpATTRS lstat( Session session, String remoteFile )", "class_method_signature": "SshUtil.lstat( Session session, String remoteFile )", "testcase": false, "constructor": false}], "file": "modules/hms-core/src/main/java/com/vmware/vrack/hms/utils/SshUtil.java"}, "focal_method": {"identifier": "executeCommand", "parameters": "( Session sessionObj, String command )", "modifiers": "public static", "return": "String", "body": "public static String executeCommand( Session sessionObj, String command )\n        throws JSchException, IOException\n    {\n        StringBuilder builder = null;\n        logger.debug( \"Starting to execute command [\" + command + \"]\" );\n\n        if ( sessionObj != null && command != null && !\"\".equals( command ) )\n        {\n            builder = new StringBuilder();\n            Channel channel = null;\n\n            int arrMaxSize = 1024;\n\n            try\n            {\n                channel = sessionObj.openChannel( \"exec\" );\n                ( (ChannelExec) channel ).setCommand( command );\n                channel.setInputStream( null );\n                ( (ChannelExec) channel ).setErrStream( System.err );\n                InputStream in = channel.getInputStream();\n                channel.connect();\n\n                byte[] tmp = new byte[arrMaxSize];\n\n                while ( true )\n                {\n                    while ( in.available() > 0 )\n                    {\n                        int i = in.read( tmp, 0, arrMaxSize );\n                        if ( i < 0 )\n                            break;\n                        builder.append( new String( tmp, 0, i ) );\n                    }\n\n                    if ( channel.isClosed() )\n                    {\n                        break;\n                    }\n                    try\n                    {\n                        Thread.sleep( 500 );\n                    }\n                    catch ( Exception ee )\n                    {\n\n                    }\n                }\n\n                if ( channel.isClosed() && channel.getExitStatus() != 0 )\n                {\n                    logger.debug( \"Command exited with error code \" + channel.getExitStatus() );\n                }\n            }\n            catch ( Exception e )\n            {\n                logger.error( \"Received exception during command execution\", e );\n            }\n            finally\n            {\n                if ( channel != null && channel.isConnected() )\n                {\n                    channel.disconnect();\n                }\n                logger.debug( \"End of execution of command [\" + command + \"]\" );\n            }\n            return builder.toString();\n        }\n        return null;\n    }", "signature": "String executeCommand( Session sessionObj, String command )", "full_signature": "public static String executeCommand( Session sessionObj, String command )", "class_method_signature": "SshUtil.executeCommand( Session sessionObj, String command )", "testcase": false, "constructor": false, "invocations": ["debug", "equals", "openChannel", "setCommand", "setInputStream", "setErrStream", "getInputStream", "connect", "available", "read", "append", "isClosed", "sleep", "isClosed", "getExitStatus", "debug", "getExitStatus", "error", "isConnected", "disconnect", "debug", "toString"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}