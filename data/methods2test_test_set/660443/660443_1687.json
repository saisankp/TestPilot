{"test_class": {"identifier": "DistanceMomentTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "boolean standAlone = false;", "modifier": "", "type": "boolean", "declarator": "standAlone = false", "var_name": "standAlone"}], "file": "descriptor/fingerprint/src/test/java/org/openscience/cdk/similarity/DistanceMomentTest.java"}, "test_case": {"identifier": "testGenerateMoments", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerateMoments() throws Exception {\n        String filename = \"data/mdl/sim3d1.sdf\";\n        IAtomContainer ac = loadMolecule(filename);\n        float[] expected = new float[]{3.710034f, 1.780116f, 0.26535583f, 3.7945938f, 2.2801101f, 0.20164771f, 7.1209f,\n                9.234152f, -0.49032924f, 6.6067924f, 8.89391f, -0.048539735f};\n        float[] actual = DistanceMoment.generateMoments(ac);\n\n        // no assertArrayEquals for junit 4.5\n        for (int i = 0; i < expected.length; i++) {\n            Assert.assertEquals(expected[i], actual[i], 0.000001);\n        }\n\n    }", "signature": "void testGenerateMoments()", "full_signature": "@Test public void testGenerateMoments()", "class_method_signature": "DistanceMomentTest.testGenerateMoments()", "testcase": true, "constructor": false, "invocations": ["loadMolecule", "generateMoments", "assertEquals"]}, "focal_class": {"identifier": "DistanceMoment", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getGeometricCenter", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private static", "return": "Point3d", "signature": "Point3d getGeometricCenter(IAtomContainer atomContainer)", "full_signature": "private static Point3d getGeometricCenter(IAtomContainer atomContainer)", "class_method_signature": "DistanceMoment.getGeometricCenter(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "mu1", "parameters": "(double[] x)", "modifiers": "private static", "return": "float", "signature": "float mu1(double[] x)", "full_signature": "private static float mu1(double[] x)", "class_method_signature": "DistanceMoment.mu1(double[] x)", "testcase": false, "constructor": false}, {"identifier": "mu2", "parameters": "(double[] x, double mean)", "modifiers": "private static", "return": "float", "signature": "float mu2(double[] x, double mean)", "full_signature": "private static float mu2(double[] x, double mean)", "class_method_signature": "DistanceMoment.mu2(double[] x, double mean)", "testcase": false, "constructor": false}, {"identifier": "mu3", "parameters": "(double[] x, double mean, double sigma)", "modifiers": "private static", "return": "float", "signature": "float mu3(double[] x, double mean, double sigma)", "full_signature": "private static float mu3(double[] x, double mean, double sigma)", "class_method_signature": "DistanceMoment.mu3(double[] x, double mean, double sigma)", "testcase": false, "constructor": false}, {"identifier": "generateMoments", "parameters": "(IAtomContainer atomContainer)", "modifiers": "public static", "return": "float[]", "signature": "float[] generateMoments(IAtomContainer atomContainer)", "full_signature": "public static float[] generateMoments(IAtomContainer atomContainer)", "class_method_signature": "DistanceMoment.generateMoments(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer query, IAtomContainer target)", "modifiers": "public static", "return": "float", "signature": "float calculate(IAtomContainer query, IAtomContainer target)", "full_signature": "public static float calculate(IAtomContainer query, IAtomContainer target)", "class_method_signature": "DistanceMoment.calculate(IAtomContainer query, IAtomContainer target)", "testcase": false, "constructor": false}], "file": "descriptor/fingerprint/src/main/java/org/openscience/cdk/similarity/DistanceMoment.java"}, "focal_method": {"identifier": "generateMoments", "parameters": "(IAtomContainer atomContainer)", "modifiers": "public static", "return": "float[]", "body": "public static float[] generateMoments(IAtomContainer atomContainer) throws CDKException {\n        // lets check if we have 3D coordinates\n        Iterator<IAtom> atoms;\n\n        int natom = atomContainer.getAtomCount();\n\n        Point3d ctd = getGeometricCenter(atomContainer);\n        Point3d cst = new Point3d();\n        Point3d fct = new Point3d();\n        Point3d ftf = new Point3d();\n\n        double[] distCtd = new double[natom];\n        double[] distCst = new double[natom];\n        double[] distFct = new double[natom];\n        double[] distFtf = new double[natom];\n\n        atoms = atomContainer.atoms().iterator();\n        int counter = 0;\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n\n        // eval dist to centroid\n        while (atoms.hasNext()) {\n            IAtom atom = atoms.next();\n            Point3d p = atom.getPoint3d();\n            double d = p.distance(ctd);\n            distCtd[counter++] = d;\n\n            if (d < min) {\n                cst.x = p.x;\n                cst.y = p.y;\n                cst.z = p.z;\n                min = d;\n            }\n            if (d > max) {\n                fct.x = p.x;\n                fct.y = p.y;\n                fct.z = p.z;\n                max = d;\n            }\n        }\n\n        // eval dist to cst\n        atoms = atomContainer.atoms().iterator();\n        counter = 0;\n        while (atoms.hasNext()) {\n            IAtom atom = atoms.next();\n            Point3d p = atom.getPoint3d();\n            double d = p.distance(cst);\n            distCst[counter++] = d;\n        }\n\n        // eval dist to fct\n        atoms = atomContainer.atoms().iterator();\n        counter = 0;\n        max = Double.MIN_VALUE;\n        while (atoms.hasNext()) {\n            IAtom atom = atoms.next();\n            Point3d p = atom.getPoint3d();\n            double d = p.distance(fct);\n            distFct[counter++] = d;\n\n            if (d > max) {\n                ftf.x = p.x;\n                ftf.y = p.y;\n                ftf.z = p.z;\n                max = d;\n            }\n        }\n\n        // eval dist to ftf\n        atoms = atomContainer.atoms().iterator();\n        counter = 0;\n        while (atoms.hasNext()) {\n            IAtom atom = atoms.next();\n            Point3d p = atom.getPoint3d();\n            double d = p.distance(ftf);\n            distFtf[counter++] = d;\n        }\n\n        float[] moments = new float[12];\n\n        float mean = mu1(distCtd);\n        float sigma2 = mu2(distCtd, mean);\n        float skewness = mu3(distCtd, mean, Math.sqrt(sigma2));\n        moments[0] = mean;\n        moments[1] = sigma2;\n        moments[2] = skewness;\n\n        mean = mu1(distCst);\n        sigma2 = mu2(distCst, mean);\n        skewness = mu3(distCst, mean, Math.sqrt(sigma2));\n        moments[3] = mean;\n        moments[4] = sigma2;\n        moments[5] = skewness;\n\n        mean = mu1(distFct);\n        sigma2 = mu2(distFct, mean);\n        skewness = mu3(distFct, mean, Math.sqrt(sigma2));\n        moments[6] = mean;\n        moments[7] = sigma2;\n        moments[8] = skewness;\n\n        mean = mu1(distFtf);\n        sigma2 = mu2(distFtf, mean);\n        skewness = mu3(distFtf, mean, Math.sqrt(sigma2));\n        moments[9] = mean;\n        moments[10] = sigma2;\n        moments[11] = skewness;\n\n        return moments;\n    }", "signature": "float[] generateMoments(IAtomContainer atomContainer)", "full_signature": "public static float[] generateMoments(IAtomContainer atomContainer)", "class_method_signature": "DistanceMoment.generateMoments(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["getAtomCount", "getGeometricCenter", "iterator", "atoms", "hasNext", "next", "getPoint3d", "distance", "iterator", "atoms", "hasNext", "next", "getPoint3d", "distance", "iterator", "atoms", "hasNext", "next", "getPoint3d", "distance", "iterator", "atoms", "hasNext", "next", "getPoint3d", "distance", "mu1", "mu2", "mu3", "sqrt", "mu1", "mu2", "mu3", "sqrt", "mu1", "mu2", "mu3", "sqrt", "mu1", "mu2", "mu3", "sqrt"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}