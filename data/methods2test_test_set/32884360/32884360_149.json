{"test_class": {"identifier": "AkServerUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/server/AkServerUtilTest.java"}, "test_case": {"identifier": "getSignedShort", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getSignedShort() {\n        assertEquals(     0, AkServerUtil.getShort(byteArray(0x00, 0x00), 0));\n        assertEquals(     1, AkServerUtil.getShort(byteArray(0x01, 0x00), 0));\n        assertEquals( 32767, AkServerUtil.getShort(byteArray(0xFF, 0x7F), 0));\n        assertEquals(-32768, AkServerUtil.getShort(byteArray(0x00, 0x80), 0));\n        assertEquals(    -2, AkServerUtil.getShort(byteArray(0xFE, 0xFF), 0));\n        assertEquals(    -1, AkServerUtil.getShort(byteArray(0xFF, 0xFF), 0));\n    }", "signature": "void getSignedShort()", "full_signature": "@Test public void getSignedShort()", "class_method_signature": "AkServerUtilTest.getSignedShort()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getShort", "byteArray", "assertEquals", "getShort", "byteArray", "assertEquals", "getShort", "byteArray", "assertEquals", "getShort", "byteArray", "assertEquals", "getShort", "byteArray", "assertEquals", "getShort", "byteArray"]}, "focal_class": {"identifier": "AkServerUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static char[] HEX_DIGITS = { '0', '1', '2', '3', '4', '5',\n            '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };", "modifier": "private final static", "type": "char[]", "declarator": "HEX_DIGITS = { '0', '1', '2', '3', '4', '5',\n            '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' }", "var_name": "HEX_DIGITS"}, {"original_string": "public final static String NEW_LINE = System.getProperty(\"line.separator\");", "modifier": "public final static", "type": "String", "declarator": "NEW_LINE = System.getProperty(\"line.separator\")", "var_name": "NEW_LINE"}, {"original_string": "private static String UNEXPECTED_SIGNED_WIDTH_MSG = \"Width must be 0,1,2,3,4 or 8 but was: \";", "modifier": "private static", "type": "String", "declarator": "UNEXPECTED_SIGNED_WIDTH_MSG = \"Width must be 0,1,2,3,4 or 8 but was: \"", "var_name": "UNEXPECTED_SIGNED_WIDTH_MSG"}, {"original_string": "private static String UNEXPECTED_UNSIGNED_WIDTH_MSG = \"Width must be 0,1,2,3, or 4 but was: \";", "modifier": "private static", "type": "String", "declarator": "UNEXPECTED_UNSIGNED_WIDTH_MSG = \"Width must be 0,1,2,3, or 4 but was: \"", "var_name": "UNEXPECTED_UNSIGNED_WIDTH_MSG"}], "methods": [{"identifier": "getSignedIntegerByWidth", "parameters": "(final byte[] bytes, final int index, final int width)", "modifiers": "public static", "return": "long", "signature": "long getSignedIntegerByWidth(final byte[] bytes, final int index, final int width)", "full_signature": "public static long getSignedIntegerByWidth(final byte[] bytes, final int index, final int width)", "class_method_signature": "AkServerUtil.getSignedIntegerByWidth(final byte[] bytes, final int index, final int width)", "testcase": false, "constructor": false}, {"identifier": "getUnsignedIntegerByWidth", "parameters": "(final byte[] bytes, final int index, final int width)", "modifiers": "public static", "return": "long", "signature": "long getUnsignedIntegerByWidth(final byte[] bytes, final int index, final int width)", "full_signature": "public static long getUnsignedIntegerByWidth(final byte[] bytes, final int index, final int width)", "class_method_signature": "AkServerUtil.getUnsignedIntegerByWidth(final byte[] bytes, final int index, final int width)", "testcase": false, "constructor": false}, {"identifier": "putIntegerByWidth", "parameters": "(byte[] destination, int destinationIndex, int width, long value)", "modifiers": "public static", "return": "int", "signature": "int putIntegerByWidth(byte[] destination, int destinationIndex, int width, long value)", "full_signature": "public static int putIntegerByWidth(byte[] destination, int destinationIndex, int width, long value)", "class_method_signature": "AkServerUtil.putIntegerByWidth(byte[] destination, int destinationIndex, int width, long value)", "testcase": false, "constructor": false}, {"identifier": "getByte", "parameters": "(byte[] bytes, int index)", "modifiers": "public static", "return": "byte", "signature": "byte getByte(byte[] bytes, int index)", "full_signature": "public static byte getByte(byte[] bytes, int index)", "class_method_signature": "AkServerUtil.getByte(byte[] bytes, int index)", "testcase": false, "constructor": false}, {"identifier": "getUByte", "parameters": "(byte[] bytes, int index)", "modifiers": "public static", "return": "short", "signature": "short getUByte(byte[] bytes, int index)", "full_signature": "public static short getUByte(byte[] bytes, int index)", "class_method_signature": "AkServerUtil.getUByte(byte[] bytes, int index)", "testcase": false, "constructor": false}, {"identifier": "getShort", "parameters": "(byte[] bytes, int index)", "modifiers": "public static", "return": "short", "signature": "short getShort(byte[] bytes, int index)", "full_signature": "public static short getShort(byte[] bytes, int index)", "class_method_signature": "AkServerUtil.getShort(byte[] bytes, int index)", "testcase": false, "constructor": false}, {"identifier": "getUShort", "parameters": "(byte[] bytes, int index)", "modifiers": "public static", "return": "int", "signature": "int getUShort(byte[] bytes, int index)", "full_signature": "public static int getUShort(byte[] bytes, int index)", "class_method_signature": "AkServerUtil.getUShort(byte[] bytes, int index)", "testcase": false, "constructor": false}, {"identifier": "getMediumInt", "parameters": "(byte[] bytes, int index)", "modifiers": "public static", "return": "int", "signature": "int getMediumInt(byte[] bytes, int index)", "full_signature": "public static int getMediumInt(byte[] bytes, int index)", "class_method_signature": "AkServerUtil.getMediumInt(byte[] bytes, int index)", "testcase": false, "constructor": false}, {"identifier": "getUMediumInt", "parameters": "(byte[] bytes, int index)", "modifiers": "public static", "return": "int", "signature": "int getUMediumInt(byte[] bytes, int index)", "full_signature": "public static int getUMediumInt(byte[] bytes, int index)", "class_method_signature": "AkServerUtil.getUMediumInt(byte[] bytes, int index)", "testcase": false, "constructor": false}, {"identifier": "getInt", "parameters": "(byte[] bytes, int index)", "modifiers": "public static", "return": "int", "signature": "int getInt(byte[] bytes, int index)", "full_signature": "public static int getInt(byte[] bytes, int index)", "class_method_signature": "AkServerUtil.getInt(byte[] bytes, int index)", "testcase": false, "constructor": false}, {"identifier": "getUInt", "parameters": "(byte[] bytes, int index)", "modifiers": "public static", "return": "long", "signature": "long getUInt(byte[] bytes, int index)", "full_signature": "public static long getUInt(byte[] bytes, int index)", "class_method_signature": "AkServerUtil.getUInt(byte[] bytes, int index)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "(byte[] bytes, int index)", "modifiers": "public static", "return": "long", "signature": "long getLong(byte[] bytes, int index)", "full_signature": "public static long getLong(byte[] bytes, int index)", "class_method_signature": "AkServerUtil.getLong(byte[] bytes, int index)", "testcase": false, "constructor": false}, {"identifier": "getULong", "parameters": "(byte[] bytes, int index)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger getULong(byte[] bytes, int index)", "full_signature": "public static BigInteger getULong(byte[] bytes, int index)", "class_method_signature": "AkServerUtil.getULong(byte[] bytes, int index)", "testcase": false, "constructor": false}, {"identifier": "putByte", "parameters": "(byte[] bytes, int index, int value)", "modifiers": "public static", "return": "void", "signature": "void putByte(byte[] bytes, int index, int value)", "full_signature": "public static void putByte(byte[] bytes, int index, int value)", "class_method_signature": "AkServerUtil.putByte(byte[] bytes, int index, int value)", "testcase": false, "constructor": false}, {"identifier": "putShort", "parameters": "(byte[] bytes, int index, int value)", "modifiers": "public static", "return": "void", "signature": "void putShort(byte[] bytes, int index, int value)", "full_signature": "public static void putShort(byte[] bytes, int index, int value)", "class_method_signature": "AkServerUtil.putShort(byte[] bytes, int index, int value)", "testcase": false, "constructor": false}, {"identifier": "putMediumInt", "parameters": "(byte[] bytes, int index, int value)", "modifiers": "public static", "return": "void", "signature": "void putMediumInt(byte[] bytes, int index, int value)", "full_signature": "public static void putMediumInt(byte[] bytes, int index, int value)", "class_method_signature": "AkServerUtil.putMediumInt(byte[] bytes, int index, int value)", "testcase": false, "constructor": false}, {"identifier": "putInt", "parameters": "(byte[] bytes, int index, int value)", "modifiers": "public static", "return": "void", "signature": "void putInt(byte[] bytes, int index, int value)", "full_signature": "public static void putInt(byte[] bytes, int index, int value)", "class_method_signature": "AkServerUtil.putInt(byte[] bytes, int index, int value)", "testcase": false, "constructor": false}, {"identifier": "putLong", "parameters": "(byte[] bytes, int index, long value)", "modifiers": "public static", "return": "void", "signature": "void putLong(byte[] bytes, int index, long value)", "full_signature": "public static void putLong(byte[] bytes, int index, long value)", "class_method_signature": "AkServerUtil.putLong(byte[] bytes, int index, long value)", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "(byte[] b, int offset, int size)", "modifiers": "public static", "return": "String", "signature": "String dump(byte[] b, int offset, int size)", "full_signature": "public static String dump(byte[] b, int offset, int size)", "class_method_signature": "AkServerUtil.dump(byte[] b, int offset, int size)", "testcase": false, "constructor": false}, {"identifier": "hex", "parameters": "(byte[] bytes, int start, int length)", "modifiers": "public static", "return": "String", "signature": "String hex(byte[] bytes, int start, int length)", "full_signature": "public static String hex(byte[] bytes, int start, int length)", "class_method_signature": "AkServerUtil.hex(byte[] bytes, int start, int length)", "testcase": false, "constructor": false}, {"identifier": "hex", "parameters": "(StringBuilder sb, long value, int length)", "modifiers": "public static", "return": "StringBuilder", "signature": "StringBuilder hex(StringBuilder sb, long value, int length)", "full_signature": "public static StringBuilder hex(StringBuilder sb, long value, int length)", "class_method_signature": "AkServerUtil.hex(StringBuilder sb, long value, int length)", "testcase": false, "constructor": false}, {"identifier": "hex", "parameters": "(AkibanAppender sb, byte[] bytes, int start,\n            int length)", "modifiers": "public static", "return": "void", "signature": "void hex(AkibanAppender sb, byte[] bytes, int start,\n            int length)", "full_signature": "public static void hex(AkibanAppender sb, byte[] bytes, int start,\n            int length)", "class_method_signature": "AkServerUtil.hex(AkibanAppender sb, byte[] bytes, int start,\n            int length)", "testcase": false, "constructor": false}, {"identifier": "printRuntimeInfo", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void printRuntimeInfo()", "full_signature": "public static void printRuntimeInfo()", "class_method_signature": "AkServerUtil.printRuntimeInfo()", "testcase": false, "constructor": false}, {"identifier": "cleanUpDirectory", "parameters": "(final File file)", "modifiers": "public final static", "return": "boolean", "signature": "boolean cleanUpDirectory(final File file)", "full_signature": "public final static boolean cleanUpDirectory(final File file)", "class_method_signature": "AkServerUtil.cleanUpDirectory(final File file)", "testcase": false, "constructor": false}, {"identifier": "cleanUpFiles", "parameters": "(final File[] files)", "modifiers": "public final static", "return": "boolean", "signature": "boolean cleanUpFiles(final File[] files)", "full_signature": "public final static boolean cleanUpFiles(final File[] files)", "class_method_signature": "AkServerUtil.cleanUpFiles(final File[] files)", "testcase": false, "constructor": false}, {"identifier": "decodeMySQLString", "parameters": "(byte[] bytes, final int offset,\n            final int width, final FieldDef fieldDef)", "modifiers": "public static", "return": "String", "signature": "String decodeMySQLString(byte[] bytes, final int offset,\n            final int width, final FieldDef fieldDef)", "full_signature": "public static String decodeMySQLString(byte[] bytes, final int offset,\n            final int width, final FieldDef fieldDef)", "class_method_signature": "AkServerUtil.decodeMySQLString(byte[] bytes, final int offset,\n            final int width, final FieldDef fieldDef)", "testcase": false, "constructor": false}, {"identifier": "decodeString", "parameters": "(ByteBuffer buffer, String charset)", "modifiers": "static", "return": "String", "signature": "String decodeString(ByteBuffer buffer, String charset)", "full_signature": "static String decodeString(ByteBuffer buffer, String charset)", "class_method_signature": "AkServerUtil.decodeString(ByteBuffer buffer, String charset)", "testcase": false, "constructor": false}, {"identifier": "byteSourceForMySQLString", "parameters": "(byte[] bytes, final int offset,\n                                                      final int width, final FieldDef fieldDef)", "modifiers": "public static", "return": "ByteSource", "signature": "ByteSource byteSourceForMySQLString(byte[] bytes, final int offset,\n                                                      final int width, final FieldDef fieldDef)", "full_signature": "public static ByteSource byteSourceForMySQLString(byte[] bytes, final int offset,\n                                                      final int width, final FieldDef fieldDef)", "class_method_signature": "AkServerUtil.byteSourceForMySQLString(byte[] bytes, final int offset,\n                                                      final int width, final FieldDef fieldDef)", "testcase": false, "constructor": false}, {"identifier": "byteBufferForMySQLString", "parameters": "(byte[] bytes, final int offset,\n                                           final int width, final FieldDef fieldDef)", "modifiers": "public static", "return": "ByteBuffer", "signature": "ByteBuffer byteBufferForMySQLString(byte[] bytes, final int offset,\n                                           final int width, final FieldDef fieldDef)", "full_signature": "public static ByteBuffer byteBufferForMySQLString(byte[] bytes, final int offset,\n                                           final int width, final FieldDef fieldDef)", "class_method_signature": "AkServerUtil.byteBufferForMySQLString(byte[] bytes, final int offset,\n                                           final int width, final FieldDef fieldDef)", "testcase": false, "constructor": false}, {"identifier": "varWidth", "parameters": "(final int length)", "modifiers": "public static", "return": "int", "signature": "int varWidth(final int length)", "full_signature": "public static int varWidth(final int length)", "class_method_signature": "AkServerUtil.varWidth(final int length)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object a, final Object b)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(final Object a, final Object b)", "full_signature": "public static boolean equals(final Object a, final Object b)", "class_method_signature": "AkServerUtil.equals(final Object a, final Object b)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "(final Object o)", "modifiers": "public static", "return": "int", "signature": "int hashCode(final Object o)", "full_signature": "public static int hashCode(final Object o)", "class_method_signature": "AkServerUtil.hashCode(final Object o)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/server/AkServerUtil.java"}, "focal_method": {"identifier": "getShort", "parameters": "(byte[] bytes, int index)", "modifiers": "public static", "return": "short", "body": "public static short getShort(byte[] bytes, int index) {\n        return (short) ((bytes[index] & 0xFF) | (bytes[index+1] & 0xFF) << 8);\n    }", "signature": "short getShort(byte[] bytes, int index)", "full_signature": "public static short getShort(byte[] bytes, int index)", "class_method_signature": "AkServerUtil.getShort(byte[] bytes, int index)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}