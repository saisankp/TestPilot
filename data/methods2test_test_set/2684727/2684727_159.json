{"test_class": {"identifier": "CategoriesTableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NAME1 = \"name1\";", "modifier": "private static final", "type": "String", "declarator": "NAME1 = \"name1\"", "var_name": "NAME1"}, {"original_string": "private static final String NAME2 = \"name2\";", "modifier": "private static final", "type": "String", "declarator": "NAME2 = \"name2\"", "var_name": "NAME2"}, {"original_string": "private static final String CODE1 = \"code1\";", "modifier": "private static final", "type": "String", "declarator": "CODE1 = \"code1\"", "var_name": "CODE1"}, {"original_string": "private static final String CODE2 = \"code2\";", "modifier": "private static final", "type": "String", "declarator": "CODE2 = \"code2\"", "var_name": "CODE2"}, {"original_string": "private static final int ORDER_ID1 = 1;", "modifier": "private static final", "type": "int", "declarator": "ORDER_ID1 = 1", "var_name": "ORDER_ID1"}, {"original_string": "private static final int ORDER_ID2 = 2;", "modifier": "private static final", "type": "int", "declarator": "ORDER_ID2 = 2", "var_name": "ORDER_ID2"}, {"original_string": "CategoriesTable mCategoriesTable;", "modifier": "", "type": "CategoriesTable", "declarator": "mCategoriesTable", "var_name": "mCategoriesTable"}, {"original_string": "@Mock\n    SQLiteDatabase mSQLiteDatabase;", "modifier": "@Mock", "type": "SQLiteDatabase", "declarator": "mSQLiteDatabase", "var_name": "mSQLiteDatabase"}, {"original_string": "@Mock\n    TableDefaultsCustomizer mTableDefaultsCustomizer;", "modifier": "@Mock", "type": "TableDefaultsCustomizer", "declarator": "mTableDefaultsCustomizer", "var_name": "mTableDefaultsCustomizer"}, {"original_string": "@Mock\n    OrderingPreferencesManager orderingPreferencesManager;", "modifier": "@Mock", "type": "OrderingPreferencesManager", "declarator": "orderingPreferencesManager", "var_name": "orderingPreferencesManager"}, {"original_string": "@Captor\n    ArgumentCaptor<String> mSqlCaptor;", "modifier": "@Captor", "type": "ArgumentCaptor<String>", "declarator": "mSqlCaptor", "var_name": "mSqlCaptor"}, {"original_string": "SQLiteOpenHelper mSQLiteOpenHelper;", "modifier": "", "type": "SQLiteOpenHelper", "declarator": "mSQLiteOpenHelper", "var_name": "mSQLiteOpenHelper"}, {"original_string": "Category mCategory1;", "modifier": "", "type": "Category", "declarator": "mCategory1", "var_name": "mCategory1"}, {"original_string": "Category mCategory2;", "modifier": "", "type": "Category", "declarator": "mCategory2", "var_name": "mCategory2"}], "file": "app/src/test/java/co/smartreceipts/android/persistence/database/tables/CategoriesTableTest.java"}, "test_case": {"identifier": "onUpgradeFromV14", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onUpgradeFromV14() {\n        final int oldVersion = 14;\n        final int newVersion = DatabaseHelper.DATABASE_VERSION;\n\n        final TableDefaultsCustomizer customizer = mock(TableDefaultsCustomizer.class);\n        mCategoriesTable.onUpgrade(mSQLiteDatabase, oldVersion, newVersion, customizer);\n        verify(mSQLiteDatabase, atLeastOnce()).execSQL(mSqlCaptor.capture());\n        verify(customizer, never()).insertCategoryDefaults(mCategoriesTable);\n\n        assertEquals(mSqlCaptor.getAllValues().get(0), \"ALTER TABLE \" + mCategoriesTable.getTableName() + \" ADD drive_sync_id TEXT\");\n        assertEquals(mSqlCaptor.getAllValues().get(1), \"ALTER TABLE \" + mCategoriesTable.getTableName() + \" ADD drive_is_synced BOOLEAN DEFAULT 0\");\n        assertEquals(mSqlCaptor.getAllValues().get(2), \"ALTER TABLE \" + mCategoriesTable.getTableName() + \" ADD drive_marked_for_deletion BOOLEAN DEFAULT 0\");\n        assertEquals(mSqlCaptor.getAllValues().get(3), \"ALTER TABLE \" + mCategoriesTable.getTableName() + \" ADD last_local_modification_time DATE\");\n    }", "signature": "void onUpgradeFromV14()", "full_signature": "@Test public void onUpgradeFromV14()", "class_method_signature": "CategoriesTableTest.onUpgradeFromV14()", "testcase": true, "constructor": false, "invocations": ["mock", "onUpgrade", "execSQL", "verify", "atLeastOnce", "capture", "insertCategoryDefaults", "verify", "never", "assertEquals", "get", "getAllValues", "getTableName", "assertEquals", "get", "getAllValues", "getTableName", "assertEquals", "get", "getAllValues", "getTableName", "assertEquals", "get", "getAllValues", "getTableName"]}, "focal_class": {"identifier": "CategoriesTable", "superclass": "extends AbstractSqlTable<Category>", "interfaces": "", "fields": [{"original_string": "public static final String TABLE_NAME = \"categories\";", "modifier": "public static final", "type": "String", "declarator": "TABLE_NAME = \"categories\"", "var_name": "TABLE_NAME"}, {"original_string": "public static final String COLUMN_NAME = \"name\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME = \"name\"", "var_name": "COLUMN_NAME"}, {"original_string": "public static final String COLUMN_CODE = \"code\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_CODE = \"code\"", "var_name": "COLUMN_CODE"}, {"original_string": "public static final String COLUMN_BREAKDOWN = \"breakdown\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_BREAKDOWN = \"breakdown\"", "var_name": "COLUMN_BREAKDOWN"}], "methods": [{"identifier": "CategoriesTable", "parameters": "(@NonNull SQLiteOpenHelper sqLiteOpenHelper,\n                           @NonNull OrderingPreferencesManager orderingPreferencesManager)", "modifiers": "public", "return": "", "signature": " CategoriesTable(@NonNull SQLiteOpenHelper sqLiteOpenHelper,\n                           @NonNull OrderingPreferencesManager orderingPreferencesManager)", "full_signature": "public  CategoriesTable(@NonNull SQLiteOpenHelper sqLiteOpenHelper,\n                           @NonNull OrderingPreferencesManager orderingPreferencesManager)", "class_method_signature": "CategoriesTable.CategoriesTable(@NonNull SQLiteOpenHelper sqLiteOpenHelper,\n                           @NonNull OrderingPreferencesManager orderingPreferencesManager)", "testcase": false, "constructor": true}, {"identifier": "onCreate", "parameters": "(@NonNull SQLiteDatabase db, @NonNull TableDefaultsCustomizer customizer)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void onCreate(@NonNull SQLiteDatabase db, @NonNull TableDefaultsCustomizer customizer)", "full_signature": "@Override public synchronized void onCreate(@NonNull SQLiteDatabase db, @NonNull TableDefaultsCustomizer customizer)", "class_method_signature": "CategoriesTable.onCreate(@NonNull SQLiteDatabase db, @NonNull TableDefaultsCustomizer customizer)", "testcase": false, "constructor": false}, {"identifier": "onUpgrade", "parameters": "(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "full_signature": "@Override public synchronized void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "class_method_signature": "CategoriesTable.onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/persistence/database/tables/CategoriesTable.java"}, "focal_method": {"identifier": "onUpgrade", "parameters": "(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n    public synchronized void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer) {\n        super.onUpgrade(db, oldVersion, newVersion, customizer);\n        if (oldVersion <= 2) { \n            final String alterCategories = \"ALTER TABLE \" + getTableName() +\n                                           \" ADD \" + COLUMN_BREAKDOWN + \" BOOLEAN DEFAULT 1\";\n            db.execSQL(alterCategories);\n        }\n        if (oldVersion <= 14) {\n            onUpgradeToAddSyncInformation(db, oldVersion, newVersion);\n        }\n        if (oldVersion <= 15) {\n            // changing primary key\n            final String copyTable = \"CREATE TABLE \" + getTableName() + \"_copy\" + \" (\"\n                    + COLUMN_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \"\n                    + COLUMN_NAME + \" TEXT, \"\n                    + COLUMN_CODE + \" TEXT, \"\n                    + COLUMN_BREAKDOWN + \" BOOLEAN DEFAULT 1, \"\n                    + COLUMN_DRIVE_SYNC_ID + \" TEXT, \"\n                    + COLUMN_DRIVE_IS_SYNCED + \" BOOLEAN DEFAULT 0, \"\n                    + COLUMN_DRIVE_MARKED_FOR_DELETION + \" BOOLEAN DEFAULT 0, \"\n                    + COLUMN_LAST_LOCAL_MODIFICATION_TIME + \" DATE, \"\n                    + COLUMN_CUSTOM_ORDER_ID + \" INTEGER DEFAULT 0\"\n                    + \");\";\n            Logger.debug(this, copyTable);\n            db.execSQL(copyTable);\n\n            final String baseColumns = TextUtils.join(\", \", new String[]{\n                    COLUMN_NAME, COLUMN_CODE, COLUMN_BREAKDOWN, COLUMN_DRIVE_SYNC_ID, COLUMN_DRIVE_IS_SYNCED,\n                    COLUMN_DRIVE_MARKED_FOR_DELETION, COLUMN_LAST_LOCAL_MODIFICATION_TIME});\n\n            final String insertData = \"INSERT INTO \" + getTableName() + \"_copy\"\n                    + \" (\" + baseColumns + \") \"\n                    + \"SELECT \" + baseColumns\n                    + \" FROM \" + getTableName() + \";\";\n            Logger.debug(this, insertData);\n            db.execSQL(insertData);\n\n            final String dropOldTable = \"DROP TABLE \" + getTableName() + \";\";\n            Logger.debug(this, dropOldTable);\n            db.execSQL(dropOldTable);\n\n            final String renameTable = \"ALTER TABLE \" + getTableName() + \"_copy\" + \" RENAME TO \" + getTableName() + \";\";\n            Logger.debug(this, renameTable);\n            db.execSQL(renameTable);\n        }\n\n        if (oldVersion <= 18) { // v18 => 19 added UUID column\n            onUpgradeToAddUUID(db, oldVersion);\n        }\n    }", "signature": "void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "full_signature": "@Override public synchronized void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "class_method_signature": "CategoriesTable.onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "testcase": false, "constructor": false, "invocations": ["onUpgrade", "getTableName", "execSQL", "onUpgradeToAddSyncInformation", "getTableName", "debug", "execSQL", "join", "getTableName", "getTableName", "debug", "execSQL", "getTableName", "debug", "execSQL", "getTableName", "getTableName", "debug", "execSQL", "onUpgradeToAddUUID"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}