{"test_class": {"identifier": "SPVBlockStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final NetworkParameters UNITTEST = UnitTestParams.get();", "modifier": "private static final", "type": "NetworkParameters", "declarator": "UNITTEST = UnitTestParams.get()", "var_name": "UNITTEST"}, {"original_string": "private File blockStoreFile;", "modifier": "private", "type": "File", "declarator": "blockStoreFile", "var_name": "blockStoreFile"}], "file": "core/src/test/java/org/ulordj/store/SPVBlockStoreTest.java"}, "test_case": {"identifier": "twoStores_sequentially_butMismatchingCapacity", "parameters": "()", "modifiers": "@Test(expected = BlockStoreException.class) public", "return": "void", "body": "@Test(expected = BlockStoreException.class)\n    public void twoStores_sequentially_butMismatchingCapacity() throws Exception {\n        SPVBlockStore store = new SPVBlockStore(UNITTEST, blockStoreFile, 10, false);\n        store.close();\n        store = new SPVBlockStore(UNITTEST, blockStoreFile, 20, false);\n    }", "signature": "void twoStores_sequentially_butMismatchingCapacity()", "full_signature": "@Test(expected = BlockStoreException.class) public void twoStores_sequentially_butMismatchingCapacity()", "class_method_signature": "SPVBlockStoreTest.twoStores_sequentially_butMismatchingCapacity()", "testcase": true, "constructor": false, "invocations": ["close"]}, "focal_class": {"identifier": "SPVBlockStore", "superclass": "", "interfaces": "implements BlockStore", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(SPVBlockStore.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SPVBlockStore.class)", "var_name": "log"}, {"original_string": "public static final int DEFAULT_CAPACITY = 5000;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_CAPACITY = 5000", "var_name": "DEFAULT_CAPACITY"}, {"original_string": "public static final String HEADER_MAGIC = \"SPVB\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_MAGIC = \"SPVB\"", "var_name": "HEADER_MAGIC"}, {"original_string": "protected volatile MappedByteBuffer buffer;", "modifier": "protected volatile", "type": "MappedByteBuffer", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "protected final NetworkParameters params;", "modifier": "protected final", "type": "NetworkParameters", "declarator": "params", "var_name": "params"}, {"original_string": "protected ReentrantLock lock = Threading.lock(\"SPVBlockStore\");", "modifier": "protected", "type": "ReentrantLock", "declarator": "lock = Threading.lock(\"SPVBlockStore\")", "var_name": "lock"}, {"original_string": "protected LinkedHashMap<Sha256Hash, StoredBlock> blockCache = new LinkedHashMap<Sha256Hash, StoredBlock>() {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<Sha256Hash, StoredBlock> entry) {\n            return size() > 2050;  // Slightly more than the difficulty transition period.\n        }\n    };", "modifier": "protected", "type": "LinkedHashMap<Sha256Hash, StoredBlock>", "declarator": "blockCache = new LinkedHashMap<Sha256Hash, StoredBlock>() {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<Sha256Hash, StoredBlock> entry) {\n            return size() > 2050;  // Slightly more than the difficulty transition period.\n        }\n    }", "var_name": "blockCache"}, {"original_string": "private static final Object NOT_FOUND_MARKER = new Object();", "modifier": "private static final", "type": "Object", "declarator": "NOT_FOUND_MARKER = new Object()", "var_name": "NOT_FOUND_MARKER"}, {"original_string": "protected LinkedHashMap<Sha256Hash, Object> notFoundCache = new LinkedHashMap<Sha256Hash, Object>() {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<Sha256Hash, Object> entry) {\n            return size() > 100;  // This was chosen arbitrarily.\n        }\n    };", "modifier": "protected", "type": "LinkedHashMap<Sha256Hash, Object>", "declarator": "notFoundCache = new LinkedHashMap<Sha256Hash, Object>() {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<Sha256Hash, Object> entry) {\n            return size() > 100;  // This was chosen arbitrarily.\n        }\n    }", "var_name": "notFoundCache"}, {"original_string": "protected FileLock fileLock = null;", "modifier": "protected", "type": "FileLock", "declarator": "fileLock = null", "var_name": "fileLock"}, {"original_string": "protected RandomAccessFile randomAccessFile = null;", "modifier": "protected", "type": "RandomAccessFile", "declarator": "randomAccessFile = null", "var_name": "randomAccessFile"}, {"original_string": "private int fileLength;", "modifier": "private", "type": "int", "declarator": "fileLength", "var_name": "fileLength"}, {"original_string": "protected StoredBlock lastChainHead = null;", "modifier": "protected", "type": "StoredBlock", "declarator": "lastChainHead = null", "var_name": "lastChainHead"}, {"original_string": "protected static final int RECORD_SIZE = 32 /* hash */ + StoredBlock.COMPACT_SERIALIZED_SIZE;", "modifier": "protected static final", "type": "int", "declarator": "RECORD_SIZE = 32 /* hash */ + StoredBlock.COMPACT_SERIALIZED_SIZE", "var_name": "RECORD_SIZE"}, {"original_string": "protected static final int FILE_PROLOGUE_BYTES = 1024;", "modifier": "protected static final", "type": "int", "declarator": "FILE_PROLOGUE_BYTES = 1024", "var_name": "FILE_PROLOGUE_BYTES"}], "methods": [{"identifier": "SPVBlockStore", "parameters": "(NetworkParameters params, File file)", "modifiers": "public", "return": "", "signature": " SPVBlockStore(NetworkParameters params, File file)", "full_signature": "public  SPVBlockStore(NetworkParameters params, File file)", "class_method_signature": "SPVBlockStore.SPVBlockStore(NetworkParameters params, File file)", "testcase": false, "constructor": true}, {"identifier": "SPVBlockStore", "parameters": "(NetworkParameters params, File file, int capacity, boolean grow)", "modifiers": "public", "return": "", "signature": " SPVBlockStore(NetworkParameters params, File file, int capacity, boolean grow)", "full_signature": "public  SPVBlockStore(NetworkParameters params, File file, int capacity, boolean grow)", "class_method_signature": "SPVBlockStore.SPVBlockStore(NetworkParameters params, File file, int capacity, boolean grow)", "testcase": false, "constructor": true}, {"identifier": "initNewStore", "parameters": "(NetworkParameters params)", "modifiers": "private", "return": "void", "signature": "void initNewStore(NetworkParameters params)", "full_signature": "private void initNewStore(NetworkParameters params)", "class_method_signature": "SPVBlockStore.initNewStore(NetworkParameters params)", "testcase": false, "constructor": false}, {"identifier": "getFileSize", "parameters": "(int capacity)", "modifiers": "public static final", "return": "int", "signature": "int getFileSize(int capacity)", "full_signature": "public static final int getFileSize(int capacity)", "class_method_signature": "SPVBlockStore.getFileSize(int capacity)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(StoredBlock block)", "modifiers": "@Override public", "return": "void", "signature": "void put(StoredBlock block)", "full_signature": "@Override public void put(StoredBlock block)", "class_method_signature": "SPVBlockStore.put(StoredBlock block)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Sha256Hash hash)", "modifiers": "@Override @Nullable public", "return": "StoredBlock", "signature": "StoredBlock get(Sha256Hash hash)", "full_signature": "@Override @Nullable public StoredBlock get(Sha256Hash hash)", "class_method_signature": "SPVBlockStore.get(Sha256Hash hash)", "testcase": false, "constructor": false}, {"identifier": "getChainHead", "parameters": "()", "modifiers": "@Override public", "return": "StoredBlock", "signature": "StoredBlock getChainHead()", "full_signature": "@Override public StoredBlock getChainHead()", "class_method_signature": "SPVBlockStore.getChainHead()", "testcase": false, "constructor": false}, {"identifier": "setChainHead", "parameters": "(StoredBlock chainHead)", "modifiers": "@Override public", "return": "void", "signature": "void setChainHead(StoredBlock chainHead)", "full_signature": "@Override public void setChainHead(StoredBlock chainHead)", "class_method_signature": "SPVBlockStore.setChainHead(StoredBlock chainHead)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SPVBlockStore.close()", "testcase": false, "constructor": false}, {"identifier": "getParams", "parameters": "()", "modifiers": "@Override public", "return": "NetworkParameters", "signature": "NetworkParameters getParams()", "full_signature": "@Override public NetworkParameters getParams()", "class_method_signature": "SPVBlockStore.getParams()", "testcase": false, "constructor": false}, {"identifier": "getRingCursor", "parameters": "(ByteBuffer buffer)", "modifiers": "private", "return": "int", "signature": "int getRingCursor(ByteBuffer buffer)", "full_signature": "private int getRingCursor(ByteBuffer buffer)", "class_method_signature": "SPVBlockStore.getRingCursor(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "setRingCursor", "parameters": "(ByteBuffer buffer, int newCursor)", "modifiers": "private", "return": "void", "signature": "void setRingCursor(ByteBuffer buffer, int newCursor)", "full_signature": "private void setRingCursor(ByteBuffer buffer, int newCursor)", "class_method_signature": "SPVBlockStore.setRingCursor(ByteBuffer buffer, int newCursor)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ulordj/store/SPVBlockStore.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void close() throws BlockStoreException {\n        try {\n            buffer.force();\n            buffer = null;  // Allow it to be GCd and the underlying file mapping to go away.\n            randomAccessFile.close();\n            blockCache.clear();\n        } catch (IOException e) {\n            throw new BlockStoreException(e);\n        }\n    }", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SPVBlockStore.close()", "testcase": false, "constructor": false, "invocations": ["force", "close", "clear"]}, "repository": {"repo_id": 133357466, "url": "https://github.com/UlordChain/ulordj", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 23, "size": 7129, "license": "licensed"}}