{"test_class": {"identifier": "AsyncMessageSenderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n\tprivate JmsTemplate jmsTemplate;", "modifier": "@Mock\n\tprivate", "type": "JmsTemplate", "declarator": "jmsTemplate", "var_name": "jmsTemplate"}, {"original_string": "@Mock\n\tprivate LocalMessageStorage storage;", "modifier": "@Mock\n\tprivate", "type": "LocalMessageStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final AsyncMessageSender sut = new AsyncMessageSender();", "modifier": "private final", "type": "AsyncMessageSender", "declarator": "sut = new AsyncMessageSender()", "var_name": "sut"}, {"original_string": "private final ExecutorService executor = Executors.newSingleThreadExecutor();", "modifier": "private final", "type": "ExecutorService", "declarator": "executor = Executors.newSingleThreadExecutor()", "var_name": "executor"}], "file": "backend/src/test/java/jmstool/jms/AsyncMessageSenderTest.java"}, "test_case": {"identifier": "sendMessage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void sendMessage() throws InterruptedException {\n\t\tsut.send(new SimpleMessage(\"test\", \"queue\"));\n\n\t\t// one message is pending\n\t\tassertThat(sut.getStats().getPendingCount()).isEqualTo(1);\n\n\t\t// start AsyncMessageSender asynchronous in a new Thread\n\t\texecutor.execute(sut);\n\n\t\tawait().until(() -> sut.getStats().getPendingCount() == 0);\n\n\t\tverify(jmsTemplate).send(eq(\"queue\"), any());\n\t\tverify(storage).addMessage(argThat( //\n\t\t\t\tmessage -> message.getQueue().equals(\"queue\") && //\n\t\t\t\t\t\tmessage.getText().equals(\"test\")));\n\n\t\tassertThat(sut.getStats().getPendingCount()).isEqualTo(0);\n\t}", "signature": "void sendMessage()", "full_signature": "@Test public void sendMessage()", "class_method_signature": "AsyncMessageSenderTest.sendMessage()", "testcase": true, "constructor": false, "invocations": ["send", "isEqualTo", "assertThat", "getPendingCount", "getStats", "execute", "until", "await", "getPendingCount", "getStats", "send", "verify", "eq", "any", "addMessage", "verify", "argThat", "equals", "getQueue", "equals", "getText", "isEqualTo", "assertThat", "getPendingCount", "getStats"]}, "focal_class": {"identifier": "AsyncMessageSender", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(this.getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(this.getClass())", "var_name": "logger"}, {"original_string": "private final AtomicInteger errorCounter = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "errorCounter = new AtomicInteger()", "var_name": "errorCounter"}, {"original_string": "@Autowired\n\tprotected JmsTemplate jmsTemplate;", "modifier": "@Autowired\n\tprotected", "type": "JmsTemplate", "declarator": "jmsTemplate", "var_name": "jmsTemplate"}, {"original_string": "@Resource(name = \"outgoingStorage\")\n\tprotected LocalMessageStorage outgoingStorage;", "modifier": "@Resource(name = \"outgoingStorage\")\n\tprotected", "type": "LocalMessageStorage", "declarator": "outgoingStorage", "var_name": "outgoingStorage"}, {"original_string": "private final BlockingQueue<SimpleMessage> pendingMessages = new LinkedBlockingQueue<>();", "modifier": "private final", "type": "BlockingQueue<SimpleMessage>", "declarator": "pendingMessages = new LinkedBlockingQueue<>()", "var_name": "pendingMessages"}], "methods": [{"identifier": "getStats", "parameters": "()", "modifiers": "public", "return": "Stats", "signature": "Stats getStats()", "full_signature": "public Stats getStats()", "class_method_signature": "AsyncMessageSender.getStats()", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(SimpleMessage message)", "modifiers": "public", "return": "void", "signature": "void send(SimpleMessage message)", "full_signature": "public void send(SimpleMessage message)", "class_method_signature": "AsyncMessageSender.send(SimpleMessage message)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "AsyncMessageSender.run()", "testcase": false, "constructor": false}, {"identifier": "sendMessage", "parameters": "(SimpleMessage message)", "modifiers": "private", "return": "void", "signature": "void sendMessage(SimpleMessage message)", "full_signature": "private void sendMessage(SimpleMessage message)", "class_method_signature": "AsyncMessageSender.sendMessage(SimpleMessage message)", "testcase": false, "constructor": false}], "file": "backend/src/main/java/jmstool/jms/AsyncMessageSender.java"}, "focal_method": {"identifier": "sendMessage", "parameters": "(SimpleMessage message)", "modifiers": "private", "return": "void", "body": "private void sendMessage(SimpleMessage message) {\n\t\tjmsTemplate.send(message.getQueue(), new SimpleMessageTextCreator(message));\n\t\toutgoingStorage.addMessage(SimpleMessage.of(message));\n\t}", "signature": "void sendMessage(SimpleMessage message)", "full_signature": "private void sendMessage(SimpleMessage message)", "class_method_signature": "AsyncMessageSender.sendMessage(SimpleMessage message)", "testcase": false, "constructor": false, "invocations": ["send", "getQueue", "addMessage", "of"]}, "repository": {"repo_id": 100600744, "url": "https://github.com/0xERR0R/jmstool", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 577, "license": "licensed"}}