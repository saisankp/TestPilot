{"test_class": {"identifier": "TransformPayloadInputBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Matcher matcher;", "modifier": "private", "type": "Matcher", "declarator": "matcher", "var_name": "matcher"}, {"original_string": "private String specValid = \"[\\n\" +\n            \"  {\\n\" +\n            \"    \\\"operation\\\": \\\"shift\\\",\\n\" +\n            \"    \\\"spec\\\": {\\n\" +\n            \"      \\\"@\\\": \\\"\\\"\\n\" +\n            \"    }\\n\" +\n            \"  }\\n\" +\n            \"]\";", "modifier": "private", "type": "String", "declarator": "specValid = \"[\\n\" +\n            \"  {\\n\" +\n            \"    \\\"operation\\\": \\\"shift\\\",\\n\" +\n            \"    \\\"spec\\\": {\\n\" +\n            \"      \\\"@\\\": \\\"\\\"\\n\" +\n            \"    }\\n\" +\n            \"  }\\n\" +\n            \"]\"", "var_name": "specValid"}, {"original_string": "private static final String SIMPLE_PAYLOAD = \"{\\n\" +\n            \"\\t\\\"key\\\": \\\"value\\\",\\n\" +\n            \"\\t\\\"key2\\\": 344\\n\" +\n            \"}\";", "modifier": "private static final", "type": "String", "declarator": "SIMPLE_PAYLOAD = \"{\\n\" +\n            \"\\t\\\"key\\\": \\\"value\\\",\\n\" +\n            \"\\t\\\"key2\\\": 344\\n\" +\n            \"}\"", "var_name": "SIMPLE_PAYLOAD"}], "file": "gateleen-delegate/src/test/java/org/swisspush/gateleen/delegate/TransformPayloadInputBuilderTest.java"}, "test_case": {"identifier": "testBuildWithMetadata", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildWithMetadata(TestContext context) throws Exception {\n        JoltSpec spec = JoltSpecBuilder.buildSpec(specValid, true);\n        MultiMap headers = new VertxHttpHeaders();\n        headers.add(\"x-abc\", \"x\");\n        headers.add(\"x-def\", \"y\");\n        headers.add(\"x-def\", \"y2\");\n        headers.add(\"x-ghi\", \"z\");\n        headers.add(\"x-ghi\", \"z2\");\n        headers.add(\"x-ghi\", \"z3\");\n\n        String builtInput = TransformPayloadInputBuilder.build(spec, SIMPLE_PAYLOAD, headers, matcher);\n        String expected = \"{\\n\" +\n                \"\\t\\\"urlParts\\\": [\\\"/some/test/url\\\", \\\"url\\\"],\\n\" +\n                \"\\t\\\"headers\\\": {\\n\" +\n                \"\\t\\t\\\"x-abc\\\": \\\"x\\\",\\n\" +\n                \"\\t\\t\\\"x-def\\\": \\\"y,y2\\\",\\n\" +\n                \"\\t\\t\\\"x-ghi\\\": \\\"z,z2,z3\\\"\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"payload\\\": {\\n\" +\n                \"\\t\\t\\\"key\\\": \\\"value\\\",\\n\" +\n                \"\\t\\t\\\"key2\\\": 344\\n\" +\n                \"\\t}\\n\" +\n                \"}\";\n\n        context.assertEquals(new JsonObject(expected), new JsonObject(builtInput));\n    }", "signature": "void testBuildWithMetadata(TestContext context)", "full_signature": "@Test public void testBuildWithMetadata(TestContext context)", "class_method_signature": "TransformPayloadInputBuilderTest.testBuildWithMetadata(TestContext context)", "testcase": true, "constructor": false, "invocations": ["buildSpec", "add", "add", "add", "add", "add", "add", "build", "assertEquals"]}, "focal_class": {"identifier": "TransformPayloadInputBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HEADERS = \"headers\";", "modifier": "private static final", "type": "String", "declarator": "HEADERS = \"headers\"", "var_name": "HEADERS"}, {"original_string": "private static final String PAYLOAD = \"payload\";", "modifier": "private static final", "type": "String", "declarator": "PAYLOAD = \"payload\"", "var_name": "PAYLOAD"}, {"original_string": "private static final String URL_PARTS = \"urlParts\";", "modifier": "private static final", "type": "String", "declarator": "URL_PARTS = \"urlParts\"", "var_name": "URL_PARTS"}], "methods": [{"identifier": "build", "parameters": "(JoltSpec joltSpec, String delegateExecutionRequestJsonPayload, MultiMap headers, final Matcher matcher)", "modifiers": "public static", "return": "String", "signature": "String build(JoltSpec joltSpec, String delegateExecutionRequestJsonPayload, MultiMap headers, final Matcher matcher)", "full_signature": "public static String build(JoltSpec joltSpec, String delegateExecutionRequestJsonPayload, MultiMap headers, final Matcher matcher)", "class_method_signature": "TransformPayloadInputBuilder.build(JoltSpec joltSpec, String delegateExecutionRequestJsonPayload, MultiMap headers, final Matcher matcher)", "testcase": false, "constructor": false}, {"identifier": "buildUrlParts", "parameters": "(Matcher matcher)", "modifiers": "private static", "return": "JsonArray", "signature": "JsonArray buildUrlParts(Matcher matcher)", "full_signature": "private static JsonArray buildUrlParts(Matcher matcher)", "class_method_signature": "TransformPayloadInputBuilder.buildUrlParts(Matcher matcher)", "testcase": false, "constructor": false}, {"identifier": "buildHeaders", "parameters": "(MultiMap headers)", "modifiers": "private static", "return": "JsonObject", "signature": "JsonObject buildHeaders(MultiMap headers)", "full_signature": "private static JsonObject buildHeaders(MultiMap headers)", "class_method_signature": "TransformPayloadInputBuilder.buildHeaders(MultiMap headers)", "testcase": false, "constructor": false}], "file": "gateleen-delegate/src/main/java/org/swisspush/gateleen/delegate/TransformPayloadInputBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "(JoltSpec joltSpec, String delegateExecutionRequestJsonPayload, MultiMap headers, final Matcher matcher)", "modifiers": "public static", "return": "String", "body": "public static String build(JoltSpec joltSpec, String delegateExecutionRequestJsonPayload, MultiMap headers, final Matcher matcher){\n        if(joltSpec.isWithMetadata()){\n            JsonObject withMetadata = new JsonObject();\n            withMetadata.put(URL_PARTS, buildUrlParts(matcher));\n            withMetadata.put(HEADERS, buildHeaders(headers));\n            withMetadata.put(PAYLOAD, new JsonObject(delegateExecutionRequestJsonPayload));\n            return withMetadata.encode();\n        } else {\n            return delegateExecutionRequestJsonPayload;\n        }\n    }", "signature": "String build(JoltSpec joltSpec, String delegateExecutionRequestJsonPayload, MultiMap headers, final Matcher matcher)", "full_signature": "public static String build(JoltSpec joltSpec, String delegateExecutionRequestJsonPayload, MultiMap headers, final Matcher matcher)", "class_method_signature": "TransformPayloadInputBuilder.build(JoltSpec joltSpec, String delegateExecutionRequestJsonPayload, MultiMap headers, final Matcher matcher)", "testcase": false, "constructor": false, "invocations": ["isWithMetadata", "put", "buildUrlParts", "put", "buildHeaders", "put", "encode"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}