{"test_class": {"identifier": "OAuthSchemeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "OAuthScheme scheme = new OAuthScheme();", "modifier": "", "type": "OAuthScheme", "declarator": "scheme = new OAuthScheme()", "var_name": "scheme"}, {"original_string": "OAuthCredentials credentials;", "modifier": "", "type": "OAuthCredentials", "declarator": "credentials", "var_name": "credentials"}], "file": "extensions/oauth/src/test/java/org/apache/abdera/ext/oauth/OAuthSchemeTest.java"}, "test_case": {"identifier": "testAuthenticate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAuthenticate() throws Exception {\n\n        credentials =\n            new OAuthCredentials(\"dpf43f3p2l4k3l03\", \"nnch734d00sl2jdk\", \"HMAC-SHA1\", \"http://photos.example.net/\");\n\n        String header = scheme.authenticate(credentials, \"get\", \"http://photos.example.net?file=vacation.jpg\");\n        assertNotNull(header);\n\n        String regex =\n            \"OAuth realm=\\\"[^\\\"]+\\\", oauth_consumer_key=\\\"[^\\\"]+\\\", \" + \"oauth_token=\\\"[^\\\"]+\\\", oauth_signature_method=\\\"[^\\\"]+\\\", oauth_signature=\\\"[^\\\"]+\\\", \"\n                + \"oauth_timestamp=\\\"[^\\\"]+\\\", oauth_nonce=\\\"[^\\\"]+\\\"(, oauth_version=\\\"[^\\\"]+\\\")?\";\n\n        assertTrue(header.matches(regex));\n\n    }", "signature": "void testAuthenticate()", "full_signature": "@Test public void testAuthenticate()", "class_method_signature": "OAuthSchemeTest.testAuthenticate()", "testcase": true, "constructor": false, "invocations": ["authenticate", "assertNotNull", "assertTrue", "matches"]}, "focal_class": {"identifier": "OAuthScheme", "superclass": "extends RFC2617Scheme", "interfaces": "implements AuthScheme", "fields": [{"original_string": "private final int NONCE_LENGTH = 16;", "modifier": "private final", "type": "int", "declarator": "NONCE_LENGTH = 16", "var_name": "NONCE_LENGTH"}], "methods": [{"identifier": "register", "parameters": "(AbderaClient abderaClient, boolean exclusive)", "modifiers": "public static", "return": "void", "signature": "void register(AbderaClient abderaClient, boolean exclusive)", "full_signature": "public static void register(AbderaClient abderaClient, boolean exclusive)", "class_method_signature": "OAuthScheme.register(AbderaClient abderaClient, boolean exclusive)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(Credentials credentials, String method, String uri)", "modifiers": "public", "return": "String", "signature": "String authenticate(Credentials credentials, String method, String uri)", "full_signature": "public String authenticate(Credentials credentials, String method, String uri)", "class_method_signature": "OAuthScheme.authenticate(Credentials credentials, String method, String uri)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(Credentials credentials, HttpMethod method)", "modifiers": "public", "return": "String", "signature": "String authenticate(Credentials credentials, HttpMethod method)", "full_signature": "public String authenticate(Credentials credentials, HttpMethod method)", "class_method_signature": "OAuthScheme.authenticate(Credentials credentials, HttpMethod method)", "testcase": false, "constructor": false}, {"identifier": "resolveMethod", "parameters": "(String method, String uri)", "modifiers": "private", "return": "HttpMethod", "signature": "HttpMethod resolveMethod(String method, String uri)", "full_signature": "private HttpMethod resolveMethod(String method, String uri)", "class_method_signature": "OAuthScheme.resolveMethod(String method, String uri)", "testcase": false, "constructor": false}, {"identifier": "generateSignature", "parameters": "(OAuthCredentials credentials, HttpMethod method, String nonce, long timestamp)", "modifiers": "private", "return": "String", "signature": "String generateSignature(OAuthCredentials credentials, HttpMethod method, String nonce, long timestamp)", "full_signature": "private String generateSignature(OAuthCredentials credentials, HttpMethod method, String nonce, long timestamp)", "class_method_signature": "OAuthScheme.generateSignature(OAuthCredentials credentials, HttpMethod method, String nonce, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "generateNonce", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String generateNonce()", "full_signature": "private String generateNonce()", "class_method_signature": "OAuthScheme.generateNonce()", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(String method, String baseString, Certificate cert)", "modifiers": "private", "return": "String", "signature": "String sign(String method, String baseString, Certificate cert)", "full_signature": "private String sign(String method, String baseString, Certificate cert)", "class_method_signature": "OAuthScheme.sign(String method, String baseString, Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "getSchemeName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSchemeName()", "full_signature": "public String getSchemeName()", "class_method_signature": "OAuthScheme.getSchemeName()", "testcase": false, "constructor": false}, {"identifier": "isComplete", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isComplete()", "full_signature": "public boolean isComplete()", "class_method_signature": "OAuthScheme.isComplete()", "testcase": false, "constructor": false}, {"identifier": "isConnectionBased", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConnectionBased()", "full_signature": "public boolean isConnectionBased()", "class_method_signature": "OAuthScheme.isConnectionBased()", "testcase": false, "constructor": false}], "file": "extensions/oauth/src/main/java/org/apache/abdera/ext/oauth/OAuthScheme.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(Credentials credentials, String method, String uri)", "modifiers": "public", "return": "String", "body": "public String authenticate(Credentials credentials, String method, String uri) throws AuthenticationException {\n        return authenticate(credentials, resolveMethod(method, uri));\n    }", "signature": "String authenticate(Credentials credentials, String method, String uri)", "full_signature": "public String authenticate(Credentials credentials, String method, String uri)", "class_method_signature": "OAuthScheme.authenticate(Credentials credentials, String method, String uri)", "testcase": false, "constructor": false, "invocations": ["authenticate", "resolveMethod"]}, "repository": {"repo_id": 206482, "url": "https://github.com/apache/abdera", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 15, "size": 12255, "license": "licensed"}}