{"test_class": {"identifier": "IntegerCoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int _minBytes = 3;", "modifier": "private static final", "type": "int", "declarator": "_minBytes = 3", "var_name": "_minBytes"}, {"original_string": "private long _input;", "modifier": "private", "type": "long", "declarator": "_input", "var_name": "_input"}, {"original_string": "private ByteBuffer _expected;", "modifier": "private", "type": "ByteBuffer", "declarator": "_expected", "var_name": "_expected"}], "file": "yajsync-core/src/test/java/com/github/perlundq/yajsync/internal/session/IntegerCoderTest.java"}, "test_case": {"identifier": "testEncodingCorrectness", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEncodingCorrectness()\n    {\n        ByteBuffer actual = IntegerCoder.encodeLong(_input, _minBytes);\n        assertEquals(String.format(\"encode %d -> %s, expected %s (minBytes=%d)\",\n                                   _input,\n                                   Text.byteBufferToString(actual),\n                                   Text.byteBufferToString(_expected),\n                                   _minBytes),\n                     _expected, actual);\n    }", "signature": "void testEncodingCorrectness()", "full_signature": "@Test public void testEncodingCorrectness()", "class_method_signature": "IntegerCoderTest.testEncodingCorrectness()", "testcase": true, "constructor": false, "invocations": ["encodeLong", "assertEquals", "format", "byteBufferToString", "byteBufferToString"]}, "focal_class": {"identifier": "IntegerCoder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final byte[] _int_byte_extra = {\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /* (00 - 3F)/4 */\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /* (40 - 7F)/4 */\n        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, /* (80 - BF)/4 */\n        2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 6, /* (C0 - FF)/4 */\n    };", "modifier": "private static final", "type": "byte[]", "declarator": "_int_byte_extra = {\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /* (00 - 3F)/4 */\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /* (40 - 7F)/4 */\n        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, /* (80 - BF)/4 */\n        2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 6, /* (C0 - FF)/4 */\n    }", "var_name": "_int_byte_extra"}], "methods": [{"identifier": "IntegerCoder", "parameters": "()", "modifiers": "private", "return": "", "signature": " IntegerCoder()", "full_signature": "private  IntegerCoder()", "class_method_signature": "IntegerCoder.IntegerCoder()", "testcase": false, "constructor": true}, {"identifier": "encodeLong", "parameters": "(long value, int minBytes)", "modifiers": "public static", "return": "ByteBuffer", "signature": "ByteBuffer encodeLong(long value, int minBytes)", "full_signature": "public static ByteBuffer encodeLong(long value, int minBytes)", "class_method_signature": "IntegerCoder.encodeLong(long value, int minBytes)", "testcase": false, "constructor": false}, {"identifier": "decodeLong", "parameters": "(Readable src, int minBytes)", "modifiers": "public static", "return": "long", "signature": "long decodeLong(Readable src, int minBytes)", "full_signature": "public static long decodeLong(Readable src, int minBytes)", "class_method_signature": "IntegerCoder.decodeLong(Readable src, int minBytes)", "testcase": false, "constructor": false}], "file": "yajsync-core/src/main/java/com/github/perlundq/yajsync/internal/session/IntegerCoder.java"}, "focal_method": {"identifier": "encodeLong", "parameters": "(long value, int minBytes)", "modifiers": "public static", "return": "ByteBuffer", "body": "public static ByteBuffer encodeLong(long value, int minBytes)\n    {\n        assert minBytes >= 1 && minBytes <= 8;\n\n        byte[] buf = new byte[9];\n        BitOps.putLongAsLittleEndian(buf, 1, value);\n\n        int count = buf.length - 1; // int lastNonZeroByteIndex = count;\n        while (count > minBytes && buf[count] == 0) {\n            count--;\n        }\n\n        int firstByteValue = 0xFF & (1 << (7 - count + minBytes));\n        // 1 <= minBytes <= 8\n        // minBytes <= count <= 8\n        // max(-count + minBytes) when count equals minBytes\n        // min(-count + minBytes) == -8 + 1 = -7\n        // 1 << ( 7 - 8 + 1) == 1 << 0 == 1;\n        // 1 << ( 7 - 0 ) == 128\n        // firstByteValue is a power of 2 in range: 1 <= firstByteValue <= 128\n\n        if ((0xFF & buf[count]) >= firstByteValue) {\n            buf[0] = (byte) ~ (firstByteValue - 1);\n            count++;\n        } else if (count > minBytes) {\n            buf[0] = (byte) ((~ (firstByteValue * 2 - 1)) | buf[count]);\n        } else {\n            buf[0] = buf[count];\n        }\n\n        return ByteBuffer.wrap(buf, 0, count);\n    }", "signature": "ByteBuffer encodeLong(long value, int minBytes)", "full_signature": "public static ByteBuffer encodeLong(long value, int minBytes)", "class_method_signature": "IntegerCoder.encodeLong(long value, int minBytes)", "testcase": false, "constructor": false, "invocations": ["putLongAsLittleEndian", "wrap"]}, "repository": {"repo_id": 15758326, "url": "https://github.com/perlundq/yajsync", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 126, "size": 1129, "license": "licensed"}}