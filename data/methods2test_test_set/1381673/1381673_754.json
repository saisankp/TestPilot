{"test_class": {"identifier": "Pattern52Test", "superclass": "extends ColumnTestBase", "interfaces": "", "fields": [{"original_string": "private Pattern52 column1;", "modifier": "private", "type": "Pattern52", "declarator": "column1", "var_name": "column1"}, {"original_string": "private Pattern52 column2;", "modifier": "private", "type": "Pattern52", "declarator": "column2", "var_name": "column2"}], "file": "drools-workbench-models/drools-workbench-models-guided-dtable/src/test/java/org/drools/workbench/models/guided/dtable/shared/model/Pattern52Test.java"}, "test_case": {"identifier": "testDiffFactType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDiffFactType() {\n        column1.setFactType(\"Fact1\");\n        column2.setFactType(\"Fact2\");\n\n        checkSingleDiff(FIELD_FACT_TYPE, \"Fact1\", \"Fact2\", column1, column2);\n        assertNotEquals(column1, column2);\n    }", "signature": "void testDiffFactType()", "full_signature": "@Test public void testDiffFactType()", "class_method_signature": "Pattern52Test.testDiffFactType()", "testcase": true, "constructor": false, "invocations": ["setFactType", "setFactType", "checkSingleDiff", "assertNotEquals"]}, "focal_class": {"identifier": "Pattern52", "superclass": "", "interfaces": "implements CompositeColumn<ConditionCol52>,\n                   HasCEPWindow,\n                   DiffColumn", "fields": [{"original_string": "private String factType;", "modifier": "private", "type": "String", "declarator": "factType", "var_name": "factType"}, {"original_string": "private String boundName;", "modifier": "private", "type": "String", "declarator": "boundName", "var_name": "boundName"}, {"original_string": "private boolean isNegated;", "modifier": "private", "type": "boolean", "declarator": "isNegated", "var_name": "isNegated"}, {"original_string": "private List<ConditionCol52> conditions;", "modifier": "private", "type": "List<ConditionCol52>", "declarator": "conditions", "var_name": "conditions"}, {"original_string": "private CEPWindow window;", "modifier": "private", "type": "CEPWindow", "declarator": "window", "var_name": "window"}, {"original_string": "private String entryPointName;", "modifier": "private", "type": "String", "declarator": "entryPointName", "var_name": "entryPointName"}, {"original_string": "public static final String FIELD_FACT_TYPE = \"factType\";", "modifier": "public static final", "type": "String", "declarator": "FIELD_FACT_TYPE = \"factType\"", "var_name": "FIELD_FACT_TYPE"}, {"original_string": "public static final String FIELD_BOUND_NAME = \"boundName\";", "modifier": "public static final", "type": "String", "declarator": "FIELD_BOUND_NAME = \"boundName\"", "var_name": "FIELD_BOUND_NAME"}, {"original_string": "public static final String FIELD_IS_NEGATED = \"isNegated\";", "modifier": "public static final", "type": "String", "declarator": "FIELD_IS_NEGATED = \"isNegated\"", "var_name": "FIELD_IS_NEGATED"}, {"original_string": "public static final String FIELD_WINDOW = \"window\";", "modifier": "public static final", "type": "String", "declarator": "FIELD_WINDOW = \"window\"", "var_name": "FIELD_WINDOW"}, {"original_string": "public static final String FIELD_ENTRY_POINT_NAME = \"entryPointName\";", "modifier": "public static final", "type": "String", "declarator": "FIELD_ENTRY_POINT_NAME = \"entryPointName\"", "var_name": "FIELD_ENTRY_POINT_NAME"}], "methods": [{"identifier": "Pattern52", "parameters": "()", "modifiers": "public", "return": "", "signature": " Pattern52()", "full_signature": "public  Pattern52()", "class_method_signature": "Pattern52.Pattern52()", "testcase": false, "constructor": true}, {"identifier": "diff", "parameters": "( BaseColumn otherColumn )", "modifiers": "@Override public", "return": "List<BaseColumnFieldDiff>", "signature": "List<BaseColumnFieldDiff> diff( BaseColumn otherColumn )", "full_signature": "@Override public List<BaseColumnFieldDiff> diff( BaseColumn otherColumn )", "class_method_signature": "Pattern52.diff( BaseColumn otherColumn )", "testcase": false, "constructor": false}, {"identifier": "clonePattern", "parameters": "()", "modifiers": "public", "return": "Pattern52", "signature": "Pattern52 clonePattern()", "full_signature": "public Pattern52 clonePattern()", "class_method_signature": "Pattern52.clonePattern()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "( Pattern52 other )", "modifiers": "public", "return": "void", "signature": "void update( Pattern52 other )", "full_signature": "public void update( Pattern52 other )", "class_method_signature": "Pattern52.update( Pattern52 other )", "testcase": false, "constructor": false}, {"identifier": "getFactType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFactType()", "full_signature": "public String getFactType()", "class_method_signature": "Pattern52.getFactType()", "testcase": false, "constructor": false}, {"identifier": "setFactType", "parameters": "( String factType )", "modifiers": "public", "return": "void", "signature": "void setFactType( String factType )", "full_signature": "public void setFactType( String factType )", "class_method_signature": "Pattern52.setFactType( String factType )", "testcase": false, "constructor": false}, {"identifier": "getBoundName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBoundName()", "full_signature": "public String getBoundName()", "class_method_signature": "Pattern52.getBoundName()", "testcase": false, "constructor": false}, {"identifier": "isBound", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBound()", "full_signature": "public boolean isBound()", "class_method_signature": "Pattern52.isBound()", "testcase": false, "constructor": false}, {"identifier": "setBoundName", "parameters": "( String boundName )", "modifiers": "public", "return": "void", "signature": "void setBoundName( String boundName )", "full_signature": "public void setBoundName( String boundName )", "class_method_signature": "Pattern52.setBoundName( String boundName )", "testcase": false, "constructor": false}, {"identifier": "isNegated", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNegated()", "full_signature": "public boolean isNegated()", "class_method_signature": "Pattern52.isNegated()", "testcase": false, "constructor": false}, {"identifier": "setNegated", "parameters": "( boolean negated )", "modifiers": "public", "return": "void", "signature": "void setNegated( boolean negated )", "full_signature": "public void setNegated( boolean negated )", "class_method_signature": "Pattern52.setNegated( boolean negated )", "testcase": false, "constructor": false}, {"identifier": "getChildColumns", "parameters": "()", "modifiers": "public", "return": "List<ConditionCol52>", "signature": "List<ConditionCol52> getChildColumns()", "full_signature": "public List<ConditionCol52> getChildColumns()", "class_method_signature": "Pattern52.getChildColumns()", "testcase": false, "constructor": false}, {"identifier": "setChildColumns", "parameters": "( List<ConditionCol52> conditions )", "modifiers": "public", "return": "void", "signature": "void setChildColumns( List<ConditionCol52> conditions )", "full_signature": "public void setChildColumns( List<ConditionCol52> conditions )", "class_method_signature": "Pattern52.setChildColumns( List<ConditionCol52> conditions )", "testcase": false, "constructor": false}, {"identifier": "setWindow", "parameters": "( CEPWindow window )", "modifiers": "public", "return": "void", "signature": "void setWindow( CEPWindow window )", "full_signature": "public void setWindow( CEPWindow window )", "class_method_signature": "Pattern52.setWindow( CEPWindow window )", "testcase": false, "constructor": false}, {"identifier": "getWindow", "parameters": "()", "modifiers": "public", "return": "CEPWindow", "signature": "CEPWindow getWindow()", "full_signature": "public CEPWindow getWindow()", "class_method_signature": "Pattern52.getWindow()", "testcase": false, "constructor": false}, {"identifier": "getEntryPointName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEntryPointName()", "full_signature": "public String getEntryPointName()", "class_method_signature": "Pattern52.getEntryPointName()", "testcase": false, "constructor": false}, {"identifier": "setEntryPointName", "parameters": "( String entryPointName )", "modifiers": "public", "return": "void", "signature": "void setEntryPointName( String entryPointName )", "full_signature": "public void setEntryPointName( String entryPointName )", "class_method_signature": "Pattern52.setEntryPointName( String entryPointName )", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHeader()", "full_signature": "public String getHeader()", "class_method_signature": "Pattern52.getHeader()", "testcase": false, "constructor": false}, {"identifier": "setHeader", "parameters": "( String header )", "modifiers": "public", "return": "void", "signature": "void setHeader( String header )", "full_signature": "public void setHeader( String header )", "class_method_signature": "Pattern52.setHeader( String header )", "testcase": false, "constructor": false}, {"identifier": "isHideColumn", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isHideColumn()", "full_signature": "public boolean isHideColumn()", "class_method_signature": "Pattern52.isHideColumn()", "testcase": false, "constructor": false}, {"identifier": "setHideColumn", "parameters": "( boolean hideColumn )", "modifiers": "public", "return": "void", "signature": "void setHideColumn( boolean hideColumn )", "full_signature": "public void setHideColumn( boolean hideColumn )", "class_method_signature": "Pattern52.setHideColumn( boolean hideColumn )", "testcase": false, "constructor": false}, {"identifier": "getWidth", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getWidth()", "full_signature": "public int getWidth()", "class_method_signature": "Pattern52.getWidth()", "testcase": false, "constructor": false}, {"identifier": "setWidth", "parameters": "( int width )", "modifiers": "public", "return": "void", "signature": "void setWidth( int width )", "full_signature": "public void setWidth( int width )", "class_method_signature": "Pattern52.setWidth( int width )", "testcase": false, "constructor": false}, {"identifier": "getDefaultValue", "parameters": "()", "modifiers": "public", "return": "DTCellValue52", "signature": "DTCellValue52 getDefaultValue()", "full_signature": "public DTCellValue52 getDefaultValue()", "class_method_signature": "Pattern52.getDefaultValue()", "testcase": false, "constructor": false}, {"identifier": "setDefaultValue", "parameters": "( DTCellValue52 defaultValue )", "modifiers": "public", "return": "void", "signature": "void setDefaultValue( DTCellValue52 defaultValue )", "full_signature": "public void setDefaultValue( DTCellValue52 defaultValue )", "class_method_signature": "Pattern52.setDefaultValue( DTCellValue52 defaultValue )", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Pattern52.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Pattern52.hashCode()", "testcase": false, "constructor": false}], "file": "drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/Pattern52.java"}, "focal_method": {"identifier": "setFactType", "parameters": "( String factType )", "modifiers": "public", "return": "void", "body": "public void setFactType( String factType ) {\n        this.factType = factType;\n    }", "signature": "void setFactType( String factType )", "full_signature": "public void setFactType( String factType )", "class_method_signature": "Pattern52.setFactType( String factType )", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}