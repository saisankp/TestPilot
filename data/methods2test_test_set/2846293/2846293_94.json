{"test_class": {"identifier": "FileDownloaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static JettyServer localWebServer = new JettyServer();", "modifier": "private static", "type": "JettyServer", "declarator": "localWebServer = new JettyServer()", "var_name": "localWebServer"}, {"original_string": "private static int webServerPort = 8081;", "modifier": "private static", "type": "int", "declarator": "webServerPort = 8081", "var_name": "webServerPort"}, {"original_string": "private WebDriver driver = new HtmlUnitDriver();", "modifier": "private", "type": "WebDriver", "declarator": "driver = new HtmlUnitDriver()", "var_name": "driver"}], "file": "ebselen-core/src/test/java/com/lazerycode/ebselen/customhandlers/FileDownloaderTest.java"}, "test_case": {"identifier": "downloadAFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void downloadAFile() throws Exception {\n        FileDownloader downloadTestFile = new FileDownloader(driver);\n        driver.get(\"http://localhost:8081/downloadTest.html\");\n        WebElement downloadLink = driver.findElement(By.id(\"fileToDownload\"));\n        downloadTestFile.fileDownloader(downloadLink);\n    }", "signature": "void downloadAFile()", "full_signature": "@Test public void downloadAFile()", "class_method_signature": "FileDownloaderTest.downloadAFile()", "testcase": true, "constructor": false, "invocations": ["get", "findElement", "id", "fileDownloader"]}, "focal_class": {"identifier": "FileDownloader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(EbselenCore.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(EbselenCore.class)", "var_name": "LOGGER"}, {"original_string": "private WebDriver driver;", "modifier": "private", "type": "WebDriver", "declarator": "driver", "var_name": "driver"}, {"original_string": "private String downloadPath = System.getProperty(\"java.io.tmpdir\");", "modifier": "private", "type": "String", "declarator": "downloadPath = System.getProperty(\"java.io.tmpdir\")", "var_name": "downloadPath"}], "methods": [{"identifier": "FileDownloader", "parameters": "(WebDriver driverObject)", "modifiers": "public", "return": "", "signature": " FileDownloader(WebDriver driverObject)", "full_signature": "public  FileDownloader(WebDriver driverObject)", "class_method_signature": "FileDownloader.FileDownloader(WebDriver driverObject)", "testcase": false, "constructor": true}, {"identifier": "getDownloadPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDownloadPath()", "full_signature": "public String getDownloadPath()", "class_method_signature": "FileDownloader.getDownloadPath()", "testcase": false, "constructor": false}, {"identifier": "setDownloadPath", "parameters": "(String filePath)", "modifiers": "public", "return": "void", "signature": "void setDownloadPath(String filePath)", "full_signature": "public void setDownloadPath(String filePath)", "class_method_signature": "FileDownloader.setDownloadPath(String filePath)", "testcase": false, "constructor": false}, {"identifier": "mimicCookieState", "parameters": "(Set<org.openqa.selenium.Cookie> seleniumCookieSet)", "modifiers": "private", "return": "HttpState", "signature": "HttpState mimicCookieState(Set<org.openqa.selenium.Cookie> seleniumCookieSet)", "full_signature": "private HttpState mimicCookieState(Set<org.openqa.selenium.Cookie> seleniumCookieSet)", "class_method_signature": "FileDownloader.mimicCookieState(Set<org.openqa.selenium.Cookie> seleniumCookieSet)", "testcase": false, "constructor": false}, {"identifier": "mimicHostConfiguration", "parameters": "(String hostURL, int hostPort)", "modifiers": "private", "return": "HostConfiguration", "signature": "HostConfiguration mimicHostConfiguration(String hostURL, int hostPort)", "full_signature": "private HostConfiguration mimicHostConfiguration(String hostURL, int hostPort)", "class_method_signature": "FileDownloader.mimicHostConfiguration(String hostURL, int hostPort)", "testcase": false, "constructor": false}, {"identifier": "fileDownloader", "parameters": "(WebElement element)", "modifiers": "public", "return": "String", "signature": "String fileDownloader(WebElement element)", "full_signature": "public String fileDownloader(WebElement element)", "class_method_signature": "FileDownloader.fileDownloader(WebElement element)", "testcase": false, "constructor": false}, {"identifier": "imageDownloader", "parameters": "(WebElement element)", "modifiers": "public", "return": "String", "signature": "String imageDownloader(WebElement element)", "full_signature": "public String imageDownloader(WebElement element)", "class_method_signature": "FileDownloader.imageDownloader(WebElement element)", "testcase": false, "constructor": false}, {"identifier": "downloader", "parameters": "(WebElement element, String attribute)", "modifiers": "public", "return": "String", "signature": "String downloader(WebElement element, String attribute)", "full_signature": "public String downloader(WebElement element, String attribute)", "class_method_signature": "FileDownloader.downloader(WebElement element, String attribute)", "testcase": false, "constructor": false}], "file": "ebselen-core/src/main/java/com/lazerycode/ebselen/customhandlers/FileDownloader.java"}, "focal_method": {"identifier": "FileDownloader", "parameters": "(WebDriver driverObject)", "modifiers": "public", "return": "", "body": "public FileDownloader(WebDriver driverObject) {\n        this.driver = driverObject;\n    }", "signature": " FileDownloader(WebDriver driverObject)", "full_signature": "public  FileDownloader(WebDriver driverObject)", "class_method_signature": "FileDownloader.FileDownloader(WebDriver driverObject)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 2846293, "url": "https://github.com/Ardesco/Ebselen", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 59, "size": 1133, "license": "licensed"}}