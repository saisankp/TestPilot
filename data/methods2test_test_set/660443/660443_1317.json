{"test_class": {"identifier": "GeometryEncoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/stereo/GeometryEncoderTest.java"}, "test_case": {"identifier": "testEncode_NoPermutation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEncode_NoPermutation() {\n        PermutationParity permutation = mock(PermutationParity.class);\n        GeometricParity geometric = mock(GeometricParity.class);\n\n        when(permutation.parity(any(long[].class))).thenReturn(0);\n        when(geometric.parity()).thenReturn(+1);\n\n        StereoEncoder encoder = new GeometryEncoder(new int[]{1, 3}, permutation, geometric);\n        long[] prev = new long[6];\n        long[] result = new long[6];\n        Arrays.fill(prev, 1);\n        Arrays.fill(result, 1);\n\n        // check returned false, the permutation changes for each cycle\n        assertFalse(encoder.encode(prev, result));\n\n        // check no values modified\n        assertThat(result, is(new long[]{1, 1, 1, 1, 1, 1}));\n\n        // geometric parity should not be called\n        verify(geometric, never()).parity();\n    }", "signature": "void testEncode_NoPermutation()", "full_signature": "@Test public void testEncode_NoPermutation()", "class_method_signature": "GeometryEncoderTest.testEncode_NoPermutation()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "parity", "any", "thenReturn", "when", "parity", "fill", "fill", "assertFalse", "encode", "assertThat", "is", "parity", "verify", "never"]}, "focal_class": {"identifier": "GeometryEncoder", "superclass": "", "interfaces": "implements StereoEncoder", "fields": [{"original_string": "private static final long       CLOCKWISE     = 15543053;", "modifier": "private static final", "type": "long", "declarator": "CLOCKWISE     = 15543053", "var_name": "CLOCKWISE"}, {"original_string": "private static final long       ANTICLOCKWISE = 15521419;", "modifier": "private static final", "type": "long", "declarator": "ANTICLOCKWISE = 15521419", "var_name": "ANTICLOCKWISE"}, {"original_string": "private final PermutationParity permutation;", "modifier": "private final", "type": "PermutationParity", "declarator": "permutation", "var_name": "permutation"}, {"original_string": "private final GeometricParity   geometric;", "modifier": "private final", "type": "GeometricParity", "declarator": "geometric", "var_name": "geometric"}, {"original_string": "private final int[]             centres;", "modifier": "private final", "type": "int[]", "declarator": "centres", "var_name": "centres"}], "methods": [{"identifier": "GeometryEncoder", "parameters": "(int[] centres, PermutationParity permutation, GeometricParity geometric)", "modifiers": "public", "return": "", "signature": " GeometryEncoder(int[] centres, PermutationParity permutation, GeometricParity geometric)", "full_signature": "public  GeometryEncoder(int[] centres, PermutationParity permutation, GeometricParity geometric)", "class_method_signature": "GeometryEncoder.GeometryEncoder(int[] centres, PermutationParity permutation, GeometricParity geometric)", "testcase": false, "constructor": true}, {"identifier": "GeometryEncoder", "parameters": "(int centre, PermutationParity permutation, GeometricParity geometric)", "modifiers": "public", "return": "", "signature": " GeometryEncoder(int centre, PermutationParity permutation, GeometricParity geometric)", "full_signature": "public  GeometryEncoder(int centre, PermutationParity permutation, GeometricParity geometric)", "class_method_signature": "GeometryEncoder.GeometryEncoder(int centre, PermutationParity permutation, GeometricParity geometric)", "testcase": false, "constructor": true}, {"identifier": "encode", "parameters": "(long[] current, long[] next)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean encode(long[] current, long[] next)", "full_signature": "@Override public boolean encode(long[] current, long[] next)", "class_method_signature": "GeometryEncoder.encode(long[] current, long[] next)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "GeometryEncoder.reset()", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/stereo/GeometryEncoder.java"}, "focal_method": {"identifier": "encode", "parameters": "(long[] current, long[] next)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean encode(long[] current, long[] next) {\n\n        int p = permutation.parity(current);\n\n        // if is a permutation parity (all neighbors are different)\n        if (p != 0) {\n\n            // multiple with the geometric parity\n            int q = geometric.parity() * p;\n\n            // configure anticlockwise/clockwise\n            if (q > 0) {\n                for (int i : centres) {\n                    next[i] = current[i] * ANTICLOCKWISE;\n                }\n            } else if (q < 0) {\n                for (int i : centres) {\n                    next[i] = current[i] * CLOCKWISE;\n                }\n            }\n\n            // 0 parity ignored\n\n            return true;\n        }\n        return false;\n    }", "signature": "boolean encode(long[] current, long[] next)", "full_signature": "@Override public boolean encode(long[] current, long[] next)", "class_method_signature": "GeometryEncoder.encode(long[] current, long[] next)", "testcase": false, "constructor": false, "invocations": ["parity", "parity"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}