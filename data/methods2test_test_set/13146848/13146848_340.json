{"test_class": {"identifier": "PageTextWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PDFont helvetica = FontUtils.getStandardType1Font(StandardType1Font.HELVETICA);", "modifier": "private", "type": "PDFont", "declarator": "helvetica = FontUtils.getStandardType1Font(StandardType1Font.HELVETICA)", "var_name": "helvetica"}], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/component/PageTextWriterTest.java"}, "test_case": {"identifier": "throwsWhenCharacterUnsupported", "parameters": "()", "modifiers": "@Test(expected = UnsupportedTextException.class) public", "return": "void", "body": "@Test(expected = UnsupportedTextException.class)\n    public void throwsWhenCharacterUnsupported() throws TaskException {\n        write(\"\\uFE0F\");\n    }", "signature": "void throwsWhenCharacterUnsupported()", "full_signature": "@Test(expected = UnsupportedTextException.class) public void throwsWhenCharacterUnsupported()", "class_method_signature": "PageTextWriterTest.throwsWhenCharacterUnsupported()", "testcase": true, "constructor": false, "invocations": ["write"]}, "focal_class": {"identifier": "PageTextWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PageTextWriter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PageTextWriter.class)", "var_name": "LOG"}, {"original_string": "private PDDocument document;", "modifier": "private", "type": "PDDocument", "declarator": "document", "var_name": "document"}, {"original_string": "public static final Float DEFAULT_MARGIN = 20F;", "modifier": "public static final", "type": "Float", "declarator": "DEFAULT_MARGIN = 20F", "var_name": "DEFAULT_MARGIN"}], "methods": [{"identifier": "PageTextWriter", "parameters": "(PDDocument document)", "modifiers": "public", "return": "", "signature": " PageTextWriter(PDDocument document)", "full_signature": "public  PageTextWriter(PDDocument document)", "class_method_signature": "PageTextWriter.PageTextWriter(PDDocument document)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(PDPage page, HorizontalAlign hAlign, VerticalAlign vAlign, String rawLabel, PDFont font,\n            Double fontSize, Color color)", "modifiers": "public", "return": "void", "signature": "void write(PDPage page, HorizontalAlign hAlign, VerticalAlign vAlign, String rawLabel, PDFont font,\n            Double fontSize, Color color)", "full_signature": "public void write(PDPage page, HorizontalAlign hAlign, VerticalAlign vAlign, String rawLabel, PDFont font,\n            Double fontSize, Color color)", "class_method_signature": "PageTextWriter.write(PDPage page, HorizontalAlign hAlign, VerticalAlign vAlign, String rawLabel, PDFont font,\n            Double fontSize, Color color)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(PDPage page, Point2D position, String rawLabel, PDFont font, Double fontSize, Color color)", "modifiers": "public", "return": "void", "signature": "void write(PDPage page, Point2D position, String rawLabel, PDFont font, Double fontSize, Color color)", "full_signature": "public void write(PDPage page, Point2D position, String rawLabel, PDFont font, Double fontSize, Color color)", "class_method_signature": "PageTextWriter.write(PDPage page, Point2D position, String rawLabel, PDFont font, Double fontSize, Color color)", "testcase": false, "constructor": false}, {"identifier": "toPDColor", "parameters": "(Color color)", "modifiers": "public static", "return": "PDColor", "signature": "PDColor toPDColor(Color color)", "full_signature": "public static PDColor toPDColor(Color color)", "class_method_signature": "PageTextWriter.toPDColor(Color color)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(PDPage page, Point2D position, String rawLabel, PDFont font, Double fontSize, PDColor color)", "modifiers": "public", "return": "void", "signature": "void write(PDPage page, Point2D position, String rawLabel, PDFont font, Double fontSize, PDColor color)", "full_signature": "public void write(PDPage page, Point2D position, String rawLabel, PDFont font, Double fontSize, PDColor color)", "class_method_signature": "PageTextWriter.write(PDPage page, Point2D position, String rawLabel, PDFont font, Double fontSize, PDColor color)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(PDPage page, Point2D position, String rawLabel, PDFont font, Double fontSize, PDColor color,\n            RenderingMode renderingMode, boolean fauxItalic)", "modifiers": "public", "return": "void", "signature": "void write(PDPage page, Point2D position, String rawLabel, PDFont font, Double fontSize, PDColor color,\n            RenderingMode renderingMode, boolean fauxItalic)", "full_signature": "public void write(PDPage page, Point2D position, String rawLabel, PDFont font, Double fontSize, PDColor color,\n            RenderingMode renderingMode, boolean fauxItalic)", "class_method_signature": "PageTextWriter.write(PDPage page, Point2D position, String rawLabel, PDFont font, Double fontSize, PDColor color,\n            RenderingMode renderingMode, boolean fauxItalic)", "testcase": false, "constructor": false}, {"identifier": "getStringWidth", "parameters": "(String rawLabel, PDFont font, float fontSize)", "modifiers": "public", "return": "int", "signature": "int getStringWidth(String rawLabel, PDFont font, float fontSize)", "full_signature": "public int getStringWidth(String rawLabel, PDFont font, float fontSize)", "class_method_signature": "PageTextWriter.getStringWidth(String rawLabel, PDFont font, float fontSize)", "testcase": false, "constructor": false}, {"identifier": "findPositionInRotatedPage", "parameters": "(int rotation, PDRectangle pageSize, Point2D position)", "modifiers": "private", "return": "Point2D", "signature": "Point2D findPositionInRotatedPage(int rotation, PDRectangle pageSize, Point2D position)", "full_signature": "private Point2D findPositionInRotatedPage(int rotation, PDRectangle pageSize, Point2D position)", "class_method_signature": "PageTextWriter.findPositionInRotatedPage(int rotation, PDRectangle pageSize, Point2D position)", "testcase": false, "constructor": false}, {"identifier": "writeHeader", "parameters": "(PDDocument doc, PDPage page, String text)", "modifiers": "public static", "return": "void", "signature": "void writeHeader(PDDocument doc, PDPage page, String text)", "full_signature": "public static void writeHeader(PDDocument doc, PDPage page, String text)", "class_method_signature": "PageTextWriter.writeHeader(PDDocument doc, PDPage page, String text)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/component/PageTextWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(PDPage page, HorizontalAlign hAlign, VerticalAlign vAlign, String rawLabel, PDFont font,\n            Double fontSize, Color color)", "modifiers": "public", "return": "void", "body": "public void write(PDPage page, HorizontalAlign hAlign, VerticalAlign vAlign, String rawLabel, PDFont font,\n            Double fontSize, Color color) throws TaskIOException {\n\n        try {\n            String label = StringUtils.normalizeWhitespace(rawLabel);\n            List<TextWithFont> resolvedStringsToFonts = FontUtils.resolveFonts(label, font, document);\n            float stringWidth = 0.0f;\n            for (TextWithFont stringAndFont : resolvedStringsToFonts) {\n                String s = stringAndFont.getText();\n                PDFont f = stringAndFont.getFont();\n                stringWidth += f.getStringWidth(s) * fontSize.floatValue() / 1000f;\n            }\n\n            PDRectangle pageSize = page.getCropBox().rotate(page.getRotation());\n            Point2D position = new Point2D.Double(hAlign.position(pageSize.getWidth(), stringWidth, DEFAULT_MARGIN),\n                    vAlign.position(pageSize.getHeight(), DEFAULT_MARGIN, fontSize.floatValue()));\n\n            write(page, position, label, font, fontSize, color);\n        } catch (IOException e) {\n            throw new TaskIOException(\"An error occurred writing the header or footer of the page.\", e);\n        }\n    }", "signature": "void write(PDPage page, HorizontalAlign hAlign, VerticalAlign vAlign, String rawLabel, PDFont font,\n            Double fontSize, Color color)", "full_signature": "public void write(PDPage page, HorizontalAlign hAlign, VerticalAlign vAlign, String rawLabel, PDFont font,\n            Double fontSize, Color color)", "class_method_signature": "PageTextWriter.write(PDPage page, HorizontalAlign hAlign, VerticalAlign vAlign, String rawLabel, PDFont font,\n            Double fontSize, Color color)", "testcase": false, "constructor": false, "invocations": ["normalizeWhitespace", "resolveFonts", "getText", "getFont", "getStringWidth", "floatValue", "rotate", "getCropBox", "getRotation", "position", "getWidth", "position", "getHeight", "floatValue", "write"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}