{"test_class": {"identifier": "FollowerLogInformationTest", "superclass": "", "interfaces": "", "fields": [], "file": "opendaylight/md-sal/sal-akka-raft/src/test/java/org/opendaylight/controller/cluster/raft/FollowerLogInformationTest.java"}, "test_case": {"identifier": "testIsFollowerActive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsFollowerActive() {\n\n        MockRaftActorContext context = new MockRaftActorContext();\n        context.setCommitIndex(10);\n\n        DefaultConfigParamsImpl configParams = new DefaultConfigParamsImpl();\n        configParams.setHeartBeatInterval(new FiniteDuration(500, TimeUnit.MILLISECONDS));\n        configParams.setElectionTimeoutFactor(1);\n        context.setConfigParams(configParams);\n\n        FollowerLogInformation followerLogInformation =\n                new FollowerLogInformation(new PeerInfo(\"follower1\", null, VotingState.VOTING), 9, context);\n\n        assertFalse(\"Follower should be termed inactive before stopwatch starts\",\n                followerLogInformation.isFollowerActive());\n\n        followerLogInformation.markFollowerActive();\n        if (sleepWithElaspsedTimeReturned(200) > 200) {\n            return;\n        }\n        assertTrue(\"Follower should be active\", followerLogInformation.isFollowerActive());\n\n        if (sleepWithElaspsedTimeReturned(400) > 400) {\n            return;\n        }\n        assertFalse(\"Follower should be inactive after time lapsed\",\n                followerLogInformation.isFollowerActive());\n\n        followerLogInformation.markFollowerActive();\n        assertTrue(\"Follower should be active from inactive\",\n                followerLogInformation.isFollowerActive());\n    }", "signature": "void testIsFollowerActive()", "full_signature": "@Test public void testIsFollowerActive()", "class_method_signature": "FollowerLogInformationTest.testIsFollowerActive()", "testcase": true, "constructor": false, "invocations": ["setCommitIndex", "setHeartBeatInterval", "setElectionTimeoutFactor", "setConfigParams", "assertFalse", "isFollowerActive", "markFollowerActive", "sleepWithElaspsedTimeReturned", "assertTrue", "isFollowerActive", "sleepWithElaspsedTimeReturned", "assertFalse", "isFollowerActive", "markFollowerActive", "assertTrue", "isFollowerActive"]}, "focal_class": {"identifier": "FollowerLogInformation", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final long NO_INDEX = -1;", "modifier": "public static final", "type": "long", "declarator": "NO_INDEX = -1", "var_name": "NO_INDEX"}, {"original_string": "private final Stopwatch stopwatch = Stopwatch.createUnstarted();", "modifier": "private final", "type": "Stopwatch", "declarator": "stopwatch = Stopwatch.createUnstarted()", "var_name": "stopwatch"}, {"original_string": "private final RaftActorContext context;", "modifier": "private final", "type": "RaftActorContext", "declarator": "context", "var_name": "context"}, {"original_string": "private long nextIndex;", "modifier": "private", "type": "long", "declarator": "nextIndex", "var_name": "nextIndex"}, {"original_string": "private long matchIndex;", "modifier": "private", "type": "long", "declarator": "matchIndex", "var_name": "matchIndex"}, {"original_string": "private long lastReplicatedIndex = -1L;", "modifier": "private", "type": "long", "declarator": "lastReplicatedIndex = -1L", "var_name": "lastReplicatedIndex"}, {"original_string": "private long sentCommitIndex = -1L;", "modifier": "private", "type": "long", "declarator": "sentCommitIndex = -1L", "var_name": "sentCommitIndex"}, {"original_string": "private final Stopwatch lastReplicatedStopwatch = Stopwatch.createUnstarted();", "modifier": "private final", "type": "Stopwatch", "declarator": "lastReplicatedStopwatch = Stopwatch.createUnstarted()", "var_name": "lastReplicatedStopwatch"}, {"original_string": "private short payloadVersion = -1;", "modifier": "private", "type": "short", "declarator": "payloadVersion = -1", "var_name": "payloadVersion"}, {"original_string": "private short raftVersion = RaftVersions.HELIUM_VERSION;", "modifier": "private", "type": "short", "declarator": "raftVersion = RaftVersions.HELIUM_VERSION", "var_name": "raftVersion"}, {"original_string": "private final PeerInfo peerInfo;", "modifier": "private final", "type": "PeerInfo", "declarator": "peerInfo", "var_name": "peerInfo"}, {"original_string": "private LeaderInstallSnapshotState installSnapshotState;", "modifier": "private", "type": "LeaderInstallSnapshotState", "declarator": "installSnapshotState", "var_name": "installSnapshotState"}, {"original_string": "private long slicedLogEntryIndex = NO_INDEX;", "modifier": "private", "type": "long", "declarator": "slicedLogEntryIndex = NO_INDEX", "var_name": "slicedLogEntryIndex"}, {"original_string": "private boolean needsLeaderAddress;", "modifier": "private", "type": "boolean", "declarator": "needsLeaderAddress", "var_name": "needsLeaderAddress"}], "methods": [{"identifier": "FollowerLogInformation", "parameters": "(final PeerInfo peerInfo, final long matchIndex, final RaftActorContext context)", "modifiers": "@VisibleForTesting", "return": "", "signature": " FollowerLogInformation(final PeerInfo peerInfo, final long matchIndex, final RaftActorContext context)", "full_signature": "@VisibleForTesting  FollowerLogInformation(final PeerInfo peerInfo, final long matchIndex, final RaftActorContext context)", "class_method_signature": "FollowerLogInformation.FollowerLogInformation(final PeerInfo peerInfo, final long matchIndex, final RaftActorContext context)", "testcase": false, "constructor": true}, {"identifier": "FollowerLogInformation", "parameters": "(final PeerInfo peerInfo, final RaftActorContext context)", "modifiers": "public", "return": "", "signature": " FollowerLogInformation(final PeerInfo peerInfo, final RaftActorContext context)", "full_signature": "public  FollowerLogInformation(final PeerInfo peerInfo, final RaftActorContext context)", "class_method_signature": "FollowerLogInformation.FollowerLogInformation(final PeerInfo peerInfo, final RaftActorContext context)", "testcase": false, "constructor": true}, {"identifier": "incrNextIndex", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "long", "signature": "long incrNextIndex()", "full_signature": "@VisibleForTesting long incrNextIndex()", "class_method_signature": "FollowerLogInformation.incrNextIndex()", "testcase": false, "constructor": false}, {"identifier": "decrNextIndex", "parameters": "(final long followerLastIndex)", "modifiers": "public", "return": "boolean", "signature": "boolean decrNextIndex(final long followerLastIndex)", "full_signature": "public boolean decrNextIndex(final long followerLastIndex)", "class_method_signature": "FollowerLogInformation.decrNextIndex(final long followerLastIndex)", "testcase": false, "constructor": false}, {"identifier": "setNextIndex", "parameters": "(final long nextIndex)", "modifiers": "@SuppressWarnings(\"checkstyle:hiddenField\") public", "return": "boolean", "signature": "boolean setNextIndex(final long nextIndex)", "full_signature": "@SuppressWarnings(\"checkstyle:hiddenField\") public boolean setNextIndex(final long nextIndex)", "class_method_signature": "FollowerLogInformation.setNextIndex(final long nextIndex)", "testcase": false, "constructor": false}, {"identifier": "incrMatchIndex", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long incrMatchIndex()", "full_signature": "public long incrMatchIndex()", "class_method_signature": "FollowerLogInformation.incrMatchIndex()", "testcase": false, "constructor": false}, {"identifier": "setMatchIndex", "parameters": "(final long matchIndex)", "modifiers": "@SuppressWarnings(\"checkstyle:hiddenField\") public", "return": "boolean", "signature": "boolean setMatchIndex(final long matchIndex)", "full_signature": "@SuppressWarnings(\"checkstyle:hiddenField\") public boolean setMatchIndex(final long matchIndex)", "class_method_signature": "FollowerLogInformation.setMatchIndex(final long matchIndex)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getId()", "full_signature": "public String getId()", "class_method_signature": "FollowerLogInformation.getId()", "testcase": false, "constructor": false}, {"identifier": "getNextIndex", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getNextIndex()", "full_signature": "public long getNextIndex()", "class_method_signature": "FollowerLogInformation.getNextIndex()", "testcase": false, "constructor": false}, {"identifier": "getMatchIndex", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMatchIndex()", "full_signature": "public long getMatchIndex()", "class_method_signature": "FollowerLogInformation.getMatchIndex()", "testcase": false, "constructor": false}, {"identifier": "isFollowerActive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFollowerActive()", "full_signature": "public boolean isFollowerActive()", "class_method_signature": "FollowerLogInformation.isFollowerActive()", "testcase": false, "constructor": false}, {"identifier": "markFollowerActive", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void markFollowerActive()", "full_signature": "public void markFollowerActive()", "class_method_signature": "FollowerLogInformation.markFollowerActive()", "testcase": false, "constructor": false}, {"identifier": "markFollowerInActive", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "void", "signature": "void markFollowerInActive()", "full_signature": "@VisibleForTesting public void markFollowerInActive()", "class_method_signature": "FollowerLogInformation.markFollowerInActive()", "testcase": false, "constructor": false}, {"identifier": "nanosSinceLastActivity", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long nanosSinceLastActivity()", "full_signature": "public long nanosSinceLastActivity()", "class_method_signature": "FollowerLogInformation.nanosSinceLastActivity()", "testcase": false, "constructor": false}, {"identifier": "okToReplicate", "parameters": "(final long commitIndex)", "modifiers": "public", "return": "boolean", "signature": "boolean okToReplicate(final long commitIndex)", "full_signature": "public boolean okToReplicate(final long commitIndex)", "class_method_signature": "FollowerLogInformation.okToReplicate(final long commitIndex)", "testcase": false, "constructor": false}, {"identifier": "resetLastReplicated", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void resetLastReplicated()", "full_signature": "private void resetLastReplicated()", "class_method_signature": "FollowerLogInformation.resetLastReplicated()", "testcase": false, "constructor": false}, {"identifier": "getPayloadVersion", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getPayloadVersion()", "full_signature": "public short getPayloadVersion()", "class_method_signature": "FollowerLogInformation.getPayloadVersion()", "testcase": false, "constructor": false}, {"identifier": "setPayloadVersion", "parameters": "(final short payloadVersion)", "modifiers": "public", "return": "void", "signature": "void setPayloadVersion(final short payloadVersion)", "full_signature": "public void setPayloadVersion(final short payloadVersion)", "class_method_signature": "FollowerLogInformation.setPayloadVersion(final short payloadVersion)", "testcase": false, "constructor": false}, {"identifier": "getRaftVersion", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getRaftVersion()", "full_signature": "public short getRaftVersion()", "class_method_signature": "FollowerLogInformation.getRaftVersion()", "testcase": false, "constructor": false}, {"identifier": "setRaftVersion", "parameters": "(final short raftVersion)", "modifiers": "public", "return": "void", "signature": "void setRaftVersion(final short raftVersion)", "full_signature": "public void setRaftVersion(final short raftVersion)", "class_method_signature": "FollowerLogInformation.setRaftVersion(final short raftVersion)", "testcase": false, "constructor": false}, {"identifier": "getInstallSnapshotState", "parameters": "()", "modifiers": "public @Nullable", "return": "LeaderInstallSnapshotState", "signature": "LeaderInstallSnapshotState getInstallSnapshotState()", "full_signature": "public @Nullable LeaderInstallSnapshotState getInstallSnapshotState()", "class_method_signature": "FollowerLogInformation.getInstallSnapshotState()", "testcase": false, "constructor": false}, {"identifier": "setLeaderInstallSnapshotState", "parameters": "(final @NonNull LeaderInstallSnapshotState state)", "modifiers": "public", "return": "void", "signature": "void setLeaderInstallSnapshotState(final @NonNull LeaderInstallSnapshotState state)", "full_signature": "public void setLeaderInstallSnapshotState(final @NonNull LeaderInstallSnapshotState state)", "class_method_signature": "FollowerLogInformation.setLeaderInstallSnapshotState(final @NonNull LeaderInstallSnapshotState state)", "testcase": false, "constructor": false}, {"identifier": "clearLeaderInstallSnapshotState", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearLeaderInstallSnapshotState()", "full_signature": "public void clearLeaderInstallSnapshotState()", "class_method_signature": "FollowerLogInformation.clearLeaderInstallSnapshotState()", "testcase": false, "constructor": false}, {"identifier": "setSlicedLogEntryIndex", "parameters": "(final long index)", "modifiers": "public", "return": "void", "signature": "void setSlicedLogEntryIndex(final long index)", "full_signature": "public void setSlicedLogEntryIndex(final long index)", "class_method_signature": "FollowerLogInformation.setSlicedLogEntryIndex(final long index)", "testcase": false, "constructor": false}, {"identifier": "isLogEntrySlicingInProgress", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLogEntrySlicingInProgress()", "full_signature": "public boolean isLogEntrySlicingInProgress()", "class_method_signature": "FollowerLogInformation.isLogEntrySlicingInProgress()", "testcase": false, "constructor": false}, {"identifier": "setNeedsLeaderAddress", "parameters": "(final boolean value)", "modifiers": "public", "return": "void", "signature": "void setNeedsLeaderAddress(final boolean value)", "full_signature": "public void setNeedsLeaderAddress(final boolean value)", "class_method_signature": "FollowerLogInformation.setNeedsLeaderAddress(final boolean value)", "testcase": false, "constructor": false}, {"identifier": "needsLeaderAddress", "parameters": "(final String leaderId)", "modifiers": "public @Nullable", "return": "String", "signature": "String needsLeaderAddress(final String leaderId)", "full_signature": "public @Nullable String needsLeaderAddress(final String leaderId)", "class_method_signature": "FollowerLogInformation.needsLeaderAddress(final String leaderId)", "testcase": false, "constructor": false}, {"identifier": "hasStaleCommitIndex", "parameters": "(final long commitIndex)", "modifiers": "public", "return": "boolean", "signature": "boolean hasStaleCommitIndex(final long commitIndex)", "full_signature": "public boolean hasStaleCommitIndex(final long commitIndex)", "class_method_signature": "FollowerLogInformation.hasStaleCommitIndex(final long commitIndex)", "testcase": false, "constructor": false}, {"identifier": "setSentCommitIndex", "parameters": "(final long commitIndex)", "modifiers": "public", "return": "void", "signature": "void setSentCommitIndex(final long commitIndex)", "full_signature": "public void setSentCommitIndex(final long commitIndex)", "class_method_signature": "FollowerLogInformation.setSentCommitIndex(final long commitIndex)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FollowerLogInformation.toString()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/FollowerLogInformation.java"}, "focal_method": {"identifier": "isFollowerActive", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isFollowerActive() {\n        if (peerInfo.getVotingState() == VotingState.VOTING_NOT_INITIALIZED) {\n            return false;\n        }\n\n        long elapsed = stopwatch.elapsed(TimeUnit.MILLISECONDS);\n        return stopwatch.isRunning()\n                && elapsed <= context.getConfigParams().getElectionTimeOutInterval().toMillis();\n    }", "signature": "boolean isFollowerActive()", "full_signature": "public boolean isFollowerActive()", "class_method_signature": "FollowerLogInformation.isFollowerActive()", "testcase": false, "constructor": false, "invocations": ["getVotingState", "elapsed", "isRunning", "toMillis", "getElectionTimeOutInterval", "getConfigParams"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}