{"test_class": {"identifier": "DirectedGraphPathCheckTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static GraphNode<Integer> node1;", "modifier": "static", "type": "GraphNode<Integer>", "declarator": "node1", "var_name": "node1"}, {"original_string": "static GraphNode<Integer> node2;", "modifier": "static", "type": "GraphNode<Integer>", "declarator": "node2", "var_name": "node2"}, {"original_string": "static GraphNode<Integer> node3;", "modifier": "static", "type": "GraphNode<Integer>", "declarator": "node3", "var_name": "node3"}, {"original_string": "static GraphNode<Integer> node4;", "modifier": "static", "type": "GraphNode<Integer>", "declarator": "node4", "var_name": "node4"}, {"original_string": "static GraphNode<Integer> node5;", "modifier": "static", "type": "GraphNode<Integer>", "declarator": "node5", "var_name": "node5"}, {"original_string": "static GraphNode<Integer> node6;", "modifier": "static", "type": "GraphNode<Integer>", "declarator": "node6", "var_name": "node6"}, {"original_string": "static GraphNode<Integer> node7;", "modifier": "static", "type": "GraphNode<Integer>", "declarator": "node7", "var_name": "node7"}, {"original_string": "static GraphNode<Integer> node8;", "modifier": "static", "type": "GraphNode<Integer>", "declarator": "node8", "var_name": "node8"}, {"original_string": "static GraphNode<Integer> node9;", "modifier": "static", "type": "GraphNode<Integer>", "declarator": "node9", "var_name": "node9"}, {"original_string": "static GraphNode<Integer> node10;", "modifier": "static", "type": "GraphNode<Integer>", "declarator": "node10", "var_name": "node10"}], "file": "algs/src/test/java/org/buptdavid/datastructure/graph/DirectedGraphPathCheckTest.java"}, "test_case": {"identifier": "testPathCheckBFS", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPathCheckBFS(){\n\t\tAssert.assertTrue(DirectedGraphPathCheck.pathCheckBFS(node1, node9));\n\t\tAssert.assertTrue(DirectedGraphPathCheck.pathCheckBFS(node4, node4));\n\t\t\n\t\tAssert.assertTrue(DirectedGraphPathCheck.pathCheckBFS(node4, node8));\n\t\t\n\t\tAssert.assertTrue(DirectedGraphPathCheck.pathCheckBFS(node4, node9));\n\t\tAssert.assertTrue(DirectedGraphPathCheck.pathCheckBFS(node9, node4));\n\t\t\n\t\tAssert.assertFalse(DirectedGraphPathCheck.pathCheckBFS(node3, node4));\n\t\tAssert.assertFalse(DirectedGraphPathCheck.pathCheckBFS(node6, node4));\n\t}", "signature": "void testPathCheckBFS()", "full_signature": "@Test public void testPathCheckBFS()", "class_method_signature": "DirectedGraphPathCheckTest.testPathCheckBFS()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "pathCheckBFS", "assertTrue", "pathCheckBFS", "assertTrue", "pathCheckBFS", "assertTrue", "pathCheckBFS", "assertTrue", "pathCheckBFS", "assertFalse", "pathCheckBFS", "assertFalse", "pathCheckBFS"]}, "focal_class": {"identifier": "DirectedGraphPathCheck", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "pathCheckDFS", "parameters": "(GraphNode<Integer> p, GraphNode<Integer> q)", "modifiers": "public static", "return": "boolean", "signature": "boolean pathCheckDFS(GraphNode<Integer> p, GraphNode<Integer> q)", "full_signature": "public static boolean pathCheckDFS(GraphNode<Integer> p, GraphNode<Integer> q)", "class_method_signature": "DirectedGraphPathCheck.pathCheckDFS(GraphNode<Integer> p, GraphNode<Integer> q)", "testcase": false, "constructor": false}, {"identifier": "pathOrderCheckDFS", "parameters": "(GraphNode<Integer> p, GraphNode<Integer> q)", "modifiers": "private static", "return": "boolean", "signature": "boolean pathOrderCheckDFS(GraphNode<Integer> p, GraphNode<Integer> q)", "full_signature": "private static boolean pathOrderCheckDFS(GraphNode<Integer> p, GraphNode<Integer> q)", "class_method_signature": "DirectedGraphPathCheck.pathOrderCheckDFS(GraphNode<Integer> p, GraphNode<Integer> q)", "testcase": false, "constructor": false}, {"identifier": "pathCheckBFS", "parameters": "(GraphNode<Integer> p, GraphNode<Integer> q)", "modifiers": "public static", "return": "boolean", "signature": "boolean pathCheckBFS(GraphNode<Integer> p, GraphNode<Integer> q)", "full_signature": "public static boolean pathCheckBFS(GraphNode<Integer> p, GraphNode<Integer> q)", "class_method_signature": "DirectedGraphPathCheck.pathCheckBFS(GraphNode<Integer> p, GraphNode<Integer> q)", "testcase": false, "constructor": false}, {"identifier": "pathOrderCheckBFS", "parameters": "(GraphNode<Integer> p, GraphNode<Integer> q)", "modifiers": "private static", "return": "boolean", "signature": "boolean pathOrderCheckBFS(GraphNode<Integer> p, GraphNode<Integer> q)", "full_signature": "private static boolean pathOrderCheckBFS(GraphNode<Integer> p, GraphNode<Integer> q)", "class_method_signature": "DirectedGraphPathCheck.pathOrderCheckBFS(GraphNode<Integer> p, GraphNode<Integer> q)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/org/buptdavid/datastructure/graph/DirectedGraphPathCheck.java"}, "focal_method": {"identifier": "pathCheckBFS", "parameters": "(GraphNode<Integer> p, GraphNode<Integer> q)", "modifiers": "public static", "return": "boolean", "body": "public static boolean pathCheckBFS(GraphNode<Integer> p, GraphNode<Integer> q){\n\t\tboolean isFound =false;\n\t\t\n\t\tp.restoreVisited();\n\t\tisFound |= pathOrderCheckBFS(p, q);\n\t\t\n\t\tq.restoreVisited();\n\t\tisFound |= pathOrderCheckBFS(q, p);\n\t\t\n\t\treturn isFound;\n\t}", "signature": "boolean pathCheckBFS(GraphNode<Integer> p, GraphNode<Integer> q)", "full_signature": "public static boolean pathCheckBFS(GraphNode<Integer> p, GraphNode<Integer> q)", "class_method_signature": "DirectedGraphPathCheck.pathCheckBFS(GraphNode<Integer> p, GraphNode<Integer> q)", "testcase": false, "constructor": false, "invocations": ["restoreVisited", "pathOrderCheckBFS", "restoreVisited", "pathOrderCheckBFS"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}