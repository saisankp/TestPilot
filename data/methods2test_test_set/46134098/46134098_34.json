{"test_class": {"identifier": "TestCSVFilter", "superclass": "", "interfaces": "", "fields": [], "file": "csv-res-filter/src/test/java/com/ibm/g11n/pipeline/resfilter/csv/TestCSVFilter.java"}, "test_case": {"identifier": "testMerge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMerge() {\n        String[] baseLines = {\n                \"key,value\",\n                \"spaghetti,Spaghetti\",\n                \"minestrone,Minestrone\",\n                \"pizza,Pizza\"\n        };\n\n        TestResourceStringData[] testData = {\n                new TestResourceStringData(\"pizza\", \"\u30d4\u30b6\", 1),\n                new TestResourceStringData(\"spaghetti\", \"\u30b9\u30d1\u30b2\u30c3\u30c6\u30a3\", 2),\n                new TestResourceStringData(\"calzone\", \"\u30ab\u30eb\u30be\u30fc\u30f3\", 3)\n        };\n\n        String[] expectedLines = {\n                \"key,value\",\n                \"spaghetti,\u30b9\u30d1\u30b2\u30c3\u30c6\u30a3\",\n                \"minestrone,Minestrone\",\n                \"pizza,\u30d4\u30b6\"\n        };\n\n        LanguageBundle bundle = TestUtils.createLanguageBundle(testData);\n        ResourceFilter filter = ResourceFilterFactory.getResourceFilter(CSVFilter.ID);\n        try (InputStream baseStream = TestUtils.creteInputStream(baseLines);\n                ByteArrayOutputStream outStream = new ByteArrayOutputStream()) {\n            filter.merge(baseStream, outStream, bundle, new FilterOptions(Locale.JAPANESE));\n            TestUtils.compareLines(expectedLines, outStream.toByteArray());\n        } catch (IOException e) {\n            fail(e.getMessage());\n        } catch (ResourceFilterException e) {\n            fail(e.getMessage());\n        }\n    }", "signature": "void testMerge()", "full_signature": "@Test public void testMerge()", "class_method_signature": "TestCSVFilter.testMerge()", "testcase": true, "constructor": false, "invocations": ["createLanguageBundle", "getResourceFilter", "creteInputStream", "merge", "compareLines", "toByteArray", "fail", "getMessage", "fail", "getMessage"]}, "focal_class": {"identifier": "CSVFilter", "superclass": "extends ResourceFilter", "interfaces": "", "fields": [{"original_string": "public static final String ID = \"CSV\";", "modifier": "public static final", "type": "String", "declarator": "ID = \"CSV\"", "var_name": "ID"}, {"original_string": "public static final Type TYPE = Type.SINGLE;", "modifier": "public static final", "type": "Type", "declarator": "TYPE = Type.SINGLE", "var_name": "TYPE"}], "methods": [{"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "CSVFilter.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream outStream, LanguageBundle languageBundle, FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void write(OutputStream outStream, LanguageBundle languageBundle, FilterOptions options)", "full_signature": "@Override public void write(OutputStream outStream, LanguageBundle languageBundle, FilterOptions options)", "class_method_signature": "CSVFilter.write(OutputStream outStream, LanguageBundle languageBundle, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "CSVFilter.merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}], "file": "csv-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/csv/CSVFilter.java"}, "focal_method": {"identifier": "merge", "parameters": "(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options) throws IOException, ResourceFilterException {\n        // create key-value map\n        Map<String, String> kvMap = new HashMap<String, String>();\n        for (ResourceString resString : languageBundle.getResourceStrings()) {\n            kvMap.put(resString.getKey(), resString.getValue());\n        }\n\n        CSVParser parser = CSVParser.parse(baseStream, StandardCharsets.UTF_8,\n                CSVFormat.RFC4180.withHeader(\"key\", \"value\").withSkipHeaderRecord(true));\n        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(outStream, StandardCharsets.UTF_8));\n        CSVPrinter printer = CSVFormat.RFC4180.withHeader(\"key\", \"value\").print(writer);\n        for (CSVRecord record : parser) {\n            String key = record.get(0);\n            String value = record.get(1);\n            String trValue = kvMap.get(key);\n            if (trValue != null) {\n                value = trValue;\n            }\n            printer.printRecord(key, value);\n        }\n        printer.flush();\n    }", "signature": "void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "CSVFilter.merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false, "invocations": ["getResourceStrings", "put", "getKey", "getValue", "parse", "withSkipHeaderRecord", "withHeader", "print", "withHeader", "get", "get", "get", "printRecord", "flush"]}, "repository": {"repo_id": 46134098, "url": "https://github.com/IBM-Cloud/gp-java-tools", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 9, "size": 6216, "license": "licensed"}}