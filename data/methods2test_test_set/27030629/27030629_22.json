{"test_class": {"identifier": "FileManagerTest", "superclass": "extends ApplicationTestCase", "interfaces": "", "fields": [{"original_string": "private FileManager fileManager;", "modifier": "private", "type": "FileManager", "declarator": "fileManager", "var_name": "fileManager"}, {"original_string": "private File cacheDir;", "modifier": "private", "type": "File", "declarator": "cacheDir", "var_name": "cacheDir"}], "file": "Data/src/test/java/com/example/data/cache/FileManagerTest.java"}, "test_case": {"identifier": "testWriteToFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testWriteToFile() {\n    File fileToWrite = createDummyFile();\n    String fileContent = \"content\";\n\n    fileManager.writeToFile(fileToWrite, fileContent);\n\n    assertThat(fileToWrite.exists(), is(true));\n  }", "signature": "void testWriteToFile()", "full_signature": "@Test public void testWriteToFile()", "class_method_signature": "FileManagerTest.testWriteToFile()", "testcase": true, "constructor": false, "invocations": ["createDummyFile", "writeToFile", "assertThat", "exists", "is"]}, "focal_class": {"identifier": "FileManager", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "writeToFile", "parameters": "(File file, String fileContent)", "modifiers": "public", "return": "void", "signature": "void writeToFile(File file, String fileContent)", "full_signature": "public void writeToFile(File file, String fileContent)", "class_method_signature": "FileManager.writeToFile(File file, String fileContent)", "testcase": false, "constructor": false}, {"identifier": "readFileContent", "parameters": "(File file)", "modifiers": "public", "return": "String", "signature": "String readFileContent(File file)", "full_signature": "public String readFileContent(File file)", "class_method_signature": "FileManager.readFileContent(File file)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(File file)", "modifiers": "public", "return": "boolean", "signature": "boolean exists(File file)", "full_signature": "public boolean exists(File file)", "class_method_signature": "FileManager.exists(File file)", "testcase": false, "constructor": false}, {"identifier": "clearDirectory", "parameters": "(File directory)", "modifiers": "public", "return": "void", "signature": "void clearDirectory(File directory)", "full_signature": "public void clearDirectory(File directory)", "class_method_signature": "FileManager.clearDirectory(File directory)", "testcase": false, "constructor": false}, {"identifier": "writeToPreferences", "parameters": "(Context context, String preferenceFileName, String key,\n      long value)", "modifiers": "public", "return": "void", "signature": "void writeToPreferences(Context context, String preferenceFileName, String key,\n      long value)", "full_signature": "public void writeToPreferences(Context context, String preferenceFileName, String key,\n      long value)", "class_method_signature": "FileManager.writeToPreferences(Context context, String preferenceFileName, String key,\n      long value)", "testcase": false, "constructor": false}, {"identifier": "getFromPreferences", "parameters": "(Context context, String preferenceFileName, String key)", "modifiers": "public", "return": "long", "signature": "long getFromPreferences(Context context, String preferenceFileName, String key)", "full_signature": "public long getFromPreferences(Context context, String preferenceFileName, String key)", "class_method_signature": "FileManager.getFromPreferences(Context context, String preferenceFileName, String key)", "testcase": false, "constructor": false}], "file": "Data/src/main/java/com/example/data/cache/FileManager.java"}, "focal_method": {"identifier": "writeToFile", "parameters": "(File file, String fileContent)", "modifiers": "public", "return": "void", "body": "public void writeToFile(File file, String fileContent) {\n    if (!file.exists()) {\n      try {\n        FileWriter writer = new FileWriter(file);\n        writer.write(fileContent);\n        writer.close();\n      } catch (FileNotFoundException e) {\n        e.printStackTrace();\n      } catch (IOException e) {\n        e.printStackTrace();\n      } finally {\n\n      }\n    }\n  }", "signature": "void writeToFile(File file, String fileContent)", "full_signature": "public void writeToFile(File file, String fileContent)", "class_method_signature": "FileManager.writeToFile(File file, String fileContent)", "testcase": false, "constructor": false, "invocations": ["exists", "write", "close", "printStackTrace", "printStackTrace"]}, "repository": {"repo_id": 27030629, "url": "https://github.com/nenick/AndroidAppDevelopment", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 17, "size": 6155, "license": "licensed"}}