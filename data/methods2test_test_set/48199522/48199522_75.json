{"test_class": {"identifier": "RiskRatioTest", "superclass": "", "interfaces": "", "fields": [], "file": "lib/src/test/java/edu/stanford/futuredata/macrobase/analysis/summary/fpg/RiskRatioTest.java"}, "test_case": {"identifier": "testRatioBoundaryConditions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRatioBoundaryConditions() {\n        // no exposure\n        assertEquals(0, RiskRatio.compute(0, 0, 100, 100), 0);\n\n        // all exposed\n        assertEquals(0, RiskRatio.compute(100, 100, 100, 100), 0);\n\n        // event only found in exposed\n        assertEquals(Double.POSITIVE_INFINITY, RiskRatio.compute(0, 100, 100, 100), 0);\n        assertEquals(Double.POSITIVE_INFINITY, RiskRatio.compute(null, 100, 100, 100), 0);\n\n        // event never found in exposed\n        assertEquals(0, RiskRatio.compute(100, 0, 1000, 100), 0);\n        assertEquals(0, RiskRatio.compute(100, null, 1000, 100), 0);\n\n        // handling nulls, all zeroes\n        assertEquals(0, RiskRatio.compute(null, null, null, null), 0);\n    }", "signature": "void testRatioBoundaryConditions()", "full_signature": "@Test public void testRatioBoundaryConditions()", "class_method_signature": "RiskRatioTest.testRatioBoundaryConditions()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "compute", "assertEquals", "compute", "assertEquals", "compute", "assertEquals", "compute", "assertEquals", "compute", "assertEquals", "compute", "assertEquals", "compute"]}, "focal_class": {"identifier": "RiskRatio", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "computeDouble", "parameters": "(double exposedInlierCount,\n                                        double exposedOutlierCount,\n                                        double totalInliers,\n                                        double totalOutliers)", "modifiers": "private static", "return": "double", "signature": "double computeDouble(double exposedInlierCount,\n                                        double exposedOutlierCount,\n                                        double totalInliers,\n                                        double totalOutliers)", "full_signature": "private static double computeDouble(double exposedInlierCount,\n                                        double exposedOutlierCount,\n                                        double totalInliers,\n                                        double totalOutliers)", "class_method_signature": "RiskRatio.computeDouble(double exposedInlierCount,\n                                        double exposedOutlierCount,\n                                        double totalInliers,\n                                        double totalOutliers)", "testcase": false, "constructor": false}, {"identifier": "compute", "parameters": "(Number exposedInlierCount,\n                                 Number exposedOutlierCount,\n                                 Number totalInliers,\n                                 Number totalOutliers)", "modifiers": "public static", "return": "double", "signature": "double compute(Number exposedInlierCount,\n                                 Number exposedOutlierCount,\n                                 Number totalInliers,\n                                 Number totalOutliers)", "full_signature": "public static double compute(Number exposedInlierCount,\n                                 Number exposedOutlierCount,\n                                 Number totalInliers,\n                                 Number totalOutliers)", "class_method_signature": "RiskRatio.compute(Number exposedInlierCount,\n                                 Number exposedOutlierCount,\n                                 Number totalInliers,\n                                 Number totalOutliers)", "testcase": false, "constructor": false}], "file": "lib/src/main/java/edu/stanford/futuredata/macrobase/analysis/summary/fpg/RiskRatio.java"}, "focal_method": {"identifier": "compute", "parameters": "(Number exposedInlierCount,\n                                 Number exposedOutlierCount,\n                                 Number totalInliers,\n                                 Number totalOutliers)", "modifiers": "public static", "return": "double", "body": "public static double compute(Number exposedInlierCount,\n                                 Number exposedOutlierCount,\n                                 Number totalInliers,\n                                 Number totalOutliers) {\n        if(exposedInlierCount == null) {\n            exposedInlierCount = 0.;\n        }\n\n        if(exposedOutlierCount == null) {\n            exposedOutlierCount = 0.;\n        }\n\n        if(totalInliers == null) {\n            totalInliers = 0.;\n        }\n\n        if(totalOutliers == null) {\n            totalOutliers = 0.;\n        }\n\n        return computeDouble(exposedInlierCount.doubleValue(),\n                             exposedOutlierCount.doubleValue(),\n                             totalInliers.doubleValue(),\n                             totalOutliers.doubleValue());\n    }", "signature": "double compute(Number exposedInlierCount,\n                                 Number exposedOutlierCount,\n                                 Number totalInliers,\n                                 Number totalOutliers)", "full_signature": "public static double compute(Number exposedInlierCount,\n                                 Number exposedOutlierCount,\n                                 Number totalInliers,\n                                 Number totalOutliers)", "class_method_signature": "RiskRatio.compute(Number exposedInlierCount,\n                                 Number exposedOutlierCount,\n                                 Number totalInliers,\n                                 Number totalOutliers)", "testcase": false, "constructor": false, "invocations": ["computeDouble", "doubleValue", "doubleValue", "doubleValue", "doubleValue"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}