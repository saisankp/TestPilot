{"test_class": {"identifier": "DatabaseSetEntryControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private WebApplicationContext webApplicationContext;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "@MockBean\n    private UserLoginInterceptor userLoginInterceptor;", "modifier": "@MockBean\n    private", "type": "UserLoginInterceptor", "declarator": "userLoginInterceptor", "var_name": "userLoginInterceptor"}, {"original_string": "@MockBean\n    private CommStatusInterceptor commStatusInterceptor;", "modifier": "@MockBean\n    private", "type": "CommStatusInterceptor", "declarator": "commStatusInterceptor", "var_name": "commStatusInterceptor"}, {"original_string": "@MockBean\n    private Message message;", "modifier": "@MockBean\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@MockBean\n    private DataBaseDao dataBaseDao;", "modifier": "@MockBean\n    private", "type": "DataBaseDao", "declarator": "dataBaseDao", "var_name": "dataBaseDao"}, {"original_string": "@MockBean\n    private DatabaseSetDao databaseSetDao;", "modifier": "@MockBean\n    private", "type": "DatabaseSetDao", "declarator": "databaseSetDao", "var_name": "databaseSetDao"}, {"original_string": "@MockBean\n    private DatabaseSetService databaseSetService;", "modifier": "@MockBean\n    private", "type": "DatabaseSetService", "declarator": "databaseSetService", "var_name": "databaseSetService"}, {"original_string": "@MockBean\n    private DataBaseSetEntryDao dataBaseSetEntryDao;", "modifier": "@MockBean\n    private", "type": "DataBaseSetEntryDao", "declarator": "dataBaseSetEntryDao", "var_name": "dataBaseSetEntryDao"}, {"original_string": "@MockBean\n    private DatabaseSetEntryService databaseSetEntryService;", "modifier": "@MockBean\n    private", "type": "DatabaseSetEntryService", "declarator": "databaseSetEntryService", "var_name": "databaseSetEntryService"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/controller/DatabaseSetEntryControllerTest.java"}, "test_case": {"identifier": "update", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void update() throws Exception {\n        String requestJson = JSONObject.toJSONString(DatabaseSetEntry.builder().id(1L).name(\"name\").build());\n        mockMvc.perform(MockMvcRequestBuilders.put(\"/groupdbSetEntry/update\")\n                .contentType(MediaType.APPLICATION_JSON_UTF8)\n                .content(requestJson)\n                .accept(MediaType.APPLICATION_JSON_UTF8))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andDo(MockMvcResultHandlers.print());\n    }", "signature": "void update()", "full_signature": "@Test public void update()", "class_method_signature": "DatabaseSetEntryControllerTest.update()", "testcase": true, "constructor": false, "invocations": ["toJSONString", "build", "name", "id", "builder", "andDo", "andExpect", "perform", "accept", "content", "contentType", "put", "isOk", "status", "print"]}, "focal_class": {"identifier": "DatabaseSetEntryController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private Message message;", "modifier": "@Autowired\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Autowired\n    private DataBaseDao dataBaseDao;", "modifier": "@Autowired\n    private", "type": "DataBaseDao", "declarator": "dataBaseDao", "var_name": "dataBaseDao"}, {"original_string": "@Autowired\n    private DatabaseSetDao databaseSetDao;", "modifier": "@Autowired\n    private", "type": "DatabaseSetDao", "declarator": "databaseSetDao", "var_name": "databaseSetDao"}, {"original_string": "@Autowired\n    private DatabaseSetService databaseSetService;", "modifier": "@Autowired\n    private", "type": "DatabaseSetService", "declarator": "databaseSetService", "var_name": "databaseSetService"}, {"original_string": "@Autowired\n    private DataBaseSetEntryDao dataBaseSetEntryDao;", "modifier": "@Autowired\n    private", "type": "DataBaseSetEntryDao", "declarator": "dataBaseSetEntryDao", "var_name": "dataBaseSetEntryDao"}, {"original_string": "@Autowired\n    private DatabaseSetEntryService databaseSetEntryService;", "modifier": "@Autowired\n    private", "type": "DatabaseSetEntryService", "declarator": "databaseSetEntryService", "var_name": "databaseSetEntryService"}], "methods": [{"identifier": "list", "parameters": "(@PathVariable(\"dbsetId\") Long dbsetId)", "modifiers": "@RequestMapping(value = \"/{dbsetId}/list\") public", "return": "ServiceResult<List<DatabaseSetEntry>>", "signature": "ServiceResult<List<DatabaseSetEntry>> list(@PathVariable(\"dbsetId\") Long dbsetId)", "full_signature": "@RequestMapping(value = \"/{dbsetId}/list\") public ServiceResult<List<DatabaseSetEntry>> list(@PathVariable(\"dbsetId\") Long dbsetId)", "class_method_signature": "DatabaseSetEntryController.list(@PathVariable(\"dbsetId\") Long dbsetId)", "testcase": false, "constructor": false}, {"identifier": "loadPageList", "parameters": "(@RequestBody Paging<DatabaseSetEntry> paging)", "modifiers": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public", "return": "ServiceResult<ListResult<DatabaseSetEntryView>>", "signature": "ServiceResult<ListResult<DatabaseSetEntryView>> loadPageList(@RequestBody Paging<DatabaseSetEntry> paging)", "full_signature": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public ServiceResult<ListResult<DatabaseSetEntryView>> loadPageList(@RequestBody Paging<DatabaseSetEntry> paging)", "class_method_signature": "DatabaseSetEntryController.loadPageList(@RequestBody Paging<DatabaseSetEntry> paging)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@Validated(AddDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> add(@Validated(AddDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public ServiceResult<String> add(@Validated(AddDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseSetEntryController.add(@Validated(AddDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "adds", "parameters": "(@Validated(AddDbSetEntry.class) @RequestBody List<DatabaseSetEntry> list, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/adds\", method = RequestMethod.POST) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> adds(@Validated(AddDbSetEntry.class) @RequestBody List<DatabaseSetEntry> list, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/adds\", method = RequestMethod.POST) public ServiceResult<String> adds(@Validated(AddDbSetEntry.class) @RequestBody List<DatabaseSetEntry> list, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseSetEntryController.adds(@Validated(AddDbSetEntry.class) @RequestBody List<DatabaseSetEntry> list, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@Validated(UpdateDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> update(@Validated(UpdateDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public ServiceResult<String> update(@Validated(UpdateDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseSetEntryController.update(@Validated(UpdateDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@Validated(DeleteDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> delete(@Validated(DeleteDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public ServiceResult<String> delete(@Validated(DeleteDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseSetEntryController.delete(@Validated(DeleteDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "sync", "parameters": "(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/sync\") public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/sync\") public ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "class_method_signature": "DatabaseSetEntryController.sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/check\") public", "return": "ConfigCkeckResult", "signature": "ConfigCkeckResult check(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/check\") public ConfigCkeckResult check(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "class_method_signature": "DatabaseSetEntryController.check(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "syncdb", "parameters": "(@Validated(AddDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/syncdb\") public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> syncdb(@Validated(AddDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/syncdb\") public ServiceResult<String> syncdb(@Validated(AddDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseSetEntryController.syncdb(@Validated(AddDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "addDbSetEntry", "parameters": "(@Validated(AddDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "modifiers": "private", "return": "ServiceResult<String>", "signature": "ServiceResult<String> addDbSetEntry(@Validated(AddDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "full_signature": "private ServiceResult<String> addDbSetEntry(@Validated(AddDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseSetEntryController.addDbSetEntry(@Validated(AddDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "getProjectButton", "parameters": "(@CurrentUser LoginUser user)", "modifiers": "@RequestMapping(\"/buttons\") public", "return": "ServiceResult", "signature": "ServiceResult getProjectButton(@CurrentUser LoginUser user)", "full_signature": "@RequestMapping(\"/buttons\") public ServiceResult getProjectButton(@CurrentUser LoginUser user)", "class_method_signature": "DatabaseSetEntryController.getProjectButton(@CurrentUser LoginUser user)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/controller/DatabaseSetEntryController.java"}, "focal_method": {"identifier": "update", "parameters": "(@Validated(UpdateDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public", "return": "ServiceResult<String>", "body": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT)\n    public ServiceResult<String> update(@Validated(UpdateDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors) throws Exception {\n        dbsetEntry.setUpdate_user_no(user.getUserNo());\n        String oldName = dataBaseSetEntryDao.getDataBaseSetEntryById(dbsetEntry.getId()).getName();\n        ValidateResult validateRes = databaseSetService.validatePermision(user, errors)\n                .addAssert(() -> databaseSetEntryService.isNotExistByName(dbsetEntry), dbsetEntry.getName() + \" \u5df2\u5b58\u5728\uff01\")\n                .addAssert(() -> dataBaseSetEntryDao.updateDatabaseSetEntry(dbsetEntry) > 0, message.db_message_update_operation_failed).validate();\n        if (!validateRes.isValid()) {\n            return ServiceResult.fail(validateRes.getSummarize());\n        }\n        return databaseSetEntryService.updateDataCenter(user, dbsetEntry);\n    }", "signature": "ServiceResult<String> update(@Validated(UpdateDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public ServiceResult<String> update(@Validated(UpdateDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseSetEntryController.update(@Validated(UpdateDbSetEntry.class) @RequestBody DatabaseSetEntry dbsetEntry, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false, "invocations": ["setUpdate_user_no", "getUserNo", "getName", "getDataBaseSetEntryById", "getId", "validate", "addAssert", "addAssert", "validatePermision", "isNotExistByName", "getName", "updateDatabaseSetEntry", "isValid", "fail", "getSummarize", "updateDataCenter"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}