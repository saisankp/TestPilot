{"test_class": {"identifier": "ResilientOperationTest", "superclass": "", "interfaces": "", "fields": [], "file": "util/src/test/java/com/google/cloud/hadoop/util/ResilientOperationTest.java"}, "test_case": {"identifier": "testCallRetriesAndFailsWithSocketErrors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCallRetriesAndFailsWithSocketErrors() throws Exception {\n    MockSleeper sleeper = new MockSleeper();\n    ArrayList<IOException> exceptions = new ArrayList<>();\n    exceptions.add(new SocketTimeoutException(\"socket\"));\n    exceptions.add(new SocketTimeoutException(\"socket\"));\n    exceptions.add(new IOException(\"FakeException\"));\n    CallableTester<IOException> callTester = new CallableTester<>(exceptions);\n    BackOff backoff = new RetryBoundedBackOff(5, new BackOffTester());\n\n    IOException thrown =\n        assertThrows(\n            IOException.class,\n            () ->\n                ResilientOperation.retry(\n                    callTester,\n                    backoff,\n                    RetryDeterminer.SOCKET_ERRORS,\n                    IOException.class,\n                    sleeper));\n    assertThat(thrown).hasMessageThat().contains(\"FakeException\");\n\n    assertThat(callTester.timesCalled()).isEqualTo(3);\n    verifySleeper(sleeper, 2);\n  }", "signature": "void testCallRetriesAndFailsWithSocketErrors()", "full_signature": "@Test public void testCallRetriesAndFailsWithSocketErrors()", "class_method_signature": "ResilientOperationTest.testCallRetriesAndFailsWithSocketErrors()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "assertThrows", "retry", "contains", "hasMessageThat", "assertThat", "isEqualTo", "assertThat", "timesCalled", "verifySleeper"]}, "focal_class": {"identifier": "ResilientOperation", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();", "modifier": "private static final", "type": "GoogleLogger", "declarator": "logger = GoogleLogger.forEnclosingClass()", "var_name": "logger"}], "methods": [{"identifier": "retry", "parameters": "(\n      CheckedCallable<T, X> callable,\n      BackOff backoff,\n      RetryDeterminer<? super X> retryDet,\n      Class<X> classType,\n      Sleeper sleeper)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T retry(\n      CheckedCallable<T, X> callable,\n      BackOff backoff,\n      RetryDeterminer<? super X> retryDet,\n      Class<X> classType,\n      Sleeper sleeper)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T retry(\n      CheckedCallable<T, X> callable,\n      BackOff backoff,\n      RetryDeterminer<? super X> retryDet,\n      Class<X> classType,\n      Sleeper sleeper)", "class_method_signature": "ResilientOperation.retry(\n      CheckedCallable<T, X> callable,\n      BackOff backoff,\n      RetryDeterminer<? super X> retryDet,\n      Class<X> classType,\n      Sleeper sleeper)", "testcase": false, "constructor": false}, {"identifier": "retry", "parameters": "(\n      CheckedCallable<T, X> callable,\n      BackOff backoff,\n      RetryDeterminer<? super X> retryDet,\n      Class<X> classType)", "modifiers": "public static", "return": "T", "signature": "T retry(\n      CheckedCallable<T, X> callable,\n      BackOff backoff,\n      RetryDeterminer<? super X> retryDet,\n      Class<X> classType)", "full_signature": "public static T retry(\n      CheckedCallable<T, X> callable,\n      BackOff backoff,\n      RetryDeterminer<? super X> retryDet,\n      Class<X> classType)", "class_method_signature": "ResilientOperation.retry(\n      CheckedCallable<T, X> callable,\n      BackOff backoff,\n      RetryDeterminer<? super X> retryDet,\n      Class<X> classType)", "testcase": false, "constructor": false}, {"identifier": "nextSleep", "parameters": "(BackOff backoff, Sleeper sleeper, Exception currentException)", "modifiers": "private static", "return": "boolean", "signature": "boolean nextSleep(BackOff backoff, Sleeper sleeper, Exception currentException)", "full_signature": "private static boolean nextSleep(BackOff backoff, Sleeper sleeper, Exception currentException)", "class_method_signature": "ResilientOperation.nextSleep(BackOff backoff, Sleeper sleeper, Exception currentException)", "testcase": false, "constructor": false}, {"identifier": "getGoogleRequestCallable", "parameters": "(\n      AbstractGoogleClientRequest<V> request)", "modifiers": "public static", "return": "CheckedCallable<V, IOException>", "signature": "CheckedCallable<V, IOException> getGoogleRequestCallable(\n      AbstractGoogleClientRequest<V> request)", "full_signature": "public static CheckedCallable<V, IOException> getGoogleRequestCallable(\n      AbstractGoogleClientRequest<V> request)", "class_method_signature": "ResilientOperation.getGoogleRequestCallable(\n      AbstractGoogleClientRequest<V> request)", "testcase": false, "constructor": false}], "file": "util/src/main/java/com/google/cloud/hadoop/util/ResilientOperation.java"}, "focal_method": {"identifier": "retry", "parameters": "(\n      CheckedCallable<T, X> callable,\n      BackOff backoff,\n      RetryDeterminer<? super X> retryDet,\n      Class<X> classType,\n      Sleeper sleeper)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "body": "@SuppressWarnings(\"unchecked\")\n  public static <T, X extends Exception> T retry(\n      CheckedCallable<T, X> callable,\n      BackOff backoff,\n      RetryDeterminer<? super X> retryDet,\n      Class<X> classType,\n      Sleeper sleeper)\n      throws X, InterruptedException {\n    checkNotNull(backoff, \"Must provide a non-null BackOff.\");\n    checkNotNull(retryDet, \"Must provide a non-null RetryDeterminer.\");\n    checkNotNull(sleeper, \"Must provide a non-null Sleeper.\");\n    checkNotNull(callable, \"Must provide a non-null Executable object.\");\n\n    X currentException;\n    do {\n      try {\n        return callable.call();\n      } catch (Exception e) {\n        if (classType.isInstance(e)) { // e is something that extends X\n          currentException = (X) e;\n          if (!retryDet.shouldRetry(currentException)) {\n            throw currentException;\n          }\n        } else {\n          if (e instanceof RuntimeException) {\n            throw (RuntimeException) e;\n          }\n          throw new RuntimeException(\n              \"Retrying with unchecked exceptions that are not RuntimeExceptions is not supported.\",\n              e);\n        }\n      }\n    } while (nextSleep(backoff, sleeper, currentException));\n    throw currentException;\n  }", "signature": "T retry(\n      CheckedCallable<T, X> callable,\n      BackOff backoff,\n      RetryDeterminer<? super X> retryDet,\n      Class<X> classType,\n      Sleeper sleeper)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T retry(\n      CheckedCallable<T, X> callable,\n      BackOff backoff,\n      RetryDeterminer<? super X> retryDet,\n      Class<X> classType,\n      Sleeper sleeper)", "class_method_signature": "ResilientOperation.retry(\n      CheckedCallable<T, X> callable,\n      BackOff backoff,\n      RetryDeterminer<? super X> retryDet,\n      Class<X> classType,\n      Sleeper sleeper)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "checkNotNull", "checkNotNull", "call", "isInstance", "shouldRetry", "nextSleep"]}, "repository": {"repo_id": 19684359, "url": "https://github.com/GoogleCloudDataproc/bigdata-interop", "stars": 178, "created": "5/12/2014 3:11:55 AM +00:00", "updates": "2020-01-23T23:10:40+00:00", "fork": "False", "license": "licensed"}}