{"test_class": {"identifier": "IoUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-core/src/test/java/org/drools/core/util/IoUtilsTest.java"}, "test_case": {"identifier": "testAsSystemSpecificPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAsSystemSpecificPath() {\n        String urlPath = \"c:\\\\workdir\\\\server-local\\\\instance\\\\tmp\\\\vfs\\\\deployment\\\\deploymentf7b5abe7c4c1cb56\\\\rules-with-kjar-1.0.jar-57cc270a5729d6b2\\\\rules-with-kjar-1.0.jar\";\n        String specificPath = IoUtils.asSystemSpecificPath(urlPath, 1);\n        // Check that windows drive (even in lower case) is not removed\n        assertEquals(urlPath, specificPath);\n    }", "signature": "void testAsSystemSpecificPath()", "full_signature": "@Test public void testAsSystemSpecificPath()", "class_method_signature": "IoUtilsTest.testAsSystemSpecificPath()", "testcase": true, "constructor": false, "invocations": ["asSystemSpecificPath", "assertEquals"]}, "focal_class": {"identifier": "IoUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Charset UTF8_CHARSET = Charset.forName(\"UTF-8\");", "modifier": "public static final", "type": "Charset", "declarator": "UTF8_CHARSET = Charset.forName(\"UTF-8\")", "var_name": "UTF8_CHARSET"}], "methods": [{"identifier": "findPort", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int findPort()", "full_signature": "public static int findPort()", "class_method_signature": "IoUtils.findPort()", "testcase": false, "constructor": false}, {"identifier": "validPort", "parameters": "(int port)", "modifiers": "public static", "return": "boolean", "signature": "boolean validPort(int port)", "full_signature": "public static boolean validPort(int port)", "class_method_signature": "IoUtils.validPort(int port)", "testcase": false, "constructor": false}, {"identifier": "readFileAsString", "parameters": "(File file)", "modifiers": "public static", "return": "String", "signature": "String readFileAsString(File file)", "full_signature": "public static String readFileAsString(File file)", "class_method_signature": "IoUtils.readFileAsString(File file)", "testcase": false, "constructor": false}, {"identifier": "copyFile", "parameters": "(File sourceFile, File destFile)", "modifiers": "public static", "return": "void", "signature": "void copyFile(File sourceFile, File destFile)", "full_signature": "public static void copyFile(File sourceFile, File destFile)", "class_method_signature": "IoUtils.copyFile(File sourceFile, File destFile)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "( InputStream input, OutputStream output )", "modifiers": "public static", "return": "long", "signature": "long copy( InputStream input, OutputStream output )", "full_signature": "public static long copy( InputStream input, OutputStream output )", "class_method_signature": "IoUtils.copy( InputStream input, OutputStream output )", "testcase": false, "constructor": false}, {"identifier": "copyInTempFile", "parameters": "( InputStream input, String fileExtension )", "modifiers": "public static", "return": "File", "signature": "File copyInTempFile( InputStream input, String fileExtension )", "full_signature": "public static File copyInTempFile( InputStream input, String fileExtension )", "class_method_signature": "IoUtils.copyInTempFile( InputStream input, String fileExtension )", "testcase": false, "constructor": false}, {"identifier": "recursiveListFile", "parameters": "(File folder)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> recursiveListFile(File folder)", "full_signature": "public static List<String> recursiveListFile(File folder)", "class_method_signature": "IoUtils.recursiveListFile(File folder)", "testcase": false, "constructor": false}, {"identifier": "recursiveListFile", "parameters": "(File folder, String prefix, Predicate<File> filter)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> recursiveListFile(File folder, String prefix, Predicate<File> filter)", "full_signature": "public static List<String> recursiveListFile(File folder, String prefix, Predicate<File> filter)", "class_method_signature": "IoUtils.recursiveListFile(File folder, String prefix, Predicate<File> filter)", "testcase": false, "constructor": false}, {"identifier": "filesInFolder", "parameters": "(List<String> files, File file, String relativePath, Predicate<File> filter)", "modifiers": "private static", "return": "void", "signature": "void filesInFolder(List<String> files, File file, String relativePath, Predicate<File> filter)", "full_signature": "private static void filesInFolder(List<String> files, File file, String relativePath, Predicate<File> filter)", "class_method_signature": "IoUtils.filesInFolder(List<String> files, File file, String relativePath, Predicate<File> filter)", "testcase": false, "constructor": false}, {"identifier": "safeListFiles", "parameters": "(final File file)", "modifiers": "private static", "return": "File[]", "signature": "File[] safeListFiles(final File file)", "full_signature": "private static File[] safeListFiles(final File file)", "class_method_signature": "IoUtils.safeListFiles(final File file)", "testcase": false, "constructor": false}, {"identifier": "readBytesFromInputStream", "parameters": "(InputStream input)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readBytesFromInputStream(InputStream input)", "full_signature": "public static byte[] readBytesFromInputStream(InputStream input)", "class_method_signature": "IoUtils.readBytesFromInputStream(InputStream input)", "testcase": false, "constructor": false}, {"identifier": "readBytesFromInputStream", "parameters": "(InputStream input, boolean closeInput)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readBytesFromInputStream(InputStream input, boolean closeInput)", "full_signature": "public static byte[] readBytesFromInputStream(InputStream input, boolean closeInput)", "class_method_signature": "IoUtils.readBytesFromInputStream(InputStream input, boolean closeInput)", "testcase": false, "constructor": false}, {"identifier": "createBytesBuffer", "parameters": "( InputStream input )", "modifiers": "private static", "return": "byte[]", "signature": "byte[] createBytesBuffer( InputStream input )", "full_signature": "private static byte[] createBytesBuffer( InputStream input )", "class_method_signature": "IoUtils.createBytesBuffer( InputStream input )", "testcase": false, "constructor": false}, {"identifier": "readBytesFromZipEntry", "parameters": "(File file, ZipEntry entry)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readBytesFromZipEntry(File file, ZipEntry entry)", "full_signature": "public static byte[] readBytesFromZipEntry(File file, ZipEntry entry)", "class_method_signature": "IoUtils.readBytesFromZipEntry(File file, ZipEntry entry)", "testcase": false, "constructor": false}, {"identifier": "readBytes", "parameters": "(File f)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readBytes(File f)", "full_signature": "public static byte[] readBytes(File f)", "class_method_signature": "IoUtils.readBytes(File f)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(File f,\n                             byte[] data)", "modifiers": "public static", "return": "void", "signature": "void write(File f,\n                             byte[] data)", "full_signature": "public static void write(File f,\n                             byte[] data)", "class_method_signature": "IoUtils.write(File f,\n                             byte[] data)", "testcase": false, "constructor": false}, {"identifier": "writeBytes", "parameters": "(File f, byte[] data)", "modifiers": "public static", "return": "void", "signature": "void writeBytes(File f, byte[] data)", "full_signature": "public static void writeBytes(File f, byte[] data)", "class_method_signature": "IoUtils.writeBytes(File f, byte[] data)", "testcase": false, "constructor": false}, {"identifier": "areByteArraysEqual", "parameters": "(byte[] b1,\n                                             byte[] b2)", "modifiers": "public static", "return": "boolean", "signature": "boolean areByteArraysEqual(byte[] b1,\n                                             byte[] b2)", "full_signature": "public static boolean areByteArraysEqual(byte[] b1,\n                                             byte[] b2)", "class_method_signature": "IoUtils.areByteArraysEqual(byte[] b1,\n                                             byte[] b2)", "testcase": false, "constructor": false}, {"identifier": "asSystemSpecificPath", "parameters": "(String urlPath, int colonIndex)", "modifiers": "public static", "return": "String", "signature": "String asSystemSpecificPath(String urlPath, int colonIndex)", "full_signature": "public static String asSystemSpecificPath(String urlPath, int colonIndex)", "class_method_signature": "IoUtils.asSystemSpecificPath(String urlPath, int colonIndex)", "testcase": false, "constructor": false}], "file": "drools-core/src/main/java/org/drools/core/util/IoUtils.java"}, "focal_method": {"identifier": "asSystemSpecificPath", "parameters": "(String urlPath, int colonIndex)", "modifiers": "public static", "return": "String", "body": "public static String asSystemSpecificPath(String urlPath, int colonIndex) {\n        String ic = urlPath.substring( Math.max( 0, colonIndex - 2 ), colonIndex + 1 );\n        if  ( ic.matches( \"\\\\/[a-zA-Z]:\" ) ) {\n            return urlPath.substring( colonIndex - 2 );\n        } else if  ( ic.matches( \"[a-zA-Z]:\" ) ) {\n            return urlPath.substring( colonIndex - 1 );\n        } else {\n            return urlPath.substring( colonIndex + 1 );\n        }\n    }", "signature": "String asSystemSpecificPath(String urlPath, int colonIndex)", "full_signature": "public static String asSystemSpecificPath(String urlPath, int colonIndex)", "class_method_signature": "IoUtils.asSystemSpecificPath(String urlPath, int colonIndex)", "testcase": false, "constructor": false, "invocations": ["substring", "max", "matches", "substring", "matches", "substring", "substring"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}