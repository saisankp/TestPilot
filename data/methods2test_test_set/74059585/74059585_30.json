{"test_class": {"identifier": "ConnectionInvocationHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TraceService mockTraceService = mock(TraceService.class);", "modifier": "private final", "type": "TraceService", "declarator": "mockTraceService = mock(TraceService.class)", "var_name": "mockTraceService"}, {"original_string": "private final TraceService.Span mockTraceSpan = mock(TraceService.Span.class);", "modifier": "private final", "type": "TraceService.Span", "declarator": "mockTraceSpan = mock(TraceService.Span.class)", "var_name": "mockTraceSpan"}, {"original_string": "private final Connection mockRealConnection = mock(Connection.class);", "modifier": "private final", "type": "Connection", "declarator": "mockRealConnection = mock(Connection.class)", "var_name": "mockRealConnection"}, {"original_string": "private final Statement mockRealStatement = mock(Statement.class);", "modifier": "private final", "type": "Statement", "declarator": "mockRealStatement = mock(Statement.class)", "var_name": "mockRealStatement"}, {"original_string": "private final Proxy mockProxy = mock(Proxy.class);", "modifier": "private final", "type": "Proxy", "declarator": "mockProxy = mock(Proxy.class)", "var_name": "mockProxy"}, {"original_string": "private ConnectionInvocationHandler connectionInvocationHandler;", "modifier": "private", "type": "ConnectionInvocationHandler", "declarator": "connectionInvocationHandler", "var_name": "connectionInvocationHandler"}], "file": "jdbc/driver-common/src/test/java/com/google/cloud/trace/jdbc/ConnectionInvocationHandlerTest.java"}, "test_case": {"identifier": "invoke_createStatement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void invoke_createStatement() throws Throwable {\n    when(mockRealConnection.createStatement()).thenReturn(mockRealStatement);\n\n    Object o =\n        connectionInvocationHandler.invoke(\n            mockProxy, Connection.class.getDeclaredMethod(\"createStatement\"), new Object[0]);\n\n    verify(mockRealConnection).createStatement();\n    assertThat(o instanceof Statement).isTrue();\n\n    ((Statement) o).execute(\"some sql text\");\n    verify(mockRealStatement).execute(\"some sql text\");\n  }", "signature": "void invoke_createStatement()", "full_signature": "@Test public void invoke_createStatement()", "class_method_signature": "ConnectionInvocationHandlerTest.invoke_createStatement()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "createStatement", "invoke", "getDeclaredMethod", "createStatement", "verify", "isTrue", "assertThat", "execute", "execute", "verify"]}, "focal_class": {"identifier": "ConnectionInvocationHandler", "superclass": "", "interfaces": "implements InvocationHandler", "fields": [{"original_string": "private final Connection conn;", "modifier": "private final", "type": "Connection", "declarator": "conn", "var_name": "conn"}, {"original_string": "private final TraceOptions traceOptions;", "modifier": "private final", "type": "TraceOptions", "declarator": "traceOptions", "var_name": "traceOptions"}, {"original_string": "private final TraceService traceService;", "modifier": "private final", "type": "TraceService", "declarator": "traceService", "var_name": "traceService"}], "methods": [{"identifier": "ConnectionInvocationHandler", "parameters": "(\n      Connection conn, TraceOptions traceOptions, TraceService traceService)", "modifiers": "", "return": "", "signature": " ConnectionInvocationHandler(\n      Connection conn, TraceOptions traceOptions, TraceService traceService)", "full_signature": "  ConnectionInvocationHandler(\n      Connection conn, TraceOptions traceOptions, TraceService traceService)", "class_method_signature": "ConnectionInvocationHandler.ConnectionInvocationHandler(\n      Connection conn, TraceOptions traceOptions, TraceService traceService)", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(Object proxy, Method method, Object[] args)", "modifiers": "@Override public", "return": "Object", "signature": "Object invoke(Object proxy, Method method, Object[] args)", "full_signature": "@Override public Object invoke(Object proxy, Method method, Object[] args)", "class_method_signature": "ConnectionInvocationHandler.invoke(Object proxy, Method method, Object[] args)", "testcase": false, "constructor": false}], "file": "jdbc/driver-common/src/main/java/com/google/cloud/trace/jdbc/ConnectionInvocationHandler.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Object proxy, Method method, Object[] args)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    checkNotNull(method);\n\n    // Extract the sql text when creating a CallableStatement or a PreparedStatement and then pass\n    // it to the StatementInvocationHandler which will annotate the trace span with this sql text.\n    Optional<String> sql;\n    if ((method.getName().equals(\"prepareCall\") || method.getName().equals(\"prepareStatement\"))\n        && method.getParameterTypes().length > 0\n        && method.getParameterTypes()[0] == String.class) {\n      sql = Optional.fromNullable((String) args[0]);\n    } else {\n      sql = Optional.absent();\n    }\n\n    Object o;\n    try {\n      o = method.invoke(conn, args);\n    } catch (InvocationTargetException e) {\n      // Rethrow the exception from the underlying method.\n      throw e.getCause();\n    }\n\n    if (o instanceof Statement) {\n      Statement stmt = (Statement) o;\n      o =\n          Proxies.newProxyInstance(\n              stmt, new StatementInvocationHandler(stmt, traceOptions, traceService, sql));\n    }\n\n    return o;\n  }", "signature": "Object invoke(Object proxy, Method method, Object[] args)", "full_signature": "@Override public Object invoke(Object proxy, Method method, Object[] args)", "class_method_signature": "ConnectionInvocationHandler.invoke(Object proxy, Method method, Object[] args)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "equals", "getName", "equals", "getName", "getParameterTypes", "getParameterTypes", "fromNullable", "absent", "invoke", "getCause", "newProxyInstance"]}, "repository": {"repo_id": 74059585, "url": "https://github.com/GoogleCloudPlatform/cloud-trace-java-instrumentation", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 10, "size": 141, "license": "licensed"}}