{"test_class": {"identifier": "FSRegisteredPackageTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final PackageId DUMMY_ID = new PackageId(\"someGroup\", \"someName\", \"someVersion\");", "modifier": "private static final", "type": "PackageId", "declarator": "DUMMY_ID = new PackageId(\"someGroup\", \"someName\", \"someVersion\")", "var_name": "DUMMY_ID"}], "file": "vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/registry/impl/FSRegisteredPackageTest.java"}, "test_case": {"identifier": "testGetPackageFromNonTruncatedFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPackageFromNonTruncatedFile() throws IOException {\n        File packageFile = getTempFile(\"test-package.zip\");\n        try (RegisteredPackage regPack = new FSRegisteredPackage(newRegistry(packageFile), newInstallState(packageFile));\n                VaultPackage vltPack = regPack.getPackage()) {\n            assertNotNull(vltPack);\n            assertNotNull(vltPack.getArchive());\n        } catch (IOException e) {\n            fail(\"should not throw any exception, but thrown: \" + e.getMessage());\n        } finally {\n            packageFile.delete();\n        }\n    }", "signature": "void testGetPackageFromNonTruncatedFile()", "full_signature": "@Test public void testGetPackageFromNonTruncatedFile()", "class_method_signature": "FSRegisteredPackageTest.testGetPackageFromNonTruncatedFile()", "testcase": true, "constructor": false, "invocations": ["getTempFile", "newRegistry", "newInstallState", "getPackage", "assertNotNull", "assertNotNull", "getArchive", "fail", "getMessage", "delete"]}, "focal_class": {"identifier": "FSRegisteredPackage", "superclass": "", "interfaces": "implements RegisteredPackage", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(FSPackageRegistry.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(FSPackageRegistry.class)", "var_name": "log"}, {"original_string": "private FSPackageRegistry registry;", "modifier": "private", "type": "FSPackageRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private VaultPackage vltPkg = null;", "modifier": "private", "type": "VaultPackage", "declarator": "vltPkg = null", "var_name": "vltPkg"}, {"original_string": "private PackageId id;", "modifier": "private", "type": "PackageId", "declarator": "id", "var_name": "id"}, {"original_string": "private PackageProperties packageProperties;", "modifier": "private", "type": "PackageProperties", "declarator": "packageProperties", "var_name": "packageProperties"}, {"original_string": "private Dependency[] dependencies;", "modifier": "private", "type": "Dependency[]", "declarator": "dependencies", "var_name": "dependencies"}, {"original_string": "private WorkspaceFilter filter;", "modifier": "private", "type": "WorkspaceFilter", "declarator": "filter", "var_name": "filter"}, {"original_string": "private long size;", "modifier": "private", "type": "long", "declarator": "size", "var_name": "size"}], "methods": [{"identifier": "FSRegisteredPackage", "parameters": "(FSPackageRegistry registry, FSInstallState installState)", "modifiers": "public", "return": "", "signature": " FSRegisteredPackage(FSPackageRegistry registry, FSInstallState installState)", "full_signature": "public  FSRegisteredPackage(FSPackageRegistry registry, FSInstallState installState)", "class_method_signature": "FSRegisteredPackage.FSRegisteredPackage(FSPackageRegistry registry, FSInstallState installState)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "PackageId", "signature": "PackageId getId()", "full_signature": "@NotNull @Override public PackageId getId()", "class_method_signature": "FSRegisteredPackage.getId()", "testcase": false, "constructor": false}, {"identifier": "getPackage", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "VaultPackage", "signature": "VaultPackage getPackage()", "full_signature": "@NotNull @Override public VaultPackage getPackage()", "class_method_signature": "FSRegisteredPackage.getPackage()", "testcase": false, "constructor": false}, {"identifier": "isInstalled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isInstalled()", "full_signature": "@Override public boolean isInstalled()", "class_method_signature": "FSRegisteredPackage.isInstalled()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getSize()", "full_signature": "@Override public long getSize()", "class_method_signature": "FSRegisteredPackage.getSize()", "testcase": false, "constructor": false}, {"identifier": "getInstallationTime", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "Calendar", "signature": "Calendar getInstallationTime()", "full_signature": "@Nullable @Override public Calendar getInstallationTime()", "class_method_signature": "FSRegisteredPackage.getInstallationTime()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "FSRegisteredPackage.close()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(RegisteredPackage o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(RegisteredPackage o)", "full_signature": "@Override public int compareTo(RegisteredPackage o)", "class_method_signature": "FSRegisteredPackage.compareTo(RegisteredPackage o)", "testcase": false, "constructor": false}, {"identifier": "getDependencies", "parameters": "()", "modifiers": "@Override public", "return": "Dependency[]", "signature": "Dependency[] getDependencies()", "full_signature": "@Override public Dependency[] getDependencies()", "class_method_signature": "FSRegisteredPackage.getDependencies()", "testcase": false, "constructor": false}, {"identifier": "getWorkspaceFilter", "parameters": "()", "modifiers": "@Override public", "return": "WorkspaceFilter", "signature": "WorkspaceFilter getWorkspaceFilter()", "full_signature": "@Override public WorkspaceFilter getWorkspaceFilter()", "class_method_signature": "FSRegisteredPackage.getWorkspaceFilter()", "testcase": false, "constructor": false}, {"identifier": "getPackageProperties", "parameters": "()", "modifiers": "@Override public", "return": "PackageProperties", "signature": "PackageProperties getPackageProperties()", "full_signature": "@Override public PackageProperties getPackageProperties()", "class_method_signature": "FSRegisteredPackage.getPackageProperties()", "testcase": false, "constructor": false}], "file": "vault-core/src/main/java/org/apache/jackrabbit/vault/packaging/registry/impl/FSRegisteredPackage.java"}, "focal_method": {"identifier": "getPackage", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "VaultPackage", "body": "@NotNull\n    @Override\n    public VaultPackage getPackage() throws IOException {\n        if (this.vltPkg == null) {\n            this.vltPkg = registry.openPackageFile(getId());\n        }\n        return this.vltPkg;\n    }", "signature": "VaultPackage getPackage()", "full_signature": "@NotNull @Override public VaultPackage getPackage()", "class_method_signature": "FSRegisteredPackage.getPackage()", "testcase": false, "constructor": false, "invocations": ["openPackageFile", "getId"]}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}