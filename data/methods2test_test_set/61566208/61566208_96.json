{"test_class": {"identifier": "HmsManagementRestServiceTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/hms-core/src/test/java/com/vmware/vrack/hms/rest/services/HmsManagementRestServiceTest.java"}, "test_case": {"identifier": "testGetHMSNodes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetHMSNodes()\n        throws HMSRestException\n    {\n\n        ServerNodeConnector.getInstance().setNodeMap( new ConcurrentHashMap<String, HmsNode>() );\n        ComponentEventRestServiceTest.insertNodeInNodeMap( ComponentEventRestServiceTest.getServerNode() );\n\n        SwitchNode switchNode = new SwitchNode( \"Arista\", \"SSH\", \"10.28.197.248\", 22, \"lanier\", \"l@ni3r2o14\" );\n        ConcurrentHashMap<String, SwitchNode> switchMap = new ConcurrentHashMap<String, SwitchNode>();\n        switchMap.put( \"S1\", switchNode );\n        SwitchNodeConnector.getInstance().switchNodeMap = switchMap;\n\n        HMSManagementRestService service = new HMSManagementRestService();\n        Map<String, Object[]> hmsNodes = service.getHMSNodes();\n\n        // Test for masked objects;\n        Object[] serverNodes = hmsNodes.get( Constants.HOSTS );\n        for ( Object serverNode : serverNodes )\n        {\n            ServerNode servNode = (ServerNode) serverNode;\n            assertEquals( servNode.getNodeID(), \"N1\" );\n            assertEquals( servNode.getBoardProductName(), \"S2600GZ\" );\n            assertEquals( servNode.getBoardVendor(), \"Intel\" );\n            assertEquals( servNode.getIbIpAddress(), \"10.28.197.28\" );\n            assertEquals( servNode.getManagementIp(), \"10.28.197.208\" );\n            assertEquals( servNode.getOsUserName(), \"testuser\" );\n            assertEquals( servNode.getOsPassword(), \"****\" );\n        }\n\n        Object[] switches = hmsNodes.get( Constants.SWITCHES );\n        for ( Object obj : switches )\n        {\n            SwitchNode sNode = (SwitchNode) obj;\n            assertEquals( sNode.getSwitchId(), \"Arista\" );\n            assertEquals( sNode.getProtocol(), \"SSH\" );\n            assertEquals( sNode.getPort(), new Integer( 22 ) );\n            assertEquals( sNode.getUsername(), \"lanier\" );\n            assertEquals( sNode.getPassword(), \"****\" );\n        }\n\n        // Test for original objects\n        Map<String, HmsNode> nodeMap = ServerNodeConnector.getInstance().getNodeMap();\n        ServerNode servNode = (ServerNode) nodeMap.get( \"N1\" );\n        assertEquals( servNode.getNodeID(), \"N1\" );\n        assertEquals( servNode.getBoardProductName(), \"S2600GZ\" );\n        assertEquals( servNode.getBoardVendor(), \"Intel\" );\n        assertEquals( servNode.getIbIpAddress(), \"10.28.197.28\" );\n        assertEquals( servNode.getManagementIp(), \"10.28.197.208\" );\n        assertEquals( servNode.getOsUserName(), \"testuser\" );\n        assertEquals( servNode.getOsPassword(), \"ospassword\" );\n\n        Map<String, SwitchNode> switchNodeMap = SwitchNodeConnector.getInstance().switchNodeMap;\n        SwitchNode sNode = (SwitchNode) switchNodeMap.get( \"S1\" );\n        assertEquals( sNode.getSwitchId(), \"Arista\" );\n        assertEquals( sNode.getProtocol(), \"SSH\" );\n        assertEquals( sNode.getPort(), new Integer( 22 ) );\n        assertEquals( sNode.getUsername(), \"lanier\" );\n        assertEquals( sNode.getPassword(), \"l@ni3r2o14\" );\n    }", "signature": "void testGetHMSNodes()", "full_signature": "@Test public void testGetHMSNodes()", "class_method_signature": "HmsManagementRestServiceTest.testGetHMSNodes()", "testcase": true, "constructor": false, "invocations": ["setNodeMap", "getInstance", "insertNodeInNodeMap", "getServerNode", "put", "getInstance", "getHMSNodes", "get", "assertEquals", "getNodeID", "assertEquals", "getBoardProductName", "assertEquals", "getBoardVendor", "assertEquals", "getIbIpAddress", "assertEquals", "getManagementIp", "assertEquals", "getOsUserName", "assertEquals", "getOsPassword", "get", "assertEquals", "getSwitchId", "assertEquals", "getProtocol", "assertEquals", "getPort", "assertEquals", "getUsername", "assertEquals", "getPassword", "getNodeMap", "getInstance", "get", "assertEquals", "getNodeID", "assertEquals", "getBoardProductName", "assertEquals", "getBoardVendor", "assertEquals", "getIbIpAddress", "assertEquals", "getManagementIp", "assertEquals", "getOsUserName", "assertEquals", "getOsPassword", "getInstance", "get", "assertEquals", "getSwitchId", "assertEquals", "getProtocol", "assertEquals", "getPort", "assertEquals", "getUsername", "assertEquals", "getPassword"]}, "focal_class": {"identifier": "HMSManagementRestService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String QUOTE = \"\\\"\";", "modifier": "private static final", "type": "String", "declarator": "QUOTE = \"\\\"\"", "var_name": "QUOTE"}, {"original_string": "public static final String GRANT_EXECUTE_RIGHTS = \"chmod +x %s\";", "modifier": "public static final", "type": "String", "declarator": "GRANT_EXECUTE_RIGHTS = \"chmod +x %s\"", "var_name": "GRANT_EXECUTE_RIGHTS"}, {"original_string": "public final String TIMESTAMP_FORMAT = \"yyyy-MM-dd_hh-mm-ss\";", "modifier": "public final", "type": "String", "declarator": "TIMESTAMP_FORMAT = \"yyyy-MM-dd_hh-mm-ss\"", "var_name": "TIMESTAMP_FORMAT"}, {"original_string": "private static Logger logger = LoggerFactory.getLogger( HMSManagementRestService.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( HMSManagementRestService.class )", "var_name": "logger"}, {"original_string": "private ServerNodeConnector serverConnector = ServerNodeConnector.getInstance();", "modifier": "private", "type": "ServerNodeConnector", "declarator": "serverConnector = ServerNodeConnector.getInstance()", "var_name": "serverConnector"}, {"original_string": "private SwitchNodeConnector switchConnector = SwitchNodeConnector.getInstance();", "modifier": "private", "type": "SwitchNodeConnector", "declarator": "switchConnector = SwitchNodeConnector.getInstance()", "var_name": "switchConnector"}], "methods": [{"identifier": "getHMSNodes", "parameters": "()", "modifiers": "@GET @Path( \"/nodes\" ) @Produces( \"application/json\" ) public", "return": "Map<String, Object[]>", "signature": "Map<String, Object[]> getHMSNodes()", "full_signature": "@GET @Path( \"/nodes\" ) @Produces( \"application/json\" ) public Map<String, Object[]> getHMSNodes()", "class_method_signature": "HMSManagementRestService.getHMSNodes()", "testcase": false, "constructor": false}, {"identifier": "discoverNodes", "parameters": "()", "modifiers": "@GET @Path( \"/discover\" ) @Produces( \"application/json\" ) public", "return": "NodeDiscoveryResponse", "signature": "NodeDiscoveryResponse discoverNodes()", "full_signature": "@GET @Path( \"/discover\" ) @Produces( \"application/json\" ) public NodeDiscoveryResponse discoverNodes()", "class_method_signature": "HMSManagementRestService.discoverNodes()", "testcase": false, "constructor": false}, {"identifier": "handshake", "parameters": "()", "modifiers": "@POST @Path( \"/handshake\" ) @Consumes( MediaType.APPLICATION_JSON ) @Produces( \"application/json\" ) public", "return": "BaseResponse", "signature": "BaseResponse handshake()", "full_signature": "@POST @Path( \"/handshake\" ) @Consumes( MediaType.APPLICATION_JSON ) @Produces( \"application/json\" ) public BaseResponse handshake()", "class_method_signature": "HMSManagementRestService.handshake()", "testcase": false, "constructor": false}, {"identifier": "handshake", "parameters": "( @PathParam( \"aggregator_ip\" ) String aggregatorIp,\n                                   @PathParam( \"source\" ) String source )", "modifiers": "@POST @Path( \"/handshake/{aggregator_ip}/{source}\" ) @Consumes( MediaType.APPLICATION_JSON ) @Produces( \"application/json\" ) public", "return": "BaseResponse", "signature": "BaseResponse handshake( @PathParam( \"aggregator_ip\" ) String aggregatorIp,\n                                   @PathParam( \"source\" ) String source )", "full_signature": "@POST @Path( \"/handshake/{aggregator_ip}/{source}\" ) @Consumes( MediaType.APPLICATION_JSON ) @Produces( \"application/json\" ) public BaseResponse handshake( @PathParam( \"aggregator_ip\" ) String aggregatorIp,\n                                   @PathParam( \"source\" ) String source )", "class_method_signature": "HMSManagementRestService.handshake( @PathParam( \"aggregator_ip\" ) String aggregatorIp,\n                                   @PathParam( \"source\" ) String source )", "testcase": false, "constructor": false}, {"identifier": "isHandshakeCompleted", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isHandshakeCompleted()", "full_signature": "private boolean isHandshakeCompleted()", "class_method_signature": "HMSManagementRestService.isHandshakeCompleted()", "testcase": false, "constructor": false}, {"identifier": "updateProxyConfiguration", "parameters": "( String aggregatorIp )", "modifiers": "private", "return": "void", "signature": "void updateProxyConfiguration( String aggregatorIp )", "full_signature": "private void updateProxyConfiguration( String aggregatorIp )", "class_method_signature": "HMSManagementRestService.updateProxyConfiguration( String aggregatorIp )", "testcase": false, "constructor": false}, {"identifier": "getSupportedOOBOperations", "parameters": "()", "modifiers": "@GET @Path( \"/service/operations\" ) @Produces( \"application/json\" ) public", "return": "Map<String, List<HmsApi>>", "signature": "Map<String, List<HmsApi>> getSupportedOOBOperations()", "full_signature": "@GET @Path( \"/service/operations\" ) @Produces( \"application/json\" ) public Map<String, List<HmsApi>> getSupportedOOBOperations()", "class_method_signature": "HMSManagementRestService.getSupportedOOBOperations()", "testcase": false, "constructor": false}, {"identifier": "executeThreadStackLogger", "parameters": "()", "modifiers": "@GET @Path( \"/debug/threads\" ) @Produces( \"application/json\" ) public", "return": "Map<String, String>", "signature": "Map<String, String> executeThreadStackLogger()", "full_signature": "@GET @Path( \"/debug/threads\" ) @Produces( \"application/json\" ) public Map<String, String> executeThreadStackLogger()", "class_method_signature": "HMSManagementRestService.executeThreadStackLogger()", "testcase": false, "constructor": false}, {"identifier": "refreshInventory", "parameters": "( final String inventory )", "modifiers": "@PUT @Path( \"/refreshinventory\" ) @Produces( MediaType.APPLICATION_JSON ) @Deprecated public", "return": "Response", "signature": "Response refreshInventory( final String inventory )", "full_signature": "@PUT @Path( \"/refreshinventory\" ) @Produces( MediaType.APPLICATION_JSON ) @Deprecated public Response refreshInventory( final String inventory )", "class_method_signature": "HMSManagementRestService.refreshInventory( final String inventory )", "testcase": false, "constructor": false}, {"identifier": "getHmsLogs", "parameters": "()", "modifiers": "@GET @Path( \"/hmslogs\" ) @Produces( MediaType.APPLICATION_OCTET_STREAM ) public", "return": "Response", "signature": "Response getHmsLogs()", "full_signature": "@GET @Path( \"/hmslogs\" ) @Produces( MediaType.APPLICATION_OCTET_STREAM ) public Response getHmsLogs()", "class_method_signature": "HMSManagementRestService.getHmsLogs()", "testcase": false, "constructor": false}, {"identifier": "deleteTemporaryHmsLogFile", "parameters": "()", "modifiers": "@DELETE @Path( \"/hmslogs\" ) @Produces( \"application/json\" ) public", "return": "BaseResponse", "signature": "BaseResponse deleteTemporaryHmsLogFile()", "full_signature": "@DELETE @Path( \"/hmslogs\" ) @Produces( \"application/json\" ) public BaseResponse deleteTemporaryHmsLogFile()", "class_method_signature": "HMSManagementRestService.deleteTemporaryHmsLogFile()", "testcase": false, "constructor": false}, {"identifier": "isFileDeleteable", "parameters": "( File logArchiveName )", "modifiers": "public", "return": "boolean", "signature": "boolean isFileDeleteable( File logArchiveName )", "full_signature": "public boolean isFileDeleteable( File logArchiveName )", "class_method_signature": "HMSManagementRestService.isFileDeleteable( File logArchiveName )", "testcase": false, "constructor": false}, {"identifier": "getNewHosts", "parameters": "()", "modifiers": "@GET @Path( \"/newhosts\" ) @Produces( MediaType.APPLICATION_JSON ) public", "return": "Response", "signature": "Response getNewHosts()", "full_signature": "@GET @Path( \"/newhosts\" ) @Produces( MediaType.APPLICATION_JSON ) public Response getNewHosts()", "class_method_signature": "HMSManagementRestService.getNewHosts()", "testcase": false, "constructor": false}], "file": "modules/hms-core/src/main/java/com/vmware/vrack/hms/rest/services/HMSManagementRestService.java"}, "focal_method": {"identifier": "getHMSNodes", "parameters": "()", "modifiers": "@GET @Path( \"/nodes\" ) @Produces( \"application/json\" ) public", "return": "Map<String, Object[]>", "body": "@GET\n    @Path( \"/nodes\" )\n    @Produces( \"application/json\" )\n    public Map<String, Object[]> getHMSNodes()\n        throws HMSRestException\n    {\n\n        Map<String, Object[]> nodes = new HashMap<String, Object[]>();\n        try\n        {\n\n            Object[] hosts = serverConnector.getNodeMap().values().toArray();\n            Object[] switches = switchConnector.switchNodeMap.values().toArray();\n\n            List<ServerNode> copyHosts = new ArrayList<ServerNode>();\n            List<SwitchNode> copySwitches = new ArrayList<SwitchNode>();\n\n            if ( hosts != null && hosts.length > 0 )\n            {\n                for ( Object obj : hosts )\n                {\n                    ServerNode serverNode = (ServerNode) obj;\n                    ServerNode copy = (ServerNode) HmsGenericUtil.maskPassword( serverNode );\n                    copyHosts.add( copy );\n                }\n            }\n\n            if ( switches != null && switches.length > 0 )\n            {\n                for ( Object obj : switches )\n                {\n                    SwitchNode switchNode = (SwitchNode) obj;\n                    SwitchNode copy = (SwitchNode) HmsGenericUtil.maskPassword( switchNode );\n                    copySwitches.add( copy );\n                }\n            }\n\n            nodes.put( Constants.HOSTS, copyHosts.toArray() );\n            nodes.put( Constants.SWITCHES, copySwitches.toArray() );\n\n        }\n        catch ( Exception e )\n        {\n            throw new HMSRestException( Status.INTERNAL_SERVER_ERROR.getStatusCode(), \"Server Error\",\n                                        \"Error while fetching HMS nodes\" );\n        }\n        return nodes;\n    }", "signature": "Map<String, Object[]> getHMSNodes()", "full_signature": "@GET @Path( \"/nodes\" ) @Produces( \"application/json\" ) public Map<String, Object[]> getHMSNodes()", "class_method_signature": "HMSManagementRestService.getHMSNodes()", "testcase": false, "constructor": false, "invocations": ["toArray", "values", "getNodeMap", "toArray", "values", "maskPassword", "add", "maskPassword", "add", "put", "toArray", "put", "toArray", "getStatusCode"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}