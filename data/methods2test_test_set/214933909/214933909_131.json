{"test_class": {"identifier": "DatabaseServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private DatabaseService databaseService;", "modifier": "@Mock\n    private", "type": "DatabaseService", "declarator": "databaseService", "var_name": "databaseService"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/service/DatabaseServiceTest.java"}, "test_case": {"identifier": "validatePermisionTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validatePermisionTest() throws SQLException {\n        LoginUser user = LoginUser.builder().id(1L).build();\n        DataBaseInfo groupDb = DataBaseInfo.builder().group_name(\"name\").build();\n        Errors errors = new BeanPropertyBindingResult(groupDb, \"groupDb\", true, 256);\n        Assert.assertTrue(databaseService.validatePermision(user, errors).validate().isValid());\n    }", "signature": "void validatePermisionTest()", "full_signature": "@Test public void validatePermisionTest()", "class_method_signature": "DatabaseServiceTest.validatePermisionTest()", "testcase": true, "constructor": false, "invocations": ["build", "id", "builder", "build", "group_name", "builder", "assertTrue", "isValid", "validate", "validatePermision"]}, "focal_class": {"identifier": "DatabaseService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private Consts consts;", "modifier": "@Autowired\n    private", "type": "Consts", "declarator": "consts", "var_name": "consts"}, {"original_string": "@Autowired\n    private Message message;", "modifier": "@Autowired\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Autowired\n    private TableEntityDao tableEntityDao;", "modifier": "@Autowired\n    private", "type": "TableEntityDao", "declarator": "tableEntityDao", "var_name": "tableEntityDao"}, {"original_string": "@Autowired\n    private UserGroupDao userGroupDao;", "modifier": "@Autowired\n    private", "type": "UserGroupDao", "declarator": "userGroupDao", "var_name": "userGroupDao"}, {"original_string": "@Autowired\n    private DataBaseDao dataBaseDao;", "modifier": "@Autowired\n    private", "type": "DataBaseDao", "declarator": "dataBaseDao", "var_name": "dataBaseDao"}, {"original_string": "@Autowired\n    private DatabaseSetDao databaseSetDao;", "modifier": "@Autowired\n    private", "type": "DatabaseSetDao", "declarator": "databaseSetDao", "var_name": "databaseSetDao"}, {"original_string": "@Autowired\n    private DataBaseSetEntryDao dataBaseSetEntryDao;", "modifier": "@Autowired\n    private", "type": "DataBaseSetEntryDao", "declarator": "dataBaseSetEntryDao", "var_name": "dataBaseSetEntryDao"}, {"original_string": "@Autowired\n    private PermissionService permissionService;", "modifier": "@Autowired\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}, {"original_string": "@Autowired\n    private SetupDataBaseService setupDataBaseService;", "modifier": "@Autowired\n    private", "type": "SetupDataBaseService", "declarator": "setupDataBaseService", "var_name": "setupDataBaseService"}, {"original_string": "@Autowired\n    private DeleteCheckDao deleteCheckDao;", "modifier": "@Autowired\n    private", "type": "DeleteCheckDao", "declarator": "deleteCheckDao", "var_name": "deleteCheckDao"}, {"original_string": "@Autowired\n    private DataBaseConfiguration dataBaseConfiguration;", "modifier": "@Autowired\n    private", "type": "DataBaseConfiguration", "declarator": "dataBaseConfiguration", "var_name": "dataBaseConfiguration"}, {"original_string": "@Autowired\n    private DefaultConfiguration defaultConfiguration;", "modifier": "@Autowired\n    private", "type": "DefaultConfiguration", "declarator": "defaultConfiguration", "var_name": "defaultConfiguration"}], "methods": [{"identifier": "validatePermision", "parameters": "(LoginUser user, Errors errors)", "modifiers": "public", "return": "ValidatorChain", "signature": "ValidatorChain validatePermision(LoginUser user, Errors errors)", "full_signature": "public ValidatorChain validatePermision(LoginUser user, Errors errors)", "class_method_signature": "DatabaseService.validatePermision(LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "isExist", "parameters": "(List<String> db_names)", "modifiers": "public", "return": "ServiceResult", "signature": "ServiceResult isExist(List<String> db_names)", "full_signature": "public ServiceResult isExist(List<String> db_names)", "class_method_signature": "DatabaseService.isExist(List<String> db_names)", "testcase": false, "constructor": false}, {"identifier": "addDataBaseInfo", "parameters": "(LoginUser user, DataBaseInfo dataBaseInfo)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> addDataBaseInfo(LoginUser user, DataBaseInfo dataBaseInfo)", "full_signature": "public ServiceResult<String> addDataBaseInfo(LoginUser user, DataBaseInfo dataBaseInfo)", "class_method_signature": "DatabaseService.addDataBaseInfo(LoginUser user, DataBaseInfo dataBaseInfo)", "testcase": false, "constructor": false}, {"identifier": "genDefaultDbsetAndEntry", "parameters": "(DataBaseInfo dataBaseInfo)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> genDefaultDbsetAndEntry(DataBaseInfo dataBaseInfo)", "full_signature": "public ServiceResult<String> genDefaultDbsetAndEntry(DataBaseInfo dataBaseInfo)", "class_method_signature": "DatabaseService.genDefaultDbsetAndEntry(DataBaseInfo dataBaseInfo)", "testcase": false, "constructor": false}, {"identifier": "genDefaultDbsetAndEntry", "parameters": "(Long groupId, Long dbId, String dbname, Integer dbtype)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> genDefaultDbsetAndEntry(Long groupId, Long dbId, String dbname, Integer dbtype)", "full_signature": "public ServiceResult<String> genDefaultDbsetAndEntry(Long groupId, Long dbId, String dbname, Integer dbtype)", "class_method_signature": "DatabaseService.genDefaultDbsetAndEntry(Long groupId, Long dbId, String dbname, Integer dbtype)", "testcase": false, "constructor": false}, {"identifier": "isNotExistByName", "parameters": "(DataBaseInfo dataBaseInfo)", "modifiers": "public", "return": "boolean", "signature": "boolean isNotExistByName(DataBaseInfo dataBaseInfo)", "full_signature": "public boolean isNotExistByName(DataBaseInfo dataBaseInfo)", "class_method_signature": "DatabaseService.isNotExistByName(DataBaseInfo dataBaseInfo)", "testcase": false, "constructor": false}, {"identifier": "checkupdateDBInfo", "parameters": "(DataBaseInfo dataBaseInfo)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> checkupdateDBInfo(DataBaseInfo dataBaseInfo)", "full_signature": "public ServiceResult<String> checkupdateDBInfo(DataBaseInfo dataBaseInfo)", "class_method_signature": "DatabaseService.checkupdateDBInfo(DataBaseInfo dataBaseInfo)", "testcase": false, "constructor": false}, {"identifier": "updateDBInfo", "parameters": "(DataBaseInfo dataBaseInfo)", "modifiers": "public", "return": "boolean", "signature": "boolean updateDBInfo(DataBaseInfo dataBaseInfo)", "full_signature": "public boolean updateDBInfo(DataBaseInfo dataBaseInfo)", "class_method_signature": "DatabaseService.updateDBInfo(DataBaseInfo dataBaseInfo)", "testcase": false, "constructor": false}, {"identifier": "findDbPageList", "parameters": "(Paging<DataBaseInfo> paging)", "modifiers": "public", "return": "ListResult<DataBaseView>", "signature": "ListResult<DataBaseView> findDbPageList(Paging<DataBaseInfo> paging)", "full_signature": "public ListResult<DataBaseView> findDbPageList(Paging<DataBaseInfo> paging)", "class_method_signature": "DatabaseService.findDbPageList(Paging<DataBaseInfo> paging)", "testcase": false, "constructor": false}, {"identifier": "findDbPageListByUserId", "parameters": "(Paging<DataBaseInfo> paging, Long userId)", "modifiers": "public", "return": "ListResult<DataBaseView>", "signature": "ListResult<DataBaseView> findDbPageListByUserId(Paging<DataBaseInfo> paging, Long userId)", "full_signature": "public ListResult<DataBaseView> findDbPageListByUserId(Paging<DataBaseInfo> paging, Long userId)", "class_method_signature": "DatabaseService.findDbPageListByUserId(Paging<DataBaseInfo> paging, Long userId)", "testcase": false, "constructor": false}, {"identifier": "encryptAndOptUser", "parameters": "(LoginUser user, List<DataBaseInfo> dBList)", "modifiers": "public", "return": "ServiceResult", "signature": "ServiceResult encryptAndOptUser(LoginUser user, List<DataBaseInfo> dBList)", "full_signature": "public ServiceResult encryptAndOptUser(LoginUser user, List<DataBaseInfo> dBList)", "class_method_signature": "DatabaseService.encryptAndOptUser(LoginUser user, List<DataBaseInfo> dBList)", "testcase": false, "constructor": false}, {"identifier": "addDataBaseList", "parameters": "(List<DataBaseInfo> dBList)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> addDataBaseList(List<DataBaseInfo> dBList)", "full_signature": "public ServiceResult<String> addDataBaseList(List<DataBaseInfo> dBList)", "class_method_signature": "DatabaseService.addDataBaseList(List<DataBaseInfo> dBList)", "testcase": false, "constructor": false}, {"identifier": "getDBCatalogs", "parameters": "(Long dbsetId)", "modifiers": "public", "return": "ServiceResult<List<String>>", "signature": "ServiceResult<List<String>> getDBCatalogs(Long dbsetId)", "full_signature": "public ServiceResult<List<String>> getDBCatalogs(Long dbsetId)", "class_method_signature": "DatabaseService.getDBCatalogs(Long dbsetId)", "testcase": false, "constructor": false}, {"identifier": "getDBCatalogsByDbId", "parameters": "(Long dbid)", "modifiers": "public", "return": "ServiceResult<List<String>>", "signature": "ServiceResult<List<String>> getDBCatalogsByDbId(Long dbid)", "full_signature": "public ServiceResult<List<String>> getDBCatalogsByDbId(Long dbid)", "class_method_signature": "DatabaseService.getDBCatalogsByDbId(Long dbid)", "testcase": false, "constructor": false}, {"identifier": "connectionTest", "parameters": "(ConnectionRequest connectionRequest)", "modifiers": "public", "return": "ServiceResult", "signature": "ServiceResult connectionTest(ConnectionRequest connectionRequest)", "full_signature": "public ServiceResult connectionTest(ConnectionRequest connectionRequest)", "class_method_signature": "DatabaseService.connectionTest(ConnectionRequest connectionRequest)", "testcase": false, "constructor": false}, {"identifier": "deleteCheck", "parameters": "(Long dbId)", "modifiers": "public", "return": "ServiceResult", "signature": "ServiceResult deleteCheck(Long dbId)", "full_signature": "public ServiceResult deleteCheck(Long dbId)", "class_method_signature": "DatabaseService.deleteCheck(Long dbId)", "testcase": false, "constructor": false}, {"identifier": "addDataCenter", "parameters": "(LoginUser user, List<DataBaseInfo> list)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> addDataCenter(LoginUser user, List<DataBaseInfo> list)", "full_signature": "public ServiceResult<String> addDataCenter(LoginUser user, List<DataBaseInfo> list)", "class_method_signature": "DatabaseService.addDataCenter(LoginUser user, List<DataBaseInfo> list)", "testcase": false, "constructor": false}, {"identifier": "updateDataCenter", "parameters": "(LoginUser user, DataBaseInfo dataBaseInfo)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> updateDataCenter(LoginUser user, DataBaseInfo dataBaseInfo)", "full_signature": "public ServiceResult<String> updateDataCenter(LoginUser user, DataBaseInfo dataBaseInfo)", "class_method_signature": "DatabaseService.updateDataCenter(LoginUser user, DataBaseInfo dataBaseInfo)", "testcase": false, "constructor": false}, {"identifier": "deleteDataCenter", "parameters": "(LoginUser user, DataBaseInfo dataBaseInfo)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> deleteDataCenter(LoginUser user, DataBaseInfo dataBaseInfo)", "full_signature": "public ServiceResult<String> deleteDataCenter(LoginUser user, DataBaseInfo dataBaseInfo)", "class_method_signature": "DatabaseService.deleteDataCenter(LoginUser user, DataBaseInfo dataBaseInfo)", "testcase": false, "constructor": false}, {"identifier": "syncDataCenter", "parameters": "(LoginUser user, DataBaseInfo dataBaseInfo)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> syncDataCenter(LoginUser user, DataBaseInfo dataBaseInfo)", "full_signature": "public ServiceResult<String> syncDataCenter(LoginUser user, DataBaseInfo dataBaseInfo)", "class_method_signature": "DatabaseService.syncDataCenter(LoginUser user, DataBaseInfo dataBaseInfo)", "testcase": false, "constructor": false}, {"identifier": "getCheckData", "parameters": "(LoginUser user, DataBaseInfo dataBaseInfo)", "modifiers": "public", "return": "ConfigCkeckResult<List<ConfigDataResponse>>", "signature": "ConfigCkeckResult<List<ConfigDataResponse>> getCheckData(LoginUser user, DataBaseInfo dataBaseInfo)", "full_signature": "public ConfigCkeckResult<List<ConfigDataResponse>> getCheckData(LoginUser user, DataBaseInfo dataBaseInfo)", "class_method_signature": "DatabaseService.getCheckData(LoginUser user, DataBaseInfo dataBaseInfo)", "testcase": false, "constructor": false}, {"identifier": "getDataBaseButton", "parameters": "(LoginUser user)", "modifiers": "public", "return": "ServiceResult", "signature": "ServiceResult getDataBaseButton(LoginUser user)", "full_signature": "public ServiceResult getDataBaseButton(LoginUser user)", "class_method_signature": "DatabaseService.getDataBaseButton(LoginUser user)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/service/DatabaseService.java"}, "focal_method": {"identifier": "validatePermision", "parameters": "(LoginUser user, Errors errors)", "modifiers": "public", "return": "ValidatorChain", "body": "public ValidatorChain validatePermision(LoginUser user, Errors errors) {\n        return ValidatorChain.newInstance().controllerValidate(errors)\n                .addAssert(() -> permissionService.isManagerById(user.getId()), message.group_message_no_pemission);\n    }", "signature": "ValidatorChain validatePermision(LoginUser user, Errors errors)", "full_signature": "public ValidatorChain validatePermision(LoginUser user, Errors errors)", "class_method_signature": "DatabaseService.validatePermision(LoginUser user, Errors errors)", "testcase": false, "constructor": false, "invocations": ["addAssert", "controllerValidate", "newInstance", "isManagerById", "getId"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}