{"test_class": {"identifier": "CassandraBinaryStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Exception exceptionDuringCassandraStart;", "modifier": "private static", "type": "Exception", "declarator": "exceptionDuringCassandraStart", "var_name": "exceptionDuringCassandraStart"}, {"original_string": "private CassandraBinaryStore store;", "modifier": "private", "type": "CassandraBinaryStore", "declarator": "store", "var_name": "store"}, {"original_string": "private BinaryValue aliveValue, unusedValue;", "modifier": "private", "type": "BinaryValue", "declarator": "aliveValue", "var_name": "aliveValue"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/value/binary/CassandraBinaryStoreTest.java"}, "test_case": {"identifier": "shouldAccessStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAccessStream() throws BinaryStoreException, IOException {\n        InputStream stream = store.getInputStream(aliveValue.getKey());\n        assertTrue(stream != null);\n\n        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        IOUtils.copy(stream, bout);\n\n        String s = new String(bout.toByteArray());\n        assertEquals(\"Binary value\", s);\n    }", "signature": "void shouldAccessStream()", "full_signature": "@Test public void shouldAccessStream()", "class_method_signature": "CassandraBinaryStoreTest.shouldAccessStream()", "testcase": true, "constructor": false, "invocations": ["getInputStream", "getKey", "assertTrue", "copy", "toByteArray", "assertEquals"]}, "focal_class": {"identifier": "CassandraBinaryStore", "superclass": "extends AbstractBinaryStore", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(CassandraBinaryStore.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(CassandraBinaryStore.class)", "var_name": "LOGGER"}, {"original_string": "private static final boolean ALIVE = true;", "modifier": "private static final", "type": "boolean", "declarator": "ALIVE = true", "var_name": "ALIVE"}, {"original_string": "private static final boolean UNUSED = false;", "modifier": "private static final", "type": "boolean", "declarator": "UNUSED = false", "var_name": "UNUSED"}, {"original_string": "private Session session;", "modifier": "private", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "private String address;", "modifier": "private", "type": "String", "declarator": "address", "var_name": "address"}, {"original_string": "private FileSystemBinaryStore cache;", "modifier": "private", "type": "FileSystemBinaryStore", "declarator": "cache", "var_name": "cache"}], "methods": [{"identifier": "CassandraBinaryStore", "parameters": "( String address )", "modifiers": "public", "return": "", "signature": " CassandraBinaryStore( String address )", "full_signature": "public  CassandraBinaryStore( String address )", "class_method_signature": "CassandraBinaryStore.CassandraBinaryStore( String address )", "testcase": false, "constructor": true}, {"identifier": "getStoredMimeType", "parameters": "( BinaryValue source )", "modifiers": "@Override protected", "return": "String", "signature": "String getStoredMimeType( BinaryValue source )", "full_signature": "@Override protected String getStoredMimeType( BinaryValue source )", "class_method_signature": "CassandraBinaryStore.getStoredMimeType( BinaryValue source )", "testcase": false, "constructor": false}, {"identifier": "checkContentExists", "parameters": "( BinaryValue source )", "modifiers": "private", "return": "void", "signature": "void checkContentExists( BinaryValue source )", "full_signature": "private void checkContentExists( BinaryValue source )", "class_method_signature": "CassandraBinaryStore.checkContentExists( BinaryValue source )", "testcase": false, "constructor": false}, {"identifier": "storeMimeType", "parameters": "( BinaryValue source,\n                                  String mimeType )", "modifiers": "@Override protected", "return": "void", "signature": "void storeMimeType( BinaryValue source,\n                                  String mimeType )", "full_signature": "@Override protected void storeMimeType( BinaryValue source,\n                                  String mimeType )", "class_method_signature": "CassandraBinaryStore.storeMimeType( BinaryValue source,\n                                  String mimeType )", "testcase": false, "constructor": false}, {"identifier": "storeExtractedText", "parameters": "( BinaryValue source,\n                                    String extractedText )", "modifiers": "@Override public", "return": "void", "signature": "void storeExtractedText( BinaryValue source,\n                                    String extractedText )", "full_signature": "@Override public void storeExtractedText( BinaryValue source,\n                                    String extractedText )", "class_method_signature": "CassandraBinaryStore.storeExtractedText( BinaryValue source,\n                                    String extractedText )", "testcase": false, "constructor": false}, {"identifier": "getExtractedText", "parameters": "( BinaryValue source )", "modifiers": "@Override public", "return": "String", "signature": "String getExtractedText( BinaryValue source )", "full_signature": "@Override public String getExtractedText( BinaryValue source )", "class_method_signature": "CassandraBinaryStore.getExtractedText( BinaryValue source )", "testcase": false, "constructor": false}, {"identifier": "storeValue", "parameters": "( InputStream stream, boolean markAsUnused )", "modifiers": "@Override public", "return": "BinaryValue", "signature": "BinaryValue storeValue( InputStream stream, boolean markAsUnused )", "full_signature": "@Override public BinaryValue storeValue( InputStream stream, boolean markAsUnused )", "class_method_signature": "CassandraBinaryStore.storeValue( InputStream stream, boolean markAsUnused )", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "( BinaryKey key )", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getInputStream( BinaryKey key )", "full_signature": "@Override public InputStream getInputStream( BinaryKey key )", "class_method_signature": "CassandraBinaryStore.getInputStream( BinaryKey key )", "testcase": false, "constructor": false}, {"identifier": "markAsUsed", "parameters": "( Iterable<BinaryKey> keys )", "modifiers": "@Override public", "return": "void", "signature": "void markAsUsed( Iterable<BinaryKey> keys )", "full_signature": "@Override public void markAsUsed( Iterable<BinaryKey> keys )", "class_method_signature": "CassandraBinaryStore.markAsUsed( Iterable<BinaryKey> keys )", "testcase": false, "constructor": false}, {"identifier": "markAsUnused", "parameters": "( Iterable<BinaryKey> keys )", "modifiers": "@Override public", "return": "void", "signature": "void markAsUnused( Iterable<BinaryKey> keys )", "full_signature": "@Override public void markAsUnused( Iterable<BinaryKey> keys )", "class_method_signature": "CassandraBinaryStore.markAsUnused( Iterable<BinaryKey> keys )", "testcase": false, "constructor": false}, {"identifier": "removeValuesUnusedLongerThan", "parameters": "( long minimumAge,\n                                              TimeUnit unit )", "modifiers": "@Override public", "return": "void", "signature": "void removeValuesUnusedLongerThan( long minimumAge,\n                                              TimeUnit unit )", "full_signature": "@Override public void removeValuesUnusedLongerThan( long minimumAge,\n                                              TimeUnit unit )", "class_method_signature": "CassandraBinaryStore.removeValuesUnusedLongerThan( long minimumAge,\n                                              TimeUnit unit )", "testcase": false, "constructor": false}, {"identifier": "getAllBinaryKeys", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<BinaryKey>", "signature": "Iterable<BinaryKey> getAllBinaryKeys()", "full_signature": "@Override public Iterable<BinaryKey> getAllBinaryKeys()", "class_method_signature": "CassandraBinaryStore.getAllBinaryKeys()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "CassandraBinaryStore.start()", "testcase": false, "constructor": false}, {"identifier": "contentExists", "parameters": "( BinaryKey key,\n                                   boolean alive )", "modifiers": "private", "return": "boolean", "signature": "boolean contentExists( BinaryKey key,\n                                   boolean alive )", "full_signature": "private boolean contentExists( BinaryKey key,\n                                   boolean alive )", "class_method_signature": "CassandraBinaryStore.contentExists( BinaryKey key,\n                                   boolean alive )", "testcase": false, "constructor": false}, {"identifier": "buffer", "parameters": "( InputStream stream )", "modifiers": "private", "return": "ByteBuffer", "signature": "ByteBuffer buffer( InputStream stream )", "full_signature": "private ByteBuffer buffer( InputStream stream )", "class_method_signature": "CassandraBinaryStore.buffer( InputStream stream )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java"}, "focal_method": {"identifier": "getInputStream", "parameters": "( BinaryKey key )", "modifiers": "@Override public", "return": "InputStream", "body": "@Override\n    public InputStream getInputStream( BinaryKey key ) throws BinaryStoreException {\n        try {\n            ResultSet rs = session.execute(\"SELECT payload FROM modeshape.binary WHERE cid='\" + key.toString() + \"'\");\n            Row row = rs.one();\n            if (row == null) {\n                throw new BinaryStoreException(JcrI18n.unableToFindBinaryValue.text(key, session));\n            }\n\n            ByteBuffer buffer = row.getBytes(\"payload\");\n            return new BufferedInputStream(buffer);\n        } catch (BinaryStoreException e) {\n            throw e;\n        } catch (RuntimeException e) {\n            throw new BinaryStoreException(e);\n        }\n    }", "signature": "InputStream getInputStream( BinaryKey key )", "full_signature": "@Override public InputStream getInputStream( BinaryKey key )", "class_method_signature": "CassandraBinaryStore.getInputStream( BinaryKey key )", "testcase": false, "constructor": false, "invocations": ["execute", "toString", "one", "text", "getBytes"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}