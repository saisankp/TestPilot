{"test_class": {"identifier": "HerdCharacterEscapeHandlerTest", "superclass": "extends AbstractDaoTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    protected HerdCharacterEscapeHandler escapeHandler;", "modifier": "@Autowired\n    protected", "type": "HerdCharacterEscapeHandler", "declarator": "escapeHandler", "var_name": "escapeHandler"}, {"original_string": "private static final String TEST_BUFFER = \"A<>&\\\"'\\u0001\\t\";", "modifier": "private static final", "type": "String", "declarator": "TEST_BUFFER = \"A<>&\\\"'\\u0001\\t\"", "var_name": "TEST_BUFFER"}], "file": "herd-code/herd-dao/src/test/java/org/finra/herd/dao/helper/HerdCharacterEscapeHandlerTest.java"}, "test_case": {"identifier": "testEscapeSubBuffer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEscapeSubBuffer() throws Exception\n    {\n        // Test a sub-part of the buffer (i.e. positions 1 and 2).\n        StringWriter writer = new StringWriter();\n        escapeHandler.escape(TEST_BUFFER.toCharArray(), 1, 2, true, writer);\n        assertEquals(\"&lt;&gt;\", writer.toString());\n    }", "signature": "void testEscapeSubBuffer()", "full_signature": "@Test public void testEscapeSubBuffer()", "class_method_signature": "HerdCharacterEscapeHandlerTest.testEscapeSubBuffer()", "testcase": true, "constructor": false, "invocations": ["escape", "toCharArray", "assertEquals", "toString"]}, "focal_class": {"identifier": "HerdCharacterEscapeHandler", "superclass": "", "interfaces": "implements CharacterEscapeHandler", "fields": [], "methods": [{"identifier": "escape", "parameters": "(char[] buffer, int start, int length, boolean isAttributeValue, Writer outputWriter)", "modifiers": "@Override public", "return": "void", "signature": "void escape(char[] buffer, int start, int length, boolean isAttributeValue, Writer outputWriter)", "full_signature": "@Override public void escape(char[] buffer, int start, int length, boolean isAttributeValue, Writer outputWriter)", "class_method_signature": "HerdCharacterEscapeHandler.escape(char[] buffer, int start, int length, boolean isAttributeValue, Writer outputWriter)", "testcase": false, "constructor": false}, {"identifier": "isXml11RestrictedCharacter", "parameters": "(char ch)", "modifiers": "public static", "return": "boolean", "signature": "boolean isXml11RestrictedCharacter(char ch)", "full_signature": "public static boolean isXml11RestrictedCharacter(char ch)", "class_method_signature": "HerdCharacterEscapeHandler.isXml11RestrictedCharacter(char ch)", "testcase": false, "constructor": false}], "file": "herd-code/herd-dao/src/main/java/org/finra/herd/dao/helper/HerdCharacterEscapeHandler.java"}, "focal_method": {"identifier": "escape", "parameters": "(char[] buffer, int start, int length, boolean isAttributeValue, Writer outputWriter)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void escape(char[] buffer, int start, int length, boolean isAttributeValue, Writer outputWriter) throws IOException\n    {\n        // Loop through all characters in the buffer starting at \"start\" and going until the length has been reached.\n        for (int i = start; i < start + length; i++)\n        {\n            // Grab a character in the buffer.\n            char ch = buffer[i];\n\n            // Handle the standard XML tag escaping.\n            if (ch == '&')\n            {\n                outputWriter.write(\"&amp;\");\n                continue;\n            }\n            if (ch == '<')\n            {\n                outputWriter.write(\"&lt;\");\n                continue;\n            }\n            if (ch == '>')\n            {\n                outputWriter.write(\"&gt;\");\n                continue;\n            }\n\n            // Handle the single and double quote characters when attributes are present.\n            if (ch == '\"' && isAttributeValue)\n            {\n                outputWriter.write(\"&quot;\");\n                continue;\n            }\n            if (ch == '\\'' && isAttributeValue)\n            {\n                outputWriter.write(\"&apos;\");\n                continue;\n            }\n\n            // Escape the character if it's XML 1.1 restricted.\n            if (isXml11RestrictedCharacter(ch))\n            {\n                outputWriter.write(\"&#x\");\n                outputWriter.write(Integer.toHexString(ch));\n                outputWriter.write(\";\");\n                continue;\n            }\n\n            // In all other cases, output the character as is.\n            outputWriter.write(ch);\n        }\n    }", "signature": "void escape(char[] buffer, int start, int length, boolean isAttributeValue, Writer outputWriter)", "full_signature": "@Override public void escape(char[] buffer, int start, int length, boolean isAttributeValue, Writer outputWriter)", "class_method_signature": "HerdCharacterEscapeHandler.escape(char[] buffer, int start, int length, boolean isAttributeValue, Writer outputWriter)", "testcase": false, "constructor": false, "invocations": ["write", "write", "write", "write", "write", "isXml11RestrictedCharacter", "write", "write", "toHexString", "write", "write"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}