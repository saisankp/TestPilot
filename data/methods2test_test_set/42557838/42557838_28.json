{"test_class": {"identifier": "MultipartHeadersPartParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Parser<MultipartHeadersPart> multipartHeadersPartParser\n            = new MultipartHeadersPartParser(new HeadersParser());", "modifier": "private static", "type": "Parser<MultipartHeadersPart>", "declarator": "multipartHeadersPartParser\n            = new MultipartHeadersPartParser(new HeadersParser())", "var_name": "multipartHeadersPartParser"}], "file": "http/src/test/java/ro/polak/http/protocol/parser/impl/MultipartHeadersPartParserTest.java"}, "test_case": {"identifier": "shouldParseValidAttachmentHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldParseValidAttachmentHeader() throws MalformedInputException {\n        // CHECKSTYLE.OFF: LineLength\n        MultipartHeadersPart headers = multipartHeadersPartParser\n                .parse(\"Content-Disposition: attachment; name=\\\"FIELDNAME\\\"; filename=\\\"FILE.PDF\\\"\\nContent-type: application/pdf\");\n        // CHECKSTYLE.ON: LineLength\n\n        assertThat(headers.getFileName(), is(\"FILE.PDF\"));\n        assertThat(headers.getName(), is(\"FIELDNAME\"));\n        assertThat(headers.getContentType(), is(\"application/pdf\"));\n    }", "signature": "void shouldParseValidAttachmentHeader()", "full_signature": "@Test public void shouldParseValidAttachmentHeader()", "class_method_signature": "MultipartHeadersPartParserTest.shouldParseValidAttachmentHeader()", "testcase": true, "constructor": false, "invocations": ["parse", "assertThat", "getFileName", "is", "assertThat", "getName", "is", "assertThat", "getContentType", "is"]}, "focal_class": {"identifier": "MultipartHeadersPartParser", "superclass": "", "interfaces": "implements Parser<MultipartHeadersPart>", "fields": [{"original_string": "private static final String NAME_START = \"name=\\\"\";", "modifier": "private static final", "type": "String", "declarator": "NAME_START = \"name=\\\"\"", "var_name": "NAME_START"}, {"original_string": "private static final String FILENAME_START = \"filename=\\\"\";", "modifier": "private static final", "type": "String", "declarator": "FILENAME_START = \"filename=\\\"\"", "var_name": "FILENAME_START"}, {"original_string": "private final HeadersParser parser;", "modifier": "private final", "type": "HeadersParser", "declarator": "parser", "var_name": "parser"}], "methods": [{"identifier": "MultipartHeadersPartParser", "parameters": "(final HeadersParser headersParser)", "modifiers": "public", "return": "", "signature": " MultipartHeadersPartParser(final HeadersParser headersParser)", "full_signature": "public  MultipartHeadersPartParser(final HeadersParser headersParser)", "class_method_signature": "MultipartHeadersPartParser.MultipartHeadersPartParser(final HeadersParser headersParser)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(final String headersString)", "modifiers": "@Override public", "return": "MultipartHeadersPart", "signature": "MultipartHeadersPart parse(final String headersString)", "full_signature": "@Override public MultipartHeadersPart parse(final String headersString)", "class_method_signature": "MultipartHeadersPartParser.parse(final String headersString)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/protocol/parser/impl/MultipartHeadersPartParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(final String headersString)", "modifiers": "@Override public", "return": "MultipartHeadersPart", "body": "@Override\n    public MultipartHeadersPart parse(final String headersString) throws MalformedInputException {\n\n        MultipartHeadersPart part = new MultipartHeadersPart();\n        Headers headers = parser.parse(headersString, false);\n\n        String contentDispositionHeaderValue = headers.getHeader(Headers.HEADER_CONTENT_DISPOSITION);\n        if (contentDispositionHeaderValue != null) {\n            String contentDispositionLower = contentDispositionHeaderValue.toLowerCase();\n\n            int nameStartPos = contentDispositionLower.indexOf(NAME_START);\n            if (nameStartPos > -1) {\n                String name = contentDispositionHeaderValue.substring(nameStartPos + NAME_START.length());\n                int quotationMarkPosition = name.indexOf(\"\\\"\");\n                if (quotationMarkPosition == -1) {\n                    throw new MalformedInputException(\"Malformed header, unable to detect value beginning\");\n                } else {\n                    name = name.substring(0, quotationMarkPosition);\n                }\n                part.setName(name);\n            }\n\n\n            int fileNameStartPos = contentDispositionLower.indexOf(FILENAME_START);\n            if (fileNameStartPos > -1) {\n                String fileName = contentDispositionHeaderValue.substring(fileNameStartPos + FILENAME_START.length());\n                int quotationMark2Position = fileName.indexOf(\"\\\"\");\n\n                if (quotationMark2Position == -1) {\n                    throw new MalformedInputException(\"Malformed header, unable to detect value end\");\n                } else {\n                    fileName = fileName.substring(0, quotationMark2Position);\n                }\n\n                part.setFileName(fileName);\n            }\n        }\n        part.setContentType(headers.getHeader(Headers.HEADER_CONTENT_TYPE));\n\n        return part;\n    }", "signature": "MultipartHeadersPart parse(final String headersString)", "full_signature": "@Override public MultipartHeadersPart parse(final String headersString)", "class_method_signature": "MultipartHeadersPartParser.parse(final String headersString)", "testcase": false, "constructor": false, "invocations": ["parse", "getHeader", "toLowerCase", "indexOf", "substring", "length", "indexOf", "substring", "setName", "indexOf", "substring", "length", "indexOf", "substring", "setFileName", "setContentType", "getHeader"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}