{"test_class": {"identifier": "RedisDistributedLocksTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Tested\n    private RedisDistributedLocks redisDistributedLocks;", "modifier": "@Tested\n    private", "type": "RedisDistributedLocks", "declarator": "redisDistributedLocks", "var_name": "redisDistributedLocks"}, {"original_string": "@Mocked\n    private ApplicationContextUtil applicationContextUtil;", "modifier": "@Mocked\n    private", "type": "ApplicationContextUtil", "declarator": "applicationContextUtil", "var_name": "applicationContextUtil"}], "file": "zebra/zebra-distributed-lock/src/test/java/com/guosen/zebra/distributed/lock/redis/RedisDistributedLocksTest.java"}, "test_case": {"identifier": "testGetLockEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetLockEmpty() {\n        new Expectations() {\n            {\n                ApplicationContextUtil.getBean(DistributedRedisPoolWrapper.class);\n                result = new NoSuchBeanDefinitionException(\"DistributedRedisPoolWrapper\");\n            }\n        };\n\n        DistributedLock distributedLock = RedisDistributedLocks.getLock(\"myLock\", 30L);\n\n        assertThat(distributedLock, is(nullValue()));\n    }", "signature": "void testGetLockEmpty()", "full_signature": "@Test public void testGetLockEmpty()", "class_method_signature": "RedisDistributedLocksTest.testGetLockEmpty()", "testcase": true, "constructor": false, "invocations": ["getBean", "getLock", "assertThat", "is", "nullValue"]}, "focal_class": {"identifier": "RedisDistributedLocks", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(RedisDistributedLocks.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RedisDistributedLocks.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "getLock", "parameters": "(String lockName, long lockExpiredTimeSeconds)", "modifiers": "public static", "return": "DistributedLock", "signature": "DistributedLock getLock(String lockName, long lockExpiredTimeSeconds)", "full_signature": "public static DistributedLock getLock(String lockName, long lockExpiredTimeSeconds)", "class_method_signature": "RedisDistributedLocks.getLock(String lockName, long lockExpiredTimeSeconds)", "testcase": false, "constructor": false}, {"identifier": "getJedisPool", "parameters": "()", "modifiers": "private static", "return": "JedisPool", "signature": "JedisPool getJedisPool()", "full_signature": "private static JedisPool getJedisPool()", "class_method_signature": "RedisDistributedLocks.getJedisPool()", "testcase": false, "constructor": false}], "file": "zebra/zebra-distributed-lock/src/main/java/com/guosen/zebra/distributed/lock/redis/RedisDistributedLocks.java"}, "focal_method": {"identifier": "getLock", "parameters": "(String lockName, long lockExpiredTimeSeconds)", "modifiers": "public static", "return": "DistributedLock", "body": "public static DistributedLock getLock(String lockName, long lockExpiredTimeSeconds) {\n        JedisPool jedisPool = getJedisPool();\n        if (jedisPool == null) {\n            LOGGER.error(\"Failed to get jedis pool.\");\n            return null;\n        }\n\n        return new RedisDistributedLock(jedisPool, lockName, lockExpiredTimeSeconds);\n    }", "signature": "DistributedLock getLock(String lockName, long lockExpiredTimeSeconds)", "full_signature": "public static DistributedLock getLock(String lockName, long lockExpiredTimeSeconds)", "class_method_signature": "RedisDistributedLocks.getLock(String lockName, long lockExpiredTimeSeconds)", "testcase": false, "constructor": false, "invocations": ["getJedisPool", "error"]}, "repository": {"repo_id": 227543326, "url": "https://github.com/gszebra/zebra", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 15, "size": 2223, "license": "licensed"}}