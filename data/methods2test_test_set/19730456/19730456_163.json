{"test_class": {"identifier": "BloomFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Random r = new Random();", "modifier": "static", "type": "Random", "declarator": "r = new Random()", "var_name": "r"}], "file": "ethereumj-core/src/test/java/org/ethereum/datasource/BloomFilterTest.java"}, "test_case": {"identifier": "testHashCode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHashCode() throws UnsupportedEncodingException {\n        System.out.println(\"hashCode\");\n\n        BloomFilter instance1 = new BloomFilter(1000, 100);\n        BloomFilter instance2 = new BloomFilter(1000, 100);\n\n        assertTrue(instance1.hashCode() == instance2.hashCode());\n\n        for (int i = 0; i < 100; i++) {\n            byte[] val = UUID.randomUUID().toString().getBytes(\"UTF-8\");\n            instance1.add(val);\n            instance2.add(val);\n        }\n\n        assertTrue(instance1.hashCode() == instance2.hashCode());\n\n        instance1.clear();\n        instance2.clear();\n\n        assertTrue(instance1.hashCode() == instance2.hashCode());\n\n        instance1 = new BloomFilter(100, 10);\n        instance2 = new BloomFilter(100, 9);\n        assertFalse(instance1.hashCode() == instance2.hashCode());\n\n        instance1 = new BloomFilter(100, 10);\n        instance2 = new BloomFilter(99, 9);\n        assertFalse(instance1.hashCode() == instance2.hashCode());\n\n        instance1 = new BloomFilter(100, 10);\n        instance2 = new BloomFilter(50, 10);\n        assertFalse(instance1.hashCode() == instance2.hashCode());\n    }", "signature": "void testHashCode()", "full_signature": "@Test public void testHashCode()", "class_method_signature": "BloomFilterTest.testHashCode()", "testcase": true, "constructor": false, "invocations": ["println", "assertTrue", "hashCode", "hashCode", "getBytes", "toString", "randomUUID", "add", "add", "assertTrue", "hashCode", "hashCode", "clear", "clear", "assertTrue", "hashCode", "hashCode", "assertFalse", "hashCode", "hashCode", "assertFalse", "hashCode", "hashCode", "assertFalse", "hashCode", "hashCode"]}, "focal_class": {"identifier": "BloomFilter", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private BitSet bitset;", "modifier": "private", "type": "BitSet", "declarator": "bitset", "var_name": "bitset"}, {"original_string": "private int bitSetSize;", "modifier": "private", "type": "int", "declarator": "bitSetSize", "var_name": "bitSetSize"}, {"original_string": "private double bitsPerElement;", "modifier": "private", "type": "double", "declarator": "bitsPerElement", "var_name": "bitsPerElement"}, {"original_string": "private int expectedNumberOfFilterElements;", "modifier": "private", "type": "int", "declarator": "expectedNumberOfFilterElements", "var_name": "expectedNumberOfFilterElements"}, {"original_string": "private int numberOfAddedElements;", "modifier": "private", "type": "int", "declarator": "numberOfAddedElements", "var_name": "numberOfAddedElements"}, {"original_string": "private int k;", "modifier": "private", "type": "int", "declarator": "k", "var_name": "k"}], "methods": [{"identifier": "BloomFilter", "parameters": "(double c, int n, int k)", "modifiers": "public", "return": "", "signature": " BloomFilter(double c, int n, int k)", "full_signature": "public  BloomFilter(double c, int n, int k)", "class_method_signature": "BloomFilter.BloomFilter(double c, int n, int k)", "testcase": false, "constructor": true}, {"identifier": "BloomFilter", "parameters": "(int bitSetSize, int expectedNumberOElements)", "modifiers": "public", "return": "", "signature": " BloomFilter(int bitSetSize, int expectedNumberOElements)", "full_signature": "public  BloomFilter(int bitSetSize, int expectedNumberOElements)", "class_method_signature": "BloomFilter.BloomFilter(int bitSetSize, int expectedNumberOElements)", "testcase": false, "constructor": true}, {"identifier": "BloomFilter", "parameters": "(double falsePositiveProbability, int expectedNumberOfElements)", "modifiers": "public", "return": "", "signature": " BloomFilter(double falsePositiveProbability, int expectedNumberOfElements)", "full_signature": "public  BloomFilter(double falsePositiveProbability, int expectedNumberOfElements)", "class_method_signature": "BloomFilter.BloomFilter(double falsePositiveProbability, int expectedNumberOfElements)", "testcase": false, "constructor": true}, {"identifier": "BloomFilter", "parameters": "(int bitSetSize, int expectedNumberOfFilterElements, int actualNumberOfFilterElements, BitSet filterData)", "modifiers": "public", "return": "", "signature": " BloomFilter(int bitSetSize, int expectedNumberOfFilterElements, int actualNumberOfFilterElements, BitSet filterData)", "full_signature": "public  BloomFilter(int bitSetSize, int expectedNumberOfFilterElements, int actualNumberOfFilterElements, BitSet filterData)", "class_method_signature": "BloomFilter.BloomFilter(int bitSetSize, int expectedNumberOfFilterElements, int actualNumberOfFilterElements, BitSet filterData)", "testcase": false, "constructor": true}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "BloomFilter.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BloomFilter.hashCode()", "testcase": false, "constructor": false}, {"identifier": "expectedFalsePositiveProbability", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double expectedFalsePositiveProbability()", "full_signature": "public double expectedFalsePositiveProbability()", "class_method_signature": "BloomFilter.expectedFalsePositiveProbability()", "testcase": false, "constructor": false}, {"identifier": "getFalsePositiveProbability", "parameters": "(double numberOfElements)", "modifiers": "public", "return": "double", "signature": "double getFalsePositiveProbability(double numberOfElements)", "full_signature": "public double getFalsePositiveProbability(double numberOfElements)", "class_method_signature": "BloomFilter.getFalsePositiveProbability(double numberOfElements)", "testcase": false, "constructor": false}, {"identifier": "getFalsePositiveProbability", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getFalsePositiveProbability()", "full_signature": "public double getFalsePositiveProbability()", "class_method_signature": "BloomFilter.getFalsePositiveProbability()", "testcase": false, "constructor": false}, {"identifier": "getK", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getK()", "full_signature": "public int getK()", "class_method_signature": "BloomFilter.getK()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void clear()", "full_signature": "public synchronized void clear()", "class_method_signature": "BloomFilter.clear()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(byte[] bytes)", "modifiers": "public synchronized", "return": "void", "signature": "void add(byte[] bytes)", "full_signature": "public synchronized void add(byte[] bytes)", "class_method_signature": "BloomFilter.add(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "createHashes", "parameters": "(byte[] bytes, int k)", "modifiers": "private", "return": "int[]", "signature": "int[] createHashes(byte[] bytes, int k)", "full_signature": "private int[] createHashes(byte[] bytes, int k)", "class_method_signature": "BloomFilter.createHashes(byte[] bytes, int k)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(byte[] bytes)", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean contains(byte[] bytes)", "full_signature": "public synchronized boolean contains(byte[] bytes)", "class_method_signature": "BloomFilter.contains(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "getBit", "parameters": "(int bit)", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean getBit(int bit)", "full_signature": "public synchronized boolean getBit(int bit)", "class_method_signature": "BloomFilter.getBit(int bit)", "testcase": false, "constructor": false}, {"identifier": "setBit", "parameters": "(int bit, boolean value)", "modifiers": "public synchronized", "return": "void", "signature": "void setBit(int bit, boolean value)", "full_signature": "public synchronized void setBit(int bit, boolean value)", "class_method_signature": "BloomFilter.setBit(int bit, boolean value)", "testcase": false, "constructor": false}, {"identifier": "getBitSet", "parameters": "()", "modifiers": "public synchronized", "return": "BitSet", "signature": "BitSet getBitSet()", "full_signature": "public synchronized BitSet getBitSet()", "class_method_signature": "BloomFilter.getBitSet()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public synchronized", "return": "int", "signature": "int size()", "full_signature": "public synchronized int size()", "class_method_signature": "BloomFilter.size()", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "()", "modifiers": "public synchronized", "return": "int", "signature": "int count()", "full_signature": "public synchronized int count()", "class_method_signature": "BloomFilter.count()", "testcase": false, "constructor": false}, {"identifier": "getExpectedNumberOfElements", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getExpectedNumberOfElements()", "full_signature": "public int getExpectedNumberOfElements()", "class_method_signature": "BloomFilter.getExpectedNumberOfElements()", "testcase": false, "constructor": false}, {"identifier": "getExpectedBitsPerElement", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getExpectedBitsPerElement()", "full_signature": "public double getExpectedBitsPerElement()", "class_method_signature": "BloomFilter.getExpectedBitsPerElement()", "testcase": false, "constructor": false}, {"identifier": "getBitsPerElement", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getBitsPerElement()", "full_signature": "public double getBitsPerElement()", "class_method_signature": "BloomFilter.getBitsPerElement()", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/datasource/BloomFilter.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int hashCode() {\n        int hash = 7;\n        hash = 61 * hash + (this.bitset != null ? this.bitset.hashCode() : 0);\n        hash = 61 * hash + this.expectedNumberOfFilterElements;\n        hash = 61 * hash + this.bitSetSize;\n        hash = 61 * hash + this.k;\n        return hash;\n    }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BloomFilter.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}