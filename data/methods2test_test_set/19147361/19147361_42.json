{"test_class": {"identifier": "TestThemisRegionObserver", "superclass": "extends TransactionTestBase", "interfaces": "", "fields": [], "file": "themis-coprocessor/src/test/java/org/apache/hadoop/hbase/regionserver/TestThemisRegionObserver.java"}, "test_case": {"identifier": "testPreFlushScannerOpen", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPreFlushScannerOpen() throws Exception {\n    // only test in MiniCluster\n    if (TEST_UTIL != null) {\n      ZooKeeperWatcher zk = new ZooKeeperWatcher(conf, \"test\", null, true);\n      HBaseAdmin admin = new HBaseAdmin(connection);\n\n      prewriteTestDataForPreFlushAndPreCompact();\n      // no zk path\n      ZKUtil.deleteNodeFailSilent(zk, ThemisMasterObserver.getThemisExpiredTsZNodePath(zk));\n      admin.flush(TABLENAME);\n      Assert.assertEquals(6, getRowByScan().size());\n      deleteOldDataAndUpdateTs();\n\n      // invalid value of cleanTs\n      prewriteTestDataForPreFlushAndPreCompact();\n      ZKUtil.createSetData(zk, ThemisMasterObserver.getThemisExpiredTsZNodePath(zk),\n        Bytes.toBytes(String.valueOf(Long.MIN_VALUE)));\n      admin.flush(TABLENAME);\n      Assert.assertEquals(6, getRowByScan().size());\n      deleteOldDataAndUpdateTs();\n\n      // cleanTs is too new\n      prewriteTestDataForPreFlushAndPreCompact();\n      ZKUtil.createSetData(zk, ThemisMasterObserver.getThemisExpiredTsZNodePath(zk),\n        Bytes.toBytes(String.valueOf(prewriteTs + 1)));\n      admin.flush(TABLENAME);\n      Assert.assertEquals(6, getRowByScan().size());\n      deleteOldDataAndUpdateTs();\n\n      // clean old data\n      prewriteTestDataForPreFlushAndPreCompact();\n      ZKUtil.createSetData(zk, ThemisMasterObserver.getThemisExpiredTsZNodePath(zk),\n        Bytes.toBytes(String.valueOf(prewriteTs + 5)));\n      admin.flush(TABLENAME);\n      Result result = getRowByScan();\n      Assert.assertEquals(3, result.size());\n      Assert.assertNotNull(result.getValue(FAMILY, QUALIFIER));\n      Column deleteColumn = ColumnUtil.getDeleteColumn(COLUMN);\n      Assert.assertNotNull(result.getValue(deleteColumn.getFamily(), deleteColumn.getQualifier()));\n      Column putColumn = ColumnUtil.getPutColumn(COLUMN);\n      Assert.assertNotNull(result.getValue(putColumn.getFamily(), putColumn.getQualifier()));\n      deleteOldDataAndUpdateTs();\n\n      admin.close();\n      zk.close();\n    }\n  }", "signature": "void testPreFlushScannerOpen()", "full_signature": "@Test public void testPreFlushScannerOpen()", "class_method_signature": "TestThemisRegionObserver.testPreFlushScannerOpen()", "testcase": true, "constructor": false, "invocations": ["prewriteTestDataForPreFlushAndPreCompact", "deleteNodeFailSilent", "getThemisExpiredTsZNodePath", "flush", "assertEquals", "size", "getRowByScan", "deleteOldDataAndUpdateTs", "prewriteTestDataForPreFlushAndPreCompact", "createSetData", "getThemisExpiredTsZNodePath", "toBytes", "valueOf", "flush", "assertEquals", "size", "getRowByScan", "deleteOldDataAndUpdateTs", "prewriteTestDataForPreFlushAndPreCompact", "createSetData", "getThemisExpiredTsZNodePath", "toBytes", "valueOf", "flush", "assertEquals", "size", "getRowByScan", "deleteOldDataAndUpdateTs", "prewriteTestDataForPreFlushAndPreCompact", "createSetData", "getThemisExpiredTsZNodePath", "toBytes", "valueOf", "flush", "getRowByScan", "assertEquals", "size", "assertNotNull", "getValue", "getDeleteColumn", "assertNotNull", "getValue", "getFamily", "getQualifier", "getPutColumn", "assertNotNull", "getValue", "getFamily", "getQualifier", "deleteOldDataAndUpdateTs", "close", "close"]}, "focal_class": {"identifier": "ThemisRegionObserver", "superclass": "extends BaseRegionObserver", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(ThemisRegionObserver.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(ThemisRegionObserver.class)", "var_name": "LOG"}, {"original_string": "public static final String THEMIS_DELETE_THEMIS_DELETED_DATA_WHEN_COMPACT = \"themis.delete.themis.deleted.data.when.compact\";", "modifier": "public static final", "type": "String", "declarator": "THEMIS_DELETE_THEMIS_DELETED_DATA_WHEN_COMPACT = \"themis.delete.themis.deleted.data.when.compact\"", "var_name": "THEMIS_DELETE_THEMIS_DELETED_DATA_WHEN_COMPACT"}, {"original_string": "public static final String SINGLE_ROW_PRIMARY_QUALIFIER = \"_themisSingleRowPrewritePrimaryQualifier_\";", "modifier": "public static final", "type": "String", "declarator": "SINGLE_ROW_PRIMARY_QUALIFIER = \"_themisSingleRowPrewritePrimaryQualifier_\"", "var_name": "SINGLE_ROW_PRIMARY_QUALIFIER"}, {"original_string": "public static final String LOCK_FAMILY_DELETE = \"_themisLockFamilyDelete_\";", "modifier": "public static final", "type": "String", "declarator": "LOCK_FAMILY_DELETE = \"_themisLockFamilyDelete_\"", "var_name": "LOCK_FAMILY_DELETE"}, {"original_string": "private boolean expiredDataCleanEnable;", "modifier": "private", "type": "boolean", "declarator": "expiredDataCleanEnable", "var_name": "expiredDataCleanEnable"}, {"original_string": "protected boolean deleteThemisDeletedDataWhenCompact;", "modifier": "protected", "type": "boolean", "declarator": "deleteThemisDeletedDataWhenCompact", "var_name": "deleteThemisDeletedDataWhenCompact"}], "methods": [{"identifier": "start", "parameters": "(CoprocessorEnvironment e)", "modifiers": "@Override public", "return": "void", "signature": "void start(CoprocessorEnvironment e)", "full_signature": "@Override public void start(CoprocessorEnvironment e)", "class_method_signature": "ThemisRegionObserver.start(CoprocessorEnvironment e)", "testcase": false, "constructor": false}, {"identifier": "prePut", "parameters": "(final ObserverContext<RegionCoprocessorEnvironment> c, final Put put,\n      final WALEdit edit, final boolean writeToWAL)", "modifiers": "@Override public", "return": "void", "signature": "void prePut(final ObserverContext<RegionCoprocessorEnvironment> c, final Put put,\n      final WALEdit edit, final boolean writeToWAL)", "full_signature": "@Override public void prePut(final ObserverContext<RegionCoprocessorEnvironment> c, final Put put,\n      final WALEdit edit, final boolean writeToWAL)", "class_method_signature": "ThemisRegionObserver.prePut(final ObserverContext<RegionCoprocessorEnvironment> c, final Put put,\n      final WALEdit edit, final boolean writeToWAL)", "testcase": false, "constructor": false}, {"identifier": "preFlushScannerOpen", "parameters": "(final ObserverContext<RegionCoprocessorEnvironment> c,\n      final Store store, final KeyValueScanner memstoreScanner, final InternalScanner s)", "modifiers": "@Override public", "return": "InternalScanner", "signature": "InternalScanner preFlushScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,\n      final Store store, final KeyValueScanner memstoreScanner, final InternalScanner s)", "full_signature": "@Override public InternalScanner preFlushScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,\n      final Store store, final KeyValueScanner memstoreScanner, final InternalScanner s)", "class_method_signature": "ThemisRegionObserver.preFlushScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,\n      final Store store, final KeyValueScanner memstoreScanner, final InternalScanner s)", "testcase": false, "constructor": false}, {"identifier": "preCompactScannerOpen", "parameters": "(final ObserverContext<RegionCoprocessorEnvironment> c,\n      final Store store, List<? extends KeyValueScanner> scanners, final ScanType scanType,\n      final long earliestPutTs, final InternalScanner s, CompactionRequest request)", "modifiers": "@Override public", "return": "InternalScanner", "signature": "InternalScanner preCompactScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,\n      final Store store, List<? extends KeyValueScanner> scanners, final ScanType scanType,\n      final long earliestPutTs, final InternalScanner s, CompactionRequest request)", "full_signature": "@Override public InternalScanner preCompactScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,\n      final Store store, List<? extends KeyValueScanner> scanners, final ScanType scanType,\n      final long earliestPutTs, final InternalScanner s, CompactionRequest request)", "class_method_signature": "ThemisRegionObserver.preCompactScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,\n      final Store store, List<? extends KeyValueScanner> scanners, final ScanType scanType,\n      final long earliestPutTs, final InternalScanner s, CompactionRequest request)", "testcase": false, "constructor": false}, {"identifier": "getScannerToCleanExpiredThemisData", "parameters": "(final Store store,\n      final ScanInfo scanInfo, final List<? extends KeyValueScanner> scanners,\n      final ScanType scanType, final long smallestReadPoint, final long earliestPutTs,\n      final boolean isCompact)", "modifiers": "protected", "return": "InternalScanner", "signature": "InternalScanner getScannerToCleanExpiredThemisData(final Store store,\n      final ScanInfo scanInfo, final List<? extends KeyValueScanner> scanners,\n      final ScanType scanType, final long smallestReadPoint, final long earliestPutTs,\n      final boolean isCompact)", "full_signature": "protected InternalScanner getScannerToCleanExpiredThemisData(final Store store,\n      final ScanInfo scanInfo, final List<? extends KeyValueScanner> scanners,\n      final ScanType scanType, final long smallestReadPoint, final long earliestPutTs,\n      final boolean isCompact)", "class_method_signature": "ThemisRegionObserver.getScannerToCleanExpiredThemisData(final Store store,\n      final ScanInfo scanInfo, final List<? extends KeyValueScanner> scanners,\n      final ScanType scanType, final long smallestReadPoint, final long earliestPutTs,\n      final boolean isCompact)", "testcase": false, "constructor": false}], "file": "themis-coprocessor/src/main/java/org/apache/hadoop/hbase/regionserver/ThemisRegionObserver.java"}, "focal_method": {"identifier": "preFlushScannerOpen", "parameters": "(final ObserverContext<RegionCoprocessorEnvironment> c,\n      final Store store, final KeyValueScanner memstoreScanner, final InternalScanner s)", "modifiers": "@Override public", "return": "InternalScanner", "body": "@Override\n  public InternalScanner preFlushScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,\n      final Store store, final KeyValueScanner memstoreScanner, final InternalScanner s)\n      throws IOException {\n    if (expiredDataCleanEnable\n        && (ThemisMasterObserver.isThemisEnableFamily(store.getFamily()) || ColumnUtil\n            .isCommitFamily(store.getFamily().getName()))) {\n      InternalScanner scanner = getScannerToCleanExpiredThemisData(store, store.scanInfo,\n        Collections.singletonList(memstoreScanner), ScanType.MINOR_COMPACT, store.getHRegion()\n            .getSmallestReadPoint(), HConstants.OLDEST_TIMESTAMP, false);\n      if (scanner != null) {\n        return scanner;\n      }\n    }\n    return s;\n  }", "signature": "InternalScanner preFlushScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,\n      final Store store, final KeyValueScanner memstoreScanner, final InternalScanner s)", "full_signature": "@Override public InternalScanner preFlushScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,\n      final Store store, final KeyValueScanner memstoreScanner, final InternalScanner s)", "class_method_signature": "ThemisRegionObserver.preFlushScannerOpen(final ObserverContext<RegionCoprocessorEnvironment> c,\n      final Store store, final KeyValueScanner memstoreScanner, final InternalScanner s)", "testcase": false, "constructor": false, "invocations": ["isThemisEnableFamily", "getFamily", "isCommitFamily", "getName", "getFamily", "getScannerToCleanExpiredThemisData", "singletonList", "getSmallestReadPoint", "getHRegion"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}