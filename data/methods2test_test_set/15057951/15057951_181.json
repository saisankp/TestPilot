{"test_class": {"identifier": "QueuingParameterRequestResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private QueuingParameterRequestResolver resolver;", "modifier": "private", "type": "QueuingParameterRequestResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private final WaitingRequest request = new WaitingRequest();", "modifier": "private final", "type": "WaitingRequest", "declarator": "request = new WaitingRequest()", "var_name": "request"}], "file": "smartparam-engine/src/test/java/org/smartparam/engine/core/parameter/request/QueuingParameterRequestResolverTest.java"}, "test_case": {"identifier": "shouldWaitForFirstRequestToResolveBeforeCallingAnotherForSameParameter", "parameters": "()", "modifiers": "@Test( enabled = false, description = \"Concurrent test should be run with integration tests or when sth changes in tested class\", invocationCount = 10, threadPoolSize = 2 ) public", "return": "void", "body": "@Test(\n            enabled = false,\n            description = \"Concurrent test should be run with integration tests or when sth changes in tested class\",\n            invocationCount = 10, threadPoolSize = 2\n    )\n    public void shouldWaitForFirstRequestToResolveBeforeCallingAnotherForSameParameter() {\n        // when\n        resolver.resolve(\"test\", request);\n\n        // then\n        assertThat(request.invocations).isLessThanOrEqualTo(2);\n    }", "signature": "void shouldWaitForFirstRequestToResolveBeforeCallingAnotherForSameParameter()", "full_signature": "@Test( enabled = false, description = \"Concurrent test should be run with integration tests or when sth changes in tested class\", invocationCount = 10, threadPoolSize = 2 ) public void shouldWaitForFirstRequestToResolveBeforeCallingAnotherForSameParameter()", "class_method_signature": "QueuingParameterRequestResolverTest.shouldWaitForFirstRequestToResolveBeforeCallingAnotherForSameParameter()", "testcase": true, "constructor": false, "invocations": ["resolve", "isLessThanOrEqualTo", "assertThat"]}, "focal_class": {"identifier": "QueuingParameterRequestResolver", "superclass": "", "interfaces": "implements ParameterRequestQueue", "fields": [{"original_string": "private final ExecutorService executorService;", "modifier": "private final", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private final ConcurrentHashMap<String, Future<PreparedParameter>> currentRequests = new ConcurrentHashMap<String, Future<PreparedParameter>>();", "modifier": "private final", "type": "ConcurrentHashMap<String, Future<PreparedParameter>>", "declarator": "currentRequests = new ConcurrentHashMap<String, Future<PreparedParameter>>()", "var_name": "currentRequests"}], "methods": [{"identifier": "QueuingParameterRequestResolver", "parameters": "(ExecutorService executorService)", "modifiers": "public", "return": "", "signature": " QueuingParameterRequestResolver(ExecutorService executorService)", "full_signature": "public  QueuingParameterRequestResolver(ExecutorService executorService)", "class_method_signature": "QueuingParameterRequestResolver.QueuingParameterRequestResolver(ExecutorService executorService)", "testcase": false, "constructor": true}, {"identifier": "resolve", "parameters": "(String parameterName, ParameterRequest request)", "modifiers": "@Override public", "return": "PreparedParameter", "signature": "PreparedParameter resolve(String parameterName, ParameterRequest request)", "full_signature": "@Override public PreparedParameter resolve(String parameterName, ParameterRequest request)", "class_method_signature": "QueuingParameterRequestResolver.resolve(String parameterName, ParameterRequest request)", "testcase": false, "constructor": false}, {"identifier": "resolvePromise", "parameters": "(String parameterName, Future<PreparedParameter> promise)", "modifiers": "private", "return": "PreparedParameter", "signature": "PreparedParameter resolvePromise(String parameterName, Future<PreparedParameter> promise)", "full_signature": "private PreparedParameter resolvePromise(String parameterName, Future<PreparedParameter> promise)", "class_method_signature": "QueuingParameterRequestResolver.resolvePromise(String parameterName, Future<PreparedParameter> promise)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/core/parameter/request/QueuingParameterRequestResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(String parameterName, ParameterRequest request)", "modifiers": "@Override public", "return": "PreparedParameter", "body": "@Override\n    public PreparedParameter resolve(String parameterName, ParameterRequest request) {\n        Future<PreparedParameter> waitingRequest = currentRequests.get(parameterName);\n        if (waitingRequest == null) {\n            waitingRequest = executorService.submit(new ParameterResolvingCallable(parameterName, request));\n            currentRequests.put(parameterName, waitingRequest);\n        }\n        return resolvePromise(parameterName, waitingRequest);\n    }", "signature": "PreparedParameter resolve(String parameterName, ParameterRequest request)", "full_signature": "@Override public PreparedParameter resolve(String parameterName, ParameterRequest request)", "class_method_signature": "QueuingParameterRequestResolver.resolve(String parameterName, ParameterRequest request)", "testcase": false, "constructor": false, "invocations": ["get", "submit", "put", "resolvePromise"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}