{"test_class": {"identifier": "EpsilonMappingAdditiveTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Objective first = new Objective(\"first\", Sign.MAX);", "modifier": "protected static final", "type": "Objective", "declarator": "first = new Objective(\"first\", Sign.MAX)", "var_name": "first"}, {"original_string": "protected static final Objective second = new Objective(\"second\", Sign.MIN);", "modifier": "protected static final", "type": "Objective", "declarator": "second = new Objective(\"second\", Sign.MIN)", "var_name": "second"}], "file": "opt4j-optimizers/src/test/java/org/opt4j/optimizers/ea/aeseh/EpsilonMappingAdditiveTest.java"}, "test_case": {"identifier": "testMapObjectives", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMapObjectives() {\n\t\tSet<Individual> indis = getIndividualSet();\n\t\tEpsilonMappingAdditive epsilonMapping = new EpsilonMappingAdditive();\n\t\tMap<Objective, Double> amplitudeMap = epsilonMapping.findObjectiveAmplitudes(indis);\n\n\t\tObjectives objectives = new Objectives();\n\t\tobjectives.add(first, 0);\n\t\tobjectives.add(second, 0);\n\t\tdouble epsilon = 0.5;\n\n\t\tObjectives epsilonEnhanced = epsilonMapping.mapObjectives(objectives, epsilon, amplitudeMap);\n\t\tassertEquals(1.5, epsilonEnhanced.get(first).getDouble(), 0.0);\n\t\tassertEquals(-1.0, epsilonEnhanced.get(second).getDouble(), 0.0);\n\t}", "signature": "void testMapObjectives()", "full_signature": "@Test public void testMapObjectives()", "class_method_signature": "EpsilonMappingAdditiveTest.testMapObjectives()", "testcase": true, "constructor": false, "invocations": ["getIndividualSet", "findObjectiveAmplitudes", "add", "add", "mapObjectives", "assertEquals", "getDouble", "get", "assertEquals", "getDouble", "get"]}, "focal_class": {"identifier": "EpsilonMappingAdditive", "superclass": "", "interfaces": "implements EpsilonMapping", "fields": [], "methods": [{"identifier": "mapObjectives", "parameters": "(Objectives original, double epsilon, Map<Objective, Double> objectiveAmplitudes)", "modifiers": "@Override public", "return": "Objectives", "signature": "Objectives mapObjectives(Objectives original, double epsilon, Map<Objective, Double> objectiveAmplitudes)", "full_signature": "@Override public Objectives mapObjectives(Objectives original, double epsilon, Map<Objective, Double> objectiveAmplitudes)", "class_method_signature": "EpsilonMappingAdditive.mapObjectives(Objectives original, double epsilon, Map<Objective, Double> objectiveAmplitudes)", "testcase": false, "constructor": false}, {"identifier": "findObjectiveAmplitudes", "parameters": "(Set<Individual> individuals)", "modifiers": "@Override public", "return": "Map<Objective, Double>", "signature": "Map<Objective, Double> findObjectiveAmplitudes(Set<Individual> individuals)", "full_signature": "@Override public Map<Objective, Double> findObjectiveAmplitudes(Set<Individual> individuals)", "class_method_signature": "EpsilonMappingAdditive.findObjectiveAmplitudes(Set<Individual> individuals)", "testcase": false, "constructor": false}], "file": "opt4j-optimizers/src/main/java/org/opt4j/optimizers/ea/aeseh/EpsilonMappingAdditive.java"}, "focal_method": {"identifier": "mapObjectives", "parameters": "(Objectives original, double epsilon, Map<Objective, Double> objectiveAmplitudes)", "modifiers": "@Override public", "return": "Objectives", "body": "@Override\n\tpublic Objectives mapObjectives(Objectives original, double epsilon, Map<Objective, Double> objectiveAmplitudes) {\n\t\tObjectives result = new Objectives();\n\t\tIterator<Objective> iterator = original.getKeys().iterator();\n\t\tdouble[] values = original.array();\n\t\tfor (int i = 0; i < original.size(); i++) {\n\t\t\tObjective obj = iterator.next();\n\t\t\tdouble value = values[i] * (obj.getSign().equals(Sign.MIN) ? 1 : -1);\n\t\t\tif (objectiveAmplitudes.containsKey(obj)) {\n\t\t\t\t// the \u03b5 mapping is only applied if the objective is feasible\n\t\t\t\t// for at least one\n\t\t\t\t// individual\n\t\t\t\tvalue += epsilon * objectiveAmplitudes.get(obj) * (obj.getSign().equals(Sign.MAX) ? 1 : -1);\n\t\t\t}\n\t\t\tresult.add(obj, value);\n\t\t}\n\t\treturn result;\n\t}", "signature": "Objectives mapObjectives(Objectives original, double epsilon, Map<Objective, Double> objectiveAmplitudes)", "full_signature": "@Override public Objectives mapObjectives(Objectives original, double epsilon, Map<Objective, Double> objectiveAmplitudes)", "class_method_signature": "EpsilonMappingAdditive.mapObjectives(Objectives original, double epsilon, Map<Objective, Double> objectiveAmplitudes)", "testcase": false, "constructor": false, "invocations": ["iterator", "getKeys", "array", "size", "next", "equals", "getSign", "containsKey", "get", "equals", "getSign", "add"]}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}