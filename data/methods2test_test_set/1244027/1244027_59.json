{"test_class": {"identifier": "AstNodeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AstNode node;", "modifier": "private", "type": "AstNode", "declarator": "node", "var_name": "node"}, {"original_string": "private AstNode parent;", "modifier": "private", "type": "AstNode", "declarator": "parent", "var_name": "parent"}], "file": "sequencers/modeshape-sequencer-ddl/src/test/java/org/modeshape/sequencer/ddl/node/AstNodeTest.java"}, "test_case": {"identifier": "shouldReturnImmutableListOfChildren", "parameters": "()", "modifiers": "@Test( expected = UnsupportedOperationException.class ) public", "return": "void", "body": "@Test( expected = UnsupportedOperationException.class )\n    public void shouldReturnImmutableListOfChildren() {\n        parent = new AstNode(\"parent\");\n        new AstNode(parent, \"childA\");\n        new AstNode(parent, \"childB\");\n        new AstNode(parent, \"childC\");\n        parent.getChildren().clear();\n    }", "signature": "void shouldReturnImmutableListOfChildren()", "full_signature": "@Test( expected = UnsupportedOperationException.class ) public void shouldReturnImmutableListOfChildren()", "class_method_signature": "AstNodeTest.shouldReturnImmutableListOfChildren()", "testcase": true, "constructor": false, "invocations": ["clear", "getChildren"]}, "focal_class": {"identifier": "AstNode", "superclass": "", "interfaces": "implements Iterable<AstNode>, Cloneable", "fields": [{"original_string": "private AstNode parent;", "modifier": "private", "type": "AstNode", "declarator": "parent", "var_name": "parent"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final Map<String, Object> properties = new HashMap<String, Object>();", "modifier": "private final", "type": "Map<String, Object>", "declarator": "properties = new HashMap<String, Object>()", "var_name": "properties"}, {"original_string": "private final LinkedList<AstNode> children = new LinkedList<AstNode>();", "modifier": "private final", "type": "LinkedList<AstNode>", "declarator": "children = new LinkedList<AstNode>()", "var_name": "children"}, {"original_string": "private final List<AstNode> childrenView = Collections.unmodifiableList(children);", "modifier": "private final", "type": "List<AstNode>", "declarator": "childrenView = Collections.unmodifiableList(children)", "var_name": "childrenView"}], "methods": [{"identifier": "AstNode", "parameters": "( String name )", "modifiers": "", "return": "", "signature": " AstNode( String name )", "full_signature": "  AstNode( String name )", "class_method_signature": "AstNode.AstNode( String name )", "testcase": false, "constructor": true}, {"identifier": "AstNode", "parameters": "( AstNode parent,\n                    String name )", "modifiers": "public", "return": "", "signature": " AstNode( AstNode parent,\n                    String name )", "full_signature": "public  AstNode( AstNode parent,\n                    String name )", "class_method_signature": "AstNode.AstNode( AstNode parent,\n                    String name )", "testcase": false, "constructor": true}, {"identifier": "addMixin", "parameters": "( final String mixin )", "modifiers": "public", "return": "boolean", "signature": "boolean addMixin( final String mixin )", "full_signature": "public boolean addMixin( final String mixin )", "class_method_signature": "AstNode.addMixin( final String mixin )", "testcase": false, "constructor": false}, {"identifier": "hasMixin", "parameters": "( final String mixin )", "modifiers": "public", "return": "boolean", "signature": "boolean hasMixin( final String mixin )", "full_signature": "public boolean hasMixin( final String mixin )", "class_method_signature": "AstNode.hasMixin( final String mixin )", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "AstNode.getName()", "testcase": false, "constructor": false}, {"identifier": "getPrimaryType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPrimaryType()", "full_signature": "public String getPrimaryType()", "class_method_signature": "AstNode.getPrimaryType()", "testcase": false, "constructor": false}, {"identifier": "getSameNameSiblingIndex", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSameNameSiblingIndex()", "full_signature": "public int getSameNameSiblingIndex()", "class_method_signature": "AstNode.getSameNameSiblingIndex()", "testcase": false, "constructor": false}, {"identifier": "getAbsolutePath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAbsolutePath()", "full_signature": "public String getAbsolutePath()", "class_method_signature": "AstNode.getAbsolutePath()", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "( String name )", "modifiers": "public", "return": "Object", "signature": "Object getProperty( String name )", "full_signature": "public Object getProperty( String name )", "class_method_signature": "AstNode.getProperty( String name )", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "( String name,\n                                Object value )", "modifiers": "public", "return": "AstNode", "signature": "AstNode setProperty( String name,\n                                Object value )", "full_signature": "public AstNode setProperty( String name,\n                                Object value )", "class_method_signature": "AstNode.setProperty( String name,\n                                Object value )", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "( String name,\n                                Object... values )", "modifiers": "public", "return": "AstNode", "signature": "AstNode setProperty( String name,\n                                Object... values )", "full_signature": "public AstNode setProperty( String name,\n                                Object... values )", "class_method_signature": "AstNode.setProperty( String name,\n                                Object... values )", "testcase": false, "constructor": false}, {"identifier": "removeProperty", "parameters": "( String name )", "modifiers": "public", "return": "Object", "signature": "Object removeProperty( String name )", "full_signature": "public Object removeProperty( String name )", "class_method_signature": "AstNode.removeProperty( String name )", "testcase": false, "constructor": false}, {"identifier": "getPropertyNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getPropertyNames()", "full_signature": "public List<String> getPropertyNames()", "class_method_signature": "AstNode.getPropertyNames()", "testcase": false, "constructor": false}, {"identifier": "getMixins", "parameters": "()", "modifiers": "@SuppressWarnings( \"unchecked\" ) public", "return": "List<String>", "signature": "List<String> getMixins()", "full_signature": "@SuppressWarnings( \"unchecked\" ) public List<String> getMixins()", "class_method_signature": "AstNode.getMixins()", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "public", "return": "AstNode", "signature": "AstNode getParent()", "full_signature": "public AstNode getParent()", "class_method_signature": "AstNode.getParent()", "testcase": false, "constructor": false}, {"identifier": "setParent", "parameters": "( AstNode parent )", "modifiers": "public", "return": "void", "signature": "void setParent( AstNode parent )", "full_signature": "public void setParent( AstNode parent )", "class_method_signature": "AstNode.setParent( AstNode parent )", "testcase": false, "constructor": false}, {"identifier": "insertAsParent", "parameters": "( AstNode newParent )", "modifiers": "public", "return": "void", "signature": "void insertAsParent( AstNode newParent )", "full_signature": "public void insertAsParent( AstNode newParent )", "class_method_signature": "AstNode.insertAsParent( AstNode newParent )", "testcase": false, "constructor": false}, {"identifier": "removeFromParent", "parameters": "()", "modifiers": "public", "return": "AstNode", "signature": "AstNode removeFromParent()", "full_signature": "public AstNode removeFromParent()", "class_method_signature": "AstNode.removeFromParent()", "testcase": false, "constructor": false}, {"identifier": "replaceChild", "parameters": "( AstNode child,\n                                 AstNode replacement )", "modifiers": "public", "return": "boolean", "signature": "boolean replaceChild( AstNode child,\n                                 AstNode replacement )", "full_signature": "public boolean replaceChild( AstNode child,\n                                 AstNode replacement )", "class_method_signature": "AstNode.replaceChild( AstNode child,\n                                 AstNode replacement )", "testcase": false, "constructor": false}, {"identifier": "getChildCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getChildCount()", "full_signature": "public int getChildCount()", "class_method_signature": "AstNode.getChildCount()", "testcase": false, "constructor": false}, {"identifier": "getFirstChild", "parameters": "()", "modifiers": "public", "return": "AstNode", "signature": "AstNode getFirstChild()", "full_signature": "public AstNode getFirstChild()", "class_method_signature": "AstNode.getFirstChild()", "testcase": false, "constructor": false}, {"identifier": "getLastChild", "parameters": "()", "modifiers": "public", "return": "AstNode", "signature": "AstNode getLastChild()", "full_signature": "public AstNode getLastChild()", "class_method_signature": "AstNode.getLastChild()", "testcase": false, "constructor": false}, {"identifier": "childrenWithName", "parameters": "( final String name )", "modifiers": "public", "return": "List<AstNode>", "signature": "List<AstNode> childrenWithName( final String name )", "full_signature": "public List<AstNode> childrenWithName( final String name )", "class_method_signature": "AstNode.childrenWithName( final String name )", "testcase": false, "constructor": false}, {"identifier": "getChild", "parameters": "( int index )", "modifiers": "public", "return": "AstNode", "signature": "AstNode getChild( int index )", "full_signature": "public AstNode getChild( int index )", "class_method_signature": "AstNode.getChild( int index )", "testcase": false, "constructor": false}, {"identifier": "addFirstChild", "parameters": "( AstNode child )", "modifiers": "public", "return": "void", "signature": "void addFirstChild( AstNode child )", "full_signature": "public void addFirstChild( AstNode child )", "class_method_signature": "AstNode.addFirstChild( AstNode child )", "testcase": false, "constructor": false}, {"identifier": "addLastChild", "parameters": "( AstNode child )", "modifiers": "public", "return": "void", "signature": "void addLastChild( AstNode child )", "full_signature": "public void addLastChild( AstNode child )", "class_method_signature": "AstNode.addLastChild( AstNode child )", "testcase": false, "constructor": false}, {"identifier": "addChildren", "parameters": "( Iterable<AstNode> otherChildren )", "modifiers": "public", "return": "void", "signature": "void addChildren( Iterable<AstNode> otherChildren )", "full_signature": "public void addChildren( Iterable<AstNode> otherChildren )", "class_method_signature": "AstNode.addChildren( Iterable<AstNode> otherChildren )", "testcase": false, "constructor": false}, {"identifier": "addChildren", "parameters": "( AstNode first,\n                             AstNode second )", "modifiers": "public", "return": "void", "signature": "void addChildren( AstNode first,\n                             AstNode second )", "full_signature": "public void addChildren( AstNode first,\n                             AstNode second )", "class_method_signature": "AstNode.addChildren( AstNode first,\n                             AstNode second )", "testcase": false, "constructor": false}, {"identifier": "addChildren", "parameters": "( AstNode first,\n                             AstNode second,\n                             AstNode third )", "modifiers": "public", "return": "void", "signature": "void addChildren( AstNode first,\n                             AstNode second,\n                             AstNode third )", "full_signature": "public void addChildren( AstNode first,\n                             AstNode second,\n                             AstNode third )", "class_method_signature": "AstNode.addChildren( AstNode first,\n                             AstNode second,\n                             AstNode third )", "testcase": false, "constructor": false}, {"identifier": "removeChild", "parameters": "( AstNode child )", "modifiers": "public", "return": "boolean", "signature": "boolean removeChild( AstNode child )", "full_signature": "public boolean removeChild( AstNode child )", "class_method_signature": "AstNode.removeChild( AstNode child )", "testcase": false, "constructor": false}, {"identifier": "extractChild", "parameters": "( AstNode child )", "modifiers": "public", "return": "void", "signature": "void extractChild( AstNode child )", "full_signature": "public void extractChild( AstNode child )", "class_method_signature": "AstNode.extractChild( AstNode child )", "testcase": false, "constructor": false}, {"identifier": "extractFromParent", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void extractFromParent()", "full_signature": "public void extractFromParent()", "class_method_signature": "AstNode.extractFromParent()", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "()", "modifiers": "public", "return": "List<AstNode>", "signature": "List<AstNode> getChildren()", "full_signature": "public List<AstNode> getChildren()", "class_method_signature": "AstNode.getChildren()", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "( final String mixin )", "modifiers": "public", "return": "List<AstNode>", "signature": "List<AstNode> getChildren( final String mixin )", "full_signature": "public List<AstNode> getChildren( final String mixin )", "class_method_signature": "AstNode.getChildren( final String mixin )", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<AstNode>", "signature": "Iterator<AstNode> iterator()", "full_signature": "@Override public Iterator<AstNode> iterator()", "class_method_signature": "AstNode.iterator()", "testcase": false, "constructor": false}, {"identifier": "removeAllChildren", "parameters": "()", "modifiers": "public", "return": "List<AstNode>", "signature": "List<AstNode> removeAllChildren()", "full_signature": "public List<AstNode> removeAllChildren()", "class_method_signature": "AstNode.removeAllChildren()", "testcase": false, "constructor": false}, {"identifier": "isSameAs", "parameters": "( AstNode other )", "modifiers": "public", "return": "boolean", "signature": "boolean isSameAs( AstNode other )", "full_signature": "public boolean isSameAs( AstNode other )", "class_method_signature": "AstNode.isSameAs( AstNode other )", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "AstNode", "signature": "AstNode clone()", "full_signature": "@Override public AstNode clone()", "class_method_signature": "AstNode.clone()", "testcase": false, "constructor": false}, {"identifier": "cloneWithoutNewParent", "parameters": "()", "modifiers": "protected", "return": "AstNode", "signature": "AstNode cloneWithoutNewParent()", "full_signature": "protected AstNode cloneWithoutNewParent()", "class_method_signature": "AstNode.cloneWithoutNewParent()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AstNode.toString()", "testcase": false, "constructor": false}], "file": "sequencers/modeshape-sequencer-ddl/src/main/java/org/modeshape/sequencer/ddl/node/AstNode.java"}, "focal_method": {"identifier": "getChildren", "parameters": "()", "modifiers": "public", "return": "List<AstNode>", "body": "public List<AstNode> getChildren() {\n        return childrenView;\n    }", "signature": "List<AstNode> getChildren()", "full_signature": "public List<AstNode> getChildren()", "class_method_signature": "AstNode.getChildren()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}