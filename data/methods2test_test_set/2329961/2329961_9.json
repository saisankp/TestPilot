{"test_class": {"identifier": "MetadataHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder temp = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temp = new TemporaryFolder()", "var_name": "temp"}, {"original_string": "private IdGenerator idGenerator;", "modifier": "private", "type": "IdGenerator", "declarator": "idGenerator", "var_name": "idGenerator"}], "file": "timber/src/test/java/org/cloudname/timber/server/handler/archiver/MetadataHandlerTest.java"}, "test_case": {"identifier": "testWriteAck", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWriteAck() throws IOException {\n        final MetadataHandler handler = MetadataHandler.getInstance();\n        final File file = temp.newFile(\"ackfile\");\n\n        handler.writeAck(file, \"id\");\n        Assert.assertTrue(file.exists());\n        final BufferedReader reader = new BufferedReader(\n            new FileReader(file.getAbsolutePath() + MetadataHandler.METADATA_FILE_SUFFIX));\n        String line = reader.readLine();\n        Assert.assertEquals(\"File content is not correct.\", \"id\", line);\n\n        reader.close();\n    }", "signature": "void testWriteAck()", "full_signature": "@Test public void testWriteAck()", "class_method_signature": "MetadataHandlerTest.testWriteAck()", "testcase": true, "constructor": false, "invocations": ["getInstance", "newFile", "writeAck", "assertTrue", "exists", "getAbsolutePath", "readLine", "assertEquals", "close"]}, "focal_class": {"identifier": "MetadataHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MAX_FILES_OPEN = 5;", "modifier": "private static final", "type": "int", "declarator": "MAX_FILES_OPEN = 5", "var_name": "MAX_FILES_OPEN"}, {"original_string": "private static final Logger LOG = Logger.getLogger(MetadataHandler.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(MetadataHandler.class.getName())", "var_name": "LOG"}, {"original_string": "public static final String DELIMITER = \",\";", "modifier": "public static final", "type": "String", "declarator": "DELIMITER = \",\"", "var_name": "DELIMITER"}, {"original_string": "public static final String METADATA_FILE_SUFFIX = \"_md\";", "modifier": "public static final", "type": "String", "declarator": "METADATA_FILE_SUFFIX = \"_md\"", "var_name": "METADATA_FILE_SUFFIX"}, {"original_string": "public static MetadataHandler instance;", "modifier": "public static", "type": "MetadataHandler", "declarator": "instance", "var_name": "instance"}, {"original_string": "private final Object lock = new Object();", "modifier": "private final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}, {"original_string": "private File currentSlotFile;", "modifier": "private", "type": "File", "declarator": "currentSlotFile", "var_name": "currentSlotFile"}, {"original_string": "private BufferedWriter currentWriter;", "modifier": "private", "type": "BufferedWriter", "declarator": "currentWriter", "var_name": "currentWriter"}, {"original_string": "private final MetadataWriterLruCache<String, BufferedWriter> writerLruCache\n        = new MetadataWriterLruCache<String, BufferedWriter>(MAX_FILES_OPEN);", "modifier": "private final", "type": "MetadataWriterLruCache<String, BufferedWriter>", "declarator": "writerLruCache\n        = new MetadataWriterLruCache<String, BufferedWriter>(MAX_FILES_OPEN)", "var_name": "writerLruCache"}], "methods": [{"identifier": "MetadataHandler", "parameters": "()", "modifiers": "private", "return": "", "signature": " MetadataHandler()", "full_signature": "private  MetadataHandler()", "class_method_signature": "MetadataHandler.MetadataHandler()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "MetadataHandler", "signature": "MetadataHandler getInstance()", "full_signature": "public static MetadataHandler getInstance()", "class_method_signature": "MetadataHandler.getInstance()", "testcase": false, "constructor": false}, {"identifier": "writeAck", "parameters": "(final File slotFile, final String id)", "modifiers": "public", "return": "void", "signature": "void writeAck(final File slotFile, final String id)", "full_signature": "public void writeAck(final File slotFile, final String id)", "class_method_signature": "MetadataHandler.writeAck(final File slotFile, final String id)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void flush()", "full_signature": "public void flush()", "class_method_signature": "MetadataHandler.flush()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "MetadataHandler.close()", "testcase": false, "constructor": false}, {"identifier": "getWriter", "parameters": "(final File slotFile)", "modifiers": "private", "return": "BufferedWriter", "signature": "BufferedWriter getWriter(final File slotFile)", "full_signature": "private BufferedWriter getWriter(final File slotFile)", "class_method_signature": "MetadataHandler.getWriter(final File slotFile)", "testcase": false, "constructor": false}], "file": "timber/src/main/java/org/cloudname/timber/server/handler/archiver/MetadataHandler.java"}, "focal_method": {"identifier": "writeAck", "parameters": "(final File slotFile, final String id)", "modifiers": "public", "return": "void", "body": "public void writeAck(final File slotFile, final String id) {\n        synchronized (lock) {\n            try {\n                final BufferedWriter writer = getWriter(slotFile);\n                assert(writer != null);\n                writer.write(id);\n                writer.newLine();\n                writer.flush();\n            } catch (IOException e) {\n                LOG.log(Level.WARNING, \"Unable to write metadata ack entry.\", e);\n            }\n        }\n    }", "signature": "void writeAck(final File slotFile, final String id)", "full_signature": "public void writeAck(final File slotFile, final String id)", "class_method_signature": "MetadataHandler.writeAck(final File slotFile, final String id)", "testcase": false, "constructor": false, "invocations": ["getWriter", "write", "newLine", "flush", "log"]}, "repository": {"repo_id": 2329961, "url": "https://github.com/Cloudname/cloudname", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 21, "size": 26031, "license": "licensed"}}