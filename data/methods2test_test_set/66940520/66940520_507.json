{"test_class": {"identifier": "OrganisationUnitHierarchyTest", "superclass": "", "interfaces": "", "fields": [], "file": "dhis-2/dhis-api/src/test/java/org/hisp/dhis/organisationunit/OrganisationUnitHierarchyTest.java"}, "test_case": {"identifier": "testGetChildren", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetChildren()\n    {\n        Set<Long> parentIds = new HashSet<>();\n\n        List<OrganisationUnitRelationship> relations = new ArrayList<>();\n\n        int parentMax = 1000; // Increase to stress-test\n        int childMax = 4;\n        int childId = 0;\n\n        for ( long parentId = 0; parentId < parentMax; parentId++ )\n        {\n            parentIds.add( parentId );\n\n            for ( int j = 0; j < childMax; j++ )\n            {\n                relations.add( new OrganisationUnitRelationship( parentId, ++childId ) );\n            }\n        }\n\n        OrganisationUnitHierarchy hierarchy = new OrganisationUnitHierarchy( relations );\n\n        Set<Long> children = hierarchy.getChildren( parentIds );\n\n        assertNotNull( children );\n        assertEquals( (parentMax * childMax) + 1, children.size() );\n    }", "signature": "void testGetChildren()", "full_signature": "@Test public void testGetChildren()", "class_method_signature": "OrganisationUnitHierarchyTest.testGetChildren()", "testcase": true, "constructor": false, "invocations": ["add", "add", "getChildren", "assertNotNull", "assertEquals", "size"]}, "focal_class": {"identifier": "OrganisationUnitHierarchy", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<Long, Set<Long>> relationships = new HashMap<>();", "modifier": "private", "type": "Map<Long, Set<Long>>", "declarator": "relationships = new HashMap<>()", "var_name": "relationships"}, {"original_string": "private Map<Long, Set<Long>> subTrees = new HashMap<>();", "modifier": "private", "type": "Map<Long, Set<Long>>", "declarator": "subTrees = new HashMap<>()", "var_name": "subTrees"}, {"original_string": "private Map<String, Set<Long>> groupSubTrees = new HashMap<>();", "modifier": "private", "type": "Map<String, Set<Long>>", "declarator": "groupSubTrees = new HashMap<>()", "var_name": "groupSubTrees"}], "methods": [{"identifier": "OrganisationUnitHierarchy", "parameters": "( Map<Long, Set<Long>> relationships )", "modifiers": "public", "return": "", "signature": " OrganisationUnitHierarchy( Map<Long, Set<Long>> relationships )", "full_signature": "public  OrganisationUnitHierarchy( Map<Long, Set<Long>> relationships )", "class_method_signature": "OrganisationUnitHierarchy.OrganisationUnitHierarchy( Map<Long, Set<Long>> relationships )", "testcase": false, "constructor": true}, {"identifier": "OrganisationUnitHierarchy", "parameters": "( Collection<OrganisationUnitRelationship> relations )", "modifiers": "public", "return": "", "signature": " OrganisationUnitHierarchy( Collection<OrganisationUnitRelationship> relations )", "full_signature": "public  OrganisationUnitHierarchy( Collection<OrganisationUnitRelationship> relations )", "class_method_signature": "OrganisationUnitHierarchy.OrganisationUnitHierarchy( Collection<OrganisationUnitRelationship> relations )", "testcase": false, "constructor": true}, {"identifier": "prepareChildren", "parameters": "( OrganisationUnit parent )", "modifiers": "public", "return": "OrganisationUnitHierarchy", "signature": "OrganisationUnitHierarchy prepareChildren( OrganisationUnit parent )", "full_signature": "public OrganisationUnitHierarchy prepareChildren( OrganisationUnit parent )", "class_method_signature": "OrganisationUnitHierarchy.prepareChildren( OrganisationUnit parent )", "testcase": false, "constructor": false}, {"identifier": "prepareChildren", "parameters": "( Collection<OrganisationUnit> parents )", "modifiers": "public", "return": "OrganisationUnitHierarchy", "signature": "OrganisationUnitHierarchy prepareChildren( Collection<OrganisationUnit> parents )", "full_signature": "public OrganisationUnitHierarchy prepareChildren( Collection<OrganisationUnit> parents )", "class_method_signature": "OrganisationUnitHierarchy.prepareChildren( Collection<OrganisationUnit> parents )", "testcase": false, "constructor": false}, {"identifier": "prepareChildren", "parameters": "( OrganisationUnit parent, OrganisationUnitGroup group )", "modifiers": "public", "return": "OrganisationUnitHierarchy", "signature": "OrganisationUnitHierarchy prepareChildren( OrganisationUnit parent, OrganisationUnitGroup group )", "full_signature": "public OrganisationUnitHierarchy prepareChildren( OrganisationUnit parent, OrganisationUnitGroup group )", "class_method_signature": "OrganisationUnitHierarchy.prepareChildren( OrganisationUnit parent, OrganisationUnitGroup group )", "testcase": false, "constructor": false}, {"identifier": "prepareChildren", "parameters": "( Collection<OrganisationUnit> parents, Collection<OrganisationUnitGroup> groups )", "modifiers": "public", "return": "OrganisationUnitHierarchy", "signature": "OrganisationUnitHierarchy prepareChildren( Collection<OrganisationUnit> parents, Collection<OrganisationUnitGroup> groups )", "full_signature": "public OrganisationUnitHierarchy prepareChildren( Collection<OrganisationUnit> parents, Collection<OrganisationUnitGroup> groups )", "class_method_signature": "OrganisationUnitHierarchy.prepareChildren( Collection<OrganisationUnit> parents, Collection<OrganisationUnitGroup> groups )", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "( long parentId )", "modifiers": "public", "return": "Set<Long>", "signature": "Set<Long> getChildren( long parentId )", "full_signature": "public Set<Long> getChildren( long parentId )", "class_method_signature": "OrganisationUnitHierarchy.getChildren( long parentId )", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "( Collection<Long> parentIds )", "modifiers": "public", "return": "Set<Long>", "signature": "Set<Long> getChildren( Collection<Long> parentIds )", "full_signature": "public Set<Long> getChildren( Collection<Long> parentIds )", "class_method_signature": "OrganisationUnitHierarchy.getChildren( Collection<Long> parentIds )", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "( long parentId, OrganisationUnitGroup group )", "modifiers": "public", "return": "Set<Long>", "signature": "Set<Long> getChildren( long parentId, OrganisationUnitGroup group )", "full_signature": "public Set<Long> getChildren( long parentId, OrganisationUnitGroup group )", "class_method_signature": "OrganisationUnitHierarchy.getChildren( long parentId, OrganisationUnitGroup group )", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "( Collection<Long> parentIds, Collection<OrganisationUnitGroup> groups )", "modifiers": "public", "return": "Set<Long>", "signature": "Set<Long> getChildren( Collection<Long> parentIds, Collection<OrganisationUnitGroup> groups )", "full_signature": "public Set<Long> getChildren( Collection<Long> parentIds, Collection<OrganisationUnitGroup> groups )", "class_method_signature": "OrganisationUnitHierarchy.getChildren( Collection<Long> parentIds, Collection<OrganisationUnitGroup> groups )", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "( long parentId, OrganisationUnitGroup group )", "modifiers": "private", "return": "String", "signature": "String getKey( long parentId, OrganisationUnitGroup group )", "full_signature": "private String getKey( long parentId, OrganisationUnitGroup group )", "class_method_signature": "OrganisationUnitHierarchy.getKey( long parentId, OrganisationUnitGroup group )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/organisationunit/OrganisationUnitHierarchy.java"}, "focal_method": {"identifier": "getChildren", "parameters": "( long parentId )", "modifiers": "public", "return": "Set<Long>", "body": "public Set<Long> getChildren( long parentId )\n    {\n        Set<Long> preparedChildren = subTrees.get( parentId );\n        \n        if ( preparedChildren != null )\n        {\n            return new HashSet<>( preparedChildren );\n        }\n        \n        List<Long> children = new ArrayList<>();\n        \n        children.add( 0, parentId ); // Adds parent id to beginning of list\n\n        int childCounter = 1;\n        \n        for ( int i = 0; i < childCounter; i++ )\n        {\n            Set<Long> currentChildren = relationships.get( children.get( i ) );\n            \n            if ( currentChildren != null )\n            {\n                children.addAll( currentChildren );\n            \n                childCounter += currentChildren.size();\n            }\n        }\n        \n        return new HashSet<>( children );\n    }", "signature": "Set<Long> getChildren( long parentId )", "full_signature": "public Set<Long> getChildren( long parentId )", "class_method_signature": "OrganisationUnitHierarchy.getChildren( long parentId )", "testcase": false, "constructor": false, "invocations": ["get", "add", "get", "get", "addAll", "size"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}