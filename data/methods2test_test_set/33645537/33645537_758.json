{"test_class": {"identifier": "CachedThreadSchedulerTest", "superclass": "extends AbstractSchedulerConcurrencyTests", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/schedulers/CachedThreadSchedulerTest.java"}, "test_case": {"identifier": "testCancelledTaskRetention", "parameters": "()", "modifiers": "@Test(timeout = 30000) public", "return": "void", "body": "@Test(timeout = 30000)\n    public void testCancelledTaskRetention() throws InterruptedException {\n        System.out.println(\"Wait before GC\");\n        Thread.sleep(1000);\n        \n        System.out.println(\"GC\");\n        System.gc();\n        \n        Thread.sleep(1000);\n\n        \n        MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n        MemoryUsage memHeap = memoryMXBean.getHeapMemoryUsage();\n        long initial = memHeap.getUsed();\n        \n        System.out.printf(\"Starting: %.3f MB%n\", initial / 1024.0 / 1024.0);\n        \n        Scheduler.Worker w = Schedulers.io().createWorker();\n        for (int i = 0; i < 750000; i++) {\n            if (i % 50000 == 0) {\n                System.out.println(\"  -> still scheduling: \" + i);\n            }\n            w.schedule(Actions.empty(), 1, TimeUnit.DAYS);\n        }\n        \n        memHeap = memoryMXBean.getHeapMemoryUsage();\n        long after = memHeap.getUsed();\n        System.out.printf(\"Peak: %.3f MB%n\", after / 1024.0 / 1024.0);\n        \n        w.unsubscribe();\n        \n        System.out.println(\"Wait before second GC\");\n        Thread.sleep(NewThreadWorker.PURGE_FREQUENCY + 2000);\n        \n        System.out.println(\"Second GC\");\n        System.gc();\n        \n        Thread.sleep(1000);\n        \n        memHeap = memoryMXBean.getHeapMemoryUsage();\n        long finish = memHeap.getUsed();\n        System.out.printf(\"After: %.3f MB%n\", finish / 1024.0 / 1024.0);\n        \n        if (finish > initial * 5) {\n            Assert.fail(String.format(\"Tasks retained: %.3f -> %.3f -> %.3f\", initial / 1024 / 1024.0, after / 1024 / 1024.0, finish / 1024 / 1024d));\n        }\n    }", "signature": "void testCancelledTaskRetention()", "full_signature": "@Test(timeout = 30000) public void testCancelledTaskRetention()", "class_method_signature": "CachedThreadSchedulerTest.testCancelledTaskRetention()", "testcase": true, "constructor": false, "invocations": ["println", "sleep", "println", "gc", "sleep", "getMemoryMXBean", "getHeapMemoryUsage", "getUsed", "printf", "createWorker", "io", "println", "schedule", "empty", "getHeapMemoryUsage", "getUsed", "printf", "unsubscribe", "println", "sleep", "println", "gc", "sleep", "getHeapMemoryUsage", "getUsed", "printf", "fail", "format"]}, "focal_class": {"identifier": "CachedThreadScheduler", "superclass": "extends Scheduler", "interfaces": "", "fields": [{"original_string": "private static final String WORKER_THREAD_NAME_PREFIX = \"RxCachedThreadScheduler-\";", "modifier": "private static final", "type": "String", "declarator": "WORKER_THREAD_NAME_PREFIX = \"RxCachedThreadScheduler-\"", "var_name": "WORKER_THREAD_NAME_PREFIX"}, {"original_string": "private static final RxThreadFactory WORKER_THREAD_FACTORY =\n            new RxThreadFactory(WORKER_THREAD_NAME_PREFIX);", "modifier": "private static final", "type": "RxThreadFactory", "declarator": "WORKER_THREAD_FACTORY =\n            new RxThreadFactory(WORKER_THREAD_NAME_PREFIX)", "var_name": "WORKER_THREAD_FACTORY"}, {"original_string": "private static final String EVICTOR_THREAD_NAME_PREFIX = \"RxCachedWorkerPoolEvictor-\";", "modifier": "private static final", "type": "String", "declarator": "EVICTOR_THREAD_NAME_PREFIX = \"RxCachedWorkerPoolEvictor-\"", "var_name": "EVICTOR_THREAD_NAME_PREFIX"}, {"original_string": "private static final RxThreadFactory EVICTOR_THREAD_FACTORY =\n            new RxThreadFactory(EVICTOR_THREAD_NAME_PREFIX);", "modifier": "private static final", "type": "RxThreadFactory", "declarator": "EVICTOR_THREAD_FACTORY =\n            new RxThreadFactory(EVICTOR_THREAD_NAME_PREFIX)", "var_name": "EVICTOR_THREAD_FACTORY"}], "methods": [{"identifier": "createWorker", "parameters": "()", "modifiers": "@Override public", "return": "Worker", "signature": "Worker createWorker()", "full_signature": "@Override public Worker createWorker()", "class_method_signature": "CachedThreadScheduler.createWorker()", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/schedulers/CachedThreadScheduler.java"}, "focal_method": {"identifier": "createWorker", "parameters": "()", "modifiers": "@Override public", "return": "Worker", "body": "@Override\n    public Worker createWorker() {\n        return new EventLoopWorker(CachedWorkerPool.INSTANCE.get());\n    }", "signature": "Worker createWorker()", "full_signature": "@Override public Worker createWorker()", "class_method_signature": "CachedThreadScheduler.createWorker()", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}