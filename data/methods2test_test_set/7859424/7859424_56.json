{"test_class": {"identifier": "RaveDescenderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Player player;", "modifier": "", "type": "Player", "declarator": "player", "var_name": "player"}, {"original_string": "McRunnable runnable;", "modifier": "", "type": "McRunnable", "declarator": "runnable", "var_name": "runnable"}, {"original_string": "TranspositionTable table;", "modifier": "", "type": "TranspositionTable", "declarator": "table", "var_name": "table"}, {"original_string": "RaveDescender descender;", "modifier": "", "type": "RaveDescender", "declarator": "descender", "var_name": "descender"}, {"original_string": "SimpleTreeUpdater updater;", "modifier": "", "type": "SimpleTreeUpdater", "declarator": "updater", "var_name": "updater"}], "file": "src/edu/lclark/orego/mcts/RaveDescenderTest.java"}, "test_case": {"identifier": "testIncorporateRun", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIncorporateRun() {\n\t\tplayer.acceptMove(at(\"a1\"));\n\t\tRaveNode root = (RaveNode) updater.getRoot();\n\t\trunnable.copyDataFrom(player.getBoard());\n\t\trunnable.acceptMove(at(\"a2\"));\n\t\trunnable.acceptMove(at(\"a3\"));\n\t\trunnable.acceptMove(at(\"a4\"));\n\t\tupdater.updateTree(BLACK, runnable);\n\t\tassertEquals(0.333333, root.getWinRate(at(\"a2\")), 0.01);\n\t\trunnable.copyDataFrom(player.getBoard());\n\t\trunnable.acceptMove(at(\"a4\"));\n\t\trunnable.acceptMove(at(\"a3\"));\n\t\trunnable.acceptMove(at(\"a2\"));\n\t\tupdater.updateTree(BLACK, runnable);\n\t\tassertEquals(0.25, root.getRaveWinRate(at(\"a2\")), 0.01);\n\t\tassertEquals(0.2856f, descender.searchValue(root, at(\"a2\")), 0.01f);\n\t}", "signature": "void testIncorporateRun()", "full_signature": "@Test public void testIncorporateRun()", "class_method_signature": "RaveDescenderTest.testIncorporateRun()", "testcase": true, "constructor": false, "invocations": ["acceptMove", "at", "getRoot", "copyDataFrom", "getBoard", "acceptMove", "at", "acceptMove", "at", "acceptMove", "at", "updateTree", "assertEquals", "getWinRate", "at", "copyDataFrom", "getBoard", "acceptMove", "at", "acceptMove", "at", "acceptMove", "at", "updateTree", "assertEquals", "getRaveWinRate", "at", "assertEquals", "searchValue", "at"]}, "focal_class": {"identifier": "RaveDescender", "superclass": "extends AbstractDescender", "interfaces": "", "fields": [{"original_string": "private final float raveBias;", "modifier": "private final", "type": "float", "declarator": "raveBias", "var_name": "raveBias"}], "methods": [{"identifier": "RaveDescender", "parameters": "(Board board, TranspositionTable table, int biasDelay)", "modifiers": "public", "return": "", "signature": " RaveDescender(Board board, TranspositionTable table, int biasDelay)", "full_signature": "public  RaveDescender(Board board, TranspositionTable table, int biasDelay)", "class_method_signature": "RaveDescender.RaveDescender(Board board, TranspositionTable table, int biasDelay)", "testcase": false, "constructor": true}, {"identifier": "raveCoefficient", "parameters": "(float c, float rc)", "modifiers": "private", "return": "float", "signature": "float raveCoefficient(float c, float rc)", "full_signature": "private float raveCoefficient(float c, float rc)", "class_method_signature": "RaveDescender.raveCoefficient(float c, float rc)", "testcase": false, "constructor": false}, {"identifier": "searchValue", "parameters": "(SearchNode node, short move)", "modifiers": "@Override public", "return": "float", "signature": "float searchValue(SearchNode node, short move)", "full_signature": "@Override public float searchValue(SearchNode node, short move)", "class_method_signature": "RaveDescender.searchValue(SearchNode node, short move)", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/mcts/RaveDescender.java"}, "focal_method": {"identifier": "searchValue", "parameters": "(SearchNode node, short move)", "modifiers": "@Override public", "return": "float", "body": "@Override\n\tpublic float searchValue(SearchNode node, short move) {\n\t\tif (node.getWinRate(move) < 0.0f) {\n\t\t\treturn NEGATIVE_INFINITY;\n\t\t}\n\t\tif (move == PASS) {\n\t\t\treturn node.getWinRate(move);\n\t\t}\n\t\tfinal RaveNode raveNode = (RaveNode) node;\n\t\tfinal float c = raveNode.getRuns(move);\n\t\tfinal float r = raveNode.getWinRate(move);\n\t\tfinal float rc = raveNode.getRaveRuns(move);\n\t\tfinal float rr = raveNode.getRaveWinRate(move);\n\t\tfinal float coef = raveCoefficient(c, rc);\n\t\treturn r * (1 - coef) + rr * coef;\n\t}", "signature": "float searchValue(SearchNode node, short move)", "full_signature": "@Override public float searchValue(SearchNode node, short move)", "class_method_signature": "RaveDescender.searchValue(SearchNode node, short move)", "testcase": false, "constructor": false, "invocations": ["getWinRate", "getWinRate", "getRuns", "getWinRate", "getRaveRuns", "getRaveWinRate", "raveCoefficient"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}