{"test_class": {"identifier": "ConfigURIFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "owner/src/test/java/org/aeonbits/owner/ConfigURIFactoryTest.java"}, "test_case": {"identifier": "shouldReturnAUriWithEmptyFilePath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnAUriWithEmptyFilePath() throws URISyntaxException {\n        ConfigURIFactory h = new ConfigURIFactory(this.getClass().getClassLoader(), new VariablesExpander(new Properties()));\n        URI uri = h.newURI(\"file:\");\n        assertNotNull(uri);\n    }", "signature": "void shouldReturnAUriWithEmptyFilePath()", "full_signature": "@Test public void shouldReturnAUriWithEmptyFilePath()", "class_method_signature": "ConfigURIFactoryTest.shouldReturnAUriWithEmptyFilePath()", "testcase": true, "constructor": false, "invocations": ["getClassLoader", "getClass", "newURI", "assertNotNull"]}, "focal_class": {"identifier": "ConfigURIFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CLASSPATH_PROTOCOL = \"classpath:\";", "modifier": "private static final", "type": "String", "declarator": "CLASSPATH_PROTOCOL = \"classpath:\"", "var_name": "CLASSPATH_PROTOCOL"}, {"original_string": "private static final String FILE_PROTOCOL = \"file:\";", "modifier": "private static final", "type": "String", "declarator": "FILE_PROTOCOL = \"file:\"", "var_name": "FILE_PROTOCOL"}, {"original_string": "private final transient ClassLoader classLoader;", "modifier": "private final transient", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}, {"original_string": "private final VariablesExpander expander;", "modifier": "private final", "type": "VariablesExpander", "declarator": "expander", "var_name": "expander"}], "methods": [{"identifier": "ConfigURIFactory", "parameters": "(ClassLoader classLoader, VariablesExpander expander)", "modifiers": "", "return": "", "signature": " ConfigURIFactory(ClassLoader classLoader, VariablesExpander expander)", "full_signature": "  ConfigURIFactory(ClassLoader classLoader, VariablesExpander expander)", "class_method_signature": "ConfigURIFactory.ConfigURIFactory(ClassLoader classLoader, VariablesExpander expander)", "testcase": false, "constructor": true}, {"identifier": "newURI", "parameters": "(String spec)", "modifiers": "", "return": "URI", "signature": "URI newURI(String spec)", "full_signature": " URI newURI(String spec)", "class_method_signature": "ConfigURIFactory.newURI(String spec)", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "(String path)", "modifiers": "private", "return": "String", "signature": "String expand(String path)", "full_signature": "private String expand(String path)", "class_method_signature": "ConfigURIFactory.expand(String path)", "testcase": false, "constructor": false}, {"identifier": "toClasspathURLSpec", "parameters": "(String name)", "modifiers": "", "return": "String", "signature": "String toClasspathURLSpec(String name)", "full_signature": " String toClasspathURLSpec(String name)", "class_method_signature": "ConfigURIFactory.toClasspathURLSpec(String name)", "testcase": false, "constructor": false}], "file": "owner/src/main/java/org/aeonbits/owner/ConfigURIFactory.java"}, "focal_method": {"identifier": "newURI", "parameters": "(String spec)", "modifiers": "", "return": "URI", "body": "URI newURI(String spec) throws URISyntaxException {\n        String expanded = expand(spec);\n        String fixed = fixBackslashesToSlashes(expanded);\n        if (fixed.startsWith(CLASSPATH_PROTOCOL)) {\n            String path = fixed.substring(CLASSPATH_PROTOCOL.length());\n            URL url = classLoader.getResource(path);\n            if (url == null)\n                return null;\n            return url.toURI();\n        } else if (fixed.startsWith(FILE_PROTOCOL)) {\n            // This check fixes the case where an environment variable has been\n            // specified for the path to the config file, but that environment\n            // variable is blank / undefined.\n            if ( fixed.equals(FILE_PROTOCOL) ) {\n                return new URI(\"\");\n            } else {\n                String path = fixSpacesToPercentTwenty(fixed);\n                return new URI(path);\n            }\n        } else {\n            return new URI(fixed);\n        }\n    }", "signature": "URI newURI(String spec)", "full_signature": " URI newURI(String spec)", "class_method_signature": "ConfigURIFactory.newURI(String spec)", "testcase": false, "constructor": false, "invocations": ["expand", "fixBackslashesToSlashes", "startsWith", "substring", "length", "getResource", "toURI", "startsWith", "equals", "fixSpacesToPercentTwenty"]}, "repository": {"repo_id": 7292204, "url": "https://github.com/lviggiano/owner", "stars": 723, "created": "12/23/2012 5:38:31 AM +00:00", "updates": "2020-01-21T03:13:31+00:00", "fork": "False", "license": "licensed"}}