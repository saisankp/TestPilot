{"test_class": {"identifier": "Step6GraphTransitivityCleanerTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/argumentation-convincingness-corpus/src/test/java/de/tudarmstadt/ukp/experiments/argumentation/convincingness/sampling/Step6GraphTransitivityCleanerTest.java"}, "test_case": {"identifier": "testMergeClusters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMergeClusters()\n            throws Exception\n    {\n        Set<Set<String>> c1 = new HashSet<>();\n        c1.add(new HashSet<>(Arrays.asList(\"1\", \"2\")));\n        c1.add(new HashSet<>(Arrays.asList(\"3\", \"4\")));\n        Set<Set<String>> merged1 = Step6GraphTransitivityCleaner.mergeClusters(c1);\n        assertEquals(2, merged1.size());\n\n        Set<Set<String>> c2 = new HashSet<>();\n        c2.add(new HashSet<>(Arrays.asList(\"1\", \"2\")));\n        c2.add(new HashSet<>(Arrays.asList(\"3\", \"4\")));\n        c2.add(new HashSet<>(Arrays.asList(\"5\", \"4\")));\n\n        Set<Set<String>> merged2 = Step6GraphTransitivityCleaner.mergeClusters(c2);\n        assertEquals(2, merged2.size());\n\n        Set<Set<String>> c3 = new HashSet<>();\n        c3.add(new HashSet<>(Arrays.asList(\"1\", \"5\")));\n        c3.add(new HashSet<>(Arrays.asList(\"3\", \"4\")));\n        c3.add(new HashSet<>(Arrays.asList(\"5\", \"4\")));\n\n        Set<Set<String>> merged3 = Step6GraphTransitivityCleaner.mergeClusters(c3);\n        assertEquals(1, merged3.size());\n    }", "signature": "void testMergeClusters()", "full_signature": "@Test public void testMergeClusters()", "class_method_signature": "Step6GraphTransitivityCleanerTest.testMergeClusters()", "testcase": true, "constructor": false, "invocations": ["add", "asList", "add", "asList", "mergeClusters", "assertEquals", "size", "add", "asList", "add", "asList", "add", "asList", "mergeClusters", "assertEquals", "size", "add", "asList", "add", "asList", "add", "asList", "mergeClusters", "assertEquals", "size"]}, "focal_class": {"identifier": "Step6GraphTransitivityCleaner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EDGE_PRIOR_WEIGHT = \"edgePriorWeight\";", "modifier": "private static final", "type": "String", "declarator": "EDGE_PRIOR_WEIGHT = \"edgePriorWeight\"", "var_name": "EDGE_PRIOR_WEIGHT"}, {"original_string": "private static final Sigmoid SIGMOID = new Sigmoid();", "modifier": "private static final", "type": "Sigmoid", "declarator": "SIGMOID = new Sigmoid()", "var_name": "SIGMOID"}, {"original_string": "private static final String WEIGHT = \"weight\";", "modifier": "private static final", "type": "String", "declarator": "WEIGHT = \"weight\"", "var_name": "WEIGHT"}, {"original_string": "private static final String LABEL_EQUAL = \"equal\";", "modifier": "private static final", "type": "String", "declarator": "LABEL_EQUAL = \"equal\"", "var_name": "LABEL_EQUAL"}, {"original_string": "public static final String NODE_ATTR_CLUSTERED_ARGS = \"attrClusteredArgs\";", "modifier": "public static final", "type": "String", "declarator": "NODE_ATTR_CLUSTERED_ARGS = \"attrClusteredArgs\"", "var_name": "NODE_ATTR_CLUSTERED_ARGS"}, {"original_string": "public static final double LAMBDA_PENALTY = 10.0;", "modifier": "public static final", "type": "double", "declarator": "LAMBDA_PENALTY = 10.0", "var_name": "LAMBDA_PENALTY"}, {"original_string": "private final ArgumentPairListSorter argumentPairListSorter;", "modifier": "private final", "type": "ArgumentPairListSorter", "declarator": "argumentPairListSorter", "var_name": "argumentPairListSorter"}, {"original_string": "private final boolean removeEqualEdgesParam;", "modifier": "private final", "type": "boolean", "declarator": "removeEqualEdgesParam", "var_name": "removeEqualEdgesParam"}], "methods": [{"identifier": "Step6GraphTransitivityCleaner", "parameters": "(ArgumentPairListSorter argumentPairListSorter,\n            boolean removeEqualEdgesParam)", "modifiers": "public", "return": "", "signature": " Step6GraphTransitivityCleaner(ArgumentPairListSorter argumentPairListSorter,\n            boolean removeEqualEdgesParam)", "full_signature": "public  Step6GraphTransitivityCleaner(ArgumentPairListSorter argumentPairListSorter,\n            boolean removeEqualEdgesParam)", "class_method_signature": "Step6GraphTransitivityCleaner.Step6GraphTransitivityCleaner(ArgumentPairListSorter argumentPairListSorter,\n            boolean removeEqualEdgesParam)", "testcase": false, "constructor": true}, {"identifier": "processSingleFile", "parameters": "(File file, File outputDir, String prefix,\n            Boolean collectGeneratedArgumentPairs)", "modifiers": "public", "return": "GraphCleaningResults", "signature": "GraphCleaningResults processSingleFile(File file, File outputDir, String prefix,\n            Boolean collectGeneratedArgumentPairs)", "full_signature": "public GraphCleaningResults processSingleFile(File file, File outputDir, String prefix,\n            Boolean collectGeneratedArgumentPairs)", "class_method_signature": "Step6GraphTransitivityCleaner.processSingleFile(File file, File outputDir, String prefix,\n            Boolean collectGeneratedArgumentPairs)", "testcase": false, "constructor": false}, {"identifier": "cleanCopyGraph", "parameters": "(Graph graph)", "modifiers": "public static", "return": "Graph", "signature": "Graph cleanCopyGraph(Graph graph)", "full_signature": "public static Graph cleanCopyGraph(Graph graph)", "class_method_signature": "Step6GraphTransitivityCleaner.cleanCopyGraph(Graph graph)", "testcase": false, "constructor": false}, {"identifier": "computeTransitivityScores", "parameters": "(Graph graph)", "modifiers": "private static", "return": "DescriptiveStatistics", "signature": "DescriptiveStatistics computeTransitivityScores(Graph graph)", "full_signature": "private static DescriptiveStatistics computeTransitivityScores(Graph graph)", "class_method_signature": "Step6GraphTransitivityCleaner.computeTransitivityScores(Graph graph)", "testcase": false, "constructor": false}, {"identifier": "findCyclesInGraph", "parameters": "(Graph graph)", "modifiers": "private static", "return": "List<List<Object>>", "signature": "List<List<Object>> findCyclesInGraph(Graph graph)", "full_signature": "private static List<List<Object>> findCyclesInGraph(Graph graph)", "class_method_signature": "Step6GraphTransitivityCleaner.findCyclesInGraph(Graph graph)", "testcase": false, "constructor": false}, {"identifier": "buildEquivalencyClusters", "parameters": "(\n            List<AnnotatedArgumentPair> argumentPairs)", "modifiers": "protected static", "return": "Set<Set<String>>", "signature": "Set<Set<String>> buildEquivalencyClusters(\n            List<AnnotatedArgumentPair> argumentPairs)", "full_signature": "protected static Set<Set<String>> buildEquivalencyClusters(\n            List<AnnotatedArgumentPair> argumentPairs)", "class_method_signature": "Step6GraphTransitivityCleaner.buildEquivalencyClusters(\n            List<AnnotatedArgumentPair> argumentPairs)", "testcase": false, "constructor": false}, {"identifier": "buildGraphFromArgumentPairs", "parameters": "(List<AnnotatedArgumentPair> argumentPairs)", "modifiers": "public static", "return": "Graph", "signature": "Graph buildGraphFromArgumentPairs(List<AnnotatedArgumentPair> argumentPairs)", "full_signature": "public static Graph buildGraphFromArgumentPairs(List<AnnotatedArgumentPair> argumentPairs)", "class_method_signature": "Step6GraphTransitivityCleaner.buildGraphFromArgumentPairs(List<AnnotatedArgumentPair> argumentPairs)", "testcase": false, "constructor": false}, {"identifier": "mergeClusters", "parameters": "(Set<Set<String>> equalClusters)", "modifiers": "public static", "return": "Set<Set<String>>", "signature": "Set<Set<String>> mergeClusters(Set<Set<String>> equalClusters)", "full_signature": "public static Set<Set<String>> mergeClusters(Set<Set<String>> equalClusters)", "class_method_signature": "Step6GraphTransitivityCleaner.mergeClusters(Set<Set<String>> equalClusters)", "testcase": false, "constructor": false}, {"identifier": "computeEdgeWeight", "parameters": "(AnnotatedArgumentPair annotatedArgumentPair,\n            double lambda)", "modifiers": "public static", "return": "double", "signature": "double computeEdgeWeight(AnnotatedArgumentPair annotatedArgumentPair,\n            double lambda)", "full_signature": "public static double computeEdgeWeight(AnnotatedArgumentPair annotatedArgumentPair,\n            double lambda)", "class_method_signature": "Step6GraphTransitivityCleaner.computeEdgeWeight(AnnotatedArgumentPair annotatedArgumentPair,\n            double lambda)", "testcase": false, "constructor": false}, {"identifier": "collectResults", "parameters": "(String[] args)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "void", "signature": "void collectResults(String[] args)", "full_signature": "@SuppressWarnings(\"unchecked\") public static void collectResults(String[] args)", "class_method_signature": "Step6GraphTransitivityCleaner.collectResults(String[] args)", "testcase": false, "constructor": false}, {"identifier": "printResultStatistics", "parameters": "(File xmlFile)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "void", "signature": "void printResultStatistics(File xmlFile)", "full_signature": "@SuppressWarnings(\"unchecked\") public static void printResultStatistics(File xmlFile)", "class_method_signature": "Step6GraphTransitivityCleaner.printResultStatistics(File xmlFile)", "testcase": false, "constructor": false}, {"identifier": "collectStatisticsOverGraphCleaningResults", "parameters": "(\n            Collection<GraphCleaningResults> results)", "modifiers": "public static", "return": "SortedMap<String, DescriptiveStatistics>", "signature": "SortedMap<String, DescriptiveStatistics> collectStatisticsOverGraphCleaningResults(\n            Collection<GraphCleaningResults> results)", "full_signature": "public static SortedMap<String, DescriptiveStatistics> collectStatisticsOverGraphCleaningResults(\n            Collection<GraphCleaningResults> results)", "class_method_signature": "Step6GraphTransitivityCleaner.collectStatisticsOverGraphCleaningResults(\n            Collection<GraphCleaningResults> results)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "@SuppressWarnings(\"unchecked\") public static void main(String[] args)", "class_method_signature": "Step6GraphTransitivityCleaner.main(String[] args)", "testcase": false, "constructor": false}], "file": "code/argumentation-convincingness-corpus/src/main/java/de/tudarmstadt/ukp/experiments/argumentation/convincingness/sampling/Step6GraphTransitivityCleaner.java"}, "focal_method": {"identifier": "mergeClusters", "parameters": "(Set<Set<String>> equalClusters)", "modifiers": "public static", "return": "Set<Set<String>>", "body": "public static Set<Set<String>> mergeClusters(Set<Set<String>> equalClusters)\n    {\n        // create a new undirected graph\n        Graph graph = new DefaultGraph(\"CC Test\");\n        graph.setAutoCreate(true);\n        graph.setStrict(false);\n\n        // add all \"edges\"; for each pair from each cluster\n        for (Set<String> cluster : equalClusters) {\n            List<String> clusterList = new ArrayList<>(cluster);\n\n            for (int i = 0; i < clusterList.size(); i++) {\n                for (int j = i + 1; j < clusterList.size(); j++) {\n                    // edge name\n                    String iName = clusterList.get(i);\n                    String jName = clusterList.get(j);\n\n                    List<String> names = Arrays.asList(iName, jName);\n                    Collections.sort(names);\n                    String edgeName = StringUtils.join(names, \"_\");\n\n                    graph.addEdge(edgeName, iName, jName);\n                }\n            }\n        }\n\n        // compute connected components\n        ConnectedComponents cc = new ConnectedComponents();\n        cc.init(graph);\n\n        Set<Set<String>> result = new HashSet<>();\n\n        cc.setCountAttribute(\"cluster\");\n        cc.compute();\n\n        //        System.out.println(cc.getConnectedComponentsCount());\n\n        // re-create clusters from all connected components\n        for (ConnectedComponents.ConnectedComponent component : cc) {\n            Set<String> cluster = new HashSet<>();\n            for (Node n : component) {\n                cluster.add(n.getId());\n            }\n            result.add(cluster);\n        }\n\n        //        System.out.println(result);\n\n        return result;\n    }", "signature": "Set<Set<String>> mergeClusters(Set<Set<String>> equalClusters)", "full_signature": "public static Set<Set<String>> mergeClusters(Set<Set<String>> equalClusters)", "class_method_signature": "Step6GraphTransitivityCleaner.mergeClusters(Set<Set<String>> equalClusters)", "testcase": false, "constructor": false, "invocations": ["setAutoCreate", "setStrict", "size", "size", "get", "get", "asList", "sort", "join", "addEdge", "init", "setCountAttribute", "compute", "add", "getId", "add"]}, "repository": {"repo_id": 59995075, "url": "https://github.com/UKPLab/acl2016-convincing-arguments", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 21, "size": 25140, "license": "licensed"}}