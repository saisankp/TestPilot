{"test_class": {"identifier": "GroupActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private QueryExecutor queryExecutor;", "modifier": "private", "type": "QueryExecutor", "declarator": "queryExecutor", "var_name": "queryExecutor"}, {"original_string": "private final ObjectMapper mapper = new ObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private MockElasticsearchServer elasticsearchServer;", "modifier": "private", "type": "MockElasticsearchServer", "declarator": "elasticsearchServer", "var_name": "elasticsearchServer"}, {"original_string": "private HazelcastInstance hazelcastInstance;", "modifier": "private", "type": "HazelcastInstance", "declarator": "hazelcastInstance", "var_name": "hazelcastInstance"}], "file": "real-time/foxtrot/foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/actions/GroupActionTest.java"}, "test_case": {"identifier": "testGroupActionSingleFieldNoFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGroupActionSingleFieldNoFilter() throws QueryStoreException, JsonProcessingException {\n        GroupRequest groupRequest = new GroupRequest();\n        groupRequest.setTable(TestUtils.TEST_TABLE_NAME);\n        groupRequest.setNesting(Arrays.asList(\"os\"));\n\n        Map<String, Object> response = Maps.newHashMap();\n        response.put(\"android\", 7L);\n        response.put(\"ios\", 4L);\n\n        GroupResponse actualResult = GroupResponse.class.cast(queryExecutor.execute(groupRequest));\n        assertEquals(response, actualResult.getResult());\n    }", "signature": "void testGroupActionSingleFieldNoFilter()", "full_signature": "@Test public void testGroupActionSingleFieldNoFilter()", "class_method_signature": "GroupActionTest.testGroupActionSingleFieldNoFilter()", "testcase": true, "constructor": false, "invocations": ["setTable", "setNesting", "asList", "newHashMap", "put", "put", "cast", "execute", "assertEquals", "getResult"]}, "focal_class": {"identifier": "GroupAction", "superclass": "extends Action<GroupRequest>", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(GroupAction.class.getSimpleName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(GroupAction.class.getSimpleName())", "var_name": "logger"}], "methods": [{"identifier": "GroupAction", "parameters": "(GroupRequest parameter,\n                       TableMetadataManager tableMetadataManager,\n                       DataStore dataStore,\n                       QueryStore queryStore,\n                       ElasticsearchConnection connection,\n                       String cacheToken)", "modifiers": "public", "return": "", "signature": " GroupAction(GroupRequest parameter,\n                       TableMetadataManager tableMetadataManager,\n                       DataStore dataStore,\n                       QueryStore queryStore,\n                       ElasticsearchConnection connection,\n                       String cacheToken)", "full_signature": "public  GroupAction(GroupRequest parameter,\n                       TableMetadataManager tableMetadataManager,\n                       DataStore dataStore,\n                       QueryStore queryStore,\n                       ElasticsearchConnection connection,\n                       String cacheToken)", "class_method_signature": "GroupAction.GroupAction(GroupRequest parameter,\n                       TableMetadataManager tableMetadataManager,\n                       DataStore dataStore,\n                       QueryStore queryStore,\n                       ElasticsearchConnection connection,\n                       String cacheToken)", "testcase": false, "constructor": true}, {"identifier": "getRequestCacheKey", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getRequestCacheKey()", "full_signature": "@Override protected String getRequestCacheKey()", "class_method_signature": "GroupAction.getRequestCacheKey()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(GroupRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse execute(GroupRequest parameter)", "full_signature": "@Override public ActionResponse execute(GroupRequest parameter)", "class_method_signature": "GroupAction.execute(GroupRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getMap", "parameters": "(List<String> fields, Aggregations aggregations)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> getMap(List<String> fields, Aggregations aggregations)", "full_signature": "private Map<String, Object> getMap(List<String> fields, Aggregations aggregations)", "class_method_signature": "GroupAction.getMap(List<String> fields, Aggregations aggregations)", "testcase": false, "constructor": false}], "file": "real-time/foxtrot/foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/actions/GroupAction.java"}, "focal_method": {"identifier": "execute", "parameters": "(GroupRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "body": "@Override\n    public ActionResponse execute(GroupRequest parameter) throws QueryStoreException {\n        parameter.setTable(ElasticsearchUtils.getValidTableName(parameter.getTable()));\n        if (null == parameter.getFilters()) {\n            parameter.setFilters(Lists.<Filter>newArrayList(new AnyFilter(parameter.getTable())));\n        }\n        if (parameter.getTable() == null) {\n            throw new QueryStoreException(QueryStoreException.ErrorCode.INVALID_REQUEST, \"Invalid Table\");\n        }\n        try {\n            SearchRequestBuilder query = getConnection().getClient().prepareSearch(ElasticsearchUtils.getIndices(\n                    parameter.getTable(), parameter));\n            TermsBuilder rootBuilder = null;\n            TermsBuilder termsBuilder = null;\n            for (String field : parameter.getNesting()) {\n                if (field == null || field.trim().isEmpty()) {\n                    throw new QueryStoreException(QueryStoreException.ErrorCode.INVALID_REQUEST, \"Illegal Nesting Parameters\");\n                }\n                if (null == termsBuilder) {\n                    termsBuilder = AggregationBuilders.terms(Utils.sanitizeFieldForAggregation(field)).field(field);\n                } else {\n                    TermsBuilder tempBuilder = AggregationBuilders.terms(Utils.sanitizeFieldForAggregation(field)).field(field);\n                    termsBuilder.subAggregation(tempBuilder);\n                    termsBuilder = tempBuilder;\n                }\n                termsBuilder.size(0);\n                if (null == rootBuilder) {\n                    rootBuilder = termsBuilder;\n                }\n            }\n            query.setQuery(new ElasticSearchQueryGenerator(FilterCombinerType.and)\n                    .genFilter(parameter.getFilters()))\n                    .setSearchType(SearchType.COUNT)\n                    .addAggregation(rootBuilder);\n            SearchResponse response = query.execute().actionGet();\n            List<String> fields = parameter.getNesting();\n            Aggregations aggregations = response.getAggregations();\n            // Check if any aggregation is present or not\n            if (aggregations == null) {\n                logger.error(\"Null response for Group. Request : \" + parameter.toString());\n                return new GroupResponse(Collections.<String, Object>emptyMap());\n            }\n            return new GroupResponse(getMap(fields, aggregations));\n        } catch (QueryStoreException ex) {\n            throw ex;\n        } catch (Exception e) {\n            logger.error(\"Error running grouping: \", e);\n            throw new QueryStoreException(QueryStoreException.ErrorCode.QUERY_EXECUTION_ERROR,\n                    \"Error running group query.\", e);\n        }\n    }", "signature": "ActionResponse execute(GroupRequest parameter)", "full_signature": "@Override public ActionResponse execute(GroupRequest parameter)", "class_method_signature": "GroupAction.execute(GroupRequest parameter)", "testcase": false, "constructor": false, "invocations": ["setTable", "getValidTableName", "getTable", "getFilters", "setFilters", "newArrayList", "getTable", "getTable", "prepareSearch", "getClient", "getConnection", "getIndices", "getTable", "getNesting", "isEmpty", "trim", "field", "terms", "sanitizeFieldForAggregation", "field", "terms", "sanitizeFieldForAggregation", "subAggregation", "size", "addAggregation", "setSearchType", "setQuery", "genFilter", "getFilters", "actionGet", "execute", "getNesting", "getAggregations", "error", "toString", "emptyMap", "getMap", "error"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}