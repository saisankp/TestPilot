{"test_class": {"identifier": "FlowableFlatMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/flowable/FlowableFlatMapTest.java"}, "test_case": {"identifier": "flatMapRangeMixedAsyncLoop", "parameters": "()", "modifiers": "@Test(timeout = 30000) public", "return": "void", "body": "@Test(timeout = 30000)\n    public void flatMapRangeMixedAsyncLoop() {\n        for (int i = 0; i < 2000; i++) {\n            if (i % 10 == 0) {\n                System.out.println(\"flatMapRangeAsyncLoop > \" + i);\n            }\n            TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n            Flowable.range(0, 1000)\n            .flatMap(new Function<Integer, Flowable<Integer>>() {\n                final Random rnd = new Random();\n                @Override\n                public Flowable<Integer> apply(Integer t) {\n                    Flowable<Integer> r = Flowable.just(t);\n                    if (rnd.nextBoolean()) {\n                        r = r.hide();\n                    }\n                    return r;\n                }\n            })\n            .observeOn(Schedulers.computation())\n            .subscribe(ts);\n\n            ts.awaitTerminalEvent(2500, TimeUnit.MILLISECONDS);\n            if (ts.completions() == 0) {\n                System.out.println(ts.valueCount());\n            }\n            ts.assertTerminated();\n            ts.assertNoErrors();\n            List<Integer> list = ts.values();\n            if (list.size() < 1000) {\n                Set<Integer> set = new HashSet<Integer>(list);\n                for (int j = 0; j < 1000; j++) {\n                    if (!set.contains(j)) {\n                        System.out.println(j + \" missing\");\n                    }\n                }\n            }\n            assertEquals(1000, list.size());\n        }\n    }", "signature": "void flatMapRangeMixedAsyncLoop()", "full_signature": "@Test(timeout = 30000) public void flatMapRangeMixedAsyncLoop()", "class_method_signature": "FlowableFlatMapTest.flatMapRangeMixedAsyncLoop()", "testcase": true, "constructor": false, "invocations": ["println", "subscribe", "observeOn", "flatMap", "range", "just", "nextBoolean", "hide", "computation", "awaitTerminalEvent", "completions", "println", "valueCount", "assertTerminated", "assertNoErrors", "values", "size", "contains", "println", "assertEquals", "size"]}, "focal_class": {"identifier": "FlowableFlatMap", "superclass": "extends AbstractFlowableWithUpstream<T, U>", "interfaces": "", "fields": [{"original_string": "final Function<? super T, ? extends Publisher<? extends U>> mapper;", "modifier": "final", "type": "Function<? super T, ? extends Publisher<? extends U>>", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "final boolean delayErrors;", "modifier": "final", "type": "boolean", "declarator": "delayErrors", "var_name": "delayErrors"}, {"original_string": "final int maxConcurrency;", "modifier": "final", "type": "int", "declarator": "maxConcurrency", "var_name": "maxConcurrency"}, {"original_string": "final int bufferSize;", "modifier": "final", "type": "int", "declarator": "bufferSize", "var_name": "bufferSize"}], "methods": [{"identifier": "FlowableFlatMap", "parameters": "(Flowable<T> source,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "modifiers": "public", "return": "", "signature": " FlowableFlatMap(Flowable<T> source,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "full_signature": "public  FlowableFlatMap(Flowable<T> source,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "class_method_signature": "FlowableFlatMap.FlowableFlatMap(Flowable<T> source,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "testcase": false, "constructor": true}, {"identifier": "subscribeActual", "parameters": "(Subscriber<? super U> s)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(Subscriber<? super U> s)", "full_signature": "@Override protected void subscribeActual(Subscriber<? super U> s)", "class_method_signature": "FlowableFlatMap.subscribeActual(Subscriber<? super U> s)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "modifiers": "public static", "return": "FlowableSubscriber<T>", "signature": "FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "full_signature": "public static FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "class_method_signature": "FlowableFlatMap.subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlatMap.java"}, "focal_method": {"identifier": "subscribe", "parameters": "(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "modifiers": "public static", "return": "FlowableSubscriber<T>", "body": "public static <T, U> FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize) {\n        return new MergeSubscriber<T, U>(s, mapper, delayErrors, maxConcurrency, bufferSize);\n    }", "signature": "FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "full_signature": "public static FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "class_method_signature": "FlowableFlatMap.subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}