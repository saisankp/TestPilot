{"test_class": {"identifier": "ScenarioVisitorTest", "superclass": "extends VisitorTest", "interfaces": "", "fields": [{"original_string": "private ScenarioVisitor scenarioVisitor;", "modifier": "private", "type": "ScenarioVisitor", "declarator": "scenarioVisitor", "var_name": "scenarioVisitor"}, {"original_string": "private ScenarioDetailsPageRenderer scenarioDetailsPageRenderer;", "modifier": "private", "type": "ScenarioDetailsPageRenderer", "declarator": "scenarioDetailsPageRenderer", "var_name": "scenarioDetailsPageRenderer"}], "file": "plugin-code/src/test/java/com/trivago/cluecumber/rendering/pages/visitors/ScenarioVisitorTest.java"}, "test_case": {"identifier": "visitTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void visitTest() throws CluecumberPluginException {\n        when(allScenariosPageRenderer.getRenderedContent(any(), any())).thenReturn(\"MyRenderedScenarios\");\n        when(scenarioDetailsPageRenderer.getRenderedContent(any(), any())).thenReturn(\"MyRenderedScenarioDetails\");\n        scenarioVisitor.visit(getAllScenarioPageCollection());\n        verify(fileIo, times(1))\n                .writeContentToFile(\"MyRenderedScenarios\", \"dummyPath/pages/scenario-summary.html\");\n        verify(fileIo, times(1))\n                .writeContentToFile(\"MyRenderedScenarios\", \"dummyPath/pages/scenario-sequence.html\");\n        verify(fileIo, times(1))\n                .writeContentToFile(\"MyRenderedScenarioDetails\", \"dummyPath/pages/scenario-detail/scenario_0.html\");\n    }", "signature": "void visitTest()", "full_signature": "@Test public void visitTest()", "class_method_signature": "ScenarioVisitorTest.visitTest()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getRenderedContent", "any", "any", "thenReturn", "when", "getRenderedContent", "any", "any", "visit", "getAllScenarioPageCollection", "writeContentToFile", "verify", "times", "writeContentToFile", "verify", "times", "writeContentToFile", "verify", "times"]}, "focal_class": {"identifier": "ScenarioVisitor", "superclass": "", "interfaces": "implements PageVisitor", "fields": [{"original_string": "private final FileIO fileIO;", "modifier": "private final", "type": "FileIO", "declarator": "fileIO", "var_name": "fileIO"}, {"original_string": "private final TemplateEngine templateEngine;", "modifier": "private final", "type": "TemplateEngine", "declarator": "templateEngine", "var_name": "templateEngine"}, {"original_string": "private final PropertyManager propertyManager;", "modifier": "private final", "type": "PropertyManager", "declarator": "propertyManager", "var_name": "propertyManager"}, {"original_string": "private final AllScenariosPageRenderer allScenariosPageRenderer;", "modifier": "private final", "type": "AllScenariosPageRenderer", "declarator": "allScenariosPageRenderer", "var_name": "allScenariosPageRenderer"}, {"original_string": "private final ScenarioDetailsPageRenderer scenarioDetailsPageRenderer;", "modifier": "private final", "type": "ScenarioDetailsPageRenderer", "declarator": "scenarioDetailsPageRenderer", "var_name": "scenarioDetailsPageRenderer"}], "methods": [{"identifier": "ScenarioVisitor", "parameters": "(\n            final FileIO fileIO,\n            final TemplateEngine templateEngine,\n            final PropertyManager propertyManager,\n            final AllScenariosPageRenderer allScenariosPageRenderer,\n            final ScenarioDetailsPageRenderer scenarioDetailsPageRenderer\n    )", "modifiers": "@Inject public", "return": "", "signature": " ScenarioVisitor(\n            final FileIO fileIO,\n            final TemplateEngine templateEngine,\n            final PropertyManager propertyManager,\n            final AllScenariosPageRenderer allScenariosPageRenderer,\n            final ScenarioDetailsPageRenderer scenarioDetailsPageRenderer\n    )", "full_signature": "@Inject public  ScenarioVisitor(\n            final FileIO fileIO,\n            final TemplateEngine templateEngine,\n            final PropertyManager propertyManager,\n            final AllScenariosPageRenderer allScenariosPageRenderer,\n            final ScenarioDetailsPageRenderer scenarioDetailsPageRenderer\n    )", "class_method_signature": "ScenarioVisitor.ScenarioVisitor(\n            final FileIO fileIO,\n            final TemplateEngine templateEngine,\n            final PropertyManager propertyManager,\n            final AllScenariosPageRenderer allScenariosPageRenderer,\n            final ScenarioDetailsPageRenderer scenarioDetailsPageRenderer\n    )", "testcase": false, "constructor": true}, {"identifier": "visit", "parameters": "(final AllScenariosPageCollection allScenariosPageCollection)", "modifiers": "@Override public", "return": "void", "signature": "void visit(final AllScenariosPageCollection allScenariosPageCollection)", "full_signature": "@Override public void visit(final AllScenariosPageCollection allScenariosPageCollection)", "class_method_signature": "ScenarioVisitor.visit(final AllScenariosPageCollection allScenariosPageCollection)", "testcase": false, "constructor": false}], "file": "plugin-code/src/main/java/com/trivago/cluecumber/rendering/pages/visitors/ScenarioVisitor.java"}, "focal_method": {"identifier": "visit", "parameters": "(final AllScenariosPageCollection allScenariosPageCollection)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void visit(final AllScenariosPageCollection allScenariosPageCollection) throws CluecumberPluginException {\n        // All scenarios page\n        fileIO.writeContentToFile(\n                allScenariosPageRenderer.getRenderedContent(allScenariosPageCollection,\n                        templateEngine.getTemplate(ALL_SCENARIOS)),\n                propertyManager.getGeneratedHtmlReportDirectory() + \"/\" + PluginSettings.PAGES_DIRECTORY + \"/\" +\n                        PluginSettings.SCENARIO_SUMMARY_PAGE_PATH + PluginSettings.HTML_FILE_EXTENSION);\n\n        // Scenario sequence page\n        fileIO.writeContentToFile(\n                allScenariosPageRenderer.getRenderedContent(\n                        allScenariosPageCollection,\n                        templateEngine.getTemplate(SCENARIO_SEQUENCE)\n                ),\n                propertyManager.getGeneratedHtmlReportDirectory() + \"/\" + PluginSettings.PAGES_DIRECTORY + \"/\" +\n                        PluginSettings.SCENARIO_SEQUENCE_PAGE_PATH + PluginSettings.HTML_FILE_EXTENSION);\n\n        // Scenario detail pages\n        ScenarioDetailsPageCollection scenarioDetailsPageCollection;\n        for (Report report : allScenariosPageCollection.getReports()) {\n            for (Element element : report.getElements()) {\n                scenarioDetailsPageCollection = new ScenarioDetailsPageCollection(element, propertyManager.getCustomPageTitle());\n                fileIO.writeContentToFile(\n                        scenarioDetailsPageRenderer.getRenderedContent(\n                                scenarioDetailsPageCollection,\n                                templateEngine.getTemplate(SCENARIO_DETAILS)\n                        ),\n                        propertyManager.getGeneratedHtmlReportDirectory() + \"/\" +\n                                PluginSettings.PAGES_DIRECTORY + PluginSettings.SCENARIO_DETAIL_PAGE_FRAGMENT +\n                                element.getScenarioIndex() + PluginSettings.HTML_FILE_EXTENSION);\n            }\n        }\n    }", "signature": "void visit(final AllScenariosPageCollection allScenariosPageCollection)", "full_signature": "@Override public void visit(final AllScenariosPageCollection allScenariosPageCollection)", "class_method_signature": "ScenarioVisitor.visit(final AllScenariosPageCollection allScenariosPageCollection)", "testcase": false, "constructor": false, "invocations": ["writeContentToFile", "getRenderedContent", "getTemplate", "getGeneratedHtmlReportDirectory", "writeContentToFile", "getRenderedContent", "getTemplate", "getGeneratedHtmlReportDirectory", "getReports", "getElements", "getCustomPageTitle", "writeContentToFile", "getRenderedContent", "getTemplate", "getGeneratedHtmlReportDirectory", "getScenarioIndex"]}, "repository": {"repo_id": 109986674, "url": "https://github.com/trivago/cluecumber-report-plugin", "stars": 124, "created": "11/8/2017 2:30:19 PM +00:00", "updates": "2020-01-27T12:00:16+00:00", "fork": "False", "license": "licensed"}}