{"test_class": {"identifier": "AggregateFunctionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Table table;", "modifier": "private", "type": "Table", "declarator": "table", "var_name": "table"}], "file": "core/src/test/java/tech/tablesaw/aggregate/AggregateFunctionsTest.java"}, "test_case": {"identifier": "testPercentileFunctions", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testPercentileFunctions() {\n    double[] values = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    DoubleColumn c = DoubleColumn.create(\"test\", values);\n    c.appendCell(\"\");\n\n    assertEquals(1, countMissing.summarize(c), 0.0001);\n    assertEquals(11, countWithMissing.summarize(c), 0.0001);\n\n    assertEquals(StatUtils.percentile(values, 90), percentile90.summarize(c), 0.0001);\n    assertEquals(StatUtils.percentile(values, 95), percentile95.summarize(c), 0.0001);\n    assertEquals(StatUtils.percentile(values, 99), percentile99.summarize(c), 0.0001);\n\n    assertEquals(10, countUnique.summarize(c), 0.0001);\n  }", "signature": "void testPercentileFunctions()", "full_signature": "@Test void testPercentileFunctions()", "class_method_signature": "AggregateFunctionsTest.testPercentileFunctions()", "testcase": true, "constructor": false, "invocations": ["create", "appendCell", "assertEquals", "summarize", "assertEquals", "summarize", "assertEquals", "percentile", "summarize", "assertEquals", "percentile", "summarize", "assertEquals", "percentile", "summarize", "assertEquals", "summarize"]}, "focal_class": {"identifier": "AggregateFunctions", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final DateTimeAggregateFunction earliestDateTime =\n      new DateTimeAggregateFunction(\"Earliest Date-Time\") {\n\n        @Override\n        public LocalDateTime summarize(DateTimeColumn column) {\n          return column.min();\n        }\n      };", "modifier": "public static final", "type": "DateTimeAggregateFunction", "declarator": "earliestDateTime =\n      new DateTimeAggregateFunction(\"Earliest Date-Time\") {\n\n        @Override\n        public LocalDateTime summarize(DateTimeColumn column) {\n          return column.min();\n        }\n      }", "var_name": "earliestDateTime"}, {"original_string": "public static final DateAggregateFunction earliestDate =\n      new DateAggregateFunction(\"Earliest Date\") {\n\n        @Override\n        public LocalDate summarize(DateColumn column) {\n          return column.min();\n        }\n      };", "modifier": "public static final", "type": "DateAggregateFunction", "declarator": "earliestDate =\n      new DateAggregateFunction(\"Earliest Date\") {\n\n        @Override\n        public LocalDate summarize(DateColumn column) {\n          return column.min();\n        }\n      }", "var_name": "earliestDate"}, {"original_string": "public static final DateAggregateFunction latestDate =\n      new DateAggregateFunction(\"Latest Date\") {\n\n        @Override\n        public LocalDate summarize(DateColumn column) {\n          return column.max();\n        }\n      };", "modifier": "public static final", "type": "DateAggregateFunction", "declarator": "latestDate =\n      new DateAggregateFunction(\"Latest Date\") {\n\n        @Override\n        public LocalDate summarize(DateColumn column) {\n          return column.max();\n        }\n      }", "var_name": "latestDate"}, {"original_string": "public static final DateTimeAggregateFunction latestDateTime =\n      new DateTimeAggregateFunction(\"Latest Date-Time\") {\n\n        @Override\n        public LocalDateTime summarize(DateTimeColumn column) {\n          return column.max();\n        }\n      };", "modifier": "public static final", "type": "DateTimeAggregateFunction", "declarator": "latestDateTime =\n      new DateTimeAggregateFunction(\"Latest Date-Time\") {\n\n        @Override\n        public LocalDateTime summarize(DateTimeColumn column) {\n          return column.max();\n        }\n      }", "var_name": "latestDateTime"}, {"original_string": "public static final InstantAggregateFunction maxInstant =\n      new InstantAggregateFunction(\"Max Instant\") {\n        @Override\n        public Instant summarize(InstantColumn column) {\n          return column.max();\n        }\n      };", "modifier": "public static final", "type": "InstantAggregateFunction", "declarator": "maxInstant =\n      new InstantAggregateFunction(\"Max Instant\") {\n        @Override\n        public Instant summarize(InstantColumn column) {\n          return column.max();\n        }\n      }", "var_name": "maxInstant"}, {"original_string": "public static final InstantAggregateFunction minInstant =\n      new InstantAggregateFunction(\"Min Instant\") {\n        @Override\n        public Instant summarize(InstantColumn column) {\n          return column.min();\n        }\n      };", "modifier": "public static final", "type": "InstantAggregateFunction", "declarator": "minInstant =\n      new InstantAggregateFunction(\"Min Instant\") {\n        @Override\n        public Instant summarize(InstantColumn column) {\n          return column.min();\n        }\n      }", "var_name": "minInstant"}, {"original_string": "public static final BooleanCountFunction countTrue =\n      new BooleanCountFunction(\"Number True\") {\n\n        @Override\n        public Integer summarize(BooleanColumn column) {\n          return column.countTrue();\n        }\n      };", "modifier": "public static final", "type": "BooleanCountFunction", "declarator": "countTrue =\n      new BooleanCountFunction(\"Number True\") {\n\n        @Override\n        public Integer summarize(BooleanColumn column) {\n          return column.countTrue();\n        }\n      }", "var_name": "countTrue"}, {"original_string": "public static final BooleanAggregateFunction allTrue =\n      new BooleanAggregateFunction(\"All True\") {\n\n        @Override\n        public Boolean summarize(BooleanColumn column) {\n          return column.all();\n        }\n      };", "modifier": "public static final", "type": "BooleanAggregateFunction", "declarator": "allTrue =\n      new BooleanAggregateFunction(\"All True\") {\n\n        @Override\n        public Boolean summarize(BooleanColumn column) {\n          return column.all();\n        }\n      }", "var_name": "allTrue"}, {"original_string": "public static final BooleanAggregateFunction anyTrue =\n      new BooleanAggregateFunction(\"Any True\") {\n\n        @Override\n        public Boolean summarize(BooleanColumn column) {\n          return column.any();\n        }\n      };", "modifier": "public static final", "type": "BooleanAggregateFunction", "declarator": "anyTrue =\n      new BooleanAggregateFunction(\"Any True\") {\n\n        @Override\n        public Boolean summarize(BooleanColumn column) {\n          return column.any();\n        }\n      }", "var_name": "anyTrue"}, {"original_string": "public static final BooleanAggregateFunction noneTrue =\n      new BooleanAggregateFunction(\"None True\") {\n\n        @Override\n        public Boolean summarize(BooleanColumn column) {\n          return column.none();\n        }\n      };", "modifier": "public static final", "type": "BooleanAggregateFunction", "declarator": "noneTrue =\n      new BooleanAggregateFunction(\"None True\") {\n\n        @Override\n        public Boolean summarize(BooleanColumn column) {\n          return column.none();\n        }\n      }", "var_name": "noneTrue"}, {"original_string": "public static final BooleanCountFunction countFalse =\n      new BooleanCountFunction(\"Number False\") {\n        @Override\n        public Integer summarize(BooleanColumn column) {\n          return (column).countFalse();\n        }\n      };", "modifier": "public static final", "type": "BooleanCountFunction", "declarator": "countFalse =\n      new BooleanCountFunction(\"Number False\") {\n        @Override\n        public Integer summarize(BooleanColumn column) {\n          return (column).countFalse();\n        }\n      }", "var_name": "countFalse"}, {"original_string": "public static final BooleanNumericFunction proportionTrue =\n      new BooleanNumericFunction(\"Proportion True\") {\n        @Override\n        public Double summarize(BooleanColumn column) {\n          return (column).proportionTrue();\n        }\n      };", "modifier": "public static final", "type": "BooleanNumericFunction", "declarator": "proportionTrue =\n      new BooleanNumericFunction(\"Proportion True\") {\n        @Override\n        public Double summarize(BooleanColumn column) {\n          return (column).proportionTrue();\n        }\n      }", "var_name": "proportionTrue"}, {"original_string": "public static final BooleanNumericFunction proportionFalse =\n      new BooleanNumericFunction(\"Proportion False\") {\n        @Override\n        public Double summarize(BooleanColumn column) {\n          return (column).proportionFalse();\n        }\n      };", "modifier": "public static final", "type": "BooleanNumericFunction", "declarator": "proportionFalse =\n      new BooleanNumericFunction(\"Proportion False\") {\n        @Override\n        public Double summarize(BooleanColumn column) {\n          return (column).proportionFalse();\n        }\n      }", "var_name": "proportionFalse"}, {"original_string": "public static final NumericAggregateFunction first =\n      new NumericAggregateFunction(\"First\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return column.isEmpty() ? DoubleColumnType.missingValueIndicator() : column.getDouble(0);\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "first =\n      new NumericAggregateFunction(\"First\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return column.isEmpty() ? DoubleColumnType.missingValueIndicator() : column.getDouble(0);\n        }\n      }", "var_name": "first"}, {"original_string": "public static final NumericAggregateFunction last =\n      new NumericAggregateFunction(\"Last\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return column.isEmpty()\n              ? DoubleColumnType.missingValueIndicator()\n              : column.getDouble(column.size() - 1);\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "last =\n      new NumericAggregateFunction(\"Last\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return column.isEmpty()\n              ? DoubleColumnType.missingValueIndicator()\n              : column.getDouble(column.size() - 1);\n        }\n      }", "var_name": "last"}, {"original_string": "public static final NumericAggregateFunction change =\n      new NumericAggregateFunction(\"Change\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return column.size() < 2\n              ? DoubleColumnType.missingValueIndicator()\n              : column.getDouble(column.size() - 1) - column.getDouble(0);\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "change =\n      new NumericAggregateFunction(\"Change\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return column.size() < 2\n              ? DoubleColumnType.missingValueIndicator()\n              : column.getDouble(column.size() - 1) - column.getDouble(0);\n        }\n      }", "var_name": "change"}, {"original_string": "public static final NumericAggregateFunction pctChange =\n      new NumericAggregateFunction(\"Percent Change\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return column.size() < 2\n              ? DoubleColumnType.missingValueIndicator()\n              : (column.getDouble(column.size() - 1) - column.getDouble(0)) / column.getDouble(0);\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "pctChange =\n      new NumericAggregateFunction(\"Percent Change\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return column.size() < 2\n              ? DoubleColumnType.missingValueIndicator()\n              : (column.getDouble(column.size() - 1) - column.getDouble(0)) / column.getDouble(0);\n        }\n      }", "var_name": "pctChange"}, {"original_string": "public static final CountFunction countNonMissing =\n      new CountFunction(\"Count\") {\n\n        @Override\n        public Integer summarize(Column<?> column) {\n          return column.size() - column.countMissing();\n        }\n      };", "modifier": "public static final", "type": "CountFunction", "declarator": "countNonMissing =\n      new CountFunction(\"Count\") {\n\n        @Override\n        public Integer summarize(Column<?> column) {\n          return column.size() - column.countMissing();\n        }\n      }", "var_name": "countNonMissing"}, {"original_string": "public static final CountFunction count = countNonMissing;", "modifier": "public static final", "type": "CountFunction", "declarator": "count = countNonMissing", "var_name": "count"}, {"original_string": "public static final CountFunction countMissing =\n      new CountFunction(\"Missing Values\") {\n\n        @Override\n        public Integer summarize(Column<?> column) {\n          return column.countMissing();\n        }\n      };", "modifier": "public static final", "type": "CountFunction", "declarator": "countMissing =\n      new CountFunction(\"Missing Values\") {\n\n        @Override\n        public Integer summarize(Column<?> column) {\n          return column.countMissing();\n        }\n      }", "var_name": "countMissing"}, {"original_string": "public static final CountFunction countUnique =\n      new CountFunction(\"Count Unique\") {\n\n        @Override\n        public Integer summarize(Column<?> doubles) {\n          return doubles.unique().removeMissing().size();\n        }\n      };", "modifier": "public static final", "type": "CountFunction", "declarator": "countUnique =\n      new CountFunction(\"Count Unique\") {\n\n        @Override\n        public Integer summarize(Column<?> doubles) {\n          return doubles.unique().removeMissing().size();\n        }\n      }", "var_name": "countUnique"}, {"original_string": "public static final NumericAggregateFunction mean =\n      new NumericAggregateFunction(\"Mean\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return StatUtils.mean(removeMissing(column));\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "mean =\n      new NumericAggregateFunction(\"Mean\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return StatUtils.mean(removeMissing(column));\n        }\n      }", "var_name": "mean"}, {"original_string": "public static final NumericAggregateFunction cv =\n      new NumericAggregateFunction(\"CV\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          double[] col = removeMissing(column);\n          return Math.sqrt(StatUtils.variance(col)) / StatUtils.mean(col);\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "cv =\n      new NumericAggregateFunction(\"CV\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          double[] col = removeMissing(column);\n          return Math.sqrt(StatUtils.variance(col)) / StatUtils.mean(col);\n        }\n      }", "var_name": "cv"}, {"original_string": "public static final NumericAggregateFunction sum =\n      new NumericAggregateFunction(\"Sum\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return StatUtils.sum(removeMissing(column));\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "sum =\n      new NumericAggregateFunction(\"Sum\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return StatUtils.sum(removeMissing(column));\n        }\n      }", "var_name": "sum"}, {"original_string": "public static final NumericAggregateFunction median =\n      new NumericAggregateFunction(\"Median\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return percentile(column, 50.0);\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "median =\n      new NumericAggregateFunction(\"Median\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return percentile(column, 50.0);\n        }\n      }", "var_name": "median"}, {"original_string": "public static final CountFunction countWithMissing =\n      new CountFunction(\"Count (incl. missing)\") {\n\n        @Override\n        public Integer summarize(Column<?> column) {\n          return column.size();\n        }\n      };", "modifier": "public static final", "type": "CountFunction", "declarator": "countWithMissing =\n      new CountFunction(\"Count (incl. missing)\") {\n\n        @Override\n        public Integer summarize(Column<?> column) {\n          return column.size();\n        }\n      }", "var_name": "countWithMissing"}, {"original_string": "public static final NumericAggregateFunction quartile1 =\n      new NumericAggregateFunction(\"First Quartile\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return percentile(column, 25.0);\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "quartile1 =\n      new NumericAggregateFunction(\"First Quartile\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return percentile(column, 25.0);\n        }\n      }", "var_name": "quartile1"}, {"original_string": "public static final NumericAggregateFunction quartile3 =\n      new NumericAggregateFunction(\"Third Quartile\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return percentile(column, 75.0);\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "quartile3 =\n      new NumericAggregateFunction(\"Third Quartile\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return percentile(column, 75.0);\n        }\n      }", "var_name": "quartile3"}, {"original_string": "public static final NumericAggregateFunction percentile90 =\n      new NumericAggregateFunction(\"90th Percentile\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return percentile(column, 90.0);\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "percentile90 =\n      new NumericAggregateFunction(\"90th Percentile\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return percentile(column, 90.0);\n        }\n      }", "var_name": "percentile90"}, {"original_string": "public static final NumericAggregateFunction percentile95 =\n      new NumericAggregateFunction(\"95th Percentile\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return percentile(column, 95.0);\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "percentile95 =\n      new NumericAggregateFunction(\"95th Percentile\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return percentile(column, 95.0);\n        }\n      }", "var_name": "percentile95"}, {"original_string": "public static final NumericAggregateFunction percentile99 =\n      new NumericAggregateFunction(\"99th Percentile\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return percentile(column, 99.0);\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "percentile99 =\n      new NumericAggregateFunction(\"99th Percentile\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return percentile(column, 99.0);\n        }\n      }", "var_name": "percentile99"}, {"original_string": "public static final NumericAggregateFunction range =\n      new NumericAggregateFunction(\"Range\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          double[] data = removeMissing(column);\n          return StatUtils.max(data) - StatUtils.min(data);\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "range =\n      new NumericAggregateFunction(\"Range\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          double[] data = removeMissing(column);\n          return StatUtils.max(data) - StatUtils.min(data);\n        }\n      }", "var_name": "range"}, {"original_string": "public static final NumericAggregateFunction min =\n      new NumericAggregateFunction(\"Min\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return StatUtils.min(removeMissing(column));\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "min =\n      new NumericAggregateFunction(\"Min\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return StatUtils.min(removeMissing(column));\n        }\n      }", "var_name": "min"}, {"original_string": "public static final NumericAggregateFunction max =\n      new NumericAggregateFunction(\"Max\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return StatUtils.max(removeMissing(column));\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "max =\n      new NumericAggregateFunction(\"Max\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return StatUtils.max(removeMissing(column));\n        }\n      }", "var_name": "max"}, {"original_string": "public static final NumericAggregateFunction product =\n      new NumericAggregateFunction(\"Product\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return StatUtils.product(removeMissing(column));\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "product =\n      new NumericAggregateFunction(\"Product\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return StatUtils.product(removeMissing(column));\n        }\n      }", "var_name": "product"}, {"original_string": "public static final NumericAggregateFunction geometricMean =\n      new NumericAggregateFunction(\"Geometric Mean\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return StatUtils.geometricMean(removeMissing(column));\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "geometricMean =\n      new NumericAggregateFunction(\"Geometric Mean\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return StatUtils.geometricMean(removeMissing(column));\n        }\n      }", "var_name": "geometricMean"}, {"original_string": "public static final NumericAggregateFunction populationVariance =\n      new NumericAggregateFunction(\"Population Variance\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return StatUtils.populationVariance(removeMissing(column));\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "populationVariance =\n      new NumericAggregateFunction(\"Population Variance\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return StatUtils.populationVariance(removeMissing(column));\n        }\n      }", "var_name": "populationVariance"}, {"original_string": "public static final NumericAggregateFunction quadraticMean =\n      new NumericAggregateFunction(\"Quadratic Mean\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return new DescriptiveStatistics(removeMissing(column)).getQuadraticMean();\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "quadraticMean =\n      new NumericAggregateFunction(\"Quadratic Mean\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return new DescriptiveStatistics(removeMissing(column)).getQuadraticMean();\n        }\n      }", "var_name": "quadraticMean"}, {"original_string": "public static final NumericAggregateFunction kurtosis =\n      new NumericAggregateFunction(\"Kurtosis\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          double[] data = removeMissing(column);\n          return new Kurtosis().evaluate(data, 0, data.length);\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "kurtosis =\n      new NumericAggregateFunction(\"Kurtosis\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          double[] data = removeMissing(column);\n          return new Kurtosis().evaluate(data, 0, data.length);\n        }\n      }", "var_name": "kurtosis"}, {"original_string": "public static final NumericAggregateFunction skewness =\n      new NumericAggregateFunction(\"Skewness\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          double[] data = removeMissing(column);\n          return new Skewness().evaluate(data, 0, data.length);\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "skewness =\n      new NumericAggregateFunction(\"Skewness\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          double[] data = removeMissing(column);\n          return new Skewness().evaluate(data, 0, data.length);\n        }\n      }", "var_name": "skewness"}, {"original_string": "public static final NumericAggregateFunction sumOfSquares =\n      new NumericAggregateFunction(\"Sum of Squares\") {\n\n        @Override\n        public String functionName() {\n          return \"Sum of Squares\";\n        }\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return StatUtils.sumSq(removeMissing(column));\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "sumOfSquares =\n      new NumericAggregateFunction(\"Sum of Squares\") {\n\n        @Override\n        public String functionName() {\n          return \"Sum of Squares\";\n        }\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return StatUtils.sumSq(removeMissing(column));\n        }\n      }", "var_name": "sumOfSquares"}, {"original_string": "public static final NumericAggregateFunction sumOfLogs =\n      new NumericAggregateFunction(\"Sum of Logs\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return StatUtils.sumLog(removeMissing(column));\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "sumOfLogs =\n      new NumericAggregateFunction(\"Sum of Logs\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return StatUtils.sumLog(removeMissing(column));\n        }\n      }", "var_name": "sumOfLogs"}, {"original_string": "public static final NumericAggregateFunction variance =\n      new NumericAggregateFunction(\"Variance\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          double[] values = removeMissing(column);\n          return StatUtils.variance(values);\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "variance =\n      new NumericAggregateFunction(\"Variance\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          double[] values = removeMissing(column);\n          return StatUtils.variance(values);\n        }\n      }", "var_name": "variance"}, {"original_string": "public static final NumericAggregateFunction stdDev =\n      new NumericAggregateFunction(\"Std. Deviation\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return Math.sqrt(StatUtils.variance(removeMissing(column)));\n        }\n      };", "modifier": "public static final", "type": "NumericAggregateFunction", "declarator": "stdDev =\n      new NumericAggregateFunction(\"Std. Deviation\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> column) {\n          return Math.sqrt(StatUtils.variance(removeMissing(column)));\n        }\n      }", "var_name": "stdDev"}, {"original_string": "@Deprecated public static final NumericAggregateFunction standardDeviation = stdDev;", "modifier": "@Deprecated public static final", "type": "NumericAggregateFunction", "declarator": "standardDeviation = stdDev", "var_name": "standardDeviation"}], "methods": [{"identifier": "AggregateFunctions", "parameters": "()", "modifiers": "private", "return": "", "signature": " AggregateFunctions()", "full_signature": "private  AggregateFunctions()", "class_method_signature": "AggregateFunctions.AggregateFunctions()", "testcase": false, "constructor": true}, {"identifier": "percentile", "parameters": "(NumericColumn<?> data, Double percentile)", "modifiers": "public static", "return": "Double", "signature": "Double percentile(NumericColumn<?> data, Double percentile)", "full_signature": "public static Double percentile(NumericColumn<?> data, Double percentile)", "class_method_signature": "AggregateFunctions.percentile(NumericColumn<?> data, Double percentile)", "testcase": false, "constructor": false}, {"identifier": "removeMissing", "parameters": "(NumericColumn<?> column)", "modifiers": "private static", "return": "double[]", "signature": "double[] removeMissing(NumericColumn<?> column)", "full_signature": "private static double[] removeMissing(NumericColumn<?> column)", "class_method_signature": "AggregateFunctions.removeMissing(NumericColumn<?> column)", "testcase": false, "constructor": false}, {"identifier": "meanDifference", "parameters": "(NumericColumn<?> column1, NumericColumn<?> column2)", "modifiers": "public static", "return": "Double", "signature": "Double meanDifference(NumericColumn<?> column1, NumericColumn<?> column2)", "full_signature": "public static Double meanDifference(NumericColumn<?> column1, NumericColumn<?> column2)", "class_method_signature": "AggregateFunctions.meanDifference(NumericColumn<?> column1, NumericColumn<?> column2)", "testcase": false, "constructor": false}, {"identifier": "sumDifference", "parameters": "(NumericColumn<?> column1, NumericColumn<?> column2)", "modifiers": "public static", "return": "Double", "signature": "Double sumDifference(NumericColumn<?> column1, NumericColumn<?> column2)", "full_signature": "public static Double sumDifference(NumericColumn<?> column1, NumericColumn<?> column2)", "class_method_signature": "AggregateFunctions.sumDifference(NumericColumn<?> column1, NumericColumn<?> column2)", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/aggregate/AggregateFunctions.java"}, "focal_method": {"identifier": "percentile", "parameters": "(NumericColumn<?> data, Double percentile)", "modifiers": "public static", "return": "Double", "body": "public static Double percentile(NumericColumn<?> data, Double percentile) {\n    return StatUtils.percentile(removeMissing(data), percentile);\n  }", "signature": "Double percentile(NumericColumn<?> data, Double percentile)", "full_signature": "public static Double percentile(NumericColumn<?> data, Double percentile)", "class_method_signature": "AggregateFunctions.percentile(NumericColumn<?> data, Double percentile)", "testcase": false, "constructor": false, "invocations": ["percentile", "removeMissing"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}