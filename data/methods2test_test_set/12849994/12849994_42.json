{"test_class": {"identifier": "DirectByteBufferTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Random random;", "modifier": "", "type": "Random", "declarator": "random", "var_name": "random"}, {"original_string": "DirectByteBuffer buffer = new DirectByteBuffer(1024 * 1024 * 10);", "modifier": "", "type": "DirectByteBuffer", "declarator": "buffer = new DirectByteBuffer(1024 * 1024 * 10)", "var_name": "buffer"}], "file": "imcache-offheap/src/test/java/com/cetsoft/imcache/offheap/bytebuffer/DirectByteBufferTest.java"}, "test_case": {"identifier": "free", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void free() {\n    int size = 1024 * 1024 * 2;\n    byte[] bytes = new byte[size];\n    random.nextBytes(bytes);\n    buffer.free();\n  }", "signature": "void free()", "full_signature": "@Test public void free()", "class_method_signature": "DirectByteBufferTest.free()", "testcase": true, "constructor": false, "invocations": ["nextBytes", "free"]}, "focal_class": {"identifier": "DirectByteBuffer", "superclass": "", "interfaces": "implements ByteBuffer", "fields": [{"original_string": "private static final sun.misc.Unsafe UNSAFE = getUnsafe();", "modifier": "private static final", "type": "sun.misc.Unsafe", "declarator": "UNSAFE = getUnsafe()", "var_name": "UNSAFE"}, {"original_string": "private static final long UNSAFE_COPY_THRESHOLD = 1024L * 1024L;", "modifier": "private static final", "type": "long", "declarator": "UNSAFE_COPY_THRESHOLD = 1024L * 1024L", "var_name": "UNSAFE_COPY_THRESHOLD"}, {"original_string": "private static final long ARRAY_BASE_OFFSET = (long) UNSAFE.arrayBaseOffset(byte[].class);", "modifier": "private static final", "type": "long", "declarator": "ARRAY_BASE_OFFSET = (long) UNSAFE.arrayBaseOffset(byte[].class)", "var_name": "ARRAY_BASE_OFFSET"}, {"original_string": "private long address;", "modifier": "private", "type": "long", "declarator": "address", "var_name": "address"}, {"original_string": "private java.nio.ByteBuffer byteBuffer;", "modifier": "private", "type": "java.nio.ByteBuffer", "declarator": "byteBuffer", "var_name": "byteBuffer"}], "methods": [{"identifier": "DirectByteBuffer", "parameters": "(final int capacity)", "modifiers": "public", "return": "", "signature": " DirectByteBuffer(final int capacity)", "full_signature": "public  DirectByteBuffer(final int capacity)", "class_method_signature": "DirectByteBuffer.DirectByteBuffer(final int capacity)", "testcase": false, "constructor": true}, {"identifier": "copyToArray", "parameters": "(long sourceAddress, Object destination,\n      long destinationBaseOffset,\n      long destinationPosition, long length)", "modifiers": "private static", "return": "void", "signature": "void copyToArray(long sourceAddress, Object destination,\n      long destinationBaseOffset,\n      long destinationPosition, long length)", "full_signature": "private static void copyToArray(long sourceAddress, Object destination,\n      long destinationBaseOffset,\n      long destinationPosition, long length)", "class_method_signature": "DirectByteBuffer.copyToArray(long sourceAddress, Object destination,\n      long destinationBaseOffset,\n      long destinationPosition, long length)", "testcase": false, "constructor": false}, {"identifier": "copyFromArray", "parameters": "(Object source, long sourceBaseOffset, long sourcePosition,\n      long destinationAddress, long length)", "modifiers": "private static", "return": "void", "signature": "void copyFromArray(Object source, long sourceBaseOffset, long sourcePosition,\n      long destinationAddress, long length)", "full_signature": "private static void copyFromArray(Object source, long sourceBaseOffset, long sourcePosition,\n      long destinationAddress, long length)", "class_method_signature": "DirectByteBuffer.copyFromArray(Object source, long sourceBaseOffset, long sourcePosition,\n      long destinationAddress, long length)", "testcase": false, "constructor": false}, {"identifier": "getUnsafe", "parameters": "()", "modifiers": "public static", "return": "sun.misc.Unsafe", "signature": "sun.misc.Unsafe getUnsafe()", "full_signature": "public static sun.misc.Unsafe getUnsafe()", "class_method_signature": "DirectByteBuffer.getUnsafe()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int position, byte[] destination, int offset, int length)", "modifiers": "public", "return": "void", "signature": "void get(int position, byte[] destination, int offset, int length)", "full_signature": "public void get(int position, byte[] destination, int offset, int length)", "class_method_signature": "DirectByteBuffer.get(int position, byte[] destination, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(int position, byte[] source, int offset, int length)", "modifiers": "public", "return": "void", "signature": "void put(int position, byte[] source, int offset, int length)", "full_signature": "public void put(int position, byte[] source, int offset, int length)", "class_method_signature": "DirectByteBuffer.put(int position, byte[] source, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "getPosition", "parameters": "(int position)", "modifiers": "private", "return": "long", "signature": "long getPosition(int position)", "full_signature": "private long getPosition(int position)", "class_method_signature": "DirectByteBuffer.getPosition(int position)", "testcase": false, "constructor": false}, {"identifier": "free", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void free()", "full_signature": "public void free()", "class_method_signature": "DirectByteBuffer.free()", "testcase": false, "constructor": false}], "file": "imcache-offheap/src/main/java/com/cetsoft/imcache/offheap/bytebuffer/DirectByteBuffer.java"}, "focal_method": {"identifier": "free", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void free() {\n    try {\n      java.lang.reflect.Field cleanerField = byteBuffer.getClass().getDeclaredField(\"cleaner\");\n      cleanerField.setAccessible(true);\n      // Cleaner can force freeing of native memory by clean method\n      sun.misc.Cleaner cleaner = (sun.misc.Cleaner) cleanerField.get(byteBuffer);\n      cleaner.clean();\n    } catch (Exception e) {\n      throw new Error(e);\n    }\n  }", "signature": "void free()", "full_signature": "public void free()", "class_method_signature": "DirectByteBuffer.free()", "testcase": false, "constructor": false, "invocations": ["getDeclaredField", "getClass", "setAccessible", "get", "clean"]}, "repository": {"repo_id": 12849994, "url": "https://github.com/Cetsoft/imcache", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 121, "size": 1599, "license": "licensed"}}