{"test_class": {"identifier": "SccTest", "superclass": "", "interfaces": "", "fields": [], "file": "animations/src/test/java/com/chiralbehaviors/CoRE/meta/models/SccTest.java"}, "test_case": {"identifier": "testScc", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testScc() {\n        Map<StatusCode, List<StatusCode>> graph = new HashMap<StatusCode, List<StatusCode>>();\n        StatusCode[] codes = new StatusCode[] { new StatusCode(new UUID(0, 1)),\n                                                new StatusCode(new UUID(0, 2)),\n                                                new StatusCode(new UUID(0, 3)),\n                                                new StatusCode(new UUID(0, 4)),\n                                                new StatusCode(new UUID(0, 5)),\n                                                new StatusCode(new UUID(0, 6)),\n                                                new StatusCode(new UUID(0, 7)),\n                                                new StatusCode(new UUID(0, 8)),\n                                                new StatusCode(new UUID(0,\n                                                                        9)) };\n        graph.put(codes[0], asList(codes[1]));\n        graph.put(codes[1], asList(codes[2]));\n        graph.put(codes[2], asList(codes[0], codes[6]));\n        graph.put(codes[3], asList(codes[4]));\n        graph.put(codes[4], asList(codes[5], codes[6]));\n        graph.put(codes[5], asList(codes[3]));\n        graph.put(codes[6], asList(codes[7]));\n        graph.put(codes[7], asList(codes[8]));\n        graph.put(codes[8], asList(codes[6]));\n        List<StatusCode[]> sccs = new SCC(graph).getStronglyConnectedComponents();\n        assertNotNull(sccs);\n        assertEquals(3, sccs.size());\n        Comparator<StatusCode> scComparator = new Comparator<StatusCode>() {\n\n            @Override\n            public int compare(StatusCode o1, StatusCode o2) {\n                return o1.getId()\n                         .compareTo(o2.getId());\n            }\n        };\n\n        StatusCode[] expected;\n\n        sccs = sccs.stream()\n                   .peek(g -> Arrays.sort(g, scComparator))\n                   .sorted((a, b) -> a[0].getId()\n                                         .compareTo(b[0].getId()))\n                   .collect(Collectors.toList());\n\n        expected = new StatusCode[] { codes[0], codes[1], codes[2] };\n        Arrays.sort(expected, scComparator);\n        StatusCode[] got = sccs.get(0);\n        assertArrayEquals(expected, got);\n\n        expected = new StatusCode[] { codes[4], codes[5], codes[3] };\n        Arrays.sort(expected, scComparator);\n        got = sccs.get(1);\n        assertArrayEquals(expected, got);\n\n        expected = new StatusCode[] { codes[6], codes[7], codes[8] };\n        Arrays.sort(expected, scComparator);\n        got = sccs.get(2);\n        assertArrayEquals(expected, got);\n    }", "signature": "void testScc()", "full_signature": "@Test public void testScc()", "class_method_signature": "SccTest.testScc()", "testcase": true, "constructor": false, "invocations": ["put", "asList", "put", "asList", "put", "asList", "put", "asList", "put", "asList", "put", "asList", "put", "asList", "put", "asList", "put", "asList", "getStronglyConnectedComponents", "assertNotNull", "assertEquals", "size", "compareTo", "getId", "getId", "collect", "sorted", "peek", "stream", "sort", "compareTo", "getId", "getId", "toList", "sort", "get", "assertArrayEquals", "sort", "get", "assertArrayEquals", "sort", "get", "assertArrayEquals"]}, "focal_class": {"identifier": "SCC", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<StatusCode, List<StatusCode>> graph;", "modifier": "private final", "type": "Map<StatusCode, List<StatusCode>>", "declarator": "graph", "var_name": "graph"}, {"original_string": "private final Map<StatusCode, Integer>          low    = new HashMap<StatusCode, Integer>();", "modifier": "private final", "type": "Map<StatusCode, Integer>", "declarator": "low    = new HashMap<StatusCode, Integer>()", "var_name": "low"}, {"original_string": "private final List<StatusCode[]>                result = new ArrayList<StatusCode[]>();", "modifier": "private final", "type": "List<StatusCode[]>", "declarator": "result = new ArrayList<StatusCode[]>()", "var_name": "result"}, {"original_string": "private List<StatusCode>                        stack  = new ArrayList<StatusCode>();", "modifier": "private", "type": "List<StatusCode>", "declarator": "stack  = new ArrayList<StatusCode>()", "var_name": "stack"}], "methods": [{"identifier": "SCC", "parameters": "(Map<StatusCode, List<StatusCode>> graph)", "modifiers": "public", "return": "", "signature": " SCC(Map<StatusCode, List<StatusCode>> graph)", "full_signature": "public  SCC(Map<StatusCode, List<StatusCode>> graph)", "class_method_signature": "SCC.SCC(Map<StatusCode, List<StatusCode>> graph)", "testcase": false, "constructor": true}, {"identifier": "getStronglyConnectedComponents", "parameters": "()", "modifiers": "public", "return": "List<StatusCode[]>", "signature": "List<StatusCode[]> getStronglyConnectedComponents()", "full_signature": "public List<StatusCode[]> getStronglyConnectedComponents()", "class_method_signature": "SCC.getStronglyConnectedComponents()", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(StatusCode statusCode)", "modifiers": "public", "return": "void", "signature": "void visit(StatusCode statusCode)", "full_signature": "public void visit(StatusCode statusCode)", "class_method_signature": "SCC.visit(StatusCode statusCode)", "testcase": false, "constructor": false}], "file": "animations/src/main/java/com/chiralbehaviors/CoRE/meta/models/SCC.java"}, "focal_method": {"identifier": "SCC", "parameters": "(Map<StatusCode, List<StatusCode>> graph)", "modifiers": "public", "return": "", "body": "public SCC(Map<StatusCode, List<StatusCode>> graph) {\n        this.graph = graph;\n    }", "signature": " SCC(Map<StatusCode, List<StatusCode>> graph)", "full_signature": "public  SCC(Map<StatusCode, List<StatusCode>> graph)", "class_method_signature": "SCC.SCC(Map<StatusCode, List<StatusCode>> graph)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 8896307, "url": "https://github.com/ChiralBehaviors/Ultrastructure", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 22985, "license": "licensed"}}