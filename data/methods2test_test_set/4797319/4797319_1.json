{"test_class": {"identifier": "TestURIUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "final Logger logger = LoggerFactory.getLogger(TestURIUtil.class);", "modifier": "final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TestURIUtil.class)", "var_name": "logger"}], "file": "sparqled-commons/src/test/java/org/sindice/core/analytics/commons/util/TestURIUtil.java"}, "test_case": {"identifier": "testSecondDomain", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSecondDomain() {\n    String[] testStrings = new String[] {\n        \"google.com -> google.com\",\n        \"www.webaddict.za -> webaddict.za\",\n        \"wilma     ->       null\",\n        \"wilma.blogSpot.com  -> blogspot.com\",\n        \"repubblica.it  -> repubblica.it\",\n        \"isti.pomino.cnr.it -> cnr.it\",\n        \"thelakersnation.com -> thelakersnation.com\",\n        \"bio2rdf.org -> bio2rdf.org\",\n        \"awakenedmmo.org -> awakenedmmo.org\",\n        \"cheminfov.informatics.indiana.edu -> indiana.edu\",\n        \"data-gov.tw.rpi.edu -> rpi.edu\",\n        \"www.test.webaddict.co.za -> webaddict.co.za\",\n        \"www.webaddict.co.za -> webaddict.co.za\",\n        \"mxr.mozilla.org -> mozilla.org\",\n        \"www.yago.zitgist.com -> zitgist.com\",\n        \"aims.fao.org -> fao.org\",\n        \"en.wikipedia.org -> wikipedia.org\",\n        \"127.0.0.100 -> null\",\n        \"http://en.wikipedia.org -> null\"\n    };\n    for (String s : testStrings) {\n      String[] elems = s.split(\"\\\\s+->\\\\s+\");\n      String domain = elems[0];\n      String expectedSecondDomain = elems[1];\n      logger.info(\"Check if sndDomain of {} equals {}\", domain, expectedSecondDomain);\n      final String sndDomain = URIUtil.getSndDomain(domain);\n      assertEquals(sndDomain == null ? \"null\" : sndDomain, expectedSecondDomain);\n\n    }\n    assertEquals(null, URIUtil.getSndDomain(\"\"));\n    assertEquals(null, URIUtil.getSndDomain(null));\n  }", "signature": "void testSecondDomain()", "full_signature": "@Test public void testSecondDomain()", "class_method_signature": "TestURIUtil.testSecondDomain()", "testcase": true, "constructor": false, "invocations": ["split", "info", "getSndDomain", "assertEquals", "assertEquals", "getSndDomain", "assertEquals", "getSndDomain"]}, "focal_class": {"identifier": "URIUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(URIUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(URIUtil.class)", "var_name": "logger"}], "methods": [{"identifier": "getSndDomainFromUrl", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String getSndDomainFromUrl(String url)", "full_signature": "public static String getSndDomainFromUrl(String url)", "class_method_signature": "URIUtil.getSndDomainFromUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "getSndDomain", "parameters": "(String domain)", "modifiers": "public static", "return": "String", "signature": "String getSndDomain(String domain)", "full_signature": "public static String getSndDomain(String domain)", "class_method_signature": "URIUtil.getSndDomain(String domain)", "testcase": false, "constructor": false}], "file": "sparqled-commons/src/main/java/org/sindice/core/analytics/commons/util/URIUtil.java"}, "focal_method": {"identifier": "getSndDomain", "parameters": "(String domain)", "modifiers": "public static", "return": "String", "body": "public static String getSndDomain(String domain) {\n    if (domain == null) {\n      return null;\n    }\n    // Remove www subdomain if it exists\n    if (domain.startsWith(\"www.\")) {\n      domain = domain.substring(4);\n    }\n    if (InternetDomainName.isValid(domain)) { // the domain is valid according to the RFC3490\n      final InternetDomainName idn = InternetDomainName.from(domain);\n      if (idn.hasPublicSuffix()) { // the domain has a public suffix\n        if (idn.isUnderPublicSuffix()) {\n          return idn.topPrivateDomain().name();\n        } else if (idn.hasParent()) {\n          final List<String> parts = idn.parts();\n          return parts.get(parts.size() - 2).concat(\".\").concat(parts.get(parts.size() - 1));\n        }\n      }\n    }\n    return null;\n  }", "signature": "String getSndDomain(String domain)", "full_signature": "public static String getSndDomain(String domain)", "class_method_signature": "URIUtil.getSndDomain(String domain)", "testcase": false, "constructor": false, "invocations": ["startsWith", "substring", "isValid", "from", "hasPublicSuffix", "isUnderPublicSuffix", "name", "topPrivateDomain", "hasParent", "parts", "concat", "concat", "get", "size", "get", "size"]}, "repository": {"repo_id": 4797319, "url": "https://github.com/sindice/sparqled", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 33, "size": 12885, "license": "licensed"}}