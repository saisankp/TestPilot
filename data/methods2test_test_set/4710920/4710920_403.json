{"test_class": {"identifier": "EagerThreadPoolExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final URL URL = new URL(\"dubbo\", \"localhost\", 8080);", "modifier": "private static final", "type": "URL", "declarator": "URL = new URL(\"dubbo\", \"localhost\", 8080)", "var_name": "URL"}], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutorTest.java"}, "test_case": {"identifier": "testEagerThreadPool", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEagerThreadPool() throws Exception {\n        String name = \"eager-tf\";\n        int queues = 5;\n        int cores = 5;\n        int threads = 10;\n        // alive 1 second\n        long alive = 1000;\n\n        //init queue and executor\n        TaskQueue<Runnable> taskQueue = new TaskQueue<Runnable>(queues);\n        final EagerThreadPoolExecutor executor = new EagerThreadPoolExecutor(cores,\n                threads,\n                alive,\n                TimeUnit.MILLISECONDS,\n                taskQueue,\n                new NamedThreadFactory(name, true),\n                new AbortPolicyWithReport(name, URL));\n        taskQueue.setExecutor(executor);\n\n        for (int i = 0; i < 15; i++) {\n            Thread.sleep(50);\n            executor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    System.out.println(\"thread number in current pool\uff1a\" + executor.getPoolSize() + \",  task number in task queue\uff1a\" + executor.getQueue()\n                            .size() + \" executor size: \" + executor.getPoolSize());\n                    try {\n                        Thread.sleep(1000);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            });\n        }\n        Thread.sleep(5000);\n        // cores theads are all alive.\n        Assertions.assertEquals(executor.getPoolSize(), cores, \"more than cores threads alive!\");\n    }", "signature": "void testEagerThreadPool()", "full_signature": "@Test public void testEagerThreadPool()", "class_method_signature": "EagerThreadPoolExecutorTest.testEagerThreadPool()", "testcase": true, "constructor": false, "invocations": ["setExecutor", "sleep", "execute", "println", "tPoolSize()", "size", "ueue()", "getPoolSize", "sleep", "printStackTrace", "sleep", "assertEquals", "getPoolSize"]}, "focal_class": {"identifier": "EagerThreadPoolExecutor", "superclass": "extends ThreadPoolExecutor", "interfaces": "", "fields": [{"original_string": "private final AtomicInteger submittedTaskCount = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "submittedTaskCount = new AtomicInteger(0)", "var_name": "submittedTaskCount"}], "methods": [{"identifier": "EagerThreadPoolExecutor", "parameters": "(int corePoolSize,\n                                   int maximumPoolSize,\n                                   long keepAliveTime,\n                                   TimeUnit unit, TaskQueue<Runnable> workQueue,\n                                   ThreadFactory threadFactory,\n                                   RejectedExecutionHandler handler)", "modifiers": "public", "return": "", "signature": " EagerThreadPoolExecutor(int corePoolSize,\n                                   int maximumPoolSize,\n                                   long keepAliveTime,\n                                   TimeUnit unit, TaskQueue<Runnable> workQueue,\n                                   ThreadFactory threadFactory,\n                                   RejectedExecutionHandler handler)", "full_signature": "public  EagerThreadPoolExecutor(int corePoolSize,\n                                   int maximumPoolSize,\n                                   long keepAliveTime,\n                                   TimeUnit unit, TaskQueue<Runnable> workQueue,\n                                   ThreadFactory threadFactory,\n                                   RejectedExecutionHandler handler)", "class_method_signature": "EagerThreadPoolExecutor.EagerThreadPoolExecutor(int corePoolSize,\n                                   int maximumPoolSize,\n                                   long keepAliveTime,\n                                   TimeUnit unit, TaskQueue<Runnable> workQueue,\n                                   ThreadFactory threadFactory,\n                                   RejectedExecutionHandler handler)", "testcase": false, "constructor": true}, {"identifier": "getSubmittedTaskCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSubmittedTaskCount()", "full_signature": "public int getSubmittedTaskCount()", "class_method_signature": "EagerThreadPoolExecutor.getSubmittedTaskCount()", "testcase": false, "constructor": false}, {"identifier": "afterExecute", "parameters": "(Runnable r, Throwable t)", "modifiers": "@Override protected", "return": "void", "signature": "void afterExecute(Runnable r, Throwable t)", "full_signature": "@Override protected void afterExecute(Runnable r, Throwable t)", "class_method_signature": "EagerThreadPoolExecutor.afterExecute(Runnable r, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Runnable command)", "modifiers": "@Override public", "return": "void", "signature": "void execute(Runnable command)", "full_signature": "@Override public void execute(Runnable command)", "class_method_signature": "EagerThreadPoolExecutor.execute(Runnable command)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutor.java"}, "focal_method": {"identifier": "execute", "parameters": "(Runnable command)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(Runnable command) {\n        if (command == null) {\n            throw new NullPointerException();\n        }\n        // do not increment in method beforeExecute!\n        submittedTaskCount.incrementAndGet();\n        try {\n            super.execute(command);\n        } catch (RejectedExecutionException rx) {\n            // retry to offer the task into queue.\n            final TaskQueue queue = (TaskQueue) super.getQueue();\n            try {\n                if (!queue.retryOffer(command, 0, TimeUnit.MILLISECONDS)) {\n                    submittedTaskCount.decrementAndGet();\n                    throw new RejectedExecutionException(\"Queue capacity is full.\", rx);\n                }\n            } catch (InterruptedException x) {\n                submittedTaskCount.decrementAndGet();\n                throw new RejectedExecutionException(x);\n            }\n        } catch (Throwable t) {\n            // decrease any way\n            submittedTaskCount.decrementAndGet();\n            throw t;\n        }\n    }", "signature": "void execute(Runnable command)", "full_signature": "@Override public void execute(Runnable command)", "class_method_signature": "EagerThreadPoolExecutor.execute(Runnable command)", "testcase": false, "constructor": false, "invocations": ["incrementAndGet", "execute", "getQueue", "retryOffer", "decrementAndGet", "decrementAndGet", "decrementAndGet"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}