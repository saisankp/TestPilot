{"test_class": {"identifier": "ThrottledTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final AtomicInteger counter = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "counter = new AtomicInteger(0)", "var_name": "counter"}, {"original_string": "private final Runnable slowIncrement = () -> {\n        waitATinyBit();\n        counter.incrementAndGet();\n    };", "modifier": "private final", "type": "Runnable", "declarator": "slowIncrement = () -> {\n        waitATinyBit();\n        counter.incrementAndGet();\n    }", "var_name": "slowIncrement"}], "file": "rpki-validator/src/test/java/net/ripe/rpki/validator3/background/ThrottledTest.java"}, "test_case": {"identifier": "testTriggerDoesntTriggerTooOften", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTriggerDoesntTriggerTooOften() throws InterruptedException {\n        counter.set(0);\n        final Throttled<String> throttled = new Throttled<>(10);\n        throttled.trigger(\"x\", slowIncrement);\n        assertEquals(0, counter.get());\n        throttled.trigger(\"x\", slowIncrement);\n        assertEquals(0, counter.get());\n\n        waitALittleToAllowExecutorToProcessRunnables();\n        assertEquals(1, counter.get());\n\n        for (int i = 0; i < 10; i++) {\n            throttled.trigger(\"x\", counter::incrementAndGet);\n        }\n        Thread.sleep(1100);\n        assertEquals(1, counter.get());\n    }", "signature": "void testTriggerDoesntTriggerTooOften()", "full_signature": "@Test public void testTriggerDoesntTriggerTooOften()", "class_method_signature": "ThrottledTest.testTriggerDoesntTriggerTooOften()", "testcase": true, "constructor": false, "invocations": ["set", "trigger", "assertEquals", "get", "trigger", "assertEquals", "get", "waitALittleToAllowExecutorToProcessRunnables", "assertEquals", "get", "trigger", "sleep", "assertEquals", "get"]}, "focal_class": {"identifier": "Throttled", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final long minIntervalInSeconds;", "modifier": "private final", "type": "long", "declarator": "minIntervalInSeconds", "var_name": "minIntervalInSeconds"}, {"original_string": "private final Map<Key, Action> actionMap = new HashMap<>();", "modifier": "private final", "type": "Map<Key, Action>", "declarator": "actionMap = new HashMap<>()", "var_name": "actionMap"}, {"original_string": "private final ScheduledExecutorService scheduledExecutor =\n        Executors.newScheduledThreadPool(Runtime.getRuntime().availableProcessors());", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "scheduledExecutor =\n        Executors.newScheduledThreadPool(Runtime.getRuntime().availableProcessors())", "var_name": "scheduledExecutor"}], "methods": [{"identifier": "Throttled", "parameters": "(long minIntervalInSeconds)", "modifiers": "public", "return": "", "signature": " Throttled(long minIntervalInSeconds)", "full_signature": "public  Throttled(long minIntervalInSeconds)", "class_method_signature": "Throttled.Throttled(long minIntervalInSeconds)", "testcase": false, "constructor": true}, {"identifier": "trigger", "parameters": "(Key key, Runnable r)", "modifiers": "public", "return": "void", "signature": "void trigger(Key key, Runnable r)", "full_signature": "public void trigger(Key key, Runnable r)", "class_method_signature": "Throttled.trigger(Key key, Runnable r)", "testcase": false, "constructor": false}], "file": "rpki-validator/src/main/java/net/ripe/rpki/validator3/background/Throttled.java"}, "focal_method": {"identifier": "trigger", "parameters": "(Key key, Runnable r)", "modifiers": "public", "return": "void", "body": "public void trigger(Key key, Runnable r) {\n        final Runnable wrappedRunnable = () -> {\n            try {\n                r.run();\n            } finally {\n                final Instant after = Instant.now();\n                synchronized (actionMap) {\n                    actionMap.put(key, Action.toBeExecutedSomeTimeLater(after));\n                }\n            }\n        };\n\n        final Instant now = Instant.now();\n        synchronized (actionMap) {\n            final Action action = actionMap.get(key);\n            if (action != null) {\n                if (!action.alreadyScheduled) {\n                    final Instant lastTime = action.getExecutionTime();\n                    final Duration between = Duration.between(lastTime, now);\n                    if (between.getSeconds() < minIntervalInSeconds) {\n                        final long delay = minIntervalInSeconds - between.getSeconds();\n                        actionMap.put(key, action.scheduled());\n                        scheduledExecutor.schedule(wrappedRunnable, delay, TimeUnit.SECONDS);\n                    } else {\n                        actionMap.put(key, action.scheduled());\n                        scheduledExecutor.execute(wrappedRunnable);\n                    }\n                }\n            } else {\n                actionMap.put(key, Action.toBeExecutedASAP(now));\n                scheduledExecutor.execute(wrappedRunnable);\n            }\n        }\n    }", "signature": "void trigger(Key key, Runnable r)", "full_signature": "public void trigger(Key key, Runnable r)", "class_method_signature": "Throttled.trigger(Key key, Runnable r)", "testcase": false, "constructor": false, "invocations": ["run", "now", "put", "toBeExecutedSomeTimeLater", "now", "get", "getExecutionTime", "between", "getSeconds", "getSeconds", "put", "scheduled", "schedule", "put", "scheduled", "execute", "put", "toBeExecutedASAP", "execute"]}, "repository": {"repo_id": 104217624, "url": "https://github.com/RIPE-NCC/rpki-validator-3", "stars": 32, "created": "9/20/2017 1:15:05 PM +00:00", "updates": "2020-01-27T10:48:38+00:00", "fork": "False", "license": "licensed"}}