{"test_class": {"identifier": "TestConfigHelper", "superclass": "", "interfaces": "", "fields": [], "file": "databus-core/databus-core-impl/src/test/java/com/linkedin/databus/core/util/TestConfigHelper.java"}, "test_case": {"identifier": "testParseDuration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testParseDuration() throws Exception\n  {\n    Assert.assertEquals(ConfigHelper.parseDuration(\"123\", TimeUnit.MILLISECONDS), 123);\n    Assert.assertEquals(ConfigHelper.parseDuration(\" 123s\", TimeUnit.MILLISECONDS), 123000);\n    Assert.assertEquals(ConfigHelper.parseDuration(\"10 MIN \", TimeUnit.MICROSECONDS), 10 * 60 * 1000000);\n    Assert.assertEquals(ConfigHelper.parseDuration(\"70 Hr\", TimeUnit.DAYS), 2);\n    Assert.assertEquals(ConfigHelper.parseDuration(\"2 days\", TimeUnit.DAYS), 2 );\n    Assert.assertEquals(ConfigHelper.parseDuration(\"2 days\", TimeUnit.HOURS), 2L * 24 );\n    Assert.assertEquals(ConfigHelper.parseDuration(\"2 days\", TimeUnit.MINUTES), 2L * 24 * 60);\n    Assert.assertEquals(ConfigHelper.parseDuration(\"2 days\", TimeUnit.SECONDS), 2L * 24 * 60 * 60);\n    Assert.assertEquals(ConfigHelper.parseDuration(\"2 days\", TimeUnit.MILLISECONDS),\n                        2L * 24 * 60 * 60 * 1000);\n    Assert.assertEquals(ConfigHelper.parseDuration(\"2 days\", TimeUnit.MICROSECONDS),\n                        2L * 24 * 60 * 60 * 1000 * 1000);\n    Assert.assertEquals(ConfigHelper.parseDuration(\"2 days\", TimeUnit.NANOSECONDS),\n                        2L * 24 * 60 * 60 * 1000 * 1000 * 1000);\n    Assert.assertEquals(ConfigHelper.parseDuration(\"70ms\", TimeUnit.NANOSECONDS), 70000000);\n    Assert.assertEquals(ConfigHelper.parseDuration(\"1hr\", TimeUnit.MILLISECONDS), 1L * 60 * 60 * 1000);\n  }", "signature": "void testParseDuration()", "full_signature": "@Test public void testParseDuration()", "class_method_signature": "TestConfigHelper.testParseDuration()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "parseDuration", "assertEquals", "parseDuration", "assertEquals", "parseDuration", "assertEquals", "parseDuration", "assertEquals", "parseDuration", "assertEquals", "parseDuration", "assertEquals", "parseDuration", "assertEquals", "parseDuration", "assertEquals", "parseDuration", "assertEquals", "parseDuration", "assertEquals", "parseDuration", "assertEquals", "parseDuration", "assertEquals", "parseDuration"]}, "focal_class": {"identifier": "ConfigHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Pattern DURATION_PATTERN =\n      Pattern.compile(\"\\\\s*(\\\\d+)\\\\s*(ns|nanos|nanosecond|nanoseconds|\" +\n      \t\t          \"us|micros|microsecond|microseconds|\" +\n      \t\t          \"ms|millis|millisecond|milliseconds|\" +\n      \t\t          \"s|sec|second|seconds|\" +\n      \t\t          \"min|minute|minutes|\" +\n      \t\t          \"h|hr|hour|hours|\" +\n      \t\t          \"d|day|days)?\\\\s*\",\n      \t\t          Pattern.CASE_INSENSITIVE);", "modifier": "public static final", "type": "Pattern", "declarator": "DURATION_PATTERN =\n      Pattern.compile(\"\\\\s*(\\\\d+)\\\\s*(ns|nanos|nanosecond|nanoseconds|\" +\n      \t\t          \"us|micros|microsecond|microseconds|\" +\n      \t\t          \"ms|millis|millisecond|milliseconds|\" +\n      \t\t          \"s|sec|second|seconds|\" +\n      \t\t          \"min|minute|minutes|\" +\n      \t\t          \"h|hr|hour|hours|\" +\n      \t\t          \"d|day|days)?\\\\s*\",\n      \t\t          Pattern.CASE_INSENSITIVE)", "var_name": "DURATION_PATTERN"}, {"original_string": "public static final Pattern BYTE_SIZE_PATTERN =\n      Pattern.compile(\"\\\\s*(\\\\d+)\\\\s*(k|K|m|M|g|G|t|T|p|P|e|E)?\\\\s*\");", "modifier": "public static final", "type": "Pattern", "declarator": "BYTE_SIZE_PATTERN =\n      Pattern.compile(\"\\\\s*(\\\\d+)\\\\s*(k|K|m|M|g|G|t|T|p|P|e|E)?\\\\s*\")", "var_name": "BYTE_SIZE_PATTERN"}], "methods": [{"identifier": "parseDuration", "parameters": "(String durationStr, TimeUnit defaultUnit)", "modifiers": "public static", "return": "long", "signature": "long parseDuration(String durationStr, TimeUnit defaultUnit)", "full_signature": "public static long parseDuration(String durationStr, TimeUnit defaultUnit)", "class_method_signature": "ConfigHelper.parseDuration(String durationStr, TimeUnit defaultUnit)", "testcase": false, "constructor": false}, {"identifier": "parseByteSize", "parameters": "(String sizeString)", "modifiers": "public static", "return": "long", "signature": "long parseByteSize(String sizeString)", "full_signature": "public static long parseByteSize(String sizeString)", "class_method_signature": "ConfigHelper.parseByteSize(String sizeString)", "testcase": false, "constructor": false}], "file": "databus-core/databus-core-impl/src/main/java/com/linkedin/databus/core/util/ConfigHelper.java"}, "focal_method": {"identifier": "parseDuration", "parameters": "(String durationStr, TimeUnit defaultUnit)", "modifiers": "public static", "return": "long", "body": "public static long parseDuration(String durationStr, TimeUnit defaultUnit) throws InvalidConfigException\n  {\n    if (null == durationStr) return 0;\n    TimeUnit unit = defaultUnit;\n    Matcher m = DURATION_PATTERN.matcher(durationStr);\n    if (!m.matches()) throw new InvalidConfigException(\"invalid duration string: \" + durationStr);\n    if (1 < m.groupCount() && null != m.group(2) && 0 < m.group(2).length())\n    {\n      char unitChar1 = m.group(2).charAt(0);\n      switch (unitChar1)\n      {\n      case 'n':\n      case 'N': unit = TimeUnit.NANOSECONDS; break;\n      case 'u':\n      case 'U': unit = TimeUnit.MICROSECONDS; break;\n      case 'm':\n      case 'M':\n        char unitChar3 = m.group(2).length() >= 3 ? m.group(2).charAt(2) : ' ';\n        unit = ('n' == unitChar3 || 'N' == unitChar3) ? TimeUnit.MINUTES : TimeUnit.MILLISECONDS;\n        break;\n      case 's':\n      case 'S': unit = TimeUnit.SECONDS; break;\n      case 'h':\n      case 'H': unit = TimeUnit.HOURS; break;\n      case 'd':\n      case 'D': unit = TimeUnit.DAYS; break;\n      }\n    }\n\n    long value = Long.parseLong(m.group(1));\n    return defaultUnit.convert(value, unit);\n  }", "signature": "long parseDuration(String durationStr, TimeUnit defaultUnit)", "full_signature": "public static long parseDuration(String durationStr, TimeUnit defaultUnit)", "class_method_signature": "ConfigHelper.parseDuration(String durationStr, TimeUnit defaultUnit)", "testcase": false, "constructor": false, "invocations": ["matcher", "matches", "groupCount", "group", "length", "group", "charAt", "group", "length", "group", "charAt", "group", "parseLong", "group", "convert"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}