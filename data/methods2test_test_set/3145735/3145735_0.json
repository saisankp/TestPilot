{"test_class": {"identifier": "PolicyModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private File dataTempir;", "modifier": "private", "type": "File", "declarator": "dataTempir", "var_name": "dataTempir"}], "file": "model/src/test/java/eu/scape_project/watch/policy/PolicyModelTest.java"}, "test_case": {"identifier": "shouldLoadPolicies", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldLoadPolicies() throws Exception {\n    PolicyModel policyModel = new PolicyModel();\n    \n    boolean loaded = policyModel.loadPolicies(\"src/test/resources/policies/giberrish.txt\");\n    Assert.assertFalse(loaded);\n    \n    loaded = policyModel.loadPolicies(\"src/test/resources/policies/bl_policies.rdf\");\n    Assert.assertTrue(loaded);\n    \n  }", "signature": "void shouldLoadPolicies()", "full_signature": "@Test public void shouldLoadPolicies()", "class_method_signature": "PolicyModelTest.shouldLoadPolicies()", "testcase": true, "constructor": false, "invocations": ["loadPolicies", "assertFalse", "loadPolicies", "assertTrue"]}, "focal_class": {"identifier": "PolicyModel", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BASE_URI = \"http://purl.org/DP/\";", "modifier": "private static final", "type": "String", "declarator": "BASE_URI = \"http://purl.org/DP/\"", "var_name": "BASE_URI"}, {"original_string": "private static final String HOME_PATH = System.getProperty(\"user.home\");", "modifier": "private static final", "type": "String", "declarator": "HOME_PATH = System.getProperty(\"user.home\")", "var_name": "HOME_PATH"}, {"original_string": "private static final String POLICIES_PATH = HOME_PATH + File.separator + \".scout\" + File.separator + \"policies\";", "modifier": "private static final", "type": "String", "declarator": "POLICIES_PATH = HOME_PATH + File.separator + \".scout\" + File.separator + \"policies\"", "var_name": "POLICIES_PATH"}, {"original_string": "private static final String MODEL_PATH = POLICIES_PATH + File.separator + \"model\";", "modifier": "private static final", "type": "String", "declarator": "MODEL_PATH = POLICIES_PATH + File.separator + \"model\"", "var_name": "MODEL_PATH"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PolicyModel.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PolicyModel.class)", "var_name": "LOG"}], "methods": [{"identifier": "PolicyModel", "parameters": "()", "modifiers": "public", "return": "", "signature": " PolicyModel()", "full_signature": "public  PolicyModel()", "class_method_signature": "PolicyModel.PolicyModel()", "testcase": false, "constructor": true}, {"identifier": "loadPolicies", "parameters": "(String file)", "modifiers": "public", "return": "boolean", "signature": "boolean loadPolicies(String file)", "full_signature": "public boolean loadPolicies(String file)", "class_method_signature": "PolicyModel.loadPolicies(String file)", "testcase": false, "constructor": false}, {"identifier": "listAllObjectives", "parameters": "()", "modifiers": "public", "return": "List<Objective>", "signature": "List<Objective> listAllObjectives()", "full_signature": "public List<Objective> listAllObjectives()", "class_method_signature": "PolicyModel.listAllObjectives()", "testcase": false, "constructor": false}, {"identifier": "deleteAllObjectives", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deleteAllObjectives()", "full_signature": "public void deleteAllObjectives()", "class_method_signature": "PolicyModel.deleteAllObjectives()", "testcase": false, "constructor": false}, {"identifier": "loadFromClasspath", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean loadFromClasspath()", "full_signature": "private boolean loadFromClasspath()", "class_method_signature": "PolicyModel.loadFromClasspath()", "testcase": false, "constructor": false}, {"identifier": "loadFromFileSystem", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean loadFromFileSystem()", "full_signature": "private boolean loadFromFileSystem()", "class_method_signature": "PolicyModel.loadFromFileSystem()", "testcase": false, "constructor": false}, {"identifier": "loadUploadedPolicies", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadUploadedPolicies()", "full_signature": "private void loadUploadedPolicies()", "class_method_signature": "PolicyModel.loadUploadedPolicies()", "testcase": false, "constructor": false}, {"identifier": "readModel", "parameters": "(InputStream file)", "modifiers": "private", "return": "void", "signature": "void readModel(InputStream file)", "full_signature": "private void readModel(InputStream file)", "class_method_signature": "PolicyModel.readModel(InputStream file)", "testcase": false, "constructor": false}, {"identifier": "getModel", "parameters": "()", "modifiers": "private", "return": "Model", "signature": "Model getModel()", "full_signature": "private Model getModel()", "class_method_signature": "PolicyModel.getModel()", "testcase": false, "constructor": false}, {"identifier": "isModelLoaded", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isModelLoaded()", "full_signature": "private boolean isModelLoaded()", "class_method_signature": "PolicyModel.isModelLoaded()", "testcase": false, "constructor": false}, {"identifier": "getModelDir", "parameters": "()", "modifiers": "private", "return": "File", "signature": "File getModelDir()", "full_signature": "private File getModelDir()", "class_method_signature": "PolicyModel.getModelDir()", "testcase": false, "constructor": false}, {"identifier": "getQuery", "parameters": "(String filepath)", "modifiers": "private", "return": "String", "signature": "String getQuery(String filepath)", "full_signature": "private String getQuery(String filepath)", "class_method_signature": "PolicyModel.getQuery(String filepath)", "testcase": false, "constructor": false}], "file": "model/src/main/java/eu/scape_project/watch/policy/PolicyModel.java"}, "focal_method": {"identifier": "loadPolicies", "parameters": "(String file)", "modifiers": "public", "return": "boolean", "body": "public boolean loadPolicies(String file) {\n    boolean loaded = false;\n\n    if (file == null) {\n      LOG.warn(\"Cannot load policies. Provided file does not exist\");\n      return loaded;\n    }\n\n    final File policies = new File(file);\n\n    if (policies.exists() && policies.isFile() && (file.endsWith(\".rdf\") || file.endsWith(\".xml\"))) {\n      try {\n        this.readModel(new FileInputStream(file));\n        loaded = true;\n      } catch (FileNotFoundException e) {\n        LOG.error(\"An error occurred while loading the policies file {}: {}\", file, e.getMessage());\n      }\n    } else {\n      LOG.warn(\"The provided file either does not exist or is not a valid rdf/xml file: {}\", file);\n    }\n\n    return loaded;\n  }", "signature": "boolean loadPolicies(String file)", "full_signature": "public boolean loadPolicies(String file)", "class_method_signature": "PolicyModel.loadPolicies(String file)", "testcase": false, "constructor": false, "invocations": ["warn", "exists", "isFile", "endsWith", "endsWith", "readModel", "error", "getMessage", "warn"]}, "repository": {"repo_id": 3145735, "url": "https://github.com/openpreserve/scout", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 13, "size": 74687, "license": "licensed"}}