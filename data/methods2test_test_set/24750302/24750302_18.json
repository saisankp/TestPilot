{"test_class": {"identifier": "ToscaTypeConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ToscaTypeConverter converter;", "modifier": "private", "type": "ToscaTypeConverter", "declarator": "converter", "var_name": "converter"}], "file": "alien4cloud-core/src/test/java/org/alien4cloud/tosca/variable/ToscaTypeConverterTest.java"}, "test_case": {"identifier": "convert_complex_data_type_to_property_value", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convert_complex_data_type_to_property_value() throws Exception {\n        PropertyDefinition propertyDefinition = new PropertyDefinition();\n        propertyDefinition.setType(\"alien.nodes.test.ComplexDataType\");\n\n        PropertyValue propertyValue = converter.toPropertyValue(\n                ImmutableMap.of(\n                        \"nested\", \"nested value\",\n                        \"nested_array\", Arrays.asList(\"item1\", \"item2\", \"item3\"),\n                        \"nested_map\", ImmutableMap.of(\"key1\", \"value1\", \"key2\", \"value2\")\n                ), propertyDefinition);\n\n        assertThat(propertyValue).isInstanceOf(ComplexPropertyValue.class);\n        ComplexPropertyValue complexPropertyValue = (ComplexPropertyValue) propertyValue;\n        assertThat(complexPropertyValue.getValue().get(\"nested_map\")).isEqualTo(ImmutableMap.of(\"key1\", \"value1\", \"key2\", \"value2\"));\n        assertThat(complexPropertyValue.getValue().get(\"nested_array\")).isEqualTo(Arrays.asList(\"item1\", \"item2\", \"item3\"));\n        assertThat(complexPropertyValue.getValue().get(\"nested\")).isEqualTo(\"nested value\");\n    }", "signature": "void convert_complex_data_type_to_property_value()", "full_signature": "@Test public void convert_complex_data_type_to_property_value()", "class_method_signature": "ToscaTypeConverterTest.convert_complex_data_type_to_property_value()", "testcase": true, "constructor": false, "invocations": ["setType", "toPropertyValue", "of", "asList", "of", "isInstanceOf", "assertThat", "isEqualTo", "assertThat", "get", "getValue", "of", "isEqualTo", "assertThat", "get", "getValue", "asList", "isEqualTo", "assertThat", "get", "getValue"]}, "focal_class": {"identifier": "ToscaTypeConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DataTypesFetcher.DataTypeFinder dataTypeFinder;", "modifier": "private", "type": "DataTypesFetcher.DataTypeFinder", "declarator": "dataTypeFinder", "var_name": "dataTypeFinder"}], "methods": [{"identifier": "ToscaTypeConverter", "parameters": "(DataTypesFetcher.DataTypeFinder dataTypeFinder)", "modifiers": "public", "return": "", "signature": " ToscaTypeConverter(DataTypesFetcher.DataTypeFinder dataTypeFinder)", "full_signature": "public  ToscaTypeConverter(DataTypesFetcher.DataTypeFinder dataTypeFinder)", "class_method_signature": "ToscaTypeConverter.ToscaTypeConverter(DataTypesFetcher.DataTypeFinder dataTypeFinder)", "testcase": false, "constructor": true}, {"identifier": "toPropertyValue", "parameters": "(Object resolvedPropertyValue, PropertyDefinition propertyDefinition)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "PropertyValue", "signature": "PropertyValue toPropertyValue(Object resolvedPropertyValue, PropertyDefinition propertyDefinition)", "full_signature": "@SuppressWarnings(\"unchecked\") public PropertyValue toPropertyValue(Object resolvedPropertyValue, PropertyDefinition propertyDefinition)", "class_method_signature": "ToscaTypeConverter.toPropertyValue(Object resolvedPropertyValue, PropertyDefinition propertyDefinition)", "testcase": false, "constructor": false}, {"identifier": "findDataType", "parameters": "(String type)", "modifiers": "private", "return": "DataType", "signature": "DataType findDataType(String type)", "full_signature": "private DataType findDataType(String type)", "class_method_signature": "ToscaTypeConverter.findDataType(String type)", "testcase": false, "constructor": false}], "file": "alien4cloud-core/src/main/java/org/alien4cloud/tosca/variable/ToscaTypeConverter.java"}, "focal_method": {"identifier": "toPropertyValue", "parameters": "(Object resolvedPropertyValue, PropertyDefinition propertyDefinition)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "PropertyValue", "body": "@SuppressWarnings(\"unchecked\")\n    public PropertyValue toPropertyValue(Object resolvedPropertyValue, PropertyDefinition propertyDefinition) {\n        if (resolvedPropertyValue == null) {\n            return null;\n        }\n\n        if (ToscaTypes.isSimple(propertyDefinition.getType())) {\n            return new ScalarPropertyValue(resolvedPropertyValue.toString());\n        }\n\n        switch (propertyDefinition.getType()) {\n            case ToscaTypes.MAP:\n                if (resolvedPropertyValue instanceof Map) {\n                    Map<String, Object> map = (Map<String, Object>) resolvedPropertyValue;\n                    Map<String, Object> resultMap = Maps.newHashMap();\n                    map.forEach((key, value) -> resultMap.put(key, toPropertyValue(value, propertyDefinition.getEntrySchema())));\n                    return new ComplexPropertyValue(resultMap);\n                } else {\n                throw new IllegalStateException(\n                        \"Property value: expected type [\" + Map.class.getSimpleName() + \"] but got [\" + resolvedPropertyValue.getClass().getName() + \"]\");\n                }\n\n            case ToscaTypes.LIST:\n                if (resolvedPropertyValue instanceof Collection) {\n                    List list = (List) resolvedPropertyValue;\n                    List resultList = new LinkedList();\n                    for (Object item : list) {\n                        resultList.add(toPropertyValue(item, propertyDefinition.getEntrySchema()));\n                    }\n                    return new ListPropertyValue(resultList);\n                } else {\n                throw new IllegalStateException(\"Property value: expected type [\" + Collection.class.getSimpleName() + \"] but got [\"\n                        + resolvedPropertyValue.getClass().getName() + \"]\");\n                }\n\n            default:\n                DataType dataType = findDataType(propertyDefinition.getType());\n\n                if (dataType == null) {\n                throw new NotFoundException(\"Data type  [\" + propertyDefinition.getType() + \"] cannot be found\");\n                }\n\n                if (dataType.isDeriveFromSimpleType()) {\n                    return new ScalarPropertyValue(resolvedPropertyValue.toString());\n                } else if (resolvedPropertyValue instanceof Map) {\n                    Map<String, Object> map = (Map<String, Object>) resolvedPropertyValue;\n                    /*\n                 * Map<String, Object> resultMap = Maps.newHashMap();\n                 * \n                 * map.forEach((key, value) -> {\n                 * PropertyDefinition entryDefinition = dataType.getProperties().get(key);\n                 * if(entryDefinition == null){\n                 * throw new IllegalStateException(\"DataType [\" + propertyDefinition.getType() + \"] does not contains any definition for entry [\" + key + \"]\");\n                 * }\n                 * resultMap.put(key, toPropertyValue(value, entryDefinition));\n                 * });\n                 * return new ComplexPropertyValue(resultMap);\n                 */\n                    return new ComplexPropertyValue(map);\n                } else {\n                throw new IllegalStateException(\n                        \"Property value: expected type [\" + propertyDefinition.getType() + \"] but got [\" + resolvedPropertyValue.getClass().getName() + \"]\");\n                }\n        }\n\n    }", "signature": "PropertyValue toPropertyValue(Object resolvedPropertyValue, PropertyDefinition propertyDefinition)", "full_signature": "@SuppressWarnings(\"unchecked\") public PropertyValue toPropertyValue(Object resolvedPropertyValue, PropertyDefinition propertyDefinition)", "class_method_signature": "ToscaTypeConverter.toPropertyValue(Object resolvedPropertyValue, PropertyDefinition propertyDefinition)", "testcase": false, "constructor": false, "invocations": ["isSimple", "getType", "toString", "getType", "newHashMap", "forEach", "put", "toPropertyValue", "getEntrySchema", "getSimpleName", "getName", "getClass", "add", "toPropertyValue", "getEntrySchema", "getSimpleName", "getName", "getClass", "findDataType", "getType", "getType", "isDeriveFromSimpleType", "toString", "getType", "getName", "getClass"]}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}