{"test_class": {"identifier": "IPMatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String IP6_FULL_ADDRESS1 = \"2001:18e8:3:171:218:8bff:fe2a:56a4\";", "modifier": "private static final", "type": "String", "declarator": "IP6_FULL_ADDRESS1 = \"2001:18e8:3:171:218:8bff:fe2a:56a4\"", "var_name": "IP6_FULL_ADDRESS1"}, {"original_string": "private static final String IP6_FULL_ADDRESS2 = \"2001:18e8:3:171:218:8bff:fe2a:56a3\";", "modifier": "private static final", "type": "String", "declarator": "IP6_FULL_ADDRESS2 = \"2001:18e8:3:171:218:8bff:fe2a:56a3\"", "var_name": "IP6_FULL_ADDRESS2"}, {"original_string": "private static final String IP6_MASKED_ADDRESS = \"2001:18e8:3::/48\";", "modifier": "private static final", "type": "String", "declarator": "IP6_MASKED_ADDRESS = \"2001:18e8:3::/48\"", "var_name": "IP6_MASKED_ADDRESS"}, {"original_string": "private final static int increment = 6;", "modifier": "private final static", "type": "int", "declarator": "increment = 6", "var_name": "increment"}, {"original_string": "private static IPMatcher ip6FullMatcher;", "modifier": "private static", "type": "IPMatcher", "declarator": "ip6FullMatcher", "var_name": "ip6FullMatcher"}, {"original_string": "private static IPMatcher ip6MaskedMatcher;", "modifier": "private static", "type": "IPMatcher", "declarator": "ip6MaskedMatcher", "var_name": "ip6MaskedMatcher"}], "file": "dspace-api/src/test/java/org/dspace/authenticate/IPMatcherTest.java"}, "test_case": {"identifier": "testIp6MisMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIp6MisMatch()\n    throws IPMatcherException\n    {\n        assertFalse(\"IPv6 full nonmatch succeeds\", ip6FullMatcher\n                .match(IP6_FULL_ADDRESS2));\n    }", "signature": "void testIp6MisMatch()", "full_signature": "@Test public void testIp6MisMatch()", "class_method_signature": "IPMatcherTest.testIp6MisMatch()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "match"]}, "focal_class": {"identifier": "IPMatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = Logger.getLogger(IPMatcher.class);", "modifier": "private static", "type": "Logger", "declarator": "log = Logger.getLogger(IPMatcher.class)", "var_name": "log"}, {"original_string": "private byte[] network;", "modifier": "private", "type": "byte[]", "declarator": "network", "var_name": "network"}, {"original_string": "private byte[] netmask;", "modifier": "private", "type": "byte[]", "declarator": "netmask", "var_name": "netmask"}], "methods": [{"identifier": "IPMatcher", "parameters": "(String ipSpec)", "modifiers": "public", "return": "", "signature": " IPMatcher(String ipSpec)", "full_signature": "public  IPMatcher(String ipSpec)", "class_method_signature": "IPMatcher.IPMatcher(String ipSpec)", "testcase": false, "constructor": true}, {"identifier": "ipToBytes", "parameters": "(String ip, byte[] bytes, boolean mustHave4)", "modifiers": "private static", "return": "int", "signature": "int ipToBytes(String ip, byte[] bytes, boolean mustHave4)", "full_signature": "private static int ipToBytes(String ip, byte[] bytes, boolean mustHave4)", "class_method_signature": "IPMatcher.ipToBytes(String ip, byte[] bytes, boolean mustHave4)", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(String ipIn)", "modifiers": "public", "return": "boolean", "signature": "boolean match(String ipIn)", "full_signature": "public boolean match(String ipIn)", "class_method_signature": "IPMatcher.match(String ipIn)", "testcase": false, "constructor": false}, {"identifier": "ip4ToIp6", "parameters": "(byte[] ip4)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] ip4ToIp6(byte[] ip4)", "full_signature": "private static byte[] ip4ToIp6(byte[] ip4)", "class_method_signature": "IPMatcher.ip4ToIp6(byte[] ip4)", "testcase": false, "constructor": false}, {"identifier": "ip4MaskToIp6", "parameters": "(byte[] ip4)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] ip4MaskToIp6(byte[] ip4)", "full_signature": "private static byte[] ip4MaskToIp6(byte[] ip4)", "class_method_signature": "IPMatcher.ip4MaskToIp6(byte[] ip4)", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/authenticate/IPMatcher.java"}, "focal_method": {"identifier": "match", "parameters": "(String ipIn)", "modifiers": "public", "return": "boolean", "body": "public boolean match(String ipIn) throws IPMatcherException\n    {\n        log.debug(\"ipIn: \"+ipIn);\n        byte[] candidate;\n\n        if (ipIn.indexOf(':') < 0)\n        {\n            candidate = new byte[4];\n            ipToBytes(ipIn, candidate, true);\n            candidate = ip4ToIp6(candidate);\n        }\n        else\n            try\n            {\n                candidate = Inet6Address.getByName(ipIn).getAddress();\n            }\n            catch (UnknownHostException e)\n            {\n                throw new IPMatcherException(\"Malformed IPv6 address \",e);\n            }\n\n        for (int i = 0; i < netmask.length; i++)\n        {\n            if ((candidate[i] & netmask[i]) != (network[i] & netmask[i]))\n            {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"candidate[i]: \"+candidate[i]);\n                    log.debug(\"netmask[i]: \"+netmask[i]);\n                    log.debug(\"candidate[i] & netmask[i]: \"+(candidate[i] & netmask[i]));\n                    log.debug(\"network[i]: \"+network[i]);\n                    log.debug(\"network[i] & netmask[i]: \"+(network[i] & netmask[i]));\n                }\n                return false;\n            }\n        }\n\n        return true;\n    }", "signature": "boolean match(String ipIn)", "full_signature": "public boolean match(String ipIn)", "class_method_signature": "IPMatcher.match(String ipIn)", "testcase": false, "constructor": false, "invocations": ["debug", "indexOf", "ipToBytes", "ip4ToIp6", "getAddress", "getByName", "isDebugEnabled", "debug", "debug", "debug", "debug", "debug"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}