{"test_class": {"identifier": "NameAscendingComparatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NameAscendingComparator comparator = new NameAscendingComparator();", "modifier": "private", "type": "NameAscendingComparator", "declarator": "comparator = new NameAscendingComparator()", "var_name": "comparator"}, {"original_string": "@Mock\n    private DSpaceObject dso1;", "modifier": "@Mock\n    private", "type": "DSpaceObject", "declarator": "dso1", "var_name": "dso1"}, {"original_string": "@Mock\n    private DSpaceObject dso2;", "modifier": "@Mock\n    private", "type": "DSpaceObject", "declarator": "dso2", "var_name": "dso2"}], "file": "dspace-api/src/test/java/org/dspace/content/comparator/NameAscendingComparatorTest.java"}, "test_case": {"identifier": "testCompareCaseInsensitive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompareCaseInsensitive() throws Exception {\n        when(dso1.getName()).thenReturn(\"a\");\n        when(dso2.getName()).thenReturn(\"B\");\n\n        assertTrue(comparator.compare(dso1, dso2) < 0);\n    }", "signature": "void testCompareCaseInsensitive()", "full_signature": "@Test public void testCompareCaseInsensitive()", "class_method_signature": "NameAscendingComparatorTest.testCompareCaseInsensitive()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getName", "thenReturn", "when", "getName", "assertTrue", "compare"]}, "focal_class": {"identifier": "NameAscendingComparator", "superclass": "", "interfaces": "implements Comparator<DSpaceObject>", "fields": [], "methods": [{"identifier": "compare", "parameters": "(DSpaceObject dso1, DSpaceObject dso2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(DSpaceObject dso1, DSpaceObject dso2)", "full_signature": "@Override public int compare(DSpaceObject dso1, DSpaceObject dso2)", "class_method_signature": "NameAscendingComparator.compare(DSpaceObject dso1, DSpaceObject dso2)", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/content/comparator/NameAscendingComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(DSpaceObject dso1, DSpaceObject dso2)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int compare(DSpaceObject dso1, DSpaceObject dso2) {\n        if (dso1 == dso2){\n            return 0;\n        }else if (dso1 == null){\n            return -1;\n        }else if (dso2 == null){\n            return 1;\n        }else {\n            String name1 = StringUtils.trimToEmpty(dso1.getName());\n            String name2 = StringUtils.trimToEmpty(dso2.getName());\n\n            //When two DSO's have the same name, use their UUID to put them in an order\n            if(name1.equals(name2)) {\n                return ObjectUtils.compare(dso1.getID(), dso2.getID());\n            } else {\n                return name1.compareToIgnoreCase(name2);\n            }\n        }\n    }", "signature": "int compare(DSpaceObject dso1, DSpaceObject dso2)", "full_signature": "@Override public int compare(DSpaceObject dso1, DSpaceObject dso2)", "class_method_signature": "NameAscendingComparator.compare(DSpaceObject dso1, DSpaceObject dso2)", "testcase": false, "constructor": false, "invocations": ["trimToEmpty", "getName", "trimToEmpty", "getName", "equals", "compare", "getID", "getID", "compareToIgnoreCase"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}