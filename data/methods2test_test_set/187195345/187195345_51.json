{"test_class": {"identifier": "GeoCoordinatesDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "GeoCoordinatesDecoder geoCoordinatesDecoder = new GeoCoordinatesDecoder();", "modifier": "", "type": "GeoCoordinatesDecoder", "declarator": "geoCoordinatesDecoder = new GeoCoordinatesDecoder()", "var_name": "geoCoordinatesDecoder"}], "file": "proto/src/test/java/openlr/proto/decoder/GeoCoordinatesDecoderTest.java"}, "test_case": {"identifier": "testValidLocationReference", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidLocationReference() throws PhysicalFormatException {\n        Coordinates coordinates = Coordinates.newBuilder()\n                .setLongitude(1.5)\n                .setLatitude(2.5)\n                .build();\n\n        GeoCoordinatesLocationReference geoCoordinatesLocationReference = GeoCoordinatesLocationReference.newBuilder()\n                .setCoordinates(coordinates)\n                .build();\n\n        LocationReferenceData locationReferenceData = LocationReferenceData.newBuilder()\n                .setGeoCoordinatesLocationReference(geoCoordinatesLocationReference)\n                .build();\n\n        RawLocationReference rawLocationReference = geoCoordinatesDecoder.decode(\"1\", locationReferenceData);\n\n        assertNotNull(rawLocationReference);\n        assertEquals(\"1\", rawLocationReference.getID());\n        assertEquals(LocationType.GEO_COORDINATES, rawLocationReference.getLocationType());\n\n        GeoCoordinates geoCoordinates = rawLocationReference.getGeoCoordinates();\n        assertNotNull(geoCoordinates);\n        assertEquals(geoCoordinates.getLongitudeDeg(), 1.5);\n        assertEquals(geoCoordinates.getLatitudeDeg(), 2.5);\n    }", "signature": "void testValidLocationReference()", "full_signature": "@Test public void testValidLocationReference()", "class_method_signature": "GeoCoordinatesDecoderTest.testValidLocationReference()", "testcase": true, "constructor": false, "invocations": ["build", "setLatitude", "setLongitude", "newBuilder", "build", "setCoordinates", "newBuilder", "build", "setGeoCoordinatesLocationReference", "newBuilder", "decode", "assertNotNull", "assertEquals", "getID", "assertEquals", "getLocationType", "getGeoCoordinates", "assertNotNull", "assertEquals", "getLongitudeDeg", "assertEquals", "getLatitudeDeg"]}, "focal_class": {"identifier": "GeoCoordinatesDecoder", "superclass": "", "interfaces": "implements LocationReferenceDecoder", "fields": [], "methods": [{"identifier": "decode", "parameters": "(String id, LocationReferenceData data)", "modifiers": "@Override public", "return": "RawLocationReference", "signature": "RawLocationReference decode(String id, LocationReferenceData data)", "full_signature": "@Override public RawLocationReference decode(String id, LocationReferenceData data)", "class_method_signature": "GeoCoordinatesDecoder.decode(String id, LocationReferenceData data)", "testcase": false, "constructor": false}], "file": "proto/src/main/java/openlr/proto/decoder/GeoCoordinatesDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(String id, LocationReferenceData data)", "modifiers": "@Override public", "return": "RawLocationReference", "body": "@Override\n    public RawLocationReference decode(String id, LocationReferenceData data) throws OpenLRProtoException {\n        if (!data.hasGeoCoordinatesLocationReference()) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.MISSING_LOCATION_REFERENCE);\n        }\n\n        GeoCoordinatesLocationReference geoCoordinatesLocationReference = data.getGeoCoordinatesLocationReference();\n\n        if (!geoCoordinatesLocationReference.hasCoordinates()) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);\n        }\n\n        Coordinates coordinates = geoCoordinatesLocationReference.getCoordinates();\n        GeoCoordinatesProtoImpl geoCoordinates = new GeoCoordinatesProtoImpl(coordinates.getLongitude(), coordinates.getLatitude());\n\n        return new RawGeoCoordLocRef(id, geoCoordinates);\n    }", "signature": "RawLocationReference decode(String id, LocationReferenceData data)", "full_signature": "@Override public RawLocationReference decode(String id, LocationReferenceData data)", "class_method_signature": "GeoCoordinatesDecoder.decode(String id, LocationReferenceData data)", "testcase": false, "constructor": false, "invocations": ["hasGeoCoordinatesLocationReference", "getGeoCoordinatesLocationReference", "hasCoordinates", "getCoordinates", "getLongitude", "getLatitude"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}