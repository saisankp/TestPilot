{"test_class": {"identifier": "MatcherFactoryGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private RoundEnvironment env;", "modifier": "@Mock\n    private", "type": "RoundEnvironment", "declarator": "env", "var_name": "env"}, {"original_string": "@Mock\n    private ProcessingEnvironment prenv;", "modifier": "@Mock\n    private", "type": "ProcessingEnvironment", "declarator": "prenv", "var_name": "prenv"}, {"original_string": "@Mock\n    private Elements elements;", "modifier": "@Mock\n    private", "type": "Elements", "declarator": "elements", "var_name": "elements"}, {"original_string": "private Set<TypeElement> annotations = new HashSet<>();", "modifier": "private", "type": "Set<TypeElement>", "declarator": "annotations = new HashSet<>()", "var_name": "annotations"}, {"original_string": "private MatcherFactoryGenerator matcherFactoryGenerator;", "modifier": "private", "type": "MatcherFactoryGenerator", "declarator": "matcherFactoryGenerator", "var_name": "matcherFactoryGenerator"}, {"original_string": "@Rule\n    public ExternalResource prepare = new ExternalResource() {\n        @Override\n        protected void before() throws Throwable {\n            when(env.processingOver()).thenReturn(false);\n            when(env.getElementsAnnotatedWith(any(Class.class))).thenReturn(new HashSet<Element>());\n            when(prenv.getElementUtils()).thenReturn(elements);\n\n\n            matcherFactoryGenerator = new MatcherFactoryGenerator();\n            matcherFactoryGenerator.init(prenv);\n        }\n    };", "modifier": "@Rule\n    public", "type": "ExternalResource", "declarator": "prepare = new ExternalResource() {\n        @Override\n        protected void before() throws Throwable {\n            when(env.processingOver()).thenReturn(false);\n            when(env.getElementsAnnotatedWith(any(Class.class))).thenReturn(new HashSet<Element>());\n            when(prenv.getElementUtils()).thenReturn(elements);\n\n\n            matcherFactoryGenerator = new MatcherFactoryGenerator();\n            matcherFactoryGenerator.init(prenv);\n        }\n    }", "var_name": "prepare"}], "file": "feature-matcher-generator/src/test/java/ru/yandex/qatools/processors/matcher/gen/MatcherFactoryGeneratorTest.java"}, "test_case": {"identifier": "shouldDoNothingWithNoneAnnotationsOrEmptyAnnotationClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldDoNothingWithNoneAnnotationsOrEmptyAnnotationClass() throws Exception {\n        matcherFactoryGenerator.process(annotations, env);\n        verify(env).processingOver();\n        verifyNoMoreInteractions(env);\n    }", "signature": "void shouldDoNothingWithNoneAnnotationsOrEmptyAnnotationClass()", "full_signature": "@Test public void shouldDoNothingWithNoneAnnotationsOrEmptyAnnotationClass()", "class_method_signature": "MatcherFactoryGeneratorTest.shouldDoNothingWithNoneAnnotationsOrEmptyAnnotationClass()", "testcase": true, "constructor": false, "invocations": ["process", "processingOver", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "MatcherFactoryGenerator", "superclass": "extends AbstractProcessor", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(MatcherFactoryGenerator.class.toString());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(MatcherFactoryGenerator.class.toString())", "var_name": "LOGGER"}], "methods": [{"identifier": "getSupportedAnnotationTypes", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getSupportedAnnotationTypes()", "full_signature": "@Override public Set<String> getSupportedAnnotationTypes()", "class_method_signature": "MatcherFactoryGenerator.getSupportedAnnotationTypes()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(ProcessingEnvironment processingEnv)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void init(ProcessingEnvironment processingEnv)", "full_signature": "@Override public synchronized void init(ProcessingEnvironment processingEnv)", "class_method_signature": "MatcherFactoryGenerator.init(ProcessingEnvironment processingEnv)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "full_signature": "@Override public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "class_method_signature": "MatcherFactoryGenerator.process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "testcase": false, "constructor": false}, {"identifier": "groupedClasses", "parameters": "(List<Element> fields)", "modifiers": "static", "return": "Map<Element, ClassSpecDescription>", "signature": "Map<Element, ClassSpecDescription> groupedClasses(List<Element> fields)", "full_signature": "static Map<Element, ClassSpecDescription> groupedClasses(List<Element> fields)", "class_method_signature": "MatcherFactoryGenerator.groupedClasses(List<Element> fields)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(ProcessingEnvironment processingEnv)", "modifiers": "private static", "return": "Consumer<JavaFile>", "signature": "Consumer<JavaFile> write(ProcessingEnvironment processingEnv)", "full_signature": "private static Consumer<JavaFile> write(ProcessingEnvironment processingEnv)", "class_method_signature": "MatcherFactoryGenerator.write(ProcessingEnvironment processingEnv)", "testcase": false, "constructor": false}, {"identifier": "asFields", "parameters": "(Element element)", "modifiers": "private static", "return": "Stream<Element>", "signature": "Stream<Element> asFields(Element element)", "full_signature": "private static Stream<Element> asFields(Element element)", "class_method_signature": "MatcherFactoryGenerator.asFields(Element element)", "testcase": false, "constructor": false}], "file": "feature-matcher-generator/src/main/java/ru/yandex/qatools/processors/matcher/gen/MatcherFactoryGenerator.java"}, "focal_method": {"identifier": "process", "parameters": "(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n        try {\n\n            if (roundEnv.processingOver()) {\n                return false;\n            }\n\n            if (annotations.isEmpty()) {\n                LOGGER.info(\"No any annotation found...\");\n                return false;\n            }\n\n            List<Element> fields = new LinkedList<>();\n\n            for (TypeElement annotation : annotations) {\n                LOGGER.info(format(\"Work with %s...\", annotation.getQualifiedName()));\n                roundEnv.getElementsAnnotatedWith(annotation)\n                        .stream()\n                        .flatMap(MatcherFactoryGenerator::asFields)\n                        .filter(ProcessingPredicates.shouldGenerateMatcher())\n                        .forEach(fields::add);\n            }\n\n            Map<Element, ClassSpecDescription> classes = groupedClasses(fields);\n\n            LOGGER.info(format(\"Got %s classes to generate matchers. Writing them...\", classes.size()));\n\n            classes.values()\n                    .stream()\n                    .filter(isEntryWithParentPackageElement())\n                    .map(ClassSpecDescription::asJavaFile)\n                    .forEach(write(processingEnv));\n\n            LOGGER.info(\"All classes were successfully processed!\");\n\n        } catch (Exception e) {\n            LOGGER.log(Level.SEVERE, format(\"Can't generate matchers, because of: %s\", e.getMessage()), e);\n        }\n\n        return false;\n    }", "signature": "boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "full_signature": "@Override public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "class_method_signature": "MatcherFactoryGenerator.process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "testcase": false, "constructor": false, "invocations": ["processingOver", "isEmpty", "info", "info", "format", "getQualifiedName", "forEach", "filter", "flatMap", "stream", "getElementsAnnotatedWith", "shouldGenerateMatcher", "groupedClasses", "info", "format", "size", "forEach", "map", "filter", "stream", "values", "isEntryWithParentPackageElement", "write", "info", "log", "format", "getMessage"]}, "repository": {"repo_id": 25434304, "url": "https://github.com/yandex-qatools/hamcrest-pojo-matcher-generator", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 31, "size": 112, "license": "licensed"}}