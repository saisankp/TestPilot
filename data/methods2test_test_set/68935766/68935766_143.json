{"test_class": {"identifier": "CommandsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Literal<Object> literal = Literal.builder(\"name\").then(Literal.builder(\"a\").alias(\"a1\", \"a2\")).then(Argument.builder(\"b\", word())).build();", "modifier": "", "type": "Literal<Object>", "declarator": "literal = Literal.builder(\"name\").then(Literal.builder(\"a\").alias(\"a1\", \"a2\")).then(Argument.builder(\"b\", word())).build()", "var_name": "literal"}, {"original_string": "Command<Object> execution = val -> 1;", "modifier": "", "type": "Command<Object>", "declarator": "execution = val -> 1", "var_name": "execution"}], "file": "commons/src/test/java/com/karuslabs/commons/command/CommandsTest.java"}, "test_case": {"identifier": "execution", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void execution() {\n        Commands.execution(literal, execution);\n        assertSame(execution, literal.getCommand());\n    }", "signature": "void execution()", "full_signature": "@Test void execution()", "class_method_signature": "CommandsTest.execution()", "testcase": true, "constructor": false, "invocations": ["execution", "assertSame", "getCommand"]}, "focal_class": {"identifier": "Commands", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final VarHandle COMMAND;", "modifier": "private static final", "type": "VarHandle", "declarator": "COMMAND", "var_name": "COMMAND"}, {"original_string": "private static final VarHandle CHILDREN;", "modifier": "private static final", "type": "VarHandle", "declarator": "CHILDREN", "var_name": "CHILDREN"}, {"original_string": "private static final VarHandle LITERALS;", "modifier": "private static final", "type": "VarHandle", "declarator": "LITERALS", "var_name": "LITERALS"}, {"original_string": "private static final VarHandle ARGUMENTS;", "modifier": "private static final", "type": "VarHandle", "declarator": "ARGUMENTS", "var_name": "ARGUMENTS"}], "methods": [{"identifier": "execution", "parameters": "(CommandNode<T> command, Command<T> execution)", "modifiers": "public static", "return": "void", "signature": "void execution(CommandNode<T> command, Command<T> execution)", "full_signature": "public static void execution(CommandNode<T> command, Command<T> execution)", "class_method_signature": "Commands.execution(CommandNode<T> command, Command<T> execution)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(CommandNode<T> command, String child)", "modifiers": "public static", "return": "CommandNode<T>", "signature": "CommandNode<T> remove(CommandNode<T> command, String child)", "full_signature": "public static CommandNode<T> remove(CommandNode<T> command, String child)", "class_method_signature": "Commands.remove(CommandNode<T> command, String child)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/command/Commands.java"}, "focal_method": {"identifier": "execution", "parameters": "(CommandNode<T> command, Command<T> execution)", "modifiers": "public static", "return": "void", "body": "public static <T> void execution(CommandNode<T> command, Command<T> execution) {\n        COMMAND.set(command, execution);\n    }", "signature": "void execution(CommandNode<T> command, Command<T> execution)", "full_signature": "public static void execution(CommandNode<T> command, Command<T> execution)", "class_method_signature": "Commands.execution(CommandNode<T> command, Command<T> execution)", "testcase": false, "constructor": false, "invocations": ["set"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}