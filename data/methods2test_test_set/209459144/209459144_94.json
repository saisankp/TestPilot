{"test_class": {"identifier": "MetricServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(MetricServiceTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(MetricServiceTest.class)", "var_name": "LOG"}, {"original_string": "MetricService metricService = new MetricService();", "modifier": "", "type": "MetricService", "declarator": "metricService = new MetricService()", "var_name": "metricService"}], "file": "submarine-server/server-core/src/test/java/org/apache/submarine/server/workbench/database/service/MetricServiceTest.java"}, "test_case": {"identifier": "testUpdate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testUpdate() throws Exception {\n    Metric metric = new Metric();\n    metric.setId(\"test_application_1234\");\n    metric.setKey(\"test_score\");\n    metric.setValue((float) 0.666667);\n    metric.setWorkerIndex(\"test_worker-2\");\n    metric.setTimestamp(new BigInteger(\"1569139525098\"));\n    metric.setStep(0);\n    metric.setIsNan(false);\n    boolean result = metricService.insert(metric);\n    assertTrue(result);\n\n    metric.setId(\"test_application_1234\");\n    metric.setKey(\"test_scoreNew\");\n    metric.setValue((float) 0.766667);\n    metric.setWorkerIndex(\"test_worker-New\");\n    metric.setTimestamp(new BigInteger(\"2569139525098\"));\n    metric.setStep(1);\n    metric.setIsNan(true);\n\n    boolean editResult = metricService.update(metric);\n    assertTrue(editResult);\n\n    Metric metricDb2 = metricService.selectByPrimaryKeySelective(metric).get(0);\n    compareMetrics(metric, metricDb2);\n  }", "signature": "void testUpdate()", "full_signature": "@Test public void testUpdate()", "class_method_signature": "MetricServiceTest.testUpdate()", "testcase": true, "constructor": false, "invocations": ["setId", "setKey", "setValue", "setWorkerIndex", "setTimestamp", "setStep", "setIsNan", "insert", "assertTrue", "setId", "setKey", "setValue", "setWorkerIndex", "setTimestamp", "setStep", "setIsNan", "update", "assertTrue", "get", "selectByPrimaryKeySelective", "compareMetrics"]}, "focal_class": {"identifier": "MetricService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(MetricService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(MetricService.class)", "var_name": "LOG"}], "methods": [{"identifier": "MetricService", "parameters": "()", "modifiers": "public", "return": "", "signature": " MetricService()", "full_signature": "public  MetricService()", "class_method_signature": "MetricService.MetricService()", "testcase": false, "constructor": true}, {"identifier": "selectAll", "parameters": "()", "modifiers": "public", "return": "List<Metric>", "signature": "List<Metric> selectAll()", "full_signature": "public List<Metric> selectAll()", "class_method_signature": "MetricService.selectAll()", "testcase": false, "constructor": false}, {"identifier": "deleteById", "parameters": "(String id)", "modifiers": "public", "return": "boolean", "signature": "boolean deleteById(String id)", "full_signature": "public boolean deleteById(String id)", "class_method_signature": "MetricService.deleteById(String id)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(Metric metric)", "modifiers": "public", "return": "boolean", "signature": "boolean insert(Metric metric)", "full_signature": "public boolean insert(Metric metric)", "class_method_signature": "MetricService.insert(Metric metric)", "testcase": false, "constructor": false}, {"identifier": "selectById", "parameters": "(String id)", "modifiers": "public", "return": "Metric", "signature": "Metric selectById(String id)", "full_signature": "public Metric selectById(String id)", "class_method_signature": "MetricService.selectById(String id)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Metric metric)", "modifiers": "public", "return": "boolean", "signature": "boolean update(Metric metric)", "full_signature": "public boolean update(Metric metric)", "class_method_signature": "MetricService.update(Metric metric)", "testcase": false, "constructor": false}, {"identifier": "selectByPrimaryKeySelective", "parameters": "(Metric metric)", "modifiers": "public", "return": "List<Metric>", "signature": "List<Metric> selectByPrimaryKeySelective(Metric metric)", "full_signature": "public List<Metric> selectByPrimaryKeySelective(Metric metric)", "class_method_signature": "MetricService.selectByPrimaryKeySelective(Metric metric)", "testcase": false, "constructor": false}], "file": "submarine-server/server-core/src/main/java/org/apache/submarine/server/workbench/database/service/MetricService.java"}, "focal_method": {"identifier": "update", "parameters": "(Metric metric)", "modifiers": "public", "return": "boolean", "body": "public boolean update(Metric metric) throws Exception {\n    LOG.info(\"Metric update {}\", metric);\n\n    try (SqlSession sqlSession = MyBatisUtil.getSqlSession()) {\n      MetricMapper mapper = sqlSession.getMapper(MetricMapper.class);\n      mapper.update(metric);\n      sqlSession.commit();\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      throw new Exception(e);\n    }\n    return true;\n  }", "signature": "boolean update(Metric metric)", "full_signature": "public boolean update(Metric metric)", "class_method_signature": "MetricService.update(Metric metric)", "testcase": false, "constructor": false, "invocations": ["info", "getSqlSession", "getMapper", "update", "commit", "error", "getMessage"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}