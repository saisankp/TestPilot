{"test_class": {"identifier": "ServiceConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Protocol protocolDelegate = Mockito.mock(Protocol.class);", "modifier": "private", "type": "Protocol", "declarator": "protocolDelegate = Mockito.mock(Protocol.class)", "var_name": "protocolDelegate"}, {"original_string": "private Registry registryDelegate = Mockito.mock(Registry.class);", "modifier": "private", "type": "Registry", "declarator": "registryDelegate = Mockito.mock(Registry.class)", "var_name": "registryDelegate"}, {"original_string": "private Exporter exporter = Mockito.mock(Exporter.class);", "modifier": "private", "type": "Exporter", "declarator": "exporter = Mockito.mock(Exporter.class)", "var_name": "exporter"}, {"original_string": "private ServiceConfig<DemoServiceImpl> service = new ServiceConfig<DemoServiceImpl>();", "modifier": "private", "type": "ServiceConfig<DemoServiceImpl>", "declarator": "service = new ServiceConfig<DemoServiceImpl>()", "var_name": "service"}, {"original_string": "private ServiceConfig<DemoServiceImpl> service2 = new ServiceConfig<DemoServiceImpl>();", "modifier": "private", "type": "ServiceConfig<DemoServiceImpl>", "declarator": "service2 = new ServiceConfig<DemoServiceImpl>()", "var_name": "service2"}, {"original_string": "private ServiceConfig<DemoServiceImpl> delayService = new ServiceConfig<DemoServiceImpl>();", "modifier": "private", "type": "ServiceConfig<DemoServiceImpl>", "declarator": "delayService = new ServiceConfig<DemoServiceImpl>()", "var_name": "delayService"}], "file": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ServiceConfigTest.java"}, "test_case": {"identifier": "testUnexport", "parameters": "()", "modifiers": "@Test @Disabled(\"cannot pass in travis\") public", "return": "void", "body": "@Test\n    @Disabled(\"cannot pass in travis\")\n    public void testUnexport() throws Exception {\n        System.setProperty(SHUTDOWN_WAIT_KEY, \"0\");\n        try {\n            service.export();\n            service.unexport();\n            Thread.sleep(1000);\n            Mockito.verify(exporter, Mockito.atLeastOnce()).unexport();\n        } finally {\n            System.clearProperty(SHUTDOWN_TIMEOUT_KEY);\n        }\n    }", "signature": "void testUnexport()", "full_signature": "@Test @Disabled(\"cannot pass in travis\") public void testUnexport()", "class_method_signature": "ServiceConfigTest.testUnexport()", "testcase": true, "constructor": false, "invocations": ["setProperty", "export", "unexport", "sleep", "unexport", "verify", "atLeastOnce", "clearProperty"]}, "focal_class": {"identifier": "ServiceConfig", "superclass": "extends ServiceConfigBase<T>", "interfaces": "", "fields": [{"original_string": "public static final Logger logger = LoggerFactory.getLogger(ServiceConfig.class);", "modifier": "public static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ServiceConfig.class)", "var_name": "logger"}, {"original_string": "private static final Map<String, Integer> RANDOM_PORT_MAP = new HashMap<String, Integer>();", "modifier": "private static final", "type": "Map<String, Integer>", "declarator": "RANDOM_PORT_MAP = new HashMap<String, Integer>()", "var_name": "RANDOM_PORT_MAP"}, {"original_string": "private static final ScheduledExecutorService DELAY_EXPORT_EXECUTOR = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(\"DubboServiceDelayExporter\", true));", "modifier": "private static final", "type": "ScheduledExecutorService", "declarator": "DELAY_EXPORT_EXECUTOR = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(\"DubboServiceDelayExporter\", true))", "var_name": "DELAY_EXPORT_EXECUTOR"}, {"original_string": "private static final Protocol PROTOCOL = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();", "modifier": "private static final", "type": "Protocol", "declarator": "PROTOCOL = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension()", "var_name": "PROTOCOL"}, {"original_string": "private static final ProxyFactory PROXY_FACTORY = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();", "modifier": "private static final", "type": "ProxyFactory", "declarator": "PROXY_FACTORY = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension()", "var_name": "PROXY_FACTORY"}, {"original_string": "private transient volatile boolean exported;", "modifier": "private transient volatile", "type": "boolean", "declarator": "exported", "var_name": "exported"}, {"original_string": "private transient volatile boolean unexported;", "modifier": "private transient volatile", "type": "boolean", "declarator": "unexported", "var_name": "unexported"}, {"original_string": "private DubboBootstrap bootstrap;", "modifier": "private", "type": "DubboBootstrap", "declarator": "bootstrap", "var_name": "bootstrap"}, {"original_string": "private final List<Exporter<?>> exporters = new ArrayList<Exporter<?>>();", "modifier": "private final", "type": "List<Exporter<?>>", "declarator": "exporters = new ArrayList<Exporter<?>>()", "var_name": "exporters"}], "methods": [{"identifier": "ServiceConfig", "parameters": "()", "modifiers": "public", "return": "", "signature": " ServiceConfig()", "full_signature": "public  ServiceConfig()", "class_method_signature": "ServiceConfig.ServiceConfig()", "testcase": false, "constructor": true}, {"identifier": "ServiceConfig", "parameters": "(Service service)", "modifiers": "public", "return": "", "signature": " ServiceConfig(Service service)", "full_signature": "public  ServiceConfig(Service service)", "class_method_signature": "ServiceConfig.ServiceConfig(Service service)", "testcase": false, "constructor": true}, {"identifier": "isExported", "parameters": "()", "modifiers": "@Parameter(excluded = true) public", "return": "boolean", "signature": "boolean isExported()", "full_signature": "@Parameter(excluded = true) public boolean isExported()", "class_method_signature": "ServiceConfig.isExported()", "testcase": false, "constructor": false}, {"identifier": "isUnexported", "parameters": "()", "modifiers": "@Parameter(excluded = true) public", "return": "boolean", "signature": "boolean isUnexported()", "full_signature": "@Parameter(excluded = true) public boolean isUnexported()", "class_method_signature": "ServiceConfig.isUnexported()", "testcase": false, "constructor": false}, {"identifier": "unexport", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unexport()", "full_signature": "public void unexport()", "class_method_signature": "ServiceConfig.unexport()", "testcase": false, "constructor": false}, {"identifier": "export", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void export()", "full_signature": "public synchronized void export()", "class_method_signature": "ServiceConfig.export()", "testcase": false, "constructor": false}, {"identifier": "exported", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void exported()", "full_signature": "public void exported()", "class_method_signature": "ServiceConfig.exported()", "testcase": false, "constructor": false}, {"identifier": "checkAndUpdateSubConfigs", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkAndUpdateSubConfigs()", "full_signature": "private void checkAndUpdateSubConfigs()", "class_method_signature": "ServiceConfig.checkAndUpdateSubConfigs()", "testcase": false, "constructor": false}, {"identifier": "doExport", "parameters": "()", "modifiers": "protected synchronized", "return": "void", "signature": "void doExport()", "full_signature": "protected synchronized void doExport()", "class_method_signature": "ServiceConfig.doExport()", "testcase": false, "constructor": false}, {"identifier": "doExportUrls", "parameters": "()", "modifiers": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) private", "return": "void", "signature": "void doExportUrls()", "full_signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) private void doExportUrls()", "class_method_signature": "ServiceConfig.doExportUrls()", "testcase": false, "constructor": false}, {"identifier": "doExportUrlsFor1Protocol", "parameters": "(ProtocolConfig protocolConfig, List<URL> registryURLs)", "modifiers": "private", "return": "void", "signature": "void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> registryURLs)", "full_signature": "private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> registryURLs)", "class_method_signature": "ServiceConfig.doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> registryURLs)", "testcase": false, "constructor": false}, {"identifier": "exportLocal", "parameters": "(URL url)", "modifiers": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) /** * always export injvm */ private", "return": "void", "signature": "void exportLocal(URL url)", "full_signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) /** * always export injvm */ private void exportLocal(URL url)", "class_method_signature": "ServiceConfig.exportLocal(URL url)", "testcase": false, "constructor": false}, {"identifier": "isOnlyInJvm", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isOnlyInJvm()", "full_signature": "private boolean isOnlyInJvm()", "class_method_signature": "ServiceConfig.isOnlyInJvm()", "testcase": false, "constructor": false}, {"identifier": "findConfigedHosts", "parameters": "(ProtocolConfig protocolConfig,\n                                     List<URL> registryURLs,\n                                     Map<String, String> map)", "modifiers": "private", "return": "String", "signature": "String findConfigedHosts(ProtocolConfig protocolConfig,\n                                     List<URL> registryURLs,\n                                     Map<String, String> map)", "full_signature": "private String findConfigedHosts(ProtocolConfig protocolConfig,\n                                     List<URL> registryURLs,\n                                     Map<String, String> map)", "class_method_signature": "ServiceConfig.findConfigedHosts(ProtocolConfig protocolConfig,\n                                     List<URL> registryURLs,\n                                     Map<String, String> map)", "testcase": false, "constructor": false}, {"identifier": "findConfigedPorts", "parameters": "(ProtocolConfig protocolConfig,\n                                      String name,\n                                      Map<String, String> map)", "modifiers": "private", "return": "Integer", "signature": "Integer findConfigedPorts(ProtocolConfig protocolConfig,\n                                      String name,\n                                      Map<String, String> map)", "full_signature": "private Integer findConfigedPorts(ProtocolConfig protocolConfig,\n                                      String name,\n                                      Map<String, String> map)", "class_method_signature": "ServiceConfig.findConfigedPorts(ProtocolConfig protocolConfig,\n                                      String name,\n                                      Map<String, String> map)", "testcase": false, "constructor": false}, {"identifier": "parsePort", "parameters": "(String configPort)", "modifiers": "private", "return": "Integer", "signature": "Integer parsePort(String configPort)", "full_signature": "private Integer parsePort(String configPort)", "class_method_signature": "ServiceConfig.parsePort(String configPort)", "testcase": false, "constructor": false}, {"identifier": "getValueFromConfig", "parameters": "(ProtocolConfig protocolConfig, String key)", "modifiers": "private", "return": "String", "signature": "String getValueFromConfig(ProtocolConfig protocolConfig, String key)", "full_signature": "private String getValueFromConfig(ProtocolConfig protocolConfig, String key)", "class_method_signature": "ServiceConfig.getValueFromConfig(ProtocolConfig protocolConfig, String key)", "testcase": false, "constructor": false}, {"identifier": "getRandomPort", "parameters": "(String protocol)", "modifiers": "private", "return": "Integer", "signature": "Integer getRandomPort(String protocol)", "full_signature": "private Integer getRandomPort(String protocol)", "class_method_signature": "ServiceConfig.getRandomPort(String protocol)", "testcase": false, "constructor": false}, {"identifier": "putRandomPort", "parameters": "(String protocol, Integer port)", "modifiers": "private", "return": "void", "signature": "void putRandomPort(String protocol, Integer port)", "full_signature": "private void putRandomPort(String protocol, Integer port)", "class_method_signature": "ServiceConfig.putRandomPort(String protocol, Integer port)", "testcase": false, "constructor": false}, {"identifier": "postProcessConfig", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void postProcessConfig()", "full_signature": "private void postProcessConfig()", "class_method_signature": "ServiceConfig.postProcessConfig()", "testcase": false, "constructor": false}, {"identifier": "dispatch", "parameters": "(Event event)", "modifiers": "private", "return": "void", "signature": "void dispatch(Event event)", "full_signature": "private void dispatch(Event event)", "class_method_signature": "ServiceConfig.dispatch(Event event)", "testcase": false, "constructor": false}, {"identifier": "getBootstrap", "parameters": "()", "modifiers": "public", "return": "DubboBootstrap", "signature": "DubboBootstrap getBootstrap()", "full_signature": "public DubboBootstrap getBootstrap()", "class_method_signature": "ServiceConfig.getBootstrap()", "testcase": false, "constructor": false}, {"identifier": "setBootstrap", "parameters": "(DubboBootstrap bootstrap)", "modifiers": "public", "return": "void", "signature": "void setBootstrap(DubboBootstrap bootstrap)", "full_signature": "public void setBootstrap(DubboBootstrap bootstrap)", "class_method_signature": "ServiceConfig.setBootstrap(DubboBootstrap bootstrap)", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java"}, "focal_method": {"identifier": "unexport", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void unexport() {\n        if (!exported) {\n            return;\n        }\n        if (unexported) {\n            return;\n        }\n        if (!exporters.isEmpty()) {\n            for (Exporter<?> exporter : exporters) {\n                try {\n                    exporter.unexport();\n                } catch (Throwable t) {\n                    logger.warn(\"Unexpected error occured when unexport \" + exporter, t);\n                }\n            }\n            exporters.clear();\n        }\n        unexported = true;\n\n        // dispatch a ServiceConfigUnExportedEvent since 2.7.4\n        dispatch(new ServiceConfigUnexportedEvent(this));\n    }", "signature": "void unexport()", "full_signature": "public void unexport()", "class_method_signature": "ServiceConfig.unexport()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "unexport", "warn", "clear", "dispatch"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}