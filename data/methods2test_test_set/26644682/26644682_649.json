{"test_class": {"identifier": "AddLanguageToActionExtractDatePartTest", "superclass": "extends Base_2_4_0_PE_Test", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private AddLanguageToActionExtractDatePart task;", "modifier": "@Autowired\n    private", "type": "AddLanguageToActionExtractDatePart", "declarator": "task", "var_name": "task"}, {"original_string": "@Autowired\n    private PreparationRepository preparationRepository;", "modifier": "@Autowired\n    private", "type": "PreparationRepository", "declarator": "preparationRepository", "var_name": "preparationRepository"}], "file": "dataprep-upgrade/src/test/java/org/talend/dataprep/upgrade/to_2_4_0_PE/AddLanguageToActionExtractDatePartTest.java"}, "test_case": {"identifier": "shouldAddCreateNewColumnParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAddCreateNewColumnParameter() {\n        // given a datastore built with one preparation with 3 steps\n        // when\n        task.run();\n\n        // then\n        Optional<Action> extractDatePart = preparationRepository //\n                .list(PreparationActions.class) //\n                .flatMap(a -> a.getActions().stream()) //\n                .filter(a -> ExtractDateTokens.ACTION_NAME.equals(a.getName()))\n                .findAny();\n\n        assertTrue(extractDatePart.isPresent());\n        assertEquals(Locale.getDefault().getLanguage(),\n                extractDatePart.get().getParameters().get(ExtractDateTokens.LANGUAGE));\n\n    }", "signature": "void shouldAddCreateNewColumnParameter()", "full_signature": "@Test public void shouldAddCreateNewColumnParameter()", "class_method_signature": "AddLanguageToActionExtractDatePartTest.shouldAddCreateNewColumnParameter()", "testcase": true, "constructor": false, "invocations": ["run", "findAny", "filter", "flatMap", "list", "stream", "getActions", "equals", "getName", "assertTrue", "isPresent", "assertEquals", "getLanguage", "getDefault", "get", "getParameters", "get"]}, "focal_class": {"identifier": "AddLanguageToActionExtractDatePart", "superclass": "extends BaseUpgradeTaskTo_2_4_0_PE", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private PreparationRepository preparationRepository;", "modifier": "@Autowired\n    private", "type": "PreparationRepository", "declarator": "preparationRepository", "var_name": "preparationRepository"}], "methods": [{"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "AddLanguageToActionExtractDatePart.run()", "testcase": false, "constructor": false}, {"identifier": "getOrder", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getOrder()", "full_signature": "@Override public int getOrder()", "class_method_signature": "AddLanguageToActionExtractDatePart.getOrder()", "testcase": false, "constructor": false}, {"identifier": "getTarget", "parameters": "()", "modifiers": "@Override public", "return": "UpgradeTask.target", "signature": "UpgradeTask.target getTarget()", "full_signature": "@Override public UpgradeTask.target getTarget()", "class_method_signature": "AddLanguageToActionExtractDatePart.getTarget()", "testcase": false, "constructor": false}], "file": "dataprep-upgrade/src/main/java/org/talend/dataprep/upgrade/to_2_4_0_PE/AddLanguageToActionExtractDatePart.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() {\n        AddLanguageToActionExtractDatePartUpgrade.upgradeActions(preparationRepository);\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "AddLanguageToActionExtractDatePart.run()", "testcase": false, "constructor": false, "invocations": ["upgradeActions"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}