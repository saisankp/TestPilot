{"test_class": {"identifier": "PrecomputingPairwiseResnikSimilarityTest", "superclass": "extends VegetableOntologyTestBase", "interfaces": "", "fields": [{"original_string": "private PrecomputingPairwiseResnikSimilarity similarity;", "modifier": "private", "type": "PrecomputingPairwiseResnikSimilarity", "declarator": "similarity", "var_name": "similarity"}], "file": "phenol-core/src/test/java/org/monarchinitiative/phenol/ontology/similarity/PrecomputingPairwiseResnikSimilarityTest.java"}, "test_case": {"identifier": "testComputeSimilarities", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testComputeSimilarities() {\n    assertEquals(0.405, similarity.computeScore(idBeet, idBeet), 0.01);\n    assertEquals(0.0, similarity.computeScore(idBeet, idCarrot), 0.01);\n    assertEquals(0.0, similarity.computeScore(idBeet, idBlueCarrot), 0.01);\n    assertEquals(0.0, similarity.computeScore(idBeet, idPumpkin), 0.01);\n    assertEquals(0.405, similarity.computeScore(idBeet, idLeafVegetable), 0.01);\n\n    assertEquals(0.0, similarity.computeScore(idCarrot, idBeet), 0.01);\n    assertEquals(0.405, similarity.computeScore(idCarrot, idCarrot), 0.01);\n    assertEquals(0.405, similarity.computeScore(idCarrot, idBlueCarrot), 0.01);\n    assertEquals(0.0, similarity.computeScore(idCarrot, idPumpkin), 0.01);\n    assertEquals(0.0, similarity.computeScore(idCarrot, idLeafVegetable), 0.01);\n\n    assertEquals(1.098, similarity.computeScore(idBlueCarrot, idBlueCarrot), 0.01);\n    assertEquals(0.405, similarity.computeScore(idBlueCarrot, idCarrot), 0.01);\n    assertEquals(0.0, similarity.computeScore(idBlueCarrot, idBeet), 0.01);\n    assertEquals(0.0, similarity.computeScore(idBlueCarrot, idPumpkin), 0.01);\n    assertEquals(0.0, similarity.computeScore(idBlueCarrot, idLeafVegetable), 0.01);\n\n    assertEquals(0.405, similarity.computeScore(idPumpkin, idPumpkin), 0.01);\n    assertEquals(0.0, similarity.computeScore(idPumpkin, idCarrot), 0.01);\n    assertEquals(0.0, similarity.computeScore(idPumpkin, idBlueCarrot), 0.01);\n    assertEquals(0.0, similarity.computeScore(idPumpkin, idBeet), 0.01);\n    assertEquals(0.0, similarity.computeScore(idPumpkin, idLeafVegetable), 0.01);\n\n    assertEquals(0.405, similarity.computeScore(idLeafVegetable, idLeafVegetable), 0.01);\n    assertEquals(0.0, similarity.computeScore(idLeafVegetable, idPumpkin), 0.01);\n    assertEquals(0.0, similarity.computeScore(idLeafVegetable, idCarrot), 0.01);\n    assertEquals(0.0, similarity.computeScore(idLeafVegetable, idBlueCarrot), 0.01);\n    assertEquals(0.405, similarity.computeScore(idLeafVegetable, idBeet), 0.01);\n  }", "signature": "void testComputeSimilarities()", "full_signature": "@Test public void testComputeSimilarities()", "class_method_signature": "PrecomputingPairwiseResnikSimilarityTest.testComputeSimilarities()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore", "assertEquals", "computeScore"]}, "focal_class": {"identifier": "PrecomputingPairwiseResnikSimilarity", "superclass": "", "interfaces": "implements PairwiseSimilarity, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -350622665214125471L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -350622665214125471L", "var_name": "serialVersionUID"}, {"original_string": "private static final Logger LOGGER =\n      LoggerFactory.getLogger(PrecomputingPairwiseResnikSimilarity.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER =\n      LoggerFactory.getLogger(PrecomputingPairwiseResnikSimilarity.class)", "var_name": "LOGGER"}, {"original_string": "private final PrecomputedScores precomputedScores;", "modifier": "private final", "type": "PrecomputedScores", "declarator": "precomputedScores", "var_name": "precomputedScores"}, {"original_string": "private final int numThreads;", "modifier": "private final", "type": "int", "declarator": "numThreads", "var_name": "numThreads"}, {"original_string": "private final int chunkSize = 100;", "modifier": "private final", "type": "int", "declarator": "chunkSize = 100", "var_name": "chunkSize"}], "methods": [{"identifier": "PrecomputingPairwiseResnikSimilarity", "parameters": "(\n    Ontology ontology, Map<TermId, Double> termToIc, int numThreads)", "modifiers": "public", "return": "", "signature": " PrecomputingPairwiseResnikSimilarity(\n    Ontology ontology, Map<TermId, Double> termToIc, int numThreads)", "full_signature": "public  PrecomputingPairwiseResnikSimilarity(\n    Ontology ontology, Map<TermId, Double> termToIc, int numThreads)", "class_method_signature": "PrecomputingPairwiseResnikSimilarity.PrecomputingPairwiseResnikSimilarity(\n    Ontology ontology, Map<TermId, Double> termToIc, int numThreads)", "testcase": false, "constructor": true}, {"identifier": "PrecomputingPairwiseResnikSimilarity", "parameters": "(\n      Ontology ontology, Map<TermId, Double> termToIc)", "modifiers": "public", "return": "", "signature": " PrecomputingPairwiseResnikSimilarity(\n      Ontology ontology, Map<TermId, Double> termToIc)", "full_signature": "public  PrecomputingPairwiseResnikSimilarity(\n      Ontology ontology, Map<TermId, Double> termToIc)", "class_method_signature": "PrecomputingPairwiseResnikSimilarity.PrecomputingPairwiseResnikSimilarity(\n      Ontology ontology, Map<TermId, Double> termToIc)", "testcase": false, "constructor": true}, {"identifier": "precomputeScores", "parameters": "(Ontology ontology, Map<TermId, Double> termToIc)", "modifiers": "private", "return": "void", "signature": "void precomputeScores(Ontology ontology, Map<TermId, Double> termToIc)", "full_signature": "private void precomputeScores(Ontology ontology, Map<TermId, Double> termToIc)", "class_method_signature": "PrecomputingPairwiseResnikSimilarity.precomputeScores(Ontology ontology, Map<TermId, Double> termToIc)", "testcase": false, "constructor": false}, {"identifier": "computeScore", "parameters": "(TermId query, TermId target)", "modifiers": "@Override public", "return": "double", "signature": "double computeScore(TermId query, TermId target)", "full_signature": "@Override public double computeScore(TermId query, TermId target)", "class_method_signature": "PrecomputingPairwiseResnikSimilarity.computeScore(TermId query, TermId target)", "testcase": false, "constructor": false}], "file": "phenol-core/src/main/java/org/monarchinitiative/phenol/ontology/similarity/PrecomputingPairwiseResnikSimilarity.java"}, "focal_method": {"identifier": "computeScore", "parameters": "(TermId query, TermId target)", "modifiers": "@Override public", "return": "double", "body": "@Override\n  public double computeScore(TermId query, TermId target) {\n    return precomputedScores.get(query, target);\n  }", "signature": "double computeScore(TermId query, TermId target)", "full_signature": "@Override public double computeScore(TermId query, TermId target)", "class_method_signature": "PrecomputingPairwiseResnikSimilarity.computeScore(TermId query, TermId target)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}