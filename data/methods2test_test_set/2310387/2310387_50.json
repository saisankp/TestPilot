{"test_class": {"identifier": "ExecScriptTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String space = \" \";", "modifier": "private static", "type": "String", "declarator": "space = \" \"", "var_name": "space"}, {"original_string": "private static String quote = \"'\";", "modifier": "private static", "type": "String", "declarator": "quote = \"'\"", "var_name": "quote"}], "file": "medium/src/test/java/net/sourceforge/cruisecontrol/builders/ExecScriptTest.java"}, "test_case": {"identifier": "testGetCommandLineArgsWin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCommandLineArgsWin() throws CruiseControlException {\n        String testExecCmd = \"dir\";\n        String[] simpleCmd = { testExecCmd };\n\n        ExecScript script = createExecScript(testExecCmd, null);\n        TestUtil.assertArray(\"simpleCmd\", simpleCmd, script.buildCommandline().getCommandline());\n\n        String testExecArgs = \"C:\\\\temp\";\n        script = createExecScript(testExecCmd, testExecArgs);\n        String[] detailedCmd = { testExecCmd, testExecArgs };\n        TestUtil.assertArray(\"detailedCmd\", detailedCmd, script.buildCommandline().getCommandline());\n    }", "signature": "void testGetCommandLineArgsWin()", "full_signature": "@Test public void testGetCommandLineArgsWin()", "class_method_signature": "ExecScriptTest.testGetCommandLineArgsWin()", "testcase": true, "constructor": false, "invocations": ["createExecScript", "assertArray", "getCommandline", "buildCommandline", "createExecScript", "assertArray", "getCommandline", "buildCommandline"]}, "focal_class": {"identifier": "ExecScript", "superclass": "", "interfaces": "implements Script, StreamConsumer", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(ExecScript.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(ExecScript.class)", "var_name": "LOG"}, {"original_string": "private String execCommand;", "modifier": "private", "type": "String", "declarator": "execCommand", "var_name": "execCommand"}, {"original_string": "private String execArgs;", "modifier": "private", "type": "String", "declarator": "execArgs", "var_name": "execArgs"}, {"original_string": "private String errorStr;", "modifier": "private", "type": "String", "declarator": "errorStr", "var_name": "errorStr"}, {"original_string": "private Progress progress;", "modifier": "private", "type": "Progress", "declarator": "progress", "var_name": "progress"}, {"original_string": "private int exitCode;", "modifier": "private", "type": "int", "declarator": "exitCode", "var_name": "exitCode"}, {"original_string": "private boolean foundError = false;", "modifier": "private", "type": "boolean", "declarator": "foundError = false", "var_name": "foundError"}, {"original_string": "private Element buildLogElement;", "modifier": "private", "type": "Element", "declarator": "buildLogElement", "var_name": "buildLogElement"}, {"original_string": "private Element currentElement = null;", "modifier": "private", "type": "Element", "declarator": "currentElement = null", "var_name": "currentElement"}], "methods": [{"identifier": "buildCommandline", "parameters": "()", "modifiers": "public", "return": "Commandline", "signature": "Commandline buildCommandline()", "full_signature": "public Commandline buildCommandline()", "class_method_signature": "ExecScript.buildCommandline()", "testcase": false, "constructor": false}, {"identifier": "consumeLine", "parameters": "(final String line)", "modifiers": "public synchronized", "return": "void", "signature": "void consumeLine(final String line)", "full_signature": "public synchronized void consumeLine(final String line)", "class_method_signature": "ExecScript.consumeLine(final String line)", "testcase": false, "constructor": false}, {"identifier": "messageFromLine", "parameters": "(final String line, String level)", "modifiers": "private", "return": "Element", "signature": "Element messageFromLine(final String line, String level)", "full_signature": "private Element messageFromLine(final String line, String level)", "class_method_signature": "ExecScript.messageFromLine(final String line, String level)", "testcase": false, "constructor": false}, {"identifier": "flushCurrentElement", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void flushCurrentElement()", "full_signature": "protected void flushCurrentElement()", "class_method_signature": "ExecScript.flushCurrentElement()", "testcase": false, "constructor": false}, {"identifier": "setBuildLogHeader", "parameters": "(Element buildLogElement)", "modifiers": "public", "return": "Element", "signature": "Element setBuildLogHeader(Element buildLogElement)", "full_signature": "public Element setBuildLogHeader(Element buildLogElement)", "class_method_signature": "ExecScript.setBuildLogHeader(Element buildLogElement)", "testcase": false, "constructor": false}, {"identifier": "setExecArgs", "parameters": "(String execArgs)", "modifiers": "public", "return": "void", "signature": "void setExecArgs(String execArgs)", "full_signature": "public void setExecArgs(String execArgs)", "class_method_signature": "ExecScript.setExecArgs(String execArgs)", "testcase": false, "constructor": false}, {"identifier": "setExecCommand", "parameters": "(String execCommand)", "modifiers": "public", "return": "void", "signature": "void setExecCommand(String execCommand)", "full_signature": "public void setExecCommand(String execCommand)", "class_method_signature": "ExecScript.setExecCommand(String execCommand)", "testcase": false, "constructor": false}, {"identifier": "getExitCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getExitCode()", "full_signature": "public int getExitCode()", "class_method_signature": "ExecScript.getExitCode()", "testcase": false, "constructor": false}, {"identifier": "setExitCode", "parameters": "(int exitCode)", "modifiers": "public", "return": "void", "signature": "void setExitCode(int exitCode)", "full_signature": "public void setExitCode(int exitCode)", "class_method_signature": "ExecScript.setExitCode(int exitCode)", "testcase": false, "constructor": false}, {"identifier": "setErrorStr", "parameters": "(String errStr)", "modifiers": "public", "return": "void", "signature": "void setErrorStr(String errStr)", "full_signature": "public void setErrorStr(String errStr)", "class_method_signature": "ExecScript.setErrorStr(String errStr)", "testcase": false, "constructor": false}, {"identifier": "setBuildLogElement", "parameters": "(Element buildLogElement)", "modifiers": "public", "return": "void", "signature": "void setBuildLogElement(Element buildLogElement)", "full_signature": "public void setBuildLogElement(Element buildLogElement)", "class_method_signature": "ExecScript.setBuildLogElement(Element buildLogElement)", "testcase": false, "constructor": false}, {"identifier": "setProgress", "parameters": "(final Progress progress)", "modifiers": "public", "return": "void", "signature": "void setProgress(final Progress progress)", "full_signature": "public void setProgress(final Progress progress)", "class_method_signature": "ExecScript.setProgress(final Progress progress)", "testcase": false, "constructor": false}, {"identifier": "wasError", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean wasError()", "full_signature": "public boolean wasError()", "class_method_signature": "ExecScript.wasError()", "testcase": false, "constructor": false}], "file": "medium/src/main/java/net/sourceforge/cruisecontrol/builders/ExecScript.java"}, "focal_method": {"identifier": "buildCommandline", "parameters": "()", "modifiers": "public", "return": "Commandline", "body": "public Commandline buildCommandline() throws CruiseControlException {\n        Commandline cmdLine = new Commandline();\n\n        // make sure we have a command\n        if (execCommand != null) {\n            cmdLine.setExecutable(execCommand);\n        } else {\n            throw new CruiseControlException(\"no command to be executed\");\n        }\n\n        // add the arguments if necessary\n        if (execArgs != null) {\n            cmdLine.addArguments(Commandline.translateCommandline(execArgs));\n        }\n\n        // log the command if debug is enabled\n        if (LOG.isDebugEnabled()) {\n            final StringBuilder sb = new StringBuilder();\n            sb.append(\"Executing Command: \");\n            final String[] args = cmdLine.getCommandline();\n            for (final String arg : args) {\n                sb.append(arg);\n                sb.append(\" \");\n            }\n            LOG.debug(sb.toString());\n        }\n        return cmdLine;\n    }", "signature": "Commandline buildCommandline()", "full_signature": "public Commandline buildCommandline()", "class_method_signature": "ExecScript.buildCommandline()", "testcase": false, "constructor": false, "invocations": ["setExecutable", "addArguments", "translateCommandline", "isDebugEnabled", "append", "getCommandline", "append", "append", "debug", "toString"]}, "repository": {"repo_id": 2310387, "url": "https://github.com/builddoctor/JavaBuildComparison", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 14939, "license": "licensed"}}