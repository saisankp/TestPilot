{"test_class": {"identifier": "ConfigurationDaoHelperTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ConfigurationDao configurationDao;", "modifier": "@Mock\n    private", "type": "ConfigurationDao", "declarator": "configurationDao", "var_name": "configurationDao"}, {"original_string": "@InjectMocks\n    private ConfigurationDaoHelper configurationDaoHelper;", "modifier": "@InjectMocks\n    private", "type": "ConfigurationDaoHelper", "declarator": "configurationDaoHelper", "var_name": "configurationDaoHelper"}, {"original_string": "@Mock\n    private HerdStringHelper herdStringHelper;", "modifier": "@Mock\n    private", "type": "HerdStringHelper", "declarator": "herdStringHelper", "var_name": "herdStringHelper"}, {"original_string": "@Mock\n    private XmlHelper xmlHelper;", "modifier": "@Mock\n    private", "type": "XmlHelper", "declarator": "xmlHelper", "var_name": "xmlHelper"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/ConfigurationDaoHelperTest.java"}, "test_case": {"identifier": "testCheckNotAllowedMethodBlockedMethodListIsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckNotAllowedMethodBlockedMethodListIsNull()\n    {\n        // Create a mock configuration entity.\n        ConfigurationEntity configurationEntity = mock(ConfigurationEntity.class);\n        when(configurationEntity.getValueClob()).thenReturn(null);\n\n        // Mock the external calls.\n        when(configurationDao.getConfigurationByKey(ConfigurationValue.NOT_ALLOWED_HERD_ENDPOINTS.getKey())).thenReturn(configurationEntity);\n\n        // Call the method under test.\n        configurationDaoHelper.checkNotAllowedMethod(METHOD_NAME);\n\n        // Verify the external calls.\n        verify(configurationDao).getConfigurationByKey(ConfigurationValue.NOT_ALLOWED_HERD_ENDPOINTS.getKey());\n        verifyNoMoreInteractionsHelper();\n    }", "signature": "void testCheckNotAllowedMethodBlockedMethodListIsNull()", "full_signature": "@Test public void testCheckNotAllowedMethodBlockedMethodListIsNull()", "class_method_signature": "ConfigurationDaoHelperTest.testCheckNotAllowedMethodBlockedMethodListIsNull()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getValueClob", "thenReturn", "when", "getConfigurationByKey", "getKey", "checkNotAllowedMethod", "getConfigurationByKey", "verify", "getKey", "verifyNoMoreInteractionsHelper"]}, "focal_class": {"identifier": "ConfigurationDaoHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ConfigurationDao configurationDao;", "modifier": "@Autowired\n    private", "type": "ConfigurationDao", "declarator": "configurationDao", "var_name": "configurationDao"}, {"original_string": "@Autowired\n    private HerdStringHelper herdStringHelper;", "modifier": "@Autowired\n    private", "type": "HerdStringHelper", "declarator": "herdStringHelper", "var_name": "herdStringHelper"}, {"original_string": "@Autowired\n    private XmlHelper xmlHelper;", "modifier": "@Autowired\n    private", "type": "XmlHelper", "declarator": "xmlHelper", "var_name": "xmlHelper"}], "methods": [{"identifier": "checkNotAllowedMethod", "parameters": "(String methodName)", "modifiers": "public", "return": "void", "signature": "void checkNotAllowedMethod(String methodName)", "full_signature": "public void checkNotAllowedMethod(String methodName)", "class_method_signature": "ConfigurationDaoHelper.checkNotAllowedMethod(String methodName)", "testcase": false, "constructor": false}, {"identifier": "getClobProperty", "parameters": "(String configurationKey)", "modifiers": "public", "return": "String", "signature": "String getClobProperty(String configurationKey)", "full_signature": "public String getClobProperty(String configurationKey)", "class_method_signature": "ConfigurationDaoHelper.getClobProperty(String configurationKey)", "testcase": false, "constructor": false}, {"identifier": "getXmlClobPropertyAndUnmarshallToObject", "parameters": "(Class<T> classType, String configurationKey)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T getXmlClobPropertyAndUnmarshallToObject(Class<T> classType, String configurationKey)", "full_signature": "@SuppressWarnings(\"unchecked\") public T getXmlClobPropertyAndUnmarshallToObject(Class<T> classType, String configurationKey)", "class_method_signature": "ConfigurationDaoHelper.getXmlClobPropertyAndUnmarshallToObject(Class<T> classType, String configurationKey)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/ConfigurationDaoHelper.java"}, "focal_method": {"identifier": "checkNotAllowedMethod", "parameters": "(String methodName)", "modifiers": "public", "return": "void", "body": "public void checkNotAllowedMethod(String methodName) throws MethodNotAllowedException\n    {\n        boolean needToBlock = false;\n        ConfigurationEntity configurationEntity = configurationDao.getConfigurationByKey(ConfigurationValue.NOT_ALLOWED_HERD_ENDPOINTS.getKey());\n        if (configurationEntity != null && StringUtils.isNotBlank(configurationEntity.getValueClob()))\n        {\n            List<String> methodsToBeBlocked = herdStringHelper.splitStringWithDefaultDelimiter(configurationEntity.getValueClob());\n            needToBlock = methodsToBeBlocked.contains(methodName);\n        }\n\n        if (needToBlock)\n        {\n            throw new MethodNotAllowedException(\"The requested method is not allowed.\");\n        }\n    }", "signature": "void checkNotAllowedMethod(String methodName)", "full_signature": "public void checkNotAllowedMethod(String methodName)", "class_method_signature": "ConfigurationDaoHelper.checkNotAllowedMethod(String methodName)", "testcase": false, "constructor": false, "invocations": ["getConfigurationByKey", "getKey", "isNotBlank", "getValueClob", "splitStringWithDefaultDelimiter", "getValueClob", "contains"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}