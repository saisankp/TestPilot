{"test_class": {"identifier": "BerksfileTest", "superclass": "", "interfaces": "", "fields": [], "file": "karamel-common/src/test/java/se/kth/karamel/common/cookbookmeta/BerksfileTest.java"}, "test_case": {"identifier": "testHopsworksBerksfile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testHopsworksBerksfile() throws CookbookUrlException {\n    String content = \"Encoding.default_external = \\\"UTF-8\\\"\\n\"\n        + \"source 'https://supermarket.chef.io'\\n\"\n        + \"\\n\"\n        + \"\\n\"\n        + \"cookbook 'java'\\n\"\n        + \"cookbook 'kagent', github: \\\"karamelchef/kagent-chef\\\", branch: \\\"master\\\"\\n\"\n        + \"cookbook 'apache_hadoop', github: \\\"hopshadoop/apache-hadoop-chef\\\", branch: \\\"master\\\"\\n\"\n        + \"cookbook 'hops', github: \\\"hopshadoop/hops-hadoop-chef\\\", branch: \\\"master\\\"\\n\"\n        + \"cookbook 'ndb', github: \\\"hopshadoop/ndb-chef\\\", branch: \\\"master\\\"\\n\"\n        + \"cookbook 'hadoop_spark', github: \\\"hopshadoop/spark-chef\\\", branch: \\\"master\\\"\\n\"\n        + \"cookbook 'flink', github: \\\"hopshadoop/flink-chef\\\", branch: \\\"master\\\"\\n\"\n        + \"cookbook 'zeppelin', github: \\\"hopshadoop/zeppelin-chef\\\", branch: \\\"master\\\"\\n\"\n        + \"cookbook 'livy', github: \\\"hopshadoop/livy-chef\\\", branch: \\\"master\\\"\\n\"\n        + \"cookbook 'drelephant', github: \\\"hopshadoop/dr-elephant-chef\\\", branch: \\\"master\\\"\\n\"\n        + \"cookbook 'tensorflow', github: \\\"hopshadoop/tensorflow-chef\\\", branch: \\\"master\\\"\\n\"\n        + \"\\n\"\n        + \"cookbook 'epipe', github: \\\"hopshadoop/epipe-chef\\\", branch: \\\"master\\\"\\n\"\n        + \"cookbook 'adam', github: \\\"biobankcloud/adam-chef\\\", branch: \\\"master\\\"\\n\"\n        + \"cookbook 'dela', github: \\\"hopshadoop/dela-chef\\\", branch: \\\"master\\\"\\n\"\n        + \"\\n\"\n        + \"cookbook 'kzookeeper', github: \\\"hopshadoop/kzookeeper\\\", branch: \\\"master\\\"\\n\"\n        + \"cookbook 'kkafka', github: \\\"hopshadoop/kafka-cookbook\\\", branch: \\\"master\\\"\\n\"\n        + \"cookbook 'elastic', github: \\\"hopshadoop/elasticsearch-chef\\\", branch: \\\"master\\\"\\n\"\n        // + \"cookbook 'kibana', github: \\\"hopshadoop/kibana-chef\\\", branch: \\\"master\\\"\\n\"\n        + \"\\n\"\n        + \"cookbook 'hopsmonitor', github: \\\"hopshadoop/hopsmonitor-chef\\\", branch: \\\"master\\\"\\n\"\n        + \"#cookbook 'chef-grafana', github: \\\"chef-cookbooks/chef-grafana\\\", branch: \\\"master\\\"\\n\"\n        + \"cookbook 'graphite', '~> 1.0.4'\\n\"\n        + \"cookbook 'simple-logstash', '~> 0.2.4'\\n\"\n        + \"\\n\"\n        + \"cookbook 'glassfish', github: \\\"realityforge/chef-glassfish\\\", branch: \\\"master\\\"\\n\"\n        + \"\\n\"\n        + \"cookbook 'compat_resource', '~> 12.7.3'\\n\"\n        + \"cookbook 'ulimit2', '~> 0.2.0'\\n\"\n        + \"cookbook 'authbind', '~> 0.1.10'\\n\"\n        + \"cookbook 'ntp', '~> 2.0.0'\\n\"\n        + \"\\n\"\n        + \"#cookbook 'collectd', github: \\\"hopshadoop/collectd-chef\\\", branch: \\\"master\\\"\\n\"\n        + \"\\n\"\n        + \"metadata\";\n\n    Berksfile berksfile = new Berksfile(content);\n    Assert.assertFalse(berksfile.getDeps().containsKey(\"java\"));\n\n    Assert.assertTrue(berksfile.getDeps().containsKey(\"kagent\"));\n    Assert.assertEquals(\"master\", berksfile.getDeps().get(\"kagent\").getBranch());\n\n    Assert.assertTrue(berksfile.getDeps().containsKey(\"apache_hadoop\"));\n    Assert.assertEquals(\"master\", berksfile.getDeps().get(\"apache_hadoop\").getBranch());\n\n    Assert.assertTrue(berksfile.getDeps().containsKey(\"hops\"));\n    Assert.assertEquals(\"master\", berksfile.getDeps().get(\"hops\").getBranch());\n\n    Assert.assertTrue(berksfile.getDeps().containsKey(\"ndb\"));\n    Assert.assertEquals(\"master\", berksfile.getDeps().get(\"ndb\").getBranch());\n\n    Assert.assertTrue(berksfile.getDeps().containsKey(\"hadoop_spark\"));\n    Assert.assertEquals(\"master\", berksfile.getDeps().get(\"hadoop_spark\").getBranch());\n\n    Assert.assertTrue(berksfile.getDeps().containsKey(\"flink\"));\n    Assert.assertEquals(\"master\", berksfile.getDeps().get(\"flink\").getBranch());\n\n    Assert.assertTrue(berksfile.getDeps().containsKey(\"zeppelin\"));\n    Assert.assertEquals(\"master\", berksfile.getDeps().get(\"zeppelin\").getBranch());\n\n    Assert.assertTrue(berksfile.getDeps().containsKey(\"livy\"));\n    Assert.assertEquals(\"master\", berksfile.getDeps().get(\"livy\").getBranch());\n\n    Assert.assertTrue(berksfile.getDeps().containsKey(\"drelephant\"));\n    Assert.assertEquals(\"master\", berksfile.getDeps().get(\"drelephant\").getBranch());\n\n    Assert.assertTrue(berksfile.getDeps().containsKey(\"tensorflow\"));\n    Assert.assertEquals(\"master\", berksfile.getDeps().get(\"tensorflow\").getBranch());\n\n    Assert.assertTrue(berksfile.getDeps().containsKey(\"epipe\"));\n    Assert.assertEquals(\"master\", berksfile.getDeps().get(\"epipe\").getBranch());\n\n    Assert.assertTrue(berksfile.getDeps().containsKey(\"adam\"));\n    Assert.assertEquals(\"master\", berksfile.getDeps().get(\"adam\").getBranch());\n\n    Assert.assertTrue(berksfile.getDeps().containsKey(\"dela\"));\n    Assert.assertEquals(\"master\", berksfile.getDeps().get(\"dela\").getBranch());\n\n    Assert.assertTrue(berksfile.getDeps().containsKey(\"kzookeeper\"));\n    Assert.assertEquals(\"master\", berksfile.getDeps().get(\"kzookeeper\").getBranch());\n\n    Assert.assertTrue(berksfile.getDeps().containsKey(\"kkafka\"));\n    Assert.assertEquals(\"master\", berksfile.getDeps().get(\"kkafka\").getBranch());\n\n    Assert.assertTrue(berksfile.getDeps().containsKey(\"elastic\"));\n    Assert.assertEquals(\"master\", berksfile.getDeps().get(\"elastic\").getBranch());\n\n    //Assert.assertTrue(berksfile.getDeps().containsKey(\"kibana\"));\n    //Assert.assertEquals(\"master\", berksfile.getDeps().get(\"kibana\").getBranch());\n\n    Assert.assertTrue(berksfile.getDeps().containsKey(\"hopsmonitor\"));\n    Assert.assertEquals(\"master\", berksfile.getDeps().get(\"hopsmonitor\").getBranch());\n\n    Assert.assertFalse(berksfile.getDeps().containsKey(\"chef-grafana\"));\n\n    Assert.assertFalse(berksfile.getDeps().containsKey(\"graphite\"));\n\n    Assert.assertFalse(berksfile.getDeps().containsKey(\"simple-logstash\"));\n\n    Assert.assertTrue(berksfile.getDeps().containsKey(\"glassfish\"));\n    Assert.assertEquals(\"master\", berksfile.getDeps().get(\"glassfish\").getBranch());\n\n    Assert.assertFalse(berksfile.getDeps().containsKey(\"compat_resource\"));\n\n    Assert.assertFalse(berksfile.getDeps().containsKey(\"ulimit2\"));\n\n    Assert.assertFalse(berksfile.getDeps().containsKey(\"authbind\"));\n\n    Assert.assertFalse(berksfile.getDeps().containsKey(\"authbind\"));\n\n    Assert.assertFalse(berksfile.getDeps().containsKey(\"collectd\"));\n\n  }", "signature": "void testHopsworksBerksfile()", "full_signature": "@Test public void testHopsworksBerksfile()", "class_method_signature": "BerksfileTest.testHopsworksBerksfile()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "containsKey", "getDeps", "assertTrue", "containsKey", "getDeps", "assertEquals", "getBranch", "get", "getDeps", "assertTrue", "containsKey", "getDeps", "assertEquals", "getBranch", "get", "getDeps", "assertTrue", "containsKey", "getDeps", "assertEquals", "getBranch", "get", "getDeps", "assertTrue", "containsKey", "getDeps", "assertEquals", "getBranch", "get", "getDeps", "assertTrue", "containsKey", "getDeps", "assertEquals", "getBranch", "get", "getDeps", "assertTrue", "containsKey", "getDeps", "assertEquals", "getBranch", "get", "getDeps", "assertTrue", "containsKey", "getDeps", "assertEquals", "getBranch", "get", "getDeps", "assertTrue", "containsKey", "getDeps", "assertEquals", "getBranch", "get", "getDeps", "assertTrue", "containsKey", "getDeps", "assertEquals", "getBranch", "get", "getDeps", "assertTrue", "containsKey", "getDeps", "assertEquals", "getBranch", "get", "getDeps", "assertTrue", "containsKey", "getDeps", "assertEquals", "getBranch", "get", "getDeps", "assertTrue", "containsKey", "getDeps", "assertEquals", "getBranch", "get", "getDeps", "assertTrue", "containsKey", "getDeps", "assertEquals", "getBranch", "get", "getDeps", "assertTrue", "containsKey", "getDeps", "assertEquals", "getBranch", "get", "getDeps", "assertTrue", "containsKey", "getDeps", "assertEquals", "getBranch", "get", "getDeps", "assertTrue", "containsKey", "getDeps", "assertEquals", "getBranch", "get", "getDeps", "assertTrue", "containsKey", "getDeps", "assertEquals", "getBranch", "get", "getDeps", "assertFalse", "containsKey", "getDeps", "assertFalse", "containsKey", "getDeps", "assertFalse", "containsKey", "getDeps", "assertTrue", "containsKey", "getDeps", "assertEquals", "getBranch", "get", "getDeps", "assertFalse", "containsKey", "getDeps", "assertFalse", "containsKey", "getDeps", "assertFalse", "containsKey", "getDeps", "assertFalse", "containsKey", "getDeps", "assertFalse", "containsKey", "getDeps"]}, "focal_class": {"identifier": "Berksfile", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(Berksfile.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(Berksfile.class)", "var_name": "logger"}, {"original_string": "private final List<String> fileLines;", "modifier": "private final", "type": "List<String>", "declarator": "fileLines", "var_name": "fileLines"}, {"original_string": "private final Map<String, Cookbook> deps = new HashMap<>();", "modifier": "private final", "type": "Map<String, Cookbook>", "declarator": "deps = new HashMap<>()", "var_name": "deps"}, {"original_string": "public static Pattern LINE_PATTERN = Pattern.compile(\n      \"^cookbook\\\\s*(\\\\'[^,^'^\\\\\\\"]+\\\\'|\\\\\\\"[^,^'^\\\\\\\"]+\\\\\\\")\\\\s*,\"\n      + \"\\\\s*github\\\\s*:\\\\s*(\\\\'[^,^'^\\\\\\\"]+\\\\'|\\\\\\\"[^,^'^\\\\\\\"]+\\\\\\\")\\\\s*\"\n      + \"(,\\\\s*(branch|tag|version)\\\\s*:\\\\s*(\\\\'[^,^'^\\\\\\\"]+\\\\'|\\\\\\\"[^,^'^\\\\\\\"]+\\\\\\\")\\\\s*)?$\");", "modifier": "public static", "type": "Pattern", "declarator": "LINE_PATTERN = Pattern.compile(\n      \"^cookbook\\\\s*(\\\\'[^,^'^\\\\\\\"]+\\\\'|\\\\\\\"[^,^'^\\\\\\\"]+\\\\\\\")\\\\s*,\"\n      + \"\\\\s*github\\\\s*:\\\\s*(\\\\'[^,^'^\\\\\\\"]+\\\\'|\\\\\\\"[^,^'^\\\\\\\"]+\\\\\\\")\\\\s*\"\n      + \"(,\\\\s*(branch|tag|version)\\\\s*:\\\\s*(\\\\'[^,^'^\\\\\\\"]+\\\\'|\\\\\\\"[^,^'^\\\\\\\"]+\\\\\\\")\\\\s*)?$\")", "var_name": "LINE_PATTERN"}, {"original_string": "public static Set<String> validUrls = new HashSet<>();", "modifier": "public static", "type": "Set<String>", "declarator": "validUrls = new HashSet<>()", "var_name": "validUrls"}], "methods": [{"identifier": "Berksfile", "parameters": "(String content)", "modifiers": "public", "return": "", "signature": " Berksfile(String content)", "full_signature": "public  Berksfile(String content)", "class_method_signature": "Berksfile.Berksfile(String content)", "testcase": false, "constructor": true}, {"identifier": "getDeps", "parameters": "()", "modifiers": "public", "return": "Map<String, Cookbook>", "signature": "Map<String, Cookbook> getDeps()", "full_signature": "public Map<String, Cookbook> getDeps()", "class_method_signature": "Berksfile.getDeps()", "testcase": false, "constructor": false}, {"identifier": "loadDependencies", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadDependencies()", "full_signature": "private void loadDependencies()", "class_method_signature": "Berksfile.loadDependencies()", "testcase": false, "constructor": false}, {"identifier": "validateGithubUrls", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validateGithubUrls()", "full_signature": "private void validateGithubUrls()", "class_method_signature": "Berksfile.validateGithubUrls()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Berksfile.toString()", "testcase": false, "constructor": false}], "file": "karamel-common/src/main/java/se/kth/karamel/common/cookbookmeta/Berksfile.java"}, "focal_method": {"identifier": "getDeps", "parameters": "()", "modifiers": "public", "return": "Map<String, Cookbook>", "body": "public Map<String, Cookbook> getDeps() {\n    return deps;\n  }", "signature": "Map<String, Cookbook> getDeps()", "full_signature": "public Map<String, Cookbook> getDeps()", "class_method_signature": "Berksfile.getDeps()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 29383909, "url": "https://github.com/karamelchef/karamel", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 30, "size": 12029, "license": "licensed"}}