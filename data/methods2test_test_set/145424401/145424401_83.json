{"test_class": {"identifier": "FileComparatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "patch-analyzer/src/test/java/org/eclipse/steady/patcha/FileComparatorTest.java"}, "test_case": {"identifier": "testFileComparatorOnPy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFileComparatorOnPy() {\n    // Create instance of FileComparator\n    try {\n      final FileComparator c =\n          new FileComparator(\n              new File(\"./src/test/resources/flask-oidc_e4ce5/flask_oidc/__init__.py\"),\n              new File(\"./src/test/resources/flask-oidc_f2ef8/flask_oidc/__init__.py\"),\n              null,\n              null,\n              null,\n              null);\n      final Set<ConstructChange> changes = c.identifyChanges();\n      for (ConstructChange chg : changes) System.out.println(chg);\n      assertEquals(5, changes.size());\n    } catch (IOException e) {\n      System.err.println(e.getMessage());\n      assertTrue(false);\n    } catch (FileAnalysisException e) {\n      System.err.println(e.getMessage());\n      assertTrue(false);\n    }\n  }", "signature": "void testFileComparatorOnPy()", "full_signature": "@Test public void testFileComparatorOnPy()", "class_method_signature": "FileComparatorTest.testFileComparatorOnPy()", "testcase": true, "constructor": false, "invocations": ["identifyChanges", "println", "assertEquals", "size", "println", "getMessage", "assertTrue", "println", "getMessage", "assertTrue"]}, "focal_class": {"identifier": "FileComparator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}, {"original_string": "private FileAnalyzer defAnalyzer, fixAnalyzer = null;", "modifier": "private", "type": "FileAnalyzer", "declarator": "defAnalyzer", "var_name": "defAnalyzer"}, {"original_string": "private Set<ConstructChange> changes = null;", "modifier": "private", "type": "Set<ConstructChange>", "declarator": "changes = null", "var_name": "changes"}, {"original_string": "private String revision = null;", "modifier": "private", "type": "String", "declarator": "revision = null", "var_name": "revision"}, {"original_string": "private String repo = null;", "modifier": "private", "type": "String", "declarator": "repo = null", "var_name": "repo"}, {"original_string": "private String repoPath = null;", "modifier": "private", "type": "String", "declarator": "repoPath = null", "var_name": "repoPath"}, {"original_string": "private String timeStamp = null;", "modifier": "private", "type": "String", "declarator": "timeStamp = null", "var_name": "timeStamp"}], "methods": [{"identifier": "FileComparator", "parameters": "(FileChange _c, String _rev, String _time_stamp)", "modifiers": "public", "return": "", "signature": " FileComparator(FileChange _c, String _rev, String _time_stamp)", "full_signature": "public  FileComparator(FileChange _c, String _rev, String _time_stamp)", "class_method_signature": "FileComparator.FileComparator(FileChange _c, String _rev, String _time_stamp)", "testcase": false, "constructor": true}, {"identifier": "FileComparator", "parameters": "(\n      File _def, File _fix, String _rev, String _repo, String _repo_path, String _time_stamp)", "modifiers": "public", "return": "", "signature": " FileComparator(\n      File _def, File _fix, String _rev, String _repo, String _repo_path, String _time_stamp)", "full_signature": "public  FileComparator(\n      File _def, File _fix, String _rev, String _repo, String _repo_path, String _time_stamp)", "class_method_signature": "FileComparator.FileComparator(\n      File _def, File _fix, String _rev, String _repo, String _repo_path, String _time_stamp)", "testcase": false, "constructor": true}, {"identifier": "identifyChanges", "parameters": "()", "modifiers": "public", "return": "Set<ConstructChange>", "signature": "Set<ConstructChange> identifyChanges()", "full_signature": "public Set<ConstructChange> identifyChanges()", "class_method_signature": "FileComparator.identifyChanges()", "testcase": false, "constructor": false}], "file": "patch-analyzer/src/main/java/org/eclipse/steady/patcha/FileComparator.java"}, "focal_method": {"identifier": "identifyChanges", "parameters": "()", "modifiers": "public", "return": "Set<ConstructChange>", "body": "public Set<ConstructChange> identifyChanges() {\n    if (this.changes == null) {\n      this.changes = new TreeSet<ConstructChange>();\n\n      // Loop constructs of defective file (if any)\n      // Add to changes if construct has been modified (!equals) or does not exist any longer\n      if (this.defAnalyzer != null) {\n        try {\n          for (ConstructId key : this.defAnalyzer.getConstructs().keySet()) {\n            if (this.fixAnalyzer != null && this.fixAnalyzer.containsConstruct(key)) {\n              if (!this.defAnalyzer.getConstruct(key).equals(this.fixAnalyzer.getConstruct(key))) {\n                // Modification (MOD)\n                final ConstructChange c =\n                    new ConstructChange(\n                        this.repo,\n                        this.repoPath,\n                        this.defAnalyzer.getConstruct(key),\n                        this.fixAnalyzer.getConstruct(key),\n                        this.revision,\n                        this.timeStamp);\n\n                // Always add the construct change, no matter the signature change (if any)\n                // if(c.hasSignatureChange())\n                this.changes.add(c);\n              }\n            } else {\n              this.changes.add(\n                  new ConstructChange(\n                      this.repo,\n                      this.repoPath,\n                      this.defAnalyzer.getConstruct(key),\n                      null,\n                      this.revision,\n                      this.timeStamp));\n            }\n          }\n        } catch (FileAnalysisException e) {\n          FileComparator.log.error(\n              \"Error while comparing defective and fixed version: \" + e.getMessage(), e);\n        }\n      }\n      // Loop constructs of fixed file (if any)\n      // Add to changes if construct has been modified (!equals) or does not exist any longer\n      if (this.fixAnalyzer != null) {\n        try {\n          for (ConstructId key : this.fixAnalyzer.getConstructs().keySet()) {\n            if (this.defAnalyzer != null && this.defAnalyzer.containsConstruct(key)) {\n              if (!this.fixAnalyzer.getConstruct(key).equals(this.defAnalyzer.getConstruct(key))) {\n                // Modification (MOD)\n                final ConstructChange chg =\n                    new ConstructChange(\n                        this.repo,\n                        this.repoPath,\n                        this.defAnalyzer.getConstruct(key),\n                        this.fixAnalyzer.getConstruct(key),\n                        this.revision,\n                        this.timeStamp);\n\n                // Always add the construct change if not existing yet, no matter the signature\n                // change (if any)\n                if (!this.changes.contains(chg)) // && chg.hasSignatureChange())\n                this.changes.add(chg);\n              }\n            } else {\n              this.changes.add(\n                  new ConstructChange(\n                      this.repo,\n                      this.repoPath,\n                      null,\n                      this.fixAnalyzer.getConstruct(key),\n                      this.revision,\n                      this.timeStamp));\n            }\n          }\n        } catch (FileAnalysisException e) {\n          FileComparator.log.error(\n              \"Error while comparing defective and fixed version: \" + e.getMessage(), e);\n        }\n      }\n    }\n    return changes;\n  }", "signature": "Set<ConstructChange> identifyChanges()", "full_signature": "public Set<ConstructChange> identifyChanges()", "class_method_signature": "FileComparator.identifyChanges()", "testcase": false, "constructor": false, "invocations": ["keySet", "getConstructs", "containsConstruct", "equals", "getConstruct", "getConstruct", "getConstruct", "getConstruct", "add", "add", "getConstruct", "error", "getMessage", "keySet", "getConstructs", "containsConstruct", "equals", "getConstruct", "getConstruct", "getConstruct", "getConstruct", "contains", "add", "add", "getConstruct", "error", "getMessage"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}