{"test_class": {"identifier": "RasterAsPointCollectionProcessTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NORTH = \"N\";", "modifier": "private static final", "type": "String", "declarator": "NORTH = \"N\"", "var_name": "NORTH"}, {"original_string": "private static GridCoverage2D coverage;", "modifier": "private static", "type": "GridCoverage2D", "declarator": "coverage", "var_name": "coverage"}, {"original_string": "private static GridCoverage2D inputCoverage;", "modifier": "private static", "type": "GridCoverage2D", "declarator": "inputCoverage", "var_name": "inputCoverage"}, {"original_string": "private static int pixelNumber;", "modifier": "private static", "type": "int", "declarator": "pixelNumber", "var_name": "pixelNumber"}, {"original_string": "private static RasterAsPointCollectionProcess process;", "modifier": "private static", "type": "RasterAsPointCollectionProcess", "declarator": "process", "var_name": "process"}, {"original_string": "private static String bandName;", "modifier": "private static", "type": "String", "declarator": "bandName", "var_name": "bandName"}], "file": "modules/unsupported/process-raster/src/test/java/org/geotools/process/raster/RasterAsPointCollectionProcessTest.java"}, "test_case": {"identifier": "testCoverageWithTargetCRS", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCoverageWithTargetCRS() throws MismatchedDimensionException,\n            TransformException, FactoryException {\n        // Execution of the RasterAsPointCollectionProcess setting hemisphere, scaleFactor, nearest interpolation and targetCRS\n        boolean hemisphere = true;\n        float scaleFactor = 2.0f;\n        Interpolation interp = new InterpolationNearest();\n        // Selection of the Lambert Conformal Conic CRS\n        String wkt = \"PROJCS[\\\"Lambert_Conformal_Conic\\\",\"\n                + \"GEOGCS[\\\"GCS_unknown\\\",DATUM[\\\"D_unknown\\\",\"\n                + \"SPHEROID[\\\"Sphere\\\",6367470,0]],PRIMEM[\\\"Greenwich\\\",0],\"\n                + \"UNIT[\\\"Degree\\\",0.017453292519943295]],\"\n                + \"PROJECTION[\\\"Lambert_Conformal_Conic_1SP\\\"],\"\n                + \"PARAMETER[\\\"latitude_of_origin\\\",38.5],\"\n                + \"PARAMETER[\\\"central_meridian\\\",-97.5],\" + \"PARAMETER[\\\"scale_factor\\\",1],\"\n                + \"PARAMETER[\\\"false_easting\\\",0],\"\n                + \"PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"m\\\",1.0]]\";\n        CoordinateReferenceSystem targetCRS = CRS.parseWKT(wkt);\n        SimpleFeatureCollection collection = process.execute(coverage, targetCRS, scaleFactor,\n                interp, hemisphere);\n        // Check if the points are exactly as the number of pixel number\n        Assert.assertEquals((int) (pixelNumber * scaleFactor * scaleFactor), collection.size());\n        // Check if each Point Attribute contains the same values of the Input coverage\n        checkCollectionPoints(collection, hemisphere, scaleFactor, targetCRS);\n    }", "signature": "void testCoverageWithTargetCRS()", "full_signature": "@Test public void testCoverageWithTargetCRS()", "class_method_signature": "RasterAsPointCollectionProcessTest.testCoverageWithTargetCRS()", "testcase": true, "constructor": false, "invocations": ["parseWKT", "execute", "assertEquals", "size", "checkCollectionPoints"]}, "focal_class": {"identifier": "RasterAsPointCollectionProcess", "superclass": "", "interfaces": "implements RasterProcess", "fields": [{"original_string": "protected static final Operation AFFINE = CoverageProcessor.getInstance().getOperation(\"Affine\");", "modifier": "protected static final", "type": "Operation", "declarator": "AFFINE = CoverageProcessor.getInstance().getOperation(\"Affine\")", "var_name": "AFFINE"}], "methods": [{"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d,\n            @DescribeParameter(name = \"targetCRS\", description = \"CRS in which the points will be displayed\", min=0) CoordinateReferenceSystem targetCRS,\n            @DescribeParameter(name = \"scale\", description = \"scale\",min=0, defaultValue=\"1.0f\") Float scaleFactor,\n            @DescribeParameter(name = \"interpolation\", description = \"interpolation\",min=0, defaultValue=\"InterpolationNearest\") Interpolation interpolation,\n            @DescribeParameter(name = \"emisphere\", description = \"Add Emishpere\",min=0, defaultValue=\"False\" ) Boolean emisphere)", "modifiers": "@DescribeResult(name = \"result\", description = \"Point features\") public", "return": "SimpleFeatureCollection", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d,\n            @DescribeParameter(name = \"targetCRS\", description = \"CRS in which the points will be displayed\", min=0) CoordinateReferenceSystem targetCRS,\n            @DescribeParameter(name = \"scale\", description = \"scale\",min=0, defaultValue=\"1.0f\") Float scaleFactor,\n            @DescribeParameter(name = \"interpolation\", description = \"interpolation\",min=0, defaultValue=\"InterpolationNearest\") Interpolation interpolation,\n            @DescribeParameter(name = \"emisphere\", description = \"Add Emishpere\",min=0, defaultValue=\"False\" ) Boolean emisphere)", "full_signature": "@DescribeResult(name = \"result\", description = \"Point features\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d,\n            @DescribeParameter(name = \"targetCRS\", description = \"CRS in which the points will be displayed\", min=0) CoordinateReferenceSystem targetCRS,\n            @DescribeParameter(name = \"scale\", description = \"scale\",min=0, defaultValue=\"1.0f\") Float scaleFactor,\n            @DescribeParameter(name = \"interpolation\", description = \"interpolation\",min=0, defaultValue=\"InterpolationNearest\") Interpolation interpolation,\n            @DescribeParameter(name = \"emisphere\", description = \"Add Emishpere\",min=0, defaultValue=\"False\" ) Boolean emisphere)", "class_method_signature": "RasterAsPointCollectionProcess.execute(\n            @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d,\n            @DescribeParameter(name = \"targetCRS\", description = \"CRS in which the points will be displayed\", min=0) CoordinateReferenceSystem targetCRS,\n            @DescribeParameter(name = \"scale\", description = \"scale\",min=0, defaultValue=\"1.0f\") Float scaleFactor,\n            @DescribeParameter(name = \"interpolation\", description = \"interpolation\",min=0, defaultValue=\"InterpolationNearest\") Interpolation interpolation,\n            @DescribeParameter(name = \"emisphere\", description = \"Add Emishpere\",min=0, defaultValue=\"False\" ) Boolean emisphere)", "testcase": false, "constructor": false}], "file": "modules/unsupported/process-raster/src/main/java/org/geotools/process/raster/RasterAsPointCollectionProcess.java"}, "focal_method": {"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d,\n            @DescribeParameter(name = \"targetCRS\", description = \"CRS in which the points will be displayed\", min=0) CoordinateReferenceSystem targetCRS,\n            @DescribeParameter(name = \"scale\", description = \"scale\",min=0, defaultValue=\"1.0f\") Float scaleFactor,\n            @DescribeParameter(name = \"interpolation\", description = \"interpolation\",min=0, defaultValue=\"InterpolationNearest\") Interpolation interpolation,\n            @DescribeParameter(name = \"emisphere\", description = \"Add Emishpere\",min=0, defaultValue=\"False\" ) Boolean emisphere)", "modifiers": "@DescribeResult(name = \"result\", description = \"Point features\") public", "return": "SimpleFeatureCollection", "body": "@DescribeResult(name = \"result\", description = \"Point features\")\n    public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d,\n            @DescribeParameter(name = \"targetCRS\", description = \"CRS in which the points will be displayed\", min=0) CoordinateReferenceSystem targetCRS,\n            @DescribeParameter(name = \"scale\", description = \"scale\",min=0, defaultValue=\"1.0f\") Float scaleFactor,\n            @DescribeParameter(name = \"interpolation\", description = \"interpolation\",min=0, defaultValue=\"InterpolationNearest\") Interpolation interpolation,\n            @DescribeParameter(name = \"emisphere\", description = \"Add Emishpere\",min=0, defaultValue=\"False\" ) Boolean emisphere)\n            throws ProcessException {\n        if (gc2d ==null) {\n            throw new ProcessException(\"Invalid input, source grid coverage should be not null\");\n        }\n        \n        // Get the GridEnvelope associated to the input Raster for selecting its width and height. \n        // These two values are used for check if the scale is needed \n        GridEnvelope2D gridEnv = gc2d.getGridGeometry().getGridRange2D();\n        double coverageWidth = gridEnv.getWidth();\n        double coverageHeight = gridEnv.getHeight();\n        \n        ////\n        //\n        // scale if/as needed. Also check if the scale expands the coverage dimension for at least 1 pixel. \n        //\n        ////\n        if (scaleFactor != null && (Math.abs(coverageWidth*(scaleFactor - 1f)) >=1 || Math.abs(coverageHeight*(scaleFactor - 1f)) >= 1) ) {\n            // Selection of the interpolation parameter\n            Interpolation interp = interpolation != null ? interpolation : new InterpolationNearest();\n            // Selection of the ScaleFactors in order to check if the final Raster has almost 1 pixel for Height and Width\n            double scaleX = scaleFactor;\n            double scaleY = scaleFactor;\n            // RenderedImage associated to the coverage\n            final RenderedImage imageToBescaled = gc2d.getRenderedImage();\n            \n            if (imageToBescaled != null) {\n                final SampleModel sampleModel = imageToBescaled.getSampleModel();\n                final int height = sampleModel.getHeight();\n                final int width = sampleModel.getWidth();\n                if (height * scaleFactor < 1) {\n                    scaleY = 1d/height;\n                }\n                if (width * scaleFactor < 1) {\n                   scaleX = 1d/width;\n                }\n            }\n            \n            // Execution of the Affine process\n            gc2d = new AffineProcess().execute(gc2d, scaleX,\n                    scaleY, null, null, null, null, null, interp);\n        }\n\n        // return value\n        try {\n            return new RasterAsPointFeatureCollection(gc2d, emisphere, targetCRS);\n        } catch (IOException e) {\n            throw new ProcessException(\"Unable to wrap provided grid coverage\", e);\n        }\n    }", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d,\n            @DescribeParameter(name = \"targetCRS\", description = \"CRS in which the points will be displayed\", min=0) CoordinateReferenceSystem targetCRS,\n            @DescribeParameter(name = \"scale\", description = \"scale\",min=0, defaultValue=\"1.0f\") Float scaleFactor,\n            @DescribeParameter(name = \"interpolation\", description = \"interpolation\",min=0, defaultValue=\"InterpolationNearest\") Interpolation interpolation,\n            @DescribeParameter(name = \"emisphere\", description = \"Add Emishpere\",min=0, defaultValue=\"False\" ) Boolean emisphere)", "full_signature": "@DescribeResult(name = \"result\", description = \"Point features\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d,\n            @DescribeParameter(name = \"targetCRS\", description = \"CRS in which the points will be displayed\", min=0) CoordinateReferenceSystem targetCRS,\n            @DescribeParameter(name = \"scale\", description = \"scale\",min=0, defaultValue=\"1.0f\") Float scaleFactor,\n            @DescribeParameter(name = \"interpolation\", description = \"interpolation\",min=0, defaultValue=\"InterpolationNearest\") Interpolation interpolation,\n            @DescribeParameter(name = \"emisphere\", description = \"Add Emishpere\",min=0, defaultValue=\"False\" ) Boolean emisphere)", "class_method_signature": "RasterAsPointCollectionProcess.execute(\n            @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d,\n            @DescribeParameter(name = \"targetCRS\", description = \"CRS in which the points will be displayed\", min=0) CoordinateReferenceSystem targetCRS,\n            @DescribeParameter(name = \"scale\", description = \"scale\",min=0, defaultValue=\"1.0f\") Float scaleFactor,\n            @DescribeParameter(name = \"interpolation\", description = \"interpolation\",min=0, defaultValue=\"InterpolationNearest\") Interpolation interpolation,\n            @DescribeParameter(name = \"emisphere\", description = \"Add Emishpere\",min=0, defaultValue=\"False\" ) Boolean emisphere)", "testcase": false, "constructor": false, "invocations": ["getGridRange2D", "getGridGeometry", "getWidth", "getHeight", "abs", "abs", "getRenderedImage", "getSampleModel", "getHeight", "getWidth", "execute"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}