{"test_class": {"identifier": "DssDataReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "vortex-api/src/test/java/mil/army/usace/hec/vortex/io/DssDataReaderTest.java"}, "test_case": {"identifier": "TrinityXMRG2DSSImport", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void TrinityXMRG2DSSImport() {\n        String pathToDss = new File(getClass().getResource(\"/TrinityXMRG2DSS.dss\").getFile()).toString();\n\n        DataReader reader = DataReader.builder()\n                .path(pathToDss)\n                .variable(\"///PRECIP/30MAY1997:1200/30MAY1997:1300/XMRG2DSS/\")\n                .build();\n\n        VortexGrid grid = (VortexGrid) reader.getDto(0);\n        float[] gridData = grid.data();\n\n        String pathToGtiff = new File(getClass().getResource(\"/TrinityXMRG2DSS.tiff\").getFile()).toString();\n        Dataset dataset = gdal.Open(pathToGtiff);\n\n        double[] geoTransform = dataset.GetGeoTransform();\n        double dx = geoTransform[1];\n        double dy = geoTransform[5];\n        double originY = geoTransform[3];\n        int nx = dataset.GetRasterYSize();\n        int ny = dataset.GetRasterYSize();\n        Band band = dataset.GetRasterBand(1);\n        float[] data = new float[nx * ny];\n        band.ReadRaster(0, 0, nx, ny, gdalconst.GDT_Float32, data);\n\n        dataset.delete();\n        band.delete();\n\n        assertEquals(originY, grid.originY());\n        assertEquals(dx, grid.dx());\n        assertEquals(dy, grid.dy());\n        double expectedMax = Double.MIN_VALUE;\n        double actualMax = Double.MIN_VALUE;\n        int isEqualCount = 0;\n        for (int i=0; i<data.length; i++) {\n            expectedMax = Math.max(expectedMax, data[i]);\n            actualMax = Math.max(actualMax, gridData[i]);\n            if (Double.compare(data[i], gridData[i]) == 0)\n                isEqualCount++;\n        }\n        System.out.println((double) isEqualCount / data.length);\n\n        assertEquals(expectedMax, actualMax);\n    }", "signature": "void TrinityXMRG2DSSImport()", "full_signature": "@Test void TrinityXMRG2DSSImport()", "class_method_signature": "DssDataReaderTest.TrinityXMRG2DSSImport()", "testcase": true, "constructor": false, "invocations": ["toString", "getFile", "getResource", "getClass", "build", "variable", "path", "builder", "getDto", "data", "toString", "getFile", "getResource", "getClass", "Open", "GetGeoTransform", "GetRasterYSize", "GetRasterYSize", "GetRasterBand", "ReadRaster", "delete", "delete", "assertEquals", "originY", "assertEquals", "dx", "assertEquals", "dy", "max", "max", "compare", "println", "assertEquals"]}, "focal_class": {"identifier": "DssDataReader", "superclass": "extends DataReader", "interfaces": "", "fields": [], "methods": [{"identifier": "DssDataReader", "parameters": "(DataReaderBuilder builder)", "modifiers": "", "return": "", "signature": " DssDataReader(DataReaderBuilder builder)", "full_signature": "  DssDataReader(DataReaderBuilder builder)", "class_method_signature": "DssDataReader.DssDataReader(DataReaderBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "getDtos", "parameters": "()", "modifiers": "@Override public", "return": "List<VortexData>", "signature": "List<VortexData> getDtos()", "full_signature": "@Override public List<VortexData> getDtos()", "class_method_signature": "DssDataReader.getDtos()", "testcase": false, "constructor": false}, {"identifier": "dssToDto", "parameters": "(GridData gridData)", "modifiers": "private", "return": "VortexGrid", "signature": "VortexGrid dssToDto(GridData gridData)", "full_signature": "private VortexGrid dssToDto(GridData gridData)", "class_method_signature": "DssDataReader.dssToDto(GridData gridData)", "testcase": false, "constructor": false}, {"identifier": "getVariables", "parameters": "(String pathToDss)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getVariables(String pathToDss)", "full_signature": "public static Set<String> getVariables(String pathToDss)", "class_method_signature": "DssDataReader.getVariables(String pathToDss)", "testcase": false, "constructor": false}, {"identifier": "getDtoCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDtoCount()", "full_signature": "@Override public int getDtoCount()", "class_method_signature": "DssDataReader.getDtoCount()", "testcase": false, "constructor": false}, {"identifier": "getDto", "parameters": "(int idx)", "modifiers": "@Override public", "return": "VortexData", "signature": "VortexData getDto(int idx)", "full_signature": "@Override public VortexData getDto(int idx)", "class_method_signature": "DssDataReader.getDto(int idx)", "testcase": false, "constructor": false}], "file": "vortex-api/src/main/java/mil/army/usace/hec/vortex/io/DssDataReader.java"}, "focal_method": {"identifier": "getDto", "parameters": "(int idx)", "modifiers": "@Override public", "return": "VortexData", "body": "@Override\n    public VortexData getDto(int idx) {\n        HecDSSFileAccess.setDefaultDSSFileName(path);\n        String[] paths;\n        if (variableName.contains(\"*\")) {\n            HecDssCatalog catalog = new HecDssCatalog();\n            paths = catalog.getCatalog(true, variableName);\n        } else {\n            paths = new String[1];\n            paths[0] = variableName;\n        }\n        String dssPath = paths[idx];\n        int[] status = new int[1];\n        GridData gridData = GridUtilities.retrieveGridFromDss(this.path, dssPath, status);\n        if (gridData != null) {\n            return dssToDto(gridData);\n        }\n        return null;\n    }", "signature": "VortexData getDto(int idx)", "full_signature": "@Override public VortexData getDto(int idx)", "class_method_signature": "DssDataReader.getDto(int idx)", "testcase": false, "constructor": false, "invocations": ["setDefaultDSSFileName", "contains", "getCatalog", "retrieveGridFromDss", "dssToDto"]}, "repository": {"repo_id": 193537999, "url": "https://github.com/HydrologicEngineeringCenter/Vortex", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 448543, "license": "licensed"}}