{"test_class": {"identifier": "MphChlBasisOpTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MphChlBasisOp mphChlOp;", "modifier": "private", "type": "MphChlBasisOp", "declarator": "mphChlOp", "var_name": "mphChlOp"}], "file": "s3tbx-mphchl/src/test/java/org/esa/s3tbx/mphchl/MphChlBasisOpTest.java"}, "test_case": {"identifier": "testConfigureTargetSample_withMph", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConfigureTargetSample_withMph() {\n        final TestTargetSampleConfigurer sampleConfigurer = new TestTargetSampleConfigurer();\n\n        mphChlOp.exportMph = true;\n        mphChlOp.configureTargetSamples(sampleConfigurer);\n\n        final HashMap<Integer, String> sampleMap = sampleConfigurer.getSampleMap();\n        assertEquals(6, sampleMap.size());\n        assertEquals(\"chl\", sampleMap.get(0));\n        assertEquals(\"mph_chl_flags\", sampleMap.get(1));\n        assertEquals(\"immersed_cyanobacteria\", sampleMap.get(2));\n        assertEquals(\"floating_cyanobacteria\", sampleMap.get(3));\n        assertEquals(\"floating_vegetation\", sampleMap.get(4));\n        assertEquals(\"mph\", sampleMap.get(5));\n    }", "signature": "void testConfigureTargetSample_withMph()", "full_signature": "@Test public void testConfigureTargetSample_withMph()", "class_method_signature": "MphChlBasisOpTest.testConfigureTargetSample_withMph()", "testcase": true, "constructor": false, "invocations": ["configureTargetSamples", "getSampleMap", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "MphChlBasisOp", "superclass": "extends PixelOperator", "interfaces": "", "fields": [{"original_string": "@SourceProduct(alias = \"Name\")\n    Product sourceProduct;", "modifier": "@SourceProduct(alias = \"Name\")", "type": "Product", "declarator": "sourceProduct", "var_name": "sourceProduct"}, {"original_string": "@Parameter(description = \"Expression defining pixels considered for processing.\",\n            converter = BooleanExpressionConverter.class)\n    String validPixelExpression;", "modifier": "@Parameter(description = \"Expression defining pixels considered for processing.\",\n            converter = BooleanExpressionConverter.class)", "type": "String", "declarator": "validPixelExpression", "var_name": "validPixelExpression"}, {"original_string": "@Parameter(defaultValue = \"1000.0\",\n            description = \"Maximum chlorophyll, arithmetically higher values are capped.\")\n    double cyanoMaxValue;", "modifier": "@Parameter(defaultValue = \"1000.0\",\n            description = \"Maximum chlorophyll, arithmetically higher values are capped.\")", "type": "double", "declarator": "cyanoMaxValue", "var_name": "cyanoMaxValue"}, {"original_string": "@Parameter(defaultValue = \"350.0\",\n            description = \"Chlorophyll threshold, above which all cyanobacteria dominated waters are 'float.\")\n    double chlThreshForFloatFlag;", "modifier": "@Parameter(defaultValue = \"350.0\",\n            description = \"Chlorophyll threshold, above which all cyanobacteria dominated waters are 'float.\")", "type": "double", "declarator": "chlThreshForFloatFlag", "var_name": "chlThreshForFloatFlag"}, {"original_string": "@Parameter(defaultValue = \"false\",\n            description = \"Switch to true to write 'mph' band.\")\n    boolean exportMph;", "modifier": "@Parameter(defaultValue = \"false\",\n            description = \"Switch to true to write 'mph' band.\")", "type": "boolean", "declarator": "exportMph", "var_name": "exportMph"}, {"original_string": "float[] sensorWvls;", "modifier": "", "type": "float[]", "declarator": "sensorWvls", "var_name": "sensorWvls"}, {"original_string": "VirtualBandOpImage invalidOpImage;", "modifier": "", "type": "VirtualBandOpImage", "declarator": "invalidOpImage", "var_name": "invalidOpImage"}, {"original_string": "double ratioP;", "modifier": "", "type": "double", "declarator": "ratioP", "var_name": "ratioP"}, {"original_string": "double ratioC;", "modifier": "", "type": "double", "declarator": "ratioC", "var_name": "ratioC"}, {"original_string": "double ratioB;", "modifier": "", "type": "double", "declarator": "ratioB", "var_name": "ratioB"}], "methods": [{"identifier": "computePixel", "parameters": "(int x, int y, Sample[] sourceSamples, WritableSample[] targetSamples)", "modifiers": "@Override protected", "return": "void", "signature": "void computePixel(int x, int y, Sample[] sourceSamples, WritableSample[] targetSamples)", "full_signature": "@Override protected void computePixel(int x, int y, Sample[] sourceSamples, WritableSample[] targetSamples)", "class_method_signature": "MphChlBasisOp.computePixel(int x, int y, Sample[] sourceSamples, WritableSample[] targetSamples)", "testcase": false, "constructor": false}, {"identifier": "configureTargetSamples", "parameters": "(TargetSampleConfigurer sampleConfigurer)", "modifiers": "@Override protected", "return": "void", "signature": "void configureTargetSamples(TargetSampleConfigurer sampleConfigurer)", "full_signature": "@Override protected void configureTargetSamples(TargetSampleConfigurer sampleConfigurer)", "class_method_signature": "MphChlBasisOp.configureTargetSamples(TargetSampleConfigurer sampleConfigurer)", "testcase": false, "constructor": false}, {"identifier": "configureTargetProduct", "parameters": "(ProductConfigurer productConfigurer)", "modifiers": "@Override protected", "return": "void", "signature": "void configureTargetProduct(ProductConfigurer productConfigurer)", "full_signature": "@Override protected void configureTargetProduct(ProductConfigurer productConfigurer)", "class_method_signature": "MphChlBasisOp.configureTargetProduct(ProductConfigurer productConfigurer)", "testcase": false, "constructor": false}, {"identifier": "configureSourceSamples", "parameters": "(SourceSampleConfigurer sampleConfigurer)", "modifiers": "@Override protected", "return": "void", "signature": "void configureSourceSamples(SourceSampleConfigurer sampleConfigurer)", "full_signature": "@Override protected void configureSourceSamples(SourceSampleConfigurer sampleConfigurer)", "class_method_signature": "MphChlBasisOp.configureSourceSamples(SourceSampleConfigurer sampleConfigurer)", "testcase": false, "constructor": false}, {"identifier": "prepareInputs", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void prepareInputs()", "full_signature": "@Override protected void prepareInputs()", "class_method_signature": "MphChlBasisOp.prepareInputs()", "testcase": false, "constructor": false}, {"identifier": "isSampleValid", "parameters": "(int x, int y)", "modifiers": "", "return": "boolean", "signature": "boolean isSampleValid(int x, int y)", "full_signature": " boolean isSampleValid(int x, int y)", "class_method_signature": "MphChlBasisOp.isSampleValid(int x, int y)", "testcase": false, "constructor": false}], "file": "s3tbx-mphchl/src/main/java/org/esa/s3tbx/mphchl/MphChlBasisOp.java"}, "focal_method": {"identifier": "configureTargetSamples", "parameters": "(TargetSampleConfigurer sampleConfigurer)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void configureTargetSamples(TargetSampleConfigurer sampleConfigurer) throws OperatorException {\n        sampleConfigurer.defineSample(0, \"chl\");\n        sampleConfigurer.defineSample(1, \"mph_chl_flags\");\n        sampleConfigurer.defineSample(2, \"immersed_cyanobacteria\");\n        sampleConfigurer.defineSample(3, \"floating_cyanobacteria\");\n        sampleConfigurer.defineSample(4, \"floating_vegetation\");\n        if (exportMph) {\n            sampleConfigurer.defineSample(5, \"mph\");\n        }\n    }", "signature": "void configureTargetSamples(TargetSampleConfigurer sampleConfigurer)", "full_signature": "@Override protected void configureTargetSamples(TargetSampleConfigurer sampleConfigurer)", "class_method_signature": "MphChlBasisOp.configureTargetSamples(TargetSampleConfigurer sampleConfigurer)", "testcase": false, "constructor": false, "invocations": ["defineSample", "defineSample", "defineSample", "defineSample", "defineSample", "defineSample"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}