{"test_class": {"identifier": "PKCS1UtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public String PRIVATE_KEY =\n            \"MIIEpQIBAAKCAQEA2N/GkK5d93FnqtPggmZqJYceXkfetsIKMA/BAFqmlHvGFKp6\\n\" +\n            \"5wHPZvjqYkbhL2uDO4DT94ZfDtd0KMkDdn64DkPTUxq3G8TnTFUh26RdRNMPyRcV\\n\" +\n            \"AEZLOz6c5MhwlLIyAaA8oSoddSFGkERgY3GhNNnMeoRkgdgcGRyez26q3kPHn21D\\n\" +\n            \"0wZb9Li8tS3QjUZ/urE7Jy+3ElAD3CJ4AmBLAoyCrca4TjNUCBZdhYBf91PguYCg\\n\" +\n            \"CowhciBrJfetFmEz98PaNdKm476EA8AL7kNpYzFcT4c7gQD6HFaJFKSZemeCKvxH\\n\" +\n            \"txaKoaWXgrARiORQIF8kt5XGChc7rbaghOICOQIDAQABAoIBAQCIZr4Zk0GQdqgP\\n\" +\n            \"/jCvc0CBl+kWvTcrVQFZVx85XMp2ix57MvoXvsC2cAnig9fvnjwsuYsXnFC/Ie1y\\n\" +\n            \"FXNzHKIgfrI0C5JtCbu7+7NO1KLAvcqo3DaeNJfujCPblOGR9D2VXjWj27wpRiN+\\n\" +\n            \"azMAeKA+gFmmGQypycVqWeDccCtRnMDFE8FVTqPbOpJDT0jLObGGOzaqk6D/1GGZ\\n\" +\n            \"hpdNj03ZDOE7xGHGj8C53r/Kp+pNnmbRbJDw/6i2PMJtQYyycBra85ucb+IaUXSt\\n\" +\n            \"8E4bfj6NI+Faln8irkiHY/oCz6astoaO1ZuqbxZBmvvMyxM1IHB2cRykoSILr99w\\n\" +\n            \"IlTD3GHdAoGBAPqS47nBfUiUIqmWcWKw1G6KNQIcH1dEBCOfSx1jKnbx4w6H9xej\\n\" +\n            \"g2e+3HGqyyBFe8utfPrcRnD43arEEwUrXjUwgc3ZlWBY0XzanX4Z0DkUm8iHHfJo\\n\" +\n            \"XD1TyLsfp01fbKdKlFW5BW03Q7FOERXlheGvQynQfUBL53yG0WPTdrnvAoGBAN2S\\n\" +\n            \"EI1Cqy8aUL3ESsJ/bKpVgLhTwjovQxqM/uYVN282jI9EFAw+PQdpHyFdCr1fJmpY\\n\" +\n            \"nW7aHPYQxlWFQEIcoWROBY76VJMpxjLR1LPHV9ezzD9LoFINEGlZu5ZnQasNgFpX\\n\" +\n            \"5KjpGdlfa0MzPjauqxr7mUfvnLHolNmwubG9Pk5XAoGBAMACx5aUepifS2CA9CoY\\n\" +\n            \"LvD132Dag/mvGSzi6ACA+Q1klgWQkvv+RLe/PdWsdzMni5GsQ9VH7oKrcdFlpt2T\\n\" +\n            \"OgGwRgej8B+AcCcorv7ucO0MqcOkJoKXDffAuFUMEHvt36jiMYDu4wWqD6lSlS0e\\n\" +\n            \"UNV8JA9qwFAA2kZGWTYR2SzpAoGAH4efj1qDXaqS/s4mDVNwtTSBorlYlEsRc3/I\\n\" +\n            \"7hjq0IqkqeZ4K93XdWyCH49L7fLSVqPRk2q6YFG2x4i0wjOsy8dGhzgcPOze5XBy\\n\" +\n            \"ojqlx24wjHlIkSSGx1cbmKWM9LhxIWoMgfTZ1tL7Qo7SNZnZg3d2MoRoefCs7eV2\\n\" +\n            \"J1LUwPUCgYEAi4tPG9rpYMpD2gQ8u3G3GSWo+8mZOZ4s8/126ozoL4Uuwc1GwJ4o\\n\" +\n            \"HQ1qb6Er+XpE+QpOP1A164pmWkKo90wuDWdgXma45veNVSCblHvppSKFGeRaPr3P\\n\" +\n            \"i+L8P99EaGlPVUrgpwLVFs03SKmiEVjqDDlXw2+Yiu+9xmW5Pesb1tA=\";", "modifier": "public", "type": "String", "declarator": "PRIVATE_KEY =\n            \"MIIEpQIBAAKCAQEA2N/GkK5d93FnqtPggmZqJYceXkfetsIKMA/BAFqmlHvGFKp6\\n\" +\n            \"5wHPZvjqYkbhL2uDO4DT94ZfDtd0KMkDdn64DkPTUxq3G8TnTFUh26RdRNMPyRcV\\n\" +\n            \"AEZLOz6c5MhwlLIyAaA8oSoddSFGkERgY3GhNNnMeoRkgdgcGRyez26q3kPHn21D\\n\" +\n            \"0wZb9Li8tS3QjUZ/urE7Jy+3ElAD3CJ4AmBLAoyCrca4TjNUCBZdhYBf91PguYCg\\n\" +\n            \"CowhciBrJfetFmEz98PaNdKm476EA8AL7kNpYzFcT4c7gQD6HFaJFKSZemeCKvxH\\n\" +\n            \"txaKoaWXgrARiORQIF8kt5XGChc7rbaghOICOQIDAQABAoIBAQCIZr4Zk0GQdqgP\\n\" +\n            \"/jCvc0CBl+kWvTcrVQFZVx85XMp2ix57MvoXvsC2cAnig9fvnjwsuYsXnFC/Ie1y\\n\" +\n            \"FXNzHKIgfrI0C5JtCbu7+7NO1KLAvcqo3DaeNJfujCPblOGR9D2VXjWj27wpRiN+\\n\" +\n            \"azMAeKA+gFmmGQypycVqWeDccCtRnMDFE8FVTqPbOpJDT0jLObGGOzaqk6D/1GGZ\\n\" +\n            \"hpdNj03ZDOE7xGHGj8C53r/Kp+pNnmbRbJDw/6i2PMJtQYyycBra85ucb+IaUXSt\\n\" +\n            \"8E4bfj6NI+Faln8irkiHY/oCz6astoaO1ZuqbxZBmvvMyxM1IHB2cRykoSILr99w\\n\" +\n            \"IlTD3GHdAoGBAPqS47nBfUiUIqmWcWKw1G6KNQIcH1dEBCOfSx1jKnbx4w6H9xej\\n\" +\n            \"g2e+3HGqyyBFe8utfPrcRnD43arEEwUrXjUwgc3ZlWBY0XzanX4Z0DkUm8iHHfJo\\n\" +\n            \"XD1TyLsfp01fbKdKlFW5BW03Q7FOERXlheGvQynQfUBL53yG0WPTdrnvAoGBAN2S\\n\" +\n            \"EI1Cqy8aUL3ESsJ/bKpVgLhTwjovQxqM/uYVN282jI9EFAw+PQdpHyFdCr1fJmpY\\n\" +\n            \"nW7aHPYQxlWFQEIcoWROBY76VJMpxjLR1LPHV9ezzD9LoFINEGlZu5ZnQasNgFpX\\n\" +\n            \"5KjpGdlfa0MzPjauqxr7mUfvnLHolNmwubG9Pk5XAoGBAMACx5aUepifS2CA9CoY\\n\" +\n            \"LvD132Dag/mvGSzi6ACA+Q1klgWQkvv+RLe/PdWsdzMni5GsQ9VH7oKrcdFlpt2T\\n\" +\n            \"OgGwRgej8B+AcCcorv7ucO0MqcOkJoKXDffAuFUMEHvt36jiMYDu4wWqD6lSlS0e\\n\" +\n            \"UNV8JA9qwFAA2kZGWTYR2SzpAoGAH4efj1qDXaqS/s4mDVNwtTSBorlYlEsRc3/I\\n\" +\n            \"7hjq0IqkqeZ4K93XdWyCH49L7fLSVqPRk2q6YFG2x4i0wjOsy8dGhzgcPOze5XBy\\n\" +\n            \"ojqlx24wjHlIkSSGx1cbmKWM9LhxIWoMgfTZ1tL7Qo7SNZnZg3d2MoRoefCs7eV2\\n\" +\n            \"J1LUwPUCgYEAi4tPG9rpYMpD2gQ8u3G3GSWo+8mZOZ4s8/126ozoL4Uuwc1GwJ4o\\n\" +\n            \"HQ1qb6Er+XpE+QpOP1A164pmWkKo90wuDWdgXma45veNVSCblHvppSKFGeRaPr3P\\n\" +\n            \"i+L8P99EaGlPVUrgpwLVFs03SKmiEVjqDDlXw2+Yiu+9xmW5Pesb1tA=\"", "var_name": "PRIVATE_KEY"}], "file": "agent/jvm/src/test/java/org/jolokia/jvmagent/security/PKCS1UtilTest.java"}, "test_case": {"identifier": "simple", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void simple() throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {\n        RSAPrivateCrtKeySpec spec = PKCS1Util.decodePKCS1(Base64Util.decode(PRIVATE_KEY));\n        assertNotNull(spec);\n        assertEquals(new BigInteger(\"65537\"),spec.getPublicExponent());\n        assertEquals(new BigInteger(\"17219073728753538877351436880713775379656064037529658955194218882887990854659277\" +\n                                    \"14926866974743136717398950769494187526607437089900175320890853259761202632924910\" +\n                                    \"04313716240382424077365899979237567821238335068353270396753262938612364085446101\" +\n                                    \"06439976729028133029376341040827650031161824951684561808300496926367402762121624\" +\n                                    \"84716729598919532254889795000011013630896579601633649087197314473243762156761264\" +\n                                    \"28213494680134367573578684374434499094707511493610021020953064686646715594465961\" +\n                                    \"57768682849057097693703094001987209424161987563379538988444327461934240605326845\" +\n                                    \"582692396320855699767767177230708015442200422586240491997\"),\n                     spec.getPrivateExponent());\n    }", "signature": "void simple()", "full_signature": "@Test public void simple()", "class_method_signature": "PKCS1UtilTest.simple()", "testcase": true, "constructor": false, "invocations": ["decodePKCS1", "decode", "assertNotNull", "assertEquals", "getPublicExponent", "assertEquals", "getPrivateExponent"]}, "focal_class": {"identifier": "PKCS1Util", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "PKCS1Util", "parameters": "()", "modifiers": "private", "return": "", "signature": " PKCS1Util()", "full_signature": "private  PKCS1Util()", "class_method_signature": "PKCS1Util.PKCS1Util()", "testcase": false, "constructor": true}, {"identifier": "decodePKCS1", "parameters": "(byte[] keyBytes)", "modifiers": "public static", "return": "RSAPrivateCrtKeySpec", "signature": "RSAPrivateCrtKeySpec decodePKCS1(byte[] keyBytes)", "full_signature": "public static RSAPrivateCrtKeySpec decodePKCS1(byte[] keyBytes)", "class_method_signature": "PKCS1Util.decodePKCS1(byte[] keyBytes)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(DerParser parser)", "modifiers": "private static", "return": "BigInteger", "signature": "BigInteger next(DerParser parser)", "full_signature": "private static BigInteger next(DerParser parser)", "class_method_signature": "PKCS1Util.next(DerParser parser)", "testcase": false, "constructor": false}], "file": "agent/jvm/src/main/java/org/jolokia/jvmagent/security/PKCS1Util.java"}, "focal_method": {"identifier": "decodePKCS1", "parameters": "(byte[] keyBytes)", "modifiers": "public static", "return": "RSAPrivateCrtKeySpec", "body": "public static RSAPrivateCrtKeySpec decodePKCS1(byte[] keyBytes) throws IOException {\n        DerParser parser = new DerParser(keyBytes);\n        Asn1Object sequence = parser.read();\n        sequence.validateSequence();\n        parser = new DerParser(sequence.getValue());\n        parser.read();\n\n        return new RSAPrivateCrtKeySpec(next(parser), next(parser),\n                                        next(parser), next(parser),\n                                        next(parser), next(parser),\n                                        next(parser), next(parser));\n    }", "signature": "RSAPrivateCrtKeySpec decodePKCS1(byte[] keyBytes)", "full_signature": "public static RSAPrivateCrtKeySpec decodePKCS1(byte[] keyBytes)", "class_method_signature": "PKCS1Util.decodePKCS1(byte[] keyBytes)", "testcase": false, "constructor": false, "invocations": ["read", "validateSequence", "getValue", "read", "next", "next", "next", "next", "next", "next", "next", "next"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}