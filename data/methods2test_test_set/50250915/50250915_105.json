{"test_class": {"identifier": "BlueRunChangesetPreloaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public JenkinsRule j = new JenkinsRule();", "modifier": "@Rule\n    public", "type": "JenkinsRule", "declarator": "j = new JenkinsRule()", "var_name": "j"}], "file": "blueocean-pipeline-api-impl/src/test/java/io/jenkins/blueocean/preload/BlueRunChangesetPreloaderTest.java"}, "test_case": {"identifier": "prefetchUrlIsRight", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void prefetchUrlIsRight() throws IOException, ExecutionException, InterruptedException {\n        FreeStyleProject project = j.createFreeStyleProject(\"project\");\n        Run run = j.waitForCompletion(project.scheduleBuild2(0).waitForStart());\n\n        FreeStylePipeline freeStylePipeline = (FreeStylePipeline) BluePipelineFactory.resolve(project);\n        assertNotNull(freeStylePipeline);\n        BlueRun blueRun = freeStylePipeline.getLatestRun();\n        assertNotNull(blueRun);\n\n        BlueOrganization organization = OrganizationFactory.getInstance().getContainingOrg(Jenkins.getInstance());\n\n        ChangeSetContainerImpl container = new ChangeSetContainerImpl(\n                organization,\n                blueRun,\n                run\n        );\n        BlueRunChangesetPreloader preloader = new BlueRunChangesetPreloader();\n        RESTFetchPreloader.FetchData fetchData = preloader.getFetchData(container);\n        assertEquals(\"/blue/rest/organizations/jenkins/pipelines/project/runs/1/changeSet/?start=0&limit=101\", fetchData.getRestUrl());\n    }", "signature": "void prefetchUrlIsRight()", "full_signature": "@Test public void prefetchUrlIsRight()", "class_method_signature": "BlueRunChangesetPreloaderTest.prefetchUrlIsRight()", "testcase": true, "constructor": false, "invocations": ["createFreeStyleProject", "waitForCompletion", "waitForStart", "scheduleBuild2", "resolve", "assertNotNull", "getLatestRun", "assertNotNull", "getContainingOrg", "getInstance", "getInstance", "getFetchData", "assertEquals", "getRestUrl"]}, "focal_class": {"identifier": "BlueRunChangesetPreloader", "superclass": "extends RESTFetchPreloader", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(PipelineActivityStatePreloader.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(PipelineActivityStatePreloader.class.getName())", "var_name": "LOGGER"}], "methods": [{"identifier": "getFetchData", "parameters": "(@Nonnull BlueUrlTokenizer blueUrl)", "modifiers": "@Override protected", "return": "FetchData", "signature": "FetchData getFetchData(@Nonnull BlueUrlTokenizer blueUrl)", "full_signature": "@Override protected FetchData getFetchData(@Nonnull BlueUrlTokenizer blueUrl)", "class_method_signature": "BlueRunChangesetPreloader.getFetchData(@Nonnull BlueUrlTokenizer blueUrl)", "testcase": false, "constructor": false}, {"identifier": "getFetchData", "parameters": "(Container<BlueChangeSetEntry> containerChangeSets)", "modifiers": "public", "return": "FetchData", "signature": "FetchData getFetchData(Container<BlueChangeSetEntry> containerChangeSets)", "full_signature": "public FetchData getFetchData(Container<BlueChangeSetEntry> containerChangeSets)", "class_method_signature": "BlueRunChangesetPreloader.getFetchData(Container<BlueChangeSetEntry> containerChangeSets)", "testcase": false, "constructor": false}, {"identifier": "getPipeline", "parameters": "(BlueUrlTokenizer blueUrl)", "modifiers": "private", "return": "BluePipeline", "signature": "BluePipeline getPipeline(BlueUrlTokenizer blueUrl)", "full_signature": "private BluePipeline getPipeline(BlueUrlTokenizer blueUrl)", "class_method_signature": "BlueRunChangesetPreloader.getPipeline(BlueUrlTokenizer blueUrl)", "testcase": false, "constructor": false}], "file": "blueocean-pipeline-api-impl/src/main/java/io/jenkins/blueocean/preload/BlueRunChangesetPreloader.java"}, "focal_method": {"identifier": "getFetchData", "parameters": "(@Nonnull BlueUrlTokenizer blueUrl)", "modifiers": "@Override protected", "return": "FetchData", "body": "@Override\n    protected FetchData getFetchData(@Nonnull BlueUrlTokenizer blueUrl) {\n\n        if (!blueUrl.lastPartIs(BlueUrlTokenizer.UrlPart.PIPELINE_RUN_DETAIL_TAB, \"changes\")) {\n            // Not interested in it\n            return null;\n        }\n\n        BluePipeline pipeline = getPipeline(blueUrl);\n\n        if (pipeline == null) {\n            // Not interested in it\n            return null;\n        }\n\n        // It's a pipeline page. Let's prefetch the pipeline activity and add them to the page,\n        // saving the frontend the overhead of requesting them.\n\n        Container<BlueRun> activitiesContainer = pipeline.getRuns();\n        if(activitiesContainer==null){\n            return null;\n        }\n        BlueRun run = activitiesContainer.get(blueUrl.getPart(BlueUrlTokenizer.UrlPart.PIPELINE_RUN_DETAIL_ID));\n        Container<BlueChangeSetEntry> containerChangeSets = run.getChangeSet();\n        return getFetchData(containerChangeSets);\n    }", "signature": "FetchData getFetchData(@Nonnull BlueUrlTokenizer blueUrl)", "full_signature": "@Override protected FetchData getFetchData(@Nonnull BlueUrlTokenizer blueUrl)", "class_method_signature": "BlueRunChangesetPreloader.getFetchData(@Nonnull BlueUrlTokenizer blueUrl)", "testcase": false, "constructor": false, "invocations": ["lastPartIs", "getPipeline", "getRuns", "get", "getPart", "getChangeSet", "getFetchData"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}