{"test_class": {"identifier": "ServiceDecoratorImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<String, Object> EMPTY = new HashMap<>();", "modifier": "private static final", "type": "Map<String, Object>", "declarator": "EMPTY = new HashMap<>()", "var_name": "EMPTY"}, {"original_string": "private static final URL RES_SD = getResource(\"/test-resources/sd.xml\");", "modifier": "private static final", "type": "URL", "declarator": "RES_SD = getResource(\"/test-resources/sd.xml\")", "var_name": "RES_SD"}, {"original_string": "private static final URL RES_SD1 = getResource(\"/test-resources/sd1.xml\");", "modifier": "private static final", "type": "URL", "declarator": "RES_SD1 = getResource(\"/test-resources/sd1.xml\")", "var_name": "RES_SD1"}, {"original_string": "private static final URL RES_SD2 = getResource(\"/test-resources/sd2.xml\");", "modifier": "private static final", "type": "URL", "declarator": "RES_SD2 = getResource(\"/test-resources/sd2.xml\")", "var_name": "RES_SD2"}, {"original_string": "private static final URL RES_SD0 = getResource(\"/test-resources/sd0.xml\");", "modifier": "private static final", "type": "URL", "declarator": "RES_SD0 = getResource(\"/test-resources/sd0.xml\")", "var_name": "RES_SD0"}, {"original_string": "private static final URL RES_SD_1 = getResource(\"/test-resources/sd-1.xml\");", "modifier": "private static final", "type": "URL", "declarator": "RES_SD_1 = getResource(\"/test-resources/sd-1.xml\")", "var_name": "RES_SD_1"}], "file": "decorator/src/test/java/org/apache/cxf/dosgi/dsw/decorator/ServiceDecoratorImplTest.java"}, "test_case": {"identifier": "testAddDecorations", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddDecorations() {\n        final Map<String, Object> serviceProps = new HashMap<>();\n        serviceProps.put(Constants.OBJECTCLASS, new String[] {\"org.acme.foo.Bar\"});\n        serviceProps.put(\"test.prop\", \"xyz\");\n\n        Map<String, Object> expected = new HashMap<>();\n        expected.put(\"test.too\", \"ahaha\");\n        assertDecorate(serviceProps, expected, RES_SD);\n    }", "signature": "void testAddDecorations()", "full_signature": "@Test public void testAddDecorations()", "class_method_signature": "ServiceDecoratorImplTest.testAddDecorations()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "assertDecorate"]}, "focal_class": {"identifier": "ServiceDecoratorImpl", "superclass": "", "interfaces": "implements ServiceDecorator", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ServiceDecoratorImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ServiceDecoratorImpl.class)", "var_name": "LOG"}, {"original_string": "final List<Rule> decorations = new CopyOnWriteArrayList<>();", "modifier": "final", "type": "List<Rule>", "declarator": "decorations = new CopyOnWriteArrayList<>()", "var_name": "decorations"}, {"original_string": "private DecorationParser parser;", "modifier": "private", "type": "DecorationParser", "declarator": "parser", "var_name": "parser"}], "methods": [{"identifier": "ServiceDecoratorImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " ServiceDecoratorImpl()", "full_signature": "public  ServiceDecoratorImpl()", "class_method_signature": "ServiceDecoratorImpl.ServiceDecoratorImpl()", "testcase": false, "constructor": true}, {"identifier": "decorate", "parameters": "(ServiceReference<?> sref, Map<String, Object> target)", "modifiers": "@Override public", "return": "void", "signature": "void decorate(ServiceReference<?> sref, Map<String, Object> target)", "full_signature": "@Override public void decorate(ServiceReference<?> sref, Map<String, Object> target)", "class_method_signature": "ServiceDecoratorImpl.decorate(ServiceReference<?> sref, Map<String, Object> target)", "testcase": false, "constructor": false}, {"identifier": "addDecorations", "parameters": "(Bundle bundle)", "modifiers": "", "return": "void", "signature": "void addDecorations(Bundle bundle)", "full_signature": " void addDecorations(Bundle bundle)", "class_method_signature": "ServiceDecoratorImpl.addDecorations(Bundle bundle)", "testcase": false, "constructor": false}, {"identifier": "getRule", "parameters": "(Bundle bundle, MatchType match)", "modifiers": "private", "return": "Rule", "signature": "Rule getRule(Bundle bundle, MatchType match)", "full_signature": "private Rule getRule(Bundle bundle, MatchType match)", "class_method_signature": "ServiceDecoratorImpl.getRule(Bundle bundle, MatchType match)", "testcase": false, "constructor": false}, {"identifier": "getDecorationElements", "parameters": "(Bundle bundle)", "modifiers": "", "return": "List<ServiceDecorationType>", "signature": "List<ServiceDecorationType> getDecorationElements(Bundle bundle)", "full_signature": " List<ServiceDecorationType> getDecorationElements(Bundle bundle)", "class_method_signature": "ServiceDecoratorImpl.getDecorationElements(Bundle bundle)", "testcase": false, "constructor": false}, {"identifier": "removeDecorations", "parameters": "(Bundle bundle)", "modifiers": "", "return": "void", "signature": "void removeDecorations(Bundle bundle)", "full_signature": " void removeDecorations(Bundle bundle)", "class_method_signature": "ServiceDecoratorImpl.removeDecorations(Bundle bundle)", "testcase": false, "constructor": false}], "file": "decorator/src/main/java/org/apache/cxf/dosgi/dsw/decorator/ServiceDecoratorImpl.java"}, "focal_method": {"identifier": "addDecorations", "parameters": "(Bundle bundle)", "modifiers": "", "return": "void", "body": "void addDecorations(Bundle bundle) {\n        for (ServiceDecorationType decoration : getDecorationElements(bundle)) {\n            for (MatchType match : decoration.getMatch()) {\n                decorations.add(getRule(bundle, match));\n            }\n        }\n    }", "signature": "void addDecorations(Bundle bundle)", "full_signature": " void addDecorations(Bundle bundle)", "class_method_signature": "ServiceDecoratorImpl.addDecorations(Bundle bundle)", "testcase": false, "constructor": false, "invocations": ["getDecorationElements", "getMatch", "add", "getRule"]}, "repository": {"repo_id": 17537835, "url": "https://github.com/apache/cxf-dosgi", "language": "Java", "is_fork": false, "fork_count": 27, "stargazer_count": 26, "size": 3444, "license": "licensed"}}