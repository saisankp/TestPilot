{"test_class": {"identifier": "SimilarityStreamGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int concurrency;", "modifier": "private final", "type": "int", "declarator": "concurrency", "var_name": "concurrency"}, {"original_string": "public static final SimilarityComputer<CategoricalInput> ALL_PAIRS_COMPUTER = (decoder, source, target, cutoff) ->\n            similarityResult(source.id, target.id, true, false);", "modifier": "public static final", "type": "SimilarityComputer<CategoricalInput>", "declarator": "ALL_PAIRS_COMPUTER = (decoder, source, target, cutoff) ->\n            similarityResult(source.id, target.id, true, false)", "var_name": "ALL_PAIRS_COMPUTER"}, {"original_string": "public static final SimilarityComputer<CategoricalInput> COMPUTER = (decoder, source, target, cutoff) ->\n            similarityResult(source.id, target.id, false, false);", "modifier": "public static final", "type": "SimilarityComputer<CategoricalInput>", "declarator": "COMPUTER = (decoder, source, target, cutoff) ->\n            similarityResult(source.id, target.id, false, false)", "var_name": "COMPUTER"}, {"original_string": "public static final Supplier<RleDecoder> DECODER = () -> null;", "modifier": "public static final", "type": "Supplier<RleDecoder>", "declarator": "DECODER = () -> null", "var_name": "DECODER"}], "file": "algo/src/test/java/org/neo4j/graphalgo/similarity/SimilarityStreamGeneratorTest.java"}, "test_case": {"identifier": "sourceSpecifiedTargetSpecified", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void sourceSpecifiedTargetSpecified() {\n        ProcedureConfiguration configuration = ProcedureConfiguration.create(MapUtil.map(\"concurrency\", concurrency));\n\n        SimilarityStreamGenerator<CategoricalInput> generator = new SimilarityStreamGenerator<>(terminationFlag(), configuration, DECODER, COMPUTER);\n\n        CategoricalInput[] ids = new CategoricalInput[3];\n        ids[0] = new CategoricalInput(0, new long[]{});\n        ids[1] = new CategoricalInput(1, new long[]{});\n        ids[2] = new CategoricalInput(2, new long[]{});\n\n        int[] sourceIndexIds = new int[]{0};\n        int[] targetIndexIds = new int[]{1, 2};\n        Stream<SimilarityResult> stream = generator.stream(ids, sourceIndexIds, targetIndexIds, -1.0, 0);\n\n        List<SimilarityResult> rows = stream.collect(Collectors.toList());\n        assertEquals(2, rows.size());\n\n        assertThat(rows, hasItems(similarityResult(0, 1, false, false)));\n        assertThat(rows, hasItems(similarityResult(0, 2, false, false)));\n    }", "signature": "void sourceSpecifiedTargetSpecified()", "full_signature": "@Test public void sourceSpecifiedTargetSpecified()", "class_method_signature": "SimilarityStreamGeneratorTest.sourceSpecifiedTargetSpecified()", "testcase": true, "constructor": false, "invocations": ["create", "map", "terminationFlag", "stream", "collect", "toList", "assertEquals", "size", "assertThat", "hasItems", "similarityResult", "assertThat", "hasItems", "similarityResult"]}, "focal_class": {"identifier": "SimilarityStreamGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TerminationFlag terminationFlag;", "modifier": "private final", "type": "TerminationFlag", "declarator": "terminationFlag", "var_name": "terminationFlag"}, {"original_string": "private final ProcedureConfiguration configuration;", "modifier": "private final", "type": "ProcedureConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final Supplier<RleDecoder> decoderFactory;", "modifier": "private final", "type": "Supplier<RleDecoder>", "declarator": "decoderFactory", "var_name": "decoderFactory"}, {"original_string": "private final SimilarityComputer<T> computer;", "modifier": "private final", "type": "SimilarityComputer<T>", "declarator": "computer", "var_name": "computer"}], "methods": [{"identifier": "SimilarityStreamGenerator", "parameters": "(TerminationFlag terminationFlag, ProcedureConfiguration configuration, Supplier<RleDecoder> decoderFactory, SimilarityComputer<T> computer)", "modifiers": "public", "return": "", "signature": " SimilarityStreamGenerator(TerminationFlag terminationFlag, ProcedureConfiguration configuration, Supplier<RleDecoder> decoderFactory, SimilarityComputer<T> computer)", "full_signature": "public  SimilarityStreamGenerator(TerminationFlag terminationFlag, ProcedureConfiguration configuration, Supplier<RleDecoder> decoderFactory, SimilarityComputer<T> computer)", "class_method_signature": "SimilarityStreamGenerator.SimilarityStreamGenerator(TerminationFlag terminationFlag, ProcedureConfiguration configuration, Supplier<RleDecoder> decoderFactory, SimilarityComputer<T> computer)", "testcase": false, "constructor": true}, {"identifier": "stream", "parameters": "(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, double cutoff, int topK)", "modifiers": "public", "return": "Stream<SimilarityResult>", "signature": "Stream<SimilarityResult> stream(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, double cutoff, int topK)", "full_signature": "public Stream<SimilarityResult> stream(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, double cutoff, int topK)", "class_method_signature": "SimilarityStreamGenerator.stream(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, double cutoff, int topK)", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "(T[] inputs, double cutoff, int topK)", "modifiers": "public", "return": "Stream<SimilarityResult>", "signature": "Stream<SimilarityResult> stream(T[] inputs, double cutoff, int topK)", "full_signature": "public Stream<SimilarityResult> stream(T[] inputs, double cutoff, int topK)", "class_method_signature": "SimilarityStreamGenerator.stream(T[] inputs, double cutoff, int topK)", "testcase": false, "constructor": false}, {"identifier": "similarityStreamTopK", "parameters": "(T[] inputs, int length, double cutoff, int topK, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "modifiers": "private", "return": "Stream<SimilarityResult>", "signature": "Stream<SimilarityResult> similarityStreamTopK(T[] inputs, int length, double cutoff, int topK, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "full_signature": "private Stream<SimilarityResult> similarityStreamTopK(T[] inputs, int length, double cutoff, int topK, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "class_method_signature": "SimilarityStreamGenerator.similarityStreamTopK(T[] inputs, int length, double cutoff, int topK, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "testcase": false, "constructor": false}, {"identifier": "similarityStream", "parameters": "(T[] inputs, int length, double cutoff, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "modifiers": "private", "return": "Stream<SimilarityResult>", "signature": "Stream<SimilarityResult> similarityStream(T[] inputs, int length, double cutoff, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "full_signature": "private Stream<SimilarityResult> similarityStream(T[] inputs, int length, double cutoff, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "class_method_signature": "SimilarityStreamGenerator.similarityStream(T[] inputs, int length, double cutoff, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "testcase": false, "constructor": false}, {"identifier": "similarityParallelStream", "parameters": "(T[] inputs, int length, TerminationFlag terminationFlag, int concurrency, double cutoff, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "modifiers": "private", "return": "Stream<SimilarityResult>", "signature": "Stream<SimilarityResult> similarityParallelStream(T[] inputs, int length, TerminationFlag terminationFlag, int concurrency, double cutoff, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "full_signature": "private Stream<SimilarityResult> similarityParallelStream(T[] inputs, int length, TerminationFlag terminationFlag, int concurrency, double cutoff, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "class_method_signature": "SimilarityStreamGenerator.similarityParallelStream(T[] inputs, int length, TerminationFlag terminationFlag, int concurrency, double cutoff, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "testcase": false, "constructor": false}, {"identifier": "similarityParallelStreamTopK", "parameters": "(T[] inputs, int length, TerminationFlag terminationFlag, int concurrency, double cutoff, int topK, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "modifiers": "private", "return": "Stream<SimilarityResult>", "signature": "Stream<SimilarityResult> similarityParallelStreamTopK(T[] inputs, int length, TerminationFlag terminationFlag, int concurrency, double cutoff, int topK, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "full_signature": "private Stream<SimilarityResult> similarityParallelStreamTopK(T[] inputs, int length, TerminationFlag terminationFlag, int concurrency, double cutoff, int topK, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "class_method_signature": "SimilarityStreamGenerator.similarityParallelStreamTopK(T[] inputs, int length, TerminationFlag terminationFlag, int concurrency, double cutoff, int topK, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "testcase": false, "constructor": false}, {"identifier": "computeSimilarityForSourceIndex", "parameters": "(int sourceId, T[] inputs, int length, double cutoff, SimilarityConsumer consumer, SimilarityComputer<T> computer, RleDecoder decoder)", "modifiers": "public static", "return": "void", "signature": "void computeSimilarityForSourceIndex(int sourceId, T[] inputs, int length, double cutoff, SimilarityConsumer consumer, SimilarityComputer<T> computer, RleDecoder decoder)", "full_signature": "public static void computeSimilarityForSourceIndex(int sourceId, T[] inputs, int length, double cutoff, SimilarityConsumer consumer, SimilarityComputer<T> computer, RleDecoder decoder)", "class_method_signature": "SimilarityStreamGenerator.computeSimilarityForSourceIndex(int sourceId, T[] inputs, int length, double cutoff, SimilarityConsumer consumer, SimilarityComputer<T> computer, RleDecoder decoder)", "testcase": false, "constructor": false}, {"identifier": "similarityStream", "parameters": "(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, int length, double cutoff, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "modifiers": "private", "return": "Stream<SimilarityResult>", "signature": "Stream<SimilarityResult> similarityStream(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, int length, double cutoff, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "full_signature": "private Stream<SimilarityResult> similarityStream(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, int length, double cutoff, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "class_method_signature": "SimilarityStreamGenerator.similarityStream(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, int length, double cutoff, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "testcase": false, "constructor": false}, {"identifier": "idRange", "parameters": "(int[] indexIds, int length)", "modifiers": "private", "return": "IntStream", "signature": "IntStream idRange(int[] indexIds, int length)", "full_signature": "private IntStream idRange(int[] indexIds, int length)", "class_method_signature": "SimilarityStreamGenerator.idRange(int[] indexIds, int length)", "testcase": false, "constructor": false}, {"identifier": "targetRange", "parameters": "(int[] targetIndexIds, int length)", "modifiers": "private", "return": "Function<Integer, IntStream>", "signature": "Function<Integer, IntStream> targetRange(int[] targetIndexIds, int length)", "full_signature": "private Function<Integer, IntStream> targetRange(int[] targetIndexIds, int length)", "class_method_signature": "SimilarityStreamGenerator.targetRange(int[] targetIndexIds, int length)", "testcase": false, "constructor": false}, {"identifier": "similarityStreamTopK", "parameters": "(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, int length, double cutoff, int topK, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "modifiers": "private", "return": "Stream<SimilarityResult>", "signature": "Stream<SimilarityResult> similarityStreamTopK(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, int length, double cutoff, int topK, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "full_signature": "private Stream<SimilarityResult> similarityStreamTopK(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, int length, double cutoff, int topK, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "class_method_signature": "SimilarityStreamGenerator.similarityStreamTopK(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, int length, double cutoff, int topK, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "testcase": false, "constructor": false}, {"identifier": "computeSimilarityForSourceIndex", "parameters": "(int sourceId, T[] inputs, double cutoff, SimilarityConsumer consumer, SimilarityComputer<T> computer, RleDecoder decoder, Function<Integer, IntStream> targetRange)", "modifiers": "private", "return": "void", "signature": "void computeSimilarityForSourceIndex(int sourceId, T[] inputs, double cutoff, SimilarityConsumer consumer, SimilarityComputer<T> computer, RleDecoder decoder, Function<Integer, IntStream> targetRange)", "full_signature": "private void computeSimilarityForSourceIndex(int sourceId, T[] inputs, double cutoff, SimilarityConsumer consumer, SimilarityComputer<T> computer, RleDecoder decoder, Function<Integer, IntStream> targetRange)", "class_method_signature": "SimilarityStreamGenerator.computeSimilarityForSourceIndex(int sourceId, T[] inputs, double cutoff, SimilarityConsumer consumer, SimilarityComputer<T> computer, RleDecoder decoder, Function<Integer, IntStream> targetRange)", "testcase": false, "constructor": false}, {"identifier": "similarityParallelStream", "parameters": "(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, int length, TerminationFlag terminationFlag, int concurrency, double cutoff, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "modifiers": "private", "return": "Stream<SimilarityResult>", "signature": "Stream<SimilarityResult> similarityParallelStream(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, int length, TerminationFlag terminationFlag, int concurrency, double cutoff, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "full_signature": "private Stream<SimilarityResult> similarityParallelStream(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, int length, TerminationFlag terminationFlag, int concurrency, double cutoff, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "class_method_signature": "SimilarityStreamGenerator.similarityParallelStream(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, int length, TerminationFlag terminationFlag, int concurrency, double cutoff, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(BlockingQueue<SimilarityResult> queue, SimilarityResult items)", "modifiers": "private", "return": "void", "signature": "void put(BlockingQueue<SimilarityResult> queue, SimilarityResult items)", "full_signature": "private void put(BlockingQueue<SimilarityResult> queue, SimilarityResult items)", "class_method_signature": "SimilarityStreamGenerator.put(BlockingQueue<SimilarityResult> queue, SimilarityResult items)", "testcase": false, "constructor": false}, {"identifier": "similarityParallelStreamTopK", "parameters": "(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, int length, TerminationFlag terminationFlag, int concurrency, double cutoff, int topK, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "modifiers": "private", "return": "Stream<SimilarityResult>", "signature": "Stream<SimilarityResult> similarityParallelStreamTopK(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, int length, TerminationFlag terminationFlag, int concurrency, double cutoff, int topK, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "full_signature": "private Stream<SimilarityResult> similarityParallelStreamTopK(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, int length, TerminationFlag terminationFlag, int concurrency, double cutoff, int topK, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "class_method_signature": "SimilarityStreamGenerator.similarityParallelStreamTopK(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, int length, TerminationFlag terminationFlag, int concurrency, double cutoff, int topK, SimilarityComputer<T> computer, Supplier<RleDecoder> decoderFactory)", "testcase": false, "constructor": false}], "file": "algo/src/main/java/org/neo4j/graphalgo/similarity/SimilarityStreamGenerator.java"}, "focal_method": {"identifier": "stream", "parameters": "(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, double cutoff, int topK)", "modifiers": "public", "return": "Stream<SimilarityResult>", "body": "public Stream<SimilarityResult> stream(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, double cutoff, int topK) {\n        int concurrency = configuration.getConcurrency();\n\n        int length = inputs.length;\n        if (concurrency == 1) {\n            if (topK != 0) {\n                return similarityStreamTopK(inputs, sourceIndexIds, targetIndexIds, length, cutoff, topK, computer, decoderFactory);\n            } else {\n                return similarityStream(inputs, sourceIndexIds, targetIndexIds, length, cutoff, computer, decoderFactory);\n            }\n        } else {\n            if (topK != 0) {\n                return similarityParallelStreamTopK(inputs, sourceIndexIds, targetIndexIds, length, terminationFlag, concurrency, cutoff, topK, computer, decoderFactory);\n            } else {\n                return similarityParallelStream(inputs, sourceIndexIds, targetIndexIds, length, terminationFlag, concurrency, cutoff, computer, decoderFactory);\n            }\n        }\n    }", "signature": "Stream<SimilarityResult> stream(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, double cutoff, int topK)", "full_signature": "public Stream<SimilarityResult> stream(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, double cutoff, int topK)", "class_method_signature": "SimilarityStreamGenerator.stream(T[] inputs, int[] sourceIndexIds, int[] targetIndexIds, double cutoff, int topK)", "testcase": false, "constructor": false, "invocations": ["getConcurrency", "similarityStreamTopK", "similarityStream", "similarityParallelStreamTopK", "similarityParallelStream"]}, "repository": {"repo_id": 82291828, "url": "https://github.com/neo4j-contrib/neo4j-graph-algorithms", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 689, "size": 43359, "license": "licensed"}}