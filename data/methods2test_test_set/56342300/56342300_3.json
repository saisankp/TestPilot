{"test_class": {"identifier": "DroolsDescriptionServiceTest", "superclass": "extends BaseServiceTest", "interfaces": "", "fields": [{"original_string": "private DroolsDescriptionService droolsDescriptionService;", "modifier": "private", "type": "DroolsDescriptionService", "declarator": "droolsDescriptionService", "var_name": "droolsDescriptionService"}], "file": "snomed-drools-rf2-validator/src/test/java/org/ihtsdo/drools/validator/rf2/service/DroolsDescriptionServiceTest.java"}, "test_case": {"identifier": "testFindMatchingDescriptionsInHierachy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindMatchingDescriptionsInHierachy() throws FileNotFoundException {\n        //load a dummy concept which has duplicated description term with its parent\n        repository.addConcept(FileLoaderTestUtils.fileToObject(\"data/1234567890.json\", DroolsConcept.class));\n        DroolsConcept testConcept = repository.getConcept(\"1234567890\");\n        DroolsDescription testDescription = null;\n        for (DroolsDescription droolsDescription : testConcept.getDescriptions()) {\n            testDescription = droolsDescription;\n        }\n        Set<Description> results = droolsDescriptionService.findMatchingDescriptionInHierarchy(testConcept, testDescription);\n        Assert.assertEquals(1, results.size());\n        for (Description result : results) {\n            Assert.assertEquals(\"1204236014\", result.getId());\n        }\n    }", "signature": "void testFindMatchingDescriptionsInHierachy()", "full_signature": "@Test public void testFindMatchingDescriptionsInHierachy()", "class_method_signature": "DroolsDescriptionServiceTest.testFindMatchingDescriptionsInHierachy()", "testcase": true, "constructor": false, "invocations": ["addConcept", "fileToObject", "getConcept", "getDescriptions", "findMatchingDescriptionInHierarchy", "assertEquals", "size", "assertEquals", "getId"]}, "focal_class": {"identifier": "DroolsDescriptionService", "superclass": "", "interfaces": "implements DescriptionService", "fields": [{"original_string": "private static final String FULLY_SPECIFIED_NAME = \"900000000000003001\";", "modifier": "private static final", "type": "String", "declarator": "FULLY_SPECIFIED_NAME = \"900000000000003001\"", "var_name": "FULLY_SPECIFIED_NAME"}, {"original_string": "private static final String PREFERRED_ACCEPTABILITY = \"900000000000548007\";", "modifier": "private static final", "type": "String", "declarator": "PREFERRED_ACCEPTABILITY = \"900000000000548007\"", "var_name": "PREFERRED_ACCEPTABILITY"}, {"original_string": "private final SnomedDroolsComponentRepository repository;", "modifier": "private final", "type": "SnomedDroolsComponentRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private final DroolsDescriptionIndex droolsDescriptionIndex;", "modifier": "private final", "type": "DroolsDescriptionIndex", "declarator": "droolsDescriptionIndex", "var_name": "droolsDescriptionIndex"}, {"original_string": "private final TestResourceProvider testResourceProvider;", "modifier": "private final", "type": "TestResourceProvider", "declarator": "testResourceProvider", "var_name": "testResourceProvider"}], "methods": [{"identifier": "DroolsDescriptionService", "parameters": "(SnomedDroolsComponentRepository repository, TestResourceProvider testResourceProvider)", "modifiers": "public", "return": "", "signature": " DroolsDescriptionService(SnomedDroolsComponentRepository repository, TestResourceProvider testResourceProvider)", "full_signature": "public  DroolsDescriptionService(SnomedDroolsComponentRepository repository, TestResourceProvider testResourceProvider)", "class_method_signature": "DroolsDescriptionService.DroolsDescriptionService(SnomedDroolsComponentRepository repository, TestResourceProvider testResourceProvider)", "testcase": false, "constructor": true}, {"identifier": "getFSNs", "parameters": "(Set<String> conceptIds, String... languageRefsetIds)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getFSNs(Set<String> conceptIds, String... languageRefsetIds)", "full_signature": "@Override public Set<String> getFSNs(Set<String> conceptIds, String... languageRefsetIds)", "class_method_signature": "DroolsDescriptionService.getFSNs(Set<String> conceptIds, String... languageRefsetIds)", "testcase": false, "constructor": false}, {"identifier": "findActiveDescriptionByExactTerm", "parameters": "(String exactTerm)", "modifiers": "@Override public", "return": "Set<Description>", "signature": "Set<Description> findActiveDescriptionByExactTerm(String exactTerm)", "full_signature": "@Override public Set<Description> findActiveDescriptionByExactTerm(String exactTerm)", "class_method_signature": "DroolsDescriptionService.findActiveDescriptionByExactTerm(String exactTerm)", "testcase": false, "constructor": false}, {"identifier": "findInactiveDescriptionByExactTerm", "parameters": "(String exactTerm)", "modifiers": "@Override public", "return": "Set<Description>", "signature": "Set<Description> findInactiveDescriptionByExactTerm(String exactTerm)", "full_signature": "@Override public Set<Description> findInactiveDescriptionByExactTerm(String exactTerm)", "class_method_signature": "DroolsDescriptionService.findInactiveDescriptionByExactTerm(String exactTerm)", "testcase": false, "constructor": false}, {"identifier": "findMatchingDescriptionInHierarchy", "parameters": "(Concept concept, Description description)", "modifiers": "@Override // FIXME: Currently only finds matching description in ancestors. // Should search all descendants of the second highest ancestor (the ancestor which is a direct child of root). public", "return": "Set<Description>", "signature": "Set<Description> findMatchingDescriptionInHierarchy(Concept concept, Description description)", "full_signature": "@Override // FIXME: Currently only finds matching description in ancestors. // Should search all descendants of the second highest ancestor (the ancestor which is a direct child of root). public Set<Description> findMatchingDescriptionInHierarchy(Concept concept, Description description)", "class_method_signature": "DroolsDescriptionService.findMatchingDescriptionInHierarchy(Concept concept, Description description)", "testcase": false, "constructor": false}, {"identifier": "getCaseSensitiveWordsErrorMessage", "parameters": "(Description description)", "modifiers": "@Override public", "return": "String", "signature": "String getCaseSensitiveWordsErrorMessage(Description description)", "full_signature": "@Override public String getCaseSensitiveWordsErrorMessage(Description description)", "class_method_signature": "DroolsDescriptionService.getCaseSensitiveWordsErrorMessage(Description description)", "testcase": false, "constructor": false}, {"identifier": "getLanguageSpecificErrorMessage", "parameters": "(Description description)", "modifiers": "@Override public", "return": "String", "signature": "String getLanguageSpecificErrorMessage(Description description)", "full_signature": "@Override public String getLanguageSpecificErrorMessage(Description description)", "class_method_signature": "DroolsDescriptionService.getLanguageSpecificErrorMessage(Description description)", "testcase": false, "constructor": false}, {"identifier": "findParentsNotContainingSemanticTag", "parameters": "(Concept concept, String termSematicTag, String... languageRefsetIds)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> findParentsNotContainingSemanticTag(Concept concept, String termSematicTag, String... languageRefsetIds)", "full_signature": "@Override public Set<String> findParentsNotContainingSemanticTag(Concept concept, String termSematicTag, String... languageRefsetIds)", "class_method_signature": "DroolsDescriptionService.findParentsNotContainingSemanticTag(Concept concept, String termSematicTag, String... languageRefsetIds)", "testcase": false, "constructor": false}, {"identifier": "isRecognisedSemanticTag", "parameters": "(String termSemanticTag)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRecognisedSemanticTag(String termSemanticTag)", "full_signature": "@Override public boolean isRecognisedSemanticTag(String termSemanticTag)", "class_method_signature": "DroolsDescriptionService.isRecognisedSemanticTag(String termSemanticTag)", "testcase": false, "constructor": false}, {"identifier": "getDroolsDescriptionIndex", "parameters": "()", "modifiers": "public", "return": "DroolsDescriptionIndex", "signature": "DroolsDescriptionIndex getDroolsDescriptionIndex()", "full_signature": "public DroolsDescriptionIndex getDroolsDescriptionIndex()", "class_method_signature": "DroolsDescriptionService.getDroolsDescriptionIndex()", "testcase": false, "constructor": false}], "file": "snomed-drools-rf2-validator/src/main/java/org/ihtsdo/drools/validator/rf2/service/DroolsDescriptionService.java"}, "focal_method": {"identifier": "findMatchingDescriptionInHierarchy", "parameters": "(Concept concept, Description description)", "modifiers": "@Override // FIXME: Currently only finds matching description in ancestors. // Should search all descendants of the second highest ancestor (the ancestor which is a direct child of root). public", "return": "Set<Description>", "body": "@Override\n\t// FIXME: Currently only finds matching description in ancestors.\n\t// Should search all descendants of the second highest ancestor (the ancestor which is a direct child of root).\n\tpublic Set<Description> findMatchingDescriptionInHierarchy(Concept concept, Description description) {\n\t\tif(concept == null || concept.getId().equals(Constants.ROOT_CONCEPT)) {\n\t\t\treturn Collections.emptySet();\n\t\t}\n\t\tSet<Description> resultSet = new HashSet<>();\n\n\t\tString languageCode = description.getLanguageCode();\n\t\tString term = description.getTerm();\n\t\tif(term == null || term.trim().isEmpty()) return Collections.emptySet();\n\t\t\n\t\tConceptService conceptService = new DroolsConceptService(repository);\n\t\tSet<String> conceptAncestorIds = conceptService.findStatedAncestorsOfConcept(concept);\n\t\tfor (String conceptAncestorId : conceptAncestorIds) {\n\t\t\tConcept conceptAncestor = repository.getConcept(conceptAncestorId);\n\t\t\tfor (Description ancestorsDescription : conceptAncestor.getDescriptions()) {\n\t\t\t\tif(ancestorsDescription.isActive() && ancestorsDescription.getLanguageCode().equals(languageCode)\n\t\t\t\t\t\t&& ancestorsDescription.getTerm().equals(term)) {\n\t\t\t\t\tresultSet.add(ancestorsDescription);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn resultSet;\n\t}", "signature": "Set<Description> findMatchingDescriptionInHierarchy(Concept concept, Description description)", "full_signature": "@Override // FIXME: Currently only finds matching description in ancestors. // Should search all descendants of the second highest ancestor (the ancestor which is a direct child of root). public Set<Description> findMatchingDescriptionInHierarchy(Concept concept, Description description)", "class_method_signature": "DroolsDescriptionService.findMatchingDescriptionInHierarchy(Concept concept, Description description)", "testcase": false, "constructor": false, "invocations": ["equals", "getId", "emptySet", "getLanguageCode", "getTerm", "isEmpty", "trim", "emptySet", "findStatedAncestorsOfConcept", "getConcept", "getDescriptions", "isActive", "equals", "getLanguageCode", "equals", "getTerm", "add"]}, "repository": {"repo_id": 56342300, "url": "https://github.com/IHTSDO/snomed-drools", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 384, "license": "licensed"}}