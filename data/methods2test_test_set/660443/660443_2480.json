{"test_class": {"identifier": "RearrangementAnionReactionTest", "superclass": "extends ReactionProcessTest", "interfaces": "", "fields": [{"original_string": "private final LonePairElectronChecker lpcheck = new LonePairElectronChecker();", "modifier": "private final", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}, {"original_string": "private IChemObjectBuilder            builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "base/reaction/src/test/java/org/openscience/cdk/reaction/type/RearrangementAnionReactionTest.java"}, "test_case": {"identifier": "testAutomaticSearchCentreActiveExample3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAutomaticSearchCentreActiveExample3() throws Exception {\n        IReactionProcess type = new RearrangementAnionReaction();\n\n        /* [F+]=C1-[C-]-C=C-C=C1 */\n        IAtomContainer molecule = builder.newInstance(IAtomContainer.class);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"F\"));\n        molecule.getAtom(0).setFormalCharge(1);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(0, 1, IBond.Order.DOUBLE);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.getAtom(2).setFormalCharge(-1);\n        molecule.addLonePair(new LonePair(molecule.getAtom(2)));\n        molecule.addBond(1, 2, IBond.Order.SINGLE);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(2, 3, IBond.Order.SINGLE);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(3, 4, IBond.Order.DOUBLE);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(4, 5, IBond.Order.SINGLE);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(5, 6, IBond.Order.DOUBLE);\n        molecule.addBond(6, 1, IBond.Order.SINGLE);\n\n        addExplicitHydrogens(molecule);\n\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n        lpcheck.saturate(molecule);\n\n        IAtomContainerSet setOfReactants = DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainerSet.class);\n        setOfReactants.addAtomContainer(molecule);\n\n        /* initiate */\n        makeSureAtomTypesAreRecognized(molecule);\n\n        List<IParameterReact> paramList = new ArrayList<IParameterReact>();\n        IParameterReact param = new SetReactionCenter();\n        param.setParameter(Boolean.FALSE);\n        paramList.add(param);\n        type.setParameterList(paramList);\n        IReactionSet setOfReactions = type.initiate(setOfReactants, null);\n\n        Assert.assertEquals(2, setOfReactions.getReactionCount());\n        Assert.assertEquals(1, setOfReactions.getReaction(0).getProductCount());\n\n        IAtomContainer product1 = setOfReactions.getReaction(1).getProducts().getAtomContainer(0);\n\n        /* [F+]=C1-[C=]-C-[C-]-C=C1 */\n        IAtomContainer molecule2 = builder.newInstance(IAtomContainer.class);\n        molecule2.addAtom(builder.newInstance(IAtom.class, \"F\"));\n        molecule2.getAtom(0).setFormalCharge(1);\n        molecule2.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule2.addBond(0, 1, IBond.Order.DOUBLE);\n        molecule2.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule2.addBond(1, 2, IBond.Order.SINGLE);\n        molecule2.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule2.addBond(2, 3, IBond.Order.DOUBLE);\n        molecule2.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule2.getAtom(4).setFormalCharge(-1);\n        molecule2.addBond(3, 4, IBond.Order.SINGLE);\n        molecule2.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule2.addBond(4, 5, IBond.Order.SINGLE);\n        molecule2.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule2.addBond(5, 6, IBond.Order.DOUBLE);\n        molecule2.addBond(6, 1, IBond.Order.SINGLE);\n\n        addExplicitHydrogens(molecule2);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule2);\n        lpcheck.saturate(molecule2);\n        makeSureAtomTypesAreRecognized(molecule2);\n        assertEquals(molecule2, product1);\n\n        //////////////////////////////////////////////////\n\n        IAtomContainer product2 = setOfReactions.getReaction(0).getProducts().getAtomContainer(0);\n\n        /* F=c1ccccc1 */\n        IAtomContainer molecule3 = builder.newInstance(IAtomContainer.class);\n        molecule3.addAtom(builder.newInstance(IAtom.class, \"F\"));\n        molecule3.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule3.addBond(0, 1, IBond.Order.SINGLE);\n        molecule3.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule3.addBond(1, 2, IBond.Order.DOUBLE);\n        molecule3.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule3.addBond(2, 3, IBond.Order.SINGLE);\n        molecule3.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule3.addBond(3, 4, IBond.Order.DOUBLE);\n        molecule3.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule3.addBond(4, 5, IBond.Order.SINGLE);\n        molecule3.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule3.addBond(5, 6, IBond.Order.DOUBLE);\n        molecule3.addBond(6, 1, IBond.Order.SINGLE);\n\n        addExplicitHydrogens(molecule3);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule3);\n        lpcheck.saturate(molecule3);\n        makeSureAtomTypesAreRecognized(molecule3);\n        assertEquals(molecule3, product2);\n\n        Assert.assertEquals(12, setOfReactions.getReaction(0).getMappingCount());\n    }", "signature": "void testAutomaticSearchCentreActiveExample3()", "full_signature": "@Test public void testAutomaticSearchCentreActiveExample3()", "class_method_signature": "RearrangementAnionReactionTest.testAutomaticSearchCentreActiveExample3()", "testcase": true, "constructor": false, "invocations": ["newInstance", "addAtom", "newInstance", "setFormalCharge", "getAtom", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "setFormalCharge", "getAtom", "addLonePair", "getAtom", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addBond", "addExplicitHydrogens", "percieveAtomTypesAndConfigureAtoms", "saturate", "newInstance", "getInstance", "addAtomContainer", "makeSureAtomTypesAreRecognized", "setParameter", "add", "setParameterList", "initiate", "assertEquals", "getReactionCount", "assertEquals", "getProductCount", "getReaction", "getAtomContainer", "getProducts", "getReaction", "newInstance", "addAtom", "newInstance", "setFormalCharge", "getAtom", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "setFormalCharge", "getAtom", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addBond", "addExplicitHydrogens", "percieveAtomTypesAndConfigureAtoms", "saturate", "makeSureAtomTypesAreRecognized", "assertEquals", "getAtomContainer", "getProducts", "getReaction", "newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addBond", "addExplicitHydrogens", "percieveAtomTypesAndConfigureAtoms", "saturate", "makeSureAtomTypesAreRecognized", "assertEquals", "assertEquals", "getMappingCount", "getReaction"]}, "focal_class": {"identifier": "RearrangementAnionReaction", "superclass": "extends ReactionEngine", "interfaces": "implements IReactionProcess", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(RearrangementAnionReaction.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(RearrangementAnionReaction.class)", "var_name": "logger"}], "methods": [{"identifier": "RearrangementAnionReaction", "parameters": "()", "modifiers": "public", "return": "", "signature": " RearrangementAnionReaction()", "full_signature": "public  RearrangementAnionReaction()", "class_method_signature": "RearrangementAnionReaction.RearrangementAnionReaction()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "ReactionSpecification", "signature": "ReactionSpecification getSpecification()", "full_signature": "@Override public ReactionSpecification getSpecification()", "class_method_signature": "RearrangementAnionReaction.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "RearrangementAnionReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false}, {"identifier": "setActiveCenters", "parameters": "(IAtomContainer reactant)", "modifiers": "private", "return": "void", "signature": "void setActiveCenters(IAtomContainer reactant)", "full_signature": "private void setActiveCenters(IAtomContainer reactant)", "class_method_signature": "RearrangementAnionReaction.setActiveCenters(IAtomContainer reactant)", "testcase": false, "constructor": false}], "file": "base/reaction/src/main/java/org/openscience/cdk/reaction/type/RearrangementAnionReaction.java"}, "focal_method": {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "body": "@Override\n    public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents) throws CDKException {\n\n        logger.debug(\"initiate reaction: RearrangementAnionReaction\");\n\n        if (reactants.getAtomContainerCount() != 1) {\n            throw new CDKException(\"RearrangementAnionReaction only expects one reactant\");\n        }\n        if (agents != null) {\n            throw new CDKException(\"RearrangementAnionReaction don't expects agents\");\n        }\n\n        IReactionSet setOfReactions = reactants.getBuilder().newInstance(IReactionSet.class);\n        IAtomContainer reactant = reactants.getAtomContainer(0);\n\n        /*\n         * if the parameter hasActiveCenter is not fixed yet, set the active\n         * centers\n         */\n        IParameterReact ipr = super.getParameterClass(SetReactionCenter.class);\n        if (ipr != null && !ipr.isSetParameter()) setActiveCenters(reactant);\n\n        Iterator<IAtom> atomis = reactant.atoms().iterator();\n        while (atomis.hasNext()) {\n            IAtom atomi = atomis.next();\n            if (atomi.getFlag(CDKConstants.REACTIVE_CENTER) && atomi.getFormalCharge() == -1\n                    && reactant.getConnectedLonePairsCount(atomi) > 0) {\n\n                Iterator<IBond> bondis = reactant.getConnectedBondsList(atomi).iterator();\n                while (bondis.hasNext()) {\n                    IBond bondi = bondis.next();\n                    if (bondi.getFlag(CDKConstants.REACTIVE_CENTER) && bondi.getOrder() == IBond.Order.SINGLE) {\n                        IAtom atomj = bondi.getOther(atomi);\n                        if (atomj.getFlag(CDKConstants.REACTIVE_CENTER)\n                                && (atomj.getFormalCharge() == CDKConstants.UNSET ? 0 : atomj.getFormalCharge()) == 0\n                                && reactant.getConnectedSingleElectronsCount(atomj) == 0) {\n\n                            Iterator<IBond> bondjs = reactant.getConnectedBondsList(atomj).iterator();\n                            while (bondjs.hasNext()) {\n                                IBond bondj = bondjs.next();\n                                if (bondj.equals(bondi)) continue;\n\n                                if (bondj.getFlag(CDKConstants.REACTIVE_CENTER)\n                                        && bondj.getOrder() == IBond.Order.DOUBLE) {\n                                    IAtom atomk = bondj.getOther(atomj);\n\n                                    if (atomk.getFlag(CDKConstants.REACTIVE_CENTER)\n                                            && reactant.getConnectedSingleElectronsCount(atomk) == 0\n                                            && (atomk.getFormalCharge() == CDKConstants.UNSET ? 0 : atomk\n                                                    .getFormalCharge()) >= 0) {\n\n                                        ArrayList<IAtom> atomList = new ArrayList<IAtom>();\n                                        atomList.add(atomi);\n                                        atomList.add(atomj);\n                                        atomList.add(atomk);\n                                        ArrayList<IBond> bondList = new ArrayList<IBond>();\n                                        bondList.add(bondi);\n                                        bondList.add(bondj);\n\n                                        IAtomContainerSet moleculeSet = reactant.getBuilder().newInstance(\n                                                IAtomContainerSet.class);\n                                        moleculeSet.addAtomContainer(reactant);\n                                        IReaction reaction = mechanism.initiate(moleculeSet, atomList, bondList);\n                                        if (reaction == null)\n                                            continue;\n                                        else\n                                            setOfReactions.addReaction(reaction);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return setOfReactions;\n\n    }", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "RearrangementAnionReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false, "invocations": ["debug", "getAtomContainerCount", "newInstance", "getBuilder", "getAtomContainer", "getParameterClass", "isSetParameter", "setActiveCenters", "iterator", "atoms", "hasNext", "next", "getFlag", "getFormalCharge", "getConnectedLonePairsCount", "iterator", "getConnectedBondsList", "hasNext", "next", "getFlag", "getOrder", "getOther", "getFlag", "getFormalCharge", "getFormalCharge", "getConnectedSingleElectronsCount", "iterator", "getConnectedBondsList", "hasNext", "next", "equals", "getFlag", "getOrder", "getOther", "getFlag", "getConnectedSingleElectronsCount", "getFormalCharge", "getFormalCharge", "add", "add", "add", "add", "add", "newInstance", "getBuilder", "addAtomContainer", "initiate", "addReaction"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}