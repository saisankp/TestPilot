{"test_class": {"identifier": "DataSetDefDeployerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DataSetDefRegistry dataSetDefRegistry;", "modifier": "", "type": "DataSetDefRegistry", "declarator": "dataSetDefRegistry", "var_name": "dataSetDefRegistry"}, {"original_string": "DataSetDefDeployer dataSetDefDeployer;", "modifier": "", "type": "DataSetDefDeployer", "declarator": "dataSetDefDeployer", "var_name": "dataSetDefDeployer"}, {"original_string": "String dataSetsDir = Thread.currentThread().getContextClassLoader().getResource(\"deployments\").getFile();", "modifier": "", "type": "String", "declarator": "dataSetsDir = Thread.currentThread().getContextClassLoader().getResource(\"deployments\").getFile()", "var_name": "dataSetsDir"}, {"original_string": "@Mock\n    DataSetDefRegistryListener registryListener;", "modifier": "@Mock", "type": "DataSetDefRegistryListener", "declarator": "registryListener", "var_name": "registryListener"}], "file": "kie-soup-dataset/kie-soup-dataset-core/src/test/java/org/dashbuilder/dataset/DataSetDefDeployerTest.java"}, "test_case": {"identifier": "testDoDeploy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDoDeploy() throws Exception {\n        assertNull(dataSetDefRegistry.getDataSetDef(\"salesPerYearAutoDeploy\"));\n        dataSetDefDeployer.deploy(dataSetsDir);\n\n        FileOutputStream doDeploy = new FileOutputStream(new File(dataSetsDir, \"salesPerYear.dset.deploy\"));\n        doDeploy.write(\"\".getBytes());\n        doDeploy.flush();\n        doDeploy.close();\n\n        Thread.sleep(2000);\n        DataSetDef def = dataSetDefRegistry.getDataSetDef(\"salesPerYearAutoDeploy\");\n        assertNotNull(def);\n        verify(registryListener).onDataSetDefRegistered(def);\n    }", "signature": "void testDoDeploy()", "full_signature": "@Test public void testDoDeploy()", "class_method_signature": "DataSetDefDeployerTest.testDoDeploy()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getDataSetDef", "deploy", "write", "getBytes", "flush", "close", "sleep", "getDataSetDef", "assertNotNull", "onDataSetDefRegistered", "verify"]}, "focal_class": {"identifier": "DataSetDefDeployer", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected String directory;", "modifier": "protected", "type": "String", "declarator": "directory", "var_name": "directory"}, {"original_string": "protected int scanIntervalInMillis = 3000;", "modifier": "protected", "type": "int", "declarator": "scanIntervalInMillis = 3000", "var_name": "scanIntervalInMillis"}, {"original_string": "protected Logger log = LoggerFactory.getLogger(DataSetDefDeployer.class);", "modifier": "protected", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DataSetDefDeployer.class)", "var_name": "log"}, {"original_string": "protected DataSetDefRegistry dataSetDefRegistry;", "modifier": "protected", "type": "DataSetDefRegistry", "declarator": "dataSetDefRegistry", "var_name": "dataSetDefRegistry"}, {"original_string": "protected Thread watcherThread;", "modifier": "protected", "type": "Thread", "declarator": "watcherThread", "var_name": "watcherThread"}, {"original_string": "protected DataSetDefJSONMarshaller jsonMarshaller;", "modifier": "protected", "type": "DataSetDefJSONMarshaller", "declarator": "jsonMarshaller", "var_name": "jsonMarshaller"}, {"original_string": "FilenameFilter _deployFilter = new FilenameFilter() {\n        public boolean accept(File dir, String name) {\n            return name.endsWith(\".deploy\");\n        }\n    };", "modifier": "", "type": "FilenameFilter", "declarator": "_deployFilter = new FilenameFilter() {\n        public boolean accept(File dir, String name) {\n            return name.endsWith(\".deploy\");\n        }\n    }", "var_name": "_deployFilter"}, {"original_string": "FilenameFilter _undeployFilter = new FilenameFilter() {\n        public boolean accept(File dir, String name) {\n            return name.endsWith(\".undeploy\");\n        }\n    };", "modifier": "", "type": "FilenameFilter", "declarator": "_undeployFilter = new FilenameFilter() {\n        public boolean accept(File dir, String name) {\n            return name.endsWith(\".undeploy\");\n        }\n    }", "var_name": "_undeployFilter"}], "methods": [{"identifier": "DataSetDefDeployer", "parameters": "()", "modifiers": "public", "return": "", "signature": " DataSetDefDeployer()", "full_signature": "public  DataSetDefDeployer()", "class_method_signature": "DataSetDefDeployer.DataSetDefDeployer()", "testcase": false, "constructor": true}, {"identifier": "DataSetDefDeployer", "parameters": "(DataSetDefJSONMarshaller jsonMarshaller, DataSetDefRegistry dataSetDefRegistry)", "modifiers": "public", "return": "", "signature": " DataSetDefDeployer(DataSetDefJSONMarshaller jsonMarshaller, DataSetDefRegistry dataSetDefRegistry)", "full_signature": "public  DataSetDefDeployer(DataSetDefJSONMarshaller jsonMarshaller, DataSetDefRegistry dataSetDefRegistry)", "class_method_signature": "DataSetDefDeployer.DataSetDefDeployer(DataSetDefJSONMarshaller jsonMarshaller, DataSetDefRegistry dataSetDefRegistry)", "testcase": false, "constructor": true}, {"identifier": "getDataSetDefRegistry", "parameters": "()", "modifiers": "public", "return": "DataSetDefRegistry", "signature": "DataSetDefRegistry getDataSetDefRegistry()", "full_signature": "public DataSetDefRegistry getDataSetDefRegistry()", "class_method_signature": "DataSetDefDeployer.getDataSetDefRegistry()", "testcase": false, "constructor": false}, {"identifier": "setDataSetDefRegistry", "parameters": "(DataSetDefRegistry dataSetDefRegistry)", "modifiers": "public", "return": "void", "signature": "void setDataSetDefRegistry(DataSetDefRegistry dataSetDefRegistry)", "full_signature": "public void setDataSetDefRegistry(DataSetDefRegistry dataSetDefRegistry)", "class_method_signature": "DataSetDefDeployer.setDataSetDefRegistry(DataSetDefRegistry dataSetDefRegistry)", "testcase": false, "constructor": false}, {"identifier": "getJsonMarshaller", "parameters": "()", "modifiers": "public", "return": "DataSetDefJSONMarshaller", "signature": "DataSetDefJSONMarshaller getJsonMarshaller()", "full_signature": "public DataSetDefJSONMarshaller getJsonMarshaller()", "class_method_signature": "DataSetDefDeployer.getJsonMarshaller()", "testcase": false, "constructor": false}, {"identifier": "setJsonMarshaller", "parameters": "(DataSetDefJSONMarshaller jsonMarshaller)", "modifiers": "public", "return": "void", "signature": "void setJsonMarshaller(DataSetDefJSONMarshaller jsonMarshaller)", "full_signature": "public void setJsonMarshaller(DataSetDefJSONMarshaller jsonMarshaller)", "class_method_signature": "DataSetDefDeployer.setJsonMarshaller(DataSetDefJSONMarshaller jsonMarshaller)", "testcase": false, "constructor": false}, {"identifier": "getDirectory", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDirectory()", "full_signature": "public String getDirectory()", "class_method_signature": "DataSetDefDeployer.getDirectory()", "testcase": false, "constructor": false}, {"identifier": "getScanIntervalInMillis", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getScanIntervalInMillis()", "full_signature": "public int getScanIntervalInMillis()", "class_method_signature": "DataSetDefDeployer.getScanIntervalInMillis()", "testcase": false, "constructor": false}, {"identifier": "setScanIntervalInMillis", "parameters": "(int scanIntervalInMillis)", "modifiers": "public", "return": "void", "signature": "void setScanIntervalInMillis(int scanIntervalInMillis)", "full_signature": "public void setScanIntervalInMillis(int scanIntervalInMillis)", "class_method_signature": "DataSetDefDeployer.setScanIntervalInMillis(int scanIntervalInMillis)", "testcase": false, "constructor": false}, {"identifier": "isRunning", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRunning()", "full_signature": "public boolean isRunning()", "class_method_signature": "DataSetDefDeployer.isRunning()", "testcase": false, "constructor": false}, {"identifier": "deploy", "parameters": "(final String dir)", "modifiers": "public synchronized", "return": "void", "signature": "void deploy(final String dir)", "full_signature": "public synchronized void deploy(final String dir)", "class_method_signature": "DataSetDefDeployer.deploy(final String dir)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void stop()", "full_signature": "public synchronized void stop()", "class_method_signature": "DataSetDefDeployer.stop()", "testcase": false, "constructor": false}, {"identifier": "validateDirectory", "parameters": "(String dir)", "modifiers": "protected", "return": "boolean", "signature": "boolean validateDirectory(String dir)", "full_signature": "protected boolean validateDirectory(String dir)", "class_method_signature": "DataSetDefDeployer.validateDirectory(String dir)", "testcase": false, "constructor": false}, {"identifier": "doDeploy", "parameters": "()", "modifiers": "protected synchronized", "return": "void", "signature": "void doDeploy()", "full_signature": "protected synchronized void doDeploy()", "class_method_signature": "DataSetDefDeployer.doDeploy()", "testcase": false, "constructor": false}, {"identifier": "getCSVFile", "parameters": "(CSVDataSetDef def)", "modifiers": "public", "return": "File", "signature": "File getCSVFile(CSVDataSetDef def)", "full_signature": "public File getCSVFile(CSVDataSetDef def)", "class_method_signature": "DataSetDefDeployer.getCSVFile(CSVDataSetDef def)", "testcase": false, "constructor": false}], "file": "kie-soup-dataset/kie-soup-dataset-core/src/main/java/org/dashbuilder/dataset/DataSetDefDeployer.java"}, "focal_method": {"identifier": "doDeploy", "parameters": "()", "modifiers": "protected synchronized", "return": "void", "body": "protected synchronized void doDeploy() {\n        if (!StringUtils.isBlank(directory)) {\n\n            // Look for data sets deploy\n            File[] files = new File(directory).listFiles(_deployFilter);\n            if (files != null) {\n                for (File f : files) {\n                    try {\n                        // Avoid repetitions\n                        f.delete();\n\n                        // Get the .dset file\n                        File dsetFile = new File(f.getAbsolutePath().replace(\".deploy\", \"\"));\n                        if (!dsetFile.exists()) continue;\n\n                        // Read & parse the data set\n                        FileReader fileReader = new FileReader(dsetFile);\n                        String json = IOUtils.toString(fileReader);\n                        DataSetDef def = jsonMarshaller.fromJson(json);\n                        if (StringUtils.isBlank(def.getUUID())) def.setUUID(dsetFile.getName());\n\n                        // CSV specific ...\n                        if (def instanceof CSVDataSetDef) {\n                            CSVDataSetDef csvDef = (CSVDataSetDef) def;\n                            File csvFile = getCSVFile(csvDef);\n                            if (csvFile != null) {\n                                csvDef.setFilePath(csvFile.getAbsolutePath());\n                            } else {\n                                log.error(\"Data set CSV file not found: \" + f.getName());\n                                continue;\n                            }\n                        }\n\n                        // Check if the data set really needs to be registered.\n                        DataSetDef existingDef = dataSetDefRegistry.getDataSetDef(def.getUUID());\n                        if (existingDef != null && jsonMarshaller.toJsonString(existingDef).equals(jsonMarshaller.toJsonString(def))) {\n                            // Avoid redundant deployments\n                            log.info(\"Data set already deployed: \" + def.getUUID());\n                        } else {\n                            // Register the data set\n                            dataSetDefRegistry.registerDataSetDef(def, \"system\", \"deploy(\" + def.getUUID() + \")\");\n                            log.info(\"Data set deployed: \" + def.getUUID());\n                        }\n                    } catch (Exception e) {\n                        log.error(\"Data set deployment error: \" + f.getName(), e);\n                    }\n                }\n            }\n\n            // Look for data sets undeploy\n            files = new File(directory).listFiles(_undeployFilter);\n            if (files != null) {\n                for (File f : files) {\n                    try {\n                        // Avoid repetitions\n                        f.delete();\n\n                        // Un-deploy the given uuid\n                        String uuid = f.getName().replace(\".undeploy\", \"\");\n                        DataSetDef def = dataSetDefRegistry.getDataSetDef(uuid);\n                        if (def != null) {\n                            dataSetDefRegistry.removeDataSetDef(uuid, \"system\", \"undeploy(\" + uuid + \")\");\n                            log.info(\"Data set deleted: \" + def.getName());\n                        } else {\n                            log.error(\"Data set not found: \" + uuid);\n                        }\n                    } catch (Exception e) {\n                        log.error(\"Data set un-deploy error: \" + f.getName(), e);\n                    }\n                }\n            }\n        }\n    }", "signature": "void doDeploy()", "full_signature": "protected synchronized void doDeploy()", "class_method_signature": "DataSetDefDeployer.doDeploy()", "testcase": false, "constructor": false, "invocations": ["isBlank", "listFiles", "delete", "replace", "getAbsolutePath", "exists", "toString", "fromJson", "isBlank", "getUUID", "setUUID", "getName", "getCSVFile", "setFilePath", "getAbsolutePath", "error", "getName", "getDataSetDef", "getUUID", "equals", "toJsonString", "toJsonString", "info", "getUUID", "registerDataSetDef", "getUUID", "info", "getUUID", "error", "getName", "listFiles", "delete", "replace", "getName", "getDataSetDef", "removeDataSetDef", "info", "getName", "error", "error", "getName"]}, "repository": {"repo_id": 103437385, "url": "https://github.com/kiegroup/kie-soup", "stars": 11, "created": "9/13/2017 6:41:37 PM +00:00", "updates": "2020-01-21T13:07:53+00:00", "fork": "False", "license": "licensed"}}