{"test_class": {"identifier": "EvaluateFormulasCommandTest", "superclass": "", "interfaces": "", "fields": [], "file": "de.prob2.kernel/src/test/java/de/prob/animator/command/EvaluateFormulasCommandTest.java"}, "test_case": {"identifier": "testProcessResult", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testProcessResult() {\n\n\t\tIEvalElement element = new ClassicalB(\"1<3\", FormulaExpand.EXPAND);\n\n\t\tfinal CompoundPrologTerm lpt = mkResult(\"true\");\n\t\tISimplifiedROMap<String, PrologTerm> m1 = key -> lpt;\n\t\tEvaluateFormulaCommand command = new EvaluateFormulaCommand(element,\n\t\t\t\t\"root\");\n\t\tcommand.processResult(m1);\n\n\t\tAbstractEvalResult value = command.getValue();\n\t\tassertEquals(\"true\", ((EvalResult) value).getValue());\n\t\tassertEquals(\"3\", ((EvalResult) value).getSolutions().get(\"a\"));\n\t}", "signature": "void testProcessResult()", "full_signature": "@Test public void testProcessResult()", "class_method_signature": "EvaluateFormulasCommandTest.testProcessResult()", "testcase": true, "constructor": false, "invocations": ["mkResult", "processResult", "getValue", "assertEquals", "getValue", "assertEquals", "get", "getSolutions"]}, "focal_class": {"identifier": "EvaluateFormulasCommand", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "private static final String PROLOG_COMMAND_NAME = \"evaluate_formulas\";", "modifier": "private static final", "type": "String", "declarator": "PROLOG_COMMAND_NAME = \"evaluate_formulas\"", "var_name": "PROLOG_COMMAND_NAME"}, {"original_string": "Logger logger = LoggerFactory.getLogger(EvaluateFormulasCommand.class);", "modifier": "", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(EvaluateFormulasCommand.class)", "var_name": "logger"}, {"original_string": "private static final String EVALUATE_RESULT_VARIABLE = \"Res\";", "modifier": "private static final", "type": "String", "declarator": "EVALUATE_RESULT_VARIABLE = \"Res\"", "var_name": "EVALUATE_RESULT_VARIABLE"}, {"original_string": "private final List<IEvalElement> evalElements;", "modifier": "private final", "type": "List<IEvalElement>", "declarator": "evalElements", "var_name": "evalElements"}, {"original_string": "private final List<AbstractEvalResult> values = new ArrayList<>();", "modifier": "private final", "type": "List<AbstractEvalResult>", "declarator": "values = new ArrayList<>()", "var_name": "values"}, {"original_string": "private String stateId;", "modifier": "private", "type": "String", "declarator": "stateId", "var_name": "stateId"}], "methods": [{"identifier": "EvaluateFormulasCommand", "parameters": "(final List<IEvalElement> evalElements, final String stateId)", "modifiers": "public", "return": "", "signature": " EvaluateFormulasCommand(final List<IEvalElement> evalElements, final String stateId)", "full_signature": "public  EvaluateFormulasCommand(final List<IEvalElement> evalElements, final String stateId)", "class_method_signature": "EvaluateFormulasCommand.EvaluateFormulasCommand(final List<IEvalElement> evalElements, final String stateId)", "testcase": false, "constructor": true}, {"identifier": "processResult", "parameters": "(final ISimplifiedROMap<String, PrologTerm> bindings)", "modifiers": "@Override public", "return": "void", "signature": "void processResult(final ISimplifiedROMap<String, PrologTerm> bindings)", "full_signature": "@Override public void processResult(final ISimplifiedROMap<String, PrologTerm> bindings)", "class_method_signature": "EvaluateFormulasCommand.processResult(final ISimplifiedROMap<String, PrologTerm> bindings)", "testcase": false, "constructor": false}, {"identifier": "writeCommand", "parameters": "(final IPrologTermOutput pout)", "modifiers": "@Override public", "return": "void", "signature": "void writeCommand(final IPrologTermOutput pout)", "full_signature": "@Override public void writeCommand(final IPrologTermOutput pout)", "class_method_signature": "EvaluateFormulasCommand.writeCommand(final IPrologTermOutput pout)", "testcase": false, "constructor": false}, {"identifier": "printEvalTerm", "parameters": "(final IPrologTermOutput pout, IEvalElement evalElement)", "modifiers": "private", "return": "void", "signature": "void printEvalTerm(final IPrologTermOutput pout, IEvalElement evalElement)", "full_signature": "private void printEvalTerm(final IPrologTermOutput pout, IEvalElement evalElement)", "class_method_signature": "EvaluateFormulasCommand.printEvalTerm(final IPrologTermOutput pout, IEvalElement evalElement)", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "public", "return": "List<AbstractEvalResult>", "signature": "List<AbstractEvalResult> getValues()", "full_signature": "public List<AbstractEvalResult> getValues()", "class_method_signature": "EvaluateFormulasCommand.getValues()", "testcase": false, "constructor": false}, {"identifier": "getResultMap", "parameters": "()", "modifiers": "public", "return": "Map<IEvalElement, AbstractEvalResult>", "signature": "Map<IEvalElement, AbstractEvalResult> getResultMap()", "full_signature": "public Map<IEvalElement, AbstractEvalResult> getResultMap()", "class_method_signature": "EvaluateFormulasCommand.getResultMap()", "testcase": false, "constructor": false}], "file": "de.prob2.kernel/src/main/java/de/prob/animator/command/EvaluateFormulasCommand.java"}, "focal_method": {"identifier": "processResult", "parameters": "(final ISimplifiedROMap<String, PrologTerm> bindings)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void processResult(final ISimplifiedROMap<String, PrologTerm> bindings) {\n\n\t\tListPrologTerm terms = BindingGenerator.getList(bindings, EVALUATE_RESULT_VARIABLE);\n\t\tfor (PrologTerm term : terms) {\n\t\t\tvalues.add(EvalResult.getEvalResult(term));\n\t\t}\n\t}", "signature": "void processResult(final ISimplifiedROMap<String, PrologTerm> bindings)", "full_signature": "@Override public void processResult(final ISimplifiedROMap<String, PrologTerm> bindings)", "class_method_signature": "EvaluateFormulasCommand.processResult(final ISimplifiedROMap<String, PrologTerm> bindings)", "testcase": false, "constructor": false, "invocations": ["getList", "add", "getEvalResult"]}, "repository": {"repo_id": 5495723, "url": "https://github.com/bendisposto/prob2", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 11, "size": 32880, "license": "licensed"}}