{"test_class": {"identifier": "BaseExceptionHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BaseExceptionHandler tested;", "modifier": "private", "type": "BaseExceptionHandler", "declarator": "tested", "var_name": "tested"}, {"original_string": "@Mock\n    private Object badRequestResponse;", "modifier": "@Mock\n    private", "type": "Object", "declarator": "badRequestResponse", "var_name": "badRequestResponse"}, {"original_string": "@Mock\n    private Object conflictResponse;", "modifier": "@Mock\n    private", "type": "Object", "declarator": "conflictResponse", "var_name": "conflictResponse"}, {"original_string": "@Mock\n    private Object internalErrorResponse;", "modifier": "@Mock\n    private", "type": "Object", "declarator": "internalErrorResponse", "var_name": "internalErrorResponse"}, {"original_string": "@Mock\n    private Object notFoundResponse;", "modifier": "@Mock\n    private", "type": "Object", "declarator": "notFoundResponse", "var_name": "notFoundResponse"}, {"original_string": "@Mock\n    private Object forbiddenResponse;", "modifier": "@Mock\n    private", "type": "Object", "declarator": "forbiddenResponse", "var_name": "forbiddenResponse"}], "file": "addons/process-management/process-management-common/src/test/java/org/kie/kogito/process/management/exceptions/BaseExceptionHandlerTest.java"}, "test_case": {"identifier": "testMapProcessInstanceNotFoundException", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testMapProcessInstanceNotFoundException() {\n        Object response = tested.mapException(new ProcessInstanceNotFoundException(\"processInstanceId\"));\n        assertThat(response).isEqualTo(notFoundResponse);\n    }", "signature": "void testMapProcessInstanceNotFoundException()", "full_signature": "@Test void testMapProcessInstanceNotFoundException()", "class_method_signature": "BaseExceptionHandlerTest.testMapProcessInstanceNotFoundException()", "testcase": true, "constructor": false, "invocations": ["mapException", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "BaseExceptionHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String MESSAGE = \"message\";", "modifier": "public static final", "type": "String", "declarator": "MESSAGE = \"message\"", "var_name": "MESSAGE"}, {"original_string": "public static final String PROCESS_INSTANCE_ID = \"processInstanceId\";", "modifier": "public static final", "type": "String", "declarator": "PROCESS_INSTANCE_ID = \"processInstanceId\"", "var_name": "PROCESS_INSTANCE_ID"}, {"original_string": "public static final String VARIABLE = \"variable\";", "modifier": "public static final", "type": "String", "declarator": "VARIABLE = \"variable\"", "var_name": "VARIABLE"}, {"original_string": "public static final String NODE_INSTANCE_ID = \"nodeInstanceId\";", "modifier": "public static final", "type": "String", "declarator": "NODE_INSTANCE_ID = \"nodeInstanceId\"", "var_name": "NODE_INSTANCE_ID"}, {"original_string": "public static final String NODE_ID = \"nodeId\";", "modifier": "public static final", "type": "String", "declarator": "NODE_ID = \"nodeId\"", "var_name": "NODE_ID"}, {"original_string": "public static final String FAILED_NODE_ID = \"failedNodeId\";", "modifier": "public static final", "type": "String", "declarator": "FAILED_NODE_ID = \"failedNodeId\"", "var_name": "FAILED_NODE_ID"}, {"original_string": "public static final String ID = \"id\";", "modifier": "public static final", "type": "String", "declarator": "ID = \"id\"", "var_name": "ID"}, {"original_string": "private final Map<Class<? extends Exception>, Function<Exception, T>> mapper;", "modifier": "private final", "type": "Map<Class<? extends Exception>, Function<Exception, T>>", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "BaseExceptionHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " BaseExceptionHandler()", "full_signature": "public  BaseExceptionHandler()", "class_method_signature": "BaseExceptionHandler.BaseExceptionHandler()", "testcase": false, "constructor": true}, {"identifier": "badRequest", "parameters": "(R body)", "modifiers": "protected abstract", "return": "T", "signature": "T badRequest(R body)", "full_signature": "protected abstract T badRequest(R body)", "class_method_signature": "BaseExceptionHandler.badRequest(R body)", "testcase": false, "constructor": false}, {"identifier": "conflict", "parameters": "(R body)", "modifiers": "protected abstract", "return": "T", "signature": "T conflict(R body)", "full_signature": "protected abstract T conflict(R body)", "class_method_signature": "BaseExceptionHandler.conflict(R body)", "testcase": false, "constructor": false}, {"identifier": "internalError", "parameters": "(R body)", "modifiers": "protected abstract", "return": "T", "signature": "T internalError(R body)", "full_signature": "protected abstract T internalError(R body)", "class_method_signature": "BaseExceptionHandler.internalError(R body)", "testcase": false, "constructor": false}, {"identifier": "notFound", "parameters": "(R body)", "modifiers": "protected abstract", "return": "T", "signature": "T notFound(R body)", "full_signature": "protected abstract T notFound(R body)", "class_method_signature": "BaseExceptionHandler.notFound(R body)", "testcase": false, "constructor": false}, {"identifier": "forbidden", "parameters": "(R body)", "modifiers": "protected abstract", "return": "T", "signature": "T forbidden(R body)", "full_signature": "protected abstract T forbidden(R body)", "class_method_signature": "BaseExceptionHandler.forbidden(R body)", "testcase": false, "constructor": false}, {"identifier": "mapException", "parameters": "(R exception)", "modifiers": "public", "return": "T", "signature": "T mapException(R exception)", "full_signature": "public T mapException(R exception)", "class_method_signature": "BaseExceptionHandler.mapException(R exception)", "testcase": false, "constructor": false}], "file": "addons/process-management/process-management-common/src/main/java/org/kie/kogito/process/management/exceptions/BaseExceptionHandler.java"}, "focal_method": {"identifier": "mapException", "parameters": "(R exception)", "modifiers": "public", "return": "T", "body": "public <R extends Exception> T mapException(R exception) {\n        return mapper\n                .getOrDefault(exception.getClass(), this::internalError)\n                .apply(exception);\n    }", "signature": "T mapException(R exception)", "full_signature": "public T mapException(R exception)", "class_method_signature": "BaseExceptionHandler.mapException(R exception)", "testcase": false, "constructor": false, "invocations": ["apply", "getOrDefault", "getClass"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}