{"test_class": {"identifier": "BsDiffTest", "superclass": "", "interfaces": "", "fields": [], "file": "feya/libraries/archive_diff/diff.generator/src/test/java/com/google/archivepatcher/generator/bsdiff/BsDiffTest.java"}, "test_case": {"identifier": "searchForMatchBaseCaseVeryLongGroupArrayTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void searchForMatchBaseCaseVeryLongGroupArrayTest() throws IOException {\n    final RandomAccessObject groupArray3RO =\n        intArrayToRandomAccessObject(BsDiffTestData.LONGER_GROUP_ARRAY_350);\n\n    final int scan = 1;\n    BsDiff.Match ret =\n        BsDiff.searchForMatchBaseCase(\n            groupArray3RO,\n            BsDiffTestData.LONGER_DATA_349_RO,\n            BsDiffTestData.LONGER_DATA_354_NEW_RO,\n            scan,\n            0,\n            BsDiffTestData.LONGER_DATA_349.length);\n    Assert.assertEquals(0, ret.length);\n    Assert.assertEquals(246, ret.start);\n\n    ret =\n        BsDiff.searchForMatchBaseCase(\n            groupArray3RO,\n            BsDiffTestData.LONGER_DATA_349_RO,\n            BsDiffTestData.LONGER_DATA_354_NEW_RO,\n            scan,\n            219,\n            220);\n    Assert.assertEquals(0, ret.length);\n    Assert.assertEquals(251, ret.start);\n  }", "signature": "void searchForMatchBaseCaseVeryLongGroupArrayTest()", "full_signature": "@Test public void searchForMatchBaseCaseVeryLongGroupArrayTest()", "class_method_signature": "BsDiffTest.searchForMatchBaseCaseVeryLongGroupArrayTest()", "testcase": true, "constructor": false, "invocations": ["intArrayToRandomAccessObject", "searchForMatchBaseCase", "assertEquals", "assertEquals", "searchForMatchBaseCase", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "BsDiff", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "lengthOfMatch", "parameters": "(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "modifiers": "static", "return": "int", "signature": "int lengthOfMatch(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "full_signature": "static int lengthOfMatch(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "class_method_signature": "BsDiff.lengthOfMatch(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "testcase": false, "constructor": false}, {"identifier": "searchForMatchBaseCase", "parameters": "(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "modifiers": "static", "return": "Match", "signature": "Match searchForMatchBaseCase(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "full_signature": "static Match searchForMatchBaseCase(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "class_method_signature": "BsDiff.searchForMatchBaseCase(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "testcase": false, "constructor": false}, {"identifier": "searchForMatch", "parameters": "(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "modifiers": "static", "return": "Match", "signature": "Match searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "full_signature": "static Match searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "class_method_signature": "BsDiff.searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.generator/src/main/java/com/google/archivepatcher/generator/bsdiff/BsDiff.java"}, "focal_method": {"identifier": "searchForMatchBaseCase", "parameters": "(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "modifiers": "static", "return": "Match", "body": "static Match searchForMatchBaseCase(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)\n      throws IOException {\n    // Located the start of a matching range (no further search required) or the size of the range\n    // has shrunk to one byte (no further search possible).\n    groupArray.seekToIntAligned(oldDataRangeStartA);\n    final int groupArrayOldDataRangeStartA = groupArray.readInt();\n    final int lengthOfMatchA =\n        lengthOfMatch(oldData, groupArrayOldDataRangeStartA, newData, newStart);\n    groupArray.seekToIntAligned(oldDataRangeStartB);\n    final int groupArrayOldDataRangeStartB = groupArray.readInt();\n    final int lengthOfMatchB =\n        lengthOfMatch(oldData, groupArrayOldDataRangeStartB, newData, newStart);\n\n    if (lengthOfMatchA > lengthOfMatchB) {\n      return Match.of(groupArrayOldDataRangeStartA, lengthOfMatchA);\n    }\n\n    return Match.of(groupArrayOldDataRangeStartB, lengthOfMatchB);\n  }", "signature": "Match searchForMatchBaseCase(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "full_signature": "static Match searchForMatchBaseCase(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "class_method_signature": "BsDiff.searchForMatchBaseCase(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "testcase": false, "constructor": false, "invocations": ["seekToIntAligned", "readInt", "lengthOfMatch", "seekToIntAligned", "readInt", "lengthOfMatch", "of", "of"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}