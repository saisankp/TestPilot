{"test_class": {"identifier": "TestPBInstance", "superclass": "", "interfaces": "", "fields": [], "file": "clearcommon/src/test/java/edu/colorado/clear/common/propbank/TestPBInstance.java"}, "test_case": {"identifier": "testPBArg", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPBArg() throws IOException {\n        System.out.println(Arrays.toString(\"19:1*27:0;31:4\".split(\"(?=[\\\\*,;])\")));\n        assertTrue(PBArg.ARG_PATTERN.matcher(\"19:1*27:0-LINK-SLC\").matches());\n        assertFalse(PBArg.ARG_PATTERN.matcher(\"19:1*27:0LINK-SLC\").matches());\n        \n        String treeDir = \"/home/verbs/student/shumin/corpora/ontonotes-release-4.0/data/english/annotations/\";\n        \n        TBReader tbReader = new TBReader(treeDir, false);\n        PBFileReader reader = new PBFileReader(tbReader,\n                \"/home/verbs/student/shumin/corpora/ontonotes-release-4.0/data/english/annotations/nw/wsj/23/wsj_2356.prop\",\n                new OntoNotesTokenizer());\n        List<PBInstance> instances = new ArrayList<PBInstance> ();\n        PBInstance instance=null;\n        try {\n            while ((instance = reader.nextProp())!=null)\n            {\n                instances.add(instance);\n                System.out.println(instance.tree.getFilename()+\" \"+instance.tree.getIndex());\n                System.out.println(instance);\n                System.out.flush();\n            }\n        } catch (PBFormatException e) {\n            System.err.println(instances.size());\n            e.printStackTrace();\n            assertTrue(false);\n        } catch (ParseException e) {\n            System.err.println(instances.size());\n            e.printStackTrace();\n            assertTrue(false);\n        }\n        \n        int instanceNum = instances.size();\n        \n        int iNum = 0;\n        \n        reader = new PBFileReader(new TBReader(treeDir, false),\n                \"/home/verbs/student/shumin/corpora/ontonotes-release-4.0/data/english/annotations/nw/wsj/23/wsj_2356.prop\",\n                new OntoNotesTokenizer());\n \n        while ((instances = reader.nextPropSet())!=null)\n        {\n            System.out.println(\"--------------------------\");\n            iNum += instances.size();\n            for (PBInstance aInstance:instances)\n            {\n                System.out.println(aInstance.tree.getFilename()+\" \"+aInstance.tree.getIndex());\n                System.out.println(aInstance);\n                System.out.flush();\n            }\n        } \n        System.out.println(instanceNum+\" \"+iNum);\n        assertEquals(instanceNum, iNum);\n        \n        iNum = 0;\n        \n        PBReader pbReader = new PBReader(new TBReader(treeDir, false),\n                \"/home/verbs/student/shumin/corpora/ontonotes-release-4.0/data/english/annotations/nw/wsj/23/wsj_2356.prop\",\n                \".+\",\n                new OntoNotesTokenizer());\n \n        while ((instances = pbReader.nextPropSet())!=null)\n        {\n            System.out.println(\"--------------------------\");\n            iNum += instances.size();\n            for (PBInstance aInstance:instances)\n            {\n                System.out.println(aInstance.tree.getFilename()+\" \"+aInstance.tree.getIndex());\n                System.out.println(aInstance);\n                System.out.flush();\n            }\n        } \n        System.out.println(instanceNum+\" \"+iNum);\n        assertEquals(instanceNum, iNum);\n    }", "signature": "void testPBArg()", "full_signature": "@Test public void testPBArg()", "class_method_signature": "TestPBInstance.testPBArg()", "testcase": true, "constructor": false, "invocations": ["println", "toString", "split", "assertTrue", "matches", "matcher", "assertFalse", "matches", "matcher", "nextProp", "add", "println", "getFilename", "getIndex", "println", "flush", "println", "size", "printStackTrace", "assertTrue", "println", "size", "printStackTrace", "assertTrue", "size", "nextPropSet", "println", "size", "println", "getFilename", "getIndex", "println", "flush", "println", "assertEquals", "nextPropSet", "println", "size", "println", "getFilename", "getIndex", "println", "flush", "println", "assertEquals"]}, "focal_class": {"identifier": "PBInstance", "superclass": "", "interfaces": "implements Comparable<PBInstance>, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -1966998836839085182L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -1966998836839085182L", "var_name": "serialVersionUID"}, {"original_string": "TBNode      predicateNode;", "modifier": "", "type": "TBNode", "declarator": "predicateNode", "var_name": "predicateNode"}, {"original_string": "TBNode      prrNode;", "modifier": "", "type": "TBNode", "declarator": "prrNode", "var_name": "prrNode"}, {"original_string": "String      rolesetId;", "modifier": "", "type": "String", "declarator": "rolesetId", "var_name": "rolesetId"}, {"original_string": "String      verbnetId;", "modifier": "", "type": "String", "declarator": "verbnetId", "var_name": "verbnetId"}, {"original_string": "PBArg[]     args;", "modifier": "", "type": "PBArg[]", "declarator": "args", "var_name": "args"}, {"original_string": "PBArg[]     emptyArgs;", "modifier": "", "type": "PBArg[]", "declarator": "emptyArgs", "var_name": "emptyArgs"}, {"original_string": "PBArg[]     allArgs;", "modifier": "", "type": "PBArg[]", "declarator": "allArgs", "var_name": "allArgs"}, {"original_string": "TBTree      tree;", "modifier": "", "type": "TBTree", "declarator": "tree", "var_name": "tree"}], "methods": [{"identifier": "PBInstance", "parameters": "()", "modifiers": "public", "return": "", "signature": " PBInstance()", "full_signature": "public  PBInstance()", "class_method_signature": "PBInstance.PBInstance()", "testcase": false, "constructor": true}, {"identifier": "getPredicate", "parameters": "()", "modifiers": "public", "return": "TBNode", "signature": "TBNode getPredicate()", "full_signature": "public TBNode getPredicate()", "class_method_signature": "PBInstance.getPredicate()", "testcase": false, "constructor": false}, {"identifier": "getRoleset", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRoleset()", "full_signature": "public String getRoleset()", "class_method_signature": "PBInstance.getRoleset()", "testcase": false, "constructor": false}, {"identifier": "getVerbnetId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getVerbnetId()", "full_signature": "public String getVerbnetId()", "class_method_signature": "PBInstance.getVerbnetId()", "testcase": false, "constructor": false}, {"identifier": "setVerbnetId", "parameters": "(String verbnetId)", "modifiers": "public", "return": "void", "signature": "void setVerbnetId(String verbnetId)", "full_signature": "public void setVerbnetId(String verbnetId)", "class_method_signature": "PBInstance.setVerbnetId(String verbnetId)", "testcase": false, "constructor": false}, {"identifier": "getTree", "parameters": "()", "modifiers": "public", "return": "TBTree", "signature": "TBTree getTree()", "full_signature": "public TBTree getTree()", "class_method_signature": "PBInstance.getTree()", "testcase": false, "constructor": false}, {"identifier": "getArgs", "parameters": "()", "modifiers": "public", "return": "PBArg[]", "signature": "PBArg[] getArgs()", "full_signature": "public PBArg[] getArgs()", "class_method_signature": "PBInstance.getArgs()", "testcase": false, "constructor": false}, {"identifier": "getEmptyArgs", "parameters": "()", "modifiers": "public", "return": "PBArg[]", "signature": "PBArg[] getEmptyArgs()", "full_signature": "public PBArg[] getEmptyArgs()", "class_method_signature": "PBInstance.getEmptyArgs()", "testcase": false, "constructor": false}, {"identifier": "getAllArgs", "parameters": "()", "modifiers": "public", "return": "PBArg[]", "signature": "PBArg[] getAllArgs()", "full_signature": "public PBArg[] getAllArgs()", "class_method_signature": "PBInstance.getAllArgs()", "testcase": false, "constructor": false}, {"identifier": "getNodeId", "parameters": "(TBNode node)", "modifiers": "public static", "return": "int[]", "signature": "int[] getNodeId(TBNode node)", "full_signature": "public static int[] getNodeId(TBNode node)", "class_method_signature": "PBInstance.getNodeId(TBNode node)", "testcase": false, "constructor": false}, {"identifier": "markNode", "parameters": "(TBNode node, String[] preMarkup, String[] postMarkup, String pre, String post,  boolean printEC)", "modifiers": "static", "return": "void", "signature": "void markNode(TBNode node, String[] preMarkup, String[] postMarkup, String pre, String post,  boolean printEC)", "full_signature": "static void markNode(TBNode node, String[] preMarkup, String[] postMarkup, String pre, String post,  boolean printEC)", "class_method_signature": "PBInstance.markNode(TBNode node, String[] preMarkup, String[] postMarkup, String pre, String post,  boolean printEC)", "testcase": false, "constructor": false}, {"identifier": "markArg", "parameters": "(PBArg arg, String[] preMarkup, String[] postMarkup, String pre, String post, boolean printEC)", "modifiers": "public static", "return": "void", "signature": "void markArg(PBArg arg, String[] preMarkup, String[] postMarkup, String pre, String post, boolean printEC)", "full_signature": "public static void markArg(PBArg arg, String[] preMarkup, String[] postMarkup, String pre, String post, boolean printEC)", "class_method_signature": "PBInstance.markArg(PBArg arg, String[] preMarkup, String[] postMarkup, String pre, String post, boolean printEC)", "testcase": false, "constructor": false}, {"identifier": "toText", "parameters": "(boolean printEC)", "modifiers": "public", "return": "String", "signature": "String toText(boolean printEC)", "full_signature": "public String toText(boolean printEC)", "class_method_signature": "PBInstance.toText(boolean printEC)", "testcase": false, "constructor": false}, {"identifier": "toText", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toText()", "full_signature": "public String toText()", "class_method_signature": "PBInstance.toText()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PBInstance.toString()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(PBInstance rhs)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(PBInstance rhs)", "full_signature": "@Override public int compareTo(PBInstance rhs)", "class_method_signature": "PBInstance.compareTo(PBInstance rhs)", "testcase": false, "constructor": false}], "file": "clearcommon/src/main/java/edu/colorado/clear/common/propbank/PBInstance.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String toString() {\n        StringBuilder str = new StringBuilder();\n        str.append(rolesetId+\": \");\n        \n        str.append(predicateNode.getWord()+\"\\n\");\n        \n        for (PBArg arg: args)\n            str.append(arg+\"\\n\");\n        \n        return str.toString();\n    }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PBInstance.toString()", "testcase": false, "constructor": false, "invocations": ["append", "append", "getWord", "append", "toString"]}, "repository": {"repo_id": 30953541, "url": "https://github.com/wushumin/clearsrl", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 24087, "license": "licensed"}}