{"test_class": {"identifier": "ZTSImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int roleTokenDefaultTimeout = 2400;", "modifier": "private", "type": "int", "declarator": "roleTokenDefaultTimeout = 2400", "var_name": "roleTokenDefaultTimeout"}, {"original_string": "private int roleTokenMaxTimeout = 96000;", "modifier": "private", "type": "int", "declarator": "roleTokenMaxTimeout = 96000", "var_name": "roleTokenMaxTimeout"}, {"original_string": "private ZTSImpl zts = null;", "modifier": "private", "type": "ZTSImpl", "declarator": "zts = null", "var_name": "zts"}, {"original_string": "private ZTSAuthorizer authorizer = null;", "modifier": "private", "type": "ZTSAuthorizer", "declarator": "authorizer = null", "var_name": "authorizer"}, {"original_string": "private DataStore store = null;", "modifier": "private", "type": "DataStore", "declarator": "store = null", "var_name": "store"}, {"original_string": "private PrivateKey privateKey = null;", "modifier": "private", "type": "PrivateKey", "declarator": "privateKey = null", "var_name": "privateKey"}, {"original_string": "private AuditLogger auditLogger = null;", "modifier": "private", "type": "AuditLogger", "declarator": "auditLogger = null", "var_name": "auditLogger"}, {"original_string": "private CloudStore cloudStore = null;", "modifier": "private", "type": "CloudStore", "declarator": "cloudStore = null", "var_name": "cloudStore"}, {"original_string": "@Mock private CloudStore mockCloudStore;", "modifier": "@Mock private", "type": "CloudStore", "declarator": "mockCloudStore", "var_name": "mockCloudStore"}, {"original_string": "private static final String ZTS_DATA_STORE_PATH = \"/tmp/zts_server_unit_tests/zts_root\";", "modifier": "private static final", "type": "String", "declarator": "ZTS_DATA_STORE_PATH = \"/tmp/zts_server_unit_tests/zts_root\"", "var_name": "ZTS_DATA_STORE_PATH"}, {"original_string": "private static final String ZTS_Y64_CERT0 = \"LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RR\"\n            + \"RUJBUVVBQTRHTkFEQ0JpUUtCZ1FDMXRHU1ZDQTh3bDVldzVZNzZXajJySkFVRApZYW5FSmZLbUFseDVjUS84a\"\n            + \"EtFVWZTU2dwWHIzQ3pkaDFhMjZkbGI3bW1LMjlxbVhKWGg2dW1XOUF5ZlRPS1ZvCis2QVNsb1ZVM2F2dnVmbE\"\n            + \"dVT0VnMmpzbWRha1IyNEtjTGpBdTZRclVlNDE3bEczdDhxU1BJR2pTNUMrQ3NKVXcKaDA0aEh4NWYrUEV3eFY\"\n            + \"0cmJRSURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo-\";", "modifier": "private static final", "type": "String", "declarator": "ZTS_Y64_CERT0 = \"LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RR\"\n            + \"RUJBUVVBQTRHTkFEQ0JpUUtCZ1FDMXRHU1ZDQTh3bDVldzVZNzZXajJySkFVRApZYW5FSmZLbUFseDVjUS84a\"\n            + \"EtFVWZTU2dwWHIzQ3pkaDFhMjZkbGI3bW1LMjlxbVhKWGg2dW1XOUF5ZlRPS1ZvCis2QVNsb1ZVM2F2dnVmbE\"\n            + \"dVT0VnMmpzbWRha1IyNEtjTGpBdTZRclVlNDE3bEczdDhxU1BJR2pTNUMrQ3NKVXcKaDA0aEh4NWYrUEV3eFY\"\n            + \"0cmJRSURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo-\"", "var_name": "ZTS_Y64_CERT0"}, {"original_string": "private static final String ZTS_PEM_CERT0 = \"-----BEGIN PUBLIC KEY-----\\n\"\n            + \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC1tGSVCA8wl5ew5Y76Wj2rJAUD\\n\"\n            + \"YanEJfKmAlx5cQ/8hKEUfSSgpXr3Czdh1a26dlb7mmK29qmXJXh6umW9AyfTOKVo\\n\"\n            + \"+6ASloVU3avvuflGUOEg2jsmdakR24KcLjAu6QrUe417lG3t8qSPIGjS5C+CsJUw\\n\"\n            + \"h04hHx5f+PEwxV4rbQIDAQAB\\n\"\n            + \"-----END PUBLIC KEY-----\\n\";", "modifier": "private static final", "type": "String", "declarator": "ZTS_PEM_CERT0 = \"-----BEGIN PUBLIC KEY-----\\n\"\n            + \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC1tGSVCA8wl5ew5Y76Wj2rJAUD\\n\"\n            + \"YanEJfKmAlx5cQ/8hKEUfSSgpXr3Czdh1a26dlb7mmK29qmXJXh6umW9AyfTOKVo\\n\"\n            + \"+6ASloVU3avvuflGUOEg2jsmdakR24KcLjAu6QrUe417lG3t8qSPIGjS5C+CsJUw\\n\"\n            + \"h04hHx5f+PEwxV4rbQIDAQAB\\n\"\n            + \"-----END PUBLIC KEY-----\\n\"", "var_name": "ZTS_PEM_CERT0"}, {"original_string": "private final static String ROLE_CERT_DB_REQUEST =\n            \"-----BEGIN CERTIFICATE REQUEST-----\\n\"\n            + \"MIIBujCCASMCAQAwOzELMAkGA1UEBhMCVVMxDjAMBgNVBAoTBVlhaG9vMRwwGgYD\\n\"\n            + \"VQQDExNzcG9ydHM6cm9sZS5yZWFkZXJzMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB\\n\"\n            + \"iQKBgQCu0nOEra8WmmU91u2KrDdcKRDcZn3oSwsZD/55d0bkMwEiMzfQ+xHVRFI1\\n\"\n            + \"PPGjhG167oRhTRKE3a3uakMGmMDM5WWcDLbLo+PHZGqUyhJrvq5BF4VWrUWpY+rp\\n\"\n            + \"paklBTUPY0asmlObVpFBVoujkSyxMIXmOi9qK/O+Bs0BI4jo6QIDAQABoD8wPQYJ\\n\"\n            + \"KoZIhvcNAQkOMTAwLjAsBgNVHREEJTAjgiFhcGkuY29yZXRlY2gtdGVzdC5hd3Mu\\n\"\n            + \"eWFob28uY2xvdWQwDQYJKoZIhvcNAQELBQADgYEAQSEWI7eRM5Xv0oENQ+zzdoQI\\n\"\n            + \"MgzgsXRKGxlZFBpHNvT1R/4pkrU2XdpU1sQP8nrs3Xl+jUd70Ke7K1b2qL6D9op8\\n\"\n            + \"eE/qKXv+mcEBGlSCaJtK9MBUnOh4TVZ3EePxbc41Ha2/zWn+J3RFBMz9i1Nxy+Nq\\n\"\n            + \"s1K+2Aj6SbErxrEunNI=\\n\"\n            + \"-----END CERTIFICATE REQUEST-----\\n\";", "modifier": "private final static", "type": "String", "declarator": "ROLE_CERT_DB_REQUEST =\n            \"-----BEGIN CERTIFICATE REQUEST-----\\n\"\n            + \"MIIBujCCASMCAQAwOzELMAkGA1UEBhMCVVMxDjAMBgNVBAoTBVlhaG9vMRwwGgYD\\n\"\n            + \"VQQDExNzcG9ydHM6cm9sZS5yZWFkZXJzMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB\\n\"\n            + \"iQKBgQCu0nOEra8WmmU91u2KrDdcKRDcZn3oSwsZD/55d0bkMwEiMzfQ+xHVRFI1\\n\"\n            + \"PPGjhG167oRhTRKE3a3uakMGmMDM5WWcDLbLo+PHZGqUyhJrvq5BF4VWrUWpY+rp\\n\"\n            + \"paklBTUPY0asmlObVpFBVoujkSyxMIXmOi9qK/O+Bs0BI4jo6QIDAQABoD8wPQYJ\\n\"\n            + \"KoZIhvcNAQkOMTAwLjAsBgNVHREEJTAjgiFhcGkuY29yZXRlY2gtdGVzdC5hd3Mu\\n\"\n            + \"eWFob28uY2xvdWQwDQYJKoZIhvcNAQELBQADgYEAQSEWI7eRM5Xv0oENQ+zzdoQI\\n\"\n            + \"MgzgsXRKGxlZFBpHNvT1R/4pkrU2XdpU1sQP8nrs3Xl+jUd70Ke7K1b2qL6D9op8\\n\"\n            + \"eE/qKXv+mcEBGlSCaJtK9MBUnOh4TVZ3EePxbc41Ha2/zWn+J3RFBMz9i1Nxy+Nq\\n\"\n            + \"s1K+2Aj6SbErxrEunNI=\\n\"\n            + \"-----END CERTIFICATE REQUEST-----\\n\"", "var_name": "ROLE_CERT_DB_REQUEST"}, {"original_string": "private final static String ROLE_CERT_CORETECH_REQUEST =\n            \"-----BEGIN CERTIFICATE REQUEST-----\\n\"\n            + \"MIIBXzCCAQkCAQAwZDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMQ8wDQYDVQQK\\n\"\n            + \"EwZBdGhlbnoxFzAVBgNVBAsTDlRlc3RpbmcgRG9tYWluMR4wHAYDVQQDExVjb3Jl\\n\"\n            + \"dGVjaDpyb2xlLnJlYWRlcnMwXDANBgkqhkiG9w0BAQEFAANLADBIAkEAn70OSBIw\\n\"\n            + \"2Pqht+LT8fa+eqxpAv/T7jVPFmy61dHa+o7e1aLl0m19lJIQu/15YfUo8+XY83fT\\n\"\n            + \"QOVHACUQa82PvwIDAQABoEAwPgYJKoZIhvcNAQkOMTEwLzAtBgNVHREEJjAkgSJ1\\n\"\n            + \"c2VyX2RvbWFpbi51c2VyMUB6dHMuYXRoZW56LmNsb3VkMA0GCSqGSIb3DQEBCwUA\\n\"\n            + \"A0EAfxmNOBAUUBjtmfH4ytJ1FrL8cuADVeQnJb7pX4ZJyNjFbdRwklmRMQgtY7As\\n\"\n            + \"zs7g629IN4L2xC1zopG4NcNEdw==\"\n            + \"\\n-----END CERTIFICATE REQUEST-----\\n\";", "modifier": "private final static", "type": "String", "declarator": "ROLE_CERT_CORETECH_REQUEST =\n            \"-----BEGIN CERTIFICATE REQUEST-----\\n\"\n            + \"MIIBXzCCAQkCAQAwZDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMQ8wDQYDVQQK\\n\"\n            + \"EwZBdGhlbnoxFzAVBgNVBAsTDlRlc3RpbmcgRG9tYWluMR4wHAYDVQQDExVjb3Jl\\n\"\n            + \"dGVjaDpyb2xlLnJlYWRlcnMwXDANBgkqhkiG9w0BAQEFAANLADBIAkEAn70OSBIw\\n\"\n            + \"2Pqht+LT8fa+eqxpAv/T7jVPFmy61dHa+o7e1aLl0m19lJIQu/15YfUo8+XY83fT\\n\"\n            + \"QOVHACUQa82PvwIDAQABoEAwPgYJKoZIhvcNAQkOMTEwLzAtBgNVHREEJjAkgSJ1\\n\"\n            + \"c2VyX2RvbWFpbi51c2VyMUB6dHMuYXRoZW56LmNsb3VkMA0GCSqGSIb3DQEBCwUA\\n\"\n            + \"A0EAfxmNOBAUUBjtmfH4ytJ1FrL8cuADVeQnJb7pX4ZJyNjFbdRwklmRMQgtY7As\\n\"\n            + \"zs7g629IN4L2xC1zopG4NcNEdw==\"\n            + \"\\n-----END CERTIFICATE REQUEST-----\\n\"", "var_name": "ROLE_CERT_CORETECH_REQUEST"}, {"original_string": "private static final String MOCKCLIENTADDR = \"10.11.12.13\";", "modifier": "private static final", "type": "String", "declarator": "MOCKCLIENTADDR = \"10.11.12.13\"", "var_name": "MOCKCLIENTADDR"}, {"original_string": "@Mock private HttpServletRequest  mockServletRequest;", "modifier": "@Mock private", "type": "HttpServletRequest", "declarator": "mockServletRequest", "var_name": "mockServletRequest"}, {"original_string": "@Mock private HttpServletResponse mockServletResponse;", "modifier": "@Mock private", "type": "HttpServletResponse", "declarator": "mockServletResponse", "var_name": "mockServletResponse"}], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/ZTSImplTest.java"}, "test_case": {"identifier": "testValidateRoleCertificateExtRequestInvalidIP", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateRoleCertificateExtRequestInvalidIP() throws IOException {\n\n        Path path = Paths.get(\"src/test/resources/athenz_coretech_role_uri_ip.csr\");\n        String csr = new String(Files.readAllBytes(path));\n        X509RoleCertRequest certReq = new X509RoleCertRequest(csr);\n\n        assertFalse(zts.validateRoleCertificateExtRequest(certReq, \"user_domain.user1\", null, null, \"10.20.20.20\"));\n\n        // with disabled ip check, we should get success\n\n        zts.verifyCertRequestIP = false;\n        assertTrue(zts.validateRoleCertificateExtRequest(certReq, \"user_domain.user1\", null, null, \"10.20.20.20\"));\n    }", "signature": "void testValidateRoleCertificateExtRequestInvalidIP()", "full_signature": "@Test public void testValidateRoleCertificateExtRequestInvalidIP()", "class_method_signature": "ZTSImplTest.testValidateRoleCertificateExtRequestInvalidIP()", "testcase": true, "constructor": false, "invocations": ["get", "readAllBytes", "assertFalse", "validateRoleCertificateExtRequest", "assertTrue", "validateRoleCertificateExtRequest"]}, "focal_class": {"identifier": "ZTSImpl", "superclass": "", "interfaces": "implements KeyStore, ZTSHandler", "fields": [{"original_string": "private static String ROOT_DIR;", "modifier": "private static", "type": "String", "declarator": "ROOT_DIR", "var_name": "ROOT_DIR"}, {"original_string": "protected DataStore dataStore;", "modifier": "protected", "type": "DataStore", "declarator": "dataStore", "var_name": "dataStore"}, {"original_string": "protected CloudStore cloudStore;", "modifier": "protected", "type": "CloudStore", "declarator": "cloudStore", "var_name": "cloudStore"}, {"original_string": "protected InstanceCertManager instanceCertManager;", "modifier": "protected", "type": "InstanceCertManager", "declarator": "instanceCertManager", "var_name": "instanceCertManager"}, {"original_string": "protected InstanceProviderManager instanceProviderManager;", "modifier": "protected", "type": "InstanceProviderManager", "declarator": "instanceProviderManager", "var_name": "instanceProviderManager"}, {"original_string": "protected Metric metric = null;", "modifier": "protected", "type": "Metric", "declarator": "metric = null", "var_name": "metric"}, {"original_string": "protected Schema schema = null;", "modifier": "protected", "type": "Schema", "declarator": "schema = null", "var_name": "schema"}, {"original_string": "protected ServerPrivateKey privateKey = null;", "modifier": "protected", "type": "ServerPrivateKey", "declarator": "privateKey = null", "var_name": "privateKey"}, {"original_string": "protected ServerPrivateKey privateECKey = null;", "modifier": "protected", "type": "ServerPrivateKey", "declarator": "privateECKey = null", "var_name": "privateECKey"}, {"original_string": "protected ServerPrivateKey privateRSAKey = null;", "modifier": "protected", "type": "ServerPrivateKey", "declarator": "privateRSAKey = null", "var_name": "privateRSAKey"}, {"original_string": "protected PrivateKeyStore privateKeyStore = null;", "modifier": "protected", "type": "PrivateKeyStore", "declarator": "privateKeyStore = null", "var_name": "privateKeyStore"}, {"original_string": "protected HostnameResolver hostnameResolver = null;", "modifier": "protected", "type": "HostnameResolver", "declarator": "hostnameResolver = null", "var_name": "hostnameResolver"}, {"original_string": "protected int roleTokenDefaultTimeout;", "modifier": "protected", "type": "int", "declarator": "roleTokenDefaultTimeout", "var_name": "roleTokenDefaultTimeout"}, {"original_string": "protected int roleTokenMaxTimeout;", "modifier": "protected", "type": "int", "declarator": "roleTokenMaxTimeout", "var_name": "roleTokenMaxTimeout"}, {"original_string": "protected int idTokenMaxTimeout;", "modifier": "protected", "type": "int", "declarator": "idTokenMaxTimeout", "var_name": "idTokenMaxTimeout"}, {"original_string": "protected long x509CertRefreshResetTime;", "modifier": "protected", "type": "long", "declarator": "x509CertRefreshResetTime", "var_name": "x509CertRefreshResetTime"}, {"original_string": "protected long signedPolicyTimeout;", "modifier": "protected", "type": "long", "declarator": "signedPolicyTimeout", "var_name": "signedPolicyTimeout"}, {"original_string": "protected static String serverHostName = null;", "modifier": "protected static", "type": "String", "declarator": "serverHostName = null", "var_name": "serverHostName"}, {"original_string": "protected String ostkHostSignerDomain = null;", "modifier": "protected", "type": "String", "declarator": "ostkHostSignerDomain = null", "var_name": "ostkHostSignerDomain"}, {"original_string": "protected String ostkHostSignerService = null;", "modifier": "protected", "type": "String", "declarator": "ostkHostSignerService = null", "var_name": "ostkHostSignerService"}, {"original_string": "protected AuditLogger auditLogger = null;", "modifier": "protected", "type": "AuditLogger", "declarator": "auditLogger = null", "var_name": "auditLogger"}, {"original_string": "protected String serverRegion = null;", "modifier": "protected", "type": "String", "declarator": "serverRegion = null", "var_name": "serverRegion"}, {"original_string": "protected String userDomain;", "modifier": "protected", "type": "String", "declarator": "userDomain", "var_name": "userDomain"}, {"original_string": "protected String userDomainPrefix;", "modifier": "protected", "type": "String", "declarator": "userDomainPrefix", "var_name": "userDomainPrefix"}, {"original_string": "protected String userDomainAlias;", "modifier": "protected", "type": "String", "declarator": "userDomainAlias", "var_name": "userDomainAlias"}, {"original_string": "protected String userDomainAliasPrefix;", "modifier": "protected", "type": "String", "declarator": "userDomainAliasPrefix", "var_name": "userDomainAliasPrefix"}, {"original_string": "protected boolean leastPrivilegePrincipal = false;", "modifier": "protected", "type": "boolean", "declarator": "leastPrivilegePrincipal = false", "var_name": "leastPrivilegePrincipal"}, {"original_string": "protected boolean singleDomainInRoleCert = false;", "modifier": "protected", "type": "boolean", "declarator": "singleDomainInRoleCert = false", "var_name": "singleDomainInRoleCert"}, {"original_string": "protected Set<String> authorizedProxyUsers = null;", "modifier": "protected", "type": "Set<String>", "declarator": "authorizedProxyUsers = null", "var_name": "authorizedProxyUsers"}, {"original_string": "protected Set<String> validCertSubjectOrgValues = null;", "modifier": "protected", "type": "Set<String>", "declarator": "validCertSubjectOrgValues = null", "var_name": "validCertSubjectOrgValues"}, {"original_string": "protected Set<String> validCertSubjectOrgUnitValues = null;", "modifier": "protected", "type": "Set<String>", "declarator": "validCertSubjectOrgUnitValues = null", "var_name": "validCertSubjectOrgUnitValues"}, {"original_string": "protected boolean secureRequestsOnly = true;", "modifier": "protected", "type": "boolean", "declarator": "secureRequestsOnly = true", "var_name": "secureRequestsOnly"}, {"original_string": "protected int svcTokenTimeout = 86400;", "modifier": "protected", "type": "int", "declarator": "svcTokenTimeout = 86400", "var_name": "svcTokenTimeout"}, {"original_string": "protected Set<String> authFreeUriSet = null;", "modifier": "protected", "type": "Set<String>", "declarator": "authFreeUriSet = null", "var_name": "authFreeUriSet"}, {"original_string": "protected List<Pattern> authFreeUriList = null;", "modifier": "protected", "type": "List<Pattern>", "declarator": "authFreeUriList = null", "var_name": "authFreeUriList"}, {"original_string": "protected int httpPort;", "modifier": "protected", "type": "int", "declarator": "httpPort", "var_name": "httpPort"}, {"original_string": "protected int httpsPort;", "modifier": "protected", "type": "int", "declarator": "httpsPort", "var_name": "httpsPort"}, {"original_string": "protected int statusPort;", "modifier": "protected", "type": "int", "declarator": "statusPort", "var_name": "statusPort"}, {"original_string": "protected boolean statusCertSigner = false;", "modifier": "protected", "type": "boolean", "declarator": "statusCertSigner = false", "var_name": "statusCertSigner"}, {"original_string": "protected Status successServerStatus = null;", "modifier": "protected", "type": "Status", "declarator": "successServerStatus = null", "var_name": "successServerStatus"}, {"original_string": "protected boolean includeRoleCompleteFlag = true;", "modifier": "protected", "type": "boolean", "declarator": "includeRoleCompleteFlag = true", "var_name": "includeRoleCompleteFlag"}, {"original_string": "protected boolean readOnlyMode = false;", "modifier": "protected", "type": "boolean", "declarator": "readOnlyMode = false", "var_name": "readOnlyMode"}, {"original_string": "protected boolean verifyCertRequestIP = false;", "modifier": "protected", "type": "boolean", "declarator": "verifyCertRequestIP = false", "var_name": "verifyCertRequestIP"}, {"original_string": "protected boolean verifyCertSubjectOU = false;", "modifier": "protected", "type": "boolean", "declarator": "verifyCertSubjectOU = false", "var_name": "verifyCertSubjectOU"}, {"original_string": "protected String ztsOAuthIssuer;", "modifier": "protected", "type": "String", "declarator": "ztsOAuthIssuer", "var_name": "ztsOAuthIssuer"}, {"original_string": "protected File healthCheckFile = null;", "modifier": "protected", "type": "File", "declarator": "healthCheckFile = null", "var_name": "healthCheckFile"}, {"original_string": "private static final String TYPE_DOMAIN_NAME = \"DomainName\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_DOMAIN_NAME = \"DomainName\"", "var_name": "TYPE_DOMAIN_NAME"}, {"original_string": "private static final String TYPE_SIMPLE_NAME = \"SimpleName\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_SIMPLE_NAME = \"SimpleName\"", "var_name": "TYPE_SIMPLE_NAME"}, {"original_string": "private static final String TYPE_ENTITY_NAME = \"EntityName\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_ENTITY_NAME = \"EntityName\"", "var_name": "TYPE_ENTITY_NAME"}, {"original_string": "private static final String TYPE_ENTITY_LIST = \"EntityList\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_ENTITY_LIST = \"EntityList\"", "var_name": "TYPE_ENTITY_LIST"}, {"original_string": "private static final String TYPE_SERVICE_NAME = \"ServiceName\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_SERVICE_NAME = \"ServiceName\"", "var_name": "TYPE_SERVICE_NAME"}, {"original_string": "private static final String TYPE_INSTANCE_REGISTER_INFO = \"InstanceRegisterInformation\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_INSTANCE_REGISTER_INFO = \"InstanceRegisterInformation\"", "var_name": "TYPE_INSTANCE_REGISTER_INFO"}, {"original_string": "private static final String TYPE_INSTANCE_REFRESH_INFO = \"InstanceRefreshInformation\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_INSTANCE_REFRESH_INFO = \"InstanceRefreshInformation\"", "var_name": "TYPE_INSTANCE_REFRESH_INFO"}, {"original_string": "private static final String TYPE_INSTANCE_REFRESH_REQUEST = \"InstanceRefreshRequest\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_INSTANCE_REFRESH_REQUEST = \"InstanceRefreshRequest\"", "var_name": "TYPE_INSTANCE_REFRESH_REQUEST"}, {"original_string": "private static final String TYPE_OSTK_INSTANCE_REFRESH_REQUEST = \"OSTKInstanceRefreshRequest\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_OSTK_INSTANCE_REFRESH_REQUEST = \"OSTKInstanceRefreshRequest\"", "var_name": "TYPE_OSTK_INSTANCE_REFRESH_REQUEST"}, {"original_string": "private static final String TYPE_DOMAIN_METRICS = \"DomainMetrics\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_DOMAIN_METRICS = \"DomainMetrics\"", "var_name": "TYPE_DOMAIN_METRICS"}, {"original_string": "private static final String TYPE_ROLE_CERTIFICATE_REQUEST = \"RoleCertificateRequest\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_ROLE_CERTIFICATE_REQUEST = \"RoleCertificateRequest\"", "var_name": "TYPE_ROLE_CERTIFICATE_REQUEST"}, {"original_string": "private static final String TYPE_SSH_CERT_REQUEST = \"SSHCertRequest\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_SSH_CERT_REQUEST = \"SSHCertRequest\"", "var_name": "TYPE_SSH_CERT_REQUEST"}, {"original_string": "private static final String TYPE_COMPOUND_NAME = \"CompoundName\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_COMPOUND_NAME = \"CompoundName\"", "var_name": "TYPE_COMPOUND_NAME"}, {"original_string": "private static final String TYPE_RESOURCE_NAME = \"ResourceName\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_RESOURCE_NAME = \"ResourceName\"", "var_name": "TYPE_RESOURCE_NAME"}, {"original_string": "private static final String TYPE_PATH_ELEMENT = \"PathElement\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_PATH_ELEMENT = \"PathElement\"", "var_name": "TYPE_PATH_ELEMENT"}, {"original_string": "private static final String TYPE_AWS_ARN_ROLE_NAME = \"AWSArnRoleName\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_AWS_ARN_ROLE_NAME = \"AWSArnRoleName\"", "var_name": "TYPE_AWS_ARN_ROLE_NAME"}, {"original_string": "private static final String ZTS_ROLE_TOKEN_VERSION = \"Z1\";", "modifier": "private static final", "type": "String", "declarator": "ZTS_ROLE_TOKEN_VERSION = \"Z1\"", "var_name": "ZTS_ROLE_TOKEN_VERSION"}, {"original_string": "private static final String ZTS_REQUEST_LOG_SKIP_QUERY = \"com.yahoo.athenz.uri.skip_query\";", "modifier": "private static final", "type": "String", "declarator": "ZTS_REQUEST_LOG_SKIP_QUERY = \"com.yahoo.athenz.uri.skip_query\"", "var_name": "ZTS_REQUEST_LOG_SKIP_QUERY"}, {"original_string": "private static final long ZTS_NTOKEN_DEFAULT_EXPIRY = TimeUnit.SECONDS.convert(2, TimeUnit.HOURS);", "modifier": "private static final", "type": "long", "declarator": "ZTS_NTOKEN_DEFAULT_EXPIRY = TimeUnit.SECONDS.convert(2, TimeUnit.HOURS)", "var_name": "ZTS_NTOKEN_DEFAULT_EXPIRY"}, {"original_string": "private static final long ZTS_NTOKEN_MAX_EXPIRY = TimeUnit.SECONDS.convert(7, TimeUnit.DAYS);", "modifier": "private static final", "type": "long", "declarator": "ZTS_NTOKEN_MAX_EXPIRY = TimeUnit.SECONDS.convert(7, TimeUnit.DAYS)", "var_name": "ZTS_NTOKEN_MAX_EXPIRY"}, {"original_string": "private static final String HTTP_GET = \"GET\";", "modifier": "private static final", "type": "String", "declarator": "HTTP_GET = \"GET\"", "var_name": "HTTP_GET"}, {"original_string": "private static final String HTTP_POST = \"POST\";", "modifier": "private static final", "type": "String", "declarator": "HTTP_POST = \"POST\"", "var_name": "HTTP_POST"}, {"original_string": "private static final String HTTP_REQUEST = \"REQUEST\";", "modifier": "private static final", "type": "String", "declarator": "HTTP_REQUEST = \"REQUEST\"", "var_name": "HTTP_REQUEST"}, {"original_string": "private static final String KEY_SCOPE = \"scope\";", "modifier": "private static final", "type": "String", "declarator": "KEY_SCOPE = \"scope\"", "var_name": "KEY_SCOPE"}, {"original_string": "private static final String KEY_GRANT_TYPE = \"grant_type\";", "modifier": "private static final", "type": "String", "declarator": "KEY_GRANT_TYPE = \"grant_type\"", "var_name": "KEY_GRANT_TYPE"}, {"original_string": "private static final String KEY_EXPIRES_IN = \"expires_in\";", "modifier": "private static final", "type": "String", "declarator": "KEY_EXPIRES_IN = \"expires_in\"", "var_name": "KEY_EXPIRES_IN"}, {"original_string": "private static final String KEY_PROXY_FOR_PRINCIPAL = \"proxy_for_principal\";", "modifier": "private static final", "type": "String", "declarator": "KEY_PROXY_FOR_PRINCIPAL = \"proxy_for_principal\"", "var_name": "KEY_PROXY_FOR_PRINCIPAL"}, {"original_string": "private static final String OAUTH_GRANT_CREDENTIALS = \"client_credentials\";", "modifier": "private static final", "type": "String", "declarator": "OAUTH_GRANT_CREDENTIALS = \"client_credentials\"", "var_name": "OAUTH_GRANT_CREDENTIALS"}, {"original_string": "private static final String OAUTH_BEARER_TOKEN = \"Bearer\";", "modifier": "private static final", "type": "String", "declarator": "OAUTH_BEARER_TOKEN = \"Bearer\"", "var_name": "OAUTH_BEARER_TOKEN"}, {"original_string": "private static final String USER_AGENT_HDR = \"User-Agent\";", "modifier": "private static final", "type": "String", "declarator": "USER_AGENT_HDR = \"User-Agent\"", "var_name": "USER_AGENT_HDR"}, {"original_string": "private static final String DOM_METRIX_PREFIX = \"dom_metric_\";", "modifier": "private static final", "type": "String", "declarator": "DOM_METRIX_PREFIX = \"dom_metric_\"", "var_name": "DOM_METRIX_PREFIX"}, {"original_string": "private static final String ACCESS_LOG_ADDL_QUERY = \"com.yahoo.athenz.uri.addl_query\";", "modifier": "private static final", "type": "String", "declarator": "ACCESS_LOG_ADDL_QUERY = \"com.yahoo.athenz.uri.addl_query\"", "var_name": "ACCESS_LOG_ADDL_QUERY"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ZTSImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ZTSImpl.class)", "var_name": "LOGGER"}, {"original_string": "protected Http.AuthorityList authorities = null;", "modifier": "protected", "type": "Http.AuthorityList", "declarator": "authorities = null", "var_name": "authorities"}, {"original_string": "protected ZTSAuthorizer authorizer;", "modifier": "protected", "type": "ZTSAuthorizer", "declarator": "authorizer", "var_name": "authorizer"}, {"original_string": "protected static Validator validator;", "modifier": "protected static", "type": "Validator", "declarator": "validator", "var_name": "validator"}, {"original_string": "protected NotificationManager notificationManager = null;", "modifier": "protected", "type": "NotificationManager", "declarator": "notificationManager = null", "var_name": "notificationManager"}, {"original_string": "protected StatusChecker statusChecker = null;", "modifier": "protected", "type": "StatusChecker", "declarator": "statusChecker = null", "var_name": "statusChecker"}], "methods": [{"identifier": "ZTSImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " ZTSImpl()", "full_signature": "public  ZTSImpl()", "class_method_signature": "ZTSImpl.ZTSImpl()", "testcase": false, "constructor": true}, {"identifier": "ZTSImpl", "parameters": "(CloudStore implCloudStore, DataStore implDataStore)", "modifiers": "public", "return": "", "signature": " ZTSImpl(CloudStore implCloudStore, DataStore implDataStore)", "full_signature": "public  ZTSImpl(CloudStore implCloudStore, DataStore implDataStore)", "class_method_signature": "ZTSImpl.ZTSImpl(CloudStore implCloudStore, DataStore implDataStore)", "testcase": false, "constructor": true}, {"identifier": "setNotificationManager", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setNotificationManager()", "full_signature": "private void setNotificationManager()", "class_method_signature": "ZTSImpl.setNotificationManager()", "testcase": false, "constructor": false}, {"identifier": "loadSystemProperties", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadSystemProperties()", "full_signature": " void loadSystemProperties()", "class_method_signature": "ZTSImpl.loadSystemProperties()", "testcase": false, "constructor": false}, {"identifier": "loadConfigurationSettings", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadConfigurationSettings()", "full_signature": " void loadConfigurationSettings()", "class_method_signature": "ZTSImpl.loadConfigurationSettings()", "testcase": false, "constructor": false}, {"identifier": "getServerHostName", "parameters": "()", "modifiers": "static", "return": "String", "signature": "String getServerHostName()", "full_signature": "static String getServerHostName()", "class_method_signature": "ZTSImpl.getServerHostName()", "testcase": false, "constructor": false}, {"identifier": "setAuthorityKeyStore", "parameters": "()", "modifiers": "", "return": "void", "signature": "void setAuthorityKeyStore()", "full_signature": " void setAuthorityKeyStore()", "class_method_signature": "ZTSImpl.setAuthorityKeyStore()", "testcase": false, "constructor": false}, {"identifier": "loadSchemaValidator", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadSchemaValidator()", "full_signature": " void loadSchemaValidator()", "class_method_signature": "ZTSImpl.loadSchemaValidator()", "testcase": false, "constructor": false}, {"identifier": "getChangeLogStore", "parameters": "(String homeDir)", "modifiers": "", "return": "ChangeLogStore", "signature": "ChangeLogStore getChangeLogStore(String homeDir)", "full_signature": " ChangeLogStore getChangeLogStore(String homeDir)", "class_method_signature": "ZTSImpl.getChangeLogStore(String homeDir)", "testcase": false, "constructor": false}, {"identifier": "loadMetricObject", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadMetricObject()", "full_signature": " void loadMetricObject()", "class_method_signature": "ZTSImpl.loadMetricObject()", "testcase": false, "constructor": false}, {"identifier": "loadHostnameResolver", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadHostnameResolver()", "full_signature": " void loadHostnameResolver()", "class_method_signature": "ZTSImpl.loadHostnameResolver()", "testcase": false, "constructor": false}, {"identifier": "loadServicePrivateKey", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadServicePrivateKey()", "full_signature": " void loadServicePrivateKey()", "class_method_signature": "ZTSImpl.loadServicePrivateKey()", "testcase": false, "constructor": false}, {"identifier": "loadAuthorities", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadAuthorities()", "full_signature": " void loadAuthorities()", "class_method_signature": "ZTSImpl.loadAuthorities()", "testcase": false, "constructor": false}, {"identifier": "loadAuditLogger", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadAuditLogger()", "full_signature": " void loadAuditLogger()", "class_method_signature": "ZTSImpl.loadAuditLogger()", "testcase": false, "constructor": false}, {"identifier": "loadStatusChecker", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadStatusChecker()", "full_signature": " void loadStatusChecker()", "class_method_signature": "ZTSImpl.loadStatusChecker()", "testcase": false, "constructor": false}, {"identifier": "getAuditLogMsgBuilder", "parameters": "(ResourceContext ctx, String domainName,\n            String caller, String method)", "modifiers": "", "return": "AuditLogMsgBuilder", "signature": "AuditLogMsgBuilder getAuditLogMsgBuilder(ResourceContext ctx, String domainName,\n            String caller, String method)", "full_signature": " AuditLogMsgBuilder getAuditLogMsgBuilder(ResourceContext ctx, String domainName,\n            String caller, String method)", "class_method_signature": "ZTSImpl.getAuditLogMsgBuilder(ResourceContext ctx, String domainName,\n            String caller, String method)", "testcase": false, "constructor": false}, {"identifier": "getPublicKey", "parameters": "(String domain, String service, String keyId)", "modifiers": "@Override public", "return": "String", "signature": "String getPublicKey(String domain, String service, String keyId)", "full_signature": "@Override public String getPublicKey(String domain, String service, String keyId)", "class_method_signature": "ZTSImpl.getPublicKey(String domain, String service, String keyId)", "testcase": false, "constructor": false}, {"identifier": "generateZTSServiceIdentity", "parameters": "(com.yahoo.athenz.zms.ServiceIdentity zmsService)", "modifiers": "", "return": "ServiceIdentity", "signature": "ServiceIdentity generateZTSServiceIdentity(com.yahoo.athenz.zms.ServiceIdentity zmsService)", "full_signature": " ServiceIdentity generateZTSServiceIdentity(com.yahoo.athenz.zms.ServiceIdentity zmsService)", "class_method_signature": "ZTSImpl.generateZTSServiceIdentity(com.yahoo.athenz.zms.ServiceIdentity zmsService)", "testcase": false, "constructor": false}, {"identifier": "generateServiceIdentityName", "parameters": "(String domain, String service)", "modifiers": "", "return": "String", "signature": "String generateServiceIdentityName(String domain, String service)", "full_signature": " String generateServiceIdentityName(String domain, String service)", "class_method_signature": "ZTSImpl.generateServiceIdentityName(String domain, String service)", "testcase": false, "constructor": false}, {"identifier": "lookupServiceIdentity", "parameters": "(DomainData domainData, String serviceName)", "modifiers": "", "return": "ServiceIdentity", "signature": "ServiceIdentity lookupServiceIdentity(DomainData domainData, String serviceName)", "full_signature": " ServiceIdentity lookupServiceIdentity(DomainData domainData, String serviceName)", "class_method_signature": "ZTSImpl.lookupServiceIdentity(DomainData domainData, String serviceName)", "testcase": false, "constructor": false}, {"identifier": "getServiceIdentity", "parameters": "(ResourceContext ctx, String domainName, String serviceName)", "modifiers": "public", "return": "ServiceIdentity", "signature": "ServiceIdentity getServiceIdentity(ResourceContext ctx, String domainName, String serviceName)", "full_signature": "public ServiceIdentity getServiceIdentity(ResourceContext ctx, String domainName, String serviceName)", "class_method_signature": "ZTSImpl.getServiceIdentity(ResourceContext ctx, String domainName, String serviceName)", "testcase": false, "constructor": false}, {"identifier": "getPublicKeyEntry", "parameters": "(ResourceContext ctx, String domainName,\n            String serviceName, String keyId)", "modifiers": "public", "return": "PublicKeyEntry", "signature": "PublicKeyEntry getPublicKeyEntry(ResourceContext ctx, String domainName,\n            String serviceName, String keyId)", "full_signature": "public PublicKeyEntry getPublicKeyEntry(ResourceContext ctx, String domainName,\n            String serviceName, String keyId)", "class_method_signature": "ZTSImpl.getPublicKeyEntry(ResourceContext ctx, String domainName,\n            String serviceName, String keyId)", "testcase": false, "constructor": false}, {"identifier": "getServiceIdentityList", "parameters": "(ResourceContext ctx, String domainName)", "modifiers": "public", "return": "ServiceIdentityList", "signature": "ServiceIdentityList getServiceIdentityList(ResourceContext ctx, String domainName)", "full_signature": "public ServiceIdentityList getServiceIdentityList(ResourceContext ctx, String domainName)", "class_method_signature": "ZTSImpl.getServiceIdentityList(ResourceContext ctx, String domainName)", "testcase": false, "constructor": false}, {"identifier": "generateServiceIdentityList", "parameters": "(final String domainName, List<com.yahoo.athenz.zms.ServiceIdentity> services)", "modifiers": "", "return": "ServiceIdentityList", "signature": "ServiceIdentityList generateServiceIdentityList(final String domainName, List<com.yahoo.athenz.zms.ServiceIdentity> services)", "full_signature": " ServiceIdentityList generateServiceIdentityList(final String domainName, List<com.yahoo.athenz.zms.ServiceIdentity> services)", "class_method_signature": "ZTSImpl.generateServiceIdentityList(final String domainName, List<com.yahoo.athenz.zms.ServiceIdentity> services)", "testcase": false, "constructor": false}, {"identifier": "getHostServices", "parameters": "(ResourceContext ctx, String host)", "modifiers": "public", "return": "HostServices", "signature": "HostServices getHostServices(ResourceContext ctx, String host)", "full_signature": "public HostServices getHostServices(ResourceContext ctx, String host)", "class_method_signature": "ZTSImpl.getHostServices(ResourceContext ctx, String host)", "testcase": false, "constructor": false}, {"identifier": "getPolicyList", "parameters": "(DomainData domainData)", "modifiers": "", "return": "List<Policy>", "signature": "List<Policy> getPolicyList(DomainData domainData)", "full_signature": " List<Policy> getPolicyList(DomainData domainData)", "class_method_signature": "ZTSImpl.getPolicyList(DomainData domainData)", "testcase": false, "constructor": false}, {"identifier": "getAssertionEffect", "parameters": "(com.yahoo.athenz.zms.AssertionEffect effect)", "modifiers": "", "return": "AssertionEffect", "signature": "AssertionEffect getAssertionEffect(com.yahoo.athenz.zms.AssertionEffect effect)", "full_signature": " AssertionEffect getAssertionEffect(com.yahoo.athenz.zms.AssertionEffect effect)", "class_method_signature": "ZTSImpl.getAssertionEffect(com.yahoo.athenz.zms.AssertionEffect effect)", "testcase": false, "constructor": false}, {"identifier": "getDomainSignedPolicyData", "parameters": "(ResourceContext ctx, String domainName, String matchingTag)", "modifiers": "public", "return": "Response", "signature": "Response getDomainSignedPolicyData(ResourceContext ctx, String domainName, String matchingTag)", "full_signature": "public Response getDomainSignedPolicyData(ResourceContext ctx, String domainName, String matchingTag)", "class_method_signature": "ZTSImpl.getDomainSignedPolicyData(ResourceContext ctx, String domainName, String matchingTag)", "testcase": false, "constructor": false}, {"identifier": "convertEmptyStringToNull", "parameters": "(String value)", "modifiers": "", "return": "String", "signature": "String convertEmptyStringToNull(String value)", "full_signature": " String convertEmptyStringToNull(String value)", "class_method_signature": "ZTSImpl.convertEmptyStringToNull(String value)", "testcase": false, "constructor": false}, {"identifier": "determineIdTokenTimeout", "parameters": "(long tokenTimeout)", "modifiers": "", "return": "long", "signature": "long determineIdTokenTimeout(long tokenTimeout)", "full_signature": " long determineIdTokenTimeout(long tokenTimeout)", "class_method_signature": "ZTSImpl.determineIdTokenTimeout(long tokenTimeout)", "testcase": false, "constructor": false}, {"identifier": "determineTokenTimeout", "parameters": "(DataCache data, Set<String> roles, Integer minExpiryTime,\n            Integer maxExpiryTime)", "modifiers": "", "return": "long", "signature": "long determineTokenTimeout(DataCache data, Set<String> roles, Integer minExpiryTime,\n            Integer maxExpiryTime)", "full_signature": " long determineTokenTimeout(DataCache data, Set<String> roles, Integer minExpiryTime,\n            Integer maxExpiryTime)", "class_method_signature": "ZTSImpl.determineTokenTimeout(DataCache data, Set<String> roles, Integer minExpiryTime,\n            Integer maxExpiryTime)", "testcase": false, "constructor": false}, {"identifier": "getConfiguredTokenExpiryTimeMins", "parameters": "(DataCache data, Set<String> roles)", "modifiers": "", "return": "int", "signature": "int getConfiguredTokenExpiryTimeMins(DataCache data, Set<String> roles)", "full_signature": " int getConfiguredTokenExpiryTimeMins(DataCache data, Set<String> roles)", "class_method_signature": "ZTSImpl.getConfiguredTokenExpiryTimeMins(DataCache data, Set<String> roles)", "testcase": false, "constructor": false}, {"identifier": "getTenantDomains", "parameters": "(ResourceContext ctx, String providerDomainName,\n            String userName, String roleName, String serviceName)", "modifiers": "public", "return": "TenantDomains", "signature": "TenantDomains getTenantDomains(ResourceContext ctx, String providerDomainName,\n            String userName, String roleName, String serviceName)", "full_signature": "public TenantDomains getTenantDomains(ResourceContext ctx, String providerDomainName,\n            String userName, String roleName, String serviceName)", "class_method_signature": "ZTSImpl.getTenantDomains(ResourceContext ctx, String providerDomainName,\n            String userName, String roleName, String serviceName)", "testcase": false, "constructor": false}, {"identifier": "retrieveTenantDomainName", "parameters": "(String roleName, String serviceName)", "modifiers": "", "return": "String", "signature": "String retrieveTenantDomainName(String roleName, String serviceName)", "full_signature": " String retrieveTenantDomainName(String roleName, String serviceName)", "class_method_signature": "ZTSImpl.retrieveTenantDomainName(String roleName, String serviceName)", "testcase": false, "constructor": false}, {"identifier": "isAuthorizedProxyUser", "parameters": "(Set<String> proxyUsers, String principal)", "modifiers": "", "return": "boolean", "signature": "boolean isAuthorizedProxyUser(Set<String> proxyUsers, String principal)", "full_signature": " boolean isAuthorizedProxyUser(Set<String> proxyUsers, String principal)", "class_method_signature": "ZTSImpl.isAuthorizedProxyUser(Set<String> proxyUsers, String principal)", "testcase": false, "constructor": false}, {"identifier": "checkRoleTokenAuthorizedServiceRequest", "parameters": "(final Principal principal,\n            final String domainName, final String caller)", "modifiers": "", "return": "void", "signature": "void checkRoleTokenAuthorizedServiceRequest(final Principal principal,\n            final String domainName, final String caller)", "full_signature": " void checkRoleTokenAuthorizedServiceRequest(final Principal principal,\n            final String domainName, final String caller)", "class_method_signature": "ZTSImpl.checkRoleTokenAuthorizedServiceRequest(final Principal principal,\n            final String domainName, final String caller)", "testcase": false, "constructor": false}, {"identifier": "getRoleToken", "parameters": "(ResourceContext ctx, String domainName, String roleNames,\n            Integer minExpiryTime, Integer maxExpiryTime, String proxyForPrincipal)", "modifiers": "@Override public", "return": "RoleToken", "signature": "RoleToken getRoleToken(ResourceContext ctx, String domainName, String roleNames,\n            Integer minExpiryTime, Integer maxExpiryTime, String proxyForPrincipal)", "full_signature": "@Override public RoleToken getRoleToken(ResourceContext ctx, String domainName, String roleNames,\n            Integer minExpiryTime, Integer maxExpiryTime, String proxyForPrincipal)", "class_method_signature": "ZTSImpl.getRoleToken(ResourceContext ctx, String domainName, String roleNames,\n            Integer minExpiryTime, Integer maxExpiryTime, String proxyForPrincipal)", "testcase": false, "constructor": false}, {"identifier": "decodeString", "parameters": "(final String encodedString)", "modifiers": "", "return": "String", "signature": "String decodeString(final String encodedString)", "full_signature": " String decodeString(final String encodedString)", "class_method_signature": "ZTSImpl.decodeString(final String encodedString)", "testcase": false, "constructor": false}, {"identifier": "getProxyForPrincipalValue", "parameters": "(final String proxyName, final String principalName,\n                                     final String principalDomain, final String caller)", "modifiers": "", "return": "String", "signature": "String getProxyForPrincipalValue(final String proxyName, final String principalName,\n                                     final String principalDomain, final String caller)", "full_signature": " String getProxyForPrincipalValue(final String proxyName, final String principalName,\n                                     final String principalDomain, final String caller)", "class_method_signature": "ZTSImpl.getProxyForPrincipalValue(final String proxyName, final String principalName,\n                                     final String principalDomain, final String caller)", "testcase": false, "constructor": false}, {"identifier": "getQueryLogData", "parameters": "(final String request)", "modifiers": "", "return": "String", "signature": "String getQueryLogData(final String request)", "full_signature": " String getQueryLogData(final String request)", "class_method_signature": "ZTSImpl.getQueryLogData(final String request)", "testcase": false, "constructor": false}, {"identifier": "postAccessTokenRequest", "parameters": "(ResourceContext ctx, String request)", "modifiers": "@Override public", "return": "AccessTokenResponse", "signature": "AccessTokenResponse postAccessTokenRequest(ResourceContext ctx, String request)", "full_signature": "@Override public AccessTokenResponse postAccessTokenRequest(ResourceContext ctx, String request)", "class_method_signature": "ZTSImpl.postAccessTokenRequest(ResourceContext ctx, String request)", "testcase": false, "constructor": false}, {"identifier": "compareRoleSets", "parameters": "(Set<String> set1, Set<String> set2)", "modifiers": "", "return": "boolean", "signature": "boolean compareRoleSets(Set<String> set1, Set<String> set2)", "full_signature": " boolean compareRoleSets(Set<String> set1, Set<String> set2)", "class_method_signature": "ZTSImpl.compareRoleSets(Set<String> set1, Set<String> set2)", "testcase": false, "constructor": false}, {"identifier": "getRoleAccess", "parameters": "(ResourceContext ctx, String domainName, String principal)", "modifiers": "public", "return": "RoleAccess", "signature": "RoleAccess getRoleAccess(ResourceContext ctx, String domainName, String principal)", "full_signature": "public RoleAccess getRoleAccess(ResourceContext ctx, String domainName, String principal)", "class_method_signature": "ZTSImpl.getRoleAccess(ResourceContext ctx, String domainName, String principal)", "testcase": false, "constructor": false}, {"identifier": "postRoleCertificateRequest", "parameters": "(ResourceContext ctx, String domainName,\n            String roleName, RoleCertificateRequest req)", "modifiers": "@Override public", "return": "RoleToken", "signature": "RoleToken postRoleCertificateRequest(ResourceContext ctx, String domainName,\n            String roleName, RoleCertificateRequest req)", "full_signature": "@Override public RoleToken postRoleCertificateRequest(ResourceContext ctx, String domainName,\n            String roleName, RoleCertificateRequest req)", "class_method_signature": "ZTSImpl.postRoleCertificateRequest(ResourceContext ctx, String domainName,\n            String roleName, RoleCertificateRequest req)", "testcase": false, "constructor": false}, {"identifier": "getConfiguredRoleListExpiryTimeMins", "parameters": "(Map<String, String[]> requestedRoleList)", "modifiers": "", "return": "int", "signature": "int getConfiguredRoleListExpiryTimeMins(Map<String, String[]> requestedRoleList)", "full_signature": " int getConfiguredRoleListExpiryTimeMins(Map<String, String[]> requestedRoleList)", "class_method_signature": "ZTSImpl.getConfiguredRoleListExpiryTimeMins(Map<String, String[]> requestedRoleList)", "testcase": false, "constructor": false}, {"identifier": "getConfiguredRoleCertExpiryTimeMins", "parameters": "(DataCache data, Set<String> roles)", "modifiers": "", "return": "int", "signature": "int getConfiguredRoleCertExpiryTimeMins(DataCache data, Set<String> roles)", "full_signature": " int getConfiguredRoleCertExpiryTimeMins(DataCache data, Set<String> roles)", "class_method_signature": "ZTSImpl.getConfiguredRoleCertExpiryTimeMins(DataCache data, Set<String> roles)", "testcase": false, "constructor": false}, {"identifier": "determineRoleCertTimeout", "parameters": "(DataCache data, Set<String> roles, int reqTime)", "modifiers": "", "return": "int", "signature": "int determineRoleCertTimeout(DataCache data, Set<String> roles, int reqTime)", "full_signature": " int determineRoleCertTimeout(DataCache data, Set<String> roles, int reqTime)", "class_method_signature": "ZTSImpl.determineRoleCertTimeout(DataCache data, Set<String> roles, int reqTime)", "testcase": false, "constructor": false}, {"identifier": "determineRoleCertTimeout", "parameters": "(Map<String, String[]> requestedRoleList, int reqTime)", "modifiers": "", "return": "int", "signature": "int determineRoleCertTimeout(Map<String, String[]> requestedRoleList, int reqTime)", "full_signature": " int determineRoleCertTimeout(Map<String, String[]> requestedRoleList, int reqTime)", "class_method_signature": "ZTSImpl.determineRoleCertTimeout(Map<String, String[]> requestedRoleList, int reqTime)", "testcase": false, "constructor": false}, {"identifier": "validateRoleCertificateRequest", "parameters": "(final String csr, final String domainName,\n            Set<String> roles, final String principal, final String proxyUser, X509Certificate cert,\n            final String ip)", "modifiers": "", "return": "boolean", "signature": "boolean validateRoleCertificateRequest(final String csr, final String domainName,\n            Set<String> roles, final String principal, final String proxyUser, X509Certificate cert,\n            final String ip)", "full_signature": " boolean validateRoleCertificateRequest(final String csr, final String domainName,\n            Set<String> roles, final String principal, final String proxyUser, X509Certificate cert,\n            final String ip)", "class_method_signature": "ZTSImpl.validateRoleCertificateRequest(final String csr, final String domainName,\n            Set<String> roles, final String principal, final String proxyUser, X509Certificate cert,\n            final String ip)", "testcase": false, "constructor": false}, {"identifier": "validateRoleCertSubjectOU", "parameters": "(X509RoleCertRequest certReq, X509Certificate cert)", "modifiers": "", "return": "boolean", "signature": "boolean validateRoleCertSubjectOU(X509RoleCertRequest certReq, X509Certificate cert)", "full_signature": " boolean validateRoleCertSubjectOU(X509RoleCertRequest certReq, X509Certificate cert)", "class_method_signature": "ZTSImpl.validateRoleCertSubjectOU(X509RoleCertRequest certReq, X509Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "validateUriHostname", "parameters": "(String uriHostname, X509Certificate cert)", "modifiers": "", "return": "boolean", "signature": "boolean validateUriHostname(String uriHostname, X509Certificate cert)", "full_signature": " boolean validateUriHostname(String uriHostname, X509Certificate cert)", "class_method_signature": "ZTSImpl.validateUriHostname(String uriHostname, X509Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "validateInstanceId", "parameters": "(String instanceId, X509Certificate cert)", "modifiers": "", "return": "boolean", "signature": "boolean validateInstanceId(String instanceId, X509Certificate cert)", "full_signature": " boolean validateInstanceId(String instanceId, X509Certificate cert)", "class_method_signature": "ZTSImpl.validateInstanceId(String instanceId, X509Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "postRoleCertificateRequestExt", "parameters": "(ResourceContext ctx, RoleCertificateRequest req)", "modifiers": "@Override public", "return": "RoleCertificate", "signature": "RoleCertificate postRoleCertificateRequestExt(ResourceContext ctx, RoleCertificateRequest req)", "full_signature": "@Override public RoleCertificate postRoleCertificateRequestExt(ResourceContext ctx, RoleCertificateRequest req)", "class_method_signature": "ZTSImpl.postRoleCertificateRequestExt(ResourceContext ctx, RoleCertificateRequest req)", "testcase": false, "constructor": false}, {"identifier": "verifyAccessToRoles", "parameters": "(final String principalName, Map<String, String[]> requestedRoleList)", "modifiers": "", "return": "boolean", "signature": "boolean verifyAccessToRoles(final String principalName, Map<String, String[]> requestedRoleList)", "full_signature": " boolean verifyAccessToRoles(final String principalName, Map<String, String[]> requestedRoleList)", "class_method_signature": "ZTSImpl.verifyAccessToRoles(final String principalName, Map<String, String[]> requestedRoleList)", "testcase": false, "constructor": false}, {"identifier": "validateRoleCertificateExtRequest", "parameters": "(X509RoleCertRequest certReq, final String principal,\n            final String proxyUser, X509Certificate cert, final String ip)", "modifiers": "", "return": "boolean", "signature": "boolean validateRoleCertificateExtRequest(X509RoleCertRequest certReq, final String principal,\n            final String proxyUser, X509Certificate cert, final String ip)", "full_signature": " boolean validateRoleCertificateExtRequest(X509RoleCertRequest certReq, final String principal,\n            final String proxyUser, X509Certificate cert, final String ip)", "class_method_signature": "ZTSImpl.validateRoleCertificateExtRequest(X509RoleCertRequest certReq, final String principal,\n            final String proxyUser, X509Certificate cert, final String ip)", "testcase": false, "constructor": false}, {"identifier": "isAuthorizedServicePrincipal", "parameters": "(final Principal principal)", "modifiers": "", "return": "boolean", "signature": "boolean isAuthorizedServicePrincipal(final Principal principal)", "full_signature": " boolean isAuthorizedServicePrincipal(final Principal principal)", "class_method_signature": "ZTSImpl.isAuthorizedServicePrincipal(final Principal principal)", "testcase": false, "constructor": false}, {"identifier": "getAWSTemporaryCredentials", "parameters": "(ResourceContext ctx, String domainName,\n            String roleName, Integer durationSeconds, String externalId)", "modifiers": "public", "return": "AWSTemporaryCredentials", "signature": "AWSTemporaryCredentials getAWSTemporaryCredentials(ResourceContext ctx, String domainName,\n            String roleName, Integer durationSeconds, String externalId)", "full_signature": "public AWSTemporaryCredentials getAWSTemporaryCredentials(ResourceContext ctx, String domainName,\n            String roleName, Integer durationSeconds, String externalId)", "class_method_signature": "ZTSImpl.getAWSTemporaryCredentials(ResourceContext ctx, String domainName,\n            String roleName, Integer durationSeconds, String externalId)", "testcase": false, "constructor": false}, {"identifier": "verifyAWSAssumeRole", "parameters": "(String domainName, String roleResource, String principal)", "modifiers": "", "return": "boolean", "signature": "boolean verifyAWSAssumeRole(String domainName, String roleResource, String principal)", "full_signature": " boolean verifyAWSAssumeRole(String domainName, String roleResource, String principal)", "class_method_signature": "ZTSImpl.verifyAWSAssumeRole(String domainName, String roleResource, String principal)", "testcase": false, "constructor": false}, {"identifier": "insertX509CertRecord", "parameters": "(ResourceContext ctx, final String cn,\n            final String provider, final String instanceId, final String serial,\n            final Boolean certUsage, final Date expirationDate, final String hostName)", "modifiers": "", "return": "X509CertRecord", "signature": "X509CertRecord insertX509CertRecord(ResourceContext ctx, final String cn,\n            final String provider, final String instanceId, final String serial,\n            final Boolean certUsage, final Date expirationDate, final String hostName)", "full_signature": " X509CertRecord insertX509CertRecord(ResourceContext ctx, final String cn,\n            final String provider, final String instanceId, final String serial,\n            final Boolean certUsage, final Date expirationDate, final String hostName)", "class_method_signature": "ZTSImpl.insertX509CertRecord(ResourceContext ctx, final String cn,\n            final String provider, final String instanceId, final String serial,\n            final Boolean certUsage, final Date expirationDate, final String hostName)", "testcase": false, "constructor": false}, {"identifier": "postInstanceRegisterInformation", "parameters": "(ResourceContext ctx, InstanceRegisterInformation info)", "modifiers": "@Override public", "return": "Response", "signature": "Response postInstanceRegisterInformation(ResourceContext ctx, InstanceRegisterInformation info)", "full_signature": "@Override public Response postInstanceRegisterInformation(ResourceContext ctx, InstanceRegisterInformation info)", "class_method_signature": "ZTSImpl.postInstanceRegisterInformation(ResourceContext ctx, InstanceRegisterInformation info)", "testcase": false, "constructor": false}, {"identifier": "getInstanceRegisterQueryLog", "parameters": "(final String provider, final String certReqInstanceId, final String hostname)", "modifiers": "", "return": "String", "signature": "String getInstanceRegisterQueryLog(final String provider, final String certReqInstanceId, final String hostname)", "full_signature": " String getInstanceRegisterQueryLog(final String provider, final String certReqInstanceId, final String hostname)", "class_method_signature": "ZTSImpl.getInstanceRegisterQueryLog(final String provider, final String certReqInstanceId, final String hostname)", "testcase": false, "constructor": false}, {"identifier": "generateSSHCertRecord", "parameters": "(ResourceContext ctx, final String service, final String instanceId,\n            final String privateIp)", "modifiers": "", "return": "SSHCertRecord", "signature": "SSHCertRecord generateSSHCertRecord(ResourceContext ctx, final String service, final String instanceId,\n            final String privateIp)", "full_signature": " SSHCertRecord generateSSHCertRecord(ResourceContext ctx, final String service, final String instanceId,\n            final String privateIp)", "class_method_signature": "ZTSImpl.generateSSHCertRecord(ResourceContext ctx, final String service, final String instanceId,\n            final String privateIp)", "testcase": false, "constructor": false}, {"identifier": "generateInstanceConfirmObject", "parameters": "(ResourceContext ctx, final String provider,\n            final String domain, final String service, final String attestationData,\n            final String instanceId, final String instanceHostname, X509CertRequest certReq,\n            InstanceProvider.Scheme providerScheme)", "modifiers": "", "return": "InstanceConfirmation", "signature": "InstanceConfirmation generateInstanceConfirmObject(ResourceContext ctx, final String provider,\n            final String domain, final String service, final String attestationData,\n            final String instanceId, final String instanceHostname, X509CertRequest certReq,\n            InstanceProvider.Scheme providerScheme)", "full_signature": " InstanceConfirmation generateInstanceConfirmObject(ResourceContext ctx, final String provider,\n            final String domain, final String service, final String attestationData,\n            final String instanceId, final String instanceHostname, X509CertRequest certReq,\n            InstanceProvider.Scheme providerScheme)", "class_method_signature": "ZTSImpl.generateInstanceConfirmObject(ResourceContext ctx, final String provider,\n            final String domain, final String service, final String attestationData,\n            final String instanceId, final String instanceHostname, X509CertRequest certReq,\n            InstanceProvider.Scheme providerScheme)", "testcase": false, "constructor": false}, {"identifier": "postInstanceRefreshInformation", "parameters": "(ResourceContext ctx, String provider,\n            String domain, String service, String instanceId, InstanceRefreshInformation info)", "modifiers": "@Override public", "return": "InstanceIdentity", "signature": "InstanceIdentity postInstanceRefreshInformation(ResourceContext ctx, String provider,\n            String domain, String service, String instanceId, InstanceRefreshInformation info)", "full_signature": "@Override public InstanceIdentity postInstanceRefreshInformation(ResourceContext ctx, String provider,\n            String domain, String service, String instanceId, InstanceRefreshInformation info)", "class_method_signature": "ZTSImpl.postInstanceRefreshInformation(ResourceContext ctx, String provider,\n            String domain, String service, String instanceId, InstanceRefreshInformation info)", "testcase": false, "constructor": false}, {"identifier": "processProviderX509RefreshRequest", "parameters": "(ResourceContext ctx, final Principal principal,\n            final String domain, final String service, final String provider,\n            final String instanceId, InstanceRefreshInformation info, X509Certificate cert,\n            final String caller)", "modifiers": "", "return": "InstanceIdentity", "signature": "InstanceIdentity processProviderX509RefreshRequest(ResourceContext ctx, final Principal principal,\n            final String domain, final String service, final String provider,\n            final String instanceId, InstanceRefreshInformation info, X509Certificate cert,\n            final String caller)", "full_signature": " InstanceIdentity processProviderX509RefreshRequest(ResourceContext ctx, final Principal principal,\n            final String domain, final String service, final String provider,\n            final String instanceId, InstanceRefreshInformation info, X509Certificate cert,\n            final String caller)", "class_method_signature": "ZTSImpl.processProviderX509RefreshRequest(ResourceContext ctx, final Principal principal,\n            final String domain, final String service, final String provider,\n            final String instanceId, InstanceRefreshInformation info, X509Certificate cert,\n            final String caller)", "testcase": false, "constructor": false}, {"identifier": "processCertRecordChange", "parameters": "(X509CertRecord x509CertRecord, final String reqIp, final String hostname)", "modifiers": "", "return": "void", "signature": "void processCertRecordChange(X509CertRecord x509CertRecord, final String reqIp, final String hostname)", "full_signature": " void processCertRecordChange(X509CertRecord x509CertRecord, final String reqIp, final String hostname)", "class_method_signature": "ZTSImpl.processCertRecordChange(X509CertRecord x509CertRecord, final String reqIp, final String hostname)", "testcase": false, "constructor": false}, {"identifier": "certRecordChanged", "parameters": "(final String value1, final String value2)", "modifiers": "", "return": "boolean", "signature": "boolean certRecordChanged(final String value1, final String value2)", "full_signature": " boolean certRecordChanged(final String value1, final String value2)", "class_method_signature": "ZTSImpl.certRecordChanged(final String value1, final String value2)", "testcase": false, "constructor": false}, {"identifier": "processProviderSSHRefreshRequest", "parameters": "(ResourceContext ctx, final Principal principal,\n            final String domain, final String service, final String provider,\n            final String instanceId, final String sshCsr, final String caller)", "modifiers": "", "return": "InstanceIdentity", "signature": "InstanceIdentity processProviderSSHRefreshRequest(ResourceContext ctx, final Principal principal,\n            final String domain, final String service, final String provider,\n            final String instanceId, final String sshCsr, final String caller)", "full_signature": " InstanceIdentity processProviderSSHRefreshRequest(ResourceContext ctx, final Principal principal,\n            final String domain, final String service, final String provider,\n            final String instanceId, final String sshCsr, final String caller)", "class_method_signature": "ZTSImpl.processProviderSSHRefreshRequest(ResourceContext ctx, final Principal principal,\n            final String domain, final String service, final String provider,\n            final String instanceId, final String sshCsr, final String caller)", "testcase": false, "constructor": false}, {"identifier": "getServiceCertRequestExpiryTime", "parameters": "(int certExpiryTime, Integer reqExpiryTime)", "modifiers": "", "return": "int", "signature": "int getServiceCertRequestExpiryTime(int certExpiryTime, Integer reqExpiryTime)", "full_signature": " int getServiceCertRequestExpiryTime(int certExpiryTime, Integer reqExpiryTime)", "class_method_signature": "ZTSImpl.getServiceCertRequestExpiryTime(int certExpiryTime, Integer reqExpiryTime)", "testcase": false, "constructor": false}, {"identifier": "getValidatedX509CertRecord", "parameters": "(ResourceContext ctx, final String provider,\n            final String instanceId, final String principalName, X509Certificate cert,\n            final String caller, final String requestDomain, final String principalDomain,\n            final String hostName)", "modifiers": "", "return": "X509CertRecord", "signature": "X509CertRecord getValidatedX509CertRecord(ResourceContext ctx, final String provider,\n            final String instanceId, final String principalName, X509Certificate cert,\n            final String caller, final String requestDomain, final String principalDomain,\n            final String hostName)", "full_signature": " X509CertRecord getValidatedX509CertRecord(ResourceContext ctx, final String provider,\n            final String instanceId, final String principalName, X509Certificate cert,\n            final String caller, final String requestDomain, final String principalDomain,\n            final String hostName)", "class_method_signature": "ZTSImpl.getValidatedX509CertRecord(ResourceContext ctx, final String provider,\n            final String instanceId, final String principalName, X509Certificate cert,\n            final String caller, final String requestDomain, final String principalDomain,\n            final String hostName)", "testcase": false, "constructor": false}, {"identifier": "revokeCertificateRefresh", "parameters": "(final String principalName, final String serialNumber,\n            X509CertRecord x509CertRecord)", "modifiers": "", "return": "void", "signature": "void revokeCertificateRefresh(final String principalName, final String serialNumber,\n            X509CertRecord x509CertRecord)", "full_signature": " void revokeCertificateRefresh(final String principalName, final String serialNumber,\n            X509CertRecord x509CertRecord)", "class_method_signature": "ZTSImpl.revokeCertificateRefresh(final String principalName, final String serialNumber,\n            X509CertRecord x509CertRecord)", "testcase": false, "constructor": false}, {"identifier": "deleteInstanceIdentity", "parameters": "(ResourceContext ctx, String provider,\n            String domain, String service, String instanceId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteInstanceIdentity(ResourceContext ctx, String provider,\n            String domain, String service, String instanceId)", "full_signature": "@Override public void deleteInstanceIdentity(ResourceContext ctx, String provider,\n            String domain, String service, String instanceId)", "class_method_signature": "ZTSImpl.deleteInstanceIdentity(ResourceContext ctx, String provider,\n            String domain, String service, String instanceId)", "testcase": false, "constructor": false}, {"identifier": "postInstanceRefreshRequest", "parameters": "(ResourceContext ctx, String domain,\n            String service, InstanceRefreshRequest req)", "modifiers": "@Deprecated @Override public", "return": "Identity", "signature": "Identity postInstanceRefreshRequest(ResourceContext ctx, String domain,\n            String service, InstanceRefreshRequest req)", "full_signature": "@Deprecated @Override public Identity postInstanceRefreshRequest(ResourceContext ctx, String domain,\n            String service, InstanceRefreshRequest req)", "class_method_signature": "ZTSImpl.postInstanceRefreshRequest(ResourceContext ctx, String domain,\n            String service, InstanceRefreshRequest req)", "testcase": false, "constructor": false}, {"identifier": "validateServiceX509RefreshRequest", "parameters": "(final Principal principal,\n            final X509CertRequest certReq, final String ipAddress)", "modifiers": "", "return": "ServiceX509RefreshRequestStatus", "signature": "ServiceX509RefreshRequestStatus validateServiceX509RefreshRequest(final Principal principal,\n            final X509CertRequest certReq, final String ipAddress)", "full_signature": " ServiceX509RefreshRequestStatus validateServiceX509RefreshRequest(final Principal principal,\n            final X509CertRequest certReq, final String ipAddress)", "class_method_signature": "ZTSImpl.validateServiceX509RefreshRequest(final Principal principal,\n            final X509CertRequest certReq, final String ipAddress)", "testcase": false, "constructor": false}, {"identifier": "postSSHCertRequest", "parameters": "(ResourceContext ctx, SSHCertRequest certRequest)", "modifiers": "@Override public", "return": "Response", "signature": "Response postSSHCertRequest(ResourceContext ctx, SSHCertRequest certRequest)", "full_signature": "@Override public Response postSSHCertRequest(ResourceContext ctx, SSHCertRequest certRequest)", "class_method_signature": "ZTSImpl.postSSHCertRequest(ResourceContext ctx, SSHCertRequest certRequest)", "testcase": false, "constructor": false}, {"identifier": "getJWKList", "parameters": "(ResourceContext ctx, Boolean rfc)", "modifiers": "@Override public", "return": "JWKList", "signature": "JWKList getJWKList(ResourceContext ctx, Boolean rfc)", "full_signature": "@Override public JWKList getJWKList(ResourceContext ctx, Boolean rfc)", "class_method_signature": "ZTSImpl.getJWKList(ResourceContext ctx, Boolean rfc)", "testcase": false, "constructor": false}, {"identifier": "postOSTKInstanceRefreshRequest", "parameters": "(ResourceContext ctx, String domain,\n            String service, OSTKInstanceRefreshRequest req)", "modifiers": "@Deprecated @Override public", "return": "Identity", "signature": "Identity postOSTKInstanceRefreshRequest(ResourceContext ctx, String domain,\n            String service, OSTKInstanceRefreshRequest req)", "full_signature": "@Deprecated @Override public Identity postOSTKInstanceRefreshRequest(ResourceContext ctx, String domain,\n            String service, OSTKInstanceRefreshRequest req)", "class_method_signature": "ZTSImpl.postOSTKInstanceRefreshRequest(ResourceContext ctx, String domain,\n            String service, OSTKInstanceRefreshRequest req)", "testcase": false, "constructor": false}, {"identifier": "getSvcTokenExpiryTime", "parameters": "(Integer expiryTime)", "modifiers": "", "return": "long", "signature": "long getSvcTokenExpiryTime(Integer expiryTime)", "full_signature": " long getSvcTokenExpiryTime(Integer expiryTime)", "class_method_signature": "ZTSImpl.getSvcTokenExpiryTime(Integer expiryTime)", "testcase": false, "constructor": false}, {"identifier": "createPrincipalForName", "parameters": "(String principalName)", "modifiers": "", "return": "Principal", "signature": "Principal createPrincipalForName(String principalName)", "full_signature": " Principal createPrincipalForName(String principalName)", "class_method_signature": "ZTSImpl.createPrincipalForName(String principalName)", "testcase": false, "constructor": false}, {"identifier": "getResourceAccessExt", "parameters": "(ResourceContext ctx, String action, String resource,\n            String trustDomain, String checkPrincipal)", "modifiers": "@Override public", "return": "ResourceAccess", "signature": "ResourceAccess getResourceAccessExt(ResourceContext ctx, String action, String resource,\n            String trustDomain, String checkPrincipal)", "full_signature": "@Override public ResourceAccess getResourceAccessExt(ResourceContext ctx, String action, String resource,\n            String trustDomain, String checkPrincipal)", "class_method_signature": "ZTSImpl.getResourceAccessExt(ResourceContext ctx, String action, String resource,\n            String trustDomain, String checkPrincipal)", "testcase": false, "constructor": false}, {"identifier": "getResourceAccess", "parameters": "(ResourceContext ctx, String action, String resource,\n            String trustDomain, String checkPrincipal)", "modifiers": "@Override public", "return": "ResourceAccess", "signature": "ResourceAccess getResourceAccess(ResourceContext ctx, String action, String resource,\n            String trustDomain, String checkPrincipal)", "full_signature": "@Override public ResourceAccess getResourceAccess(ResourceContext ctx, String action, String resource,\n            String trustDomain, String checkPrincipal)", "class_method_signature": "ZTSImpl.getResourceAccess(ResourceContext ctx, String action, String resource,\n            String trustDomain, String checkPrincipal)", "testcase": false, "constructor": false}, {"identifier": "getResourceAccessCheck", "parameters": "(ResourceContext ctx, Principal principal, String action, String resource,\n            String trustDomain, String checkPrincipal)", "modifiers": "", "return": "ResourceAccess", "signature": "ResourceAccess getResourceAccessCheck(ResourceContext ctx, Principal principal, String action, String resource,\n            String trustDomain, String checkPrincipal)", "full_signature": " ResourceAccess getResourceAccessCheck(ResourceContext ctx, Principal principal, String action, String resource,\n            String trustDomain, String checkPrincipal)", "class_method_signature": "ZTSImpl.getResourceAccessCheck(ResourceContext ctx, Principal principal, String action, String resource,\n            String trustDomain, String checkPrincipal)", "testcase": false, "constructor": false}, {"identifier": "getAccess", "parameters": "(ResourceContext ctx, String domainName, String roleName,\n            String principal)", "modifiers": "@Override public", "return": "Access", "signature": "Access getAccess(ResourceContext ctx, String domainName, String roleName,\n            String principal)", "full_signature": "@Override public Access getAccess(ResourceContext ctx, String domainName, String roleName,\n            String principal)", "class_method_signature": "ZTSImpl.getAccess(ResourceContext ctx, String domainName, String roleName,\n            String principal)", "testcase": false, "constructor": false}, {"identifier": "getCertificateAuthorityBundle", "parameters": "(ResourceContext ctx, String name)", "modifiers": "public", "return": "CertificateAuthorityBundle", "signature": "CertificateAuthorityBundle getCertificateAuthorityBundle(ResourceContext ctx, String name)", "full_signature": "public CertificateAuthorityBundle getCertificateAuthorityBundle(ResourceContext ctx, String name)", "class_method_signature": "ZTSImpl.getCertificateAuthorityBundle(ResourceContext ctx, String name)", "testcase": false, "constructor": false}, {"identifier": "postDomainMetrics", "parameters": "(ResourceContext ctx, String domainName,\n            DomainMetrics domainMetrics)", "modifiers": "@Override public", "return": "DomainMetrics", "signature": "DomainMetrics postDomainMetrics(ResourceContext ctx, String domainName,\n            DomainMetrics domainMetrics)", "full_signature": "@Override public DomainMetrics postDomainMetrics(ResourceContext ctx, String domainName,\n            DomainMetrics domainMetrics)", "class_method_signature": "ZTSImpl.postDomainMetrics(ResourceContext ctx, String domainName,\n            DomainMetrics domainMetrics)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "(ResourceContext ctx)", "modifiers": "@Override public", "return": "Status", "signature": "Status getStatus(ResourceContext ctx)", "full_signature": "@Override public Status getStatus(ResourceContext ctx)", "class_method_signature": "ZTSImpl.getStatus(ResourceContext ctx)", "testcase": false, "constructor": false}, {"identifier": "getRdlSchema", "parameters": "(ResourceContext context)", "modifiers": "@Override public", "return": "Schema", "signature": "Schema getRdlSchema(ResourceContext context)", "full_signature": "@Override public Schema getRdlSchema(ResourceContext context)", "class_method_signature": "ZTSImpl.getRdlSchema(ResourceContext context)", "testcase": false, "constructor": false}, {"identifier": "validateRequest", "parameters": "(HttpServletRequest request, final String principalDomain, final String caller)", "modifiers": "", "return": "void", "signature": "void validateRequest(HttpServletRequest request, final String principalDomain, final String caller)", "full_signature": " void validateRequest(HttpServletRequest request, final String principalDomain, final String caller)", "class_method_signature": "ZTSImpl.validateRequest(HttpServletRequest request, final String principalDomain, final String caller)", "testcase": false, "constructor": false}, {"identifier": "validateRequest", "parameters": "(HttpServletRequest request, final String principalDomain, final String caller,\n                         boolean statusRequest)", "modifiers": "", "return": "void", "signature": "void validateRequest(HttpServletRequest request, final String principalDomain, final String caller,\n                         boolean statusRequest)", "full_signature": " void validateRequest(HttpServletRequest request, final String principalDomain, final String caller,\n                         boolean statusRequest)", "class_method_signature": "ZTSImpl.validateRequest(HttpServletRequest request, final String principalDomain, final String caller,\n                         boolean statusRequest)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Object val, final String type, final String principalDomain, final String caller)", "modifiers": "", "return": "void", "signature": "void validate(Object val, final String type, final String principalDomain, final String caller)", "full_signature": " void validate(Object val, final String type, final String principalDomain, final String caller)", "class_method_signature": "ZTSImpl.validate(Object val, final String type, final String principalDomain, final String caller)", "testcase": false, "constructor": false}, {"identifier": "validatePrincipalNotRoleIdentity", "parameters": "(Principal principal, final String caller)", "modifiers": "", "return": "void", "signature": "void validatePrincipalNotRoleIdentity(Principal principal, final String caller)", "full_signature": " void validatePrincipalNotRoleIdentity(Principal principal, final String caller)", "class_method_signature": "ZTSImpl.validatePrincipalNotRoleIdentity(Principal principal, final String caller)", "testcase": false, "constructor": false}, {"identifier": "logPrincipalAndGetDomain", "parameters": "(ResourceContext ctx)", "modifiers": "", "return": "String", "signature": "String logPrincipalAndGetDomain(ResourceContext ctx)", "full_signature": " String logPrincipalAndGetDomain(ResourceContext ctx)", "class_method_signature": "ZTSImpl.logPrincipalAndGetDomain(ResourceContext ctx)", "testcase": false, "constructor": false}, {"identifier": "getPrincipalDomain", "parameters": "(ResourceContext ctx)", "modifiers": "", "return": "String", "signature": "String getPrincipalDomain(ResourceContext ctx)", "full_signature": " String getPrincipalDomain(ResourceContext ctx)", "class_method_signature": "ZTSImpl.getPrincipalDomain(ResourceContext ctx)", "testcase": false, "constructor": false}, {"identifier": "setRequestDomain", "parameters": "(ResourceContext ctx, String requestDomainName)", "modifiers": "", "return": "void", "signature": "void setRequestDomain(ResourceContext ctx, String requestDomainName)", "full_signature": " void setRequestDomain(ResourceContext ctx, String requestDomainName)", "class_method_signature": "ZTSImpl.setRequestDomain(ResourceContext ctx, String requestDomainName)", "testcase": false, "constructor": false}, {"identifier": "getRequestDomainName", "parameters": "(ResourceContext ctx)", "modifiers": "", "return": "String", "signature": "String getRequestDomainName(ResourceContext ctx)", "full_signature": " String getRequestDomainName(ResourceContext ctx)", "class_method_signature": "ZTSImpl.getRequestDomainName(ResourceContext ctx)", "testcase": false, "constructor": false}, {"identifier": "getTimerMetric", "parameters": "(ResourceContext ctx)", "modifiers": "", "return": "Object", "signature": "Object getTimerMetric(ResourceContext ctx)", "full_signature": " Object getTimerMetric(ResourceContext ctx)", "class_method_signature": "ZTSImpl.getTimerMetric(ResourceContext ctx)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(int code, final String msg, final String caller,\n                                     final String requestDomain, final String principalDomain)", "modifiers": "protected", "return": "RuntimeException", "signature": "RuntimeException error(int code, final String msg, final String caller,\n                                     final String requestDomain, final String principalDomain)", "full_signature": "protected RuntimeException error(int code, final String msg, final String caller,\n                                     final String requestDomain, final String principalDomain)", "class_method_signature": "ZTSImpl.error(int code, final String msg, final String caller,\n                                     final String requestDomain, final String principalDomain)", "testcase": false, "constructor": false}, {"identifier": "requestError", "parameters": "(final String msg, final String caller, final String requestDomain,\n                                            final String principalDomain)", "modifiers": "protected", "return": "RuntimeException", "signature": "RuntimeException requestError(final String msg, final String caller, final String requestDomain,\n                                            final String principalDomain)", "full_signature": "protected RuntimeException requestError(final String msg, final String caller, final String requestDomain,\n                                            final String principalDomain)", "class_method_signature": "ZTSImpl.requestError(final String msg, final String caller, final String requestDomain,\n                                            final String principalDomain)", "testcase": false, "constructor": false}, {"identifier": "forbiddenError", "parameters": "(final String msg, final String caller, final String requestDomain,\n                                              final String principalDomain)", "modifiers": "protected", "return": "RuntimeException", "signature": "RuntimeException forbiddenError(final String msg, final String caller, final String requestDomain,\n                                              final String principalDomain)", "full_signature": "protected RuntimeException forbiddenError(final String msg, final String caller, final String requestDomain,\n                                              final String principalDomain)", "class_method_signature": "ZTSImpl.forbiddenError(final String msg, final String caller, final String requestDomain,\n                                              final String principalDomain)", "testcase": false, "constructor": false}, {"identifier": "notFoundError", "parameters": "(final String msg, final String caller, final String requestDomain,\n                                             final String principalDomain)", "modifiers": "protected", "return": "RuntimeException", "signature": "RuntimeException notFoundError(final String msg, final String caller, final String requestDomain,\n                                             final String principalDomain)", "full_signature": "protected RuntimeException notFoundError(final String msg, final String caller, final String requestDomain,\n                                             final String principalDomain)", "class_method_signature": "ZTSImpl.notFoundError(final String msg, final String caller, final String requestDomain,\n                                             final String principalDomain)", "testcase": false, "constructor": false}, {"identifier": "serverError", "parameters": "(final String msg, final String caller, final String requestDomain,\n                                           final String principalDomain)", "modifiers": "protected", "return": "RuntimeException", "signature": "RuntimeException serverError(final String msg, final String caller, final String requestDomain,\n                                           final String principalDomain)", "full_signature": "protected RuntimeException serverError(final String msg, final String caller, final String requestDomain,\n                                           final String principalDomain)", "class_method_signature": "ZTSImpl.serverError(final String msg, final String caller, final String requestDomain,\n                                           final String principalDomain)", "testcase": false, "constructor": false}, {"identifier": "newResourceContext", "parameters": "(HttpServletRequest request,\n                                              HttpServletResponse response,\n                                              String apiName)", "modifiers": "public", "return": "ResourceContext", "signature": "ResourceContext newResourceContext(HttpServletRequest request,\n                                              HttpServletResponse response,\n                                              String apiName)", "full_signature": "public ResourceContext newResourceContext(HttpServletRequest request,\n                                              HttpServletResponse response,\n                                              String apiName)", "class_method_signature": "ZTSImpl.newResourceContext(HttpServletRequest request,\n                                              HttpServletResponse response,\n                                              String apiName)", "testcase": false, "constructor": false}, {"identifier": "getExceptionMsg", "parameters": "(String prefix, ResourceContext ctx, Exception ex, String hostname)", "modifiers": "", "return": "String", "signature": "String getExceptionMsg(String prefix, ResourceContext ctx, Exception ex, String hostname)", "full_signature": " String getExceptionMsg(String prefix, ResourceContext ctx, Exception ex, String hostname)", "class_method_signature": "ZTSImpl.getExceptionMsg(String prefix, ResourceContext ctx, Exception ex, String hostname)", "testcase": false, "constructor": false}, {"identifier": "getAuthority", "parameters": "(String className)", "modifiers": "", "return": "Authority", "signature": "Authority getAuthority(String className)", "full_signature": " Authority getAuthority(String className)", "class_method_signature": "ZTSImpl.getAuthority(String className)", "testcase": false, "constructor": false}, {"identifier": "getRootDir", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getRootDir()", "full_signature": "public static String getRootDir()", "class_method_signature": "ZTSImpl.getRootDir()", "testcase": false, "constructor": false}, {"identifier": "normalizeDomainAliasUser", "parameters": "(String user)", "modifiers": "", "return": "String", "signature": "String normalizeDomainAliasUser(String user)", "full_signature": " String normalizeDomainAliasUser(String user)", "class_method_signature": "ZTSImpl.normalizeDomainAliasUser(String user)", "testcase": false, "constructor": false}, {"identifier": "isPrincipalRoleCertificateAccessValid", "parameters": "(Principal principal, String domainName, Set<String> roles)", "modifiers": "", "return": "boolean", "signature": "boolean isPrincipalRoleCertificateAccessValid(Principal principal, String domainName, Set<String> roles)", "full_signature": " boolean isPrincipalRoleCertificateAccessValid(Principal principal, String domainName, Set<String> roles)", "class_method_signature": "ZTSImpl.isPrincipalRoleCertificateAccessValid(Principal principal, String domainName, Set<String> roles)", "testcase": false, "constructor": false}, {"identifier": "recordMetrics", "parameters": "(ResourceContext ctx, int httpStatus)", "modifiers": "public", "return": "void", "signature": "void recordMetrics(ResourceContext ctx, int httpStatus)", "full_signature": "public void recordMetrics(ResourceContext ctx, int httpStatus)", "class_method_signature": "ZTSImpl.recordMetrics(ResourceContext ctx, int httpStatus)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/ZTSImpl.java"}, "focal_method": {"identifier": "validateRoleCertificateExtRequest", "parameters": "(X509RoleCertRequest certReq, final String principal,\n            final String proxyUser, X509Certificate cert, final String ip)", "modifiers": "", "return": "boolean", "body": "boolean validateRoleCertificateExtRequest(X509RoleCertRequest certReq, final String principal,\n            final String proxyUser, X509Certificate cert, final String ip) {\n\n        if (!certReq.validate(principal, proxyUser, validCertSubjectOrgValues)) {\n            return false;\n        }\n\n        // validate the role cert has the correct subject ou\n\n        if (!validateRoleCertSubjectOU(certReq, cert)) {\n            return false;\n        }\n\n        // validate the ip address if any provided\n\n        return verifyCertRequestIP ? certReq.validateIPAddress(cert, ip) : true;\n    }", "signature": "boolean validateRoleCertificateExtRequest(X509RoleCertRequest certReq, final String principal,\n            final String proxyUser, X509Certificate cert, final String ip)", "full_signature": " boolean validateRoleCertificateExtRequest(X509RoleCertRequest certReq, final String principal,\n            final String proxyUser, X509Certificate cert, final String ip)", "class_method_signature": "ZTSImpl.validateRoleCertificateExtRequest(X509RoleCertRequest certReq, final String principal,\n            final String proxyUser, X509Certificate cert, final String ip)", "testcase": false, "constructor": false, "invocations": ["validate", "validateRoleCertSubjectOU", "validateIPAddress"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}