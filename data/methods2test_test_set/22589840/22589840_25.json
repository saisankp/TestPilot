{"test_class": {"identifier": "VFSManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "OLAT-LMS/src/test/java/org/olat/data/commons/vfs/VFSManagerTest.java"}, "test_case": {"identifier": "testSanitizePath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSanitizePath() {\n        /*\n         * Make sure we always have a path that starts with a \"/\".\n         */\n        String path1 = null;// -> \"/\"\n        String path1_expected = \"/\";\n        assertTrue(VFSManager.sanitizePath(path1).equals(path1_expected));\n\n        String path2 = \"\";// -> \"/\"\n        String path2_expected = \"/\";\n        assertTrue(VFSManager.sanitizePath(path2).equals(path2_expected));\n\n        String path3 = \"/\";// -> \"/\"\n        String path3_expected = \"/\";\n        assertTrue(VFSManager.sanitizePath(path3).equals(path3_expected));\n\n        String path4 = \".\";// -> \"/.\"\n        String path4_expected = \"/.\";\n        assertTrue(VFSManager.sanitizePath(path4).equals(path4_expected));\n\n        String path5 = \"./\";// -> \"/.\"\n        String path5_expected = \"/.\";\n        assertTrue(VFSManager.sanitizePath(path5).equals(path5_expected));\n\n        String path6 = \"cutTrailingSlash/\";// -> \"/cutTrailingSlash\"\n        String path6_expected = \"/cutTrailingSlash\";\n        assertTrue(VFSManager.sanitizePath(path6).equals(path6_expected));\n    }", "signature": "void testSanitizePath()", "full_signature": "@Test public void testSanitizePath()", "class_method_signature": "VFSManagerTest.testSanitizePath()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "sanitizePath", "assertTrue", "equals", "sanitizePath", "assertTrue", "equals", "sanitizePath", "assertTrue", "equals", "sanitizePath", "assertTrue", "equals", "sanitizePath", "assertTrue", "equals", "sanitizePath"]}, "focal_class": {"identifier": "VFSManager", "superclass": "extends BasicManager", "interfaces": "", "fields": [{"original_string": "private static final Pattern fileNamePattern = Pattern.compile(\"(.+)[.](\\\\w{3,4})\");", "modifier": "private static final", "type": "Pattern", "declarator": "fileNamePattern = Pattern.compile(\"(.+)[.](\\\\w{3,4})\")", "var_name": "fileNamePattern"}, {"original_string": "private static final Logger log = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}, {"original_string": "private static final int BUFFER_SIZE = 2048;", "modifier": "private static final", "type": "int", "declarator": "BUFFER_SIZE = 2048", "var_name": "BUFFER_SIZE"}], "methods": [{"identifier": "sanitizePath", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String sanitizePath(String path)", "full_signature": "public static String sanitizePath(String path)", "class_method_signature": "VFSManager.sanitizePath(String path)", "testcase": false, "constructor": false}, {"identifier": "extractChild", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String extractChild(String path)", "full_signature": "public static String extractChild(String path)", "class_method_signature": "VFSManager.extractChild(String path)", "testcase": false, "constructor": false}, {"identifier": "isContainerDescendantOrSelf", "parameters": "(VFSContainer descendant, VFSContainer root)", "modifiers": "public static", "return": "boolean", "signature": "boolean isContainerDescendantOrSelf(VFSContainer descendant, VFSContainer root)", "full_signature": "public static boolean isContainerDescendantOrSelf(VFSContainer descendant, VFSContainer root)", "class_method_signature": "VFSManager.isContainerDescendantOrSelf(VFSContainer descendant, VFSContainer root)", "testcase": false, "constructor": false}, {"identifier": "isSelfOrParent", "parameters": "(VFSContainer descendant, VFSContainer parent)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSelfOrParent(VFSContainer descendant, VFSContainer parent)", "full_signature": "public static boolean isSelfOrParent(VFSContainer descendant, VFSContainer parent)", "class_method_signature": "VFSManager.isSelfOrParent(VFSContainer descendant, VFSContainer parent)", "testcase": false, "constructor": false}, {"identifier": "resolveFile", "parameters": "(VFSContainer rootContainer, String path)", "modifiers": "public static", "return": "VFSItem", "signature": "VFSItem resolveFile(VFSContainer rootContainer, String path)", "full_signature": "public static VFSItem resolveFile(VFSContainer rootContainer, String path)", "class_method_signature": "VFSManager.resolveFile(VFSContainer rootContainer, String path)", "testcase": false, "constructor": false}, {"identifier": "findInheritedSecurityCallback", "parameters": "(VFSItem vfsItem)", "modifiers": "public static", "return": "VFSSecurityCallback", "signature": "VFSSecurityCallback findInheritedSecurityCallback(VFSItem vfsItem)", "full_signature": "public static VFSSecurityCallback findInheritedSecurityCallback(VFSItem vfsItem)", "class_method_signature": "VFSManager.findInheritedSecurityCallback(VFSItem vfsItem)", "testcase": false, "constructor": false}, {"identifier": "findInheritingSecurityCallbackContainer", "parameters": "(VFSItem vfsItem)", "modifiers": "public static", "return": "VFSContainer", "signature": "VFSContainer findInheritingSecurityCallbackContainer(VFSItem vfsItem)", "full_signature": "public static VFSContainer findInheritingSecurityCallbackContainer(VFSItem vfsItem)", "class_method_signature": "VFSManager.findInheritingSecurityCallbackContainer(VFSItem vfsItem)", "testcase": false, "constructor": false}, {"identifier": "isTopLevelQuotaContainer", "parameters": "(VFSContainer container)", "modifiers": "public static", "return": "Quota", "signature": "Quota isTopLevelQuotaContainer(VFSContainer container)", "full_signature": "public static Quota isTopLevelQuotaContainer(VFSContainer container)", "class_method_signature": "VFSManager.isTopLevelQuotaContainer(VFSContainer container)", "testcase": false, "constructor": false}, {"identifier": "getQuotaLeftKB", "parameters": "(VFSContainer container)", "modifiers": "public static", "return": "long", "signature": "long getQuotaLeftKB(VFSContainer container)", "full_signature": "public static long getQuotaLeftKB(VFSContainer container)", "class_method_signature": "VFSManager.getQuotaLeftKB(VFSContainer container)", "testcase": false, "constructor": false}, {"identifier": "getUsageKB", "parameters": "(VFSItem vfsItem)", "modifiers": "public static", "return": "long", "signature": "long getUsageKB(VFSItem vfsItem)", "full_signature": "public static long getUsageKB(VFSItem vfsItem)", "class_method_signature": "VFSManager.getUsageKB(VFSItem vfsItem)", "testcase": false, "constructor": false}, {"identifier": "getRealPath", "parameters": "(VFSContainer container)", "modifiers": "public static", "return": "String", "signature": "String getRealPath(VFSContainer container)", "full_signature": "public static String getRealPath(VFSContainer container)", "class_method_signature": "VFSManager.getRealPath(VFSContainer container)", "testcase": false, "constructor": false}, {"identifier": "findWritableRootFolderFor", "parameters": "(VFSContainer rootDir, String relFilePath)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] findWritableRootFolderFor(VFSContainer rootDir, String relFilePath)", "full_signature": "public static Object[] findWritableRootFolderFor(VFSContainer rootDir, String relFilePath)", "class_method_signature": "VFSManager.findWritableRootFolderFor(VFSContainer rootDir, String relFilePath)", "testcase": false, "constructor": false}, {"identifier": "findWritableRootFolderForRecursion", "parameters": "(VFSContainer rootDir, String relFilePath, int recursionLevel)", "modifiers": "private static", "return": "Object[]", "signature": "Object[] findWritableRootFolderForRecursion(VFSContainer rootDir, String relFilePath, int recursionLevel)", "full_signature": "private static Object[] findWritableRootFolderForRecursion(VFSContainer rootDir, String relFilePath, int recursionLevel)", "class_method_signature": "VFSManager.findWritableRootFolderForRecursion(VFSContainer rootDir, String relFilePath, int recursionLevel)", "testcase": false, "constructor": false}, {"identifier": "similarButNonExistingName", "parameters": "(VFSContainer root, String name)", "modifiers": "public static", "return": "String", "signature": "String similarButNonExistingName(VFSContainer root, String name)", "full_signature": "public static String similarButNonExistingName(VFSContainer root, String name)", "class_method_signature": "VFSManager.similarButNonExistingName(VFSContainer root, String name)", "testcase": false, "constructor": false}, {"identifier": "appendNumberAtTheEndOfFilename", "parameters": "(String name, int number)", "modifiers": "public static", "return": "String", "signature": "String appendNumberAtTheEndOfFilename(String name, int number)", "full_signature": "public static String appendNumberAtTheEndOfFilename(String name, int number)", "class_method_signature": "VFSManager.appendNumberAtTheEndOfFilename(String name, int number)", "testcase": false, "constructor": false}, {"identifier": "copyContent", "parameters": "(VFSLeaf source, VFSLeaf target)", "modifiers": "public static", "return": "boolean", "signature": "boolean copyContent(VFSLeaf source, VFSLeaf target)", "full_signature": "public static boolean copyContent(VFSLeaf source, VFSLeaf target)", "class_method_signature": "VFSManager.copyContent(VFSLeaf source, VFSLeaf target)", "testcase": false, "constructor": false}, {"identifier": "copyContent", "parameters": "(InputStream inStream, VFSLeaf target)", "modifiers": "public static", "return": "boolean", "signature": "boolean copyContent(InputStream inStream, VFSLeaf target)", "full_signature": "public static boolean copyContent(InputStream inStream, VFSLeaf target)", "class_method_signature": "VFSManager.copyContent(InputStream inStream, VFSLeaf target)", "testcase": false, "constructor": false}, {"identifier": "copyContent", "parameters": "(InputStream inStream, VFSLeaf target, boolean closeInput)", "modifiers": "public static", "return": "boolean", "signature": "boolean copyContent(InputStream inStream, VFSLeaf target, boolean closeInput)", "full_signature": "public static boolean copyContent(InputStream inStream, VFSLeaf target, boolean closeInput)", "class_method_signature": "VFSManager.copyContent(InputStream inStream, VFSLeaf target, boolean closeInput)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(VFSItem item)", "modifiers": "public static", "return": "boolean", "signature": "boolean exists(VFSItem item)", "full_signature": "public static boolean exists(VFSItem item)", "class_method_signature": "VFSManager.exists(VFSItem item)", "testcase": false, "constructor": false}], "file": "OLAT-LMS/src/main/java/org/olat/data/commons/vfs/VFSManager.java"}, "focal_method": {"identifier": "sanitizePath", "parameters": "(String path)", "modifiers": "public static", "return": "String", "body": "public static String sanitizePath(String path) {\n        // check for \"empty\" paths\n        if (path == null || path.length() == 0)\n            return \"/\";\n        // prepend \"/\" if missing\n        if (path.charAt(0) != '/')\n            path = \"/\" + path;\n        // cut trailing slash if any\n\t\tif (path.length() > 1 && path.charAt(path.length() - 1) == '/') path = path.substring(0, path.length() - 1);\n        return path;\n    }", "signature": "String sanitizePath(String path)", "full_signature": "public static String sanitizePath(String path)", "class_method_signature": "VFSManager.sanitizePath(String path)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "length", "charAt", "length", "substring", "length"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}