{"test_class": {"identifier": "LoadScopeProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "OldModules/PluginLoadScopeProvider/src/test/java/info/smart_tools/smartactors/plugin/load_scope_povider/LoadScopeProviderTest.java"}, "test_case": {"identifier": "checkPluginExceptionOnPluginLoad", "parameters": "()", "modifiers": "@Test (expected = PluginException.class) public", "return": "void", "body": "@Test (expected = PluginException.class)\n    public void checkPluginExceptionOnPluginLoad()\n            throws Exception {\n        IBootstrap<IBootstrapItem<String>> bootstrap = mock(IBootstrap.class);\n        IPlugin plugin = new LoadScopeProvider(bootstrap);\n        doThrow(Exception.class).when(bootstrap).add(any(IBootstrapItem.class));\n        plugin.load();\n        fail();\n    }", "signature": "void checkPluginExceptionOnPluginLoad()", "full_signature": "@Test (expected = PluginException.class) public void checkPluginExceptionOnPluginLoad()", "class_method_signature": "LoadScopeProviderTest.checkPluginExceptionOnPluginLoad()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "when", "doThrow", "any", "load", "fail"]}, "focal_class": {"identifier": "LoadScopeProvider", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}], "methods": [{"identifier": "LoadScopeProvider", "parameters": "(final IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " LoadScopeProvider(final IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  LoadScopeProvider(final IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "LoadScopeProvider.LoadScopeProvider(final IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "LoadScopeProvider.load()", "testcase": false, "constructor": false}], "file": "OldModules/PluginLoadScopeProvider/src/main/java/info/smart_tools/smartactors/plugin/load_scope_povider/LoadScopeProvider.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load()\n            throws PluginException {\n        try {\n            IBootstrapItem<String> item = new BootstrapItem(\"LoadScopeProvider\");\n            item\n                    .process(\n                            () -> {\n                            }\n                    );\n            this.bootstrap.add(item);\n        } catch (Throwable e) {\n            throw new PluginException(\"Load plugin execution has been failed.\", e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "LoadScopeProvider.load()", "testcase": false, "constructor": false, "invocations": ["process", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}