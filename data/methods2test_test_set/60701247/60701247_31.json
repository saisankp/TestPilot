{"test_class": {"identifier": "IdEnumSupportTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  private NlProperty myProperty;", "modifier": "@Mock\n  private", "type": "NlProperty", "declarator": "myProperty", "var_name": "myProperty"}, {"original_string": "@Mock\n  private ResourceResolver myResolver;", "modifier": "@Mock\n  private", "type": "ResourceResolver", "declarator": "myResolver", "var_name": "myResolver"}, {"original_string": "@Mock\n  private IdAnalyzer myIdAnalyzer;", "modifier": "@Mock\n  private", "type": "IdAnalyzer", "declarator": "myIdAnalyzer", "var_name": "myIdAnalyzer"}, {"original_string": "private AttributeDefinition myDefinition;", "modifier": "private", "type": "AttributeDefinition", "declarator": "myDefinition", "var_name": "myDefinition"}, {"original_string": "private IdEnumSupport mySupport;", "modifier": "private", "type": "IdEnumSupport", "declarator": "mySupport", "var_name": "mySupport"}], "file": "designer/testSrc/com/android/tools/idea/uibuilder/property/editors/support/IdEnumSupportTest.java"}, "test_case": {"identifier": "testFindPossibleValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFindPossibleValues() {\n    when(myIdAnalyzer.findIds()).thenReturn(ImmutableList.of(\"id1\", \"id2\"));\n    assertThat(mySupport.getAllValues()).containsExactly(\n      new ValueWithDisplayString(\"id1\", \"@+id/id1\"),\n      new ValueWithDisplayString(\"id2\", \"@+id/id2\")).inOrder();\n  }", "signature": "void testFindPossibleValues()", "full_signature": "@Test public void testFindPossibleValues()", "class_method_signature": "IdEnumSupportTest.testFindPossibleValues()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findIds", "of", "inOrder", "containsExactly", "assertThat", "getAllValues"]}, "focal_class": {"identifier": "IdEnumSupport", "superclass": "extends AttributeDefinitionEnumSupport", "interfaces": "", "fields": [{"original_string": "private final IdAnalyzer myIdAnalyzer;", "modifier": "private final", "type": "IdAnalyzer", "declarator": "myIdAnalyzer", "var_name": "myIdAnalyzer"}], "methods": [{"identifier": "IdEnumSupport", "parameters": "(@NotNull NlProperty property)", "modifiers": "public", "return": "", "signature": " IdEnumSupport(@NotNull NlProperty property)", "full_signature": "public  IdEnumSupport(@NotNull NlProperty property)", "class_method_signature": "IdEnumSupport.IdEnumSupport(@NotNull NlProperty property)", "testcase": false, "constructor": true}, {"identifier": "IdEnumSupport", "parameters": "(@NotNull NlProperty property, @NotNull IdAnalyzer analyzer)", "modifiers": "@VisibleForTesting public", "return": "", "signature": " IdEnumSupport(@NotNull NlProperty property, @NotNull IdAnalyzer analyzer)", "full_signature": "@VisibleForTesting public  IdEnumSupport(@NotNull NlProperty property, @NotNull IdAnalyzer analyzer)", "class_method_signature": "IdEnumSupport.IdEnumSupport(@NotNull NlProperty property, @NotNull IdAnalyzer analyzer)", "testcase": false, "constructor": true}, {"identifier": "getAllValues", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "List<ValueWithDisplayString>", "signature": "List<ValueWithDisplayString> getAllValues()", "full_signature": "@NotNull @Override public List<ValueWithDisplayString> getAllValues()", "class_method_signature": "IdEnumSupport.getAllValues()", "testcase": false, "constructor": false}, {"identifier": "createFromResolvedValue", "parameters": "(@NotNull String resolvedValue, @Nullable String value, @Nullable String hint)", "modifiers": "@Override @NotNull protected", "return": "ValueWithDisplayString", "signature": "ValueWithDisplayString createFromResolvedValue(@NotNull String resolvedValue, @Nullable String value, @Nullable String hint)", "full_signature": "@Override @NotNull protected ValueWithDisplayString createFromResolvedValue(@NotNull String resolvedValue, @Nullable String value, @Nullable String hint)", "class_method_signature": "IdEnumSupport.createFromResolvedValue(@NotNull String resolvedValue, @Nullable String value, @Nullable String hint)", "testcase": false, "constructor": false}], "file": "designer/src/com/android/tools/idea/uibuilder/property/editors/support/IdEnumSupport.java"}, "focal_method": {"identifier": "getAllValues", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "List<ValueWithDisplayString>", "body": "@NotNull\n  @Override\n  public List<ValueWithDisplayString> getAllValues() {\n    List<ValueWithDisplayString> values = myIdAnalyzer.findIds().stream()\n      .map(id -> new ValueWithDisplayString(isEnumValue(id) ? NEW_ID_PREFIX + id : id, NEW_ID_PREFIX + id))\n      .collect(Collectors.toList());\n    addAttributeDefinitionValues(values);\n    return values;\n  }", "signature": "List<ValueWithDisplayString> getAllValues()", "full_signature": "@NotNull @Override public List<ValueWithDisplayString> getAllValues()", "class_method_signature": "IdEnumSupport.getAllValues()", "testcase": false, "constructor": false, "invocations": ["collect", "map", "stream", "findIds", "isEnumValue", "toList", "addAttributeDefinitionValues"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}