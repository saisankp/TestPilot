{"test_class": {"identifier": "SimpleNonceProviderTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/common/src/test/java/hera/api/transaction/SimpleNonceProviderTest.java"}, "test_case": {"identifier": "testIncrementAndGetNonce", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIncrementAndGetNonce() {\n    final NonceProvider nonceProvider = new SimpleNonceProvider();\n    final AccountAddress identity = new AergoKeyGenerator().create().getAddress();\n\n    final int tryCount = 10;\n    for (int i = 0; i < tryCount; ++i) {\n      nonceProvider.incrementAndGetNonce(identity);\n    }\n\n    assertEquals(tryCount + 1, nonceProvider.incrementAndGetNonce(identity));\n  }", "signature": "void testIncrementAndGetNonce()", "full_signature": "@Test public void testIncrementAndGetNonce()", "class_method_signature": "SimpleNonceProviderTest.testIncrementAndGetNonce()", "testcase": true, "constructor": false, "invocations": ["getAddress", "create", "incrementAndGetNonce", "assertEquals", "incrementAndGetNonce"]}, "focal_class": {"identifier": "SimpleNonceProvider", "superclass": "", "interfaces": "implements NonceProvider", "fields": [{"original_string": "protected final Logger logger = getLogger(getClass());", "modifier": "protected final", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "protected final LoadingCache<AccountAddress, AtomicLong> cache;", "modifier": "protected final", "type": "LoadingCache<AccountAddress, AtomicLong>", "declarator": "cache", "var_name": "cache"}], "methods": [{"identifier": "SimpleNonceProvider", "parameters": "()", "modifiers": "public", "return": "", "signature": " SimpleNonceProvider()", "full_signature": "public  SimpleNonceProvider()", "class_method_signature": "SimpleNonceProvider.SimpleNonceProvider()", "testcase": false, "constructor": true}, {"identifier": "SimpleNonceProvider", "parameters": "(final int capacity)", "modifiers": "public", "return": "", "signature": " SimpleNonceProvider(final int capacity)", "full_signature": "public  SimpleNonceProvider(final int capacity)", "class_method_signature": "SimpleNonceProvider.SimpleNonceProvider(final int capacity)", "testcase": false, "constructor": true}, {"identifier": "bindNonce", "parameters": "(final AccountState accountState)", "modifiers": "@Override public", "return": "void", "signature": "void bindNonce(final AccountState accountState)", "full_signature": "@Override public void bindNonce(final AccountState accountState)", "class_method_signature": "SimpleNonceProvider.bindNonce(final AccountState accountState)", "testcase": false, "constructor": false}, {"identifier": "bindNonce", "parameters": "(final AccountAddress accountAddress, final long nonce)", "modifiers": "@Override public", "return": "void", "signature": "void bindNonce(final AccountAddress accountAddress, final long nonce)", "full_signature": "@Override public void bindNonce(final AccountAddress accountAddress, final long nonce)", "class_method_signature": "SimpleNonceProvider.bindNonce(final AccountAddress accountAddress, final long nonce)", "testcase": false, "constructor": false}, {"identifier": "incrementAndGetNonce", "parameters": "(final AccountAddress accountAddress)", "modifiers": "@Override public", "return": "long", "signature": "long incrementAndGetNonce(final AccountAddress accountAddress)", "full_signature": "@Override public long incrementAndGetNonce(final AccountAddress accountAddress)", "class_method_signature": "SimpleNonceProvider.incrementAndGetNonce(final AccountAddress accountAddress)", "testcase": false, "constructor": false}, {"identifier": "getLastUsedNonce", "parameters": "(final AccountAddress accountAddress)", "modifiers": "@Override public", "return": "long", "signature": "long getLastUsedNonce(final AccountAddress accountAddress)", "full_signature": "@Override public long getLastUsedNonce(final AccountAddress accountAddress)", "class_method_signature": "SimpleNonceProvider.getLastUsedNonce(final AccountAddress accountAddress)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SimpleNonceProvider.toString()", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/hera/api/transaction/SimpleNonceProvider.java"}, "focal_method": {"identifier": "incrementAndGetNonce", "parameters": "(final AccountAddress accountAddress)", "modifiers": "@Override public", "return": "long", "body": "@Override\n  public long incrementAndGetNonce(final AccountAddress accountAddress) {\n    assertNotNull(accountAddress, \"AccountAddress must not null\");\n    try {\n      return this.cache.get(accountAddress).incrementAndGet();\n    } catch (Exception e) {\n      throw new HerajException(e);\n    }\n  }", "signature": "long incrementAndGetNonce(final AccountAddress accountAddress)", "full_signature": "@Override public long incrementAndGetNonce(final AccountAddress accountAddress)", "class_method_signature": "SimpleNonceProvider.incrementAndGetNonce(final AccountAddress accountAddress)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "incrementAndGet", "get"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}