{"test_class": {"identifier": "StructGenAtomTypeGuesserTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "tool/structgen/src/test/java/org/openscience/cdk/atomtype/StructGenAtomTypeGuesserTest.java"}, "test_case": {"identifier": "testPossibleAtomTypes_IAtomContainer_IAtom", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPossibleAtomTypes_IAtomContainer_IAtom() throws java.lang.Exception {\n        IAtomContainer mol = new AtomContainer();\n        Atom atom = new Atom(\"C\");\n        atom.setImplicitHydrogenCount(3);\n        Atom atom2 = new Atom(\"N\");\n        atom2.setImplicitHydrogenCount(2);\n        mol.addAtom(atom);\n        mol.addAtom(atom2);\n        mol.addBond(new Bond(atom, atom2, IBond.Order.SINGLE));\n\n        StructGenAtomTypeGuesser atm = new StructGenAtomTypeGuesser();\n        List<IAtomType> matched = atm.possibleAtomTypes(mol, atom);\n        Assert.assertNotNull(matched);\n        Assert.assertTrue(matched.size() > 0);\n        Assert.assertTrue(matched.get(0) instanceof IAtomType);\n\n        Assert.assertEquals(\"C\", ((IAtomType) matched.get(0)).getSymbol());\n    }", "signature": "void testPossibleAtomTypes_IAtomContainer_IAtom()", "full_signature": "@Test public void testPossibleAtomTypes_IAtomContainer_IAtom()", "class_method_signature": "StructGenAtomTypeGuesserTest.testPossibleAtomTypes_IAtomContainer_IAtom()", "testcase": true, "constructor": false, "invocations": ["setImplicitHydrogenCount", "setImplicitHydrogenCount", "addAtom", "addAtom", "addBond", "possibleAtomTypes", "assertNotNull", "assertTrue", "size", "assertTrue", "get", "assertEquals", "getSymbol", "get"]}, "focal_class": {"identifier": "StructGenAtomTypeGuesser", "superclass": "", "interfaces": "implements IAtomTypeGuesser", "fields": [{"original_string": "private static AtomTypeFactory factory = null;", "modifier": "private static", "type": "AtomTypeFactory", "declarator": "factory = null", "var_name": "factory"}, {"original_string": "private static ILoggingTool    logger  = LoggingToolFactory.createLoggingTool(StructGenAtomTypeGuesser.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger  = LoggingToolFactory.createLoggingTool(StructGenAtomTypeGuesser.class)", "var_name": "logger"}], "methods": [{"identifier": "StructGenAtomTypeGuesser", "parameters": "()", "modifiers": "public", "return": "", "signature": " StructGenAtomTypeGuesser()", "full_signature": "public  StructGenAtomTypeGuesser()", "class_method_signature": "StructGenAtomTypeGuesser.StructGenAtomTypeGuesser()", "testcase": false, "constructor": true}, {"identifier": "possibleAtomTypes", "parameters": "(IAtomContainer atomContainer, IAtom atom)", "modifiers": "@Override public", "return": "List<IAtomType>", "signature": "List<IAtomType> possibleAtomTypes(IAtomContainer atomContainer, IAtom atom)", "full_signature": "@Override public List<IAtomType> possibleAtomTypes(IAtomContainer atomContainer, IAtom atom)", "class_method_signature": "StructGenAtomTypeGuesser.possibleAtomTypes(IAtomContainer atomContainer, IAtom atom)", "testcase": false, "constructor": false}], "file": "tool/structgen/src/main/java/org/openscience/cdk/atomtype/StructGenAtomTypeGuesser.java"}, "focal_method": {"identifier": "possibleAtomTypes", "parameters": "(IAtomContainer atomContainer, IAtom atom)", "modifiers": "@Override public", "return": "List<IAtomType>", "body": "@Override\n    public List<IAtomType> possibleAtomTypes(IAtomContainer atomContainer, IAtom atom) throws CDKException {\n        if (factory == null) {\n            try {\n                factory = AtomTypeFactory.getInstance(\"org/openscience/cdk/config/data/structgen_atomtypes.xml\",\n                        atom.getBuilder());\n            } catch (Exception ex1) {\n                logger.error(ex1.getMessage());\n                logger.debug(ex1);\n                throw new CDKException(\"Could not instantiate the AtomType list!\", ex1);\n            }\n        }\n\n        double bondOrderSum = atomContainer.getBondOrderSum(atom);\n        IBond.Order maxBondOrder = atomContainer.getMaximumBondOrder(atom);\n        int charge = atom.getFormalCharge();\n        int hcount = atom.getImplicitHydrogenCount();\n\n        List<IAtomType> matchingTypes = new ArrayList<IAtomType>();\n        IAtomType[] types = factory.getAtomTypes(atom.getSymbol());\n        for (IAtomType type : types) {\n            logger.debug(\"   ... matching atom \", atom, \" vs \", type);\n            if (bondOrderSum - charge + hcount <= type.getBondOrderSum()\n                    && !BondManipulator.isHigherOrder(maxBondOrder, type.getMaxBondOrder())) {\n                matchingTypes.add(type);\n            }\n        }\n        logger.debug(\"    No Match\");\n\n        return matchingTypes;\n    }", "signature": "List<IAtomType> possibleAtomTypes(IAtomContainer atomContainer, IAtom atom)", "full_signature": "@Override public List<IAtomType> possibleAtomTypes(IAtomContainer atomContainer, IAtom atom)", "class_method_signature": "StructGenAtomTypeGuesser.possibleAtomTypes(IAtomContainer atomContainer, IAtom atom)", "testcase": false, "constructor": false, "invocations": ["getInstance", "getBuilder", "error", "getMessage", "debug", "getBondOrderSum", "getMaximumBondOrder", "getFormalCharge", "getImplicitHydrogenCount", "getAtomTypes", "getSymbol", "debug", "getBondOrderSum", "isHigherOrder", "getMaxBondOrder", "add", "debug"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}