{"test_class": {"identifier": "TracerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private ApplicationContext applicationContext;", "modifier": "private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}], "file": "everrest-core/src/test/java/org/everrest/core/util/TracerTest.java"}, "test_case": {"identifier": "enablesTracingByQueryParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void enablesTracingByQueryParameter() throws Exception {\n        enableTracing();\n        assertTrue(Tracer.isTracingEnabled());\n    }", "signature": "void enablesTracingByQueryParameter()", "full_signature": "@Test public void enablesTracingByQueryParameter()", "class_method_signature": "TracerTest.enablesTracingByQueryParameter()", "testcase": true, "constructor": false, "invocations": ["enableTracing", "assertTrue", "isTracingEnabled"]}, "focal_class": {"identifier": "Tracer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "isTracingEnabled", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isTracingEnabled()", "full_signature": "public static boolean isTracingEnabled()", "class_method_signature": "Tracer.isTracingEnabled()", "testcase": false, "constructor": false}, {"identifier": "trace", "parameters": "(String message)", "modifiers": "public static", "return": "void", "signature": "void trace(String message)", "full_signature": "public static void trace(String message)", "class_method_signature": "Tracer.trace(String message)", "testcase": false, "constructor": false}, {"identifier": "trace", "parameters": "(String format, Object... args)", "modifiers": "public static", "return": "void", "signature": "void trace(String format, Object... args)", "full_signature": "public static void trace(String format, Object... args)", "class_method_signature": "Tracer.trace(String format, Object... args)", "testcase": false, "constructor": false}, {"identifier": "addTraceHeaders", "parameters": "(GenericContainerResponse response)", "modifiers": "public static", "return": "void", "signature": "void addTraceHeaders(GenericContainerResponse response)", "full_signature": "public static void addTraceHeaders(GenericContainerResponse response)", "class_method_signature": "Tracer.addTraceHeaders(GenericContainerResponse response)", "testcase": false, "constructor": false}, {"identifier": "getTraceHolder", "parameters": "()", "modifiers": "private static", "return": "TraceHolder", "signature": "TraceHolder getTraceHolder()", "full_signature": "private static TraceHolder getTraceHolder()", "class_method_signature": "Tracer.getTraceHolder()", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/util/Tracer.java"}, "focal_method": {"identifier": "isTracingEnabled", "parameters": "()", "modifiers": "public static", "return": "boolean", "body": "public static boolean isTracingEnabled() {\n        ApplicationContext context = ApplicationContext.getCurrent();\n        if (context == null) {\n            throw new IllegalStateException(\"ApplicationContext is not initialized yet. \");\n        }\n        return Boolean.parseBoolean(context.getQueryParameters().getFirst(\"tracing\"));\n    }", "signature": "boolean isTracingEnabled()", "full_signature": "public static boolean isTracingEnabled()", "class_method_signature": "Tracer.isTracingEnabled()", "testcase": false, "constructor": false, "invocations": ["getCurrent", "parseBoolean", "getFirst", "getQueryParameters"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}