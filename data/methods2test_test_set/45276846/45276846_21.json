{"test_class": {"identifier": "TestMigrationTaskService", "superclass": "extends BasicReusableHostTestCase", "interfaces": "", "fields": [{"original_string": "private static final String CUSTOM_NODE_GROUP_NAME = \"custom\";", "modifier": "private static final", "type": "String", "declarator": "CUSTOM_NODE_GROUP_NAME = \"custom\"", "var_name": "CUSTOM_NODE_GROUP_NAME"}, {"original_string": "private static final String CUSTOM_NODE_GROUP = UriUtils.buildUriPath(\n            ServiceUriPaths.NODE_GROUP_FACTORY,\n            CUSTOM_NODE_GROUP_NAME);", "modifier": "private static final", "type": "String", "declarator": "CUSTOM_NODE_GROUP = UriUtils.buildUriPath(\n            ServiceUriPaths.NODE_GROUP_FACTORY,\n            CUSTOM_NODE_GROUP_NAME)", "var_name": "CUSTOM_NODE_GROUP"}, {"original_string": "private static final String CUSTOM_GROUP_NODE_SELECTOR = UriUtils.buildUriPath(\n            ServiceUriPaths.NODE_SELECTOR_PREFIX,\n            CUSTOM_NODE_GROUP_NAME);", "modifier": "private static final", "type": "String", "declarator": "CUSTOM_GROUP_NODE_SELECTOR = UriUtils.buildUriPath(\n            ServiceUriPaths.NODE_SELECTOR_PREFIX,\n            CUSTOM_NODE_GROUP_NAME)", "var_name": "CUSTOM_GROUP_NODE_SELECTOR"}, {"original_string": "private static final String CUSTOM_EXAMPLE_FACTORY_LINK = \"custom-group-examples\";", "modifier": "private static final", "type": "String", "declarator": "CUSTOM_EXAMPLE_FACTORY_LINK = \"custom-group-examples\"", "var_name": "CUSTOM_EXAMPLE_FACTORY_LINK"}, {"original_string": "private static final int UNACCESSABLE_PORT = 123;", "modifier": "private static final", "type": "int", "declarator": "UNACCESSABLE_PORT = 123", "var_name": "UNACCESSABLE_PORT"}, {"original_string": "private static final URI FAKE_URI = UriUtils.buildUri(\"127.0.0.1\", UNACCESSABLE_PORT, null, null);", "modifier": "private static final", "type": "URI", "declarator": "FAKE_URI = UriUtils.buildUri(\"127.0.0.1\", UNACCESSABLE_PORT, null, null)", "var_name": "FAKE_URI"}, {"original_string": "private static final String TRANSFORMATION = \"transformation\";", "modifier": "private static final", "type": "String", "declarator": "TRANSFORMATION = \"transformation\"", "var_name": "TRANSFORMATION"}, {"original_string": "private static final String TRANSFORMATION_V2 = \"transformation-v2\";", "modifier": "private static final", "type": "String", "declarator": "TRANSFORMATION_V2 = \"transformation-v2\"", "var_name": "TRANSFORMATION_V2"}, {"original_string": "private static final String TRANSFORMATION_V3 = \"transformation-v3\";", "modifier": "private static final", "type": "String", "declarator": "TRANSFORMATION_V3 = \"transformation-v3\"", "var_name": "TRANSFORMATION_V3"}, {"original_string": "private static boolean clearSourceAndDestInProcessPeers;", "modifier": "private static", "type": "boolean", "declarator": "clearSourceAndDestInProcessPeers", "var_name": "clearSourceAndDestInProcessPeers"}, {"original_string": "private URI sourceFactoryUri;", "modifier": "private", "type": "URI", "declarator": "sourceFactoryUri", "var_name": "sourceFactoryUri"}, {"original_string": "private URI destinationFactoryUri;", "modifier": "private", "type": "URI", "declarator": "destinationFactoryUri", "var_name": "destinationFactoryUri"}, {"original_string": "private URI exampleSourceFactory;", "modifier": "private", "type": "URI", "declarator": "exampleSourceFactory", "var_name": "exampleSourceFactory"}, {"original_string": "private URI exampleDestinationFactory;", "modifier": "private", "type": "URI", "declarator": "exampleDestinationFactory", "var_name": "exampleDestinationFactory"}, {"original_string": "private static VerificationHost destinationHost;", "modifier": "private static", "type": "VerificationHost", "declarator": "destinationHost", "var_name": "destinationHost"}, {"original_string": "public long serviceCount = 10;", "modifier": "public", "type": "long", "declarator": "serviceCount = 10", "var_name": "serviceCount"}, {"original_string": "public int nodeCount = 3;", "modifier": "public", "type": "int", "declarator": "nodeCount = 3", "var_name": "nodeCount"}, {"original_string": "public int iterationCount = 1;", "modifier": "public", "type": "int", "declarator": "iterationCount = 1", "var_name": "iterationCount"}, {"original_string": "private URI exampleWithCustomSelectorDestinationFactory;", "modifier": "private", "type": "URI", "declarator": "exampleWithCustomSelectorDestinationFactory", "var_name": "exampleWithCustomSelectorDestinationFactory"}, {"original_string": "private URI exampleWithCustomSelectorDestinationFactoryOnObserver;", "modifier": "private", "type": "URI", "declarator": "exampleWithCustomSelectorDestinationFactoryOnObserver", "var_name": "exampleWithCustomSelectorDestinationFactoryOnObserver"}, {"original_string": "private URI destinationCustomNodeGroupOnObserver;", "modifier": "private", "type": "URI", "declarator": "destinationCustomNodeGroupOnObserver", "var_name": "destinationCustomNodeGroupOnObserver"}, {"original_string": "private URI exampleWithCustomSelectorSourceFactory;", "modifier": "private", "type": "URI", "declarator": "exampleWithCustomSelectorSourceFactory", "var_name": "exampleWithCustomSelectorSourceFactory"}], "file": "xenon-common/src/test/java/com/vmware/xenon/services/common/TestMigrationTaskService.java"}, "test_case": {"identifier": "successMigrateSameDocumentsTwiceUsingFallback", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void successMigrateSameDocumentsTwiceUsingFallback() throws Throwable {\n        // disable idempotent post on destination\n        for (VerificationHost host : destinationHost.getInProcessHostMap().values()) {\n            host.toggleServiceOptions(UriUtils.buildUri(host, ExampleService.FACTORY_LINK),\n                    null, EnumSet.of(ServiceOption.IDEMPOTENT_POST));\n        }\n        // create object in host\n        List<ExampleServiceState> states = createExampleDocuments(this.exampleSourceFactory, getSourceHost(),\n                this.serviceCount);\n\n        // start migration\n        MigrationTaskService.State migrationState = validMigrationState(\n                ExampleService.FACTORY_LINK);\n        migrationState.migrationOptions = EnumSet.of(MigrationOption.DELETE_AFTER);\n\n        Operation op = Operation.createPost(this.destinationFactoryUri)\n                .setBody(migrationState);\n        op = this.sender.sendAndWait(op);\n        String migrationTaskLink = op.getBody(State.class).documentSelfLink;\n\n        State waitForServiceCompletion = waitForServiceCompletion(migrationTaskLink,\n                getDestinationHost());\n        ServiceStats stats = getStats(migrationTaskLink, getDestinationHost());\n        Long processedDocuments = Long.valueOf((long) stats.entries.get(\n                MigrationTaskService.STAT_NAME_PROCESSED_DOCUMENTS).latestValue);\n        assertEquals(waitForServiceCompletion.taskInfo.stage, TaskStage.FINISHED);\n        assertEquals(Long.valueOf(this.serviceCount), processedDocuments);\n\n        // start second migration, which should use the DELETE -> POST logic since the documents already exist\n        for (int i = 0; i < this.iterationCount; i++) {\n            this.host.log(\"Start migration with pre-existing target documents (%d)\", i);\n            migrationState.documentSelfLink = null;\n            op = Operation.createPost(this.destinationFactoryUri)\n                    .setBody(migrationState);\n            op = this.sender.sendAndWait(op);\n            migrationTaskLink = op.getBody(State.class).documentSelfLink;\n            this.host.log(\"Created task %s\", migrationTaskLink);\n            waitForServiceCompletion = waitForServiceCompletion(migrationTaskLink,\n                    getDestinationHost());\n            assertEquals(TaskStage.FINISHED, waitForServiceCompletion.taskInfo.stage);\n            stats = getStats(migrationTaskLink, getDestinationHost());\n            processedDocuments = Long.valueOf((long) stats.entries\n                    .get(MigrationTaskService.STAT_NAME_PROCESSED_DOCUMENTS).latestValue);\n            assertEquals(Long.valueOf(this.serviceCount), processedDocuments);\n            stats = getStats(migrationTaskLink, getDestinationHost());\n            processedDocuments = Long.valueOf((long) stats.entries\n                    .get(MigrationTaskService.STAT_NAME_PROCESSED_DOCUMENTS).latestValue);\n        }\n\n        // check if object is in new host\n        List<URI> uris = getFullUri(getDestinationHost(), states);\n        getDestinationHost().getServiceState(EnumSet.noneOf(TestProperty.class),\n                ExampleServiceState.class, uris);\n    }", "signature": "void successMigrateSameDocumentsTwiceUsingFallback()", "full_signature": "@Test public void successMigrateSameDocumentsTwiceUsingFallback()", "class_method_signature": "TestMigrationTaskService.successMigrateSameDocumentsTwiceUsingFallback()", "testcase": true, "constructor": false, "invocations": ["values", "getInProcessHostMap", "toggleServiceOptions", "buildUri", "of", "createExampleDocuments", "getSourceHost", "validMigrationState", "of", "setBody", "createPost", "sendAndWait", "getBody", "waitForServiceCompletion", "getDestinationHost", "getStats", "getDestinationHost", "valueOf", "get", "assertEquals", "assertEquals", "valueOf", "log", "setBody", "createPost", "sendAndWait", "getBody", "log", "waitForServiceCompletion", "getDestinationHost", "assertEquals", "getStats", "getDestinationHost", "valueOf", "get", "assertEquals", "valueOf", "getStats", "getDestinationHost", "valueOf", "get", "getFullUri", "getDestinationHost", "getServiceState", "getDestinationHost", "noneOf"]}, "focal_class": {"identifier": "MigrationTaskService", "superclass": "extends StatefulService", "interfaces": "", "fields": [{"original_string": "public static final String STAT_NAME_PROCESSED_DOCUMENTS = \"processedServiceCount\";", "modifier": "public static final", "type": "String", "declarator": "STAT_NAME_PROCESSED_DOCUMENTS = \"processedServiceCount\"", "var_name": "STAT_NAME_PROCESSED_DOCUMENTS"}, {"original_string": "public static final String STAT_NAME_ESTIMATED_TOTAL_SERVICE_COUNT = \"estimatedTotalServiceCount\";", "modifier": "public static final", "type": "String", "declarator": "STAT_NAME_ESTIMATED_TOTAL_SERVICE_COUNT = \"estimatedTotalServiceCount\"", "var_name": "STAT_NAME_ESTIMATED_TOTAL_SERVICE_COUNT"}, {"original_string": "public static final String STAT_NAME_FETCHED_DOCUMENT_COUNT = \"fetchedDocumentCount\";", "modifier": "public static final", "type": "String", "declarator": "STAT_NAME_FETCHED_DOCUMENT_COUNT = \"fetchedDocumentCount\"", "var_name": "STAT_NAME_FETCHED_DOCUMENT_COUNT"}, {"original_string": "public static final String STAT_NAME_BEFORE_TRANSFORM_COUNT = \"beforeTransformDocumentCount\";", "modifier": "public static final", "type": "String", "declarator": "STAT_NAME_BEFORE_TRANSFORM_COUNT = \"beforeTransformDocumentCount\"", "var_name": "STAT_NAME_BEFORE_TRANSFORM_COUNT"}, {"original_string": "public static final String STAT_NAME_AFTER_TRANSFORM_COUNT = \"afterTransformDocumentCount\";", "modifier": "public static final", "type": "String", "declarator": "STAT_NAME_AFTER_TRANSFORM_COUNT = \"afterTransformDocumentCount\"", "var_name": "STAT_NAME_AFTER_TRANSFORM_COUNT"}, {"original_string": "public static final String STAT_NAME_DELETE_RETRY_COUNT = \"deleteRetryCount\";", "modifier": "public static final", "type": "String", "declarator": "STAT_NAME_DELETE_RETRY_COUNT = \"deleteRetryCount\"", "var_name": "STAT_NAME_DELETE_RETRY_COUNT"}, {"original_string": "public static final String STAT_NAME_DELETED_DOCUMENT_COUNT = \"deletedDocumentCount\";", "modifier": "public static final", "type": "String", "declarator": "STAT_NAME_DELETED_DOCUMENT_COUNT = \"deletedDocumentCount\"", "var_name": "STAT_NAME_DELETED_DOCUMENT_COUNT"}, {"original_string": "public static final String STAT_NAME_COUNT_QUERY_TIME_DURATION_MICRO = \"countQueryTimeDurationMicros\";", "modifier": "public static final", "type": "String", "declarator": "STAT_NAME_COUNT_QUERY_TIME_DURATION_MICRO = \"countQueryTimeDurationMicros\"", "var_name": "STAT_NAME_COUNT_QUERY_TIME_DURATION_MICRO"}, {"original_string": "public static final String STAT_NAME_RETRIEVAL_OPERATIONS_DURATION_MICRO = \"retrievalOperationsDurationMicros\";", "modifier": "public static final", "type": "String", "declarator": "STAT_NAME_RETRIEVAL_OPERATIONS_DURATION_MICRO = \"retrievalOperationsDurationMicros\"", "var_name": "STAT_NAME_RETRIEVAL_OPERATIONS_DURATION_MICRO"}, {"original_string": "public static final String STAT_NAME_RETRIEVAL_QUERY_TIME_DURATION_MICRO_FORMAT = \"retrievalQueryTimeDurationMicros-%s\";", "modifier": "public static final", "type": "String", "declarator": "STAT_NAME_RETRIEVAL_QUERY_TIME_DURATION_MICRO_FORMAT = \"retrievalQueryTimeDurationMicros-%s\"", "var_name": "STAT_NAME_RETRIEVAL_QUERY_TIME_DURATION_MICRO_FORMAT"}, {"original_string": "public static final String FACTORY_LINK = ServiceUriPaths.MIGRATION_TASKS;", "modifier": "public static final", "type": "String", "declarator": "FACTORY_LINK = ServiceUriPaths.MIGRATION_TASKS", "var_name": "FACTORY_LINK"}, {"original_string": "public static final Long DEFAULT_MAINTENANCE_INTERVAL_MILLIS = TimeUnit.MINUTES.toMicros(1);", "modifier": "public static final", "type": "Long", "declarator": "DEFAULT_MAINTENANCE_INTERVAL_MILLIS = TimeUnit.MINUTES.toMicros(1)", "var_name": "DEFAULT_MAINTENANCE_INTERVAL_MILLIS"}, {"original_string": "private static final Integer DEFAULT_PAGE_SIZE = 10_000;", "modifier": "private static final", "type": "Integer", "declarator": "DEFAULT_PAGE_SIZE = 10_000", "var_name": "DEFAULT_PAGE_SIZE"}, {"original_string": "private static final Integer DEFAULT_MAXIMUM_CONVERGENCE_CHECKS = 10;", "modifier": "private static final", "type": "Integer", "declarator": "DEFAULT_MAXIMUM_CONVERGENCE_CHECKS = 10", "var_name": "DEFAULT_MAXIMUM_CONVERGENCE_CHECKS"}, {"original_string": "private static final Object DUMMY_OBJECT = new Object();", "modifier": "private static final", "type": "Object", "declarator": "DUMMY_OBJECT = new Object()", "var_name": "DUMMY_OBJECT"}, {"original_string": "private static final boolean USE_FORWARD_ONLY_QUERY = XenonConfiguration.bool(\n            MigrationTaskService.class,\n            \"useForwardOnlyQuery\",\n            false\n    );", "modifier": "private static final", "type": "boolean", "declarator": "USE_FORWARD_ONLY_QUERY = XenonConfiguration.bool(\n            MigrationTaskService.class,\n            \"useForwardOnlyQuery\",\n            false\n    )", "var_name": "USE_FORWARD_ONLY_QUERY"}], "methods": [{"identifier": "createFactory", "parameters": "()", "modifiers": "public static", "return": "Service", "signature": "Service createFactory()", "full_signature": "public static Service createFactory()", "class_method_signature": "MigrationTaskService.createFactory()", "testcase": false, "constructor": false}, {"identifier": "MigrationTaskService", "parameters": "()", "modifiers": "public", "return": "", "signature": " MigrationTaskService()", "full_signature": "public  MigrationTaskService()", "class_method_signature": "MigrationTaskService.MigrationTaskService()", "testcase": false, "constructor": true}, {"identifier": "handleStart", "parameters": "(Operation startPost)", "modifiers": "@Override public", "return": "void", "signature": "void handleStart(Operation startPost)", "full_signature": "@Override public void handleStart(Operation startPost)", "class_method_signature": "MigrationTaskService.handleStart(Operation startPost)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(State initState)", "modifiers": "private", "return": "State", "signature": "State initialize(State initState)", "full_signature": "private State initialize(State initState)", "class_method_signature": "MigrationTaskService.initialize(State initState)", "testcase": false, "constructor": false}, {"identifier": "buildFieldClause", "parameters": "(State initState)", "modifiers": "private", "return": "Query", "signature": "Query buildFieldClause(State initState)", "full_signature": "private Query buildFieldClause(State initState)", "class_method_signature": "MigrationTaskService.buildFieldClause(State initState)", "testcase": false, "constructor": false}, {"identifier": "verifyState", "parameters": "(State state, Operation operation)", "modifiers": "private", "return": "boolean", "signature": "boolean verifyState(State state, Operation operation)", "full_signature": "private boolean verifyState(State state, Operation operation)", "class_method_signature": "MigrationTaskService.verifyState(State state, Operation operation)", "testcase": false, "constructor": false}, {"identifier": "handlePatch", "parameters": "(Operation patchOperation)", "modifiers": "@Override public", "return": "void", "signature": "void handlePatch(Operation patchOperation)", "full_signature": "@Override public void handlePatch(Operation patchOperation)", "class_method_signature": "MigrationTaskService.handlePatch(Operation patchOperation)", "testcase": false, "constructor": false}, {"identifier": "extractBaseUri", "parameters": "(NodeState state)", "modifiers": "private", "return": "URI", "signature": "URI extractBaseUri(NodeState state)", "full_signature": "private URI extractBaseUri(NodeState state)", "class_method_signature": "MigrationTaskService.extractBaseUri(NodeState state)", "testcase": false, "constructor": false}, {"identifier": "handleMaintenance", "parameters": "(Operation maintenanceOperation)", "modifiers": "@Override public", "return": "void", "signature": "void handleMaintenance(Operation maintenanceOperation)", "full_signature": "@Override public void handleMaintenance(Operation maintenanceOperation)", "class_method_signature": "MigrationTaskService.handleMaintenance(Operation maintenanceOperation)", "testcase": false, "constructor": false}, {"identifier": "findUpdateTimeMicrosRangeClause", "parameters": "(Query query)", "modifiers": "private", "return": "Query", "signature": "Query findUpdateTimeMicrosRangeClause(Query query)", "full_signature": "private Query findUpdateTimeMicrosRangeClause(Query query)", "class_method_signature": "MigrationTaskService.findUpdateTimeMicrosRangeClause(Query query)", "testcase": false, "constructor": false}, {"identifier": "resolveNodeGroupReferences", "parameters": "(State currentState)", "modifiers": "private", "return": "void", "signature": "void resolveNodeGroupReferences(State currentState)", "full_signature": "private void resolveNodeGroupReferences(State currentState)", "class_method_signature": "MigrationTaskService.resolveNodeGroupReferences(State currentState)", "testcase": false, "constructor": false}, {"identifier": "filterAvailableNodeUris", "parameters": "(NodeGroupState destinationGroup)", "modifiers": "private", "return": "List<URI>", "signature": "List<URI> filterAvailableNodeUris(NodeGroupState destinationGroup)", "full_signature": "private List<URI> filterAvailableNodeUris(NodeGroupState destinationGroup)", "class_method_signature": "MigrationTaskService.filterAvailableNodeUris(NodeGroupState destinationGroup)", "testcase": false, "constructor": false}, {"identifier": "waitUntilNodeGroupsAreStable", "parameters": "(State currentState, URI nodeGroupReference, int allowedConvergenceChecks, DeferredResult<Object> deferredResult)", "modifiers": "private", "return": "void", "signature": "void waitUntilNodeGroupsAreStable(State currentState, URI nodeGroupReference, int allowedConvergenceChecks, DeferredResult<Object> deferredResult)", "full_signature": "private void waitUntilNodeGroupsAreStable(State currentState, URI nodeGroupReference, int allowedConvergenceChecks, DeferredResult<Object> deferredResult)", "class_method_signature": "MigrationTaskService.waitUntilNodeGroupsAreStable(State currentState, URI nodeGroupReference, int allowedConvergenceChecks, DeferredResult<Object> deferredResult)", "testcase": false, "constructor": false}, {"identifier": "waitFactoryIsAvailable", "parameters": "(\n            State currentState, URI hostUri, String nodeSelectorPath, String factoryLink, int maxRetry, DeferredResult<Object> deferredResult)", "modifiers": "private", "return": "void", "signature": "void waitFactoryIsAvailable(\n            State currentState, URI hostUri, String nodeSelectorPath, String factoryLink, int maxRetry, DeferredResult<Object> deferredResult)", "full_signature": "private void waitFactoryIsAvailable(\n            State currentState, URI hostUri, String nodeSelectorPath, String factoryLink, int maxRetry, DeferredResult<Object> deferredResult)", "class_method_signature": "MigrationTaskService.waitFactoryIsAvailable(\n            State currentState, URI hostUri, String nodeSelectorPath, String factoryLink, int maxRetry, DeferredResult<Object> deferredResult)", "testcase": false, "constructor": false}, {"identifier": "waitNodeSelectorAreStable", "parameters": "(State currentState, List<URI> sourceURIs, String factoryLink, int maxRetry, DeferredResult<Object> deferredResult)", "modifiers": "private", "return": "void", "signature": "void waitNodeSelectorAreStable(State currentState, List<URI> sourceURIs, String factoryLink, int maxRetry, DeferredResult<Object> deferredResult)", "full_signature": "private void waitNodeSelectorAreStable(State currentState, List<URI> sourceURIs, String factoryLink, int maxRetry, DeferredResult<Object> deferredResult)", "class_method_signature": "MigrationTaskService.waitNodeSelectorAreStable(State currentState, List<URI> sourceURIs, String factoryLink, int maxRetry, DeferredResult<Object> deferredResult)", "testcase": false, "constructor": false}, {"identifier": "waitNodeSelectorAreStableRetry", "parameters": "(State currentState, List<URI> sourceURIs, int maxRetry, String peerNodeSelectorPath, DeferredResult<Object> deferredResult)", "modifiers": "private", "return": "void", "signature": "void waitNodeSelectorAreStableRetry(State currentState, List<URI> sourceURIs, int maxRetry, String peerNodeSelectorPath, DeferredResult<Object> deferredResult)", "full_signature": "private void waitNodeSelectorAreStableRetry(State currentState, List<URI> sourceURIs, int maxRetry, String peerNodeSelectorPath, DeferredResult<Object> deferredResult)", "class_method_signature": "MigrationTaskService.waitNodeSelectorAreStableRetry(State currentState, List<URI> sourceURIs, int maxRetry, String peerNodeSelectorPath, DeferredResult<Object> deferredResult)", "testcase": false, "constructor": false}, {"identifier": "computeFirstCurrentPageLinks", "parameters": "(State currentState, List<URI> sourceURIs, List<URI> destinationURIs)", "modifiers": "private", "return": "void", "signature": "void computeFirstCurrentPageLinks(State currentState, List<URI> sourceURIs, List<URI> destinationURIs)", "full_signature": "private void computeFirstCurrentPageLinks(State currentState, List<URI> sourceURIs, List<URI> destinationURIs)", "class_method_signature": "MigrationTaskService.computeFirstCurrentPageLinks(State currentState, List<URI> sourceURIs, List<URI> destinationURIs)", "testcase": false, "constructor": false}, {"identifier": "migrate", "parameters": "(State currentState, URI currentPageLink, List<URI> destinationURIs, long lastUpdateTime)", "modifiers": "private", "return": "void", "signature": "void migrate(State currentState, URI currentPageLink, List<URI> destinationURIs, long lastUpdateTime)", "full_signature": "private void migrate(State currentState, URI currentPageLink, List<URI> destinationURIs, long lastUpdateTime)", "class_method_signature": "MigrationTaskService.migrate(State currentState, URI currentPageLink, List<URI> destinationURIs, long lastUpdateTime)", "testcase": false, "constructor": false}, {"identifier": "retrieveAllVersions", "parameters": "(Collection<Object> results, URI hostUri,\n            URI nextPageLink, State currentState, List<URI> destinationURIs, long lastUpdateTime)", "modifiers": "private", "return": "void", "signature": "void retrieveAllVersions(Collection<Object> results, URI hostUri,\n            URI nextPageLink, State currentState, List<URI> destinationURIs, long lastUpdateTime)", "full_signature": "private void retrieveAllVersions(Collection<Object> results, URI hostUri,\n            URI nextPageLink, State currentState, List<URI> destinationURIs, long lastUpdateTime)", "class_method_signature": "MigrationTaskService.retrieveAllVersions(Collection<Object> results, URI hostUri,\n            URI nextPageLink, State currentState, List<URI> destinationURIs, long lastUpdateTime)", "testcase": false, "constructor": false}, {"identifier": "transformUsingMap", "parameters": "(State state, Collection<Object> cleanJson, URI nextPageLink, List<URI> destinationURIs, long lastUpdateTime)", "modifiers": "private", "return": "void", "signature": "void transformUsingMap(State state, Collection<Object> cleanJson, URI nextPageLink, List<URI> destinationURIs, long lastUpdateTime)", "full_signature": "private void transformUsingMap(State state, Collection<Object> cleanJson, URI nextPageLink, List<URI> destinationURIs, long lastUpdateTime)", "class_method_signature": "MigrationTaskService.transformUsingMap(State state, Collection<Object> cleanJson, URI nextPageLink, List<URI> destinationURIs, long lastUpdateTime)", "testcase": false, "constructor": false}, {"identifier": "transformUsingObject", "parameters": "(State state, Collection<Object> cleanJson, URI nextPageLink, List<URI> destinationURIs, long lastUpdateTime)", "modifiers": "private", "return": "void", "signature": "void transformUsingObject(State state, Collection<Object> cleanJson, URI nextPageLink, List<URI> destinationURIs, long lastUpdateTime)", "full_signature": "private void transformUsingObject(State state, Collection<Object> cleanJson, URI nextPageLink, List<URI> destinationURIs, long lastUpdateTime)", "class_method_signature": "MigrationTaskService.transformUsingObject(State state, Collection<Object> cleanJson, URI nextPageLink, List<URI> destinationURIs, long lastUpdateTime)", "testcase": false, "constructor": false}, {"identifier": "transformResults", "parameters": "(State state, Collection<Object> results, URI nextPageLink, List<URI> destinationURIs, long lastUpdateTime)", "modifiers": "private", "return": "void", "signature": "void transformResults(State state, Collection<Object> results, URI nextPageLink, List<URI> destinationURIs, long lastUpdateTime)", "full_signature": "private void transformResults(State state, Collection<Object> results, URI nextPageLink, List<URI> destinationURIs, long lastUpdateTime)", "class_method_signature": "MigrationTaskService.transformResults(State state, Collection<Object> results, URI nextPageLink, List<URI> destinationURIs, long lastUpdateTime)", "testcase": false, "constructor": false}, {"identifier": "migrateEntities", "parameters": "(Map<Object, String> json, State state, URI nextPageLink,\n            List<URI> destinationURIs, long lastUpdateTime)", "modifiers": "private", "return": "void", "signature": "void migrateEntities(Map<Object, String> json, State state, URI nextPageLink,\n            List<URI> destinationURIs, long lastUpdateTime)", "full_signature": "private void migrateEntities(Map<Object, String> json, State state, URI nextPageLink,\n            List<URI> destinationURIs, long lastUpdateTime)", "class_method_signature": "MigrationTaskService.migrateEntities(Map<Object, String> json, State state, URI nextPageLink,\n            List<URI> destinationURIs, long lastUpdateTime)", "testcase": false, "constructor": false}, {"identifier": "migrateEntitiesForAllVersions", "parameters": "(Map<Object, String> json, State state, URI nextPageLink,\n            List<URI> destinationURIs, long lastUpdateTime)", "modifiers": "private", "return": "void", "signature": "void migrateEntitiesForAllVersions(Map<Object, String> json, State state, URI nextPageLink,\n            List<URI> destinationURIs, long lastUpdateTime)", "full_signature": "private void migrateEntitiesForAllVersions(Map<Object, String> json, State state, URI nextPageLink,\n            List<URI> destinationURIs, long lastUpdateTime)", "class_method_signature": "MigrationTaskService.migrateEntitiesForAllVersions(Map<Object, String> json, State state, URI nextPageLink,\n            List<URI> destinationURIs, long lastUpdateTime)", "testcase": false, "constructor": false}, {"identifier": "retryMigrateEntitiesForAllVersions", "parameters": "(Set<String> failedSelfLinks, Map<String, SortedSet<Object>> docsBySelfLink,\n            Map<String, String> factoryLinkBySelfLink, int numOfProcessedDoc, State state, URI nextPageLink,\n            List<URI> destinationURIs, long lastUpdateTime)", "modifiers": "private", "return": "void", "signature": "void retryMigrateEntitiesForAllVersions(Set<String> failedSelfLinks, Map<String, SortedSet<Object>> docsBySelfLink,\n            Map<String, String> factoryLinkBySelfLink, int numOfProcessedDoc, State state, URI nextPageLink,\n            List<URI> destinationURIs, long lastUpdateTime)", "full_signature": "private void retryMigrateEntitiesForAllVersions(Set<String> failedSelfLinks, Map<String, SortedSet<Object>> docsBySelfLink,\n            Map<String, String> factoryLinkBySelfLink, int numOfProcessedDoc, State state, URI nextPageLink,\n            List<URI> destinationURIs, long lastUpdateTime)", "class_method_signature": "MigrationTaskService.retryMigrateEntitiesForAllVersions(Set<String> failedSelfLinks, Map<String, SortedSet<Object>> docsBySelfLink,\n            Map<String, String> factoryLinkBySelfLink, int numOfProcessedDoc, State state, URI nextPageLink,\n            List<URI> destinationURIs, long lastUpdateTime)", "testcase": false, "constructor": false}, {"identifier": "migrateEntitiesForSingleVersion", "parameters": "(Map<Object, String> json, State state, URI nextPageLink,\n            List<URI> destinationURIs, long lastUpdateTime)", "modifiers": "private", "return": "void", "signature": "void migrateEntitiesForSingleVersion(Map<Object, String> json, State state, URI nextPageLink,\n            List<URI> destinationURIs, long lastUpdateTime)", "full_signature": "private void migrateEntitiesForSingleVersion(Map<Object, String> json, State state, URI nextPageLink,\n            List<URI> destinationURIs, long lastUpdateTime)", "class_method_signature": "MigrationTaskService.migrateEntitiesForSingleVersion(Map<Object, String> json, State state, URI nextPageLink,\n            List<URI> destinationURIs, long lastUpdateTime)", "testcase": false, "constructor": false}, {"identifier": "createRetryMigrateOpsWithAllVersions", "parameters": "(State currentState, URI destinationUri,\n            String factoryLink, String selfLink, SortedSet<Object> docs)", "modifiers": "private", "return": "List<Operation>", "signature": "List<Operation> createRetryMigrateOpsWithAllVersions(State currentState, URI destinationUri,\n            String factoryLink, String selfLink, SortedSet<Object> docs)", "full_signature": "private List<Operation> createRetryMigrateOpsWithAllVersions(State currentState, URI destinationUri,\n            String factoryLink, String selfLink, SortedSet<Object> docs)", "class_method_signature": "MigrationTaskService.createRetryMigrateOpsWithAllVersions(State currentState, URI destinationUri,\n            String factoryLink, String selfLink, SortedSet<Object> docs)", "testcase": false, "constructor": false}, {"identifier": "createMigrateOpsWithAllVersions", "parameters": "(State currentState, URI destinationUri, String factoryLink,\n            String selfLink, SortedSet<Object> sortedDocs)", "modifiers": "private", "return": "List<Operation>", "signature": "List<Operation> createMigrateOpsWithAllVersions(State currentState, URI destinationUri, String factoryLink,\n            String selfLink, SortedSet<Object> sortedDocs)", "full_signature": "private List<Operation> createMigrateOpsWithAllVersions(State currentState, URI destinationUri, String factoryLink,\n            String selfLink, SortedSet<Object> sortedDocs)", "class_method_signature": "MigrationTaskService.createMigrateOpsWithAllVersions(State currentState, URI destinationUri, String factoryLink,\n            String selfLink, SortedSet<Object> sortedDocs)", "testcase": false, "constructor": false}, {"identifier": "patchToFinished", "parameters": "(Long lastUpdateTime)", "modifiers": "private", "return": "void", "signature": "void patchToFinished(Long lastUpdateTime)", "full_signature": "private void patchToFinished(Long lastUpdateTime)", "class_method_signature": "MigrationTaskService.patchToFinished(Long lastUpdateTime)", "testcase": false, "constructor": false}, {"identifier": "useFallBack", "parameters": "(State state, Map<Operation, Object> posts, Map<Long, Throwable> operationFailures, URI nextPageLink, List<URI> destinationURIs, long lastUpdateTime)", "modifiers": "private", "return": "void", "signature": "void useFallBack(State state, Map<Operation, Object> posts, Map<Long, Throwable> operationFailures, URI nextPageLink, List<URI> destinationURIs, long lastUpdateTime)", "full_signature": "private void useFallBack(State state, Map<Operation, Object> posts, Map<Long, Throwable> operationFailures, URI nextPageLink, List<URI> destinationURIs, long lastUpdateTime)", "class_method_signature": "MigrationTaskService.useFallBack(State state, Map<Operation, Object> posts, Map<Long, Throwable> operationFailures, URI nextPageLink, List<URI> destinationURIs, long lastUpdateTime)", "testcase": false, "constructor": false}, {"identifier": "getFailedOperations", "parameters": "(Map<Operation, Object> posts, Set<Long> failedOpIds)", "modifiers": "private", "return": "Map<URI, Operation>", "signature": "Map<URI, Operation> getFailedOperations(Map<Operation, Object> posts, Set<Long> failedOpIds)", "full_signature": "private Map<URI, Operation> getFailedOperations(Map<Operation, Object> posts, Set<Long> failedOpIds)", "class_method_signature": "MigrationTaskService.getFailedOperations(Map<Operation, Object> posts, Set<Long> failedOpIds)", "testcase": false, "constructor": false}, {"identifier": "createDelete", "parameters": "(URI uri, State currentState)", "modifiers": "private static", "return": "Operation", "signature": "Operation createDelete(URI uri, State currentState)", "full_signature": "private static Operation createDelete(URI uri, State currentState)", "class_method_signature": "MigrationTaskService.createDelete(URI uri, State currentState)", "testcase": false, "constructor": false}, {"identifier": "createGet", "parameters": "(URI uri, State currentState)", "modifiers": "private static", "return": "Operation", "signature": "Operation createGet(URI uri, State currentState)", "full_signature": "private static Operation createGet(URI uri, State currentState)", "class_method_signature": "MigrationTaskService.createGet(URI uri, State currentState)", "testcase": false, "constructor": false}, {"identifier": "createPatch", "parameters": "(URI uri, State currentState)", "modifiers": "private static", "return": "Operation", "signature": "Operation createPatch(URI uri, State currentState)", "full_signature": "private static Operation createPatch(URI uri, State currentState)", "class_method_signature": "MigrationTaskService.createPatch(URI uri, State currentState)", "testcase": false, "constructor": false}, {"identifier": "createPost", "parameters": "(URI uri, State currentState)", "modifiers": "private static", "return": "Operation", "signature": "Operation createPost(URI uri, State currentState)", "full_signature": "private static Operation createPost(URI uri, State currentState)", "class_method_signature": "MigrationTaskService.createPost(URI uri, State currentState)", "testcase": false, "constructor": false}, {"identifier": "createPut", "parameters": "(URI uri, State currentState)", "modifiers": "private static", "return": "Operation", "signature": "Operation createPut(URI uri, State currentState)", "full_signature": "private static Operation createPut(URI uri, State currentState)", "class_method_signature": "MigrationTaskService.createPut(URI uri, State currentState)", "testcase": false, "constructor": false}, {"identifier": "prepareOp", "parameters": "(Operation op, State currentState)", "modifiers": "private static", "return": "Operation", "signature": "Operation prepareOp(Operation op, State currentState)", "full_signature": "private static Operation prepareOp(Operation op, State currentState)", "class_method_signature": "MigrationTaskService.prepareOp(Operation op, State currentState)", "testcase": false, "constructor": false}, {"identifier": "createDeleteOperations", "parameters": "(State currentState, Collection<URI> uris)", "modifiers": "private", "return": "Collection<Operation>", "signature": "Collection<Operation> createDeleteOperations(State currentState, Collection<URI> uris)", "full_signature": "private Collection<Operation> createDeleteOperations(State currentState, Collection<URI> uris)", "class_method_signature": "MigrationTaskService.createDeleteOperations(State currentState, Collection<URI> uris)", "testcase": false, "constructor": false}, {"identifier": "createPostOperations", "parameters": "(State currentState, Map<URI, Operation> failedOps,\n            Map<Operation, Object> posts)", "modifiers": "private", "return": "Collection<Operation>", "signature": "Collection<Operation> createPostOperations(State currentState, Map<URI, Operation> failedOps,\n            Map<Operation, Object> posts)", "full_signature": "private Collection<Operation> createPostOperations(State currentState, Map<URI, Operation> failedOps,\n            Map<Operation, Object> posts)", "class_method_signature": "MigrationTaskService.createPostOperations(State currentState, Map<URI, Operation> failedOps,\n            Map<Operation, Object> posts)", "testcase": false, "constructor": false}, {"identifier": "verifyPatchedState", "parameters": "(State state, Operation operation)", "modifiers": "private", "return": "boolean", "signature": "boolean verifyPatchedState(State state, Operation operation)", "full_signature": "private boolean verifyPatchedState(State state, Operation operation)", "class_method_signature": "MigrationTaskService.verifyPatchedState(State state, Operation operation)", "testcase": false, "constructor": false}, {"identifier": "applyPatch", "parameters": "(State patchState, State currentState)", "modifiers": "private", "return": "State", "signature": "State applyPatch(State patchState, State currentState)", "full_signature": "private State applyPatch(State patchState, State currentState)", "class_method_signature": "MigrationTaskService.applyPatch(State patchState, State currentState)", "testcase": false, "constructor": false}, {"identifier": "removeFactoryPathFromSelfLink", "parameters": "(Object jsonObject, String factoryPath)", "modifiers": "private", "return": "Object", "signature": "Object removeFactoryPathFromSelfLink(Object jsonObject, String factoryPath)", "full_signature": "private Object removeFactoryPathFromSelfLink(Object jsonObject, String factoryPath)", "class_method_signature": "MigrationTaskService.removeFactoryPathFromSelfLink(Object jsonObject, String factoryPath)", "testcase": false, "constructor": false}, {"identifier": "extractId", "parameters": "(Object jsonObject, String factoryPath)", "modifiers": "private", "return": "String", "signature": "String extractId(Object jsonObject, String factoryPath)", "full_signature": "private String extractId(Object jsonObject, String factoryPath)", "class_method_signature": "MigrationTaskService.extractId(Object jsonObject, String factoryPath)", "testcase": false, "constructor": false}, {"identifier": "selectRandomUri", "parameters": "(Collection<URI> uris)", "modifiers": "private", "return": "URI", "signature": "URI selectRandomUri(Collection<URI> uris)", "full_signature": "private URI selectRandomUri(Collection<URI> uris)", "class_method_signature": "MigrationTaskService.selectRandomUri(Collection<URI> uris)", "testcase": false, "constructor": false}, {"identifier": "addSlash", "parameters": "(String string)", "modifiers": "private", "return": "String", "signature": "String addSlash(String string)", "full_signature": "private String addSlash(String string)", "class_method_signature": "MigrationTaskService.addSlash(String string)", "testcase": false, "constructor": false}, {"identifier": "getNextPageLinkUri", "parameters": "(Operation operation)", "modifiers": "private", "return": "URI", "signature": "URI getNextPageLinkUri(Operation operation)", "full_signature": "private URI getNextPageLinkUri(Operation operation)", "class_method_signature": "MigrationTaskService.getNextPageLinkUri(Operation operation)", "testcase": false, "constructor": false}, {"identifier": "getHostUri", "parameters": "(Operation operation)", "modifiers": "private", "return": "URI", "signature": "URI getHostUri(Operation operation)", "full_signature": "private URI getHostUri(Operation operation)", "class_method_signature": "MigrationTaskService.getHostUri(Operation operation)", "testcase": false, "constructor": false}, {"identifier": "failTask", "parameters": "(Throwable t)", "modifiers": "private", "return": "void", "signature": "void failTask(Throwable t)", "full_signature": "private void failTask(Throwable t)", "class_method_signature": "MigrationTaskService.failTask(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "failTask", "parameters": "(Collection<Throwable> ts)", "modifiers": "private", "return": "void", "signature": "void failTask(Collection<Throwable> ts)", "full_signature": "private void failTask(Collection<Throwable> ts)", "class_method_signature": "MigrationTaskService.failTask(Collection<Throwable> ts)", "testcase": false, "constructor": false}, {"identifier": "getSingleBinTimeSeriesStat", "parameters": "(String statName)", "modifiers": "private", "return": "ServiceStat", "signature": "ServiceStat getSingleBinTimeSeriesStat(String statName)", "full_signature": "private ServiceStat getSingleBinTimeSeriesStat(String statName)", "class_method_signature": "MigrationTaskService.getSingleBinTimeSeriesStat(String statName)", "testcase": false, "constructor": false}], "file": "xenon-common/src/main/java/com/vmware/xenon/services/common/MigrationTaskService.java"}, "focal_method": {"identifier": "createPost", "parameters": "(URI uri, State currentState)", "modifiers": "private static", "return": "Operation", "body": "private static Operation createPost(URI uri, State currentState) {\n        Operation op = Operation.createPost(uri);\n        return prepareOp(op, currentState);\n    }", "signature": "Operation createPost(URI uri, State currentState)", "full_signature": "private static Operation createPost(URI uri, State currentState)", "class_method_signature": "MigrationTaskService.createPost(URI uri, State currentState)", "testcase": false, "constructor": false, "invocations": ["createPost", "prepareOp"]}, "repository": {"repo_id": 45276846, "url": "https://github.com/vmware-archive/xenon", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 226, "size": 52010, "license": "licensed"}}