{"test_class": {"identifier": "RuleDatabaseItemUpdateRunnableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Context mockContext;", "modifier": "private", "type": "Context", "declarator": "mockContext", "var_name": "mockContext"}, {"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private SingleWriterMultipleReaderFile singleWriterMultipleReaderFile;", "modifier": "private", "type": "SingleWriterMultipleReaderFile", "declarator": "singleWriterMultipleReaderFile", "var_name": "singleWriterMultipleReaderFile"}, {"original_string": "private HttpURLConnection connection;", "modifier": "private", "type": "HttpURLConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private CountingAnswer finishAnswer;", "modifier": "private", "type": "CountingAnswer", "declarator": "finishAnswer", "var_name": "finishAnswer"}, {"original_string": "private CountingAnswer failAnswer;", "modifier": "private", "type": "CountingAnswer", "declarator": "failAnswer", "var_name": "failAnswer"}, {"original_string": "private URL url;", "modifier": "private", "type": "URL", "declarator": "url", "var_name": "url"}, {"original_string": "private RuleDatabaseUpdateTask realTask;", "modifier": "private", "type": "RuleDatabaseUpdateTask", "declarator": "realTask", "var_name": "realTask"}, {"original_string": "private RuleDatabaseUpdateTask mockTask;", "modifier": "private", "type": "RuleDatabaseUpdateTask", "declarator": "mockTask", "var_name": "mockTask"}, {"original_string": "private ContentResolver mockResolver;", "modifier": "private", "type": "ContentResolver", "declarator": "mockResolver", "var_name": "mockResolver"}], "file": "app/src/test/java/org/jak_linux/dns66/db/RuleDatabaseItemUpdateRunnableTest.java"}, "test_case": {"identifier": "testValidateResponse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateResponse() throws Exception {\n        RuleDatabaseItemUpdateRunnable itemUpdateRunnable = new RuleDatabaseItemUpdateRunnable(realTask, mockContext, mock(Configuration.Item.class));\n\n        Resources resources = mock(Resources.class);\n        when(mockContext.getResources()).thenReturn(resources);\n        when(resources.getString(anyInt(), anyString(), anyInt(), anyString())).thenReturn(\"%s %s %s\");\n\n        when(connection.getResponseCode()).thenReturn(200);\n        assertTrue(\"200 is OK\", itemUpdateRunnable.validateResponse(connection));\n        assertEquals(0, realTask.errors.size());\n\n        when(connection.getResponseCode()).thenReturn(404);\n        assertFalse(\"404 is not OK\", itemUpdateRunnable.validateResponse(connection));\n        assertEquals(1, realTask.errors.size());\n\n        when(connection.getResponseCode()).thenReturn(304);\n        assertFalse(\"304 is not OK\", itemUpdateRunnable.validateResponse(connection));\n        assertEquals(1, realTask.errors.size());\n    }", "signature": "void testValidateResponse()", "full_signature": "@Test public void testValidateResponse()", "class_method_signature": "RuleDatabaseItemUpdateRunnableTest.testValidateResponse()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getResources", "thenReturn", "when", "getString", "anyInt", "anyString", "anyInt", "anyString", "thenReturn", "when", "getResponseCode", "assertTrue", "validateResponse", "assertEquals", "size", "thenReturn", "when", "getResponseCode", "assertFalse", "validateResponse", "assertEquals", "size", "thenReturn", "when", "getResponseCode", "assertFalse", "validateResponse", "assertEquals", "size"]}, "focal_class": {"identifier": "RuleDatabaseItemUpdateRunnable", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final int CONNECT_TIMEOUT_MILLIS = 30000;", "modifier": "private static final", "type": "int", "declarator": "CONNECT_TIMEOUT_MILLIS = 30000", "var_name": "CONNECT_TIMEOUT_MILLIS"}, {"original_string": "private static final int READ_TIMEOUT_MILLIS = 10000;", "modifier": "private static final", "type": "int", "declarator": "READ_TIMEOUT_MILLIS = 10000", "var_name": "READ_TIMEOUT_MILLIS"}, {"original_string": "private static final String TAG = \"RuleDbItemUpdate\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"RuleDbItemUpdate\"", "var_name": "TAG"}, {"original_string": "RuleDatabaseUpdateTask parentTask;", "modifier": "", "type": "RuleDatabaseUpdateTask", "declarator": "parentTask", "var_name": "parentTask"}, {"original_string": "Configuration.Item item;", "modifier": "", "type": "Configuration.Item", "declarator": "item", "var_name": "item"}, {"original_string": "Context context;", "modifier": "", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private URL url;", "modifier": "private", "type": "URL", "declarator": "url", "var_name": "url"}, {"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}], "methods": [{"identifier": "RuleDatabaseItemUpdateRunnable", "parameters": "(@NonNull RuleDatabaseUpdateTask parentTask, @NonNull Context context, @NonNull Configuration.Item item)", "modifiers": "", "return": "", "signature": " RuleDatabaseItemUpdateRunnable(@NonNull RuleDatabaseUpdateTask parentTask, @NonNull Context context, @NonNull Configuration.Item item)", "full_signature": "  RuleDatabaseItemUpdateRunnable(@NonNull RuleDatabaseUpdateTask parentTask, @NonNull Context context, @NonNull Configuration.Item item)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.RuleDatabaseItemUpdateRunnable(@NonNull RuleDatabaseUpdateTask parentTask, @NonNull Context context, @NonNull Configuration.Item item)", "testcase": false, "constructor": true}, {"identifier": "shouldDownload", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean shouldDownload()", "full_signature": " boolean shouldDownload()", "class_method_signature": "RuleDatabaseItemUpdateRunnable.shouldDownload()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "RuleDatabaseItemUpdateRunnable.run()", "testcase": false, "constructor": false}, {"identifier": "parseUri", "parameters": "(String uri)", "modifiers": "", "return": "Uri", "signature": "Uri parseUri(String uri)", "full_signature": " Uri parseUri(String uri)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.parseUri(String uri)", "testcase": false, "constructor": false}, {"identifier": "getHttpURLConnection", "parameters": "(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, URL url)", "modifiers": "@NonNull", "return": "HttpURLConnection", "signature": "HttpURLConnection getHttpURLConnection(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, URL url)", "full_signature": "@NonNull HttpURLConnection getHttpURLConnection(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, URL url)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.getHttpURLConnection(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, URL url)", "testcase": false, "constructor": false}, {"identifier": "internalOpenHttpConnection", "parameters": "(URL url)", "modifiers": "", "return": "HttpURLConnection", "signature": "HttpURLConnection internalOpenHttpConnection(URL url)", "full_signature": " HttpURLConnection internalOpenHttpConnection(URL url)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.internalOpenHttpConnection(URL url)", "testcase": false, "constructor": false}, {"identifier": "validateResponse", "parameters": "(HttpURLConnection connection)", "modifiers": "", "return": "boolean", "signature": "boolean validateResponse(HttpURLConnection connection)", "full_signature": " boolean validateResponse(HttpURLConnection connection)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.validateResponse(HttpURLConnection connection)", "testcase": false, "constructor": false}, {"identifier": "downloadFile", "parameters": "(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "modifiers": "", "return": "void", "signature": "void downloadFile(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "full_signature": " void downloadFile(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.downloadFile(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "testcase": false, "constructor": false}, {"identifier": "copyStream", "parameters": "(InputStream inStream, OutputStream outStream)", "modifiers": "", "return": "void", "signature": "void copyStream(InputStream inStream, OutputStream outStream)", "full_signature": " void copyStream(InputStream inStream, OutputStream outStream)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.copyStream(InputStream inStream, OutputStream outStream)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/jak_linux/dns66/db/RuleDatabaseItemUpdateRunnable.java"}, "focal_method": {"identifier": "validateResponse", "parameters": "(HttpURLConnection connection)", "modifiers": "", "return": "boolean", "body": "boolean validateResponse(HttpURLConnection connection) throws IOException {\n        Log.d(TAG, \"validateResponse: \" + item.title + \": local = \" + new Date(connection.getIfModifiedSince()) + \" remote = \" + new Date(connection.getLastModified()));\n        if (connection.getResponseCode() != 200) {\n            Log.d(TAG, \"validateResponse: \" + item.title + \": Skipping: Server responded with \" + connection.getResponseCode() + \" for \" + item.location);\n\n            if (connection.getResponseCode() == 404) {\n                parentTask.addError(item, context.getString(R.string.file_not_found));\n            } else if (connection.getResponseCode() != 304) {\n                context.getResources().getString(R.string.host_update_error_item);\n                parentTask.addError(item, context.getResources().getString(R.string.host_update_error_item, connection.getResponseCode(), connection.getResponseMessage()));\n            }\n            return false;\n        }\n        return true;\n    }", "signature": "boolean validateResponse(HttpURLConnection connection)", "full_signature": " boolean validateResponse(HttpURLConnection connection)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.validateResponse(HttpURLConnection connection)", "testcase": false, "constructor": false, "invocations": ["d", "getIfModifiedSince", "getLastModified", "getResponseCode", "d", "getResponseCode", "getResponseCode", "addError", "getString", "getResponseCode", "getString", "getResources", "addError", "getString", "getResources", "getResponseCode", "getResponseMessage"]}, "repository": {"repo_id": 70996010, "url": "https://github.com/julian-klode/dns66", "stars": 1372, "created": "10/15/2016 3:27:17 PM +00:00", "updates": "2020-01-26T10:51:30+00:00", "fork": "False", "license": "licensed"}}