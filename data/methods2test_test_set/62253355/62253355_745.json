{"test_class": {"identifier": "AuthRestTest", "superclass": "extends MobiRestTestNg", "interfaces": "", "fields": [{"original_string": "private NewCookie authCookie;", "modifier": "private", "type": "NewCookie", "declarator": "authCookie", "var_name": "authCookie"}, {"original_string": "private NewCookie unauthCookie;", "modifier": "private", "type": "NewCookie", "declarator": "unauthCookie", "var_name": "unauthCookie"}, {"original_string": "private static final String TOKEN_STRING = \"token\";", "modifier": "private static final", "type": "String", "declarator": "TOKEN_STRING = \"token\"", "var_name": "TOKEN_STRING"}, {"original_string": "private static final String ERROR = \"error\";", "modifier": "private static final", "type": "String", "declarator": "ERROR = \"error\"", "var_name": "ERROR"}, {"original_string": "private static final String ANON = \"anon\";", "modifier": "private static final", "type": "String", "declarator": "ANON = \"anon\"", "var_name": "ANON"}, {"original_string": "private static final String USERNAME = \"username\";", "modifier": "private static final", "type": "String", "declarator": "USERNAME = \"username\"", "var_name": "USERNAME"}, {"original_string": "private static final String PASSWORD = \"password\";", "modifier": "private static final", "type": "String", "declarator": "PASSWORD = \"password\"", "var_name": "PASSWORD"}, {"original_string": "private static final String VALID_USER = \"{\\\"sub\\\": \\\"\" + USERNAME + \"\\\"}\";", "modifier": "private static final", "type": "String", "declarator": "VALID_USER = \"{\\\"sub\\\": \\\"\" + USERNAME + \"\\\"}\"", "var_name": "VALID_USER"}, {"original_string": "private static final String ANON_USER = \"{\\\"sub\\\": \\\"\" + ANON + \"\\\"}\";", "modifier": "private static final", "type": "String", "declarator": "ANON_USER = \"{\\\"sub\\\": \\\"\" + ANON + \"\\\"}\"", "var_name": "ANON_USER"}, {"original_string": "private static final String TOKEN_NAME = \"mobi_web_token\";", "modifier": "private static final", "type": "String", "declarator": "TOKEN_NAME = \"mobi_web_token\"", "var_name": "TOKEN_NAME"}, {"original_string": "private EngineManager engineManager;", "modifier": "private", "type": "EngineManager", "declarator": "engineManager", "var_name": "engineManager"}, {"original_string": "private MobiConfiguration mobiConfiguration;", "modifier": "private", "type": "MobiConfiguration", "declarator": "mobiConfiguration", "var_name": "mobiConfiguration"}, {"original_string": "private TokenManager tokenManager;", "modifier": "private", "type": "TokenManager", "declarator": "tokenManager", "var_name": "tokenManager"}, {"original_string": "private SignedJWT signedJWT;", "modifier": "private", "type": "SignedJWT", "declarator": "signedJWT", "var_name": "signedJWT"}, {"original_string": "private SignedJWT unauthSignedJWT;", "modifier": "private", "type": "SignedJWT", "declarator": "unauthSignedJWT", "var_name": "unauthSignedJWT"}, {"original_string": "private Role requiredRole;", "modifier": "private", "type": "Role", "declarator": "requiredRole", "var_name": "requiredRole"}, {"original_string": "private Role otherRole;", "modifier": "private", "type": "Role", "declarator": "otherRole", "var_name": "otherRole"}, {"original_string": "private User user;", "modifier": "private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "private Literal usernameLit;", "modifier": "private", "type": "Literal", "declarator": "usernameLit", "var_name": "usernameLit"}], "file": "com.mobi.jaas.rest/src/test/java/com/mobi/jaas/rest/AuthRestTest.java"}, "test_case": {"identifier": "getCurrentUserTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getCurrentUserTest() throws Exception {\n        Response response = target().path(\"session\").request().get();\n        assertEquals(response.getStatus(), 200);\n        verify(tokenManager).getTokenString(any(ContainerRequestContext.class));\n        verify(tokenManager).verifyToken(TOKEN_STRING);\n        verify(tokenManager, never()).generateUnauthToken();\n        Map<String, NewCookie> cookies = response.getCookies();\n        assertEquals(0, cookies.size());\n        try {\n            JSONObject result = JSONObject.fromObject(response.readEntity(String.class));\n            assertEquals(removeWhitespace(VALID_USER), removeWhitespace(result.toString()));\n        } catch (Exception e) {\n            fail(\"Expected no exception, but got: \" + e.getMessage());\n        }\n    }", "signature": "void getCurrentUserTest()", "full_signature": "@Test public void getCurrentUserTest()", "class_method_signature": "AuthRestTest.getCurrentUserTest()", "testcase": true, "constructor": false, "invocations": ["get", "request", "path", "target", "assertEquals", "getStatus", "getTokenString", "verify", "any", "verifyToken", "verify", "generateUnauthToken", "verify", "never", "getCookies", "assertEquals", "size", "fromObject", "readEntity", "assertEquals", "removeWhitespace", "removeWhitespace", "toString", "fail", "getMessage"]}, "focal_class": {"identifier": "AuthRest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String REQUIRED_ROLE = \"user\";", "modifier": "static final", "type": "String", "declarator": "REQUIRED_ROLE = \"user\"", "var_name": "REQUIRED_ROLE"}, {"original_string": "private final Logger log = LoggerFactory.getLogger(this.getClass().getName());", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(this.getClass().getName())", "var_name": "log"}, {"original_string": "private EngineManager engineManager;", "modifier": "private", "type": "EngineManager", "declarator": "engineManager", "var_name": "engineManager"}, {"original_string": "private MobiConfiguration configuration;", "modifier": "private", "type": "MobiConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private TokenManager tokenManager;", "modifier": "private", "type": "TokenManager", "declarator": "tokenManager", "var_name": "tokenManager"}], "methods": [{"identifier": "setEngineManager", "parameters": "(EngineManager engineManager)", "modifiers": "@Reference", "return": "void", "signature": "void setEngineManager(EngineManager engineManager)", "full_signature": "@Reference void setEngineManager(EngineManager engineManager)", "class_method_signature": "AuthRest.setEngineManager(EngineManager engineManager)", "testcase": false, "constructor": false}, {"identifier": "setConfiguration", "parameters": "(MobiConfiguration configuration)", "modifiers": "@Reference", "return": "void", "signature": "void setConfiguration(MobiConfiguration configuration)", "full_signature": "@Reference void setConfiguration(MobiConfiguration configuration)", "class_method_signature": "AuthRest.setConfiguration(MobiConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "setTokenManager", "parameters": "(TokenManager tokenManager)", "modifiers": "@Reference", "return": "void", "signature": "void setTokenManager(TokenManager tokenManager)", "full_signature": "@Reference void setTokenManager(TokenManager tokenManager)", "class_method_signature": "AuthRest.setTokenManager(TokenManager tokenManager)", "testcase": false, "constructor": false}, {"identifier": "getCurrentUser", "parameters": "(@Context ContainerRequestContext context)", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) @ApiOperation(\"Gets the current user token\") public", "return": "Response", "signature": "Response getCurrentUser(@Context ContainerRequestContext context)", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) @ApiOperation(\"Gets the current user token\") public Response getCurrentUser(@Context ContainerRequestContext context)", "class_method_signature": "AuthRest.getCurrentUser(@Context ContainerRequestContext context)", "testcase": false, "constructor": false}, {"identifier": "login", "parameters": "(@Context ContainerRequestContext context,\n                   @QueryParam(\"username\") String username,\n                   @QueryParam(\"password\") String password)", "modifiers": "@POST @Produces(MediaType.APPLICATION_JSON) @ApiOperation(\"Logs in into Mobi creating a new token\") public", "return": "Response", "signature": "Response login(@Context ContainerRequestContext context,\n                   @QueryParam(\"username\") String username,\n                   @QueryParam(\"password\") String password)", "full_signature": "@POST @Produces(MediaType.APPLICATION_JSON) @ApiOperation(\"Logs in into Mobi creating a new token\") public Response login(@Context ContainerRequestContext context,\n                   @QueryParam(\"username\") String username,\n                   @QueryParam(\"password\") String password)", "class_method_signature": "AuthRest.login(@Context ContainerRequestContext context,\n                   @QueryParam(\"username\") String username,\n                   @QueryParam(\"password\") String password)", "testcase": false, "constructor": false}, {"identifier": "logout", "parameters": "()", "modifiers": "@DELETE @Produces(MediaType.APPLICATION_JSON) @ApiOperation(\"Logs out of Mobi by setting unauth token\") public", "return": "Response", "signature": "Response logout()", "full_signature": "@DELETE @Produces(MediaType.APPLICATION_JSON) @ApiOperation(\"Logs out of Mobi by setting unauth token\") public Response logout()", "class_method_signature": "AuthRest.logout()", "testcase": false, "constructor": false}, {"identifier": "createResponse", "parameters": "(SignedJWT token)", "modifiers": "private", "return": "Response", "signature": "Response createResponse(SignedJWT token)", "full_signature": "private Response createResponse(SignedJWT token)", "class_method_signature": "AuthRest.createResponse(SignedJWT token)", "testcase": false, "constructor": false}, {"identifier": "authenticated", "parameters": "(String username, String password)", "modifiers": "private", "return": "boolean", "signature": "boolean authenticated(String username, String password)", "full_signature": "private boolean authenticated(String username, String password)", "class_method_signature": "AuthRest.authenticated(String username, String password)", "testcase": false, "constructor": false}, {"identifier": "processBasicAuth", "parameters": "(ContainerRequestContext context)", "modifiers": "private", "return": "Optional<UserCredentials>", "signature": "Optional<UserCredentials> processBasicAuth(ContainerRequestContext context)", "full_signature": "private Optional<UserCredentials> processBasicAuth(ContainerRequestContext context)", "class_method_signature": "AuthRest.processBasicAuth(ContainerRequestContext context)", "testcase": false, "constructor": false}, {"identifier": "processFormAuth", "parameters": "(String username, String password)", "modifiers": "private", "return": "Optional<UserCredentials>", "signature": "Optional<UserCredentials> processFormAuth(String username, String password)", "full_signature": "private Optional<UserCredentials> processFormAuth(String username, String password)", "class_method_signature": "AuthRest.processFormAuth(String username, String password)", "testcase": false, "constructor": false}, {"identifier": "doAuthenticate", "parameters": "(final String username, final String password)", "modifiers": "private", "return": "Optional<Subject>", "signature": "Optional<Subject> doAuthenticate(final String username, final String password)", "full_signature": "private Optional<Subject> doAuthenticate(final String username, final String password)", "class_method_signature": "AuthRest.doAuthenticate(final String username, final String password)", "testcase": false, "constructor": false}, {"identifier": "handleIOError", "parameters": "(IOException ex)", "modifiers": "private", "return": "MobiWebException", "signature": "MobiWebException handleIOError(IOException ex)", "full_signature": "private MobiWebException handleIOError(IOException ex)", "class_method_signature": "AuthRest.handleIOError(IOException ex)", "testcase": false, "constructor": false}, {"identifier": "handleJOSEError", "parameters": "(JOSEException ex)", "modifiers": "private", "return": "MobiWebException", "signature": "MobiWebException handleJOSEError(JOSEException ex)", "full_signature": "private MobiWebException handleJOSEError(JOSEException ex)", "class_method_signature": "AuthRest.handleJOSEError(JOSEException ex)", "testcase": false, "constructor": false}, {"identifier": "handleParseError", "parameters": "(ParseException ex)", "modifiers": "private", "return": "MobiWebException", "signature": "MobiWebException handleParseError(ParseException ex)", "full_signature": "private MobiWebException handleParseError(ParseException ex)", "class_method_signature": "AuthRest.handleParseError(ParseException ex)", "testcase": false, "constructor": false}, {"identifier": "handleError", "parameters": "(String msg, Exception ex)", "modifiers": "private", "return": "MobiWebException", "signature": "MobiWebException handleError(String msg, Exception ex)", "full_signature": "private MobiWebException handleError(String msg, Exception ex)", "class_method_signature": "AuthRest.handleError(String msg, Exception ex)", "testcase": false, "constructor": false}], "file": "com.mobi.jaas.rest/src/main/java/com/mobi/jaas/rest/AuthRest.java"}, "focal_method": {"identifier": "getCurrentUser", "parameters": "(@Context ContainerRequestContext context)", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) @ApiOperation(\"Gets the current user token\") public", "return": "Response", "body": "@GET\n    @Produces(MediaType.APPLICATION_JSON)\n    @ApiOperation(\"Gets the current user token\")\n    public Response getCurrentUser(@Context ContainerRequestContext context) {\n        String token = tokenManager.getTokenString(context);\n        Optional<SignedJWT> tokenOptional = tokenManager.verifyToken(token);\n        if (tokenOptional.isPresent()) {\n            log.debug(\"Token found and verified.\");\n            log.debug(\"Writing payload to response.\");\n            SignedJWT signedToken = tokenOptional.get();\n            return Response.ok(signedToken.getPayload().toString()).build();\n        } else {\n            log.debug(\"Token missing or unverified. Generating unauthenticated token.\");\n            SignedJWT signedToken = tokenManager.generateUnauthToken();\n            log.debug(\"Writing payload to response.\");\n            return createResponse(signedToken);\n        }\n    }", "signature": "Response getCurrentUser(@Context ContainerRequestContext context)", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) @ApiOperation(\"Gets the current user token\") public Response getCurrentUser(@Context ContainerRequestContext context)", "class_method_signature": "AuthRest.getCurrentUser(@Context ContainerRequestContext context)", "testcase": false, "constructor": false, "invocations": ["getTokenString", "verifyToken", "isPresent", "debug", "debug", "get", "build", "ok", "toString", "getPayload", "debug", "generateUnauthToken", "debug", "createResponse"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}