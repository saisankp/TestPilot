{"test_class": {"identifier": "SortArrayMapConsistentHashTest", "superclass": "", "interfaces": "", "fields": [], "file": "cim-common/src/test/java/com/crossoverjie/cim/common/route/algorithm/consistenthash/SortArrayMapConsistentHashTest.java"}, "test_case": {"identifier": "getFirstNodeValue4", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getFirstNodeValue4() {\n        AbstractConsistentHash map = new SortArrayMapConsistentHash() ;\n\n        List<String> strings = new ArrayList<String>();\n        strings.add(\"45.78.28.220:9000:8081\") ;\n        strings.add(\"45.78.28.220:9100:9081\") ;\n\n        String process = map.process(strings,\"1551253899106\");\n\n        System.out.println(process);\n        Assert.assertEquals(\"45.78.28.220:9000:8081\",process);\n    }", "signature": "void getFirstNodeValue4()", "full_signature": "@Test public void getFirstNodeValue4()", "class_method_signature": "SortArrayMapConsistentHashTest.getFirstNodeValue4()", "testcase": true, "constructor": false, "invocations": ["add", "add", "process", "println", "assertEquals"]}, "focal_class": {"identifier": "SortArrayMapConsistentHash", "superclass": "extends AbstractConsistentHash", "interfaces": "", "fields": [{"original_string": "private SortArrayMap sortArrayMap = new SortArrayMap();", "modifier": "private", "type": "SortArrayMap", "declarator": "sortArrayMap = new SortArrayMap()", "var_name": "sortArrayMap"}, {"original_string": "private static final int VIRTUAL_NODE_SIZE = 2 ;", "modifier": "private static final", "type": "int", "declarator": "VIRTUAL_NODE_SIZE = 2", "var_name": "VIRTUAL_NODE_SIZE"}], "methods": [{"identifier": "add", "parameters": "(long key, String value)", "modifiers": "@Override public", "return": "void", "signature": "void add(long key, String value)", "full_signature": "@Override public void add(long key, String value)", "class_method_signature": "SortArrayMapConsistentHash.add(long key, String value)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void sort()", "full_signature": "@Override public void sort()", "class_method_signature": "SortArrayMapConsistentHash.sort()", "testcase": false, "constructor": false}, {"identifier": "getFirstNodeValue", "parameters": "(String value)", "modifiers": "@Override public", "return": "String", "signature": "String getFirstNodeValue(String value)", "full_signature": "@Override public String getFirstNodeValue(String value)", "class_method_signature": "SortArrayMapConsistentHash.getFirstNodeValue(String value)", "testcase": false, "constructor": false}], "file": "cim-common/src/main/java/com/crossoverjie/cim/common/route/algorithm/consistenthash/SortArrayMapConsistentHash.java"}, "focal_method": {"identifier": "add", "parameters": "(long key, String value)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void add(long key, String value) {\n        // fix https://github.com/crossoverJie/cim/issues/79\n        sortArrayMap.clear();\n        for (int i = 0; i < VIRTUAL_NODE_SIZE; i++) {\n            Long hash = super.hash(\"vir\" + key + i);\n            sortArrayMap.add(hash,value);\n        }\n        sortArrayMap.add(key, value);\n    }", "signature": "void add(long key, String value)", "full_signature": "@Override public void add(long key, String value)", "class_method_signature": "SortArrayMapConsistentHash.add(long key, String value)", "testcase": false, "constructor": false, "invocations": ["clear", "hash", "add", "add"]}, "repository": {"repo_id": 134164777, "url": "https://github.com/crossoverJie/cim", "stars": 4518, "created": "5/20/2018 3:55:56 PM +00:00", "updates": "2020-01-27T13:30:30+00:00", "fork": "False", "license": "licensed"}}