{"test_class": {"identifier": "InformationParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Environment<Class<?>> environment = StubEnvironment.of(Project.EMPTY);", "modifier": "", "type": "Environment<Class<?>>", "declarator": "environment = StubEnvironment.of(Project.EMPTY)", "var_name": "environment"}, {"original_string": "InformationParser<Class<?>> parser = new InformationParser<>(environment);", "modifier": "", "type": "InformationParser<Class<?>>", "declarator": "parser = new InformationParser<>(environment)", "var_name": "parser"}], "file": "scribe/core/src/test/java/com/karuslabs/scribe/core/parsers/InformationParserTest.java"}, "test_case": {"identifier": "parse_information", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void parse_information() {\n        parser.parse(InformationParserTest.class.getAnnotation(Information.class));\n        var mappings = environment.mappings;\n        \n        assertArrayEquals(new String[] {\"Pante\"}, (String[]) mappings.get(\"authors\"));\n        assertEquals(\"description\", mappings.get(\"description\"));\n        assertEquals(\"http://wwww.repo.karuslabs.com\", mappings.get(\"website\"));\n        assertEquals(\"prefix\", mappings.get(\"prefix\"));\n    }", "signature": "void parse_information()", "full_signature": "@Test void parse_information()", "class_method_signature": "InformationParserTest.parse_information()", "testcase": true, "constructor": false, "invocations": ["parse", "getAnnotation", "assertArrayEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "InformationParser", "superclass": "extends SingleParser<T>", "interfaces": "", "fields": [], "methods": [{"identifier": "InformationParser", "parameters": "(Environment<T> environment)", "modifiers": "public", "return": "", "signature": " InformationParser(Environment<T> environment)", "full_signature": "public  InformationParser(Environment<T> environment)", "class_method_signature": "InformationParser.InformationParser(Environment<T> environment)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(T type)", "modifiers": "@Override protected", "return": "void", "signature": "void parse(T type)", "full_signature": "@Override protected void parse(T type)", "class_method_signature": "InformationParser.parse(T type)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(Information information, T type)", "modifiers": "protected", "return": "void", "signature": "void check(Information information, T type)", "full_signature": "protected void check(Information information, T type)", "class_method_signature": "InformationParser.check(Information information, T type)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(Information information)", "modifiers": "protected", "return": "void", "signature": "void parse(Information information)", "full_signature": "protected void parse(Information information)", "class_method_signature": "InformationParser.parse(Information information)", "testcase": false, "constructor": false}], "file": "scribe/core/src/main/java/com/karuslabs/scribe/core/parsers/InformationParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(T type)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void parse(T type) {\n        var information = environment.resolver.any(type, Information.class);\n        check(information, type);\n        parse(information);\n    }", "signature": "void parse(T type)", "full_signature": "@Override protected void parse(T type)", "class_method_signature": "InformationParser.parse(T type)", "testcase": false, "constructor": false, "invocations": ["any", "check", "parse"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}