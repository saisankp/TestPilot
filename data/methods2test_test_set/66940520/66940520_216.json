{"test_class": {"identifier": "DefaultReservedValueServiceTest", "superclass": "extends IntegrationTestBase", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ReservedValueService reservedValueService;", "modifier": "@Autowired\n    private", "type": "ReservedValueService", "declarator": "reservedValueService", "var_name": "reservedValueService"}, {"original_string": "@Autowired\n    private ReservedValueStore reservedValueStore;", "modifier": "@Autowired\n    private", "type": "ReservedValueStore", "declarator": "reservedValueStore", "var_name": "reservedValueStore"}, {"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private static Date future;", "modifier": "private static", "type": "Date", "declarator": "future", "var_name": "future"}, {"original_string": "private static TextPattern simpleTextPattern;", "modifier": "private static", "type": "TextPattern", "declarator": "simpleTextPattern", "var_name": "simpleTextPattern"}, {"original_string": "private static TextPattern simpleSequentialTextPattern;", "modifier": "private static", "type": "TextPattern", "declarator": "simpleSequentialTextPattern", "var_name": "simpleSequentialTextPattern"}, {"original_string": "private static TextPattern simpleRandomTextPattern;", "modifier": "private static", "type": "TextPattern", "declarator": "simpleRandomTextPattern", "var_name": "simpleRandomTextPattern"}, {"original_string": "private static TextPattern simpleStringPattern;", "modifier": "private static", "type": "TextPattern", "declarator": "simpleStringPattern", "var_name": "simpleStringPattern"}, {"original_string": "private static ReservedValue simpleReservedValue;", "modifier": "private static", "type": "ReservedValue", "declarator": "simpleReservedValue", "var_name": "simpleReservedValue"}], "file": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/reservedvalue/DefaultReservedValueServiceTest.java"}, "test_case": {"identifier": "testReserveReserveTooManySequentialValuesWhenSomeExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReserveReserveTooManySequentialValuesWhenSomeExists()\n        throws Exception\n    {\n        assertEquals( 99,\n            reservedValueService.reserve( simpleSequentialTextPattern, 99, new HashMap<>(), future ).size() );\n\n        thrown.expect( ReserveValueException.class );\n        thrown.expectMessage( \"Could not reserve value: Not enough values left to reserve 1 values.\" );\n\n        reservedValueService.reserve( simpleSequentialTextPattern, 1, new HashMap<>(), future );\n    }", "signature": "void testReserveReserveTooManySequentialValuesWhenSomeExists()", "full_signature": "@Test public void testReserveReserveTooManySequentialValuesWhenSomeExists()", "class_method_signature": "DefaultReservedValueServiceTest.testReserveReserveTooManySequentialValuesWhenSomeExists()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "size", "reserve", "expect", "expectMessage", "reserve"]}, "focal_class": {"identifier": "DefaultReservedValueService", "superclass": "", "interfaces": "implements ReservedValueService", "fields": [{"original_string": "private static final long GENERATION_TIMEOUT = (1000 * 30);", "modifier": "private static final", "type": "long", "declarator": "GENERATION_TIMEOUT = (1000 * 30)", "var_name": "GENERATION_TIMEOUT"}, {"original_string": "private TextPatternService textPatternService;", "modifier": "private", "type": "TextPatternService", "declarator": "textPatternService", "var_name": "textPatternService"}, {"original_string": "private ReservedValueStore reservedValueStore;", "modifier": "private", "type": "ReservedValueStore", "declarator": "reservedValueStore", "var_name": "reservedValueStore"}, {"original_string": "private SequentialNumberCounterStore sequentialNumberCounterStore;", "modifier": "private", "type": "SequentialNumberCounterStore", "declarator": "sequentialNumberCounterStore", "var_name": "sequentialNumberCounterStore"}], "methods": [{"identifier": "DefaultReservedValueService", "parameters": "( TextPatternService textPatternService, ReservedValueStore reservedValueStore,\n        SequentialNumberCounterStore sequentialNumberCounterStore )", "modifiers": "public", "return": "", "signature": " DefaultReservedValueService( TextPatternService textPatternService, ReservedValueStore reservedValueStore,\n        SequentialNumberCounterStore sequentialNumberCounterStore )", "full_signature": "public  DefaultReservedValueService( TextPatternService textPatternService, ReservedValueStore reservedValueStore,\n        SequentialNumberCounterStore sequentialNumberCounterStore )", "class_method_signature": "DefaultReservedValueService.DefaultReservedValueService( TextPatternService textPatternService, ReservedValueStore reservedValueStore,\n        SequentialNumberCounterStore sequentialNumberCounterStore )", "testcase": false, "constructor": true}, {"identifier": "reserve", "parameters": "( TextPattern textPattern, int numberOfReservations, Map<String, String> values, Date expires )", "modifiers": "@Override @Transactional public", "return": "List<ReservedValue>", "signature": "List<ReservedValue> reserve( TextPattern textPattern, int numberOfReservations, Map<String, String> values, Date expires )", "full_signature": "@Override @Transactional public List<ReservedValue> reserve( TextPattern textPattern, int numberOfReservations, Map<String, String> values, Date expires )", "class_method_signature": "DefaultReservedValueService.reserve( TextPattern textPattern, int numberOfReservations, Map<String, String> values, Date expires )", "testcase": false, "constructor": false}, {"identifier": "useReservedValue", "parameters": "( TextPattern textPattern, String value )", "modifiers": "@Override @Transactional public", "return": "boolean", "signature": "boolean useReservedValue( TextPattern textPattern, String value )", "full_signature": "@Override @Transactional public boolean useReservedValue( TextPattern textPattern, String value )", "class_method_signature": "DefaultReservedValueService.useReservedValue( TextPattern textPattern, String value )", "testcase": false, "constructor": false}, {"identifier": "isReserved", "parameters": "( TextPattern textPattern, String value )", "modifiers": "@Override @Transactional(readOnly = true) public", "return": "boolean", "signature": "boolean isReserved( TextPattern textPattern, String value )", "full_signature": "@Override @Transactional(readOnly = true) public boolean isReserved( TextPattern textPattern, String value )", "class_method_signature": "DefaultReservedValueService.isReserved( TextPattern textPattern, String value )", "testcase": false, "constructor": false}, {"identifier": "removeExpiredReservations", "parameters": "()", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void removeExpiredReservations()", "full_signature": "@Override @Transactional public void removeExpiredReservations()", "class_method_signature": "DefaultReservedValueService.removeExpiredReservations()", "testcase": false, "constructor": false}, {"identifier": "deleteReservedValueByUid", "parameters": "( String uid )", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void deleteReservedValueByUid( String uid )", "full_signature": "@Override @Transactional public void deleteReservedValueByUid( String uid )", "class_method_signature": "DefaultReservedValueService.deleteReservedValueByUid( String uid )", "testcase": false, "constructor": false}, {"identifier": "getGeneratedSegment", "parameters": "( TextPattern textPattern )", "modifiers": "private", "return": "TextPatternSegment", "signature": "TextPatternSegment getGeneratedSegment( TextPattern textPattern )", "full_signature": "private TextPatternSegment getGeneratedSegment( TextPattern textPattern )", "class_method_signature": "DefaultReservedValueService.getGeneratedSegment( TextPattern textPattern )", "testcase": false, "constructor": false}, {"identifier": "generateValues", "parameters": "( TextPattern textPattern, String key, int numberOfValues )", "modifiers": "private", "return": "List<String>", "signature": "List<String> generateValues( TextPattern textPattern, String key, int numberOfValues )", "full_signature": "private List<String> generateValues( TextPattern textPattern, String key, int numberOfValues )", "class_method_signature": "DefaultReservedValueService.generateValues( TextPattern textPattern, String key, int numberOfValues )", "testcase": false, "constructor": false}, {"identifier": "hasEnoughValuesLeft", "parameters": "( ReservedValue reservedValue, long totalValues, int valuesRequired )", "modifiers": "private", "return": "boolean", "signature": "boolean hasEnoughValuesLeft( ReservedValue reservedValue, long totalValues, int valuesRequired )", "full_signature": "private boolean hasEnoughValuesLeft( ReservedValue reservedValue, long totalValues, int valuesRequired )", "class_method_signature": "DefaultReservedValueService.hasEnoughValuesLeft( ReservedValue reservedValue, long totalValues, int valuesRequired )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/reservedvalue/DefaultReservedValueService.java"}, "focal_method": {"identifier": "reserve", "parameters": "( TextPattern textPattern, int numberOfReservations, Map<String, String> values, Date expires )", "modifiers": "@Override @Transactional public", "return": "List<ReservedValue>", "body": "@Override\n    @Transactional\n    public List<ReservedValue> reserve( TextPattern textPattern, int numberOfReservations, Map<String, String> values, Date expires )\n        throws ReserveValueException, TextPatternGenerationException\n    {\n        long startTime = System.currentTimeMillis();\n        int attemptsLeft = 10;\n\n        List<ReservedValue> resultList = new ArrayList<>();\n\n        TextPatternSegment generatedSegment = getGeneratedSegment( textPattern );\n\n        String key = textPatternService.resolvePattern( textPattern, values );\n\n        // Used for searching value tables\n        String valueKey = ( generatedSegment != null ?\n            key.replaceAll( Pattern.quote( generatedSegment.getRawSegment() ), \"%\" ) :\n            key );\n\n        ReservedValue reservedValue = new ReservedValue( textPattern.getOwnerObject().name(), textPattern.getOwnerUid(),\n            key,\n            valueKey,\n            expires );\n\n        if ( !hasEnoughValuesLeft( reservedValue,\n            TextPatternValidationUtils.getTotalValuesPotential( generatedSegment ),\n            numberOfReservations ) )\n        {\n            throw new ReserveValueException( \"Not enough values left to reserve \" + numberOfReservations + \" values.\" );\n        }\n\n        if ( generatedSegment == null && numberOfReservations == 1 )\n        {\n            reservedValue.setValue( key );\n            return reservedValueStore.reserveValues( reservedValue, Lists.newArrayList( key ) );\n        }\n\n        List<String> usedGeneratedValues = new ArrayList<>();\n\n        int numberOfValuesLeftToGenerate = numberOfReservations;\n\n        try\n        {\n            while ( attemptsLeft-- > 0 && numberOfValuesLeftToGenerate > 0 )\n            {\n                if ( System.currentTimeMillis() - startTime >= GENERATION_TIMEOUT )\n                {\n                    throw new TimeoutException( \"Generation and reservation of values took too long\" );\n                }\n\n                List<String> resolvedPatterns = new ArrayList<>();\n\n                List<String> generatedValues = new ArrayList<>();\n\n                int maxGenerateAttempts = 10;\n\n                while ( generatedValues.size() < numberOfValuesLeftToGenerate && maxGenerateAttempts-- > 0 )\n                {\n                    generatedValues.addAll( generateValues( textPattern, key, numberOfReservations - resultList.size() ) );\n                    generatedValues.removeAll( usedGeneratedValues );\n                }\n\n                usedGeneratedValues.addAll( generatedValues );\n\n                // Get a list of resolved patterns\n                for ( int i = 0; i < numberOfReservations - resultList.size(); i++ )\n                {\n                    resolvedPatterns.add( textPatternService.resolvePattern( textPattern,\n                        ImmutableMap.<String, String>builder()\n                            .putAll( values )\n                            .put( generatedSegment.getMethod().name(), generatedValues.get( i ) )\n                            .build() ) );\n                }\n\n                resultList.addAll( reservedValueStore.reserveValues( reservedValue, resolvedPatterns ) );\n\n                numberOfValuesLeftToGenerate = numberOfReservations - resultList.size();\n            }\n        }\n        catch ( TimeoutException ex )\n        {\n            log.warn( String.format(\n                \"Generation and reservation of values for %s wih uid %s timed out. %s values was reserved. You might be running low on available values\",\n                textPattern.getOwnerObject().name(), textPattern.getOwnerUid(), resultList.size() ) );\n        }\n\n        return resultList;\n    }", "signature": "List<ReservedValue> reserve( TextPattern textPattern, int numberOfReservations, Map<String, String> values, Date expires )", "full_signature": "@Override @Transactional public List<ReservedValue> reserve( TextPattern textPattern, int numberOfReservations, Map<String, String> values, Date expires )", "class_method_signature": "DefaultReservedValueService.reserve( TextPattern textPattern, int numberOfReservations, Map<String, String> values, Date expires )", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "getGeneratedSegment", "resolvePattern", "replaceAll", "quote", "getRawSegment", "name", "getOwnerObject", "getOwnerUid", "hasEnoughValuesLeft", "getTotalValuesPotential", "setValue", "reserveValues", "newArrayList", "currentTimeMillis", "size", "addAll", "generateValues", "size", "removeAll", "addAll", "size", "add", "resolvePattern", "build", "put", "putAll", "builder", "name", "getMethod", "get", "addAll", "reserveValues", "size", "warn", "format", "name", "getOwnerObject", "getOwnerUid", "size"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}