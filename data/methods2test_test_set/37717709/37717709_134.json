{"test_class": {"identifier": "TestFileSchemeStrategy", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SchemeStrategy strategy;", "modifier": "private", "type": "SchemeStrategy", "declarator": "strategy", "var_name": "strategy"}], "file": "org.jvoicexml/src/test/java/org/jvoicexml/documentserver/schemestrategy/TestFileSchemeStrategy.java"}, "test_case": {"identifier": "testGetInputStreamFragment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetInputStreamFragment() throws Exception, JVoiceXMLEvent {\n       final URL file = this.getClass().getResource(\"/hello.vxml\");\n       final URI uri = file.toURI();\n       final URI fragmentUri = new URI(uri.toString() + \"#fragment\");\n       InputStream in = strategy.getInputStream(null, fragmentUri, null, 5000,\n               null);\n       Assert.assertNotNull(in);\n       in.close();\n    }", "signature": "void testGetInputStreamFragment()", "full_signature": "@Test public void testGetInputStreamFragment()", "class_method_signature": "TestFileSchemeStrategy.testGetInputStreamFragment()", "testcase": true, "constructor": false, "invocations": ["getResource", "getClass", "toURI", "toString", "getInputStream", "assertNotNull", "close"]}, "focal_class": {"identifier": "FileSchemeStrategy", "superclass": "", "interfaces": "implements SchemeStrategy", "fields": [{"original_string": "private static final Logger LOGGER =\n            LogManager.getLogger(FileSchemeStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER =\n            LogManager.getLogger(FileSchemeStrategy.class)", "var_name": "LOGGER"}, {"original_string": "public static final String SCHEME_NAME = \"file\";", "modifier": "public static final", "type": "String", "declarator": "SCHEME_NAME = \"file\"", "var_name": "SCHEME_NAME"}], "methods": [{"identifier": "FileSchemeStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " FileSchemeStrategy()", "full_signature": "public  FileSchemeStrategy()", "class_method_signature": "FileSchemeStrategy.FileSchemeStrategy()", "testcase": false, "constructor": true}, {"identifier": "getScheme", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getScheme()", "full_signature": "@Override public String getScheme()", "class_method_signature": "FileSchemeStrategy.getScheme()", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "full_signature": "@Override public InputStream getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "class_method_signature": "FileSchemeStrategy.getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "testcase": false, "constructor": false}, {"identifier": "sessionClosed", "parameters": "(final String sessionId)", "modifiers": "@Override public", "return": "void", "signature": "void sessionClosed(final String sessionId)", "full_signature": "@Override public void sessionClosed(final String sessionId)", "class_method_signature": "FileSchemeStrategy.sessionClosed(final String sessionId)", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/documentserver/schemestrategy/FileSchemeStrategy.java"}, "focal_method": {"identifier": "getInputStream", "parameters": "(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "modifiers": "@Override public", "return": "InputStream", "body": "@Override\n    public InputStream getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)\n            throws BadFetchError {\n\n        try {\n            // Remove the fragment.\n            // A file based URI may only have a scheme and a path.\n            final String scheme = uri.getScheme();\n            final String path = uri.getPath();\n            final URI fragmentLessUri = new URI(scheme, null, path, null);\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"reading '\" + fragmentLessUri + \"'...\");\n            }\n            final File file = new File(fragmentLessUri);\n            return new FileInputStream(file);\n        } catch (java.io.FileNotFoundException e) {\n            throw new BadFetchError(e.getMessage(), e);\n        } catch (java.lang.IllegalArgumentException e) {\n            throw new BadFetchError(e.getMessage(), e);\n        } catch (URISyntaxException e) {\n            throw new BadFetchError(e.getMessage(), e);\n        }\n    }", "signature": "InputStream getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "full_signature": "@Override public InputStream getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "class_method_signature": "FileSchemeStrategy.getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "testcase": false, "constructor": false, "invocations": ["getScheme", "getPath", "isDebugEnabled", "debug", "getMessage", "getMessage", "getMessage"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}