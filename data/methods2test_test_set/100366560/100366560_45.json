{"test_class": {"identifier": "FixtureTemplateWrapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "beanmother-core/src/test/java/io/beanmother/core/loader/FixtureTemplateWrapperTest.java"}, "test_case": {"identifier": "testConvertArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvertArray() {\n        FixtureMap parent = new FixtureMap();\n\n        List<Object> list = new ArrayList<>();\n        String value1 = \"string\";\n        Date value2 = new Date();\n        list.add(value1);\n        list.add(value2);\n\n        FixtureList fixtureList = FixtureTemplateWrapper.wrap(list, \"test\", parent);\n\n        assertEquals(\"test\", fixtureList.getFixtureName());\n        assertEquals(parent, fixtureList.getParent());\n\n        assertTrue(fixtureList.get(0) instanceof FixtureValue);\n        assertTrue(fixtureList.get(1) instanceof FixtureValue);\n\n        FixtureValue fixtureValue1 = (FixtureValue) fixtureList.get(0);\n        FixtureValue fixtureValue2 = (FixtureValue) fixtureList.get(1);\n\n        assertEquals(value1, fixtureValue1.getValue());\n        assertEquals(value2, fixtureValue2.getValue());\n\n        assertEquals(\"test\", fixtureValue1.getFixtureName());\n        assertEquals(\"test\", fixtureValue2.getFixtureName());\n    }", "signature": "void testConvertArray()", "full_signature": "@Test public void testConvertArray()", "class_method_signature": "FixtureTemplateWrapperTest.testConvertArray()", "testcase": true, "constructor": false, "invocations": ["add", "add", "wrap", "assertEquals", "getFixtureName", "assertEquals", "getParent", "assertTrue", "get", "assertTrue", "get", "get", "get", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getFixtureName", "assertEquals", "getFixtureName"]}, "focal_class": {"identifier": "FixtureTemplateWrapper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "wrap", "parameters": "(Map<String, ? extends Object> source, String fixtureName, FixtureTemplate parent)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "FixtureMap", "signature": "FixtureMap wrap(Map<String, ? extends Object> source, String fixtureName, FixtureTemplate parent)", "full_signature": "@SuppressWarnings(\"unchecked\") public static FixtureMap wrap(Map<String, ? extends Object> source, String fixtureName, FixtureTemplate parent)", "class_method_signature": "FixtureTemplateWrapper.wrap(Map<String, ? extends Object> source, String fixtureName, FixtureTemplate parent)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(List<? extends Object> source, String fixtureName, FixtureTemplate parent)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "FixtureList", "signature": "FixtureList wrap(List<? extends Object> source, String fixtureName, FixtureTemplate parent)", "full_signature": "@SuppressWarnings(\"unchecked\") public static FixtureList wrap(List<? extends Object> source, String fixtureName, FixtureTemplate parent)", "class_method_signature": "FixtureTemplateWrapper.wrap(List<? extends Object> source, String fixtureName, FixtureTemplate parent)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(Object source, String fixtureName, FixtureTemplate parent)", "modifiers": "public static", "return": "FixtureValue", "signature": "FixtureValue wrap(Object source, String fixtureName, FixtureTemplate parent)", "full_signature": "public static FixtureValue wrap(Object source, String fixtureName, FixtureTemplate parent)", "class_method_signature": "FixtureTemplateWrapper.wrap(Object source, String fixtureName, FixtureTemplate parent)", "testcase": false, "constructor": false}], "file": "beanmother-core/src/main/java/io/beanmother/core/loader/FixtureTemplateWrapper.java"}, "focal_method": {"identifier": "wrap", "parameters": "(Map<String, ? extends Object> source, String fixtureName, FixtureTemplate parent)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "FixtureMap", "body": "@SuppressWarnings(\"unchecked\")\n    public static FixtureMap wrap(Map<String, ? extends Object> source, String fixtureName, FixtureTemplate parent) {\n        FixtureMap fixtureMap = new FixtureMap();\n        fixtureMap.setFixtureName(fixtureName);\n        fixtureMap.setParent(parent);\n\n        for (Map.Entry<String, ? extends Object> entry : source.entrySet()) {\n            String key = entry.getKey();\n            if (entry.getValue() instanceof Map) {\n                fixtureMap.put(entry.getKey(), wrap((Map) entry.getValue(), key, fixtureMap));\n            } else if (entry.getValue() instanceof List) {\n                fixtureMap.put(entry.getKey(), wrap((List) entry.getValue(), key, fixtureMap));\n            } else {\n                FixtureValue wrapped = wrap(entry.getValue(), entry.getKey(), fixtureMap);\n                fixtureMap.put(entry.getKey(), wrapped);\n            }\n        }\n\n        return fixtureMap;\n    }", "signature": "FixtureMap wrap(Map<String, ? extends Object> source, String fixtureName, FixtureTemplate parent)", "full_signature": "@SuppressWarnings(\"unchecked\") public static FixtureMap wrap(Map<String, ? extends Object> source, String fixtureName, FixtureTemplate parent)", "class_method_signature": "FixtureTemplateWrapper.wrap(Map<String, ? extends Object> source, String fixtureName, FixtureTemplate parent)", "testcase": false, "constructor": false, "invocations": ["setFixtureName", "setParent", "entrySet", "getKey", "getValue", "put", "getKey", "wrap", "getValue", "getValue", "put", "getKey", "wrap", "getValue", "wrap", "getValue", "getKey", "put", "getKey"]}, "repository": {"repo_id": 100366560, "url": "https://github.com/keepcosmos/beanmother", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 95, "size": 688, "license": "licensed"}}