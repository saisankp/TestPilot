{"test_class": {"identifier": "AbstractThreadedObservablePluginTest", "superclass": "extends CoreBaseTest", "interfaces": "", "fields": [{"original_string": "private static final Logger logger =\n      LoggerFactory.getLogger(AbstractThreadedObservablePluginTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger =\n      LoggerFactory.getLogger(AbstractThreadedObservablePluginTest.class)", "var_name": "logger"}], "file": "java/component/keyple-core/src/test/java/org/eclipse/keyple/core/seproxy/plugin/AbstractThreadedObservablePluginTest.java"}, "test_case": {"identifier": "addObserver", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void addObserver() throws Throwable {\n    MockAbstractThreadedPlugin plugin = new MockAbstractThreadedPlugin(\"addObserverTest\");\n\n    // add observer\n    plugin.addObserver(getOneObserver());\n\n    Assert.assertEquals(1, plugin.countObservers());\n    // test if thread is activated\n    Assert.assertTrue(plugin.isMonitoring());\n\n    // shutdown thread\n    plugin.finalize();\n  }", "signature": "void addObserver()", "full_signature": "@Test public void addObserver()", "class_method_signature": "AbstractThreadedObservablePluginTest.addObserver()", "testcase": true, "constructor": false, "invocations": ["addObserver", "getOneObserver", "assertEquals", "countObservers", "assertTrue", "isMonitoring", "finalize"]}, "focal_class": {"identifier": "AbstractThreadedObservablePlugin", "superclass": "extends AbstractObservablePlugin", "interfaces": "", "fields": [{"original_string": "private static final Logger logger =\n      LoggerFactory.getLogger(AbstractThreadedObservablePlugin.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger =\n      LoggerFactory.getLogger(AbstractThreadedObservablePlugin.class)", "var_name": "logger"}, {"original_string": "private static final long SETTING_THREAD_TIMEOUT_DEFAULT = 1000;", "modifier": "private static final", "type": "long", "declarator": "SETTING_THREAD_TIMEOUT_DEFAULT = 1000", "var_name": "SETTING_THREAD_TIMEOUT_DEFAULT"}, {"original_string": "private EventThread thread;", "modifier": "private", "type": "EventThread", "declarator": "thread", "var_name": "thread"}, {"original_string": "protected long threadWaitTimeout = SETTING_THREAD_TIMEOUT_DEFAULT;", "modifier": "protected", "type": "long", "declarator": "threadWaitTimeout = SETTING_THREAD_TIMEOUT_DEFAULT", "var_name": "threadWaitTimeout"}, {"original_string": "private final SortedSet<String> nativeReadersNames = new ConcurrentSkipListSet<String>();", "modifier": "private final", "type": "SortedSet<String>", "declarator": "nativeReadersNames = new ConcurrentSkipListSet<String>()", "var_name": "nativeReadersNames"}], "methods": [{"identifier": "AbstractThreadedObservablePlugin", "parameters": "(String name)", "modifiers": "protected", "return": "", "signature": " AbstractThreadedObservablePlugin(String name)", "full_signature": "protected  AbstractThreadedObservablePlugin(String name)", "class_method_signature": "AbstractThreadedObservablePlugin.AbstractThreadedObservablePlugin(String name)", "testcase": false, "constructor": true}, {"identifier": "fetchNativeReadersNames", "parameters": "()", "modifiers": "protected abstract", "return": "SortedSet<String>", "signature": "SortedSet<String> fetchNativeReadersNames()", "full_signature": "protected abstract SortedSet<String> fetchNativeReadersNames()", "class_method_signature": "AbstractThreadedObservablePlugin.fetchNativeReadersNames()", "testcase": false, "constructor": false}, {"identifier": "fetchNativeReader", "parameters": "(String name)", "modifiers": "protected abstract", "return": "SeReader", "signature": "SeReader fetchNativeReader(String name)", "full_signature": "protected abstract SeReader fetchNativeReader(String name)", "class_method_signature": "AbstractThreadedObservablePlugin.fetchNativeReader(String name)", "testcase": false, "constructor": false}, {"identifier": "addObserver", "parameters": "(final ObservablePlugin.PluginObserver observer)", "modifiers": "@Override public final", "return": "void", "signature": "void addObserver(final ObservablePlugin.PluginObserver observer)", "full_signature": "@Override public final void addObserver(final ObservablePlugin.PluginObserver observer)", "class_method_signature": "AbstractThreadedObservablePlugin.addObserver(final ObservablePlugin.PluginObserver observer)", "testcase": false, "constructor": false}, {"identifier": "removeObserver", "parameters": "(final ObservablePlugin.PluginObserver observer)", "modifiers": "@Override public final", "return": "void", "signature": "void removeObserver(final ObservablePlugin.PluginObserver observer)", "full_signature": "@Override public final void removeObserver(final ObservablePlugin.PluginObserver observer)", "class_method_signature": "AbstractThreadedObservablePlugin.removeObserver(final ObservablePlugin.PluginObserver observer)", "testcase": false, "constructor": false}, {"identifier": "clearObservers", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void clearObservers()", "full_signature": "@Override public final void clearObservers()", "class_method_signature": "AbstractThreadedObservablePlugin.clearObservers()", "testcase": false, "constructor": false}, {"identifier": "isMonitoring", "parameters": "()", "modifiers": "@Deprecated protected", "return": "Boolean", "signature": "Boolean isMonitoring()", "full_signature": "@Deprecated protected Boolean isMonitoring()", "class_method_signature": "AbstractThreadedObservablePlugin.isMonitoring()", "testcase": false, "constructor": false}], "file": "java/component/keyple-core/src/main/java/org/eclipse/keyple/core/seproxy/plugin/AbstractThreadedObservablePlugin.java"}, "focal_method": {"identifier": "addObserver", "parameters": "(final ObservablePlugin.PluginObserver observer)", "modifiers": "@Override public final", "return": "void", "body": "@Override\n  public final void addObserver(final ObservablePlugin.PluginObserver observer) {\n    super.addObserver(observer);\n    if (countObservers() == 1) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Start monitoring the plugin {}\", this.getName());\n      }\n      thread = new EventThread(this.getName());\n      thread.start();\n    }\n  }", "signature": "void addObserver(final ObservablePlugin.PluginObserver observer)", "full_signature": "@Override public final void addObserver(final ObservablePlugin.PluginObserver observer)", "class_method_signature": "AbstractThreadedObservablePlugin.addObserver(final ObservablePlugin.PluginObserver observer)", "testcase": false, "constructor": false, "invocations": ["addObserver", "countObservers", "isDebugEnabled", "debug", "getName", "getName", "start"]}, "repository": {"repo_id": 156416177, "url": "https://github.com/eclipse/keyple-java", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 10325, "license": "licensed"}}