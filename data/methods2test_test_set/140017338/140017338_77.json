{"test_class": {"identifier": "SW360ConnectionFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final SW360ClientConfig CONFIG = SW360ClientConfig.createConfig(\"restURL\",\n            \"authURL\", \"user\", \"password\", \"clientId\", \"clientPassword\", \"token\",\n            mock(HttpClient.class), mock(ObjectMapper.class));", "modifier": "private static final", "type": "SW360ClientConfig", "declarator": "CONFIG = SW360ClientConfig.createConfig(\"restURL\",\n            \"authURL\", \"user\", \"password\", \"clientId\", \"clientPassword\", \"token\",\n            mock(HttpClient.class), mock(ObjectMapper.class))", "var_name": "CONFIG"}, {"original_string": "private SW360ConnectionFactory connectionFactory;", "modifier": "private", "type": "SW360ConnectionFactory", "declarator": "connectionFactory", "var_name": "connectionFactory"}], "file": "modules/sw360/sw360-client/src/test/java/org/eclipse/sw360/antenna/sw360/client/adapter/SW360ConnectionFactoryTest.java"}, "test_case": {"identifier": "testLicenseAdapter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLicenseAdapter() {\n        SW360Connection sw360Connection = newConnection();\n        SW360LicenseClientAdapterAsync licenseAdapterAsync = sw360Connection.getLicenseAdapterAsync();\n        SW360LicenseClientAdapter licenseAdapterSync = sw360Connection.getLicenseAdapter();\n\n        checkClient(licenseAdapterAsync.getLicenseClient());\n        checkClient(licenseAdapterSync.getLicenseClient());\n        checkSyncAdapter(licenseAdapterSync, licenseAdapterAsync);\n    }", "signature": "void testLicenseAdapter()", "full_signature": "@Test public void testLicenseAdapter()", "class_method_signature": "SW360ConnectionFactoryTest.testLicenseAdapter()", "testcase": true, "constructor": false, "invocations": ["newConnection", "getLicenseAdapterAsync", "getLicenseAdapter", "checkClient", "getLicenseClient", "checkClient", "getLicenseClient", "checkSyncAdapter"]}, "focal_class": {"identifier": "SW360ConnectionFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "newConnection", "parameters": "(SW360ClientConfig config)", "modifiers": "public", "return": "SW360Connection", "signature": "SW360Connection newConnection(SW360ClientConfig config)", "full_signature": "public SW360Connection newConnection(SW360ClientConfig config)", "class_method_signature": "SW360ConnectionFactory.newConnection(SW360ClientConfig config)", "testcase": false, "constructor": false}], "file": "modules/sw360/sw360-client/src/main/java/org/eclipse/sw360/antenna/sw360/client/adapter/SW360ConnectionFactory.java"}, "focal_method": {"identifier": "newConnection", "parameters": "(SW360ClientConfig config)", "modifiers": "public", "return": "SW360Connection", "body": "public SW360Connection newConnection(SW360ClientConfig config) {\n        SW360AuthenticationClient authClient = new SW360AuthenticationClient(config);\n        AccessTokenProvider tokenProvider = new AccessTokenProvider(authClient);\n\n        SW360ComponentClient componentClient = new SW360ComponentClient(config, tokenProvider);\n        SW360ComponentClientAdapterAsync componentAdapterAsync =\n                new SW360ComponentClientAdapterAsyncImpl(componentClient);\n        SW360ComponentClientAdapter componentAdapterSync =\n                SyncClientAdapterHandler.newHandler(SW360ComponentClientAdapter.class,\n                        SW360ComponentClientAdapterAsync.class, componentAdapterAsync);\n\n        SW360ReleaseClient releaseClient = new SW360ReleaseClient(config, tokenProvider);\n        SW360ReleaseClientAdapterAsyncImpl releaseAdapterAsync =\n                new SW360ReleaseClientAdapterAsyncImpl(releaseClient, componentAdapterAsync);\n        SW360ReleaseClientAdapter releaseAdapterSync =\n                SyncClientAdapterHandler.newHandler(SW360ReleaseClientAdapter.class,\n                        SW360ReleaseClientAdapterAsync.class, releaseAdapterAsync);\n\n        SW360LicenseClient licenseClient = new SW360LicenseClient(config, tokenProvider);\n        SW360LicenseClientAdapterAsync licenseAdapterAsync = new SW360LicenseClientAdapterAsyncImpl(licenseClient);\n        SW360LicenseClientAdapter licenseAdapterSync =\n                SyncClientAdapterHandler.newHandler(SW360LicenseClientAdapter.class,\n                        SW360LicenseClientAdapterAsync.class, licenseAdapterAsync);\n\n        SW360ProjectClient projectClient = new SW360ProjectClient(config, tokenProvider);\n        SW360ProjectClientAdapterAsync projectAdapterAsync = new SW360ProjectClientAdapterAsyncImpl(projectClient);\n        SW360ProjectClientAdapter projectAdapterSync =\n                SyncClientAdapterHandler.newHandler(SW360ProjectClientAdapter.class,\n                        SW360ProjectClientAdapterAsync.class, projectAdapterAsync);\n\n        return new SW360Connection() {\n            @Override\n            public SW360ComponentClientAdapter getComponentAdapter() {\n                return componentAdapterSync;\n            }\n\n            @Override\n            public SW360ComponentClientAdapterAsync getComponentAdapterAsync() {\n                return componentAdapterAsync;\n            }\n\n            @Override\n            public SW360ReleaseClientAdapter getReleaseAdapter() {\n                return releaseAdapterSync;\n            }\n\n            @Override\n            public SW360ReleaseClientAdapterAsync getReleaseAdapterAsync() {\n                return releaseAdapterAsync;\n            }\n\n            @Override\n            public SW360LicenseClientAdapter getLicenseAdapter() {\n                return licenseAdapterSync;\n            }\n\n            @Override\n            public SW360LicenseClientAdapterAsync getLicenseAdapterAsync() {\n                return licenseAdapterAsync;\n            }\n\n            @Override\n            public SW360ProjectClientAdapter getProjectAdapter() {\n                return projectAdapterSync;\n            }\n\n            @Override\n            public SW360ProjectClientAdapterAsync getProjectAdapterAsync() {\n                return projectAdapterAsync;\n            }\n        };\n    }", "signature": "SW360Connection newConnection(SW360ClientConfig config)", "full_signature": "public SW360Connection newConnection(SW360ClientConfig config)", "class_method_signature": "SW360ConnectionFactory.newConnection(SW360ClientConfig config)", "testcase": false, "constructor": false, "invocations": ["newHandler", "newHandler", "newHandler", "newHandler"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}