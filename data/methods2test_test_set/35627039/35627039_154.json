{"test_class": {"identifier": "FileWatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String testDirectory = System.getProperty(\"user.dir\");", "modifier": "private final", "type": "String", "declarator": "testDirectory = System.getProperty(\"user.dir\")", "var_name": "testDirectory"}, {"original_string": "private final Path directoryPath = Paths.get(testDirectory);", "modifier": "private final", "type": "Path", "declarator": "directoryPath = Paths.get(testDirectory)", "var_name": "directoryPath"}, {"original_string": "private final Path testFilePath = directoryPath.resolve(UUID.randomUUID().toString());", "modifier": "private final", "type": "Path", "declarator": "testFilePath = directoryPath.resolve(UUID.randomUUID().toString())", "var_name": "testFilePath"}, {"original_string": "private @Tested FileWatcher fileWatcher;", "modifier": "private @Tested", "type": "FileWatcher", "declarator": "fileWatcher", "var_name": "fileWatcher"}, {"original_string": "private @Injectable\n    FileEventHandler fileEventHandler;", "modifier": "private @Injectable", "type": "FileEventHandler", "declarator": "fileEventHandler", "var_name": "fileEventHandler"}], "file": "common/src/test/java/com/hortonworks/streamline/common/FileWatcherTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() throws IOException {\n        boolean hasMoreEvents;\n        File f = testFilePath.toFile();\n        f.createNewFile();\n        hasMoreEvents = fileWatcher.processEvents();\n        Assert.assertEquals(true, hasMoreEvents);\n        new VerificationsInOrder() {{\n            fileEventHandler.created(withEqual(testFilePath));\n            times = 1;\n        }};\n        f.setLastModified(System.currentTimeMillis());\n        hasMoreEvents = fileWatcher.processEvents();\n        Assert.assertEquals(true, hasMoreEvents);\n        new VerificationsInOrder() {{\n            fileEventHandler.modified(withEqual(testFilePath));\n            times = 1;\n        }};\n        f.delete();\n        hasMoreEvents = fileWatcher.processEvents();\n        Assert.assertEquals(true, hasMoreEvents);\n        new VerificationsInOrder() {{\n            fileEventHandler.deleted(withEqual(testFilePath));\n            times = 1;\n        }};\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "FileWatcherTest.test()", "testcase": true, "constructor": false, "invocations": ["toFile", "createNewFile", "processEvents", "assertEquals", "created", "withEqual", "setLastModified", "currentTimeMillis", "processEvents", "assertEquals", "modified", "withEqual", "delete", "processEvents", "assertEquals", "deleted", "withEqual"]}, "focal_class": {"identifier": "FileWatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FileWatcher.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FileWatcher.class)", "var_name": "LOG"}, {"original_string": "private WatchService watchService;", "modifier": "private", "type": "WatchService", "declarator": "watchService", "var_name": "watchService"}, {"original_string": "private final List<FileEventHandler> fileEventHandlers;", "modifier": "private final", "type": "List<FileEventHandler>", "declarator": "fileEventHandlers", "var_name": "fileEventHandlers"}, {"original_string": "private final Map<WatchKey, FileEventHandler> watchKeyFileEventHandlerMap = new HashMap<>();", "modifier": "private final", "type": "Map<WatchKey, FileEventHandler>", "declarator": "watchKeyFileEventHandlerMap = new HashMap<>()", "var_name": "watchKeyFileEventHandlerMap"}, {"original_string": "private final Map<WatchKey, Path> watchKeyPathMap = new HashMap<>();", "modifier": "private final", "type": "Map<WatchKey, Path>", "declarator": "watchKeyPathMap = new HashMap<>()", "var_name": "watchKeyPathMap"}], "methods": [{"identifier": "FileWatcher", "parameters": "(List<FileEventHandler> fileEventHandlers)", "modifiers": "public", "return": "", "signature": " FileWatcher(List<FileEventHandler> fileEventHandlers)", "full_signature": "public  FileWatcher(List<FileEventHandler> fileEventHandlers)", "class_method_signature": "FileWatcher.FileWatcher(List<FileEventHandler> fileEventHandlers)", "testcase": false, "constructor": true}, {"identifier": "processEvents", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean processEvents()", "full_signature": "public boolean processEvents()", "class_method_signature": "FileWatcher.processEvents()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void register()", "full_signature": "public void register()", "class_method_signature": "FileWatcher.register()", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/hortonworks/streamline/common/FileWatcher.java"}, "focal_method": {"identifier": "processEvents", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean processEvents() {\n        if (watchKeyPathMap.isEmpty()) {\n            return false;\n        }\n        // wait for key to be signalled\n        WatchKey key;\n        try {\n            key = watchService.take();\n        } catch (ClosedWatchServiceException|InterruptedException ex) {\n            LOG.info(\"Watch service interrupted or closed while waiting to get next watch key. Exiting!\", ex);\n            return false;\n        }\n        Path dir = watchKeyPathMap.get(key);\n        if (dir == null) {\n            LOG.info(\"Unrecognized watch key: \" + key + \". Skipping the key without reseting it.\");\n            return true;\n        }\n        for (WatchEvent<?> event: key.pollEvents()) {\n            WatchEvent.Kind kind = event.kind();\n            if (kind == StandardWatchEventKinds.OVERFLOW) {\n                LOG.warn(\"Overflow event received for key: \" + key + \". This means events have been missed or discarded. Please verify.\");\n                return true;\n            }\n            // Context for directory entry event is the file name of entry\n            WatchEvent<Path> ev = (WatchEvent<Path>) event;\n            Path name = ev.context();\n            Path child = dir.resolve(name);\n            LOG.info(\"{}: {}\", event.kind().name(), child);\n            try {\n                if (kind == StandardWatchEventKinds.ENTRY_CREATE) {\n                    watchKeyFileEventHandlerMap.get(key).created(child);\n                } else if (kind == StandardWatchEventKinds.ENTRY_MODIFY) {\n                    watchKeyFileEventHandlerMap.get(key).modified(child);\n                } else if (kind == StandardWatchEventKinds.ENTRY_DELETE) {\n                    watchKeyFileEventHandlerMap.get(key).deleted(child);\n                }\n            } catch (RuntimeException ex) {\n                LOG.warn(\"Exception thrown by handler {} while processing event {}\", watchKeyFileEventHandlerMap.get(key), event.kind().name(), ex);\n            }\n        }\n        // reset key and remove from set if directory no longer accessible\n        boolean valid = key.reset();\n        if (!valid) {\n            LOG.info(\"Key \" + key + \" not being watched any more as it could not be reset.\");\n            watchKeyPathMap.remove(key);\n            watchKeyFileEventHandlerMap.remove(key);\n\n        }\n        return true;\n    }", "signature": "boolean processEvents()", "full_signature": "public boolean processEvents()", "class_method_signature": "FileWatcher.processEvents()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "take", "info", "get", "info", "pollEvents", "kind", "warn", "context", "resolve", "info", "name", "kind", "created", "get", "modified", "get", "deleted", "get", "warn", "get", "name", "kind", "reset", "info", "remove", "remove"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}