{"test_class": {"identifier": "FindMinNumberAtPositionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FindMinNumberAtPosition findMinNumberAtPosition;", "modifier": "private", "type": "FindMinNumberAtPosition", "declarator": "findMinNumberAtPosition", "var_name": "findMinNumberAtPosition"}], "file": "algs/src/test/java/com/github/pedrovgs/problem44/FindMinNumberAtPositionTest.java"}, "test_case": {"identifier": "shouldNotAcceptNegativePositionsToSearch", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void shouldNotAcceptNegativePositionsToSearch() {\n    BinaryNode<Integer> tree = new BinaryNode<Integer>(1);\n    findMinNumberAtPosition.find(tree, -1);\n  }", "signature": "void shouldNotAcceptNegativePositionsToSearch()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNegativePositionsToSearch()", "class_method_signature": "FindMinNumberAtPositionTest.shouldNotAcceptNegativePositionsToSearch()", "testcase": true, "constructor": false, "invocations": ["find"]}, "focal_class": {"identifier": "FindMinNumberAtPosition", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final BinaryTreeInOrder inOrder;", "modifier": "private final", "type": "BinaryTreeInOrder", "declarator": "inOrder", "var_name": "inOrder"}], "methods": [{"identifier": "FindMinNumberAtPosition", "parameters": "()", "modifiers": "public", "return": "", "signature": " FindMinNumberAtPosition()", "full_signature": "public  FindMinNumberAtPosition()", "class_method_signature": "FindMinNumberAtPosition.FindMinNumberAtPosition()", "testcase": false, "constructor": true}, {"identifier": "find", "parameters": "(BinaryNode<Integer> root, int position)", "modifiers": "public", "return": "Integer", "signature": "Integer find(BinaryNode<Integer> root, int position)", "full_signature": "public Integer find(BinaryNode<Integer> root, int position)", "class_method_signature": "FindMinNumberAtPosition.find(BinaryNode<Integer> root, int position)", "testcase": false, "constructor": false}, {"identifier": "getOrderedElements", "parameters": "(BinaryNode root)", "modifiers": "private", "return": "List<BinaryNode<Integer>>", "signature": "List<BinaryNode<Integer>> getOrderedElements(BinaryNode root)", "full_signature": "private List<BinaryNode<Integer>> getOrderedElements(BinaryNode root)", "class_method_signature": "FindMinNumberAtPosition.getOrderedElements(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "validatePosition", "parameters": "(int position, List<BinaryNode<Integer>> orderedElements)", "modifiers": "private", "return": "void", "signature": "void validatePosition(int position, List<BinaryNode<Integer>> orderedElements)", "full_signature": "private void validatePosition(int position, List<BinaryNode<Integer>> orderedElements)", "class_method_signature": "FindMinNumberAtPosition.validatePosition(int position, List<BinaryNode<Integer>> orderedElements)", "testcase": false, "constructor": false}, {"identifier": "validateInputData", "parameters": "(BinaryNode<Integer> root, int position)", "modifiers": "private", "return": "void", "signature": "void validateInputData(BinaryNode<Integer> root, int position)", "full_signature": "private void validateInputData(BinaryNode<Integer> root, int position)", "class_method_signature": "FindMinNumberAtPosition.validateInputData(BinaryNode<Integer> root, int position)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem44/FindMinNumberAtPosition.java"}, "focal_method": {"identifier": "find", "parameters": "(BinaryNode<Integer> root, int position)", "modifiers": "public", "return": "Integer", "body": "public Integer find(BinaryNode<Integer> root, int position) {\n    validateInputData(root, position);\n    List<BinaryNode<Integer>> orderedElements = getOrderedElements(root);\n    validatePosition(position, orderedElements);\n    return orderedElements.get(position - 1).getData();\n  }", "signature": "Integer find(BinaryNode<Integer> root, int position)", "full_signature": "public Integer find(BinaryNode<Integer> root, int position)", "class_method_signature": "FindMinNumberAtPosition.find(BinaryNode<Integer> root, int position)", "testcase": false, "constructor": false, "invocations": ["validateInputData", "getOrderedElements", "validatePosition", "getData", "get"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}