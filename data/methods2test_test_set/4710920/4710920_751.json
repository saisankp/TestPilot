{"test_class": {"identifier": "ReferenceConfigCacheTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/utils/ReferenceConfigCacheTest.java"}, "test_case": {"identifier": "testDestroy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDestroy() throws Exception {\n        ReferenceConfigCache cache = ReferenceConfigCache.getCache();\n        MockReferenceConfig config = buildMockReferenceConfig(\"org.apache.dubbo.config.utils.service.FooService\", \"group1\", \"1.0.0\");\n        cache.get(config);\n        XxxMockReferenceConfig configCopy = buildXxxMockReferenceConfig(\"org.apache.dubbo.config.utils.service.XxxService\", \"group1\", \"1.0.0\");\n        cache.get(configCopy);\n        assertEquals(2, cache.getReferredReferences().size());\n        cache.destroy(config);\n        assertTrue(config.isDestroyMethodRun());\n        assertEquals(1, cache.getReferredReferences().size());\n        cache.destroy(configCopy);\n        assertTrue(configCopy.isDestroyMethodRun());\n        assertEquals(0, cache.getReferredReferences().size());\n    }", "signature": "void testDestroy()", "full_signature": "@Test public void testDestroy()", "class_method_signature": "ReferenceConfigCacheTest.testDestroy()", "testcase": true, "constructor": false, "invocations": ["getCache", "buildMockReferenceConfig", "get", "buildXxxMockReferenceConfig", "get", "assertEquals", "size", "getReferredReferences", "destroy", "assertTrue", "isDestroyMethodRun", "assertEquals", "size", "getReferredReferences", "destroy", "assertTrue", "isDestroyMethodRun", "assertEquals", "size", "getReferredReferences"]}, "focal_class": {"identifier": "ReferenceConfigCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String DEFAULT_NAME = \"_DEFAULT_\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_NAME = \"_DEFAULT_\"", "var_name": "DEFAULT_NAME"}, {"original_string": "public static final KeyGenerator DEFAULT_KEY_GENERATOR = referenceConfig -> {\n        String iName = referenceConfig.getInterface();\n        if (StringUtils.isBlank(iName)) {\n            Class<?> clazz = referenceConfig.getInterfaceClass();\n            iName = clazz.getName();\n        }\n        if (StringUtils.isBlank(iName)) {\n            throw new IllegalArgumentException(\"No interface info in ReferenceConfig\" + referenceConfig);\n        }\n\n        StringBuilder ret = new StringBuilder();\n        if (!StringUtils.isBlank(referenceConfig.getGroup())) {\n            ret.append(referenceConfig.getGroup()).append(\"/\");\n        }\n        ret.append(iName);\n        if (!StringUtils.isBlank(referenceConfig.getVersion())) {\n            ret.append(\":\").append(referenceConfig.getVersion());\n        }\n        return ret.toString();\n    };", "modifier": "public static final", "type": "KeyGenerator", "declarator": "DEFAULT_KEY_GENERATOR = referenceConfig -> {\n        String iName = referenceConfig.getInterface();\n        if (StringUtils.isBlank(iName)) {\n            Class<?> clazz = referenceConfig.getInterfaceClass();\n            iName = clazz.getName();\n        }\n        if (StringUtils.isBlank(iName)) {\n            throw new IllegalArgumentException(\"No interface info in ReferenceConfig\" + referenceConfig);\n        }\n\n        StringBuilder ret = new StringBuilder();\n        if (!StringUtils.isBlank(referenceConfig.getGroup())) {\n            ret.append(referenceConfig.getGroup()).append(\"/\");\n        }\n        ret.append(iName);\n        if (!StringUtils.isBlank(referenceConfig.getVersion())) {\n            ret.append(\":\").append(referenceConfig.getVersion());\n        }\n        return ret.toString();\n    }", "var_name": "DEFAULT_KEY_GENERATOR"}, {"original_string": "static final ConcurrentMap<String, ReferenceConfigCache> CACHE_HOLDER = new ConcurrentHashMap<String, ReferenceConfigCache>();", "modifier": "static final", "type": "ConcurrentMap<String, ReferenceConfigCache>", "declarator": "CACHE_HOLDER = new ConcurrentHashMap<String, ReferenceConfigCache>()", "var_name": "CACHE_HOLDER"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final KeyGenerator generator;", "modifier": "private final", "type": "KeyGenerator", "declarator": "generator", "var_name": "generator"}, {"original_string": "private final ConcurrentMap<String, ReferenceConfigBase<?>> referredReferences = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<String, ReferenceConfigBase<?>>", "declarator": "referredReferences = new ConcurrentHashMap<>()", "var_name": "referredReferences"}, {"original_string": "private final ConcurrentMap<Class<?>, ConcurrentMap<String, Object>> proxies = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<Class<?>, ConcurrentMap<String, Object>>", "declarator": "proxies = new ConcurrentHashMap<>()", "var_name": "proxies"}], "methods": [{"identifier": "ReferenceConfigCache", "parameters": "(String name, KeyGenerator generator)", "modifiers": "private", "return": "", "signature": " ReferenceConfigCache(String name, KeyGenerator generator)", "full_signature": "private  ReferenceConfigCache(String name, KeyGenerator generator)", "class_method_signature": "ReferenceConfigCache.ReferenceConfigCache(String name, KeyGenerator generator)", "testcase": false, "constructor": true}, {"identifier": "getCache", "parameters": "()", "modifiers": "public static", "return": "ReferenceConfigCache", "signature": "ReferenceConfigCache getCache()", "full_signature": "public static ReferenceConfigCache getCache()", "class_method_signature": "ReferenceConfigCache.getCache()", "testcase": false, "constructor": false}, {"identifier": "getCache", "parameters": "(String name)", "modifiers": "public static", "return": "ReferenceConfigCache", "signature": "ReferenceConfigCache getCache(String name)", "full_signature": "public static ReferenceConfigCache getCache(String name)", "class_method_signature": "ReferenceConfigCache.getCache(String name)", "testcase": false, "constructor": false}, {"identifier": "getCache", "parameters": "(String name, KeyGenerator keyGenerator)", "modifiers": "public static", "return": "ReferenceConfigCache", "signature": "ReferenceConfigCache getCache(String name, KeyGenerator keyGenerator)", "full_signature": "public static ReferenceConfigCache getCache(String name, KeyGenerator keyGenerator)", "class_method_signature": "ReferenceConfigCache.getCache(String name, KeyGenerator keyGenerator)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(ReferenceConfigBase<T> referenceConfig)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T get(ReferenceConfigBase<T> referenceConfig)", "full_signature": "@SuppressWarnings(\"unchecked\") public T get(ReferenceConfigBase<T> referenceConfig)", "class_method_signature": "ReferenceConfigCache.get(ReferenceConfigBase<T> referenceConfig)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key, Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T get(String key, Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public T get(String key, Class<T> type)", "class_method_signature": "ReferenceConfigCache.get(String key, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T get(String key)", "full_signature": "@SuppressWarnings(\"unchecked\") public T get(String key)", "class_method_signature": "ReferenceConfigCache.get(String key)", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "(Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "List<T>", "signature": "List<T> getAll(Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public List<T> getAll(Class<T> type)", "class_method_signature": "ReferenceConfigCache.getAll(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T get(Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public T get(Class<T> type)", "class_method_signature": "ReferenceConfigCache.get(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(String key, Class<?> type)", "modifiers": "public", "return": "void", "signature": "void destroy(String key, Class<?> type)", "full_signature": "public void destroy(String key, Class<?> type)", "class_method_signature": "ReferenceConfigCache.destroy(String key, Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(Class<?> type)", "modifiers": "public", "return": "void", "signature": "void destroy(Class<?> type)", "full_signature": "public void destroy(Class<?> type)", "class_method_signature": "ReferenceConfigCache.destroy(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(ReferenceConfigBase<T> referenceConfig)", "modifiers": "public", "return": "void", "signature": "void destroy(ReferenceConfigBase<T> referenceConfig)", "full_signature": "public void destroy(ReferenceConfigBase<T> referenceConfig)", "class_method_signature": "ReferenceConfigCache.destroy(ReferenceConfigBase<T> referenceConfig)", "testcase": false, "constructor": false}, {"identifier": "destroyAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroyAll()", "full_signature": "public void destroyAll()", "class_method_signature": "ReferenceConfigCache.destroyAll()", "testcase": false, "constructor": false}, {"identifier": "getReferredReferences", "parameters": "()", "modifiers": "public", "return": "ConcurrentMap<String, ReferenceConfigBase<?>>", "signature": "ConcurrentMap<String, ReferenceConfigBase<?>> getReferredReferences()", "full_signature": "public ConcurrentMap<String, ReferenceConfigBase<?>> getReferredReferences()", "class_method_signature": "ReferenceConfigCache.getReferredReferences()", "testcase": false, "constructor": false}, {"identifier": "getProxies", "parameters": "()", "modifiers": "public", "return": "ConcurrentMap<Class<?>, ConcurrentMap<String, Object>>", "signature": "ConcurrentMap<Class<?>, ConcurrentMap<String, Object>> getProxies()", "full_signature": "public ConcurrentMap<Class<?>, ConcurrentMap<String, Object>> getProxies()", "class_method_signature": "ReferenceConfigCache.getProxies()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ReferenceConfigCache.toString()", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ReferenceConfigCache.java"}, "focal_method": {"identifier": "destroy", "parameters": "(String key, Class<?> type)", "modifiers": "public", "return": "void", "body": "public void destroy(String key, Class<?> type) {\n        ReferenceConfigBase<?> rc = referredReferences.remove(key);\n        if (rc == null) {\n            return;\n        }\n\n        ApplicationModel.getConfigManager().removeConfig(rc);\n        rc.destroy();\n\n        Map<String, Object> proxiesOftype = proxies.get(type);\n        if (CollectionUtils.isNotEmptyMap(proxiesOftype)) {\n            proxiesOftype.remove(key);\n            if (proxiesOftype.isEmpty()) {\n                proxies.remove(type);\n            }\n        }\n    }", "signature": "void destroy(String key, Class<?> type)", "full_signature": "public void destroy(String key, Class<?> type)", "class_method_signature": "ReferenceConfigCache.destroy(String key, Class<?> type)", "testcase": false, "constructor": false, "invocations": ["remove", "removeConfig", "getConfigManager", "destroy", "get", "isNotEmptyMap", "remove", "isEmpty", "remove"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}