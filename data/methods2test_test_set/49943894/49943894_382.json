{"test_class": {"identifier": "RouterControlHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DIDN_T_GET_THE_EXPECTED_IP4_ADDRESS = \"Didn't get the expected IP4 address\";", "modifier": "private static final", "type": "String", "declarator": "DIDN_T_GET_THE_EXPECTED_IP4_ADDRESS = \"Didn't get the expected IP4 address\"", "var_name": "DIDN_T_GET_THE_EXPECTED_IP4_ADDRESS"}, {"original_string": "private static final String IP4_ADDRES1 = \"IP4Addres1\";", "modifier": "private static final", "type": "String", "declarator": "IP4_ADDRES1 = \"IP4Addres1\"", "var_name": "IP4_ADDRES1"}, {"original_string": "private static final String IP4_ADDRES2 = \"IP4Addres2\";", "modifier": "private static final", "type": "String", "declarator": "IP4_ADDRES2 = \"IP4Addres2\"", "var_name": "IP4_ADDRES2"}, {"original_string": "protected static final long ROUTER_ID = 1L;", "modifier": "protected static final", "type": "long", "declarator": "ROUTER_ID = 1L", "var_name": "ROUTER_ID"}, {"original_string": "protected static final long NW_ID_1 = 11L;", "modifier": "protected static final", "type": "long", "declarator": "NW_ID_1 = 11L", "var_name": "NW_ID_1"}, {"original_string": "protected static final long NW_ID_2 = 12L;", "modifier": "protected static final", "type": "long", "declarator": "NW_ID_2 = 12L", "var_name": "NW_ID_2"}, {"original_string": "protected static final long NW_ID_3 = 13L;", "modifier": "protected static final", "type": "long", "declarator": "NW_ID_3 = 13L", "var_name": "NW_ID_3"}, {"original_string": "@Mock\n    protected NicDao nicDao;", "modifier": "@Mock\n    protected", "type": "NicDao", "declarator": "nicDao", "var_name": "nicDao"}, {"original_string": "@Mock\n    protected NetworkDao nwDao;", "modifier": "@Mock\n    protected", "type": "NetworkDao", "declarator": "nwDao", "var_name": "nwDao"}, {"original_string": "@Mock\n    protected DomainRouterDao routerDao;", "modifier": "@Mock\n    protected", "type": "DomainRouterDao", "declarator": "routerDao", "var_name": "routerDao"}, {"original_string": "@InjectMocks\n    protected RouterControlHelper routerControlHelper = new RouterControlHelper();", "modifier": "@InjectMocks\n    protected", "type": "RouterControlHelper", "declarator": "routerControlHelper = new RouterControlHelper()", "var_name": "routerControlHelper"}], "file": "server/src/test/java/com/cloud/network/router/RouterControlHelperTest.java"}, "test_case": {"identifier": "testGetRouterControlIpWithRouterIp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetRouterControlIpWithRouterIp() {\n        // Prepare\n        List<NicVO> nics = new ArrayList<>();\n        NicVO nic1 = mock(NicVO.class);\n        when(nic1.getNetworkId()).thenReturn(NW_ID_1);\n        when(nic1.getIPv4Address()).thenReturn(null);\n        nics.add(nic1);\n        when(this.nicDao.listByVmId(ROUTER_ID)).thenReturn(nics);\n\n        NetworkVO nw1 = mock(NetworkVO.class);\n        when(nw1.getTrafficType()).thenReturn(TrafficType.Public);\n        when(this.nwDao.findById(NW_ID_1)).thenReturn(nw1);\n\n        DomainRouterVO router = mock(DomainRouterVO.class);\n        when(this.routerDao.findById(ROUTER_ID)).thenReturn(router);\n        when(router.getPrivateIpAddress()).thenReturn(IP4_ADDRES1);\n\n        // Execute\n        final String ip4address = this.routerControlHelper.getRouterControlIp(ROUTER_ID);\n\n        // Assert\n        assertEquals(DIDN_T_GET_THE_EXPECTED_IP4_ADDRESS, IP4_ADDRES1, ip4address);\n    }", "signature": "void testGetRouterControlIpWithRouterIp()", "full_signature": "@Test public void testGetRouterControlIpWithRouterIp()", "class_method_signature": "RouterControlHelperTest.testGetRouterControlIpWithRouterIp()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getNetworkId", "thenReturn", "when", "getIPv4Address", "add", "thenReturn", "when", "listByVmId", "mock", "thenReturn", "when", "getTrafficType", "thenReturn", "when", "findById", "mock", "thenReturn", "when", "findById", "thenReturn", "when", "getPrivateIpAddress", "getRouterControlIp", "assertEquals"]}, "focal_class": {"identifier": "RouterControlHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RouterControlHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RouterControlHelper.class)", "var_name": "logger"}, {"original_string": "@Inject\n    private DomainRouterDao routerDao;", "modifier": "@Inject\n    private", "type": "DomainRouterDao", "declarator": "routerDao", "var_name": "routerDao"}, {"original_string": "@Inject\n    private NetworkDao networkDao;", "modifier": "@Inject\n    private", "type": "NetworkDao", "declarator": "networkDao", "var_name": "networkDao"}, {"original_string": "@Inject\n    private NicDao nicDao;", "modifier": "@Inject\n    private", "type": "NicDao", "declarator": "nicDao", "var_name": "nicDao"}], "methods": [{"identifier": "getRouterControlIp", "parameters": "(final long routerId)", "modifiers": "public", "return": "String", "signature": "String getRouterControlIp(final long routerId)", "full_signature": "public String getRouterControlIp(final long routerId)", "class_method_signature": "RouterControlHelper.getRouterControlIp(final long routerId)", "testcase": false, "constructor": false}, {"identifier": "getRouterIpInNetwork", "parameters": "(final long networkId, final long instanceId)", "modifiers": "public", "return": "String", "signature": "String getRouterIpInNetwork(final long networkId, final long instanceId)", "full_signature": "public String getRouterIpInNetwork(final long networkId, final long instanceId)", "class_method_signature": "RouterControlHelper.getRouterIpInNetwork(final long networkId, final long instanceId)", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/network/router/RouterControlHelper.java"}, "focal_method": {"identifier": "getRouterControlIp", "parameters": "(final long routerId)", "modifiers": "public", "return": "String", "body": "public String getRouterControlIp(final long routerId) {\n        String routerControlIpAddress = null;\n        final List<NicVO> nics = nicDao.listByVmId(routerId);\n        for (final NicVO n : nics) {\n            final NetworkVO nc = networkDao.findById(n.getNetworkId());\n            if (nc != null && nc.getTrafficType() == TrafficType.Control) {\n                routerControlIpAddress = n.getIPv4Address();\n                // router will have only one control ip\n                break;\n            }\n        }\n\n        if (routerControlIpAddress == null) {\n            logger.warn(\"Unable to find router's control ip in its attached NICs!. routerId: \" + routerId);\n            final DomainRouterVO router = routerDao.findById(routerId);\n            return router.getPrivateIpAddress();\n        }\n\n        return routerControlIpAddress;\n    }", "signature": "String getRouterControlIp(final long routerId)", "full_signature": "public String getRouterControlIp(final long routerId)", "class_method_signature": "RouterControlHelper.getRouterControlIp(final long routerId)", "testcase": false, "constructor": false, "invocations": ["listByVmId", "findById", "getNetworkId", "getTrafficType", "getIPv4Address", "warn", "findById", "getPrivateIpAddress"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}