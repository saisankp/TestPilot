{"test_class": {"identifier": "JettyXmppWebSocketServletTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ServerRuntimeContext serverRuntimeContext = Mockito.mock(ServerRuntimeContext.class);", "modifier": "private", "type": "ServerRuntimeContext", "declarator": "serverRuntimeContext = Mockito.mock(ServerRuntimeContext.class)", "var_name": "serverRuntimeContext"}, {"original_string": "private StanzaProcessor stanzaProcessor = Mockito.mock(StanzaProcessor.class);", "modifier": "private", "type": "StanzaProcessor", "declarator": "stanzaProcessor = Mockito.mock(StanzaProcessor.class)", "var_name": "stanzaProcessor"}], "file": "server/extensions/websockets/src/test/java/org/apache/vysper/xmpp/extension/websockets/JettyXmppWebSocketServletTest.java"}, "test_case": {"identifier": "doWebSocketConnectWithInvalidSubprotocl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doWebSocketConnectWithInvalidSubprotocl() throws ServletException {\n      JettyXmppWebSocketServlet servlet = new JettyXmppWebSocketServlet(serverRuntimeContext, stanzaProcessor);\n\n        WebSocket webSocket = servlet.doWebSocketConnect(null, \"dummy\");\n        Assert.assertNull(webSocket);\n    }", "signature": "void doWebSocketConnectWithInvalidSubprotocl()", "full_signature": "@Test public void doWebSocketConnectWithInvalidSubprotocl()", "class_method_signature": "JettyXmppWebSocketServletTest.doWebSocketConnectWithInvalidSubprotocl()", "testcase": true, "constructor": false, "invocations": ["doWebSocketConnect", "assertNull"]}, "focal_class": {"identifier": "JettyXmppWebSocketServlet", "superclass": "extends WebSocketServlet", "interfaces": "", "fields": [{"original_string": "public static final String SERVER_RUNTIME_CONTEXT_ATTRIBUTE = \"org.apache.vysper.xmpp.server.ServerRuntimeContext\";", "modifier": "public static final", "type": "String", "declarator": "SERVER_RUNTIME_CONTEXT_ATTRIBUTE = \"org.apache.vysper.xmpp.server.ServerRuntimeContext\"", "var_name": "SERVER_RUNTIME_CONTEXT_ATTRIBUTE"}, {"original_string": "private final static Logger LOG = LoggerFactory.getLogger(JettyXmppWebSocketServlet.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JettyXmppWebSocketServlet.class)", "var_name": "LOG"}, {"original_string": "private static final long serialVersionUID = 197413099255392883L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 197413099255392883L", "var_name": "serialVersionUID"}, {"original_string": "private static final String SUB_PROTOCOL = \"xmpp\";", "modifier": "private static final", "type": "String", "declarator": "SUB_PROTOCOL = \"xmpp\"", "var_name": "SUB_PROTOCOL"}, {"original_string": "private ServerRuntimeContext serverRuntimeContext;", "modifier": "private", "type": "ServerRuntimeContext", "declarator": "serverRuntimeContext", "var_name": "serverRuntimeContext"}, {"original_string": "private StanzaProcessor stanzaProcessor;", "modifier": "private", "type": "StanzaProcessor", "declarator": "stanzaProcessor", "var_name": "stanzaProcessor"}], "methods": [{"identifier": "JettyXmppWebSocketServlet", "parameters": "()", "modifiers": "public", "return": "", "signature": " JettyXmppWebSocketServlet()", "full_signature": "public  JettyXmppWebSocketServlet()", "class_method_signature": "JettyXmppWebSocketServlet.JettyXmppWebSocketServlet()", "testcase": false, "constructor": true}, {"identifier": "JettyXmppWebSocketServlet", "parameters": "(ServerRuntimeContext serverRuntimeContext, StanzaProcessor stanzaProcessor)", "modifiers": "public", "return": "", "signature": " JettyXmppWebSocketServlet(ServerRuntimeContext serverRuntimeContext, StanzaProcessor stanzaProcessor)", "full_signature": "public  JettyXmppWebSocketServlet(ServerRuntimeContext serverRuntimeContext, StanzaProcessor stanzaProcessor)", "class_method_signature": "JettyXmppWebSocketServlet.JettyXmppWebSocketServlet(ServerRuntimeContext serverRuntimeContext, StanzaProcessor stanzaProcessor)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "JettyXmppWebSocketServlet.init()", "testcase": false, "constructor": false}, {"identifier": "doWebSocketConnect", "parameters": "(HttpServletRequest request, String protocol)", "modifiers": "public", "return": "WebSocket", "signature": "WebSocket doWebSocketConnect(HttpServletRequest request, String protocol)", "full_signature": "public WebSocket doWebSocketConnect(HttpServletRequest request, String protocol)", "class_method_signature": "JettyXmppWebSocketServlet.doWebSocketConnect(HttpServletRequest request, String protocol)", "testcase": false, "constructor": false}], "file": "server/extensions/websockets/src/main/java/org/apache/vysper/xmpp/extension/websockets/JettyXmppWebSocketServlet.java"}, "focal_method": {"identifier": "doWebSocketConnect", "parameters": "(HttpServletRequest request, String protocol)", "modifiers": "public", "return": "WebSocket", "body": "public WebSocket doWebSocketConnect(HttpServletRequest request, String protocol) {\n        if (SUB_PROTOCOL.equals(protocol)) {\n            JettyXmppWebSocket sessionContext = new JettyXmppWebSocket(serverRuntimeContext, stanzaProcessor);\n            return sessionContext;\n        } else {\n            LOG.warn(\"Unsupported WebSocket sub protocol, must be \\\"xmpp\\\"\");\n            return null;\n        }\n    }", "signature": "WebSocket doWebSocketConnect(HttpServletRequest request, String protocol)", "full_signature": "public WebSocket doWebSocketConnect(HttpServletRequest request, String protocol)", "class_method_signature": "JettyXmppWebSocketServlet.doWebSocketConnect(HttpServletRequest request, String protocol)", "testcase": false, "constructor": false, "invocations": ["equals", "warn"]}, "repository": {"repo_id": 165370485, "url": "https://github.com/apache/mina-vysper", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 29305, "license": "licensed"}}