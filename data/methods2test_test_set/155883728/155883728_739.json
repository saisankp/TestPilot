{"test_class": {"identifier": "CheckSpecTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/CheckSpecTest.java"}, "test_case": {"identifier": "testInherits", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInherits() {\n        CheckSpec left = new CheckSpec();\n        CheckSpec right = new CheckSpec();\n        assertFalse(\"null left should not inherit null right\", left.inherits(right));\n        assertFalse(\"null right should not inherit null left\", left.isInheritedBy(right));\n        left.setName(\"left\");\n        left.setTemplate(\"\");\n        right.setName(\"\");\n        assertFalse(\"empty left should not inherit empty right\", left.inherits(right));\n        assertFalse(\"empty right should not inherit empty left\", left.isInheritedBy(right));\n        right.setName(\"right\");\n        assertFalse(\"empty left should not inherit empty right\", left.inherits(right));\n        assertFalse(\"empty right should not inherit empty left\", left.isInheritedBy(right));\n        left.setTemplate(\"notright\");\n        assertFalse(\"left with other template should not inherit right\", left.inherits(right));\n        assertFalse(\"right should not inherit left with other template\", left.isInheritedBy(right));\n        left.setTemplate(\"right\");\n        assertTrue(\"left with match template should inherit right\", left.inherits(right));\n        assertFalse(\"right should not inherit left with match template\", left.isInheritedBy(right));\n        right.setName(\"main/right\");\n        assertTrue(\"left with suffix-matching template should inherit right\", left.inherits(right));\n        assertFalse(\"right should not inherit left with suffix matching template\", left.isInheritedBy(right));\n    }", "signature": "void testInherits()", "full_signature": "@Test public void testInherits()", "class_method_signature": "CheckSpecTest.testInherits()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "inherits", "assertFalse", "isInheritedBy", "setName", "setTemplate", "setName", "assertFalse", "inherits", "assertFalse", "isInheritedBy", "setName", "assertFalse", "inherits", "assertFalse", "isInheritedBy", "setTemplate", "assertFalse", "inherits", "assertFalse", "isInheritedBy", "setTemplate", "assertTrue", "inherits", "assertFalse", "isInheritedBy", "setName", "assertTrue", "inherits", "assertFalse", "isInheritedBy"]}, "focal_class": {"identifier": "CheckSpec", "superclass": "", "interfaces": "implements JsonObjectConvertible", "fields": [{"original_string": "private static final JsonKeys KEYS = new JsonKeys() {\n        @Override\n        public String impl() {\n            return \"impl\";\n        }\n\n        @Override\n        public String inlineScript() {\n            return \"inlineScript\";\n        }\n\n        @Override\n        public String inlineEngine() {\n            return \"inlineEngine\";\n        }\n\n        @Override\n        public String name() {\n            return \"name\";\n        }\n\n        @Override\n        public String template() {\n            return \"template\";\n        }\n\n        @Override\n        public String skip() {\n            return \"skip\";\n        }\n\n        @Override\n        public String config() {\n            return \"config\";\n        }\n    };", "modifier": "private static final", "type": "JsonKeys", "declarator": "KEYS = new JsonKeys() {\n        @Override\n        public String impl() {\n            return \"impl\";\n        }\n\n        @Override\n        public String inlineScript() {\n            return \"inlineScript\";\n        }\n\n        @Override\n        public String inlineEngine() {\n            return \"inlineEngine\";\n        }\n\n        @Override\n        public String name() {\n            return \"name\";\n        }\n\n        @Override\n        public String template() {\n            return \"template\";\n        }\n\n        @Override\n        public String skip() {\n            return \"skip\";\n        }\n\n        @Override\n        public String config() {\n            return \"config\";\n        }\n    }", "var_name": "KEYS"}, {"original_string": "private String impl;", "modifier": "private", "type": "String", "declarator": "impl", "var_name": "impl"}, {"original_string": "private String inlineScript;", "modifier": "private", "type": "String", "declarator": "inlineScript", "var_name": "inlineScript"}, {"original_string": "private String inlineEngine;", "modifier": "private", "type": "String", "declarator": "inlineEngine", "var_name": "inlineEngine"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private String template;", "modifier": "private", "type": "String", "declarator": "template", "var_name": "template"}, {"original_string": "private boolean skip;", "modifier": "private", "type": "boolean", "declarator": "skip", "var_name": "skip"}, {"original_string": "private JsonObject config;", "modifier": "private", "type": "JsonObject", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "keys", "parameters": "()", "modifiers": "@NotNull public static", "return": "CheckSpec.JsonKeys", "signature": "CheckSpec.JsonKeys keys()", "full_signature": "@NotNull public static CheckSpec.JsonKeys keys()", "class_method_signature": "CheckSpec.keys()", "testcase": false, "constructor": false}, {"identifier": "getImpl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getImpl()", "full_signature": "public String getImpl()", "class_method_signature": "CheckSpec.getImpl()", "testcase": false, "constructor": false}, {"identifier": "setImpl", "parameters": "(final String impl)", "modifiers": "public", "return": "void", "signature": "void setImpl(final String impl)", "full_signature": "public void setImpl(final String impl)", "class_method_signature": "CheckSpec.setImpl(final String impl)", "testcase": false, "constructor": false}, {"identifier": "getInlineScript", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInlineScript()", "full_signature": "public String getInlineScript()", "class_method_signature": "CheckSpec.getInlineScript()", "testcase": false, "constructor": false}, {"identifier": "setInlineScript", "parameters": "(final String inlineScript)", "modifiers": "public", "return": "void", "signature": "void setInlineScript(final String inlineScript)", "full_signature": "public void setInlineScript(final String inlineScript)", "class_method_signature": "CheckSpec.setInlineScript(final String inlineScript)", "testcase": false, "constructor": false}, {"identifier": "getInlineEngine", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInlineEngine()", "full_signature": "public String getInlineEngine()", "class_method_signature": "CheckSpec.getInlineEngine()", "testcase": false, "constructor": false}, {"identifier": "setInlineEngine", "parameters": "(final String inlineEngine)", "modifiers": "public", "return": "void", "signature": "void setInlineEngine(final String inlineEngine)", "full_signature": "public void setInlineEngine(final String inlineEngine)", "class_method_signature": "CheckSpec.setInlineEngine(final String inlineEngine)", "testcase": false, "constructor": false}, {"identifier": "isAbstract", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isAbstract()", "full_signature": "public final boolean isAbstract()", "class_method_signature": "CheckSpec.isAbstract()", "testcase": false, "constructor": false}, {"identifier": "notAbstract", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean notAbstract()", "full_signature": "public final boolean notAbstract()", "class_method_signature": "CheckSpec.notAbstract()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "CheckSpec.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(final String name)", "modifiers": "public", "return": "void", "signature": "void setName(final String name)", "full_signature": "public void setName(final String name)", "class_method_signature": "CheckSpec.setName(final String name)", "testcase": false, "constructor": false}, {"identifier": "getTemplate", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTemplate()", "full_signature": "public String getTemplate()", "class_method_signature": "CheckSpec.getTemplate()", "testcase": false, "constructor": false}, {"identifier": "setTemplate", "parameters": "(final String template)", "modifiers": "public", "return": "void", "signature": "void setTemplate(final String template)", "full_signature": "public void setTemplate(final String template)", "class_method_signature": "CheckSpec.setTemplate(final String template)", "testcase": false, "constructor": false}, {"identifier": "mustInherit", "parameters": "()", "modifiers": "final", "return": "boolean", "signature": "boolean mustInherit()", "full_signature": "final boolean mustInherit()", "class_method_signature": "CheckSpec.mustInherit()", "testcase": false, "constructor": false}, {"identifier": "isSkip", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSkip()", "full_signature": "public boolean isSkip()", "class_method_signature": "CheckSpec.isSkip()", "testcase": false, "constructor": false}, {"identifier": "setSkip", "parameters": "(final boolean skip)", "modifiers": "public", "return": "void", "signature": "void setSkip(final boolean skip)", "full_signature": "public void setSkip(final boolean skip)", "class_method_signature": "CheckSpec.setSkip(final boolean skip)", "testcase": false, "constructor": false}, {"identifier": "notSkipped", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean notSkipped()", "full_signature": "public final boolean notSkipped()", "class_method_signature": "CheckSpec.notSkipped()", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "()", "modifiers": "public", "return": "JsonObject", "signature": "JsonObject getConfig()", "full_signature": "public JsonObject getConfig()", "class_method_signature": "CheckSpec.getConfig()", "testcase": false, "constructor": false}, {"identifier": "setConfig", "parameters": "(final JsonObject config)", "modifiers": "public", "return": "void", "signature": "void setConfig(final JsonObject config)", "full_signature": "public void setConfig(final JsonObject config)", "class_method_signature": "CheckSpec.setConfig(final JsonObject config)", "testcase": false, "constructor": false}, {"identifier": "overrides", "parameters": "(final @NotNull CheckSpec that)", "modifiers": "public final", "return": "boolean", "signature": "boolean overrides(final @NotNull CheckSpec that)", "full_signature": "public final boolean overrides(final @NotNull CheckSpec that)", "class_method_signature": "CheckSpec.overrides(final @NotNull CheckSpec that)", "testcase": false, "constructor": false}, {"identifier": "notUnnamed", "parameters": "()", "modifiers": "final", "return": "boolean", "signature": "boolean notUnnamed()", "full_signature": "final boolean notUnnamed()", "class_method_signature": "CheckSpec.notUnnamed()", "testcase": false, "constructor": false}, {"identifier": "isOverriddenBy", "parameters": "(final @NotNull CheckSpec that)", "modifiers": "public final", "return": "boolean", "signature": "boolean isOverriddenBy(final @NotNull CheckSpec that)", "full_signature": "public final boolean isOverriddenBy(final @NotNull CheckSpec that)", "class_method_signature": "CheckSpec.isOverriddenBy(final @NotNull CheckSpec that)", "testcase": false, "constructor": false}, {"identifier": "baseCompositeOver", "parameters": "(final @NotNull CheckSpec that)", "modifiers": "final", "return": "CheckSpec", "signature": "CheckSpec baseCompositeOver(final @NotNull CheckSpec that)", "full_signature": "final CheckSpec baseCompositeOver(final @NotNull CheckSpec that)", "class_method_signature": "CheckSpec.baseCompositeOver(final @NotNull CheckSpec that)", "testcase": false, "constructor": false}, {"identifier": "overlay", "parameters": "(final @NotNull CheckSpec that)", "modifiers": "public final", "return": "CheckSpec", "signature": "CheckSpec overlay(final @NotNull CheckSpec that)", "full_signature": "public final CheckSpec overlay(final @NotNull CheckSpec that)", "class_method_signature": "CheckSpec.overlay(final @NotNull CheckSpec that)", "testcase": false, "constructor": false}, {"identifier": "inherits", "parameters": "(final @NotNull CheckSpec that)", "modifiers": "public final", "return": "boolean", "signature": "boolean inherits(final @NotNull CheckSpec that)", "full_signature": "public final boolean inherits(final @NotNull CheckSpec that)", "class_method_signature": "CheckSpec.inherits(final @NotNull CheckSpec that)", "testcase": false, "constructor": false}, {"identifier": "isInheritedBy", "parameters": "(final @NotNull CheckSpec that)", "modifiers": "public final", "return": "boolean", "signature": "boolean isInheritedBy(final @NotNull CheckSpec that)", "full_signature": "public final boolean isInheritedBy(final @NotNull CheckSpec that)", "class_method_signature": "CheckSpec.isInheritedBy(final @NotNull CheckSpec that)", "testcase": false, "constructor": false}, {"identifier": "inherit", "parameters": "(final @NotNull CheckSpec that)", "modifiers": "public final", "return": "CheckSpec", "signature": "CheckSpec inherit(final @NotNull CheckSpec that)", "full_signature": "public final CheckSpec inherit(final @NotNull CheckSpec that)", "class_method_signature": "CheckSpec.inherit(final @NotNull CheckSpec that)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final @NotNull JsonObject json)", "modifiers": "public static", "return": "CheckSpec", "signature": "CheckSpec fromJson(final @NotNull JsonObject json)", "full_signature": "public static CheckSpec fromJson(final @NotNull JsonObject json)", "class_method_signature": "CheckSpec.fromJson(final @NotNull JsonObject json)", "testcase": false, "constructor": false}, {"identifier": "editJson", "parameters": "(final JsonObjectBuilder builder)", "modifiers": "@SuppressWarnings(\"UnusedParameter\") protected", "return": "void", "signature": "void editJson(final JsonObjectBuilder builder)", "full_signature": "@SuppressWarnings(\"UnusedParameter\") protected void editJson(final JsonObjectBuilder builder)", "class_method_signature": "CheckSpec.editJson(final JsonObjectBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "()", "modifiers": "@Override public final", "return": "JsonObject", "signature": "JsonObject toJson()", "full_signature": "@Override public final JsonObject toJson()", "class_method_signature": "CheckSpec.toJson()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CheckSpec.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "CheckSpec.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "CheckSpec.hashCode()", "testcase": false, "constructor": false}, {"identifier": "copyOf", "parameters": "(final @NotNull CheckSpec original)", "modifiers": "public static", "return": "CheckSpec", "signature": "CheckSpec copyOf(final @NotNull CheckSpec original)", "full_signature": "public static CheckSpec copyOf(final @NotNull CheckSpec original)", "class_method_signature": "CheckSpec.copyOf(final @NotNull CheckSpec original)", "testcase": false, "constructor": false}, {"identifier": "immutableCopyOf", "parameters": "(final @NotNull CheckSpec original)", "modifiers": "public static", "return": "ImmutableSpec", "signature": "ImmutableSpec immutableCopyOf(final @NotNull CheckSpec original)", "full_signature": "public static ImmutableSpec immutableCopyOf(final @NotNull CheckSpec original)", "class_method_signature": "CheckSpec.immutableCopyOf(final @NotNull CheckSpec original)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/CheckSpec.java"}, "focal_method": {"identifier": "inherits", "parameters": "(final @NotNull CheckSpec that)", "modifiers": "public final", "return": "boolean", "body": "public final boolean inherits(final @NotNull CheckSpec that) {\n        return this.mustInherit() && !that.mustInherit()\n                && !this.getTemplate().equals(this.getName())\n                && that.notUnnamed()\n                && (that.getName().equals(this.getTemplate())\n                || that.getName().endsWith(\"/\" + this.getTemplate()));\n    }", "signature": "boolean inherits(final @NotNull CheckSpec that)", "full_signature": "public final boolean inherits(final @NotNull CheckSpec that)", "class_method_signature": "CheckSpec.inherits(final @NotNull CheckSpec that)", "testcase": false, "constructor": false, "invocations": ["mustInherit", "mustInherit", "equals", "getTemplate", "getName", "notUnnamed", "equals", "getName", "getTemplate", "endsWith", "getName", "getTemplate"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}