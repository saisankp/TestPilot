{"test_class": {"identifier": "RunDaoTest", "superclass": "extends AbstractDaoTest", "interfaces": "", "fields": [{"original_string": "private RunDao dao;", "modifier": "private", "type": "RunDao", "declarator": "dao", "var_name": "dao"}, {"original_string": "private EventDao eventDao;", "modifier": "private", "type": "EventDao", "declarator": "eventDao", "var_name": "eventDao"}, {"original_string": "private RegistrationDao registrationDao;", "modifier": "private", "type": "RegistrationDao", "declarator": "registrationDao", "var_name": "registrationDao"}, {"original_string": "private HandicapGroupDao handicapGroupDao;", "modifier": "private", "type": "HandicapGroupDao", "declarator": "handicapGroupDao", "var_name": "handicapGroupDao"}, {"original_string": "private HandicapGroupSetDao handicapGroupSetDao;", "modifier": "private", "type": "HandicapGroupSetDao", "declarator": "handicapGroupSetDao", "var_name": "handicapGroupSetDao"}, {"original_string": "private CompetitionGroupDao competitionGroupDao;", "modifier": "private", "type": "CompetitionGroupDao", "declarator": "competitionGroupDao", "var_name": "competitionGroupDao"}, {"original_string": "private CompetitionGroupSetDao competitionGroupSetDao;", "modifier": "private", "type": "CompetitionGroupSetDao", "declarator": "competitionGroupSetDao", "var_name": "competitionGroupSetDao"}, {"original_string": "private Prerequisites prerequisites;", "modifier": "private", "type": "Prerequisites", "declarator": "prerequisites", "var_name": "prerequisites"}, {"original_string": "@Rule\n    public DAOTestRule daoTestRule = getDaoTestRuleBuilder()\n            .addEntityClass(RunHibernateEntity.class)\n            .addEntityClass(PersonHibernateEntity.class)\n            .addEntityClass(CarHibernateEntity.class)\n            .addEntityClass(EventHibernateEntity.class)\n            .addEntityClass(RegistrationHibernateEntity.class)\n            .addEntityClass(HandicapGroupHibernateEntity.class)\n            .addEntityClass(HandicapGroupSetHibernateEntity.class)\n            .addEntityClass(CompetitionGroupHibernateEntity.class)\n            .addEntityClass(CompetitionGroupSetHibernateEntity.class)\n            .build();", "modifier": "@Rule\n    public", "type": "DAOTestRule", "declarator": "daoTestRule = getDaoTestRuleBuilder()\n            .addEntityClass(RunHibernateEntity.class)\n            .addEntityClass(PersonHibernateEntity.class)\n            .addEntityClass(CarHibernateEntity.class)\n            .addEntityClass(EventHibernateEntity.class)\n            .addEntityClass(RegistrationHibernateEntity.class)\n            .addEntityClass(HandicapGroupHibernateEntity.class)\n            .addEntityClass(HandicapGroupSetHibernateEntity.class)\n            .addEntityClass(CompetitionGroupHibernateEntity.class)\n            .addEntityClass(CompetitionGroupSetHibernateEntity.class)\n            .build()", "var_name": "daoTestRule"}], "file": "service/src/test/java/org/coner/core/hibernate/dao/RunDaoTest.java"}, "test_case": {"identifier": "whenNoRunsThenFirstInSequenceWithoutRawTimeShouldBeNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void whenNoRunsThenFirstInSequenceWithoutRawTimeShouldBeNull() {\n        daoTestRule.inTransaction(() -> {\n            // no runs\n\n            RunHibernateEntity actual = dao.findFirstInSequenceWithoutRawTime(prerequisites.event);\n\n            assertThat(actual).isNull();\n        });\n    }", "signature": "void whenNoRunsThenFirstInSequenceWithoutRawTimeShouldBeNull()", "full_signature": "@Test public void whenNoRunsThenFirstInSequenceWithoutRawTimeShouldBeNull()", "class_method_signature": "RunDaoTest.whenNoRunsThenFirstInSequenceWithoutRawTimeShouldBeNull()", "testcase": true, "constructor": false, "invocations": ["inTransaction", "findFirstInSequenceWithoutRawTime", "isNull", "assertThat"]}, "focal_class": {"identifier": "RunDao", "superclass": "extends BaseHibernateEntityDao<RunHibernateEntity>", "interfaces": "", "fields": [], "methods": [{"identifier": "RunDao", "parameters": "(SessionFactory sessionFactory)", "modifiers": "@Inject public", "return": "", "signature": " RunDao(SessionFactory sessionFactory)", "full_signature": "@Inject public  RunDao(SessionFactory sessionFactory)", "class_method_signature": "RunDao.RunDao(SessionFactory sessionFactory)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(RunHibernateEntity entity)", "modifiers": "@Override public", "return": "void", "signature": "void create(RunHibernateEntity entity)", "full_signature": "@Override public void create(RunHibernateEntity entity)", "class_method_signature": "RunDao.create(RunHibernateEntity entity)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "()", "modifiers": "@Override public", "return": "List<RunHibernateEntity>", "signature": "List<RunHibernateEntity> findAll()", "full_signature": "@Override public List<RunHibernateEntity> findAll()", "class_method_signature": "RunDao.findAll()", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(String id)", "modifiers": "@Override public", "return": "RunHibernateEntity", "signature": "RunHibernateEntity findById(String id)", "full_signature": "@Override public RunHibernateEntity findById(String id)", "class_method_signature": "RunDao.findById(String id)", "testcase": false, "constructor": false}, {"identifier": "findLastInSequenceFor", "parameters": "(EventHibernateEntity event)", "modifiers": "public", "return": "RunHibernateEntity", "signature": "RunHibernateEntity findLastInSequenceFor(EventHibernateEntity event)", "full_signature": "public RunHibernateEntity findLastInSequenceFor(EventHibernateEntity event)", "class_method_signature": "RunDao.findLastInSequenceFor(EventHibernateEntity event)", "testcase": false, "constructor": false}, {"identifier": "findFirstInSequenceWithoutRawTime", "parameters": "(EventHibernateEntity event)", "modifiers": "public", "return": "RunHibernateEntity", "signature": "RunHibernateEntity findFirstInSequenceWithoutRawTime(EventHibernateEntity event)", "full_signature": "public RunHibernateEntity findFirstInSequenceWithoutRawTime(EventHibernateEntity event)", "class_method_signature": "RunDao.findFirstInSequenceWithoutRawTime(EventHibernateEntity event)", "testcase": false, "constructor": false}, {"identifier": "getAllWith", "parameters": "(EventHibernateEntity event)", "modifiers": "public", "return": "List<RunHibernateEntity>", "signature": "List<RunHibernateEntity> getAllWith(EventHibernateEntity event)", "full_signature": "public List<RunHibernateEntity> getAllWith(EventHibernateEntity event)", "class_method_signature": "RunDao.getAllWith(EventHibernateEntity event)", "testcase": false, "constructor": false}, {"identifier": "getAllWith", "parameters": "(RegistrationHibernateEntity registration)", "modifiers": "public", "return": "List<RunHibernateEntity>", "signature": "List<RunHibernateEntity> getAllWith(RegistrationHibernateEntity registration)", "full_signature": "public List<RunHibernateEntity> getAllWith(RegistrationHibernateEntity registration)", "class_method_signature": "RunDao.getAllWith(RegistrationHibernateEntity registration)", "testcase": false, "constructor": false}], "file": "service/src/main/java/org/coner/core/hibernate/dao/RunDao.java"}, "focal_method": {"identifier": "findFirstInSequenceWithoutRawTime", "parameters": "(EventHibernateEntity event)", "modifiers": "public", "return": "RunHibernateEntity", "body": "public RunHibernateEntity findFirstInSequenceWithoutRawTime(EventHibernateEntity event) {\n        Query query = namedQuery(RunHibernateEntity.QUERY_FIND_FIRST_WITHOUT_TIME_AT_EVENT);\n        query.setParameter(RunHibernateEntity.PARAMETER_EVENT_ID, event.getId());\n        List<RunHibernateEntity> runsWithoutRawTimes = list(query);\n        if (runsWithoutRawTimes != null && !runsWithoutRawTimes.isEmpty()) {\n            return runsWithoutRawTimes.get(0);\n        } else {\n            return null;\n        }\n    }", "signature": "RunHibernateEntity findFirstInSequenceWithoutRawTime(EventHibernateEntity event)", "full_signature": "public RunHibernateEntity findFirstInSequenceWithoutRawTime(EventHibernateEntity event)", "class_method_signature": "RunDao.findFirstInSequenceWithoutRawTime(EventHibernateEntity event)", "testcase": false, "constructor": false, "invocations": ["namedQuery", "setParameter", "getId", "list", "isEmpty", "get"]}, "repository": {"repo_id": 28649714, "url": "https://github.com/caeos/coner-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 1027, "license": "licensed"}}