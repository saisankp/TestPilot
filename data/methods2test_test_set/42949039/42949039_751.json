{"test_class": {"identifier": "UrlHelperTest", "superclass": "extends AbstractDaoTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private UrlHelper urlHelper;", "modifier": "@Autowired\n    private", "type": "UrlHelper", "declarator": "urlHelper", "var_name": "urlHelper"}], "file": "herd-code/herd-dao/src/test/java/org/finra/herd/dao/helper/UrlHelperTest.java"}, "test_case": {"identifier": "testParseJsonObjectFromUrlWithProxySettingsNoProxyPort", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseJsonObjectFromUrlWithProxySettingsNoProxyPort() throws Exception\n    {\n        // Override the configuration to specify proxy settings without proxy port.\n        Map<String, Object> overrideMap = new HashMap<>();\n        overrideMap.put(ConfigurationValue.HTTP_PROXY_HOST.getKey(), HTTP_PROXY_HOST);\n        modifyPropertySourceInEnvironment(overrideMap);\n\n        try\n        {\n            assertEquals(MockUrlOperationsImpl.MOCK_JSON_STRING, urlHelper.parseJsonObjectFromUrl(MockUrlOperationsImpl.MOCK_URL_VALID).toJSONString());\n        }\n        finally\n        {\n            // Restore the property sources so we don't affect other tests.\n            restorePropertySourceInEnvironment();\n        }\n    }", "signature": "void testParseJsonObjectFromUrlWithProxySettingsNoProxyPort()", "full_signature": "@Test public void testParseJsonObjectFromUrlWithProxySettingsNoProxyPort()", "class_method_signature": "UrlHelperTest.testParseJsonObjectFromUrlWithProxySettingsNoProxyPort()", "testcase": true, "constructor": false, "invocations": ["put", "getKey", "modifyPropertySourceInEnvironment", "assertEquals", "toJSONString", "parseJsonObjectFromUrl", "restorePropertySourceInEnvironment"]}, "focal_class": {"identifier": "UrlHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private UrlOperations urlOperations;", "modifier": "@Autowired\n    private", "type": "UrlOperations", "declarator": "urlOperations", "var_name": "urlOperations"}], "methods": [{"identifier": "parseJsonObjectFromUrl", "parameters": "(String url)", "modifiers": "public", "return": "JSONObject", "signature": "JSONObject parseJsonObjectFromUrl(String url)", "full_signature": "public JSONObject parseJsonObjectFromUrl(String url)", "class_method_signature": "UrlHelper.parseJsonObjectFromUrl(String url)", "testcase": false, "constructor": false}], "file": "herd-code/herd-dao/src/main/java/org/finra/herd/dao/helper/UrlHelper.java"}, "focal_method": {"identifier": "parseJsonObjectFromUrl", "parameters": "(String url)", "modifiers": "public", "return": "JSONObject", "body": "public JSONObject parseJsonObjectFromUrl(String url)\n    {\n        try\n        {\n            // Get proxy information.\n            Proxy proxy;\n            String httpProxyHost = configurationHelper.getProperty(ConfigurationValue.HTTP_PROXY_HOST);\n            Integer httpProxyPort = configurationHelper.getProperty(ConfigurationValue.HTTP_PROXY_PORT, Integer.class);\n            if (StringUtils.isNotBlank(httpProxyHost) && httpProxyPort != null)\n            {\n                proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(httpProxyHost, httpProxyPort));\n            }\n            else\n            {\n                proxy = Proxy.NO_PROXY;\n            }\n\n            // Open an input stream as per specified URL.\n            InputStream inputStream = urlOperations.openStream(new URL(url), proxy);\n\n            try\n            {\n                // Parse the JSON object from the input stream.\n                JSONParser jsonParser = new JSONParser();\n                return (JSONObject) jsonParser.parse(new InputStreamReader(inputStream, StandardCharsets.UTF_8));\n            }\n            catch (ParseException e)\n            {\n                throw new IllegalArgumentException(String.format(\"Failed to parse JSON object from the URL: url=\\\"%s\\\"\", url), e);\n            }\n            finally\n            {\n                inputStream.close();\n            }\n        }\n        catch (IOException e)\n        {\n            throw new IllegalArgumentException(String.format(\"Failed to read JSON from the URL: url=\\\"%s\\\"\", url), e);\n        }\n    }", "signature": "JSONObject parseJsonObjectFromUrl(String url)", "full_signature": "public JSONObject parseJsonObjectFromUrl(String url)", "class_method_signature": "UrlHelper.parseJsonObjectFromUrl(String url)", "testcase": false, "constructor": false, "invocations": ["getProperty", "getProperty", "isNotBlank", "openStream", "parse", "format", "close", "format"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}