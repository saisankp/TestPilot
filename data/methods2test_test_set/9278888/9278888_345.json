{"test_class": {"identifier": "SpanCustomizingApplicationEventListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock EventParser parser;", "modifier": "@Mock", "type": "EventParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "@Mock RequestEvent requestEvent;", "modifier": "@Mock", "type": "RequestEvent", "declarator": "requestEvent", "var_name": "requestEvent"}, {"original_string": "@Mock ContainerRequest request;", "modifier": "@Mock", "type": "ContainerRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock ExtendedUriInfo uriInfo;", "modifier": "@Mock", "type": "ExtendedUriInfo", "declarator": "uriInfo", "var_name": "uriInfo"}, {"original_string": "@Mock SpanCustomizer span;", "modifier": "@Mock", "type": "SpanCustomizer", "declarator": "span", "var_name": "span"}, {"original_string": "SpanCustomizingApplicationEventListener listener;", "modifier": "", "type": "SpanCustomizingApplicationEventListener", "declarator": "listener", "var_name": "listener"}], "file": "instrumentation/jersey-server/src/test/java/brave/jersey/server/SpanCustomizingApplicationEventListenerTest.java"}, "test_case": {"identifier": "route_invalid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void route_invalid() {\n    setBaseUri(\"/\");\n    when(uriInfo.getMatchedTemplates()).thenReturn(Arrays.asList(\n      new PathTemplate(\"/\"),\n      new PathTemplate(\"/\")\n    ));\n\n    assertThat(SpanCustomizingApplicationEventListener.route(request))\n      .isEmpty();\n  }", "signature": "void route_invalid()", "full_signature": "@Test public void route_invalid()", "class_method_signature": "SpanCustomizingApplicationEventListenerTest.route_invalid()", "testcase": true, "constructor": false, "invocations": ["setBaseUri", "thenReturn", "when", "getMatchedTemplates", "asList", "isEmpty", "assertThat", "route"]}, "focal_class": {"identifier": "SpanCustomizingApplicationEventListener", "superclass": "", "interfaces": "implements ApplicationEventListener, RequestEventListener", "fields": [{"original_string": "final EventParser parser;", "modifier": "final", "type": "EventParser", "declarator": "parser", "var_name": "parser"}], "methods": [{"identifier": "create", "parameters": "()", "modifiers": "public static", "return": "SpanCustomizingApplicationEventListener", "signature": "SpanCustomizingApplicationEventListener create()", "full_signature": "public static SpanCustomizingApplicationEventListener create()", "class_method_signature": "SpanCustomizingApplicationEventListener.create()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(EventParser parser)", "modifiers": "public static", "return": "SpanCustomizingApplicationEventListener", "signature": "SpanCustomizingApplicationEventListener create(EventParser parser)", "full_signature": "public static SpanCustomizingApplicationEventListener create(EventParser parser)", "class_method_signature": "SpanCustomizingApplicationEventListener.create(EventParser parser)", "testcase": false, "constructor": false}, {"identifier": "SpanCustomizingApplicationEventListener", "parameters": "(EventParser parser)", "modifiers": "@Inject", "return": "", "signature": " SpanCustomizingApplicationEventListener(EventParser parser)", "full_signature": "@Inject  SpanCustomizingApplicationEventListener(EventParser parser)", "class_method_signature": "SpanCustomizingApplicationEventListener.SpanCustomizingApplicationEventListener(EventParser parser)", "testcase": false, "constructor": true}, {"identifier": "onEvent", "parameters": "(ApplicationEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void onEvent(ApplicationEvent event)", "full_signature": "@Override public void onEvent(ApplicationEvent event)", "class_method_signature": "SpanCustomizingApplicationEventListener.onEvent(ApplicationEvent event)", "testcase": false, "constructor": false}, {"identifier": "onRequest", "parameters": "(RequestEvent requestEvent)", "modifiers": "@Override public", "return": "RequestEventListener", "signature": "RequestEventListener onRequest(RequestEvent requestEvent)", "full_signature": "@Override public RequestEventListener onRequest(RequestEvent requestEvent)", "class_method_signature": "SpanCustomizingApplicationEventListener.onRequest(RequestEvent requestEvent)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(RequestEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void onEvent(RequestEvent event)", "full_signature": "@Override public void onEvent(RequestEvent event)", "class_method_signature": "SpanCustomizingApplicationEventListener.onEvent(RequestEvent event)", "testcase": false, "constructor": false}, {"identifier": "unwrapError", "parameters": "(RequestEvent event)", "modifiers": "@Nullable static", "return": "Throwable", "signature": "Throwable unwrapError(RequestEvent event)", "full_signature": "@Nullable static Throwable unwrapError(RequestEvent event)", "class_method_signature": "SpanCustomizingApplicationEventListener.unwrapError(RequestEvent event)", "testcase": false, "constructor": false}, {"identifier": "route", "parameters": "(ContainerRequest request)", "modifiers": "@Nullable static", "return": "String", "signature": "String route(ContainerRequest request)", "full_signature": "@Nullable static String route(ContainerRequest request)", "class_method_signature": "SpanCustomizingApplicationEventListener.route(ContainerRequest request)", "testcase": false, "constructor": false}], "file": "instrumentation/jersey-server/src/main/java/brave/jersey/server/SpanCustomizingApplicationEventListener.java"}, "focal_method": {"identifier": "route", "parameters": "(ContainerRequest request)", "modifiers": "@Nullable static", "return": "String", "body": "@Nullable static String route(ContainerRequest request) {\n    ExtendedUriInfo uriInfo = request.getUriInfo();\n    List<UriTemplate> templates = uriInfo.getMatchedTemplates();\n    int templateCount = templates.size();\n    if (templateCount == 0) return \"\";\n    StringBuilder builder = null; // don't allocate unless you need it!\n    String basePath = uriInfo.getBaseUri().getPath();\n    String result = null;\n    if (!\"/\" .equals(basePath)) { // skip empty base paths\n      result = basePath;\n    }\n    for (int i = templateCount - 1; i >= 0; i--) {\n      String template = templates.get(i).getTemplate();\n      if (\"/\" .equals(template)) continue; // skip allocation\n      if (builder != null) {\n        builder.append(template);\n      } else if (result != null) {\n        builder = new StringBuilder(result).append(template);\n        result = null;\n      } else {\n        result = template;\n      }\n    }\n    return result != null ? result : builder != null ? builder.toString() : \"\";\n  }", "signature": "String route(ContainerRequest request)", "full_signature": "@Nullable static String route(ContainerRequest request)", "class_method_signature": "SpanCustomizingApplicationEventListener.route(ContainerRequest request)", "testcase": false, "constructor": false, "invocations": ["getUriInfo", "getMatchedTemplates", "size", "getPath", "getBaseUri", "equals", "getTemplate", "get", "equals", "append", "append", "toString"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}