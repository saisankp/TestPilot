{"test_class": {"identifier": "StringsTest", "superclass": "", "interfaces": "", "fields": [], "file": "debezium-core/src/test/java/io/debezium/util/StringsTest.java"}, "test_case": {"identifier": "setLengthShouldAppendCharacterForEmptyStrings", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setLengthShouldAppendCharacterForEmptyStrings() {\n        assertEquals(\"          \", Strings.setLength(\"\", 10, ' '));\n    }", "signature": "void setLengthShouldAppendCharacterForEmptyStrings()", "full_signature": "@Test public void setLengthShouldAppendCharacterForEmptyStrings()", "class_method_signature": "StringsTest.setLengthShouldAppendCharacterForEmptyStrings()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "setLength"]}, "focal_class": {"identifier": "Strings", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern TIME_PATTERN = Pattern.compile(\"([0-9]*):([0-9]*):([0-9]*)(\\\\.([0-9]*))?\");", "modifier": "private static final", "type": "Pattern", "declarator": "TIME_PATTERN = Pattern.compile(\"([0-9]*):([0-9]*):([0-9]*)(\\\\.([0-9]*))?\")", "var_name": "TIME_PATTERN"}, {"original_string": "private static final String CURLY_PREFIX = \"${\";", "modifier": "private static final", "type": "String", "declarator": "CURLY_PREFIX = \"${\"", "var_name": "CURLY_PREFIX"}, {"original_string": "private static final String CURLY_SUFFIX = \"}\";", "modifier": "private static final", "type": "String", "declarator": "CURLY_SUFFIX = \"}\"", "var_name": "CURLY_SUFFIX"}, {"original_string": "private static final String VAR_DELIM = \",\";", "modifier": "private static final", "type": "String", "declarator": "VAR_DELIM = \",\"", "var_name": "VAR_DELIM"}, {"original_string": "private static final String DEFAULT_DELIM = \":\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_DELIM = \":\"", "var_name": "DEFAULT_DELIM"}], "methods": [{"identifier": "setOf", "parameters": "(String input, Function<String, String[]> splitter, Function<String, T> factory)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> setOf(String input, Function<String, String[]> splitter, Function<String, T> factory)", "full_signature": "public static Set<T> setOf(String input, Function<String, String[]> splitter, Function<String, T> factory)", "class_method_signature": "Strings.setOf(String input, Function<String, String[]> splitter, Function<String, T> factory)", "testcase": false, "constructor": false}, {"identifier": "listOf", "parameters": "(String input, Function<String, String[]> splitter, Function<String, T> factory)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> listOf(String input, Function<String, String[]> splitter, Function<String, T> factory)", "full_signature": "public static List<T> listOf(String input, Function<String, String[]> splitter, Function<String, T> factory)", "class_method_signature": "Strings.listOf(String input, Function<String, String[]> splitter, Function<String, T> factory)", "testcase": false, "constructor": false}, {"identifier": "setOf", "parameters": "(String input, char delimiter, Function<String, T> factory)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> setOf(String input, char delimiter, Function<String, T> factory)", "full_signature": "public static Set<T> setOf(String input, char delimiter, Function<String, T> factory)", "class_method_signature": "Strings.setOf(String input, char delimiter, Function<String, T> factory)", "testcase": false, "constructor": false}, {"identifier": "setOf", "parameters": "(String input, Function<String, T> factory)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> setOf(String input, Function<String, T> factory)", "full_signature": "public static Set<T> setOf(String input, Function<String, T> factory)", "class_method_signature": "Strings.setOf(String input, Function<String, T> factory)", "testcase": false, "constructor": false}, {"identifier": "setOfRegex", "parameters": "(String input, int regexFlags)", "modifiers": "public static", "return": "Set<Pattern>", "signature": "Set<Pattern> setOfRegex(String input, int regexFlags)", "full_signature": "public static Set<Pattern> setOfRegex(String input, int regexFlags)", "class_method_signature": "Strings.setOfRegex(String input, int regexFlags)", "testcase": false, "constructor": false}, {"identifier": "setOfRegex", "parameters": "(String input)", "modifiers": "public static", "return": "Set<Pattern>", "signature": "Set<Pattern> setOfRegex(String input)", "full_signature": "public static Set<Pattern> setOfRegex(String input)", "class_method_signature": "Strings.setOfRegex(String input)", "testcase": false, "constructor": false}, {"identifier": "listOfRegex", "parameters": "(String input, int regexFlags)", "modifiers": "public static", "return": "List<Pattern>", "signature": "List<Pattern> listOfRegex(String input, int regexFlags)", "full_signature": "public static List<Pattern> listOfRegex(String input, int regexFlags)", "class_method_signature": "Strings.listOfRegex(String input, int regexFlags)", "testcase": false, "constructor": false}, {"identifier": "splitLines", "parameters": "(final String content)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> splitLines(final String content)", "full_signature": "public static List<String> splitLines(final String content)", "class_method_signature": "Strings.splitLines(final String content)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(CharSequence str1, CharSequence str2)", "modifiers": "public static", "return": "int", "signature": "int compareTo(CharSequence str1, CharSequence str2)", "full_signature": "public static int compareTo(CharSequence str1, CharSequence str2)", "class_method_signature": "Strings.compareTo(CharSequence str1, CharSequence str2)", "testcase": false, "constructor": false}, {"identifier": "equalsIgnoreCase", "parameters": "(String str1, String str2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsIgnoreCase(String str1, String str2)", "full_signature": "public static boolean equalsIgnoreCase(String str1, String str2)", "class_method_signature": "Strings.equalsIgnoreCase(String str1, String str2)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(CharSequence delimiter, int[] values)", "modifiers": "public static", "return": "String", "signature": "String join(CharSequence delimiter, int[] values)", "full_signature": "public static String join(CharSequence delimiter, int[] values)", "class_method_signature": "Strings.join(CharSequence delimiter, int[] values)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(CharSequence delimiter, Iterable<T> values)", "modifiers": "public static", "return": "String", "signature": "String join(CharSequence delimiter, Iterable<T> values)", "full_signature": "public static String join(CharSequence delimiter, Iterable<T> values)", "class_method_signature": "Strings.join(CharSequence delimiter, Iterable<T> values)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(CharSequence delimiter, Iterable<T> values, Function<T, String> conversion)", "modifiers": "public static", "return": "String", "signature": "String join(CharSequence delimiter, Iterable<T> values, Function<T, String> conversion)", "full_signature": "public static String join(CharSequence delimiter, Iterable<T> values, Function<T, String> conversion)", "class_method_signature": "Strings.join(CharSequence delimiter, Iterable<T> values, Function<T, String> conversion)", "testcase": false, "constructor": false}, {"identifier": "trim", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String trim(String str)", "full_signature": "public static String trim(String str)", "class_method_signature": "Strings.trim(String str)", "testcase": false, "constructor": false}, {"identifier": "trim", "parameters": "(String str, CharacterPredicate predicate)", "modifiers": "public static", "return": "String", "signature": "String trim(String str, CharacterPredicate predicate)", "full_signature": "public static String trim(String str, CharacterPredicate predicate)", "class_method_signature": "Strings.trim(String str, CharacterPredicate predicate)", "testcase": false, "constructor": false}, {"identifier": "createString", "parameters": "(final char charToRepeat,\n                                      int numberOfRepeats)", "modifiers": "public static", "return": "String", "signature": "String createString(final char charToRepeat,\n                                      int numberOfRepeats)", "full_signature": "public static String createString(final char charToRepeat,\n                                      int numberOfRepeats)", "class_method_signature": "Strings.createString(final char charToRepeat,\n                                      int numberOfRepeats)", "testcase": false, "constructor": false}, {"identifier": "pad", "parameters": "(String original,\n                             int length,\n                             char padChar)", "modifiers": "public static", "return": "String", "signature": "String pad(String original,\n                             int length,\n                             char padChar)", "full_signature": "public static String pad(String original,\n                             int length,\n                             char padChar)", "class_method_signature": "Strings.pad(String original,\n                             int length,\n                             char padChar)", "testcase": false, "constructor": false}, {"identifier": "setLength", "parameters": "(String original,\n                                   int length,\n                                   char padChar)", "modifiers": "public static", "return": "String", "signature": "String setLength(String original,\n                                   int length,\n                                   char padChar)", "full_signature": "public static String setLength(String original,\n                                   int length,\n                                   char padChar)", "class_method_signature": "Strings.setLength(String original,\n                                   int length,\n                                   char padChar)", "testcase": false, "constructor": false}, {"identifier": "justify", "parameters": "(Justify justify,\n                                 String str,\n                                 final int width,\n                                 char padWithChar)", "modifiers": "public static", "return": "String", "signature": "String justify(Justify justify,\n                                 String str,\n                                 final int width,\n                                 char padWithChar)", "full_signature": "public static String justify(Justify justify,\n                                 String str,\n                                 final int width,\n                                 char padWithChar)", "class_method_signature": "Strings.justify(Justify justify,\n                                 String str,\n                                 final int width,\n                                 char padWithChar)", "testcase": false, "constructor": false}, {"identifier": "justifyRight", "parameters": "(String str,\n                                      final int width,\n                                      char padWithChar)", "modifiers": "public static", "return": "String", "signature": "String justifyRight(String str,\n                                      final int width,\n                                      char padWithChar)", "full_signature": "public static String justifyRight(String str,\n                                      final int width,\n                                      char padWithChar)", "class_method_signature": "Strings.justifyRight(String str,\n                                      final int width,\n                                      char padWithChar)", "testcase": false, "constructor": false}, {"identifier": "justifyLeft", "parameters": "(String str,\n                                     final int width,\n                                     char padWithChar)", "modifiers": "public static", "return": "String", "signature": "String justifyLeft(String str,\n                                     final int width,\n                                     char padWithChar)", "full_signature": "public static String justifyLeft(String str,\n                                     final int width,\n                                     char padWithChar)", "class_method_signature": "Strings.justifyLeft(String str,\n                                     final int width,\n                                     char padWithChar)", "testcase": false, "constructor": false}, {"identifier": "justifyLeft", "parameters": "(String str,\n                                        final int width,\n                                        char padWithChar,\n                                        boolean trimWhitespace)", "modifiers": "protected static", "return": "String", "signature": "String justifyLeft(String str,\n                                        final int width,\n                                        char padWithChar,\n                                        boolean trimWhitespace)", "full_signature": "protected static String justifyLeft(String str,\n                                        final int width,\n                                        char padWithChar,\n                                        boolean trimWhitespace)", "class_method_signature": "Strings.justifyLeft(String str,\n                                        final int width,\n                                        char padWithChar,\n                                        boolean trimWhitespace)", "testcase": false, "constructor": false}, {"identifier": "justifyCenter", "parameters": "(String str,\n                                       final int width,\n                                       char padWithChar)", "modifiers": "public static", "return": "String", "signature": "String justifyCenter(String str,\n                                       final int width,\n                                       char padWithChar)", "full_signature": "public static String justifyCenter(String str,\n                                       final int width,\n                                       char padWithChar)", "class_method_signature": "Strings.justifyCenter(String str,\n                                       final int width,\n                                       char padWithChar)", "testcase": false, "constructor": false}, {"identifier": "getStackTrace", "parameters": "(Throwable throwable)", "modifiers": "public static", "return": "String", "signature": "String getStackTrace(Throwable throwable)", "full_signature": "public static String getStackTrace(Throwable throwable)", "class_method_signature": "Strings.getStackTrace(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "asNumber", "parameters": "(String value)", "modifiers": "public static", "return": "Number", "signature": "Number asNumber(String value)", "full_signature": "public static Number asNumber(String value)", "class_method_signature": "Strings.asNumber(String value)", "testcase": false, "constructor": false}, {"identifier": "asNumber", "parameters": "(String value, Supplier<Number> defaultValueProvider)", "modifiers": "public static", "return": "Number", "signature": "Number asNumber(String value, Supplier<Number> defaultValueProvider)", "full_signature": "public static Number asNumber(String value, Supplier<Number> defaultValueProvider)", "class_method_signature": "Strings.asNumber(String value, Supplier<Number> defaultValueProvider)", "testcase": false, "constructor": false}, {"identifier": "asInt", "parameters": "(String value, int defaultValue)", "modifiers": "public static", "return": "int", "signature": "int asInt(String value, int defaultValue)", "full_signature": "public static int asInt(String value, int defaultValue)", "class_method_signature": "Strings.asInt(String value, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "asLong", "parameters": "(String value, long defaultValue)", "modifiers": "public static", "return": "long", "signature": "long asLong(String value, long defaultValue)", "full_signature": "public static long asLong(String value, long defaultValue)", "class_method_signature": "Strings.asLong(String value, long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "asDouble", "parameters": "(String value, double defaultValue)", "modifiers": "public static", "return": "double", "signature": "double asDouble(String value, double defaultValue)", "full_signature": "public static double asDouble(String value, double defaultValue)", "class_method_signature": "Strings.asDouble(String value, double defaultValue)", "testcase": false, "constructor": false}, {"identifier": "asBoolean", "parameters": "(String value, boolean defaultValue)", "modifiers": "public static", "return": "boolean", "signature": "boolean asBoolean(String value, boolean defaultValue)", "full_signature": "public static boolean asBoolean(String value, boolean defaultValue)", "class_method_signature": "Strings.asBoolean(String value, boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "asDuration", "parameters": "(String timeString)", "modifiers": "public static", "return": "Duration", "signature": "Duration asDuration(String timeString)", "full_signature": "public static Duration asDuration(String timeString)", "class_method_signature": "Strings.asDuration(String timeString)", "testcase": false, "constructor": false}, {"identifier": "duration", "parameters": "(long durationInMillis)", "modifiers": "public static", "return": "String", "signature": "String duration(long durationInMillis)", "full_signature": "public static String duration(long durationInMillis)", "class_method_signature": "Strings.duration(long durationInMillis)", "testcase": false, "constructor": false}, {"identifier": "replaceVariablesWith", "parameters": "(Function<String, String> replacementsByVariableName)", "modifiers": "public static", "return": "Function<String, String>", "signature": "Function<String, String> replaceVariablesWith(Function<String, String> replacementsByVariableName)", "full_signature": "public static Function<String, String> replaceVariablesWith(Function<String, String> replacementsByVariableName)", "class_method_signature": "Strings.replaceVariablesWith(Function<String, String> replacementsByVariableName)", "testcase": false, "constructor": false}, {"identifier": "replaceVariables", "parameters": "(String value, Function<String, String> replacementsByVariableName)", "modifiers": "public static", "return": "String", "signature": "String replaceVariables(String value, Function<String, String> replacementsByVariableName)", "full_signature": "public static String replaceVariables(String value, Function<String, String> replacementsByVariableName)", "class_method_signature": "Strings.replaceVariables(String value, Function<String, String> replacementsByVariableName)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String str,\n                                      String splitter)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> split(String str,\n                                      String splitter)", "full_signature": "private static List<String> split(String str,\n                                      String splitter)", "class_method_signature": "Strings.split(String str,\n                                      String splitter)", "testcase": false, "constructor": false}, {"identifier": "isUuid", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isUuid(String str)", "full_signature": "public static boolean isUuid(String str)", "class_method_signature": "Strings.isUuid(String str)", "testcase": false, "constructor": false}, {"identifier": "isNullOrEmpty", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNullOrEmpty(String str)", "full_signature": "public static boolean isNullOrEmpty(String str)", "class_method_signature": "Strings.isNullOrEmpty(String str)", "testcase": false, "constructor": false}, {"identifier": "isNumeric", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNumeric(String str)", "full_signature": "public static boolean isNumeric(String str)", "class_method_signature": "Strings.isNumeric(String str)", "testcase": false, "constructor": false}, {"identifier": "unquoteIdentifierPart", "parameters": "(String identifierPart)", "modifiers": "public static", "return": "String", "signature": "String unquoteIdentifierPart(String identifierPart)", "full_signature": "public static String unquoteIdentifierPart(String identifierPart)", "class_method_signature": "Strings.unquoteIdentifierPart(String identifierPart)", "testcase": false, "constructor": false}, {"identifier": "hexStringToByteArray", "parameters": "(String hexString)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] hexStringToByteArray(String hexString)", "full_signature": "public static byte[] hexStringToByteArray(String hexString)", "class_method_signature": "Strings.hexStringToByteArray(String hexString)", "testcase": false, "constructor": false}, {"identifier": "startsWithIgnoreCase", "parameters": "(String str, String prefix)", "modifiers": "public static", "return": "boolean", "signature": "boolean startsWithIgnoreCase(String str, String prefix)", "full_signature": "public static boolean startsWithIgnoreCase(String str, String prefix)", "class_method_signature": "Strings.startsWithIgnoreCase(String str, String prefix)", "testcase": false, "constructor": false}, {"identifier": "getBegin", "parameters": "(String str, int length)", "modifiers": "public static", "return": "String", "signature": "String getBegin(String str, int length)", "full_signature": "public static String getBegin(String str, int length)", "class_method_signature": "Strings.getBegin(String str, int length)", "testcase": false, "constructor": false}, {"identifier": "deriveQuotingChar", "parameters": "(String identifierPart)", "modifiers": "private static", "return": "Character", "signature": "Character deriveQuotingChar(String identifierPart)", "full_signature": "private static Character deriveQuotingChar(String identifierPart)", "class_method_signature": "Strings.deriveQuotingChar(String identifierPart)", "testcase": false, "constructor": false}, {"identifier": "Strings", "parameters": "()", "modifiers": "private", "return": "", "signature": " Strings()", "full_signature": "private  Strings()", "class_method_signature": "Strings.Strings()", "testcase": false, "constructor": true}], "file": "debezium-core/src/main/java/io/debezium/util/Strings.java"}, "focal_method": {"identifier": "setLength", "parameters": "(String original,\n                                   int length,\n                                   char padChar)", "modifiers": "public static", "return": "String", "body": "public static String setLength(String original,\n                                   int length,\n                                   char padChar) {\n        return justifyLeft(original, length, padChar, false);\n    }", "signature": "String setLength(String original,\n                                   int length,\n                                   char padChar)", "full_signature": "public static String setLength(String original,\n                                   int length,\n                                   char padChar)", "class_method_signature": "Strings.setLength(String original,\n                                   int length,\n                                   char padChar)", "testcase": false, "constructor": false, "invocations": ["justifyLeft"]}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}