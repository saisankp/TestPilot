{"test_class": {"identifier": "CDAR2ValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(CDAR2ValidatorTest.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(CDAR2ValidatorTest.class.getName())", "var_name": "LOG"}, {"original_string": "private CDAR2Validator validator;", "modifier": "private", "type": "CDAR2Validator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private Map<Object, Object> context;", "modifier": "private", "type": "Map<Object, Object>", "declarator": "context", "var_name": "context"}], "file": "modules/cda/mdht/src/test/java/org/openehealth/ipf/modules/cda/CDAR2ValidatorTest.java"}, "test_case": {"identifier": "validateCCDError", "parameters": "()", "modifiers": "@Test(expected = ValidationException.class) public final", "return": "void", "body": "@Test(expected = ValidationException.class)\n    public final void validateCCDError() throws Exception {\n        LOG.info(\"Validating erroneous CCD document\");\n        InputStream is = getClass().getResourceAsStream(\n            \"/builders/content/document/InvalidCCDDocument.xml\");\n        ClinicalDocument ccd = CDAUtil.load(is);\n        validator.validate(ccd, null);\n        // TODO check expected validation errors\n    }", "signature": "void validateCCDError()", "full_signature": "@Test(expected = ValidationException.class) public final void validateCCDError()", "class_method_signature": "CDAR2ValidatorTest.validateCCDError()", "testcase": true, "constructor": false, "invocations": ["info", "getResourceAsStream", "getClass", "load", "validate"]}, "focal_class": {"identifier": "CDAR2Validator", "superclass": "", "interfaces": "implements Validator<ClinicalDocument, Map<Object, Object>>", "fields": [], "methods": [{"identifier": "validate", "parameters": "(ClinicalDocument doc, Map<Object, Object> context)", "modifiers": "@Override public", "return": "void", "signature": "void validate(ClinicalDocument doc, Map<Object, Object> context)", "full_signature": "@Override public void validate(ClinicalDocument doc, Map<Object, Object> context)", "class_method_signature": "CDAR2Validator.validate(ClinicalDocument doc, Map<Object, Object> context)", "testcase": false, "constructor": false}, {"identifier": "retrieveValidationHandler", "parameters": "(Map<Object, Object> context)", "modifiers": "private", "return": "ValidationHandler", "signature": "ValidationHandler retrieveValidationHandler(Map<Object, Object> context)", "full_signature": "private ValidationHandler retrieveValidationHandler(Map<Object, Object> context)", "class_method_signature": "CDAR2Validator.retrieveValidationHandler(Map<Object, Object> context)", "testcase": false, "constructor": false}], "file": "modules/cda/mdht/src/main/java/org/openehealth/ipf/modules/cda/CDAR2Validator.java"}, "focal_method": {"identifier": "validate", "parameters": "(ClinicalDocument doc, Map<Object, Object> context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(ClinicalDocument doc, Map<Object, Object> context) {\n        boolean isValid = CDAUtil.validate(doc, retrieveValidationHandler(context));\n        if (! isValid) {\n            throw new ValidationException(\"Clinical Document not valid!\");\n        }\n    }", "signature": "void validate(ClinicalDocument doc, Map<Object, Object> context)", "full_signature": "@Override public void validate(ClinicalDocument doc, Map<Object, Object> context)", "class_method_signature": "CDAR2Validator.validate(ClinicalDocument doc, Map<Object, Object> context)", "testcase": false, "constructor": false, "invocations": ["validate", "retrieveValidationHandler"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}