{"test_class": {"identifier": "XmlCharactersTest", "superclass": "", "interfaces": "", "fields": [], "file": "modeshape-common/src/test/java/org/modeshape/common/xml/XmlCharactersTest.java"}, "test_case": {"identifier": "shouldNotAllowColonInNcName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotAllowColonInNcName() {\n        assertThat(XmlCharacters.isValidNcNameStart(':'), is(false));\n    }", "signature": "void shouldNotAllowColonInNcName()", "full_signature": "@Test public void shouldNotAllowColonInNcName()", "class_method_signature": "XmlCharactersTest.shouldNotAllowColonInNcName()", "testcase": true, "constructor": false, "invocations": ["assertThat", "isValidNcNameStart", "is"]}, "focal_class": {"identifier": "XmlCharacters", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int NUMBER_OF_CHARACTERS = 1 << 16;", "modifier": "private static final", "type": "int", "declarator": "NUMBER_OF_CHARACTERS = 1 << 16", "var_name": "NUMBER_OF_CHARACTERS"}, {"original_string": "private static final char[] MASKS = new char[NUMBER_OF_CHARACTERS];", "modifier": "private static final", "type": "char[]", "declarator": "MASKS = new char[NUMBER_OF_CHARACTERS]", "var_name": "MASKS"}, {"original_string": "private static final int VALID_CHARACTER = 1;", "modifier": "private static final", "type": "int", "declarator": "VALID_CHARACTER = 1", "var_name": "VALID_CHARACTER"}, {"original_string": "private static final int CONTENT_CHARACTER = 1 << 1;", "modifier": "private static final", "type": "int", "declarator": "CONTENT_CHARACTER = 1 << 1", "var_name": "CONTENT_CHARACTER"}, {"original_string": "private static final int SPACE_CHARACTER = 1 << 2;", "modifier": "private static final", "type": "int", "declarator": "SPACE_CHARACTER = 1 << 2", "var_name": "SPACE_CHARACTER"}, {"original_string": "private static final int NAME_START_CHARACTER = 1 << 3;", "modifier": "private static final", "type": "int", "declarator": "NAME_START_CHARACTER = 1 << 3", "var_name": "NAME_START_CHARACTER"}, {"original_string": "private static final int NAME_CHARACTER = 1 << 4;", "modifier": "private static final", "type": "int", "declarator": "NAME_CHARACTER = 1 << 4", "var_name": "NAME_CHARACTER"}, {"original_string": "private static final int NCNAME_START_CHARACTER = 1 << 5;", "modifier": "private static final", "type": "int", "declarator": "NCNAME_START_CHARACTER = 1 << 5", "var_name": "NCNAME_START_CHARACTER"}, {"original_string": "private static final int NCNAME_CHARACTER = 1 << 6;", "modifier": "private static final", "type": "int", "declarator": "NCNAME_CHARACTER = 1 << 6", "var_name": "NCNAME_CHARACTER"}, {"original_string": "private static final int PUBID_CHARACTER = 1 << 7;", "modifier": "private static final", "type": "int", "declarator": "PUBID_CHARACTER = 1 << 7", "var_name": "PUBID_CHARACTER"}], "methods": [{"identifier": "XmlCharacters", "parameters": "()", "modifiers": "private", "return": "", "signature": " XmlCharacters()", "full_signature": "private  XmlCharacters()", "class_method_signature": "XmlCharacters.XmlCharacters()", "testcase": false, "constructor": true}, {"identifier": "isValidNameStart", "parameters": "( int c )", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidNameStart( int c )", "full_signature": "public static boolean isValidNameStart( int c )", "class_method_signature": "XmlCharacters.isValidNameStart( int c )", "testcase": false, "constructor": false}, {"identifier": "isValidNcNameStart", "parameters": "( int c )", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidNcNameStart( int c )", "full_signature": "public static boolean isValidNcNameStart( int c )", "class_method_signature": "XmlCharacters.isValidNcNameStart( int c )", "testcase": false, "constructor": false}, {"identifier": "isValidName", "parameters": "( int c )", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidName( int c )", "full_signature": "public static boolean isValidName( int c )", "class_method_signature": "XmlCharacters.isValidName( int c )", "testcase": false, "constructor": false}, {"identifier": "isValidNcName", "parameters": "( int c )", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidNcName( int c )", "full_signature": "public static boolean isValidNcName( int c )", "class_method_signature": "XmlCharacters.isValidNcName( int c )", "testcase": false, "constructor": false}, {"identifier": "isValidPubid", "parameters": "( int c )", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidPubid( int c )", "full_signature": "public static boolean isValidPubid( int c )", "class_method_signature": "XmlCharacters.isValidPubid( int c )", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "( int c )", "modifiers": "public static", "return": "boolean", "signature": "boolean isValid( int c )", "full_signature": "public static boolean isValid( int c )", "class_method_signature": "XmlCharacters.isValid( int c )", "testcase": false, "constructor": false}, {"identifier": "isValidContent", "parameters": "( int c )", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidContent( int c )", "full_signature": "public static boolean isValidContent( int c )", "class_method_signature": "XmlCharacters.isValidContent( int c )", "testcase": false, "constructor": false}, {"identifier": "isValidSpace", "parameters": "( int c )", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidSpace( int c )", "full_signature": "public static boolean isValidSpace( int c )", "class_method_signature": "XmlCharacters.isValidSpace( int c )", "testcase": false, "constructor": false}, {"identifier": "isValidName", "parameters": "( String name )", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidName( String name )", "full_signature": "public static boolean isValidName( String name )", "class_method_signature": "XmlCharacters.isValidName( String name )", "testcase": false, "constructor": false}, {"identifier": "isValidNcName", "parameters": "( String name )", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidNcName( String name )", "full_signature": "public static boolean isValidNcName( String name )", "class_method_signature": "XmlCharacters.isValidNcName( String name )", "testcase": false, "constructor": false}], "file": "modeshape-common/src/main/java/org/modeshape/common/xml/XmlCharacters.java"}, "focal_method": {"identifier": "isValidNcNameStart", "parameters": "( int c )", "modifiers": "public static", "return": "boolean", "body": "public static boolean isValidNcNameStart( int c ) {\n        return c < NUMBER_OF_CHARACTERS && (MASKS[c] & NCNAME_START_CHARACTER) != 0;\n    }", "signature": "boolean isValidNcNameStart( int c )", "full_signature": "public static boolean isValidNcNameStart( int c )", "class_method_signature": "XmlCharacters.isValidNcNameStart( int c )", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}