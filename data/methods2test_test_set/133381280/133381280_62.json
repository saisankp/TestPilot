{"test_class": {"identifier": "PollableInfoWrapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "client/lookout-reg-server/src/test/java/com/alipay/lookout/remote/step/PollableInfoWrapperTest.java"}, "test_case": {"identifier": "test_measure_timeout", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_measure_timeout() {\n        Clock clock = Clock.SYSTEM;\n        DefaultRegistry r = new DefaultRegistry(clock);\n        PollableInfoWrapper w = new PollableInfoWrapper(r.createId(\"info\"),\n            new AutoPollFriendlyInfo() {\n                @Override\n                public AutoPollSuggestion autoPollSuggest() {\n                    return AutoPollSuggestion.POLL_WHEN_UPDATED;\n                }\n\n                @Override\n                public long lastModifiedTime() {\n                    return 10;\n                }\n\n                @Override\n                public Object value() {\n                    try {\n                        Thread.sleep(1100L);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                    return \"i_am_info\";\n                }\n            }, clock);\n        Indicator indicator = w.measure();\n        assertThat(indicator).isNotNull();\n        assertThat(indicator.measurements()).hasSize(1);\n        assertThat(((Measurement<?>) indicator.measurements().iterator().next()).value())\n            .isEqualTo(\"i_am_info\");\n    }", "signature": "void test_measure_timeout()", "full_signature": "@Test public void test_measure_timeout()", "class_method_signature": "PollableInfoWrapperTest.test_measure_timeout()", "testcase": true, "constructor": false, "invocations": ["createId", "sleep", "printStackTrace", "measure", "isNotNull", "assertThat", "hasSize", "assertThat", "measurements", "isEqualTo", "assertThat", "value", "next", "iterator", "measurements"]}, "focal_class": {"identifier": "PollableInfoWrapper", "superclass": "extends InfoWrapper", "interfaces": "", "fields": [{"original_string": "private long               lastPolledTime = -1l;", "modifier": "private", "type": "long", "declarator": "lastPolledTime = -1l", "var_name": "lastPolledTime"}, {"original_string": "private AutoPollSuggestion suggestion;", "modifier": "private", "type": "AutoPollSuggestion", "declarator": "suggestion", "var_name": "suggestion"}], "methods": [{"identifier": "PollableInfoWrapper", "parameters": "(Id id, Info info, Clock clock)", "modifiers": "public", "return": "", "signature": " PollableInfoWrapper(Id id, Info info, Clock clock)", "full_signature": "public  PollableInfoWrapper(Id id, Info info, Clock clock)", "class_method_signature": "PollableInfoWrapper.PollableInfoWrapper(Id id, Info info, Clock clock)", "testcase": false, "constructor": true}, {"identifier": "isAutoPolledAllowed", "parameters": "(long stepMills)", "modifiers": "public", "return": "boolean", "signature": "boolean isAutoPolledAllowed(long stepMills)", "full_signature": "public boolean isAutoPolledAllowed(long stepMills)", "class_method_signature": "PollableInfoWrapper.isAutoPolledAllowed(long stepMills)", "testcase": false, "constructor": false}, {"identifier": "measure", "parameters": "()", "modifiers": "@Override public", "return": "Indicator", "signature": "Indicator measure()", "full_signature": "@Override public Indicator measure()", "class_method_signature": "PollableInfoWrapper.measure()", "testcase": false, "constructor": false}], "file": "client/lookout-reg-server/src/main/java/com/alipay/lookout/remote/step/PollableInfoWrapper.java"}, "focal_method": {"identifier": "measure", "parameters": "()", "modifiers": "@Override public", "return": "Indicator", "body": "@Override\n    public Indicator measure() {\n        long start = clock.wallTime();\n        try {\n            return super.measure();\n        } finally {\n            //\u53ef\u80fd\u5f88\u8017\u65f6,\u8d85\u8fc71s\u5148\u65e5\u5fd7\u8b66\u544a\uff01\uff01\n            long duration = clock.wallTime() - start;\n            if (duration > 1000) {\n                logger.warn(\"Info metric id:{} value method invoke too long(duration:{})!\",\n                    duration);\n            }\n        }\n    }", "signature": "Indicator measure()", "full_signature": "@Override public Indicator measure()", "class_method_signature": "PollableInfoWrapper.measure()", "testcase": false, "constructor": false, "invocations": ["wallTime", "measure", "wallTime", "warn"]}, "repository": {"repo_id": 133381280, "url": "https://github.com/sofastack/sofa-lookout", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 318, "size": 1394, "license": "licensed"}}