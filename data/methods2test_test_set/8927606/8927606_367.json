{"test_class": {"identifier": "GraphvizEngineTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String dot = \"digraph { a -> b[label=\\\"0.2\\\",weight=\\\"0.2\\\"]; }\";", "modifier": "private", "type": "String", "declarator": "dot = \"digraph { a -> b[label=\\\"0.2\\\",weight=\\\"0.2\\\"]; }\"", "var_name": "dot"}, {"original_string": "private ClassLoader classLoader = this.getClass().getClassLoader();", "modifier": "private", "type": "ClassLoader", "declarator": "classLoader = this.getClass().getClassLoader()", "var_name": "classLoader"}], "file": "core/src/test/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngineTest.java"}, "test_case": {"identifier": "happyFlowDot2SVGCustomOptions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void happyFlowDot2SVGCustomOptions() throws IOException, GraphvizException {\n\t\tGraphvizEngine engine = new GraphvizEngine();\n\t\tassertNotNull(engine);\n\t\tString result = engine.execute(dot, Options.create().format(Format.SVG));\n\t\tassertNotNull(result);\n\n\t\tURL svg = ClassUtils.getResourceURL(classLoader, \"flow.svg\");\n\t\tassertNotNull(svg);\n\t\tassertEqualsIgnoreWhitespaces(Misc.streamToString(svg.openStream()), result);\n\t}", "signature": "void happyFlowDot2SVGCustomOptions()", "full_signature": "@Test public void happyFlowDot2SVGCustomOptions()", "class_method_signature": "GraphvizEngineTest.happyFlowDot2SVGCustomOptions()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "execute", "format", "create", "assertNotNull", "getResourceURL", "assertNotNull", "assertEqualsIgnoreWhitespaces", "streamToString", "openStream"]}, "focal_class": {"identifier": "GraphvizEngine", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected Logger log = LogUtil.getLogger(this);", "modifier": "protected", "type": "Logger", "declarator": "log = LogUtil.getLogger(this)", "var_name": "log"}, {"original_string": "private Engine engine;", "modifier": "private", "type": "Engine", "declarator": "engine", "var_name": "engine"}, {"original_string": "private String graphvizVersion = AppConstants.getInstance().getProperty(\"graphviz.js.version\", \"2.0.0\");", "modifier": "private", "type": "String", "declarator": "graphvizVersion = AppConstants.getInstance().getProperty(\"graphviz.js.version\", \"2.0.0\")", "var_name": "graphvizVersion"}], "methods": [{"identifier": "GraphvizEngine", "parameters": "()", "modifiers": "public", "return": "", "signature": " GraphvizEngine()", "full_signature": "public  GraphvizEngine()", "class_method_signature": "GraphvizEngine.GraphvizEngine()", "testcase": false, "constructor": true}, {"identifier": "GraphvizEngine", "parameters": "(String graphvizVersion)", "modifiers": "public", "return": "", "signature": " GraphvizEngine(String graphvizVersion)", "full_signature": "public  GraphvizEngine(String graphvizVersion)", "class_method_signature": "GraphvizEngine.GraphvizEngine(String graphvizVersion)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(String src)", "modifiers": "public", "return": "String", "signature": "String execute(String src)", "full_signature": "public String execute(String src)", "class_method_signature": "GraphvizEngine.execute(String src)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String src, Options options)", "modifiers": "public", "return": "String", "signature": "String execute(String src, Options options)", "full_signature": "public String execute(String src, Options options)", "class_method_signature": "GraphvizEngine.execute(String src, Options options)", "testcase": false, "constructor": false}, {"identifier": "jsVizExec", "parameters": "(String src, Options options)", "modifiers": "private", "return": "String", "signature": "String jsVizExec(String src, Options options)", "full_signature": "private String jsVizExec(String src, Options options)", "class_method_signature": "GraphvizEngine.jsVizExec(String src, Options options)", "testcase": false, "constructor": false}, {"identifier": "jsEscape", "parameters": "(String js)", "modifiers": "private", "return": "String", "signature": "String jsEscape(String js)", "full_signature": "private String jsEscape(String js)", "class_method_signature": "GraphvizEngine.jsEscape(String js)", "testcase": false, "constructor": false}, {"identifier": "getVizJsSource", "parameters": "(String version)", "modifiers": "private", "return": "String", "signature": "String getVizJsSource(String version)", "full_signature": "private String getVizJsSource(String version)", "class_method_signature": "GraphvizEngine.getVizJsSource(String version)", "testcase": false, "constructor": false}, {"identifier": "getEngine", "parameters": "()", "modifiers": "private", "return": "Engine", "signature": "Engine getEngine()", "full_signature": "private Engine getEngine()", "class_method_signature": "GraphvizEngine.getEngine()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "GraphvizEngine.close()", "testcase": false, "constructor": false}, {"identifier": "getVisJsWrapper", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getVisJsWrapper()", "full_signature": "private String getVisJsWrapper()", "class_method_signature": "GraphvizEngine.getVisJsWrapper()", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java"}, "focal_method": {"identifier": "execute", "parameters": "(String src)", "modifiers": "public", "return": "String", "body": "public String execute(String src) throws IOException, GraphvizException {\n\t\treturn execute(src, Options.create());\n\t}", "signature": "String execute(String src)", "full_signature": "public String execute(String src)", "class_method_signature": "GraphvizEngine.execute(String src)", "testcase": false, "constructor": false, "invocations": ["execute", "create"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}