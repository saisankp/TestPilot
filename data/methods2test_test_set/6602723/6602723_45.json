{"test_class": {"identifier": "RetryTemplateAspectTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_RETRY_TEMPLATE = \"TestRetryTemplate\";", "modifier": "private static final", "type": "String", "declarator": "TEST_RETRY_TEMPLATE = \"TestRetryTemplate\"", "var_name": "TEST_RETRY_TEMPLATE"}, {"original_string": "private static final String TEST_RETRY_TEMPLATE_RECOVERY = \"TestRetryTemplateRecovery\";", "modifier": "private static final", "type": "String", "declarator": "TEST_RETRY_TEMPLATE_RECOVERY = \"TestRetryTemplateRecovery\"", "var_name": "TEST_RETRY_TEMPLATE_RECOVERY"}, {"original_string": "private RetryTemplateAspect aspect;", "modifier": "private", "type": "RetryTemplateAspect", "declarator": "aspect", "var_name": "aspect"}, {"original_string": "@Mock\n    private RetryTemplate mockAnnotation;", "modifier": "@Mock\n    private", "type": "RetryTemplate", "declarator": "mockAnnotation", "var_name": "mockAnnotation"}, {"original_string": "@Mock\n    private Signature mockSignature;", "modifier": "@Mock\n    private", "type": "Signature", "declarator": "mockSignature", "var_name": "mockSignature"}, {"original_string": "@Mock\n    private BeanFactory beanFactory;", "modifier": "@Mock\n    private", "type": "BeanFactory", "declarator": "beanFactory", "var_name": "beanFactory"}, {"original_string": "@Mock\n    private ProceedingJoinPoint mockPjp;", "modifier": "@Mock\n    private", "type": "ProceedingJoinPoint", "declarator": "mockPjp", "var_name": "mockPjp"}, {"original_string": "@Mock\n    private RecoveryCallback recoveryCallback;", "modifier": "@Mock\n    private", "type": "RecoveryCallback", "declarator": "recoveryCallback", "var_name": "recoveryCallback"}], "file": "jrugged-spring/src/test/java/org/fishwife/jrugged/spring/aspects/RetryTemplateAspectTest.java"}, "test_case": {"identifier": "testRetry", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRetry() throws Throwable {\n        org.springframework.retry.support.RetryTemplate template =\n                new org.springframework.retry.support.RetryTemplate();\n        Mockito.doReturn(template).when(beanFactory)\n                .getBean(TEST_RETRY_TEMPLATE, org.springframework.retry.support.RetryTemplate.class);\n        Mockito.doReturn(\"a\").when(mockPjp).proceed();\n        Assert.assertEquals(\"a\", aspect.retry(mockPjp, mockAnnotation));\n        Mockito.verify(mockPjp, Mockito.times(1)).proceed();\n    }", "signature": "void testRetry()", "full_signature": "@Test public void testRetry()", "class_method_signature": "RetryTemplateAspectTest.testRetry()", "testcase": true, "constructor": false, "invocations": ["getBean", "when", "doReturn", "proceed", "when", "doReturn", "assertEquals", "retry", "proceed", "verify", "times"]}, "focal_class": {"identifier": "RetryTemplateAspect", "superclass": "", "interfaces": "implements BeanFactoryAware", "fields": [{"original_string": "private static final Logger logger =\n            LoggerFactory.getLogger(RetryTemplateAspect.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger =\n            LoggerFactory.getLogger(RetryTemplateAspect.class)", "var_name": "logger"}, {"original_string": "private BeanFactory beanFactory;", "modifier": "private", "type": "BeanFactory", "declarator": "beanFactory", "var_name": "beanFactory"}], "methods": [{"identifier": "RetryTemplateAspect", "parameters": "()", "modifiers": "public", "return": "", "signature": " RetryTemplateAspect()", "full_signature": "public  RetryTemplateAspect()", "class_method_signature": "RetryTemplateAspect.RetryTemplateAspect()", "testcase": false, "constructor": true}, {"identifier": "setBeanFactory", "parameters": "(BeanFactory beanFactory)", "modifiers": "@Autowired @Required public", "return": "void", "signature": "void setBeanFactory(BeanFactory beanFactory)", "full_signature": "@Autowired @Required public void setBeanFactory(BeanFactory beanFactory)", "class_method_signature": "RetryTemplateAspect.setBeanFactory(BeanFactory beanFactory)", "testcase": false, "constructor": false}, {"identifier": "retry", "parameters": "(final ProceedingJoinPoint pjp,\n                        final RetryTemplate retryTemplateAnnotation)", "modifiers": "@Around(\"@annotation(retryTemplateAnnotation)\") public", "return": "Object", "signature": "Object retry(final ProceedingJoinPoint pjp,\n                        final RetryTemplate retryTemplateAnnotation)", "full_signature": "@Around(\"@annotation(retryTemplateAnnotation)\") public Object retry(final ProceedingJoinPoint pjp,\n                        final RetryTemplate retryTemplateAnnotation)", "class_method_signature": "RetryTemplateAspect.retry(final ProceedingJoinPoint pjp,\n                        final RetryTemplate retryTemplateAnnotation)", "testcase": false, "constructor": false}], "file": "jrugged-spring/src/main/java/org/fishwife/jrugged/spring/aspects/RetryTemplateAspect.java"}, "focal_method": {"identifier": "retry", "parameters": "(final ProceedingJoinPoint pjp,\n                        final RetryTemplate retryTemplateAnnotation)", "modifiers": "@Around(\"@annotation(retryTemplateAnnotation)\") public", "return": "Object", "body": "@Around(\"@annotation(retryTemplateAnnotation)\")\n    public Object retry(final ProceedingJoinPoint pjp,\n                        final RetryTemplate retryTemplateAnnotation) throws Throwable {\n        final String name = retryTemplateAnnotation.name();\n        final String recoveryCallbackName = retryTemplateAnnotation.recoveryCallbackName();\n\n        org.springframework.retry.support.RetryTemplate retryTemplate =\n            beanFactory.getBean(name, org.springframework.retry.support.RetryTemplate.class);\n\n        RecoveryCallback<Object> recoveryCallback = null;\n        if (! Strings.isNullOrEmpty(recoveryCallbackName)) {\n            recoveryCallback =\n                    beanFactory.getBean(recoveryCallbackName, org.springframework.retry.RecoveryCallback.class);\n        }\n\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Have @RetryTemplate method with retryTemplate name {} and callback name {}, \" +\n                    \"wrapping call on method {} of target object {}\",\n                    new Object[]{\n                            name,\n                            recoveryCallbackName,\n                            pjp.getSignature().getName(),\n                            pjp.getTarget()});\n        }\n\n        return retryTemplate.execute(\n                new RetryCallback<Object, Exception>() {\n                    public Object doWithRetry(RetryContext context) throws Exception {\n                        try {\n                            return pjp.proceed();\n                        }\n                        catch (Error e) {\n                            throw e;\n                        }\n                        catch (Exception e) {\n                            throw e;\n                        }\n                        catch (Throwable e) {\n                            throw new RuntimeException(e);\n                        }\n                    }\n                },\n                recoveryCallback);\n    }", "signature": "Object retry(final ProceedingJoinPoint pjp,\n                        final RetryTemplate retryTemplateAnnotation)", "full_signature": "@Around(\"@annotation(retryTemplateAnnotation)\") public Object retry(final ProceedingJoinPoint pjp,\n                        final RetryTemplate retryTemplateAnnotation)", "class_method_signature": "RetryTemplateAspect.retry(final ProceedingJoinPoint pjp,\n                        final RetryTemplate retryTemplateAnnotation)", "testcase": false, "constructor": false, "invocations": ["name", "recoveryCallbackName", "getBean", "isNullOrEmpty", "getBean", "isDebugEnabled", "debug", "getName", "getSignature", "getTarget", "execute", "proceed"]}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}