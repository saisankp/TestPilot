{"test_class": {"identifier": "StockTradingDaysVariablesTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/timeseries/regression/StockTradingDaysVariablesTest.java"}, "test_case": {"identifier": "test1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test1() {\n        StockTradingDaysVariables td=new StockTradingDaysVariables(31);\n        TsDomain dom=new TsDomain(TsFrequency.Monthly, 2014, 0, 12);\n        Matrix m=new Matrix(12, 6);\n        td.data(dom, m.columnList());\n        assertTrue(m.get(0, 4)==1);\n        assertTrue(m.get(1, 4)==1);\n        assertTrue(m.get(2, 0)==1);\n        assertTrue(m.get(3, 2)==1);\n        assertTrue(m.get(4, 5)==1);\n    }", "signature": "void test1()", "full_signature": "@Test public void test1()", "class_method_signature": "StockTradingDaysVariablesTest.test1()", "testcase": true, "constructor": false, "invocations": ["data", "columnList", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get"]}, "focal_class": {"identifier": "StockTradingDaysVariables", "superclass": "", "interfaces": "implements ITradingDaysVariable, Cloneable", "fields": [{"original_string": "private final int w_;", "modifier": "private final", "type": "int", "declarator": "w_", "var_name": "w_"}], "methods": [{"identifier": "StockTradingDaysVariables", "parameters": "(int w)", "modifiers": "public", "return": "", "signature": " StockTradingDaysVariables(int w)", "full_signature": "public  StockTradingDaysVariables(int w)", "class_method_signature": "StockTradingDaysVariables.StockTradingDaysVariables(int w)", "testcase": false, "constructor": true}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "StockTradingDaysVariables", "signature": "StockTradingDaysVariables clone()", "full_signature": "@Override public StockTradingDaysVariables clone()", "class_method_signature": "StockTradingDaysVariables.clone()", "testcase": false, "constructor": false}, {"identifier": "getDefinitionDomain", "parameters": "()", "modifiers": "@Override public", "return": "TsDomain", "signature": "TsDomain getDefinitionDomain()", "full_signature": "@Override public TsDomain getDefinitionDomain()", "class_method_signature": "StockTradingDaysVariables.getDefinitionDomain()", "testcase": false, "constructor": false}, {"identifier": "getDefinitionFrequency", "parameters": "()", "modifiers": "@Override public", "return": "TsFrequency", "signature": "TsFrequency getDefinitionFrequency()", "full_signature": "@Override public TsFrequency getDefinitionFrequency()", "class_method_signature": "StockTradingDaysVariables.getDefinitionFrequency()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "(TsFrequency context)", "modifiers": "@Override public", "return": "String", "signature": "String getDescription(TsFrequency context)", "full_signature": "@Override public String getDescription(TsFrequency context)", "class_method_signature": "StockTradingDaysVariables.getDescription(TsFrequency context)", "testcase": false, "constructor": false}, {"identifier": "getDim", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDim()", "full_signature": "@Override public int getDim()", "class_method_signature": "StockTradingDaysVariables.getDim()", "testcase": false, "constructor": false}, {"identifier": "getItemDescription", "parameters": "(int idx, TsFrequency context)", "modifiers": "@Override public", "return": "String", "signature": "String getItemDescription(int idx, TsFrequency context)", "full_signature": "@Override public String getItemDescription(int idx, TsFrequency context)", "class_method_signature": "StockTradingDaysVariables.getItemDescription(int idx, TsFrequency context)", "testcase": false, "constructor": false}, {"identifier": "isSignificant", "parameters": "(TsDomain domain)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSignificant(TsDomain domain)", "full_signature": "@Override public boolean isSignificant(TsDomain domain)", "class_method_signature": "StockTradingDaysVariables.isSignificant(TsDomain domain)", "testcase": false, "constructor": false}, {"identifier": "data", "parameters": "(TsDomain domain, List<DataBlock> data)", "modifiers": "public", "return": "void", "signature": "void data(TsDomain domain, List<DataBlock> data)", "full_signature": "public void data(TsDomain domain, List<DataBlock> data)", "class_method_signature": "StockTradingDaysVariables.data(TsDomain domain, List<DataBlock> data)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/timeseries/regression/StockTradingDaysVariables.java"}, "focal_method": {"identifier": "data", "parameters": "(TsDomain domain, List<DataBlock> data)", "modifiers": "public", "return": "void", "body": "public void data(TsDomain domain, List<DataBlock> data) {\n        int n = domain.getLength();\n        TsPeriod d0 = domain.getStart();\n        int conv = 12 / d0.getFrequency().intValue();\n        int[] begin = new int[n];\n        int[] monthlen = new int[n];\n        TsPeriod month = new TsPeriod(TsFrequency.Monthly);\n        month.set(d0.getYear(), d0.getPosition() * conv);\n        month.move(conv - 1);\n        for (int i = 0; i < begin.length; ++i) {\n            // begin contains the first day of the last month of each period\n            begin[i] = Day.calc(month.getYear(), month.getPosition(), 0);\n            monthlen[i] = Day.getNumberOfDaysByMonth(month.getYear(), month.getPosition());\n            month.move(conv);\n        }\n        double[] z0 = new double[7];\n        for (int j = 0; j < n; j++) {\n            java.util.Arrays.fill(z0, 0.0d);\n            //\n            // z0[0] = Sunday\n            //\n            int dayofweek = (begin[j] - 3) % 7;\n            int mlen = monthlen[j];\n            if (dayofweek < 0) {\n                dayofweek += 7;\n            }\n            // \n            // w_ (like in Tramo ??) could be negative. (if we want to stock on the -w_ day before month-end\n            // Example : \n            // w_ = -2 \n            // \n            // Jan 29\n            // Feb 26 or 27 (if LY)\n            // .............\n            // Apr 28\n            // .............\n            //\n            if (this.w_ >= 0) {\n                if (this.w_ < mlen) {\n                    mlen = this.w_;\n                }\n            } else {\n                mlen += this.w_;\n                if (mlen <= 0) {\n                    mlen = 1;\n                }\n            }\n            int Lastdayofweek = (dayofweek + (mlen - 1)) % 7;\n            z0[Lastdayofweek] = 1.0d;\n            for (int i = 0; i < 6; ++i) {\n                DataBlock x = data.get(i);\n                x.set(j, z0[i + 1] - z0[0]);\n            }\n        }\n    }", "signature": "void data(TsDomain domain, List<DataBlock> data)", "full_signature": "public void data(TsDomain domain, List<DataBlock> data)", "class_method_signature": "StockTradingDaysVariables.data(TsDomain domain, List<DataBlock> data)", "testcase": false, "constructor": false, "invocations": ["getLength", "getStart", "intValue", "getFrequency", "set", "getYear", "getPosition", "move", "calc", "getYear", "getPosition", "getNumberOfDaysByMonth", "getYear", "getPosition", "move", "fill", "get", "set"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}