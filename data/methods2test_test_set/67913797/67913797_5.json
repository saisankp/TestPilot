{"test_class": {"identifier": "StreamSchemaTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/apache/flink/streaming/siddhi/schema/StreamSchemaTest.java"}, "test_case": {"identifier": "testStreamTupleSerializerWithPrimitive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStreamTupleSerializerWithPrimitive() {\n        TypeInformation<String> typeInfo = TypeInformation.of(new TypeHint<String>() {});\n        StreamSchema<String> schema = new StreamSchema<>(typeInfo, \"words\");\n        assertEquals(String.class, schema.getTypeInfo().getTypeClass());\n        TypeInformation<Tuple2<String, String>> tuple2TypeInformation = Types.TUPLE(TypeInformation.of(String.class), schema.getTypeInfo());\n        assertEquals(\"Java Tuple2<String, String>\", tuple2TypeInformation.toString());\n    }", "signature": "void testStreamTupleSerializerWithPrimitive()", "full_signature": "@Test public void testStreamTupleSerializerWithPrimitive()", "class_method_signature": "StreamSchemaTest.testStreamTupleSerializerWithPrimitive()", "testcase": true, "constructor": false, "invocations": ["of", "assertEquals", "getTypeClass", "getTypeInfo", "TUPLE", "of", "getTypeInfo", "assertEquals", "toString"]}, "focal_class": {"identifier": "StreamSchema", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(StreamSchema.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(StreamSchema.class)", "var_name": "LOGGER"}, {"original_string": "private final TypeInformation<T> typeInfo;", "modifier": "private final", "type": "TypeInformation<T>", "declarator": "typeInfo", "var_name": "typeInfo"}, {"original_string": "private final int[] fieldIndexes;", "modifier": "private final", "type": "int[]", "declarator": "fieldIndexes", "var_name": "fieldIndexes"}, {"original_string": "private final String[] fieldNames;", "modifier": "private final", "type": "String[]", "declarator": "fieldNames", "var_name": "fieldNames"}, {"original_string": "private TypeInformation[] fieldTypes;", "modifier": "private", "type": "TypeInformation[]", "declarator": "fieldTypes", "var_name": "fieldTypes"}, {"original_string": "private final StreamSerializer<T> streamSerializer;", "modifier": "private final", "type": "StreamSerializer<T>", "declarator": "streamSerializer", "var_name": "streamSerializer"}, {"original_string": "private TypeSerializer<T> typeSerializer;", "modifier": "private", "type": "TypeSerializer<T>", "declarator": "typeSerializer", "var_name": "typeSerializer"}], "methods": [{"identifier": "StreamSchema", "parameters": "(TypeInformation<T> typeInfo, String... fieldNames)", "modifiers": "public", "return": "", "signature": " StreamSchema(TypeInformation<T> typeInfo, String... fieldNames)", "full_signature": "public  StreamSchema(TypeInformation<T> typeInfo, String... fieldNames)", "class_method_signature": "StreamSchema.StreamSchema(TypeInformation<T> typeInfo, String... fieldNames)", "testcase": false, "constructor": true}, {"identifier": "StreamSchema", "parameters": "(TypeInformation<T> typeInfo, int[] fieldIndexes, String[] fieldNames)", "modifiers": "public", "return": "", "signature": " StreamSchema(TypeInformation<T> typeInfo, int[] fieldIndexes, String[] fieldNames)", "full_signature": "public  StreamSchema(TypeInformation<T> typeInfo, int[] fieldIndexes, String[] fieldNames)", "class_method_signature": "StreamSchema.StreamSchema(TypeInformation<T> typeInfo, int[] fieldIndexes, String[] fieldNames)", "testcase": false, "constructor": true}, {"identifier": "isAtomicType", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAtomicType()", "full_signature": "public boolean isAtomicType()", "class_method_signature": "StreamSchema.isAtomicType()", "testcase": false, "constructor": false}, {"identifier": "isTupleType", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTupleType()", "full_signature": "public boolean isTupleType()", "class_method_signature": "StreamSchema.isTupleType()", "testcase": false, "constructor": false}, {"identifier": "isRowType", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRowType()", "full_signature": "public boolean isRowType()", "class_method_signature": "StreamSchema.isRowType()", "testcase": false, "constructor": false}, {"identifier": "isPojoType", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPojoType()", "full_signature": "public boolean isPojoType()", "class_method_signature": "StreamSchema.isPojoType()", "testcase": false, "constructor": false}, {"identifier": "isCaseClassType", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCaseClassType()", "full_signature": "public boolean isCaseClassType()", "class_method_signature": "StreamSchema.isCaseClassType()", "testcase": false, "constructor": false}, {"identifier": "isCompositeType", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCompositeType()", "full_signature": "public boolean isCompositeType()", "class_method_signature": "StreamSchema.isCompositeType()", "testcase": false, "constructor": false}, {"identifier": "getFieldIndexes", "parameters": "(TypeInformation<E> typeInfo, String... fieldNames)", "modifiers": "private", "return": "int[]", "signature": "int[] getFieldIndexes(TypeInformation<E> typeInfo, String... fieldNames)", "full_signature": "private int[] getFieldIndexes(TypeInformation<E> typeInfo, String... fieldNames)", "class_method_signature": "StreamSchema.getFieldIndexes(TypeInformation<E> typeInfo, String... fieldNames)", "testcase": false, "constructor": false}, {"identifier": "getFieldTypes", "parameters": "(TypeInformation<E> typeInfo, int[] fieldIndexes, String[] fieldNames)", "modifiers": "private", "return": "TypeInformation[]", "signature": "TypeInformation[] getFieldTypes(TypeInformation<E> typeInfo, int[] fieldIndexes, String[] fieldNames)", "full_signature": "private TypeInformation[] getFieldTypes(TypeInformation<E> typeInfo, int[] fieldIndexes, String[] fieldNames)", "class_method_signature": "StreamSchema.getFieldTypes(TypeInformation<E> typeInfo, int[] fieldIndexes, String[] fieldNames)", "testcase": false, "constructor": false}, {"identifier": "getTypeInfo", "parameters": "()", "modifiers": "public", "return": "TypeInformation<T>", "signature": "TypeInformation<T> getTypeInfo()", "full_signature": "public TypeInformation<T> getTypeInfo()", "class_method_signature": "StreamSchema.getTypeInfo()", "testcase": false, "constructor": false}, {"identifier": "getFieldIndexes", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getFieldIndexes()", "full_signature": "public int[] getFieldIndexes()", "class_method_signature": "StreamSchema.getFieldIndexes()", "testcase": false, "constructor": false}, {"identifier": "getFieldNames", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getFieldNames()", "full_signature": "public String[] getFieldNames()", "class_method_signature": "StreamSchema.getFieldNames()", "testcase": false, "constructor": false}, {"identifier": "getFieldTypes", "parameters": "()", "modifiers": "public", "return": "TypeInformation[]", "signature": "TypeInformation[] getFieldTypes()", "full_signature": "public TypeInformation[] getFieldTypes()", "class_method_signature": "StreamSchema.getFieldTypes()", "testcase": false, "constructor": false}, {"identifier": "getStreamSerializer", "parameters": "()", "modifiers": "public", "return": "StreamSerializer<T>", "signature": "StreamSerializer<T> getStreamSerializer()", "full_signature": "public StreamSerializer<T> getStreamSerializer()", "class_method_signature": "StreamSchema.getStreamSerializer()", "testcase": false, "constructor": false}, {"identifier": "getTypeSerializer", "parameters": "()", "modifiers": "public", "return": "TypeSerializer<T>", "signature": "TypeSerializer<T> getTypeSerializer()", "full_signature": "public TypeSerializer<T> getTypeSerializer()", "class_method_signature": "StreamSchema.getTypeSerializer()", "testcase": false, "constructor": false}, {"identifier": "setTypeSerializer", "parameters": "(TypeSerializer<T> typeSerializer)", "modifiers": "public", "return": "void", "signature": "void setTypeSerializer(TypeSerializer<T> typeSerializer)", "full_signature": "public void setTypeSerializer(TypeSerializer<T> typeSerializer)", "class_method_signature": "StreamSchema.setTypeSerializer(TypeSerializer<T> typeSerializer)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/flink/streaming/siddhi/schema/StreamSchema.java"}, "focal_method": {"identifier": "getTypeInfo", "parameters": "()", "modifiers": "public", "return": "TypeInformation<T>", "body": "public TypeInformation<T> getTypeInfo() {\n        return typeInfo;\n    }", "signature": "TypeInformation<T> getTypeInfo()", "full_signature": "public TypeInformation<T> getTypeInfo()", "class_method_signature": "StreamSchema.getTypeInfo()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 67913797, "url": "https://github.com/haoch/flink-siddhi", "language": "Java", "is_fork": false, "fork_count": 72, "stargazer_count": 148, "size": 635, "license": "licensed"}}