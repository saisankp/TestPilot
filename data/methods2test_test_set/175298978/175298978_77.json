{"test_class": {"identifier": "JDBCProjectQueriesTest", "superclass": "extends PostgresTestCase", "interfaces": "", "fields": [{"original_string": "private ProjectQueries queries;", "modifier": "private", "type": "ProjectQueries", "declarator": "queries", "var_name": "queries"}], "file": "SmellTracker/src/test/java/fr/inria/sniffer/tracker/analysis/persistence/queries/JDBCProjectQueriesTest.java"}, "test_case": {"identifier": "testInsertProject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInsertProject() {\n        long count = 0;\n        String name = \"projectName\";\n        String url = \"my/url\";\n\n        // We can insert any project.\n        executeSuccess(queries.projectInsertStatement(name, url));\n        assertEquals(++count, getProjectsCount());\n\n        // We can insert another project with empty url\n        executeSuccess(queries.projectInsertStatement(\"anotherProject\", null));\n        assertEquals(++count, getProjectsCount());\n\n        // We can insert another any url two times\n        executeSuccess(queries.projectInsertStatement(\"thirdProject\", url));\n        assertEquals(++count, getProjectsCount());\n\n        // We can't insert the same name two times, whichever the url\n        executeNothinhDone(queries.projectInsertStatement(name, url));\n        executeNothinhDone(queries.projectInsertStatement(name, null));\n        assertEquals(count, getProjectsCount());\n    }", "signature": "void testInsertProject()", "full_signature": "@Test public void testInsertProject()", "class_method_signature": "JDBCProjectQueriesTest.testInsertProject()", "testcase": true, "constructor": false, "invocations": ["executeSuccess", "projectInsertStatement", "assertEquals", "getProjectsCount", "executeSuccess", "projectInsertStatement", "assertEquals", "getProjectsCount", "executeSuccess", "projectInsertStatement", "assertEquals", "getProjectsCount", "executeNothinhDone", "projectInsertStatement", "executeNothinhDone", "projectInsertStatement", "assertEquals", "getProjectsCount"]}, "focal_class": {"identifier": "JDBCProjectQueries", "superclass": "", "interfaces": "implements ProjectQueries", "fields": [], "methods": [{"identifier": "projectInsertStatement", "parameters": "(String projectName, String url)", "modifiers": "@Override public", "return": "String", "signature": "String projectInsertStatement(String projectName, String url)", "full_signature": "@Override public String projectInsertStatement(String projectName, String url)", "class_method_signature": "JDBCProjectQueries.projectInsertStatement(String projectName, String url)", "testcase": false, "constructor": false}, {"identifier": "idFromNameQuery", "parameters": "(String name)", "modifiers": "@Override public", "return": "String", "signature": "String idFromNameQuery(String name)", "full_signature": "@Override public String idFromNameQuery(String name)", "class_method_signature": "JDBCProjectQueries.idFromNameQuery(String name)", "testcase": false, "constructor": false}], "file": "SmellTracker/src/main/java/fr/inria/sniffer/tracker/analysis/persistence/queries/JDBCProjectQueries.java"}, "focal_method": {"identifier": "projectInsertStatement", "parameters": "(String projectName, String url)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String projectInsertStatement(String projectName, String url) {\n        return \"INSERT INTO Project (name, url) \" +\n                \"VALUES ('\" + projectName + \"', '\" + url + \"') ON CONFLICT DO NOTHING;\";\n    }", "signature": "String projectInsertStatement(String projectName, String url)", "full_signature": "@Override public String projectInsertStatement(String projectName, String url)", "class_method_signature": "JDBCProjectQueries.projectInsertStatement(String projectName, String url)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 175298978, "url": "https://github.com/HabchiSarra/Sniffer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 587, "license": "licensed"}}