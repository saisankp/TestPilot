{"test_class": {"identifier": "FastCGIHandlerFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "PoolFactory poolFactory;", "modifier": "", "type": "PoolFactory", "declarator": "poolFactory", "var_name": "poolFactory"}], "file": "client/core/src/test/java/org/jfastcgi/client/FastCGIHandlerFactoryTest.java"}, "test_case": {"identifier": "testCreate_twoClusteredAddresses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreate_twoClusteredAddresses() throws Exception {\n        final Map<String, String> data = new HashMap<String, String>();\n        data.put(FastCGIHandlerFactory.PARAM_CLUSTER_ADRESSES,\n                \"127.0.0.1:9000;127.0.0.1:9001\");\n        FastCGIHandlerFactory.create(data);\n        verify(poolFactory).addAddress(\"127.0.0.1:9000\");\n        verify(poolFactory).addAddress(\"127.0.0.1:9001\");\n    }", "signature": "void testCreate_twoClusteredAddresses()", "full_signature": "@Test public void testCreate_twoClusteredAddresses()", "class_method_signature": "FastCGIHandlerFactoryTest.testCreate_twoClusteredAddresses()", "testcase": true, "constructor": false, "invocations": ["put", "create", "addAddress", "verify", "addAddress", "verify"]}, "focal_class": {"identifier": "FastCGIHandlerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static String PARAM_SERVER_ADDRESS = \"server-address\";", "modifier": "public final static", "type": "String", "declarator": "PARAM_SERVER_ADDRESS = \"server-address\"", "var_name": "PARAM_SERVER_ADDRESS"}, {"original_string": "public final static String PARAM_START_EXECUTABLE = \"start-executable\";", "modifier": "public final static", "type": "String", "declarator": "PARAM_START_EXECUTABLE = \"start-executable\"", "var_name": "PARAM_START_EXECUTABLE"}, {"original_string": "public final static String PARAM_CONNECTION_FACTORY = \"connection-factory\";", "modifier": "public final static", "type": "String", "declarator": "PARAM_CONNECTION_FACTORY = \"connection-factory\"", "var_name": "PARAM_CONNECTION_FACTORY"}, {"original_string": "public final static String PARAM_CLUSTER_ADRESSES = \"cluster-adresses\";", "modifier": "public final static", "type": "String", "declarator": "PARAM_CLUSTER_ADRESSES = \"cluster-adresses\"", "var_name": "PARAM_CLUSTER_ADRESSES"}, {"original_string": "public final static String PARAM_KEEP_ALIVE = \"keep-alive\";", "modifier": "public final static", "type": "String", "declarator": "PARAM_KEEP_ALIVE = \"keep-alive\"", "var_name": "PARAM_KEEP_ALIVE"}, {"original_string": "public final static String PARAM_ALLOWED_HEADERS = \"allowed-headers-regex\";", "modifier": "public final static", "type": "String", "declarator": "PARAM_ALLOWED_HEADERS = \"allowed-headers-regex\"", "var_name": "PARAM_ALLOWED_HEADERS"}, {"original_string": "public final static String PARAM_PHP_SCRIPT_FROM_PATH = \"php-script-from-path-regex\";", "modifier": "public final static", "type": "String", "declarator": "PARAM_PHP_SCRIPT_FROM_PATH = \"php-script-from-path-regex\"", "var_name": "PARAM_PHP_SCRIPT_FROM_PATH"}, {"original_string": "public final static String[] PARAM_NAMES = new String[] {\n        PARAM_SERVER_ADDRESS, PARAM_START_EXECUTABLE,\n        PARAM_CONNECTION_FACTORY, PARAM_CLUSTER_ADRESSES,\n        PARAM_ALLOWED_HEADERS, PARAM_PHP_SCRIPT_FROM_PATH, PARAM_KEEP_ALIVE };", "modifier": "public final static", "type": "String[]", "declarator": "PARAM_NAMES = new String[] {\n        PARAM_SERVER_ADDRESS, PARAM_START_EXECUTABLE,\n        PARAM_CONNECTION_FACTORY, PARAM_CLUSTER_ADRESSES,\n        PARAM_ALLOWED_HEADERS, PARAM_PHP_SCRIPT_FROM_PATH, PARAM_KEEP_ALIVE }", "var_name": "PARAM_NAMES"}, {"original_string": "private final static Logger LOGGER = LoggerFactory\n            .getLogger(FastCGIHandlerFactory.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = LoggerFactory\n            .getLogger(FastCGIHandlerFactory.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "create", "parameters": "(final Map<String, String> config)", "modifiers": "public static", "return": "FastCGIHandler", "signature": "FastCGIHandler create(final Map<String, String> config)", "full_signature": "public static FastCGIHandler create(final Map<String, String> config)", "class_method_signature": "FastCGIHandlerFactory.create(final Map<String, String> config)", "testcase": false, "constructor": false}, {"identifier": "buildConnectionFactoryForClass", "parameters": "(\n            final String className)", "modifiers": "private static", "return": "ConnectionFactory", "signature": "ConnectionFactory buildConnectionFactoryForClass(\n            final String className)", "full_signature": "private static ConnectionFactory buildConnectionFactoryForClass(\n            final String className)", "class_method_signature": "FastCGIHandlerFactory.buildConnectionFactoryForClass(\n            final String className)", "testcase": false, "constructor": false}, {"identifier": "getLog", "parameters": "()", "modifiers": "private static", "return": "Logger", "signature": "Logger getLog()", "full_signature": "private static Logger getLog()", "class_method_signature": "FastCGIHandlerFactory.getLog()", "testcase": false, "constructor": false}], "file": "client/core/src/main/java/org/jfastcgi/client/FastCGIHandlerFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(final Map<String, String> config)", "modifiers": "public static", "return": "FastCGIHandler", "body": "public static FastCGIHandler create(final Map<String, String> config) {\n        final FastCGIHandler handler = new FastCGIHandler();\n        if (config.get(PARAM_SERVER_ADDRESS) != null) {\n            getLog().info(\n                    \"configuring fastcgi servlet using default single connection handler\");\n            handler.setConnectionFactory(new SingleConnectionFactory(config\n                    .get(PARAM_SERVER_ADDRESS)));\n        }\n        else if (config.get(PARAM_CONNECTION_FACTORY) != null) {\n            final String className = config.get(PARAM_CONNECTION_FACTORY)\n                    .trim();\n            getLog().info(\n                    \"configuring fastCGI handler using custom class '\"\n                            + className + \"'\");\n            handler.setConnectionFactory(buildConnectionFactoryForClass(className));\n        }\n        else if (config.get(PARAM_CLUSTER_ADRESSES) != null) {\n            getLog().info(\n                    \"configuring fastCGI handler using the following adresses : \");\n            final PoolFactory poolFactory = PoolFactoryFactory\n                    .getOrCreatePoolFactory();\n            for (final String addr : config.get(PARAM_CLUSTER_ADRESSES)\n                    .replaceAll(\"[\\n\\t]\", \";\").replaceAll(\" \", \"\").split(\";\")) {\n                if (!addr.isEmpty()) {\n                    getLog().info(\"  => \" + addr);\n                    poolFactory.addAddress(addr.trim());\n                }\n            }\n            handler.setConnectionFactory(new PooledConnectionFactory(\n                    poolFactory));// sorry for the confusion, everything seems\n            // to be named 'factory'...\n        }\n        else {\n            throw new IllegalArgumentException(\n                    \"Cannot create fcgi handler : did you provide any configuration ?\");\n        }\n\n        // handle filtered-headers param\n        if (config.get(PARAM_ALLOWED_HEADERS) != null) {\n            final String allowedHeaders = config.get(PARAM_ALLOWED_HEADERS);\n\n            if (getLog().isInfoEnabled()) {\n                getLog().info(\n                        \"The following http headers will be transmitted (regex): [\"\n                                + allowedHeaders + \"]\");\n            }\n            Pattern allowedHeadersPattern;\n            try {\n                allowedHeadersPattern = Pattern.compile(allowedHeaders);\n            }\n            catch (PatternSyntaxException pse) {\n                throw new IllegalArgumentException(\n                        \"Invalid regular expression in configuration parameter \"\n                        + PARAM_ALLOWED_HEADERS, pse);\n            }\n            handler.setAllowedHeaders(allowedHeadersPattern);\n        }\n\n        if (config.get(PARAM_PHP_SCRIPT_FROM_PATH) != null) {\n            final String phpScriptFromPathPattern = config.get(PARAM_PHP_SCRIPT_FROM_PATH);\n\n            Pattern phpScriptFromPath;\n            try {\n                phpScriptFromPath = Pattern.compile(phpScriptFromPathPattern);\n            }\n            catch (PatternSyntaxException pse) {\n                throw new IllegalArgumentException(\n                        \"Invalid regular expression in configuration parameter \"\n                        + PARAM_PHP_SCRIPT_FROM_PATH, pse);\n            }\n            handler.setPhpScriptFromPathPattern(phpScriptFromPath);\n        }\n\n        if (config.get(PARAM_KEEP_ALIVE) != null) {\n            final String value = config.get(PARAM_KEEP_ALIVE);\n            if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"yes\")) {\n                handler.setKeepAlive(true);\n            }\n        }\n\n        if (config.get(PARAM_START_EXECUTABLE) != null) {\n            final String cmd = config.get(PARAM_START_EXECUTABLE);\n            try {\n                handler.startProcess(cmd);\n            }\n            catch (final IOException e) {\n                getLog().error(\"while starting external process\", e);\n                throw new RuntimeException(e);\n            }\n        }\n\n        return handler;\n    }", "signature": "FastCGIHandler create(final Map<String, String> config)", "full_signature": "public static FastCGIHandler create(final Map<String, String> config)", "class_method_signature": "FastCGIHandlerFactory.create(final Map<String, String> config)", "testcase": false, "constructor": false, "invocations": ["get", "info", "getLog", "setConnectionFactory", "get", "get", "trim", "get", "info", "getLog", "setConnectionFactory", "buildConnectionFactoryForClass", "get", "info", "getLog", "getOrCreatePoolFactory", "split", "replaceAll", "replaceAll", "get", "isEmpty", "info", "getLog", "addAddress", "trim", "setConnectionFactory", "get", "get", "isInfoEnabled", "getLog", "info", "getLog", "compile", "setAllowedHeaders", "get", "get", "compile", "setPhpScriptFromPathPattern", "get", "get", "equalsIgnoreCase", "equalsIgnoreCase", "setKeepAlive", "get", "get", "startProcess", "error", "getLog"]}, "repository": {"repo_id": 11985762, "url": "https://github.com/jFastCGI/jfastcgi", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 32, "size": 5079, "license": "licensed"}}