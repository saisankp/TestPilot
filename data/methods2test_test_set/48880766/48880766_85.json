{"test_class": {"identifier": "SmileConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/tech/tablesaw/conversion/smile/SmileConverterTest.java"}, "test_case": {"identifier": "allColumnTypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void allColumnTypes() throws IOException {\n    Table table = Table.create();\n    table.addColumns(BooleanColumn.create(\"boolean\", new boolean[] {true, false}));\n    table.addColumns(DoubleColumn.create(\"double\", new double[] {1.2, 3.4}));\n    table.addColumns(FloatColumn.create(\"float\", new float[] {5.6f, 7.8f}));\n    table.addColumns(\n        InstantColumn.create(\n            \"instant\",\n            new Instant[] {\n              Instant.ofEpochMilli(1578452479123l), Instant.ofEpochMilli(1578451111111l)\n            }));\n    table.addColumns(IntColumn.create(\"int\", new int[] {8, 9}));\n    table.addColumns(\n        DateColumn.create(\n            \"date\", new LocalDate[] {LocalDate.of(2020, 01, 01), LocalDate.of(2020, 01, 07)}));\n    table.addColumns(\n        DateTimeColumn.create(\n            \"datetime\",\n            new LocalDateTime[] {\n              LocalDateTime.ofInstant(Instant.ofEpochMilli(1333352479123l), ZoneOffset.UTC),\n              LocalDateTime.ofInstant(Instant.ofEpochMilli(1333333333333l), ZoneOffset.UTC)\n            }));\n    table.addColumns(\n        TimeColumn.create(\n            \"time\", new LocalTime[] {LocalTime.of(8, 37, 48), LocalTime.of(8, 59, 06)}));\n    table.addColumns(LongColumn.create(\"long\", new long[] {3l, 4l}));\n    table.addColumns(ShortColumn.create(\"short\", new short[] {1, 2}));\n    table.addColumns(StringColumn.create(\"string\", new String[] {\"james\", \"bond\"}));\n    table.addColumns(TextColumn.create(\"text\", new String[] {\"foo\", \"bar\"}));\n    DataFrame dataframe = table.smile().toDataFrame();\n    assertEquals(2, dataframe.nrows());\n  }", "signature": "void allColumnTypes()", "full_signature": "@Test public void allColumnTypes()", "class_method_signature": "SmileConverterTest.allColumnTypes()", "testcase": true, "constructor": false, "invocations": ["create", "addColumns", "create", "addColumns", "create", "addColumns", "create", "addColumns", "create", "ofEpochMilli", "ofEpochMilli", "addColumns", "create", "addColumns", "create", "of", "of", "addColumns", "create", "ofInstant", "ofEpochMilli", "ofInstant", "ofEpochMilli", "addColumns", "create", "of", "of", "addColumns", "create", "addColumns", "create", "addColumns", "create", "addColumns", "create", "toDataFrame", "smile", "assertEquals", "nrows"]}, "focal_class": {"identifier": "SmileConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Relation table;", "modifier": "private final", "type": "Relation", "declarator": "table", "var_name": "table"}], "methods": [{"identifier": "SmileConverter", "parameters": "(Relation table)", "modifiers": "public", "return": "", "signature": " SmileConverter(Relation table)", "full_signature": "public  SmileConverter(Relation table)", "class_method_signature": "SmileConverter.SmileConverter(Relation table)", "testcase": false, "constructor": true}, {"identifier": "toDataFrame", "parameters": "()", "modifiers": "public", "return": "DataFrame", "signature": "DataFrame toDataFrame()", "full_signature": "public DataFrame toDataFrame()", "class_method_signature": "SmileConverter.toDataFrame()", "testcase": false, "constructor": false}, {"identifier": "toDataFrame", "parameters": "(StructType schema)", "modifiers": "public", "return": "DataFrame", "signature": "DataFrame toDataFrame(StructType schema)", "full_signature": "public DataFrame toDataFrame(StructType schema)", "class_method_signature": "SmileConverter.toDataFrame(StructType schema)", "testcase": false, "constructor": false}, {"identifier": "toSmileType", "parameters": "(ColumnType type)", "modifiers": "private", "return": "DataType", "signature": "DataType toSmileType(ColumnType type)", "full_signature": "private DataType toSmileType(ColumnType type)", "class_method_signature": "SmileConverter.toSmileType(ColumnType type)", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/conversion/smile/SmileConverter.java"}, "focal_method": {"identifier": "toDataFrame", "parameters": "()", "modifiers": "public", "return": "DataFrame", "body": "public DataFrame toDataFrame() {\n    StructType schema =\n        DataTypes.struct(\n            table.columns().stream()\n                .map(col -> new StructField(col.name(), toSmileType(col.type())))\n                .collect(Collectors.toList()));\n    return toDataFrame(schema);\n  }", "signature": "DataFrame toDataFrame()", "full_signature": "public DataFrame toDataFrame()", "class_method_signature": "SmileConverter.toDataFrame()", "testcase": false, "constructor": false, "invocations": ["struct", "collect", "map", "stream", "columns", "name", "toSmileType", "type", "toList", "toDataFrame"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}