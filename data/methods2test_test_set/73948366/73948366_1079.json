{"test_class": {"identifier": "IPBlockTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/utils/IPBlockTest.java"}, "test_case": {"identifier": "testIpCheck", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIpCheck() {\n        \n        // subnet/netmask: 10.1.0.1/32\n        // address range: 10.1.0.1\n        \n        IPBlock ipBlock = new IPBlock(\"10.1.0.1/32\");\n        assertTrue(ipBlock.ipCheck(IPBlock.convertIPToLong(\"10.1.0.1\")));\n        assertFalse(ipBlock.ipCheck(IPBlock.convertIPToLong(\"10.1.0.2\")));\n        \n        // subnet/netmask: 10.1.0.0/21\n        // address range: 10.1.0.0 - 10.1.7.255\n        \n        ipBlock = new IPBlock(\"10.1.0.0/21\");\n        assertTrue(ipBlock.ipCheck(IPBlock.convertIPToLong(\"10.1.0.0\")));\n        assertTrue(ipBlock.ipCheck(IPBlock.convertIPToLong(\"10.1.7.255\")));\n        assertTrue(ipBlock.ipCheck(IPBlock.convertIPToLong(\"10.1.3.25\")));\n        assertTrue(ipBlock.ipCheck(IPBlock.convertIPToLong(\"10.1.0.24\")));\n        assertFalse(ipBlock.ipCheck(IPBlock.convertIPToLong(\"10.1.8.0\")));\n        assertFalse(ipBlock.ipCheck(IPBlock.convertIPToLong(\"10.0.0.0\")));\n        assertFalse(ipBlock.ipCheck(IPBlock.convertIPToLong(\"10.2.0.0\")));\n        assertFalse(ipBlock.ipCheck(IPBlock.convertIPToLong(\"10.2.1.255\")));\n\n        ipBlock = new IPBlock(\"35.160.0.0/13\");\n        assertTrue(ipBlock.ipCheck(IPBlock.convertIPToLong(\"35.166.98.147\")));\n    }", "signature": "void testIpCheck()", "full_signature": "@Test public void testIpCheck()", "class_method_signature": "IPBlockTest.testIpCheck()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "ipCheck", "convertIPToLong", "assertFalse", "ipCheck", "convertIPToLong", "assertTrue", "ipCheck", "convertIPToLong", "assertTrue", "ipCheck", "convertIPToLong", "assertTrue", "ipCheck", "convertIPToLong", "assertTrue", "ipCheck", "convertIPToLong", "assertFalse", "ipCheck", "convertIPToLong", "assertFalse", "ipCheck", "convertIPToLong", "assertFalse", "ipCheck", "convertIPToLong", "assertFalse", "ipCheck", "convertIPToLong", "assertTrue", "ipCheck", "convertIPToLong"]}, "focal_class": {"identifier": "IPBlock", "superclass": "", "interfaces": "", "fields": [{"original_string": "long subnet;", "modifier": "", "type": "long", "declarator": "subnet", "var_name": "subnet"}, {"original_string": "long mask;", "modifier": "", "type": "long", "declarator": "mask", "var_name": "mask"}], "methods": [{"identifier": "IPBlock", "parameters": "(final String ipBlock)", "modifiers": "public", "return": "", "signature": " IPBlock(final String ipBlock)", "full_signature": "public  IPBlock(final String ipBlock)", "class_method_signature": "IPBlock.IPBlock(final String ipBlock)", "testcase": false, "constructor": true}, {"identifier": "ipCheck", "parameters": "(long addr)", "modifiers": "public", "return": "boolean", "signature": "boolean ipCheck(long addr)", "full_signature": "public boolean ipCheck(long addr)", "class_method_signature": "IPBlock.ipCheck(long addr)", "testcase": false, "constructor": false}, {"identifier": "convertIPToLong", "parameters": "(final String ipAddress)", "modifiers": "public static", "return": "long", "signature": "long convertIPToLong(final String ipAddress)", "full_signature": "public static long convertIPToLong(final String ipAddress)", "class_method_signature": "IPBlock.convertIPToLong(final String ipAddress)", "testcase": false, "constructor": false}, {"identifier": "convertMaskToLong", "parameters": "(int value)", "modifiers": "public static", "return": "long", "signature": "long convertMaskToLong(int value)", "full_signature": "public static long convertMaskToLong(int value)", "class_method_signature": "IPBlock.convertMaskToLong(int value)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/utils/IPBlock.java"}, "focal_method": {"identifier": "ipCheck", "parameters": "(long addr)", "modifiers": "public", "return": "boolean", "body": "public boolean ipCheck(long addr) {\n        return ((addr & mask) == subnet);\n    }", "signature": "boolean ipCheck(long addr)", "full_signature": "public boolean ipCheck(long addr)", "class_method_signature": "IPBlock.ipCheck(long addr)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}