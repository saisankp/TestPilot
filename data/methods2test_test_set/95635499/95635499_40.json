{"test_class": {"identifier": "TimeSeriesUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double EPS_DELTA = 0.0001;", "modifier": "private static final", "type": "double", "declarator": "EPS_DELTA = 0.0001", "var_name": "EPS_DELTA"}, {"original_string": "double[] T = { 1, 2, 3, 4, 5, 6, 7, 8 };", "modifier": "", "type": "double[]", "declarator": "T = { 1, 2, 3, 4, 5, 6, 7, 8 }", "var_name": "T"}, {"original_string": "double[] U = { 1, 1, 1, 1, 1, 1 };", "modifier": "", "type": "double[]", "declarator": "U = { 1, 1, 1, 1, 1, 1 }", "var_name": "U"}], "file": "JAICore/jaicore-ml/src/test/java/ai/libs/jaicore/ml/classification/singlelabel/timeseries/util/TimeSeriesUtilTest.java"}, "test_case": {"identifier": "getModeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getModeTest() {\n\t\tint[] testArray = new int[] { 1, 2, 1, 1, 4, 6, 6, 6, 7, 7, 7, 7, 7, 7, 2, 1, 1 };\n\t\tAssert.assertEquals(7, TimeSeriesUtil.getMode(testArray));\n\n\t\ttestArray = new int[] {};\n\t\tAssert.assertEquals(-1, TimeSeriesUtil.getMode(testArray));\n\n\t\ttestArray = new int[] { 1, 1, 2, 2 };\n\t\tAssert.assertEquals(1, TimeSeriesUtil.getMode(testArray));\n\t}", "signature": "void getModeTest()", "full_signature": "@Test public void getModeTest()", "class_method_signature": "TimeSeriesUtilTest.getModeTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getMode", "assertEquals", "getMode", "assertEquals", "getMode"]}, "focal_class": {"identifier": "TimeSeriesUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "TimeSeriesUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " TimeSeriesUtil()", "full_signature": "private  TimeSeriesUtil()", "class_method_signature": "TimeSeriesUtil.TimeSeriesUtil()", "testcase": false, "constructor": true}, {"identifier": "isTimeSeries", "parameters": "(final INDArray... array)", "modifiers": "public static", "return": "boolean", "signature": "boolean isTimeSeries(final INDArray... array)", "full_signature": "public static boolean isTimeSeries(final INDArray... array)", "class_method_signature": "TimeSeriesUtil.isTimeSeries(final INDArray... array)", "testcase": false, "constructor": false}, {"identifier": "isTimeSeries", "parameters": "(final int length, final INDArray... array)", "modifiers": "public static", "return": "boolean", "signature": "boolean isTimeSeries(final int length, final INDArray... array)", "full_signature": "public static boolean isTimeSeries(final int length, final INDArray... array)", "class_method_signature": "TimeSeriesUtil.isTimeSeries(final int length, final INDArray... array)", "testcase": false, "constructor": false}, {"identifier": "isTimeSeries", "parameters": "(final int length, final double[]... array)", "modifiers": "public static", "return": "boolean", "signature": "boolean isTimeSeries(final int length, final double[]... array)", "full_signature": "public static boolean isTimeSeries(final int length, final double[]... array)", "class_method_signature": "TimeSeriesUtil.isTimeSeries(final int length, final double[]... array)", "testcase": false, "constructor": false}, {"identifier": "isTimeSeriesOrException", "parameters": "(final INDArray... array)", "modifiers": "public static", "return": "void", "signature": "void isTimeSeriesOrException(final INDArray... array)", "full_signature": "public static void isTimeSeriesOrException(final INDArray... array)", "class_method_signature": "TimeSeriesUtil.isTimeSeriesOrException(final INDArray... array)", "testcase": false, "constructor": false}, {"identifier": "isTimeSeriesOrException", "parameters": "(final int length, final INDArray... array)", "modifiers": "public static", "return": "void", "signature": "void isTimeSeriesOrException(final int length, final INDArray... array)", "full_signature": "public static void isTimeSeriesOrException(final int length, final INDArray... array)", "class_method_signature": "TimeSeriesUtil.isTimeSeriesOrException(final int length, final INDArray... array)", "testcase": false, "constructor": false}, {"identifier": "isTimeSeriesOrException", "parameters": "(final int length, final double[]... array)", "modifiers": "public static", "return": "void", "signature": "void isTimeSeriesOrException(final int length, final double[]... array)", "full_signature": "public static void isTimeSeriesOrException(final int length, final double[]... array)", "class_method_signature": "TimeSeriesUtil.isTimeSeriesOrException(final int length, final double[]... array)", "testcase": false, "constructor": false}, {"identifier": "isSameLength", "parameters": "(final INDArray timeSeries1, final INDArray... timeSeries)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSameLength(final INDArray timeSeries1, final INDArray... timeSeries)", "full_signature": "public static boolean isSameLength(final INDArray timeSeries1, final INDArray... timeSeries)", "class_method_signature": "TimeSeriesUtil.isSameLength(final INDArray timeSeries1, final INDArray... timeSeries)", "testcase": false, "constructor": false}, {"identifier": "isSameLength", "parameters": "(final double[] timeSeries1, final double[]... timeSeries)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSameLength(final double[] timeSeries1, final double[]... timeSeries)", "full_signature": "public static boolean isSameLength(final double[] timeSeries1, final double[]... timeSeries)", "class_method_signature": "TimeSeriesUtil.isSameLength(final double[] timeSeries1, final double[]... timeSeries)", "testcase": false, "constructor": false}, {"identifier": "isSameLengthOrException", "parameters": "(final INDArray timeSeries1, final INDArray... timeSeries)", "modifiers": "public static", "return": "void", "signature": "void isSameLengthOrException(final INDArray timeSeries1, final INDArray... timeSeries)", "full_signature": "public static void isSameLengthOrException(final INDArray timeSeries1, final INDArray... timeSeries)", "class_method_signature": "TimeSeriesUtil.isSameLengthOrException(final INDArray timeSeries1, final INDArray... timeSeries)", "testcase": false, "constructor": false}, {"identifier": "isSameLengthOrException", "parameters": "(final double[] timeSeries1, final double[]... timeSeries)", "modifiers": "public static", "return": "void", "signature": "void isSameLengthOrException(final double[] timeSeries1, final double[]... timeSeries)", "full_signature": "public static void isSameLengthOrException(final double[] timeSeries1, final double[]... timeSeries)", "class_method_signature": "TimeSeriesUtil.isSameLengthOrException(final double[] timeSeries1, final double[]... timeSeries)", "testcase": false, "constructor": false}, {"identifier": "createEquidistantTimestamps", "parameters": "(final INDArray timeSeries)", "modifiers": "public static", "return": "INDArray", "signature": "INDArray createEquidistantTimestamps(final INDArray timeSeries)", "full_signature": "public static INDArray createEquidistantTimestamps(final INDArray timeSeries)", "class_method_signature": "TimeSeriesUtil.createEquidistantTimestamps(final INDArray timeSeries)", "testcase": false, "constructor": false}, {"identifier": "createEquidistantTimestamps", "parameters": "(final double[] timeSeries)", "modifiers": "public static", "return": "double[]", "signature": "double[] createEquidistantTimestamps(final double[] timeSeries)", "full_signature": "public static double[] createEquidistantTimestamps(final double[] timeSeries)", "class_method_signature": "TimeSeriesUtil.createEquidistantTimestamps(final double[] timeSeries)", "testcase": false, "constructor": false}, {"identifier": "getInterval", "parameters": "(final double[] timeSeries, final int start, final int end)", "modifiers": "public static", "return": "double[]", "signature": "double[] getInterval(final double[] timeSeries, final int start, final int end)", "full_signature": "public static double[] getInterval(final double[] timeSeries, final int start, final int end)", "class_method_signature": "TimeSeriesUtil.getInterval(final double[] timeSeries, final int start, final int end)", "testcase": false, "constructor": false}, {"identifier": "normalizeINDArray", "parameters": "(final INDArray array, final boolean inplace)", "modifiers": "public static", "return": "INDArray", "signature": "INDArray normalizeINDArray(final INDArray array, final boolean inplace)", "full_signature": "public static INDArray normalizeINDArray(final INDArray array, final boolean inplace)", "class_method_signature": "TimeSeriesUtil.normalizeINDArray(final INDArray array, final boolean inplace)", "testcase": false, "constructor": false}, {"identifier": "getMode", "parameters": "(final int[] array)", "modifiers": "public static", "return": "int", "signature": "int getMode(final int[] array)", "full_signature": "public static int getMode(final int[] array)", "class_method_signature": "TimeSeriesUtil.getMode(final int[] array)", "testcase": false, "constructor": false}, {"identifier": "getMaximumKeyByValue", "parameters": "(final Map<T, Integer> map)", "modifiers": "public static", "return": "T", "signature": "T getMaximumKeyByValue(final Map<T, Integer> map)", "full_signature": "public static T getMaximumKeyByValue(final Map<T, Integer> map)", "class_method_signature": "TimeSeriesUtil.getMaximumKeyByValue(final Map<T, Integer> map)", "testcase": false, "constructor": false}, {"identifier": "zNormalize", "parameters": "(final double[] dataVector, final boolean besselsCorrection)", "modifiers": "public static", "return": "double[]", "signature": "double[] zNormalize(final double[] dataVector, final boolean besselsCorrection)", "full_signature": "public static double[] zNormalize(final double[] dataVector, final boolean besselsCorrection)", "class_method_signature": "TimeSeriesUtil.zNormalize(final double[] dataVector, final boolean besselsCorrection)", "testcase": false, "constructor": false}, {"identifier": "sortIndexes", "parameters": "(final double[] vector, final boolean ascending)", "modifiers": "public static", "return": "List<Integer>", "signature": "List<Integer> sortIndexes(final double[] vector, final boolean ascending)", "full_signature": "public static List<Integer> sortIndexes(final double[] vector, final boolean ascending)", "class_method_signature": "TimeSeriesUtil.sortIndexes(final double[] vector, final boolean ascending)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfClasses", "parameters": "(final TimeSeriesDataset2 dataset)", "modifiers": "public static", "return": "int", "signature": "int getNumberOfClasses(final TimeSeriesDataset2 dataset)", "full_signature": "public static int getNumberOfClasses(final TimeSeriesDataset2 dataset)", "class_method_signature": "TimeSeriesUtil.getNumberOfClasses(final TimeSeriesDataset2 dataset)", "testcase": false, "constructor": false}, {"identifier": "getClassesInDataset", "parameters": "(final TimeSeriesDataset2 dataset)", "modifiers": "public static", "return": "List<Integer>", "signature": "List<Integer> getClassesInDataset(final TimeSeriesDataset2 dataset)", "full_signature": "public static List<Integer> getClassesInDataset(final TimeSeriesDataset2 dataset)", "class_method_signature": "TimeSeriesUtil.getClassesInDataset(final TimeSeriesDataset2 dataset)", "testcase": false, "constructor": false}, {"identifier": "shuffleTimeSeriesDataset", "parameters": "(final TimeSeriesDataset2 dataset, final int seed)", "modifiers": "public static", "return": "void", "signature": "void shuffleTimeSeriesDataset(final TimeSeriesDataset2 dataset, final int seed)", "full_signature": "public static void shuffleTimeSeriesDataset(final TimeSeriesDataset2 dataset, final int seed)", "class_method_signature": "TimeSeriesUtil.shuffleTimeSeriesDataset(final TimeSeriesDataset2 dataset, final int seed)", "testcase": false, "constructor": false}, {"identifier": "shuffleMatrix", "parameters": "(final double[][] srcMatrix, final List<Integer> indices)", "modifiers": "private static", "return": "double[][]", "signature": "double[][] shuffleMatrix(final double[][] srcMatrix, final List<Integer> indices)", "full_signature": "private static double[][] shuffleMatrix(final double[][] srcMatrix, final List<Integer> indices)", "class_method_signature": "TimeSeriesUtil.shuffleMatrix(final double[][] srcMatrix, final List<Integer> indices)", "testcase": false, "constructor": false}, {"identifier": "shuffleMatrix", "parameters": "(final int[] srcMatrix, final List<Integer> indices)", "modifiers": "private static", "return": "int[]", "signature": "int[] shuffleMatrix(final int[] srcMatrix, final List<Integer> indices)", "full_signature": "private static int[] shuffleMatrix(final int[] srcMatrix, final List<Integer> indices)", "class_method_signature": "TimeSeriesUtil.shuffleMatrix(final int[] srcMatrix, final List<Integer> indices)", "testcase": false, "constructor": false}, {"identifier": "getTrainingAndTestDataForFold", "parameters": "(final int fold, final int numFolds, final double[][] srcValueMatrix, final int[] srcTargetMatrix)", "modifiers": "public static", "return": "Pair<TimeSeriesDataset2, TimeSeriesDataset2>", "signature": "Pair<TimeSeriesDataset2, TimeSeriesDataset2> getTrainingAndTestDataForFold(final int fold, final int numFolds, final double[][] srcValueMatrix, final int[] srcTargetMatrix)", "full_signature": "public static Pair<TimeSeriesDataset2, TimeSeriesDataset2> getTrainingAndTestDataForFold(final int fold, final int numFolds, final double[][] srcValueMatrix, final int[] srcTargetMatrix)", "class_method_signature": "TimeSeriesUtil.getTrainingAndTestDataForFold(final int fold, final int numFolds, final double[][] srcValueMatrix, final int[] srcTargetMatrix)", "testcase": false, "constructor": false}, {"identifier": "selectTrainingDataForFold", "parameters": "(final int fold, final int numFolds, final double[][] srcValueMatrix, final int[] srcTargetMatrix)", "modifiers": "private static", "return": "TimeSeriesDataset2", "signature": "TimeSeriesDataset2 selectTrainingDataForFold(final int fold, final int numFolds, final double[][] srcValueMatrix, final int[] srcTargetMatrix)", "full_signature": "private static TimeSeriesDataset2 selectTrainingDataForFold(final int fold, final int numFolds, final double[][] srcValueMatrix, final int[] srcTargetMatrix)", "class_method_signature": "TimeSeriesUtil.selectTrainingDataForFold(final int fold, final int numFolds, final double[][] srcValueMatrix, final int[] srcTargetMatrix)", "testcase": false, "constructor": false}, {"identifier": "selectTestDataForFold", "parameters": "(final int fold, final int numFolds, final double[][] srcValueMatrix, final int[] srcTargetMatrix)", "modifiers": "private static", "return": "TimeSeriesDataset2", "signature": "TimeSeriesDataset2 selectTestDataForFold(final int fold, final int numFolds, final double[][] srcValueMatrix, final int[] srcTargetMatrix)", "full_signature": "private static TimeSeriesDataset2 selectTestDataForFold(final int fold, final int numFolds, final double[][] srcValueMatrix, final int[] srcTargetMatrix)", "class_method_signature": "TimeSeriesUtil.selectTestDataForFold(final int fold, final int numFolds, final double[][] srcValueMatrix, final int[] srcTargetMatrix)", "testcase": false, "constructor": false}, {"identifier": "createDatasetForMatrix", "parameters": "(final int[] targets, final double[][]... valueMatrices)", "modifiers": "public static", "return": "TimeSeriesDataset2", "signature": "TimeSeriesDataset2 createDatasetForMatrix(final int[] targets, final double[][]... valueMatrices)", "full_signature": "public static TimeSeriesDataset2 createDatasetForMatrix(final int[] targets, final double[][]... valueMatrices)", "class_method_signature": "TimeSeriesUtil.createDatasetForMatrix(final int[] targets, final double[][]... valueMatrices)", "testcase": false, "constructor": false}, {"identifier": "createDatasetForMatrix", "parameters": "(final double[][]... valueMatrices)", "modifiers": "public static", "return": "TimeSeriesDataset2", "signature": "TimeSeriesDataset2 createDatasetForMatrix(final double[][]... valueMatrices)", "full_signature": "public static TimeSeriesDataset2 createDatasetForMatrix(final double[][]... valueMatrices)", "class_method_signature": "TimeSeriesUtil.createDatasetForMatrix(final double[][]... valueMatrices)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(final double[] timeSeries)", "modifiers": "public static", "return": "String", "signature": "String toString(final double[] timeSeries)", "full_signature": "public static String toString(final double[] timeSeries)", "class_method_signature": "TimeSeriesUtil.toString(final double[] timeSeries)", "testcase": false, "constructor": false}, {"identifier": "keoghDerivate", "parameters": "(final double[] t)", "modifiers": "public static", "return": "double[]", "signature": "double[] keoghDerivate(final double[] t)", "full_signature": "public static double[] keoghDerivate(final double[] t)", "class_method_signature": "TimeSeriesUtil.keoghDerivate(final double[] t)", "testcase": false, "constructor": false}, {"identifier": "keoghDerivateWithBoundaries", "parameters": "(final double[] t)", "modifiers": "public static", "return": "double[]", "signature": "double[] keoghDerivateWithBoundaries(final double[] t)", "full_signature": "public static double[] keoghDerivateWithBoundaries(final double[] t)", "class_method_signature": "TimeSeriesUtil.keoghDerivateWithBoundaries(final double[] t)", "testcase": false, "constructor": false}, {"identifier": "backwardDifferenceDerivate", "parameters": "(final double[] t)", "modifiers": "public static", "return": "double[]", "signature": "double[] backwardDifferenceDerivate(final double[] t)", "full_signature": "public static double[] backwardDifferenceDerivate(final double[] t)", "class_method_signature": "TimeSeriesUtil.backwardDifferenceDerivate(final double[] t)", "testcase": false, "constructor": false}, {"identifier": "backwardDifferenceDerivateWithBoundaries", "parameters": "(final double[] t)", "modifiers": "public static", "return": "double[]", "signature": "double[] backwardDifferenceDerivateWithBoundaries(final double[] t)", "full_signature": "public static double[] backwardDifferenceDerivateWithBoundaries(final double[] t)", "class_method_signature": "TimeSeriesUtil.backwardDifferenceDerivateWithBoundaries(final double[] t)", "testcase": false, "constructor": false}, {"identifier": "forwardDifferenceDerivate", "parameters": "(final double[] t)", "modifiers": "public static", "return": "double[]", "signature": "double[] forwardDifferenceDerivate(final double[] t)", "full_signature": "public static double[] forwardDifferenceDerivate(final double[] t)", "class_method_signature": "TimeSeriesUtil.forwardDifferenceDerivate(final double[] t)", "testcase": false, "constructor": false}, {"identifier": "forwardDifferenceDerivateWithBoundaries", "parameters": "(final double[] t)", "modifiers": "public static", "return": "double[]", "signature": "double[] forwardDifferenceDerivateWithBoundaries(final double[] t)", "full_signature": "public static double[] forwardDifferenceDerivateWithBoundaries(final double[] t)", "class_method_signature": "TimeSeriesUtil.forwardDifferenceDerivateWithBoundaries(final double[] t)", "testcase": false, "constructor": false}, {"identifier": "gulloDerivate", "parameters": "(final double[] t)", "modifiers": "public static", "return": "double[]", "signature": "double[] gulloDerivate(final double[] t)", "full_signature": "public static double[] gulloDerivate(final double[] t)", "class_method_signature": "TimeSeriesUtil.gulloDerivate(final double[] t)", "testcase": false, "constructor": false}, {"identifier": "gulloDerivateWithBoundaries", "parameters": "(final double[] t)", "modifiers": "public static", "return": "double[]", "signature": "double[] gulloDerivateWithBoundaries(final double[] t)", "full_signature": "public static double[] gulloDerivateWithBoundaries(final double[] t)", "class_method_signature": "TimeSeriesUtil.gulloDerivateWithBoundaries(final double[] t)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "(final double[] t)", "modifiers": "public static", "return": "double", "signature": "double sum(final double[] t)", "full_signature": "public static double sum(final double[] t)", "class_method_signature": "TimeSeriesUtil.sum(final double[] t)", "testcase": false, "constructor": false}, {"identifier": "mean", "parameters": "(final double[] t)", "modifiers": "public static", "return": "double", "signature": "double mean(final double[] t)", "full_signature": "public static double mean(final double[] t)", "class_method_signature": "TimeSeriesUtil.mean(final double[] t)", "testcase": false, "constructor": false}, {"identifier": "variance", "parameters": "(final double[] t)", "modifiers": "public static", "return": "double", "signature": "double variance(final double[] t)", "full_signature": "public static double variance(final double[] t)", "class_method_signature": "TimeSeriesUtil.variance(final double[] t)", "testcase": false, "constructor": false}, {"identifier": "standardDeviation", "parameters": "(final double[] t)", "modifiers": "public static", "return": "double", "signature": "double standardDeviation(final double[] t)", "full_signature": "public static double standardDeviation(final double[] t)", "class_method_signature": "TimeSeriesUtil.standardDeviation(final double[] t)", "testcase": false, "constructor": false}, {"identifier": "normalizeByStandardDeviation", "parameters": "(final double[] t)", "modifiers": "public static", "return": "double[]", "signature": "double[] normalizeByStandardDeviation(final double[] t)", "full_signature": "public static double[] normalizeByStandardDeviation(final double[] t)", "class_method_signature": "TimeSeriesUtil.normalizeByStandardDeviation(final double[] t)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-ml/src/main/java/ai/libs/jaicore/ml/classification/singlelabel/timeseries/util/TimeSeriesUtil.java"}, "focal_method": {"identifier": "getMode", "parameters": "(final int[] array)", "modifiers": "public static", "return": "int", "body": "public static int getMode(final int[] array) {\n\t\tHashMap<Integer, Integer> statistics = new HashMap<>();\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tif (!statistics.containsKey(array[i])) {\n\t\t\t\tstatistics.put(array[i], 1);\n\t\t\t} else {\n\t\t\t\tstatistics.replace(array[i], statistics.get(array[i]) + 1);\n\t\t\t}\n\t\t}\n\n\t\treturn getMaximumKeyByValue(statistics) != null ? getMaximumKeyByValue(statistics) : -1;\n\t}", "signature": "int getMode(final int[] array)", "full_signature": "public static int getMode(final int[] array)", "class_method_signature": "TimeSeriesUtil.getMode(final int[] array)", "testcase": false, "constructor": false, "invocations": ["containsKey", "put", "replace", "get", "getMaximumKeyByValue", "getMaximumKeyByValue"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}