{"test_class": {"identifier": "XsltTransmogrifierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private XsltTransmogrifier<String> transformer;", "modifier": "private", "type": "XsltTransmogrifier<String>", "declarator": "transformer", "var_name": "transformer"}], "file": "commons/xml/src/test/java/org/openehealth/ipf/commons/xml/XsltTransmogrifierTest.java"}, "test_case": {"identifier": "testConvertString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvertString() throws IOException {\n        Source source = new StreamSource(new ClassPathResource(\n                \"xslt/createPatient.xml\").getInputStream());\n        String result = transformer.zap(source,\n                \"xslt/createPatient.xslt\");\n        assertNotNull(result);\n    }", "signature": "void testConvertString()", "full_signature": "@Test public void testConvertString()", "class_method_signature": "XsltTransmogrifierTest.testConvertString()", "testcase": true, "constructor": false, "invocations": ["getInputStream", "zap", "assertNotNull"]}, "focal_class": {"identifier": "XsltTransmogrifier", "superclass": "", "interfaces": "implements Transmogrifier<Source, T>", "fields": [{"original_string": "private final static Logger LOG = LoggerFactory.getLogger(XsltTransmogrifier.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(XsltTransmogrifier.class)", "var_name": "LOG"}, {"original_string": "private final Map<Object, Templates> templateCache = new HashMap<Object, Templates>();", "modifier": "private final", "type": "Map<Object, Templates>", "declarator": "templateCache = new HashMap<Object, Templates>()", "var_name": "templateCache"}, {"original_string": "private Map<String, Object> staticParams;", "modifier": "private", "type": "Map<String, Object>", "declarator": "staticParams", "var_name": "staticParams"}, {"original_string": "private final TransformerFactory factory;", "modifier": "private final", "type": "TransformerFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private final URIResolver resolver;", "modifier": "private final", "type": "URIResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private final Class<T> outputFormat;", "modifier": "private final", "type": "Class<T>", "declarator": "outputFormat", "var_name": "outputFormat"}], "methods": [{"identifier": "XsltTransmogrifier", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "", "signature": " XsltTransmogrifier()", "full_signature": "@SuppressWarnings(\"unchecked\") public  XsltTransmogrifier()", "class_method_signature": "XsltTransmogrifier.XsltTransmogrifier()", "testcase": false, "constructor": true}, {"identifier": "XsltTransmogrifier", "parameters": "(Class<T> outputFormat)", "modifiers": "public", "return": "", "signature": " XsltTransmogrifier(Class<T> outputFormat)", "full_signature": "public  XsltTransmogrifier(Class<T> outputFormat)", "class_method_signature": "XsltTransmogrifier.XsltTransmogrifier(Class<T> outputFormat)", "testcase": false, "constructor": true}, {"identifier": "XsltTransmogrifier", "parameters": "(Class<T> outputFormat,\n            Map<String, Object> staticParams)", "modifiers": "public", "return": "", "signature": " XsltTransmogrifier(Class<T> outputFormat,\n            Map<String, Object> staticParams)", "full_signature": "public  XsltTransmogrifier(Class<T> outputFormat,\n            Map<String, Object> staticParams)", "class_method_signature": "XsltTransmogrifier.XsltTransmogrifier(Class<T> outputFormat,\n            Map<String, Object> staticParams)", "testcase": false, "constructor": true}, {"identifier": "getTemplateCache", "parameters": "()", "modifiers": "protected", "return": "Map<Object, Templates>", "signature": "Map<Object, Templates> getTemplateCache()", "full_signature": "protected Map<Object, Templates> getTemplateCache()", "class_method_signature": "XsltTransmogrifier.getTemplateCache()", "testcase": false, "constructor": false}, {"identifier": "getFactory", "parameters": "()", "modifiers": "protected", "return": "TransformerFactory", "signature": "TransformerFactory getFactory()", "full_signature": "protected TransformerFactory getFactory()", "class_method_signature": "XsltTransmogrifier.getFactory()", "testcase": false, "constructor": false}, {"identifier": "getStaticParams", "parameters": "()", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getStaticParams()", "full_signature": "public Map<String, Object> getStaticParams()", "class_method_signature": "XsltTransmogrifier.getStaticParams()", "testcase": false, "constructor": false}, {"identifier": "setStaticParams", "parameters": "(Map<String, Object> staticParams)", "modifiers": "public", "return": "void", "signature": "void setStaticParams(Map<String, Object> staticParams)", "full_signature": "public void setStaticParams(Map<String, Object> staticParams)", "class_method_signature": "XsltTransmogrifier.setStaticParams(Map<String, Object> staticParams)", "testcase": false, "constructor": false}, {"identifier": "zap", "parameters": "(Source source, Object... params)", "modifiers": "@Override public", "return": "T", "signature": "T zap(Source source, Object... params)", "full_signature": "@Override public T zap(Source source, Object... params)", "class_method_signature": "XsltTransmogrifier.zap(Source source, Object... params)", "testcase": false, "constructor": false}, {"identifier": "doZap", "parameters": "(Source source, Result result, Object... params)", "modifiers": "private", "return": "void", "signature": "void doZap(Source source, Result result, Object... params)", "full_signature": "private void doZap(Source source, Result result, Object... params)", "class_method_signature": "XsltTransmogrifier.doZap(Source source, Result result, Object... params)", "testcase": false, "constructor": false}, {"identifier": "setXsltParameters", "parameters": "(Transformer transformer,\n            Map<String, Object> param)", "modifiers": "protected", "return": "void", "signature": "void setXsltParameters(Transformer transformer,\n            Map<String, Object> param)", "full_signature": "protected void setXsltParameters(Transformer transformer,\n            Map<String, Object> param)", "class_method_signature": "XsltTransmogrifier.setXsltParameters(Transformer transformer,\n            Map<String, Object> param)", "testcase": false, "constructor": false}, {"identifier": "template", "parameters": "(Object... params)", "modifiers": "synchronized protected", "return": "Templates", "signature": "Templates template(Object... params)", "full_signature": "synchronized protected Templates template(Object... params)", "class_method_signature": "XsltTransmogrifier.template(Object... params)", "testcase": false, "constructor": false}, {"identifier": "doCreateTemplate", "parameters": "(Object... params)", "modifiers": "protected", "return": "Templates", "signature": "Templates doCreateTemplate(Object... params)", "full_signature": "protected Templates doCreateTemplate(Object... params)", "class_method_signature": "XsltTransmogrifier.doCreateTemplate(Object... params)", "testcase": false, "constructor": false}], "file": "commons/xml/src/main/java/org/openehealth/ipf/commons/xml/XsltTransmogrifier.java"}, "focal_method": {"identifier": "zap", "parameters": "(Source source, Object... params)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public T zap(Source source, Object... params) {\n        ResultHolder<T> accessor = ResultHolderFactory.create(outputFormat);\n        Result result = accessor.createResult();\n        doZap(source, result, params);\n        return accessor.getResult();\n    }", "signature": "T zap(Source source, Object... params)", "full_signature": "@Override public T zap(Source source, Object... params)", "class_method_signature": "XsltTransmogrifier.zap(Source source, Object... params)", "testcase": false, "constructor": false, "invocations": ["create", "createResult", "doZap", "getResult"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}