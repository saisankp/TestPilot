{"test_class": {"identifier": "ClasspathWorkflowRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TESTWORKFLOWS_PACKAGE = \"org.copperengine.ext.wfrepo.classpath.testworkflows\";", "modifier": "private static final", "type": "String", "declarator": "TESTWORKFLOWS_PACKAGE = \"org.copperengine.ext.wfrepo.classpath.testworkflows\"", "var_name": "TESTWORKFLOWS_PACKAGE"}], "file": "projects/copper-ext/src/test/java/org/copperengine/ext/wfrepo/classpath/ClasspathWorkflowRepositoryTest.java"}, "test_case": {"identifier": "testFindWorkflowClasses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindWorkflowClasses() throws Exception {\n        assumeTrue(System.getProperty(\"jdk.module.path\", \"\").isBlank());\n        Set<Class<?>> set = ClasspathWorkflowRepository.findWorkflowClasses(Collections.singletonList(TESTWORKFLOWS_PACKAGE), Thread.currentThread().getContextClassLoader());\n        Assert.assertEquals(5, set.size());\n        Assert.assertNotNull(set.contains(Class.forName(\"org.copperengine.ext.wfrepo.classpath.testworkflows.TestWorkflowThree\")));\n    }", "signature": "void testFindWorkflowClasses()", "full_signature": "@Test public void testFindWorkflowClasses()", "class_method_signature": "ClasspathWorkflowRepositoryTest.testFindWorkflowClasses()", "testcase": true, "constructor": false, "invocations": ["assumeTrue", "isBlank", "getProperty", "findWorkflowClasses", "singletonList", "getContextClassLoader", "currentThread", "assertEquals", "size", "assertNotNull", "contains", "forName"]}, "focal_class": {"identifier": "ClasspathWorkflowRepository", "superclass": "extends AbstractWorkflowRepository", "interfaces": "implements WorkflowRepository, FileBasedWorkflowRepositoryMXBean", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ClasspathWorkflowRepository.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ClasspathWorkflowRepository.class)", "var_name": "logger"}, {"original_string": "private final List<String> wfPackages;", "modifier": "private final", "type": "List<String>", "declarator": "wfPackages", "var_name": "wfPackages"}, {"original_string": "private File adaptedTargetDir;", "modifier": "private", "type": "File", "declarator": "adaptedTargetDir", "var_name": "adaptedTargetDir"}, {"original_string": "private VolatileState volatileState;", "modifier": "private", "type": "VolatileState", "declarator": "volatileState", "var_name": "volatileState"}], "methods": [{"identifier": "ClasspathWorkflowRepository", "parameters": "(final String wfPackage)", "modifiers": "public", "return": "", "signature": " ClasspathWorkflowRepository(final String wfPackage)", "full_signature": "public  ClasspathWorkflowRepository(final String wfPackage)", "class_method_signature": "ClasspathWorkflowRepository.ClasspathWorkflowRepository(final String wfPackage)", "testcase": false, "constructor": true}, {"identifier": "ClasspathWorkflowRepository", "parameters": "(final List<String> wfPackages)", "modifiers": "public", "return": "", "signature": " ClasspathWorkflowRepository(final List<String> wfPackages)", "full_signature": "public  ClasspathWorkflowRepository(final List<String> wfPackages)", "class_method_signature": "ClasspathWorkflowRepository.ClasspathWorkflowRepository(final List<String> wfPackages)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void start()", "full_signature": "@Override public synchronized void start()", "class_method_signature": "ClasspathWorkflowRepository.start()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public synchronized void shutdown()", "class_method_signature": "ClasspathWorkflowRepository.shutdown()", "testcase": false, "constructor": false}, {"identifier": "findWorkflowClasses", "parameters": "(final List<String> wfPackages, final ClassLoader cl)", "modifiers": "static", "return": "Set<Class<?>>", "signature": "Set<Class<?>> findWorkflowClasses(final List<String> wfPackages, final ClassLoader cl)", "full_signature": "static Set<Class<?>> findWorkflowClasses(final List<String> wfPackages, final ClassLoader cl)", "class_method_signature": "ClasspathWorkflowRepository.findWorkflowClasses(final List<String> wfPackages, final ClassLoader cl)", "testcase": false, "constructor": false}, {"identifier": "loadAnonymousInnerClasses", "parameters": "(final ClassLoader cl, final Set<Class<?>> set, final Class<?> c)", "modifiers": "private static", "return": "void", "signature": "void loadAnonymousInnerClasses(final ClassLoader cl, final Set<Class<?>> set, final Class<?> c)", "full_signature": "private static void loadAnonymousInnerClasses(final ClassLoader cl, final Set<Class<?>> set, final Class<?> c)", "class_method_signature": "ClasspathWorkflowRepository.loadAnonymousInnerClasses(final ClassLoader cl, final Set<Class<?>> set, final Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "findInterruptableMethods", "parameters": "(final Set<Class<?>> wfSet, ClassLoader cl)", "modifiers": "private", "return": "Map<String, Clazz>", "signature": "Map<String, Clazz> findInterruptableMethods(final Set<Class<?>> wfSet, ClassLoader cl)", "full_signature": "private Map<String, Clazz> findInterruptableMethods(final Set<Class<?>> wfSet, ClassLoader cl)", "class_method_signature": "ClasspathWorkflowRepository.findInterruptableMethods(final Set<Class<?>> wfSet, ClassLoader cl)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "ClasspathWorkflowRepository.getDescription()", "testcase": false, "constructor": false}, {"identifier": "getSourceDirs", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getSourceDirs()", "full_signature": "@Override public List<String> getSourceDirs()", "class_method_signature": "ClasspathWorkflowRepository.getSourceDirs()", "testcase": false, "constructor": false}, {"identifier": "getSourceArchiveUrls", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getSourceArchiveUrls()", "full_signature": "@Override public List<String> getSourceArchiveUrls()", "class_method_signature": "ClasspathWorkflowRepository.getSourceArchiveUrls()", "testcase": false, "constructor": false}, {"identifier": "getLastBuildResults", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLastBuildResults()", "full_signature": "@Override public String getLastBuildResults()", "class_method_signature": "ClasspathWorkflowRepository.getLastBuildResults()", "testcase": false, "constructor": false}, {"identifier": "getVolatileState", "parameters": "()", "modifiers": "@Override protected", "return": "VolatileState", "signature": "VolatileState getVolatileState()", "full_signature": "@Override protected VolatileState getVolatileState()", "class_method_signature": "ClasspathWorkflowRepository.getVolatileState()", "testcase": false, "constructor": false}], "file": "projects/copper-ext/src/main/java/org/copperengine/ext/wfrepo/classpath/ClasspathWorkflowRepository.java"}, "focal_method": {"identifier": "findWorkflowClasses", "parameters": "(final List<String> wfPackages, final ClassLoader cl)", "modifiers": "static", "return": "Set<Class<?>>", "body": "static Set<Class<?>> findWorkflowClasses(final List<String> wfPackages, final ClassLoader cl) throws Exception {\n        final ClassPath cp = ClassPath.from(cl);\n        final Set<Class<?>> set = new HashSet<Class<?>>();\n        for (String wfPackage : wfPackages) {\n            final ImmutableSet<com.google.common.reflect.ClassPath.ClassInfo> x = cp.getTopLevelClassesRecursive(wfPackage);\n            for (com.google.common.reflect.ClassPath.ClassInfo ci : x) {\n                final Class<?> c = cl.loadClass(ci.getName());\n                set.add(c);\n                set.addAll(Arrays.asList(c.getDeclaredClasses()));\n                loadAnonymousInnerClasses(cl, set, c);\n            }\n        }\n        return set;\n    }", "signature": "Set<Class<?>> findWorkflowClasses(final List<String> wfPackages, final ClassLoader cl)", "full_signature": "static Set<Class<?>> findWorkflowClasses(final List<String> wfPackages, final ClassLoader cl)", "class_method_signature": "ClasspathWorkflowRepository.findWorkflowClasses(final List<String> wfPackages, final ClassLoader cl)", "testcase": false, "constructor": false, "invocations": ["from", "getTopLevelClassesRecursive", "loadClass", "getName", "add", "addAll", "asList", "getDeclaredClasses", "loadAnonymousInnerClasses"]}, "repository": {"repo_id": 15008570, "url": "https://github.com/copper-engine/copper-engine", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 169, "size": 122984, "license": "licensed"}}