{"test_class": {"identifier": "SchemaTest", "superclass": "", "interfaces": "", "fields": [], "file": "java/schema/src/test/java/com/expedia/tesla/schema/SchemaTest.java"}, "test_case": {"identifier": "schemaEnumTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void schemaEnumTest() throws Exception {\n\t\tSchema schema = parseSchema(\"src/test/resources/enum.tml\");\n\t\tassertNotNull(schema);\n\n\t\tCollection<UserType> types = schema.getUserTypes();\n\n\t\tassertTrue(types.iterator().next().isEnum());\n\t\tEnum enumType = (Enum) types.iterator().next();\n\n\t\tassertNotNull(enumType);\n\n\t\tCollection<EnumEntry> enumEntries = enumType.getEntries();\n\t\tassertEquals(3, enumEntries.size());\n\n\t\t// enum value start from -1\n\t\tint i = 0;\n\t\tfor (EnumEntry enumEntry : enumEntries) {\n\t\t\tassertEquals(i-1, enumEntry.getValue());\n\t\t\ti++;\n\t\t}\n\t}", "signature": "void schemaEnumTest()", "full_signature": "@Test public void schemaEnumTest()", "class_method_signature": "SchemaTest.schemaEnumTest()", "testcase": true, "constructor": false, "invocations": ["parseSchema", "assertNotNull", "getUserTypes", "assertTrue", "isEnum", "next", "iterator", "next", "iterator", "assertNotNull", "getEntries", "assertEquals", "size", "assertEquals", "getValue"]}, "focal_class": {"identifier": "Schema", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String TYPE_ID_TOKENIZER_PATTERN = \n\t\t\t\"((?<=<)|(?=<))|((?<=>)|(?=>))|((?<=\\\\[)|(?=\\\\[))|((?<=\\\\])|(?=\\\\]))|((?<=,)|(?=,))\";", "modifier": "public static final", "type": "String", "declarator": "TYPE_ID_TOKENIZER_PATTERN = \n\t\t\t\"((?<=<)|(?=<))|((?<=>)|(?=>))|((?<=\\\\[)|(?=\\\\[))|((?<=\\\\])|(?=\\\\]))|((?<=,)|(?=,))\"", "var_name": "TYPE_ID_TOKENIZER_PATTERN"}, {"original_string": "private static final Pattern COMPILED_TYPE_ID_PATTERN = Pattern.compile(TYPE_ID_TOKENIZER_PATTERN);", "modifier": "private static final", "type": "Pattern", "declarator": "COMPILED_TYPE_ID_PATTERN = Pattern.compile(TYPE_ID_TOKENIZER_PATTERN)", "var_name": "COMPILED_TYPE_ID_PATTERN"}, {"original_string": "protected SchemaVersion version;", "modifier": "protected", "type": "SchemaVersion", "declarator": "version", "var_name": "version"}, {"original_string": "protected java.util.Map<String, Type> typeMap = new java.util.HashMap<String, Type>();", "modifier": "protected", "type": "java.util.Map<String, Type>", "declarator": "typeMap = new java.util.HashMap<String, Type>()", "var_name": "typeMap"}], "methods": [{"identifier": "build", "parameters": "(String path)", "modifiers": "public static", "return": "Schema", "signature": "Schema build(String path)", "full_signature": "public static Schema build(String path)", "class_method_signature": "Schema.build(String path)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(OutputStream os)", "modifiers": "public", "return": "void", "signature": "void save(OutputStream os)", "full_signature": "public void save(OutputStream os)", "class_method_signature": "Schema.save(OutputStream os)", "testcase": false, "constructor": false}, {"identifier": "getTypes", "parameters": "()", "modifiers": "public", "return": "Collection<Type>", "signature": "Collection<Type> getTypes()", "full_signature": "public Collection<Type> getTypes()", "class_method_signature": "Schema.getTypes()", "testcase": false, "constructor": false}, {"identifier": "getUserTypes", "parameters": "()", "modifiers": "public", "return": "Collection<UserType>", "signature": "Collection<UserType> getUserTypes()", "full_signature": "public Collection<UserType> getUserTypes()", "class_method_signature": "Schema.getUserTypes()", "testcase": false, "constructor": false}, {"identifier": "findType", "parameters": "(String idOrName)", "modifiers": "public", "return": "Type", "signature": "Type findType(String idOrName)", "full_signature": "public Type findType(String idOrName)", "class_method_signature": "Schema.findType(String idOrName)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "SchemaVersion", "signature": "SchemaVersion getVersion()", "full_signature": "public SchemaVersion getVersion()", "class_method_signature": "Schema.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getDerivedTypes", "parameters": "(String baseTypeId,\n\t\t\tboolean directOnly)", "modifiers": "public", "return": "Collection<Type>", "signature": "Collection<Type> getDerivedTypes(String baseTypeId,\n\t\t\tboolean directOnly)", "full_signature": "public Collection<Type> getDerivedTypes(String baseTypeId,\n\t\t\tboolean directOnly)", "class_method_signature": "Schema.getDerivedTypes(String baseTypeId,\n\t\t\tboolean directOnly)", "testcase": false, "constructor": false}, {"identifier": "getDerivedTypes", "parameters": "(Type baseType,\n\t\t\tboolean directOnly)", "modifiers": "public", "return": "Collection<Type>", "signature": "Collection<Type> getDerivedTypes(Type baseType,\n\t\t\tboolean directOnly)", "full_signature": "public Collection<Type> getDerivedTypes(Type baseType,\n\t\t\tboolean directOnly)", "class_method_signature": "Schema.getDerivedTypes(Type baseType,\n\t\t\tboolean directOnly)", "testcase": false, "constructor": false}, {"identifier": "getDerivedTypes", "parameters": "(Type type, boolean directOnly,\n\t\t\tjava.util.Map<Type, Set<Type>> derivedTypeMap)", "modifiers": "private", "return": "Set<Type>", "signature": "Set<Type> getDerivedTypes(Type type, boolean directOnly,\n\t\t\tjava.util.Map<Type, Set<Type>> derivedTypeMap)", "full_signature": "private Set<Type> getDerivedTypes(Type type, boolean directOnly,\n\t\t\tjava.util.Map<Type, Set<Type>> derivedTypeMap)", "class_method_signature": "Schema.getDerivedTypes(Type type, boolean directOnly,\n\t\t\tjava.util.Map<Type, Set<Type>> derivedTypeMap)", "testcase": false, "constructor": false}, {"identifier": "createDerivedMap", "parameters": "()", "modifiers": "private", "return": "java.util.Map<Type, Set<Type>>", "signature": "java.util.Map<Type, Set<Type>> createDerivedMap()", "full_signature": "private java.util.Map<Type, Set<Type>> createDerivedMap()", "class_method_signature": "Schema.createDerivedMap()", "testcase": false, "constructor": false}], "file": "java/schema/src/main/java/com/expedia/tesla/schema/Schema.java"}, "focal_method": {"identifier": "getUserTypes", "parameters": "()", "modifiers": "public", "return": "Collection<UserType>", "body": "public Collection<UserType> getUserTypes() {\n\t\tCollection<UserType> uts = new ArrayList<UserType>();\n\t\tfor (Type t : typeMap.values()) {\n\t\t\tif (t.isUserType()) {\n\t\t\t\tuts.add((UserType) t);\n\t\t\t}\n\t\t}\n\t\treturn uts;\n\t}", "signature": "Collection<UserType> getUserTypes()", "full_signature": "public Collection<UserType> getUserTypes()", "class_method_signature": "Schema.getUserTypes()", "testcase": false, "constructor": false, "invocations": ["values", "isUserType", "add"]}, "repository": {"repo_id": 29929519, "url": "https://github.com/ExpediaDotCom/tesla", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 15, "size": 819, "license": "licensed"}}