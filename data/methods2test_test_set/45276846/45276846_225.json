{"test_class": {"identifier": "TracerFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public InjectCleanFactory injectCleanFactory = new InjectCleanFactory();", "modifier": "@Rule\n    public", "type": "InjectCleanFactory", "declarator": "injectCleanFactory = new InjectCleanFactory()", "var_name": "injectCleanFactory"}], "file": "xenon-common/src/test/java/com/vmware/xenon/common/opentracing/TracerFactoryTest.java"}, "test_case": {"identifier": "invalidTracer", "parameters": "()", "modifiers": "@Test(expected = RuntimeException.class) public", "return": "void", "body": "@Test(expected = RuntimeException.class)\n    public void invalidTracer() throws Exception {\n        TestXenonConfiguration.override(TracerFactory.class, \"provider\", \"random junk\");\n        ServiceHost h = VerificationHost.create(0);\n        TracerFactory.factory.create(h);\n    }", "signature": "void invalidTracer()", "full_signature": "@Test(expected = RuntimeException.class) public void invalidTracer()", "class_method_signature": "TracerFactoryTest.invalidTracer()", "testcase": true, "constructor": false, "invocations": ["override", "create", "create"]}, "focal_class": {"identifier": "TracerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String IMPL_JAEGER = \"jaeger\";", "modifier": "public static final", "type": "String", "declarator": "IMPL_JAEGER = \"jaeger\"", "var_name": "IMPL_JAEGER"}, {"original_string": "public static final String IMPL_ZIPKIN = \"zipkin\";", "modifier": "public static final", "type": "String", "declarator": "IMPL_ZIPKIN = \"zipkin\"", "var_name": "IMPL_ZIPKIN"}, {"original_string": "@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(\"MS_SHOULD_BE_FINAL\")\n    public static TracerFactory factory = new TracerFactory();", "modifier": "@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(\"MS_SHOULD_BE_FINAL\")\n    public static", "type": "TracerFactory", "declarator": "factory = new TracerFactory()", "var_name": "factory"}, {"original_string": "private boolean enabled;", "modifier": "private", "type": "boolean", "declarator": "enabled", "var_name": "enabled"}, {"original_string": "private boolean enableChecked;", "modifier": "private", "type": "boolean", "declarator": "enableChecked", "var_name": "enableChecked"}], "methods": [{"identifier": "create", "parameters": "(ServiceHost host)", "modifiers": "@SuppressWarnings(\"unchecked\") public synchronized", "return": "Tracer", "signature": "Tracer create(ServiceHost host)", "full_signature": "@SuppressWarnings(\"unchecked\") public synchronized Tracer create(ServiceHost host)", "class_method_signature": "TracerFactory.create(ServiceHost host)", "testcase": false, "constructor": false}, {"identifier": "enabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean enabled()", "full_signature": "public boolean enabled()", "class_method_signature": "TracerFactory.enabled()", "testcase": false, "constructor": false}], "file": "xenon-common/src/main/java/com/vmware/xenon/common/opentracing/TracerFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(ServiceHost host)", "modifiers": "@SuppressWarnings(\"unchecked\") public synchronized", "return": "Tracer", "body": "@SuppressWarnings(\"unchecked\")\n    public synchronized Tracer create(ServiceHost host) {\n        Logger logger = Logger.getLogger(getClass().getName());\n        String impl = XenonConfiguration.string(TracerFactory.class, \"provider\", null);\n\n        if (impl == null) {\n            return NoopTracerFactory.create();\n        }\n        impl = impl.toLowerCase();\n\n        Class<TracerFactoryInterface> factoryClass;\n        try {\n            if (impl.equals(IMPL_JAEGER)) {\n                factoryClass = (Class<TracerFactoryInterface>) Class\n                        .forName(\"com.vmware.xenon.common.opentracing.Jaeger\");\n            } else if (impl.equals(IMPL_ZIPKIN)) {\n                factoryClass = (Class<TracerFactoryInterface>) Class\n                        .forName(\"com.vmware.xenon.common.opentracing.Zipkin\");\n            } else {\n                throw new RuntimeException(String.format(\"Bad tracer type %s\", impl));\n            }\n        } catch (ClassNotFoundException e) {\n            logger.log(Level.SEVERE, \"Failed to load impl class\", e);\n            throw new RuntimeException(String.format(\"Could not load impl for %s\", impl), e);\n        }\n\n        TracerFactoryInterface factory;\n        try {\n            factory = factoryClass.newInstance();\n        } catch (ReflectiveOperationException e) {\n            logger.log(Level.SEVERE, \"Failed to instantiate tracer factory\", e);\n            throw new RuntimeException(String.format(\"Could not instantiate factory for %s\", impl), e);\n        }\n\n        return factory.create(host);\n    }", "signature": "Tracer create(ServiceHost host)", "full_signature": "@SuppressWarnings(\"unchecked\") public synchronized Tracer create(ServiceHost host)", "class_method_signature": "TracerFactory.create(ServiceHost host)", "testcase": false, "constructor": false, "invocations": ["getLogger", "getName", "getClass", "string", "create", "toLowerCase", "equals", "forName", "equals", "forName", "format", "log", "format", "newInstance", "log", "format", "create"]}, "repository": {"repo_id": 45276846, "url": "https://github.com/vmware-archive/xenon", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 226, "size": 52010, "license": "licensed"}}