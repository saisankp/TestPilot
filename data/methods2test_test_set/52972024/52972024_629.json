{"test_class": {"identifier": "ResponseSenderActorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "IResponse response;", "modifier": "", "type": "IResponse", "declarator": "response", "var_name": "response"}, {"original_string": "IResponseContentStrategy responseContentStrategy;", "modifier": "", "type": "IResponseContentStrategy", "declarator": "responseContentStrategy", "var_name": "responseContentStrategy"}, {"original_string": "IResponseSender responseSender;", "modifier": "", "type": "IResponseSender", "declarator": "responseSender", "var_name": "responseSender"}], "file": "CoreFeatures/Endpoint/ResponseSenderActor/src/test/java/info/smart_tools/smartactors/endpoint/actor/response_sender_actor/ResponseSenderActorTest.java"}, "test_case": {"identifier": "testResponseSenderActorShouldHandleSend", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResponseSenderActorShouldHandleSend()\n            throws InvalidArgumentException, SerializeException, ReadValueException, ResolutionException,\n            InvalidArgumentException, ResponseSenderActorException, ChangeValueException, ResponseSendingException {\n        IObject environment =\n                new DSObject(\"{\\\"config\\\": null, \\\"message\\\": null, \\\"response\\\": {\\\"hello\\\":\\\"world\\\"}}\");\n        IObject context = new DSObject();\n        context.setValue(new FieldName(\"channel\"), null);\n        environment.setValue(new FieldName(\"context\"), context);\n        Wrapper wrapper = new Wrapper();\n        wrapper.init(environment);\n        ResponseSenderActor senderActor = new ResponseSenderActor();\n        senderActor.sendResponse(wrapper);\n        verify(responseSender, times(1)).send(any(IResponse.class), any(IObject.class), any(IChannelHandler.class));\n    }", "signature": "void testResponseSenderActorShouldHandleSend()", "full_signature": "@Test public void testResponseSenderActorShouldHandleSend()", "class_method_signature": "ResponseSenderActorTest.testResponseSenderActorShouldHandleSend()", "testcase": true, "constructor": false, "invocations": ["setValue", "setValue", "init", "sendResponse", "send", "verify", "times", "any", "any", "any"]}, "focal_class": {"identifier": "ResponseSenderActor", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ResponseSenderActor", "parameters": "()", "modifiers": "public", "return": "", "signature": " ResponseSenderActor()", "full_signature": "public  ResponseSenderActor()", "class_method_signature": "ResponseSenderActor.ResponseSenderActor()", "testcase": false, "constructor": true}, {"identifier": "sendResponse", "parameters": "(final ResponseSenderMessage message)", "modifiers": "public", "return": "void", "signature": "void sendResponse(final ResponseSenderMessage message)", "full_signature": "public void sendResponse(final ResponseSenderMessage message)", "class_method_signature": "ResponseSenderActor.sendResponse(final ResponseSenderMessage message)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Endpoint/ResponseSenderActor/src/main/java/info/smart_tools/smartactors/endpoint/actor/response_sender_actor/ResponseSenderActor.java"}, "focal_method": {"identifier": "sendResponse", "parameters": "(final ResponseSenderMessage message)", "modifiers": "public", "return": "void", "body": "public void sendResponse(final ResponseSenderMessage message)\n            throws ResponseSenderActorException {\n\n        IObjectWrapper messageWrapper = (IObjectWrapper) message;\n\n        //Get response IObject\n        IFieldName responseFieldName = null;\n        try {\n            responseFieldName = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"response\");\n            IObject responseIObject = messageWrapper.getEnvironmentIObject(responseFieldName);\n\n            //Create and fill full environment\n            IObject environment = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"));\n            IFieldName contextFieldName = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"context\");\n            IFieldName httpResponseIsSentFieldName = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"sendResponseOnChainEnd\");\n            IFieldName configFieldName = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"config\");\n            IFieldName messageFieldName = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"message\");\n            IFieldName endpointName = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"endpointName\");\n            environment.setValue(responseFieldName, responseIObject);\n            environment.setValue(configFieldName, messageWrapper.getEnvironmentIObject(configFieldName));\n            environment.setValue(contextFieldName, messageWrapper.getEnvironmentIObject(contextFieldName));\n            environment.setValue(messageFieldName, messageWrapper.getEnvironmentIObject(messageFieldName));\n\n            IFieldName channelFieldName = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"channel\");\n            IChannelHandler channelHandler = (IChannelHandler)\n                    messageWrapper.getEnvironmentIObject(contextFieldName).getValue(channelFieldName);\n\n            IResponse response = IOC.resolve(Keys.getOrAdd(IResponse.class.getCanonicalName()));\n            IResponseContentStrategy contentStrategy =\n                    IOC.resolve(Keys.getOrAdd(IResponseContentStrategy.class.getCanonicalName()), environment);\n            contentStrategy.setContent(responseIObject, response);\n\n            IResponseSender sender = IOC.resolve(Keys.getOrAdd(IResponseSender.class.getCanonicalName()),\n                    IOC.resolve(Keys.getOrAdd(\"http_request_key_for_response_sender\"), environment),\n                    messageWrapper.getEnvironmentIObject(contextFieldName).getValue(endpointName));\n            sender.send(response, environment, channelHandler);\n            messageWrapper.getEnvironmentIObject(contextFieldName).setValue(httpResponseIsSentFieldName, true);\n        } catch (Exception e) {\n            throw new ResponseSenderActorException(e);\n        }\n    }", "signature": "void sendResponse(final ResponseSenderMessage message)", "full_signature": "public void sendResponse(final ResponseSenderMessage message)", "class_method_signature": "ResponseSenderActor.sendResponse(final ResponseSenderMessage message)", "testcase": false, "constructor": false, "invocations": ["resolve", "getOrAdd", "getEnvironmentIObject", "resolve", "getOrAdd", "resolve", "getOrAdd", "resolve", "getOrAdd", "resolve", "getOrAdd", "resolve", "getOrAdd", "resolve", "getOrAdd", "setValue", "setValue", "getEnvironmentIObject", "setValue", "getEnvironmentIObject", "setValue", "getEnvironmentIObject", "resolve", "getOrAdd", "getValue", "getEnvironmentIObject", "resolve", "getOrAdd", "getCanonicalName", "resolve", "getOrAdd", "getCanonicalName", "setContent", "resolve", "getOrAdd", "getCanonicalName", "resolve", "getOrAdd", "getValue", "getEnvironmentIObject", "send", "setValue", "getEnvironmentIObject"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}