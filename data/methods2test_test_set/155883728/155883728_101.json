{"test_class": {"identifier": "JcrFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final File testBaseDir = new File(\"target/repos/JcrFactoryTest\");", "modifier": "final", "type": "File", "declarator": "testBaseDir = new File(\"target/repos/JcrFactoryTest\")", "var_name": "testBaseDir"}], "file": "webster/src/test/java/net/adamcin/oakpal/webster/JcrFactoryTest.java"}, "test_case": {"identifier": "testGetJcr", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetJcr() throws Exception {\n        final File seedDir = new File(testBaseDir, \"testGetJcr/seedRepo/segmentstore\");\n        final File globalDir = new File(testBaseDir, \"testGetJcr/globalRepo/segmentstore\");\n\n        final String superPath = \"/apps/myapp/components/sup1\";\n        final String resultPath = \"/apps/myapp/components/res1\";\n\n        TestUtil.prepareRepo(seedDir, session -> {\n            final URL slingNodetypes = getClass().getResource(\"/sling_nodetypes.cnd\");\n            TestUtil.installCndFromURL(session, slingNodetypes);\n\n            Node sup1 = JcrUtils.getOrCreateByPath(superPath, \"sling:Folder\", session);\n            Node res1 = JcrUtils.getOrCreateByPath(resultPath, \"sling:Folder\", session);\n            res1.addMixin(\"sling:ResourceSuperType\");\n            res1.setProperty(\"sling:resourceSuperType\", superPath);\n            session.save();\n        });\n\n        TestUtil.withReadOnlyFixture(seedDir, session -> {\n            QueryManager qm = session.getWorkspace().getQueryManager();\n\n            final String stmt = \"select * from [sling:ResourceSuperType] as a OPTION(TRAVERSAL FAIL, INDEX NAME nodetype)\";\n            final Query query = qm.createQuery(stmt, Query.JCR_SQL2);\n            QueryResult result = query.execute();\n            final NodeIterator it = result.getNodes();\n            assertTrue(\"Result hasNext()\", it.hasNext());\n            final Node next = it.nextNode();\n            assertFalse(\"Result has no more\", it.hasNext());\n            assertEquals(\"Path is correct\", resultPath, next.getPath());\n            assertEquals(\"sling:resourceSuperType value is correct\", superPath,\n                    next.getProperty(\"sling:resourceSuperType\").getString());\n        });\n    }", "signature": "void testGetJcr()", "full_signature": "@Test public void testGetJcr()", "class_method_signature": "JcrFactoryTest.testGetJcr()", "testcase": true, "constructor": false, "invocations": ["prepareRepo", "getResource", "getClass", "installCndFromURL", "getOrCreateByPath", "getOrCreateByPath", "addMixin", "setProperty", "save", "withReadOnlyFixture", "getQueryManager", "getWorkspace", "createQuery", "execute", "getNodes", "assertTrue", "hasNext", "nextNode", "assertFalse", "hasNext", "assertEquals", "getPath", "assertEquals", "getString", "getProperty"]}, "focal_class": {"identifier": "JcrFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "JcrFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " JcrFactory()", "full_signature": "private  JcrFactory()", "class_method_signature": "JcrFactory.JcrFactory()", "testcase": false, "constructor": true}, {"identifier": "getJcr", "parameters": "(final NodeStoreFixture nodeStoreFixture)", "modifiers": "public static", "return": "Repository", "signature": "Repository getJcr(final NodeStoreFixture nodeStoreFixture)", "full_signature": "public static Repository getJcr(final NodeStoreFixture nodeStoreFixture)", "class_method_signature": "JcrFactory.getJcr(final NodeStoreFixture nodeStoreFixture)", "testcase": false, "constructor": false}, {"identifier": "getJcr", "parameters": "(final NodeStoreFixture nodeStoreFixture,\n                                    final NodeStore globalStore)", "modifiers": "public static", "return": "Repository", "signature": "Repository getJcr(final NodeStoreFixture nodeStoreFixture,\n                                    final NodeStore globalStore)", "full_signature": "public static Repository getJcr(final NodeStoreFixture nodeStoreFixture,\n                                    final NodeStore globalStore)", "class_method_signature": "JcrFactory.getJcr(final NodeStoreFixture nodeStoreFixture,\n                                    final NodeStore globalStore)", "testcase": false, "constructor": false}, {"identifier": "getNodeStoreFixture", "parameters": "(final boolean readOnly, final String... args)", "modifiers": "public static", "return": "NodeStoreFixture", "signature": "NodeStoreFixture getNodeStoreFixture(final boolean readOnly, final String... args)", "full_signature": "public static NodeStoreFixture getNodeStoreFixture(final boolean readOnly, final String... args)", "class_method_signature": "JcrFactory.getNodeStoreFixture(final boolean readOnly, final String... args)", "testcase": false, "constructor": false}, {"identifier": "getNodeStoreFixture", "parameters": "(final boolean readOnly, final File segmentStore, final String... args)", "modifiers": "public static", "return": "NodeStoreFixture", "signature": "NodeStoreFixture getNodeStoreFixture(final boolean readOnly, final File segmentStore, final String... args)", "full_signature": "public static NodeStoreFixture getNodeStoreFixture(final boolean readOnly, final File segmentStore, final String... args)", "class_method_signature": "JcrFactory.getNodeStoreFixture(final boolean readOnly, final File segmentStore, final String... args)", "testcase": false, "constructor": false}, {"identifier": "getReadOnlyFixture", "parameters": "(final File segmentStore, final String... args)", "modifiers": "public static", "return": "NodeStoreFixture", "signature": "NodeStoreFixture getReadOnlyFixture(final File segmentStore, final String... args)", "full_signature": "public static NodeStoreFixture getReadOnlyFixture(final File segmentStore, final String... args)", "class_method_signature": "JcrFactory.getReadOnlyFixture(final File segmentStore, final String... args)", "testcase": false, "constructor": false}, {"identifier": "getReadWriteFixture", "parameters": "(final File segmentStore, final String... args)", "modifiers": "public static", "return": "NodeStoreFixture", "signature": "NodeStoreFixture getReadWriteFixture(final File segmentStore, final String... args)", "full_signature": "public static NodeStoreFixture getReadWriteFixture(final File segmentStore, final String... args)", "class_method_signature": "JcrFactory.getReadWriteFixture(final File segmentStore, final String... args)", "testcase": false, "constructor": false}], "file": "webster/src/main/java/net/adamcin/oakpal/webster/JcrFactory.java"}, "focal_method": {"identifier": "getJcr", "parameters": "(final NodeStoreFixture nodeStoreFixture)", "modifiers": "public static", "return": "Repository", "body": "public static Repository getJcr(final NodeStoreFixture nodeStoreFixture)\n            throws IOException, CommitFailedException {\n        return getJcr(nodeStoreFixture, new MemoryNodeStore());\n    }", "signature": "Repository getJcr(final NodeStoreFixture nodeStoreFixture)", "full_signature": "public static Repository getJcr(final NodeStoreFixture nodeStoreFixture)", "class_method_signature": "JcrFactory.getJcr(final NodeStoreFixture nodeStoreFixture)", "testcase": false, "constructor": false, "invocations": ["getJcr"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}