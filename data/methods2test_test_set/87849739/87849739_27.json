{"test_class": {"identifier": "JavaValueFieldDefinitionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final JsonPointer KNOWN_JSON_POINTER = JsonFactory.newPointer(\"root/sub/subsub\");", "modifier": "private static final", "type": "JsonPointer", "declarator": "KNOWN_JSON_POINTER = JsonFactory.newPointer(\"root/sub/subsub\")", "var_name": "KNOWN_JSON_POINTER"}, {"original_string": "@Mock\n    private JsonFieldMarker schemaVersionMarkerMock;", "modifier": "@Mock\n    private", "type": "JsonFieldMarker", "declarator": "schemaVersionMarkerMock", "var_name": "schemaVersionMarkerMock"}, {"original_string": "@Mock\n    private JsonFieldMarker regularTypeMarkerMock;", "modifier": "@Mock\n    private", "type": "JsonFieldMarker", "declarator": "regularTypeMarkerMock", "var_name": "regularTypeMarkerMock"}, {"original_string": "@Mock\n    private JsonFieldMarker specialTypeMarkerMock;", "modifier": "@Mock\n    private", "type": "JsonFieldMarker", "declarator": "specialTypeMarkerMock", "var_name": "specialTypeMarkerMock"}, {"original_string": "private JsonFieldMarker[] knownFieldMarkers = null;", "modifier": "private", "type": "JsonFieldMarker[]", "declarator": "knownFieldMarkers = null", "var_name": "knownFieldMarkers"}], "file": "json/src/test/java/org/eclipse/ditto/json/JavaValueFieldDefinitionTest.java"}, "test_case": {"identifier": "isMarkedAsReturnsTrueIfDefinitionContainsAskedMarker", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isMarkedAsReturnsTrueIfDefinitionContainsAskedMarker() {\n        knownFieldMarkers = new JsonFieldMarker[] {schemaVersionMarkerMock, regularTypeMarkerMock};\n\n        final JavaValueFieldDefinition<Integer> underTest =\n                JavaValueFieldDefinition.newInstance(KNOWN_JSON_POINTER, int.class, JsonValue::isNumber,\n                        JsonValue::asInt, knownFieldMarkers);\n\n        assertThat(underTest.isMarkedAs(regularTypeMarkerMock)).isTrue();\n    }", "signature": "void isMarkedAsReturnsTrueIfDefinitionContainsAskedMarker()", "full_signature": "@Test public void isMarkedAsReturnsTrueIfDefinitionContainsAskedMarker()", "class_method_signature": "JavaValueFieldDefinitionTest.isMarkedAsReturnsTrueIfDefinitionContainsAskedMarker()", "testcase": true, "constructor": false, "invocations": ["newInstance", "isTrue", "assertThat", "isMarkedAs"]}, "focal_class": {"identifier": "JavaValueFieldDefinition", "superclass": "extends AbstractJsonFieldDefinition<T>", "interfaces": "", "fields": [], "methods": [{"identifier": "JavaValueFieldDefinition", "parameters": "(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker... markers)", "modifiers": "private", "return": "", "signature": " JavaValueFieldDefinition(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker... markers)", "full_signature": "private  JavaValueFieldDefinition(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker... markers)", "class_method_signature": "JavaValueFieldDefinition.JavaValueFieldDefinition(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker... markers)", "testcase": false, "constructor": true}, {"identifier": "newInstance", "parameters": "(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker... markers)", "modifiers": "public static", "return": "JavaValueFieldDefinition<T>", "signature": "JavaValueFieldDefinition<T> newInstance(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker... markers)", "full_signature": "public static JavaValueFieldDefinition<T> newInstance(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker... markers)", "class_method_signature": "JavaValueFieldDefinition.newInstance(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker... markers)", "testcase": false, "constructor": false}, {"identifier": "getAsJavaType", "parameters": "(final JsonValue jsonValue, final Function<JsonValue, T> mappingFunction)", "modifiers": "@Nullable @Override protected", "return": "T", "signature": "T getAsJavaType(final JsonValue jsonValue, final Function<JsonValue, T> mappingFunction)", "full_signature": "@Nullable @Override protected T getAsJavaType(final JsonValue jsonValue, final Function<JsonValue, T> mappingFunction)", "class_method_signature": "JavaValueFieldDefinition.getAsJavaType(final JsonValue jsonValue, final Function<JsonValue, T> mappingFunction)", "testcase": false, "constructor": false}], "file": "json/src/main/java/org/eclipse/ditto/json/JavaValueFieldDefinition.java"}, "focal_method": {"identifier": "newInstance", "parameters": "(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker... markers)", "modifiers": "public static", "return": "JavaValueFieldDefinition<T>", "body": "public static <T> JavaValueFieldDefinition<T> newInstance(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker... markers) {\n\n        return new JavaValueFieldDefinition<>(pointer, valueType, checkJavaTypeFunction, mappingFunction, markers);\n    }", "signature": "JavaValueFieldDefinition<T> newInstance(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker... markers)", "full_signature": "public static JavaValueFieldDefinition<T> newInstance(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker... markers)", "class_method_signature": "JavaValueFieldDefinition.newInstance(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker... markers)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}