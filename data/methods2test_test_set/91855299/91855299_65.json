{"test_class": {"identifier": "ListUtilsTest", "superclass": "extends UtilityClassTest<ListUtils>", "interfaces": "", "fields": [{"original_string": "private static final String foo = \"foo\";", "modifier": "private static final", "type": "String", "declarator": "foo = \"foo\"", "var_name": "foo"}, {"original_string": "private static final String bar = \"bar\";", "modifier": "private static final", "type": "String", "declarator": "bar = \"bar\"", "var_name": "bar"}, {"original_string": "private static final Supplier<String> barSupplier = () -> bar;", "modifier": "private static final", "type": "Supplier<String>", "declarator": "barSupplier = () -> bar", "var_name": "barSupplier"}, {"original_string": "private static final Supplier<String> nullSupplier = () -> null;", "modifier": "private static final", "type": "Supplier<String>", "declarator": "nullSupplier = () -> null", "var_name": "nullSupplier"}], "file": "api/src/test/java/edu/wpi/first/shuffleboard/api/util/ListUtilsTest.java"}, "test_case": {"identifier": "testToImmutableList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testToImmutableList() {\n    List<String> list = Arrays.asList(\n        foo,\n        bar,\n        \"baz\",\n        bar,\n        foo,\n        \"abcd\"\n    );\n    // Can't get perfect coverage here, since code coverage doesn't cover the lambdas/method references\n    ImmutableList<String> immutableList = list.stream().collect(ListUtils.toImmutableList());\n    assertEquals(list, immutableList);\n  }", "signature": "void testToImmutableList()", "full_signature": "@Test public void testToImmutableList()", "class_method_signature": "ListUtilsTest.testToImmutableList()", "testcase": true, "constructor": false, "invocations": ["asList", "collect", "stream", "toImmutableList", "assertEquals"]}, "focal_class": {"identifier": "ListUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ListUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ListUtils()", "full_signature": "private  ListUtils()", "class_method_signature": "ListUtils.ListUtils()", "testcase": false, "constructor": true}, {"identifier": "firstIndexOf", "parameters": "(List<? extends T> list, Predicate<? super T> predicate)", "modifiers": "public static", "return": "int", "signature": "int firstIndexOf(List<? extends T> list, Predicate<? super T> predicate)", "full_signature": "public static int firstIndexOf(List<? extends T> list, Predicate<? super T> predicate)", "class_method_signature": "ListUtils.firstIndexOf(List<? extends T> list, Predicate<? super T> predicate)", "testcase": false, "constructor": false}, {"identifier": "addIfNotPresent", "parameters": "(List<? super T> list, T element)", "modifiers": "public static", "return": "boolean", "signature": "boolean addIfNotPresent(List<? super T> list, T element)", "full_signature": "public static boolean addIfNotPresent(List<? super T> list, T element)", "class_method_signature": "ListUtils.addIfNotPresent(List<? super T> list, T element)", "testcase": false, "constructor": false}, {"identifier": "addIfNotPresent", "parameters": "(List<? super T> list, int index, T element)", "modifiers": "public static", "return": "boolean", "signature": "boolean addIfNotPresent(List<? super T> list, int index, T element)", "full_signature": "public static boolean addIfNotPresent(List<? super T> list, int index, T element)", "class_method_signature": "ListUtils.addIfNotPresent(List<? super T> list, int index, T element)", "testcase": false, "constructor": false}, {"identifier": "toImmutableList", "parameters": "()", "modifiers": "public static", "return": "Collector<T, ?, ImmutableList<T>>", "signature": "Collector<T, ?, ImmutableList<T>> toImmutableList()", "full_signature": "public static Collector<T, ?, ImmutableList<T>> toImmutableList()", "class_method_signature": "ListUtils.toImmutableList()", "testcase": false, "constructor": false}, {"identifier": "joining", "parameters": "(Supplier<? extends T> separator)", "modifiers": "public static", "return": "Collector<T, ?, List<T>>", "signature": "Collector<T, ?, List<T>> joining(Supplier<? extends T> separator)", "full_signature": "public static Collector<T, ?, List<T>> joining(Supplier<? extends T> separator)", "class_method_signature": "ListUtils.joining(Supplier<? extends T> separator)", "testcase": false, "constructor": false}, {"identifier": "joining", "parameters": "(Supplier<? extends T> prefix,\n                                                     Supplier<? extends T> separator,\n                                                     Supplier<? extends T> suffix)", "modifiers": "public static", "return": "Collector<T, ?, List<T>>", "signature": "Collector<T, ?, List<T>> joining(Supplier<? extends T> prefix,\n                                                     Supplier<? extends T> separator,\n                                                     Supplier<? extends T> suffix)", "full_signature": "public static Collector<T, ?, List<T>> joining(Supplier<? extends T> prefix,\n                                                     Supplier<? extends T> separator,\n                                                     Supplier<? extends T> suffix)", "class_method_signature": "ListUtils.joining(Supplier<? extends T> prefix,\n                                                     Supplier<? extends T> separator,\n                                                     Supplier<? extends T> suffix)", "testcase": false, "constructor": false}, {"identifier": "replaceIn", "parameters": "(List<T> list)", "modifiers": "public static", "return": "Replacement<T>", "signature": "Replacement<T> replaceIn(List<T> list)", "full_signature": "public static Replacement<T> replaceIn(List<T> list)", "class_method_signature": "ListUtils.replaceIn(List<T> list)", "testcase": false, "constructor": false}], "file": "api/src/main/java/edu/wpi/first/shuffleboard/api/util/ListUtils.java"}, "focal_method": {"identifier": "toImmutableList", "parameters": "()", "modifiers": "public static", "return": "Collector<T, ?, ImmutableList<T>>", "body": "public static <T> Collector<T, ?, ImmutableList<T>> toImmutableList() {\n    return Collector.<T, List<T>, ImmutableList<T>>of(\n        ArrayList::new,\n        List::add,\n        (left, right) -> {\n          left.addAll(right);\n          return left;\n        },\n        ImmutableList::copyOf\n    );\n  }", "signature": "Collector<T, ?, ImmutableList<T>> toImmutableList()", "full_signature": "public static Collector<T, ?, ImmutableList<T>> toImmutableList()", "class_method_signature": "ListUtils.toImmutableList()", "testcase": false, "constructor": false, "invocations": ["of", "addAll"]}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}