{"test_class": {"identifier": "TransactionProxyTest", "superclass": "extends AbstractTransactionProxyTest", "interfaces": "", "fields": [], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/TransactionProxyTest.java"}, "test_case": {"identifier": "testWriteCompletionForLocalShard", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWriteCompletionForLocalShard() {\n        completeOperationLocal(transactionProxy -> {\n            NormalizedNode<?, ?> nodeToWrite = ImmutableNodes.containerNode(TestModel.TEST_QNAME);\n\n            transactionProxy.write(TestModel.TEST_PATH, nodeToWrite);\n\n            transactionProxy.write(TestModel.TEST_PATH, nodeToWrite);\n\n        }, createDataTree());\n    }", "signature": "void testWriteCompletionForLocalShard()", "full_signature": "@Test public void testWriteCompletionForLocalShard()", "class_method_signature": "TransactionProxyTest.testWriteCompletionForLocalShard()", "testcase": true, "constructor": false, "invocations": ["completeOperationLocal", "containerNode", "write", "write", "createDataTree"]}, "focal_class": {"identifier": "TransactionProxy", "superclass": "extends AbstractDOMStoreTransaction<TransactionIdentifier>", "interfaces": "implements DOMStoreReadWriteTransaction", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TransactionProxy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TransactionProxy.class)", "var_name": "LOG"}, {"original_string": "private static final DeleteOperation ROOT_DELETE_OPERATION = new DeleteOperation(YangInstanceIdentifier.empty());", "modifier": "private static final", "type": "DeleteOperation", "declarator": "ROOT_DELETE_OPERATION = new DeleteOperation(YangInstanceIdentifier.empty())", "var_name": "ROOT_DELETE_OPERATION"}, {"original_string": "private final Map<String, TransactionContextWrapper> txContextWrappers = new TreeMap<>();", "modifier": "private final", "type": "Map<String, TransactionContextWrapper>", "declarator": "txContextWrappers = new TreeMap<>()", "var_name": "txContextWrappers"}, {"original_string": "private final AbstractTransactionContextFactory<?> txContextFactory;", "modifier": "private final", "type": "AbstractTransactionContextFactory<?>", "declarator": "txContextFactory", "var_name": "txContextFactory"}, {"original_string": "private final TransactionType type;", "modifier": "private final", "type": "TransactionType", "declarator": "type", "var_name": "type"}, {"original_string": "private TransactionState state = TransactionState.OPEN;", "modifier": "private", "type": "TransactionState", "declarator": "state = TransactionState.OPEN", "var_name": "state"}], "methods": [{"identifier": "TransactionProxy", "parameters": "(final AbstractTransactionContextFactory<?> txContextFactory, final TransactionType type)", "modifiers": "@VisibleForTesting public", "return": "", "signature": " TransactionProxy(final AbstractTransactionContextFactory<?> txContextFactory, final TransactionType type)", "full_signature": "@VisibleForTesting public  TransactionProxy(final AbstractTransactionContextFactory<?> txContextFactory, final TransactionType type)", "class_method_signature": "TransactionProxy.TransactionProxy(final AbstractTransactionContextFactory<?> txContextFactory, final TransactionType type)", "testcase": false, "constructor": true}, {"identifier": "exists", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "@Override public", "return": "FluentFuture<Boolean>", "signature": "FluentFuture<Boolean> exists(final YangInstanceIdentifier path)", "full_signature": "@Override public FluentFuture<Boolean> exists(final YangInstanceIdentifier path)", "class_method_signature": "TransactionProxy.exists(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "executeRead", "parameters": "(final String shardName, final AbstractRead<T> readCmd)", "modifiers": "private", "return": "FluentFuture<T>", "signature": "FluentFuture<T> executeRead(final String shardName, final AbstractRead<T> readCmd)", "full_signature": "private FluentFuture<T> executeRead(final String shardName, final AbstractRead<T> readCmd)", "class_method_signature": "TransactionProxy.executeRead(final String shardName, final AbstractRead<T> readCmd)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "@Override public", "return": "FluentFuture<Optional<NormalizedNode<?, ?>>>", "signature": "FluentFuture<Optional<NormalizedNode<?, ?>>> read(final YangInstanceIdentifier path)", "full_signature": "@Override public FluentFuture<Optional<NormalizedNode<?, ?>>> read(final YangInstanceIdentifier path)", "class_method_signature": "TransactionProxy.read(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "singleShardRead", "parameters": "(\n            final String shardName, final YangInstanceIdentifier path)", "modifiers": "private", "return": "FluentFuture<Optional<NormalizedNode<?, ?>>>", "signature": "FluentFuture<Optional<NormalizedNode<?, ?>>> singleShardRead(\n            final String shardName, final YangInstanceIdentifier path)", "full_signature": "private FluentFuture<Optional<NormalizedNode<?, ?>>> singleShardRead(\n            final String shardName, final YangInstanceIdentifier path)", "class_method_signature": "TransactionProxy.singleShardRead(\n            final String shardName, final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "readAllData", "parameters": "()", "modifiers": "private", "return": "FluentFuture<Optional<NormalizedNode<?, ?>>>", "signature": "FluentFuture<Optional<NormalizedNode<?, ?>>> readAllData()", "full_signature": "private FluentFuture<Optional<NormalizedNode<?, ?>>> readAllData()", "class_method_signature": "TransactionProxy.readAllData()", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "@Override public", "return": "void", "signature": "void delete(final YangInstanceIdentifier path)", "full_signature": "@Override public void delete(final YangInstanceIdentifier path)", "class_method_signature": "TransactionProxy.delete(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "deleteAllData", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void deleteAllData()", "full_signature": "private void deleteAllData()", "class_method_signature": "TransactionProxy.deleteAllData()", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "@Override public", "return": "void", "signature": "void merge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "@Override public void merge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "TransactionProxy.merge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": false}, {"identifier": "mergeAllData", "parameters": "(final ContainerNode rootData)", "modifiers": "private", "return": "void", "signature": "void mergeAllData(final ContainerNode rootData)", "full_signature": "private void mergeAllData(final ContainerNode rootData)", "class_method_signature": "TransactionProxy.mergeAllData(final ContainerNode rootData)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "@Override public", "return": "void", "signature": "void write(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "@Override public void write(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "TransactionProxy.write(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": false}, {"identifier": "writeAllData", "parameters": "(final ContainerNode rootData)", "modifiers": "private", "return": "void", "signature": "void writeAllData(final ContainerNode rootData)", "full_signature": "private void writeAllData(final ContainerNode rootData)", "class_method_signature": "TransactionProxy.writeAllData(final ContainerNode rootData)", "testcase": false, "constructor": false}, {"identifier": "executeModification", "parameters": "(final TransactionModificationOperation operation)", "modifiers": "private", "return": "void", "signature": "void executeModification(final TransactionModificationOperation operation)", "full_signature": "private void executeModification(final TransactionModificationOperation operation)", "class_method_signature": "TransactionProxy.executeModification(final TransactionModificationOperation operation)", "testcase": false, "constructor": false}, {"identifier": "checkRootData", "parameters": "(final NormalizedNode<?, ?> data)", "modifiers": "private static", "return": "ContainerNode", "signature": "ContainerNode checkRootData(final NormalizedNode<?, ?> data)", "full_signature": "private static ContainerNode checkRootData(final NormalizedNode<?, ?> data)", "class_method_signature": "TransactionProxy.checkRootData(final NormalizedNode<?, ?> data)", "testcase": false, "constructor": false}, {"identifier": "checkModificationState", "parameters": "(final String opName, final YangInstanceIdentifier path)", "modifiers": "private", "return": "void", "signature": "void checkModificationState(final String opName, final YangInstanceIdentifier path)", "full_signature": "private void checkModificationState(final String opName, final YangInstanceIdentifier path)", "class_method_signature": "TransactionProxy.checkModificationState(final String opName, final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "seal", "parameters": "(final TransactionState newState)", "modifiers": "private", "return": "boolean", "signature": "boolean seal(final TransactionState newState)", "full_signature": "private boolean seal(final TransactionState newState)", "class_method_signature": "TransactionProxy.seal(final TransactionState newState)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void close()", "full_signature": "@Override public final void close()", "class_method_signature": "TransactionProxy.close()", "testcase": false, "constructor": false}, {"identifier": "ready", "parameters": "()", "modifiers": "@Override public final", "return": "AbstractThreePhaseCommitCohort<?>", "signature": "AbstractThreePhaseCommitCohort<?> ready()", "full_signature": "@Override public final AbstractThreePhaseCommitCohort<?> ready()", "class_method_signature": "TransactionProxy.ready()", "testcase": false, "constructor": false}, {"identifier": "createSingleCommitCohort", "parameters": "(final String shardName,\n            final TransactionContextWrapper contextWrapper)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private", "return": "AbstractThreePhaseCommitCohort<?>", "signature": "AbstractThreePhaseCommitCohort<?> createSingleCommitCohort(final String shardName,\n            final TransactionContextWrapper contextWrapper)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private AbstractThreePhaseCommitCohort<?> createSingleCommitCohort(final String shardName,\n            final TransactionContextWrapper contextWrapper)", "class_method_signature": "TransactionProxy.createSingleCommitCohort(final String shardName,\n            final TransactionContextWrapper contextWrapper)", "testcase": false, "constructor": false}, {"identifier": "getDirectCommitFuture", "parameters": "(final TransactionContext transactionContext,\n            final OperationCallback.Reference operationCallbackRef, final Boolean havePermit)", "modifiers": "private", "return": "Future<?>", "signature": "Future<?> getDirectCommitFuture(final TransactionContext transactionContext,\n            final OperationCallback.Reference operationCallbackRef, final Boolean havePermit)", "full_signature": "private Future<?> getDirectCommitFuture(final TransactionContext transactionContext,\n            final OperationCallback.Reference operationCallbackRef, final Boolean havePermit)", "class_method_signature": "TransactionProxy.getDirectCommitFuture(final TransactionContext transactionContext,\n            final OperationCallback.Reference operationCallbackRef, final Boolean havePermit)", "testcase": false, "constructor": false}, {"identifier": "createMultiCommitCohort", "parameters": "()", "modifiers": "private", "return": "AbstractThreePhaseCommitCohort<ActorSelection>", "signature": "AbstractThreePhaseCommitCohort<ActorSelection> createMultiCommitCohort()", "full_signature": "private AbstractThreePhaseCommitCohort<ActorSelection> createMultiCommitCohort()", "class_method_signature": "TransactionProxy.createMultiCommitCohort()", "testcase": false, "constructor": false}, {"identifier": "shardNameFromRootChild", "parameters": "(final DataContainerChild<?, ?> child)", "modifiers": "private", "return": "String", "signature": "String shardNameFromRootChild(final DataContainerChild<?, ?> child)", "full_signature": "private String shardNameFromRootChild(final DataContainerChild<?, ?> child)", "class_method_signature": "TransactionProxy.shardNameFromRootChild(final DataContainerChild<?, ?> child)", "testcase": false, "constructor": false}, {"identifier": "shardNameFromIdentifier", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "private", "return": "String", "signature": "String shardNameFromIdentifier(final YangInstanceIdentifier path)", "full_signature": "private String shardNameFromIdentifier(final YangInstanceIdentifier path)", "class_method_signature": "TransactionProxy.shardNameFromIdentifier(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "getContextWrapper", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "private", "return": "TransactionContextWrapper", "signature": "TransactionContextWrapper getContextWrapper(final YangInstanceIdentifier path)", "full_signature": "private TransactionContextWrapper getContextWrapper(final YangInstanceIdentifier path)", "class_method_signature": "TransactionProxy.getContextWrapper(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "getContextWrapper", "parameters": "(final String shardName)", "modifiers": "private", "return": "TransactionContextWrapper", "signature": "TransactionContextWrapper getContextWrapper(final String shardName)", "full_signature": "private TransactionContextWrapper getContextWrapper(final String shardName)", "class_method_signature": "TransactionProxy.getContextWrapper(final String shardName)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "", "return": "TransactionType", "signature": "TransactionType getType()", "full_signature": " TransactionType getType()", "class_method_signature": "TransactionProxy.getType()", "testcase": false, "constructor": false}, {"identifier": "isReady", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isReady()", "full_signature": " boolean isReady()", "class_method_signature": "TransactionProxy.isReady()", "testcase": false, "constructor": false}, {"identifier": "getActorUtils", "parameters": "()", "modifiers": "final", "return": "ActorUtils", "signature": "ActorUtils getActorUtils()", "full_signature": "final ActorUtils getActorUtils()", "class_method_signature": "TransactionProxy.getActorUtils()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/TransactionProxy.java"}, "focal_method": {"identifier": "write", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void write(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data) {\n        checkModificationState(\"write\", path);\n\n        if (path.isEmpty()) {\n            writeAllData(checkRootData(data));\n        } else {\n            executeModification(new WriteOperation(path, data));\n        }\n    }", "signature": "void write(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "@Override public void write(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "TransactionProxy.write(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": false, "invocations": ["checkModificationState", "isEmpty", "writeAllData", "checkRootData", "executeModification"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}