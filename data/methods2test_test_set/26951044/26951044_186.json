{"test_class": {"identifier": "CoreConfigurationBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TestPropertySource testPropertySource = new TestPropertySource(){};", "modifier": "private", "type": "TestPropertySource", "declarator": "testPropertySource = new TestPropertySource(){}", "var_name": "testPropertySource"}], "file": "code/core/src/test/java/org/apache/tamaya/core/internal/CoreConfigurationBuilderTest.java"}, "test_case": {"identifier": "addCorePropertyConverters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addCorePropertyConverters() throws Exception {\n        CoreConfigurationBuilder b = new CoreConfigurationBuilder();\n        b.addCorePropertyConverters();\n        Map<TypeLiteral<?>, List<PropertyConverter<?>>> converters = b.getPropertyConverter();\n        assertThat(converters).containsKey(TypeLiteral.<BigDecimal>of(BigDecimal.class));\n        assertThat(converters).containsKey(TypeLiteral.<BigInteger>of(BigInteger.class));\n        assertThat(converters).containsKey(TypeLiteral.<Boolean>of(Boolean.class));\n        assertThat(converters).containsKey(TypeLiteral.<Byte>of(Byte.class));\n        assertThat(converters).containsKey(TypeLiteral.<Character>of(Character.class));\n        assertThat(converters).containsKey(TypeLiteral.<Class<?>>of(Class.class));\n        assertThat(converters).containsKey(TypeLiteral.<Currency>of(Currency.class));\n        assertThat(converters).containsKey(TypeLiteral.<Double>of(Double.class));\n        assertThat(converters).containsKey(TypeLiteral.<File>of(File.class));\n        assertThat(converters).containsKey(TypeLiteral.<Float>of(Float.class));\n        assertThat(converters).containsKey(TypeLiteral.<Integer>of(Integer.class));\n        assertThat(converters).containsKey(TypeLiteral.<Long>of(Long.class));\n        assertThat(converters).containsKey(TypeLiteral.<Number>of(Number.class));\n        assertThat(converters).containsKey(TypeLiteral.<Path>of(Path.class));\n        assertThat(converters).containsKey(TypeLiteral.<Short>of(Short.class));\n        assertThat(converters).containsKey(TypeLiteral.<URI>of(URI.class));\n        assertThat(converters).containsKey(TypeLiteral.<URL>of(URL.class));\n    }", "signature": "void addCorePropertyConverters()", "full_signature": "@Test public void addCorePropertyConverters()", "class_method_signature": "CoreConfigurationBuilderTest.addCorePropertyConverters()", "testcase": true, "constructor": false, "invocations": ["addCorePropertyConverters", "getPropertyConverter", "containsKey", "assertThat", "of", "containsKey", "assertThat", "of", "containsKey", "assertThat", "of", "containsKey", "assertThat", "of", "containsKey", "assertThat", "of", "containsKey", "assertThat", "of", "containsKey", "assertThat", "of", "containsKey", "assertThat", "of", "containsKey", "assertThat", "of", "containsKey", "assertThat", "of", "containsKey", "assertThat", "of", "containsKey", "assertThat", "of", "containsKey", "assertThat", "of", "containsKey", "assertThat", "of", "containsKey", "assertThat", "of", "containsKey", "assertThat", "of", "containsKey", "assertThat", "of"]}, "focal_class": {"identifier": "CoreConfigurationBuilder", "superclass": "extends DefaultConfigurationBuilder", "interfaces": "", "fields": [], "methods": [{"identifier": "CoreConfigurationBuilder", "parameters": "()", "modifiers": "public", "return": "", "signature": " CoreConfigurationBuilder()", "full_signature": "public  CoreConfigurationBuilder()", "class_method_signature": "CoreConfigurationBuilder.CoreConfigurationBuilder()", "testcase": false, "constructor": true}, {"identifier": "CoreConfigurationBuilder", "parameters": "(Configuration config)", "modifiers": "public", "return": "", "signature": " CoreConfigurationBuilder(Configuration config)", "full_signature": "public  CoreConfigurationBuilder(Configuration config)", "class_method_signature": "CoreConfigurationBuilder.CoreConfigurationBuilder(Configuration config)", "testcase": false, "constructor": true}, {"identifier": "CoreConfigurationBuilder", "parameters": "(ConfigurationContext context)", "modifiers": "public", "return": "", "signature": " CoreConfigurationBuilder(ConfigurationContext context)", "full_signature": "public  CoreConfigurationBuilder(ConfigurationContext context)", "class_method_signature": "CoreConfigurationBuilder.CoreConfigurationBuilder(ConfigurationContext context)", "testcase": false, "constructor": true}, {"identifier": "addCorePropertyConverters", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override protected", "return": "void", "signature": "void addCorePropertyConverters()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override protected void addCorePropertyConverters()", "class_method_signature": "CoreConfigurationBuilder.addCorePropertyConverters()", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "@Override public", "return": "Configuration", "signature": "Configuration build()", "full_signature": "@Override public Configuration build()", "class_method_signature": "CoreConfigurationBuilder.build()", "testcase": false, "constructor": false}], "file": "code/core/src/main/java/org/apache/tamaya/core/internal/CoreConfigurationBuilder.java"}, "focal_method": {"identifier": "addCorePropertyConverters", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override protected", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    protected void addCorePropertyConverters() {\n        addPropertyConverters(TypeLiteral.<BigDecimal>of(BigDecimal.class), new BigDecimalConverter());\n        addPropertyConverters(TypeLiteral.<BigInteger>of(BigInteger.class), new BigIntegerConverter());\n        addPropertyConverters(TypeLiteral.<Boolean>of(Boolean.class), new BooleanConverter());\n        addPropertyConverters(TypeLiteral.<Byte>of(Byte.class), new ByteConverter());\n        addPropertyConverters(TypeLiteral.<Character>of(Character.class), new CharConverter());\n        addPropertyConverters(TypeLiteral.<Class<?>>of(Class.class), new ClassConverter());\n        addPropertyConverters(TypeLiteral.<Currency>of(Currency.class), new CurrencyConverter());\n        addPropertyConverters(TypeLiteral.<Double>of(Double.class), new DoubleConverter());\n        addPropertyConverters(TypeLiteral.<File>of(File.class), new FileConverter());\n        addPropertyConverters(TypeLiteral.<Float>of(Float.class), new FloatConverter());\n        addPropertyConverters(TypeLiteral.<Integer>of(Integer.class), new IntegerConverter());\n        addPropertyConverters(TypeLiteral.<Long>of(Long.class), new LongConverter());\n        addPropertyConverters(TypeLiteral.<Number>of(Number.class), new NumberConverter());\n        addPropertyConverters(TypeLiteral.<Path>of(Path.class), new PathConverter());\n        addPropertyConverters(TypeLiteral.<Short>of(Short.class), new ShortConverter());\n        addPropertyConverters(TypeLiteral.<URI>of(URI.class), new URIConverter());\n        addPropertyConverters(TypeLiteral.<URL>of(URL.class), new URLConverter());\n    }", "signature": "void addCorePropertyConverters()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override protected void addCorePropertyConverters()", "class_method_signature": "CoreConfigurationBuilder.addCorePropertyConverters()", "testcase": false, "constructor": false, "invocations": ["addPropertyConverters", "of", "addPropertyConverters", "of", "addPropertyConverters", "of", "addPropertyConverters", "of", "addPropertyConverters", "of", "addPropertyConverters", "of", "addPropertyConverters", "of", "addPropertyConverters", "of", "addPropertyConverters", "of", "addPropertyConverters", "of", "addPropertyConverters", "of", "addPropertyConverters", "of", "addPropertyConverters", "of", "addPropertyConverters", "of", "addPropertyConverters", "of", "addPropertyConverters", "of", "addPropertyConverters", "of"]}, "repository": {"repo_id": 26951044, "url": "https://github.com/apache/incubator-tamaya", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 44, "size": 7630, "license": "licensed"}}