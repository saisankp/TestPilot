{"test_class": {"identifier": "SharedBufferTest", "superclass": "extends TestLogger", "interfaces": "", "fields": [], "file": "flink-libraries/flink-cep/src/test/java/org/apache/flink/cep/nfa/SharedBufferTest.java"}, "test_case": {"identifier": "testSharedBuffer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSharedBuffer() {\n\t\tSharedBuffer<String, Event> sharedBuffer = new SharedBuffer<>(Event.createTypeSerializer());\n\t\tint numberEvents = 8;\n\t\tEvent[] events = new Event[numberEvents];\n\t\tfinal long timestamp = 1L;\n\n\t\tfor (int i = 0; i < numberEvents; i++) {\n\t\t\tevents[i] = new Event(i + 1, \"e\" + (i + 1), i);\n\t\t}\n\n\t\tLinkedHashMultimap<String, Event> expectedPattern1 = LinkedHashMultimap.create();\n\t\texpectedPattern1.put(\"a1\", events[2]);\n\t\texpectedPattern1.put(\"a[]\", events[3]);\n\t\texpectedPattern1.put(\"b\", events[5]);\n\n\t\tLinkedHashMultimap<String, Event> expectedPattern2 = LinkedHashMultimap.create();\n\t\texpectedPattern2.put(\"a1\", events[0]);\n\t\texpectedPattern2.put(\"a[]\", events[1]);\n\t\texpectedPattern2.put(\"a[]\", events[2]);\n\t\texpectedPattern2.put(\"a[]\", events[3]);\n\t\texpectedPattern2.put(\"a[]\", events[4]);\n\t\texpectedPattern2.put(\"b\", events[5]);\n\n\t\tLinkedHashMultimap<String, Event> expectedPattern3 = LinkedHashMultimap.create();\n\t\texpectedPattern3.put(\"a1\", events[0]);\n\t\texpectedPattern3.put(\"a[]\", events[1]);\n\t\texpectedPattern3.put(\"a[]\", events[2]);\n\t\texpectedPattern3.put(\"a[]\", events[3]);\n\t\texpectedPattern3.put(\"a[]\", events[4]);\n\t\texpectedPattern3.put(\"a[]\", events[5]);\n\t\texpectedPattern3.put(\"a[]\", events[6]);\n\t\texpectedPattern3.put(\"b\", events[7]);\n\n\t\tsharedBuffer.put(\"a1\", events[0], timestamp, null, null, 0, DeweyNumber.fromString(\"1\"));\n\t\tsharedBuffer.put(\"a[]\", events[1], timestamp, \"a1\", events[0], timestamp, DeweyNumber.fromString(\"1.0\"));\n\t\tsharedBuffer.put(\"a1\", events[2], timestamp, null, null, 0, DeweyNumber.fromString(\"2\"));\n\t\tsharedBuffer.put(\"a[]\", events[2], timestamp, \"a[]\", events[1], timestamp, DeweyNumber.fromString(\"1.0\"));\n\t\tsharedBuffer.put(\"a[]\", events[3], timestamp, \"a[]\", events[2], timestamp, DeweyNumber.fromString(\"1.0\"));\n\t\tsharedBuffer.put(\"a[]\", events[3], timestamp, \"a1\", events[2], timestamp, DeweyNumber.fromString(\"2.0\"));\n\t\tsharedBuffer.put(\"a[]\", events[4], timestamp, \"a[]\", events[3], timestamp, DeweyNumber.fromString(\"1.0\"));\n\t\tsharedBuffer.put(\"a[]\", events[5], timestamp, \"a[]\", events[4], timestamp, DeweyNumber.fromString(\"1.1\"));\n\t\tsharedBuffer.put(\"b\", events[5], timestamp, \"a[]\", events[3], timestamp, DeweyNumber.fromString(\"2.0.0\"));\n\t\tsharedBuffer.put(\"b\", events[5], timestamp, \"a[]\", events[4], timestamp, DeweyNumber.fromString(\"1.0.0\"));\n\t\tsharedBuffer.put(\"a[]\", events[6], timestamp, \"a[]\", events[5], timestamp, DeweyNumber.fromString(\"1.1\"));\n\t\tsharedBuffer.put(\"b\", events[7], timestamp, \"a[]\", events[6], timestamp, DeweyNumber.fromString(\"1.1.0\"));\n\n\t\tCollection<LinkedHashMultimap<String, Event>> patterns3 = sharedBuffer.extractPatterns(\"b\", events[7], timestamp, DeweyNumber.fromString(\"1.1.0\"));\n\t\tsharedBuffer.remove(\"b\", events[7], timestamp);\n\t\tCollection<LinkedHashMultimap<String, Event>> patterns4 = sharedBuffer.extractPatterns(\"b\", events[7], timestamp, DeweyNumber.fromString(\"1.1.0\"));\n\t\tCollection<LinkedHashMultimap<String, Event>> patterns1 = sharedBuffer.extractPatterns(\"b\", events[5], timestamp, DeweyNumber.fromString(\"2.0.0\"));\n\t\tCollection<LinkedHashMultimap<String, Event>> patterns2 = sharedBuffer.extractPatterns(\"b\", events[5], timestamp, DeweyNumber.fromString(\"1.0.0\"));\n\t\tsharedBuffer.remove(\"b\", events[5], timestamp);\n\n\t\tassertTrue(sharedBuffer.isEmpty());\n\t\tassertTrue(patterns4.isEmpty());\n\t\tassertEquals(Collections.singletonList(expectedPattern1), patterns1);\n\t\tassertEquals(Collections.singletonList(expectedPattern2), patterns2);\n\t\tassertEquals(Collections.singletonList(expectedPattern3), patterns3);\n\t}", "signature": "void testSharedBuffer()", "full_signature": "@Test public void testSharedBuffer()", "class_method_signature": "SharedBufferTest.testSharedBuffer()", "testcase": true, "constructor": false, "invocations": ["createTypeSerializer", "create", "put", "put", "put", "create", "put", "put", "put", "put", "put", "put", "create", "put", "put", "put", "put", "put", "put", "put", "put", "put", "fromString", "put", "fromString", "put", "fromString", "put", "fromString", "put", "fromString", "put", "fromString", "put", "fromString", "put", "fromString", "put", "fromString", "put", "fromString", "put", "fromString", "put", "fromString", "extractPatterns", "fromString", "remove", "extractPatterns", "fromString", "extractPatterns", "fromString", "extractPatterns", "fromString", "remove", "assertTrue", "isEmpty", "assertTrue", "isEmpty", "assertEquals", "singletonList", "assertEquals", "singletonList", "assertEquals", "singletonList"]}, "focal_class": {"identifier": "SharedBuffer", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 9213251042562206495L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 9213251042562206495L", "var_name": "serialVersionUID"}, {"original_string": "private final TypeSerializer<V> valueSerializer;", "modifier": "private final", "type": "TypeSerializer<V>", "declarator": "valueSerializer", "var_name": "valueSerializer"}, {"original_string": "private transient Map<K, SharedBufferPage<K, V>> pages;", "modifier": "private transient", "type": "Map<K, SharedBufferPage<K, V>>", "declarator": "pages", "var_name": "pages"}], "methods": [{"identifier": "SharedBuffer", "parameters": "(final TypeSerializer<V> valueSerializer)", "modifiers": "public", "return": "", "signature": " SharedBuffer(final TypeSerializer<V> valueSerializer)", "full_signature": "public  SharedBuffer(final TypeSerializer<V> valueSerializer)", "class_method_signature": "SharedBuffer.SharedBuffer(final TypeSerializer<V> valueSerializer)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(\n\t\t\tfinal K key,\n\t\t\tfinal V value,\n\t\t\tfinal long timestamp,\n\t\t\tfinal K previousKey,\n\t\t\tfinal V previousValue,\n\t\t\tfinal long previousTimestamp,\n\t\t\tfinal DeweyNumber version)", "modifiers": "public", "return": "void", "signature": "void put(\n\t\t\tfinal K key,\n\t\t\tfinal V value,\n\t\t\tfinal long timestamp,\n\t\t\tfinal K previousKey,\n\t\t\tfinal V previousValue,\n\t\t\tfinal long previousTimestamp,\n\t\t\tfinal DeweyNumber version)", "full_signature": "public void put(\n\t\t\tfinal K key,\n\t\t\tfinal V value,\n\t\t\tfinal long timestamp,\n\t\t\tfinal K previousKey,\n\t\t\tfinal V previousValue,\n\t\t\tfinal long previousTimestamp,\n\t\t\tfinal DeweyNumber version)", "class_method_signature": "SharedBuffer.put(\n\t\t\tfinal K key,\n\t\t\tfinal V value,\n\t\t\tfinal long timestamp,\n\t\t\tfinal K previousKey,\n\t\t\tfinal V previousValue,\n\t\t\tfinal long previousTimestamp,\n\t\t\tfinal DeweyNumber version)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(\n\t\tfinal K key,\n\t\tfinal V value,\n\t\tfinal long timestamp)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(\n\t\tfinal K key,\n\t\tfinal V value,\n\t\tfinal long timestamp)", "full_signature": "public boolean contains(\n\t\tfinal K key,\n\t\tfinal V value,\n\t\tfinal long timestamp)", "class_method_signature": "SharedBuffer.contains(\n\t\tfinal K key,\n\t\tfinal V value,\n\t\tfinal long timestamp)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "SharedBuffer.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "prune", "parameters": "(long pruningTimestamp)", "modifiers": "public", "return": "void", "signature": "void prune(long pruningTimestamp)", "full_signature": "public void prune(long pruningTimestamp)", "class_method_signature": "SharedBuffer.prune(long pruningTimestamp)", "testcase": false, "constructor": false}, {"identifier": "extractPatterns", "parameters": "(\n\t\tfinal K key,\n\t\tfinal V value,\n\t\tfinal long timestamp,\n\t\tfinal DeweyNumber version)", "modifiers": "public", "return": "Collection<LinkedHashMultimap<K, V>>", "signature": "Collection<LinkedHashMultimap<K, V>> extractPatterns(\n\t\tfinal K key,\n\t\tfinal V value,\n\t\tfinal long timestamp,\n\t\tfinal DeweyNumber version)", "full_signature": "public Collection<LinkedHashMultimap<K, V>> extractPatterns(\n\t\tfinal K key,\n\t\tfinal V value,\n\t\tfinal long timestamp,\n\t\tfinal DeweyNumber version)", "class_method_signature": "SharedBuffer.extractPatterns(\n\t\tfinal K key,\n\t\tfinal V value,\n\t\tfinal long timestamp,\n\t\tfinal DeweyNumber version)", "testcase": false, "constructor": false}, {"identifier": "lock", "parameters": "(final K key, final V value, final long timestamp)", "modifiers": "public", "return": "void", "signature": "void lock(final K key, final V value, final long timestamp)", "full_signature": "public void lock(final K key, final V value, final long timestamp)", "class_method_signature": "SharedBuffer.lock(final K key, final V value, final long timestamp)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(final K key, final V value, final long timestamp)", "modifiers": "public", "return": "void", "signature": "void release(final K key, final V value, final long timestamp)", "full_signature": "public void release(final K key, final V value, final long timestamp)", "class_method_signature": "SharedBuffer.release(final K key, final V value, final long timestamp)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final K key, final V value, final long timestamp)", "modifiers": "public", "return": "void", "signature": "void remove(final K key, final V value, final long timestamp)", "full_signature": "public void remove(final K key, final V value, final long timestamp)", "class_method_signature": "SharedBuffer.remove(final K key, final V value, final long timestamp)", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream oos)", "modifiers": "private", "return": "void", "signature": "void writeObject(ObjectOutputStream oos)", "full_signature": "private void writeObject(ObjectOutputStream oos)", "class_method_signature": "SharedBuffer.writeObject(ObjectOutputStream oos)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream ois)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream ois)", "full_signature": "private void readObject(ObjectInputStream ois)", "class_method_signature": "SharedBuffer.readObject(ObjectInputStream ois)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(\n\t\tfinal K key,\n\t\tfinal V value,\n\t\tfinal long timestamp)", "modifiers": "private", "return": "SharedBufferEntry<K, V>", "signature": "SharedBufferEntry<K, V> get(\n\t\tfinal K key,\n\t\tfinal V value,\n\t\tfinal long timestamp)", "full_signature": "private SharedBufferEntry<K, V> get(\n\t\tfinal K key,\n\t\tfinal V value,\n\t\tfinal long timestamp)", "class_method_signature": "SharedBuffer.get(\n\t\tfinal K key,\n\t\tfinal V value,\n\t\tfinal long timestamp)", "testcase": false, "constructor": false}, {"identifier": "internalRemove", "parameters": "(final SharedBufferEntry<K, V> entry)", "modifiers": "private", "return": "void", "signature": "void internalRemove(final SharedBufferEntry<K, V> entry)", "full_signature": "private void internalRemove(final SharedBufferEntry<K, V> entry)", "class_method_signature": "SharedBuffer.internalRemove(final SharedBufferEntry<K, V> entry)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SharedBuffer.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "SharedBuffer.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SharedBuffer.hashCode()", "testcase": false, "constructor": false}], "file": "flink-libraries/flink-cep/src/main/java/org/apache/flink/cep/nfa/SharedBuffer.java"}, "focal_method": {"identifier": "SharedBuffer", "parameters": "(final TypeSerializer<V> valueSerializer)", "modifiers": "public", "return": "", "body": "public SharedBuffer(final TypeSerializer<V> valueSerializer) {\n\t\tthis.valueSerializer = valueSerializer;\n\t\tpages = new HashMap<>();\n\t}", "signature": " SharedBuffer(final TypeSerializer<V> valueSerializer)", "full_signature": "public  SharedBuffer(final TypeSerializer<V> valueSerializer)", "class_method_signature": "SharedBuffer.SharedBuffer(final TypeSerializer<V> valueSerializer)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}