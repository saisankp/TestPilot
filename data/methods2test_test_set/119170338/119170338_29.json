{"test_class": {"identifier": "TermSynonymTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TermSynonym termSynonym;", "modifier": "private", "type": "TermSynonym", "declarator": "termSynonym", "var_name": "termSynonym"}], "file": "phenol-core/src/test/java/org/monarchinitiative/phenol/ontology/data/TermSynonymTest.java"}, "test_case": {"identifier": "testLaypersonLabel", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testLaypersonLabel() {\n    assertTrue(termSynonym.isLayperson());\n  }", "signature": "void testLaypersonLabel()", "full_signature": "@Test void testLaypersonLabel()", "class_method_signature": "TermSynonymTest.testLaypersonLabel()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isLayperson"]}, "focal_class": {"identifier": "TermSynonym", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 2L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 2L", "var_name": "serialVersionUID"}, {"original_string": "private final String value;", "modifier": "private final", "type": "String", "declarator": "value", "var_name": "value"}, {"original_string": "private final TermSynonymScope scope;", "modifier": "private final", "type": "TermSynonymScope", "declarator": "scope", "var_name": "scope"}, {"original_string": "private final String synonymTypeName;", "modifier": "private final", "type": "String", "declarator": "synonymTypeName", "var_name": "synonymTypeName"}, {"original_string": "private final List<TermXref> termXrefs;", "modifier": "private final", "type": "List<TermXref>", "declarator": "termXrefs", "var_name": "termXrefs"}, {"original_string": "SynonymType synonymType = SynonymType.NONE;", "modifier": "", "type": "SynonymType", "declarator": "synonymType = SynonymType.NONE", "var_name": "synonymType"}], "methods": [{"identifier": "TermSynonym", "parameters": "(String value, TermSynonymScope scope, String synonymTypeName, List<TermXref> termXrefs, String synType)", "modifiers": "public", "return": "", "signature": " TermSynonym(String value, TermSynonymScope scope, String synonymTypeName, List<TermXref> termXrefs, String synType)", "full_signature": "public  TermSynonym(String value, TermSynonymScope scope, String synonymTypeName, List<TermXref> termXrefs, String synType)", "class_method_signature": "TermSynonym.TermSynonym(String value, TermSynonymScope scope, String synonymTypeName, List<TermXref> termXrefs, String synType)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getValue()", "full_signature": "public String getValue()", "class_method_signature": "TermSynonym.getValue()", "testcase": false, "constructor": false}, {"identifier": "getScope", "parameters": "()", "modifiers": "public", "return": "TermSynonymScope", "signature": "TermSynonymScope getScope()", "full_signature": "public TermSynonymScope getScope()", "class_method_signature": "TermSynonym.getScope()", "testcase": false, "constructor": false}, {"identifier": "getSynonymTypeName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSynonymTypeName()", "full_signature": "public String getSynonymTypeName()", "class_method_signature": "TermSynonym.getSynonymTypeName()", "testcase": false, "constructor": false}, {"identifier": "getTermXrefs", "parameters": "()", "modifiers": "public", "return": "List<TermXref>", "signature": "List<TermXref> getTermXrefs()", "full_signature": "public List<TermXref> getTermXrefs()", "class_method_signature": "TermSynonym.getTermXrefs()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TermSynonym.toString()", "testcase": false, "constructor": false}, {"identifier": "hasSynonymType", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasSynonymType()", "full_signature": "public boolean hasSynonymType()", "class_method_signature": "TermSynonym.hasSynonymType()", "testcase": false, "constructor": false}, {"identifier": "isLayperson", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLayperson()", "full_signature": "public boolean isLayperson()", "class_method_signature": "TermSynonym.isLayperson()", "testcase": false, "constructor": false}, {"identifier": "isAbbreviation", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAbbreviation()", "full_signature": "public boolean isAbbreviation()", "class_method_signature": "TermSynonym.isAbbreviation()", "testcase": false, "constructor": false}, {"identifier": "isUKspelling", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUKspelling()", "full_signature": "public boolean isUKspelling()", "class_method_signature": "TermSynonym.isUKspelling()", "testcase": false, "constructor": false}, {"identifier": "isPluralForm", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPluralForm()", "full_signature": "public boolean isPluralForm()", "class_method_signature": "TermSynonym.isPluralForm()", "testcase": false, "constructor": false}, {"identifier": "isObsoleteSynonym", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isObsoleteSynonym()", "full_signature": "public boolean isObsoleteSynonym()", "class_method_signature": "TermSynonym.isObsoleteSynonym()", "testcase": false, "constructor": false}], "file": "phenol-core/src/main/java/org/monarchinitiative/phenol/ontology/data/TermSynonym.java"}, "focal_method": {"identifier": "isLayperson", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isLayperson() {\n    return this.synonymType.equals(SynonymType.LAYPERSON_TERM);\n  }", "signature": "boolean isLayperson()", "full_signature": "public boolean isLayperson()", "class_method_signature": "TermSynonym.isLayperson()", "testcase": false, "constructor": false, "invocations": ["equals"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}