{"test_class": {"identifier": "LazyLoadingGrammarDocumentTest", "superclass": "", "interfaces": "", "fields": [], "file": "org.jvoicexml/src/test/java/org/jvoicexml/documentserver/LazyLoadingGrammarDocumentTest.java"}, "test_case": {"identifier": "testGetDocument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDocument() throws URISyntaxException, BadFetchError {\n        final URI uri = new URI(\"http://localhost:8080/testgrammar\");\n        final FetchAttributes attributes = new FetchAttributes();\n        attributes.setFetchHint(FetchAttributes.HINT_SAFE);\n        final String sessionId = \"4242\";\n        final DocumentServer server = Mockito.mock(DocumentServer.class);\n        final GrammarDocument doc = new ExternalGrammarDocument(uri,\n                \"test\".getBytes(), \"UTF-8\", true);\n        Mockito.when(server.getGrammarDocument(Mockito.anyString(),\n                Mockito.any(), Mockito.any())).thenReturn(doc);\n        final LazyLoadingGrammarDocument document = new LazyLoadingGrammarDocument(\n                sessionId, server, uri, attributes);\n        Assert.assertEquals(doc.getBuffer(), document.getBuffer());\n    }", "signature": "void testGetDocument()", "full_signature": "@Test public void testGetDocument()", "class_method_signature": "LazyLoadingGrammarDocumentTest.testGetDocument()", "testcase": true, "constructor": false, "invocations": ["setFetchHint", "mock", "getBytes", "thenReturn", "when", "getGrammarDocument", "anyString", "any", "any", "assertEquals", "getBuffer", "getBuffer"]}, "focal_class": {"identifier": "LazyLoadingGrammarDocument", "superclass": "", "interfaces": "implements GrammarDocument", "fields": [{"original_string": "private static final Logger LOGGER = LogManager\n            .getLogger(LazyLoadingGrammarDocument.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager\n            .getLogger(LazyLoadingGrammarDocument.class)", "var_name": "LOGGER"}, {"original_string": "private URI uri;", "modifier": "private", "type": "URI", "declarator": "uri", "var_name": "uri"}, {"original_string": "private GrammarType type;", "modifier": "private", "type": "GrammarType", "declarator": "type", "var_name": "type"}, {"original_string": "private ModeType mode;", "modifier": "private", "type": "ModeType", "declarator": "mode", "var_name": "mode"}, {"original_string": "private final String sessionIdentifier;", "modifier": "private final", "type": "String", "declarator": "sessionIdentifier", "var_name": "sessionIdentifier"}, {"original_string": "private final DocumentServer server;", "modifier": "private final", "type": "DocumentServer", "declarator": "server", "var_name": "server"}, {"original_string": "private final FetchAttributes attributes;", "modifier": "private final", "type": "FetchAttributes", "declarator": "attributes", "var_name": "attributes"}, {"original_string": "private GrammarDocument document;", "modifier": "private", "type": "GrammarDocument", "declarator": "document", "var_name": "document"}], "methods": [{"identifier": "LazyLoadingGrammarDocument", "parameters": "(final String sessionId,\n            final DocumentServer documentServer, \n            final URI source, final FetchAttributes attrs)", "modifiers": "public", "return": "", "signature": " LazyLoadingGrammarDocument(final String sessionId,\n            final DocumentServer documentServer, \n            final URI source, final FetchAttributes attrs)", "full_signature": "public  LazyLoadingGrammarDocument(final String sessionId,\n            final DocumentServer documentServer, \n            final URI source, final FetchAttributes attrs)", "class_method_signature": "LazyLoadingGrammarDocument.LazyLoadingGrammarDocument(final String sessionId,\n            final DocumentServer documentServer, \n            final URI source, final FetchAttributes attrs)", "testcase": false, "constructor": true}, {"identifier": "isCacheable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCacheable()", "full_signature": "@Override public boolean isCacheable()", "class_method_signature": "LazyLoadingGrammarDocument.isCacheable()", "testcase": false, "constructor": false}, {"identifier": "setURI", "parameters": "(final URI source)", "modifiers": "@Override public", "return": "void", "signature": "void setURI(final URI source)", "full_signature": "@Override public void setURI(final URI source)", "class_method_signature": "LazyLoadingGrammarDocument.setURI(final URI source)", "testcase": false, "constructor": false}, {"identifier": "getURI", "parameters": "()", "modifiers": "@Override public", "return": "URI", "signature": "URI getURI()", "full_signature": "@Override public URI getURI()", "class_method_signature": "LazyLoadingGrammarDocument.getURI()", "testcase": false, "constructor": false}, {"identifier": "setMediaType", "parameters": "(final GrammarType gramamrType)", "modifiers": "@Override public", "return": "void", "signature": "void setMediaType(final GrammarType gramamrType)", "full_signature": "@Override public void setMediaType(final GrammarType gramamrType)", "class_method_signature": "LazyLoadingGrammarDocument.setMediaType(final GrammarType gramamrType)", "testcase": false, "constructor": false}, {"identifier": "getMediaType", "parameters": "()", "modifiers": "@Override public", "return": "GrammarType", "signature": "GrammarType getMediaType()", "full_signature": "@Override public GrammarType getMediaType()", "class_method_signature": "LazyLoadingGrammarDocument.getMediaType()", "testcase": false, "constructor": false}, {"identifier": "setModeType", "parameters": "(final ModeType modeType)", "modifiers": "@Override public", "return": "void", "signature": "void setModeType(final ModeType modeType)", "full_signature": "@Override public void setModeType(final ModeType modeType)", "class_method_signature": "LazyLoadingGrammarDocument.setModeType(final ModeType modeType)", "testcase": false, "constructor": false}, {"identifier": "getModeType", "parameters": "()", "modifiers": "@Override public", "return": "ModeType", "signature": "ModeType getModeType()", "full_signature": "@Override public ModeType getModeType()", "class_method_signature": "LazyLoadingGrammarDocument.getModeType()", "testcase": false, "constructor": false}, {"identifier": "retrieveDocument", "parameters": "()", "modifiers": "private", "return": "GrammarDocument", "signature": "GrammarDocument retrieveDocument()", "full_signature": "private GrammarDocument retrieveDocument()", "class_method_signature": "LazyLoadingGrammarDocument.retrieveDocument()", "testcase": false, "constructor": false}, {"identifier": "isAscii", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAscii()", "full_signature": "@Override public boolean isAscii()", "class_method_signature": "LazyLoadingGrammarDocument.isAscii()", "testcase": false, "constructor": false}, {"identifier": "getDocument", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDocument()", "full_signature": "@Override public String getDocument()", "class_method_signature": "LazyLoadingGrammarDocument.getDocument()", "testcase": false, "constructor": false}, {"identifier": "getTextContent", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getTextContent()", "full_signature": "@Override public String getTextContent()", "class_method_signature": "LazyLoadingGrammarDocument.getTextContent()", "testcase": false, "constructor": false}, {"identifier": "getBuffer", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getBuffer()", "full_signature": "@Override public byte[] getBuffer()", "class_method_signature": "LazyLoadingGrammarDocument.getBuffer()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "LazyLoadingGrammarDocument.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "LazyLoadingGrammarDocument.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(GrammarDocument obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(GrammarDocument obj)", "full_signature": "@Override public boolean equals(GrammarDocument obj)", "class_method_signature": "LazyLoadingGrammarDocument.equals(GrammarDocument obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LazyLoadingGrammarDocument.toString()", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/documentserver/LazyLoadingGrammarDocument.java"}, "focal_method": {"identifier": "getDocument", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getDocument() {\n        try {\n            final GrammarDocument doc = retrieveDocument();\n            return doc.getDocument();\n        } catch (BadFetchError e) {\n            LOGGER.warn(e.getMessage(), e);\n            return null;\n        }\n    }", "signature": "String getDocument()", "full_signature": "@Override public String getDocument()", "class_method_signature": "LazyLoadingGrammarDocument.getDocument()", "testcase": false, "constructor": false, "invocations": ["retrieveDocument", "getDocument", "warn", "getMessage"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}