{"test_class": {"identifier": "ComparablesTest", "superclass": "", "interfaces": "", "fields": [], "file": "Paris/2014/2014-11-20-poker-hand-Java-Randori/src/test/java/poker/hand/ComparablesTest.java"}, "test_case": {"identifier": "an_empty_list_is_smaller_than_others", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void\n   an_empty_list_is_smaller_than_others() {\n      final int lefty = compareLists(Arrays.<Integer>asList(1), Collections.<Integer>emptyList());\n      assertEquals(OutCome.LEFT, OutCome.from(lefty));\n\n      final int righty = compareLists(Collections.<Integer>emptyList(), Arrays.<Integer>asList(1));\n      assertEquals(OutCome.RIGHT, OutCome.from(righty));\n   }", "signature": "void an_empty_list_is_smaller_than_others()", "full_signature": "@Test public void an_empty_list_is_smaller_than_others()", "class_method_signature": "ComparablesTest.an_empty_list_is_smaller_than_others()", "testcase": true, "constructor": false, "invocations": ["compareLists", "asList", "emptyList", "assertEquals", "from", "compareLists", "emptyList", "asList", "assertEquals", "from"]}, "focal_class": {"identifier": "Comparables", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "compareLists", "parameters": "(List<T> lefts, List<T> rights)", "modifiers": "static", "return": "int", "signature": "int compareLists(List<T> lefts, List<T> rights)", "full_signature": "static int compareLists(List<T> lefts, List<T> rights)", "class_method_signature": "Comparables.compareLists(List<T> lefts, List<T> rights)", "testcase": false, "constructor": false}], "file": "Paris/2014/2014-11-20-poker-hand-Java-Randori/src/main/java/poker/hand/Comparables.java"}, "focal_method": {"identifier": "compareLists", "parameters": "(List<T> lefts, List<T> rights)", "modifiers": "static", "return": "int", "body": "static <T extends Comparable<T>> int compareLists(List<T> lefts, List<T> rights) {\n      if (lefts.size() != rights.size()) {\n         return lefts.size() - rights.size();\n      }\n      for (int i = 0; i < lefts.size(); i++) {\n         final int comparison = lefts.get(i).compareTo(rights.get(i));\n         if (comparison != 0) {\n            return comparison;\n         }\n      }\n      return 0;\n   }", "signature": "int compareLists(List<T> lefts, List<T> rights)", "full_signature": "static int compareLists(List<T> lefts, List<T> rights)", "class_method_signature": "Comparables.compareLists(List<T> lefts, List<T> rights)", "testcase": false, "constructor": false, "invocations": ["size", "size", "size", "size", "size", "compareTo", "get", "get"]}, "repository": {"repo_id": 39905754, "url": "https://github.com/murex/murex-coding-dojo", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 1700, "license": "licensed"}}