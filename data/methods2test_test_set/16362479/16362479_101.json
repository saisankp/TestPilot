{"test_class": {"identifier": "EntityOwnershipShardTest", "superclass": "extends AbstractEntityOwnershipTest", "interfaces": "", "fields": [{"original_string": "private static final String ENTITY_TYPE = \"test type\";", "modifier": "private static final", "type": "String", "declarator": "ENTITY_TYPE = \"test type\"", "var_name": "ENTITY_TYPE"}, {"original_string": "private static final YangInstanceIdentifier ENTITY_ID1 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity1\"));", "modifier": "private static final", "type": "YangInstanceIdentifier", "declarator": "ENTITY_ID1 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity1\"))", "var_name": "ENTITY_ID1"}, {"original_string": "private static final YangInstanceIdentifier ENTITY_ID2 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity2\"));", "modifier": "private static final", "type": "YangInstanceIdentifier", "declarator": "ENTITY_ID2 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity2\"))", "var_name": "ENTITY_ID2"}, {"original_string": "private static final YangInstanceIdentifier ENTITY_ID3 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity3\"));", "modifier": "private static final", "type": "YangInstanceIdentifier", "declarator": "ENTITY_ID3 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity3\"))", "var_name": "ENTITY_ID3"}, {"original_string": "private static final YangInstanceIdentifier ENTITY_ID4 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity4\"));", "modifier": "private static final", "type": "YangInstanceIdentifier", "declarator": "ENTITY_ID4 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity4\"))", "var_name": "ENTITY_ID4"}, {"original_string": "private static final YangInstanceIdentifier ENTITY_ID5 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity5\"));", "modifier": "private static final", "type": "YangInstanceIdentifier", "declarator": "ENTITY_ID5 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity5\"))", "var_name": "ENTITY_ID5"}, {"original_string": "private static final String LOCAL_MEMBER_NAME = \"local-member-1\";", "modifier": "private static final", "type": "String", "declarator": "LOCAL_MEMBER_NAME = \"local-member-1\"", "var_name": "LOCAL_MEMBER_NAME"}, {"original_string": "private static final String PEER_MEMBER_1_NAME = \"peer-member-1\";", "modifier": "private static final", "type": "String", "declarator": "PEER_MEMBER_1_NAME = \"peer-member-1\"", "var_name": "PEER_MEMBER_1_NAME"}, {"original_string": "private static final String PEER_MEMBER_2_NAME = \"peer-member-2\";", "modifier": "private static final", "type": "String", "declarator": "PEER_MEMBER_2_NAME = \"peer-member-2\"", "var_name": "PEER_MEMBER_2_NAME"}, {"original_string": "private Builder dataStoreContextBuilder = DatastoreContext.newBuilder().persistent(false);", "modifier": "private", "type": "Builder", "declarator": "dataStoreContextBuilder = DatastoreContext.newBuilder().persistent(false)", "var_name": "dataStoreContextBuilder"}, {"original_string": "private final TestActorFactory actorFactory = new TestActorFactory(getSystem());", "modifier": "private final", "type": "TestActorFactory", "declarator": "actorFactory = new TestActorFactory(getSystem())", "var_name": "actorFactory"}], "file": "opendaylight/md-sal/sal-distributed-eos/src/test/java/org/opendaylight/controller/cluster/entityownership/EntityOwnershipShardTest.java"}, "test_case": {"identifier": "testOnRegisterCandidateLocal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnRegisterCandidateLocal() {\n        testLog.info(\"testOnRegisterCandidateLocal starting\");\n\n        ShardTestKit kit = new ShardTestKit(getSystem());\n\n        TestActorRef<EntityOwnershipShard> shard = actorFactory.createTestActor(newLocalShardProps());\n\n        ShardTestKit.waitUntilLeader(shard);\n\n        YangInstanceIdentifier entityId = ENTITY_ID1;\n        DOMEntity entity = new DOMEntity(ENTITY_TYPE, entityId);\n\n        shard.tell(new RegisterCandidateLocal(entity), kit.getRef());\n        kit.expectMsgClass(SuccessReply.class);\n\n        verifyCommittedEntityCandidate(shard, ENTITY_TYPE, entityId, LOCAL_MEMBER_NAME);\n        verifyOwner(shard, ENTITY_TYPE, entityId, LOCAL_MEMBER_NAME);\n\n        testLog.info(\"testOnRegisterCandidateLocal ending\");\n    }", "signature": "void testOnRegisterCandidateLocal()", "full_signature": "@Test public void testOnRegisterCandidateLocal()", "class_method_signature": "EntityOwnershipShardTest.testOnRegisterCandidateLocal()", "testcase": true, "constructor": false, "invocations": ["info", "getSystem", "createTestActor", "newLocalShardProps", "waitUntilLeader", "tell", "getRef", "expectMsgClass", "verifyCommittedEntityCandidate", "verifyOwner", "info"]}, "focal_class": {"identifier": "EntityOwnershipShard", "superclass": "extends Shard", "interfaces": "", "fields": [{"original_string": "private final MemberName localMemberName;", "modifier": "private final", "type": "MemberName", "declarator": "localMemberName", "var_name": "localMemberName"}, {"original_string": "private final EntityOwnershipShardCommitCoordinator commitCoordinator;", "modifier": "private final", "type": "EntityOwnershipShardCommitCoordinator", "declarator": "commitCoordinator", "var_name": "commitCoordinator"}, {"original_string": "private final EntityOwnershipListenerSupport listenerSupport;", "modifier": "private final", "type": "EntityOwnershipListenerSupport", "declarator": "listenerSupport", "var_name": "listenerSupport"}, {"original_string": "private final Set<MemberName> downPeerMemberNames = new HashSet<>();", "modifier": "private final", "type": "Set<MemberName>", "declarator": "downPeerMemberNames = new HashSet<>()", "var_name": "downPeerMemberNames"}, {"original_string": "private final EntityOwnerSelectionStrategyConfig strategyConfig;", "modifier": "private final", "type": "EntityOwnerSelectionStrategyConfig", "declarator": "strategyConfig", "var_name": "strategyConfig"}, {"original_string": "private final Map<YangInstanceIdentifier, Cancellable> entityToScheduledOwnershipTask = new HashMap<>();", "modifier": "private final", "type": "Map<YangInstanceIdentifier, Cancellable>", "declarator": "entityToScheduledOwnershipTask = new HashMap<>()", "var_name": "entityToScheduledOwnershipTask"}, {"original_string": "private final EntityOwnershipStatistics entityOwnershipStatistics;", "modifier": "private final", "type": "EntityOwnershipStatistics", "declarator": "entityOwnershipStatistics", "var_name": "entityOwnershipStatistics"}, {"original_string": "private boolean removeAllInitialCandidates = true;", "modifier": "private", "type": "boolean", "declarator": "removeAllInitialCandidates = true", "var_name": "removeAllInitialCandidates"}], "methods": [{"identifier": "EntityOwnershipShard", "parameters": "(final Builder builder)", "modifiers": "protected", "return": "", "signature": " EntityOwnershipShard(final Builder builder)", "full_signature": "protected  EntityOwnershipShard(final Builder builder)", "class_method_signature": "EntityOwnershipShard.EntityOwnershipShard(final Builder builder)", "testcase": false, "constructor": true}, {"identifier": "noPersistenceDatastoreContext", "parameters": "(final DatastoreContext datastoreContext)", "modifiers": "private static", "return": "DatastoreContext", "signature": "DatastoreContext noPersistenceDatastoreContext(final DatastoreContext datastoreContext)", "full_signature": "private static DatastoreContext noPersistenceDatastoreContext(final DatastoreContext datastoreContext)", "class_method_signature": "EntityOwnershipShard.noPersistenceDatastoreContext(final DatastoreContext datastoreContext)", "testcase": false, "constructor": false}, {"identifier": "onDatastoreContext", "parameters": "(final DatastoreContext context)", "modifiers": "@Override protected", "return": "void", "signature": "void onDatastoreContext(final DatastoreContext context)", "full_signature": "@Override protected void onDatastoreContext(final DatastoreContext context)", "class_method_signature": "EntityOwnershipShard.onDatastoreContext(final DatastoreContext context)", "testcase": false, "constructor": false}, {"identifier": "onRecoveryComplete", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onRecoveryComplete()", "full_signature": "@Override protected void onRecoveryComplete()", "class_method_signature": "EntityOwnershipShard.onRecoveryComplete()", "testcase": false, "constructor": false}, {"identifier": "handleNonRaftCommand", "parameters": "(final Object message)", "modifiers": "@Override public", "return": "void", "signature": "void handleNonRaftCommand(final Object message)", "full_signature": "@Override public void handleNonRaftCommand(final Object message)", "class_method_signature": "EntityOwnershipShard.handleNonRaftCommand(final Object message)", "testcase": false, "constructor": false}, {"identifier": "onRemoveAllCandidates", "parameters": "(final RemoveAllCandidates message)", "modifiers": "private", "return": "void", "signature": "void onRemoveAllCandidates(final RemoveAllCandidates message)", "full_signature": "private void onRemoveAllCandidates(final RemoveAllCandidates message)", "class_method_signature": "EntityOwnershipShard.onRemoveAllCandidates(final RemoveAllCandidates message)", "testcase": false, "constructor": false}, {"identifier": "onSelectOwner", "parameters": "(final SelectOwner selectOwner)", "modifiers": "private", "return": "void", "signature": "void onSelectOwner(final SelectOwner selectOwner)", "full_signature": "private void onSelectOwner(final SelectOwner selectOwner)", "class_method_signature": "EntityOwnershipShard.onSelectOwner(final SelectOwner selectOwner)", "testcase": false, "constructor": false}, {"identifier": "onRegisterCandidateLocal", "parameters": "(final RegisterCandidateLocal registerCandidate)", "modifiers": "private", "return": "void", "signature": "void onRegisterCandidateLocal(final RegisterCandidateLocal registerCandidate)", "full_signature": "private void onRegisterCandidateLocal(final RegisterCandidateLocal registerCandidate)", "class_method_signature": "EntityOwnershipShard.onRegisterCandidateLocal(final RegisterCandidateLocal registerCandidate)", "testcase": false, "constructor": false}, {"identifier": "onUnregisterCandidateLocal", "parameters": "(final UnregisterCandidateLocal unregisterCandidate)", "modifiers": "private", "return": "void", "signature": "void onUnregisterCandidateLocal(final UnregisterCandidateLocal unregisterCandidate)", "full_signature": "private void onUnregisterCandidateLocal(final UnregisterCandidateLocal unregisterCandidate)", "class_method_signature": "EntityOwnershipShard.onUnregisterCandidateLocal(final UnregisterCandidateLocal unregisterCandidate)", "testcase": false, "constructor": false}, {"identifier": "onRegisterListenerLocal", "parameters": "(final RegisterListenerLocal registerListener)", "modifiers": "private", "return": "void", "signature": "void onRegisterListenerLocal(final RegisterListenerLocal registerListener)", "full_signature": "private void onRegisterListenerLocal(final RegisterListenerLocal registerListener)", "class_method_signature": "EntityOwnershipShard.onRegisterListenerLocal(final RegisterListenerLocal registerListener)", "testcase": false, "constructor": false}, {"identifier": "onUnregisterListenerLocal", "parameters": "(final UnregisterListenerLocal unregisterListener)", "modifiers": "private", "return": "void", "signature": "void onUnregisterListenerLocal(final UnregisterListenerLocal unregisterListener)", "full_signature": "private void onUnregisterListenerLocal(final UnregisterListenerLocal unregisterListener)", "class_method_signature": "EntityOwnershipShard.onUnregisterListenerLocal(final UnregisterListenerLocal unregisterListener)", "testcase": false, "constructor": false}, {"identifier": "tryCommitModifications", "parameters": "(final BatchedModifications modifications)", "modifiers": "", "return": "void", "signature": "void tryCommitModifications(final BatchedModifications modifications)", "full_signature": " void tryCommitModifications(final BatchedModifications modifications)", "class_method_signature": "EntityOwnershipShard.tryCommitModifications(final BatchedModifications modifications)", "testcase": false, "constructor": false}, {"identifier": "possiblyRemoveAllInitialCandidates", "parameters": "(final ActorSelection leader)", "modifiers": "", "return": "void", "signature": "void possiblyRemoveAllInitialCandidates(final ActorSelection leader)", "full_signature": " void possiblyRemoveAllInitialCandidates(final ActorSelection leader)", "class_method_signature": "EntityOwnershipShard.possiblyRemoveAllInitialCandidates(final ActorSelection leader)", "testcase": false, "constructor": false}, {"identifier": "hasLeader", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean hasLeader()", "full_signature": " boolean hasLeader()", "class_method_signature": "EntityOwnershipShard.hasLeader()", "testcase": false, "constructor": false}, {"identifier": "inJeopardy", "parameters": "(final RaftState state)", "modifiers": "private static", "return": "boolean", "signature": "boolean inJeopardy(final RaftState state)", "full_signature": "private static boolean inJeopardy(final RaftState state)", "class_method_signature": "EntityOwnershipShard.inJeopardy(final RaftState state)", "testcase": false, "constructor": false}, {"identifier": "notifyAllListeners", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void notifyAllListeners()", "full_signature": "private void notifyAllListeners()", "class_method_signature": "EntityOwnershipShard.notifyAllListeners()", "testcase": false, "constructor": false}, {"identifier": "onStateChanged", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onStateChanged()", "full_signature": "@Override protected void onStateChanged()", "class_method_signature": "EntityOwnershipShard.onStateChanged()", "testcase": false, "constructor": false}, {"identifier": "onLeaderChanged", "parameters": "(final String oldLeader, final String newLeader)", "modifiers": "@Override protected", "return": "void", "signature": "void onLeaderChanged(final String oldLeader, final String newLeader)", "full_signature": "@Override protected void onLeaderChanged(final String oldLeader, final String newLeader)", "class_method_signature": "EntityOwnershipShard.onLeaderChanged(final String oldLeader, final String newLeader)", "testcase": false, "constructor": false}, {"identifier": "onVotingStateChangeComplete", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onVotingStateChangeComplete()", "full_signature": "@Override protected void onVotingStateChangeComplete()", "class_method_signature": "EntityOwnershipShard.onVotingStateChangeComplete()", "testcase": false, "constructor": false}, {"identifier": "initializeDownPeerMemberNamesFromClusterState", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeDownPeerMemberNamesFromClusterState()", "full_signature": "private void initializeDownPeerMemberNamesFromClusterState()", "class_method_signature": "EntityOwnershipShard.initializeDownPeerMemberNamesFromClusterState()", "testcase": false, "constructor": false}, {"identifier": "onCandidateRemoved", "parameters": "(final CandidateRemoved message)", "modifiers": "private", "return": "void", "signature": "void onCandidateRemoved(final CandidateRemoved message)", "full_signature": "private void onCandidateRemoved(final CandidateRemoved message)", "class_method_signature": "EntityOwnershipShard.onCandidateRemoved(final CandidateRemoved message)", "testcase": false, "constructor": false}, {"identifier": "getEntityOwnerElectionStrategy", "parameters": "(final YangInstanceIdentifier entityPath)", "modifiers": "private", "return": "EntityOwnerSelectionStrategy", "signature": "EntityOwnerSelectionStrategy getEntityOwnerElectionStrategy(final YangInstanceIdentifier entityPath)", "full_signature": "private EntityOwnerSelectionStrategy getEntityOwnerElectionStrategy(final YangInstanceIdentifier entityPath)", "class_method_signature": "EntityOwnershipShard.getEntityOwnerElectionStrategy(final YangInstanceIdentifier entityPath)", "testcase": false, "constructor": false}, {"identifier": "onCandidateAdded", "parameters": "(final CandidateAdded message)", "modifiers": "private", "return": "void", "signature": "void onCandidateAdded(final CandidateAdded message)", "full_signature": "private void onCandidateAdded(final CandidateAdded message)", "class_method_signature": "EntityOwnershipShard.onCandidateAdded(final CandidateAdded message)", "testcase": false, "constructor": false}, {"identifier": "onPeerDown", "parameters": "(final PeerDown peerDown)", "modifiers": "private", "return": "void", "signature": "void onPeerDown(final PeerDown peerDown)", "full_signature": "private void onPeerDown(final PeerDown peerDown)", "class_method_signature": "EntityOwnershipShard.onPeerDown(final PeerDown peerDown)", "testcase": false, "constructor": false}, {"identifier": "selectNewOwnerForEntitiesOwnedBy", "parameters": "(final Set<String> ownedBy)", "modifiers": "private", "return": "void", "signature": "void selectNewOwnerForEntitiesOwnedBy(final Set<String> ownedBy)", "full_signature": "private void selectNewOwnerForEntitiesOwnedBy(final Set<String> ownedBy)", "class_method_signature": "EntityOwnershipShard.selectNewOwnerForEntitiesOwnedBy(final Set<String> ownedBy)", "testcase": false, "constructor": false}, {"identifier": "onPeerUp", "parameters": "(final PeerUp peerUp)", "modifiers": "private", "return": "void", "signature": "void onPeerUp(final PeerUp peerUp)", "full_signature": "private void onPeerUp(final PeerUp peerUp)", "class_method_signature": "EntityOwnershipShard.onPeerUp(final PeerUp peerUp)", "testcase": false, "constructor": false}, {"identifier": "getCandidateNames", "parameters": "(final MapEntryNode entity)", "modifiers": "private static", "return": "Collection<String>", "signature": "Collection<String> getCandidateNames(final MapEntryNode entity)", "full_signature": "private static Collection<String> getCandidateNames(final MapEntryNode entity)", "class_method_signature": "EntityOwnershipShard.getCandidateNames(final MapEntryNode entity)", "testcase": false, "constructor": false}, {"identifier": "searchForEntitiesOwnedBy", "parameters": "(final Set<String> ownedBy, final EntityWalker walker)", "modifiers": "private", "return": "void", "signature": "void searchForEntitiesOwnedBy(final Set<String> ownedBy, final EntityWalker walker)", "full_signature": "private void searchForEntitiesOwnedBy(final Set<String> ownedBy, final EntityWalker walker)", "class_method_signature": "EntityOwnershipShard.searchForEntitiesOwnedBy(final Set<String> ownedBy, final EntityWalker walker)", "testcase": false, "constructor": false}, {"identifier": "removeCandidateFromEntities", "parameters": "(final MemberName member)", "modifiers": "private", "return": "void", "signature": "void removeCandidateFromEntities(final MemberName member)", "full_signature": "private void removeCandidateFromEntities(final MemberName member)", "class_method_signature": "EntityOwnershipShard.removeCandidateFromEntities(final MemberName member)", "testcase": false, "constructor": false}, {"identifier": "hasCandidate", "parameters": "(final MapEntryNode entity, final MemberName candidateName)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasCandidate(final MapEntryNode entity, final MemberName candidateName)", "full_signature": "private static boolean hasCandidate(final MapEntryNode entity, final MemberName candidateName)", "class_method_signature": "EntityOwnershipShard.hasCandidate(final MapEntryNode entity, final MemberName candidateName)", "testcase": false, "constructor": false}, {"identifier": "searchForEntities", "parameters": "(final EntityWalker walker)", "modifiers": "private", "return": "void", "signature": "void searchForEntities(final EntityWalker walker)", "full_signature": "private void searchForEntities(final EntityWalker walker)", "class_method_signature": "EntityOwnershipShard.searchForEntities(final EntityWalker walker)", "testcase": false, "constructor": false}, {"identifier": "writeNewOwner", "parameters": "(final YangInstanceIdentifier entityPath, final String newOwner)", "modifiers": "private", "return": "void", "signature": "void writeNewOwner(final YangInstanceIdentifier entityPath, final String newOwner)", "full_signature": "private void writeNewOwner(final YangInstanceIdentifier entityPath, final String newOwner)", "class_method_signature": "EntityOwnershipShard.writeNewOwner(final YangInstanceIdentifier entityPath, final String newOwner)", "testcase": false, "constructor": false}, {"identifier": "scheduleOwnerSelection", "parameters": "(final YangInstanceIdentifier entityPath, final Collection<String> allCandidates,\n                                       final EntityOwnerSelectionStrategy strategy)", "modifiers": "private", "return": "void", "signature": "void scheduleOwnerSelection(final YangInstanceIdentifier entityPath, final Collection<String> allCandidates,\n                                       final EntityOwnerSelectionStrategy strategy)", "full_signature": "private void scheduleOwnerSelection(final YangInstanceIdentifier entityPath, final Collection<String> allCandidates,\n                                       final EntityOwnerSelectionStrategy strategy)", "class_method_signature": "EntityOwnershipShard.scheduleOwnerSelection(final YangInstanceIdentifier entityPath, final Collection<String> allCandidates,\n                                       final EntityOwnerSelectionStrategy strategy)", "testcase": false, "constructor": false}, {"identifier": "cancelOwnerSelectionTask", "parameters": "(final YangInstanceIdentifier entityPath)", "modifiers": "private", "return": "void", "signature": "void cancelOwnerSelectionTask(final YangInstanceIdentifier entityPath)", "full_signature": "private void cancelOwnerSelectionTask(final YangInstanceIdentifier entityPath)", "class_method_signature": "EntityOwnershipShard.cancelOwnerSelectionTask(final YangInstanceIdentifier entityPath)", "testcase": false, "constructor": false}, {"identifier": "newOwner", "parameters": "(final String currentOwner, final Collection<String> candidates,\n            final EntityOwnerSelectionStrategy ownerSelectionStrategy)", "modifiers": "private", "return": "String", "signature": "String newOwner(final String currentOwner, final Collection<String> candidates,\n            final EntityOwnerSelectionStrategy ownerSelectionStrategy)", "full_signature": "private String newOwner(final String currentOwner, final Collection<String> candidates,\n            final EntityOwnerSelectionStrategy ownerSelectionStrategy)", "class_method_signature": "EntityOwnershipShard.newOwner(final String currentOwner, final Collection<String> candidates,\n            final EntityOwnerSelectionStrategy ownerSelectionStrategy)", "testcase": false, "constructor": false}, {"identifier": "getViableCandidates", "parameters": "(final Collection<String> candidates)", "modifiers": "private", "return": "Collection<String>", "signature": "Collection<String> getViableCandidates(final Collection<String> candidates)", "full_signature": "private Collection<String> getViableCandidates(final Collection<String> candidates)", "class_method_signature": "EntityOwnershipShard.getViableCandidates(final Collection<String> candidates)", "testcase": false, "constructor": false}, {"identifier": "getCurrentOwner", "parameters": "(final YangInstanceIdentifier entityId)", "modifiers": "private", "return": "String", "signature": "String getCurrentOwner(final YangInstanceIdentifier entityId)", "full_signature": "private String getCurrentOwner(final YangInstanceIdentifier entityId)", "class_method_signature": "EntityOwnershipShard.getCurrentOwner(final YangInstanceIdentifier entityId)", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder()", "full_signature": "public static Builder newBuilder()", "class_method_signature": "EntityOwnershipShard.newBuilder()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-eos/src/main/java/org/opendaylight/controller/cluster/entityownership/EntityOwnershipShard.java"}, "focal_method": {"identifier": "onRegisterCandidateLocal", "parameters": "(final RegisterCandidateLocal registerCandidate)", "modifiers": "private", "return": "void", "body": "private void onRegisterCandidateLocal(final RegisterCandidateLocal registerCandidate) {\n        LOG.debug(\"{}: onRegisterCandidateLocal: {}\", persistenceId(), registerCandidate);\n\n        NormalizedNode<?, ?> entityOwners = entityOwnersWithCandidate(registerCandidate.getEntity().getType(),\n                registerCandidate.getEntity().getIdentifier(), localMemberName.getName());\n        commitCoordinator.commitModification(new MergeModification(ENTITY_OWNERS_PATH, entityOwners), this);\n\n        getSender().tell(SuccessReply.INSTANCE, getSelf());\n    }", "signature": "void onRegisterCandidateLocal(final RegisterCandidateLocal registerCandidate)", "full_signature": "private void onRegisterCandidateLocal(final RegisterCandidateLocal registerCandidate)", "class_method_signature": "EntityOwnershipShard.onRegisterCandidateLocal(final RegisterCandidateLocal registerCandidate)", "testcase": false, "constructor": false, "invocations": ["debug", "persistenceId", "entityOwnersWithCandidate", "getType", "getEntity", "getIdentifier", "getEntity", "getName", "commitModification", "tell", "getSender", "getSelf"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}