{"test_class": {"identifier": "ClosableBlockingQueueTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-streaming-connectors/flink-connector-kafka-0.8/src/test/java/org/apache/flink/streaming/connectors/kafka/internals/ClosableBlockingQueueTest.java"}, "test_case": {"identifier": "testPollBatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPollBatch() {\n\t\ttry {\n\t\t\tClosableBlockingQueue<String> queue = new ClosableBlockingQueue<>();\n\n\t\t\tassertNull(queue.pollBatch());\n\t\t\t\n\t\t\tqueue.add(\"a\");\n\t\t\tqueue.add(\"b\");\n\t\t\t\n\t\t\tassertEquals(asList(\"a\", \"b\"), queue.pollBatch());\n\t\t\tassertNull(queue.pollBatch());\n\t\t\t\n\t\t\tqueue.add(\"c\");\n\n\t\t\tassertEquals(singletonList(\"c\"), queue.pollBatch());\n\t\t\tassertNull(queue.pollBatch());\n\n\t\t\tassertTrue(queue.close());\n\n\t\t\ttry {\n\t\t\t\tqueue.pollBatch();\n\t\t\t\tfail(\"should cause an exception\");\n\t\t\t} catch (IllegalStateException ignored) {\n\t\t\t\t// expected\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "signature": "void testPollBatch()", "full_signature": "@Test public void testPollBatch()", "class_method_signature": "ClosableBlockingQueueTest.testPollBatch()", "testcase": true, "constructor": false, "invocations": ["assertNull", "pollBatch", "add", "add", "assertEquals", "asList", "pollBatch", "assertNull", "pollBatch", "add", "assertEquals", "singletonList", "pollBatch", "assertNull", "pollBatch", "assertTrue", "close", "pollBatch", "fail", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "ClosableBlockingQueue", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ReentrantLock lock;", "modifier": "private final", "type": "ReentrantLock", "declarator": "lock", "var_name": "lock"}, {"original_string": "private final Condition nonEmpty;", "modifier": "private final", "type": "Condition", "declarator": "nonEmpty", "var_name": "nonEmpty"}, {"original_string": "private final ArrayDeque<E> elements;", "modifier": "private final", "type": "ArrayDeque<E>", "declarator": "elements", "var_name": "elements"}, {"original_string": "private volatile boolean open;", "modifier": "private volatile", "type": "boolean", "declarator": "open", "var_name": "open"}], "methods": [{"identifier": "ClosableBlockingQueue", "parameters": "()", "modifiers": "public", "return": "", "signature": " ClosableBlockingQueue()", "full_signature": "public  ClosableBlockingQueue()", "class_method_signature": "ClosableBlockingQueue.ClosableBlockingQueue()", "testcase": false, "constructor": true}, {"identifier": "ClosableBlockingQueue", "parameters": "(int initialSize)", "modifiers": "public", "return": "", "signature": " ClosableBlockingQueue(int initialSize)", "full_signature": "public  ClosableBlockingQueue(int initialSize)", "class_method_signature": "ClosableBlockingQueue.ClosableBlockingQueue(int initialSize)", "testcase": false, "constructor": true}, {"identifier": "ClosableBlockingQueue", "parameters": "(Collection<? extends E> initialElements)", "modifiers": "public", "return": "", "signature": " ClosableBlockingQueue(Collection<? extends E> initialElements)", "full_signature": "public  ClosableBlockingQueue(Collection<? extends E> initialElements)", "class_method_signature": "ClosableBlockingQueue.ClosableBlockingQueue(Collection<? extends E> initialElements)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "ClosableBlockingQueue.size()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "ClosableBlockingQueue.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "isOpen", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOpen()", "full_signature": "public boolean isOpen()", "class_method_signature": "ClosableBlockingQueue.isOpen()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean close()", "full_signature": "public boolean close()", "class_method_signature": "ClosableBlockingQueue.close()", "testcase": false, "constructor": false}, {"identifier": "addIfOpen", "parameters": "(E element)", "modifiers": "public", "return": "boolean", "signature": "boolean addIfOpen(E element)", "full_signature": "public boolean addIfOpen(E element)", "class_method_signature": "ClosableBlockingQueue.addIfOpen(E element)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(E element)", "modifiers": "public", "return": "void", "signature": "void add(E element)", "full_signature": "public void add(E element)", "class_method_signature": "ClosableBlockingQueue.add(E element)", "testcase": false, "constructor": false}, {"identifier": "peek", "parameters": "()", "modifiers": "public", "return": "E", "signature": "E peek()", "full_signature": "public E peek()", "class_method_signature": "ClosableBlockingQueue.peek()", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "()", "modifiers": "public", "return": "E", "signature": "E poll()", "full_signature": "public E poll()", "class_method_signature": "ClosableBlockingQueue.poll()", "testcase": false, "constructor": false}, {"identifier": "pollBatch", "parameters": "()", "modifiers": "public", "return": "List<E>", "signature": "List<E> pollBatch()", "full_signature": "public List<E> pollBatch()", "class_method_signature": "ClosableBlockingQueue.pollBatch()", "testcase": false, "constructor": false}, {"identifier": "getElementBlocking", "parameters": "()", "modifiers": "public", "return": "E", "signature": "E getElementBlocking()", "full_signature": "public E getElementBlocking()", "class_method_signature": "ClosableBlockingQueue.getElementBlocking()", "testcase": false, "constructor": false}, {"identifier": "getElementBlocking", "parameters": "(long timeoutMillis)", "modifiers": "public", "return": "E", "signature": "E getElementBlocking(long timeoutMillis)", "full_signature": "public E getElementBlocking(long timeoutMillis)", "class_method_signature": "ClosableBlockingQueue.getElementBlocking(long timeoutMillis)", "testcase": false, "constructor": false}, {"identifier": "getBatchBlocking", "parameters": "()", "modifiers": "public", "return": "List<E>", "signature": "List<E> getBatchBlocking()", "full_signature": "public List<E> getBatchBlocking()", "class_method_signature": "ClosableBlockingQueue.getBatchBlocking()", "testcase": false, "constructor": false}, {"identifier": "getBatchBlocking", "parameters": "(long timeoutMillis)", "modifiers": "public", "return": "List<E>", "signature": "List<E> getBatchBlocking(long timeoutMillis)", "full_signature": "public List<E> getBatchBlocking(long timeoutMillis)", "class_method_signature": "ClosableBlockingQueue.getBatchBlocking(long timeoutMillis)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ClosableBlockingQueue.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ClosableBlockingQueue.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ClosableBlockingQueue.toString()", "testcase": false, "constructor": false}], "file": "flink-streaming-connectors/flink-connector-kafka-0.8/src/main/java/org/apache/flink/streaming/connectors/kafka/internals/ClosableBlockingQueue.java"}, "focal_method": {"identifier": "pollBatch", "parameters": "()", "modifiers": "public", "return": "List<E>", "body": "public List<E> pollBatch() {\n\t\tlock.lock();\n\t\ttry {\n\t\t\tif (open) {\n\t\t\t\tif (elements.size() > 0) {\n\t\t\t\t\tArrayList<E> result = new ArrayList<>(elements);\n\t\t\t\t\telements.clear();\n\t\t\t\t\treturn result;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new IllegalStateException(\"queue is closed\");\n\t\t\t}\n\t\t} finally {\n\t\t\tlock.unlock();\n\t\t}\n\t}", "signature": "List<E> pollBatch()", "full_signature": "public List<E> pollBatch()", "class_method_signature": "ClosableBlockingQueue.pollBatch()", "testcase": false, "constructor": false, "invocations": ["lock", "size", "clear", "unlock"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}