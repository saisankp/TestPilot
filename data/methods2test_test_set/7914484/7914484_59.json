{"test_class": {"identifier": "WebServiceMessageReceiverObjectSupportTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WebServiceMessageReceiverObjectSupport receiverSupport;", "modifier": "private", "type": "WebServiceMessageReceiverObjectSupport", "declarator": "receiverSupport", "var_name": "receiverSupport"}, {"original_string": "private FaultAwareWebServiceConnection connectionMock;", "modifier": "private", "type": "FaultAwareWebServiceConnection", "declarator": "connectionMock", "var_name": "connectionMock"}, {"original_string": "private MockWebServiceMessageFactory messageFactory;", "modifier": "private", "type": "MockWebServiceMessageFactory", "declarator": "messageFactory", "var_name": "messageFactory"}, {"original_string": "private MockWebServiceMessage request;", "modifier": "private", "type": "MockWebServiceMessage", "declarator": "request", "var_name": "request"}], "file": "spring-ws-core/src/test/java/org/springframework/ws/transport/support/WebServiceMessageReceiverObjectSupportTest.java"}, "test_case": {"identifier": "handleConnectionNoResponse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void handleConnectionNoResponse() throws Exception {\n\n\t\texpect(connectionMock.receive(messageFactory)).andReturn(request);\n\t\tconnectionMock.close();\n\n\t\treplay(connectionMock);\n\n\t\tWebServiceMessageReceiver receiver = new WebServiceMessageReceiver() {\n\n\t\t\tpublic void receive(MessageContext messageContext) throws Exception {\n\t\t\t\tAssert.assertNotNull(\"No message context\", messageContext);\n\t\t\t}\n\t\t};\n\n\t\treceiverSupport.handleConnection(connectionMock, receiver);\n\n\t\tverify(connectionMock);\n\t}", "signature": "void handleConnectionNoResponse()", "full_signature": "@Test public void handleConnectionNoResponse()", "class_method_signature": "WebServiceMessageReceiverObjectSupportTest.handleConnectionNoResponse()", "testcase": true, "constructor": false, "invocations": ["andReturn", "expect", "receive", "close", "replay", "assertNotNull", "handleConnection", "verify"]}, "focal_class": {"identifier": "WebServiceMessageReceiverObjectSupport", "superclass": "", "interfaces": "implements InitializingBean", "fields": [{"original_string": "protected final Log logger = LogFactory.getLog(getClass());", "modifier": "protected final", "type": "Log", "declarator": "logger = LogFactory.getLog(getClass())", "var_name": "logger"}, {"original_string": "private WebServiceMessageFactory messageFactory;", "modifier": "private", "type": "WebServiceMessageFactory", "declarator": "messageFactory", "var_name": "messageFactory"}], "methods": [{"identifier": "getMessageFactory", "parameters": "()", "modifiers": "public", "return": "WebServiceMessageFactory", "signature": "WebServiceMessageFactory getMessageFactory()", "full_signature": "public WebServiceMessageFactory getMessageFactory()", "class_method_signature": "WebServiceMessageReceiverObjectSupport.getMessageFactory()", "testcase": false, "constructor": false}, {"identifier": "setMessageFactory", "parameters": "(WebServiceMessageFactory messageFactory)", "modifiers": "public", "return": "void", "signature": "void setMessageFactory(WebServiceMessageFactory messageFactory)", "full_signature": "public void setMessageFactory(WebServiceMessageFactory messageFactory)", "class_method_signature": "WebServiceMessageReceiverObjectSupport.setMessageFactory(WebServiceMessageFactory messageFactory)", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "WebServiceMessageReceiverObjectSupport.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "handleConnection", "parameters": "(WebServiceConnection connection, WebServiceMessageReceiver receiver)", "modifiers": "protected final", "return": "void", "signature": "void handleConnection(WebServiceConnection connection, WebServiceMessageReceiver receiver)", "full_signature": "protected final void handleConnection(WebServiceConnection connection, WebServiceMessageReceiver receiver)", "class_method_signature": "WebServiceMessageReceiverObjectSupport.handleConnection(WebServiceConnection connection, WebServiceMessageReceiver receiver)", "testcase": false, "constructor": false}, {"identifier": "handleNoEndpointFoundException", "parameters": "(NoEndpointFoundException ex, WebServiceConnection connection,\n\t\t\tWebServiceMessageReceiver receiver)", "modifiers": "protected", "return": "void", "signature": "void handleNoEndpointFoundException(NoEndpointFoundException ex, WebServiceConnection connection,\n\t\t\tWebServiceMessageReceiver receiver)", "full_signature": "protected void handleNoEndpointFoundException(NoEndpointFoundException ex, WebServiceConnection connection,\n\t\t\tWebServiceMessageReceiver receiver)", "class_method_signature": "WebServiceMessageReceiverObjectSupport.handleNoEndpointFoundException(NoEndpointFoundException ex, WebServiceConnection connection,\n\t\t\tWebServiceMessageReceiver receiver)", "testcase": false, "constructor": false}, {"identifier": "logUri", "parameters": "(WebServiceConnection connection)", "modifiers": "private", "return": "void", "signature": "void logUri(WebServiceConnection connection)", "full_signature": "private void logUri(WebServiceConnection connection)", "class_method_signature": "WebServiceMessageReceiverObjectSupport.logUri(WebServiceConnection connection)", "testcase": false, "constructor": false}], "file": "spring-ws-core/src/main/java/org/springframework/ws/transport/support/WebServiceMessageReceiverObjectSupport.java"}, "focal_method": {"identifier": "handleConnection", "parameters": "(WebServiceConnection connection, WebServiceMessageReceiver receiver)", "modifiers": "protected final", "return": "void", "body": "protected final void handleConnection(WebServiceConnection connection, WebServiceMessageReceiver receiver)\n\t\t\tthrows Exception {\n\t\tlogUri(connection);\n\t\tTransportContext previousTransportContext = TransportContextHolder.getTransportContext();\n\t\tTransportContextHolder.setTransportContext(new DefaultTransportContext(connection));\n\n\t\ttry {\n\t\t\tWebServiceMessage request = connection.receive(getMessageFactory());\n\t\t\tMessageContext messageContext = new DefaultMessageContext(request, getMessageFactory());\n\t\t\treceiver.receive(messageContext);\n\t\t\tif (messageContext.hasResponse()) {\n\t\t\t\tWebServiceMessage response = messageContext.getResponse();\n\t\t\t\tif (response instanceof FaultAwareWebServiceMessage && connection instanceof FaultAwareWebServiceConnection) {\n\t\t\t\t\tFaultAwareWebServiceMessage faultResponse = (FaultAwareWebServiceMessage) response;\n\t\t\t\t\tFaultAwareWebServiceConnection faultConnection = (FaultAwareWebServiceConnection) connection;\n\t\t\t\t\tfaultConnection.setFaultCode(faultResponse.getFaultCode());\n\t\t\t\t}\n\t\t\t\tconnection.send(messageContext.getResponse());\n\t\t\t}\n\t\t} catch (NoEndpointFoundException ex) {\n\t\t\thandleNoEndpointFoundException(ex, connection, receiver);\n\t\t} finally {\n\t\t\tTransportUtils.closeConnection(connection);\n\t\t\tTransportContextHolder.setTransportContext(previousTransportContext);\n\t\t}\n\t}", "signature": "void handleConnection(WebServiceConnection connection, WebServiceMessageReceiver receiver)", "full_signature": "protected final void handleConnection(WebServiceConnection connection, WebServiceMessageReceiver receiver)", "class_method_signature": "WebServiceMessageReceiverObjectSupport.handleConnection(WebServiceConnection connection, WebServiceMessageReceiver receiver)", "testcase": false, "constructor": false, "invocations": ["logUri", "getTransportContext", "setTransportContext", "receive", "getMessageFactory", "getMessageFactory", "receive", "hasResponse", "getResponse", "setFaultCode", "getFaultCode", "send", "getResponse", "handleNoEndpointFoundException", "closeConnection", "setTransportContext"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}