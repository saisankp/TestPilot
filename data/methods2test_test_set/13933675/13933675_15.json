{"test_class": {"identifier": "PhysicalDataValueEqTest", "superclass": "", "interfaces": "", "fields": [], "file": "vars-core/src/test/java/vars/annotation/PhysicalDataValueEqTest.java"}, "test_case": {"identifier": "toleranceTest3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toleranceTest3() {\n        IValueEq<PhysicalData> eq = new PhysicalDataValueEq(0.001);\n        PhysicalData a = new ImmutablePhysicalData(null, 10F, 10F, 10D, 10F, null, 10D, 10F, 10F, 10F);\n        PhysicalData b = new ImmutablePhysicalData(null, 10F, 10F, 10.002, 10F, null, 10D, 10F, 10F, 10F);\n        assertFalse(eq.equal(a, b));\n    }", "signature": "void toleranceTest3()", "full_signature": "@Test public void toleranceTest3()", "class_method_signature": "PhysicalDataValueEqTest.toleranceTest3()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "equal"]}, "focal_class": {"identifier": "PhysicalDataValueEq", "superclass": "", "interfaces": "implements IValueEq<PhysicalData>", "fields": [{"original_string": "private final double eps;", "modifier": "private final", "type": "double", "declarator": "eps", "var_name": "eps"}], "methods": [{"identifier": "PhysicalDataValueEq", "parameters": "(double eps)", "modifiers": "public", "return": "", "signature": " PhysicalDataValueEq(double eps)", "full_signature": "public  PhysicalDataValueEq(double eps)", "class_method_signature": "PhysicalDataValueEq.PhysicalDataValueEq(double eps)", "testcase": false, "constructor": true}, {"identifier": "PhysicalDataValueEq", "parameters": "()", "modifiers": "public", "return": "", "signature": " PhysicalDataValueEq()", "full_signature": "public  PhysicalDataValueEq()", "class_method_signature": "PhysicalDataValueEq.PhysicalDataValueEq()", "testcase": false, "constructor": true}, {"identifier": "equal", "parameters": "(PhysicalData a, PhysicalData b)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equal(PhysicalData a, PhysicalData b)", "full_signature": "@Override public boolean equal(PhysicalData a, PhysicalData b)", "class_method_signature": "PhysicalDataValueEq.equal(PhysicalData a, PhysicalData b)", "testcase": false, "constructor": false}, {"identifier": "same", "parameters": "(Number a, Number b)", "modifiers": "private", "return": "boolean", "signature": "boolean same(Number a, Number b)", "full_signature": "private boolean same(Number a, Number b)", "class_method_signature": "PhysicalDataValueEq.same(Number a, Number b)", "testcase": false, "constructor": false}], "file": "vars-core/src/main/java/vars/annotation/PhysicalDataValueEq.java"}, "focal_method": {"identifier": "equal", "parameters": "(PhysicalData a, PhysicalData b)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equal(PhysicalData a, PhysicalData b) {\n        return same(a.getAltitude(), b.getAltitude())\n                && same(a.getDepth(), b.getDepth())\n                && same(a.getLatitude(), b.getLatitude())\n                && same(a.getLight(), b.getLight())\n                && same(a.getLongitude(), b.getLongitude())\n                && same (a.getOxygen(), b.getOxygen())\n                && same(a.getSalinity(), b.getSalinity())\n                && same(a.getTemperature(), b.getTemperature());\n    }", "signature": "boolean equal(PhysicalData a, PhysicalData b)", "full_signature": "@Override public boolean equal(PhysicalData a, PhysicalData b)", "class_method_signature": "PhysicalDataValueEq.equal(PhysicalData a, PhysicalData b)", "testcase": false, "constructor": false, "invocations": ["same", "getAltitude", "getAltitude", "same", "getDepth", "getDepth", "same", "getLatitude", "getLatitude", "same", "getLight", "getLight", "same", "getLongitude", "getLongitude", "same", "getOxygen", "getOxygen", "same", "getSalinity", "getSalinity", "same", "getTemperature", "getTemperature"]}, "repository": {"repo_id": 13933675, "url": "https://github.com/hohonuuli/vars", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 18273, "license": "licensed"}}