{"test_class": {"identifier": "NumericFunctionsTest", "superclass": "", "interfaces": "", "fields": [], "file": "hydrograph.engine/hydrograph.engine.transformation/src/test/java/hydrograph/engine/transformation/standardfunctions/NumericFunctionsTest.java"}, "test_case": {"identifier": "itShouldValidateToInteger", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void itShouldValidateToInteger() {\n        Integer integer = new Integer(23);\n\n        Assert.assertEquals(integer, NumericFunctions.toInteger(\"23\"));\n    }", "signature": "void itShouldValidateToInteger()", "full_signature": "@Test public void itShouldValidateToInteger()", "class_method_signature": "NumericFunctionsTest.itShouldValidateToInteger()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toInteger"]}, "focal_class": {"identifier": "NumericFunctions", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "decimalStrip", "parameters": "(T inputValue)", "modifiers": "@SuppressWarnings(\"unchecked\") @Deprecated public static", "return": "T", "signature": "T decimalStrip(T inputValue)", "full_signature": "@SuppressWarnings(\"unchecked\") @Deprecated public static T decimalStrip(T inputValue)", "class_method_signature": "NumericFunctions.decimalStrip(T inputValue)", "testcase": false, "constructor": false}, {"identifier": "decimalStrip", "parameters": "(String inputValue)", "modifiers": "public static", "return": "String", "signature": "String decimalStrip(String inputValue)", "full_signature": "public static String decimalStrip(String inputValue)", "class_method_signature": "NumericFunctions.decimalStrip(String inputValue)", "testcase": false, "constructor": false}, {"identifier": "decimalStrip", "parameters": "(T inputValue, T decimal_point)", "modifiers": "@SuppressWarnings(\"unchecked\") @Deprecated public static", "return": "T", "signature": "T decimalStrip(T inputValue, T decimal_point)", "full_signature": "@SuppressWarnings(\"unchecked\") @Deprecated public static T decimalStrip(T inputValue, T decimal_point)", "class_method_signature": "NumericFunctions.decimalStrip(T inputValue, T decimal_point)", "testcase": false, "constructor": false}, {"identifier": "decimalStrip", "parameters": "(String inputValue, String decimal_point)", "modifiers": "public static", "return": "String", "signature": "String decimalStrip(String inputValue, String decimal_point)", "full_signature": "public static String decimalStrip(String inputValue, String decimal_point)", "class_method_signature": "NumericFunctions.decimalStrip(String inputValue, String decimal_point)", "testcase": false, "constructor": false}, {"identifier": "mathAbs", "parameters": "(T inputValue)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T mathAbs(T inputValue)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T mathAbs(T inputValue)", "class_method_signature": "NumericFunctions.mathAbs(T inputValue)", "testcase": false, "constructor": false}, {"identifier": "random", "parameters": "(T n)", "modifiers": "public static", "return": "Integer", "signature": "Integer random(T n)", "full_signature": "public static Integer random(T n)", "class_method_signature": "NumericFunctions.random(T n)", "testcase": false, "constructor": false}, {"identifier": "getDoubleFromComparable", "parameters": "(T inputValue)", "modifiers": "public static", "return": "Double", "signature": "Double getDoubleFromComparable(T inputValue)", "full_signature": "public static Double getDoubleFromComparable(T inputValue)", "class_method_signature": "NumericFunctions.getDoubleFromComparable(T inputValue)", "testcase": false, "constructor": false}, {"identifier": "toDouble", "parameters": "(Float inputValue)", "modifiers": "public static", "return": "Double", "signature": "Double toDouble(Float inputValue)", "full_signature": "public static Double toDouble(Float inputValue)", "class_method_signature": "NumericFunctions.toDouble(Float inputValue)", "testcase": false, "constructor": false}, {"identifier": "toDouble", "parameters": "(Integer inputValue)", "modifiers": "public static", "return": "Double", "signature": "Double toDouble(Integer inputValue)", "full_signature": "public static Double toDouble(Integer inputValue)", "class_method_signature": "NumericFunctions.toDouble(Integer inputValue)", "testcase": false, "constructor": false}, {"identifier": "toDouble", "parameters": "(String inputValue)", "modifiers": "public static", "return": "Double", "signature": "Double toDouble(String inputValue)", "full_signature": "public static Double toDouble(String inputValue)", "class_method_signature": "NumericFunctions.toDouble(String inputValue)", "testcase": false, "constructor": false}, {"identifier": "toDouble", "parameters": "(Long inputValue)", "modifiers": "public static", "return": "Double", "signature": "Double toDouble(Long inputValue)", "full_signature": "public static Double toDouble(Long inputValue)", "class_method_signature": "NumericFunctions.toDouble(Long inputValue)", "testcase": false, "constructor": false}, {"identifier": "toDouble", "parameters": "(Short inputValue)", "modifiers": "public static", "return": "Double", "signature": "Double toDouble(Short inputValue)", "full_signature": "public static Double toDouble(Short inputValue)", "class_method_signature": "NumericFunctions.toDouble(Short inputValue)", "testcase": false, "constructor": false}, {"identifier": "toDouble", "parameters": "(BigDecimal inputValue)", "modifiers": "public static", "return": "Double", "signature": "Double toDouble(BigDecimal inputValue)", "full_signature": "public static Double toDouble(BigDecimal inputValue)", "class_method_signature": "NumericFunctions.toDouble(BigDecimal inputValue)", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(Float inputValue, int numberOfDigits)", "modifiers": "public static", "return": "Float", "signature": "Float round(Float inputValue, int numberOfDigits)", "full_signature": "public static Float round(Float inputValue, int numberOfDigits)", "class_method_signature": "NumericFunctions.round(Float inputValue, int numberOfDigits)", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(Double inputValue, int numberOfDigits)", "modifiers": "public static", "return": "Double", "signature": "Double round(Double inputValue, int numberOfDigits)", "full_signature": "public static Double round(Double inputValue, int numberOfDigits)", "class_method_signature": "NumericFunctions.round(Double inputValue, int numberOfDigits)", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(BigDecimal inputValue, int numberOfDigits)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal round(BigDecimal inputValue, int numberOfDigits)", "full_signature": "public static BigDecimal round(BigDecimal inputValue, int numberOfDigits)", "class_method_signature": "NumericFunctions.round(BigDecimal inputValue, int numberOfDigits)", "testcase": false, "constructor": false}, {"identifier": "roundUp", "parameters": "(Float inputValue, int numberOfDigits)", "modifiers": "public static", "return": "Float", "signature": "Float roundUp(Float inputValue, int numberOfDigits)", "full_signature": "public static Float roundUp(Float inputValue, int numberOfDigits)", "class_method_signature": "NumericFunctions.roundUp(Float inputValue, int numberOfDigits)", "testcase": false, "constructor": false}, {"identifier": "roundUp", "parameters": "(Double inputValue, int numberOfDigits)", "modifiers": "public static", "return": "Double", "signature": "Double roundUp(Double inputValue, int numberOfDigits)", "full_signature": "public static Double roundUp(Double inputValue, int numberOfDigits)", "class_method_signature": "NumericFunctions.roundUp(Double inputValue, int numberOfDigits)", "testcase": false, "constructor": false}, {"identifier": "roundUp", "parameters": "(BigDecimal inputValue, int numberOfDigits)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal roundUp(BigDecimal inputValue, int numberOfDigits)", "full_signature": "public static BigDecimal roundUp(BigDecimal inputValue, int numberOfDigits)", "class_method_signature": "NumericFunctions.roundUp(BigDecimal inputValue, int numberOfDigits)", "testcase": false, "constructor": false}, {"identifier": "roundDown", "parameters": "(Float inputValue, int numberOfDigits)", "modifiers": "public static", "return": "Float", "signature": "Float roundDown(Float inputValue, int numberOfDigits)", "full_signature": "public static Float roundDown(Float inputValue, int numberOfDigits)", "class_method_signature": "NumericFunctions.roundDown(Float inputValue, int numberOfDigits)", "testcase": false, "constructor": false}, {"identifier": "roundDown", "parameters": "(Double inputValue, int numberOfDigits)", "modifiers": "public static", "return": "Double", "signature": "Double roundDown(Double inputValue, int numberOfDigits)", "full_signature": "public static Double roundDown(Double inputValue, int numberOfDigits)", "class_method_signature": "NumericFunctions.roundDown(Double inputValue, int numberOfDigits)", "testcase": false, "constructor": false}, {"identifier": "roundDown", "parameters": "(BigDecimal inputValue, int numberOfDigits)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal roundDown(BigDecimal inputValue, int numberOfDigits)", "full_signature": "public static BigDecimal roundDown(BigDecimal inputValue, int numberOfDigits)", "class_method_signature": "NumericFunctions.roundDown(BigDecimal inputValue, int numberOfDigits)", "testcase": false, "constructor": false}, {"identifier": "truncate", "parameters": "(Float inputValue, int numberOfDigits)", "modifiers": "public static", "return": "Float", "signature": "Float truncate(Float inputValue, int numberOfDigits)", "full_signature": "public static Float truncate(Float inputValue, int numberOfDigits)", "class_method_signature": "NumericFunctions.truncate(Float inputValue, int numberOfDigits)", "testcase": false, "constructor": false}, {"identifier": "truncate", "parameters": "(Double inputValue, int numberOfDigits)", "modifiers": "public static", "return": "Double", "signature": "Double truncate(Double inputValue, int numberOfDigits)", "full_signature": "public static Double truncate(Double inputValue, int numberOfDigits)", "class_method_signature": "NumericFunctions.truncate(Double inputValue, int numberOfDigits)", "testcase": false, "constructor": false}, {"identifier": "truncate", "parameters": "(BigDecimal inputValue, int numberOfDigits)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal truncate(BigDecimal inputValue, int numberOfDigits)", "full_signature": "public static BigDecimal truncate(BigDecimal inputValue, int numberOfDigits)", "class_method_signature": "NumericFunctions.truncate(BigDecimal inputValue, int numberOfDigits)", "testcase": false, "constructor": false}, {"identifier": "ceil", "parameters": "(Float inputValue)", "modifiers": "public static", "return": "Float", "signature": "Float ceil(Float inputValue)", "full_signature": "public static Float ceil(Float inputValue)", "class_method_signature": "NumericFunctions.ceil(Float inputValue)", "testcase": false, "constructor": false}, {"identifier": "ceil", "parameters": "(Double inputValue)", "modifiers": "public static", "return": "Double", "signature": "Double ceil(Double inputValue)", "full_signature": "public static Double ceil(Double inputValue)", "class_method_signature": "NumericFunctions.ceil(Double inputValue)", "testcase": false, "constructor": false}, {"identifier": "ceil", "parameters": "(BigDecimal inputValue)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal ceil(BigDecimal inputValue)", "full_signature": "public static BigDecimal ceil(BigDecimal inputValue)", "class_method_signature": "NumericFunctions.ceil(BigDecimal inputValue)", "testcase": false, "constructor": false}, {"identifier": "floor", "parameters": "(Float number)", "modifiers": "public static", "return": "Float", "signature": "Float floor(Float number)", "full_signature": "public static Float floor(Float number)", "class_method_signature": "NumericFunctions.floor(Float number)", "testcase": false, "constructor": false}, {"identifier": "floor", "parameters": "(Double number)", "modifiers": "public static", "return": "Double", "signature": "Double floor(Double number)", "full_signature": "public static Double floor(Double number)", "class_method_signature": "NumericFunctions.floor(Double number)", "testcase": false, "constructor": false}, {"identifier": "floor", "parameters": "(BigDecimal number)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal floor(BigDecimal number)", "full_signature": "public static BigDecimal floor(BigDecimal number)", "class_method_signature": "NumericFunctions.floor(BigDecimal number)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(Integer inputValue)", "modifiers": "public static", "return": "Integer", "signature": "Integer length(Integer inputValue)", "full_signature": "public static Integer length(Integer inputValue)", "class_method_signature": "NumericFunctions.length(Integer inputValue)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(Long inputValue)", "modifiers": "public static", "return": "Integer", "signature": "Integer length(Long inputValue)", "full_signature": "public static Integer length(Long inputValue)", "class_method_signature": "NumericFunctions.length(Long inputValue)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(Float inputValue)", "modifiers": "public static", "return": "Integer", "signature": "Integer length(Float inputValue)", "full_signature": "public static Integer length(Float inputValue)", "class_method_signature": "NumericFunctions.length(Float inputValue)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(Double inputValue)", "modifiers": "public static", "return": "Integer", "signature": "Integer length(Double inputValue)", "full_signature": "public static Integer length(Double inputValue)", "class_method_signature": "NumericFunctions.length(Double inputValue)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(Short inputValue)", "modifiers": "public static", "return": "Integer", "signature": "Integer length(Short inputValue)", "full_signature": "public static Integer length(Short inputValue)", "class_method_signature": "NumericFunctions.length(Short inputValue)", "testcase": false, "constructor": false}, {"identifier": "toInteger", "parameters": "(String inputValue)", "modifiers": "public static", "return": "Integer", "signature": "Integer toInteger(String inputValue)", "full_signature": "public static Integer toInteger(String inputValue)", "class_method_signature": "NumericFunctions.toInteger(String inputValue)", "testcase": false, "constructor": false}, {"identifier": "toFloat", "parameters": "(String inputValue)", "modifiers": "public static", "return": "Float", "signature": "Float toFloat(String inputValue)", "full_signature": "public static Float toFloat(String inputValue)", "class_method_signature": "NumericFunctions.toFloat(String inputValue)", "testcase": false, "constructor": false}, {"identifier": "toFloat", "parameters": "(Integer inputValue)", "modifiers": "public static", "return": "Float", "signature": "Float toFloat(Integer inputValue)", "full_signature": "public static Float toFloat(Integer inputValue)", "class_method_signature": "NumericFunctions.toFloat(Integer inputValue)", "testcase": false, "constructor": false}, {"identifier": "toFloat", "parameters": "(Long inputValue)", "modifiers": "public static", "return": "Float", "signature": "Float toFloat(Long inputValue)", "full_signature": "public static Float toFloat(Long inputValue)", "class_method_signature": "NumericFunctions.toFloat(Long inputValue)", "testcase": false, "constructor": false}, {"identifier": "toFloat", "parameters": "(Double inputValue)", "modifiers": "public static", "return": "Float", "signature": "Float toFloat(Double inputValue)", "full_signature": "public static Float toFloat(Double inputValue)", "class_method_signature": "NumericFunctions.toFloat(Double inputValue)", "testcase": false, "constructor": false}, {"identifier": "toFloat", "parameters": "(BigDecimal inputValue)", "modifiers": "public static", "return": "Float", "signature": "Float toFloat(BigDecimal inputValue)", "full_signature": "public static Float toFloat(BigDecimal inputValue)", "class_method_signature": "NumericFunctions.toFloat(BigDecimal inputValue)", "testcase": false, "constructor": false}, {"identifier": "toBigdecimal", "parameters": "(String inputValue, int scale)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal toBigdecimal(String inputValue, int scale)", "full_signature": "public static BigDecimal toBigdecimal(String inputValue, int scale)", "class_method_signature": "NumericFunctions.toBigdecimal(String inputValue, int scale)", "testcase": false, "constructor": false}, {"identifier": "toBigdecimal", "parameters": "(Integer inputValue)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal toBigdecimal(Integer inputValue)", "full_signature": "public static BigDecimal toBigdecimal(Integer inputValue)", "class_method_signature": "NumericFunctions.toBigdecimal(Integer inputValue)", "testcase": false, "constructor": false}, {"identifier": "toBigdecimal", "parameters": "(Long inputValue)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal toBigdecimal(Long inputValue)", "full_signature": "public static BigDecimal toBigdecimal(Long inputValue)", "class_method_signature": "NumericFunctions.toBigdecimal(Long inputValue)", "testcase": false, "constructor": false}, {"identifier": "toBigdecimal", "parameters": "(Float inputValue)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal toBigdecimal(Float inputValue)", "full_signature": "public static BigDecimal toBigdecimal(Float inputValue)", "class_method_signature": "NumericFunctions.toBigdecimal(Float inputValue)", "testcase": false, "constructor": false}, {"identifier": "toBigdecimal", "parameters": "(Double inputValue)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal toBigdecimal(Double inputValue)", "full_signature": "public static BigDecimal toBigdecimal(Double inputValue)", "class_method_signature": "NumericFunctions.toBigdecimal(Double inputValue)", "testcase": false, "constructor": false}, {"identifier": "toBigdecimal", "parameters": "(char[] inputValue, int scale)", "modifiers": "@Deprecated public static", "return": "BigDecimal", "signature": "BigDecimal toBigdecimal(char[] inputValue, int scale)", "full_signature": "@Deprecated public static BigDecimal toBigdecimal(char[] inputValue, int scale)", "class_method_signature": "NumericFunctions.toBigdecimal(char[] inputValue, int scale)", "testcase": false, "constructor": false}, {"identifier": "toChar", "parameters": "(Short input)", "modifiers": "public static", "return": "String", "signature": "String toChar(Short input)", "full_signature": "public static String toChar(Short input)", "class_method_signature": "NumericFunctions.toChar(Short input)", "testcase": false, "constructor": false}, {"identifier": "toChar", "parameters": "(Integer input)", "modifiers": "public static", "return": "String", "signature": "String toChar(Integer input)", "full_signature": "public static String toChar(Integer input)", "class_method_signature": "NumericFunctions.toChar(Integer input)", "testcase": false, "constructor": false}, {"identifier": "toChar", "parameters": "(Long input)", "modifiers": "public static", "return": "String", "signature": "String toChar(Long input)", "full_signature": "public static String toChar(Long input)", "class_method_signature": "NumericFunctions.toChar(Long input)", "testcase": false, "constructor": false}, {"identifier": "toChar", "parameters": "(Float input)", "modifiers": "public static", "return": "String", "signature": "String toChar(Float input)", "full_signature": "public static String toChar(Float input)", "class_method_signature": "NumericFunctions.toChar(Float input)", "testcase": false, "constructor": false}, {"identifier": "toChar", "parameters": "(Double input)", "modifiers": "public static", "return": "String", "signature": "String toChar(Double input)", "full_signature": "public static String toChar(Double input)", "class_method_signature": "NumericFunctions.toChar(Double input)", "testcase": false, "constructor": false}, {"identifier": "toChar", "parameters": "(BigDecimal input)", "modifiers": "public static", "return": "String", "signature": "String toChar(BigDecimal input)", "full_signature": "public static String toChar(BigDecimal input)", "class_method_signature": "NumericFunctions.toChar(BigDecimal input)", "testcase": false, "constructor": false}, {"identifier": "toChar", "parameters": "(BigDecimal input, int scale)", "modifiers": "public static", "return": "String", "signature": "String toChar(BigDecimal input, int scale)", "full_signature": "public static String toChar(BigDecimal input, int scale)", "class_method_signature": "NumericFunctions.toChar(BigDecimal input, int scale)", "testcase": false, "constructor": false}, {"identifier": "numericRightPad", "parameters": "(Integer input, int size, char padChar)", "modifiers": "public static", "return": "String", "signature": "String numericRightPad(Integer input, int size, char padChar)", "full_signature": "public static String numericRightPad(Integer input, int size, char padChar)", "class_method_signature": "NumericFunctions.numericRightPad(Integer input, int size, char padChar)", "testcase": false, "constructor": false}, {"identifier": "numericLeftPad", "parameters": "(Integer input, int size, char padChar)", "modifiers": "public static", "return": "String", "signature": "String numericLeftPad(Integer input, int size, char padChar)", "full_signature": "public static String numericLeftPad(Integer input, int size, char padChar)", "class_method_signature": "NumericFunctions.numericLeftPad(Integer input, int size, char padChar)", "testcase": false, "constructor": false}], "file": "hydrograph.engine/hydrograph.engine.transformation/src/main/java/hydrograph/engine/transformation/standardfunctions/NumericFunctions.java"}, "focal_method": {"identifier": "toInteger", "parameters": "(String inputValue)", "modifiers": "public static", "return": "Integer", "body": "public static Integer toInteger(String inputValue)  {\n        if (inputValue == null)\n            return null;\n\n        return Integer.valueOf(inputValue);\n    }", "signature": "Integer toInteger(String inputValue)", "full_signature": "public static Integer toInteger(String inputValue)", "class_method_signature": "NumericFunctions.toInteger(String inputValue)", "testcase": false, "constructor": false, "invocations": ["valueOf"]}, "repository": {"repo_id": 84487370, "url": "https://github.com/BitwiseInc/Hydrograph", "language": "Java", "is_fork": false, "fork_count": 104, "stargazer_count": 139, "size": 35089, "license": "licensed"}}