{"test_class": {"identifier": "TypeElementsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public CompilationRule compilationRule = new CompilationRule();", "modifier": "@Rule\n    public", "type": "CompilationRule", "declarator": "compilationRule = new CompilationRule()", "var_name": "compilationRule"}, {"original_string": "private Elements elements;", "modifier": "private", "type": "Elements", "declarator": "elements", "var_name": "elements"}], "file": "shade-processor/src/test/java/io/t28/shade/processor/util/TypeElementsTest.java"}, "test_case": {"identifier": "findGenericTypesShouldEmptyList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findGenericTypesShouldEmptyList() throws Exception {\n        // setup\n        final TypeElement element = elements.getTypeElement(HashMap.class.getCanonicalName());\n\n        // exercise\n        final List<TypeName> actual = TypeElements.findGenericTypes(element, Converter.class.getSimpleName());\n\n        // verify\n        assertThat(actual).isEmpty();\n    }", "signature": "void findGenericTypesShouldEmptyList()", "full_signature": "@Test public void findGenericTypesShouldEmptyList()", "class_method_signature": "TypeElementsTest.findGenericTypesShouldEmptyList()", "testcase": true, "constructor": false, "invocations": ["getTypeElement", "getCanonicalName", "findGenericTypes", "getSimpleName", "isEmpty", "assertThat"]}, "focal_class": {"identifier": "TypeElements", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "TypeElements", "parameters": "()", "modifiers": "private", "return": "", "signature": " TypeElements()", "full_signature": "private  TypeElements()", "class_method_signature": "TypeElements.TypeElements()", "testcase": false, "constructor": true}, {"identifier": "toElement", "parameters": "(@Nonnull TypeMirror type)", "modifiers": "@Nonnull public static", "return": "TypeElement", "signature": "TypeElement toElement(@Nonnull TypeMirror type)", "full_signature": "@Nonnull public static TypeElement toElement(@Nonnull TypeMirror type)", "class_method_signature": "TypeElements.toElement(@Nonnull TypeMirror type)", "testcase": false, "constructor": false}, {"identifier": "findGenericTypes", "parameters": "(@Nonnull TypeElement element, @Nonnull String className)", "modifiers": "@Nonnull public static", "return": "List<TypeName>", "signature": "List<TypeName> findGenericTypes(@Nonnull TypeElement element, @Nonnull String className)", "full_signature": "@Nonnull public static List<TypeName> findGenericTypes(@Nonnull TypeElement element, @Nonnull String className)", "class_method_signature": "TypeElements.findGenericTypes(@Nonnull TypeElement element, @Nonnull String className)", "testcase": false, "constructor": false}], "file": "shade-processor/src/main/java/io/t28/shade/processor/util/TypeElements.java"}, "focal_method": {"identifier": "findGenericTypes", "parameters": "(@Nonnull TypeElement element, @Nonnull String className)", "modifiers": "@Nonnull public static", "return": "List<TypeName>", "body": "@Nonnull\n    public static List<TypeName> findGenericTypes(@Nonnull TypeElement element, @Nonnull String className) {\n        TypeElement currentElement = element;\n        while (currentElement != null) {\n            for (final TypeMirror interfaceType : currentElement.getInterfaces()) {\n                final DeclaredType declaredType = (DeclaredType) interfaceType;\n                final TypeElement interfaceElement = TypeElements.toElement(declaredType);\n                if (interfaceElement.getSimpleName().toString().equals(className)) {\n                    return declaredType.getTypeArguments()\n                            .stream()\n                            .map(TypeName::get)\n                            .collect(toList());\n                }\n\n                final List<TypeName> found = findGenericTypes(interfaceElement, className);\n                if (!found.isEmpty()) {\n                    return found;\n                }\n            }\n\n            final TypeMirror superClassType = currentElement.getSuperclass();\n            if (superClassType.getKind() == TypeKind.DECLARED) {\n                currentElement = TypeElements.toElement(superClassType);\n            } else {\n                currentElement = null;\n            }\n        }\n        return Collections.emptyList();\n    }", "signature": "List<TypeName> findGenericTypes(@Nonnull TypeElement element, @Nonnull String className)", "full_signature": "@Nonnull public static List<TypeName> findGenericTypes(@Nonnull TypeElement element, @Nonnull String className)", "class_method_signature": "TypeElements.findGenericTypes(@Nonnull TypeElement element, @Nonnull String className)", "testcase": false, "constructor": false, "invocations": ["getInterfaces", "toElement", "equals", "toString", "getSimpleName", "collect", "map", "stream", "getTypeArguments", "toList", "findGenericTypes", "isEmpty", "getSuperclass", "getKind", "toElement", "emptyList"]}, "repository": {"repo_id": 69031608, "url": "https://github.com/t28hub/shade", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 27, "size": 486, "license": "licensed"}}