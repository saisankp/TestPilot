{"test_class": {"identifier": "BlockingObservableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    Subscriber<Integer> w;", "modifier": "@Mock", "type": "Subscriber<Integer>", "declarator": "w", "var_name": "w"}], "file": "zava/src/test/java/rx/observables/BlockingObservableTest.java"}, "test_case": {"identifier": "testUnsubscribeFromForEachWhenInterrupted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnsubscribeFromForEachWhenInterrupted() throws InterruptedException {\n        new InterruptionTests().assertUnsubscribeIsInvoked(\"forEach()\", new Action1<BlockingObservable<Void>>() {\n            @Override\n            public void call(final BlockingObservable<Void> o) {\n                o.forEach(new Action1<Void>() {\n                    @Override\n                    public void call(final Void aVoid) {\n                        // nothing\n                    }\n                });\n            }\n        });\n    }", "signature": "void testUnsubscribeFromForEachWhenInterrupted()", "full_signature": "@Test public void testUnsubscribeFromForEachWhenInterrupted()", "class_method_signature": "BlockingObservableTest.testUnsubscribeFromForEachWhenInterrupted()", "testcase": true, "constructor": false, "invocations": ["assertUnsubscribeIsInvoked", "forEach"]}, "focal_class": {"identifier": "BlockingObservable", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Observable<? extends T> o;", "modifier": "private final", "type": "Observable<? extends T>", "declarator": "o", "var_name": "o"}], "methods": [{"identifier": "BlockingObservable", "parameters": "(Observable<? extends T> o)", "modifiers": "private", "return": "", "signature": " BlockingObservable(Observable<? extends T> o)", "full_signature": "private  BlockingObservable(Observable<? extends T> o)", "class_method_signature": "BlockingObservable.BlockingObservable(Observable<? extends T> o)", "testcase": false, "constructor": true}, {"identifier": "from", "parameters": "(final Observable<? extends T> o)", "modifiers": "public static", "return": "BlockingObservable<T>", "signature": "BlockingObservable<T> from(final Observable<? extends T> o)", "full_signature": "public static BlockingObservable<T> from(final Observable<? extends T> o)", "class_method_signature": "BlockingObservable.from(final Observable<? extends T> o)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(final Action1<? super T> onNext)", "modifiers": "public", "return": "void", "signature": "void forEach(final Action1<? super T> onNext)", "full_signature": "public void forEach(final Action1<? super T> onNext)", "class_method_signature": "BlockingObservable.forEach(final Action1<? super T> onNext)", "testcase": false, "constructor": false}, {"identifier": "getIterator", "parameters": "()", "modifiers": "public", "return": "Iterator<T>", "signature": "Iterator<T> getIterator()", "full_signature": "public Iterator<T> getIterator()", "class_method_signature": "BlockingObservable.getIterator()", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T first()", "full_signature": "public T first()", "class_method_signature": "BlockingObservable.first()", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "(Func1<? super T, Boolean> predicate)", "modifiers": "public", "return": "T", "signature": "T first(Func1<? super T, Boolean> predicate)", "full_signature": "public T first(Func1<? super T, Boolean> predicate)", "class_method_signature": "BlockingObservable.first(Func1<? super T, Boolean> predicate)", "testcase": false, "constructor": false}, {"identifier": "firstOrDefault", "parameters": "(T defaultValue)", "modifiers": "public", "return": "T", "signature": "T firstOrDefault(T defaultValue)", "full_signature": "public T firstOrDefault(T defaultValue)", "class_method_signature": "BlockingObservable.firstOrDefault(T defaultValue)", "testcase": false, "constructor": false}, {"identifier": "firstOrDefault", "parameters": "(T defaultValue, Func1<? super T, Boolean> predicate)", "modifiers": "public", "return": "T", "signature": "T firstOrDefault(T defaultValue, Func1<? super T, Boolean> predicate)", "full_signature": "public T firstOrDefault(T defaultValue, Func1<? super T, Boolean> predicate)", "class_method_signature": "BlockingObservable.firstOrDefault(T defaultValue, Func1<? super T, Boolean> predicate)", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T last()", "full_signature": "public T last()", "class_method_signature": "BlockingObservable.last()", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "(final Func1<? super T, Boolean> predicate)", "modifiers": "public", "return": "T", "signature": "T last(final Func1<? super T, Boolean> predicate)", "full_signature": "public T last(final Func1<? super T, Boolean> predicate)", "class_method_signature": "BlockingObservable.last(final Func1<? super T, Boolean> predicate)", "testcase": false, "constructor": false}, {"identifier": "lastOrDefault", "parameters": "(T defaultValue)", "modifiers": "public", "return": "T", "signature": "T lastOrDefault(T defaultValue)", "full_signature": "public T lastOrDefault(T defaultValue)", "class_method_signature": "BlockingObservable.lastOrDefault(T defaultValue)", "testcase": false, "constructor": false}, {"identifier": "lastOrDefault", "parameters": "(T defaultValue, Func1<? super T, Boolean> predicate)", "modifiers": "public", "return": "T", "signature": "T lastOrDefault(T defaultValue, Func1<? super T, Boolean> predicate)", "full_signature": "public T lastOrDefault(T defaultValue, Func1<? super T, Boolean> predicate)", "class_method_signature": "BlockingObservable.lastOrDefault(T defaultValue, Func1<? super T, Boolean> predicate)", "testcase": false, "constructor": false}, {"identifier": "mostRecent", "parameters": "(T initialValue)", "modifiers": "public", "return": "Iterable<T>", "signature": "Iterable<T> mostRecent(T initialValue)", "full_signature": "public Iterable<T> mostRecent(T initialValue)", "class_method_signature": "BlockingObservable.mostRecent(T initialValue)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "Iterable<T>", "signature": "Iterable<T> next()", "full_signature": "public Iterable<T> next()", "class_method_signature": "BlockingObservable.next()", "testcase": false, "constructor": false}, {"identifier": "latest", "parameters": "()", "modifiers": "public", "return": "Iterable<T>", "signature": "Iterable<T> latest()", "full_signature": "public Iterable<T> latest()", "class_method_signature": "BlockingObservable.latest()", "testcase": false, "constructor": false}, {"identifier": "single", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T single()", "full_signature": "public T single()", "class_method_signature": "BlockingObservable.single()", "testcase": false, "constructor": false}, {"identifier": "single", "parameters": "(Func1<? super T, Boolean> predicate)", "modifiers": "public", "return": "T", "signature": "T single(Func1<? super T, Boolean> predicate)", "full_signature": "public T single(Func1<? super T, Boolean> predicate)", "class_method_signature": "BlockingObservable.single(Func1<? super T, Boolean> predicate)", "testcase": false, "constructor": false}, {"identifier": "singleOrDefault", "parameters": "(T defaultValue)", "modifiers": "public", "return": "T", "signature": "T singleOrDefault(T defaultValue)", "full_signature": "public T singleOrDefault(T defaultValue)", "class_method_signature": "BlockingObservable.singleOrDefault(T defaultValue)", "testcase": false, "constructor": false}, {"identifier": "singleOrDefault", "parameters": "(T defaultValue, Func1<? super T, Boolean> predicate)", "modifiers": "public", "return": "T", "signature": "T singleOrDefault(T defaultValue, Func1<? super T, Boolean> predicate)", "full_signature": "public T singleOrDefault(T defaultValue, Func1<? super T, Boolean> predicate)", "class_method_signature": "BlockingObservable.singleOrDefault(T defaultValue, Func1<? super T, Boolean> predicate)", "testcase": false, "constructor": false}, {"identifier": "toFuture", "parameters": "()", "modifiers": "public", "return": "Future<T>", "signature": "Future<T> toFuture()", "full_signature": "public Future<T> toFuture()", "class_method_signature": "BlockingObservable.toFuture()", "testcase": false, "constructor": false}, {"identifier": "toIterable", "parameters": "()", "modifiers": "public", "return": "Iterable<T>", "signature": "Iterable<T> toIterable()", "full_signature": "public Iterable<T> toIterable()", "class_method_signature": "BlockingObservable.toIterable()", "testcase": false, "constructor": false}, {"identifier": "blockForSingle", "parameters": "(final Observable<? extends T> observable)", "modifiers": "private", "return": "T", "signature": "T blockForSingle(final Observable<? extends T> observable)", "full_signature": "private T blockForSingle(final Observable<? extends T> observable)", "class_method_signature": "BlockingObservable.blockForSingle(final Observable<? extends T> observable)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/observables/BlockingObservable.java"}, "focal_method": {"identifier": "forEach", "parameters": "(final Action1<? super T> onNext)", "modifiers": "public", "return": "void", "body": "public void forEach(final Action1<? super T> onNext) {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicReference<Throwable> exceptionFromOnError = new AtomicReference<Throwable>();\n\n        /*\n         * Use 'subscribe' instead of 'unsafeSubscribe' for Rx contract behavior\n         * as this is the final subscribe in the chain.\n         */\n        Subscription subscription = o.subscribe(new Subscriber<T>() {\n            @Override\n            public void onCompleted() {\n                latch.countDown();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                /*\n                 * If we receive an onError event we set the reference on the\n                 * outer thread so we can git it and throw after the\n                 * latch.await().\n                 * \n                 * We do this instead of throwing directly since this may be on\n                 * a different thread and the latch is still waiting.\n                 */\n                exceptionFromOnError.set(e);\n                latch.countDown();\n            }\n\n            @Override\n            public void onNext(T args) {\n                onNext.call(args);\n            }\n        });\n        // block until the subscription completes and then return\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            subscription.unsubscribe();\n            // set the interrupted flag again so callers can still get it\n            // for more information see https://github.com/ReactiveX/RxJava/pull/147#issuecomment-13624780\n            Thread.currentThread().interrupt();\n            // using Runtime so it is not checked\n            throw new RuntimeException(\"Interrupted while waiting for subscription to complete.\", e);\n        }\n\n        if (exceptionFromOnError.get() != null) {\n            if (exceptionFromOnError.get() instanceof RuntimeException) {\n                throw (RuntimeException) exceptionFromOnError.get();\n            } else {\n                throw new RuntimeException(exceptionFromOnError.get());\n            }\n        }\n    }", "signature": "void forEach(final Action1<? super T> onNext)", "full_signature": "public void forEach(final Action1<? super T> onNext)", "class_method_signature": "BlockingObservable.forEach(final Action1<? super T> onNext)", "testcase": false, "constructor": false, "invocations": ["subscribe", "countDown", "set", "countDown", "call", "await", "unsubscribe", "interrupt", "currentThread", "get", "get", "get", "get"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}