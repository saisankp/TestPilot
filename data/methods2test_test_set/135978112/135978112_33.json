{"test_class": {"identifier": "JsonConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TOPIC = \"topic\";", "modifier": "private static final", "type": "String", "declarator": "TOPIC = \"topic\"", "var_name": "TOPIC"}, {"original_string": "ObjectMapper objectMapper = new ObjectMapper();", "modifier": "", "type": "ObjectMapper", "declarator": "objectMapper = new ObjectMapper()", "var_name": "objectMapper"}, {"original_string": "JsonConverter converter = new JsonConverter();", "modifier": "", "type": "JsonConverter", "declarator": "converter = new JsonConverter()", "var_name": "converter"}], "file": "connect/json/src/test/java/org/apache/kafka/connect/json/JsonConverterTest.java"}, "test_case": {"identifier": "mapToJsonNonStringKeys", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mapToJsonNonStringKeys() {\n        Schema intIntMap = SchemaBuilder.map(Schema.INT32_SCHEMA, Schema.INT32_SCHEMA).build();\n        Map<Integer, Integer> input = new HashMap<>();\n        input.put(1, 12);\n        input.put(2, 15);\n        JsonNode converted = parse(converter.fromConnectData(TOPIC, intIntMap, input));\n        validateEnvelope(converted);\n        assertEquals(parse(\"{ \\\"type\\\": \\\"map\\\", \\\"keys\\\": { \\\"type\\\" : \\\"int32\\\", \\\"optional\\\": false }, \\\"values\\\": { \\\"type\\\" : \\\"int32\\\", \\\"optional\\\": false }, \\\"optional\\\": false }\"),\n                converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME));\n\n        assertTrue(converted.get(JsonSchema.ENVELOPE_PAYLOAD_FIELD_NAME).isArray());\n        ArrayNode payload = (ArrayNode) converted.get(JsonSchema.ENVELOPE_PAYLOAD_FIELD_NAME);\n        assertEquals(2, payload.size());\n        Set<JsonNode> payloadEntries = new HashSet<>();\n        for (JsonNode elem : payload)\n            payloadEntries.add(elem);\n        assertEquals(new HashSet<>(Arrays.asList(JsonNodeFactory.instance.arrayNode().add(1).add(12),\n                        JsonNodeFactory.instance.arrayNode().add(2).add(15))),\n                payloadEntries\n        );\n    }", "signature": "void mapToJsonNonStringKeys()", "full_signature": "@Test public void mapToJsonNonStringKeys()", "class_method_signature": "JsonConverterTest.mapToJsonNonStringKeys()", "testcase": true, "constructor": false, "invocations": ["build", "map", "put", "put", "parse", "fromConnectData", "validateEnvelope", "assertEquals", "parse", "get", "assertTrue", "isArray", "get", "get", "assertEquals", "size", "add", "assertEquals", "asList", "add", "add", "arrayNode", "add", "add", "arrayNode"]}, "focal_class": {"identifier": "JsonConverter", "superclass": "", "interfaces": "implements Converter", "fields": [{"original_string": "private static final String SCHEMAS_ENABLE_CONFIG = \"schemas.enable\";", "modifier": "private static final", "type": "String", "declarator": "SCHEMAS_ENABLE_CONFIG = \"schemas.enable\"", "var_name": "SCHEMAS_ENABLE_CONFIG"}, {"original_string": "private static final boolean SCHEMAS_ENABLE_DEFAULT = true;", "modifier": "private static final", "type": "boolean", "declarator": "SCHEMAS_ENABLE_DEFAULT = true", "var_name": "SCHEMAS_ENABLE_DEFAULT"}, {"original_string": "private static final String SCHEMAS_CACHE_SIZE_CONFIG = \"schemas.cache.size\";", "modifier": "private static final", "type": "String", "declarator": "SCHEMAS_CACHE_SIZE_CONFIG = \"schemas.cache.size\"", "var_name": "SCHEMAS_CACHE_SIZE_CONFIG"}, {"original_string": "private static final int SCHEMAS_CACHE_SIZE_DEFAULT = 1000;", "modifier": "private static final", "type": "int", "declarator": "SCHEMAS_CACHE_SIZE_DEFAULT = 1000", "var_name": "SCHEMAS_CACHE_SIZE_DEFAULT"}, {"original_string": "private static final HashMap<Schema.Type, JsonToConnectTypeConverter> TO_CONNECT_CONVERTERS = new HashMap<>();", "modifier": "private static final", "type": "HashMap<Schema.Type, JsonToConnectTypeConverter>", "declarator": "TO_CONNECT_CONVERTERS = new HashMap<>()", "var_name": "TO_CONNECT_CONVERTERS"}, {"original_string": "private static final HashMap<String, LogicalTypeConverter> TO_CONNECT_LOGICAL_CONVERTERS = new HashMap<>();", "modifier": "private static final", "type": "HashMap<String, LogicalTypeConverter>", "declarator": "TO_CONNECT_LOGICAL_CONVERTERS = new HashMap<>()", "var_name": "TO_CONNECT_LOGICAL_CONVERTERS"}, {"original_string": "private static final HashMap<String, LogicalTypeConverter> TO_JSON_LOGICAL_CONVERTERS = new HashMap<>();", "modifier": "private static final", "type": "HashMap<String, LogicalTypeConverter>", "declarator": "TO_JSON_LOGICAL_CONVERTERS = new HashMap<>()", "var_name": "TO_JSON_LOGICAL_CONVERTERS"}, {"original_string": "private boolean enableSchemas = SCHEMAS_ENABLE_DEFAULT;", "modifier": "private", "type": "boolean", "declarator": "enableSchemas = SCHEMAS_ENABLE_DEFAULT", "var_name": "enableSchemas"}, {"original_string": "private int cacheSize = SCHEMAS_CACHE_SIZE_DEFAULT;", "modifier": "private", "type": "int", "declarator": "cacheSize = SCHEMAS_CACHE_SIZE_DEFAULT", "var_name": "cacheSize"}, {"original_string": "private Cache<Schema, ObjectNode> fromConnectSchemaCache;", "modifier": "private", "type": "Cache<Schema, ObjectNode>", "declarator": "fromConnectSchemaCache", "var_name": "fromConnectSchemaCache"}, {"original_string": "private Cache<JsonNode, Schema> toConnectSchemaCache;", "modifier": "private", "type": "Cache<JsonNode, Schema>", "declarator": "toConnectSchemaCache", "var_name": "toConnectSchemaCache"}, {"original_string": "private final JsonSerializer serializer = new JsonSerializer();", "modifier": "private final", "type": "JsonSerializer", "declarator": "serializer = new JsonSerializer()", "var_name": "serializer"}, {"original_string": "private final JsonDeserializer deserializer = new JsonDeserializer();", "modifier": "private final", "type": "JsonDeserializer", "declarator": "deserializer = new JsonDeserializer()", "var_name": "deserializer"}], "methods": [{"identifier": "checkOptionalAndDefault", "parameters": "(Schema schema)", "modifiers": "private static", "return": "Object", "signature": "Object checkOptionalAndDefault(Schema schema)", "full_signature": "private static Object checkOptionalAndDefault(Schema schema)", "class_method_signature": "JsonConverter.checkOptionalAndDefault(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Map<String, ?> configs, boolean isKey)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Map<String, ?> configs, boolean isKey)", "full_signature": "@Override public void configure(Map<String, ?> configs, boolean isKey)", "class_method_signature": "JsonConverter.configure(Map<String, ?> configs, boolean isKey)", "testcase": false, "constructor": false}, {"identifier": "fromConnectData", "parameters": "(String topic, Schema schema, Object value)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] fromConnectData(String topic, Schema schema, Object value)", "full_signature": "@Override public byte[] fromConnectData(String topic, Schema schema, Object value)", "class_method_signature": "JsonConverter.fromConnectData(String topic, Schema schema, Object value)", "testcase": false, "constructor": false}, {"identifier": "toConnectData", "parameters": "(String topic, byte[] value)", "modifiers": "@Override public", "return": "SchemaAndValue", "signature": "SchemaAndValue toConnectData(String topic, byte[] value)", "full_signature": "@Override public SchemaAndValue toConnectData(String topic, byte[] value)", "class_method_signature": "JsonConverter.toConnectData(String topic, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "jsonToConnect", "parameters": "(JsonNode jsonValue)", "modifiers": "private", "return": "SchemaAndValue", "signature": "SchemaAndValue jsonToConnect(JsonNode jsonValue)", "full_signature": "private SchemaAndValue jsonToConnect(JsonNode jsonValue)", "class_method_signature": "JsonConverter.jsonToConnect(JsonNode jsonValue)", "testcase": false, "constructor": false}, {"identifier": "asJsonSchema", "parameters": "(Schema schema)", "modifiers": "private", "return": "ObjectNode", "signature": "ObjectNode asJsonSchema(Schema schema)", "full_signature": "private ObjectNode asJsonSchema(Schema schema)", "class_method_signature": "JsonConverter.asJsonSchema(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "asConnectSchema", "parameters": "(JsonNode jsonSchema)", "modifiers": "private", "return": "Schema", "signature": "Schema asConnectSchema(JsonNode jsonSchema)", "full_signature": "private Schema asConnectSchema(JsonNode jsonSchema)", "class_method_signature": "JsonConverter.asConnectSchema(JsonNode jsonSchema)", "testcase": false, "constructor": false}, {"identifier": "convertToJsonWithEnvelope", "parameters": "(Schema schema, Object value)", "modifiers": "private", "return": "JsonNode", "signature": "JsonNode convertToJsonWithEnvelope(Schema schema, Object value)", "full_signature": "private JsonNode convertToJsonWithEnvelope(Schema schema, Object value)", "class_method_signature": "JsonConverter.convertToJsonWithEnvelope(Schema schema, Object value)", "testcase": false, "constructor": false}, {"identifier": "convertToJsonWithoutEnvelope", "parameters": "(Schema schema, Object value)", "modifiers": "private", "return": "JsonNode", "signature": "JsonNode convertToJsonWithoutEnvelope(Schema schema, Object value)", "full_signature": "private JsonNode convertToJsonWithoutEnvelope(Schema schema, Object value)", "class_method_signature": "JsonConverter.convertToJsonWithoutEnvelope(Schema schema, Object value)", "testcase": false, "constructor": false}, {"identifier": "convertToJson", "parameters": "(Schema schema, Object logicalValue)", "modifiers": "private static", "return": "JsonNode", "signature": "JsonNode convertToJson(Schema schema, Object logicalValue)", "full_signature": "private static JsonNode convertToJson(Schema schema, Object logicalValue)", "class_method_signature": "JsonConverter.convertToJson(Schema schema, Object logicalValue)", "testcase": false, "constructor": false}, {"identifier": "convertToConnect", "parameters": "(Schema schema, JsonNode jsonValue)", "modifiers": "private static", "return": "Object", "signature": "Object convertToConnect(Schema schema, JsonNode jsonValue)", "full_signature": "private static Object convertToConnect(Schema schema, JsonNode jsonValue)", "class_method_signature": "JsonConverter.convertToConnect(Schema schema, JsonNode jsonValue)", "testcase": false, "constructor": false}], "file": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonConverter.java"}, "focal_method": {"identifier": "fromConnectData", "parameters": "(String topic, Schema schema, Object value)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n    public byte[] fromConnectData(String topic, Schema schema, Object value) {\n        JsonNode jsonValue = enableSchemas ? convertToJsonWithEnvelope(schema, value) : convertToJsonWithoutEnvelope(schema, value);\n        try {\n            return serializer.serialize(topic, jsonValue);\n        } catch (SerializationException e) {\n            throw new DataException(\"Converting Kafka Connect data to byte[] failed due to serialization error: \", e);\n        }\n    }", "signature": "byte[] fromConnectData(String topic, Schema schema, Object value)", "full_signature": "@Override public byte[] fromConnectData(String topic, Schema schema, Object value)", "class_method_signature": "JsonConverter.fromConnectData(String topic, Schema schema, Object value)", "testcase": false, "constructor": false, "invocations": ["convertToJsonWithEnvelope", "convertToJsonWithoutEnvelope", "serialize"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}