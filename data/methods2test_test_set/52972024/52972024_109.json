{"test_class": {"identifier": "PoolTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/Base/Pool/src/test/java/info/smart_tools/smartactors/base/pool/PoolTest.java"}, "test_case": {"identifier": "Should_getItemsWhenRequired", "parameters": "()", "modifiers": "@Test(expected = PoolTakeException.class) public", "return": "void", "body": "@Test(expected = PoolTakeException.class)\n    public void Should_getItemsWhenRequired()\n            throws Exception {\n        Pool pool = new Pool(3, Object::new);\n        assertNotNull(pool.take());\n        assertNotNull(pool.take());\n        assertNotNull(pool.take());\n        pool.take();\n        fail();\n    }", "signature": "void Should_getItemsWhenRequired()", "full_signature": "@Test(expected = PoolTakeException.class) public void Should_getItemsWhenRequired()", "class_method_signature": "PoolTest.Should_getItemsWhenRequired()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "take", "assertNotNull", "take", "assertNotNull", "take", "take", "fail"]}, "focal_class": {"identifier": "Pool", "superclass": "", "interfaces": "implements IPool", "fields": [{"original_string": "private Integer maxItemsCount;", "modifier": "private", "type": "Integer", "declarator": "maxItemsCount", "var_name": "maxItemsCount"}, {"original_string": "private final ArrayBlockingQueue<Object> freeItems;", "modifier": "private final", "type": "ArrayBlockingQueue<Object>", "declarator": "freeItems", "var_name": "freeItems"}, {"original_string": "private AtomicInteger freeItemsCounter = new AtomicInteger();", "modifier": "private", "type": "AtomicInteger", "declarator": "freeItemsCounter = new AtomicInteger()", "var_name": "freeItemsCounter"}, {"original_string": "private ConcurrentLinkedQueue<IPoorAction> taskQueue = new ConcurrentLinkedQueue<>();", "modifier": "private", "type": "ConcurrentLinkedQueue<IPoorAction>", "declarator": "taskQueue = new ConcurrentLinkedQueue<>()", "var_name": "taskQueue"}, {"original_string": "private Supplier<Object> creationFunction;", "modifier": "private", "type": "Supplier<Object>", "declarator": "creationFunction", "var_name": "creationFunction"}], "methods": [{"identifier": "Pool", "parameters": "(final Integer maxItems, final Supplier<Object>  func)", "modifiers": "public", "return": "", "signature": " Pool(final Integer maxItems, final Supplier<Object>  func)", "full_signature": "public  Pool(final Integer maxItems, final Supplier<Object>  func)", "class_method_signature": "Pool.Pool(final Integer maxItems, final Supplier<Object>  func)", "testcase": false, "constructor": true}, {"identifier": "take", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object take()", "full_signature": "public Object take()", "class_method_signature": "Pool.take()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(final Object item)", "modifiers": "public", "return": "void", "signature": "void put(final Object item)", "full_signature": "public void put(final Object item)", "class_method_signature": "Pool.put(final Object item)", "testcase": false, "constructor": false}, {"identifier": "onAvailable", "parameters": "(final IPoorAction action)", "modifiers": "public", "return": "void", "signature": "void onAvailable(final IPoorAction action)", "full_signature": "public void onAvailable(final IPoorAction action)", "class_method_signature": "Pool.onAvailable(final IPoorAction action)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Base/Pool/src/main/java/info/smart_tools/smartactors/base/pool/Pool.java"}, "focal_method": {"identifier": "take", "parameters": "()", "modifiers": "public", "return": "Object", "body": "public Object take() throws PoolTakeException {\n        if (freeItemsCounter.getAndDecrement() <= 0) {\n            freeItemsCounter.getAndIncrement();\n            try {\n                throw new PoolTakeException(\"Reached limit of items for this pool.\", new OutOfResourceException(this));\n            } catch (InvalidArgumentException ex) {\n                throw new PoolTakeException(\"Reached limit of items for this pool.\", ex);\n            }\n        }\n\n        try {\n            Object result = freeItems.poll();\n            if (result == null) {\n                result = creationFunction.get();\n            }\n\n            return result;\n        } catch (Exception e) {\n            freeItemsCounter.getAndIncrement();\n            throw new PoolTakeException(\"Failed to get item\", e);\n        }\n    }", "signature": "Object take()", "full_signature": "public Object take()", "class_method_signature": "Pool.take()", "testcase": false, "constructor": false, "invocations": ["getAndDecrement", "getAndIncrement", "poll", "get", "getAndIncrement"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}