{"test_class": {"identifier": "FileOpenerTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/ship/util/FileOpenerTest.java"}, "test_case": {"identifier": "testOpen", "parameters": "()", "modifiers": "@Test @PrepareForTest(FileOpener.class) public", "return": "void", "body": "@Test\n  @PrepareForTest(FileOpener.class)\n  public void testOpen() throws IOException {\n    final byte[] content = randomUUID().toString().getBytes();\n    mockStatic(Files.class);\n    ByteArrayInputStream inMock = new ByteArrayInputStream(content);\n\n    Mockito.when(Files.newInputStream(any(Path.class))).thenReturn(inMock);\n\n    final Path path = mock(Path.class);\n    final FileOpener fileOpener = new FileOpener(path);\n    try (final InputStream in = fileOpener.get()) {\n      assertArrayEquals(content, from(in));\n    }\n  }", "signature": "void testOpen()", "full_signature": "@Test @PrepareForTest(FileOpener.class) public void testOpen()", "class_method_signature": "FileOpenerTest.testOpen()", "testcase": true, "constructor": false, "invocations": ["getBytes", "toString", "randomUUID", "mockStatic", "thenReturn", "when", "newInputStream", "any", "mock", "get", "assertArrayEquals", "from"]}, "focal_class": {"identifier": "FileOpener", "superclass": "", "interfaces": "implements DangerousSupplier<InputStream>", "fields": [{"original_string": "protected final Path path;", "modifier": "protected final", "type": "Path", "declarator": "path", "var_name": "path"}], "methods": [{"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream get()", "full_signature": "@Override public InputStream get()", "class_method_signature": "FileOpener.get()", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/util/FileOpener.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "InputStream", "body": "@Override\n  public InputStream get() throws IOException {\n    return Files.newInputStream(path);\n  }", "signature": "InputStream get()", "full_signature": "@Override public InputStream get()", "class_method_signature": "FileOpener.get()", "testcase": false, "constructor": false, "invocations": ["newInputStream"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}