{"test_class": {"identifier": "H2ScoreDistributionWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ScoreDistributionWriter dbWriter;", "modifier": "private", "type": "ScoreDistributionWriter", "declarator": "dbWriter", "var_name": "dbWriter"}], "file": "phenol-annotations/src/test/java/org/monarchinitiative/phenol/annotations/scoredist/H2ScoreDistributionWriterTest.java"}, "test_case": {"identifier": "close", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void close() {\n    assertDoesNotThrow(() -> dbWriter.close());\n  }", "signature": "void close()", "full_signature": "@Test void close()", "class_method_signature": "H2ScoreDistributionWriterTest.close()", "testcase": true, "constructor": false, "invocations": ["assertDoesNotThrow", "close"]}, "focal_class": {"identifier": "H2ScoreDistributionWriter", "superclass": "", "interfaces": "implements ScoreDistributionWriter", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(H2ScoreDistributionWriter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(H2ScoreDistributionWriter.class)", "var_name": "LOGGER"}, {"original_string": "private final String pathDb;", "modifier": "private final", "type": "String", "declarator": "pathDb", "var_name": "pathDb"}, {"original_string": "private final String tableName;", "modifier": "private final", "type": "String", "declarator": "tableName", "var_name": "tableName"}, {"original_string": "private final Connection conn;", "modifier": "private final", "type": "Connection", "declarator": "conn", "var_name": "conn"}, {"original_string": "private static final String H2_DROP_TABLE_STATEMENT = \"DROP TABLE %s\";", "modifier": "private static final", "type": "String", "declarator": "H2_DROP_TABLE_STATEMENT = \"DROP TABLE %s\"", "var_name": "H2_DROP_TABLE_STATEMENT"}, {"original_string": "private static final String[] H2_CREATE_TABLE_STATEMENTS =\n      new String[] {\n        \"CREATE TABLE %s (num_terms INT, object_id VARCHAR, sample_size INT, scores OTHER, p_values OTHER)\",\n        \"CREATE INDEX ON %s (num_terms)\",\n        \"CREATE UNIQUE INDEX ON %s (num_terms, object_id)\"\n      };", "modifier": "private static final", "type": "String[]", "declarator": "H2_CREATE_TABLE_STATEMENTS =\n      new String[] {\n        \"CREATE TABLE %s (num_terms INT, object_id VARCHAR, sample_size INT, scores OTHER, p_values OTHER)\",\n        \"CREATE INDEX ON %s (num_terms)\",\n        \"CREATE UNIQUE INDEX ON %s (num_terms, object_id)\"\n      }", "var_name": "H2_CREATE_TABLE_STATEMENTS"}, {"original_string": "private static final String H2_INSERT_STATEMENT =\n      \"INSERT INTO %s (num_terms, object_id, sample_size, scores, p_values) VALUES (?, ?, ?, ?, ?)\";", "modifier": "private static final", "type": "String", "declarator": "H2_INSERT_STATEMENT =\n      \"INSERT INTO %s (num_terms, object_id, sample_size, scores, p_values) VALUES (?, ?, ?, ?, ?)\"", "var_name": "H2_INSERT_STATEMENT"}], "methods": [{"identifier": "H2ScoreDistributionWriter", "parameters": "(String pathDb, String dataTableName, boolean resetTableIfExists)", "modifiers": "public", "return": "", "signature": " H2ScoreDistributionWriter(String pathDb, String dataTableName, boolean resetTableIfExists)", "full_signature": "public  H2ScoreDistributionWriter(String pathDb, String dataTableName, boolean resetTableIfExists)", "class_method_signature": "H2ScoreDistributionWriter.H2ScoreDistributionWriter(String pathDb, String dataTableName, boolean resetTableIfExists)", "testcase": false, "constructor": true}, {"identifier": "openConnection", "parameters": "(boolean resetTableIfExists)", "modifiers": "private", "return": "Connection", "signature": "Connection openConnection(boolean resetTableIfExists)", "full_signature": "private Connection openConnection(boolean resetTableIfExists)", "class_method_signature": "H2ScoreDistributionWriter.openConnection(boolean resetTableIfExists)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "H2ScoreDistributionWriter.close()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(int numTerms, ScoreDistribution scoreDistribution, int resolution)", "modifiers": "@Override public", "return": "void", "signature": "void write(int numTerms, ScoreDistribution scoreDistribution, int resolution)", "full_signature": "@Override public void write(int numTerms, ScoreDistribution scoreDistribution, int resolution)", "class_method_signature": "H2ScoreDistributionWriter.write(int numTerms, ScoreDistribution scoreDistribution, int resolution)", "testcase": false, "constructor": false}, {"identifier": "writeObjectScoreDistribution", "parameters": "(\n      int numTerms, ObjectScoreDistribution dist, int resolution)", "modifiers": "private", "return": "void", "signature": "void writeObjectScoreDistribution(\n      int numTerms, ObjectScoreDistribution dist, int resolution)", "full_signature": "private void writeObjectScoreDistribution(\n      int numTerms, ObjectScoreDistribution dist, int resolution)", "class_method_signature": "H2ScoreDistributionWriter.writeObjectScoreDistribution(\n      int numTerms, ObjectScoreDistribution dist, int resolution)", "testcase": false, "constructor": false}], "file": "phenol-annotations/src/main/java/org/monarchinitiative/phenol/annotations/scoredist/H2ScoreDistributionWriter.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void close() throws IOException {\n    try {\n      conn.close();\n    } catch (SQLException e) {\n      throw new IOException(\"Problem closing connection to database\", e);\n    }\n  }", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "H2ScoreDistributionWriter.close()", "testcase": false, "constructor": false, "invocations": ["close"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}