{"test_class": {"identifier": "UtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-meris-l2auxdata/src/test/java/org/esa/s3tbx/meris/l2auxdata/UtilsTest.java"}, "test_case": {"identifier": "testDownloadAndInstall", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDownloadAndInstall() throws Exception {\n        FileSystem fs = Jimfs.newFileSystem();\n        Path target = fs.getPath(\"target\");\n        Utils.downloadAndInstallAuxdata(target, UtilsTest.class.getResource(\"zip.zip\"));\n        Path zipDir = target.resolve(\"zip\");\n        assertTrue(Files.isDirectory(zipDir));\n        Path imageFile = zipDir.resolve(\"image.png\");\n        assertTrue(Files.isRegularFile(imageFile));\n        assertEquals(45088, Files.size(imageFile));\n        Path textFile = zipDir.resolve(\"folder\").resolve(\"text.txt\");\n        assertTrue(Files.isRegularFile(textFile));\n        assertEquals(1710, Files.size(textFile));\n\n        fs.close();\n    }", "signature": "void testDownloadAndInstall()", "full_signature": "@Test public void testDownloadAndInstall()", "class_method_signature": "UtilsTest.testDownloadAndInstall()", "testcase": true, "constructor": false, "invocations": ["newFileSystem", "getPath", "downloadAndInstallAuxdata", "getResource", "resolve", "assertTrue", "isDirectory", "resolve", "assertTrue", "isRegularFile", "assertEquals", "size", "resolve", "resolve", "assertTrue", "isRegularFile", "assertEquals", "size", "close"]}, "focal_class": {"identifier": "Utils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Utils", "parameters": "()", "modifiers": "private", "return": "", "signature": " Utils()", "full_signature": "private  Utils()", "class_method_signature": "Utils.Utils()", "testcase": false, "constructor": true}, {"identifier": "computeSeasonalFactor", "parameters": "(double daysSince2000, double sunEarthDistanceSquare)", "modifiers": "public static", "return": "double", "signature": "double computeSeasonalFactor(double daysSince2000, double sunEarthDistanceSquare)", "full_signature": "public static double computeSeasonalFactor(double daysSince2000, double sunEarthDistanceSquare)", "class_method_signature": "Utils.computeSeasonalFactor(double daysSince2000, double sunEarthDistanceSquare)", "testcase": false, "constructor": false}, {"identifier": "isProductRR", "parameters": "(Product product)", "modifiers": "public static", "return": "boolean", "signature": "boolean isProductRR(Product product)", "full_signature": "public static boolean isProductRR(Product product)", "class_method_signature": "Utils.isProductRR(Product product)", "testcase": false, "constructor": false}, {"identifier": "isProductFR", "parameters": "(Product product)", "modifiers": "public static", "return": "boolean", "signature": "boolean isProductFR(Product product)", "full_signature": "public static boolean isProductFR(Product product)", "class_method_signature": "Utils.isProductFR(Product product)", "testcase": false, "constructor": false}, {"identifier": "downloadAndInstallAuxdata", "parameters": "(Path targetDir, URL remoteZipFileUrl)", "modifiers": "static", "return": "void", "signature": "void downloadAndInstallAuxdata(Path targetDir, URL remoteZipFileUrl)", "full_signature": "static void downloadAndInstallAuxdata(Path targetDir, URL remoteZipFileUrl)", "class_method_signature": "Utils.downloadAndInstallAuxdata(Path targetDir, URL remoteZipFileUrl)", "testcase": false, "constructor": false}], "file": "s3tbx-meris-l2auxdata/src/main/java/org/esa/s3tbx/meris/l2auxdata/Utils.java"}, "focal_method": {"identifier": "downloadAndInstallAuxdata", "parameters": "(Path targetDir, URL remoteZipFileUrl)", "modifiers": "static", "return": "void", "body": "static void downloadAndInstallAuxdata(Path targetDir, URL remoteZipFileUrl) throws L2AuxDataException {\n        final URL fileUrl;\n        try {\n            fileUrl = remoteZipFileUrl;\n            final URLConnection urlConnection;\n            if (System.getProperty(\"http.proxyHost\") == null || System.getProperty(\"http.proxyPort\") == null) {\n                urlConnection = fileUrl.openConnection();\n            } else {\n                urlConnection = fileUrl.openConnection(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(System.getProperty(\"http.proxyHost\"), Integer.parseInt(System.getProperty(\"http.proxyPort\")))));\n            }\n            InputStream inputStream = urlConnection.getInputStream();\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            ZipEntry entry;\n            while((entry = zis.getNextEntry()) != null) {\n                Path filepath = targetDir.resolve(entry.getName());\n                if (!entry.isDirectory()) {\n                    // if the entry is a file, extracts it\n                    Files.copy(zis, filepath);\n                } else {\n                    // if the entry is a directory, make the directory\n                    Files.createDirectories(filepath);\n                }\n            }\n        } catch (IOException e) {\n            throw new L2AuxDataException(\"Not able to download auxiliary data from \" + remoteZipFileUrl, e);\n        }\n    }", "signature": "void downloadAndInstallAuxdata(Path targetDir, URL remoteZipFileUrl)", "full_signature": "static void downloadAndInstallAuxdata(Path targetDir, URL remoteZipFileUrl)", "class_method_signature": "Utils.downloadAndInstallAuxdata(Path targetDir, URL remoteZipFileUrl)", "testcase": false, "constructor": false, "invocations": ["getProperty", "getProperty", "openConnection", "openConnection", "getProperty", "parseInt", "getProperty", "getInputStream", "getNextEntry", "resolve", "getName", "isDirectory", "copy", "createDirectories"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}