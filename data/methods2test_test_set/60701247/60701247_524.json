{"test_class": {"identifier": "ListenerManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "observable/testSrc/com/android/tools/idea/observable/ListenerManagerTest.java"}, "test_case": {"identifier": "receiveAndFireWorks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void receiveAndFireWorks() throws Exception {\n    ListenerManager listeners = new ListenerManager();\n\n    IntReceiver intReceiver = new IntReceiver();\n    IntValueProperty intProperty = new IntValueProperty(10);\n\n    listeners.listenAndFire(intProperty, intReceiver);\n\n    assertThat(intReceiver.myInvalidationCount).isEqualTo(1);\n    assertThat(intReceiver.myLastValue).isEqualTo(10);\n\n    intProperty.set(20);\n    assertThat(intReceiver.myInvalidationCount).isEqualTo(2);\n    assertThat(intReceiver.myLastValue).isEqualTo(20);\n  }", "signature": "void receiveAndFireWorks()", "full_signature": "@Test public void receiveAndFireWorks()", "class_method_signature": "ListenerManagerTest.receiveAndFireWorks()", "testcase": true, "constructor": false, "invocations": ["listenAndFire", "isEqualTo", "assertThat", "isEqualTo", "assertThat", "set", "isEqualTo", "assertThat", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ListenerManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<ListenerPairing> myListeners = new ArrayList<>();", "modifier": "private final", "type": "List<ListenerPairing>", "declarator": "myListeners = new ArrayList<>()", "var_name": "myListeners"}, {"original_string": "private final Map<Receiver<?>, InvalidationListener> myReceiverMapping = Maps.newHashMap();", "modifier": "private final", "type": "Map<Receiver<?>, InvalidationListener>", "declarator": "myReceiverMapping = Maps.newHashMap()", "var_name": "myReceiverMapping"}, {"original_string": "private final List<CompositeListener> myCompositeListeners = Lists.newArrayListWithExpectedSize(0);", "modifier": "private final", "type": "List<CompositeListener>", "declarator": "myCompositeListeners = Lists.newArrayListWithExpectedSize(0)", "var_name": "myCompositeListeners"}, {"original_string": "private final BatchInvoker myInvoker;", "modifier": "private final", "type": "BatchInvoker", "declarator": "myInvoker", "var_name": "myInvoker"}], "methods": [{"identifier": "ListenerManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " ListenerManager()", "full_signature": "public  ListenerManager()", "class_method_signature": "ListenerManager.ListenerManager()", "testcase": false, "constructor": true}, {"identifier": "ListenerManager", "parameters": "(@NotNull BatchInvoker.Strategy invokeStrategy)", "modifiers": "public", "return": "", "signature": " ListenerManager(@NotNull BatchInvoker.Strategy invokeStrategy)", "full_signature": "public  ListenerManager(@NotNull BatchInvoker.Strategy invokeStrategy)", "class_method_signature": "ListenerManager.ListenerManager(@NotNull BatchInvoker.Strategy invokeStrategy)", "testcase": false, "constructor": true}, {"identifier": "listen", "parameters": "(@NotNull ObservableValue<?> src, @NotNull InvalidationListener listener)", "modifiers": "public", "return": "void", "signature": "void listen(@NotNull ObservableValue<?> src, @NotNull InvalidationListener listener)", "full_signature": "public void listen(@NotNull ObservableValue<?> src, @NotNull InvalidationListener listener)", "class_method_signature": "ListenerManager.listen(@NotNull ObservableValue<?> src, @NotNull InvalidationListener listener)", "testcase": false, "constructor": false}, {"identifier": "listen", "parameters": "(@NotNull final ObservableValue<T> src, @NotNull final Receiver<T> receiver)", "modifiers": "public", "return": "void", "signature": "void listen(@NotNull final ObservableValue<T> src, @NotNull final Receiver<T> receiver)", "full_signature": "public void listen(@NotNull final ObservableValue<T> src, @NotNull final Receiver<T> receiver)", "class_method_signature": "ListenerManager.listen(@NotNull final ObservableValue<T> src, @NotNull final Receiver<T> receiver)", "testcase": false, "constructor": false}, {"identifier": "listenAndFire", "parameters": "(@NotNull ObservableValue<?> src, @NotNull InvalidationListener listener)", "modifiers": "public", "return": "void", "signature": "void listenAndFire(@NotNull ObservableValue<?> src, @NotNull InvalidationListener listener)", "full_signature": "public void listenAndFire(@NotNull ObservableValue<?> src, @NotNull InvalidationListener listener)", "class_method_signature": "ListenerManager.listenAndFire(@NotNull ObservableValue<?> src, @NotNull InvalidationListener listener)", "testcase": false, "constructor": false}, {"identifier": "listenAndFire", "parameters": "(@NotNull final ObservableValue<T> src, @NotNull final Receiver<T> receiver)", "modifiers": "public", "return": "void", "signature": "void listenAndFire(@NotNull final ObservableValue<T> src, @NotNull final Receiver<T> receiver)", "full_signature": "public void listenAndFire(@NotNull final ObservableValue<T> src, @NotNull final Receiver<T> receiver)", "class_method_signature": "ListenerManager.listenAndFire(@NotNull final ObservableValue<T> src, @NotNull final Receiver<T> receiver)", "testcase": false, "constructor": false}, {"identifier": "listenAll", "parameters": "(@NotNull ObservableValue<?>... values)", "modifiers": "@NotNull public", "return": "CompositeListener", "signature": "CompositeListener listenAll(@NotNull ObservableValue<?>... values)", "full_signature": "@NotNull public CompositeListener listenAll(@NotNull ObservableValue<?>... values)", "class_method_signature": "ListenerManager.listenAll(@NotNull ObservableValue<?>... values)", "testcase": false, "constructor": false}, {"identifier": "listenAll", "parameters": "(@NotNull Collection<? extends ObservableValue<?>> values)", "modifiers": "@NotNull public", "return": "CompositeListener", "signature": "CompositeListener listenAll(@NotNull Collection<? extends ObservableValue<?>> values)", "full_signature": "@NotNull public CompositeListener listenAll(@NotNull Collection<? extends ObservableValue<?>> values)", "class_method_signature": "ListenerManager.listenAll(@NotNull Collection<? extends ObservableValue<?>> values)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(@NotNull InvalidationListener listener)", "modifiers": "public", "return": "void", "signature": "void release(@NotNull InvalidationListener listener)", "full_signature": "public void release(@NotNull InvalidationListener listener)", "class_method_signature": "ListenerManager.release(@NotNull InvalidationListener listener)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(@NotNull Receiver<?> receiver)", "modifiers": "public", "return": "void", "signature": "void release(@NotNull Receiver<?> receiver)", "full_signature": "public void release(@NotNull Receiver<?> receiver)", "class_method_signature": "ListenerManager.release(@NotNull Receiver<?> receiver)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(@NotNull ObservableValue<?> observable)", "modifiers": "public", "return": "void", "signature": "void release(@NotNull ObservableValue<?> observable)", "full_signature": "public void release(@NotNull ObservableValue<?> observable)", "class_method_signature": "ListenerManager.release(@NotNull ObservableValue<?> observable)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(@NotNull Runnable listenAllRunnable)", "modifiers": "public", "return": "void", "signature": "void release(@NotNull Runnable listenAllRunnable)", "full_signature": "public void release(@NotNull Runnable listenAllRunnable)", "class_method_signature": "ListenerManager.release(@NotNull Runnable listenAllRunnable)", "testcase": false, "constructor": false}, {"identifier": "releaseAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void releaseAll()", "full_signature": "public void releaseAll()", "class_method_signature": "ListenerManager.releaseAll()", "testcase": false, "constructor": false}], "file": "observable/src/com/android/tools/idea/observable/ListenerManager.java"}, "focal_method": {"identifier": "listenAndFire", "parameters": "(@NotNull ObservableValue<?> src, @NotNull InvalidationListener listener)", "modifiers": "public", "return": "void", "body": "public void listenAndFire(@NotNull ObservableValue<?> src, @NotNull InvalidationListener listener) {\n    listen(src, listener);\n    listener.onInvalidated();\n  }", "signature": "void listenAndFire(@NotNull ObservableValue<?> src, @NotNull InvalidationListener listener)", "full_signature": "public void listenAndFire(@NotNull ObservableValue<?> src, @NotNull InvalidationListener listener)", "class_method_signature": "ListenerManager.listenAndFire(@NotNull ObservableValue<?> src, @NotNull InvalidationListener listener)", "testcase": false, "constructor": false, "invocations": ["listen", "onInvalidated"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}