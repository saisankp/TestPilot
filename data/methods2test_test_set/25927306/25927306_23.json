{"test_class": {"identifier": "SecurityIdentifierTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/ad/SecurityIdentifierTest.java"}, "test_case": {"identifier": "testToBytes", "parameters": "(final String sidString, final byte[] sid)", "modifiers": "@Test(groups = \"ad\", dataProvider = \"sids\") public", "return": "void", "body": "@Test(groups = \"ad\", dataProvider = \"sids\")\n  public void testToBytes(final String sidString, final byte[] sid)\n    throws Exception\n  {\n    Assert.assertEquals(sid, SecurityIdentifier.toBytes(sidString));\n  }", "signature": "void testToBytes(final String sidString, final byte[] sid)", "full_signature": "@Test(groups = \"ad\", dataProvider = \"sids\") public void testToBytes(final String sidString, final byte[] sid)", "class_method_signature": "SecurityIdentifierTest.testToBytes(final String sidString, final byte[] sid)", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toBytes"]}, "focal_class": {"identifier": "SecurityIdentifier", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "SecurityIdentifier", "parameters": "()", "modifiers": "private", "return": "", "signature": " SecurityIdentifier()", "full_signature": "private  SecurityIdentifier()", "class_method_signature": "SecurityIdentifier.SecurityIdentifier()", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "(final byte[] sid)", "modifiers": "public static", "return": "String", "signature": "String toString(final byte[] sid)", "full_signature": "public static String toString(final byte[] sid)", "class_method_signature": "SecurityIdentifier.toString(final byte[] sid)", "testcase": false, "constructor": false}, {"identifier": "toBytes", "parameters": "(final String sid)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toBytes(final String sid)", "full_signature": "public static byte[] toBytes(final String sid)", "class_method_signature": "SecurityIdentifier.toBytes(final String sid)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "(final ByteBuffer buffer, final boolean bigEndian)", "modifiers": "private static", "return": "long", "signature": "long getLong(final ByteBuffer buffer, final boolean bigEndian)", "full_signature": "private static long getLong(final ByteBuffer buffer, final boolean bigEndian)", "class_method_signature": "SecurityIdentifier.getLong(final ByteBuffer buffer, final boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "putLong", "parameters": "(final ByteBuffer buffer, final long value, final boolean bigEndian)", "modifiers": "private static", "return": "void", "signature": "void putLong(final ByteBuffer buffer, final long value, final boolean bigEndian)", "full_signature": "private static void putLong(final ByteBuffer buffer, final long value, final boolean bigEndian)", "class_method_signature": "SecurityIdentifier.putLong(final ByteBuffer buffer, final long value, final boolean bigEndian)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/ad/SecurityIdentifier.java"}, "focal_method": {"identifier": "toBytes", "parameters": "(final String sid)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] toBytes(final String sid)\n  {\n    // CheckStyle:MagicNumber OFF\n\n    // format of SID: S-R-X-Y1-Y2...-Yn\n    // S: static 'S', indicating string\n    // R: revision\n    // X: authority\n    // Yn: sub-authority\n\n    final StringTokenizer st = new StringTokenizer(sid, \"-\");\n    // first token is the 'S'\n    st.nextToken();\n\n    // second token is the revision\n    final int revision = Integer.valueOf(st.nextToken());\n    // third token is the authority\n    final long authority = Long.valueOf(st.nextToken());\n    // remaining token are the sub authorities\n    final List<String> subAuthorities = new ArrayList<>();\n    while (st.hasMoreTokens()) {\n      subAuthorities.add(st.nextToken());\n    }\n\n    // revision is 1 byte\n    // sub-authorities count is 1 byte\n    // authority is 6 bytes\n    // 4 bytes for each sub-authority\n    final int size = 8 + (4 * subAuthorities.size());\n    final ByteBuffer sidBuffer = ByteBuffer.allocate(size);\n    sidBuffer.put((byte) (revision & 0xFF));\n    sidBuffer.put((byte) (subAuthorities.size() & 0xFF));\n    sidBuffer.limit(8);\n    putLong(sidBuffer, authority, true);\n    for (String subAuthority : subAuthorities) {\n      sidBuffer.limit(sidBuffer.position() + 4);\n      putLong(sidBuffer, Long.valueOf(subAuthority), false);\n    }\n\n    return sidBuffer.array();\n    // CheckStyle:MagicNumber ON\n  }", "signature": "byte[] toBytes(final String sid)", "full_signature": "public static byte[] toBytes(final String sid)", "class_method_signature": "SecurityIdentifier.toBytes(final String sid)", "testcase": false, "constructor": false, "invocations": ["nextToken", "valueOf", "nextToken", "valueOf", "nextToken", "hasMoreTokens", "add", "nextToken", "size", "allocate", "put", "put", "size", "limit", "putLong", "limit", "position", "putLong", "valueOf", "array"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}