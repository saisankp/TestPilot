{"test_class": {"identifier": "TestGslGrammarIdentifier", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GrammarIdentifier identifier;", "modifier": "private", "type": "GrammarIdentifier", "declarator": "identifier", "var_name": "identifier"}], "file": "org.jvoicexml/src/test/java/org/jvoicexml/interpreter/grammar/identifier/TestGslGrammarIdentifier.java"}, "test_case": {"identifier": "testIdentify", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIdentify() throws Exception {\n        final GrammarDocument document =\n            GrammarUtil.getGrammarFromResource(\"/test.gsl\");\n        final GrammarType type = identifier.identify(document);\n        Assert.assertEquals(GrammarType.GSL, type);\n    }", "signature": "void testIdentify()", "full_signature": "@Test public void testIdentify()", "class_method_signature": "TestGslGrammarIdentifier.testIdentify()", "testcase": true, "constructor": false, "invocations": ["getGrammarFromResource", "identify", "assertEquals"]}, "focal_class": {"identifier": "GslGrammarIdentifier", "superclass": "", "interfaces": "implements GrammarIdentifier", "fields": [{"original_string": "private static final Logger LOGGER =\n            LogManager.getLogger(GslGrammarIdentifier.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER =\n            LogManager.getLogger(GslGrammarIdentifier.class)", "var_name": "LOGGER"}, {"original_string": "private static final String GSL_HEDAER = \";GSL2.0\";", "modifier": "private static final", "type": "String", "declarator": "GSL_HEDAER = \";GSL2.0\"", "var_name": "GSL_HEDAER"}], "methods": [{"identifier": "identify", "parameters": "(final GrammarDocument grammar)", "modifiers": "@Override public", "return": "GrammarType", "signature": "GrammarType identify(final GrammarDocument grammar)", "full_signature": "@Override public GrammarType identify(final GrammarDocument grammar)", "class_method_signature": "GslGrammarIdentifier.identify(final GrammarDocument grammar)", "testcase": false, "constructor": false}, {"identifier": "getSupportedType", "parameters": "()", "modifiers": "@Override public", "return": "GrammarType", "signature": "GrammarType getSupportedType()", "full_signature": "@Override public GrammarType getSupportedType()", "class_method_signature": "GslGrammarIdentifier.getSupportedType()", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/interpreter/grammar/identifier/GslGrammarIdentifier.java"}, "focal_method": {"identifier": "identify", "parameters": "(final GrammarDocument grammar)", "modifiers": "@Override public", "return": "GrammarType", "body": "@Override\n    public GrammarType identify(final GrammarDocument grammar) {\n        /* make sure grammar is neither null nor empty */\n        if (grammar == null) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"grammar is null or empty\");\n            }\n            return null;\n        }\n        if (!grammar.isAscii()) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"can only handle ascii grammars\");\n            }\n            return null;\n        }\n        final String document = grammar.getTextContent();\n        if (document.startsWith(GSL_HEDAER)) {\n            return GrammarType.GSL;\n        }\n        return null;\n    }", "signature": "GrammarType identify(final GrammarDocument grammar)", "full_signature": "@Override public GrammarType identify(final GrammarDocument grammar)", "class_method_signature": "GslGrammarIdentifier.identify(final GrammarDocument grammar)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "isAscii", "isDebugEnabled", "debug", "getTextContent", "startsWith"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}