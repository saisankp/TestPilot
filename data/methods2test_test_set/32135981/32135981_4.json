{"test_class": {"identifier": "EchoMojoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public final", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private EchoMojo echoMojo;", "modifier": "private", "type": "EchoMojo", "declarator": "echoMojo", "var_name": "echoMojo"}, {"original_string": "private final MavenPluginLog mavenLoggerMock = mock(MavenPluginLog.class);", "modifier": "private final", "type": "MavenPluginLog", "declarator": "mavenLoggerMock = mock(MavenPluginLog.class)", "var_name": "mavenLoggerMock"}, {"original_string": "private final MavenEchoOutput mavenEchoOutputMock = mock(MavenEchoOutput.class);", "modifier": "private final", "type": "MavenEchoOutput", "declarator": "mavenEchoOutputMock = mock(MavenEchoOutput.class)", "var_name": "mavenEchoOutputMock"}, {"original_string": "private final Log pluginLogMock = mock(Log.class);", "modifier": "private final", "type": "Log", "declarator": "pluginLogMock = mock(Log.class)", "var_name": "pluginLogMock"}], "file": "maven-plugin/src/test/java/echo/EchoMojoTest.java"}, "test_case": {"identifier": "mavenEchoShouldRunEchoPlugin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mavenEchoShouldRunEchoPlugin() throws Exception {\n        EchoPlugin echoPlugin = mock(EchoPlugin.class);\n\n        new ReflectionHelper(echoMojo).setField(echoPlugin);\n\n        echoMojo.echo();\n\n        verify(echoPlugin).echo();\n    }", "signature": "void mavenEchoShouldRunEchoPlugin()", "full_signature": "@Test public void mavenEchoShouldRunEchoPlugin()", "class_method_signature": "EchoMojoTest.mavenEchoShouldRunEchoPlugin()", "testcase": true, "constructor": false, "invocations": ["mock", "setField", "echo", "echo", "verify"]}, "focal_class": {"identifier": "EchoMojo", "superclass": "extends AbstractMojo", "interfaces": "", "fields": [{"original_string": "@Parameter(property = \"echo.message\")\n    private String message;", "modifier": "@Parameter(property = \"echo.message\")\n    private", "type": "String", "declarator": "message", "var_name": "message"}, {"original_string": "@Parameter(property = \"echo.fromFile\")\n    private String fromFile;", "modifier": "@Parameter(property = \"echo.fromFile\")\n    private", "type": "String", "declarator": "fromFile", "var_name": "fromFile"}, {"original_string": "@Parameter(defaultValue = \"${basedir}\", readonly = true)\n    private File basePath;", "modifier": "@Parameter(defaultValue = \"${basedir}\", readonly = true)\n    private", "type": "File", "declarator": "basePath", "var_name": "basePath"}, {"original_string": "@Parameter(property = \"echo.toFile\")\n    private String toFile;", "modifier": "@Parameter(property = \"echo.toFile\")\n    private", "type": "String", "declarator": "toFile", "var_name": "toFile"}, {"original_string": "@Parameter(property = \"echo.append\", defaultValue = \"false\")\n    private boolean append;", "modifier": "@Parameter(property = \"echo.append\", defaultValue = \"false\")\n    private", "type": "boolean", "declarator": "append", "var_name": "append"}, {"original_string": "@Parameter(property = \"echo.force\", defaultValue = \"false\")\n    private boolean force;", "modifier": "@Parameter(property = \"echo.force\", defaultValue = \"false\")\n    private", "type": "boolean", "declarator": "force", "var_name": "force"}, {"original_string": "@Parameter(property = \"echo.level\", defaultValue = \"INFO\")\n    private String level;", "modifier": "@Parameter(property = \"echo.level\", defaultValue = \"INFO\")\n    private", "type": "String", "declarator": "level", "var_name": "level"}, {"original_string": "@Parameter(property = \"echo.encoding\", defaultValue = \"UTF-8\")\n    private String encoding;", "modifier": "@Parameter(property = \"echo.encoding\", defaultValue = \"UTF-8\")\n    private", "type": "String", "declarator": "encoding", "var_name": "encoding"}, {"original_string": "@Parameter(property = \"echo.lineSeparator\", defaultValue = \"${line.separator}\")\n    private String lineSeparator;", "modifier": "@Parameter(property = \"echo.lineSeparator\", defaultValue = \"${line.separator}\")\n    private", "type": "String", "declarator": "lineSeparator", "var_name": "lineSeparator"}, {"original_string": "@Parameter(property = \"echo.characterOutput\", defaultValue = \"false\")\n    boolean characterOutput;", "modifier": "@Parameter(property = \"echo.characterOutput\", defaultValue = \"false\")", "type": "boolean", "declarator": "characterOutput", "var_name": "characterOutput"}, {"original_string": "@Parameter(property = \"echo.skip\", defaultValue = \"false\")\n    private boolean skip;", "modifier": "@Parameter(property = \"echo.skip\", defaultValue = \"false\")\n    private", "type": "boolean", "declarator": "skip", "var_name": "skip"}, {"original_string": "private MavenPluginLog mavenLogger;", "modifier": "private", "type": "MavenPluginLog", "declarator": "mavenLogger", "var_name": "mavenLogger"}, {"original_string": "private MavenEchoOutput echoOutput;", "modifier": "private", "type": "MavenEchoOutput", "declarator": "echoOutput", "var_name": "echoOutput"}, {"original_string": "private EchoPlugin echoPlugin;", "modifier": "private", "type": "EchoPlugin", "declarator": "echoPlugin", "var_name": "echoPlugin"}], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "EchoMojo.execute()", "testcase": false, "constructor": false}, {"identifier": "initLoggers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initLoggers()", "full_signature": "private void initLoggers()", "class_method_signature": "EchoMojo.initLoggers()", "testcase": false, "constructor": false}, {"identifier": "setup", "parameters": "()", "modifiers": "", "return": "void", "signature": "void setup()", "full_signature": " void setup()", "class_method_signature": "EchoMojo.setup()", "testcase": false, "constructor": false}, {"identifier": "echo", "parameters": "()", "modifiers": "", "return": "void", "signature": "void echo()", "full_signature": " void echo()", "class_method_signature": "EchoMojo.echo()", "testcase": false, "constructor": false}], "file": "maven-plugin/src/main/java/echo/EchoMojo.java"}, "focal_method": {"identifier": "echo", "parameters": "()", "modifiers": "", "return": "void", "body": "void echo() throws MojoFailureException {\n        try {\n            echoPlugin.echo();\n        } catch (FailureException fex) {\n            new ExceptionHandler(fex).throwMojoFailureException();\n        }\n    }", "signature": "void echo()", "full_signature": " void echo()", "class_method_signature": "EchoMojo.echo()", "testcase": false, "constructor": false, "invocations": ["echo", "throwMojoFailureException"]}, "repository": {"repo_id": 32135981, "url": "https://github.com/Ekryd/echo-maven-plugin", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 7, "size": 156, "license": "licensed"}}