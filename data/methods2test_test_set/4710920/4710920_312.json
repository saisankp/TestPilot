{"test_class": {"identifier": "JValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-filter/dubbo-filter-validation/src/test/java/org/apache/dubbo/validation/support/jvalidation/JValidatorTest.java"}, "test_case": {"identifier": "testItWhenItMeetsConstraint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testItWhenItMeetsConstraint() throws Exception {\n        URL url = URL.valueOf(\"test://test:11/org.apache.dubbo.validation.support.jvalidation.mock.JValidatorTestTarget\");\n        JValidator jValidator = new JValidator(url);\n        jValidator.validate(\"someMethod2\", new Class<?>[]{ValidationParameter.class}, new Object[]{new ValidationParameter(\"NotBeNull\")});\n    }", "signature": "void testItWhenItMeetsConstraint()", "full_signature": "@Test public void testItWhenItMeetsConstraint()", "class_method_signature": "JValidatorTest.testItWhenItMeetsConstraint()", "testcase": true, "constructor": false, "invocations": ["valueOf", "validate"]}, "focal_class": {"identifier": "JValidator", "superclass": "", "interfaces": "implements Validator", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(JValidator.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JValidator.class)", "var_name": "logger"}, {"original_string": "private final Class<?> clazz;", "modifier": "private final", "type": "Class<?>", "declarator": "clazz", "var_name": "clazz"}, {"original_string": "private final Map<String, Class> methodClassMap;", "modifier": "private final", "type": "Map<String, Class>", "declarator": "methodClassMap", "var_name": "methodClassMap"}, {"original_string": "private final javax.validation.Validator validator;", "modifier": "private final", "type": "javax.validation.Validator", "declarator": "validator", "var_name": "validator"}], "methods": [{"identifier": "JValidator", "parameters": "(URL url)", "modifiers": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "", "signature": " JValidator(URL url)", "full_signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) public  JValidator(URL url)", "class_method_signature": "JValidator.JValidator(URL url)", "testcase": false, "constructor": true}, {"identifier": "getMethodParameterBean", "parameters": "(Class<?> clazz, Method method, Object[] args)", "modifiers": "private static", "return": "Object", "signature": "Object getMethodParameterBean(Class<?> clazz, Method method, Object[] args)", "full_signature": "private static Object getMethodParameterBean(Class<?> clazz, Method method, Object[] args)", "class_method_signature": "JValidator.getMethodParameterBean(Class<?> clazz, Method method, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "generateMethodParameterClass", "parameters": "(Class<?> clazz, Method method, String parameterClassName)", "modifiers": "private static", "return": "Class<?>", "signature": "Class<?> generateMethodParameterClass(Class<?> clazz, Method method, String parameterClassName)", "full_signature": "private static Class<?> generateMethodParameterClass(Class<?> clazz, Method method, String parameterClassName)", "class_method_signature": "JValidator.generateMethodParameterClass(Class<?> clazz, Method method, String parameterClassName)", "testcase": false, "constructor": false}, {"identifier": "generateMethodParameterClassName", "parameters": "(Class<?> clazz, Method method)", "modifiers": "private static", "return": "String", "signature": "String generateMethodParameterClassName(Class<?> clazz, Method method)", "full_signature": "private static String generateMethodParameterClassName(Class<?> clazz, Method method)", "class_method_signature": "JValidator.generateMethodParameterClassName(Class<?> clazz, Method method)", "testcase": false, "constructor": false}, {"identifier": "hasConstraintParameter", "parameters": "(Method method)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasConstraintParameter(Method method)", "full_signature": "private static boolean hasConstraintParameter(Method method)", "class_method_signature": "JValidator.hasConstraintParameter(Method method)", "testcase": false, "constructor": false}, {"identifier": "toUpperMethodName", "parameters": "(String methodName)", "modifiers": "private static", "return": "String", "signature": "String toUpperMethodName(String methodName)", "full_signature": "private static String toUpperMethodName(String methodName)", "class_method_signature": "JValidator.toUpperMethodName(String methodName)", "testcase": false, "constructor": false}, {"identifier": "createMemberValue", "parameters": "(ConstPool cp, CtClass type, Object value)", "modifiers": "private static", "return": "MemberValue", "signature": "MemberValue createMemberValue(ConstPool cp, CtClass type, Object value)", "full_signature": "private static MemberValue createMemberValue(ConstPool cp, CtClass type, Object value)", "class_method_signature": "JValidator.createMemberValue(ConstPool cp, CtClass type, Object value)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(String methodName, Class<?>[] parameterTypes, Object[] arguments)", "modifiers": "@Override public", "return": "void", "signature": "void validate(String methodName, Class<?>[] parameterTypes, Object[] arguments)", "full_signature": "@Override public void validate(String methodName, Class<?>[] parameterTypes, Object[] arguments)", "class_method_signature": "JValidator.validate(String methodName, Class<?>[] parameterTypes, Object[] arguments)", "testcase": false, "constructor": false}, {"identifier": "methodClass", "parameters": "(String methodName)", "modifiers": "private", "return": "Class", "signature": "Class methodClass(String methodName)", "full_signature": "private Class methodClass(String methodName)", "class_method_signature": "JValidator.methodClass(String methodName)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Set<ConstraintViolation<?>> violations, Object arg, Class<?>... groups)", "modifiers": "private", "return": "void", "signature": "void validate(Set<ConstraintViolation<?>> violations, Object arg, Class<?>... groups)", "full_signature": "private void validate(Set<ConstraintViolation<?>> violations, Object arg, Class<?>... groups)", "class_method_signature": "JValidator.validate(Set<ConstraintViolation<?>> violations, Object arg, Class<?>... groups)", "testcase": false, "constructor": false}], "file": "dubbo-filter/dubbo-filter-validation/src/main/java/org/apache/dubbo/validation/support/jvalidation/JValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(String methodName, Class<?>[] parameterTypes, Object[] arguments)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(String methodName, Class<?>[] parameterTypes, Object[] arguments) throws Exception {\n        List<Class<?>> groups = new ArrayList<>();\n        Class<?> methodClass = methodClass(methodName);\n        if (methodClass != null) {\n            groups.add(methodClass);\n        }\n        Set<ConstraintViolation<?>> violations = new HashSet<>();\n        Method method = clazz.getMethod(methodName, parameterTypes);\n        Class<?>[] methodClasses;\n        if (method.isAnnotationPresent(MethodValidated.class)){\n            methodClasses = method.getAnnotation(MethodValidated.class).value();\n            groups.addAll(Arrays.asList(methodClasses));\n        }\n        // add into default group\n        groups.add(0, Default.class);\n        groups.add(1, clazz);\n\n        // convert list to array\n        Class<?>[] classgroups = groups.toArray(new Class[groups.size()]);\n\n        Object parameterBean = getMethodParameterBean(clazz, method, arguments);\n        if (parameterBean != null) {\n            violations.addAll(validator.validate(parameterBean, classgroups ));\n        }\n\n        for (Object arg : arguments) {\n            validate(violations, arg, classgroups);\n        }\n\n        if (!violations.isEmpty()) {\n            logger.error(\"Failed to validate service: \" + clazz.getName() + \", method: \" + methodName + \", cause: \" + violations);\n            throw new ConstraintViolationException(\"Failed to validate service: \" + clazz.getName() + \", method: \" + methodName + \", cause: \" + violations, violations);\n        }\n    }", "signature": "void validate(String methodName, Class<?>[] parameterTypes, Object[] arguments)", "full_signature": "@Override public void validate(String methodName, Class<?>[] parameterTypes, Object[] arguments)", "class_method_signature": "JValidator.validate(String methodName, Class<?>[] parameterTypes, Object[] arguments)", "testcase": false, "constructor": false, "invocations": ["methodClass", "add", "getMethod", "isAnnotationPresent", "value", "getAnnotation", "addAll", "asList", "add", "add", "toArray", "size", "getMethodParameterBean", "addAll", "validate", "validate", "isEmpty", "error", "getName", "getName"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}