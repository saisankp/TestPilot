{"test_class": {"identifier": "ConjureParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}], "file": "conjure-core/src/test/java/com/palantir/conjure/parser/ConjureParserTest.java"}, "test_case": {"identifier": "testConjureExternalImports", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConjureExternalImports() {\n        ConjureSourceFile conjure = ConjureParser.parse(new File(\"src/test/resources/example-external-types.yml\"));\n        assertThat(conjure.types()\n                        .imports()\n                        .get(TypeName.of(\"ExampleAnyImport\"))\n                        .baseType())\n                .isEqualTo(PrimitiveType.fromString(\"any\"));\n    }", "signature": "void testConjureExternalImports()", "full_signature": "@Test public void testConjureExternalImports()", "class_method_signature": "ConjureParserTest.testConjureExternalImports()", "testcase": true, "constructor": false, "invocations": ["parse", "isEqualTo", "assertThat", "baseType", "get", "imports", "types", "of", "fromString"]}, "focal_class": {"identifier": "ConjureParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper MAPPER = createConjureParserObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "MAPPER = createConjureParserObjectMapper()", "var_name": "MAPPER"}], "methods": [{"identifier": "ConjureParser", "parameters": "()", "modifiers": "private", "return": "", "signature": " ConjureParser()", "full_signature": "private  ConjureParser()", "class_method_signature": "ConjureParser.ConjureParser()", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(File file)", "modifiers": "public static", "return": "ConjureSourceFile", "signature": "ConjureSourceFile parse(File file)", "full_signature": "public static ConjureSourceFile parse(File file)", "class_method_signature": "ConjureParser.parse(File file)", "testcase": false, "constructor": false}, {"identifier": "parseAnnotated", "parameters": "(File file)", "modifiers": "public static", "return": "AnnotatedConjureSourceFile", "signature": "AnnotatedConjureSourceFile parseAnnotated(File file)", "full_signature": "public static AnnotatedConjureSourceFile parseAnnotated(File file)", "class_method_signature": "ConjureParser.parseAnnotated(File file)", "testcase": false, "constructor": false}, {"identifier": "parseAnnotated", "parameters": "(Collection<File> files)", "modifiers": "public static", "return": "List<AnnotatedConjureSourceFile>", "signature": "List<AnnotatedConjureSourceFile> parseAnnotated(Collection<File> files)", "full_signature": "public static List<AnnotatedConjureSourceFile> parseAnnotated(Collection<File> files)", "class_method_signature": "ConjureParser.parseAnnotated(Collection<File> files)", "testcase": false, "constructor": false}, {"identifier": "parseAnnotated", "parameters": "(RecursiveParser parser, File file)", "modifiers": "private static", "return": "AnnotatedConjureSourceFile", "signature": "AnnotatedConjureSourceFile parseAnnotated(RecursiveParser parser, File file)", "full_signature": "private static AnnotatedConjureSourceFile parseAnnotated(RecursiveParser parser, File file)", "class_method_signature": "ConjureParser.parseAnnotated(RecursiveParser parser, File file)", "testcase": false, "constructor": false}, {"identifier": "createConjureParserObjectMapper", "parameters": "()", "modifiers": "@VisibleForTesting static", "return": "ObjectMapper", "signature": "ObjectMapper createConjureParserObjectMapper()", "full_signature": "@VisibleForTesting static ObjectMapper createConjureParserObjectMapper()", "class_method_signature": "ConjureParser.createConjureParserObjectMapper()", "testcase": false, "constructor": false}], "file": "conjure-core/src/main/java/com/palantir/conjure/parser/ConjureParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(File file)", "modifiers": "public static", "return": "ConjureSourceFile", "body": "public static ConjureSourceFile parse(File file) {\n        RecursiveParser parser = new RecursiveParser();\n        return parser.parse(file);\n    }", "signature": "ConjureSourceFile parse(File file)", "full_signature": "public static ConjureSourceFile parse(File file)", "class_method_signature": "ConjureParser.parse(File file)", "testcase": false, "constructor": false, "invocations": ["parse"]}, "repository": {"repo_id": 134616422, "url": "https://github.com/palantir/conjure", "stars": 211, "created": "5/23/2018 7:28:43 PM +00:00", "updates": "2020-01-24T17:51:52+00:00", "fork": "False", "license": "licensed"}}