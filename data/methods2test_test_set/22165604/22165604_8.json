{"test_class": {"identifier": "ApkProviderTest", "superclass": "extends FDroidProviderTest", "interfaces": "", "fields": [{"original_string": "private static final String[] PROJ = Cols.ALL;", "modifier": "private static final", "type": "String[]", "declarator": "PROJ = Cols.ALL", "var_name": "PROJ"}, {"original_string": "private static final long REPO_KEEP = 1;", "modifier": "private static final", "type": "long", "declarator": "REPO_KEEP = 1", "var_name": "REPO_KEEP"}, {"original_string": "private static final long REPO_DELETE = 2;", "modifier": "private static final", "type": "long", "declarator": "REPO_DELETE = 2", "var_name": "REPO_DELETE"}], "file": "app/src/test/java/org/fdroid/fdroid/data/ApkProviderTest.java"}, "test_case": {"identifier": "testUpdate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUpdate() {\n\n        Uri apkUri = Assert.insertApk(context, \"com.example\", 10);\n\n        String[] allFields = Cols.ALL;\n        Cursor cursor = contentResolver.query(apkUri, allFields, null, null, null);\n        assertResultCount(1, cursor);\n\n        cursor.moveToFirst();\n        Apk apk = new Apk(cursor);\n        cursor.close();\n\n        assertEquals(\"com.example\", apk.packageName);\n        assertEquals(10, apk.versionCode);\n\n        assertNull(apk.antiFeatures);\n        assertNull(apk.features);\n        assertNull(apk.added);\n        assertNull(apk.hashType);\n\n        apk.antiFeatures = new String[]{\"KnownVuln\", \"Other anti feature\"};\n        apk.features = new String[]{\"one\", \"two\", \"three\"};\n        apk.hashType = \"i'm a hash type\";\n\n        Date testTime = Utils.parseDate(Utils.formatTime(new Date(System.currentTimeMillis()), null), null);\n        apk.added = testTime;\n\n        ApkProvider.Helper.update(context, apk);\n\n        // Should not have inserted anything else, just updated the already existing apk.\n        Cursor allCursor = contentResolver.query(ApkProvider.getContentUri(), allFields, null, null, null);\n        assertResultCount(1, allCursor);\n        allCursor.close();\n\n        Cursor updatedCursor = contentResolver.query(apkUri, allFields, null, null, null);\n        assertResultCount(1, updatedCursor);\n\n        updatedCursor.moveToFirst();\n        Apk updatedApk = new Apk(updatedCursor);\n        updatedCursor.close();\n\n        assertEquals(\"com.example\", updatedApk.packageName);\n        assertEquals(10, updatedApk.versionCode);\n\n        assertArrayEquals(new String[]{\"KnownVuln\", \"Other anti feature\"}, updatedApk.antiFeatures);\n        assertArrayEquals(new String[]{\"one\", \"two\", \"three\"}, updatedApk.features);\n        assertEquals(testTime.getYear(), updatedApk.added.getYear());\n        assertEquals(testTime.getYear(), updatedApk.added.getYear());\n        assertEquals(testTime.getMonth(), updatedApk.added.getMonth());\n        assertEquals(testTime.getDay(), updatedApk.added.getDay());\n        assertEquals(\"i'm a hash type\", updatedApk.hashType);\n    }", "signature": "void testUpdate()", "full_signature": "@Test public void testUpdate()", "class_method_signature": "ApkProviderTest.testUpdate()", "testcase": true, "constructor": false, "invocations": ["insertApk", "query", "assertResultCount", "moveToFirst", "close", "assertEquals", "assertEquals", "assertNull", "assertNull", "assertNull", "assertNull", "parseDate", "formatTime", "currentTimeMillis", "update", "query", "getContentUri", "assertResultCount", "close", "query", "assertResultCount", "moveToFirst", "close", "assertEquals", "assertEquals", "assertArrayEquals", "assertArrayEquals", "assertEquals", "getYear", "getYear", "assertEquals", "getYear", "getYear", "assertEquals", "getMonth", "getMonth", "assertEquals", "getDay", "getDay", "assertEquals"]}, "focal_class": {"identifier": "ApkProvider", "superclass": "extends FDroidProvider", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"ApkProvider\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"ApkProvider\"", "var_name": "TAG"}, {"original_string": "static final int MAX_APKS_TO_QUERY = 450;", "modifier": "static final", "type": "int", "declarator": "MAX_APKS_TO_QUERY = 450", "var_name": "MAX_APKS_TO_QUERY"}, {"original_string": "private static final int CODE_PACKAGE = CODE_SINGLE + 1;", "modifier": "private static final", "type": "int", "declarator": "CODE_PACKAGE = CODE_SINGLE + 1", "var_name": "CODE_PACKAGE"}, {"original_string": "private static final int CODE_REPO = CODE_PACKAGE + 1;", "modifier": "private static final", "type": "int", "declarator": "CODE_REPO = CODE_PACKAGE + 1", "var_name": "CODE_REPO"}, {"original_string": "private static final int CODE_APKS = CODE_REPO + 1;", "modifier": "private static final", "type": "int", "declarator": "CODE_APKS = CODE_REPO + 1", "var_name": "CODE_APKS"}, {"original_string": "private static final int CODE_APK_ROW_ID = CODE_APKS + 1;", "modifier": "private static final", "type": "int", "declarator": "CODE_APK_ROW_ID = CODE_APKS + 1", "var_name": "CODE_APK_ROW_ID"}, {"original_string": "static final int CODE_APK_FROM_ANY_REPO = CODE_APK_ROW_ID + 1;", "modifier": "static final", "type": "int", "declarator": "CODE_APK_FROM_ANY_REPO = CODE_APK_ROW_ID + 1", "var_name": "CODE_APK_FROM_ANY_REPO"}, {"original_string": "static final int CODE_APK_FROM_REPO = CODE_APK_FROM_ANY_REPO + 1;", "modifier": "static final", "type": "int", "declarator": "CODE_APK_FROM_REPO = CODE_APK_FROM_ANY_REPO + 1", "var_name": "CODE_APK_FROM_REPO"}, {"original_string": "private static final int CODE_REPO_APP = CODE_APK_FROM_REPO + 1;", "modifier": "private static final", "type": "int", "declarator": "CODE_REPO_APP = CODE_APK_FROM_REPO + 1", "var_name": "CODE_REPO_APP"}, {"original_string": "private static final String PROVIDER_NAME = \"ApkProvider\";", "modifier": "private static final", "type": "String", "declarator": "PROVIDER_NAME = \"ApkProvider\"", "var_name": "PROVIDER_NAME"}, {"original_string": "protected static final String PATH_APK_FROM_ANY_REPO = \"apk-any-repo\";", "modifier": "protected static final", "type": "String", "declarator": "PATH_APK_FROM_ANY_REPO = \"apk-any-repo\"", "var_name": "PATH_APK_FROM_ANY_REPO"}, {"original_string": "protected static final String PATH_APK_FROM_REPO = \"apk-from-repo\";", "modifier": "protected static final", "type": "String", "declarator": "PATH_APK_FROM_REPO = \"apk-from-repo\"", "var_name": "PATH_APK_FROM_REPO"}, {"original_string": "protected static final String PATH_REPO_APP = \"repo-app\";", "modifier": "protected static final", "type": "String", "declarator": "PATH_REPO_APP = \"repo-app\"", "var_name": "PATH_REPO_APP"}, {"original_string": "private static final String PATH_APKS = \"apks\";", "modifier": "private static final", "type": "String", "declarator": "PATH_APKS = \"apks\"", "var_name": "PATH_APKS"}, {"original_string": "private static final String PATH_APP = \"app\";", "modifier": "private static final", "type": "String", "declarator": "PATH_APP = \"app\"", "var_name": "PATH_APP"}, {"original_string": "private static final String PATH_REPO = \"repo\";", "modifier": "private static final", "type": "String", "declarator": "PATH_REPO = \"repo\"", "var_name": "PATH_REPO"}, {"original_string": "private static final String PATH_APK_ROW_ID = \"apk-rowId\";", "modifier": "private static final", "type": "String", "declarator": "PATH_APK_ROW_ID = \"apk-rowId\"", "var_name": "PATH_APK_ROW_ID"}, {"original_string": "private static final UriMatcher MATCHER = new UriMatcher(-1);", "modifier": "private static final", "type": "UriMatcher", "declarator": "MATCHER = new UriMatcher(-1)", "var_name": "MATCHER"}, {"original_string": "private static final Map<String, String> REPO_FIELDS = new HashMap<>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "REPO_FIELDS = new HashMap<>()", "var_name": "REPO_FIELDS"}, {"original_string": "private static final Map<String, String> PACKAGE_FIELDS = new HashMap<>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "PACKAGE_FIELDS = new HashMap<>()", "var_name": "PACKAGE_FIELDS"}], "methods": [{"identifier": "getAuthority", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getAuthority()", "full_signature": "public static String getAuthority()", "class_method_signature": "ApkProvider.getAuthority()", "testcase": false, "constructor": false}, {"identifier": "getContentUri", "parameters": "()", "modifiers": "public static", "return": "Uri", "signature": "Uri getContentUri()", "full_signature": "public static Uri getContentUri()", "class_method_signature": "ApkProvider.getContentUri()", "testcase": false, "constructor": false}, {"identifier": "getApkUri", "parameters": "(long apkRowId)", "modifiers": "private", "return": "Uri", "signature": "Uri getApkUri(long apkRowId)", "full_signature": "private Uri getApkUri(long apkRowId)", "class_method_signature": "ApkProvider.getApkUri(long apkRowId)", "testcase": false, "constructor": false}, {"identifier": "getAppUri", "parameters": "(String packageName)", "modifiers": "public static", "return": "Uri", "signature": "Uri getAppUri(String packageName)", "full_signature": "public static Uri getAppUri(String packageName)", "class_method_signature": "ApkProvider.getAppUri(String packageName)", "testcase": false, "constructor": false}, {"identifier": "getRepoUri", "parameters": "(long repoId)", "modifiers": "public static", "return": "Uri", "signature": "Uri getRepoUri(long repoId)", "full_signature": "public static Uri getRepoUri(long repoId)", "class_method_signature": "ApkProvider.getRepoUri(long repoId)", "testcase": false, "constructor": false}, {"identifier": "getRepoUri", "parameters": "(long repoId, String packageName)", "modifiers": "public static", "return": "Uri", "signature": "Uri getRepoUri(long repoId, String packageName)", "full_signature": "public static Uri getRepoUri(long repoId, String packageName)", "class_method_signature": "ApkProvider.getRepoUri(long repoId, String packageName)", "testcase": false, "constructor": false}, {"identifier": "getApkFromAnyRepoUri", "parameters": "(Apk apk)", "modifiers": "public static", "return": "Uri", "signature": "Uri getApkFromAnyRepoUri(Apk apk)", "full_signature": "public static Uri getApkFromAnyRepoUri(Apk apk)", "class_method_signature": "ApkProvider.getApkFromAnyRepoUri(Apk apk)", "testcase": false, "constructor": false}, {"identifier": "getApkFromAnyRepoUri", "parameters": "(String packageName, int versionCode, @Nullable String signature)", "modifiers": "public static", "return": "Uri", "signature": "Uri getApkFromAnyRepoUri(String packageName, int versionCode, @Nullable String signature)", "full_signature": "public static Uri getApkFromAnyRepoUri(String packageName, int versionCode, @Nullable String signature)", "class_method_signature": "ApkProvider.getApkFromAnyRepoUri(String packageName, int versionCode, @Nullable String signature)", "testcase": false, "constructor": false}, {"identifier": "getTableName", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getTableName()", "full_signature": "@Override protected String getTableName()", "class_method_signature": "ApkProvider.getTableName()", "testcase": false, "constructor": false}, {"identifier": "getApkAntiFeatureJoinTableName", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getApkAntiFeatureJoinTableName()", "full_signature": "protected String getApkAntiFeatureJoinTableName()", "class_method_signature": "ApkProvider.getApkAntiFeatureJoinTableName()", "testcase": false, "constructor": false}, {"identifier": "getAppTableName", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getAppTableName()", "full_signature": "protected String getAppTableName()", "class_method_signature": "ApkProvider.getAppTableName()", "testcase": false, "constructor": false}, {"identifier": "getProviderName", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getProviderName()", "full_signature": "@Override protected String getProviderName()", "class_method_signature": "ApkProvider.getProviderName()", "testcase": false, "constructor": false}, {"identifier": "getMatcher", "parameters": "()", "modifiers": "@Override protected", "return": "UriMatcher", "signature": "UriMatcher getMatcher()", "full_signature": "@Override protected UriMatcher getMatcher()", "class_method_signature": "ApkProvider.getMatcher()", "testcase": false, "constructor": false}, {"identifier": "queryPackage", "parameters": "(String packageName)", "modifiers": "private", "return": "QuerySelection", "signature": "QuerySelection queryPackage(String packageName)", "full_signature": "private QuerySelection queryPackage(String packageName)", "class_method_signature": "ApkProvider.queryPackage(String packageName)", "testcase": false, "constructor": false}, {"identifier": "querySingleFromAnyRepo", "parameters": "(Uri uri)", "modifiers": "private", "return": "QuerySelection", "signature": "QuerySelection querySingleFromAnyRepo(Uri uri)", "full_signature": "private QuerySelection querySingleFromAnyRepo(Uri uri)", "class_method_signature": "ApkProvider.querySingleFromAnyRepo(Uri uri)", "testcase": false, "constructor": false}, {"identifier": "querySingleFromAnyRepo", "parameters": "(Uri uri, boolean includeAlias)", "modifiers": "private", "return": "QuerySelection", "signature": "QuerySelection querySingleFromAnyRepo(Uri uri, boolean includeAlias)", "full_signature": "private QuerySelection querySingleFromAnyRepo(Uri uri, boolean includeAlias)", "class_method_signature": "ApkProvider.querySingleFromAnyRepo(Uri uri, boolean includeAlias)", "testcase": false, "constructor": false}, {"identifier": "querySingle", "parameters": "(long apkRowId)", "modifiers": "private", "return": "QuerySelection", "signature": "QuerySelection querySingle(long apkRowId)", "full_signature": "private QuerySelection querySingle(long apkRowId)", "class_method_signature": "ApkProvider.querySingle(long apkRowId)", "testcase": false, "constructor": false}, {"identifier": "querySingle", "parameters": "(long apkRowId, boolean includeAlias)", "modifiers": "private", "return": "QuerySelection", "signature": "QuerySelection querySingle(long apkRowId, boolean includeAlias)", "full_signature": "private QuerySelection querySingle(long apkRowId, boolean includeAlias)", "class_method_signature": "ApkProvider.querySingle(long apkRowId, boolean includeAlias)", "testcase": false, "constructor": false}, {"identifier": "querySingleWithAppId", "parameters": "(Uri uri)", "modifiers": "private", "return": "QuerySelection", "signature": "QuerySelection querySingleWithAppId(Uri uri)", "full_signature": "private QuerySelection querySingleWithAppId(Uri uri)", "class_method_signature": "ApkProvider.querySingleWithAppId(Uri uri)", "testcase": false, "constructor": false}, {"identifier": "queryRepo", "parameters": "(long repoId)", "modifiers": "protected", "return": "QuerySelection", "signature": "QuerySelection queryRepo(long repoId)", "full_signature": "protected QuerySelection queryRepo(long repoId)", "class_method_signature": "ApkProvider.queryRepo(long repoId)", "testcase": false, "constructor": false}, {"identifier": "queryRepo", "parameters": "(long repoId, boolean includeAlias)", "modifiers": "protected", "return": "QuerySelection", "signature": "QuerySelection queryRepo(long repoId, boolean includeAlias)", "full_signature": "protected QuerySelection queryRepo(long repoId, boolean includeAlias)", "class_method_signature": "ApkProvider.queryRepo(long repoId, boolean includeAlias)", "testcase": false, "constructor": false}, {"identifier": "queryApks", "parameters": "(String apkKeys)", "modifiers": "protected", "return": "QuerySelection", "signature": "QuerySelection queryApks(String apkKeys)", "full_signature": "protected QuerySelection queryApks(String apkKeys)", "class_method_signature": "ApkProvider.queryApks(String apkKeys)", "testcase": false, "constructor": false}, {"identifier": "queryApks", "parameters": "(String apkKeys, boolean includeAlias)", "modifiers": "protected", "return": "QuerySelection", "signature": "QuerySelection queryApks(String apkKeys, boolean includeAlias)", "full_signature": "protected QuerySelection queryApks(String apkKeys, boolean includeAlias)", "class_method_signature": "ApkProvider.queryApks(String apkKeys, boolean includeAlias)", "testcase": false, "constructor": false}, {"identifier": "getMetadataIdFromPackageNameQuery", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getMetadataIdFromPackageNameQuery()", "full_signature": "private String getMetadataIdFromPackageNameQuery()", "class_method_signature": "ApkProvider.getMetadataIdFromPackageNameQuery()", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(@NonNull Uri uri, String[] projection, String selection,\n                        String[] selectionArgs, String sortOrder)", "modifiers": "@Override public", "return": "Cursor", "signature": "Cursor query(@NonNull Uri uri, String[] projection, String selection,\n                        String[] selectionArgs, String sortOrder)", "full_signature": "@Override public Cursor query(@NonNull Uri uri, String[] projection, String selection,\n                        String[] selectionArgs, String sortOrder)", "class_method_signature": "ApkProvider.query(@NonNull Uri uri, String[] projection, String selection,\n                        String[] selectionArgs, String sortOrder)", "testcase": false, "constructor": false}, {"identifier": "removeFieldsFromOtherTables", "parameters": "(ContentValues values)", "modifiers": "private static", "return": "void", "signature": "void removeFieldsFromOtherTables(ContentValues values)", "full_signature": "private static void removeFieldsFromOtherTables(ContentValues values)", "class_method_signature": "ApkProvider.removeFieldsFromOtherTables(ContentValues values)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(@NonNull Uri uri, ContentValues values)", "modifiers": "@Override public", "return": "Uri", "signature": "Uri insert(@NonNull Uri uri, ContentValues values)", "full_signature": "@Override public Uri insert(@NonNull Uri uri, ContentValues values)", "class_method_signature": "ApkProvider.insert(@NonNull Uri uri, ContentValues values)", "testcase": false, "constructor": false}, {"identifier": "ensureAntiFeatures", "parameters": "(String[] antiFeatures, long apkId)", "modifiers": "protected", "return": "void", "signature": "void ensureAntiFeatures(String[] antiFeatures, long apkId)", "full_signature": "protected void ensureAntiFeatures(String[] antiFeatures, long apkId)", "class_method_signature": "ApkProvider.ensureAntiFeatures(String[] antiFeatures, long apkId)", "testcase": false, "constructor": false}, {"identifier": "ensureAntiFeature", "parameters": "(String antiFeatureName)", "modifiers": "protected", "return": "long", "signature": "long ensureAntiFeature(String antiFeatureName)", "full_signature": "protected long ensureAntiFeature(String antiFeatureName)", "class_method_signature": "ApkProvider.ensureAntiFeature(String antiFeatureName)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@NonNull Uri uri, String where, String[] whereArgs)", "modifiers": "@Override public", "return": "int", "signature": "int delete(@NonNull Uri uri, String where, String[] whereArgs)", "full_signature": "@Override public int delete(@NonNull Uri uri, String where, String[] whereArgs)", "class_method_signature": "ApkProvider.delete(@NonNull Uri uri, String where, String[] whereArgs)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@NonNull Uri uri, ContentValues values, String where, String[] whereArgs)", "modifiers": "@Override public", "return": "int", "signature": "int update(@NonNull Uri uri, ContentValues values, String where, String[] whereArgs)", "full_signature": "@Override public int update(@NonNull Uri uri, ContentValues values, String where, String[] whereArgs)", "class_method_signature": "ApkProvider.update(@NonNull Uri uri, ContentValues values, String where, String[] whereArgs)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/fdroid/fdroid/data/ApkProvider.java"}, "focal_method": {"identifier": "update", "parameters": "(@NonNull Uri uri, ContentValues values, String where, String[] whereArgs)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int update(@NonNull Uri uri, ContentValues values, String where, String[] whereArgs) {\n        if (MATCHER.match(uri) != CODE_APK_FROM_REPO) {\n            throw new UnsupportedOperationException(\"Cannot update anything other than a single apk.\");\n        }\n\n        boolean saveAntiFeatures = false;\n        String[] antiFeatures = null;\n        if (values.containsKey(Cols.AntiFeatures.ANTI_FEATURES)) {\n            saveAntiFeatures = true;\n            String antiFeaturesString = values.getAsString(Cols.AntiFeatures.ANTI_FEATURES);\n            antiFeatures = Utils.parseCommaSeparatedString(antiFeaturesString);\n            values.remove(Cols.AntiFeatures.ANTI_FEATURES);\n        }\n\n        validateFields(Cols.ALL, values);\n        removeFieldsFromOtherTables(values);\n\n        QuerySelection query = new QuerySelection(where, whereArgs);\n        query = query.add(querySingleWithAppId(uri));\n\n        int numRows = db().update(getTableName(), values, query.getSelection(), query.getArgs());\n\n        if (saveAntiFeatures) {\n            // Get the database ID of the row we just updated, so that we can join relevant anti features to it.\n            Cursor result = db().query(getTableName(), new String[]{Cols.ROW_ID},\n                    query.getSelection(), query.getArgs(), null, null, null);\n            if (result != null) {\n                result.moveToFirst();\n                long apkId = result.getLong(0);\n                ensureAntiFeatures(antiFeatures, apkId);\n                result.close();\n            }\n        }\n\n        if (!isApplyingBatch()) {\n            getContext().getContentResolver().notifyChange(uri, null);\n        }\n        return numRows;\n    }", "signature": "int update(@NonNull Uri uri, ContentValues values, String where, String[] whereArgs)", "full_signature": "@Override public int update(@NonNull Uri uri, ContentValues values, String where, String[] whereArgs)", "class_method_signature": "ApkProvider.update(@NonNull Uri uri, ContentValues values, String where, String[] whereArgs)", "testcase": false, "constructor": false, "invocations": ["match", "containsKey", "getAsString", "parseCommaSeparatedString", "remove", "validateFields", "removeFieldsFromOtherTables", "add", "querySingleWithAppId", "update", "db", "getTableName", "getSelection", "getArgs", "query", "db", "getTableName", "getSelection", "getArgs", "moveToFirst", "getLong", "ensureAntiFeatures", "close", "isApplyingBatch", "notifyChange", "getContentResolver", "getContext"]}, "repository": {"repo_id": 22165604, "url": "https://github.com/f-droid/fdroidclient", "stars": 331, "created": "7/23/2014 5:46:02 PM +00:00", "updates": "2020-01-25T14:27:31+00:00", "fork": "False", "license": "licensed"}}