{"test_class": {"identifier": "HttpUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final String testUrl = \"http://www.pegelonline.wsv.de/webservices/rest-api/v2/waters.json?includeStations=true&includeTimeseries=true&includeCurrentMeasurement=true\";", "modifier": "final", "type": "String", "declarator": "testUrl = \"http://www.pegelonline.wsv.de/webservices/rest-api/v2/waters.json?includeStations=true&includeTimeseries=true&includeCurrentMeasurement=true\"", "var_name": "testUrl"}, {"original_string": "@Mocked\n\tprivate UriInfo uriInfo;", "modifier": "@Mocked\n\tprivate", "type": "UriInfo", "declarator": "uriInfo", "var_name": "uriInfo"}], "file": "server/src/test/java/org/jvalue/ods/utils/HttpUtilsTest.java"}, "test_case": {"identifier": "testHttpJsonReaderWithNullUrl", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n\tpublic void testHttpJsonReaderWithNullUrl() throws IOException {\n\t\tHttpUtils.readUrl(null, null);\n\t}", "signature": "void testHttpJsonReaderWithNullUrl()", "full_signature": "@Test(expected = NullPointerException.class) public void testHttpJsonReaderWithNullUrl()", "class_method_signature": "HttpUtilsTest.testHttpJsonReaderWithNullUrl()", "testcase": true, "constructor": false, "invocations": ["readUrl"]}, "focal_class": {"identifier": "HttpUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "HttpUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " HttpUtils()", "full_signature": "private  HttpUtils()", "class_method_signature": "HttpUtils.HttpUtils()", "testcase": false, "constructor": true}, {"identifier": "readUrl", "parameters": "(URL url, String charsetName)", "modifiers": "public static", "return": "String", "signature": "String readUrl(URL url, String charsetName)", "full_signature": "public static String readUrl(URL url, String charsetName)", "class_method_signature": "HttpUtils.readUrl(URL url, String charsetName)", "testcase": false, "constructor": false}, {"identifier": "appendTrailingSlash", "parameters": "(URI uri)", "modifiers": "public static", "return": "URI", "signature": "URI appendTrailingSlash(URI uri)", "full_signature": "public static URI appendTrailingSlash(URI uri)", "class_method_signature": "HttpUtils.appendTrailingSlash(URI uri)", "testcase": false, "constructor": false}, {"identifier": "getSanitizedPath", "parameters": "(UriInfo uriInfo)", "modifiers": "public static", "return": "URI", "signature": "URI getSanitizedPath(UriInfo uriInfo)", "full_signature": "public static URI getSanitizedPath(UriInfo uriInfo)", "class_method_signature": "HttpUtils.getSanitizedPath(UriInfo uriInfo)", "testcase": false, "constructor": false}, {"identifier": "getDirectoryURI", "parameters": "(UriInfo uriInfo)", "modifiers": "public static", "return": "URI", "signature": "URI getDirectoryURI(UriInfo uriInfo)", "full_signature": "public static URI getDirectoryURI(UriInfo uriInfo)", "class_method_signature": "HttpUtils.getDirectoryURI(UriInfo uriInfo)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/jvalue/ods/utils/HttpUtils.java"}, "focal_method": {"identifier": "readUrl", "parameters": "(URL url, String charsetName)", "modifiers": "public static", "return": "String", "body": "public static String readUrl(URL url, String charsetName) throws IOException {\n\t\tAssert.assertNotNull(url, charsetName);\n\n\t\tBufferedReader reader = null;\n\t\ttry {\n\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\tconnection.setRequestMethod(\"GET\");\n\n\t\t\treader = new BufferedReader(new InputStreamReader(\n\t\t\t\tconnection.getInputStream(),\n\t\t\t\tCharset.forName(charsetName)));\n\n\t\t\tStringBuilder stringBuilder = new StringBuilder();\n\t\t\tString line;\n\t\t\twhile ((line = reader.readLine()) != null) {\n\t\t\t\tstringBuilder.append(line);\n\t\t\t}\n\t\t\treturn stringBuilder.toString();\n\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (reader != null) reader.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\tLog.error(\"Failed to close reader\", e);\n\t\t\t}\n\t\t}\n\t}", "signature": "String readUrl(URL url, String charsetName)", "full_signature": "public static String readUrl(URL url, String charsetName)", "class_method_signature": "HttpUtils.readUrl(URL url, String charsetName)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "openConnection", "setRequestMethod", "getInputStream", "forName", "readLine", "append", "toString", "close", "error"]}, "repository": {"repo_id": 14989619, "url": "https://github.com/jvalue/open-data-service-v1", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 6, "size": 4525, "license": "licensed"}}