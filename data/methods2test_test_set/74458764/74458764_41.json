{"test_class": {"identifier": "TestSessionManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExecutorFacade executors;", "modifier": "private", "type": "ExecutorFacade", "declarator": "executors", "var_name": "executors"}, {"original_string": "private SessionFactory factory;", "modifier": "private", "type": "SessionFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private SessionRepository repository;", "modifier": "private", "type": "SessionRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private SessionTracking tracking;", "modifier": "private", "type": "SessionTracking", "declarator": "tracking", "var_name": "tracking"}, {"original_string": "private SessionNotifier notifier;", "modifier": "private", "type": "SessionNotifier", "declarator": "notifier", "var_name": "notifier"}, {"original_string": "private SessionConfiguration configuration;", "modifier": "private", "type": "SessionConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private SessionManager sessionManager;", "modifier": "private", "type": "SessionManager", "declarator": "sessionManager", "var_name": "sessionManager"}, {"original_string": "private MetricRegistry metrics;", "modifier": "private", "type": "MetricRegistry", "declarator": "metrics", "var_name": "metrics"}], "file": "session-replacement/src/test/java/com/amadeus/session/TestSessionManager.java"}, "test_case": {"identifier": "testScheduleWithTimer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testScheduleWithTimer() {\n    Runnable runnable = mock(Runnable.class);\n    sessionManager.schedule(\"test\", runnable, 10);\n    ArgumentCaptor<SessionManager.RunnableWithTimer> arg = ArgumentCaptor\n        .forClass(SessionManager.RunnableWithTimer.class);\n    verify(executors).scheduleAtFixedRate(arg.capture(), eq(10L), eq(10L), eq(TimeUnit.SECONDS));\n    assertNotNull(arg.getValue().timer);\n    assertSame(runnable, arg.getValue().task);\n  }", "signature": "void testScheduleWithTimer()", "full_signature": "@Test public void testScheduleWithTimer()", "class_method_signature": "TestSessionManager.testScheduleWithTimer()", "testcase": true, "constructor": false, "invocations": ["mock", "schedule", "forClass", "scheduleAtFixedRate", "verify", "capture", "eq", "eq", "eq", "assertNotNull", "getValue", "assertSame", "getValue"]}, "focal_class": {"identifier": "SessionManager", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SessionManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SessionManager.class)", "var_name": "logger"}, {"original_string": "static final String SESSIONS_METRIC_PREFIX = \"com.amadeus.session\";", "modifier": "static final", "type": "String", "declarator": "SESSIONS_METRIC_PREFIX = \"com.amadeus.session\"", "var_name": "SESSIONS_METRIC_PREFIX"}, {"original_string": "private static final String COMMIT_TIMER_METRIC = name(SESSIONS_METRIC_PREFIX, \"timer\", \"commit\");", "modifier": "private static final", "type": "String", "declarator": "COMMIT_TIMER_METRIC = name(SESSIONS_METRIC_PREFIX, \"timer\", \"commit\")", "var_name": "COMMIT_TIMER_METRIC"}, {"original_string": "private static final String FETCH_TIMER_METRIC = name(SESSIONS_METRIC_PREFIX, \"timer\", \"fetch\");", "modifier": "private static final", "type": "String", "declarator": "FETCH_TIMER_METRIC = name(SESSIONS_METRIC_PREFIX, \"timer\", \"fetch\")", "var_name": "FETCH_TIMER_METRIC"}, {"original_string": "private static final String CREATED_SESSIONS_METRIC = name(SESSIONS_METRIC_PREFIX, \"created\");", "modifier": "private static final", "type": "String", "declarator": "CREATED_SESSIONS_METRIC = name(SESSIONS_METRIC_PREFIX, \"created\")", "var_name": "CREATED_SESSIONS_METRIC"}, {"original_string": "private static final String DELETED_SESSIONS_METRIC = name(SESSIONS_METRIC_PREFIX, \"deleted\");", "modifier": "private static final", "type": "String", "declarator": "DELETED_SESSIONS_METRIC = name(SESSIONS_METRIC_PREFIX, \"deleted\")", "var_name": "DELETED_SESSIONS_METRIC"}, {"original_string": "private static final String MISSING_SESSIONS_METRIC = name(SESSIONS_METRIC_PREFIX, \"missing\");", "modifier": "private static final", "type": "String", "declarator": "MISSING_SESSIONS_METRIC = name(SESSIONS_METRIC_PREFIX, \"missing\")", "var_name": "MISSING_SESSIONS_METRIC"}, {"original_string": "private static final String RETRIEVED_SESSIONS_METRIC = name(SESSIONS_METRIC_PREFIX, \"retrieved\");", "modifier": "private static final", "type": "String", "declarator": "RETRIEVED_SESSIONS_METRIC = name(SESSIONS_METRIC_PREFIX, \"retrieved\")", "var_name": "RETRIEVED_SESSIONS_METRIC"}, {"original_string": "static final String INVALIDATION_ON_EXPIRY_ERRORS_METRIC = name(SESSIONS_METRIC_PREFIX, \"invalidation\", \"errors\",\n      \"expiry\");", "modifier": "static final", "type": "String", "declarator": "INVALIDATION_ON_EXPIRY_ERRORS_METRIC = name(SESSIONS_METRIC_PREFIX, \"invalidation\", \"errors\",\n      \"expiry\")", "var_name": "INVALIDATION_ON_EXPIRY_ERRORS_METRIC"}, {"original_string": "static final String INVALIDATION_ERRORS_METRIC = name(SESSIONS_METRIC_PREFIX, \"invalidation\", \"errors\");", "modifier": "static final", "type": "String", "declarator": "INVALIDATION_ERRORS_METRIC = name(SESSIONS_METRIC_PREFIX, \"invalidation\", \"errors\")", "var_name": "INVALIDATION_ERRORS_METRIC"}, {"original_string": "static final String SESSION_PROPAGATED = \"com.amadeus.session.sessionPropagated\";", "modifier": "static final", "type": "String", "declarator": "SESSION_PROPAGATED = \"com.amadeus.session.sessionPropagated\"", "var_name": "SESSION_PROPAGATED"}, {"original_string": "protected final SessionRepository repository;", "modifier": "protected final", "type": "SessionRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "protected final SessionNotifier notifier;", "modifier": "protected final", "type": "SessionNotifier", "declarator": "notifier", "var_name": "notifier"}, {"original_string": "protected final SessionTracking tracking;", "modifier": "protected final", "type": "SessionTracking", "declarator": "tracking", "var_name": "tracking"}, {"original_string": "protected final SessionFactory factory;", "modifier": "protected final", "type": "SessionFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "protected final ExecutorFacade executors;", "modifier": "protected final", "type": "ExecutorFacade", "declarator": "executors", "var_name": "executors"}, {"original_string": "protected final SessionConfiguration configuration;", "modifier": "protected final", "type": "SessionConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "protected final SerializerDeserializer serializerDeserializer;", "modifier": "protected final", "type": "SerializerDeserializer", "declarator": "serializerDeserializer", "var_name": "serializerDeserializer"}, {"original_string": "private final Meter createdSessions;", "modifier": "private final", "type": "Meter", "declarator": "createdSessions", "var_name": "createdSessions"}, {"original_string": "private final Meter deletedSessions;", "modifier": "private final", "type": "Meter", "declarator": "deletedSessions", "var_name": "deletedSessions"}, {"original_string": "private final Meter retrievedSessions;", "modifier": "private final", "type": "Meter", "declarator": "retrievedSessions", "var_name": "retrievedSessions"}, {"original_string": "private final Meter invalidationErrors;", "modifier": "private final", "type": "Meter", "declarator": "invalidationErrors", "var_name": "invalidationErrors"}, {"original_string": "private final Meter invalidationExpiryErrors;", "modifier": "private final", "type": "Meter", "declarator": "invalidationExpiryErrors", "var_name": "invalidationExpiryErrors"}, {"original_string": "private final Meter missingSessions;", "modifier": "private final", "type": "Meter", "declarator": "missingSessions", "var_name": "missingSessions"}, {"original_string": "private final Timer commitTimer;", "modifier": "private final", "type": "Timer", "declarator": "commitTimer", "var_name": "commitTimer"}, {"original_string": "private final Timer fetchTimer;", "modifier": "private final", "type": "Timer", "declarator": "fetchTimer", "var_name": "fetchTimer"}, {"original_string": "private final MetricRegistry monitoring;", "modifier": "private final", "type": "MetricRegistry", "declarator": "monitoring", "var_name": "monitoring"}, {"original_string": "private final ClassLoader classLoader;", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}, {"original_string": "private JmxReporter reporter;", "modifier": "private", "type": "JmxReporter", "declarator": "reporter", "var_name": "reporter"}], "methods": [{"identifier": "SessionManager", "parameters": "(ExecutorFacade executors, SessionFactory factory, SessionRepository repository,\n      SessionTracking tracking, SessionNotifier notifier, SessionConfiguration configuration, ClassLoader classLoader)", "modifiers": "public", "return": "", "signature": " SessionManager(ExecutorFacade executors, SessionFactory factory, SessionRepository repository,\n      SessionTracking tracking, SessionNotifier notifier, SessionConfiguration configuration, ClassLoader classLoader)", "full_signature": "public  SessionManager(ExecutorFacade executors, SessionFactory factory, SessionRepository repository,\n      SessionTracking tracking, SessionNotifier notifier, SessionConfiguration configuration, ClassLoader classLoader)", "class_method_signature": "SessionManager.SessionManager(ExecutorFacade executors, SessionFactory factory, SessionRepository repository,\n      SessionTracking tracking, SessionNotifier notifier, SessionConfiguration configuration, ClassLoader classLoader)", "testcase": false, "constructor": true}, {"identifier": "startMonitoring", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void startMonitoring()", "full_signature": "private void startMonitoring()", "class_method_signature": "SessionManager.startMonitoring()", "testcase": false, "constructor": false}, {"identifier": "getJmxDomain", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getJmxDomain()", "full_signature": "private String getJmxDomain()", "class_method_signature": "SessionManager.getJmxDomain()", "testcase": false, "constructor": false}, {"identifier": "fetchSession", "parameters": "(String sessionId, boolean updateTimestamp)", "modifiers": "public", "return": "RepositoryBackedSession", "signature": "RepositoryBackedSession fetchSession(String sessionId, boolean updateTimestamp)", "full_signature": "public RepositoryBackedSession fetchSession(String sessionId, boolean updateTimestamp)", "class_method_signature": "SessionManager.fetchSession(String sessionId, boolean updateTimestamp)", "testcase": false, "constructor": false}, {"identifier": "newSession", "parameters": "(String sessionId)", "modifiers": "private", "return": "RepositoryBackedSession", "signature": "RepositoryBackedSession newSession(String sessionId)", "full_signature": "private RepositoryBackedSession newSession(String sessionId)", "class_method_signature": "SessionManager.newSession(String sessionId)", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "(RequestWithSession request, boolean create,\n      SessionTracking.IdAndSource forceId)", "modifiers": "public", "return": "RepositoryBackedSession", "signature": "RepositoryBackedSession getSession(RequestWithSession request, boolean create,\n      SessionTracking.IdAndSource forceId)", "full_signature": "public RepositoryBackedSession getSession(RequestWithSession request, boolean create,\n      SessionTracking.IdAndSource forceId)", "class_method_signature": "SessionManager.getSession(RequestWithSession request, boolean create,\n      SessionTracking.IdAndSource forceId)", "testcase": false, "constructor": false}, {"identifier": "putIdInLoggingMdc", "parameters": "(String id)", "modifiers": "private", "return": "void", "signature": "void putIdInLoggingMdc(String id)", "full_signature": "private void putIdInLoggingMdc(String id)", "class_method_signature": "SessionManager.putIdInLoggingMdc(String id)", "testcase": false, "constructor": false}, {"identifier": "retrieveId", "parameters": "(RequestWithSession request, SessionTracking.IdAndSource forceId)", "modifiers": "private", "return": "SessionTracking.IdAndSource", "signature": "SessionTracking.IdAndSource retrieveId(RequestWithSession request, SessionTracking.IdAndSource forceId)", "full_signature": "private SessionTracking.IdAndSource retrieveId(RequestWithSession request, SessionTracking.IdAndSource forceId)", "class_method_signature": "SessionManager.retrieveId(RequestWithSession request, SessionTracking.IdAndSource forceId)", "testcase": false, "constructor": false}, {"identifier": "propagateSession", "parameters": "(RequestWithSession request, ResponseWithSessionId response)", "modifiers": "public", "return": "void", "signature": "void propagateSession(RequestWithSession request, ResponseWithSessionId response)", "full_signature": "public void propagateSession(RequestWithSession request, ResponseWithSessionId response)", "class_method_signature": "SessionManager.propagateSession(RequestWithSession request, ResponseWithSessionId response)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String sessionId, boolean expired)", "modifiers": "public", "return": "void", "signature": "void delete(String sessionId, boolean expired)", "full_signature": "public void delete(String sessionId, boolean expired)", "class_method_signature": "SessionManager.delete(String sessionId, boolean expired)", "testcase": false, "constructor": false}, {"identifier": "markSessionDeletion", "parameters": "(String sessionId)", "modifiers": "private", "return": "void", "signature": "void markSessionDeletion(String sessionId)", "full_signature": "private void markSessionDeletion(String sessionId)", "class_method_signature": "SessionManager.markSessionDeletion(String sessionId)", "testcase": false, "constructor": false}, {"identifier": "requestFinished", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void requestFinished()", "full_signature": "public void requestFinished()", "class_method_signature": "SessionManager.requestFinished()", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "(String timer, Runnable task)", "modifiers": "public", "return": "Future<?>", "signature": "Future<?> submit(String timer, Runnable task)", "full_signature": "public Future<?> submit(String timer, Runnable task)", "class_method_signature": "SessionManager.submit(String timer, Runnable task)", "testcase": false, "constructor": false}, {"identifier": "schedule", "parameters": "(String timer, Runnable task, long period)", "modifiers": "public", "return": "ScheduledFuture<?>", "signature": "ScheduledFuture<?> schedule(String timer, Runnable task, long period)", "full_signature": "public ScheduledFuture<?> schedule(String timer, Runnable task, long period)", "class_method_signature": "SessionManager.schedule(String timer, Runnable task, long period)", "testcase": false, "constructor": false}, {"identifier": "deleteAsync", "parameters": "(final String sessionId, final boolean expired)", "modifiers": "public", "return": "void", "signature": "void deleteAsync(final String sessionId, final boolean expired)", "full_signature": "public void deleteAsync(final String sessionId, final boolean expired)", "class_method_signature": "SessionManager.deleteAsync(final String sessionId, final boolean expired)", "testcase": false, "constructor": false}, {"identifier": "getRepository", "parameters": "()", "modifiers": "public", "return": "SessionRepository", "signature": "SessionRepository getRepository()", "full_signature": "public SessionRepository getRepository()", "class_method_signature": "SessionManager.getRepository()", "testcase": false, "constructor": false}, {"identifier": "getNotifier", "parameters": "()", "modifiers": "public", "return": "SessionNotifier", "signature": "SessionNotifier getNotifier()", "full_signature": "public SessionNotifier getNotifier()", "class_method_signature": "SessionManager.getNotifier()", "testcase": false, "constructor": false}, {"identifier": "invokeCommit", "parameters": "(RepositoryBackedSession session)", "modifiers": "public", "return": "void", "signature": "void invokeCommit(RepositoryBackedSession session)", "full_signature": "public void invokeCommit(RepositoryBackedSession session)", "class_method_signature": "SessionManager.invokeCommit(RepositoryBackedSession session)", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "public", "return": "SessionConfiguration", "signature": "SessionConfiguration getConfiguration()", "full_signature": "public SessionConfiguration getConfiguration()", "class_method_signature": "SessionManager.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getSessionClassLoader", "parameters": "()", "modifiers": "public", "return": "ClassLoader", "signature": "ClassLoader getSessionClassLoader()", "full_signature": "public ClassLoader getSessionClassLoader()", "class_method_signature": "SessionManager.getSessionClassLoader()", "testcase": false, "constructor": false}, {"identifier": "getSerializerDeserializer", "parameters": "()", "modifiers": "public", "return": "SerializerDeserializer", "signature": "SerializerDeserializer getSerializerDeserializer()", "full_signature": "public SerializerDeserializer getSerializerDeserializer()", "class_method_signature": "SessionManager.getSerializerDeserializer()", "testcase": false, "constructor": false}, {"identifier": "invalidationConflict", "parameters": "(RepositoryBackedSession session, boolean onExpiry)", "modifiers": "public", "return": "void", "signature": "void invalidationConflict(RepositoryBackedSession session, boolean onExpiry)", "full_signature": "public void invalidationConflict(RepositoryBackedSession session, boolean onExpiry)", "class_method_signature": "SessionManager.invalidationConflict(RepositoryBackedSession session, boolean onExpiry)", "testcase": false, "constructor": false}, {"identifier": "getMetrics", "parameters": "()", "modifiers": "public", "return": "MetricRegistry", "signature": "MetricRegistry getMetrics()", "full_signature": "public MetricRegistry getMetrics()", "class_method_signature": "SessionManager.getMetrics()", "testcase": false, "constructor": false}, {"identifier": "encodeUrl", "parameters": "(RequestWithSession request, String url)", "modifiers": "public", "return": "String", "signature": "String encodeUrl(RequestWithSession request, String url)", "full_signature": "public String encodeUrl(RequestWithSession request, String url)", "class_method_signature": "SessionManager.encodeUrl(RequestWithSession request, String url)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "SessionManager.reset()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SessionManager.close()", "testcase": false, "constructor": false}, {"identifier": "switchSessionId", "parameters": "(RepositoryBackedSession session)", "modifiers": "public", "return": "void", "signature": "void switchSessionId(RepositoryBackedSession session)", "full_signature": "public void switchSessionId(RepositoryBackedSession session)", "class_method_signature": "SessionManager.switchSessionId(RepositoryBackedSession session)", "testcase": false, "constructor": false}, {"identifier": "switchSessionId", "parameters": "(RepositoryBackedSession session, String forceId)", "modifiers": "public", "return": "void", "signature": "void switchSessionId(RepositoryBackedSession session, String forceId)", "full_signature": "public void switchSessionId(RepositoryBackedSession session, String forceId)", "class_method_signature": "SessionManager.switchSessionId(RepositoryBackedSession session, String forceId)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SessionManager.toString()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(SessionData sessionData)", "modifiers": "public", "return": "void", "signature": "void remove(SessionData sessionData)", "full_signature": "public void remove(SessionData sessionData)", "class_method_signature": "SessionManager.remove(SessionData sessionData)", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "public boolean isConnected()", "class_method_signature": "SessionManager.isConnected()", "testcase": false, "constructor": false}], "file": "session-replacement/src/main/java/com/amadeus/session/SessionManager.java"}, "focal_method": {"identifier": "schedule", "parameters": "(String timer, Runnable task, long period)", "modifiers": "public", "return": "ScheduledFuture<?>", "body": "public ScheduledFuture<?> schedule(String timer, Runnable task, long period) {\n    if (timer != null) {\n      return executors.scheduleAtFixedRate(new RunnableWithTimer(timer, task), period, period, TimeUnit.SECONDS);\n    }\n    return executors.scheduleAtFixedRate(task, period, period, TimeUnit.SECONDS);\n\n  }", "signature": "ScheduledFuture<?> schedule(String timer, Runnable task, long period)", "full_signature": "public ScheduledFuture<?> schedule(String timer, Runnable task, long period)", "class_method_signature": "SessionManager.schedule(String timer, Runnable task, long period)", "testcase": false, "constructor": false, "invocations": ["scheduleAtFixedRate", "scheduleAtFixedRate"]}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}