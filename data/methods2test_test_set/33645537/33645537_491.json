{"test_class": {"identifier": "StreamExercisesTest", "superclass": "", "interfaces": "", "fields": [], "file": "concurrency/src/test/java/com/insightfullogic/java8/examples/chapter3/StreamExercisesTest.java"}, "test_case": {"identifier": "external", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void external() {\n        assertEquals(4, countBandMembersExternal(Arrays.asList(SampleData.johnColtrane, SampleData.theBeatles)));\n    }", "signature": "void external()", "full_signature": "@Test public void external()", "class_method_signature": "StreamExercisesTest.external()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "countBandMembersExternal", "asList"]}, "focal_class": {"identifier": "StreamExercises", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "countBandMembersExternal", "parameters": "(List<Artist> artists)", "modifiers": "public static", "return": "int", "signature": "int countBandMembersExternal(List<Artist> artists)", "full_signature": "public static int countBandMembersExternal(List<Artist> artists)", "class_method_signature": "StreamExercises.countBandMembersExternal(List<Artist> artists)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(Stream<T> stream, Function<T, R> mapper)", "modifiers": "public static", "return": "List<R>", "signature": "List<R> map(Stream<T> stream, Function<T, R> mapper)", "full_signature": "public static List<R> map(Stream<T> stream, Function<T, R> mapper)", "class_method_signature": "StreamExercises.map(Stream<T> stream, Function<T, R> mapper)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/insightfullogic/java8/examples/chapter3/StreamExercises.java"}, "focal_method": {"identifier": "countBandMembersExternal", "parameters": "(List<Artist> artists)", "modifiers": "public static", "return": "int", "body": "public static int countBandMembersExternal(List<Artist> artists) {\n        // BEGIN COUNT_MEMBERS_EXTERNAL\n    int totalMembers = 0;\n    for (Artist artist : artists) {\n        Stream<Artist> members = artist.getMembers();\n        totalMembers += members.count();\n    }\n        // END COUNT_MEMBERS_EXTERNAL\n\n        return totalMembers;\n    }", "signature": "int countBandMembersExternal(List<Artist> artists)", "full_signature": "public static int countBandMembersExternal(List<Artist> artists)", "class_method_signature": "StreamExercises.countBandMembersExternal(List<Artist> artists)", "testcase": false, "constructor": false, "invocations": ["getMembers", "count"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}