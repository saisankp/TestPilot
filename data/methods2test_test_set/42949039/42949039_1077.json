{"test_class": {"identifier": "SecurityFunctionRestControllerTest", "superclass": "extends AbstractRestTest", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private SecurityFunctionRestController securityFunctionRestController;", "modifier": "@InjectMocks\n    private", "type": "SecurityFunctionRestController", "declarator": "securityFunctionRestController", "var_name": "securityFunctionRestController"}, {"original_string": "@Mock\n    private SecurityFunctionService securityFunctionService;", "modifier": "@Mock\n    private", "type": "SecurityFunctionService", "declarator": "securityFunctionService", "var_name": "securityFunctionService"}], "file": "herd-code/herd-rest/src/test/java/org/finra/herd/rest/SecurityFunctionRestControllerTest.java"}, "test_case": {"identifier": "testCreateSecurityFunction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateSecurityFunction() throws Exception\n    {\n        SecurityFunctionCreateRequest securityFunctionCreateRequest = new SecurityFunctionCreateRequest(SECURITY_FUNCTION);\n        // Create a security function.\n        SecurityFunction securityFunction = new SecurityFunction(SECURITY_FUNCTION);\n        when(securityFunctionService.createSecurityFunction(securityFunctionCreateRequest)).thenReturn(securityFunction);\n\n        SecurityFunction resultSecurityFunction = securityFunctionRestController.createSecurityFunction(new SecurityFunctionCreateRequest(SECURITY_FUNCTION));\n\n        // Validate the returned object.\n        assertEquals(new SecurityFunction(SECURITY_FUNCTION), resultSecurityFunction);\n\n        // Verify the external calls.\n        verify(securityFunctionService).createSecurityFunction(securityFunctionCreateRequest);\n        verifyNoMoreInteractions(securityFunctionService);\n        // Validate the returned object.\n        assertEquals(securityFunction, resultSecurityFunction);\n    }", "signature": "void testCreateSecurityFunction()", "full_signature": "@Test public void testCreateSecurityFunction()", "class_method_signature": "SecurityFunctionRestControllerTest.testCreateSecurityFunction()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "createSecurityFunction", "createSecurityFunction", "assertEquals", "createSecurityFunction", "verify", "verifyNoMoreInteractions", "assertEquals"]}, "focal_class": {"identifier": "SecurityFunctionRestController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SECURITY_FUNCTIONS_URI_PREFIX = \"/securityFunctions\";", "modifier": "private static final", "type": "String", "declarator": "SECURITY_FUNCTIONS_URI_PREFIX = \"/securityFunctions\"", "var_name": "SECURITY_FUNCTIONS_URI_PREFIX"}, {"original_string": "@Autowired\n    private SecurityFunctionService securityFunctionService;", "modifier": "@Autowired\n    private", "type": "SecurityFunctionService", "declarator": "securityFunctionService", "var_name": "securityFunctionService"}], "methods": [{"identifier": "createSecurityFunction", "parameters": "(@RequestBody SecurityFunctionCreateRequest request)", "modifiers": "@RequestMapping(value = SECURITY_FUNCTIONS_URI_PREFIX, method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_SECURITY_FUNCTIONS_POST) public", "return": "SecurityFunction", "signature": "SecurityFunction createSecurityFunction(@RequestBody SecurityFunctionCreateRequest request)", "full_signature": "@RequestMapping(value = SECURITY_FUNCTIONS_URI_PREFIX, method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_SECURITY_FUNCTIONS_POST) public SecurityFunction createSecurityFunction(@RequestBody SecurityFunctionCreateRequest request)", "class_method_signature": "SecurityFunctionRestController.createSecurityFunction(@RequestBody SecurityFunctionCreateRequest request)", "testcase": false, "constructor": false}, {"identifier": "deleteSecurityFunction", "parameters": "(@PathVariable(\"securityFunctionName\") String securityFunctionName)", "modifiers": "@RequestMapping(value = SECURITY_FUNCTIONS_URI_PREFIX + \"/{securityFunctionName}\", method = RequestMethod.DELETE) @Secured(SecurityFunctions.FN_SECURITY_FUNCTIONS_DELETE) public", "return": "SecurityFunction", "signature": "SecurityFunction deleteSecurityFunction(@PathVariable(\"securityFunctionName\") String securityFunctionName)", "full_signature": "@RequestMapping(value = SECURITY_FUNCTIONS_URI_PREFIX + \"/{securityFunctionName}\", method = RequestMethod.DELETE) @Secured(SecurityFunctions.FN_SECURITY_FUNCTIONS_DELETE) public SecurityFunction deleteSecurityFunction(@PathVariable(\"securityFunctionName\") String securityFunctionName)", "class_method_signature": "SecurityFunctionRestController.deleteSecurityFunction(@PathVariable(\"securityFunctionName\") String securityFunctionName)", "testcase": false, "constructor": false}, {"identifier": "getSecurityFunction", "parameters": "(@PathVariable(\"securityFunctionName\") String securityFunctionName)", "modifiers": "@RequestMapping(value = SECURITY_FUNCTIONS_URI_PREFIX + \"/{securityFunctionName}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_SECURITY_FUNCTIONS_GET) public", "return": "SecurityFunction", "signature": "SecurityFunction getSecurityFunction(@PathVariable(\"securityFunctionName\") String securityFunctionName)", "full_signature": "@RequestMapping(value = SECURITY_FUNCTIONS_URI_PREFIX + \"/{securityFunctionName}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_SECURITY_FUNCTIONS_GET) public SecurityFunction getSecurityFunction(@PathVariable(\"securityFunctionName\") String securityFunctionName)", "class_method_signature": "SecurityFunctionRestController.getSecurityFunction(@PathVariable(\"securityFunctionName\") String securityFunctionName)", "testcase": false, "constructor": false}, {"identifier": "getSecurityFunctions", "parameters": "()", "modifiers": "@RequestMapping(value = SECURITY_FUNCTIONS_URI_PREFIX, method = RequestMethod.GET) @Secured(SecurityFunctions.FN_SECURITY_FUNCTIONS_ALL_GET) public", "return": "SecurityFunctionKeys", "signature": "SecurityFunctionKeys getSecurityFunctions()", "full_signature": "@RequestMapping(value = SECURITY_FUNCTIONS_URI_PREFIX, method = RequestMethod.GET) @Secured(SecurityFunctions.FN_SECURITY_FUNCTIONS_ALL_GET) public SecurityFunctionKeys getSecurityFunctions()", "class_method_signature": "SecurityFunctionRestController.getSecurityFunctions()", "testcase": false, "constructor": false}], "file": "herd-code/herd-rest/src/main/java/org/finra/herd/rest/SecurityFunctionRestController.java"}, "focal_method": {"identifier": "createSecurityFunction", "parameters": "(@RequestBody SecurityFunctionCreateRequest request)", "modifiers": "@RequestMapping(value = SECURITY_FUNCTIONS_URI_PREFIX, method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_SECURITY_FUNCTIONS_POST) public", "return": "SecurityFunction", "body": "@RequestMapping(value = SECURITY_FUNCTIONS_URI_PREFIX, method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"})\n    @Secured(SecurityFunctions.FN_SECURITY_FUNCTIONS_POST)\n    public SecurityFunction createSecurityFunction(@RequestBody SecurityFunctionCreateRequest request)\n    {\n        return securityFunctionService.createSecurityFunction(request);\n    }", "signature": "SecurityFunction createSecurityFunction(@RequestBody SecurityFunctionCreateRequest request)", "full_signature": "@RequestMapping(value = SECURITY_FUNCTIONS_URI_PREFIX, method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_SECURITY_FUNCTIONS_POST) public SecurityFunction createSecurityFunction(@RequestBody SecurityFunctionCreateRequest request)", "class_method_signature": "SecurityFunctionRestController.createSecurityFunction(@RequestBody SecurityFunctionCreateRequest request)", "testcase": false, "constructor": false, "invocations": ["createSecurityFunction"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}