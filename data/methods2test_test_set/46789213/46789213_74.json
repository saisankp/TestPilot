{"test_class": {"identifier": "DummyBooleanSBoolTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/suite/dummy/bool/DummyBooleanSBoolTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEquals() throws Exception {\n    DummyBooleanSBool value1 = new DummyBooleanSBool(true);\n    DummyBooleanSBool value2 = new DummyBooleanSBool(true);\n    DummyBooleanSBool value3 = new DummyBooleanSBool(false);\n    Assert.assertThat(value1, Is.is(value2));\n    Assert.assertThat(value1, IsNot.not(value3));\n    Assert.assertThat(value1, Is.is(value1));\n\n    Assert.assertThat(value1, IsNot.not((DummyArithmeticSInt) null));\n    Assert.assertThat(value1, IsNot.not(\"42\"));\n  }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "DummyBooleanSBoolTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertThat", "is", "assertThat", "not", "assertThat", "is", "assertThat", "not", "assertThat", "not"]}, "focal_class": {"identifier": "DummyBooleanSBool", "superclass": "", "interfaces": "implements SBool", "fields": [{"original_string": "private final boolean value;", "modifier": "private final", "type": "boolean", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "DummyBooleanSBool", "parameters": "(boolean value)", "modifiers": "public", "return": "", "signature": " DummyBooleanSBool(boolean value)", "full_signature": "public  DummyBooleanSBool(boolean value)", "class_method_signature": "DummyBooleanSBool.DummyBooleanSBool(boolean value)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "Boolean", "signature": "Boolean getValue()", "full_signature": "public Boolean getValue()", "class_method_signature": "DummyBooleanSBool.getValue()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DummyBooleanSBool.toString()", "testcase": false, "constructor": false}, {"identifier": "out", "parameters": "()", "modifiers": "@Override public", "return": "SBool", "signature": "SBool out()", "full_signature": "@Override public SBool out()", "class_method_signature": "DummyBooleanSBool.out()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "DummyBooleanSBool.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DummyBooleanSBool.hashCode()", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/suite/dummy/bool/DummyBooleanSBool.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    DummyBooleanSBool that = (DummyBooleanSBool) o;\n\n    return value == that.value;\n  }", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "DummyBooleanSBool.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}