{"test_class": {"identifier": "FileParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "flatworm-core/src/test/java/com/blackbear/flatworm/FileParserTest.java"}, "test_case": {"identifier": "executeRecordCallback", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void executeRecordCallback() {\n        RecordCallback callback = mock(RecordCallback.class);\n        MatchedRecord matchedRecord = mock(MatchedRecord.class);\n\n        FileParser parser = new FileParser(\"\", \"\");\n        parser.registerRecordCallback(\"test\", callback);\n\n        // TODO when there is more time - need to have content and config embedded into the test.\n//        verify(callback, atMost(1)).processRecord(matchedRecord);\n    }", "signature": "void executeRecordCallback()", "full_signature": "@Test public void executeRecordCallback()", "class_method_signature": "FileParserTest.executeRecordCallback()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "registerRecordCallback"]}, "focal_class": {"identifier": "FileParser", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private ListMultimap<String, RecordCallback> recordCallbacks = ArrayListMultimap.create();", "modifier": "private", "type": "ListMultimap<String, RecordCallback>", "declarator": "recordCallbacks = ArrayListMultimap.create()", "var_name": "recordCallbacks"}, {"original_string": "private List<ExceptionCallback> exceptionCallbacks = new ArrayList<>();", "modifier": "private", "type": "List<ExceptionCallback>", "declarator": "exceptionCallbacks = new ArrayList<>()", "var_name": "exceptionCallbacks"}, {"original_string": "protected File configFile;", "modifier": "protected", "type": "File", "declarator": "configFile", "var_name": "configFile"}, {"original_string": "protected File dataInputFile;", "modifier": "protected", "type": "File", "declarator": "dataInputFile", "var_name": "dataInputFile"}, {"original_string": "protected String dataInputContent;", "modifier": "protected", "type": "String", "declarator": "dataInputContent", "var_name": "dataInputContent"}, {"original_string": "protected String configContent;", "modifier": "protected", "type": "String", "declarator": "configContent", "var_name": "configContent"}, {"original_string": "protected FileFormat fileFormat;", "modifier": "protected", "type": "FileFormat", "declarator": "fileFormat", "var_name": "fileFormat"}, {"original_string": "protected BufferedReader bufIn;", "modifier": "protected", "type": "BufferedReader", "declarator": "bufIn", "var_name": "bufIn"}], "methods": [{"identifier": "FileParser", "parameters": "()", "modifiers": "protected", "return": "", "signature": " FileParser()", "full_signature": "protected  FileParser()", "class_method_signature": "FileParser.FileParser()", "testcase": false, "constructor": true}, {"identifier": "FileParser", "parameters": "(String configContent, String dataInputContent)", "modifiers": "public", "return": "", "signature": " FileParser(String configContent, String dataInputContent)", "full_signature": "public  FileParser(String configContent, String dataInputContent)", "class_method_signature": "FileParser.FileParser(String configContent, String dataInputContent)", "testcase": false, "constructor": true}, {"identifier": "FileParser", "parameters": "(File configFile, File dataInputFile)", "modifiers": "public", "return": "", "signature": " FileParser(File configFile, File dataInputFile)", "full_signature": "public  FileParser(File configFile, File dataInputFile)", "class_method_signature": "FileParser.FileParser(File configFile, File dataInputFile)", "testcase": false, "constructor": true}, {"identifier": "FileParser", "parameters": "(File configFile, String dataInputContent)", "modifiers": "public", "return": "", "signature": " FileParser(File configFile, String dataInputContent)", "full_signature": "public  FileParser(File configFile, String dataInputContent)", "class_method_signature": "FileParser.FileParser(File configFile, String dataInputContent)", "testcase": false, "constructor": true}, {"identifier": "FileParser", "parameters": "(String configContent, File dataInputFile)", "modifiers": "public", "return": "", "signature": " FileParser(String configContent, File dataInputFile)", "full_signature": "public  FileParser(String configContent, File dataInputFile)", "class_method_signature": "FileParser.FileParser(String configContent, File dataInputFile)", "testcase": false, "constructor": true}, {"identifier": "registerRecordCallback", "parameters": "(String recordName, RecordCallback callback)", "modifiers": "public", "return": "void", "signature": "void registerRecordCallback(String recordName, RecordCallback callback)", "full_signature": "public void registerRecordCallback(String recordName, RecordCallback callback)", "class_method_signature": "FileParser.registerRecordCallback(String recordName, RecordCallback callback)", "testcase": false, "constructor": false}, {"identifier": "removeRecordCallback", "parameters": "(String recordName, RecordCallback callback)", "modifiers": "public", "return": "boolean", "signature": "boolean removeRecordCallback(String recordName, RecordCallback callback)", "full_signature": "public boolean removeRecordCallback(String recordName, RecordCallback callback)", "class_method_signature": "FileParser.removeRecordCallback(String recordName, RecordCallback callback)", "testcase": false, "constructor": false}, {"identifier": "registerExceptionCallback", "parameters": "(ExceptionCallback callback)", "modifiers": "public", "return": "void", "signature": "void registerExceptionCallback(ExceptionCallback callback)", "full_signature": "public void registerExceptionCallback(ExceptionCallback callback)", "class_method_signature": "FileParser.registerExceptionCallback(ExceptionCallback callback)", "testcase": false, "constructor": false}, {"identifier": "removeExceptionCallback", "parameters": "(ExceptionCallback callback)", "modifiers": "public", "return": "boolean", "signature": "boolean removeExceptionCallback(ExceptionCallback callback)", "full_signature": "public boolean removeExceptionCallback(ExceptionCallback callback)", "class_method_signature": "FileParser.removeExceptionCallback(ExceptionCallback callback)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void open()", "full_signature": "public void open()", "class_method_signature": "FileParser.open()", "testcase": false, "constructor": false}, {"identifier": "loadConfiguration", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void loadConfiguration()", "full_signature": "protected void loadConfiguration()", "class_method_signature": "FileParser.loadConfiguration()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "FileParser.close()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void read()", "full_signature": "public void read()", "class_method_signature": "FileParser.read()", "testcase": false, "constructor": false}, {"identifier": "doCallback", "parameters": "(String recordName, MatchedRecord record)", "modifiers": "private", "return": "void", "signature": "void doCallback(String recordName, MatchedRecord record)", "full_signature": "private void doCallback(String recordName, MatchedRecord record)", "class_method_signature": "FileParser.doCallback(String recordName, MatchedRecord record)", "testcase": false, "constructor": false}, {"identifier": "doExceptionCallback", "parameters": "(Exception ex, String message, String lastLine)", "modifiers": "private", "return": "void", "signature": "void doExceptionCallback(Exception ex, String message, String lastLine)", "full_signature": "private void doExceptionCallback(Exception ex, String message, String lastLine)", "class_method_signature": "FileParser.doExceptionCallback(Exception ex, String message, String lastLine)", "testcase": false, "constructor": false}], "file": "flatworm-core/src/main/java/com/blackbear/flatworm/FileParser.java"}, "focal_method": {"identifier": "registerRecordCallback", "parameters": "(String recordName, RecordCallback callback)", "modifiers": "public", "return": "void", "body": "public void registerRecordCallback(String recordName, RecordCallback callback) {\n        List<RecordCallback> callbacks = recordCallbacks.get(recordName);\n        if (!callbacks.contains(callback)) {\n            recordCallbacks.put(recordName, callback);\n        }\n    }", "signature": "void registerRecordCallback(String recordName, RecordCallback callback)", "full_signature": "public void registerRecordCallback(String recordName, RecordCallback callback)", "class_method_signature": "FileParser.registerRecordCallback(String recordName, RecordCallback callback)", "testcase": false, "constructor": false, "invocations": ["get", "contains", "put"]}, "repository": {"repo_id": 61250412, "url": "https://github.com/ahenson/flatworm", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 10, "size": 429, "license": "licensed"}}