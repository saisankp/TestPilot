{"test_class": {"identifier": "MediaTypeHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/header/MediaTypeHelperTest.java"}, "test_case": {"identifier": "createsListOfConsumedMediaTypes", "parameters": "(Consumes consumes, List<MediaType> expectedResult)", "modifiers": "@UseDataProvider(\"forCreatesListOfConsumedMediaTypes\") @Test public", "return": "void", "body": "@UseDataProvider(\"forCreatesListOfConsumedMediaTypes\")\n    @Test\n    public void createsListOfConsumedMediaTypes(Consumes consumes, List<MediaType> expectedResult) {\n        assertEquals(expectedResult, MediaTypeHelper.createConsumesList(consumes));\n    }", "signature": "void createsListOfConsumedMediaTypes(Consumes consumes, List<MediaType> expectedResult)", "full_signature": "@UseDataProvider(\"forCreatesListOfConsumedMediaTypes\") @Test public void createsListOfConsumedMediaTypes(Consumes consumes, List<MediaType> expectedResult)", "class_method_signature": "MediaTypeHelperTest.createsListOfConsumedMediaTypes(Consumes consumes, List<MediaType> expectedResult)", "testcase": true, "constructor": false, "invocations": ["assertEquals", "createConsumesList"]}, "focal_class": {"identifier": "MediaTypeHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<MediaType> DEFAULT_TYPE_LIST = Collections.singletonList(MediaType.WILDCARD_TYPE);", "modifier": "private static final", "type": "List<MediaType>", "declarator": "DEFAULT_TYPE_LIST = Collections.singletonList(MediaType.WILDCARD_TYPE)", "var_name": "DEFAULT_TYPE_LIST"}, {"original_string": "public static final MediaType WADL_TYPE = new MediaType(\"application\", \"vnd.sun.wadl+xml\");", "modifier": "public static final", "type": "MediaType", "declarator": "WADL_TYPE = new MediaType(\"application\", \"vnd.sun.wadl+xml\")", "var_name": "WADL_TYPE"}, {"original_string": "public static final String EXT_PREFIX_SUBTYPE = \"*+\";", "modifier": "public static final", "type": "String", "declarator": "EXT_PREFIX_SUBTYPE = \"*+\"", "var_name": "EXT_PREFIX_SUBTYPE"}, {"original_string": "public static final Pattern EXT_SUBTYPE_PATTERN = Pattern.compile(\"([^\\\\+]+)\\\\+(.+)\");", "modifier": "public static final", "type": "Pattern", "declarator": "EXT_SUBTYPE_PATTERN = Pattern.compile(\"([^\\\\+]+)\\\\+(.+)\")", "var_name": "EXT_SUBTYPE_PATTERN"}, {"original_string": "public static final Pattern EXT_SUFFIX_SUBTYPE_PATTERN = Pattern.compile(\"([^\\\\+]+)\\\\+\\\\*\");", "modifier": "public static final", "type": "Pattern", "declarator": "EXT_SUFFIX_SUBTYPE_PATTERN = Pattern.compile(\"([^\\\\+]+)\\\\+\\\\*\")", "var_name": "EXT_SUFFIX_SUBTYPE_PATTERN"}, {"original_string": "public static final Pattern EXT_PREFIX_SUBTYPE_PATTERN = Pattern.compile(\"\\\\*\\\\+(.+)\");", "modifier": "public static final", "type": "Pattern", "declarator": "EXT_PREFIX_SUBTYPE_PATTERN = Pattern.compile(\"\\\\*\\\\+(.+)\")", "var_name": "EXT_PREFIX_SUBTYPE_PATTERN"}], "methods": [{"identifier": "createDescendingMediaTypeIterator", "parameters": "(MediaType type)", "modifiers": "public static", "return": "Iterator<MediaType>", "signature": "Iterator<MediaType> createDescendingMediaTypeIterator(MediaType type)", "full_signature": "public static Iterator<MediaType> createDescendingMediaTypeIterator(MediaType type)", "class_method_signature": "MediaTypeHelper.createDescendingMediaTypeIterator(MediaType type)", "testcase": false, "constructor": false}, {"identifier": "createConsumesList", "parameters": "(Consumes mime)", "modifiers": "public static", "return": "List<MediaType>", "signature": "List<MediaType> createConsumesList(Consumes mime)", "full_signature": "public static List<MediaType> createConsumesList(Consumes mime)", "class_method_signature": "MediaTypeHelper.createConsumesList(Consumes mime)", "testcase": false, "constructor": false}, {"identifier": "createProducesList", "parameters": "(Produces mime)", "modifiers": "public static", "return": "List<MediaType>", "signature": "List<MediaType> createProducesList(Produces mime)", "full_signature": "public static List<MediaType> createProducesList(Produces mime)", "class_method_signature": "MediaTypeHelper.createProducesList(Produces mime)", "testcase": false, "constructor": false}, {"identifier": "isConsume", "parameters": "(List<MediaType> consumes, MediaType contentType)", "modifiers": "public static", "return": "boolean", "signature": "boolean isConsume(List<MediaType> consumes, MediaType contentType)", "full_signature": "public static boolean isConsume(List<MediaType> consumes, MediaType contentType)", "class_method_signature": "MediaTypeHelper.isConsume(List<MediaType> consumes, MediaType contentType)", "testcase": false, "constructor": false}, {"identifier": "createMediaTypesList", "parameters": "(String[] mimes)", "modifiers": "private static", "return": "List<MediaType>", "signature": "List<MediaType> createMediaTypesList(String[] mimes)", "full_signature": "private static List<MediaType> createMediaTypesList(String[] mimes)", "class_method_signature": "MediaTypeHelper.createMediaTypesList(String[] mimes)", "testcase": false, "constructor": false}, {"identifier": "findFistCompatibleAcceptMediaType", "parameters": "(List<AcceptMediaType> acceptMediaTypes,\n                                                                    List<MediaType> producedByResource)", "modifiers": "public static", "return": "AcceptMediaType", "signature": "AcceptMediaType findFistCompatibleAcceptMediaType(List<AcceptMediaType> acceptMediaTypes,\n                                                                    List<MediaType> producedByResource)", "full_signature": "public static AcceptMediaType findFistCompatibleAcceptMediaType(List<AcceptMediaType> acceptMediaTypes,\n                                                                    List<MediaType> producedByResource)", "class_method_signature": "MediaTypeHelper.findFistCompatibleAcceptMediaType(List<AcceptMediaType> acceptMediaTypes,\n                                                                    List<MediaType> producedByResource)", "testcase": false, "constructor": false}, {"identifier": "isCompatible", "parameters": "(MediaType mediaTypeOne, MediaType mediaTypeTwo)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCompatible(MediaType mediaTypeOne, MediaType mediaTypeTwo)", "full_signature": "public static boolean isCompatible(MediaType mediaTypeOne, MediaType mediaTypeTwo)", "class_method_signature": "MediaTypeHelper.isCompatible(MediaType mediaTypeOne, MediaType mediaTypeTwo)", "testcase": false, "constructor": false}, {"identifier": "isMatched", "parameters": "(MediaType pattern, MediaType checkMe)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMatched(MediaType pattern, MediaType checkMe)", "full_signature": "public static boolean isMatched(MediaType pattern, MediaType checkMe)", "class_method_signature": "MediaTypeHelper.isMatched(MediaType pattern, MediaType checkMe)", "testcase": false, "constructor": false}, {"identifier": "MediaTypeHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " MediaTypeHelper()", "full_signature": "private  MediaTypeHelper()", "class_method_signature": "MediaTypeHelper.MediaTypeHelper()", "testcase": false, "constructor": true}], "file": "everrest-core/src/main/java/org/everrest/core/impl/header/MediaTypeHelper.java"}, "focal_method": {"identifier": "createConsumesList", "parameters": "(Consumes mime)", "modifiers": "public static", "return": "List<MediaType>", "body": "public static List<MediaType> createConsumesList(Consumes mime) {\n        if (mime == null) {\n            return DEFAULT_TYPE_LIST;\n        }\n\n        return createMediaTypesList(mime.value());\n    }", "signature": "List<MediaType> createConsumesList(Consumes mime)", "full_signature": "public static List<MediaType> createConsumesList(Consumes mime)", "class_method_signature": "MediaTypeHelper.createConsumesList(Consumes mime)", "testcase": false, "constructor": false, "invocations": ["createMediaTypesList", "value"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}