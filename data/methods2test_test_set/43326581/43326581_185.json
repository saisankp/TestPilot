{"test_class": {"identifier": "LicenseInfoHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LicenseInfoHandler handler;", "modifier": "private", "type": "LicenseInfoHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "@Mock\n    private AttachmentDatabaseHandler attachmentDatabaseHandler;", "modifier": "@Mock\n    private", "type": "AttachmentDatabaseHandler", "declarator": "attachmentDatabaseHandler", "var_name": "attachmentDatabaseHandler"}, {"original_string": "@Mock\n    private AttachmentConnector connector;", "modifier": "@Mock\n    private", "type": "AttachmentConnector", "declarator": "connector", "var_name": "connector"}, {"original_string": "@Mock\n    private User user;", "modifier": "@Mock\n    private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "@Rule\n    public final ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n    public final", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}], "file": "backend/src/src-licenseinfo/src/test/java/org/eclipse/sw360/licenseinfo/LicenseInfoHandlerTest.java"}, "test_case": {"identifier": "testThatEmptyLicensesAreFiltered", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testThatEmptyLicensesAreFiltered() {\n        LicenseInfoParsingResult emptyResult = new LicenseInfoParsingResult();\n\n        LicenseInfoParsingResult emptyLicenseInfo = new LicenseInfoParsingResult();\n        emptyLicenseInfo.setLicenseInfo(new LicenseInfo());\n\n        LicenseInfoParsingResult parsingResults = new LicenseInfoParsingResult();\n        LicenseInfo licenseInfo = new LicenseInfo();\n        // @formatter:off\n        licenseInfo.setLicenseNamesWithTexts(ImmutableSet.of(\n                createLicense(\"nameOnly\", null, null),\n                createLicense(null, null, null),\n                createLicense(null, \"textOnly\", null),\n                createLicense(\"\", null, null),\n                createLicense(null, null, \"ackOnly\"),\n                createLicense(\"\", \"\", \"\"),\n                createLicense(\"name\", \"text\", \"ack\")\n        ));\n        // @formatter:on\n        parsingResults.setLicenseInfo(licenseInfo);\n\n        handler.filterEmptyLicenses(ImmutableList.of(emptyResult, emptyLicenseInfo, parsingResults));\n\n        // @formatter:off\n        Assert.assertThat(parsingResults.getLicenseInfo().getLicenseNamesWithTexts(), Matchers.containsInAnyOrder(\n                createLicense(\"nameOnly\", null, null),\n                createLicense(null, \"textOnly\", null),\n                createLicense(null, null, \"ackOnly\"),\n                createLicense(\"name\", \"text\", \"ack\")\n        ));\n        // @formatter:on\n    }", "signature": "void testThatEmptyLicensesAreFiltered()", "full_signature": "@Test public void testThatEmptyLicensesAreFiltered()", "class_method_signature": "LicenseInfoHandlerTest.testThatEmptyLicensesAreFiltered()", "testcase": true, "constructor": false, "invocations": ["setLicenseInfo", "setLicenseNamesWithTexts", "of", "createLicense", "createLicense", "createLicense", "createLicense", "createLicense", "createLicense", "createLicense", "setLicenseInfo", "filterEmptyLicenses", "of", "assertThat", "getLicenseNamesWithTexts", "getLicenseInfo", "containsInAnyOrder", "createLicense", "createLicense", "createLicense", "createLicense"]}, "focal_class": {"identifier": "LicenseInfoHandler", "superclass": "", "interfaces": "implements LicenseInfoService.Iface", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(LicenseInfoHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(LicenseInfoHandler.class)", "var_name": "LOGGER"}, {"original_string": "private static final int CACHE_TIMEOUT_MINUTES = 15;", "modifier": "private static final", "type": "int", "declarator": "CACHE_TIMEOUT_MINUTES = 15", "var_name": "CACHE_TIMEOUT_MINUTES"}, {"original_string": "private static final int CACHE_MAX_ITEMS = 100;", "modifier": "private static final", "type": "int", "declarator": "CACHE_MAX_ITEMS = 100", "var_name": "CACHE_MAX_ITEMS"}, {"original_string": "private static final String DEFAULT_LICENSE_INFO_HEADER_FILE=\"/DefaultLicenseInfoHeader.txt\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_LICENSE_INFO_HEADER_FILE=\"/DefaultLicenseInfoHeader.txt\"", "var_name": "DEFAULT_LICENSE_INFO_HEADER_FILE"}, {"original_string": "private static final String DEFAULT_LICENSE_INFO_TEXT = loadDefaultLicenseInfoHeaderText();", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_LICENSE_INFO_TEXT = loadDefaultLicenseInfoHeaderText()", "var_name": "DEFAULT_LICENSE_INFO_TEXT"}, {"original_string": "public static final String MSG_NO_RELEASE_GIVEN = \"No release given\";", "modifier": "public static final", "type": "String", "declarator": "MSG_NO_RELEASE_GIVEN = \"No release given\"", "var_name": "MSG_NO_RELEASE_GIVEN"}, {"original_string": "protected List<LicenseInfoParser> parsers;", "modifier": "protected", "type": "List<LicenseInfoParser>", "declarator": "parsers", "var_name": "parsers"}, {"original_string": "protected List<OutputGenerator<?>> outputGenerators;", "modifier": "protected", "type": "List<OutputGenerator<?>>", "declarator": "outputGenerators", "var_name": "outputGenerators"}, {"original_string": "protected ComponentDatabaseHandler componentDatabaseHandler;", "modifier": "protected", "type": "ComponentDatabaseHandler", "declarator": "componentDatabaseHandler", "var_name": "componentDatabaseHandler"}, {"original_string": "protected Cache<String, List<LicenseInfoParsingResult>> licenseInfoCache;", "modifier": "protected", "type": "Cache<String, List<LicenseInfoParsingResult>>", "declarator": "licenseInfoCache", "var_name": "licenseInfoCache"}], "methods": [{"identifier": "LicenseInfoHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " LicenseInfoHandler()", "full_signature": "public  LicenseInfoHandler()", "class_method_signature": "LicenseInfoHandler.LicenseInfoHandler()", "testcase": false, "constructor": true}, {"identifier": "LicenseInfoHandler", "parameters": "(AttachmentDatabaseHandler attachmentDatabaseHandler,\n                              ComponentDatabaseHandler componentDatabaseHandler)", "modifiers": "@VisibleForTesting protected", "return": "", "signature": " LicenseInfoHandler(AttachmentDatabaseHandler attachmentDatabaseHandler,\n                              ComponentDatabaseHandler componentDatabaseHandler)", "full_signature": "@VisibleForTesting protected  LicenseInfoHandler(AttachmentDatabaseHandler attachmentDatabaseHandler,\n                              ComponentDatabaseHandler componentDatabaseHandler)", "class_method_signature": "LicenseInfoHandler.LicenseInfoHandler(AttachmentDatabaseHandler attachmentDatabaseHandler,\n                              ComponentDatabaseHandler componentDatabaseHandler)", "testcase": false, "constructor": true}, {"identifier": "getLicenseInfoFile", "parameters": "(Project project, User user, String outputGenerator,\n                                              Map<String, Set<String>> releaseIdsToSelectedAttachmentIds, Map<String, Set<LicenseNameWithText>> excludedLicensesPerAttachment)", "modifiers": "@Override public", "return": "LicenseInfoFile", "signature": "LicenseInfoFile getLicenseInfoFile(Project project, User user, String outputGenerator,\n                                              Map<String, Set<String>> releaseIdsToSelectedAttachmentIds, Map<String, Set<LicenseNameWithText>> excludedLicensesPerAttachment)", "full_signature": "@Override public LicenseInfoFile getLicenseInfoFile(Project project, User user, String outputGenerator,\n                                              Map<String, Set<String>> releaseIdsToSelectedAttachmentIds, Map<String, Set<LicenseNameWithText>> excludedLicensesPerAttachment)", "class_method_signature": "LicenseInfoHandler.getLicenseInfoFile(Project project, User user, String outputGenerator,\n                                              Map<String, Set<String>> releaseIdsToSelectedAttachmentIds, Map<String, Set<LicenseNameWithText>> excludedLicensesPerAttachment)", "testcase": false, "constructor": false}, {"identifier": "getPossibleOutputFormats", "parameters": "()", "modifiers": "@Override public", "return": "List<OutputFormatInfo>", "signature": "List<OutputFormatInfo> getPossibleOutputFormats()", "full_signature": "@Override public List<OutputFormatInfo> getPossibleOutputFormats()", "class_method_signature": "LicenseInfoHandler.getPossibleOutputFormats()", "testcase": false, "constructor": false}, {"identifier": "getOutputFormatInfoForGeneratorClass", "parameters": "(String generatorClassName)", "modifiers": "@Override public", "return": "OutputFormatInfo", "signature": "OutputFormatInfo getOutputFormatInfoForGeneratorClass(String generatorClassName)", "full_signature": "@Override public OutputFormatInfo getOutputFormatInfoForGeneratorClass(String generatorClassName)", "class_method_signature": "LicenseInfoHandler.getOutputFormatInfoForGeneratorClass(String generatorClassName)", "testcase": false, "constructor": false}, {"identifier": "getLicenseInfoForAttachment", "parameters": "(Release release, String attachmentContentId, User user)", "modifiers": "@Override public", "return": "List<LicenseInfoParsingResult>", "signature": "List<LicenseInfoParsingResult> getLicenseInfoForAttachment(Release release, String attachmentContentId, User user)", "full_signature": "@Override public List<LicenseInfoParsingResult> getLicenseInfoForAttachment(Release release, String attachmentContentId, User user)", "class_method_signature": "LicenseInfoHandler.getLicenseInfoForAttachment(Release release, String attachmentContentId, User user)", "testcase": false, "constructor": false}, {"identifier": "assignFileNameToLicenseInfoParsingResult", "parameters": "(LicenseInfoParsingResult licenseInfoParsingResult, String filename)", "modifiers": "private", "return": "LicenseInfoParsingResult", "signature": "LicenseInfoParsingResult assignFileNameToLicenseInfoParsingResult(LicenseInfoParsingResult licenseInfoParsingResult, String filename)", "full_signature": "private LicenseInfoParsingResult assignFileNameToLicenseInfoParsingResult(LicenseInfoParsingResult licenseInfoParsingResult, String filename)", "class_method_signature": "LicenseInfoHandler.assignFileNameToLicenseInfoParsingResult(LicenseInfoParsingResult licenseInfoParsingResult, String filename)", "testcase": false, "constructor": false}, {"identifier": "getDefaultLicenseInfoHeaderText", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDefaultLicenseInfoHeaderText()", "full_signature": "@Override public String getDefaultLicenseInfoHeaderText()", "class_method_signature": "LicenseInfoHandler.getDefaultLicenseInfoHeaderText()", "testcase": false, "constructor": false}, {"identifier": "mapKeysToReleases", "parameters": "(Map<String, Set<String>> releaseIdsToAttachmentIds, User user)", "modifiers": "protected", "return": "Map<Release, Set<String>>", "signature": "Map<Release, Set<String>> mapKeysToReleases(Map<String, Set<String>> releaseIdsToAttachmentIds, User user)", "full_signature": "protected Map<Release, Set<String>> mapKeysToReleases(Map<String, Set<String>> releaseIdsToAttachmentIds, User user)", "class_method_signature": "LicenseInfoHandler.mapKeysToReleases(Map<String, Set<String>> releaseIdsToAttachmentIds, User user)", "testcase": false, "constructor": false}, {"identifier": "filterEmptyLicenses", "parameters": "(List<LicenseInfoParsingResult> results)", "modifiers": "protected", "return": "void", "signature": "void filterEmptyLicenses(List<LicenseInfoParsingResult> results)", "full_signature": "protected void filterEmptyLicenses(List<LicenseInfoParsingResult> results)", "class_method_signature": "LicenseInfoHandler.filterEmptyLicenses(List<LicenseInfoParsingResult> results)", "testcase": false, "constructor": false}, {"identifier": "getAllReleaseLicenseInfos", "parameters": "(Map<Release, Set<String>> releaseToSelectedAttachmentIds,\n            User user, Map<String, Set<LicenseNameWithText>> excludedLicensesPerAttachment)", "modifiers": "protected", "return": "Collection<LicenseInfoParsingResult>", "signature": "Collection<LicenseInfoParsingResult> getAllReleaseLicenseInfos(Map<Release, Set<String>> releaseToSelectedAttachmentIds,\n            User user, Map<String, Set<LicenseNameWithText>> excludedLicensesPerAttachment)", "full_signature": "protected Collection<LicenseInfoParsingResult> getAllReleaseLicenseInfos(Map<Release, Set<String>> releaseToSelectedAttachmentIds,\n            User user, Map<String, Set<LicenseNameWithText>> excludedLicensesPerAttachment)", "class_method_signature": "LicenseInfoHandler.getAllReleaseLicenseInfos(Map<Release, Set<String>> releaseToSelectedAttachmentIds,\n            User user, Map<String, Set<LicenseNameWithText>> excludedLicensesPerAttachment)", "testcase": false, "constructor": false}, {"identifier": "filterLicenses", "parameters": "(LicenseInfoParsingResult result, Set<LicenseNameWithText> licencesToExclude)", "modifiers": "protected", "return": "LicenseInfoParsingResult", "signature": "LicenseInfoParsingResult filterLicenses(LicenseInfoParsingResult result, Set<LicenseNameWithText> licencesToExclude)", "full_signature": "protected LicenseInfoParsingResult filterLicenses(LicenseInfoParsingResult result, Set<LicenseNameWithText> licencesToExclude)", "class_method_signature": "LicenseInfoHandler.filterLicenses(LicenseInfoParsingResult result, Set<LicenseNameWithText> licencesToExclude)", "testcase": false, "constructor": false}, {"identifier": "noSourceParsingResult", "parameters": "(String message)", "modifiers": "protected", "return": "LicenseInfoParsingResult", "signature": "LicenseInfoParsingResult noSourceParsingResult(String message)", "full_signature": "protected LicenseInfoParsingResult noSourceParsingResult(String message)", "class_method_signature": "LicenseInfoHandler.noSourceParsingResult(String message)", "testcase": false, "constructor": false}, {"identifier": "assignReleaseToLicenseInfoParsingResult", "parameters": "(LicenseInfoParsingResult licenseInfoParsingResult,\n            Release release)", "modifiers": "protected", "return": "List<LicenseInfoParsingResult>", "signature": "List<LicenseInfoParsingResult> assignReleaseToLicenseInfoParsingResult(LicenseInfoParsingResult licenseInfoParsingResult,\n            Release release)", "full_signature": "protected List<LicenseInfoParsingResult> assignReleaseToLicenseInfoParsingResult(LicenseInfoParsingResult licenseInfoParsingResult,\n            Release release)", "class_method_signature": "LicenseInfoHandler.assignReleaseToLicenseInfoParsingResult(LicenseInfoParsingResult licenseInfoParsingResult,\n            Release release)", "testcase": false, "constructor": false}, {"identifier": "assignReleaseToLicenseInfoParsingResults", "parameters": "(List<LicenseInfoParsingResult> parsingResults,\n            Release release)", "modifiers": "protected", "return": "List<LicenseInfoParsingResult>", "signature": "List<LicenseInfoParsingResult> assignReleaseToLicenseInfoParsingResults(List<LicenseInfoParsingResult> parsingResults,\n            Release release)", "full_signature": "protected List<LicenseInfoParsingResult> assignReleaseToLicenseInfoParsingResults(List<LicenseInfoParsingResult> parsingResults,\n            Release release)", "class_method_signature": "LicenseInfoHandler.assignReleaseToLicenseInfoParsingResults(List<LicenseInfoParsingResult> parsingResults,\n            Release release)", "testcase": false, "constructor": false}, {"identifier": "getOutputGeneratorByClassname", "parameters": "(String generatorClassname)", "modifiers": "protected", "return": "OutputGenerator<?>", "signature": "OutputGenerator<?> getOutputGeneratorByClassname(String generatorClassname)", "full_signature": "protected OutputGenerator<?> getOutputGeneratorByClassname(String generatorClassname)", "class_method_signature": "LicenseInfoHandler.getOutputGeneratorByClassname(String generatorClassname)", "testcase": false, "constructor": false}, {"identifier": "getOutputGeneratorByClassnameAndVariant", "parameters": "(String generatorClassname, OutputFormatVariant generatorVariant)", "modifiers": "protected", "return": "OutputGenerator<?>", "signature": "OutputGenerator<?> getOutputGeneratorByClassnameAndVariant(String generatorClassname, OutputFormatVariant generatorVariant)", "full_signature": "protected OutputGenerator<?> getOutputGeneratorByClassnameAndVariant(String generatorClassname, OutputFormatVariant generatorVariant)", "class_method_signature": "LicenseInfoHandler.getOutputGeneratorByClassnameAndVariant(String generatorClassname, OutputFormatVariant generatorVariant)", "testcase": false, "constructor": false}, {"identifier": "loadDefaultLicenseInfoHeaderText", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String loadDefaultLicenseInfoHeaderText()", "full_signature": "private static String loadDefaultLicenseInfoHeaderText()", "class_method_signature": "LicenseInfoHandler.loadDefaultLicenseInfoHeaderText()", "testcase": false, "constructor": false}], "file": "backend/src/src-licenseinfo/src/main/java/org/eclipse/sw360/licenseinfo/LicenseInfoHandler.java"}, "focal_method": {"identifier": "filterEmptyLicenses", "parameters": "(List<LicenseInfoParsingResult> results)", "modifiers": "protected", "return": "void", "body": "protected void filterEmptyLicenses(List<LicenseInfoParsingResult> results) {\n        for (LicenseInfoParsingResult result : results) {\n            if (result.isSetLicenseInfo() && result.getLicenseInfo().isSetLicenseNamesWithTexts()) {\n                result.getLicenseInfo().setLicenseNamesWithTexts(\n                        result.getLicenseInfo().getLicenseNamesWithTexts().stream().filter(licenseNameWithText -> {\n                            return !LicenseNameWithTextUtils.isEmpty(licenseNameWithText);\n                        }).collect(Collectors.toSet()));\n            }\n        }\n    }", "signature": "void filterEmptyLicenses(List<LicenseInfoParsingResult> results)", "full_signature": "protected void filterEmptyLicenses(List<LicenseInfoParsingResult> results)", "class_method_signature": "LicenseInfoHandler.filterEmptyLicenses(List<LicenseInfoParsingResult> results)", "testcase": false, "constructor": false, "invocations": ["isSetLicenseInfo", "isSetLicenseNamesWithTexts", "getLicenseInfo", "setLicenseNamesWithTexts", "getLicenseInfo", "collect", "filter", "stream", "getLicenseNamesWithTexts", "getLicenseInfo", "isEmpty", "toSet"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}