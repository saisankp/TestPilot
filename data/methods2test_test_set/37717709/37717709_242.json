{"test_class": {"identifier": "TestSocketETLServer", "superclass": "", "interfaces": "implements MMIEventListener", "fields": [{"original_string": "private Object lock;", "modifier": "private", "type": "Object", "declarator": "lock", "var_name": "lock"}, {"original_string": "private DecoratedMMIEvent event;", "modifier": "private", "type": "DecoratedMMIEvent", "declarator": "event", "var_name": "event"}], "file": "org.jvoicexml.callmanager.mmi.socket/src/test/java/org/jvoicexml/callmanager/mmi/socket/TestSocketETLServer.java"}, "test_case": {"identifier": "testRun", "parameters": "()", "modifiers": "@Test(timeout = 5000) public", "return": "void", "body": "@Test(timeout = 5000)\n    public void testRun() throws Exception {\n        final SocketETLProtocolAdapter adapter = new SocketETLProtocolAdapter();\n        adapter.addMMIEventListener(this);\n        final SocketETLServer server = new SocketETLServer(adapter, 4242);\n        server.start();\n        Thread.sleep(500);\n        InetAddress address = InetAddress.getLocalHost();\n        final Socket client = new Socket(address, 4242);\n        final Mmi mmi = new Mmi();\n        final StartRequest request = new StartRequest();\n        request.setContext(\"http://nowhere\");\n        request.setRequestId(\"4242\");\n        mmi.setStartRequest(request);\n        final File file = new File(\"unittests/vxml/hello.vxml\");\n        final URI uri = file.toURI();\n        request.setContentURL(uri.toURL());\n        final JAXBContext ctx = JAXBContext.newInstance(Mmi.class);\n        final Marshaller marshaller = ctx.createMarshaller();\n        final OutputStream out = client.getOutputStream();\n        marshaller.marshal(mmi, out);\n        out.flush();\n        out.close();\n        synchronized (lock) {\n            lock.wait();\n        }\n        Assert.assertTrue(event.getLifeCycleEvent() instanceof StartRequest);\n        client.close();\n    }", "signature": "void testRun()", "full_signature": "@Test(timeout = 5000) public void testRun()", "class_method_signature": "TestSocketETLServer.testRun()", "testcase": true, "constructor": false, "invocations": ["addMMIEventListener", "start", "sleep", "getLocalHost", "setContext", "setRequestId", "setStartRequest", "toURI", "setContentURL", "toURL", "newInstance", "createMarshaller", "getOutputStream", "marshal", "flush", "close", "wait", "assertTrue", "getLifeCycleEvent", "close"]}, "focal_class": {"identifier": "SocketETLServer", "superclass": "extends Thread", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER =\n        Logger.getLogger(SocketETLServer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER =\n        Logger.getLogger(SocketETLServer.class)", "var_name": "LOGGER"}, {"original_string": "private final int port;", "modifier": "private final", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "private final SocketETLProtocolAdapter adapter;", "modifier": "private final", "type": "SocketETLProtocolAdapter", "declarator": "adapter", "var_name": "adapter"}, {"original_string": "private ServerSocket server;", "modifier": "private", "type": "ServerSocket", "declarator": "server", "var_name": "server"}, {"original_string": "private boolean stopRequest;", "modifier": "private", "type": "boolean", "declarator": "stopRequest", "var_name": "stopRequest"}, {"original_string": "private URI uri;", "modifier": "private", "type": "URI", "declarator": "uri", "var_name": "uri"}], "methods": [{"identifier": "SocketETLServer", "parameters": "(final SocketETLProtocolAdapter protocolAdapter,\n            final int portNumber)", "modifiers": "public", "return": "", "signature": " SocketETLServer(final SocketETLProtocolAdapter protocolAdapter,\n            final int portNumber)", "full_signature": "public  SocketETLServer(final SocketETLProtocolAdapter protocolAdapter,\n            final int portNumber)", "class_method_signature": "SocketETLServer.SocketETLServer(final SocketETLProtocolAdapter protocolAdapter,\n            final int portNumber)", "testcase": false, "constructor": true}, {"identifier": "getUri", "parameters": "()", "modifiers": "public", "return": "URI", "signature": "URI getUri()", "full_signature": "public URI getUri()", "class_method_signature": "SocketETLServer.getUri()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "SocketETLServer.run()", "testcase": false, "constructor": false}], "file": "org.jvoicexml.callmanager.mmi.socket/src/main/java/org/jvoicexml/callmanager/mmi/socket/SocketETLServer.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() {\n        try {\n            final InetAddress localHost = InetAddress.getLocalHost();\n            server = new ServerSocket(port, -1, localHost);\n            server.setReuseAddress(true);\n            uri = TcpUriFactory.createUri(\n                    (InetSocketAddress) server.getLocalSocketAddress());\n            LOGGER.info(\"listening on '\" + uri + \"' for MMI events\");\n            while (!stopRequest) {\n                final Socket socket = server.accept();\n                final InetSocketAddress address =\n                        (InetSocketAddress) socket.getRemoteSocketAddress();\n                final URI remoteUri = TcpUriFactory.createUri(address);\n                LOGGER.info(\"connection from \" + remoteUri);\n                final SocketETLClient client =\n                        new SocketETLClient(adapter, socket);\n                client.start();\n            }\n        } catch (IOException e) {\n            LOGGER.error(e.getMessage(), e);\n        } catch (URISyntaxException e) {\n            LOGGER.error(e.getMessage(), e);\n        }\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "SocketETLServer.run()", "testcase": false, "constructor": false, "invocations": ["getLocalHost", "setReuseAddress", "createUri", "getLocalSocketAddress", "info", "accept", "getRemoteSocketAddress", "createUri", "info", "start", "error", "getMessage", "error", "getMessage"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}