{"test_class": {"identifier": "ConvertRecordTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<CSVRecord> emptyRecord;", "modifier": "private", "type": "List<CSVRecord>", "declarator": "emptyRecord", "var_name": "emptyRecord"}, {"original_string": "private List<CSVRecord> tooSmallRecord;", "modifier": "private", "type": "List<CSVRecord>", "declarator": "tooSmallRecord", "var_name": "tooSmallRecord"}, {"original_string": "private List<CSVRecord> smallestPossibleRecord;", "modifier": "private", "type": "List<CSVRecord>", "declarator": "smallestPossibleRecord", "var_name": "smallestPossibleRecord"}, {"original_string": "private List<CSVRecord> fullRecord;", "modifier": "private", "type": "List<CSVRecord>", "declarator": "fullRecord", "var_name": "fullRecord"}, {"original_string": "private List<CSVRecord> emptyPropRecord;", "modifier": "private", "type": "List<CSVRecord>", "declarator": "emptyPropRecord", "var_name": "emptyPropRecord"}, {"original_string": "private List<CSVRecord> whitePropRecord;", "modifier": "private", "type": "List<CSVRecord>", "declarator": "whitePropRecord", "var_name": "whitePropRecord"}, {"original_string": "private List<CSVRecord> emptyValRecord;", "modifier": "private", "type": "List<CSVRecord>", "declarator": "emptyValRecord", "var_name": "emptyValRecord"}, {"original_string": "private List<CSVRecord> whiteValRecord;", "modifier": "private", "type": "List<CSVRecord>", "declarator": "whiteValRecord", "var_name": "whiteValRecord"}, {"original_string": "private List<Todo> todos;", "modifier": "private", "type": "List<Todo>", "declarator": "todos", "var_name": "todos"}, {"original_string": "private List<CSVRecord> fullTodoRecord;", "modifier": "private", "type": "List<CSVRecord>", "declarator": "fullTodoRecord", "var_name": "fullTodoRecord"}], "file": "libraries/commonIO/src/test/java/org/eclipse/sw360/commonIO/ConvertRecordTest.java"}, "test_case": {"identifier": "testConvertCustomPropertiesByIdSmallestPossible", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvertCustomPropertiesByIdSmallestPossible() throws Exception {\n        Map<Integer, ConvertRecord.PropertyWithValue> properties = convertCustomPropertiesById(smallestPossibleRecord);\n        assertThat(properties.keySet(), Matchers.containsInAnyOrder(1));\n        assertThat(properties.get(1).getProperty(), is(\"prop1\"));\n        assertThat(properties.get(1).getValue(), is(\"val1\"));\n    }", "signature": "void testConvertCustomPropertiesByIdSmallestPossible()", "full_signature": "@Test public void testConvertCustomPropertiesByIdSmallestPossible()", "class_method_signature": "ConvertRecordTest.testConvertCustomPropertiesByIdSmallestPossible()", "testcase": true, "constructor": false, "invocations": ["convertCustomPropertiesById", "assertThat", "keySet", "containsInAnyOrder", "assertThat", "getProperty", "get", "is", "assertThat", "getValue", "get", "is"]}, "focal_class": {"identifier": "ConvertRecord", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static Gson gson = new GsonBuilder().create();", "modifier": "public static", "type": "Gson", "declarator": "gson = new GsonBuilder().create()", "var_name": "gson"}], "methods": [{"identifier": "ConvertRecord", "parameters": "()", "modifiers": "private", "return": "", "signature": " ConvertRecord()", "full_signature": "private  ConvertRecord()", "class_method_signature": "ConvertRecord.ConvertRecord()", "testcase": false, "constructor": true}, {"identifier": "convertRiskCategories", "parameters": "(List<CSVRecord> records)", "modifiers": "public static", "return": "List<RiskCategory>", "signature": "List<RiskCategory> convertRiskCategories(List<CSVRecord> records)", "full_signature": "public static List<RiskCategory> convertRiskCategories(List<CSVRecord> records)", "class_method_signature": "ConvertRecord.convertRiskCategories(List<CSVRecord> records)", "testcase": false, "constructor": false}, {"identifier": "riskCategorySerializer", "parameters": "()", "modifiers": "public static", "return": "Serializer<RiskCategory>", "signature": "Serializer<RiskCategory> riskCategorySerializer()", "full_signature": "public static Serializer<RiskCategory> riskCategorySerializer()", "class_method_signature": "ConvertRecord.riskCategorySerializer()", "testcase": false, "constructor": false}, {"identifier": "convertRisks", "parameters": "(List<CSVRecord> records, Map<Integer, RiskCategory> categories)", "modifiers": "public static", "return": "List<Risk>", "signature": "List<Risk> convertRisks(List<CSVRecord> records, Map<Integer, RiskCategory> categories)", "full_signature": "public static List<Risk> convertRisks(List<CSVRecord> records, Map<Integer, RiskCategory> categories)", "class_method_signature": "ConvertRecord.convertRisks(List<CSVRecord> records, Map<Integer, RiskCategory> categories)", "testcase": false, "constructor": false}, {"identifier": "riskSerializer", "parameters": "()", "modifiers": "public static", "return": "Serializer<Risk>", "signature": "Serializer<Risk> riskSerializer()", "full_signature": "public static Serializer<Risk> riskSerializer()", "class_method_signature": "ConvertRecord.riskSerializer()", "testcase": false, "constructor": false}, {"identifier": "convertCustomProperties", "parameters": "(List<CSVRecord> records)", "modifiers": "public static", "return": "Map<String, Set<String>>", "signature": "Map<String, Set<String>> convertCustomProperties(List<CSVRecord> records)", "full_signature": "public static Map<String, Set<String>> convertCustomProperties(List<CSVRecord> records)", "class_method_signature": "ConvertRecord.convertCustomProperties(List<CSVRecord> records)", "testcase": false, "constructor": false}, {"identifier": "addPropertyAndValueToMap", "parameters": "(String property, String value, Map<String, Set<String>> propertyMap)", "modifiers": "private static", "return": "void", "signature": "void addPropertyAndValueToMap(String property, String value, Map<String, Set<String>> propertyMap)", "full_signature": "private static void addPropertyAndValueToMap(String property, String value, Map<String, Set<String>> propertyMap)", "class_method_signature": "ConvertRecord.addPropertyAndValueToMap(String property, String value, Map<String, Set<String>> propertyMap)", "testcase": false, "constructor": false}, {"identifier": "convertCustomPropertiesById", "parameters": "(List<CSVRecord> records)", "modifiers": "public static", "return": "Map<Integer, PropertyWithValue>", "signature": "Map<Integer, PropertyWithValue> convertCustomPropertiesById(List<CSVRecord> records)", "full_signature": "public static Map<Integer, PropertyWithValue> convertCustomPropertiesById(List<CSVRecord> records)", "class_method_signature": "ConvertRecord.convertCustomPropertiesById(List<CSVRecord> records)", "testcase": false, "constructor": false}, {"identifier": "isValidPropertyRecord", "parameters": "(CSVRecord record)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidPropertyRecord(CSVRecord record)", "full_signature": "private static boolean isValidPropertyRecord(CSVRecord record)", "class_method_signature": "ConvertRecord.isValidPropertyRecord(CSVRecord record)", "testcase": false, "constructor": false}, {"identifier": "fillTodoCustomPropertyInfo", "parameters": "(List<Todo> todos, List<PropertyWithValueAndId> customProperties, SetMultimap<Integer, Integer> todoCustomPropertyMap)", "modifiers": "public static", "return": "void", "signature": "void fillTodoCustomPropertyInfo(List<Todo> todos, List<PropertyWithValueAndId> customProperties, SetMultimap<Integer, Integer> todoCustomPropertyMap)", "full_signature": "public static void fillTodoCustomPropertyInfo(List<Todo> todos, List<PropertyWithValueAndId> customProperties, SetMultimap<Integer, Integer> todoCustomPropertyMap)", "class_method_signature": "ConvertRecord.fillTodoCustomPropertyInfo(List<Todo> todos, List<PropertyWithValueAndId> customProperties, SetMultimap<Integer, Integer> todoCustomPropertyMap)", "testcase": false, "constructor": false}, {"identifier": "customPropertiesSerializer", "parameters": "()", "modifiers": "public static", "return": "Serializer<PropertyWithValueAndId>", "signature": "Serializer<PropertyWithValueAndId> customPropertiesSerializer()", "full_signature": "public static Serializer<PropertyWithValueAndId> customPropertiesSerializer()", "class_method_signature": "ConvertRecord.customPropertiesSerializer()", "testcase": false, "constructor": false}, {"identifier": "convertTodos", "parameters": "(List<CSVRecord> records)", "modifiers": "public static", "return": "List<Todo>", "signature": "List<Todo> convertTodos(List<CSVRecord> records)", "full_signature": "public static List<Todo> convertTodos(List<CSVRecord> records)", "class_method_signature": "ConvertRecord.convertTodos(List<CSVRecord> records)", "testcase": false, "constructor": false}, {"identifier": "todoSerializer", "parameters": "()", "modifiers": "public static", "return": "Serializer<Todo>", "signature": "Serializer<Todo> todoSerializer()", "full_signature": "public static Serializer<Todo> todoSerializer()", "class_method_signature": "ConvertRecord.todoSerializer()", "testcase": false, "constructor": false}, {"identifier": "convertObligation", "parameters": "(List<CSVRecord> records)", "modifiers": "public static", "return": "List<Obligation>", "signature": "List<Obligation> convertObligation(List<CSVRecord> records)", "full_signature": "public static List<Obligation> convertObligation(List<CSVRecord> records)", "class_method_signature": "ConvertRecord.convertObligation(List<CSVRecord> records)", "testcase": false, "constructor": false}, {"identifier": "obligationSerializer", "parameters": "()", "modifiers": "public static", "return": "Serializer<Obligation>", "signature": "Serializer<Obligation> obligationSerializer()", "full_signature": "public static Serializer<Obligation> obligationSerializer()", "class_method_signature": "ConvertRecord.obligationSerializer()", "testcase": false, "constructor": false}, {"identifier": "putToTodos", "parameters": "(Map<Integer, Obligation> obligations, Map<Integer, Todo> todos, Map<Integer, Set<Integer>> obligationTodo)", "modifiers": "public static", "return": "void", "signature": "void putToTodos(Map<Integer, Obligation> obligations, Map<Integer, Todo> todos, Map<Integer, Set<Integer>> obligationTodo)", "full_signature": "public static void putToTodos(Map<Integer, Obligation> obligations, Map<Integer, Todo> todos, Map<Integer, Set<Integer>> obligationTodo)", "class_method_signature": "ConvertRecord.putToTodos(Map<Integer, Obligation> obligations, Map<Integer, Todo> todos, Map<Integer, Set<Integer>> obligationTodo)", "testcase": false, "constructor": false}, {"identifier": "fillTodo", "parameters": "(Map<Integer, Obligation> obligations, Set<Integer> values, Todo todo)", "modifiers": "private static", "return": "void", "signature": "void fillTodo(Map<Integer, Obligation> obligations, Set<Integer> values, Todo todo)", "full_signature": "private static void fillTodo(Map<Integer, Obligation> obligations, Set<Integer> values, Todo todo)", "class_method_signature": "ConvertRecord.fillTodo(Map<Integer, Obligation> obligations, Set<Integer> values, Todo todo)", "testcase": false, "constructor": false}, {"identifier": "convertLicenseTypes", "parameters": "(List<CSVRecord> records)", "modifiers": "public static", "return": "List<LicenseType>", "signature": "List<LicenseType> convertLicenseTypes(List<CSVRecord> records)", "full_signature": "public static List<LicenseType> convertLicenseTypes(List<CSVRecord> records)", "class_method_signature": "ConvertRecord.convertLicenseTypes(List<CSVRecord> records)", "testcase": false, "constructor": false}, {"identifier": "licenseTypeSerializer", "parameters": "()", "modifiers": "public static", "return": "Serializer<LicenseType>", "signature": "Serializer<LicenseType> licenseTypeSerializer()", "full_signature": "public static Serializer<LicenseType> licenseTypeSerializer()", "class_method_signature": "ConvertRecord.licenseTypeSerializer()", "testcase": false, "constructor": false}, {"identifier": "fillLicenses", "parameters": "(List<CSVRecord> records, Map<Integer, LicenseType> licenseTypeMap, Map<Integer, Todo> todoMap, Map<Integer, Risk> riskMap, Map<String, Set<Integer>> licenseTodo, Map<String, Set<Integer>> licenseRisk)", "modifiers": "public static", "return": "List<License>", "signature": "List<License> fillLicenses(List<CSVRecord> records, Map<Integer, LicenseType> licenseTypeMap, Map<Integer, Todo> todoMap, Map<Integer, Risk> riskMap, Map<String, Set<Integer>> licenseTodo, Map<String, Set<Integer>> licenseRisk)", "full_signature": "public static List<License> fillLicenses(List<CSVRecord> records, Map<Integer, LicenseType> licenseTypeMap, Map<Integer, Todo> todoMap, Map<Integer, Risk> riskMap, Map<String, Set<Integer>> licenseTodo, Map<String, Set<Integer>> licenseRisk)", "class_method_signature": "ConvertRecord.fillLicenses(List<CSVRecord> records, Map<Integer, LicenseType> licenseTypeMap, Map<Integer, Todo> todoMap, Map<Integer, Risk> riskMap, Map<String, Set<Integer>> licenseTodo, Map<String, Set<Integer>> licenseRisk)", "testcase": false, "constructor": false}, {"identifier": "licenseSerializer", "parameters": "()", "modifiers": "public static", "return": "Serializer<License>", "signature": "Serializer<License> licenseSerializer()", "full_signature": "public static Serializer<License> licenseSerializer()", "class_method_signature": "ConvertRecord.licenseSerializer()", "testcase": false, "constructor": false}, {"identifier": "convertRelationalTable", "parameters": "(List<CSVRecord> records)", "modifiers": "public static", "return": "Map<String, Set<Integer>>", "signature": "Map<String, Set<Integer>> convertRelationalTable(List<CSVRecord> records)", "full_signature": "public static Map<String, Set<Integer>> convertRelationalTable(List<CSVRecord> records)", "class_method_signature": "ConvertRecord.convertRelationalTable(List<CSVRecord> records)", "testcase": false, "constructor": false}, {"identifier": "convertRelationalTableWithIntegerKeys", "parameters": "(List<CSVRecord> records)", "modifiers": "public static", "return": "Map<Integer, Set<Integer>>", "signature": "Map<Integer, Set<Integer>> convertRelationalTableWithIntegerKeys(List<CSVRecord> records)", "full_signature": "public static Map<Integer, Set<Integer>> convertRelationalTableWithIntegerKeys(List<CSVRecord> records)", "class_method_signature": "ConvertRecord.convertRelationalTableWithIntegerKeys(List<CSVRecord> records)", "testcase": false, "constructor": false}, {"identifier": "invertRelation", "parameters": "(Map<Integer, Set<Integer>> obligationTodo)", "modifiers": "private static", "return": "Map<Integer, Set<Integer>>", "signature": "Map<Integer, Set<Integer>> invertRelation(Map<Integer, Set<Integer>> obligationTodo)", "full_signature": "private static Map<Integer, Set<Integer>> invertRelation(Map<Integer, Set<Integer>> obligationTodo)", "class_method_signature": "ConvertRecord.invertRelation(Map<Integer, Set<Integer>> obligationTodo)", "testcase": false, "constructor": false}, {"identifier": "parseBoolean", "parameters": "(String string)", "modifiers": "private static", "return": "boolean", "signature": "boolean parseBoolean(String string)", "full_signature": "private static boolean parseBoolean(String string)", "class_method_signature": "ConvertRecord.parseBoolean(String string)", "testcase": false, "constructor": false}, {"identifier": "getTodoToObligationMap", "parameters": "(List<Todo> todos)", "modifiers": "@NotNull public static", "return": "SetMultimap<Integer, Integer>", "signature": "SetMultimap<Integer, Integer> getTodoToObligationMap(List<Todo> todos)", "full_signature": "@NotNull public static SetMultimap<Integer, Integer> getTodoToObligationMap(List<Todo> todos)", "class_method_signature": "ConvertRecord.getTodoToObligationMap(List<Todo> todos)", "testcase": false, "constructor": false}, {"identifier": "getLicenseToTodoMap", "parameters": "(List<License> licenses)", "modifiers": "@NotNull public static", "return": "SetMultimap<String, Integer>", "signature": "SetMultimap<String, Integer> getLicenseToTodoMap(List<License> licenses)", "full_signature": "@NotNull public static SetMultimap<String, Integer> getLicenseToTodoMap(List<License> licenses)", "class_method_signature": "ConvertRecord.getLicenseToTodoMap(List<License> licenses)", "testcase": false, "constructor": false}, {"identifier": "getLicenseToRiskMap", "parameters": "(List<License> licenses)", "modifiers": "@NotNull public static", "return": "SetMultimap<String, Integer>", "signature": "SetMultimap<String, Integer> getLicenseToRiskMap(List<License> licenses)", "full_signature": "@NotNull public static SetMultimap<String, Integer> getLicenseToRiskMap(List<License> licenses)", "class_method_signature": "ConvertRecord.getLicenseToRiskMap(List<License> licenses)", "testcase": false, "constructor": false}, {"identifier": "addLicenses", "parameters": "(LicenseService.Iface licenseClient, List<License> licensesToAdd, Logger log, User user)", "modifiers": "public static", "return": "void", "signature": "void addLicenses(LicenseService.Iface licenseClient, List<License> licensesToAdd, Logger log, User user)", "full_signature": "public static void addLicenses(LicenseService.Iface licenseClient, List<License> licensesToAdd, Logger log, User user)", "class_method_signature": "ConvertRecord.addLicenses(LicenseService.Iface licenseClient, List<License> licensesToAdd, Logger log, User user)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(List<T> in, Serializer<T> serializer)", "modifiers": "public static", "return": "List<List<String>>", "signature": "List<List<String>> serialize(List<T> in, Serializer<T> serializer)", "full_signature": "public static List<List<String>> serialize(List<T> in, Serializer<T> serializer)", "class_method_signature": "ConvertRecord.serialize(List<T> in, Serializer<T> serializer)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(List<T> in, List<String> headers, Function<T, List<String>> function)", "modifiers": "public static", "return": "List<List<String>>", "signature": "List<List<String>> serialize(List<T> in, List<String> headers, Function<T, List<String>> function)", "full_signature": "public static List<List<String>> serialize(List<T> in, List<String> headers, Function<T, List<String>> function)", "class_method_signature": "ConvertRecord.serialize(List<T> in, List<String> headers, Function<T, List<String>> function)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(SetMultimap<T, U> aToB, List<String> headers)", "modifiers": "@NotNull public static", "return": "List<List<String>>", "signature": "List<List<String>> serialize(SetMultimap<T, U> aToB, List<String> headers)", "full_signature": "@NotNull public static List<List<String>> serialize(SetMultimap<T, U> aToB, List<String> headers)", "class_method_signature": "ConvertRecord.serialize(SetMultimap<T, U> aToB, List<String> headers)", "testcase": false, "constructor": false}], "file": "libraries/commonIO/src/main/java/org/eclipse/sw360/commonIO/ConvertRecord.java"}, "focal_method": {"identifier": "convertCustomPropertiesById", "parameters": "(List<CSVRecord> records)", "modifiers": "public static", "return": "Map<Integer, PropertyWithValue>", "body": "public static Map<Integer, PropertyWithValue> convertCustomPropertiesById(List<CSVRecord> records){\n        Map<Integer, PropertyWithValue> resultPropertiesById = new HashMap<>();\n        for (CSVRecord record : records){\n            if(! isValidPropertyRecord(record)){\n                break;\n            }\n            Integer id = Integer.parseInt(record.get(0));\n            String property = record.get(1).trim();\n            String value = record.get(2).trim();\n            resultPropertiesById.put(id, new PropertyWithValue(property, value));\n        }\n        return resultPropertiesById;\n    }", "signature": "Map<Integer, PropertyWithValue> convertCustomPropertiesById(List<CSVRecord> records)", "full_signature": "public static Map<Integer, PropertyWithValue> convertCustomPropertiesById(List<CSVRecord> records)", "class_method_signature": "ConvertRecord.convertCustomPropertiesById(List<CSVRecord> records)", "testcase": false, "constructor": false, "invocations": ["isValidPropertyRecord", "parseInt", "get", "trim", "get", "trim", "get", "put"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}