{"test_class": {"identifier": "IntegerValueConverterTest", "superclass": "extends ValueConverterTestCase<Integer>", "interfaces": "", "fields": [], "file": "rdf-orm/com.mobi.rdf.orm/src/test/java/com/mobi/rdf/orm/conversion/impl/IntegerValueConverterTest.java"}, "test_case": {"identifier": "testEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmpty() {\n        try {\n            valueConverter.convertValue(valueFactory.createLiteral(\"\"), null, type);\n            TestCase.fail(\"Empty string should cause ValueConversionException\");\n        } catch (ValueConversionException e) {\n            TestCase.assertTrue(\"Cause of error should have been NumberFormatException\",\n                    e.getCause() instanceof NumberFormatException);\n        }\n    }", "signature": "void testEmpty()", "full_signature": "@Test public void testEmpty()", "class_method_signature": "IntegerValueConverterTest.testEmpty()", "testcase": true, "constructor": false, "invocations": ["convertValue", "createLiteral", "fail", "assertTrue", "getCause"]}, "focal_class": {"identifier": "IntegerValueConverter", "superclass": "extends AbstractValueConverter<Integer>", "interfaces": "", "fields": [], "methods": [{"identifier": "IntegerValueConverter", "parameters": "()", "modifiers": "public", "return": "", "signature": " IntegerValueConverter()", "full_signature": "public  IntegerValueConverter()", "class_method_signature": "IntegerValueConverter.IntegerValueConverter()", "testcase": false, "constructor": true}, {"identifier": "convertValue", "parameters": "(final Value value, final Thing thing, final Class<? extends Integer> desiredType)", "modifiers": "@Override public", "return": "Integer", "signature": "Integer convertValue(final Value value, final Thing thing, final Class<? extends Integer> desiredType)", "full_signature": "@Override public Integer convertValue(final Value value, final Thing thing, final Class<? extends Integer> desiredType)", "class_method_signature": "IntegerValueConverter.convertValue(final Value value, final Thing thing, final Class<? extends Integer> desiredType)", "testcase": false, "constructor": false}, {"identifier": "convertType", "parameters": "(Integer type, Thing thing)", "modifiers": "@Override public", "return": "Value", "signature": "Value convertType(Integer type, Thing thing)", "full_signature": "@Override public Value convertType(Integer type, Thing thing)", "class_method_signature": "IntegerValueConverter.convertType(Integer type, Thing thing)", "testcase": false, "constructor": false}], "file": "rdf-orm/com.mobi.rdf.orm/src/main/java/com/mobi/rdf/orm/conversion/impl/IntegerValueConverter.java"}, "focal_method": {"identifier": "convertValue", "parameters": "(final Value value, final Thing thing, final Class<? extends Integer> desiredType)", "modifiers": "@Override public", "return": "Integer", "body": "@Override\n    public Integer convertValue(final Value value, final Thing thing, final Class<? extends Integer> desiredType)\n            throws ValueConversionException {\n        try {\n            return Integer.parseInt(value.stringValue());\n        } catch (NumberFormatException e) {\n            throw new ValueConversionException(\"Issue getting int value from statement\", e);\n        }\n    }", "signature": "Integer convertValue(final Value value, final Thing thing, final Class<? extends Integer> desiredType)", "full_signature": "@Override public Integer convertValue(final Value value, final Thing thing, final Class<? extends Integer> desiredType)", "class_method_signature": "IntegerValueConverter.convertValue(final Value value, final Thing thing, final Class<? extends Integer> desiredType)", "testcase": false, "constructor": false, "invocations": ["parseInt", "stringValue"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}