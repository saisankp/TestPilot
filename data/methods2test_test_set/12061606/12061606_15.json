{"test_class": {"identifier": "ExplicitToImplicitTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ExplicitToImplicit f = new ExplicitToImplicit();", "modifier": "", "type": "ExplicitToImplicit", "declarator": "f = new ExplicitToImplicit()", "var_name": "f"}], "file": "func/src/test/java/uk/ac/ebi/beam/ExplicitToImplicitTest.java"}, "test_case": {"identifier": "phenylbenzene", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void phenylbenzene() throws Exception {\n        Graph g = Parser.parse(\"c:1:c:c:c(c:c1)-c:2:c:c:c:c:c2\");\n        Assert.assertThat(Generator.generate(g),\n                          CoreMatchers.is(\"c:1:c:c:c(c:c1)-c:2:c:c:c:c:c2\"));\n        Assert.assertThat(Generator.generate(f.apply(g)),\n                          CoreMatchers.is(\"c1ccc(cc1)-c2ccccc2\"));\n    }", "signature": "void phenylbenzene()", "full_signature": "@Test public void phenylbenzene()", "class_method_signature": "ExplicitToImplicitTest.phenylbenzene()", "testcase": true, "constructor": false, "invocations": ["parse", "assertThat", "generate", "is", "assertThat", "generate", "apply", "is"]}, "focal_class": {"identifier": "ExplicitToImplicit", "superclass": "extends AbstractFunction<Graph, Graph>", "interfaces": "", "fields": [], "methods": [{"identifier": "apply", "parameters": "(final Graph g)", "modifiers": "public", "return": "Graph", "signature": "Graph apply(final Graph g)", "full_signature": "public Graph apply(final Graph g)", "class_method_signature": "ExplicitToImplicit.apply(final Graph g)", "testcase": false, "constructor": false}, {"identifier": "toImplicitEdge", "parameters": "(final Graph g, final Edge e)", "modifiers": "static", "return": "Edge", "signature": "Edge toImplicitEdge(final Graph g, final Edge e)", "full_signature": "static Edge toImplicitEdge(final Graph g, final Edge e)", "class_method_signature": "ExplicitToImplicit.toImplicitEdge(final Graph g, final Edge e)", "testcase": false, "constructor": false}, {"identifier": "type", "parameters": "(Atom u, Atom v, Bond b)", "modifiers": "static", "return": "Bond", "signature": "Bond type(Atom u, Atom v, Bond b)", "full_signature": "static Bond type(Atom u, Atom v, Bond b)", "class_method_signature": "ExplicitToImplicit.type(Atom u, Atom v, Bond b)", "testcase": false, "constructor": false}], "file": "func/src/main/java/uk/ac/ebi/beam/ExplicitToImplicit.java"}, "focal_method": {"identifier": "apply", "parameters": "(final Graph g)", "modifiers": "public", "return": "Graph", "body": "public Graph apply(final Graph g) {\n\n        Graph h = new Graph(g.order());\n\n        // atom/topology information doesn't change\n        for (int u = 0; u < g.order(); u++) {\n            h.addAtom(g.atom(u));\n            h.addTopology(g.topologyOf(u));\n        }\n\n        // transform edges\n        for (int u = 0; u < g.order(); u++) {\n            for (final Edge e : g.edges(u)) {\n                if (e.other(u) > u)\n                    h.addEdge(toImplicitEdge(g, e));\n            }\n        }\n\n        return h;\n    }", "signature": "Graph apply(final Graph g)", "full_signature": "public Graph apply(final Graph g)", "class_method_signature": "ExplicitToImplicit.apply(final Graph g)", "testcase": false, "constructor": false, "invocations": ["order", "order", "addAtom", "atom", "addTopology", "topologyOf", "order", "edges", "other", "addEdge", "toImplicitEdge"]}, "repository": {"repo_id": 12061606, "url": "https://github.com/johnmay/beam", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 19, "size": 825, "license": "licensed"}}