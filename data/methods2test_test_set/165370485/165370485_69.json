{"test_class": {"identifier": "MAMStanzaHandlerInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Entity ALICE = EntityImpl.parseUnchecked(\"alice@foo.com\");", "modifier": "private static final", "type": "Entity", "declarator": "ALICE = EntityImpl.parseUnchecked(\"alice@foo.com\")", "var_name": "ALICE"}, {"original_string": "private static final Entity BOB = EntityImpl.parseUnchecked(\"bob@foo.com\");", "modifier": "private static final", "type": "Entity", "declarator": "BOB = EntityImpl.parseUnchecked(\"bob@foo.com\")", "var_name": "BOB"}, {"original_string": "private ServerRuntimeContext serverRuntimeContext;", "modifier": "private", "type": "ServerRuntimeContext", "declarator": "serverRuntimeContext", "var_name": "serverRuntimeContext"}, {"original_string": "private SessionContext sessionContext;", "modifier": "private", "type": "SessionContext", "declarator": "sessionContext", "var_name": "sessionContext"}, {"original_string": "private SessionStateHolder sessionStateHolder;", "modifier": "private", "type": "SessionStateHolder", "declarator": "sessionStateHolder", "var_name": "sessionStateHolder"}, {"original_string": "private StanzaBroker nonArchivingStanzaBroker;", "modifier": "private", "type": "StanzaBroker", "declarator": "nonArchivingStanzaBroker", "var_name": "nonArchivingStanzaBroker"}, {"original_string": "private StanzaBroker archivingStanzaBroker;", "modifier": "private", "type": "StanzaBroker", "declarator": "archivingStanzaBroker", "var_name": "archivingStanzaBroker"}, {"original_string": "private StanzaHandlerInterceptorChain interceptorChain;", "modifier": "private", "type": "StanzaHandlerInterceptorChain", "declarator": "interceptorChain", "var_name": "interceptorChain"}, {"original_string": "private MAMStanzaBrokerProviderMock mamStanzaBrokerProvider;", "modifier": "private", "type": "MAMStanzaBrokerProviderMock", "declarator": "mamStanzaBrokerProvider", "var_name": "mamStanzaBrokerProvider"}, {"original_string": "private MAMStanzaHandlerInterceptor tested;", "modifier": "private", "type": "MAMStanzaHandlerInterceptor", "declarator": "tested", "var_name": "tested"}], "file": "server/extensions/xep0313-mam/src/test/java/org/apache/vysper/xmpp/modules/extension/xep0313_mam/interceptor/MAMStanzaHandlerInterceptorTest.java"}, "test_case": {"identifier": "stanzaWithHintNoPermanentStoreShouldNotBeStored", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void stanzaWithHintNoPermanentStoreShouldNotBeStored() throws ProtocolException {\n        Stanza stanza = StanzaBuilder.createMessageStanza(ALICE, BOB, \"en\", null)\n                .startInnerElement(\"no-permanent-store\", NamespaceURIs.XEP0334_MESSAGE_PROCESSING_HINTS)\n                .endInnerElement().build();\n\n        tested.intercept(stanza, serverRuntimeContext, false, sessionContext, sessionStateHolder,\n                nonArchivingStanzaBroker, interceptorChain);\n\n        verify(interceptorChain).intercept(stanza, serverRuntimeContext, false, sessionContext, sessionStateHolder,\n                nonArchivingStanzaBroker);\n    }", "signature": "void stanzaWithHintNoPermanentStoreShouldNotBeStored()", "full_signature": "@Test public void stanzaWithHintNoPermanentStoreShouldNotBeStored()", "class_method_signature": "MAMStanzaHandlerInterceptorTest.stanzaWithHintNoPermanentStoreShouldNotBeStored()", "testcase": true, "constructor": false, "invocations": ["build", "endInnerElement", "startInnerElement", "createMessageStanza", "intercept", "intercept", "verify"]}, "focal_class": {"identifier": "MAMStanzaHandlerInterceptor", "superclass": "", "interfaces": "implements StanzaHandlerInterceptor", "fields": [{"original_string": "private final List<MAMStanzaBrokerProvider> stanzaBrokerProviders;", "modifier": "private final", "type": "List<MAMStanzaBrokerProvider>", "declarator": "stanzaBrokerProviders", "var_name": "stanzaBrokerProviders"}], "methods": [{"identifier": "MAMStanzaHandlerInterceptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " MAMStanzaHandlerInterceptor()", "full_signature": "public  MAMStanzaHandlerInterceptor()", "class_method_signature": "MAMStanzaHandlerInterceptor.MAMStanzaHandlerInterceptor()", "testcase": false, "constructor": true}, {"identifier": "MAMStanzaHandlerInterceptor", "parameters": "(List<MAMStanzaBrokerProvider> stanzaBrokerProviders)", "modifiers": "", "return": "", "signature": " MAMStanzaHandlerInterceptor(List<MAMStanzaBrokerProvider> stanzaBrokerProviders)", "full_signature": "  MAMStanzaHandlerInterceptor(List<MAMStanzaBrokerProvider> stanzaBrokerProviders)", "class_method_signature": "MAMStanzaHandlerInterceptor.MAMStanzaHandlerInterceptor(List<MAMStanzaBrokerProvider> stanzaBrokerProviders)", "testcase": false, "constructor": true}, {"identifier": "intercept", "parameters": "(Stanza stanza, ServerRuntimeContext serverRuntimeContext, boolean isOutboundStanza,\n            SessionContext sessionContext, SessionStateHolder sessionStateHolder, StanzaBroker stanzaBroker,\n            StanzaHandlerInterceptorChain interceptorChain)", "modifiers": "@Override public", "return": "void", "signature": "void intercept(Stanza stanza, ServerRuntimeContext serverRuntimeContext, boolean isOutboundStanza,\n            SessionContext sessionContext, SessionStateHolder sessionStateHolder, StanzaBroker stanzaBroker,\n            StanzaHandlerInterceptorChain interceptorChain)", "full_signature": "@Override public void intercept(Stanza stanza, ServerRuntimeContext serverRuntimeContext, boolean isOutboundStanza,\n            SessionContext sessionContext, SessionStateHolder sessionStateHolder, StanzaBroker stanzaBroker,\n            StanzaHandlerInterceptorChain interceptorChain)", "class_method_signature": "MAMStanzaHandlerInterceptor.intercept(Stanza stanza, ServerRuntimeContext serverRuntimeContext, boolean isOutboundStanza,\n            SessionContext sessionContext, SessionStateHolder sessionStateHolder, StanzaBroker stanzaBroker,\n            StanzaHandlerInterceptorChain interceptorChain)", "testcase": false, "constructor": false}, {"identifier": "isCandidateForArchiving", "parameters": "(Stanza stanza)", "modifiers": "private", "return": "boolean", "signature": "boolean isCandidateForArchiving(Stanza stanza)", "full_signature": "private boolean isCandidateForArchiving(Stanza stanza)", "class_method_signature": "MAMStanzaHandlerInterceptor.isCandidateForArchiving(Stanza stanza)", "testcase": false, "constructor": false}, {"identifier": "isArchivingForced", "parameters": "(Stanza stanza)", "modifiers": "private", "return": "boolean", "signature": "boolean isArchivingForced(Stanza stanza)", "full_signature": "private boolean isArchivingForced(Stanza stanza)", "class_method_signature": "MAMStanzaHandlerInterceptor.isArchivingForced(Stanza stanza)", "testcase": false, "constructor": false}], "file": "server/extensions/xep0313-mam/src/main/java/org/apache/vysper/xmpp/modules/extension/xep0313_mam/interceptor/MAMStanzaHandlerInterceptor.java"}, "focal_method": {"identifier": "intercept", "parameters": "(Stanza stanza, ServerRuntimeContext serverRuntimeContext, boolean isOutboundStanza,\n            SessionContext sessionContext, SessionStateHolder sessionStateHolder, StanzaBroker stanzaBroker,\n            StanzaHandlerInterceptorChain interceptorChain)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void intercept(Stanza stanza, ServerRuntimeContext serverRuntimeContext, boolean isOutboundStanza,\n            SessionContext sessionContext, SessionStateHolder sessionStateHolder, StanzaBroker stanzaBroker,\n            StanzaHandlerInterceptorChain interceptorChain) throws ProtocolException {\n\n        StanzaBroker stanzaBrokerToUse;\n        if (isCandidateForArchiving(stanza)) {\n            stanzaBrokerToUse = stanzaBrokerProviders.stream()\n                    .filter(mamStanzaBrokerProvider -> mamStanzaBrokerProvider.supports(stanza, serverRuntimeContext))\n                    .map(mamStanzaBrokerProvider -> mamStanzaBrokerProvider.proxy(stanzaBroker, serverRuntimeContext,\n                            sessionContext, isOutboundStanza, isArchivingForced(stanza)))\n                    .findFirst().orElse(stanzaBroker);\n        } else {\n            stanzaBrokerToUse = stanzaBroker;\n        }\n\n        interceptorChain.intercept(stanza, serverRuntimeContext, isOutboundStanza, sessionContext, sessionStateHolder,\n                stanzaBrokerToUse);\n    }", "signature": "void intercept(Stanza stanza, ServerRuntimeContext serverRuntimeContext, boolean isOutboundStanza,\n            SessionContext sessionContext, SessionStateHolder sessionStateHolder, StanzaBroker stanzaBroker,\n            StanzaHandlerInterceptorChain interceptorChain)", "full_signature": "@Override public void intercept(Stanza stanza, ServerRuntimeContext serverRuntimeContext, boolean isOutboundStanza,\n            SessionContext sessionContext, SessionStateHolder sessionStateHolder, StanzaBroker stanzaBroker,\n            StanzaHandlerInterceptorChain interceptorChain)", "class_method_signature": "MAMStanzaHandlerInterceptor.intercept(Stanza stanza, ServerRuntimeContext serverRuntimeContext, boolean isOutboundStanza,\n            SessionContext sessionContext, SessionStateHolder sessionStateHolder, StanzaBroker stanzaBroker,\n            StanzaHandlerInterceptorChain interceptorChain)", "testcase": false, "constructor": false, "invocations": ["isCandidateForArchiving", "orElse", "findFirst", "map", "filter", "stream", "supports", "proxy", "isArchivingForced", "intercept"]}, "repository": {"repo_id": 165370485, "url": "https://github.com/apache/mina-vysper", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 29305, "license": "licensed"}}