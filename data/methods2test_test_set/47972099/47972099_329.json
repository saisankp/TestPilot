{"test_class": {"identifier": "AsynchronousBufferFileWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final IOManager ioManager = new IOManagerAsync();", "modifier": "private static final", "type": "IOManager", "declarator": "ioManager = new IOManagerAsync()", "var_name": "ioManager"}, {"original_string": "private static final Buffer mockBuffer = mock(Buffer.class);", "modifier": "private static final", "type": "Buffer", "declarator": "mockBuffer = mock(Buffer.class)", "var_name": "mockBuffer"}, {"original_string": "private AsynchronousBufferFileWriter writer;", "modifier": "private", "type": "AsynchronousBufferFileWriter", "declarator": "writer", "var_name": "writer"}], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/io/disk/iomanager/AsynchronousBufferFileWriterTest.java"}, "test_case": {"identifier": "testAddAndHandleRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddAndHandleRequest() throws Exception {\n\t\taddRequest();\n\t\tassertEquals(\"Didn't increment number of outstanding requests.\", 1, writer.getNumberOfOutstandingRequests());\n\n\t\thandleRequest();\n\t\tassertEquals(\"Didn't decrement number of outstanding requests.\", 0, writer.getNumberOfOutstandingRequests());\n\t}", "signature": "void testAddAndHandleRequest()", "full_signature": "@Test public void testAddAndHandleRequest()", "class_method_signature": "AsynchronousBufferFileWriterTest.testAddAndHandleRequest()", "testcase": true, "constructor": false, "invocations": ["addRequest", "assertEquals", "getNumberOfOutstandingRequests", "handleRequest", "assertEquals", "getNumberOfOutstandingRequests"]}, "focal_class": {"identifier": "AsynchronousBufferFileWriter", "superclass": "extends AsynchronousFileIOChannel<Buffer, WriteRequest>", "interfaces": "implements BufferFileWriter", "fields": [{"original_string": "private static final RecyclingCallback CALLBACK = new RecyclingCallback();", "modifier": "private static final", "type": "RecyclingCallback", "declarator": "CALLBACK = new RecyclingCallback()", "var_name": "CALLBACK"}], "methods": [{"identifier": "AsynchronousBufferFileWriter", "parameters": "(ID channelID, RequestQueue<WriteRequest> requestQueue)", "modifiers": "protected", "return": "", "signature": " AsynchronousBufferFileWriter(ID channelID, RequestQueue<WriteRequest> requestQueue)", "full_signature": "protected  AsynchronousBufferFileWriter(ID channelID, RequestQueue<WriteRequest> requestQueue)", "class_method_signature": "AsynchronousBufferFileWriter.AsynchronousBufferFileWriter(ID channelID, RequestQueue<WriteRequest> requestQueue)", "testcase": false, "constructor": true}, {"identifier": "writeBlock", "parameters": "(Buffer buffer)", "modifiers": "@Override public", "return": "void", "signature": "void writeBlock(Buffer buffer)", "full_signature": "@Override public void writeBlock(Buffer buffer)", "class_method_signature": "AsynchronousBufferFileWriter.writeBlock(Buffer buffer)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfOutstandingRequests", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNumberOfOutstandingRequests()", "full_signature": "@Override public int getNumberOfOutstandingRequests()", "class_method_signature": "AsynchronousBufferFileWriter.getNumberOfOutstandingRequests()", "testcase": false, "constructor": false}, {"identifier": "registerAllRequestsProcessedListener", "parameters": "(NotificationListener listener)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean registerAllRequestsProcessedListener(NotificationListener listener)", "full_signature": "@Override public boolean registerAllRequestsProcessedListener(NotificationListener listener)", "class_method_signature": "AsynchronousBufferFileWriter.registerAllRequestsProcessedListener(NotificationListener listener)", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/io/disk/iomanager/AsynchronousBufferFileWriter.java"}, "focal_method": {"identifier": "getNumberOfOutstandingRequests", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n\tpublic int getNumberOfOutstandingRequests() {\n\t\treturn requestsNotReturned.get();\n\t}", "signature": "int getNumberOfOutstandingRequests()", "full_signature": "@Override public int getNumberOfOutstandingRequests()", "class_method_signature": "AsynchronousBufferFileWriter.getNumberOfOutstandingRequests()", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}