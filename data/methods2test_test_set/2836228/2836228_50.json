{"test_class": {"identifier": "FeedEvictorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EmbeddedCluster cluster;", "modifier": "private", "type": "EmbeddedCluster", "declarator": "cluster", "var_name": "cluster"}, {"original_string": "private InMemoryWriter stream = new InMemoryWriter(System.out);", "modifier": "private", "type": "InMemoryWriter", "declarator": "stream = new InMemoryWriter(System.out)", "var_name": "stream"}, {"original_string": "private Map<String, String> map = new HashMap<String, String>();", "modifier": "private", "type": "Map<String, String>", "declarator": "map = new HashMap<String, String>()", "var_name": "map"}], "file": "retention/src/test/java/org/apache/ivory/retention/FeedEvictorTest.java"}, "test_case": {"identifier": "testEviction4", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testEviction4() throws Exception {\n\t\ttry {\n\t\t\tConfiguration conf = cluster.getConf();\n\t\t\tFileSystem fs = FileSystem.get(conf);\n\t\t\tfs.delete(new Path(\"/\"), true);\n\t\t\tstream.clear();\n\n\t\t\tPair<List<String>, List<String>>  pair;\n\t\t\tpair = createTestData(\"/data\");\n\t\t\tFeedEvictor.main(new String[] {\n\t\t\t\t\t\"-feedBasePath\",\n\t\t\t\t\tcluster.getConf().get(\"fs.default.name\")\n\t\t\t\t\t\t\t+ \"/data/YYYY/feed3/dd/MM/\"\n\t\t\t\t\t\t\t+ \"?{MONTH}/more/?{HOUR}\", \"-retentionType\",\n\t\t\t\t\t\"instance\", \"-retentionLimit\", \"months(5)\", \"-timeZone\",\n\t\t\t\t\t\"UTC\", \"-frequency\", \"hourly\", \"-logFile\",\n\t\t\t\t\t\"/ivory/staging/feed/2012-01-01-04-00\" });\n\t\t\tAssert.assertEquals(\"instances=NULL\", stream.getBuffer());\n\n\t\t\tstream.clear();\n\t\t\tString dataPath=\"/data/YYYY/feed4/dd/MM/\" +\n\t\t\t\t\t\"02/more/hello\";\n\t\t\tString logFile = \"/ivory/staging/feed/instancePaths-2012-01-01-02-00.csv\";\n\t\t\tFeedEvictor.main(new String[] { \"-feedBasePath\",\n\t\t\t\t\tcluster.getConf().get(\"fs.default.name\") + dataPath,\n\t\t\t\t\t\"-retentionType\", \"instance\", \"-retentionLimit\",\n\t\t\t\t\t\"hours(5)\", \"-timeZone\", \"UTC\", \"-frequency\", \"hourly\",\n\t\t\t\t\t\"-logFile\", logFile });\n\t\t\tAssert.assertEquals(\"instances=NULL\", stream.getBuffer());     \n\t\t\t\n\t\t\tAssert.assertEquals(readLogFile(new Path(logFile)), getExpectedInstancePaths(dataPath));\n\n\t\t\tassertFailures(fs, pair);\n\t\t} catch (Exception e) {\n\t\t\tAssert.fail(\"Unknown exception\", e);\n\t\t}\n\t}", "signature": "void testEviction4()", "full_signature": "@Test public void testEviction4()", "class_method_signature": "FeedEvictorTest.testEviction4()", "testcase": true, "constructor": false, "invocations": ["getConf", "get", "delete", "clear", "createTestData", "main", "get", "getConf", "assertEquals", "getBuffer", "clear", "main", "get", "getConf", "assertEquals", "getBuffer", "assertEquals", "readLogFile", "getExpectedInstancePaths", "assertFailures", "fail"]}, "focal_class": {"identifier": "FeedEvictor", "superclass": "extends Configured", "interfaces": "implements Tool", "fields": [{"original_string": "private static Logger LOG = Logger.getLogger(FeedEvictor.class);", "modifier": "private static", "type": "Logger", "declarator": "LOG = Logger.getLogger(FeedEvictor.class)", "var_name": "LOG"}, {"original_string": "private static final ExpressionEvaluator EVALUATOR = new\n            ExpressionEvaluatorImpl();", "modifier": "private static final", "type": "ExpressionEvaluator", "declarator": "EVALUATOR = new\n            ExpressionEvaluatorImpl()", "var_name": "EVALUATOR"}, {"original_string": "private static final ExpressionHelper resolver = ExpressionHelper.get();", "modifier": "private static final", "type": "ExpressionHelper", "declarator": "resolver = ExpressionHelper.get()", "var_name": "resolver"}, {"original_string": "static PrintStream stream = System.out;", "modifier": "static", "type": "PrintStream", "declarator": "stream = System.out", "var_name": "stream"}, {"original_string": "private static final String format = \"yyyyMMddHHmm\";", "modifier": "private static final", "type": "String", "declarator": "format = \"yyyyMMddHHmm\"", "var_name": "format"}, {"original_string": "private FileSystem fs;", "modifier": "private", "type": "FileSystem", "declarator": "fs", "var_name": "fs"}, {"original_string": "private Map<VARS, String> map = new TreeMap<VARS, String>();", "modifier": "private", "type": "Map<VARS, String>", "declarator": "map = new TreeMap<VARS, String>()", "var_name": "map"}, {"original_string": "private final StringBuffer instancePaths = new StringBuffer(\"instancePaths=\");", "modifier": "private final", "type": "StringBuffer", "declarator": "instancePaths = new StringBuffer(\"instancePaths=\")", "var_name": "instancePaths"}, {"original_string": "private final StringBuffer buffer = new StringBuffer();", "modifier": "private final", "type": "StringBuffer", "declarator": "buffer = new StringBuffer()", "var_name": "buffer"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "FeedEvictor.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(String[] args)", "modifiers": "@Override public", "return": "int", "signature": "int run(String[] args)", "full_signature": "@Override public int run(String[] args)", "class_method_signature": "FeedEvictor.run(String[] args)", "testcase": false, "constructor": false}, {"identifier": "evictor", "parameters": "(String feedBasePath, String retentionType,\n\t\t\tString retentionLimit, String timeZone, String frequency,\n\t\t\tString logFile)", "modifiers": "private", "return": "void", "signature": "void evictor(String feedBasePath, String retentionType,\n\t\t\tString retentionLimit, String timeZone, String frequency,\n\t\t\tString logFile)", "full_signature": "private void evictor(String feedBasePath, String retentionType,\n\t\t\tString retentionLimit, String timeZone, String frequency,\n\t\t\tString logFile)", "class_method_signature": "FeedEvictor.evictor(String feedBasePath, String retentionType,\n\t\t\tString retentionLimit, String timeZone, String frequency,\n\t\t\tString logFile)", "testcase": false, "constructor": false}, {"identifier": "logInstancePaths", "parameters": "(Path path, String instancePaths)", "modifiers": "private", "return": "void", "signature": "void logInstancePaths(Path path, String instancePaths)", "full_signature": "private void logInstancePaths(Path path, String instancePaths)", "class_method_signature": "FeedEvictor.logInstancePaths(Path path, String instancePaths)", "testcase": false, "constructor": false}, {"identifier": "getDateRange", "parameters": "(String period)", "modifiers": "private", "return": "Pair<Date, Date>", "signature": "Pair<Date, Date> getDateRange(String period)", "full_signature": "private Pair<Date, Date> getDateRange(String period)", "class_method_signature": "FeedEvictor.getDateRange(String period)", "testcase": false, "constructor": false}, {"identifier": "discoverInstanceToDelete", "parameters": "(String inPath, String timeZone,\n                                                String dateMask, Date start)", "modifiers": "private", "return": "List<Path>", "signature": "List<Path> discoverInstanceToDelete(String inPath, String timeZone,\n                                                String dateMask, Date start)", "full_signature": "private List<Path> discoverInstanceToDelete(String inPath, String timeZone,\n                                                String dateMask, Date start)", "class_method_signature": "FeedEvictor.discoverInstanceToDelete(String inPath, String timeZone,\n                                                String dateMask, Date start)", "testcase": false, "constructor": false}, {"identifier": "getDateFormatInPath", "parameters": "(String inPath)", "modifiers": "private", "return": "String", "signature": "String getDateFormatInPath(String inPath)", "full_signature": "private String getDateFormatInPath(String inPath)", "class_method_signature": "FeedEvictor.getDateFormatInPath(String inPath)", "testcase": false, "constructor": false}, {"identifier": "findFilesForFeed", "parameters": "(String feedBasePath)", "modifiers": "private", "return": "FileStatus[]", "signature": "FileStatus[] findFilesForFeed(String feedBasePath)", "full_signature": "private FileStatus[] findFilesForFeed(String feedBasePath)", "class_method_signature": "FeedEvictor.findFilesForFeed(String feedBasePath)", "testcase": false, "constructor": false}, {"identifier": "extractDatePartFromPathMask", "parameters": "(String mask, String inPath)", "modifiers": "private", "return": "String", "signature": "String extractDatePartFromPathMask(String mask, String inPath)", "full_signature": "private String extractDatePartFromPathMask(String mask, String inPath)", "class_method_signature": "FeedEvictor.extractDatePartFromPathMask(String mask, String inPath)", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "(Path file, String inMask,\n                         String dateMask, String timeZone)", "modifiers": "private", "return": "Date", "signature": "Date getDate(Path file, String inMask,\n                         String dateMask, String timeZone)", "full_signature": "private Date getDate(Path file, String inMask,\n                         String dateMask, String timeZone)", "class_method_signature": "FeedEvictor.getDate(Path file, String inMask,\n                         String dateMask, String timeZone)", "testcase": false, "constructor": false}, {"identifier": "populateDatePartMap", "parameters": "(String path, String mask)", "modifiers": "private", "return": "void", "signature": "void populateDatePartMap(String path, String mask)", "full_signature": "private void populateDatePartMap(String path, String mask)", "class_method_signature": "FeedEvictor.populateDatePartMap(String path, String mask)", "testcase": false, "constructor": false}, {"identifier": "isDateInRange", "parameters": "(Date date, Date start)", "modifiers": "private", "return": "boolean", "signature": "boolean isDateInRange(Date date, Date start)", "full_signature": "private boolean isDateInRange(Date date, Date start)", "class_method_signature": "FeedEvictor.isDateInRange(Date date, Date start)", "testcase": false, "constructor": false}, {"identifier": "deleteInstance", "parameters": "(Path path)", "modifiers": "private", "return": "boolean", "signature": "boolean deleteInstance(Path path)", "full_signature": "private boolean deleteInstance(Path path)", "class_method_signature": "FeedEvictor.deleteInstance(Path path)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(Path outPath, FileSystem fs)", "modifiers": "private", "return": "void", "signature": "void debug(Path outPath, FileSystem fs)", "full_signature": "private void debug(Path outPath, FileSystem fs)", "class_method_signature": "FeedEvictor.debug(Path outPath, FileSystem fs)", "testcase": false, "constructor": false}, {"identifier": "getCommand", "parameters": "(String[] args)", "modifiers": "private", "return": "CommandLine", "signature": "CommandLine getCommand(String[] args)", "full_signature": "private CommandLine getCommand(String[] args)", "class_method_signature": "FeedEvictor.getCommand(String[] args)", "testcase": false, "constructor": false}], "file": "retention/src/main/java/org/apache/ivory/retention/FeedEvictor.java"}, "focal_method": {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "body": "public static void main(String[] args) throws Exception {\n        Configuration conf = new Configuration();\n        Path confPath = new Path(\"file:///\" + System.getProperty(\"oozie.action.conf.xml\"));\n\n        LOG.info(confPath + \" found ? \" +\n                confPath.getFileSystem(conf).exists(confPath));\n        conf.addResource(confPath);\n        int ret = ToolRunner.run(conf, new FeedEvictor(), args);\n        if (ret != 0) {\n            throw new Exception(\"Unable to perform eviction action args: \" +\n                    Arrays.toString(args));\n        }\n    }", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "FeedEvictor.main(String[] args)", "testcase": false, "constructor": false, "invocations": ["getProperty", "info", "exists", "getFileSystem", "addResource", "run", "toString"]}, "repository": {"repo_id": 2836228, "url": "https://github.com/sriksun/Ivory", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 28, "size": 11708, "license": "licensed"}}