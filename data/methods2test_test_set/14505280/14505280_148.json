{"test_class": {"identifier": "GeometryConvexHullCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate CommandDispatcher dispatcher;", "modifier": "@Autowired\n\tprivate", "type": "CommandDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}], "file": "command/src/test/java/org/geomajas/command/geometry/GeometryConvexHullCommandTest.java"}, "test_case": {"identifier": "doesConvexTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void doesConvexTest() throws  GeomajasException {\n\t\tList<Geometry> geometries = new ArrayList<Geometry>();\n\t\tgeometries.add(createComplexPoly());\n\t\tgeometries.add(createThreePointsLine());\n\t\tGeometryConvexHullRequest request = new GeometryConvexHullRequest();\n\t\trequest.setGeometries(geometries);\n\t\tGeometryConvexHullResponse response = (GeometryConvexHullResponse) dispatcher.execute(\n\t\t\t\tGeometryConvexHullRequest.COMMAND, request, null, \"en\");\n\t\tList<Geometry> result = response.getGeometries();\n\t\tAssert.assertEquals(2, result.size());\n\t\t// From 6 to 5 coordinates\n\t\tAssert.assertEquals(geometries.get(0).getGeometries()[0].getCoordinates().length, \n\t\t\t\t\t\t\tresult.get(0).getGeometries()[0].getCoordinates().length + 1);\n\t\t// From 3 to 4 coordinates; from Line to Polygon\n\t\tAssert.assertEquals(geometries.get(1).getCoordinates().length,\n\t\t\t\t\t\t\tresult.get(1).getGeometries()[0].getCoordinates().length - 1);\n\t}", "signature": "void doesConvexTest()", "full_signature": "@Test public void doesConvexTest()", "class_method_signature": "GeometryConvexHullCommandTest.doesConvexTest()", "testcase": true, "constructor": false, "invocations": ["add", "createComplexPoly", "add", "createThreePointsLine", "setGeometries", "execute", "getGeometries", "assertEquals", "size", "assertEquals", "getCoordinates", "getGeometries", "get", "getCoordinates", "getGeometries", "get", "assertEquals", "getCoordinates", "get", "getCoordinates", "getGeometries", "get"]}, "focal_class": {"identifier": "GeometryConvexHullCommand", "superclass": "", "interfaces": "implements CommandHasRequest<GeometryConvexHullRequest, GeometryConvexHullResponse>", "fields": [{"original_string": "@Autowired\n\tprivate DtoConverterService converter;", "modifier": "@Autowired\n\tprivate", "type": "DtoConverterService", "declarator": "converter", "var_name": "converter"}], "methods": [{"identifier": "getEmptyCommandRequest", "parameters": "()", "modifiers": "@Override public", "return": "GeometryConvexHullRequest", "signature": "GeometryConvexHullRequest getEmptyCommandRequest()", "full_signature": "@Override public GeometryConvexHullRequest getEmptyCommandRequest()", "class_method_signature": "GeometryConvexHullCommand.getEmptyCommandRequest()", "testcase": false, "constructor": false}, {"identifier": "getEmptyCommandResponse", "parameters": "()", "modifiers": "@Override public", "return": "GeometryConvexHullResponse", "signature": "GeometryConvexHullResponse getEmptyCommandResponse()", "full_signature": "@Override public GeometryConvexHullResponse getEmptyCommandResponse()", "class_method_signature": "GeometryConvexHullCommand.getEmptyCommandResponse()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(GeometryConvexHullRequest request, GeometryConvexHullResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void execute(GeometryConvexHullRequest request, GeometryConvexHullResponse response)", "full_signature": "@Override public void execute(GeometryConvexHullRequest request, GeometryConvexHullResponse response)", "class_method_signature": "GeometryConvexHullCommand.execute(GeometryConvexHullRequest request, GeometryConvexHullResponse response)", "testcase": false, "constructor": false}], "file": "command/src/main/java/org/geomajas/command/geometry/GeometryConvexHullCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(GeometryConvexHullRequest request, GeometryConvexHullResponse response)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(GeometryConvexHullRequest request, GeometryConvexHullResponse response) throws Exception {\n\t\tList<org.geomajas.geometry.Geometry> clientGeometries = request.getGeometries();\n\t\tif (clientGeometries == null || clientGeometries.size() == 0) {\n\t\t\tthrow new GeomajasException(ExceptionCode.PARAMETER_MISSING, \"request\");\n\t\t}\n\t\t\n\t\t// Convert to internal, apply ConvexHull and convert back to DTO\n\t\tList<org.geomajas.geometry.Geometry> result = new ArrayList<org.geomajas.geometry.Geometry>();\n\t\tfor (Geometry clientGeometry : clientGeometries) {\n\t\t\tresult.add(converter.toDto(new ConvexHull(converter.toInternal(clientGeometry)).getConvexHull()));\n\t\t}\n\t\tresponse.setGeometries(result);\n\t}", "signature": "void execute(GeometryConvexHullRequest request, GeometryConvexHullResponse response)", "full_signature": "@Override public void execute(GeometryConvexHullRequest request, GeometryConvexHullResponse response)", "class_method_signature": "GeometryConvexHullCommand.execute(GeometryConvexHullRequest request, GeometryConvexHullResponse response)", "testcase": false, "constructor": false, "invocations": ["getGeometries", "size", "add", "toDto", "getConvexHull", "toInternal", "setGeometries"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}