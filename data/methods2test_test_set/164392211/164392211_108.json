{"test_class": {"identifier": "CsvTest", "superclass": "extends BaseCsvTest", "interfaces": "", "fields": [], "file": "dflib-csv/src/test/java/com/nhl/dflib/csv/CsvTest.java"}, "test_case": {"identifier": "testFromFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFromFile() {\n        DataFrame df = Csv.load(inPath(\"f1.csv\"));\n        new DataFrameAsserts(df, \"A\", \"b\", \"C\")\n                .expectHeight(2)\n                .expectRow(0, \"1\", \"2\", \"3\")\n                .expectRow(1, \"4\", \"5\", \"6\");\n    }", "signature": "void testFromFile()", "full_signature": "@Test public void testFromFile()", "class_method_signature": "CsvTest.testFromFile()", "testcase": true, "constructor": false, "invocations": ["load", "inPath", "expectRow", "expectRow", "expectHeight"]}, "focal_class": {"identifier": "Csv", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "load", "parameters": "(File file)", "modifiers": "public static", "return": "DataFrame", "signature": "DataFrame load(File file)", "full_signature": "public static DataFrame load(File file)", "class_method_signature": "Csv.load(File file)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(String filePath)", "modifiers": "public static", "return": "DataFrame", "signature": "DataFrame load(String filePath)", "full_signature": "public static DataFrame load(String filePath)", "class_method_signature": "Csv.load(String filePath)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(Reader reader)", "modifiers": "public static", "return": "DataFrame", "signature": "DataFrame load(Reader reader)", "full_signature": "public static DataFrame load(Reader reader)", "class_method_signature": "Csv.load(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "loader", "parameters": "()", "modifiers": "public static", "return": "CsvLoader", "signature": "CsvLoader loader()", "full_signature": "public static CsvLoader loader()", "class_method_signature": "Csv.loader()", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(DataFrame df, String filePath)", "modifiers": "public static", "return": "void", "signature": "void save(DataFrame df, String filePath)", "full_signature": "public static void save(DataFrame df, String filePath)", "class_method_signature": "Csv.save(DataFrame df, String filePath)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(DataFrame df, File file)", "modifiers": "public static", "return": "void", "signature": "void save(DataFrame df, File file)", "full_signature": "public static void save(DataFrame df, File file)", "class_method_signature": "Csv.save(DataFrame df, File file)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(DataFrame df, Appendable out)", "modifiers": "public static", "return": "void", "signature": "void save(DataFrame df, Appendable out)", "full_signature": "public static void save(DataFrame df, Appendable out)", "class_method_signature": "Csv.save(DataFrame df, Appendable out)", "testcase": false, "constructor": false}, {"identifier": "saver", "parameters": "()", "modifiers": "public static", "return": "CsvSaver", "signature": "CsvSaver saver()", "full_signature": "public static CsvSaver saver()", "class_method_signature": "Csv.saver()", "testcase": false, "constructor": false}], "file": "dflib-csv/src/main/java/com/nhl/dflib/csv/Csv.java"}, "focal_method": {"identifier": "load", "parameters": "(File file)", "modifiers": "public static", "return": "DataFrame", "body": "public static DataFrame load(File file) {\n        return loader().load(file);\n    }", "signature": "DataFrame load(File file)", "full_signature": "public static DataFrame load(File file)", "class_method_signature": "Csv.load(File file)", "testcase": false, "constructor": false, "invocations": ["load", "loader"]}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}