{"test_class": {"identifier": "BlockLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private BlockLoader blockLoader;", "modifier": "@Autowired\n    private", "type": "BlockLoader", "declarator": "blockLoader", "var_name": "blockLoader"}, {"original_string": "private List<Path> dumps;", "modifier": "private", "type": "List<Path>", "declarator": "dumps", "var_name": "dumps"}], "file": "ethereumj-core/src/test/java/org/ethereum/manager/BlockLoaderTest.java"}, "test_case": {"identifier": "testRegularLoading", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRegularLoading() {\n        Path[] paths = dumps.toArray(new Path[]{});\n        boolean loaded = blockLoader.loadBlocks(paths);\n        assertTrue(loaded);\n    }", "signature": "void testRegularLoading()", "full_signature": "@Test public void testRegularLoading()", "class_method_signature": "BlockLoaderTest.testRegularLoading()", "testcase": true, "constructor": false, "invocations": ["toArray", "loadBlocks", "assertTrue"]}, "focal_class": {"identifier": "BlockLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger logger = LoggerFactory.getLogger(\"blockqueue\");", "modifier": "private final static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(\"blockqueue\")", "var_name": "logger"}, {"original_string": "private final static DateTimeFormatter df = DateTimeFormatter.ofPattern(\"HH:mm:ss.SSSS\");", "modifier": "private final static", "type": "DateTimeFormatter", "declarator": "df = DateTimeFormatter.ofPattern(\"HH:mm:ss.SSSS\")", "var_name": "df"}, {"original_string": "private final BlockHeaderValidator headerValidator;", "modifier": "private final", "type": "BlockHeaderValidator", "declarator": "headerValidator", "var_name": "headerValidator"}, {"original_string": "private final Blockchain blockchain;", "modifier": "private final", "type": "Blockchain", "declarator": "blockchain", "var_name": "blockchain"}, {"original_string": "private final DbFlushManager dbFlushManager;", "modifier": "private final", "type": "DbFlushManager", "declarator": "dbFlushManager", "var_name": "dbFlushManager"}, {"original_string": "private ExecutorPipeline<Block, Block> exec1;", "modifier": "private", "type": "ExecutorPipeline<Block, Block>", "declarator": "exec1", "var_name": "exec1"}, {"original_string": "private ExecutorPipeline<Block, ?> exec2;", "modifier": "private", "type": "ExecutorPipeline<Block, ?>", "declarator": "exec2", "var_name": "exec2"}], "methods": [{"identifier": "BlockLoader", "parameters": "(BlockHeaderValidator headerValidator, Blockchain blockchain, DbFlushManager dbFlushManager)", "modifiers": "@Autowired public", "return": "", "signature": " BlockLoader(BlockHeaderValidator headerValidator, Blockchain blockchain, DbFlushManager dbFlushManager)", "full_signature": "@Autowired public  BlockLoader(BlockHeaderValidator headerValidator, Blockchain blockchain, DbFlushManager dbFlushManager)", "class_method_signature": "BlockLoader.BlockLoader(BlockHeaderValidator headerValidator, Blockchain blockchain, DbFlushManager dbFlushManager)", "testcase": false, "constructor": true}, {"identifier": "initPipelines", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initPipelines()", "full_signature": "private void initPipelines()", "class_method_signature": "BlockLoader.initPipelines()", "testcase": false, "constructor": false}, {"identifier": "blockWork", "parameters": "(Block block)", "modifiers": "private", "return": "void", "signature": "void blockWork(Block block)", "full_signature": "private void blockWork(Block block)", "class_method_signature": "BlockLoader.blockWork(Block block)", "testcase": false, "constructor": false}, {"identifier": "loadBlocks", "parameters": "(Function<Path, DumpWalker> walkerFactory, Path... paths)", "modifiers": "public", "return": "boolean", "signature": "boolean loadBlocks(Function<Path, DumpWalker> walkerFactory, Path... paths)", "full_signature": "public boolean loadBlocks(Function<Path, DumpWalker> walkerFactory, Path... paths)", "class_method_signature": "BlockLoader.loadBlocks(Function<Path, DumpWalker> walkerFactory, Path... paths)", "testcase": false, "constructor": false}, {"identifier": "loadBlocks", "parameters": "(Path... paths)", "modifiers": "public", "return": "boolean", "signature": "boolean loadBlocks(Path... paths)", "full_signature": "public boolean loadBlocks(Path... paths)", "class_method_signature": "BlockLoader.loadBlocks(Path... paths)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(BlockHeader header)", "modifiers": "private", "return": "boolean", "signature": "boolean isValid(BlockHeader header)", "full_signature": "private boolean isValid(BlockHeader header)", "class_method_signature": "BlockLoader.isValid(BlockHeader header)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/manager/BlockLoader.java"}, "focal_method": {"identifier": "loadBlocks", "parameters": "(Function<Path, DumpWalker> walkerFactory, Path... paths)", "modifiers": "public", "return": "boolean", "body": "public boolean loadBlocks(Function<Path, DumpWalker> walkerFactory, Path... paths) {\n        if (ArrayUtils.isEmpty(paths)) {\n            logger.warn(\"There is nothing to import.\");\n            return false;\n        }\n\n        initPipelines();\n\n        AtomicLong maxBlockNumber = new AtomicLong();\n        boolean allBlocksImported;\n        try {\n\n            for (Path dump : paths) {\n                try (DumpWalker walker = walkerFactory.apply(dump)) {\n                    walker.forEach(rlp -> {\n                        Block block = new Block(rlp);\n                        if (maxBlockNumber.get() < block.getNumber()) {\n                            maxBlockNumber.set(block.getNumber());\n                        }\n                        exec1.push(block);\n                    });\n                }\n            }\n\n            exec1.join();\n            dbFlushManager.flushSync();\n\n            allBlocksImported = maxBlockNumber.get() == blockchain.getBestBlock().getNumber();\n        } catch (Exception e) {\n            e.printStackTrace();\n            allBlocksImported = false;\n        }\n\n        if (allBlocksImported) {\n            System.out.printf(\"All of %s blocks was successfully loaded.\\n\", maxBlockNumber);\n        } else {\n            System.out.printf(\"Some blocks have been lost during the loading.\");\n        }\n\n        return allBlocksImported;\n    }", "signature": "boolean loadBlocks(Function<Path, DumpWalker> walkerFactory, Path... paths)", "full_signature": "public boolean loadBlocks(Function<Path, DumpWalker> walkerFactory, Path... paths)", "class_method_signature": "BlockLoader.loadBlocks(Function<Path, DumpWalker> walkerFactory, Path... paths)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "warn", "initPipelines", "apply", "forEach", "get", "getNumber", "set", "getNumber", "push", "join", "flushSync", "get", "getNumber", "getBestBlock", "printStackTrace", "printf", "printf"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}