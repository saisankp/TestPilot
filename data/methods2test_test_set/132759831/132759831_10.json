{"test_class": {"identifier": "SmallCinemasPresenterTest", "superclass": "extends UnitTest", "interfaces": "", "fields": [{"original_string": "@Mock private SmallCinemasPresenter.View view;", "modifier": "@Mock private", "type": "SmallCinemasPresenter.View", "declarator": "view", "var_name": "view"}, {"original_string": "@Mock private GetCinemaByQuery useCaseGetCinemaByQueryMock;", "modifier": "@Mock private", "type": "GetCinemaByQuery", "declarator": "useCaseGetCinemaByQueryMock", "var_name": "useCaseGetCinemaByQueryMock"}, {"original_string": "@Mock private List<Cinema> cinemaListMock;", "modifier": "@Mock private", "type": "List<Cinema>", "declarator": "cinemaListMock", "var_name": "cinemaListMock"}, {"original_string": "private static final int TEST_CINEMA_ID = 987;", "modifier": "private static final", "type": "int", "declarator": "TEST_CINEMA_ID = 987", "var_name": "TEST_CINEMA_ID"}, {"original_string": "private SmallCinemasPresenter presenter;", "modifier": "private", "type": "SmallCinemasPresenter", "declarator": "presenter", "var_name": "presenter"}], "file": "app/src/test/java/com/ru/devit/mediateka/presentation/smallcinemalist/SmallCinemasPresenterTest.java"}, "test_case": {"identifier": "shouldShowLoadingWhenInitialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldShowLoadingWhenInitialize(){\n        presenter.setView(view);\n        presenter.initialize();\n\n        verify(view , times(1)).showLoading();\n        verify(view , times(1)).hideLoading();\n    }", "signature": "void shouldShowLoadingWhenInitialize()", "full_signature": "@Test public void shouldShowLoadingWhenInitialize()", "class_method_signature": "SmallCinemasPresenterTest.shouldShowLoadingWhenInitialize()", "testcase": true, "constructor": false, "invocations": ["setView", "initialize", "showLoading", "verify", "times", "hideLoading", "verify", "times"]}, "focal_class": {"identifier": "SmallCinemasPresenter", "superclass": "extends BasePresenter<SmallCinemasPresenter.View>", "interfaces": "", "fields": [{"original_string": "private List<Cinema> cinemas;", "modifier": "private", "type": "List<Cinema>", "declarator": "cinemas", "var_name": "cinemas"}, {"original_string": "private final GetCinemaByQuery useCaseGetCinemaByQuery;", "modifier": "private final", "type": "GetCinemaByQuery", "declarator": "useCaseGetCinemaByQuery", "var_name": "useCaseGetCinemaByQuery"}, {"original_string": "private final SmallCinemaSubscriber smallCinemaSubscriber;", "modifier": "private final", "type": "SmallCinemaSubscriber", "declarator": "smallCinemaSubscriber", "var_name": "smallCinemaSubscriber"}], "methods": [{"identifier": "SmallCinemasPresenter", "parameters": "(GetCinemaByQuery useCaseGetCinemaByQuery)", "modifiers": "public", "return": "", "signature": " SmallCinemasPresenter(GetCinemaByQuery useCaseGetCinemaByQuery)", "full_signature": "public  SmallCinemasPresenter(GetCinemaByQuery useCaseGetCinemaByQuery)", "class_method_signature": "SmallCinemasPresenter.SmallCinemasPresenter(GetCinemaByQuery useCaseGetCinemaByQuery)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "SmallCinemasPresenter.initialize()", "testcase": false, "constructor": false}, {"identifier": "onDestroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onDestroy()", "full_signature": "@Override public void onDestroy()", "class_method_signature": "SmallCinemasPresenter.onDestroy()", "testcase": false, "constructor": false}, {"identifier": "onGetTextFromSearchField", "parameters": "(String query)", "modifiers": "", "return": "void", "signature": "void onGetTextFromSearchField(String query)", "full_signature": " void onGetTextFromSearchField(String query)", "class_method_signature": "SmallCinemasPresenter.onGetTextFromSearchField(String query)", "testcase": false, "constructor": false}, {"identifier": "setCinemas", "parameters": "(List<Cinema> cinemaList)", "modifiers": "public", "return": "void", "signature": "void setCinemas(List<Cinema> cinemaList)", "full_signature": "public void setCinemas(List<Cinema> cinemaList)", "class_method_signature": "SmallCinemasPresenter.setCinemas(List<Cinema> cinemaList)", "testcase": false, "constructor": false}, {"identifier": "onCinemaClicked", "parameters": "(int cinemaId , int viewHolderPosition)", "modifiers": "public", "return": "void", "signature": "void onCinemaClicked(int cinemaId , int viewHolderPosition)", "full_signature": "public void onCinemaClicked(int cinemaId , int viewHolderPosition)", "class_method_signature": "SmallCinemasPresenter.onCinemaClicked(int cinemaId , int viewHolderPosition)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/ru/devit/mediateka/presentation/smallcinemalist/SmallCinemasPresenter.java"}, "focal_method": {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void initialize() {\n        getView().showLoading();\n        useCaseGetCinemaByQuery.subscribe(smallCinemaSubscriber);\n        useCaseGetCinemaByQuery.setActions(new Actions(\n                () -> getView().showLoading() ,\n                () -> getView().hideLoading() ,\n                () -> getView().clearAdapter()\n        ));\n        getView().hideLoading();\n    }", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "SmallCinemasPresenter.initialize()", "testcase": false, "constructor": false, "invocations": ["showLoading", "getView", "subscribe", "setActions", "showLoading", "getView", "hideLoading", "getView", "clearAdapter", "getView", "hideLoading", "getView"]}, "repository": {"repo_id": 132759831, "url": "https://github.com/Devit951/Mediateka", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 33, "size": 679, "license": "licensed"}}