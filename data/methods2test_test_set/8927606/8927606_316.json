{"test_class": {"identifier": "IfMultipartTest", "superclass": "extends PipeTestBase<IfMultipart>", "interfaces": "", "fields": [{"original_string": "private MockHttpServletRequest request;", "modifier": "private", "type": "MockHttpServletRequest", "declarator": "request", "var_name": "request"}], "file": "core/src/test/java/nl/nn/adapterframework/pipes/IfMultipartTest.java"}, "test_case": {"identifier": "testInputNotHTTPRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInputNotHTTPRequest() throws Exception {\n        exception.expect(PipeRunException.class);\n        exception.expectMessage(\"Pipe [IfMultipart under test] expected HttpServletRequest as input, got [Message]\");\n        doPipe(pipe, \"i am a string not a http req\", session);\n        fail(\"this is expected to fail\");\n    }", "signature": "void testInputNotHTTPRequest()", "full_signature": "@Test public void testInputNotHTTPRequest()", "class_method_signature": "IfMultipartTest.testInputNotHTTPRequest()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "doPipe", "fail"]}, "focal_class": {"identifier": "IfMultipart", "superclass": "extends AbstractPipe", "interfaces": "", "fields": [{"original_string": "private String thenForwardName = \"then\";", "modifier": "private", "type": "String", "declarator": "thenForwardName = \"then\"", "var_name": "thenForwardName"}, {"original_string": "private String elseForwardName = \"else\";", "modifier": "private", "type": "String", "declarator": "elseForwardName = \"else\"", "var_name": "elseForwardName"}], "methods": [{"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "IfMultipart.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "setThenForwardName", "parameters": "(String thenForwardName)", "modifiers": "public", "return": "void", "signature": "void setThenForwardName(String thenForwardName)", "full_signature": "public void setThenForwardName(String thenForwardName)", "class_method_signature": "IfMultipart.setThenForwardName(String thenForwardName)", "testcase": false, "constructor": false}, {"identifier": "getThenForwardName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getThenForwardName()", "full_signature": "public String getThenForwardName()", "class_method_signature": "IfMultipart.getThenForwardName()", "testcase": false, "constructor": false}, {"identifier": "setElseForwardName", "parameters": "(String elseForwardName)", "modifiers": "public", "return": "void", "signature": "void setElseForwardName(String elseForwardName)", "full_signature": "public void setElseForwardName(String elseForwardName)", "class_method_signature": "IfMultipart.setElseForwardName(String elseForwardName)", "testcase": false, "constructor": false}, {"identifier": "getElseForwardName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getElseForwardName()", "full_signature": "public String getElseForwardName()", "class_method_signature": "IfMultipart.getElseForwardName()", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/pipes/IfMultipart.java"}, "focal_method": {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "body": "@Override\n\tpublic PipeRunResult doPipe(Message message, IPipeLineSession session) throws PipeRunException {\n\t\tString forward;\n\t\tPipeForward pipeForward = null;\n\n\t\tif (message == null || message.asObject() == null) {\n\t\t\tforward = elseForwardName;\n\t\t} else {\n\t\t\tif (!(message.asObject() instanceof HttpServletRequest)) {\n\t\t\t\tthrow new PipeRunException(this, getLogPrefix(null) + \"expected HttpServletRequest as input, got [\" + ClassUtils.nameOf(message) + \"]\");\n\t\t\t}\n\n\t\t\tHttpServletRequest request = (HttpServletRequest) message.asObject();\n\t\t\tString contentType = request.getContentType();\n\t\t\tif (StringUtils.isNotEmpty(contentType) && contentType.startsWith(\"multipart\")) {\n\t\t\t\tforward = thenForwardName;\n\t\t\t} else {\n\t\t\t\tforward = elseForwardName;\n\t\t\t}\n\t\t}\n\n\t\tlog.debug(getLogPrefix(session) + \"determined forward [\" + forward + \"]\");\n\n\t\tpipeForward = findForward(forward);\n\n\t\tif (pipeForward == null) {\n\t\t\tthrow new PipeRunException(this, getLogPrefix(null) + \"cannot find forward or pipe named [\" + forward + \"]\");\n\t\t}\n\t\tlog.debug(getLogPrefix(session) + \"resolved forward [\" + forward + \"] to path [\" + pipeForward.getPath() + \"]\");\n\t\treturn new PipeRunResult(pipeForward, message);\n\t}", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "IfMultipart.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false, "invocations": ["asObject", "asObject", "getLogPrefix", "nameOf", "asObject", "getContentType", "isNotEmpty", "startsWith", "debug", "getLogPrefix", "findForward", "getLogPrefix", "debug", "getLogPrefix", "getPath"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}