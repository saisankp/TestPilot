{"test_class": {"identifier": "ConvertUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/com/platypii/baseline/util/ConvertUtilTest.java"}, "test_case": {"identifier": "convertFormatInt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertFormatInt() {\n        assertEquals( \"9\", ConvertUtil.formatInt(9.8, 0));\n        assertEquals( \"9\", ConvertUtil.formatInt(9.8, 1));\n        assertEquals( \"9\", ConvertUtil.formatInt(9.8, 2));\n        assertEquals( \"9\", ConvertUtil.formatInt(9.8, 3));\n\n        assertEquals( \"90\", ConvertUtil.formatInt(98.6, 1));\n        assertEquals( \"98\", ConvertUtil.formatInt(98.6, 2));\n        assertEquals( \"98\", ConvertUtil.formatInt(98.6, 3));\n\n        assertEquals( \"-9\", ConvertUtil.formatInt(-9.8, 1));\n        assertEquals( \"-9\", ConvertUtil.formatInt(-9.8, 2));\n        assertEquals( \"-9\", ConvertUtil.formatInt(-9.8, 3));\n    }", "signature": "void convertFormatInt()", "full_signature": "@Test public void convertFormatInt()", "class_method_signature": "ConvertUtilTest.convertFormatInt()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "formatInt", "assertEquals", "formatInt", "assertEquals", "formatInt", "assertEquals", "formatInt", "assertEquals", "formatInt", "assertEquals", "formatInt", "assertEquals", "formatInt", "assertEquals", "formatInt", "assertEquals", "formatInt", "assertEquals", "formatInt"]}, "focal_class": {"identifier": "ConvertUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "formatDouble", "parameters": "(double value, int precision)", "modifiers": "@NonNull static", "return": "String", "signature": "String formatDouble(double value, int precision)", "full_signature": "@NonNull static String formatDouble(double value, int precision)", "class_method_signature": "ConvertUtil.formatDouble(double value, int precision)", "testcase": false, "constructor": false}, {"identifier": "formatInt", "parameters": "(double value, int precision)", "modifiers": "@NonNull static", "return": "String", "signature": "String formatInt(double value, int precision)", "full_signature": "@NonNull static String formatInt(double value, int precision)", "class_method_signature": "ConvertUtil.formatInt(double value, int precision)", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/platypii/baseline/util/ConvertUtil.java"}, "focal_method": {"identifier": "formatInt", "parameters": "(double value, int precision)", "modifiers": "@NonNull static", "return": "String", "body": "@NonNull\n    static String formatInt(double value, int precision) {\n        // Switch negative, so that we floor toward zero\n        if (value < 0) return \"-\" + formatInt(-value, precision);\n        // Precision must be at least 1\n        if (precision <= 0) precision = 1;\n        // Convert to int\n        final int valueInt = (int) Math.floor(value);\n        final int mag = (int) Math.floor(Math.log10(value));\n        if (mag < precision) {\n            // No need to truncate\n            return Integer.toString(valueInt);\n        } else {\n            final int mask = (int) Math.pow(10, mag - precision + 1);\n            final int truncated = valueInt - (valueInt % mask);\n            return Integer.toString(truncated);\n        }\n    }", "signature": "String formatInt(double value, int precision)", "full_signature": "@NonNull static String formatInt(double value, int precision)", "class_method_signature": "ConvertUtil.formatInt(double value, int precision)", "testcase": false, "constructor": false, "invocations": ["formatInt", "floor", "floor", "log10", "toString", "pow", "toString"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}