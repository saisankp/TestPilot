{"test_class": {"identifier": "SlidingTimeWindowMovingAveragesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ManualClock clock;", "modifier": "private", "type": "ManualClock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private SlidingTimeWindowMovingAverages movingAverages;", "modifier": "private", "type": "SlidingTimeWindowMovingAverages", "declarator": "movingAverages", "var_name": "movingAverages"}, {"original_string": "private Meter meter;", "modifier": "private", "type": "Meter", "declarator": "meter", "var_name": "meter"}], "file": "metrics-core/src/test/java/com/codahale/metrics/SlidingTimeWindowMovingAveragesTest.java"}, "test_case": {"identifier": "normalizeIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void normalizeIndex() {\n\n        SlidingTimeWindowMovingAverages stwm = new SlidingTimeWindowMovingAverages();\n\n        assertThat(stwm.normalizeIndex(0), is(0));\n        assertThat(stwm.normalizeIndex(900), is(0));\n        assertThat(stwm.normalizeIndex(9000), is(0));\n        assertThat(stwm.normalizeIndex(-900), is(0));\n\n        assertThat(stwm.normalizeIndex(1), is(1));\n\n        assertThat(stwm.normalizeIndex(899), is(899));\n        assertThat(stwm.normalizeIndex(-1), is(899));\n        assertThat(stwm.normalizeIndex(-901), is(899));\n    }", "signature": "void normalizeIndex()", "full_signature": "@Test public void normalizeIndex()", "class_method_signature": "SlidingTimeWindowMovingAveragesTest.normalizeIndex()", "testcase": true, "constructor": false, "invocations": ["assertThat", "normalizeIndex", "is", "assertThat", "normalizeIndex", "is", "assertThat", "normalizeIndex", "is", "assertThat", "normalizeIndex", "is", "assertThat", "normalizeIndex", "is", "assertThat", "normalizeIndex", "is", "assertThat", "normalizeIndex", "is", "assertThat", "normalizeIndex", "is"]}, "focal_class": {"identifier": "SlidingTimeWindowMovingAverages", "superclass": "", "interfaces": "implements MovingAverages", "fields": [{"original_string": "private static final long TIME_WINDOW_DURATION_MINUTES = 15;", "modifier": "private static final", "type": "long", "declarator": "TIME_WINDOW_DURATION_MINUTES = 15", "var_name": "TIME_WINDOW_DURATION_MINUTES"}, {"original_string": "private static final long TICK_INTERVAL = TimeUnit.SECONDS.toNanos(1);", "modifier": "private static final", "type": "long", "declarator": "TICK_INTERVAL = TimeUnit.SECONDS.toNanos(1)", "var_name": "TICK_INTERVAL"}, {"original_string": "private static final Duration TIME_WINDOW_DURATION = Duration.ofMinutes(TIME_WINDOW_DURATION_MINUTES);", "modifier": "private static final", "type": "Duration", "declarator": "TIME_WINDOW_DURATION = Duration.ofMinutes(TIME_WINDOW_DURATION_MINUTES)", "var_name": "TIME_WINDOW_DURATION"}, {"original_string": "static final int NUMBER_OF_BUCKETS = (int) (TIME_WINDOW_DURATION.toNanos() / TICK_INTERVAL);", "modifier": "static final", "type": "int", "declarator": "NUMBER_OF_BUCKETS = (int) (TIME_WINDOW_DURATION.toNanos() / TICK_INTERVAL)", "var_name": "NUMBER_OF_BUCKETS"}, {"original_string": "private final AtomicLong lastTick;", "modifier": "private final", "type": "AtomicLong", "declarator": "lastTick", "var_name": "lastTick"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private ArrayList<LongAdder> buckets;", "modifier": "private", "type": "ArrayList<LongAdder>", "declarator": "buckets", "var_name": "buckets"}, {"original_string": "private int oldestBucketIndex;", "modifier": "private", "type": "int", "declarator": "oldestBucketIndex", "var_name": "oldestBucketIndex"}, {"original_string": "private int currentBucketIndex;", "modifier": "private", "type": "int", "declarator": "currentBucketIndex", "var_name": "currentBucketIndex"}, {"original_string": "private final Instant bucketBaseTime;", "modifier": "private final", "type": "Instant", "declarator": "bucketBaseTime", "var_name": "bucketBaseTime"}, {"original_string": "Instant oldestBucketTime;", "modifier": "", "type": "Instant", "declarator": "oldestBucketTime", "var_name": "oldestBucketTime"}], "methods": [{"identifier": "SlidingTimeWindowMovingAverages", "parameters": "()", "modifiers": "public", "return": "", "signature": " SlidingTimeWindowMovingAverages()", "full_signature": "public  SlidingTimeWindowMovingAverages()", "class_method_signature": "SlidingTimeWindowMovingAverages.SlidingTimeWindowMovingAverages()", "testcase": false, "constructor": true}, {"identifier": "SlidingTimeWindowMovingAverages", "parameters": "(Clock clock)", "modifiers": "public", "return": "", "signature": " SlidingTimeWindowMovingAverages(Clock clock)", "full_signature": "public  SlidingTimeWindowMovingAverages(Clock clock)", "class_method_signature": "SlidingTimeWindowMovingAverages.SlidingTimeWindowMovingAverages(Clock clock)", "testcase": false, "constructor": true}, {"identifier": "update", "parameters": "(long n)", "modifiers": "@Override public", "return": "void", "signature": "void update(long n)", "full_signature": "@Override public void update(long n)", "class_method_signature": "SlidingTimeWindowMovingAverages.update(long n)", "testcase": false, "constructor": false}, {"identifier": "tickIfNecessary", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void tickIfNecessary()", "full_signature": "@Override public void tickIfNecessary()", "class_method_signature": "SlidingTimeWindowMovingAverages.tickIfNecessary()", "testcase": false, "constructor": false}, {"identifier": "getM15Rate", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getM15Rate()", "full_signature": "@Override public double getM15Rate()", "class_method_signature": "SlidingTimeWindowMovingAverages.getM15Rate()", "testcase": false, "constructor": false}, {"identifier": "getM5Rate", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getM5Rate()", "full_signature": "@Override public double getM5Rate()", "class_method_signature": "SlidingTimeWindowMovingAverages.getM5Rate()", "testcase": false, "constructor": false}, {"identifier": "getM1Rate", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getM1Rate()", "full_signature": "@Override public double getM1Rate()", "class_method_signature": "SlidingTimeWindowMovingAverages.getM1Rate()", "testcase": false, "constructor": false}, {"identifier": "getMinuteRate", "parameters": "(int minutes)", "modifiers": "private", "return": "double", "signature": "double getMinuteRate(int minutes)", "full_signature": "private double getMinuteRate(int minutes)", "class_method_signature": "SlidingTimeWindowMovingAverages.getMinuteRate(int minutes)", "testcase": false, "constructor": false}, {"identifier": "calculateIndexOfTick", "parameters": "(Instant tickTime)", "modifiers": "", "return": "int", "signature": "int calculateIndexOfTick(Instant tickTime)", "full_signature": " int calculateIndexOfTick(Instant tickTime)", "class_method_signature": "SlidingTimeWindowMovingAverages.calculateIndexOfTick(Instant tickTime)", "testcase": false, "constructor": false}, {"identifier": "normalizeIndex", "parameters": "(int index)", "modifiers": "", "return": "int", "signature": "int normalizeIndex(int index)", "full_signature": " int normalizeIndex(int index)", "class_method_signature": "SlidingTimeWindowMovingAverages.normalizeIndex(int index)", "testcase": false, "constructor": false}, {"identifier": "cleanOldBuckets", "parameters": "(Instant currentTick)", "modifiers": "private", "return": "void", "signature": "void cleanOldBuckets(Instant currentTick)", "full_signature": "private void cleanOldBuckets(Instant currentTick)", "class_method_signature": "SlidingTimeWindowMovingAverages.cleanOldBuckets(Instant currentTick)", "testcase": false, "constructor": false}, {"identifier": "cleanBucketRange", "parameters": "(int fromIndex, int toIndex)", "modifiers": "private", "return": "void", "signature": "void cleanBucketRange(int fromIndex, int toIndex)", "full_signature": "private void cleanBucketRange(int fromIndex, int toIndex)", "class_method_signature": "SlidingTimeWindowMovingAverages.cleanBucketRange(int fromIndex, int toIndex)", "testcase": false, "constructor": false}, {"identifier": "sumBuckets", "parameters": "(Instant toTime, int numberOfBuckets)", "modifiers": "private", "return": "long", "signature": "long sumBuckets(Instant toTime, int numberOfBuckets)", "full_signature": "private long sumBuckets(Instant toTime, int numberOfBuckets)", "class_method_signature": "SlidingTimeWindowMovingAverages.sumBuckets(Instant toTime, int numberOfBuckets)", "testcase": false, "constructor": false}], "file": "metrics-core/src/main/java/com/codahale/metrics/SlidingTimeWindowMovingAverages.java"}, "focal_method": {"identifier": "normalizeIndex", "parameters": "(int index)", "modifiers": "", "return": "int", "body": "int normalizeIndex(int index) {\n        int mod = index % NUMBER_OF_BUCKETS;\n        return mod >= 0 ? mod : mod + NUMBER_OF_BUCKETS;\n    }", "signature": "int normalizeIndex(int index)", "full_signature": " int normalizeIndex(int index)", "class_method_signature": "SlidingTimeWindowMovingAverages.normalizeIndex(int index)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}