{"test_class": {"identifier": "DefaultGroovyScriptServiceTest", "superclass": "extends AbstractVerifiableUnitTest", "interfaces": "", "fields": [{"original_string": "private static final String TEST_ONE = \"testOne\";", "modifier": "private static final", "type": "String", "declarator": "TEST_ONE = \"testOne\"", "var_name": "TEST_ONE"}, {"original_string": "@Mock\n\tIdmCacheManager cacheManager;", "modifier": "@Mock", "type": "IdmCacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "@InjectMocks\n\tprivate DefaultGroovyScriptService groovyScriptService;", "modifier": "@InjectMocks\n\tprivate", "type": "DefaultGroovyScriptService", "declarator": "groovyScriptService", "var_name": "groovyScriptService"}], "file": "Realization/backend/core/core-impl/src/test/java/eu/bcvsolutions/idm/core/model/service/impl/DefaultGroovyScriptServiceTest.java"}, "test_case": {"identifier": "testScriptOne", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testScriptOne() {\n\t\tString result = (String) groovyScriptService.evaluate(\"return \\\"testOne\\\";\", null);\n\t\tassertEquals(TEST_ONE, result);\n\t}", "signature": "void testScriptOne()", "full_signature": "@Test public void testScriptOne()", "class_method_signature": "DefaultGroovyScriptServiceTest.testScriptOne()", "testcase": true, "constructor": false, "invocations": ["evaluate", "assertEquals"]}, "focal_class": {"identifier": "DefaultGroovyScriptService", "superclass": "", "interfaces": "implements GroovyScriptService", "fields": [{"original_string": "public static final String CACHE_NAME = CoreModuleDescriptor.MODULE_ID + \":default-groovy-script-service-script-cache\";", "modifier": "public static final", "type": "String", "declarator": "CACHE_NAME = CoreModuleDescriptor.MODULE_ID + \":default-groovy-script-service-script-cache\"", "var_name": "CACHE_NAME"}, {"original_string": "@Autowired\n\tIdmCacheManager cacheManager;", "modifier": "@Autowired", "type": "IdmCacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory\n\t\t\t.getLogger(DefaultGroovyScriptService.class);", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "LOG = org.slf4j.LoggerFactory\n\t\t\t.getLogger(DefaultGroovyScriptService.class)", "var_name": "LOG"}], "methods": [{"identifier": "evaluate", "parameters": "(String script, Map<String, Object> variables)", "modifiers": "@Override public", "return": "Object", "signature": "Object evaluate(String script, Map<String, Object> variables)", "full_signature": "@Override public Object evaluate(String script, Map<String, Object> variables)", "class_method_signature": "DefaultGroovyScriptService.evaluate(String script, Map<String, Object> variables)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(String script, Map<String, Object> variables, List<Class<?>> extraAllowedClasses)", "modifiers": "@Override public", "return": "Object", "signature": "Object evaluate(String script, Map<String, Object> variables, List<Class<?>> extraAllowedClasses)", "full_signature": "@Override public Object evaluate(String script, Map<String, Object> variables, List<Class<?>> extraAllowedClasses)", "class_method_signature": "DefaultGroovyScriptService.evaluate(String script, Map<String, Object> variables, List<Class<?>> extraAllowedClasses)", "testcase": false, "constructor": false}, {"identifier": "resolveCustomAllowTypes", "parameters": "(Map<String, Object> variables)", "modifiers": "private", "return": "Set<Class<?>>", "signature": "Set<Class<?>> resolveCustomAllowTypes(Map<String, Object> variables)", "full_signature": "private Set<Class<?>> resolveCustomAllowTypes(Map<String, Object> variables)", "class_method_signature": "DefaultGroovyScriptService.resolveCustomAllowTypes(Map<String, Object> variables)", "testcase": false, "constructor": false}, {"identifier": "validateScript", "parameters": "(String script)", "modifiers": "@Override public", "return": "Object", "signature": "Object validateScript(String script)", "full_signature": "@Override public Object validateScript(String script)", "class_method_signature": "DefaultGroovyScriptService.validateScript(String script)", "testcase": false, "constructor": false}, {"identifier": "getScript", "parameters": "(String source)", "modifiers": "private", "return": "Script", "signature": "Script getScript(String source)", "full_signature": "private Script getScript(String source)", "class_method_signature": "DefaultGroovyScriptService.getScript(String source)", "testcase": false, "constructor": false}, {"identifier": "buildScript", "parameters": "(String source)", "modifiers": "private", "return": "Script", "signature": "Script buildScript(String source)", "full_signature": "private Script buildScript(String source)", "class_method_signature": "DefaultGroovyScriptService.buildScript(String source)", "testcase": false, "constructor": false}], "file": "Realization/backend/core/core-impl/src/main/java/eu/bcvsolutions/idm/core/model/service/impl/DefaultGroovyScriptService.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(String script, Map<String, Object> variables)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n\tpublic Object evaluate(String script, Map<String, Object> variables) {\n\t\treturn evaluate(script, variables, null);\n\t}", "signature": "Object evaluate(String script, Map<String, Object> variables)", "full_signature": "@Override public Object evaluate(String script, Map<String, Object> variables)", "class_method_signature": "DefaultGroovyScriptService.evaluate(String script, Map<String, Object> variables)", "testcase": false, "constructor": false, "invocations": ["evaluate"]}, "repository": {"repo_id": 61879415, "url": "https://github.com/bcvsolutions/CzechIdMng", "stars": 25, "created": "6/24/2016 11:18:23 AM +00:00", "updates": "2020-01-27T15:14:40+00:00", "fork": "False", "license": "licensed"}}