{"test_class": {"identifier": "HpoAnnotationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"unused\")\n  private static final HpoFrequency defaultFrequency = HpoFrequency.fromTermId(TermId.of(\"HP:0040280\"));", "modifier": "@SuppressWarnings(\"unused\")\n  private static final", "type": "HpoFrequency", "declarator": "defaultFrequency = HpoFrequency.fromTermId(TermId.of(\"HP:0040280\"))", "var_name": "defaultFrequency"}], "file": "phenol-annotations/src/test/java/org/monarchinitiative/phenol/annotations/formats/hpo/HpoAnnotationTest.java"}, "test_case": {"identifier": "testEqualityOfTerms4", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEqualityOfTerms4() {\n    TermId oxycephalyId = TermId.of(\"HP:0000263\");\n    HpoAnnotation oxycephaly1 =\n        new HpoAnnotation.Builder(oxycephalyId)\n            .onset(HpoOnset.ADULT_ONSET)\n            .frequency(HpoFrequency.ALWAYS_PRESENT.mean(),HpoFrequency.ALWAYS_PRESENT.toString())\n            .build();\n\n    HpoAnnotation oxycephaly2 =\n        new HpoAnnotation.Builder(oxycephalyId)\n            .onset(HpoOnset.ADULT_ONSET)\n            .frequency(HpoFrequency.OCCASIONAL.mean(),HpoFrequency.OCCASIONAL.toString())\n            .build();\n    assertNotEquals(oxycephaly1, oxycephaly2);\n  }", "signature": "void testEqualityOfTerms4()", "full_signature": "@Test public void testEqualityOfTerms4()", "class_method_signature": "HpoAnnotationTest.testEqualityOfTerms4()", "testcase": true, "constructor": false, "invocations": ["of", "build", "frequency", "onset", "mean", "toString", "build", "frequency", "onset", "mean", "toString", "assertNotEquals"]}, "focal_class": {"identifier": "HpoAnnotation", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_FREQUENCY_STRING = \"n/a\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_FREQUENCY_STRING = \"n/a\"", "var_name": "DEFAULT_FREQUENCY_STRING"}, {"original_string": "private final TermId termId;", "modifier": "private final", "type": "TermId", "declarator": "termId", "var_name": "termId"}, {"original_string": "private final double frequency;", "modifier": "private final", "type": "double", "declarator": "frequency", "var_name": "frequency"}, {"original_string": "private final String frequencyString;", "modifier": "private final", "type": "String", "declarator": "frequencyString", "var_name": "frequencyString"}, {"original_string": "private final HpoOnset onset;", "modifier": "private final", "type": "HpoOnset", "declarator": "onset", "var_name": "onset"}, {"original_string": "private final List<TermId> modifiers;", "modifier": "private final", "type": "List<TermId>", "declarator": "modifiers", "var_name": "modifiers"}, {"original_string": "private final List<String> citations;", "modifier": "private final", "type": "List<String>", "declarator": "citations", "var_name": "citations"}], "methods": [{"identifier": "HpoAnnotation", "parameters": "(TermId termId, double f, String freqString,HpoOnset onset, List<TermId> modifiers, List<String> cites)", "modifiers": "public", "return": "", "signature": " HpoAnnotation(TermId termId, double f, String freqString,HpoOnset onset, List<TermId> modifiers, List<String> cites)", "full_signature": "public  HpoAnnotation(TermId termId, double f, String freqString,HpoOnset onset, List<TermId> modifiers, List<String> cites)", "class_method_signature": "HpoAnnotation.HpoAnnotation(TermId termId, double f, String freqString,HpoOnset onset, List<TermId> modifiers, List<String> cites)", "testcase": false, "constructor": true}, {"identifier": "forTerm", "parameters": "(TermId t)", "modifiers": "public static", "return": "HpoAnnotation", "signature": "HpoAnnotation forTerm(TermId t)", "full_signature": "public static HpoAnnotation forTerm(TermId t)", "class_method_signature": "HpoAnnotation.forTerm(TermId t)", "testcase": false, "constructor": false}, {"identifier": "parseTerm", "parameters": "(String id)", "modifiers": "public static", "return": "HpoAnnotation", "signature": "HpoAnnotation parseTerm(String id)", "full_signature": "public static HpoAnnotation parseTerm(String id)", "class_method_signature": "HpoAnnotation.parseTerm(String id)", "testcase": false, "constructor": false}, {"identifier": "getFrequencyString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFrequencyString()", "full_signature": "public String getFrequencyString()", "class_method_signature": "HpoAnnotation.getFrequencyString()", "testcase": false, "constructor": false}, {"identifier": "getCitations", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getCitations()", "full_signature": "public List<String> getCitations()", "class_method_signature": "HpoAnnotation.getCitations()", "testcase": false, "constructor": false}, {"identifier": "getTermId", "parameters": "()", "modifiers": "public", "return": "TermId", "signature": "TermId getTermId()", "full_signature": "public TermId getTermId()", "class_method_signature": "HpoAnnotation.getTermId()", "testcase": false, "constructor": false}, {"identifier": "getFrequency", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getFrequency()", "full_signature": "public double getFrequency()", "class_method_signature": "HpoAnnotation.getFrequency()", "testcase": false, "constructor": false}, {"identifier": "getOnset", "parameters": "()", "modifiers": "public", "return": "HpoOnset", "signature": "HpoOnset getOnset()", "full_signature": "public HpoOnset getOnset()", "class_method_signature": "HpoAnnotation.getOnset()", "testcase": false, "constructor": false}, {"identifier": "getModifiers", "parameters": "()", "modifiers": "public", "return": "List<TermId>", "signature": "List<TermId> getModifiers()", "full_signature": "public List<TermId> getModifiers()", "class_method_signature": "HpoAnnotation.getModifiers()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HpoAnnotation.toString()", "testcase": false, "constructor": false}, {"identifier": "getIdWithPrefix", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getIdWithPrefix()", "full_signature": "public String getIdWithPrefix()", "class_method_signature": "HpoAnnotation.getIdWithPrefix()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object that)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object that)", "full_signature": "@Override public boolean equals(Object that)", "class_method_signature": "HpoAnnotation.equals(Object that)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "HpoAnnotation.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(HpoAnnotation that)", "modifiers": "public", "return": "int", "signature": "int compareTo(HpoAnnotation that)", "full_signature": "public int compareTo(HpoAnnotation that)", "class_method_signature": "HpoAnnotation.compareTo(HpoAnnotation that)", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "(TermId termId)", "modifiers": "public static", "return": "Builder", "signature": "Builder builder(TermId termId)", "full_signature": "public static Builder builder(TermId termId)", "class_method_signature": "HpoAnnotation.builder(TermId termId)", "testcase": false, "constructor": false}], "file": "phenol-annotations/src/main/java/org/monarchinitiative/phenol/annotations/formats/hpo/HpoAnnotation.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String toString() {\n    return \"HpoTermId [termId=\" + termId + \", frequency=\" + frequency + \", onset=\" + onset + \"]\";\n  }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HpoAnnotation.toString()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}