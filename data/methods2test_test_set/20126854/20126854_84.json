{"test_class": {"identifier": "BsDiffTest", "superclass": "", "interfaces": "", "fields": [], "file": "feya/libraries/archive_diff/diff.generator/src/test/java/com/google/archivepatcher/generator/bsdiff/BsDiffTest.java"}, "test_case": {"identifier": "lengthOfMatchTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void lengthOfMatchTest() throws IOException {\n    String s1 =\n        \"this is a string that starts the same and has some sameness in the middle, but \"\n            + \"ends differently\";\n    String s2 =\n        \"this is a string that starts the samish and has some sameness in the middle, but \"\n            + \"then ends didlyiefferently\";\n    byte[] s1b = s1.getBytes(Charset.forName(\"US-ASCII\"));\n    byte[] s2b = s2.getBytes(Charset.forName(\"US-ASCII\"));\n    RandomAccessObject s1ro = new RandomAccessObject.RandomAccessByteArrayObject(s1b);\n    RandomAccessObject s2ro = new RandomAccessObject.RandomAccessByteArrayObject(s2b);\n\n    Assert.assertEquals(36, BsDiff.lengthOfMatch(s1ro, 0, s2ro, 0));\n    Assert.assertEquals(0, BsDiff.lengthOfMatch(s1ro, 5, s2ro, 0));\n    Assert.assertEquals(31, BsDiff.lengthOfMatch(s1ro, 5, s2ro, 5));\n    Assert.assertEquals(42, BsDiff.lengthOfMatch(s1ro, 37, s2ro, 39));\n    Assert.assertEquals(0, BsDiff.lengthOfMatch(s1ro, 38, s2ro, 39));\n    Assert.assertEquals(32, BsDiff.lengthOfMatch(s1ro, 47, s2ro, 49));\n    Assert.assertEquals(2, BsDiff.lengthOfMatch(s1ro, 90, s2ro, 83));\n  }", "signature": "void lengthOfMatchTest()", "full_signature": "@Test public void lengthOfMatchTest()", "class_method_signature": "BsDiffTest.lengthOfMatchTest()", "testcase": true, "constructor": false, "invocations": ["getBytes", "forName", "getBytes", "forName", "assertEquals", "lengthOfMatch", "assertEquals", "lengthOfMatch", "assertEquals", "lengthOfMatch", "assertEquals", "lengthOfMatch", "assertEquals", "lengthOfMatch", "assertEquals", "lengthOfMatch", "assertEquals", "lengthOfMatch"]}, "focal_class": {"identifier": "BsDiff", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "lengthOfMatch", "parameters": "(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "modifiers": "static", "return": "int", "signature": "int lengthOfMatch(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "full_signature": "static int lengthOfMatch(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "class_method_signature": "BsDiff.lengthOfMatch(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "testcase": false, "constructor": false}, {"identifier": "searchForMatchBaseCase", "parameters": "(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "modifiers": "static", "return": "Match", "signature": "Match searchForMatchBaseCase(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "full_signature": "static Match searchForMatchBaseCase(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "class_method_signature": "BsDiff.searchForMatchBaseCase(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "testcase": false, "constructor": false}, {"identifier": "searchForMatch", "parameters": "(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "modifiers": "static", "return": "Match", "signature": "Match searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "full_signature": "static Match searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "class_method_signature": "BsDiff.searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.generator/src/main/java/com/google/archivepatcher/generator/bsdiff/BsDiff.java"}, "focal_method": {"identifier": "lengthOfMatch", "parameters": "(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "modifiers": "static", "return": "int", "body": "static int lengthOfMatch(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)\n      throws IOException {\n    final int max = Math.min((int) oldData.length() - oldStart, (int) newData.length() - newStart);\n    if (max > 0) {\n      // If max is 0, it's sometimes possible for this seek to seek to length + 1 and throw an\n      // exception unnecessarily.\n      oldData.seek(oldStart);\n      newData.seek(newStart);\n      for (int offset = 0; offset < max; offset++) {\n        if (oldData.readByte() != newData.readByte()) {\n          return offset;\n        }\n      }\n    }\n\n    return max;\n  }", "signature": "int lengthOfMatch(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "full_signature": "static int lengthOfMatch(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "class_method_signature": "BsDiff.lengthOfMatch(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "testcase": false, "constructor": false, "invocations": ["min", "length", "length", "seek", "seek", "readByte", "readByte"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}