{"test_class": {"identifier": "CollectionQueryEngineTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/engine/CollectionQueryEngineTest.java"}, "test_case": {"identifier": "testRemoveIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemoveIndex() {\n        CollectionQueryEngine<Car> queryEngine = new CollectionQueryEngine<Car>();\n        queryEngine.init(emptyObjectStore(), queryOptionsWithOnHeapPersistence());\n\n        HashIndex<String, Car> index1 = HashIndex.onAttribute(Car.MANUFACTURER);\n        queryEngine.addIndex(index1, noQueryOptions());\n\n        UniqueIndex<Integer, Car> index2 = UniqueIndex.onAttribute(Car.CAR_ID);\n        queryEngine.addIndex(index2, noQueryOptions());\n\n        StandingQueryIndex<Car> index3 = StandingQueryIndex.onQuery(equal(Car.MODEL, \"Focus\"));\n        queryEngine.addIndex(index3, noQueryOptions());\n\n        CompoundIndex<Car> index4 = CompoundIndex.onAttributes(Car.MANUFACTURER, Car.MODEL);\n        queryEngine.addIndex(index4, noQueryOptions());\n\n        HashIndex<Boolean, Car> index5 = HashIndex.onAttribute(forStandingQuery(equal(Car.MANUFACTURER, \"Ford\")));\n        queryEngine.addIndex(index5, noQueryOptions());\n\n        Assert.assertEquals(5, countElements(queryEngine.getIndexes()));\n\n        queryEngine.removeIndex(index1, noQueryOptions());\n        Assert.assertEquals(4, countElements(queryEngine.getIndexes()));\n\n        queryEngine.removeIndex(index2, noQueryOptions());\n        Assert.assertEquals(3, countElements(queryEngine.getIndexes()));\n\n        queryEngine.removeIndex(index3, noQueryOptions());\n        Assert.assertEquals(2, countElements(queryEngine.getIndexes()));\n\n        queryEngine.removeIndex(index4, noQueryOptions());\n        Assert.assertEquals(1, countElements(queryEngine.getIndexes()));\n\n        queryEngine.removeIndex(index5, noQueryOptions());\n        Assert.assertEquals(0, countElements(queryEngine.getIndexes()));\n    }", "signature": "void testRemoveIndex()", "full_signature": "@Test public void testRemoveIndex()", "class_method_signature": "CollectionQueryEngineTest.testRemoveIndex()", "testcase": true, "constructor": false, "invocations": ["init", "emptyObjectStore", "queryOptionsWithOnHeapPersistence", "onAttribute", "addIndex", "noQueryOptions", "onAttribute", "addIndex", "noQueryOptions", "onQuery", "equal", "addIndex", "noQueryOptions", "onAttributes", "addIndex", "noQueryOptions", "onAttribute", "forStandingQuery", "equal", "addIndex", "noQueryOptions", "assertEquals", "countElements", "getIndexes", "removeIndex", "noQueryOptions", "assertEquals", "countElements", "getIndexes", "removeIndex", "noQueryOptions", "assertEquals", "countElements", "getIndexes", "removeIndex", "noQueryOptions", "assertEquals", "countElements", "getIndexes", "removeIndex", "noQueryOptions", "assertEquals", "countElements", "getIndexes", "removeIndex", "noQueryOptions", "assertEquals", "countElements", "getIndexes"]}, "focal_class": {"identifier": "CollectionQueryEngine", "superclass": "", "interfaces": "implements QueryEngineInternal<O>", "fields": [{"original_string": "public static final String ROOT_QUERY = \"ROOT_QUERY\";", "modifier": "public static final", "type": "String", "declarator": "ROOT_QUERY = \"ROOT_QUERY\"", "var_name": "ROOT_QUERY"}, {"original_string": "private volatile Persistence<O, ? extends Comparable> persistence;", "modifier": "private volatile", "type": "Persistence<O, ? extends Comparable>", "declarator": "persistence", "var_name": "persistence"}, {"original_string": "private volatile ObjectStore<O> objectStore;", "modifier": "private volatile", "type": "ObjectStore<O>", "declarator": "objectStore", "var_name": "objectStore"}, {"original_string": "private final ConcurrentMap<Attribute<O, ?>, Set<Index<O>>> attributeIndexes = new ConcurrentHashMap<Attribute<O, ?>, Set<Index<O>>>();", "modifier": "private final", "type": "ConcurrentMap<Attribute<O, ?>, Set<Index<O>>>", "declarator": "attributeIndexes = new ConcurrentHashMap<Attribute<O, ?>, Set<Index<O>>>()", "var_name": "attributeIndexes"}, {"original_string": "private final ConcurrentMap<Attribute<O, ?>, Index<O>> uniqueIndexes = new ConcurrentHashMap<Attribute<O, ?>, Index<O>>();", "modifier": "private final", "type": "ConcurrentMap<Attribute<O, ?>, Index<O>>", "declarator": "uniqueIndexes = new ConcurrentHashMap<Attribute<O, ?>, Index<O>>()", "var_name": "uniqueIndexes"}, {"original_string": "private final ConcurrentMap<CompoundAttribute<O>, CompoundIndex<O>> compoundIndexes = new ConcurrentHashMap<CompoundAttribute<O>, CompoundIndex<O>>();", "modifier": "private final", "type": "ConcurrentMap<CompoundAttribute<O>, CompoundIndex<O>>", "declarator": "compoundIndexes = new ConcurrentHashMap<CompoundAttribute<O>, CompoundIndex<O>>()", "var_name": "compoundIndexes"}, {"original_string": "private final ConcurrentMap<Query<O>, Index<O>> standingQueryIndexes = new ConcurrentHashMap<Query<O>, Index<O>>();", "modifier": "private final", "type": "ConcurrentMap<Query<O>, Index<O>>", "declarator": "standingQueryIndexes = new ConcurrentHashMap<Query<O>, Index<O>>()", "var_name": "standingQueryIndexes"}, {"original_string": "private final FallbackIndex<O> fallbackIndex = new FallbackIndex<O>();", "modifier": "private final", "type": "FallbackIndex<O>", "declarator": "fallbackIndex = new FallbackIndex<O>()", "var_name": "fallbackIndex"}, {"original_string": "private final Set<Index<O>> immutableIndexes = Collections.newSetFromMap(new ConcurrentHashMap<>());", "modifier": "private final", "type": "Set<Index<O>>", "declarator": "immutableIndexes = Collections.newSetFromMap(new ConcurrentHashMap<>())", "var_name": "immutableIndexes"}], "methods": [{"identifier": "CollectionQueryEngine", "parameters": "()", "modifiers": "public", "return": "", "signature": " CollectionQueryEngine()", "full_signature": "public  CollectionQueryEngine()", "class_method_signature": "CollectionQueryEngine.CollectionQueryEngine()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(final ObjectStore<O> objectStore, final QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void init(final ObjectStore<O> objectStore, final QueryOptions queryOptions)", "full_signature": "@Override public void init(final ObjectStore<O> objectStore, final QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.init(final ObjectStore<O> objectStore, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void destroy(QueryOptions queryOptions)", "full_signature": "@Override public void destroy(QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.destroy(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "addIndex", "parameters": "(Index<O> index, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void addIndex(Index<O> index, QueryOptions queryOptions)", "full_signature": "@Override public void addIndex(Index<O> index, QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.addIndex(Index<O> index, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "addAttributeIndex", "parameters": "(AttributeIndex<A, O> attributeIndex, QueryOptions queryOptions)", "modifiers": "", "return": "void", "signature": "void addAttributeIndex(AttributeIndex<A, O> attributeIndex, QueryOptions queryOptions)", "full_signature": " void addAttributeIndex(AttributeIndex<A, O> attributeIndex, QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.addAttributeIndex(AttributeIndex<A, O> attributeIndex, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "addStandingQueryIndex", "parameters": "(Index<O> standingQueryIndex, Query<O> standingQuery, QueryOptions queryOptions)", "modifiers": "", "return": "void", "signature": "void addStandingQueryIndex(Index<O> standingQueryIndex, Query<O> standingQuery, QueryOptions queryOptions)", "full_signature": " void addStandingQueryIndex(Index<O> standingQueryIndex, Query<O> standingQuery, QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.addStandingQueryIndex(Index<O> standingQueryIndex, Query<O> standingQuery, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "addCompoundIndex", "parameters": "(CompoundIndex<O> compoundIndex, CompoundAttribute<O> compoundAttribute, QueryOptions queryOptions)", "modifiers": "", "return": "void", "signature": "void addCompoundIndex(CompoundIndex<O> compoundIndex, CompoundAttribute<O> compoundAttribute, QueryOptions queryOptions)", "full_signature": " void addCompoundIndex(CompoundIndex<O> compoundIndex, CompoundAttribute<O> compoundAttribute, QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.addCompoundIndex(CompoundIndex<O> compoundIndex, CompoundAttribute<O> compoundAttribute, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "removeIndex", "parameters": "(Index<O> index, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void removeIndex(Index<O> index, QueryOptions queryOptions)", "full_signature": "@Override public void removeIndex(Index<O> index, QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.removeIndex(Index<O> index, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getIndexes", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<Index<O>>", "signature": "Iterable<Index<O>> getIndexes()", "full_signature": "@Override public Iterable<Index<O>> getIndexes()", "class_method_signature": "CollectionQueryEngine.getIndexes()", "testcase": false, "constructor": false}, {"identifier": "getIndexesOnAttribute", "parameters": "(Attribute<O, ?> attribute)", "modifiers": "", "return": "Iterable<Index<O>>", "signature": "Iterable<Index<O>> getIndexesOnAttribute(Attribute<O, ?> attribute)", "full_signature": " Iterable<Index<O>> getIndexesOnAttribute(Attribute<O, ?> attribute)", "class_method_signature": "CollectionQueryEngine.getIndexesOnAttribute(Attribute<O, ?> attribute)", "testcase": false, "constructor": false}, {"identifier": "getEntireCollectionAsResultSet", "parameters": "(final Query<O> query, final QueryOptions queryOptions)", "modifiers": "", "return": "ResultSet<O>", "signature": "ResultSet<O> getEntireCollectionAsResultSet(final Query<O> query, final QueryOptions queryOptions)", "full_signature": " ResultSet<O> getEntireCollectionAsResultSet(final Query<O> query, final QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.getEntireCollectionAsResultSet(final Query<O> query, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "retrieveSimpleQuery", "parameters": "(SimpleQuery<O, A> query, QueryOptions queryOptions)", "modifiers": "", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieveSimpleQuery(SimpleQuery<O, A> query, QueryOptions queryOptions)", "full_signature": " ResultSet<O> retrieveSimpleQuery(SimpleQuery<O, A> query, QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.retrieveSimpleQuery(SimpleQuery<O, A> query, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "retrieveComparativeQuery", "parameters": "(ComparativeQuery<O, A> query, QueryOptions queryOptions)", "modifiers": "", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieveComparativeQuery(ComparativeQuery<O, A> query, QueryOptions queryOptions)", "full_signature": " ResultSet<O> retrieveComparativeQuery(ComparativeQuery<O, A> query, QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.retrieveComparativeQuery(ComparativeQuery<O, A> query, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "retrieve", "parameters": "(final Query<O> query, final QueryOptions queryOptions)", "modifiers": "@Override public", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieve(final Query<O> query, final QueryOptions queryOptions)", "full_signature": "@Override public ResultSet<O> retrieve(final Query<O> query, final QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.retrieve(final Query<O> query, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "retrieveWithoutIndexOrdering", "parameters": "(Query<O> query, QueryOptions queryOptions, OrderByOption<O> orderByOption)", "modifiers": "", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieveWithoutIndexOrdering(Query<O> query, QueryOptions queryOptions, OrderByOption<O> orderByOption)", "full_signature": " ResultSet<O> retrieveWithoutIndexOrdering(Query<O> query, QueryOptions queryOptions, OrderByOption<O> orderByOption)", "class_method_signature": "CollectionQueryEngine.retrieveWithoutIndexOrdering(Query<O> query, QueryOptions queryOptions, OrderByOption<O> orderByOption)", "testcase": false, "constructor": false}, {"identifier": "retrieveWithIndexOrdering", "parameters": "(final Query<O> query, final QueryOptions queryOptions, final OrderByOption<O> orderByOption, final SortedKeyStatisticsIndex<?, O> indexForOrdering)", "modifiers": "", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieveWithIndexOrdering(final Query<O> query, final QueryOptions queryOptions, final OrderByOption<O> orderByOption, final SortedKeyStatisticsIndex<?, O> indexForOrdering)", "full_signature": " ResultSet<O> retrieveWithIndexOrdering(final Query<O> query, final QueryOptions queryOptions, final OrderByOption<O> orderByOption, final SortedKeyStatisticsIndex<?, O> indexForOrdering)", "class_method_signature": "CollectionQueryEngine.retrieveWithIndexOrdering(final Query<O> query, final QueryOptions queryOptions, final OrderByOption<O> orderByOption, final SortedKeyStatisticsIndex<?, O> indexForOrdering)", "testcase": false, "constructor": false}, {"identifier": "retrieveWithIndexOrderingMainResults", "parameters": "(final Query<O> query, QueryOptions queryOptions, SortedKeyStatisticsIndex<?, O> indexForOrdering, List<AttributeOrder<O>> allSortOrders, RangeBounds<?> rangeBoundsFromQuery, boolean attributeCanHaveMoreThanOneValue, boolean primarySortDescending)", "modifiers": "", "return": "Iterator<O>", "signature": "Iterator<O> retrieveWithIndexOrderingMainResults(final Query<O> query, QueryOptions queryOptions, SortedKeyStatisticsIndex<?, O> indexForOrdering, List<AttributeOrder<O>> allSortOrders, RangeBounds<?> rangeBoundsFromQuery, boolean attributeCanHaveMoreThanOneValue, boolean primarySortDescending)", "full_signature": " Iterator<O> retrieveWithIndexOrderingMainResults(final Query<O> query, QueryOptions queryOptions, SortedKeyStatisticsIndex<?, O> indexForOrdering, List<AttributeOrder<O>> allSortOrders, RangeBounds<?> rangeBoundsFromQuery, boolean attributeCanHaveMoreThanOneValue, boolean primarySortDescending)", "class_method_signature": "CollectionQueryEngine.retrieveWithIndexOrderingMainResults(final Query<O> query, QueryOptions queryOptions, SortedKeyStatisticsIndex<?, O> indexForOrdering, List<AttributeOrder<O>> allSortOrders, RangeBounds<?> rangeBoundsFromQuery, boolean attributeCanHaveMoreThanOneValue, boolean primarySortDescending)", "testcase": false, "constructor": false}, {"identifier": "retrieveWithIndexOrderingMissingResults", "parameters": "(final Query<O> query, QueryOptions queryOptions, Attribute<O, Comparable> primarySortAttribute, List<AttributeOrder<O>> allSortOrders, boolean attributeCanHaveMoreThanOneValue)", "modifiers": "", "return": "Iterator<O>", "signature": "Iterator<O> retrieveWithIndexOrderingMissingResults(final Query<O> query, QueryOptions queryOptions, Attribute<O, Comparable> primarySortAttribute, List<AttributeOrder<O>> allSortOrders, boolean attributeCanHaveMoreThanOneValue)", "full_signature": " Iterator<O> retrieveWithIndexOrderingMissingResults(final Query<O> query, QueryOptions queryOptions, Attribute<O, Comparable> primarySortAttribute, List<AttributeOrder<O>> allSortOrders, boolean attributeCanHaveMoreThanOneValue)", "class_method_signature": "CollectionQueryEngine.retrieveWithIndexOrderingMissingResults(final Query<O> query, QueryOptions queryOptions, Attribute<O, Comparable> primarySortAttribute, List<AttributeOrder<O>> allSortOrders, boolean attributeCanHaveMoreThanOneValue)", "testcase": false, "constructor": false}, {"identifier": "filterIndexOrderingCandidateResults", "parameters": "(final Iterator<O> sortedCandidateResults, final Query<O> query, final QueryOptions queryOptions)", "modifiers": "", "return": "Iterator<O>", "signature": "Iterator<O> filterIndexOrderingCandidateResults(final Iterator<O> sortedCandidateResults, final Query<O> query, final QueryOptions queryOptions)", "full_signature": " Iterator<O> filterIndexOrderingCandidateResults(final Iterator<O> sortedCandidateResults, final Query<O> query, final QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.filterIndexOrderingCandidateResults(final Iterator<O> sortedCandidateResults, final Query<O> query, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getPersistenceFromQueryOptions", "parameters": "(QueryOptions queryOptions)", "modifiers": "static", "return": "Persistence<O, A>", "signature": "Persistence<O, A> getPersistenceFromQueryOptions(QueryOptions queryOptions)", "full_signature": "static Persistence<O, A> getPersistenceFromQueryOptions(QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.getPersistenceFromQueryOptions(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "determineAdditionalSortOrdersForIndexOrdering", "parameters": "(List<AttributeOrder<O>> allSortOrders, boolean attributeCanHaveMoreThanOneValue, Index<O> index, QueryOptions queryOptions)", "modifiers": "static", "return": "List<AttributeOrder<O>>", "signature": "List<AttributeOrder<O>> determineAdditionalSortOrdersForIndexOrdering(List<AttributeOrder<O>> allSortOrders, boolean attributeCanHaveMoreThanOneValue, Index<O> index, QueryOptions queryOptions)", "full_signature": "static List<AttributeOrder<O>> determineAdditionalSortOrdersForIndexOrdering(List<AttributeOrder<O>> allSortOrders, boolean attributeCanHaveMoreThanOneValue, Index<O> index, QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.determineAdditionalSortOrdersForIndexOrdering(List<AttributeOrder<O>> allSortOrders, boolean attributeCanHaveMoreThanOneValue, Index<O> index, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getKeysAndValuesInRange", "parameters": "(SortedKeyStatisticsIndex<A, O> index, RangeBounds<?> queryBounds, boolean descending, QueryOptions queryOptions)", "modifiers": "static", "return": "CloseableIterator<KeyValue<A, O>>", "signature": "CloseableIterator<KeyValue<A, O>> getKeysAndValuesInRange(SortedKeyStatisticsIndex<A, O> index, RangeBounds<?> queryBounds, boolean descending, QueryOptions queryOptions)", "full_signature": "static CloseableIterator<KeyValue<A, O>> getKeysAndValuesInRange(SortedKeyStatisticsIndex<A, O> index, RangeBounds<?> queryBounds, boolean descending, QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.getKeysAndValuesInRange(SortedKeyStatisticsIndex<A, O> index, RangeBounds<?> queryBounds, boolean descending, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getBoundsFromQuery", "parameters": "(Query<O> query, Attribute<O, A> attribute)", "modifiers": "static", "return": "RangeBounds", "signature": "RangeBounds getBoundsFromQuery(Query<O> query, Attribute<O, A> attribute)", "full_signature": "static RangeBounds getBoundsFromQuery(Query<O> query, Attribute<O, A> attribute)", "class_method_signature": "CollectionQueryEngine.getBoundsFromQuery(Query<O> query, Attribute<O, A> attribute)", "testcase": false, "constructor": false}, {"identifier": "retrieveRecursive", "parameters": "(Query<O> query, final QueryOptions queryOptions)", "modifiers": "", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieveRecursive(Query<O> query, final QueryOptions queryOptions)", "full_signature": " ResultSet<O> retrieveRecursive(Query<O> query, final QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.retrieveRecursive(Query<O> query, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "retrieveIntersectionOfSimpleQueries", "parameters": "(Collection<SimpleQuery<O, ?>> queries, QueryOptions queryOptions, boolean indexMergeStrategyEnabled)", "modifiers": "", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieveIntersectionOfSimpleQueries(Collection<SimpleQuery<O, ?>> queries, QueryOptions queryOptions, boolean indexMergeStrategyEnabled)", "full_signature": " ResultSet<O> retrieveIntersectionOfSimpleQueries(Collection<SimpleQuery<O, ?>> queries, QueryOptions queryOptions, boolean indexMergeStrategyEnabled)", "class_method_signature": "CollectionQueryEngine.retrieveIntersectionOfSimpleQueries(Collection<SimpleQuery<O, ?>> queries, QueryOptions queryOptions, boolean indexMergeStrategyEnabled)", "testcase": false, "constructor": false}, {"identifier": "retrieveIntersectionOfComparativeQueries", "parameters": "(Collection<ComparativeQuery<O, ?>> queries, QueryOptions queryOptions)", "modifiers": "", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieveIntersectionOfComparativeQueries(Collection<ComparativeQuery<O, ?>> queries, QueryOptions queryOptions)", "full_signature": " ResultSet<O> retrieveIntersectionOfComparativeQueries(Collection<ComparativeQuery<O, ?>> queries, QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.retrieveIntersectionOfComparativeQueries(Collection<ComparativeQuery<O, ?>> queries, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "retrieveUnionOfSimpleQueries", "parameters": "(final Collection<SimpleQuery<O, ?>> queries, final QueryOptions queryOptions)", "modifiers": "", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieveUnionOfSimpleQueries(final Collection<SimpleQuery<O, ?>> queries, final QueryOptions queryOptions)", "full_signature": " ResultSet<O> retrieveUnionOfSimpleQueries(final Collection<SimpleQuery<O, ?>> queries, final QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.retrieveUnionOfSimpleQueries(final Collection<SimpleQuery<O, ?>> queries, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "retrieveUnionOfComparativeQueries", "parameters": "(final Collection<ComparativeQuery<O, ?>> queries, final QueryOptions queryOptions)", "modifiers": "", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieveUnionOfComparativeQueries(final Collection<ComparativeQuery<O, ?>> queries, final QueryOptions queryOptions)", "full_signature": " ResultSet<O> retrieveUnionOfComparativeQueries(final Collection<ComparativeQuery<O, ?>> queries, final QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.retrieveUnionOfComparativeQueries(final Collection<ComparativeQuery<O, ?>> queries, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "retrieveFromStandingQueryIndexIfAvailable", "parameters": "(Query<O> query, final QueryOptions queryOptions)", "modifiers": "", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieveFromStandingQueryIndexIfAvailable(Query<O> query, final QueryOptions queryOptions)", "full_signature": " ResultSet<O> retrieveFromStandingQueryIndexIfAvailable(Query<O> query, final QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.retrieveFromStandingQueryIndexIfAvailable(Query<O> query, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(final ObjectSet<O> objectSet, final QueryOptions queryOptions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAll(final ObjectSet<O> objectSet, final QueryOptions queryOptions)", "full_signature": "@Override public boolean addAll(final ObjectSet<O> objectSet, final QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.addAll(final ObjectSet<O> objectSet, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(final ObjectSet<O> objectSet, final QueryOptions queryOptions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAll(final ObjectSet<O> objectSet, final QueryOptions queryOptions)", "full_signature": "@Override public boolean removeAll(final ObjectSet<O> objectSet, final QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.removeAll(final ObjectSet<O> objectSet, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "(final QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void clear(final QueryOptions queryOptions)", "full_signature": "@Override public void clear(final QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.clear(final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "isMutable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMutable()", "full_signature": "@Override public boolean isMutable()", "class_method_signature": "CollectionQueryEngine.isMutable()", "testcase": false, "constructor": false}, {"identifier": "ensureMutable", "parameters": "()", "modifiers": "", "return": "void", "signature": "void ensureMutable()", "full_signature": " void ensureMutable()", "class_method_signature": "CollectionQueryEngine.ensureMutable()", "testcase": false, "constructor": false}, {"identifier": "forEachIndexDo", "parameters": "(IndexOperation<O> indexOperation)", "modifiers": "", "return": "boolean", "signature": "boolean forEachIndexDo(IndexOperation<O> indexOperation)", "full_signature": " boolean forEachIndexDo(IndexOperation<O> indexOperation)", "class_method_signature": "CollectionQueryEngine.forEachIndexDo(IndexOperation<O> indexOperation)", "testcase": false, "constructor": false}, {"identifier": "getClassNameNullSafe", "parameters": "(Object object)", "modifiers": "static", "return": "String", "signature": "String getClassNameNullSafe(Object object)", "full_signature": "static String getClassNameNullSafe(Object object)", "class_method_signature": "CollectionQueryEngine.getClassNameNullSafe(Object object)", "testcase": false, "constructor": false}, {"identifier": "shouldUseIndexMergeStrategy", "parameters": "(boolean strategyRequested, boolean comparativeQueriesPresent, Iterable<ResultSet<O>> resultSetsToMerge)", "modifiers": "static", "return": "boolean", "signature": "boolean shouldUseIndexMergeStrategy(boolean strategyRequested, boolean comparativeQueriesPresent, Iterable<ResultSet<O>> resultSetsToMerge)", "full_signature": "static boolean shouldUseIndexMergeStrategy(boolean strategyRequested, boolean comparativeQueriesPresent, Iterable<ResultSet<O>> resultSetsToMerge)", "class_method_signature": "CollectionQueryEngine.shouldUseIndexMergeStrategy(boolean strategyRequested, boolean comparativeQueriesPresent, Iterable<ResultSet<O>> resultSetsToMerge)", "testcase": false, "constructor": false}, {"identifier": "indexesAvailableForAllResultSets", "parameters": "(Iterable<ResultSet<O>> resultSetsToMerge)", "modifiers": "static", "return": "boolean", "signature": "boolean indexesAvailableForAllResultSets(Iterable<ResultSet<O>> resultSetsToMerge)", "full_signature": "static boolean indexesAvailableForAllResultSets(Iterable<ResultSet<O>> resultSetsToMerge)", "class_method_signature": "CollectionQueryEngine.indexesAvailableForAllResultSets(Iterable<ResultSet<O>> resultSetsToMerge)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/engine/CollectionQueryEngine.java"}, "focal_method": {"identifier": "removeIndex", "parameters": "(Index<O> index, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void removeIndex(Index<O> index, QueryOptions queryOptions) {\n        boolean removed;\n        if (index instanceof StandingQueryIndex) {\n            @SuppressWarnings({\"unchecked\"})\n            StandingQueryIndex<O> standingQueryIndex = (StandingQueryIndex<O>) index;\n\n            removed = standingQueryIndexes.remove(standingQueryIndex.getStandingQuery(), standingQueryIndex);\n        }\n        else if (index instanceof CompoundIndex) {\n            @SuppressWarnings({\"unchecked\"})\n            CompoundIndex<O> compoundIndex = (CompoundIndex<O>) index;\n            CompoundAttribute<O> compoundAttribute = compoundIndex.getAttribute();\n\n            removed = compoundIndexes.remove(compoundAttribute, compoundIndex);\n        }\n        else if (index instanceof AttributeIndex) {\n            @SuppressWarnings({\"unchecked\"})\n            AttributeIndex<?, O> attributeIndex = (AttributeIndex<?, O>) index;\n            Attribute<O, ?> indexedAttribute = attributeIndex.getAttribute();\n\n            if (indexedAttribute instanceof StandingQueryAttribute) {\n                @SuppressWarnings(\"unchecked\")\n                StandingQueryAttribute<O> standingQueryAttribute = (StandingQueryAttribute<O>) indexedAttribute;\n                Query<O> standingQuery = standingQueryAttribute.getQuery();\n\n                removed = standingQueryIndexes.remove(standingQuery, index);\n            }\n            else {\n                Set<Index<O>> indexesOnThisAttribute = attributeIndexes.get(indexedAttribute);\n\n                removed = indexesOnThisAttribute.remove(attributeIndex);\n\n                if (attributeIndex instanceof UniqueIndex) {\n                    // Remove from UniqueIndexes as well...\n                    removed = uniqueIndexes.remove(indexedAttribute, attributeIndex) || removed;\n                }\n\n                if (indexesOnThisAttribute.isEmpty()) {\n                    // If there are no more indexes left on this attribute,\n                    // remove the Set which was used to store indexes on the attribute also...\n                    attributeIndexes.remove(indexedAttribute);\n                }\n            }\n        }\n        else {\n            throw new IllegalStateException(\"Unexpected type of index: \" + (index == null ? null : index.getClass().getName()));\n        }\n        if (removed && !index.isMutable()) {\n            // Remove from the set of immutable indexes; this is used by ensureMutable() and the isMutable() method...\n            immutableIndexes.remove(index);\n        }\n        // Notify the index that it has been removed, so that it can delete underlying storage used if necessary...\n        index.destroy(queryOptions);\n    }", "signature": "void removeIndex(Index<O> index, QueryOptions queryOptions)", "full_signature": "@Override public void removeIndex(Index<O> index, QueryOptions queryOptions)", "class_method_signature": "CollectionQueryEngine.removeIndex(Index<O> index, QueryOptions queryOptions)", "testcase": false, "constructor": false, "invocations": ["remove", "getStandingQuery", "getAttribute", "remove", "getAttribute", "getQuery", "remove", "get", "remove", "remove", "isEmpty", "remove", "getName", "getClass", "isMutable", "remove", "destroy"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}