{"test_class": {"identifier": "LockUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Lock lock;", "modifier": "private", "type": "Lock", "declarator": "lock", "var_name": "lock"}, {"original_string": "private Logger log;", "modifier": "private", "type": "Logger", "declarator": "log", "var_name": "log"}], "file": "gateleen-core/src/test/java/org/swisspush/gateleen/core/util/LockUtilTest.java"}, "test_case": {"identifier": "testReleaseLockFail", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReleaseLockFail(TestContext context) {\n        Mockito.when(lock.releaseLock(anyString(), anyString())).thenReturn(Future.succeededFuture(Boolean.FALSE));\n        LockUtil.releaseLock(lock, \"someLock\", \"someToken\", log);\n        Mockito.verify(log, Mockito.times(1)).debug(Matchers.eq(\"Trying to release lock 'someLock' with token 'someToken'\"));\n    }", "signature": "void testReleaseLockFail(TestContext context)", "full_signature": "@Test public void testReleaseLockFail(TestContext context)", "class_method_signature": "LockUtilTest.testReleaseLockFail(TestContext context)", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "releaseLock", "anyString", "anyString", "succeededFuture", "releaseLock", "debug", "verify", "times", "eq"]}, "focal_class": {"identifier": "LockUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "LockUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " LockUtil()", "full_signature": "private  LockUtil()", "class_method_signature": "LockUtil.LockUtil()", "testcase": false, "constructor": true}, {"identifier": "acquireLock", "parameters": "(Lock lockImpl, String lock, String token, long lockExpiryMs, Logger log)", "modifiers": "public static", "return": "Future<Boolean>", "signature": "Future<Boolean> acquireLock(Lock lockImpl, String lock, String token, long lockExpiryMs, Logger log)", "full_signature": "public static Future<Boolean> acquireLock(Lock lockImpl, String lock, String token, long lockExpiryMs, Logger log)", "class_method_signature": "LockUtil.acquireLock(Lock lockImpl, String lock, String token, long lockExpiryMs, Logger log)", "testcase": false, "constructor": false}, {"identifier": "releaseLock", "parameters": "(Lock lockImpl, String lock, String token, Logger log)", "modifiers": "public static", "return": "void", "signature": "void releaseLock(Lock lockImpl, String lock, String token, Logger log)", "full_signature": "public static void releaseLock(Lock lockImpl, String lock, String token, Logger log)", "class_method_signature": "LockUtil.releaseLock(Lock lockImpl, String lock, String token, Logger log)", "testcase": false, "constructor": false}], "file": "gateleen-core/src/main/java/org/swisspush/gateleen/core/util/LockUtil.java"}, "focal_method": {"identifier": "releaseLock", "parameters": "(Lock lockImpl, String lock, String token, Logger log)", "modifiers": "public static", "return": "void", "body": "public static void releaseLock(Lock lockImpl, String lock, String token, Logger log){\n        if(lockImpl == null){\n            log.info(\"No lock implementation defined, going to pretend like we released the lock\");\n            return;\n        }\n        log.debug(\"Trying to release lock '\"+lock+\"' with token '\"+token+\"'\");\n        lockImpl.releaseLock(lock, token).setHandler(releaseEvent -> {\n            if(releaseEvent.succeeded()){\n                if(releaseEvent.result()){\n                    log.debug(\"Released lock '\"+lock+\"' with token '\"+token+\"'\");\n                }\n            } else {\n                log.error(\"Could not release lock '\"+lock+\"'. Message: \" + releaseEvent.cause().getMessage());\n            }\n        });\n    }", "signature": "void releaseLock(Lock lockImpl, String lock, String token, Logger log)", "full_signature": "public static void releaseLock(Lock lockImpl, String lock, String token, Logger log)", "class_method_signature": "LockUtil.releaseLock(Lock lockImpl, String lock, String token, Logger log)", "testcase": false, "constructor": false, "invocations": ["info", "debug", "setHandler", "releaseLock", "succeeded", "result", "debug", "error", "getMessage", "cause"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}