{"test_class": {"identifier": "FullFormatterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(CompactFormatterTest.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(CompactFormatterTest.class.getName())", "var_name": "log"}, {"original_string": "private static final String eventString\n        = \"2011-11-28T16:46:22.123\\texample.com\\t0/1\\tmyservice\\tSingleLineFormatter\\tT\\tINFO\\tBE\\tmsg: this is a test\";", "modifier": "private static final", "type": "String", "declarator": "eventString\n        = \"2011-11-28T16:46:22.123\\texample.com\\t0/1\\tmyservice\\tSingleLineFormatter\\tT\\tINFO\\tBE\\tmsg: this is a test\"", "var_name": "eventString"}, {"original_string": "private static final String eventStringWithException\n        = \"2011-11-28T16:46:22.123\\texample.com\\t0/1\\tmyservice\\tSingleLineFormatter\\tT\\tWARNING\" +\n        \"\\tBE\\tmsg: this is a test with an exception | exception: java.lang.RuntimeException: \" +\n        \"Testing\\\\n\\\\tat\";", "modifier": "private static final", "type": "String", "declarator": "eventStringWithException\n        = \"2011-11-28T16:46:22.123\\texample.com\\t0/1\\tmyservice\\tSingleLineFormatter\\tT\\tWARNING\" +\n        \"\\tBE\\tmsg: this is a test with an exception | exception: java.lang.RuntimeException: \" +\n        \"Testing\\\\n\\\\tat\"", "var_name": "eventStringWithException"}, {"original_string": "private static Timber.LogEvent event;", "modifier": "private static", "type": "Timber.LogEvent", "declarator": "event", "var_name": "event"}, {"original_string": "private static Timber.LogEvent eventWithException;", "modifier": "private static", "type": "Timber.LogEvent", "declarator": "eventWithException", "var_name": "eventWithException"}, {"original_string": "private static long instant = 1322498782123L;", "modifier": "private static", "type": "long", "declarator": "instant = 1322498782123L", "var_name": "instant"}, {"original_string": "private static RuntimeException runtimeException = new RuntimeException(\"Testing\");", "modifier": "private static", "type": "RuntimeException", "declarator": "runtimeException = new RuntimeException(\"Testing\")", "var_name": "runtimeException"}], "file": "log/src/test/java/org/cloudname/log/format/FullFormatterTest.java"}, "test_case": {"identifier": "microBenchmarkTest", "parameters": "()", "modifiers": "@Test (timeout = 1000) public", "return": "void", "body": "@Test (timeout = 1000)\n    public void microBenchmarkTest() {\n        FullFormatter form = new FullFormatter();\n        int numIterations = 1000;\n\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < numIterations; i++) {\n            form.format(event);\n        }\n        long duration = System.currentTimeMillis() - start;\n        double formatsPerSecond = numIterations / ((double) duration / 1000.0);\n\n        log.info(\"event formats per second: \" + formatsPerSecond\n            + \" (\" + numIterations + \" iterations took \" + duration + \" milliseconds)\");\n    }", "signature": "void microBenchmarkTest()", "full_signature": "@Test (timeout = 1000) public void microBenchmarkTest()", "class_method_signature": "FullFormatterTest.microBenchmarkTest()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "format", "currentTimeMillis", "info"]}, "focal_class": {"identifier": "FullFormatter", "superclass": "", "interfaces": "implements LogEventFormatter", "fields": [], "methods": [{"identifier": "format", "parameters": "(Timber.LogEvent logEvent)", "modifiers": "@Override public", "return": "String", "signature": "String format(Timber.LogEvent logEvent)", "full_signature": "@Override public String format(Timber.LogEvent logEvent)", "class_method_signature": "FullFormatter.format(Timber.LogEvent logEvent)", "testcase": false, "constructor": false}, {"identifier": "classFromSource", "parameters": "(String source)", "modifiers": "private", "return": "String", "signature": "String classFromSource(String source)", "full_signature": "private String classFromSource(String source)", "class_method_signature": "FullFormatter.classFromSource(String source)", "testcase": false, "constructor": false}], "file": "log/src/main/java/org/cloudname/log/format/FullFormatter.java"}, "focal_method": {"identifier": "format", "parameters": "(Timber.LogEvent logEvent)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String format(Timber.LogEvent logEvent) {\n        StringBuilder buff = new StringBuilder(200);\n        Util.formatTimeISO(logEvent.getTimestamp(), buff);\n\n        buff.append('\\t')\n            .append(logEvent.getHost())\n            .append('\\t')\n\n            // Add process- and thread id if applicable\n            .append((logEvent.hasPid() ? logEvent.getPid() : \"-\"))\n            .append(\"/\")\n            .append((logEvent.hasTid() ? logEvent.getTid() : \"-\"))\n            .append('\\t')\n\n            // Add service name\n            .append(logEvent.getServiceName())\n            .append('\\t')\n\n            // Add source\n            .append(classFromSource(logEvent.getSource()))\n            .append('\\t')\n\n            // Type of log message\n            .append(logEvent.getType())\n            .append('\\t')\n\n            // Level of log message\n            .append(Util.logLevelNameForValue(logEvent.getLevel()))\n            .append('\\t')\n\n            // Add consistency level\n            .append(logEvent.getConsistencyLevel().toString().substring(0,2))\n            .append('\\t');\n\n        // Add the payloads\n        boolean first = true;\n        for (Timber.Payload payload : logEvent.getPayloadList()) {\n            String s = payload.getPayload().toStringUtf8();\n\n            buff.append((first?\"\":\" | \"))\n                .append(payload.getName())\n                .append(\": \")\n                .append(Util.escape(s));\n\n            first = false;\n        }\n\n        return buff.toString();\n    }", "signature": "String format(Timber.LogEvent logEvent)", "full_signature": "@Override public String format(Timber.LogEvent logEvent)", "class_method_signature": "FullFormatter.format(Timber.LogEvent logEvent)", "testcase": false, "constructor": false, "invocations": ["formatTimeISO", "getTimestamp", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "getHost", "hasPid", "getPid", "hasTid", "getTid", "getServiceName", "classFromSource", "getSource", "getType", "logLevelNameForValue", "getLevel", "substring", "toString", "getConsistencyLevel", "getPayloadList", "toStringUtf8", "getPayload", "append", "append", "append", "append", "getName", "escape", "toString"]}, "repository": {"repo_id": 2329961, "url": "https://github.com/Cloudname/cloudname", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 21, "size": 26031, "license": "licensed"}}