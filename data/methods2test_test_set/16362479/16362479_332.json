{"test_class": {"identifier": "ClientTransactionTest", "superclass": "extends AbstractClientHandleTest<ClientTransaction>", "interfaces": "", "fields": [{"original_string": "private static final YangInstanceIdentifier PATH = YangInstanceIdentifier.builder()\n            .node(QName.create(\"ns-1\", \"node-1\"))\n            .build();", "modifier": "private static final", "type": "YangInstanceIdentifier", "declarator": "PATH = YangInstanceIdentifier.builder()\n            .node(QName.create(\"ns-1\", \"node-1\"))\n            .build()", "var_name": "PATH"}, {"original_string": "private static final NormalizedNode<?, ?> DATA = Builders.containerBuilder()\n            .withNodeIdentifier(YangInstanceIdentifier.NodeIdentifier.create(PATH.getLastPathArgument().getNodeType()))\n            .build();", "modifier": "private static final", "type": "NormalizedNode<?, ?>", "declarator": "DATA = Builders.containerBuilder()\n            .withNodeIdentifier(YangInstanceIdentifier.NodeIdentifier.create(PATH.getLastPathArgument().getNodeType()))\n            .build()", "var_name": "DATA"}, {"original_string": "@Mock\n    private CursorAwareDataTreeModification modification;", "modifier": "@Mock\n    private", "type": "CursorAwareDataTreeModification", "declarator": "modification", "var_name": "modification"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/databroker/actors/dds/ClientTransactionTest.java"}, "test_case": {"identifier": "testDelete", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDelete() {\n        getHandle().delete(PATH);\n        verify(modification).delete(PATH);\n    }", "signature": "void testDelete()", "full_signature": "@Test public void testDelete()", "class_method_signature": "ClientTransactionTest.testDelete()", "testcase": true, "constructor": false, "invocations": ["delete", "getHandle", "delete", "verify"]}, "focal_class": {"identifier": "ClientTransaction", "superclass": "extends AbstractClientHandle<AbstractProxyTransaction>", "interfaces": "", "fields": [{"original_string": "private ClientTransactionCursor cursor;", "modifier": "private", "type": "ClientTransactionCursor", "declarator": "cursor", "var_name": "cursor"}], "methods": [{"identifier": "ClientTransaction", "parameters": "(final AbstractClientHistory parent, final TransactionIdentifier transactionId)", "modifiers": "", "return": "", "signature": " ClientTransaction(final AbstractClientHistory parent, final TransactionIdentifier transactionId)", "full_signature": "  ClientTransaction(final AbstractClientHistory parent, final TransactionIdentifier transactionId)", "class_method_signature": "ClientTransaction.ClientTransaction(final AbstractClientHistory parent, final TransactionIdentifier transactionId)", "testcase": false, "constructor": true}, {"identifier": "ensureTransactionProxy", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "private", "return": "AbstractProxyTransaction", "signature": "AbstractProxyTransaction ensureTransactionProxy(final YangInstanceIdentifier path)", "full_signature": "private AbstractProxyTransaction ensureTransactionProxy(final YangInstanceIdentifier path)", "class_method_signature": "ClientTransaction.ensureTransactionProxy(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "openCursor", "parameters": "()", "modifiers": "public", "return": "DOMDataTreeWriteCursor", "signature": "DOMDataTreeWriteCursor openCursor()", "full_signature": "public DOMDataTreeWriteCursor openCursor()", "class_method_signature": "ClientTransaction.openCursor()", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "public", "return": "FluentFuture<Boolean>", "signature": "FluentFuture<Boolean> exists(final YangInstanceIdentifier path)", "full_signature": "public FluentFuture<Boolean> exists(final YangInstanceIdentifier path)", "class_method_signature": "ClientTransaction.exists(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "public", "return": "FluentFuture<Optional<NormalizedNode<?, ?>>>", "signature": "FluentFuture<Optional<NormalizedNode<?, ?>>> read(final YangInstanceIdentifier path)", "full_signature": "public FluentFuture<Optional<NormalizedNode<?, ?>>> read(final YangInstanceIdentifier path)", "class_method_signature": "ClientTransaction.read(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "public", "return": "void", "signature": "void delete(final YangInstanceIdentifier path)", "full_signature": "public void delete(final YangInstanceIdentifier path)", "class_method_signature": "ClientTransaction.delete(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "public", "return": "void", "signature": "void merge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "public void merge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "ClientTransaction.merge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "public", "return": "void", "signature": "void write(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "public void write(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "ClientTransaction.write(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": false}, {"identifier": "ready", "parameters": "()", "modifiers": "public", "return": "DOMStoreThreePhaseCommitCohort", "signature": "DOMStoreThreePhaseCommitCohort ready()", "full_signature": "public DOMStoreThreePhaseCommitCohort ready()", "class_method_signature": "ClientTransaction.ready()", "testcase": false, "constructor": false}, {"identifier": "createProxy", "parameters": "(final Long shard)", "modifiers": "@Override final", "return": "AbstractProxyTransaction", "signature": "AbstractProxyTransaction createProxy(final Long shard)", "full_signature": "@Override final AbstractProxyTransaction createProxy(final Long shard)", "class_method_signature": "ClientTransaction.createProxy(final Long shard)", "testcase": false, "constructor": false}, {"identifier": "closeCursor", "parameters": "(final @NonNull DOMDataTreeCursor cursorToClose)", "modifiers": "", "return": "void", "signature": "void closeCursor(final @NonNull DOMDataTreeCursor cursorToClose)", "full_signature": " void closeCursor(final @NonNull DOMDataTreeCursor cursorToClose)", "class_method_signature": "ClientTransaction.closeCursor(final @NonNull DOMDataTreeCursor cursorToClose)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/databroker/actors/dds/ClientTransaction.java"}, "focal_method": {"identifier": "delete", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "public", "return": "void", "body": "public void delete(final YangInstanceIdentifier path) {\n        ensureTransactionProxy(path).delete(path);\n    }", "signature": "void delete(final YangInstanceIdentifier path)", "full_signature": "public void delete(final YangInstanceIdentifier path)", "class_method_signature": "ClientTransaction.delete(final YangInstanceIdentifier path)", "testcase": false, "constructor": false, "invocations": ["delete", "ensureTransactionProxy"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}