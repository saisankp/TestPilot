{"test_class": {"identifier": "RunRecipeTaskTest", "superclass": "", "interfaces": "", "fields": [], "file": "karamel-core/src/test/java/se/kth/karamel/backend/running/model/tasks/RunRecipeTaskTest.java"}, "test_case": {"identifier": "testMerge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMerge() {\n    String dest = \"{\\n\"\n        + \"  \\\"ndb\\\": {\\n\"\n        + \"    \\\"mgmd\\\": {\\n\"\n        + \"      \\\"public_key\\\": \\\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDfhPNyp4MLJ3YsXAbupxYD7MH4LSDZn9u9wREKyCMZTLH6bJwlB7NvvIda0YiJyXBSfwVAPiTmAqtsSR7qXtIbxCjL98BiIpz/jliWkGHhg3vUv05WjPwNijNhHohPf56CRxseI/QdkPBkacDRGs0EbSYGHessIlZu21r/IF2vlN5uEkZ2AIGsgiQmmOerT5HHuxt6kKoX4Qxr9WDh5njY0nqOxh0uNNNaPBW54L6qLuVfRPj/sSeRCMzkWkeUBWVqeUXbDgWfS1sVu6rvv8Ajwl4wfYn2QtdTmNbkj8rTKey9AQvtZbsbZBhPZD/6zc5k8efscaHMRytZ2LUtuF0p root@ip-10-74-183-110\\\\n\\\"\\n\"\n        + \"    }\\n\"\n        + \"  }\\n\"\n        + \"}\";\n\n    String source = \"{\\n\"\n        + \"  \\\"hdfs\\\": {\\n\"\n        + \"     \\\"user\\\" : \\\"jdowling\\\"\\n\"\n        + \"  },\\n\"\n        + \"  \\\"hops\\\": {\\n\"\n        + \"     \\\"nn\\\": {\\n\"\n        + \"        \\\"private_ips\\\": [\\\"127.0.0.1\\\"]\\n\"\n        + \"     },\\n\"\n        + \"     \\\"dn\\\": {\\n\"\n        + \"        \\\"private_ips\\\": [\\\"127.0.0.1\\\"]\\n\"\n        + \"     },\\n\"\n        + \"     \\\"rm\\\": {\\n\"\n        + \"        \\\"private_ips\\\": [\\\"127.0.0.1\\\"]\\n\"\n        + \"     },\\n\"\n        + \"     \\\"nm\\\": {\\n\"\n        + \"        \\\"private_ips\\\": [\\\"127.0.0.1\\\"]\\n\"\n        + \"     },\\n\"\n        + \"     \\\"jhs\\\": {\\n\"\n        + \"        \\\"private_ips\\\": [\\\"127.0.0.1\\\"]\\n\"\n        + \"     },\\n\"\n        + \"     \\\"yarn\\\": {\\n\"\n        + \"        \\\"user\\\" : \\\"jdowling\\\"\\n\"\n        + \"      },\\n\"\n        + \"     \\\"mr\\\": {\\n\"\n        + \"        \\\"user\\\" : \\\"jdowling\\\"\\n\"\n        + \"     },\\n\"\n        + \"     \\\"cluster\\\": \\\"vagrant\\\"\\n\"\n        + \"  },\\n\"\n        + \"  \\\"hadoop\\\": {\\n\"\n        + \"      \\\"yarn\\\":{\\n\"\n        + \"        \\\"user\\\" : \\\"jdowling\\\"\\n\"\n        + \"      },\\n\"\n        + \"      \\\"mr\\\":{\\n\"\n        + \"        \\\"user\\\": \\\"jdowling\\\"\\n\"\n        + \"      }\\n\"\n        + \"  },\\n\"\n        + \"  \\\"ndb\\\": {\\n\"\n        + \"     \\\"ndbd\\\": {\\n\"\n        + \"        \\\"private_ips\\\": [\\\"127.0.0.1\\\"]\\n\"\n        + \"     },\\n\"\n        + \"     \\\"mgmd\\\": {\\n\"\n        + \"        \\\"private_ips\\\": [\\\"127.0.0.1\\\"]\\n\"\n        + \"     },\\n\"\n        + \"     \\\"mysqld\\\": {\\n\"\n        + \"        \\\"private_ips\\\": [\\\"127.0.0.1\\\"]\\n\"\n        + \"     },\\n\"\n        + \"     \\\"memcached\\\": {\\n\"\n        + \"        \\\"private_ips\\\": [\\\"127.0.0.1\\\"]\\n\"\n        + \"     },\\n\"\n        + \"     \\\"public_ips\\\": [\\\"127.0.0.1\\\"],\\n\"\n        + \"     \\\"enabled\\\": \\\"true\\\",\\n\"\n        + \"     \\\"connectstring\\\": \\\"127.0.0.1:1186\\\"\\n\"\n        + \"  },\\n\"\n        + \"  \\\"kmon\\\": {\\n\"\n        + \"     \\\"private_ips\\\": [\\\"127.0.0.1\\\"],\\n\"\n        + \"     \\\"public_ips\\\": [\\\"127.0.0.1\\\"]\\n\"\n        + \"  },\\n\"\n        + \"  \\\"kagent\\\": {\\n\"\n        + \"     \\\"private_ips\\\": [\\\"127.0.0.1\\\"],\\n\"\n        + \"     \\\"public_ips\\\": [\\\"127.0.0.1\\\"]\\n\"\n        + \"  },\\n\"\n        + \"  \\\"private_ips\\\": [\\\"127.0.0.1\\\"],\\n\"\n        + \"  \\\"public_ips\\\": [\\\"127.0.0.1\\\"],\\n\"\n        + \"  \\\"run_list\\\": [ \\n\"\n        + \"    \\\"recipe[ndb::install]\\\",\\n\"\n        + \"    \\\"recipe[hops::install]\\\",\\n\"\n        + \"    \\\"recipe[ndb::mgmd]\\\",\\n\"\n        + \"    \\\"recipe[ndb::ndbd]\\\",\\n\"\n        + \"    \\\"recipe[ndb::mysqld]\\\",\\n\"\n        + \"    \\\"recipe[hops::ndb]\\\",\\n\"\n        + \"    \\\"recipe[hops::nn]\\\",\\n\"\n        + \"    \\\"recipe[hops::dn]\\\",\\n\"\n        + \"    \\\"recipe[hops::rm]\\\",\\n\"\n        + \"    \\\"recipe[hops::nm]\\\",\\n\"\n        + \"    \\\"recipe[hops::jhs]\\\"\\n\"\n        + \"  ]\\n\"\n        + \"}\";\n\n    JsonElement obj = new JsonParser().parse(source);\n    JsonElement param = new JsonParser().parse(dest);\n    MachineRuntime mr = new MachineRuntime(null);\n    mr.setPublicIp(\"1111\");\n    ClusterStats clusterStats = new ClusterStats();\n    RunRecipeTask instance = new RunRecipeTask(mr, clusterStats, \"\", \"\", null, \"\", \"\", Collections.EMPTY_LIST);\n    JsonObject result = instance.merge(obj.getAsJsonObject(), param.getAsJsonObject());\n    String modifiedJson = new Gson().toJson(result);\n    System.out.println(modifiedJson);\n    if (modifiedJson.compareToIgnoreCase(source) == 0) {\n      fail(\"Merging json objects broken.\");\n    }\n    if (result == null) {\n      fail(\"The test case is a prototype.\");\n    }\n  }", "signature": "void testMerge()", "full_signature": "@Test public void testMerge()", "class_method_signature": "RunRecipeTaskTest.testMerge()", "testcase": true, "constructor": false, "invocations": ["parse", "parse", "setPublicIp", "merge", "getAsJsonObject", "getAsJsonObject", "toJson", "println", "compareToIgnoreCase", "fail", "fail"]}, "focal_class": {"identifier": "RunRecipeTask", "superclass": "extends Task", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(RunRecipeTask.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(RunRecipeTask.class)", "var_name": "logger"}, {"original_string": "private final String recipeCanonicalName;", "modifier": "private final", "type": "String", "declarator": "recipeCanonicalName", "var_name": "recipeCanonicalName"}, {"original_string": "private String json;", "modifier": "private", "type": "String", "declarator": "json", "var_name": "json"}, {"original_string": "private final String cookbookId;", "modifier": "private final", "type": "String", "declarator": "cookbookId", "var_name": "cookbookId"}, {"original_string": "private final String cookbookName;", "modifier": "private final", "type": "String", "declarator": "cookbookName", "var_name": "cookbookName"}, {"original_string": "private final List<KaramelizedCookbook> rookCookbooks;", "modifier": "private final", "type": "List<KaramelizedCookbook>", "declarator": "rookCookbooks", "var_name": "rookCookbooks"}], "methods": [{"identifier": "RunRecipeTask", "parameters": "(MachineRuntime machine, ClusterStats clusterStats, String recipe, String json,\n      TaskSubmitter submitter, String cookbookId, String cookbookName, List<KaramelizedCookbook> rookCookbooks)", "modifiers": "public", "return": "", "signature": " RunRecipeTask(MachineRuntime machine, ClusterStats clusterStats, String recipe, String json,\n      TaskSubmitter submitter, String cookbookId, String cookbookName, List<KaramelizedCookbook> rookCookbooks)", "full_signature": "public  RunRecipeTask(MachineRuntime machine, ClusterStats clusterStats, String recipe, String json,\n      TaskSubmitter submitter, String cookbookId, String cookbookName, List<KaramelizedCookbook> rookCookbooks)", "class_method_signature": "RunRecipeTask.RunRecipeTask(MachineRuntime machine, ClusterStats clusterStats, String recipe, String json,\n      TaskSubmitter submitter, String cookbookId, String cookbookName, List<KaramelizedCookbook> rookCookbooks)", "testcase": false, "constructor": true}, {"identifier": "merge", "parameters": "(JsonObject origObj, JsonObject paramObj)", "modifiers": "", "return": "JsonObject", "signature": "JsonObject merge(JsonObject origObj, JsonObject paramObj)", "full_signature": " JsonObject merge(JsonObject origObj, JsonObject paramObj)", "class_method_signature": "RunRecipeTask.merge(JsonObject origObj, JsonObject paramObj)", "testcase": false, "constructor": false}, {"identifier": "getCommands", "parameters": "()", "modifiers": "@Override public", "return": "List<ShellCommand>", "signature": "List<ShellCommand> getCommands()", "full_signature": "@Override public List<ShellCommand> getCommands()", "class_method_signature": "RunRecipeTask.getCommands()", "testcase": false, "constructor": false}, {"identifier": "getRecipeCanonicalName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRecipeCanonicalName()", "full_signature": "public String getRecipeCanonicalName()", "class_method_signature": "RunRecipeTask.getRecipeCanonicalName()", "testcase": false, "constructor": false}, {"identifier": "getCookbookId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCookbookId()", "full_signature": "public String getCookbookId()", "class_method_signature": "RunRecipeTask.getCookbookId()", "testcase": false, "constructor": false}, {"identifier": "getRecipeName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRecipeName()", "full_signature": "public String getRecipeName()", "class_method_signature": "RunRecipeTask.getRecipeName()", "testcase": false, "constructor": false}, {"identifier": "getCookbookName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCookbookName()", "full_signature": "public String getCookbookName()", "class_method_signature": "RunRecipeTask.getCookbookName()", "testcase": false, "constructor": false}, {"identifier": "installRecipeIdFromCookbookName", "parameters": "(String machineId, String cookbook)", "modifiers": "public static", "return": "String", "signature": "String installRecipeIdFromCookbookName(String machineId, String cookbook)", "full_signature": "public static String installRecipeIdFromCookbookName(String machineId, String cookbook)", "class_method_signature": "RunRecipeTask.installRecipeIdFromCookbookName(String machineId, String cookbook)", "testcase": false, "constructor": false}, {"identifier": "installRecipeIdFromAnotherRecipeName", "parameters": "(String machineId, String recipe)", "modifiers": "public static", "return": "String", "signature": "String installRecipeIdFromAnotherRecipeName(String machineId, String recipe)", "full_signature": "public static String installRecipeIdFromAnotherRecipeName(String machineId, String recipe)", "class_method_signature": "RunRecipeTask.installRecipeIdFromAnotherRecipeName(String machineId, String recipe)", "testcase": false, "constructor": false}, {"identifier": "purgeRecipeIdFromAnotherRecipeName", "parameters": "(String machineId, String recipe)", "modifiers": "public static", "return": "String", "signature": "String purgeRecipeIdFromAnotherRecipeName(String machineId, String recipe)", "full_signature": "public static String purgeRecipeIdFromAnotherRecipeName(String machineId, String recipe)", "class_method_signature": "RunRecipeTask.purgeRecipeIdFromAnotherRecipeName(String machineId, String recipe)", "testcase": false, "constructor": false}, {"identifier": "makeUniqueId", "parameters": "(String machineId, String recipe)", "modifiers": "public static", "return": "String", "signature": "String makeUniqueId(String machineId, String recipe)", "full_signature": "public static String makeUniqueId(String machineId, String recipe)", "class_method_signature": "RunRecipeTask.makeUniqueId(String machineId, String recipe)", "testcase": false, "constructor": false}, {"identifier": "uniqueId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String uniqueId()", "full_signature": "@Override public String uniqueId()", "class_method_signature": "RunRecipeTask.uniqueId()", "testcase": false, "constructor": false}, {"identifier": "dagDependencies", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> dagDependencies()", "full_signature": "@Override public Set<String> dagDependencies()", "class_method_signature": "RunRecipeTask.dagDependencies()", "testcase": false, "constructor": false}, {"identifier": "collectResults", "parameters": "(MachineInterface sshMachine)", "modifiers": "@Override public", "return": "void", "signature": "void collectResults(MachineInterface sshMachine)", "full_signature": "@Override public void collectResults(MachineInterface sshMachine)", "class_method_signature": "RunRecipeTask.collectResults(MachineInterface sshMachine)", "testcase": false, "constructor": false}, {"identifier": "downloadExperimentResults", "parameters": "(MachineInterface sshMachine)", "modifiers": "@Override public", "return": "void", "signature": "void downloadExperimentResults(MachineInterface sshMachine)", "full_signature": "@Override public void downloadExperimentResults(MachineInterface sshMachine)", "class_method_signature": "RunRecipeTask.downloadExperimentResults(MachineInterface sshMachine)", "testcase": false, "constructor": false}], "file": "karamel-core/src/main/java/se/kth/karamel/backend/running/model/tasks/RunRecipeTask.java"}, "focal_method": {"identifier": "merge", "parameters": "(JsonObject origObj, JsonObject paramObj)", "modifiers": "", "return": "JsonObject", "body": "JsonObject merge(JsonObject origObj, JsonObject paramObj) {\n    Set<Map.Entry<String, JsonElement>> original = origObj.entrySet();\n\n    for (Map.Entry<String, JsonElement> entry : paramObj.entrySet()) {\n      boolean exists = false;\n      String pKey = entry.getKey();\n      JsonElement pValue = entry.getValue();\n      for (Map.Entry<String, JsonElement> o : original) {\n        if (o.getKey().compareToIgnoreCase(pKey) == 0) {\n          if (o.getValue().isJsonObject() && pValue.isJsonObject()) {\n            merge(o.getValue().getAsJsonObject(), pValue.getAsJsonObject());\n            exists = true;\n          }\n        }\n      }\n      if (exists == false) {\n        origObj.add(pKey, pValue);\n      }\n    }\n    return origObj;\n  }", "signature": "JsonObject merge(JsonObject origObj, JsonObject paramObj)", "full_signature": " JsonObject merge(JsonObject origObj, JsonObject paramObj)", "class_method_signature": "RunRecipeTask.merge(JsonObject origObj, JsonObject paramObj)", "testcase": false, "constructor": false, "invocations": ["entrySet", "entrySet", "getKey", "getValue", "compareToIgnoreCase", "getKey", "isJsonObject", "getValue", "isJsonObject", "merge", "getAsJsonObject", "getValue", "getAsJsonObject", "add"]}, "repository": {"repo_id": 29383909, "url": "https://github.com/karamelchef/karamel", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 30, "size": 12029, "license": "licensed"}}