{"test_class": {"identifier": "KafkaMetadataServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(KafkaMetadataServiceTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(KafkaMetadataServiceTest.class)", "var_name": "LOG"}, {"original_string": "private static final String CHROOT = \"/chroot\";", "modifier": "private static final", "type": "String", "declarator": "CHROOT = \"/chroot\"", "var_name": "CHROOT"}, {"original_string": "private static final String PATH = \"/path/d1/d2\";", "modifier": "private static final", "type": "String", "declarator": "PATH = \"/path/d1/d2\"", "var_name": "PATH"}, {"original_string": "private static final List<String> zkStrs = Lists.newArrayList(\"hostname1:port1\", \"hostname1:port1,hostname2:port2,hostname3:port3\");", "modifier": "private static final", "type": "List<String>", "declarator": "zkStrs = Lists.newArrayList(\"hostname1:port1\", \"hostname1:port1,hostname2:port2,hostname3:port3\")", "var_name": "zkStrs"}, {"original_string": "private static final List<String> chRoots = Lists.newArrayList(\"\", CHROOT + PATH, CHROOT + PATH + \"/\");", "modifier": "private static final", "type": "List<String>", "declarator": "chRoots = Lists.newArrayList(\"\", CHROOT + PATH, CHROOT + PATH + \"/\")", "var_name": "chRoots"}, {"original_string": "private static final List<String> expectedChrootPath = Lists.newArrayList(\"/\", CHROOT + PATH + \"/\");", "modifier": "private static final", "type": "List<String>", "declarator": "expectedChrootPath = Lists.newArrayList(\"/\", CHROOT + PATH + \"/\")", "var_name": "expectedChrootPath"}, {"original_string": "private static final List<String> expectedBrokerIdPath = Lists.newArrayList(\"/\" + ZK_RELATIVE_PATH_KAFKA_BROKERS_IDS,\n            CHROOT + PATH + \"/\" + ZK_RELATIVE_PATH_KAFKA_BROKERS_IDS);", "modifier": "private static final", "type": "List<String>", "declarator": "expectedBrokerIdPath = Lists.newArrayList(\"/\" + ZK_RELATIVE_PATH_KAFKA_BROKERS_IDS,\n            CHROOT + PATH + \"/\" + ZK_RELATIVE_PATH_KAFKA_BROKERS_IDS)", "var_name": "expectedBrokerIdPath"}, {"original_string": "@Tested\n    private KafkaMetadataService kafkaMetadataService;", "modifier": "@Tested\n    private", "type": "KafkaMetadataService", "declarator": "kafkaMetadataService", "var_name": "kafkaMetadataService"}, {"original_string": "@Injectable\n    private EnvironmentService environmentService;", "modifier": "@Injectable\n    private", "type": "EnvironmentService", "declarator": "environmentService", "var_name": "environmentService"}, {"original_string": "@Injectable\n    private ZookeeperClient zkCli;", "modifier": "@Injectable\n    private", "type": "ZookeeperClient", "declarator": "zkCli", "var_name": "zkCli"}, {"original_string": "@Injectable\n    private KafkaMetadataService.KafkaZkConnection kafkaZkConnection;", "modifier": "@Injectable\n    private", "type": "KafkaMetadataService.KafkaZkConnection", "declarator": "kafkaZkConnection", "var_name": "kafkaZkConnection"}, {"original_string": "@Injectable\n    private SecurityContext securityContext;", "modifier": "@Injectable\n    private", "type": "SecurityContext", "declarator": "securityContext", "var_name": "securityContext"}, {"original_string": "@Injectable\n    private Component kafkaBrokerComponent;", "modifier": "@Injectable\n    private", "type": "Component", "declarator": "kafkaBrokerComponent", "var_name": "kafkaBrokerComponent"}, {"original_string": "@Injectable\n    private Collection<ComponentProcess> kafkaBrokerProcesses;", "modifier": "@Injectable\n    private", "type": "Collection<ComponentProcess>", "declarator": "kafkaBrokerProcesses", "var_name": "kafkaBrokerProcesses"}, {"original_string": "@Injectable\n    private ServiceConfiguration kafkaBrokerConfig;", "modifier": "@Injectable\n    private", "type": "ServiceConfiguration", "declarator": "kafkaBrokerConfig", "var_name": "kafkaBrokerConfig"}, {"original_string": "@Injectable\n    private ServiceConfiguration kafkaEnvConfig;", "modifier": "@Injectable\n    private", "type": "ServiceConfiguration", "declarator": "kafkaEnvConfig", "var_name": "kafkaEnvConfig"}, {"original_string": "@Mocked\n    private KafkaBrokerListeners.ListenersPropParsed listenersPropParsed;", "modifier": "@Mocked\n    private", "type": "KafkaBrokerListeners.ListenersPropParsed", "declarator": "listenersPropParsed", "var_name": "listenersPropParsed"}, {"original_string": "@Mocked\n    private KafkaBrokerListeners.ListenersPropEntry listenersPropEntry;", "modifier": "@Mocked\n    private", "type": "KafkaBrokerListeners.ListenersPropEntry", "declarator": "listenersPropEntry", "var_name": "listenersPropEntry"}], "file": "streams/cluster/src/test/java/com/hortonworks/streamline/streams/cluster/service/metadata/KafkaMetadataServiceTest.java"}, "test_case": {"identifier": "test_KafkaZkConnection_wellInitialized", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_KafkaZkConnection_wellInitialized() throws Exception {\n        List<ComponentProcess> brokerProcesses = getBrokerComponentProcesses();\n        Deencapsulation.setField(kafkaMetadataService, \"kafkaBrokerProcesses\", brokerProcesses);\n\n        for (String zkStr : zkStrs) {\n            for (String chRoot : chRoots) {\n                final String zkStrRaw = zkStr + chRoot;\n                LOG.debug(\"zookeeper.connect=\" + zkStrRaw);\n                KafkaMetadataService.KafkaZkConnection kafkaZkConnection = KafkaMetadataService.KafkaZkConnection.newInstance(zkStrRaw);\n                Assert.assertEquals(zkStr, kafkaZkConnection.getZkString());\n                Assert.assertEquals(chRoot.isEmpty() ? expectedChrootPath.get(0) : expectedChrootPath.get(1), kafkaZkConnection.getChRoot());\n            }\n        }\n    }", "signature": "void test_KafkaZkConnection_wellInitialized()", "full_signature": "@Test public void test_KafkaZkConnection_wellInitialized()", "class_method_signature": "KafkaMetadataServiceTest.test_KafkaZkConnection_wellInitialized()", "testcase": true, "constructor": false, "invocations": ["getBrokerComponentProcesses", "setField", "debug", "newInstance", "assertEquals", "getZkString", "assertEquals", "isEmpty", "get", "get", "getChRoot"]}, "focal_class": {"identifier": "KafkaMetadataService", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private static final String AMBARI_JSON_SERVICE_KAFKA = ServiceConfigurations.KAFKA.name();", "modifier": "private static final", "type": "String", "declarator": "AMBARI_JSON_SERVICE_KAFKA = ServiceConfigurations.KAFKA.name()", "var_name": "AMBARI_JSON_SERVICE_KAFKA"}, {"original_string": "private static final String AMBARI_JSON_COMPONENT_KAFKA_BROKER = ComponentPropertyPattern.KAFKA_BROKER.name();", "modifier": "private static final", "type": "String", "declarator": "AMBARI_JSON_COMPONENT_KAFKA_BROKER = ComponentPropertyPattern.KAFKA_BROKER.name()", "var_name": "AMBARI_JSON_COMPONENT_KAFKA_BROKER"}, {"original_string": "private static final String AMBARI_JSON_CONFIG_KAFKA_BROKER = ServiceConfigurations.KAFKA.getConfNames()[0];", "modifier": "private static final", "type": "String", "declarator": "AMBARI_JSON_CONFIG_KAFKA_BROKER = ServiceConfigurations.KAFKA.getConfNames()[0]", "var_name": "AMBARI_JSON_CONFIG_KAFKA_BROKER"}, {"original_string": "private static final String AMBARI_JSON_CONFIG_KAFKA_ENV = ServiceConfigurations.KAFKA.getConfNames()[1];", "modifier": "private static final", "type": "String", "declarator": "AMBARI_JSON_CONFIG_KAFKA_ENV = ServiceConfigurations.KAFKA.getConfNames()[1]", "var_name": "AMBARI_JSON_CONFIG_KAFKA_ENV"}, {"original_string": "static final String ZK_RELATIVE_PATH_KAFKA_TOPICS = \"brokers/topics\";", "modifier": "static final", "type": "String", "declarator": "ZK_RELATIVE_PATH_KAFKA_TOPICS = \"brokers/topics\"", "var_name": "ZK_RELATIVE_PATH_KAFKA_TOPICS"}, {"original_string": "static final String ZK_RELATIVE_PATH_KAFKA_BROKERS_IDS = \"brokers/ids\";", "modifier": "static final", "type": "String", "declarator": "ZK_RELATIVE_PATH_KAFKA_BROKERS_IDS = \"brokers/ids\"", "var_name": "ZK_RELATIVE_PATH_KAFKA_BROKERS_IDS"}, {"original_string": "static final String PROP_KAFKA_ZK_CONNECT = \"zookeeper.connect\";", "modifier": "static final", "type": "String", "declarator": "PROP_KAFKA_ZK_CONNECT = \"zookeeper.connect\"", "var_name": "PROP_KAFKA_ZK_CONNECT"}, {"original_string": "private static final String SERVICE_NAME_KAFKA = \"kafka\";", "modifier": "private static final", "type": "String", "declarator": "SERVICE_NAME_KAFKA = \"kafka\"", "var_name": "SERVICE_NAME_KAFKA"}, {"original_string": "private final ZookeeperClient zkCli;", "modifier": "private final", "type": "ZookeeperClient", "declarator": "zkCli", "var_name": "zkCli"}, {"original_string": "private final KafkaZkConnection kafkaZkConnection;", "modifier": "private final", "type": "KafkaZkConnection", "declarator": "kafkaZkConnection", "var_name": "kafkaZkConnection"}, {"original_string": "private final SecurityContext securityContext;", "modifier": "private final", "type": "SecurityContext", "declarator": "securityContext", "var_name": "securityContext"}, {"original_string": "private final Component kafkaBroker;", "modifier": "private final", "type": "Component", "declarator": "kafkaBroker", "var_name": "kafkaBroker"}, {"original_string": "private final Collection<ComponentProcess> kafkaBrokerProcesses;", "modifier": "private final", "type": "Collection<ComponentProcess>", "declarator": "kafkaBrokerProcesses", "var_name": "kafkaBrokerProcesses"}, {"original_string": "private final ServiceConfiguration brokerConfig;", "modifier": "private final", "type": "ServiceConfiguration", "declarator": "brokerConfig", "var_name": "brokerConfig"}, {"original_string": "private final ServiceConfiguration kafkaEnvConfig;", "modifier": "private final", "type": "ServiceConfiguration", "declarator": "kafkaEnvConfig", "var_name": "kafkaEnvConfig"}], "methods": [{"identifier": "KafkaMetadataService", "parameters": "(ZookeeperClient zkCli, KafkaZkConnection kafkaZkConnection,\n                         SecurityContext securityContext, Component kafkaBroker, Collection<ComponentProcess> kafkaBrokerProcesses,\n                         ServiceConfiguration brokerConfig, ServiceConfiguration kafkaEnvConfig)", "modifiers": "", "return": "", "signature": " KafkaMetadataService(ZookeeperClient zkCli, KafkaZkConnection kafkaZkConnection,\n                         SecurityContext securityContext, Component kafkaBroker, Collection<ComponentProcess> kafkaBrokerProcesses,\n                         ServiceConfiguration brokerConfig, ServiceConfiguration kafkaEnvConfig)", "full_signature": "  KafkaMetadataService(ZookeeperClient zkCli, KafkaZkConnection kafkaZkConnection,\n                         SecurityContext securityContext, Component kafkaBroker, Collection<ComponentProcess> kafkaBrokerProcesses,\n                         ServiceConfiguration brokerConfig, ServiceConfiguration kafkaEnvConfig)", "class_method_signature": "KafkaMetadataService.KafkaMetadataService(ZookeeperClient zkCli, KafkaZkConnection kafkaZkConnection,\n                         SecurityContext securityContext, Component kafkaBroker, Collection<ComponentProcess> kafkaBrokerProcesses,\n                         ServiceConfiguration brokerConfig, ServiceConfiguration kafkaEnvConfig)", "testcase": false, "constructor": true}, {"identifier": "newInstance", "parameters": "(\n            EnvironmentService environmentService, Long clusterId, SecurityContext securityContext)", "modifiers": "public static", "return": "KafkaMetadataService", "signature": "KafkaMetadataService newInstance(\n            EnvironmentService environmentService, Long clusterId, SecurityContext securityContext)", "full_signature": "public static KafkaMetadataService newInstance(\n            EnvironmentService environmentService, Long clusterId, SecurityContext securityContext)", "class_method_signature": "KafkaMetadataService.newInstance(\n            EnvironmentService environmentService, Long clusterId, SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "getBrokerHostPortFromStreamsJson", "parameters": "()", "modifiers": "public", "return": "KafkaBrokersInfo<HostPort>", "signature": "KafkaBrokersInfo<HostPort> getBrokerHostPortFromStreamsJson()", "full_signature": "public KafkaBrokersInfo<HostPort> getBrokerHostPortFromStreamsJson()", "class_method_signature": "KafkaMetadataService.getBrokerHostPortFromStreamsJson()", "testcase": false, "constructor": false}, {"identifier": "getBrokerInfoFromZk", "parameters": "()", "modifiers": "public", "return": "KafkaBrokersInfo<String>", "signature": "KafkaBrokersInfo<String> getBrokerInfoFromZk()", "full_signature": "public KafkaBrokersInfo<String> getBrokerInfoFromZk()", "class_method_signature": "KafkaMetadataService.getBrokerInfoFromZk()", "testcase": false, "constructor": false}, {"identifier": "getBrokerIdsFromZk", "parameters": "()", "modifiers": "public", "return": "KafkaBrokersInfo<KafkaBrokersInfo.BrokerId>", "signature": "KafkaBrokersInfo<KafkaBrokersInfo.BrokerId> getBrokerIdsFromZk()", "full_signature": "public KafkaBrokersInfo<KafkaBrokersInfo.BrokerId> getBrokerIdsFromZk()", "class_method_signature": "KafkaMetadataService.getBrokerIdsFromZk()", "testcase": false, "constructor": false}, {"identifier": "getTopicsFromZk", "parameters": "()", "modifiers": "public", "return": "KafkaTopics", "signature": "KafkaTopics getTopicsFromZk()", "full_signature": "public KafkaTopics getTopicsFromZk()", "class_method_signature": "KafkaMetadataService.getTopicsFromZk()", "testcase": false, "constructor": false}, {"identifier": "getKafkaBrokerListeners", "parameters": "()", "modifiers": "public", "return": "KafkaBrokerListeners", "signature": "KafkaBrokerListeners getKafkaBrokerListeners()", "full_signature": "public KafkaBrokerListeners getKafkaBrokerListeners()", "class_method_signature": "KafkaMetadataService.getKafkaBrokerListeners()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "KafkaMetadataService.close()", "testcase": false, "constructor": false}, {"identifier": "getKafkaZkConnection", "parameters": "()", "modifiers": "public", "return": "KafkaZkConnection", "signature": "KafkaZkConnection getKafkaZkConnection()", "full_signature": "public KafkaZkConnection getKafkaZkConnection()", "class_method_signature": "KafkaMetadataService.getKafkaZkConnection()", "testcase": false, "constructor": false}, {"identifier": "getKeytabs", "parameters": "()", "modifiers": "public", "return": "Keytabs", "signature": "Keytabs getKeytabs()", "full_signature": "public Keytabs getKeytabs()", "class_method_signature": "KafkaMetadataService.getKeytabs()", "testcase": false, "constructor": false}, {"identifier": "getPrincipals", "parameters": "()", "modifiers": "public", "return": "Principals", "signature": "Principals getPrincipals()", "full_signature": "public Principals getPrincipals()", "class_method_signature": "KafkaMetadataService.getPrincipals()", "testcase": false, "constructor": false}, {"identifier": "getServiceToComponent", "parameters": "()", "modifiers": "private", "return": "Map<String, Pair<Component, Collection<ComponentProcess>>>", "signature": "Map<String, Pair<Component, Collection<ComponentProcess>>> getServiceToComponent()", "full_signature": "private Map<String, Pair<Component, Collection<ComponentProcess>>> getServiceToComponent()", "class_method_signature": "KafkaMetadataService.getServiceToComponent()", "testcase": false, "constructor": false}, {"identifier": "getSecurity", "parameters": "()", "modifiers": "public", "return": "Security", "signature": "Security getSecurity()", "full_signature": "public Security getSecurity()", "class_method_signature": "KafkaMetadataService.getSecurity()", "testcase": false, "constructor": false}, {"identifier": "getKafkaServiceName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getKafkaServiceName()", "full_signature": "public String getKafkaServiceName()", "class_method_signature": "KafkaMetadataService.getKafkaServiceName()", "testcase": false, "constructor": false}, {"identifier": "getZkStringRaw", "parameters": "(EnvironmentService environmentService, Long clusterId, String configName)", "modifiers": "private static", "return": "String", "signature": "String getZkStringRaw(EnvironmentService environmentService, Long clusterId, String configName)", "full_signature": "private static String getZkStringRaw(EnvironmentService environmentService, Long clusterId, String configName)", "class_method_signature": "KafkaMetadataService.getZkStringRaw(EnvironmentService environmentService, Long clusterId, String configName)", "testcase": false, "constructor": false}, {"identifier": "getServiceConfig", "parameters": "(EnvironmentService environmentService, Long clusterId, String configName)", "modifiers": "private static", "return": "ServiceConfiguration", "signature": "ServiceConfiguration getServiceConfig(EnvironmentService environmentService, Long clusterId, String configName)", "full_signature": "private static ServiceConfiguration getServiceConfig(EnvironmentService environmentService, Long clusterId, String configName)", "class_method_signature": "KafkaMetadataService.getServiceConfig(EnvironmentService environmentService, Long clusterId, String configName)", "testcase": false, "constructor": false}, {"identifier": "getKafkaBrokerComponent", "parameters": "(EnvironmentService environmentService, Long clusterId)", "modifiers": "private static", "return": "Component", "signature": "Component getKafkaBrokerComponent(EnvironmentService environmentService, Long clusterId)", "full_signature": "private static Component getKafkaBrokerComponent(EnvironmentService environmentService, Long clusterId)", "class_method_signature": "KafkaMetadataService.getKafkaBrokerComponent(EnvironmentService environmentService, Long clusterId)", "testcase": false, "constructor": false}, {"identifier": "getKafkaBrokers", "parameters": "(EnvironmentService environmentService, Long clusterId)", "modifiers": "private static", "return": "Collection<ComponentProcess>", "signature": "Collection<ComponentProcess> getKafkaBrokers(EnvironmentService environmentService, Long clusterId)", "full_signature": "private static Collection<ComponentProcess> getKafkaBrokers(EnvironmentService environmentService, Long clusterId)", "class_method_signature": "KafkaMetadataService.getKafkaBrokers(EnvironmentService environmentService, Long clusterId)", "testcase": false, "constructor": false}, {"identifier": "getKafkaServiceId", "parameters": "(EnvironmentService environmentService, Long clusterId)", "modifiers": "private static", "return": "Long", "signature": "Long getKafkaServiceId(EnvironmentService environmentService, Long clusterId)", "full_signature": "private static Long getKafkaServiceId(EnvironmentService environmentService, Long clusterId)", "class_method_signature": "KafkaMetadataService.getKafkaServiceId(EnvironmentService environmentService, Long clusterId)", "testcase": false, "constructor": false}], "file": "streams/cluster/src/main/java/com/hortonworks/streamline/streams/cluster/service/metadata/KafkaMetadataService.java"}, "focal_method": {"identifier": "newInstance", "parameters": "(\n            EnvironmentService environmentService, Long clusterId, SecurityContext securityContext)", "modifiers": "public static", "return": "KafkaMetadataService", "body": "public static KafkaMetadataService newInstance(\n            EnvironmentService environmentService, Long clusterId, SecurityContext securityContext)\n                throws ServiceConfigurationNotFoundException, IOException, ServiceNotFoundException, ServiceComponentNotFoundException {\n\n        final KafkaZkConnection kafkaZkConnection = KafkaZkConnection.newInstance(\n                getZkStringRaw(environmentService, clusterId, AMBARI_JSON_CONFIG_KAFKA_BROKER));\n        final ZookeeperClient zkCli = ZookeeperClient.newInstance(kafkaZkConnection);\n        zkCli.start();\n\n        return new KafkaMetadataService(zkCli, kafkaZkConnection, securityContext,\n                getKafkaBrokerComponent(environmentService, clusterId),\n                getKafkaBrokers(environmentService, clusterId),\n                getServiceConfig(environmentService, clusterId, AMBARI_JSON_CONFIG_KAFKA_BROKER),\n                getServiceConfig(environmentService, clusterId, AMBARI_JSON_CONFIG_KAFKA_ENV));\n    }", "signature": "KafkaMetadataService newInstance(\n            EnvironmentService environmentService, Long clusterId, SecurityContext securityContext)", "full_signature": "public static KafkaMetadataService newInstance(\n            EnvironmentService environmentService, Long clusterId, SecurityContext securityContext)", "class_method_signature": "KafkaMetadataService.newInstance(\n            EnvironmentService environmentService, Long clusterId, SecurityContext securityContext)", "testcase": false, "constructor": false, "invocations": ["newInstance", "getZkStringRaw", "newInstance", "start", "getKafkaBrokerComponent", "getKafkaBrokers", "getServiceConfig", "getServiceConfig"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}