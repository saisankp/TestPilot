{"test_class": {"identifier": "HeadersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Headers headers;", "modifier": "private", "type": "Headers", "declarator": "headers", "var_name": "headers"}], "file": "http/src/test/java/ro/polak/http/HeadersTest.java"}, "test_case": {"identifier": "shouldReturnNullValueForInexistentHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnNullValueForInexistentHeader() {\n        assertThat(headers.getHeader(\"Non-existent\"), is(nullValue()));\n    }", "signature": "void shouldReturnNullValueForInexistentHeader()", "full_signature": "@Test public void shouldReturnNullValueForInexistentHeader()", "class_method_signature": "HeadersTest.shouldReturnNullValueForInexistentHeader()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getHeader", "is", "nullValue"]}, "focal_class": {"identifier": "Headers", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String HEADER_ALLOW = \"Allow\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_ALLOW = \"Allow\"", "var_name": "HEADER_ALLOW"}, {"original_string": "public static final String HEADER_SERVER = \"Server\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_SERVER = \"Server\"", "var_name": "HEADER_SERVER"}, {"original_string": "public static final String HEADER_CONTENT_DISPOSITION = \"Content-Disposition\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_CONTENT_DISPOSITION = \"Content-Disposition\"", "var_name": "HEADER_CONTENT_DISPOSITION"}, {"original_string": "public static final String HEADER_LOCATION = \"Location\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_LOCATION = \"Location\"", "var_name": "HEADER_LOCATION"}, {"original_string": "public static final String HEADER_CONTENT_LENGTH = \"Content-Length\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_CONTENT_LENGTH = \"Content-Length\"", "var_name": "HEADER_CONTENT_LENGTH"}, {"original_string": "public static final String HEADER_CONTENT_TYPE = \"Content-Type\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_CONTENT_TYPE = \"Content-Type\"", "var_name": "HEADER_CONTENT_TYPE"}, {"original_string": "public static final String HEADER_CONNECTION = \"Connection\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_CONNECTION = \"Connection\"", "var_name": "HEADER_CONNECTION"}, {"original_string": "public static final String HEADER_SET_COOKIE = \"Set-Cookie\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_SET_COOKIE = \"Set-Cookie\"", "var_name": "HEADER_SET_COOKIE"}, {"original_string": "public static final String HEADER_CACHE_CONTROL = \"Cache-Control\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_CACHE_CONTROL = \"Cache-Control\"", "var_name": "HEADER_CACHE_CONTROL"}, {"original_string": "public static final String HEADER_ACCEPT_LANGUAGE = \"Accept-Language\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_ACCEPT_LANGUAGE = \"Accept-Language\"", "var_name": "HEADER_ACCEPT_LANGUAGE"}, {"original_string": "public static final String HEADER_PRAGMA = \"Pragma\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_PRAGMA = \"Pragma\"", "var_name": "HEADER_PRAGMA"}, {"original_string": "public static final String HEADER_COOKIE = \"Cookie\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_COOKIE = \"Cookie\"", "var_name": "HEADER_COOKIE"}, {"original_string": "public static final String HEADER_TRANSFER_ENCODING = \"Transfer-Encoding\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_TRANSFER_ENCODING = \"Transfer-Encoding\"", "var_name": "HEADER_TRANSFER_ENCODING"}, {"original_string": "public static final String HEADER_HOST = \"Host\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_HOST = \"Host\"", "var_name": "HEADER_HOST"}, {"original_string": "public static final String HEADER_RANGE = \"Range\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_RANGE = \"Range\"", "var_name": "HEADER_RANGE"}, {"original_string": "public static final String HEADER_ACCEPT_RANGES = \"Accept-Ranges\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_ACCEPT_RANGES = \"Accept-Ranges\"", "var_name": "HEADER_ACCEPT_RANGES"}, {"original_string": "public static final String HEADER_CONTENT_RANGE = \"Content-Range\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_CONTENT_RANGE = \"Content-Range\"", "var_name": "HEADER_CONTENT_RANGE"}, {"original_string": "private final Map<String, String> headers = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);", "modifier": "private final", "type": "Map<String, String>", "declarator": "headers = new TreeMap<>(String.CASE_INSENSITIVE_ORDER)", "var_name": "headers"}], "methods": [{"identifier": "setHeader", "parameters": "(final String name, final String value)", "modifiers": "public", "return": "void", "signature": "void setHeader(final String name, final String value)", "full_signature": "public void setHeader(final String name, final String value)", "class_method_signature": "Headers.setHeader(final String name, final String value)", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "(final String name)", "modifiers": "public", "return": "String", "signature": "String getHeader(final String name)", "full_signature": "public String getHeader(final String name)", "class_method_signature": "Headers.getHeader(final String name)", "testcase": false, "constructor": false}, {"identifier": "keySet", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> keySet()", "full_signature": "public Set<String> keySet()", "class_method_signature": "Headers.keySet()", "testcase": false, "constructor": false}, {"identifier": "containsHeader", "parameters": "(final String name)", "modifiers": "public", "return": "boolean", "signature": "boolean containsHeader(final String name)", "full_signature": "public boolean containsHeader(final String name)", "class_method_signature": "Headers.containsHeader(final String name)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/Headers.java"}, "focal_method": {"identifier": "getHeader", "parameters": "(final String name)", "modifiers": "public", "return": "String", "body": "public String getHeader(final String name) {\n        return headers.get(name);\n    }", "signature": "String getHeader(final String name)", "full_signature": "public String getHeader(final String name)", "class_method_signature": "Headers.getHeader(final String name)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}