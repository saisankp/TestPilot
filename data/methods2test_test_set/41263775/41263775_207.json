{"test_class": {"identifier": "SQLiteIndexTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TABLE_NAME = \"cqtbl_features\";", "modifier": "private static final", "type": "String", "declarator": "TABLE_NAME = \"cqtbl_features\"", "var_name": "TABLE_NAME"}, {"original_string": "private static final String INDEX_NAME = \"cqidx_features_value\";", "modifier": "private static final", "type": "String", "declarator": "INDEX_NAME = \"cqidx_features_value\"", "var_name": "INDEX_NAME"}, {"original_string": "public static final SimpleAttribute<Car, Integer> OBJECT_TO_ID = Car.CAR_ID;", "modifier": "public static final", "type": "SimpleAttribute<Car, Integer>", "declarator": "OBJECT_TO_ID = Car.CAR_ID", "var_name": "OBJECT_TO_ID"}, {"original_string": "public static final SimpleAttribute<Integer, Car> ID_TO_OBJECT = new SimpleAttribute<Integer, Car>(\"carFromId\") {\n        public Car getValue(Integer carId, QueryOptions queryOptions) { return null; }\n    };", "modifier": "public static final", "type": "SimpleAttribute<Integer, Car>", "declarator": "ID_TO_OBJECT = new SimpleAttribute<Integer, Car>(\"carFromId\") {\n        public Car getValue(Integer carId, QueryOptions queryOptions) { return null; }\n    }", "var_name": "ID_TO_OBJECT"}, {"original_string": "public static List<Car> data = Arrays.asList(\n            new Car(1, \"Ford\", \"Focus\", Car.Color.BLUE, 5, 9000.50, Arrays.asList(\"abs\", \"gps\"), Collections.emptyList()),\n            new Car(2, \"Honda\", \"Civic\", Car.Color.RED, 5, 5000.00, Arrays.asList(\"airbags\"), Collections.emptyList()),\n            new Car(3, \"Toyota\", \"Prius\", Car.Color.BLACK, 3, 9700.00, Arrays.asList(\"abs\"), Collections.emptyList()),\n            new Car(4, \"Fiat\", \"Panda\", Car.Color.BLUE, 5, 5600.00, Collections.<String>emptyList(), Collections.emptyList()),\n            new Car(5, \"Fiat\", \"Punto\", Car.Color.BLUE, 5, 5600.00, Arrays.asList(\"gps\"), Collections.emptyList())\n    );", "modifier": "public static", "type": "List<Car>", "declarator": "data = Arrays.asList(\n            new Car(1, \"Ford\", \"Focus\", Car.Color.BLUE, 5, 9000.50, Arrays.asList(\"abs\", \"gps\"), Collections.emptyList()),\n            new Car(2, \"Honda\", \"Civic\", Car.Color.RED, 5, 5000.00, Arrays.asList(\"airbags\"), Collections.emptyList()),\n            new Car(3, \"Toyota\", \"Prius\", Car.Color.BLACK, 3, 9700.00, Arrays.asList(\"abs\"), Collections.emptyList()),\n            new Car(4, \"Fiat\", \"Panda\", Car.Color.BLUE, 5, 5600.00, Collections.<String>emptyList(), Collections.emptyList()),\n            new Car(5, \"Fiat\", \"Punto\", Car.Color.BLUE, 5, 5600.00, Arrays.asList(\"gps\"), Collections.emptyList())\n    )", "var_name": "data"}, {"original_string": "@Rule\n    public TemporaryDatabase.TemporaryInMemoryDatabase temporaryInMemoryDatabase = new TemporaryDatabase.TemporaryInMemoryDatabase();", "modifier": "@Rule\n    public", "type": "TemporaryDatabase.TemporaryInMemoryDatabase", "declarator": "temporaryInMemoryDatabase = new TemporaryDatabase.TemporaryInMemoryDatabase()", "var_name": "temporaryInMemoryDatabase"}], "file": "code/src/test/java/com/googlecode/cqengine/index/sqlite/SQLiteIndexTest.java"}, "test_case": {"identifier": "testNewResultSet_FilterQuery_GetRetrievalCost", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNewResultSet_FilterQuery_GetRetrievalCost(){\n\n        // Mocks\n        FilterQuery<Car, String> filterQuery = mockFilterQuery();\n        ConnectionManager connectionManager = mock(ConnectionManager.class);\n\n        // Iterator\n        ResultSet<Car> carsWithAbs = new SQLiteIndex<String, Car, Integer>(\n                Car.FEATURES,\n                OBJECT_TO_ID,\n                ID_TO_OBJECT,\n                \"\")\n\n                .retrieve(filterQuery, createQueryOptions(connectionManager));\n\n        assertEquals(carsWithAbs.getRetrievalCost(), SQLiteIndex.INDEX_RETRIEVAL_COST_FILTERING);\n\n    }", "signature": "void testNewResultSet_FilterQuery_GetRetrievalCost()", "full_signature": "@Test public void testNewResultSet_FilterQuery_GetRetrievalCost()", "class_method_signature": "SQLiteIndexTest.testNewResultSet_FilterQuery_GetRetrievalCost()", "testcase": true, "constructor": false, "invocations": ["mockFilterQuery", "mock", "retrieve", "createQueryOptions", "assertEquals", "getRetrievalCost"]}, "focal_class": {"identifier": "SQLiteIndex", "superclass": "extends AbstractAttributeIndex<A, O>", "interfaces": "implements SortedKeyStatisticsAttributeIndex<A, O>, NonHeapTypeIndex", "fields": [{"original_string": "static final int INDEX_RETRIEVAL_COST = 80;", "modifier": "static final", "type": "int", "declarator": "INDEX_RETRIEVAL_COST = 80", "var_name": "INDEX_RETRIEVAL_COST"}, {"original_string": "static final int INDEX_RETRIEVAL_COST_FILTERING = INDEX_RETRIEVAL_COST + 1;", "modifier": "static final", "type": "int", "declarator": "INDEX_RETRIEVAL_COST_FILTERING = INDEX_RETRIEVAL_COST + 1", "var_name": "INDEX_RETRIEVAL_COST_FILTERING"}, {"original_string": "static final boolean FORCE_REINIT_OF_PREEXISTING_INDEXES = Boolean.getBoolean(\"cqengine.reinit.preexisting.indexes\");", "modifier": "static final", "type": "boolean", "declarator": "FORCE_REINIT_OF_PREEXISTING_INDEXES = Boolean.getBoolean(\"cqengine.reinit.preexisting.indexes\")", "var_name": "FORCE_REINIT_OF_PREEXISTING_INDEXES"}, {"original_string": "final String tableName;", "modifier": "final", "type": "String", "declarator": "tableName", "var_name": "tableName"}, {"original_string": "final SimpleAttribute<O, K> primaryKeyAttribute;", "modifier": "final", "type": "SimpleAttribute<O, K>", "declarator": "primaryKeyAttribute", "var_name": "primaryKeyAttribute"}, {"original_string": "final SimpleAttribute<K, O> foreignKeyAttribute;", "modifier": "final", "type": "SimpleAttribute<K, O>", "declarator": "foreignKeyAttribute", "var_name": "foreignKeyAttribute"}, {"original_string": "SQLiteConfig.SynchronousMode pragmaSynchronous;", "modifier": "", "type": "SQLiteConfig.SynchronousMode", "declarator": "pragmaSynchronous", "var_name": "pragmaSynchronous"}, {"original_string": "SQLiteConfig.JournalMode pragmaJournalMode;", "modifier": "", "type": "SQLiteConfig.JournalMode", "declarator": "pragmaJournalMode", "var_name": "pragmaJournalMode"}, {"original_string": "boolean canModifySyncAndJournaling;", "modifier": "", "type": "boolean", "declarator": "canModifySyncAndJournaling", "var_name": "canModifySyncAndJournaling"}], "methods": [{"identifier": "SQLiteIndex", "parameters": "(final Attribute<O, A> attribute,\n                       final SimpleAttribute<O, K> primaryKeyAttribute,\n                       final SimpleAttribute<K, O> foreignKeyAttribute,\n                       final String tableNameSuffix)", "modifiers": "public", "return": "", "signature": " SQLiteIndex(final Attribute<O, A> attribute,\n                       final SimpleAttribute<O, K> primaryKeyAttribute,\n                       final SimpleAttribute<K, O> foreignKeyAttribute,\n                       final String tableNameSuffix)", "full_signature": "public  SQLiteIndex(final Attribute<O, A> attribute,\n                       final SimpleAttribute<O, K> primaryKeyAttribute,\n                       final SimpleAttribute<K, O> foreignKeyAttribute,\n                       final String tableNameSuffix)", "class_method_signature": "SQLiteIndex.SQLiteIndex(final Attribute<O, A> attribute,\n                       final SimpleAttribute<O, K> primaryKeyAttribute,\n                       final SimpleAttribute<K, O> foreignKeyAttribute,\n                       final String tableNameSuffix)", "testcase": false, "constructor": true}, {"identifier": "supportsQuery", "parameters": "(Query<O> query, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsQuery(Query<O> query, QueryOptions queryOptions)", "full_signature": "@Override public boolean supportsQuery(Query<O> query, QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.supportsQuery(Query<O> query, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "isMutable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMutable()", "full_signature": "@Override public boolean isMutable()", "class_method_signature": "SQLiteIndex.isMutable()", "testcase": false, "constructor": false}, {"identifier": "isQuantized", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isQuantized()", "full_signature": "@Override public boolean isQuantized()", "class_method_signature": "SQLiteIndex.isQuantized()", "testcase": false, "constructor": false}, {"identifier": "getEffectiveIndex", "parameters": "()", "modifiers": "@Override public", "return": "Index<O>", "signature": "Index<O> getEffectiveIndex()", "full_signature": "@Override public Index<O> getEffectiveIndex()", "class_method_signature": "SQLiteIndex.getEffectiveIndex()", "testcase": false, "constructor": false}, {"identifier": "retrieve", "parameters": "(final Query<O> query, final QueryOptions queryOptions)", "modifiers": "@Override public", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieve(final Query<O> query, final QueryOptions queryOptions)", "full_signature": "@Override public ResultSet<O> retrieve(final Query<O> query, final QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.retrieve(final Query<O> query, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(final ObjectSet<O> objectSet, final QueryOptions queryOptions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAll(final ObjectSet<O> objectSet, final QueryOptions queryOptions)", "full_signature": "@Override public boolean addAll(final ObjectSet<O> objectSet, final QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.addAll(final ObjectSet<O> objectSet, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "doAddAll", "parameters": "(final ObjectSet<O> objectSet, final QueryOptions queryOptions, boolean isInit)", "modifiers": "", "return": "boolean", "signature": "boolean doAddAll(final ObjectSet<O> objectSet, final QueryOptions queryOptions, boolean isInit)", "full_signature": " boolean doAddAll(final ObjectSet<O> objectSet, final QueryOptions queryOptions, boolean isInit)", "class_method_signature": "SQLiteIndex.doAddAll(final ObjectSet<O> objectSet, final QueryOptions queryOptions, boolean isInit)", "testcase": false, "constructor": false}, {"identifier": "rowIterable", "parameters": "(final Iterable<O> objects,\n                                                      final SimpleAttribute<O, K> primaryKeyAttribute,\n                                                      final Attribute<O, A> indexAttribute,\n                                                      final QueryOptions queryOptions)", "modifiers": "static", "return": "Iterable<Row< K, A>>", "signature": "Iterable<Row< K, A>> rowIterable(final Iterable<O> objects,\n                                                      final SimpleAttribute<O, K> primaryKeyAttribute,\n                                                      final Attribute<O, A> indexAttribute,\n                                                      final QueryOptions queryOptions)", "full_signature": "static Iterable<Row< K, A>> rowIterable(final Iterable<O> objects,\n                                                      final SimpleAttribute<O, K> primaryKeyAttribute,\n                                                      final Attribute<O, A> indexAttribute,\n                                                      final QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.rowIterable(final Iterable<O> objects,\n                                                      final SimpleAttribute<O, K> primaryKeyAttribute,\n                                                      final Attribute<O, A> indexAttribute,\n                                                      final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(final ObjectSet<O> objectSet, final QueryOptions queryOptions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAll(final ObjectSet<O> objectSet, final QueryOptions queryOptions)", "full_signature": "@Override public boolean removeAll(final ObjectSet<O> objectSet, final QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.removeAll(final ObjectSet<O> objectSet, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "objectKeyIterable", "parameters": "(final Iterable<O> objects,\n                                                final SimpleAttribute<O, K> primaryKeyAttribute,\n                                                final QueryOptions queryOptions)", "modifiers": "static", "return": "Iterable<K>", "signature": "Iterable<K> objectKeyIterable(final Iterable<O> objects,\n                                                final SimpleAttribute<O, K> primaryKeyAttribute,\n                                                final QueryOptions queryOptions)", "full_signature": "static Iterable<K> objectKeyIterable(final Iterable<O> objects,\n                                                final SimpleAttribute<O, K> primaryKeyAttribute,\n                                                final QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.objectKeyIterable(final Iterable<O> objects,\n                                                final SimpleAttribute<O, K> primaryKeyAttribute,\n                                                final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void clear(QueryOptions queryOptions)", "full_signature": "@Override public void clear(QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.clear(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(ObjectStore<O> objectStore, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void init(ObjectStore<O> objectStore, QueryOptions queryOptions)", "full_signature": "@Override public void init(ObjectStore<O> objectStore, QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.init(ObjectStore<O> objectStore, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void destroy(QueryOptions queryOptions)", "full_signature": "@Override public void destroy(QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.destroy(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "createTableIndexIfNeeded", "parameters": "(final Connection connection)", "modifiers": "", "return": "void", "signature": "void createTableIndexIfNeeded(final Connection connection)", "full_signature": " void createTableIndexIfNeeded(final Connection connection)", "class_method_signature": "SQLiteIndex.createTableIndexIfNeeded(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getConnectionManager", "parameters": "(final QueryOptions queryOptions)", "modifiers": "", "return": "ConnectionManager", "signature": "ConnectionManager getConnectionManager(final QueryOptions queryOptions)", "full_signature": " ConnectionManager getConnectionManager(final QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.getConnectionManager(final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getDistinctKeys", "parameters": "(final QueryOptions queryOptions)", "modifiers": "@Override public", "return": "CloseableIterable<A>", "signature": "CloseableIterable<A> getDistinctKeys(final QueryOptions queryOptions)", "full_signature": "@Override public CloseableIterable<A> getDistinctKeys(final QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.getDistinctKeys(final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getDistinctKeys", "parameters": "(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, final QueryOptions queryOptions)", "modifiers": "@Override public", "return": "CloseableIterable<A>", "signature": "CloseableIterable<A> getDistinctKeys(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, final QueryOptions queryOptions)", "full_signature": "@Override public CloseableIterable<A> getDistinctKeys(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, final QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.getDistinctKeys(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getDistinctKeysDescending", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "CloseableIterable<A>", "signature": "CloseableIterable<A> getDistinctKeysDescending(QueryOptions queryOptions)", "full_signature": "@Override public CloseableIterable<A> getDistinctKeysDescending(QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.getDistinctKeysDescending(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getDistinctKeysDescending", "parameters": "(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "CloseableIterable<A>", "signature": "CloseableIterable<A> getDistinctKeysDescending(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, QueryOptions queryOptions)", "full_signature": "@Override public CloseableIterable<A> getDistinctKeysDescending(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.getDistinctKeysDescending(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getCountOfDistinctKeys", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getCountOfDistinctKeys(QueryOptions queryOptions)", "full_signature": "@Override public Integer getCountOfDistinctKeys(QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.getCountOfDistinctKeys(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getStatisticsForDistinctKeysDescending", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "CloseableIterable<KeyStatistics<A>>", "signature": "CloseableIterable<KeyStatistics<A>> getStatisticsForDistinctKeysDescending(QueryOptions queryOptions)", "full_signature": "@Override public CloseableIterable<KeyStatistics<A>> getStatisticsForDistinctKeysDescending(QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.getStatisticsForDistinctKeysDescending(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getStatisticsForDistinctKeys", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "CloseableIterable<KeyStatistics<A>>", "signature": "CloseableIterable<KeyStatistics<A>> getStatisticsForDistinctKeys(QueryOptions queryOptions)", "full_signature": "@Override public CloseableIterable<KeyStatistics<A>> getStatisticsForDistinctKeys(QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.getStatisticsForDistinctKeys(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getStatisticsForDistinctKeys", "parameters": "(final QueryOptions queryOptions, final boolean sortByKeyDescending)", "modifiers": "", "return": "CloseableIterable<KeyStatistics<A>>", "signature": "CloseableIterable<KeyStatistics<A>> getStatisticsForDistinctKeys(final QueryOptions queryOptions, final boolean sortByKeyDescending)", "full_signature": " CloseableIterable<KeyStatistics<A>> getStatisticsForDistinctKeys(final QueryOptions queryOptions, final boolean sortByKeyDescending)", "class_method_signature": "SQLiteIndex.getStatisticsForDistinctKeys(final QueryOptions queryOptions, final boolean sortByKeyDescending)", "testcase": false, "constructor": false}, {"identifier": "getDistinctKeysInRange", "parameters": "(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, final boolean descending, final QueryOptions queryOptions)", "modifiers": "", "return": "CloseableIterable<A>", "signature": "CloseableIterable<A> getDistinctKeysInRange(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, final boolean descending, final QueryOptions queryOptions)", "full_signature": " CloseableIterable<A> getDistinctKeysInRange(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, final boolean descending, final QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.getDistinctKeysInRange(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, final boolean descending, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getKeysAndValues", "parameters": "(final QueryOptions queryOptions)", "modifiers": "@Override public", "return": "CloseableIterable<KeyValue<A, O>>", "signature": "CloseableIterable<KeyValue<A, O>> getKeysAndValues(final QueryOptions queryOptions)", "full_signature": "@Override public CloseableIterable<KeyValue<A, O>> getKeysAndValues(final QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.getKeysAndValues(final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getKeysAndValues", "parameters": "(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, final QueryOptions queryOptions)", "modifiers": "@Override public", "return": "CloseableIterable<KeyValue<A, O>>", "signature": "CloseableIterable<KeyValue<A, O>> getKeysAndValues(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, final QueryOptions queryOptions)", "full_signature": "@Override public CloseableIterable<KeyValue<A, O>> getKeysAndValues(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, final QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.getKeysAndValues(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getKeysAndValuesDescending", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "CloseableIterable<KeyValue<A, O>>", "signature": "CloseableIterable<KeyValue<A, O>> getKeysAndValuesDescending(QueryOptions queryOptions)", "full_signature": "@Override public CloseableIterable<KeyValue<A, O>> getKeysAndValuesDescending(QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.getKeysAndValuesDescending(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getKeysAndValuesDescending", "parameters": "(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "CloseableIterable<KeyValue<A, O>>", "signature": "CloseableIterable<KeyValue<A, O>> getKeysAndValuesDescending(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, QueryOptions queryOptions)", "full_signature": "@Override public CloseableIterable<KeyValue<A, O>> getKeysAndValuesDescending(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.getKeysAndValuesDescending(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getKeysAndValuesInRange", "parameters": "(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, final boolean descending, final QueryOptions queryOptions)", "modifiers": "", "return": "CloseableIterable<KeyValue<A, O>>", "signature": "CloseableIterable<KeyValue<A, O>> getKeysAndValuesInRange(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, final boolean descending, final QueryOptions queryOptions)", "full_signature": " CloseableIterable<KeyValue<A, O>> getKeysAndValuesInRange(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, final boolean descending, final QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.getKeysAndValuesInRange(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive, final boolean descending, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getKeyRangeRestriction", "parameters": "(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive)", "modifiers": "", "return": "Query<O>", "signature": "Query<O> getKeyRangeRestriction(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive)", "full_signature": " Query<O> getKeyRangeRestriction(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive)", "class_method_signature": "SQLiteIndex.getKeyRangeRestriction(A lowerBound, boolean lowerInclusive, A upperBound, boolean upperInclusive)", "testcase": false, "constructor": false}, {"identifier": "getCountForKey", "parameters": "(A key, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getCountForKey(A key, QueryOptions queryOptions)", "full_signature": "@Override public Integer getCountForKey(A key, QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.getCountForKey(A key, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "SQLiteIndex.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SQLiteIndex.hashCode()", "testcase": false, "constructor": false}, {"identifier": "onAttribute", "parameters": "(final Attribute<O, A> attribute,\n                                                                                   final SimpleAttribute<O, K> objectKeyAttribute,\n                                                                                   final SimpleAttribute<K, O> foreignKeyAttribute)", "modifiers": "public static", "return": "SQLiteIndex<A, O, K>", "signature": "SQLiteIndex<A, O, K> onAttribute(final Attribute<O, A> attribute,\n                                                                                   final SimpleAttribute<O, K> objectKeyAttribute,\n                                                                                   final SimpleAttribute<K, O> foreignKeyAttribute)", "full_signature": "public static SQLiteIndex<A, O, K> onAttribute(final Attribute<O, A> attribute,\n                                                                                   final SimpleAttribute<O, K> objectKeyAttribute,\n                                                                                   final SimpleAttribute<K, O> foreignKeyAttribute)", "class_method_signature": "SQLiteIndex.onAttribute(final Attribute<O, A> attribute,\n                                                                                   final SimpleAttribute<O, K> objectKeyAttribute,\n                                                                                   final SimpleAttribute<K, O> foreignKeyAttribute)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/index/sqlite/SQLiteIndex.java"}, "focal_method": {"identifier": "retrieve", "parameters": "(final Query<O> query, final QueryOptions queryOptions)", "modifiers": "@Override public", "return": "ResultSet<O>", "body": "@Override\n    public ResultSet<O> retrieve(final Query<O> query, final QueryOptions queryOptions) {\n        final ConnectionManager connectionManager = getConnectionManager(queryOptions);\n\n        final CloseableResourceGroup closeableResourceGroup = CloseableRequestResources.forQueryOptions(queryOptions).addGroup();\n\n        if (query instanceof FilterQuery){\n            @SuppressWarnings(\"unchecked\")\n            final FilterQuery<O, A> filterQuery =  (FilterQuery<O, A>)query;\n            return new ResultSet<O>() {\n                @Override\n                public Iterator<O> iterator() {\n                    final Connection searchConnection = connectionManager.getConnection(SQLiteIndex.this, queryOptions);\n\n                    final java.sql.ResultSet searchResultSet = DBQueries.getAllIndexEntries(tableName, searchConnection);\n                    closeableResourceGroup.add(DBUtils.wrapAsCloseable(searchResultSet));\n\n                    return new LazyIterator<O>() {\n                        @Override\n                        protected O computeNext() {\n                            try {\n                                while (true) {\n\n                                    if (!searchResultSet.next()) {\n                                        close();\n                                        return endOfData();\n                                    }\n\n                                    final K objectKey = DBUtils.getValueFromResultSet(1, searchResultSet, primaryKeyAttribute.getAttributeType());\n                                    final A objectValue = DBUtils.getValueFromResultSet(2, searchResultSet, attribute.getAttributeType());\n                                    if (filterQuery.matchesValue(objectValue, queryOptions)) {\n                                        return foreignKeyAttribute.getValue(objectKey, queryOptions);\n                                    }\n                                }\n\n                            } catch (Exception e) {\n                                endOfData();\n                                close();\n                                throw new IllegalStateException(\"Unable to retrieve the ResultSet item.\", e);\n                            }\n                        }\n                    };\n\n                }\n\n                @Override\n                public boolean contains(O object) {\n\n                    Connection connection = null;\n                    java.sql.ResultSet searchResultSet = null;\n                    try {\n                        connection = connectionManager.getConnection(SQLiteIndex.this, queryOptions);\n                        searchResultSet = DBQueries.getIndexEntryByObjectKey(primaryKeyAttribute.getValue(object, queryOptions), tableName, connection);\n\n                        return lazyMatchingValuesIterable(searchResultSet).iterator().hasNext();\n\n                    }finally {\n                        DBUtils.closeQuietly(searchResultSet);\n                    }\n\n                }\n\n                @Override\n                public boolean matches(O object) {\n                    return query.matches(object, queryOptions);\n                }\n\n                @Override\n                public Query<O> getQuery() {\n                    return query;\n                }\n\n                @Override\n                public QueryOptions getQueryOptions() {\n                    return queryOptions;\n                }\n\n                @Override\n                public int getRetrievalCost() {\n                    return INDEX_RETRIEVAL_COST_FILTERING;// choose between indexes\n                }\n\n                @Override\n                public int getMergeCost() {\n                    //choose between branches.\n                    final Connection connection = connectionManager.getConnection(SQLiteIndex.this, queryOptions);\n                    return DBQueries.count(has(primaryKeyAttribute), tableName, connection); // no need to eliminate duplicates\n                }\n\n                @Override\n                public int size() {\n                    Connection connection = null;\n                    java.sql.ResultSet searchResultSet = null;\n                    try {\n                        connection = connectionManager.getConnection(SQLiteIndex.this, queryOptions);\n                        searchResultSet = DBQueries.getAllIndexEntries(tableName, connection);\n\n                        final Iterable<K> iterator = lazyMatchingValuesIterable(searchResultSet);\n                        return IteratorUtil.countElements(iterator);\n                    }finally {\n                        DBUtils.closeQuietly(searchResultSet);\n                    }\n                }\n\n                @Override\n                public void close() {\n                    closeableResourceGroup.close();\n                }\n\n                // Method to retrieve all the distinct keys for the matching values from the index. Used in count and contains\n                Iterable<K> lazyMatchingValuesIterable(final java.sql.ResultSet searchResultSet) {\n                    return new Iterable<K>() {\n                        @Override\n                        public Iterator<K> iterator() {\n                            return new LazyIterator<K>() {\n\n                                K currentKey = null;\n\n                                @Override\n                                protected K computeNext() {\n                                    try {\n                                        while (true) {\n\n                                            if (!searchResultSet.next()) {\n                                                close();\n                                                return endOfData();\n                                            }\n\n                                            final K objectKey = DBUtils.getValueFromResultSet(1, searchResultSet, primaryKeyAttribute.getAttributeType());\n                                            if (currentKey == null || !currentKey.equals(objectKey)) {\n                                                final A objectValue = DBUtils.getValueFromResultSet(2, searchResultSet, attribute.getAttributeType());\n                                                if (filterQuery.matchesValue(objectValue, queryOptions)) {\n                                                    currentKey = objectKey;\n                                                    return objectKey;\n                                                }\n                                            }\n                                        }\n\n                                    } catch (Exception e) {\n                                        endOfData();\n                                        close();\n                                        throw new IllegalStateException(\"Unable to retrieve the ResultSet item.\", e);\n                                    }\n                                }\n                            };\n                        }\n                    };\n                }\n\n            };\n        }else {\n\n            return new ResultSet<O>() {\n\n                @Override\n                public Iterator<O> iterator() {\n\n                    final Connection searchConnection = connectionManager.getConnection(SQLiteIndex.this, queryOptions);\n\n                    final java.sql.ResultSet searchResultSet = DBQueries.search(query, tableName, searchConnection); // eliminates duplicates\n                    closeableResourceGroup.add(DBUtils.wrapAsCloseable(searchResultSet));\n\n                    return new LazyIterator<O>() {\n                        @Override\n                        protected O computeNext() {\n                            try {\n                                if (!searchResultSet.next()) {\n                                    close();\n                                    return endOfData();\n                                }\n                                final K objectKey = DBUtils.getValueFromResultSet(1, searchResultSet, primaryKeyAttribute.getAttributeType());\n                                return foreignKeyAttribute.getValue(objectKey, queryOptions);\n                            } catch (Exception e) {\n                                endOfData();\n                                close();\n                                throw new IllegalStateException(\"Unable to retrieve the ResultSet item.\", e);\n                            }\n                        }\n                    };\n                }\n\n                @Override\n                public int getRetrievalCost() {\n                    return INDEX_RETRIEVAL_COST;\n                }\n\n                @Override\n                public int getMergeCost() {\n                    final Connection connection = connectionManager.getConnection(SQLiteIndex.this, queryOptions);\n                    return DBQueries.count(query, tableName, connection); // no need to eliminate duplicates\n                }\n\n                @Override\n                public boolean contains(O object) {\n                    final K objectKey = primaryKeyAttribute.getValue(object, queryOptions);\n                    final Connection connection = connectionManager.getConnection(SQLiteIndex.this, queryOptions);\n                    return DBQueries.contains(objectKey, query, tableName, connection);\n                }\n\n                @Override\n                public boolean matches(O object) {\n                    return query.matches(object, queryOptions);\n                }\n\n                @Override\n                public int size() {\n                    final Connection connection = connectionManager.getConnection(SQLiteIndex.this, queryOptions);\n\n                    boolean attributeHasAtMostOneValue = (attribute instanceof SimpleAttribute || attribute instanceof SimpleNullableAttribute);\n                    boolean queryIsADisjointInQuery = query instanceof In && ((In) query).isDisjoint();\n\n                    if (queryIsADisjointInQuery || attributeHasAtMostOneValue) {\n                        return DBQueries.count(query, tableName, connection); // No need to eliminates duplicates\n                    }else{\n                        return DBQueries.countDistinct(query, tableName, connection); // eliminates duplicates\n                    }\n                }\n\n                @Override\n                public void close() {\n                    closeableResourceGroup.close();\n                }\n\n                @Override\n                public Query<O> getQuery() {\n                    return query;\n                }\n\n                @Override\n                public QueryOptions getQueryOptions() {\n                    return queryOptions;\n                }\n            };\n        }\n    }", "signature": "ResultSet<O> retrieve(final Query<O> query, final QueryOptions queryOptions)", "full_signature": "@Override public ResultSet<O> retrieve(final Query<O> query, final QueryOptions queryOptions)", "class_method_signature": "SQLiteIndex.retrieve(final Query<O> query, final QueryOptions queryOptions)", "testcase": false, "constructor": false, "invocations": ["getConnectionManager", "addGroup", "forQueryOptions", "getConnection", "getAllIndexEntries", "add", "wrapAsCloseable", "next", "close", "endOfData", "getValueFromResultSet", "getAttributeType", "getValueFromResultSet", "getAttributeType", "matchesValue", "getValue", "endOfData", "close", "getConnection", "getIndexEntryByObjectKey", "getValue", "hasNext", "iterator", "lazyMatchingValuesIterable", "closeQuietly", "matches", "getConnection", "count", "has", "getConnection", "getAllIndexEntries", "lazyMatchingValuesIterable", "countElements", "closeQuietly", "close", "next", "close", "endOfData", "getValueFromResultSet", "getAttributeType", "equals", "getValueFromResultSet", "getAttributeType", "matchesValue", "endOfData", "close", "getConnection", "search", "add", "wrapAsCloseable", "next", "close", "endOfData", "getValueFromResultSet", "getAttributeType", "getValue", "endOfData", "close", "getConnection", "count", "getValue", "getConnection", "contains", "matches", "getConnection", "isDisjoint", "count", "countDistinct", "close"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}