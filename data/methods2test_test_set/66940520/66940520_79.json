{"test_class": {"identifier": "DefaultMetadataSyncServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MetadataSyncService metadataSyncService;", "modifier": "private", "type": "MetadataSyncService", "declarator": "metadataSyncService", "var_name": "metadataSyncService"}, {"original_string": "@Mock\n    private MetadataVersionDelegate metadataVersionDelegate;", "modifier": "@Mock\n    private", "type": "MetadataVersionDelegate", "declarator": "metadataVersionDelegate", "var_name": "metadataVersionDelegate"}, {"original_string": "@Mock\n    private MetadataSyncDelegate metadataSyncDelegate;", "modifier": "@Mock\n    private", "type": "MetadataSyncDelegate", "declarator": "metadataSyncDelegate", "var_name": "metadataSyncDelegate"}, {"original_string": "@Mock\n    private MetadataVersionService metadataVersionService;", "modifier": "@Mock\n    private", "type": "MetadataVersionService", "declarator": "metadataVersionService", "var_name": "metadataVersionService"}, {"original_string": "@Mock\n    private MetadataSyncImportHandler metadataSyncImportHandler;", "modifier": "@Mock\n    private", "type": "MetadataSyncImportHandler", "declarator": "metadataSyncImportHandler", "var_name": "metadataSyncImportHandler"}, {"original_string": "private Map<String, List<String>> parameters;", "modifier": "private", "type": "Map<String, List<String>>", "declarator": "parameters", "var_name": "parameters"}, {"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/metadata/sync/DefaultMetadataSyncServiceTest.java"}, "test_case": {"identifier": "testShouldThrowExceptionWhenParametersHaveVersionNameAssignedToEmptyList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShouldThrowExceptionWhenParametersHaveVersionNameAssignedToEmptyList()\n        throws MetadataSyncServiceException\n    {\n        parameters.put( \"versionName\", new ArrayList<>() );\n\n        expectedException.expect( MetadataSyncServiceException.class );\n        expectedException.expectMessage( \"Missing required parameter: 'versionName'\" );\n\n        metadataSyncService.getParamsFromMap( parameters );\n    }", "signature": "void testShouldThrowExceptionWhenParametersHaveVersionNameAssignedToEmptyList()", "full_signature": "@Test public void testShouldThrowExceptionWhenParametersHaveVersionNameAssignedToEmptyList()", "class_method_signature": "DefaultMetadataSyncServiceTest.testShouldThrowExceptionWhenParametersHaveVersionNameAssignedToEmptyList()", "testcase": true, "constructor": false, "invocations": ["put", "expect", "expectMessage", "getParamsFromMap"]}, "focal_class": {"identifier": "DefaultMetadataSyncService", "superclass": "", "interfaces": "implements MetadataSyncService", "fields": [{"original_string": "private MetadataVersionDelegate metadataVersionDelegate;", "modifier": "private", "type": "MetadataVersionDelegate", "declarator": "metadataVersionDelegate", "var_name": "metadataVersionDelegate"}, {"original_string": "private MetadataVersionService metadataVersionService;", "modifier": "private", "type": "MetadataVersionService", "declarator": "metadataVersionService", "var_name": "metadataVersionService"}, {"original_string": "private MetadataSyncDelegate metadataSyncDelegate;", "modifier": "private", "type": "MetadataSyncDelegate", "declarator": "metadataSyncDelegate", "var_name": "metadataSyncDelegate"}, {"original_string": "private MetadataSyncImportHandler metadataSyncImportHandler;", "modifier": "private", "type": "MetadataSyncImportHandler", "declarator": "metadataSyncImportHandler", "var_name": "metadataSyncImportHandler"}], "methods": [{"identifier": "DefaultMetadataSyncService", "parameters": "( MetadataVersionDelegate metadataVersionDelegate,\n        MetadataVersionService metadataVersionService, MetadataSyncDelegate metadataSyncDelegate,\n        MetadataSyncImportHandler metadataSyncImportHandler )", "modifiers": "public", "return": "", "signature": " DefaultMetadataSyncService( MetadataVersionDelegate metadataVersionDelegate,\n        MetadataVersionService metadataVersionService, MetadataSyncDelegate metadataSyncDelegate,\n        MetadataSyncImportHandler metadataSyncImportHandler )", "full_signature": "public  DefaultMetadataSyncService( MetadataVersionDelegate metadataVersionDelegate,\n        MetadataVersionService metadataVersionService, MetadataSyncDelegate metadataSyncDelegate,\n        MetadataSyncImportHandler metadataSyncImportHandler )", "class_method_signature": "DefaultMetadataSyncService.DefaultMetadataSyncService( MetadataVersionDelegate metadataVersionDelegate,\n        MetadataVersionService metadataVersionService, MetadataSyncDelegate metadataSyncDelegate,\n        MetadataSyncImportHandler metadataSyncImportHandler )", "testcase": false, "constructor": true}, {"identifier": "getParamsFromMap", "parameters": "( Map<String, List<String>> parameters )", "modifiers": "@Override public", "return": "MetadataSyncParams", "signature": "MetadataSyncParams getParamsFromMap( Map<String, List<String>> parameters )", "full_signature": "@Override public MetadataSyncParams getParamsFromMap( Map<String, List<String>> parameters )", "class_method_signature": "DefaultMetadataSyncService.getParamsFromMap( Map<String, List<String>> parameters )", "testcase": false, "constructor": false}, {"identifier": "doMetadataSync", "parameters": "( MetadataSyncParams syncParams )", "modifiers": "@Override public synchronized", "return": "MetadataSyncSummary", "signature": "MetadataSyncSummary doMetadataSync( MetadataSyncParams syncParams )", "full_signature": "@Override public synchronized MetadataSyncSummary doMetadataSync( MetadataSyncParams syncParams )", "class_method_signature": "DefaultMetadataSyncService.doMetadataSync( MetadataSyncParams syncParams )", "testcase": false, "constructor": false}, {"identifier": "isSyncRequired", "parameters": "( MetadataSyncParams syncParams )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSyncRequired( MetadataSyncParams syncParams )", "full_signature": "@Override public boolean isSyncRequired( MetadataSyncParams syncParams )", "class_method_signature": "DefaultMetadataSyncService.isSyncRequired( MetadataSyncParams syncParams )", "testcase": false, "constructor": false}, {"identifier": "saveMetadataVersionSnapshotLocally", "parameters": "( MetadataVersion version, String metadataVersionSnapshot )", "modifiers": "private", "return": "void", "signature": "void saveMetadataVersionSnapshotLocally( MetadataVersion version, String metadataVersionSnapshot )", "full_signature": "private void saveMetadataVersionSnapshotLocally( MetadataVersion version, String metadataVersionSnapshot )", "class_method_signature": "DefaultMetadataSyncService.saveMetadataVersionSnapshotLocally( MetadataVersion version, String metadataVersionSnapshot )", "testcase": false, "constructor": false}, {"identifier": "getMetadataVersionSnapshot", "parameters": "( MetadataVersion version )", "modifiers": "private", "return": "String", "signature": "String getMetadataVersionSnapshot( MetadataVersion version )", "full_signature": "private String getMetadataVersionSnapshot( MetadataVersion version )", "class_method_signature": "DefaultMetadataSyncService.getMetadataVersionSnapshot( MetadataVersion version )", "testcase": false, "constructor": false}, {"identifier": "getMetadataVersionSnapshotFromRemote", "parameters": "( MetadataVersion version )", "modifiers": "private", "return": "String", "signature": "String getMetadataVersionSnapshotFromRemote( MetadataVersion version )", "full_signature": "private String getMetadataVersionSnapshotFromRemote( MetadataVersion version )", "class_method_signature": "DefaultMetadataSyncService.getMetadataVersionSnapshotFromRemote( MetadataVersion version )", "testcase": false, "constructor": false}, {"identifier": "setMetadataImportMode", "parameters": "( MetadataSyncParams syncParams, MetadataVersion version )", "modifiers": "private", "return": "void", "signature": "void setMetadataImportMode( MetadataSyncParams syncParams, MetadataVersion version )", "full_signature": "private void setMetadataImportMode( MetadataSyncParams syncParams, MetadataVersion version )", "class_method_signature": "DefaultMetadataSyncService.setMetadataImportMode( MetadataSyncParams syncParams, MetadataVersion version )", "testcase": false, "constructor": false}, {"identifier": "getLocalVersionSnapshot", "parameters": "( MetadataVersion version )", "modifiers": "private", "return": "String", "signature": "String getLocalVersionSnapshot( MetadataVersion version )", "full_signature": "private String getLocalVersionSnapshot( MetadataVersion version )", "class_method_signature": "DefaultMetadataSyncService.getLocalVersionSnapshot( MetadataVersion version )", "testcase": false, "constructor": false}, {"identifier": "getVersionsFromParams", "parameters": "( Map<String, List<String>> parameters )", "modifiers": "private", "return": "List<String>", "signature": "List<String> getVersionsFromParams( Map<String, List<String>> parameters )", "full_signature": "private List<String> getVersionsFromParams( Map<String, List<String>> parameters )", "class_method_signature": "DefaultMetadataSyncService.getVersionsFromParams( Map<String, List<String>> parameters )", "testcase": false, "constructor": false}, {"identifier": "getMetadataVersion", "parameters": "( MetadataSyncParams syncParams )", "modifiers": "private", "return": "MetadataVersion", "signature": "MetadataVersion getMetadataVersion( MetadataSyncParams syncParams )", "full_signature": "private MetadataVersion getMetadataVersion( MetadataSyncParams syncParams )", "class_method_signature": "DefaultMetadataSyncService.getMetadataVersion( MetadataSyncParams syncParams )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/sync/DefaultMetadataSyncService.java"}, "focal_method": {"identifier": "getParamsFromMap", "parameters": "( Map<String, List<String>> parameters )", "modifiers": "@Override public", "return": "MetadataSyncParams", "body": "@Override\n    public MetadataSyncParams getParamsFromMap( Map<String, List<String>> parameters )\n    {\n        List<String> versionName = getVersionsFromParams( parameters );\n        MetadataImportParams importParams = new MetadataImportParams();\n        importParams.setMetadataSyncImport( true );\n        MetadataSyncParams syncParams = new MetadataSyncParams();\n        syncParams.setImportParams( importParams );\n        String versionNameStr = versionName.get( 0 );\n\n        if ( StringUtils.isNotEmpty( versionNameStr ) )\n        {\n            MetadataVersion version;\n\n            try\n            {\n                version = metadataVersionDelegate.getRemoteMetadataVersion( versionNameStr );\n            }\n            catch ( MetadataVersionServiceException e )\n            {\n                throw new MetadataSyncServiceException( e.getMessage(), e );\n            }\n\n            if ( version == null )\n            {\n                throw new MetadataSyncServiceException(\n                    \"The MetadataVersion could not be fetched from the remote server for the versionName: \" +\n                        versionNameStr );\n            }\n\n            syncParams.setVersion( version );\n        }\n\n        syncParams.setParameters( parameters );\n\n        return syncParams;\n    }", "signature": "MetadataSyncParams getParamsFromMap( Map<String, List<String>> parameters )", "full_signature": "@Override public MetadataSyncParams getParamsFromMap( Map<String, List<String>> parameters )", "class_method_signature": "DefaultMetadataSyncService.getParamsFromMap( Map<String, List<String>> parameters )", "testcase": false, "constructor": false, "invocations": ["getVersionsFromParams", "setMetadataSyncImport", "setImportParams", "get", "isNotEmpty", "getRemoteMetadataVersion", "getMessage", "setVersion", "setParameters"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}