{"test_class": {"identifier": "HannanRissanen2Test", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/modelling/arima/demetra/HannanRissanen2Test.java"}, "test_case": {"identifier": "testSomeMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSomeMethod() {\n        SarmaSpecification spec = new SarmaSpecification(12);\n        spec.setP(3);\n        spec.setBP(0);\n        spec.setQ(1);\n        spec.setBQ(1);\n        SarimaModelBuilder builder = new SarimaModelBuilder();\n        //builder.setRandomNumberGenerator(new MersenneTwister(1));\n        SarimaModel model = new SarimaModel(spec);\n        SarimaModel arima = builder.randomize(model, 1);\n//        System.out.println(arima);\n        ArimaModelBuilder gen = new ArimaModelBuilder();\n        double[] data = gen.generateStationary(arima, 240);\n        HannanRissanen hr = new HannanRissanen();\n        hr.process(new ReadDataBlock(data), spec);\n//        System.out.println(hr.getModel());\n        HannanRissanen2 hr2 = new HannanRissanen2();\n        hr2.process(new ReadDataBlock(data), spec);\n//        System.out.println(hr2.getModel());\n    }", "signature": "void testSomeMethod()", "full_signature": "@Test public void testSomeMethod()", "class_method_signature": "HannanRissanen2Test.testSomeMethod()", "testcase": true, "constructor": false, "invocations": ["setP", "setBP", "setQ", "setBQ", "randomize", "generateStationary", "process", "process"]}, "focal_class": {"identifier": "HannanRissanen2", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SarimaModel m_model;", "modifier": "private", "type": "SarimaModel", "declarator": "m_model", "var_name": "m_model"}, {"original_string": "private SarmaSpecification m_spec = new SarmaSpecification();", "modifier": "private", "type": "SarmaSpecification", "declarator": "m_spec = new SarmaSpecification()", "var_name": "m_spec"}, {"original_string": "private boolean biascorrection = true, finalcorrection = true;", "modifier": "private", "type": "boolean", "declarator": "biascorrection = true", "var_name": "biascorrection"}, {"original_string": "private Initialization initialization = Initialization.Burg;", "modifier": "private", "type": "Initialization", "declarator": "initialization = Initialization.Burg", "var_name": "initialization"}, {"original_string": "private double[] m_data, m_a, m_pi;", "modifier": "private", "type": "double[]", "declarator": "m_data", "var_name": "m_data"}, {"original_string": "private IReadDataBlock m_odata;", "modifier": "private", "type": "IReadDataBlock", "declarator": "m_odata", "var_name": "m_odata"}, {"original_string": "private double bic;", "modifier": "private", "type": "double", "declarator": "bic", "var_name": "bic"}, {"original_string": "private static final int MAXNPI = 50;", "modifier": "private static final", "type": "int", "declarator": "MAXNPI = 50", "var_name": "MAXNPI"}, {"original_string": "private static final double OVERFLOW = 1e16, EPS = 1e-6;", "modifier": "private static final", "type": "double", "declarator": "OVERFLOW = 1e16", "var_name": "OVERFLOW"}], "methods": [{"identifier": "isBiasCorrection", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBiasCorrection()", "full_signature": "public boolean isBiasCorrection()", "class_method_signature": "HannanRissanen2.isBiasCorrection()", "testcase": false, "constructor": false}, {"identifier": "setBiasCorrection", "parameters": "(boolean biascorrection)", "modifiers": "public", "return": "void", "signature": "void setBiasCorrection(boolean biascorrection)", "full_signature": "public void setBiasCorrection(boolean biascorrection)", "class_method_signature": "HannanRissanen2.setBiasCorrection(boolean biascorrection)", "testcase": false, "constructor": false}, {"identifier": "isFinalCorrection", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFinalCorrection()", "full_signature": "public boolean isFinalCorrection()", "class_method_signature": "HannanRissanen2.isFinalCorrection()", "testcase": false, "constructor": false}, {"identifier": "setFinalCorrection", "parameters": "(boolean finalcorrection)", "modifiers": "public", "return": "void", "signature": "void setFinalCorrection(boolean finalcorrection)", "full_signature": "public void setFinalCorrection(boolean finalcorrection)", "class_method_signature": "HannanRissanen2.setFinalCorrection(boolean finalcorrection)", "testcase": false, "constructor": false}, {"identifier": "getInitialization", "parameters": "()", "modifiers": "public", "return": "Initialization", "signature": "Initialization getInitialization()", "full_signature": "public Initialization getInitialization()", "class_method_signature": "HannanRissanen2.getInitialization()", "testcase": false, "constructor": false}, {"identifier": "setInitialization", "parameters": "(Initialization initialization)", "modifiers": "public", "return": "void", "signature": "void setInitialization(Initialization initialization)", "full_signature": "public void setInitialization(Initialization initialization)", "class_method_signature": "HannanRissanen2.setInitialization(Initialization initialization)", "testcase": false, "constructor": false}, {"identifier": "getBic", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getBic()", "full_signature": "public double getBic()", "class_method_signature": "HannanRissanen2.getBic()", "testcase": false, "constructor": false}, {"identifier": "HannanRissanen2", "parameters": "()", "modifiers": "public", "return": "", "signature": " HannanRissanen2()", "full_signature": "public  HannanRissanen2()", "class_method_signature": "HannanRissanen2.HannanRissanen2()", "testcase": false, "constructor": true}, {"identifier": "ls", "parameters": "(Matrix mat, double[] y, boolean bbic)", "modifiers": "private", "return": "double[]", "signature": "double[] ls(Matrix mat, double[] y, boolean bbic)", "full_signature": "private double[] ls(Matrix mat, double[] y, boolean bbic)", "class_method_signature": "HannanRissanen2.ls(Matrix mat, double[] y, boolean bbic)", "testcase": false, "constructor": false}, {"identifier": "biascorrection", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void biascorrection()", "full_signature": "private void biascorrection()", "class_method_signature": "HannanRissanen2.biascorrection()", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean calc()", "full_signature": "private boolean calc()", "class_method_signature": "HannanRissanen2.calc()", "testcase": false, "constructor": false}, {"identifier": "finalcorrection", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void finalcorrection()", "full_signature": "private void finalcorrection()", "class_method_signature": "HannanRissanen2.finalcorrection()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void clear()", "full_signature": "private void clear()", "class_method_signature": "HannanRissanen2.clear()", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "()", "modifiers": "public", "return": "IReadDataBlock", "signature": "IReadDataBlock getData()", "full_signature": "public IReadDataBlock getData()", "class_method_signature": "HannanRissanen2.getData()", "testcase": false, "constructor": false}, {"identifier": "getModel", "parameters": "()", "modifiers": "public", "return": "SarimaModel", "signature": "SarimaModel getModel()", "full_signature": "public SarimaModel getModel()", "class_method_signature": "HannanRissanen2.getModel()", "testcase": false, "constructor": false}, {"identifier": "getSpec", "parameters": "()", "modifiers": "public", "return": "SarmaSpecification", "signature": "SarmaSpecification getSpec()", "full_signature": "public SarmaSpecification getSpec()", "class_method_signature": "HannanRissanen2.getSpec()", "testcase": false, "constructor": false}, {"identifier": "npi", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int npi()", "full_signature": "private int npi()", "class_method_signature": "HannanRissanen2.npi()", "testcase": false, "constructor": false}, {"identifier": "initac", "parameters": "()", "modifiers": "private", "return": "double[]", "signature": "double[] initac()", "full_signature": "private double[] initac()", "class_method_signature": "HannanRissanen2.initac()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initialize()", "full_signature": "private void initialize()", "class_method_signature": "HannanRissanen2.initialize()", "testcase": false, "constructor": false}, {"identifier": "ols", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ols()", "full_signature": "private void ols()", "class_method_signature": "HannanRissanen2.ols()", "testcase": false, "constructor": false}, {"identifier": "burg", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void burg()", "full_signature": "private void burg()", "class_method_signature": "HannanRissanen2.burg()", "testcase": false, "constructor": false}, {"identifier": "durbin", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void durbin()", "full_signature": "private void durbin()", "class_method_signature": "HannanRissanen2.durbin()", "testcase": false, "constructor": false}, {"identifier": "minspq", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void minspq()", "full_signature": "private void minspq()", "class_method_signature": "HannanRissanen2.minspq()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(final IReadDataBlock value, SarmaSpecification spec)", "modifiers": "public", "return": "boolean", "signature": "boolean process(final IReadDataBlock value, SarmaSpecification spec)", "full_signature": "public boolean process(final IReadDataBlock value, SarmaSpecification spec)", "class_method_signature": "HannanRissanen2.process(final IReadDataBlock value, SarmaSpecification spec)", "testcase": false, "constructor": false}, {"identifier": "updatemodel", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updatemodel()", "full_signature": "private void updatemodel()", "class_method_signature": "HannanRissanen2.updatemodel()", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/modelling/arima/demetra/HannanRissanen2.java"}, "focal_method": {"identifier": "process", "parameters": "(final IReadDataBlock value, SarmaSpecification spec)", "modifiers": "public", "return": "boolean", "body": "public boolean process(final IReadDataBlock value, SarmaSpecification spec) {\n        clear();\n        m_spec = spec.clone();\n        AbsMeanNormalizer normalizer = new AbsMeanNormalizer();\n        if (!normalizer.process(value)) {\n            return false;\n        }\n        m_data = normalizer.getNormalizedData();\n        m_odata = value;\n        return calc();\n    }", "signature": "boolean process(final IReadDataBlock value, SarmaSpecification spec)", "full_signature": "public boolean process(final IReadDataBlock value, SarmaSpecification spec)", "class_method_signature": "HannanRissanen2.process(final IReadDataBlock value, SarmaSpecification spec)", "testcase": false, "constructor": false, "invocations": ["clear", "clone", "process", "getNormalizedData", "calc"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}