{"test_class": {"identifier": "CriteriaVisitorTest", "superclass": "extends AbstractHibernateLayerModelTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate FilterService filterService;", "modifier": "@Autowired\n\tprivate", "type": "FilterService", "declarator": "filterService", "var_name": "filterService"}], "file": "plugin/layer-hibernate/hibernate/src/test/java/org/geomajas/layer/hibernate/CriteriaVisitorTest.java"}, "test_case": {"identifier": "testVisitDuring", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testVisitDuring() throws GeomajasException {\n\t\tFilter f = filterService.parseFilter(\"myDate DURING 2006-11-30T00:30:00Z/2006-11-30T01:30:00Z\");\n\t\tCriterion c = (Criterion) (new CriteriaVisitor((HibernateFeatureModel) layer.getFeatureModel(),\n\t\t\t\tDateFormat.getDateTimeInstance()).visit((During) f, null));\n\t\tDate from = ISODateTimeFormat.dateTimeNoMillis().parseDateTime(\"2006-11-30T00:30:00Z\").toDate();\n\t\tDate to = ISODateTimeFormat.dateTimeNoMillis().parseDateTime(\"2006-11-30T01:30:00Z\").toDate();\n\t\tAssert.assertEquals(\"myDate between \" + from + \" and \" + to, c.toString());\n\t}", "signature": "void testVisitDuring()", "full_signature": "@Test public void testVisitDuring()", "class_method_signature": "CriteriaVisitorTest.testVisitDuring()", "testcase": true, "constructor": false, "invocations": ["parseFilter", "visit", "getFeatureModel", "getDateTimeInstance", "toDate", "parseDateTime", "dateTimeNoMillis", "toDate", "parseDateTime", "dateTimeNoMillis", "assertEquals", "toString"]}, "focal_class": {"identifier": "CriteriaVisitor", "superclass": "", "interfaces": "implements FilterVisitor", "fields": [{"original_string": "private static final String HIBERNATE_ID = \"id\";", "modifier": "private static final", "type": "String", "declarator": "HIBERNATE_ID = \"id\"", "var_name": "HIBERNATE_ID"}, {"original_string": "private final Logger log = LoggerFactory.getLogger(CriteriaVisitor.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(CriteriaVisitor.class)", "var_name": "log"}, {"original_string": "private String geomName;", "modifier": "private", "type": "String", "declarator": "geomName", "var_name": "geomName"}, {"original_string": "private final int srid;", "modifier": "private final", "type": "int", "declarator": "srid", "var_name": "srid"}, {"original_string": "private final HibernateFeatureModel featureModel;", "modifier": "private final", "type": "HibernateFeatureModel", "declarator": "featureModel", "var_name": "featureModel"}, {"original_string": "private final DateFormat dateFormat;", "modifier": "private final", "type": "DateFormat", "declarator": "dateFormat", "var_name": "dateFormat"}, {"original_string": "private final List<String> aliases = new ArrayList<String>();", "modifier": "private final", "type": "List<String>", "declarator": "aliases = new ArrayList<String>()", "var_name": "aliases"}], "methods": [{"identifier": "CriteriaVisitor", "parameters": "(HibernateFeatureModel featureModel, DateFormat dateFormat)", "modifiers": "public", "return": "", "signature": " CriteriaVisitor(HibernateFeatureModel featureModel, DateFormat dateFormat)", "full_signature": "public  CriteriaVisitor(HibernateFeatureModel featureModel, DateFormat dateFormat)", "class_method_signature": "CriteriaVisitor.CriteriaVisitor(HibernateFeatureModel featureModel, DateFormat dateFormat)", "testcase": false, "constructor": true}, {"identifier": "visit", "parameters": "(And filter, Object userData)", "modifiers": "public", "return": "Object", "signature": "Object visit(And filter, Object userData)", "full_signature": "public Object visit(And filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(And filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Not filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(Not filter, Object userData)", "full_signature": "@Override public Object visit(Not filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(Not filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Or filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(Or filter, Object userData)", "full_signature": "@Override public Object visit(Or filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(Or filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsBetween filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(PropertyIsBetween filter, Object userData)", "full_signature": "@Override public Object visit(PropertyIsBetween filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(PropertyIsBetween filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsEqualTo filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(PropertyIsEqualTo filter, Object userData)", "full_signature": "@Override public Object visit(PropertyIsEqualTo filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(PropertyIsEqualTo filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsNotEqualTo filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(PropertyIsNotEqualTo filter, Object userData)", "full_signature": "@Override public Object visit(PropertyIsNotEqualTo filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(PropertyIsNotEqualTo filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsGreaterThan filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(PropertyIsGreaterThan filter, Object userData)", "full_signature": "@Override public Object visit(PropertyIsGreaterThan filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(PropertyIsGreaterThan filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsGreaterThanOrEqualTo filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(PropertyIsGreaterThanOrEqualTo filter, Object userData)", "full_signature": "@Override public Object visit(PropertyIsGreaterThanOrEqualTo filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(PropertyIsGreaterThanOrEqualTo filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsLessThan filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(PropertyIsLessThan filter, Object userData)", "full_signature": "@Override public Object visit(PropertyIsLessThan filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(PropertyIsLessThan filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsLessThanOrEqualTo filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(PropertyIsLessThanOrEqualTo filter, Object userData)", "full_signature": "@Override public Object visit(PropertyIsLessThanOrEqualTo filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(PropertyIsLessThanOrEqualTo filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsLike filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(PropertyIsLike filter, Object userData)", "full_signature": "@Override public Object visit(PropertyIsLike filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(PropertyIsLike filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsNull filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(PropertyIsNull filter, Object userData)", "full_signature": "@Override public Object visit(PropertyIsNull filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(PropertyIsNull filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(BBOX filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(BBOX filter, Object userData)", "full_signature": "@Override public Object visit(BBOX filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(BBOX filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Beyond filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(Beyond filter, Object userData)", "full_signature": "@Override public Object visit(Beyond filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(Beyond filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Contains filter, Object userData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Contains filter, Object userData)", "full_signature": "public Object visit(Contains filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(Contains filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Crosses filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(Crosses filter, Object userData)", "full_signature": "@Override public Object visit(Crosses filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(Crosses filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Disjoint filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(Disjoint filter, Object userData)", "full_signature": "@Override public Object visit(Disjoint filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(Disjoint filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(DWithin filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(DWithin filter, Object userData)", "full_signature": "@Override public Object visit(DWithin filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(DWithin filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Equals filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(Equals filter, Object userData)", "full_signature": "@Override public Object visit(Equals filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(Equals filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Intersects filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(Intersects filter, Object userData)", "full_signature": "@Override public Object visit(Intersects filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(Intersects filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Overlaps filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(Overlaps filter, Object userData)", "full_signature": "@Override public Object visit(Overlaps filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(Overlaps filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Touches filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(Touches filter, Object userData)", "full_signature": "@Override public Object visit(Touches filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(Touches filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Within filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(Within filter, Object userData)", "full_signature": "@Override public Object visit(Within filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(Within filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(ExcludeFilter filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(ExcludeFilter filter, Object userData)", "full_signature": "@Override public Object visit(ExcludeFilter filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(ExcludeFilter filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(IncludeFilter filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(IncludeFilter filter, Object userData)", "full_signature": "@Override public Object visit(IncludeFilter filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(IncludeFilter filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Id filter, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(Id filter, Object userData)", "full_signature": "@Override public Object visit(Id filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(Id filter, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visitNullFilter", "parameters": "(Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visitNullFilter(Object userData)", "full_signature": "@Override public Object visitNullFilter(Object userData)", "class_method_signature": "CriteriaVisitor.visitNullFilter(Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsNil filter, Object extraData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(PropertyIsNil filter, Object extraData)", "full_signature": "@Override public Object visit(PropertyIsNil filter, Object extraData)", "class_method_signature": "CriteriaVisitor.visit(PropertyIsNil filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(After after, Object extraData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(After after, Object extraData)", "full_signature": "@Override public Object visit(After after, Object extraData)", "class_method_signature": "CriteriaVisitor.visit(After after, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(AnyInteracts anyInteracts, Object extraData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(AnyInteracts anyInteracts, Object extraData)", "full_signature": "@Override public Object visit(AnyInteracts anyInteracts, Object extraData)", "class_method_signature": "CriteriaVisitor.visit(AnyInteracts anyInteracts, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Before before, Object extraData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(Before before, Object extraData)", "full_signature": "@Override public Object visit(Before before, Object extraData)", "class_method_signature": "CriteriaVisitor.visit(Before before, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Begins begins, Object extraData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(Begins begins, Object extraData)", "full_signature": "@Override public Object visit(Begins begins, Object extraData)", "class_method_signature": "CriteriaVisitor.visit(Begins begins, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(BegunBy begunBy, Object extraData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(BegunBy begunBy, Object extraData)", "full_signature": "@Override public Object visit(BegunBy begunBy, Object extraData)", "class_method_signature": "CriteriaVisitor.visit(BegunBy begunBy, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(During during, Object userData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(During during, Object userData)", "full_signature": "@Override public Object visit(During during, Object userData)", "class_method_signature": "CriteriaVisitor.visit(During during, Object userData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(EndedBy endedBy, Object extraData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(EndedBy endedBy, Object extraData)", "full_signature": "@Override public Object visit(EndedBy endedBy, Object extraData)", "class_method_signature": "CriteriaVisitor.visit(EndedBy endedBy, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Ends ends, Object extraData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(Ends ends, Object extraData)", "full_signature": "@Override public Object visit(Ends ends, Object extraData)", "class_method_signature": "CriteriaVisitor.visit(Ends ends, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Meets meets, Object extraData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(Meets meets, Object extraData)", "full_signature": "@Override public Object visit(Meets meets, Object extraData)", "class_method_signature": "CriteriaVisitor.visit(Meets meets, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(MetBy metBy, Object extraData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(MetBy metBy, Object extraData)", "full_signature": "@Override public Object visit(MetBy metBy, Object extraData)", "class_method_signature": "CriteriaVisitor.visit(MetBy metBy, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(OverlappedBy overlappedBy, Object extraData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(OverlappedBy overlappedBy, Object extraData)", "full_signature": "@Override public Object visit(OverlappedBy overlappedBy, Object extraData)", "class_method_signature": "CriteriaVisitor.visit(OverlappedBy overlappedBy, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(TContains contains, Object extraData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(TContains contains, Object extraData)", "full_signature": "@Override public Object visit(TContains contains, Object extraData)", "class_method_signature": "CriteriaVisitor.visit(TContains contains, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(TEquals equals, Object extraData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(TEquals equals, Object extraData)", "full_signature": "@Override public Object visit(TEquals equals, Object extraData)", "class_method_signature": "CriteriaVisitor.visit(TEquals equals, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(TOverlaps contains, Object extraData)", "modifiers": "@Override public", "return": "Object", "signature": "Object visit(TOverlaps contains, Object extraData)", "full_signature": "@Override public Object visit(TOverlaps contains, Object extraData)", "class_method_signature": "CriteriaVisitor.visit(TOverlaps contains, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "getPropertyName", "parameters": "(Expression expression)", "modifiers": "private", "return": "String", "signature": "String getPropertyName(Expression expression)", "full_signature": "private String getPropertyName(Expression expression)", "class_method_signature": "CriteriaVisitor.getPropertyName(Expression expression)", "testcase": false, "constructor": false}, {"identifier": "getLiteralValue", "parameters": "(Expression expression)", "modifiers": "private", "return": "Object", "signature": "Object getLiteralValue(Expression expression)", "full_signature": "private Object getLiteralValue(Expression expression)", "class_method_signature": "CriteriaVisitor.getLiteralValue(Expression expression)", "testcase": false, "constructor": false}, {"identifier": "parsePropertyName", "parameters": "(String orgPropertyName, Object userData)", "modifiers": "private", "return": "String", "signature": "String parsePropertyName(String orgPropertyName, Object userData)", "full_signature": "private String parsePropertyName(String orgPropertyName, Object userData)", "class_method_signature": "CriteriaVisitor.parsePropertyName(String orgPropertyName, Object userData)", "testcase": false, "constructor": false}, {"identifier": "castLiteral", "parameters": "(Object literal, String propertyName)", "modifiers": "private", "return": "Object", "signature": "Object castLiteral(Object literal, String propertyName)", "full_signature": "private Object castLiteral(Object literal, String propertyName)", "class_method_signature": "CriteriaVisitor.castLiteral(Object literal, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "castCollection", "parameters": "(Object literal, String propertyName)", "modifiers": "private", "return": "Object", "signature": "Object castCollection(Object literal, String propertyName)", "full_signature": "private Object castCollection(Object literal, String propertyName)", "class_method_signature": "CriteriaVisitor.castCollection(Object literal, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "castObjectArray", "parameters": "(Object literal, String propertyName)", "modifiers": "private", "return": "Object", "signature": "Object castObjectArray(Object literal, String propertyName)", "full_signature": "private Object castObjectArray(Object literal, String propertyName)", "class_method_signature": "CriteriaVisitor.castObjectArray(Object literal, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "asGeometry", "parameters": "(Object geometry)", "modifiers": "private", "return": "Geometry", "signature": "Geometry asGeometry(Object geometry)", "full_signature": "private Geometry asGeometry(Object geometry)", "class_method_signature": "CriteriaVisitor.asGeometry(Object geometry)", "testcase": false, "constructor": false}], "file": "plugin/layer-hibernate/hibernate/src/main/java/org/geomajas/layer/hibernate/CriteriaVisitor.java"}, "focal_method": {"identifier": "visit", "parameters": "(And filter, Object userData)", "modifiers": "public", "return": "Object", "body": "public Object visit(And filter, Object userData) {\n\t\tCriterion c = null;\n\t\tfor (Filter element : filter.getChildren()) {\n\t\t\tif (c == null) {\n\t\t\t\tc = (Criterion) element.accept(this, userData);\n\t\t\t} else {\n\t\t\t\tc = Restrictions.and(c, (Criterion) element.accept(this, userData));\n\t\t\t}\n\t\t}\n\t\treturn c;\n\t}", "signature": "Object visit(And filter, Object userData)", "full_signature": "public Object visit(And filter, Object userData)", "class_method_signature": "CriteriaVisitor.visit(And filter, Object userData)", "testcase": false, "constructor": false, "invocations": ["getChildren", "accept", "and", "accept"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}