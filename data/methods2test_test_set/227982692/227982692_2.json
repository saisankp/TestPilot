{"test_class": {"identifier": "SchedulerServiceTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private SchedulerService schedulerService;", "modifier": "@Autowired\n    private", "type": "SchedulerService", "declarator": "schedulerService", "var_name": "schedulerService"}, {"original_string": "@Autowired\n    private EmailServiceClient emailServiceClient;", "modifier": "@Autowired\n    private", "type": "EmailServiceClient", "declarator": "emailServiceClient", "var_name": "emailServiceClient"}], "file": "services/task-server/src/test/java/com/opencloud/task/server/service/SchedulerServiceTest.java"}, "test_case": {"identifier": "addCronJob", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addCronJob() {\n        String cron = \"3 * * * * ? *\";\n        TaskInfo taskInfo = new TaskInfo();\n        Map data = Maps.newHashMap();\n        String serviceId = \"upm-server\";\n        data.put(\"serviceId\", serviceId);\n        data.put(\"method\", \"get\");\n        data.put(\"path\", \"/test\");\n        data.put(\"contentType\", \"application/x-www-form-urlencoded\");\n        data.put(\"alarmMail\", \"515608851@qq.com\");\n        taskInfo.setData(data);\n        taskInfo.setJobName(\"\u5b9a\u65f6\u4efb\u52a1\u6d4b\u8bd5\");\n        taskInfo.setJobDescription(\"\u5b9a\u65f6\u4efb\u52a1\u63cf\u8ff03\u79d2\u6267\u884c\u4e00\u6b21\");\n        taskInfo.setJobClassName(HttpExecuteJob.class.getName());\n        taskInfo.setJobGroupName(Scheduler.DEFAULT_GROUP);\n        taskInfo.setCronExpression(cron);\n        schedulerService.addCronJob(taskInfo);\n    }", "signature": "void addCronJob()", "full_signature": "@Test public void addCronJob()", "class_method_signature": "SchedulerServiceTest.addCronJob()", "testcase": true, "constructor": false, "invocations": ["newHashMap", "put", "put", "put", "put", "put", "setData", "setJobName", "setJobDescription", "setJobClassName", "getName", "setJobGroupName", "setCronExpression", "addCronJob"]}, "focal_class": {"identifier": "SchedulerService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private Scheduler scheduler;", "modifier": "@Autowired\n    private", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}], "methods": [{"identifier": "getJobGroupNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getJobGroupNames()", "full_signature": "public List<String> getJobGroupNames()", "class_method_signature": "SchedulerService.getJobGroupNames()", "testcase": false, "constructor": false}, {"identifier": "getJobList", "parameters": "()", "modifiers": "public", "return": "List<TaskInfo>", "signature": "List<TaskInfo> getJobList()", "full_signature": "public List<TaskInfo> getJobList()", "class_method_signature": "SchedulerService.getJobList()", "testcase": false, "constructor": false}, {"identifier": "addSimpleJob", "parameters": "(TaskInfo info)", "modifiers": "public", "return": "void", "signature": "void addSimpleJob(TaskInfo info)", "full_signature": "public void addSimpleJob(TaskInfo info)", "class_method_signature": "SchedulerService.addSimpleJob(TaskInfo info)", "testcase": false, "constructor": false}, {"identifier": "addCronJob", "parameters": "(TaskInfo info)", "modifiers": "public", "return": "void", "signature": "void addCronJob(TaskInfo info)", "full_signature": "public void addCronJob(TaskInfo info)", "class_method_signature": "SchedulerService.addCronJob(TaskInfo info)", "testcase": false, "constructor": false}, {"identifier": "editSimpleJob", "parameters": "(TaskInfo info)", "modifiers": "public", "return": "void", "signature": "void editSimpleJob(TaskInfo info)", "full_signature": "public void editSimpleJob(TaskInfo info)", "class_method_signature": "SchedulerService.editSimpleJob(TaskInfo info)", "testcase": false, "constructor": false}, {"identifier": "editCronJob", "parameters": "(TaskInfo info)", "modifiers": "public", "return": "void", "signature": "void editCronJob(TaskInfo info)", "full_signature": "public void editCronJob(TaskInfo info)", "class_method_signature": "SchedulerService.editCronJob(TaskInfo info)", "testcase": false, "constructor": false}, {"identifier": "deleteJob", "parameters": "(String jobName, String jobGroup)", "modifiers": "public", "return": "void", "signature": "void deleteJob(String jobName, String jobGroup)", "full_signature": "public void deleteJob(String jobName, String jobGroup)", "class_method_signature": "SchedulerService.deleteJob(String jobName, String jobGroup)", "testcase": false, "constructor": false}, {"identifier": "pauseJob", "parameters": "(String jobName, String jobGroup)", "modifiers": "public", "return": "void", "signature": "void pauseJob(String jobName, String jobGroup)", "full_signature": "public void pauseJob(String jobName, String jobGroup)", "class_method_signature": "SchedulerService.pauseJob(String jobName, String jobGroup)", "testcase": false, "constructor": false}, {"identifier": "resumeJob", "parameters": "(String jobName, String jobGroup)", "modifiers": "public", "return": "void", "signature": "void resumeJob(String jobName, String jobGroup)", "full_signature": "public void resumeJob(String jobName, String jobGroup)", "class_method_signature": "SchedulerService.resumeJob(String jobName, String jobGroup)", "testcase": false, "constructor": false}, {"identifier": "checkExists", "parameters": "(String jobName, String jobGroup)", "modifiers": "private", "return": "boolean", "signature": "boolean checkExists(String jobName, String jobGroup)", "full_signature": "private boolean checkExists(String jobName, String jobGroup)", "class_method_signature": "SchedulerService.checkExists(String jobName, String jobGroup)", "testcase": false, "constructor": false}], "file": "services/task-server/src/main/java/com/opencloud/task/server/service/SchedulerService.java"}, "focal_method": {"identifier": "addCronJob", "parameters": "(TaskInfo info)", "modifiers": "public", "return": "void", "body": "public void addCronJob(TaskInfo info) {\n        String jobName = info.getJobName();\n        String jobClassName = info.getJobClassName();\n        String jobGroupName = info.getJobGroupName();\n        String jobDescription = info.getJobDescription();\n        String cronExpression = info.getCronExpression();\n        Date createTime = new Date();\n        JobDataMap dataMap = new JobDataMap();\n        if (info.getData() != null) {\n            dataMap.putAll(info.getData());\n        }\n        dataMap.put(\"createTime\", createTime);\n        try {\n            if (checkExists(jobName, jobGroupName)) {\n                throw new OpenAlertException(String.format(\"\u4efb\u52a1\u5df2\u7ecf\u5b58\u5728, jobName:[%s],jobGroup:[%s]\", jobName, jobGroupName));\n            }\n            TriggerKey triggerKey = TriggerKey.triggerKey(jobName, jobGroupName);\n            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);\n            CronScheduleBuilder schedBuilder = CronScheduleBuilder\n                    .cronSchedule(cronExpression)\n                    .withMisfireHandlingInstructionDoNothing();\n            CronTrigger trigger = TriggerBuilder.newTrigger()\n                    .withIdentity(triggerKey)\n                    .withSchedule(schedBuilder).build();\n\n            Class<? extends Job> clazz = (Class<? extends Job>) Class\n                    .forName(jobClassName);\n            JobDetail jobDetail = JobBuilder.newJob(clazz).withIdentity(jobKey)\n                    .withDescription(jobDescription).usingJobData(dataMap).build();\n            scheduler.scheduleJob(jobDetail, trigger);\n        } catch (SchedulerException | ClassNotFoundException e) {\n            throw new OpenAlertException(\"\u4efb\u52a1\u6dfb\u52a0\u5931\u8d25\");\n        }\n    }", "signature": "void addCronJob(TaskInfo info)", "full_signature": "public void addCronJob(TaskInfo info)", "class_method_signature": "SchedulerService.addCronJob(TaskInfo info)", "testcase": false, "constructor": false, "invocations": ["getJobName", "getJobClassName", "getJobGroupName", "getJobDescription", "getCronExpression", "getData", "putAll", "getData", "put", "checkExists", "format", "triggerKey", "jobKey", "withMisfireHandlingInstructionDoNothing", "cronSchedule", "build", "withSchedule", "withIdentity", "newTrigger", "forName", "build", "usingJobData", "withDescription", "withIdentity", "newJob", "scheduleJob"]}, "repository": {"repo_id": 227982692, "url": "https://github.com/uhonliu/open-platform", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 15471, "license": "licensed"}}