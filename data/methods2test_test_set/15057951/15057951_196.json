{"test_class": {"identifier": "SkeletonToTreeConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SkeletonToTreeConverterTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SkeletonToTreeConverterTest.class)", "var_name": "logger"}, {"original_string": "private final SkeletonToTreeConverter skeletonToTreeConverter = new SkeletonToTreeConverter();", "modifier": "private final", "type": "SkeletonToTreeConverter", "declarator": "skeletonToTreeConverter = new SkeletonToTreeConverter()", "var_name": "skeletonToTreeConverter"}], "file": "smartparam-engine/src/test/java/org/smartparam/engine/report/SkeletonToTreeConverterTest.java"}, "test_case": {"identifier": "shouldCreateLevelsInsideReportingTreeBasedOnSkeletonWithMatchingDictionaryOnlyFlag", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateLevelsInsideReportingTreeBasedOnSkeletonWithMatchingDictionaryOnlyFlag() {\n        // given\n        ReportingTree<String> tree = reportingTree().withOnlyExactLevels(4).build();\n\n        // ROOT/*/A/*\n        ReportSkeleton skeleton = ReportSkeleton.reportSkeleton()\n                .withLevel(level()\n                        .withChild(\"A\",\n                                level()\n                        )\n                );\n\n        logger.debug(skeleton.toString());\n\n        // when\n        skeletonToTreeConverter.createTreeLevels(tree, skeleton);\n\n        // then\n        assertThat(tree).hasDepth(4).levelAt(1).isDictionaryLevel();\n    }", "signature": "void shouldCreateLevelsInsideReportingTreeBasedOnSkeletonWithMatchingDictionaryOnlyFlag()", "full_signature": "@Test public void shouldCreateLevelsInsideReportingTreeBasedOnSkeletonWithMatchingDictionaryOnlyFlag()", "class_method_signature": "SkeletonToTreeConverterTest.shouldCreateLevelsInsideReportingTreeBasedOnSkeletonWithMatchingDictionaryOnlyFlag()", "testcase": true, "constructor": false, "invocations": ["build", "withOnlyExactLevels", "reportingTree", "withLevel", "reportSkeleton", "withChild", "level", "level", "debug", "toString", "createTreeLevels", "isDictionaryLevel", "levelAt", "hasDepth", "assertThat"]}, "focal_class": {"identifier": "SkeletonToTreeConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SkeletonToTreeConverter.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SkeletonToTreeConverter.class)", "var_name": "logger"}], "methods": [{"identifier": "createTreeLevels", "parameters": "(ReportingTree<?> tree, ReportSkeleton skeleton)", "modifiers": "", "return": "void", "signature": "void createTreeLevels(ReportingTree<?> tree, ReportSkeleton skeleton)", "full_signature": " void createTreeLevels(ReportingTree<?> tree, ReportSkeleton skeleton)", "class_method_signature": "SkeletonToTreeConverter.createTreeLevels(ReportingTree<?> tree, ReportSkeleton skeleton)", "testcase": false, "constructor": false}, {"identifier": "createLevelSkeleton", "parameters": "(ReportingTreeNode<?> currentNode, ReportLevel currentSkeletonLevel)", "modifiers": "private", "return": "void", "signature": "void createLevelSkeleton(ReportingTreeNode<?> currentNode, ReportLevel currentSkeletonLevel)", "full_signature": "private void createLevelSkeleton(ReportingTreeNode<?> currentNode, ReportLevel currentSkeletonLevel)", "class_method_signature": "SkeletonToTreeConverter.createLevelSkeleton(ReportingTreeNode<?> currentNode, ReportLevel currentSkeletonLevel)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/report/SkeletonToTreeConverter.java"}, "focal_method": {"identifier": "createTreeLevels", "parameters": "(ReportingTree<?> tree, ReportSkeleton skeleton)", "modifiers": "", "return": "void", "body": "void createTreeLevels(ReportingTree<?> tree, ReportSkeleton skeleton) {\n        ReportingTreeNode<?> currentNode = tree.root();\n        createLevelSkeleton(currentNode, skeleton.root());\n\n        if (logger.isTraceEnabled()) {\n            logger.trace(skeleton.toString());\n        }\n    }", "signature": "void createTreeLevels(ReportingTree<?> tree, ReportSkeleton skeleton)", "full_signature": " void createTreeLevels(ReportingTree<?> tree, ReportSkeleton skeleton)", "class_method_signature": "SkeletonToTreeConverter.createTreeLevels(ReportingTree<?> tree, ReportSkeleton skeleton)", "testcase": false, "constructor": false, "invocations": ["root", "createLevelSkeleton", "root", "isTraceEnabled", "trace", "toString"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}