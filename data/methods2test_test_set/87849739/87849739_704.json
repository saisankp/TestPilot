{"test_class": {"identifier": "PolicyPersistenceActorTest", "superclass": "extends PersistenceActorTestBase", "interfaces": "", "fields": [{"original_string": "private static final long POLICY_SIZE_LIMIT_BYTES = Long.parseLong(\n            System.getProperty(PolicyCommandSizeValidator.DITTO_LIMITS_POLICIES_MAX_SIZE_BYTES, \"-1\"));", "modifier": "private static final", "type": "long", "declarator": "POLICY_SIZE_LIMIT_BYTES = Long.parseLong(\n            System.getProperty(PolicyCommandSizeValidator.DITTO_LIMITS_POLICIES_MAX_SIZE_BYTES, \"-1\"))", "var_name": "POLICY_SIZE_LIMIT_BYTES"}], "file": "services/policies/persistence/src/test/java/org/eclipse/ditto/services/policies/persistence/actors/PolicyPersistenceActorTest.java"}, "test_case": {"identifier": "checkForActivityOfNonexistentPolicy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkForActivityOfNonexistentPolicy() {\n        new TestKit(actorSystem) {\n            {\n                // GIVEN: a PolicyPersistenceActor is created in a parent that forwards all messages to us\n                final PolicyId policyId = PolicyId.of(\"test.ns\", \"nonexistent.policy\");\n                final Props persistentActorProps =\n                        PolicyPersistenceActor.props(policyId, new PolicyMongoSnapshotAdapter(), pubSubMediator);\n\n                final TestProbe errorsProbe = TestProbe.apply(actorSystem);\n\n                final Props parentProps = Props.create(Actor.class, () -> new AbstractActor() {\n\n                    @Override\n                    public void preStart() {\n                        getContext().actorOf(persistentActorProps);\n                    }\n\n                    @Override\n                    public SupervisorStrategy supervisorStrategy() {\n                        return new OneForOneStrategy(true,\n                                DeciderBuilder.matchAny(throwable -> {\n                                    errorsProbe.ref().tell(throwable, getSelf());\n                                    return SupervisorStrategy.restart();\n                                }).build());\n                    }\n\n                    @Override\n                    public Receive createReceive() {\n                        return ReceiveBuilder.create()\n                                .matchAny(message -> {\n                                    if (getTestActor().equals(getSender())) {\n                                        getContext().actorSelection(getSelf().path().child(\"*\"))\n                                                .forward(message, getContext());\n                                    } else {\n                                        getTestActor().forward(message, getContext());\n                                    }\n                                })\n                                .build();\n                    }\n                });\n\n                // WHEN: CheckForActivity is sent to a persistence actor of nonexistent policy after startup\n                final ActorRef underTest = actorSystem.actorOf(parentProps);\n\n                final Object checkForActivity = AbstractShardedPersistenceActor.checkForActivity(1L);\n                underTest.tell(checkForActivity, getRef());\n                underTest.tell(checkForActivity, getRef());\n                underTest.tell(checkForActivity, getRef());\n\n                // THEN: persistence actor requests shutdown\n                expectMsg(PolicySupervisorActor.Control.PASSIVATE);\n\n                // THEN: persistence actor should not throw anything.\n                errorsProbe.expectNoMessage(scala.concurrent.duration.Duration.create(3, TimeUnit.SECONDS));\n            }\n        };\n    }", "signature": "void checkForActivityOfNonexistentPolicy()", "full_signature": "@Test public void checkForActivityOfNonexistentPolicy()", "class_method_signature": "PolicyPersistenceActorTest.checkForActivityOfNonexistentPolicy()", "testcase": true, "constructor": false, "invocations": ["of", "props", "apply", "create", "actorOf", "getContext", "build", "matchAny", "tell", "ref", "getSelf", "restart", "build", "matchAny", "create", "equals", "getTestActor", "getSender", "forward", "actorSelection", "getContext", "child", "path", "getSelf", "getContext", "forward", "getTestActor", "getContext", "actorOf", "checkForActivity", "tell", "getRef", "tell", "getRef", "tell", "getRef", "expectMsg", "expectNoMessage", "create"]}, "focal_class": {"identifier": "PolicyPersistenceActor", "superclass": "extends AbstractShardedPersistenceActor<Command, Policy, PolicyId, PolicyId, PolicyEvent>", "interfaces": "", "fields": [{"original_string": "public static final String PERSISTENCE_ID_PREFIX = \"policy:\";", "modifier": "public static final", "type": "String", "declarator": "PERSISTENCE_ID_PREFIX = \"policy:\"", "var_name": "PERSISTENCE_ID_PREFIX"}, {"original_string": "static final String JOURNAL_PLUGIN_ID = \"akka-contrib-mongodb-persistence-policies-journal\";", "modifier": "static final", "type": "String", "declarator": "JOURNAL_PLUGIN_ID = \"akka-contrib-mongodb-persistence-policies-journal\"", "var_name": "JOURNAL_PLUGIN_ID"}, {"original_string": "static final String SNAPSHOT_PLUGIN_ID = \"akka-contrib-mongodb-persistence-policies-snapshots\";", "modifier": "static final", "type": "String", "declarator": "SNAPSHOT_PLUGIN_ID = \"akka-contrib-mongodb-persistence-policies-snapshots\"", "var_name": "SNAPSHOT_PLUGIN_ID"}, {"original_string": "private final ActorRef pubSubMediator;", "modifier": "private final", "type": "ActorRef", "declarator": "pubSubMediator", "var_name": "pubSubMediator"}, {"original_string": "private final PolicyConfig policyConfig;", "modifier": "private final", "type": "PolicyConfig", "declarator": "policyConfig", "var_name": "policyConfig"}], "methods": [{"identifier": "PolicyPersistenceActor", "parameters": "(final PolicyId policyId,\n            final SnapshotAdapter<Policy> snapshotAdapter,\n            final ActorRef pubSubMediator)", "modifiers": "", "return": "", "signature": " PolicyPersistenceActor(final PolicyId policyId,\n            final SnapshotAdapter<Policy> snapshotAdapter,\n            final ActorRef pubSubMediator)", "full_signature": "  PolicyPersistenceActor(final PolicyId policyId,\n            final SnapshotAdapter<Policy> snapshotAdapter,\n            final ActorRef pubSubMediator)", "class_method_signature": "PolicyPersistenceActor.PolicyPersistenceActor(final PolicyId policyId,\n            final SnapshotAdapter<Policy> snapshotAdapter,\n            final ActorRef pubSubMediator)", "testcase": false, "constructor": true}, {"identifier": "props", "parameters": "(final PolicyId policyId,\n            final SnapshotAdapter<Policy> snapshotAdapter,\n            final ActorRef pubSubMediator)", "modifiers": "public static", "return": "Props", "signature": "Props props(final PolicyId policyId,\n            final SnapshotAdapter<Policy> snapshotAdapter,\n            final ActorRef pubSubMediator)", "full_signature": "public static Props props(final PolicyId policyId,\n            final SnapshotAdapter<Policy> snapshotAdapter,\n            final ActorRef pubSubMediator)", "class_method_signature": "PolicyPersistenceActor.props(final PolicyId policyId,\n            final SnapshotAdapter<Policy> snapshotAdapter,\n            final ActorRef pubSubMediator)", "testcase": false, "constructor": false}, {"identifier": "getShardRegion", "parameters": "(final ActorSystem system)", "modifiers": "public static", "return": "ActorRef", "signature": "ActorRef getShardRegion(final ActorSystem system)", "full_signature": "public static ActorRef getShardRegion(final ActorSystem system)", "class_method_signature": "PolicyPersistenceActor.getShardRegion(final ActorSystem system)", "testcase": false, "constructor": false}, {"identifier": "persistenceId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String persistenceId()", "full_signature": "@Override public String persistenceId()", "class_method_signature": "PolicyPersistenceActor.persistenceId()", "testcase": false, "constructor": false}, {"identifier": "journalPluginId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String journalPluginId()", "full_signature": "@Override public String journalPluginId()", "class_method_signature": "PolicyPersistenceActor.journalPluginId()", "testcase": false, "constructor": false}, {"identifier": "snapshotPluginId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String snapshotPluginId()", "full_signature": "@Override public String snapshotPluginId()", "class_method_signature": "PolicyPersistenceActor.snapshotPluginId()", "testcase": false, "constructor": false}, {"identifier": "getEventClass", "parameters": "()", "modifiers": "@Override protected", "return": "Class<PolicyEvent>", "signature": "Class<PolicyEvent> getEventClass()", "full_signature": "@Override protected Class<PolicyEvent> getEventClass()", "class_method_signature": "PolicyPersistenceActor.getEventClass()", "testcase": false, "constructor": false}, {"identifier": "getStrategyContext", "parameters": "()", "modifiers": "@Override protected", "return": "CommandStrategy.Context<PolicyId>", "signature": "CommandStrategy.Context<PolicyId> getStrategyContext()", "full_signature": "@Override protected CommandStrategy.Context<PolicyId> getStrategyContext()", "class_method_signature": "PolicyPersistenceActor.getStrategyContext()", "testcase": false, "constructor": false}, {"identifier": "getCreatedStrategy", "parameters": "()", "modifiers": "@Override protected", "return": "PolicyCommandStrategies", "signature": "PolicyCommandStrategies getCreatedStrategy()", "full_signature": "@Override protected PolicyCommandStrategies getCreatedStrategy()", "class_method_signature": "PolicyPersistenceActor.getCreatedStrategy()", "testcase": false, "constructor": false}, {"identifier": "getDeletedStrategy", "parameters": "()", "modifiers": "@Override protected", "return": "CommandStrategy<? extends Command, Policy, PolicyId, Result<PolicyEvent>>", "signature": "CommandStrategy<? extends Command, Policy, PolicyId, Result<PolicyEvent>> getDeletedStrategy()", "full_signature": "@Override protected CommandStrategy<? extends Command, Policy, PolicyId, Result<PolicyEvent>> getDeletedStrategy()", "class_method_signature": "PolicyPersistenceActor.getDeletedStrategy()", "testcase": false, "constructor": false}, {"identifier": "getEventStrategy", "parameters": "()", "modifiers": "@Override protected", "return": "EventStrategy<PolicyEvent, Policy>", "signature": "EventStrategy<PolicyEvent, Policy> getEventStrategy()", "full_signature": "@Override protected EventStrategy<PolicyEvent, Policy> getEventStrategy()", "class_method_signature": "PolicyPersistenceActor.getEventStrategy()", "testcase": false, "constructor": false}, {"identifier": "getActivityCheckConfig", "parameters": "()", "modifiers": "@Override protected", "return": "ActivityCheckConfig", "signature": "ActivityCheckConfig getActivityCheckConfig()", "full_signature": "@Override protected ActivityCheckConfig getActivityCheckConfig()", "class_method_signature": "PolicyPersistenceActor.getActivityCheckConfig()", "testcase": false, "constructor": false}, {"identifier": "getSnapshotConfig", "parameters": "()", "modifiers": "@Override protected", "return": "SnapshotConfig", "signature": "SnapshotConfig getSnapshotConfig()", "full_signature": "@Override protected SnapshotConfig getSnapshotConfig()", "class_method_signature": "PolicyPersistenceActor.getSnapshotConfig()", "testcase": false, "constructor": false}, {"identifier": "entityExistsAsDeleted", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean entityExistsAsDeleted()", "full_signature": "@Override protected boolean entityExistsAsDeleted()", "class_method_signature": "PolicyPersistenceActor.entityExistsAsDeleted()", "testcase": false, "constructor": false}, {"identifier": "newNotAccessibleExceptionBuilder", "parameters": "()", "modifiers": "@Override protected", "return": "DittoRuntimeExceptionBuilder", "signature": "DittoRuntimeExceptionBuilder newNotAccessibleExceptionBuilder()", "full_signature": "@Override protected DittoRuntimeExceptionBuilder newNotAccessibleExceptionBuilder()", "class_method_signature": "PolicyPersistenceActor.newNotAccessibleExceptionBuilder()", "testcase": false, "constructor": false}, {"identifier": "publishEvent", "parameters": "(final PolicyEvent event)", "modifiers": "@Override protected", "return": "void", "signature": "void publishEvent(final PolicyEvent event)", "full_signature": "@Override protected void publishEvent(final PolicyEvent event)", "class_method_signature": "PolicyPersistenceActor.publishEvent(final PolicyEvent event)", "testcase": false, "constructor": false}, {"identifier": "getEntitySchemaVersion", "parameters": "(final Policy entity)", "modifiers": "@Override protected", "return": "JsonSchemaVersion", "signature": "JsonSchemaVersion getEntitySchemaVersion(final Policy entity)", "full_signature": "@Override protected JsonSchemaVersion getEntitySchemaVersion(final Policy entity)", "class_method_signature": "PolicyPersistenceActor.getEntitySchemaVersion(final Policy entity)", "testcase": false, "constructor": false}], "file": "services/policies/persistence/src/main/java/org/eclipse/ditto/services/policies/persistence/actors/PolicyPersistenceActor.java"}, "focal_method": {"identifier": "props", "parameters": "(final PolicyId policyId,\n            final SnapshotAdapter<Policy> snapshotAdapter,\n            final ActorRef pubSubMediator)", "modifiers": "public static", "return": "Props", "body": "public static Props props(final PolicyId policyId,\n            final SnapshotAdapter<Policy> snapshotAdapter,\n            final ActorRef pubSubMediator) {\n\n        return Props.create(PolicyPersistenceActor.class, policyId, snapshotAdapter, pubSubMediator);\n    }", "signature": "Props props(final PolicyId policyId,\n            final SnapshotAdapter<Policy> snapshotAdapter,\n            final ActorRef pubSubMediator)", "full_signature": "public static Props props(final PolicyId policyId,\n            final SnapshotAdapter<Policy> snapshotAdapter,\n            final ActorRef pubSubMediator)", "class_method_signature": "PolicyPersistenceActor.props(final PolicyId policyId,\n            final SnapshotAdapter<Policy> snapshotAdapter,\n            final ActorRef pubSubMediator)", "testcase": false, "constructor": false, "invocations": ["create"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}