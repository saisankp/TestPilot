{"test_class": {"identifier": "VersionHistoryFacadeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/jcrfacade/version/VersionHistoryFacadeTest.java"}, "test_case": {"identifier": "testRORemoveVersionLabel", "parameters": "()", "modifiers": "@Test(expected = ListenerReadOnlyException.class) public", "return": "void", "body": "@Test(expected = ListenerReadOnlyException.class)\n    public void testRORemoveVersionLabel() throws Exception {\n        VersionHistory delegate = mock(VersionHistory.class);\n        VersionHistoryFacade<Session> facade = getFacade(delegate);\n        facade.removeVersionLabel(\"\");\n    }", "signature": "void testRORemoveVersionLabel()", "full_signature": "@Test(expected = ListenerReadOnlyException.class) public void testRORemoveVersionLabel()", "class_method_signature": "VersionHistoryFacadeTest.testRORemoveVersionLabel()", "testcase": true, "constructor": false, "invocations": ["mock", "getFacade", "removeVersionLabel"]}, "focal_class": {"identifier": "VersionHistoryFacade", "superclass": "extends NodeFacade<VersionHistory, S>", "interfaces": "implements VersionHistory", "fields": [], "methods": [{"identifier": "VersionHistoryFacade", "parameters": "(final @NotNull VersionHistory delegate, final @NotNull SessionFacade<S> session)", "modifiers": "public", "return": "", "signature": " VersionHistoryFacade(final @NotNull VersionHistory delegate, final @NotNull SessionFacade<S> session)", "full_signature": "public  VersionHistoryFacade(final @NotNull VersionHistory delegate, final @NotNull SessionFacade<S> session)", "class_method_signature": "VersionHistoryFacade.VersionHistoryFacade(final @NotNull VersionHistory delegate, final @NotNull SessionFacade<S> session)", "testcase": false, "constructor": true}, {"identifier": "getVersionableUUID", "parameters": "()", "modifiers": "@SuppressWarnings(\"deprecation\") @Override public", "return": "String", "signature": "String getVersionableUUID()", "full_signature": "@SuppressWarnings(\"deprecation\") @Override public String getVersionableUUID()", "class_method_signature": "VersionHistoryFacade.getVersionableUUID()", "testcase": false, "constructor": false}, {"identifier": "getVersionableIdentifier", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getVersionableIdentifier()", "full_signature": "@Override public String getVersionableIdentifier()", "class_method_signature": "VersionHistoryFacade.getVersionableIdentifier()", "testcase": false, "constructor": false}, {"identifier": "hasVersionLabel", "parameters": "(String label)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasVersionLabel(String label)", "full_signature": "@Override public boolean hasVersionLabel(String label)", "class_method_signature": "VersionHistoryFacade.hasVersionLabel(String label)", "testcase": false, "constructor": false}, {"identifier": "hasVersionLabel", "parameters": "(Version version, String label)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasVersionLabel(Version version, String label)", "full_signature": "@Override public boolean hasVersionLabel(Version version, String label)", "class_method_signature": "VersionHistoryFacade.hasVersionLabel(Version version, String label)", "testcase": false, "constructor": false}, {"identifier": "getVersionLabels", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getVersionLabels()", "full_signature": "@Override public String[] getVersionLabels()", "class_method_signature": "VersionHistoryFacade.getVersionLabels()", "testcase": false, "constructor": false}, {"identifier": "getVersionLabels", "parameters": "(Version version)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getVersionLabels(Version version)", "full_signature": "@Override public String[] getVersionLabels(Version version)", "class_method_signature": "VersionHistoryFacade.getVersionLabels(Version version)", "testcase": false, "constructor": false}, {"identifier": "getRootVersion", "parameters": "()", "modifiers": "@Override public", "return": "Version", "signature": "Version getRootVersion()", "full_signature": "@Override public Version getRootVersion()", "class_method_signature": "VersionHistoryFacade.getRootVersion()", "testcase": false, "constructor": false}, {"identifier": "getAllLinearVersions", "parameters": "()", "modifiers": "@Override public", "return": "VersionIterator", "signature": "VersionIterator getAllLinearVersions()", "full_signature": "@Override public VersionIterator getAllLinearVersions()", "class_method_signature": "VersionHistoryFacade.getAllLinearVersions()", "testcase": false, "constructor": false}, {"identifier": "getAllVersions", "parameters": "()", "modifiers": "@Override public", "return": "VersionIterator", "signature": "VersionIterator getAllVersions()", "full_signature": "@Override public VersionIterator getAllVersions()", "class_method_signature": "VersionHistoryFacade.getAllVersions()", "testcase": false, "constructor": false}, {"identifier": "getAllLinearFrozenNodes", "parameters": "()", "modifiers": "@Override public", "return": "NodeIterator", "signature": "NodeIterator getAllLinearFrozenNodes()", "full_signature": "@Override public NodeIterator getAllLinearFrozenNodes()", "class_method_signature": "VersionHistoryFacade.getAllLinearFrozenNodes()", "testcase": false, "constructor": false}, {"identifier": "getAllFrozenNodes", "parameters": "()", "modifiers": "@Override public", "return": "NodeIterator", "signature": "NodeIterator getAllFrozenNodes()", "full_signature": "@Override public NodeIterator getAllFrozenNodes()", "class_method_signature": "VersionHistoryFacade.getAllFrozenNodes()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "(String versionName)", "modifiers": "@Override public", "return": "Version", "signature": "Version getVersion(String versionName)", "full_signature": "@Override public Version getVersion(String versionName)", "class_method_signature": "VersionHistoryFacade.getVersion(String versionName)", "testcase": false, "constructor": false}, {"identifier": "getVersionByLabel", "parameters": "(String label)", "modifiers": "@Override public", "return": "Version", "signature": "Version getVersionByLabel(String label)", "full_signature": "@Override public Version getVersionByLabel(String label)", "class_method_signature": "VersionHistoryFacade.getVersionByLabel(String label)", "testcase": false, "constructor": false}, {"identifier": "addVersionLabel", "parameters": "(String versionName, String label, boolean moveLabel)", "modifiers": "@Override public", "return": "void", "signature": "void addVersionLabel(String versionName, String label, boolean moveLabel)", "full_signature": "@Override public void addVersionLabel(String versionName, String label, boolean moveLabel)", "class_method_signature": "VersionHistoryFacade.addVersionLabel(String versionName, String label, boolean moveLabel)", "testcase": false, "constructor": false}, {"identifier": "removeVersionLabel", "parameters": "(String label)", "modifiers": "@Override public", "return": "void", "signature": "void removeVersionLabel(String label)", "full_signature": "@Override public void removeVersionLabel(String label)", "class_method_signature": "VersionHistoryFacade.removeVersionLabel(String label)", "testcase": false, "constructor": false}, {"identifier": "removeVersion", "parameters": "(String versionName)", "modifiers": "@Override public", "return": "void", "signature": "void removeVersion(String versionName)", "full_signature": "@Override public void removeVersion(String versionName)", "class_method_signature": "VersionHistoryFacade.removeVersion(String versionName)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/jcrfacade/version/VersionHistoryFacade.java"}, "focal_method": {"identifier": "removeVersionLabel", "parameters": "(String label)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void removeVersionLabel(String label) throws RepositoryException {\n        throw new ListenerReadOnlyException();\n    }", "signature": "void removeVersionLabel(String label)", "full_signature": "@Override public void removeVersionLabel(String label)", "class_method_signature": "VersionHistoryFacade.removeVersionLabel(String label)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}