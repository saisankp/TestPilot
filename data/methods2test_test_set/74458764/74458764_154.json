{"test_class": {"identifier": "TestHttpRequestWrapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NEW_SESSION_ID = \"11\";", "modifier": "private static final", "type": "String", "declarator": "NEW_SESSION_ID = \"11\"", "var_name": "NEW_SESSION_ID"}, {"original_string": "private static final String SESSION_ID     = \"10\";", "modifier": "private static final", "type": "String", "declarator": "SESSION_ID     = \"10\"", "var_name": "SESSION_ID"}, {"original_string": "private ServletContext      servletContext;", "modifier": "private", "type": "ServletContext", "declarator": "servletContext", "var_name": "servletContext"}, {"original_string": "private SessionManager      sessionManager;", "modifier": "private", "type": "SessionManager", "declarator": "sessionManager", "var_name": "sessionManager"}], "file": "session-replacement/src/test/java/com/amadeus/session/servlet/TestHttpRequestWrapper.java"}, "test_case": {"identifier": "testNewSessionIdCreatedIfSessionWasInvalidated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNewSessionIdCreatedIfSessionWasInvalidated() {\n    HttpServletRequest wrappedSimple = mock(HttpServletRequest.class);\n    RepositoryBackedHttpSession invalidSession = mock(RepositoryBackedHttpSession.class);\n    RepositoryBackedHttpSession newSession = mock(RepositoryBackedHttpSession.class);\n    when(newSession.getId()).thenReturn(NEW_SESSION_ID);\n    when(invalidSession.getId()).thenReturn(SESSION_ID);\n    when(invalidSession.isValid()).thenReturn(false);\n    HttpRequestWrapper wrappedHttpRequestWrapper = spy(new HttpRequestWrapper(wrappedSimple, servletContext));\n    wrappedHttpRequestWrapper.session = invalidSession;\n    HttpServletRequest wrappedComplex = new HttpServletRequestWrapper(wrappedHttpRequestWrapper);\n    HttpRequestWrapper req = new HttpRequestWrapper(wrappedComplex, servletContext);\n    when(sessionManager.getSession(req, true, new SessionTracking.IdAndSource(SESSION_ID, false))).thenReturn(invalidSession);\n    when(sessionManager.getSession(req, true, null)).thenReturn(newSession);\n    RepositoryBackedHttpSession session2 = req.getSession();\n    Assert.assertNotNull(session2);\n    assertEquals(NEW_SESSION_ID, session2.getId());\n  }", "signature": "void testNewSessionIdCreatedIfSessionWasInvalidated()", "full_signature": "@Test public void testNewSessionIdCreatedIfSessionWasInvalidated()", "class_method_signature": "TestHttpRequestWrapper.testNewSessionIdCreatedIfSessionWasInvalidated()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "getId", "thenReturn", "when", "getId", "thenReturn", "when", "isValid", "spy", "thenReturn", "when", "getSession", "thenReturn", "when", "getSession", "getSession", "assertNotNull", "assertEquals", "getId"]}, "focal_class": {"identifier": "HttpRequestWrapper", "superclass": "extends HttpServletRequestWrapper", "interfaces": "implements RequestWithSession", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(HttpRequestWrapper.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HttpRequestWrapper.class)", "var_name": "logger"}, {"original_string": "RepositoryBackedHttpSession session;", "modifier": "", "type": "RepositoryBackedHttpSession", "declarator": "session", "var_name": "session"}, {"original_string": "boolean committed;", "modifier": "", "type": "boolean", "declarator": "committed", "var_name": "committed"}, {"original_string": "private HttpResponseWrapper response;", "modifier": "private", "type": "HttpResponseWrapper", "declarator": "response", "var_name": "response"}, {"original_string": "private final HttpRequestWrapper embeddedRequest;", "modifier": "private final", "type": "HttpRequestWrapper", "declarator": "embeddedRequest", "var_name": "embeddedRequest"}, {"original_string": "private final SessionManager manager;", "modifier": "private final", "type": "SessionManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private final ServletContext servletContext;", "modifier": "private final", "type": "ServletContext", "declarator": "servletContext", "var_name": "servletContext"}, {"original_string": "private boolean propagateOnCreate;", "modifier": "private", "type": "boolean", "declarator": "propagateOnCreate", "var_name": "propagateOnCreate"}, {"original_string": "private boolean propagated;", "modifier": "private", "type": "boolean", "declarator": "propagated", "var_name": "propagated"}, {"original_string": "private boolean idRetrieved;", "modifier": "private", "type": "boolean", "declarator": "idRetrieved", "var_name": "idRetrieved"}, {"original_string": "private String retrievedId;", "modifier": "private", "type": "String", "declarator": "retrievedId", "var_name": "retrievedId"}, {"original_string": "private boolean isRetrievedIdFromCookie;", "modifier": "private", "type": "boolean", "declarator": "isRetrievedIdFromCookie", "var_name": "isRetrievedIdFromCookie"}, {"original_string": "private boolean repositoryChecked;", "modifier": "private", "type": "boolean", "declarator": "repositoryChecked", "var_name": "repositoryChecked"}], "methods": [{"identifier": "HttpRequestWrapper", "parameters": "(HttpServletRequest req, ServletContext servletContext)", "modifiers": "public", "return": "", "signature": " HttpRequestWrapper(HttpServletRequest req, ServletContext servletContext)", "full_signature": "public  HttpRequestWrapper(HttpServletRequest req, ServletContext servletContext)", "class_method_signature": "HttpRequestWrapper.HttpRequestWrapper(HttpServletRequest req, ServletContext servletContext)", "testcase": false, "constructor": true}, {"identifier": "getSession", "parameters": "()", "modifiers": "@Override public", "return": "RepositoryBackedHttpSession", "signature": "RepositoryBackedHttpSession getSession()", "full_signature": "@Override public RepositoryBackedHttpSession getSession()", "class_method_signature": "HttpRequestWrapper.getSession()", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "(boolean create)", "modifiers": "@Override public", "return": "RepositoryBackedHttpSession", "signature": "RepositoryBackedHttpSession getSession(boolean create)", "full_signature": "@Override public RepositoryBackedHttpSession getSession(boolean create)", "class_method_signature": "HttpRequestWrapper.getSession(boolean create)", "testcase": false, "constructor": false}, {"identifier": "getManager", "parameters": "()", "modifiers": "public", "return": "SessionManager", "signature": "SessionManager getManager()", "full_signature": "public SessionManager getManager()", "class_method_signature": "HttpRequestWrapper.getManager()", "testcase": false, "constructor": false}, {"identifier": "getResponse", "parameters": "()", "modifiers": "public", "return": "HttpResponseWrapper", "signature": "HttpResponseWrapper getResponse()", "full_signature": "public HttpResponseWrapper getResponse()", "class_method_signature": "HttpRequestWrapper.getResponse()", "testcase": false, "constructor": false}, {"identifier": "setResponse", "parameters": "(HttpResponseWrapper response)", "modifiers": "public", "return": "void", "signature": "void setResponse(HttpResponseWrapper response)", "full_signature": "public void setResponse(HttpResponseWrapper response)", "class_method_signature": "HttpRequestWrapper.setResponse(HttpResponseWrapper response)", "testcase": false, "constructor": false}, {"identifier": "propagateSession", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean propagateSession()", "full_signature": " boolean propagateSession()", "class_method_signature": "HttpRequestWrapper.propagateSession()", "testcase": false, "constructor": false}, {"identifier": "doPropagateAndStoreIfFirstWrapper", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean doPropagateAndStoreIfFirstWrapper()", "full_signature": "private boolean doPropagateAndStoreIfFirstWrapper()", "class_method_signature": "HttpRequestWrapper.doPropagateAndStoreIfFirstWrapper()", "testcase": false, "constructor": false}, {"identifier": "isDirty", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isDirty()", "full_signature": "private boolean isDirty()", "class_method_signature": "HttpRequestWrapper.isDirty()", "testcase": false, "constructor": false}, {"identifier": "retrieveSessionIfNeeded", "parameters": "(boolean create)", "modifiers": "", "return": "void", "signature": "void retrieveSessionIfNeeded(boolean create)", "full_signature": " void retrieveSessionIfNeeded(boolean create)", "class_method_signature": "HttpRequestWrapper.retrieveSessionIfNeeded(boolean create)", "testcase": false, "constructor": false}, {"identifier": "getEmbededdSessionId", "parameters": "()", "modifiers": "private", "return": "SessionTracking.IdAndSource", "signature": "SessionTracking.IdAndSource getEmbededdSessionId()", "full_signature": "private SessionTracking.IdAndSource getEmbededdSessionId()", "class_method_signature": "HttpRequestWrapper.getEmbededdSessionId()", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void commit()", "full_signature": "public void commit()", "class_method_signature": "HttpRequestWrapper.commit()", "testcase": false, "constructor": false}, {"identifier": "doCommit", "parameters": "()", "modifiers": "", "return": "void", "signature": "void doCommit()", "full_signature": " void doCommit()", "class_method_signature": "HttpRequestWrapper.doCommit()", "testcase": false, "constructor": false}, {"identifier": "storeSession", "parameters": "()", "modifiers": "", "return": "void", "signature": "void storeSession()", "full_signature": " void storeSession()", "class_method_signature": "HttpRequestWrapper.storeSession()", "testcase": false, "constructor": false}, {"identifier": "getRepositoryBackedSession", "parameters": "(boolean create)", "modifiers": "@Override public", "return": "RepositoryBackedHttpSession", "signature": "RepositoryBackedHttpSession getRepositoryBackedSession(boolean create)", "full_signature": "@Override public RepositoryBackedHttpSession getRepositoryBackedSession(boolean create)", "class_method_signature": "HttpRequestWrapper.getRepositoryBackedSession(boolean create)", "testcase": false, "constructor": false}, {"identifier": "getServletContext", "parameters": "()", "modifiers": "@Override public", "return": "ServletContext", "signature": "ServletContext getServletContext()", "full_signature": "@Override public ServletContext getServletContext()", "class_method_signature": "HttpRequestWrapper.getServletContext()", "testcase": false, "constructor": false}, {"identifier": "getEmbeddedRequest", "parameters": "()", "modifiers": "public", "return": "HttpRequestWrapper", "signature": "HttpRequestWrapper getEmbeddedRequest()", "full_signature": "public HttpRequestWrapper getEmbeddedRequest()", "class_method_signature": "HttpRequestWrapper.getEmbeddedRequest()", "testcase": false, "constructor": false}, {"identifier": "isPropagateOnCreate", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPropagateOnCreate()", "full_signature": "public boolean isPropagateOnCreate()", "class_method_signature": "HttpRequestWrapper.isPropagateOnCreate()", "testcase": false, "constructor": false}, {"identifier": "setPropagateOnCreate", "parameters": "(boolean propagate)", "modifiers": "public", "return": "void", "signature": "void setPropagateOnCreate(boolean propagate)", "full_signature": "public void setPropagateOnCreate(boolean propagate)", "class_method_signature": "HttpRequestWrapper.setPropagateOnCreate(boolean propagate)", "testcase": false, "constructor": false}, {"identifier": "isIdRetrieved", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isIdRetrieved()", "full_signature": "@Override public boolean isIdRetrieved()", "class_method_signature": "HttpRequestWrapper.isIdRetrieved()", "testcase": false, "constructor": false}, {"identifier": "setRequestedSessionId", "parameters": "(String id, boolean isFromCookie)", "modifiers": "@Override public", "return": "void", "signature": "void setRequestedSessionId(String id, boolean isFromCookie)", "full_signature": "@Override public void setRequestedSessionId(String id, boolean isFromCookie)", "class_method_signature": "HttpRequestWrapper.setRequestedSessionId(String id, boolean isFromCookie)", "testcase": false, "constructor": false}, {"identifier": "getRequestedSessionId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRequestedSessionId()", "full_signature": "@Override public String getRequestedSessionId()", "class_method_signature": "HttpRequestWrapper.getRequestedSessionId()", "testcase": false, "constructor": false}, {"identifier": "retrieveSessionId", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void retrieveSessionId()", "full_signature": "private void retrieveSessionId()", "class_method_signature": "HttpRequestWrapper.retrieveSessionId()", "testcase": false, "constructor": false}, {"identifier": "isRequestedSessionIdFromCookie", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRequestedSessionIdFromCookie()", "full_signature": "@Override public boolean isRequestedSessionIdFromCookie()", "class_method_signature": "HttpRequestWrapper.isRequestedSessionIdFromCookie()", "testcase": false, "constructor": false}, {"identifier": "isRequestedSessionIdFromURL", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRequestedSessionIdFromURL()", "full_signature": "@Override public boolean isRequestedSessionIdFromURL()", "class_method_signature": "HttpRequestWrapper.isRequestedSessionIdFromURL()", "testcase": false, "constructor": false}, {"identifier": "isRequestedSessionIdFromUrl", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRequestedSessionIdFromUrl()", "full_signature": "@Override public boolean isRequestedSessionIdFromUrl()", "class_method_signature": "HttpRequestWrapper.isRequestedSessionIdFromUrl()", "testcase": false, "constructor": false}, {"identifier": "isRequestedSessionIdValid", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRequestedSessionIdValid()", "full_signature": "@Override public boolean isRequestedSessionIdValid()", "class_method_signature": "HttpRequestWrapper.isRequestedSessionIdValid()", "testcase": false, "constructor": false}, {"identifier": "isRepositoryChecked", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRepositoryChecked()", "full_signature": "@Override public boolean isRepositoryChecked()", "class_method_signature": "HttpRequestWrapper.isRepositoryChecked()", "testcase": false, "constructor": false}, {"identifier": "repositoryChecked", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void repositoryChecked()", "full_signature": "@Override public void repositoryChecked()", "class_method_signature": "HttpRequestWrapper.repositoryChecked()", "testcase": false, "constructor": false}, {"identifier": "encodeURL", "parameters": "(String url)", "modifiers": "public", "return": "String", "signature": "String encodeURL(String url)", "full_signature": "public String encodeURL(String url)", "class_method_signature": "HttpRequestWrapper.encodeURL(String url)", "testcase": false, "constructor": false}, {"identifier": "changeSessionId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String changeSessionId()", "full_signature": "@Override public String changeSessionId()", "class_method_signature": "HttpRequestWrapper.changeSessionId()", "testcase": false, "constructor": false}], "file": "session-replacement/src/main/java/com/amadeus/session/servlet/HttpRequestWrapper.java"}, "focal_method": {"identifier": "getSession", "parameters": "()", "modifiers": "@Override public", "return": "RepositoryBackedHttpSession", "body": "@Override\n  public RepositoryBackedHttpSession getSession() {\n    return getSession(true);\n  }", "signature": "RepositoryBackedHttpSession getSession()", "full_signature": "@Override public RepositoryBackedHttpSession getSession()", "class_method_signature": "HttpRequestWrapper.getSession()", "testcase": false, "constructor": false, "invocations": ["getSession"]}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}