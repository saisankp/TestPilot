{"test_class": {"identifier": "TestVSensorLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static StorageManager sm = null;", "modifier": "private static", "type": "StorageManager", "declarator": "sm = null", "var_name": "sm"}, {"original_string": "private AddressBean[] addressing= new AddressBean[] {new AddressBean(\"mock-test\")};", "modifier": "private", "type": "AddressBean[]", "declarator": "addressing= new AddressBean[] {new AddressBean(\"mock-test\")}", "var_name": "addressing"}], "file": "gsn-core/src/test/java/ch/epfl/gsn/TestVSensorLoader.java"}, "test_case": {"identifier": "testPrepareWrapper", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPrepareWrapper() throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n\t\tVSensorLoader loader = new VSensorLoader();\n\t\tMockWrapper wrapper = (MockWrapper) loader.createWrapper(addressing[0]);\n\t\tassertNotNull(wrapper);\n\t}", "signature": "void testPrepareWrapper()", "full_signature": "@Test public void testPrepareWrapper()", "class_method_signature": "TestVSensorLoader.testPrepareWrapper()", "testcase": true, "constructor": false, "invocations": ["createWrapper", "assertNotNull"]}, "focal_class": {"identifier": "VSensorLoader", "superclass": "extends Thread", "interfaces": "", "fields": [{"original_string": "public static final String VSENSOR_POOL = \"VSENSOR-POOL\";", "modifier": "public static final", "type": "String", "declarator": "VSENSOR_POOL = \"VSENSOR-POOL\"", "var_name": "VSENSOR_POOL"}, {"original_string": "public static final String STREAM_SOURCE = \"STREAM-SOURCE\";", "modifier": "public static final", "type": "String", "declarator": "STREAM_SOURCE = \"STREAM-SOURCE\"", "var_name": "STREAM_SOURCE"}, {"original_string": "public static final String INPUT_STREAM = \"INPUT-STREAM\";", "modifier": "public static final", "type": "String", "declarator": "INPUT_STREAM = \"INPUT-STREAM\"", "var_name": "INPUT_STREAM"}, {"original_string": "private String pluginsDir;", "modifier": "private", "type": "String", "declarator": "pluginsDir", "var_name": "pluginsDir"}, {"original_string": "private boolean isActive = true;", "modifier": "private", "type": "boolean", "declarator": "isActive = true", "var_name": "isActive"}, {"original_string": "private ArrayList<VSensorStateChangeListener> changeListeners = new ArrayList<VSensorStateChangeListener>();", "modifier": "private", "type": "ArrayList<VSensorStateChangeListener>", "declarator": "changeListeners = new ArrayList<VSensorStateChangeListener>()", "var_name": "changeListeners"}, {"original_string": "private static int VSENSOR_LOADER_THREAD_COUNTER = 0;", "modifier": "private static", "type": "int", "declarator": "VSENSOR_LOADER_THREAD_COUNTER = 0", "var_name": "VSENSOR_LOADER_THREAD_COUNTER"}, {"original_string": "private static VSensorLoader singleton = null;", "modifier": "private static", "type": "VSensorLoader", "declarator": "singleton = null", "var_name": "singleton"}, {"original_string": "private static transient Logger logger = LoggerFactory.getLogger ( VSensorLoader.class );", "modifier": "private static transient", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger ( VSensorLoader.class )", "var_name": "logger"}], "methods": [{"identifier": "addVSensorStateChangeListener", "parameters": "(VSensorStateChangeListener listener)", "modifiers": "public", "return": "void", "signature": "void addVSensorStateChangeListener(VSensorStateChangeListener listener)", "full_signature": "public void addVSensorStateChangeListener(VSensorStateChangeListener listener)", "class_method_signature": "VSensorLoader.addVSensorStateChangeListener(VSensorStateChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeVSensorStateChangeListener", "parameters": "(VSensorStateChangeListener listener)", "modifiers": "public", "return": "void", "signature": "void removeVSensorStateChangeListener(VSensorStateChangeListener listener)", "full_signature": "public void removeVSensorStateChangeListener(VSensorStateChangeListener listener)", "class_method_signature": "VSensorLoader.removeVSensorStateChangeListener(VSensorStateChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "fireVSensorLoading", "parameters": "(VSensorConfig config)", "modifiers": "public", "return": "boolean", "signature": "boolean fireVSensorLoading(VSensorConfig config)", "full_signature": "public boolean fireVSensorLoading(VSensorConfig config)", "class_method_signature": "VSensorLoader.fireVSensorLoading(VSensorConfig config)", "testcase": false, "constructor": false}, {"identifier": "fireVSensorUnLoading", "parameters": "(VSensorConfig config)", "modifiers": "public", "return": "boolean", "signature": "boolean fireVSensorUnLoading(VSensorConfig config)", "full_signature": "public boolean fireVSensorUnLoading(VSensorConfig config)", "class_method_signature": "VSensorLoader.fireVSensorUnLoading(VSensorConfig config)", "testcase": false, "constructor": false}, {"identifier": "VSensorLoader", "parameters": "()", "modifiers": "public", "return": "", "signature": " VSensorLoader()", "full_signature": "public  VSensorLoader()", "class_method_signature": "VSensorLoader.VSensorLoader()", "testcase": false, "constructor": true}, {"identifier": "VSensorLoader", "parameters": "( String pluginsPath )", "modifiers": "public", "return": "", "signature": " VSensorLoader( String pluginsPath )", "full_signature": "public  VSensorLoader( String pluginsPath )", "class_method_signature": "VSensorLoader.VSensorLoader( String pluginsPath )", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "(String path)", "modifiers": "public static", "return": "VSensorLoader", "signature": "VSensorLoader getInstance(String path)", "full_signature": "public static VSensorLoader getInstance(String path)", "class_method_signature": "VSensorLoader.getInstance(String path)", "testcase": false, "constructor": false}, {"identifier": "startLoading", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startLoading()", "full_signature": "public void startLoading()", "class_method_signature": "VSensorLoader.startLoading()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "( )", "modifiers": "public", "return": "void", "signature": "void run( )", "full_signature": "public void run( )", "class_method_signature": "VSensorLoader.run( )", "testcase": false, "constructor": false}, {"identifier": "loadVirtualSensor", "parameters": "(String vsConfigurationFileContent, String fileName)", "modifiers": "public synchronized", "return": "void", "signature": "void loadVirtualSensor(String vsConfigurationFileContent, String fileName)", "full_signature": "public synchronized void loadVirtualSensor(String vsConfigurationFileContent, String fileName)", "class_method_signature": "VSensorLoader.loadVirtualSensor(String vsConfigurationFileContent, String fileName)", "testcase": false, "constructor": false}, {"identifier": "getVSConfigurationFilePath", "parameters": "(String fileName)", "modifiers": "public static", "return": "String", "signature": "String getVSConfigurationFilePath(String fileName)", "full_signature": "public static String getVSConfigurationFilePath(String fileName)", "class_method_signature": "VSensorLoader.getVSConfigurationFilePath(String fileName)", "testcase": false, "constructor": false}, {"identifier": "loadPlugin", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void loadPlugin()", "full_signature": "public synchronized void loadPlugin()", "class_method_signature": "VSensorLoader.loadPlugin()", "testcase": false, "constructor": false}, {"identifier": "loadPlugin", "parameters": "(String fileFilterName)", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean loadPlugin(String fileFilterName)", "full_signature": "public synchronized boolean loadPlugin(String fileFilterName)", "class_method_signature": "VSensorLoader.loadPlugin(String fileFilterName)", "testcase": false, "constructor": false}, {"identifier": "loadPlugin", "parameters": "(VSensorConfig vs)", "modifiers": "private synchronized", "return": "boolean", "signature": "boolean loadPlugin(VSensorConfig vs)", "full_signature": "private synchronized boolean loadPlugin(VSensorConfig vs)", "class_method_signature": "VSensorLoader.loadPlugin(VSensorConfig vs)", "testcase": false, "constructor": false}, {"identifier": "removeVirtualSensor", "parameters": "(VSensorConfig configFile)", "modifiers": "private", "return": "void", "signature": "void removeVirtualSensor(VSensorConfig configFile)", "full_signature": "private void removeVirtualSensor(VSensorConfig configFile)", "class_method_signature": "VSensorLoader.removeVirtualSensor(VSensorConfig configFile)", "testcase": false, "constructor": false}, {"identifier": "isVirtualSensorValid", "parameters": "(VSensorConfig configuration)", "modifiers": "public", "return": "boolean", "signature": "boolean isVirtualSensorValid(VSensorConfig configuration)", "full_signature": "public boolean isVirtualSensorValid(VSensorConfig configuration)", "class_method_signature": "VSensorLoader.isVirtualSensorValid(VSensorConfig configuration)", "testcase": false, "constructor": false}, {"identifier": "isValidJavaIdentifier", "parameters": "(final String name)", "modifiers": "static protected", "return": "boolean", "signature": "boolean isValidJavaIdentifier(final String name)", "full_signature": "static protected boolean isValidJavaIdentifier(final String name)", "class_method_signature": "VSensorLoader.isValidJavaIdentifier(final String name)", "testcase": false, "constructor": false}, {"identifier": "removeAllVSResources", "parameters": "( VirtualSensor pool )", "modifiers": "public", "return": "void", "signature": "void removeAllVSResources( VirtualSensor pool )", "full_signature": "public void removeAllVSResources( VirtualSensor pool )", "class_method_signature": "VSensorLoader.removeAllVSResources( VirtualSensor pool )", "testcase": false, "constructor": false}, {"identifier": "releaseStreamSource", "parameters": "(StreamSource streamSource)", "modifiers": "public", "return": "void", "signature": "void releaseStreamSource(StreamSource streamSource)", "full_signature": "public void releaseStreamSource(StreamSource streamSource)", "class_method_signature": "VSensorLoader.releaseStreamSource(StreamSource streamSource)", "testcase": false, "constructor": false}, {"identifier": "getUpdateStatus", "parameters": "(String virtualSensorsPath)", "modifiers": "public static", "return": "Modifications", "signature": "Modifications getUpdateStatus(String virtualSensorsPath)", "full_signature": "public static Modifications getUpdateStatus(String virtualSensorsPath)", "class_method_signature": "VSensorLoader.getUpdateStatus(String virtualSensorsPath)", "testcase": false, "constructor": false}, {"identifier": "getUpdateStatus", "parameters": "(String virtualSensorsPath, String filterFileName)", "modifiers": "public static", "return": "Modifications", "signature": "Modifications getUpdateStatus(String virtualSensorsPath, String filterFileName)", "full_signature": "public static Modifications getUpdateStatus(String virtualSensorsPath, String filterFileName)", "class_method_signature": "VSensorLoader.getUpdateStatus(String virtualSensorsPath, String filterFileName)", "testcase": false, "constructor": false}, {"identifier": "createInputStreams", "parameters": "( VirtualSensor pool )", "modifiers": "public", "return": "boolean", "signature": "boolean createInputStreams( VirtualSensor pool )", "full_signature": "public boolean createInputStreams( VirtualSensor pool )", "class_method_signature": "VSensorLoader.createInputStreams( VirtualSensor pool )", "testcase": false, "constructor": false}, {"identifier": "createWrapper", "parameters": "(AddressBean addressBean)", "modifiers": "public", "return": "AbstractWrapper", "signature": "AbstractWrapper createWrapper(AddressBean addressBean)", "full_signature": "public AbstractWrapper createWrapper(AddressBean addressBean)", "class_method_signature": "VSensorLoader.createWrapper(AddressBean addressBean)", "testcase": false, "constructor": false}, {"identifier": "prepareStreamSource", "parameters": "( VSensorConfig vsensorConfig,InputStream inputStream , StreamSource streamSource  )", "modifiers": "public", "return": "boolean", "signature": "boolean prepareStreamSource( VSensorConfig vsensorConfig,InputStream inputStream , StreamSource streamSource  )", "full_signature": "public boolean prepareStreamSource( VSensorConfig vsensorConfig,InputStream inputStream , StreamSource streamSource  )", "class_method_signature": "VSensorLoader.prepareStreamSource( VSensorConfig vsensorConfig,InputStream inputStream , StreamSource streamSource  )", "testcase": false, "constructor": false}, {"identifier": "prepareStreamSource", "parameters": "( StreamSource streamSource ,DataField[] outputformat, AbstractWrapper wrapper )", "modifiers": "public", "return": "boolean", "signature": "boolean prepareStreamSource( StreamSource streamSource ,DataField[] outputformat, AbstractWrapper wrapper )", "full_signature": "public boolean prepareStreamSource( StreamSource streamSource ,DataField[] outputformat, AbstractWrapper wrapper )", "class_method_signature": "VSensorLoader.prepareStreamSource( StreamSource streamSource ,DataField[] outputformat, AbstractWrapper wrapper )", "testcase": false, "constructor": false}, {"identifier": "stopLoading", "parameters": "( )", "modifiers": "public", "return": "void", "signature": "void stopLoading( )", "full_signature": "public void stopLoading( )", "class_method_signature": "VSensorLoader.stopLoading( )", "testcase": false, "constructor": false}], "file": "gsn-core/src/main/java/ch/epfl/gsn/VSensorLoader.java"}, "focal_method": {"identifier": "createWrapper", "parameters": "(AddressBean addressBean)", "modifiers": "public", "return": "AbstractWrapper", "body": "public AbstractWrapper createWrapper(AddressBean addressBean) throws InstantiationException, IllegalAccessException {\n\n\t\t\tif ( Main.getWrapperClass ( addressBean.getWrapper ( ) ) == null ) {\n\t\t\t\tlogger.error ( \"The wrapper >\" + addressBean.getWrapper ( ) + \"< is not defined in the >\" + WrappersUtil.DEFAULT_WRAPPER_PROPERTIES_FILE + \"< file.\" );\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tAbstractWrapper wrapper = ( AbstractWrapper ) Main.getWrapperClass ( addressBean.getWrapper ( ) ).newInstance ( );\n\t\t\twrapper.setActiveAddressBean ( addressBean );\n\t\t\tboolean initializationResult = wrapper.initialize_wrapper (  );\n\t\t\tif ( initializationResult == false )\n\t\t\t\treturn null;\n\t\t\ttry {\n\t\t\t\tlogger.debug(\"Wrapper name: \"+wrapper.getWrapperName()+ \" -- view name \"+ wrapper.getDBAliasInStr());\n\t\t\t\tif (!Main.getWindowStorage().tableExists(wrapper.getDBAliasInStr(),wrapper.getOutputFormat()))\n\t\t\t\t\tMain.getWindowStorage().executeCreateTable ( wrapper.getDBAliasInStr ( ) , wrapper.getOutputFormat ( ),wrapper.isTimeStampUnique() );\n\t\t\t} catch ( Exception e ) {\n\t\t\t\ttry{\n\t\t\t\twrapper.releaseResources();  //releasing resources\n\t\t\t\t}catch (SQLException sql){\n\t\t\t\t\tlogger.error ( sql.getMessage ( ) , sql );\n\t\t\t\t}\n\t\t\t\tlogger.error ( e.getMessage ( ) , e );\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn wrapper;\n\t}", "signature": "AbstractWrapper createWrapper(AddressBean addressBean)", "full_signature": "public AbstractWrapper createWrapper(AddressBean addressBean)", "class_method_signature": "VSensorLoader.createWrapper(AddressBean addressBean)", "testcase": false, "constructor": false, "invocations": ["getWrapperClass", "getWrapper", "error", "getWrapper", "newInstance", "getWrapperClass", "getWrapper", "setActiveAddressBean", "initialize_wrapper", "debug", "getWrapperName", "getDBAliasInStr", "tableExists", "getWindowStorage", "getDBAliasInStr", "getOutputFormat", "executeCreateTable", "getWindowStorage", "getDBAliasInStr", "getOutputFormat", "isTimeStampUnique", "releaseResources", "error", "getMessage", "error", "getMessage"]}, "repository": {"repo_id": 16885508, "url": "https://github.com/LSIR/gsn", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 51, "size": 375887, "license": "licensed"}}