{"test_class": {"identifier": "OsmNogoPolygonTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int OFFSET_X = 11000000;", "modifier": "static final", "type": "int", "declarator": "OFFSET_X = 11000000", "var_name": "OFFSET_X"}, {"original_string": "static final int OFFSET_Y = 50000000;", "modifier": "static final", "type": "int", "declarator": "OFFSET_Y = 50000000", "var_name": "OFFSET_Y"}, {"original_string": "static OsmNogoPolygon polygon;", "modifier": "static", "type": "OsmNogoPolygon", "declarator": "polygon", "var_name": "polygon"}, {"original_string": "static OsmNogoPolygon polyline;", "modifier": "static", "type": "OsmNogoPolygon", "declarator": "polyline", "var_name": "polyline"}, {"original_string": "static final double[] lons = {  1.0,  1.0,  0.5, 0.5, 1.0, 1.0, -1.1, -1.0 };", "modifier": "static final", "type": "double[]", "declarator": "lons = {  1.0,  1.0,  0.5, 0.5, 1.0, 1.0, -1.1, -1.0 }", "var_name": "lons"}, {"original_string": "static final double[] lats = { -1.0, -0.1, -0.1, 0.1, 0.1, 1.0,  1.1, -1.0 };", "modifier": "static final", "type": "double[]", "declarator": "lats = { -1.0, -0.1, -0.1, 0.1, 0.1, 1.0,  1.1, -1.0 }", "var_name": "lats"}], "file": "brouter-core/src/test/java/btools/router/OsmNogoPolygonTest.java"}, "test_case": {"identifier": "testIntersectsPolygon", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIntersectsPolygon() {\n    double[] p0lons  = {   0.0,   1.0,  -0.5,  0.5,  0.7,  0.7,  0.7,  -1.5, -1.5,  0.0 };\n    double[] p0lats  = {   0.0,   0.0,   0.5,  0.5,  0.5,  0.05, 0.05, -1.5,  0.2,  0.0 };\n    double[] p1lons  = {   0.0,   1.0,   0.5,  1.0,  0.7,  0.7,  0.7,  -0.5, -0.2,  0.5 };\n    double[] p1lats  = {   0.0,   0.0,   0.5,  0.5, -0.5, -0.5, -0.05, -0.5,  1.5, -1.5 };\n    boolean[] within = { false, false, false, true, true, true, false, true, true, true };\n\n    for (int i=0; i<p0lons.length; i++) {\n      assertEquals(\"(\"+p0lons[i]+\",\"+p0lats[i]+\")-(\"+p1lons[i]+\",\"+p1lats[i]+\")\",within[i],polygon.intersects(toOsmLon(p0lons[i], OFFSET_X), toOsmLat(p0lats[i], OFFSET_Y), toOsmLon(p1lons[i], OFFSET_X), toOsmLat(p1lats[i], OFFSET_Y)));\n    }\n  }", "signature": "void testIntersectsPolygon()", "full_signature": "@Test public void testIntersectsPolygon()", "class_method_signature": "OsmNogoPolygonTest.testIntersectsPolygon()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "intersects", "toOsmLon", "toOsmLat", "toOsmLon", "toOsmLat"]}, "focal_class": {"identifier": "OsmNogoPolygon", "superclass": "extends OsmNodeNamed", "interfaces": "", "fields": [{"original_string": "public final List<Point> points = new ArrayList<Point>();", "modifier": "public final", "type": "List<Point>", "declarator": "points = new ArrayList<Point>()", "var_name": "points"}, {"original_string": "public final boolean isClosed;", "modifier": "public final", "type": "boolean", "declarator": "isClosed", "var_name": "isClosed"}], "methods": [{"identifier": "OsmNogoPolygon", "parameters": "(boolean closed)", "modifiers": "public", "return": "", "signature": " OsmNogoPolygon(boolean closed)", "full_signature": "public  OsmNogoPolygon(boolean closed)", "class_method_signature": "OsmNogoPolygon.OsmNogoPolygon(boolean closed)", "testcase": false, "constructor": true}, {"identifier": "addVertex", "parameters": "(int lon, int lat)", "modifiers": "public final", "return": "void", "signature": "void addVertex(int lon, int lat)", "full_signature": "public final void addVertex(int lon, int lat)", "class_method_signature": "OsmNogoPolygon.addVertex(int lon, int lat)", "testcase": false, "constructor": false}, {"identifier": "calcBoundingCircle", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void calcBoundingCircle()", "full_signature": "public void calcBoundingCircle()", "class_method_signature": "OsmNogoPolygon.calcBoundingCircle()", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(int lon0, int lat0, int lon1, int lat1)", "modifiers": "public", "return": "boolean", "signature": "boolean intersects(int lon0, int lat0, int lon1, int lat1)", "full_signature": "public boolean intersects(int lon0, int lat0, int lon1, int lat1)", "class_method_signature": "OsmNogoPolygon.intersects(int lon0, int lat0, int lon1, int lat1)", "testcase": false, "constructor": false}, {"identifier": "isOnPolyline", "parameters": "( long px, long py )", "modifiers": "public", "return": "boolean", "signature": "boolean isOnPolyline( long px, long py )", "full_signature": "public boolean isOnPolyline( long px, long py )", "class_method_signature": "OsmNogoPolygon.isOnPolyline( long px, long py )", "testcase": false, "constructor": false}, {"identifier": "isOnLine", "parameters": "( long px, long py, long p0x, long p0y, long p1x, long p1y )", "modifiers": "public static", "return": "boolean", "signature": "boolean isOnLine( long px, long py, long p0x, long p0y, long p1x, long p1y )", "full_signature": "public static boolean isOnLine( long px, long py, long p0x, long p0y, long p1x, long p1y )", "class_method_signature": "OsmNogoPolygon.isOnLine( long px, long py, long p0x, long p0y, long p1x, long p1y )", "testcase": false, "constructor": false}, {"identifier": "isWithin", "parameters": "(final long px, final long py)", "modifiers": "public", "return": "boolean", "signature": "boolean isWithin(final long px, final long py)", "full_signature": "public boolean isWithin(final long px, final long py)", "class_method_signature": "OsmNogoPolygon.isWithin(final long px, final long py)", "testcase": false, "constructor": false}, {"identifier": "distanceWithinPolygon", "parameters": "(int lon1, int lat1, int lon2, int lat2)", "modifiers": "public", "return": "double", "signature": "double distanceWithinPolygon(int lon1, int lat1, int lon2, int lat2)", "full_signature": "public double distanceWithinPolygon(int lon1, int lat1, int lon2, int lat2)", "class_method_signature": "OsmNogoPolygon.distanceWithinPolygon(int lon1, int lat1, int lon2, int lat2)", "testcase": false, "constructor": false}, {"identifier": "inSegment", "parameters": "( final Point p, final Point seg_p0, final Point seg_p1)", "modifiers": "private static", "return": "boolean", "signature": "boolean inSegment( final Point p, final Point seg_p0, final Point seg_p1)", "full_signature": "private static boolean inSegment( final Point p, final Point seg_p0, final Point seg_p1)", "class_method_signature": "OsmNogoPolygon.inSegment( final Point p, final Point seg_p0, final Point seg_p1)", "testcase": false, "constructor": false}, {"identifier": "intersect2D_2Segments", "parameters": "( final Point s1p0, final Point s1p1, final Point s2p0, final Point s2p1 )", "modifiers": "private static", "return": "int", "signature": "int intersect2D_2Segments( final Point s1p0, final Point s1p1, final Point s2p0, final Point s2p1 )", "full_signature": "private static int intersect2D_2Segments( final Point s1p0, final Point s1p1, final Point s2p0, final Point s2p1 )", "class_method_signature": "OsmNogoPolygon.intersect2D_2Segments( final Point s1p0, final Point s1p1, final Point s2p0, final Point s2p1 )", "testcase": false, "constructor": false}], "file": "brouter-core/src/main/java/btools/router/OsmNogoPolygon.java"}, "focal_method": {"identifier": "intersects", "parameters": "(int lon0, int lat0, int lon1, int lat1)", "modifiers": "public", "return": "boolean", "body": "public boolean intersects(int lon0, int lat0, int lon1, int lat1)\n  {\n    final Point p0 = new Point (lon0,lat0);\n    final Point p1 = new Point (lon1,lat1);\n    int i_last = points.size()-1;\n    Point p2 = points.get(isClosed ? i_last : 0 );\n    for (int i = isClosed ? 0 : 1 ; i <= i_last; i++)\n    {\n      Point p3 = points.get(i);\n      // does it intersect with at least one of the polygon's segments?\n      if (intersect2D_2Segments(p0,p1,p2,p3) > 0)\n      {\n        return true;\n      }\n      p2 = p3;\n    }\n    return false;\n  }", "signature": "boolean intersects(int lon0, int lat0, int lon1, int lat1)", "full_signature": "public boolean intersects(int lon0, int lat0, int lon1, int lat1)", "class_method_signature": "OsmNogoPolygon.intersects(int lon0, int lat0, int lon1, int lat1)", "testcase": false, "constructor": false, "invocations": ["size", "get", "get", "intersect2D_2Segments"]}, "repository": {"repo_id": 15870646, "url": "https://github.com/abrensch/brouter", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 172, "size": 3569, "license": "licensed"}}