{"test_class": {"identifier": "BigQueryFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "bigquery/src/test/java/com/google/cloud/hadoop/io/bigquery/BigQueryFactoryTest.java"}, "test_case": {"identifier": "getBigQuery_customEndpoint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getBigQuery_customEndpoint() throws Exception {\n    BigQueryFactory factory = new BigQueryFactory();\n    Configuration configuration = CredentialConfigurationUtil.getTestConfiguration();\n    configuration.set(BQ_ROOT_URL.getKey(), \"https://unit-test-bigquery.googleapis.com/\");\n\n    Bigquery bigquery = factory.getBigQuery(configuration);\n\n    assertThat(bigquery).isNotNull();\n    assertThat(bigquery.getRootUrl()).isEqualTo(\"https://unit-test-bigquery.googleapis.com/\");\n  }", "signature": "void getBigQuery_customEndpoint()", "full_signature": "@Test public void getBigQuery_customEndpoint()", "class_method_signature": "BigQueryFactoryTest.getBigQuery_customEndpoint()", "testcase": true, "constructor": false, "invocations": ["getTestConfiguration", "set", "getKey", "getBigQuery", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getRootUrl"]}, "focal_class": {"identifier": "BigQueryFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final List<String> BIGQUERY_OAUTH_SCOPES =\n      ImmutableList.of(BigqueryScopes.BIGQUERY);", "modifier": "public static final", "type": "List<String>", "declarator": "BIGQUERY_OAUTH_SCOPES =\n      ImmutableList.of(BigqueryScopes.BIGQUERY)", "var_name": "BIGQUERY_OAUTH_SCOPES"}, {"original_string": "public static final String BIGQUERY_SERVICE_ACCOUNT = \"BIGQUERY_SERVICE_ACCOUNT\";", "modifier": "public static final", "type": "String", "declarator": "BIGQUERY_SERVICE_ACCOUNT = \"BIGQUERY_SERVICE_ACCOUNT\"", "var_name": "BIGQUERY_SERVICE_ACCOUNT"}, {"original_string": "public static final String BIGQUERY_PRIVATE_KEY_FILE = \"BIGQUERY_PRIVATE_KEY_FILE\";", "modifier": "public static final", "type": "String", "declarator": "BIGQUERY_PRIVATE_KEY_FILE = \"BIGQUERY_PRIVATE_KEY_FILE\"", "var_name": "BIGQUERY_PRIVATE_KEY_FILE"}, {"original_string": "private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();", "modifier": "private static final", "type": "GoogleLogger", "declarator": "logger = GoogleLogger.forEnclosingClass()", "var_name": "logger"}, {"original_string": "public static final String PROPERTIES_FILE = \"bigquery.properties\";", "modifier": "public static final", "type": "String", "declarator": "PROPERTIES_FILE = \"bigquery.properties\"", "var_name": "PROPERTIES_FILE"}, {"original_string": "public static final String VERSION_PROPERTY = \"bigquery.connector.version\";", "modifier": "public static final", "type": "String", "declarator": "VERSION_PROPERTY = \"bigquery.connector.version\"", "var_name": "VERSION_PROPERTY"}, {"original_string": "public static final String UNKNOWN_VERSION = \"0.0.0\";", "modifier": "public static final", "type": "String", "declarator": "UNKNOWN_VERSION = \"0.0.0\"", "var_name": "UNKNOWN_VERSION"}, {"original_string": "public static final String VERSION;", "modifier": "public static final", "type": "String", "declarator": "VERSION", "var_name": "VERSION"}, {"original_string": "public static final String BQC_ID;", "modifier": "public static final", "type": "String", "declarator": "BQC_ID", "var_name": "BQC_ID"}, {"original_string": "public static final BigQueryFactory INSTANCE = new BigQueryFactory();", "modifier": "public static final", "type": "BigQueryFactory", "declarator": "INSTANCE = new BigQueryFactory()", "var_name": "INSTANCE"}, {"original_string": "private static final HttpTransport HTTP_TRANSPORT = new NetHttpTransport();", "modifier": "private static final", "type": "HttpTransport", "declarator": "HTTP_TRANSPORT = new NetHttpTransport()", "var_name": "HTTP_TRANSPORT"}, {"original_string": "private static final JsonFactory JSON_FACTORY = new JacksonFactory();", "modifier": "private static final", "type": "JsonFactory", "declarator": "JSON_FACTORY = new JacksonFactory()", "var_name": "JSON_FACTORY"}], "methods": [{"identifier": "createBigQueryCredential", "parameters": "(Configuration config)", "modifiers": "public", "return": "Credential", "signature": "Credential createBigQueryCredential(Configuration config)", "full_signature": "public Credential createBigQueryCredential(Configuration config)", "class_method_signature": "BigQueryFactory.createBigQueryCredential(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "getBigQueryHelper", "parameters": "(Configuration config)", "modifiers": "public", "return": "BigQueryHelper", "signature": "BigQueryHelper getBigQueryHelper(Configuration config)", "full_signature": "public BigQueryHelper getBigQueryHelper(Configuration config)", "class_method_signature": "BigQueryFactory.getBigQueryHelper(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "getBigQuery", "parameters": "(Configuration config)", "modifiers": "public", "return": "Bigquery", "signature": "Bigquery getBigQuery(Configuration config)", "full_signature": "public Bigquery getBigQuery(Configuration config)", "class_method_signature": "BigQueryFactory.getBigQuery(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "getBigQueryFromCredential", "parameters": "(\n      Configuration config, Credential credential, String appName)", "modifiers": "public", "return": "Bigquery", "signature": "Bigquery getBigQueryFromCredential(\n      Configuration config, Credential credential, String appName)", "full_signature": "public Bigquery getBigQueryFromCredential(\n      Configuration config, Credential credential, String appName)", "class_method_signature": "BigQueryFactory.getBigQueryFromCredential(\n      Configuration config, Credential credential, String appName)", "testcase": false, "constructor": false}], "file": "bigquery/src/main/java/com/google/cloud/hadoop/io/bigquery/BigQueryFactory.java"}, "focal_method": {"identifier": "getBigQuery", "parameters": "(Configuration config)", "modifiers": "public", "return": "Bigquery", "body": "public Bigquery getBigQuery(Configuration config)\n      throws GeneralSecurityException, IOException {\n    logger.atInfo().log(\"Creating BigQuery from default credential.\");\n    Credential credential = createBigQueryCredential(config);\n    // Use the credential to create an authorized BigQuery client\n    return getBigQueryFromCredential(config, credential, BQC_ID);\n  }", "signature": "Bigquery getBigQuery(Configuration config)", "full_signature": "public Bigquery getBigQuery(Configuration config)", "class_method_signature": "BigQueryFactory.getBigQuery(Configuration config)", "testcase": false, "constructor": false, "invocations": ["log", "atInfo", "createBigQueryCredential", "getBigQueryFromCredential"]}, "repository": {"repo_id": 19684359, "url": "https://github.com/GoogleCloudDataproc/bigdata-interop", "stars": 178, "created": "5/12/2014 3:11:55 AM +00:00", "updates": "2020-01-23T23:10:40+00:00", "fork": "False", "license": "licensed"}}