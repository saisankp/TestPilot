{"test_class": {"identifier": "GoogleHadoopFileSystemConfigurationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"DoubleBraceInitialization\")\n  private static final Map<String, Object> expectedDefaultConfiguration =\n      new HashMap<String, Object>() {\n        {\n          put(\"fs.gs.project.id\", null);\n          put(\"fs.gs.working.dir\", \"/\");\n          put(\"fs.gs.implicit.dir.repair.enable\", true);\n          put(\"fs.gs.copy.with.rewrite.enable\", true);\n          put(\"fs.gs.rewrite.max.bytes.per.call\", 512 * 1024 * 1024L);\n          put(\"fs.gs.config.override.file\", null);\n          put(\"fs.gs.storage.root.url\", \"https://storage.googleapis.com/\");\n          put(\"fs.gs.storage.service.path\", \"storage/v1/\");\n          put(\"fs.gs.reported.permissions\", \"700\");\n          put(\"fs.gs.delegation.token.binding\", null);\n          put(\"fs.gs.bucket.delete.enable\", false);\n          put(\"fs.gs.checksum.type\", GcsFileChecksumType.NONE);\n          put(\"fs.gs.status.parallel.enable\", true);\n          put(\"fs.gs.lazy.init.enable\", false);\n          put(\"fs.gs.block.size\", 64 * 1024 * 1024L);\n          put(\"fs.gs.implicit.dir.infer.enable\", true);\n          put(\"fs.gs.glob.flatlist.enable\", true);\n          put(\"fs.gs.glob.concurrent.enable\", true);\n          put(\"fs.gs.max.requests.per.batch\", 15L);\n          put(\"fs.gs.batch.threads\", 15);\n          put(\"fs.gs.copy.max.requests.per.batch\", 15L);\n          put(\"fs.gs.copy.batch.threads\", 15);\n          put(\"fs.gs.list.max.items.per.call\", 1024L);\n          put(\"fs.gs.max.wait.for.empty.object.creation.ms\", 3_000);\n          put(\"fs.gs.marker.file.pattern\", null);\n          put(\"fs.gs.inputstream.buffer.size\", 0);\n          put(\"fs.gs.io.buffersize\", 0);\n          put(\"fs.gs.inputstream.fast.fail.on.not.found.enable\", true);\n          put(\"fs.gs.inputstream.support.gzip.encoding.enable\", false);\n          put(\"fs.gs.outputstream.buffer.size\", 8 * 1024 * 1024);\n          put(\"fs.gs.outputstream.pipe.buffer.size\", 1024 * 1024);\n          put(\"fs.gs.outputstream.pipe.type\", PipeType.IO_STREAM_PIPE);\n          put(\"fs.gs.outputstream.upload.chunk.size\", 64 * 1024 * 1024);\n          put(\"fs.gs.outputstream.upload.cache.size\", 0);\n          put(\"fs.gs.io.buffersize.write\", 64 * 1024 * 1024);\n          put(\"fs.gs.outputstream.direct.upload.enable\", false);\n          put(\"fs.gs.outputstream.type\", OutputStreamType.BASIC);\n          put(\"fs.gs.outputstream.sync.min.interval.ms\", 0);\n          put(\"fs.gs.application.name.suffix\", \"\");\n          put(\"fs.gs.http.max.retry\", 10);\n          put(\"fs.gs.http.connect-timeout\", 20_000);\n          put(\"fs.gs.http.read-timeout\", 20_000);\n          put(\"fs.gs.inputstream.fadvise\", Fadvise.AUTO);\n          put(\"fs.gs.inputstream.inplace.seek.limit\", 8 * 1024 * 1024L);\n          put(\"fs.gs.inputstream.min.range.request.size\", 512 * 1024);\n          put(\"fs.gs.performance.cache.enable\", false);\n          put(\"fs.gs.performance.cache.max.entry.age.ms\", 5_000L);\n          put(\"fs.gs.requester.pays.mode\", RequesterPaysMode.DISABLED);\n          put(\"fs.gs.requester.pays.project.id\", null);\n          put(\"fs.gs.requester.pays.buckets\", ImmutableList.of());\n          put(\"fs.gs.cooperative.locking.enable\", false);\n          put(\"fs.gs.cooperative.locking.expiration.timeout.ms\", 120_000L);\n          put(\"fs.gs.cooperative.locking.max.concurrent.operations\", 20);\n          put(\"fs.gs.storage.http.headers.\", ImmutableMap.of());\n          put(\"fs.gs.encryption.algorithm\", null);\n          put(\"fs.gs.encryption.key\", null);\n          put(\"fs.gs.encryption.key.hash\", null);\n          put(\"fs.gs.grpc.enable\", false);\n          put(\"fs.gs.grpc.checksums.enable\", false);\n          put(\"fs.gs.grpc.server.address\", null);\n          put(\"fs.gs.authorization.handler.impl\", null);\n          put(\"fs.gs.authorization.handler.properties.\", ImmutableMap.of());\n          put(\"fs.gs.overwrite.generation.mismatch.ignore\", false);\n        }\n      };", "modifier": "@SuppressWarnings(\"DoubleBraceInitialization\")\n  private static final", "type": "Map<String, Object>", "declarator": "expectedDefaultConfiguration =\n      new HashMap<String, Object>() {\n        {\n          put(\"fs.gs.project.id\", null);\n          put(\"fs.gs.working.dir\", \"/\");\n          put(\"fs.gs.implicit.dir.repair.enable\", true);\n          put(\"fs.gs.copy.with.rewrite.enable\", true);\n          put(\"fs.gs.rewrite.max.bytes.per.call\", 512 * 1024 * 1024L);\n          put(\"fs.gs.config.override.file\", null);\n          put(\"fs.gs.storage.root.url\", \"https://storage.googleapis.com/\");\n          put(\"fs.gs.storage.service.path\", \"storage/v1/\");\n          put(\"fs.gs.reported.permissions\", \"700\");\n          put(\"fs.gs.delegation.token.binding\", null);\n          put(\"fs.gs.bucket.delete.enable\", false);\n          put(\"fs.gs.checksum.type\", GcsFileChecksumType.NONE);\n          put(\"fs.gs.status.parallel.enable\", true);\n          put(\"fs.gs.lazy.init.enable\", false);\n          put(\"fs.gs.block.size\", 64 * 1024 * 1024L);\n          put(\"fs.gs.implicit.dir.infer.enable\", true);\n          put(\"fs.gs.glob.flatlist.enable\", true);\n          put(\"fs.gs.glob.concurrent.enable\", true);\n          put(\"fs.gs.max.requests.per.batch\", 15L);\n          put(\"fs.gs.batch.threads\", 15);\n          put(\"fs.gs.copy.max.requests.per.batch\", 15L);\n          put(\"fs.gs.copy.batch.threads\", 15);\n          put(\"fs.gs.list.max.items.per.call\", 1024L);\n          put(\"fs.gs.max.wait.for.empty.object.creation.ms\", 3_000);\n          put(\"fs.gs.marker.file.pattern\", null);\n          put(\"fs.gs.inputstream.buffer.size\", 0);\n          put(\"fs.gs.io.buffersize\", 0);\n          put(\"fs.gs.inputstream.fast.fail.on.not.found.enable\", true);\n          put(\"fs.gs.inputstream.support.gzip.encoding.enable\", false);\n          put(\"fs.gs.outputstream.buffer.size\", 8 * 1024 * 1024);\n          put(\"fs.gs.outputstream.pipe.buffer.size\", 1024 * 1024);\n          put(\"fs.gs.outputstream.pipe.type\", PipeType.IO_STREAM_PIPE);\n          put(\"fs.gs.outputstream.upload.chunk.size\", 64 * 1024 * 1024);\n          put(\"fs.gs.outputstream.upload.cache.size\", 0);\n          put(\"fs.gs.io.buffersize.write\", 64 * 1024 * 1024);\n          put(\"fs.gs.outputstream.direct.upload.enable\", false);\n          put(\"fs.gs.outputstream.type\", OutputStreamType.BASIC);\n          put(\"fs.gs.outputstream.sync.min.interval.ms\", 0);\n          put(\"fs.gs.application.name.suffix\", \"\");\n          put(\"fs.gs.http.max.retry\", 10);\n          put(\"fs.gs.http.connect-timeout\", 20_000);\n          put(\"fs.gs.http.read-timeout\", 20_000);\n          put(\"fs.gs.inputstream.fadvise\", Fadvise.AUTO);\n          put(\"fs.gs.inputstream.inplace.seek.limit\", 8 * 1024 * 1024L);\n          put(\"fs.gs.inputstream.min.range.request.size\", 512 * 1024);\n          put(\"fs.gs.performance.cache.enable\", false);\n          put(\"fs.gs.performance.cache.max.entry.age.ms\", 5_000L);\n          put(\"fs.gs.requester.pays.mode\", RequesterPaysMode.DISABLED);\n          put(\"fs.gs.requester.pays.project.id\", null);\n          put(\"fs.gs.requester.pays.buckets\", ImmutableList.of());\n          put(\"fs.gs.cooperative.locking.enable\", false);\n          put(\"fs.gs.cooperative.locking.expiration.timeout.ms\", 120_000L);\n          put(\"fs.gs.cooperative.locking.max.concurrent.operations\", 20);\n          put(\"fs.gs.storage.http.headers.\", ImmutableMap.of());\n          put(\"fs.gs.encryption.algorithm\", null);\n          put(\"fs.gs.encryption.key\", null);\n          put(\"fs.gs.encryption.key.hash\", null);\n          put(\"fs.gs.grpc.enable\", false);\n          put(\"fs.gs.grpc.checksums.enable\", false);\n          put(\"fs.gs.grpc.server.address\", null);\n          put(\"fs.gs.authorization.handler.impl\", null);\n          put(\"fs.gs.authorization.handler.properties.\", ImmutableMap.of());\n          put(\"fs.gs.overwrite.generation.mismatch.ignore\", false);\n        }\n      }", "var_name": "expectedDefaultConfiguration"}], "file": "gcs/src/test/java/com/google/cloud/hadoop/fs/gcs/GoogleHadoopFileSystemConfigurationTest.java"}, "test_case": {"identifier": "testHttpHeadersProperties_multipleHeaders", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testHttpHeadersProperties_multipleHeaders() {\n    Configuration config = new Configuration();\n    config.set(GCS_HTTP_HEADERS.getKey() + \"test-header\", \"test-VAL\");\n    config.set(GCS_HTTP_HEADERS.getKey() + \"key-in-header\", \"+G2Ap33m5NVOgmXznSGTEvG0I=\");\n\n    GoogleCloudStorageFileSystemOptions options =\n        GoogleHadoopFileSystemConfiguration.getGcsFsOptionsBuilder(config).build();\n\n    assertThat(options.getCloudStorageOptions().getHttpRequestHeaders())\n        .containsExactly(\"test-header\", \"test-VAL\", \"key-in-header\", \"+G2Ap33m5NVOgmXznSGTEvG0I=\");\n  }", "signature": "void testHttpHeadersProperties_multipleHeaders()", "full_signature": "@Test public void testHttpHeadersProperties_multipleHeaders()", "class_method_signature": "GoogleHadoopFileSystemConfigurationTest.testHttpHeadersProperties_multipleHeaders()", "testcase": true, "constructor": false, "invocations": ["set", "getKey", "set", "getKey", "build", "getGcsFsOptionsBuilder", "containsExactly", "assertThat", "getHttpRequestHeaders", "getCloudStorageOptions"]}, "focal_class": {"identifier": "GoogleHadoopFileSystemConfiguration", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();", "modifier": "private static final", "type": "GoogleLogger", "declarator": "logger = GoogleLogger.forEnclosingClass()", "var_name": "logger"}, {"original_string": "public static final String GCS_CONFIG_PREFIX = \"fs.gs\";", "modifier": "public static final", "type": "String", "declarator": "GCS_CONFIG_PREFIX = \"fs.gs\"", "var_name": "GCS_CONFIG_PREFIX"}, {"original_string": "public static final List<String> CONFIG_KEY_PREFIXES =\n      ImmutableList.copyOf(getConfigKeyPrefixes(GCS_CONFIG_PREFIX));", "modifier": "public static final", "type": "List<String>", "declarator": "CONFIG_KEY_PREFIXES =\n      ImmutableList.copyOf(getConfigKeyPrefixes(GCS_CONFIG_PREFIX))", "var_name": "CONFIG_KEY_PREFIXES"}, {"original_string": "public static final HadoopConfigurationProperty<String> GCS_ROOT_URL =\n      new HadoopConfigurationProperty<>(\n          \"fs.gs.storage.root.url\", GoogleCloudStorageOptions.STORAGE_ROOT_URL_DEFAULT);", "modifier": "public static final", "type": "HadoopConfigurationProperty<String>", "declarator": "GCS_ROOT_URL =\n      new HadoopConfigurationProperty<>(\n          \"fs.gs.storage.root.url\", GoogleCloudStorageOptions.STORAGE_ROOT_URL_DEFAULT)", "var_name": "GCS_ROOT_URL"}, {"original_string": "public static final HadoopConfigurationProperty<String> GCS_SERVICE_PATH =\n      new HadoopConfigurationProperty<>(\n          \"fs.gs.storage.service.path\", GoogleCloudStorageOptions.STORAGE_SERVICE_PATH_DEFAULT);", "modifier": "public static final", "type": "HadoopConfigurationProperty<String>", "declarator": "GCS_SERVICE_PATH =\n      new HadoopConfigurationProperty<>(\n          \"fs.gs.storage.service.path\", GoogleCloudStorageOptions.STORAGE_SERVICE_PATH_DEFAULT)", "var_name": "GCS_SERVICE_PATH"}, {"original_string": "public static final HadoopConfigurationProperty<String> PERMISSIONS_TO_REPORT =\n      new HadoopConfigurationProperty<>(\"fs.gs.reported.permissions\", \"700\");", "modifier": "public static final", "type": "HadoopConfigurationProperty<String>", "declarator": "PERMISSIONS_TO_REPORT =\n      new HadoopConfigurationProperty<>(\"fs.gs.reported.permissions\", \"700\")", "var_name": "PERMISSIONS_TO_REPORT"}, {"original_string": "public static final HadoopConfigurationProperty<Long> BLOCK_SIZE =\n      new HadoopConfigurationProperty<>(\"fs.gs.block.size\", 64 * 1024 * 1024L);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Long>", "declarator": "BLOCK_SIZE =\n      new HadoopConfigurationProperty<>(\"fs.gs.block.size\", 64 * 1024 * 1024L)", "var_name": "BLOCK_SIZE"}, {"original_string": "public static final HadoopConfigurationProperty<String> DELEGATION_TOKEN_BINDING_CLASS =\n      new HadoopConfigurationProperty<>(\"fs.gs.delegation.token.binding\");", "modifier": "public static final", "type": "HadoopConfigurationProperty<String>", "declarator": "DELEGATION_TOKEN_BINDING_CLASS =\n      new HadoopConfigurationProperty<>(\"fs.gs.delegation.token.binding\")", "var_name": "DELEGATION_TOKEN_BINDING_CLASS"}, {"original_string": "public static final HadoopConfigurationProperty<String> GCS_PROJECT_ID =\n      new HadoopConfigurationProperty<>(\"fs.gs.project.id\");", "modifier": "public static final", "type": "HadoopConfigurationProperty<String>", "declarator": "GCS_PROJECT_ID =\n      new HadoopConfigurationProperty<>(\"fs.gs.project.id\")", "var_name": "GCS_PROJECT_ID"}, {"original_string": "public static final HadoopConfigurationProperty<String> GCS_WORKING_DIRECTORY =\n      new HadoopConfigurationProperty<>(\"fs.gs.working.dir\", \"/\");", "modifier": "public static final", "type": "HadoopConfigurationProperty<String>", "declarator": "GCS_WORKING_DIRECTORY =\n      new HadoopConfigurationProperty<>(\"fs.gs.working.dir\", \"/\")", "var_name": "GCS_WORKING_DIRECTORY"}, {"original_string": "public static final HadoopConfigurationProperty<Boolean> GCE_BUCKET_DELETE_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.bucket.delete.enable\", false);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Boolean>", "declarator": "GCE_BUCKET_DELETE_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.bucket.delete.enable\", false)", "var_name": "GCE_BUCKET_DELETE_ENABLE"}, {"original_string": "public static final HadoopConfigurationProperty<RequesterPaysMode> GCS_REQUESTER_PAYS_MODE =\n      new HadoopConfigurationProperty<>(\n          \"fs.gs.requester.pays.mode\", RequesterPaysOptions.REQUESTER_PAYS_MODE_DEFAULT);", "modifier": "public static final", "type": "HadoopConfigurationProperty<RequesterPaysMode>", "declarator": "GCS_REQUESTER_PAYS_MODE =\n      new HadoopConfigurationProperty<>(\n          \"fs.gs.requester.pays.mode\", RequesterPaysOptions.REQUESTER_PAYS_MODE_DEFAULT)", "var_name": "GCS_REQUESTER_PAYS_MODE"}, {"original_string": "public static final HadoopConfigurationProperty<String> GCS_REQUESTER_PAYS_PROJECT_ID =\n      new HadoopConfigurationProperty<>(\"fs.gs.requester.pays.project.id\");", "modifier": "public static final", "type": "HadoopConfigurationProperty<String>", "declarator": "GCS_REQUESTER_PAYS_PROJECT_ID =\n      new HadoopConfigurationProperty<>(\"fs.gs.requester.pays.project.id\")", "var_name": "GCS_REQUESTER_PAYS_PROJECT_ID"}, {"original_string": "public static final HadoopConfigurationProperty<Collection<String>> GCS_REQUESTER_PAYS_BUCKETS =\n      new HadoopConfigurationProperty<>(\"fs.gs.requester.pays.buckets\", ImmutableList.of());", "modifier": "public static final", "type": "HadoopConfigurationProperty<Collection<String>>", "declarator": "GCS_REQUESTER_PAYS_BUCKETS =\n      new HadoopConfigurationProperty<>(\"fs.gs.requester.pays.buckets\", ImmutableList.of())", "var_name": "GCS_REQUESTER_PAYS_BUCKETS"}, {"original_string": "public static final HadoopConfigurationProperty<GcsFileChecksumType> GCS_FILE_CHECKSUM_TYPE =\n      new HadoopConfigurationProperty<>(\"fs.gs.checksum.type\", GcsFileChecksumType.NONE);", "modifier": "public static final", "type": "HadoopConfigurationProperty<GcsFileChecksumType>", "declarator": "GCS_FILE_CHECKSUM_TYPE =\n      new HadoopConfigurationProperty<>(\"fs.gs.checksum.type\", GcsFileChecksumType.NONE)", "var_name": "GCS_FILE_CHECKSUM_TYPE"}, {"original_string": "public static final HadoopConfigurationProperty<Boolean> GCS_PERFORMANCE_CACHE_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.performance.cache.enable\", false);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Boolean>", "declarator": "GCS_PERFORMANCE_CACHE_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.performance.cache.enable\", false)", "var_name": "GCS_PERFORMANCE_CACHE_ENABLE"}, {"original_string": "public static final HadoopConfigurationProperty<Long> GCS_PERFORMANCE_CACHE_MAX_ENTRY_AGE_MILLIS =\n      new HadoopConfigurationProperty<>(\n          \"fs.gs.performance.cache.max.entry.age.ms\",\n          PerformanceCachingGoogleCloudStorageOptions.MAX_ENTRY_AGE_MILLIS_DEFAULT);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Long>", "declarator": "GCS_PERFORMANCE_CACHE_MAX_ENTRY_AGE_MILLIS =\n      new HadoopConfigurationProperty<>(\n          \"fs.gs.performance.cache.max.entry.age.ms\",\n          PerformanceCachingGoogleCloudStorageOptions.MAX_ENTRY_AGE_MILLIS_DEFAULT)", "var_name": "GCS_PERFORMANCE_CACHE_MAX_ENTRY_AGE_MILLIS"}, {"original_string": "public static final HadoopConfigurationProperty<Boolean> GCS_STATUS_PARALLEL_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.status.parallel.enable\", true);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Boolean>", "declarator": "GCS_STATUS_PARALLEL_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.status.parallel.enable\", true)", "var_name": "GCS_STATUS_PARALLEL_ENABLE"}, {"original_string": "public static final HadoopConfigurationProperty<Boolean> GCS_LAZY_INITIALIZATION_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.lazy.init.enable\", false);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Boolean>", "declarator": "GCS_LAZY_INITIALIZATION_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.lazy.init.enable\", false)", "var_name": "GCS_LAZY_INITIALIZATION_ENABLE"}, {"original_string": "public static final HadoopConfigurationProperty<Boolean> GCS_REPAIR_IMPLICIT_DIRECTORIES_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.implicit.dir.repair.enable\", true);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Boolean>", "declarator": "GCS_REPAIR_IMPLICIT_DIRECTORIES_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.implicit.dir.repair.enable\", true)", "var_name": "GCS_REPAIR_IMPLICIT_DIRECTORIES_ENABLE"}, {"original_string": "public static final HadoopConfigurationProperty<Boolean> GCS_INFER_IMPLICIT_DIRECTORIES_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.implicit.dir.infer.enable\", true);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Boolean>", "declarator": "GCS_INFER_IMPLICIT_DIRECTORIES_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.implicit.dir.infer.enable\", true)", "var_name": "GCS_INFER_IMPLICIT_DIRECTORIES_ENABLE"}, {"original_string": "public static final HadoopConfigurationProperty<Boolean> GCS_FLAT_GLOB_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.glob.flatlist.enable\", true);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Boolean>", "declarator": "GCS_FLAT_GLOB_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.glob.flatlist.enable\", true)", "var_name": "GCS_FLAT_GLOB_ENABLE"}, {"original_string": "public static final HadoopConfigurationProperty<Boolean> GCS_CONCURRENT_GLOB_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.glob.concurrent.enable\", true);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Boolean>", "declarator": "GCS_CONCURRENT_GLOB_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.glob.concurrent.enable\", true)", "var_name": "GCS_CONCURRENT_GLOB_ENABLE"}, {"original_string": "public static final HadoopConfigurationProperty<String> GCS_MARKER_FILE_PATTERN =\n      new HadoopConfigurationProperty<>(\"fs.gs.marker.file.pattern\");", "modifier": "public static final", "type": "HadoopConfigurationProperty<String>", "declarator": "GCS_MARKER_FILE_PATTERN =\n      new HadoopConfigurationProperty<>(\"fs.gs.marker.file.pattern\")", "var_name": "GCS_MARKER_FILE_PATTERN"}, {"original_string": "public static final HadoopConfigurationProperty<Long> GCS_MAX_REQUESTS_PER_BATCH =\n      new HadoopConfigurationProperty<>(\"fs.gs.max.requests.per.batch\", 15L);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Long>", "declarator": "GCS_MAX_REQUESTS_PER_BATCH =\n      new HadoopConfigurationProperty<>(\"fs.gs.max.requests.per.batch\", 15L)", "var_name": "GCS_MAX_REQUESTS_PER_BATCH"}, {"original_string": "public static final HadoopConfigurationProperty<Integer> GCS_BATCH_THREADS =\n      new HadoopConfigurationProperty<>(\"fs.gs.batch.threads\", 15);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Integer>", "declarator": "GCS_BATCH_THREADS =\n      new HadoopConfigurationProperty<>(\"fs.gs.batch.threads\", 15)", "var_name": "GCS_BATCH_THREADS"}, {"original_string": "public static final HadoopConfigurationProperty<Long> GCS_COPY_MAX_REQUESTS_PER_BATCH =\n      new HadoopConfigurationProperty<>(\"fs.gs.copy.max.requests.per.batch\", 15L);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Long>", "declarator": "GCS_COPY_MAX_REQUESTS_PER_BATCH =\n      new HadoopConfigurationProperty<>(\"fs.gs.copy.max.requests.per.batch\", 15L)", "var_name": "GCS_COPY_MAX_REQUESTS_PER_BATCH"}, {"original_string": "public static final HadoopConfigurationProperty<Integer> GCS_COPY_BATCH_THREADS =\n      new HadoopConfigurationProperty<>(\"fs.gs.copy.batch.threads\", 15);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Integer>", "declarator": "GCS_COPY_BATCH_THREADS =\n      new HadoopConfigurationProperty<>(\"fs.gs.copy.batch.threads\", 15)", "var_name": "GCS_COPY_BATCH_THREADS"}, {"original_string": "public static final HadoopConfigurationProperty<Boolean> GCS_COPY_WITH_REWRITE_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.copy.with.rewrite.enable\", true);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Boolean>", "declarator": "GCS_COPY_WITH_REWRITE_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.copy.with.rewrite.enable\", true)", "var_name": "GCS_COPY_WITH_REWRITE_ENABLE"}, {"original_string": "public static final HadoopConfigurationProperty<Long> GCS_REWRITE_MAX_BYTES_PER_CALL =\n      new HadoopConfigurationProperty<>(\"fs.gs.rewrite.max.bytes.per.call\", 512 * 1024 * 1024L);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Long>", "declarator": "GCS_REWRITE_MAX_BYTES_PER_CALL =\n      new HadoopConfigurationProperty<>(\"fs.gs.rewrite.max.bytes.per.call\", 512 * 1024 * 1024L)", "var_name": "GCS_REWRITE_MAX_BYTES_PER_CALL"}, {"original_string": "public static final HadoopConfigurationProperty<Boolean>\n      GCS_OVERWRITE_GENERATION_MISMATCH_IGNORE =\n          new HadoopConfigurationProperty<>(\"fs.gs.overwrite.generation.mismatch.ignore\", false);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Boolean>", "declarator": "GCS_OVERWRITE_GENERATION_MISMATCH_IGNORE =\n          new HadoopConfigurationProperty<>(\"fs.gs.overwrite.generation.mismatch.ignore\", false)", "var_name": "GCS_OVERWRITE_GENERATION_MISMATCH_IGNORE"}, {"original_string": "public static final HadoopConfigurationProperty<Long> GCS_MAX_LIST_ITEMS_PER_CALL =\n      new HadoopConfigurationProperty<>(\"fs.gs.list.max.items.per.call\", 1024L);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Long>", "declarator": "GCS_MAX_LIST_ITEMS_PER_CALL =\n      new HadoopConfigurationProperty<>(\"fs.gs.list.max.items.per.call\", 1024L)", "var_name": "GCS_MAX_LIST_ITEMS_PER_CALL"}, {"original_string": "public static final HadoopConfigurationProperty<Integer> GCS_HTTP_MAX_RETRY =\n      new HadoopConfigurationProperty<>(\"fs.gs.http.max.retry\", 10);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Integer>", "declarator": "GCS_HTTP_MAX_RETRY =\n      new HadoopConfigurationProperty<>(\"fs.gs.http.max.retry\", 10)", "var_name": "GCS_HTTP_MAX_RETRY"}, {"original_string": "public static final HadoopConfigurationProperty<Integer> GCS_HTTP_CONNECT_TIMEOUT =\n      new HadoopConfigurationProperty<>(\"fs.gs.http.connect-timeout\", 20 * 1000);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Integer>", "declarator": "GCS_HTTP_CONNECT_TIMEOUT =\n      new HadoopConfigurationProperty<>(\"fs.gs.http.connect-timeout\", 20 * 1000)", "var_name": "GCS_HTTP_CONNECT_TIMEOUT"}, {"original_string": "public static final HadoopConfigurationProperty<Integer> GCS_HTTP_READ_TIMEOUT =\n      new HadoopConfigurationProperty<>(\"fs.gs.http.read-timeout\", 20 * 1000);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Integer>", "declarator": "GCS_HTTP_READ_TIMEOUT =\n      new HadoopConfigurationProperty<>(\"fs.gs.http.read-timeout\", 20 * 1000)", "var_name": "GCS_HTTP_READ_TIMEOUT"}, {"original_string": "public static final HadoopConfigurationProperty<String> GCS_APPLICATION_NAME_SUFFIX =\n      new HadoopConfigurationProperty<>(\"fs.gs.application.name.suffix\", \"\");", "modifier": "public static final", "type": "HadoopConfigurationProperty<String>", "declarator": "GCS_APPLICATION_NAME_SUFFIX =\n      new HadoopConfigurationProperty<>(\"fs.gs.application.name.suffix\", \"\")", "var_name": "GCS_APPLICATION_NAME_SUFFIX"}, {"original_string": "public static final HadoopConfigurationProperty<Integer> GCS_MAX_WAIT_MILLIS_EMPTY_OBJECT_CREATE =\n      new HadoopConfigurationProperty<>(\"fs.gs.max.wait.for.empty.object.creation.ms\", 3_000);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Integer>", "declarator": "GCS_MAX_WAIT_MILLIS_EMPTY_OBJECT_CREATE =\n      new HadoopConfigurationProperty<>(\"fs.gs.max.wait.for.empty.object.creation.ms\", 3_000)", "var_name": "GCS_MAX_WAIT_MILLIS_EMPTY_OBJECT_CREATE"}, {"original_string": "public static final HadoopConfigurationProperty<OutputStreamType> GCS_OUTPUT_STREAM_TYPE =\n      new HadoopConfigurationProperty<>(\"fs.gs.outputstream.type\", OutputStreamType.BASIC);", "modifier": "public static final", "type": "HadoopConfigurationProperty<OutputStreamType>", "declarator": "GCS_OUTPUT_STREAM_TYPE =\n      new HadoopConfigurationProperty<>(\"fs.gs.outputstream.type\", OutputStreamType.BASIC)", "var_name": "GCS_OUTPUT_STREAM_TYPE"}, {"original_string": "public static final HadoopConfigurationProperty<Integer> GCS_OUTPUT_STREAM_BUFFER_SIZE =\n      new HadoopConfigurationProperty<>(\"fs.gs.outputstream.buffer.size\", 8 * 1024 * 1024);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Integer>", "declarator": "GCS_OUTPUT_STREAM_BUFFER_SIZE =\n      new HadoopConfigurationProperty<>(\"fs.gs.outputstream.buffer.size\", 8 * 1024 * 1024)", "var_name": "GCS_OUTPUT_STREAM_BUFFER_SIZE"}, {"original_string": "public static final HadoopConfigurationProperty<Integer> GCS_OUTPUT_STREAM_PIPE_BUFFER_SIZE =\n      new HadoopConfigurationProperty<>(\"fs.gs.outputstream.pipe.buffer.size\", 1024 * 1024);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Integer>", "declarator": "GCS_OUTPUT_STREAM_PIPE_BUFFER_SIZE =\n      new HadoopConfigurationProperty<>(\"fs.gs.outputstream.pipe.buffer.size\", 1024 * 1024)", "var_name": "GCS_OUTPUT_STREAM_PIPE_BUFFER_SIZE"}, {"original_string": "public static final HadoopConfigurationProperty<PipeType> GCS_OUTPUT_STREAM_PIPE_TYPE =\n      new HadoopConfigurationProperty<>(\"fs.gs.outputstream.pipe.type\", PipeType.IO_STREAM_PIPE);", "modifier": "public static final", "type": "HadoopConfigurationProperty<PipeType>", "declarator": "GCS_OUTPUT_STREAM_PIPE_TYPE =\n      new HadoopConfigurationProperty<>(\"fs.gs.outputstream.pipe.type\", PipeType.IO_STREAM_PIPE)", "var_name": "GCS_OUTPUT_STREAM_PIPE_TYPE"}, {"original_string": "public static final HadoopConfigurationProperty<Integer> GCS_OUTPUT_STREAM_UPLOAD_CHUNK_SIZE =\n      new HadoopConfigurationProperty<>(\n          \"fs.gs.outputstream.upload.chunk.size\", 64 * 1024 * 1024, \"fs.gs.io.buffersize.write\");", "modifier": "public static final", "type": "HadoopConfigurationProperty<Integer>", "declarator": "GCS_OUTPUT_STREAM_UPLOAD_CHUNK_SIZE =\n      new HadoopConfigurationProperty<>(\n          \"fs.gs.outputstream.upload.chunk.size\", 64 * 1024 * 1024, \"fs.gs.io.buffersize.write\")", "var_name": "GCS_OUTPUT_STREAM_UPLOAD_CHUNK_SIZE"}, {"original_string": "public static final HadoopConfigurationProperty<Integer> GCS_OUTPUT_STREAM_UPLOAD_CACHE_SIZE =\n      new HadoopConfigurationProperty<>(\"fs.gs.outputstream.upload.cache.size\", 0);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Integer>", "declarator": "GCS_OUTPUT_STREAM_UPLOAD_CACHE_SIZE =\n      new HadoopConfigurationProperty<>(\"fs.gs.outputstream.upload.cache.size\", 0)", "var_name": "GCS_OUTPUT_STREAM_UPLOAD_CACHE_SIZE"}, {"original_string": "public static final HadoopConfigurationProperty<Boolean> GCS_OUTPUT_STREAM_DIRECT_UPLOAD_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.outputstream.direct.upload.enable\", false);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Boolean>", "declarator": "GCS_OUTPUT_STREAM_DIRECT_UPLOAD_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.outputstream.direct.upload.enable\", false)", "var_name": "GCS_OUTPUT_STREAM_DIRECT_UPLOAD_ENABLE"}, {"original_string": "public static final HadoopConfigurationProperty<Integer> GCS_OUTPUT_STREAM_SYNC_MIN_INTERVAL_MS =\n      new HadoopConfigurationProperty<>(\"fs.gs.outputstream.sync.min.interval.ms\", 0);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Integer>", "declarator": "GCS_OUTPUT_STREAM_SYNC_MIN_INTERVAL_MS =\n      new HadoopConfigurationProperty<>(\"fs.gs.outputstream.sync.min.interval.ms\", 0)", "var_name": "GCS_OUTPUT_STREAM_SYNC_MIN_INTERVAL_MS"}, {"original_string": "public static final HadoopConfigurationProperty<Integer> GCS_INPUT_STREAM_BUFFER_SIZE =\n      new HadoopConfigurationProperty<>(\"fs.gs.inputstream.buffer.size\", 0, \"fs.gs.io.buffersize\");", "modifier": "public static final", "type": "HadoopConfigurationProperty<Integer>", "declarator": "GCS_INPUT_STREAM_BUFFER_SIZE =\n      new HadoopConfigurationProperty<>(\"fs.gs.inputstream.buffer.size\", 0, \"fs.gs.io.buffersize\")", "var_name": "GCS_INPUT_STREAM_BUFFER_SIZE"}, {"original_string": "public static final HadoopConfigurationProperty<Boolean>\n      GCS_INPUT_STREAM_FAST_FAIL_ON_NOT_FOUND_ENABLE =\n          new HadoopConfigurationProperty<>(\n              \"fs.gs.inputstream.fast.fail.on.not.found.enable\", true);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Boolean>", "declarator": "GCS_INPUT_STREAM_FAST_FAIL_ON_NOT_FOUND_ENABLE =\n          new HadoopConfigurationProperty<>(\n              \"fs.gs.inputstream.fast.fail.on.not.found.enable\", true)", "var_name": "GCS_INPUT_STREAM_FAST_FAIL_ON_NOT_FOUND_ENABLE"}, {"original_string": "public static final HadoopConfigurationProperty<Boolean>\n      GCS_INPUT_STREAM_SUPPORT_GZIP_ENCODING_ENABLE =\n          new HadoopConfigurationProperty<>(\n              \"fs.gs.inputstream.support.gzip.encoding.enable\", false);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Boolean>", "declarator": "GCS_INPUT_STREAM_SUPPORT_GZIP_ENCODING_ENABLE =\n          new HadoopConfigurationProperty<>(\n              \"fs.gs.inputstream.support.gzip.encoding.enable\", false)", "var_name": "GCS_INPUT_STREAM_SUPPORT_GZIP_ENCODING_ENABLE"}, {"original_string": "public static final HadoopConfigurationProperty<Long> GCS_INPUT_STREAM_INPLACE_SEEK_LIMIT =\n      new HadoopConfigurationProperty<>(\"fs.gs.inputstream.inplace.seek.limit\", 8 * 1024 * 1024L);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Long>", "declarator": "GCS_INPUT_STREAM_INPLACE_SEEK_LIMIT =\n      new HadoopConfigurationProperty<>(\"fs.gs.inputstream.inplace.seek.limit\", 8 * 1024 * 1024L)", "var_name": "GCS_INPUT_STREAM_INPLACE_SEEK_LIMIT"}, {"original_string": "public static final HadoopConfigurationProperty<Fadvise> GCS_INPUT_STREAM_FADVISE =\n      new HadoopConfigurationProperty<>(\"fs.gs.inputstream.fadvise\", Fadvise.AUTO);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Fadvise>", "declarator": "GCS_INPUT_STREAM_FADVISE =\n      new HadoopConfigurationProperty<>(\"fs.gs.inputstream.fadvise\", Fadvise.AUTO)", "var_name": "GCS_INPUT_STREAM_FADVISE"}, {"original_string": "public static final HadoopConfigurationProperty<Integer> GCS_INPUT_STREAM_MIN_RANGE_REQUEST_SIZE =\n      new HadoopConfigurationProperty<>(\n          \"fs.gs.inputstream.min.range.request.size\",\n          GoogleCloudStorageReadOptions.DEFAULT_MIN_RANGE_REQUEST_SIZE);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Integer>", "declarator": "GCS_INPUT_STREAM_MIN_RANGE_REQUEST_SIZE =\n      new HadoopConfigurationProperty<>(\n          \"fs.gs.inputstream.min.range.request.size\",\n          GoogleCloudStorageReadOptions.DEFAULT_MIN_RANGE_REQUEST_SIZE)", "var_name": "GCS_INPUT_STREAM_MIN_RANGE_REQUEST_SIZE"}, {"original_string": "public static final HadoopConfigurationProperty<Boolean> GCS_GRPC_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.grpc.enable\", false);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Boolean>", "declarator": "GCS_GRPC_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.grpc.enable\", false)", "var_name": "GCS_GRPC_ENABLE"}, {"original_string": "public static final HadoopConfigurationProperty<Boolean> GCS_GRPC_CHECKSUMS_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.grpc.checksums.enable\", false);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Boolean>", "declarator": "GCS_GRPC_CHECKSUMS_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.grpc.checksums.enable\", false)", "var_name": "GCS_GRPC_CHECKSUMS_ENABLE"}, {"original_string": "public static final HadoopConfigurationProperty<String> GCS_GRPC_SERVER_ADDRESS =\n      new HadoopConfigurationProperty<>(\"fs.gs.grpc.server.address\");", "modifier": "public static final", "type": "HadoopConfigurationProperty<String>", "declarator": "GCS_GRPC_SERVER_ADDRESS =\n      new HadoopConfigurationProperty<>(\"fs.gs.grpc.server.address\")", "var_name": "GCS_GRPC_SERVER_ADDRESS"}, {"original_string": "public static final HadoopConfigurationProperty<String> GCS_CONFIG_OVERRIDE_FILE =\n      new HadoopConfigurationProperty<>(\"fs.gs.config.override.file\", null);", "modifier": "public static final", "type": "HadoopConfigurationProperty<String>", "declarator": "GCS_CONFIG_OVERRIDE_FILE =\n      new HadoopConfigurationProperty<>(\"fs.gs.config.override.file\", null)", "var_name": "GCS_CONFIG_OVERRIDE_FILE"}, {"original_string": "public static final HadoopConfigurationProperty<Boolean> GCS_COOPERATIVE_LOCKING_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.cooperative.locking.enable\", false);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Boolean>", "declarator": "GCS_COOPERATIVE_LOCKING_ENABLE =\n      new HadoopConfigurationProperty<>(\"fs.gs.cooperative.locking.enable\", false)", "var_name": "GCS_COOPERATIVE_LOCKING_ENABLE"}, {"original_string": "public static final HadoopConfigurationProperty<Long>\n      GCS_COOPERATIVE_LOCKING_EXPIRATION_TIMEOUT_MS =\n          new HadoopConfigurationProperty<>(\n              \"fs.gs.cooperative.locking.expiration.timeout.ms\",\n              CooperativeLockingOptions.LOCK_EXPIRATION_TIMEOUT_MS_DEFAULT);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Long>", "declarator": "GCS_COOPERATIVE_LOCKING_EXPIRATION_TIMEOUT_MS =\n          new HadoopConfigurationProperty<>(\n              \"fs.gs.cooperative.locking.expiration.timeout.ms\",\n              CooperativeLockingOptions.LOCK_EXPIRATION_TIMEOUT_MS_DEFAULT)", "var_name": "GCS_COOPERATIVE_LOCKING_EXPIRATION_TIMEOUT_MS"}, {"original_string": "public static final HadoopConfigurationProperty<Integer>\n      GCS_COOPERATIVE_LOCKING_MAX_CONCURRENT_OPERATIONS =\n          new HadoopConfigurationProperty<>(\n              \"fs.gs.cooperative.locking.max.concurrent.operations\",\n              CooperativeLockingOptions.MAX_CONCURRENT_OPERATIONS_DEFAULT);", "modifier": "public static final", "type": "HadoopConfigurationProperty<Integer>", "declarator": "GCS_COOPERATIVE_LOCKING_MAX_CONCURRENT_OPERATIONS =\n          new HadoopConfigurationProperty<>(\n              \"fs.gs.cooperative.locking.max.concurrent.operations\",\n              CooperativeLockingOptions.MAX_CONCURRENT_OPERATIONS_DEFAULT)", "var_name": "GCS_COOPERATIVE_LOCKING_MAX_CONCURRENT_OPERATIONS"}, {"original_string": "public static final HadoopConfigurationProperty<Map<String, String>> GCS_HTTP_HEADERS =\n      new HadoopConfigurationProperty<>(\"fs.gs.storage.http.headers.\", ImmutableMap.of());", "modifier": "public static final", "type": "HadoopConfigurationProperty<Map<String, String>>", "declarator": "GCS_HTTP_HEADERS =\n      new HadoopConfigurationProperty<>(\"fs.gs.storage.http.headers.\", ImmutableMap.of())", "var_name": "GCS_HTTP_HEADERS"}, {"original_string": "public static final HadoopConfigurationProperty<String> GCS_ENCRYPTION_ALGORITHM =\n      new HadoopConfigurationProperty<>(\"fs.gs.encryption.algorithm\");", "modifier": "public static final", "type": "HadoopConfigurationProperty<String>", "declarator": "GCS_ENCRYPTION_ALGORITHM =\n      new HadoopConfigurationProperty<>(\"fs.gs.encryption.algorithm\")", "var_name": "GCS_ENCRYPTION_ALGORITHM"}, {"original_string": "public static final HadoopConfigurationProperty<RedactedString> GCS_ENCRYPTION_KEY =\n      new HadoopConfigurationProperty<>(\"fs.gs.encryption.key\");", "modifier": "public static final", "type": "HadoopConfigurationProperty<RedactedString>", "declarator": "GCS_ENCRYPTION_KEY =\n      new HadoopConfigurationProperty<>(\"fs.gs.encryption.key\")", "var_name": "GCS_ENCRYPTION_KEY"}, {"original_string": "public static final HadoopConfigurationProperty<RedactedString> GCS_ENCRYPTION_KEY_HASH =\n      new HadoopConfigurationProperty<>(\"fs.gs.encryption.key.hash\");", "modifier": "public static final", "type": "HadoopConfigurationProperty<RedactedString>", "declarator": "GCS_ENCRYPTION_KEY_HASH =\n      new HadoopConfigurationProperty<>(\"fs.gs.encryption.key.hash\")", "var_name": "GCS_ENCRYPTION_KEY_HASH"}, {"original_string": "public static final HadoopConfigurationProperty<Class<? extends AuthorizationHandler>>\n      GCS_AUTHORIZATION_HANDLER_IMPL =\n          new HadoopConfigurationProperty<>(\"fs.gs.authorization.handler.impl\");", "modifier": "public static final", "type": "HadoopConfigurationProperty<Class<? extends AuthorizationHandler>>", "declarator": "GCS_AUTHORIZATION_HANDLER_IMPL =\n          new HadoopConfigurationProperty<>(\"fs.gs.authorization.handler.impl\")", "var_name": "GCS_AUTHORIZATION_HANDLER_IMPL"}, {"original_string": "public static final HadoopConfigurationProperty<Map<String, String>>\n      GCS_AUTHORIZATION_HANDLER_PROPERTIES_PREFIX =\n          new HadoopConfigurationProperty<>(\n              \"fs.gs.authorization.handler.properties.\", ImmutableMap.of());", "modifier": "public static final", "type": "HadoopConfigurationProperty<Map<String, String>>", "declarator": "GCS_AUTHORIZATION_HANDLER_PROPERTIES_PREFIX =\n          new HadoopConfigurationProperty<>(\n              \"fs.gs.authorization.handler.properties.\", ImmutableMap.of())", "var_name": "GCS_AUTHORIZATION_HANDLER_PROPERTIES_PREFIX"}], "methods": [{"identifier": "getGcsFsOptionsBuilder", "parameters": "(Configuration config)", "modifiers": "static", "return": "GoogleCloudStorageFileSystemOptions.Builder", "signature": "GoogleCloudStorageFileSystemOptions.Builder getGcsFsOptionsBuilder(Configuration config)", "full_signature": "static GoogleCloudStorageFileSystemOptions.Builder getGcsFsOptionsBuilder(Configuration config)", "class_method_signature": "GoogleHadoopFileSystemConfiguration.getGcsFsOptionsBuilder(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "getGcsOptionsBuilder", "parameters": "(Configuration config)", "modifiers": "@VisibleForTesting static", "return": "GoogleCloudStorageOptions.Builder", "signature": "GoogleCloudStorageOptions.Builder getGcsOptionsBuilder(Configuration config)", "full_signature": "@VisibleForTesting static GoogleCloudStorageOptions.Builder getGcsOptionsBuilder(Configuration config)", "class_method_signature": "GoogleHadoopFileSystemConfiguration.getGcsOptionsBuilder(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "getPerformanceCachingOptions", "parameters": "(\n      Configuration config)", "modifiers": "private static", "return": "PerformanceCachingGoogleCloudStorageOptions", "signature": "PerformanceCachingGoogleCloudStorageOptions getPerformanceCachingOptions(\n      Configuration config)", "full_signature": "private static PerformanceCachingGoogleCloudStorageOptions getPerformanceCachingOptions(\n      Configuration config)", "class_method_signature": "GoogleHadoopFileSystemConfiguration.getPerformanceCachingOptions(\n      Configuration config)", "testcase": false, "constructor": false}, {"identifier": "getApplicationName", "parameters": "(Configuration config)", "modifiers": "private static", "return": "String", "signature": "String getApplicationName(Configuration config)", "full_signature": "private static String getApplicationName(Configuration config)", "class_method_signature": "GoogleHadoopFileSystemConfiguration.getApplicationName(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "getReadChannelOptions", "parameters": "(Configuration config)", "modifiers": "private static", "return": "GoogleCloudStorageReadOptions", "signature": "GoogleCloudStorageReadOptions getReadChannelOptions(Configuration config)", "full_signature": "private static GoogleCloudStorageReadOptions getReadChannelOptions(Configuration config)", "class_method_signature": "GoogleHadoopFileSystemConfiguration.getReadChannelOptions(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "getWriteChannelOptions", "parameters": "(Configuration config)", "modifiers": "private static", "return": "AsyncWriteChannelOptions", "signature": "AsyncWriteChannelOptions getWriteChannelOptions(Configuration config)", "full_signature": "private static AsyncWriteChannelOptions getWriteChannelOptions(Configuration config)", "class_method_signature": "GoogleHadoopFileSystemConfiguration.getWriteChannelOptions(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "getRequesterPaysOptions", "parameters": "(\n      Configuration config, String projectId)", "modifiers": "private static", "return": "RequesterPaysOptions", "signature": "RequesterPaysOptions getRequesterPaysOptions(\n      Configuration config, String projectId)", "full_signature": "private static RequesterPaysOptions getRequesterPaysOptions(\n      Configuration config, String projectId)", "class_method_signature": "GoogleHadoopFileSystemConfiguration.getRequesterPaysOptions(\n      Configuration config, String projectId)", "testcase": false, "constructor": false}, {"identifier": "getCooperativeLockingOptions", "parameters": "(Configuration config)", "modifiers": "private static", "return": "CooperativeLockingOptions", "signature": "CooperativeLockingOptions getCooperativeLockingOptions(Configuration config)", "full_signature": "private static CooperativeLockingOptions getCooperativeLockingOptions(Configuration config)", "class_method_signature": "GoogleHadoopFileSystemConfiguration.getCooperativeLockingOptions(Configuration config)", "testcase": false, "constructor": false}], "file": "gcs/src/main/java/com/google/cloud/hadoop/fs/gcs/GoogleHadoopFileSystemConfiguration.java"}, "focal_method": {"identifier": "getGcsFsOptionsBuilder", "parameters": "(Configuration config)", "modifiers": "static", "return": "GoogleCloudStorageFileSystemOptions.Builder", "body": "static GoogleCloudStorageFileSystemOptions.Builder getGcsFsOptionsBuilder(Configuration config) {\n    return GoogleCloudStorageFileSystemOptions.builder()\n        .setBucketDeleteEnabled(GCE_BUCKET_DELETE_ENABLE.get(config, config::getBoolean))\n        .setMarkerFilePattern(GCS_MARKER_FILE_PATTERN.get(config, config::get))\n        .setPerformanceCacheEnabled(GCS_PERFORMANCE_CACHE_ENABLE.get(config, config::getBoolean))\n        .setCooperativeLockingEnabled(\n            GCS_COOPERATIVE_LOCKING_ENABLE.get(config, config::getBoolean))\n        .setPerformanceCacheOptions(getPerformanceCachingOptions(config))\n        .setStatusParallelEnabled(GCS_STATUS_PARALLEL_ENABLE.get(config, config::getBoolean))\n        .setCloudStorageOptions(getGcsOptionsBuilder(config).build());\n  }", "signature": "GoogleCloudStorageFileSystemOptions.Builder getGcsFsOptionsBuilder(Configuration config)", "full_signature": "static GoogleCloudStorageFileSystemOptions.Builder getGcsFsOptionsBuilder(Configuration config)", "class_method_signature": "GoogleHadoopFileSystemConfiguration.getGcsFsOptionsBuilder(Configuration config)", "testcase": false, "constructor": false, "invocations": ["setCloudStorageOptions", "setStatusParallelEnabled", "setPerformanceCacheOptions", "setCooperativeLockingEnabled", "setPerformanceCacheEnabled", "setMarkerFilePattern", "setBucketDeleteEnabled", "builder", "get", "get", "get", "get", "getPerformanceCachingOptions", "get", "build", "getGcsOptionsBuilder"]}, "repository": {"repo_id": 19684359, "url": "https://github.com/GoogleCloudDataproc/bigdata-interop", "stars": 178, "created": "5/12/2014 3:11:55 AM +00:00", "updates": "2020-01-23T23:10:40+00:00", "fork": "False", "license": "licensed"}}