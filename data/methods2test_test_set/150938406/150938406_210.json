{"test_class": {"identifier": "AnnotationUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/common/io/annotations/AnnotationUtilsTest.java"}, "test_case": {"identifier": "testIOpHasTimestamp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIOpHasTimestamp() {\n        Assert.assertFalse(AnnotationUtils.isIoOpHasTimestamp(\"test_fake_op_1\", IOType.SourceBatch));\n        Assert.assertTrue(AnnotationUtils.isIoOpHasTimestamp(\"test_fake_op_2\", IOType.SourceBatch));\n    }", "signature": "void testIOpHasTimestamp()", "full_signature": "@Test public void testIOpHasTimestamp()", "class_method_signature": "AnnotationUtilsTest.testIOpHasTimestamp()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isIoOpHasTimestamp", "assertTrue", "isIoOpHasTimestamp"]}, "focal_class": {"identifier": "AnnotationUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AnnotationUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AnnotationUtils.class)", "var_name": "LOG"}, {"original_string": "private static final Map<String, Wrapper<BaseDB>> DB_CLASSES = loadDBClasses();", "modifier": "private static final", "type": "Map<String, Wrapper<BaseDB>>", "declarator": "DB_CLASSES = loadDBClasses()", "var_name": "DB_CLASSES"}, {"original_string": "private static final Map<String, Class<? extends BaseFileSystem<?>>> FILE_SYSTEM_CLASSES = loadFileSystemClasses();", "modifier": "private static final", "type": "Map<String, Class<? extends BaseFileSystem<?>>>", "declarator": "FILE_SYSTEM_CLASSES = loadFileSystemClasses()", "var_name": "FILE_SYSTEM_CLASSES"}, {"original_string": "private static final Table<String, IOType, Wrapper<AlgoOperator>> IO_OP_CLASSES = loadIoOpClasses();", "modifier": "private static final", "type": "Table<String, IOType, Wrapper<AlgoOperator>>", "declarator": "IO_OP_CLASSES = loadIoOpClasses()", "var_name": "IO_OP_CLASSES"}], "methods": [{"identifier": "loadDBClasses", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "Map<String, Wrapper<BaseDB>>", "signature": "Map<String, Wrapper<BaseDB>> loadDBClasses()", "full_signature": "@SuppressWarnings(\"unchecked\") private static Map<String, Wrapper<BaseDB>> loadDBClasses()", "class_method_signature": "AnnotationUtils.loadDBClasses()", "testcase": false, "constructor": false}, {"identifier": "loadFileSystemClasses", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "Map<String, Class<? extends BaseFileSystem<?>>>", "signature": "Map<String, Class<? extends BaseFileSystem<?>>> loadFileSystemClasses()", "full_signature": "@SuppressWarnings(\"unchecked\") private static Map<String, Class<? extends BaseFileSystem<?>>> loadFileSystemClasses()", "class_method_signature": "AnnotationUtils.loadFileSystemClasses()", "testcase": false, "constructor": false}, {"identifier": "loadIoOpClasses", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "Table<String, IOType, Wrapper<AlgoOperator>>", "signature": "Table<String, IOType, Wrapper<AlgoOperator>> loadIoOpClasses()", "full_signature": "@SuppressWarnings(\"unchecked\") private static Table<String, IOType, Wrapper<AlgoOperator>> loadIoOpClasses()", "class_method_signature": "AnnotationUtils.loadIoOpClasses()", "testcase": false, "constructor": false}, {"identifier": "annotatedName", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "String", "signature": "String annotatedName(Class<?> clazz)", "full_signature": "public static String annotatedName(Class<?> clazz)", "class_method_signature": "AnnotationUtils.annotatedName(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "annotatedAlias", "parameters": "(Class<? extends BaseDB> cls)", "modifiers": "public static", "return": "String", "signature": "String annotatedAlias(Class<? extends BaseDB> cls)", "full_signature": "public static String annotatedAlias(Class<? extends BaseDB> cls)", "class_method_signature": "AnnotationUtils.annotatedAlias(Class<? extends BaseDB> cls)", "testcase": false, "constructor": false}, {"identifier": "annotatedAlias", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String annotatedAlias(String name)", "full_signature": "public static String annotatedAlias(String name)", "class_method_signature": "AnnotationUtils.annotatedAlias(String name)", "testcase": false, "constructor": false}, {"identifier": "annotatedIoType", "parameters": "(Class<? extends AlgoOperator> cls)", "modifiers": "public static", "return": "IOType", "signature": "IOType annotatedIoType(Class<? extends AlgoOperator> cls)", "full_signature": "public static IOType annotatedIoType(Class<? extends AlgoOperator> cls)", "class_method_signature": "AnnotationUtils.annotatedIoType(Class<? extends AlgoOperator> cls)", "testcase": false, "constructor": false}, {"identifier": "tableAliasParamKey", "parameters": "(String name)", "modifiers": "public static", "return": "ParamInfo<String>", "signature": "ParamInfo<String> tableAliasParamKey(String name)", "full_signature": "public static ParamInfo<String> tableAliasParamKey(String name)", "class_method_signature": "AnnotationUtils.tableAliasParamKey(String name)", "testcase": false, "constructor": false}, {"identifier": "tableAliasParamKey", "parameters": "(Class<? extends BaseDB> dbClazz)", "modifiers": "public static", "return": "ParamInfo<String>", "signature": "ParamInfo<String> tableAliasParamKey(Class<? extends BaseDB> dbClazz)", "full_signature": "public static ParamInfo<String> tableAliasParamKey(Class<? extends BaseDB> dbClazz)", "class_method_signature": "AnnotationUtils.tableAliasParamKey(Class<? extends BaseDB> dbClazz)", "testcase": false, "constructor": false}, {"identifier": "dynamicParamKey", "parameters": "(String key)", "modifiers": "public static", "return": "ParamInfo<String>", "signature": "ParamInfo<String> dynamicParamKey(String key)", "full_signature": "public static ParamInfo<String> dynamicParamKey(String key)", "class_method_signature": "AnnotationUtils.dynamicParamKey(String key)", "testcase": false, "constructor": false}, {"identifier": "allDBAndOpNames", "parameters": "()", "modifiers": "public static", "return": "List<String>", "signature": "List<String> allDBAndOpNames()", "full_signature": "public static List<String> allDBAndOpNames()", "class_method_signature": "AnnotationUtils.allDBAndOpNames()", "testcase": false, "constructor": false}, {"identifier": "allFileSystemNames", "parameters": "()", "modifiers": "public static", "return": "List<String>", "signature": "List<String> allFileSystemNames()", "full_signature": "public static List<String> allFileSystemNames()", "class_method_signature": "AnnotationUtils.allFileSystemNames()", "testcase": false, "constructor": false}, {"identifier": "createDB", "parameters": "(String name, Params parameter)", "modifiers": "public static", "return": "BaseDB", "signature": "BaseDB createDB(String name, Params parameter)", "full_signature": "public static BaseDB createDB(String name, Params parameter)", "class_method_signature": "AnnotationUtils.createDB(String name, Params parameter)", "testcase": false, "constructor": false}, {"identifier": "createFileSystem", "parameters": "(String name, Params parameter)", "modifiers": "public static", "return": "BaseFileSystem<?>", "signature": "BaseFileSystem<?> createFileSystem(String name, Params parameter)", "full_signature": "public static BaseFileSystem<?> createFileSystem(String name, Params parameter)", "class_method_signature": "AnnotationUtils.createFileSystem(String name, Params parameter)", "testcase": false, "constructor": false}, {"identifier": "isDB", "parameters": "(String name)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDB(String name)", "full_signature": "public static boolean isDB(String name)", "class_method_signature": "AnnotationUtils.isDB(String name)", "testcase": false, "constructor": false}, {"identifier": "isDBHasTimestamp", "parameters": "(String name)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDBHasTimestamp(String name)", "full_signature": "public static boolean isDBHasTimestamp(String name)", "class_method_signature": "AnnotationUtils.isDBHasTimestamp(String name)", "testcase": false, "constructor": false}, {"identifier": "isIoOpHasTimestamp", "parameters": "(String name, IOType type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIoOpHasTimestamp(String name, IOType type)", "full_signature": "public static boolean isIoOpHasTimestamp(String name, IOType type)", "class_method_signature": "AnnotationUtils.isIoOpHasTimestamp(String name, IOType type)", "testcase": false, "constructor": false}, {"identifier": "isFileSystem", "parameters": "(String name)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFileSystem(String name)", "full_signature": "public static boolean isFileSystem(String name)", "class_method_signature": "AnnotationUtils.isFileSystem(String name)", "testcase": false, "constructor": false}, {"identifier": "createOp", "parameters": "(String name, IOType type, Params parameter)", "modifiers": "public static", "return": "AlgoOperator", "signature": "AlgoOperator createOp(String name, IOType type, Params parameter)", "full_signature": "public static AlgoOperator createOp(String name, IOType type, Params parameter)", "class_method_signature": "AnnotationUtils.createOp(String name, IOType type, Params parameter)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/common/io/annotations/AnnotationUtils.java"}, "focal_method": {"identifier": "isIoOpHasTimestamp", "parameters": "(String name, IOType type)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isIoOpHasTimestamp(String name, IOType type) {\n        Wrapper<AlgoOperator> op = IO_OP_CLASSES.get(name, type);\n        Preconditions.checkArgument(op != null, \"No OP named %s has IOType: %s\", name, type);\n        return op.hasTimestamp;\n    }", "signature": "boolean isIoOpHasTimestamp(String name, IOType type)", "full_signature": "public static boolean isIoOpHasTimestamp(String name, IOType type)", "class_method_signature": "AnnotationUtils.isIoOpHasTimestamp(String name, IOType type)", "testcase": false, "constructor": false, "invocations": ["get", "checkArgument"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}