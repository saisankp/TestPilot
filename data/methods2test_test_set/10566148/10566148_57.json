{"test_class": {"identifier": "StrategyInstanceResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private StrategyInstanceResolver sut;", "modifier": "private", "type": "StrategyInstanceResolver", "declarator": "sut", "var_name": "sut"}, {"original_string": "private StrategyFinder strategyFinder;", "modifier": "private", "type": "StrategyFinder", "declarator": "strategyFinder", "var_name": "strategyFinder"}], "file": "saga-lib/src/test/java/com/codebullets/sagalib/processing/StrategyInstanceResolverTest.java"}, "test_case": {"identifier": "resolve_strategyReturnsInstance_instanceReturnedWithReturnValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void resolve_strategyReturnsInstance_instanceReturnedWithReturnValue() {\n        // given\n        ResolveStrategy strategy = mockStrategy();\n        SagaInstanceInfo instanceInfo = new SagaInstanceInfo(null, true);\n        when(strategy.resolve(any())).thenReturn(Lists.newArrayList(instanceInfo));\n\n        // when\n        Collection<SagaInstanceInfo> instances = sut.resolve(mock(LookupContext.class));\n\n        // then\n        assertThat(\"Expected instance in result set.\", instances, hasItem(instanceInfo));\n    }", "signature": "void resolve_strategyReturnsInstance_instanceReturnedWithReturnValue()", "full_signature": "@Test public void resolve_strategyReturnsInstance_instanceReturnedWithReturnValue()", "class_method_signature": "StrategyInstanceResolverTest.resolve_strategyReturnsInstance_instanceReturnedWithReturnValue()", "testcase": true, "constructor": false, "invocations": ["mockStrategy", "thenReturn", "when", "resolve", "any", "newArrayList", "resolve", "mock", "assertThat", "hasItem"]}, "focal_class": {"identifier": "StrategyInstanceResolver", "superclass": "", "interfaces": "implements InstanceResolver", "fields": [{"original_string": "private final StrategyFinder strategyFinder;", "modifier": "private final", "type": "StrategyFinder", "declarator": "strategyFinder", "var_name": "strategyFinder"}], "methods": [{"identifier": "StrategyInstanceResolver", "parameters": "(final StrategyFinder strategyFinder)", "modifiers": "@Inject public", "return": "", "signature": " StrategyInstanceResolver(final StrategyFinder strategyFinder)", "full_signature": "@Inject public  StrategyInstanceResolver(final StrategyFinder strategyFinder)", "class_method_signature": "StrategyInstanceResolver.StrategyInstanceResolver(final StrategyFinder strategyFinder)", "testcase": false, "constructor": true}, {"identifier": "resolve", "parameters": "(final LookupContext context)", "modifiers": "@Override public", "return": "Collection<SagaInstanceInfo>", "signature": "Collection<SagaInstanceInfo> resolve(final LookupContext context)", "full_signature": "@Override public Collection<SagaInstanceInfo> resolve(final LookupContext context)", "class_method_signature": "StrategyInstanceResolver.resolve(final LookupContext context)", "testcase": false, "constructor": false}], "file": "saga-lib/src/main/java/com/codebullets/sagalib/processing/StrategyInstanceResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final LookupContext context)", "modifiers": "@Override public", "return": "Collection<SagaInstanceInfo>", "body": "@Override\n    public Collection<SagaInstanceInfo> resolve(final LookupContext context) {\n        Collection<SagaInstanceInfo> allInstances = new ArrayList<>();\n        Collection<ResolveStrategy> resolveStrategies = strategyFinder.find(context);\n\n        for (ResolveStrategy strategy : resolveStrategies) {\n            Collection<SagaInstanceInfo> resolvedInstances = strategy.resolve(context);\n            allInstances.addAll(resolvedInstances);\n        }\n\n        return allInstances;\n    }", "signature": "Collection<SagaInstanceInfo> resolve(final LookupContext context)", "full_signature": "@Override public Collection<SagaInstanceInfo> resolve(final LookupContext context)", "class_method_signature": "StrategyInstanceResolver.resolve(final LookupContext context)", "testcase": false, "constructor": false, "invocations": ["find", "resolve", "addAll"]}, "repository": {"repo_id": 10566148, "url": "https://github.com/Domo42/saga-lib", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 32, "size": 545, "license": "licensed"}}