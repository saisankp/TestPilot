{"test_class": {"identifier": "CerberusMetadataLookupTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ERROR_RESPONSE = \"Test error response\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_RESPONSE = \"Test error response\"", "var_name": "ERROR_RESPONSE"}, {"original_string": "private static final String mockResponseBodyString = \"{\\n\" +\n            \"        \\\"has_next\\\" : false,\\n\" +\n            \"        \\\"next_offset\\\" : 0,\\n\" +\n            \"        \\\"limit\\\" : 2000,\\n\" +\n            \"        \\\"offset\\\" : 0,\\n\" +\n            \"        \\\"sdb_count_in_result\\\" : 1,\\n\" +\n            \"        \\\"total_sdbcount\\\" : 1,\\n\" +\n            \"        \\\"safe_deposit_box_metadata\\\" : [ {\\n\" +\n            \"            \\\"name\\\" : \\\"test sdb\\\",\\n\" +\n            \"            \\\"path\\\" : \\\"test/path/app\\\",\\n\" +\n            \"            \\\"category\\\" : \\\"Applications\\\",\\n\" +\n            \"            \\\"owner\\\" : \\\"Test.Owner\\\",\\n\" +\n            \"            \\\"description\\\" : \\\"test sdb\\\",\\n\" +\n            \"            \\\"created_ts\\\" : \\\"2019-05-13T20:13:56.799Z\\\",\\n\" +\n            \"            \\\"created_by\\\" : \\\"test.user@nike.com\\\",\\n\" +\n            \"            \\\"last_updated_ts\\\" : \\\"2019-05-13T20:13:56.799Z\\\",\\n\" +\n            \"            \\\"last_updated_by\\\" : \\\"arn:aws:iam::111111111111:role/example/role\\\",\\n\" +\n            \"            \\\"user_group_permissions\\\" : {  },\\n\" +\n            \"            \\\"iam_role_permissions\\\" : {\\n\" +\n            \"               \\\"arn:aws:iam::111111111111:role/example/role\\\" : \\\"read\\\"\\n\" +\n            \"          },\\n\" +\n            \"       \\\"data\\\" : null\\n\" +\n            \"      }]\\n\" +\n            \"}\";", "modifier": "private static final", "type": "String", "declarator": "mockResponseBodyString = \"{\\n\" +\n            \"        \\\"has_next\\\" : false,\\n\" +\n            \"        \\\"next_offset\\\" : 0,\\n\" +\n            \"        \\\"limit\\\" : 2000,\\n\" +\n            \"        \\\"offset\\\" : 0,\\n\" +\n            \"        \\\"sdb_count_in_result\\\" : 1,\\n\" +\n            \"        \\\"total_sdbcount\\\" : 1,\\n\" +\n            \"        \\\"safe_deposit_box_metadata\\\" : [ {\\n\" +\n            \"            \\\"name\\\" : \\\"test sdb\\\",\\n\" +\n            \"            \\\"path\\\" : \\\"test/path/app\\\",\\n\" +\n            \"            \\\"category\\\" : \\\"Applications\\\",\\n\" +\n            \"            \\\"owner\\\" : \\\"Test.Owner\\\",\\n\" +\n            \"            \\\"description\\\" : \\\"test sdb\\\",\\n\" +\n            \"            \\\"created_ts\\\" : \\\"2019-05-13T20:13:56.799Z\\\",\\n\" +\n            \"            \\\"created_by\\\" : \\\"test.user@nike.com\\\",\\n\" +\n            \"            \\\"last_updated_ts\\\" : \\\"2019-05-13T20:13:56.799Z\\\",\\n\" +\n            \"            \\\"last_updated_by\\\" : \\\"arn:aws:iam::111111111111:role/example/role\\\",\\n\" +\n            \"            \\\"user_group_permissions\\\" : {  },\\n\" +\n            \"            \\\"iam_role_permissions\\\" : {\\n\" +\n            \"               \\\"arn:aws:iam::111111111111:role/example/role\\\" : \\\"read\\\"\\n\" +\n            \"          },\\n\" +\n            \"       \\\"data\\\" : null\\n\" +\n            \"      }]\\n\" +\n            \"}\"", "var_name": "mockResponseBodyString"}, {"original_string": "private static final String emptyMetadataResponseBodyString = \"{  \\n\" +\n            \"   \\\"has_next\\\":false,\\n\" +\n            \"   \\\"next_offset\\\":0,\\n\" +\n            \"   \\\"limit\\\":2000,\\n\" +\n            \"   \\\"offset\\\":0,\\n\" +\n            \"   \\\"sdb_count_in_result\\\":1723,\\n\" +\n            \"   \\\"total_sdbcount\\\":1723,\\n\" +\n            \"   \\\"safe_deposit_box_metadata\\\":[  \\n\" +\n            \"\\n\" +\n            \"   ]\\n\" +\n            \"}\";", "modifier": "private static final", "type": "String", "declarator": "emptyMetadataResponseBodyString = \"{  \\n\" +\n            \"   \\\"has_next\\\":false,\\n\" +\n            \"   \\\"next_offset\\\":0,\\n\" +\n            \"   \\\"limit\\\":2000,\\n\" +\n            \"   \\\"offset\\\":0,\\n\" +\n            \"   \\\"sdb_count_in_result\\\":1723,\\n\" +\n            \"   \\\"total_sdbcount\\\":1723,\\n\" +\n            \"   \\\"safe_deposit_box_metadata\\\":[  \\n\" +\n            \"\\n\" +\n            \"   ]\\n\" +\n            \"}\"", "var_name": "emptyMetadataResponseBodyString"}, {"original_string": "private CerberusMetadataLookup cerberusMetadataLookup = new CerberusMetadataLookup();", "modifier": "private", "type": "CerberusMetadataLookup", "declarator": "cerberusMetadataLookup = new CerberusMetadataLookup()", "var_name": "cerberusMetadataLookup"}], "file": "cerberus-ip-translator-lambda/src/test/java/com.nike.cerberus.lambda.waf/CerberusMetadataLookupTest.java"}, "test_case": {"identifier": "test_get_metadata_bad_response", "parameters": "()", "modifiers": "@Test(expected = RuntimeException.class) public", "return": "void", "body": "@Test(expected = RuntimeException.class)\n    public void test_get_metadata_bad_response() throws IOException {\n        MockWebServer mockWebServer = new MockWebServer();\n        mockWebServer.start();\n        final String cerberusUrl = \"http://localhost:\" + mockWebServer.getPort();\n\n        mockWebServer.enqueue(new MockResponse().setResponseCode(400).setBody(ERROR_RESPONSE));\n        ArrayList<Map<String, String>> sdbMetadata = cerberusMetadataLookup.getCerberusMetadata(cerberusUrl);\n    }", "signature": "void test_get_metadata_bad_response()", "full_signature": "@Test(expected = RuntimeException.class) public void test_get_metadata_bad_response()", "class_method_signature": "CerberusMetadataLookupTest.test_get_metadata_bad_response()", "testcase": true, "constructor": false, "invocations": ["start", "getPort", "enqueue", "setBody", "setResponseCode", "getCerberusMetadata"]}, "focal_class": {"identifier": "CerberusMetadataLookup", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DEFAULT_TIMEOUT = 60_000;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_TIMEOUT = 60_000", "var_name": "DEFAULT_TIMEOUT"}, {"original_string": "private static final TimeUnit DEFAULT_TIMEOUT_UNIT = TimeUnit.MILLISECONDS;", "modifier": "private static final", "type": "TimeUnit", "declarator": "DEFAULT_TIMEOUT_UNIT = TimeUnit.MILLISECONDS", "var_name": "DEFAULT_TIMEOUT_UNIT"}, {"original_string": "private static final String CERBERUS_TOKEN = \"X-Cerberus-Token\";", "modifier": "private static final", "type": "String", "declarator": "CERBERUS_TOKEN = \"X-Cerberus-Token\"", "var_name": "CERBERUS_TOKEN"}, {"original_string": "private static final String EMAIL_SYMBOL = \"@\";", "modifier": "private static final", "type": "String", "declarator": "EMAIL_SYMBOL = \"@\"", "var_name": "EMAIL_SYMBOL"}, {"original_string": "private final Logger logger = Logger.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = Logger.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private static final ConnectionSpec TLS_1_2_OR_NEWER = new ConnectionSpec.Builder(MODERN_TLS)\n            .tlsVersions(TlsVersion.TLS_1_3, TlsVersion.TLS_1_2)\n            .build();", "modifier": "private static final", "type": "ConnectionSpec", "declarator": "TLS_1_2_OR_NEWER = new ConnectionSpec.Builder(MODERN_TLS)\n            .tlsVersions(TlsVersion.TLS_1_3, TlsVersion.TLS_1_2)\n            .build()", "var_name": "TLS_1_2_OR_NEWER"}], "methods": [{"identifier": "createHttpClient", "parameters": "()", "modifiers": "private", "return": "OkHttpClient", "signature": "OkHttpClient createHttpClient()", "full_signature": "private OkHttpClient createHttpClient()", "class_method_signature": "CerberusMetadataLookup.createHttpClient()", "testcase": false, "constructor": false}, {"identifier": "getCerberusMetadata", "parameters": "(String environment)", "modifiers": "public", "return": "ArrayList<Map<String, String>>", "signature": "ArrayList<Map<String, String>> getCerberusMetadata(String environment)", "full_signature": "public ArrayList<Map<String, String>> getCerberusMetadata(String environment)", "class_method_signature": "CerberusMetadataLookup.getCerberusMetadata(String environment)", "testcase": false, "constructor": false}, {"identifier": "searchCerberusMetadata", "parameters": "(ArrayList<Map<String, String>> sdbMetadata, String sdbName, String principalName)", "modifiers": "public", "return": "ArrayList<String>", "signature": "ArrayList<String> searchCerberusMetadata(ArrayList<Map<String, String>> sdbMetadata, String sdbName, String principalName)", "full_signature": "public ArrayList<String> searchCerberusMetadata(ArrayList<Map<String, String>> sdbMetadata, String sdbName, String principalName)", "class_method_signature": "CerberusMetadataLookup.searchCerberusMetadata(ArrayList<Map<String, String>> sdbMetadata, String sdbName, String principalName)", "testcase": false, "constructor": false}, {"identifier": "executeRequest", "parameters": "(OkHttpClient httpClient, DefaultCerberusCredentialsProviderChain chain,\n                                   String cerberusUrl, String offset)", "modifiers": "private", "return": "HashMap", "signature": "HashMap executeRequest(OkHttpClient httpClient, DefaultCerberusCredentialsProviderChain chain,\n                                   String cerberusUrl, String offset)", "full_signature": "private HashMap executeRequest(OkHttpClient httpClient, DefaultCerberusCredentialsProviderChain chain,\n                                   String cerberusUrl, String offset)", "class_method_signature": "CerberusMetadataLookup.executeRequest(OkHttpClient httpClient, DefaultCerberusCredentialsProviderChain chain,\n                                   String cerberusUrl, String offset)", "testcase": false, "constructor": false}], "file": "cerberus-ip-translator-lambda/src/main/java/com.nike.cerberus.lambda.waf/CerberusMetadataLookup.java"}, "focal_method": {"identifier": "getCerberusMetadata", "parameters": "(String environment)", "modifiers": "public", "return": "ArrayList<Map<String, String>>", "body": "public ArrayList<Map<String, String>> getCerberusMetadata(String environment) {\n\n        String cerberusUrl = String.format(\"https://%s.cerberus.nikecloud.com\", environment);\n        OkHttpClient httpClient = createHttpClient();\n        String region = EnvUtils.getRequiredEnv(\"REGION\");\n        DefaultCerberusCredentialsProviderChain chain = new DefaultCerberusCredentialsProviderChain(cerberusUrl, region);\n\n        ArrayList<Map<String, String>> sdbMetadata = new ArrayList<>();\n        String offset = \"0\";\n        Boolean hasNext;\n\n        do {\n            HashMap result = executeRequest(httpClient, chain, cerberusUrl, offset);\n            sdbMetadata.addAll((ArrayList<Map<String, String>>) result.get(\"safe_deposit_box_metadata\"));\n\n            offset = result.get(\"next_offset\").toString();\n            hasNext = Boolean.valueOf(result.get(\"has_next\").toString());\n\n        } while (hasNext);\n\n        if (sdbMetadata.isEmpty()) {\n            throw new NullPointerException(\"SDB Metadata is empty\");\n        }\n        return sdbMetadata;\n    }", "signature": "ArrayList<Map<String, String>> getCerberusMetadata(String environment)", "full_signature": "public ArrayList<Map<String, String>> getCerberusMetadata(String environment)", "class_method_signature": "CerberusMetadataLookup.getCerberusMetadata(String environment)", "testcase": false, "constructor": false, "invocations": ["format", "createHttpClient", "getRequiredEnv", "executeRequest", "addAll", "get", "toString", "get", "valueOf", "toString", "get", "isEmpty"]}, "repository": {"repo_id": 70515197, "url": "https://github.com/Nike-Inc/cerberus-serverless-components", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 12, "size": 269, "license": "licensed"}}