{"test_class": {"identifier": "PublicKeyTest", "superclass": "", "interfaces": "", "fields": [], "file": "elrond-core/src/test/java/network/elrond/crypto/PublicKeyTest.java"}, "test_case": {"identifier": "testConstructorWithPrivateKeyInitializezPublicKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConstructorWithPrivateKeyInitializezPublicKey(){\n        PublicKey publicKey = new PublicKey(new PrivateKey(\"Test\"));\n        Assert.assertNotNull(publicKey);\n        Assert.assertTrue(publicKey.isInitialized());\n    }", "signature": "void testConstructorWithPrivateKeyInitializezPublicKey()", "full_signature": "@Test public void testConstructorWithPrivateKeyInitializezPublicKey()", "class_method_signature": "PublicKeyTest.testConstructorWithPrivateKeyInitializezPublicKey()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "assertTrue", "isInitialized"]}, "focal_class": {"identifier": "PublicKey", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LogManager.getLogger(PublicKey.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LogManager.getLogger(PublicKey.class)", "var_name": "logger"}, {"original_string": "private ECPoint q;", "modifier": "private", "type": "ECPoint", "declarator": "q", "var_name": "q"}, {"original_string": "private boolean initialized;", "modifier": "private", "type": "boolean", "declarator": "initialized", "var_name": "initialized"}], "methods": [{"identifier": "PublicKey", "parameters": "(byte[] publicPointQEncoding)", "modifiers": "public", "return": "", "signature": " PublicKey(byte[] publicPointQEncoding)", "full_signature": "public  PublicKey(byte[] publicPointQEncoding)", "class_method_signature": "PublicKey.PublicKey(byte[] publicPointQEncoding)", "testcase": false, "constructor": true}, {"identifier": "PublicKey", "parameters": "(PublicKey publicKey)", "modifiers": "public", "return": "", "signature": " PublicKey(PublicKey publicKey)", "full_signature": "public  PublicKey(PublicKey publicKey)", "class_method_signature": "PublicKey.PublicKey(PublicKey publicKey)", "testcase": false, "constructor": true}, {"identifier": "PublicKey", "parameters": "(PrivateKey privateKey)", "modifiers": "public", "return": "", "signature": " PublicKey(PrivateKey privateKey)", "full_signature": "public  PublicKey(PrivateKey privateKey)", "class_method_signature": "PublicKey.PublicKey(PrivateKey privateKey)", "testcase": false, "constructor": true}, {"identifier": "createPublicKey", "parameters": "(byte[] publicPointQEncoding)", "modifiers": "private", "return": "void", "signature": "void createPublicKey(byte[] publicPointQEncoding)", "full_signature": "private void createPublicKey(byte[] publicPointQEncoding)", "class_method_signature": "PublicKey.createPublicKey(byte[] publicPointQEncoding)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getValue()", "full_signature": "public byte[] getValue()", "class_method_signature": "PublicKey.getValue()", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isValid()", "full_signature": "public boolean isValid()", "class_method_signature": "PublicKey.isValid()", "testcase": false, "constructor": false}, {"identifier": "isInitialized", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInitialized()", "full_signature": "public boolean isInitialized()", "class_method_signature": "PublicKey.isInitialized()", "testcase": false, "constructor": false}, {"identifier": "getQ", "parameters": "()", "modifiers": "public", "return": "ECPoint", "signature": "ECPoint getQ()", "full_signature": "public ECPoint getQ()", "class_method_signature": "PublicKey.getQ()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PublicKey.toString()", "testcase": false, "constructor": false}], "file": "elrond-core/src/main/java/network/elrond/crypto/PublicKey.java"}, "focal_method": {"identifier": "isInitialized", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isInitialized() {\n        return initialized;\n    }", "signature": "boolean isInitialized()", "full_signature": "public boolean isInitialized()", "class_method_signature": "PublicKey.isInitialized()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 132454935, "url": "https://github.com/ElrondNetwork/elrond-node-prototype", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 16635, "license": "licensed"}}