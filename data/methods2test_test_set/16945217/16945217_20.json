{"test_class": {"identifier": "TStringUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "tddl-common/src/test/java/com/taobao/tddl/common/utils/TStringUtilTest.java"}, "test_case": {"identifier": "testFillTabWithSpace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFillTabWithSpace() {\n        String sql = \"   select sum(rate)      from                                                                          feed_receive_0117                                                            t             where       RATED_UID=?     and RATER_UID=?     and suspended=0 and validscore=1      and rater_type=?     and trade_closingdate>=?     and trade_closingdate<?     and id<>?        and (IFNULL(IMPORT_FROM, 0)&8) = 0        #@#mysql_feel_01#@#EXECUTE_A_SQL_TIMEOUT#@#1#@#484#@#484#@#484\";\n        String assertSql = \"select sum(rate) from feed_receive_0117 t where RATED_UID=? and RATER_UID=? and suspended=0 and validscore=1 and rater_type=? and trade_closingdate>=? and trade_closingdate<? and id<>? and (IFNULL(IMPORT_FROM, 0)&8) = 0 #@#mysql_feel_01#@#EXECUTE_A_SQL_TIMEOUT#@#1#@#484#@#484#@#484\";\n        String acutulSql = null;\n        acutulSql = TStringUtil.fillTabWithSpace(sql);\n        Assert.assertEquals(assertSql, acutulSql);\n    }", "signature": "void testFillTabWithSpace()", "full_signature": "@Test public void testFillTabWithSpace()", "class_method_signature": "TStringUtilTest.testFillTabWithSpace()", "testcase": true, "constructor": false, "invocations": ["fillTabWithSpace", "assertEquals"]}, "focal_class": {"identifier": "TStringUtil", "superclass": "extends StringUtils", "interfaces": "", "fields": [], "methods": [{"identifier": "getBetween", "parameters": "(String sql, String start, String end)", "modifiers": "public static", "return": "String", "signature": "String getBetween(String sql, String start, String end)", "full_signature": "public static String getBetween(String sql, String start, String end)", "class_method_signature": "TStringUtil.getBetween(String sql, String start, String end)", "testcase": false, "constructor": false}, {"identifier": "removeBetween", "parameters": "(String sql, String start, String end)", "modifiers": "public static", "return": "String", "signature": "String removeBetween(String sql, String start, String end)", "full_signature": "public static String removeBetween(String sql, String start, String end)", "class_method_signature": "TStringUtil.removeBetween(String sql, String start, String end)", "testcase": false, "constructor": false}, {"identifier": "twoPartSplit", "parameters": "(String str, String splitor)", "modifiers": "public static", "return": "String[]", "signature": "String[] twoPartSplit(String str, String splitor)", "full_signature": "public static String[] twoPartSplit(String str, String splitor)", "class_method_signature": "TStringUtil.twoPartSplit(String str, String splitor)", "testcase": false, "constructor": false}, {"identifier": "recursiveSplit", "parameters": "(String str, String splitor)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> recursiveSplit(String str, String splitor)", "full_signature": "public static List<String> recursiveSplit(String str, String splitor)", "class_method_signature": "TStringUtil.recursiveSplit(String str, String splitor)", "testcase": false, "constructor": false}, {"identifier": "fillTabWithSpace", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String fillTabWithSpace(String str)", "full_signature": "public static String fillTabWithSpace(String str)", "class_method_signature": "TStringUtil.fillTabWithSpace(String str)", "testcase": false, "constructor": false}, {"identifier": "startsWithIgnoreCaseAndWs", "parameters": "(String searchIn, String searchFor)", "modifiers": "public static", "return": "boolean", "signature": "boolean startsWithIgnoreCaseAndWs(String searchIn, String searchFor)", "full_signature": "public static boolean startsWithIgnoreCaseAndWs(String searchIn, String searchFor)", "class_method_signature": "TStringUtil.startsWithIgnoreCaseAndWs(String searchIn, String searchFor)", "testcase": false, "constructor": false}, {"identifier": "startsWithIgnoreCaseAndWs", "parameters": "(String searchIn, String searchFor, int beginPos)", "modifiers": "public static", "return": "boolean", "signature": "boolean startsWithIgnoreCaseAndWs(String searchIn, String searchFor, int beginPos)", "full_signature": "public static boolean startsWithIgnoreCaseAndWs(String searchIn, String searchFor, int beginPos)", "class_method_signature": "TStringUtil.startsWithIgnoreCaseAndWs(String searchIn, String searchFor, int beginPos)", "testcase": false, "constructor": false}, {"identifier": "startsWithIgnoreCase", "parameters": "(String searchIn, int startAt, String searchFor)", "modifiers": "public static", "return": "boolean", "signature": "boolean startsWithIgnoreCase(String searchIn, int startAt, String searchFor)", "full_signature": "public static boolean startsWithIgnoreCase(String searchIn, int startAt, String searchFor)", "class_method_signature": "TStringUtil.startsWithIgnoreCase(String searchIn, int startAt, String searchFor)", "testcase": false, "constructor": false}, {"identifier": "stripComments", "parameters": "(String src, String stringOpens, String stringCloses, boolean slashStarComments,\n                                       boolean slashSlashComments, boolean hashComments, boolean dashDashComments)", "modifiers": "public static", "return": "String", "signature": "String stripComments(String src, String stringOpens, String stringCloses, boolean slashStarComments,\n                                       boolean slashSlashComments, boolean hashComments, boolean dashDashComments)", "full_signature": "public static String stripComments(String src, String stringOpens, String stringCloses, boolean slashStarComments,\n                                       boolean slashSlashComments, boolean hashComments, boolean dashDashComments)", "class_method_signature": "TStringUtil.stripComments(String src, String stringOpens, String stringCloses, boolean slashStarComments,\n                                       boolean slashSlashComments, boolean hashComments, boolean dashDashComments)", "testcase": false, "constructor": false}, {"identifier": "removeBetweenWithSplitor", "parameters": "(String sql, String start, String end)", "modifiers": "public static", "return": "String", "signature": "String removeBetweenWithSplitor(String sql, String start, String end)", "full_signature": "public static String removeBetweenWithSplitor(String sql, String start, String end)", "class_method_signature": "TStringUtil.removeBetweenWithSplitor(String sql, String start, String end)", "testcase": false, "constructor": false}, {"identifier": "removeBetweenWithSplitorNotExistNull", "parameters": "(String sql, String start, String end)", "modifiers": "public static", "return": "String", "signature": "String removeBetweenWithSplitorNotExistNull(String sql, String start, String end)", "full_signature": "public static String removeBetweenWithSplitorNotExistNull(String sql, String start, String end)", "class_method_signature": "TStringUtil.removeBetweenWithSplitorNotExistNull(String sql, String start, String end)", "testcase": false, "constructor": false}, {"identifier": "isTableFatherAndSon", "parameters": "(String fatherTable, String sonTable)", "modifiers": "public static", "return": "boolean", "signature": "boolean isTableFatherAndSon(String fatherTable, String sonTable)", "full_signature": "public static boolean isTableFatherAndSon(String fatherTable, String sonTable)", "class_method_signature": "TStringUtil.isTableFatherAndSon(String fatherTable, String sonTable)", "testcase": false, "constructor": false}], "file": "tddl-common/src/main/java/com/taobao/tddl/common/utils/TStringUtil.java"}, "focal_method": {"identifier": "fillTabWithSpace", "parameters": "(String str)", "modifiers": "public static", "return": "String", "body": "public static String fillTabWithSpace(String str) {\n        if (str == null) {\n            return null;\n        }\n\n        str = str.trim();\n        int sz = str.length();\n        StringBuilder buffer = new StringBuilder(sz);\n\n        int index = 0, index0 = -1, index1 = -1;\n        for (int i = 0; i < sz; i++) {\n            char c = str.charAt(i);\n            if (!Character.isWhitespace(c)) {\n                if (index0 != -1) {\n                    // if (!(index0 == index1 && str.charAt(i - 1) == ' ')) {\n                    if (index0 != index1 || str.charAt(i - 1) != ' ') {\n                        buffer.append(str.substring(index, index0)).append(\" \");\n                        index = index1 + 1;\n                    }\n                }\n                index0 = index1 = -1;\n            } else {\n                if (index0 == -1) {\n                    index0 = index1 = i; // \u7b2c\u4e00\u4e2a\u7a7a\u767d\n                } else {\n                    index1 = i;\n                }\n            }\n        }\n\n        buffer.append(str.substring(index));\n        return buffer.toString();\n    }", "signature": "String fillTabWithSpace(String str)", "full_signature": "public static String fillTabWithSpace(String str)", "class_method_signature": "TStringUtil.fillTabWithSpace(String str)", "testcase": false, "constructor": false, "invocations": ["trim", "length", "charAt", "isWhitespace", "charAt", "append", "append", "substring", "append", "substring", "toString"]}, "repository": {"repo_id": 16945217, "url": "https://github.com/cpsing/tddl", "language": "Java", "is_fork": false, "fork_count": 126, "stargazer_count": 31, "size": 3247, "license": "licensed"}}