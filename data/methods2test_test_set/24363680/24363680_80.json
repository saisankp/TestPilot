{"test_class": {"identifier": "DefaultCoinSelectorTest", "superclass": "extends TestWithWallet", "interfaces": "", "fields": [{"original_string": "private static final NetworkParameters params = UnitTestParams.get();", "modifier": "private static final", "type": "NetworkParameters", "declarator": "params = UnitTestParams.get()", "var_name": "params"}], "file": "core/src/test/java/com/google/bitcoin/wallet/DefaultCoinSelectorTest.java"}, "test_case": {"identifier": "selectable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void selectable() throws Exception {\n        Transaction t;\n        t = new Transaction(params);\n        t.getConfidence().setConfidenceType(TransactionConfidence.ConfidenceType.PENDING);\n        assertFalse(DefaultCoinSelector.isSelectable(t));\n        t.getConfidence().setSource(TransactionConfidence.Source.SELF);\n        assertFalse(DefaultCoinSelector.isSelectable(t));\n        t.getConfidence().markBroadcastBy(new PeerAddress(InetAddress.getByName(\"1.2.3.4\")));\n        assertFalse(DefaultCoinSelector.isSelectable(t));\n        t.getConfidence().markBroadcastBy(new PeerAddress(InetAddress.getByName(\"5.6.7.8\")));\n        assertTrue(DefaultCoinSelector.isSelectable(t));\n        t = new Transaction(params);\n        t.getConfidence().setConfidenceType(TransactionConfidence.ConfidenceType.BUILDING);\n        assertTrue(DefaultCoinSelector.isSelectable(t));\n        t = new Transaction(RegTestParams.get());\n        t.getConfidence().setConfidenceType(TransactionConfidence.ConfidenceType.PENDING);\n        t.getConfidence().setSource(TransactionConfidence.Source.SELF);\n        assertTrue(DefaultCoinSelector.isSelectable(t));\n    }", "signature": "void selectable()", "full_signature": "@Test public void selectable()", "class_method_signature": "DefaultCoinSelectorTest.selectable()", "testcase": true, "constructor": false, "invocations": ["setConfidenceType", "getConfidence", "assertFalse", "isSelectable", "setSource", "getConfidence", "assertFalse", "isSelectable", "markBroadcastBy", "getConfidence", "getByName", "assertFalse", "isSelectable", "markBroadcastBy", "getConfidence", "getByName", "assertTrue", "isSelectable", "setConfidenceType", "getConfidence", "assertTrue", "isSelectable", "get", "setConfidenceType", "getConfidence", "setSource", "getConfidence", "assertTrue", "isSelectable"]}, "focal_class": {"identifier": "DefaultCoinSelector", "superclass": "", "interfaces": "implements CoinSelector", "fields": [], "methods": [{"identifier": "select", "parameters": "(BigInteger biTarget, LinkedList<TransactionOutput> candidates)", "modifiers": "public", "return": "CoinSelection", "signature": "CoinSelection select(BigInteger biTarget, LinkedList<TransactionOutput> candidates)", "full_signature": "public CoinSelection select(BigInteger biTarget, LinkedList<TransactionOutput> candidates)", "class_method_signature": "DefaultCoinSelector.select(BigInteger biTarget, LinkedList<TransactionOutput> candidates)", "testcase": false, "constructor": false}, {"identifier": "sortOutputs", "parameters": "(ArrayList<TransactionOutput> outputs)", "modifiers": "@VisibleForTesting static", "return": "void", "signature": "void sortOutputs(ArrayList<TransactionOutput> outputs)", "full_signature": "@VisibleForTesting static void sortOutputs(ArrayList<TransactionOutput> outputs)", "class_method_signature": "DefaultCoinSelector.sortOutputs(ArrayList<TransactionOutput> outputs)", "testcase": false, "constructor": false}, {"identifier": "shouldSelect", "parameters": "(Transaction tx)", "modifiers": "protected", "return": "boolean", "signature": "boolean shouldSelect(Transaction tx)", "full_signature": "protected boolean shouldSelect(Transaction tx)", "class_method_signature": "DefaultCoinSelector.shouldSelect(Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "isSelectable", "parameters": "(Transaction tx)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSelectable(Transaction tx)", "full_signature": "public static boolean isSelectable(Transaction tx)", "class_method_signature": "DefaultCoinSelector.isSelectable(Transaction tx)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/google/bitcoin/wallet/DefaultCoinSelector.java"}, "focal_method": {"identifier": "isSelectable", "parameters": "(Transaction tx)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isSelectable(Transaction tx) {\n        // Only pick chain-included transactions, or transactions that are ours and pending.\n        TransactionConfidence confidence = tx.getConfidence();\n        TransactionConfidence.ConfidenceType type = confidence.getConfidenceType();\n        return type.equals(TransactionConfidence.ConfidenceType.BUILDING) ||\n\n               type.equals(TransactionConfidence.ConfidenceType.PENDING) &&\n               confidence.getSource().equals(TransactionConfidence.Source.SELF) &&\n               // In regtest mode we expect to have only one peer, so we won't see transactions propagate.\n               // TODO: The value 1 below dates from a time when transactions we broadcast *to* were counted, set to 0\n               (confidence.numBroadcastPeers() > 1 || tx.getParams() == RegTestParams.get());\n    }", "signature": "boolean isSelectable(Transaction tx)", "full_signature": "public static boolean isSelectable(Transaction tx)", "class_method_signature": "DefaultCoinSelector.isSelectable(Transaction tx)", "testcase": false, "constructor": false, "invocations": ["getConfidence", "getConfidenceType", "equals", "equals", "equals", "getSource", "numBroadcastPeers", "getParams", "get"]}, "repository": {"repo_id": 24363680, "url": "https://github.com/cannabiscoindev/cannabiscoinj", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 10126, "license": "licensed"}}