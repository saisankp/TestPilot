{"test_class": {"identifier": "LdapUserNodeMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String ID_ATTR_ID = \"sAMAccountName\";", "modifier": "private final", "type": "String", "declarator": "ID_ATTR_ID = \"sAMAccountName\"", "var_name": "ID_ATTR_ID"}, {"original_string": "private LdapUserNodeMapper mapper;", "modifier": "private", "type": "LdapUserNodeMapper", "declarator": "mapper", "var_name": "mapper"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/ad/service/mapper/LdapUserNodeMapperTest.java"}, "test_case": {"identifier": "mapFromAttributeReturnsExpectedNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mapFromAttributeReturnsExpectedNode() throws NamingException {\n        // given\n        var expectedId = \"ID\";\n        var expectedName = \"full name\";\n        var expectedGivenName = \"given name\";\n        var expectedMail = \"mail@test.com\";\n        var expectedManagerDn = \"manager DN\";\n        var expectedSurname = \"surname\";\n        var expectedDepartment = \"department\";\n        var expectedDivision = \"division\";\n        var expectedDn = \"user DN\";\n        var expectedDirectReports = List.of(\"D1\", \"D2\");\n\n        var idAttr = createAttribute(ID_ATTR_ID, expectedId);\n        var nameAttr = createAttribute(\"name\", expectedName);\n        var givenNameAttr = createAttribute(\"givenName\", expectedGivenName);\n        var mailAttr = createAttribute(\"mail\", expectedMail);\n        var managerAttr = createAttribute(\"manager\", expectedManagerDn);\n        var surnameAttr = createAttribute(\"sn\", expectedSurname);\n        var departmentAttr = createAttribute(\"department\", expectedDepartment);\n        var divisionAttr = createAttribute(\"division\", expectedDivision);\n        var dnAttr = createAttribute(\"distinguishedName\", expectedDn);\n        var directReportsAttr = createAttribute(\"directReports\", \"D1\", \"D2\");\n\n        var attributes = new BasicAttributes();\n        for(var attr : List.of(idAttr, nameAttr, givenNameAttr, mailAttr, managerAttr,\n                surnameAttr, departmentAttr, divisionAttr, dnAttr, directReportsAttr)) {\n            attributes.put(attr);\n        }\n\n        var expectedNode = new LdapUserNode(expectedId, expectedName, expectedGivenName, expectedSurname,\n                expectedMail, expectedDivision, expectedDepartment, expectedDn,\n                expectedManagerDn, expectedDirectReports);\n\n        // when\n        var actualNode = mapper.mapFromAttributes(attributes);\n\n        // then\n        assertThat(actualNode).isEqualTo(expectedNode);\n    }", "signature": "void mapFromAttributeReturnsExpectedNode()", "full_signature": "@Test public void mapFromAttributeReturnsExpectedNode()", "class_method_signature": "LdapUserNodeMapperTest.mapFromAttributeReturnsExpectedNode()", "testcase": true, "constructor": false, "invocations": ["of", "createAttribute", "createAttribute", "createAttribute", "createAttribute", "createAttribute", "createAttribute", "createAttribute", "createAttribute", "createAttribute", "createAttribute", "of", "put", "mapFromAttributes", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "LdapUserNodeMapper", "superclass": "extends BaseAttributeMapper<LdapUserNode>", "interfaces": "", "fields": [{"original_string": "private final String idAttribute;", "modifier": "private final", "type": "String", "declarator": "idAttribute", "var_name": "idAttribute"}], "methods": [{"identifier": "LdapUserNodeMapper", "parameters": "(String idAttribute)", "modifiers": "public", "return": "", "signature": " LdapUserNodeMapper(String idAttribute)", "full_signature": "public  LdapUserNodeMapper(String idAttribute)", "class_method_signature": "LdapUserNodeMapper.LdapUserNodeMapper(String idAttribute)", "testcase": false, "constructor": true}, {"identifier": "mapFromAttributes", "parameters": "(Attributes attributes)", "modifiers": "@Override public", "return": "LdapUserNode", "signature": "LdapUserNode mapFromAttributes(Attributes attributes)", "full_signature": "@Override public LdapUserNode mapFromAttributes(Attributes attributes)", "class_method_signature": "LdapUserNodeMapper.mapFromAttributes(Attributes attributes)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/ad/service/mapper/LdapUserNodeMapper.java"}, "focal_method": {"identifier": "mapFromAttributes", "parameters": "(Attributes attributes)", "modifiers": "@Override public", "return": "LdapUserNode", "body": "@Override\n    public LdapUserNode mapFromAttributes(Attributes attributes) throws NamingException {\n        var idAttrValue = getSingleAttributeValue(attributes, idAttribute, String.class);\n        var nameAttrValue = getSingleAttributeValue(attributes, \"name\", String.class);\n        var givenNameAttrValue = getSingleAttributeValue(attributes, \"givenName\", String.class);\n        var mailAttrValue = getSingleAttributeValue(attributes, \"mail\", String.class);\n        var managerAttrValue = getSingleAttributeValue(attributes, \"manager\", String.class);\n        var snAttrValue = getSingleAttributeValue(attributes, \"sn\", String.class);\n        var departmentAttrValue = getSingleAttributeValue(attributes, \"department\", String.class);\n        var divisionAttrValue = getSingleAttributeValue(attributes, \"division\", String.class);\n        var dnAttrValue = getSingleAttributeValue(attributes, \"distinguishedName\", String.class);\n\n        var directReportsAttrValue = getAllAttributeValues(attributes, \"directReports\", String.class);\n\n        return new LdapUserNode(idAttrValue, nameAttrValue, givenNameAttrValue, snAttrValue,\n                mailAttrValue, divisionAttrValue, departmentAttrValue, dnAttrValue, managerAttrValue, directReportsAttrValue);\n    }", "signature": "LdapUserNode mapFromAttributes(Attributes attributes)", "full_signature": "@Override public LdapUserNode mapFromAttributes(Attributes attributes)", "class_method_signature": "LdapUserNodeMapper.mapFromAttributes(Attributes attributes)", "testcase": false, "constructor": false, "invocations": ["getSingleAttributeValue", "getSingleAttributeValue", "getSingleAttributeValue", "getSingleAttributeValue", "getSingleAttributeValue", "getSingleAttributeValue", "getSingleAttributeValue", "getSingleAttributeValue", "getSingleAttributeValue", "getAllAttributeValues"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}