{"test_class": {"identifier": "DefaultUnitOfWorkManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UnitOfWorkManager unitOfWorkManager;", "modifier": "private", "type": "UnitOfWorkManager", "declarator": "unitOfWorkManager", "var_name": "unitOfWorkManager"}], "file": "api/kogito-services/src/test/java/org/kie/kogito/services/uow/DefaultUnitOfWorkManagerTest.java"}, "test_case": {"identifier": "testUnitOfWorkStartEnd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnitOfWorkStartEnd() {\n        \n        UnitOfWork unit = unitOfWorkManager.newUnitOfWork();\n        assertThat(unit).isNotNull().isInstanceOf(ManagedUnitOfWork.class);\n        assertThat(((ManagedUnitOfWork)unit).delegate()).isInstanceOf(CollectingUnitOfWork.class);\n        \n        final AtomicInteger counter = new AtomicInteger(0);\n        assertThat(counter.get()).isEqualTo(0);\n        \n        BaseWorkUnit dummyWork = new BaseWorkUnit(counter, (d) -> ((AtomicInteger) d).incrementAndGet());\n        unit.start();\n        unit.intercept(dummyWork);\n        unit.end();\n        \n        assertThat(counter.get()).isEqualTo(1);        \n    }", "signature": "void testUnitOfWorkStartEnd()", "full_signature": "@Test public void testUnitOfWorkStartEnd()", "class_method_signature": "DefaultUnitOfWorkManagerTest.testUnitOfWorkStartEnd()", "testcase": true, "constructor": false, "invocations": ["newUnitOfWork", "isInstanceOf", "isNotNull", "assertThat", "isInstanceOf", "assertThat", "delegate", "isEqualTo", "assertThat", "get", "incrementAndGet", "start", "intercept", "end", "isEqualTo", "assertThat", "get"]}, "focal_class": {"identifier": "DefaultUnitOfWorkManager", "superclass": "", "interfaces": "implements UnitOfWorkManager", "fields": [{"original_string": "private ThreadLocal<UnitOfWork> currentUnitOfWork = new ThreadLocal<>();", "modifier": "private", "type": "ThreadLocal<UnitOfWork>", "declarator": "currentUnitOfWork = new ThreadLocal<>()", "var_name": "currentUnitOfWork"}, {"original_string": "private UnitOfWork fallbackUnitOfWork = new PassThroughUnitOfWork();", "modifier": "private", "type": "UnitOfWork", "declarator": "fallbackUnitOfWork = new PassThroughUnitOfWork()", "var_name": "fallbackUnitOfWork"}, {"original_string": "private UnitOfWorkFactory factory;", "modifier": "private", "type": "UnitOfWorkFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private EventManager eventManager = new BaseEventManager();", "modifier": "private", "type": "EventManager", "declarator": "eventManager = new BaseEventManager()", "var_name": "eventManager"}], "methods": [{"identifier": "DefaultUnitOfWorkManager", "parameters": "(UnitOfWorkFactory factory)", "modifiers": "public", "return": "", "signature": " DefaultUnitOfWorkManager(UnitOfWorkFactory factory)", "full_signature": "public  DefaultUnitOfWorkManager(UnitOfWorkFactory factory)", "class_method_signature": "DefaultUnitOfWorkManager.DefaultUnitOfWorkManager(UnitOfWorkFactory factory)", "testcase": false, "constructor": true}, {"identifier": "DefaultUnitOfWorkManager", "parameters": "(UnitOfWork fallbackUnitOfWork, UnitOfWorkFactory factory)", "modifiers": "public", "return": "", "signature": " DefaultUnitOfWorkManager(UnitOfWork fallbackUnitOfWork, UnitOfWorkFactory factory)", "full_signature": "public  DefaultUnitOfWorkManager(UnitOfWork fallbackUnitOfWork, UnitOfWorkFactory factory)", "class_method_signature": "DefaultUnitOfWorkManager.DefaultUnitOfWorkManager(UnitOfWork fallbackUnitOfWork, UnitOfWorkFactory factory)", "testcase": false, "constructor": true}, {"identifier": "currentUnitOfWork", "parameters": "()", "modifiers": "@Override public", "return": "UnitOfWork", "signature": "UnitOfWork currentUnitOfWork()", "full_signature": "@Override public UnitOfWork currentUnitOfWork()", "class_method_signature": "DefaultUnitOfWorkManager.currentUnitOfWork()", "testcase": false, "constructor": false}, {"identifier": "newUnitOfWork", "parameters": "()", "modifiers": "@Override public", "return": "UnitOfWork", "signature": "UnitOfWork newUnitOfWork()", "full_signature": "@Override public UnitOfWork newUnitOfWork()", "class_method_signature": "DefaultUnitOfWorkManager.newUnitOfWork()", "testcase": false, "constructor": false}, {"identifier": "associate", "parameters": "(UnitOfWork unit)", "modifiers": "protected", "return": "void", "signature": "void associate(UnitOfWork unit)", "full_signature": "protected void associate(UnitOfWork unit)", "class_method_signature": "DefaultUnitOfWorkManager.associate(UnitOfWork unit)", "testcase": false, "constructor": false}, {"identifier": "dissociate", "parameters": "(UnitOfWork unit)", "modifiers": "protected", "return": "void", "signature": "void dissociate(UnitOfWork unit)", "full_signature": "protected void dissociate(UnitOfWork unit)", "class_method_signature": "DefaultUnitOfWorkManager.dissociate(UnitOfWork unit)", "testcase": false, "constructor": false}, {"identifier": "eventManager", "parameters": "()", "modifiers": "@Override public", "return": "EventManager", "signature": "EventManager eventManager()", "full_signature": "@Override public EventManager eventManager()", "class_method_signature": "DefaultUnitOfWorkManager.eventManager()", "testcase": false, "constructor": false}], "file": "api/kogito-services/src/main/java/org/kie/kogito/services/uow/DefaultUnitOfWorkManager.java"}, "focal_method": {"identifier": "newUnitOfWork", "parameters": "()", "modifiers": "@Override public", "return": "UnitOfWork", "body": "@Override\n    public UnitOfWork newUnitOfWork() {\n        \n        return new ManagedUnitOfWork(factory.create(eventManager), this::associate, this::dissociate, this::dissociate);\n    }", "signature": "UnitOfWork newUnitOfWork()", "full_signature": "@Override public UnitOfWork newUnitOfWork()", "class_method_signature": "DefaultUnitOfWorkManager.newUnitOfWork()", "testcase": false, "constructor": false, "invocations": ["create"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}