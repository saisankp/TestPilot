{"test_class": {"identifier": "TestStandardFDProcessorService", "superclass": "extends BaseFDServiceTest", "interfaces": "", "fields": [{"original_string": "private FDProcessorService processorService;", "modifier": "private", "type": "FDProcessorService", "declarator": "processorService", "var_name": "processorService"}], "file": "efm/efm-flow-designer/efm-flow-designer-framework/src/test/java/com/cloudera/cem/efm/service/component/TestStandardFDProcessorService.java"}, "test_case": {"identifier": "testCreateProcessorWithInvalidSchedulingPeriod", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testCreateProcessorWithInvalidSchedulingPeriod() {\n        final String flowId = \"1\";\n        final String processGroupId = \"child-level-2\";\n\n        when(flowManager.getFlow(flowId)).thenReturn(Optional.of(flow));\n\n        when(extensionManagers.getExtensionManager(flow.getFlowMetadata().getAgentClass()))\n                .thenReturn(Optional.of(extensionManager));\n\n        final VersionedProcessor requestProcessor = createVersionedProcessor();\n        requestProcessor.setSchedulingPeriod(\"INVALID\");\n\n        final FDProcessor resultProcessor = new FDProcessor();\n        resultProcessor.setComponentConfiguration(requestProcessor);\n        resultProcessor.setComponentDefinition(new ProcessorDefinition());\n\n        when(extensionManager.createProcessor(\n                requestProcessor.getType(),\n                requestProcessor.getBundle()))\n                .thenReturn(resultProcessor);\n\n        processorService.create(flowId, processGroupId, requestProcessor);\n    }", "signature": "void testCreateProcessorWithInvalidSchedulingPeriod()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testCreateProcessorWithInvalidSchedulingPeriod()", "class_method_signature": "TestStandardFDProcessorService.testCreateProcessorWithInvalidSchedulingPeriod()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getFlow", "of", "thenReturn", "when", "getExtensionManager", "getAgentClass", "getFlowMetadata", "of", "createVersionedProcessor", "setSchedulingPeriod", "setComponentConfiguration", "setComponentDefinition", "thenReturn", "when", "createProcessor", "getType", "getBundle", "create"]}, "focal_class": {"identifier": "StandardFDProcessorService", "superclass": "extends BaseExtensionComponentService<VersionedProcessor, ProcessorDefinition, FDProcessor>", "interfaces": "implements FDProcessorService", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(StandardFDProcessorService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(StandardFDProcessorService.class)", "var_name": "LOGGER"}, {"original_string": "private ConcurrentMap<String, Collection<String>> validationErrorCache = new ConcurrentHashMap<>();", "modifier": "private", "type": "ConcurrentMap<String, Collection<String>>", "declarator": "validationErrorCache = new ConcurrentHashMap<>()", "var_name": "validationErrorCache"}], "methods": [{"identifier": "StandardFDProcessorService", "parameters": "(final FDFlowManager flowManager, final FDExtensionManagers extensionManagers, final ValidationService validationService)", "modifiers": "@Autowired public", "return": "", "signature": " StandardFDProcessorService(final FDFlowManager flowManager, final FDExtensionManagers extensionManagers, final ValidationService validationService)", "full_signature": "@Autowired public  StandardFDProcessorService(final FDFlowManager flowManager, final FDExtensionManagers extensionManagers, final ValidationService validationService)", "class_method_signature": "StandardFDProcessorService.StandardFDProcessorService(final FDFlowManager flowManager, final FDExtensionManagers extensionManagers, final ValidationService validationService)", "testcase": false, "constructor": true}, {"identifier": "getProcessorTypes", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "FDComponentTypes", "signature": "FDComponentTypes getProcessorTypes(final String flowId)", "full_signature": "@Override public FDComponentTypes getProcessorTypes(final String flowId)", "class_method_signature": "StandardFDProcessorService.getProcessorTypes(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getPropertyDescriptor", "parameters": "(final String flowId, final String processorId, final String propertyName)", "modifiers": "@Override public", "return": "FDPropertyDescriptor", "signature": "FDPropertyDescriptor getPropertyDescriptor(final String flowId, final String processorId, final String propertyName)", "full_signature": "@Override public FDPropertyDescriptor getPropertyDescriptor(final String flowId, final String processorId, final String propertyName)", "class_method_signature": "StandardFDProcessorService.getPropertyDescriptor(final String flowId, final String processorId, final String propertyName)", "testcase": false, "constructor": false}, {"identifier": "getPropertyDescriptorFromExtensionManager", "parameters": "(\n            final FDExtensionManager extensionManager, final String type,\n            final Bundle bundle, final String propertyName)", "modifiers": "@Override protected", "return": "Optional<PropertyDescriptor>", "signature": "Optional<PropertyDescriptor> getPropertyDescriptorFromExtensionManager(\n            final FDExtensionManager extensionManager, final String type,\n            final Bundle bundle, final String propertyName)", "full_signature": "@Override protected Optional<PropertyDescriptor> getPropertyDescriptorFromExtensionManager(\n            final FDExtensionManager extensionManager, final String type,\n            final Bundle bundle, final String propertyName)", "class_method_signature": "StandardFDProcessorService.getPropertyDescriptorFromExtensionManager(\n            final FDExtensionManager extensionManager, final String type,\n            final Bundle bundle, final String propertyName)", "testcase": false, "constructor": false}, {"identifier": "createDynamicPropertyDescriptorFromExtensionManager", "parameters": "(\n            final FDExtensionManager extensionManager, final String type,\n            final Bundle bundle, final String propertyName)", "modifiers": "@Override protected", "return": "PropertyDescriptor", "signature": "PropertyDescriptor createDynamicPropertyDescriptorFromExtensionManager(\n            final FDExtensionManager extensionManager, final String type,\n            final Bundle bundle, final String propertyName)", "full_signature": "@Override protected PropertyDescriptor createDynamicPropertyDescriptorFromExtensionManager(\n            final FDExtensionManager extensionManager, final String type,\n            final Bundle bundle, final String propertyName)", "class_method_signature": "StandardFDProcessorService.createDynamicPropertyDescriptorFromExtensionManager(\n            final FDExtensionManager extensionManager, final String type,\n            final Bundle bundle, final String propertyName)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final String flowId, final String processGroupId, final VersionedProcessor requestComponentConfig)", "modifiers": "@Override public", "return": "FDProcessor", "signature": "FDProcessor create(final String flowId, final String processGroupId, final VersionedProcessor requestComponentConfig)", "full_signature": "@Override public FDProcessor create(final String flowId, final String processGroupId, final VersionedProcessor requestComponentConfig)", "class_method_signature": "StandardFDProcessorService.create(final String flowId, final String processGroupId, final VersionedProcessor requestComponentConfig)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(final FDProcessor processor, final VersionedProcessGroup group, final String flowId, final ControllerServiceLookup serviceLookup)", "modifiers": "private", "return": "Collection<String>", "signature": "Collection<String> validate(final FDProcessor processor, final VersionedProcessGroup group, final String flowId, final ControllerServiceLookup serviceLookup)", "full_signature": "private Collection<String> validate(final FDProcessor processor, final VersionedProcessGroup group, final String flowId, final ControllerServiceLookup serviceLookup)", "class_method_signature": "StandardFDProcessorService.validate(final FDProcessor processor, final VersionedProcessGroup group, final String flowId, final ControllerServiceLookup serviceLookup)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final String flowId, final String processorId)", "modifiers": "@Override public", "return": "FDProcessor", "signature": "FDProcessor get(final String flowId, final String processorId)", "full_signature": "@Override public FDProcessor get(final String flowId, final String processorId)", "class_method_signature": "StandardFDProcessorService.get(final String flowId, final String processorId)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final String flowId, final VersionedProcessor requestComponentConfig)", "modifiers": "@Override public", "return": "FDProcessor", "signature": "FDProcessor update(final String flowId, final VersionedProcessor requestComponentConfig)", "full_signature": "@Override public FDProcessor update(final String flowId, final VersionedProcessor requestComponentConfig)", "class_method_signature": "StandardFDProcessorService.update(final String flowId, final VersionedProcessor requestComponentConfig)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final String flowId, final String processorId)", "modifiers": "@Override public", "return": "void", "signature": "void delete(final String flowId, final String processorId)", "full_signature": "@Override public void delete(final String flowId, final String processorId)", "class_method_signature": "StandardFDProcessorService.delete(final String flowId, final String processorId)", "testcase": false, "constructor": false}, {"identifier": "getComponentDefinition", "parameters": "(final String agentClass, final VersionedProcessor componentConfig)", "modifiers": "@Override public", "return": "ProcessorDefinition", "signature": "ProcessorDefinition getComponentDefinition(final String agentClass, final VersionedProcessor componentConfig)", "full_signature": "@Override public ProcessorDefinition getComponentDefinition(final String agentClass, final VersionedProcessor componentConfig)", "class_method_signature": "StandardFDProcessorService.getComponentDefinition(final String agentClass, final VersionedProcessor componentConfig)", "testcase": false, "constructor": false}, {"identifier": "populateDynamicRelationships", "parameters": "(final ProcessorDefinition processorDefinition)", "modifiers": "private", "return": "void", "signature": "void populateDynamicRelationships(final ProcessorDefinition processorDefinition)", "full_signature": "private void populateDynamicRelationships(final ProcessorDefinition processorDefinition)", "class_method_signature": "StandardFDProcessorService.populateDynamicRelationships(final ProcessorDefinition processorDefinition)", "testcase": false, "constructor": false}, {"identifier": "instantiateExtensionComponent", "parameters": "(final VersionedProcessor componentConfig,\n                                                        final ProcessorDefinition componentDefinition)", "modifiers": "@Override protected", "return": "FDProcessor", "signature": "FDProcessor instantiateExtensionComponent(final VersionedProcessor componentConfig,\n                                                        final ProcessorDefinition componentDefinition)", "full_signature": "@Override protected FDProcessor instantiateExtensionComponent(final VersionedProcessor componentConfig,\n                                                        final ProcessorDefinition componentDefinition)", "class_method_signature": "StandardFDProcessorService.instantiateExtensionComponent(final VersionedProcessor componentConfig,\n                                                        final ProcessorDefinition componentDefinition)", "testcase": false, "constructor": false}, {"identifier": "configureComponentSpecifics", "parameters": "(VersionedProcessor requestProcessor, VersionedProcessor resultProcessor)", "modifiers": "@Override protected", "return": "void", "signature": "void configureComponentSpecifics(VersionedProcessor requestProcessor, VersionedProcessor resultProcessor)", "full_signature": "@Override protected void configureComponentSpecifics(VersionedProcessor requestProcessor, VersionedProcessor resultProcessor)", "class_method_signature": "StandardFDProcessorService.configureComponentSpecifics(VersionedProcessor requestProcessor, VersionedProcessor resultProcessor)", "testcase": false, "constructor": false}, {"identifier": "validateRequestValues", "parameters": "(final VersionedProcessor requestComponent)", "modifiers": "private", "return": "void", "signature": "void validateRequestValues(final VersionedProcessor requestComponent)", "full_signature": "private void validateRequestValues(final VersionedProcessor requestComponent)", "class_method_signature": "StandardFDProcessorService.validateRequestValues(final VersionedProcessor requestComponent)", "testcase": false, "constructor": false}], "file": "efm/efm-flow-designer/efm-flow-designer-framework/src/main/java/com/cloudera/cem/efm/service/component/StandardFDProcessorService.java"}, "focal_method": {"identifier": "create", "parameters": "(final String flowId, final String processGroupId, final VersionedProcessor requestComponentConfig)", "modifiers": "@Override public", "return": "FDProcessor", "body": "@Override\n    public FDProcessor create(final String flowId, final String processGroupId, final VersionedProcessor requestComponentConfig) {\n        final FDFlow currentFlow = getFlowOrNotFound(flowId);\n        validateRequestValues(requestComponentConfig);\n\n        final String requestType = requestComponentConfig.getType();\n        final Bundle requestBundle = requestComponentConfig.getBundle();\n\n        final FDProcessor createdComponent = createExtensionComponent(\n                currentFlow,\n                processGroupId,\n                requestType,\n                requestComponentConfig,\n                (em) -> em.createProcessor(requestType, requestBundle),\n                VersionedProcessGroup::getProcessors,\n                this::validate\n        );\n\n        ComponentUtils.populateControllerServicePropertyDescriptors(currentFlow, processGroupId, createdComponent.getComponentDefinition());\n        return createdComponent;\n    }", "signature": "FDProcessor create(final String flowId, final String processGroupId, final VersionedProcessor requestComponentConfig)", "full_signature": "@Override public FDProcessor create(final String flowId, final String processGroupId, final VersionedProcessor requestComponentConfig)", "class_method_signature": "StandardFDProcessorService.create(final String flowId, final String processGroupId, final VersionedProcessor requestComponentConfig)", "testcase": false, "constructor": false, "invocations": ["getFlowOrNotFound", "validateRequestValues", "getType", "getBundle", "createExtensionComponent", "createProcessor", "populateControllerServicePropertyDescriptors", "getComponentDefinition"]}, "repository": {"repo_id": 181071001, "url": "https://github.com/hortonworks/efm", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 2003, "license": "licensed"}}