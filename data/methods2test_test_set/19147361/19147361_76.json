{"test_class": {"identifier": "TestTransactionTTL", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "themis-coprocessor/src/test/java/org/apache/hadoop/hbase/themis/cp/TestTransactionTTL.java"}, "test_case": {"identifier": "testToMs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testToMs() throws IOException {\n    TransactionTTL.init(HBaseConfiguration.create());\n    long ms = TransactionTTL.toMs(369778447744761856l);\n    Assert.assertTrue(ms < System.currentTimeMillis());\n    Assert.assertTrue(ms > (System.currentTimeMillis() - 5l * 365 * 24 * 3600 * 1000));\n  }", "signature": "void testToMs()", "full_signature": "@Test public void testToMs()", "class_method_signature": "TestTransactionTTL.testToMs()", "testcase": true, "constructor": false, "invocations": ["init", "create", "toMs", "assertTrue", "currentTimeMillis", "assertTrue", "currentTimeMillis"]}, "focal_class": {"identifier": "TransactionTTL", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String THEMIS_TRANSACTION_TTL_ENABLE_KEY = \"themis.transaction.ttl.enable\";", "modifier": "public static final", "type": "String", "declarator": "THEMIS_TRANSACTION_TTL_ENABLE_KEY = \"themis.transaction.ttl.enable\"", "var_name": "THEMIS_TRANSACTION_TTL_ENABLE_KEY"}, {"original_string": "public static final String THEMIS_READ_TRANSACTION_TTL_KEY = \"themis.read.transaction.ttl\";", "modifier": "public static final", "type": "String", "declarator": "THEMIS_READ_TRANSACTION_TTL_KEY = \"themis.read.transaction.ttl\"", "var_name": "THEMIS_READ_TRANSACTION_TTL_KEY"}, {"original_string": "public static final int DEFAULT_THEMIS_READ_TRANSACTION_TTL = 86400;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_THEMIS_READ_TRANSACTION_TTL = 86400", "var_name": "DEFAULT_THEMIS_READ_TRANSACTION_TTL"}, {"original_string": "public static final String THEMIS_WRITE_TRANSACTION_TTL_KEY = \"themis.write.transaction.ttl\";", "modifier": "public static final", "type": "String", "declarator": "THEMIS_WRITE_TRANSACTION_TTL_KEY = \"themis.write.transaction.ttl\"", "var_name": "THEMIS_WRITE_TRANSACTION_TTL_KEY"}, {"original_string": "public static final int DEFAULT_THEMIS_WRITE_TRANSACTION_TTL = 60;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_THEMIS_WRITE_TRANSACTION_TTL = 60", "var_name": "DEFAULT_THEMIS_WRITE_TRANSACTION_TTL"}, {"original_string": "public static final String THEMIS_TRANSACTION_TTL_TIME_ERROR_KEY = \"themis.transaction.ttl.time.error\";", "modifier": "public static final", "type": "String", "declarator": "THEMIS_TRANSACTION_TTL_TIME_ERROR_KEY = \"themis.transaction.ttl.time.error\"", "var_name": "THEMIS_TRANSACTION_TTL_TIME_ERROR_KEY"}, {"original_string": "public static final int DEFAULT_THEMIS_TRANSACTION_TTL_TIME_ERROR = 10;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_THEMIS_TRANSACTION_TTL_TIME_ERROR = 10", "var_name": "DEFAULT_THEMIS_TRANSACTION_TTL_TIME_ERROR"}, {"original_string": "public static int readTransactionTTL;", "modifier": "public static", "type": "int", "declarator": "readTransactionTTL", "var_name": "readTransactionTTL"}, {"original_string": "public static int writeTransactionTTL;", "modifier": "public static", "type": "int", "declarator": "writeTransactionTTL", "var_name": "writeTransactionTTL"}, {"original_string": "public static int transactionTTLTimeError;", "modifier": "public static", "type": "int", "declarator": "transactionTTLTimeError", "var_name": "transactionTTLTimeError"}, {"original_string": "public static TimestampType timestampType = TimestampType.CHRONOS;", "modifier": "public static", "type": "TimestampType", "declarator": "timestampType = TimestampType.CHRONOS", "var_name": "timestampType"}, {"original_string": "public static boolean transactionTTLEnable;", "modifier": "public static", "type": "boolean", "declarator": "transactionTTLEnable", "var_name": "transactionTTLEnable"}], "methods": [{"identifier": "init", "parameters": "(Configuration conf)", "modifiers": "public static", "return": "void", "signature": "void init(Configuration conf)", "full_signature": "public static void init(Configuration conf)", "class_method_signature": "TransactionTTL.init(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "toMs", "parameters": "(long themisTs)", "modifiers": "public static", "return": "long", "signature": "long toMs(long themisTs)", "full_signature": "public static long toMs(long themisTs)", "class_method_signature": "TransactionTTL.toMs(long themisTs)", "testcase": false, "constructor": false}, {"identifier": "toChronsTs", "parameters": "(long ms)", "modifiers": "public static", "return": "long", "signature": "long toChronsTs(long ms)", "full_signature": "public static long toChronsTs(long ms)", "class_method_signature": "TransactionTTL.toChronsTs(long ms)", "testcase": false, "constructor": false}, {"identifier": "getExpiredTimestampForReadByCommitColumn", "parameters": "(long currentMs)", "modifiers": "public static", "return": "long", "signature": "long getExpiredTimestampForReadByCommitColumn(long currentMs)", "full_signature": "public static long getExpiredTimestampForReadByCommitColumn(long currentMs)", "class_method_signature": "TransactionTTL.getExpiredTimestampForReadByCommitColumn(long currentMs)", "testcase": false, "constructor": false}, {"identifier": "getExpiredMsForReadByCommitColumn", "parameters": "(long currentMs)", "modifiers": "private static", "return": "long", "signature": "long getExpiredMsForReadByCommitColumn(long currentMs)", "full_signature": "private static long getExpiredMsForReadByCommitColumn(long currentMs)", "class_method_signature": "TransactionTTL.getExpiredMsForReadByCommitColumn(long currentMs)", "testcase": false, "constructor": false}, {"identifier": "getExpiredChronosForReadByCommitColumn", "parameters": "(long currentMs)", "modifiers": "private static", "return": "long", "signature": "long getExpiredChronosForReadByCommitColumn(long currentMs)", "full_signature": "private static long getExpiredChronosForReadByCommitColumn(long currentMs)", "class_method_signature": "TransactionTTL.getExpiredChronosForReadByCommitColumn(long currentMs)", "testcase": false, "constructor": false}, {"identifier": "getExpiredTimestampForReadByDataColumn", "parameters": "(long currentMs)", "modifiers": "public static", "return": "long", "signature": "long getExpiredTimestampForReadByDataColumn(long currentMs)", "full_signature": "public static long getExpiredTimestampForReadByDataColumn(long currentMs)", "class_method_signature": "TransactionTTL.getExpiredTimestampForReadByDataColumn(long currentMs)", "testcase": false, "constructor": false}, {"identifier": "getExpiredMsForReadByDataColumn", "parameters": "(long currentMs)", "modifiers": "private static", "return": "long", "signature": "long getExpiredMsForReadByDataColumn(long currentMs)", "full_signature": "private static long getExpiredMsForReadByDataColumn(long currentMs)", "class_method_signature": "TransactionTTL.getExpiredMsForReadByDataColumn(long currentMs)", "testcase": false, "constructor": false}, {"identifier": "getExpiredChronosForReadByDataColumn", "parameters": "(long currentMs)", "modifiers": "private static", "return": "long", "signature": "long getExpiredChronosForReadByDataColumn(long currentMs)", "full_signature": "private static long getExpiredChronosForReadByDataColumn(long currentMs)", "class_method_signature": "TransactionTTL.getExpiredChronosForReadByDataColumn(long currentMs)", "testcase": false, "constructor": false}, {"identifier": "getExpiredTimestampForWrite", "parameters": "(long currentMs)", "modifiers": "public static", "return": "long", "signature": "long getExpiredTimestampForWrite(long currentMs)", "full_signature": "public static long getExpiredTimestampForWrite(long currentMs)", "class_method_signature": "TransactionTTL.getExpiredTimestampForWrite(long currentMs)", "testcase": false, "constructor": false}, {"identifier": "getExpiredMsForWrite", "parameters": "(long currentMs)", "modifiers": "private static", "return": "long", "signature": "long getExpiredMsForWrite(long currentMs)", "full_signature": "private static long getExpiredMsForWrite(long currentMs)", "class_method_signature": "TransactionTTL.getExpiredMsForWrite(long currentMs)", "testcase": false, "constructor": false}, {"identifier": "getExpiredChronosForWrite", "parameters": "(long currentMs)", "modifiers": "private static", "return": "long", "signature": "long getExpiredChronosForWrite(long currentMs)", "full_signature": "private static long getExpiredChronosForWrite(long currentMs)", "class_method_signature": "TransactionTTL.getExpiredChronosForWrite(long currentMs)", "testcase": false, "constructor": false}, {"identifier": "isLockExpired", "parameters": "(long lockTs, long clientLockTTL)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLockExpired(long lockTs, long clientLockTTL)", "full_signature": "public static boolean isLockExpired(long lockTs, long clientLockTTL)", "class_method_signature": "TransactionTTL.isLockExpired(long lockTs, long clientLockTTL)", "testcase": false, "constructor": false}], "file": "themis-coprocessor/src/main/java/org/apache/hadoop/hbase/themis/cp/TransactionTTL.java"}, "focal_method": {"identifier": "toMs", "parameters": "(long themisTs)", "modifiers": "public static", "return": "long", "body": "public static long toMs(long themisTs) {\n    return themisTs >> 18;\n  }", "signature": "long toMs(long themisTs)", "full_signature": "public static long toMs(long themisTs)", "class_method_signature": "TransactionTTL.toMs(long themisTs)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}