{"test_class": {"identifier": "UpgradeServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private UpgradeService service;", "modifier": "@InjectMocks\n    private", "type": "UpgradeService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n    private UpgradeTaskRepository repository;", "modifier": "@Mock\n    private", "type": "UpgradeTaskRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private List<UpgradeTask> tasks = new ArrayList<>();", "modifier": "private", "type": "List<UpgradeTask>", "declarator": "tasks = new ArrayList<>()", "var_name": "tasks"}], "file": "dataprep-upgrade-common/src/test/java/org/talend/dataprep/upgrade/UpgradeServiceTest.java"}, "test_case": {"identifier": "shouldSortTasks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldSortTasks() throws Exception {\n        // given\n        tasks.add(new MockUpgradeTask(\"12.3-EE\", \"fourth\", 4, USER)); // 4\n        tasks.add(new MockUpgradeTask(\"1.4-EE\", \"second\", 2, USER)); // 2\n        tasks.add(new MockUpgradeTask(\"75.12.0-EE\", \"sixth\", 6, USER)); // 6\n        tasks.add(new MockUpgradeTask(\"100.5.0-EE\", \"seventh\", 7, USER)); // 7\n        tasks.add(new MockUpgradeTask(\"2.5-PE\", \"third\", 3, USER)); // 3\n        tasks.add(new MockUpgradeTask(\"1.3-PE\", \"first\", 1, USER)); // 1\n        tasks.add(new MockUpgradeTask(\"50.4-PE\", \"fifth\", 5, USER)); // 5\n\n        // when\n        service.sortAndCheckTasks();\n\n        // then\n        int i = 1;\n        for (UpgradeTask task : tasks) {\n            assertEquals(i, task.getId().getOrder());\n            i++;\n        }\n    }", "signature": "void shouldSortTasks()", "full_signature": "@Test public void shouldSortTasks()", "class_method_signature": "UpgradeServiceTest.shouldSortTasks()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "add", "sortAndCheckTasks", "assertEquals", "getOrder", "getId"]}, "focal_class": {"identifier": "UpgradeService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = getLogger(UpgradeService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = getLogger(UpgradeService.class)", "var_name": "LOG"}, {"original_string": "@Autowired\n    private UpgradeTaskRepository repository;", "modifier": "@Autowired\n    private", "type": "UpgradeTaskRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Autowired(required = false)\n    private List<UpgradeTask> tasks = emptyList();", "modifier": "@Autowired(required = false)\n    private", "type": "List<UpgradeTask>", "declarator": "tasks = emptyList()", "var_name": "tasks"}], "methods": [{"identifier": "sortAndCheckTasks", "parameters": "()", "modifiers": "@PostConstruct", "return": "void", "signature": "void sortAndCheckTasks()", "full_signature": "@PostConstruct void sortAndCheckTasks()", "class_method_signature": "UpgradeService.sortAndCheckTasks()", "testcase": false, "constructor": false}, {"identifier": "needUpgrade", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean needUpgrade()", "full_signature": "public boolean needUpgrade()", "class_method_signature": "UpgradeService.needUpgrade()", "testcase": false, "constructor": false}, {"identifier": "upgradeVersion", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void upgradeVersion()", "full_signature": "public void upgradeVersion()", "class_method_signature": "UpgradeService.upgradeVersion()", "testcase": false, "constructor": false}, {"identifier": "upgradeUser", "parameters": "(String userId)", "modifiers": "public", "return": "void", "signature": "void upgradeUser(String userId)", "full_signature": "public void upgradeUser(String userId)", "class_method_signature": "UpgradeService.upgradeUser(String userId)", "testcase": false, "constructor": false}, {"identifier": "setTasks", "parameters": "(List<UpgradeTask> tasks)", "modifiers": "", "return": "void", "signature": "void setTasks(List<UpgradeTask> tasks)", "full_signature": " void setTasks(List<UpgradeTask> tasks)", "class_method_signature": "UpgradeService.setTasks(List<UpgradeTask> tasks)", "testcase": false, "constructor": false}], "file": "dataprep-upgrade-common/src/main/java/org/talend/dataprep/upgrade/UpgradeService.java"}, "focal_method": {"identifier": "sortAndCheckTasks", "parameters": "()", "modifiers": "@PostConstruct", "return": "void", "body": "@PostConstruct\n    void sortAndCheckTasks() { // NOSONAR called by @PostConstruct annotation\n        Collections.sort(tasks);\n\n        Map<String, List<Integer>> groupTasks = new HashMap<>();\n        List<UpgradeTaskId> conflictTasks = new ArrayList<>();\n        tasks.stream().map(UpgradeTask::getId).forEach(id -> {\n            // add the version entry if needed\n            if (!groupTasks.containsKey(id.getVersion())) {\n                groupTasks.put(id.getVersion(), new ArrayList<>());\n            }\n            // check if there's already a task for this order\n            final List<Integer> orders = groupTasks.get(id.getVersion());\n            if (orders.contains(id.getOrder())) {\n                conflictTasks.add(id);\n            } else {\n                orders.add(id.getOrder());\n            }\n        });\n\n        if (!conflictTasks.isEmpty()) {\n            throw new IllegalArgumentException(\"The are \" + conflictTasks.size()\n                    + \" conflicted upgrade tasks (task with the same order for one version) : \" + conflictTasks);\n        }\n    }", "signature": "void sortAndCheckTasks()", "full_signature": "@PostConstruct void sortAndCheckTasks()", "class_method_signature": "UpgradeService.sortAndCheckTasks()", "testcase": false, "constructor": false, "invocations": ["sort", "forEach", "map", "stream", "containsKey", "getVersion", "put", "getVersion", "get", "getVersion", "contains", "getOrder", "add", "add", "getOrder", "isEmpty", "size"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}