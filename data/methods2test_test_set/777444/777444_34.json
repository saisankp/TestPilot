{"test_class": {"identifier": "JolokiaHttpHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JolokiaHttpHandler handler;", "modifier": "private", "type": "JolokiaHttpHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "private static boolean debugToggle = false;", "modifier": "private static", "type": "boolean", "declarator": "debugToggle = false", "var_name": "debugToggle"}], "file": "agent/jvm/src/test/java/org/jolokia/jvmagent/handler/JolokiaHttpHandlerTest.java"}, "test_case": {"identifier": "restrictorWithReverseDnsLookup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void restrictorWithReverseDnsLookup() throws URISyntaxException, IOException, ParseException {\n        Configuration config = getConfig(\n                ConfigKey.RESTRICTOR_CLASS, TestReverseDnsLookupRestrictor.class.getName(),\n                ConfigKey.ALLOW_DNS_REVERSE_LOOKUP, \"true\");\n        InetSocketAddress address = new InetSocketAddress(8080);\n        TestReverseDnsLookupRestrictor.expectedRemoteHostsToCheck = new String[] {\n                address.getHostName(),\n                address.getAddress().getHostAddress()\n        };\n        JSONObject resp = simpleMemoryGetReadRequest(config);\n        assertFalse(resp.containsKey(\"error\"));\n    }", "signature": "void restrictorWithReverseDnsLookup()", "full_signature": "@Test public void restrictorWithReverseDnsLookup()", "class_method_signature": "JolokiaHttpHandlerTest.restrictorWithReverseDnsLookup()", "testcase": true, "constructor": false, "invocations": ["getConfig", "getName", "getHostName", "getHostAddress", "getAddress", "simpleMemoryGetReadRequest", "assertFalse", "containsKey"]}, "focal_class": {"identifier": "JolokiaHttpHandler", "superclass": "", "interfaces": "implements HttpHandler", "fields": [{"original_string": "private BackendManager backendManager;", "modifier": "private", "type": "BackendManager", "declarator": "backendManager", "var_name": "backendManager"}, {"original_string": "private HttpRequestHandler requestHandler;", "modifier": "private", "type": "HttpRequestHandler", "declarator": "requestHandler", "var_name": "requestHandler"}, {"original_string": "private String context;", "modifier": "private", "type": "String", "declarator": "context", "var_name": "context"}, {"original_string": "private Pattern contentTypePattern = Pattern.compile(\".*;\\\\s*charset=([^;,]+)\\\\s*.*\");", "modifier": "private", "type": "Pattern", "declarator": "contentTypePattern = Pattern.compile(\".*;\\\\s*charset=([^;,]+)\\\\s*.*\")", "var_name": "contentTypePattern"}, {"original_string": "private Configuration configuration;", "modifier": "private", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final LogHandler logHandler;", "modifier": "private final", "type": "LogHandler", "declarator": "logHandler", "var_name": "logHandler"}, {"original_string": "private DiscoveryMulticastResponder discoveryMulticastResponder;", "modifier": "private", "type": "DiscoveryMulticastResponder", "declarator": "discoveryMulticastResponder", "var_name": "discoveryMulticastResponder"}], "methods": [{"identifier": "JolokiaHttpHandler", "parameters": "(Configuration pConfig)", "modifiers": "public", "return": "", "signature": " JolokiaHttpHandler(Configuration pConfig)", "full_signature": "public  JolokiaHttpHandler(Configuration pConfig)", "class_method_signature": "JolokiaHttpHandler.JolokiaHttpHandler(Configuration pConfig)", "testcase": false, "constructor": true}, {"identifier": "JolokiaHttpHandler", "parameters": "(Configuration pConfig, LogHandler pLogHandler)", "modifiers": "public", "return": "", "signature": " JolokiaHttpHandler(Configuration pConfig, LogHandler pLogHandler)", "full_signature": "public  JolokiaHttpHandler(Configuration pConfig, LogHandler pLogHandler)", "class_method_signature": "JolokiaHttpHandler.JolokiaHttpHandler(Configuration pConfig, LogHandler pLogHandler)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "(boolean pLazy)", "modifiers": "public", "return": "void", "signature": "void start(boolean pLazy)", "full_signature": "public void start(boolean pLazy)", "class_method_signature": "JolokiaHttpHandler.start(boolean pLazy)", "testcase": false, "constructor": false}, {"identifier": "createRestrictor", "parameters": "()", "modifiers": "protected", "return": "Restrictor", "signature": "Restrictor createRestrictor()", "full_signature": "protected Restrictor createRestrictor()", "class_method_signature": "JolokiaHttpHandler.createRestrictor()", "testcase": false, "constructor": false}, {"identifier": "listenForDiscoveryMcRequests", "parameters": "(Configuration pConfig)", "modifiers": "private", "return": "boolean", "signature": "boolean listenForDiscoveryMcRequests(Configuration pConfig)", "full_signature": "private boolean listenForDiscoveryMcRequests(Configuration pConfig)", "class_method_signature": "JolokiaHttpHandler.listenForDiscoveryMcRequests(Configuration pConfig)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(boolean pLazy, String pUrl, boolean pSecured)", "modifiers": "public", "return": "void", "signature": "void start(boolean pLazy, String pUrl, boolean pSecured)", "full_signature": "public void start(boolean pLazy, String pUrl, boolean pSecured)", "class_method_signature": "JolokiaHttpHandler.start(boolean pLazy, String pUrl, boolean pSecured)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "JolokiaHttpHandler.stop()", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(final HttpExchange pHttpExchange)", "modifiers": "public", "return": "void", "signature": "void handle(final HttpExchange pHttpExchange)", "full_signature": "public void handle(final HttpExchange pHttpExchange)", "class_method_signature": "JolokiaHttpHandler.handle(final HttpExchange pHttpExchange)", "testcase": false, "constructor": false}, {"identifier": "doHandleAs", "parameters": "(Subject subject, final HttpExchange pHttpExchange)", "modifiers": "private", "return": "void", "signature": "void doHandleAs(Subject subject, final HttpExchange pHttpExchange)", "full_signature": "private void doHandleAs(Subject subject, final HttpExchange pHttpExchange)", "class_method_signature": "JolokiaHttpHandler.doHandleAs(Subject subject, final HttpExchange pHttpExchange)", "testcase": false, "constructor": false}, {"identifier": "checkAuthentication", "parameters": "(HttpExchange pHttpExchange)", "modifiers": "protected", "return": "void", "signature": "void checkAuthentication(HttpExchange pHttpExchange)", "full_signature": "protected void checkAuthentication(HttpExchange pHttpExchange)", "class_method_signature": "JolokiaHttpHandler.checkAuthentication(HttpExchange pHttpExchange)", "testcase": false, "constructor": false}, {"identifier": "doHandle", "parameters": "(HttpExchange pExchange)", "modifiers": "@SuppressWarnings({\"PMD.AvoidCatchingThrowable\", \"PMD.AvoidInstanceofChecksInCatchClause\"}) public", "return": "void", "signature": "void doHandle(HttpExchange pExchange)", "full_signature": "@SuppressWarnings({\"PMD.AvoidCatchingThrowable\", \"PMD.AvoidInstanceofChecksInCatchClause\"}) public void doHandle(HttpExchange pExchange)", "class_method_signature": "JolokiaHttpHandler.doHandle(HttpExchange pExchange)", "testcase": false, "constructor": false}, {"identifier": "validateCallbackIfGiven", "parameters": "(ParsedUri pUri)", "modifiers": "private", "return": "void", "signature": "void validateCallbackIfGiven(ParsedUri pUri)", "full_signature": "private void validateCallbackIfGiven(ParsedUri pUri)", "class_method_signature": "JolokiaHttpHandler.validateCallbackIfGiven(ParsedUri pUri)", "testcase": false, "constructor": false}, {"identifier": "extractOriginOrReferer", "parameters": "(HttpExchange pExchange)", "modifiers": "private", "return": "String", "signature": "String extractOriginOrReferer(HttpExchange pExchange)", "full_signature": "private String extractOriginOrReferer(HttpExchange pExchange)", "class_method_signature": "JolokiaHttpHandler.extractOriginOrReferer(HttpExchange pExchange)", "testcase": false, "constructor": false}, {"identifier": "getHostName", "parameters": "(InetSocketAddress address)", "modifiers": "private", "return": "String", "signature": "String getHostName(InetSocketAddress address)", "full_signature": "private String getHostName(InetSocketAddress address)", "class_method_signature": "JolokiaHttpHandler.getHostName(InetSocketAddress address)", "testcase": false, "constructor": false}, {"identifier": "executeGetRequest", "parameters": "(ParsedUri parsedUri)", "modifiers": "private", "return": "JSONAware", "signature": "JSONAware executeGetRequest(ParsedUri parsedUri)", "full_signature": "private JSONAware executeGetRequest(ParsedUri parsedUri)", "class_method_signature": "JolokiaHttpHandler.executeGetRequest(ParsedUri parsedUri)", "testcase": false, "constructor": false}, {"identifier": "executePostRequest", "parameters": "(HttpExchange pExchange, ParsedUri pUri)", "modifiers": "private", "return": "JSONAware", "signature": "JSONAware executePostRequest(HttpExchange pExchange, ParsedUri pUri)", "full_signature": "private JSONAware executePostRequest(HttpExchange pExchange, ParsedUri pUri)", "class_method_signature": "JolokiaHttpHandler.executePostRequest(HttpExchange pExchange, ParsedUri pUri)", "testcase": false, "constructor": false}, {"identifier": "performCorsPreflightCheck", "parameters": "(HttpExchange pExchange)", "modifiers": "private", "return": "void", "signature": "void performCorsPreflightCheck(HttpExchange pExchange)", "full_signature": "private void performCorsPreflightCheck(HttpExchange pExchange)", "class_method_signature": "JolokiaHttpHandler.performCorsPreflightCheck(HttpExchange pExchange)", "testcase": false, "constructor": false}, {"identifier": "setHeaders", "parameters": "(HttpExchange pExchange)", "modifiers": "private", "return": "void", "signature": "void setHeaders(HttpExchange pExchange)", "full_signature": "private void setHeaders(HttpExchange pExchange)", "class_method_signature": "JolokiaHttpHandler.setHeaders(HttpExchange pExchange)", "testcase": false, "constructor": false}, {"identifier": "sendForbidden", "parameters": "(HttpExchange pExchange, SecurityException securityException)", "modifiers": "private", "return": "void", "signature": "void sendForbidden(HttpExchange pExchange, SecurityException securityException)", "full_signature": "private void sendForbidden(HttpExchange pExchange, SecurityException securityException)", "class_method_signature": "JolokiaHttpHandler.sendForbidden(HttpExchange pExchange, SecurityException securityException)", "testcase": false, "constructor": false}, {"identifier": "sendResponse", "parameters": "(HttpExchange pExchange, ParsedUri pParsedUri, JSONAware pJson)", "modifiers": "private", "return": "void", "signature": "void sendResponse(HttpExchange pExchange, ParsedUri pParsedUri, JSONAware pJson)", "full_signature": "private void sendResponse(HttpExchange pExchange, ParsedUri pParsedUri, JSONAware pJson)", "class_method_signature": "JolokiaHttpHandler.sendResponse(HttpExchange pExchange, ParsedUri pParsedUri, JSONAware pJson)", "testcase": false, "constructor": false}, {"identifier": "sendStreamingResponse", "parameters": "(HttpExchange pExchange, ParsedUri pParsedUri, JSONStreamAware pJson)", "modifiers": "private", "return": "void", "signature": "void sendStreamingResponse(HttpExchange pExchange, ParsedUri pParsedUri, JSONStreamAware pJson)", "full_signature": "private void sendStreamingResponse(HttpExchange pExchange, ParsedUri pParsedUri, JSONStreamAware pJson)", "class_method_signature": "JolokiaHttpHandler.sendStreamingResponse(HttpExchange pExchange, ParsedUri pParsedUri, JSONStreamAware pJson)", "testcase": false, "constructor": false}, {"identifier": "sendAllJSON", "parameters": "(HttpExchange pExchange, ParsedUri pParsedUri, JSONAware pJson)", "modifiers": "private", "return": "void", "signature": "void sendAllJSON(HttpExchange pExchange, ParsedUri pParsedUri, JSONAware pJson)", "full_signature": "private void sendAllJSON(HttpExchange pExchange, ParsedUri pParsedUri, JSONAware pJson)", "class_method_signature": "JolokiaHttpHandler.sendAllJSON(HttpExchange pExchange, ParsedUri pParsedUri, JSONAware pJson)", "testcase": false, "constructor": false}, {"identifier": "getMimeType", "parameters": "(ParsedUri pParsedUri)", "modifiers": "private", "return": "String", "signature": "String getMimeType(ParsedUri pParsedUri)", "full_signature": "private String getMimeType(ParsedUri pParsedUri)", "class_method_signature": "JolokiaHttpHandler.getMimeType(ParsedUri pParsedUri)", "testcase": false, "constructor": false}, {"identifier": "createLogHandler", "parameters": "(String pLogHandlerClass, String pDebug)", "modifiers": "private", "return": "LogHandler", "signature": "LogHandler createLogHandler(String pLogHandlerClass, String pDebug)", "full_signature": "private LogHandler createLogHandler(String pLogHandlerClass, String pDebug)", "class_method_signature": "JolokiaHttpHandler.createLogHandler(String pLogHandlerClass, String pDebug)", "testcase": false, "constructor": false}, {"identifier": "formatHeaderDate", "parameters": "(Date date)", "modifiers": "private", "return": "String", "signature": "String formatHeaderDate(Date date)", "full_signature": "private String formatHeaderDate(Date date)", "class_method_signature": "JolokiaHttpHandler.formatHeaderDate(Date date)", "testcase": false, "constructor": false}], "file": "agent/jvm/src/main/java/org/jolokia/jvmagent/handler/JolokiaHttpHandler.java"}, "focal_method": {"identifier": "getHostName", "parameters": "(InetSocketAddress address)", "modifiers": "private", "return": "String", "body": "private String getHostName(InetSocketAddress address) {\n        return configuration.getAsBoolean(ConfigKey.ALLOW_DNS_REVERSE_LOOKUP) ? address.getHostName() : null;\n    }", "signature": "String getHostName(InetSocketAddress address)", "full_signature": "private String getHostName(InetSocketAddress address)", "class_method_signature": "JolokiaHttpHandler.getHostName(InetSocketAddress address)", "testcase": false, "constructor": false, "invocations": ["getAsBoolean", "getHostName"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}