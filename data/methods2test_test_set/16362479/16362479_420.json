{"test_class": {"identifier": "ConcurrentDOMDataBrokerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DOMDataTreeWriteTransaction transaction = mock(DOMDataTreeWriteTransaction.class);", "modifier": "private final", "type": "DOMDataTreeWriteTransaction", "declarator": "transaction = mock(DOMDataTreeWriteTransaction.class)", "var_name": "transaction"}, {"original_string": "private final DOMStoreThreePhaseCommitCohort mockCohort1 = mock(DOMStoreThreePhaseCommitCohort.class);", "modifier": "private final", "type": "DOMStoreThreePhaseCommitCohort", "declarator": "mockCohort1 = mock(DOMStoreThreePhaseCommitCohort.class)", "var_name": "mockCohort1"}, {"original_string": "private final DOMStoreThreePhaseCommitCohort mockCohort2 = mock(DOMStoreThreePhaseCommitCohort.class);", "modifier": "private final", "type": "DOMStoreThreePhaseCommitCohort", "declarator": "mockCohort2 = mock(DOMStoreThreePhaseCommitCohort.class)", "var_name": "mockCohort2"}, {"original_string": "private final ThreadPoolExecutor futureExecutor =\n            new ThreadPoolExecutor(0, 1, 5, TimeUnit.SECONDS, new SynchronousQueue<>());", "modifier": "private final", "type": "ThreadPoolExecutor", "declarator": "futureExecutor =\n            new ThreadPoolExecutor(0, 1, 5, TimeUnit.SECONDS, new SynchronousQueue<>())", "var_name": "futureExecutor"}, {"original_string": "private ConcurrentDOMDataBroker coordinator;", "modifier": "private", "type": "ConcurrentDOMDataBroker", "declarator": "coordinator", "var_name": "coordinator"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/databroker/ConcurrentDOMDataBrokerTest.java"}, "test_case": {"identifier": "testSubmitWithAbortException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSubmitWithAbortException() throws Exception {\n        doReturn(immediateTrueFluentFuture()).when(mockCohort1).canCommit();\n        doReturn(Futures.immediateFailedFuture(new IllegalStateException(\"mock abort error\")))\n                .when(mockCohort1).abort();\n\n        IllegalStateException cause = new IllegalStateException(\"mock canCommit error\");\n        doReturn(Futures.immediateFailedFuture(cause)).when(mockCohort2).canCommit();\n        doReturn(immediateNullFluentFuture()).when(mockCohort2).abort();\n\n        FluentFuture<? extends CommitInfo> future = coordinator.commit(\n                transaction, Arrays.asList(mockCohort1, mockCohort2));\n\n        assertFailure(future, cause, mockCohort1, mockCohort2);\n    }", "signature": "void testSubmitWithAbortException()", "full_signature": "@Test public void testSubmitWithAbortException()", "class_method_signature": "ConcurrentDOMDataBrokerTest.testSubmitWithAbortException()", "testcase": true, "constructor": false, "invocations": ["canCommit", "when", "doReturn", "immediateTrueFluentFuture", "abort", "when", "doReturn", "immediateFailedFuture", "canCommit", "when", "doReturn", "immediateFailedFuture", "abort", "when", "doReturn", "immediateNullFluentFuture", "commit", "asList", "assertFailure"]}, "focal_class": {"identifier": "ConcurrentDOMDataBroker", "superclass": "extends AbstractDOMBroker", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ConcurrentDOMDataBroker.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ConcurrentDOMDataBroker.class)", "var_name": "LOG"}, {"original_string": "private static final String CAN_COMMIT = \"CAN_COMMIT\";", "modifier": "private static final", "type": "String", "declarator": "CAN_COMMIT = \"CAN_COMMIT\"", "var_name": "CAN_COMMIT"}, {"original_string": "private static final String PRE_COMMIT = \"PRE_COMMIT\";", "modifier": "private static final", "type": "String", "declarator": "PRE_COMMIT = \"PRE_COMMIT\"", "var_name": "PRE_COMMIT"}, {"original_string": "private static final String COMMIT = \"COMMIT\";", "modifier": "private static final", "type": "String", "declarator": "COMMIT = \"COMMIT\"", "var_name": "COMMIT"}, {"original_string": "private final DurationStatisticsTracker commitStatsTracker;", "modifier": "private final", "type": "DurationStatisticsTracker", "declarator": "commitStatsTracker", "var_name": "commitStatsTracker"}, {"original_string": "private final Executor clientFutureCallbackExecutor;", "modifier": "private final", "type": "Executor", "declarator": "clientFutureCallbackExecutor", "var_name": "clientFutureCallbackExecutor"}], "methods": [{"identifier": "ConcurrentDOMDataBroker", "parameters": "(final Map<LogicalDatastoreType, DOMStore> datastores,\n            final Executor listenableFutureExecutor)", "modifiers": "public", "return": "", "signature": " ConcurrentDOMDataBroker(final Map<LogicalDatastoreType, DOMStore> datastores,\n            final Executor listenableFutureExecutor)", "full_signature": "public  ConcurrentDOMDataBroker(final Map<LogicalDatastoreType, DOMStore> datastores,\n            final Executor listenableFutureExecutor)", "class_method_signature": "ConcurrentDOMDataBroker.ConcurrentDOMDataBroker(final Map<LogicalDatastoreType, DOMStore> datastores,\n            final Executor listenableFutureExecutor)", "testcase": false, "constructor": true}, {"identifier": "ConcurrentDOMDataBroker", "parameters": "(final Map<LogicalDatastoreType, DOMStore> datastores,\n            final Executor listenableFutureExecutor, final DurationStatisticsTracker commitStatsTracker)", "modifiers": "public", "return": "", "signature": " ConcurrentDOMDataBroker(final Map<LogicalDatastoreType, DOMStore> datastores,\n            final Executor listenableFutureExecutor, final DurationStatisticsTracker commitStatsTracker)", "full_signature": "public  ConcurrentDOMDataBroker(final Map<LogicalDatastoreType, DOMStore> datastores,\n            final Executor listenableFutureExecutor, final DurationStatisticsTracker commitStatsTracker)", "class_method_signature": "ConcurrentDOMDataBroker.ConcurrentDOMDataBroker(final Map<LogicalDatastoreType, DOMStore> datastores,\n            final Executor listenableFutureExecutor, final DurationStatisticsTracker commitStatsTracker)", "testcase": false, "constructor": true}, {"identifier": "getCommitStatsTracker", "parameters": "()", "modifiers": "public", "return": "DurationStatisticsTracker", "signature": "DurationStatisticsTracker getCommitStatsTracker()", "full_signature": "public DurationStatisticsTracker getCommitStatsTracker()", "class_method_signature": "ConcurrentDOMDataBroker.getCommitStatsTracker()", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "modifiers": "@Override protected", "return": "FluentFuture<? extends CommitInfo>", "signature": "FluentFuture<? extends CommitInfo> commit(final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "full_signature": "@Override protected FluentFuture<? extends CommitInfo> commit(final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "class_method_signature": "ConcurrentDOMDataBroker.commit(final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "testcase": false, "constructor": false}, {"identifier": "doCanCommit", "parameters": "(final AsyncNotifyingSettableFuture clientSubmitFuture,\n            final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "modifiers": "private", "return": "void", "signature": "void doCanCommit(final AsyncNotifyingSettableFuture clientSubmitFuture,\n            final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "full_signature": "private void doCanCommit(final AsyncNotifyingSettableFuture clientSubmitFuture,\n            final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "class_method_signature": "ConcurrentDOMDataBroker.doCanCommit(final AsyncNotifyingSettableFuture clientSubmitFuture,\n            final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "testcase": false, "constructor": false}, {"identifier": "doPreCommit", "parameters": "(final long startTime, final AsyncNotifyingSettableFuture clientSubmitFuture,\n            final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "modifiers": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private", "return": "void", "signature": "void doPreCommit(final long startTime, final AsyncNotifyingSettableFuture clientSubmitFuture,\n            final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "full_signature": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private void doPreCommit(final long startTime, final AsyncNotifyingSettableFuture clientSubmitFuture,\n            final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "class_method_signature": "ConcurrentDOMDataBroker.doPreCommit(final long startTime, final AsyncNotifyingSettableFuture clientSubmitFuture,\n            final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "testcase": false, "constructor": false}, {"identifier": "doCommit", "parameters": "(final long startTime, final AsyncNotifyingSettableFuture clientSubmitFuture,\n            final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "modifiers": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private", "return": "void", "signature": "void doCommit(final long startTime, final AsyncNotifyingSettableFuture clientSubmitFuture,\n            final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "full_signature": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private void doCommit(final long startTime, final AsyncNotifyingSettableFuture clientSubmitFuture,\n            final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "class_method_signature": "ConcurrentDOMDataBroker.doCommit(final long startTime, final AsyncNotifyingSettableFuture clientSubmitFuture,\n            final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "testcase": false, "constructor": false}, {"identifier": "handleException", "parameters": "(final AsyncNotifyingSettableFuture clientSubmitFuture,\n            final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts,\n            final String phase, final TransactionCommitFailedExceptionMapper exMapper,\n            final Throwable throwable)", "modifiers": "@SuppressFBWarnings(value = { \"BC_UNCONFIRMED_CAST_OF_RETURN_VALUE\", \"UPM_UNCALLED_PRIVATE_METHOD\" }, justification = \"Pertains to the assignment of the 'clientException' var. FindBugs flags this as an \" + \"uncomfirmed cast but the generic type in TransactionCommitFailedExceptionMapper is \" + \"TransactionCommitFailedException and thus should be deemed as confirmed.\" + \"Also https://github.com/spotbugs/spotbugs/issues/811\") private static", "return": "void", "signature": "void handleException(final AsyncNotifyingSettableFuture clientSubmitFuture,\n            final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts,\n            final String phase, final TransactionCommitFailedExceptionMapper exMapper,\n            final Throwable throwable)", "full_signature": "@SuppressFBWarnings(value = { \"BC_UNCONFIRMED_CAST_OF_RETURN_VALUE\", \"UPM_UNCALLED_PRIVATE_METHOD\" }, justification = \"Pertains to the assignment of the 'clientException' var. FindBugs flags this as an \" + \"uncomfirmed cast but the generic type in TransactionCommitFailedExceptionMapper is \" + \"TransactionCommitFailedException and thus should be deemed as confirmed.\" + \"Also https://github.com/spotbugs/spotbugs/issues/811\") private static void handleException(final AsyncNotifyingSettableFuture clientSubmitFuture,\n            final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts,\n            final String phase, final TransactionCommitFailedExceptionMapper exMapper,\n            final Throwable throwable)", "class_method_signature": "ConcurrentDOMDataBroker.handleException(final AsyncNotifyingSettableFuture clientSubmitFuture,\n            final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts,\n            final String phase, final TransactionCommitFailedExceptionMapper exMapper,\n            final Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ConcurrentDOMDataBroker.toString()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/databroker/ConcurrentDOMDataBroker.java"}, "focal_method": {"identifier": "commit", "parameters": "(final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "modifiers": "@Override protected", "return": "FluentFuture<? extends CommitInfo>", "body": "@Override\n    protected FluentFuture<? extends CommitInfo> commit(final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts) {\n\n        checkArgument(transaction != null, \"Transaction must not be null.\");\n        checkArgument(cohorts != null, \"Cohorts must not be null.\");\n        LOG.debug(\"Tx: {} is submitted for execution.\", transaction.getIdentifier());\n\n        if (cohorts.isEmpty()) {\n            return CommitInfo.emptyFluentFuture();\n        }\n\n        final AsyncNotifyingSettableFuture clientSubmitFuture =\n                new AsyncNotifyingSettableFuture(clientFutureCallbackExecutor);\n\n        doCanCommit(clientSubmitFuture, transaction, cohorts);\n\n        return FluentFuture.from(clientSubmitFuture).transform(ignored -> CommitInfo.empty(),\n                MoreExecutors.directExecutor());\n    }", "signature": "FluentFuture<? extends CommitInfo> commit(final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "full_signature": "@Override protected FluentFuture<? extends CommitInfo> commit(final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "class_method_signature": "ConcurrentDOMDataBroker.commit(final DOMDataTreeWriteTransaction transaction,\n            final Collection<DOMStoreThreePhaseCommitCohort> cohorts)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "checkArgument", "debug", "getIdentifier", "isEmpty", "emptyFluentFuture", "doCanCommit", "transform", "from", "empty", "directExecutor"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}