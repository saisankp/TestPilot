{"test_class": {"identifier": "QNameUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "spring-xml/src/test/java/org/springframework/xml/namespace/QNameUtilsTest.java"}, "test_case": {"identifier": "testGetQNameForNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetQNameForNode() throws Exception {\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactoryUtils.newInstance();\n\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\tDocument document = builder.newDocument();\n\t\tElement element = document.createElementNS(\"namespace\", \"prefix:localname\");\n\t\tQName qName = QNameUtils.getQNameForNode(element);\n\t\tAssert.assertNotNull(\"getQNameForNode returns null\", qName);\n\t\tAssert.assertEquals(\"QName has invalid localname\", \"localname\", qName.getLocalPart());\n\t\tAssert.assertEquals(\"Qname has invalid namespace\", \"namespace\", qName.getNamespaceURI());\n\t\tAssert.assertEquals(\"Qname has invalid prefix\", \"prefix\", qName.getPrefix());\n\t}", "signature": "void testGetQNameForNode()", "full_signature": "@Test public void testGetQNameForNode()", "class_method_signature": "QNameUtilsTest.testGetQNameForNode()", "testcase": true, "constructor": false, "invocations": ["newInstance", "newDocumentBuilder", "newDocument", "createElementNS", "getQNameForNode", "assertNotNull", "assertEquals", "getLocalPart", "assertEquals", "getNamespaceURI", "assertEquals", "getPrefix"]}, "focal_class": {"identifier": "QNameUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createQName", "parameters": "(String namespaceUri, String localPart, String prefix)", "modifiers": "@Deprecated public static", "return": "QName", "signature": "QName createQName(String namespaceUri, String localPart, String prefix)", "full_signature": "@Deprecated public static QName createQName(String namespaceUri, String localPart, String prefix)", "class_method_signature": "QNameUtils.createQName(String namespaceUri, String localPart, String prefix)", "testcase": false, "constructor": false}, {"identifier": "getPrefix", "parameters": "(QName qName)", "modifiers": "@Deprecated public static", "return": "String", "signature": "String getPrefix(QName qName)", "full_signature": "@Deprecated public static String getPrefix(QName qName)", "class_method_signature": "QNameUtils.getPrefix(QName qName)", "testcase": false, "constructor": false}, {"identifier": "validateQName", "parameters": "(String text)", "modifiers": "public static", "return": "boolean", "signature": "boolean validateQName(String text)", "full_signature": "public static boolean validateQName(String text)", "class_method_signature": "QNameUtils.validateQName(String text)", "testcase": false, "constructor": false}, {"identifier": "getQNameForNode", "parameters": "(Node node)", "modifiers": "public static", "return": "QName", "signature": "QName getQNameForNode(Node node)", "full_signature": "public static QName getQNameForNode(Node node)", "class_method_signature": "QNameUtils.getQNameForNode(Node node)", "testcase": false, "constructor": false}, {"identifier": "toQualifiedName", "parameters": "(QName qName)", "modifiers": "public static", "return": "String", "signature": "String toQualifiedName(QName qName)", "full_signature": "public static String toQualifiedName(QName qName)", "class_method_signature": "QNameUtils.toQualifiedName(QName qName)", "testcase": false, "constructor": false}, {"identifier": "toQName", "parameters": "(String namespaceUri, String qualifiedName)", "modifiers": "public static", "return": "QName", "signature": "QName toQName(String namespaceUri, String qualifiedName)", "full_signature": "public static QName toQName(String namespaceUri, String qualifiedName)", "class_method_signature": "QNameUtils.toQName(String namespaceUri, String qualifiedName)", "testcase": false, "constructor": false}, {"identifier": "parseQNameString", "parameters": "(String qNameString)", "modifiers": "public static", "return": "QName", "signature": "QName parseQNameString(String qNameString)", "full_signature": "public static QName parseQNameString(String qNameString)", "class_method_signature": "QNameUtils.parseQNameString(String qNameString)", "testcase": false, "constructor": false}], "file": "spring-xml/src/main/java/org/springframework/xml/namespace/QNameUtils.java"}, "focal_method": {"identifier": "getQNameForNode", "parameters": "(Node node)", "modifiers": "public static", "return": "QName", "body": "public static QName getQNameForNode(Node node) {\n\t\tif (node.getNamespaceURI() != null && node.getPrefix() != null && node.getLocalName() != null) {\n\t\t\treturn new QName(node.getNamespaceURI(), node.getLocalName(), node.getPrefix());\n\t\t} else if (node.getNamespaceURI() != null && node.getLocalName() != null) {\n\t\t\treturn new QName(node.getNamespaceURI(), node.getLocalName());\n\t\t} else if (node.getLocalName() != null) {\n\t\t\treturn new QName(node.getLocalName());\n\t\t} else {\n\t\t\t// as a last resort, use the node name\n\t\t\treturn new QName(node.getNodeName());\n\t\t}\n\t}", "signature": "QName getQNameForNode(Node node)", "full_signature": "public static QName getQNameForNode(Node node)", "class_method_signature": "QNameUtils.getQNameForNode(Node node)", "testcase": false, "constructor": false, "invocations": ["getNamespaceURI", "getPrefix", "getLocalName", "getNamespaceURI", "getLocalName", "getPrefix", "getNamespaceURI", "getLocalName", "getNamespaceURI", "getLocalName", "getLocalName", "getLocalName", "getNodeName"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}