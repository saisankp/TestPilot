{"test_class": {"identifier": "CallBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static String SP_WITHOUT_OUT_PARAM = \"SP_WITHOUT_OUT_PARAM\";", "modifier": "public final static", "type": "String", "declarator": "SP_WITHOUT_OUT_PARAM = \"SP_WITHOUT_OUT_PARAM\"", "var_name": "SP_WITHOUT_OUT_PARAM"}, {"original_string": "public final static String SP_WITH_OUT_PARAM = \"SP_WITH_OUT_PARAM\";", "modifier": "public final static", "type": "String", "declarator": "SP_WITH_OUT_PARAM = \"SP_WITH_OUT_PARAM\"", "var_name": "SP_WITH_OUT_PARAM"}, {"original_string": "public final static String SP_WITH_IN_OUT_PARAM = \"SP_WITH_IN_OUT_PARAM\";", "modifier": "public final static", "type": "String", "declarator": "SP_WITH_IN_OUT_PARAM = \"SP_WITH_IN_OUT_PARAM\"", "var_name": "SP_WITH_IN_OUT_PARAM"}, {"original_string": "public final static String SP_WITH_INTERMEDIATE_RESULT = \"SP_WITH_INTERMEDIATE_RESULT\";", "modifier": "public final static", "type": "String", "declarator": "SP_WITH_INTERMEDIATE_RESULT = \"SP_WITH_INTERMEDIATE_RESULT\"", "var_name": "SP_WITH_INTERMEDIATE_RESULT"}, {"original_string": "private static final String CREATE_SP_WITHOUT_OUT_PARAM = \"CREATE PROCEDURE \" + SP_WITHOUT_OUT_PARAM + \"(\"\n            + \"v_id int,\"\n            + \"v_cityID int,\"\n            + \"v_countryID int,\"\n            + \"v_name VARCHAR(64)) \"\n            + \"BEGIN INSERT INTO person\"\n            + \"(peopleid, cityID, countryID, name) \"\n            + \"VALUES(v_id, v_cityID, v_countryID, v_name);\"\n            + \"END\";", "modifier": "private static final", "type": "String", "declarator": "CREATE_SP_WITHOUT_OUT_PARAM = \"CREATE PROCEDURE \" + SP_WITHOUT_OUT_PARAM + \"(\"\n            + \"v_id int,\"\n            + \"v_cityID int,\"\n            + \"v_countryID int,\"\n            + \"v_name VARCHAR(64)) \"\n            + \"BEGIN INSERT INTO person\"\n            + \"(peopleid, cityID, countryID, name) \"\n            + \"VALUES(v_id, v_cityID, v_countryID, v_name);\"\n            + \"END\"", "var_name": "CREATE_SP_WITHOUT_OUT_PARAM"}, {"original_string": "private static final String CREATE_SP_WITH_OUT_PARAM = \"CREATE PROCEDURE \" + SP_WITH_OUT_PARAM + \"(\"\n            + \"v_id int,\"\n            + \"out count int)\"\n            + \"BEGIN DELETE FROM person WHERE peopleid=v_id;\"\n            + \"SELECT COUNT(*) INTO count from person;\"\n            + \"END\";", "modifier": "private static final", "type": "String", "declarator": "CREATE_SP_WITH_OUT_PARAM = \"CREATE PROCEDURE \" + SP_WITH_OUT_PARAM + \"(\"\n            + \"v_id int,\"\n            + \"out count int)\"\n            + \"BEGIN DELETE FROM person WHERE peopleid=v_id;\"\n            + \"SELECT COUNT(*) INTO count from person;\"\n            + \"END\"", "var_name": "CREATE_SP_WITH_OUT_PARAM"}, {"original_string": "private static final String CREATE_SP_WITH_IN_OUT_PARAM = \"CREATE PROCEDURE \" + SP_WITH_IN_OUT_PARAM + \"(\"\n            + \"v_id int,\"\n            + \"v_cityID int,\"\n            + \"v_countryID int,\"\n            + \"INOUT v_name VARCHAR(64))\"\n            + \"BEGIN UPDATE person \"\n            + \"SET cityID = v_cityID, countryID=v_countryID, name=v_name \"\n            + \"WHERE peopleid=v_id;\"\n            + \"SELECT 'output' INTO v_name;\"\n            + \"END\";", "modifier": "private static final", "type": "String", "declarator": "CREATE_SP_WITH_IN_OUT_PARAM = \"CREATE PROCEDURE \" + SP_WITH_IN_OUT_PARAM + \"(\"\n            + \"v_id int,\"\n            + \"v_cityID int,\"\n            + \"v_countryID int,\"\n            + \"INOUT v_name VARCHAR(64))\"\n            + \"BEGIN UPDATE person \"\n            + \"SET cityID = v_cityID, countryID=v_countryID, name=v_name \"\n            + \"WHERE peopleid=v_id;\"\n            + \"SELECT 'output' INTO v_name;\"\n            + \"END\"", "var_name": "CREATE_SP_WITH_IN_OUT_PARAM"}, {"original_string": "private static final String CREATE_SP_WITH_INTERMEDIATE_RESULT = \"CREATE PROCEDURE \" + SP_WITH_INTERMEDIATE_RESULT + \"(\"\n            + \"v_id int,\"\n            + \"v_quantity int,\"\n            + \"v_type smallint,\"\n            + \"INOUT v_address VARCHAR(64))\"\n            + \"BEGIN UPDATE dal_client_test \"\n            + \"SET quantity = v_quantity, type=v_type, address=v_address \"\n            + \"WHERE id=v_id;\"\n            + \"SELECT ROW_COUNT() AS result;\"\n            + \"SELECT 1 AS result2;\"\n            + \"UPDATE dal_client_test \"\n            + \"SET `quantity` = quantity + 1, `type`=type + 1, `address`='aaa';\"\n            + \"SELECT 'abc' AS result3, 456 AS count2;\"\n            + \"SELECT * from dal_client_test;\"\n            + \"SELECT 'output' INTO v_address;\"\n            + \"END\";", "modifier": "private static final", "type": "String", "declarator": "CREATE_SP_WITH_INTERMEDIATE_RESULT = \"CREATE PROCEDURE \" + SP_WITH_INTERMEDIATE_RESULT + \"(\"\n            + \"v_id int,\"\n            + \"v_quantity int,\"\n            + \"v_type smallint,\"\n            + \"INOUT v_address VARCHAR(64))\"\n            + \"BEGIN UPDATE dal_client_test \"\n            + \"SET quantity = v_quantity, type=v_type, address=v_address \"\n            + \"WHERE id=v_id;\"\n            + \"SELECT ROW_COUNT() AS result;\"\n            + \"SELECT 1 AS result2;\"\n            + \"UPDATE dal_client_test \"\n            + \"SET `quantity` = quantity + 1, `type`=type + 1, `address`='aaa';\"\n            + \"SELECT 'abc' AS result3, 456 AS count2;\"\n            + \"SELECT * from dal_client_test;\"\n            + \"SELECT 'output' INTO v_address;\"\n            + \"END\"", "var_name": "CREATE_SP_WITH_INTERMEDIATE_RESULT"}, {"original_string": "private static final String DROP_SP_WITHOUT_OUT_PARAM = \"DROP PROCEDURE IF EXISTS \" + SP_WITHOUT_OUT_PARAM;", "modifier": "private static final", "type": "String", "declarator": "DROP_SP_WITHOUT_OUT_PARAM = \"DROP PROCEDURE IF EXISTS \" + SP_WITHOUT_OUT_PARAM", "var_name": "DROP_SP_WITHOUT_OUT_PARAM"}, {"original_string": "private static final String DROP_SP_WITH_OUT_PARAM = \"DROP PROCEDURE IF EXISTS \" + SP_WITH_OUT_PARAM;", "modifier": "private static final", "type": "String", "declarator": "DROP_SP_WITH_OUT_PARAM = \"DROP PROCEDURE IF EXISTS \" + SP_WITH_OUT_PARAM", "var_name": "DROP_SP_WITH_OUT_PARAM"}, {"original_string": "private static final String DROP_SP_WITH_IN_OUT_PARAM = \"DROP PROCEDURE IF EXISTS \" + SP_WITH_IN_OUT_PARAM;", "modifier": "private static final", "type": "String", "declarator": "DROP_SP_WITH_IN_OUT_PARAM = \"DROP PROCEDURE IF EXISTS \" + SP_WITH_IN_OUT_PARAM", "var_name": "DROP_SP_WITH_IN_OUT_PARAM"}, {"original_string": "private static final String DROP_SP_WITH_INTERMEDIATE_RESULT = \"DROP PROCEDURE IF EXISTS \" + SP_WITH_INTERMEDIATE_RESULT;", "modifier": "private static final", "type": "String", "declarator": "DROP_SP_WITH_INTERMEDIATE_RESULT = \"DROP PROCEDURE IF EXISTS \" + SP_WITH_INTERMEDIATE_RESULT", "var_name": "DROP_SP_WITH_INTERMEDIATE_RESULT"}, {"original_string": "private final static String DATABASE_LOGIC_NAME = \"MySqlConditionDbShard\";", "modifier": "private final static", "type": "String", "declarator": "DATABASE_LOGIC_NAME = \"MySqlConditionDbShard\"", "var_name": "DATABASE_LOGIC_NAME"}, {"original_string": "private static final int DB_MODE = 2;", "modifier": "private static final", "type": "int", "declarator": "DB_MODE = 2", "var_name": "DB_MODE"}, {"original_string": "private static DasClient dao;", "modifier": "private static", "type": "DasClient", "declarator": "dao", "var_name": "dao"}], "file": "das-client/src/test/java/com/ppdai/das/client/CallBuilderTest.java"}, "test_case": {"identifier": "testCall", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCall() throws Exception {\n        for (int i = 0; i < DB_MODE; i++) {\n            CallBuilder cb = new CallBuilder(SP_WITHOUT_OUT_PARAM);\n            cb.registerInput(\"v_id\", JDBCType.INTEGER, 7);\n            cb.registerInput(\"v_cityID\", JDBCType.INTEGER, 7);\n            cb.registerInput(\"v_countryID\", JDBCType.INTEGER, 7);\n            cb.registerInput(\"v_name\", JDBCType.VARCHAR, \"666\");\n            cb.hints().inShard(i);\n\n            dao.call(cb);\n\n            Person p = new Person();\n            p.setPeopleID(7);\n            p = dao.queryByPk(p, Hints.hints().inShard(i));\n            assertEquals(\"666\", p.getName());\n        }\n    }", "signature": "void testCall()", "full_signature": "@Test public void testCall()", "class_method_signature": "CallBuilderTest.testCall()", "testcase": true, "constructor": false, "invocations": ["registerInput", "registerInput", "registerInput", "registerInput", "inShard", "hints", "call", "setPeopleID", "queryByPk", "inShard", "hints", "assertEquals", "getName"]}, "focal_class": {"identifier": "CallBuilder", "superclass": "", "interfaces": "implements Segment, ParameterProvider", "fields": [{"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private List<Parameter> parameters = new ArrayList<>();", "modifier": "private", "type": "List<Parameter>", "declarator": "parameters = new ArrayList<>()", "var_name": "parameters"}, {"original_string": "private boolean callByIndex;", "modifier": "private", "type": "boolean", "declarator": "callByIndex", "var_name": "callByIndex"}, {"original_string": "private Hints hints = new Hints();", "modifier": "private", "type": "Hints", "declarator": "hints = new Hints()", "var_name": "hints"}], "methods": [{"identifier": "CallBuilder", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " CallBuilder(String name)", "full_signature": "public  CallBuilder(String name)", "class_method_signature": "CallBuilder.CallBuilder(String name)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "(String name)", "modifiers": "public static", "return": "CallBuilder", "signature": "CallBuilder call(String name)", "full_signature": "public static CallBuilder call(String name)", "class_method_signature": "CallBuilder.call(String name)", "testcase": false, "constructor": false}, {"identifier": "setHints", "parameters": "(Hints hints)", "modifiers": "public", "return": "CallBuilder", "signature": "CallBuilder setHints(Hints hints)", "full_signature": "public CallBuilder setHints(Hints hints)", "class_method_signature": "CallBuilder.setHints(Hints hints)", "testcase": false, "constructor": false}, {"identifier": "registerOutput", "parameters": "(String name, JDBCType type)", "modifiers": "public", "return": "CallBuilder", "signature": "CallBuilder registerOutput(String name, JDBCType type)", "full_signature": "public CallBuilder registerOutput(String name, JDBCType type)", "class_method_signature": "CallBuilder.registerOutput(String name, JDBCType type)", "testcase": false, "constructor": false}, {"identifier": "registerInput", "parameters": "(String name, JDBCType type, Object value)", "modifiers": "public", "return": "CallBuilder", "signature": "CallBuilder registerInput(String name, JDBCType type, Object value)", "full_signature": "public CallBuilder registerInput(String name, JDBCType type, Object value)", "class_method_signature": "CallBuilder.registerInput(String name, JDBCType type, Object value)", "testcase": false, "constructor": false}, {"identifier": "registerInputOutput", "parameters": "(String name, JDBCType type, Object value)", "modifiers": "public", "return": "CallBuilder", "signature": "CallBuilder registerInputOutput(String name, JDBCType type, Object value)", "full_signature": "public CallBuilder registerInputOutput(String name, JDBCType type, Object value)", "class_method_signature": "CallBuilder.registerInputOutput(String name, JDBCType type, Object value)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "CallBuilder.getName()", "testcase": false, "constructor": false}, {"identifier": "isCallByIndex", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCallByIndex()", "full_signature": "public boolean isCallByIndex()", "class_method_signature": "CallBuilder.isCallByIndex()", "testcase": false, "constructor": false}, {"identifier": "setCallByIndex", "parameters": "(boolean callByIndex)", "modifiers": "public", "return": "CallBuilder", "signature": "CallBuilder setCallByIndex(boolean callByIndex)", "full_signature": "public CallBuilder setCallByIndex(boolean callByIndex)", "class_method_signature": "CallBuilder.setCallByIndex(boolean callByIndex)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "public", "return": "List<Parameter>", "signature": "List<Parameter> getParameters()", "full_signature": "public List<Parameter> getParameters()", "class_method_signature": "CallBuilder.getParameters()", "testcase": false, "constructor": false}, {"identifier": "hints", "parameters": "()", "modifiers": "public", "return": "Hints", "signature": "Hints hints()", "full_signature": "public Hints hints()", "class_method_signature": "CallBuilder.hints()", "testcase": false, "constructor": false}, {"identifier": "buildParameters", "parameters": "()", "modifiers": "@Override public", "return": "List<Parameter>", "signature": "List<Parameter> buildParameters()", "full_signature": "@Override public List<Parameter> buildParameters()", "class_method_signature": "CallBuilder.buildParameters()", "testcase": false, "constructor": false}, {"identifier": "getOutput", "parameters": "(String name)", "modifiers": "public", "return": "T", "signature": "T getOutput(String name)", "full_signature": "public T getOutput(String name)", "class_method_signature": "CallBuilder.getOutput(String name)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(BuilderContext context)", "modifiers": "@Override public", "return": "String", "signature": "String build(BuilderContext context)", "full_signature": "@Override public String build(BuilderContext context)", "class_method_signature": "CallBuilder.build(BuilderContext context)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CallBuilder.toString()", "testcase": false, "constructor": false}], "file": "das-client/src/main/java/com/ppdai/das/client/CallBuilder.java"}, "focal_method": {"identifier": "call", "parameters": "(String name)", "modifiers": "public static", "return": "CallBuilder", "body": "public static CallBuilder call(String name) {\n        return new CallBuilder(name);\n    }", "signature": "CallBuilder call(String name)", "full_signature": "public static CallBuilder call(String name)", "class_method_signature": "CallBuilder.call(String name)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}