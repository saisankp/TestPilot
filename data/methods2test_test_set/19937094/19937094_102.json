{"test_class": {"identifier": "ThreadPerSessionEventHandlingStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ThreadPerSessionEventHandlingStrategy strategy;", "modifier": "private", "type": "ThreadPerSessionEventHandlingStrategy", "declarator": "strategy", "var_name": "strategy"}], "file": "quickfixj-core/src/test/java/quickfix/mina/ThreadPerSessionEventHandlingStrategyTest.java"}, "test_case": {"identifier": "shouldCreateCorrectTypeOfQueueTracker", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateCorrectTypeOfQueueTracker() throws Exception {\n        final Session quickfixSession = mock(Session.class, withSettings().defaultAnswer(RETURNS_DEEP_STUBS));\n\n        assertFalse(getField(\n                new ThreadPerSessionEventHandlingStrategy(null, 42)\n                        .createDispatcherThread(quickfixSession),\n                \"queueTracker\",\n                QueueTracker.class) instanceof WatermarkTracker);\n\n        assertTrue(getField(\n                new ThreadPerSessionEventHandlingStrategy(null, 42, 43)\n                        .createDispatcherThread(quickfixSession),\n                \"queueTracker\",\n                QueueTracker.class) instanceof WatermarkTracker);\n\n        assertFalse(getField(\n                new ThreadPerSessionEventHandlingStrategy(null, -1, -1)\n                        .createDispatcherThread(quickfixSession),\n                \"queueTracker\",\n                QueueTracker.class) instanceof WatermarkTracker);\n    }", "signature": "void shouldCreateCorrectTypeOfQueueTracker()", "full_signature": "@Test public void shouldCreateCorrectTypeOfQueueTracker()", "class_method_signature": "ThreadPerSessionEventHandlingStrategyTest.shouldCreateCorrectTypeOfQueueTracker()", "testcase": true, "constructor": false, "invocations": ["mock", "defaultAnswer", "withSettings", "assertFalse", "getField", "createDispatcherThread", "assertTrue", "getField", "createDispatcherThread", "assertFalse", "getField", "createDispatcherThread"]}, "focal_class": {"identifier": "ThreadPerSessionEventHandlingStrategy", "superclass": "", "interfaces": "implements EventHandlingStrategy", "fields": [{"original_string": "private final ConcurrentMap<SessionID, MessageDispatchingThread> dispatchers = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<SessionID, MessageDispatchingThread>", "declarator": "dispatchers = new ConcurrentHashMap<>()", "var_name": "dispatchers"}, {"original_string": "private final SessionConnector sessionConnector;", "modifier": "private final", "type": "SessionConnector", "declarator": "sessionConnector", "var_name": "sessionConnector"}, {"original_string": "private final int queueCapacity;", "modifier": "private final", "type": "int", "declarator": "queueCapacity", "var_name": "queueCapacity"}, {"original_string": "private final int queueLowerWatermark;", "modifier": "private final", "type": "int", "declarator": "queueLowerWatermark", "var_name": "queueLowerWatermark"}, {"original_string": "private final int queueUpperWatermark;", "modifier": "private final", "type": "int", "declarator": "queueUpperWatermark", "var_name": "queueUpperWatermark"}, {"original_string": "private volatile Executor executor;", "modifier": "private volatile", "type": "Executor", "declarator": "executor", "var_name": "executor"}], "methods": [{"identifier": "ThreadPerSessionEventHandlingStrategy", "parameters": "(SessionConnector connector, int queueCapacity)", "modifiers": "public", "return": "", "signature": " ThreadPerSessionEventHandlingStrategy(SessionConnector connector, int queueCapacity)", "full_signature": "public  ThreadPerSessionEventHandlingStrategy(SessionConnector connector, int queueCapacity)", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.ThreadPerSessionEventHandlingStrategy(SessionConnector connector, int queueCapacity)", "testcase": false, "constructor": true}, {"identifier": "ThreadPerSessionEventHandlingStrategy", "parameters": "(SessionConnector connector, int queueLowerWatermark, int queueUpperWatermark)", "modifiers": "public", "return": "", "signature": " ThreadPerSessionEventHandlingStrategy(SessionConnector connector, int queueLowerWatermark, int queueUpperWatermark)", "full_signature": "public  ThreadPerSessionEventHandlingStrategy(SessionConnector connector, int queueLowerWatermark, int queueUpperWatermark)", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.ThreadPerSessionEventHandlingStrategy(SessionConnector connector, int queueLowerWatermark, int queueUpperWatermark)", "testcase": false, "constructor": true}, {"identifier": "setExecutor", "parameters": "(Executor executor)", "modifiers": "public", "return": "void", "signature": "void setExecutor(Executor executor)", "full_signature": "public void setExecutor(Executor executor)", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.setExecutor(Executor executor)", "testcase": false, "constructor": false}, {"identifier": "createDispatcherThread", "parameters": "(Session quickfixSession)", "modifiers": "", "return": "MessageDispatchingThread", "signature": "MessageDispatchingThread createDispatcherThread(Session quickfixSession)", "full_signature": " MessageDispatchingThread createDispatcherThread(Session quickfixSession)", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.createDispatcherThread(Session quickfixSession)", "testcase": false, "constructor": false}, {"identifier": "onMessage", "parameters": "(Session quickfixSession, Message message)", "modifiers": "@Override public", "return": "void", "signature": "void onMessage(Session quickfixSession, Message message)", "full_signature": "@Override public void onMessage(Session quickfixSession, Message message)", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.onMessage(Session quickfixSession, Message message)", "testcase": false, "constructor": false}, {"identifier": "getSessionConnector", "parameters": "()", "modifiers": "@Override public", "return": "SessionConnector", "signature": "SessionConnector getSessionConnector()", "full_signature": "@Override public SessionConnector getSessionConnector()", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.getSessionConnector()", "testcase": false, "constructor": false}, {"identifier": "startDispatcherThread", "parameters": "(MessageDispatchingThread dispatcher)", "modifiers": "protected", "return": "void", "signature": "void startDispatcherThread(MessageDispatchingThread dispatcher)", "full_signature": "protected void startDispatcherThread(MessageDispatchingThread dispatcher)", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.startDispatcherThread(MessageDispatchingThread dispatcher)", "testcase": false, "constructor": false}, {"identifier": "stopDispatcherThreads", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stopDispatcherThreads()", "full_signature": "public void stopDispatcherThreads()", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.stopDispatcherThreads()", "testcase": false, "constructor": false}, {"identifier": "getDispatcher", "parameters": "(SessionID sessionID)", "modifiers": "protected", "return": "MessageDispatchingThread", "signature": "MessageDispatchingThread getDispatcher(SessionID sessionID)", "full_signature": "protected MessageDispatchingThread getDispatcher(SessionID sessionID)", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.getDispatcher(SessionID sessionID)", "testcase": false, "constructor": false}, {"identifier": "getNextMessage", "parameters": "(QueueTracker<Message> queueTracker)", "modifiers": "protected", "return": "Message", "signature": "Message getNextMessage(QueueTracker<Message> queueTracker)", "full_signature": "protected Message getNextMessage(QueueTracker<Message> queueTracker)", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.getNextMessage(QueueTracker<Message> queueTracker)", "testcase": false, "constructor": false}, {"identifier": "getQueueSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getQueueSize()", "full_signature": "@Override public int getQueueSize()", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.getQueueSize()", "testcase": false, "constructor": false}, {"identifier": "getQueueSize", "parameters": "(SessionID sessionID)", "modifiers": "@Override public", "return": "int", "signature": "int getQueueSize(SessionID sessionID)", "full_signature": "@Override public int getQueueSize(SessionID sessionID)", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.getQueueSize(SessionID sessionID)", "testcase": false, "constructor": false}], "file": "quickfixj-core/src/main/java/quickfix/mina/ThreadPerSessionEventHandlingStrategy.java"}, "focal_method": {"identifier": "createDispatcherThread", "parameters": "(Session quickfixSession)", "modifiers": "", "return": "MessageDispatchingThread", "body": "MessageDispatchingThread createDispatcherThread(Session quickfixSession) {\n        return new MessageDispatchingThread(quickfixSession, executor);\n    }", "signature": "MessageDispatchingThread createDispatcherThread(Session quickfixSession)", "full_signature": " MessageDispatchingThread createDispatcherThread(Session quickfixSession)", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.createDispatcherThread(Session quickfixSession)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 19937094, "url": "https://github.com/quickfix-j/quickfixj", "stars": 538, "created": "5/19/2014 10:04:08 AM +00:00", "updates": "2020-01-26T01:21:15+00:00", "fork": "False", "license": "licensed"}}