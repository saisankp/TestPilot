{"test_class": {"identifier": "VFlibTurboHandlerTest", "superclass": "extends AbstractSubGraphTest", "interfaces": "", "fields": [], "file": "legacy/src/test/java/org/openscience/cdk/smsd/algorithm/vflib/VFlibTurboHandlerTest.java"}, "test_case": {"identifier": "testIsSubgraph", "parameters": "()", "modifiers": "@Test @Override public", "return": "void", "body": "@Test\n    @Override\n    public void testIsSubgraph() throws InvalidSmilesException {\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer target = sp.parseSmiles(\"C\\\\C=C/Nc1cccc(c1)N(O)\\\\C=C\\\\C\\\\C=C\\\\C=C/C\");\n        IAtomContainer queryac = sp.parseSmiles(\"Nc1ccccc1\");\n\n        VFlibSubStructureHandler smsd1 = new VFlibSubStructureHandler();\n        MolHandler mol1 = new MolHandler(queryac, true, true);\n        MolHandler mol2 = new MolHandler(target, true, true);\n        smsd1.set(mol1, mol2);\n        assertTrue(smsd1.isSubgraph(true));\n    }", "signature": "void testIsSubgraph()", "full_signature": "@Test @Override public void testIsSubgraph()", "class_method_signature": "VFlibTurboHandlerTest.testIsSubgraph()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "parseSmiles", "set", "assertTrue", "isSubgraph"]}, "focal_class": {"identifier": "VFlibTurboHandler", "superclass": "extends AbstractSubGraph", "interfaces": "implements IMCSBase", "fields": [{"original_string": "private              List<Map<IAtom, IAtom>>     allAtomMCS     = null;", "modifier": "private", "type": "List<Map<IAtom, IAtom>>", "declarator": "allAtomMCS     = null", "var_name": "allAtomMCS"}, {"original_string": "private              Map<IAtom, IAtom>           atomsMCS       = null;", "modifier": "private", "type": "Map<IAtom, IAtom>", "declarator": "atomsMCS       = null", "var_name": "atomsMCS"}, {"original_string": "private              List<Map<IAtom, IAtom>>     allAtomMCSCopy = null;", "modifier": "private", "type": "List<Map<IAtom, IAtom>>", "declarator": "allAtomMCSCopy = null", "var_name": "allAtomMCSCopy"}, {"original_string": "private              Map<Integer, Integer>       firstMCS       = null;", "modifier": "private", "type": "Map<Integer, Integer>", "declarator": "firstMCS       = null", "var_name": "firstMCS"}, {"original_string": "private              List<Map<Integer, Integer>> allMCS         = null;", "modifier": "private", "type": "List<Map<Integer, Integer>>", "declarator": "allMCS         = null", "var_name": "allMCS"}, {"original_string": "private              List<Map<Integer, Integer>> allMCSCopy     = null;", "modifier": "private", "type": "List<Map<Integer, Integer>>", "declarator": "allMCSCopy     = null", "var_name": "allMCSCopy"}, {"original_string": "private              IQueryAtomContainer         queryMol       = null;", "modifier": "private", "type": "IQueryAtomContainer", "declarator": "queryMol       = null", "var_name": "queryMol"}, {"original_string": "private              IAtomContainer              mol1           = null;", "modifier": "private", "type": "IAtomContainer", "declarator": "mol1           = null", "var_name": "mol1"}, {"original_string": "private              IAtomContainer              mol2           = null;", "modifier": "private", "type": "IAtomContainer", "declarator": "mol2           = null", "var_name": "mol2"}, {"original_string": "private              Map<INode, IAtom>           vfLibSolutions = null;", "modifier": "private", "type": "Map<INode, IAtom>", "declarator": "vfLibSolutions = null", "var_name": "vfLibSolutions"}, {"original_string": "private              int                         vfMCSSize      = -1;", "modifier": "private", "type": "int", "declarator": "vfMCSSize      = -1", "var_name": "vfMCSSize"}, {"original_string": "private              boolean                     bondMatchFlag  = false;", "modifier": "private", "type": "boolean", "declarator": "bondMatchFlag  = false", "var_name": "bondMatchFlag"}, {"original_string": "private final static ILoggingTool                LOGGER         = LoggingToolFactory\n            .createLoggingTool(VFlibTurboHandler.class);", "modifier": "private final static", "type": "ILoggingTool", "declarator": "LOGGER         = LoggingToolFactory\n            .createLoggingTool(VFlibTurboHandler.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "VFlibTurboHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " VFlibTurboHandler()", "full_signature": "public  VFlibTurboHandler()", "class_method_signature": "VFlibTurboHandler.VFlibTurboHandler()", "testcase": false, "constructor": true}, {"identifier": "setFirstMappings", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setFirstMappings()", "full_signature": "private void setFirstMappings()", "class_method_signature": "VFlibTurboHandler.setFirstMappings()", "testcase": false, "constructor": false}, {"identifier": "mcgregorFlag", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean mcgregorFlag()", "full_signature": "private boolean mcgregorFlag()", "class_method_signature": "VFlibTurboHandler.mcgregorFlag()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(MolHandler reactant, MolHandler product)", "modifiers": "@Override public", "return": "void", "signature": "void set(MolHandler reactant, MolHandler product)", "full_signature": "@Override public void set(MolHandler reactant, MolHandler product)", "class_method_signature": "VFlibTurboHandler.set(MolHandler reactant, MolHandler product)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(IQueryAtomContainer source, IAtomContainer target)", "modifiers": "@Override public", "return": "void", "signature": "void set(IQueryAtomContainer source, IAtomContainer target)", "full_signature": "@Override public void set(IQueryAtomContainer source, IAtomContainer target)", "class_method_signature": "VFlibTurboHandler.set(IQueryAtomContainer source, IAtomContainer target)", "testcase": false, "constructor": false}, {"identifier": "hasMap", "parameters": "(Map<Integer, Integer> map, List<Map<Integer, Integer>> mapGlobal)", "modifiers": "private", "return": "boolean", "signature": "boolean hasMap(Map<Integer, Integer> map, List<Map<Integer, Integer>> mapGlobal)", "full_signature": "private boolean hasMap(Map<Integer, Integer> map, List<Map<Integer, Integer>> mapGlobal)", "class_method_signature": "VFlibTurboHandler.hasMap(Map<Integer, Integer> map, List<Map<Integer, Integer>> mapGlobal)", "testcase": false, "constructor": false}, {"identifier": "getAllAtomMapping", "parameters": "()", "modifiers": "@Override public", "return": "List<Map<IAtom, IAtom>>", "signature": "List<Map<IAtom, IAtom>> getAllAtomMapping()", "full_signature": "@Override public List<Map<IAtom, IAtom>> getAllAtomMapping()", "class_method_signature": "VFlibTurboHandler.getAllAtomMapping()", "testcase": false, "constructor": false}, {"identifier": "getAllMapping", "parameters": "()", "modifiers": "@Override public", "return": "List<Map<Integer, Integer>>", "signature": "List<Map<Integer, Integer>> getAllMapping()", "full_signature": "@Override public List<Map<Integer, Integer>> getAllMapping()", "class_method_signature": "VFlibTurboHandler.getAllMapping()", "testcase": false, "constructor": false}, {"identifier": "getFirstAtomMapping", "parameters": "()", "modifiers": "@Override public", "return": "Map<IAtom, IAtom>", "signature": "Map<IAtom, IAtom> getFirstAtomMapping()", "full_signature": "@Override public Map<IAtom, IAtom> getFirstAtomMapping()", "class_method_signature": "VFlibTurboHandler.getFirstAtomMapping()", "testcase": false, "constructor": false}, {"identifier": "getFirstMapping", "parameters": "()", "modifiers": "@Override public", "return": "Map<Integer, Integer>", "signature": "Map<Integer, Integer> getFirstMapping()", "full_signature": "@Override public Map<Integer, Integer> getFirstMapping()", "class_method_signature": "VFlibTurboHandler.getFirstMapping()", "testcase": false, "constructor": false}, {"identifier": "checkCommonAtomCount", "parameters": "(IAtomContainer reactantMolecule, IAtomContainer productMolecule)", "modifiers": "private", "return": "int", "signature": "int checkCommonAtomCount(IAtomContainer reactantMolecule, IAtomContainer productMolecule)", "full_signature": "private int checkCommonAtomCount(IAtomContainer reactantMolecule, IAtomContainer productMolecule)", "class_method_signature": "VFlibTurboHandler.checkCommonAtomCount(IAtomContainer reactantMolecule, IAtomContainer productMolecule)", "testcase": false, "constructor": false}, {"identifier": "searchVFMappings", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void searchVFMappings()", "full_signature": "private void searchVFMappings()", "class_method_signature": "VFlibTurboHandler.searchVFMappings()", "testcase": false, "constructor": false}, {"identifier": "searchMcGregorMapping", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void searchMcGregorMapping()", "full_signature": "private void searchMcGregorMapping()", "class_method_signature": "VFlibTurboHandler.searchMcGregorMapping()", "testcase": false, "constructor": false}, {"identifier": "setVFMappings", "parameters": "(boolean ronp, IQuery query)", "modifiers": "private", "return": "void", "signature": "void setVFMappings(boolean ronp, IQuery query)", "full_signature": "private void setVFMappings(boolean ronp, IQuery query)", "class_method_signature": "VFlibTurboHandler.setVFMappings(boolean ronp, IQuery query)", "testcase": false, "constructor": false}, {"identifier": "setMcGregorMappings", "parameters": "(List<List<Integer>> mappings)", "modifiers": "private", "return": "void", "signature": "void setMcGregorMappings(List<List<Integer>> mappings)", "full_signature": "private void setMcGregorMappings(List<List<Integer>> mappings)", "class_method_signature": "VFlibTurboHandler.setMcGregorMappings(List<List<Integer>> mappings)", "testcase": false, "constructor": false}, {"identifier": "isSubgraph", "parameters": "(boolean shouldMatchBonds)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSubgraph(boolean shouldMatchBonds)", "full_signature": "@Override public boolean isSubgraph(boolean shouldMatchBonds)", "class_method_signature": "VFlibTurboHandler.isSubgraph(boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "isBondMatchFlag", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBondMatchFlag()", "full_signature": "public boolean isBondMatchFlag()", "class_method_signature": "VFlibTurboHandler.isBondMatchFlag()", "testcase": false, "constructor": false}, {"identifier": "setBondMatchFlag", "parameters": "(boolean shouldMatchBonds)", "modifiers": "public", "return": "void", "signature": "void setBondMatchFlag(boolean shouldMatchBonds)", "full_signature": "public void setBondMatchFlag(boolean shouldMatchBonds)", "class_method_signature": "VFlibTurboHandler.setBondMatchFlag(boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "getReactantMol", "parameters": "()", "modifiers": "private", "return": "IAtomContainer", "signature": "IAtomContainer getReactantMol()", "full_signature": "private IAtomContainer getReactantMol()", "class_method_signature": "VFlibTurboHandler.getReactantMol()", "testcase": false, "constructor": false}, {"identifier": "getProductMol", "parameters": "()", "modifiers": "private", "return": "IAtomContainer", "signature": "IAtomContainer getProductMol()", "full_signature": "private IAtomContainer getProductMol()", "class_method_signature": "VFlibTurboHandler.getProductMol()", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/smsd/algorithm/vflib/VFlibTurboHandler.java"}, "focal_method": {"identifier": "isSubgraph", "parameters": "(boolean shouldMatchBonds)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isSubgraph(boolean shouldMatchBonds) {\n        setBondMatchFlag(shouldMatchBonds);\n        searchVFMappings();\n        //        boolean flag = mcgregorFlag();\n        //        if (flag && !vfLibSolutions.isEmpty()) {\n        //            try {\n        //                searchMcGregorMapping();\n        //            } catch (CDKException ex) {\n        //                LOGGER.error(Level.SEVERE, null, ex);\n        //            } catch (IOException ex) {\n        //                LOGGER.error(Level.SEVERE, null, ex);\n        //            }\n        //\n        //        } else\n\n        if (!allAtomMCSCopy.isEmpty()) {\n            allAtomMCS.addAll(allAtomMCSCopy);\n            allMCS.addAll(allMCSCopy);\n        }\n        setFirstMappings();\n        return (!allMCS.isEmpty() && allMCS.iterator().next().size() == getReactantMol().getAtomCount()) ? true : false;\n    }", "signature": "boolean isSubgraph(boolean shouldMatchBonds)", "full_signature": "@Override public boolean isSubgraph(boolean shouldMatchBonds)", "class_method_signature": "VFlibTurboHandler.isSubgraph(boolean shouldMatchBonds)", "testcase": false, "constructor": false, "invocations": ["setBondMatchFlag", "searchVFMappings", "isEmpty", "addAll", "addAll", "setFirstMappings", "isEmpty", "size", "next", "iterator", "getAtomCount", "getReactantMol"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}