{"test_class": {"identifier": "NormalizedNodeAggregatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/utils/NormalizedNodeAggregatorTest.java"}, "test_case": {"identifier": "testAggregate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAggregate() throws InterruptedException, ExecutionException,\n        DataValidationFailedException {\n        EffectiveModelContext schemaContext = SchemaContextHelper.full();\n        NormalizedNode<?, ?> expectedNode1 = ImmutableNodes.containerNode(TestModel.TEST_QNAME);\n        NormalizedNode<?, ?> expectedNode2 = ImmutableNodes.containerNode(CarsModel.CARS_QNAME);\n\n        Optional<NormalizedNode<?, ?>> optional = NormalizedNodeAggregator.aggregate(YangInstanceIdentifier.empty(),\n                ImmutableList.of(\n                        Optional.<NormalizedNode<?, ?>>of(getRootNode(expectedNode1, schemaContext)),\n                        Optional.<NormalizedNode<?, ?>>of(getRootNode(expectedNode2, schemaContext))),\n                schemaContext, LogicalDatastoreType.CONFIGURATION);\n\n\n        NormalizedNode<?,?> normalizedNode = optional.get();\n\n        assertTrue(\"Expect value to be a Collection\", normalizedNode.getValue() instanceof Collection);\n\n        @SuppressWarnings(\"unchecked\")\n        Collection<NormalizedNode<?,?>> collection = (Collection<NormalizedNode<?,?>>) normalizedNode.getValue();\n\n        for (NormalizedNode<?,?> node : collection) {\n            assertTrue(\"Expected \" + node + \" to be a ContainerNode\", node instanceof ContainerNode);\n        }\n\n        assertTrue(\"Child with QName = \" + TestModel.TEST_QNAME + \" not found\",\n                findChildWithQName(collection, TestModel.TEST_QNAME) != null);\n\n        assertEquals(expectedNode1, findChildWithQName(collection, TestModel.TEST_QNAME));\n\n        assertTrue(\"Child with QName = \" + CarsModel.BASE_QNAME + \" not found\",\n                findChildWithQName(collection, CarsModel.BASE_QNAME) != null);\n\n        assertEquals(expectedNode2, findChildWithQName(collection, CarsModel.BASE_QNAME));\n\n    }", "signature": "void testAggregate()", "full_signature": "@Test public void testAggregate()", "class_method_signature": "NormalizedNodeAggregatorTest.testAggregate()", "testcase": true, "constructor": false, "invocations": ["full", "containerNode", "containerNode", "aggregate", "empty", "of", "of", "getRootNode", "of", "getRootNode", "get", "assertTrue", "getValue", "getValue", "assertTrue", "assertTrue", "findChildWithQName", "assertEquals", "findChildWithQName", "assertTrue", "findChildWithQName", "assertEquals", "findChildWithQName"]}, "focal_class": {"identifier": "NormalizedNodeAggregator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final YangInstanceIdentifier rootIdentifier;", "modifier": "private final", "type": "YangInstanceIdentifier", "declarator": "rootIdentifier", "var_name": "rootIdentifier"}, {"original_string": "private final List<Optional<NormalizedNode<?, ?>>> nodes;", "modifier": "private final", "type": "List<Optional<NormalizedNode<?, ?>>>", "declarator": "nodes", "var_name": "nodes"}, {"original_string": "private final DataTree dataTree;", "modifier": "private final", "type": "DataTree", "declarator": "dataTree", "var_name": "dataTree"}], "methods": [{"identifier": "NormalizedNodeAggregator", "parameters": "(final YangInstanceIdentifier rootIdentifier,\n            final List<Optional<NormalizedNode<?, ?>>> nodes, final EffectiveModelContext schemaContext,\n            final LogicalDatastoreType logicalDatastoreType)", "modifiers": "private", "return": "", "signature": " NormalizedNodeAggregator(final YangInstanceIdentifier rootIdentifier,\n            final List<Optional<NormalizedNode<?, ?>>> nodes, final EffectiveModelContext schemaContext,\n            final LogicalDatastoreType logicalDatastoreType)", "full_signature": "private  NormalizedNodeAggregator(final YangInstanceIdentifier rootIdentifier,\n            final List<Optional<NormalizedNode<?, ?>>> nodes, final EffectiveModelContext schemaContext,\n            final LogicalDatastoreType logicalDatastoreType)", "class_method_signature": "NormalizedNodeAggregator.NormalizedNodeAggregator(final YangInstanceIdentifier rootIdentifier,\n            final List<Optional<NormalizedNode<?, ?>>> nodes, final EffectiveModelContext schemaContext,\n            final LogicalDatastoreType logicalDatastoreType)", "testcase": false, "constructor": true}, {"identifier": "aggregate", "parameters": "(final YangInstanceIdentifier rootIdentifier,\n            final List<Optional<NormalizedNode<?, ?>>> nodes, final EffectiveModelContext schemaContext,\n            final LogicalDatastoreType logicalDatastoreType)", "modifiers": "public static", "return": "Optional<NormalizedNode<?,?>>", "signature": "Optional<NormalizedNode<?,?>> aggregate(final YangInstanceIdentifier rootIdentifier,\n            final List<Optional<NormalizedNode<?, ?>>> nodes, final EffectiveModelContext schemaContext,\n            final LogicalDatastoreType logicalDatastoreType)", "full_signature": "public static Optional<NormalizedNode<?,?>> aggregate(final YangInstanceIdentifier rootIdentifier,\n            final List<Optional<NormalizedNode<?, ?>>> nodes, final EffectiveModelContext schemaContext,\n            final LogicalDatastoreType logicalDatastoreType)", "class_method_signature": "NormalizedNodeAggregator.aggregate(final YangInstanceIdentifier rootIdentifier,\n            final List<Optional<NormalizedNode<?, ?>>> nodes, final EffectiveModelContext schemaContext,\n            final LogicalDatastoreType logicalDatastoreType)", "testcase": false, "constructor": false}, {"identifier": "aggregate", "parameters": "()", "modifiers": "private", "return": "Optional<NormalizedNode<?,?>>", "signature": "Optional<NormalizedNode<?,?>> aggregate()", "full_signature": "private Optional<NormalizedNode<?,?>> aggregate()", "class_method_signature": "NormalizedNodeAggregator.aggregate()", "testcase": false, "constructor": false}, {"identifier": "combine", "parameters": "()", "modifiers": "private", "return": "NormalizedNodeAggregator", "signature": "NormalizedNodeAggregator combine()", "full_signature": "private NormalizedNodeAggregator combine()", "class_method_signature": "NormalizedNodeAggregator.combine()", "testcase": false, "constructor": false}, {"identifier": "getRootNode", "parameters": "()", "modifiers": "private", "return": "Optional<NormalizedNode<?, ?>>", "signature": "Optional<NormalizedNode<?, ?>> getRootNode()", "full_signature": "private Optional<NormalizedNode<?, ?>> getRootNode()", "class_method_signature": "NormalizedNodeAggregator.getRootNode()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/utils/NormalizedNodeAggregator.java"}, "focal_method": {"identifier": "aggregate", "parameters": "(final YangInstanceIdentifier rootIdentifier,\n            final List<Optional<NormalizedNode<?, ?>>> nodes, final EffectiveModelContext schemaContext,\n            final LogicalDatastoreType logicalDatastoreType)", "modifiers": "public static", "return": "Optional<NormalizedNode<?,?>>", "body": "public static Optional<NormalizedNode<?,?>> aggregate(final YangInstanceIdentifier rootIdentifier,\n            final List<Optional<NormalizedNode<?, ?>>> nodes, final EffectiveModelContext schemaContext,\n            final LogicalDatastoreType logicalDatastoreType) throws DataValidationFailedException {\n        return new NormalizedNodeAggregator(rootIdentifier, nodes, schemaContext, logicalDatastoreType).aggregate();\n    }", "signature": "Optional<NormalizedNode<?,?>> aggregate(final YangInstanceIdentifier rootIdentifier,\n            final List<Optional<NormalizedNode<?, ?>>> nodes, final EffectiveModelContext schemaContext,\n            final LogicalDatastoreType logicalDatastoreType)", "full_signature": "public static Optional<NormalizedNode<?,?>> aggregate(final YangInstanceIdentifier rootIdentifier,\n            final List<Optional<NormalizedNode<?, ?>>> nodes, final EffectiveModelContext schemaContext,\n            final LogicalDatastoreType logicalDatastoreType)", "class_method_signature": "NormalizedNodeAggregator.aggregate(final YangInstanceIdentifier rootIdentifier,\n            final List<Optional<NormalizedNode<?, ?>>> nodes, final EffectiveModelContext schemaContext,\n            final LogicalDatastoreType logicalDatastoreType)", "testcase": false, "constructor": false, "invocations": ["aggregate"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}