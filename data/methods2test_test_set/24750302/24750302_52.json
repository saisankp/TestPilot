{"test_class": {"identifier": "DeploymentConfigurationDaoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DeploymentConfigurationDao dao;", "modifier": "private", "type": "DeploymentConfigurationDao", "declarator": "dao", "var_name": "dao"}, {"original_string": "@Mock\n    private LocalGitRepositoryPathResolver localGitRepositoryPathResolver;", "modifier": "@Mock\n    private", "type": "LocalGitRepositoryPathResolver", "declarator": "localGitRepositoryPathResolver", "var_name": "localGitRepositoryPathResolver"}, {"original_string": "@Mock\n    private IGenericSearchDAO alienDao;", "modifier": "@Mock\n    private", "type": "IGenericSearchDAO", "declarator": "alienDao", "var_name": "alienDao"}], "file": "alien4cloud-core/src/test/java/org/alien4cloud/alm/deployment/configuration/services/DeploymentConfigurationDaoTest.java"}, "test_case": {"identifier": "when_no_data_in_elastic_search_and_git", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void when_no_data_in_elastic_search_and_git() throws Exception {\n        assertThat(dao.findById(DeploymentInputs.class, \"unknown\")).isNull();\n    }", "signature": "void when_no_data_in_elastic_search_and_git()", "full_signature": "@Test public void when_no_data_in_elastic_search_and_git()", "class_method_signature": "DeploymentConfigurationDaoTest.when_no_data_in_elastic_search_and_git()", "testcase": true, "constructor": false, "invocations": ["isNull", "assertThat", "findById"]}, "focal_class": {"identifier": "DeploymentConfigurationDao", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LocalGitRepositoryPathResolver localGitRepositoryPathResolver;", "modifier": "private", "type": "LocalGitRepositoryPathResolver", "declarator": "localGitRepositoryPathResolver", "var_name": "localGitRepositoryPathResolver"}, {"original_string": "private IGenericSearchDAO alienDao;", "modifier": "private", "type": "IGenericSearchDAO", "declarator": "alienDao", "var_name": "alienDao"}], "methods": [{"identifier": "DeploymentConfigurationDao", "parameters": "(LocalGitRepositoryPathResolver localGitRepositoryPathResolver, @Named(\"alien-es-dao\") IGenericSearchDAO alienDao)", "modifiers": "@Inject public", "return": "", "signature": " DeploymentConfigurationDao(LocalGitRepositoryPathResolver localGitRepositoryPathResolver, @Named(\"alien-es-dao\") IGenericSearchDAO alienDao)", "full_signature": "@Inject public  DeploymentConfigurationDao(LocalGitRepositoryPathResolver localGitRepositoryPathResolver, @Named(\"alien-es-dao\") IGenericSearchDAO alienDao)", "class_method_signature": "DeploymentConfigurationDao.DeploymentConfigurationDao(LocalGitRepositoryPathResolver localGitRepositoryPathResolver, @Named(\"alien-es-dao\") IGenericSearchDAO alienDao)", "testcase": false, "constructor": true}, {"identifier": "findById", "parameters": "(Class<T> clazz, String id)", "modifiers": "@SneakyThrows public", "return": "T", "signature": "T findById(Class<T> clazz, String id)", "full_signature": "@SneakyThrows public T findById(Class<T> clazz, String id)", "class_method_signature": "DeploymentConfigurationDao.findById(Class<T> clazz, String id)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(T deploymentInputs)", "modifiers": "@SneakyThrows public", "return": "void", "signature": "void save(T deploymentInputs)", "full_signature": "@SneakyThrows public void save(T deploymentInputs)", "class_method_signature": "DeploymentConfigurationDao.save(T deploymentInputs)", "testcase": false, "constructor": false}, {"identifier": "deleteAllByTopologyVersionId", "parameters": "(String applicationId, String versionId)", "modifiers": "public", "return": "void", "signature": "void deleteAllByTopologyVersionId(String applicationId, String versionId)", "full_signature": "public void deleteAllByTopologyVersionId(String applicationId, String versionId)", "class_method_signature": "DeploymentConfigurationDao.deleteAllByTopologyVersionId(String applicationId, String versionId)", "testcase": false, "constructor": false}, {"identifier": "deleteAllByEnvironmentId", "parameters": "(String applicationId, String environmentId)", "modifiers": "public", "return": "void", "signature": "void deleteAllByEnvironmentId(String applicationId, String environmentId)", "full_signature": "public void deleteAllByEnvironmentId(String applicationId, String environmentId)", "class_method_signature": "DeploymentConfigurationDao.deleteAllByEnvironmentId(String applicationId, String environmentId)", "testcase": false, "constructor": false}, {"identifier": "deleteDirectory", "parameters": "(Path path)", "modifiers": "private", "return": "void", "signature": "void deleteDirectory(Path path)", "full_signature": "private void deleteDirectory(Path path)", "class_method_signature": "DeploymentConfigurationDao.deleteDirectory(Path path)", "testcase": false, "constructor": false}], "file": "alien4cloud-core/src/main/java/org/alien4cloud/alm/deployment/configuration/services/DeploymentConfigurationDao.java"}, "focal_method": {"identifier": "findById", "parameters": "(Class<T> clazz, String id)", "modifiers": "@SneakyThrows public", "return": "T", "body": "@SneakyThrows\n    public <T extends AbstractDeploymentConfig> T findById(Class<T> clazz, String id) {\n        Path path = localGitRepositoryPathResolver.resolve(clazz, id);\n        T config = null;\n        if (Files.exists(path)) {\n            byte[] bytes = Files.readAllBytes(path);\n\n            if (ArrayUtils.isNotEmpty(bytes)) {\n                config = YamlParserUtil.parse(new String(bytes, StandardCharsets.UTF_8), clazz);\n            }\n        } else {\n            // Any data to migrate?\n            config = alienDao.findById(clazz, id);\n            if (config != null) {\n                // migrating data from ES to Git\n                save(config);\n                alienDao.delete(clazz, id);\n            }\n        }\n        return config;\n    }", "signature": "T findById(Class<T> clazz, String id)", "full_signature": "@SneakyThrows public T findById(Class<T> clazz, String id)", "class_method_signature": "DeploymentConfigurationDao.findById(Class<T> clazz, String id)", "testcase": false, "constructor": false, "invocations": ["resolve", "exists", "readAllBytes", "isNotEmpty", "parse", "findById", "save", "delete"]}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}