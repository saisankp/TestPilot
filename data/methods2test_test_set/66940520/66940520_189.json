{"test_class": {"identifier": "ExpirationDaysCheckTest", "superclass": "extends BaseValidationTest", "interfaces": "", "fields": [{"original_string": "private ExpirationDaysCheck rule;", "modifier": "private", "type": "ExpirationDaysCheck", "declarator": "rule", "var_name": "rule"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/update/validation/ExpirationDaysCheckTest.java"}, "test_case": {"identifier": "failWhenProgramStageInstanceHasExecutionDateBeforeAllowedProgramExpiryDaysBasedOnPeriod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void failWhenProgramStageInstanceHasExecutionDateBeforeAllowedProgramExpiryDaysBasedOnPeriod()\n    {\n        // Given\n        final String monthlyPeriodType = new SimpleDateFormat( \"yyyyMM\" ).format( new Date() );\n        // Prepare program\n        Program program = createProgram( 'P' );\n        program.setExpiryPeriodType( PeriodType.getPeriodTypeFromIsoString( monthlyPeriodType ) );\n        program.setExpiryDays( 3 );\n        Map<String, Program> programMap = new HashMap<>();\n        programMap.put( program.getUid(), program );\n        when( workContext.getProgramsMap() ).thenReturn( programMap );\n\n        // Prepare program stage instance\n        Map<String, ProgramStageInstance> psiMap = new HashMap<>();\n        ProgramStageInstance psi = new ProgramStageInstance();\n        psi.setExecutionDate( getTodayMinusDays( 35 ) ); // month length + 5 days\n        psi.setUid( event.getUid() );\n        psiMap.put( event.getUid(), psi );\n        when( workContext.getProgramStageInstanceMap() ).thenReturn( psiMap );\n\n        // Prepare event\n        event.setProgram( program.getUid() );\n\n        // When\n        ImportSummary importSummary = rule.check( new ImmutableEvent( event ), workContext );\n\n        // Then\n        assertHasError( importSummary, event, \"The program's expiry date has passed. It is not possible to make changes to this event\" );\n    }", "signature": "void failWhenProgramStageInstanceHasExecutionDateBeforeAllowedProgramExpiryDaysBasedOnPeriod()", "full_signature": "@Test public void failWhenProgramStageInstanceHasExecutionDateBeforeAllowedProgramExpiryDaysBasedOnPeriod()", "class_method_signature": "ExpirationDaysCheckTest.failWhenProgramStageInstanceHasExecutionDateBeforeAllowedProgramExpiryDaysBasedOnPeriod()", "testcase": true, "constructor": false, "invocations": ["format", "createProgram", "setExpiryPeriodType", "getPeriodTypeFromIsoString", "setExpiryDays", "put", "getUid", "thenReturn", "when", "getProgramsMap", "setExecutionDate", "getTodayMinusDays", "setUid", "getUid", "put", "getUid", "thenReturn", "when", "getProgramStageInstanceMap", "setProgram", "getUid", "check", "assertHasError"]}, "focal_class": {"identifier": "ExpirationDaysCheck", "superclass": "", "interfaces": "implements Checker", "fields": [], "methods": [{"identifier": "check", "parameters": "( ImmutableEvent event, WorkContext ctx )", "modifiers": "@Override public", "return": "ImportSummary", "signature": "ImportSummary check( ImmutableEvent event, WorkContext ctx )", "full_signature": "@Override public ImportSummary check( ImmutableEvent event, WorkContext ctx )", "class_method_signature": "ExpirationDaysCheck.check( ImmutableEvent event, WorkContext ctx )", "testcase": false, "constructor": false}, {"identifier": "checkEventOrPsiCompletedDate", "parameters": "( Program program, ImmutableEvent event,\n        ProgramStageInstance programStageInstance )", "modifiers": "private", "return": "ImportSummary", "signature": "ImportSummary checkEventOrPsiCompletedDate( Program program, ImmutableEvent event,\n        ProgramStageInstance programStageInstance )", "full_signature": "private ImportSummary checkEventOrPsiCompletedDate( Program program, ImmutableEvent event,\n        ProgramStageInstance programStageInstance )", "class_method_signature": "ExpirationDaysCheck.checkEventOrPsiCompletedDate( Program program, ImmutableEvent event,\n        ProgramStageInstance programStageInstance )", "testcase": false, "constructor": false}, {"identifier": "checkEventOrPsiExpirationDate", "parameters": "( Program program, ImmutableEvent event,\n        ProgramStageInstance programStageInstance )", "modifiers": "private", "return": "ImportSummary", "signature": "ImportSummary checkEventOrPsiExpirationDate( Program program, ImmutableEvent event,\n        ProgramStageInstance programStageInstance )", "full_signature": "private ImportSummary checkEventOrPsiExpirationDate( Program program, ImmutableEvent event,\n        ProgramStageInstance programStageInstance )", "class_method_signature": "ExpirationDaysCheck.checkEventOrPsiExpirationDate( Program program, ImmutableEvent event,\n        ProgramStageInstance programStageInstance )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ExpirationDaysCheck.java"}, "focal_method": {"identifier": "check", "parameters": "( ImmutableEvent event, WorkContext ctx )", "modifiers": "@Override public", "return": "ImportSummary", "body": "@Override\n    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n    {\n        final ImportOptions importOptions = ctx.getImportOptions();\n        final Program program = ctx.getProgramsMap().get( event.getProgram() );\n        final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n\n        if ( importOptions == null || importOptions.getUser() == null\n            || importOptions.getUser().isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n        {\n            return success();\n        }\n\n        if ( program != null )\n        {\n            ImportSummary importSummary = checkEventOrPsiCompletedDate( program, event, programStageInstance );\n\n            if ( importSummary.isStatus( ImportStatus.ERROR ) )\n            {\n                return importSummary;\n            }\n\n            return checkEventOrPsiExpirationDate( program, event, programStageInstance );\n\n        }\n\n        return success();\n    }", "signature": "ImportSummary check( ImmutableEvent event, WorkContext ctx )", "full_signature": "@Override public ImportSummary check( ImmutableEvent event, WorkContext ctx )", "class_method_signature": "ExpirationDaysCheck.check( ImmutableEvent event, WorkContext ctx )", "testcase": false, "constructor": false, "invocations": ["getImportOptions", "get", "getProgramsMap", "getProgram", "get", "getProgramStageInstanceMap", "getEvent", "getUser", "isAuthorized", "getUser", "getAuthority", "success", "checkEventOrPsiCompletedDate", "isStatus", "checkEventOrPsiExpirationDate", "success"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}