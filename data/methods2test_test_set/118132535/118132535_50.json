{"test_class": {"identifier": "LoggingInitTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LoggingInit<String, Integer> loggingInit;", "modifier": "private", "type": "LoggingInit<String, Integer>", "declarator": "loggingInit", "var_name": "loggingInit"}, {"original_string": "private CapturingLogger<String, Boolean, Integer> logger;", "modifier": "private", "type": "CapturingLogger<String, Boolean, Integer>", "declarator": "logger", "var_name": "logger"}], "file": "mobius-core/src/test/java/com/spotify/mobius/LoggingInitTest.java"}, "test_case": {"identifier": "shouldReportExceptions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldReportExceptions() throws Exception {\n    final RuntimeException expected = new RuntimeException(\"expected\");\n\n    loggingInit =\n        new LoggingInit<>(\n            new Init<String, Integer>() {\n              @Nonnull\n              @Override\n              public First<String, Integer> init(String model) {\n                throw expected;\n              }\n            },\n            logger);\n\n    try {\n      loggingInit.init(\"log this plx\");\n    } catch (Exception e) {\n      // ignore\n    }\n\n    //noinspection unchecked\n    assertThat(\n        logger.initErrors,\n        contains(CapturingLogger.InitErrorArgs.create(\"log this plx\", expected)));\n  }", "signature": "void shouldReportExceptions()", "full_signature": "@Test public void shouldReportExceptions()", "class_method_signature": "LoggingInitTest.shouldReportExceptions()", "testcase": true, "constructor": false, "invocations": ["init", "assertThat", "contains", "create"]}, "focal_class": {"identifier": "LoggingInit", "superclass": "", "interfaces": "implements Init<M, F>", "fields": [{"original_string": "private final Init<M, F> actualInit;", "modifier": "private final", "type": "Init<M, F>", "declarator": "actualInit", "var_name": "actualInit"}, {"original_string": "private final MobiusLoop.Logger<M, ?, F> logger;", "modifier": "private final", "type": "MobiusLoop.Logger<M, ?, F>", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "LoggingInit", "parameters": "(Init<M, F> actualInit, MobiusLoop.Logger<M, ?, F> logger)", "modifiers": "", "return": "", "signature": " LoggingInit(Init<M, F> actualInit, MobiusLoop.Logger<M, ?, F> logger)", "full_signature": "  LoggingInit(Init<M, F> actualInit, MobiusLoop.Logger<M, ?, F> logger)", "class_method_signature": "LoggingInit.LoggingInit(Init<M, F> actualInit, MobiusLoop.Logger<M, ?, F> logger)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(M model)", "modifiers": "@Nonnull @Override public", "return": "First<M, F>", "signature": "First<M, F> init(M model)", "full_signature": "@Nonnull @Override public First<M, F> init(M model)", "class_method_signature": "LoggingInit.init(M model)", "testcase": false, "constructor": false}, {"identifier": "safeInvokeInit", "parameters": "(M model)", "modifiers": "private", "return": "First<M, F>", "signature": "First<M, F> safeInvokeInit(M model)", "full_signature": "private First<M, F> safeInvokeInit(M model)", "class_method_signature": "LoggingInit.safeInvokeInit(M model)", "testcase": false, "constructor": false}], "file": "mobius-core/src/main/java/com/spotify/mobius/LoggingInit.java"}, "focal_method": {"identifier": "init", "parameters": "(M model)", "modifiers": "@Nonnull @Override public", "return": "First<M, F>", "body": "@Nonnull\n  @Override\n  public First<M, F> init(M model) {\n    logger.beforeInit(model);\n    First<M, F> result = safeInvokeInit(model);\n    logger.afterInit(model, result);\n    return result;\n  }", "signature": "First<M, F> init(M model)", "full_signature": "@Nonnull @Override public First<M, F> init(M model)", "class_method_signature": "LoggingInit.init(M model)", "testcase": false, "constructor": false, "invocations": ["beforeInit", "safeInvokeInit", "afterInit"]}, "repository": {"repo_id": 118132535, "url": "https://github.com/spotify/mobius", "stars": 663, "created": "1/19/2018 2:07:51 PM +00:00", "updates": "2020-01-27T22:05:43+00:00", "fork": "False", "license": "licensed"}}