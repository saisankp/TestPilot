{"test_class": {"identifier": "TruncationSelectionOperatorTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "protected TruncationSelectionOperator operator;", "modifier": "protected", "type": "TruncationSelectionOperator", "declarator": "operator", "var_name": "operator"}], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/operators/selection/TruncationSelectionOperatorTest.java"}, "test_case": {"identifier": "testSelect2", "parameters": "()", "modifiers": "@Test // test if selects correct number and order of individuals; 2 populations at input and output public", "return": "void", "body": "@Test\n    // test if selects correct number and order of individuals; 2 populations at input and output\n    public void testSelect2() throws Exception{\n        SimplePopulation popIn1 = new SimplePopulation();\n        SimplePopulation popIn2 = new SimplePopulation();\n        Individual[] individuals = new SimpleIndividual[5];\n        for (int i = 0; i < individuals.length; i++){\n            individuals[i] = new SimpleIndividual(0, 0.0, new SimplePhenotypeRepresentation());\n            individuals[i].setFitness((i-1)*(i-1)); // shifted parabola with prescription y = x^2 and bottom at position (x = -1).\n        }\n        Individual[] ind1 = new Individual[]{individuals[0], individuals[2], individuals[4]};\n        Individual[] ind2 = new Individual[]{individuals[1], individuals[3]};\n        popIn1.setIndividuals(ind1);\n        popIn2.setIndividuals(ind2);\n        this.operator.setInputArity(2);\n        this.operator.setOutputArity(2);\n        this.operator.setIndividualsPerPopulation(2);\n        Population[] popsOut = this.operator.select(new SimplePopulation[]{popIn1, popIn2});\n\n        assertTrue(popsOut.length == 2);\n        assertTrue(popsOut[0].getIndividuals().length == 2);\n        assertTrue(popsOut[1].getIndividuals().length == 2);\n\n        Individual indOut = popsOut[0].getIndividuals()[0];\n        assertTrue(indOut.getFitness() == 9.0);\n        indOut = popsOut[1].getIndividuals()[0];\n        assertTrue(indOut.getFitness() == 4.0);\n        indOut = popsOut[0].getIndividuals()[1];\n        assertTrue(indOut.getFitness() == 1.0);\n        indOut = popsOut[1].getIndividuals()[1];\n        assertTrue(indOut.getFitness() == 1.0);\n    }", "signature": "void testSelect2()", "full_signature": "@Test // test if selects correct number and order of individuals; 2 populations at input and output public void testSelect2()", "class_method_signature": "TruncationSelectionOperatorTest.testSelect2()", "testcase": true, "constructor": false, "invocations": ["setFitness", "setIndividuals", "setIndividuals", "setInputArity", "setOutputArity", "setIndividualsPerPopulation", "select", "assertTrue", "assertTrue", "getIndividuals", "assertTrue", "getIndividuals", "getIndividuals", "assertTrue", "getFitness", "getIndividuals", "assertTrue", "getFitness", "getIndividuals", "assertTrue", "getFitness", "getIndividuals", "assertTrue", "getFitness"]}, "focal_class": {"identifier": "TruncationSelectionOperator", "superclass": "extends AbstractSelectionOperator", "interfaces": "", "fields": [], "methods": [{"identifier": "select", "parameters": "(Population[] populations)", "modifiers": "public", "return": "Population[]", "signature": "Population[] select(Population[] populations)", "full_signature": "public Population[] select(Population[] populations)", "class_method_signature": "TruncationSelectionOperator.select(Population[] populations)", "testcase": false, "constructor": false}, {"identifier": "checkConsistency", "parameters": "(Population[] populations)", "modifiers": "@Override public", "return": "void", "signature": "void checkConsistency(Population[] populations)", "full_signature": "@Override public void checkConsistency(Population[] populations)", "class_method_signature": "TruncationSelectionOperator.checkConsistency(Population[] populations)", "testcase": false, "constructor": false}, {"identifier": "checkMinIndividualsPredicate", "parameters": "(int sumSizes)", "modifiers": "protected", "return": "void", "signature": "void checkMinIndividualsPredicate(int sumSizes)", "full_signature": "protected void checkMinIndividualsPredicate(int sumSizes)", "class_method_signature": "TruncationSelectionOperator.checkMinIndividualsPredicate(int sumSizes)", "testcase": false, "constructor": false}, {"identifier": "getResultsSizesCore", "parameters": "(int[] parentPopulationSizes)", "modifiers": "protected", "return": "int[]", "signature": "int[] getResultsSizesCore(int[] parentPopulationSizes)", "full_signature": "protected int[] getResultsSizesCore(int[] parentPopulationSizes)", "class_method_signature": "TruncationSelectionOperator.getResultsSizesCore(int[] parentPopulationSizes)", "testcase": false, "constructor": false}, {"identifier": "setRandomGenerator", "parameters": "(RandomGenerator randomGenerator)", "modifiers": "public", "return": "void", "signature": "void setRandomGenerator(RandomGenerator randomGenerator)", "full_signature": "public void setRandomGenerator(RandomGenerator randomGenerator)", "class_method_signature": "TruncationSelectionOperator.setRandomGenerator(RandomGenerator randomGenerator)", "testcase": false, "constructor": false}, {"identifier": "resetGenerationCount", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resetGenerationCount()", "full_signature": "public void resetGenerationCount()", "class_method_signature": "TruncationSelectionOperator.resetGenerationCount()", "testcase": false, "constructor": false}, {"identifier": "nextGeneration", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void nextGeneration()", "full_signature": "public void nextGeneration()", "class_method_signature": "TruncationSelectionOperator.nextGeneration()", "testcase": false, "constructor": false}, {"identifier": "setGeneration", "parameters": "(int currentGeneration)", "modifiers": "public", "return": "void", "signature": "void setGeneration(int currentGeneration)", "full_signature": "public void setGeneration(int currentGeneration)", "class_method_signature": "TruncationSelectionOperator.setGeneration(int currentGeneration)", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/operators/selection/TruncationSelectionOperator.java"}, "focal_method": {"identifier": "select", "parameters": "(Population[] populations)", "modifiers": "public", "return": "Population[]", "body": "public Population[] select(Population[] populations) {\n        checkConsistency(populations);\n\n        List<Individual> allIndividuals = Arrays.asList(this.concatenateIndividualsFromPopulations(populations, this.inputArity));\n        // sorting according to fitness in reversed order -> fittest first\n        Collections.sort(allIndividuals, Collections.reverseOrder());\n\n        // prepare result and map selected Individuals into resulting arrays\n        int resultSize = this.individualsPerPopulation * this.outputArity;\n        List<Individual> resultingIndividuals = allIndividuals.subList(0, resultSize);\n\n        // making resulting array\n        Population[] outputPopulations = this.createOutputPopulations();\n        Individual[][] outputIndividuals = this.createOutputIndividuals();\n        this.assignIndividualsToPopulations(outputIndividuals, outputPopulations);\n        this.mapByColumns(resultingIndividuals, outputIndividuals);\n\n        return outputPopulations;\n    }", "signature": "Population[] select(Population[] populations)", "full_signature": "public Population[] select(Population[] populations)", "class_method_signature": "TruncationSelectionOperator.select(Population[] populations)", "testcase": false, "constructor": false, "invocations": ["checkConsistency", "asList", "concatenateIndividualsFromPopulations", "sort", "reverseOrder", "subList", "createOutputPopulations", "createOutputIndividuals", "assignIndividualsToPopulations", "mapByColumns"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}