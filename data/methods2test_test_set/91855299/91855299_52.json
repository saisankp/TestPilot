{"test_class": {"identifier": "PropertyUtilsTest", "superclass": "extends UtilityClassTest<PropertyUtils>", "interfaces": "", "fields": [], "file": "api/src/test/java/edu/wpi/first/shuffleboard/api/util/PropertyUtilsTest.java"}, "test_case": {"identifier": "testBindBidirectionalWithConverter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBindBidirectionalWithConverter() {\n    // given\n    Property<String> str = new SimpleStringProperty(\"-42\");\n    Property<Number> num = new SimpleDoubleProperty(1.23);\n\n    // when\n    PropertyUtils.bindBidirectionalWithConverter(str, num, Double::parseDouble, Object::toString);\n\n    // then (initial conditions)\n    assertAll(\n        () -> assertEquals(\"1.23\", str.getValue(), \"String was not set correctly\"),\n        () -> assertEquals(1.23, num.getValue().doubleValue(), \"Binding target should not have changed\")\n    );\n\n    // when changing one value\n    str.setValue(\"89\");\n    // then\n    assertEquals(89, num.getValue().doubleValue(), \"Number was not set correctly\");\n\n    // when changing the other value\n    num.setValue(10.01);\n    // then\n    assertEquals(\"10.01\", str.getValue(), \"String was not set correctly\");\n  }", "signature": "void testBindBidirectionalWithConverter()", "full_signature": "@Test public void testBindBidirectionalWithConverter()", "class_method_signature": "PropertyUtilsTest.testBindBidirectionalWithConverter()", "testcase": true, "constructor": false, "invocations": ["bindBidirectionalWithConverter", "assertAll", "assertEquals", "getValue", "assertEquals", "doubleValue", "getValue", "setValue", "assertEquals", "doubleValue", "getValue", "setValue", "assertEquals", "getValue"]}, "focal_class": {"identifier": "PropertyUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<Property, Binding> bindings = new WeakHashMap<>();", "modifier": "private static final", "type": "Map<Property, Binding>", "declarator": "bindings = new WeakHashMap<>()", "var_name": "bindings"}], "methods": [{"identifier": "PropertyUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " PropertyUtils()", "full_signature": "private  PropertyUtils()", "class_method_signature": "PropertyUtils.PropertyUtils()", "testcase": false, "constructor": true}, {"identifier": "bindBidirectionalWithConverter", "parameters": "(\n      Property<T> sourceProperty,\n      Property<U> bindingTarget,\n      Function<? super T, ? extends U> t2uConverter,\n      Function<? super U, ? extends T> u2tConverter)", "modifiers": "public static", "return": "void", "signature": "void bindBidirectionalWithConverter(\n      Property<T> sourceProperty,\n      Property<U> bindingTarget,\n      Function<? super T, ? extends U> t2uConverter,\n      Function<? super U, ? extends T> u2tConverter)", "full_signature": "public static void bindBidirectionalWithConverter(\n      Property<T> sourceProperty,\n      Property<U> bindingTarget,\n      Function<? super T, ? extends U> t2uConverter,\n      Function<? super U, ? extends T> u2tConverter)", "class_method_signature": "PropertyUtils.bindBidirectionalWithConverter(\n      Property<T> sourceProperty,\n      Property<U> bindingTarget,\n      Function<? super T, ? extends U> t2uConverter,\n      Function<? super U, ? extends T> u2tConverter)", "testcase": false, "constructor": false}, {"identifier": "bindWithConverter", "parameters": "(\n      Property<T> firstProperty,\n      Property<U> secondProperty,\n      Function<U, T> u2tConverter)", "modifiers": "public static", "return": "void", "signature": "void bindWithConverter(\n      Property<T> firstProperty,\n      Property<U> secondProperty,\n      Function<U, T> u2tConverter)", "full_signature": "public static void bindWithConverter(\n      Property<T> firstProperty,\n      Property<U> secondProperty,\n      Function<U, T> u2tConverter)", "class_method_signature": "PropertyUtils.bindWithConverter(\n      Property<T> firstProperty,\n      Property<U> secondProperty,\n      Function<U, T> u2tConverter)", "testcase": false, "constructor": false}, {"identifier": "bindToMapBidirectionally", "parameters": "(Property<T> property,\n                                                                  ObservableMap<K, V> map,\n                                                                  K key,\n                                                                  Function<V, T> v2t)", "modifiers": "public static", "return": "void", "signature": "void bindToMapBidirectionally(Property<T> property,\n                                                                  ObservableMap<K, V> map,\n                                                                  K key,\n                                                                  Function<V, T> v2t)", "full_signature": "public static void bindToMapBidirectionally(Property<T> property,\n                                                                  ObservableMap<K, V> map,\n                                                                  K key,\n                                                                  Function<V, T> v2t)", "class_method_signature": "PropertyUtils.bindToMapBidirectionally(Property<T> property,\n                                                                  ObservableMap<K, V> map,\n                                                                  K key,\n                                                                  Function<V, T> v2t)", "testcase": false, "constructor": false}, {"identifier": "combineLists", "parameters": "(ObservableList<T> first, ObservableList<T> second)", "modifiers": "public static", "return": "ObservableList<T>", "signature": "ObservableList<T> combineLists(ObservableList<T> first, ObservableList<T> second)", "full_signature": "public static ObservableList<T> combineLists(ObservableList<T> first, ObservableList<T> second)", "class_method_signature": "PropertyUtils.combineLists(ObservableList<T> first, ObservableList<T> second)", "testcase": false, "constructor": false}], "file": "api/src/main/java/edu/wpi/first/shuffleboard/api/util/PropertyUtils.java"}, "focal_method": {"identifier": "bindBidirectionalWithConverter", "parameters": "(\n      Property<T> sourceProperty,\n      Property<U> bindingTarget,\n      Function<? super T, ? extends U> t2uConverter,\n      Function<? super U, ? extends T> u2tConverter)", "modifiers": "public static", "return": "void", "body": "public static <T, U> void bindBidirectionalWithConverter(\n      Property<T> sourceProperty,\n      Property<U> bindingTarget,\n      Function<? super T, ? extends U> t2uConverter,\n      Function<? super U, ? extends T> u2tConverter) {\n    U targetValue = bindingTarget.getValue();\n    sourceProperty.setValue(targetValue == null ? null : u2tConverter.apply(targetValue));\n    sourceProperty.addListener((__, old, newValue) -> {\n      U newMappedValue = newValue == null ? null : t2uConverter.apply(newValue);\n      if (EqualityUtils.isDifferent(bindingTarget.getValue(), newMappedValue)) {\n        bindingTarget.setValue(newMappedValue);\n      }\n    });\n    bindingTarget.addListener((__, old, newValue) -> {\n      T newMappedValue = newValue == null ? null : u2tConverter.apply(newValue);\n      if (EqualityUtils.isDifferent(sourceProperty.getValue(), newMappedValue)) {\n        sourceProperty.setValue(newMappedValue);\n      }\n    });\n  }", "signature": "void bindBidirectionalWithConverter(\n      Property<T> sourceProperty,\n      Property<U> bindingTarget,\n      Function<? super T, ? extends U> t2uConverter,\n      Function<? super U, ? extends T> u2tConverter)", "full_signature": "public static void bindBidirectionalWithConverter(\n      Property<T> sourceProperty,\n      Property<U> bindingTarget,\n      Function<? super T, ? extends U> t2uConverter,\n      Function<? super U, ? extends T> u2tConverter)", "class_method_signature": "PropertyUtils.bindBidirectionalWithConverter(\n      Property<T> sourceProperty,\n      Property<U> bindingTarget,\n      Function<? super T, ? extends U> t2uConverter,\n      Function<? super U, ? extends T> u2tConverter)", "testcase": false, "constructor": false, "invocations": ["getValue", "setValue", "apply", "addListener", "apply", "isDifferent", "getValue", "setValue", "addListener", "apply", "isDifferent", "getValue", "setValue"]}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}