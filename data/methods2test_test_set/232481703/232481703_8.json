{"test_class": {"identifier": "SqlJobTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static String sql;", "modifier": "public static", "type": "String", "declarator": "sql", "var_name": "sql"}], "file": "plink-sql/plink-sql-core/src/test/java/com/github/hairless/plink/sql/SqlJobTest.java"}, "test_case": {"identifier": "sqlJobWatermarkTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void sqlJobWatermarkTest() {\n        List<JSONObject> sourceData = Stream.of(\n                new JSONObject().fluentPut(\"data_time\", \"2020-01-01 12:00:01\"),\n                new JSONObject().fluentPut(\"data_time\", \"2020-01-01 12:00:02\"),\n                new JSONObject().fluentPut(\"data_time\", \"2020-01-01 12:00:03\"),\n                new JSONObject().fluentPut(\"data_time\", \"2020-01-01 12:01:01\")\n        ).collect(Collectors.toList());\n        String sql = \"create table t1( \" +\n                \"data_time STRING, \" +\n                \"row1_time AS to_timestamp(data_time),\" +\n                \"WATERMARK FOR row1_time AS row1_time - INTERVAL '5' SECOND \" +\n                \") with ( 'connector' = 'collection','data'='\" + JSON.toJSONString(sourceData) + \"');\" +\n                \"create table t2(stime TIMESTAMP(3),cnt bigint) with ( 'connector' = 'print');\" +\n                \"insert into t2 select TUMBLE_START(row1_time, INTERVAL '1' MINUTE) as stime,count(1) cnt from t1 group by TUMBLE(row1_time, INTERVAL '1' MINUTE);;\";\n\n\n        Exception exception = null;\n        try {\n            SqlConfig config = SqlConfig.builder().sql(sql).jobName(\"sql_job_test\").build();\n            SqlJob sqlJob = new SqlJob(config);\n            sqlJob.start();\n        } catch (Exception e) {\n            log.error(\"sqlJobTest error\", e);\n            exception = e;\n        }\n        assert exception == null;\n    }", "signature": "void sqlJobWatermarkTest()", "full_signature": "@Test public void sqlJobWatermarkTest()", "class_method_signature": "SqlJobTest.sqlJobWatermarkTest()", "testcase": true, "constructor": false, "invocations": ["collect", "of", "fluentPut", "fluentPut", "fluentPut", "fluentPut", "toList", "toJSONString", "build", "jobName", "sql", "builder", "start", "error"]}, "focal_class": {"identifier": "SqlJob", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SqlConfig sqlConfig;", "modifier": "private final", "type": "SqlConfig", "declarator": "sqlConfig", "var_name": "sqlConfig"}], "methods": [{"identifier": "SqlJob", "parameters": "(SqlConfig sqlConfig)", "modifiers": "public", "return": "", "signature": " SqlJob(SqlConfig sqlConfig)", "full_signature": "public  SqlJob(SqlConfig sqlConfig)", "class_method_signature": "SqlJob.SqlJob(SqlConfig sqlConfig)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "JobExecutionResult", "signature": "JobExecutionResult start()", "full_signature": "public JobExecutionResult start()", "class_method_signature": "SqlJob.start()", "testcase": false, "constructor": false}], "file": "plink-sql/plink-sql-core/src/main/java/com/github/hairless/plink/sql/SqlJob.java"}, "focal_method": {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "JobExecutionResult", "body": "public JobExecutionResult start() throws Exception {\n        log.info(\"sql job {} staring...\", sqlConfig.getJobName());\n        StreamExecutionEnvironment env = new LocalStreamEnvironment();\n        EnvironmentSettings settings = EnvironmentSettings.newInstance()\n                .useBlinkPlanner().inStreamingMode().build();\n        TableEnvironmentImpl tEnv = (TableEnvironmentImpl) StreamTableEnvironment.create(env, settings);\n\n        SqlParser sqlParser = SqlParser.create(sqlConfig.getSql(), PlinkSqlParser.sqlParserConfig);\n        SqlNodeList sqlNodes = sqlParser.parseStmtList();\n        sqlNodes.forEach(sqlNode -> {\n            if (sqlNode instanceof SqlSetOption) {\n                String name = ((SqlSetOption) sqlNode).getName().getSimple();\n                String value = ((SqlSetOption) sqlNode).getValue().toString();\n                tEnv.getConfig().getConfiguration().setString(name, value);\n            } else {\n                String sql = sqlNode.toSqlString(SkipAnsiCheckSqlDialect.DEFAULT).getSql();\n                tEnv.sqlUpdate(sql);\n            }\n        });\n        return tEnv.execute(sqlConfig.getJobName());\n    }", "signature": "JobExecutionResult start()", "full_signature": "public JobExecutionResult start()", "class_method_signature": "SqlJob.start()", "testcase": false, "constructor": false, "invocations": ["info", "getJobName", "build", "inStreamingMode", "useBlinkPlanner", "newInstance", "create", "create", "getSql", "parseStmtList", "forEach", "getSimple", "getName", "toString", "getValue", "setString", "getConfiguration", "getConfig", "getSql", "toSqlString", "sqlUpdate", "execute", "getJobName"]}, "repository": {"repo_id": 232481703, "url": "https://github.com/hairless/plink", "stars": 10, "created": "1/8/2020 5:01:32 AM +00:00", "updates": "2020-01-27T16:15:22+00:00", "fork": "False", "license": "licensed"}}