{"test_class": {"identifier": "CommandHandlerProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private CommandHandlerProvider commandHandlerProvider;", "modifier": "@Autowired\n    private", "type": "CommandHandlerProvider", "declarator": "commandHandlerProvider", "var_name": "commandHandlerProvider"}], "file": "fineract-provider/src/test/java/org/apache/fineract/commands/provider/CommandHandlerProviderTest.java"}, "test_case": {"identifier": "shouldRegisterHandler", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldRegisterHandler() {\n        try {\n            final Long testCommandId = 815L;\n\n            final NewCommandSourceHandler registeredHandler = this.commandHandlerProvider.getHandler(\"HUMAN\", \"UPDATE\");\n\n            final CommandProcessingResult result =\n                    registeredHandler.processCommand(\n                            JsonCommand.fromExistingCommand(testCommandId, null, null, null, null, null, null, null, null));\n            Assert.assertEquals(testCommandId, result.commandId());\n        } catch (UnsupportedCommandException ucex) {\n            Assert.fail();\n        }\n    }", "signature": "void shouldRegisterHandler()", "full_signature": "@Test public void shouldRegisterHandler()", "class_method_signature": "CommandHandlerProviderTest.shouldRegisterHandler()", "testcase": true, "constructor": false, "invocations": ["getHandler", "processCommand", "fromExistingCommand", "assertEquals", "commandId", "fail"]}, "focal_class": {"identifier": "CommandHandlerProvider", "superclass": "", "interfaces": "implements ApplicationContextAware", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CommandHandlerProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CommandHandlerProvider.class)", "var_name": "LOGGER"}, {"original_string": "private ApplicationContext applicationContext;", "modifier": "private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private HashMap<String, String> registeredHandlers;", "modifier": "private", "type": "HashMap<String, String>", "declarator": "registeredHandlers", "var_name": "registeredHandlers"}], "methods": [{"identifier": "CommandHandlerProvider", "parameters": "()", "modifiers": "", "return": "", "signature": " CommandHandlerProvider()", "full_signature": "  CommandHandlerProvider()", "class_method_signature": "CommandHandlerProvider.CommandHandlerProvider()", "testcase": false, "constructor": true}, {"identifier": "getHandler", "parameters": "(@Nonnull final String entity, @Nonnull final String action)", "modifiers": "@Nonnull public", "return": "NewCommandSourceHandler", "signature": "NewCommandSourceHandler getHandler(@Nonnull final String entity, @Nonnull final String action)", "full_signature": "@Nonnull public NewCommandSourceHandler getHandler(@Nonnull final String entity, @Nonnull final String action)", "class_method_signature": "CommandHandlerProvider.getHandler(@Nonnull final String entity, @Nonnull final String action)", "testcase": false, "constructor": false}, {"identifier": "initializeHandlerRegistry", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeHandlerRegistry()", "full_signature": "private void initializeHandlerRegistry()", "class_method_signature": "CommandHandlerProvider.initializeHandlerRegistry()", "testcase": false, "constructor": false}, {"identifier": "setApplicationContext", "parameters": "(ApplicationContext applicationContext)", "modifiers": "@Override public", "return": "void", "signature": "void setApplicationContext(ApplicationContext applicationContext)", "full_signature": "@Override public void setApplicationContext(ApplicationContext applicationContext)", "class_method_signature": "CommandHandlerProvider.setApplicationContext(ApplicationContext applicationContext)", "testcase": false, "constructor": false}], "file": "fineract-provider/src/main/java/org/apache/fineract/commands/provider/CommandHandlerProvider.java"}, "focal_method": {"identifier": "getHandler", "parameters": "(@Nonnull final String entity, @Nonnull final String action)", "modifiers": "@Nonnull public", "return": "NewCommandSourceHandler", "body": "@Nonnull\n    public NewCommandSourceHandler getHandler (@Nonnull final String entity, @Nonnull final String action) {\n        Preconditions.checkArgument(StringUtils.isNoneEmpty(entity), \"An entity must be given!\");\n        Preconditions.checkArgument(StringUtils.isNoneEmpty(action), \"An action must be given!\");\n\n        final String key =  entity + \"|\" + action;\n        if (!this.registeredHandlers.containsKey(key)) {\n            throw new UnsupportedCommandException(key);\n        }\n        return (NewCommandSourceHandler)this.applicationContext.getBean(this.registeredHandlers.get(key));\n    }", "signature": "NewCommandSourceHandler getHandler(@Nonnull final String entity, @Nonnull final String action)", "full_signature": "@Nonnull public NewCommandSourceHandler getHandler(@Nonnull final String entity, @Nonnull final String action)", "class_method_signature": "CommandHandlerProvider.getHandler(@Nonnull final String entity, @Nonnull final String action)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "isNoneEmpty", "checkArgument", "isNoneEmpty", "containsKey", "getBean", "get"]}, "repository": {"repo_id": 4084995, "url": "https://github.com/openMF/mifosx", "language": "Java", "is_fork": false, "fork_count": 743, "stargazer_count": 192, "size": 33014, "license": "licensed"}}