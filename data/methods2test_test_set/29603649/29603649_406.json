{"test_class": {"identifier": "WilmaServiceListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FAILED_MESSAGE = \"Error occurred in Wilma\";", "modifier": "private static final", "type": "String", "declarator": "FAILED_MESSAGE = \"Error occurred in Wilma\"", "var_name": "FAILED_MESSAGE"}, {"original_string": "private static final String ERR_MSG = \"System error\";", "modifier": "private static final", "type": "String", "declarator": "ERR_MSG = \"System error\"", "var_name": "ERR_MSG"}, {"original_string": "private static final String WILMA_START_MESSAGE = \"wilmaStartMessage\";", "modifier": "private static final", "type": "String", "declarator": "WILMA_START_MESSAGE = \"wilmaStartMessage\"", "var_name": "WILMA_START_MESSAGE"}, {"original_string": "private static final String TERMINATED_MESSAGE = \"Wilma stopped.\";", "modifier": "private static final", "type": "String", "declarator": "TERMINATED_MESSAGE = \"Wilma stopped.\"", "var_name": "TERMINATED_MESSAGE"}, {"original_string": "@Mock\n    private Logger logger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Mock\n    private VersionTitleProvider versionTitleProvider;", "modifier": "@Mock\n    private", "type": "VersionTitleProvider", "declarator": "versionTitleProvider", "var_name": "versionTitleProvider"}, {"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private LogFilePathProvider logFilePath;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private", "type": "LogFilePathProvider", "declarator": "logFilePath", "var_name": "logFilePath"}, {"original_string": "@Mock\n    private EngineConfigurationAccess configurationAccess;", "modifier": "@Mock\n    private", "type": "EngineConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}, {"original_string": "@InjectMocks\n    private WilmaServiceListener underTest;", "modifier": "@InjectMocks\n    private", "type": "WilmaServiceListener", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private PropertyDTO properties;", "modifier": "@Mock\n    private", "type": "PropertyDTO", "declarator": "properties", "var_name": "properties"}], "file": "wilma-application/modules/wilma-engine/src/test/java/com/epam/wilma/engine/bootstrap/helper/WilmaServiceListenerTest.java"}, "test_case": {"identifier": "testFailedWhenSystemExceptionAndErrorCauseExistsShouldLogErrorAtErrorLevel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFailedWhenSystemExceptionAndErrorCauseExistsShouldLogErrorAtErrorLevel() {\n        //GIVEN\n        State state = Mockito.mock(State.class);\n        SystemException exception = new SystemException(ERR_MSG);\n        Throwable cause = new Throwable();\n        exception.initCause(cause);\n        //WHEN\n        underTest.failed(state, exception);\n        //THEN\n        verify(logger).error(FAILED_MESSAGE, exception);\n    }", "signature": "void testFailedWhenSystemExceptionAndErrorCauseExistsShouldLogErrorAtErrorLevel()", "full_signature": "@Test public void testFailedWhenSystemExceptionAndErrorCauseExistsShouldLogErrorAtErrorLevel()", "class_method_signature": "WilmaServiceListenerTest.testFailedWhenSystemExceptionAndErrorCauseExistsShouldLogErrorAtErrorLevel()", "testcase": true, "constructor": false, "invocations": ["mock", "initCause", "failed", "error", "verify"]}, "focal_class": {"identifier": "WilmaServiceListener", "superclass": "extends Service.Listener", "interfaces": "", "fields": [{"original_string": "private static final String FAILED_MESSAGE = \"Error occurred in Wilma\";", "modifier": "private static final", "type": "String", "declarator": "FAILED_MESSAGE = \"Error occurred in Wilma\"", "var_name": "FAILED_MESSAGE"}, {"original_string": "private static final String TERMINATED_MESSAGE = \"Wilma stopped.\";", "modifier": "private static final", "type": "String", "declarator": "TERMINATED_MESSAGE = \"Wilma stopped.\"", "var_name": "TERMINATED_MESSAGE"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(WilmaServiceListener.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(WilmaServiceListener.class)", "var_name": "logger"}, {"original_string": "@Qualifier(\"wilmaStartMessage\")\n    @Autowired\n    private String wilmaStartMessage;", "modifier": "@Qualifier(\"wilmaStartMessage\")\n    @Autowired\n    private", "type": "String", "declarator": "wilmaStartMessage", "var_name": "wilmaStartMessage"}, {"original_string": "@Autowired\n    private LogFilePathProvider logFilePath;", "modifier": "@Autowired\n    private", "type": "LogFilePathProvider", "declarator": "logFilePath", "var_name": "logFilePath"}, {"original_string": "@Autowired\n    private VersionTitleProvider versionTitleProvider;", "modifier": "@Autowired\n    private", "type": "VersionTitleProvider", "declarator": "versionTitleProvider", "var_name": "versionTitleProvider"}, {"original_string": "@Autowired\n    private EngineConfigurationAccess configurationAccess;", "modifier": "@Autowired\n    private", "type": "EngineConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}], "methods": [{"identifier": "running", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void running()", "full_signature": "@Override public void running()", "class_method_signature": "WilmaServiceListener.running()", "testcase": false, "constructor": false}, {"identifier": "terminated", "parameters": "(final State from)", "modifiers": "@Override public", "return": "void", "signature": "void terminated(final State from)", "full_signature": "@Override public void terminated(final State from)", "class_method_signature": "WilmaServiceListener.terminated(final State from)", "testcase": false, "constructor": false}, {"identifier": "failed", "parameters": "(final State from, final Throwable failure)", "modifiers": "@Override public", "return": "void", "signature": "void failed(final State from, final Throwable failure)", "full_signature": "@Override public void failed(final State from, final Throwable failure)", "class_method_signature": "WilmaServiceListener.failed(final State from, final Throwable failure)", "testcase": false, "constructor": false}, {"identifier": "generateStartMessage", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String generateStartMessage()", "full_signature": "private String generateStartMessage()", "class_method_signature": "WilmaServiceListener.generateStartMessage()", "testcase": false, "constructor": false}, {"identifier": "getProxyPort", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getProxyPort()", "full_signature": "private int getProxyPort()", "class_method_signature": "WilmaServiceListener.getProxyPort()", "testcase": false, "constructor": false}, {"identifier": "getWilmaPort", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getWilmaPort()", "full_signature": "private int getWilmaPort()", "class_method_signature": "WilmaServiceListener.getWilmaPort()", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-engine/src/main/java/com/epam/wilma/engine/bootstrap/helper/WilmaServiceListener.java"}, "focal_method": {"identifier": "failed", "parameters": "(final State from, final Throwable failure)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void failed(final State from, final Throwable failure) {\n        logger.error(FAILED_MESSAGE, failure);\n    }", "signature": "void failed(final State from, final Throwable failure)", "full_signature": "@Override public void failed(final State from, final Throwable failure)", "class_method_signature": "WilmaServiceListener.failed(final State from, final Throwable failure)", "testcase": false, "constructor": false, "invocations": ["error"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}