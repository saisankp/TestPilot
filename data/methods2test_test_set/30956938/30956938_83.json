{"test_class": {"identifier": "LiteralBodyBuilderTest", "superclass": "extends WSDLTestHelper", "interfaces": "", "fields": [], "file": "taverna-wsdl-generic/src/test/java/org/apache/taverna/wsdl/soap/LiteralBodyBuilderTest.java"}, "test_case": {"identifier": "testUnwrappedArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testUnwrappedArray() throws Exception {\n\t\tBodyBuilder builder = createBuilder(wsdlResourcePath(\"TestServices-unwrapped.wsdl\"), \"countStringArray\");\n\t\t\n\t\tassertTrue(\"Wrong type of builder, it should be Literal based\",builder instanceof LiteralBodyBuilder);\n\t\t\n\t\tMap<String,Object> inputMap = new HashMap<String, Object>();\n\t\tinputMap.put(\"array\", \"<array><item>1</item><item>2</item><item>3</item></array>\");\n\t\t\n\t\tSOAPElement body = builder.build(inputMap);\n\t\t\n                assertTrue(\"Outer element should be named {http://testing.org}array \", \"array\".equals(body.getLocalName()) && \"http://testing.org\".equals(body.getNamespaceURI()));\n                \n                assertTrue(\"There must be three child nodes in array\", body.getChildNodes().getLength() == 3);\n\n                Iterator<Node> items = body.getChildElements(new QName(\"\", \"item\"));\n                assertTrue(\"Array element should be named item\", items.hasNext());\n                \n                assertTrue(\"First Array element should have the value '1'\", \"1\".equals(items.next().getTextContent()));\n\t}", "signature": "void testUnwrappedArray()", "full_signature": "@Test public void testUnwrappedArray()", "class_method_signature": "LiteralBodyBuilderTest.testUnwrappedArray()", "testcase": true, "constructor": false, "invocations": ["createBuilder", "wsdlResourcePath", "assertTrue", "put", "build", "assertTrue", "equals", "getLocalName", "equals", "getNamespaceURI", "assertTrue", "getLength", "getChildNodes", "getChildElements", "assertTrue", "hasNext", "assertTrue", "equals", "getTextContent", "next"]}, "focal_class": {"identifier": "LiteralBodyBuilder", "superclass": "extends AbstractBodyBuilder", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger(LiteralBodyBuilder.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger(LiteralBodyBuilder.class)", "var_name": "logger"}, {"original_string": "private static final String TYPE = \"type\";", "modifier": "private static final", "type": "String", "declarator": "TYPE = \"type\"", "var_name": "TYPE"}], "methods": [{"identifier": "LiteralBodyBuilder", "parameters": "(String style, WSDLParser parser, String operationName, List<TypeDescriptor> inputDescriptors)", "modifiers": "public", "return": "", "signature": " LiteralBodyBuilder(String style, WSDLParser parser, String operationName, List<TypeDescriptor> inputDescriptors)", "full_signature": "public  LiteralBodyBuilder(String style, WSDLParser parser, String operationName, List<TypeDescriptor> inputDescriptors)", "class_method_signature": "LiteralBodyBuilder.LiteralBodyBuilder(String style, WSDLParser parser, String operationName, List<TypeDescriptor> inputDescriptors)", "testcase": false, "constructor": true}, {"identifier": "getUse", "parameters": "()", "modifiers": "@Override protected", "return": "Use", "signature": "Use getUse()", "full_signature": "@Override protected Use getUse()", "class_method_signature": "LiteralBodyBuilder.getUse()", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(Map inputMap)", "modifiers": "@Override public", "return": "SOAPElement", "signature": "SOAPElement build(Map inputMap)", "full_signature": "@Override public SOAPElement build(Map inputMap)", "class_method_signature": "LiteralBodyBuilder.build(Map inputMap)", "testcase": false, "constructor": false}, {"identifier": "createSkeletonElementForSingleItem", "parameters": "(\n\t\t\tMap<String, String> namespaceMappings, TypeDescriptor descriptor,\n\t\t\tString inputName, String typeName)", "modifiers": "@Override protected", "return": "Element", "signature": "Element createSkeletonElementForSingleItem(\n\t\t\tMap<String, String> namespaceMappings, TypeDescriptor descriptor,\n\t\t\tString inputName, String typeName)", "full_signature": "@Override protected Element createSkeletonElementForSingleItem(\n\t\t\tMap<String, String> namespaceMappings, TypeDescriptor descriptor,\n\t\t\tString inputName, String typeName)", "class_method_signature": "LiteralBodyBuilder.createSkeletonElementForSingleItem(\n\t\t\tMap<String, String> namespaceMappings, TypeDescriptor descriptor,\n\t\t\tString inputName, String typeName)", "testcase": false, "constructor": false}, {"identifier": "fixTypeAttributes", "parameters": "(Node parent)", "modifiers": "private", "return": "void", "signature": "void fixTypeAttributes(Node parent)", "full_signature": "private void fixTypeAttributes(Node parent)", "class_method_signature": "LiteralBodyBuilder.fixTypeAttributes(Node parent)", "testcase": false, "constructor": false}, {"identifier": "createElementForArrayType", "parameters": "(\n\t\t\tMap<String, String> namespaceMappings, String inputName,\n\t\t\tObject dataValue, TypeDescriptor descriptor, String mimeType,\n\t\t\tString typeName)", "modifiers": "@Override protected", "return": "Element", "signature": "Element createElementForArrayType(\n\t\t\tMap<String, String> namespaceMappings, String inputName,\n\t\t\tObject dataValue, TypeDescriptor descriptor, String mimeType,\n\t\t\tString typeName)", "full_signature": "@Override protected Element createElementForArrayType(\n\t\t\tMap<String, String> namespaceMappings, String inputName,\n\t\t\tObject dataValue, TypeDescriptor descriptor, String mimeType,\n\t\t\tString typeName)", "class_method_signature": "LiteralBodyBuilder.createElementForArrayType(\n\t\t\tMap<String, String> namespaceMappings, String inputName,\n\t\t\tObject dataValue, TypeDescriptor descriptor, String mimeType,\n\t\t\tString typeName)", "testcase": false, "constructor": false}, {"identifier": "addElementToBody", "parameters": "(String operationNamespace, SOAPElement body, Element el)", "modifiers": "@Override protected", "return": "SOAPElement", "signature": "SOAPElement addElementToBody(String operationNamespace, SOAPElement body, Element el)", "full_signature": "@Override protected SOAPElement addElementToBody(String operationNamespace, SOAPElement body, Element el)", "class_method_signature": "LiteralBodyBuilder.addElementToBody(String operationNamespace, SOAPElement body, Element el)", "testcase": false, "constructor": false}], "file": "taverna-wsdl-generic/src/main/java/org/apache/taverna/wsdl/soap/LiteralBodyBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "(Map inputMap)", "modifiers": "@Override public", "return": "SOAPElement", "body": "@Override\n\tpublic SOAPElement build(Map inputMap) throws WSDLException,\n\t\t\tParserConfigurationException, SOAPException, IOException,\n\t\t\tSAXException, UnknownOperationException {\n\n\t\tSOAPElement body = super.build(inputMap);\n\n\t\tif (getStyle() == Style.DOCUMENT) {\n\t\t\tfixTypeAttributes(body);\n\t\t}\n\n\t\treturn body;\n\t}", "signature": "SOAPElement build(Map inputMap)", "full_signature": "@Override public SOAPElement build(Map inputMap)", "class_method_signature": "LiteralBodyBuilder.build(Map inputMap)", "testcase": false, "constructor": false, "invocations": ["build", "getStyle", "fixTypeAttributes"]}, "repository": {"repo_id": 30956938, "url": "https://github.com/apache/incubator-taverna-common-activities", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 5696, "license": "licensed"}}