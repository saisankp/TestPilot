{"test_class": {"identifier": "TracingJdbcEventListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock Connection connection;", "modifier": "@Mock", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock DatabaseMetaData metaData;", "modifier": "@Mock", "type": "DatabaseMetaData", "declarator": "metaData", "var_name": "metaData"}, {"original_string": "@Mock StatementInformation statementInformation;", "modifier": "@Mock", "type": "StatementInformation", "declarator": "statementInformation", "var_name": "statementInformation"}, {"original_string": "@Mock ConnectionInformation connectionInformation;", "modifier": "@Mock", "type": "ConnectionInformation", "declarator": "connectionInformation", "var_name": "connectionInformation"}, {"original_string": "@Mock Span span;", "modifier": "@Mock", "type": "Span", "declarator": "span", "var_name": "span"}, {"original_string": "String url = \"jdbc:mysql://1.2.3.4:5555/mydatabase\";", "modifier": "", "type": "String", "declarator": "url = \"jdbc:mysql://1.2.3.4:5555/mydatabase\"", "var_name": "url"}, {"original_string": "String urlWithServiceName = url + \"?zipkinServiceName=mysql_service&foo=bar\";", "modifier": "", "type": "String", "declarator": "urlWithServiceName = url + \"?zipkinServiceName=mysql_service&foo=bar\"", "var_name": "urlWithServiceName"}, {"original_string": "String urlWithEmptyServiceName = url + \"?zipkinServiceName=&foo=bar\";", "modifier": "", "type": "String", "declarator": "urlWithEmptyServiceName = url + \"?zipkinServiceName=&foo=bar\"", "var_name": "urlWithEmptyServiceName"}, {"original_string": "String urlWithWhiteSpace =\n      \"jdbc:sqlserver://1.2.3.4;databaseName=mydatabase;applicationName=Microsoft JDBC Driver for SQL Server\";", "modifier": "", "type": "String", "declarator": "urlWithWhiteSpace =\n      \"jdbc:sqlserver://1.2.3.4;databaseName=mydatabase;applicationName=Microsoft JDBC Driver for SQL Server\"", "var_name": "urlWithWhiteSpace"}, {"original_string": "P6OptionsRepository p6OptionsRepository;", "modifier": "", "type": "P6OptionsRepository", "declarator": "p6OptionsRepository", "var_name": "p6OptionsRepository"}, {"original_string": "P6LogOptions logOptions;", "modifier": "", "type": "P6LogOptions", "declarator": "logOptions", "var_name": "logOptions"}, {"original_string": "StrictCurrentTraceContext currentTraceContext = StrictCurrentTraceContext.create();", "modifier": "", "type": "StrictCurrentTraceContext", "declarator": "currentTraceContext = StrictCurrentTraceContext.create()", "var_name": "currentTraceContext"}, {"original_string": "TestSpanHandler spans = new TestSpanHandler();", "modifier": "", "type": "TestSpanHandler", "declarator": "spans = new TestSpanHandler()", "var_name": "spans"}, {"original_string": "Tracing tracing = Tracing.newBuilder()\n      .currentTraceContext(currentTraceContext).addSpanHandler(spans).build();", "modifier": "", "type": "Tracing", "declarator": "tracing = Tracing.newBuilder()\n      .currentTraceContext(currentTraceContext).addSpanHandler(spans).build()", "var_name": "tracing"}], "file": "instrumentation/p6spy/src/test/java/brave/p6spy/TracingJdbcEventListenerTest.java"}, "test_case": {"identifier": "parseServerIpAndPort_serviceNameFromUrl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void parseServerIpAndPort_serviceNameFromUrl() throws SQLException {\n    when(connection.getMetaData()).thenReturn(metaData);\n    when(metaData.getURL()).thenReturn(urlWithServiceName);\n\n    new TracingJdbcEventListener(\"\", false, logOptions).parseServerIpAndPort(connection, span);\n\n    verify(span).remoteServiceName(\"mysql_service\");\n    verify(span).remoteIpAndPort(\"1.2.3.4\", 5555);\n  }", "signature": "void parseServerIpAndPort_serviceNameFromUrl()", "full_signature": "@Test public void parseServerIpAndPort_serviceNameFromUrl()", "class_method_signature": "TracingJdbcEventListenerTest.parseServerIpAndPort_serviceNameFromUrl()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getMetaData", "thenReturn", "when", "getURL", "parseServerIpAndPort", "remoteServiceName", "verify", "remoteIpAndPort", "verify"]}, "focal_class": {"identifier": "TracingJdbcEventListener", "superclass": "extends SimpleJdbcEventListener", "interfaces": "", "fields": [{"original_string": "private static final Pattern URL_SERVICE_NAME_FINDER =\n    Pattern.compile(\"zipkinServiceName=(\\\\w*)\");", "modifier": "private static final", "type": "Pattern", "declarator": "URL_SERVICE_NAME_FINDER =\n    Pattern.compile(\"zipkinServiceName=(\\\\w*)\")", "var_name": "URL_SERVICE_NAME_FINDER"}, {"original_string": "@Nullable final String remoteServiceName;", "modifier": "@Nullable final", "type": "String", "declarator": "remoteServiceName", "var_name": "remoteServiceName"}, {"original_string": "final boolean includeParameterValues;", "modifier": "final", "type": "boolean", "declarator": "includeParameterValues", "var_name": "includeParameterValues"}, {"original_string": "final P6LogLoadableOptions logOptions;", "modifier": "final", "type": "P6LogLoadableOptions", "declarator": "logOptions", "var_name": "logOptions"}], "methods": [{"identifier": "TracingJdbcEventListener", "parameters": "(@Nullable String remoteServiceName, boolean includeParameterValues,\n    P6LogLoadableOptions logOptions)", "modifiers": "", "return": "", "signature": " TracingJdbcEventListener(@Nullable String remoteServiceName, boolean includeParameterValues,\n    P6LogLoadableOptions logOptions)", "full_signature": "  TracingJdbcEventListener(@Nullable String remoteServiceName, boolean includeParameterValues,\n    P6LogLoadableOptions logOptions)", "class_method_signature": "TracingJdbcEventListener.TracingJdbcEventListener(@Nullable String remoteServiceName, boolean includeParameterValues,\n    P6LogLoadableOptions logOptions)", "testcase": false, "constructor": true}, {"identifier": "onBeforeAnyExecute", "parameters": "(StatementInformation info)", "modifiers": "@Override public", "return": "void", "signature": "void onBeforeAnyExecute(StatementInformation info)", "full_signature": "@Override public void onBeforeAnyExecute(StatementInformation info)", "class_method_signature": "TracingJdbcEventListener.onBeforeAnyExecute(StatementInformation info)", "testcase": false, "constructor": false}, {"identifier": "onAfterAnyExecute", "parameters": "(StatementInformation info, long elapsed, SQLException e)", "modifiers": "@Override public", "return": "void", "signature": "void onAfterAnyExecute(StatementInformation info, long elapsed, SQLException e)", "full_signature": "@Override public void onAfterAnyExecute(StatementInformation info, long elapsed, SQLException e)", "class_method_signature": "TracingJdbcEventListener.onAfterAnyExecute(StatementInformation info, long elapsed, SQLException e)", "testcase": false, "constructor": false}, {"identifier": "isLoggable", "parameters": "(String sql)", "modifiers": "", "return": "boolean", "signature": "boolean isLoggable(String sql)", "full_signature": " boolean isLoggable(String sql)", "class_method_signature": "TracingJdbcEventListener.isLoggable(String sql)", "testcase": false, "constructor": false}, {"identifier": "parseServerIpAndPort", "parameters": "(Connection connection, Span span)", "modifiers": "", "return": "void", "signature": "void parseServerIpAndPort(Connection connection, Span span)", "full_signature": " void parseServerIpAndPort(Connection connection, Span span)", "class_method_signature": "TracingJdbcEventListener.parseServerIpAndPort(Connection connection, Span span)", "testcase": false, "constructor": false}], "file": "instrumentation/p6spy/src/main/java/brave/p6spy/TracingJdbcEventListener.java"}, "focal_method": {"identifier": "parseServerIpAndPort", "parameters": "(Connection connection, Span span)", "modifiers": "", "return": "void", "body": "void parseServerIpAndPort(Connection connection, Span span) {\n    try {\n      String urlAsString = connection.getMetaData().getURL().substring(5); // strip \"jdbc:\"\n      URI url =\n        URI.create(urlAsString.replace(\" \", \"\")); // Remove all white space according to RFC 2396\n      String defaultRemoteServiceName = remoteServiceName;\n      Matcher matcher = URL_SERVICE_NAME_FINDER.matcher(url.toString());\n      if (matcher.find() && matcher.groupCount() == 1) {\n        String parsedServiceName = matcher.group(1);\n        if (parsedServiceName != null\n          && !parsedServiceName.isEmpty()) { // Do not override global service name if parsed service name is invalid\n          defaultRemoteServiceName = parsedServiceName;\n        }\n      }\n      if (defaultRemoteServiceName == null || \"\".equals(defaultRemoteServiceName)) {\n        String databaseName = connection.getCatalog();\n        if (databaseName != null && !databaseName.isEmpty()) {\n          span.remoteServiceName(databaseName);\n        }\n      } else {\n        span.remoteServiceName(defaultRemoteServiceName);\n      }\n      span.remoteIpAndPort(url.getHost(), url.getPort());\n    } catch (Exception e) {\n      // remote address is optional\n    }\n  }", "signature": "void parseServerIpAndPort(Connection connection, Span span)", "full_signature": " void parseServerIpAndPort(Connection connection, Span span)", "class_method_signature": "TracingJdbcEventListener.parseServerIpAndPort(Connection connection, Span span)", "testcase": false, "constructor": false, "invocations": ["substring", "getURL", "getMetaData", "create", "replace", "matcher", "toString", "find", "groupCount", "group", "isEmpty", "equals", "getCatalog", "isEmpty", "remoteServiceName", "remoteServiceName", "remoteIpAndPort", "getHost", "getPort"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}