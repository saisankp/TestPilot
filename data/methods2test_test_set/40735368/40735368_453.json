{"test_class": {"identifier": "GeoPackageTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "GeoPackage geopkg;", "modifier": "", "type": "GeoPackage", "declarator": "geopkg", "var_name": "geopkg"}], "file": "modules/unsupported/geopkg/src/test/java/org/geotools/geopkg/GeoPackageTest.java"}, "test_case": {"identifier": "testDeleteGeometryColumnsEntry", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeleteGeometryColumnsEntry() throws Exception {\n        FeatureEntry entry = new FeatureEntry();\n        entry.setTableName(\"points\");\n        entry.setDataType(Entry.DataType.Feature);\n        entry.setIdentifier(\"points\");\n        entry.setBounds(new ReferencedEnvelope(-180,180,-90,90, CRS.decode(\"EPSG:4326\")));\n        entry.setSrid(4326);\n        entry.setGeometryColumn(\"geom\");\n        entry.setGeometryType(Geometries.POINT);\n\n        geopkg.addGeometryColumnsEntry(entry);\n        assertTrue(doesEntryExists(GeoPackage.GEOMETRY_COLUMNS, entry));\n        geopkg.deleteGeometryColumnsEntry(entry);\n        assertFalse(doesEntryExists(GeoPackage.GEOMETRY_COLUMNS, entry));\n    }", "signature": "void testDeleteGeometryColumnsEntry()", "full_signature": "@Test public void testDeleteGeometryColumnsEntry()", "class_method_signature": "GeoPackageTest.testDeleteGeometryColumnsEntry()", "testcase": true, "constructor": false, "invocations": ["setTableName", "setDataType", "setIdentifier", "setBounds", "decode", "setSrid", "setGeometryColumn", "setGeometryType", "addGeometryColumnsEntry", "assertTrue", "doesEntryExists", "deleteGeometryColumnsEntry", "assertFalse", "doesEntryExists"]}, "focal_class": {"identifier": "GeoPackage", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Logger LOGGER = Logging.getLogger(\"org.geotools.geopkg\");", "modifier": "static final", "type": "Logger", "declarator": "LOGGER = Logging.getLogger(\"org.geotools.geopkg\")", "var_name": "LOGGER"}, {"original_string": "public static final String GEOPACKAGE_CONTENTS = \"gpkg_contents\";", "modifier": "public static final", "type": "String", "declarator": "GEOPACKAGE_CONTENTS = \"gpkg_contents\"", "var_name": "GEOPACKAGE_CONTENTS"}, {"original_string": "public static final String GEOMETRY_COLUMNS = \"gpkg_geometry_columns\";", "modifier": "public static final", "type": "String", "declarator": "GEOMETRY_COLUMNS = \"gpkg_geometry_columns\"", "var_name": "GEOMETRY_COLUMNS"}, {"original_string": "public static final String SPATIAL_REF_SYS = \"gpkg_spatial_ref_sys\";", "modifier": "public static final", "type": "String", "declarator": "SPATIAL_REF_SYS = \"gpkg_spatial_ref_sys\"", "var_name": "SPATIAL_REF_SYS"}, {"original_string": "public static final String RASTER_COLUMNS = \"gpkg_data_columns\";", "modifier": "public static final", "type": "String", "declarator": "RASTER_COLUMNS = \"gpkg_data_columns\"", "var_name": "RASTER_COLUMNS"}, {"original_string": "public static final String TILE_MATRIX_METADATA = \"gpkg_tile_matrix\";", "modifier": "public static final", "type": "String", "declarator": "TILE_MATRIX_METADATA = \"gpkg_tile_matrix\"", "var_name": "TILE_MATRIX_METADATA"}, {"original_string": "public static final String METADATA = \"gpkg_metadata\";", "modifier": "public static final", "type": "String", "declarator": "METADATA = \"gpkg_metadata\"", "var_name": "METADATA"}, {"original_string": "public static final String METADATA_REFERENCE = \"gpkg_metadata_reference\";", "modifier": "public static final", "type": "String", "declarator": "METADATA_REFERENCE = \"gpkg_metadata_reference\"", "var_name": "METADATA_REFERENCE"}, {"original_string": "public static final String TILE_MATRIX_SET = \"gpkg_tile_matrix_set\";", "modifier": "public static final", "type": "String", "declarator": "TILE_MATRIX_SET = \"gpkg_tile_matrix_set\"", "var_name": "TILE_MATRIX_SET"}, {"original_string": "public static final String DATA_COLUMN_CONSTRAINTS = \"gpkg_data_column_constraints\";", "modifier": "public static final", "type": "String", "declarator": "DATA_COLUMN_CONSTRAINTS = \"gpkg_data_column_constraints\"", "var_name": "DATA_COLUMN_CONSTRAINTS"}, {"original_string": "public static final String EXTENSIONS = \"gpkg_extensions\";", "modifier": "public static final", "type": "String", "declarator": "EXTENSIONS = \"gpkg_extensions\"", "var_name": "EXTENSIONS"}, {"original_string": "public static final String SPATIAL_INDEX = \"gpkg_spatial_index\";", "modifier": "public static final", "type": "String", "declarator": "SPATIAL_INDEX = \"gpkg_spatial_index\"", "var_name": "SPATIAL_INDEX"}, {"original_string": "static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-mm-dd'T'HH:MM:ss.SSS'Z'\");", "modifier": "static final", "type": "SimpleDateFormat", "declarator": "DATE_FORMAT = new SimpleDateFormat(\"yyyy-mm-dd'T'HH:MM:ss.SSS'Z'\")", "var_name": "DATE_FORMAT"}, {"original_string": "File file;", "modifier": "", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "final DataSource connPool;", "modifier": "final", "type": "DataSource", "declarator": "connPool", "var_name": "connPool"}, {"original_string": "volatile JDBCDataStore dataStore;", "modifier": "volatile", "type": "JDBCDataStore", "declarator": "dataStore", "var_name": "dataStore"}, {"original_string": "protected GeoPkgGeomWriter.Configuration writerConfig = new GeoPkgGeomWriter.Configuration();", "modifier": "protected", "type": "GeoPkgGeomWriter.Configuration", "declarator": "writerConfig = new GeoPkgGeomWriter.Configuration()", "var_name": "writerConfig"}], "methods": [{"identifier": "getWriterConfiguration", "parameters": "()", "modifiers": "public", "return": "GeoPkgGeomWriter.Configuration", "signature": "GeoPkgGeomWriter.Configuration getWriterConfiguration()", "full_signature": "public GeoPkgGeomWriter.Configuration getWriterConfiguration()", "class_method_signature": "GeoPackage.getWriterConfiguration()", "testcase": false, "constructor": false}, {"identifier": "GeoPackage", "parameters": "()", "modifiers": "public", "return": "", "signature": " GeoPackage()", "full_signature": "public  GeoPackage()", "class_method_signature": "GeoPackage.GeoPackage()", "testcase": false, "constructor": true}, {"identifier": "GeoPackage", "parameters": "(File file)", "modifiers": "public", "return": "", "signature": " GeoPackage(File file)", "full_signature": "public  GeoPackage(File file)", "class_method_signature": "GeoPackage.GeoPackage(File file)", "testcase": false, "constructor": true}, {"identifier": "GeoPackage", "parameters": "(File file, String user, String passwd)", "modifiers": "public", "return": "", "signature": " GeoPackage(File file, String user, String passwd)", "full_signature": "public  GeoPackage(File file, String user, String passwd)", "class_method_signature": "GeoPackage.GeoPackage(File file, String user, String passwd)", "testcase": false, "constructor": true}, {"identifier": "GeoPackage", "parameters": "(DataSource dataSource)", "modifiers": "", "return": "", "signature": " GeoPackage(DataSource dataSource)", "full_signature": "  GeoPackage(DataSource dataSource)", "class_method_signature": "GeoPackage.GeoPackage(DataSource dataSource)", "testcase": false, "constructor": true}, {"identifier": "GeoPackage", "parameters": "(JDBCDataStore dataStore)", "modifiers": "", "return": "", "signature": " GeoPackage(JDBCDataStore dataStore)", "full_signature": "  GeoPackage(JDBCDataStore dataStore)", "class_method_signature": "GeoPackage.GeoPackage(JDBCDataStore dataStore)", "testcase": false, "constructor": true}, {"identifier": "getFile", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getFile()", "full_signature": "public File getFile()", "class_method_signature": "GeoPackage.getFile()", "testcase": false, "constructor": false}, {"identifier": "getDataSource", "parameters": "()", "modifiers": "public", "return": "DataSource", "signature": "DataSource getDataSource()", "full_signature": "public DataSource getDataSource()", "class_method_signature": "GeoPackage.getDataSource()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "GeoPackage.init()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Connection cx)", "modifiers": "", "return": "void", "signature": "void init(Connection cx)", "full_signature": " void init(Connection cx)", "class_method_signature": "GeoPackage.init(Connection cx)", "testcase": false, "constructor": false}, {"identifier": "createFunctions", "parameters": "(Connection cx)", "modifiers": "", "return": "void", "signature": "void createFunctions(Connection cx)", "full_signature": " void createFunctions(Connection cx)", "class_method_signature": "GeoPackage.createFunctions(Connection cx)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "GeoPackage.close()", "testcase": false, "constructor": false}, {"identifier": "addCRS", "parameters": "(int srid)", "modifiers": "public", "return": "void", "signature": "void addCRS(int srid)", "full_signature": "public void addCRS(int srid)", "class_method_signature": "GeoPackage.addCRS(int srid)", "testcase": false, "constructor": false}, {"identifier": "addDefaultSpatialReferences", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void addDefaultSpatialReferences()", "full_signature": "protected void addDefaultSpatialReferences()", "class_method_signature": "GeoPackage.addDefaultSpatialReferences()", "testcase": false, "constructor": false}, {"identifier": "addCRS", "parameters": "(int srid, String srsName, String organization, int organizationCoordSysId, String definition, String description)", "modifiers": "public", "return": "void", "signature": "void addCRS(int srid, String srsName, String organization, int organizationCoordSysId, String definition, String description)", "full_signature": "public void addCRS(int srid, String srsName, String organization, int organizationCoordSysId, String definition, String description)", "class_method_signature": "GeoPackage.addCRS(int srid, String srsName, String organization, int organizationCoordSysId, String definition, String description)", "testcase": false, "constructor": false}, {"identifier": "addCRS", "parameters": "(CoordinateReferenceSystem crs, String auth, int srid)", "modifiers": "public", "return": "void", "signature": "void addCRS(CoordinateReferenceSystem crs, String auth, int srid)", "full_signature": "public void addCRS(CoordinateReferenceSystem crs, String auth, int srid)", "class_method_signature": "GeoPackage.addCRS(CoordinateReferenceSystem crs, String auth, int srid)", "testcase": false, "constructor": false}, {"identifier": "getCRS", "parameters": "(int srid)", "modifiers": "private", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem getCRS(int srid)", "full_signature": "private CoordinateReferenceSystem getCRS(int srid)", "class_method_signature": "GeoPackage.getCRS(int srid)", "testcase": false, "constructor": false}, {"identifier": "contents", "parameters": "()", "modifiers": "public", "return": "List<Entry>", "signature": "List<Entry> contents()", "full_signature": "public List<Entry> contents()", "class_method_signature": "GeoPackage.contents()", "testcase": false, "constructor": false}, {"identifier": "features", "parameters": "()", "modifiers": "public", "return": "List<FeatureEntry>", "signature": "List<FeatureEntry> features()", "full_signature": "public List<FeatureEntry> features()", "class_method_signature": "GeoPackage.features()", "testcase": false, "constructor": false}, {"identifier": "feature", "parameters": "(String name)", "modifiers": "public", "return": "FeatureEntry", "signature": "FeatureEntry feature(String name)", "full_signature": "public FeatureEntry feature(String name)", "class_method_signature": "GeoPackage.feature(String name)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(FeatureEntry entry, SimpleFeatureType schema)", "modifiers": "public", "return": "void", "signature": "void create(FeatureEntry entry, SimpleFeatureType schema)", "full_signature": "public void create(FeatureEntry entry, SimpleFeatureType schema)", "class_method_signature": "GeoPackage.create(FeatureEntry entry, SimpleFeatureType schema)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(FeatureEntry entry, SimpleFeatureCollection collection)", "modifiers": "public", "return": "void", "signature": "void add(FeatureEntry entry, SimpleFeatureCollection collection)", "full_signature": "public void add(FeatureEntry entry, SimpleFeatureCollection collection)", "class_method_signature": "GeoPackage.add(FeatureEntry entry, SimpleFeatureCollection collection)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(FeatureEntry entry, SimpleFeatureSource source, Filter filter)", "modifiers": "public", "return": "void", "signature": "void add(FeatureEntry entry, SimpleFeatureSource source, Filter filter)", "full_signature": "public void add(FeatureEntry entry, SimpleFeatureSource source, Filter filter)", "class_method_signature": "GeoPackage.add(FeatureEntry entry, SimpleFeatureSource source, Filter filter)", "testcase": false, "constructor": false}, {"identifier": "writer", "parameters": "(FeatureEntry entry, boolean append, Filter filter, \n        Transaction tx)", "modifiers": "public", "return": "SimpleFeatureWriter", "signature": "SimpleFeatureWriter writer(FeatureEntry entry, boolean append, Filter filter, \n        Transaction tx)", "full_signature": "public SimpleFeatureWriter writer(FeatureEntry entry, boolean append, Filter filter, \n        Transaction tx)", "class_method_signature": "GeoPackage.writer(FeatureEntry entry, boolean append, Filter filter, \n        Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "reader", "parameters": "(FeatureEntry entry, Filter filter, Transaction tx)", "modifiers": "public", "return": "SimpleFeatureReader", "signature": "SimpleFeatureReader reader(FeatureEntry entry, Filter filter, Transaction tx)", "full_signature": "public SimpleFeatureReader reader(FeatureEntry entry, Filter filter, Transaction tx)", "class_method_signature": "GeoPackage.reader(FeatureEntry entry, Filter filter, Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "findSRID", "parameters": "(SimpleFeatureType schema)", "modifiers": "static", "return": "Integer", "signature": "Integer findSRID(SimpleFeatureType schema)", "full_signature": "static Integer findSRID(SimpleFeatureType schema)", "class_method_signature": "GeoPackage.findSRID(SimpleFeatureType schema)", "testcase": false, "constructor": false}, {"identifier": "findGeometryColumn", "parameters": "(SimpleFeatureType schema)", "modifiers": "static", "return": "String", "signature": "String findGeometryColumn(SimpleFeatureType schema)", "full_signature": "static String findGeometryColumn(SimpleFeatureType schema)", "class_method_signature": "GeoPackage.findGeometryColumn(SimpleFeatureType schema)", "testcase": false, "constructor": false}, {"identifier": "findGeometryType", "parameters": "(SimpleFeatureType schema)", "modifiers": "static", "return": "Geometries", "signature": "Geometries findGeometryType(SimpleFeatureType schema)", "full_signature": "static Geometries findGeometryType(SimpleFeatureType schema)", "class_method_signature": "GeoPackage.findGeometryType(SimpleFeatureType schema)", "testcase": false, "constructor": false}, {"identifier": "findGeometryDescriptor", "parameters": "(SimpleFeatureType schema)", "modifiers": "static", "return": "GeometryDescriptor", "signature": "GeometryDescriptor findGeometryDescriptor(SimpleFeatureType schema)", "full_signature": "static GeometryDescriptor findGeometryDescriptor(SimpleFeatureType schema)", "class_method_signature": "GeoPackage.findGeometryDescriptor(SimpleFeatureType schema)", "testcase": false, "constructor": false}, {"identifier": "createFeatureEntry", "parameters": "(ResultSet rs)", "modifiers": "", "return": "FeatureEntry", "signature": "FeatureEntry createFeatureEntry(ResultSet rs)", "full_signature": " FeatureEntry createFeatureEntry(ResultSet rs)", "class_method_signature": "GeoPackage.createFeatureEntry(ResultSet rs)", "testcase": false, "constructor": false}, {"identifier": "addGeoPackageContentsEntry", "parameters": "(Entry e)", "modifiers": "", "return": "void", "signature": "void addGeoPackageContentsEntry(Entry e)", "full_signature": " void addGeoPackageContentsEntry(Entry e)", "class_method_signature": "GeoPackage.addGeoPackageContentsEntry(Entry e)", "testcase": false, "constructor": false}, {"identifier": "deleteGeoPackageContentsEntry", "parameters": "(Entry e)", "modifiers": "", "return": "void", "signature": "void deleteGeoPackageContentsEntry(Entry e)", "full_signature": " void deleteGeoPackageContentsEntry(Entry e)", "class_method_signature": "GeoPackage.deleteGeoPackageContentsEntry(Entry e)", "testcase": false, "constructor": false}, {"identifier": "addGeometryColumnsEntry", "parameters": "(FeatureEntry e)", "modifiers": "", "return": "void", "signature": "void addGeometryColumnsEntry(FeatureEntry e)", "full_signature": " void addGeometryColumnsEntry(FeatureEntry e)", "class_method_signature": "GeoPackage.addGeometryColumnsEntry(FeatureEntry e)", "testcase": false, "constructor": false}, {"identifier": "deleteGeometryColumnsEntry", "parameters": "(FeatureEntry e)", "modifiers": "", "return": "void", "signature": "void deleteGeometryColumnsEntry(FeatureEntry e)", "full_signature": " void deleteGeometryColumnsEntry(FeatureEntry e)", "class_method_signature": "GeoPackage.deleteGeometryColumnsEntry(FeatureEntry e)", "testcase": false, "constructor": false}, {"identifier": "createSpatialIndex", "parameters": "(FeatureEntry e)", "modifiers": "public", "return": "void", "signature": "void createSpatialIndex(FeatureEntry e)", "full_signature": "public void createSpatialIndex(FeatureEntry e)", "class_method_signature": "GeoPackage.createSpatialIndex(FeatureEntry e)", "testcase": false, "constructor": false}, {"identifier": "rasters", "parameters": "()", "modifiers": "public", "return": "List<RasterEntry>", "signature": "List<RasterEntry> rasters()", "full_signature": "public List<RasterEntry> rasters()", "class_method_signature": "GeoPackage.rasters()", "testcase": false, "constructor": false}, {"identifier": "raster", "parameters": "(String name)", "modifiers": "public", "return": "RasterEntry", "signature": "RasterEntry raster(String name)", "full_signature": "public RasterEntry raster(String name)", "class_method_signature": "GeoPackage.raster(String name)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(RasterEntry entry, GridCoverage2D raster, AbstractGridFormat format)", "modifiers": "public", "return": "void", "signature": "void add(RasterEntry entry, GridCoverage2D raster, AbstractGridFormat format)", "full_signature": "public void add(RasterEntry entry, GridCoverage2D raster, AbstractGridFormat format)", "class_method_signature": "GeoPackage.add(RasterEntry entry, GridCoverage2D raster, AbstractGridFormat format)", "testcase": false, "constructor": false}, {"identifier": "reader", "parameters": "(RasterEntry entry, AbstractGridFormat format)", "modifiers": "public", "return": "GridCoverageReader", "signature": "GridCoverageReader reader(RasterEntry entry, AbstractGridFormat format)", "full_signature": "public GridCoverageReader reader(RasterEntry entry, AbstractGridFormat format)", "class_method_signature": "GeoPackage.reader(RasterEntry entry, AbstractGridFormat format)", "testcase": false, "constructor": false}, {"identifier": "findSRID", "parameters": "(GridCoverage2D raster)", "modifiers": "static", "return": "Integer", "signature": "Integer findSRID(GridCoverage2D raster)", "full_signature": "static Integer findSRID(GridCoverage2D raster)", "class_method_signature": "GeoPackage.findSRID(GridCoverage2D raster)", "testcase": false, "constructor": false}, {"identifier": "findBounds", "parameters": "(GridCoverage2D raster)", "modifiers": "static", "return": "ReferencedEnvelope", "signature": "ReferencedEnvelope findBounds(GridCoverage2D raster)", "full_signature": "static ReferencedEnvelope findBounds(GridCoverage2D raster)", "class_method_signature": "GeoPackage.findBounds(GridCoverage2D raster)", "testcase": false, "constructor": false}, {"identifier": "toGeneralEnvelope", "parameters": "(ReferencedEnvelope e)", "modifiers": "static", "return": "GeneralEnvelope", "signature": "GeneralEnvelope toGeneralEnvelope(ReferencedEnvelope e)", "full_signature": "static GeneralEnvelope toGeneralEnvelope(ReferencedEnvelope e)", "class_method_signature": "GeoPackage.toGeneralEnvelope(ReferencedEnvelope e)", "testcase": false, "constructor": false}, {"identifier": "createRasterEntry", "parameters": "(ResultSet rs)", "modifiers": "", "return": "RasterEntry", "signature": "RasterEntry createRasterEntry(ResultSet rs)", "full_signature": " RasterEntry createRasterEntry(ResultSet rs)", "class_method_signature": "GeoPackage.createRasterEntry(ResultSet rs)", "testcase": false, "constructor": false}, {"identifier": "addRasterColumnsEntry", "parameters": "(RasterEntry e)", "modifiers": "", "return": "void", "signature": "void addRasterColumnsEntry(RasterEntry e)", "full_signature": " void addRasterColumnsEntry(RasterEntry e)", "class_method_signature": "GeoPackage.addRasterColumnsEntry(RasterEntry e)", "testcase": false, "constructor": false}, {"identifier": "tiles", "parameters": "()", "modifiers": "public", "return": "List<TileEntry>", "signature": "List<TileEntry> tiles()", "full_signature": "public List<TileEntry> tiles()", "class_method_signature": "GeoPackage.tiles()", "testcase": false, "constructor": false}, {"identifier": "tile", "parameters": "(String name)", "modifiers": "public", "return": "TileEntry", "signature": "TileEntry tile(String name)", "full_signature": "public TileEntry tile(String name)", "class_method_signature": "GeoPackage.tile(String name)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(TileEntry entry)", "modifiers": "public", "return": "void", "signature": "void create(TileEntry entry)", "full_signature": "public void create(TileEntry entry)", "class_method_signature": "GeoPackage.create(TileEntry entry)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(TileEntry entry, Tile tile)", "modifiers": "public", "return": "void", "signature": "void add(TileEntry entry, Tile tile)", "full_signature": "public void add(TileEntry entry, Tile tile)", "class_method_signature": "GeoPackage.add(TileEntry entry, Tile tile)", "testcase": false, "constructor": false}, {"identifier": "reader", "parameters": "(TileEntry entry, Integer lowZoom, Integer highZoom, \n        Integer lowCol, Integer highCol, Integer lowRow, Integer highRow)", "modifiers": "public", "return": "TileReader", "signature": "TileReader reader(TileEntry entry, Integer lowZoom, Integer highZoom, \n        Integer lowCol, Integer highCol, Integer lowRow, Integer highRow)", "full_signature": "public TileReader reader(TileEntry entry, Integer lowZoom, Integer highZoom, \n        Integer lowCol, Integer highCol, Integer lowRow, Integer highRow)", "class_method_signature": "GeoPackage.reader(TileEntry entry, Integer lowZoom, Integer highZoom, \n        Integer lowCol, Integer highCol, Integer lowRow, Integer highRow)", "testcase": false, "constructor": false}, {"identifier": "getSpatialIndexName", "parameters": "(FeatureEntry entry)", "modifiers": "protected", "return": "String", "signature": "String getSpatialIndexName(FeatureEntry entry)", "full_signature": "protected String getSpatialIndexName(FeatureEntry entry)", "class_method_signature": "GeoPackage.getSpatialIndexName(FeatureEntry entry)", "testcase": false, "constructor": false}, {"identifier": "hasSpatialIndex", "parameters": "(FeatureEntry entry)", "modifiers": "public", "return": "boolean", "signature": "boolean hasSpatialIndex(FeatureEntry entry)", "full_signature": "public boolean hasSpatialIndex(FeatureEntry entry)", "class_method_signature": "GeoPackage.hasSpatialIndex(FeatureEntry entry)", "testcase": false, "constructor": false}, {"identifier": "searchSpatialIndex", "parameters": "(FeatureEntry entry, Double minX, Double minY, Double maxX, Double maxY)", "modifiers": "public", "return": "Set<Identifier>", "signature": "Set<Identifier> searchSpatialIndex(FeatureEntry entry, Double minX, Double minY, Double maxX, Double maxY)", "full_signature": "public Set<Identifier> searchSpatialIndex(FeatureEntry entry, Double minX, Double minY, Double maxX, Double maxY)", "class_method_signature": "GeoPackage.searchSpatialIndex(FeatureEntry entry, Double minX, Double minY, Double maxX, Double maxY)", "testcase": false, "constructor": false}, {"identifier": "getTileBound", "parameters": "(TileEntry entry, int zoom, boolean isMax, boolean isRow)", "modifiers": "public", "return": "int", "signature": "int getTileBound(TileEntry entry, int zoom, boolean isMax, boolean isRow)", "full_signature": "public int getTileBound(TileEntry entry, int zoom, boolean isMax, boolean isRow)", "class_method_signature": "GeoPackage.getTileBound(TileEntry entry, int zoom, boolean isMax, boolean isRow)", "testcase": false, "constructor": false}, {"identifier": "createTileEntry", "parameters": "(ResultSet rs, Connection cx)", "modifiers": "static", "return": "TileEntry", "signature": "TileEntry createTileEntry(ResultSet rs, Connection cx)", "full_signature": "static TileEntry createTileEntry(ResultSet rs, Connection cx)", "class_method_signature": "GeoPackage.createTileEntry(ResultSet rs, Connection cx)", "testcase": false, "constructor": false}, {"identifier": "findSRID", "parameters": "(ReferencedEnvelope e)", "modifiers": "static", "return": "Integer", "signature": "Integer findSRID(ReferencedEnvelope e)", "full_signature": "static Integer findSRID(ReferencedEnvelope e)", "class_method_signature": "GeoPackage.findSRID(ReferencedEnvelope e)", "testcase": false, "constructor": false}, {"identifier": "initEntry", "parameters": "(Entry e, ResultSet rs)", "modifiers": "static", "return": "void", "signature": "void initEntry(Entry e, ResultSet rs)", "full_signature": "static void initEntry(Entry e, ResultSet rs)", "class_method_signature": "GeoPackage.initEntry(Entry e, ResultSet rs)", "testcase": false, "constructor": false}, {"identifier": "runSQL", "parameters": "(String sql, Connection cx)", "modifiers": "static", "return": "void", "signature": "void runSQL(String sql, Connection cx)", "full_signature": "static void runSQL(String sql, Connection cx)", "class_method_signature": "GeoPackage.runSQL(String sql, Connection cx)", "testcase": false, "constructor": false}, {"identifier": "runScript", "parameters": "(String filename, Connection cx)", "modifiers": "", "return": "void", "signature": "void runScript(String filename, Connection cx)", "full_signature": " void runScript(String filename, Connection cx)", "class_method_signature": "GeoPackage.runScript(String filename, Connection cx)", "testcase": false, "constructor": false}, {"identifier": "runScript", "parameters": "(String filename, Connection cx, Map<String, String> properties)", "modifiers": "", "return": "void", "signature": "void runScript(String filename, Connection cx, Map<String, String> properties)", "full_signature": " void runScript(String filename, Connection cx, Map<String, String> properties)", "class_method_signature": "GeoPackage.runScript(String filename, Connection cx, Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(Connection cx)", "modifiers": "private static", "return": "void", "signature": "void close(Connection cx)", "full_signature": "private static void close(Connection cx)", "class_method_signature": "GeoPackage.close(Connection cx)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(Statement  st)", "modifiers": "private static", "return": "void", "signature": "void close(Statement  st)", "full_signature": "private static void close(Statement  st)", "class_method_signature": "GeoPackage.close(Statement  st)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(ResultSet  rs)", "modifiers": "private static", "return": "void", "signature": "void close(ResultSet  rs)", "full_signature": "private static void close(ResultSet  rs)", "class_method_signature": "GeoPackage.close(ResultSet  rs)", "testcase": false, "constructor": false}, {"identifier": "dataStore", "parameters": "()", "modifiers": "", "return": "JDBCDataStore", "signature": "JDBCDataStore dataStore()", "full_signature": " JDBCDataStore dataStore()", "class_method_signature": "GeoPackage.dataStore()", "testcase": false, "constructor": false}, {"identifier": "createDataStore", "parameters": "()", "modifiers": "", "return": "JDBCDataStore", "signature": "JDBCDataStore createDataStore()", "full_signature": " JDBCDataStore createDataStore()", "class_method_signature": "GeoPackage.createDataStore()", "testcase": false, "constructor": false}], "file": "modules/unsupported/geopkg/src/main/java/org/geotools/geopkg/GeoPackage.java"}, "focal_method": {"identifier": "deleteGeometryColumnsEntry", "parameters": "(FeatureEntry e)", "modifiers": "", "return": "void", "body": "void deleteGeometryColumnsEntry(FeatureEntry e) throws IOException {\n        String sql = format(\"DELETE FROM %s WHERE table_name = ?\", GEOMETRY_COLUMNS);\n        try {\n            Connection cx = connPool.getConnection();\n            try {\n                PreparedStatement ps = prepare(cx, sql)\n                        .set(e.getTableName())\n                        .log(Level.FINE)\n                        .statement();\n                try {\n                    ps.execute();\n                }\n                finally {\n                    close(ps);\n                }\n            }\n            finally {\n                close(cx);\n            }\n        }\n        catch(SQLException ex) {\n            throw new IOException(ex);\n        }\n    }", "signature": "void deleteGeometryColumnsEntry(FeatureEntry e)", "full_signature": " void deleteGeometryColumnsEntry(FeatureEntry e)", "class_method_signature": "GeoPackage.deleteGeometryColumnsEntry(FeatureEntry e)", "testcase": false, "constructor": false, "invocations": ["format", "getConnection", "statement", "log", "set", "prepare", "getTableName", "execute", "close", "close"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}