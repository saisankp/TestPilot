{"test_class": {"identifier": "OIDValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final OIDValidator validator = new OIDValidator();", "modifier": "private static final", "type": "OIDValidator", "declarator": "validator = new OIDValidator()", "var_name": "validator"}], "file": "commons/ihe/xds/src/test/java/org/openehealth/ipf/commons/ihe/xds/core/validate/OIDValidatorTest.java"}, "test_case": {"identifier": "testValidateGoodCases", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateGoodCases() throws XDSMetaDataException {\n        validator.validate(\"1.2323\");\n        validator.validate(\"1.0.2323\");\n        validator.validate(\"1.23.45.67.89.1.23.45.67.89.1.23.45.67.89.1.23.45.67.89.1.23.456\");\n    }", "signature": "void testValidateGoodCases()", "full_signature": "@Test public void testValidateGoodCases()", "class_method_signature": "OIDValidatorTest.testValidateGoodCases()", "testcase": true, "constructor": false, "invocations": ["validate", "validate", "validate"]}, "focal_class": {"identifier": "OIDValidator", "superclass": "", "interfaces": "implements ValueValidator", "fields": [{"original_string": "private static final Pattern OID_PATTERN =\n            Pattern.compile(\"[1-9][0-9]*(\\\\.(0|([1-9][0-9]*)))+\");", "modifier": "private static final", "type": "Pattern", "declarator": "OID_PATTERN =\n            Pattern.compile(\"[1-9][0-9]*(\\\\.(0|([1-9][0-9]*)))+\")", "var_name": "OID_PATTERN"}], "methods": [{"identifier": "validate", "parameters": "(String oid)", "modifiers": "@Override public", "return": "void", "signature": "void validate(String oid)", "full_signature": "@Override public void validate(String oid)", "class_method_signature": "OIDValidator.validate(String oid)", "testcase": false, "constructor": false}], "file": "commons/ihe/xds/src/main/java/org/openehealth/ipf/commons/ihe/xds/core/validate/OIDValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(String oid)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(String oid) throws XDSMetaDataException {\n        notNull(oid, \"oid cannot be null\");\n        \n        metaDataAssert(oid.length() <= 64, OID_TOO_LONG, oid);\n        metaDataAssert(OID_PATTERN.matcher(oid).matches(), INVALID_OID, oid);\n    }", "signature": "void validate(String oid)", "full_signature": "@Override public void validate(String oid)", "class_method_signature": "OIDValidator.validate(String oid)", "testcase": false, "constructor": false, "invocations": ["notNull", "metaDataAssert", "length", "metaDataAssert", "matches", "matcher"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}