{"test_class": {"identifier": "SVNTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SVN svn;", "modifier": "private", "type": "SVN", "declarator": "svn", "var_name": "svn"}, {"original_string": "private TimeZone originalTimeZone;", "modifier": "private", "type": "TimeZone", "declarator": "originalTimeZone", "var_name": "originalTimeZone"}], "file": "medium/src/test/java/net/sourceforge/cruisecontrol/sourcecontrols/SVNTest.java"}, "test_case": {"identifier": "testBuildHistoryCommand", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildHistoryCommand() throws CruiseControlException {\n        svn.setLocalWorkingCopy(\".\");\n\n        Date checkTime = new Date();\n        long tenMinutes = 10 * 60 * 1000;\n        Date lastBuild = new Date(checkTime.getTime() - tenMinutes);\n\n        String[] expectedCmd = new String[] { \"svn\", \"log\", \"--non-interactive\", \"--xml\", \"-v\", \"-r\",\n                SVN.formatSVNDate(lastBuild, false) + \":\" + SVN.formatSVNDate(checkTime, false) };\n        String[] actualCmd = svn.buildHistoryCommand(SVN.formatSVNDate(lastBuild, false),\n                SVN.formatSVNDate(checkTime, false)).getCommandline();\n        assertThat(actualCmd, equalTo(expectedCmd));\n\n        expectedCmd = new String[] { \"svn\", \"log\", \"--non-interactive\", \"--xml\", \"-v\", \"-r\",\n                SVN.formatSVNDate(lastBuild, false) + \":\" + SVN.formatSVNDate(checkTime, false), \"external/path\" };\n        actualCmd = svn.buildHistoryCommand(SVN.formatSVNDate(lastBuild, false), SVN.formatSVNDate(checkTime, false),\n                \"external/path\").getCommandline();\n        assertThat(actualCmd, equalTo(expectedCmd));\n\n        svn.setRepositoryLocation(\"http://svn.collab.net/repos/svn\");\n\n        expectedCmd = new String[] { \"svn\", \"log\", \"--non-interactive\", \"--xml\", \"-v\", \"-r\",\n                SVN.formatSVNDate(lastBuild, false) + \":\" + SVN.formatSVNDate(checkTime, false),\n                \"http://svn.collab.net/repos/svn\" };\n        actualCmd = svn.buildHistoryCommand(SVN.formatSVNDate(lastBuild, false), SVN.formatSVNDate(checkTime, false))\n                .getCommandline();\n        assertThat(actualCmd, equalTo(expectedCmd));\n\n        expectedCmd = new String[] { \"svn\", \"log\", \"--non-interactive\", \"--xml\", \"-v\", \"-r\",\n                SVN.formatSVNDate(lastBuild, false) + \":\" + SVN.formatSVNDate(checkTime, false),\n                \"http://svn.collab.net/repos/external\" };\n        actualCmd = svn.buildHistoryCommand(SVN.formatSVNDate(lastBuild, false), SVN.formatSVNDate(checkTime, false),\n                \"http://svn.collab.net/repos/external\").getCommandline();\n        assertThat(actualCmd, equalTo(expectedCmd));\n\n        svn.setUsername(\"lee\");\n        svn.setPassword(\"secret\");\n\n        expectedCmd = new String[] { \"svn\", \"log\", \"--non-interactive\", \"--xml\", \"-v\", \"-r\",\n                SVN.formatSVNDate(lastBuild, false) + \":\" + SVN.formatSVNDate(checkTime, false), \"--no-auth-cache\",\n                \"--username\", \"lee\", \"--password\", \"secret\", \"http://svn.collab.net/repos/svn\" };\n        actualCmd = svn.buildHistoryCommand(SVN.formatSVNDate(lastBuild, false), SVN.formatSVNDate(checkTime, false))\n                .getCommandline();\n        assertThat(actualCmd, equalTo(expectedCmd));\n\n        svn.setUsername(null);\n        svn.setPassword(null);\n        final String testConfDir = \"myConfigDir\";\n        svn.setConfigDir(testConfDir);\n        expectedCmd = new String[] { \"svn\", \"log\", \"--non-interactive\", \"--xml\", \"-v\", \"-r\",\n                SVN.formatSVNDate(lastBuild, false) + \":\" + SVN.formatSVNDate(checkTime, false), \"--config-dir\",\n                testConfDir, \"http://svn.collab.net/repos/svn\" };\n        actualCmd = svn.buildHistoryCommand(SVN.formatSVNDate(lastBuild, false), SVN.formatSVNDate(checkTime, false))\n                .getCommandline();\n        assertThat(actualCmd, equalTo(expectedCmd));\n    }", "signature": "void testBuildHistoryCommand()", "full_signature": "@Test public void testBuildHistoryCommand()", "class_method_signature": "SVNTest.testBuildHistoryCommand()", "testcase": true, "constructor": false, "invocations": ["setLocalWorkingCopy", "getTime", "formatSVNDate", "formatSVNDate", "getCommandline", "buildHistoryCommand", "formatSVNDate", "formatSVNDate", "assertThat", "equalTo", "formatSVNDate", "formatSVNDate", "getCommandline", "buildHistoryCommand", "formatSVNDate", "formatSVNDate", "assertThat", "equalTo", "setRepositoryLocation", "formatSVNDate", "formatSVNDate", "getCommandline", "buildHistoryCommand", "formatSVNDate", "formatSVNDate", "assertThat", "equalTo", "formatSVNDate", "formatSVNDate", "getCommandline", "buildHistoryCommand", "formatSVNDate", "formatSVNDate", "assertThat", "equalTo", "setUsername", "setPassword", "formatSVNDate", "formatSVNDate", "getCommandline", "buildHistoryCommand", "formatSVNDate", "formatSVNDate", "assertThat", "equalTo", "setUsername", "setPassword", "setConfigDir", "formatSVNDate", "formatSVNDate", "getCommandline", "buildHistoryCommand", "formatSVNDate", "formatSVNDate", "assertThat", "equalTo"]}, "focal_class": {"identifier": "SVN", "superclass": "", "interfaces": "implements SourceControl", "fields": [{"original_string": "private static final long serialVersionUID = -144583234813298598L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -144583234813298598L", "var_name": "serialVersionUID"}, {"original_string": "private static final Logger LOG = Logger.getLogger(SVN.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(SVN.class)", "var_name": "LOG"}, {"original_string": "private static final String SVN_DATE_FORMAT_IN = \"yyyy-MM-dd'T'HH:mm:ss'Z'\";", "modifier": "private static final", "type": "String", "declarator": "SVN_DATE_FORMAT_IN = \"yyyy-MM-dd'T'HH:mm:ss'Z'\"", "var_name": "SVN_DATE_FORMAT_IN"}, {"original_string": "private static final String SVN_DATE_FORMAT_OUT = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";", "modifier": "private static final", "type": "String", "declarator": "SVN_DATE_FORMAT_OUT = \"yyyy-MM-dd'T'HH:mm:ss.SSS\"", "var_name": "SVN_DATE_FORMAT_OUT"}, {"original_string": "private final SourceControlProperties properties = new SourceControlProperties();", "modifier": "private final", "type": "SourceControlProperties", "declarator": "properties = new SourceControlProperties()", "var_name": "properties"}, {"original_string": "private String repositoryLocation;", "modifier": "private", "type": "String", "declarator": "repositoryLocation", "var_name": "repositoryLocation"}, {"original_string": "private String localWorkingCopy;", "modifier": "private", "type": "String", "declarator": "localWorkingCopy", "var_name": "localWorkingCopy"}, {"original_string": "private String userName;", "modifier": "private", "type": "String", "declarator": "userName", "var_name": "userName"}, {"original_string": "private String password;", "modifier": "private", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "private String configDir;", "modifier": "private", "type": "String", "declarator": "configDir", "var_name": "configDir"}, {"original_string": "private boolean checkExternals = false;", "modifier": "private", "type": "boolean", "declarator": "checkExternals = false", "var_name": "checkExternals"}, {"original_string": "private boolean useLocalRevision = false;", "modifier": "private", "type": "boolean", "declarator": "useLocalRevision = false", "var_name": "useLocalRevision"}], "methods": [{"identifier": "getProperties", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getProperties()", "full_signature": "public Map<String, String> getProperties()", "class_method_signature": "SVN.getProperties()", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(String property)", "modifiers": "public", "return": "void", "signature": "void setProperty(String property)", "full_signature": "public void setProperty(String property)", "class_method_signature": "SVN.setProperty(String property)", "testcase": false, "constructor": false}, {"identifier": "setPropertyOnDelete", "parameters": "(String propertyOnDelete)", "modifiers": "public", "return": "void", "signature": "void setPropertyOnDelete(String propertyOnDelete)", "full_signature": "public void setPropertyOnDelete(String propertyOnDelete)", "class_method_signature": "SVN.setPropertyOnDelete(String propertyOnDelete)", "testcase": false, "constructor": false}, {"identifier": "setConfigDir", "parameters": "(String configDir)", "modifiers": "public", "return": "void", "signature": "void setConfigDir(String configDir)", "full_signature": "public void setConfigDir(String configDir)", "class_method_signature": "SVN.setConfigDir(String configDir)", "testcase": false, "constructor": false}, {"identifier": "setCheckExternals", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setCheckExternals(boolean value)", "full_signature": "public void setCheckExternals(boolean value)", "class_method_signature": "SVN.setCheckExternals(boolean value)", "testcase": false, "constructor": false}, {"identifier": "setRepositoryLocation", "parameters": "(String repositoryLocation)", "modifiers": "public", "return": "void", "signature": "void setRepositoryLocation(String repositoryLocation)", "full_signature": "public void setRepositoryLocation(String repositoryLocation)", "class_method_signature": "SVN.setRepositoryLocation(String repositoryLocation)", "testcase": false, "constructor": false}, {"identifier": "setLocalWorkingCopy", "parameters": "(String localWorkingCopy)", "modifiers": "public", "return": "void", "signature": "void setLocalWorkingCopy(String localWorkingCopy)", "full_signature": "public void setLocalWorkingCopy(String localWorkingCopy)", "class_method_signature": "SVN.setLocalWorkingCopy(String localWorkingCopy)", "testcase": false, "constructor": false}, {"identifier": "setUsername", "parameters": "(String userName)", "modifiers": "public", "return": "void", "signature": "void setUsername(String userName)", "full_signature": "public void setUsername(String userName)", "class_method_signature": "SVN.setUsername(String userName)", "testcase": false, "constructor": false}, {"identifier": "setPassword", "parameters": "(String password)", "modifiers": "public", "return": "void", "signature": "void setPassword(String password)", "full_signature": "public void setPassword(String password)", "class_method_signature": "SVN.setPassword(String password)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void validate()", "full_signature": "public void validate()", "class_method_signature": "SVN.validate()", "testcase": false, "constructor": false}, {"identifier": "getModifications", "parameters": "(final Date lastBuild, final Date now)", "modifiers": "public", "return": "List<Modification>", "signature": "List<Modification> getModifications(final Date lastBuild, final Date now)", "full_signature": "public List<Modification> getModifications(final Date lastBuild, final Date now)", "class_method_signature": "SVN.getModifications(final Date lastBuild, final Date now)", "testcase": false, "constructor": false}, {"identifier": "buildPropgetCommand", "parameters": "()", "modifiers": "", "return": "Commandline", "signature": "Commandline buildPropgetCommand()", "full_signature": " Commandline buildPropgetCommand()", "class_method_signature": "SVN.buildPropgetCommand()", "testcase": false, "constructor": false}, {"identifier": "buildInfoCommand", "parameters": "(String path)", "modifiers": "", "return": "Commandline", "signature": "Commandline buildInfoCommand(String path)", "full_signature": " Commandline buildInfoCommand(String path)", "class_method_signature": "SVN.buildInfoCommand(String path)", "testcase": false, "constructor": false}, {"identifier": "buildHistoryCommand", "parameters": "(String lastBuild, String checkTime)", "modifiers": "", "return": "Commandline", "signature": "Commandline buildHistoryCommand(String lastBuild, String checkTime)", "full_signature": " Commandline buildHistoryCommand(String lastBuild, String checkTime)", "class_method_signature": "SVN.buildHistoryCommand(String lastBuild, String checkTime)", "testcase": false, "constructor": false}, {"identifier": "buildHistoryCommand", "parameters": "(String lastBuild, String checkTime, String path)", "modifiers": "", "return": "Commandline", "signature": "Commandline buildHistoryCommand(String lastBuild, String checkTime, String path)", "full_signature": " Commandline buildHistoryCommand(String lastBuild, String checkTime, String path)", "class_method_signature": "SVN.buildHistoryCommand(String lastBuild, String checkTime, String path)", "testcase": false, "constructor": false}, {"identifier": "formatSVNDate", "parameters": "(Date date)", "modifiers": "static", "return": "String", "signature": "String formatSVNDate(Date date)", "full_signature": "static String formatSVNDate(Date date)", "class_method_signature": "SVN.formatSVNDate(Date date)", "testcase": false, "constructor": false}, {"identifier": "formatSVNDate", "parameters": "(Date lastBuild, boolean isWindows)", "modifiers": "static", "return": "String", "signature": "String formatSVNDate(Date lastBuild, boolean isWindows)", "full_signature": "static String formatSVNDate(Date lastBuild, boolean isWindows)", "class_method_signature": "SVN.formatSVNDate(Date lastBuild, boolean isWindows)", "testcase": false, "constructor": false}, {"identifier": "execPropgetCommand", "parameters": "(Commandline command)", "modifiers": "private static", "return": "HashMap<String, List<String[]>>", "signature": "HashMap<String, List<String[]>> execPropgetCommand(Commandline command)", "full_signature": "private static HashMap<String, List<String[]>> execPropgetCommand(Commandline command)", "class_method_signature": "SVN.execPropgetCommand(Commandline command)", "testcase": false, "constructor": false}, {"identifier": "parsePropgetReader", "parameters": "(final BufferedReader reader, final Map<String, List<String[]>> directories)", "modifiers": "static", "return": "void", "signature": "void parsePropgetReader(final BufferedReader reader, final Map<String, List<String[]>> directories)", "full_signature": "static void parsePropgetReader(final BufferedReader reader, final Map<String, List<String[]>> directories)", "class_method_signature": "SVN.parsePropgetReader(final BufferedReader reader, final Map<String, List<String[]>> directories)", "testcase": false, "constructor": false}, {"identifier": "execHistoryCommand", "parameters": "(final Commandline command, final Date lastBuild,\n                                    final String externalPath)", "modifiers": "private static", "return": "List<Modification>", "signature": "List<Modification> execHistoryCommand(final Commandline command, final Date lastBuild,\n                                    final String externalPath)", "full_signature": "private static List<Modification> execHistoryCommand(final Commandline command, final Date lastBuild,\n                                    final String externalPath)", "class_method_signature": "SVN.execHistoryCommand(final Commandline command, final Date lastBuild,\n                                    final String externalPath)", "testcase": false, "constructor": false}, {"identifier": "execInfoCommand", "parameters": "(final Commandline command)", "modifiers": "private", "return": "String", "signature": "String execInfoCommand(final Commandline command)", "full_signature": "private String execInfoCommand(final Commandline command)", "class_method_signature": "SVN.execInfoCommand(final Commandline command)", "testcase": false, "constructor": false}, {"identifier": "logErrorStream", "parameters": "(Process p)", "modifiers": "private static", "return": "Thread", "signature": "Thread logErrorStream(Process p)", "full_signature": "private static Thread logErrorStream(Process p)", "class_method_signature": "SVN.logErrorStream(Process p)", "testcase": false, "constructor": false}, {"identifier": "fillPropertiesIfNeeded", "parameters": "(final List<Modification> modifications)", "modifiers": "", "return": "void", "signature": "void fillPropertiesIfNeeded(final List<Modification> modifications)", "full_signature": " void fillPropertiesIfNeeded(final List<Modification> modifications)", "class_method_signature": "SVN.fillPropertiesIfNeeded(final List<Modification> modifications)", "testcase": false, "constructor": false}, {"identifier": "getOutDateFormatter", "parameters": "()", "modifiers": "public static", "return": "DateFormat", "signature": "DateFormat getOutDateFormatter()", "full_signature": "public static DateFormat getOutDateFormatter()", "class_method_signature": "SVN.getOutDateFormatter()", "testcase": false, "constructor": false}, {"identifier": "setUseLocalRevision", "parameters": "(boolean useLocalRevision)", "modifiers": "public", "return": "void", "signature": "void setUseLocalRevision(boolean useLocalRevision)", "full_signature": "public void setUseLocalRevision(boolean useLocalRevision)", "class_method_signature": "SVN.setUseLocalRevision(boolean useLocalRevision)", "testcase": false, "constructor": false}], "file": "medium/src/main/java/net/sourceforge/cruisecontrol/sourcecontrols/SVN.java"}, "focal_method": {"identifier": "buildHistoryCommand", "parameters": "(String lastBuild, String checkTime)", "modifiers": "", "return": "Commandline", "body": "Commandline buildHistoryCommand(String lastBuild, String checkTime)\n        throws CruiseControlException {\n        return buildHistoryCommand(lastBuild, checkTime, null);\n    }", "signature": "Commandline buildHistoryCommand(String lastBuild, String checkTime)", "full_signature": " Commandline buildHistoryCommand(String lastBuild, String checkTime)", "class_method_signature": "SVN.buildHistoryCommand(String lastBuild, String checkTime)", "testcase": false, "constructor": false, "invocations": ["buildHistoryCommand"]}, "repository": {"repo_id": 2310387, "url": "https://github.com/builddoctor/JavaBuildComparison", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 14939, "license": "licensed"}}