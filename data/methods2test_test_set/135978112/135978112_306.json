{"test_class": {"identifier": "KStreamForeachTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final private String topicName = \"topic\";", "modifier": "final private", "type": "String", "declarator": "topicName = \"topic\"", "var_name": "topicName"}, {"original_string": "final private Serde<Integer> intSerde = Serdes.Integer();", "modifier": "final private", "type": "Serde<Integer>", "declarator": "intSerde = Serdes.Integer()", "var_name": "intSerde"}, {"original_string": "final private Serde<String> stringSerde = Serdes.String();", "modifier": "final private", "type": "Serde<String>", "declarator": "stringSerde = Serdes.String()", "var_name": "stringSerde"}, {"original_string": "private KStreamTestDriver driver = null;", "modifier": "private", "type": "KStreamTestDriver", "declarator": "driver = null", "var_name": "driver"}], "file": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamForeachTest.java"}, "test_case": {"identifier": "testForeach", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testForeach() {\n        // Given\n        List<KeyValue<Integer, String>> inputRecords = Arrays.asList(\n            new KeyValue<>(0, \"zero\"),\n            new KeyValue<>(1, \"one\"),\n            new KeyValue<>(2, \"two\"),\n            new KeyValue<>(3, \"three\")\n        );\n\n        List<KeyValue<Integer, String>> expectedRecords = Arrays.asList(\n            new KeyValue<>(0, \"ZERO\"),\n            new KeyValue<>(2, \"ONE\"),\n            new KeyValue<>(4, \"TWO\"),\n            new KeyValue<>(6, \"THREE\")\n        );\n\n        final List<KeyValue<Integer, String>> actualRecords = new ArrayList<>();\n        ForeachAction<Integer, String> action =\n            new ForeachAction<Integer, String>() {\n                @Override\n                public void apply(Integer key, String value) {\n                    actualRecords.add(new KeyValue<>(key * 2, value.toUpperCase(Locale.ROOT)));\n                }\n            };\n\n        // When\n        KStreamBuilder builder = new KStreamBuilder();\n        KStream<Integer, String> stream = builder.stream(intSerde, stringSerde, topicName);\n        stream.foreach(action);\n\n        // Then\n        driver = new KStreamTestDriver(builder);\n        for (KeyValue<Integer, String> record: inputRecords) {\n            driver.process(topicName, record.key, record.value);\n        }\n\n        assertEquals(expectedRecords.size(), actualRecords.size());\n        for (int i = 0; i < expectedRecords.size(); i++) {\n            KeyValue<Integer, String> expectedRecord = expectedRecords.get(i);\n            KeyValue<Integer, String> actualRecord = actualRecords.get(i);\n            assertEquals(expectedRecord, actualRecord);\n        }\n    }", "signature": "void testForeach()", "full_signature": "@Test public void testForeach()", "class_method_signature": "KStreamForeachTest.testForeach()", "testcase": true, "constructor": false, "invocations": ["asList", "asList", "add", "toUpperCase", "stream", "foreach", "process", "assertEquals", "size", "size", "size", "get", "get", "assertEquals"]}, "focal_class": {"identifier": "KStreamForeach", "superclass": "", "interfaces": "implements ProcessorSupplier<K, V>", "fields": [{"original_string": "private final ForeachAction<K, V> action;", "modifier": "private final", "type": "ForeachAction<K, V>", "declarator": "action", "var_name": "action"}], "methods": [{"identifier": "KStreamForeach", "parameters": "(ForeachAction<K, V> action)", "modifiers": "public", "return": "", "signature": " KStreamForeach(ForeachAction<K, V> action)", "full_signature": "public  KStreamForeach(ForeachAction<K, V> action)", "class_method_signature": "KStreamForeach.KStreamForeach(ForeachAction<K, V> action)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Processor<K, V>", "signature": "Processor<K, V> get()", "full_signature": "@Override public Processor<K, V> get()", "class_method_signature": "KStreamForeach.get()", "testcase": false, "constructor": false}], "file": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamForeach.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Processor<K, V>", "body": "@Override\n    public Processor<K, V> get() {\n        return new KStreamForeachProcessor();\n    }", "signature": "Processor<K, V> get()", "full_signature": "@Override public Processor<K, V> get()", "class_method_signature": "KStreamForeach.get()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}