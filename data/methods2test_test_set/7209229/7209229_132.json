{"test_class": {"identifier": "TestBootstrapProcessor", "superclass": "", "interfaces": "", "fields": [], "file": "databus-bootstrap-server/databus-bootstrap-server-impl/src/test/java/com/linkedin/databus/bootstrap/server/TestBootstrapProcessor.java"}, "test_case": {"identifier": "testCkptWriteLogic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCkptWriteLogic()\n  throws Exception\n  {\n    BootstrapProcessor bp = new BootstrapProcessor();\n\n    long processedRowCount = 1;\n    // order of args : processedRowCount, isLimitExceeded, isDropped, isError\n    BootstrapEventProcessResult result_ok = new BootstrapEventProcessResult(processedRowCount, false, false, false);\n    BootstrapEventProcessResult result_zero_ok = new BootstrapEventProcessResult(0, false, false, false);\n    BootstrapEventProcessResult result_err = new BootstrapEventProcessResult(processedRowCount, false, false, true);\n    BootstrapEventProcessResult result_zero_ile = new BootstrapEventProcessResult(0, true, false, false);\n\n    Checkpoint ckpt_ss = new Checkpoint(\"{\\\"consumption_mode\\\":\\\"BOOTSTRAP_SNAPSHOT\\\", \\\"bootstrap_since_scn\\\":0,\" +\n        \"\\\"bootstrap_start_scn\\\":1000,\\\"bootstrap_target_scn\\\":2000,\\\"bootstrap_catchup_source_index\\\":0,\" +\n        \"\\\"bootstrap_snapshot_source_index\\\":1}\");\n    ckpt_ss.assertCheckpoint();\n\n    long numRowsReadFromDb = 1;\n\n    BootstrapEventCallback callback1 = EasyMock.createMock(BootstrapEventCallback.class);\n    EasyMock.replay(callback1);\n\n    BootstrapEventCallback callback2 = EasyMock.createMock(BootstrapEventCallback.class);\n    callback2.onCheckpointEvent(ckpt_ss, null);\n    EasyMock.replay(callback2);\n\n    BootstrapEventCallback callback3 = EasyMock.createMock(BootstrapEventCallback.class);\n    callback3.onCheckpointEvent(ckpt_ss, null);\n    EasyMock.replay(callback3);\n\n    // No checkpoint when result is null\n    bp.writeCkptIfAppropriate(null, callback1, numRowsReadFromDb, ckpt_ss, \"test\");\n\n    // No checkpoint when result is error\n    bp.writeCkptIfAppropriate(result_err, callback1, numRowsReadFromDb, ckpt_ss, \"test\");\n\n    // numRowsWritten == 1, must checkpoint\n    bp.writeCkptIfAppropriate(result_ok, callback2, numRowsReadFromDb, ckpt_ss, \"test\");\n\n    // numRowsWritten == 0, must checkpoint as numRowsReadFromDb > 0\n    bp.writeCkptIfAppropriate(result_zero_ok, callback3, numRowsReadFromDb, ckpt_ss, \"test\");\n\n    // numRowsWritten == 0, must have checkpointed as numRowsReadFromDb > 0. However result is client buffer exceeded\n    // So .. sorry to disappoint but no checkpoint as we want that pending_event_header\n    bp.writeCkptIfAppropriate(result_zero_ile, callback1, numRowsReadFromDb, ckpt_ss, \"test\");\n\n    // result != null, numRowsWritten == 0, numRowsReadFromDb == 0. We expect a RuntimeException here\n    try\n    {\n      bp.writeCkptIfAppropriate(result_zero_ok, callback2, 0, ckpt_ss, \"test\");\n      Assert.fail();\n    } catch (RuntimeException e)\n    {\n    }\n\n  }", "signature": "void testCkptWriteLogic()", "full_signature": "@Test public void testCkptWriteLogic()", "class_method_signature": "TestBootstrapProcessor.testCkptWriteLogic()", "testcase": true, "constructor": false, "invocations": ["assertCheckpoint", "createMock", "replay", "createMock", "onCheckpointEvent", "replay", "createMock", "onCheckpointEvent", "replay", "writeCkptIfAppropriate", "writeCkptIfAppropriate", "writeCkptIfAppropriate", "writeCkptIfAppropriate", "writeCkptIfAppropriate", "writeCkptIfAppropriate", "fail"]}, "focal_class": {"identifier": "BootstrapProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String            MODULE                      =\n      BootstrapProcessor.class.getName();", "modifier": "public static final", "type": "String", "declarator": "MODULE                      =\n      BootstrapProcessor.class.getName()", "var_name": "MODULE"}, {"original_string": "public static final Logger            LOG                         =\n      Logger.getLogger(MODULE);", "modifier": "public static final", "type": "Logger", "declarator": "LOG                         =\n      Logger.getLogger(MODULE)", "var_name": "LOG"}, {"original_string": "public final static String            EVENT_COLUMNS               = \"val\";", "modifier": "public final static", "type": "String", "declarator": "EVENT_COLUMNS               = \"val\"", "var_name": "EVENT_COLUMNS"}, {"original_string": "public final static String            PHASE_COMPLETED_HEADER_NAME = \"PhaseCompleted\";", "modifier": "public final static", "type": "String", "declarator": "PHASE_COMPLETED_HEADER_NAME = \"PhaseCompleted\"", "var_name": "PHASE_COMPLETED_HEADER_NAME"}, {"original_string": "public final static String            PHASE_COMPLETED_HEADER_TRUE = \"TRUE\";", "modifier": "public final static", "type": "String", "declarator": "PHASE_COMPLETED_HEADER_TRUE = \"TRUE\"", "var_name": "PHASE_COMPLETED_HEADER_TRUE"}, {"original_string": "public final static String            EMPTY_STRING = \"\";", "modifier": "public final static", "type": "String", "declarator": "EMPTY_STRING = \"\"", "var_name": "EMPTY_STRING"}, {"original_string": "private final long                    _maxSnapshotRowsPerFetch;", "modifier": "private final", "type": "long", "declarator": "_maxSnapshotRowsPerFetch", "var_name": "_maxSnapshotRowsPerFetch"}, {"original_string": "private final long                    _maxCatchupRowsPerFetch;", "modifier": "private final", "type": "long", "declarator": "_maxCatchupRowsPerFetch", "var_name": "_maxCatchupRowsPerFetch"}, {"original_string": "private final int                     _queryTimeInSec;", "modifier": "private final", "type": "int", "declarator": "_queryTimeInSec", "var_name": "_queryTimeInSec"}, {"original_string": "private BootstrapDBMetaDataDAO                _dbDao;", "modifier": "private", "type": "BootstrapDBMetaDataDAO", "declarator": "_dbDao", "var_name": "_dbDao"}, {"original_string": "private final DbusEventsStatisticsCollector _curStatsCollector;", "modifier": "private final", "type": "DbusEventsStatisticsCollector", "declarator": "_curStatsCollector", "var_name": "_curStatsCollector"}, {"original_string": "private DbusKeyFilter                 keyFilter;", "modifier": "private", "type": "DbusKeyFilter", "declarator": "keyFilter", "var_name": "keyFilter"}, {"original_string": "BootstrapServerStaticConfig config;", "modifier": "", "type": "BootstrapServerStaticConfig", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "BootstrapProcessor", "parameters": "(BootstrapServerStaticConfig config,\n                            DbusEventsStatisticsCollector curStatsCollector)", "modifiers": "public", "return": "", "signature": " BootstrapProcessor(BootstrapServerStaticConfig config,\n                            DbusEventsStatisticsCollector curStatsCollector)", "full_signature": "public  BootstrapProcessor(BootstrapServerStaticConfig config,\n                            DbusEventsStatisticsCollector curStatsCollector)", "class_method_signature": "BootstrapProcessor.BootstrapProcessor(BootstrapServerStaticConfig config,\n                            DbusEventsStatisticsCollector curStatsCollector)", "testcase": false, "constructor": true}, {"identifier": "BootstrapProcessor", "parameters": "()", "modifiers": "protected", "return": "", "signature": " BootstrapProcessor()", "full_signature": "protected  BootstrapProcessor()", "class_method_signature": "BootstrapProcessor.BootstrapProcessor()", "testcase": false, "constructor": true}, {"identifier": "getKeyFilter", "parameters": "()", "modifiers": "public", "return": "DbusKeyFilter", "signature": "DbusKeyFilter getKeyFilter()", "full_signature": "public DbusKeyFilter getKeyFilter()", "class_method_signature": "BootstrapProcessor.getKeyFilter()", "testcase": false, "constructor": false}, {"identifier": "setKeyFilter", "parameters": "(DbusKeyFilter keyFilter)", "modifiers": "public", "return": "void", "signature": "void setKeyFilter(DbusKeyFilter keyFilter)", "full_signature": "public void setKeyFilter(DbusKeyFilter keyFilter)", "class_method_signature": "BootstrapProcessor.setKeyFilter(DbusKeyFilter keyFilter)", "testcase": false, "constructor": false}, {"identifier": "streamCatchupRows", "parameters": "(Checkpoint currState, BootstrapEventCallback callBack)", "modifiers": "public", "return": "boolean", "signature": "boolean streamCatchupRows(Checkpoint currState, BootstrapEventCallback callBack)", "full_signature": "public boolean streamCatchupRows(Checkpoint currState, BootstrapEventCallback callBack)", "class_method_signature": "BootstrapProcessor.streamCatchupRows(Checkpoint currState, BootstrapEventCallback callBack)", "testcase": false, "constructor": false}, {"identifier": "getFilterSQL", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getFilterSQL()", "full_signature": "private String getFilterSQL()", "class_method_signature": "BootstrapProcessor.getFilterSQL()", "testcase": false, "constructor": false}, {"identifier": "getCatchupSQLString", "parameters": "(String catchupTab)", "modifiers": "public", "return": "String", "signature": "String getCatchupSQLString(String catchupTab)", "full_signature": "public String getCatchupSQLString(String catchupTab)", "class_method_signature": "BootstrapProcessor.getCatchupSQLString(String catchupTab)", "testcase": false, "constructor": false}, {"identifier": "getCatchupSQLString", "parameters": "(String catchupTab, String source)", "modifiers": "public", "return": "String", "signature": "String getCatchupSQLString(String catchupTab, String source)", "full_signature": "public String getCatchupSQLString(String catchupTab, String source)", "class_method_signature": "BootstrapProcessor.getCatchupSQLString(String catchupTab, String source)", "testcase": false, "constructor": false}, {"identifier": "getSnapshotSQLString", "parameters": "(String snapShotTable)", "modifiers": "public", "return": "String", "signature": "String getSnapshotSQLString(String snapShotTable)", "full_signature": "public String getSnapshotSQLString(String snapShotTable)", "class_method_signature": "BootstrapProcessor.getSnapshotSQLString(String snapShotTable)", "testcase": false, "constructor": false}, {"identifier": "getSnapshotSQLString", "parameters": "(String snapShotTable, String source)", "modifiers": "public", "return": "String", "signature": "String getSnapshotSQLString(String snapShotTable, String source)", "full_signature": "public String getSnapshotSQLString(String snapShotTable, String source)", "class_method_signature": "BootstrapProcessor.getSnapshotSQLString(String snapShotTable, String source)", "testcase": false, "constructor": false}, {"identifier": "createCatchupStatement", "parameters": "(int srcId,\n                                                   int logId,\n                                                   Checkpoint currState)", "modifiers": "private", "return": "PreparedStatement", "signature": "PreparedStatement createCatchupStatement(int srcId,\n                                                   int logId,\n                                                   Checkpoint currState)", "full_signature": "private PreparedStatement createCatchupStatement(int srcId,\n                                                   int logId,\n                                                   Checkpoint currState)", "class_method_signature": "BootstrapProcessor.createCatchupStatement(int srcId,\n                                                   int logId,\n                                                   Checkpoint currState)", "testcase": false, "constructor": false}, {"identifier": "streamSnapShotRows", "parameters": "(Checkpoint currState, BootstrapEventCallback callBack)", "modifiers": "public", "return": "boolean", "signature": "boolean streamSnapShotRows(Checkpoint currState, BootstrapEventCallback callBack)", "full_signature": "public boolean streamSnapShotRows(Checkpoint currState, BootstrapEventCallback callBack)", "class_method_signature": "BootstrapProcessor.streamSnapShotRows(Checkpoint currState, BootstrapEventCallback callBack)", "testcase": false, "constructor": false}, {"identifier": "streamOutRows", "parameters": "(Checkpoint ckpt,\n                                ResultSet rs,\n                                BootstrapEventCallback callback,\n                                long maxRowsPerFetch)", "modifiers": "private", "return": "boolean", "signature": "boolean streamOutRows(Checkpoint ckpt,\n                                ResultSet rs,\n                                BootstrapEventCallback callback,\n                                long maxRowsPerFetch)", "full_signature": "private boolean streamOutRows(Checkpoint ckpt,\n                                ResultSet rs,\n                                BootstrapEventCallback callback,\n                                long maxRowsPerFetch)", "class_method_signature": "BootstrapProcessor.streamOutRows(Checkpoint ckpt,\n                                ResultSet rs,\n                                BootstrapEventCallback callback,\n                                long maxRowsPerFetch)", "testcase": false, "constructor": false}, {"identifier": "writeCkptIfAppropriate", "parameters": "(BootstrapEventProcessResult result,\n                                      BootstrapEventCallback callback,\n                                      long numRowsReadFromDb,\n                                      Checkpoint ckpt,\n                                      String resultSetStmtStr)", "modifiers": "protected", "return": "void", "signature": "void writeCkptIfAppropriate(BootstrapEventProcessResult result,\n                                      BootstrapEventCallback callback,\n                                      long numRowsReadFromDb,\n                                      Checkpoint ckpt,\n                                      String resultSetStmtStr)", "full_signature": "protected void writeCkptIfAppropriate(BootstrapEventProcessResult result,\n                                      BootstrapEventCallback callback,\n                                      long numRowsReadFromDb,\n                                      Checkpoint ckpt,\n                                      String resultSetStmtStr)", "class_method_signature": "BootstrapProcessor.writeCkptIfAppropriate(BootstrapEventProcessResult result,\n                                      BootstrapEventCallback callback,\n                                      long numRowsReadFromDb,\n                                      Checkpoint ckpt,\n                                      String resultSetStmtStr)", "testcase": false, "constructor": false}, {"identifier": "computeIsPhaseCompleted", "parameters": "(BootstrapEventProcessResult result,\n                                            Checkpoint ckpt,\n                                            long numRowsReadFromDb,\n                                            long maxRowsPerFetch,\n                                            long windowScn)", "modifiers": "protected", "return": "boolean", "signature": "boolean computeIsPhaseCompleted(BootstrapEventProcessResult result,\n                                            Checkpoint ckpt,\n                                            long numRowsReadFromDb,\n                                            long maxRowsPerFetch,\n                                            long windowScn)", "full_signature": "protected boolean computeIsPhaseCompleted(BootstrapEventProcessResult result,\n                                            Checkpoint ckpt,\n                                            long numRowsReadFromDb,\n                                            long maxRowsPerFetch,\n                                            long windowScn)", "class_method_signature": "BootstrapProcessor.computeIsPhaseCompleted(BootstrapEventProcessResult result,\n                                            Checkpoint ckpt,\n                                            long numRowsReadFromDb,\n                                            long maxRowsPerFetch,\n                                            long windowScn)", "testcase": false, "constructor": false}, {"identifier": "mergeAndResetStats", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void mergeAndResetStats()", "full_signature": "private void mergeAndResetStats()", "class_method_signature": "BootstrapProcessor.mergeAndResetStats()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "BootstrapProcessor.shutdown()", "testcase": false, "constructor": false}], "file": "databus-bootstrap-server/databus-bootstrap-server-impl/src/main/java/com/linkedin/databus/bootstrap/server/BootstrapProcessor.java"}, "focal_method": {"identifier": "writeCkptIfAppropriate", "parameters": "(BootstrapEventProcessResult result,\n                                      BootstrapEventCallback callback,\n                                      long numRowsReadFromDb,\n                                      Checkpoint ckpt,\n                                      String resultSetStmtStr)", "modifiers": "protected", "return": "void", "body": "protected void writeCkptIfAppropriate(BootstrapEventProcessResult result,\n                                      BootstrapEventCallback callback,\n                                      long numRowsReadFromDb,\n                                      Checkpoint ckpt,\n                                      String resultSetStmtStr)\n  throws SQLException\n  {\n    assert (null != callback);\n    assert (numRowsReadFromDb >= 0);\n    assert (null != ckpt);\n    if (null != result && !result.isError())\n    {\n      assert (numRowsReadFromDb >= result.getNumRowsWritten());\n      if (result.getNumRowsWritten() > 0)\n      {\n        callback.onCheckpointEvent(ckpt, _curStatsCollector);\n      }\n      else if ((result.getNumRowsWritten() == 0) && (numRowsReadFromDb > 0))\n      {\n        if (!result.isClientBufferLimitExceeded())\n        {\n          // The first sentence in the log message below is used for an integration test. Please do not change.\n          LOG.info(\"All the rows read from DB have been filtered out by user-level filter. numRowsReadFromDb = \"\n              + numRowsReadFromDb + \" sending checkpoint = \" + ckpt);\n          callback.onCheckpointEvent(ckpt, _curStatsCollector);\n        }\n        else\n        {\n          // pendingEvent header will be set\n          LOG.info(\"There have been rowsReadFromDb that could not be written as the clientBufferLimit has been exceeded. \" +\n                   \"A checkpoint will not be sent, but pendingEvent header will be set. numRowsReadFromDb = \" +\n                    numRowsReadFromDb + \" checkpoint = \" + ckpt);\n        }\n      }\n      else\n      {\n        // For the case of predicatePushDownFilter=true, where no events have been read / none written on channel,\n        // result == null and we will not enter this loop. That is, it is not possible that numRowsReadFromDb == 0\n        // and result.getNumRowsWritten() == 0\n        String errMsg = \"This is an error-case that should not happen. First, there were no rows in the resultSet \" +\n            \" Second, this is not a case where all the events have been filtered out. Both of these cannot happen simulateneously. \" +\n            \" Debug information is logged below. \" +\n            \" numRowsReadFromDb = \" + numRowsReadFromDb +\n            \" result = \" + result +\n            \" resultSet statement \" + resultSetStmtStr;\n        LOG.error(errMsg);\n        throw new RuntimeException(errMsg);\n      }\n    }\n  }", "signature": "void writeCkptIfAppropriate(BootstrapEventProcessResult result,\n                                      BootstrapEventCallback callback,\n                                      long numRowsReadFromDb,\n                                      Checkpoint ckpt,\n                                      String resultSetStmtStr)", "full_signature": "protected void writeCkptIfAppropriate(BootstrapEventProcessResult result,\n                                      BootstrapEventCallback callback,\n                                      long numRowsReadFromDb,\n                                      Checkpoint ckpt,\n                                      String resultSetStmtStr)", "class_method_signature": "BootstrapProcessor.writeCkptIfAppropriate(BootstrapEventProcessResult result,\n                                      BootstrapEventCallback callback,\n                                      long numRowsReadFromDb,\n                                      Checkpoint ckpt,\n                                      String resultSetStmtStr)", "testcase": false, "constructor": false, "invocations": ["isError", "getNumRowsWritten", "getNumRowsWritten", "onCheckpointEvent", "getNumRowsWritten", "isClientBufferLimitExceeded", "info", "onCheckpointEvent", "info", "error"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}