{"test_class": {"identifier": "AbstractPluginTest", "superclass": "extends CoreBaseTest", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AbstractPluginTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AbstractPluginTest.class)", "var_name": "logger"}, {"original_string": "static final Integer X_TIMES = 50;", "modifier": "static final", "type": "Integer", "declarator": "X_TIMES = 50", "var_name": "X_TIMES"}], "file": "java/component/keyple-core/src/test/java/org/eclipse/keyple/core/seproxy/plugin/AbstractPluginTest.java"}, "test_case": {"identifier": "addRemoveReadersMultiThreaded", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void addRemoveReadersMultiThreaded() throws Exception {\n    ReaderPlugin plugin = new BlankAbstractPlugin(\"addRemoveReadersMultiThreaded\");\n    Map<String, SeReader> readers = plugin.getReaders();\n    final CountDownLatch lock = new CountDownLatch(10);\n\n    addReaderThread(readers, 10, lock);\n    addReaderThread(readers, 10, lock);\n    removeReaderThread(readers, 10, lock);\n    listReaders(readers, 10, lock);\n    addReaderThread(readers, 10, lock);\n    removeReaderThread(readers, 10, lock);\n    listReaders(readers, 10, lock);\n    removeReaderThread(readers, 10, lock);\n    listReaders(readers, 10, lock);\n    removeReaderThread(readers, 10, lock);\n\n    // wait for all thread to finish with timeout\n    lock.await(2, TimeUnit.SECONDS);\n\n    // if all thread finished correctly, lock count should be 0\n    Assert.assertEquals(0, lock.getCount());\n  }", "signature": "void addRemoveReadersMultiThreaded()", "full_signature": "@Test public void addRemoveReadersMultiThreaded()", "class_method_signature": "AbstractPluginTest.addRemoveReadersMultiThreaded()", "testcase": true, "constructor": false, "invocations": ["getReaders", "addReaderThread", "addReaderThread", "removeReaderThread", "listReaders", "addReaderThread", "removeReaderThread", "listReaders", "removeReaderThread", "listReaders", "removeReaderThread", "await", "assertEquals", "getCount"]}, "focal_class": {"identifier": "AbstractPlugin", "superclass": "", "interfaces": "implements ReaderPlugin", "fields": [{"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "protected Map<String, SeReader> readers = new ConcurrentHashMap<String, SeReader>();", "modifier": "protected", "type": "Map<String, SeReader>", "declarator": "readers = new ConcurrentHashMap<String, SeReader>()", "var_name": "readers"}], "methods": [{"identifier": "AbstractPlugin", "parameters": "(String name)", "modifiers": "protected", "return": "", "signature": " AbstractPlugin(String name)", "full_signature": "protected  AbstractPlugin(String name)", "class_method_signature": "AbstractPlugin.AbstractPlugin(String name)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getName()", "full_signature": "public final String getName()", "class_method_signature": "AbstractPlugin.getName()", "testcase": false, "constructor": false}, {"identifier": "getReaders", "parameters": "()", "modifiers": "@Override public final", "return": "Map<String, SeReader>", "signature": "Map<String, SeReader> getReaders()", "full_signature": "@Override public final Map<String, SeReader> getReaders()", "class_method_signature": "AbstractPlugin.getReaders()", "testcase": false, "constructor": false}, {"identifier": "getReaderNames", "parameters": "()", "modifiers": "@Override public final", "return": "Set<String>", "signature": "Set<String> getReaderNames()", "full_signature": "@Override public final Set<String> getReaderNames()", "class_method_signature": "AbstractPlugin.getReaderNames()", "testcase": false, "constructor": false}, {"identifier": "initNativeReaders", "parameters": "()", "modifiers": "protected abstract", "return": "Map<String, SeReader>", "signature": "Map<String, SeReader> initNativeReaders()", "full_signature": "protected abstract Map<String, SeReader> initNativeReaders()", "class_method_signature": "AbstractPlugin.initNativeReaders()", "testcase": false, "constructor": false}, {"identifier": "getReader", "parameters": "(String name)", "modifiers": "@Override public final", "return": "SeReader", "signature": "SeReader getReader(String name)", "full_signature": "@Override public final SeReader getReader(String name)", "class_method_signature": "AbstractPlugin.getReader(String name)", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Map<String, String> parameters)", "modifiers": "public final", "return": "void", "signature": "void setParameters(Map<String, String> parameters)", "full_signature": "public final void setParameters(Map<String, String> parameters)", "class_method_signature": "AbstractPlugin.setParameters(Map<String, String> parameters)", "testcase": false, "constructor": false}], "file": "java/component/keyple-core/src/main/java/org/eclipse/keyple/core/seproxy/plugin/AbstractPlugin.java"}, "focal_method": {"identifier": "getReaders", "parameters": "()", "modifiers": "@Override public final", "return": "Map<String, SeReader>", "body": "@Override\n  public final Map<String, SeReader> getReaders() {\n    return readers;\n  }", "signature": "Map<String, SeReader> getReaders()", "full_signature": "@Override public final Map<String, SeReader> getReaders()", "class_method_signature": "AbstractPlugin.getReaders()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 156416177, "url": "https://github.com/eclipse/keyple-java", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 10325, "license": "licensed"}}