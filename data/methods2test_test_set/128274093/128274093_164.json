{"test_class": {"identifier": "FutureDisposableTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/disposables/FutureDisposableTest.java"}, "test_case": {"identifier": "normalDone", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void normalDone() {\n        FutureTask<Object> ft = new FutureTask<Object>(Functions.EMPTY_RUNNABLE, null);\n        FutureDisposable d = new FutureDisposable(ft, false);\n        assertFalse(d.isDisposed());\n\n        assertFalse(d.isDisposed());\n\n        ft.run();\n\n        assertTrue(d.isDisposed());\n    }", "signature": "void normalDone()", "full_signature": "@Test public void normalDone()", "class_method_signature": "FutureDisposableTest.normalDone()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isDisposed", "assertFalse", "isDisposed", "run", "assertTrue", "isDisposed"]}, "focal_class": {"identifier": "FutureDisposable", "superclass": "extends AtomicReference<Future<?>>", "interfaces": "implements Disposable", "fields": [{"original_string": "private static final long serialVersionUID = 6545242830671168775L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 6545242830671168775L", "var_name": "serialVersionUID"}, {"original_string": "private final boolean allowInterrupt;", "modifier": "private final", "type": "boolean", "declarator": "allowInterrupt", "var_name": "allowInterrupt"}], "methods": [{"identifier": "FutureDisposable", "parameters": "(Future<?> run, boolean allowInterrupt)", "modifiers": "", "return": "", "signature": " FutureDisposable(Future<?> run, boolean allowInterrupt)", "full_signature": "  FutureDisposable(Future<?> run, boolean allowInterrupt)", "class_method_signature": "FutureDisposable.FutureDisposable(Future<?> run, boolean allowInterrupt)", "testcase": false, "constructor": true}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "FutureDisposable.isDisposed()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "FutureDisposable.dispose()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/disposables/FutureDisposable.java"}, "focal_method": {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isDisposed() {\n        Future<?> f = get();\n        return f == null || f.isDone();\n    }", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "FutureDisposable.isDisposed()", "testcase": false, "constructor": false, "invocations": ["get", "isDone"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}