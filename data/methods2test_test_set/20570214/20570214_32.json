{"test_class": {"identifier": "AeadWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int AES_KEY_SIZE = 16;", "modifier": "private static final", "type": "int", "declarator": "AES_KEY_SIZE = 16", "var_name": "AES_KEY_SIZE"}, {"original_string": "private static final int HMAC_KEY_SIZE = 20;", "modifier": "private static final", "type": "int", "declarator": "HMAC_KEY_SIZE = 20", "var_name": "HMAC_KEY_SIZE"}], "file": "java_src/src/test/java/com/google/crypto/tink/aead/AeadWrapperTest.java"}, "test_case": {"identifier": "testBasicAesCtrHmacAead", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBasicAesCtrHmacAead() throws Exception {\n    byte[] aesCtrKeyValue = Random.randBytes(AES_KEY_SIZE);\n    byte[] hmacKeyValue = Random.randBytes(HMAC_KEY_SIZE);\n    int ivSize = 12;\n    int tagSize = 16;\n    KeysetHandle keysetHandle =\n        TestUtil.createKeysetHandle(\n            TestUtil.createKeyset(\n                TestUtil.createKey(\n                    TestUtil.createAesCtrHmacAeadKeyData(\n                        aesCtrKeyValue, ivSize, hmacKeyValue, tagSize),\n                    42,\n                    KeyStatusType.ENABLED,\n                    OutputPrefixType.TINK)));\n    Aead aead = new AeadWrapper().wrap(Registry.getPrimitives(keysetHandle, Aead.class));\n    byte[] plaintext = Random.randBytes(20);\n    byte[] associatedData = Random.randBytes(20);\n    byte[] ciphertext = aead.encrypt(plaintext, associatedData);\n    byte[] decrypted = aead.decrypt(ciphertext, associatedData);\n    assertArrayEquals(plaintext, decrypted);\n  }", "signature": "void testBasicAesCtrHmacAead()", "full_signature": "@Test public void testBasicAesCtrHmacAead()", "class_method_signature": "AeadWrapperTest.testBasicAesCtrHmacAead()", "testcase": true, "constructor": false, "invocations": ["randBytes", "randBytes", "createKeysetHandle", "createKeyset", "createKey", "createAesCtrHmacAeadKeyData", "wrap", "getPrimitives", "randBytes", "randBytes", "encrypt", "decrypt", "assertArrayEquals"]}, "focal_class": {"identifier": "AeadWrapper", "superclass": "", "interfaces": "implements PrimitiveWrapper<Aead, Aead>", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(AeadWrapper.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(AeadWrapper.class.getName())", "var_name": "logger"}], "methods": [{"identifier": "AeadWrapper", "parameters": "()", "modifiers": "", "return": "", "signature": " AeadWrapper()", "full_signature": "  AeadWrapper()", "class_method_signature": "AeadWrapper.AeadWrapper()", "testcase": false, "constructor": true}, {"identifier": "wrap", "parameters": "(final PrimitiveSet<Aead> pset)", "modifiers": "@Override public", "return": "Aead", "signature": "Aead wrap(final PrimitiveSet<Aead> pset)", "full_signature": "@Override public Aead wrap(final PrimitiveSet<Aead> pset)", "class_method_signature": "AeadWrapper.wrap(final PrimitiveSet<Aead> pset)", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<Aead>", "signature": "Class<Aead> getPrimitiveClass()", "full_signature": "@Override public Class<Aead> getPrimitiveClass()", "class_method_signature": "AeadWrapper.getPrimitiveClass()", "testcase": false, "constructor": false}, {"identifier": "getInputPrimitiveClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<Aead>", "signature": "Class<Aead> getInputPrimitiveClass()", "full_signature": "@Override public Class<Aead> getInputPrimitiveClass()", "class_method_signature": "AeadWrapper.getInputPrimitiveClass()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void register()", "full_signature": "public static void register()", "class_method_signature": "AeadWrapper.register()", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/aead/AeadWrapper.java"}, "focal_method": {"identifier": "wrap", "parameters": "(final PrimitiveSet<Aead> pset)", "modifiers": "@Override public", "return": "Aead", "body": "@Override\n  public Aead wrap(final PrimitiveSet<Aead> pset) throws GeneralSecurityException {\n    return new WrappedAead(pset);\n  }", "signature": "Aead wrap(final PrimitiveSet<Aead> pset)", "full_signature": "@Override public Aead wrap(final PrimitiveSet<Aead> pset)", "class_method_signature": "AeadWrapper.wrap(final PrimitiveSet<Aead> pset)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}