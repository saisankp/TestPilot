{"test_class": {"identifier": "PdfToMultipleTiffParametersTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-model/src/test/java/org/sejda/model/parameter/image/PdfToMultipleTiffParametersTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        PdfToMultipleTiffParameters eq1 = new PdfToMultipleTiffParameters(ImageColorType.GRAY_SCALE);\n        PdfToMultipleTiffParameters eq2 = new PdfToMultipleTiffParameters(ImageColorType.GRAY_SCALE);\n        PdfToMultipleTiffParameters eq3 = new PdfToMultipleTiffParameters(ImageColorType.GRAY_SCALE);\n        PdfToMultipleTiffParameters diff = new PdfToMultipleTiffParameters(ImageColorType.BLACK_AND_WHITE);\n        diff.setCompressionType(TiffCompressionType.JPEG_TTN2);\n        TestUtils.testEqualsAndHashCodes(eq1, eq2, eq3, diff);\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "PdfToMultipleTiffParametersTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["setCompressionType", "testEqualsAndHashCodes"]}, "focal_class": {"identifier": "PdfToMultipleTiffParameters", "superclass": "extends AbstractPdfToMultipleImageParameters", "interfaces": "implements PdfToTiffParameters", "fields": [{"original_string": "@NotNull\n    private TiffCompressionType compressionType = TiffCompressionType.NONE;", "modifier": "@NotNull\n    private", "type": "TiffCompressionType", "declarator": "compressionType = TiffCompressionType.NONE", "var_name": "compressionType"}], "methods": [{"identifier": "PdfToMultipleTiffParameters", "parameters": "(ImageColorType outputImageColorType)", "modifiers": "public", "return": "", "signature": " PdfToMultipleTiffParameters(ImageColorType outputImageColorType)", "full_signature": "public  PdfToMultipleTiffParameters(ImageColorType outputImageColorType)", "class_method_signature": "PdfToMultipleTiffParameters.PdfToMultipleTiffParameters(ImageColorType outputImageColorType)", "testcase": false, "constructor": true}, {"identifier": "PdfToMultipleTiffParameters", "parameters": "(ImageColorType outputImageColorType, TiffCompressionType compressionType)", "modifiers": "public", "return": "", "signature": " PdfToMultipleTiffParameters(ImageColorType outputImageColorType, TiffCompressionType compressionType)", "full_signature": "public  PdfToMultipleTiffParameters(ImageColorType outputImageColorType, TiffCompressionType compressionType)", "class_method_signature": "PdfToMultipleTiffParameters.PdfToMultipleTiffParameters(ImageColorType outputImageColorType, TiffCompressionType compressionType)", "testcase": false, "constructor": true}, {"identifier": "getOutputImageType", "parameters": "()", "modifiers": "@Override public", "return": "ImageType", "signature": "ImageType getOutputImageType()", "full_signature": "@Override public ImageType getOutputImageType()", "class_method_signature": "PdfToMultipleTiffParameters.getOutputImageType()", "testcase": false, "constructor": false}, {"identifier": "getCompressionType", "parameters": "()", "modifiers": "@Override public", "return": "TiffCompressionType", "signature": "TiffCompressionType getCompressionType()", "full_signature": "@Override public TiffCompressionType getCompressionType()", "class_method_signature": "PdfToMultipleTiffParameters.getCompressionType()", "testcase": false, "constructor": false}, {"identifier": "setCompressionType", "parameters": "(TiffCompressionType compressionType)", "modifiers": "public", "return": "void", "signature": "void setCompressionType(TiffCompressionType compressionType)", "full_signature": "public void setCompressionType(TiffCompressionType compressionType)", "class_method_signature": "PdfToMultipleTiffParameters.setCompressionType(TiffCompressionType compressionType)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PdfToMultipleTiffParameters.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "PdfToMultipleTiffParameters.equals(Object other)", "testcase": false, "constructor": false}], "file": "sejda-model/src/main/java/org/sejda/model/parameter/image/PdfToMultipleTiffParameters.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object other) {\n        if (!(other instanceof PdfToMultipleTiffParameters)) {\n            return false;\n        }\n        PdfToMultipleTiffParameters parameter = (PdfToMultipleTiffParameters) other;\n        return new EqualsBuilder().appendSuper(super.equals(other))\n                .append(compressionType, parameter.getCompressionType()).isEquals();\n    }", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "PdfToMultipleTiffParameters.equals(Object other)", "testcase": false, "constructor": false, "invocations": ["isEquals", "append", "appendSuper", "equals", "getCompressionType"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}