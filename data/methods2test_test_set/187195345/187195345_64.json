{"test_class": {"identifier": "GeoCoordinatesEncoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "GeoCoordinatesEncoder geoCoordinatesEncoder = new GeoCoordinatesEncoder();", "modifier": "", "type": "GeoCoordinatesEncoder", "declarator": "geoCoordinatesEncoder = new GeoCoordinatesEncoder()", "var_name": "geoCoordinatesEncoder"}], "file": "proto/src/test/java/openlr/proto/encoder/GeoCoordinatesEncoderTest.java"}, "test_case": {"identifier": "testEncodeGeoCoordinates", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEncodeGeoCoordinates() throws OpenLRProtoException {\n        GeoCoordinatesProtoImpl geoCoordinates = new GeoCoordinatesProtoImpl(7.3, 52.5);\n        RawGeoCoordLocRef rawLocationReference = new RawGeoCoordLocRef(\"1\", geoCoordinates);\n\n        LocationReference locationReference = geoCoordinatesEncoder.encode(rawLocationReference);\n\n        assertNotNull(locationReference);\n        assertEquals(locationReference.getID(), \"1\");\n        assertEquals(locationReference.getLocationType(), LocationType.GEO_COORDINATES);\n        assertEquals(locationReference.getDataIdentifier(), \"proto\");\n        assertEquals(locationReference.getDataClass(), LocationReferenceData.class);\n\n        assertNotNull(locationReference);\n        assertEquals(locationReference.getID(), \"1\");\n        assertEquals(locationReference.getLocationType(), LocationType.GEO_COORDINATES);\n        assertTrue(locationReference.isValid());\n        assertEquals(locationReference.getDataClass(), LocationReferenceData.class);\n\n        Object locationReferenceData = locationReference.getLocationReferenceData();\n\n        assertTrue(locationReferenceData instanceof LocationReferenceData);\n\n        LocationReferenceData data = (LocationReferenceData) locationReferenceData;\n\n        assertTrue(data.hasGeoCoordinatesLocationReference());\n\n        GeoCoordinatesLocationReference geoCoordinatesLocationReference = data.getGeoCoordinatesLocationReference();\n\n        assertTrue(geoCoordinatesLocationReference.hasCoordinates());\n\n        Coordinates coordinates = geoCoordinatesLocationReference.getCoordinates();\n\n        assertEquals(coordinates.getLongitude(), 7.3);\n        assertEquals(coordinates.getLatitude(), 52.5);\n    }", "signature": "void testEncodeGeoCoordinates()", "full_signature": "@Test public void testEncodeGeoCoordinates()", "class_method_signature": "GeoCoordinatesEncoderTest.testEncodeGeoCoordinates()", "testcase": true, "constructor": false, "invocations": ["encode", "assertNotNull", "assertEquals", "getID", "assertEquals", "getLocationType", "assertEquals", "getDataIdentifier", "assertEquals", "getDataClass", "assertNotNull", "assertEquals", "getID", "assertEquals", "getLocationType", "assertTrue", "isValid", "assertEquals", "getDataClass", "getLocationReferenceData", "assertTrue", "assertTrue", "hasGeoCoordinatesLocationReference", "getGeoCoordinatesLocationReference", "assertTrue", "hasCoordinates", "getCoordinates", "assertEquals", "getLongitude", "assertEquals", "getLatitude"]}, "focal_class": {"identifier": "GeoCoordinatesEncoder", "superclass": "", "interfaces": "implements LocationReferenceEncoder", "fields": [], "methods": [{"identifier": "encode", "parameters": "(RawLocationReference rawLocationReference)", "modifiers": "@Override public", "return": "LocationReference", "signature": "LocationReference encode(RawLocationReference rawLocationReference)", "full_signature": "@Override public LocationReference encode(RawLocationReference rawLocationReference)", "class_method_signature": "GeoCoordinatesEncoder.encode(RawLocationReference rawLocationReference)", "testcase": false, "constructor": false}], "file": "proto/src/main/java/openlr/proto/encoder/GeoCoordinatesEncoder.java"}, "focal_method": {"identifier": "encode", "parameters": "(RawLocationReference rawLocationReference)", "modifiers": "@Override public", "return": "LocationReference", "body": "@Override\n    public LocationReference encode(RawLocationReference rawLocationReference) throws OpenLRProtoException {\n        if (rawLocationReference.getLocationType() != LocationType.GEO_COORDINATES) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);\n        }\n\n        GeoCoordinates geoCoordinates = rawLocationReference.getGeoCoordinates();\n\n        Coordinates coordinates = Coordinates.newBuilder()\n                .setLongitude(geoCoordinates.getLongitudeDeg())\n                .setLatitude(geoCoordinates.getLatitudeDeg())\n                .build();\n\n        GeoCoordinatesLocationReference geoCoordinatesLocationReference = GeoCoordinatesLocationReference.newBuilder()\n                .setCoordinates(coordinates)\n                .build();\n\n        LocationReferenceData locationReferenceData = LocationReferenceData.newBuilder()\n                .setGeoCoordinatesLocationReference(geoCoordinatesLocationReference)\n                .build();\n\n        return new LocationReferenceProtoImpl(rawLocationReference.getID(), LocationType.GEO_COORDINATES, locationReferenceData);\n    }", "signature": "LocationReference encode(RawLocationReference rawLocationReference)", "full_signature": "@Override public LocationReference encode(RawLocationReference rawLocationReference)", "class_method_signature": "GeoCoordinatesEncoder.encode(RawLocationReference rawLocationReference)", "testcase": false, "constructor": false, "invocations": ["getLocationType", "getGeoCoordinates", "build", "setLatitude", "setLongitude", "newBuilder", "getLongitudeDeg", "getLatitudeDeg", "build", "setCoordinates", "newBuilder", "build", "setGeoCoordinatesLocationReference", "newBuilder", "getID"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}