{"test_class": {"identifier": "CsrfProtectionRefererFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "fdb-sql-layer-rest/src/test/java/com/foundationdb/http/CsrfProtectionRefererFilterTest.java"}, "test_case": {"identifier": "testParseThreeAllowedReferersWithTrailingComma", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseThreeAllowedReferersWithTrailingComma() {\n        List<URI> uris = CsrfProtectionRefererFilter.parseAllowedReferers(\"http://my-site.com:45,https://other.site.com,http://wherever.edu,\");\n        assertEquals(3, uris.size());\n        assertUri(\"http\", \"my-site.com\", 45, uris.get(0));\n        assertUri(\"https\", \"other.site.com\", -1, uris.get(1));\n        assertUri(\"http\", \"wherever.edu\", -1, uris.get(2));\n    }", "signature": "void testParseThreeAllowedReferersWithTrailingComma()", "full_signature": "@Test public void testParseThreeAllowedReferersWithTrailingComma()", "class_method_signature": "CsrfProtectionRefererFilterTest.testParseThreeAllowedReferersWithTrailingComma()", "testcase": true, "constructor": false, "invocations": ["parseAllowedReferers", "assertEquals", "size", "assertUri", "get", "assertUri", "get", "assertUri", "get"]}, "focal_class": {"identifier": "CsrfProtectionRefererFilter", "superclass": "", "interfaces": "implements javax.servlet.Filter", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CsrfProtectionRefererFilter.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CsrfProtectionRefererFilter.class)", "var_name": "logger"}, {"original_string": "public static final String REFERER_HEADER = \"Referer\";", "modifier": "public static final", "type": "String", "declarator": "REFERER_HEADER = \"Referer\"", "var_name": "REFERER_HEADER"}, {"original_string": "public static final String ALLOWED_REFERERS_PARAM = \"AllowedReferersInitParam\";", "modifier": "public static final", "type": "String", "declarator": "ALLOWED_REFERERS_PARAM = \"AllowedReferersInitParam\"", "var_name": "ALLOWED_REFERERS_PARAM"}, {"original_string": "private List<URI> allowedReferers;", "modifier": "private", "type": "List<URI>", "declarator": "allowedReferers", "var_name": "allowedReferers"}], "methods": [{"identifier": "init", "parameters": "(FilterConfig filterConfig)", "modifiers": "@Override public", "return": "void", "signature": "void init(FilterConfig filterConfig)", "full_signature": "@Override public void init(FilterConfig filterConfig)", "class_method_signature": "CsrfProtectionRefererFilter.init(FilterConfig filterConfig)", "testcase": false, "constructor": false}, {"identifier": "doFilter", "parameters": "(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)", "modifiers": "@Override public", "return": "void", "signature": "void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)", "full_signature": "@Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)", "class_method_signature": "CsrfProtectionRefererFilter.doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "CsrfProtectionRefererFilter.destroy()", "testcase": false, "constructor": false}, {"identifier": "parseAllowedReferers", "parameters": "(String allowedReferersConfigProperty)", "modifiers": "public static", "return": "List<URI>", "signature": "List<URI> parseAllowedReferers(String allowedReferersConfigProperty)", "full_signature": "public static List<URI> parseAllowedReferers(String allowedReferersConfigProperty)", "class_method_signature": "CsrfProtectionRefererFilter.parseAllowedReferers(String allowedReferersConfigProperty)", "testcase": false, "constructor": false}, {"identifier": "isAllowedUri", "parameters": "(List<URI> allowedReferers, String referer, boolean isGetRequest)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAllowedUri(List<URI> allowedReferers, String referer, boolean isGetRequest)", "full_signature": "public static boolean isAllowedUri(List<URI> allowedReferers, String referer, boolean isGetRequest)", "class_method_signature": "CsrfProtectionRefererFilter.isAllowedUri(List<URI> allowedReferers, String referer, boolean isGetRequest)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-rest/src/main/java/com/foundationdb/http/CsrfProtectionRefererFilter.java"}, "focal_method": {"identifier": "parseAllowedReferers", "parameters": "(String allowedReferersConfigProperty)", "modifiers": "public static", "return": "List<URI>", "body": "public static List<URI> parseAllowedReferers(String allowedReferersConfigProperty) {\n        if (allowedReferersConfigProperty == null || allowedReferersConfigProperty.isEmpty()) {\n            throw new IllegalAllowedReferersException(\"must not be null or empty\", allowedReferersConfigProperty);\n        }\n        String[] split = allowedReferersConfigProperty.split(\"\\\\,\");\n        List<URI> allowedReferers = new ArrayList<>();\n        for (String allowedReferer : split) {\n            if (allowedReferer == null || allowedReferer.isEmpty()) {\n                continue;\n            } else {\n                if (allowedReferer.contains(\"*\")) {\n                    throw new IllegalAllowedReferersException(\"do not support regexs (*)\", allowedReferer);\n                }\n                URI uri;\n                try {\n                    uri = new URI(allowedReferer);\n                } catch (NullPointerException | IllegalArgumentException | URISyntaxException e) {\n                    throw new IllegalAllowedReferersException(\"includes invalid referer\", allowedReferer, e);\n                }\n                if (uri == null) {\n                    throw new IllegalAllowedReferersException(\"must not be null\", allowedReferer);\n                }\n                if (uri.getUserInfo() != null) {\n                    throw new IllegalAllowedReferersException(\"must not contain user information\", allowedReferer);\n                }\n                if (uri.getPath() != null && !uri.getPath().isEmpty() && !uri.getPath().equals(\"/\")) {\n                    throw new IllegalAllowedReferersException(\"do not support restricting by path\", allowedReferer);\n                }\n                if (uri.getFragment() != null) {\n                    throw new IllegalAllowedReferersException(\"do not support restricting by fragment\", allowedReferer);\n                }\n                if (uri.getScheme() == null || (!uri.getScheme().equals(\"http\") && !uri.getScheme().equals(\"https\"))) {\n                    throw new IllegalAllowedReferersException(\"must be http or https\", allowedReferer);\n                }\n                if (uri.getAuthority() == null || uri.getHost() == null) {\n                    throw new IllegalAllowedReferersException(\"must be hierarchical (e.g. http://example.com)\", allowedReferer);\n                }\n                allowedReferers.add(uri);\n            }\n        }\n        if (allowedReferers.isEmpty()) {\n            throw new IllegalAllowedReferersException(\"Invalid List of allowed csrf referers must not be null or empty\",\n                    allowedReferersConfigProperty);\n        }\n        return allowedReferers;\n    }", "signature": "List<URI> parseAllowedReferers(String allowedReferersConfigProperty)", "full_signature": "public static List<URI> parseAllowedReferers(String allowedReferersConfigProperty)", "class_method_signature": "CsrfProtectionRefererFilter.parseAllowedReferers(String allowedReferersConfigProperty)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "split", "isEmpty", "contains", "getUserInfo", "getPath", "isEmpty", "getPath", "equals", "getPath", "getFragment", "getScheme", "equals", "getScheme", "equals", "getScheme", "getAuthority", "getHost", "add", "isEmpty"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}