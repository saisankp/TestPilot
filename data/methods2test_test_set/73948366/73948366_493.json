{"test_class": {"identifier": "Auth0JwtParserFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ClassLoader classLoader = this.getClass().getClassLoader();", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader = this.getClass().getClassLoader()", "var_name": "classLoader"}, {"original_string": "private final KeyStore baseKeyStore = new KeyStore() {\n        @Override\n        public String getPublicKey(String domain, String service, String keyId) {\n            return null;\n        }\n    };", "modifier": "private final", "type": "KeyStore", "declarator": "baseKeyStore = new KeyStore() {\n        @Override\n        public String getPublicKey(String domain, String service, String keyId) {\n            return null;\n        }\n    }", "var_name": "baseKeyStore"}], "file": "contributions/authority/auth0/src/test/java/com/yahoo/athenz/auth/oauth/auth0/Auth0JwtParserFactoryTest.java"}, "test_case": {"identifier": "testAuth0JwtParserFactory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAuth0JwtParserFactory() throws OAuthJwtAccessTokenException {\n        OAuthJwtAccessTokenParser parser = null;\n        Auth0JwtParserFactory factory = new Auth0JwtParserFactory();\n\n        // check internal\n        assertThrows(IllegalArgumentException.class, () -> factory.create(null));\n\n        // check default\n        parser = factory.create(baseKeyStore);\n        assertNotNull(parser);\n\n        String claimClientIdCache = Auth0Jwt.getClaimClientId();\n        // default client ID claim\n        System.clearProperty(\"athenz.auth.oauth.jwt.parser.auth0.claim_client_id\");\n        parser = factory.create(baseKeyStore);\n        assertEquals(Auth0Jwt.getClaimClientId(), \"https://myapp.example.com/client_id\");\n        // custom client ID claim\n        System.setProperty(\"athenz.auth.oauth.jwt.parser.auth0.claim_client_id\", \"https://Auth0JwtParserFactory.test/client_id\");\n        parser = factory.create(baseKeyStore);\n        System.clearProperty(\"athenz.auth.oauth.jwt.parser.auth0.claim_client_id\");\n        assertEquals(Auth0Jwt.getClaimClientId(), \"https://Auth0JwtParserFactory.test/client_id\");\n        Auth0Jwt.setClaimClientId(claimClientIdCache); // restore\n\n        String claimConfirmCache = Auth0Jwt.getClaimConfirm();\n        // default cnf claim\n        System.clearProperty(\"athenz.auth.oauth.jwt.parser.auth0.claim_confirm\");\n        parser = factory.create(baseKeyStore);\n        assertEquals(Auth0Jwt.getClaimConfirm(), \"https://myapp.example.com/cnf\");\n        // custom cnf claim\n        System.setProperty(\"athenz.auth.oauth.jwt.parser.auth0.claim_confirm\", \"https://Auth0JwtParserFactory.test/cnf\");\n        parser = factory.create(baseKeyStore);\n        System.clearProperty(\"athenz.auth.oauth.jwt.parser.auth0.claim_confirm\");\n        assertEquals(Auth0Jwt.getClaimConfirm(), \"https://Auth0JwtParserFactory.test/cnf\");\n        Auth0Jwt.setClaimConfirm(claimConfirmCache); // restore\n\n        String userDomainCache = Auth0Jwt.getUserDomain();\n        // default user domain\n        System.clearProperty(\"athenz.user_domain\");\n        parser = factory.create(baseKeyStore);\n        assertEquals(Auth0Jwt.getUserDomain(), \"user\");\n        // custom user domain\n        System.setProperty(\"athenz.user_domain\", \"test_user\");\n        parser = factory.create(baseKeyStore);\n        System.clearProperty(\"athenz.user_domain\");\n        assertEquals(Auth0Jwt.getUserDomain(), \"test_user\");\n        Auth0Jwt.setUserDomain(userDomainCache); // restore\n\n        // test JWKS URL\n        String jwtString = \"eyJraWQiOiJjOTk4NmVlMy03YjJhLTRkMjAtYjg2YS0wODM5ODU2ZjI1NDEiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJBdXRoMEp3dFBhcnNlckZhY3RvcnlUZXN0In0.FymtIiPJa_9R3xnHkint7sldcJaVdZvy4Y8ENX1SHh4-4tAfGSRVZThwwJhTuqQT8F2HyN-2fynI_lqv58a095MoNarUlLaFmywrmRnmW98fyrnAYNo-bOB7M_x_xnW8ei77y-kXVViK2k2PWAcLYlRUq3Un8XvO5HnzTpF9GjqZzOKdOpRIGFaDTchQ0Fj-gdfGoWfhhjIV4cFF6mJNaEzxgVaWE_f0gCoXNwM0dcgKAhQb1CzwvVMGaAPdqomgwXTOd_wyjIaLSXqMrv66fomjDxg7Kv99HB7P4suQAJUIRUF5gkcXWDrDUTvRqoWWHUVMH-9wOaYcILCybk3gP1ahIfecF6eaQz8P8mEqMMK-EPk6g2m-Tbybv1HS_-LzvCYDCFES8KtZ2FNUljOWW7eIr9Z6TUXKEr-DTs8tIh_SjNhqLM4d1dmZkNa48aHqjTyNqapj2AjWbyzKPqFxkVrs1IuNqH51ofIkRFZmqsBbwim3Ol_R4H78eim1zhISmiJxNuGdU9hCV0XnFm152t-U51MvFvRadm0Puxfw-uYThet2D42qPzA5vC2qLOLoa7NcvfCPxhPaG-yQNo0bHksJI3vkVCNB4vvJvWa112fbl4-Ds5NFQmIkNovg79MYgFmVBWl9FJ4UaSCH8nqB9nHaHQNFkRBzicGmRDiKu88\";\n        System.setProperty(\"athenz.auth.oauth.jwt.parser.jwks_url\", this.classLoader.getResource(\"jwt_jwks.json\").toString());\n        parser = factory.create(baseKeyStore);\n        System.clearProperty(\"athenz.auth.oauth.jwt.parser.jwks_url\");\n        OAuthJwtAccessToken token = parser.parse(jwtString);\n        assertEquals(token.getIssuer(), \"Auth0JwtParserFactoryTest\");\n    }", "signature": "void testAuth0JwtParserFactory()", "full_signature": "@Test public void testAuth0JwtParserFactory()", "class_method_signature": "Auth0JwtParserFactoryTest.testAuth0JwtParserFactory()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "create", "create", "assertNotNull", "getClaimClientId", "clearProperty", "create", "assertEquals", "getClaimClientId", "setProperty", "create", "clearProperty", "assertEquals", "getClaimClientId", "setClaimClientId", "getClaimConfirm", "clearProperty", "create", "assertEquals", "getClaimConfirm", "setProperty", "create", "clearProperty", "assertEquals", "getClaimConfirm", "setClaimConfirm", "getUserDomain", "clearProperty", "create", "assertEquals", "getUserDomain", "setProperty", "create", "clearProperty", "assertEquals", "getUserDomain", "setUserDomain", "setProperty", "toString", "getResource", "create", "clearProperty", "parse", "assertEquals", "getIssuer"]}, "focal_class": {"identifier": "Auth0JwtParserFactory", "superclass": "extends DefaultOAuthJwtAccessTokenParserFactory", "interfaces": "", "fields": [{"original_string": "public static final String CLAIM_CLIENT_ID = \"auth0.claim_client_id\";", "modifier": "public static final", "type": "String", "declarator": "CLAIM_CLIENT_ID = \"auth0.claim_client_id\"", "var_name": "CLAIM_CLIENT_ID"}, {"original_string": "public static final String CLAIM_CONFIRM = \"auth0.claim_confirm\";", "modifier": "public static final", "type": "String", "declarator": "CLAIM_CONFIRM = \"auth0.claim_confirm\"", "var_name": "CLAIM_CONFIRM"}], "methods": [{"identifier": "create", "parameters": "(KeyStore keyStore)", "modifiers": "@Override public", "return": "OAuthJwtAccessTokenParser", "signature": "OAuthJwtAccessTokenParser create(KeyStore keyStore)", "full_signature": "@Override public OAuthJwtAccessTokenParser create(KeyStore keyStore)", "class_method_signature": "Auth0JwtParserFactory.create(KeyStore keyStore)", "testcase": false, "constructor": false}], "file": "contributions/authority/auth0/src/main/java/com/yahoo/athenz/auth/oauth/auth0/Auth0JwtParserFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(KeyStore keyStore)", "modifiers": "@Override public", "return": "OAuthJwtAccessTokenParser", "body": "@Override\n    public OAuthJwtAccessTokenParser create(KeyStore keyStore) throws IllegalArgumentException {\n        Auth0Jwt.setClaimClientId(GET_PROPERTY.apply(CLAIM_CLIENT_ID, Auth0Jwt.getClaimClientId()));\n        Auth0Jwt.setClaimConfirm(GET_PROPERTY.apply(CLAIM_CONFIRM, Auth0Jwt.getClaimConfirm()));\n        Auth0Jwt.setUserDomain(System.getProperty(AuthorityConsts.ATHENZ_PROP_USER_DOMAIN, Auth0Jwt.getUserDomain()));\n\n        final String jwksUrl = GET_PROPERTY.apply(JWKS_URL, null);\n        return new Auth0JwtParser(keyStore, jwksUrl);\n    }", "signature": "OAuthJwtAccessTokenParser create(KeyStore keyStore)", "full_signature": "@Override public OAuthJwtAccessTokenParser create(KeyStore keyStore)", "class_method_signature": "Auth0JwtParserFactory.create(KeyStore keyStore)", "testcase": false, "constructor": false, "invocations": ["setClaimClientId", "apply", "getClaimClientId", "setClaimConfirm", "apply", "getClaimConfirm", "setUserDomain", "getProperty", "getUserDomain", "apply"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}