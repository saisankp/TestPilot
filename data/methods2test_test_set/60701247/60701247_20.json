{"test_class": {"identifier": "EventServiceProxyTest", "superclass": "", "interfaces": "", "fields": [], "file": "profilers-android/testSrc/com/android/tools/idea/profilers/perfd/EventServiceProxyTest.java"}, "test_case": {"identifier": "testBindServiceContainsAllMethods", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBindServiceContainsAllMethods() throws Exception {\n    IDevice mockDevice = mock(IDevice.class);\n    when(mockDevice.getSerialNumber()).thenReturn(\"Serial\");\n    when(mockDevice.getName()).thenReturn(\"Device\");\n    when(mockDevice.getVersion()).thenReturn(new AndroidVersion(1, \"API\"));\n    when(mockDevice.isOnline()).thenReturn(true);\n    when(mockDevice.getClients()).thenReturn(new Client[0]);\n    ManagedChannel channel = InProcessChannelBuilder.forName(\"EventServiceProxyTest\").build();\n    EventServiceProxy proxy = new EventServiceProxy(mockDevice, channel);\n\n    ServerServiceDefinition serverDefinition = proxy.getServiceDefinition();\n    Collection<MethodDescriptor<?, ?>> allMethods = EventServiceGrpc.getServiceDescriptor().getMethods();\n    Set<MethodDescriptor<?, ?>> definedMethods =\n      serverDefinition.getMethods().stream().map(method -> method.getMethodDescriptor()).collect(Collectors.toSet());\n    assertThat(definedMethods.size()).isEqualTo(allMethods.size());\n    definedMethods.containsAll(allMethods);\n  }", "signature": "void testBindServiceContainsAllMethods()", "full_signature": "@Test public void testBindServiceContainsAllMethods()", "class_method_signature": "EventServiceProxyTest.testBindServiceContainsAllMethods()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getSerialNumber", "thenReturn", "when", "getName", "thenReturn", "when", "getVersion", "thenReturn", "when", "isOnline", "thenReturn", "when", "getClients", "build", "forName", "getServiceDefinition", "getMethods", "getServiceDescriptor", "collect", "map", "stream", "getMethods", "getMethodDescriptor", "toSet", "isEqualTo", "assertThat", "size", "size", "containsAll"]}, "focal_class": {"identifier": "EventServiceProxy", "superclass": "extends ServiceProxy", "interfaces": "", "fields": [{"original_string": "private EventServiceGrpc.EventServiceBlockingStub myServiceStub;", "modifier": "private", "type": "EventServiceGrpc.EventServiceBlockingStub", "declarator": "myServiceStub", "var_name": "myServiceStub"}], "methods": [{"identifier": "EventServiceProxy", "parameters": "(@NotNull IDevice device, @NotNull ManagedChannel channel)", "modifiers": "public", "return": "", "signature": " EventServiceProxy(@NotNull IDevice device, @NotNull ManagedChannel channel)", "full_signature": "public  EventServiceProxy(@NotNull IDevice device, @NotNull ManagedChannel channel)", "class_method_signature": "EventServiceProxy.EventServiceProxy(@NotNull IDevice device, @NotNull ManagedChannel channel)", "testcase": false, "constructor": true}, {"identifier": "getServiceDefinition", "parameters": "()", "modifiers": "@Override public", "return": "ServerServiceDefinition", "signature": "ServerServiceDefinition getServiceDefinition()", "full_signature": "@Override public ServerServiceDefinition getServiceDefinition()", "class_method_signature": "EventServiceProxy.getServiceDefinition()", "testcase": false, "constructor": false}], "file": "profilers-android/src/com/android/tools/idea/profilers/perfd/EventServiceProxy.java"}, "focal_method": {"identifier": "getServiceDefinition", "parameters": "()", "modifiers": "@Override public", "return": "ServerServiceDefinition", "body": "@Override\n  public ServerServiceDefinition getServiceDefinition() {\n    return generatePassThroughDefinitions(Collections.emptyMap(), myServiceStub);\n  }", "signature": "ServerServiceDefinition getServiceDefinition()", "full_signature": "@Override public ServerServiceDefinition getServiceDefinition()", "class_method_signature": "EventServiceProxy.getServiceDefinition()", "testcase": false, "constructor": false, "invocations": ["generatePassThroughDefinitions", "emptyMap"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}