{"test_class": {"identifier": "XCNValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final XCNValidator validator = new XCNValidator();", "modifier": "private static final", "type": "XCNValidator", "declarator": "validator = new XCNValidator()", "var_name": "validator"}], "file": "commons/ihe/xds/src/test/java/org/openehealth/ipf/commons/ihe/xds/core/validate/XCNValidatorTest.java"}, "test_case": {"identifier": "testValidateGoodCases", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateGoodCases() throws XDSMetaDataException {\n        validator.validate(\"11375^Welby^Marcus^J^Jr. MD^Dr^^^&1.2.840.113619.6.197&ISO\");\n        validator.validate(\"11375^^^^^^^^&1.2.840.113619.6.197&ISO\");\n        validator.validate(\"abc^^^^^^^^&1.2.840.113619.6.197&ISO\");\n        validator.validate(\"^Welby^^^^^^^\");\n        validator.validate(\"^Welby\");\n        validator.validate(\"abc\");\n        validator.validate(\"abc^^^^^^^^\");\n    }", "signature": "void testValidateGoodCases()", "full_signature": "@Test public void testValidateGoodCases()", "class_method_signature": "XCNValidatorTest.testValidateGoodCases()", "testcase": true, "constructor": false, "invocations": ["validate", "validate", "validate", "validate", "validate", "validate", "validate"]}, "focal_class": {"identifier": "XCNValidator", "superclass": "", "interfaces": "implements ValueValidator", "fields": [{"original_string": "private static final HDValidator HD_VALIDATOR = new HDValidator();", "modifier": "private static final", "type": "HDValidator", "declarator": "HD_VALIDATOR = new HDValidator()", "var_name": "HD_VALIDATOR"}], "methods": [{"identifier": "validate", "parameters": "(String hl7xcn)", "modifiers": "@Override public", "return": "void", "signature": "void validate(String hl7xcn)", "full_signature": "@Override public void validate(String hl7xcn)", "class_method_signature": "XCNValidator.validate(String hl7xcn)", "testcase": false, "constructor": false}], "file": "commons/ihe/xds/src/main/java/org/openehealth/ipf/commons/ihe/xds/core/validate/XCNValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(String hl7xcn)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(String hl7xcn) throws XDSMetaDataException {\n        Person person = Hl7v2Based.parse(hl7xcn, Person.class);\n        metaDataAssert(person != null, PERSON_MISSING_NAME_AND_ID, hl7xcn);\n\n        XCN xcn = person.getHapiObject();\n        metaDataAssert(\n                isNotEmpty(xcn.getXcn1_IDNumber().getValue()) ||\n                isNotEmpty(xcn.getXcn2_FamilyName().getFn1_Surname().getValue()),\n                PERSON_MISSING_NAME_AND_ID, hl7xcn);\n\n//        Spec actually allows the assigning authority to be missing:\n//          \"If component 1 (ID Number) is specified, component 9 (Assigning Authority) shall be present if available\"\n//        metaDataAssert(idNumber == null || hl7hd != null, PERSON_HD_MISSING, hl7xcn);\n\n\n        HD hd = xcn.getXcn9_AssigningAuthority();\n        if (! HD_VALIDATOR.isEmpty(hd)) {\n            HD_VALIDATOR.validate(hd, hl7xcn);\n        }\n    }", "signature": "void validate(String hl7xcn)", "full_signature": "@Override public void validate(String hl7xcn)", "class_method_signature": "XCNValidator.validate(String hl7xcn)", "testcase": false, "constructor": false, "invocations": ["parse", "metaDataAssert", "getHapiObject", "metaDataAssert", "isNotEmpty", "getValue", "getXcn1_IDNumber", "isNotEmpty", "getValue", "getFn1_Surname", "getXcn2_FamilyName", "getXcn9_AssigningAuthority", "isEmpty", "validate"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}