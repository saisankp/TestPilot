{"test_class": {"identifier": "CpuProfilerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int FAKE_PID = 1234;", "modifier": "private static final", "type": "int", "declarator": "FAKE_PID = 1234", "var_name": "FAKE_PID"}, {"original_string": "private static final Common.Session FAKE_SESSION = Common.Session.newBuilder().setSessionId(4321).setPid(FAKE_PID).build();", "modifier": "private static final", "type": "Common.Session", "declarator": "FAKE_SESSION = Common.Session.newBuilder().setSessionId(4321).setPid(FAKE_PID).build()", "var_name": "FAKE_SESSION"}, {"original_string": "private final FakeTimer myTimer = new FakeTimer();", "modifier": "private final", "type": "FakeTimer", "declarator": "myTimer = new FakeTimer()", "var_name": "myTimer"}, {"original_string": "private final FakeTransportService myTransportService = new FakeTransportService(myTimer);", "modifier": "private final", "type": "FakeTransportService", "declarator": "myTransportService = new FakeTransportService(myTimer)", "var_name": "myTransportService"}, {"original_string": "private final FakeProfilerService myProfilerService = new FakeProfilerService(myTimer);", "modifier": "private final", "type": "FakeProfilerService", "declarator": "myProfilerService = new FakeProfilerService(myTimer)", "var_name": "myProfilerService"}, {"original_string": "private final FakeCpuService myCpuService = new FakeCpuService();", "modifier": "private final", "type": "FakeCpuService", "declarator": "myCpuService = new FakeCpuService()", "var_name": "myCpuService"}, {"original_string": "@Rule\n  public FakeGrpcChannel myGrpcChannel =\n    new FakeGrpcChannel(\"CpuProfilerTest\", myTransportService, myProfilerService, new FakeMemoryService(), myCpuService,\n                        new FakeEventService(), new FakeNetworkService.Builder().build(), new FakeEnergyService());", "modifier": "@Rule\n  public", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel =\n    new FakeGrpcChannel(\"CpuProfilerTest\", myTransportService, myProfilerService, new FakeMemoryService(), myCpuService,\n                        new FakeEventService(), new FakeNetworkService.Builder().build(), new FakeEnergyService())", "var_name": "myGrpcChannel"}, {"original_string": "@Rule public final ExpectedException myExpectedException = ExpectedException.none();", "modifier": "@Rule public final", "type": "ExpectedException", "declarator": "myExpectedException = ExpectedException.none()", "var_name": "myExpectedException"}, {"original_string": "private CpuProfiler myCpuProfiler;", "modifier": "private", "type": "CpuProfiler", "declarator": "myCpuProfiler", "var_name": "myCpuProfiler"}, {"original_string": "private FakeIdeProfilerServices myIdeServices;", "modifier": "private", "type": "FakeIdeProfilerServices", "declarator": "myIdeServices", "var_name": "myIdeServices"}, {"original_string": "private StudioProfilers myProfilers;", "modifier": "private", "type": "StudioProfilers", "declarator": "myProfilers", "var_name": "myProfilers"}, {"original_string": "private final boolean myUnifiedPipeline;", "modifier": "private final", "type": "boolean", "declarator": "myUnifiedPipeline", "var_name": "myUnifiedPipeline"}], "file": "profilers/testSrc/com/android/tools/profilers/cpu/CpuProfilerTest.java"}, "test_case": {"identifier": "testGetTraceInfoFromSession", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetTraceInfoFromSession() {\n    Assume.assumeTrue(myUnifiedPipeline);\n\n    Common.Session session = myProfilers.getSession();\n\n    // Insert a completed CpuTraceInfo.\n    Cpu.CpuTraceInfo info1 = Cpu.CpuTraceInfo.newBuilder()\n      .setTraceId(1).setFromTimestamp(1).setToTimestamp(2)\n      .setStartStatus(Cpu.TraceStartStatus.newBuilder().setStatus(Cpu.TraceStartStatus.Status.SUCCESS))\n      .setStopStatus(Cpu.TraceStopStatus.newBuilder().setStatus(Cpu.TraceStopStatus.Status.SUCCESS))\n      .build();\n    myTransportService.addEventToStream(\n      session.getStreamId(),\n      Common.Event.newBuilder().setGroupId(1).setPid(session.getPid())\n        .setIsEnded(true).setKind(Common.Event.Kind.CPU_TRACE).setTimestamp(1)\n        .setCpuTrace(Cpu.CpuTraceData.newBuilder().setTraceEnded(Cpu.CpuTraceData.TraceEnded.newBuilder().setTraceInfo(info1))).build());\n\n    List<Cpu.CpuTraceInfo> infos = CpuProfiler.getTraceInfoFromSession(myProfilers.getClient(), session, myUnifiedPipeline);\n    assertThat(infos).containsExactly(info1);\n\n    // Insert a not yet completed info followed up by a generic end event.\n    Cpu.CpuTraceInfo info2 = Cpu.CpuTraceInfo.newBuilder()\n      .setTraceId(5).setFromTimestamp(5).setToTimestamp(-1)\n      .setStartStatus(Cpu.TraceStartStatus.newBuilder().setStatus(Cpu.TraceStartStatus.Status.SUCCESS))\n      .build();\n    myTransportService.addEventToStream(\n      session.getStreamId(),\n      Common.Event.newBuilder().setGroupId(5).setPid(session.getPid()).setKind(Common.Event.Kind.CPU_TRACE).setTimestamp(5)\n        .setCpuTrace(Cpu.CpuTraceData.newBuilder().setTraceStarted(Cpu.CpuTraceData.TraceStarted.newBuilder().setTraceInfo(info2)))\n        .build());\n    myTransportService.addEventToStream(\n      session.getStreamId(),\n      Common.Event.newBuilder()\n        .setTimestamp(10).setGroupId(5).setKind(Common.Event.Kind.CPU_TRACE).setPid(session.getPid()).setIsEnded(true).build());\n    infos = CpuProfiler.getTraceInfoFromSession(myProfilers.getClient(), session, myUnifiedPipeline);\n    assertThat(infos)\n      .containsExactly(info1, info2.toBuilder().setToTimestamp(session.getEndTimestamp())\n        .setStopStatus(Cpu.TraceStopStatus.newBuilder().setStatus(Cpu.TraceStopStatus.Status.APP_PROCESS_DIED)).build());\n  }", "signature": "void testGetTraceInfoFromSession()", "full_signature": "@Test public void testGetTraceInfoFromSession()", "class_method_signature": "CpuProfilerTest.testGetTraceInfoFromSession()", "testcase": true, "constructor": false, "invocations": ["assumeTrue", "getSession", "build", "setStopStatus", "setStartStatus", "setToTimestamp", "setFromTimestamp", "setTraceId", "newBuilder", "setStatus", "newBuilder", "setStatus", "newBuilder", "addEventToStream", "getStreamId", "build", "setCpuTrace", "setTimestamp", "setKind", "setIsEnded", "setPid", "setGroupId", "newBuilder", "getPid", "setTraceEnded", "newBuilder", "setTraceInfo", "newBuilder", "getTraceInfoFromSession", "getClient", "containsExactly", "assertThat", "build", "setStartStatus", "setToTimestamp", "setFromTimestamp", "setTraceId", "newBuilder", "setStatus", "newBuilder", "addEventToStream", "getStreamId", "build", "setCpuTrace", "setTimestamp", "setKind", "setPid", "setGroupId", "newBuilder", "getPid", "setTraceStarted", "newBuilder", "setTraceInfo", "newBuilder", "addEventToStream", "getStreamId", "build", "setIsEnded", "setPid", "setKind", "setGroupId", "setTimestamp", "newBuilder", "getPid", "getTraceInfoFromSession", "getClient", "containsExactly", "assertThat", "build", "setStopStatus", "setToTimestamp", "toBuilder", "getEndTimestamp", "setStatus", "newBuilder"]}, "focal_class": {"identifier": "CpuProfiler", "superclass": "extends StudioProfiler", "interfaces": "", "fields": [{"original_string": "@NotNull\n  private final Map<Long, File> mySessionTraceFiles;", "modifier": "@NotNull\n  private final", "type": "Map<Long, File>", "declarator": "mySessionTraceFiles", "var_name": "mySessionTraceFiles"}], "methods": [{"identifier": "CpuProfiler", "parameters": "(@NotNull StudioProfilers profilers)", "modifiers": "public", "return": "", "signature": " CpuProfiler(@NotNull StudioProfilers profilers)", "full_signature": "public  CpuProfiler(@NotNull StudioProfilers profilers)", "class_method_signature": "CpuProfiler.CpuProfiler(@NotNull StudioProfilers profilers)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void run()", "full_signature": "private void run()", "class_method_signature": "CpuProfiler.run()", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "private static", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "private static Logger getLogger()", "class_method_signature": "CpuProfiler.getLogger()", "testcase": false, "constructor": false}, {"identifier": "registerImportedSessionListener", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerImportedSessionListener()", "full_signature": "private void registerImportedSessionListener()", "class_method_signature": "CpuProfiler.registerImportedSessionListener()", "testcase": false, "constructor": false}, {"identifier": "registerTraceImportHandler", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerTraceImportHandler()", "full_signature": "private void registerTraceImportHandler()", "class_method_signature": "CpuProfiler.registerTraceImportHandler()", "testcase": false, "constructor": false}, {"identifier": "getTraceFile", "parameters": "(Common.Session session)", "modifiers": "@Nullable public", "return": "File", "signature": "File getTraceFile(Common.Session session)", "full_signature": "@Nullable public File getTraceFile(Common.Session session)", "class_method_signature": "CpuProfiler.getTraceFile(Common.Session session)", "testcase": false, "constructor": false}, {"identifier": "newMonitor", "parameters": "()", "modifiers": "@Override public", "return": "ProfilerMonitor", "signature": "ProfilerMonitor newMonitor()", "full_signature": "@Override public ProfilerMonitor newMonitor()", "class_method_signature": "CpuProfiler.newMonitor()", "testcase": false, "constructor": false}, {"identifier": "startProfiling", "parameters": "(Common.Session session)", "modifiers": "@Override public", "return": "void", "signature": "void startProfiling(Common.Session session)", "full_signature": "@Override public void startProfiling(Common.Session session)", "class_method_signature": "CpuProfiler.startProfiling(Common.Session session)", "testcase": false, "constructor": false}, {"identifier": "stopProfiling", "parameters": "(Common.Session session)", "modifiers": "@Override public", "return": "void", "signature": "void stopProfiling(Common.Session session)", "full_signature": "@Override public void stopProfiling(Common.Session session)", "class_method_signature": "CpuProfiler.stopProfiling(Common.Session session)", "testcase": false, "constructor": false}, {"identifier": "saveCaptureToFile", "parameters": "(@NotNull StudioProfilers profilers, @NotNull CpuTraceInfo info, @NotNull OutputStream outputStream)", "modifiers": "static", "return": "void", "signature": "void saveCaptureToFile(@NotNull StudioProfilers profilers, @NotNull CpuTraceInfo info, @NotNull OutputStream outputStream)", "full_signature": "static void saveCaptureToFile(@NotNull StudioProfilers profilers, @NotNull CpuTraceInfo info, @NotNull OutputStream outputStream)", "class_method_signature": "CpuProfiler.saveCaptureToFile(@NotNull StudioProfilers profilers, @NotNull CpuTraceInfo info, @NotNull OutputStream outputStream)", "testcase": false, "constructor": false}, {"identifier": "generateCaptureFileName", "parameters": "(@NotNull CpuTraceType profilerType)", "modifiers": "@NotNull static", "return": "String", "signature": "String generateCaptureFileName(@NotNull CpuTraceType profilerType)", "full_signature": "@NotNull static String generateCaptureFileName(@NotNull CpuTraceType profilerType)", "class_method_signature": "CpuProfiler.generateCaptureFileName(@NotNull CpuTraceType profilerType)", "testcase": false, "constructor": false}, {"identifier": "getTraceInfoFromRange", "parameters": "(@NotNull ProfilerClient client,\n                                                         @NotNull Common.Session session,\n                                                         @NotNull Range rangeUs,\n                                                         boolean newPipeline)", "modifiers": "@NotNull public static", "return": "List<CpuTraceInfo>", "signature": "List<CpuTraceInfo> getTraceInfoFromRange(@NotNull ProfilerClient client,\n                                                         @NotNull Common.Session session,\n                                                         @NotNull Range rangeUs,\n                                                         boolean newPipeline)", "full_signature": "@NotNull public static List<CpuTraceInfo> getTraceInfoFromRange(@NotNull ProfilerClient client,\n                                                         @NotNull Common.Session session,\n                                                         @NotNull Range rangeUs,\n                                                         boolean newPipeline)", "class_method_signature": "CpuProfiler.getTraceInfoFromRange(@NotNull ProfilerClient client,\n                                                         @NotNull Common.Session session,\n                                                         @NotNull Range rangeUs,\n                                                         boolean newPipeline)", "testcase": false, "constructor": false}, {"identifier": "getTraceInfoFromId", "parameters": "(@NotNull StudioProfilers profilers, long traceId)", "modifiers": "@NotNull public static", "return": "CpuTraceInfo", "signature": "CpuTraceInfo getTraceInfoFromId(@NotNull StudioProfilers profilers, long traceId)", "full_signature": "@NotNull public static CpuTraceInfo getTraceInfoFromId(@NotNull StudioProfilers profilers, long traceId)", "class_method_signature": "CpuProfiler.getTraceInfoFromId(@NotNull StudioProfilers profilers, long traceId)", "testcase": false, "constructor": false}, {"identifier": "getTraceInfoFromSession", "parameters": "(@NotNull ProfilerClient client,\n                                                           @NotNull Common.Session session,\n                                                           boolean newPipeline)", "modifiers": "@NotNull public static", "return": "List<CpuTraceInfo>", "signature": "List<CpuTraceInfo> getTraceInfoFromSession(@NotNull ProfilerClient client,\n                                                           @NotNull Common.Session session,\n                                                           boolean newPipeline)", "full_signature": "@NotNull public static List<CpuTraceInfo> getTraceInfoFromSession(@NotNull ProfilerClient client,\n                                                           @NotNull Common.Session session,\n                                                           boolean newPipeline)", "class_method_signature": "CpuProfiler.getTraceInfoFromSession(@NotNull ProfilerClient client,\n                                                           @NotNull Common.Session session,\n                                                           boolean newPipeline)", "testcase": false, "constructor": false}, {"identifier": "getTraceStatusEventFromId", "parameters": "(@NotNull StudioProfilers profilers, long traceId)", "modifiers": "@NotNull public static", "return": "Common.Event", "signature": "Common.Event getTraceStatusEventFromId(@NotNull StudioProfilers profilers, long traceId)", "full_signature": "@NotNull public static Common.Event getTraceStatusEventFromId(@NotNull StudioProfilers profilers, long traceId)", "class_method_signature": "CpuProfiler.getTraceStatusEventFromId(@NotNull StudioProfilers profilers, long traceId)", "testcase": false, "constructor": false}, {"identifier": "stopTracing", "parameters": "(@NotNull StudioProfilers profilers,\n                                 @NotNull Common.Session session,\n                                 @NotNull Cpu.CpuTraceConfiguration configuration,\n                                 @Nullable Consumer<Cpu.TraceStopStatus> responseHandler)", "modifiers": "public static", "return": "void", "signature": "void stopTracing(@NotNull StudioProfilers profilers,\n                                 @NotNull Common.Session session,\n                                 @NotNull Cpu.CpuTraceConfiguration configuration,\n                                 @Nullable Consumer<Cpu.TraceStopStatus> responseHandler)", "full_signature": "public static void stopTracing(@NotNull StudioProfilers profilers,\n                                 @NotNull Common.Session session,\n                                 @NotNull Cpu.CpuTraceConfiguration configuration,\n                                 @Nullable Consumer<Cpu.TraceStopStatus> responseHandler)", "class_method_signature": "CpuProfiler.stopTracing(@NotNull StudioProfilers profilers,\n                                 @NotNull Common.Session session,\n                                 @NotNull Cpu.CpuTraceConfiguration configuration,\n                                 @Nullable Consumer<Cpu.TraceStopStatus> responseHandler)", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/cpu/CpuProfiler.java"}, "focal_method": {"identifier": "getTraceInfoFromSession", "parameters": "(@NotNull ProfilerClient client,\n                                                           @NotNull Common.Session session,\n                                                           boolean newPipeline)", "modifiers": "@NotNull public static", "return": "List<CpuTraceInfo>", "body": "@NotNull\n  public static List<CpuTraceInfo> getTraceInfoFromSession(@NotNull ProfilerClient client,\n                                                           @NotNull Common.Session session,\n                                                           boolean newPipeline) {\n    return getTraceInfoFromRange(client, session, new Range(Long.MIN_VALUE, Long.MAX_VALUE), newPipeline);\n  }", "signature": "List<CpuTraceInfo> getTraceInfoFromSession(@NotNull ProfilerClient client,\n                                                           @NotNull Common.Session session,\n                                                           boolean newPipeline)", "full_signature": "@NotNull public static List<CpuTraceInfo> getTraceInfoFromSession(@NotNull ProfilerClient client,\n                                                           @NotNull Common.Session session,\n                                                           boolean newPipeline)", "class_method_signature": "CpuProfiler.getTraceInfoFromSession(@NotNull ProfilerClient client,\n                                                           @NotNull Common.Session session,\n                                                           boolean newPipeline)", "testcase": false, "constructor": false, "invocations": ["getTraceInfoFromRange"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}