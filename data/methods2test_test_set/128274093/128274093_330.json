{"test_class": {"identifier": "SingleSchedulerTest", "superclass": "extends AbstractSchedulerTests", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/schedulers/SingleSchedulerTest.java"}, "test_case": {"identifier": "runnableDisposedAsyncCrash", "parameters": "()", "modifiers": "@Test(timeout = 1000) public", "return": "void", "body": "@Test(timeout = 1000)\n    public void runnableDisposedAsyncCrash() throws Exception {\n        final Scheduler s = Schedulers.single();\n\n        Disposable d = s.scheduleDirect(new Runnable() {\n            @Override\n            public void run() {\n                throw new IllegalStateException();\n            }\n        });\n\n        while (!d.isDisposed()) {\n            Thread.sleep(1);\n        }\n    }", "signature": "void runnableDisposedAsyncCrash()", "full_signature": "@Test(timeout = 1000) public void runnableDisposedAsyncCrash()", "class_method_signature": "SingleSchedulerTest.runnableDisposedAsyncCrash()", "testcase": true, "constructor": false, "invocations": ["single", "scheduleDirect", "isDisposed", "sleep"]}, "focal_class": {"identifier": "SingleScheduler", "superclass": "extends Scheduler", "interfaces": "", "fields": [{"original_string": "final ThreadFactory threadFactory;", "modifier": "final", "type": "ThreadFactory", "declarator": "threadFactory", "var_name": "threadFactory"}, {"original_string": "final AtomicReference<ScheduledExecutorService> executor = new AtomicReference<ScheduledExecutorService>();", "modifier": "final", "type": "AtomicReference<ScheduledExecutorService>", "declarator": "executor = new AtomicReference<ScheduledExecutorService>()", "var_name": "executor"}, {"original_string": "private static final String KEY_SINGLE_PRIORITY = \"rx2.single-priority\";", "modifier": "private static final", "type": "String", "declarator": "KEY_SINGLE_PRIORITY = \"rx2.single-priority\"", "var_name": "KEY_SINGLE_PRIORITY"}, {"original_string": "private static final String THREAD_NAME_PREFIX = \"RxSingleScheduler\";", "modifier": "private static final", "type": "String", "declarator": "THREAD_NAME_PREFIX = \"RxSingleScheduler\"", "var_name": "THREAD_NAME_PREFIX"}, {"original_string": "static final RxThreadFactory SINGLE_THREAD_FACTORY;", "modifier": "static final", "type": "RxThreadFactory", "declarator": "SINGLE_THREAD_FACTORY", "var_name": "SINGLE_THREAD_FACTORY"}, {"original_string": "static final ScheduledExecutorService SHUTDOWN;", "modifier": "static final", "type": "ScheduledExecutorService", "declarator": "SHUTDOWN", "var_name": "SHUTDOWN"}], "methods": [{"identifier": "SingleScheduler", "parameters": "()", "modifiers": "public", "return": "", "signature": " SingleScheduler()", "full_signature": "public  SingleScheduler()", "class_method_signature": "SingleScheduler.SingleScheduler()", "testcase": false, "constructor": true}, {"identifier": "SingleScheduler", "parameters": "(ThreadFactory threadFactory)", "modifiers": "public", "return": "", "signature": " SingleScheduler(ThreadFactory threadFactory)", "full_signature": "public  SingleScheduler(ThreadFactory threadFactory)", "class_method_signature": "SingleScheduler.SingleScheduler(ThreadFactory threadFactory)", "testcase": false, "constructor": true}, {"identifier": "createExecutor", "parameters": "(ThreadFactory threadFactory)", "modifiers": "static", "return": "ScheduledExecutorService", "signature": "ScheduledExecutorService createExecutor(ThreadFactory threadFactory)", "full_signature": "static ScheduledExecutorService createExecutor(ThreadFactory threadFactory)", "class_method_signature": "SingleScheduler.createExecutor(ThreadFactory threadFactory)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "SingleScheduler.start()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "SingleScheduler.shutdown()", "testcase": false, "constructor": false}, {"identifier": "createWorker", "parameters": "()", "modifiers": "@NonNull @Override public", "return": "Worker", "signature": "Worker createWorker()", "full_signature": "@NonNull @Override public Worker createWorker()", "class_method_signature": "SingleScheduler.createWorker()", "testcase": false, "constructor": false}, {"identifier": "scheduleDirect", "parameters": "(@NonNull Runnable run, long delay, TimeUnit unit)", "modifiers": "@NonNull @Override public", "return": "Disposable", "signature": "Disposable scheduleDirect(@NonNull Runnable run, long delay, TimeUnit unit)", "full_signature": "@NonNull @Override public Disposable scheduleDirect(@NonNull Runnable run, long delay, TimeUnit unit)", "class_method_signature": "SingleScheduler.scheduleDirect(@NonNull Runnable run, long delay, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "schedulePeriodicallyDirect", "parameters": "(@NonNull Runnable run, long initialDelay, long period, TimeUnit unit)", "modifiers": "@NonNull @Override public", "return": "Disposable", "signature": "Disposable schedulePeriodicallyDirect(@NonNull Runnable run, long initialDelay, long period, TimeUnit unit)", "full_signature": "@NonNull @Override public Disposable schedulePeriodicallyDirect(@NonNull Runnable run, long initialDelay, long period, TimeUnit unit)", "class_method_signature": "SingleScheduler.schedulePeriodicallyDirect(@NonNull Runnable run, long initialDelay, long period, TimeUnit unit)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/schedulers/SingleScheduler.java"}, "focal_method": {"identifier": "scheduleDirect", "parameters": "(@NonNull Runnable run, long delay, TimeUnit unit)", "modifiers": "@NonNull @Override public", "return": "Disposable", "body": "@NonNull\n    @Override\n    public Disposable scheduleDirect(@NonNull Runnable run, long delay, TimeUnit unit) {\n        ScheduledDirectTask task = new ScheduledDirectTask(RxJavaPlugins.onSchedule(run));\n        try {\n            Future<?> f;\n            if (delay <= 0L) {\n                f = executor.get().submit(task);\n            } else {\n                f = executor.get().schedule(task, delay, unit);\n            }\n            task.setFuture(f);\n            return task;\n        } catch (RejectedExecutionException ex) {\n            RxJavaPlugins.onError(ex);\n            return EmptyDisposable.INSTANCE;\n        }\n    }", "signature": "Disposable scheduleDirect(@NonNull Runnable run, long delay, TimeUnit unit)", "full_signature": "@NonNull @Override public Disposable scheduleDirect(@NonNull Runnable run, long delay, TimeUnit unit)", "class_method_signature": "SingleScheduler.scheduleDirect(@NonNull Runnable run, long delay, TimeUnit unit)", "testcase": false, "constructor": false, "invocations": ["onSchedule", "submit", "get", "schedule", "get", "setFuture", "onError"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}