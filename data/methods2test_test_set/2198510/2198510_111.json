{"test_class": {"identifier": "TestEventBuilder", "superclass": "", "interfaces": "", "fields": [], "file": "flume-ng-sdk/src/test/java/org/apache/flume/event/TestEventBuilder.java"}, "test_case": {"identifier": "testHeaders", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testHeaders() {\n    Map<String, String> headers = new HashMap<String, String>();\n\n    headers.put(\"one\", \"1\");\n    headers.put(\"two\", \"2\");\n\n    Event e1 = EventBuilder.withBody(\"e1\".getBytes(), headers);\n\n    Assert.assertNotNull(e1);\n    Assert.assertArrayEquals(\"e1 has the proper body\", \"e1\".getBytes(),\n        e1.getBody());\n    Assert.assertEquals(\"e1 has the proper headers\", 2, e1.getHeaders().size());\n    Assert.assertEquals(\"e1 has a one key\", \"1\", e1.getHeaders().get(\"one\"));\n  }", "signature": "void testHeaders()", "full_signature": "@Test public void testHeaders()", "class_method_signature": "TestEventBuilder.testHeaders()", "testcase": true, "constructor": false, "invocations": ["put", "put", "withBody", "getBytes", "assertNotNull", "assertArrayEquals", "getBytes", "getBody", "assertEquals", "size", "getHeaders", "assertEquals", "get", "getHeaders"]}, "focal_class": {"identifier": "EventBuilder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "withBody", "parameters": "(byte[] body, Map<String, String> headers)", "modifiers": "public static", "return": "Event", "signature": "Event withBody(byte[] body, Map<String, String> headers)", "full_signature": "public static Event withBody(byte[] body, Map<String, String> headers)", "class_method_signature": "EventBuilder.withBody(byte[] body, Map<String, String> headers)", "testcase": false, "constructor": false}, {"identifier": "withBody", "parameters": "(byte[] body)", "modifiers": "public static", "return": "Event", "signature": "Event withBody(byte[] body)", "full_signature": "public static Event withBody(byte[] body)", "class_method_signature": "EventBuilder.withBody(byte[] body)", "testcase": false, "constructor": false}, {"identifier": "withBody", "parameters": "(String body, Charset charset,\n      Map<String, String> headers)", "modifiers": "public static", "return": "Event", "signature": "Event withBody(String body, Charset charset,\n      Map<String, String> headers)", "full_signature": "public static Event withBody(String body, Charset charset,\n      Map<String, String> headers)", "class_method_signature": "EventBuilder.withBody(String body, Charset charset,\n      Map<String, String> headers)", "testcase": false, "constructor": false}, {"identifier": "withBody", "parameters": "(String body, Charset charset)", "modifiers": "public static", "return": "Event", "signature": "Event withBody(String body, Charset charset)", "full_signature": "public static Event withBody(String body, Charset charset)", "class_method_signature": "EventBuilder.withBody(String body, Charset charset)", "testcase": false, "constructor": false}], "file": "flume-ng-sdk/src/main/java/org/apache/flume/event/EventBuilder.java"}, "focal_method": {"identifier": "withBody", "parameters": "(byte[] body, Map<String, String> headers)", "modifiers": "public static", "return": "Event", "body": "public static Event withBody(byte[] body, Map<String, String> headers) {\n    Event event = new SimpleEvent();\n\n    if (body == null) {\n      body = new byte[0];\n    }\n    event.setBody(body);\n\n    if (headers != null) {\n      event.setHeaders(new HashMap<String, String>(headers));\n    }\n\n    return event;\n  }", "signature": "Event withBody(byte[] body, Map<String, String> headers)", "full_signature": "public static Event withBody(byte[] body, Map<String, String> headers)", "class_method_signature": "EventBuilder.withBody(byte[] body, Map<String, String> headers)", "testcase": false, "constructor": false, "invocations": ["setBody", "setHeaders"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}