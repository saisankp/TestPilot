{"test_class": {"identifier": "RadixTrieTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public ExpectedException exception = ExpectedException.none();", "modifier": "@Rule public", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}], "file": "rut/src/test/java/io/norberg/rut/RadixTrieTest.java"}, "test_case": {"identifier": "verifyUnknownCaptureTypeThrows", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void verifyUnknownCaptureTypeThrows() {\n    RadixTrie.builder(String.class).insert(\"<foo:bar>\", \"foo\");\n  }", "signature": "void verifyUnknownCaptureTypeThrows()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void verifyUnknownCaptureTypeThrows()", "class_method_signature": "RadixTrieTest.verifyUnknownCaptureTypeThrows()", "testcase": true, "constructor": false, "invocations": ["insert", "builder"]}, "focal_class": {"identifier": "RadixTrie", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Charset ASCII = Charset.forName(\"US-ASCII\");", "modifier": "private static final", "type": "Charset", "declarator": "ASCII = Charset.forName(\"US-ASCII\")", "var_name": "ASCII"}, {"original_string": "private static final byte CAPTURE_SEG = -128;", "modifier": "private static final", "type": "byte", "declarator": "CAPTURE_SEG = -128", "var_name": "CAPTURE_SEG"}, {"original_string": "private static final byte CAPTURE_PATH = -127;", "modifier": "private static final", "type": "byte", "declarator": "CAPTURE_PATH = -127", "var_name": "CAPTURE_PATH"}, {"original_string": "private static final byte SLASH = '/';", "modifier": "private static final", "type": "byte", "declarator": "SLASH = '/'", "var_name": "SLASH"}, {"original_string": "private static final byte QUERY = '?';", "modifier": "private static final", "type": "byte", "declarator": "QUERY = '?'", "var_name": "QUERY"}, {"original_string": "private final Node<T> root;", "modifier": "private final", "type": "Node<T>", "declarator": "root", "var_name": "root"}, {"original_string": "private final int captures;", "modifier": "private final", "type": "int", "declarator": "captures", "var_name": "captures"}], "methods": [{"identifier": "RadixTrie", "parameters": "(final Node<T> root)", "modifiers": "", "return": "", "signature": " RadixTrie(final Node<T> root)", "full_signature": "  RadixTrie(final Node<T> root)", "class_method_signature": "RadixTrie.RadixTrie(final Node<T> root)", "testcase": false, "constructor": true}, {"identifier": "lookup", "parameters": "(final CharSequence path)", "modifiers": "", "return": "T", "signature": "T lookup(final CharSequence path)", "full_signature": " T lookup(final CharSequence path)", "class_method_signature": "RadixTrie.lookup(final CharSequence path)", "testcase": false, "constructor": false}, {"identifier": "lookup", "parameters": "(final CharSequence path, final Captor captor)", "modifiers": "", "return": "T", "signature": "T lookup(final CharSequence path, final Captor captor)", "full_signature": " T lookup(final CharSequence path, final Captor captor)", "class_method_signature": "RadixTrie.lookup(final CharSequence path, final Captor captor)", "testcase": false, "constructor": false}, {"identifier": "captures", "parameters": "()", "modifiers": "", "return": "int", "signature": "int captures()", "full_signature": " int captures()", "class_method_signature": "RadixTrie.captures()", "testcase": false, "constructor": false}, {"identifier": "captor", "parameters": "()", "modifiers": "", "return": "Captor", "signature": "Captor captor()", "full_signature": " Captor captor()", "class_method_signature": "RadixTrie.captor()", "testcase": false, "constructor": false}, {"identifier": "captor", "parameters": "(final int captures)", "modifiers": "static", "return": "Captor", "signature": "Captor captor(final int captures)", "full_signature": "static Captor captor(final int captures)", "class_method_signature": "RadixTrie.captor(final int captures)", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "()", "modifiers": "static", "return": "Builder<T>", "signature": "Builder<T> builder()", "full_signature": "static Builder<T> builder()", "class_method_signature": "RadixTrie.builder()", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "(Class<T> clazz)", "modifiers": "@SuppressWarnings(\"UnusedParameters\") static", "return": "Builder<T>", "signature": "Builder<T> builder(Class<T> clazz)", "full_signature": "@SuppressWarnings(\"UnusedParameters\") static Builder<T> builder(Class<T> clazz)", "class_method_signature": "RadixTrie.builder(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "prefixes", "parameters": "(Node<T> node)", "modifiers": "private static", "return": "String", "signature": "String prefixes(Node<T> node)", "full_signature": "private static String prefixes(Node<T> node)", "class_method_signature": "RadixTrie.prefixes(Node<T> node)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RadixTrie.toString()", "testcase": false, "constructor": false}], "file": "rut/src/main/java/io/norberg/rut/RadixTrie.java"}, "focal_method": {"identifier": "builder", "parameters": "()", "modifiers": "static", "return": "Builder<T>", "body": "static <T> Builder<T> builder() {\n    return new Builder<T>();\n  }", "signature": "Builder<T> builder()", "full_signature": "static Builder<T> builder()", "class_method_signature": "RadixTrie.builder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 30616178, "url": "https://github.com/danielnorberg/rut", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 18, "size": 221, "license": "licensed"}}