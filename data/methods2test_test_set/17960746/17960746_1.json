{"test_class": {"identifier": "DefineListTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<String> DEFINE_NAMES = Arrays.asList(\"BOOL_VAR\", \"INT_VAR\", \"FLOAT_VAR\");", "modifier": "private static final", "type": "List<String>", "declarator": "DEFINE_NAMES = Arrays.asList(\"BOOL_VAR\", \"INT_VAR\", \"FLOAT_VAR\")", "var_name": "DEFINE_NAMES"}, {"original_string": "private static final List<VarType> DEFINE_TYPES = Arrays.asList(VarType.Boolean, VarType.Int, VarType.Float);", "modifier": "private static final", "type": "List<VarType>", "declarator": "DEFINE_TYPES = Arrays.asList(VarType.Boolean, VarType.Int, VarType.Float)", "var_name": "DEFINE_TYPES"}, {"original_string": "private static final int NUM_DEFINES = DEFINE_NAMES.size();", "modifier": "private static final", "type": "int", "declarator": "NUM_DEFINES = DEFINE_NAMES.size()", "var_name": "NUM_DEFINES"}, {"original_string": "private static final int BOOL_VAR = 0;", "modifier": "private static final", "type": "int", "declarator": "BOOL_VAR = 0", "var_name": "BOOL_VAR"}, {"original_string": "private static final int INT_VAR = 1;", "modifier": "private static final", "type": "int", "declarator": "INT_VAR = 1", "var_name": "INT_VAR"}, {"original_string": "private static final int FLOAT_VAR = 2;", "modifier": "private static final", "type": "int", "declarator": "FLOAT_VAR = 2", "var_name": "FLOAT_VAR"}, {"original_string": "private static final DefineList EMPTY = new DefineList(NUM_DEFINES);", "modifier": "private static final", "type": "DefineList", "declarator": "EMPTY = new DefineList(NUM_DEFINES)", "var_name": "EMPTY"}], "file": "jme3-core/src/test/java/com/jme3/shader/DefineListTest.java"}, "test_case": {"identifier": "testGenerateSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerateSource() {\n        DefineList dl = new DefineList(NUM_DEFINES);\n\n        assertEquals(\"\", generateSource(dl));\n\n        dl.set(BOOL_VAR, true);\n\n        assertEquals(\"#define BOOL_VAR 1\\n\", generateSource(dl));\n\n        dl.set(INT_VAR, 123);\n\n        assertEquals(\"#define BOOL_VAR 1\\n\"\n                + \"#define INT_VAR 123\\n\", generateSource(dl));\n\n        dl.set(BOOL_VAR, false);\n\n        assertEquals(\"#define INT_VAR 123\\n\", generateSource(dl));\n\n        dl.set(BOOL_VAR, true);\n\n        // should have predictable ordering based on defineId\n        assertEquals(\"#define BOOL_VAR 1\\n\"\n                + \"#define INT_VAR 123\\n\", generateSource(dl));\n\n        dl.unset(BOOL_VAR);\n        assertEquals(\"#define INT_VAR 123\\n\", generateSource(dl));\n    }", "signature": "void testGenerateSource()", "full_signature": "@Test public void testGenerateSource()", "class_method_signature": "DefineListTest.testGenerateSource()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "generateSource", "set", "assertEquals", "generateSource", "set", "assertEquals", "generateSource", "set", "assertEquals", "generateSource", "set", "assertEquals", "generateSource", "unset", "assertEquals", "generateSource"]}, "focal_class": {"identifier": "DefineList", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int MAX_DEFINES = 64;", "modifier": "public static final", "type": "int", "declarator": "MAX_DEFINES = 64", "var_name": "MAX_DEFINES"}, {"original_string": "private long isSet;", "modifier": "private", "type": "long", "declarator": "isSet", "var_name": "isSet"}, {"original_string": "private final int[] values;", "modifier": "private final", "type": "int[]", "declarator": "values", "var_name": "values"}], "methods": [{"identifier": "DefineList", "parameters": "(int numValues)", "modifiers": "public", "return": "", "signature": " DefineList(int numValues)", "full_signature": "public  DefineList(int numValues)", "class_method_signature": "DefineList.DefineList(int numValues)", "testcase": false, "constructor": true}, {"identifier": "DefineList", "parameters": "(DefineList original)", "modifiers": "private", "return": "", "signature": " DefineList(DefineList original)", "full_signature": "private  DefineList(DefineList original)", "class_method_signature": "DefineList.DefineList(DefineList original)", "testcase": false, "constructor": true}, {"identifier": "rangeCheck", "parameters": "(int id)", "modifiers": "private", "return": "void", "signature": "void rangeCheck(int id)", "full_signature": "private void rangeCheck(int id)", "class_method_signature": "DefineList.rangeCheck(int id)", "testcase": false, "constructor": false}, {"identifier": "isSet", "parameters": "(int id)", "modifiers": "public", "return": "boolean", "signature": "boolean isSet(int id)", "full_signature": "public boolean isSet(int id)", "class_method_signature": "DefineList.isSet(int id)", "testcase": false, "constructor": false}, {"identifier": "unset", "parameters": "(int id)", "modifiers": "public", "return": "void", "signature": "void unset(int id)", "full_signature": "public void unset(int id)", "class_method_signature": "DefineList.unset(int id)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int id, int val)", "modifiers": "public", "return": "void", "signature": "void set(int id, int val)", "full_signature": "public void set(int id, int val)", "class_method_signature": "DefineList.set(int id, int val)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int id, float val)", "modifiers": "public", "return": "void", "signature": "void set(int id, float val)", "full_signature": "public void set(int id, float val)", "class_method_signature": "DefineList.set(int id, float val)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int id, boolean val)", "modifiers": "public", "return": "void", "signature": "void set(int id, boolean val)", "full_signature": "public void set(int id, boolean val)", "class_method_signature": "DefineList.set(int id, boolean val)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int id, VarType type, Object value)", "modifiers": "public", "return": "void", "signature": "void set(int id, VarType type, Object value)", "full_signature": "public void set(int id, VarType type, Object value)", "class_method_signature": "DefineList.set(int id, VarType type, Object value)", "testcase": false, "constructor": false}, {"identifier": "setAll", "parameters": "(DefineList other)", "modifiers": "public", "return": "void", "signature": "void setAll(DefineList other)", "full_signature": "public void setAll(DefineList other)", "class_method_signature": "DefineList.setAll(DefineList other)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "DefineList.clear()", "testcase": false, "constructor": false}, {"identifier": "getBoolean", "parameters": "(int id)", "modifiers": "public", "return": "boolean", "signature": "boolean getBoolean(int id)", "full_signature": "public boolean getBoolean(int id)", "class_method_signature": "DefineList.getBoolean(int id)", "testcase": false, "constructor": false}, {"identifier": "getFloat", "parameters": "(int id)", "modifiers": "public", "return": "float", "signature": "float getFloat(int id)", "full_signature": "public float getFloat(int id)", "class_method_signature": "DefineList.getFloat(int id)", "testcase": false, "constructor": false}, {"identifier": "getInt", "parameters": "(int id)", "modifiers": "public", "return": "int", "signature": "int getInt(int id)", "full_signature": "public int getInt(int id)", "class_method_signature": "DefineList.getInt(int id)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DefineList.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "DefineList.equals(Object other)", "testcase": false, "constructor": false}, {"identifier": "deepClone", "parameters": "()", "modifiers": "public", "return": "DefineList", "signature": "DefineList deepClone()", "full_signature": "public DefineList deepClone()", "class_method_signature": "DefineList.deepClone()", "testcase": false, "constructor": false}, {"identifier": "generateSource", "parameters": "(StringBuilder sb, List<String> defineNames, List<VarType> defineTypes)", "modifiers": "public", "return": "void", "signature": "void generateSource(StringBuilder sb, List<String> defineNames, List<VarType> defineTypes)", "full_signature": "public void generateSource(StringBuilder sb, List<String> defineNames, List<VarType> defineTypes)", "class_method_signature": "DefineList.generateSource(StringBuilder sb, List<String> defineNames, List<VarType> defineTypes)", "testcase": false, "constructor": false}, {"identifier": "generateSource", "parameters": "(List<String> defineNames, List<VarType> defineTypes)", "modifiers": "public", "return": "String", "signature": "String generateSource(List<String> defineNames, List<VarType> defineTypes)", "full_signature": "public String generateSource(List<String> defineNames, List<VarType> defineTypes)", "class_method_signature": "DefineList.generateSource(List<String> defineNames, List<VarType> defineTypes)", "testcase": false, "constructor": false}], "file": "jme3-core/src/main/java/com/jme3/shader/DefineList.java"}, "focal_method": {"identifier": "generateSource", "parameters": "(StringBuilder sb, List<String> defineNames, List<VarType> defineTypes)", "modifiers": "public", "return": "void", "body": "public void generateSource(StringBuilder sb, List<String> defineNames, List<VarType> defineTypes) {\n        for (int i = 0; i < values.length; i++) {\n            if (!isSet(i)) {\n                continue;\n            }\n\n            sb.append(\"#define \").append(defineNames.get(i)).append(' ');\n\n            if (defineTypes != null && defineTypes.get(i) == VarType.Float) {\n                float val = Float.intBitsToFloat(values[i]);\n                if (Float.isInfinite(val) || Float.isNaN(val)) {\n                    throw new IllegalArgumentException(\n                            \"GLSL does not support NaN \"\n                            + \"or Infinite float literals\");\n                }\n                sb.append(val);\n            } else {\n                sb.append(values[i]);\n            }\n\n            sb.append('\\n');\n        }\n    }", "signature": "void generateSource(StringBuilder sb, List<String> defineNames, List<VarType> defineTypes)", "full_signature": "public void generateSource(StringBuilder sb, List<String> defineNames, List<VarType> defineTypes)", "class_method_signature": "DefineList.generateSource(StringBuilder sb, List<String> defineNames, List<VarType> defineTypes)", "testcase": false, "constructor": false, "invocations": ["isSet", "append", "append", "append", "get", "get", "intBitsToFloat", "isInfinite", "isNaN", "append", "append", "append"]}, "repository": {"repo_id": 17960746, "url": "https://github.com/jMonkeyEngine/jmonkeyengine", "language": "Java", "is_fork": false, "fork_count": 957, "stargazer_count": 2373, "size": 861551, "license": "licensed"}}