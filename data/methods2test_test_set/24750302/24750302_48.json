{"test_class": {"identifier": "ServiceResourceServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Resource(name = \"alien-es-dao\")\n    private IGenericSearchDAO alienDao;", "modifier": "@Resource(name = \"alien-es-dao\")\n    private", "type": "IGenericSearchDAO", "declarator": "alienDao", "var_name": "alienDao"}, {"original_string": "@Inject\n    private ServiceResourceService serviceResourceService;", "modifier": "@Inject\n    private", "type": "ServiceResourceService", "declarator": "serviceResourceService", "var_name": "serviceResourceService"}], "file": "alien4cloud-core/src/test/java/org/alien4cloud/alm/service/ServiceResourceServiceTest.java"}, "test_case": {"identifier": "testGetByNodeTypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetByNodeTypes() {\n        ServiceResource serviceResource = new ServiceResource();\n        serviceResource.setId(\"service1\");\n        serviceResource.setNodeInstance(new NodeInstance());\n        serviceResource.getNodeInstance().setTypeVersion(\"1.0.0-SNAPSHOT\");\n        serviceResource.getNodeInstance().setNodeTemplate(new NodeTemplate());\n        serviceResource.getNodeInstance().getNodeTemplate().setType(\"org.alien4cloud.nodes.MyType\");\n\n        alienDao.save(serviceResource);\n\n        ServiceResource[] services = serviceResourceService.getByNodeTypes(\"org.alien4cloud.nodes.MyType\", \"1.0.0-SNAPSHOT\");\n\n        Assert.assertNotNull(services);\n        Assert.assertEquals(1, services.length);\n\n        services = serviceResourceService.getByNodeTypes(\"org.alien4cloud.nodes.UnusedType\", \"1.0.0-SNAPSHOT\");\n\n        Assert.assertNotNull(services);\n        Assert.assertEquals(0, services.length);\n\n        services = serviceResourceService.getByNodeTypes(\"org.alien4cloud.nodes.MyType\", \"1.0.0\");\n\n        Assert.assertNotNull(services);\n        Assert.assertEquals(0, services.length);\n    }", "signature": "void testGetByNodeTypes()", "full_signature": "@Test public void testGetByNodeTypes()", "class_method_signature": "ServiceResourceServiceTest.testGetByNodeTypes()", "testcase": true, "constructor": false, "invocations": ["setId", "setNodeInstance", "setTypeVersion", "getNodeInstance", "setNodeTemplate", "getNodeInstance", "setType", "getNodeTemplate", "getNodeInstance", "save", "getByNodeTypes", "assertNotNull", "assertEquals", "getByNodeTypes", "assertNotNull", "assertEquals", "getByNodeTypes", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "ServiceResourceService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Resource(name = \"alien-es-dao\")\n    private IGenericSearchDAO alienDAO;", "modifier": "@Resource(name = \"alien-es-dao\")\n    private", "type": "IGenericSearchDAO", "declarator": "alienDAO", "var_name": "alienDAO"}, {"original_string": "@Inject\n    private NodeInstanceService nodeInstanceService;", "modifier": "@Inject\n    private", "type": "NodeInstanceService", "declarator": "nodeInstanceService", "var_name": "nodeInstanceService"}, {"original_string": "@Inject\n    private IToscaTypeSearchService toscaTypeSearchService;", "modifier": "@Inject\n    private", "type": "IToscaTypeSearchService", "declarator": "toscaTypeSearchService", "var_name": "toscaTypeSearchService"}, {"original_string": "@Inject\n    private ApplicationEventPublisher publisher;", "modifier": "@Inject\n    private", "type": "ApplicationEventPublisher", "declarator": "publisher", "var_name": "publisher"}], "methods": [{"identifier": "create", "parameters": "(String serviceName, String serviceVersion, String serviceNodeType, String serviceNodeVersion)", "modifiers": "public", "return": "String", "signature": "String create(String serviceName, String serviceVersion, String serviceNodeType, String serviceNodeVersion)", "full_signature": "public String create(String serviceName, String serviceVersion, String serviceNodeType, String serviceNodeVersion)", "class_method_signature": "ServiceResourceService.create(String serviceName, String serviceVersion, String serviceNodeType, String serviceNodeVersion)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String serviceName, String serviceVersion, String serviceNodeType, String serviceNodeVersion, String environmentId)", "modifiers": "public", "return": "String", "signature": "String create(String serviceName, String serviceVersion, String serviceNodeType, String serviceNodeVersion, String environmentId)", "full_signature": "public String create(String serviceName, String serviceVersion, String serviceNodeType, String serviceNodeVersion, String environmentId)", "class_method_signature": "ServiceResourceService.create(String serviceName, String serviceVersion, String serviceNodeType, String serviceNodeVersion, String environmentId)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "(int from, int count)", "modifiers": "public", "return": "GetMultipleDataResult<ServiceResource>", "signature": "GetMultipleDataResult<ServiceResource> list(int from, int count)", "full_signature": "public GetMultipleDataResult<ServiceResource> list(int from, int count)", "class_method_signature": "ServiceResourceService.list(int from, int count)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(String searchText, Map<String, String[]> filters, String sortField, boolean desc, int from,\n            int count)", "modifiers": "public", "return": "FacetedSearchResult<ServiceResource>", "signature": "FacetedSearchResult<ServiceResource> search(String searchText, Map<String, String[]> filters, String sortField, boolean desc, int from,\n            int count)", "full_signature": "public FacetedSearchResult<ServiceResource> search(String searchText, Map<String, String[]> filters, String sortField, boolean desc, int from,\n            int count)", "class_method_signature": "ServiceResourceService.search(String searchText, Map<String, String[]> filters, String sortField, boolean desc, int from,\n            int count)", "testcase": false, "constructor": false}, {"identifier": "getOrFail", "parameters": "(String id)", "modifiers": "public", "return": "ServiceResource", "signature": "ServiceResource getOrFail(String id)", "full_signature": "public ServiceResource getOrFail(String id)", "class_method_signature": "ServiceResourceService.getOrFail(String id)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(String resourceId, String name, String version, String description, String nodeType, String nodeTypeVersion,\n            Map<String, AbstractPropertyValue> nodeProperties, Map<String, Capability> nodeCapabilities, Map<String, String> nodeAttributeValues,\n            String[] locations, Map<String, String> capabilitiesRelationshipTypes, Map<String, String> requirementsRelationshipTypes)", "modifiers": "public", "return": "void", "signature": "void update(String resourceId, String name, String version, String description, String nodeType, String nodeTypeVersion,\n            Map<String, AbstractPropertyValue> nodeProperties, Map<String, Capability> nodeCapabilities, Map<String, String> nodeAttributeValues,\n            String[] locations, Map<String, String> capabilitiesRelationshipTypes, Map<String, String> requirementsRelationshipTypes)", "full_signature": "public void update(String resourceId, String name, String version, String description, String nodeType, String nodeTypeVersion,\n            Map<String, AbstractPropertyValue> nodeProperties, Map<String, Capability> nodeCapabilities, Map<String, String> nodeAttributeValues,\n            String[] locations, Map<String, String> capabilitiesRelationshipTypes, Map<String, String> requirementsRelationshipTypes)", "class_method_signature": "ServiceResourceService.update(String resourceId, String name, String version, String description, String nodeType, String nodeTypeVersion,\n            Map<String, AbstractPropertyValue> nodeProperties, Map<String, Capability> nodeCapabilities, Map<String, String> nodeAttributeValues,\n            String[] locations, Map<String, String> capabilitiesRelationshipTypes, Map<String, String> requirementsRelationshipTypes)", "testcase": false, "constructor": false}, {"identifier": "duplicate", "parameters": "(String serviceId)", "modifiers": "public", "return": "String", "signature": "String duplicate(String serviceId)", "full_signature": "public String duplicate(String serviceId)", "class_method_signature": "ServiceResourceService.duplicate(String serviceId)", "testcase": false, "constructor": false}, {"identifier": "patch", "parameters": "(String resourceId, String name, String version, String description, String nodeType, String nodeTypeVersion,\n            Map<String, AbstractPropertyValue> nodeProperties, Map<String, Capability> nodeCapabilities, Map<String, String> nodeAttributeValues,\n            String[] locations, Map<String, String> capabilitiesRelationshipTypes, Map<String, String> requirementsRelationshipTypes)", "modifiers": "public", "return": "void", "signature": "void patch(String resourceId, String name, String version, String description, String nodeType, String nodeTypeVersion,\n            Map<String, AbstractPropertyValue> nodeProperties, Map<String, Capability> nodeCapabilities, Map<String, String> nodeAttributeValues,\n            String[] locations, Map<String, String> capabilitiesRelationshipTypes, Map<String, String> requirementsRelationshipTypes)", "full_signature": "public void patch(String resourceId, String name, String version, String description, String nodeType, String nodeTypeVersion,\n            Map<String, AbstractPropertyValue> nodeProperties, Map<String, Capability> nodeCapabilities, Map<String, String> nodeAttributeValues,\n            String[] locations, Map<String, String> capabilitiesRelationshipTypes, Map<String, String> requirementsRelationshipTypes)", "class_method_signature": "ServiceResourceService.patch(String resourceId, String name, String version, String description, String nodeType, String nodeTypeVersion,\n            Map<String, AbstractPropertyValue> nodeProperties, Map<String, Capability> nodeCapabilities, Map<String, String> nodeAttributeValues,\n            String[] locations, Map<String, String> capabilitiesRelationshipTypes, Map<String, String> requirementsRelationshipTypes)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(String resourceId, String name, String version, String description, String nodeTypeStr, String nodeTypeVersion,\n            Map<String, AbstractPropertyValue> nodeProperties, Map<String, Capability> nodeCapabilities, Map<String, String> nodeAttributeValues,\n            String[] locations, Map<String, String> capabilitiesRelationshipTypes, Map<String, String> requirementsRelationshipTypes, boolean patch)", "modifiers": "private", "return": "void", "signature": "void update(String resourceId, String name, String version, String description, String nodeTypeStr, String nodeTypeVersion,\n            Map<String, AbstractPropertyValue> nodeProperties, Map<String, Capability> nodeCapabilities, Map<String, String> nodeAttributeValues,\n            String[] locations, Map<String, String> capabilitiesRelationshipTypes, Map<String, String> requirementsRelationshipTypes, boolean patch)", "full_signature": "private void update(String resourceId, String name, String version, String description, String nodeTypeStr, String nodeTypeVersion,\n            Map<String, AbstractPropertyValue> nodeProperties, Map<String, Capability> nodeCapabilities, Map<String, String> nodeAttributeValues,\n            String[] locations, Map<String, String> capabilitiesRelationshipTypes, Map<String, String> requirementsRelationshipTypes, boolean patch)", "class_method_signature": "ServiceResourceService.update(String resourceId, String name, String version, String description, String nodeTypeStr, String nodeTypeVersion,\n            Map<String, AbstractPropertyValue> nodeProperties, Map<String, Capability> nodeCapabilities, Map<String, String> nodeAttributeValues,\n            String[] locations, Map<String, String> capabilitiesRelationshipTypes, Map<String, String> requirementsRelationshipTypes, boolean patch)", "testcase": false, "constructor": false}, {"identifier": "validateRelationshipTypes", "parameters": "(ServiceResource serviceResource, final NodeType nodeType)", "modifiers": "private", "return": "void", "signature": "void validateRelationshipTypes(ServiceResource serviceResource, final NodeType nodeType)", "full_signature": "private void validateRelationshipTypes(ServiceResource serviceResource, final NodeType nodeType)", "class_method_signature": "ServiceResourceService.validateRelationshipTypes(ServiceResource serviceResource, final NodeType nodeType)", "testcase": false, "constructor": false}, {"identifier": "updateLocations", "parameters": "(ServiceResource serviceResource, String[] locations)", "modifiers": "private", "return": "void", "signature": "void updateLocations(ServiceResource serviceResource, String[] locations)", "full_signature": "private void updateLocations(ServiceResource serviceResource, String[] locations)", "class_method_signature": "ServiceResourceService.updateLocations(ServiceResource serviceResource, String[] locations)", "testcase": false, "constructor": false}, {"identifier": "failUpdateIfManaged", "parameters": "(ServiceResource serviceResource, boolean patch, String name, String version, String nodeTypeStr, String nodeTypeVersion,\n            Map<String, AbstractPropertyValue> nodeProperties, Map<String, Capability> nodeCapabilities, Map<String, String> nodeAttributeValues)", "modifiers": "private", "return": "void", "signature": "void failUpdateIfManaged(ServiceResource serviceResource, boolean patch, String name, String version, String nodeTypeStr, String nodeTypeVersion,\n            Map<String, AbstractPropertyValue> nodeProperties, Map<String, Capability> nodeCapabilities, Map<String, String> nodeAttributeValues)", "full_signature": "private void failUpdateIfManaged(ServiceResource serviceResource, boolean patch, String name, String version, String nodeTypeStr, String nodeTypeVersion,\n            Map<String, AbstractPropertyValue> nodeProperties, Map<String, Capability> nodeCapabilities, Map<String, String> nodeAttributeValues)", "class_method_signature": "ServiceResourceService.failUpdateIfManaged(ServiceResource serviceResource, boolean patch, String name, String version, String nodeTypeStr, String nodeTypeVersion,\n            Map<String, AbstractPropertyValue> nodeProperties, Map<String, Capability> nodeCapabilities, Map<String, String> nodeAttributeValues)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(ServiceResource serviceResource, boolean ensureUniqueness)", "modifiers": "public synchronized", "return": "void", "signature": "void save(ServiceResource serviceResource, boolean ensureUniqueness)", "full_signature": "public synchronized void save(ServiceResource serviceResource, boolean ensureUniqueness)", "class_method_signature": "ServiceResourceService.save(ServiceResource serviceResource, boolean ensureUniqueness)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(ServiceResource serviceResource)", "modifiers": "public synchronized", "return": "void", "signature": "void save(ServiceResource serviceResource)", "full_signature": "public synchronized void save(ServiceResource serviceResource)", "class_method_signature": "ServiceResourceService.save(ServiceResource serviceResource)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String id)", "modifiers": "public synchronized", "return": "void", "signature": "void delete(String id)", "full_signature": "public synchronized void delete(String id)", "class_method_signature": "ServiceResourceService.delete(String id)", "testcase": false, "constructor": false}, {"identifier": "failIdUsed", "parameters": "(String id)", "modifiers": "private", "return": "void", "signature": "void failIdUsed(String id)", "full_signature": "private void failIdUsed(String id)", "class_method_signature": "ServiceResourceService.failIdUsed(String id)", "testcase": false, "constructor": false}, {"identifier": "handleLocationDeleted", "parameters": "(AfterLocationDeleted event)", "modifiers": "@EventListener public synchronized", "return": "void", "signature": "void handleLocationDeleted(AfterLocationDeleted event)", "full_signature": "@EventListener public synchronized void handleLocationDeleted(AfterLocationDeleted event)", "class_method_signature": "ServiceResourceService.handleLocationDeleted(AfterLocationDeleted event)", "testcase": false, "constructor": false}, {"identifier": "searchByLocation", "parameters": "(String locationId)", "modifiers": "public", "return": "List<ServiceResource>", "signature": "List<ServiceResource> searchByLocation(String locationId)", "full_signature": "public List<ServiceResource> searchByLocation(String locationId)", "class_method_signature": "ServiceResourceService.searchByLocation(String locationId)", "testcase": false, "constructor": false}, {"identifier": "getByNodeTypes", "parameters": "(String nodeType, String nodeTypeVersion)", "modifiers": "public", "return": "ServiceResource[]", "signature": "ServiceResource[] getByNodeTypes(String nodeType, String nodeTypeVersion)", "full_signature": "public ServiceResource[] getByNodeTypes(String nodeType, String nodeTypeVersion)", "class_method_signature": "ServiceResourceService.getByNodeTypes(String nodeType, String nodeTypeVersion)", "testcase": false, "constructor": false}, {"identifier": "isLocationAuthorized", "parameters": "(String serviceId, String locationId)", "modifiers": "public", "return": "void", "signature": "void isLocationAuthorized(String serviceId, String locationId)", "full_signature": "public void isLocationAuthorized(String serviceId, String locationId)", "class_method_signature": "ServiceResourceService.isLocationAuthorized(String serviceId, String locationId)", "testcase": false, "constructor": false}, {"identifier": "reportArchiveUsage", "parameters": "(ArchiveUsageRequestEvent event)", "modifiers": "@EventListener public", "return": "void", "signature": "void reportArchiveUsage(ArchiveUsageRequestEvent event)", "full_signature": "@EventListener public void reportArchiveUsage(ArchiveUsageRequestEvent event)", "class_method_signature": "ServiceResourceService.reportArchiveUsage(ArchiveUsageRequestEvent event)", "testcase": false, "constructor": false}], "file": "alien4cloud-core/src/main/java/org/alien4cloud/alm/service/ServiceResourceService.java"}, "focal_method": {"identifier": "getByNodeTypes", "parameters": "(String nodeType, String nodeTypeVersion)", "modifiers": "public", "return": "ServiceResource[]", "body": "public ServiceResource[] getByNodeTypes(String nodeType, String nodeTypeVersion) {\n        return alienDAO.buildQuery(ServiceResource.class)\n                .setFilters(fromKeyValueCouples(\"nodeInstance.nodeTemplate.type\", nodeType, \"nodeInstance.typeVersion\", nodeTypeVersion)).prepareSearch()\n                .search(0, Integer.MAX_VALUE).getData();\n    }", "signature": "ServiceResource[] getByNodeTypes(String nodeType, String nodeTypeVersion)", "full_signature": "public ServiceResource[] getByNodeTypes(String nodeType, String nodeTypeVersion)", "class_method_signature": "ServiceResourceService.getByNodeTypes(String nodeType, String nodeTypeVersion)", "testcase": false, "constructor": false, "invocations": ["getData", "search", "prepareSearch", "setFilters", "buildQuery", "fromKeyValueCouples"]}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}