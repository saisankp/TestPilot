{"test_class": {"identifier": "ModifiedUTF8CharsetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ModifiedUTF8CharsetTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ModifiedUTF8CharsetTest.class)", "var_name": "logger"}, {"original_string": "String nullString = \"\\u0000\";", "modifier": "", "type": "String", "declarator": "nullString = \"\\u0000\"", "var_name": "nullString"}, {"original_string": "String controlCharsString = createStringWithCharRange('\\u0001', 0x20);", "modifier": "", "type": "String", "declarator": "controlCharsString = createStringWithCharRange('\\u0001', 0x20)", "var_name": "controlCharsString"}, {"original_string": "String asciiOnlyString = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";", "modifier": "", "type": "String", "declarator": "asciiOnlyString = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\"", "var_name": "asciiOnlyString"}, {"original_string": "String iso88591CharsString = createStringWithCharRange('\\u0080', 128);", "modifier": "", "type": "String", "declarator": "iso88591CharsString = createStringWithCharRange('\\u0080', 128)", "var_name": "iso88591CharsString"}, {"original_string": "String first7EFFString = createStringWithCharRange('\\u0100', 0x7EFF);", "modifier": "", "type": "String", "declarator": "first7EFFString = createStringWithCharRange('\\u0100', 0x7EFF)", "var_name": "first7EFFString"}, {"original_string": "String entireString = createStringWithCharRange('\\u0000', 0x7FFF);", "modifier": "", "type": "String", "declarator": "entireString = createStringWithCharRange('\\u0000', 0x7FFF)", "var_name": "entireString"}, {"original_string": "String upperRangeString = createStringWithCharRange('\\u7FFF', 0x8000);", "modifier": "", "type": "String", "declarator": "upperRangeString = createStringWithCharRange('\\u7FFF', 0x8000)", "var_name": "upperRangeString"}], "file": "ch-commons-charset/src/test/java/com/cloudhopper/commons/charset/ModifiedUTF8CharsetTest.java"}, "test_case": {"identifier": "calculateByteLength", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void calculateByteLength() throws Exception {\n        String sample = null;\n        // test the incredibly fast method for calculating a Java strings UTF-8 byte length\n        Assert.assertEquals(0, ModifiedUTF8Charset.calculateByteLength(null));\n        Assert.assertEquals(0, ModifiedUTF8Charset.calculateByteLength(\"\"));\n        Assert.assertEquals(1, ModifiedUTF8Charset.calculateByteLength(\"a\"));\n        Assert.assertEquals(2, ModifiedUTF8Charset.calculateByteLength(\"\\n\\r\"));\n        sample = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        Assert.assertEquals(sample.getBytes(\"UTF8\").length, ModifiedUTF8Charset.calculateByteLength(sample));\n        sample = \"\\u20ac\";\n        Assert.assertEquals(sample.getBytes(\"UTF8\").length, ModifiedUTF8Charset.calculateByteLength(sample));\n        sample = \"\\u20ac\\u0623\";\n        Assert.assertEquals(sample.getBytes(\"UTF8\").length, ModifiedUTF8Charset.calculateByteLength(sample));\n        sample = \"\\u00A7\\u00E5\\uFFFF\";\n        Assert.assertEquals(sample.getBytes(\"UTF8\").length, ModifiedUTF8Charset.calculateByteLength(sample));\n    }", "signature": "void calculateByteLength()", "full_signature": "@Test public void calculateByteLength()", "class_method_signature": "ModifiedUTF8CharsetTest.calculateByteLength()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "calculateByteLength", "assertEquals", "calculateByteLength", "assertEquals", "calculateByteLength", "assertEquals", "calculateByteLength", "assertEquals", "getBytes", "calculateByteLength", "assertEquals", "getBytes", "calculateByteLength", "assertEquals", "getBytes", "calculateByteLength", "assertEquals", "getBytes", "calculateByteLength"]}, "focal_class": {"identifier": "ModifiedUTF8Charset", "superclass": "extends BaseCharset", "interfaces": "", "fields": [], "methods": [{"identifier": "ModifiedUTF8Charset", "parameters": "()", "modifiers": "public", "return": "", "signature": " ModifiedUTF8Charset()", "full_signature": "public  ModifiedUTF8Charset()", "class_method_signature": "ModifiedUTF8Charset.ModifiedUTF8Charset()", "testcase": false, "constructor": true}, {"identifier": "estimateEncodeByteLength", "parameters": "(CharSequence str0)", "modifiers": "@Override public", "return": "int", "signature": "int estimateEncodeByteLength(CharSequence str0)", "full_signature": "@Override public int estimateEncodeByteLength(CharSequence str0)", "class_method_signature": "ModifiedUTF8Charset.estimateEncodeByteLength(CharSequence str0)", "testcase": false, "constructor": false}, {"identifier": "estimateDecodeCharLength", "parameters": "(byte[] bytes)", "modifiers": "@Override public", "return": "int", "signature": "int estimateDecodeCharLength(byte[] bytes)", "full_signature": "@Override public int estimateDecodeCharLength(byte[] bytes)", "class_method_signature": "ModifiedUTF8Charset.estimateDecodeCharLength(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(CharSequence charSeq)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] encode(CharSequence charSeq)", "full_signature": "@Override public byte[] encode(CharSequence charSeq)", "class_method_signature": "ModifiedUTF8Charset.encode(CharSequence charSeq)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(byte[] bytes, StringBuilder buffer)", "modifiers": "@Override public", "return": "void", "signature": "void decode(byte[] bytes, StringBuilder buffer)", "full_signature": "@Override public void decode(byte[] bytes, StringBuilder buffer)", "class_method_signature": "ModifiedUTF8Charset.decode(byte[] bytes, StringBuilder buffer)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(byte[] bytes)", "modifiers": "@Override public", "return": "String", "signature": "String decode(byte[] bytes)", "full_signature": "@Override public String decode(byte[] bytes)", "class_method_signature": "ModifiedUTF8Charset.decode(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(byte[] bytes, int offset, int length)", "modifiers": "public", "return": "String", "signature": "String decode(byte[] bytes, int offset, int length)", "full_signature": "public String decode(byte[] bytes, int offset, int length)", "class_method_signature": "ModifiedUTF8Charset.decode(byte[] bytes, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "calculateByteLength", "parameters": "(CharSequence charSeq)", "modifiers": "static public", "return": "int", "signature": "int calculateByteLength(CharSequence charSeq)", "full_signature": "static public int calculateByteLength(CharSequence charSeq)", "class_method_signature": "ModifiedUTF8Charset.calculateByteLength(CharSequence charSeq)", "testcase": false, "constructor": false}, {"identifier": "calculateByteLength", "parameters": "(CharSequence charSeq, char[] charBuffer, int charOffset, int charLength)", "modifiers": "static public", "return": "int", "signature": "int calculateByteLength(CharSequence charSeq, char[] charBuffer, int charOffset, int charLength)", "full_signature": "static public int calculateByteLength(CharSequence charSeq, char[] charBuffer, int charOffset, int charLength)", "class_method_signature": "ModifiedUTF8Charset.calculateByteLength(CharSequence charSeq, char[] charBuffer, int charOffset, int charLength)", "testcase": false, "constructor": false}, {"identifier": "encodeToByteArray", "parameters": "(CharSequence charSeq, char[] charBuffer, int charOffset, int charLength, byte[] byteBuffer, int byteOffset)", "modifiers": "static public", "return": "int", "signature": "int encodeToByteArray(CharSequence charSeq, char[] charBuffer, int charOffset, int charLength, byte[] byteBuffer, int byteOffset)", "full_signature": "static public int encodeToByteArray(CharSequence charSeq, char[] charBuffer, int charOffset, int charLength, byte[] byteBuffer, int byteOffset)", "class_method_signature": "ModifiedUTF8Charset.encodeToByteArray(CharSequence charSeq, char[] charBuffer, int charOffset, int charLength, byte[] byteBuffer, int byteOffset)", "testcase": false, "constructor": false}, {"identifier": "decodeToCharArray", "parameters": "(byte[] byteBuffer, int byteOffset, int byteLength, char[] charBuffer, int charOffset)", "modifiers": "static public", "return": "int", "signature": "int decodeToCharArray(byte[] byteBuffer, int byteOffset, int byteLength, char[] charBuffer, int charOffset)", "full_signature": "static public int decodeToCharArray(byte[] byteBuffer, int byteOffset, int byteLength, char[] charBuffer, int charOffset)", "class_method_signature": "ModifiedUTF8Charset.decodeToCharArray(byte[] byteBuffer, int byteOffset, int byteLength, char[] charBuffer, int charOffset)", "testcase": false, "constructor": false}], "file": "ch-commons-charset/src/main/java/com/cloudhopper/commons/charset/ModifiedUTF8Charset.java"}, "focal_method": {"identifier": "calculateByteLength", "parameters": "(CharSequence charSeq)", "modifiers": "static public", "return": "int", "body": "static public int calculateByteLength(CharSequence charSeq) {\n        return calculateByteLength(charSeq, null, 0, 0);\n    }", "signature": "int calculateByteLength(CharSequence charSeq)", "full_signature": "static public int calculateByteLength(CharSequence charSeq)", "class_method_signature": "ModifiedUTF8Charset.calculateByteLength(CharSequence charSeq)", "testcase": false, "constructor": false, "invocations": ["calculateByteLength"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}