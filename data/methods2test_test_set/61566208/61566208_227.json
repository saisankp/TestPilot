{"test_class": {"identifier": "EsxiSshUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/hms-inband/src/test/java/com/vmware/vrack/hms/common/util/EsxiSshUtilTest.java"}, "test_case": {"identifier": "testGetSessionOnSuccessCase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSessionOnSuccessCase()\n        throws Exception\n    {\n\n        // Mock objects\n        File fileMock = mock( File.class );\n        whenNew( File.class ).withArguments( anyString() ).thenReturn( fileMock );\n        when( fileMock.exists() ).thenReturn( true );\n        when( fileMock.isDirectory() ).thenReturn( false );\n\n        Session session = mock( Session.class );\n        JSch jsch = mock( JSch.class );\n        whenNew( JSch.class ).withNoArguments().thenReturn( jsch );\n        Mockito.doNothing().when( jsch ).setKnownHosts( anyString() );\n        when( jsch.getSession( anyString(), anyString(), anyInt() ) ).thenReturn( session );\n\n        // PowerMockito.mockStatic( StaticContextAccessor.class );\n        // KeyStorePasswordProvider keyStorePasswordProvider = mock( KeyStorePasswordProvider.class );\n        // when( StaticContextAccessor.getBean( KeyStorePasswordProvider.class ) ).thenReturn( keyStorePasswordProvider\n        // );\n        // when( keyStorePasswordProvider.getPassword() ).thenReturn( \"****\" );\n        //\n        // PowerMockito.mockStatic( CipherServiceUtil.class );\n        // when( CipherServiceUtil.getDecryptedProperty( any( String.class ) ) ).thenReturn( \"****\" );\n\n        Properties config = new Properties();\n        config.put( \"StrictHostKeyChecking\", \"yes\" );\n        Session sessionObj = EsxiSshUtil.getSessionObject( \"user\", \"password\", \"127.0.0.1\", 22, config );\n        assertNotNull( sessionObj );\n    }", "signature": "void testGetSessionOnSuccessCase()", "full_signature": "@Test public void testGetSessionOnSuccessCase()", "class_method_signature": "EsxiSshUtilTest.testGetSessionOnSuccessCase()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "withArguments", "whenNew", "anyString", "thenReturn", "when", "exists", "thenReturn", "when", "isDirectory", "mock", "mock", "thenReturn", "withNoArguments", "whenNew", "setKnownHosts", "when", "doNothing", "anyString", "thenReturn", "when", "getSession", "anyString", "anyString", "anyInt", "put", "getSessionObject", "assertNotNull"]}, "focal_class": {"identifier": "EsxiSshUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger( EsxiSshUtil.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( EsxiSshUtil.class )", "var_name": "logger"}], "methods": [{"identifier": "getSessionObject", "parameters": "( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "modifiers": "public static", "return": "Session", "signature": "Session getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "full_signature": "public static Session getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "class_method_signature": "EsxiSshUtil.getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "testcase": false, "constructor": false}, {"identifier": "executeCommand", "parameters": "( Session sessionObj, String command )", "modifiers": "public static", "return": "String", "signature": "String executeCommand( Session sessionObj, String command )", "full_signature": "public static String executeCommand( Session sessionObj, String command )", "class_method_signature": "EsxiSshUtil.executeCommand( Session sessionObj, String command )", "testcase": false, "constructor": false}, {"identifier": "executeCommandEnhanced", "parameters": "( Session session, String command )", "modifiers": "public static", "return": "EsxiSshExecResult", "signature": "EsxiSshExecResult executeCommandEnhanced( Session session, String command )", "full_signature": "public static EsxiSshExecResult executeCommandEnhanced( Session session, String command )", "class_method_signature": "EsxiSshUtil.executeCommandEnhanced( Session session, String command )", "testcase": false, "constructor": false}, {"identifier": "executeCommandNoResponse", "parameters": "( Session sessionObj, String command )", "modifiers": "public static", "return": "void", "signature": "void executeCommandNoResponse( Session sessionObj, String command )", "full_signature": "public static void executeCommandNoResponse( Session sessionObj, String command )", "class_method_signature": "EsxiSshUtil.executeCommandNoResponse( Session sessionObj, String command )", "testcase": false, "constructor": false}, {"identifier": "upload", "parameters": "( Session session, InputStream localInputStream, String remoteFile )", "modifiers": "public static", "return": "void", "signature": "void upload( Session session, InputStream localInputStream, String remoteFile )", "full_signature": "public static void upload( Session session, InputStream localInputStream, String remoteFile )", "class_method_signature": "EsxiSshUtil.upload( Session session, InputStream localInputStream, String remoteFile )", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "( Session session, OutputStream localOutputStream, String remoteFile )", "modifiers": "public static", "return": "void", "signature": "void download( Session session, OutputStream localOutputStream, String remoteFile )", "full_signature": "public static void download( Session session, OutputStream localOutputStream, String remoteFile )", "class_method_signature": "EsxiSshUtil.download( Session session, OutputStream localOutputStream, String remoteFile )", "testcase": false, "constructor": false}, {"identifier": "lstat", "parameters": "( Session session, String remoteFile )", "modifiers": "public static", "return": "SftpATTRS", "signature": "SftpATTRS lstat( Session session, String remoteFile )", "full_signature": "public static SftpATTRS lstat( Session session, String remoteFile )", "class_method_signature": "EsxiSshUtil.lstat( Session session, String remoteFile )", "testcase": false, "constructor": false}, {"identifier": "executeCommand", "parameters": "( Session sessionObj, String[] commands )", "modifiers": "public static", "return": "String", "signature": "String executeCommand( Session sessionObj, String[] commands )", "full_signature": "public static String executeCommand( Session sessionObj, String[] commands )", "class_method_signature": "EsxiSshUtil.executeCommand( Session sessionObj, String[] commands )", "testcase": false, "constructor": false}], "file": "modules/hms-inband/src/main/java/com/vmware/vrack/hms/common/util/EsxiSshUtil.java"}, "focal_method": {"identifier": "getSessionObject", "parameters": "( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "modifiers": "public static", "return": "Session", "body": "public static Session getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )\n    {\n\n        Session session = null;\n\n        // logger.debug(\"In getSessionObject\");\n        if ( userName != null && !\"\".equals( userName ) && password != null && hostName != null\n            && !\"\".equals( hostName ) )\n        {\n            JSch jsch = new JSch();\n            try\n            {\n                if ( sessionConfig != null\n                    && InbandConstants.STRICT_HOST_KEY_CHECK_YES.equals( sessionConfig.getProperty( InbandConstants.STRICT_HOST_KEY_CHECKING ) ) )\n                {\n                    /*\n                     * Getting location of .ssh/known_hosts to create session for only known hosts.\n                     */\n                    String fileLocation = InbandProperties.getKnownHostsLocation();\n                    File f = new File( fileLocation );\n                    if ( f.exists() && !f.isDirectory() )\n                    {\n                        jsch.setKnownHosts( fileLocation );\n                    }\n                    else\n                    {\n                        logger.debug( \"The file: {} for getting .ssh/known_hosts doesn't exist\", fileLocation );\n                        throw new FileNotFoundException( \"The file: \" + fileLocation\n                            + \" for getting .ssh/known_hosts doesn't exist\" );\n                    }\n                }\n\n                session = jsch.getSession( userName, hostName, port );\n                session.setPassword( password );\n\n                if ( sessionConfig != null )\n                {\n                    session.setConfig( sessionConfig );\n                }\n\n                // logger.debug(\"COnfig set\");\n            }\n            catch ( Exception e )\n            {\n                logger.error( \"Creating SSH session failed\", e );\n            }\n            return session;\n        }\n        // logger.debug(\"Before returning Session object\");\n        return null;\n    }", "signature": "Session getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "full_signature": "public static Session getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "class_method_signature": "EsxiSshUtil.getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals", "getProperty", "getKnownHostsLocation", "exists", "isDirectory", "setKnownHosts", "debug", "getSession", "setPassword", "setConfig", "error"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}