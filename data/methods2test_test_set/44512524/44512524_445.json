{"test_class": {"identifier": "SentimentAnalysisTest", "superclass": "", "interfaces": "", "fields": [], "file": "storm/trident-examples/src/test/java/storm/trident/topology/SentimentAnalysisTest.java"}, "test_case": {"identifier": "testRunTopology", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRunTopology() throws InterruptedException {\n        Configuration conf = new Configuration();\n        SentimentAnalysis topology = new SentimentAnalysis(\"sa\", conf);\n        \n        StormRunner.runTopologyLocally(topology.buildTopology(), \"sa\", conf, 100);\n    }", "signature": "void testRunTopology()", "full_signature": "@Test public void testRunTopology()", "class_method_signature": "SentimentAnalysisTest.testRunTopology()", "testcase": true, "constructor": false, "invocations": ["runTopologyLocally", "buildTopology"]}, "focal_class": {"identifier": "SentimentAnalysis", "superclass": "extends AbstractTopology", "interfaces": "", "fields": [{"original_string": "private String spoutType;", "modifier": "private", "type": "String", "declarator": "spoutType", "var_name": "spoutType"}, {"original_string": "private String sinkType;", "modifier": "private", "type": "String", "declarator": "sinkType", "var_name": "sinkType"}, {"original_string": "private int spoutThreads;", "modifier": "private", "type": "int", "declarator": "spoutThreads", "var_name": "spoutThreads"}, {"original_string": "private int parserThreads;", "modifier": "private", "type": "int", "declarator": "parserThreads", "var_name": "parserThreads"}, {"original_string": "private int tweetFilterThreads;", "modifier": "private", "type": "int", "declarator": "tweetFilterThreads", "var_name": "tweetFilterThreads"}, {"original_string": "private int textFilterThreads;", "modifier": "private", "type": "int", "declarator": "textFilterThreads", "var_name": "textFilterThreads"}, {"original_string": "private int stemmerThreads;", "modifier": "private", "type": "int", "declarator": "stemmerThreads", "var_name": "stemmerThreads"}, {"original_string": "private int posScorerThreads;", "modifier": "private", "type": "int", "declarator": "posScorerThreads", "var_name": "posScorerThreads"}, {"original_string": "private int negScorerThreads;", "modifier": "private", "type": "int", "declarator": "negScorerThreads", "var_name": "negScorerThreads"}, {"original_string": "private int scorerThreads;", "modifier": "private", "type": "int", "declarator": "scorerThreads", "var_name": "scorerThreads"}, {"original_string": "private int sinkThreads;", "modifier": "private", "type": "int", "declarator": "sinkThreads", "var_name": "sinkThreads"}], "methods": [{"identifier": "SentimentAnalysis", "parameters": "(String topologyName, Configuration config)", "modifiers": "public", "return": "", "signature": " SentimentAnalysis(String topologyName, Configuration config)", "full_signature": "public  SentimentAnalysis(String topologyName, Configuration config)", "class_method_signature": "SentimentAnalysis.SentimentAnalysis(String topologyName, Configuration config)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "SentimentAnalysis.initialize()", "testcase": false, "constructor": false}, {"identifier": "buildTopology", "parameters": "()", "modifiers": "@Override public", "return": "StormTopology", "signature": "StormTopology buildTopology()", "full_signature": "@Override public StormTopology buildTopology()", "class_method_signature": "SentimentAnalysis.buildTopology()", "testcase": false, "constructor": false}], "file": "storm/trident-examples/src/main/java/storm/trident/topology/SentimentAnalysis.java"}, "focal_method": {"identifier": "buildTopology", "parameters": "()", "modifiers": "@Override public", "return": "StormTopology", "body": "@Override\n    public StormTopology buildTopology() {\n        TridentTopology topology = new TridentTopology();\n        \n        Stream rawTweets = null;\n\n        switch (spoutType) {\n            case SourceType.FILE:\n                int maxBatchSize = config.getInt(Config.SPOUT_MAX_BATCH_SIZE, 100);\n                String spoutPath = config.getString(Config.SPOUT_PATH);\n                rawTweets = topology.newStream(\"spout\", new FileSpout(maxBatchSize, spoutPath, \"tweet_str\"));\n                break;\n            case SourceType.KAFKA:\n                createKafkaSpout(spoutType, spoutType);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Must inform a spout type\");\n        }\n\n        rawTweets.parallelismHint(spoutThreads)\n                .shuffle();\n                \n        Stream tweets = rawTweets.each(new Fields(\"tweet_str\"), new JsonParser(), new Fields(\"tweet\"))\n                .parallelismHint(parserThreads)\n                .shuffle()\n                .project(new Fields(\"tweet\"));\n                \n        Stream parsedTweets = tweets.each(new Fields(\"tweet\"), new TweetFilter(), new Fields(\"id\", \"text\"))\n                .parallelismHint(tweetFilterThreads)\n                .shuffle()\n                .project(new Fields(\"id\", \"text\"));\n                \n        Stream cleanTweets = parsedTweets.each(new Fields(\"text\"), new TextFilter(), new Fields(\"text_clean\"))\n                .parallelismHint(textFilterThreads)\n                .shuffle()\n                .project(new Fields(\"id\", \"text_clean\"));\n                \n        Stream stemmedTweets = cleanTweets.each(new Fields(\"text_clean\"), new Stemmer(), new Fields(\"text_stemmed\"))\n                .parallelismHint(stemmerThreads)\n                .shuffle()\n                .project(new Fields(\"id\", \"text_stemmed\"));\n                \n        Stream posScores = stemmedTweets.each(new Fields(\"text_stemmed\"), new SentimentTypeScorer(Type.Positive), new Fields(\"pos_score\"))\n                .parallelismHint(posScorerThreads)\n                .shuffle()\n                .project(new Fields(\"id\", \"text_stemmed\", \"pos_score\"));\n                \n        Stream negScores = stemmedTweets.each(new Fields(\"text_stemmed\"), new SentimentTypeScorer(Type.Negative), new Fields(\"neg_score\"))\n                .parallelismHint(negScorerThreads)\n                .shuffle()\n                .project(new Fields(\"id\", \"neg_score\"));\n        \n        Stream joinedScores = topology.join(posScores, new Fields(\"id\"), negScores, new Fields(\"id\"), new Fields(\"id\", \"text\", \"pos_score\", \"neg_score\"))\n                .parallelismHint(sinkThreads);\n                \n        Stream scores = joinedScores.each(new Fields(\"pos_score\", \"neg_score\"), new SentimentScorer(), new Fields(\"score\"))\n                .parallelismHint(scorerThreads)\n                .shuffle();\n                \n        if (sinkType.equals(SinkType.CONSOLE)) {\n            scores.each(scores.getOutputFields(), new Debug())\n                    .parallelismHint(sinkThreads);\n        }\n        \n        return topology.build();\n    }", "signature": "StormTopology buildTopology()", "full_signature": "@Override public StormTopology buildTopology()", "class_method_signature": "SentimentAnalysis.buildTopology()", "testcase": false, "constructor": false, "invocations": ["getInt", "getString", "newStream", "createKafkaSpout", "shuffle", "parallelismHint", "project", "shuffle", "parallelismHint", "each", "project", "shuffle", "parallelismHint", "each", "project", "shuffle", "parallelismHint", "each", "project", "shuffle", "parallelismHint", "each", "project", "shuffle", "parallelismHint", "each", "project", "shuffle", "parallelismHint", "each", "parallelismHint", "join", "shuffle", "parallelismHint", "each", "equals", "parallelismHint", "each", "getOutputFields", "build"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}