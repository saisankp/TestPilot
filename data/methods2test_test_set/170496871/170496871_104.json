{"test_class": {"identifier": "JdbcTypesDefaultTransformerTest", "superclass": "extends GridCommonAbstractTest", "interfaces": "", "fields": [], "file": "modules/core/src/test/java/org/apache/ignite/cache/store/jdbc/JdbcTypesDefaultTransformerTest.java"}, "test_case": {"identifier": "testTransformer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTransformer() throws Exception {\n        // Connection to H2.\n        String jdbcUrl = \"jdbc:gg-h2:mem:JdbcTypesDefaultTransformerTest\";\n        String usr = \"sa\";\n        String pwd = \"\";\n\n        // Connection to Oracle.\n        // -Duser.region=us -Duser.language=en\n//        Class.forName(\"oracle.jdbc.OracleDriver\");\n//        String jdbcUrl = \"jdbc:oracle:thin:@localhost:1521:XE\";\n//        String usr = \"test\";\n//        String pwd = \"test\";\n\n        // Connection to MS SQL.\n//        Class.forName(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\");\n//        String jdbcUrl = \"jdbc:sqlserver://localhost;databaseName=master\";\n//        String usr = \"test\";\n//        String pwd = \"test\";\n\n        // Connection to DB2.\n//        Class.forName(\"com.ibm.db2.jcc.DB2Driver\");\n//        String jdbcUrl = \"jdbc:db2://localhost:50000/sample\";\n//        String usr = \"test\";\n//        String pwd = \"test\";\n\n        // Connection to Postgre SQL.\n//        Class.forName(\"org.postgresql.Driver\");\n//        String jdbcUrl = \"jdbc:postgresql://localhost:5433/postgres\";\n//        String usr = \"test\";\n//        String pwd = \"test\";\n\n        // Connection to My SQL.\n//        Class.forName(\"com.mysql.jdbc.Driver\");\n//        String jdbcUrl = \"jdbc:mysql://localhost:3306/test\";\n//        String usr = \"test\";\n//        String pwd = \"test\";\n\n        try (Connection conn = DriverManager.getConnection(jdbcUrl, usr, pwd)) {\n            Statement stmt = conn.createStatement();\n\n            try {\n                stmt.executeUpdate(\"DROP TABLE TEST_TRANSFORMER\");\n            }\n            catch (SQLException ignored) {\n                // No-op.\n            }\n\n            // Create table in H2.\n            stmt.executeUpdate(\"CREATE TABLE TEST_TRANSFORMER(id INTEGER, \" +\n                \"c1 BOOLEAN, c2 INTEGER, c3 TINYINT, c4 SMALLINT, c5 BIGINT, c6 DECIMAL(20, 2), c7 DOUBLE PRECISION, c8 REAL, \" +\n                \"c9 TIME, c10 DATE, c11 TIMESTAMP, c12 VARCHAR(100), c13 UUID)\");\n\n            // Create table in ORACLE.\n//                stmt.executeUpdate(\"CREATE TABLE TEST_TRANSFORMER(id INTEGER, \" +\n//                    \"c1 NUMBER(1), c2 INTEGER, c3 NUMBER(3), c4 NUMBER(4), c5 NUMBER(20), c6 NUMBER(20, 2), c7 NUMBER(20, 2), c8 NUMBER(10, 2), \" +\n//                    \"c9 TIMESTAMP, c10 DATE, c11 TIMESTAMP, c12 VARCHAR(100), c13 VARCHAR(36))\");\n\n            // Create table in MS SQL.\n//            stmt.executeUpdate(\"CREATE TABLE TEST_TRANSFORMER(id INTEGER, \" +\n//                \"c1 BIT, c2 INTEGER, c3 TINYINT, c4 SMALLINT, c5 BIGINT, c6 DECIMAL(20, 2), c7 DOUBLE PRECISION, c8 REAL, \" +\n//                \"c9 TIME, c10 DATE, c11 DATETIME, c12 VARCHAR(100), c13 VARCHAR(36))\");\n\n            // Create table in DB2.\n//            stmt.executeUpdate(\"CREATE TABLE TEST_TRANSFORMER(id INTEGER, \" +\n//                \"c1 SMALLINT , c2 INTEGER, c3 SMALLINT , c4 SMALLINT, c5 BIGINT, c6 DECIMAL(20, 2), c7 DOUBLE PRECISION, c8 REAL, \" +\n//                \"c9 TIME, c10 DATE, c11 TIMESTAMP, c12 VARCHAR(100), c13 VARCHAR(36))\");\n\n            // Create table in Postgre SQL.\n//            stmt.executeUpdate(\"CREATE TABLE TEST_TRANSFORMER(id INTEGER, \" +\n//                \"c1 BOOLEAN, c2 INTEGER, c3 SMALLINT, c4 SMALLINT, c5 BIGINT, c6 DECIMAL(20, 2), c7 DOUBLE PRECISION, c8 REAL, \" +\n//                \"c9 TIME, c10 DATE, c11 TIMESTAMP, c12 VARCHAR(100), c13 UUID)\");\n\n            // Create table in MySQL.\n//            stmt.executeUpdate(\"CREATE TABLE TEST_TRANSFORMER(id INTEGER, \" +\n//                \"c1 BOOLEAN, c2 INTEGER, c3 TINYINT, c4 SMALLINT, c5 BIGINT, c6 DECIMAL(20, 2), c7 DOUBLE PRECISION, c8 REAL, \" +\n//                \"c9 TIME, c10 DATE, c11 TIMESTAMP(3), c12 VARCHAR(100), c13 VARCHAR(36))\");\n\n            // Add data to H2, Postgre SQL and MySQL.\n            stmt.executeUpdate(\"INSERT INTO TEST_TRANSFORMER(id, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13) \" +\n                \"VALUES (1, true, 1, 2, 3, 4, 5.35, 6.15, 7.32, '00:01:08', '2016-01-01', '2016-01-01 00:01:08.296', \" +\n                \"'100', '736bc956-090c-40d2-94da-916f2161f8a2')\");\n            stmt.executeUpdate(\"INSERT INTO TEST_TRANSFORMER(id, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13) \" +\n                \"VALUES (2, false, 10, 20, 30, 40, 50, 60, 70, current_time, current_date, current_timestamp, \" +\n                \"'100.55', '736bc956-090c-40d2-94da-916f2161cdea')\");\n\n            // Add data to Oracle.\n//            stmt.executeUpdate(\"INSERT INTO TEST_TRANSFORMER(id, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13) \" +\n//                \"VALUES (1, 1, 1, 2, 3, 4, 5.35, 6.15, 7.32, \" +\n//                \"TO_TIMESTAMP('2016-01-01 00:01:08', 'YYYY-MM-DD HH24:MI:SS'), \" +\n//                \"TO_DATE('2016-01-01', 'YYYY-MM-DD'),\" +\n//                \"TO_TIMESTAMP('2016-01-01 00:01:08.296', 'YYYY-MM-DD HH24:MI:SS.FF3'), \" +\n//                \"'100', '736bc956-090c-40d2-94da-916f2161f8a2')\");\n//            stmt.executeUpdate(\"INSERT INTO TEST_TRANSFORMER(id, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13) \" +\n//                \"VALUES (2, 0, 10, 20, 30, 40, 50, 60, 70,\" +\n//                \"TO_TIMESTAMP('2016-01-01 00:01:08', 'YYYY-MM-DD HH24:MI:SS'), \" +\n//                \"TO_DATE('2016-01-01', 'YYYY-MM-DD'),\" +\n//                \"TO_TIMESTAMP('2016-01-01 00:01:08.296', 'YYYY-MM-DD HH24:MI:SS.FF3'), \" +\n//                \"'100.55', '736bc956-090c-40d2-94da-916f2161cdea')\");\n\n            // Add data to MS SQL or IBM DB2.\n//            stmt.executeUpdate(\"INSERT INTO TEST_TRANSFORMER(id, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13) \" +\n//                \"VALUES (1, 1, 1, 2, 3, 4, 5.35, 6.15, 7.32, '00:01:08', '2016-01-01', '2016-01-01 00:01:08.296', \" +\n//                \"'100', '736bc956-090c-40d2-94da-916f2161f8a2')\");\n//            stmt.executeUpdate(\"INSERT INTO TEST_TRANSFORMER(id, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13) \" +\n//                \"VALUES (2, 0, 10, 20, 30, 40, 50, 60, 70, '00:01:08', '2016-01-01', '2016-01-01 00:01:08.296', \" +\n//                \"'100.55', '736bc956-090c-40d2-94da-916f2161cdea')\");\n\n            stmt.executeUpdate(\"INSERT INTO TEST_TRANSFORMER(id, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13) \" +\n                \"VALUES (3, null, null, null, null, null, null, null, null, null, null, null, null, null)\");\n\n            ResultSet rs = stmt.executeQuery(\"select c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13 from TEST_TRANSFORMER order by id\");\n\n            assertTrue(rs.next());\n\n            JdbcTypesDefaultTransformer transformer = JdbcTypesDefaultTransformer.INSTANCE;\n\n            // c1: Test BOOLEAN column.\n            assertTrue((Boolean)transformer.getColumnValue(rs, 1, boolean.class));\n            assertTrue((Boolean)transformer.getColumnValue(rs, 1, Boolean.class));\n            assertEquals(1, transformer.getColumnValue(rs, 1, int.class));\n            assertEquals(1.0, transformer.getColumnValue(rs, 1, double.class));\n\n            String s = (String)transformer.getColumnValue(rs, 1, String.class);\n            assertTrue(\"true\".equalsIgnoreCase(s) || \"1\".equals(s) || \"t\".equalsIgnoreCase(s));\n\n            // c2: Test INTEGER column.\n            assertEquals(1, transformer.getColumnValue(rs, 2, int.class));\n            assertEquals(1, transformer.getColumnValue(rs, 2, Integer.class));\n            assertEquals(1L, transformer.getColumnValue(rs, 2, Long.class));\n            assertEquals(1.0, transformer.getColumnValue(rs, 2, double.class));\n            assertEquals(\"1\", transformer.getColumnValue(rs, 2, String.class));\n\n            // c3: Test TINYINT column.\n            byte b = 2;\n            assertEquals(b, transformer.getColumnValue(rs, 3, byte.class));\n            assertEquals(b, transformer.getColumnValue(rs, 3, Byte.class));\n            assertEquals(2.0, transformer.getColumnValue(rs, 3, double.class));\n            assertEquals(\"2\", transformer.getColumnValue(rs, 3, String.class));\n\n            // c4: Test SMALLINT column.\n            short shrt = 3;\n            assertEquals(shrt, transformer.getColumnValue(rs, 4, short.class));\n            assertEquals(shrt, transformer.getColumnValue(rs, 4, Short.class));\n            assertEquals(3.0, transformer.getColumnValue(rs, 4, double.class));\n            assertEquals(\"3\", transformer.getColumnValue(rs, 4, String.class));\n\n            // c5: Test BIGINT column.\n            assertEquals(4L, transformer.getColumnValue(rs, 5, long.class));\n            assertEquals(4L, transformer.getColumnValue(rs, 5, Long.class));\n            assertEquals(4, transformer.getColumnValue(rs, 5, int.class));\n            assertEquals(4, transformer.getColumnValue(rs, 5, Integer.class));\n            assertEquals(4.0, transformer.getColumnValue(rs, 5, double.class));\n            assertEquals(\"4\", transformer.getColumnValue(rs, 5, String.class));\n            assertEquals(new BigDecimal(\"4\"), transformer.getColumnValue(rs, 5, BigDecimal.class));\n\n            // c6: Test DECIMAL column.\n            assertEquals(new BigDecimal(\"5.35\"), transformer.getColumnValue(rs, 6, BigDecimal.class));\n            assertEquals(5L, transformer.getColumnValue(rs, 6, long.class));\n            assertEquals(\"5.35\", transformer.getColumnValue(rs, 6, String.class));\n\n            // c7: Test DOUBLE column.\n            assertEquals(6.15, transformer.getColumnValue(rs, 7, double.class));\n            assertEquals(6.15, transformer.getColumnValue(rs, 7, Double.class));\n            assertEquals(6, transformer.getColumnValue(rs, 7, int.class));\n            assertEquals(6, transformer.getColumnValue(rs, 7, Integer.class));\n            assertTrue(transformer.getColumnValue(rs, 7, String.class).toString().startsWith(\"6.15\"));\n\n            // c8: Test REAL column.\n            assertTrue((7.32f - (Float)transformer.getColumnValue(rs, 8, float.class)) < 0.01);\n            assertTrue((7.32f - (Float)transformer.getColumnValue(rs, 8, Float.class)) < 0.01);\n            assertTrue((7.32 - (Double)transformer.getColumnValue(rs, 8, double.class)) < 0.01);\n            assertTrue((7.32 - (Double)transformer.getColumnValue(rs, 8, Double.class)) < 0.01);\n            assertEquals(7, transformer.getColumnValue(rs, 8, int.class));\n            assertEquals(7, transformer.getColumnValue(rs, 8, Integer.class));\n            assertTrue(transformer.getColumnValue(rs, 8, String.class).toString().startsWith(\"7.32\"));\n\n            // c9: Test TIME column.\n            assertTrue(transformer.getColumnValue(rs, 9, Time.class) instanceof Time);\n            assertTrue(transformer.getColumnValue(rs, 9, String.class).toString().contains(\"00:01:08\"));\n\n            // c10: Test DATE column.\n            assertTrue(transformer.getColumnValue(rs, 10, Date.class) instanceof Date);\n            assertTrue(transformer.getColumnValue(rs, 10, String.class).toString().startsWith(\"2016-01-01\"));\n\n            // c11: Test TIMESTAMP column.\n            transformer.getColumnValue(rs, 11, Timestamp.class);\n            assertTrue(transformer.getColumnValue(rs, 11, String.class).toString().startsWith(\"2016-01-01 00:01:08.29\"));\n\n            // c12: Test VARCHAR column.\n            assertEquals(\"100\", transformer.getColumnValue(rs, 12, String.class));\n            assertEquals(100, transformer.getColumnValue(rs, 12, int.class));\n\n            // c13: Test UUID column.\n            transformer.getColumnValue(rs, 13, UUID.class);\n            assertEquals(\"736bc956-090c-40d2-94da-916f2161f8a2\", transformer.getColumnValue(rs, 13, String.class));\n\n            assertTrue(rs.next());\n\n            // Test BOOLEAN column.\n            assertFalse((Boolean)transformer.getColumnValue(rs, 1, boolean.class));\n            assertFalse((Boolean)transformer.getColumnValue(rs, 1, Boolean.class));\n            assertEquals(0, transformer.getColumnValue(rs, 1, int.class));\n            assertEquals(0.0, transformer.getColumnValue(rs, 1, double.class));\n\n            s = (String)transformer.getColumnValue(rs, 1, String.class);\n            assertTrue(\"false\".equalsIgnoreCase(s) || \"0\".equals(s) || \"f\".equalsIgnoreCase(s));\n\n            assertTrue(rs.next());\n\n            // Check how null values will be transformed.\n            assertNotNull(transformer.getColumnValue(rs, 1, boolean.class));\n            assertNull(transformer.getColumnValue(rs, 1, Boolean.class));\n\n            assertEquals(0, transformer.getColumnValue(rs, 2, int.class));\n            assertNull(transformer.getColumnValue(rs, 2, Integer.class));\n\n            assertEquals((byte)0, transformer.getColumnValue(rs, 3, byte.class));\n            assertNull(transformer.getColumnValue(rs, 3, Byte.class));\n\n            assertEquals((short)0, transformer.getColumnValue(rs, 4, short.class));\n            assertNull(transformer.getColumnValue(rs, 4, Short.class));\n\n            assertEquals(0L, transformer.getColumnValue(rs, 5, long.class));\n            assertNull(transformer.getColumnValue(rs, 5, Long.class));\n\n            assertNull(transformer.getColumnValue(rs, 6, BigDecimal.class));\n\n            assertEquals(0d, transformer.getColumnValue(rs, 7, double.class));\n            assertNull(transformer.getColumnValue(rs, 7, Double.class));\n\n            assertEquals(0f, transformer.getColumnValue(rs, 8, float.class));\n            assertNull(transformer.getColumnValue(rs, 8, Float.class));\n\n            assertNull(transformer.getColumnValue(rs, 9, Time.class));\n\n            assertNull(transformer.getColumnValue(rs, 10, Date.class));\n\n            assertNull(transformer.getColumnValue(rs, 11, Timestamp.class));\n\n            assertNull(transformer.getColumnValue(rs, 12, String.class));\n\n            assertNull(transformer.getColumnValue(rs, 13, UUID.class));\n        }\n    }", "signature": "void testTransformer()", "full_signature": "@Test public void testTransformer()", "class_method_signature": "JdbcTypesDefaultTransformerTest.testTransformer()", "testcase": true, "constructor": false, "invocations": ["getConnection", "createStatement", "executeUpdate", "executeUpdate", "executeUpdate", "executeUpdate", "executeUpdate", "executeQuery", "assertTrue", "next", "assertTrue", "getColumnValue", "assertTrue", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "getColumnValue", "assertTrue", "equalsIgnoreCase", "equals", "equalsIgnoreCase", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertTrue", "startsWith", "toString", "getColumnValue", "assertTrue", "getColumnValue", "assertTrue", "getColumnValue", "assertTrue", "getColumnValue", "assertTrue", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "assertTrue", "startsWith", "toString", "getColumnValue", "assertTrue", "getColumnValue", "assertTrue", "contains", "toString", "getColumnValue", "assertTrue", "getColumnValue", "assertTrue", "startsWith", "toString", "getColumnValue", "getColumnValue", "assertTrue", "startsWith", "toString", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "getColumnValue", "assertEquals", "getColumnValue", "assertTrue", "next", "assertFalse", "getColumnValue", "assertFalse", "getColumnValue", "assertEquals", "getColumnValue", "assertEquals", "getColumnValue", "getColumnValue", "assertTrue", "equalsIgnoreCase", "equals", "equalsIgnoreCase", "assertTrue", "next", "assertNotNull", "getColumnValue", "assertNull", "getColumnValue", "assertEquals", "getColumnValue", "assertNull", "getColumnValue", "assertEquals", "getColumnValue", "assertNull", "getColumnValue", "assertEquals", "getColumnValue", "assertNull", "getColumnValue", "assertEquals", "getColumnValue", "assertNull", "getColumnValue", "assertNull", "getColumnValue", "assertEquals", "getColumnValue", "assertNull", "getColumnValue", "assertEquals", "getColumnValue", "assertNull", "getColumnValue", "assertNull", "getColumnValue", "assertNull", "getColumnValue", "assertNull", "getColumnValue", "assertNull", "getColumnValue", "assertNull", "getColumnValue"]}, "focal_class": {"identifier": "JdbcTypesDefaultTransformer", "superclass": "", "interfaces": "implements JdbcTypesTransformer", "fields": [{"original_string": "private static final long serialVersionUID = 0L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 0L", "var_name": "serialVersionUID"}, {"original_string": "public static final JdbcTypesDefaultTransformer INSTANCE = new JdbcTypesDefaultTransformer();", "modifier": "public static final", "type": "JdbcTypesDefaultTransformer", "declarator": "INSTANCE = new JdbcTypesDefaultTransformer()", "var_name": "INSTANCE"}], "methods": [{"identifier": "getColumnValue", "parameters": "(ResultSet rs, int colIdx, Class<?> type)", "modifiers": "@Override public", "return": "Object", "signature": "Object getColumnValue(ResultSet rs, int colIdx, Class<?> type)", "full_signature": "@Override public Object getColumnValue(ResultSet rs, int colIdx, Class<?> type)", "class_method_signature": "JdbcTypesDefaultTransformer.getColumnValue(ResultSet rs, int colIdx, Class<?> type)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/JdbcTypesDefaultTransformer.java"}, "focal_method": {"identifier": "getColumnValue", "parameters": "(ResultSet rs, int colIdx, Class<?> type)", "modifiers": "@Override public", "return": "Object", "body": "@Override public Object getColumnValue(ResultSet rs, int colIdx, Class<?> type) throws SQLException {\n        if (type == String.class)\n            return rs.getString(colIdx);\n\n        if (type == int.class || type == Integer.class) {\n            int res = rs.getInt(colIdx);\n\n            return rs.wasNull() && type == Integer.class ? null : res;\n        }\n\n        if (type == long.class || type == Long.class) {\n            long res = rs.getLong(colIdx);\n\n            return rs.wasNull() && type == Long.class ? null : res;\n        }\n\n        if (type == double.class || type == Double.class) {\n            double res = rs.getDouble(colIdx);\n\n            return rs.wasNull() && type == Double.class ? null : res;\n        }\n\n        if (type == Date.class || type == java.util.Date.class)\n            return rs.getDate(colIdx);\n\n        if (type == Timestamp.class)\n            return rs.getTimestamp(colIdx);\n\n        if (type == Time.class)\n            return rs.getTime(colIdx);\n\n        if (type == boolean.class || type == Boolean.class) {\n            boolean res = rs.getBoolean(colIdx);\n\n            return rs.wasNull() && type == Boolean.class ? null : res;\n        }\n\n        if (type == byte.class || type == Byte.class) {\n            byte res = rs.getByte(colIdx);\n\n            return rs.wasNull() && type == Byte.class ? null : res;\n        }\n\n        if (type == short.class || type == Short.class) {\n            short res = rs.getShort(colIdx);\n\n            return rs.wasNull() && type == Short.class ? null : res;\n        }\n\n        if (type == float.class || type == Float.class) {\n            float res = rs.getFloat(colIdx);\n\n            return rs.wasNull() && type == Float.class ? null : res;\n        }\n\n        if (type == BigDecimal.class)\n            return rs.getBigDecimal(colIdx);\n\n        if (type == UUID.class) {\n            Object res = rs.getObject(colIdx);\n\n            if (res instanceof UUID)\n                return res;\n\n            if (res instanceof byte[]) {\n                ByteBuffer bb = ByteBuffer.wrap((byte[])res);\n\n                long most = bb.getLong();\n                long least = bb.getLong();\n\n                return new UUID(most, least);\n            }\n\n            if (res instanceof String)\n                return UUID.fromString((String)res);\n        }\n\n        if (type.isEnum()) {\n            if (NUMERIC_TYPES.contains(rs.getMetaData().getColumnType(colIdx))) {\n                int ordinal = rs.getInt(colIdx);\n\n                Object[] values = type.getEnumConstants();\n\n                return rs.wasNull() || ordinal >= values.length ? null : values[ordinal];\n            }\n\n            String str = rs.getString(colIdx);\n\n            try {\n                return rs.wasNull() ? null : Enum.valueOf((Class<? extends Enum>) type, str.trim());\n            }\n            catch (IllegalArgumentException ignore) {\n                return null;\n            }\n        }\n\n        return rs.getObject(colIdx);\n    }", "signature": "Object getColumnValue(ResultSet rs, int colIdx, Class<?> type)", "full_signature": "@Override public Object getColumnValue(ResultSet rs, int colIdx, Class<?> type)", "class_method_signature": "JdbcTypesDefaultTransformer.getColumnValue(ResultSet rs, int colIdx, Class<?> type)", "testcase": false, "constructor": false, "invocations": ["getString", "getInt", "wasNull", "getLong", "wasNull", "getDouble", "wasNull", "getDate", "getTimestamp", "getTime", "getBoolean", "wasNull", "getByte", "wasNull", "getShort", "wasNull", "getFloat", "wasNull", "getBigDecimal", "getObject", "wrap", "getLong", "getLong", "fromString", "isEnum", "contains", "getColumnType", "getMetaData", "getInt", "getEnumConstants", "wasNull", "getString", "wasNull", "valueOf", "trim", "getObject"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}