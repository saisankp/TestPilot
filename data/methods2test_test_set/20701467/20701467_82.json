{"test_class": {"identifier": "Ipv6DecoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "packethandler/implementation/src/test/java/org/opendaylight/l2switch/packethandler/decoders/Ipv6DecoderTest.java"}, "test_case": {"identifier": "testDecode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecode() throws Exception {\n        byte[] payload = {\n            0x01, 0x23, 0x45, 0x67, (byte) 0x89, (byte) 0xab,\n            (byte) 0xcd, (byte) 0xef, 0x01, 0x23, 0x45, 0x67,\n            (byte)0x86, (byte)0xdd, // Ethernet EtherType\n            0x60, // Version = 6,  DSCP = 3\n            (byte)0xf0, 0x00, 0x01, // ECN = 3, FlowLabel = 1\n            0x00, 0x05, // Length = 5\n            0x11, // NextHeader = UDP\n            (byte)0x0f, // HopLimit = 15\n            0x01, 0x23, 0x45, 0x67, (byte)0x89, (byte)0xab, (byte)0xcd, (byte)0xef, // Src IP Address (part1)\n            (byte)0xfe, (byte)0xdc, (byte)0xba, (byte)0x98, 0x76, 0x54, 0x32, 0x10, // Src IP Address (part2)\n            (byte)0xfe, (byte)0xdc, (byte)0xba, (byte)0x98, 0x76, 0x54, 0x32, 0x10, // Dest IP Address (part1)\n            0x01, 0x23, 0x45, 0x67, (byte)0x89, (byte)0xab, (byte)0xcd, (byte)0xef, // Dest IP Address (part2)\n            0x01, 0x02, 0x03, 0x04, 0x05, // Data\n            (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff // Ethernet Crc\n        };\n        NotificationProviderService npServiceMock = Mockito.mock(NotificationProviderService.class);\n        ArrayList<PacketChain> packetChainList = new ArrayList<>();\n        packetChainList.add(new PacketChainBuilder().setPacket(new RawPacketBuilder().build()).build());\n        packetChainList.add(\n                new PacketChainBuilder().setPacket(new EthernetPacketBuilder().setPayloadOffset(14).build()).build());\n\n        Ipv6PacketReceived notification = new Ipv6Decoder(npServiceMock).decode(\n                new EthernetPacketReceivedBuilder().setPacketChain(packetChainList).setPayload(payload).build());\n        Ipv6Packet ipv6Packet = (Ipv6Packet) notification.getPacketChain().get(2).getPacket();\n        assertEquals(6, ipv6Packet.getVersion().intValue());\n        assertEquals(3, ipv6Packet.getDscp().getValue().intValue());\n        assertEquals(3, ipv6Packet.getEcn().intValue());\n        assertEquals(1, ipv6Packet.getFlowLabel().intValue());\n        assertEquals(5, ipv6Packet.getIpv6Length().intValue());\n        assertEquals(KnownIpProtocols.Udp, ipv6Packet.getNextHeader());\n        assertEquals(15, ipv6Packet.getHopLimit().intValue());\n        assertEquals(\"123:4567:89ab:cdef:fedc:ba98:7654:3210\", ipv6Packet.getSourceIpv6().getValue());\n        assertEquals(\"fedc:ba98:7654:3210:123:4567:89ab:cdef\", ipv6Packet.getDestinationIpv6().getValue());\n        assertNull(ipv6Packet.getExtensionHeaders());\n        assertEquals(54, ipv6Packet.getPayloadOffset().intValue());\n        assertEquals(5, ipv6Packet.getPayloadLength().intValue());\n        assertTrue(Arrays.equals(payload, notification.getPayload()));\n    }", "signature": "void testDecode()", "full_signature": "@Test public void testDecode()", "class_method_signature": "Ipv6DecoderTest.testDecode()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "build", "setPacket", "build", "add", "build", "setPacket", "build", "setPayloadOffset", "decode", "build", "setPayload", "setPacketChain", "getPacket", "get", "getPacketChain", "assertEquals", "intValue", "getVersion", "assertEquals", "intValue", "getValue", "getDscp", "assertEquals", "intValue", "getEcn", "assertEquals", "intValue", "getFlowLabel", "assertEquals", "intValue", "getIpv6Length", "assertEquals", "getNextHeader", "assertEquals", "intValue", "getHopLimit", "assertEquals", "getValue", "getSourceIpv6", "assertEquals", "getValue", "getDestinationIpv6", "assertNull", "getExtensionHeaders", "assertEquals", "intValue", "getPayloadOffset", "assertEquals", "intValue", "getPayloadLength", "assertTrue", "equals", "getPayload"]}, "focal_class": {"identifier": "Ipv6Decoder", "superclass": "extends AbstractPacketDecoder<EthernetPacketReceived, Ipv6PacketReceived>", "interfaces": "implements EthernetPacketListener", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(Ipv6Decoder.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Ipv6Decoder.class)", "var_name": "LOG"}], "methods": [{"identifier": "Ipv6Decoder", "parameters": "(NotificationProviderService notificationProviderService)", "modifiers": "public", "return": "", "signature": " Ipv6Decoder(NotificationProviderService notificationProviderService)", "full_signature": "public  Ipv6Decoder(NotificationProviderService notificationProviderService)", "class_method_signature": "Ipv6Decoder.Ipv6Decoder(NotificationProviderService notificationProviderService)", "testcase": false, "constructor": true}, {"identifier": "decode", "parameters": "(EthernetPacketReceived ethernetPacketReceived)", "modifiers": "@Override public", "return": "Ipv6PacketReceived", "signature": "Ipv6PacketReceived decode(EthernetPacketReceived ethernetPacketReceived)", "full_signature": "@Override public Ipv6PacketReceived decode(EthernetPacketReceived ethernetPacketReceived)", "class_method_signature": "Ipv6Decoder.decode(EthernetPacketReceived ethernetPacketReceived)", "testcase": false, "constructor": false}, {"identifier": "getConsumedNotificationListener", "parameters": "()", "modifiers": "@Override public", "return": "NotificationListener", "signature": "NotificationListener getConsumedNotificationListener()", "full_signature": "@Override public NotificationListener getConsumedNotificationListener()", "class_method_signature": "Ipv6Decoder.getConsumedNotificationListener()", "testcase": false, "constructor": false}, {"identifier": "onEthernetPacketReceived", "parameters": "(EthernetPacketReceived notification)", "modifiers": "@Override public", "return": "void", "signature": "void onEthernetPacketReceived(EthernetPacketReceived notification)", "full_signature": "@Override public void onEthernetPacketReceived(EthernetPacketReceived notification)", "class_method_signature": "Ipv6Decoder.onEthernetPacketReceived(EthernetPacketReceived notification)", "testcase": false, "constructor": false}, {"identifier": "canDecode", "parameters": "(EthernetPacketReceived ethernetPacketReceived)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canDecode(EthernetPacketReceived ethernetPacketReceived)", "full_signature": "@Override public boolean canDecode(EthernetPacketReceived ethernetPacketReceived)", "class_method_signature": "Ipv6Decoder.canDecode(EthernetPacketReceived ethernetPacketReceived)", "testcase": false, "constructor": false}], "file": "packethandler/implementation/src/main/java/org/opendaylight/l2switch/packethandler/decoders/Ipv6Decoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(EthernetPacketReceived ethernetPacketReceived)", "modifiers": "@Override public", "return": "Ipv6PacketReceived", "body": "@Override\n    public Ipv6PacketReceived decode(EthernetPacketReceived ethernetPacketReceived) {\n        Ipv6PacketReceivedBuilder ipv6ReceivedBuilder = new Ipv6PacketReceivedBuilder();\n\n        // Find the latest packet in the packet-chain, which is an\n        // EthernetPacket\n        List<PacketChain> packetChainList = ethernetPacketReceived.getPacketChain();\n        EthernetPacket ethernetPacket = (EthernetPacket) packetChainList.get(packetChainList.size() - 1).getPacket();\n        int bitOffset = ethernetPacket.getPayloadOffset() * NetUtils.NUM_BITS_IN_A_BYTE;\n        byte[] data = ethernetPacketReceived.getPayload();\n\n        Ipv6PacketBuilder builder = new Ipv6PacketBuilder();\n        try {\n            builder.setVersion(BitBufferHelper.getShort(BitBufferHelper.getBits(data, bitOffset, 4)));\n            if (builder.getVersion().intValue() != 6) {\n                LOG.debug(\"Version should be 6, but is {}\", builder.getVersion());\n            }\n\n            builder.setDscp(new Dscp(BitBufferHelper.getShort(BitBufferHelper.getBits(data, bitOffset + 4, 6))));\n            builder.setEcn(BitBufferHelper.getShort(BitBufferHelper.getBits(data, bitOffset + 10, 2)));\n            builder.setFlowLabel(BitBufferHelper.getLong(BitBufferHelper.getBits(data, bitOffset + 12, 20)));\n            builder.setIpv6Length(BitBufferHelper.getInt(BitBufferHelper.getBits(data, bitOffset + 32, 16)));\n            builder.setNextHeader(KnownIpProtocols\n                    .forValue(BitBufferHelper.getInt(BitBufferHelper.getBits(data, bitOffset + 48, 8))));\n            builder.setHopLimit(BitBufferHelper.getShort(BitBufferHelper.getBits(data, bitOffset + 56, 8)));\n            builder.setSourceIpv6(Ipv6Address.getDefaultInstance(\n                    InetAddress.getByAddress(BitBufferHelper.getBits(data, bitOffset + 64, 128)).getHostAddress()));\n            builder.setDestinationIpv6(Ipv6Address.getDefaultInstance(\n                    InetAddress.getByAddress(BitBufferHelper.getBits(data, bitOffset + 192, 128)).getHostAddress()));\n            builder.setPayloadOffset((320 + bitOffset) / NetUtils.NUM_BITS_IN_A_BYTE);\n            builder.setPayloadLength(builder.getIpv6Length());\n\n            // Decode the optional \"extension headers\"\n            List<ExtensionHeaders> extensionHeaders = new ArrayList<>();\n            KnownIpProtocols nextHeader = builder.getNextHeader();\n            int extHeaderOffset = 0;\n            while (nextHeader != null && !nextHeader.equals(KnownIpProtocols.Tcp)\n                    && !nextHeader.equals(KnownIpProtocols.Udp)) {\n                // Set the extension header's type & length & data\n                short nextHeaderType = BitBufferHelper\n                        .getShort(BitBufferHelper.getBits(data, 320 + extHeaderOffset + bitOffset, 8));\n                nextHeader = KnownIpProtocols.forValue(nextHeaderType);\n                int octetLength = BitBufferHelper\n                        .getInt(BitBufferHelper.getBits(data, 328 + extHeaderOffset + bitOffset, 8));\n                int start = (336 + extHeaderOffset + bitOffset) / NetUtils.NUM_BITS_IN_A_BYTE;\n                int end = start + 6 + octetLength;\n\n                extensionHeaders.add(new ExtensionHeadersBuilder().setNextHeader(nextHeader).setLength(octetLength)\n                        .setData(Arrays.copyOfRange(data, start, end)).build());\n\n                // Update the NextHeader field\n                extHeaderOffset += 64 + octetLength * NetUtils.NUM_BITS_IN_A_BYTE;\n            }\n            if (!extensionHeaders.isEmpty()) {\n                builder.setExtensionHeaders(extensionHeaders);\n            }\n        } catch (BufferException | UnknownHostException e) {\n            LOG.debug(\"Exception while decoding IPv4 packet\", e.getMessage());\n        }\n\n        // build ipv6\n        packetChainList.add(new PacketChainBuilder().setPacket(builder.build()).build());\n        ipv6ReceivedBuilder.setPacketChain(packetChainList);\n\n        // carry forward the original payload.\n        ipv6ReceivedBuilder.setPayload(ethernetPacketReceived.getPayload());\n\n        return ipv6ReceivedBuilder.build();\n    }", "signature": "Ipv6PacketReceived decode(EthernetPacketReceived ethernetPacketReceived)", "full_signature": "@Override public Ipv6PacketReceived decode(EthernetPacketReceived ethernetPacketReceived)", "class_method_signature": "Ipv6Decoder.decode(EthernetPacketReceived ethernetPacketReceived)", "testcase": false, "constructor": false, "invocations": ["getPacketChain", "getPacket", "get", "size", "getPayloadOffset", "getPayload", "setVersion", "getShort", "getBits", "intValue", "getVersion", "debug", "getVersion", "setDscp", "getShort", "getBits", "setEcn", "getShort", "getBits", "setFlowLabel", "getLong", "getBits", "setIpv6Length", "getInt", "getBits", "setNextHeader", "forValue", "getInt", "getBits", "setHopLimit", "getShort", "getBits", "setSourceIpv6", "getDefaultInstance", "getHostAddress", "getByAddress", "getBits", "setDestinationIpv6", "getDefaultInstance", "getHostAddress", "getByAddress", "getBits", "setPayloadOffset", "setPayloadLength", "getIpv6Length", "getNextHeader", "equals", "equals", "getShort", "getBits", "forValue", "getInt", "getBits", "add", "build", "setData", "setLength", "setNextHeader", "copyOfRange", "isEmpty", "setExtensionHeaders", "debug", "getMessage", "add", "build", "setPacket", "build", "setPacketChain", "setPayload", "getPayload", "build"]}, "repository": {"repo_id": 20701467, "url": "https://github.com/opendaylight/l2switch", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 25, "size": 4178, "license": "licensed"}}