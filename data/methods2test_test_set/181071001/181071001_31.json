{"test_class": {"identifier": "TestExpressionLanguageUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final PropertyDescriptor DESCRIPTOR = new PropertyDescriptor();", "modifier": "private static final", "type": "PropertyDescriptor", "declarator": "DESCRIPTOR = new PropertyDescriptor()", "var_name": "DESCRIPTOR"}], "file": "efm/efm-flow-designer/efm-flow-designer-framework/src/test/java/com/cloudera/cem/efm/validation/TestExpressionLanguageUtil.java"}, "test_case": {"identifier": "testIsExpressionLanguagePresent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsExpressionLanguagePresent() {\n        assertTrue(ExpressionLanguageUtil.isExpressionLanguagePresent(DESCRIPTOR, \"${value}\"));\n        assertTrue(ExpressionLanguageUtil.isExpressionLanguagePresent(DESCRIPTOR, \"${myFunction()}\"));\n        assertTrue(ExpressionLanguageUtil.isExpressionLanguagePresent(DESCRIPTOR, \"${attr:chained():function()}\"));\n        assertTrue(ExpressionLanguageUtil.isExpressionLanguagePresent(DESCRIPTOR, \"${}\"));\n        assertTrue(ExpressionLanguageUtil.isExpressionLanguagePresent(DESCRIPTOR, \"$ ${var}\"));\n\n        assertFalse(ExpressionLanguageUtil.isExpressionLanguagePresent(DESCRIPTOR, \"${\"));\n        assertFalse(ExpressionLanguageUtil.isExpressionLanguagePresent(DESCRIPTOR, \"$${var}\"));\n        assertFalse(ExpressionLanguageUtil.isExpressionLanguagePresent(DESCRIPTOR, \"plain value\"));\n        assertFalse(ExpressionLanguageUtil.isExpressionLanguagePresent(DESCRIPTOR, \"plain\"));\n        assertFalse(ExpressionLanguageUtil.isExpressionLanguagePresent(DESCRIPTOR, \"${'}'\"));\n        assertFalse(ExpressionLanguageUtil.isExpressionLanguagePresent(DESCRIPTOR, \"${'}\"));\n\n        assertTrue(ExpressionLanguageUtil.isExpressionLanguagePresent(DESCRIPTOR, \"${\\\"'\\\"}\"));\n    }", "signature": "void testIsExpressionLanguagePresent()", "full_signature": "@Test public void testIsExpressionLanguagePresent()", "class_method_signature": "TestExpressionLanguageUtil.testIsExpressionLanguagePresent()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isExpressionLanguagePresent", "assertTrue", "isExpressionLanguagePresent", "assertTrue", "isExpressionLanguagePresent", "assertTrue", "isExpressionLanguagePresent", "assertTrue", "isExpressionLanguagePresent", "assertFalse", "isExpressionLanguagePresent", "assertFalse", "isExpressionLanguagePresent", "assertFalse", "isExpressionLanguagePresent", "assertFalse", "isExpressionLanguagePresent", "assertFalse", "isExpressionLanguagePresent", "assertFalse", "isExpressionLanguagePresent", "assertTrue", "isExpressionLanguagePresent"]}, "focal_class": {"identifier": "ExpressionLanguageUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "isExpressionLanguagePresent", "parameters": "(final PropertyDescriptor descriptor, final String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isExpressionLanguagePresent(final PropertyDescriptor descriptor, final String value)", "full_signature": "public static boolean isExpressionLanguagePresent(final PropertyDescriptor descriptor, final String value)", "class_method_signature": "ExpressionLanguageUtil.isExpressionLanguagePresent(final PropertyDescriptor descriptor, final String value)", "testcase": false, "constructor": false}, {"identifier": "findEndQuoteChar", "parameters": "(final String value, final int quoteStart)", "modifiers": "private static", "return": "int", "signature": "int findEndQuoteChar(final String value, final int quoteStart)", "full_signature": "private static int findEndQuoteChar(final String value, final int quoteStart)", "class_method_signature": "ExpressionLanguageUtil.findEndQuoteChar(final String value, final int quoteStart)", "testcase": false, "constructor": false}], "file": "efm/efm-flow-designer/efm-flow-designer-framework/src/main/java/com/cloudera/cem/efm/validation/ExpressionLanguageUtil.java"}, "focal_method": {"identifier": "isExpressionLanguagePresent", "parameters": "(final PropertyDescriptor descriptor, final String value)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isExpressionLanguagePresent(final PropertyDescriptor descriptor, final String value) {\n        final ExpressionLanguageScope scope = descriptor.getExpressionLanguageScope();\n        if (scope == null || scope == ExpressionLanguageScope.NONE) {\n            return false;\n        }\n\n        char lastChar = 0;\n        int embeddedCount = 0;\n        int expressionStart = -1;\n        boolean oddDollarCount = false;\n        int backslashCount = 0;\n\n        for (int i = 0; i < value.length(); i++) {\n            final char c = value.charAt(i);\n\n            if (expressionStart > -1 && (c == '\\'' || c == '\"') && (lastChar != '\\\\' || backslashCount % 2 == 0)) {\n                final int endQuoteIndex = findEndQuoteChar(value, i);\n                if (endQuoteIndex < 0) {\n                    break;\n                }\n\n                i = endQuoteIndex;\n                continue;\n            }\n\n            if (c == '{') {\n                if (oddDollarCount && lastChar == '$') {\n                    if (embeddedCount == 0) {\n                        expressionStart = i - 1;\n                    }\n                }\n\n                // Keep track of the number of opening curly braces that we are embedded within,\n                // if we are within an Expression. If we are outside of an Expression, we can just ignore\n                // curly braces. This allows us to ignore the first character if the value is something\n                // like: { ${abc} }\n                // However, we will count the curly braces if we have something like: ${ $${abc} }\n                if (expressionStart > -1) {\n                    embeddedCount++;\n                }\n            } else if (c == '}') {\n                if (embeddedCount <= 0) {\n                    continue;\n                }\n\n                if (--embeddedCount == 0) {\n                    if (expressionStart > -1) {\n                        // ended expression. EL is present\n                        return true;\n                    }\n\n                    expressionStart = -1;\n                }\n            } else if (c == '$') {\n                oddDollarCount = !oddDollarCount;\n            } else if (c == '\\\\') {\n                backslashCount++;\n            } else {\n                oddDollarCount = false;\n            }\n\n            lastChar = c;\n        }\n\n        return false;\n    }", "signature": "boolean isExpressionLanguagePresent(final PropertyDescriptor descriptor, final String value)", "full_signature": "public static boolean isExpressionLanguagePresent(final PropertyDescriptor descriptor, final String value)", "class_method_signature": "ExpressionLanguageUtil.isExpressionLanguagePresent(final PropertyDescriptor descriptor, final String value)", "testcase": false, "constructor": false, "invocations": ["getExpressionLanguageScope", "length", "charAt", "findEndQuoteChar"]}, "repository": {"repo_id": 181071001, "url": "https://github.com/hortonworks/efm", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 2003, "license": "licensed"}}