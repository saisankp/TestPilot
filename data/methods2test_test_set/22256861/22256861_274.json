{"test_class": {"identifier": "PpeOpTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TESTFILENAME = \"ppetest.nc\";", "modifier": "private static final", "type": "String", "declarator": "TESTFILENAME = \"ppetest.nc\"", "var_name": "TESTFILENAME"}, {"original_string": "private static final String TESTFILENAME2 = \"ppetest2.nc\";", "modifier": "private static final", "type": "String", "declarator": "TESTFILENAME2 = \"ppetest2.nc\"", "var_name": "TESTFILENAME2"}], "file": "s3tbx-ppe-operator/src/test/java/org/esa/s3tbx/ppe/PpeOpTest.java"}, "test_case": {"identifier": "getPixelValueTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getPixelValueTest() throws IOException, URISyntaxException {\n        String testFilePath = getTestFilePath(TESTFILENAME);\n        Product sourceProduct = ProductIO.readProduct(testFilePath);\n        RasterDataNode rasterDataNode = sourceProduct.getRasterDataNode(\"Oa11_radiance\");\n        Rectangle expectedRect = new Rectangle(0, 0, 20, 20);\n        MultiLevelImage image = rasterDataNode.getSourceImage();\n        Raster raster = image.getData(expectedRect);\n        TileImpl sourceTile = new TileImpl(rasterDataNode, raster);\n\n        Double testValue = PpeOp.getPixelValue(sourceTile, 0, 21);\n        assertEquals(0, testValue, 1e-5);\n\n        Double testValue2 = PpeOp.getPixelValue(sourceTile, 3, image.getMaxY() + 1);\n        assertEquals(0, testValue2, 1e-5);\n\n\n        Double testValue3 = PpeOp.getPixelValue(sourceTile, 8, -1);\n        assertEquals(0, testValue3, 1e-5);\n\n        Double testValue4 = PpeOp.getPixelValue(sourceTile, 1, 1);\n        assertEquals(10.36252, testValue4, 1e-5);\n\n        Double testValue5 = PpeOp.getPixelValue(sourceTile, 10, 10);\n        assertEquals(10.47061, testValue5, 1e-5);\n    }", "signature": "void getPixelValueTest()", "full_signature": "@Test public void getPixelValueTest()", "class_method_signature": "PpeOpTest.getPixelValueTest()", "testcase": true, "constructor": false, "invocations": ["getTestFilePath", "readProduct", "getRasterDataNode", "getSourceImage", "getData", "getPixelValue", "assertEquals", "getPixelValue", "getMaxY", "assertEquals", "getPixelValue", "assertEquals", "getPixelValue", "assertEquals", "getPixelValue", "assertEquals"]}, "focal_class": {"identifier": "PpeOp", "superclass": "extends Operator", "interfaces": "", "fields": [{"original_string": "private static final String VALID_PIXEL_EXPRESSION = \"not quality_flags_land\";", "modifier": "private static final", "type": "String", "declarator": "VALID_PIXEL_EXPRESSION = \"not quality_flags_land\"", "var_name": "VALID_PIXEL_EXPRESSION"}, {"original_string": "private static final String OLCI_REFLEC_NAME_REGEX = \"Oa\\\\d\\\\d_radiance\";", "modifier": "private static final", "type": "String", "declarator": "OLCI_REFLEC_NAME_REGEX = \"Oa\\\\d\\\\d_radiance\"", "var_name": "OLCI_REFLEC_NAME_REGEX"}, {"original_string": "@SourceProduct(label = \"OLCI L1B\", alias = \"source\", description = \"OLCI L1B source product\", type = \"OL_1_E(F|R)R\")\n    private Product sourceProduct;", "modifier": "@SourceProduct(label = \"OLCI L1B\", alias = \"source\", description = \"OLCI L1B source product\", type = \"OL_1_E(F|R)R\")\n    private", "type": "Product", "declarator": "sourceProduct", "var_name": "sourceProduct"}, {"original_string": "@TargetProduct()\n    private Product targetProduct;", "modifier": "@TargetProduct()\n    private", "type": "Product", "declarator": "targetProduct", "var_name": "targetProduct"}, {"original_string": "@Parameter(label = \"Filtering cut-off\", defaultValue = \"0.7\",\n            description = \"Minimum threshold to differentiate with the neighboring pixels.\")\n    private double cutOff;", "modifier": "@Parameter(label = \"Filtering cut-off\", defaultValue = \"0.7\",\n            description = \"Minimum threshold to differentiate with the neighboring pixels.\")\n    private", "type": "double", "declarator": "cutOff", "var_name": "cutOff"}, {"original_string": "@Parameter(label = \"Number of MAD\", defaultValue = \"10\",\n            description = \"Multiplier of MAD (Median Absolute Deviation) used for the threshold.\")\n    private double numberOfMAD;", "modifier": "@Parameter(label = \"Number of MAD\", defaultValue = \"10\",\n            description = \"Multiplier of MAD (Median Absolute Deviation) used for the threshold.\")\n    private", "type": "double", "declarator": "numberOfMAD", "var_name": "numberOfMAD"}, {"original_string": "@Parameter(label = \"Valid pixel expression\", description = \"An expression to filter which pixel are considered.\",\n            converter = BooleanExpressionConverter.class, defaultValue = VALID_PIXEL_EXPRESSION)\n    private String validExpression;", "modifier": "@Parameter(label = \"Valid pixel expression\", description = \"An expression to filter which pixel are considered.\",\n            converter = BooleanExpressionConverter.class, defaultValue = VALID_PIXEL_EXPRESSION)\n    private", "type": "String", "declarator": "validExpression", "var_name": "validExpression"}, {"original_string": "private Mask validPixelMask;", "modifier": "private", "type": "Mask", "declarator": "validPixelMask", "var_name": "validPixelMask"}], "methods": [{"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "PpeOp.initialize()", "testcase": false, "constructor": false}, {"identifier": "computeTileStack", "parameters": "(Map<Band, Tile> targetTiles, Rectangle targetRectangle, ProgressMonitor pm)", "modifiers": "@Override public", "return": "void", "signature": "void computeTileStack(Map<Band, Tile> targetTiles, Rectangle targetRectangle, ProgressMonitor pm)", "full_signature": "@Override public void computeTileStack(Map<Band, Tile> targetTiles, Rectangle targetRectangle, ProgressMonitor pm)", "class_method_signature": "PpeOp.computeTileStack(Map<Band, Tile> targetTiles, Rectangle targetRectangle, ProgressMonitor pm)", "testcase": false, "constructor": false}, {"identifier": "createTargetProduct", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createTargetProduct()", "full_signature": "private void createTargetProduct()", "class_method_signature": "PpeOp.createTargetProduct()", "testcase": false, "constructor": false}, {"identifier": "setBandTile", "parameters": "(int x, int y, double median, double mad, double reflecValue, Tile targetTile)", "modifiers": "private", "return": "void", "signature": "void setBandTile(int x, int y, double median, double mad, double reflecValue, Tile targetTile)", "full_signature": "private void setBandTile(int x, int y, double median, double mad, double reflecValue, Tile targetTile)", "class_method_signature": "PpeOp.setBandTile(int x, int y, double median, double mad, double reflecValue, Tile targetTile)", "testcase": false, "constructor": false}, {"identifier": "setFlagBandTile", "parameters": "(int x, int y, double median, double mad, double reflecValue, int bandIndex, Tile targetTile)", "modifiers": "private", "return": "void", "signature": "void setFlagBandTile(int x, int y, double median, double mad, double reflecValue, int bandIndex, Tile targetTile)", "full_signature": "private void setFlagBandTile(int x, int y, double median, double mad, double reflecValue, int bandIndex, Tile targetTile)", "class_method_signature": "PpeOp.setFlagBandTile(int x, int y, double median, double mad, double reflecValue, int bandIndex, Tile targetTile)", "testcase": false, "constructor": false}, {"identifier": "getPixelList", "parameters": "(int x, int y, Tile sourceTile)", "modifiers": "static", "return": "double[]", "signature": "double[] getPixelList(int x, int y, Tile sourceTile)", "full_signature": "static double[] getPixelList(int x, int y, Tile sourceTile)", "class_method_signature": "PpeOp.getPixelList(int x, int y, Tile sourceTile)", "testcase": false, "constructor": false}, {"identifier": "getPixelValue", "parameters": "(Tile tile, int x, int y)", "modifiers": "static", "return": "Double", "signature": "Double getPixelValue(Tile tile, int x, int y)", "full_signature": "static Double getPixelValue(Tile tile, int x, int y)", "class_method_signature": "PpeOp.getPixelValue(Tile tile, int x, int y)", "testcase": false, "constructor": false}, {"identifier": "getMedian", "parameters": "(double[] listDoubles)", "modifiers": "static", "return": "Double", "signature": "Double getMedian(double[] listDoubles)", "full_signature": "static Double getMedian(double[] listDoubles)", "class_method_signature": "PpeOp.getMedian(double[] listDoubles)", "testcase": false, "constructor": false}, {"identifier": "getMAD", "parameters": "(double[] listDoubles)", "modifiers": "static", "return": "Double", "signature": "Double getMAD(double[] listDoubles)", "full_signature": "static Double getMAD(double[] listDoubles)", "class_method_signature": "PpeOp.getMAD(double[] listDoubles)", "testcase": false, "constructor": false}], "file": "s3tbx-ppe-operator/src/main/java/org/esa/s3tbx/ppe/PpeOp.java"}, "focal_method": {"identifier": "getPixelValue", "parameters": "(Tile tile, int x, int y)", "modifiers": "static", "return": "Double", "body": "static Double getPixelValue(Tile tile, int x, int y) {\n        if ((y >= tile.getMinY()) && (y <= tile.getMaxY())) {\n            return tile.getSampleDouble(x, y);\n        } else {\n            return 0d;\n        }\n    }", "signature": "Double getPixelValue(Tile tile, int x, int y)", "full_signature": "static Double getPixelValue(Tile tile, int x, int y)", "class_method_signature": "PpeOp.getPixelValue(Tile tile, int x, int y)", "testcase": false, "constructor": false, "invocations": ["getMinY", "getMaxY", "getSampleDouble"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}