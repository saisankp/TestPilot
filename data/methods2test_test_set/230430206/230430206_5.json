{"test_class": {"identifier": "PemReaderTest", "superclass": "extends BaseX509ParameterizedTestCase", "interfaces": "", "fields": [], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/util/PemReaderTest.java"}, "test_case": {"identifier": "testLoadUnencryptedPrivateKeyFromKeyStoreWithWrongPassword", "parameters": "()", "modifiers": "@Test(expected = IOException.class) public", "return": "void", "body": "@Test(expected = IOException.class)\n    public void testLoadUnencryptedPrivateKeyFromKeyStoreWithWrongPassword() throws GeneralSecurityException, IOException {\n        if (x509TestContext.isKeyStoreEncrypted()) {\n            throw new IOException();\n        }\n        PemReader.loadPrivateKey(\n                x509TestContext.getKeyStoreFile(KeyStoreFileType.PEM),\n                Optional.of(\"wrong password\"));\n    }", "signature": "void testLoadUnencryptedPrivateKeyFromKeyStoreWithWrongPassword()", "full_signature": "@Test(expected = IOException.class) public void testLoadUnencryptedPrivateKeyFromKeyStoreWithWrongPassword()", "class_method_signature": "PemReaderTest.testLoadUnencryptedPrivateKeyFromKeyStoreWithWrongPassword()", "testcase": true, "constructor": false, "invocations": ["isKeyStoreEncrypted", "loadPrivateKey", "getKeyStoreFile", "of"]}, "focal_class": {"identifier": "PemReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern CERT_PATTERN = Pattern.compile(\n            \"-+BEGIN\\\\s+.*CERTIFICATE[^-]*-+(?:\\\\s|\\\\r|\\\\n)+\" + // Header\n                    \"([a-z0-9+/=\\\\r\\\\n]+)\" +                    // Base64 text\n                    \"-+END\\\\s+.*CERTIFICATE[^-]*-+\",            // Footer\n            CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "CERT_PATTERN = Pattern.compile(\n            \"-+BEGIN\\\\s+.*CERTIFICATE[^-]*-+(?:\\\\s|\\\\r|\\\\n)+\" + // Header\n                    \"([a-z0-9+/=\\\\r\\\\n]+)\" +                    // Base64 text\n                    \"-+END\\\\s+.*CERTIFICATE[^-]*-+\",            // Footer\n            CASE_INSENSITIVE)", "var_name": "CERT_PATTERN"}, {"original_string": "private static final Pattern PRIVATE_KEY_PATTERN = Pattern.compile(\n            \"-+BEGIN\\\\s+.*PRIVATE\\\\s+KEY[^-]*-+(?:\\\\s|\\\\r|\\\\n)+\" + // Header\n                    \"([a-z0-9+/=\\\\r\\\\n]+)\" +                       // Base64 text\n                    \"-+END\\\\s+.*PRIVATE\\\\s+KEY[^-]*-+\",            // Footer\n            CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "PRIVATE_KEY_PATTERN = Pattern.compile(\n            \"-+BEGIN\\\\s+.*PRIVATE\\\\s+KEY[^-]*-+(?:\\\\s|\\\\r|\\\\n)+\" + // Header\n                    \"([a-z0-9+/=\\\\r\\\\n]+)\" +                       // Base64 text\n                    \"-+END\\\\s+.*PRIVATE\\\\s+KEY[^-]*-+\",            // Footer\n            CASE_INSENSITIVE)", "var_name": "PRIVATE_KEY_PATTERN"}, {"original_string": "private static final Pattern PUBLIC_KEY_PATTERN = Pattern.compile(\n            \"-+BEGIN\\\\s+.*PUBLIC\\\\s+KEY[^-]*-+(?:\\\\s|\\\\r|\\\\n)+\" + // Header\n                    \"([a-z0-9+/=\\\\r\\\\n]+)\" +                      // Base64 text\n                    \"-+END\\\\s+.*PUBLIC\\\\s+KEY[^-]*-+\",            // Footer\n            CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "PUBLIC_KEY_PATTERN = Pattern.compile(\n            \"-+BEGIN\\\\s+.*PUBLIC\\\\s+KEY[^-]*-+(?:\\\\s|\\\\r|\\\\n)+\" + // Header\n                    \"([a-z0-9+/=\\\\r\\\\n]+)\" +                      // Base64 text\n                    \"-+END\\\\s+.*PUBLIC\\\\s+KEY[^-]*-+\",            // Footer\n            CASE_INSENSITIVE)", "var_name": "PUBLIC_KEY_PATTERN"}], "methods": [{"identifier": "PemReader", "parameters": "()", "modifiers": "private", "return": "", "signature": " PemReader()", "full_signature": "private  PemReader()", "class_method_signature": "PemReader.PemReader()", "testcase": false, "constructor": true}, {"identifier": "loadTrustStore", "parameters": "(File certificateChainFile)", "modifiers": "public static", "return": "KeyStore", "signature": "KeyStore loadTrustStore(File certificateChainFile)", "full_signature": "public static KeyStore loadTrustStore(File certificateChainFile)", "class_method_signature": "PemReader.loadTrustStore(File certificateChainFile)", "testcase": false, "constructor": false}, {"identifier": "loadKeyStore", "parameters": "(File certificateChainFile, File privateKeyFile, Optional<String> keyPassword)", "modifiers": "public static", "return": "KeyStore", "signature": "KeyStore loadKeyStore(File certificateChainFile, File privateKeyFile, Optional<String> keyPassword)", "full_signature": "public static KeyStore loadKeyStore(File certificateChainFile, File privateKeyFile, Optional<String> keyPassword)", "class_method_signature": "PemReader.loadKeyStore(File certificateChainFile, File privateKeyFile, Optional<String> keyPassword)", "testcase": false, "constructor": false}, {"identifier": "readCertificateChain", "parameters": "(File certificateChainFile)", "modifiers": "public static", "return": "List<X509Certificate>", "signature": "List<X509Certificate> readCertificateChain(File certificateChainFile)", "full_signature": "public static List<X509Certificate> readCertificateChain(File certificateChainFile)", "class_method_signature": "PemReader.readCertificateChain(File certificateChainFile)", "testcase": false, "constructor": false}, {"identifier": "readCertificateChain", "parameters": "(String certificateChain)", "modifiers": "public static", "return": "List<X509Certificate>", "signature": "List<X509Certificate> readCertificateChain(String certificateChain)", "full_signature": "public static List<X509Certificate> readCertificateChain(String certificateChain)", "class_method_signature": "PemReader.readCertificateChain(String certificateChain)", "testcase": false, "constructor": false}, {"identifier": "loadPrivateKey", "parameters": "(File privateKeyFile, Optional<String> keyPassword)", "modifiers": "public static", "return": "PrivateKey", "signature": "PrivateKey loadPrivateKey(File privateKeyFile, Optional<String> keyPassword)", "full_signature": "public static PrivateKey loadPrivateKey(File privateKeyFile, Optional<String> keyPassword)", "class_method_signature": "PemReader.loadPrivateKey(File privateKeyFile, Optional<String> keyPassword)", "testcase": false, "constructor": false}, {"identifier": "loadPrivateKey", "parameters": "(String privateKey, Optional<String> keyPassword)", "modifiers": "public static", "return": "PrivateKey", "signature": "PrivateKey loadPrivateKey(String privateKey, Optional<String> keyPassword)", "full_signature": "public static PrivateKey loadPrivateKey(String privateKey, Optional<String> keyPassword)", "class_method_signature": "PemReader.loadPrivateKey(String privateKey, Optional<String> keyPassword)", "testcase": false, "constructor": false}, {"identifier": "loadPublicKey", "parameters": "(File publicKeyFile)", "modifiers": "public static", "return": "PublicKey", "signature": "PublicKey loadPublicKey(File publicKeyFile)", "full_signature": "public static PublicKey loadPublicKey(File publicKeyFile)", "class_method_signature": "PemReader.loadPublicKey(File publicKeyFile)", "testcase": false, "constructor": false}, {"identifier": "loadPublicKey", "parameters": "(String publicKey)", "modifiers": "public static", "return": "PublicKey", "signature": "PublicKey loadPublicKey(String publicKey)", "full_signature": "public static PublicKey loadPublicKey(String publicKey)", "class_method_signature": "PemReader.loadPublicKey(String publicKey)", "testcase": false, "constructor": false}, {"identifier": "base64Decode", "parameters": "(String base64)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] base64Decode(String base64)", "full_signature": "private static byte[] base64Decode(String base64)", "class_method_signature": "PemReader.base64Decode(String base64)", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/util/PemReader.java"}, "focal_method": {"identifier": "loadPrivateKey", "parameters": "(File privateKeyFile, Optional<String> keyPassword)", "modifiers": "public static", "return": "PrivateKey", "body": "public static PrivateKey loadPrivateKey(File privateKeyFile, Optional<String> keyPassword)\n            throws IOException, GeneralSecurityException\n    {\n        String privateKey = new String(Files.readAllBytes(privateKeyFile.toPath()), US_ASCII);\n        return loadPrivateKey(privateKey, keyPassword);\n    }", "signature": "PrivateKey loadPrivateKey(File privateKeyFile, Optional<String> keyPassword)", "full_signature": "public static PrivateKey loadPrivateKey(File privateKeyFile, Optional<String> keyPassword)", "class_method_signature": "PemReader.loadPrivateKey(File privateKeyFile, Optional<String> keyPassword)", "testcase": false, "constructor": false, "invocations": ["readAllBytes", "toPath", "loadPrivateKey"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}