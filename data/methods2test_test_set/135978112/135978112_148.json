{"test_class": {"identifier": "ClientUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "clients/src/test/java/org/apache/kafka/clients/ClientUtilsTest.java"}, "test_case": {"identifier": "testParseAndValidateAddresses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseAndValidateAddresses() {\n        check(\"127.0.0.1:8000\");\n        check(\"mydomain.com:8080\");\n        check(\"[::1]:8000\");\n        check(\"[2001:db8:85a3:8d3:1319:8a2e:370:7348]:1234\", \"mydomain.com:10000\");\n        List<InetSocketAddress> validatedAddresses = check(\"some.invalid.hostname.foo.bar:9999\", \"mydomain.com:10000\");\n        assertEquals(1, validatedAddresses.size());\n        InetSocketAddress onlyAddress = validatedAddresses.get(0);\n        assertEquals(\"mydomain.com\", onlyAddress.getHostName());\n        assertEquals(10000, onlyAddress.getPort());\n    }", "signature": "void testParseAndValidateAddresses()", "full_signature": "@Test public void testParseAndValidateAddresses()", "class_method_signature": "ClientUtilsTest.testParseAndValidateAddresses()", "testcase": true, "constructor": false, "invocations": ["check", "check", "check", "check", "check", "assertEquals", "size", "get", "assertEquals", "getHostName", "assertEquals", "getPort"]}, "focal_class": {"identifier": "ClientUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ClientUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ClientUtils.class)", "var_name": "log"}], "methods": [{"identifier": "parseAndValidateAddresses", "parameters": "(List<String> urls)", "modifiers": "public static", "return": "List<InetSocketAddress>", "signature": "List<InetSocketAddress> parseAndValidateAddresses(List<String> urls)", "full_signature": "public static List<InetSocketAddress> parseAndValidateAddresses(List<String> urls)", "class_method_signature": "ClientUtils.parseAndValidateAddresses(List<String> urls)", "testcase": false, "constructor": false}, {"identifier": "closeQuietly", "parameters": "(Closeable c, String name, AtomicReference<Throwable> firstException)", "modifiers": "public static", "return": "void", "signature": "void closeQuietly(Closeable c, String name, AtomicReference<Throwable> firstException)", "full_signature": "public static void closeQuietly(Closeable c, String name, AtomicReference<Throwable> firstException)", "class_method_signature": "ClientUtils.closeQuietly(Closeable c, String name, AtomicReference<Throwable> firstException)", "testcase": false, "constructor": false}, {"identifier": "createChannelBuilder", "parameters": "(Map<String, ?> configs)", "modifiers": "public static", "return": "ChannelBuilder", "signature": "ChannelBuilder createChannelBuilder(Map<String, ?> configs)", "full_signature": "public static ChannelBuilder createChannelBuilder(Map<String, ?> configs)", "class_method_signature": "ClientUtils.createChannelBuilder(Map<String, ?> configs)", "testcase": false, "constructor": false}], "file": "clients/src/main/java/org/apache/kafka/clients/ClientUtils.java"}, "focal_method": {"identifier": "parseAndValidateAddresses", "parameters": "(List<String> urls)", "modifiers": "public static", "return": "List<InetSocketAddress>", "body": "public static List<InetSocketAddress> parseAndValidateAddresses(List<String> urls) {\n        List<InetSocketAddress> addresses = new ArrayList<InetSocketAddress>();\n        for (String url : urls) {\n            if (url != null && url.length() > 0) {\n                String host = getHost(url);\n                Integer port = getPort(url);\n                if (host == null || port == null)\n                    throw new ConfigException(\"Invalid url in \" + CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG + \": \" + url);\n                try {\n                    InetSocketAddress address = new InetSocketAddress(host, port);\n                    if (address.isUnresolved()) {\n                        log.warn(\"Removing server from \" + CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG + \" as DNS resolution failed: \" + url);\n                    } else {\n                        addresses.add(address);\n                    }\n                } catch (NumberFormatException e) {\n                    throw new ConfigException(\"Invalid port in \" + CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG + \": \" + url);\n                }\n            }\n        }\n        if (addresses.size() < 1)\n            throw new ConfigException(\"No resolvable bootstrap urls given in \" + CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);\n        return addresses;\n    }", "signature": "List<InetSocketAddress> parseAndValidateAddresses(List<String> urls)", "full_signature": "public static List<InetSocketAddress> parseAndValidateAddresses(List<String> urls)", "class_method_signature": "ClientUtils.parseAndValidateAddresses(List<String> urls)", "testcase": false, "constructor": false, "invocations": ["length", "getHost", "getPort", "isUnresolved", "warn", "add", "size"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}