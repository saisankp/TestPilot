{"test_class": {"identifier": "EllipticCurvesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final TestVector1[] testVectors1 =\n      new TestVector1[] {\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P256,\n            \"700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287\",\n            \"db71e509e3fd9b060ddb20ba5c51dcc5948d46fbf640dfe0441782cab85fa4ac\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P256,\n            \"809f04289c64348c01515eb03d5ce7ac1a8cb9498f5caa50197e58d43a86a7ae\",\n            \"b29d84e811197f25eba8f5194092cb6ff440e26d4421011372461f579271cda3\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P256,\n            \"df3989b9fa55495719b3cf46dccd28b5153f7808191dd518eff0c3cff2b705ed\",\n            \"422294ff46003429d739a33206c8752552c8ba54a270defc06e221e0feaf6ac4\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P256,\n            \"356c5a444c049a52fee0adeb7e5d82ae5aa83030bfff31bbf8ce2096cf161c4b\",\n            \"57d128de8b2a57a094d1a001e572173f96e8866ae352bf29cddaf92fc85b2f92\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P384,\n            \"a7c76b970c3b5fe8b05d2838ae04ab47697b9eaf52e764592efda27fe7513272\"\n                + \"734466b400091adbf2d68c58e0c50066\",\n            \"ac68f19f2e1cb879aed43a9969b91a0839c4c38a49749b661efedf243451915e\"\n                + \"d0905a32b060992b468c64766fc8437a\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P384,\n            \"30f43fcf2b6b00de53f624f1543090681839717d53c7c955d1d69efaf0349b736\"\n                + \"3acb447240101cbb3af6641ce4b88e0\",\n            \"25e46c0c54f0162a77efcc27b6ea792002ae2ba82714299c860857a68153ab62e\"\n                + \"525ec0530d81b5aa15897981e858757\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P521,\n            \"000000685a48e86c79f0f0875f7bc18d25eb5fc8c0b07e5da4f4370f3a9490340\"\n                + \"854334b1e1b87fa395464c60626124a4e70d0f785601d37c09870ebf176666877a2\"\n                + \"046d\",\n            \"000001ba52c56fc8776d9e8f5db4f0cc27636d0b741bbe05400697942e80b7398\"\n                + \"84a83bde99e0f6716939e632bc8986fa18dccd443a348b6c3e522497955a4f3c302\"\n                + \"f676\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P521,\n            \"000001df277c152108349bc34d539ee0cf06b24f5d3500677b4445453ccc21409\"\n                + \"453aafb8a72a0be9ebe54d12270aa51b3ab7f316aa5e74a951c5e53f74cd95fc29a\"\n                + \"ee7a\",\n            \"0000013d52f33a9f3c14384d1587fa8abe7aed74bc33749ad9c570b471776422c\"\n                + \"7d4505d9b0a96b3bfac041e4c6a6990ae7f700e5b4a6640229112deafa0cd8bb0d0\"\n                + \"89b0\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P521,\n            \"00000092db3142564d27a5f0006f819908fba1b85038a5bc2509906a497daac67\"\n                + \"fd7aee0fc2daba4e4334eeaef0e0019204b471cd88024f82115d8149cc0cf4f7ce1\"\n                + \"a4d5\",\n            \"0000016bad0623f517b158d9881841d2571efbad63f85cbe2e581960c5d670601\"\n                + \"a6760272675a548996217e4ab2b8ebce31d71fca63fcc3c08e91c1d8edd91cf6fe8\"\n                + \"45f8\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P521,\n            \"0000004f38816681771289ce0cb83a5e29a1ab06fc91f786994b23708ff08a08a\"\n                + \"0f675b809ae99e9f9967eb1a49f196057d69e50d6dedb4dd2d9a81c02bdcc8f7f51\"\n                + \"8460\",\n            \"0000009efb244c8b91087de1eed766500f0e81530752d469256ef79f6b965d8a2\"\n                + \"232a0c2dbc4e8e1d09214bab38485be6e357c4200d073b52f04e4a16fc6f5247187\"\n                + \"aecb\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P521,\n            \"000001a32099b02c0bd85371f60b0dd20890e6c7af048c8179890fda308b359db\"\n                + \"bc2b7a832bb8c6526c4af99a7ea3f0b3cb96ae1eb7684132795c478ad6f962e4a6f\"\n                + \"446d\",\n            \"0000017627357b39e9d7632a1370b3e93c1afb5c851b910eb4ead0c9d387df67c\"\n                + \"de85003e0e427552f1cd09059aad0262e235cce5fba8cedc4fdc1463da76dcd4b6d\"\n                + \"1a46\")\n      };", "modifier": "public static final", "type": "TestVector1[]", "declarator": "testVectors1 =\n      new TestVector1[] {\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P256,\n            \"700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287\",\n            \"db71e509e3fd9b060ddb20ba5c51dcc5948d46fbf640dfe0441782cab85fa4ac\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P256,\n            \"809f04289c64348c01515eb03d5ce7ac1a8cb9498f5caa50197e58d43a86a7ae\",\n            \"b29d84e811197f25eba8f5194092cb6ff440e26d4421011372461f579271cda3\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P256,\n            \"df3989b9fa55495719b3cf46dccd28b5153f7808191dd518eff0c3cff2b705ed\",\n            \"422294ff46003429d739a33206c8752552c8ba54a270defc06e221e0feaf6ac4\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P256,\n            \"356c5a444c049a52fee0adeb7e5d82ae5aa83030bfff31bbf8ce2096cf161c4b\",\n            \"57d128de8b2a57a094d1a001e572173f96e8866ae352bf29cddaf92fc85b2f92\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P384,\n            \"a7c76b970c3b5fe8b05d2838ae04ab47697b9eaf52e764592efda27fe7513272\"\n                + \"734466b400091adbf2d68c58e0c50066\",\n            \"ac68f19f2e1cb879aed43a9969b91a0839c4c38a49749b661efedf243451915e\"\n                + \"d0905a32b060992b468c64766fc8437a\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P384,\n            \"30f43fcf2b6b00de53f624f1543090681839717d53c7c955d1d69efaf0349b736\"\n                + \"3acb447240101cbb3af6641ce4b88e0\",\n            \"25e46c0c54f0162a77efcc27b6ea792002ae2ba82714299c860857a68153ab62e\"\n                + \"525ec0530d81b5aa15897981e858757\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P521,\n            \"000000685a48e86c79f0f0875f7bc18d25eb5fc8c0b07e5da4f4370f3a9490340\"\n                + \"854334b1e1b87fa395464c60626124a4e70d0f785601d37c09870ebf176666877a2\"\n                + \"046d\",\n            \"000001ba52c56fc8776d9e8f5db4f0cc27636d0b741bbe05400697942e80b7398\"\n                + \"84a83bde99e0f6716939e632bc8986fa18dccd443a348b6c3e522497955a4f3c302\"\n                + \"f676\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P521,\n            \"000001df277c152108349bc34d539ee0cf06b24f5d3500677b4445453ccc21409\"\n                + \"453aafb8a72a0be9ebe54d12270aa51b3ab7f316aa5e74a951c5e53f74cd95fc29a\"\n                + \"ee7a\",\n            \"0000013d52f33a9f3c14384d1587fa8abe7aed74bc33749ad9c570b471776422c\"\n                + \"7d4505d9b0a96b3bfac041e4c6a6990ae7f700e5b4a6640229112deafa0cd8bb0d0\"\n                + \"89b0\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P521,\n            \"00000092db3142564d27a5f0006f819908fba1b85038a5bc2509906a497daac67\"\n                + \"fd7aee0fc2daba4e4334eeaef0e0019204b471cd88024f82115d8149cc0cf4f7ce1\"\n                + \"a4d5\",\n            \"0000016bad0623f517b158d9881841d2571efbad63f85cbe2e581960c5d670601\"\n                + \"a6760272675a548996217e4ab2b8ebce31d71fca63fcc3c08e91c1d8edd91cf6fe8\"\n                + \"45f8\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P521,\n            \"0000004f38816681771289ce0cb83a5e29a1ab06fc91f786994b23708ff08a08a\"\n                + \"0f675b809ae99e9f9967eb1a49f196057d69e50d6dedb4dd2d9a81c02bdcc8f7f51\"\n                + \"8460\",\n            \"0000009efb244c8b91087de1eed766500f0e81530752d469256ef79f6b965d8a2\"\n                + \"232a0c2dbc4e8e1d09214bab38485be6e357c4200d073b52f04e4a16fc6f5247187\"\n                + \"aecb\"),\n        new TestVector1(\n            EllipticCurves.CurveType.NIST_P521,\n            \"000001a32099b02c0bd85371f60b0dd20890e6c7af048c8179890fda308b359db\"\n                + \"bc2b7a832bb8c6526c4af99a7ea3f0b3cb96ae1eb7684132795c478ad6f962e4a6f\"\n                + \"446d\",\n            \"0000017627357b39e9d7632a1370b3e93c1afb5c851b910eb4ead0c9d387df67c\"\n                + \"de85003e0e427552f1cd09059aad0262e235cce5fba8cedc4fdc1463da76dcd4b6d\"\n                + \"1a46\")\n      }", "var_name": "testVectors1"}, {"original_string": "protected static TestVector2[] testVectors2 = {\n    // NIST_P256\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P256,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"04\"\n            + \"b0cfc7bc02fc980d858077552947ffb449b10df8949dee4e56fe21e016dcb25a\"\n            + \"1886ccdca5487a6772f9401888203f90587cc00a730e2b83d5c6f89b3b568df7\",\n        \"79974177209371530366349631093481213364328002500948308276357601809416549347930\",\n        \"11093679777528052772423074391650378811758820120351664471899251711300542565879\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P256,\n        EllipticCurves.PointFormatType.DO_NOT_USE_CRUNCHY_UNCOMPRESSED,\n        \"b0cfc7bc02fc980d858077552947ffb449b10df8949dee4e56fe21e016dcb25a\"\n            + \"1886ccdca5487a6772f9401888203f90587cc00a730e2b83d5c6f89b3b568df7\",\n        \"79974177209371530366349631093481213364328002500948308276357601809416549347930\",\n        \"11093679777528052772423074391650378811758820120351664471899251711300542565879\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P256,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"03b0cfc7bc02fc980d858077552947ffb449b10df8949dee4e56fe21e016dcb25a\",\n        \"79974177209371530366349631093481213364328002500948308276357601809416549347930\",\n        \"11093679777528052772423074391650378811758820120351664471899251711300542565879\"),\n    // Exceptional point: x==0\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P256,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"04\"\n            + \"0000000000000000000000000000000000000000000000000000000000000000\"\n            + \"66485c780e2f83d72433bd5d84a06bb6541c2af31dae871728bf856a174f93f4\",\n        \"0\",\n        \"46263761741508638697010950048709651021688891777877937875096931459006746039284\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P256,\n        EllipticCurves.PointFormatType.DO_NOT_USE_CRUNCHY_UNCOMPRESSED,\n        \"0000000000000000000000000000000000000000000000000000000000000000\"\n            + \"66485c780e2f83d72433bd5d84a06bb6541c2af31dae871728bf856a174f93f4\",\n        \"0\",\n        \"46263761741508638697010950048709651021688891777877937875096931459006746039284\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P256,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"020000000000000000000000000000000000000000000000000000000000000000\",\n        \"0\",\n        \"46263761741508638697010950048709651021688891777877937875096931459006746039284\"),\n    // Exceptional point: x==-3\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P256,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"04\"\n            + \"ffffffff00000001000000000000000000000000fffffffffffffffffffffffc\"\n            + \"19719bebf6aea13f25c96dfd7c71f5225d4c8fc09eb5a0ab9f39e9178e55c121\",\n        \"115792089210356248762697446949407573530086143415290314195533631308867097853948\",\n        \"11508551065151498768481026661199445482476508121209842448718573150489103679777\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P256,\n        EllipticCurves.PointFormatType.DO_NOT_USE_CRUNCHY_UNCOMPRESSED,\n        \"ffffffff00000001000000000000000000000000fffffffffffffffffffffffc\"\n            + \"19719bebf6aea13f25c96dfd7c71f5225d4c8fc09eb5a0ab9f39e9178e55c121\",\n        \"115792089210356248762697446949407573530086143415290314195533631308867097853948\",\n        \"11508551065151498768481026661199445482476508121209842448718573150489103679777\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P256,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"03ffffffff00000001000000000000000000000000fffffffffffffffffffffffc\",\n        \"115792089210356248762697446949407573530086143415290314195533631308867097853948\",\n        \"11508551065151498768481026661199445482476508121209842448718573150489103679777\"),\n    // NIST_P384\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P384,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"04aa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a\"\n            + \"385502f25dbf55296c3a545e3872760ab73617de4a96262c6f5d9e98bf9292dc\"\n            + \"29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e\"\n            + \"5f\",\n        \"2624703509579968926862315674456698189185292349110921338781561590\"\n            + \"0925518854738050089022388053975719786650872476732087\",\n        \"8325710961489029985546751289520108179287853048861315594709205902\"\n            + \"480503199884419224438643760392947333078086511627871\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P384,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"03aa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a\"\n            + \"385502f25dbf55296c3a545e3872760ab7\",\n        \"2624703509579968926862315674456698189185292349110921338781561590\"\n            + \"0925518854738050089022388053975719786650872476732087\",\n        \"8325710961489029985546751289520108179287853048861315594709205902\"\n            + \"480503199884419224438643760392947333078086511627871\"),\n    // x = 0\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P384,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"0400000000000000000000000000000000000000000000000000000000000000\"\n            + \"00000000000000000000000000000000003cf99ef04f51a5ea630ba3f9f960dd\"\n            + \"593a14c9be39fd2bd215d3b4b08aaaf86bbf927f2c46e52ab06fb742b8850e52\"\n            + \"1e\",\n        \"0\",\n        \"9384923975005507693384933751151973636103286582194273515051780595\"\n            + \"652610803541482195894618304099771370981414591681054\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P384,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"0200000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000000000000000000000000000000000\",\n        \"0\",\n        \"9384923975005507693384933751151973636103286582194273515051780595\"\n            + \"652610803541482195894618304099771370981414591681054\"),\n    // x = 2\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P384,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"0400000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000000000000000000000000000000002732152442fb6ee5c3e6ce1d920c059\"\n            + \"bc623563814d79042b903ce60f1d4487fccd450a86da03f3e6ed525d02017bfd\"\n            + \"b3\",\n        \"2\",\n        \"1772015366480916228638409476801818679957736647795608728422858375\"\n            + \"4887974043472116432532980617621641492831213601947059\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P384,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"0300000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000000000000000000000000000000002\",\n        \"2\",\n        \"1772015366480916228638409476801818679957736647795608728422858375\"\n            + \"4887974043472116432532980617621641492831213601947059\"),\n    // x = -3\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P384,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"04ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n            + \"feffffffff0000000000000000fffffffc2de9de09a95b74e6b2c430363e1afb\"\n            + \"8dff7164987a8cfe0a0d5139250ac02f797f81092a9bdc0e09b574a8f43bf80c\"\n            + \"17\",\n        \"3940200619639447921227904010014361380507973927046544666794829340\"\n            + \"4245721771496870329047266088258938001861606973112316\",\n        \"7066741234775658874139271223692271325950306561732202191471600407\"\n            + \"582071247913794644254895122656050391930754095909911\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P384,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"03ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n            + \"feffffffff0000000000000000fffffffc\",\n        \"3940200619639447921227904010014361380507973927046544666794829340\"\n            + \"4245721771496870329047266088258938001861606973112316\",\n        \"7066741234775658874139271223692271325950306561732202191471600407\"\n            + \"582071247913794644254895122656050391930754095909911\"),\n    // NIST_P521\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"0400c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b\"\n            + \"4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2\"\n            + \"e5bd66011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd\"\n            + \"17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94\"\n            + \"769fd16650\",\n        \"2661740802050217063228768716723360960729859168756973147706671368\"\n            + \"4188029449964278084915450806277719023520942412250655586621571135\"\n            + \"45570916814161637315895999846\",\n        \"3757180025770020463545507224491183603594455134769762486694567779\"\n            + \"6155444774405563166912344050129455395621444445372894285225856667\"\n            + \"29196580810124344277578376784\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"0200c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b\"\n            + \"4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2\"\n            + \"e5bd66\",\n        \"2661740802050217063228768716723360960729859168756973147706671368\"\n            + \"4188029449964278084915450806277719023520942412250655586621571135\"\n            + \"45570916814161637315895999846\",\n        \"3757180025770020463545507224491183603594455134769762486694567779\"\n            + \"6155444774405563166912344050129455395621444445372894285225856667\"\n            + \"29196580810124344277578376784\"),\n    // x = 0\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"0400000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000000000000000000000000000000000000000000000000000000000000000\"\n            + \"00000000d20ec9fea6b577c10d26ca1bb446f40b299e648b1ad508aad068896f\"\n            + \"ee3f8e614bc63054d5772bf01a65d412e0bcaa8e965d2f5d332d7f39f846d440\"\n            + \"ae001f4f87\",\n        \"0\",\n        \"2816414230262626695230339754503506208598534788872316917808418392\"\n            + \"0894686826982898181454171638541149642517061885689521392260532032\"\n            + \"30035588176689756661142736775\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"0300000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000000000000000000000000000000000000000000000000000000000000000\"\n            + \"000000\",\n        \"0\",\n        \"2816414230262626695230339754503506208598534788872316917808418392\"\n            + \"0894686826982898181454171638541149642517061885689521392260532032\"\n            + \"30035588176689756661142736775\"),\n    // x = 1\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"0400000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000010010e59be93c4f269c0269c79e2afd65d6aeaa9b701eacc194fb3ee03d\"\n            + \"f47849bf550ec636ebee0ddd4a16f1cd9406605af38f584567770e3f272d688c\"\n            + \"832e843564\",\n        \"1\",\n        \"2265505274322546447629271557184988697103589068170534253193208655\"\n            + \"0778100463909972583865730916407864371153050622267306901033104806\"\n            + \"9570407113457901669103973732\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"0200000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000000000000000000000000000000000000000000000000000000000000000\"\n            + \"000001\",\n        \"1\",\n        \"2265505274322546447629271557184988697103589068170534253193208655\"\n            + \"0778100463909972583865730916407864371153050622267306901033104806\"\n            + \"9570407113457901669103973732\"),\n    // x = 2\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"0400000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000000000000000000000000000000000000000000000000000000000000000\"\n            + \"00000200d9254fdf800496acb33790b103c5ee9fac12832fe546c632225b0f7f\"\n            + \"ce3da4574b1a879b623d722fa8fc34d5fc2a8731aad691a9a8bb8b554c95a051\"\n            + \"d6aa505acf\",\n        \"2\",\n        \"2911448509017565583245824537994174021964465504209366849707937264\"\n            + \"0417919148200722009442607963590225526059407040161685364728526719\"\n            + \"10134103604091376779754756815\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"0300000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000000000000000000000000000000000000000000000000000000000000000\"\n            + \"000002\",\n        \"2\",\n        \"2911448509017565583245824537994174021964465504209366849707937264\"\n            + \"0417919148200722009442607963590225526059407040161685364728526719\"\n            + \"10134103604091376779754756815\"),\n    // x = -2\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"0401ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n            + \"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n            + \"fffffd0010e59be93c4f269c0269c79e2afd65d6aeaa9b701eacc194fb3ee03d\"\n            + \"f47849bf550ec636ebee0ddd4a16f1cd9406605af38f584567770e3f272d688c\"\n            + \"832e843564\",\n        \"6864797660130609714981900799081393217269435300143305409394463459\"\n            + \"1855431833976560521225596406614545549772963113914808580371219879\"\n            + \"99716643812574028291115057149\",\n        \"2265505274322546447629271557184988697103589068170534253193208655\"\n            + \"0778100463909972583865730916407864371153050622267306901033104806\"\n            + \"9570407113457901669103973732\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"0201ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n            + \"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n            + \"fffffd\",\n        \"6864797660130609714981900799081393217269435300143305409394463459\"\n            + \"1855431833976560521225596406614545549772963113914808580371219879\"\n            + \"99716643812574028291115057149\",\n        \"2265505274322546447629271557184988697103589068170534253193208655\"\n            + \"0778100463909972583865730916407864371153050622267306901033104806\"\n            + \"9570407113457901669103973732\"),\n  };", "modifier": "protected static", "type": "TestVector2[]", "declarator": "testVectors2 = {\n    // NIST_P256\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P256,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"04\"\n            + \"b0cfc7bc02fc980d858077552947ffb449b10df8949dee4e56fe21e016dcb25a\"\n            + \"1886ccdca5487a6772f9401888203f90587cc00a730e2b83d5c6f89b3b568df7\",\n        \"79974177209371530366349631093481213364328002500948308276357601809416549347930\",\n        \"11093679777528052772423074391650378811758820120351664471899251711300542565879\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P256,\n        EllipticCurves.PointFormatType.DO_NOT_USE_CRUNCHY_UNCOMPRESSED,\n        \"b0cfc7bc02fc980d858077552947ffb449b10df8949dee4e56fe21e016dcb25a\"\n            + \"1886ccdca5487a6772f9401888203f90587cc00a730e2b83d5c6f89b3b568df7\",\n        \"79974177209371530366349631093481213364328002500948308276357601809416549347930\",\n        \"11093679777528052772423074391650378811758820120351664471899251711300542565879\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P256,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"03b0cfc7bc02fc980d858077552947ffb449b10df8949dee4e56fe21e016dcb25a\",\n        \"79974177209371530366349631093481213364328002500948308276357601809416549347930\",\n        \"11093679777528052772423074391650378811758820120351664471899251711300542565879\"),\n    // Exceptional point: x==0\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P256,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"04\"\n            + \"0000000000000000000000000000000000000000000000000000000000000000\"\n            + \"66485c780e2f83d72433bd5d84a06bb6541c2af31dae871728bf856a174f93f4\",\n        \"0\",\n        \"46263761741508638697010950048709651021688891777877937875096931459006746039284\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P256,\n        EllipticCurves.PointFormatType.DO_NOT_USE_CRUNCHY_UNCOMPRESSED,\n        \"0000000000000000000000000000000000000000000000000000000000000000\"\n            + \"66485c780e2f83d72433bd5d84a06bb6541c2af31dae871728bf856a174f93f4\",\n        \"0\",\n        \"46263761741508638697010950048709651021688891777877937875096931459006746039284\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P256,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"020000000000000000000000000000000000000000000000000000000000000000\",\n        \"0\",\n        \"46263761741508638697010950048709651021688891777877937875096931459006746039284\"),\n    // Exceptional point: x==-3\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P256,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"04\"\n            + \"ffffffff00000001000000000000000000000000fffffffffffffffffffffffc\"\n            + \"19719bebf6aea13f25c96dfd7c71f5225d4c8fc09eb5a0ab9f39e9178e55c121\",\n        \"115792089210356248762697446949407573530086143415290314195533631308867097853948\",\n        \"11508551065151498768481026661199445482476508121209842448718573150489103679777\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P256,\n        EllipticCurves.PointFormatType.DO_NOT_USE_CRUNCHY_UNCOMPRESSED,\n        \"ffffffff00000001000000000000000000000000fffffffffffffffffffffffc\"\n            + \"19719bebf6aea13f25c96dfd7c71f5225d4c8fc09eb5a0ab9f39e9178e55c121\",\n        \"115792089210356248762697446949407573530086143415290314195533631308867097853948\",\n        \"11508551065151498768481026661199445482476508121209842448718573150489103679777\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P256,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"03ffffffff00000001000000000000000000000000fffffffffffffffffffffffc\",\n        \"115792089210356248762697446949407573530086143415290314195533631308867097853948\",\n        \"11508551065151498768481026661199445482476508121209842448718573150489103679777\"),\n    // NIST_P384\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P384,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"04aa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a\"\n            + \"385502f25dbf55296c3a545e3872760ab73617de4a96262c6f5d9e98bf9292dc\"\n            + \"29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e\"\n            + \"5f\",\n        \"2624703509579968926862315674456698189185292349110921338781561590\"\n            + \"0925518854738050089022388053975719786650872476732087\",\n        \"8325710961489029985546751289520108179287853048861315594709205902\"\n            + \"480503199884419224438643760392947333078086511627871\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P384,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"03aa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a\"\n            + \"385502f25dbf55296c3a545e3872760ab7\",\n        \"2624703509579968926862315674456698189185292349110921338781561590\"\n            + \"0925518854738050089022388053975719786650872476732087\",\n        \"8325710961489029985546751289520108179287853048861315594709205902\"\n            + \"480503199884419224438643760392947333078086511627871\"),\n    // x = 0\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P384,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"0400000000000000000000000000000000000000000000000000000000000000\"\n            + \"00000000000000000000000000000000003cf99ef04f51a5ea630ba3f9f960dd\"\n            + \"593a14c9be39fd2bd215d3b4b08aaaf86bbf927f2c46e52ab06fb742b8850e52\"\n            + \"1e\",\n        \"0\",\n        \"9384923975005507693384933751151973636103286582194273515051780595\"\n            + \"652610803541482195894618304099771370981414591681054\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P384,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"0200000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000000000000000000000000000000000\",\n        \"0\",\n        \"9384923975005507693384933751151973636103286582194273515051780595\"\n            + \"652610803541482195894618304099771370981414591681054\"),\n    // x = 2\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P384,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"0400000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000000000000000000000000000000002732152442fb6ee5c3e6ce1d920c059\"\n            + \"bc623563814d79042b903ce60f1d4487fccd450a86da03f3e6ed525d02017bfd\"\n            + \"b3\",\n        \"2\",\n        \"1772015366480916228638409476801818679957736647795608728422858375\"\n            + \"4887974043472116432532980617621641492831213601947059\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P384,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"0300000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000000000000000000000000000000002\",\n        \"2\",\n        \"1772015366480916228638409476801818679957736647795608728422858375\"\n            + \"4887974043472116432532980617621641492831213601947059\"),\n    // x = -3\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P384,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"04ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n            + \"feffffffff0000000000000000fffffffc2de9de09a95b74e6b2c430363e1afb\"\n            + \"8dff7164987a8cfe0a0d5139250ac02f797f81092a9bdc0e09b574a8f43bf80c\"\n            + \"17\",\n        \"3940200619639447921227904010014361380507973927046544666794829340\"\n            + \"4245721771496870329047266088258938001861606973112316\",\n        \"7066741234775658874139271223692271325950306561732202191471600407\"\n            + \"582071247913794644254895122656050391930754095909911\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P384,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"03ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n            + \"feffffffff0000000000000000fffffffc\",\n        \"3940200619639447921227904010014361380507973927046544666794829340\"\n            + \"4245721771496870329047266088258938001861606973112316\",\n        \"7066741234775658874139271223692271325950306561732202191471600407\"\n            + \"582071247913794644254895122656050391930754095909911\"),\n    // NIST_P521\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"0400c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b\"\n            + \"4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2\"\n            + \"e5bd66011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd\"\n            + \"17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94\"\n            + \"769fd16650\",\n        \"2661740802050217063228768716723360960729859168756973147706671368\"\n            + \"4188029449964278084915450806277719023520942412250655586621571135\"\n            + \"45570916814161637315895999846\",\n        \"3757180025770020463545507224491183603594455134769762486694567779\"\n            + \"6155444774405563166912344050129455395621444445372894285225856667\"\n            + \"29196580810124344277578376784\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"0200c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b\"\n            + \"4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2\"\n            + \"e5bd66\",\n        \"2661740802050217063228768716723360960729859168756973147706671368\"\n            + \"4188029449964278084915450806277719023520942412250655586621571135\"\n            + \"45570916814161637315895999846\",\n        \"3757180025770020463545507224491183603594455134769762486694567779\"\n            + \"6155444774405563166912344050129455395621444445372894285225856667\"\n            + \"29196580810124344277578376784\"),\n    // x = 0\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"0400000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000000000000000000000000000000000000000000000000000000000000000\"\n            + \"00000000d20ec9fea6b577c10d26ca1bb446f40b299e648b1ad508aad068896f\"\n            + \"ee3f8e614bc63054d5772bf01a65d412e0bcaa8e965d2f5d332d7f39f846d440\"\n            + \"ae001f4f87\",\n        \"0\",\n        \"2816414230262626695230339754503506208598534788872316917808418392\"\n            + \"0894686826982898181454171638541149642517061885689521392260532032\"\n            + \"30035588176689756661142736775\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"0300000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000000000000000000000000000000000000000000000000000000000000000\"\n            + \"000000\",\n        \"0\",\n        \"2816414230262626695230339754503506208598534788872316917808418392\"\n            + \"0894686826982898181454171638541149642517061885689521392260532032\"\n            + \"30035588176689756661142736775\"),\n    // x = 1\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"0400000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000010010e59be93c4f269c0269c79e2afd65d6aeaa9b701eacc194fb3ee03d\"\n            + \"f47849bf550ec636ebee0ddd4a16f1cd9406605af38f584567770e3f272d688c\"\n            + \"832e843564\",\n        \"1\",\n        \"2265505274322546447629271557184988697103589068170534253193208655\"\n            + \"0778100463909972583865730916407864371153050622267306901033104806\"\n            + \"9570407113457901669103973732\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"0200000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000000000000000000000000000000000000000000000000000000000000000\"\n            + \"000001\",\n        \"1\",\n        \"2265505274322546447629271557184988697103589068170534253193208655\"\n            + \"0778100463909972583865730916407864371153050622267306901033104806\"\n            + \"9570407113457901669103973732\"),\n    // x = 2\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"0400000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000000000000000000000000000000000000000000000000000000000000000\"\n            + \"00000200d9254fdf800496acb33790b103c5ee9fac12832fe546c632225b0f7f\"\n            + \"ce3da4574b1a879b623d722fa8fc34d5fc2a8731aad691a9a8bb8b554c95a051\"\n            + \"d6aa505acf\",\n        \"2\",\n        \"2911448509017565583245824537994174021964465504209366849707937264\"\n            + \"0417919148200722009442607963590225526059407040161685364728526719\"\n            + \"10134103604091376779754756815\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"0300000000000000000000000000000000000000000000000000000000000000\"\n            + \"0000000000000000000000000000000000000000000000000000000000000000\"\n            + \"000002\",\n        \"2\",\n        \"2911448509017565583245824537994174021964465504209366849707937264\"\n            + \"0417919148200722009442607963590225526059407040161685364728526719\"\n            + \"10134103604091376779754756815\"),\n    // x = -2\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.UNCOMPRESSED,\n        \"0401ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n            + \"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n            + \"fffffd0010e59be93c4f269c0269c79e2afd65d6aeaa9b701eacc194fb3ee03d\"\n            + \"f47849bf550ec636ebee0ddd4a16f1cd9406605af38f584567770e3f272d688c\"\n            + \"832e843564\",\n        \"6864797660130609714981900799081393217269435300143305409394463459\"\n            + \"1855431833976560521225596406614545549772963113914808580371219879\"\n            + \"99716643812574028291115057149\",\n        \"2265505274322546447629271557184988697103589068170534253193208655\"\n            + \"0778100463909972583865730916407864371153050622267306901033104806\"\n            + \"9570407113457901669103973732\"),\n    new TestVector2(\n        EllipticCurves.CurveType.NIST_P521,\n        EllipticCurves.PointFormatType.COMPRESSED,\n        \"0201ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n            + \"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n            + \"fffffd\",\n        \"6864797660130609714981900799081393217269435300143305409394463459\"\n            + \"1855431833976560521225596406614545549772963113914808580371219879\"\n            + \"99716643812574028291115057149\",\n        \"2265505274322546447629271557184988697103589068170534253193208655\"\n            + \"0778100463909972583865730916407864371153050622267306901033104806\"\n            + \"9570407113457901669103973732\"),\n  }", "var_name": "testVectors2"}, {"original_string": "protected static EcdsaIeeeDer[] ieeeDerTestVector =\n      new EcdsaIeeeDer[] {\n        new EcdsaIeeeDer( // normal case, short-form length\n            \"0102030405060708090a0b0c0d0e0f100102030405060708090a0b0c0d0e0f10\",\n            \"302402100102030405060708090a0b0c0d0e0f1002100102030405060708090a0b0c0d0e0f10\"),\n        new EcdsaIeeeDer( // normal case, long-form length\n            \"010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000203010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000203\",\n            \"30818802420100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000002030242010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000203\"),\n        new EcdsaIeeeDer( // zero prefix.\n            \"0002030405060708090a0b0c0d0e0f100002030405060708090a0b0c0d0e0f10\",\n            \"3022020f02030405060708090a0b0c0d0e0f10020f02030405060708090a0b0c0d0e0f10\"),\n        new EcdsaIeeeDer( // highest bit is set.\n            \"00ff030405060708090a0b0c0d0e0f1000ff030405060708090a0b0c0d0e0f10\",\n            \"3024021000ff030405060708090a0b0c0d0e0f10021000ff030405060708090a0b0c0d0e0f10\"),\n        new EcdsaIeeeDer( // highest bit is set, full length.\n            \"ff02030405060708090a0b0c0d0e0f10ff02030405060708090a0b0c0d0e0f10\",\n            \"3026021100ff02030405060708090a0b0c0d0e0f10021100ff02030405060708090a0b0c0d0e0f10\"),\n        new EcdsaIeeeDer( // all zeros.\n            \"0000000000000000000000000000000000000000000000000000000000000000\", \"3006020100020100\"),\n      };", "modifier": "protected static", "type": "EcdsaIeeeDer[]", "declarator": "ieeeDerTestVector =\n      new EcdsaIeeeDer[] {\n        new EcdsaIeeeDer( // normal case, short-form length\n            \"0102030405060708090a0b0c0d0e0f100102030405060708090a0b0c0d0e0f10\",\n            \"302402100102030405060708090a0b0c0d0e0f1002100102030405060708090a0b0c0d0e0f10\"),\n        new EcdsaIeeeDer( // normal case, long-form length\n            \"010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000203010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000203\",\n            \"30818802420100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000002030242010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000203\"),\n        new EcdsaIeeeDer( // zero prefix.\n            \"0002030405060708090a0b0c0d0e0f100002030405060708090a0b0c0d0e0f10\",\n            \"3022020f02030405060708090a0b0c0d0e0f10020f02030405060708090a0b0c0d0e0f10\"),\n        new EcdsaIeeeDer( // highest bit is set.\n            \"00ff030405060708090a0b0c0d0e0f1000ff030405060708090a0b0c0d0e0f10\",\n            \"3024021000ff030405060708090a0b0c0d0e0f10021000ff030405060708090a0b0c0d0e0f10\"),\n        new EcdsaIeeeDer( // highest bit is set, full length.\n            \"ff02030405060708090a0b0c0d0e0f10ff02030405060708090a0b0c0d0e0f10\",\n            \"3026021100ff02030405060708090a0b0c0d0e0f10021100ff02030405060708090a0b0c0d0e0f10\"),\n        new EcdsaIeeeDer( // all zeros.\n            \"0000000000000000000000000000000000000000000000000000000000000000\", \"3006020100020100\"),\n      }", "var_name": "ieeeDerTestVector"}, {"original_string": "protected static String[] invalidEcdsaDers =\n      new String[] {\n        \"2006020101020101\", // 1st byte is not 0x30 (SEQUENCE tag)\n        \"3006050101020101\", // 3rd byte is not 0x02 (INTEGER tag)\n        \"3006020101050101\", // 6th byte is not 0x02 (INTEGER tag)\n        \"308206020101020101\", // long form length is not 0x81\n        \"30ff020101020101\", // invalid total length\n        \"3006020201020101\", // invalid rLength\n        \"3006020101020201\", // invalid sLength\n        \"30060201ff020101\", // no extra zero when highest bit of r is set\n        \"30060201010201ff\", // no extra zero when highest bit of s is set\n      };", "modifier": "protected static", "type": "String[]", "declarator": "invalidEcdsaDers =\n      new String[] {\n        \"2006020101020101\", // 1st byte is not 0x30 (SEQUENCE tag)\n        \"3006050101020101\", // 3rd byte is not 0x02 (INTEGER tag)\n        \"3006020101050101\", // 6th byte is not 0x02 (INTEGER tag)\n        \"308206020101020101\", // long form length is not 0x81\n        \"30ff020101020101\", // invalid total length\n        \"3006020201020101\", // invalid rLength\n        \"3006020101020201\", // invalid sLength\n        \"30060201ff020101\", // no extra zero when highest bit of r is set\n        \"30060201010201ff\", // no extra zero when highest bit of s is set\n      }", "var_name": "invalidEcdsaDers"}], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/EllipticCurvesTest.java"}, "test_case": {"identifier": "testPointDecode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPointDecode() throws Exception {\n    for (TestVector2 test : testVectors2) {\n      EllipticCurve curve = EllipticCurves.getCurveSpec(test.curve).getCurve();\n      ECPoint p = EllipticCurves.pointDecode(curve, test.format, test.encoded);\n      assertEquals(p.getAffineX(), test.x);\n      assertEquals(p.getAffineY(), test.y);\n    }\n  }", "signature": "void testPointDecode()", "full_signature": "@Test public void testPointDecode()", "class_method_signature": "EllipticCurvesTest.testPointDecode()", "testcase": true, "constructor": false, "invocations": ["getCurve", "getCurveSpec", "pointDecode", "assertEquals", "getAffineX", "assertEquals", "getAffineY"]}, "focal_class": {"identifier": "EllipticCurves", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getNistP256Params", "parameters": "()", "modifiers": "public static", "return": "ECParameterSpec", "signature": "ECParameterSpec getNistP256Params()", "full_signature": "public static ECParameterSpec getNistP256Params()", "class_method_signature": "EllipticCurves.getNistP256Params()", "testcase": false, "constructor": false}, {"identifier": "getNistP384Params", "parameters": "()", "modifiers": "public static", "return": "ECParameterSpec", "signature": "ECParameterSpec getNistP384Params()", "full_signature": "public static ECParameterSpec getNistP384Params()", "class_method_signature": "EllipticCurves.getNistP384Params()", "testcase": false, "constructor": false}, {"identifier": "getNistP521Params", "parameters": "()", "modifiers": "public static", "return": "ECParameterSpec", "signature": "ECParameterSpec getNistP521Params()", "full_signature": "public static ECParameterSpec getNistP521Params()", "class_method_signature": "EllipticCurves.getNistP521Params()", "testcase": false, "constructor": false}, {"identifier": "checkPointOnCurve", "parameters": "(ECPoint point, EllipticCurve ec)", "modifiers": "static", "return": "void", "signature": "void checkPointOnCurve(ECPoint point, EllipticCurve ec)", "full_signature": "static void checkPointOnCurve(ECPoint point, EllipticCurve ec)", "class_method_signature": "EllipticCurves.checkPointOnCurve(ECPoint point, EllipticCurve ec)", "testcase": false, "constructor": false}, {"identifier": "checkPublicKey", "parameters": "(ECPublicKey key)", "modifiers": "static", "return": "void", "signature": "void checkPublicKey(ECPublicKey key)", "full_signature": "static void checkPublicKey(ECPublicKey key)", "class_method_signature": "EllipticCurves.checkPublicKey(ECPublicKey key)", "testcase": false, "constructor": false}, {"identifier": "isNistEcParameterSpec", "parameters": "(ECParameterSpec spec)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNistEcParameterSpec(ECParameterSpec spec)", "full_signature": "public static boolean isNistEcParameterSpec(ECParameterSpec spec)", "class_method_signature": "EllipticCurves.isNistEcParameterSpec(ECParameterSpec spec)", "testcase": false, "constructor": false}, {"identifier": "isSameEcParameterSpec", "parameters": "(ECParameterSpec one, ECParameterSpec two)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSameEcParameterSpec(ECParameterSpec one, ECParameterSpec two)", "full_signature": "public static boolean isSameEcParameterSpec(ECParameterSpec one, ECParameterSpec two)", "class_method_signature": "EllipticCurves.isSameEcParameterSpec(ECParameterSpec one, ECParameterSpec two)", "testcase": false, "constructor": false}, {"identifier": "validatePublicKey", "parameters": "(ECPublicKey publicKey, ECPrivateKey privateKey)", "modifiers": "public static", "return": "void", "signature": "void validatePublicKey(ECPublicKey publicKey, ECPrivateKey privateKey)", "full_signature": "public static void validatePublicKey(ECPublicKey publicKey, ECPrivateKey privateKey)", "class_method_signature": "EllipticCurves.validatePublicKey(ECPublicKey publicKey, ECPrivateKey privateKey)", "testcase": false, "constructor": false}, {"identifier": "validatePublicKeySpec", "parameters": "(ECPublicKey publicKey, ECPrivateKey privateKey)", "modifiers": "static", "return": "void", "signature": "void validatePublicKeySpec(ECPublicKey publicKey, ECPrivateKey privateKey)", "full_signature": "static void validatePublicKeySpec(ECPublicKey publicKey, ECPrivateKey privateKey)", "class_method_signature": "EllipticCurves.validatePublicKeySpec(ECPublicKey publicKey, ECPrivateKey privateKey)", "testcase": false, "constructor": false}, {"identifier": "getModulus", "parameters": "(EllipticCurve curve)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger getModulus(EllipticCurve curve)", "full_signature": "public static BigInteger getModulus(EllipticCurve curve)", "class_method_signature": "EllipticCurves.getModulus(EllipticCurve curve)", "testcase": false, "constructor": false}, {"identifier": "fieldSizeInBits", "parameters": "(EllipticCurve curve)", "modifiers": "static", "return": "int", "signature": "int fieldSizeInBits(EllipticCurve curve)", "full_signature": "static int fieldSizeInBits(EllipticCurve curve)", "class_method_signature": "EllipticCurves.fieldSizeInBits(EllipticCurve curve)", "testcase": false, "constructor": false}, {"identifier": "fieldSizeInBytes", "parameters": "(EllipticCurve curve)", "modifiers": "public static", "return": "int", "signature": "int fieldSizeInBytes(EllipticCurve curve)", "full_signature": "public static int fieldSizeInBytes(EllipticCurve curve)", "class_method_signature": "EllipticCurves.fieldSizeInBytes(EllipticCurve curve)", "testcase": false, "constructor": false}, {"identifier": "getNistCurveSpec", "parameters": "(\n      String decimalP, String decimalN, String hexB, String hexGX, String hexGY)", "modifiers": "private static", "return": "ECParameterSpec", "signature": "ECParameterSpec getNistCurveSpec(\n      String decimalP, String decimalN, String hexB, String hexGX, String hexGY)", "full_signature": "private static ECParameterSpec getNistCurveSpec(\n      String decimalP, String decimalN, String hexB, String hexGX, String hexGY)", "class_method_signature": "EllipticCurves.getNistCurveSpec(\n      String decimalP, String decimalN, String hexB, String hexGX, String hexGY)", "testcase": false, "constructor": false}, {"identifier": "modSqrt", "parameters": "(BigInteger x, BigInteger p)", "modifiers": "protected static", "return": "BigInteger", "signature": "BigInteger modSqrt(BigInteger x, BigInteger p)", "full_signature": "protected static BigInteger modSqrt(BigInteger x, BigInteger p)", "class_method_signature": "EllipticCurves.modSqrt(BigInteger x, BigInteger p)", "testcase": false, "constructor": false}, {"identifier": "getY", "parameters": "(BigInteger x, boolean lsb, EllipticCurve curve)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger getY(BigInteger x, boolean lsb, EllipticCurve curve)", "full_signature": "public static BigInteger getY(BigInteger x, boolean lsb, EllipticCurve curve)", "class_method_signature": "EllipticCurves.getY(BigInteger x, boolean lsb, EllipticCurve curve)", "testcase": false, "constructor": false}, {"identifier": "toMinimalSignedNumber", "parameters": "(byte[] bs)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] toMinimalSignedNumber(byte[] bs)", "full_signature": "private static byte[] toMinimalSignedNumber(byte[] bs)", "class_method_signature": "EllipticCurves.toMinimalSignedNumber(byte[] bs)", "testcase": false, "constructor": false}, {"identifier": "ecdsaIeee2Der", "parameters": "(byte[] ieee)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] ecdsaIeee2Der(byte[] ieee)", "full_signature": "public static byte[] ecdsaIeee2Der(byte[] ieee)", "class_method_signature": "EllipticCurves.ecdsaIeee2Der(byte[] ieee)", "testcase": false, "constructor": false}, {"identifier": "ecdsaDer2Ieee", "parameters": "(byte[] der, int ieeeLength)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] ecdsaDer2Ieee(byte[] der, int ieeeLength)", "full_signature": "public static byte[] ecdsaDer2Ieee(byte[] der, int ieeeLength)", "class_method_signature": "EllipticCurves.ecdsaDer2Ieee(byte[] der, int ieeeLength)", "testcase": false, "constructor": false}, {"identifier": "isValidDerEncoding", "parameters": "(final byte[] sig)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidDerEncoding(final byte[] sig)", "full_signature": "public static boolean isValidDerEncoding(final byte[] sig)", "class_method_signature": "EllipticCurves.isValidDerEncoding(final byte[] sig)", "testcase": false, "constructor": false}, {"identifier": "encodingSizeInBytes", "parameters": "(EllipticCurve curve, PointFormatType format)", "modifiers": "public static", "return": "int", "signature": "int encodingSizeInBytes(EllipticCurve curve, PointFormatType format)", "full_signature": "public static int encodingSizeInBytes(EllipticCurve curve, PointFormatType format)", "class_method_signature": "EllipticCurves.encodingSizeInBytes(EllipticCurve curve, PointFormatType format)", "testcase": false, "constructor": false}, {"identifier": "ecPointDecode", "parameters": "(EllipticCurve curve, PointFormatType format, byte[] encoded)", "modifiers": "@Deprecated public static", "return": "ECPoint", "signature": "ECPoint ecPointDecode(EllipticCurve curve, PointFormatType format, byte[] encoded)", "full_signature": "@Deprecated public static ECPoint ecPointDecode(EllipticCurve curve, PointFormatType format, byte[] encoded)", "class_method_signature": "EllipticCurves.ecPointDecode(EllipticCurve curve, PointFormatType format, byte[] encoded)", "testcase": false, "constructor": false}, {"identifier": "pointDecode", "parameters": "(CurveType curveType, PointFormatType format, byte[] encoded)", "modifiers": "public static", "return": "ECPoint", "signature": "ECPoint pointDecode(CurveType curveType, PointFormatType format, byte[] encoded)", "full_signature": "public static ECPoint pointDecode(CurveType curveType, PointFormatType format, byte[] encoded)", "class_method_signature": "EllipticCurves.pointDecode(CurveType curveType, PointFormatType format, byte[] encoded)", "testcase": false, "constructor": false}, {"identifier": "pointDecode", "parameters": "(EllipticCurve curve, PointFormatType format, byte[] encoded)", "modifiers": "public static", "return": "ECPoint", "signature": "ECPoint pointDecode(EllipticCurve curve, PointFormatType format, byte[] encoded)", "full_signature": "public static ECPoint pointDecode(EllipticCurve curve, PointFormatType format, byte[] encoded)", "class_method_signature": "EllipticCurves.pointDecode(EllipticCurve curve, PointFormatType format, byte[] encoded)", "testcase": false, "constructor": false}, {"identifier": "pointEncode", "parameters": "(CurveType curveType, PointFormatType format, ECPoint point)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] pointEncode(CurveType curveType, PointFormatType format, ECPoint point)", "full_signature": "public static byte[] pointEncode(CurveType curveType, PointFormatType format, ECPoint point)", "class_method_signature": "EllipticCurves.pointEncode(CurveType curveType, PointFormatType format, ECPoint point)", "testcase": false, "constructor": false}, {"identifier": "pointEncode", "parameters": "(EllipticCurve curve, PointFormatType format, ECPoint point)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] pointEncode(EllipticCurve curve, PointFormatType format, ECPoint point)", "full_signature": "public static byte[] pointEncode(EllipticCurve curve, PointFormatType format, ECPoint point)", "class_method_signature": "EllipticCurves.pointEncode(EllipticCurve curve, PointFormatType format, ECPoint point)", "testcase": false, "constructor": false}, {"identifier": "getCurveSpec", "parameters": "(CurveType curve)", "modifiers": "public static", "return": "ECParameterSpec", "signature": "ECParameterSpec getCurveSpec(CurveType curve)", "full_signature": "public static ECParameterSpec getCurveSpec(CurveType curve)", "class_method_signature": "EllipticCurves.getCurveSpec(CurveType curve)", "testcase": false, "constructor": false}, {"identifier": "getEcPublicKey", "parameters": "(final byte[] x509PublicKey)", "modifiers": "public static", "return": "ECPublicKey", "signature": "ECPublicKey getEcPublicKey(final byte[] x509PublicKey)", "full_signature": "public static ECPublicKey getEcPublicKey(final byte[] x509PublicKey)", "class_method_signature": "EllipticCurves.getEcPublicKey(final byte[] x509PublicKey)", "testcase": false, "constructor": false}, {"identifier": "getEcPublicKey", "parameters": "(\n      CurveType curve, PointFormatType pointFormat, final byte[] publicKey)", "modifiers": "public static", "return": "ECPublicKey", "signature": "ECPublicKey getEcPublicKey(\n      CurveType curve, PointFormatType pointFormat, final byte[] publicKey)", "full_signature": "public static ECPublicKey getEcPublicKey(\n      CurveType curve, PointFormatType pointFormat, final byte[] publicKey)", "class_method_signature": "EllipticCurves.getEcPublicKey(\n      CurveType curve, PointFormatType pointFormat, final byte[] publicKey)", "testcase": false, "constructor": false}, {"identifier": "getEcPublicKey", "parameters": "(\n      ECParameterSpec spec, PointFormatType pointFormat, final byte[] publicKey)", "modifiers": "public static", "return": "ECPublicKey", "signature": "ECPublicKey getEcPublicKey(\n      ECParameterSpec spec, PointFormatType pointFormat, final byte[] publicKey)", "full_signature": "public static ECPublicKey getEcPublicKey(\n      ECParameterSpec spec, PointFormatType pointFormat, final byte[] publicKey)", "class_method_signature": "EllipticCurves.getEcPublicKey(\n      ECParameterSpec spec, PointFormatType pointFormat, final byte[] publicKey)", "testcase": false, "constructor": false}, {"identifier": "getEcPublicKey", "parameters": "(CurveType curve, final byte[] x, final byte[] y)", "modifiers": "public static", "return": "ECPublicKey", "signature": "ECPublicKey getEcPublicKey(CurveType curve, final byte[] x, final byte[] y)", "full_signature": "public static ECPublicKey getEcPublicKey(CurveType curve, final byte[] x, final byte[] y)", "class_method_signature": "EllipticCurves.getEcPublicKey(CurveType curve, final byte[] x, final byte[] y)", "testcase": false, "constructor": false}, {"identifier": "getEcPrivateKey", "parameters": "(final byte[] pkcs8PrivateKey)", "modifiers": "public static", "return": "ECPrivateKey", "signature": "ECPrivateKey getEcPrivateKey(final byte[] pkcs8PrivateKey)", "full_signature": "public static ECPrivateKey getEcPrivateKey(final byte[] pkcs8PrivateKey)", "class_method_signature": "EllipticCurves.getEcPrivateKey(final byte[] pkcs8PrivateKey)", "testcase": false, "constructor": false}, {"identifier": "getEcPrivateKey", "parameters": "(CurveType curve, final byte[] keyValue)", "modifiers": "public static", "return": "ECPrivateKey", "signature": "ECPrivateKey getEcPrivateKey(CurveType curve, final byte[] keyValue)", "full_signature": "public static ECPrivateKey getEcPrivateKey(CurveType curve, final byte[] keyValue)", "class_method_signature": "EllipticCurves.getEcPrivateKey(CurveType curve, final byte[] keyValue)", "testcase": false, "constructor": false}, {"identifier": "generateKeyPair", "parameters": "(CurveType curve)", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair generateKeyPair(CurveType curve)", "full_signature": "public static KeyPair generateKeyPair(CurveType curve)", "class_method_signature": "EllipticCurves.generateKeyPair(CurveType curve)", "testcase": false, "constructor": false}, {"identifier": "generateKeyPair", "parameters": "(ECParameterSpec spec)", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair generateKeyPair(ECParameterSpec spec)", "full_signature": "public static KeyPair generateKeyPair(ECParameterSpec spec)", "class_method_signature": "EllipticCurves.generateKeyPair(ECParameterSpec spec)", "testcase": false, "constructor": false}, {"identifier": "validateSharedSecret", "parameters": "(byte[] secret, ECPrivateKey privateKey)", "modifiers": "private static", "return": "void", "signature": "void validateSharedSecret(byte[] secret, ECPrivateKey privateKey)", "full_signature": "private static void validateSharedSecret(byte[] secret, ECPrivateKey privateKey)", "class_method_signature": "EllipticCurves.validateSharedSecret(byte[] secret, ECPrivateKey privateKey)", "testcase": false, "constructor": false}, {"identifier": "computeSharedSecret", "parameters": "(ECPrivateKey myPrivateKey, ECPublicKey peerPublicKey)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] computeSharedSecret(ECPrivateKey myPrivateKey, ECPublicKey peerPublicKey)", "full_signature": "public static byte[] computeSharedSecret(ECPrivateKey myPrivateKey, ECPublicKey peerPublicKey)", "class_method_signature": "EllipticCurves.computeSharedSecret(ECPrivateKey myPrivateKey, ECPublicKey peerPublicKey)", "testcase": false, "constructor": false}, {"identifier": "computeSharedSecret", "parameters": "(ECPrivateKey myPrivateKey, ECPoint publicPoint)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] computeSharedSecret(ECPrivateKey myPrivateKey, ECPoint publicPoint)", "full_signature": "public static byte[] computeSharedSecret(ECPrivateKey myPrivateKey, ECPoint publicPoint)", "class_method_signature": "EllipticCurves.computeSharedSecret(ECPrivateKey myPrivateKey, ECPoint publicPoint)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/EllipticCurves.java"}, "focal_method": {"identifier": "pointDecode", "parameters": "(CurveType curveType, PointFormatType format, byte[] encoded)", "modifiers": "public static", "return": "ECPoint", "body": "public static ECPoint pointDecode(CurveType curveType, PointFormatType format, byte[] encoded)\n      throws GeneralSecurityException {\n    return pointDecode(getCurveSpec(curveType).getCurve(), format, encoded);\n  }", "signature": "ECPoint pointDecode(CurveType curveType, PointFormatType format, byte[] encoded)", "full_signature": "public static ECPoint pointDecode(CurveType curveType, PointFormatType format, byte[] encoded)", "class_method_signature": "EllipticCurves.pointDecode(CurveType curveType, PointFormatType format, byte[] encoded)", "testcase": false, "constructor": false, "invocations": ["pointDecode", "getCurve", "getCurveSpec"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}