{"test_class": {"identifier": "CSVArtifactMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ARTIFACT_DOWNLOAD_URL = \"https://organisation-test.org/\";", "modifier": "private static final", "type": "String", "declarator": "ARTIFACT_DOWNLOAD_URL = \"https://organisation-test.org/\"", "var_name": "ARTIFACT_DOWNLOAD_URL"}, {"original_string": "private static final String ARTIFACT_CLEARING_STATE = \"PROJECT_APPROVED\";", "modifier": "private static final", "type": "String", "declarator": "ARTIFACT_CLEARING_STATE = \"PROJECT_APPROVED\"", "var_name": "ARTIFACT_CLEARING_STATE"}, {"original_string": "private static final String ARTIFACT_TAG_URL = \"https://gitTool.com/project/repository\";", "modifier": "private static final", "type": "String", "declarator": "ARTIFACT_TAG_URL = \"https://gitTool.com/project/repository\"", "var_name": "ARTIFACT_TAG_URL"}, {"original_string": "private static final String ARTIFACT_MAVEN_COORDINATES = \"pkg:maven/test/test1@1.0.0\";", "modifier": "private static final", "type": "String", "declarator": "ARTIFACT_MAVEN_COORDINATES = \"pkg:maven/test/test1@1.0.0\"", "var_name": "ARTIFACT_MAVEN_COORDINATES"}, {"original_string": "private static final String ARTIFACT_SOFTWAREHERITAGE_ID = \"swh:1:rel:1234512345123451234512345123451234512345\";", "modifier": "private static final", "type": "String", "declarator": "ARTIFACT_SOFTWAREHERITAGE_ID = \"swh:1:rel:1234512345123451234512345123451234512345\"", "var_name": "ARTIFACT_SOFTWAREHERITAGE_ID"}, {"original_string": "private static final String ARTIFACT_CHANGESTATUS = \"AS_IS\";", "modifier": "private static final", "type": "String", "declarator": "ARTIFACT_CHANGESTATUS = \"AS_IS\"", "var_name": "ARTIFACT_CHANGESTATUS"}, {"original_string": "private static final String ARTIFACT_COPYRIGHT = \"Copyright xxxx Some Copyright Enterprise\";", "modifier": "private static final", "type": "String", "declarator": "ARTIFACT_COPYRIGHT = \"Copyright xxxx Some Copyright Enterprise\"", "var_name": "ARTIFACT_COPYRIGHT"}, {"original_string": "private static final char DELIMITER = ',';", "modifier": "private static final", "type": "char", "declarator": "DELIMITER = ','", "var_name": "DELIMITER"}, {"original_string": "private static final String CLEARING_DOC_NAME = \"clearing.doc\";", "modifier": "private static final", "type": "String", "declarator": "CLEARING_DOC_NAME = \"clearing.doc\"", "var_name": "CLEARING_DOC_NAME"}, {"original_string": "private static final String COL_FILE = \"File Name\";", "modifier": "private static final", "type": "String", "declarator": "COL_FILE = \"File Name\"", "var_name": "COL_FILE"}, {"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "private File csvFile;", "modifier": "private", "type": "File", "declarator": "csvFile", "var_name": "csvFile"}, {"original_string": "private static final String[] CSV_COLUMNS = {\n            \"Artifact Id\",\n            \"Group Id\",\n            \"Version\",\n            \"Coordinate Type\",\n            \"Effective License\",\n            \"Declared License\",\n            \"Observed License\",\n            \"Copyrights\",\n            \"Hash\",\n            \"Source URL\",\n            \"Release Tag URL\",\n            \"Software Heritage ID\",\n            \"Clearing State\",\n            \"Clearing Document\",\n            \"Change Status\",\n            \"CPE\",\n            COL_FILE};", "modifier": "private static final", "type": "String[]", "declarator": "CSV_COLUMNS = {\n            \"Artifact Id\",\n            \"Group Id\",\n            \"Version\",\n            \"Coordinate Type\",\n            \"Effective License\",\n            \"Declared License\",\n            \"Observed License\",\n            \"Copyrights\",\n            \"Hash\",\n            \"Source URL\",\n            \"Release Tag URL\",\n            \"Software Heritage ID\",\n            \"Clearing State\",\n            \"Clearing Document\",\n            \"Change Status\",\n            \"CPE\",\n            COL_FILE}", "var_name": "CSV_COLUMNS"}], "file": "core/core-workflow-steps/src/test/java/org/eclipse/sw360/antenna/csvreader/CSVArtifactMapperTest.java"}, "test_case": {"identifier": "writeSingleReleaseListToCSVFileTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void writeSingleReleaseListToCSVFileTest() throws IOException {\n        List<Artifact> oneArtifact = Collections.singletonList(mkArtifact(\"test:test\", true)\n                .addFact(new ArtifactCPE(\"cpeId\")));\n        CSVArtifactMapper csvArtifactMapper = new CSVArtifactMapper(csvFile.toPath(), StandardCharsets.UTF_8, DELIMITER, csvFile.getParentFile().toPath());\n        csvArtifactMapper.writeArtifactsToCsvFile(oneArtifact);\n\n        assertThat(csvFile.exists()).isTrue();\n\n        List<CSVRecord> records = parseCsvFile();\n        assertThat(records.size()).isEqualTo(1);\n        CSVRecord csvRecord = records.get(0);\n        for (String csvColumn : CSV_COLUMNS) {\n            if (!csvColumn.equals(\"File Name\")) {\n                assertThat(csvRecord.get(csvColumn).isEmpty()).isFalse();\n            }\n        }\n    }", "signature": "void writeSingleReleaseListToCSVFileTest()", "full_signature": "@Test public void writeSingleReleaseListToCSVFileTest()", "class_method_signature": "CSVArtifactMapperTest.writeSingleReleaseListToCSVFileTest()", "testcase": true, "constructor": false, "invocations": ["singletonList", "addFact", "mkArtifact", "toPath", "toPath", "getParentFile", "writeArtifactsToCsvFile", "isTrue", "assertThat", "exists", "parseCsvFile", "isEqualTo", "assertThat", "size", "get", "equals", "isFalse", "assertThat", "isEmpty", "get"]}, "focal_class": {"identifier": "CSVArtifactMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CSVArtifactMapper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CSVArtifactMapper.class)", "var_name": "LOGGER"}, {"original_string": "private static final String NAME = \"Artifact Id\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"Artifact Id\"", "var_name": "NAME"}, {"original_string": "private static final String GROUP = \"Group Id\";", "modifier": "private static final", "type": "String", "declarator": "GROUP = \"Group Id\"", "var_name": "GROUP"}, {"original_string": "private static final String VERSION = \"Version\";", "modifier": "private static final", "type": "String", "declarator": "VERSION = \"Version\"", "var_name": "VERSION"}, {"original_string": "private static final String COORDINATE_TYPE = \"Coordinate Type\";", "modifier": "private static final", "type": "String", "declarator": "COORDINATE_TYPE = \"Coordinate Type\"", "var_name": "COORDINATE_TYPE"}, {"original_string": "private static final String EFFECTIVE_LICENSE = \"Effective License\";", "modifier": "private static final", "type": "String", "declarator": "EFFECTIVE_LICENSE = \"Effective License\"", "var_name": "EFFECTIVE_LICENSE"}, {"original_string": "private static final String DECLARED_LICENSE = \"Declared License\";", "modifier": "private static final", "type": "String", "declarator": "DECLARED_LICENSE = \"Declared License\"", "var_name": "DECLARED_LICENSE"}, {"original_string": "private static final String OBSERVED_LICENSE = \"Observed License\";", "modifier": "private static final", "type": "String", "declarator": "OBSERVED_LICENSE = \"Observed License\"", "var_name": "OBSERVED_LICENSE"}, {"original_string": "private static final String COPYRIGHTS = \"Copyrights\";", "modifier": "private static final", "type": "String", "declarator": "COPYRIGHTS = \"Copyrights\"", "var_name": "COPYRIGHTS"}, {"original_string": "private static final String HASH = \"Hash\";", "modifier": "private static final", "type": "String", "declarator": "HASH = \"Hash\"", "var_name": "HASH"}, {"original_string": "private static final String SOURCE_URL = \"Source URL\";", "modifier": "private static final", "type": "String", "declarator": "SOURCE_URL = \"Source URL\"", "var_name": "SOURCE_URL"}, {"original_string": "private static final String RELEASE_ARTIFACT_URL = \"Release Tag URL\";", "modifier": "private static final", "type": "String", "declarator": "RELEASE_ARTIFACT_URL = \"Release Tag URL\"", "var_name": "RELEASE_ARTIFACT_URL"}, {"original_string": "private static final String SWH_ID = \"Software Heritage ID\";", "modifier": "private static final", "type": "String", "declarator": "SWH_ID = \"Software Heritage ID\"", "var_name": "SWH_ID"}, {"original_string": "private static final String CLEARING_STATE = \"Clearing State\";", "modifier": "private static final", "type": "String", "declarator": "CLEARING_STATE = \"Clearing State\"", "var_name": "CLEARING_STATE"}, {"original_string": "private static final String CHANGES_STATUS = \"Change Status\";", "modifier": "private static final", "type": "String", "declarator": "CHANGES_STATUS = \"Change Status\"", "var_name": "CHANGES_STATUS"}, {"original_string": "private static final String CPE = \"CPE\";", "modifier": "private static final", "type": "String", "declarator": "CPE = \"CPE\"", "var_name": "CPE"}, {"original_string": "private static final String PATH_NAME = \"File Name\";", "modifier": "private static final", "type": "String", "declarator": "PATH_NAME = \"File Name\"", "var_name": "PATH_NAME"}, {"original_string": "private static final String CLEARING_DOCUMENT_PATH = \"Clearing Document\";", "modifier": "private static final", "type": "String", "declarator": "CLEARING_DOCUMENT_PATH = \"Clearing Document\"", "var_name": "CLEARING_DOCUMENT_PATH"}, {"original_string": "private static final String[] COLUMN_NAMES = {NAME,\n            GROUP,\n            VERSION,\n            COORDINATE_TYPE,\n            EFFECTIVE_LICENSE,\n            DECLARED_LICENSE,\n            OBSERVED_LICENSE,\n            COPYRIGHTS,\n            HASH,\n            SOURCE_URL,\n            RELEASE_ARTIFACT_URL,\n            SWH_ID,\n            CLEARING_STATE,\n            CLEARING_DOCUMENT_PATH,\n            CHANGES_STATUS,\n            CPE,\n            PATH_NAME};", "modifier": "private static final", "type": "String[]", "declarator": "COLUMN_NAMES = {NAME,\n            GROUP,\n            VERSION,\n            COORDINATE_TYPE,\n            EFFECTIVE_LICENSE,\n            DECLARED_LICENSE,\n            OBSERVED_LICENSE,\n            COPYRIGHTS,\n            HASH,\n            SOURCE_URL,\n            RELEASE_ARTIFACT_URL,\n            SWH_ID,\n            CLEARING_STATE,\n            CLEARING_DOCUMENT_PATH,\n            CHANGES_STATUS,\n            CPE,\n            PATH_NAME}", "var_name": "COLUMN_NAMES"}, {"original_string": "private final Path csvFile;", "modifier": "private final", "type": "Path", "declarator": "csvFile", "var_name": "csvFile"}, {"original_string": "private final Charset encoding;", "modifier": "private final", "type": "Charset", "declarator": "encoding", "var_name": "encoding"}, {"original_string": "private final char delimiter;", "modifier": "private final", "type": "char", "declarator": "delimiter", "var_name": "delimiter"}, {"original_string": "private final Path baseDir;", "modifier": "private final", "type": "Path", "declarator": "baseDir", "var_name": "baseDir"}], "methods": [{"identifier": "CSVArtifactMapper", "parameters": "(Path csvFile, Charset encoding, char delimiter, Path baseDir)", "modifiers": "public", "return": "", "signature": " CSVArtifactMapper(Path csvFile, Charset encoding, char delimiter, Path baseDir)", "full_signature": "public  CSVArtifactMapper(Path csvFile, Charset encoding, char delimiter, Path baseDir)", "class_method_signature": "CSVArtifactMapper.CSVArtifactMapper(Path csvFile, Charset encoding, char delimiter, Path baseDir)", "testcase": false, "constructor": true}, {"identifier": "writeArtifactsToCsvFile", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "public", "return": "Path", "signature": "Path writeArtifactsToCsvFile(Collection<Artifact> artifacts)", "full_signature": "public Path writeArtifactsToCsvFile(Collection<Artifact> artifacts)", "class_method_signature": "CSVArtifactMapper.writeArtifactsToCsvFile(Collection<Artifact> artifacts)", "testcase": false, "constructor": false}, {"identifier": "makeCsvRecordsFromArtifact", "parameters": "(Artifact artifact)", "modifiers": "private", "return": "Object[]", "signature": "Object[] makeCsvRecordsFromArtifact(Artifact artifact)", "full_signature": "private Object[] makeCsvRecordsFromArtifact(Artifact artifact)", "class_method_signature": "CSVArtifactMapper.makeCsvRecordsFromArtifact(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "makeCsvRecordFromArtifact", "parameters": "(Artifact artifact, String hash, Coordinate coordinate)", "modifiers": "private", "return": "Object[]", "signature": "Object[] makeCsvRecordFromArtifact(Artifact artifact, String hash, Coordinate coordinate)", "full_signature": "private Object[] makeCsvRecordFromArtifact(Artifact artifact, String hash, Coordinate coordinate)", "class_method_signature": "CSVArtifactMapper.makeCsvRecordFromArtifact(Artifact artifact, String hash, Coordinate coordinate)", "testcase": false, "constructor": false}, {"identifier": "createArtifactsList", "parameters": "()", "modifiers": "public", "return": "Collection<Artifact>", "signature": "Collection<Artifact> createArtifactsList()", "full_signature": "public Collection<Artifact> createArtifactsList()", "class_method_signature": "CSVArtifactMapper.createArtifactsList()", "testcase": false, "constructor": false}, {"identifier": "artifactListContainsArtifact", "parameters": "(List<Artifact> artifacts, Artifact artifact)", "modifiers": "private", "return": "Optional<Artifact>", "signature": "Optional<Artifact> artifactListContainsArtifact(List<Artifact> artifacts, Artifact artifact)", "full_signature": "private Optional<Artifact> artifactListContainsArtifact(List<Artifact> artifacts, Artifact artifact)", "class_method_signature": "CSVArtifactMapper.artifactListContainsArtifact(List<Artifact> artifacts, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "artifactListContainsArtifact", "parameters": "(List<Artifact> artifacts, ArtifactCoordinates coordinates)", "modifiers": "private", "return": "Optional<Artifact>", "signature": "Optional<Artifact> artifactListContainsArtifact(List<Artifact> artifacts, ArtifactCoordinates coordinates)", "full_signature": "private Optional<Artifact> artifactListContainsArtifact(List<Artifact> artifacts, ArtifactCoordinates coordinates)", "class_method_signature": "CSVArtifactMapper.artifactListContainsArtifact(List<Artifact> artifacts, ArtifactCoordinates coordinates)", "testcase": false, "constructor": false}, {"identifier": "mapRecordToArtifact", "parameters": "(CSVRecord record)", "modifiers": "private", "return": "Artifact", "signature": "Artifact mapRecordToArtifact(CSVRecord record)", "full_signature": "private Artifact mapRecordToArtifact(CSVRecord record)", "class_method_signature": "CSVArtifactMapper.mapRecordToArtifact(CSVRecord record)", "testcase": false, "constructor": false}, {"identifier": "addOptionalArtifactFacts", "parameters": "(CSVRecord record, Artifact artifact)", "modifiers": "private", "return": "void", "signature": "void addOptionalArtifactFacts(CSVRecord record, Artifact artifact)", "full_signature": "private void addOptionalArtifactFacts(CSVRecord record, Artifact artifact)", "class_method_signature": "CSVArtifactMapper.addOptionalArtifactFacts(CSVRecord record, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "addLicenseFact", "parameters": "(CSVRecord record, Artifact artifact, String licenseType,\n                                       Function<License, ArtifactLicenseInformation> licenseFactCreator)", "modifiers": "private static", "return": "void", "signature": "void addLicenseFact(CSVRecord record, Artifact artifact, String licenseType,\n                                       Function<License, ArtifactLicenseInformation> licenseFactCreator)", "full_signature": "private static void addLicenseFact(CSVRecord record, Artifact artifact, String licenseType,\n                                       Function<License, ArtifactLicenseInformation> licenseFactCreator)", "class_method_signature": "CSVArtifactMapper.addLicenseFact(CSVRecord record, Artifact artifact, String licenseType,\n                                       Function<License, ArtifactLicenseInformation> licenseFactCreator)", "testcase": false, "constructor": false}, {"identifier": "getPathFromPathname", "parameters": "(String pathName)", "modifiers": "private", "return": "Path", "signature": "Path getPathFromPathname(String pathName)", "full_signature": "private Path getPathFromPathname(String pathName)", "class_method_signature": "CSVArtifactMapper.getPathFromPathname(String pathName)", "testcase": false, "constructor": false}, {"identifier": "checkIfRecordIsMappedAndNotEmptyForColumn", "parameters": "(CSVRecord record, String column)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkIfRecordIsMappedAndNotEmptyForColumn(CSVRecord record, String column)", "full_signature": "private static boolean checkIfRecordIsMappedAndNotEmptyForColumn(CSVRecord record, String column)", "class_method_signature": "CSVArtifactMapper.checkIfRecordIsMappedAndNotEmptyForColumn(CSVRecord record, String column)", "testcase": false, "constructor": false}, {"identifier": "createCoordinates", "parameters": "(CSVRecord record)", "modifiers": "private", "return": "Coordinate", "signature": "Coordinate createCoordinates(CSVRecord record)", "full_signature": "private Coordinate createCoordinates(CSVRecord record)", "class_method_signature": "CSVArtifactMapper.createCoordinates(CSVRecord record)", "testcase": false, "constructor": false}, {"identifier": "getRecordsFromCsvFile", "parameters": "()", "modifiers": "private", "return": "List<CSVRecord>", "signature": "List<CSVRecord> getRecordsFromCsvFile()", "full_signature": "private List<CSVRecord> getRecordsFromCsvFile()", "class_method_signature": "CSVArtifactMapper.getRecordsFromCsvFile()", "testcase": false, "constructor": false}, {"identifier": "mapOverriddenLicenseToString", "parameters": "(Artifact artifact)", "modifiers": "private static", "return": "String", "signature": "String mapOverriddenLicenseToString(Artifact artifact)", "full_signature": "private static String mapOverriddenLicenseToString(Artifact artifact)", "class_method_signature": "CSVArtifactMapper.mapOverriddenLicenseToString(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "mapDeclaredLicenseToString", "parameters": "(Artifact artifact)", "modifiers": "private static", "return": "String", "signature": "String mapDeclaredLicenseToString(Artifact artifact)", "full_signature": "private static String mapDeclaredLicenseToString(Artifact artifact)", "class_method_signature": "CSVArtifactMapper.mapDeclaredLicenseToString(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "mapObservedLicenseToString", "parameters": "(Artifact artifact)", "modifiers": "private static", "return": "String", "signature": "String mapObservedLicenseToString(Artifact artifact)", "full_signature": "private static String mapObservedLicenseToString(Artifact artifact)", "class_method_signature": "CSVArtifactMapper.mapObservedLicenseToString(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "mapSourceUrlToString", "parameters": "(Artifact artifact)", "modifiers": "private static", "return": "String", "signature": "String mapSourceUrlToString(Artifact artifact)", "full_signature": "private static String mapSourceUrlToString(Artifact artifact)", "class_method_signature": "CSVArtifactMapper.mapSourceUrlToString(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "mapReleaseTagUrlToString", "parameters": "(Artifact artifact)", "modifiers": "private static", "return": "String", "signature": "String mapReleaseTagUrlToString(Artifact artifact)", "full_signature": "private static String mapReleaseTagUrlToString(Artifact artifact)", "class_method_signature": "CSVArtifactMapper.mapReleaseTagUrlToString(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "mapSoftwareHeritagToString", "parameters": "(Artifact artifact)", "modifiers": "private static", "return": "String", "signature": "String mapSoftwareHeritagToString(Artifact artifact)", "full_signature": "private static String mapSoftwareHeritagToString(Artifact artifact)", "class_method_signature": "CSVArtifactMapper.mapSoftwareHeritagToString(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "mapClearingStatusToString", "parameters": "(Artifact artifact)", "modifiers": "private static", "return": "String", "signature": "String mapClearingStatusToString(Artifact artifact)", "full_signature": "private static String mapClearingStatusToString(Artifact artifact)", "class_method_signature": "CSVArtifactMapper.mapClearingStatusToString(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "mapClearingDocumentToString", "parameters": "(Artifact artifact)", "modifiers": "private static", "return": "String", "signature": "String mapClearingDocumentToString(Artifact artifact)", "full_signature": "private static String mapClearingDocumentToString(Artifact artifact)", "class_method_signature": "CSVArtifactMapper.mapClearingDocumentToString(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "mapChangeStatusToString", "parameters": "(Artifact artifact)", "modifiers": "private static", "return": "String", "signature": "String mapChangeStatusToString(Artifact artifact)", "full_signature": "private static String mapChangeStatusToString(Artifact artifact)", "class_method_signature": "CSVArtifactMapper.mapChangeStatusToString(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "mapCopyrightsToString", "parameters": "(Artifact artifact)", "modifiers": "private static", "return": "String", "signature": "String mapCopyrightsToString(Artifact artifact)", "full_signature": "private static String mapCopyrightsToString(Artifact artifact)", "class_method_signature": "CSVArtifactMapper.mapCopyrightsToString(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "mapCPEIdToString", "parameters": "(Artifact artifact)", "modifiers": "private static", "return": "String", "signature": "String mapCPEIdToString(Artifact artifact)", "full_signature": "private static String mapCPEIdToString(Artifact artifact)", "class_method_signature": "CSVArtifactMapper.mapCPEIdToString(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "getFilepathAsString", "parameters": "(Artifact artifact)", "modifiers": "private", "return": "String", "signature": "String getFilepathAsString(Artifact artifact)", "full_signature": "private String getFilepathAsString(Artifact artifact)", "class_method_signature": "CSVArtifactMapper.getFilepathAsString(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "getPathAsStringIfExists", "parameters": "(Path path, Artifact artifact)", "modifiers": "private", "return": "String", "signature": "String getPathAsStringIfExists(Path path, Artifact artifact)", "full_signature": "private String getPathAsStringIfExists(Path path, Artifact artifact)", "class_method_signature": "CSVArtifactMapper.getPathAsStringIfExists(Path path, Artifact artifact)", "testcase": false, "constructor": false}], "file": "core/core-workflow-steps/src/main/java/org/eclipse/sw360/antenna/csvreader/CSVArtifactMapper.java"}, "focal_method": {"identifier": "writeArtifactsToCsvFile", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "public", "return": "Path", "body": "public Path writeArtifactsToCsvFile(Collection<Artifact> artifacts) {\n        try (BufferedWriter writer = Files.newBufferedWriter(csvFile);\n             CSVPrinter csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT.withHeader(COLUMN_NAMES))\n        ) {\n            for (Artifact artifact : artifacts) {\n                csvPrinter.printRecords(makeCsvRecordsFromArtifact(artifact));\n            }\n            csvPrinter.flush();\n            return csvFile.toAbsolutePath();\n        } catch (IOException e) {\n            LOGGER.error(\"Error when writing the csv file\", e);\n            return null;\n        }\n    }", "signature": "Path writeArtifactsToCsvFile(Collection<Artifact> artifacts)", "full_signature": "public Path writeArtifactsToCsvFile(Collection<Artifact> artifacts)", "class_method_signature": "CSVArtifactMapper.writeArtifactsToCsvFile(Collection<Artifact> artifacts)", "testcase": false, "constructor": false, "invocations": ["newBufferedWriter", "withHeader", "printRecords", "makeCsvRecordsFromArtifact", "flush", "toAbsolutePath", "error"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}