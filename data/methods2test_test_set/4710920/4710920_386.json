{"test_class": {"identifier": "FileSystemDynamicConfigurationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private FileSystemDynamicConfiguration configuration;", "modifier": "private", "type": "FileSystemDynamicConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private static final String KEY = \"abc-def-ghi\";", "modifier": "private static final", "type": "String", "declarator": "KEY = \"abc-def-ghi\"", "var_name": "KEY"}, {"original_string": "private static final String CONTENT = \"Hello,World\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT = \"Hello,World\"", "var_name": "CONTENT"}], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/config/configcenter/file/FileSystemDynamicConfigurationTest.java"}, "test_case": {"identifier": "testAddAndRemoveListener", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddAndRemoveListener() throws InterruptedException {\n\n        configuration.publishConfig(KEY, \"A\");\n\n        AtomicBoolean processedEvent = new AtomicBoolean();\n\n        configuration.addListener(KEY, event -> {\n\n            processedEvent.set(true);\n            assertEquals(KEY, event.getKey());\n            logger.info(String.format(\"[%s] \" + event + \"\\n\", Thread.currentThread().getName()));\n        });\n\n\n        configuration.publishConfig(KEY, \"B\");\n        while (!processedEvent.get()) {\n            Thread.sleep(1 * 1000L);\n        }\n\n        processedEvent.set(false);\n        configuration.publishConfig(KEY, \"C\");\n        while (!processedEvent.get()) {\n            Thread.sleep(1 * 1000L);\n        }\n\n        processedEvent.set(false);\n        configuration.publishConfig(KEY, \"D\");\n        while (!processedEvent.get()) {\n            Thread.sleep(1 * 1000L);\n        }\n\n        configuration.addListener(\"test\", \"test\", event -> {\n            processedEvent.set(true);\n            assertEquals(\"test\", event.getKey());\n            logger.info(String.format(\"[%s] \" + event + \"\\n\", Thread.currentThread().getName()));\n        });\n        processedEvent.set(false);\n        configuration.publishConfig(\"test\", \"test\", \"TEST\");\n        while (!processedEvent.get()) {\n            Thread.sleep(1 * 1000L);\n        }\n\n        configuration.publishConfig(\"test\", \"test\", \"TEST\");\n        configuration.publishConfig(\"test\", \"test\", \"TEST\");\n        configuration.publishConfig(\"test\", \"test\", \"TEST\");\n\n\n        processedEvent.set(false);\n        configuration.getRootDirectory();\n        File keyFile = new File(KEY, DEFAULT_GROUP);\n        FileUtils.deleteQuietly(keyFile);\n        while (!processedEvent.get()) {\n            Thread.sleep(1 * 1000L);\n        }\n    }", "signature": "void testAddAndRemoveListener()", "full_signature": "@Test public void testAddAndRemoveListener()", "class_method_signature": "FileSystemDynamicConfigurationTest.testAddAndRemoveListener()", "testcase": true, "constructor": false, "invocations": ["publishConfig", "addListener", "set", "assertEquals", "getKey", "info", "format", "getName", "currentThread", "publishConfig", "get", "sleep", "set", "publishConfig", "get", "sleep", "set", "publishConfig", "get", "sleep", "addListener", "set", "assertEquals", "getKey", "info", "format", "getName", "currentThread", "set", "publishConfig", "get", "sleep", "publishConfig", "publishConfig", "publishConfig", "set", "getRootDirectory", "deleteQuietly", "get", "sleep"]}, "focal_class": {"identifier": "FileSystemDynamicConfiguration", "superclass": "extends TreePathDynamicConfiguration", "interfaces": "", "fields": [{"original_string": "public static final String CONFIG_CENTER_DIR_PARAM_NAME = PARAM_NAME_PREFIX + \"dir\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_CENTER_DIR_PARAM_NAME = PARAM_NAME_PREFIX + \"dir\"", "var_name": "CONFIG_CENTER_DIR_PARAM_NAME"}, {"original_string": "public static final String CONFIG_CENTER_ENCODING_PARAM_NAME = PARAM_NAME_PREFIX + \"encoding\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_CENTER_ENCODING_PARAM_NAME = PARAM_NAME_PREFIX + \"encoding\"", "var_name": "CONFIG_CENTER_ENCODING_PARAM_NAME"}, {"original_string": "public static final String DEFAULT_CONFIG_CENTER_DIR_PATH = System.getProperty(\"user.home\") + File.separator\n            + \".dubbo\" + File.separator + \"config-center\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_CONFIG_CENTER_DIR_PATH = System.getProperty(\"user.home\") + File.separator\n            + \".dubbo\" + File.separator + \"config-center\"", "var_name": "DEFAULT_CONFIG_CENTER_DIR_PATH"}, {"original_string": "public static final int DEFAULT_THREAD_POOL_SIZE = 1;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_THREAD_POOL_SIZE = 1", "var_name": "DEFAULT_THREAD_POOL_SIZE"}, {"original_string": "public static final String DEFAULT_CONFIG_CENTER_ENCODING = \"UTF-8\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_CONFIG_CENTER_ENCODING = \"UTF-8\"", "var_name": "DEFAULT_CONFIG_CENTER_ENCODING"}, {"original_string": "private static final WatchEvent.Kind[] INTEREST_PATH_KINDS = of(ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);", "modifier": "private static final", "type": "WatchEvent.Kind[]", "declarator": "INTEREST_PATH_KINDS = of(ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY)", "var_name": "INTEREST_PATH_KINDS"}, {"original_string": "private static final String POLLING_WATCH_SERVICE_CLASS_NAME = \"sun.nio.fs.PollingWatchService\";", "modifier": "private static final", "type": "String", "declarator": "POLLING_WATCH_SERVICE_CLASS_NAME = \"sun.nio.fs.PollingWatchService\"", "var_name": "POLLING_WATCH_SERVICE_CLASS_NAME"}, {"original_string": "private static final int THREAD_POOL_SIZE = 1;", "modifier": "private static final", "type": "int", "declarator": "THREAD_POOL_SIZE = 1", "var_name": "THREAD_POOL_SIZE"}, {"original_string": "private static final Log logger = LogFactory.getLog(FileSystemDynamicConfiguration.class);", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog(FileSystemDynamicConfiguration.class)", "var_name": "logger"}, {"original_string": "private static final Map<String, ConfigChangeType> CONFIG_CHANGE_TYPES_MAP =\n            unmodifiableMap(new HashMap<String, ConfigChangeType>() {\n                // Initializes the elements that is mapping ConfigChangeType\n                {\n                    put(ENTRY_CREATE.name(), ConfigChangeType.ADDED);\n                    put(ENTRY_DELETE.name(), ConfigChangeType.DELETED);\n                    put(ENTRY_MODIFY.name(), ConfigChangeType.MODIFIED);\n                }\n            });", "modifier": "private static final", "type": "Map<String, ConfigChangeType>", "declarator": "CONFIG_CHANGE_TYPES_MAP =\n            unmodifiableMap(new HashMap<String, ConfigChangeType>() {\n                // Initializes the elements that is mapping ConfigChangeType\n                {\n                    put(ENTRY_CREATE.name(), ConfigChangeType.ADDED);\n                    put(ENTRY_DELETE.name(), ConfigChangeType.DELETED);\n                    put(ENTRY_MODIFY.name(), ConfigChangeType.MODIFIED);\n                }\n            })", "var_name": "CONFIG_CHANGE_TYPES_MAP"}, {"original_string": "private static final Optional<WatchService> watchService;", "modifier": "private static final", "type": "Optional<WatchService>", "declarator": "watchService", "var_name": "watchService"}, {"original_string": "private static final boolean BASED_POOLING_WATCH_SERVICE;", "modifier": "private static final", "type": "boolean", "declarator": "BASED_POOLING_WATCH_SERVICE", "var_name": "BASED_POOLING_WATCH_SERVICE"}, {"original_string": "private static final WatchEvent.Modifier[] MODIFIERS;", "modifier": "private static final", "type": "WatchEvent.Modifier[]", "declarator": "MODIFIERS", "var_name": "MODIFIERS"}, {"original_string": "private static final Integer DELAY;", "modifier": "private static final", "type": "Integer", "declarator": "DELAY", "var_name": "DELAY"}, {"original_string": "private static final ThreadPoolExecutor WATCH_EVENTS_LOOP_THREAD_POOL;", "modifier": "private static final", "type": "ThreadPoolExecutor", "declarator": "WATCH_EVENTS_LOOP_THREAD_POOL", "var_name": "WATCH_EVENTS_LOOP_THREAD_POOL"}, {"original_string": "private final File rootDirectory;", "modifier": "private final", "type": "File", "declarator": "rootDirectory", "var_name": "rootDirectory"}, {"original_string": "private final String encoding;", "modifier": "private final", "type": "String", "declarator": "encoding", "var_name": "encoding"}, {"original_string": "private final Set<File> processingDirectories;", "modifier": "private final", "type": "Set<File>", "declarator": "processingDirectories", "var_name": "processingDirectories"}, {"original_string": "private final Map<File, List<ConfigurationListener>> listenersRepository;", "modifier": "private final", "type": "Map<File, List<ConfigurationListener>>", "declarator": "listenersRepository", "var_name": "listenersRepository"}], "methods": [{"identifier": "FileSystemDynamicConfiguration", "parameters": "()", "modifiers": "public", "return": "", "signature": " FileSystemDynamicConfiguration()", "full_signature": "public  FileSystemDynamicConfiguration()", "class_method_signature": "FileSystemDynamicConfiguration.FileSystemDynamicConfiguration()", "testcase": false, "constructor": true}, {"identifier": "FileSystemDynamicConfiguration", "parameters": "(File rootDirectory)", "modifiers": "public", "return": "", "signature": " FileSystemDynamicConfiguration(File rootDirectory)", "full_signature": "public  FileSystemDynamicConfiguration(File rootDirectory)", "class_method_signature": "FileSystemDynamicConfiguration.FileSystemDynamicConfiguration(File rootDirectory)", "testcase": false, "constructor": true}, {"identifier": "FileSystemDynamicConfiguration", "parameters": "(File rootDirectory, String encoding)", "modifiers": "public", "return": "", "signature": " FileSystemDynamicConfiguration(File rootDirectory, String encoding)", "full_signature": "public  FileSystemDynamicConfiguration(File rootDirectory, String encoding)", "class_method_signature": "FileSystemDynamicConfiguration.FileSystemDynamicConfiguration(File rootDirectory, String encoding)", "testcase": false, "constructor": true}, {"identifier": "FileSystemDynamicConfiguration", "parameters": "(File rootDirectory, String encoding, String threadPoolPrefixName)", "modifiers": "public", "return": "", "signature": " FileSystemDynamicConfiguration(File rootDirectory, String encoding, String threadPoolPrefixName)", "full_signature": "public  FileSystemDynamicConfiguration(File rootDirectory, String encoding, String threadPoolPrefixName)", "class_method_signature": "FileSystemDynamicConfiguration.FileSystemDynamicConfiguration(File rootDirectory, String encoding, String threadPoolPrefixName)", "testcase": false, "constructor": true}, {"identifier": "FileSystemDynamicConfiguration", "parameters": "(File rootDirectory, String encoding, String threadPoolPrefixName,\n                                          int threadPoolSize)", "modifiers": "public", "return": "", "signature": " FileSystemDynamicConfiguration(File rootDirectory, String encoding, String threadPoolPrefixName,\n                                          int threadPoolSize)", "full_signature": "public  FileSystemDynamicConfiguration(File rootDirectory, String encoding, String threadPoolPrefixName,\n                                          int threadPoolSize)", "class_method_signature": "FileSystemDynamicConfiguration.FileSystemDynamicConfiguration(File rootDirectory, String encoding, String threadPoolPrefixName,\n                                          int threadPoolSize)", "testcase": false, "constructor": true}, {"identifier": "FileSystemDynamicConfiguration", "parameters": "(File rootDirectory, String encoding,\n                                          String threadPoolPrefixName,\n                                          int threadPoolSize,\n                                          long keepAliveTime)", "modifiers": "public", "return": "", "signature": " FileSystemDynamicConfiguration(File rootDirectory, String encoding,\n                                          String threadPoolPrefixName,\n                                          int threadPoolSize,\n                                          long keepAliveTime)", "full_signature": "public  FileSystemDynamicConfiguration(File rootDirectory, String encoding,\n                                          String threadPoolPrefixName,\n                                          int threadPoolSize,\n                                          long keepAliveTime)", "class_method_signature": "FileSystemDynamicConfiguration.FileSystemDynamicConfiguration(File rootDirectory, String encoding,\n                                          String threadPoolPrefixName,\n                                          int threadPoolSize,\n                                          long keepAliveTime)", "testcase": false, "constructor": true}, {"identifier": "FileSystemDynamicConfiguration", "parameters": "(URL url)", "modifiers": "public", "return": "", "signature": " FileSystemDynamicConfiguration(URL url)", "full_signature": "public  FileSystemDynamicConfiguration(URL url)", "class_method_signature": "FileSystemDynamicConfiguration.FileSystemDynamicConfiguration(URL url)", "testcase": false, "constructor": true}, {"identifier": "initProcessingDirectories", "parameters": "()", "modifiers": "private", "return": "Set<File>", "signature": "Set<File> initProcessingDirectories()", "full_signature": "private Set<File> initProcessingDirectories()", "class_method_signature": "FileSystemDynamicConfiguration.initProcessingDirectories()", "testcase": false, "constructor": false}, {"identifier": "configFile", "parameters": "(String key, String group)", "modifiers": "public", "return": "File", "signature": "File configFile(String key, String group)", "full_signature": "public File configFile(String key, String group)", "class_method_signature": "FileSystemDynamicConfiguration.configFile(String key, String group)", "testcase": false, "constructor": false}, {"identifier": "doInListener", "parameters": "(String configFilePath, BiConsumer<File, List<ConfigurationListener>> consumer)", "modifiers": "private", "return": "void", "signature": "void doInListener(String configFilePath, BiConsumer<File, List<ConfigurationListener>> consumer)", "full_signature": "private void doInListener(String configFilePath, BiConsumer<File, List<ConfigurationListener>> consumer)", "class_method_signature": "FileSystemDynamicConfiguration.doInListener(String configFilePath, BiConsumer<File, List<ConfigurationListener>> consumer)", "testcase": false, "constructor": false}, {"identifier": "registerDubboShutdownHook", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void registerDubboShutdownHook()", "full_signature": "private static void registerDubboShutdownHook()", "class_method_signature": "FileSystemDynamicConfiguration.registerDubboShutdownHook()", "testcase": false, "constructor": false}, {"identifier": "isProcessingWatchEvents", "parameters": "()", "modifiers": "private static", "return": "boolean", "signature": "boolean isProcessingWatchEvents()", "full_signature": "private static boolean isProcessingWatchEvents()", "class_method_signature": "FileSystemDynamicConfiguration.isProcessingWatchEvents()", "testcase": false, "constructor": false}, {"identifier": "processWatchEvents", "parameters": "(WatchService watchService)", "modifiers": "private", "return": "void", "signature": "void processWatchEvents(WatchService watchService)", "full_signature": "private void processWatchEvents(WatchService watchService)", "class_method_signature": "FileSystemDynamicConfiguration.processWatchEvents(WatchService watchService)", "testcase": false, "constructor": false}, {"identifier": "signalConfigDirectory", "parameters": "(File configDirectory)", "modifiers": "private", "return": "void", "signature": "void signalConfigDirectory(File configDirectory)", "full_signature": "private void signalConfigDirectory(File configDirectory)", "class_method_signature": "FileSystemDynamicConfiguration.signalConfigDirectory(File configDirectory)", "testcase": false, "constructor": false}, {"identifier": "removeProcessingDirectory", "parameters": "(File configDirectory)", "modifiers": "private", "return": "void", "signature": "void removeProcessingDirectory(File configDirectory)", "full_signature": "private void removeProcessingDirectory(File configDirectory)", "class_method_signature": "FileSystemDynamicConfiguration.removeProcessingDirectory(File configDirectory)", "testcase": false, "constructor": false}, {"identifier": "notifyProcessingDirectory", "parameters": "(File configDirectory)", "modifiers": "private", "return": "void", "signature": "void notifyProcessingDirectory(File configDirectory)", "full_signature": "private void notifyProcessingDirectory(File configDirectory)", "class_method_signature": "FileSystemDynamicConfiguration.notifyProcessingDirectory(File configDirectory)", "testcase": false, "constructor": false}, {"identifier": "getListeners", "parameters": "(File configFile)", "modifiers": "private", "return": "List<ConfigurationListener>", "signature": "List<ConfigurationListener> getListeners(File configFile)", "full_signature": "private List<ConfigurationListener> getListeners(File configFile)", "class_method_signature": "FileSystemDynamicConfiguration.getListeners(File configFile)", "testcase": false, "constructor": false}, {"identifier": "fireConfigChangeEvent", "parameters": "(File configDirectory, File configFile, ConfigChangeType configChangeType)", "modifiers": "private", "return": "void", "signature": "void fireConfigChangeEvent(File configDirectory, File configFile, ConfigChangeType configChangeType)", "full_signature": "private void fireConfigChangeEvent(File configDirectory, File configFile, ConfigChangeType configChangeType)", "class_method_signature": "FileSystemDynamicConfiguration.fireConfigChangeEvent(File configDirectory, File configFile, ConfigChangeType configChangeType)", "testcase": false, "constructor": false}, {"identifier": "canRead", "parameters": "(File file)", "modifiers": "private", "return": "boolean", "signature": "boolean canRead(File file)", "full_signature": "private boolean canRead(File file)", "class_method_signature": "FileSystemDynamicConfiguration.canRead(File file)", "testcase": false, "constructor": false}, {"identifier": "getInternalProperty", "parameters": "(String key)", "modifiers": "@Override public", "return": "Object", "signature": "Object getInternalProperty(String key)", "full_signature": "@Override public Object getInternalProperty(String key)", "class_method_signature": "FileSystemDynamicConfiguration.getInternalProperty(String key)", "testcase": false, "constructor": false}, {"identifier": "doPublishConfig", "parameters": "(String pathKey, String content)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean doPublishConfig(String pathKey, String content)", "full_signature": "@Override protected boolean doPublishConfig(String pathKey, String content)", "class_method_signature": "FileSystemDynamicConfiguration.doPublishConfig(String pathKey, String content)", "testcase": false, "constructor": false}, {"identifier": "doGetConfig", "parameters": "(String pathKey)", "modifiers": "@Override protected", "return": "String", "signature": "String doGetConfig(String pathKey)", "full_signature": "@Override protected String doGetConfig(String pathKey)", "class_method_signature": "FileSystemDynamicConfiguration.doGetConfig(String pathKey)", "testcase": false, "constructor": false}, {"identifier": "doRemoveConfig", "parameters": "(String pathKey)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean doRemoveConfig(String pathKey)", "full_signature": "@Override protected boolean doRemoveConfig(String pathKey)", "class_method_signature": "FileSystemDynamicConfiguration.doRemoveConfig(String pathKey)", "testcase": false, "constructor": false}, {"identifier": "doGetConfigKeys", "parameters": "(String groupPath)", "modifiers": "@Override protected", "return": "Collection<String>", "signature": "Collection<String> doGetConfigKeys(String groupPath)", "full_signature": "@Override protected Collection<String> doGetConfigKeys(String groupPath)", "class_method_signature": "FileSystemDynamicConfiguration.doGetConfigKeys(String groupPath)", "testcase": false, "constructor": false}, {"identifier": "doAddListener", "parameters": "(String pathKey, ConfigurationListener listener)", "modifiers": "@Override protected", "return": "void", "signature": "void doAddListener(String pathKey, ConfigurationListener listener)", "full_signature": "@Override protected void doAddListener(String pathKey, ConfigurationListener listener)", "class_method_signature": "FileSystemDynamicConfiguration.doAddListener(String pathKey, ConfigurationListener listener)", "testcase": false, "constructor": false}, {"identifier": "doRemoveListener", "parameters": "(String pathKey, ConfigurationListener listener)", "modifiers": "@Override protected", "return": "void", "signature": "void doRemoveListener(String pathKey, ConfigurationListener listener)", "full_signature": "@Override protected void doRemoveListener(String pathKey, ConfigurationListener listener)", "class_method_signature": "FileSystemDynamicConfiguration.doRemoveListener(String pathKey, ConfigurationListener listener)", "testcase": false, "constructor": false}, {"identifier": "delay", "parameters": "(String configFilePath, ThrowableFunction<File, V> function)", "modifiers": "protected", "return": "V", "signature": "V delay(String configFilePath, ThrowableFunction<File, V> function)", "full_signature": "protected V delay(String configFilePath, ThrowableFunction<File, V> function)", "class_method_signature": "FileSystemDynamicConfiguration.delay(String configFilePath, ThrowableFunction<File, V> function)", "testcase": false, "constructor": false}, {"identifier": "hasListeners", "parameters": "(File configFile)", "modifiers": "private", "return": "boolean", "signature": "boolean hasListeners(File configFile)", "full_signature": "private boolean hasListeners(File configFile)", "class_method_signature": "FileSystemDynamicConfiguration.hasListeners(File configFile)", "testcase": false, "constructor": false}, {"identifier": "isProcessing", "parameters": "(File configDirectory)", "modifiers": "private", "return": "boolean", "signature": "boolean isProcessing(File configDirectory)", "full_signature": "private boolean isProcessing(File configDirectory)", "class_method_signature": "FileSystemDynamicConfiguration.isProcessing(File configDirectory)", "testcase": false, "constructor": false}, {"identifier": "addProcessing", "parameters": "(File configDirectory)", "modifiers": "private", "return": "void", "signature": "void addProcessing(File configDirectory)", "full_signature": "private void addProcessing(File configDirectory)", "class_method_signature": "FileSystemDynamicConfiguration.addProcessing(File configDirectory)", "testcase": false, "constructor": false}, {"identifier": "getConfigGroups", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getConfigGroups()", "full_signature": "public Set<String> getConfigGroups()", "class_method_signature": "FileSystemDynamicConfiguration.getConfigGroups()", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "(File configFile)", "modifiers": "protected", "return": "String", "signature": "String getConfig(File configFile)", "full_signature": "protected String getConfig(File configFile)", "class_method_signature": "FileSystemDynamicConfiguration.getConfig(File configFile)", "testcase": false, "constructor": false}, {"identifier": "doClose", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doClose()", "full_signature": "@Override protected void doClose()", "class_method_signature": "FileSystemDynamicConfiguration.doClose()", "testcase": false, "constructor": false}, {"identifier": "getRootDirectory", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getRootDirectory()", "full_signature": "public File getRootDirectory()", "class_method_signature": "FileSystemDynamicConfiguration.getRootDirectory()", "testcase": false, "constructor": false}, {"identifier": "getEncoding", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEncoding()", "full_signature": "public String getEncoding()", "class_method_signature": "FileSystemDynamicConfiguration.getEncoding()", "testcase": false, "constructor": false}, {"identifier": "getDelay", "parameters": "()", "modifiers": "protected", "return": "Integer", "signature": "Integer getDelay()", "full_signature": "protected Integer getDelay()", "class_method_signature": "FileSystemDynamicConfiguration.getDelay()", "testcase": false, "constructor": false}, {"identifier": "isBasedPoolingWatchService", "parameters": "()", "modifiers": "protected static", "return": "boolean", "signature": "boolean isBasedPoolingWatchService()", "full_signature": "protected static boolean isBasedPoolingWatchService()", "class_method_signature": "FileSystemDynamicConfiguration.isBasedPoolingWatchService()", "testcase": false, "constructor": false}, {"identifier": "getWatchEventsLoopThreadPool", "parameters": "()", "modifiers": "protected static", "return": "ThreadPoolExecutor", "signature": "ThreadPoolExecutor getWatchEventsLoopThreadPool()", "full_signature": "protected static ThreadPoolExecutor getWatchEventsLoopThreadPool()", "class_method_signature": "FileSystemDynamicConfiguration.getWatchEventsLoopThreadPool()", "testcase": false, "constructor": false}, {"identifier": "getWorkersThreadPool", "parameters": "()", "modifiers": "protected", "return": "ThreadPoolExecutor", "signature": "ThreadPoolExecutor getWorkersThreadPool()", "full_signature": "protected ThreadPoolExecutor getWorkersThreadPool()", "class_method_signature": "FileSystemDynamicConfiguration.getWorkersThreadPool()", "testcase": false, "constructor": false}, {"identifier": "executeMutually", "parameters": "(final Object mutex, Callable<V> callable)", "modifiers": "private", "return": "V", "signature": "V executeMutually(final Object mutex, Callable<V> callable)", "full_signature": "private V executeMutually(final Object mutex, Callable<V> callable)", "class_method_signature": "FileSystemDynamicConfiguration.executeMutually(final Object mutex, Callable<V> callable)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(T... values)", "modifiers": "private static", "return": "T[]", "signature": "T[] of(T... values)", "full_signature": "private static T[] of(T... values)", "class_method_signature": "FileSystemDynamicConfiguration.of(T... values)", "testcase": false, "constructor": false}, {"identifier": "initDelay", "parameters": "(WatchEvent.Modifier[] modifiers)", "modifiers": "private static", "return": "Integer", "signature": "Integer initDelay(WatchEvent.Modifier[] modifiers)", "full_signature": "private static Integer initDelay(WatchEvent.Modifier[] modifiers)", "class_method_signature": "FileSystemDynamicConfiguration.initDelay(WatchEvent.Modifier[] modifiers)", "testcase": false, "constructor": false}, {"identifier": "initWatchEventModifiers", "parameters": "()", "modifiers": "private static", "return": "WatchEvent.Modifier[]", "signature": "WatchEvent.Modifier[] initWatchEventModifiers()", "full_signature": "private static WatchEvent.Modifier[] initWatchEventModifiers()", "class_method_signature": "FileSystemDynamicConfiguration.initWatchEventModifiers()", "testcase": false, "constructor": false}, {"identifier": "detectPoolingBasedWatchService", "parameters": "(Optional<WatchService> watchService)", "modifiers": "private static", "return": "boolean", "signature": "boolean detectPoolingBasedWatchService(Optional<WatchService> watchService)", "full_signature": "private static boolean detectPoolingBasedWatchService(Optional<WatchService> watchService)", "class_method_signature": "FileSystemDynamicConfiguration.detectPoolingBasedWatchService(Optional<WatchService> watchService)", "testcase": false, "constructor": false}, {"identifier": "newWatchService", "parameters": "()", "modifiers": "private static", "return": "Optional<WatchService>", "signature": "Optional<WatchService> newWatchService()", "full_signature": "private static Optional<WatchService> newWatchService()", "class_method_signature": "FileSystemDynamicConfiguration.newWatchService()", "testcase": false, "constructor": false}, {"identifier": "initDirectory", "parameters": "(URL url)", "modifiers": "protected static", "return": "File", "signature": "File initDirectory(URL url)", "full_signature": "protected static File initDirectory(URL url)", "class_method_signature": "FileSystemDynamicConfiguration.initDirectory(URL url)", "testcase": false, "constructor": false}, {"identifier": "getEncoding", "parameters": "(URL url)", "modifiers": "protected static", "return": "String", "signature": "String getEncoding(URL url)", "full_signature": "protected static String getEncoding(URL url)", "class_method_signature": "FileSystemDynamicConfiguration.getEncoding(URL url)", "testcase": false, "constructor": false}, {"identifier": "newWatchEventsLoopThreadPool", "parameters": "()", "modifiers": "private static", "return": "ThreadPoolExecutor", "signature": "ThreadPoolExecutor newWatchEventsLoopThreadPool()", "full_signature": "private static ThreadPoolExecutor newWatchEventsLoopThreadPool()", "class_method_signature": "FileSystemDynamicConfiguration.newWatchEventsLoopThreadPool()", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/file/FileSystemDynamicConfiguration.java"}, "focal_method": {"identifier": "getRootDirectory", "parameters": "()", "modifiers": "public", "return": "File", "body": "public File getRootDirectory() {\n        return rootDirectory;\n    }", "signature": "File getRootDirectory()", "full_signature": "public File getRootDirectory()", "class_method_signature": "FileSystemDynamicConfiguration.getRootDirectory()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}