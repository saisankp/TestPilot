{"test_class": {"identifier": "RuleDatabaseItemUpdateRunnableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Context mockContext;", "modifier": "private", "type": "Context", "declarator": "mockContext", "var_name": "mockContext"}, {"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private SingleWriterMultipleReaderFile singleWriterMultipleReaderFile;", "modifier": "private", "type": "SingleWriterMultipleReaderFile", "declarator": "singleWriterMultipleReaderFile", "var_name": "singleWriterMultipleReaderFile"}, {"original_string": "private HttpURLConnection connection;", "modifier": "private", "type": "HttpURLConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private CountingAnswer finishAnswer;", "modifier": "private", "type": "CountingAnswer", "declarator": "finishAnswer", "var_name": "finishAnswer"}, {"original_string": "private CountingAnswer failAnswer;", "modifier": "private", "type": "CountingAnswer", "declarator": "failAnswer", "var_name": "failAnswer"}, {"original_string": "private URL url;", "modifier": "private", "type": "URL", "declarator": "url", "var_name": "url"}, {"original_string": "private RuleDatabaseUpdateTask realTask;", "modifier": "private", "type": "RuleDatabaseUpdateTask", "declarator": "realTask", "var_name": "realTask"}, {"original_string": "private RuleDatabaseUpdateTask mockTask;", "modifier": "private", "type": "RuleDatabaseUpdateTask", "declarator": "mockTask", "var_name": "mockTask"}, {"original_string": "private ContentResolver mockResolver;", "modifier": "private", "type": "ContentResolver", "declarator": "mockResolver", "var_name": "mockResolver"}], "file": "app/src/test/java/org/jak_linux/dns66/db/RuleDatabaseItemUpdateRunnableTest.java"}, "test_case": {"identifier": "testDownloadFile_lastModifiedFail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDownloadFile_lastModifiedFail() throws Exception {\n        CountingAnswer debugAnswer = new CountingAnswer(null);\n        CountingAnswer setLastModifiedAnswerTrue = new CountingAnswer(true);\n        CountingAnswer setLastModifiedAnswerFalse = new CountingAnswer(false);\n        RuleDatabaseItemUpdateRunnable itemUpdateRunnable = new RuleDatabaseItemUpdateRunnable(realTask, mockContext, mock(Configuration.Item.class));\n        FileOutputStream fos = mock(FileOutputStream.class);\n        InputStream is = mock(InputStream.class);\n\n        when(connection.getInputStream()).thenReturn(is);\n        when(singleWriterMultipleReaderFile.startWrite()).thenReturn(fos);\n        when(is.read(any(byte[].class))).thenReturn(-1);\n        when(Log.d(anyString(), anyString())).then(debugAnswer);\n\n        // Scenario 0: Connection has no last modified & we cannot set (0, 0)\n        when(connection.getLastModified()).thenReturn(0L);\n        when(file.setLastModified(anyLong())).then(setLastModifiedAnswerFalse);\n\n        itemUpdateRunnable.downloadFile(file, singleWriterMultipleReaderFile, connection);\n\n        assertEquals(0, failAnswer.numCalls);\n        assertEquals(1, debugAnswer.numCalls);\n        assertEquals(1, finishAnswer.numCalls);\n\n        // Scenario 1: Connect has no last modified & we can set (0, 1);\n        when(connection.getLastModified()).thenReturn(0L);\n        when(file.setLastModified(anyLong())).then(setLastModifiedAnswerTrue);\n\n        itemUpdateRunnable.downloadFile(file, singleWriterMultipleReaderFile, connection);\n\n        assertEquals(0, failAnswer.numCalls);\n        assertEquals(2, debugAnswer.numCalls);\n        assertEquals(2, finishAnswer.numCalls);\n\n        // Scenario 2: Connect has last modified & we cannot set (1, 0);\n        when(connection.getLastModified()).thenReturn(1L);\n        when(file.setLastModified(anyLong())).then(setLastModifiedAnswerFalse);\n\n        itemUpdateRunnable.downloadFile(file, singleWriterMultipleReaderFile, connection);\n\n        assertEquals(0, failAnswer.numCalls);\n        assertEquals(3, debugAnswer.numCalls);\n        assertEquals(3, finishAnswer.numCalls);\n\n        // Scenario 4: Connect has last modified & we cannot set (1, 1);\n        when(connection.getLastModified()).thenReturn(1L);\n        when(file.setLastModified(anyLong())).then(setLastModifiedAnswerTrue);\n\n        itemUpdateRunnable.downloadFile(file, singleWriterMultipleReaderFile, connection);\n\n        assertEquals(0, failAnswer.numCalls);\n        assertEquals(3, debugAnswer.numCalls); // as before\n        assertEquals(4, finishAnswer.numCalls);\n    }", "signature": "void testDownloadFile_lastModifiedFail()", "full_signature": "@Test public void testDownloadFile_lastModifiedFail()", "class_method_signature": "RuleDatabaseItemUpdateRunnableTest.testDownloadFile_lastModifiedFail()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "getInputStream", "thenReturn", "when", "startWrite", "thenReturn", "when", "read", "any", "then", "when", "d", "anyString", "anyString", "thenReturn", "when", "getLastModified", "then", "when", "setLastModified", "anyLong", "downloadFile", "assertEquals", "assertEquals", "assertEquals", "thenReturn", "when", "getLastModified", "then", "when", "setLastModified", "anyLong", "downloadFile", "assertEquals", "assertEquals", "assertEquals", "thenReturn", "when", "getLastModified", "then", "when", "setLastModified", "anyLong", "downloadFile", "assertEquals", "assertEquals", "assertEquals", "thenReturn", "when", "getLastModified", "then", "when", "setLastModified", "anyLong", "downloadFile", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "RuleDatabaseItemUpdateRunnable", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final int CONNECT_TIMEOUT_MILLIS = 30000;", "modifier": "private static final", "type": "int", "declarator": "CONNECT_TIMEOUT_MILLIS = 30000", "var_name": "CONNECT_TIMEOUT_MILLIS"}, {"original_string": "private static final int READ_TIMEOUT_MILLIS = 10000;", "modifier": "private static final", "type": "int", "declarator": "READ_TIMEOUT_MILLIS = 10000", "var_name": "READ_TIMEOUT_MILLIS"}, {"original_string": "private static final String TAG = \"RuleDbItemUpdate\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"RuleDbItemUpdate\"", "var_name": "TAG"}, {"original_string": "RuleDatabaseUpdateTask parentTask;", "modifier": "", "type": "RuleDatabaseUpdateTask", "declarator": "parentTask", "var_name": "parentTask"}, {"original_string": "Configuration.Item item;", "modifier": "", "type": "Configuration.Item", "declarator": "item", "var_name": "item"}, {"original_string": "Context context;", "modifier": "", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private URL url;", "modifier": "private", "type": "URL", "declarator": "url", "var_name": "url"}, {"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}], "methods": [{"identifier": "RuleDatabaseItemUpdateRunnable", "parameters": "(@NonNull RuleDatabaseUpdateTask parentTask, @NonNull Context context, @NonNull Configuration.Item item)", "modifiers": "", "return": "", "signature": " RuleDatabaseItemUpdateRunnable(@NonNull RuleDatabaseUpdateTask parentTask, @NonNull Context context, @NonNull Configuration.Item item)", "full_signature": "  RuleDatabaseItemUpdateRunnable(@NonNull RuleDatabaseUpdateTask parentTask, @NonNull Context context, @NonNull Configuration.Item item)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.RuleDatabaseItemUpdateRunnable(@NonNull RuleDatabaseUpdateTask parentTask, @NonNull Context context, @NonNull Configuration.Item item)", "testcase": false, "constructor": true}, {"identifier": "shouldDownload", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean shouldDownload()", "full_signature": " boolean shouldDownload()", "class_method_signature": "RuleDatabaseItemUpdateRunnable.shouldDownload()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "RuleDatabaseItemUpdateRunnable.run()", "testcase": false, "constructor": false}, {"identifier": "parseUri", "parameters": "(String uri)", "modifiers": "", "return": "Uri", "signature": "Uri parseUri(String uri)", "full_signature": " Uri parseUri(String uri)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.parseUri(String uri)", "testcase": false, "constructor": false}, {"identifier": "getHttpURLConnection", "parameters": "(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, URL url)", "modifiers": "@NonNull", "return": "HttpURLConnection", "signature": "HttpURLConnection getHttpURLConnection(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, URL url)", "full_signature": "@NonNull HttpURLConnection getHttpURLConnection(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, URL url)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.getHttpURLConnection(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, URL url)", "testcase": false, "constructor": false}, {"identifier": "internalOpenHttpConnection", "parameters": "(URL url)", "modifiers": "", "return": "HttpURLConnection", "signature": "HttpURLConnection internalOpenHttpConnection(URL url)", "full_signature": " HttpURLConnection internalOpenHttpConnection(URL url)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.internalOpenHttpConnection(URL url)", "testcase": false, "constructor": false}, {"identifier": "validateResponse", "parameters": "(HttpURLConnection connection)", "modifiers": "", "return": "boolean", "signature": "boolean validateResponse(HttpURLConnection connection)", "full_signature": " boolean validateResponse(HttpURLConnection connection)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.validateResponse(HttpURLConnection connection)", "testcase": false, "constructor": false}, {"identifier": "downloadFile", "parameters": "(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "modifiers": "", "return": "void", "signature": "void downloadFile(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "full_signature": " void downloadFile(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.downloadFile(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "testcase": false, "constructor": false}, {"identifier": "copyStream", "parameters": "(InputStream inStream, OutputStream outStream)", "modifiers": "", "return": "void", "signature": "void copyStream(InputStream inStream, OutputStream outStream)", "full_signature": " void copyStream(InputStream inStream, OutputStream outStream)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.copyStream(InputStream inStream, OutputStream outStream)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/jak_linux/dns66/db/RuleDatabaseItemUpdateRunnable.java"}, "focal_method": {"identifier": "downloadFile", "parameters": "(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "modifiers": "", "return": "void", "body": "void downloadFile(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection) throws IOException {\n        InputStream inStream = connection.getInputStream();\n        FileOutputStream outStream = singleWriterMultipleReaderFile.startWrite();\n\n        try {\n            copyStream(inStream, outStream);\n\n            singleWriterMultipleReaderFile.finishWrite(outStream);\n            outStream = null;\n            // Write has started, set modification time.\n            if (connection.getLastModified() == 0 || !file.setLastModified(connection.getLastModified())) {\n                Log.d(TAG, \"downloadFile: Could not set last modified\");\n            }\n        } finally {\n            if (outStream != null)\n                singleWriterMultipleReaderFile.failWrite(outStream);\n        }\n    }", "signature": "void downloadFile(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "full_signature": " void downloadFile(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.downloadFile(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "testcase": false, "constructor": false, "invocations": ["getInputStream", "startWrite", "copyStream", "finishWrite", "getLastModified", "setLastModified", "getLastModified", "d", "failWrite"]}, "repository": {"repo_id": 70996010, "url": "https://github.com/julian-klode/dns66", "stars": 1372, "created": "10/15/2016 3:27:17 PM +00:00", "updates": "2020-01-26T10:51:30+00:00", "fork": "False", "license": "licensed"}}