{"test_class": {"identifier": "HBaseNotificationStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Charset CHARSET = StandardCharsets.UTF_8;", "modifier": "private static final", "type": "Charset", "declarator": "CHARSET = StandardCharsets.UTF_8", "var_name": "CHARSET"}, {"original_string": "HBaseNotificationStore notificationStore;", "modifier": "", "type": "HBaseNotificationStore", "declarator": "notificationStore", "var_name": "notificationStore"}, {"original_string": "Notification notification;", "modifier": "", "type": "Notification", "declarator": "notification", "var_name": "notification"}, {"original_string": "@Mocked\n    Connection mockConnection;", "modifier": "@Mocked", "type": "Connection", "declarator": "mockConnection", "var_name": "mockConnection"}, {"original_string": "@Mocked\n    Table mockHTable;", "modifier": "@Mocked", "type": "Table", "declarator": "mockHTable", "var_name": "mockHTable"}, {"original_string": "@Mocked\n    Result mockResult;", "modifier": "@Mocked", "type": "Result", "declarator": "mockResult", "var_name": "mockResult"}, {"original_string": "@Mocked\n    Criteria<Notification> mockCriteria;", "modifier": "@Mocked", "type": "Criteria<Notification>", "declarator": "mockCriteria", "var_name": "mockCriteria"}, {"original_string": "@Mocked\n    ResultScanner mockResultScanner;", "modifier": "@Mocked", "type": "ResultScanner", "declarator": "mockResultScanner", "var_name": "mockResultScanner"}], "file": "streams/notification/src/test/java/com/hortonworks/streamline/streams/notification/store/hbase/HBaseNotificationStoreTest.java"}, "test_case": {"identifier": "testGetNotification", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetNotification() throws Exception {\n        final Map<byte[], byte[]> tsMap = new TreeMap<>(new Bytes.ByteArrayComparator());\n        tsMap.put(\"1444042473518\".getBytes(), \"1\".getBytes());\n        new Expectations() {\n            {\n                mockResult.getRow(); times = 1;\n                result = \"rowid\".getBytes(CHARSET);\n                mockResult.getValue(\"s\".getBytes(), \"qs\".getBytes()); times = 1;\n                result = \"DELIVERED\".getBytes();\n                mockResult.getFamilyMap(\"ts\".getBytes()); times = 1;\n                result = tsMap;\n            }\n        };\n\n        Notification notification = notificationStore.getNotification(\"n123\");\n        //System.out.println(notification);\n        assertEquals(\"rowid\", notification.getId());\n        assertEquals(Notification.Status.DELIVERED, notification.getStatus());\n        assertEquals(1444042473518L, notification.getTs());\n        new Verifications() {\n            {\n                Get get;\n                mockHTable.get(get = withCapture()); times = 1;\n                //System.out.println(\"get = \" + get);\n            }\n        };\n    }", "signature": "void testGetNotification()", "full_signature": "@Test public void testGetNotification()", "class_method_signature": "HBaseNotificationStoreTest.testGetNotification()", "testcase": true, "constructor": false, "invocations": ["put", "getBytes", "getBytes", "getRow", "getBytes", "getValue", "getBytes", "getBytes", "getBytes", "getFamilyMap", "getBytes", "getNotification", "assertEquals", "getId", "assertEquals", "getStatus", "assertEquals", "getTs", "get", "withCapture"]}, "focal_class": {"identifier": "HBaseNotificationStore", "superclass": "", "interfaces": "implements NotificationStore", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(HBaseNotificationStore.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(HBaseNotificationStore.class)", "var_name": "LOG"}, {"original_string": "private Configuration configuration;", "modifier": "private", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private Connection connection;", "modifier": "private", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private final Map<String, ThreadLocal<Table>> tables = new HashMap<>();", "modifier": "private final", "type": "Map<String, ThreadLocal<Table>>", "declarator": "tables = new HashMap<>()", "var_name": "tables"}, {"original_string": "private NotificationMapper notificationMapper;", "modifier": "private", "type": "NotificationMapper", "declarator": "notificationMapper", "var_name": "notificationMapper"}, {"original_string": "private StreamlineEventMapper eventMapper;", "modifier": "private", "type": "StreamlineEventMapper", "declarator": "eventMapper", "var_name": "eventMapper"}, {"original_string": "private final List<NotificationIndexMapper> notificationIndexMappers = new ArrayList<>();", "modifier": "private final", "type": "List<NotificationIndexMapper>", "declarator": "notificationIndexMappers = new ArrayList<>()", "var_name": "notificationIndexMappers"}, {"original_string": "private HBaseScanConfigBuilder hBaseScanConfigBuilder;", "modifier": "private", "type": "HBaseScanConfigBuilder", "declarator": "hBaseScanConfigBuilder", "var_name": "hBaseScanConfigBuilder"}], "methods": [{"identifier": "init", "parameters": "(Map<String, Object> config)", "modifiers": "@Override public", "return": "void", "signature": "void init(Map<String, Object> config)", "full_signature": "@Override public void init(Map<String, Object> config)", "class_method_signature": "HBaseNotificationStore.init(Map<String, Object> config)", "testcase": false, "constructor": false}, {"identifier": "store", "parameters": "(Notification notification)", "modifiers": "@Override public", "return": "void", "signature": "void store(Notification notification)", "full_signature": "@Override public void store(Notification notification)", "class_method_signature": "HBaseNotificationStore.store(Notification notification)", "testcase": false, "constructor": false}, {"identifier": "store", "parameters": "(List<TableMutation> tableMutations)", "modifiers": "private", "return": "void", "signature": "void store(List<TableMutation> tableMutations)", "full_signature": "private void store(List<TableMutation> tableMutations)", "class_method_signature": "HBaseNotificationStore.store(List<TableMutation> tableMutations)", "testcase": false, "constructor": false}, {"identifier": "getNotification", "parameters": "(String notificationId)", "modifiers": "@Override public", "return": "Notification", "signature": "Notification getNotification(String notificationId)", "full_signature": "@Override public Notification getNotification(String notificationId)", "class_method_signature": "HBaseNotificationStore.getNotification(String notificationId)", "testcase": false, "constructor": false}, {"identifier": "getNotifications", "parameters": "(List<String> notificationIds)", "modifiers": "@Override public", "return": "List<Notification>", "signature": "List<Notification> getNotifications(List<String> notificationIds)", "full_signature": "@Override public List<Notification> getNotifications(List<String> notificationIds)", "class_method_signature": "HBaseNotificationStore.getNotifications(List<String> notificationIds)", "testcase": false, "constructor": false}, {"identifier": "getEvent", "parameters": "(String eventId)", "modifiers": "@Override public", "return": "StreamlineEvent", "signature": "StreamlineEvent getEvent(String eventId)", "full_signature": "@Override public StreamlineEvent getEvent(String eventId)", "class_method_signature": "HBaseNotificationStore.getEvent(String eventId)", "testcase": false, "constructor": false}, {"identifier": "getEvents", "parameters": "(List<String> eventIds)", "modifiers": "@Override public", "return": "List<StreamlineEvent>", "signature": "List<StreamlineEvent> getEvents(List<String> eventIds)", "full_signature": "@Override public List<StreamlineEvent> getEvents(List<String> eventIds)", "class_method_signature": "HBaseNotificationStore.getEvents(List<String> eventIds)", "testcase": false, "constructor": false}, {"identifier": "findEntities", "parameters": "(Criteria<T> criteria)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> findEntities(Criteria<T> criteria)", "full_signature": "@Override public List<T> findEntities(Criteria<T> criteria)", "class_method_signature": "HBaseNotificationStore.findEntities(Criteria<T> criteria)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "HBaseNotificationStore.close()", "testcase": false, "constructor": false}, {"identifier": "updateNotificationStatus", "parameters": "(String notificationId, Notification.Status status)", "modifiers": "@Override public", "return": "Notification", "signature": "Notification updateNotificationStatus(String notificationId, Notification.Status status)", "full_signature": "@Override public Notification updateNotificationStatus(String notificationId, Notification.Status status)", "class_method_signature": "HBaseNotificationStore.updateNotificationStatus(String notificationId, Notification.Status status)", "testcase": false, "constructor": false}, {"identifier": "tlHTable", "parameters": "(final String tableName)", "modifiers": "private", "return": "ThreadLocal<Table>", "signature": "ThreadLocal<Table> tlHTable(final String tableName)", "full_signature": "private ThreadLocal<Table> tlHTable(final String tableName)", "class_method_signature": "HBaseNotificationStore.tlHTable(final String tableName)", "testcase": false, "constructor": false}], "file": "streams/notification/src/main/java/com/hortonworks/streamline/streams/notification/store/hbase/HBaseNotificationStore.java"}, "focal_method": {"identifier": "getNotification", "parameters": "(String notificationId)", "modifiers": "@Override public", "return": "Notification", "body": "@Override\n    public Notification getNotification(String notificationId) {\n        try {\n            String tableName = notificationMapper.getTableName();\n            LOG.debug(\"getting notification with notificationId {} from table {}\", notificationId, tableName);\n            Get get = new Get(notificationId.getBytes(StandardCharsets.UTF_8));\n            Result result = tables.get(tableName).get().get(get);\n            return result.isEmpty() ? null : notificationMapper.entity(result);\n        } catch (IOException ex) {\n            throw new NotificationStoreException(\"Error getting notification id: \" + notificationId, ex);\n        }\n    }", "signature": "Notification getNotification(String notificationId)", "full_signature": "@Override public Notification getNotification(String notificationId)", "class_method_signature": "HBaseNotificationStore.getNotification(String notificationId)", "testcase": false, "constructor": false, "invocations": ["getTableName", "debug", "getBytes", "get", "get", "get", "isEmpty", "entity"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}