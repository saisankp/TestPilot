{"test_class": {"identifier": "SequenceGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "das-client/src/test/java/com/ppdai/das/client/delegate/datasync/SequenceGeneratorTest.java"}, "test_case": {"identifier": "testGetSequenceId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSequenceId() throws InterruptedException {\n        ExecutorService es = Executors.newFixedThreadPool(5);\n        ConcurrentHashMap<Long, String> set = new ConcurrentHashMap<>();\n        for (AtomicInteger i = new AtomicInteger(0); i.get() < 1000000; i.incrementAndGet()) {\n            es.submit(() -> {\n                long s1 = SequenceGenerator.getSequenceId(\"A\");\n                set.put(s1, \"\");\n            });\n        }\n        TimeUnit.SECONDS.sleep(5);\n        assertEquals(1000000, set.size());\n    }", "signature": "void testGetSequenceId()", "full_signature": "@Test public void testGetSequenceId()", "class_method_signature": "SequenceGeneratorTest.testGetSequenceId()", "testcase": true, "constructor": false, "invocations": ["newFixedThreadPool", "get", "incrementAndGet", "submit", "getSequenceId", "put", "sleep", "assertEquals", "size"]}, "focal_class": {"identifier": "SequenceGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ConcurrentHashMultiset<String> sequenceIds = ConcurrentHashMultiset.create();", "modifier": "private static final", "type": "ConcurrentHashMultiset<String>", "declarator": "sequenceIds = ConcurrentHashMultiset.create()", "var_name": "sequenceIds"}, {"original_string": "private static final AtomicLong globalSequenceId = new AtomicLong(0);", "modifier": "private static final", "type": "AtomicLong", "declarator": "globalSequenceId = new AtomicLong(0)", "var_name": "globalSequenceId"}], "methods": [{"identifier": "getGlobalSequenceId", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long getGlobalSequenceId()", "full_signature": "public static long getGlobalSequenceId()", "class_method_signature": "SequenceGenerator.getGlobalSequenceId()", "testcase": false, "constructor": false}, {"identifier": "getSequenceId", "parameters": "(String logicDBName)", "modifiers": "public static", "return": "long", "signature": "long getSequenceId(String logicDBName)", "full_signature": "public static long getSequenceId(String logicDBName)", "class_method_signature": "SequenceGenerator.getSequenceId(String logicDBName)", "testcase": false, "constructor": false}], "file": "das-client/src/main/java/com/ppdai/das/client/delegate/datasync/SequenceGenerator.java"}, "focal_method": {"identifier": "getSequenceId", "parameters": "(String logicDBName)", "modifiers": "public static", "return": "long", "body": "public static long getSequenceId(String logicDBName){\n        return sequenceIds.add(logicDBName, 1);\n    }", "signature": "long getSequenceId(String logicDBName)", "full_signature": "public static long getSequenceId(String logicDBName)", "class_method_signature": "SequenceGenerator.getSequenceId(String logicDBName)", "testcase": false, "constructor": false, "invocations": ["add"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}