{"test_class": {"identifier": "OkHttpClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_REQUEST_BODY = \"Test Request Body\";", "modifier": "private static final", "type": "String", "declarator": "TEST_REQUEST_BODY = \"Test Request Body\"", "var_name": "TEST_REQUEST_BODY"}, {"original_string": "private static final String TEST_RESPONSE_BODY = \"Test Response Body\";", "modifier": "private static final", "type": "String", "declarator": "TEST_RESPONSE_BODY = \"Test Response Body\"", "var_name": "TEST_RESPONSE_BODY"}, {"original_string": "private MockWebServer server;", "modifier": "private", "type": "MockWebServer", "declarator": "server", "var_name": "server"}], "file": "titus-common/src/test/java/com/netflix/titus/common/network/http/internal/okhttp/OkHttpClientTest.java"}, "test_case": {"identifier": "testGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGet() throws Exception {\n        MockResponse mockResponse = new MockResponse()\n                .setBody(TEST_RESPONSE_BODY)\n                .setResponseCode(StatusCode.OK.getCode());\n        server.enqueue(mockResponse);\n\n        HttpClient client = OkHttpClient.newBuilder()\n                .build();\n\n        Request request = new Request.Builder()\n                .url(server.url(\"/\").toString())\n                .get()\n                .build();\n\n        Response response = client.execute(request);\n        Assertions.assertThat(response.isSuccessful()).isTrue();\n\n        InputStream inputStream = response.getBody().get(InputStream.class);\n        String actualResponseBody = CharStreams.toString(new InputStreamReader(inputStream, Charsets.UTF_8));\n        Assertions.assertThat(actualResponseBody).isEqualTo(TEST_RESPONSE_BODY);\n\n        RecordedRequest recordedRequest = server.takeRequest(1, TimeUnit.MILLISECONDS);\n        Assertions.assertThat(recordedRequest).isNotNull();\n        Assertions.assertThat(recordedRequest.getBodySize()).isLessThanOrEqualTo(0);\n    }", "signature": "void testGet()", "full_signature": "@Test public void testGet()", "class_method_signature": "OkHttpClientTest.testGet()", "testcase": true, "constructor": false, "invocations": ["setResponseCode", "setBody", "getCode", "enqueue", "build", "newBuilder", "build", "get", "url", "toString", "url", "execute", "isTrue", "assertThat", "isSuccessful", "get", "getBody", "toString", "isEqualTo", "assertThat", "takeRequest", "isNotNull", "assertThat", "isLessThanOrEqualTo", "assertThat", "getBodySize"]}, "focal_class": {"identifier": "OkHttpClient", "superclass": "", "interfaces": "implements HttpClient", "fields": [{"original_string": "private static final String EMPTY_ENDPOINT = \"http://<empty>\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY_ENDPOINT = \"http://<empty>\"", "var_name": "EMPTY_ENDPOINT"}, {"original_string": "private static final int DEFAULT_CONNECT_TIMEOUT = 5_000;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_CONNECT_TIMEOUT = 5_000", "var_name": "DEFAULT_CONNECT_TIMEOUT"}, {"original_string": "private static final int DEFAULT_READ_TIMEOUT = 5_000;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_READ_TIMEOUT = 5_000", "var_name": "DEFAULT_READ_TIMEOUT"}, {"original_string": "private static final int DEFAULT_WRITE_TIMEOUT = 5_000;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_WRITE_TIMEOUT = 5_000", "var_name": "DEFAULT_WRITE_TIMEOUT"}, {"original_string": "private final long connectTimeout;", "modifier": "private final", "type": "long", "declarator": "connectTimeout", "var_name": "connectTimeout"}, {"original_string": "private final long readTimeout;", "modifier": "private final", "type": "long", "declarator": "readTimeout", "var_name": "readTimeout"}, {"original_string": "private final long writeTimeout;", "modifier": "private final", "type": "long", "declarator": "writeTimeout", "var_name": "writeTimeout"}, {"original_string": "private final SSLContext sslContext;", "modifier": "private final", "type": "SSLContext", "declarator": "sslContext", "var_name": "sslContext"}, {"original_string": "private final X509TrustManager trustManager;", "modifier": "private final", "type": "X509TrustManager", "declarator": "trustManager", "var_name": "trustManager"}, {"original_string": "private final List<Interceptor> interceptors;", "modifier": "private final", "type": "List<Interceptor>", "declarator": "interceptors", "var_name": "interceptors"}, {"original_string": "private okhttp3.OkHttpClient client;", "modifier": "private", "type": "okhttp3.OkHttpClient", "declarator": "client", "var_name": "client"}], "methods": [{"identifier": "OkHttpClient", "parameters": "(Builder builder)", "modifiers": "", "return": "", "signature": " OkHttpClient(Builder builder)", "full_signature": "  OkHttpClient(Builder builder)", "class_method_signature": "OkHttpClient.OkHttpClient(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(Request request)", "modifiers": "@Override public", "return": "Response", "signature": "Response execute(Request request)", "full_signature": "@Override public Response execute(Request request)", "class_method_signature": "OkHttpClient.execute(Request request)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String url)", "modifiers": "@Override public", "return": "Response", "signature": "Response get(String url)", "full_signature": "@Override public Response get(String url)", "class_method_signature": "OkHttpClient.get(String url)", "testcase": false, "constructor": false}, {"identifier": "head", "parameters": "(String url)", "modifiers": "@Override public", "return": "Response", "signature": "Response head(String url)", "full_signature": "@Override public Response head(String url)", "class_method_signature": "OkHttpClient.head(String url)", "testcase": false, "constructor": false}, {"identifier": "post", "parameters": "(String url, Object entity)", "modifiers": "@Override public", "return": "Response", "signature": "Response post(String url, Object entity)", "full_signature": "@Override public Response post(String url, Object entity)", "class_method_signature": "OkHttpClient.post(String url, Object entity)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String url)", "modifiers": "@Override public", "return": "Response", "signature": "Response delete(String url)", "full_signature": "@Override public Response delete(String url)", "class_method_signature": "OkHttpClient.delete(String url)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String url, Object entity)", "modifiers": "@Override public", "return": "Response", "signature": "Response delete(String url, Object entity)", "full_signature": "@Override public Response delete(String url, Object entity)", "class_method_signature": "OkHttpClient.delete(String url, Object entity)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String url, Object entity)", "modifiers": "@Override public", "return": "Response", "signature": "Response put(String url, Object entity)", "full_signature": "@Override public Response put(String url, Object entity)", "class_method_signature": "OkHttpClient.put(String url, Object entity)", "testcase": false, "constructor": false}, {"identifier": "patch", "parameters": "(String url, Object entity)", "modifiers": "@Override public", "return": "Response", "signature": "Response patch(String url, Object entity)", "full_signature": "@Override public Response patch(String url, Object entity)", "class_method_signature": "OkHttpClient.patch(String url, Object entity)", "testcase": false, "constructor": false}, {"identifier": "sslContext", "parameters": "()", "modifiers": "public", "return": "SSLContext", "signature": "SSLContext sslContext()", "full_signature": "public SSLContext sslContext()", "class_method_signature": "OkHttpClient.sslContext()", "testcase": false, "constructor": false}, {"identifier": "trustManager", "parameters": "()", "modifiers": "public", "return": "X509TrustManager", "signature": "X509TrustManager trustManager()", "full_signature": "public X509TrustManager trustManager()", "class_method_signature": "OkHttpClient.trustManager()", "testcase": false, "constructor": false}, {"identifier": "interceptors", "parameters": "()", "modifiers": "public", "return": "List<Interceptor>", "signature": "List<Interceptor> interceptors()", "full_signature": "public List<Interceptor> interceptors()", "class_method_signature": "OkHttpClient.interceptors()", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder()", "full_signature": "public static Builder newBuilder()", "class_method_signature": "OkHttpClient.newBuilder()", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "(OkHttpClient okHttpClient)", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder(OkHttpClient okHttpClient)", "full_signature": "public static Builder newBuilder(OkHttpClient okHttpClient)", "class_method_signature": "OkHttpClient.newBuilder(OkHttpClient okHttpClient)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/network/http/internal/okhttp/OkHttpClient.java"}, "focal_method": {"identifier": "get", "parameters": "(String url)", "modifiers": "@Override public", "return": "Response", "body": "@Override\n    public Response get(String url) {\n        Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .build();\n        return execute(request);\n    }", "signature": "Response get(String url)", "full_signature": "@Override public Response get(String url)", "class_method_signature": "OkHttpClient.get(String url)", "testcase": false, "constructor": false, "invocations": ["build", "get", "url", "execute"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}