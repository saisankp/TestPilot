{"test_class": {"identifier": "AutoLockTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "AutoLock lock = spy(new AutoLock());", "modifier": "", "type": "AutoLock", "declarator": "lock = spy(new AutoLock())", "var_name": "lock"}], "file": "commons/src/test/java/com/karuslabs/commons/util/concurrent/locks/AutoLockTest.java"}, "test_case": {"identifier": "close", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void close() {\n        try (var mutex = lock.hold()) {}\n        \n        assertEquals(0, lock.getHoldCount());\n    }", "signature": "void close()", "full_signature": "@Test void close()", "class_method_signature": "AutoLockTest.close()", "testcase": true, "constructor": false, "invocations": ["hold", "assertEquals", "getHoldCount"]}, "focal_class": {"identifier": "AutoLock", "superclass": "extends ReentrantLock", "interfaces": "implements Holdable", "fields": [{"original_string": "private final Mutex mutex;", "modifier": "private final", "type": "Mutex", "declarator": "mutex", "var_name": "mutex"}], "methods": [{"identifier": "AutoLock", "parameters": "()", "modifiers": "public", "return": "", "signature": " AutoLock()", "full_signature": "public  AutoLock()", "class_method_signature": "AutoLock.AutoLock()", "testcase": false, "constructor": true}, {"identifier": "AutoLock", "parameters": "(boolean fair)", "modifiers": "public", "return": "", "signature": " AutoLock(boolean fair)", "full_signature": "public  AutoLock(boolean fair)", "class_method_signature": "AutoLock.AutoLock(boolean fair)", "testcase": false, "constructor": true}, {"identifier": "hold", "parameters": "()", "modifiers": "@Override public", "return": "Mutex", "signature": "Mutex hold()", "full_signature": "@Override public Mutex hold()", "class_method_signature": "AutoLock.hold()", "testcase": false, "constructor": false}, {"identifier": "holdInterruptibly", "parameters": "()", "modifiers": "@Override public", "return": "Mutex", "signature": "Mutex holdInterruptibly()", "full_signature": "@Override public Mutex holdInterruptibly()", "class_method_signature": "AutoLock.holdInterruptibly()", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/util/concurrent/locks/AutoLock.java"}, "focal_method": {"identifier": "hold", "parameters": "()", "modifiers": "@Override public", "return": "Mutex", "body": "@Override\n    public Mutex hold() {\n        lock();\n        return mutex;\n    }", "signature": "Mutex hold()", "full_signature": "@Override public Mutex hold()", "class_method_signature": "AutoLock.hold()", "testcase": false, "constructor": false, "invocations": ["lock"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}