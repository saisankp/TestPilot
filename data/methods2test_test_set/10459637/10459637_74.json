{"test_class": {"identifier": "VirtualNetworkFilterTest", "superclass": "extends FloodlightTestCase", "interfaces": "", "fields": [{"original_string": "protected VirtualNetworkFilter vns;", "modifier": "protected", "type": "VirtualNetworkFilter", "declarator": "vns", "var_name": "vns"}, {"original_string": "protected MockDeviceManager deviceService;", "modifier": "protected", "type": "MockDeviceManager", "declarator": "deviceService", "var_name": "deviceService"}, {"original_string": "protected static String guid1 = \"guid1\";", "modifier": "protected static", "type": "String", "declarator": "guid1 = \"guid1\"", "var_name": "guid1"}, {"original_string": "protected static String net1 = \"net1\";", "modifier": "protected static", "type": "String", "declarator": "net1 = \"net1\"", "var_name": "net1"}, {"original_string": "protected static String gw1 = \"1.1.1.1\";", "modifier": "protected static", "type": "String", "declarator": "gw1 = \"1.1.1.1\"", "var_name": "gw1"}, {"original_string": "protected static String guid2 = \"guid2\";", "modifier": "protected static", "type": "String", "declarator": "guid2 = \"guid2\"", "var_name": "guid2"}, {"original_string": "protected static String net2 = \"net2\";", "modifier": "protected static", "type": "String", "declarator": "net2 = \"net2\"", "var_name": "net2"}, {"original_string": "protected static String guid3 = \"guid3\";", "modifier": "protected static", "type": "String", "declarator": "guid3 = \"guid3\"", "var_name": "guid3"}, {"original_string": "protected static String net3 = \"net3\";", "modifier": "protected static", "type": "String", "declarator": "net3 = \"net3\"", "var_name": "net3"}, {"original_string": "protected static String gw2 = \"2.2.2.2\";", "modifier": "protected static", "type": "String", "declarator": "gw2 = \"2.2.2.2\"", "var_name": "gw2"}, {"original_string": "protected static MACAddress mac1 = \n            new MACAddress(Ethernet.toMACAddress(\"00:11:22:33:44:55\"));", "modifier": "protected static", "type": "MACAddress", "declarator": "mac1 = \n            new MACAddress(Ethernet.toMACAddress(\"00:11:22:33:44:55\"))", "var_name": "mac1"}, {"original_string": "protected static MACAddress mac2 = \n            new MACAddress(Ethernet.toMACAddress(\"00:11:22:33:44:66\"));", "modifier": "protected static", "type": "MACAddress", "declarator": "mac2 = \n            new MACAddress(Ethernet.toMACAddress(\"00:11:22:33:44:66\"))", "var_name": "mac2"}, {"original_string": "protected static MACAddress mac3 = \n            new MACAddress(Ethernet.toMACAddress(\"00:11:22:33:44:77\"));", "modifier": "protected static", "type": "MACAddress", "declarator": "mac3 = \n            new MACAddress(Ethernet.toMACAddress(\"00:11:22:33:44:77\"))", "var_name": "mac3"}, {"original_string": "protected static MACAddress mac4 = \n            new MACAddress(Ethernet.toMACAddress(\"00:11:22:33:44:88\"));", "modifier": "protected static", "type": "MACAddress", "declarator": "mac4 = \n            new MACAddress(Ethernet.toMACAddress(\"00:11:22:33:44:88\"))", "var_name": "mac4"}, {"original_string": "protected static String hostPort1 = \"port1\";", "modifier": "protected static", "type": "String", "declarator": "hostPort1 = \"port1\"", "var_name": "hostPort1"}, {"original_string": "protected static String hostPort2 = \"port2\";", "modifier": "protected static", "type": "String", "declarator": "hostPort2 = \"port2\"", "var_name": "hostPort2"}, {"original_string": "protected static String hostPort3 = \"port3\";", "modifier": "protected static", "type": "String", "declarator": "hostPort3 = \"port3\"", "var_name": "hostPort3"}, {"original_string": "protected static String hostPort4 = \"port4\";", "modifier": "protected static", "type": "String", "declarator": "hostPort4 = \"port4\"", "var_name": "hostPort4"}, {"original_string": "protected IOFSwitch sw1;", "modifier": "protected", "type": "IOFSwitch", "declarator": "sw1", "var_name": "sw1"}, {"original_string": "protected FloodlightContext cntx;", "modifier": "protected", "type": "FloodlightContext", "declarator": "cntx", "var_name": "cntx"}, {"original_string": "protected OFPacketIn mac1ToMac2PacketIn;", "modifier": "protected", "type": "OFPacketIn", "declarator": "mac1ToMac2PacketIn", "var_name": "mac1ToMac2PacketIn"}, {"original_string": "protected IPacket mac1ToMac2PacketIntestPacket;", "modifier": "protected", "type": "IPacket", "declarator": "mac1ToMac2PacketIntestPacket", "var_name": "mac1ToMac2PacketIntestPacket"}, {"original_string": "protected byte[] mac1ToMac2PacketIntestPacketSerialized;", "modifier": "protected", "type": "byte[]", "declarator": "mac1ToMac2PacketIntestPacketSerialized", "var_name": "mac1ToMac2PacketIntestPacketSerialized"}, {"original_string": "protected OFPacketIn mac1ToMac4PacketIn;", "modifier": "protected", "type": "OFPacketIn", "declarator": "mac1ToMac4PacketIn", "var_name": "mac1ToMac4PacketIn"}, {"original_string": "protected IPacket mac1ToMac4PacketIntestPacket;", "modifier": "protected", "type": "IPacket", "declarator": "mac1ToMac4PacketIntestPacket", "var_name": "mac1ToMac4PacketIntestPacket"}, {"original_string": "protected byte[] mac1ToMac4PacketIntestPacketSerialized;", "modifier": "protected", "type": "byte[]", "declarator": "mac1ToMac4PacketIntestPacketSerialized", "var_name": "mac1ToMac4PacketIntestPacketSerialized"}, {"original_string": "protected OFPacketIn mac1ToGwPacketIn;", "modifier": "protected", "type": "OFPacketIn", "declarator": "mac1ToGwPacketIn", "var_name": "mac1ToGwPacketIn"}, {"original_string": "protected IPacket mac1ToGwPacketIntestPacket;", "modifier": "protected", "type": "IPacket", "declarator": "mac1ToGwPacketIntestPacket", "var_name": "mac1ToGwPacketIntestPacket"}, {"original_string": "protected byte[] mac1ToGwPacketIntestPacketSerialized;", "modifier": "protected", "type": "byte[]", "declarator": "mac1ToGwPacketIntestPacketSerialized", "var_name": "mac1ToGwPacketIntestPacketSerialized"}, {"original_string": "protected OFPacketIn packetInDHCPDiscoveryRequest;", "modifier": "protected", "type": "OFPacketIn", "declarator": "packetInDHCPDiscoveryRequest", "var_name": "packetInDHCPDiscoveryRequest"}], "file": "network-level/fl-ho-nl/src/test/java/net/floodlightcontroller/virtualnetwork/VirtualNetworkFilterTest.java"}, "test_case": {"identifier": "testAddHost", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddHost() {\n        testModifyNetwork();\n        vns.addHost(mac1, guid1, hostPort1);\n        assertTrue(vns.macToGuid.get(mac1).equals(guid1));\n        assertTrue(vns.portToMac.get(hostPort1).equals(mac1));\n        assertTrue(vns.vNetsByGuid.get(guid1).hosts.contains(mac1));\n        vns.addHost(mac2, guid1, hostPort2);\n        assertTrue(vns.macToGuid.get(mac2).equals(guid1));\n        assertTrue(vns.portToMac.get(hostPort2).equals(mac2));\n        assertTrue(vns.vNetsByGuid.get(guid1).hosts.contains(mac2));\n        vns.addHost(mac3, guid3, hostPort3);\n        vns.addHost(mac4, guid3, hostPort4);\n        assertTrue(vns.vNetsByGuid.get(guid3).hosts.contains(mac4));\n    }", "signature": "void testAddHost()", "full_signature": "@Test public void testAddHost()", "class_method_signature": "VirtualNetworkFilterTest.testAddHost()", "testcase": true, "constructor": false, "invocations": ["testModifyNetwork", "addHost", "assertTrue", "equals", "get", "assertTrue", "equals", "get", "assertTrue", "contains", "get", "addHost", "assertTrue", "equals", "get", "assertTrue", "equals", "get", "assertTrue", "contains", "get", "addHost", "addHost", "assertTrue", "contains", "get"]}, "focal_class": {"identifier": "VirtualNetworkFilter", "superclass": "", "interfaces": "implements IFloodlightModule, IVirtualNetworkService, IOFMessageListener, IDeviceListener", "fields": [{"original_string": "protected static Logger log = LoggerFactory.getLogger(VirtualNetworkFilter.class);", "modifier": "protected static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(VirtualNetworkFilter.class)", "var_name": "log"}, {"original_string": "private final short APP_ID = 20;", "modifier": "private final", "type": "short", "declarator": "APP_ID = 20", "var_name": "APP_ID"}, {"original_string": "IFloodlightProviderService floodlightProvider;", "modifier": "", "type": "IFloodlightProviderService", "declarator": "floodlightProvider", "var_name": "floodlightProvider"}, {"original_string": "IRestApiService restApi;", "modifier": "", "type": "IRestApiService", "declarator": "restApi", "var_name": "restApi"}, {"original_string": "IDeviceService deviceService;", "modifier": "", "type": "IDeviceService", "declarator": "deviceService", "var_name": "deviceService"}, {"original_string": "protected Map<String, VirtualNetwork> vNetsByGuid;", "modifier": "protected", "type": "Map<String, VirtualNetwork>", "declarator": "vNetsByGuid", "var_name": "vNetsByGuid"}, {"original_string": "protected Map<String, String> nameToGuid;", "modifier": "protected", "type": "Map<String, String>", "declarator": "nameToGuid", "var_name": "nameToGuid"}, {"original_string": "protected Map<String, Integer> guidToGateway;", "modifier": "protected", "type": "Map<String, Integer>", "declarator": "guidToGateway", "var_name": "guidToGateway"}, {"original_string": "protected Map<Integer, Set<String>> gatewayToGuid;", "modifier": "protected", "type": "Map<Integer, Set<String>>", "declarator": "gatewayToGuid", "var_name": "gatewayToGuid"}, {"original_string": "protected Map<MACAddress, Integer> macToGateway;", "modifier": "protected", "type": "Map<MACAddress, Integer>", "declarator": "macToGateway", "var_name": "macToGateway"}, {"original_string": "protected Map<MACAddress, String> macToGuid;", "modifier": "protected", "type": "Map<MACAddress, String>", "declarator": "macToGuid", "var_name": "macToGuid"}, {"original_string": "protected Map<String, MACAddress> portToMac;", "modifier": "protected", "type": "Map<String, MACAddress>", "declarator": "portToMac", "var_name": "portToMac"}], "methods": [{"identifier": "addGateway", "parameters": "(String guid, Integer ip)", "modifiers": "protected", "return": "void", "signature": "void addGateway(String guid, Integer ip)", "full_signature": "protected void addGateway(String guid, Integer ip)", "class_method_signature": "VirtualNetworkFilter.addGateway(String guid, Integer ip)", "testcase": false, "constructor": false}, {"identifier": "deleteGateway", "parameters": "(String guid)", "modifiers": "protected", "return": "void", "signature": "void deleteGateway(String guid)", "full_signature": "protected void deleteGateway(String guid)", "class_method_signature": "VirtualNetworkFilter.deleteGateway(String guid)", "testcase": false, "constructor": false}, {"identifier": "createNetwork", "parameters": "(String guid, String network, Integer gateway)", "modifiers": "@Override public", "return": "void", "signature": "void createNetwork(String guid, String network, Integer gateway)", "full_signature": "@Override public void createNetwork(String guid, String network, Integer gateway)", "class_method_signature": "VirtualNetworkFilter.createNetwork(String guid, String network, Integer gateway)", "testcase": false, "constructor": false}, {"identifier": "deleteNetwork", "parameters": "(String guid)", "modifiers": "@Override public", "return": "void", "signature": "void deleteNetwork(String guid)", "full_signature": "@Override public void deleteNetwork(String guid)", "class_method_signature": "VirtualNetworkFilter.deleteNetwork(String guid)", "testcase": false, "constructor": false}, {"identifier": "addHost", "parameters": "(MACAddress mac, String guid, String port)", "modifiers": "@Override public", "return": "void", "signature": "void addHost(MACAddress mac, String guid, String port)", "full_signature": "@Override public void addHost(MACAddress mac, String guid, String port)", "class_method_signature": "VirtualNetworkFilter.addHost(MACAddress mac, String guid, String port)", "testcase": false, "constructor": false}, {"identifier": "deleteHost", "parameters": "(MACAddress mac, String port)", "modifiers": "@Override public", "return": "void", "signature": "void deleteHost(MACAddress mac, String port)", "full_signature": "@Override public void deleteHost(MACAddress mac, String port)", "class_method_signature": "VirtualNetworkFilter.deleteHost(MACAddress mac, String port)", "testcase": false, "constructor": false}, {"identifier": "getModuleServices", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleServices()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleServices()", "class_method_signature": "VirtualNetworkFilter.getModuleServices()", "testcase": false, "constructor": false}, {"identifier": "getServiceImpls", "parameters": "()", "modifiers": "@Override public", "return": "Map<Class<? extends IFloodlightService>, IFloodlightService>", "signature": "Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "full_signature": "@Override public Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "class_method_signature": "VirtualNetworkFilter.getServiceImpls()", "testcase": false, "constructor": false}, {"identifier": "getModuleDependencies", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "class_method_signature": "VirtualNetworkFilter.getModuleDependencies()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void init(FloodlightModuleContext context)", "full_signature": "@Override public void init(FloodlightModuleContext context)", "class_method_signature": "VirtualNetworkFilter.init(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "startUp", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void startUp(FloodlightModuleContext context)", "full_signature": "@Override public void startUp(FloodlightModuleContext context)", "class_method_signature": "VirtualNetworkFilter.startUp(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "VirtualNetworkFilter.getName()", "testcase": false, "constructor": false}, {"identifier": "isCallbackOrderingPrereq", "parameters": "(OFType type, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCallbackOrderingPrereq(OFType type, String name)", "full_signature": "@Override public boolean isCallbackOrderingPrereq(OFType type, String name)", "class_method_signature": "VirtualNetworkFilter.isCallbackOrderingPrereq(OFType type, String name)", "testcase": false, "constructor": false}, {"identifier": "isCallbackOrderingPostreq", "parameters": "(OFType type, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCallbackOrderingPostreq(OFType type, String name)", "full_signature": "@Override public boolean isCallbackOrderingPostreq(OFType type, String name)", "class_method_signature": "VirtualNetworkFilter.isCallbackOrderingPostreq(OFType type, String name)", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "modifiers": "@Override public", "return": "Command", "signature": "Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "full_signature": "@Override public Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "class_method_signature": "VirtualNetworkFilter.receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "isDefaultGateway", "parameters": "(Ethernet frame)", "modifiers": "protected", "return": "boolean", "signature": "boolean isDefaultGateway(Ethernet frame)", "full_signature": "protected boolean isDefaultGateway(Ethernet frame)", "class_method_signature": "VirtualNetworkFilter.isDefaultGateway(Ethernet frame)", "testcase": false, "constructor": false}, {"identifier": "oneSameNetwork", "parameters": "(MACAddress m1, MACAddress m2)", "modifiers": "protected", "return": "boolean", "signature": "boolean oneSameNetwork(MACAddress m1, MACAddress m2)", "full_signature": "protected boolean oneSameNetwork(MACAddress m1, MACAddress m2)", "class_method_signature": "VirtualNetworkFilter.oneSameNetwork(MACAddress m1, MACAddress m2)", "testcase": false, "constructor": false}, {"identifier": "isDhcpPacket", "parameters": "(Ethernet frame)", "modifiers": "protected", "return": "boolean", "signature": "boolean isDhcpPacket(Ethernet frame)", "full_signature": "protected boolean isDhcpPacket(Ethernet frame)", "class_method_signature": "VirtualNetworkFilter.isDhcpPacket(Ethernet frame)", "testcase": false, "constructor": false}, {"identifier": "processPacketIn", "parameters": "(IOFSwitch sw, OFPacketIn msg, FloodlightContext cntx)", "modifiers": "protected", "return": "Command", "signature": "Command processPacketIn(IOFSwitch sw, OFPacketIn msg, FloodlightContext cntx)", "full_signature": "protected Command processPacketIn(IOFSwitch sw, OFPacketIn msg, FloodlightContext cntx)", "class_method_signature": "VirtualNetworkFilter.processPacketIn(IOFSwitch sw, OFPacketIn msg, FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "doDropFlow", "parameters": "(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx)", "modifiers": "protected", "return": "void", "signature": "void doDropFlow(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx)", "full_signature": "protected void doDropFlow(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx)", "class_method_signature": "VirtualNetworkFilter.doDropFlow(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "deviceAdded", "parameters": "(IDevice device)", "modifiers": "@Override public", "return": "void", "signature": "void deviceAdded(IDevice device)", "full_signature": "@Override public void deviceAdded(IDevice device)", "class_method_signature": "VirtualNetworkFilter.deviceAdded(IDevice device)", "testcase": false, "constructor": false}, {"identifier": "deviceRemoved", "parameters": "(IDevice device)", "modifiers": "@Override public", "return": "void", "signature": "void deviceRemoved(IDevice device)", "full_signature": "@Override public void deviceRemoved(IDevice device)", "class_method_signature": "VirtualNetworkFilter.deviceRemoved(IDevice device)", "testcase": false, "constructor": false}, {"identifier": "deviceIPV4AddrChanged", "parameters": "(IDevice device)", "modifiers": "@Override public", "return": "void", "signature": "void deviceIPV4AddrChanged(IDevice device)", "full_signature": "@Override public void deviceIPV4AddrChanged(IDevice device)", "class_method_signature": "VirtualNetworkFilter.deviceIPV4AddrChanged(IDevice device)", "testcase": false, "constructor": false}, {"identifier": "deviceMoved", "parameters": "(IDevice device)", "modifiers": "@Override public", "return": "void", "signature": "void deviceMoved(IDevice device)", "full_signature": "@Override public void deviceMoved(IDevice device)", "class_method_signature": "VirtualNetworkFilter.deviceMoved(IDevice device)", "testcase": false, "constructor": false}, {"identifier": "deviceVlanChanged", "parameters": "(IDevice device)", "modifiers": "@Override public", "return": "void", "signature": "void deviceVlanChanged(IDevice device)", "full_signature": "@Override public void deviceVlanChanged(IDevice device)", "class_method_signature": "VirtualNetworkFilter.deviceVlanChanged(IDevice device)", "testcase": false, "constructor": false}, {"identifier": "listNetworks", "parameters": "()", "modifiers": "@Override public", "return": "Collection <VirtualNetwork>", "signature": "Collection <VirtualNetwork> listNetworks()", "full_signature": "@Override public Collection <VirtualNetwork> listNetworks()", "class_method_signature": "VirtualNetworkFilter.listNetworks()", "testcase": false, "constructor": false}], "file": "network-level/fl-ho-nl/src/main/java/net/floodlightcontroller/virtualnetwork/VirtualNetworkFilter.java"}, "focal_method": {"identifier": "addHost", "parameters": "(MACAddress mac, String guid, String port)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void addHost(MACAddress mac, String guid, String port) {\n        if (guid != null) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Adding {} to network ID {} on port {}\",\n                          new Object[] {mac, guid, port});\n            }\n            // We ignore old mappings\n            macToGuid.put(mac, guid);\n            portToMac.put(port, mac);\n            if(vNetsByGuid.get(guid)!=null)\n                vNetsByGuid.get(guid).addHost(new MACAddress(mac.toBytes()));\n        } else {\n            log.warn(\"Could not add MAC {} to network ID {} on port {}, the network does not exist\",\n                     new Object[] {mac, guid, port});\n        }\n    }", "signature": "void addHost(MACAddress mac, String guid, String port)", "full_signature": "@Override public void addHost(MACAddress mac, String guid, String port)", "class_method_signature": "VirtualNetworkFilter.addHost(MACAddress mac, String guid, String port)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "put", "put", "get", "addHost", "get", "toBytes", "warn"]}, "repository": {"repo_id": 10459637, "url": "https://github.com/rizard/geni-openflow-vertical-handover", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 33971, "license": "licensed"}}