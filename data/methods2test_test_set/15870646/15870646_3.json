{"test_class": {"identifier": "ReducedMedianFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "brouter-util/src/test/java/btools/util/ReducedMedianFilterTest.java"}, "test_case": {"identifier": "reducedMedianFilterTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void reducedMedianFilterTest() throws IOException\n  {\n    ReducedMedianFilter f = new ReducedMedianFilter( 10 );\n    f.reset();\n    f.addSample( .2, 10 );\n    f.addSample( .2, 10 );\n    f.addSample( .2, 10 );\n    f.addSample( .2, 15 );\n    f.addSample( .2, 20 );\n    \n    double m = f.calcEdgeReducedMedian( 0.5 );\n    Assert.assertTrue( \"median1 mismatch m=\" + m + \" expected 11.5\", doubleEquals( m, 11.5 ) );\n\n    f.reset();\n    f.addSample( .2, 10 );\n    f.addSample( .2, 10 );\n    f.addSample( .2, 10 );\n    f.addSample( .2, 10 );\n    f.addSample( .2, 20 );\n\n    m = f.calcEdgeReducedMedian( 1. );\n    Assert.assertTrue( \"median1 mismatch m=\" + m + \" expected 12\", doubleEquals( m, 12. ) );\n\n    f.reset();\n    f.addSample( .5, -10 );\n    f.addSample( .5, 10 );\n    m = f.calcEdgeReducedMedian( 0.5 );\n    Assert.assertTrue( \"median2 mismatch m=\" + m + \" expected 0\", doubleEquals( m, 0. ) );\n  }", "signature": "void reducedMedianFilterTest()", "full_signature": "@Test public void reducedMedianFilterTest()", "class_method_signature": "ReducedMedianFilterTest.reducedMedianFilterTest()", "testcase": true, "constructor": false, "invocations": ["reset", "addSample", "addSample", "addSample", "addSample", "addSample", "calcEdgeReducedMedian", "assertTrue", "doubleEquals", "reset", "addSample", "addSample", "addSample", "addSample", "addSample", "calcEdgeReducedMedian", "assertTrue", "doubleEquals", "reset", "addSample", "addSample", "calcEdgeReducedMedian", "assertTrue", "doubleEquals"]}, "focal_class": {"identifier": "ReducedMedianFilter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int nsamples;", "modifier": "private", "type": "int", "declarator": "nsamples", "var_name": "nsamples"}, {"original_string": "private double[] weights;", "modifier": "private", "type": "double[]", "declarator": "weights", "var_name": "weights"}, {"original_string": "private int[] values;", "modifier": "private", "type": "int[]", "declarator": "values", "var_name": "values"}], "methods": [{"identifier": "ReducedMedianFilter", "parameters": "( int size )", "modifiers": "public", "return": "", "signature": " ReducedMedianFilter( int size )", "full_signature": "public  ReducedMedianFilter( int size )", "class_method_signature": "ReducedMedianFilter.ReducedMedianFilter( int size )", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "ReducedMedianFilter.reset()", "testcase": false, "constructor": false}, {"identifier": "addSample", "parameters": "( double weight, int value )", "modifiers": "public", "return": "void", "signature": "void addSample( double weight, int value )", "full_signature": "public void addSample( double weight, int value )", "class_method_signature": "ReducedMedianFilter.addSample( double weight, int value )", "testcase": false, "constructor": false}, {"identifier": "calcEdgeReducedMedian", "parameters": "( double fraction )", "modifiers": "public", "return": "double", "signature": "double calcEdgeReducedMedian( double fraction )", "full_signature": "public double calcEdgeReducedMedian( double fraction )", "class_method_signature": "ReducedMedianFilter.calcEdgeReducedMedian( double fraction )", "testcase": false, "constructor": false}, {"identifier": "removeEdgeWeight", "parameters": "( double excessWeight, boolean high )", "modifiers": "private", "return": "void", "signature": "void removeEdgeWeight( double excessWeight, boolean high )", "full_signature": "private void removeEdgeWeight( double excessWeight, boolean high )", "class_method_signature": "ReducedMedianFilter.removeEdgeWeight( double excessWeight, boolean high )", "testcase": false, "constructor": false}], "file": "brouter-util/src/main/java/btools/util/ReducedMedianFilter.java"}, "focal_method": {"identifier": "ReducedMedianFilter", "parameters": "( int size )", "modifiers": "public", "return": "", "body": "public ReducedMedianFilter( int size )\n  {\n    weights = new double[size];\n    values = new int[size];\n  }", "signature": " ReducedMedianFilter( int size )", "full_signature": "public  ReducedMedianFilter( int size )", "class_method_signature": "ReducedMedianFilter.ReducedMedianFilter( int size )", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 15870646, "url": "https://github.com/abrensch/brouter", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 172, "size": 3569, "license": "licensed"}}