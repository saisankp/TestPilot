{"test_class": {"identifier": "PointHasherTest", "superclass": "", "interfaces": "", "fields": [], "file": "pross-common/src/test/java/com/ibm/pross/common/util/crypto/ecc/PointHasherTest.java"}, "test_case": {"identifier": "testVector18", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testVector18() {\n\t\t// Generate random bytes\n\t\tfinal HmacKeyDerivationFunction hkdf = new HmacKeyDerivationFunction(HmacKeyDerivationFunction.HDFK_SHA512,\n\t\t\t\tnew byte[0]);\n\t\tfinal byte[] inputBytes = hkdf.createKey(new byte[] { 0, 1, 2 }, 4096);\n\n\t\tfinal PointHasher pointHasher = EcCurve.secp384r1.getPointHasher();\n\t\tEcPoint result = pointHasher.hashToCurve(inputBytes);\n\t\tSystem.out.println(\"Test Vector Point: \" + result);\n\t\tEcPoint expected = new EcPoint(\n\t\t\t\t\"13574875865813460249138662550698218803344127707850688963302044462592953166902667130065024915236575599853564091775290\",\n\t\t\t\t\"8450942680331909847902806980881161384447495168235739504502265930417469323805437311384304845899387819654924561237326\");\n\t\tAssert.assertEquals(expected, result);\n\t}", "signature": "void testVector18()", "full_signature": "@Test public void testVector18()", "class_method_signature": "PointHasherTest.testVector18()", "testcase": true, "constructor": false, "invocations": ["createKey", "getPointHasher", "hashToCurve", "println", "assertEquals"]}, "focal_class": {"identifier": "PointHasher", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final BigInteger TWO = BigInteger.valueOf(2);", "modifier": "public static final", "type": "BigInteger", "declarator": "TWO = BigInteger.valueOf(2)", "var_name": "TWO"}, {"original_string": "public static final BigInteger THREE = BigInteger.valueOf(3);", "modifier": "public static final", "type": "BigInteger", "declarator": "THREE = BigInteger.valueOf(3)", "var_name": "THREE"}, {"original_string": "public static final BigInteger FOUR = BigInteger.valueOf(4);", "modifier": "public static final", "type": "BigInteger", "declarator": "FOUR = BigInteger.valueOf(4)", "var_name": "FOUR"}, {"original_string": "protected final EcCurve curve;", "modifier": "protected final", "type": "EcCurve", "declarator": "curve", "var_name": "curve"}, {"original_string": "protected final BigInteger invTwo;", "modifier": "protected final", "type": "BigInteger", "declarator": "invTwo", "var_name": "invTwo"}, {"original_string": "protected final BigInteger invFour;", "modifier": "protected final", "type": "BigInteger", "declarator": "invFour", "var_name": "invFour"}, {"original_string": "protected final BigInteger quadResideTestExponent;", "modifier": "protected final", "type": "BigInteger", "declarator": "quadResideTestExponent", "var_name": "quadResideTestExponent"}, {"original_string": "protected final BigInteger squareRootExponent;", "modifier": "protected final", "type": "BigInteger", "declarator": "squareRootExponent", "var_name": "squareRootExponent"}], "methods": [{"identifier": "PointHasher", "parameters": "(EcCurve curve)", "modifiers": "public", "return": "", "signature": " PointHasher(EcCurve curve)", "full_signature": "public  PointHasher(EcCurve curve)", "class_method_signature": "PointHasher.PointHasher(EcCurve curve)", "testcase": false, "constructor": true}, {"identifier": "isQuadraticResidue", "parameters": "(BigInteger a)", "modifiers": "protected", "return": "boolean", "signature": "boolean isQuadraticResidue(BigInteger a)", "full_signature": "protected boolean isQuadraticResidue(BigInteger a)", "class_method_signature": "PointHasher.isQuadraticResidue(BigInteger a)", "testcase": false, "constructor": false}, {"identifier": "squareRoot", "parameters": "(BigInteger a)", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger squareRoot(BigInteger a)", "full_signature": "public BigInteger squareRoot(BigInteger a)", "class_method_signature": "PointHasher.squareRoot(BigInteger a)", "testcase": false, "constructor": false}, {"identifier": "hashToCurve", "parameters": "(final String input)", "modifiers": "public", "return": "EcPoint", "signature": "EcPoint hashToCurve(final String input)", "full_signature": "public EcPoint hashToCurve(final String input)", "class_method_signature": "PointHasher.hashToCurve(final String input)", "testcase": false, "constructor": false}, {"identifier": "hashToCurve", "parameters": "(final String input, final byte[] clientSecret)", "modifiers": "public", "return": "EcPoint", "signature": "EcPoint hashToCurve(final String input, final byte[] clientSecret)", "full_signature": "public EcPoint hashToCurve(final String input, final byte[] clientSecret)", "class_method_signature": "PointHasher.hashToCurve(final String input, final byte[] clientSecret)", "testcase": false, "constructor": false}, {"identifier": "hashToCurve", "parameters": "(final byte[] input)", "modifiers": "public", "return": "EcPoint", "signature": "EcPoint hashToCurve(final byte[] input)", "full_signature": "public EcPoint hashToCurve(final byte[] input)", "class_method_signature": "PointHasher.hashToCurve(final byte[] input)", "testcase": false, "constructor": false}, {"identifier": "hashToCurve", "parameters": "(final byte[] input, final byte[] clientSecret)", "modifiers": "public", "return": "EcPoint", "signature": "EcPoint hashToCurve(final byte[] input, final byte[] clientSecret)", "full_signature": "public EcPoint hashToCurve(final byte[] input, final byte[] clientSecret)", "class_method_signature": "PointHasher.hashToCurve(final byte[] input, final byte[] clientSecret)", "testcase": false, "constructor": false}, {"identifier": "createPointFromInteger", "parameters": "(BigInteger t)", "modifiers": "public abstract", "return": "EcPoint", "signature": "EcPoint createPointFromInteger(BigInteger t)", "full_signature": "public abstract EcPoint createPointFromInteger(BigInteger t)", "class_method_signature": "PointHasher.createPointFromInteger(BigInteger t)", "testcase": false, "constructor": false}], "file": "pross-common/src/main/java/com/ibm/pross/common/util/crypto/ecc/PointHasher.java"}, "focal_method": {"identifier": "hashToCurve", "parameters": "(final String input)", "modifiers": "public", "return": "EcPoint", "body": "public EcPoint hashToCurve(final String input) {\n\t\treturn this.hashToCurve(input.getBytes(StandardCharsets.UTF_8), null);\n\t}", "signature": "EcPoint hashToCurve(final String input)", "full_signature": "public EcPoint hashToCurve(final String input)", "class_method_signature": "PointHasher.hashToCurve(final String input)", "testcase": false, "constructor": false, "invocations": ["hashToCurve", "getBytes"]}, "repository": {"repo_id": 144309611, "url": "https://github.com/jasonkresch/protect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 38, "size": 1932, "license": "licensed"}}