{"test_class": {"identifier": "SegmentGraphUtilitiesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ImmutableList<Section> sections = ImmutableList.of(\n            new Section(0, 4, 4),\n            new Section(4, 7, 4),\n            new Section(7, 8, 2)\n    );", "modifier": "private", "type": "ImmutableList<Section>", "declarator": "sections = ImmutableList.of(\n            new Section(0, 4, 4),\n            new Section(4, 7, 4),\n            new Section(7, 8, 2)\n    )", "var_name": "sections"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/physics/utils/SegmentGraphUtilitiesTest.java"}, "test_case": {"identifier": "getValueAt_whenXBeyondRange_thenThrowsException", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void getValueAt_whenXBeyondRange_thenThrowsException() {\n        assertThatThrownBy(() -> SegmentGraphUtilities.getValueAt(sections, Section::xExtent, Section::extrapolateValue, 100000))\n                .isInstanceOf(IllegalStateException.class);\n    }", "signature": "void getValueAt_whenXBeyondRange_thenThrowsException()", "full_signature": "@Test void getValueAt_whenXBeyondRange_thenThrowsException()", "class_method_signature": "SegmentGraphUtilitiesTest.getValueAt_whenXBeyondRange_thenThrowsException()", "testcase": true, "constructor": false, "invocations": ["isInstanceOf", "assertThatThrownBy", "getValueAt"]}, "focal_class": {"identifier": "SegmentGraphUtilities", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double ERROR_TOLERANCE = 10E-9;", "modifier": "private static final", "type": "double", "declarator": "ERROR_TOLERANCE = 10E-9", "var_name": "ERROR_TOLERANCE"}], "methods": [{"identifier": "SegmentGraphUtilities", "parameters": "()", "modifiers": "private", "return": "", "signature": " SegmentGraphUtilities()", "full_signature": "private  SegmentGraphUtilities()", "class_method_signature": "SegmentGraphUtilities.SegmentGraphUtilities()", "testcase": false, "constructor": true}, {"identifier": "getValueAt", "parameters": "(List<T> segments, ToDoubleFunction<T> segmentToXExtent, BiFunction<T, Double, Double> yValueInterpolator, double xValue)", "modifiers": "public static", "return": "double", "signature": "double getValueAt(List<T> segments, ToDoubleFunction<T> segmentToXExtent, BiFunction<T, Double, Double> yValueInterpolator, double xValue)", "full_signature": "public static double getValueAt(List<T> segments, ToDoubleFunction<T> segmentToXExtent, BiFunction<T, Double, Double> yValueInterpolator, double xValue)", "class_method_signature": "SegmentGraphUtilities.getValueAt(List<T> segments, ToDoubleFunction<T> segmentToXExtent, BiFunction<T, Double, Double> yValueInterpolator, double xValue)", "testcase": false, "constructor": false}, {"identifier": "accumulateValueTo", "parameters": "(List<T> segments, ToDoubleFunction<T> segmentToXExtent, ToDoubleFunction<T> segmentToYExtent, BiFunction<T, Double, Double> yValueInterpolator, double xValue)", "modifiers": "public static", "return": "double", "signature": "double accumulateValueTo(List<T> segments, ToDoubleFunction<T> segmentToXExtent, ToDoubleFunction<T> segmentToYExtent, BiFunction<T, Double, Double> yValueInterpolator, double xValue)", "full_signature": "public static double accumulateValueTo(List<T> segments, ToDoubleFunction<T> segmentToXExtent, ToDoubleFunction<T> segmentToYExtent, BiFunction<T, Double, Double> yValueInterpolator, double xValue)", "class_method_signature": "SegmentGraphUtilities.accumulateValueTo(List<T> segments, ToDoubleFunction<T> segmentToXExtent, ToDoubleFunction<T> segmentToYExtent, BiFunction<T, Double, Double> yValueInterpolator, double xValue)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/physics/utils/SegmentGraphUtilities.java"}, "focal_method": {"identifier": "getValueAt", "parameters": "(List<T> segments, ToDoubleFunction<T> segmentToXExtent, BiFunction<T, Double, Double> yValueInterpolator, double xValue)", "modifiers": "public static", "return": "double", "body": "public static <T> double getValueAt(List<T> segments, ToDoubleFunction<T> segmentToXExtent, BiFunction<T, Double, Double> yValueInterpolator, double xValue) {\n        double xValueAtBoundary = 0;\n        for (T segment : segments) {\n            double xExtent = segmentToXExtent.applyAsDouble(segment);\n            double xDistanceIntoSegment = Math.max(xValue - xValueAtBoundary, 0); //protect against a rounding error\n            if (xExtent >= xDistanceIntoSegment) {\n                return yValueInterpolator.apply(segment, xDistanceIntoSegment);\n            }\n\n            xValueAtBoundary += xExtent;\n        }\n\n        if (xValue - xValueAtBoundary < xValue * ERROR_TOLERANCE) {\n            T lastRegion = Iterables.getLast(segments, null);\n            return yValueInterpolator.apply(lastRegion, segmentToXExtent.applyAsDouble(lastRegion));\n        }\n\n        throw Failer.fail(\"Should have found an answer in loop\");\n    }", "signature": "double getValueAt(List<T> segments, ToDoubleFunction<T> segmentToXExtent, BiFunction<T, Double, Double> yValueInterpolator, double xValue)", "full_signature": "public static double getValueAt(List<T> segments, ToDoubleFunction<T> segmentToXExtent, BiFunction<T, Double, Double> yValueInterpolator, double xValue)", "class_method_signature": "SegmentGraphUtilities.getValueAt(List<T> segments, ToDoubleFunction<T> segmentToXExtent, BiFunction<T, Double, Double> yValueInterpolator, double xValue)", "testcase": false, "constructor": false, "invocations": ["applyAsDouble", "max", "apply", "getLast", "apply", "applyAsDouble", "fail"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}