{"test_class": {"identifier": "GaseousAbsorptionAlgoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GaseousAbsorptionAlgo gaseousAbsorptionAlgo;", "modifier": "private", "type": "GaseousAbsorptionAlgo", "declarator": "gaseousAbsorptionAlgo", "var_name": "gaseousAbsorptionAlgo"}], "file": "s3tbx-olci-radiometry/src/test/java/org/esa/s3tbx/olci/radiometry/gasabsorption/GaseousAbsorptionAlgoTest.java"}, "test_case": {"identifier": "testGasToComputeDoesNotExist", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testGasToComputeDoesNotExist() {\n        assertArrayEquals(null, gaseousAbsorptionAlgo.gasToComputeForBand(\"dummy1\"));\n    }", "signature": "void testGasToComputeDoesNotExist()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testGasToComputeDoesNotExist()", "class_method_signature": "GaseousAbsorptionAlgoTest.testGasToComputeDoesNotExist()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "gasToComputeForBand"]}, "focal_class": {"identifier": "GaseousAbsorptionAlgo", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getAtmosphericGas", "parameters": "(String bandName)", "modifiers": "private", "return": "float", "signature": "float getAtmosphericGas(String bandName)", "full_signature": "private float getAtmosphericGas(String bandName)", "class_method_signature": "GaseousAbsorptionAlgo.getAtmosphericGas(String bandName)", "testcase": false, "constructor": false}, {"identifier": "getNormalizedConcentration", "parameters": "(String bandName)", "modifiers": "private", "return": "float", "signature": "float getNormalizedConcentration(String bandName)", "full_signature": "private float getNormalizedConcentration(String bandName)", "class_method_signature": "GaseousAbsorptionAlgo.getNormalizedConcentration(String bandName)", "testcase": false, "constructor": false}, {"identifier": "getExponential", "parameters": "(float atmosphericGas, float normConcentration, float massAir)", "modifiers": "", "return": "float", "signature": "float getExponential(float atmosphericGas, float normConcentration, float massAir)", "full_signature": " float getExponential(float atmosphericGas, float normConcentration, float massAir)", "class_method_signature": "GaseousAbsorptionAlgo.getExponential(float atmosphericGas, float normConcentration, float massAir)", "testcase": false, "constructor": false}, {"identifier": "gasToComputeForBand", "parameters": "(String bandName)", "modifiers": "", "return": "String[]", "signature": "String[] gasToComputeForBand(String bandName)", "full_signature": " String[] gasToComputeForBand(String bandName)", "class_method_signature": "GaseousAbsorptionAlgo.gasToComputeForBand(String bandName)", "testcase": false, "constructor": false}, {"identifier": "getMassAir", "parameters": "(float[] sza, float[] oza)", "modifiers": "", "return": "float[]", "signature": "float[] getMassAir(float[] sza, float[] oza)", "full_signature": " float[] getMassAir(float[] sza, float[] oza)", "class_method_signature": "GaseousAbsorptionAlgo.getMassAir(float[] sza, float[] oza)", "testcase": false, "constructor": false}, {"identifier": "getMassAir", "parameters": "(float szaRad, float ozaRad)", "modifiers": "private static", "return": "float", "signature": "float getMassAir(float szaRad, float ozaRad)", "full_signature": "private static float getMassAir(float szaRad, float ozaRad)", "class_method_signature": "GaseousAbsorptionAlgo.getMassAir(float szaRad, float ozaRad)", "testcase": false, "constructor": false}, {"identifier": "getTransmissionGas", "parameters": "(String bandName, float[] sza, float[] oza)", "modifiers": "", "return": "float[]", "signature": "float[] getTransmissionGas(String bandName, float[] sza, float[] oza)", "full_signature": " float[] getTransmissionGas(String bandName, float[] sza, float[] oza)", "class_method_signature": "GaseousAbsorptionAlgo.getTransmissionGas(String bandName, float[] sza, float[] oza)", "testcase": false, "constructor": false}], "file": "s3tbx-olci-radiometry/src/main/java/org/esa/s3tbx/olci/radiometry/gasabsorption/GaseousAbsorptionAlgo.java"}, "focal_method": {"identifier": "gasToComputeForBand", "parameters": "(String bandName)", "modifiers": "", "return": "String[]", "body": "String[] gasToComputeForBand(String bandName) {\n        GasToCompute gasToCompute = GasToCompute.valueOf(bandName);\n        return gasToCompute.getGasBandToCompute();\n    }", "signature": "String[] gasToComputeForBand(String bandName)", "full_signature": " String[] gasToComputeForBand(String bandName)", "class_method_signature": "GaseousAbsorptionAlgo.gasToComputeForBand(String bandName)", "testcase": false, "constructor": false, "invocations": ["valueOf", "getGasBandToCompute"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}