{"test_class": {"identifier": "TestVersionedSchemaSet", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_SCHEMA1_TEXT =\n      \"{\\\"name\\\":\\\"schema1\\\",\\\"namespace\\\":\\\"com.linkedin.databus2.test\\\",\\\"type\\\":\\\"record\\\",\" +\n      \" \\\"fields\\\":[{\\\"name\\\":\\\"field1\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"field2\\\",\\\"type\\\":\\\"int\\\"}]}\";", "modifier": "private static final", "type": "String", "declarator": "TEST_SCHEMA1_TEXT =\n      \"{\\\"name\\\":\\\"schema1\\\",\\\"namespace\\\":\\\"com.linkedin.databus2.test\\\",\\\"type\\\":\\\"record\\\",\" +\n      \" \\\"fields\\\":[{\\\"name\\\":\\\"field1\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"field2\\\",\\\"type\\\":\\\"int\\\"}]}\"", "var_name": "TEST_SCHEMA1_TEXT"}, {"original_string": "private static final String TEST_SCHEMA2_TEXT =\n    \"{\\\"name\\\":\\\"schema2\\\",\\\"namespace\\\":\\\"com.linkedin.databus2.test\\\",\\\"type\\\":\\\"record\\\",\" +\n    \" \\\"fields\\\":[{\\\"name\\\":\\\"field1\\\",\\\"type\\\":\\\"double\\\"},{\\\"name\\\":\\\"field2\\\",\\\"type\\\":\\\"string\\\"}]}\";", "modifier": "private static final", "type": "String", "declarator": "TEST_SCHEMA2_TEXT =\n    \"{\\\"name\\\":\\\"schema2\\\",\\\"namespace\\\":\\\"com.linkedin.databus2.test\\\",\\\"type\\\":\\\"record\\\",\" +\n    \" \\\"fields\\\":[{\\\"name\\\":\\\"field1\\\",\\\"type\\\":\\\"double\\\"},{\\\"name\\\":\\\"field2\\\",\\\"type\\\":\\\"string\\\"}]}\"", "var_name": "TEST_SCHEMA2_TEXT"}, {"original_string": "private static final String TEST_SCHEMA3_TEXT =\n    \"{\\\"name\\\":\\\"AnotherSchema1\\\",\\\"namespace\\\":\\\"com.linkedin.databus2.test\\\",\\\"type\\\":\\\"record\\\",\" +\n    \" \\\"fields\\\":[{\\\"name\\\":\\\"field1\\\",\\\"type\\\":\\\"double\\\"},{\\\"name\\\":\\\"field2\\\",\\\"type\\\":\\\"string\\\"}]}\";", "modifier": "private static final", "type": "String", "declarator": "TEST_SCHEMA3_TEXT =\n    \"{\\\"name\\\":\\\"AnotherSchema1\\\",\\\"namespace\\\":\\\"com.linkedin.databus2.test\\\",\\\"type\\\":\\\"record\\\",\" +\n    \" \\\"fields\\\":[{\\\"name\\\":\\\"field1\\\",\\\"type\\\":\\\"double\\\"},{\\\"name\\\":\\\"field2\\\",\\\"type\\\":\\\"string\\\"}]}\"", "var_name": "TEST_SCHEMA3_TEXT"}, {"original_string": "private static final String TEST_SCHEMA4_TEXT_TEMPLATE =\n      \"{\\\"name\\\":\\\"%s\\\",\\\"namespace\\\":\\\"com.linkedin.databus2.test\\\",\\\"type\\\":\\\"record\\\",\" +\n      \" \\\"fields\\\":[{\\\"name\\\":\\\"field1\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"field2\\\",\\\"type\\\":\\\"int\\\"}]}\";", "modifier": "private static final", "type": "String", "declarator": "TEST_SCHEMA4_TEXT_TEMPLATE =\n      \"{\\\"name\\\":\\\"%s\\\",\\\"namespace\\\":\\\"com.linkedin.databus2.test\\\",\\\"type\\\":\\\"record\\\",\" +\n      \" \\\"fields\\\":[{\\\"name\\\":\\\"field1\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"field2\\\",\\\"type\\\":\\\"int\\\"}]}\"", "var_name": "TEST_SCHEMA4_TEXT_TEMPLATE"}], "file": "databus-core/databus-core-schemas/src/test/java/com/linkedin/databus2/schemas/TestVersionedSchemaSet.java"}, "test_case": {"identifier": "testUpdateMd5Index", "parameters": "()", "modifiers": "@Test /** Test that schemas which don't have stable reparsing, we add all MD5's */ public", "return": "void", "body": "@Test\n  /** Test that schemas which don't have stable reparsing, we add all MD5's */\n  public void testUpdateMd5Index()\n  {\n    final String schemaStr = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"A\\\",\\\"fields\\\":[\" +\n        \"{\\\"name\\\":\\\"J\\\",\\\"type\\\":\\\"string\\\",\\\"J1\\\":\\\"V1\\\",\\\"indexType\\\":\\\"V2\\\",\\\"d\\\":\" +\n        \"\\\"V3\\\",\\\"J3\\\":\\\"10000\\\"}]}\";\n\n    VersionedSchemaSet vschemaSet = new VersionedSchemaSet(true);\n    vschemaSet.add(\"testSchema\", (short)1, schemaStr);\n    Assert.assertEquals(vschemaSet.getIdToSchema().size(), 2);\n\n    vschemaSet.add(\"TestSchema\", (short)3, TEST_SCHEMA3_TEXT);\n    Assert.assertEquals(vschemaSet.getIdToSchema().size(), 3);\n    for (Map.Entry<SchemaId, VersionedSchema> e: vschemaSet.getIdToSchema().entrySet())\n    {\n      System.out.println(String.format(\"ids[%s] -> %s.%d\", e.getKey(), e.getValue().getSchemaBaseName(),\n                                       e.getValue().getVersion()));\n    }\n  }", "signature": "void testUpdateMd5Index()", "full_signature": "@Test /** Test that schemas which don't have stable reparsing, we add all MD5's */ public void testUpdateMd5Index()", "class_method_signature": "TestVersionedSchemaSet.testUpdateMd5Index()", "testcase": true, "constructor": false, "invocations": ["add", "assertEquals", "size", "getIdToSchema", "add", "assertEquals", "size", "getIdToSchema", "entrySet", "getIdToSchema", "println", "format", "getKey", "getSchemaBaseName", "getValue", "getVersion", "getValue"]}, "focal_class": {"identifier": "VersionedSchemaSet", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MAX_REHASH_NUM = 120;", "modifier": "private static final", "type": "int", "declarator": "MAX_REHASH_NUM = 120", "var_name": "MAX_REHASH_NUM"}, {"original_string": "private final ReadWriteLock _lock;", "modifier": "private final", "type": "ReadWriteLock", "declarator": "_lock", "var_name": "_lock"}, {"original_string": "private final Map<SchemaId, VersionedSchema> _idToSchema;", "modifier": "private final", "type": "Map<SchemaId, VersionedSchema>", "declarator": "_idToSchema", "var_name": "_idToSchema"}, {"original_string": "private final Map<String, SortedMap<VersionedSchemaId, VersionedSchema>> _nameToSchemas;", "modifier": "private final", "type": "Map<String, SortedMap<VersionedSchemaId, VersionedSchema>>", "declarator": "_nameToSchemas", "var_name": "_nameToSchemas"}, {"original_string": "private final Logger _log;", "modifier": "private final", "type": "Logger", "declarator": "_log", "var_name": "_log"}, {"original_string": "private final boolean _rehash;", "modifier": "private final", "type": "boolean", "declarator": "_rehash", "var_name": "_rehash"}], "methods": [{"identifier": "VersionedSchemaSet", "parameters": "()", "modifiers": "public", "return": "", "signature": " VersionedSchemaSet()", "full_signature": "public  VersionedSchemaSet()", "class_method_signature": "VersionedSchemaSet.VersionedSchemaSet()", "testcase": false, "constructor": true}, {"identifier": "VersionedSchemaSet", "parameters": "(boolean rehash)", "modifiers": "public", "return": "", "signature": " VersionedSchemaSet(boolean rehash)", "full_signature": "public  VersionedSchemaSet(boolean rehash)", "class_method_signature": "VersionedSchemaSet.VersionedSchemaSet(boolean rehash)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "VersionedSchemaSet.size()", "testcase": false, "constructor": false}, {"identifier": "has", "parameters": "(SchemaId id)", "modifiers": "public", "return": "boolean", "signature": "boolean has(SchemaId id)", "full_signature": "public boolean has(SchemaId id)", "class_method_signature": "VersionedSchemaSet.has(SchemaId id)", "testcase": false, "constructor": false}, {"identifier": "getById", "parameters": "(SchemaId id)", "modifiers": "public", "return": "VersionedSchema", "signature": "VersionedSchema getById(SchemaId id)", "full_signature": "public VersionedSchema getById(SchemaId id)", "class_method_signature": "VersionedSchemaSet.getById(SchemaId id)", "testcase": false, "constructor": false}, {"identifier": "getLatestVersionByName", "parameters": "(String schemaBaseName)", "modifiers": "public", "return": "VersionedSchema", "signature": "VersionedSchema getLatestVersionByName(String schemaBaseName)", "full_signature": "public VersionedSchema getLatestVersionByName(String schemaBaseName)", "class_method_signature": "VersionedSchemaSet.getLatestVersionByName(String schemaBaseName)", "testcase": false, "constructor": false}, {"identifier": "getAllVersionsByName", "parameters": "(String schemaBaseName)", "modifiers": "public", "return": "SortedMap<VersionedSchemaId, VersionedSchema>", "signature": "SortedMap<VersionedSchemaId, VersionedSchema> getAllVersionsByName(String schemaBaseName)", "full_signature": "public SortedMap<VersionedSchemaId, VersionedSchema> getAllVersionsByName(String schemaBaseName)", "class_method_signature": "VersionedSchemaSet.getAllVersionsByName(String schemaBaseName)", "testcase": false, "constructor": false}, {"identifier": "getAllVersionsWithSchemaId", "parameters": "(String sourceName)", "modifiers": "public", "return": "Map<SchemaId, VersionedSchema>", "signature": "Map<SchemaId, VersionedSchema> getAllVersionsWithSchemaId(String sourceName)", "full_signature": "public Map<SchemaId, VersionedSchema> getAllVersionsWithSchemaId(String sourceName)", "class_method_signature": "VersionedSchemaSet.getAllVersionsWithSchemaId(String sourceName)", "testcase": false, "constructor": false}, {"identifier": "getSchemaByNameVersion", "parameters": "(String baseName, short version)", "modifiers": "public", "return": "VersionedSchema", "signature": "VersionedSchema getSchemaByNameVersion(String baseName, short version)", "full_signature": "public VersionedSchema getSchemaByNameVersion(String baseName, short version)", "class_method_signature": "VersionedSchemaSet.getSchemaByNameVersion(String baseName, short version)", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "(VersionedSchemaId versionedSchemaId)", "modifiers": "public", "return": "VersionedSchema", "signature": "VersionedSchema getSchema(VersionedSchemaId versionedSchemaId)", "full_signature": "public VersionedSchema getSchema(VersionedSchemaId versionedSchemaId)", "class_method_signature": "VersionedSchemaSet.getSchema(VersionedSchemaId versionedSchemaId)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(String name, short version, String schemaStr)", "modifiers": "public", "return": "boolean", "signature": "boolean add(String name, short version, String schemaStr)", "full_signature": "public boolean add(String name, short version, String schemaStr)", "class_method_signature": "VersionedSchemaSet.add(String name, short version, String schemaStr)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(String name, short version, SchemaId id, String schemaStr, boolean keepOrigStr)", "modifiers": "public", "return": "boolean", "signature": "boolean add(String name, short version, SchemaId id, String schemaStr, boolean keepOrigStr)", "full_signature": "public boolean add(String name, short version, SchemaId id, String schemaStr, boolean keepOrigStr)", "class_method_signature": "VersionedSchemaSet.add(String name, short version, SchemaId id, String schemaStr, boolean keepOrigStr)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(String name, short version, SchemaId id, String schemaStr)", "modifiers": "public", "return": "boolean", "signature": "boolean add(String name, short version, SchemaId id, String schemaStr)", "full_signature": "public boolean add(String name, short version, SchemaId id, String schemaStr)", "class_method_signature": "VersionedSchemaSet.add(String name, short version, SchemaId id, String schemaStr)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(VersionedSchema schema)", "modifiers": "public", "return": "boolean", "signature": "boolean add(VersionedSchema schema)", "full_signature": "public boolean add(VersionedSchema schema)", "class_method_signature": "VersionedSchemaSet.add(VersionedSchema schema)", "testcase": false, "constructor": false}, {"identifier": "addSchemaInternal", "parameters": "(VersionedSchema schema,SchemaId id)", "modifiers": "private", "return": "void", "signature": "void addSchemaInternal(VersionedSchema schema,SchemaId id)", "full_signature": "private void addSchemaInternal(VersionedSchema schema,SchemaId id)", "class_method_signature": "VersionedSchemaSet.addSchemaInternal(VersionedSchema schema,SchemaId id)", "testcase": false, "constructor": false}, {"identifier": "updateMd5Index", "parameters": "(VersionedSchema schema, SchemaId id)", "modifiers": "", "return": "void", "signature": "void updateMd5Index(VersionedSchema schema, SchemaId id)", "full_signature": " void updateMd5Index(VersionedSchema schema, SchemaId id)", "class_method_signature": "VersionedSchemaSet.updateMd5Index(VersionedSchema schema, SchemaId id)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "VersionedSchemaSet.toString()", "testcase": false, "constructor": false}, {"identifier": "getSchemaBaseNames", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getSchemaBaseNames()", "full_signature": "public Set<String> getSchemaBaseNames()", "class_method_signature": "VersionedSchemaSet.getSchemaBaseNames()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "VersionedSchemaSet.clear()", "testcase": false, "constructor": false}, {"identifier": "getIdToSchema", "parameters": "()", "modifiers": "public", "return": "Map<SchemaId, VersionedSchema>", "signature": "Map<SchemaId, VersionedSchema> getIdToSchema()", "full_signature": "public Map<SchemaId, VersionedSchema> getIdToSchema()", "class_method_signature": "VersionedSchemaSet.getIdToSchema()", "testcase": false, "constructor": false}, {"identifier": "getNameToSchemas", "parameters": "()", "modifiers": "", "return": "Map<String, SortedMap<VersionedSchemaId, VersionedSchema>>", "signature": "Map<String, SortedMap<VersionedSchemaId, VersionedSchema>> getNameToSchemas()", "full_signature": " Map<String, SortedMap<VersionedSchemaId, VersionedSchema>> getNameToSchemas()", "class_method_signature": "VersionedSchemaSet.getNameToSchemas()", "testcase": false, "constructor": false}], "file": "databus-core/databus-core-schemas/src/main/java/com/linkedin/databus2/schemas/VersionedSchemaSet.java"}, "focal_method": {"identifier": "updateMd5Index", "parameters": "(VersionedSchema schema, SchemaId id)", "modifiers": "", "return": "void", "body": "void updateMd5Index(VersionedSchema schema, SchemaId id)\n  {\n    if (_rehash)\n    {\n      Schema avroSchema = schema.getSchema();\n      //Ensure that we include md5 of different variations of the schema\n      //TODO Remove once we move the client to Relay Protocol V4\n      Set<SchemaId> md5Ids = new HashSet<SchemaId>(MAX_REHASH_NUM);\n      md5Ids.add(id);\n      //re-parse and add md5 until md5's stop changing\n      for (int i = 0, numElems = 0; i < MAX_REHASH_NUM && numElems != md5Ids.size(); ++i)\n      {\n        _log.info(\"Registering md5 \" +  id + \" --> name=\" + schema.getSchemaBaseName() + \" version=\" + schema.getVersion());\n        _idToSchema.put(id, schema);\n        numElems = md5Ids.size();\n        avroSchema = Schema.parse(avroSchema.toString());\n        id = SchemaId.createWithMd5(avroSchema);\n        md5Ids.add(id);\n      }\n    }\n    else\n    {\n      _log.info(\"Registering md5 \" +  id + \" --> name=\" + schema.getSchemaBaseName() + \" version=\" + schema.getVersion());\n      _idToSchema.put(id, schema);\n    }\n  }", "signature": "void updateMd5Index(VersionedSchema schema, SchemaId id)", "full_signature": " void updateMd5Index(VersionedSchema schema, SchemaId id)", "class_method_signature": "VersionedSchemaSet.updateMd5Index(VersionedSchema schema, SchemaId id)", "testcase": false, "constructor": false, "invocations": ["getSchema", "add", "size", "info", "getSchemaBaseName", "getVersion", "put", "size", "parse", "toString", "createWithMd5", "add", "info", "getSchemaBaseName", "getVersion", "put"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}