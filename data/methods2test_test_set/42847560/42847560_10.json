{"test_class": {"identifier": "MediaTypeHeaderProviderTest", "superclass": "extends Assert", "interfaces": "", "fields": [], "file": "jaxrs-delegates/src/test/java/org/wso2/msf4j/delegates/MediaTypeHeaderProviderTest.java"}, "test_case": {"identifier": "testBadType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBadType() {\n        try {\n            new MediaTypeHeaderProvider().fromString(\"texthtml\");\n            fail(\"Parse exception must've been thrown\");\n        } catch (Exception pe) {\n            // expected\n        }\n\n    }", "signature": "void testBadType()", "full_signature": "@Test public void testBadType()", "class_method_signature": "MediaTypeHeaderProviderTest.testBadType()", "testcase": true, "constructor": false, "invocations": ["fromString", "fail"]}, "focal_class": {"identifier": "MediaTypeHeaderProvider", "superclass": "", "interfaces": "implements HeaderDelegate<MediaType>", "fields": [], "methods": [{"identifier": "fromString", "parameters": "(String mType)", "modifiers": "public", "return": "MediaType", "signature": "MediaType fromString(String mType)", "full_signature": "public MediaType fromString(String mType)", "class_method_signature": "MediaTypeHeaderProvider.fromString(String mType)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(MediaType type)", "modifiers": "public", "return": "String", "signature": "String toString(MediaType type)", "full_signature": "public String toString(MediaType type)", "class_method_signature": "MediaTypeHeaderProvider.toString(MediaType type)", "testcase": false, "constructor": false}], "file": "jaxrs-delegates/src/main/java/org/wso2/msf4j/delegates/MediaTypeHeaderProvider.java"}, "focal_method": {"identifier": "fromString", "parameters": "(String mType)", "modifiers": "public", "return": "MediaType", "body": "public MediaType fromString(String mType) {\n        if (mType == null) {\n            throw new IllegalArgumentException(\"Media type value can not be null\");\n        }\n\n        int i = mType.indexOf('/');\n        if (i == -1) {\n            throw new UnsupportedOperationException(\"Media types without subtype is not supported\");\n        }\n\n        int paramsStart = mType.indexOf(';', i + 1);\n        int end = paramsStart == -1 ? mType.length() : paramsStart;\n\n        String type = mType.substring(0, i);\n        String subtype = mType.substring(i + 1, end);\n\n        return new MediaType(type.trim().toLowerCase(Locale.US),\n                subtype.trim().toLowerCase(Locale.US));\n    }", "signature": "MediaType fromString(String mType)", "full_signature": "public MediaType fromString(String mType)", "class_method_signature": "MediaTypeHeaderProvider.fromString(String mType)", "testcase": false, "constructor": false, "invocations": ["indexOf", "indexOf", "length", "substring", "substring", "toLowerCase", "trim", "toLowerCase", "trim"]}, "repository": {"repo_id": 42847560, "url": "https://github.com/wso2/msf4j", "language": "Java", "is_fork": false, "fork_count": 337, "stargazer_count": 345, "size": 33285, "license": "licensed"}}