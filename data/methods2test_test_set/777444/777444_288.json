{"test_class": {"identifier": "GlassfishDetectorTest", "superclass": "extends BaseDetectorTest", "interfaces": "", "fields": [{"original_string": "ServerDetector detector = new GlassfishDetector();", "modifier": "", "type": "ServerDetector", "declarator": "detector = new GlassfishDetector()", "var_name": "detector"}, {"original_string": "private static String SERVER_MBEAN = \"com.sun.appserv:j2eeType=J2EEServer,type=bla\";", "modifier": "private static", "type": "String", "declarator": "SERVER_MBEAN = \"com.sun.appserv:j2eeType=J2EEServer,type=bla\"", "var_name": "SERVER_MBEAN"}], "file": "agent/core/src/test/java/org/jolokia/detector/GlassfishDetectorTest.java"}, "test_case": {"identifier": "detectFallback", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void detectFallback() throws InstanceNotFoundException, ReflectionException, AttributeNotFoundException, MBeanException, MalformedObjectNameException {\n        ObjectName serverMbean = new ObjectName(SERVER_MBEAN);\n        MBeanServer mockServer = createMock(MBeanServer.class);\n\n        expect(mockServer.queryNames(new ObjectName(\"com.sun.appserv:j2eeType=J2EEServer,*\"),null)).\n                andReturn(new HashSet<ObjectName>(Arrays.asList(serverMbean))).anyTimes();\n        expect(mockServer.isRegistered(serverMbean)).andStubReturn(true);\n        expect(mockServer.getAttribute(serverMbean, \"serverVersion\")).andReturn(\"GlassFish 3x\");\n        expect(mockServer.queryNames(new ObjectName(\"com.sun.appserver:type=Host,*\"),null)).\n                andReturn(new HashSet<ObjectName>(Arrays.asList(serverMbean))).anyTimes();\n        replay(mockServer);\n\n        ServerHandle info = detector.detect(getMBeanServerManager(mockServer));\n        assertEquals(info.getVersion(), \"3\");\n        assertEquals(info.getProduct(),\"glassfish\");\n    }", "signature": "void detectFallback()", "full_signature": "@Test public void detectFallback()", "class_method_signature": "GlassfishDetectorTest.detectFallback()", "testcase": true, "constructor": false, "invocations": ["createMock", "anyTimes", "andReturn", "expect", "queryNames", "asList", "andStubReturn", "expect", "isRegistered", "andReturn", "expect", "getAttribute", "anyTimes", "andReturn", "expect", "queryNames", "asList", "replay", "detect", "getMBeanServerManager", "assertEquals", "getVersion", "assertEquals", "getProduct"]}, "focal_class": {"identifier": "GlassfishDetector", "superclass": "extends AbstractServerDetector", "interfaces": "", "fields": [{"original_string": "private static final Pattern GLASSFISH_VERSION = Pattern.compile(\"^.*Glassfish.*\\\\sv?(.*?)$\",Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "GLASSFISH_VERSION = Pattern.compile(\"^.*Glassfish.*\\\\sv?(.*?)$\",Pattern.CASE_INSENSITIVE)", "var_name": "GLASSFISH_VERSION"}, {"original_string": "private static final Pattern GLASSFISH_FULL_VERSION = Pattern.compile(\"^.*Glassfish.*?\\\\sv?([.\\\\d]+).*$\",Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "GLASSFISH_FULL_VERSION = Pattern.compile(\"^.*Glassfish.*?\\\\sv?([.\\\\d]+).*$\",Pattern.CASE_INSENSITIVE)", "var_name": "GLASSFISH_FULL_VERSION"}, {"original_string": "private static final Pattern PAYARA_VERSION = Pattern.compile(\"^.*Payara.*\\\\sv?(.*?)$\",Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "PAYARA_VERSION = Pattern.compile(\"^.*Payara.*\\\\sv?(.*?)$\",Pattern.CASE_INSENSITIVE)", "var_name": "PAYARA_VERSION"}, {"original_string": "private static final Pattern PAYARA_FULL_VERSION = Pattern.compile(\"^.*Payara.*?\\\\sv?([.\\\\d]+).*$\",Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "PAYARA_FULL_VERSION = Pattern.compile(\"^.*Payara.*?\\\\sv?([.\\\\d]+).*$\",Pattern.CASE_INSENSITIVE)", "var_name": "PAYARA_FULL_VERSION"}, {"original_string": "private static final String GLASSFISH_NAME = \"glassfish\";", "modifier": "private static final", "type": "String", "declarator": "GLASSFISH_NAME = \"glassfish\"", "var_name": "GLASSFISH_NAME"}, {"original_string": "private static final String GLASSFISH_VENDOR_NAME = \"Oracle\";", "modifier": "private static final", "type": "String", "declarator": "GLASSFISH_VENDOR_NAME = \"Oracle\"", "var_name": "GLASSFISH_VENDOR_NAME"}, {"original_string": "private static final String PAYARA_NAME = \"Payara Server\";", "modifier": "private static final", "type": "String", "declarator": "PAYARA_NAME = \"Payara Server\"", "var_name": "PAYARA_NAME"}, {"original_string": "private static final String PAYARA_VENDOR_NAME = \"Payara Foundation\";", "modifier": "private static final", "type": "String", "declarator": "PAYARA_VENDOR_NAME = \"Payara Foundation\"", "var_name": "PAYARA_VENDOR_NAME"}, {"original_string": "private String serverName;", "modifier": "private", "type": "String", "declarator": "serverName", "var_name": "serverName"}, {"original_string": "private String vendorName;", "modifier": "private", "type": "String", "declarator": "vendorName", "var_name": "vendorName"}], "methods": [{"identifier": "detect", "parameters": "(MBeanServerExecutor pMBeanServerExecutor)", "modifiers": "public", "return": "ServerHandle", "signature": "ServerHandle detect(MBeanServerExecutor pMBeanServerExecutor)", "full_signature": "public ServerHandle detect(MBeanServerExecutor pMBeanServerExecutor)", "class_method_signature": "GlassfishDetector.detect(MBeanServerExecutor pMBeanServerExecutor)", "testcase": false, "constructor": false}, {"identifier": "detectVersion", "parameters": "(MBeanServerExecutor pMBeanServerExecutor)", "modifiers": "private", "return": "String", "signature": "String detectVersion(MBeanServerExecutor pMBeanServerExecutor)", "full_signature": "private String detectVersion(MBeanServerExecutor pMBeanServerExecutor)", "class_method_signature": "GlassfishDetector.detectVersion(MBeanServerExecutor pMBeanServerExecutor)", "testcase": false, "constructor": false}, {"identifier": "extractVersionFromFullVersion", "parameters": "(String pFullVersion)", "modifiers": "private", "return": "String", "signature": "String extractVersionFromFullVersion(String pFullVersion)", "full_signature": "private String extractVersionFromFullVersion(String pFullVersion)", "class_method_signature": "GlassfishDetector.extractVersionFromFullVersion(String pFullVersion)", "testcase": false, "constructor": false}, {"identifier": "isAmxBooted", "parameters": "(MBeanServerExecutor pServerManager)", "modifiers": "private", "return": "boolean", "signature": "boolean isAmxBooted(MBeanServerExecutor pServerManager)", "full_signature": "private boolean isAmxBooted(MBeanServerExecutor pServerManager)", "class_method_signature": "GlassfishDetector.isAmxBooted(MBeanServerExecutor pServerManager)", "testcase": false, "constructor": false}, {"identifier": "bootAmx", "parameters": "(MBeanServerExecutor pServers, final LogHandler pLoghandler)", "modifiers": "private synchronized", "return": "boolean", "signature": "boolean bootAmx(MBeanServerExecutor pServers, final LogHandler pLoghandler)", "full_signature": "private synchronized boolean bootAmx(MBeanServerExecutor pServers, final LogHandler pLoghandler)", "class_method_signature": "GlassfishDetector.bootAmx(MBeanServerExecutor pServers, final LogHandler pLoghandler)", "testcase": false, "constructor": false}, {"identifier": "getVersionFromFullVersion", "parameters": "(String pOriginalVersion,String pFullVersion)", "modifiers": "private", "return": "String", "signature": "String getVersionFromFullVersion(String pOriginalVersion,String pFullVersion)", "full_signature": "private String getVersionFromFullVersion(String pOriginalVersion,String pFullVersion)", "class_method_signature": "GlassfishDetector.getVersionFromFullVersion(String pOriginalVersion,String pFullVersion)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/detector/GlassfishDetector.java"}, "focal_method": {"identifier": "detect", "parameters": "(MBeanServerExecutor pMBeanServerExecutor)", "modifiers": "public", "return": "ServerHandle", "body": "public ServerHandle detect(MBeanServerExecutor pMBeanServerExecutor) {\n        String version = detectVersion(pMBeanServerExecutor);\n        if (version!= null) {\n            return new GlassfishServerHandle(version, new HashMap<String, String>());\n        } else {\n            return null;\n        }\n    }", "signature": "ServerHandle detect(MBeanServerExecutor pMBeanServerExecutor)", "full_signature": "public ServerHandle detect(MBeanServerExecutor pMBeanServerExecutor)", "class_method_signature": "GlassfishDetector.detect(MBeanServerExecutor pMBeanServerExecutor)", "testcase": false, "constructor": false, "invocations": ["detectVersion"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}