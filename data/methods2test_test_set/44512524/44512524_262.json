{"test_class": {"identifier": "DistributedTableMetadataManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HazelcastInstance hazelcastInstance;", "modifier": "private", "type": "HazelcastInstance", "declarator": "hazelcastInstance", "var_name": "hazelcastInstance"}, {"original_string": "private DistributedTableMetadataManager distributedTableMetadataManager;", "modifier": "private", "type": "DistributedTableMetadataManager", "declarator": "distributedTableMetadataManager", "var_name": "distributedTableMetadataManager"}, {"original_string": "private MockElasticsearchServer elasticsearchServer;", "modifier": "private", "type": "MockElasticsearchServer", "declarator": "elasticsearchServer", "var_name": "elasticsearchServer"}, {"original_string": "private IMap<String, Table> tableDataStore;", "modifier": "private", "type": "IMap<String, Table>", "declarator": "tableDataStore", "var_name": "tableDataStore"}], "file": "real-time/foxtrot/foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/impl/DistributedTableMetadataManagerTest.java"}, "test_case": {"identifier": "testGetMissingTable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetMissingTable() throws Exception {\n        Table response = distributedTableMetadataManager.get(TestUtils.TEST_TABLE + \"-missing\");\n        assertNull(response);\n    }", "signature": "void testGetMissingTable()", "full_signature": "@Test public void testGetMissingTable()", "class_method_signature": "DistributedTableMetadataManagerTest.testGetMissingTable()", "testcase": true, "constructor": false, "invocations": ["get", "assertNull"]}, "focal_class": {"identifier": "DistributedTableMetadataManager", "superclass": "", "interfaces": "implements TableMetadataManager", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DistributedTableMetadataManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DistributedTableMetadataManager.class)", "var_name": "logger"}, {"original_string": "public static final String DATA_MAP = \"tablemetadatamap\";", "modifier": "public static final", "type": "String", "declarator": "DATA_MAP = \"tablemetadatamap\"", "var_name": "DATA_MAP"}, {"original_string": "private final HazelcastConnection hazelcastConnection;", "modifier": "private final", "type": "HazelcastConnection", "declarator": "hazelcastConnection", "var_name": "hazelcastConnection"}, {"original_string": "private IMap<String, Table> tableDataStore;", "modifier": "private", "type": "IMap<String, Table>", "declarator": "tableDataStore", "var_name": "tableDataStore"}], "methods": [{"identifier": "DistributedTableMetadataManager", "parameters": "(HazelcastConnection hazelcastConnection,\n                                           ElasticsearchConnection elasticsearchConnection)", "modifiers": "public", "return": "", "signature": " DistributedTableMetadataManager(HazelcastConnection hazelcastConnection,\n                                           ElasticsearchConnection elasticsearchConnection)", "full_signature": "public  DistributedTableMetadataManager(HazelcastConnection hazelcastConnection,\n                                           ElasticsearchConnection elasticsearchConnection)", "class_method_signature": "DistributedTableMetadataManager.DistributedTableMetadataManager(HazelcastConnection hazelcastConnection,\n                                           ElasticsearchConnection elasticsearchConnection)", "testcase": false, "constructor": true}, {"identifier": "save", "parameters": "(Table table)", "modifiers": "@Override public", "return": "void", "signature": "void save(Table table)", "full_signature": "@Override public void save(Table table)", "class_method_signature": "DistributedTableMetadataManager.save(Table table)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String tableName)", "modifiers": "@Override public", "return": "Table", "signature": "Table get(String tableName)", "full_signature": "@Override public Table get(String tableName)", "class_method_signature": "DistributedTableMetadataManager.get(String tableName)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "List<Table>", "signature": "List<Table> get()", "full_signature": "@Override public List<Table> get()", "class_method_signature": "DistributedTableMetadataManager.get()", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(String tableName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists(String tableName)", "full_signature": "@Override public boolean exists(String tableName)", "class_method_signature": "DistributedTableMetadataManager.exists(String tableName)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String tableName)", "modifiers": "@Override public", "return": "void", "signature": "void delete(String tableName)", "full_signature": "@Override public void delete(String tableName)", "class_method_signature": "DistributedTableMetadataManager.delete(String tableName)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "DistributedTableMetadataManager.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "DistributedTableMetadataManager.stop()", "testcase": false, "constructor": false}], "file": "real-time/foxtrot/foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/impl/DistributedTableMetadataManager.java"}, "focal_method": {"identifier": "get", "parameters": "(String tableName)", "modifiers": "@Override public", "return": "Table", "body": "@Override\n    public Table get(String tableName) throws Exception {\n        logger.info(String.format(\"Getting Table : %s\", tableName));\n        if (tableDataStore.containsKey(tableName)) {\n            return tableDataStore.get(tableName);\n        }\n        return null;\n    }", "signature": "Table get(String tableName)", "full_signature": "@Override public Table get(String tableName)", "class_method_signature": "DistributedTableMetadataManager.get(String tableName)", "testcase": false, "constructor": false, "invocations": ["info", "format", "containsKey", "get"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}