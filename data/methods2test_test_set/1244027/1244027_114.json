{"test_class": {"identifier": "JcrMetaDataTest", "superclass": "extends MultiUseAbstractTest", "interfaces": "", "fields": [{"original_string": "private JcrMetaData metadata;", "modifier": "private", "type": "JcrMetaData", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private DriverInfo driverInfo;", "modifier": "private", "type": "DriverInfo", "declarator": "driverInfo", "var_name": "driverInfo"}, {"original_string": "@Mock\n    private JcrConnection connection;", "modifier": "@Mock\n    private", "type": "JcrConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock\n    private RepositoryDelegate delegate;", "modifier": "@Mock\n    private", "type": "RepositoryDelegate", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "@Mock\n    private ConnectionInfo connInfo;", "modifier": "@Mock\n    private", "type": "ConnectionInfo", "declarator": "connInfo", "var_name": "connInfo"}, {"original_string": "@Mock\n    private QueryResult queryResult;", "modifier": "@Mock\n    private", "type": "QueryResult", "declarator": "queryResult", "var_name": "queryResult"}, {"original_string": "private static final int NO_LIMIT = JcrMetaData.NO_LIMIT;", "modifier": "private static final", "type": "int", "declarator": "NO_LIMIT = JcrMetaData.NO_LIMIT", "var_name": "NO_LIMIT"}], "file": "modeshape-jdbc-local/src/test/java/org/modeshape/jdbc/JcrMetaDataTest.java"}, "test_case": {"identifier": "shouldImplementGetExportedKeys", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldImplementGetExportedKeys() throws Exception {\n        ResultSet result = metadata.getExportedKeys(null, null, null);\n        assertThat(result, is(notNullValue()));\n    }", "signature": "void shouldImplementGetExportedKeys()", "full_signature": "@Test public void shouldImplementGetExportedKeys()", "class_method_signature": "JcrMetaDataTest.shouldImplementGetExportedKeys()", "testcase": true, "constructor": false, "invocations": ["getExportedKeys", "assertThat", "is", "notNullValue"]}, "focal_class": {"identifier": "JcrMetaData", "superclass": "", "interfaces": "implements DatabaseMetaData", "fields": [{"original_string": "protected static final List<PropertyDefinition> PSEUDO_COLUMN_DEFNS;", "modifier": "protected static final", "type": "List<PropertyDefinition>", "declarator": "PSEUDO_COLUMN_DEFNS", "var_name": "PSEUDO_COLUMN_DEFNS"}, {"original_string": "protected static final List<String> PSEUDO_COLUMN_NAMES;", "modifier": "protected static final", "type": "List<String>", "declarator": "PSEUDO_COLUMN_NAMES", "var_name": "PSEUDO_COLUMN_NAMES"}, {"original_string": "protected static final String WILDCARD = \"%\";", "modifier": "protected static final", "type": "String", "declarator": "WILDCARD = \"%\"", "var_name": "WILDCARD"}, {"original_string": "protected static final Integer DEFAULT_ZERO = 0;", "modifier": "protected static final", "type": "Integer", "declarator": "DEFAULT_ZERO = 0", "var_name": "DEFAULT_ZERO"}, {"original_string": "protected static final int NO_LIMIT = 0;", "modifier": "protected static final", "type": "int", "declarator": "NO_LIMIT = 0", "var_name": "NO_LIMIT"}, {"original_string": "private JcrConnection connection;", "modifier": "private", "type": "JcrConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private String catalogName;", "modifier": "private", "type": "String", "declarator": "catalogName", "var_name": "catalogName"}], "methods": [{"identifier": "JcrMetaData", "parameters": "( JcrConnection connection )", "modifiers": "public", "return": "", "signature": " JcrMetaData( JcrConnection connection )", "full_signature": "public  JcrMetaData( JcrConnection connection )", "class_method_signature": "JcrMetaData.JcrMetaData( JcrConnection connection )", "testcase": false, "constructor": true}, {"identifier": "getPseudoColumns", "parameters": "( String catalog,\n                                       String schemaPattern,\n                                       String tableNamePattern,\n                                       String columnNamePattern )", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getPseudoColumns( String catalog,\n                                       String schemaPattern,\n                                       String tableNamePattern,\n                                       String columnNamePattern )", "full_signature": "@Override public ResultSet getPseudoColumns( String catalog,\n                                       String schemaPattern,\n                                       String tableNamePattern,\n                                       String columnNamePattern )", "class_method_signature": "JcrMetaData.getPseudoColumns( String catalog,\n                                       String schemaPattern,\n                                       String tableNamePattern,\n                                       String columnNamePattern )", "testcase": false, "constructor": false}, {"identifier": "generatedKeyAlwaysReturned", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean generatedKeyAlwaysReturned()", "full_signature": "@Override public boolean generatedKeyAlwaysReturned()", "class_method_signature": "JcrMetaData.generatedKeyAlwaysReturned()", "testcase": false, "constructor": false}, {"identifier": "getDriverMajorVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDriverMajorVersion()", "full_signature": "@Override public int getDriverMajorVersion()", "class_method_signature": "JcrMetaData.getDriverMajorVersion()", "testcase": false, "constructor": false}, {"identifier": "getDriverMinorVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDriverMinorVersion()", "full_signature": "@Override public int getDriverMinorVersion()", "class_method_signature": "JcrMetaData.getDriverMinorVersion()", "testcase": false, "constructor": false}, {"identifier": "getDriverName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDriverName()", "full_signature": "@Override public String getDriverName()", "class_method_signature": "JcrMetaData.getDriverName()", "testcase": false, "constructor": false}, {"identifier": "getDriverVersion", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDriverVersion()", "full_signature": "@Override public String getDriverVersion()", "class_method_signature": "JcrMetaData.getDriverVersion()", "testcase": false, "constructor": false}, {"identifier": "getDatabaseMajorVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDatabaseMajorVersion()", "full_signature": "@Override public int getDatabaseMajorVersion()", "class_method_signature": "JcrMetaData.getDatabaseMajorVersion()", "testcase": false, "constructor": false}, {"identifier": "getDatabaseMinorVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDatabaseMinorVersion()", "full_signature": "@Override public int getDatabaseMinorVersion()", "class_method_signature": "JcrMetaData.getDatabaseMinorVersion()", "testcase": false, "constructor": false}, {"identifier": "getDatabaseProductName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDatabaseProductName()", "full_signature": "@Override public String getDatabaseProductName()", "class_method_signature": "JcrMetaData.getDatabaseProductName()", "testcase": false, "constructor": false}, {"identifier": "getDatabaseProductUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDatabaseProductUrl()", "full_signature": "public String getDatabaseProductUrl()", "class_method_signature": "JcrMetaData.getDatabaseProductUrl()", "testcase": false, "constructor": false}, {"identifier": "getDatabaseProductVersion", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDatabaseProductVersion()", "full_signature": "@Override public String getDatabaseProductVersion()", "class_method_signature": "JcrMetaData.getDatabaseProductVersion()", "testcase": false, "constructor": false}, {"identifier": "getJDBCMajorVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getJDBCMajorVersion()", "full_signature": "@Override public int getJDBCMajorVersion()", "class_method_signature": "JcrMetaData.getJDBCMajorVersion()", "testcase": false, "constructor": false}, {"identifier": "getJDBCMinorVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getJDBCMinorVersion()", "full_signature": "@Override public int getJDBCMinorVersion()", "class_method_signature": "JcrMetaData.getJDBCMinorVersion()", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "@Override public", "return": "Connection", "signature": "Connection getConnection()", "full_signature": "@Override public Connection getConnection()", "class_method_signature": "JcrMetaData.getConnection()", "testcase": false, "constructor": false}, {"identifier": "isReadOnly", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadOnly()", "full_signature": "@Override public boolean isReadOnly()", "class_method_signature": "JcrMetaData.isReadOnly()", "testcase": false, "constructor": false}, {"identifier": "allProceduresAreCallable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean allProceduresAreCallable()", "full_signature": "@Override public boolean allProceduresAreCallable()", "class_method_signature": "JcrMetaData.allProceduresAreCallable()", "testcase": false, "constructor": false}, {"identifier": "allTablesAreSelectable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean allTablesAreSelectable()", "full_signature": "@Override public boolean allTablesAreSelectable()", "class_method_signature": "JcrMetaData.allTablesAreSelectable()", "testcase": false, "constructor": false}, {"identifier": "autoCommitFailureClosesAllResultSets", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean autoCommitFailureClosesAllResultSets()", "full_signature": "@Override public boolean autoCommitFailureClosesAllResultSets()", "class_method_signature": "JcrMetaData.autoCommitFailureClosesAllResultSets()", "testcase": false, "constructor": false}, {"identifier": "dataDefinitionCausesTransactionCommit", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean dataDefinitionCausesTransactionCommit()", "full_signature": "@Override public boolean dataDefinitionCausesTransactionCommit()", "class_method_signature": "JcrMetaData.dataDefinitionCausesTransactionCommit()", "testcase": false, "constructor": false}, {"identifier": "dataDefinitionIgnoredInTransactions", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean dataDefinitionIgnoredInTransactions()", "full_signature": "@Override public boolean dataDefinitionIgnoredInTransactions()", "class_method_signature": "JcrMetaData.dataDefinitionIgnoredInTransactions()", "testcase": false, "constructor": false}, {"identifier": "deletesAreDetected", "parameters": "( int type )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deletesAreDetected( int type )", "full_signature": "@Override public boolean deletesAreDetected( int type )", "class_method_signature": "JcrMetaData.deletesAreDetected( int type )", "testcase": false, "constructor": false}, {"identifier": "doesMaxRowSizeIncludeBlobs", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean doesMaxRowSizeIncludeBlobs()", "full_signature": "@Override public boolean doesMaxRowSizeIncludeBlobs()", "class_method_signature": "JcrMetaData.doesMaxRowSizeIncludeBlobs()", "testcase": false, "constructor": false}, {"identifier": "getAttributes", "parameters": "( String catalog,\n                                    String schemaPattern,\n                                    String typeNamePattern,\n                                    String attributeNamePattern )", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getAttributes( String catalog,\n                                    String schemaPattern,\n                                    String typeNamePattern,\n                                    String attributeNamePattern )", "full_signature": "@Override public ResultSet getAttributes( String catalog,\n                                    String schemaPattern,\n                                    String typeNamePattern,\n                                    String attributeNamePattern )", "class_method_signature": "JcrMetaData.getAttributes( String catalog,\n                                    String schemaPattern,\n                                    String typeNamePattern,\n                                    String attributeNamePattern )", "testcase": false, "constructor": false}, {"identifier": "getBestRowIdentifier", "parameters": "( String catalog,\n                                           String schema,\n                                           String table,\n                                           int scope,\n                                           boolean nullable )", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getBestRowIdentifier( String catalog,\n                                           String schema,\n                                           String table,\n                                           int scope,\n                                           boolean nullable )", "full_signature": "@Override public ResultSet getBestRowIdentifier( String catalog,\n                                           String schema,\n                                           String table,\n                                           int scope,\n                                           boolean nullable )", "class_method_signature": "JcrMetaData.getBestRowIdentifier( String catalog,\n                                           String schema,\n                                           String table,\n                                           int scope,\n                                           boolean nullable )", "testcase": false, "constructor": false}, {"identifier": "getCatalogSeparator", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCatalogSeparator()", "full_signature": "@Override public String getCatalogSeparator()", "class_method_signature": "JcrMetaData.getCatalogSeparator()", "testcase": false, "constructor": false}, {"identifier": "getCatalogTerm", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCatalogTerm()", "full_signature": "@Override public String getCatalogTerm()", "class_method_signature": "JcrMetaData.getCatalogTerm()", "testcase": false, "constructor": false}, {"identifier": "getCatalogs", "parameters": "()", "modifiers": "@SuppressWarnings( \"unchecked\" ) @Override public", "return": "ResultSet", "signature": "ResultSet getCatalogs()", "full_signature": "@SuppressWarnings( \"unchecked\" ) @Override public ResultSet getCatalogs()", "class_method_signature": "JcrMetaData.getCatalogs()", "testcase": false, "constructor": false}, {"identifier": "getClientInfoProperties", "parameters": "()", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getClientInfoProperties()", "full_signature": "@Override public ResultSet getClientInfoProperties()", "class_method_signature": "JcrMetaData.getClientInfoProperties()", "testcase": false, "constructor": false}, {"identifier": "getColumnPrivileges", "parameters": "( String catalog,\n                                          String schema,\n                                          String table,\n                                          String columnNamePattern )", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getColumnPrivileges( String catalog,\n                                          String schema,\n                                          String table,\n                                          String columnNamePattern )", "full_signature": "@Override public ResultSet getColumnPrivileges( String catalog,\n                                          String schema,\n                                          String table,\n                                          String columnNamePattern )", "class_method_signature": "JcrMetaData.getColumnPrivileges( String catalog,\n                                          String schema,\n                                          String table,\n                                          String columnNamePattern )", "testcase": false, "constructor": false}, {"identifier": "getColumns", "parameters": "( String catalog,\n                                 String schemaPattern,\n                                 String tableNamePattern,\n                                 String columnNamePattern )", "modifiers": "@SuppressWarnings( \"unchecked\" ) @Override public", "return": "ResultSet", "signature": "ResultSet getColumns( String catalog,\n                                 String schemaPattern,\n                                 String tableNamePattern,\n                                 String columnNamePattern )", "full_signature": "@SuppressWarnings( \"unchecked\" ) @Override public ResultSet getColumns( String catalog,\n                                 String schemaPattern,\n                                 String tableNamePattern,\n                                 String columnNamePattern )", "class_method_signature": "JcrMetaData.getColumns( String catalog,\n                                 String schemaPattern,\n                                 String tableNamePattern,\n                                 String columnNamePattern )", "testcase": false, "constructor": false}, {"identifier": "loadCurrentRow", "parameters": "( String tableName,\n                                         String columnName,\n                                         JcrType jcrtype,\n                                         Integer nullable,\n                                         boolean isMandatory,\n                                         int ordinal )", "modifiers": "private", "return": "List<Object>", "signature": "List<Object> loadCurrentRow( String tableName,\n                                         String columnName,\n                                         JcrType jcrtype,\n                                         Integer nullable,\n                                         boolean isMandatory,\n                                         int ordinal )", "full_signature": "private List<Object> loadCurrentRow( String tableName,\n                                         String columnName,\n                                         JcrType jcrtype,\n                                         Integer nullable,\n                                         boolean isMandatory,\n                                         int ordinal )", "class_method_signature": "JcrMetaData.loadCurrentRow( String tableName,\n                                         String columnName,\n                                         JcrType jcrtype,\n                                         Integer nullable,\n                                         boolean isMandatory,\n                                         int ordinal )", "testcase": false, "constructor": false}, {"identifier": "getCrossReference", "parameters": "( String parentCatalog,\n                                        String parentSchema,\n                                        String parentTable,\n                                        String foreignCatalog,\n                                        String foreignSchema,\n                                        String foreignTable )", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getCrossReference( String parentCatalog,\n                                        String parentSchema,\n                                        String parentTable,\n                                        String foreignCatalog,\n                                        String foreignSchema,\n                                        String foreignTable )", "full_signature": "@Override public ResultSet getCrossReference( String parentCatalog,\n                                        String parentSchema,\n                                        String parentTable,\n                                        String foreignCatalog,\n                                        String foreignSchema,\n                                        String foreignTable )", "class_method_signature": "JcrMetaData.getCrossReference( String parentCatalog,\n                                        String parentSchema,\n                                        String parentTable,\n                                        String foreignCatalog,\n                                        String foreignSchema,\n                                        String foreignTable )", "testcase": false, "constructor": false}, {"identifier": "getDefaultTransactionIsolation", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDefaultTransactionIsolation()", "full_signature": "@Override public int getDefaultTransactionIsolation()", "class_method_signature": "JcrMetaData.getDefaultTransactionIsolation()", "testcase": false, "constructor": false}, {"identifier": "getExportedKeys", "parameters": "( String catalog,\n                                      String schema,\n                                      String table )", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getExportedKeys( String catalog,\n                                      String schema,\n                                      String table )", "full_signature": "@Override public ResultSet getExportedKeys( String catalog,\n                                      String schema,\n                                      String table )", "class_method_signature": "JcrMetaData.getExportedKeys( String catalog,\n                                      String schema,\n                                      String table )", "testcase": false, "constructor": false}, {"identifier": "getExtraNameCharacters", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getExtraNameCharacters()", "full_signature": "@Override public String getExtraNameCharacters()", "class_method_signature": "JcrMetaData.getExtraNameCharacters()", "testcase": false, "constructor": false}, {"identifier": "getFunctionColumns", "parameters": "( String catalog,\n                                         String schemaPattern,\n                                         String functionNamePattern,\n                                         String columnNamePattern )", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getFunctionColumns( String catalog,\n                                         String schemaPattern,\n                                         String functionNamePattern,\n                                         String columnNamePattern )", "full_signature": "@Override public ResultSet getFunctionColumns( String catalog,\n                                         String schemaPattern,\n                                         String functionNamePattern,\n                                         String columnNamePattern )", "class_method_signature": "JcrMetaData.getFunctionColumns( String catalog,\n                                         String schemaPattern,\n                                         String functionNamePattern,\n                                         String columnNamePattern )", "testcase": false, "constructor": false}, {"identifier": "getFunctions", "parameters": "( String catalog,\n                                   String schemaPattern,\n                                   String functionNamePattern )", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getFunctions( String catalog,\n                                   String schemaPattern,\n                                   String functionNamePattern )", "full_signature": "@Override public ResultSet getFunctions( String catalog,\n                                   String schemaPattern,\n                                   String functionNamePattern )", "class_method_signature": "JcrMetaData.getFunctions( String catalog,\n                                   String schemaPattern,\n                                   String functionNamePattern )", "testcase": false, "constructor": false}, {"identifier": "getIdentifierQuoteString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getIdentifierQuoteString()", "full_signature": "@Override public String getIdentifierQuoteString()", "class_method_signature": "JcrMetaData.getIdentifierQuoteString()", "testcase": false, "constructor": false}, {"identifier": "getImportedKeys", "parameters": "( String catalog,\n                                      String schema,\n                                      String table )", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getImportedKeys( String catalog,\n                                      String schema,\n                                      String table )", "full_signature": "@Override public ResultSet getImportedKeys( String catalog,\n                                      String schema,\n                                      String table )", "class_method_signature": "JcrMetaData.getImportedKeys( String catalog,\n                                      String schema,\n                                      String table )", "testcase": false, "constructor": false}, {"identifier": "getIndexInfo", "parameters": "( String catalog,\n                                   String schema,\n                                   String tableNamePattern,\n                                   boolean unique,\n                                   boolean approximate )", "modifiers": "@SuppressWarnings( \"unchecked\" ) @Override public", "return": "ResultSet", "signature": "ResultSet getIndexInfo( String catalog,\n                                   String schema,\n                                   String tableNamePattern,\n                                   boolean unique,\n                                   boolean approximate )", "full_signature": "@SuppressWarnings( \"unchecked\" ) @Override public ResultSet getIndexInfo( String catalog,\n                                   String schema,\n                                   String tableNamePattern,\n                                   boolean unique,\n                                   boolean approximate )", "class_method_signature": "JcrMetaData.getIndexInfo( String catalog,\n                                   String schema,\n                                   String tableNamePattern,\n                                   boolean unique,\n                                   boolean approximate )", "testcase": false, "constructor": false}, {"identifier": "getMaxBinaryLiteralLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxBinaryLiteralLength()", "full_signature": "@Override public int getMaxBinaryLiteralLength()", "class_method_signature": "JcrMetaData.getMaxBinaryLiteralLength()", "testcase": false, "constructor": false}, {"identifier": "getMaxCatalogNameLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxCatalogNameLength()", "full_signature": "@Override public int getMaxCatalogNameLength()", "class_method_signature": "JcrMetaData.getMaxCatalogNameLength()", "testcase": false, "constructor": false}, {"identifier": "getMaxCharLiteralLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxCharLiteralLength()", "full_signature": "@Override public int getMaxCharLiteralLength()", "class_method_signature": "JcrMetaData.getMaxCharLiteralLength()", "testcase": false, "constructor": false}, {"identifier": "getMaxColumnNameLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxColumnNameLength()", "full_signature": "@Override public int getMaxColumnNameLength()", "class_method_signature": "JcrMetaData.getMaxColumnNameLength()", "testcase": false, "constructor": false}, {"identifier": "getMaxColumnsInGroupBy", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxColumnsInGroupBy()", "full_signature": "@Override public int getMaxColumnsInGroupBy()", "class_method_signature": "JcrMetaData.getMaxColumnsInGroupBy()", "testcase": false, "constructor": false}, {"identifier": "getMaxColumnsInIndex", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxColumnsInIndex()", "full_signature": "@Override public int getMaxColumnsInIndex()", "class_method_signature": "JcrMetaData.getMaxColumnsInIndex()", "testcase": false, "constructor": false}, {"identifier": "getMaxColumnsInOrderBy", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxColumnsInOrderBy()", "full_signature": "@Override public int getMaxColumnsInOrderBy()", "class_method_signature": "JcrMetaData.getMaxColumnsInOrderBy()", "testcase": false, "constructor": false}, {"identifier": "getMaxColumnsInSelect", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxColumnsInSelect()", "full_signature": "@Override public int getMaxColumnsInSelect()", "class_method_signature": "JcrMetaData.getMaxColumnsInSelect()", "testcase": false, "constructor": false}, {"identifier": "getMaxColumnsInTable", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxColumnsInTable()", "full_signature": "@Override public int getMaxColumnsInTable()", "class_method_signature": "JcrMetaData.getMaxColumnsInTable()", "testcase": false, "constructor": false}, {"identifier": "getMaxConnections", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxConnections()", "full_signature": "@Override public int getMaxConnections()", "class_method_signature": "JcrMetaData.getMaxConnections()", "testcase": false, "constructor": false}, {"identifier": "getMaxCursorNameLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxCursorNameLength()", "full_signature": "@Override public int getMaxCursorNameLength()", "class_method_signature": "JcrMetaData.getMaxCursorNameLength()", "testcase": false, "constructor": false}, {"identifier": "getMaxIndexLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxIndexLength()", "full_signature": "@Override public int getMaxIndexLength()", "class_method_signature": "JcrMetaData.getMaxIndexLength()", "testcase": false, "constructor": false}, {"identifier": "getMaxProcedureNameLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxProcedureNameLength()", "full_signature": "@Override public int getMaxProcedureNameLength()", "class_method_signature": "JcrMetaData.getMaxProcedureNameLength()", "testcase": false, "constructor": false}, {"identifier": "getMaxRowSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxRowSize()", "full_signature": "@Override public int getMaxRowSize()", "class_method_signature": "JcrMetaData.getMaxRowSize()", "testcase": false, "constructor": false}, {"identifier": "getMaxSchemaNameLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxSchemaNameLength()", "full_signature": "@Override public int getMaxSchemaNameLength()", "class_method_signature": "JcrMetaData.getMaxSchemaNameLength()", "testcase": false, "constructor": false}, {"identifier": "getMaxStatementLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxStatementLength()", "full_signature": "@Override public int getMaxStatementLength()", "class_method_signature": "JcrMetaData.getMaxStatementLength()", "testcase": false, "constructor": false}, {"identifier": "getMaxStatements", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxStatements()", "full_signature": "@Override public int getMaxStatements()", "class_method_signature": "JcrMetaData.getMaxStatements()", "testcase": false, "constructor": false}, {"identifier": "getMaxTableNameLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxTableNameLength()", "full_signature": "@Override public int getMaxTableNameLength()", "class_method_signature": "JcrMetaData.getMaxTableNameLength()", "testcase": false, "constructor": false}, {"identifier": "getMaxTablesInSelect", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxTablesInSelect()", "full_signature": "@Override public int getMaxTablesInSelect()", "class_method_signature": "JcrMetaData.getMaxTablesInSelect()", "testcase": false, "constructor": false}, {"identifier": "getMaxUserNameLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxUserNameLength()", "full_signature": "@Override public int getMaxUserNameLength()", "class_method_signature": "JcrMetaData.getMaxUserNameLength()", "testcase": false, "constructor": false}, {"identifier": "getNumericFunctions", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getNumericFunctions()", "full_signature": "@Override public String getNumericFunctions()", "class_method_signature": "JcrMetaData.getNumericFunctions()", "testcase": false, "constructor": false}, {"identifier": "getPrimaryKeys", "parameters": "( String catalog,\n                                     String schema,\n                                     String tableNamePattern )", "modifiers": "@SuppressWarnings( \"unchecked\" ) @Override public", "return": "ResultSet", "signature": "ResultSet getPrimaryKeys( String catalog,\n                                     String schema,\n                                     String tableNamePattern )", "full_signature": "@SuppressWarnings( \"unchecked\" ) @Override public ResultSet getPrimaryKeys( String catalog,\n                                     String schema,\n                                     String tableNamePattern )", "class_method_signature": "JcrMetaData.getPrimaryKeys( String catalog,\n                                     String schema,\n                                     String tableNamePattern )", "testcase": false, "constructor": false}, {"identifier": "getProcedureColumns", "parameters": "( String catalog,\n                                          String schemaPattern,\n                                          String procedureNamePattern,\n                                          String columnNamePattern )", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getProcedureColumns( String catalog,\n                                          String schemaPattern,\n                                          String procedureNamePattern,\n                                          String columnNamePattern )", "full_signature": "@Override public ResultSet getProcedureColumns( String catalog,\n                                          String schemaPattern,\n                                          String procedureNamePattern,\n                                          String columnNamePattern )", "class_method_signature": "JcrMetaData.getProcedureColumns( String catalog,\n                                          String schemaPattern,\n                                          String procedureNamePattern,\n                                          String columnNamePattern )", "testcase": false, "constructor": false}, {"identifier": "getProcedureTerm", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getProcedureTerm()", "full_signature": "@Override public String getProcedureTerm()", "class_method_signature": "JcrMetaData.getProcedureTerm()", "testcase": false, "constructor": false}, {"identifier": "getProcedures", "parameters": "( String catalog,\n                                    String schemaPattern,\n                                    String procedureNamePattern )", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getProcedures( String catalog,\n                                    String schemaPattern,\n                                    String procedureNamePattern )", "full_signature": "@Override public ResultSet getProcedures( String catalog,\n                                    String schemaPattern,\n                                    String procedureNamePattern )", "class_method_signature": "JcrMetaData.getProcedures( String catalog,\n                                    String schemaPattern,\n                                    String procedureNamePattern )", "testcase": false, "constructor": false}, {"identifier": "getResultSetHoldability", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getResultSetHoldability()", "full_signature": "@Override public int getResultSetHoldability()", "class_method_signature": "JcrMetaData.getResultSetHoldability()", "testcase": false, "constructor": false}, {"identifier": "getRowIdLifetime", "parameters": "()", "modifiers": "@Override public", "return": "RowIdLifetime", "signature": "RowIdLifetime getRowIdLifetime()", "full_signature": "@Override public RowIdLifetime getRowIdLifetime()", "class_method_signature": "JcrMetaData.getRowIdLifetime()", "testcase": false, "constructor": false}, {"identifier": "getSQLKeywords", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSQLKeywords()", "full_signature": "@Override public String getSQLKeywords()", "class_method_signature": "JcrMetaData.getSQLKeywords()", "testcase": false, "constructor": false}, {"identifier": "getSQLStateType", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSQLStateType()", "full_signature": "@Override public int getSQLStateType()", "class_method_signature": "JcrMetaData.getSQLStateType()", "testcase": false, "constructor": false}, {"identifier": "getSchemaTerm", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSchemaTerm()", "full_signature": "@Override public String getSchemaTerm()", "class_method_signature": "JcrMetaData.getSchemaTerm()", "testcase": false, "constructor": false}, {"identifier": "getSchemas", "parameters": "()", "modifiers": "@SuppressWarnings( \"unchecked\" ) @Override public", "return": "ResultSet", "signature": "ResultSet getSchemas()", "full_signature": "@SuppressWarnings( \"unchecked\" ) @Override public ResultSet getSchemas()", "class_method_signature": "JcrMetaData.getSchemas()", "testcase": false, "constructor": false}, {"identifier": "getSchemas", "parameters": "( String catalog,\n                                 String schemaPattern )", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getSchemas( String catalog,\n                                 String schemaPattern )", "full_signature": "@Override public ResultSet getSchemas( String catalog,\n                                 String schemaPattern )", "class_method_signature": "JcrMetaData.getSchemas( String catalog,\n                                 String schemaPattern )", "testcase": false, "constructor": false}, {"identifier": "getSearchStringEscape", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSearchStringEscape()", "full_signature": "@Override public String getSearchStringEscape()", "class_method_signature": "JcrMetaData.getSearchStringEscape()", "testcase": false, "constructor": false}, {"identifier": "getStringFunctions", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getStringFunctions()", "full_signature": "@Override public String getStringFunctions()", "class_method_signature": "JcrMetaData.getStringFunctions()", "testcase": false, "constructor": false}, {"identifier": "getSuperTables", "parameters": "( String catalog,\n                                     String schemaPattern,\n                                     String tableNamePattern )", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getSuperTables( String catalog,\n                                     String schemaPattern,\n                                     String tableNamePattern )", "full_signature": "@Override public ResultSet getSuperTables( String catalog,\n                                     String schemaPattern,\n                                     String tableNamePattern )", "class_method_signature": "JcrMetaData.getSuperTables( String catalog,\n                                     String schemaPattern,\n                                     String tableNamePattern )", "testcase": false, "constructor": false}, {"identifier": "getSuperTypes", "parameters": "( String catalog,\n                                    String schemaPattern,\n                                    String typeNamePattern )", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getSuperTypes( String catalog,\n                                    String schemaPattern,\n                                    String typeNamePattern )", "full_signature": "@Override public ResultSet getSuperTypes( String catalog,\n                                    String schemaPattern,\n                                    String typeNamePattern )", "class_method_signature": "JcrMetaData.getSuperTypes( String catalog,\n                                    String schemaPattern,\n                                    String typeNamePattern )", "testcase": false, "constructor": false}, {"identifier": "getSystemFunctions", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSystemFunctions()", "full_signature": "@Override public String getSystemFunctions()", "class_method_signature": "JcrMetaData.getSystemFunctions()", "testcase": false, "constructor": false}, {"identifier": "getTablePrivileges", "parameters": "( String catalog,\n                                         String schemaPattern,\n                                         String tableNamePattern )", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getTablePrivileges( String catalog,\n                                         String schemaPattern,\n                                         String tableNamePattern )", "full_signature": "@Override public ResultSet getTablePrivileges( String catalog,\n                                         String schemaPattern,\n                                         String tableNamePattern )", "class_method_signature": "JcrMetaData.getTablePrivileges( String catalog,\n                                         String schemaPattern,\n                                         String tableNamePattern )", "testcase": false, "constructor": false}, {"identifier": "getTableTypes", "parameters": "()", "modifiers": "@SuppressWarnings( \"unchecked\" ) @Override public", "return": "ResultSet", "signature": "ResultSet getTableTypes()", "full_signature": "@SuppressWarnings( \"unchecked\" ) @Override public ResultSet getTableTypes()", "class_method_signature": "JcrMetaData.getTableTypes()", "testcase": false, "constructor": false}, {"identifier": "getTables", "parameters": "( String catalog,\n                                String schemaPattern,\n                                String tableNamePattern,\n                                String[] types )", "modifiers": "@SuppressWarnings( \"unchecked\" ) @Override public", "return": "ResultSet", "signature": "ResultSet getTables( String catalog,\n                                String schemaPattern,\n                                String tableNamePattern,\n                                String[] types )", "full_signature": "@SuppressWarnings( \"unchecked\" ) @Override public ResultSet getTables( String catalog,\n                                String schemaPattern,\n                                String tableNamePattern,\n                                String[] types )", "class_method_signature": "JcrMetaData.getTables( String catalog,\n                                String schemaPattern,\n                                String tableNamePattern,\n                                String[] types )", "testcase": false, "constructor": false}, {"identifier": "getTimeDateFunctions", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getTimeDateFunctions()", "full_signature": "@Override public String getTimeDateFunctions()", "class_method_signature": "JcrMetaData.getTimeDateFunctions()", "testcase": false, "constructor": false}, {"identifier": "typeInfoRows", "parameters": "()", "modifiers": "private static", "return": "List<List<?>>", "signature": "List<List<?>> typeInfoRows()", "full_signature": "private static List<List<?>> typeInfoRows()", "class_method_signature": "JcrMetaData.typeInfoRows()", "testcase": false, "constructor": false}, {"identifier": "typeInfoRow", "parameters": "( String typeName,\n                                        int sqlType,\n                                        int precision,\n                                        Integer nullability,\n                                        boolean caseSensitive,\n                                        Integer searchable,\n                                        boolean isUnsigned,\n                                        boolean canBeAutoIncremented,\n                                        int minimumScale,\n                                        int maximumScale )", "modifiers": "private static", "return": "List<?>", "signature": "List<?> typeInfoRow( String typeName,\n                                        int sqlType,\n                                        int precision,\n                                        Integer nullability,\n                                        boolean caseSensitive,\n                                        Integer searchable,\n                                        boolean isUnsigned,\n                                        boolean canBeAutoIncremented,\n                                        int minimumScale,\n                                        int maximumScale )", "full_signature": "private static List<?> typeInfoRow( String typeName,\n                                        int sqlType,\n                                        int precision,\n                                        Integer nullability,\n                                        boolean caseSensitive,\n                                        Integer searchable,\n                                        boolean isUnsigned,\n                                        boolean canBeAutoIncremented,\n                                        int minimumScale,\n                                        int maximumScale )", "class_method_signature": "JcrMetaData.typeInfoRow( String typeName,\n                                        int sqlType,\n                                        int precision,\n                                        Integer nullability,\n                                        boolean caseSensitive,\n                                        Integer searchable,\n                                        boolean isUnsigned,\n                                        boolean canBeAutoIncremented,\n                                        int minimumScale,\n                                        int maximumScale )", "testcase": false, "constructor": false}, {"identifier": "getTypeInfo", "parameters": "()", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getTypeInfo()", "full_signature": "@Override public ResultSet getTypeInfo()", "class_method_signature": "JcrMetaData.getTypeInfo()", "testcase": false, "constructor": false}, {"identifier": "getUDTs", "parameters": "( String catalog,\n                              String schemaPattern,\n                              String typeNamePattern,\n                              int[] types )", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getUDTs( String catalog,\n                              String schemaPattern,\n                              String typeNamePattern,\n                              int[] types )", "full_signature": "@Override public ResultSet getUDTs( String catalog,\n                              String schemaPattern,\n                              String typeNamePattern,\n                              int[] types )", "class_method_signature": "JcrMetaData.getUDTs( String catalog,\n                              String schemaPattern,\n                              String typeNamePattern,\n                              int[] types )", "testcase": false, "constructor": false}, {"identifier": "getURL", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getURL()", "full_signature": "@Override public String getURL()", "class_method_signature": "JcrMetaData.getURL()", "testcase": false, "constructor": false}, {"identifier": "getUserName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getUserName()", "full_signature": "@Override public String getUserName()", "class_method_signature": "JcrMetaData.getUserName()", "testcase": false, "constructor": false}, {"identifier": "getVersionColumns", "parameters": "( String catalog,\n                                        String schema,\n                                        String table )", "modifiers": "@Override public", "return": "ResultSet", "signature": "ResultSet getVersionColumns( String catalog,\n                                        String schema,\n                                        String table )", "full_signature": "@Override public ResultSet getVersionColumns( String catalog,\n                                        String schema,\n                                        String table )", "class_method_signature": "JcrMetaData.getVersionColumns( String catalog,\n                                        String schema,\n                                        String table )", "testcase": false, "constructor": false}, {"identifier": "insertsAreDetected", "parameters": "( int type )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertsAreDetected( int type )", "full_signature": "@Override public boolean insertsAreDetected( int type )", "class_method_signature": "JcrMetaData.insertsAreDetected( int type )", "testcase": false, "constructor": false}, {"identifier": "isCatalogAtStart", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCatalogAtStart()", "full_signature": "@Override public boolean isCatalogAtStart()", "class_method_signature": "JcrMetaData.isCatalogAtStart()", "testcase": false, "constructor": false}, {"identifier": "locatorsUpdateCopy", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean locatorsUpdateCopy()", "full_signature": "@Override public boolean locatorsUpdateCopy()", "class_method_signature": "JcrMetaData.locatorsUpdateCopy()", "testcase": false, "constructor": false}, {"identifier": "nullPlusNonNullIsNull", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean nullPlusNonNullIsNull()", "full_signature": "@Override public boolean nullPlusNonNullIsNull()", "class_method_signature": "JcrMetaData.nullPlusNonNullIsNull()", "testcase": false, "constructor": false}, {"identifier": "nullsAreSortedAtEnd", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean nullsAreSortedAtEnd()", "full_signature": "@Override public boolean nullsAreSortedAtEnd()", "class_method_signature": "JcrMetaData.nullsAreSortedAtEnd()", "testcase": false, "constructor": false}, {"identifier": "nullsAreSortedAtStart", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean nullsAreSortedAtStart()", "full_signature": "@Override public boolean nullsAreSortedAtStart()", "class_method_signature": "JcrMetaData.nullsAreSortedAtStart()", "testcase": false, "constructor": false}, {"identifier": "nullsAreSortedHigh", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean nullsAreSortedHigh()", "full_signature": "@Override public boolean nullsAreSortedHigh()", "class_method_signature": "JcrMetaData.nullsAreSortedHigh()", "testcase": false, "constructor": false}, {"identifier": "nullsAreSortedLow", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean nullsAreSortedLow()", "full_signature": "@Override public boolean nullsAreSortedLow()", "class_method_signature": "JcrMetaData.nullsAreSortedLow()", "testcase": false, "constructor": false}, {"identifier": "othersDeletesAreVisible", "parameters": "( int type )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean othersDeletesAreVisible( int type )", "full_signature": "@Override public boolean othersDeletesAreVisible( int type )", "class_method_signature": "JcrMetaData.othersDeletesAreVisible( int type )", "testcase": false, "constructor": false}, {"identifier": "othersInsertsAreVisible", "parameters": "( int type )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean othersInsertsAreVisible( int type )", "full_signature": "@Override public boolean othersInsertsAreVisible( int type )", "class_method_signature": "JcrMetaData.othersInsertsAreVisible( int type )", "testcase": false, "constructor": false}, {"identifier": "othersUpdatesAreVisible", "parameters": "( int type )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean othersUpdatesAreVisible( int type )", "full_signature": "@Override public boolean othersUpdatesAreVisible( int type )", "class_method_signature": "JcrMetaData.othersUpdatesAreVisible( int type )", "testcase": false, "constructor": false}, {"identifier": "ownDeletesAreVisible", "parameters": "( int type )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean ownDeletesAreVisible( int type )", "full_signature": "@Override public boolean ownDeletesAreVisible( int type )", "class_method_signature": "JcrMetaData.ownDeletesAreVisible( int type )", "testcase": false, "constructor": false}, {"identifier": "ownInsertsAreVisible", "parameters": "( int type )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean ownInsertsAreVisible( int type )", "full_signature": "@Override public boolean ownInsertsAreVisible( int type )", "class_method_signature": "JcrMetaData.ownInsertsAreVisible( int type )", "testcase": false, "constructor": false}, {"identifier": "ownUpdatesAreVisible", "parameters": "( int type )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean ownUpdatesAreVisible( int type )", "full_signature": "@Override public boolean ownUpdatesAreVisible( int type )", "class_method_signature": "JcrMetaData.ownUpdatesAreVisible( int type )", "testcase": false, "constructor": false}, {"identifier": "storesLowerCaseIdentifiers", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean storesLowerCaseIdentifiers()", "full_signature": "@Override public boolean storesLowerCaseIdentifiers()", "class_method_signature": "JcrMetaData.storesLowerCaseIdentifiers()", "testcase": false, "constructor": false}, {"identifier": "storesLowerCaseQuotedIdentifiers", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean storesLowerCaseQuotedIdentifiers()", "full_signature": "@Override public boolean storesLowerCaseQuotedIdentifiers()", "class_method_signature": "JcrMetaData.storesLowerCaseQuotedIdentifiers()", "testcase": false, "constructor": false}, {"identifier": "storesMixedCaseIdentifiers", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean storesMixedCaseIdentifiers()", "full_signature": "@Override public boolean storesMixedCaseIdentifiers()", "class_method_signature": "JcrMetaData.storesMixedCaseIdentifiers()", "testcase": false, "constructor": false}, {"identifier": "storesMixedCaseQuotedIdentifiers", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean storesMixedCaseQuotedIdentifiers()", "full_signature": "@Override public boolean storesMixedCaseQuotedIdentifiers()", "class_method_signature": "JcrMetaData.storesMixedCaseQuotedIdentifiers()", "testcase": false, "constructor": false}, {"identifier": "storesUpperCaseIdentifiers", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean storesUpperCaseIdentifiers()", "full_signature": "@Override public boolean storesUpperCaseIdentifiers()", "class_method_signature": "JcrMetaData.storesUpperCaseIdentifiers()", "testcase": false, "constructor": false}, {"identifier": "storesUpperCaseQuotedIdentifiers", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean storesUpperCaseQuotedIdentifiers()", "full_signature": "@Override public boolean storesUpperCaseQuotedIdentifiers()", "class_method_signature": "JcrMetaData.storesUpperCaseQuotedIdentifiers()", "testcase": false, "constructor": false}, {"identifier": "supportsANSI92EntryLevelSQL", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsANSI92EntryLevelSQL()", "full_signature": "@Override public boolean supportsANSI92EntryLevelSQL()", "class_method_signature": "JcrMetaData.supportsANSI92EntryLevelSQL()", "testcase": false, "constructor": false}, {"identifier": "supportsANSI92FullSQL", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsANSI92FullSQL()", "full_signature": "@Override public boolean supportsANSI92FullSQL()", "class_method_signature": "JcrMetaData.supportsANSI92FullSQL()", "testcase": false, "constructor": false}, {"identifier": "supportsANSI92IntermediateSQL", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsANSI92IntermediateSQL()", "full_signature": "@Override public boolean supportsANSI92IntermediateSQL()", "class_method_signature": "JcrMetaData.supportsANSI92IntermediateSQL()", "testcase": false, "constructor": false}, {"identifier": "supportsAlterTableWithAddColumn", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsAlterTableWithAddColumn()", "full_signature": "@Override public boolean supportsAlterTableWithAddColumn()", "class_method_signature": "JcrMetaData.supportsAlterTableWithAddColumn()", "testcase": false, "constructor": false}, {"identifier": "supportsAlterTableWithDropColumn", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsAlterTableWithDropColumn()", "full_signature": "@Override public boolean supportsAlterTableWithDropColumn()", "class_method_signature": "JcrMetaData.supportsAlterTableWithDropColumn()", "testcase": false, "constructor": false}, {"identifier": "supportsBatchUpdates", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsBatchUpdates()", "full_signature": "@Override public boolean supportsBatchUpdates()", "class_method_signature": "JcrMetaData.supportsBatchUpdates()", "testcase": false, "constructor": false}, {"identifier": "supportsCatalogsInDataManipulation", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsCatalogsInDataManipulation()", "full_signature": "@Override public boolean supportsCatalogsInDataManipulation()", "class_method_signature": "JcrMetaData.supportsCatalogsInDataManipulation()", "testcase": false, "constructor": false}, {"identifier": "supportsCatalogsInIndexDefinitions", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsCatalogsInIndexDefinitions()", "full_signature": "@Override public boolean supportsCatalogsInIndexDefinitions()", "class_method_signature": "JcrMetaData.supportsCatalogsInIndexDefinitions()", "testcase": false, "constructor": false}, {"identifier": "supportsCatalogsInPrivilegeDefinitions", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsCatalogsInPrivilegeDefinitions()", "full_signature": "@Override public boolean supportsCatalogsInPrivilegeDefinitions()", "class_method_signature": "JcrMetaData.supportsCatalogsInPrivilegeDefinitions()", "testcase": false, "constructor": false}, {"identifier": "supportsCatalogsInProcedureCalls", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsCatalogsInProcedureCalls()", "full_signature": "@Override public boolean supportsCatalogsInProcedureCalls()", "class_method_signature": "JcrMetaData.supportsCatalogsInProcedureCalls()", "testcase": false, "constructor": false}, {"identifier": "supportsCatalogsInTableDefinitions", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsCatalogsInTableDefinitions()", "full_signature": "@Override public boolean supportsCatalogsInTableDefinitions()", "class_method_signature": "JcrMetaData.supportsCatalogsInTableDefinitions()", "testcase": false, "constructor": false}, {"identifier": "supportsColumnAliasing", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsColumnAliasing()", "full_signature": "@Override public boolean supportsColumnAliasing()", "class_method_signature": "JcrMetaData.supportsColumnAliasing()", "testcase": false, "constructor": false}, {"identifier": "supportsConvert", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsConvert()", "full_signature": "@Override public boolean supportsConvert()", "class_method_signature": "JcrMetaData.supportsConvert()", "testcase": false, "constructor": false}, {"identifier": "supportsConvert", "parameters": "( int fromType,\n                                    int toType )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsConvert( int fromType,\n                                    int toType )", "full_signature": "@Override public boolean supportsConvert( int fromType,\n                                    int toType )", "class_method_signature": "JcrMetaData.supportsConvert( int fromType,\n                                    int toType )", "testcase": false, "constructor": false}, {"identifier": "supportsCoreSQLGrammar", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsCoreSQLGrammar()", "full_signature": "@Override public boolean supportsCoreSQLGrammar()", "class_method_signature": "JcrMetaData.supportsCoreSQLGrammar()", "testcase": false, "constructor": false}, {"identifier": "supportsCorrelatedSubqueries", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsCorrelatedSubqueries()", "full_signature": "@Override public boolean supportsCorrelatedSubqueries()", "class_method_signature": "JcrMetaData.supportsCorrelatedSubqueries()", "testcase": false, "constructor": false}, {"identifier": "supportsDataDefinitionAndDataManipulationTransactions", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsDataDefinitionAndDataManipulationTransactions()", "full_signature": "@Override public boolean supportsDataDefinitionAndDataManipulationTransactions()", "class_method_signature": "JcrMetaData.supportsDataDefinitionAndDataManipulationTransactions()", "testcase": false, "constructor": false}, {"identifier": "supportsDataManipulationTransactionsOnly", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsDataManipulationTransactionsOnly()", "full_signature": "@Override public boolean supportsDataManipulationTransactionsOnly()", "class_method_signature": "JcrMetaData.supportsDataManipulationTransactionsOnly()", "testcase": false, "constructor": false}, {"identifier": "supportsDifferentTableCorrelationNames", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsDifferentTableCorrelationNames()", "full_signature": "@Override public boolean supportsDifferentTableCorrelationNames()", "class_method_signature": "JcrMetaData.supportsDifferentTableCorrelationNames()", "testcase": false, "constructor": false}, {"identifier": "supportsExpressionsInOrderBy", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsExpressionsInOrderBy()", "full_signature": "@Override public boolean supportsExpressionsInOrderBy()", "class_method_signature": "JcrMetaData.supportsExpressionsInOrderBy()", "testcase": false, "constructor": false}, {"identifier": "supportsExtendedSQLGrammar", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsExtendedSQLGrammar()", "full_signature": "@Override public boolean supportsExtendedSQLGrammar()", "class_method_signature": "JcrMetaData.supportsExtendedSQLGrammar()", "testcase": false, "constructor": false}, {"identifier": "supportsFullOuterJoins", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsFullOuterJoins()", "full_signature": "@Override public boolean supportsFullOuterJoins()", "class_method_signature": "JcrMetaData.supportsFullOuterJoins()", "testcase": false, "constructor": false}, {"identifier": "supportsGetGeneratedKeys", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsGetGeneratedKeys()", "full_signature": "@Override public boolean supportsGetGeneratedKeys()", "class_method_signature": "JcrMetaData.supportsGetGeneratedKeys()", "testcase": false, "constructor": false}, {"identifier": "supportsGroupBy", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsGroupBy()", "full_signature": "@Override public boolean supportsGroupBy()", "class_method_signature": "JcrMetaData.supportsGroupBy()", "testcase": false, "constructor": false}, {"identifier": "supportsGroupByBeyondSelect", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsGroupByBeyondSelect()", "full_signature": "@Override public boolean supportsGroupByBeyondSelect()", "class_method_signature": "JcrMetaData.supportsGroupByBeyondSelect()", "testcase": false, "constructor": false}, {"identifier": "supportsGroupByUnrelated", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsGroupByUnrelated()", "full_signature": "@Override public boolean supportsGroupByUnrelated()", "class_method_signature": "JcrMetaData.supportsGroupByUnrelated()", "testcase": false, "constructor": false}, {"identifier": "supportsIntegrityEnhancementFacility", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsIntegrityEnhancementFacility()", "full_signature": "@Override public boolean supportsIntegrityEnhancementFacility()", "class_method_signature": "JcrMetaData.supportsIntegrityEnhancementFacility()", "testcase": false, "constructor": false}, {"identifier": "supportsLikeEscapeClause", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsLikeEscapeClause()", "full_signature": "@Override public boolean supportsLikeEscapeClause()", "class_method_signature": "JcrMetaData.supportsLikeEscapeClause()", "testcase": false, "constructor": false}, {"identifier": "supportsLimitedOuterJoins", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsLimitedOuterJoins()", "full_signature": "@Override public boolean supportsLimitedOuterJoins()", "class_method_signature": "JcrMetaData.supportsLimitedOuterJoins()", "testcase": false, "constructor": false}, {"identifier": "supportsMinimumSQLGrammar", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsMinimumSQLGrammar()", "full_signature": "@Override public boolean supportsMinimumSQLGrammar()", "class_method_signature": "JcrMetaData.supportsMinimumSQLGrammar()", "testcase": false, "constructor": false}, {"identifier": "supportsMixedCaseIdentifiers", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsMixedCaseIdentifiers()", "full_signature": "@Override public boolean supportsMixedCaseIdentifiers()", "class_method_signature": "JcrMetaData.supportsMixedCaseIdentifiers()", "testcase": false, "constructor": false}, {"identifier": "supportsMixedCaseQuotedIdentifiers", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsMixedCaseQuotedIdentifiers()", "full_signature": "@Override public boolean supportsMixedCaseQuotedIdentifiers()", "class_method_signature": "JcrMetaData.supportsMixedCaseQuotedIdentifiers()", "testcase": false, "constructor": false}, {"identifier": "supportsMultipleOpenResults", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsMultipleOpenResults()", "full_signature": "@Override public boolean supportsMultipleOpenResults()", "class_method_signature": "JcrMetaData.supportsMultipleOpenResults()", "testcase": false, "constructor": false}, {"identifier": "supportsMultipleResultSets", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsMultipleResultSets()", "full_signature": "@Override public boolean supportsMultipleResultSets()", "class_method_signature": "JcrMetaData.supportsMultipleResultSets()", "testcase": false, "constructor": false}, {"identifier": "supportsMultipleTransactions", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsMultipleTransactions()", "full_signature": "@Override public boolean supportsMultipleTransactions()", "class_method_signature": "JcrMetaData.supportsMultipleTransactions()", "testcase": false, "constructor": false}, {"identifier": "supportsNamedParameters", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsNamedParameters()", "full_signature": "@Override public boolean supportsNamedParameters()", "class_method_signature": "JcrMetaData.supportsNamedParameters()", "testcase": false, "constructor": false}, {"identifier": "supportsNonNullableColumns", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsNonNullableColumns()", "full_signature": "@Override public boolean supportsNonNullableColumns()", "class_method_signature": "JcrMetaData.supportsNonNullableColumns()", "testcase": false, "constructor": false}, {"identifier": "supportsOpenCursorsAcrossCommit", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsOpenCursorsAcrossCommit()", "full_signature": "@Override public boolean supportsOpenCursorsAcrossCommit()", "class_method_signature": "JcrMetaData.supportsOpenCursorsAcrossCommit()", "testcase": false, "constructor": false}, {"identifier": "supportsOpenCursorsAcrossRollback", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsOpenCursorsAcrossRollback()", "full_signature": "@Override public boolean supportsOpenCursorsAcrossRollback()", "class_method_signature": "JcrMetaData.supportsOpenCursorsAcrossRollback()", "testcase": false, "constructor": false}, {"identifier": "supportsOpenStatementsAcrossCommit", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsOpenStatementsAcrossCommit()", "full_signature": "@Override public boolean supportsOpenStatementsAcrossCommit()", "class_method_signature": "JcrMetaData.supportsOpenStatementsAcrossCommit()", "testcase": false, "constructor": false}, {"identifier": "supportsOpenStatementsAcrossRollback", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsOpenStatementsAcrossRollback()", "full_signature": "@Override public boolean supportsOpenStatementsAcrossRollback()", "class_method_signature": "JcrMetaData.supportsOpenStatementsAcrossRollback()", "testcase": false, "constructor": false}, {"identifier": "supportsOrderByUnrelated", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsOrderByUnrelated()", "full_signature": "@Override public boolean supportsOrderByUnrelated()", "class_method_signature": "JcrMetaData.supportsOrderByUnrelated()", "testcase": false, "constructor": false}, {"identifier": "supportsOuterJoins", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsOuterJoins()", "full_signature": "@Override public boolean supportsOuterJoins()", "class_method_signature": "JcrMetaData.supportsOuterJoins()", "testcase": false, "constructor": false}, {"identifier": "supportsPositionedDelete", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsPositionedDelete()", "full_signature": "@Override public boolean supportsPositionedDelete()", "class_method_signature": "JcrMetaData.supportsPositionedDelete()", "testcase": false, "constructor": false}, {"identifier": "supportsPositionedUpdate", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsPositionedUpdate()", "full_signature": "@Override public boolean supportsPositionedUpdate()", "class_method_signature": "JcrMetaData.supportsPositionedUpdate()", "testcase": false, "constructor": false}, {"identifier": "supportsResultSetConcurrency", "parameters": "( int type,\n                                                 int concurrency )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsResultSetConcurrency( int type,\n                                                 int concurrency )", "full_signature": "@Override public boolean supportsResultSetConcurrency( int type,\n                                                 int concurrency )", "class_method_signature": "JcrMetaData.supportsResultSetConcurrency( int type,\n                                                 int concurrency )", "testcase": false, "constructor": false}, {"identifier": "supportsResultSetHoldability", "parameters": "( int holdability )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsResultSetHoldability( int holdability )", "full_signature": "@Override public boolean supportsResultSetHoldability( int holdability )", "class_method_signature": "JcrMetaData.supportsResultSetHoldability( int holdability )", "testcase": false, "constructor": false}, {"identifier": "supportsResultSetType", "parameters": "( int type )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsResultSetType( int type )", "full_signature": "@Override public boolean supportsResultSetType( int type )", "class_method_signature": "JcrMetaData.supportsResultSetType( int type )", "testcase": false, "constructor": false}, {"identifier": "supportsSavepoints", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsSavepoints()", "full_signature": "@Override public boolean supportsSavepoints()", "class_method_signature": "JcrMetaData.supportsSavepoints()", "testcase": false, "constructor": false}, {"identifier": "supportsSchemasInDataManipulation", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsSchemasInDataManipulation()", "full_signature": "@Override public boolean supportsSchemasInDataManipulation()", "class_method_signature": "JcrMetaData.supportsSchemasInDataManipulation()", "testcase": false, "constructor": false}, {"identifier": "supportsSchemasInIndexDefinitions", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsSchemasInIndexDefinitions()", "full_signature": "@Override public boolean supportsSchemasInIndexDefinitions()", "class_method_signature": "JcrMetaData.supportsSchemasInIndexDefinitions()", "testcase": false, "constructor": false}, {"identifier": "supportsSchemasInPrivilegeDefinitions", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsSchemasInPrivilegeDefinitions()", "full_signature": "@Override public boolean supportsSchemasInPrivilegeDefinitions()", "class_method_signature": "JcrMetaData.supportsSchemasInPrivilegeDefinitions()", "testcase": false, "constructor": false}, {"identifier": "supportsSchemasInProcedureCalls", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsSchemasInProcedureCalls()", "full_signature": "@Override public boolean supportsSchemasInProcedureCalls()", "class_method_signature": "JcrMetaData.supportsSchemasInProcedureCalls()", "testcase": false, "constructor": false}, {"identifier": "supportsSchemasInTableDefinitions", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsSchemasInTableDefinitions()", "full_signature": "@Override public boolean supportsSchemasInTableDefinitions()", "class_method_signature": "JcrMetaData.supportsSchemasInTableDefinitions()", "testcase": false, "constructor": false}, {"identifier": "supportsSelectForUpdate", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsSelectForUpdate()", "full_signature": "@Override public boolean supportsSelectForUpdate()", "class_method_signature": "JcrMetaData.supportsSelectForUpdate()", "testcase": false, "constructor": false}, {"identifier": "supportsStatementPooling", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsStatementPooling()", "full_signature": "@Override public boolean supportsStatementPooling()", "class_method_signature": "JcrMetaData.supportsStatementPooling()", "testcase": false, "constructor": false}, {"identifier": "supportsStoredFunctionsUsingCallSyntax", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsStoredFunctionsUsingCallSyntax()", "full_signature": "@Override public boolean supportsStoredFunctionsUsingCallSyntax()", "class_method_signature": "JcrMetaData.supportsStoredFunctionsUsingCallSyntax()", "testcase": false, "constructor": false}, {"identifier": "supportsStoredProcedures", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsStoredProcedures()", "full_signature": "@Override public boolean supportsStoredProcedures()", "class_method_signature": "JcrMetaData.supportsStoredProcedures()", "testcase": false, "constructor": false}, {"identifier": "supportsSubqueriesInComparisons", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsSubqueriesInComparisons()", "full_signature": "@Override public boolean supportsSubqueriesInComparisons()", "class_method_signature": "JcrMetaData.supportsSubqueriesInComparisons()", "testcase": false, "constructor": false}, {"identifier": "supportsSubqueriesInExists", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsSubqueriesInExists()", "full_signature": "@Override public boolean supportsSubqueriesInExists()", "class_method_signature": "JcrMetaData.supportsSubqueriesInExists()", "testcase": false, "constructor": false}, {"identifier": "supportsSubqueriesInIns", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsSubqueriesInIns()", "full_signature": "@Override public boolean supportsSubqueriesInIns()", "class_method_signature": "JcrMetaData.supportsSubqueriesInIns()", "testcase": false, "constructor": false}, {"identifier": "supportsSubqueriesInQuantifieds", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsSubqueriesInQuantifieds()", "full_signature": "@Override public boolean supportsSubqueriesInQuantifieds()", "class_method_signature": "JcrMetaData.supportsSubqueriesInQuantifieds()", "testcase": false, "constructor": false}, {"identifier": "supportsTableCorrelationNames", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsTableCorrelationNames()", "full_signature": "@Override public boolean supportsTableCorrelationNames()", "class_method_signature": "JcrMetaData.supportsTableCorrelationNames()", "testcase": false, "constructor": false}, {"identifier": "supportsTransactionIsolationLevel", "parameters": "( int level )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsTransactionIsolationLevel( int level )", "full_signature": "@Override public boolean supportsTransactionIsolationLevel( int level )", "class_method_signature": "JcrMetaData.supportsTransactionIsolationLevel( int level )", "testcase": false, "constructor": false}, {"identifier": "supportsTransactions", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsTransactions()", "full_signature": "@Override public boolean supportsTransactions()", "class_method_signature": "JcrMetaData.supportsTransactions()", "testcase": false, "constructor": false}, {"identifier": "supportsUnion", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsUnion()", "full_signature": "@Override public boolean supportsUnion()", "class_method_signature": "JcrMetaData.supportsUnion()", "testcase": false, "constructor": false}, {"identifier": "supportsUnionAll", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsUnionAll()", "full_signature": "@Override public boolean supportsUnionAll()", "class_method_signature": "JcrMetaData.supportsUnionAll()", "testcase": false, "constructor": false}, {"identifier": "updatesAreDetected", "parameters": "( int type )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updatesAreDetected( int type )", "full_signature": "@Override public boolean updatesAreDetected( int type )", "class_method_signature": "JcrMetaData.updatesAreDetected( int type )", "testcase": false, "constructor": false}, {"identifier": "usesLocalFilePerTable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean usesLocalFilePerTable()", "full_signature": "@Override public boolean usesLocalFilePerTable()", "class_method_signature": "JcrMetaData.usesLocalFilePerTable()", "testcase": false, "constructor": false}, {"identifier": "usesLocalFiles", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean usesLocalFiles()", "full_signature": "@Override public boolean usesLocalFiles()", "class_method_signature": "JcrMetaData.usesLocalFiles()", "testcase": false, "constructor": false}, {"identifier": "isWrapperFor", "parameters": "( Class<?> iface )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWrapperFor( Class<?> iface )", "full_signature": "@Override public boolean isWrapperFor( Class<?> iface )", "class_method_signature": "JcrMetaData.isWrapperFor( Class<?> iface )", "testcase": false, "constructor": false}, {"identifier": "unwrap", "parameters": "( Class<T> iface )", "modifiers": "@Override public", "return": "T", "signature": "T unwrap( Class<T> iface )", "full_signature": "@Override public T unwrap( Class<T> iface )", "class_method_signature": "JcrMetaData.unwrap( Class<T> iface )", "testcase": false, "constructor": false}, {"identifier": "filterNodeTypes", "parameters": "( String tableNamePattern )", "modifiers": "private", "return": "List<NodeType>", "signature": "List<NodeType> filterNodeTypes( String tableNamePattern )", "full_signature": "private List<NodeType> filterNodeTypes( String tableNamePattern )", "class_method_signature": "JcrMetaData.filterNodeTypes( String tableNamePattern )", "testcase": false, "constructor": false}, {"identifier": "filterPropertyDefnitions", "parameters": "( String columnNamePattern,\n                                                               NodeType nodeType )", "modifiers": "private", "return": "List<PropertyDefinition>", "signature": "List<PropertyDefinition> filterPropertyDefnitions( String columnNamePattern,\n                                                               NodeType nodeType )", "full_signature": "private List<PropertyDefinition> filterPropertyDefnitions( String columnNamePattern,\n                                                               NodeType nodeType )", "class_method_signature": "JcrMetaData.filterPropertyDefnitions( String columnNamePattern,\n                                                               NodeType nodeType )", "testcase": false, "constructor": false}, {"identifier": "addPropertyDefinitions", "parameters": "( List<PropertyDefinition> mapDefns,\n                                         NodeType nodetype )", "modifiers": "private", "return": "void", "signature": "void addPropertyDefinitions( List<PropertyDefinition> mapDefns,\n                                         NodeType nodetype )", "full_signature": "private void addPropertyDefinitions( List<PropertyDefinition> mapDefns,\n                                         NodeType nodetype )", "class_method_signature": "JcrMetaData.addPropertyDefinitions( List<PropertyDefinition> mapDefns,\n                                         NodeType nodetype )", "testcase": false, "constructor": false}], "file": "modeshape-jdbc-local/src/main/java/org/modeshape/jdbc/JcrMetaData.java"}, "focal_method": {"identifier": "getExportedKeys", "parameters": "( String catalog,\n                                      String schema,\n                                      String table )", "modifiers": "@Override public", "return": "ResultSet", "body": "@Override\n    public ResultSet getExportedKeys( String catalog,\n                                      String schema,\n                                      String table ) throws SQLException {\n        return getImportedKeys(catalog, schema, table); // empty, but same resultsetmetadata\n    }", "signature": "ResultSet getExportedKeys( String catalog,\n                                      String schema,\n                                      String table )", "full_signature": "@Override public ResultSet getExportedKeys( String catalog,\n                                      String schema,\n                                      String table )", "class_method_signature": "JcrMetaData.getExportedKeys( String catalog,\n                                      String schema,\n                                      String table )", "testcase": false, "constructor": false, "invocations": ["getImportedKeys"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}