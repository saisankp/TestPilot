{"test_class": {"identifier": "RrdpParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "rpki-validator/src/test/java/net/ripe/rpki/validator3/rrdp/RrdpParserTest.java"}, "test_case": {"identifier": "should_parse_snapshot", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_parse_snapshot() throws Exception {\n        new RrdpParser().parseSnapshot(\n                fileIS(\"rrdp/snapshot1.xml\"),\n                (snapshotInfo) -> {\n                    assertEquals(\"9df4b597-af9e-4dca-bdda-719cce2c4e28\", snapshotInfo.getSessionId());\n                    assertEquals(BigInteger.ONE, snapshotInfo.getSerial());\n                },\n                (snapshotObject) -> {\n                    assertEquals(\"rsync://bandito.ripe.net/repo/671570f06499fbd2d6ab76c4f22566fe49d5de60.cer\", snapshotObject.getUri());\n                }\n        );\n    }", "signature": "void should_parse_snapshot()", "full_signature": "@Test public void should_parse_snapshot()", "class_method_signature": "RrdpParserTest.should_parse_snapshot()", "testcase": true, "constructor": false, "invocations": ["parseSnapshot", "fileIS", "assertEquals", "getSessionId", "assertEquals", "getSerial", "assertEquals", "getUri"]}, "focal_class": {"identifier": "RrdpParser", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseSnapshot", "parameters": "(InputStream inputStream, Consumer<SnapshotHeader> processSnapshotHeader, Consumer<SnapshotObject> processSnapshotObject)", "modifiers": "public", "return": "void", "signature": "void parseSnapshot(InputStream inputStream, Consumer<SnapshotHeader> processSnapshotHeader, Consumer<SnapshotObject> processSnapshotObject)", "full_signature": "public void parseSnapshot(InputStream inputStream, Consumer<SnapshotHeader> processSnapshotHeader, Consumer<SnapshotObject> processSnapshotObject)", "class_method_signature": "RrdpParser.parseSnapshot(InputStream inputStream, Consumer<SnapshotHeader> processSnapshotHeader, Consumer<SnapshotObject> processSnapshotObject)", "testcase": false, "constructor": false}, {"identifier": "parseDelta", "parameters": "(InputStream inputStream, Consumer<DeltaHeader> processDeltaHeader, Consumer<DeltaElement> processDeltaElement)", "modifiers": "public", "return": "void", "signature": "void parseDelta(InputStream inputStream, Consumer<DeltaHeader> processDeltaHeader, Consumer<DeltaElement> processDeltaElement)", "full_signature": "public void parseDelta(InputStream inputStream, Consumer<DeltaHeader> processDeltaHeader, Consumer<DeltaElement> processDeltaElement)", "class_method_signature": "RrdpParser.parseDelta(InputStream inputStream, Consumer<DeltaHeader> processDeltaHeader, Consumer<DeltaElement> processDeltaElement)", "testcase": false, "constructor": false}, {"identifier": "notification", "parameters": "(final InputStream inputStream)", "modifiers": "public", "return": "Notification", "signature": "Notification notification(final InputStream inputStream)", "full_signature": "public Notification notification(final InputStream inputStream)", "class_method_signature": "RrdpParser.notification(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "getAttr", "parameters": "(final StartElement startElement, final String attrName, final String noAttrMessage)", "modifiers": "private", "return": "String", "signature": "String getAttr(final StartElement startElement, final String attrName, final String noAttrMessage)", "full_signature": "private String getAttr(final StartElement startElement, final String attrName, final String noAttrMessage)", "class_method_signature": "RrdpParser.getAttr(final StartElement startElement, final String attrName, final String noAttrMessage)", "testcase": false, "constructor": false}, {"identifier": "getAttr", "parameters": "(final StartElement startElement, final String attrName)", "modifiers": "private", "return": "String", "signature": "String getAttr(final StartElement startElement, final String attrName)", "full_signature": "private String getAttr(final StartElement startElement, final String attrName)", "class_method_signature": "RrdpParser.getAttr(final StartElement startElement, final String attrName)", "testcase": false, "constructor": false}], "file": "rpki-validator/src/main/java/net/ripe/rpki/validator3/rrdp/RrdpParser.java"}, "focal_method": {"identifier": "parseSnapshot", "parameters": "(InputStream inputStream, Consumer<SnapshotHeader> processSnapshotHeader, Consumer<SnapshotObject> processSnapshotObject)", "modifiers": "public", "return": "void", "body": "public void parseSnapshot(InputStream inputStream, Consumer<SnapshotHeader> processSnapshotHeader, Consumer<SnapshotObject> processSnapshotObject) {\n        try {\n            final XMLInputFactory factory = XMLInputFactory.newInstance();\n            final XMLEventReader eventReader = factory.createXMLEventReader(inputStream);\n\n            String sessionId = null;\n            BigInteger serial = null;\n            String uri = null;\n            StringBuilder base64 = new StringBuilder();\n            boolean inPublishElement = false;\n            boolean snapshotHeaderProcessed = false;\n\n            final Base64.Decoder decoder = Base64.getDecoder();\n\n            while (eventReader.hasNext()) {\n                final XMLEvent event = eventReader.nextEvent();\n\n                switch (event.getEventType()) {\n                    case XMLStreamConstants.START_ELEMENT:\n                        final StartElement startElement = event.asStartElement();\n                        final String qName = startElement.getName().getLocalPart().toLowerCase(Locale.ROOT);\n\n                        switch (qName) {\n                            case \"publish\":\n                                if (!snapshotHeaderProcessed) {\n                                    throw new RrdpException(ErrorCodes.RRDP_PARSE_ERROR, \"snapshot header not present before published objects\");\n                                }\n                                uri = getAttr(startElement, \"uri\", \"Uri is not present in 'publish' element\");\n                                inPublishElement = true;\n                                break;\n                            case \"snapshot\":\n                                serial = new BigInteger(getAttr(startElement, \"serial\", \"Notification serial is not present\"));\n                                sessionId = getAttr(startElement, \"session_id\", \"Session id is not present\");\n                                processSnapshotHeader.accept(new SnapshotHeader(sessionId, serial));\n                                snapshotHeaderProcessed = true;\n                                break;\n                        }\n                        break;\n\n                    case XMLStreamConstants.CHARACTERS:\n                        final Characters characters = event.asCharacters();\n                        if (inPublishElement) {\n                            final String thisBase64 = characters.getData();\n                            base64.append(thisBase64.replaceAll(\"\\\\s\", \"\"));\n                        }\n                        break;\n\n                    case XMLStreamConstants.END_ELEMENT:\n                        final EndElement endElement = event.asEndElement();\n                        final String qqName = endElement.getName().getLocalPart().toLowerCase(Locale.ROOT);\n                        if (\"publish\".equals(qqName)) {\n                            final byte[] decoded = decoder.decode(base64.toString());\n                            processSnapshotObject.accept(new SnapshotObject(decoded, uri));\n                            inPublishElement = false;\n                            base64 = new StringBuilder();\n                        }\n                        break;\n                }\n            }\n        } catch (XMLStreamException e) {\n            throw new RrdpException(\"Couldn't parse snapshot: \", e);\n        }\n    }", "signature": "void parseSnapshot(InputStream inputStream, Consumer<SnapshotHeader> processSnapshotHeader, Consumer<SnapshotObject> processSnapshotObject)", "full_signature": "public void parseSnapshot(InputStream inputStream, Consumer<SnapshotHeader> processSnapshotHeader, Consumer<SnapshotObject> processSnapshotObject)", "class_method_signature": "RrdpParser.parseSnapshot(InputStream inputStream, Consumer<SnapshotHeader> processSnapshotHeader, Consumer<SnapshotObject> processSnapshotObject)", "testcase": false, "constructor": false, "invocations": ["newInstance", "createXMLEventReader", "getDecoder", "hasNext", "nextEvent", "getEventType", "asStartElement", "toLowerCase", "getLocalPart", "getName", "getAttr", "getAttr", "getAttr", "accept", "asCharacters", "getData", "append", "replaceAll", "asEndElement", "toLowerCase", "getLocalPart", "getName", "equals", "decode", "toString", "accept"]}, "repository": {"repo_id": 104217624, "url": "https://github.com/RIPE-NCC/rpki-validator-3", "stars": 32, "created": "9/20/2017 1:15:05 PM +00:00", "updates": "2020-01-27T10:48:38+00:00", "fork": "False", "license": "licensed"}}