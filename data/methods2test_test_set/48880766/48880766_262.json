{"test_class": {"identifier": "NumberColumnTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double MISSING = DoubleColumnType.missingValueIndicator();", "modifier": "private static final", "type": "double", "declarator": "MISSING = DoubleColumnType.missingValueIndicator()", "var_name": "MISSING"}, {"original_string": "private static final DoublePredicate isPositiveOrZeroD = d -> d >= 0, isNegativeD = d -> d < 0;", "modifier": "private static final", "type": "DoublePredicate", "declarator": "isPositiveOrZeroD = d -> d >= 0", "var_name": "isPositiveOrZeroD"}, {"original_string": "private static final DoubleFunction<String> toStringD = d -> String.valueOf(d);", "modifier": "private static final", "type": "DoubleFunction<String>", "declarator": "toStringD = d -> String.valueOf(d)", "var_name": "toStringD"}, {"original_string": "private static final DoubleBinaryOperator sumD = (d1, d2) -> d1 + d2;", "modifier": "private static final", "type": "DoubleBinaryOperator", "declarator": "sumD = (d1, d2) -> d1 + d2", "var_name": "sumD"}], "file": "core/src/test/java/tech/tablesaw/api/NumberColumnTest.java"}, "test_case": {"identifier": "testSummarize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSummarize() {\n    IntColumn c = IntColumn.indexColumn(\"t\", 99, 1);\n    IntColumn c2 = c.copy();\n    c2.appendCell(\"\");\n    double c2Variance = c2.variance();\n    double cVariance = StatUtils.variance(c.asDoubleArray());\n    assertEquals(cVariance, c2Variance, 0.00001);\n    assertEquals(StatUtils.sumLog(c.asDoubleArray()), c2.sumOfLogs(), 0.00001);\n    assertEquals(StatUtils.sumSq(c.asDoubleArray()), c2.sumOfSquares(), 0.00001);\n    assertEquals(StatUtils.geometricMean(c.asDoubleArray()), c2.geometricMean(), 0.00001);\n    assertEquals(StatUtils.product(c.asDoubleArray()), c2.product(), 0.00001);\n    assertEquals(StatUtils.populationVariance(c.asDoubleArray()), c2.populationVariance(), 0.00001);\n    assertEquals(\n        new DescriptiveStatistics(c.asDoubleArray()).getQuadraticMean(),\n        c2.quadraticMean(),\n        0.00001);\n    assertEquals(\n        new DescriptiveStatistics(c.asDoubleArray()).getStandardDeviation(),\n        c2.standardDeviation(),\n        0.00001);\n    assertEquals(\n        new DescriptiveStatistics(c.asDoubleArray()).getKurtosis(), c2.kurtosis(), 0.00001);\n    assertEquals(\n        new DescriptiveStatistics(c.asDoubleArray()).getSkewness(), c2.skewness(), 0.00001);\n\n    assertEquals(StatUtils.variance(c.asDoubleArray()), c.variance(), 0.00001);\n    assertEquals(StatUtils.sumLog(c.asDoubleArray()), c.sumOfLogs(), 0.00001);\n    assertEquals(StatUtils.sumSq(c.asDoubleArray()), c.sumOfSquares(), 0.00001);\n    assertEquals(StatUtils.geometricMean(c.asDoubleArray()), c.geometricMean(), 0.00001);\n    assertEquals(StatUtils.product(c.asDoubleArray()), c.product(), 0.00001);\n    assertEquals(StatUtils.populationVariance(c.asDoubleArray()), c.populationVariance(), 0.00001);\n    assertEquals(\n        new DescriptiveStatistics(c.asDoubleArray()).getQuadraticMean(),\n        c.quadraticMean(),\n        0.00001);\n    assertEquals(\n        new DescriptiveStatistics(c.asDoubleArray()).getStandardDeviation(),\n        c.standardDeviation(),\n        0.00001);\n    assertEquals(new DescriptiveStatistics(c.asDoubleArray()).getKurtosis(), c.kurtosis(), 0.00001);\n    assertEquals(new DescriptiveStatistics(c.asDoubleArray()).getSkewness(), c.skewness(), 0.00001);\n  }", "signature": "void testSummarize()", "full_signature": "@Test public void testSummarize()", "class_method_signature": "NumberColumnTest.testSummarize()", "testcase": true, "constructor": false, "invocations": ["indexColumn", "copy", "appendCell", "variance", "variance", "asDoubleArray", "assertEquals", "assertEquals", "sumLog", "asDoubleArray", "sumOfLogs", "assertEquals", "sumSq", "asDoubleArray", "sumOfSquares", "assertEquals", "geometricMean", "asDoubleArray", "geometricMean", "assertEquals", "product", "asDoubleArray", "product", "assertEquals", "populationVariance", "asDoubleArray", "populationVariance", "assertEquals", "getQuadraticMean", "asDoubleArray", "quadraticMean", "assertEquals", "getStandardDeviation", "asDoubleArray", "standardDeviation", "assertEquals", "getKurtosis", "asDoubleArray", "kurtosis", "assertEquals", "getSkewness", "asDoubleArray", "skewness", "assertEquals", "variance", "asDoubleArray", "variance", "assertEquals", "sumLog", "asDoubleArray", "sumOfLogs", "assertEquals", "sumSq", "asDoubleArray", "sumOfSquares", "assertEquals", "geometricMean", "asDoubleArray", "geometricMean", "assertEquals", "product", "asDoubleArray", "product", "assertEquals", "populationVariance", "asDoubleArray", "populationVariance", "assertEquals", "getQuadraticMean", "asDoubleArray", "quadraticMean", "assertEquals", "getStandardDeviation", "asDoubleArray", "standardDeviation", "assertEquals", "getKurtosis", "asDoubleArray", "kurtosis", "assertEquals", "getSkewness", "asDoubleArray", "skewness"]}, "focal_class": {"identifier": "NumberColumn", "superclass": "extends AbstractColumn<C, T>", "interfaces": "implements NumericColumn<T>", "fields": [{"original_string": "private NumberColumnFormatter printFormatter = new NumberColumnFormatter();", "modifier": "private", "type": "NumberColumnFormatter", "declarator": "printFormatter = new NumberColumnFormatter()", "var_name": "printFormatter"}, {"original_string": "protected Locale locale;", "modifier": "protected", "type": "Locale", "declarator": "locale", "var_name": "locale"}, {"original_string": "protected final IntComparator comparator =\n      (r1, r2) -> {\n        final double f1 = getDouble(r1);\n        final double f2 = getDouble(r2);\n        return Double.compare(f1, f2);\n      };", "modifier": "protected final", "type": "IntComparator", "declarator": "comparator =\n      (r1, r2) -> {\n        final double f1 = getDouble(r1);\n        final double f2 = getDouble(r2);\n        return Double.compare(f1, f2);\n      }", "var_name": "comparator"}], "methods": [{"identifier": "NumberColumn", "parameters": "(final ColumnType type, final String name)", "modifiers": "protected", "return": "", "signature": " NumberColumn(final ColumnType type, final String name)", "full_signature": "protected  NumberColumn(final ColumnType type, final String name)", "class_method_signature": "NumberColumn.NumberColumn(final ColumnType type, final String name)", "testcase": false, "constructor": true}, {"identifier": "createCol", "parameters": "(final String name, int size)", "modifiers": "protected abstract", "return": "C", "signature": "C createCol(final String name, int size)", "full_signature": "protected abstract C createCol(final String name, int size)", "class_method_signature": "NumberColumn.createCol(final String name, int size)", "testcase": false, "constructor": false}, {"identifier": "createCol", "parameters": "(final String name)", "modifiers": "protected abstract", "return": "C", "signature": "C createCol(final String name)", "full_signature": "protected abstract C createCol(final String name)", "class_method_signature": "NumberColumn.createCol(final String name)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(DoublePredicate condition, NumberColumn<C, T> other)", "modifiers": "public", "return": "NumberColumn<C, T>", "signature": "NumberColumn<C, T> set(DoublePredicate condition, NumberColumn<C, T> other)", "full_signature": "public NumberColumn<C, T> set(DoublePredicate condition, NumberColumn<C, T> other)", "class_method_signature": "NumberColumn.set(DoublePredicate condition, NumberColumn<C, T> other)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(DoublePredicate condition, T newValue)", "modifiers": "public", "return": "NumberColumn<C, T>", "signature": "NumberColumn<C, T> set(DoublePredicate condition, T newValue)", "full_signature": "public NumberColumn<C, T> set(DoublePredicate condition, T newValue)", "class_method_signature": "NumberColumn.set(DoublePredicate condition, T newValue)", "testcase": false, "constructor": false}, {"identifier": "setPrintFormatter", "parameters": "(final NumberFormat format, final String missingValueString)", "modifiers": "public", "return": "void", "signature": "void setPrintFormatter(final NumberFormat format, final String missingValueString)", "full_signature": "public void setPrintFormatter(final NumberFormat format, final String missingValueString)", "class_method_signature": "NumberColumn.setPrintFormatter(final NumberFormat format, final String missingValueString)", "testcase": false, "constructor": false}, {"identifier": "setPrintFormatter", "parameters": "(final NumberColumnFormatter formatter)", "modifiers": "public", "return": "void", "signature": "void setPrintFormatter(final NumberColumnFormatter formatter)", "full_signature": "public void setPrintFormatter(final NumberColumnFormatter formatter)", "class_method_signature": "NumberColumn.setPrintFormatter(final NumberColumnFormatter formatter)", "testcase": false, "constructor": false}, {"identifier": "getPrintFormatter", "parameters": "()", "modifiers": "protected", "return": "NumberColumnFormatter", "signature": "NumberColumnFormatter getPrintFormatter()", "full_signature": "protected NumberColumnFormatter getPrintFormatter()", "class_method_signature": "NumberColumn.getPrintFormatter()", "testcase": false, "constructor": false}, {"identifier": "top", "parameters": "(final int n)", "modifiers": "public abstract", "return": "NumericColumn<T>", "signature": "NumericColumn<T> top(final int n)", "full_signature": "public abstract NumericColumn<T> top(final int n)", "class_method_signature": "NumberColumn.top(final int n)", "testcase": false, "constructor": false}, {"identifier": "bottom", "parameters": "(final int n)", "modifiers": "public abstract", "return": "NumericColumn<T>", "signature": "NumericColumn<T> bottom(final int n)", "full_signature": "public abstract NumericColumn<T> bottom(final int n)", "class_method_signature": "NumberColumn.bottom(final int n)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(final int row)", "modifiers": "@Override public", "return": "String", "signature": "String getString(final int row)", "full_signature": "@Override public String getString(final int row)", "class_method_signature": "NumberColumn.getString(final int row)", "testcase": false, "constructor": false}, {"identifier": "emptyCopy", "parameters": "()", "modifiers": "@Override public", "return": "C", "signature": "C emptyCopy()", "full_signature": "@Override public C emptyCopy()", "class_method_signature": "NumberColumn.emptyCopy()", "testcase": false, "constructor": false}, {"identifier": "emptyCopy", "parameters": "(final int rowSize)", "modifiers": "@Override public", "return": "C", "signature": "C emptyCopy(final int rowSize)", "full_signature": "@Override public C emptyCopy(final int rowSize)", "class_method_signature": "NumberColumn.emptyCopy(final int rowSize)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "public abstract", "return": "C", "signature": "C copy()", "full_signature": "public abstract C copy()", "class_method_signature": "NumberColumn.copy()", "testcase": false, "constructor": false}, {"identifier": "rowComparator", "parameters": "()", "modifiers": "@Override public", "return": "IntComparator", "signature": "IntComparator rowComparator()", "full_signature": "@Override public IntComparator rowComparator()", "class_method_signature": "NumberColumn.rowComparator()", "testcase": false, "constructor": false}, {"identifier": "byteSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int byteSize()", "full_signature": "@Override public int byteSize()", "class_method_signature": "NumberColumn.byteSize()", "testcase": false, "constructor": false}, {"identifier": "asBytes", "parameters": "(final int rowNumber)", "modifiers": "@Override public abstract", "return": "byte[]", "signature": "byte[] asBytes(final int rowNumber)", "full_signature": "@Override public abstract byte[] asBytes(final int rowNumber)", "class_method_signature": "NumberColumn.asBytes(final int rowNumber)", "testcase": false, "constructor": false}, {"identifier": "appendMissing", "parameters": "()", "modifiers": "@Override public abstract", "return": "C", "signature": "C appendMissing()", "full_signature": "@Override public abstract C appendMissing()", "class_method_signature": "NumberColumn.appendMissing()", "testcase": false, "constructor": false}, {"identifier": "countMissing", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int countMissing()", "full_signature": "@Override public int countMissing()", "class_method_signature": "NumberColumn.countMissing()", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/api/NumberColumn.java"}, "focal_method": {"identifier": "copy", "parameters": "()", "modifiers": "public abstract", "return": "C", "body": "public abstract C copy();", "signature": "C copy()", "full_signature": "public abstract C copy()", "class_method_signature": "NumberColumn.copy()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}