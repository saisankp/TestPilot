{"test_class": {"identifier": "GraphiteRabbitMQTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ConnectionFactory connectionFactory = mock(ConnectionFactory.class);", "modifier": "private final", "type": "ConnectionFactory", "declarator": "connectionFactory = mock(ConnectionFactory.class)", "var_name": "connectionFactory"}, {"original_string": "private final Connection connection = mock(Connection.class);", "modifier": "private final", "type": "Connection", "declarator": "connection = mock(Connection.class)", "var_name": "connection"}, {"original_string": "private final Channel channel = mock(Channel.class);", "modifier": "private final", "type": "Channel", "declarator": "channel = mock(Channel.class)", "var_name": "channel"}, {"original_string": "private final ConnectionFactory bogusConnectionFactory = mock(ConnectionFactory.class);", "modifier": "private final", "type": "ConnectionFactory", "declarator": "bogusConnectionFactory = mock(ConnectionFactory.class)", "var_name": "bogusConnectionFactory"}, {"original_string": "private final Connection bogusConnection = mock(Connection.class);", "modifier": "private final", "type": "Connection", "declarator": "bogusConnection = mock(Connection.class)", "var_name": "bogusConnection"}, {"original_string": "private final Channel bogusChannel = mock(Channel.class);", "modifier": "private final", "type": "Channel", "declarator": "bogusChannel = mock(Channel.class)", "var_name": "bogusChannel"}, {"original_string": "private final GraphiteRabbitMQ graphite = new GraphiteRabbitMQ(connectionFactory, \"graphite\");", "modifier": "private final", "type": "GraphiteRabbitMQ", "declarator": "graphite = new GraphiteRabbitMQ(connectionFactory, \"graphite\")", "var_name": "graphite"}], "file": "metrics-graphite/src/test/java/com/codahale/metrics/graphite/GraphiteRabbitMQTest.java"}, "test_case": {"identifier": "shouldFailWhenGraphiteHostUnavailable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldFailWhenGraphiteHostUnavailable() {\n        ConnectionFactory connectionFactory = new ConnectionFactory();\n        connectionFactory.setHost(\"some-unknown-host\");\n\n        try (GraphiteRabbitMQ unavailableGraphite = new GraphiteRabbitMQ(connectionFactory, \"graphite\")) {\n            unavailableGraphite.connect();\n            failBecauseExceptionWasNotThrown(UnknownHostException.class);\n        } catch (Exception e) {\n            assertThat(e.getMessage()).contains(\"some-unknown-host\");\n        }\n    }", "signature": "void shouldFailWhenGraphiteHostUnavailable()", "full_signature": "@Test public void shouldFailWhenGraphiteHostUnavailable()", "class_method_signature": "GraphiteRabbitMQTest.shouldFailWhenGraphiteHostUnavailable()", "testcase": true, "constructor": false, "invocations": ["setHost", "connect", "failBecauseExceptionWasNotThrown", "contains", "assertThat", "getMessage"]}, "focal_class": {"identifier": "GraphiteRabbitMQ", "superclass": "", "interfaces": "implements GraphiteSender", "fields": [{"original_string": "private static final Integer DEFAULT_RABBIT_CONNECTION_TIMEOUT_MS = 500;", "modifier": "private static final", "type": "Integer", "declarator": "DEFAULT_RABBIT_CONNECTION_TIMEOUT_MS = 500", "var_name": "DEFAULT_RABBIT_CONNECTION_TIMEOUT_MS"}, {"original_string": "private static final Integer DEFAULT_RABBIT_SOCKET_TIMEOUT_MS = 5000;", "modifier": "private static final", "type": "Integer", "declarator": "DEFAULT_RABBIT_SOCKET_TIMEOUT_MS = 5000", "var_name": "DEFAULT_RABBIT_SOCKET_TIMEOUT_MS"}, {"original_string": "private static final Integer DEFAULT_RABBIT_REQUESTED_HEARTBEAT_SEC = 10;", "modifier": "private static final", "type": "Integer", "declarator": "DEFAULT_RABBIT_REQUESTED_HEARTBEAT_SEC = 10", "var_name": "DEFAULT_RABBIT_REQUESTED_HEARTBEAT_SEC"}, {"original_string": "private ConnectionFactory connectionFactory;", "modifier": "private", "type": "ConnectionFactory", "declarator": "connectionFactory", "var_name": "connectionFactory"}, {"original_string": "private Connection connection;", "modifier": "private", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private Channel channel;", "modifier": "private", "type": "Channel", "declarator": "channel", "var_name": "channel"}, {"original_string": "private String exchange;", "modifier": "private", "type": "String", "declarator": "exchange", "var_name": "exchange"}, {"original_string": "private int failures;", "modifier": "private", "type": "int", "declarator": "failures", "var_name": "failures"}], "methods": [{"identifier": "GraphiteRabbitMQ", "parameters": "(final ConnectionFactory connectionFactory, final String exchange)", "modifiers": "public", "return": "", "signature": " GraphiteRabbitMQ(final ConnectionFactory connectionFactory, final String exchange)", "full_signature": "public  GraphiteRabbitMQ(final ConnectionFactory connectionFactory, final String exchange)", "class_method_signature": "GraphiteRabbitMQ.GraphiteRabbitMQ(final ConnectionFactory connectionFactory, final String exchange)", "testcase": false, "constructor": true}, {"identifier": "GraphiteRabbitMQ", "parameters": "(\n            final String rabbitHost,\n            final Integer rabbitPort,\n            final String rabbitUsername,\n            final String rabbitPassword,\n            final String exchange)", "modifiers": "public", "return": "", "signature": " GraphiteRabbitMQ(\n            final String rabbitHost,\n            final Integer rabbitPort,\n            final String rabbitUsername,\n            final String rabbitPassword,\n            final String exchange)", "full_signature": "public  GraphiteRabbitMQ(\n            final String rabbitHost,\n            final Integer rabbitPort,\n            final String rabbitUsername,\n            final String rabbitPassword,\n            final String exchange)", "class_method_signature": "GraphiteRabbitMQ.GraphiteRabbitMQ(\n            final String rabbitHost,\n            final Integer rabbitPort,\n            final String rabbitUsername,\n            final String rabbitPassword,\n            final String exchange)", "testcase": false, "constructor": true}, {"identifier": "GraphiteRabbitMQ", "parameters": "(\n            final String rabbitHost,\n            final Integer rabbitPort,\n            final String rabbitUsername,\n            final String rabbitPassword,\n            final String exchange,\n            final Integer rabbitConnectionTimeoutMS,\n            final Integer rabbitSocketTimeoutMS,\n            final Integer rabbitRequestedHeartbeatInSeconds)", "modifiers": "public", "return": "", "signature": " GraphiteRabbitMQ(\n            final String rabbitHost,\n            final Integer rabbitPort,\n            final String rabbitUsername,\n            final String rabbitPassword,\n            final String exchange,\n            final Integer rabbitConnectionTimeoutMS,\n            final Integer rabbitSocketTimeoutMS,\n            final Integer rabbitRequestedHeartbeatInSeconds)", "full_signature": "public  GraphiteRabbitMQ(\n            final String rabbitHost,\n            final Integer rabbitPort,\n            final String rabbitUsername,\n            final String rabbitPassword,\n            final String exchange,\n            final Integer rabbitConnectionTimeoutMS,\n            final Integer rabbitSocketTimeoutMS,\n            final Integer rabbitRequestedHeartbeatInSeconds)", "class_method_signature": "GraphiteRabbitMQ.GraphiteRabbitMQ(\n            final String rabbitHost,\n            final Integer rabbitPort,\n            final String rabbitUsername,\n            final String rabbitPassword,\n            final String exchange,\n            final Integer rabbitConnectionTimeoutMS,\n            final Integer rabbitSocketTimeoutMS,\n            final Integer rabbitRequestedHeartbeatInSeconds)", "testcase": false, "constructor": true}, {"identifier": "connect", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void connect()", "full_signature": "@Override public void connect()", "class_method_signature": "GraphiteRabbitMQ.connect()", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "@Override public boolean isConnected()", "class_method_signature": "GraphiteRabbitMQ.isConnected()", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(String name, String value, long timestamp)", "modifiers": "@Override public", "return": "void", "signature": "void send(String name, String value, long timestamp)", "full_signature": "@Override public void send(String name, String value, long timestamp)", "class_method_signature": "GraphiteRabbitMQ.send(String name, String value, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flush()", "full_signature": "@Override public void flush()", "class_method_signature": "GraphiteRabbitMQ.flush()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "GraphiteRabbitMQ.close()", "testcase": false, "constructor": false}, {"identifier": "getFailures", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getFailures()", "full_signature": "@Override public int getFailures()", "class_method_signature": "GraphiteRabbitMQ.getFailures()", "testcase": false, "constructor": false}, {"identifier": "sanitize", "parameters": "(String s)", "modifiers": "public", "return": "String", "signature": "String sanitize(String s)", "full_signature": "public String sanitize(String s)", "class_method_signature": "GraphiteRabbitMQ.sanitize(String s)", "testcase": false, "constructor": false}], "file": "metrics-graphite/src/main/java/com/codahale/metrics/graphite/GraphiteRabbitMQ.java"}, "focal_method": {"identifier": "connect", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void connect() throws IllegalStateException, IOException {\n        if (isConnected()) {\n            throw new IllegalStateException(\"Already connected\");\n        }\n\n        try {\n            connection = connectionFactory.newConnection();\n        } catch (TimeoutException e) {\n            throw new IllegalStateException(e);\n        }\n        channel = connection.createChannel();\n    }", "signature": "void connect()", "full_signature": "@Override public void connect()", "class_method_signature": "GraphiteRabbitMQ.connect()", "testcase": false, "constructor": false, "invocations": ["isConnected", "newConnection", "createChannel"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}