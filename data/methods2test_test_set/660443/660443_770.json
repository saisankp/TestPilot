{"test_class": {"identifier": "MinimalPathIteratorTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "public SimpleGraph g;", "modifier": "public", "type": "SimpleGraph", "declarator": "g", "var_name": "g"}], "file": "legacy/src/test/java/org/openscience/cdk/graph/MinimalPathIteratorTest.java"}, "test_case": {"identifier": "testMinimalPathIterator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMinimalPathIterator() {\n        int count = 0;\n        for (MinimalPathIterator i = new MinimalPathIterator(g, \"a\", \"l\"); i.hasNext();) {\n            Assert.assertTrue(((List) i.next()).size() == 5);\n            count++;\n        }\n        Assert.assertEquals(10, count);\n    }", "signature": "void testMinimalPathIterator()", "full_signature": "@Test public void testMinimalPathIterator()", "class_method_signature": "MinimalPathIteratorTest.testMinimalPathIterator()", "testcase": true, "constructor": false, "invocations": ["hasNext", "assertTrue", "size", "next", "assertEquals"]}, "focal_class": {"identifier": "MinimalPathIterator", "superclass": "", "interfaces": "implements Iterator", "fields": [{"original_string": "private Object        sourceVertex, targetVertex;", "modifier": "private", "type": "Object", "declarator": "sourceVertex", "var_name": "sourceVertex"}, {"original_string": "private Graph         g;", "modifier": "private", "type": "Graph", "declarator": "g", "var_name": "g"}, {"original_string": "private DirectedGraph shortestPathGraph;", "modifier": "private", "type": "DirectedGraph", "declarator": "shortestPathGraph", "var_name": "shortestPathGraph"}, {"original_string": "private Stack         edgeIteratorStack;", "modifier": "private", "type": "Stack", "declarator": "edgeIteratorStack", "var_name": "edgeIteratorStack"}, {"original_string": "private Stack         vertexStack;", "modifier": "private", "type": "Stack", "declarator": "vertexStack", "var_name": "vertexStack"}, {"original_string": "private Object        next;", "modifier": "private", "type": "Object", "declarator": "next", "var_name": "next"}], "methods": [{"identifier": "MinimalPathIterator", "parameters": "(SimpleGraph g, Object sourceVertex, Object targetVertex)", "modifiers": "public", "return": "", "signature": " MinimalPathIterator(SimpleGraph g, Object sourceVertex, Object targetVertex)", "full_signature": "public  MinimalPathIterator(SimpleGraph g, Object sourceVertex, Object targetVertex)", "class_method_signature": "MinimalPathIterator.MinimalPathIterator(SimpleGraph g, Object sourceVertex, Object targetVertex)", "testcase": false, "constructor": true}, {"identifier": "createShortestPathGraph", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createShortestPathGraph()", "full_signature": "private void createShortestPathGraph()", "class_method_signature": "MinimalPathIterator.createShortestPathGraph()", "testcase": false, "constructor": false}, {"identifier": "hasNext", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNext()", "full_signature": "@Override public boolean hasNext()", "class_method_signature": "MinimalPathIterator.hasNext()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object next()", "full_signature": "@Override public Object next()", "class_method_signature": "MinimalPathIterator.next()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void remove()", "full_signature": "@Override public void remove()", "class_method_signature": "MinimalPathIterator.remove()", "testcase": false, "constructor": false}, {"identifier": "edgeList", "parameters": "(Graph g, List vertexList)", "modifiers": "private", "return": "List", "signature": "List edgeList(Graph g, List vertexList)", "full_signature": "private List edgeList(Graph g, List vertexList)", "class_method_signature": "MinimalPathIterator.edgeList(Graph g, List vertexList)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/graph/MinimalPathIterator.java"}, "focal_method": {"identifier": "MinimalPathIterator", "parameters": "(SimpleGraph g, Object sourceVertex, Object targetVertex)", "modifiers": "public", "return": "", "body": "public MinimalPathIterator(SimpleGraph g, Object sourceVertex, Object targetVertex) {\n\n        this.g = g;\n\n        this.sourceVertex = sourceVertex;\n        this.targetVertex = targetVertex;\n\n        createShortestPathGraph();\n    }", "signature": " MinimalPathIterator(SimpleGraph g, Object sourceVertex, Object targetVertex)", "full_signature": "public  MinimalPathIterator(SimpleGraph g, Object sourceVertex, Object targetVertex)", "class_method_signature": "MinimalPathIterator.MinimalPathIterator(SimpleGraph g, Object sourceVertex, Object targetVertex)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}