{"test_class": {"identifier": "PendingRoleMembershipApprovalNotificationTaskTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zms/src/test/java/com/yahoo/athenz/zms/notification/PendingRoleMembershipApprovalNotificationTaskTest.java"}, "test_case": {"identifier": "testSendPendingMembershipApprovalReminders", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSendPendingMembershipApprovalReminders() {\n\n        DBService dbsvc = Mockito.mock(DBService.class);\n        NotificationService mockNotificationService =  Mockito.mock(NotificationService.class);\n        NotificationServiceFactory testfact = () -> mockNotificationService;\n\n        // we're going to return null for our first thread which will\n        // run during init call and then the real data for the second\n        // call\n\n        Mockito.when(dbsvc.getPendingMembershipApproverRoles(1))\n                .thenReturn(null)\n                .thenReturn(Collections.singleton(\"user.joe\"));\n\n        NotificationManager notificationManager = getNotificationManager(dbsvc, testfact);\n\n        ZMSTestUtils.sleep(1000);\n\n        PendingRoleMembershipApprovalNotificationTask reminder = new PendingRoleMembershipApprovalNotificationTask(dbsvc, 0, \"\", USER_DOMAIN_PREFIX);\n        List<Notification> notifications = reminder.getNotifications();\n\n        // Verify contents of notification is as expected\n        assertEquals(notifications.size(), 1);\n        Notification expectedNotification = new Notification();\n        expectedNotification.setNotificationToEmailConverter(new PendingRoleMembershipApprovalNotificationTask.PendingRoleMembershipApprovalNotificationToEmailConverter());\n        expectedNotification.addRecipient(\"user.joe\");\n        expectedNotification.setType(\"pending_role_membership_approval\");\n        assertEquals(notifications.get(0), expectedNotification);\n        notificationManager.shutdown();\n    }", "signature": "void testSendPendingMembershipApprovalReminders()", "full_signature": "@Test public void testSendPendingMembershipApprovalReminders()", "class_method_signature": "PendingRoleMembershipApprovalNotificationTaskTest.testSendPendingMembershipApprovalReminders()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "thenReturn", "when", "getPendingMembershipApproverRoles", "singleton", "getNotificationManager", "sleep", "getNotifications", "assertEquals", "size", "setNotificationToEmailConverter", "addRecipient", "setType", "assertEquals", "get", "shutdown"]}, "focal_class": {"identifier": "PendingRoleMembershipApprovalNotificationTask", "superclass": "", "interfaces": "implements NotificationTask", "fields": [{"original_string": "private final DBService dbService;", "modifier": "private final", "type": "DBService", "declarator": "dbService", "var_name": "dbService"}, {"original_string": "private final int pendingRoleMemberLifespan;", "modifier": "private final", "type": "int", "declarator": "pendingRoleMemberLifespan", "var_name": "pendingRoleMemberLifespan"}, {"original_string": "private final String monitorIdentity;", "modifier": "private final", "type": "String", "declarator": "monitorIdentity", "var_name": "monitorIdentity"}, {"original_string": "private NotificationCommon notificationCommon;", "modifier": "private", "type": "NotificationCommon", "declarator": "notificationCommon", "var_name": "notificationCommon"}, {"original_string": "private final static String DESCRIPTION = \"pending role membership approvals reminders\";", "modifier": "private final static", "type": "String", "declarator": "DESCRIPTION = \"pending role membership approvals reminders\"", "var_name": "DESCRIPTION"}, {"original_string": "private final static String NOTIFICATION_TYPE = \"pending_role_membership_approval\";", "modifier": "private final static", "type": "String", "declarator": "NOTIFICATION_TYPE = \"pending_role_membership_approval\"", "var_name": "NOTIFICATION_TYPE"}, {"original_string": "private final PendingRoleMembershipApprovalNotificationToEmailConverter pendingMembershipApprovalNotificationToEmailConverter;", "modifier": "private final", "type": "PendingRoleMembershipApprovalNotificationToEmailConverter", "declarator": "pendingMembershipApprovalNotificationToEmailConverter", "var_name": "pendingMembershipApprovalNotificationToEmailConverter"}], "methods": [{"identifier": "PendingRoleMembershipApprovalNotificationTask", "parameters": "(DBService dbService, int pendingRoleMemberLifespan, String monitorIdentity, String userDomainPrefix)", "modifiers": "public", "return": "", "signature": " PendingRoleMembershipApprovalNotificationTask(DBService dbService, int pendingRoleMemberLifespan, String monitorIdentity, String userDomainPrefix)", "full_signature": "public  PendingRoleMembershipApprovalNotificationTask(DBService dbService, int pendingRoleMemberLifespan, String monitorIdentity, String userDomainPrefix)", "class_method_signature": "PendingRoleMembershipApprovalNotificationTask.PendingRoleMembershipApprovalNotificationTask(DBService dbService, int pendingRoleMemberLifespan, String monitorIdentity, String userDomainPrefix)", "testcase": false, "constructor": true}, {"identifier": "getNotifications", "parameters": "()", "modifiers": "@Override public", "return": "List<Notification>", "signature": "List<Notification> getNotifications()", "full_signature": "@Override public List<Notification> getNotifications()", "class_method_signature": "PendingRoleMembershipApprovalNotificationTask.getNotifications()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "PendingRoleMembershipApprovalNotificationTask.getDescription()", "testcase": false, "constructor": false}], "file": "servers/zms/src/main/java/com/yahoo/athenz/zms/notification/PendingRoleMembershipApprovalNotificationTask.java"}, "focal_method": {"identifier": "getNotifications", "parameters": "()", "modifiers": "@Override public", "return": "List<Notification>", "body": "@Override\n    public List<Notification> getNotifications() {\n        dbService.processExpiredPendingMembers(pendingRoleMemberLifespan, monitorIdentity);\n        Set<String> recipients = dbService.getPendingMembershipApproverRoles(1);\n        return Collections.singletonList(notificationCommon.createNotification(\n                recipients,\n                null,\n                pendingMembershipApprovalNotificationToEmailConverter,\n                NOTIFICATION_TYPE));\n    }", "signature": "List<Notification> getNotifications()", "full_signature": "@Override public List<Notification> getNotifications()", "class_method_signature": "PendingRoleMembershipApprovalNotificationTask.getNotifications()", "testcase": false, "constructor": false, "invocations": ["processExpiredPendingMembers", "getPendingMembershipApproverRoles", "singletonList", "createNotification"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}