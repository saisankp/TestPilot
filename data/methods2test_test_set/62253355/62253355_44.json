{"test_class": {"identifier": "TestOrmGenerationMojo", "superclass": "", "interfaces": "", "fields": [], "file": "rdf-orm/rdf-orm-maven-plugin/src/test/java/com/mobi/rdf/orm/generate/plugin/TestOrmGenerationMojo.java"}, "test_case": {"identifier": "vfsSpecTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void vfsSpecTest() throws Exception {\n        OrmGenerationMojo mojo = new OrmGenerationMojo();\n        Ontology ont = new Ontology();\n        File loc = new File(\"src/test/resources/foaf.rdf\");\n\n        set(\"ontologyFile\", \"file://\" + loc.getAbsolutePath(), ont);\n        set(\"outputPackage\", \"org.foaf\", ont);\n\n        set(\"outputLocation\", \"target/generated-test-sources\", mojo);\n        set(\"generates\", Collections.singletonList(ont), mojo);\n        mojo.execute();\n    }", "signature": "void vfsSpecTest()", "full_signature": "@Test public void vfsSpecTest()", "class_method_signature": "TestOrmGenerationMojo.vfsSpecTest()", "testcase": true, "constructor": false, "invocations": ["set", "getAbsolutePath", "set", "set", "set", "singletonList", "execute"]}, "focal_class": {"identifier": "OrmGenerationMojo", "superclass": "extends AbstractMojo", "interfaces": "", "fields": [{"original_string": "private FileSystemManager fileSystemManager;", "modifier": "private", "type": "FileSystemManager", "declarator": "fileSystemManager", "var_name": "fileSystemManager"}, {"original_string": "@Parameter(alias = \"generates\", required = true)\n    private List<Ontology> generates;", "modifier": "@Parameter(alias = \"generates\", required = true)\n    private", "type": "List<Ontology>", "declarator": "generates", "var_name": "generates"}, {"original_string": "@Parameter(alias = \"references\")\n    private List<Ontology> references;", "modifier": "@Parameter(alias = \"references\")\n    private", "type": "List<Ontology>", "declarator": "references", "var_name": "references"}, {"original_string": "@Parameter(property = \"outputLocation\", required = true, defaultValue = \"./src/main/java\")\n    private String outputLocation;", "modifier": "@Parameter(property = \"outputLocation\", required = true, defaultValue = \"./src/main/java\")\n    private", "type": "String", "declarator": "outputLocation", "var_name": "outputLocation"}], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "OrmGenerationMojo.execute()", "testcase": false, "constructor": false}, {"identifier": "readOntology", "parameters": "(final FileObject fileObject, final String baseUri)", "modifiers": "private static", "return": "Model", "signature": "Model readOntology(final FileObject fileObject, final String baseUri)", "full_signature": "private static Model readOntology(final FileObject fileObject, final String baseUri)", "class_method_signature": "OrmGenerationMojo.readOntology(final FileObject fileObject, final String baseUri)", "testcase": false, "constructor": false}, {"identifier": "readOntology", "parameters": "(final String fileLocation, final String baseUri)", "modifiers": "private", "return": "Model", "signature": "Model readOntology(final String fileLocation, final String baseUri)", "full_signature": "private Model readOntology(final String fileLocation, final String baseUri)", "class_method_signature": "OrmGenerationMojo.readOntology(final String fileLocation, final String baseUri)", "testcase": false, "constructor": false}, {"identifier": "gatherReferenceOntologies", "parameters": "()", "modifiers": "private", "return": "List<ReferenceOntology>", "signature": "List<ReferenceOntology> gatherReferenceOntologies()", "full_signature": "private List<ReferenceOntology> gatherReferenceOntologies()", "class_method_signature": "OrmGenerationMojo.gatherReferenceOntologies()", "testcase": false, "constructor": false}], "file": "rdf-orm/rdf-orm-maven-plugin/src/main/java/com/mobi/rdf/orm/generate/plugin/OrmGenerationMojo.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute() throws MojoExecutionException, MojoFailureException {\n        // Initialize fileSystemManager.\n        try {\n            fileSystemManager = VFS.getManager();\n        } catch (FileSystemException e) {\n            throw new MojoExecutionException(\"Issue initializing VFS system to fetch ontologies!\", e);\n        }\n\n        // Load the reference ontology data.\n        final List<ReferenceOntology> referenceOntologies = gatherReferenceOntologies();\n        // Generate each of the generation ontologies.\n        for (final Ontology generate : generates) {\n            try {\n                final FileObject fileObject = fileSystemManager.resolveFile(generate.getOntologyFile());\n                // Check that the file exists!\n                if (fileObject.isFile()) {\n                    try {\n                        // Read the ontology file into our Model.\n                        final Model ontology = readOntology(fileObject, generate.getOntologyFile());\n                        // If the destination package already exists, remove the previous version.\n                        FileUtils.deleteQuietly(new File(outputLocation + (outputLocation.endsWith(File.separator) ? \"\" : File.separator) + generate.getOutputPackage().replace('.', File.separatorChar)));\n                        // Generate the source in the targeted output package.\n                        SourceGenerator.toSource(ontology, generate.getOutputPackage(), generate.getOntologyName(), outputLocation, referenceOntologies);\n                    } catch (Exception e) {\n                        // Catch an exception during source generation and throw MojoFailureException.\n                        throw new MojoFailureException(String.format(\"Issue generating source from ontology specified: {%s} {%s} {%s}\",\n                                generate.getOntologyFile(), generate.getOutputPackage(), outputLocation), e);\n                    }\n                } else {\n                    // Throw an exception if that ontology file doesn't exist\n                    String msg = \"Issue generating source from ontology specified. No ontology found at specified location: \"\n                            + generate.getOntologyFile();\n                    throw new MojoExecutionException(msg);\n                }\n            } catch (IOException e) {\n                throw new MojoExecutionException(\"Issue fetching configured ontology\", e);\n            }\n        }\n    }", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "OrmGenerationMojo.execute()", "testcase": false, "constructor": false, "invocations": ["getManager", "gatherReferenceOntologies", "resolveFile", "getOntologyFile", "isFile", "readOntology", "getOntologyFile", "deleteQuietly", "endsWith", "replace", "getOutputPackage", "toSource", "getOutputPackage", "getOntologyName", "format", "getOntologyFile", "getOutputPackage", "getOntologyFile"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}