{"test_class": {"identifier": "AprioriTest", "superclass": "", "interfaces": "", "fields": [], "file": "legacy/src/test/java/macrobase/analysis/summary/itemset/AprioriTest.java"}, "test_case": {"identifier": "testFPFromPaper", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFPFromPaper() {\n        List<Set<Integer>> txns = new ArrayList<>();\n        txns.add(intIfy(\"f, a, c, d, g, i, m, p\"));\n        txns.add(intIfy(\"a, b, c, f, l, m, o\"));\n        txns.add(intIfy(\"b, f, h, j, o\"));\n        txns.add(intIfy(\"b, c, k, s, p\"));\n        txns.add(intIfy(\"a, f, c, e, l, p, m, n\"));\n\n        Apriori fp = new Apriori();\n\n        Set<ItemsetWithCount> itemsets = fp.getItemsets(txns, .6);\n\n        //printItemsets(itemsets);\n\n        assertEquals(18, itemsets.size());\n    }", "signature": "void testFPFromPaper()", "full_signature": "@Test public void testFPFromPaper()", "class_method_signature": "AprioriTest.testFPFromPaper()", "testcase": true, "constructor": false, "invocations": ["add", "intIfy", "add", "intIfy", "add", "intIfy", "add", "intIfy", "add", "intIfy", "getItemsets", "assertEquals", "size"]}, "focal_class": {"identifier": "Apriori", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "genCandidates", "parameters": "(List<ItemsetWithCount> prevRound,\n                                            int desiredSize)", "modifiers": "private", "return": "Set<Set<Integer>>", "signature": "Set<Set<Integer>> genCandidates(List<ItemsetWithCount> prevRound,\n                                            int desiredSize)", "full_signature": "private Set<Set<Integer>> genCandidates(List<ItemsetWithCount> prevRound,\n                                            int desiredSize)", "class_method_signature": "Apriori.genCandidates(List<ItemsetWithCount> prevRound,\n                                            int desiredSize)", "testcase": false, "constructor": false}, {"identifier": "filterItems", "parameters": "(List<Set<Integer>> transactions,\n                                               Set<Set<Integer>> candidates,\n                                               Set<Integer> infrequentIndex,\n                                               int minSupportCount)", "modifiers": "private", "return": "List<ItemsetWithCount>", "signature": "List<ItemsetWithCount> filterItems(List<Set<Integer>> transactions,\n                                               Set<Set<Integer>> candidates,\n                                               Set<Integer> infrequentIndex,\n                                               int minSupportCount)", "full_signature": "private List<ItemsetWithCount> filterItems(List<Set<Integer>> transactions,\n                                               Set<Set<Integer>> candidates,\n                                               Set<Integer> infrequentIndex,\n                                               int minSupportCount)", "class_method_signature": "Apriori.filterItems(List<Set<Integer>> transactions,\n                                               Set<Set<Integer>> candidates,\n                                               Set<Integer> infrequentIndex,\n                                               int minSupportCount)", "testcase": false, "constructor": false}, {"identifier": "getItemsets", "parameters": "(List<Set<Integer>> transactions,\n                                             Double support)", "modifiers": "public", "return": "Set<ItemsetWithCount>", "signature": "Set<ItemsetWithCount> getItemsets(List<Set<Integer>> transactions,\n                                             Double support)", "full_signature": "public Set<ItemsetWithCount> getItemsets(List<Set<Integer>> transactions,\n                                             Double support)", "class_method_signature": "Apriori.getItemsets(List<Set<Integer>> transactions,\n                                             Double support)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/macrobase/analysis/summary/itemset/Apriori.java"}, "focal_method": {"identifier": "getItemsets", "parameters": "(List<Set<Integer>> transactions,\n                                             Double support)", "modifiers": "public", "return": "Set<ItemsetWithCount>", "body": "public Set<ItemsetWithCount> getItemsets(List<Set<Integer>> transactions,\n                                             Double support) {\n        Set<ItemsetWithCount> ret = new HashSet<>();\n\n        int minSupportCount = (int) (support * transactions.size());\n\n        // first round candidates are all items; just count them\n        HashMap<Integer, Integer> itemCounts = new HashMap<>();\n        for (Set<Integer> t : transactions) {\n            for (int i : t) {\n                itemCounts.compute(i, (k, v) -> v == null ? 1 : v + 1);\n            }\n        }\n\n        for (Map.Entry<Integer, Integer> e : itemCounts.entrySet()) {\n            if (e.getValue() >= minSupportCount) {\n                HashSet<Integer> singletonSet = new HashSet<>();\n                singletonSet.add(e.getKey());\n                ret.add(new ItemsetWithCount(singletonSet, e.getValue()));\n            }\n        }\n\n        if (ret.size() == 0) {\n            return ret;\n        }\n\n        // second round, don't explicitly construct pairs\n        HashMap<Set<Integer>, Integer> pairCandidateCounts = new HashMap<>();\n\n        for (Set<Integer> t : transactions) {\n            List<Integer> txList = Lists.newArrayList(t);\n            for (int i = 0; i < t.size(); ++i) {\n                for (int j = i + 1; j < t.size(); ++j) {\n                    HashSet<Integer> pairSet = new HashSet<>();\n                    pairSet.add(txList.get(i));\n                    pairSet.add(txList.get(j));\n                    pairCandidateCounts.compute(pairSet, (k, v) -> v == null ? 1 : v + 1);\n                }\n            }\n        }\n\n        List<ItemsetWithCount> pairItemsets = new ArrayList<>();\n\n        for (Map.Entry<Set<Integer>, Integer> e : pairCandidateCounts.entrySet()) {\n            if (e.getValue() >= minSupportCount) {\n                ItemsetWithCount ic = new ItemsetWithCount(e.getKey(), e.getValue());\n                ret.add(ic);\n                pairItemsets.add(ic);\n            }\n        }\n\n        if (pairItemsets.isEmpty()) {\n            return ret;\n        }\n\n        List<ItemsetWithCount> prevRoundItemsets = pairItemsets;\n        Set<Integer> infrequentIndex = new HashSet<>();\n\n        int newSize = 3;\n        while (true) {\n            Set<Set<Integer>> candidates = genCandidates(prevRoundItemsets, newSize);\n            prevRoundItemsets = filterItems(transactions,\n                                            candidates,\n                                            infrequentIndex,\n                                            minSupportCount);\n            if (prevRoundItemsets.isEmpty()) {\n                return ret;\n            } else {\n                ret.addAll(prevRoundItemsets);\n                newSize += 1;\n            }\n        }\n    }", "signature": "Set<ItemsetWithCount> getItemsets(List<Set<Integer>> transactions,\n                                             Double support)", "full_signature": "public Set<ItemsetWithCount> getItemsets(List<Set<Integer>> transactions,\n                                             Double support)", "class_method_signature": "Apriori.getItemsets(List<Set<Integer>> transactions,\n                                             Double support)", "testcase": false, "constructor": false, "invocations": ["size", "compute", "entrySet", "getValue", "add", "getKey", "add", "getValue", "size", "newArrayList", "size", "size", "add", "get", "add", "get", "compute", "entrySet", "getValue", "getKey", "getValue", "add", "add", "isEmpty", "genCandidates", "filterItems", "isEmpty", "addAll"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}