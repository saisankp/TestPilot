{"test_class": {"identifier": "LocaleDefinitionsFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "tiles-core/src/test/java/org/apache/tiles/definition/LocaleDefinitionsFactoryTest.java"}, "test_case": {"identifier": "testGetDefinitionNoParent", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test(expected = NoSuchDefinitionException.class) public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test(expected = NoSuchDefinitionException.class)\n    public void testGetDefinitionNoParent() {\n        DefinitionDAO<Locale> dao = createMock(DefinitionDAO.class);\n        LocaleResolver localeResolver = createMock(LocaleResolver.class);\n        Request request = createMock(Request.class);\n        Definition definition = new Definition(\"myDefinition\", null, null);\n        definition.setExtends(\"anotherDefinition\");\n        Map<String, Attribute> attributes = new HashMap<String, Attribute>();\n        attributes.put(\"first\", new Attribute(\"myValue\"));\n        Locale locale = Locale.ITALY;\n\n        expect(localeResolver.resolveLocale(request)).andReturn(locale);\n        expect(dao.getDefinition(\"myDefinition\", locale)).andReturn(definition);\n        expect(dao.getDefinition(\"anotherDefinition\", locale)).andReturn(null);\n\n        LocaleDefinitionsFactory factory = new LocaleDefinitionsFactory();\n\n        replay(dao, localeResolver, request);\n        try {\n            factory.setDefinitionDAO(dao);\n            factory.setLocaleResolver(localeResolver);\n            factory.getDefinition(\"myDefinition\", request);\n        } finally {\n            verify(dao, localeResolver, request);\n        }\n    }", "signature": "void testGetDefinitionNoParent()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test(expected = NoSuchDefinitionException.class) public void testGetDefinitionNoParent()", "class_method_signature": "LocaleDefinitionsFactoryTest.testGetDefinitionNoParent()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "setExtends", "put", "andReturn", "expect", "resolveLocale", "andReturn", "expect", "getDefinition", "andReturn", "expect", "getDefinition", "replay", "setDefinitionDAO", "setLocaleResolver", "getDefinition", "verify"]}, "focal_class": {"identifier": "LocaleDefinitionsFactory", "superclass": "extends\n        UnresolvingLocaleDefinitionsFactory", "interfaces": "", "fields": [], "methods": [{"identifier": "getDefinition", "parameters": "(String name,\n            Request tilesContext)", "modifiers": "@Override public", "return": "Definition", "signature": "Definition getDefinition(String name,\n            Request tilesContext)", "full_signature": "@Override public Definition getDefinition(String name,\n            Request tilesContext)", "class_method_signature": "LocaleDefinitionsFactory.getDefinition(String name,\n            Request tilesContext)", "testcase": false, "constructor": false}], "file": "tiles-core/src/main/java/org/apache/tiles/definition/LocaleDefinitionsFactory.java"}, "focal_method": {"identifier": "getDefinition", "parameters": "(String name,\n            Request tilesContext)", "modifiers": "@Override public", "return": "Definition", "body": "@Override\n    public Definition getDefinition(String name,\n            Request tilesContext) {\n        Definition retValue;\n        Locale locale = null;\n\n        if (tilesContext != null) {\n            locale = localeResolver.resolveLocale(tilesContext);\n        }\n\n        retValue = definitionDao.getDefinition(name, locale);\n        if (retValue != null) {\n            retValue = new Definition(retValue);\n            String parentDefinitionName = retValue.getExtends();\n            while (parentDefinitionName != null) {\n                Definition parent = definitionDao.getDefinition(\n                        parentDefinitionName, locale);\n                if (parent == null) {\n                    throw new NoSuchDefinitionException(\"Cannot find definition '\"\n                            + parentDefinitionName + \"' ancestor of '\"\n                            + retValue.getName() + \"'\");\n                }\n                retValue.inherit(parent);\n                parentDefinitionName = parent.getExtends();\n            }\n        }\n\n        return retValue;\n    }", "signature": "Definition getDefinition(String name,\n            Request tilesContext)", "full_signature": "@Override public Definition getDefinition(String name,\n            Request tilesContext)", "class_method_signature": "LocaleDefinitionsFactory.getDefinition(String name,\n            Request tilesContext)", "testcase": false, "constructor": false, "invocations": ["resolveLocale", "getDefinition", "getExtends", "getDefinition", "getName", "inherit", "getExtends"]}, "repository": {"repo_id": 2641714, "url": "https://github.com/apache/tiles", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 99, "size": 12554, "license": "licensed"}}