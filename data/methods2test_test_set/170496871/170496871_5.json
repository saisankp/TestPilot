{"test_class": {"identifier": "IgniteWalConverterArgumentsTest", "superclass": "extends GridCommonAbstractTest", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedEx = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedEx = ExpectedException.none()", "var_name": "expectedEx"}], "file": "modules/dev-utils/src/test/java/org/apache/ignite/development/utils/IgniteWalConverterArgumentsTest.java"}, "test_case": {"identifier": "testIncorrectBinaryMetadataFileStoreDir", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIncorrectBinaryMetadataFileStoreDir() throws Exception {\n        expectedEx.expect(IllegalArgumentException.class);\n        expectedEx.expectMessage(\"File/directory 'non_existing_path' does not exist.\");\n\n        final File wal = File.createTempFile(\"wal\", \"\");\n        wal.deleteOnExit();\n\n        final String[] args = {\n            \"--wal-dir\",\n            wal.getAbsolutePath(),\n            \"--binary-metadata-dir\",\n            \"non_existing_path\"\n        };\n\n        IgniteWalConverterArguments.parse(System.out, args);\n    }", "signature": "void testIncorrectBinaryMetadataFileStoreDir()", "full_signature": "@Test public void testIncorrectBinaryMetadataFileStoreDir()", "class_method_signature": "IgniteWalConverterArgumentsTest.testIncorrectBinaryMetadataFileStoreDir()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "createTempFile", "deleteOnExit", "getAbsolutePath", "parse"]}, "focal_class": {"identifier": "IgniteWalConverterArguments", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File walDir;", "modifier": "private final", "type": "File", "declarator": "walDir", "var_name": "walDir"}, {"original_string": "private final File walArchiveDir;", "modifier": "private final", "type": "File", "declarator": "walArchiveDir", "var_name": "walArchiveDir"}, {"original_string": "private final int pageSize;", "modifier": "private final", "type": "int", "declarator": "pageSize", "var_name": "pageSize"}, {"original_string": "private final File binaryMetadataDir;", "modifier": "private final", "type": "File", "declarator": "binaryMetadataDir", "var_name": "binaryMetadataDir"}, {"original_string": "private final File marshallerMappingDir;", "modifier": "private final", "type": "File", "declarator": "marshallerMappingDir", "var_name": "marshallerMappingDir"}, {"original_string": "private final boolean unwrapBinary;", "modifier": "private final", "type": "boolean", "declarator": "unwrapBinary", "var_name": "unwrapBinary"}, {"original_string": "private final Set<WALRecord.RecordType> recordTypes;", "modifier": "private final", "type": "Set<WALRecord.RecordType>", "declarator": "recordTypes", "var_name": "recordTypes"}, {"original_string": "private final Long fromTime;", "modifier": "private final", "type": "Long", "declarator": "fromTime", "var_name": "fromTime"}, {"original_string": "private final Long toTime;", "modifier": "private final", "type": "Long", "declarator": "toTime", "var_name": "toTime"}, {"original_string": "private final String hasText;", "modifier": "private final", "type": "String", "declarator": "hasText", "var_name": "hasText"}, {"original_string": "private final ProcessSensitiveData includeSensitive;", "modifier": "private final", "type": "ProcessSensitiveData", "declarator": "includeSensitive", "var_name": "includeSensitive"}, {"original_string": "private final boolean printStat;", "modifier": "private final", "type": "boolean", "declarator": "printStat", "var_name": "printStat"}, {"original_string": "private final boolean skipCrc;", "modifier": "private final", "type": "boolean", "declarator": "skipCrc", "var_name": "skipCrc"}], "methods": [{"identifier": "IgniteWalConverterArguments", "parameters": "(\n        File walDir,\n        File walArchiveDir,\n        int pageSize,\n        File binaryMetadataDir,\n        File marshallerMappingDir,\n        boolean unwrapBinary,\n        Set<WALRecord.RecordType> recordTypes,\n        Long fromTime,\n        Long toTime,\n        String hasText,\n        ProcessSensitiveData includeSensitive,\n        boolean printStat,\n        boolean skipCrc\n    )", "modifiers": "public", "return": "", "signature": " IgniteWalConverterArguments(\n        File walDir,\n        File walArchiveDir,\n        int pageSize,\n        File binaryMetadataDir,\n        File marshallerMappingDir,\n        boolean unwrapBinary,\n        Set<WALRecord.RecordType> recordTypes,\n        Long fromTime,\n        Long toTime,\n        String hasText,\n        ProcessSensitiveData includeSensitive,\n        boolean printStat,\n        boolean skipCrc\n    )", "full_signature": "public  IgniteWalConverterArguments(\n        File walDir,\n        File walArchiveDir,\n        int pageSize,\n        File binaryMetadataDir,\n        File marshallerMappingDir,\n        boolean unwrapBinary,\n        Set<WALRecord.RecordType> recordTypes,\n        Long fromTime,\n        Long toTime,\n        String hasText,\n        ProcessSensitiveData includeSensitive,\n        boolean printStat,\n        boolean skipCrc\n    )", "class_method_signature": "IgniteWalConverterArguments.IgniteWalConverterArguments(\n        File walDir,\n        File walArchiveDir,\n        int pageSize,\n        File binaryMetadataDir,\n        File marshallerMappingDir,\n        boolean unwrapBinary,\n        Set<WALRecord.RecordType> recordTypes,\n        Long fromTime,\n        Long toTime,\n        String hasText,\n        ProcessSensitiveData includeSensitive,\n        boolean printStat,\n        boolean skipCrc\n    )", "testcase": false, "constructor": true}, {"identifier": "getWalDir", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getWalDir()", "full_signature": "public File getWalDir()", "class_method_signature": "IgniteWalConverterArguments.getWalDir()", "testcase": false, "constructor": false}, {"identifier": "getWalArchiveDir", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getWalArchiveDir()", "full_signature": "public File getWalArchiveDir()", "class_method_signature": "IgniteWalConverterArguments.getWalArchiveDir()", "testcase": false, "constructor": false}, {"identifier": "getPageSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPageSize()", "full_signature": "public int getPageSize()", "class_method_signature": "IgniteWalConverterArguments.getPageSize()", "testcase": false, "constructor": false}, {"identifier": "getBinaryMetadataDir", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getBinaryMetadataDir()", "full_signature": "public File getBinaryMetadataDir()", "class_method_signature": "IgniteWalConverterArguments.getBinaryMetadataDir()", "testcase": false, "constructor": false}, {"identifier": "getMarshallerMappingDir", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getMarshallerMappingDir()", "full_signature": "public File getMarshallerMappingDir()", "class_method_signature": "IgniteWalConverterArguments.getMarshallerMappingDir()", "testcase": false, "constructor": false}, {"identifier": "isUnwrapBinary", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUnwrapBinary()", "full_signature": "public boolean isUnwrapBinary()", "class_method_signature": "IgniteWalConverterArguments.isUnwrapBinary()", "testcase": false, "constructor": false}, {"identifier": "getRecordTypes", "parameters": "()", "modifiers": "public", "return": "Set<WALRecord.RecordType>", "signature": "Set<WALRecord.RecordType> getRecordTypes()", "full_signature": "public Set<WALRecord.RecordType> getRecordTypes()", "class_method_signature": "IgniteWalConverterArguments.getRecordTypes()", "testcase": false, "constructor": false}, {"identifier": "getFromTime", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long getFromTime()", "full_signature": "public Long getFromTime()", "class_method_signature": "IgniteWalConverterArguments.getFromTime()", "testcase": false, "constructor": false}, {"identifier": "getToTime", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long getToTime()", "full_signature": "public Long getToTime()", "class_method_signature": "IgniteWalConverterArguments.getToTime()", "testcase": false, "constructor": false}, {"identifier": "hasText", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String hasText()", "full_signature": "public String hasText()", "class_method_signature": "IgniteWalConverterArguments.hasText()", "testcase": false, "constructor": false}, {"identifier": "includeSensitive", "parameters": "()", "modifiers": "public", "return": "ProcessSensitiveData", "signature": "ProcessSensitiveData includeSensitive()", "full_signature": "public ProcessSensitiveData includeSensitive()", "class_method_signature": "IgniteWalConverterArguments.includeSensitive()", "testcase": false, "constructor": false}, {"identifier": "isPrintStat", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPrintStat()", "full_signature": "public boolean isPrintStat()", "class_method_signature": "IgniteWalConverterArguments.isPrintStat()", "testcase": false, "constructor": false}, {"identifier": "isSkipCrc", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSkipCrc()", "full_signature": "public boolean isSkipCrc()", "class_method_signature": "IgniteWalConverterArguments.isSkipCrc()", "testcase": false, "constructor": false}, {"identifier": "file", "parameters": "(\n        @Nullable String filePath,\n        boolean checkExists,\n        boolean checkIsDirectory\n    )", "modifiers": "public static @Nullable", "return": "File", "signature": "File file(\n        @Nullable String filePath,\n        boolean checkExists,\n        boolean checkIsDirectory\n    )", "full_signature": "public static @Nullable File file(\n        @Nullable String filePath,\n        boolean checkExists,\n        boolean checkIsDirectory\n    )", "class_method_signature": "IgniteWalConverterArguments.file(\n        @Nullable String filePath,\n        boolean checkExists,\n        boolean checkIsDirectory\n    )", "testcase": false, "constructor": false}, {"identifier": "checkRecordTypes", "parameters": "(String[] recordTypesStrArray)", "modifiers": "private static", "return": "Set<WALRecord.RecordType>", "signature": "Set<WALRecord.RecordType> checkRecordTypes(String[] recordTypesStrArray)", "full_signature": "private static Set<WALRecord.RecordType> checkRecordTypes(String[] recordTypesStrArray)", "class_method_signature": "IgniteWalConverterArguments.checkRecordTypes(String[] recordTypesStrArray)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final PrintStream out, String args[])", "modifiers": "public static", "return": "IgniteWalConverterArguments", "signature": "IgniteWalConverterArguments parse(final PrintStream out, String args[])", "full_signature": "public static IgniteWalConverterArguments parse(final PrintStream out, String args[])", "class_method_signature": "IgniteWalConverterArguments.parse(final PrintStream out, String args[])", "testcase": false, "constructor": false}], "file": "modules/dev-utils/src/main/java/org/apache/ignite/development/utils/IgniteWalConverterArguments.java"}, "focal_method": {"identifier": "parse", "parameters": "(final PrintStream out, String args[])", "modifiers": "public static", "return": "IgniteWalConverterArguments", "body": "public static IgniteWalConverterArguments parse(final PrintStream out, String args[]) {\n        AtomicReference<CLIArgumentParser> parserRef = new AtomicReference<>();\n\n        CLIArgumentParser parser = new CLIArgumentParser(asList(\n            optionalArg(WAL_DIR.arg(), \"Path to dir with wal files.\", String.class, () -> {\n                if (parserRef.get().get(Args.WAL_ARCHIVE_DIR.arg()) == null)\n                    throw new IllegalArgumentException(\"One of the arguments --wal-dir or --wal-archive-dir must be specified.\");\n                else\n                    return null;\n            }),\n            optionalArg(Args.WAL_ARCHIVE_DIR.arg(), \"Path to dir with wal files.\", String.class),\n            optionalArg(PAGE_SIZE.arg(), \"Size of pages, which was selected for file store (1024, 2048, 4096, etc).\", Integer.class, () -> 4096),\n            optionalArg(BINARY_METADATA_DIR.arg(), \"Path to binary meta.\", String.class),\n            optionalArg(MARSHALLER_MAPPING_DIR.arg(), \"Path to marshaller dir.\", String.class),\n            optionalArg(UNWRAP_BINARY.arg(), \"Unwrap binary non-primitive objects.\", Boolean.class),\n            optionalArg(RECORD_TYPES.arg(), \"Comma-separated WAL record types (TX_RECORD, DATA_RECORD, etc). By default, all types will be printed.\", String[].class),\n            optionalArg(WAL_TIME_FROM_MILLIS.arg(), \"The start time interval for the record time in milliseconds.\", Long.class),\n            optionalArg(WAL_TIME_TO_MILLIS.arg(), \"The end time interval for the record time in milliseconds.\", Long.class),\n            optionalArg(HAS_TEXT.arg(), \"Filter by substring in the WAL record.\", String.class),\n            optionalArg(INCLUDE_SENSITIVE.arg(), \"Strategy for the processing of sensitive data (SHOW, HIDE, HASH, MD5). Default MD5.\", String.class, ProcessSensitiveData.MD5::toString),\n            optionalArg(PRINT_STAT.arg(), \"Write summary statistics for WAL.\", Boolean.class),\n            optionalArg(SKIP_CRC.arg(), \"Skip CRC calculation/check flag\", Boolean.class)\n        ));\n\n        if (args == null || args.length < 1) {\n            out.println(\"Print WAL log data in human-readable form.\");\n            out.println(parser.usage());\n            out.println(\"For example:\");\n            out.println(\"    \" + WAL_DIR.arg() + \" /work/db/wal\");\n            out.println(\"    \" + WAL_ARCHIVE_DIR.arg() + \" /work/db/wal_archive\");\n            out.println(\"    \" + PAGE_SIZE.arg() + \" 4096\");\n            out.println(\"    \" + BINARY_METADATA_DIR.arg() + \" /work/db/nodeId-consistentId\");\n            out.println(\"    \" + MARSHALLER_MAPPING_DIR.arg() + \" /work/db/marshaller\");\n            out.println(\"    \" + UNWRAP_BINARY.arg());\n            out.println(\"    \" + RECORD_TYPES.arg() + \" DataRecord,TxRecord\");\n            out.println(\"    \" + WAL_TIME_FROM_MILLIS.arg() + \" 1575158400000\");\n            out.println(\"    \" + WAL_TIME_TO_MILLIS.arg() + \" 1577836740999\");\n            out.println(\"    \" + HAS_TEXT.arg() + \" search_string\");\n            out.println(\"    \" + INCLUDE_SENSITIVE.arg() + \" SHOW\");\n            out.println(\"    \" + SKIP_CRC.arg());\n\n            return null;\n        }\n\n        parserRef.set(parser);\n\n        parser.parse(asList(args).iterator());\n\n        File walDir = file(parser.get(WAL_DIR.arg()), true, false);\n        File walArchiveDir = file(parser.get(Args.WAL_ARCHIVE_DIR.arg()), true, false);\n        int pageSize = parser.get(PAGE_SIZE.arg());\n        File binaryMetadataDir = file(parser.get(BINARY_METADATA_DIR.arg()), true, true);\n        File marshallerMappingDir = file(parser.get(MARSHALLER_MAPPING_DIR.arg()), true, true);\n        boolean unwrapBinary = parser.get(UNWRAP_BINARY.arg());\n        final Set<WALRecord.RecordType> recordTypes = checkRecordTypes(parser.get(RECORD_TYPES.arg()));\n        Long fromTime = parser.get(Args.WAL_TIME_FROM_MILLIS.arg());\n        Long toTime = parser.get(Args.WAL_TIME_TO_MILLIS.arg());\n        String hasText = parser.get(Args.HAS_TEXT.arg());\n        boolean printStat = parser.get(Args.PRINT_STAT.arg());\n        boolean skipCrc = parser.get(Args.SKIP_CRC.arg());\n\n        String processSensitiveDataStr = parser.get(Args.INCLUDE_SENSITIVE.arg());\n\n        ProcessSensitiveData includeSensitive;\n\n        try {\n            includeSensitive = ProcessSensitiveData.valueOf(processSensitiveDataStr);\n        }\n        catch (Exception e) {\n            throw new IllegalArgumentException(\"Unknown --include-sensitive: \" + processSensitiveDataStr +\n                \". Supported: \" + Arrays.toString(ProcessSensitiveData.values()));\n        }\n\n        out.println(\"Program arguments:\");\n\n        if (walDir != null)\n            out.printf(\"\\t%s = %s\\n\", WAL_DIR, walDir.getAbsolutePath());\n\n        if (walArchiveDir != null)\n            out.printf(\"\\t%s = %s\\n\", WAL_ARCHIVE_DIR, walArchiveDir.getAbsolutePath());\n\n        out.printf(\"\\t%s = %d\\n\", PAGE_SIZE, pageSize);\n\n        if (binaryMetadataDir != null)\n            out.printf(\"\\t%s = %s\\n\", BINARY_METADATA_DIR, binaryMetadataDir);\n\n        if (marshallerMappingDir != null)\n            out.printf(\"\\t%s = %s\\n\", MARSHALLER_MAPPING_DIR, marshallerMappingDir);\n\n        out.printf(\"\\t%s = %s\\n\", UNWRAP_BINARY, unwrapBinary);\n\n        if (!F.isEmpty(recordTypes))\n            out.printf(\"\\t%s = %s\\n\", RECORD_TYPES, recordTypes);\n\n        if (fromTime != null)\n            out.printf(\"\\t%s = %s\\n\", WAL_TIME_FROM_MILLIS, new Date(fromTime));\n\n        if (toTime != null)\n            out.printf(\"\\t%s = %s\\n\", WAL_TIME_TO_MILLIS, new Date(toTime));\n\n        if (hasText != null)\n            out.printf(\"\\t%s = %s\\n\", HAS_TEXT, hasText);\n\n        out.printf(\"\\t%s = %s\\n\", INCLUDE_SENSITIVE, includeSensitive);\n\n        out.printf(\"\\t%s = %b\\n\", PRINT_STAT, printStat);\n\n        out.printf(\"\\t%s = %b\\n\", SKIP_CRC, skipCrc);\n\n        return new IgniteWalConverterArguments(walDir, walArchiveDir, pageSize,\n            binaryMetadataDir, marshallerMappingDir,\n            unwrapBinary, recordTypes, fromTime, toTime, hasText, includeSensitive, printStat, skipCrc);\n    }", "signature": "IgniteWalConverterArguments parse(final PrintStream out, String args[])", "full_signature": "public static IgniteWalConverterArguments parse(final PrintStream out, String args[])", "class_method_signature": "IgniteWalConverterArguments.parse(final PrintStream out, String args[])", "testcase": false, "constructor": false, "invocations": ["asList", "optionalArg", "arg", "get", "get", "arg", "optionalArg", "arg", "optionalArg", "arg", "optionalArg", "arg", "optionalArg", "arg", "optionalArg", "arg", "optionalArg", "arg", "optionalArg", "arg", "optionalArg", "arg", "optionalArg", "arg", "optionalArg", "arg", "optionalArg", "arg", "optionalArg", "arg", "println", "println", "usage", "println", "println", "arg", "println", "arg", "println", "arg", "println", "arg", "println", "arg", "println", "arg", "println", "arg", "println", "arg", "println", "arg", "println", "arg", "println", "arg", "println", "arg", "set", "parse", "iterator", "asList", "file", "get", "arg", "file", "get", "arg", "get", "arg", "file", "get", "arg", "file", "get", "arg", "get", "arg", "checkRecordTypes", "get", "arg", "get", "arg", "get", "arg", "get", "arg", "get", "arg", "get", "arg", "get", "arg", "valueOf", "toString", "values", "println", "printf", "getAbsolutePath", "printf", "getAbsolutePath", "printf", "printf", "printf", "printf", "isEmpty", "printf", "printf", "printf", "printf", "printf", "printf", "printf"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}