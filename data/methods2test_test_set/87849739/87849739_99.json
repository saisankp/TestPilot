{"test_class": {"identifier": "JsonValueFieldDefinitionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final JsonPointer KNOWN_JSON_POINTER = JsonFactory.newPointer(\"root/sub/subsub\");", "modifier": "private static final", "type": "JsonPointer", "declarator": "KNOWN_JSON_POINTER = JsonFactory.newPointer(\"root/sub/subsub\")", "var_name": "KNOWN_JSON_POINTER"}, {"original_string": "@Mock\n    private JsonFieldMarker schemaVersionMarkerMock;", "modifier": "@Mock\n    private", "type": "JsonFieldMarker", "declarator": "schemaVersionMarkerMock", "var_name": "schemaVersionMarkerMock"}, {"original_string": "@Mock\n    private JsonFieldMarker regularTypeMarkerMock;", "modifier": "@Mock\n    private", "type": "JsonFieldMarker", "declarator": "regularTypeMarkerMock", "var_name": "regularTypeMarkerMock"}, {"original_string": "@Mock\n    private JsonFieldMarker specialTypeMarkerMock;", "modifier": "@Mock\n    private", "type": "JsonFieldMarker", "declarator": "specialTypeMarkerMock", "var_name": "specialTypeMarkerMock"}, {"original_string": "private JsonFieldMarker[] knownFieldMarkers = null;", "modifier": "private", "type": "JsonFieldMarker[]", "declarator": "knownFieldMarkers = null", "var_name": "knownFieldMarkers"}], "file": "json/src/test/java/org/eclipse/ditto/json/JsonValueFieldDefinitionTest.java"}, "test_case": {"identifier": "getValueTypeReturnsExpected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getValueTypeReturnsExpected() {\n        final Class<JsonObject> valueType = JsonObject.class;\n        final JsonValueFieldDefinition underTest =\n                JsonValueFieldDefinition.newInstance(KNOWN_JSON_POINTER, valueType, JsonValue::isObject,\n                        JsonValue::asObject, knownFieldMarkers);\n\n        assertThat(Objects.equals(underTest.getValueType(), valueType)).isTrue();\n    }", "signature": "void getValueTypeReturnsExpected()", "full_signature": "@Test public void getValueTypeReturnsExpected()", "class_method_signature": "JsonValueFieldDefinitionTest.getValueTypeReturnsExpected()", "testcase": true, "constructor": false, "invocations": ["newInstance", "isTrue", "assertThat", "equals", "getValueType"]}, "focal_class": {"identifier": "JsonValueFieldDefinition", "superclass": "extends AbstractJsonFieldDefinition<T>", "interfaces": "", "fields": [], "methods": [{"identifier": "JsonValueFieldDefinition", "parameters": "(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker ... markers)", "modifiers": "private", "return": "", "signature": " JsonValueFieldDefinition(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker ... markers)", "full_signature": "private  JsonValueFieldDefinition(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker ... markers)", "class_method_signature": "JsonValueFieldDefinition.JsonValueFieldDefinition(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker ... markers)", "testcase": false, "constructor": true}, {"identifier": "newInstance", "parameters": "(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker ... markers)", "modifiers": "public static", "return": "JsonValueFieldDefinition<T>", "signature": "JsonValueFieldDefinition<T> newInstance(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker ... markers)", "full_signature": "public static JsonValueFieldDefinition<T> newInstance(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker ... markers)", "class_method_signature": "JsonValueFieldDefinition.newInstance(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker ... markers)", "testcase": false, "constructor": false}, {"identifier": "getAsJavaType", "parameters": "(final JsonValue jsonValue, final Function<JsonValue, T> mappingFunction)", "modifiers": "@Override protected", "return": "T", "signature": "T getAsJavaType(final JsonValue jsonValue, final Function<JsonValue, T> mappingFunction)", "full_signature": "@Override protected T getAsJavaType(final JsonValue jsonValue, final Function<JsonValue, T> mappingFunction)", "class_method_signature": "JsonValueFieldDefinition.getAsJavaType(final JsonValue jsonValue, final Function<JsonValue, T> mappingFunction)", "testcase": false, "constructor": false}], "file": "json/src/main/java/org/eclipse/ditto/json/JsonValueFieldDefinition.java"}, "focal_method": {"identifier": "newInstance", "parameters": "(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker ... markers)", "modifiers": "public static", "return": "JsonValueFieldDefinition<T>", "body": "public static <T extends JsonValue> JsonValueFieldDefinition<T> newInstance(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker ... markers) {\n\n        requireNonNull(mappingFunction, \"The mapping function must not be null!\");\n\n        return new JsonValueFieldDefinition<>(pointer, valueType, checkJavaTypeFunction, mappingFunction, markers);\n    }", "signature": "JsonValueFieldDefinition<T> newInstance(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker ... markers)", "full_signature": "public static JsonValueFieldDefinition<T> newInstance(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker ... markers)", "class_method_signature": "JsonValueFieldDefinition.newInstance(final CharSequence pointer,\n            final Class<T> valueType,\n            final Function<JsonValue, Boolean> checkJavaTypeFunction,\n            final Function<JsonValue, T> mappingFunction,\n            final JsonFieldMarker ... markers)", "testcase": false, "constructor": false, "invocations": ["requireNonNull"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}