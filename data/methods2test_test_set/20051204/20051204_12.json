{"test_class": {"identifier": "TestAgentLaunchParameter", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Logger log =\n      LoggerFactory.getLogger(TestAgentLaunchParameter.class);", "modifier": "protected static final", "type": "Logger", "declarator": "log =\n      LoggerFactory.getLogger(TestAgentLaunchParameter.class)", "var_name": "log"}], "file": "slider-core/src/test/java/org/apache/slider/providers/agent/TestAgentLaunchParameter.java"}, "test_case": {"identifier": "testTestAgentLaunchParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTestAgentLaunchParameter() throws Exception {\n    AgentLaunchParameter alp = new AgentLaunchParameter(\"\");\n    Assert.assertEquals(\"\", alp.getNextLaunchParameter(\"abc\"));\n    Assert.assertEquals(\"\", alp.getNextLaunchParameter(\"HBASE_MASTER\"));\n\n    alp = new AgentLaunchParameter(\"a:1:2:3|b:5:6:NONE\");\n    Assert.assertEquals(\"1\", alp.getNextLaunchParameter(\"a\"));\n    Assert.assertEquals(\"2\", alp.getNextLaunchParameter(\"a\"));\n    Assert.assertEquals(\"3\", alp.getNextLaunchParameter(\"a\"));\n    Assert.assertEquals(\"3\", alp.getNextLaunchParameter(\"a\"));\n\n    Assert.assertEquals(\"5\", alp.getNextLaunchParameter(\"b\"));\n    Assert.assertEquals(\"6\", alp.getNextLaunchParameter(\"b\"));\n    Assert.assertEquals(\"\", alp.getNextLaunchParameter(\"b\"));\n    Assert.assertEquals(\"\", alp.getNextLaunchParameter(\"b\"));\n    Assert.assertEquals(\"\", alp.getNextLaunchParameter(\"c\"));\n\n    alp = new AgentLaunchParameter(\"|a:1:3|b::5:NONE:\");\n    Assert.assertEquals(\"1\", alp.getNextLaunchParameter(\"a\"));\n    Assert.assertEquals(\"3\", alp.getNextLaunchParameter(\"a\"));\n    Assert.assertEquals(\"3\", alp.getNextLaunchParameter(\"a\"));\n\n    Assert.assertEquals(\"\", alp.getNextLaunchParameter(\"b\"));\n    Assert.assertEquals(\"5\", alp.getNextLaunchParameter(\"b\"));\n    Assert.assertEquals(\"\", alp.getNextLaunchParameter(\"b\"));\n    Assert.assertEquals(\"\", alp.getNextLaunchParameter(\"b\"));\n\n    alp = new AgentLaunchParameter(\"|:\");\n    Assert.assertEquals(\"\", alp.getNextLaunchParameter(\"b\"));\n    Assert.assertEquals(\"\", alp.getNextLaunchParameter(\"a\"));\n\n    alp = new AgentLaunchParameter(\"HBASE_MASTER:a,b:DO_NOT_REGISTER:\");\n    Assert.assertEquals(\"a,b\", alp.getNextLaunchParameter(\"HBASE_MASTER\"));\n    Assert.assertEquals(\"DO_NOT_REGISTER\", alp.getNextLaunchParameter(\"HBASE_MASTER\"));\n    Assert.assertEquals(\"DO_NOT_REGISTER\", alp.getNextLaunchParameter(\"HBASE_MASTER\"));\n\n    alp = new AgentLaunchParameter(\"HBASE_MASTER:a,b:DO_NOT_REGISTER::c:::\");\n    Assert.assertEquals(\"a,b\", alp.getNextLaunchParameter(\"HBASE_MASTER\"));\n    Assert.assertEquals(\"DO_NOT_REGISTER\", alp.getNextLaunchParameter(\"HBASE_MASTER\"));\n    Assert.assertEquals(\"\", alp.getNextLaunchParameter(\"HBASE_MASTER\"));\n    Assert.assertEquals(\"c\", alp.getNextLaunchParameter(\"HBASE_MASTER\"));\n    Assert.assertEquals(\"c\", alp.getNextLaunchParameter(\"HBASE_MASTER\"));\n  }", "signature": "void testTestAgentLaunchParameter()", "full_signature": "@Test public void testTestAgentLaunchParameter()", "class_method_signature": "TestAgentLaunchParameter.testTestAgentLaunchParameter()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter", "assertEquals", "getNextLaunchParameter"]}, "focal_class": {"identifier": "AgentLaunchParameter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger log =\n      LoggerFactory.getLogger(AgentLaunchParameter.class);", "modifier": "public static final", "type": "Logger", "declarator": "log =\n      LoggerFactory.getLogger(AgentLaunchParameter.class)", "var_name": "log"}, {"original_string": "private static final String DEFAULT_PARAMETER = \"\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_PARAMETER = \"\"", "var_name": "DEFAULT_PARAMETER"}, {"original_string": "private static final String ANY_COMPONENT = \"ANY\";", "modifier": "private static final", "type": "String", "declarator": "ANY_COMPONENT = \"ANY\"", "var_name": "ANY_COMPONENT"}, {"original_string": "private static final String NONE_VALUE = \"NONE\";", "modifier": "private static final", "type": "String", "declarator": "NONE_VALUE = \"NONE\"", "var_name": "NONE_VALUE"}, {"original_string": "private final Map<String, CommandTracker> launchParameterTracker;", "modifier": "private final", "type": "Map<String, CommandTracker>", "declarator": "launchParameterTracker", "var_name": "launchParameterTracker"}], "methods": [{"identifier": "AgentLaunchParameter", "parameters": "(String parameters)", "modifiers": "public", "return": "", "signature": " AgentLaunchParameter(String parameters)", "full_signature": "public  AgentLaunchParameter(String parameters)", "class_method_signature": "AgentLaunchParameter.AgentLaunchParameter(String parameters)", "testcase": false, "constructor": true}, {"identifier": "getNextLaunchParameter", "parameters": "(String componentGroup)", "modifiers": "public", "return": "String", "signature": "String getNextLaunchParameter(String componentGroup)", "full_signature": "public String getNextLaunchParameter(String componentGroup)", "class_method_signature": "AgentLaunchParameter.getNextLaunchParameter(String componentGroup)", "testcase": false, "constructor": false}, {"identifier": "parseExpectedLaunchParameters", "parameters": "(String launchParameters)", "modifiers": "", "return": "Map<String, CommandTracker>", "signature": "Map<String, CommandTracker> parseExpectedLaunchParameters(String launchParameters)", "full_signature": " Map<String, CommandTracker> parseExpectedLaunchParameters(String launchParameters)", "class_method_signature": "AgentLaunchParameter.parseExpectedLaunchParameters(String launchParameters)", "testcase": false, "constructor": false}], "file": "slider-core/src/main/java/org/apache/slider/providers/agent/AgentLaunchParameter.java"}, "focal_method": {"identifier": "AgentLaunchParameter", "parameters": "(String parameters)", "modifiers": "public", "return": "", "body": "public AgentLaunchParameter(String parameters) {\n    launchParameterTracker = parseExpectedLaunchParameters(parameters);\n  }", "signature": " AgentLaunchParameter(String parameters)", "full_signature": "public  AgentLaunchParameter(String parameters)", "class_method_signature": "AgentLaunchParameter.AgentLaunchParameter(String parameters)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 20051204, "url": "https://github.com/apache/incubator-retired-slider", "language": "Java", "is_fork": false, "fork_count": 73, "stargazer_count": 74, "size": 16472, "license": "licensed"}}