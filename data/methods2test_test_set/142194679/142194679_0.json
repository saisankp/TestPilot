{"test_class": {"identifier": "SharedUtilitiesTest", "superclass": "", "interfaces": "", "fields": [], "file": "resources/src/test/java/org/hl7/davinci/SharedUtilitiesTest.java"}, "test_case": {"identifier": "testCompareReferenceToId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCompareReferenceToId() {\n    assertTrue(SharedUtilities.compareReferenceToId(\"Patient/1234\", \"1234\"));\n    assertTrue(SharedUtilities.compareReferenceToId(\"1234\", \"Patient/1234\"));\n    assertTrue(SharedUtilities.compareReferenceToId(\"1234\", \"1234\"));\n    assertTrue(SharedUtilities.compareReferenceToId(\"Patient/1234\", \"Patient/1234\"));\n\n    assertFalse(SharedUtilities.compareReferenceToId(\"Patient/1234\", \"4321\"));\n    assertFalse(SharedUtilities.compareReferenceToId(\"1234\", \"Patient/4321\"));\n    assertFalse(SharedUtilities.compareReferenceToId(\"1234\", \"4321\"));\n    assertFalse(SharedUtilities.compareReferenceToId(\"Patient/1234\", \"Patient/4321\"));\n\n    assertFalse(SharedUtilities.compareReferenceToId(\"Patient/1234\", \"Practitioner/1234\"));\n    assertFalse(SharedUtilities.compareReferenceToId(\"Patient/1234\", \"Practitioner/4321\"));\n  }", "signature": "void testCompareReferenceToId()", "full_signature": "@Test public void testCompareReferenceToId()", "class_method_signature": "SharedUtilitiesTest.testCompareReferenceToId()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "compareReferenceToId", "assertTrue", "compareReferenceToId", "assertTrue", "compareReferenceToId", "assertTrue", "compareReferenceToId", "assertFalse", "compareReferenceToId", "assertFalse", "compareReferenceToId", "assertFalse", "compareReferenceToId", "assertFalse", "compareReferenceToId", "assertFalse", "compareReferenceToId", "assertFalse", "compareReferenceToId"]}, "focal_class": {"identifier": "SharedUtilities", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "compareReferenceToId", "parameters": "(String reference, String id)", "modifiers": "static", "return": "boolean", "signature": "boolean compareReferenceToId(String reference, String id)", "full_signature": "static boolean compareReferenceToId(String reference, String id)", "class_method_signature": "SharedUtilities.compareReferenceToId(String reference, String id)", "testcase": false, "constructor": false}, {"identifier": "calculateAge", "parameters": "(Date birthDate)", "modifiers": "public static", "return": "int", "signature": "int calculateAge(Date birthDate)", "full_signature": "public static int calculateAge(Date birthDate)", "class_method_signature": "SharedUtilities.calculateAge(Date birthDate)", "testcase": false, "constructor": false}], "file": "resources/src/main/java/org/hl7/davinci/SharedUtilities.java"}, "focal_method": {"identifier": "compareReferenceToId", "parameters": "(String reference, String id)", "modifiers": "static", "return": "boolean", "body": "static boolean compareReferenceToId(String reference, String id) {\n    String[] refParts = reference.split(\"/\");\n    String[] idParts = id.split(\"/\");\n    if (refParts.length > idParts.length) {\n      return refParts[1].equals(idParts[0]);\n    } else if (refParts.length < idParts.length) {\n      return refParts[0].equals(idParts[1]);\n    } else { // same length\n      if (refParts.length == 1) {\n        return refParts[0].equals(idParts[0]);\n      } else {\n        return refParts[0].equals(idParts[0]) && refParts[1].equals(idParts[1]);\n      }\n    }\n  }", "signature": "boolean compareReferenceToId(String reference, String id)", "full_signature": "static boolean compareReferenceToId(String reference, String id)", "class_method_signature": "SharedUtilities.compareReferenceToId(String reference, String id)", "testcase": false, "constructor": false, "invocations": ["split", "split", "equals", "equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 142194679, "url": "https://github.com/HL7-DaVinci/CRD", "stars": 16, "created": "7/24/2018 5:58:57 PM +00:00", "updates": "2020-01-21T19:10:31+00:00", "fork": "False", "license": "licensed"}}