{"test_class": {"identifier": "ServletContainerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ServletContainerImpl servletContainer;", "modifier": "private", "type": "ServletContainerImpl", "declarator": "servletContainer", "var_name": "servletContainer"}, {"original_string": "private ServletConfig servletConfig;", "modifier": "private", "type": "ServletConfig", "declarator": "servletConfig", "var_name": "servletConfig"}, {"original_string": "private FilterConfig filterConfig;", "modifier": "private", "type": "FilterConfig", "declarator": "filterConfig", "var_name": "filterConfig"}], "file": "http/src/test/java/ro/polak/http/servlet/impl/ServletContainerImplTest.java"}, "test_case": {"identifier": "shouldInitializeServlet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldInitializeServlet() throws Exception {\n        SampleServlet servlet = (SampleServlet) servletContainer.getServletForClass(SampleServlet.class, servletConfig);\n\n        assertThat(servlet, is(not(nullValue())));\n        assertThat(servlet.getInitializedCounter(), is(equalTo(1)));\n        assertThat(servlet.getServletConfig(), is(equalTo(servletConfig)));\n    }", "signature": "void shouldInitializeServlet()", "full_signature": "@Test public void shouldInitializeServlet()", "class_method_signature": "ServletContainerImplTest.shouldInitializeServlet()", "testcase": true, "constructor": false, "invocations": ["getServletForClass", "assertThat", "is", "not", "nullValue", "assertThat", "getInitializedCounter", "is", "equalTo", "assertThat", "getServletConfig", "is", "equalTo"]}, "focal_class": {"identifier": "ServletContainerImpl", "superclass": "", "interfaces": "implements ServletContainer", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(ServletContainerImpl.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(ServletContainerImpl.class.getName())", "var_name": "LOGGER"}, {"original_string": "private final Map<Class<? extends HttpServlet>, Servlet> servlets = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<Class<? extends HttpServlet>, Servlet>", "declarator": "servlets = new ConcurrentHashMap<>()", "var_name": "servlets"}, {"original_string": "private final Map<Class<? extends Filter>, Filter> filters = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<Class<? extends Filter>, Filter>", "declarator": "filters = new ConcurrentHashMap<>()", "var_name": "filters"}, {"original_string": "private final Map<Class<? extends HttpServlet>, ServletStats> servletStats = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<Class<? extends HttpServlet>, ServletStats>", "declarator": "servletStats = new ConcurrentHashMap<>()", "var_name": "servletStats"}, {"original_string": "private final Timer timer = new Timer();", "modifier": "private final", "type": "Timer", "declarator": "timer = new Timer()", "var_name": "timer"}, {"original_string": "private final DateProvider dateProvider;", "modifier": "private final", "type": "DateProvider", "declarator": "dateProvider", "var_name": "dateProvider"}], "methods": [{"identifier": "ServletContainerImpl", "parameters": "(final DateProvider dateProvider,\n                                final long servletTimeToLiveInMs,\n                                final long monitoringIntervalInMs)", "modifiers": "public", "return": "", "signature": " ServletContainerImpl(final DateProvider dateProvider,\n                                final long servletTimeToLiveInMs,\n                                final long monitoringIntervalInMs)", "full_signature": "public  ServletContainerImpl(final DateProvider dateProvider,\n                                final long servletTimeToLiveInMs,\n                                final long monitoringIntervalInMs)", "class_method_signature": "ServletContainerImpl.ServletContainerImpl(final DateProvider dateProvider,\n                                final long servletTimeToLiveInMs,\n                                final long monitoringIntervalInMs)", "testcase": false, "constructor": true}, {"identifier": "getServletForClass", "parameters": "(final Class<? extends HttpServlet> servletClass, final ServletConfig servletConfig)", "modifiers": "@Override public", "return": "Servlet", "signature": "Servlet getServletForClass(final Class<? extends HttpServlet> servletClass, final ServletConfig servletConfig)", "full_signature": "@Override public Servlet getServletForClass(final Class<? extends HttpServlet> servletClass, final ServletConfig servletConfig)", "class_method_signature": "ServletContainerImpl.getServletForClass(final Class<? extends HttpServlet> servletClass, final ServletConfig servletConfig)", "testcase": false, "constructor": false}, {"identifier": "getFilterForClass", "parameters": "(final Class<? extends Filter> filterClass, final FilterConfig filterConfig)", "modifiers": "@Override public", "return": "Filter", "signature": "Filter getFilterForClass(final Class<? extends Filter> filterClass, final FilterConfig filterConfig)", "full_signature": "@Override public Filter getFilterForClass(final Class<? extends Filter> filterClass, final FilterConfig filterConfig)", "class_method_signature": "ServletContainerImpl.getFilterForClass(final Class<? extends Filter> filterClass, final FilterConfig filterConfig)", "testcase": false, "constructor": false}, {"identifier": "initializeServlet", "parameters": "(final Class<? extends HttpServlet> serverClass, final ServletConfig servletConfig)", "modifiers": "private", "return": "Servlet", "signature": "Servlet initializeServlet(final Class<? extends HttpServlet> serverClass, final ServletConfig servletConfig)", "full_signature": "private Servlet initializeServlet(final Class<? extends HttpServlet> serverClass, final ServletConfig servletConfig)", "class_method_signature": "ServletContainerImpl.initializeServlet(final Class<? extends HttpServlet> serverClass, final ServletConfig servletConfig)", "testcase": false, "constructor": false}, {"identifier": "instantiateServlet", "parameters": "(final Class<? extends HttpServlet> serverClass)", "modifiers": "private", "return": "Servlet", "signature": "Servlet instantiateServlet(final Class<? extends HttpServlet> serverClass)", "full_signature": "private Servlet instantiateServlet(final Class<? extends HttpServlet> serverClass)", "class_method_signature": "ServletContainerImpl.instantiateServlet(final Class<? extends HttpServlet> serverClass)", "testcase": false, "constructor": false}, {"identifier": "instantiateFilter", "parameters": "(final Class<? extends Filter> filterClass)", "modifiers": "private", "return": "Filter", "signature": "Filter instantiateFilter(final Class<? extends Filter> filterClass)", "full_signature": "private Filter instantiateFilter(final Class<? extends Filter> filterClass)", "class_method_signature": "ServletContainerImpl.instantiateFilter(final Class<? extends Filter> filterClass)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "ServletContainerImpl.shutdown()", "testcase": false, "constructor": false}, {"identifier": "shutdownServlet", "parameters": "(final Servlet servlet)", "modifiers": "private", "return": "void", "signature": "void shutdownServlet(final Servlet servlet)", "full_signature": "private void shutdownServlet(final Servlet servlet)", "class_method_signature": "ServletContainerImpl.shutdownServlet(final Servlet servlet)", "testcase": false, "constructor": false}, {"identifier": "getServletStats", "parameters": "()", "modifiers": "public", "return": "Map<Class<? extends HttpServlet>, ServletStats>", "signature": "Map<Class<? extends HttpServlet>, ServletStats> getServletStats()", "full_signature": "public Map<Class<? extends HttpServlet>, ServletStats> getServletStats()", "class_method_signature": "ServletContainerImpl.getServletStats()", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/servlet/impl/ServletContainerImpl.java"}, "focal_method": {"identifier": "getServletForClass", "parameters": "(final Class<? extends HttpServlet> servletClass, final ServletConfig servletConfig)", "modifiers": "@Override public", "return": "Servlet", "body": "@Override\n    public Servlet getServletForClass(final Class<? extends HttpServlet> servletClass, final ServletConfig servletConfig)\n            throws ServletInitializationException, ServletException {\n\n        if (servlets.containsKey(servletClass)) {\n            servletStats.get(servletClass).setLastRequestedAt(dateProvider.now());\n            return servlets.get(servletClass);\n        }\n\n        return initializeServlet(servletClass, servletConfig);\n    }", "signature": "Servlet getServletForClass(final Class<? extends HttpServlet> servletClass, final ServletConfig servletConfig)", "full_signature": "@Override public Servlet getServletForClass(final Class<? extends HttpServlet> servletClass, final ServletConfig servletConfig)", "class_method_signature": "ServletContainerImpl.getServletForClass(final Class<? extends HttpServlet> servletClass, final ServletConfig servletConfig)", "testcase": false, "constructor": false, "invocations": ["containsKey", "setLastRequestedAt", "get", "now", "get", "initializeServlet"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}