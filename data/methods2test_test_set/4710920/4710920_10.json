{"test_class": {"identifier": "LogTelnetHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static TelnetHandler log = new LogTelnetHandler();", "modifier": "private static", "type": "TelnetHandler", "declarator": "log = new LogTelnetHandler()", "var_name": "log"}, {"original_string": "private Channel mockChannel;", "modifier": "private", "type": "Channel", "declarator": "mockChannel", "var_name": "mockChannel"}], "file": "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/legacy/LogTelnetHandlerTest.java"}, "test_case": {"identifier": "testPrintLog", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPrintLog() throws RemotingException {\n        mockChannel = mock(Channel.class);\n\n        String result = log.telnet(mockChannel, \"100\");\n        assertTrue(result.contains(\"CURRENT LOG APPENDER\"));\n    }", "signature": "void testPrintLog()", "full_signature": "@Test public void testPrintLog()", "class_method_signature": "LogTelnetHandlerTest.testPrintLog()", "testcase": true, "constructor": false, "invocations": ["mock", "telnet", "assertTrue", "contains"]}, "focal_class": {"identifier": "LogTelnetHandler", "superclass": "", "interfaces": "implements TelnetHandler", "fields": [{"original_string": "public static final String SERVICE_KEY = \"telnet.log\";", "modifier": "public static final", "type": "String", "declarator": "SERVICE_KEY = \"telnet.log\"", "var_name": "SERVICE_KEY"}], "methods": [{"identifier": "telnet", "parameters": "(Channel channel, String message)", "modifiers": "@Override public", "return": "String", "signature": "String telnet(Channel channel, String message)", "full_signature": "@Override public String telnet(Channel channel, String message)", "class_method_signature": "LogTelnetHandler.telnet(Channel channel, String message)", "testcase": false, "constructor": false}], "file": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/legacy/LogTelnetHandler.java"}, "focal_method": {"identifier": "telnet", "parameters": "(Channel channel, String message)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String telnet(Channel channel, String message) {\n        long size;\n        File file = LoggerFactory.getFile();\n        StringBuffer buf = new StringBuffer();\n        if (message == null || message.trim().length() == 0) {\n            buf.append(\"EXAMPLE: log error / log 100\");\n        } else {\n            String[] str = message.split(\" \");\n            if (!StringUtils.isInteger(str[0])) {\n                LoggerFactory.setLevel(Level.valueOf(message.toUpperCase()));\n            } else {\n                int showLogLength = Integer.parseInt(str[0]);\n\n                if (file != null && file.exists()) {\n                    try(FileInputStream fis = new FileInputStream(file)) {\n                        FileChannel filechannel = fis.getChannel();\n                        size = filechannel.size();\n                        ByteBuffer bb;\n                        if (size <= showLogLength) {\n                            bb = ByteBuffer.allocate((int) size);\n                            filechannel.read(bb, 0);\n                        } else {\n                            int pos = (int) (size - showLogLength);\n                            bb = ByteBuffer.allocate(showLogLength);\n                            filechannel.read(bb, pos);\n                        }\n                        bb.flip();\n                        String content = new String(bb.array()).replace(\"<\", \"&lt;\")\n                                .replace(\">\", \"&gt;\").replace(\"\\n\", \"<br/><br/>\");\n                        buf.append(\"\\r\\ncontent:\").append(content);\n\n                        buf.append(\"\\r\\nmodified:\").append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\n                                .format(new Date(file.lastModified())));\n                        buf.append(\"\\r\\nsize:\").append(size).append(\"\\r\\n\");\n                    } catch (Exception e) {\n                        buf.append(e.getMessage());\n                    }\n                } else {\n                    buf.append(\"\\r\\nMESSAGE: log file not exists or log appender is console .\");\n                }\n            }\n        }\n        buf.append(\"\\r\\nCURRENT LOG LEVEL:\").append(LoggerFactory.getLevel()).append(\"\\r\\nCURRENT LOG APPENDER:\")\n                .append(file == null ? \"console\" : file.getAbsolutePath());\n        return buf.toString();\n    }", "signature": "String telnet(Channel channel, String message)", "full_signature": "@Override public String telnet(Channel channel, String message)", "class_method_signature": "LogTelnetHandler.telnet(Channel channel, String message)", "testcase": false, "constructor": false, "invocations": ["getFile", "length", "trim", "append", "split", "isInteger", "setLevel", "valueOf", "toUpperCase", "parseInt", "exists", "getChannel", "size", "allocate", "read", "allocate", "read", "flip", "replace", "replace", "replace", "array", "append", "append", "append", "append", "format", "lastModified", "append", "append", "append", "append", "getMessage", "append", "append", "append", "append", "append", "getLevel", "getAbsolutePath", "toString"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}