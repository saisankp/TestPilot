{"test_class": {"identifier": "XmpWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String OUT_FOLDER = \"./target/com/itextpdf/text/xml/xmp/\";", "modifier": "public static final", "type": "String", "declarator": "OUT_FOLDER = \"./target/com/itextpdf/text/xml/xmp/\"", "var_name": "OUT_FOLDER"}, {"original_string": "public static final String CMP_FOLDER = \"./src/test/resources/com/itextpdf/text/xml/xmp/\";", "modifier": "public static final", "type": "String", "declarator": "CMP_FOLDER = \"./src/test/resources/com/itextpdf/text/xml/xmp/\"", "var_name": "CMP_FOLDER"}], "file": "itext/src/test/java/com/itextpdf/text/xml/xmp/XmpWriterTest.java"}, "test_case": {"identifier": "createPdfAutomaticTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createPdfAutomaticTest() throws IOException, DocumentException {\n        String fileName = \"xmp_metadata_automatic.pdf\";\n        // step 1\n        Document document = new Document();\n        // step 2\n        PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(OUT_FOLDER + fileName));\n        document.addTitle(\"Hello World example\");\n        document.addSubject(\"This example shows how to add metadata & XMP\");\n        document.addKeywords(\"Metadata, iText, step 3\");\n        document.addCreator(\"My program using 'iText'\");\n        document.addAuthor(\"Bruno Lowagie & Paulo Soares\");\n        writer.createXmpMetadata();\n        // step 3\n        document.open();\n        // step 4\n        document.add(new Paragraph(\"Hello World\"));\n        // step 5\n        document.close();\n        CompareTool ct = new CompareTool();\n        Assert.assertNull(ct.compareXmp(OUT_FOLDER + fileName, CMP_FOLDER + fileName, true));\n    }", "signature": "void createPdfAutomaticTest()", "full_signature": "@Test public void createPdfAutomaticTest()", "class_method_signature": "XmpWriterTest.createPdfAutomaticTest()", "testcase": true, "constructor": false, "invocations": ["getInstance", "addTitle", "addSubject", "addKeywords", "addCreator", "addAuthor", "createXmpMetadata", "open", "add", "close", "assertNull", "compareXmp"]}, "focal_class": {"identifier": "XmpWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String UTF8 = \"UTF-8\";", "modifier": "public static final", "type": "String", "declarator": "UTF8 = \"UTF-8\"", "var_name": "UTF8"}, {"original_string": "public static final String UTF16 = \"UTF-16\";", "modifier": "public static final", "type": "String", "declarator": "UTF16 = \"UTF-16\"", "var_name": "UTF16"}, {"original_string": "public static final String UTF16BE = \"UTF-16BE\";", "modifier": "public static final", "type": "String", "declarator": "UTF16BE = \"UTF-16BE\"", "var_name": "UTF16BE"}, {"original_string": "public static final String UTF16LE = \"UTF-16LE\";", "modifier": "public static final", "type": "String", "declarator": "UTF16LE = \"UTF-16LE\"", "var_name": "UTF16LE"}, {"original_string": "protected XMPMeta xmpMeta;", "modifier": "protected", "type": "XMPMeta", "declarator": "xmpMeta", "var_name": "xmpMeta"}, {"original_string": "protected OutputStream outputStream;", "modifier": "protected", "type": "OutputStream", "declarator": "outputStream", "var_name": "outputStream"}, {"original_string": "protected SerializeOptions serializeOptions;", "modifier": "protected", "type": "SerializeOptions", "declarator": "serializeOptions", "var_name": "serializeOptions"}], "methods": [{"identifier": "XmpWriter", "parameters": "(OutputStream os, String utfEncoding, int extraSpace)", "modifiers": "public", "return": "", "signature": " XmpWriter(OutputStream os, String utfEncoding, int extraSpace)", "full_signature": "public  XmpWriter(OutputStream os, String utfEncoding, int extraSpace)", "class_method_signature": "XmpWriter.XmpWriter(OutputStream os, String utfEncoding, int extraSpace)", "testcase": false, "constructor": true}, {"identifier": "XmpWriter", "parameters": "(OutputStream os)", "modifiers": "public", "return": "", "signature": " XmpWriter(OutputStream os)", "full_signature": "public  XmpWriter(OutputStream os)", "class_method_signature": "XmpWriter.XmpWriter(OutputStream os)", "testcase": false, "constructor": true}, {"identifier": "XmpWriter", "parameters": "(OutputStream os, PdfDictionary info)", "modifiers": "public", "return": "", "signature": " XmpWriter(OutputStream os, PdfDictionary info)", "full_signature": "public  XmpWriter(OutputStream os, PdfDictionary info)", "class_method_signature": "XmpWriter.XmpWriter(OutputStream os, PdfDictionary info)", "testcase": false, "constructor": true}, {"identifier": "XmpWriter", "parameters": "(OutputStream os, Map<String, String> info)", "modifiers": "public", "return": "", "signature": " XmpWriter(OutputStream os, Map<String, String> info)", "full_signature": "public  XmpWriter(OutputStream os, Map<String, String> info)", "class_method_signature": "XmpWriter.XmpWriter(OutputStream os, Map<String, String> info)", "testcase": false, "constructor": true}, {"identifier": "getXmpMeta", "parameters": "()", "modifiers": "public", "return": "XMPMeta", "signature": "XMPMeta getXmpMeta()", "full_signature": "public XMPMeta getXmpMeta()", "class_method_signature": "XmpWriter.getXmpMeta()", "testcase": false, "constructor": false}, {"identifier": "setReadOnly", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setReadOnly()", "full_signature": "public void setReadOnly()", "class_method_signature": "XmpWriter.setReadOnly()", "testcase": false, "constructor": false}, {"identifier": "setAbout", "parameters": "(String about)", "modifiers": "public", "return": "void", "signature": "void setAbout(String about)", "full_signature": "public void setAbout(String about)", "class_method_signature": "XmpWriter.setAbout(String about)", "testcase": false, "constructor": false}, {"identifier": "addRdfDescription", "parameters": "(String xmlns, String content)", "modifiers": "@Deprecated public", "return": "void", "signature": "void addRdfDescription(String xmlns, String content)", "full_signature": "@Deprecated public void addRdfDescription(String xmlns, String content)", "class_method_signature": "XmpWriter.addRdfDescription(String xmlns, String content)", "testcase": false, "constructor": false}, {"identifier": "addRdfDescription", "parameters": "(XmpSchema s)", "modifiers": "@Deprecated public", "return": "void", "signature": "void addRdfDescription(XmpSchema s)", "full_signature": "@Deprecated public void addRdfDescription(XmpSchema s)", "class_method_signature": "XmpWriter.addRdfDescription(XmpSchema s)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(String schemaNS, String propName, Object value)", "modifiers": "public", "return": "void", "signature": "void setProperty(String schemaNS, String propName, Object value)", "full_signature": "public void setProperty(String schemaNS, String propName, Object value)", "class_method_signature": "XmpWriter.setProperty(String schemaNS, String propName, Object value)", "testcase": false, "constructor": false}, {"identifier": "appendArrayItem", "parameters": "(String schemaNS, String arrayName, String value)", "modifiers": "public", "return": "void", "signature": "void appendArrayItem(String schemaNS, String arrayName, String value)", "full_signature": "public void appendArrayItem(String schemaNS, String arrayName, String value)", "class_method_signature": "XmpWriter.appendArrayItem(String schemaNS, String arrayName, String value)", "testcase": false, "constructor": false}, {"identifier": "appendOrderedArrayItem", "parameters": "(String schemaNS, String arrayName, String value)", "modifiers": "public", "return": "void", "signature": "void appendOrderedArrayItem(String schemaNS, String arrayName, String value)", "full_signature": "public void appendOrderedArrayItem(String schemaNS, String arrayName, String value)", "class_method_signature": "XmpWriter.appendOrderedArrayItem(String schemaNS, String arrayName, String value)", "testcase": false, "constructor": false}, {"identifier": "appendAlternateArrayItem", "parameters": "(String schemaNS, String arrayName, String value)", "modifiers": "public", "return": "void", "signature": "void appendAlternateArrayItem(String schemaNS, String arrayName, String value)", "full_signature": "public void appendAlternateArrayItem(String schemaNS, String arrayName, String value)", "class_method_signature": "XmpWriter.appendAlternateArrayItem(String schemaNS, String arrayName, String value)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(OutputStream externalOutputStream)", "modifiers": "public", "return": "void", "signature": "void serialize(OutputStream externalOutputStream)", "full_signature": "public void serialize(OutputStream externalOutputStream)", "class_method_signature": "XmpWriter.serialize(OutputStream externalOutputStream)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "XmpWriter.close()", "testcase": false, "constructor": false}, {"identifier": "addDocInfoProperty", "parameters": "(Object key, String value)", "modifiers": "public", "return": "void", "signature": "void addDocInfoProperty(Object key, String value)", "full_signature": "public void addDocInfoProperty(Object key, String value)", "class_method_signature": "XmpWriter.addDocInfoProperty(Object key, String value)", "testcase": false, "constructor": false}], "file": "itext/src/main/java/com/itextpdf/text/xml/xmp/XmpWriter.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void close() throws IOException {\n        if (outputStream == null)\n            return;\n        try {\n            XMPMetaFactory.serialize(xmpMeta, outputStream, serializeOptions);\n            outputStream = null;\n        } catch (XMPException xmpExc) {\n            throw new IOException(xmpExc.getMessage());\n        }\n    }", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "XmpWriter.close()", "testcase": false, "constructor": false, "invocations": ["serialize", "getMessage"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}