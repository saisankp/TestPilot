{"test_class": {"identifier": "RunEntityServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    RunEntityService service;", "modifier": "@InjectMocks", "type": "RunEntityService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n    RunGateway gateway;", "modifier": "@Mock", "type": "RunGateway", "declarator": "gateway", "var_name": "gateway"}, {"original_string": "@Mock\n    RunAddPayload addPayload;", "modifier": "@Mock", "type": "RunAddPayload", "declarator": "addPayload", "var_name": "addPayload"}, {"original_string": "@Mock\n    Event addPayloadEvent;", "modifier": "@Mock", "type": "Event", "declarator": "addPayloadEvent", "var_name": "addPayloadEvent"}, {"original_string": "@Mock\n    Run addedRun;", "modifier": "@Mock", "type": "Run", "declarator": "addedRun", "var_name": "addedRun"}, {"original_string": "@Mock\n    RunAddTimePayload runAddRawTimePayload;", "modifier": "@Mock", "type": "RunAddTimePayload", "declarator": "runAddRawTimePayload", "var_name": "runAddRawTimePayload"}, {"original_string": "@Mock\n    Event runAddRawTimePayloadEvent;", "modifier": "@Mock", "type": "Event", "declarator": "runAddRawTimePayloadEvent", "var_name": "runAddRawTimePayloadEvent"}, {"original_string": "@Mock\n    BigDecimal runAddRawTimePayloadRawTime;", "modifier": "@Mock", "type": "BigDecimal", "declarator": "runAddRawTimePayloadRawTime", "var_name": "runAddRawTimePayloadRawTime"}], "file": "service/src/test/java/org/coner/core/domain/service/RunEntityServiceTest.java"}, "test_case": {"identifier": "whenAddRunWithEventNoPriorRunsItShouldSetSequence", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void whenAddRunWithEventNoPriorRunsItShouldSetSequence() throws AddEntityException {\n        when(gateway.findLastInSequenceForEvent(addPayloadEvent)).thenReturn(null);\n        when(gateway.add(addPayload)).thenReturn(addedRun);\n\n        Run actual = service.add(addPayload);\n\n        verify(addPayload).setSequence(1);\n        verify(gateway).add(addPayload);\n        assertThat(actual).isSameAs(addedRun);\n    }", "signature": "void whenAddRunWithEventNoPriorRunsItShouldSetSequence()", "full_signature": "@Test public void whenAddRunWithEventNoPriorRunsItShouldSetSequence()", "class_method_signature": "RunEntityServiceTest.whenAddRunWithEventNoPriorRunsItShouldSetSequence()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findLastInSequenceForEvent", "thenReturn", "when", "add", "add", "setSequence", "verify", "add", "verify", "isSameAs", "assertThat"]}, "focal_class": {"identifier": "RunEntityService", "superclass": "extends AbstractEntityService<\n        Run,\n        RunAddPayload,\n        RunGateway>", "interfaces": "", "fields": [{"original_string": "private final EventEntityService eventEntityService;", "modifier": "private final", "type": "EventEntityService", "declarator": "eventEntityService", "var_name": "eventEntityService"}], "methods": [{"identifier": "RunEntityService", "parameters": "(RunGateway gateway, EventEntityService eventEntityService)", "modifiers": "@Inject public", "return": "", "signature": " RunEntityService(RunGateway gateway, EventEntityService eventEntityService)", "full_signature": "@Inject public  RunEntityService(RunGateway gateway, EventEntityService eventEntityService)", "class_method_signature": "RunEntityService.RunEntityService(RunGateway gateway, EventEntityService eventEntityService)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(RunAddPayload addPayload)", "modifiers": "@Override public", "return": "Run", "signature": "Run add(RunAddPayload addPayload)", "full_signature": "@Override public Run add(RunAddPayload addPayload)", "class_method_signature": "RunEntityService.add(RunAddPayload addPayload)", "testcase": false, "constructor": false}, {"identifier": "getByEventIdAndRunId", "parameters": "(String eventId, String runId)", "modifiers": "public", "return": "Run", "signature": "Run getByEventIdAndRunId(String eventId, String runId)", "full_signature": "public Run getByEventIdAndRunId(String eventId, String runId)", "class_method_signature": "RunEntityService.getByEventIdAndRunId(String eventId, String runId)", "testcase": false, "constructor": false}, {"identifier": "getAllWithEventId", "parameters": "(String eventId)", "modifiers": "public", "return": "List<Run>", "signature": "List<Run> getAllWithEventId(String eventId)", "full_signature": "public List<Run> getAllWithEventId(String eventId)", "class_method_signature": "RunEntityService.getAllWithEventId(String eventId)", "testcase": false, "constructor": false}, {"identifier": "addTimeToFirstRunInSequenceWithoutRawTime", "parameters": "(RunAddTimePayload addTimePayload)", "modifiers": "public", "return": "RunTimeAddedPayload", "signature": "RunTimeAddedPayload addTimeToFirstRunInSequenceWithoutRawTime(RunAddTimePayload addTimePayload)", "full_signature": "public RunTimeAddedPayload addTimeToFirstRunInSequenceWithoutRawTime(RunAddTimePayload addTimePayload)", "class_method_signature": "RunEntityService.addTimeToFirstRunInSequenceWithoutRawTime(RunAddTimePayload addTimePayload)", "testcase": false, "constructor": false}, {"identifier": "getAllWithRegistration", "parameters": "(Registration registration)", "modifiers": "public", "return": "List<Run>", "signature": "List<Run> getAllWithRegistration(Registration registration)", "full_signature": "public List<Run> getAllWithRegistration(Registration registration)", "class_method_signature": "RunEntityService.getAllWithRegistration(Registration registration)", "testcase": false, "constructor": false}], "file": "service/src/main/java/org/coner/core/domain/service/RunEntityService.java"}, "focal_method": {"identifier": "add", "parameters": "(RunAddPayload addPayload)", "modifiers": "@Override public", "return": "Run", "body": "@Override\n    public Run add(RunAddPayload addPayload) throws AddEntityException {\n        Run lastInSequenceForEvent = gateway.findLastInSequenceForEvent(addPayload.getEvent());\n        addPayload.setSequence(\n                1 + (lastInSequenceForEvent != null ? lastInSequenceForEvent.getSequence() : 0)\n        );\n        return gateway.add(addPayload);\n    }", "signature": "Run add(RunAddPayload addPayload)", "full_signature": "@Override public Run add(RunAddPayload addPayload)", "class_method_signature": "RunEntityService.add(RunAddPayload addPayload)", "testcase": false, "constructor": false, "invocations": ["findLastInSequenceForEvent", "getEvent", "setSequence", "getSequence", "add"]}, "repository": {"repo_id": 28649714, "url": "https://github.com/caeos/coner-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 1027, "license": "licensed"}}