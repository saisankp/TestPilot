{"test_class": {"identifier": "QuantityTest", "superclass": "", "interfaces": "", "fields": [], "file": "designer/testSrc/com/android/tools/idea/uibuilder/property/editors/support/QuantityTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testParse() {\n    assertQuantity(Quantity.parse(\"25\"), 25, \"\");\n    assertQuantity(Quantity.parse(\"12dp\"), 12, \"dp\");\n    assertQuantity(Quantity.parse(\"20sp\"), 20, \"sp\");\n    assertQuantity(Quantity.parse(\"-15 dp\"), -15, \"dp\");\n    assertThat(Quantity.parse(\"9999999999999999dp\")).isNull();\n    assertThat(Quantity.parse(\"rio\")).isNull();\n  }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "QuantityTest.testParse()", "testcase": true, "constructor": false, "invocations": ["assertQuantity", "parse", "assertQuantity", "parse", "assertQuantity", "parse", "assertQuantity", "parse", "isNull", "assertThat", "parse", "isNull", "assertThat", "parse"]}, "focal_class": {"identifier": "Quantity", "superclass": "", "interfaces": "implements Comparable<Quantity>", "fields": [{"original_string": "private static final Pattern QUANTITY_PATTERN = Pattern.compile(\"^(-?\\\\d+(\\\\.\\\\d+)?)(.*)$\");", "modifier": "private static final", "type": "Pattern", "declarator": "QUANTITY_PATTERN = Pattern.compile(\"^(-?\\\\d+(\\\\.\\\\d+)?)(.*)$\")", "var_name": "QUANTITY_PATTERN"}, {"original_string": "private final int myValue;", "modifier": "private final", "type": "int", "declarator": "myValue", "var_name": "myValue"}, {"original_string": "private final String myUnit;", "modifier": "private final", "type": "String", "declarator": "myUnit", "var_name": "myUnit"}], "methods": [{"identifier": "parse", "parameters": "(@NotNull String value)", "modifiers": "@Nullable public static", "return": "Quantity", "signature": "Quantity parse(@NotNull String value)", "full_signature": "@Nullable public static Quantity parse(@NotNull String value)", "class_method_signature": "Quantity.parse(@NotNull String value)", "testcase": false, "constructor": false}, {"identifier": "addUnit", "parameters": "(@NotNull NlProperty property, @NotNull String value)", "modifiers": "@NotNull public static", "return": "String", "signature": "String addUnit(@NotNull NlProperty property, @NotNull String value)", "full_signature": "@NotNull public static String addUnit(@NotNull NlProperty property, @NotNull String value)", "class_method_signature": "Quantity.addUnit(@NotNull NlProperty property, @NotNull String value)", "testcase": false, "constructor": false}, {"identifier": "addUnit", "parameters": "(@NotNull ResourceType type, @NotNull String value)", "modifiers": "public static", "return": "String", "signature": "String addUnit(@NotNull ResourceType type, @NotNull String value)", "full_signature": "public static String addUnit(@NotNull ResourceType type, @NotNull String value)", "class_method_signature": "Quantity.addUnit(@NotNull ResourceType type, @NotNull String value)", "testcase": false, "constructor": false}, {"identifier": "Quantity", "parameters": "(int value, @NotNull String unit)", "modifiers": "private", "return": "", "signature": " Quantity(int value, @NotNull String unit)", "full_signature": "private  Quantity(int value, @NotNull String unit)", "class_method_signature": "Quantity.Quantity(int value, @NotNull String unit)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getValue()", "full_signature": "public int getValue()", "class_method_signature": "Quantity.getValue()", "testcase": false, "constructor": false}, {"identifier": "getUnit", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "signature": "String getUnit()", "full_signature": "@NotNull public String getUnit()", "class_method_signature": "Quantity.getUnit()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(@Nullable Quantity other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(@Nullable Quantity other)", "full_signature": "@Override public int compareTo(@Nullable Quantity other)", "class_method_signature": "Quantity.compareTo(@Nullable Quantity other)", "testcase": false, "constructor": false}], "file": "designer/src/com/android/tools/idea/uibuilder/property/editors/support/Quantity.java"}, "focal_method": {"identifier": "parse", "parameters": "(@NotNull String value)", "modifiers": "@Nullable public static", "return": "Quantity", "body": "@Nullable\n  public static Quantity parse(@NotNull String value) {\n    Matcher matcher = QUANTITY_PATTERN.matcher(value);\n    if (!matcher.matches()) {\n      return null;\n    }\n    try {\n      return new Quantity(Integer.parseInt(matcher.group(1)), matcher.group(3).trim());\n    }\n    catch (NumberFormatException ignore) {\n      return null;  // Format this value as if this was not a value with a unit\n    }\n  }", "signature": "Quantity parse(@NotNull String value)", "full_signature": "@Nullable public static Quantity parse(@NotNull String value)", "class_method_signature": "Quantity.parse(@NotNull String value)", "testcase": false, "constructor": false, "invocations": ["matcher", "matches", "parseInt", "group", "trim", "group"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}