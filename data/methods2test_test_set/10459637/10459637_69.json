{"test_class": {"identifier": "LinkDiscoveryManagerTest", "superclass": "extends FloodlightTestCase", "interfaces": "", "fields": [{"original_string": "private TestLinkDiscoveryManager ldm;", "modifier": "private", "type": "TestLinkDiscoveryManager", "declarator": "ldm", "var_name": "ldm"}, {"original_string": "protected static Logger log = LoggerFactory.getLogger(LinkDiscoveryManagerTest.class);", "modifier": "protected static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LinkDiscoveryManagerTest.class)", "var_name": "log"}], "file": "network-level/fl-ho-nl/src/test/java/net/floodlightcontroller/linkdiscovery/internal/LinkDiscoveryManagerTest.java"}, "test_case": {"identifier": "testRemovedSwitch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemovedSwitch() {\n        LinkDiscoveryManager topology = getTopology();\n\n        Link lt = new Link(1L, 2, 2L, 1);\n        NodePortTuple srcNpt = new NodePortTuple(1L, 2);\n        NodePortTuple dstNpt = new NodePortTuple(2L, 1);\n        LinkInfo info = new LinkInfo(System.currentTimeMillis(),\n                                     System.currentTimeMillis(), null,\n                                     0, 0);\n        topology.addOrUpdateLink(lt, info);\n\n        IOFSwitch sw1 = getMockFloodlightProvider().getSwitches().get(1L);\n        IOFSwitch sw2 = getMockFloodlightProvider().getSwitches().get(2L);\n        // Mock up our expected behavior\n        topology.removedSwitch(sw1);\n        verify(sw1, sw2);\n\n        // check invariants hold\n        assertNull(topology.switchLinks.get(lt.getSrc()));\n        assertNull(topology.switchLinks.get(lt.getDst()));\n        assertNull(topology.portLinks.get(srcNpt));\n        assertNull(topology.portLinks.get(dstNpt));\n        assertTrue(topology.links.isEmpty());\n    }", "signature": "void testRemovedSwitch()", "full_signature": "@Test public void testRemovedSwitch()", "class_method_signature": "LinkDiscoveryManagerTest.testRemovedSwitch()", "testcase": true, "constructor": false, "invocations": ["getTopology", "currentTimeMillis", "currentTimeMillis", "addOrUpdateLink", "get", "getSwitches", "getMockFloodlightProvider", "get", "getSwitches", "getMockFloodlightProvider", "removedSwitch", "verify", "assertNull", "get", "getSrc", "assertNull", "get", "getDst", "assertNull", "get", "assertNull", "get", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "LinkDiscoveryManager", "superclass": "", "interfaces": "implements IOFMessageListener, IOFSwitchListener, \nIStorageSourceListener, ILinkDiscoveryService,\nIFloodlightModule, IInfoProvider, IHAListener", "fields": [{"original_string": "protected static Logger log = LoggerFactory.getLogger(LinkDiscoveryManager.class);", "modifier": "protected static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LinkDiscoveryManager.class)", "var_name": "log"}, {"original_string": "private static final String LINK_TABLE_NAME = \"controller_link\";", "modifier": "private static final", "type": "String", "declarator": "LINK_TABLE_NAME = \"controller_link\"", "var_name": "LINK_TABLE_NAME"}, {"original_string": "private static final String LINK_ID = \"id\";", "modifier": "private static final", "type": "String", "declarator": "LINK_ID = \"id\"", "var_name": "LINK_ID"}, {"original_string": "private static final String LINK_SRC_SWITCH = \"src_switch_id\";", "modifier": "private static final", "type": "String", "declarator": "LINK_SRC_SWITCH = \"src_switch_id\"", "var_name": "LINK_SRC_SWITCH"}, {"original_string": "private static final String LINK_SRC_PORT = \"src_port\";", "modifier": "private static final", "type": "String", "declarator": "LINK_SRC_PORT = \"src_port\"", "var_name": "LINK_SRC_PORT"}, {"original_string": "private static final String LINK_SRC_PORT_STATE = \"src_port_state\";", "modifier": "private static final", "type": "String", "declarator": "LINK_SRC_PORT_STATE = \"src_port_state\"", "var_name": "LINK_SRC_PORT_STATE"}, {"original_string": "private static final String LINK_DST_SWITCH = \"dst_switch_id\";", "modifier": "private static final", "type": "String", "declarator": "LINK_DST_SWITCH = \"dst_switch_id\"", "var_name": "LINK_DST_SWITCH"}, {"original_string": "private static final String LINK_DST_PORT = \"dst_port\";", "modifier": "private static final", "type": "String", "declarator": "LINK_DST_PORT = \"dst_port\"", "var_name": "LINK_DST_PORT"}, {"original_string": "private static final String LINK_DST_PORT_STATE = \"dst_port_state\";", "modifier": "private static final", "type": "String", "declarator": "LINK_DST_PORT_STATE = \"dst_port_state\"", "var_name": "LINK_DST_PORT_STATE"}, {"original_string": "private static final String LINK_VALID_TIME = \"valid_time\";", "modifier": "private static final", "type": "String", "declarator": "LINK_VALID_TIME = \"valid_time\"", "var_name": "LINK_VALID_TIME"}, {"original_string": "private static final String LINK_TYPE = \"link_type\";", "modifier": "private static final", "type": "String", "declarator": "LINK_TYPE = \"link_type\"", "var_name": "LINK_TYPE"}, {"original_string": "private static final String SWITCH_CONFIG_TABLE_NAME = \"controller_switchconfig\";", "modifier": "private static final", "type": "String", "declarator": "SWITCH_CONFIG_TABLE_NAME = \"controller_switchconfig\"", "var_name": "SWITCH_CONFIG_TABLE_NAME"}, {"original_string": "private static final String SWITCH_CONFIG_CORE_SWITCH = \"core_switch\";", "modifier": "private static final", "type": "String", "declarator": "SWITCH_CONFIG_CORE_SWITCH = \"core_switch\"", "var_name": "SWITCH_CONFIG_CORE_SWITCH"}, {"original_string": "protected IFloodlightProviderService floodlightProvider;", "modifier": "protected", "type": "IFloodlightProviderService", "declarator": "floodlightProvider", "var_name": "floodlightProvider"}, {"original_string": "protected IStorageSourceService storageSource;", "modifier": "protected", "type": "IStorageSourceService", "declarator": "storageSource", "var_name": "storageSource"}, {"original_string": "protected IThreadPoolService threadPool;", "modifier": "protected", "type": "IThreadPoolService", "declarator": "threadPool", "var_name": "threadPool"}, {"original_string": "protected IRestApiService restApi;", "modifier": "protected", "type": "IRestApiService", "declarator": "restApi", "var_name": "restApi"}, {"original_string": "private static final byte[] LLDP_STANDARD_DST_MAC_STRING = \n            HexString.fromHexString(\"01:80:c2:00:00:0e\");", "modifier": "private static final", "type": "byte[]", "declarator": "LLDP_STANDARD_DST_MAC_STRING = \n            HexString.fromHexString(\"01:80:c2:00:00:0e\")", "var_name": "LLDP_STANDARD_DST_MAC_STRING"}, {"original_string": "private static final long LINK_LOCAL_MASK  = 0xfffffffffff0L;", "modifier": "private static final", "type": "long", "declarator": "LINK_LOCAL_MASK  = 0xfffffffffff0L", "var_name": "LINK_LOCAL_MASK"}, {"original_string": "private static final long LINK_LOCAL_VALUE = 0x0180c2000000L;", "modifier": "private static final", "type": "long", "declarator": "LINK_LOCAL_VALUE = 0x0180c2000000L", "var_name": "LINK_LOCAL_VALUE"}, {"original_string": "private static final String LLDP_BSN_DST_MAC_STRING = \"ff:ff:ff:ff:ff:ff\";", "modifier": "private static final", "type": "String", "declarator": "LLDP_BSN_DST_MAC_STRING = \"ff:ff:ff:ff:ff:ff\"", "var_name": "LLDP_BSN_DST_MAC_STRING"}, {"original_string": "private static final byte TLV_DIRECTION_TYPE = 0x73;", "modifier": "private static final", "type": "byte", "declarator": "TLV_DIRECTION_TYPE = 0x73", "var_name": "TLV_DIRECTION_TYPE"}, {"original_string": "private static final short TLV_DIRECTION_LENGTH = 1;", "modifier": "private static final", "type": "short", "declarator": "TLV_DIRECTION_LENGTH = 1", "var_name": "TLV_DIRECTION_LENGTH"}, {"original_string": "private static final byte TLV_DIRECTION_VALUE_FORWARD[] = {0x01};", "modifier": "private static final", "type": "byte", "declarator": "TLV_DIRECTION_VALUE_FORWARD[] = {0x01}", "var_name": "TLV_DIRECTION_VALUE_FORWARD"}, {"original_string": "private static final byte TLV_DIRECTION_VALUE_REVERSE[] = {0x02};", "modifier": "private static final", "type": "byte", "declarator": "TLV_DIRECTION_VALUE_REVERSE[] = {0x02}", "var_name": "TLV_DIRECTION_VALUE_REVERSE"}, {"original_string": "private static final LLDPTLV forwardTLV \n    = new LLDPTLV().\n    setType((byte)TLV_DIRECTION_TYPE).\n    setLength((short)TLV_DIRECTION_LENGTH).\n    setValue(TLV_DIRECTION_VALUE_FORWARD);", "modifier": "private static final", "type": "LLDPTLV", "declarator": "forwardTLV \n    = new LLDPTLV().\n    setType((byte)TLV_DIRECTION_TYPE).\n    setLength((short)TLV_DIRECTION_LENGTH).\n    setValue(TLV_DIRECTION_VALUE_FORWARD)", "var_name": "forwardTLV"}, {"original_string": "private static final LLDPTLV reverseTLV \n    = new LLDPTLV().\n    setType((byte)TLV_DIRECTION_TYPE).\n    setLength((short)TLV_DIRECTION_LENGTH).\n    setValue(TLV_DIRECTION_VALUE_REVERSE);", "modifier": "private static final", "type": "LLDPTLV", "declarator": "reverseTLV \n    = new LLDPTLV().\n    setType((byte)TLV_DIRECTION_TYPE).\n    setLength((short)TLV_DIRECTION_LENGTH).\n    setValue(TLV_DIRECTION_VALUE_REVERSE)", "var_name": "reverseTLV"}, {"original_string": "protected SingletonTask discoveryTask;", "modifier": "protected", "type": "SingletonTask", "declarator": "discoveryTask", "var_name": "discoveryTask"}, {"original_string": "protected final int DISCOVERY_TASK_INTERVAL = 1;", "modifier": "protected final", "type": "int", "declarator": "DISCOVERY_TASK_INTERVAL = 1", "var_name": "DISCOVERY_TASK_INTERVAL"}, {"original_string": "protected final int LINK_TIMEOUT = 35;", "modifier": "protected final", "type": "int", "declarator": "LINK_TIMEOUT = 35", "var_name": "LINK_TIMEOUT"}, {"original_string": "protected final int LLDP_TO_ALL_INTERVAL = 15 ;", "modifier": "protected final", "type": "int", "declarator": "LLDP_TO_ALL_INTERVAL = 15", "var_name": "LLDP_TO_ALL_INTERVAL"}, {"original_string": "protected long lldpClock = 0;", "modifier": "protected", "type": "long", "declarator": "lldpClock = 0", "var_name": "lldpClock"}, {"original_string": "protected final int LLDP_TO_KNOWN_INTERVAL= 20;", "modifier": "protected final", "type": "int", "declarator": "LLDP_TO_KNOWN_INTERVAL= 20", "var_name": "LLDP_TO_KNOWN_INTERVAL"}, {"original_string": "protected LLDPTLV controllerTLV;", "modifier": "protected", "type": "LLDPTLV", "declarator": "controllerTLV", "var_name": "controllerTLV"}, {"original_string": "protected ReentrantReadWriteLock lock;", "modifier": "protected", "type": "ReentrantReadWriteLock", "declarator": "lock", "var_name": "lock"}, {"original_string": "int lldpTimeCount = 0;", "modifier": "", "type": "int", "declarator": "lldpTimeCount = 0", "var_name": "lldpTimeCount"}, {"original_string": "boolean autoPortFastFeature = false;", "modifier": "", "type": "boolean", "declarator": "autoPortFastFeature = false", "var_name": "autoPortFastFeature"}, {"original_string": "protected Map<Link, LinkInfo> links;", "modifier": "protected", "type": "Map<Link, LinkInfo>", "declarator": "links", "var_name": "links"}, {"original_string": "protected Map<Long, Set<Link>> switchLinks;", "modifier": "protected", "type": "Map<Long, Set<Link>>", "declarator": "switchLinks", "var_name": "switchLinks"}, {"original_string": "protected Map<NodePortTuple, Set<Link>> portLinks;", "modifier": "protected", "type": "Map<NodePortTuple, Set<Link>>", "declarator": "portLinks", "var_name": "portLinks"}, {"original_string": "protected Map<NodePortTuple, Set<Link>> portBroadcastDomainLinks;", "modifier": "protected", "type": "Map<NodePortTuple, Set<Link>>", "declarator": "portBroadcastDomainLinks", "var_name": "portBroadcastDomainLinks"}, {"original_string": "protected volatile boolean shuttingDown = false;", "modifier": "protected volatile", "type": "boolean", "declarator": "shuttingDown = false", "var_name": "shuttingDown"}, {"original_string": "protected ArrayList<ILinkDiscoveryListener> linkDiscoveryAware;", "modifier": "protected", "type": "ArrayList<ILinkDiscoveryListener>", "declarator": "linkDiscoveryAware", "var_name": "linkDiscoveryAware"}, {"original_string": "protected BlockingQueue<LDUpdate> updates;", "modifier": "protected", "type": "BlockingQueue<LDUpdate>", "declarator": "updates", "var_name": "updates"}, {"original_string": "protected Thread updatesThread;", "modifier": "protected", "type": "Thread", "declarator": "updatesThread", "var_name": "updatesThread"}, {"original_string": "protected Set<NodePortTuple> suppressLinkDiscovery;", "modifier": "protected", "type": "Set<NodePortTuple>", "declarator": "suppressLinkDiscovery", "var_name": "suppressLinkDiscovery"}, {"original_string": "protected LinkedBlockingQueue<NodePortTuple> quarantineQueue;", "modifier": "protected", "type": "LinkedBlockingQueue<NodePortTuple>", "declarator": "quarantineQueue", "var_name": "quarantineQueue"}, {"original_string": "protected LinkedBlockingQueue<NodePortTuple> maintenanceQueue;", "modifier": "protected", "type": "LinkedBlockingQueue<NodePortTuple>", "declarator": "maintenanceQueue", "var_name": "maintenanceQueue"}, {"original_string": "protected SingletonTask bddpTask;", "modifier": "protected", "type": "SingletonTask", "declarator": "bddpTask", "var_name": "bddpTask"}, {"original_string": "protected final int BDDP_TASK_INTERVAL = 100;", "modifier": "protected final", "type": "int", "declarator": "BDDP_TASK_INTERVAL = 100", "var_name": "BDDP_TASK_INTERVAL"}, {"original_string": "protected final int BDDP_TASK_SIZE = 5;", "modifier": "protected final", "type": "int", "declarator": "BDDP_TASK_SIZE = 5", "var_name": "BDDP_TASK_SIZE"}, {"original_string": "protected Map<NodePortTuple, Long> broadcastDomainPortTimeMap;", "modifier": "protected", "type": "Map<NodePortTuple, Long>", "declarator": "broadcastDomainPortTimeMap", "var_name": "broadcastDomainPortTimeMap"}, {"original_string": "public EventHistory<EventHistoryTopologySwitch>  evHistTopologySwitch;", "modifier": "public", "type": "EventHistory<EventHistoryTopologySwitch>", "declarator": "evHistTopologySwitch", "var_name": "evHistTopologySwitch"}, {"original_string": "public EventHistory<EventHistoryTopologyLink>    evHistTopologyLink;", "modifier": "public", "type": "EventHistory<EventHistoryTopologyLink>", "declarator": "evHistTopologyLink", "var_name": "evHistTopologyLink"}, {"original_string": "public EventHistory<EventHistoryTopologyCluster> evHistTopologyCluster;", "modifier": "public", "type": "EventHistory<EventHistoryTopologyCluster>", "declarator": "evHistTopologyCluster", "var_name": "evHistTopologyCluster"}, {"original_string": "public EventHistoryTopologySwitch  evTopoSwitch;", "modifier": "public", "type": "EventHistoryTopologySwitch", "declarator": "evTopoSwitch", "var_name": "evTopoSwitch"}, {"original_string": "public EventHistoryTopologyLink    evTopoLink;", "modifier": "public", "type": "EventHistoryTopologyLink", "declarator": "evTopoLink", "var_name": "evTopoLink"}, {"original_string": "public EventHistoryTopologyCluster evTopoCluster;", "modifier": "public", "type": "EventHistoryTopologyCluster", "declarator": "evTopoCluster", "var_name": "evTopoCluster"}], "methods": [{"identifier": "getLldpFrequency", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLldpFrequency()", "full_signature": "public int getLldpFrequency()", "class_method_signature": "LinkDiscoveryManager.getLldpFrequency()", "testcase": false, "constructor": false}, {"identifier": "getLldpTimeout", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLldpTimeout()", "full_signature": "public int getLldpTimeout()", "class_method_signature": "LinkDiscoveryManager.getLldpTimeout()", "testcase": false, "constructor": false}, {"identifier": "getPortLinks", "parameters": "()", "modifiers": "public", "return": "Map<NodePortTuple, Set<Link>>", "signature": "Map<NodePortTuple, Set<Link>> getPortLinks()", "full_signature": "public Map<NodePortTuple, Set<Link>> getPortLinks()", "class_method_signature": "LinkDiscoveryManager.getPortLinks()", "testcase": false, "constructor": false}, {"identifier": "getSuppressLLDPsInfo", "parameters": "()", "modifiers": "public", "return": "Set<NodePortTuple>", "signature": "Set<NodePortTuple> getSuppressLLDPsInfo()", "full_signature": "public Set<NodePortTuple> getSuppressLLDPsInfo()", "class_method_signature": "LinkDiscoveryManager.getSuppressLLDPsInfo()", "testcase": false, "constructor": false}, {"identifier": "AddToSuppressLLDPs", "parameters": "(long sw, short port)", "modifiers": "public", "return": "void", "signature": "void AddToSuppressLLDPs(long sw, short port)", "full_signature": "public void AddToSuppressLLDPs(long sw, short port)", "class_method_signature": "LinkDiscoveryManager.AddToSuppressLLDPs(long sw, short port)", "testcase": false, "constructor": false}, {"identifier": "RemoveFromSuppressLLDPs", "parameters": "(long sw, short port)", "modifiers": "public", "return": "void", "signature": "void RemoveFromSuppressLLDPs(long sw, short port)", "full_signature": "public void RemoveFromSuppressLLDPs(long sw, short port)", "class_method_signature": "LinkDiscoveryManager.RemoveFromSuppressLLDPs(long sw, short port)", "testcase": false, "constructor": false}, {"identifier": "isShuttingDown", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isShuttingDown()", "full_signature": "public boolean isShuttingDown()", "class_method_signature": "LinkDiscoveryManager.isShuttingDown()", "testcase": false, "constructor": false}, {"identifier": "isFastPort", "parameters": "(long sw, short port)", "modifiers": "public", "return": "boolean", "signature": "boolean isFastPort(long sw, short port)", "full_signature": "public boolean isFastPort(long sw, short port)", "class_method_signature": "LinkDiscoveryManager.isFastPort(long sw, short port)", "testcase": false, "constructor": false}, {"identifier": "getLinkType", "parameters": "(Link lt, LinkInfo info)", "modifiers": "public", "return": "ILinkDiscovery.LinkType", "signature": "ILinkDiscovery.LinkType getLinkType(Link lt, LinkInfo info)", "full_signature": "public ILinkDiscovery.LinkType getLinkType(Link lt, LinkInfo info)", "class_method_signature": "LinkDiscoveryManager.getLinkType(Link lt, LinkInfo info)", "testcase": false, "constructor": false}, {"identifier": "doUpdatesThread", "parameters": "()", "modifiers": "@LogMessageDoc(level=\"ERROR\", message=\"Error in link discovery updates loop\", explanation=\"An unknown error occured while dispatching \" + \"link update notifications\", recommendation=LogMessageDoc.GENERIC_ACTION) private", "return": "void", "signature": "void doUpdatesThread()", "full_signature": "@LogMessageDoc(level=\"ERROR\", message=\"Error in link discovery updates loop\", explanation=\"An unknown error occured while dispatching \" + \"link update notifications\", recommendation=LogMessageDoc.GENERIC_ACTION) private void doUpdatesThread()", "class_method_signature": "LinkDiscoveryManager.doUpdatesThread()", "testcase": false, "constructor": false}, {"identifier": "isLinkDiscoverySuppressed", "parameters": "(long sw, short portNumber)", "modifiers": "private", "return": "boolean", "signature": "boolean isLinkDiscoverySuppressed(long sw, short portNumber)", "full_signature": "private boolean isLinkDiscoverySuppressed(long sw, short portNumber)", "class_method_signature": "LinkDiscoveryManager.isLinkDiscoverySuppressed(long sw, short portNumber)", "testcase": false, "constructor": false}, {"identifier": "discoverLinks", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void discoverLinks()", "full_signature": "protected void discoverLinks()", "class_method_signature": "LinkDiscoveryManager.discoverLinks()", "testcase": false, "constructor": false}, {"identifier": "addToQuarantineQueue", "parameters": "(NodePortTuple npt)", "modifiers": "protected", "return": "void", "signature": "void addToQuarantineQueue(NodePortTuple npt)", "full_signature": "protected void addToQuarantineQueue(NodePortTuple npt)", "class_method_signature": "LinkDiscoveryManager.addToQuarantineQueue(NodePortTuple npt)", "testcase": false, "constructor": false}, {"identifier": "removeFromQuarantineQueue", "parameters": "(NodePortTuple npt)", "modifiers": "protected", "return": "void", "signature": "void removeFromQuarantineQueue(NodePortTuple npt)", "full_signature": "protected void removeFromQuarantineQueue(NodePortTuple npt)", "class_method_signature": "LinkDiscoveryManager.removeFromQuarantineQueue(NodePortTuple npt)", "testcase": false, "constructor": false}, {"identifier": "addToMaintenanceQueue", "parameters": "(NodePortTuple npt)", "modifiers": "protected", "return": "void", "signature": "void addToMaintenanceQueue(NodePortTuple npt)", "full_signature": "protected void addToMaintenanceQueue(NodePortTuple npt)", "class_method_signature": "LinkDiscoveryManager.addToMaintenanceQueue(NodePortTuple npt)", "testcase": false, "constructor": false}, {"identifier": "removeFromMaintenanceQueue", "parameters": "(NodePortTuple npt)", "modifiers": "protected", "return": "void", "signature": "void removeFromMaintenanceQueue(NodePortTuple npt)", "full_signature": "protected void removeFromMaintenanceQueue(NodePortTuple npt)", "class_method_signature": "LinkDiscoveryManager.removeFromMaintenanceQueue(NodePortTuple npt)", "testcase": false, "constructor": false}, {"identifier": "processBDDPLists", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void processBDDPLists()", "full_signature": "protected void processBDDPLists()", "class_method_signature": "LinkDiscoveryManager.processBDDPLists()", "testcase": false, "constructor": false}, {"identifier": "getQuarantinedPorts", "parameters": "(long sw)", "modifiers": "public", "return": "Set<Short>", "signature": "Set<Short> getQuarantinedPorts(long sw)", "full_signature": "public Set<Short> getQuarantinedPorts(long sw)", "class_method_signature": "LinkDiscoveryManager.getQuarantinedPorts(long sw)", "testcase": false, "constructor": false}, {"identifier": "generateSwitchPortStatusUpdate", "parameters": "(long sw, short port)", "modifiers": "private", "return": "void", "signature": "void generateSwitchPortStatusUpdate(long sw, short port)", "full_signature": "private void generateSwitchPortStatusUpdate(long sw, short port)", "class_method_signature": "LinkDiscoveryManager.generateSwitchPortStatusUpdate(long sw, short port)", "testcase": false, "constructor": false}, {"identifier": "discoverOnKnownLinkPorts", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void discoverOnKnownLinkPorts()", "full_signature": "protected void discoverOnKnownLinkPorts()", "class_method_signature": "LinkDiscoveryManager.discoverOnKnownLinkPorts()", "testcase": false, "constructor": false}, {"identifier": "discover", "parameters": "(NodePortTuple npt)", "modifiers": "protected", "return": "void", "signature": "void discover(NodePortTuple npt)", "full_signature": "protected void discover(NodePortTuple npt)", "class_method_signature": "LinkDiscoveryManager.discover(NodePortTuple npt)", "testcase": false, "constructor": false}, {"identifier": "discover", "parameters": "(long sw, short port)", "modifiers": "protected", "return": "void", "signature": "void discover(long sw, short port)", "full_signature": "protected void discover(long sw, short port)", "class_method_signature": "LinkDiscoveryManager.discover(long sw, short port)", "testcase": false, "constructor": false}, {"identifier": "sendDiscoveryMessage", "parameters": "(long sw, short port,\n                             boolean isStandard,\n                             boolean isReverse)", "modifiers": "@LogMessageDoc(level=\"ERROR\", message=\"Failure sending LLDP out port {port} on switch {switch}\", explanation=\"An I/O error occured while sending LLDP message \" + \"to the switch.\", recommendation=LogMessageDoc.CHECK_SWITCH) protected", "return": "void", "signature": "void sendDiscoveryMessage(long sw, short port,\n                             boolean isStandard,\n                             boolean isReverse)", "full_signature": "@LogMessageDoc(level=\"ERROR\", message=\"Failure sending LLDP out port {port} on switch {switch}\", explanation=\"An I/O error occured while sending LLDP message \" + \"to the switch.\", recommendation=LogMessageDoc.CHECK_SWITCH) protected void sendDiscoveryMessage(long sw, short port,\n                             boolean isStandard,\n                             boolean isReverse)", "class_method_signature": "LinkDiscoveryManager.sendDiscoveryMessage(long sw, short port,\n                             boolean isStandard,\n                             boolean isReverse)", "testcase": false, "constructor": false}, {"identifier": "discoverOnAllPorts", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void discoverOnAllPorts()", "full_signature": "protected void discoverOnAllPorts()", "class_method_signature": "LinkDiscoveryManager.discoverOnAllPorts()", "testcase": false, "constructor": false}, {"identifier": "setControllerTLV", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void setControllerTLV()", "full_signature": "protected void setControllerTLV()", "class_method_signature": "LinkDiscoveryManager.setControllerTLV()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "LinkDiscoveryManager.getName()", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "modifiers": "@Override public", "return": "Command", "signature": "Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "full_signature": "@Override public Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "class_method_signature": "LinkDiscoveryManager.receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "handleLldp", "parameters": "(LLDP lldp, long sw, OFPacketIn pi, boolean isStandard, FloodlightContext cntx)", "modifiers": "private", "return": "Command", "signature": "Command handleLldp(LLDP lldp, long sw, OFPacketIn pi, boolean isStandard, FloodlightContext cntx)", "full_signature": "private Command handleLldp(LLDP lldp, long sw, OFPacketIn pi, boolean isStandard, FloodlightContext cntx)", "class_method_signature": "LinkDiscoveryManager.handleLldp(LLDP lldp, long sw, OFPacketIn pi, boolean isStandard, FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "handlePacketIn", "parameters": "(long sw, OFPacketIn pi,\n                                     FloodlightContext cntx)", "modifiers": "protected", "return": "Command", "signature": "Command handlePacketIn(long sw, OFPacketIn pi,\n                                     FloodlightContext cntx)", "full_signature": "protected Command handlePacketIn(long sw, OFPacketIn pi,\n                                     FloodlightContext cntx)", "class_method_signature": "LinkDiscoveryManager.handlePacketIn(long sw, OFPacketIn pi,\n                                     FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "getUpdateOperation", "parameters": "(int srcPortState,\n                                                 int dstPortState)", "modifiers": "protected", "return": "UpdateOperation", "signature": "UpdateOperation getUpdateOperation(int srcPortState,\n                                                 int dstPortState)", "full_signature": "protected UpdateOperation getUpdateOperation(int srcPortState,\n                                                 int dstPortState)", "class_method_signature": "LinkDiscoveryManager.getUpdateOperation(int srcPortState,\n                                                 int dstPortState)", "testcase": false, "constructor": false}, {"identifier": "getUpdateOperation", "parameters": "(int srcPortState)", "modifiers": "protected", "return": "UpdateOperation", "signature": "UpdateOperation getUpdateOperation(int srcPortState)", "full_signature": "protected UpdateOperation getUpdateOperation(int srcPortState)", "class_method_signature": "LinkDiscoveryManager.getUpdateOperation(int srcPortState)", "testcase": false, "constructor": false}, {"identifier": "addOrUpdateLink", "parameters": "(Link lt, LinkInfo newInfo)", "modifiers": "protected", "return": "boolean", "signature": "boolean addOrUpdateLink(Link lt, LinkInfo newInfo)", "full_signature": "protected boolean addOrUpdateLink(Link lt, LinkInfo newInfo)", "class_method_signature": "LinkDiscoveryManager.addOrUpdateLink(Link lt, LinkInfo newInfo)", "testcase": false, "constructor": false}, {"identifier": "getSwitchLinks", "parameters": "()", "modifiers": "public", "return": "Map<Long, Set<Link>>", "signature": "Map<Long, Set<Link>> getSwitchLinks()", "full_signature": "public Map<Long, Set<Link>> getSwitchLinks()", "class_method_signature": "LinkDiscoveryManager.getSwitchLinks()", "testcase": false, "constructor": false}, {"identifier": "deleteLinks", "parameters": "(List<Link> links, String reason)", "modifiers": "protected", "return": "void", "signature": "void deleteLinks(List<Link> links, String reason)", "full_signature": "protected void deleteLinks(List<Link> links, String reason)", "class_method_signature": "LinkDiscoveryManager.deleteLinks(List<Link> links, String reason)", "testcase": false, "constructor": false}, {"identifier": "handlePortStatus", "parameters": "(long sw, OFPortStatus ps)", "modifiers": "protected", "return": "Command", "signature": "Command handlePortStatus(long sw, OFPortStatus ps)", "full_signature": "protected Command handlePortStatus(long sw, OFPortStatus ps)", "class_method_signature": "LinkDiscoveryManager.handlePortStatus(long sw, OFPortStatus ps)", "testcase": false, "constructor": false}, {"identifier": "processNewPort", "parameters": "(long sw, short p)", "modifiers": "private", "return": "void", "signature": "void processNewPort(long sw, short p)", "full_signature": "private void processNewPort(long sw, short p)", "class_method_signature": "LinkDiscoveryManager.processNewPort(long sw, short p)", "testcase": false, "constructor": false}, {"identifier": "addedSwitch", "parameters": "(IOFSwitch sw)", "modifiers": "@Override public", "return": "void", "signature": "void addedSwitch(IOFSwitch sw)", "full_signature": "@Override public void addedSwitch(IOFSwitch sw)", "class_method_signature": "LinkDiscoveryManager.addedSwitch(IOFSwitch sw)", "testcase": false, "constructor": false}, {"identifier": "removedSwitch", "parameters": "(IOFSwitch iofSwitch)", "modifiers": "@Override public", "return": "void", "signature": "void removedSwitch(IOFSwitch iofSwitch)", "full_signature": "@Override public void removedSwitch(IOFSwitch iofSwitch)", "class_method_signature": "LinkDiscoveryManager.removedSwitch(IOFSwitch iofSwitch)", "testcase": false, "constructor": false}, {"identifier": "switchPortChanged", "parameters": "(Long switchId)", "modifiers": "@Override public", "return": "void", "signature": "void switchPortChanged(Long switchId)", "full_signature": "@Override public void switchPortChanged(Long switchId)", "class_method_signature": "LinkDiscoveryManager.switchPortChanged(Long switchId)", "testcase": false, "constructor": false}, {"identifier": "deleteLinksOnPort", "parameters": "(NodePortTuple npt, String reason)", "modifiers": "protected", "return": "void", "signature": "void deleteLinksOnPort(NodePortTuple npt, String reason)", "full_signature": "protected void deleteLinksOnPort(NodePortTuple npt, String reason)", "class_method_signature": "LinkDiscoveryManager.deleteLinksOnPort(NodePortTuple npt, String reason)", "testcase": false, "constructor": false}, {"identifier": "timeoutLinks", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void timeoutLinks()", "full_signature": "protected void timeoutLinks()", "class_method_signature": "LinkDiscoveryManager.timeoutLinks()", "testcase": false, "constructor": false}, {"identifier": "portEnabled", "parameters": "(OFPhysicalPort port)", "modifiers": "private", "return": "boolean", "signature": "boolean portEnabled(OFPhysicalPort port)", "full_signature": "private boolean portEnabled(OFPhysicalPort port)", "class_method_signature": "LinkDiscoveryManager.portEnabled(OFPhysicalPort port)", "testcase": false, "constructor": false}, {"identifier": "getPortBroadcastDomainLinks", "parameters": "()", "modifiers": "public", "return": "Map<NodePortTuple, Set<Link>>", "signature": "Map<NodePortTuple, Set<Link>> getPortBroadcastDomainLinks()", "full_signature": "public Map<NodePortTuple, Set<Link>> getPortBroadcastDomainLinks()", "class_method_signature": "LinkDiscoveryManager.getPortBroadcastDomainLinks()", "testcase": false, "constructor": false}, {"identifier": "getLinks", "parameters": "()", "modifiers": "@Override public", "return": "Map<Link, LinkInfo>", "signature": "Map<Link, LinkInfo> getLinks()", "full_signature": "@Override public Map<Link, LinkInfo> getLinks()", "class_method_signature": "LinkDiscoveryManager.getLinks()", "testcase": false, "constructor": false}, {"identifier": "addLinkToBroadcastDomain", "parameters": "(Link lt)", "modifiers": "protected", "return": "void", "signature": "void addLinkToBroadcastDomain(Link lt)", "full_signature": "protected void addLinkToBroadcastDomain(Link lt)", "class_method_signature": "LinkDiscoveryManager.addLinkToBroadcastDomain(Link lt)", "testcase": false, "constructor": false}, {"identifier": "removeLinkFromBroadcastDomain", "parameters": "(Link lt)", "modifiers": "protected", "return": "void", "signature": "void removeLinkFromBroadcastDomain(Link lt)", "full_signature": "protected void removeLinkFromBroadcastDomain(Link lt)", "class_method_signature": "LinkDiscoveryManager.removeLinkFromBroadcastDomain(Link lt)", "testcase": false, "constructor": false}, {"identifier": "clearAllLinks", "parameters": "()", "modifiers": "", "return": "void", "signature": "void clearAllLinks()", "full_signature": " void clearAllLinks()", "class_method_signature": "LinkDiscoveryManager.clearAllLinks()", "testcase": false, "constructor": false}, {"identifier": "getLinkId", "parameters": "(Link lt)", "modifiers": "private", "return": "String", "signature": "String getLinkId(Link lt)", "full_signature": "private String getLinkId(Link lt)", "class_method_signature": "LinkDiscoveryManager.getLinkId(Link lt)", "testcase": false, "constructor": false}, {"identifier": "writeLinkToStorage", "parameters": "(Link lt, LinkInfo linkInfo)", "modifiers": "protected", "return": "void", "signature": "void writeLinkToStorage(Link lt, LinkInfo linkInfo)", "full_signature": "protected void writeLinkToStorage(Link lt, LinkInfo linkInfo)", "class_method_signature": "LinkDiscoveryManager.writeLinkToStorage(Link lt, LinkInfo linkInfo)", "testcase": false, "constructor": false}, {"identifier": "readLinkValidTime", "parameters": "(Link lt)", "modifiers": "public", "return": "Long", "signature": "Long readLinkValidTime(Link lt)", "full_signature": "public Long readLinkValidTime(Link lt)", "class_method_signature": "LinkDiscoveryManager.readLinkValidTime(Link lt)", "testcase": false, "constructor": false}, {"identifier": "removeLinkFromStorage", "parameters": "(Link lt)", "modifiers": "protected", "return": "void", "signature": "void removeLinkFromStorage(Link lt)", "full_signature": "protected void removeLinkFromStorage(Link lt)", "class_method_signature": "LinkDiscoveryManager.removeLinkFromStorage(Link lt)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(ILinkDiscoveryListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(ILinkDiscoveryListener listener)", "full_signature": "@Override public void addListener(ILinkDiscoveryListener listener)", "class_method_signature": "LinkDiscoveryManager.addListener(ILinkDiscoveryListener listener)", "testcase": false, "constructor": false}, {"identifier": "addLinkDiscoveryAware", "parameters": "(ILinkDiscoveryListener linkDiscoveryAwareComponent)", "modifiers": "public", "return": "void", "signature": "void addLinkDiscoveryAware(ILinkDiscoveryListener linkDiscoveryAwareComponent)", "full_signature": "public void addLinkDiscoveryAware(ILinkDiscoveryListener linkDiscoveryAwareComponent)", "class_method_signature": "LinkDiscoveryManager.addLinkDiscoveryAware(ILinkDiscoveryListener linkDiscoveryAwareComponent)", "testcase": false, "constructor": false}, {"identifier": "removeLinkDiscoveryAware", "parameters": "(ILinkDiscoveryListener linkDiscoveryAwareComponent)", "modifiers": "public", "return": "void", "signature": "void removeLinkDiscoveryAware(ILinkDiscoveryListener linkDiscoveryAwareComponent)", "full_signature": "public void removeLinkDiscoveryAware(ILinkDiscoveryListener linkDiscoveryAwareComponent)", "class_method_signature": "LinkDiscoveryManager.removeLinkDiscoveryAware(ILinkDiscoveryListener linkDiscoveryAwareComponent)", "testcase": false, "constructor": false}, {"identifier": "setStorageSource", "parameters": "(IStorageSourceService storageSource)", "modifiers": "public", "return": "void", "signature": "void setStorageSource(IStorageSourceService storageSource)", "full_signature": "public void setStorageSource(IStorageSourceService storageSource)", "class_method_signature": "LinkDiscoveryManager.setStorageSource(IStorageSourceService storageSource)", "testcase": false, "constructor": false}, {"identifier": "getStorageSource", "parameters": "()", "modifiers": "public", "return": "IStorageSourceService", "signature": "IStorageSourceService getStorageSource()", "full_signature": "public IStorageSourceService getStorageSource()", "class_method_signature": "LinkDiscoveryManager.getStorageSource()", "testcase": false, "constructor": false}, {"identifier": "isCallbackOrderingPrereq", "parameters": "(OFType type, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCallbackOrderingPrereq(OFType type, String name)", "full_signature": "@Override public boolean isCallbackOrderingPrereq(OFType type, String name)", "class_method_signature": "LinkDiscoveryManager.isCallbackOrderingPrereq(OFType type, String name)", "testcase": false, "constructor": false}, {"identifier": "isCallbackOrderingPostreq", "parameters": "(OFType type, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCallbackOrderingPostreq(OFType type, String name)", "full_signature": "@Override public boolean isCallbackOrderingPostreq(OFType type, String name)", "class_method_signature": "LinkDiscoveryManager.isCallbackOrderingPostreq(OFType type, String name)", "testcase": false, "constructor": false}, {"identifier": "rowsModified", "parameters": "(String tableName, Set<Object> rowKeys)", "modifiers": "@Override public", "return": "void", "signature": "void rowsModified(String tableName, Set<Object> rowKeys)", "full_signature": "@Override public void rowsModified(String tableName, Set<Object> rowKeys)", "class_method_signature": "LinkDiscoveryManager.rowsModified(String tableName, Set<Object> rowKeys)", "testcase": false, "constructor": false}, {"identifier": "rowsDeleted", "parameters": "(String tableName, Set<Object> rowKeys)", "modifiers": "@Override public", "return": "void", "signature": "void rowsDeleted(String tableName, Set<Object> rowKeys)", "full_signature": "@Override public void rowsDeleted(String tableName, Set<Object> rowKeys)", "class_method_signature": "LinkDiscoveryManager.rowsDeleted(String tableName, Set<Object> rowKeys)", "testcase": false, "constructor": false}, {"identifier": "getModuleServices", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleServices()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleServices()", "class_method_signature": "LinkDiscoveryManager.getModuleServices()", "testcase": false, "constructor": false}, {"identifier": "getServiceImpls", "parameters": "()", "modifiers": "@Override public", "return": "Map<Class<? extends IFloodlightService>, IFloodlightService>", "signature": "Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "full_signature": "@Override public Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "class_method_signature": "LinkDiscoveryManager.getServiceImpls()", "testcase": false, "constructor": false}, {"identifier": "getModuleDependencies", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "class_method_signature": "LinkDiscoveryManager.getModuleDependencies()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void init(FloodlightModuleContext context)", "full_signature": "@Override public void init(FloodlightModuleContext context)", "class_method_signature": "LinkDiscoveryManager.init(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "startUp", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override @LogMessageDocs({ @LogMessageDoc(level=\"ERROR\", message=\"No storage source found.\", explanation=\"Storage source was not initialized; cannot initialize \" + \"link discovery.\", recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG), @LogMessageDoc(level=\"ERROR\", message=\"Error in installing listener for \" + \"switch config table {table}\", explanation=\"Failed to install storage notification for the \" + \"switch config table\", recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG), @LogMessageDoc(level=\"ERROR\", message=\"No storage source found.\", explanation=\"Storage source was not initialized; cannot initialize \" + \"link discovery.\", recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG), @LogMessageDoc(level=\"ERROR\", message=\"Exception in LLDP send timer.\", explanation=\"An unknown error occured while sending LLDP \" + \"messages to switches.\", recommendation=LogMessageDoc.CHECK_SWITCH) }) public", "return": "void", "signature": "void startUp(FloodlightModuleContext context)", "full_signature": "@Override @LogMessageDocs({ @LogMessageDoc(level=\"ERROR\", message=\"No storage source found.\", explanation=\"Storage source was not initialized; cannot initialize \" + \"link discovery.\", recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG), @LogMessageDoc(level=\"ERROR\", message=\"Error in installing listener for \" + \"switch config table {table}\", explanation=\"Failed to install storage notification for the \" + \"switch config table\", recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG), @LogMessageDoc(level=\"ERROR\", message=\"No storage source found.\", explanation=\"Storage source was not initialized; cannot initialize \" + \"link discovery.\", recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG), @LogMessageDoc(level=\"ERROR\", message=\"Exception in LLDP send timer.\", explanation=\"An unknown error occured while sending LLDP \" + \"messages to switches.\", recommendation=LogMessageDoc.CHECK_SWITCH) }) public void startUp(FloodlightModuleContext context)", "class_method_signature": "LinkDiscoveryManager.startUp(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "evHistTopoSwitch", "parameters": "(IOFSwitch sw, EvAction actn, String reason)", "modifiers": "private", "return": "void", "signature": "void evHistTopoSwitch(IOFSwitch sw, EvAction actn, String reason)", "full_signature": "private void evHistTopoSwitch(IOFSwitch sw, EvAction actn, String reason)", "class_method_signature": "LinkDiscoveryManager.evHistTopoSwitch(IOFSwitch sw, EvAction actn, String reason)", "testcase": false, "constructor": false}, {"identifier": "evHistTopoLink", "parameters": "(long srcDpid, long dstDpid, short srcPort,\n                                short dstPort, int srcPortState, int dstPortState,\n                                ILinkDiscovery.LinkType linkType,\n                                EvAction actn, String reason)", "modifiers": "private", "return": "void", "signature": "void evHistTopoLink(long srcDpid, long dstDpid, short srcPort,\n                                short dstPort, int srcPortState, int dstPortState,\n                                ILinkDiscovery.LinkType linkType,\n                                EvAction actn, String reason)", "full_signature": "private void evHistTopoLink(long srcDpid, long dstDpid, short srcPort,\n                                short dstPort, int srcPortState, int dstPortState,\n                                ILinkDiscovery.LinkType linkType,\n                                EvAction actn, String reason)", "class_method_signature": "LinkDiscoveryManager.evHistTopoLink(long srcDpid, long dstDpid, short srcPort,\n                                short dstPort, int srcPortState, int dstPortState,\n                                ILinkDiscovery.LinkType linkType,\n                                EvAction actn, String reason)", "testcase": false, "constructor": false}, {"identifier": "evHistTopoCluster", "parameters": "(long dpid, long clusterIdOld,\n                                  long clusterIdNew, EvAction action, String reason)", "modifiers": "public", "return": "void", "signature": "void evHistTopoCluster(long dpid, long clusterIdOld,\n                                  long clusterIdNew, EvAction action, String reason)", "full_signature": "public void evHistTopoCluster(long dpid, long clusterIdOld,\n                                  long clusterIdNew, EvAction action, String reason)", "class_method_signature": "LinkDiscoveryManager.evHistTopoCluster(long dpid, long clusterIdOld,\n                                  long clusterIdNew, EvAction action, String reason)", "testcase": false, "constructor": false}, {"identifier": "getInfo", "parameters": "(String type)", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> getInfo(String type)", "full_signature": "@Override public Map<String, Object> getInfo(String type)", "class_method_signature": "LinkDiscoveryManager.getInfo(String type)", "testcase": false, "constructor": false}, {"identifier": "roleChanged", "parameters": "(Role oldRole, Role newRole)", "modifiers": "@Override public", "return": "void", "signature": "void roleChanged(Role oldRole, Role newRole)", "full_signature": "@Override public void roleChanged(Role oldRole, Role newRole)", "class_method_signature": "LinkDiscoveryManager.roleChanged(Role oldRole, Role newRole)", "testcase": false, "constructor": false}, {"identifier": "controllerNodeIPsChanged", "parameters": "(\n                                         Map<String, String> curControllerNodeIPs,\n                                         Map<String, String> addedControllerNodeIPs,\n                                         Map<String, String> removedControllerNodeIPs)", "modifiers": "@Override public", "return": "void", "signature": "void controllerNodeIPsChanged(\n                                         Map<String, String> curControllerNodeIPs,\n                                         Map<String, String> addedControllerNodeIPs,\n                                         Map<String, String> removedControllerNodeIPs)", "full_signature": "@Override public void controllerNodeIPsChanged(\n                                         Map<String, String> curControllerNodeIPs,\n                                         Map<String, String> addedControllerNodeIPs,\n                                         Map<String, String> removedControllerNodeIPs)", "class_method_signature": "LinkDiscoveryManager.controllerNodeIPsChanged(\n                                         Map<String, String> curControllerNodeIPs,\n                                         Map<String, String> addedControllerNodeIPs,\n                                         Map<String, String> removedControllerNodeIPs)", "testcase": false, "constructor": false}, {"identifier": "isAutoPortFastFeature", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAutoPortFastFeature()", "full_signature": "public boolean isAutoPortFastFeature()", "class_method_signature": "LinkDiscoveryManager.isAutoPortFastFeature()", "testcase": false, "constructor": false}, {"identifier": "setAutoPortFastFeature", "parameters": "(boolean autoPortFastFeature)", "modifiers": "public", "return": "void", "signature": "void setAutoPortFastFeature(boolean autoPortFastFeature)", "full_signature": "public void setAutoPortFastFeature(boolean autoPortFastFeature)", "class_method_signature": "LinkDiscoveryManager.setAutoPortFastFeature(boolean autoPortFastFeature)", "testcase": false, "constructor": false}], "file": "network-level/fl-ho-nl/src/main/java/net/floodlightcontroller/linkdiscovery/internal/LinkDiscoveryManager.java"}, "focal_method": {"identifier": "removedSwitch", "parameters": "(IOFSwitch iofSwitch)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void removedSwitch(IOFSwitch iofSwitch) {\n        // Update event history\n        long sw = iofSwitch.getId();\n        evHistTopoSwitch(iofSwitch, EvAction.SWITCH_DISCONNECTED, \"None\");\n        List<Link> eraseList = new ArrayList<Link>();\n        lock.writeLock().lock();\n        try {\n            if (switchLinks.containsKey(sw)) {\n                if (log.isTraceEnabled()) {\n                    log.trace(\"Handle switchRemoved. Switch {}; removing links {}\",\n                              HexString.toHexString(sw), switchLinks.get(sw));\n                }\n                // add all tuples with an endpoint on this switch to erase list\n                eraseList.addAll(switchLinks.get(sw));\n                deleteLinks(eraseList, \"Switch Removed\");\n\n                // Send a switch removed update\n                LDUpdate update = new LDUpdate(sw, null, UpdateOperation.SWITCH_REMOVED);\n                updates.add(update);\n            }\n        } finally {\n            lock.writeLock().unlock();\n        }\n    }", "signature": "void removedSwitch(IOFSwitch iofSwitch)", "full_signature": "@Override public void removedSwitch(IOFSwitch iofSwitch)", "class_method_signature": "LinkDiscoveryManager.removedSwitch(IOFSwitch iofSwitch)", "testcase": false, "constructor": false, "invocations": ["getId", "evHistTopoSwitch", "lock", "writeLock", "containsKey", "isTraceEnabled", "trace", "toHexString", "get", "addAll", "get", "deleteLinks", "add", "unlock", "writeLock"]}, "repository": {"repo_id": 10459637, "url": "https://github.com/rizard/geni-openflow-vertical-handover", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 33971, "license": "licensed"}}