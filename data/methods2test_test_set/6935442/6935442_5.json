{"test_class": {"identifier": "AnnotationTripletTest", "superclass": "", "interfaces": "", "fields": [], "file": "subdomains/excel/applib/src/test/java/org/apache/isis/subdomains/excel/applib/dom/util/AnnotationTripletTest.java"}, "test_case": {"identifier": "testCompareTo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompareTo() throws Exception {\n\n        // given\n        AnnotationTriplet t0 = new AnnotationTriplet(\"column\", 0, 0);\n        AnnotationTriplet t1 = new AnnotationTriplet(\"column\", 1, 1);\n        AnnotationTriplet t2 = new AnnotationTriplet(\"deco\", 2, 1);\n        AnnotationTriplet t3 = new AnnotationTriplet(\"deco\", 3, 2);\n        AnnotationTriplet t4 = new AnnotationTriplet(\"row\", 4, 1);\n        AnnotationTriplet t5 = new AnnotationTriplet(\"row\", 5, 2);\n        AnnotationTriplet t6 = new AnnotationTriplet(\"skip\", 6, 1);\n        AnnotationTriplet t7 = new AnnotationTriplet(\"skip\", 7, 2);\n        AnnotationTriplet t8 = new AnnotationTriplet(\"value\", 8, 1);\n        AnnotationTriplet t9 = new AnnotationTriplet(\"value\", 9, 2);\n\n\n        List<AnnotationTriplet> l = Arrays.asList(t1, t3, t5, t4, t7, t6, t9, t8, t0, t2);\n\n        // when\n        Collections.sort(l);\n\n        // then\n        Assertions.assertThat(l.get(0)).isEqualTo(t0);\n        Assertions.assertThat(l.get(1)).isEqualTo(t1);\n        Assertions.assertThat(l.get(2)).isEqualTo(t2);\n        Assertions.assertThat(l.get(3)).isEqualTo(t3);\n        Assertions.assertThat(l.get(4)).isEqualTo(t4);\n        Assertions.assertThat(l.get(5)).isEqualTo(t5);\n        Assertions.assertThat(l.get(6)).isEqualTo(t6);\n        Assertions.assertThat(l.get(7)).isEqualTo(t7);\n        Assertions.assertThat(l.get(8)).isEqualTo(t8);\n        Assertions.assertThat(l.get(9)).isEqualTo(t9);\n\n    }", "signature": "void testCompareTo()", "full_signature": "@Test public void testCompareTo()", "class_method_signature": "AnnotationTripletTest.testCompareTo()", "testcase": true, "constructor": false, "invocations": ["asList", "sort", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "get"]}, "focal_class": {"identifier": "AnnotationTriplet", "superclass": "", "interfaces": "implements Comparable<AnnotationTriplet>", "fields": [{"original_string": "private String annotation;", "modifier": "private", "type": "String", "declarator": "annotation", "var_name": "annotation"}, {"original_string": "private Integer order;", "modifier": "private", "type": "Integer", "declarator": "order", "var_name": "order"}, {"original_string": "private Integer colNumber;", "modifier": "private", "type": "Integer", "declarator": "colNumber", "var_name": "colNumber"}], "methods": [{"identifier": "AnnotationTriplet", "parameters": "(final String annotation, final Integer colNumber, final Integer order)", "modifiers": "", "return": "", "signature": " AnnotationTriplet(final String annotation, final Integer colNumber, final Integer order)", "full_signature": "  AnnotationTriplet(final String annotation, final Integer colNumber, final Integer order)", "class_method_signature": "AnnotationTriplet.AnnotationTriplet(final String annotation, final Integer colNumber, final Integer order)", "testcase": false, "constructor": true}, {"identifier": "getAnnotation", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getAnnotation()", "full_signature": " String getAnnotation()", "class_method_signature": "AnnotationTriplet.getAnnotation()", "testcase": false, "constructor": false}, {"identifier": "getColnumber", "parameters": "()", "modifiers": "", "return": "Integer", "signature": "Integer getColnumber()", "full_signature": " Integer getColnumber()", "class_method_signature": "AnnotationTriplet.getColnumber()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(final AnnotationTriplet o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(final AnnotationTriplet o)", "full_signature": "@Override public int compareTo(final AnnotationTriplet o)", "class_method_signature": "AnnotationTriplet.compareTo(final AnnotationTriplet o)", "testcase": false, "constructor": false}], "file": "subdomains/excel/applib/src/main/java/org/apache/isis/subdomains/excel/applib/dom/util/AnnotationTriplet.java"}, "focal_method": {"identifier": "compareTo", "parameters": "(final AnnotationTriplet o)", "modifiers": "@Override public", "return": "int", "body": "@Override public int compareTo(final AnnotationTriplet o) {\n\n        if (this.annotation.equals(o.annotation)){\n            return this.order.compareTo(o.order);\n        } else {\n            return this.annotation.compareTo(o.annotation);\n        }\n\n    }", "signature": "int compareTo(final AnnotationTriplet o)", "full_signature": "@Override public int compareTo(final AnnotationTriplet o)", "class_method_signature": "AnnotationTriplet.compareTo(final AnnotationTriplet o)", "testcase": false, "constructor": false, "invocations": ["equals", "compareTo", "compareTo"]}, "repository": {"repo_id": 6935442, "url": "https://github.com/apache/isis", "stars": 516, "created": "11/30/2012 8:00:24 AM +00:00", "updates": "2020-01-27T13:28:09+00:00", "fork": "False", "license": "licensed"}}