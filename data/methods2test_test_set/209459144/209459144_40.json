{"test_class": {"identifier": "EnvironmentUtilitiesTest", "superclass": "", "interfaces": "", "fields": [], "file": "submarine-server/server-submitter/submitter-yarnservice/src/test/java/org/apache/submarine/server/submitter/yarnservice/utils/EnvironmentUtilitiesTest.java"}, "test_case": {"identifier": "testHandleServiceEnvWithEmptyMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testHandleServiceEnvWithEmptyMap() {\n    Service service = createServiceWithEmptyEnvVars();\n    org.apache.hadoop.conf.Configuration yarnConfig =\n        mock(org.apache.hadoop.conf.Configuration.class);\n    EnvironmentUtilities.handleServiceEnvs(service, yarnConfig, null);\n\n    Map<String, String> resultEnvs = service.getConfiguration().getEnv();\n    assertEquals(1, resultEnvs.size());\n    validateDefaultEnvVars(resultEnvs);\n  }", "signature": "void testHandleServiceEnvWithEmptyMap()", "full_signature": "@Test public void testHandleServiceEnvWithEmptyMap()", "class_method_signature": "EnvironmentUtilitiesTest.testHandleServiceEnvWithEmptyMap()", "testcase": true, "constructor": false, "invocations": ["createServiceWithEmptyEnvVars", "mock", "handleServiceEnvs", "getEnv", "getConfiguration", "assertEquals", "size", "validateDefaultEnvVars"]}, "focal_class": {"identifier": "EnvironmentUtilities", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG =\n      LoggerFactory.getLogger(EnvironmentUtilities.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG =\n      LoggerFactory.getLogger(EnvironmentUtilities.class)", "var_name": "LOG"}, {"original_string": "static final String ENV_DOCKER_MOUNTS_FOR_CONTAINER_RUNTIME =\n      \"YARN_CONTAINER_RUNTIME_DOCKER_MOUNTS\";", "modifier": "static final", "type": "String", "declarator": "ENV_DOCKER_MOUNTS_FOR_CONTAINER_RUNTIME =\n      \"YARN_CONTAINER_RUNTIME_DOCKER_MOUNTS\"", "var_name": "ENV_DOCKER_MOUNTS_FOR_CONTAINER_RUNTIME"}, {"original_string": "private static final String MOUNTS_DELIM = \",\";", "modifier": "private static final", "type": "String", "declarator": "MOUNTS_DELIM = \",\"", "var_name": "MOUNTS_DELIM"}, {"original_string": "private static final String ENV_SEPARATOR = \"=\";", "modifier": "private static final", "type": "String", "declarator": "ENV_SEPARATOR = \"=\"", "var_name": "ENV_SEPARATOR"}, {"original_string": "private static final String ETC_PASSWD = \":/etc/passwd\";", "modifier": "private static final", "type": "String", "declarator": "ETC_PASSWD = \":/etc/passwd\"", "var_name": "ETC_PASSWD"}, {"original_string": "private static final String ETC_GROUP = \":/etc/group\";", "modifier": "private static final", "type": "String", "declarator": "ETC_GROUP = \":/etc/group\"", "var_name": "ETC_GROUP"}, {"original_string": "private static final String ETC_PASSWD_MOUNT_STRING =\n      \"/etc/passwd:/etc/passwd:ro\";", "modifier": "private static final", "type": "String", "declarator": "ETC_PASSWD_MOUNT_STRING =\n      \"/etc/passwd:/etc/passwd:ro\"", "var_name": "ETC_PASSWD_MOUNT_STRING"}, {"original_string": "private static final String ETC_GROUP_MOUNT_STRING =\n      \"/etc/group:/etc/group:ro\";", "modifier": "private static final", "type": "String", "declarator": "ETC_GROUP_MOUNT_STRING =\n      \"/etc/group:/etc/group:ro\"", "var_name": "ETC_GROUP_MOUNT_STRING"}, {"original_string": "private static final String KERBEROS_CONF_MOUNT_STRING =\n      \"/etc/krb5.conf:/etc/krb5.conf:ro\";", "modifier": "private static final", "type": "String", "declarator": "KERBEROS_CONF_MOUNT_STRING =\n      \"/etc/krb5.conf:/etc/krb5.conf:ro\"", "var_name": "KERBEROS_CONF_MOUNT_STRING"}, {"original_string": "private static final String ENV_VAR_DELIM = \":\";", "modifier": "private static final", "type": "String", "declarator": "ENV_VAR_DELIM = \":\"", "var_name": "ENV_VAR_DELIM"}], "methods": [{"identifier": "EnvironmentUtilities", "parameters": "()", "modifiers": "private", "return": "", "signature": " EnvironmentUtilities()", "full_signature": "private  EnvironmentUtilities()", "class_method_signature": "EnvironmentUtilities.EnvironmentUtilities()", "testcase": false, "constructor": true}, {"identifier": "getValueOfEnvironment", "parameters": "(String envVar)", "modifiers": "public static", "return": "String", "signature": "String getValueOfEnvironment(String envVar)", "full_signature": "public static String getValueOfEnvironment(String envVar)", "class_method_signature": "EnvironmentUtilities.getValueOfEnvironment(String envVar)", "testcase": false, "constructor": false}, {"identifier": "handleServiceEnvs", "parameters": "(Service service,\n      Configuration yarnConfig, List<String> envVars)", "modifiers": "public static", "return": "void", "signature": "void handleServiceEnvs(Service service,\n      Configuration yarnConfig, List<String> envVars)", "full_signature": "public static void handleServiceEnvs(Service service,\n      Configuration yarnConfig, List<String> envVars)", "class_method_signature": "EnvironmentUtilities.handleServiceEnvs(Service service,\n      Configuration yarnConfig, List<String> envVars)", "testcase": false, "constructor": false}, {"identifier": "appendOtherConfigs", "parameters": "(Service service,\n      Configuration yarnConfig)", "modifiers": "private static", "return": "void", "signature": "void appendOtherConfigs(Service service,\n      Configuration yarnConfig)", "full_signature": "private static void appendOtherConfigs(Service service,\n      Configuration yarnConfig)", "class_method_signature": "EnvironmentUtilities.appendOtherConfigs(Service service,\n      Configuration yarnConfig)", "testcase": false, "constructor": false}, {"identifier": "appendToEnv", "parameters": "(Service service, String key, String value,\n      String delim)", "modifiers": "static", "return": "void", "signature": "void appendToEnv(Service service, String key, String value,\n      String delim)", "full_signature": "static void appendToEnv(Service service, String key, String value,\n      String delim)", "class_method_signature": "EnvironmentUtilities.appendToEnv(Service service, String key, String value,\n      String delim)", "testcase": false, "constructor": false}, {"identifier": "etcAppendToEnv", "parameters": "(Service service, String key, String value,\n                             String delim)", "modifiers": "@SuppressWarnings(\"checkstyle:WhitespaceAround\") static", "return": "void", "signature": "void etcAppendToEnv(Service service, String key, String value,\n                             String delim)", "full_signature": "@SuppressWarnings(\"checkstyle:WhitespaceAround\") static void etcAppendToEnv(Service service, String key, String value,\n                             String delim)", "class_method_signature": "EnvironmentUtilities.etcAppendToEnv(Service service, String key, String value,\n                             String delim)", "testcase": false, "constructor": false}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/main/java/org/apache/submarine/server/submitter/yarnservice/utils/EnvironmentUtilities.java"}, "focal_method": {"identifier": "handleServiceEnvs", "parameters": "(Service service,\n      Configuration yarnConfig, List<String> envVars)", "modifiers": "public static", "return": "void", "body": "public static void handleServiceEnvs(Service service,\n      Configuration yarnConfig, List<String> envVars) {\n    if (envVars != null) {\n      for (String envVarPair : envVars) {\n        String key, value;\n        if (envVarPair.contains(ENV_SEPARATOR)) {\n          int idx = envVarPair.indexOf(ENV_SEPARATOR);\n          key = envVarPair.substring(0, idx);\n          value = envVarPair.substring(idx + 1);\n        } else {\n          LOG.warn(\"Found environment variable with unusual format: '{}'\",\n              envVarPair);\n          // No \"=\" found so use the whole key\n          key = envVarPair;\n          value = \"\";\n        }\n        appendToEnv(service, key, value, ENV_VAR_DELIM);\n      }\n    }\n    appendOtherConfigs(service, yarnConfig);\n  }", "signature": "void handleServiceEnvs(Service service,\n      Configuration yarnConfig, List<String> envVars)", "full_signature": "public static void handleServiceEnvs(Service service,\n      Configuration yarnConfig, List<String> envVars)", "class_method_signature": "EnvironmentUtilities.handleServiceEnvs(Service service,\n      Configuration yarnConfig, List<String> envVars)", "testcase": false, "constructor": false, "invocations": ["contains", "indexOf", "substring", "substring", "warn", "appendToEnv", "appendOtherConfigs"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}