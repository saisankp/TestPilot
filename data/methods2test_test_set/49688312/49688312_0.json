{"test_class": {"identifier": "QueryMatcherTest", "superclass": "", "interfaces": "", "fields": [], "file": "android/MemoriaPolitica/app/src/test/java/com/tekklabs/memoriapolitica/domain/QueryMatcherTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() {\n        QueryMatcher matcher = new QueryMatcher(\"Jair Bolsonaro\", \"PP\");\n        boolean result = matcher.matches(\"bolsonaro\");\n\n        Assert.assertTrue(result);\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "QueryMatcherTest.test()", "testcase": true, "constructor": false, "invocations": ["matches", "assertTrue"]}, "focal_class": {"identifier": "QueryMatcher", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private List<String> entityTerms;", "modifier": "private", "type": "List<String>", "declarator": "entityTerms", "var_name": "entityTerms"}], "methods": [{"identifier": "QueryMatcher", "parameters": "(final String... theEntityTerms)", "modifiers": "public", "return": "", "signature": " QueryMatcher(final String... theEntityTerms)", "full_signature": "public  QueryMatcher(final String... theEntityTerms)", "class_method_signature": "QueryMatcher.QueryMatcher(final String... theEntityTerms)", "testcase": false, "constructor": true}, {"identifier": "processEntityTerms", "parameters": "(String[] terms)", "modifiers": "private", "return": "List<String>", "signature": "List<String> processEntityTerms(String[] terms)", "full_signature": "private List<String> processEntityTerms(String[] terms)", "class_method_signature": "QueryMatcher.processEntityTerms(String[] terms)", "testcase": false, "constructor": false}, {"identifier": "getNonAccentTerm", "parameters": "(String term)", "modifiers": "private", "return": "String", "signature": "String getNonAccentTerm(String term)", "full_signature": "private String getNonAccentTerm(String term)", "class_method_signature": "QueryMatcher.getNonAccentTerm(String term)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(String... queryTerms)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(String... queryTerms)", "full_signature": "public boolean matches(String... queryTerms)", "class_method_signature": "QueryMatcher.matches(String... queryTerms)", "testcase": false, "constructor": false}], "file": "android/MemoriaPolitica/app/src/main/java/com/tekklabs/memoriapolitica/domain/QueryMatcher.java"}, "focal_method": {"identifier": "matches", "parameters": "(String... queryTerms)", "modifiers": "public", "return": "boolean", "body": "public boolean matches(String... queryTerms) {\n        for (String queryTerm : queryTerms) {\n            for (String entityTerm : entityTerms) {\n                if (entityTerm.contains(queryTerm.toUpperCase())) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }", "signature": "boolean matches(String... queryTerms)", "full_signature": "public boolean matches(String... queryTerms)", "class_method_signature": "QueryMatcher.matches(String... queryTerms)", "testcase": false, "constructor": false, "invocations": ["contains", "toUpperCase"]}, "repository": {"repo_id": 49688312, "url": "https://github.com/TekkLabs/memoria-politica", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 6, "size": 34043, "license": "licensed"}}