{"test_class": {"identifier": "GraphPathTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SegmentStub s1;", "modifier": "private", "type": "SegmentStub", "declarator": "s1", "var_name": "s1"}, {"original_string": "private SegmentStub s2;", "modifier": "private", "type": "SegmentStub", "declarator": "s2", "var_name": "s2"}, {"original_string": "private SegmentStub s3;", "modifier": "private", "type": "SegmentStub", "declarator": "s3", "var_name": "s3"}, {"original_string": "private SegmentStub s4;", "modifier": "private", "type": "SegmentStub", "declarator": "s4", "var_name": "s4"}, {"original_string": "private SegmentStub s5;", "modifier": "private", "type": "SegmentStub", "declarator": "s5", "var_name": "s5"}, {"original_string": "private SegmentStub s6;", "modifier": "private", "type": "SegmentStub", "declarator": "s6", "var_name": "s6"}, {"original_string": "private ConnectionStub c1;", "modifier": "private", "type": "ConnectionStub", "declarator": "c1", "var_name": "c1"}, {"original_string": "private ConnectionStub c2;", "modifier": "private", "type": "ConnectionStub", "declarator": "c2", "var_name": "c2"}, {"original_string": "private ConnectionStub c3;", "modifier": "private", "type": "ConnectionStub", "declarator": "c3", "var_name": "c3"}, {"original_string": "private ConnectionStub c4;", "modifier": "private", "type": "ConnectionStub", "declarator": "c4", "var_name": "c4"}, {"original_string": "private ConnectionStub c5;", "modifier": "private", "type": "ConnectionStub", "declarator": "c5", "var_name": "c5"}, {"original_string": "private ConnectionStub c6;", "modifier": "private", "type": "ConnectionStub", "declarator": "c6", "var_name": "c6"}, {"original_string": "private ConnectionStub c7;", "modifier": "private", "type": "ConnectionStub", "declarator": "c7", "var_name": "c7"}, {"original_string": "private GraphPathStub path;", "modifier": "private", "type": "GraphPathStub", "declarator": "path", "var_name": "path"}], "file": "core/maths/mathgraph/src/test/java/org/arakhne/afc/math/graph/GraphPathTest.java"}, "test_case": {"identifier": "clear", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void clear() {\n\t\tthis.path.add(this.s1);\n\t\tthis.path.add(this.s4);\n\t\tthis.path.add(this.s2);\n\t\tthis.path.add(this.s1);\n\t\tthis.path.add(this.s1);\n\t\tassertFalse(this.path.isEmpty());\n\t\t\n\t\tthis.path.clear();\n\t\tassertTrue(this.path.isEmpty());\n\t}", "signature": "void clear()", "full_signature": "@Test public void clear()", "class_method_signature": "GraphPathTest.clear()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "assertFalse", "isEmpty", "clear", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "GraphPath", "superclass": "", "interfaces": "implements GraphSegmentList<ST, PT>, Cloneable", "fields": [{"original_string": "List<ST> segmentList;", "modifier": "", "type": "List<ST>", "declarator": "segmentList", "var_name": "segmentList"}, {"original_string": "private PT startingPoint;", "modifier": "private", "type": "PT", "declarator": "startingPoint", "var_name": "startingPoint"}, {"original_string": "private PT endingPoint;", "modifier": "private", "type": "PT", "declarator": "endingPoint", "var_name": "endingPoint"}, {"original_string": "private boolean isReversable;", "modifier": "private", "type": "boolean", "declarator": "isReversable", "var_name": "isReversable"}, {"original_string": "private double length;", "modifier": "private", "type": "double", "declarator": "length", "var_name": "length"}], "methods": [{"identifier": "GraphPath", "parameters": "(List<ST> original)", "modifiers": "protected", "return": "", "signature": " GraphPath(List<ST> original)", "full_signature": "protected  GraphPath(List<ST> original)", "class_method_signature": "GraphPath.GraphPath(List<ST> original)", "testcase": false, "constructor": true}, {"identifier": "GraphPath", "parameters": "()", "modifiers": "public", "return": "", "signature": " GraphPath()", "full_signature": "public  GraphPath()", "class_method_signature": "GraphPath.GraphPath()", "testcase": false, "constructor": true}, {"identifier": "GraphPath", "parameters": "(ST segment, PT startingPoint1)", "modifiers": "public", "return": "", "signature": " GraphPath(ST segment, PT startingPoint1)", "full_signature": "public  GraphPath(ST segment, PT startingPoint1)", "class_method_signature": "GraphPath.GraphPath(ST segment, PT startingPoint1)", "testcase": false, "constructor": true}, {"identifier": "isFirstSegmentReversable", "parameters": "()", "modifiers": "@Pure public", "return": "boolean", "signature": "boolean isFirstSegmentReversable()", "full_signature": "@Pure public boolean isFirstSegmentReversable()", "class_method_signature": "GraphPath.isFirstSegmentReversable()", "testcase": false, "constructor": false}, {"identifier": "setFirstSegmentReversable", "parameters": "(boolean isReversable1)", "modifiers": "public", "return": "void", "signature": "void setFirstSegmentReversable(boolean isReversable1)", "full_signature": "public void setFirstSegmentReversable(boolean isReversable1)", "class_method_signature": "GraphPath.setFirstSegmentReversable(boolean isReversable1)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Pure @Override public", "return": "int", "signature": "int size()", "full_signature": "@Pure @Override public int size()", "class_method_signature": "GraphPath.size()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Pure @Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Pure @Override public boolean isEmpty()", "class_method_signature": "GraphPath.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object obj)", "modifiers": "@Pure @Override public", "return": "boolean", "signature": "boolean contains(Object obj)", "full_signature": "@Pure @Override public boolean contains(Object obj)", "class_method_signature": "GraphPath.contains(Object obj)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Iterator<ST>", "signature": "Iterator<ST> iterator()", "full_signature": "@Pure @Override public Iterator<ST> iterator()", "class_method_signature": "GraphPath.iterator()", "testcase": false, "constructor": false}, {"identifier": "pointIterator", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Iterator<PT>", "signature": "Iterator<PT> pointIterator()", "full_signature": "@Pure @Override public Iterator<PT> pointIterator()", "class_method_signature": "GraphPath.pointIterator()", "testcase": false, "constructor": false}, {"identifier": "points", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Iterable<PT>", "signature": "Iterable<PT> points()", "full_signature": "@Pure @Override public Iterable<PT> points()", "class_method_signature": "GraphPath.points()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Object[]", "signature": "Object[] toArray()", "full_signature": "@Pure @Override public Object[] toArray()", "class_method_signature": "GraphPath.toArray()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(T[] array)", "modifiers": "@Override public", "return": "T[]", "signature": "T[] toArray(T[] array)", "full_signature": "@Override public T[] toArray(T[] array)", "class_method_signature": "GraphPath.toArray(T[] array)", "testcase": false, "constructor": false}, {"identifier": "containsAll", "parameters": "(Collection<?> collection)", "modifiers": "@Pure @Override public", "return": "boolean", "signature": "boolean containsAll(Collection<?> collection)", "full_signature": "@Pure @Override public boolean containsAll(Collection<?> collection)", "class_method_signature": "GraphPath.containsAll(Collection<?> collection)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(ST segment, PT point)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(ST segment, PT point)", "full_signature": "@Override public boolean add(ST segment, PT point)", "class_method_signature": "GraphPath.add(ST segment, PT point)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int index, ST segment)", "modifiers": "@Override public", "return": "void", "signature": "void add(int index, ST segment)", "full_signature": "@Override public void add(int index, ST segment)", "class_method_signature": "GraphPath.add(int index, ST segment)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(ST segment)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(ST segment)", "full_signature": "@Override public boolean add(ST segment)", "class_method_signature": "GraphPath.add(ST segment)", "testcase": false, "constructor": false}, {"identifier": "getLastPoint", "parameters": "()", "modifiers": "@Pure @Override public", "return": "PT", "signature": "PT getLastPoint()", "full_signature": "@Pure @Override public PT getLastPoint()", "class_method_signature": "GraphPath.getLastPoint()", "testcase": false, "constructor": false}, {"identifier": "getFirstPoint", "parameters": "()", "modifiers": "@Pure @Override public", "return": "PT", "signature": "PT getFirstPoint()", "full_signature": "@Pure @Override public PT getFirstPoint()", "class_method_signature": "GraphPath.getFirstPoint()", "testcase": false, "constructor": false}, {"identifier": "getStartingPointFor", "parameters": "(int index)", "modifiers": "@Pure @SuppressWarnings(\"checkstyle:cyclomaticcomplexity\") public", "return": "PT", "signature": "PT getStartingPointFor(int index)", "full_signature": "@Pure @SuppressWarnings(\"checkstyle:cyclomaticcomplexity\") public PT getStartingPointFor(int index)", "class_method_signature": "GraphPath.getStartingPointFor(int index)", "testcase": false, "constructor": false}, {"identifier": "getLastSegment", "parameters": "()", "modifiers": "@Pure @Override public", "return": "ST", "signature": "ST getLastSegment()", "full_signature": "@Pure @Override public ST getLastSegment()", "class_method_signature": "GraphPath.getLastSegment()", "testcase": false, "constructor": false}, {"identifier": "getAntepenulvianSegment", "parameters": "()", "modifiers": "@Pure @Override public", "return": "ST", "signature": "ST getAntepenulvianSegment()", "full_signature": "@Pure @Override public ST getAntepenulvianSegment()", "class_method_signature": "GraphPath.getAntepenulvianSegment()", "testcase": false, "constructor": false}, {"identifier": "getSecondSegment", "parameters": "()", "modifiers": "@Pure @Override public", "return": "ST", "signature": "ST getSecondSegment()", "full_signature": "@Pure @Override public ST getSecondSegment()", "class_method_signature": "GraphPath.getSecondSegment()", "testcase": false, "constructor": false}, {"identifier": "getFirstSegment", "parameters": "()", "modifiers": "@Pure @Override public", "return": "ST", "signature": "ST getFirstSegment()", "full_signature": "@Pure @Override public ST getFirstSegment()", "class_method_signature": "GraphPath.getFirstSegment()", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Collection<? extends ST> collection)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAll(Collection<? extends ST> collection)", "full_signature": "@Override public boolean addAll(Collection<? extends ST> collection)", "class_method_signature": "GraphPath.addAll(Collection<? extends ST> collection)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(int index, Collection<? extends ST> collection)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAll(int index, Collection<? extends ST> collection)", "full_signature": "@Override public boolean addAll(int index, Collection<? extends ST> collection)", "class_method_signature": "GraphPath.addAll(int index, Collection<? extends ST> collection)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(Object obj)", "full_signature": "@Override public boolean remove(Object obj)", "class_method_signature": "GraphPath.remove(Object obj)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int index)", "modifiers": "@Override public", "return": "ST", "signature": "ST remove(int index)", "full_signature": "@Override public ST remove(int index)", "class_method_signature": "GraphPath.remove(int index)", "testcase": false, "constructor": false}, {"identifier": "removeUntil", "parameters": "(int index, boolean inclusive)", "modifiers": "", "return": "boolean", "signature": "boolean removeUntil(int index, boolean inclusive)", "full_signature": " boolean removeUntil(int index, boolean inclusive)", "class_method_signature": "GraphPath.removeUntil(int index, boolean inclusive)", "testcase": false, "constructor": false}, {"identifier": "removeUntil", "parameters": "(ST obj, PT pt)", "modifiers": "public", "return": "boolean", "signature": "boolean removeUntil(ST obj, PT pt)", "full_signature": "public boolean removeUntil(ST obj, PT pt)", "class_method_signature": "GraphPath.removeUntil(ST obj, PT pt)", "testcase": false, "constructor": false}, {"identifier": "removeUntil", "parameters": "(ST obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeUntil(ST obj)", "full_signature": "@Override public boolean removeUntil(ST obj)", "class_method_signature": "GraphPath.removeUntil(ST obj)", "testcase": false, "constructor": false}, {"identifier": "removeBefore", "parameters": "(ST obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeBefore(ST obj)", "full_signature": "@Override public boolean removeBefore(ST obj)", "class_method_signature": "GraphPath.removeBefore(ST obj)", "testcase": false, "constructor": false}, {"identifier": "removeBefore", "parameters": "(ST obj, PT pt)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeBefore(ST obj, PT pt)", "full_signature": "@Override public boolean removeBefore(ST obj, PT pt)", "class_method_signature": "GraphPath.removeBefore(ST obj, PT pt)", "testcase": false, "constructor": false}, {"identifier": "removeBeforeLast", "parameters": "(ST obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeBeforeLast(ST obj)", "full_signature": "@Override public boolean removeBeforeLast(ST obj)", "class_method_signature": "GraphPath.removeBeforeLast(ST obj)", "testcase": false, "constructor": false}, {"identifier": "removeBeforeLast", "parameters": "(ST obj, PT pt)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeBeforeLast(ST obj, PT pt)", "full_signature": "@Override public boolean removeBeforeLast(ST obj, PT pt)", "class_method_signature": "GraphPath.removeBeforeLast(ST obj, PT pt)", "testcase": false, "constructor": false}, {"identifier": "removeUntilLast", "parameters": "(ST obj, PT pt)", "modifiers": "public", "return": "boolean", "signature": "boolean removeUntilLast(ST obj, PT pt)", "full_signature": "public boolean removeUntilLast(ST obj, PT pt)", "class_method_signature": "GraphPath.removeUntilLast(ST obj, PT pt)", "testcase": false, "constructor": false}, {"identifier": "removeUntilLast", "parameters": "(ST obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeUntilLast(ST obj)", "full_signature": "@Override public boolean removeUntilLast(ST obj)", "class_method_signature": "GraphPath.removeUntilLast(ST obj)", "testcase": false, "constructor": false}, {"identifier": "removeAfter", "parameters": "(int index, boolean inclusive)", "modifiers": "private", "return": "boolean", "signature": "boolean removeAfter(int index, boolean inclusive)", "full_signature": "private boolean removeAfter(int index, boolean inclusive)", "class_method_signature": "GraphPath.removeAfter(int index, boolean inclusive)", "testcase": false, "constructor": false}, {"identifier": "removeAfter", "parameters": "(ST obj, PT pt)", "modifiers": "public", "return": "boolean", "signature": "boolean removeAfter(ST obj, PT pt)", "full_signature": "public boolean removeAfter(ST obj, PT pt)", "class_method_signature": "GraphPath.removeAfter(ST obj, PT pt)", "testcase": false, "constructor": false}, {"identifier": "removeAfter", "parameters": "(ST obj)", "modifiers": "public", "return": "boolean", "signature": "boolean removeAfter(ST obj)", "full_signature": "public boolean removeAfter(ST obj)", "class_method_signature": "GraphPath.removeAfter(ST obj)", "testcase": false, "constructor": false}, {"identifier": "removeAfterLast", "parameters": "(ST obj)", "modifiers": "public", "return": "boolean", "signature": "boolean removeAfterLast(ST obj)", "full_signature": "public boolean removeAfterLast(ST obj)", "class_method_signature": "GraphPath.removeAfterLast(ST obj)", "testcase": false, "constructor": false}, {"identifier": "removeAfterLast", "parameters": "(ST obj, PT pt)", "modifiers": "public", "return": "boolean", "signature": "boolean removeAfterLast(ST obj, PT pt)", "full_signature": "public boolean removeAfterLast(ST obj, PT pt)", "class_method_signature": "GraphPath.removeAfterLast(ST obj, PT pt)", "testcase": false, "constructor": false}, {"identifier": "removeFromLast", "parameters": "(ST obj, PT pt)", "modifiers": "public", "return": "boolean", "signature": "boolean removeFromLast(ST obj, PT pt)", "full_signature": "public boolean removeFromLast(ST obj, PT pt)", "class_method_signature": "GraphPath.removeFromLast(ST obj, PT pt)", "testcase": false, "constructor": false}, {"identifier": "removeFromLast", "parameters": "(ST obj)", "modifiers": "public", "return": "boolean", "signature": "boolean removeFromLast(ST obj)", "full_signature": "public boolean removeFromLast(ST obj)", "class_method_signature": "GraphPath.removeFromLast(ST obj)", "testcase": false, "constructor": false}, {"identifier": "removeFrom", "parameters": "(ST obj, PT pt)", "modifiers": "public", "return": "boolean", "signature": "boolean removeFrom(ST obj, PT pt)", "full_signature": "public boolean removeFrom(ST obj, PT pt)", "class_method_signature": "GraphPath.removeFrom(ST obj, PT pt)", "testcase": false, "constructor": false}, {"identifier": "removeFrom", "parameters": "(ST obj)", "modifiers": "public", "return": "boolean", "signature": "boolean removeFrom(ST obj)", "full_signature": "public boolean removeFrom(ST obj)", "class_method_signature": "GraphPath.removeFrom(ST obj)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(ST obj, PT startPoint)", "modifiers": "private", "return": "int", "signature": "int indexOf(ST obj, PT startPoint)", "full_signature": "private int indexOf(ST obj, PT startPoint)", "class_method_signature": "GraphPath.indexOf(ST obj, PT startPoint)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(Object obj)", "modifiers": "@Pure @Override public", "return": "int", "signature": "int indexOf(Object obj)", "full_signature": "@Pure @Override public int indexOf(Object obj)", "class_method_signature": "GraphPath.indexOf(Object obj)", "testcase": false, "constructor": false}, {"identifier": "lastIndexOf", "parameters": "(ST obj, PT startPoint)", "modifiers": "private", "return": "int", "signature": "int lastIndexOf(ST obj, PT startPoint)", "full_signature": "private int lastIndexOf(ST obj, PT startPoint)", "class_method_signature": "GraphPath.lastIndexOf(ST obj, PT startPoint)", "testcase": false, "constructor": false}, {"identifier": "lastIndexOf", "parameters": "(Object obj)", "modifiers": "@Pure @Override public", "return": "int", "signature": "int lastIndexOf(Object obj)", "full_signature": "@Pure @Override public int lastIndexOf(Object obj)", "class_method_signature": "GraphPath.lastIndexOf(Object obj)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(Collection<?> collection)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAll(Collection<?> collection)", "full_signature": "@Override public boolean removeAll(Collection<?> collection)", "class_method_signature": "GraphPath.removeAll(Collection<?> collection)", "testcase": false, "constructor": false}, {"identifier": "filterList", "parameters": "(Collection<?> collection, boolean pushOutside)", "modifiers": "private", "return": "boolean", "signature": "boolean filterList(Collection<?> collection, boolean pushOutside)", "full_signature": "private boolean filterList(Collection<?> collection, boolean pushOutside)", "class_method_signature": "GraphPath.filterList(Collection<?> collection, boolean pushOutside)", "testcase": false, "constructor": false}, {"identifier": "retainAll", "parameters": "(Collection<?> collection)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean retainAll(Collection<?> collection)", "full_signature": "@Override public boolean retainAll(Collection<?> collection)", "class_method_signature": "GraphPath.retainAll(Collection<?> collection)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "GraphPath.clear()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "@Override public", "return": "ST", "signature": "ST get(int index)", "full_signature": "@Override public ST get(int index)", "class_method_signature": "GraphPath.get(int index)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int index, ST element)", "modifiers": "@Override public", "return": "ST", "signature": "ST set(int index, ST element)", "full_signature": "@Override public ST set(int index, ST element)", "class_method_signature": "GraphPath.set(int index, ST element)", "testcase": false, "constructor": false}, {"identifier": "listIterator", "parameters": "()", "modifiers": "@Pure @Override public", "return": "ListIterator<ST>", "signature": "ListIterator<ST> listIterator()", "full_signature": "@Pure @Override public ListIterator<ST> listIterator()", "class_method_signature": "GraphPath.listIterator()", "testcase": false, "constructor": false}, {"identifier": "listIterator", "parameters": "(int index)", "modifiers": "@Pure @Override public", "return": "ListIterator<ST>", "signature": "ListIterator<ST> listIterator(int index)", "full_signature": "@Pure @Override public ListIterator<ST> listIterator(int index)", "class_method_signature": "GraphPath.listIterator(int index)", "testcase": false, "constructor": false}, {"identifier": "subList", "parameters": "(int fromIndex, int toIndex)", "modifiers": "@Pure @Override public", "return": "List<ST>", "signature": "List<ST> subList(int fromIndex, int toIndex)", "full_signature": "@Pure @Override public List<ST> subList(int fromIndex, int toIndex)", "class_method_signature": "GraphPath.subList(int fromIndex, int toIndex)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Pure @Override public", "return": "String", "signature": "String toString()", "full_signature": "@Pure @Override public String toString()", "class_method_signature": "GraphPath.toString()", "testcase": false, "constructor": false}, {"identifier": "invert", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void invert()", "full_signature": "public void invert()", "class_method_signature": "GraphPath.invert()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Pure @SuppressWarnings(\"unchecked\") @Override public", "return": "GP", "signature": "GP clone()", "full_signature": "@Pure @SuppressWarnings(\"unchecked\") @Override public GP clone()", "class_method_signature": "GraphPath.clone()", "testcase": false, "constructor": false}, {"identifier": "splitAt", "parameters": "(int index, boolean inclusive)", "modifiers": "private", "return": "GP", "signature": "GP splitAt(int index, boolean inclusive)", "full_signature": "private GP splitAt(int index, boolean inclusive)", "class_method_signature": "GraphPath.splitAt(int index, boolean inclusive)", "testcase": false, "constructor": false}, {"identifier": "splitAt", "parameters": "(ST obj)", "modifiers": "public", "return": "GP", "signature": "GP splitAt(ST obj)", "full_signature": "public GP splitAt(ST obj)", "class_method_signature": "GraphPath.splitAt(ST obj)", "testcase": false, "constructor": false}, {"identifier": "splitAt", "parameters": "(ST obj, PT startPoint)", "modifiers": "public", "return": "GP", "signature": "GP splitAt(ST obj, PT startPoint)", "full_signature": "public GP splitAt(ST obj, PT startPoint)", "class_method_signature": "GraphPath.splitAt(ST obj, PT startPoint)", "testcase": false, "constructor": false}, {"identifier": "splitAt", "parameters": "(int position)", "modifiers": "public", "return": "GP", "signature": "GP splitAt(int position)", "full_signature": "public GP splitAt(int position)", "class_method_signature": "GraphPath.splitAt(int position)", "testcase": false, "constructor": false}, {"identifier": "splitAfterLast", "parameters": "(ST obj)", "modifiers": "public", "return": "GP", "signature": "GP splitAfterLast(ST obj)", "full_signature": "public GP splitAfterLast(ST obj)", "class_method_signature": "GraphPath.splitAfterLast(ST obj)", "testcase": false, "constructor": false}, {"identifier": "splitAfterLast", "parameters": "(ST obj, PT startPoint)", "modifiers": "public", "return": "GP", "signature": "GP splitAfterLast(ST obj, PT startPoint)", "full_signature": "public GP splitAfterLast(ST obj, PT startPoint)", "class_method_signature": "GraphPath.splitAfterLast(ST obj, PT startPoint)", "testcase": false, "constructor": false}, {"identifier": "splitAtLast", "parameters": "(ST obj, PT startPoint)", "modifiers": "public", "return": "GP", "signature": "GP splitAtLast(ST obj, PT startPoint)", "full_signature": "public GP splitAtLast(ST obj, PT startPoint)", "class_method_signature": "GraphPath.splitAtLast(ST obj, PT startPoint)", "testcase": false, "constructor": false}, {"identifier": "splitAtLast", "parameters": "(ST obj)", "modifiers": "public", "return": "GP", "signature": "GP splitAtLast(ST obj)", "full_signature": "public GP splitAtLast(ST obj)", "class_method_signature": "GraphPath.splitAtLast(ST obj)", "testcase": false, "constructor": false}, {"identifier": "splitAfter", "parameters": "(ST obj)", "modifiers": "public", "return": "GP", "signature": "GP splitAfter(ST obj)", "full_signature": "public GP splitAfter(ST obj)", "class_method_signature": "GraphPath.splitAfter(ST obj)", "testcase": false, "constructor": false}, {"identifier": "splitAfter", "parameters": "(ST obj, PT startPoint)", "modifiers": "public", "return": "GP", "signature": "GP splitAfter(ST obj, PT startPoint)", "full_signature": "public GP splitAfter(ST obj, PT startPoint)", "class_method_signature": "GraphPath.splitAfter(ST obj, PT startPoint)", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "()", "modifiers": "@Pure public", "return": "double", "signature": "double getLength()", "full_signature": "@Pure public double getLength()", "class_method_signature": "GraphPath.getLength()", "testcase": false, "constructor": false}], "file": "core/maths/mathgraph/src/main/java/org/arakhne/afc/math/graph/GraphPath.java"}, "focal_method": {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void clear() {\n\t\tthis.segmentList.clear();\n\t\tthis.startingPoint = null;\n\t\tthis.endingPoint = null;\n\t\tthis.isReversable = true;\n\t\tthis.length = 0;\n\t}", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "GraphPath.clear()", "testcase": false, "constructor": false, "invocations": ["clear"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}