{"test_class": {"identifier": "EntityOwnerChangeListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String LOCAL_MEMBER_NAME = \"member-1\";", "modifier": "private static final", "type": "String", "declarator": "LOCAL_MEMBER_NAME = \"member-1\"", "var_name": "LOCAL_MEMBER_NAME"}, {"original_string": "private static final String REMOTE_MEMBER_NAME1 = \"member-2\";", "modifier": "private static final", "type": "String", "declarator": "REMOTE_MEMBER_NAME1 = \"member-2\"", "var_name": "REMOTE_MEMBER_NAME1"}, {"original_string": "private static final String REMOTE_MEMBER_NAME2 = \"member-3\";", "modifier": "private static final", "type": "String", "declarator": "REMOTE_MEMBER_NAME2 = \"member-3\"", "var_name": "REMOTE_MEMBER_NAME2"}, {"original_string": "private static final String ENTITY_TYPE = \"test\";", "modifier": "private static final", "type": "String", "declarator": "ENTITY_TYPE = \"test\"", "var_name": "ENTITY_TYPE"}, {"original_string": "private static final YangInstanceIdentifier ENTITY_ID1 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity1\"));", "modifier": "private static final", "type": "YangInstanceIdentifier", "declarator": "ENTITY_ID1 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity1\"))", "var_name": "ENTITY_ID1"}, {"original_string": "private static final YangInstanceIdentifier ENTITY_ID2 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity2\"));", "modifier": "private static final", "type": "YangInstanceIdentifier", "declarator": "ENTITY_ID2 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity2\"))", "var_name": "ENTITY_ID2"}, {"original_string": "private static final DOMEntity ENTITY1 = new DOMEntity(ENTITY_TYPE, ENTITY_ID1);", "modifier": "private static final", "type": "DOMEntity", "declarator": "ENTITY1 = new DOMEntity(ENTITY_TYPE, ENTITY_ID1)", "var_name": "ENTITY1"}, {"original_string": "private static final DOMEntity ENTITY2 = new DOMEntity(ENTITY_TYPE, ENTITY_ID2);", "modifier": "private static final", "type": "DOMEntity", "declarator": "ENTITY2 = new DOMEntity(ENTITY_TYPE, ENTITY_ID2)", "var_name": "ENTITY2"}, {"original_string": "private final Shard mockShard = Mockito.mock(Shard.class);", "modifier": "private final", "type": "Shard", "declarator": "mockShard = Mockito.mock(Shard.class)", "var_name": "mockShard"}, {"original_string": "private final ShardDataTree shardDataTree = new ShardDataTree(mockShard, EOSTestUtils.SCHEMA_CONTEXT,\n        TreeType.OPERATIONAL);", "modifier": "private final", "type": "ShardDataTree", "declarator": "shardDataTree = new ShardDataTree(mockShard, EOSTestUtils.SCHEMA_CONTEXT,\n        TreeType.OPERATIONAL)", "var_name": "shardDataTree"}, {"original_string": "private final EntityOwnershipListenerSupport mockListenerSupport = mock(EntityOwnershipListenerSupport.class);", "modifier": "private final", "type": "EntityOwnershipListenerSupport", "declarator": "mockListenerSupport = mock(EntityOwnershipListenerSupport.class)", "var_name": "mockListenerSupport"}, {"original_string": "private EntityOwnerChangeListener listener;", "modifier": "private", "type": "EntityOwnerChangeListener", "declarator": "listener", "var_name": "listener"}], "file": "opendaylight/md-sal/sal-distributed-eos/src/test/java/org/opendaylight/controller/cluster/entityownership/EntityOwnerChangeListenerTest.java"}, "test_case": {"identifier": "testOnDataTreeChanged", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnDataTreeChanged() throws Exception {\n        writeNode(ENTITY_OWNERS_PATH, entityOwnersWithCandidate(ENTITY_TYPE, ENTITY_ID1, LOCAL_MEMBER_NAME));\n        writeNode(ENTITY_OWNERS_PATH, entityOwnersWithCandidate(ENTITY_TYPE, ENTITY_ID2, LOCAL_MEMBER_NAME));\n        verify(mockListenerSupport, never()).notifyEntityOwnershipListeners(any(DOMEntity.class), anyBoolean(),\n                anyBoolean(), anyBoolean());\n\n        // Write local member as owner for entity 1\n\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID1), entityEntryWithOwner(ENTITY_ID1, LOCAL_MEMBER_NAME));\n        verify(mockListenerSupport).notifyEntityOwnershipListeners(ENTITY1, false, true, true);\n\n        // Add remote member 1 as candidate for entity 1 - listener support should not get notified\n\n        reset(mockListenerSupport);\n        writeNode(ENTITY_OWNERS_PATH, entityOwnersWithCandidate(ENTITY_TYPE, ENTITY_ID1, REMOTE_MEMBER_NAME1));\n        verify(mockListenerSupport, never()).notifyEntityOwnershipListeners(any(DOMEntity.class), anyBoolean(),\n                anyBoolean(), anyBoolean());\n\n        // Change owner to remote member 1 for entity 1\n\n        reset(mockListenerSupport);\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID1), entityEntryWithOwner(ENTITY_ID1, REMOTE_MEMBER_NAME1));\n        verify(mockListenerSupport).notifyEntityOwnershipListeners(ENTITY1, true, false, true);\n\n        // Change owner to remote member 2 for entity 1\n\n        reset(mockListenerSupport);\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID1), entityEntryWithOwner(ENTITY_ID1, REMOTE_MEMBER_NAME2));\n        verify(mockListenerSupport).notifyEntityOwnershipListeners(ENTITY1, false, false, true);\n\n        // Clear the owner for entity 1\n\n        reset(mockListenerSupport);\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID1), entityEntryWithOwner(ENTITY_ID1, \"\"));\n        verify(mockListenerSupport).notifyEntityOwnershipListeners(ENTITY1, false, false, false);\n\n        // Change owner to the local member for entity 1\n\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID1), entityEntryWithOwner(ENTITY_ID1, LOCAL_MEMBER_NAME));\n        verify(mockListenerSupport).notifyEntityOwnershipListeners(ENTITY1, false, true, true);\n\n        // Change owner to remote member 2 for entity 2\n\n        reset(mockListenerSupport);\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID2), entityEntryWithOwner(ENTITY_ID2, REMOTE_MEMBER_NAME1));\n        verify(mockListenerSupport).notifyEntityOwnershipListeners(ENTITY2, false, false, true);\n\n        // Change owner to the local member for entity 2\n\n        reset(mockListenerSupport);\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID2), entityEntryWithOwner(ENTITY_ID2, LOCAL_MEMBER_NAME));\n        verify(mockListenerSupport).notifyEntityOwnershipListeners(ENTITY2, false, true, true);\n\n        // Write local member owner for entity 2 again - expect no change\n\n        reset(mockListenerSupport);\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID2), entityEntryWithOwner(ENTITY_ID2, LOCAL_MEMBER_NAME));\n        verify(mockListenerSupport, never()).notifyEntityOwnershipListeners(any(DOMEntity.class), anyBoolean(),\n                anyBoolean(), anyBoolean());\n\n        // Clear the owner for entity 2\n\n        reset(mockListenerSupport);\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID2), entityEntryWithOwner(ENTITY_ID2, null));\n        verify(mockListenerSupport).notifyEntityOwnershipListeners(ENTITY2, true, false, false);\n\n        // Clear the owner for entity 2 again - expect no change\n\n        reset(mockListenerSupport);\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID2), entityEntryWithOwner(ENTITY_ID2, null));\n        verify(mockListenerSupport, never()).notifyEntityOwnershipListeners(any(DOMEntity.class), anyBoolean(),\n                anyBoolean(), anyBoolean());\n    }", "signature": "void testOnDataTreeChanged()", "full_signature": "@Test public void testOnDataTreeChanged()", "class_method_signature": "EntityOwnerChangeListenerTest.testOnDataTreeChanged()", "testcase": true, "constructor": false, "invocations": ["writeNode", "entityOwnersWithCandidate", "writeNode", "entityOwnersWithCandidate", "notifyEntityOwnershipListeners", "verify", "never", "any", "anyBoolean", "anyBoolean", "anyBoolean", "writeNode", "entityPath", "entityEntryWithOwner", "notifyEntityOwnershipListeners", "verify", "reset", "writeNode", "entityOwnersWithCandidate", "notifyEntityOwnershipListeners", "verify", "never", "any", "anyBoolean", "anyBoolean", "anyBoolean", "reset", "writeNode", "entityPath", "entityEntryWithOwner", "notifyEntityOwnershipListeners", "verify", "reset", "writeNode", "entityPath", "entityEntryWithOwner", "notifyEntityOwnershipListeners", "verify", "reset", "writeNode", "entityPath", "entityEntryWithOwner", "notifyEntityOwnershipListeners", "verify", "writeNode", "entityPath", "entityEntryWithOwner", "notifyEntityOwnershipListeners", "verify", "reset", "writeNode", "entityPath", "entityEntryWithOwner", "notifyEntityOwnershipListeners", "verify", "reset", "writeNode", "entityPath", "entityEntryWithOwner", "notifyEntityOwnershipListeners", "verify", "reset", "writeNode", "entityPath", "entityEntryWithOwner", "notifyEntityOwnershipListeners", "verify", "never", "any", "anyBoolean", "anyBoolean", "anyBoolean", "reset", "writeNode", "entityPath", "entityEntryWithOwner", "notifyEntityOwnershipListeners", "verify", "reset", "writeNode", "entityPath", "entityEntryWithOwner", "notifyEntityOwnershipListeners", "verify", "never", "any", "anyBoolean", "anyBoolean", "anyBoolean"]}, "focal_class": {"identifier": "EntityOwnerChangeListener", "superclass": "extends AbstractEntityOwnerChangeListener", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(EntityOwnerChangeListener.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(EntityOwnerChangeListener.class)", "var_name": "LOG"}, {"original_string": "private final String localMemberName;", "modifier": "private final", "type": "String", "declarator": "localMemberName", "var_name": "localMemberName"}, {"original_string": "private final EntityOwnershipChangePublisher publisher;", "modifier": "private final", "type": "EntityOwnershipChangePublisher", "declarator": "publisher", "var_name": "publisher"}], "methods": [{"identifier": "EntityOwnerChangeListener", "parameters": "(final MemberName localMemberName, final EntityOwnershipChangePublisher publisher)", "modifiers": "", "return": "", "signature": " EntityOwnerChangeListener(final MemberName localMemberName, final EntityOwnershipChangePublisher publisher)", "full_signature": "  EntityOwnerChangeListener(final MemberName localMemberName, final EntityOwnershipChangePublisher publisher)", "class_method_signature": "EntityOwnerChangeListener.EntityOwnerChangeListener(final MemberName localMemberName, final EntityOwnershipChangePublisher publisher)", "testcase": false, "constructor": true}, {"identifier": "onDataTreeChanged", "parameters": "(final Collection<DataTreeCandidate> changes)", "modifiers": "@Override public", "return": "void", "signature": "void onDataTreeChanged(final Collection<DataTreeCandidate> changes)", "full_signature": "@Override public void onDataTreeChanged(final Collection<DataTreeCandidate> changes)", "class_method_signature": "EntityOwnerChangeListener.onDataTreeChanged(final Collection<DataTreeCandidate> changes)", "testcase": false, "constructor": false}, {"identifier": "logId", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String logId()", "full_signature": "private String logId()", "class_method_signature": "EntityOwnerChangeListener.logId()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-eos/src/main/java/org/opendaylight/controller/cluster/entityownership/EntityOwnerChangeListener.java"}, "focal_method": {"identifier": "onDataTreeChanged", "parameters": "(final Collection<DataTreeCandidate> changes)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onDataTreeChanged(final Collection<DataTreeCandidate> changes) {\n        for (DataTreeCandidate change: changes) {\n            DataTreeCandidateNode changeRoot = change.getRootNode();\n            LeafNode<?> ownerLeaf = (LeafNode<?>) changeRoot.getDataAfter().get();\n\n            LOG.debug(\"{}: Entity node changed: {}, {}\", logId(), changeRoot.getModificationType(),\n                    change.getRootPath());\n\n            String newOwner = extractOwner(ownerLeaf);\n\n            String origOwner = null;\n            Optional<NormalizedNode<?, ?>> dataBefore = changeRoot.getDataBefore();\n            if (dataBefore.isPresent()) {\n                origOwner = extractOwner((LeafNode<?>) changeRoot.getDataBefore().get());\n            }\n\n            LOG.debug(\"{}: New owner: {}, Original owner: {}\", logId(), newOwner, origOwner);\n\n            if (!Objects.equals(origOwner, newOwner)) {\n                boolean isOwner = localMemberName.equals(newOwner);\n                boolean wasOwner = localMemberName.equals(origOwner);\n                boolean hasOwner = !Strings.isNullOrEmpty(newOwner);\n\n                DOMEntity entity = createEntity(change.getRootPath());\n\n                LOG.debug(\n                    \"{}: Calling notifyEntityOwnershipListeners: entity: {}, wasOwner: {}, isOwner: {}, hasOwner: {}\",\n                    logId(), entity, wasOwner, isOwner, hasOwner);\n\n                publisher.notifyEntityOwnershipListeners(entity, wasOwner, isOwner, hasOwner);\n            }\n        }\n    }", "signature": "void onDataTreeChanged(final Collection<DataTreeCandidate> changes)", "full_signature": "@Override public void onDataTreeChanged(final Collection<DataTreeCandidate> changes)", "class_method_signature": "EntityOwnerChangeListener.onDataTreeChanged(final Collection<DataTreeCandidate> changes)", "testcase": false, "constructor": false, "invocations": ["getRootNode", "get", "getDataAfter", "debug", "logId", "getModificationType", "getRootPath", "extractOwner", "getDataBefore", "isPresent", "extractOwner", "get", "getDataBefore", "debug", "logId", "equals", "equals", "equals", "isNullOrEmpty", "createEntity", "getRootPath", "debug", "logId", "notifyEntityOwnershipListeners"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}