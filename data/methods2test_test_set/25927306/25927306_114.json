{"test_class": {"identifier": "DnsSrvConnectionStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DNSContextFactory contextFactory;", "modifier": "private", "type": "DNSContextFactory", "declarator": "contextFactory", "var_name": "contextFactory"}], "file": "core/src/test/java/org/ldaptive/DnsSrvConnectionStrategyTest.java"}, "test_case": {"identifier": "firstUrlInactive", "parameters": "()", "modifiers": "@Test(groups = \"conn\") public", "return": "void", "body": "@Test(groups = \"conn\")\n  public void firstUrlInactive()\n    throws Exception\n  {\n    final DnsSrvConnectionStrategy strategy = new DnsSrvConnectionStrategy(contextFactory);\n    final ConnectionConfig cc = new ConnectionConfig();\n    cc.setLdapUrl(\"dns://\");\n    cc.setConnectionStrategy(strategy);\n    final MockConnection conn = new MockConnection(cc);\n    conn.setOpenPredicate(ldapURL -> !ldapURL.getHostname().contains(\"-1\"));\n    conn.setTestPredicate(ldapURL -> true);\n    Assert.assertEquals(strategy.ldapURLSet.getActiveUrls().size(), 3);\n    Assert.assertEquals(\n      strategy.ldapURLSet.getActiveUrls(),\n      Arrays.asList(\n        new LdapURL(\"ldap://directory-1.ldaptive.org:389\"),\n        new LdapURL(\"ldap://directory-2.ldaptive.org:389\"),\n        new LdapURL(\"ldap://directory-3.ldaptive.org:389\")));\n    Assert.assertEquals(strategy.ldapURLSet.getInactiveUrls().size(), 0);\n\n    // first entry should fail, list should reorder with that entry last\n    conn.open();\n    Assert.assertEquals(strategy.ldapURLSet.getActiveUrls().size(), 2);\n    Assert.assertEquals(\n      strategy.ldapURLSet.getActiveUrls(),\n      Arrays.asList(\n        new LdapURL(\"ldap://directory-2.ldaptive.org:389\"),\n        new LdapURL(\"ldap://directory-3.ldaptive.org:389\")));\n    Assert.assertEquals(strategy.ldapURLSet.getInactiveUrls().size(), 1);\n    Assert.assertEquals(\n      strategy.ldapURLSet.getInactiveUrls().iterator().next(),\n      new LdapURL(\"ldap://directory-1.ldaptive.org:389\"));\n\n    // confirm the inactive entry stays at the end\n    Assert.assertEquals(\n      StreamSupport.stream(strategy.spliterator(), false).collect(Collectors.toList()),\n      Arrays.asList(\n        new LdapURL(\"ldap://directory-2.ldaptive.org:389\"),\n        new LdapURL(\"ldap://directory-3.ldaptive.org:389\"),\n        new LdapURL(\"ldap://directory-1.ldaptive.org:389\")));\n    Assert.assertEquals(strategy.ldapURLSet.getActiveUrls().size(), 2);\n    Assert.assertEquals(\n      strategy.ldapURLSet.getActiveUrls(),\n      Arrays.asList(\n        new LdapURL(\"ldap://directory-2.ldaptive.org:389\"),\n        new LdapURL(\"ldap://directory-3.ldaptive.org:389\")));\n    Assert.assertEquals(strategy.ldapURLSet.getInactiveUrls().size(), 1);\n    Assert.assertEquals(\n      strategy.ldapURLSet.getInactiveUrls().iterator().next(),\n      new LdapURL(\"ldap://directory-1.ldaptive.org:389\"));\n\n    // mark first entry as active, list should reorder with that entry first\n    strategy.success(strategy.ldapURLSet.getInactiveUrls().iterator().next());\n    Assert.assertEquals(\n      StreamSupport.stream(strategy.spliterator(), false).collect(Collectors.toList()),\n      Arrays.asList(\n        new LdapURL(\"ldap://directory-1.ldaptive.org:389\"),\n        new LdapURL(\"ldap://directory-2.ldaptive.org:389\"),\n        new LdapURL(\"ldap://directory-3.ldaptive.org:389\")));\n    Assert.assertEquals(strategy.ldapURLSet.getActiveUrls().size(), 3);\n    Assert.assertEquals(\n      strategy.ldapURLSet.getActiveUrls(),\n      Arrays.asList(\n        new LdapURL(\"ldap://directory-1.ldaptive.org:389\"),\n        new LdapURL(\"ldap://directory-2.ldaptive.org:389\"),\n        new LdapURL(\"ldap://directory-3.ldaptive.org:389\")));\n    Assert.assertEquals(strategy.ldapURLSet.getInactiveUrls().size(), 0);\n  }", "signature": "void firstUrlInactive()", "full_signature": "@Test(groups = \"conn\") public void firstUrlInactive()", "class_method_signature": "DnsSrvConnectionStrategyTest.firstUrlInactive()", "testcase": true, "constructor": false, "invocations": ["setLdapUrl", "setConnectionStrategy", "setOpenPredicate", "contains", "getHostname", "setTestPredicate", "assertEquals", "size", "getActiveUrls", "assertEquals", "getActiveUrls", "asList", "assertEquals", "size", "getInactiveUrls", "open", "assertEquals", "size", "getActiveUrls", "assertEquals", "getActiveUrls", "asList", "assertEquals", "size", "getInactiveUrls", "assertEquals", "next", "iterator", "getInactiveUrls", "assertEquals", "collect", "stream", "spliterator", "toList", "asList", "assertEquals", "size", "getActiveUrls", "assertEquals", "getActiveUrls", "asList", "assertEquals", "size", "getInactiveUrls", "assertEquals", "next", "iterator", "getInactiveUrls", "success", "next", "iterator", "getInactiveUrls", "assertEquals", "collect", "stream", "spliterator", "toList", "asList", "assertEquals", "size", "getActiveUrls", "assertEquals", "getActiveUrls", "asList", "assertEquals", "size", "getInactiveUrls"]}, "focal_class": {"identifier": "DnsSrvConnectionStrategy", "superclass": "extends AbstractConnectionStrategy", "interfaces": "", "fields": [{"original_string": "protected static final Duration DEFAULT_TTL = Duration.ofHours(6);", "modifier": "protected static final", "type": "Duration", "declarator": "DEFAULT_TTL = Duration.ofHours(6)", "var_name": "DEFAULT_TTL"}, {"original_string": "private final DNSContextFactory dnsContextFactory;", "modifier": "private final", "type": "DNSContextFactory", "declarator": "dnsContextFactory", "var_name": "dnsContextFactory"}, {"original_string": "private final Duration srvTtl;", "modifier": "private final", "type": "Duration", "declarator": "srvTtl", "var_name": "srvTtl"}, {"original_string": "private final boolean useSSL;", "modifier": "private final", "type": "boolean", "declarator": "useSSL", "var_name": "useSSL"}, {"original_string": "private String ldapUrls;", "modifier": "private", "type": "String", "declarator": "ldapUrls", "var_name": "ldapUrls"}, {"original_string": "private Map<SRVDNSResolver, String> dnsResolvers;", "modifier": "private", "type": "Map<SRVDNSResolver, String>", "declarator": "dnsResolvers", "var_name": "dnsResolvers"}, {"original_string": "private Instant expirationTime;", "modifier": "private", "type": "Instant", "declarator": "expirationTime", "var_name": "expirationTime"}], "methods": [{"identifier": "DnsSrvConnectionStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " DnsSrvConnectionStrategy()", "full_signature": "public  DnsSrvConnectionStrategy()", "class_method_signature": "DnsSrvConnectionStrategy.DnsSrvConnectionStrategy()", "testcase": false, "constructor": true}, {"identifier": "DnsSrvConnectionStrategy", "parameters": "(final Duration ttl)", "modifiers": "public", "return": "", "signature": " DnsSrvConnectionStrategy(final Duration ttl)", "full_signature": "public  DnsSrvConnectionStrategy(final Duration ttl)", "class_method_signature": "DnsSrvConnectionStrategy.DnsSrvConnectionStrategy(final Duration ttl)", "testcase": false, "constructor": true}, {"identifier": "DnsSrvConnectionStrategy", "parameters": "(final DNSContextFactory factory)", "modifiers": "public", "return": "", "signature": " DnsSrvConnectionStrategy(final DNSContextFactory factory)", "full_signature": "public  DnsSrvConnectionStrategy(final DNSContextFactory factory)", "class_method_signature": "DnsSrvConnectionStrategy.DnsSrvConnectionStrategy(final DNSContextFactory factory)", "testcase": false, "constructor": true}, {"identifier": "DnsSrvConnectionStrategy", "parameters": "(final DNSContextFactory factory, final Duration ttl)", "modifiers": "public", "return": "", "signature": " DnsSrvConnectionStrategy(final DNSContextFactory factory, final Duration ttl)", "full_signature": "public  DnsSrvConnectionStrategy(final DNSContextFactory factory, final Duration ttl)", "class_method_signature": "DnsSrvConnectionStrategy.DnsSrvConnectionStrategy(final DNSContextFactory factory, final Duration ttl)", "testcase": false, "constructor": true}, {"identifier": "DnsSrvConnectionStrategy", "parameters": "(final DNSContextFactory factory, final Duration ttl, final boolean ssl)", "modifiers": "public", "return": "", "signature": " DnsSrvConnectionStrategy(final DNSContextFactory factory, final Duration ttl, final boolean ssl)", "full_signature": "public  DnsSrvConnectionStrategy(final DNSContextFactory factory, final Duration ttl, final boolean ssl)", "class_method_signature": "DnsSrvConnectionStrategy.DnsSrvConnectionStrategy(final DNSContextFactory factory, final Duration ttl, final boolean ssl)", "testcase": false, "constructor": true}, {"identifier": "populate", "parameters": "(final String urls, final LdapURLSet urlSet)", "modifiers": "@Override public", "return": "void", "signature": "void populate(final String urls, final LdapURLSet urlSet)", "full_signature": "@Override public void populate(final String urls, final LdapURLSet urlSet)", "class_method_signature": "DnsSrvConnectionStrategy.populate(final String urls, final LdapURLSet urlSet)", "testcase": false, "constructor": false}, {"identifier": "readSrvRecords", "parameters": "(final String urls)", "modifiers": "protected", "return": "Set<SRVRecord>", "signature": "Set<SRVRecord> readSrvRecords(final String urls)", "full_signature": "protected Set<SRVRecord> readSrvRecords(final String urls)", "class_method_signature": "DnsSrvConnectionStrategy.readSrvRecords(final String urls)", "testcase": false, "constructor": false}, {"identifier": "parseDnsUrl", "parameters": "(final String url)", "modifiers": "protected", "return": "String[]", "signature": "String[] parseDnsUrl(final String url)", "full_signature": "protected String[] parseDnsUrl(final String url)", "class_method_signature": "DnsSrvConnectionStrategy.parseDnsUrl(final String url)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public synchronized", "return": "Iterator<LdapURL>", "signature": "Iterator<LdapURL> iterator()", "full_signature": "@Override public synchronized Iterator<LdapURL> iterator()", "class_method_signature": "DnsSrvConnectionStrategy.iterator()", "testcase": false, "constructor": false}, {"identifier": "retrieveDNSRecords", "parameters": "()", "modifiers": "protected", "return": "Set<SRVRecord>", "signature": "Set<SRVRecord> retrieveDNSRecords()", "full_signature": "protected Set<SRVRecord> retrieveDNSRecords()", "class_method_signature": "DnsSrvConnectionStrategy.retrieveDNSRecords()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/DnsSrvConnectionStrategy.java"}, "focal_method": {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public synchronized", "return": "Iterator<LdapURL>", "body": "@Override\n  public synchronized Iterator<LdapURL> iterator()\n  {\n    if (!isInitialized()) {\n      throw new IllegalStateException(\"Strategy is not initialized\");\n    }\n    if (Instant.now().isAfter(expirationTime)) {\n      populate(ldapUrls, ldapURLSet);\n    }\n    return new DefaultLdapURLIterator(ldapURLSet.getUrls());\n  }", "signature": "Iterator<LdapURL> iterator()", "full_signature": "@Override public synchronized Iterator<LdapURL> iterator()", "class_method_signature": "DnsSrvConnectionStrategy.iterator()", "testcase": false, "constructor": false, "invocations": ["isInitialized", "isAfter", "now", "populate", "getUrls"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}