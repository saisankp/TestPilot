{"test_class": {"identifier": "LiveDataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PublicLiveData<String> mLiveData;", "modifier": "private", "type": "PublicLiveData<String>", "declarator": "mLiveData", "var_name": "mLiveData"}, {"original_string": "private LifecycleOwner mOwner;", "modifier": "private", "type": "LifecycleOwner", "declarator": "mOwner", "var_name": "mOwner"}, {"original_string": "private LifecycleRegistry mRegistry;", "modifier": "private", "type": "LifecycleRegistry", "declarator": "mRegistry", "var_name": "mRegistry"}, {"original_string": "private MethodExec mActiveObserversChanged;", "modifier": "private", "type": "MethodExec", "declarator": "mActiveObserversChanged", "var_name": "mActiveObserversChanged"}, {"original_string": "private boolean mInObserver;", "modifier": "private", "type": "boolean", "declarator": "mInObserver", "var_name": "mInObserver"}], "file": "lifecycle/extensions/src/test/java/android/arch/lifecycle/LiveDataTest.java"}, "test_case": {"identifier": "testStopObservingOwner_onDestroy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStopObservingOwner_onDestroy() {\n        Observer<String> observer = (Observer<String>) mock(Observer.class);\n        mRegistry.handleLifecycleEvent(ON_CREATE);\n        mLiveData.observe(mOwner, observer);\n        assertThat(mRegistry.getObserverCount(), is(1));\n        mRegistry.handleLifecycleEvent(ON_DESTROY);\n        assertThat(mRegistry.getObserverCount(), is(0));\n    }", "signature": "void testStopObservingOwner_onDestroy()", "full_signature": "@Test public void testStopObservingOwner_onDestroy()", "class_method_signature": "LiveDataTest.testStopObservingOwner_onDestroy()", "testcase": true, "constructor": false, "invocations": ["mock", "handleLifecycleEvent", "observe", "assertThat", "getObserverCount", "is", "handleLifecycleEvent", "assertThat", "getObserverCount", "is"]}, "focal_class": {"identifier": "LiveData", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Object mDataLock = new Object();", "modifier": "private final", "type": "Object", "declarator": "mDataLock = new Object()", "var_name": "mDataLock"}, {"original_string": "static final int START_VERSION = -1;", "modifier": "static final", "type": "int", "declarator": "START_VERSION = -1", "var_name": "START_VERSION"}, {"original_string": "private static final Object NOT_SET = new Object();", "modifier": "private static final", "type": "Object", "declarator": "NOT_SET = new Object()", "var_name": "NOT_SET"}, {"original_string": "private static final LifecycleOwner ALWAYS_ON = new LifecycleOwner() {\n\n        private LifecycleRegistry mRegistry = init();\n\n        private LifecycleRegistry init() {\n            LifecycleRegistry registry = new LifecycleRegistry(this);\n            registry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);\n            registry.handleLifecycleEvent(Lifecycle.Event.ON_START);\n            registry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);\n            return registry;\n        }\n\n        @Override\n        public Lifecycle getLifecycle() {\n            return mRegistry;\n        }\n    };", "modifier": "private static final", "type": "LifecycleOwner", "declarator": "ALWAYS_ON = new LifecycleOwner() {\n\n        private LifecycleRegistry mRegistry = init();\n\n        private LifecycleRegistry init() {\n            LifecycleRegistry registry = new LifecycleRegistry(this);\n            registry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);\n            registry.handleLifecycleEvent(Lifecycle.Event.ON_START);\n            registry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);\n            return registry;\n        }\n\n        @Override\n        public Lifecycle getLifecycle() {\n            return mRegistry;\n        }\n    }", "var_name": "ALWAYS_ON"}, {"original_string": "private SafeIterableMap<Observer<T>, LifecycleBoundObserver> mObservers =\n            new SafeIterableMap<>();", "modifier": "private", "type": "SafeIterableMap<Observer<T>, LifecycleBoundObserver>", "declarator": "mObservers =\n            new SafeIterableMap<>()", "var_name": "mObservers"}, {"original_string": "private int mActiveCount = 0;", "modifier": "private", "type": "int", "declarator": "mActiveCount = 0", "var_name": "mActiveCount"}, {"original_string": "private volatile Object mData = NOT_SET;", "modifier": "private volatile", "type": "Object", "declarator": "mData = NOT_SET", "var_name": "mData"}, {"original_string": "private volatile Object mPendingData = NOT_SET;", "modifier": "private volatile", "type": "Object", "declarator": "mPendingData = NOT_SET", "var_name": "mPendingData"}, {"original_string": "private int mVersion = START_VERSION;", "modifier": "private", "type": "int", "declarator": "mVersion = START_VERSION", "var_name": "mVersion"}, {"original_string": "private boolean mDispatchingValue;", "modifier": "private", "type": "boolean", "declarator": "mDispatchingValue", "var_name": "mDispatchingValue"}, {"original_string": "@SuppressWarnings(\"FieldCanBeLocal\")\n    private boolean mDispatchInvalidated;", "modifier": "@SuppressWarnings(\"FieldCanBeLocal\")\n    private", "type": "boolean", "declarator": "mDispatchInvalidated", "var_name": "mDispatchInvalidated"}, {"original_string": "private final Runnable mPostValueRunnable = new Runnable() {\n        @Override\n        public void run() {\n            Object newValue;\n            synchronized (mDataLock) {\n                newValue = mPendingData;\n                mPendingData = NOT_SET;\n            }\n            //noinspection unchecked\n            setValue((T) newValue);\n        }\n    };", "modifier": "private final", "type": "Runnable", "declarator": "mPostValueRunnable = new Runnable() {\n        @Override\n        public void run() {\n            Object newValue;\n            synchronized (mDataLock) {\n                newValue = mPendingData;\n                mPendingData = NOT_SET;\n            }\n            //noinspection unchecked\n            setValue((T) newValue);\n        }\n    }", "var_name": "mPostValueRunnable"}], "methods": [{"identifier": "considerNotify", "parameters": "(LifecycleBoundObserver observer)", "modifiers": "private", "return": "void", "signature": "void considerNotify(LifecycleBoundObserver observer)", "full_signature": "private void considerNotify(LifecycleBoundObserver observer)", "class_method_signature": "LiveData.considerNotify(LifecycleBoundObserver observer)", "testcase": false, "constructor": false}, {"identifier": "dispatchingValue", "parameters": "(@Nullable LifecycleBoundObserver initiator)", "modifiers": "private", "return": "void", "signature": "void dispatchingValue(@Nullable LifecycleBoundObserver initiator)", "full_signature": "private void dispatchingValue(@Nullable LifecycleBoundObserver initiator)", "class_method_signature": "LiveData.dispatchingValue(@Nullable LifecycleBoundObserver initiator)", "testcase": false, "constructor": false}, {"identifier": "observe", "parameters": "(LifecycleOwner owner, Observer<T> observer)", "modifiers": "@MainThread public", "return": "void", "signature": "void observe(LifecycleOwner owner, Observer<T> observer)", "full_signature": "@MainThread public void observe(LifecycleOwner owner, Observer<T> observer)", "class_method_signature": "LiveData.observe(LifecycleOwner owner, Observer<T> observer)", "testcase": false, "constructor": false}, {"identifier": "observeForever", "parameters": "(Observer<T> observer)", "modifiers": "@MainThread public", "return": "void", "signature": "void observeForever(Observer<T> observer)", "full_signature": "@MainThread public void observeForever(Observer<T> observer)", "class_method_signature": "LiveData.observeForever(Observer<T> observer)", "testcase": false, "constructor": false}, {"identifier": "removeObserver", "parameters": "(final Observer<T> observer)", "modifiers": "@MainThread public", "return": "void", "signature": "void removeObserver(final Observer<T> observer)", "full_signature": "@MainThread public void removeObserver(final Observer<T> observer)", "class_method_signature": "LiveData.removeObserver(final Observer<T> observer)", "testcase": false, "constructor": false}, {"identifier": "removeObservers", "parameters": "(final LifecycleOwner owner)", "modifiers": "@MainThread public", "return": "void", "signature": "void removeObservers(final LifecycleOwner owner)", "full_signature": "@MainThread public void removeObservers(final LifecycleOwner owner)", "class_method_signature": "LiveData.removeObservers(final LifecycleOwner owner)", "testcase": false, "constructor": false}, {"identifier": "postValue", "parameters": "(T value)", "modifiers": "protected", "return": "void", "signature": "void postValue(T value)", "full_signature": "protected void postValue(T value)", "class_method_signature": "LiveData.postValue(T value)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(T value)", "modifiers": "@MainThread protected", "return": "void", "signature": "void setValue(T value)", "full_signature": "@MainThread protected void setValue(T value)", "class_method_signature": "LiveData.setValue(T value)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Nullable public", "return": "T", "signature": "T getValue()", "full_signature": "@Nullable public T getValue()", "class_method_signature": "LiveData.getValue()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getVersion()", "full_signature": " int getVersion()", "class_method_signature": "LiveData.getVersion()", "testcase": false, "constructor": false}, {"identifier": "onActive", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void onActive()", "full_signature": "protected void onActive()", "class_method_signature": "LiveData.onActive()", "testcase": false, "constructor": false}, {"identifier": "onInactive", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void onInactive()", "full_signature": "protected void onInactive()", "class_method_signature": "LiveData.onInactive()", "testcase": false, "constructor": false}, {"identifier": "hasObservers", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasObservers()", "full_signature": "public boolean hasObservers()", "class_method_signature": "LiveData.hasObservers()", "testcase": false, "constructor": false}, {"identifier": "hasActiveObservers", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasActiveObservers()", "full_signature": "public boolean hasActiveObservers()", "class_method_signature": "LiveData.hasActiveObservers()", "testcase": false, "constructor": false}, {"identifier": "isActiveState", "parameters": "(State state)", "modifiers": "static", "return": "boolean", "signature": "boolean isActiveState(State state)", "full_signature": "static boolean isActiveState(State state)", "class_method_signature": "LiveData.isActiveState(State state)", "testcase": false, "constructor": false}, {"identifier": "assertMainThread", "parameters": "(String methodName)", "modifiers": "private", "return": "void", "signature": "void assertMainThread(String methodName)", "full_signature": "private void assertMainThread(String methodName)", "class_method_signature": "LiveData.assertMainThread(String methodName)", "testcase": false, "constructor": false}], "file": "lifecycle/extensions/src/main/java/android/arch/lifecycle/LiveData.java"}, "focal_method": {"identifier": "observe", "parameters": "(LifecycleOwner owner, Observer<T> observer)", "modifiers": "@MainThread public", "return": "void", "body": "@MainThread\n    public void observe(LifecycleOwner owner, Observer<T> observer) {\n        if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n            // ignore\n            return;\n        }\n        LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer);\n        LifecycleBoundObserver existing = mObservers.putIfAbsent(observer, wrapper);\n        if (existing != null && existing.owner != wrapper.owner) {\n            throw new IllegalArgumentException(\"Cannot add the same observer\"\n                    + \" with different lifecycles\");\n        }\n        if (existing != null) {\n            return;\n        }\n        owner.getLifecycle().addObserver(wrapper);\n        wrapper.activeStateChanged(isActiveState(owner.getLifecycle().getCurrentState()));\n    }", "signature": "void observe(LifecycleOwner owner, Observer<T> observer)", "full_signature": "@MainThread public void observe(LifecycleOwner owner, Observer<T> observer)", "class_method_signature": "LiveData.observe(LifecycleOwner owner, Observer<T> observer)", "testcase": false, "constructor": false, "invocations": ["getCurrentState", "getLifecycle", "putIfAbsent", "addObserver", "getLifecycle", "activeStateChanged", "isActiveState", "getCurrentState", "getLifecycle"]}, "repository": {"repo_id": 104025215, "url": "https://github.com/Rayduh/support", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 8, "size": 253405, "license": "licensed"}}