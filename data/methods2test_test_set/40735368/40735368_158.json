{"test_class": {"identifier": "EmfAppSchemaReaderTest", "superclass": "extends AppSchemaTestSupport", "interfaces": "", "fields": [{"original_string": "private static final String NS_URI = \"http://online.socialchange.net.au\";", "modifier": "private static final", "type": "String", "declarator": "NS_URI = \"http://online.socialchange.net.au\"", "var_name": "NS_URI"}], "file": "modules/extension/app-schema/app-schema/src/test/java/org/geotools/data/complex/config/EmfAppSchemaReaderTest.java"}, "test_case": {"identifier": "testComplexFeatureType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testComplexFeatureType() throws Exception {\n        String res = \"/test-data/complexFeature.xsd\";\n        URL resource = getClass().getResource(res);\n        SchemaIndex schemaIndex = EmfAppSchemaReader.newInstance().parse(resource);\n        \n        AppSchemaFeatureTypeRegistry typeRegistry = new AppSchemaFeatureTypeRegistry();\n        try {\n            typeRegistry.addSchemas(schemaIndex);\n            \n            Name typeName = Types.typeName(NS_URI, \"wq_plus_Type\");\n            AttributeType type = (AttributeType) typeRegistry.getAttributeType(typeName);\n            Assert.assertTrue(type instanceof FeatureType);\n            Assert.assertFalse(type instanceof SimpleFeatureType);\n            Assert.assertEquals(typeName, type.getName());\n            Assert.assertTrue(type.getUserData().get(XSDTypeDefinition.class) instanceof XSDComplexTypeDefinition);\n    \n            FeatureType wq_plus_Type = (FeatureType) type;\n    \n            // I do not think types have default geometries any more.\n            // assertNotNull(wq_plus_Type.getDefaultGeometry());\n            Assert.assertNotNull(wq_plus_Type.getSuper());\n            typeName = Types.typeName(GML.NAMESPACE, GML.AbstractFeatureType.getLocalPart());\n            Assert.assertEquals(typeName, wq_plus_Type.getSuper().getName());\n            Assert.assertNotNull(wq_plus_Type.getDescriptors());\n            Assert.assertEquals(8, ((ComplexFeatureTypeImpl) wq_plus_Type).getTypeDescriptors().size());\n    \n            Name name = Types.typeName(NS_URI, \"wq_plus\");\n            AttributeDescriptor wqPlusDescriptor = typeRegistry.getDescriptor(name, null);\n            Assert.assertNotNull(wqPlusDescriptor);\n            Assert.assertEquals(name, wqPlusDescriptor.getName());\n            Assert.assertSame(wq_plus_Type, wqPlusDescriptor.getType());\n            Assert.assertTrue(wqPlusDescriptor.getUserData().get(XSDElementDeclaration.class) instanceof XSDElementDeclaration);\n    \n            typeName = Types.typeName(NS_URI, \"measurementType\");\n            type = typeRegistry.getAttributeType(typeName);\n            Assert.assertTrue(type instanceof ComplexType);\n            Assert.assertFalse(type instanceof FeatureType);\n            Assert.assertTrue(type.getUserData().get(XSDTypeDefinition.class) instanceof XSDComplexTypeDefinition);\n    \n            ComplexType measurementType = (ComplexType) type;\n            Assert.assertEquals(typeName, measurementType.getName());\n            Assert.assertTrue(measurementType.isIdentified());\n            Assert.assertFalse(measurementType.isAbstract());\n            Assert.assertEquals(2, measurementType.getDescriptors().size());\n    \n            name = Types.typeName(NS_URI, \"measurement\");\n            AttributeDescriptor descriptor;\n            descriptor = (AttributeDescriptor) Types.descriptor(wq_plus_Type, name);\n            Assert.assertNotNull(descriptor);\n            Assert.assertEquals(name, descriptor.getName());\n            Assert.assertNotNull(descriptor.getType());\n            Assert.assertSame(measurementType, descriptor.getType());\n            Assert.assertEquals(0, descriptor.getMinOccurs());\n            Assert.assertEquals(Integer.MAX_VALUE, descriptor.getMaxOccurs());\n            Assert.assertTrue(descriptor.getUserData().get(XSDElementDeclaration.class) instanceof XSDElementDeclaration);\n    \n            name = Types.typeName(NS_URI, \"result\");\n            descriptor = (AttributeDescriptor) Types.descriptor(measurementType, name);\n            typeName = Types.typeName(XS.NAMESPACE, XS.FLOAT.getLocalPart());\n            assertSimpleAttribute(descriptor, name, typeName, Float.class, 1, 1);\n    \n            name = Types.typeName(NS_URI, \"determinand_description\");\n            descriptor = (AttributeDescriptor) Types.descriptor(measurementType, name);\n            typeName = Types.typeName(XS.NAMESPACE, XS.STRING.getLocalPart());\n            assertSimpleAttribute(descriptor, name, typeName, String.class, 1, 1);\n    \n            name = Types.typeName(NS_URI, \"the_geom\");\n            descriptor = (AttributeDescriptor) Types.descriptor(wq_plus_Type, name);\n            typeName = Types.typeName(GML.NAMESPACE, GML.PointPropertyType.getLocalPart());\n            assertSimpleAttribute(descriptor, name, typeName, Point.class, 1, 1);\n    \n            name = Types.typeName(NS_URI, \"sitename\");\n            descriptor = (AttributeDescriptor) Types.descriptor(wq_plus_Type, name);\n            typeName = Types.typeName(XS.NAMESPACE, XS.STRING.getLocalPart());\n            assertSimpleAttribute(descriptor, name, typeName, String.class, 1, Integer.MAX_VALUE);\n        }\n        finally {\n            typeRegistry.disposeSchemaIndexes();\n        }\n    }", "signature": "void testComplexFeatureType()", "full_signature": "@Test public void testComplexFeatureType()", "class_method_signature": "EmfAppSchemaReaderTest.testComplexFeatureType()", "testcase": true, "constructor": false, "invocations": ["getResource", "getClass", "parse", "newInstance", "addSchemas", "typeName", "getAttributeType", "assertTrue", "assertFalse", "assertEquals", "getName", "assertTrue", "get", "getUserData", "assertNotNull", "getSuper", "typeName", "getLocalPart", "assertEquals", "getName", "getSuper", "assertNotNull", "getDescriptors", "assertEquals", "size", "getTypeDescriptors", "typeName", "getDescriptor", "assertNotNull", "assertEquals", "getName", "assertSame", "getType", "assertTrue", "get", "getUserData", "typeName", "getAttributeType", "assertTrue", "assertFalse", "assertTrue", "get", "getUserData", "assertEquals", "getName", "assertTrue", "isIdentified", "assertFalse", "isAbstract", "assertEquals", "size", "getDescriptors", "typeName", "descriptor", "assertNotNull", "assertEquals", "getName", "assertNotNull", "getType", "assertSame", "getType", "assertEquals", "getMinOccurs", "assertEquals", "getMaxOccurs", "assertTrue", "get", "getUserData", "typeName", "descriptor", "typeName", "getLocalPart", "assertSimpleAttribute", "typeName", "descriptor", "typeName", "getLocalPart", "assertSimpleAttribute", "typeName", "descriptor", "typeName", "getLocalPart", "assertSimpleAttribute", "typeName", "descriptor", "typeName", "getLocalPart", "assertSimpleAttribute", "disposeSchemaIndexes"]}, "focal_class": {"identifier": "EmfAppSchemaReader", "superclass": "extends EmfComplexFeatureReader", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"serial\")\n    private static final Map<QName, Class<? extends Configuration>> SUPPORTED_GML_KNOWN_TYPE_TO_CONFIGURATION_MAP //\n    = new LinkedHashMap<QName, Class<? extends Configuration>>() {\n        {\n            // GML 3.1\n            put(GML.AbstractFeatureType, GMLConfiguration.class);\n            // GML 3.2\n            put(org.geotools.gml3.v3_2.GML.AbstractFeatureType,\n                    org.geotools.gml3.v3_2.GMLConfiguration.class);\n        }\n    };", "modifier": "@SuppressWarnings(\"serial\")\n    private static final", "type": "Map<QName, Class<? extends Configuration>>", "declarator": "SUPPORTED_GML_KNOWN_TYPE_TO_CONFIGURATION_MAP //\n    = new LinkedHashMap<QName, Class<? extends Configuration>>() {\n        {\n            // GML 3.1\n            put(GML.AbstractFeatureType, GMLConfiguration.class);\n            // GML 3.2\n            put(org.geotools.gml3.v3_2.GML.AbstractFeatureType,\n                    org.geotools.gml3.v3_2.GMLConfiguration.class);\n        }\n    }", "var_name": "SUPPORTED_GML_KNOWN_TYPE_TO_CONFIGURATION_MAP"}], "methods": [{"identifier": "EmfAppSchemaReader", "parameters": "()", "modifiers": "private", "return": "", "signature": " EmfAppSchemaReader()", "full_signature": "private  EmfAppSchemaReader()", "class_method_signature": "EmfAppSchemaReader.EmfAppSchemaReader()", "testcase": false, "constructor": true}, {"identifier": "newInstance", "parameters": "()", "modifiers": "public static", "return": "EmfAppSchemaReader", "signature": "EmfAppSchemaReader newInstance()", "full_signature": "public static EmfAppSchemaReader newInstance()", "class_method_signature": "EmfAppSchemaReader.newInstance()", "testcase": false, "constructor": false}, {"identifier": "findGmlConfiguration", "parameters": "(AppSchemaConfiguration configuration)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration findGmlConfiguration(AppSchemaConfiguration configuration)", "full_signature": "public static Configuration findGmlConfiguration(AppSchemaConfiguration configuration)", "class_method_signature": "EmfAppSchemaReader.findGmlConfiguration(AppSchemaConfiguration configuration)", "testcase": false, "constructor": false}], "file": "modules/extension/app-schema/app-schema/src/main/java/org/geotools/data/complex/config/EmfAppSchemaReader.java"}, "focal_method": {"identifier": "newInstance", "parameters": "()", "modifiers": "public static", "return": "EmfAppSchemaReader", "body": "public static EmfAppSchemaReader newInstance() {\n        return new EmfAppSchemaReader();\n    }", "signature": "EmfAppSchemaReader newInstance()", "full_signature": "public static EmfAppSchemaReader newInstance()", "class_method_signature": "EmfAppSchemaReader.newInstance()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}