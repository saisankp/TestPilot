{"test_class": {"identifier": "PlanetConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private RestTemplate restTemplate;", "modifier": "@Mock\n    private", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}, {"original_string": "@Autowired\n    @InjectMocks\n    private PlanetConverter converter;", "modifier": "@Autowired\n    @InjectMocks\n    private", "type": "PlanetConverter", "declarator": "converter", "var_name": "converter"}, {"original_string": "private PeopleDTO lukeSkywalker = fromJson(\"luke-skywalker\", PeopleDTO.class);", "modifier": "private", "type": "PeopleDTO", "declarator": "lukeSkywalker = fromJson(\"luke-skywalker\", PeopleDTO.class)", "var_name": "lukeSkywalker"}, {"original_string": "private FilmDTO attackOfTheClones = fromJson(\"attack-of-the-clones\", FilmDTO.class);", "modifier": "private", "type": "FilmDTO", "declarator": "attackOfTheClones = fromJson(\"attack-of-the-clones\", FilmDTO.class)", "var_name": "attackOfTheClones"}, {"original_string": "private Planet tatooine = fromJson(\"tatooine\", Planet.class);", "modifier": "private", "type": "Planet", "declarator": "tatooine = fromJson(\"tatooine\", Planet.class)", "var_name": "tatooine"}], "file": "snapshot-matcher-example/src/test/java/com/zenika/snapshotmatcherexample/starwars/PlanetConverterTest.java"}, "test_case": {"identifier": "converterTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void converterTest() {\n        PlanetDTO planet = converter.convertPlanet(tatooine);\n\n        assertThat(planet, matchesSnapshot());\n    }", "signature": "void converterTest()", "full_signature": "@Test public void converterTest()", "class_method_signature": "PlanetConverterTest.converterTest()", "testcase": true, "constructor": false, "invocations": ["convertPlanet", "assertThat", "matchesSnapshot"]}, "focal_class": {"identifier": "PlanetConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ObjectMapper objectMapper;", "modifier": "@Autowired\n    private", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "@Autowired\n    private RestTemplate restTemplate;", "modifier": "@Autowired\n    private", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}], "methods": [{"identifier": "convertPlanet", "parameters": "(Planet planet)", "modifiers": "public", "return": "PlanetDTO", "signature": "PlanetDTO convertPlanet(Planet planet)", "full_signature": "public PlanetDTO convertPlanet(Planet planet)", "class_method_signature": "PlanetConverter.convertPlanet(Planet planet)", "testcase": false, "constructor": false}], "file": "snapshot-matcher-example/src/main/java/com/zenika/snapshotmatcherexample/starwars/PlanetConverter.java"}, "focal_method": {"identifier": "convertPlanet", "parameters": "(Planet planet)", "modifiers": "public", "return": "PlanetDTO", "body": "public PlanetDTO convertPlanet(Planet planet) {\n        PlanetDTO dto = objectMapper.convertValue(planet, PlanetDTO.class);\n\n        dto.films = planet.filmsUrls.stream()\n                .map(filmUrl -> restTemplate.getForObject(filmUrl, FilmDTO.class))\n                .collect(Collectors.toList());\n\n        dto.residents = planet.residentsUrls.stream()\n                .map(filmUrl -> restTemplate.getForObject(filmUrl, PeopleDTO.class))\n                .collect(Collectors.toList());\n\n        return dto;\n    }", "signature": "PlanetDTO convertPlanet(Planet planet)", "full_signature": "public PlanetDTO convertPlanet(Planet planet)", "class_method_signature": "PlanetConverter.convertPlanet(Planet planet)", "testcase": false, "constructor": false, "invocations": ["convertValue", "collect", "map", "stream", "getForObject", "toList", "collect", "map", "stream", "getForObject", "toList"]}, "repository": {"repo_id": 118006325, "url": "https://github.com/Zenika/java-snapshot-matcher", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 11, "size": 55, "license": "licensed"}}