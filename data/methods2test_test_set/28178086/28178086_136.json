{"test_class": {"identifier": "DataSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String PNAME = \"SPREADSHEET\", VERSION = \"20111209\",\n            K1 = \"file\", V1 = \"c:\\\\data.txt\",\n            K2 = \"locale\", V2 = \"fr_BE\",\n            K3 = \"datePattern\", V3 = \"yyyy-MM-dd\";", "modifier": "static final", "type": "String", "declarator": "PNAME = \"SPREADSHEET\"", "var_name": "PNAME"}, {"original_string": "static final ImmutableSortedMap<String, String> P0 = ImmutableSortedMap.of();", "modifier": "static final", "type": "ImmutableSortedMap<String, String>", "declarator": "P0 = ImmutableSortedMap.of()", "var_name": "P0"}, {"original_string": "static final ImmutableSortedMap<String, String> P1 = ImmutableSortedMap.of(K1, V1);", "modifier": "static final", "type": "ImmutableSortedMap<String, String>", "declarator": "P1 = ImmutableSortedMap.of(K1, V1)", "var_name": "P1"}, {"original_string": "static final ImmutableSortedMap<String, String> P3 = ImmutableSortedMap.of(K1, V1, K2, V2, K3, V3);", "modifier": "static final", "type": "ImmutableSortedMap<String, String>", "declarator": "P3 = ImmutableSortedMap.of(K1, V1, K2, V2, K3, V3)", "var_name": "P3"}, {"original_string": "static final DataSource ZERO = new DataSource(PNAME, VERSION, P0);", "modifier": "static final", "type": "DataSource", "declarator": "ZERO = new DataSource(PNAME, VERSION, P0)", "var_name": "ZERO"}, {"original_string": "static final DataSource ONE = new DataSource(PNAME, VERSION, P1);", "modifier": "static final", "type": "DataSource", "declarator": "ONE = new DataSource(PNAME, VERSION, P1)", "var_name": "ONE"}], "file": "jtss/src/test/java/ec/tss/tsproviders/DataSourceTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        assertThat(newSample())\n                .isEqualTo(newSample())\n                .isNotSameAs(newSample())\n                .isNotEqualTo(ZERO)\n                .isEqualTo(new DataSource(PNAME, VERSION, ImmutableSortedMap.of(K3, V3, K2, V2, K1, V1)));\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "DataSourceTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "isNotEqualTo", "isNotSameAs", "isEqualTo", "assertThat", "newSample", "newSample", "newSample", "of"]}, "focal_class": {"identifier": "DataSource", "superclass": "", "interfaces": "implements IConfig, Serializable", "fields": [{"original_string": "private final String providerName;", "modifier": "private final", "type": "String", "declarator": "providerName", "var_name": "providerName"}, {"original_string": "private final String version;", "modifier": "private final", "type": "String", "declarator": "version", "var_name": "version"}, {"original_string": "private final ImmutableSortedMap<String, String> params;", "modifier": "private final", "type": "ImmutableSortedMap<String, String>", "declarator": "params", "var_name": "params"}, {"original_string": "private static final ThreadLocal<Xml> XML = ThreadLocal.withInitial(Xml::new);", "modifier": "private static final", "type": "ThreadLocal<Xml>", "declarator": "XML = ThreadLocal.withInitial(Xml::new)", "var_name": "XML"}, {"original_string": "private static final String SCHEME = \"demetra\";", "modifier": "private static final", "type": "String", "declarator": "SCHEME = \"demetra\"", "var_name": "SCHEME"}, {"original_string": "private static final String HOST = \"tsprovider\";", "modifier": "private static final", "type": "String", "declarator": "HOST = \"tsprovider\"", "var_name": "HOST"}, {"original_string": "private static final Parsers.Parser<DataSource> URI_PARSER = new FailSafeParser<DataSource>() {\n        @Override\n        protected DataSource doParse(CharSequence input) throws Exception {\n            URI uri = new URI(input.toString());\n            if (!SCHEME.equals(uri.getScheme()) || !HOST.equals(uri.getHost())) {\n                return null;\n            }\n            String[] path = UriBuilder.getPathArray(uri, 2);\n            if (path == null) {\n                return null;\n            }\n            Map<String, String> query = UriBuilder.getQueryMap(uri);\n            if (query == null) {\n                return null;\n            }\n            return new DataSource(path[0], path[1], Util.toImmutable(query));\n        }\n    };", "modifier": "private static final", "type": "Parsers.Parser<DataSource>", "declarator": "URI_PARSER = new FailSafeParser<DataSource>() {\n        @Override\n        protected DataSource doParse(CharSequence input) throws Exception {\n            URI uri = new URI(input.toString());\n            if (!SCHEME.equals(uri.getScheme()) || !HOST.equals(uri.getHost())) {\n                return null;\n            }\n            String[] path = UriBuilder.getPathArray(uri, 2);\n            if (path == null) {\n                return null;\n            }\n            Map<String, String> query = UriBuilder.getQueryMap(uri);\n            if (query == null) {\n                return null;\n            }\n            return new DataSource(path[0], path[1], Util.toImmutable(query));\n        }\n    }", "var_name": "URI_PARSER"}, {"original_string": "private static final Formatters.Formatter<DataSource> URI_FORMATTER = Formatters.wrap(DataSource::formatAsUri);", "modifier": "private static final", "type": "Formatters.Formatter<DataSource>", "declarator": "URI_FORMATTER = Formatters.wrap(DataSource::formatAsUri)", "var_name": "URI_FORMATTER"}], "methods": [{"identifier": "DataSource", "parameters": "(@NonNull String providerName, @NonNull String version, @NonNull ImmutableSortedMap<String, String> params)", "modifiers": "@VisibleForTesting", "return": "", "signature": " DataSource(@NonNull String providerName, @NonNull String version, @NonNull ImmutableSortedMap<String, String> params)", "full_signature": "@VisibleForTesting  DataSource(@NonNull String providerName, @NonNull String version, @NonNull ImmutableSortedMap<String, String> params)", "class_method_signature": "DataSource.DataSource(@NonNull String providerName, @NonNull String version, @NonNull ImmutableSortedMap<String, String> params)", "testcase": false, "constructor": true}, {"identifier": "getProviderName", "parameters": "()", "modifiers": "@NonNull public", "return": "String", "signature": "String getProviderName()", "full_signature": "@NonNull public String getProviderName()", "class_method_signature": "DataSource.getProviderName()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@NonNull public", "return": "String", "signature": "String getVersion()", "full_signature": "@NonNull public String getVersion()", "class_method_signature": "DataSource.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getParams", "parameters": "()", "modifiers": "@Override public", "return": "SortedMap<String, String>", "signature": "SortedMap<String, String> getParams()", "full_signature": "@Override public SortedMap<String, String> getParams()", "class_method_signature": "DataSource.getParams()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DataSource.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(DataSource that)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(DataSource that)", "full_signature": "private boolean equals(DataSource that)", "class_method_signature": "DataSource.equals(DataSource that)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DataSource.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DataSource.toString()", "testcase": false, "constructor": false}, {"identifier": "toBuilder", "parameters": "()", "modifiers": "@NonNull public", "return": "Builder", "signature": "Builder toBuilder()", "full_signature": "@NonNull public Builder toBuilder()", "class_method_signature": "DataSource.toBuilder()", "testcase": false, "constructor": false}, {"identifier": "toBean", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "DataSourceBean", "signature": "DataSourceBean toBean()", "full_signature": "@VisibleForTesting DataSourceBean toBean()", "class_method_signature": "DataSource.toBean()", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(@NonNull String providerName, @NonNull String version)", "modifiers": "@NonNull public static", "return": "DataSource", "signature": "DataSource of(@NonNull String providerName, @NonNull String version)", "full_signature": "@NonNull public static DataSource of(@NonNull String providerName, @NonNull String version)", "class_method_signature": "DataSource.of(@NonNull String providerName, @NonNull String version)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(@NonNull String providerName, @NonNull String version, @NonNull String key, @NonNull String value)", "modifiers": "@NonNull public static", "return": "DataSource", "signature": "DataSource of(@NonNull String providerName, @NonNull String version, @NonNull String key, @NonNull String value)", "full_signature": "@NonNull public static DataSource of(@NonNull String providerName, @NonNull String version, @NonNull String key, @NonNull String value)", "class_method_signature": "DataSource.of(@NonNull String providerName, @NonNull String version, @NonNull String key, @NonNull String value)", "testcase": false, "constructor": false}, {"identifier": "deepCopyOf", "parameters": "(@NonNull String providerName, @NonNull String version, @NonNull Map<String, String> params)", "modifiers": "@NonNull public static", "return": "DataSource", "signature": "DataSource deepCopyOf(@NonNull String providerName, @NonNull String version, @NonNull Map<String, String> params)", "full_signature": "@NonNull public static DataSource deepCopyOf(@NonNull String providerName, @NonNull String version, @NonNull Map<String, String> params)", "class_method_signature": "DataSource.deepCopyOf(@NonNull String providerName, @NonNull String version, @NonNull Map<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "(@NonNull String providerName, @NonNull String version)", "modifiers": "@NonNull public static", "return": "Builder", "signature": "Builder builder(@NonNull String providerName, @NonNull String version)", "full_signature": "@NonNull public static Builder builder(@NonNull String providerName, @NonNull String version)", "class_method_signature": "DataSource.builder(@NonNull String providerName, @NonNull String version)", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "(@NonNull DataSource dataSource)", "modifiers": "@Deprecated @NonNull public static", "return": "Builder", "signature": "Builder builder(@NonNull DataSource dataSource)", "full_signature": "@Deprecated @NonNull public static Builder builder(@NonNull DataSource dataSource)", "class_method_signature": "DataSource.builder(@NonNull DataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "xmlFormatter", "parameters": "(boolean formattedOutput)", "modifiers": "public static", "return": "Formatters.@NonNull Formatter<DataSource>", "signature": "Formatters.@NonNull Formatter<DataSource> xmlFormatter(boolean formattedOutput)", "full_signature": "public static Formatters.@NonNull Formatter<DataSource> xmlFormatter(boolean formattedOutput)", "class_method_signature": "DataSource.xmlFormatter(boolean formattedOutput)", "testcase": false, "constructor": false}, {"identifier": "xmlParser", "parameters": "()", "modifiers": "public static", "return": "Parsers.@NonNull Parser<DataSource>", "signature": "Parsers.@NonNull Parser<DataSource> xmlParser()", "full_signature": "public static Parsers.@NonNull Parser<DataSource> xmlParser()", "class_method_signature": "DataSource.xmlParser()", "testcase": false, "constructor": false}, {"identifier": "uriFormatter", "parameters": "()", "modifiers": "public static", "return": "Formatters.@NonNull Formatter<DataSource>", "signature": "Formatters.@NonNull Formatter<DataSource> uriFormatter()", "full_signature": "public static Formatters.@NonNull Formatter<DataSource> uriFormatter()", "class_method_signature": "DataSource.uriFormatter()", "testcase": false, "constructor": false}, {"identifier": "uriParser", "parameters": "()", "modifiers": "public static", "return": "Parsers.@NonNull Parser<DataSource>", "signature": "Parsers.@NonNull Parser<DataSource> uriParser()", "full_signature": "public static Parsers.@NonNull Parser<DataSource> uriParser()", "class_method_signature": "DataSource.uriParser()", "testcase": false, "constructor": false}, {"identifier": "formatAsUri", "parameters": "(DataSource value)", "modifiers": "private static", "return": "CharSequence", "signature": "CharSequence formatAsUri(DataSource value)", "full_signature": "private static CharSequence formatAsUri(DataSource value)", "class_method_signature": "DataSource.formatAsUri(DataSource value)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/tss/tsproviders/DataSource.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object obj) {\n        return this == obj || (obj instanceof DataSource && equals((DataSource) obj));\n    }", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DataSource.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}