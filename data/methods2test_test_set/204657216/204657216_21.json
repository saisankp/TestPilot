{"test_class": {"identifier": "DifferTest", "superclass": "", "interfaces": "", "fields": [], "file": "spark-job/src/test/java/org/apache/cassandra/diff/DifferTest.java"}, "test_case": {"identifier": "rejectRangeWithStartLessThanMinMurmurToken", "parameters": "()", "modifiers": "@Test(expected = VerifyException.class) public", "return": "void", "body": "@Test(expected = VerifyException.class)\n    public void rejectRangeWithStartLessThanMinMurmurToken() {\n        Differ.validateRange(TokenHelper.MURMUR3.min().subtract(BigInteger.ONE),\n                             BigInteger.TEN,\n                             TokenHelper.MURMUR3);\n    }", "signature": "void rejectRangeWithStartLessThanMinMurmurToken()", "full_signature": "@Test(expected = VerifyException.class) public void rejectRangeWithStartLessThanMinMurmurToken()", "class_method_signature": "DifferTest.rejectRangeWithStartLessThanMinMurmurToken()", "testcase": true, "constructor": false, "invocations": ["validateRange", "subtract", "min"]}, "focal_class": {"identifier": "Differ", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(Differ.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(Differ.class)", "var_name": "logger"}, {"original_string": "private static final MetricRegistry metrics = new MetricRegistry();", "modifier": "private static final", "type": "MetricRegistry", "declarator": "metrics = new MetricRegistry()", "var_name": "metrics"}, {"original_string": "private static final int COMPARISON_THREADS = 8;", "modifier": "private static final", "type": "int", "declarator": "COMPARISON_THREADS = 8", "var_name": "COMPARISON_THREADS"}, {"original_string": "private static final ComparisonExecutor COMPARISON_EXECUTOR = ComparisonExecutor.newExecutor(COMPARISON_THREADS, metrics);", "modifier": "private static final", "type": "ComparisonExecutor", "declarator": "COMPARISON_EXECUTOR = ComparisonExecutor.newExecutor(COMPARISON_THREADS, metrics)", "var_name": "COMPARISON_EXECUTOR"}, {"original_string": "private final UUID jobId;", "modifier": "private final", "type": "UUID", "declarator": "jobId", "var_name": "jobId"}, {"original_string": "private final DiffJob.Split split;", "modifier": "private final", "type": "DiffJob.Split", "declarator": "split", "var_name": "split"}, {"original_string": "private final TokenHelper tokenHelper;", "modifier": "private final", "type": "TokenHelper", "declarator": "tokenHelper", "var_name": "tokenHelper"}, {"original_string": "private final List<KeyspaceTablePair> keyspaceTables;", "modifier": "private final", "type": "List<KeyspaceTablePair>", "declarator": "keyspaceTables", "var_name": "keyspaceTables"}, {"original_string": "private final RateLimiter rateLimiter;", "modifier": "private final", "type": "RateLimiter", "declarator": "rateLimiter", "var_name": "rateLimiter"}, {"original_string": "private final DiffJob.TrackerProvider trackerProvider;", "modifier": "private final", "type": "DiffJob.TrackerProvider", "declarator": "trackerProvider", "var_name": "trackerProvider"}, {"original_string": "private final double reverseReadProbability;", "modifier": "private final", "type": "double", "declarator": "reverseReadProbability", "var_name": "reverseReadProbability"}, {"original_string": "private final SpecificTokens specificTokens;", "modifier": "private final", "type": "SpecificTokens", "declarator": "specificTokens", "var_name": "specificTokens"}, {"original_string": "private final RetryStrategyProvider retryStrategyProvider;", "modifier": "private final", "type": "RetryStrategyProvider", "declarator": "retryStrategyProvider", "var_name": "retryStrategyProvider"}, {"original_string": "private static DiffCluster srcDiffCluster;", "modifier": "private static", "type": "DiffCluster", "declarator": "srcDiffCluster", "var_name": "srcDiffCluster"}, {"original_string": "private static DiffCluster targetDiffCluster;", "modifier": "private static", "type": "DiffCluster", "declarator": "targetDiffCluster", "var_name": "targetDiffCluster"}, {"original_string": "private static Session journalSession;", "modifier": "private static", "type": "Session", "declarator": "journalSession", "var_name": "journalSession"}], "methods": [{"identifier": "Differ", "parameters": "(JobConfiguration config,\n                  DiffJob.Params params,\n                  int perExecutorRateLimit,\n                  DiffJob.Split split,\n                  TokenHelper tokenHelper,\n                  ClusterProvider sourceProvider,\n                  ClusterProvider targetProvider,\n                  ClusterProvider metadataProvider,\n                  DiffJob.TrackerProvider trackerProvider)", "modifiers": "public", "return": "", "signature": " Differ(JobConfiguration config,\n                  DiffJob.Params params,\n                  int perExecutorRateLimit,\n                  DiffJob.Split split,\n                  TokenHelper tokenHelper,\n                  ClusterProvider sourceProvider,\n                  ClusterProvider targetProvider,\n                  ClusterProvider metadataProvider,\n                  DiffJob.TrackerProvider trackerProvider)", "full_signature": "public  Differ(JobConfiguration config,\n                  DiffJob.Params params,\n                  int perExecutorRateLimit,\n                  DiffJob.Split split,\n                  TokenHelper tokenHelper,\n                  ClusterProvider sourceProvider,\n                  ClusterProvider targetProvider,\n                  ClusterProvider metadataProvider,\n                  DiffJob.TrackerProvider trackerProvider)", "class_method_signature": "Differ.Differ(JobConfiguration config,\n                  DiffJob.Params params,\n                  int perExecutorRateLimit,\n                  DiffJob.Split split,\n                  TokenHelper tokenHelper,\n                  ClusterProvider sourceProvider,\n                  ClusterProvider targetProvider,\n                  ClusterProvider metadataProvider,\n                  DiffJob.TrackerProvider trackerProvider)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "public", "return": "Map<KeyspaceTablePair, RangeStats>", "signature": "Map<KeyspaceTablePair, RangeStats> run()", "full_signature": "public Map<KeyspaceTablePair, RangeStats> run()", "class_method_signature": "Differ.run()", "testcase": false, "constructor": false}, {"identifier": "diffTable", "parameters": "(final DiffContext context,\n                                final BiConsumer<Throwable, BigInteger> partitionErrorReporter,\n                                final BiConsumer<MismatchType, BigInteger> mismatchReporter,\n                                final BiConsumer<RangeStats, BigInteger> journal)", "modifiers": "public", "return": "RangeStats", "signature": "RangeStats diffTable(final DiffContext context,\n                                final BiConsumer<Throwable, BigInteger> partitionErrorReporter,\n                                final BiConsumer<MismatchType, BigInteger> mismatchReporter,\n                                final BiConsumer<RangeStats, BigInteger> journal)", "full_signature": "public RangeStats diffTable(final DiffContext context,\n                                final BiConsumer<Throwable, BigInteger> partitionErrorReporter,\n                                final BiConsumer<MismatchType, BigInteger> mismatchReporter,\n                                final BiConsumer<RangeStats, BigInteger> journal)", "class_method_signature": "Differ.diffTable(final DiffContext context,\n                                final BiConsumer<Throwable, BigInteger> partitionErrorReporter,\n                                final BiConsumer<MismatchType, BigInteger> mismatchReporter,\n                                final BiConsumer<RangeStats, BigInteger> journal)", "testcase": false, "constructor": false}, {"identifier": "fetchRows", "parameters": "(DiffContext context, PartitionKey key, boolean shouldReverse, DiffCluster.Type type)", "modifiers": "private", "return": "Iterator<Row>", "signature": "Iterator<Row> fetchRows(DiffContext context, PartitionKey key, boolean shouldReverse, DiffCluster.Type type)", "full_signature": "private Iterator<Row> fetchRows(DiffContext context, PartitionKey key, boolean shouldReverse, DiffCluster.Type type)", "class_method_signature": "Differ.fetchRows(DiffContext context, PartitionKey key, boolean shouldReverse, DiffCluster.Type type)", "testcase": false, "constructor": false}, {"identifier": "filterTables", "parameters": "(Iterable<KeyspaceTablePair> keyspaceTables,\n                                                                   DiffJob.Split split,\n                                                                   Function<KeyspaceTablePair, DiffJob.TaskStatus> journal,\n                                                                   boolean includeCompleted)", "modifiers": "@VisibleForTesting static", "return": "Map<KeyspaceTablePair, DiffJob.TaskStatus>", "signature": "Map<KeyspaceTablePair, DiffJob.TaskStatus> filterTables(Iterable<KeyspaceTablePair> keyspaceTables,\n                                                                   DiffJob.Split split,\n                                                                   Function<KeyspaceTablePair, DiffJob.TaskStatus> journal,\n                                                                   boolean includeCompleted)", "full_signature": "@VisibleForTesting static Map<KeyspaceTablePair, DiffJob.TaskStatus> filterTables(Iterable<KeyspaceTablePair> keyspaceTables,\n                                                                   DiffJob.Split split,\n                                                                   Function<KeyspaceTablePair, DiffJob.TaskStatus> journal,\n                                                                   boolean includeCompleted)", "class_method_signature": "Differ.filterTables(Iterable<KeyspaceTablePair> keyspaceTables,\n                                                                   DiffJob.Split split,\n                                                                   Function<KeyspaceTablePair, DiffJob.TaskStatus> journal,\n                                                                   boolean includeCompleted)", "testcase": false, "constructor": false}, {"identifier": "validateTableSpecs", "parameters": "(TableSpec source, TableSpec target)", "modifiers": "static", "return": "void", "signature": "void validateTableSpecs(TableSpec source, TableSpec target)", "full_signature": "static void validateTableSpecs(TableSpec source, TableSpec target)", "class_method_signature": "Differ.validateTableSpecs(TableSpec source, TableSpec target)", "testcase": false, "constructor": false}, {"identifier": "validateRange", "parameters": "(BigInteger start, BigInteger end, TokenHelper tokens)", "modifiers": "@VisibleForTesting static", "return": "void", "signature": "void validateRange(BigInteger start, BigInteger end, TokenHelper tokens)", "full_signature": "@VisibleForTesting static void validateRange(BigInteger start, BigInteger end, TokenHelper tokens)", "class_method_signature": "Differ.validateRange(BigInteger start, BigInteger end, TokenHelper tokens)", "testcase": false, "constructor": false}, {"identifier": "accumulate", "parameters": "(Map<KeyspaceTablePair, RangeStats> stats, Map<KeyspaceTablePair, RangeStats> otherStats)", "modifiers": "@VisibleForTesting static", "return": "Map<KeyspaceTablePair, RangeStats>", "signature": "Map<KeyspaceTablePair, RangeStats> accumulate(Map<KeyspaceTablePair, RangeStats> stats, Map<KeyspaceTablePair, RangeStats> otherStats)", "full_signature": "@VisibleForTesting static Map<KeyspaceTablePair, RangeStats> accumulate(Map<KeyspaceTablePair, RangeStats> stats, Map<KeyspaceTablePair, RangeStats> otherStats)", "class_method_signature": "Differ.accumulate(Map<KeyspaceTablePair, RangeStats> stats, Map<KeyspaceTablePair, RangeStats> otherStats)", "testcase": false, "constructor": false}, {"identifier": "updateMetrics", "parameters": "(String prefix, Map<KeyspaceTablePair, RangeStats> statsMap)", "modifiers": "private static", "return": "void", "signature": "void updateMetrics(String prefix, Map<KeyspaceTablePair, RangeStats> statsMap)", "full_signature": "private static void updateMetrics(String prefix, Map<KeyspaceTablePair, RangeStats> statsMap)", "class_method_signature": "Differ.updateMetrics(String prefix, Map<KeyspaceTablePair, RangeStats> statsMap)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void shutdown()", "full_signature": "public static void shutdown()", "class_method_signature": "Differ.shutdown()", "testcase": false, "constructor": false}], "file": "spark-job/src/main/java/org/apache/cassandra/diff/Differ.java"}, "focal_method": {"identifier": "validateRange", "parameters": "(BigInteger start, BigInteger end, TokenHelper tokens)", "modifiers": "@VisibleForTesting static", "return": "void", "body": "@VisibleForTesting\n    static void validateRange(BigInteger start, BigInteger end, TokenHelper tokens) {\n\n        Verify.verify(start != null && end != null, \"Invalid token range [%s,%s]\", start, end);\n\n        Verify.verify(start.compareTo(tokens.min()) >= 0 && end.compareTo(tokens.max()) <= 0 && start.compareTo(end) < 0,\n                      \"Invalid token range [%s,%s] for partitioner range [%s,%s]\",\n                       start, end, tokens.min(), tokens.max());\n    }", "signature": "void validateRange(BigInteger start, BigInteger end, TokenHelper tokens)", "full_signature": "@VisibleForTesting static void validateRange(BigInteger start, BigInteger end, TokenHelper tokens)", "class_method_signature": "Differ.validateRange(BigInteger start, BigInteger end, TokenHelper tokens)", "testcase": false, "constructor": false, "invocations": ["verify", "verify", "compareTo", "min", "compareTo", "max", "compareTo", "min", "max"]}, "repository": {"repo_id": 204657216, "url": "https://github.com/apache/cassandra-diff", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 112, "license": "licensed"}}