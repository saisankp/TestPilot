{"test_class": {"identifier": "DirectedGraphTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static DirectedGraph<Character> graph;", "modifier": "private static", "type": "DirectedGraph<Character>", "declarator": "graph", "var_name": "graph"}], "file": "pf4j/src/test/java/org/pf4j/util/DirectedGraphTest.java"}, "test_case": {"identifier": "topologicalSort", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void topologicalSort() {\n        List<Character> result = graph.topologicalSort();\n        List<Character> expected = Arrays.asList('D', 'E', 'A', 'B', 'F', 'G', 'C');\n        assertEquals(expected, result);\n    }", "signature": "void topologicalSort()", "full_signature": "@Test public void topologicalSort()", "class_method_signature": "DirectedGraphTest.topologicalSort()", "testcase": true, "constructor": false, "invocations": ["topologicalSort", "asList", "assertEquals"]}, "focal_class": {"identifier": "DirectedGraph", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<V, List<V>> neighbors = new HashMap<>();", "modifier": "private", "type": "Map<V, List<V>>", "declarator": "neighbors = new HashMap<>()", "var_name": "neighbors"}], "methods": [{"identifier": "addVertex", "parameters": "(V vertex)", "modifiers": "public", "return": "void", "signature": "void addVertex(V vertex)", "full_signature": "public void addVertex(V vertex)", "class_method_signature": "DirectedGraph.addVertex(V vertex)", "testcase": false, "constructor": false}, {"identifier": "containsVertex", "parameters": "(V vertex)", "modifiers": "public", "return": "boolean", "signature": "boolean containsVertex(V vertex)", "full_signature": "public boolean containsVertex(V vertex)", "class_method_signature": "DirectedGraph.containsVertex(V vertex)", "testcase": false, "constructor": false}, {"identifier": "removeVertex", "parameters": "(V vertex)", "modifiers": "public", "return": "void", "signature": "void removeVertex(V vertex)", "full_signature": "public void removeVertex(V vertex)", "class_method_signature": "DirectedGraph.removeVertex(V vertex)", "testcase": false, "constructor": false}, {"identifier": "addEdge", "parameters": "(V from, V to)", "modifiers": "public", "return": "void", "signature": "void addEdge(V from, V to)", "full_signature": "public void addEdge(V from, V to)", "class_method_signature": "DirectedGraph.addEdge(V from, V to)", "testcase": false, "constructor": false}, {"identifier": "removeEdge", "parameters": "(V from, V to)", "modifiers": "public", "return": "void", "signature": "void removeEdge(V from, V to)", "full_signature": "public void removeEdge(V from, V to)", "class_method_signature": "DirectedGraph.removeEdge(V from, V to)", "testcase": false, "constructor": false}, {"identifier": "getNeighbors", "parameters": "(V vertex)", "modifiers": "public", "return": "List<V>", "signature": "List<V> getNeighbors(V vertex)", "full_signature": "public List<V> getNeighbors(V vertex)", "class_method_signature": "DirectedGraph.getNeighbors(V vertex)", "testcase": false, "constructor": false}, {"identifier": "outDegree", "parameters": "()", "modifiers": "public", "return": "Map<V, Integer>", "signature": "Map<V, Integer> outDegree()", "full_signature": "public Map<V, Integer> outDegree()", "class_method_signature": "DirectedGraph.outDegree()", "testcase": false, "constructor": false}, {"identifier": "inDegree", "parameters": "()", "modifiers": "public", "return": "Map<V, Integer>", "signature": "Map<V, Integer> inDegree()", "full_signature": "public Map<V, Integer> inDegree()", "class_method_signature": "DirectedGraph.inDegree()", "testcase": false, "constructor": false}, {"identifier": "topologicalSort", "parameters": "()", "modifiers": "public", "return": "List<V>", "signature": "List<V> topologicalSort()", "full_signature": "public List<V> topologicalSort()", "class_method_signature": "DirectedGraph.topologicalSort()", "testcase": false, "constructor": false}, {"identifier": "reverseTopologicalSort", "parameters": "()", "modifiers": "public", "return": "List<V>", "signature": "List<V> reverseTopologicalSort()", "full_signature": "public List<V> reverseTopologicalSort()", "class_method_signature": "DirectedGraph.reverseTopologicalSort()", "testcase": false, "constructor": false}, {"identifier": "isDag", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDag()", "full_signature": "public boolean isDag()", "class_method_signature": "DirectedGraph.isDag()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DirectedGraph.toString()", "testcase": false, "constructor": false}], "file": "pf4j/src/main/java/org/pf4j/util/DirectedGraph.java"}, "focal_method": {"identifier": "topologicalSort", "parameters": "()", "modifiers": "public", "return": "List<V>", "body": "public List<V> topologicalSort() {\n        Map<V, Integer> degree = inDegree();\n\n        // determine all vertices with zero in-degree\n        Stack<V> zeroVertices = new Stack<>(); // stack as good as any here\n        for (V v : degree.keySet()) {\n            if (degree.get(v) == 0) {\n                zeroVertices.push(v);\n            }\n        }\n\n        // determine the topological order\n        List<V> result = new ArrayList<>();\n        while (!zeroVertices.isEmpty()) {\n            V vertex = zeroVertices.pop(); // choose a vertex with zero in-degree\n            result.add(vertex); // vertex 'v' is next in topological order\n            // \"remove\" vertex 'v' by updating its neighbors\n            for (V neighbor : neighbors.get(vertex)) {\n                degree.put(neighbor, degree.get(neighbor) - 1);\n                // remember any vertices that now have zero in-degree\n                if (degree.get(neighbor) == 0) {\n                    zeroVertices.push(neighbor);\n                }\n            }\n        }\n\n        // check that we have used the entire graph (if not, there was a cycle)\n        if (result.size() != neighbors.size()) {\n            return null;\n        }\n\n        return result;\n    }", "signature": "List<V> topologicalSort()", "full_signature": "public List<V> topologicalSort()", "class_method_signature": "DirectedGraph.topologicalSort()", "testcase": false, "constructor": false, "invocations": ["inDegree", "keySet", "get", "push", "isEmpty", "pop", "add", "get", "put", "get", "get", "push", "size", "size"]}, "repository": {"repo_id": 6157458, "url": "https://github.com/pf4j/pf4j", "stars": 1034, "created": "10/10/2012 1:10:32 PM +00:00", "updates": "2020-01-20T02:39:14+00:00", "fork": "False", "license": "licensed"}}