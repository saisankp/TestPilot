{"test_class": {"identifier": "PartialSigmaChargeDescriptorTest", "superclass": "extends AtomicDescriptorTest", "interfaces": "", "fields": [{"original_string": "private final static IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private final static", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "LonePairElectronChecker                 lpcheck = new LonePairElectronChecker();", "modifier": "", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}], "file": "descriptor/qsaratomic/src/test/java/org/openscience/cdk/qsar/descriptors/atomic/PartialSigmaChargeDescriptorTest.java"}, "test_case": {"identifier": "testPartialSigmaChargeDescriptor_Methyl_chloride", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPartialSigmaChargeDescriptor_Methyl_chloride() throws ClassNotFoundException, CDKException,\n            java.lang.Exception {\n        double[] testResult = {0.0382, -0.1755, 0.0457, 0.0457, 0.0457};/*\n                                                                         * from\n                                                                         * Petra\n                                                                         * online\n                                                                         * :\n                                                                         * http\n                                                                         * :/\n                                                                         * /www2\n                                                                         * .\n                                                                         * chemie\n                                                                         * .uni-\n                                                                         * erlangen\n                                                                         * .de/\n                                                                         * services\n                                                                         * /\n                                                                         * petra\n                                                                         * /\n                                                                         * smiles\n                                                                         * .\n                                                                         * phtml\n                                                                         */\n\n        IAtomContainer molecule = builder.newInstance(IAtomContainer.class);\n        molecule.addAtom(new Atom(\"C\"));\n        molecule.addAtom(new Atom(\"Cl\"));\n        molecule.addBond(0, 1, IBond.Order.SINGLE);\n\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n        addExplicitHydrogens(molecule);\n        lpcheck.saturate(molecule);\n\n        for (int i = 0; i < molecule.getAtomCount(); i++) {\n            double result = ((DoubleResult) descriptor.calculate(molecule.getAtom(i), molecule).getValue())\n                    .doubleValue();\n            Assert.assertEquals(testResult[i], result, 0.001);\n        }\n    }", "signature": "void testPartialSigmaChargeDescriptor_Methyl_chloride()", "full_signature": "@Test public void testPartialSigmaChargeDescriptor_Methyl_chloride()", "class_method_signature": "PartialSigmaChargeDescriptorTest.testPartialSigmaChargeDescriptor_Methyl_chloride()", "testcase": true, "constructor": false, "invocations": ["newInstance", "addAtom", "addAtom", "addBond", "percieveAtomTypesAndConfigureAtoms", "addExplicitHydrogens", "saturate", "getAtomCount", "doubleValue", "getValue", "calculate", "getAtom", "assertEquals"]}, "focal_class": {"identifier": "PartialSigmaChargeDescriptor", "superclass": "extends AbstractAtomicDescriptor", "interfaces": "", "fields": [{"original_string": "private static final String[]          NAMES = {\"partialSigmaCharge\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES = {\"partialSigmaCharge\"}", "var_name": "NAMES"}, {"original_string": "private GasteigerMarsiliPartialCharges peoe  = null;", "modifier": "private", "type": "GasteigerMarsiliPartialCharges", "declarator": "peoe  = null", "var_name": "peoe"}, {"original_string": "private int                            maxIterations;", "modifier": "private", "type": "int", "declarator": "maxIterations", "var_name": "maxIterations"}], "methods": [{"identifier": "PartialSigmaChargeDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " PartialSigmaChargeDescriptor()", "full_signature": "public  PartialSigmaChargeDescriptor()", "class_method_signature": "PartialSigmaChargeDescriptor.PartialSigmaChargeDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "PartialSigmaChargeDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "PartialSigmaChargeDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "PartialSigmaChargeDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "PartialSigmaChargeDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "class_method_signature": "PartialSigmaChargeDescriptor.calculate(IAtom atom, IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "PartialSigmaChargeDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "PartialSigmaChargeDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsaratomic/src/main/java/org/openscience/cdk/qsar/descriptors/atomic/PartialSigmaChargeDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtom atom, IAtomContainer ac) {\n        if (!isCachedAtomContainer(ac)) {\n            Double[] org = new Double[ac.getAtomCount()];\n            for (int i = 0; i < org.length; i++)\n                org[i] = ac.getAtom(i).getCharge();\n            IAtomContainer mol = atom.getBuilder().newInstance(IAtomContainer.class, ac);\n            if (maxIterations != 0) peoe.setMaxGasteigerIters(maxIterations);\n            try {\n                peoe.assignGasteigerMarsiliSigmaPartialCharges(mol, true);\n                for (int i = 0; i < ac.getAtomCount(); i++) {\n                    // assume same order, so mol.getAtom(i) == ac.getAtom(i)\n                    cacheDescriptorValue(ac.getAtom(i), ac, new DoubleResult(mol.getAtom(i).getCharge()));\n                }\n            } catch (Exception e) {\n                return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                        Double.NaN), NAMES, e);\n            }\n            for (int i = 0; i < org.length; i++)\n                mol.getAtom(i).setCharge(org[i]);\n        }\n        return getCachedDescriptorValue(atom) != null ? new DescriptorValue(getSpecification(), getParameterNames(),\n                getParameters(), getCachedDescriptorValue(atom), NAMES) : null;\n    }", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "class_method_signature": "PartialSigmaChargeDescriptor.calculate(IAtom atom, IAtomContainer ac)", "testcase": false, "constructor": false, "invocations": ["isCachedAtomContainer", "getAtomCount", "getCharge", "getAtom", "newInstance", "getBuilder", "setMaxGasteigerIters", "assignGasteigerMarsiliSigmaPartialCharges", "getAtomCount", "cacheDescriptorValue", "getAtom", "getCharge", "getAtom", "getSpecification", "getParameterNames", "getParameters", "setCharge", "getAtom", "getCachedDescriptorValue", "getSpecification", "getParameterNames", "getParameters", "getCachedDescriptorValue"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}