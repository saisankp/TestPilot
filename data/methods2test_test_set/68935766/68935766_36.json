{"test_class": {"identifier": "TrieTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Trie<String> TRIE = new Trie<>();", "modifier": "static final", "type": "Trie<String>", "declarator": "TRIE = new Trie<>()", "var_name": "TRIE"}, {"original_string": "Trie<String> trie = new Trie<>();", "modifier": "", "type": "Trie<String>", "declarator": "trie = new Trie<>()", "var_name": "trie"}, {"original_string": "Trie<String> populated = new Trie<>();", "modifier": "", "type": "Trie<String>", "declarator": "populated = new Trie<>()", "var_name": "populated"}], "file": "commons/src/test/java/com/karuslabs/commons/util/collection/TrieTest.java"}, "test_case": {"identifier": "clear", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void clear() {\n        populated.clear();\n        \n        assertTrue(populated.isEmpty());\n        assertEquals(5, populated.modifications);\n        assertNull(populated.get(\"app\"));\n    }", "signature": "void clear()", "full_signature": "@Test void clear()", "class_method_signature": "TrieTest.clear()", "testcase": true, "constructor": false, "invocations": ["clear", "assertTrue", "isEmpty", "assertEquals", "assertNull", "get"]}, "focal_class": {"identifier": "Trie", "superclass": "extends AbstractMap<String, V>", "interfaces": "", "fields": [{"original_string": "private final TrieEntry<V> root;", "modifier": "private final", "type": "TrieEntry<V>", "declarator": "root", "var_name": "root"}, {"original_string": "private int size;", "modifier": "private", "type": "int", "declarator": "size", "var_name": "size"}, {"original_string": "int modifications;", "modifier": "", "type": "int", "declarator": "modifications", "var_name": "modifications"}, {"original_string": "@Lazy EntrySet entries;", "modifier": "@Lazy", "type": "EntrySet", "declarator": "entries", "var_name": "entries"}, {"original_string": "@Lazy KeySet keys;", "modifier": "@Lazy", "type": "KeySet", "declarator": "keys", "var_name": "keys"}, {"original_string": "@Lazy ValueCollection values;", "modifier": "@Lazy", "type": "ValueCollection", "declarator": "values", "var_name": "values"}], "methods": [{"identifier": "Trie", "parameters": "()", "modifiers": "public", "return": "", "signature": " Trie()", "full_signature": "public  Trie()", "class_method_signature": "Trie.Trie()", "testcase": false, "constructor": true}, {"identifier": "prefixEntries", "parameters": "(String prefix)", "modifiers": "public", "return": "Set<Entry<String, V>>", "signature": "Set<Entry<String, V>> prefixEntries(String prefix)", "full_signature": "public Set<Entry<String, V>> prefixEntries(String prefix)", "class_method_signature": "Trie.prefixEntries(String prefix)", "testcase": false, "constructor": false}, {"identifier": "prefixedKeys", "parameters": "(String prefix)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> prefixedKeys(String prefix)", "full_signature": "public Set<String> prefixedKeys(String prefix)", "class_method_signature": "Trie.prefixedKeys(String prefix)", "testcase": false, "constructor": false}, {"identifier": "prefixedValues", "parameters": "(String prefix)", "modifiers": "public", "return": "Collection<V>", "signature": "Collection<V> prefixedValues(String prefix)", "full_signature": "public Collection<V> prefixedValues(String prefix)", "class_method_signature": "Trie.prefixedValues(String prefix)", "testcase": false, "constructor": false}, {"identifier": "prefixed", "parameters": "(String prefix, Function<Entry<String, V>, T> mapper, C collection)", "modifiers": "", "return": "C", "signature": "C prefixed(String prefix, Function<Entry<String, V>, T> mapper, C collection)", "full_signature": " C prefixed(String prefix, Function<Entry<String, V>, T> mapper, C collection)", "class_method_signature": "Trie.prefixed(String prefix, Function<Entry<String, V>, T> mapper, C collection)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(TrieEntry<V> entry, Function<Entry<String, V>, T> mapper, C leaves)", "modifiers": "private", "return": "void", "signature": "void map(TrieEntry<V> entry, Function<Entry<String, V>, T> mapper, C leaves)", "full_signature": "private void map(TrieEntry<V> entry, Function<Entry<String, V>, T> mapper, C leaves)", "class_method_signature": "Trie.map(TrieEntry<V> entry, Function<Entry<String, V>, T> mapper, C leaves)", "testcase": false, "constructor": false}, {"identifier": "containsValue", "parameters": "(Object value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsValue(Object value)", "full_signature": "@Override public boolean containsValue(Object value)", "class_method_signature": "Trie.containsValue(Object value)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(TrieEntry<V> entry, Object value)", "modifiers": "private", "return": "boolean", "signature": "boolean contains(TrieEntry<V> entry, Object value)", "full_signature": "private boolean contains(TrieEntry<V> entry, Object value)", "class_method_signature": "Trie.contains(TrieEntry<V> entry, Object value)", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(Object key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsKey(Object key)", "full_signature": "@Override public boolean containsKey(Object key)", "class_method_signature": "Trie.containsKey(Object key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Object key)", "modifiers": "@Override public @Nullable", "return": "V", "signature": "V get(Object key)", "full_signature": "@Override public @Nullable V get(Object key)", "class_method_signature": "Trie.get(Object key)", "testcase": false, "constructor": false}, {"identifier": "getEntry", "parameters": "(Object key)", "modifiers": "@Nullable", "return": "TrieEntry<V>", "signature": "TrieEntry<V> getEntry(Object key)", "full_signature": "@Nullable TrieEntry<V> getEntry(Object key)", "class_method_signature": "Trie.getEntry(Object key)", "testcase": false, "constructor": false}, {"identifier": "putAll", "parameters": "(Map<? extends String, ? extends V> map)", "modifiers": "@Override public", "return": "void", "signature": "void putAll(Map<? extends String, ? extends V> map)", "full_signature": "@Override public void putAll(Map<? extends String, ? extends V> map)", "class_method_signature": "Trie.putAll(Map<? extends String, ? extends V> map)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String key, V value)", "modifiers": "@Override public @Nullable", "return": "V", "signature": "V put(String key, V value)", "full_signature": "@Override public @Nullable V put(String key, V value)", "class_method_signature": "Trie.put(String key, V value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object key)", "modifiers": "@Override public @Nullable", "return": "V", "signature": "V remove(Object key)", "full_signature": "@Override public @Nullable V remove(Object key)", "class_method_signature": "Trie.remove(Object key)", "testcase": false, "constructor": false}, {"identifier": "removeEntry", "parameters": "(TrieEntry<V> entry)", "modifiers": "private @Nullable", "return": "V", "signature": "V removeEntry(TrieEntry<V> entry)", "full_signature": "private @Nullable V removeEntry(TrieEntry<V> entry)", "class_method_signature": "Trie.removeEntry(TrieEntry<V> entry)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "Trie.clear()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "Trie.size()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "Trie.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "entrySet", "parameters": "()", "modifiers": "@Override public", "return": "Set<Entry<String, V>>", "signature": "Set<Entry<String, V>> entrySet()", "full_signature": "@Override public Set<Entry<String, V>> entrySet()", "class_method_signature": "Trie.entrySet()", "testcase": false, "constructor": false}, {"identifier": "keySet", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> keySet()", "full_signature": "@Override public Set<String> keySet()", "class_method_signature": "Trie.keySet()", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "()", "modifiers": "@Override public", "return": "Collection<V>", "signature": "Collection<V> values()", "full_signature": "@Override public Collection<V> values()", "class_method_signature": "Trie.values()", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/util/collection/Trie.java"}, "focal_method": {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void clear() {\n        size = 0;\n        modifications++;\n        root.clear();\n    }", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "Trie.clear()", "testcase": false, "constructor": false, "invocations": ["clear"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}