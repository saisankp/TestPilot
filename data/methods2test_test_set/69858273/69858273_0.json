{"test_class": {"identifier": "TimeBasedCacheTest", "superclass": "", "interfaces": "", "fields": [], "file": "oauth-filter/src/test/java/se/curity/examples/oauth/jwt/TimeBasedCacheTest.java"}, "test_case": {"identifier": "doesNotReloadCacheWithinTimeLimit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doesNotReloadCacheWithinTimeLimit()\n            throws Exception\n    {\n        // fake clock returns current time, then the same thing again,\n        // then 4 seconds later, then 8 seconds later.\n        Clock fakeClock = mock(Clock.class);\n        Instant now = Instant.now();\n        when(fakeClock.millis()).thenCallRealMethod();\n        when(fakeClock.instant()).thenReturn(\n                now, // get(\"0\") - first map loading\n                now, // cache asks when the latest loading happened\n                now.plus(Duration.ofSeconds(4)), // get(\"1\") - no reloading\n                // get(\"0\") - should not even ask about the time as entry was found\n                now.plus(Duration.ofSeconds(4)), // get(\"1\") - no reloading\n                now.plus(Duration.ofSeconds(8))); // get(\"1\") - reload\n\n        @SuppressWarnings(\"unchecked\")\n        Supplier<ImmutableMap> fakeSupplier = mock(Supplier.class);\n        when(fakeSupplier.get()).thenReturn(\n                ImmutableMap.of(\"0\", 0),\n                ImmutableMap.of(\"1\", 1));\n\n        // the map will always contain a single entry with the number of reloads as in\n        // (\"reloads\" -> reloads)\n        AtomicInteger reloads = new AtomicInteger(0);\n\n        TimeBasedCache<String, Integer> cache = new TimeBasedCache<>(Duration.ofSeconds(5),\n                () -> ImmutableMap.copyOf(ImmutableMap.of(Integer.toString(reloads.get()),\n                        reloads.getAndIncrement())),\n                ImmutableMap.of(), fakeClock);\n\n        // should have only (\"0\" -> 0) in the map in the beginning\n        assertNotNull(cache.get(\"0\"));\n        assertNull(cache.get(\"1\"));\n\n        // second time we try, the map should not reload\n        assertNotNull(cache.get(\"0\"));\n        assertNull(cache.get(\"1\"));\n\n        // when the first reload happens, the cache contains (\"1\" -> 1)\n        assertNotNull(cache.get(\"1\"));\n        assertNull(cache.get(\"0\"));\n    }", "signature": "void doesNotReloadCacheWithinTimeLimit()", "full_signature": "@Test public void doesNotReloadCacheWithinTimeLimit()", "class_method_signature": "TimeBasedCacheTest.doesNotReloadCacheWithinTimeLimit()", "testcase": true, "constructor": false, "invocations": ["mock", "now", "thenCallRealMethod", "when", "millis", "thenReturn", "when", "instant", "plus", "ofSeconds", "plus", "ofSeconds", "plus", "ofSeconds", "mock", "thenReturn", "when", "get", "of", "of", "ofSeconds", "copyOf", "of", "toString", "get", "getAndIncrement", "of", "assertNotNull", "get", "assertNull", "get", "assertNotNull", "get", "assertNull", "get", "assertNotNull", "get", "assertNull", "get"]}, "focal_class": {"identifier": "TimeBasedCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Object _cacheLock = new Object();", "modifier": "private final", "type": "Object", "declarator": "_cacheLock = new Object()", "var_name": "_cacheLock"}, {"original_string": "private volatile ImmutableMap<K, V> _cache;", "modifier": "private volatile", "type": "ImmutableMap<K, V>", "declarator": "_cache", "var_name": "_cache"}, {"original_string": "private volatile Instant _nextLoadingEarliestTime = Instant.MIN;", "modifier": "private volatile", "type": "Instant", "declarator": "_nextLoadingEarliestTime = Instant.MIN", "var_name": "_nextLoadingEarliestTime"}, {"original_string": "private volatile Optional<Instant> _lastLoading = Optional.empty();", "modifier": "private volatile", "type": "Optional<Instant>", "declarator": "_lastLoading = Optional.empty()", "var_name": "_lastLoading"}, {"original_string": "private final Duration _minTimeBetweenReloads;", "modifier": "private final", "type": "Duration", "declarator": "_minTimeBetweenReloads", "var_name": "_minTimeBetweenReloads"}, {"original_string": "private final Supplier<ImmutableMap<K, V>> _valuesSupplier;", "modifier": "private final", "type": "Supplier<ImmutableMap<K, V>>", "declarator": "_valuesSupplier", "var_name": "_valuesSupplier"}, {"original_string": "private final Clock _clock;", "modifier": "private final", "type": "Clock", "declarator": "_clock", "var_name": "_clock"}], "methods": [{"identifier": "TimeBasedCache", "parameters": "(Duration minTimeBetweenReloads, Supplier<ImmutableMap<K, V>> valuesSupplier)", "modifiers": "public", "return": "", "signature": " TimeBasedCache(Duration minTimeBetweenReloads, Supplier<ImmutableMap<K, V>> valuesSupplier)", "full_signature": "public  TimeBasedCache(Duration minTimeBetweenReloads, Supplier<ImmutableMap<K, V>> valuesSupplier)", "class_method_signature": "TimeBasedCache.TimeBasedCache(Duration minTimeBetweenReloads, Supplier<ImmutableMap<K, V>> valuesSupplier)", "testcase": false, "constructor": true}, {"identifier": "TimeBasedCache", "parameters": "(Duration minTimeBetweenReloads,\n                          Supplier<ImmutableMap<K, V>> valuesSupplier,\n                          ImmutableMap<K, V> initialCache,\n                          Clock clock)", "modifiers": "public", "return": "", "signature": " TimeBasedCache(Duration minTimeBetweenReloads,\n                          Supplier<ImmutableMap<K, V>> valuesSupplier,\n                          ImmutableMap<K, V> initialCache,\n                          Clock clock)", "full_signature": "public  TimeBasedCache(Duration minTimeBetweenReloads,\n                          Supplier<ImmutableMap<K, V>> valuesSupplier,\n                          ImmutableMap<K, V> initialCache,\n                          Clock clock)", "class_method_signature": "TimeBasedCache.TimeBasedCache(Duration minTimeBetweenReloads,\n                          Supplier<ImmutableMap<K, V>> valuesSupplier,\n                          ImmutableMap<K, V> initialCache,\n                          Clock clock)", "testcase": false, "constructor": true}, {"identifier": "mayReload", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean mayReload()", "full_signature": "private boolean mayReload()", "class_method_signature": "TimeBasedCache.mayReload()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(K key)", "modifiers": "public", "return": "V", "signature": "V get(K key)", "full_signature": "public V get(K key)", "class_method_signature": "TimeBasedCache.get(K key)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "TimeBasedCache.clear()", "testcase": false, "constructor": false}, {"identifier": "reloadCache", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void reloadCache()", "full_signature": "private void reloadCache()", "class_method_signature": "TimeBasedCache.reloadCache()", "testcase": false, "constructor": false}, {"identifier": "getLastReloadInstant", "parameters": "()", "modifiers": "public", "return": "Optional<Instant>", "signature": "Optional<Instant> getLastReloadInstant()", "full_signature": "public Optional<Instant> getLastReloadInstant()", "class_method_signature": "TimeBasedCache.getLastReloadInstant()", "testcase": false, "constructor": false}, {"identifier": "getMinTimeBetweenReloads", "parameters": "()", "modifiers": "public", "return": "Duration", "signature": "Duration getMinTimeBetweenReloads()", "full_signature": "public Duration getMinTimeBetweenReloads()", "class_method_signature": "TimeBasedCache.getMinTimeBetweenReloads()", "testcase": false, "constructor": false}], "file": "oauth-filter/src/main/java/se/curity/examples/oauth/jwt/TimeBasedCache.java"}, "focal_method": {"identifier": "get", "parameters": "(K key)", "modifiers": "public", "return": "V", "body": "public V get(K key)\n    {\n        // optimistically try to get the key without locking\n        V value = _cache.get(key);\n        if (value == null && mayReload())\n        {\n            reloadCache();\n            value = _cache.get(key);\n        }\n\n        return value;\n    }", "signature": "V get(K key)", "full_signature": "public V get(K key)", "class_method_signature": "TimeBasedCache.get(K key)", "testcase": false, "constructor": false, "invocations": ["get", "mayReload", "reloadCache", "get"]}, "repository": {"repo_id": 69858273, "url": "https://github.com/curityio/example-java-oauth-protected-api", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 72, "license": "licensed"}}