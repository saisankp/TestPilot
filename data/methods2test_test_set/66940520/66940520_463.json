{"test_class": {"identifier": "TimeToLiveTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private DefaultSystemSettingManager systemSettingManager;", "modifier": "@Mock\n    private", "type": "DefaultSystemSettingManager", "declarator": "systemSettingManager", "var_name": "systemSettingManager"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/cache/TimeToLiveTest.java"}, "test_case": {"identifier": "testComputeForCurrentDayWhenCacheFactorIsNegative", "parameters": "()", "modifiers": "@Test( expected = IllegalArgumentException.class ) public", "return": "void", "body": "@Test( expected = IllegalArgumentException.class )\n    public void testComputeForCurrentDayWhenCacheFactorIsNegative()\n    {\n        // Given\n        final Integer aNegativeCachingFactor = -1;\n        final Date endingDate = new Date();\n\n        // When\n        new TimeToLive( endingDate, aNegativeCachingFactor ).compute();\n\n        // Fail\n        fail( \"IllegalArgumentException was expected.\" );\n    }", "signature": "void testComputeForCurrentDayWhenCacheFactorIsNegative()", "full_signature": "@Test( expected = IllegalArgumentException.class ) public void testComputeForCurrentDayWhenCacheFactorIsNegative()", "class_method_signature": "TimeToLiveTest.testComputeForCurrentDayWhenCacheFactorIsNegative()", "testcase": true, "constructor": false, "invocations": ["compute", "fail"]}, "focal_class": {"identifier": "TimeToLive", "superclass": "", "interfaces": "implements\n    Computable", "fields": [{"original_string": "static final long DEFAULT_MULTIPLIER = 1;", "modifier": "static final", "type": "long", "declarator": "DEFAULT_MULTIPLIER = 1", "var_name": "DEFAULT_MULTIPLIER"}, {"original_string": "private final Date dateBeforeToday;", "modifier": "private final", "type": "Date", "declarator": "dateBeforeToday", "var_name": "dateBeforeToday"}, {"original_string": "private final int ttlFactor;", "modifier": "private final", "type": "int", "declarator": "ttlFactor", "var_name": "ttlFactor"}], "methods": [{"identifier": "TimeToLive", "parameters": "( final Date dateBeforeToday, final int ttlFactor )", "modifiers": "public", "return": "", "signature": " TimeToLive( final Date dateBeforeToday, final int ttlFactor )", "full_signature": "public  TimeToLive( final Date dateBeforeToday, final int ttlFactor )", "class_method_signature": "TimeToLive.TimeToLive( final Date dateBeforeToday, final int ttlFactor )", "testcase": false, "constructor": true}, {"identifier": "compute", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long compute()", "full_signature": "@Override public long compute()", "class_method_signature": "TimeToLive.compute()", "testcase": false, "constructor": false}, {"identifier": "daysBetweenDateBeforeTodayAndNow", "parameters": "( final Instant dateBeforeToday )", "modifiers": "private", "return": "long", "signature": "long daysBetweenDateBeforeTodayAndNow( final Instant dateBeforeToday )", "full_signature": "private long daysBetweenDateBeforeTodayAndNow( final Instant dateBeforeToday )", "class_method_signature": "TimeToLive.daysBetweenDateBeforeTodayAndNow( final Instant dateBeforeToday )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/cache/TimeToLive.java"}, "focal_method": {"identifier": "compute", "parameters": "()", "modifiers": "@Override public", "return": "long", "body": "@Override\n    public long compute()\n    {\n        /*\n         * If the difference between the most recent date and NOW is 0 (zero) it means\n         * the current day, so set the days multiplier to 1 (one) avoiding multiplying\n         * by 0 (zero).\n         */\n        final long daysDiff = daysBetweenDateBeforeTodayAndNow( dateBeforeToday.toInstant() );\n        final long daysMultiplier = daysDiff > 0 ? daysDiff : DEFAULT_MULTIPLIER;\n\n        return ttlFactor * daysMultiplier;\n    }", "signature": "long compute()", "full_signature": "@Override public long compute()", "class_method_signature": "TimeToLive.compute()", "testcase": false, "constructor": false, "invocations": ["daysBetweenDateBeforeTodayAndNow", "toInstant"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}