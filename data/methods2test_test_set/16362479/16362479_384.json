{"test_class": {"identifier": "AbstractClientHandleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PERSISTENCE_ID = \"per-1\";", "modifier": "private static final", "type": "String", "declarator": "PERSISTENCE_ID = \"per-1\"", "var_name": "PERSISTENCE_ID"}, {"original_string": "private static final YangInstanceIdentifier PATH = YangInstanceIdentifier.empty();", "modifier": "private static final", "type": "YangInstanceIdentifier", "declarator": "PATH = YangInstanceIdentifier.empty()", "var_name": "PATH"}, {"original_string": "@Mock\n    private DataTree dataTree;", "modifier": "@Mock\n    private", "type": "DataTree", "declarator": "dataTree", "var_name": "dataTree"}, {"original_string": "@Mock\n    private DataTreeSnapshot dataTreeSnapshot;", "modifier": "@Mock\n    private", "type": "DataTreeSnapshot", "declarator": "dataTreeSnapshot", "var_name": "dataTreeSnapshot"}, {"original_string": "private ActorSystem system;", "modifier": "private", "type": "ActorSystem", "declarator": "system", "var_name": "system"}, {"original_string": "private TestProbe backendProbe;", "modifier": "private", "type": "TestProbe", "declarator": "backendProbe", "var_name": "backendProbe"}, {"original_string": "private AbstractClientHistory parent;", "modifier": "private", "type": "AbstractClientHistory", "declarator": "parent", "var_name": "parent"}, {"original_string": "private AbstractDataStoreClientBehavior client;", "modifier": "private", "type": "AbstractDataStoreClientBehavior", "declarator": "client", "var_name": "client"}, {"original_string": "private T handle;", "modifier": "private", "type": "T", "declarator": "handle", "var_name": "handle"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/databroker/actors/dds/AbstractClientHandleTest.java"}, "test_case": {"identifier": "testEnsureProxy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEnsureProxy() {\n        final AbstractProxyTransaction expected = mock(AbstractProxyTransaction.class);\n        final AbstractProxyTransaction proxy = handle.ensureProxy(PATH);\n        Assert.assertEquals(0, proxy.getIdentifier().getTransactionId());\n    }", "signature": "void testEnsureProxy()", "full_signature": "@Test public void testEnsureProxy()", "class_method_signature": "AbstractClientHandleTest.testEnsureProxy()", "testcase": true, "constructor": false, "invocations": ["mock", "ensureProxy", "assertEquals", "getTransactionId", "getIdentifier"]}, "focal_class": {"identifier": "AbstractClientHandle", "superclass": "extends LocalAbortable", "interfaces": "implements Identifiable<TransactionIdentifier>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AbstractClientHandle.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AbstractClientHandle.class)", "var_name": "LOG"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    private static final AtomicReferenceFieldUpdater<AbstractClientHandle, State> STATE_UPDATER =\n            AtomicReferenceFieldUpdater.newUpdater(AbstractClientHandle.class, State.class, \"state\");", "modifier": "@SuppressWarnings(\"rawtypes\")\n    private static final", "type": "AtomicReferenceFieldUpdater<AbstractClientHandle, State>", "declarator": "STATE_UPDATER =\n            AtomicReferenceFieldUpdater.newUpdater(AbstractClientHandle.class, State.class, \"state\")", "var_name": "STATE_UPDATER"}, {"original_string": "private final TransactionIdentifier transactionId;", "modifier": "private final", "type": "TransactionIdentifier", "declarator": "transactionId", "var_name": "transactionId"}, {"original_string": "private final AbstractClientHistory parent;", "modifier": "private final", "type": "AbstractClientHistory", "declarator": "parent", "var_name": "parent"}, {"original_string": "private volatile State<T> state = new State<>();", "modifier": "private volatile", "type": "State<T>", "declarator": "state = new State<>()", "var_name": "state"}], "methods": [{"identifier": "AbstractClientHandle", "parameters": "(final AbstractClientHistory parent, final TransactionIdentifier transactionId)", "modifiers": "", "return": "", "signature": " AbstractClientHandle(final AbstractClientHistory parent, final TransactionIdentifier transactionId)", "full_signature": "  AbstractClientHandle(final AbstractClientHistory parent, final TransactionIdentifier transactionId)", "class_method_signature": "AbstractClientHandle.AbstractClientHandle(final AbstractClientHistory parent, final TransactionIdentifier transactionId)", "testcase": false, "constructor": true}, {"identifier": "getIdentifier", "parameters": "()", "modifiers": "@Override public", "return": "TransactionIdentifier", "signature": "TransactionIdentifier getIdentifier()", "full_signature": "@Override public TransactionIdentifier getIdentifier()", "class_method_signature": "AbstractClientHandle.getIdentifier()", "testcase": false, "constructor": false}, {"identifier": "abort", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean abort()", "full_signature": "public boolean abort()", "class_method_signature": "AbstractClientHandle.abort()", "testcase": false, "constructor": false}, {"identifier": "commonAbort", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean commonAbort()", "full_signature": "private boolean commonAbort()", "class_method_signature": "AbstractClientHandle.commonAbort()", "testcase": false, "constructor": false}, {"identifier": "localAbort", "parameters": "(final Throwable cause)", "modifiers": "@Override final", "return": "void", "signature": "void localAbort(final Throwable cause)", "full_signature": "@Override final void localAbort(final Throwable cause)", "class_method_signature": "AbstractClientHandle.localAbort(final Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "ensureClosed", "parameters": "()", "modifiers": "final @Nullable", "return": "Collection<T>", "signature": "Collection<T> ensureClosed()", "full_signature": "final @Nullable Collection<T> ensureClosed()", "class_method_signature": "AbstractClientHandle.ensureClosed()", "testcase": false, "constructor": false}, {"identifier": "ensureProxy", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "final", "return": "T", "signature": "T ensureProxy(final YangInstanceIdentifier path)", "full_signature": "final T ensureProxy(final YangInstanceIdentifier path)", "class_method_signature": "AbstractClientHandle.ensureProxy(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "parent", "parameters": "()", "modifiers": "final", "return": "AbstractClientHistory", "signature": "AbstractClientHistory parent()", "full_signature": "final AbstractClientHistory parent()", "class_method_signature": "AbstractClientHandle.parent()", "testcase": false, "constructor": false}, {"identifier": "createProxy", "parameters": "(@NonNull Long shard)", "modifiers": "abstract @NonNull", "return": "T", "signature": "T createProxy(@NonNull Long shard)", "full_signature": "abstract @NonNull T createProxy(@NonNull Long shard)", "class_method_signature": "AbstractClientHandle.createProxy(@NonNull Long shard)", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "private", "return": "State<T>", "signature": "State<T> getState()", "full_signature": "private State<T> getState()", "class_method_signature": "AbstractClientHandle.getState()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String toString()", "full_signature": "@Override public final String toString()", "class_method_signature": "AbstractClientHandle.toString()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/databroker/actors/dds/AbstractClientHandle.java"}, "focal_method": {"identifier": "ensureProxy", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "final", "return": "T", "body": "final T ensureProxy(final YangInstanceIdentifier path) {\n        final State<T> local = getState();\n        final Long shard = parent.resolveShardForPath(path);\n\n        return local.computeIfAbsent(shard, this::createProxy);\n    }", "signature": "T ensureProxy(final YangInstanceIdentifier path)", "full_signature": "final T ensureProxy(final YangInstanceIdentifier path)", "class_method_signature": "AbstractClientHandle.ensureProxy(final YangInstanceIdentifier path)", "testcase": false, "constructor": false, "invocations": ["getState", "resolveShardForPath", "computeIfAbsent"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}