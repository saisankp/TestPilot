{"test_class": {"identifier": "ProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ProcessingEnvironment env = mock(ProcessingEnvironment.class);", "modifier": "", "type": "ProcessingEnvironment", "declarator": "env = mock(ProcessingEnvironment.class)", "var_name": "env"}, {"original_string": "Elements elements = mock(Elements.class);", "modifier": "", "type": "Elements", "declarator": "elements = mock(Elements.class)", "var_name": "elements"}, {"original_string": "Types types = mock(Types.class);", "modifier": "", "type": "Types", "declarator": "types = mock(Types.class)", "var_name": "types"}, {"original_string": "TypeElement element = mock(TypeElement.class);", "modifier": "", "type": "TypeElement", "declarator": "element = mock(TypeElement.class)", "var_name": "element"}, {"original_string": "Filer filer = mock(Filer.class);", "modifier": "", "type": "Filer", "declarator": "filer = mock(Filer.class)", "var_name": "filer"}, {"original_string": "Messager messager = mock(Messager.class);", "modifier": "", "type": "Messager", "declarator": "messager = mock(Messager.class)", "var_name": "messager"}, {"original_string": "Processor processor = spy(new Processor());", "modifier": "", "type": "Processor", "declarator": "processor = spy(new Processor())", "var_name": "processor"}, {"original_string": "Environment<Element> environment;", "modifier": "", "type": "Environment<Element>", "declarator": "environment", "var_name": "environment"}], "file": "scribe/standalone/src/test/java/com/karuslabs/scribe/standalone/ProcessorTest.java"}, "test_case": {"identifier": "process_empty", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void process_empty() {\n        RoundEnvironment environment = when(mock(RoundEnvironment.class).getElementsAnnotatedWithAny(any(Set.class))).thenReturn(Set.of()).getMock();\n        processor.processor = mock(StandaloneProcessor.class);\n        \n        assertFalse(processor.process(Set.of(), environment));\n        verify(processor.processor, times(0)).initialize(any());\n    }", "signature": "void process_empty()", "full_signature": "@Test void process_empty()", "class_method_signature": "ProcessorTest.process_empty()", "testcase": true, "constructor": false, "invocations": ["getMock", "thenReturn", "when", "getElementsAnnotatedWithAny", "mock", "any", "of", "mock", "assertFalse", "process", "of", "initialize", "verify", "times", "any"]}, "focal_class": {"identifier": "Processor", "superclass": "extends AnnotationProcessor", "interfaces": "", "fields": [{"original_string": "Environment<Element> environment;", "modifier": "", "type": "Environment<Element>", "declarator": "environment", "var_name": "environment"}, {"original_string": "StandaloneProcessor processor;", "modifier": "", "type": "StandaloneProcessor", "declarator": "processor", "var_name": "processor"}, {"original_string": "StandaloneYAML yaml;", "modifier": "", "type": "StandaloneYAML", "declarator": "yaml", "var_name": "yaml"}], "methods": [{"identifier": "init", "parameters": "(ProcessingEnvironment env)", "modifiers": "@Override public", "return": "void", "signature": "void init(ProcessingEnvironment env)", "full_signature": "@Override public void init(ProcessingEnvironment env)", "class_method_signature": "Processor.init(ProcessingEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Set<? extends TypeElement> annotations, RoundEnvironment round)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean process(Set<? extends TypeElement> annotations, RoundEnvironment round)", "full_signature": "@Override public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment round)", "class_method_signature": "Processor.process(Set<? extends TypeElement> annotations, RoundEnvironment round)", "testcase": false, "constructor": false}], "file": "scribe/standalone/src/main/java/com/karuslabs/scribe/standalone/Processor.java"}, "focal_method": {"identifier": "process", "parameters": "(Set<? extends TypeElement> annotations, RoundEnvironment round)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment round) {\n        if (round.getElementsAnnotatedWithAny(processor.annotations()).isEmpty()) {\n            return false;\n        }\n        \n        processor.initialize(round);\n        processor.run();\n        \n        if (!round.processingOver()) {\n            yaml.write(environment.mappings);\n        }\n        \n        return false;\n    }", "signature": "boolean process(Set<? extends TypeElement> annotations, RoundEnvironment round)", "full_signature": "@Override public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment round)", "class_method_signature": "Processor.process(Set<? extends TypeElement> annotations, RoundEnvironment round)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getElementsAnnotatedWithAny", "annotations", "initialize", "run", "processingOver", "write"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}