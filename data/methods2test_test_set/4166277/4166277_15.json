{"test_class": {"identifier": "JfrEventParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "sjk-stacktrace/src/test/java/org/gridkit/jvmtool/stacktrace/codec/json/JfrEventParserTest.java"}, "test_case": {"identifier": "verify_parsing_JavaExceptionThrow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verify_parsing_JavaExceptionThrow() throws IOException {\n\n        JfrEventParser parser = new JfrEventParser();\n\n        CommonEvent event = parser.parseNextEvent(new JsonEventSource() {\n\n            boolean hasNext = true;\n\n            @Override\n            public boolean readNext(JsonStreamWriter writer) throws IOException {\n\n                jostart(writer);\n                    jput(writer, \"eventType\", \"jdk.JavaExceptionThrow\");\n                    jput(writer, \"startTime\", 1561544945483325579l);\n                    jostart(writer, \"eventThread\");\n                        jput(writer, \"osThreadId\", 14804);\n                        jput(writer, \"javaName\", \"Local Descriptor Scanner\");\n                        jput(writer, \"javaThreadId\", 36);\n                        jostart(writer, \"group\");\n                            jput(writer, \"parent\", null);\n                            jput(writer, \"name\", \"main\");\n                        joend(writer);\n                    joend(writer);\n                    jostart(writer, \"stackTrace\");\n                        jput(writer, \"truncated\", false);\n                        jastart(writer, \"frames\");\n                            jframe(writer,\n                                    \"java.lang.Throwable\",\n                                    \"<init>\",\n                                    272, 35, \"JIT compiled\"\n                            );\n                            jframe(writer,\n                                    \"java.lang.Exception\",\n                                    \"<init>\",\n                                    66, 2, \"JIT compiled\"\n                                    );\n                            jframe(writer,\n                                    \"java.net.URISyntaxException\",\n                                    \"<init>\",\n                                    62, 2, \"JIT compiled\"\n                                    );\n                        jaend(writer);\n                    joend(writer);\n                    jput(writer, \"message\", \"Malformed IPv4 address\");\n                    jostart(writer, \"thrownClass\");\n                        jput(writer, \"className\", \"java.net.URISyntaxException\");\n                    joend(writer);\n                joend(writer);\n\n                return hasNext | (hasNext = false);\n            }\n        });\n\n        ThreadSnapshotEvent tevent = (ThreadSnapshotEvent) event;\n\n        Assertions.assertThat(tevent.threadName()).isEqualTo(\"Local Descriptor Scanner\");\n        Assertions.assertThat(tevent.threadId()).isEqualTo(36l);\n        Assertions.assertThat(tevent.threadState()).isEqualTo(State.RUNNABLE);\n        Assertions.assertThat(tevent.tags().firstTagFor(\"jfr.typeId\")).isEqualTo(\"jdk.JavaExceptionThrow\");\n\n        Assertions.assertThat(tevent.stackTrace().depth()).isEqualTo(3);\n        Assertions.assertThat(tevent.stackTrace().frameAt(0))\n            .isEqualTo(new StackFrame(\"\", \"java.lang.Throwable\", \"<init>\", \"java\", 272));\n        Assertions.assertThat(tevent.stackTrace().frameAt(1))\n            .isEqualTo(new StackFrame(\"\", \"java.lang.Exception\", \"<init>\", \"java\", 66));\n        Assertions.assertThat(tevent.stackTrace().frameAt(2))\n            .isEqualTo(new StackFrame(\"\", \"java.net.URISyntaxException\", \"<init>\", \"java\", 62));\n    }", "signature": "void verify_parsing_JavaExceptionThrow()", "full_signature": "@Test public void verify_parsing_JavaExceptionThrow()", "class_method_signature": "JfrEventParserTest.verify_parsing_JavaExceptionThrow()", "testcase": true, "constructor": false, "invocations": ["parseNextEvent", "jostart", "jput", "jput", "jostart", "jput", "jput", "jput", "jostart", "jput", "jput", "joend", "joend", "jostart", "jput", "jastart", "jframe", "jframe", "jframe", "jaend", "joend", "jput", "jostart", "jput", "joend", "joend", "isEqualTo", "assertThat", "threadName", "isEqualTo", "assertThat", "threadId", "isEqualTo", "assertThat", "threadState", "isEqualTo", "assertThat", "firstTagFor", "tags", "isEqualTo", "assertThat", "depth", "stackTrace", "isEqualTo", "assertThat", "frameAt", "stackTrace", "isEqualTo", "assertThat", "frameAt", "stackTrace", "isEqualTo", "assertThat", "frameAt", "stackTrace"]}, "focal_class": {"identifier": "JfrEventParser", "superclass": "", "interfaces": "implements JsonEventAdapter", "fields": [{"original_string": "private JsonStreamHandler streamHandler = new JsonStreamHandler();", "modifier": "private", "type": "JsonStreamHandler", "declarator": "streamHandler = new JsonStreamHandler()", "var_name": "streamHandler"}, {"original_string": "private ObjectHandlerProxy handlerProxy = new ObjectHandlerProxy();", "modifier": "private", "type": "ObjectHandlerProxy", "declarator": "handlerProxy = new ObjectHandlerProxy()", "var_name": "handlerProxy"}, {"original_string": "private CommonEvent nextEvent;", "modifier": "private", "type": "CommonEvent", "declarator": "nextEvent", "var_name": "nextEvent"}], "methods": [{"identifier": "parseNextEvent", "parameters": "(JsonEventSource source)", "modifiers": "@Override public", "return": "CommonEvent", "signature": "CommonEvent parseNextEvent(JsonEventSource source)", "full_signature": "@Override public CommonEvent parseNextEvent(JsonEventSource source)", "class_method_signature": "JfrEventParser.parseNextEvent(JsonEventSource source)", "testcase": false, "constructor": false}, {"identifier": "push", "parameters": "(CommonEvent nextEvent)", "modifiers": "public", "return": "void", "signature": "void push(CommonEvent nextEvent)", "full_signature": "public void push(CommonEvent nextEvent)", "class_method_signature": "JfrEventParser.push(CommonEvent nextEvent)", "testcase": false, "constructor": false}, {"identifier": "createEventHandler", "parameters": "(String typeId)", "modifiers": "protected", "return": "JsonObjectHandler", "signature": "JsonObjectHandler createEventHandler(String typeId)", "full_signature": "protected JsonObjectHandler createEventHandler(String typeId)", "class_method_signature": "JfrEventParser.createEventHandler(String typeId)", "testcase": false, "constructor": false}], "file": "sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/codec/json/JfrEventParser.java"}, "focal_method": {"identifier": "parseNextEvent", "parameters": "(JsonEventSource source)", "modifiers": "@Override public", "return": "CommonEvent", "body": "@Override\n    public CommonEvent parseNextEvent(JsonEventSource source) throws IOException {\n        nextEvent = null;\n        while(true) {\n            streamHandler.reset(handlerProxy);\n            if (!source.readNext(streamHandler)) {\n                return null;\n            }\n            if (!streamHandler.isAcomplished()) {\n                throw new IOException(\"Malformed JSON input\");\n            }\n            if (nextEvent != null) {\n                return nextEvent;\n            }\n        }\n    }", "signature": "CommonEvent parseNextEvent(JsonEventSource source)", "full_signature": "@Override public CommonEvent parseNextEvent(JsonEventSource source)", "class_method_signature": "JfrEventParser.parseNextEvent(JsonEventSource source)", "testcase": false, "constructor": false, "invocations": ["reset", "readNext", "isAcomplished"]}, "repository": {"repo_id": 4166277, "url": "https://github.com/aragozin/jvm-tools", "language": "Java", "is_fork": false, "fork_count": 443, "stargazer_count": 2728, "size": 4961, "license": "licensed"}}