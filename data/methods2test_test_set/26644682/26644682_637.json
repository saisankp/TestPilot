{"test_class": {"identifier": "MoveDatasetContentTest", "superclass": "extends Base_2_1_0_PE_Test", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private MoveDatasetContent task;", "modifier": "@Autowired\n    private", "type": "MoveDatasetContent", "declarator": "task", "var_name": "task"}], "file": "dataprep-upgrade/src/test/java/org/talend/dataprep/upgrade/to_2_1_0_PE/MoveDatasetContentTest.java"}, "test_case": {"identifier": "shouldUpdateStepRowMetadata", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldUpdateStepRowMetadata() throws Exception {\n\n        // given\n        Assert.assertTrue(new File(task.oldRoot).exists());\n        Assert.assertFalse(new File(task.newRoot).exists());\n\n        // when\n        task.run();\n\n        // then\n        Assert.assertTrue(new File(task.newRoot).exists());\n    }", "signature": "void shouldUpdateStepRowMetadata()", "full_signature": "@Test public void shouldUpdateStepRowMetadata()", "class_method_signature": "MoveDatasetContentTest.shouldUpdateStepRowMetadata()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "exists", "assertFalse", "exists", "run", "assertTrue", "exists"]}, "focal_class": {"identifier": "MoveDatasetContent", "superclass": "", "interfaces": "implements BaseUpgradeTaskTo_2_1_0_PE", "fields": [{"original_string": "private static final Logger LOGGER = getLogger(MoveDatasetContent.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = getLogger(MoveDatasetContent.class)", "var_name": "LOGGER"}, {"original_string": "protected String oldRoot;", "modifier": "protected", "type": "String", "declarator": "oldRoot", "var_name": "oldRoot"}, {"original_string": "private String tmp;", "modifier": "private", "type": "String", "declarator": "tmp", "var_name": "tmp"}, {"original_string": "protected String newRoot;", "modifier": "protected", "type": "String", "declarator": "newRoot", "var_name": "newRoot"}], "methods": [{"identifier": "setOldRoot", "parameters": "(String basePath)", "modifiers": "@Value(\"${content-service.store.local.path}\") public", "return": "void", "signature": "void setOldRoot(String basePath)", "full_signature": "@Value(\"${content-service.store.local.path}\") public void setOldRoot(String basePath)", "class_method_signature": "MoveDatasetContent.setOldRoot(String basePath)", "testcase": false, "constructor": false}, {"identifier": "setTmp", "parameters": "(String basePath)", "modifiers": "@Value(\"${content-service.store.local.path}\") public", "return": "void", "signature": "void setTmp(String basePath)", "full_signature": "@Value(\"${content-service.store.local.path}\") public void setTmp(String basePath)", "class_method_signature": "MoveDatasetContent.setTmp(String basePath)", "testcase": false, "constructor": false}, {"identifier": "setNewRoot", "parameters": "(String basePath)", "modifiers": "@Value(\"${content-service.store.local.path}\") public", "return": "void", "signature": "void setNewRoot(String basePath)", "full_signature": "@Value(\"${content-service.store.local.path}\") public void setNewRoot(String basePath)", "class_method_signature": "MoveDatasetContent.setNewRoot(String basePath)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "MoveDatasetContent.run()", "testcase": false, "constructor": false}, {"identifier": "haveToBeApply", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean haveToBeApply()", "full_signature": "public boolean haveToBeApply()", "class_method_signature": "MoveDatasetContent.haveToBeApply()", "testcase": false, "constructor": false}, {"identifier": "getOrder", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getOrder()", "full_signature": "@Override public int getOrder()", "class_method_signature": "MoveDatasetContent.getOrder()", "testcase": false, "constructor": false}, {"identifier": "getTarget", "parameters": "()", "modifiers": "@Override public", "return": "target", "signature": "target getTarget()", "full_signature": "@Override public target getTarget()", "class_method_signature": "MoveDatasetContent.getTarget()", "testcase": false, "constructor": false}], "file": "dataprep-upgrade/src/main/java/org/talend/dataprep/upgrade/to_2_1_0_PE/MoveDatasetContent.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() {\n        if (this.haveToBeApply()) {\n            LOGGER.info(\"Moving dataset content from from {} to {}.\", oldRoot, newRoot);\n            try {\n                FileUtils.moveDirectory(new File(oldRoot), new File(tmp));\n                FileUtils.moveDirectory(new File(tmp), new File(newRoot));\n                LOGGER.info(\"Dataset content moved from {} to {}.\", oldRoot, newRoot);\n            } catch (IOException e) {\n                LOGGER.error(\"Unable to move Dataset content from {} to {}.\", oldRoot, newRoot);\n            }\n        } else {\n            LOGGER.info(\"Dataset folder is already compatible with this new version. We don't need to upgrade it\");\n        }\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "MoveDatasetContent.run()", "testcase": false, "constructor": false, "invocations": ["haveToBeApply", "info", "moveDirectory", "moveDirectory", "info", "error", "info"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}