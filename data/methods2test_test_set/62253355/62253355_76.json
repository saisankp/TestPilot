{"test_class": {"identifier": "DocumentTranslationCLITest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private DocumentTranslationCLI cli;", "modifier": "private", "type": "DocumentTranslationCLI", "declarator": "cli", "var_name": "cli"}], "file": "document-translation/com.mobi.document.translator.cli/src/test/java/com/mobi/document/translator/cli/DocumentTranslationCLITest.java"}, "test_case": {"identifier": "testSuccessJson", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSuccessJson() throws Exception {\n        setArguments(cli, \"src/test/resources/test.json\", \"target/jsonTest\",\n                \"urn://json.ont/mobi\", \"json\");\n        cli.execute();\n    }", "signature": "void testSuccessJson()", "full_signature": "@Test public void testSuccessJson()", "class_method_signature": "DocumentTranslationCLITest.testSuccessJson()", "testcase": true, "constructor": false, "invocations": ["setArguments", "execute"]}, "focal_class": {"identifier": "DocumentTranslationCLI", "superclass": "", "interfaces": "implements Action", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DocumentTranslationCLI.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DocumentTranslationCLI.class)", "var_name": "LOGGER"}, {"original_string": "@Argument(index = 0, name = \"Document\", required = true, description = \"The document file to translate\")\n    @Completion(FileCompleter.class)\n    private File documentFile;", "modifier": "@Argument(index = 0, name = \"Document\", required = true, description = \"The document file to translate\")\n    @Completion(FileCompleter.class)\n    private", "type": "File", "declarator": "documentFile", "var_name": "documentFile"}, {"original_string": "@Argument(index = 1, name = \"Output Location\", required = true,\n            description = \"The directory where we'll write the output zip file containing the ontology and data\")\n    @Completion(FileCompleter.class)\n    private File outputDirectory;", "modifier": "@Argument(index = 1, name = \"Output Location\", required = true,\n            description = \"The directory where we'll write the output zip file containing the ontology and data\")\n    @Completion(FileCompleter.class)\n    private", "type": "File", "declarator": "outputDirectory", "var_name": "outputDirectory"}, {"original_string": "@Argument(index = 2, name = \"Ontology IRI\", required = false,\n            description = \"The IRI of the ontology you want to generate\")\n    private String ontologyIriString;", "modifier": "@Argument(index = 2, name = \"Ontology IRI\", required = false,\n            description = \"The IRI of the ontology you want to generate\")\n    private", "type": "String", "declarator": "ontologyIriString", "var_name": "ontologyIriString"}, {"original_string": "@Argument(index = 3, name = \"Document Type\",\n            description = \"The type of document (If you don't want to use the file extension)\")\n    private String type;", "modifier": "@Argument(index = 3, name = \"Document Type\",\n            description = \"The type of document (If you don't want to use the file extension)\")\n    private", "type": "String", "declarator": "type", "var_name": "type"}, {"original_string": "@Reference\n    private List<SemanticTranslator> translators = new ArrayList<>();", "modifier": "@Reference\n    private", "type": "List<SemanticTranslator>", "declarator": "translators = new ArrayList<>()", "var_name": "translators"}, {"original_string": "@Reference\n    private OrmFactoryRegistry ormFactoryRegistry;", "modifier": "@Reference\n    private", "type": "OrmFactoryRegistry", "declarator": "ormFactoryRegistry", "var_name": "ormFactoryRegistry"}, {"original_string": "@Reference\n    private ValueFactory valueFactory;", "modifier": "@Reference\n    private", "type": "ValueFactory", "declarator": "valueFactory", "var_name": "valueFactory"}, {"original_string": "@Reference\n    private ModelFactory modelFactory;", "modifier": "@Reference\n    private", "type": "ModelFactory", "declarator": "modelFactory", "var_name": "modelFactory"}, {"original_string": "@Reference\n    private SesameTransformer sesameTransformer;", "modifier": "@Reference\n    private", "type": "SesameTransformer", "declarator": "sesameTransformer", "var_name": "sesameTransformer"}], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object execute()", "full_signature": "@Override public Object execute()", "class_method_signature": "DocumentTranslationCLI.execute()", "testcase": false, "constructor": false}, {"identifier": "writeData", "parameters": "(final Model model, OutputStream os)", "modifiers": "private", "return": "void", "signature": "void writeData(final Model model, OutputStream os)", "full_signature": "private void writeData(final Model model, OutputStream os)", "class_method_signature": "DocumentTranslationCLI.writeData(final Model model, OutputStream os)", "testcase": false, "constructor": false}, {"identifier": "getTranslatorForType", "parameters": "(String type)", "modifiers": "private", "return": "SemanticTranslator", "signature": "SemanticTranslator getTranslatorForType(String type)", "full_signature": "private SemanticTranslator getTranslatorForType(String type)", "class_method_signature": "DocumentTranslationCLI.getTranslatorForType(String type)", "testcase": false, "constructor": false}, {"identifier": "validateOutputLocation", "parameters": "(File loc)", "modifiers": "private static", "return": "void", "signature": "void validateOutputLocation(File loc)", "full_signature": "private static void validateOutputLocation(File loc)", "class_method_signature": "DocumentTranslationCLI.validateOutputLocation(File loc)", "testcase": false, "constructor": false}, {"identifier": "validateFile", "parameters": "(@Nonnull final File documentFile)", "modifiers": "private static", "return": "String", "signature": "String validateFile(@Nonnull final File documentFile)", "full_signature": "private static String validateFile(@Nonnull final File documentFile)", "class_method_signature": "DocumentTranslationCLI.validateFile(@Nonnull final File documentFile)", "testcase": false, "constructor": false}], "file": "document-translation/com.mobi.document.translator.cli/src/main/java/com/mobi/document/translator/cli/DocumentTranslationCLI.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object execute() throws Exception {\n        validateOutputLocation(outputDirectory);\n        final SemanticTranslator translator = getTranslatorForType(type != null ? type\n                : FilenameUtils.getExtension(documentFile.getName()));\n        ontologyIriString = ontologyIriString != null ? ontologyIriString\n                        : String.format(\"urn://mobi.inovexcorp.com/extractedOntology/%s\", UUID.randomUUID().toString());\n        final IRI ontologyIri = valueFactory.createIRI(ontologyIriString);\n        final ExtractedOntology ontology = ormFactoryRegistry.createNew(ontologyIri,\n                modelFactory.createModel(), ExtractedOntology.class);\n        final Model results = translator.translate(Paths.get(documentFile.toURI()), ontology);\n        final File outputFile = File.createTempFile(ontologyIri.getLocalName(), \".zip\", outputDirectory);\n        try (ZipOutputStream os = new ZipOutputStream(new FileOutputStream(outputFile))) {\n            final ZipEntry ontologyEntry = new ZipEntry(\"ontology.ttl\");\n            os.putNextEntry(ontologyEntry);\n            writeData(ontology.getModel(), os);\n            ZipEntry dataEntry = new ZipEntry(\"data.ttl\");\n            os.putNextEntry(dataEntry);\n            writeData(results, os);\n        }\n        return null;\n    }", "signature": "Object execute()", "full_signature": "@Override public Object execute()", "class_method_signature": "DocumentTranslationCLI.execute()", "testcase": false, "constructor": false, "invocations": ["validateOutputLocation", "getTranslatorForType", "getExtension", "getName", "format", "toString", "randomUUID", "createIRI", "createNew", "createModel", "translate", "get", "toURI", "createTempFile", "getLocalName", "putNextEntry", "writeData", "getModel", "putNextEntry", "writeData"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}