{"test_class": {"identifier": "GenericCommandTest", "superclass": "extends ServiceBaseTest", "interfaces": "", "fields": [{"original_string": "private static TDPException lastException;", "modifier": "private static", "type": "TDPException", "declarator": "lastException", "var_name": "lastException"}, {"original_string": "@Autowired\n    private WebApplicationContext context;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Autowired\n    private HttpClient httpClient;", "modifier": "@Autowired\n    private", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "@Autowired\n    private Security security;", "modifier": "@Autowired\n    private", "type": "Security", "declarator": "security", "var_name": "security"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/command/GenericCommandTest.java"}, "test_case": {"identifier": "testGenericSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenericSuccess() throws Exception {\n        // Given\n        final GenericCommand<String> command = getGroupedCommand(\"http://localhost:\" + port + \"/command/test/success\");\n        // When\n        final String result = command.run();\n        // Then\n        assertThat(result, is(\"success\"));\n        assertThat(lastException, nullValue());\n    }", "signature": "void testGenericSuccess()", "full_signature": "@Test public void testGenericSuccess()", "class_method_signature": "GenericCommandTest.testGenericSuccess()", "testcase": true, "constructor": false, "invocations": ["getGroupedCommand", "run", "assertThat", "is", "assertThat", "nullValue"]}, "focal_class": {"identifier": "GenericCommand", "superclass": "extends HystrixCommand<T>", "interfaces": "", "fields": [{"original_string": "public static final HystrixCommandGroupKey DATASET_GROUP = HystrixCommandGroupKey.Factory.asKey(\"dataset\");", "modifier": "public static final", "type": "HystrixCommandGroupKey", "declarator": "DATASET_GROUP = HystrixCommandGroupKey.Factory.asKey(\"dataset\")", "var_name": "DATASET_GROUP"}, {"original_string": "public static final HystrixCommandGroupKey PREPARATION_GROUP = HystrixCommandGroupKey.Factory.asKey(\"preparation\");", "modifier": "public static final", "type": "HystrixCommandGroupKey", "declarator": "PREPARATION_GROUP = HystrixCommandGroupKey.Factory.asKey(\"preparation\")", "var_name": "PREPARATION_GROUP"}, {"original_string": "public static final HystrixCommandGroupKey TRANSFORM_GROUP = HystrixCommandGroupKey.Factory.asKey(\"transform\");", "modifier": "public static final", "type": "HystrixCommandGroupKey", "declarator": "TRANSFORM_GROUP = HystrixCommandGroupKey.Factory.asKey(\"transform\")", "var_name": "TRANSFORM_GROUP"}, {"original_string": "public static final HystrixCommandGroupKey FULLRUN_GROUP = HystrixCommandGroupKey.Factory.asKey(\"fullrun\");", "modifier": "public static final", "type": "HystrixCommandGroupKey", "declarator": "FULLRUN_GROUP = HystrixCommandGroupKey.Factory.asKey(\"fullrun\")", "var_name": "FULLRUN_GROUP"}, {"original_string": "public static final HystrixCommandGroupKey ASYNC_GROUP = HystrixCommandGroupKey.Factory.asKey(\"async\");", "modifier": "public static final", "type": "HystrixCommandGroupKey", "declarator": "ASYNC_GROUP = HystrixCommandGroupKey.Factory.asKey(\"async\")", "var_name": "ASYNC_GROUP"}, {"original_string": "public static final HystrixCommandGroupKey USER_GROUP = HystrixCommandGroupKey.Factory.asKey(\"user\");", "modifier": "public static final", "type": "HystrixCommandGroupKey", "declarator": "USER_GROUP = HystrixCommandGroupKey.Factory.asKey(\"user\")", "var_name": "USER_GROUP"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(GenericCommand.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(GenericCommand.class)", "var_name": "LOGGER"}, {"original_string": "private static final HttpStatus[] INFO_STATUS = Stream\n            .of(HttpStatus.values()) //\n            .filter(HttpStatus::is1xxInformational) //\n            .collect(Collectors.toList()) //\n            .toArray(new HttpStatus[0]);", "modifier": "private static final", "type": "HttpStatus[]", "declarator": "INFO_STATUS = Stream\n            .of(HttpStatus.values()) //\n            .filter(HttpStatus::is1xxInformational) //\n            .collect(Collectors.toList()) //\n            .toArray(new HttpStatus[0])", "var_name": "INFO_STATUS"}, {"original_string": "private static final HttpStatus[] SUCCESS_STATUS = Stream\n            .of(HttpStatus.values()) //\n            .filter(HttpStatus::is2xxSuccessful) //\n            .collect(Collectors.toList()) //\n            .toArray(new HttpStatus[0]);", "modifier": "private static final", "type": "HttpStatus[]", "declarator": "SUCCESS_STATUS = Stream\n            .of(HttpStatus.values()) //\n            .filter(HttpStatus::is2xxSuccessful) //\n            .collect(Collectors.toList()) //\n            .toArray(new HttpStatus[0])", "var_name": "SUCCESS_STATUS"}, {"original_string": "private static final HttpStatus[] REDIRECT_STATUS = Stream\n            .of(HttpStatus.values()) //\n            .filter(HttpStatus::is3xxRedirection) //\n            .collect(Collectors.toList()) //\n            .toArray(new HttpStatus[0]);", "modifier": "private static final", "type": "HttpStatus[]", "declarator": "REDIRECT_STATUS = Stream\n            .of(HttpStatus.values()) //\n            .filter(HttpStatus::is3xxRedirection) //\n            .collect(Collectors.toList()) //\n            .toArray(new HttpStatus[0])", "var_name": "REDIRECT_STATUS"}, {"original_string": "private static final HttpStatus[] USER_ERROR_STATUS = Stream\n            .of(HttpStatus.values()) //\n            .filter(HttpStatus::is4xxClientError) //\n            .collect(Collectors.toList()) //\n            .toArray(new HttpStatus[0]);", "modifier": "private static final", "type": "HttpStatus[]", "declarator": "USER_ERROR_STATUS = Stream\n            .of(HttpStatus.values()) //\n            .filter(HttpStatus::is4xxClientError) //\n            .collect(Collectors.toList()) //\n            .toArray(new HttpStatus[0])", "var_name": "USER_ERROR_STATUS"}, {"original_string": "private static final HttpStatus[] SERVER_ERROR_STATUS = Stream\n            .of(HttpStatus.values()) //\n            .filter(HttpStatus::is5xxServerError) //\n            .collect(Collectors.toList()) //\n            .toArray(new HttpStatus[0]);", "modifier": "private static final", "type": "HttpStatus[]", "declarator": "SERVER_ERROR_STATUS = Stream\n            .of(HttpStatus.values()) //\n            .filter(HttpStatus::is5xxServerError) //\n            .collect(Collectors.toList()) //\n            .toArray(new HttpStatus[0])", "var_name": "SERVER_ERROR_STATUS"}, {"original_string": "private final Map<HttpStatus, BiFunction<HttpRequestBase, HttpResponse, T>> behavior =\n            new EnumMap<>(HttpStatus.class);", "modifier": "private final", "type": "Map<HttpStatus, BiFunction<HttpRequestBase, HttpResponse, T>>", "declarator": "behavior =\n            new EnumMap<>(HttpStatus.class)", "var_name": "behavior"}, {"original_string": "private final Map<String, String> headers = new HashMap<>();", "modifier": "private final", "type": "Map<String, String>", "declarator": "headers = new HashMap<>()", "var_name": "headers"}, {"original_string": "@Autowired\n    protected HttpClient client;", "modifier": "@Autowired\n    protected", "type": "HttpClient", "declarator": "client", "var_name": "client"}, {"original_string": "@Autowired\n    protected ObjectMapper objectMapper;", "modifier": "@Autowired\n    protected", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "@Autowired\n    protected ApplicationContext context;", "modifier": "@Autowired\n    protected", "type": "ApplicationContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Value(\"${transformation.service.url:}\")\n    protected String transformationServiceUrl;", "modifier": "@Value(\"${transformation.service.url:}\")\n    protected", "type": "String", "declarator": "transformationServiceUrl", "var_name": "transformationServiceUrl"}, {"original_string": "@Value(\"${fullrun.service.url:}\")\n    protected String fullRunServiceUrl;", "modifier": "@Value(\"${fullrun.service.url:}\")\n    protected", "type": "String", "declarator": "fullRunServiceUrl", "var_name": "fullRunServiceUrl"}, {"original_string": "@Value(\"${dataset.service.url:}\")\n    protected String datasetServiceUrl;", "modifier": "@Value(\"${dataset.service.url:}\")\n    protected", "type": "String", "declarator": "datasetServiceUrl", "var_name": "datasetServiceUrl"}, {"original_string": "@Value(\"${preparation.service.url:}\")\n    protected String preparationServiceUrl;", "modifier": "@Value(\"${preparation.service.url:}\")\n    protected", "type": "String", "declarator": "preparationServiceUrl", "var_name": "preparationServiceUrl"}, {"original_string": "@Autowired\n    private BeanConversionService conversionService;", "modifier": "@Autowired\n    private", "type": "BeanConversionService", "declarator": "conversionService", "var_name": "conversionService"}, {"original_string": "@Autowired\n    private Tracer tracer;", "modifier": "@Autowired\n    private", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "private Supplier<HttpRequestBase> httpCall;", "modifier": "private", "type": "Supplier<HttpRequestBase>", "declarator": "httpCall", "var_name": "httpCall"}, {"original_string": "private Header[] commandResponseHeaders = new Header[0];", "modifier": "private", "type": "Header[]", "declarator": "commandResponseHeaders = new Header[0]", "var_name": "commandResponseHeaders"}, {"original_string": "private Function<Exception, RuntimeException> onError = Defaults.passthrough();", "modifier": "private", "type": "Function<Exception, RuntimeException>", "declarator": "onError = Defaults.passthrough()", "var_name": "onError"}, {"original_string": "private HttpStatus status;", "modifier": "private", "type": "HttpStatus", "declarator": "status", "var_name": "status"}], "methods": [{"identifier": "GenericCommand", "parameters": "(final HystrixCommandGroupKey group)", "modifiers": "protected", "return": "", "signature": " GenericCommand(final HystrixCommandGroupKey group)", "full_signature": "protected  GenericCommand(final HystrixCommandGroupKey group)", "class_method_signature": "GenericCommand.GenericCommand(final HystrixCommandGroupKey group)", "testcase": false, "constructor": true}, {"identifier": "GenericCommand", "parameters": "(final HystrixCommandGroupKey group, final Map<String, String> headers)", "modifiers": "protected", "return": "", "signature": " GenericCommand(final HystrixCommandGroupKey group, final Map<String, String> headers)", "full_signature": "protected  GenericCommand(final HystrixCommandGroupKey group, final Map<String, String> headers)", "class_method_signature": "GenericCommand.GenericCommand(final HystrixCommandGroupKey group, final Map<String, String> headers)", "testcase": false, "constructor": true}, {"identifier": "getAuthenticationToken", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAuthenticationToken()", "full_signature": "public String getAuthenticationToken()", "class_method_signature": "GenericCommand.getAuthenticationToken()", "testcase": false, "constructor": false}, {"identifier": "decomposeException", "parameters": "(Exception e)", "modifiers": "@Override protected", "return": "RuntimeException", "signature": "RuntimeException decomposeException(Exception e)", "full_signature": "@Override protected RuntimeException decomposeException(Exception e)", "class_method_signature": "GenericCommand.decomposeException(Exception e)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override protected", "return": "T", "signature": "T run()", "full_signature": "@Override protected T run()", "class_method_signature": "GenericCommand.run()", "testcase": false, "constructor": false}, {"identifier": "addTrackingHeaders", "parameters": "(HttpRequestBase request)", "modifiers": "private", "return": "Span", "signature": "Span addTrackingHeaders(HttpRequestBase request)", "full_signature": "private Span addTrackingHeaders(HttpRequestBase request)", "class_method_signature": "GenericCommand.addTrackingHeaders(HttpRequestBase request)", "testcase": false, "constructor": false}, {"identifier": "addLocaleHeaders", "parameters": "(HttpRequestBase request)", "modifiers": "private", "return": "void", "signature": "void addLocaleHeaders(HttpRequestBase request)", "full_signature": "private void addLocaleHeaders(HttpRequestBase request)", "class_method_signature": "GenericCommand.addLocaleHeaders(HttpRequestBase request)", "testcase": false, "constructor": false}, {"identifier": "addAuthorizationHeaders", "parameters": "(HttpRequestBase request)", "modifiers": "private", "return": "void", "signature": "void addAuthorizationHeaders(HttpRequestBase request)", "full_signature": "private void addAuthorizationHeaders(HttpRequestBase request)", "class_method_signature": "GenericCommand.addAuthorizationHeaders(HttpRequestBase request)", "testcase": false, "constructor": false}, {"identifier": "addCommandHeaders", "parameters": "(HttpRequestBase request)", "modifiers": "private", "return": "void", "signature": "void addCommandHeaders(HttpRequestBase request)", "full_signature": "private void addCommandHeaders(HttpRequestBase request)", "class_method_signature": "GenericCommand.addCommandHeaders(HttpRequestBase request)", "testcase": false, "constructor": false}, {"identifier": "getCommandResponseHeaders", "parameters": "()", "modifiers": "public", "return": "Header[]", "signature": "Header[] getCommandResponseHeaders()", "full_signature": "public Header[] getCommandResponseHeaders()", "class_method_signature": "GenericCommand.getCommandResponseHeaders()", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "(String name)", "modifiers": "public", "return": "Header", "signature": "Header getHeader(String name)", "full_signature": "public Header getHeader(String name)", "class_method_signature": "GenericCommand.getHeader(String name)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "()", "modifiers": "public", "return": "HttpStatus", "signature": "HttpStatus getStatus()", "full_signature": "public HttpStatus getStatus()", "class_method_signature": "GenericCommand.getStatus()", "testcase": false, "constructor": false}, {"identifier": "missingBehavior", "parameters": "()", "modifiers": "private", "return": "BiFunction<HttpRequestBase, HttpResponse, T>", "signature": "BiFunction<HttpRequestBase, HttpResponse, T> missingBehavior()", "full_signature": "private BiFunction<HttpRequestBase, HttpResponse, T> missingBehavior()", "class_method_signature": "GenericCommand.missingBehavior()", "testcase": false, "constructor": false}, {"identifier": "callOnError", "parameters": "(Function<Exception, RuntimeException> onError)", "modifiers": "private", "return": "BiFunction<HttpRequestBase, HttpResponse, T>", "signature": "BiFunction<HttpRequestBase, HttpResponse, T> callOnError(Function<Exception, RuntimeException> onError)", "full_signature": "private BiFunction<HttpRequestBase, HttpResponse, T> callOnError(Function<Exception, RuntimeException> onError)", "class_method_signature": "GenericCommand.callOnError(Function<Exception, RuntimeException> onError)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Function<Exception, RuntimeException> onError)", "modifiers": "protected", "return": "void", "signature": "void onError(Function<Exception, RuntimeException> onError)", "full_signature": "protected void onError(Function<Exception, RuntimeException> onError)", "class_method_signature": "GenericCommand.onError(Function<Exception, RuntimeException> onError)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Supplier<HttpRequestBase> call)", "modifiers": "protected", "return": "void", "signature": "void execute(Supplier<HttpRequestBase> call)", "full_signature": "protected void execute(Supplier<HttpRequestBase> call)", "class_method_signature": "GenericCommand.execute(Supplier<HttpRequestBase> call)", "testcase": false, "constructor": false}, {"identifier": "on", "parameters": "(HttpStatus... status)", "modifiers": "protected", "return": "BehaviorBuilder", "signature": "BehaviorBuilder on(HttpStatus... status)", "full_signature": "protected BehaviorBuilder on(HttpStatus... status)", "class_method_signature": "GenericCommand.on(HttpStatus... status)", "testcase": false, "constructor": false}, {"identifier": "onInfo", "parameters": "()", "modifiers": "protected", "return": "BehaviorBuilder", "signature": "BehaviorBuilder onInfo()", "full_signature": "protected BehaviorBuilder onInfo()", "class_method_signature": "GenericCommand.onInfo()", "testcase": false, "constructor": false}, {"identifier": "onSuccess", "parameters": "()", "modifiers": "protected", "return": "BehaviorBuilder", "signature": "BehaviorBuilder onSuccess()", "full_signature": "protected BehaviorBuilder onSuccess()", "class_method_signature": "GenericCommand.onSuccess()", "testcase": false, "constructor": false}, {"identifier": "onRedirect", "parameters": "()", "modifiers": "protected", "return": "BehaviorBuilder", "signature": "BehaviorBuilder onRedirect()", "full_signature": "protected BehaviorBuilder onRedirect()", "class_method_signature": "GenericCommand.onRedirect()", "testcase": false, "constructor": false}, {"identifier": "onUserErrors", "parameters": "()", "modifiers": "protected", "return": "BehaviorBuilder", "signature": "BehaviorBuilder onUserErrors()", "full_signature": "protected BehaviorBuilder onUserErrors()", "class_method_signature": "GenericCommand.onUserErrors()", "testcase": false, "constructor": false}, {"identifier": "onServerErrors", "parameters": "()", "modifiers": "protected", "return": "BehaviorBuilder", "signature": "BehaviorBuilder onServerErrors()", "full_signature": "protected BehaviorBuilder onServerErrors()", "class_method_signature": "GenericCommand.onServerErrors()", "testcase": false, "constructor": false}, {"identifier": "serializeActions", "parameters": "(final Collection<Action> stepActions)", "modifiers": "protected", "return": "String", "signature": "String serializeActions(final Collection<Action> stepActions)", "full_signature": "protected String serializeActions(final Collection<Action> stepActions)", "class_method_signature": "GenericCommand.serializeActions(final Collection<Action> stepActions)", "testcase": false, "constructor": false}, {"identifier": "getServiceUrl", "parameters": "(ServiceType type)", "modifiers": "protected", "return": "String", "signature": "String getServiceUrl(ServiceType type)", "full_signature": "protected String getServiceUrl(ServiceType type)", "class_method_signature": "GenericCommand.getServiceUrl(ServiceType type)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/command/GenericCommand.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override protected", "return": "T", "body": "@Override\n    protected T run() throws Exception {\n        final HttpRequestBase request = httpCall.get();\n        addCommandHeaders(request); // insert all the provided headers in the request\n        addAuthorizationHeaders(request); // update request header with security token\n        addLocaleHeaders(request); // Forward locale to target\n        final Span requestSpan = addTrackingHeaders(request); // Inject tracing stuff\n\n        try {\n            final HttpResponse response;\n            try {\n                LOGGER.trace(\"Requesting {} {}\", request.getMethod(), request.getURI());\n                response = client.execute(request);\n            } catch (Exception e) {\n                throw onError.apply(e);\n            }\n            commandResponseHeaders = response.getAllHeaders();\n\n            status = HttpStatus.valueOf(response.getStatusLine().getStatusCode());\n\n            Header cookies = response.getFirstHeader(\"Set-Cookie\");\n            if (cookies != null) {\n                LOGGER.warn(\n                        \"request {} {}: Cookie detected in responseHeaders (check security.oauth2.resource.uri settings)\",\n                        request.getMethod(), request.getURI());\n            }\n\n            // do we have a behavior for this status code (even an error) ?\n            // if yes use it\n            BiFunction<HttpRequestBase, HttpResponse, T> function = behavior.get(status);\n            if (function != null) {\n                try {\n                    return function.apply(request, response);\n                } catch (Exception e) {\n                    throw onError.apply(e);\n                }\n            }\n\n            // handle response's HTTP status\n            if (status.is4xxClientError() || status.is5xxServerError()) {\n                LOGGER.debug(\"request {} {} : response on error {}\", request.getMethod(), request.getURI(),\n                        response.getStatusLine());\n                // Http status >= 400 so apply onError behavior\n                return callOnError(onError).apply(request, response);\n            } else {\n                // Http status is not error so apply onError behavior\n                return behavior.getOrDefault(status, missingBehavior()).apply(request, response);\n            }\n        } finally {\n            tracer.close(requestSpan);\n        }\n    }", "signature": "T run()", "full_signature": "@Override protected T run()", "class_method_signature": "GenericCommand.run()", "testcase": false, "constructor": false, "invocations": ["get", "addCommandHeaders", "addAuthorizationHeaders", "addLocaleHeaders", "addTrackingHeaders", "trace", "getMethod", "getURI", "execute", "apply", "getAllHeaders", "valueOf", "getStatusCode", "getStatusLine", "getFirstHeader", "warn", "getMethod", "getURI", "get", "apply", "apply", "is4xxClientError", "is5xxServerError", "debug", "getMethod", "getURI", "getStatusLine", "apply", "callOnError", "apply", "getOrDefault", "missingBehavior", "close"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}