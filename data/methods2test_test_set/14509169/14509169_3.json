{"test_class": {"identifier": "ComparisonTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/tdunning/math/stats/ComparisonTest.java"}, "test_case": {"identifier": "llr", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void llr() {\n        double[][] count = new double[2][2];\n        count[0][0] = 1;\n        count[1][1] = 1;\n        assertEquals(2.77, Comparison.llr(count), 0.01);\n\n        count[0][0] = 3;\n        count[0][1] = 1;\n        count[1][0] = 1;\n        count[1][1] = 3;\n        assertEquals(2.09, Comparison.llr(count), 0.01);\n\n        count[1][1] = 5;\n        assertEquals(3.55, Comparison.llr(count), 0.01);\n    }", "signature": "void llr()", "full_signature": "@Test public void llr()", "class_method_signature": "ComparisonTest.llr()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "llr", "assertEquals", "llr", "assertEquals", "llr"]}, "focal_class": {"identifier": "Comparison", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "compareChi2", "parameters": "(TDigest dist1, TDigest dist2, double[] qCuts)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "double", "signature": "double compareChi2(TDigest dist1, TDigest dist2, double[] qCuts)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static double compareChi2(TDigest dist1, TDigest dist2, double[] qCuts)", "class_method_signature": "Comparison.compareChi2(TDigest dist1, TDigest dist2, double[] qCuts)", "testcase": false, "constructor": false}, {"identifier": "compareChi2", "parameters": "(Histogram dist1, Histogram dist2)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "double", "signature": "double compareChi2(Histogram dist1, Histogram dist2)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static double compareChi2(Histogram dist1, Histogram dist2)", "class_method_signature": "Comparison.compareChi2(Histogram dist1, Histogram dist2)", "testcase": false, "constructor": false}, {"identifier": "llr", "parameters": "(double[][] count)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "double", "signature": "double llr(double[][] count)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static double llr(double[][] count)", "class_method_signature": "Comparison.llr(double[][] count)", "testcase": false, "constructor": false}, {"identifier": "ks", "parameters": "(TDigest d1, TDigest d2)", "modifiers": "public static", "return": "double", "signature": "double ks(TDigest d1, TDigest d2)", "full_signature": "public static double ks(TDigest d1, TDigest d2)", "class_method_signature": "Comparison.ks(TDigest d1, TDigest d2)", "testcase": false, "constructor": false}, {"identifier": "maxDiff", "parameters": "(TDigest d1, TDigest d2, double diff, double x1)", "modifiers": "private static", "return": "double", "signature": "double maxDiff(TDigest d1, TDigest d2, double diff, double x1)", "full_signature": "private static double maxDiff(TDigest d1, TDigest d2, double diff, double x1)", "class_method_signature": "Comparison.maxDiff(TDigest d1, TDigest d2, double diff, double x1)", "testcase": false, "constructor": false}, {"identifier": "nextValue", "parameters": "(TDigest d, Iterator<Centroid> ix, double x)", "modifiers": "private static", "return": "double", "signature": "double nextValue(TDigest d, Iterator<Centroid> ix, double x)", "full_signature": "private static double nextValue(TDigest d, Iterator<Centroid> ix, double x)", "class_method_signature": "Comparison.nextValue(TDigest d, Iterator<Centroid> ix, double x)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/tdunning/math/stats/Comparison.java"}, "focal_method": {"identifier": "llr", "parameters": "(double[][] count)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "double", "body": "@SuppressWarnings(\"WeakerAccess\")\n    public static double llr(double[][] count) {\n        if (count.length == 0) {\n            throw new IllegalArgumentException(\"Must have some data in llr\");\n        }\n        int columns = count[0].length;\n        int rows = count.length;\n        double[] rowSums = new double[rows];\n        double[] colSums = new double[columns];\n\n        double totalCount = 0;\n        double h = 0; // accumulator for entropy\n\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < columns; j++) {\n                double k = count[i][j];\n                rowSums[i] += k;\n                colSums[j] += k;\n                if (k < 0) {\n                    throw new IllegalArgumentException(String.format(\"Illegal negative count (%.5f) at %d,%d\", k, i, j));\n                }\n                if (k > 0) {\n                    h += k * Math.log(k);\n                    totalCount += k;\n                }\n            }\n        }\n\n        double normalizer = totalCount * Math.log(totalCount);\n        h -= normalizer;  // same as dividing every count by total inside the log\n\n        double hr = 0; // accumulator for row-wise entropy\n        for (int i = 0; i < rows; i++) {\n            if (rowSums[i] > 0) {\n                hr += rowSums[i] * Math.log(rowSums[i]);\n            }\n        }\n        hr -= normalizer;\n\n        double hc = 0; // accumulator for column-wise entropy\n        for (int j = 0; j < columns; j++) {\n            if (colSums[j] > 0) {\n                hc += colSums[j] * Math.log(colSums[j]);\n            }\n        }\n        hc -= normalizer;\n        // return value is 2N * mutualInformation(count)\n        return 2 * (h - hr - hc);\n    }", "signature": "double llr(double[][] count)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static double llr(double[][] count)", "class_method_signature": "Comparison.llr(double[][] count)", "testcase": false, "constructor": false, "invocations": ["format", "log", "log", "log", "log"]}, "repository": {"repo_id": 14509169, "url": "https://github.com/tdunning/t-digest", "language": "Java", "is_fork": false, "fork_count": 170, "stargazer_count": 1212, "size": 41644, "license": "licensed"}}