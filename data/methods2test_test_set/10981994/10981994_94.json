{"test_class": {"identifier": "AsyncFeignTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n  public final", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "@Rule\n  public final MockWebServer server = new MockWebServer();", "modifier": "@Rule\n  public final", "type": "MockWebServer", "declarator": "server = new MockWebServer()", "var_name": "server"}], "file": "core/src/test/java/feign/AsyncFeignTest.java"}, "test_case": {"identifier": "equalsHashCodeAndToStringWork", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void equalsHashCodeAndToStringWork() {\n    Target<TestInterfaceAsync> t1 =\n        new HardCodedTarget<TestInterfaceAsync>(TestInterfaceAsync.class,\n            \"http://localhost:8080\");\n    Target<TestInterfaceAsync> t2 =\n        new HardCodedTarget<TestInterfaceAsync>(TestInterfaceAsync.class,\n            \"http://localhost:8888\");\n    Target<OtherTestInterfaceAsync> t3 =\n        new HardCodedTarget<OtherTestInterfaceAsync>(OtherTestInterfaceAsync.class,\n            \"http://localhost:8080\");\n    TestInterfaceAsync i1 = AsyncFeign.asyncBuilder().target(t1);\n    TestInterfaceAsync i2 = AsyncFeign.asyncBuilder().target(t1);\n    TestInterfaceAsync i3 = AsyncFeign.asyncBuilder().target(t2);\n    OtherTestInterfaceAsync i4 = AsyncFeign.asyncBuilder().target(t3);\n\n    assertThat(i1).isEqualTo(i2).isNotEqualTo(i3).isNotEqualTo(i4);\n\n    assertThat(i1.hashCode()).isEqualTo(i2.hashCode()).isNotEqualTo(i3.hashCode())\n        .isNotEqualTo(i4.hashCode());\n\n    assertThat(i1.toString()).isEqualTo(i2.toString()).isNotEqualTo(i3.toString())\n        .isNotEqualTo(i4.toString());\n\n    assertThat(t1).isNotEqualTo(i1);\n\n    assertThat(t1.hashCode()).isEqualTo(i1.hashCode());\n\n    assertThat(t1.toString()).isEqualTo(i1.toString());\n  }", "signature": "void equalsHashCodeAndToStringWork()", "full_signature": "@Test public void equalsHashCodeAndToStringWork()", "class_method_signature": "AsyncFeignTest.equalsHashCodeAndToStringWork()", "testcase": true, "constructor": false, "invocations": ["target", "asyncBuilder", "target", "asyncBuilder", "target", "asyncBuilder", "target", "asyncBuilder", "isNotEqualTo", "isNotEqualTo", "isEqualTo", "assertThat", "isNotEqualTo", "isNotEqualTo", "isEqualTo", "assertThat", "hashCode", "hashCode", "hashCode", "hashCode", "isNotEqualTo", "isNotEqualTo", "isEqualTo", "assertThat", "toString", "toString", "toString", "toString", "isNotEqualTo", "assertThat", "isEqualTo", "assertThat", "hashCode", "hashCode", "isEqualTo", "assertThat", "toString", "toString"]}, "focal_class": {"identifier": "AsyncFeign", "superclass": "extends Feign", "interfaces": "", "fields": [{"original_string": "private final ThreadLocal<AsyncInvocation<C>> activeContext;", "modifier": "private final", "type": "ThreadLocal<AsyncInvocation<C>>", "declarator": "activeContext", "var_name": "activeContext"}, {"original_string": "private final Feign feign;", "modifier": "private final", "type": "Feign", "declarator": "feign", "var_name": "feign"}, {"original_string": "private final Supplier<C> defaultContextSupplier;", "modifier": "private final", "type": "Supplier<C>", "declarator": "defaultContextSupplier", "var_name": "defaultContextSupplier"}, {"original_string": "private final AsyncClient<C> client;", "modifier": "private final", "type": "AsyncClient<C>", "declarator": "client", "var_name": "client"}, {"original_string": "private final Logger.Level logLevel;", "modifier": "private final", "type": "Logger.Level", "declarator": "logLevel", "var_name": "logLevel"}, {"original_string": "private final Logger logger;", "modifier": "private final", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "private final AsyncResponseHandler responseHandler;", "modifier": "private final", "type": "AsyncResponseHandler", "declarator": "responseHandler", "var_name": "responseHandler"}], "methods": [{"identifier": "asyncBuilder", "parameters": "()", "modifiers": "public static", "return": "AsyncBuilder<C>", "signature": "AsyncBuilder<C> asyncBuilder()", "full_signature": "public static AsyncBuilder<C> asyncBuilder()", "class_method_signature": "AsyncFeign.asyncBuilder()", "testcase": false, "constructor": false}, {"identifier": "AsyncFeign", "parameters": "(AsyncBuilder<C> asyncBuilder)", "modifiers": "protected", "return": "", "signature": " AsyncFeign(AsyncBuilder<C> asyncBuilder)", "full_signature": "protected  AsyncFeign(AsyncBuilder<C> asyncBuilder)", "class_method_signature": "AsyncFeign.AsyncFeign(AsyncBuilder<C> asyncBuilder)", "testcase": false, "constructor": true}, {"identifier": "stageExecution", "parameters": "(Request request, Options options)", "modifiers": "private", "return": "Response", "signature": "Response stageExecution(Request request, Options options)", "full_signature": "private Response stageExecution(Request request, Options options)", "class_method_signature": "AsyncFeign.stageExecution(Request request, Options options)", "testcase": false, "constructor": false}, {"identifier": "elapsedTime", "parameters": "(long start)", "modifiers": "", "return": "long", "signature": "long elapsedTime(long start)", "full_signature": " long elapsedTime(long start)", "class_method_signature": "AsyncFeign.elapsedTime(long start)", "testcase": false, "constructor": false}, {"identifier": "stageDecode", "parameters": "(Response response, Type type)", "modifiers": "private", "return": "Object", "signature": "Object stageDecode(Response response, Type type)", "full_signature": "private Object stageDecode(Response response, Type type)", "class_method_signature": "AsyncFeign.stageDecode(Response response, Type type)", "testcase": false, "constructor": false}, {"identifier": "setInvocationContext", "parameters": "(AsyncInvocation<C> invocationContext)", "modifiers": "protected", "return": "void", "signature": "void setInvocationContext(AsyncInvocation<C> invocationContext)", "full_signature": "protected void setInvocationContext(AsyncInvocation<C> invocationContext)", "class_method_signature": "AsyncFeign.setInvocationContext(AsyncInvocation<C> invocationContext)", "testcase": false, "constructor": false}, {"identifier": "clearInvocationContext", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void clearInvocationContext()", "full_signature": "protected void clearInvocationContext()", "class_method_signature": "AsyncFeign.clearInvocationContext()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Target<T> target)", "modifiers": "@Override public", "return": "T", "signature": "T newInstance(Target<T> target)", "full_signature": "@Override public T newInstance(Target<T> target)", "class_method_signature": "AsyncFeign.newInstance(Target<T> target)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Target<T> target, C context)", "modifiers": "public", "return": "T", "signature": "T newInstance(Target<T> target, C context)", "full_signature": "public T newInstance(Target<T> target, C context)", "class_method_signature": "AsyncFeign.newInstance(Target<T> target, C context)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(Class<T> type, T instance, C context)", "modifiers": "protected abstract", "return": "T", "signature": "T wrap(Class<T> type, T instance, C context)", "full_signature": "protected abstract T wrap(Class<T> type, T instance, C context)", "class_method_signature": "AsyncFeign.wrap(Class<T> type, T instance, C context)", "testcase": false, "constructor": false}], "file": "core/src/main/java/feign/AsyncFeign.java"}, "focal_method": {"identifier": "asyncBuilder", "parameters": "()", "modifiers": "public static", "return": "AsyncBuilder<C>", "body": "public static <C> AsyncBuilder<C> asyncBuilder() {\n    return new AsyncBuilder<>();\n  }", "signature": "AsyncBuilder<C> asyncBuilder()", "full_signature": "public static AsyncBuilder<C> asyncBuilder()", "class_method_signature": "AsyncFeign.asyncBuilder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 10981994, "url": "https://github.com/OpenFeign/feign", "stars": 5385, "created": "6/26/2013 11:28:16 PM +00:00", "updates": "2020-01-27T14:44:13+00:00", "fork": "False", "license": "licensed"}}