{"test_class": {"identifier": "EciesAeadHkdfPrivateKeyManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final EciesAeadHkdfPrivateKeyManager manager = new EciesAeadHkdfPrivateKeyManager();", "modifier": "private final", "type": "EciesAeadHkdfPrivateKeyManager", "declarator": "manager = new EciesAeadHkdfPrivateKeyManager()", "var_name": "manager"}, {"original_string": "private final KeyTypeManager.KeyFactory<EciesAeadHkdfKeyFormat, EciesAeadHkdfPrivateKey> factory =\n      manager.keyFactory();", "modifier": "private final", "type": "KeyTypeManager.KeyFactory<EciesAeadHkdfKeyFormat, EciesAeadHkdfPrivateKey>", "declarator": "factory =\n      manager.keyFactory()", "var_name": "factory"}], "file": "java_src/src/test/java/com/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManagerTest.java"}, "test_case": {"identifier": "createPrimitive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void createPrimitive() throws Exception {\n    EciesAeadHkdfPrivateKey key = createValidKey();\n    HybridDecrypt hybridDecrypt = manager.getPrimitive(key, HybridDecrypt.class);\n\n    EciesAeadHkdfParams eciesParams = key.getPublicKey().getParams();\n    EciesHkdfKemParams kemParams = eciesParams.getKemParams();\n    ECPublicKey recipientPublicKey =\n        EllipticCurves.getEcPublicKey(\n            HybridUtil.toCurveType(kemParams.getCurveType()),\n            key.getPublicKey().getX().toByteArray(),\n            key.getPublicKey().getY().toByteArray());\n    EciesAeadHkdfDemHelper demHelper =\n        new RegistryEciesAeadHkdfDemHelper(eciesParams.getDemParams().getAeadDem());\n    HybridEncrypt hybridEncrypt = new EciesAeadHkdfHybridEncrypt(\n        recipientPublicKey,\n        kemParams.getHkdfSalt().toByteArray(),\n        HybridUtil.toHmacAlgo(kemParams.getHkdfHashType()),\n        HybridUtil.toPointFormatType(eciesParams.getEcPointFormat()),\n        demHelper);\n\n    byte[] message = Random.randBytes(20);\n    byte[] contextInfo = Random.randBytes(20);\n    assertThat(hybridDecrypt.decrypt(hybridEncrypt.encrypt(message, contextInfo), contextInfo))\n        .isEqualTo(message);\n  }", "signature": "void createPrimitive()", "full_signature": "@Test public void createPrimitive()", "class_method_signature": "EciesAeadHkdfPrivateKeyManagerTest.createPrimitive()", "testcase": true, "constructor": false, "invocations": ["createValidKey", "getPrimitive", "getParams", "getPublicKey", "getKemParams", "getEcPublicKey", "toCurveType", "getCurveType", "toByteArray", "getX", "getPublicKey", "toByteArray", "getY", "getPublicKey", "getAeadDem", "getDemParams", "toByteArray", "getHkdfSalt", "toHmacAlgo", "getHkdfHashType", "toPointFormatType", "getEcPointFormat", "randBytes", "randBytes", "isEqualTo", "assertThat", "decrypt", "encrypt"]}, "focal_class": {"identifier": "EciesAeadHkdfPrivateKeyManager", "superclass": "extends PrivateKeyTypeManager<EciesAeadHkdfPrivateKey, EciesAeadHkdfPublicKey>", "interfaces": "", "fields": [{"original_string": "private static final byte[] EMPTY_SALT = new byte[0];", "modifier": "private static final", "type": "byte[]", "declarator": "EMPTY_SALT = new byte[0]", "var_name": "EMPTY_SALT"}], "methods": [{"identifier": "EciesAeadHkdfPrivateKeyManager", "parameters": "()", "modifiers": "", "return": "", "signature": " EciesAeadHkdfPrivateKeyManager()", "full_signature": "  EciesAeadHkdfPrivateKeyManager()", "class_method_signature": "EciesAeadHkdfPrivateKeyManager.EciesAeadHkdfPrivateKeyManager()", "testcase": false, "constructor": true}, {"identifier": "getKeyType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getKeyType()", "full_signature": "@Override public String getKeyType()", "class_method_signature": "EciesAeadHkdfPrivateKeyManager.getKeyType()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getVersion()", "full_signature": "@Override public int getVersion()", "class_method_signature": "EciesAeadHkdfPrivateKeyManager.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getPublicKey", "parameters": "(EciesAeadHkdfPrivateKey key)", "modifiers": "@Override public", "return": "EciesAeadHkdfPublicKey", "signature": "EciesAeadHkdfPublicKey getPublicKey(EciesAeadHkdfPrivateKey key)", "full_signature": "@Override public EciesAeadHkdfPublicKey getPublicKey(EciesAeadHkdfPrivateKey key)", "class_method_signature": "EciesAeadHkdfPrivateKeyManager.getPublicKey(EciesAeadHkdfPrivateKey key)", "testcase": false, "constructor": false}, {"identifier": "keyMaterialType", "parameters": "()", "modifiers": "@Override public", "return": "KeyMaterialType", "signature": "KeyMaterialType keyMaterialType()", "full_signature": "@Override public KeyMaterialType keyMaterialType()", "class_method_signature": "EciesAeadHkdfPrivateKeyManager.keyMaterialType()", "testcase": false, "constructor": false}, {"identifier": "parseKey", "parameters": "(ByteString byteString)", "modifiers": "@Override public", "return": "EciesAeadHkdfPrivateKey", "signature": "EciesAeadHkdfPrivateKey parseKey(ByteString byteString)", "full_signature": "@Override public EciesAeadHkdfPrivateKey parseKey(ByteString byteString)", "class_method_signature": "EciesAeadHkdfPrivateKeyManager.parseKey(ByteString byteString)", "testcase": false, "constructor": false}, {"identifier": "validateKey", "parameters": "(EciesAeadHkdfPrivateKey keyProto)", "modifiers": "@Override public", "return": "void", "signature": "void validateKey(EciesAeadHkdfPrivateKey keyProto)", "full_signature": "@Override public void validateKey(EciesAeadHkdfPrivateKey keyProto)", "class_method_signature": "EciesAeadHkdfPrivateKeyManager.validateKey(EciesAeadHkdfPrivateKey keyProto)", "testcase": false, "constructor": false}, {"identifier": "keyFactory", "parameters": "()", "modifiers": "@Override public", "return": "KeyFactory<EciesAeadHkdfKeyFormat, EciesAeadHkdfPrivateKey>", "signature": "KeyFactory<EciesAeadHkdfKeyFormat, EciesAeadHkdfPrivateKey> keyFactory()", "full_signature": "@Override public KeyFactory<EciesAeadHkdfKeyFormat, EciesAeadHkdfPrivateKey> keyFactory()", "class_method_signature": "EciesAeadHkdfPrivateKeyManager.keyFactory()", "testcase": false, "constructor": false}, {"identifier": "registerPair", "parameters": "(boolean newKeyAllowed)", "modifiers": "public static", "return": "void", "signature": "void registerPair(boolean newKeyAllowed)", "full_signature": "public static void registerPair(boolean newKeyAllowed)", "class_method_signature": "EciesAeadHkdfPrivateKeyManager.registerPair(boolean newKeyAllowed)", "testcase": false, "constructor": false}, {"identifier": "eciesP256HkdfHmacSha256Aes128GcmTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate eciesP256HkdfHmacSha256Aes128GcmTemplate()", "full_signature": "public static final KeyTemplate eciesP256HkdfHmacSha256Aes128GcmTemplate()", "class_method_signature": "EciesAeadHkdfPrivateKeyManager.eciesP256HkdfHmacSha256Aes128GcmTemplate()", "testcase": false, "constructor": false}, {"identifier": "rawEciesP256HkdfHmacSha256Aes128GcmCompressedTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate rawEciesP256HkdfHmacSha256Aes128GcmCompressedTemplate()", "full_signature": "public static final KeyTemplate rawEciesP256HkdfHmacSha256Aes128GcmCompressedTemplate()", "class_method_signature": "EciesAeadHkdfPrivateKeyManager.rawEciesP256HkdfHmacSha256Aes128GcmCompressedTemplate()", "testcase": false, "constructor": false}, {"identifier": "eciesP256HkdfHmacSha256Aes128CtrHmacSha256Template", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate eciesP256HkdfHmacSha256Aes128CtrHmacSha256Template()", "full_signature": "public static final KeyTemplate eciesP256HkdfHmacSha256Aes128CtrHmacSha256Template()", "class_method_signature": "EciesAeadHkdfPrivateKeyManager.eciesP256HkdfHmacSha256Aes128CtrHmacSha256Template()", "testcase": false, "constructor": false}, {"identifier": "rawEciesP256HkdfHmacSha256Aes128CtrHmacSha256CompressedTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate rawEciesP256HkdfHmacSha256Aes128CtrHmacSha256CompressedTemplate()", "full_signature": "public static final KeyTemplate rawEciesP256HkdfHmacSha256Aes128CtrHmacSha256CompressedTemplate()", "class_method_signature": "EciesAeadHkdfPrivateKeyManager.rawEciesP256HkdfHmacSha256Aes128CtrHmacSha256CompressedTemplate()", "testcase": false, "constructor": false}, {"identifier": "createKeyTemplate", "parameters": "(\n      EllipticCurveType curve,\n      HashType hashType,\n      EcPointFormat ecPointFormat,\n      KeyTemplate demKeyTemplate,\n      KeyTemplate.OutputPrefixType outputPrefixType,\n      byte[] salt)", "modifiers": "private static", "return": "KeyTemplate", "signature": "KeyTemplate createKeyTemplate(\n      EllipticCurveType curve,\n      HashType hashType,\n      EcPointFormat ecPointFormat,\n      KeyTemplate demKeyTemplate,\n      KeyTemplate.OutputPrefixType outputPrefixType,\n      byte[] salt)", "full_signature": "private static KeyTemplate createKeyTemplate(\n      EllipticCurveType curve,\n      HashType hashType,\n      EcPointFormat ecPointFormat,\n      KeyTemplate demKeyTemplate,\n      KeyTemplate.OutputPrefixType outputPrefixType,\n      byte[] salt)", "class_method_signature": "EciesAeadHkdfPrivateKeyManager.createKeyTemplate(\n      EllipticCurveType curve,\n      HashType hashType,\n      EcPointFormat ecPointFormat,\n      KeyTemplate demKeyTemplate,\n      KeyTemplate.OutputPrefixType outputPrefixType,\n      byte[] salt)", "testcase": false, "constructor": false}, {"identifier": "createParams", "parameters": "(\n      EllipticCurveType curve,\n      HashType hashType,\n      EcPointFormat ecPointFormat,\n      KeyTemplate demKeyTemplate,\n      byte[] salt)", "modifiers": "static", "return": "EciesAeadHkdfParams", "signature": "EciesAeadHkdfParams createParams(\n      EllipticCurveType curve,\n      HashType hashType,\n      EcPointFormat ecPointFormat,\n      KeyTemplate demKeyTemplate,\n      byte[] salt)", "full_signature": "static EciesAeadHkdfParams createParams(\n      EllipticCurveType curve,\n      HashType hashType,\n      EcPointFormat ecPointFormat,\n      KeyTemplate demKeyTemplate,\n      byte[] salt)", "class_method_signature": "EciesAeadHkdfPrivateKeyManager.createParams(\n      EllipticCurveType curve,\n      HashType hashType,\n      EcPointFormat ecPointFormat,\n      KeyTemplate demKeyTemplate,\n      byte[] salt)", "testcase": false, "constructor": false}, {"identifier": "toProto", "parameters": "(\n      KeyTemplate.OutputPrefixType outputPrefixType)", "modifiers": "private static", "return": "com.google.crypto.tink.proto.OutputPrefixType", "signature": "com.google.crypto.tink.proto.OutputPrefixType toProto(\n      KeyTemplate.OutputPrefixType outputPrefixType)", "full_signature": "private static com.google.crypto.tink.proto.OutputPrefixType toProto(\n      KeyTemplate.OutputPrefixType outputPrefixType)", "class_method_signature": "EciesAeadHkdfPrivateKeyManager.toProto(\n      KeyTemplate.OutputPrefixType outputPrefixType)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager.java"}, "focal_method": {"identifier": "getPublicKey", "parameters": "(EciesAeadHkdfPrivateKey key)", "modifiers": "@Override public", "return": "EciesAeadHkdfPublicKey", "body": "@Override\n  public EciesAeadHkdfPublicKey getPublicKey(EciesAeadHkdfPrivateKey key)\n      throws GeneralSecurityException {\n    return key.getPublicKey();\n  }", "signature": "EciesAeadHkdfPublicKey getPublicKey(EciesAeadHkdfPrivateKey key)", "full_signature": "@Override public EciesAeadHkdfPublicKey getPublicKey(EciesAeadHkdfPrivateKey key)", "class_method_signature": "EciesAeadHkdfPrivateKeyManager.getPublicKey(EciesAeadHkdfPrivateKey key)", "testcase": false, "constructor": false, "invocations": ["getPublicKey"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}