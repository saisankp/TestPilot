{"test_class": {"identifier": "JavaBeanSerializeUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtilTest.java"}, "test_case": {"identifier": "testConstructorArg", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConstructorArg() {\n        Assertions.assertFalse((boolean) JavaBeanSerializeUtil.getConstructorArg(boolean.class));\n        Assertions.assertFalse((boolean) JavaBeanSerializeUtil.getConstructorArg(Boolean.class));\n        Assertions.assertEquals((byte) 0, JavaBeanSerializeUtil.getConstructorArg(byte.class));\n        Assertions.assertEquals((byte) 0, JavaBeanSerializeUtil.getConstructorArg(Byte.class));\n        Assertions.assertEquals((short) 0, JavaBeanSerializeUtil.getConstructorArg(short.class));\n        Assertions.assertEquals((short) 0, JavaBeanSerializeUtil.getConstructorArg(Short.class));\n        Assertions.assertEquals(0, JavaBeanSerializeUtil.getConstructorArg(int.class));\n        Assertions.assertEquals(0, JavaBeanSerializeUtil.getConstructorArg(Integer.class));\n        Assertions.assertEquals((long) 0, JavaBeanSerializeUtil.getConstructorArg(long.class));\n        Assertions.assertEquals((long) 0, JavaBeanSerializeUtil.getConstructorArg(Long.class));\n        Assertions.assertEquals((float) 0, JavaBeanSerializeUtil.getConstructorArg(float.class));\n        Assertions.assertEquals((float) 0, JavaBeanSerializeUtil.getConstructorArg(Float.class));\n        Assertions.assertEquals((double) 0, JavaBeanSerializeUtil.getConstructorArg(double.class));\n        Assertions.assertEquals((double) 0, JavaBeanSerializeUtil.getConstructorArg(Double.class));\n        Assertions.assertEquals((char) 0, JavaBeanSerializeUtil.getConstructorArg(char.class));\n        Assertions.assertEquals(new Character((char) 0), JavaBeanSerializeUtil.getConstructorArg(Character.class));\n        Assertions.assertNull(JavaBeanSerializeUtil.getConstructorArg(JavaBeanSerializeUtil.class));\n    }", "signature": "void testConstructorArg()", "full_signature": "@Test public void testConstructorArg()", "class_method_signature": "JavaBeanSerializeUtilTest.testConstructorArg()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "getConstructorArg", "assertFalse", "getConstructorArg", "assertEquals", "getConstructorArg", "assertEquals", "getConstructorArg", "assertEquals", "getConstructorArg", "assertEquals", "getConstructorArg", "assertEquals", "getConstructorArg", "assertEquals", "getConstructorArg", "assertEquals", "getConstructorArg", "assertEquals", "getConstructorArg", "assertEquals", "getConstructorArg", "assertEquals", "getConstructorArg", "assertEquals", "getConstructorArg", "assertEquals", "getConstructorArg", "assertEquals", "getConstructorArg", "assertEquals", "getConstructorArg", "assertNull", "getConstructorArg"]}, "focal_class": {"identifier": "JavaBeanSerializeUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(JavaBeanSerializeUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JavaBeanSerializeUtil.class)", "var_name": "logger"}, {"original_string": "private static final Map<String, Class<?>> TYPES = new HashMap<String, Class<?>>();", "modifier": "private static final", "type": "Map<String, Class<?>>", "declarator": "TYPES = new HashMap<String, Class<?>>()", "var_name": "TYPES"}, {"original_string": "private static final String ARRAY_PREFIX = \"[\";", "modifier": "private static final", "type": "String", "declarator": "ARRAY_PREFIX = \"[\"", "var_name": "ARRAY_PREFIX"}, {"original_string": "private static final String REFERENCE_TYPE_PREFIX = \"L\";", "modifier": "private static final", "type": "String", "declarator": "REFERENCE_TYPE_PREFIX = \"L\"", "var_name": "REFERENCE_TYPE_PREFIX"}, {"original_string": "private static final String REFERENCE_TYPE_SUFFIX = \";\";", "modifier": "private static final", "type": "String", "declarator": "REFERENCE_TYPE_SUFFIX = \";\"", "var_name": "REFERENCE_TYPE_SUFFIX"}], "methods": [{"identifier": "JavaBeanSerializeUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " JavaBeanSerializeUtil()", "full_signature": "private  JavaBeanSerializeUtil()", "class_method_signature": "JavaBeanSerializeUtil.JavaBeanSerializeUtil()", "testcase": false, "constructor": true}, {"identifier": "serialize", "parameters": "(Object obj)", "modifiers": "public static", "return": "JavaBeanDescriptor", "signature": "JavaBeanDescriptor serialize(Object obj)", "full_signature": "public static JavaBeanDescriptor serialize(Object obj)", "class_method_signature": "JavaBeanSerializeUtil.serialize(Object obj)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(Object obj, JavaBeanAccessor accessor)", "modifiers": "public static", "return": "JavaBeanDescriptor", "signature": "JavaBeanDescriptor serialize(Object obj, JavaBeanAccessor accessor)", "full_signature": "public static JavaBeanDescriptor serialize(Object obj, JavaBeanAccessor accessor)", "class_method_signature": "JavaBeanSerializeUtil.serialize(Object obj, JavaBeanAccessor accessor)", "testcase": false, "constructor": false}, {"identifier": "createDescriptorForSerialize", "parameters": "(Class<?> cl)", "modifiers": "private static", "return": "JavaBeanDescriptor", "signature": "JavaBeanDescriptor createDescriptorForSerialize(Class<?> cl)", "full_signature": "private static JavaBeanDescriptor createDescriptorForSerialize(Class<?> cl)", "class_method_signature": "JavaBeanSerializeUtil.createDescriptorForSerialize(Class<?> cl)", "testcase": false, "constructor": false}, {"identifier": "createDescriptorIfAbsent", "parameters": "(Object obj, JavaBeanAccessor accessor,\n                                                               IdentityHashMap<Object, JavaBeanDescriptor> cache)", "modifiers": "private static", "return": "JavaBeanDescriptor", "signature": "JavaBeanDescriptor createDescriptorIfAbsent(Object obj, JavaBeanAccessor accessor,\n                                                               IdentityHashMap<Object, JavaBeanDescriptor> cache)", "full_signature": "private static JavaBeanDescriptor createDescriptorIfAbsent(Object obj, JavaBeanAccessor accessor,\n                                                               IdentityHashMap<Object, JavaBeanDescriptor> cache)", "class_method_signature": "JavaBeanSerializeUtil.createDescriptorIfAbsent(Object obj, JavaBeanAccessor accessor,\n                                                               IdentityHashMap<Object, JavaBeanDescriptor> cache)", "testcase": false, "constructor": false}, {"identifier": "serializeInternal", "parameters": "(JavaBeanDescriptor descriptor, Object obj, JavaBeanAccessor accessor,\n                                          IdentityHashMap<Object, JavaBeanDescriptor> cache)", "modifiers": "private static", "return": "void", "signature": "void serializeInternal(JavaBeanDescriptor descriptor, Object obj, JavaBeanAccessor accessor,\n                                          IdentityHashMap<Object, JavaBeanDescriptor> cache)", "full_signature": "private static void serializeInternal(JavaBeanDescriptor descriptor, Object obj, JavaBeanAccessor accessor,\n                                          IdentityHashMap<Object, JavaBeanDescriptor> cache)", "class_method_signature": "JavaBeanSerializeUtil.serializeInternal(JavaBeanDescriptor descriptor, Object obj, JavaBeanAccessor accessor,\n                                          IdentityHashMap<Object, JavaBeanDescriptor> cache)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(JavaBeanDescriptor beanDescriptor)", "modifiers": "public static", "return": "Object", "signature": "Object deserialize(JavaBeanDescriptor beanDescriptor)", "full_signature": "public static Object deserialize(JavaBeanDescriptor beanDescriptor)", "class_method_signature": "JavaBeanSerializeUtil.deserialize(JavaBeanDescriptor beanDescriptor)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(JavaBeanDescriptor beanDescriptor, ClassLoader loader)", "modifiers": "public static", "return": "Object", "signature": "Object deserialize(JavaBeanDescriptor beanDescriptor, ClassLoader loader)", "full_signature": "public static Object deserialize(JavaBeanDescriptor beanDescriptor, ClassLoader loader)", "class_method_signature": "JavaBeanSerializeUtil.deserialize(JavaBeanDescriptor beanDescriptor, ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "deserializeInternal", "parameters": "(Object result, JavaBeanDescriptor beanDescriptor, ClassLoader loader,\n                                            IdentityHashMap<JavaBeanDescriptor, Object> cache)", "modifiers": "private static", "return": "void", "signature": "void deserializeInternal(Object result, JavaBeanDescriptor beanDescriptor, ClassLoader loader,\n                                            IdentityHashMap<JavaBeanDescriptor, Object> cache)", "full_signature": "private static void deserializeInternal(Object result, JavaBeanDescriptor beanDescriptor, ClassLoader loader,\n                                            IdentityHashMap<JavaBeanDescriptor, Object> cache)", "class_method_signature": "JavaBeanSerializeUtil.deserializeInternal(Object result, JavaBeanDescriptor beanDescriptor, ClassLoader loader,\n                                            IdentityHashMap<JavaBeanDescriptor, Object> cache)", "testcase": false, "constructor": false}, {"identifier": "getSetterMethod", "parameters": "(Class<?> cls, String property, Class<?> valueCls)", "modifiers": "private static", "return": "Method", "signature": "Method getSetterMethod(Class<?> cls, String property, Class<?> valueCls)", "full_signature": "private static Method getSetterMethod(Class<?> cls, String property, Class<?> valueCls)", "class_method_signature": "JavaBeanSerializeUtil.getSetterMethod(Class<?> cls, String property, Class<?> valueCls)", "testcase": false, "constructor": false}, {"identifier": "instantiate", "parameters": "(Class<?> cl)", "modifiers": "private static", "return": "Object", "signature": "Object instantiate(Class<?> cl)", "full_signature": "private static Object instantiate(Class<?> cl)", "class_method_signature": "JavaBeanSerializeUtil.instantiate(Class<?> cl)", "testcase": false, "constructor": false}, {"identifier": "getConstructorArg", "parameters": "(Class<?> cl)", "modifiers": "public static", "return": "Object", "signature": "Object getConstructorArg(Class<?> cl)", "full_signature": "public static Object getConstructorArg(Class<?> cl)", "class_method_signature": "JavaBeanSerializeUtil.getConstructorArg(Class<?> cl)", "testcase": false, "constructor": false}, {"identifier": "instantiateForDeserialize", "parameters": "(JavaBeanDescriptor beanDescriptor, ClassLoader loader,\n                                                    IdentityHashMap<JavaBeanDescriptor, Object> cache)", "modifiers": "private static", "return": "Object", "signature": "Object instantiateForDeserialize(JavaBeanDescriptor beanDescriptor, ClassLoader loader,\n                                                    IdentityHashMap<JavaBeanDescriptor, Object> cache)", "full_signature": "private static Object instantiateForDeserialize(JavaBeanDescriptor beanDescriptor, ClassLoader loader,\n                                                    IdentityHashMap<JavaBeanDescriptor, Object> cache)", "class_method_signature": "JavaBeanSerializeUtil.instantiateForDeserialize(JavaBeanDescriptor beanDescriptor, ClassLoader loader,\n                                                    IdentityHashMap<JavaBeanDescriptor, Object> cache)", "testcase": false, "constructor": false}, {"identifier": "name2Class", "parameters": "(ClassLoader loader, String name)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> name2Class(ClassLoader loader, String name)", "full_signature": "public static Class<?> name2Class(ClassLoader loader, String name)", "class_method_signature": "JavaBeanSerializeUtil.name2Class(ClassLoader loader, String name)", "testcase": false, "constructor": false}, {"identifier": "isArray", "parameters": "(String type)", "modifiers": "private static", "return": "boolean", "signature": "boolean isArray(String type)", "full_signature": "private static boolean isArray(String type)", "class_method_signature": "JavaBeanSerializeUtil.isArray(String type)", "testcase": false, "constructor": false}, {"identifier": "isReferenceType", "parameters": "(String type)", "modifiers": "private static", "return": "boolean", "signature": "boolean isReferenceType(String type)", "full_signature": "private static boolean isReferenceType(String type)", "class_method_signature": "JavaBeanSerializeUtil.isReferenceType(String type)", "testcase": false, "constructor": false}, {"identifier": "getEnumValueOfMethod", "parameters": "(Class cl)", "modifiers": "private static", "return": "Method", "signature": "Method getEnumValueOfMethod(Class cl)", "full_signature": "private static Method getEnumValueOfMethod(Class cl)", "class_method_signature": "JavaBeanSerializeUtil.getEnumValueOfMethod(Class cl)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtil.java"}, "focal_method": {"identifier": "getConstructorArg", "parameters": "(Class<?> cl)", "modifiers": "public static", "return": "Object", "body": "public static Object getConstructorArg(Class<?> cl) {\n        if (boolean.class.equals(cl) || Boolean.class.equals(cl)) {\n            return Boolean.FALSE;\n        }\n\n        if (byte.class.equals(cl) || Byte.class.equals(cl)) {\n            return (byte) 0;\n        }\n\n        if (short.class.equals(cl) || Short.class.equals(cl)) {\n            return (short) 0;\n        }\n\n        if (int.class.equals(cl) || Integer.class.equals(cl)) {\n            return 0;\n        }\n\n        if (long.class.equals(cl) || Long.class.equals(cl)) {\n            return 0L;\n        }\n\n        if (float.class.equals(cl) || Float.class.equals(cl)) {\n            return (float) 0;\n        }\n\n        if (double.class.equals(cl) || Double.class.equals(cl)) {\n            return (double) 0;\n        }\n\n        if (char.class.equals(cl) || Character.class.equals(cl)) {\n            return (char) 0;\n        }\n        return null;\n    }", "signature": "Object getConstructorArg(Class<?> cl)", "full_signature": "public static Object getConstructorArg(Class<?> cl)", "class_method_signature": "JavaBeanSerializeUtil.getConstructorArg(Class<?> cl)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}