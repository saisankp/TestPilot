{"test_class": {"identifier": "NiciraNvpGuestNetworkGuruTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long NETWORK_ID = 42L;", "modifier": "private static final", "type": "long", "declarator": "NETWORK_ID = 42L", "var_name": "NETWORK_ID"}, {"original_string": "PhysicalNetworkDao physnetdao = mock(PhysicalNetworkDao.class);", "modifier": "", "type": "PhysicalNetworkDao", "declarator": "physnetdao = mock(PhysicalNetworkDao.class)", "var_name": "physnetdao"}, {"original_string": "NiciraNvpDao nvpdao = mock(NiciraNvpDao.class);", "modifier": "", "type": "NiciraNvpDao", "declarator": "nvpdao = mock(NiciraNvpDao.class)", "var_name": "nvpdao"}, {"original_string": "DataCenterDao dcdao = mock(DataCenterDao.class);", "modifier": "", "type": "DataCenterDao", "declarator": "dcdao = mock(DataCenterDao.class)", "var_name": "dcdao"}, {"original_string": "NetworkOfferingServiceMapDao nosd = mock(NetworkOfferingServiceMapDao.class);", "modifier": "", "type": "NetworkOfferingServiceMapDao", "declarator": "nosd = mock(NetworkOfferingServiceMapDao.class)", "var_name": "nosd"}, {"original_string": "AgentManager agentmgr = mock(AgentManager.class);", "modifier": "", "type": "AgentManager", "declarator": "agentmgr = mock(AgentManager.class)", "var_name": "agentmgr"}, {"original_string": "NetworkOrchestrationService netmgr = mock(NetworkOrchestrationService.class);", "modifier": "", "type": "NetworkOrchestrationService", "declarator": "netmgr = mock(NetworkOrchestrationService.class)", "var_name": "netmgr"}, {"original_string": "NetworkModel netmodel = mock(NetworkModel.class);", "modifier": "", "type": "NetworkModel", "declarator": "netmodel = mock(NetworkModel.class)", "var_name": "netmodel"}, {"original_string": "HostDao hostdao = mock(HostDao.class);", "modifier": "", "type": "HostDao", "declarator": "hostdao = mock(HostDao.class)", "var_name": "hostdao"}, {"original_string": "NetworkDao netdao = mock(NetworkDao.class);", "modifier": "", "type": "NetworkDao", "declarator": "netdao = mock(NetworkDao.class)", "var_name": "netdao"}, {"original_string": "NiciraNvpGuestNetworkGuru guru;", "modifier": "", "type": "NiciraNvpGuestNetworkGuru", "declarator": "guru", "var_name": "guru"}], "file": "plugins/network-elements/nicira-nvp/src/test/java/com/cloud/network/guru/NiciraNvpGuestNetworkGuruTest.java"}, "test_case": {"identifier": "testCanHandle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCanHandle() {\n        final NetworkOffering offering = mock(NetworkOffering.class);\n        when(offering.getId()).thenReturn(NETWORK_ID);\n        when(offering.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(offering.getGuestType()).thenReturn(GuestType.Isolated);\n\n        final PhysicalNetworkVO physnet = mock(PhysicalNetworkVO.class);\n        when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[] {\"STT\", \"VXLAN\"}));\n        when(physnet.getId()).thenReturn(NETWORK_ID);\n\n        when(nosd.areServicesSupportedByNetworkOffering(NETWORK_ID, Service.Connectivity)).thenReturn(true);\n\n        assertTrue(guru.canHandle(offering, NetworkType.Advanced, physnet) == true);\n\n        // Supported: IsolationMethod == VXLAN\n        when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[] {\"VXLAN\"}));\n        assertTrue(guru.canHandle(offering, NetworkType.Advanced, physnet) == true);\n\n        // Not supported TrafficType != Guest\n        when(offering.getTrafficType()).thenReturn(TrafficType.Management);\n        assertFalse(guru.canHandle(offering, NetworkType.Advanced, physnet) == true);\n\n        // Not supported: GuestType Shared\n        when(offering.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(offering.getGuestType()).thenReturn(GuestType.Shared);\n        assertFalse(guru.canHandle(offering, NetworkType.Advanced, physnet) == true);\n\n        // Not supported: Basic networking\n        when(offering.getGuestType()).thenReturn(GuestType.Isolated);\n        assertFalse(guru.canHandle(offering, NetworkType.Basic, physnet) == true);\n\n        // Not supported: IsolationMethod != STT, VXLAN\n        when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[] {\"VLAN\"}));\n        assertFalse(guru.canHandle(offering, NetworkType.Advanced, physnet) == true);\n\n    }", "signature": "void testCanHandle()", "full_signature": "@Test public void testCanHandle()", "class_method_signature": "NiciraNvpGuestNetworkGuruTest.testCanHandle()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getId", "thenReturn", "when", "getTrafficType", "thenReturn", "when", "getGuestType", "mock", "thenReturn", "when", "getIsolationMethods", "asList", "thenReturn", "when", "getId", "thenReturn", "when", "areServicesSupportedByNetworkOffering", "assertTrue", "canHandle", "thenReturn", "when", "getIsolationMethods", "asList", "assertTrue", "canHandle", "thenReturn", "when", "getTrafficType", "assertFalse", "canHandle", "thenReturn", "when", "getTrafficType", "thenReturn", "when", "getGuestType", "assertFalse", "canHandle", "thenReturn", "when", "getGuestType", "assertFalse", "canHandle", "thenReturn", "when", "getIsolationMethods", "asList", "assertFalse", "canHandle"]}, "focal_class": {"identifier": "NiciraNvpGuestNetworkGuru", "superclass": "extends GuestNetworkGuru", "interfaces": "", "fields": [{"original_string": "private static final int MAX_NAME_LENGTH = 40;", "modifier": "private static final", "type": "int", "declarator": "MAX_NAME_LENGTH = 40", "var_name": "MAX_NAME_LENGTH"}, {"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(NiciraNvpGuestNetworkGuru.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(NiciraNvpGuestNetworkGuru.class)", "var_name": "s_logger"}, {"original_string": "@Inject\n    protected NetworkModel networkModel;", "modifier": "@Inject\n    protected", "type": "NetworkModel", "declarator": "networkModel", "var_name": "networkModel"}, {"original_string": "@Inject\n    protected NetworkDao networkDao;", "modifier": "@Inject\n    protected", "type": "NetworkDao", "declarator": "networkDao", "var_name": "networkDao"}, {"original_string": "@Inject\n    protected DataCenterDao zoneDao;", "modifier": "@Inject\n    protected", "type": "DataCenterDao", "declarator": "zoneDao", "var_name": "zoneDao"}, {"original_string": "@Inject\n    protected PhysicalNetworkDao physicalNetworkDao;", "modifier": "@Inject\n    protected", "type": "PhysicalNetworkDao", "declarator": "physicalNetworkDao", "var_name": "physicalNetworkDao"}, {"original_string": "@Inject\n    protected AccountDao accountDao;", "modifier": "@Inject\n    protected", "type": "AccountDao", "declarator": "accountDao", "var_name": "accountDao"}, {"original_string": "@Inject\n    protected NiciraNvpDao niciraNvpDao;", "modifier": "@Inject\n    protected", "type": "NiciraNvpDao", "declarator": "niciraNvpDao", "var_name": "niciraNvpDao"}, {"original_string": "@Inject\n    protected HostDao hostDao;", "modifier": "@Inject\n    protected", "type": "HostDao", "declarator": "hostDao", "var_name": "hostDao"}, {"original_string": "@Inject\n    protected ResourceManager resourceMgr;", "modifier": "@Inject\n    protected", "type": "ResourceManager", "declarator": "resourceMgr", "var_name": "resourceMgr"}, {"original_string": "@Inject\n    protected AgentManager agentMgr;", "modifier": "@Inject\n    protected", "type": "AgentManager", "declarator": "agentMgr", "var_name": "agentMgr"}, {"original_string": "@Inject\n    protected HostDetailsDao hostDetailsDao;", "modifier": "@Inject\n    protected", "type": "HostDetailsDao", "declarator": "hostDetailsDao", "var_name": "hostDetailsDao"}, {"original_string": "@Inject\n    protected NetworkOfferingServiceMapDao ntwkOfferingSrvcDao;", "modifier": "@Inject\n    protected", "type": "NetworkOfferingServiceMapDao", "declarator": "ntwkOfferingSrvcDao", "var_name": "ntwkOfferingSrvcDao"}], "methods": [{"identifier": "NiciraNvpGuestNetworkGuru", "parameters": "()", "modifiers": "public", "return": "", "signature": " NiciraNvpGuestNetworkGuru()", "full_signature": "public  NiciraNvpGuestNetworkGuru()", "class_method_signature": "NiciraNvpGuestNetworkGuru.NiciraNvpGuestNetworkGuru()", "testcase": false, "constructor": true}, {"identifier": "canHandle", "parameters": "(final NetworkOffering offering, final NetworkType networkType, final PhysicalNetwork physicalNetwork)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean canHandle(final NetworkOffering offering, final NetworkType networkType, final PhysicalNetwork physicalNetwork)", "full_signature": "@Override protected boolean canHandle(final NetworkOffering offering, final NetworkType networkType, final PhysicalNetwork physicalNetwork)", "class_method_signature": "NiciraNvpGuestNetworkGuru.canHandle(final NetworkOffering offering, final NetworkType networkType, final PhysicalNetwork physicalNetwork)", "testcase": false, "constructor": false}, {"identifier": "design", "parameters": "(final NetworkOffering offering, final DeploymentPlan plan, final Network userSpecified, final Account owner)", "modifiers": "@Override public", "return": "Network", "signature": "Network design(final NetworkOffering offering, final DeploymentPlan plan, final Network userSpecified, final Account owner)", "full_signature": "@Override public Network design(final NetworkOffering offering, final DeploymentPlan plan, final Network userSpecified, final Account owner)", "class_method_signature": "NiciraNvpGuestNetworkGuru.design(final NetworkOffering offering, final DeploymentPlan plan, final Network userSpecified, final Account owner)", "testcase": false, "constructor": false}, {"identifier": "checkThatLogicalSwitchExists", "parameters": "(final Network userSpecified, final NiciraNvpDeviceVO niciraNvpDeviceVO)", "modifiers": "private", "return": "void", "signature": "void checkThatLogicalSwitchExists(final Network userSpecified, final NiciraNvpDeviceVO niciraNvpDeviceVO)", "full_signature": "private void checkThatLogicalSwitchExists(final Network userSpecified, final NiciraNvpDeviceVO niciraNvpDeviceVO)", "class_method_signature": "NiciraNvpGuestNetworkGuru.checkThatLogicalSwitchExists(final Network userSpecified, final NiciraNvpDeviceVO niciraNvpDeviceVO)", "testcase": false, "constructor": false}, {"identifier": "lswitchExists", "parameters": "(String lswitchUuid, NiciraNvpDeviceVO niciraNvpDeviceVO)", "modifiers": "private", "return": "boolean", "signature": "boolean lswitchExists(String lswitchUuid, NiciraNvpDeviceVO niciraNvpDeviceVO)", "full_signature": "private boolean lswitchExists(String lswitchUuid, NiciraNvpDeviceVO niciraNvpDeviceVO)", "class_method_signature": "NiciraNvpGuestNetworkGuru.lswitchExists(String lswitchUuid, NiciraNvpDeviceVO niciraNvpDeviceVO)", "testcase": false, "constructor": false}, {"identifier": "implement", "parameters": "(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)", "modifiers": "@Override public", "return": "Network", "signature": "Network implement(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)", "full_signature": "@Override public Network implement(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)", "class_method_signature": "NiciraNvpGuestNetworkGuru.implement(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "reserve", "parameters": "(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "modifiers": "@Override public", "return": "void", "signature": "void reserve(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "full_signature": "@Override public void reserve(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "class_method_signature": "NiciraNvpGuestNetworkGuru.reserve(final NicProfile nic, final Network network, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(final NicProfile nic, final VirtualMachineProfile vm, final String reservationId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean release(final NicProfile nic, final VirtualMachineProfile vm, final String reservationId)", "full_signature": "@Override public boolean release(final NicProfile nic, final VirtualMachineProfile vm, final String reservationId)", "class_method_signature": "NiciraNvpGuestNetworkGuru.release(final NicProfile nic, final VirtualMachineProfile vm, final String reservationId)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "(final NetworkProfile profile, final NetworkOffering offering)", "modifiers": "@Override public", "return": "void", "signature": "void shutdown(final NetworkProfile profile, final NetworkOffering offering)", "full_signature": "@Override public void shutdown(final NetworkProfile profile, final NetworkOffering offering)", "class_method_signature": "NiciraNvpGuestNetworkGuru.shutdown(final NetworkProfile profile, final NetworkOffering offering)", "testcase": false, "constructor": false}, {"identifier": "trash", "parameters": "(final Network network, final NetworkOffering offering)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean trash(final Network network, final NetworkOffering offering)", "full_signature": "@Override public boolean trash(final Network network, final NetworkOffering offering)", "class_method_signature": "NiciraNvpGuestNetworkGuru.trash(final Network network, final NetworkOffering offering)", "testcase": false, "constructor": false}], "file": "plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/guru/NiciraNvpGuestNetworkGuru.java"}, "focal_method": {"identifier": "canHandle", "parameters": "(final NetworkOffering offering, final NetworkType networkType, final PhysicalNetwork physicalNetwork)", "modifiers": "@Override protected", "return": "boolean", "body": "@Override\n    protected boolean canHandle(final NetworkOffering offering, final NetworkType networkType, final PhysicalNetwork physicalNetwork) {\n        // This guru handles only Guest Isolated network that supports Source nat service\n        if (networkType == NetworkType.Advanced && isMyTrafficType(offering.getTrafficType()) && offering.getGuestType() == Network.GuestType.Isolated\n                && isMyIsolationMethod(physicalNetwork) && ntwkOfferingSrvcDao.areServicesSupportedByNetworkOffering(offering.getId(), Service.Connectivity)) {\n            return true;\n        } else {\n\t    s_logger.debug(\"Cannot handle rquest. See GuestNetworkGuru message to check isolation methods. Details I have:\\nNetwork type = \" + networkType + \"\\nTraffic type = \" + offering.getTrafficType() + \"\\nGuest type = \" + offering.getGuestType());\n            return false;\n        }\n    }", "signature": "boolean canHandle(final NetworkOffering offering, final NetworkType networkType, final PhysicalNetwork physicalNetwork)", "full_signature": "@Override protected boolean canHandle(final NetworkOffering offering, final NetworkType networkType, final PhysicalNetwork physicalNetwork)", "class_method_signature": "NiciraNvpGuestNetworkGuru.canHandle(final NetworkOffering offering, final NetworkType networkType, final PhysicalNetwork physicalNetwork)", "testcase": false, "constructor": false, "invocations": ["isMyTrafficType", "getTrafficType", "getGuestType", "isMyIsolationMethod", "areServicesSupportedByNetworkOffering", "getId", "debug", "getTrafficType", "getGuestType"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}