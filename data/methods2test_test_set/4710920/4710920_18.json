{"test_class": {"identifier": "SelectTelnetHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static TelnetHandler select = new SelectTelnetHandler();", "modifier": "private static", "type": "TelnetHandler", "declarator": "select = new SelectTelnetHandler()", "var_name": "select"}, {"original_string": "private Channel mockChannel;", "modifier": "private", "type": "Channel", "declarator": "mockChannel", "var_name": "mockChannel"}, {"original_string": "List<Method> methods;", "modifier": "", "type": "List<Method>", "declarator": "methods", "var_name": "methods"}, {"original_string": "private final ServiceRepository repository = ApplicationModel.getServiceRepository();", "modifier": "private final", "type": "ServiceRepository", "declarator": "repository = ApplicationModel.getServiceRepository()", "var_name": "repository"}], "file": "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/legacy/SelectTelnetHandlerTest.java"}, "test_case": {"identifier": "testInvokeWithNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvokeWithNull() throws RemotingException {\n        mockChannel = mock(Channel.class);\n        given(mockChannel.getAttribute(\"telnet.service\")).willReturn(DemoService.class.getName());\n        given(mockChannel.getAttribute(InvokeTelnetHandler.INVOKE_METHOD_LIST_KEY)).willReturn(methods);\n        given(mockChannel.getLocalAddress()).willReturn(NetUtils.toAddress(\"127.0.0.1:5555\"));\n        given(mockChannel.getRemoteAddress()).willReturn(NetUtils.toAddress(\"127.0.0.1:20886\"));\n\n        registerProvider(DemoService.class.getName(), new DemoServiceImpl(), DemoService.class);\n\n        String result = select.telnet(mockChannel, null);\n        assertTrue(result.contains(\"Please input the index of the method you want to invoke\"));\n    }", "signature": "void testInvokeWithNull()", "full_signature": "@Test public void testInvokeWithNull()", "class_method_signature": "SelectTelnetHandlerTest.testInvokeWithNull()", "testcase": true, "constructor": false, "invocations": ["mock", "willReturn", "given", "getAttribute", "getName", "willReturn", "given", "getAttribute", "willReturn", "given", "getLocalAddress", "toAddress", "willReturn", "given", "getRemoteAddress", "toAddress", "registerProvider", "getName", "telnet", "assertTrue", "contains"]}, "focal_class": {"identifier": "SelectTelnetHandler", "superclass": "", "interfaces": "implements TelnetHandler", "fields": [{"original_string": "public static final String SELECT_METHOD_KEY = \"telnet.select.method\";", "modifier": "public static final", "type": "String", "declarator": "SELECT_METHOD_KEY = \"telnet.select.method\"", "var_name": "SELECT_METHOD_KEY"}, {"original_string": "public static final String SELECT_KEY = \"telnet.select\";", "modifier": "public static final", "type": "String", "declarator": "SELECT_KEY = \"telnet.select\"", "var_name": "SELECT_KEY"}, {"original_string": "private InvokeTelnetHandler invokeTelnetHandler = new InvokeTelnetHandler();", "modifier": "private", "type": "InvokeTelnetHandler", "declarator": "invokeTelnetHandler = new InvokeTelnetHandler()", "var_name": "invokeTelnetHandler"}], "methods": [{"identifier": "telnet", "parameters": "(Channel channel, String message)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "String", "signature": "String telnet(Channel channel, String message)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public String telnet(Channel channel, String message)", "class_method_signature": "SelectTelnetHandler.telnet(Channel channel, String message)", "testcase": false, "constructor": false}], "file": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/legacy/SelectTelnetHandler.java"}, "focal_method": {"identifier": "telnet", "parameters": "(Channel channel, String message)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "String", "body": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public String telnet(Channel channel, String message) {\n        if (message == null || message.length() == 0) {\n            return \"Please input the index of the method you want to invoke, eg: \\r\\n select 1\";\n        }\n        List<Method> methodList = (List<Method>) channel.getAttribute(InvokeTelnetHandler.INVOKE_METHOD_LIST_KEY);\n        if (CollectionUtils.isEmpty(methodList)) {\n            return \"Please use the invoke command first.\";\n        }\n        if (!StringUtils.isInteger(message) || Integer.parseInt(message) < 1 || Integer.parseInt(message) > methodList.size()) {\n            return \"Illegal index ,please input select 1~\" + methodList.size();\n        }\n        Method method = methodList.get(Integer.parseInt(message) - 1);\n        channel.setAttribute(SELECT_METHOD_KEY, method);\n        channel.setAttribute(SELECT_KEY, Boolean.TRUE);\n        String invokeMessage = (String) channel.getAttribute(InvokeTelnetHandler.INVOKE_MESSAGE_KEY);\n        return invokeTelnetHandler.telnet(channel, invokeMessage);\n    }", "signature": "String telnet(Channel channel, String message)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public String telnet(Channel channel, String message)", "class_method_signature": "SelectTelnetHandler.telnet(Channel channel, String message)", "testcase": false, "constructor": false, "invocations": ["length", "getAttribute", "isEmpty", "isInteger", "parseInt", "parseInt", "size", "size", "get", "parseInt", "setAttribute", "setAttribute", "getAttribute", "telnet"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}