{"test_class": {"identifier": "GridMultiWidgetTest", "superclass": "extends GeneralSelectMultiWidgetTest<GridMultiWidget>", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}, {"original_string": "@Mock\n    private ReferenceManager referenceManager;", "modifier": "@Mock\n    private", "type": "ReferenceManager", "declarator": "referenceManager", "var_name": "referenceManager"}, {"original_string": "@Mock\n    private AudioHelper audioHelper;", "modifier": "@Mock\n    private", "type": "AudioHelper", "declarator": "audioHelper", "var_name": "audioHelper"}, {"original_string": "@Mock\n    private Analytics analytics;", "modifier": "@Mock\n    private", "type": "Analytics", "declarator": "analytics", "var_name": "analytics"}], "file": "collect_app/src/test/java/org/odk/collect/android/widgets/GridMultiWidgetTest.java"}, "test_case": {"identifier": "getAnswerShouldReflectWhichSelectionsWereMade", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAnswerShouldReflectWhichSelectionsWereMade() {\n        GridMultiWidget widget = getWidget();\n        assertNull(widget.getAnswer());\n\n        List<SelectChoice> selectChoices = getSelectChoices();\n        List<String> selectedValues = new ArrayList<>();\n\n        boolean atLeastOneSelected = false;\n\n        for (int i = 0; i < widget.selectedItems.size(); i++) {\n            boolean shouldBeSelected = random.nextBoolean();\n            if (shouldBeSelected) {\n                widget.selectedItems.add(i);\n            }\n\n            atLeastOneSelected = atLeastOneSelected || shouldBeSelected;\n\n            if (shouldBeSelected) {\n                SelectChoice selectChoice = selectChoices.get(i);\n                selectedValues.add(selectChoice.getValue());\n            }\n        }\n\n        // Make sure at least one item is selected, so we're not just retesting the\n        // null answer case:\n        if (!atLeastOneSelected) {\n            int randomIndex = Math.abs(random.nextInt()) % widget.items.size();\n\n            widget.selectedItems.add(randomIndex);\n            SelectChoice selectChoice = selectChoices.get(randomIndex);\n            selectedValues.add(selectChoice.getValue());\n        }\n\n        SelectMultiData answer = (SelectMultiData) widget.getAnswer();\n\n        @SuppressWarnings(\"unchecked\")\n        List<Selection> answerSelections = (List<Selection>) answer.getValue();\n        List<String> answerValues = selectionsToValues(answerSelections);\n\n        for (String selectedValue : selectedValues) {\n            assertTrue(answerValues.contains(selectedValue));\n        }\n    }", "signature": "void getAnswerShouldReflectWhichSelectionsWereMade()", "full_signature": "@Test public void getAnswerShouldReflectWhichSelectionsWereMade()", "class_method_signature": "GridMultiWidgetTest.getAnswerShouldReflectWhichSelectionsWereMade()", "testcase": true, "constructor": false, "invocations": ["getWidget", "assertNull", "getAnswer", "getSelectChoices", "size", "nextBoolean", "add", "get", "add", "getValue", "abs", "nextInt", "size", "add", "get", "add", "getValue", "getAnswer", "getValue", "selectionsToValues", "assertTrue", "contains"]}, "focal_class": {"identifier": "GridMultiWidget", "superclass": "extends BaseGridWidget", "interfaces": "", "fields": [], "methods": [{"identifier": "GridMultiWidget", "parameters": "(Context context, QuestionDetails questionDetails)", "modifiers": "public", "return": "", "signature": " GridMultiWidget(Context context, QuestionDetails questionDetails)", "full_signature": "public  GridMultiWidget(Context context, QuestionDetails questionDetails)", "class_method_signature": "GridMultiWidget.GridMultiWidget(Context context, QuestionDetails questionDetails)", "testcase": false, "constructor": true}, {"identifier": "fillInAnswer", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void fillInAnswer()", "full_signature": "@Override protected void fillInAnswer()", "class_method_signature": "GridMultiWidget.fillInAnswer()", "testcase": false, "constructor": false}, {"identifier": "onItemClick", "parameters": "(int index)", "modifiers": "@Override protected", "return": "void", "signature": "void onItemClick(int index)", "full_signature": "@Override protected void onItemClick(int index)", "class_method_signature": "GridMultiWidget.onItemClick(int index)", "testcase": false, "constructor": false}, {"identifier": "getAnswer", "parameters": "()", "modifiers": "@Override public", "return": "IAnswerData", "signature": "IAnswerData getAnswer()", "full_signature": "@Override public IAnswerData getAnswer()", "class_method_signature": "GridMultiWidget.getAnswer()", "testcase": false, "constructor": false}, {"identifier": "setChoiceSelected", "parameters": "(int choiceIndex, boolean isSelected)", "modifiers": "@Override public", "return": "void", "signature": "void setChoiceSelected(int choiceIndex, boolean isSelected)", "full_signature": "@Override public void setChoiceSelected(int choiceIndex, boolean isSelected)", "class_method_signature": "GridMultiWidget.setChoiceSelected(int choiceIndex, boolean isSelected)", "testcase": false, "constructor": false}], "file": "collect_app/src/main/java/org/odk/collect/android/widgets/GridMultiWidget.java"}, "focal_method": {"identifier": "getAnswer", "parameters": "()", "modifiers": "@Override public", "return": "IAnswerData", "body": "@Override\n    public IAnswerData getAnswer() {\n        List<Selection> answers = new ArrayList<>();\n        for (int selectedItem : selectedItems) {\n            SelectChoice sc = items.get(selectedItem);\n            answers.add(new Selection(sc));\n        }\n        return answers.isEmpty() ? null : new SelectMultiData(answers);\n    }", "signature": "IAnswerData getAnswer()", "full_signature": "@Override public IAnswerData getAnswer()", "class_method_signature": "GridMultiWidget.getAnswer()", "testcase": false, "constructor": false, "invocations": ["get", "add", "isEmpty"]}, "repository": {"repo_id": 166636413, "url": "https://github.com/fieldsight/fieldsight-mobile", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 41030, "license": "licensed"}}