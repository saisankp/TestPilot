{"test_class": {"identifier": "MinHostsTest", "superclass": "extends TestWithGitBackedRepository", "interfaces": "", "fields": [], "file": "org.eclipse.winery.repository/src/test/java/org/eclipse/winery/repository/targetallocation/criteria/minhosts/MinHostsTest.java"}, "test_case": {"identifier": "testTwoTargetLabelsPresent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTwoTargetLabelsPresent() throws Exception {\n        ServiceTemplateId id = new ServiceTemplateId(\"http://www.winery.opentosca.org/test/targetallocation/servicetemplates\",\n            \"TargetAllocationMinHostsTest3\", false);\n        TopologyWrapper topology = new TopologyWrapper(repository.getElement(id).getTopologyTemplate());\n        Criteria minHosts = new MinHosts(null, Integer.MAX_VALUE);\n\n        List<TopologyWrapper> topologies = minHosts.allocate(topology);\n        assertEquals(2, topologies.size());\n        TTopologyTemplate topology1 = topologies.get(0).getTopology();\n        TTopologyTemplate topology2 = topologies.get(1).getTopology();\n        assertEquals(8, topology1.getNodeTemplateOrRelationshipTemplate().size());\n        assertEquals(8, topology2.getNodeTemplateOrRelationshipTemplate().size());\n\n        List<String> types1 = new ArrayList<>();\n        for (TNodeTemplate nodeTemplate : topology1.getNodeTemplates()) {\n            types1.add(nodeTemplate.getType().getLocalPart());\n        }\n        assertEquals(5, types1.size());\n        assertEquals(3, types1.stream().filter(type -> type.equalsIgnoreCase(\"shetland_pony\")).count());\n        assertEquals(1, types1.stream().filter(type -> type.equalsIgnoreCase(\"pasture\")).count());\n        assertEquals(1, types1.stream().filter(type -> type.equalsIgnoreCase(\"field_-w1-wip1\")).count());\n        for (TNodeTemplate nodeTemplate : topologies.get(0).getTopLevelHosts()) {\n            List<TNodeTemplate> predecessors = topologies.get(0).getHostedOnPredecessors(nodeTemplate);\n            if (nodeTemplate.getType().getLocalPart().equalsIgnoreCase(\"pasture\")) {\n                assertEquals(predecessors.size(), 2);\n            } else if (nodeTemplate.getType().getLocalPart().equalsIgnoreCase(\"field\")) {\n                assertEquals(predecessors.size(), 1);\n            }\n        }\n\n        List<String> types2 = new ArrayList<>();\n        for (TNodeTemplate nodeTemplate : topology2.getNodeTemplates()) {\n            types2.add(nodeTemplate.getType().getLocalPart());\n        }\n        assertEquals(5, types2.size());\n        assertEquals(3, types2.stream().filter(type -> type.equalsIgnoreCase(\"shetland_pony\")).count());\n        assertEquals(1, types2.stream().filter(type -> type.equalsIgnoreCase(\"pasture\")).count());\n        assertEquals(1, types2.stream().filter(type -> type.equalsIgnoreCase(\"field_-w1-wip1\")).count());\n        for (TNodeTemplate nodeTemplate : topologies.get(1).getTopLevelHosts()) {\n            List<TNodeTemplate> predecessors = topologies.get(1).getHostedOnPredecessors(nodeTemplate);\n            if (nodeTemplate.getType().getLocalPart().equalsIgnoreCase(\"pasture\")) {\n                assertEquals(predecessors.size(), 1);\n            } else if (nodeTemplate.getType().getLocalPart().equalsIgnoreCase(\"field\")) {\n                assertEquals(predecessors.size(), 2);\n            }\n        }\n    }", "signature": "void testTwoTargetLabelsPresent()", "full_signature": "@Test public void testTwoTargetLabelsPresent()", "class_method_signature": "MinHostsTest.testTwoTargetLabelsPresent()", "testcase": true, "constructor": false, "invocations": ["getTopologyTemplate", "getElement", "allocate", "assertEquals", "size", "getTopology", "get", "getTopology", "get", "assertEquals", "size", "getNodeTemplateOrRelationshipTemplate", "assertEquals", "size", "getNodeTemplateOrRelationshipTemplate", "getNodeTemplates", "add", "getLocalPart", "getType", "assertEquals", "size", "assertEquals", "count", "filter", "stream", "equalsIgnoreCase", "assertEquals", "count", "filter", "stream", "equalsIgnoreCase", "assertEquals", "count", "filter", "stream", "equalsIgnoreCase", "getTopLevelHosts", "get", "getHostedOnPredecessors", "get", "equalsIgnoreCase", "getLocalPart", "getType", "assertEquals", "size", "equalsIgnoreCase", "getLocalPart", "getType", "assertEquals", "size", "getNodeTemplates", "add", "getLocalPart", "getType", "assertEquals", "size", "assertEquals", "count", "filter", "stream", "equalsIgnoreCase", "assertEquals", "count", "filter", "stream", "equalsIgnoreCase", "assertEquals", "count", "filter", "stream", "equalsIgnoreCase", "getTopLevelHosts", "get", "getHostedOnPredecessors", "get", "equalsIgnoreCase", "getLocalPart", "getType", "assertEquals", "size", "equalsIgnoreCase", "getLocalPart", "getType", "assertEquals", "size"]}, "focal_class": {"identifier": "MinHosts", "superclass": "extends CriteriaCommon", "interfaces": "", "fields": [], "methods": [{"identifier": "MinHosts", "parameters": "(JsonNode params, int outputCap)", "modifiers": "public", "return": "", "signature": " MinHosts(JsonNode params, int outputCap)", "full_signature": "public  MinHosts(JsonNode params, int outputCap)", "class_method_signature": "MinHosts.MinHosts(JsonNode params, int outputCap)", "testcase": false, "constructor": true}, {"identifier": "filter", "parameters": "(List<TopologyWrapper> topologies)", "modifiers": "@Override public", "return": "List<TopologyWrapper>", "signature": "List<TopologyWrapper> filter(List<TopologyWrapper> topologies)", "full_signature": "@Override public List<TopologyWrapper> filter(List<TopologyWrapper> topologies)", "class_method_signature": "MinHosts.filter(List<TopologyWrapper> topologies)", "testcase": false, "constructor": false}, {"identifier": "generateTargetLabelTopologies", "parameters": "(TopologyWrapper topology)", "modifiers": "@Override public", "return": "List<TopologyWrapper>", "signature": "List<TopologyWrapper> generateTargetLabelTopologies(TopologyWrapper topology)", "full_signature": "@Override public List<TopologyWrapper> generateTargetLabelTopologies(TopologyWrapper topology)", "class_method_signature": "MinHosts.generateTargetLabelTopologies(TopologyWrapper topology)", "testcase": false, "constructor": false}, {"identifier": "getPossibleMatches", "parameters": "(TopologyWrapper topology)", "modifiers": "@Override protected", "return": "List<List<PermutationHelper>>", "signature": "List<List<PermutationHelper>> getPossibleMatches(TopologyWrapper topology)", "full_signature": "@Override protected List<List<PermutationHelper>> getPossibleMatches(TopologyWrapper topology)", "class_method_signature": "MinHosts.getPossibleMatches(TopologyWrapper topology)", "testcase": false, "constructor": false}, {"identifier": "getPermutations", "parameters": "(List<List<PermutationHelper>> possibilities)", "modifiers": "@Override protected", "return": "List<List<PermutationHelper>>", "signature": "List<List<PermutationHelper>> getPermutations(List<List<PermutationHelper>> possibilities)", "full_signature": "@Override protected List<List<PermutationHelper>> getPermutations(List<List<PermutationHelper>> possibilities)", "class_method_signature": "MinHosts.getPermutations(List<List<PermutationHelper>> possibilities)", "testcase": false, "constructor": false}, {"identifier": "toPermutationHelpers", "parameters": "(Map<TNodeTemplate, List<TTopologyTemplate>> possibleReplacements)", "modifiers": "private", "return": "List<List<PermutationHelper>>", "signature": "List<List<PermutationHelper>> toPermutationHelpers(Map<TNodeTemplate, List<TTopologyTemplate>> possibleReplacements)", "full_signature": "private List<List<PermutationHelper>> toPermutationHelpers(Map<TNodeTemplate, List<TTopologyTemplate>> possibleReplacements)", "class_method_signature": "MinHosts.toPermutationHelpers(Map<TNodeTemplate, List<TTopologyTemplate>> possibleReplacements)", "testcase": false, "constructor": false}, {"identifier": "toInjectParameter", "parameters": "(TopologyWrapper topology, List<PermutationHelper> permutation)", "modifiers": "@Override protected", "return": "Map<String, TTopologyTemplate>", "signature": "Map<String, TTopologyTemplate> toInjectParameter(TopologyWrapper topology, List<PermutationHelper> permutation)", "full_signature": "@Override protected Map<String, TTopologyTemplate> toInjectParameter(TopologyWrapper topology, List<PermutationHelper> permutation)", "class_method_signature": "MinHosts.toInjectParameter(TopologyWrapper topology, List<PermutationHelper> permutation)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/targetallocation/criteria/minhosts/MinHosts.java"}, "focal_method": {"identifier": "filter", "parameters": "(List<TopologyWrapper> topologies)", "modifiers": "@Override public", "return": "List<TopologyWrapper>", "body": "@Override\n    public List<TopologyWrapper> filter(List<TopologyWrapper> topologies) {\n        int minCount = Collections.min(topologies, Comparator.comparingInt(t -> t.getNodeTemplates().size()))\n            .getNodeTemplates().size();\n        return topologies.stream().filter(t -> t.getNodeTemplates().size() == minCount).collect(Collectors.toList());\n    }", "signature": "List<TopologyWrapper> filter(List<TopologyWrapper> topologies)", "full_signature": "@Override public List<TopologyWrapper> filter(List<TopologyWrapper> topologies)", "class_method_signature": "MinHosts.filter(List<TopologyWrapper> topologies)", "testcase": false, "constructor": false, "invocations": ["size", "getNodeTemplates", "min", "comparingInt", "size", "getNodeTemplates", "collect", "filter", "stream", "size", "getNodeTemplates", "toList"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}