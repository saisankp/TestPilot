{"test_class": {"identifier": "ReflectionUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "jbpm/jbpm-flow-builder/src/test/java/org/jbpm/compiler/canonical/ReflectionUtilsTest.java"}, "test_case": {"identifier": "testGetMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetMethod() throws ReflectiveOperationException {\n        ServiceExample instance = new ServiceExample();\n        Method m = ReflectionUtils\n            .getMethod(\n                Thread.currentThread().getContextClassLoader(),\n                ServiceExample.class,\n                \"primitiveType\",\n                Arrays.asList(\"String\", \"Integer\"));\n        assertEquals(Integer.valueOf(2), m.invoke(instance, \"pepe\", 2));\n        m = ReflectionUtils\n            .getMethod(\n                Thread.currentThread().getContextClassLoader(),\n                ServiceExample.class,\n                \"primitiveType\",\n                Arrays.asList(\"String\", \"Float\"));\n        assertEquals(Float.valueOf(2.0f), m.invoke(instance, \"pepe\", 2.0f));\n    }", "signature": "void testGetMethod()", "full_signature": "@Test public void testGetMethod()", "class_method_signature": "ReflectionUtilsTest.testGetMethod()", "testcase": true, "constructor": false, "invocations": ["getMethod", "getContextClassLoader", "currentThread", "asList", "assertEquals", "valueOf", "invoke", "getMethod", "getContextClassLoader", "currentThread", "asList", "assertEquals", "valueOf", "invoke"]}, "focal_class": {"identifier": "ReflectionUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ReflectionUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ReflectionUtils.class)", "var_name": "logger"}, {"original_string": "private static Map<Class<?>, Class<?>> wrappers2Primitive = new ConcurrentHashMap<>();", "modifier": "private static", "type": "Map<Class<?>, Class<?>>", "declarator": "wrappers2Primitive = new ConcurrentHashMap<>()", "var_name": "wrappers2Primitive"}], "methods": [{"identifier": "ReflectionUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ReflectionUtils()", "full_signature": "private  ReflectionUtils()", "class_method_signature": "ReflectionUtils.ReflectionUtils()", "testcase": false, "constructor": true}, {"identifier": "isWrapper", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isWrapper(Class<?> clazz)", "full_signature": "public static boolean isWrapper(Class<?> clazz)", "class_method_signature": "ReflectionUtils.isWrapper(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getPrimitive", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getPrimitive(Class<?> clazz)", "full_signature": "public static Class<?> getPrimitive(Class<?> clazz)", "class_method_signature": "ReflectionUtils.getPrimitive(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(ClassLoader cl,\n                  Class<?> clazz,\n                  String methodName,\n                  Collection<String> parameterTypes)", "modifiers": "public static", "return": "Method", "signature": "Method getMethod(ClassLoader cl,\n                  Class<?> clazz,\n                  String methodName,\n                  Collection<String> parameterTypes)", "full_signature": "public static Method getMethod(ClassLoader cl,\n                  Class<?> clazz,\n                  String methodName,\n                  Collection<String> parameterTypes)", "class_method_signature": "ReflectionUtils.getMethod(ClassLoader cl,\n                  Class<?> clazz,\n                  String methodName,\n                  Collection<String> parameterTypes)", "testcase": false, "constructor": false}], "file": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ReflectionUtils.java"}, "focal_method": {"identifier": "getMethod", "parameters": "(ClassLoader cl,\n                  Class<?> clazz,\n                  String methodName,\n                  Collection<String> parameterTypes)", "modifiers": "public static", "return": "Method", "body": "public static Method\n        getMethod(ClassLoader cl,\n                  Class<?> clazz,\n                  String methodName,\n                  Collection<String> parameterTypes) throws ReflectiveOperationException {\n        \n        boolean hasPrimitive = false;\n        Class<?>[] methodParameters = new Class<?> [parameterTypes.size()];\n        Class<?>[] primitiveParameters = new Class<?> [parameterTypes.size()];\n        \n        Iterator<String> iter = parameterTypes.iterator(); \n        int i = 0;\n        while (iter.hasNext()) {\n            String parameter = iter.next();\n            if (!parameter.contains(\".\")) {\n                parameter = \"java.lang.\" + parameter;\n            }\n            Class<?> parameterClass = cl.loadClass(parameter);\n            methodParameters[i] = parameterClass;\n            Class<?> primitive = wrappers2Primitive.get(parameterClass);\n            if (primitive != null) {\n                primitiveParameters[i] = primitive;\n                hasPrimitive = true;\n            } else {\n                primitiveParameters[i] = parameterClass;\n            }\n            i++;\n        }\n        try {\n            return clazz.getMethod(methodName, methodParameters);\n        }\n        catch (NoSuchMethodException ex) {\n            if (hasPrimitive) {\n               try {\n                   return clazz.getMethod(methodName,primitiveParameters);\n               }\n               catch (NoSuchMethodException ex2) {\n                   logger.warn(\"Unable to find method {} with primitive arguments {}\", methodName, primitiveParameters);\n               }\n           }\n           throw ex;\n       }\n    }", "signature": "Method getMethod(ClassLoader cl,\n                  Class<?> clazz,\n                  String methodName,\n                  Collection<String> parameterTypes)", "full_signature": "public static Method getMethod(ClassLoader cl,\n                  Class<?> clazz,\n                  String methodName,\n                  Collection<String> parameterTypes)", "class_method_signature": "ReflectionUtils.getMethod(ClassLoader cl,\n                  Class<?> clazz,\n                  String methodName,\n                  Collection<String> parameterTypes)", "testcase": false, "constructor": false, "invocations": ["size", "size", "iterator", "hasNext", "next", "contains", "loadClass", "get", "getMethod", "getMethod", "warn"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}