{"test_class": {"identifier": "IntHashMapTest", "superclass": "extends AbstractBaseIntMapTest", "interfaces": "", "fields": [], "file": "modules/core/src/test/java/org/apache/ignite/internal/util/collection/IntHashMapTest.java"}, "test_case": {"identifier": "shouldReturnsRequiredTableSizeForCustomCapacity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnsRequiredTableSizeForCustomCapacity() {\n        assertEquals(INITIAL_CAPACITY, IntHashMap.tableSize(1));\n        assertEquals(MAXIMUM_CAPACITY, IntHashMap.tableSize(Integer.MAX_VALUE));\n    }", "signature": "void shouldReturnsRequiredTableSizeForCustomCapacity()", "full_signature": "@Test public void shouldReturnsRequiredTableSizeForCustomCapacity()", "class_method_signature": "IntHashMapTest.shouldReturnsRequiredTableSizeForCustomCapacity()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "tableSize", "assertEquals", "tableSize"]}, "focal_class": {"identifier": "IntHashMap", "superclass": "", "interfaces": "implements IntMap<V>", "fields": [{"original_string": "public static final int INITIAL_CAPACITY = 8;", "modifier": "public static final", "type": "int", "declarator": "INITIAL_CAPACITY = 8", "var_name": "INITIAL_CAPACITY"}, {"original_string": "public static final int MAXIMUM_CAPACITY = 1 << 30;", "modifier": "public static final", "type": "int", "declarator": "MAXIMUM_CAPACITY = 1 << 30", "var_name": "MAXIMUM_CAPACITY"}, {"original_string": "private static final int MAGIC_HASH_MIXER = 0x9E3779B9;", "modifier": "private static final", "type": "int", "declarator": "MAGIC_HASH_MIXER = 0x9E3779B9", "var_name": "MAGIC_HASH_MIXER"}, {"original_string": "private static final float SCALE_LOAD_FACTOR = 0.7F;", "modifier": "private static final", "type": "float", "declarator": "SCALE_LOAD_FACTOR = 0.7F", "var_name": "SCALE_LOAD_FACTOR"}, {"original_string": "private static final float COMPACT_LOAD_FACTOR = 0.2F;", "modifier": "private static final", "type": "float", "declarator": "COMPACT_LOAD_FACTOR = 0.2F", "var_name": "COMPACT_LOAD_FACTOR"}, {"original_string": "private int scaleThreshold;", "modifier": "private", "type": "int", "declarator": "scaleThreshold", "var_name": "scaleThreshold"}, {"original_string": "private int compactThreshold;", "modifier": "private", "type": "int", "declarator": "compactThreshold", "var_name": "compactThreshold"}, {"original_string": "private Entry<V>[] entries;", "modifier": "private", "type": "Entry<V>[]", "declarator": "entries", "var_name": "entries"}, {"original_string": "private int size;", "modifier": "private", "type": "int", "declarator": "size", "var_name": "size"}], "methods": [{"identifier": "tableSize", "parameters": "(int cap)", "modifiers": "static", "return": "int", "signature": "int tableSize(int cap)", "full_signature": "static int tableSize(int cap)", "class_method_signature": "IntHashMap.tableSize(int cap)", "testcase": false, "constructor": false}, {"identifier": "IntHashMap", "parameters": "()", "modifiers": "public", "return": "", "signature": " IntHashMap()", "full_signature": "public  IntHashMap()", "class_method_signature": "IntHashMap.IntHashMap()", "testcase": false, "constructor": true}, {"identifier": "IntHashMap", "parameters": "(int cap)", "modifiers": "public", "return": "", "signature": " IntHashMap(int cap)", "full_signature": "public  IntHashMap(int cap)", "class_method_signature": "IntHashMap.IntHashMap(int cap)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(int key)", "modifiers": "@Override public", "return": "V", "signature": "V get(int key)", "full_signature": "@Override public V get(int key)", "class_method_signature": "IntHashMap.get(int key)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(int key, V val)", "modifiers": "@Override public", "return": "V", "signature": "V put(int key, V val)", "full_signature": "@Override public V put(int key, V val)", "class_method_signature": "IntHashMap.put(int key, V val)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int key)", "modifiers": "@Override public", "return": "V", "signature": "V remove(int key)", "full_signature": "@Override public V remove(int key)", "class_method_signature": "IntHashMap.remove(int key)", "testcase": false, "constructor": false}, {"identifier": "putIfAbsent", "parameters": "(int key, V val)", "modifiers": "@Override public", "return": "V", "signature": "V putIfAbsent(int key, V val)", "full_signature": "@Override public V putIfAbsent(int key, V val)", "class_method_signature": "IntHashMap.putIfAbsent(int key, V val)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(EntryConsumer<V, E> act)", "modifiers": "@Override public", "return": "void", "signature": "void forEach(EntryConsumer<V, E> act)", "full_signature": "@Override public void forEach(EntryConsumer<V, E> act)", "class_method_signature": "IntHashMap.forEach(EntryConsumer<V, E> act)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "IntHashMap.size()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "IntHashMap.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(int key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsKey(int key)", "full_signature": "@Override public boolean containsKey(int key)", "class_method_signature": "IntHashMap.containsKey(int key)", "testcase": false, "constructor": false}, {"identifier": "containsValue", "parameters": "(V val)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsValue(V val)", "full_signature": "@Override public boolean containsValue(V val)", "class_method_signature": "IntHashMap.containsValue(V val)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "IntHashMap.toString()", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(int curIdx, int key)", "modifiers": "protected", "return": "int", "signature": "int distance(int curIdx, int key)", "full_signature": "protected int distance(int curIdx, int key)", "class_method_signature": "IntHashMap.distance(int curIdx, int key)", "testcase": false, "constructor": false}, {"identifier": "index", "parameters": "(int key)", "modifiers": "protected", "return": "int", "signature": "int index(int key)", "full_signature": "protected int index(int key)", "class_method_signature": "IntHashMap.index(int key)", "testcase": false, "constructor": false}, {"identifier": "put0", "parameters": "(Entry<V> entry)", "modifiers": "private", "return": "V", "signature": "V put0(Entry<V> entry)", "full_signature": "private V put0(Entry<V> entry)", "class_method_signature": "IntHashMap.put0(Entry<V> entry)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(int key)", "modifiers": "private", "return": "int", "signature": "int find(int key)", "full_signature": "private int find(int key)", "class_method_signature": "IntHashMap.find(int key)", "testcase": false, "constructor": false}, {"identifier": "resize", "parameters": "(boolean increase)", "modifiers": "private", "return": "void", "signature": "void resize(boolean increase)", "full_signature": "private void resize(boolean increase)", "class_method_signature": "IntHashMap.resize(boolean increase)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/apache/ignite/internal/util/collection/IntHashMap.java"}, "focal_method": {"identifier": "tableSize", "parameters": "(int cap)", "modifiers": "static", "return": "int", "body": "static int tableSize(int cap) {\n        int n = cap - 1;\n        n |= n >>> 1;\n        n |= n >>> 2;\n        n |= n >>> 4;\n        n |= n >>> 8;\n        n |= n >>> 16;\n\n        return (n < INITIAL_CAPACITY) ? INITIAL_CAPACITY : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n    }", "signature": "int tableSize(int cap)", "full_signature": "static int tableSize(int cap)", "class_method_signature": "IntHashMap.tableSize(int cap)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}