{"test_class": {"identifier": "JDBCObjectStoreTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zms/src/test/java/com/yahoo/athenz/zms/store/jdbc/JDBCObjectStoreTest.java"}, "test_case": {"identifier": "testGetReadWriteConnectionException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetReadWriteConnectionException() throws SQLException {\n        PoolableDataSource mockDataRwSrc = Mockito.mock(PoolableDataSource.class);\n        Connection mockConn = Mockito.mock(Connection.class);\n        Mockito.doReturn(mockConn).when(mockDataRwSrc).getConnection();\n        PoolableDataSource mockDataRoSrc = Mockito.mock(PoolableDataSource.class);\n        Mockito.doThrow(new SQLException()).when(mockDataRoSrc).getConnection();\n        JDBCObjectStore store = new JDBCObjectStore(mockDataRwSrc, mockDataRoSrc);\n        \n        // we should get back same read-write connection for both cases\n        \n        JDBCConnection jdbcConn = (JDBCConnection) store.getConnection(true, true);\n        assertEquals(jdbcConn.con, mockConn);\n        \n        jdbcConn = (JDBCConnection) store.getConnection(true, false);\n        assertEquals(jdbcConn.con, mockConn);\n    }", "signature": "void testGetReadWriteConnectionException()", "full_signature": "@Test public void testGetReadWriteConnectionException()", "class_method_signature": "JDBCObjectStoreTest.testGetReadWriteConnectionException()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "getConnection", "when", "doReturn", "mock", "getConnection", "when", "doThrow", "getConnection", "assertEquals", "getConnection", "assertEquals"]}, "focal_class": {"identifier": "JDBCObjectStore", "superclass": "", "interfaces": "implements ObjectStore", "fields": [{"original_string": "final PoolableDataSource rwSrc;", "modifier": "final", "type": "PoolableDataSource", "declarator": "rwSrc", "var_name": "rwSrc"}, {"original_string": "PoolableDataSource roSrc;", "modifier": "", "type": "PoolableDataSource", "declarator": "roSrc", "var_name": "roSrc"}, {"original_string": "private int opTimeout = 60;", "modifier": "private", "type": "int", "declarator": "opTimeout = 60", "var_name": "opTimeout"}], "methods": [{"identifier": "JDBCObjectStore", "parameters": "(PoolableDataSource rwSrc, PoolableDataSource roSrc)", "modifiers": "public", "return": "", "signature": " JDBCObjectStore(PoolableDataSource rwSrc, PoolableDataSource roSrc)", "full_signature": "public  JDBCObjectStore(PoolableDataSource rwSrc, PoolableDataSource roSrc)", "class_method_signature": "JDBCObjectStore.JDBCObjectStore(PoolableDataSource rwSrc, PoolableDataSource roSrc)", "testcase": false, "constructor": true}, {"identifier": "getConnection", "parameters": "(boolean autoCommit, boolean readWrite)", "modifiers": "@Override public", "return": "ObjectStoreConnection", "signature": "ObjectStoreConnection getConnection(boolean autoCommit, boolean readWrite)", "full_signature": "@Override public ObjectStoreConnection getConnection(boolean autoCommit, boolean readWrite)", "class_method_signature": "JDBCObjectStore.getConnection(boolean autoCommit, boolean readWrite)", "testcase": false, "constructor": false}, {"identifier": "setOperationTimeout", "parameters": "(int opTimeout)", "modifiers": "@Override public", "return": "void", "signature": "void setOperationTimeout(int opTimeout)", "full_signature": "@Override public void setOperationTimeout(int opTimeout)", "class_method_signature": "JDBCObjectStore.setOperationTimeout(int opTimeout)", "testcase": false, "constructor": false}, {"identifier": "clearConnections", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearConnections()", "full_signature": "@Override public void clearConnections()", "class_method_signature": "JDBCObjectStore.clearConnections()", "testcase": false, "constructor": false}], "file": "servers/zms/src/main/java/com/yahoo/athenz/zms/store/jdbc/JDBCObjectStore.java"}, "focal_method": {"identifier": "getConnection", "parameters": "(boolean autoCommit, boolean readWrite)", "modifiers": "@Override public", "return": "ObjectStoreConnection", "body": "@Override\n    public ObjectStoreConnection getConnection(boolean autoCommit, boolean readWrite) {\n        final String caller = \"getConnection\";\n        try {\n            PoolableDataSource src = readWrite ? rwSrc : roSrc;\n            JDBCConnection jdbcConn = new JDBCConnection(src.getConnection(), autoCommit);\n            jdbcConn.setOperationTimeout(opTimeout);\n            return jdbcConn;\n        } catch (Exception ex) {\n            \n            // if this was a read-only operation and we failed to get a connection\n            // then we're going to try to get a connection from our read-write\n            // pool first before throwing an exception\n            \n            if (!readWrite) {\n                return getConnection(autoCommit, true);\n            }\n            \n            // otherwise our service is not available and let the caller\n            // retry the request if necessary\n            \n            throw ZMSUtils.error(ResourceException.SERVICE_UNAVAILABLE, ex.getMessage(), caller);\n        }\n    }", "signature": "ObjectStoreConnection getConnection(boolean autoCommit, boolean readWrite)", "full_signature": "@Override public ObjectStoreConnection getConnection(boolean autoCommit, boolean readWrite)", "class_method_signature": "JDBCObjectStore.getConnection(boolean autoCommit, boolean readWrite)", "testcase": false, "constructor": false, "invocations": ["getConnection", "setOperationTimeout", "getConnection", "error", "getMessage"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}