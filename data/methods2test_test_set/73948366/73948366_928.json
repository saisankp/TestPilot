{"test_class": {"identifier": "FileSSHRecordStoreConnectionTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/impl/FileSSHRecordStoreConnectionTest.java"}, "test_case": {"identifier": "testDeleteExpiredSSHCertRecordsNoDir", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeleteExpiredSSHCertRecordsNoDir() {\n\n        // make sure the directory does not exist\n\n        ZTSTestUtils.deleteDirectory(new File(\"/tmp/zts-ssh-tests\"));\n\n        FileSSHRecordStore store = new FileSSHRecordStore(new File(\"/tmp/zts-ssh-tests\"));\n        FileSSHRecordStoreConnection con = (FileSSHRecordStoreConnection) store.getConnection();\n        assertNotNull(con);\n\n        File dir = Mockito.spy(con.rootDir);\n        Mockito.when(dir.list()).thenReturn(null);\n        con.rootDir = dir;\n\n        assertEquals(con.deleteExpiredSSHCertRecords(0), 0);\n    }", "signature": "void testDeleteExpiredSSHCertRecordsNoDir()", "full_signature": "@Test public void testDeleteExpiredSSHCertRecordsNoDir()", "class_method_signature": "FileSSHRecordStoreConnectionTest.testDeleteExpiredSSHCertRecordsNoDir()", "testcase": true, "constructor": false, "invocations": ["deleteDirectory", "getConnection", "assertNotNull", "spy", "thenReturn", "when", "list", "assertEquals", "deleteExpiredSSHCertRecords"]}, "focal_class": {"identifier": "FileSSHRecordStoreConnection", "superclass": "", "interfaces": "implements SSHRecordStoreConnection", "fields": [{"original_string": "File rootDir;", "modifier": "", "type": "File", "declarator": "rootDir", "var_name": "rootDir"}, {"original_string": "FilesHelper filesHelper;", "modifier": "", "type": "FilesHelper", "declarator": "filesHelper", "var_name": "filesHelper"}], "methods": [{"identifier": "FileSSHRecordStoreConnection", "parameters": "(File rootDir)", "modifiers": "public", "return": "", "signature": " FileSSHRecordStoreConnection(File rootDir)", "full_signature": "public  FileSSHRecordStoreConnection(File rootDir)", "class_method_signature": "FileSSHRecordStoreConnection.FileSSHRecordStoreConnection(File rootDir)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "FileSSHRecordStoreConnection.close()", "testcase": false, "constructor": false}, {"identifier": "setOperationTimeout", "parameters": "(int opTimeout)", "modifiers": "@Override public", "return": "void", "signature": "void setOperationTimeout(int opTimeout)", "full_signature": "@Override public void setOperationTimeout(int opTimeout)", "class_method_signature": "FileSSHRecordStoreConnection.setOperationTimeout(int opTimeout)", "testcase": false, "constructor": false}, {"identifier": "getSSHCertRecord", "parameters": "(String instanceId, String service)", "modifiers": "@Override public", "return": "SSHCertRecord", "signature": "SSHCertRecord getSSHCertRecord(String instanceId, String service)", "full_signature": "@Override public SSHCertRecord getSSHCertRecord(String instanceId, String service)", "class_method_signature": "FileSSHRecordStoreConnection.getSSHCertRecord(String instanceId, String service)", "testcase": false, "constructor": false}, {"identifier": "updateSSHCertRecord", "parameters": "(SSHCertRecord certRecord)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateSSHCertRecord(SSHCertRecord certRecord)", "full_signature": "@Override public boolean updateSSHCertRecord(SSHCertRecord certRecord)", "class_method_signature": "FileSSHRecordStoreConnection.updateSSHCertRecord(SSHCertRecord certRecord)", "testcase": false, "constructor": false}, {"identifier": "insertSSHCertRecord", "parameters": "(SSHCertRecord certRecord)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertSSHCertRecord(SSHCertRecord certRecord)", "full_signature": "@Override public boolean insertSSHCertRecord(SSHCertRecord certRecord)", "class_method_signature": "FileSSHRecordStoreConnection.insertSSHCertRecord(SSHCertRecord certRecord)", "testcase": false, "constructor": false}, {"identifier": "deleteSSHCertRecord", "parameters": "(String instanceId, String service)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteSSHCertRecord(String instanceId, String service)", "full_signature": "@Override public boolean deleteSSHCertRecord(String instanceId, String service)", "class_method_signature": "FileSSHRecordStoreConnection.deleteSSHCertRecord(String instanceId, String service)", "testcase": false, "constructor": false}, {"identifier": "deleteExpiredSSHCertRecords", "parameters": "(int expiryTimeMins)", "modifiers": "@Override public", "return": "int", "signature": "int deleteExpiredSSHCertRecords(int expiryTimeMins)", "full_signature": "@Override public int deleteExpiredSSHCertRecords(int expiryTimeMins)", "class_method_signature": "FileSSHRecordStoreConnection.deleteExpiredSSHCertRecords(int expiryTimeMins)", "testcase": false, "constructor": false}, {"identifier": "notExpired", "parameters": "(long currentTime, long lastModified, int expiryTimeMins)", "modifiers": "", "return": "boolean", "signature": "boolean notExpired(long currentTime, long lastModified, int expiryTimeMins)", "full_signature": " boolean notExpired(long currentTime, long lastModified, int expiryTimeMins)", "class_method_signature": "FileSSHRecordStoreConnection.notExpired(long currentTime, long lastModified, int expiryTimeMins)", "testcase": false, "constructor": false}, {"identifier": "getRecordFileName", "parameters": "(final String instanceId, final String service)", "modifiers": "private", "return": "String", "signature": "String getRecordFileName(final String instanceId, final String service)", "full_signature": "private String getRecordFileName(final String instanceId, final String service)", "class_method_signature": "FileSSHRecordStoreConnection.getRecordFileName(final String instanceId, final String service)", "testcase": false, "constructor": false}, {"identifier": "getCertRecord", "parameters": "(String instanceId, String service)", "modifiers": "private synchronized", "return": "SSHCertRecord", "signature": "SSHCertRecord getCertRecord(String instanceId, String service)", "full_signature": "private synchronized SSHCertRecord getCertRecord(String instanceId, String service)", "class_method_signature": "FileSSHRecordStoreConnection.getCertRecord(String instanceId, String service)", "testcase": false, "constructor": false}, {"identifier": "putCertRecord", "parameters": "(SSHCertRecord certRecord)", "modifiers": "private synchronized", "return": "void", "signature": "void putCertRecord(SSHCertRecord certRecord)", "full_signature": "private synchronized void putCertRecord(SSHCertRecord certRecord)", "class_method_signature": "FileSSHRecordStoreConnection.putCertRecord(SSHCertRecord certRecord)", "testcase": false, "constructor": false}, {"identifier": "deleteCertRecord", "parameters": "(String instanceId, String service)", "modifiers": "private synchronized", "return": "void", "signature": "void deleteCertRecord(String instanceId, String service)", "full_signature": "private synchronized void deleteCertRecord(String instanceId, String service)", "class_method_signature": "FileSSHRecordStoreConnection.deleteCertRecord(String instanceId, String service)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/FileSSHRecordStoreConnection.java"}, "focal_method": {"identifier": "deleteExpiredSSHCertRecords", "parameters": "(int expiryTimeMins)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int deleteExpiredSSHCertRecords(int expiryTimeMins) {\n        String[] fnames = rootDir.list();\n        if (fnames == null) {\n            return 0;\n        }\n        long currentTime = System.currentTimeMillis();\n        int count = 0;\n        for (String fname : fnames) {\n            \n            // if the modification timestamp is older than\n            // specified number of minutes then we'll delete it\n            \n            File file = new File(rootDir, fname);\n            if (notExpired(currentTime, file.lastModified(), expiryTimeMins)) {\n                continue;\n            }\n            //noinspection ResultOfMethodCallIgnored\n            file.delete();\n            count += 1;\n        }\n        return count;\n    }", "signature": "int deleteExpiredSSHCertRecords(int expiryTimeMins)", "full_signature": "@Override public int deleteExpiredSSHCertRecords(int expiryTimeMins)", "class_method_signature": "FileSSHRecordStoreConnection.deleteExpiredSSHCertRecords(int expiryTimeMins)", "testcase": false, "constructor": false, "invocations": ["list", "currentTimeMillis", "notExpired", "lastModified", "delete"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}