{"test_class": {"identifier": "RoleAuthorityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String rolVersion = \"Z1\";", "modifier": "private final", "type": "String", "declarator": "rolVersion = \"Z1\"", "var_name": "rolVersion"}, {"original_string": "private final String svcDomain = \"sports\";", "modifier": "private final", "type": "String", "declarator": "svcDomain = \"sports\"", "var_name": "svcDomain"}, {"original_string": "private final String salt = \"aAkjbbDMhnLX\";", "modifier": "private final", "type": "String", "declarator": "salt = \"aAkjbbDMhnLX\"", "var_name": "salt"}, {"original_string": "private final String testKeyVersionK0 = \"0\";", "modifier": "private final", "type": "String", "declarator": "testKeyVersionK0 = \"0\"", "var_name": "testKeyVersionK0"}, {"original_string": "private final String testKeyVersionK1 = \"1\";", "modifier": "private final", "type": "String", "declarator": "testKeyVersionK1 = \"1\"", "var_name": "testKeyVersionK1"}, {"original_string": "private final long expirationTime = 10;", "modifier": "private final", "type": "long", "declarator": "expirationTime = 10", "var_name": "expirationTime"}, {"original_string": "private String ztsPrivateKeyStringK0 = null;", "modifier": "private", "type": "String", "declarator": "ztsPrivateKeyStringK0 = null", "var_name": "ztsPrivateKeyStringK0"}, {"original_string": "private String ztsPrivateKeyStringK1 = null;", "modifier": "private", "type": "String", "declarator": "ztsPrivateKeyStringK1 = null", "var_name": "ztsPrivateKeyStringK1"}, {"original_string": "private static final String ZMS_USER_DOMAIN = \"athenz.user_domain\";", "modifier": "private static final", "type": "String", "declarator": "ZMS_USER_DOMAIN = \"athenz.user_domain\"", "var_name": "ZMS_USER_DOMAIN"}, {"original_string": "private static String userDomain = System.getProperty(ZMS_USER_DOMAIN, \"user\");", "modifier": "private static", "type": "String", "declarator": "userDomain = System.getProperty(ZMS_USER_DOMAIN, \"user\")", "var_name": "userDomain"}], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/impl/RoleAuthorityTest.java"}, "test_case": {"identifier": "testRoleAuthority", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRoleAuthority() throws IOException, CryptoException {\n        RoleAuthority rollAuthority = new RoleAuthority();\n        KeyStore keyStore = new KeyStoreMock();\n        rollAuthority.setKeyStore(keyStore);\n\n        assertEquals(rollAuthority.getDomain(), \"sys.auth\");\n        assertEquals(rollAuthority.getHeader(), \"Athenz-Role-Auth\");\n\n        // Add some roles\n        List<String> roles = new ArrayList<>();\n        roles.add(\"storage.tenant.weather.updater\");\n        roles.add(\"fantasy.tenant.sports.admin\");\n        roles.add(\"fantasy.tenant.sports.reader\");\n        roles.add(\"fantasy.tenant.sports.writer\");\n        roles.add(\"fantasy.tenant.sports.scanner\");\n\n        // Create and sign token with no key version\n        RoleToken rollToken = new RoleToken.Builder(rolVersion, svcDomain, roles)\n                .salt(salt).ip(\"127.0.0.1\").expirationWindow(expirationTime)\n                .principal(\"coretech.storage\").build();\n        rollToken.sign(ztsPrivateKeyStringK0);\n\n        StringBuilder errMsg = new StringBuilder();\n        Principal principal = rollAuthority.authenticate(rollToken.getSignedToken(),\n                \"127.0.0.1\", \"GET\", errMsg);\n\n        assertNotNull(principal);\n        assertNotNull(principal.getAuthority());\n        assertEquals(principal.getCredentials(),\n                rollToken.getSignedToken());\n        assertEquals(principal.getDomain(), rollToken.getDomain());\n\n        principal = rollAuthority.authenticate(rollToken.getSignedToken(),\n                \"127.0.0.1\", \"GET\", null);\n        assertNotNull(principal);\n\n        List<String> rolesToValidate = principal.getRoles();\n        assertEquals(rolesToValidate.size(), roles.size());\n        assertEquals(rolesToValidate, roles);\n\n        // Create and sign token with keyVersion = 0\n        rollToken = new RoleToken.Builder(rolVersion, svcDomain, roles)\n            .salt(salt).ip(\"127.0.0.1\").expirationWindow(expirationTime)\n            .principal(\"coretech.storage\").keyId(testKeyVersionK0).build();\n        rollToken.sign(ztsPrivateKeyStringK0);\n\n        principal = rollAuthority.authenticate(rollToken.getSignedToken(),\n                \"127.0.0.1\", \"GET\", errMsg);\n\n        assertNotNull(principal);\n        assertEquals(principal.getCredentials(),\n                rollToken.getSignedToken());\n        \n        // Create and sign token with keyVersion = 1\n        rollToken = new RoleToken.Builder(rolVersion, svcDomain, roles)\n            .salt(salt).ip(\"127.0.0.1\").expirationWindow(expirationTime)\n            .principal(\"coretech.storage\").keyId(testKeyVersionK1).build();\n        rollToken.sign(ztsPrivateKeyStringK1);\n\n        principal = rollAuthority.authenticate(rollToken.getSignedToken(),\n                \"127.0.0.1\", \"GET\", errMsg);\n\n        assertNotNull(principal);\n        assertEquals(principal.getCredentials(),\n                rollToken.getSignedToken());\n    }", "signature": "void testRoleAuthority()", "full_signature": "@Test public void testRoleAuthority()", "class_method_signature": "RoleAuthorityTest.testRoleAuthority()", "testcase": true, "constructor": false, "invocations": ["setKeyStore", "assertEquals", "getDomain", "assertEquals", "getHeader", "add", "add", "add", "add", "add", "build", "principal", "expirationWindow", "ip", "salt", "sign", "authenticate", "getSignedToken", "assertNotNull", "assertNotNull", "getAuthority", "assertEquals", "getCredentials", "getSignedToken", "assertEquals", "getDomain", "getDomain", "authenticate", "getSignedToken", "assertNotNull", "getRoles", "assertEquals", "size", "size", "assertEquals", "build", "keyId", "principal", "expirationWindow", "ip", "salt", "sign", "authenticate", "getSignedToken", "assertNotNull", "assertEquals", "getCredentials", "getSignedToken", "build", "keyId", "principal", "expirationWindow", "ip", "salt", "sign", "authenticate", "getSignedToken", "assertNotNull", "assertEquals", "getCredentials", "getSignedToken"]}, "focal_class": {"identifier": "RoleAuthority", "superclass": "", "interfaces": "implements Authority, AuthorityKeyStore", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RoleAuthority.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RoleAuthority.class)", "var_name": "LOG"}, {"original_string": "public final static String SYS_AUTH_DOMAIN = \"sys.auth\";", "modifier": "public final static", "type": "String", "declarator": "SYS_AUTH_DOMAIN = \"sys.auth\"", "var_name": "SYS_AUTH_DOMAIN"}, {"original_string": "public final static String ZTS_SERVICE_NAME = \"zts\";", "modifier": "public final static", "type": "String", "declarator": "ZTS_SERVICE_NAME = \"zts\"", "var_name": "ZTS_SERVICE_NAME"}, {"original_string": "private static final String USER_DOMAIN = \"user\";", "modifier": "private static final", "type": "String", "declarator": "USER_DOMAIN = \"user\"", "var_name": "USER_DOMAIN"}, {"original_string": "static final String ATHENZ_PROP_TOKEN_OFFSET = \"athenz.auth.role.token_allowed_offset\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_PROP_TOKEN_OFFSET = \"athenz.auth.role.token_allowed_offset\"", "var_name": "ATHENZ_PROP_TOKEN_OFFSET"}, {"original_string": "static final String ATHENZ_PROP_USER_DOMAIN = \"athenz.user_domain\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_PROP_USER_DOMAIN = \"athenz.user_domain\"", "var_name": "ATHENZ_PROP_USER_DOMAIN"}, {"original_string": "public static final String HTTP_HEADER = \"Athenz-Role-Auth\";", "modifier": "public static final", "type": "String", "declarator": "HTTP_HEADER = \"Athenz-Role-Auth\"", "var_name": "HTTP_HEADER"}, {"original_string": "public static final String ATHENZ_AUTH_CHALLENGE = \"AthenzRoleToken realm=\\\"athenz\\\"\";", "modifier": "public static final", "type": "String", "declarator": "ATHENZ_AUTH_CHALLENGE = \"AthenzRoleToken realm=\\\"athenz\\\"\"", "var_name": "ATHENZ_AUTH_CHALLENGE"}, {"original_string": "public static final String ATHENZ_PROP_ROLE_HEADER = \"athenz.auth.role.header\";", "modifier": "public static final", "type": "String", "declarator": "ATHENZ_PROP_ROLE_HEADER = \"athenz.auth.role.header\"", "var_name": "ATHENZ_PROP_ROLE_HEADER"}, {"original_string": "private int allowedOffset;", "modifier": "private", "type": "int", "declarator": "allowedOffset", "var_name": "allowedOffset"}, {"original_string": "private KeyStore keyStore = null;", "modifier": "private", "type": "KeyStore", "declarator": "keyStore = null", "var_name": "keyStore"}, {"original_string": "String userDomain;", "modifier": "", "type": "String", "declarator": "userDomain", "var_name": "userDomain"}, {"original_string": "String headerName;", "modifier": "", "type": "String", "declarator": "headerName", "var_name": "headerName"}], "methods": [{"identifier": "RoleAuthority", "parameters": "()", "modifiers": "public", "return": "", "signature": " RoleAuthority()", "full_signature": "public  RoleAuthority()", "class_method_signature": "RoleAuthority.RoleAuthority()", "testcase": false, "constructor": true}, {"identifier": "getID", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getID()", "full_signature": "@Override public String getID()", "class_method_signature": "RoleAuthority.getID()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "RoleAuthority.initialize()", "testcase": false, "constructor": false}, {"identifier": "getDomain", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDomain()", "full_signature": "@Override public String getDomain()", "class_method_signature": "RoleAuthority.getDomain()", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getHeader()", "full_signature": "@Override public String getHeader()", "class_method_signature": "RoleAuthority.getHeader()", "testcase": false, "constructor": false}, {"identifier": "getAuthenticateChallenge", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getAuthenticateChallenge()", "full_signature": "@Override public String getAuthenticateChallenge()", "class_method_signature": "RoleAuthority.getAuthenticateChallenge()", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(String signedToken, String remoteAddr, String httpMethod, StringBuilder errMsg)", "modifiers": "@Override public", "return": "Principal", "signature": "Principal authenticate(String signedToken, String remoteAddr, String httpMethod, StringBuilder errMsg)", "full_signature": "@Override public Principal authenticate(String signedToken, String remoteAddr, String httpMethod, StringBuilder errMsg)", "class_method_signature": "RoleAuthority.authenticate(String signedToken, String remoteAddr, String httpMethod, StringBuilder errMsg)", "testcase": false, "constructor": false}, {"identifier": "isWriteOperation", "parameters": "(String httpMethod)", "modifiers": "", "return": "boolean", "signature": "boolean isWriteOperation(String httpMethod)", "full_signature": " boolean isWriteOperation(String httpMethod)", "class_method_signature": "RoleAuthority.isWriteOperation(String httpMethod)", "testcase": false, "constructor": false}, {"identifier": "setKeyStore", "parameters": "(KeyStore keyStore)", "modifiers": "@Override public", "return": "void", "signature": "void setKeyStore(KeyStore keyStore)", "full_signature": "@Override public void setKeyStore(KeyStore keyStore)", "class_method_signature": "RoleAuthority.setKeyStore(KeyStore keyStore)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/RoleAuthority.java"}, "focal_method": {"identifier": "RoleAuthority", "parameters": "()", "modifiers": "public", "return": "", "body": "public RoleAuthority() {\n        allowedOffset = Integer.parseInt(System.getProperty(ATHENZ_PROP_TOKEN_OFFSET, \"300\"));\n        userDomain = System.getProperty(ATHENZ_PROP_USER_DOMAIN, USER_DOMAIN);\n        headerName = System.getProperty(ATHENZ_PROP_ROLE_HEADER, HTTP_HEADER);\n\n        // case of invalid value, we'll default back to 5 minutes\n        \n        if (allowedOffset < 0) {\n            allowedOffset = 300;\n        }\n    }", "signature": " RoleAuthority()", "full_signature": "public  RoleAuthority()", "class_method_signature": "RoleAuthority.RoleAuthority()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}