{"test_class": {"identifier": "UDFCatalogResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String CUSTOM_UDF_MICROTEST_PATH = \"target/generated-test-resources/customudfupload\";", "modifier": "public static final", "type": "String", "declarator": "CUSTOM_UDF_MICROTEST_PATH = \"target/generated-test-resources/customudfupload\"", "var_name": "CUSTOM_UDF_MICROTEST_PATH"}, {"original_string": "public static final String MICROTEST_JAR_NAME = \"custom-udf-microtest-jar-with-dependencies.jar\";", "modifier": "public static final", "type": "String", "declarator": "MICROTEST_JAR_NAME = \"custom-udf-microtest-jar-with-dependencies.jar\"", "var_name": "MICROTEST_JAR_NAME"}, {"original_string": "public static final String MICROTEST_PACKAGE = \"hortonworks.hdf.sam.custom.test.udf\";", "modifier": "public static final", "type": "String", "declarator": "MICROTEST_PACKAGE = \"hortonworks.hdf.sam.custom.test.udf\"", "var_name": "MICROTEST_PACKAGE"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(UDFCatalogResourceTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(UDFCatalogResourceTest.class)", "var_name": "LOG"}, {"original_string": "private static final StreamlineAuthorizer authorizer = new NoopAuthorizer();", "modifier": "private static final", "type": "StreamlineAuthorizer", "declarator": "authorizer = new NoopAuthorizer()", "var_name": "authorizer"}, {"original_string": "@Injectable private StreamCatalogService catalogService;", "modifier": "@Injectable private", "type": "StreamCatalogService", "declarator": "catalogService", "var_name": "catalogService"}, {"original_string": "String testStorageDirectory;", "modifier": "", "type": "String", "declarator": "testStorageDirectory", "var_name": "testStorageDirectory"}, {"original_string": "FileStorage fileStorage;", "modifier": "", "type": "FileStorage", "declarator": "fileStorage", "var_name": "fileStorage"}, {"original_string": "UDFCatalogResource catalogResource;", "modifier": "", "type": "UDFCatalogResource", "declarator": "catalogResource", "var_name": "catalogResource"}], "file": "streams/service/src/test/java/com/hortonworks/streamline/streams/service/UDFCatalogResourceTest.java"}, "test_case": {"identifier": "testProcessUdfWithInnerClassCanonicalName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testProcessUdfWithInnerClassCanonicalName() throws Exception{\n    String fnName = \"FooAdder\";\n    String fqdnName = \"FooInnerclassTestUDFs$FooAdder\";\n    String canonicalName = \"FooInnerclassTestUDFs.FooAdder\";\n    String className = getFullClassName(canonicalName);\n    UDF udf = newTestUDF(fnName, className);\n    InputStream inputStream = new FileInputStream(udf.getJarStoragePath());\n\n    catalogResource.processUdf(inputStream, udf, true, false);\n    Assert.assertEquals(getFullClassName(fqdnName), udf.getClassName());\n  }", "signature": "void testProcessUdfWithInnerClassCanonicalName()", "full_signature": "@Test public void testProcessUdfWithInnerClassCanonicalName()", "class_method_signature": "UDFCatalogResourceTest.testProcessUdfWithInnerClassCanonicalName()", "testcase": true, "constructor": false, "invocations": ["getFullClassName", "newTestUDF", "getJarStoragePath", "processUdf", "assertEquals", "getFullClassName", "getClassName"]}, "focal_class": {"identifier": "UDFCatalogResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(UDFCatalogResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(UDFCatalogResource.class)", "var_name": "LOG"}, {"original_string": "private final StreamlineAuthorizer authorizer;", "modifier": "private final", "type": "StreamlineAuthorizer", "declarator": "authorizer", "var_name": "authorizer"}, {"original_string": "private final StreamCatalogService catalogService;", "modifier": "private final", "type": "StreamCatalogService", "declarator": "catalogService", "var_name": "catalogService"}, {"original_string": "private final FileStorage fileStorage;", "modifier": "private final", "type": "FileStorage", "declarator": "fileStorage", "var_name": "fileStorage"}], "methods": [{"identifier": "UDFCatalogResource", "parameters": "(StreamlineAuthorizer authorizer, StreamCatalogService catalogService, FileStorage fileStorage)", "modifiers": "public", "return": "", "signature": " UDFCatalogResource(StreamlineAuthorizer authorizer, StreamCatalogService catalogService, FileStorage fileStorage)", "full_signature": "public  UDFCatalogResource(StreamlineAuthorizer authorizer, StreamCatalogService catalogService, FileStorage fileStorage)", "class_method_signature": "UDFCatalogResource.UDFCatalogResource(StreamlineAuthorizer authorizer, StreamCatalogService catalogService, FileStorage fileStorage)", "testcase": false, "constructor": true}, {"identifier": "listUDFs", "parameters": "(@Context UriInfo uriInfo,\n                             @Context SecurityContext securityContext)", "modifiers": "@GET @Path(\"/udfs\") @Timed public", "return": "Response", "signature": "Response listUDFs(@Context UriInfo uriInfo,\n                             @Context SecurityContext securityContext)", "full_signature": "@GET @Path(\"/udfs\") @Timed public Response listUDFs(@Context UriInfo uriInfo,\n                             @Context SecurityContext securityContext)", "class_method_signature": "UDFCatalogResource.listUDFs(@Context UriInfo uriInfo,\n                             @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "getUDFById", "parameters": "(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "modifiers": "@GET @Path(\"/udfs/{id}\") @Timed public", "return": "Response", "signature": "Response getUDFById(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "full_signature": "@GET @Path(\"/udfs/{id}\") @Timed public Response getUDFById(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "class_method_signature": "UDFCatalogResource.getUDFById(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "addUDF", "parameters": "(@FormDataParam(\"udfJarFile\") final InputStream inputStream,\n                           @FormDataParam(\"udfJarFile\") final FormDataContentDisposition contentDispositionHeader,\n                           @FormDataParam(\"udfConfig\") final FormDataBodyPart udfConfig,\n                           @FormDataParam(\"builtin\") final boolean builtin,\n                           @Context SecurityContext securityContext)", "modifiers": "@Timed @POST @Consumes(MediaType.MULTIPART_FORM_DATA) @Path(\"/udfs\") public", "return": "Response", "signature": "Response addUDF(@FormDataParam(\"udfJarFile\") final InputStream inputStream,\n                           @FormDataParam(\"udfJarFile\") final FormDataContentDisposition contentDispositionHeader,\n                           @FormDataParam(\"udfConfig\") final FormDataBodyPart udfConfig,\n                           @FormDataParam(\"builtin\") final boolean builtin,\n                           @Context SecurityContext securityContext)", "full_signature": "@Timed @POST @Consumes(MediaType.MULTIPART_FORM_DATA) @Path(\"/udfs\") public Response addUDF(@FormDataParam(\"udfJarFile\") final InputStream inputStream,\n                           @FormDataParam(\"udfJarFile\") final FormDataContentDisposition contentDispositionHeader,\n                           @FormDataParam(\"udfConfig\") final FormDataBodyPart udfConfig,\n                           @FormDataParam(\"builtin\") final boolean builtin,\n                           @Context SecurityContext securityContext)", "class_method_signature": "UDFCatalogResource.addUDF(@FormDataParam(\"udfJarFile\") final InputStream inputStream,\n                           @FormDataParam(\"udfJarFile\") final FormDataContentDisposition contentDispositionHeader,\n                           @FormDataParam(\"udfConfig\") final FormDataBodyPart udfConfig,\n                           @FormDataParam(\"builtin\") final boolean builtin,\n                           @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "removeUDF", "parameters": "(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "modifiers": "@DELETE @Path(\"/udfs/{id}\") @Timed public", "return": "Response", "signature": "Response removeUDF(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "full_signature": "@DELETE @Path(\"/udfs/{id}\") @Timed public Response removeUDF(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "class_method_signature": "UDFCatalogResource.removeUDF(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "addOrUpdateUDF", "parameters": "(@PathParam(\"id\") Long udfId,\n                                   @FormDataParam(\"udfJarFile\") final InputStream inputStream,\n                                   @FormDataParam(\"udfJarFile\") final FormDataContentDisposition contentDispositionHeader,\n                                   @FormDataParam(\"udfConfig\") final FormDataBodyPart udfConfig,\n                                   @FormDataParam(\"builtin\") final boolean builtin,\n                                   @Context SecurityContext securityContext)", "modifiers": "@PUT @Consumes(MediaType.MULTIPART_FORM_DATA) @Path(\"/udfs/{id}\") @Timed public", "return": "Response", "signature": "Response addOrUpdateUDF(@PathParam(\"id\") Long udfId,\n                                   @FormDataParam(\"udfJarFile\") final InputStream inputStream,\n                                   @FormDataParam(\"udfJarFile\") final FormDataContentDisposition contentDispositionHeader,\n                                   @FormDataParam(\"udfConfig\") final FormDataBodyPart udfConfig,\n                                   @FormDataParam(\"builtin\") final boolean builtin,\n                                   @Context SecurityContext securityContext)", "full_signature": "@PUT @Consumes(MediaType.MULTIPART_FORM_DATA) @Path(\"/udfs/{id}\") @Timed public Response addOrUpdateUDF(@PathParam(\"id\") Long udfId,\n                                   @FormDataParam(\"udfJarFile\") final InputStream inputStream,\n                                   @FormDataParam(\"udfJarFile\") final FormDataContentDisposition contentDispositionHeader,\n                                   @FormDataParam(\"udfConfig\") final FormDataBodyPart udfConfig,\n                                   @FormDataParam(\"builtin\") final boolean builtin,\n                                   @Context SecurityContext securityContext)", "class_method_signature": "UDFCatalogResource.addOrUpdateUDF(@PathParam(\"id\") Long udfId,\n                                   @FormDataParam(\"udfJarFile\") final InputStream inputStream,\n                                   @FormDataParam(\"udfJarFile\") final FormDataContentDisposition contentDispositionHeader,\n                                   @FormDataParam(\"udfConfig\") final FormDataBodyPart udfConfig,\n                                   @FormDataParam(\"builtin\") final boolean builtin,\n                                   @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "downloadUdf", "parameters": "(@PathParam(\"udfId\") Long udfId, @Context SecurityContext securityContext)", "modifiers": "@Timed @GET @Produces({\"application/java-archive\", \"application/json\"}) @Path(\"/udfs/download/{udfId}\") public", "return": "Response", "signature": "Response downloadUdf(@PathParam(\"udfId\") Long udfId, @Context SecurityContext securityContext)", "full_signature": "@Timed @GET @Produces({\"application/java-archive\", \"application/json\"}) @Path(\"/udfs/download/{udfId}\") public Response downloadUdf(@PathParam(\"udfId\") Long udfId, @Context SecurityContext securityContext)", "class_method_signature": "UDFCatalogResource.downloadUdf(@PathParam(\"udfId\") Long udfId, @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "processUdf", "parameters": "(InputStream inputStream,\n                            UDF udf,\n                            boolean checkDuplicate,\n                            boolean builtin)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void processUdf(InputStream inputStream,\n                            UDF udf,\n                            boolean checkDuplicate,\n                            boolean builtin)", "full_signature": "@VisibleForTesting void processUdf(InputStream inputStream,\n                            UDF udf,\n                            boolean checkDuplicate,\n                            boolean builtin)", "class_method_signature": "UDFCatalogResource.processUdf(InputStream inputStream,\n                            UDF udf,\n                            boolean checkDuplicate,\n                            boolean builtin)", "testcase": false, "constructor": false}, {"identifier": "updateTypeInfo", "parameters": "(UDF udf, Class<?> clazz)", "modifiers": "private", "return": "void", "signature": "void updateTypeInfo(UDF udf, Class<?> clazz)", "full_signature": "private void updateTypeInfo(UDF udf, Class<?> clazz)", "class_method_signature": "UDFCatalogResource.updateTypeInfo(UDF udf, Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getReturnType", "parameters": "(Class<?> clazz, String methodName)", "modifiers": "private", "return": "Schema.Type", "signature": "Schema.Type getReturnType(Class<?> clazz, String methodName)", "full_signature": "private Schema.Type getReturnType(Class<?> clazz, String methodName)", "class_method_signature": "UDFCatalogResource.getReturnType(Class<?> clazz, String methodName)", "testcase": false, "constructor": false}, {"identifier": "getArgTypes", "parameters": "(Class<?> clazz, String methodname, int argStartIndex)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getArgTypes(Class<?> clazz, String methodname, int argStartIndex)", "full_signature": "private List<String> getArgTypes(Class<?> clazz, String methodname, int argStartIndex)", "class_method_signature": "UDFCatalogResource.getArgTypes(Class<?> clazz, String methodname, int argStartIndex)", "testcase": false, "constructor": false}, {"identifier": "findMethod", "parameters": "(Class<?> clazz, String name)", "modifiers": "private", "return": "Method", "signature": "Method findMethod(Class<?> clazz, String name)", "full_signature": "private Method findMethod(Class<?> clazz, String name)", "class_method_signature": "UDFCatalogResource.findMethod(Class<?> clazz, String name)", "testcase": false, "constructor": false}, {"identifier": "uploadJar", "parameters": "(File inputFile, String udfName)", "modifiers": "private", "return": "String", "signature": "String uploadJar(File inputFile, String udfName)", "full_signature": "private String uploadJar(File inputFile, String udfName)", "class_method_signature": "UDFCatalogResource.uploadJar(File inputFile, String udfName)", "testcase": false, "constructor": false}, {"identifier": "validateUDF", "parameters": "(Set<String> udfs, UDF udf, boolean checkDuplicate)", "modifiers": "private", "return": "void", "signature": "void validateUDF(Set<String> udfs, UDF udf, boolean checkDuplicate)", "full_signature": "private void validateUDF(Set<String> udfs, UDF udf, boolean checkDuplicate)", "class_method_signature": "UDFCatalogResource.validateUDF(Set<String> udfs, UDF udf, boolean checkDuplicate)", "testcase": false, "constructor": false}, {"identifier": "checkDuplicate", "parameters": "(UDF udf)", "modifiers": "private", "return": "void", "signature": "void checkDuplicate(UDF udf)", "full_signature": "private void checkDuplicate(UDF udf)", "class_method_signature": "UDFCatalogResource.checkDuplicate(UDF udf)", "testcase": false, "constructor": false}, {"identifier": "getExistingJarPath", "parameters": "(String digest)", "modifiers": "private", "return": "Optional<String>", "signature": "Optional<String> getExistingJarPath(String digest)", "full_signature": "private Optional<String> getExistingJarPath(String digest)", "class_method_signature": "UDFCatalogResource.getExistingJarPath(String digest)", "testcase": false, "constructor": false}], "file": "streams/service/src/main/java/com/hortonworks/streamline/streams/service/UDFCatalogResource.java"}, "focal_method": {"identifier": "processUdf", "parameters": "(InputStream inputStream,\n                            UDF udf,\n                            boolean checkDuplicate,\n                            boolean builtin)", "modifiers": "@VisibleForTesting", "return": "void", "body": "@VisibleForTesting\n    void processUdf(InputStream inputStream,\n                            UDF udf,\n                            boolean checkDuplicate,\n                            boolean builtin) throws Exception {\n        if (builtin) {\n            udf.setDigest(\"builtin\");\n            udf.setJarStoragePath(\"builtin\");\n            checkDuplicate(udf);\n        } else {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            File tmpFile;\n            try (DigestInputStream dis = new DigestInputStream(inputStream, md)) {\n                tmpFile = FileUtil.writeInputStreamToTempFile(dis, \".jar\");\n            }\n            Map<String, Class<?>> udfs = StreamCatalogService.loadUdfsFromJar(tmpFile);\n            validateUDF(udfs.keySet(), udf, checkDuplicate);\n            updateTypeInfo(udf, udfs.get(udf.getClassName()));\n            String digest = Hex.encodeHexString(md.digest());\n            LOG.debug(\"Digest: {}\", digest);\n            udf.setDigest(digest);\n            String jarPath = getExistingJarPath(digest).orElseGet(() -> uploadJar(tmpFile, udf.getName()));\n            if (!fileStorage.exists(jarPath)) {\n                String msg = String.format(\"The jar path '%s' does not exist. \" +\n                        \"You may have to reset the db and run bootstrap again.\", jarPath);\n                LOG.error(msg);\n                throw new RuntimeException(msg);\n            }\n            udf.setJarStoragePath(jarPath);\n        }\n    }", "signature": "void processUdf(InputStream inputStream,\n                            UDF udf,\n                            boolean checkDuplicate,\n                            boolean builtin)", "full_signature": "@VisibleForTesting void processUdf(InputStream inputStream,\n                            UDF udf,\n                            boolean checkDuplicate,\n                            boolean builtin)", "class_method_signature": "UDFCatalogResource.processUdf(InputStream inputStream,\n                            UDF udf,\n                            boolean checkDuplicate,\n                            boolean builtin)", "testcase": false, "constructor": false, "invocations": ["setDigest", "setJarStoragePath", "checkDuplicate", "getInstance", "writeInputStreamToTempFile", "loadUdfsFromJar", "validateUDF", "keySet", "updateTypeInfo", "get", "getClassName", "encodeHexString", "digest", "debug", "setDigest", "orElseGet", "getExistingJarPath", "uploadJar", "getName", "exists", "format", "error", "setJarStoragePath"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}