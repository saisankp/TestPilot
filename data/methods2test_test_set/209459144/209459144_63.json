{"test_class": {"identifier": "TensorFlowLaunchCommandTest", "superclass": "extends AbstractTFLaunchCommandTestHelper", "interfaces": "", "fields": [{"original_string": "private TensorFlowRole taskType;", "modifier": "private", "type": "TensorFlowRole", "declarator": "taskType", "var_name": "taskType"}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/test/java/org/apache/submarine/server/submitter/yarnservice/tensorflow/command/TensorFlowLaunchCommandTest.java"}, "test_case": {"identifier": "testLaunchCommandIsEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testLaunchCommandIsEmpty() throws IOException {\n    MockClientContext mockClientContext = createMockClientContext();\n    FileSystemOperations fsOperations =\n        new FileSystemOperations(mockClientContext);\n    HadoopEnvironmentSetup hadoopEnvSetup =\n        new HadoopEnvironmentSetup(mockClientContext, fsOperations);\n    Configuration yarnConfig = new Configuration();\n\n    Component component = new Component();\n    TensorFlowRunJobParameters params = new TensorFlowRunJobParameters();\n    params.setName(\"testName\");\n    setLaunchCommandToParams(params, \"\");\n\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"LaunchCommand must not be null or empty\");\n    TensorFlowLaunchCommand launchCommand =\n        createTensorFlowLaunchCommandObject(hadoopEnvSetup, yarnConfig,\n            component, params);\n    launchCommand.generateLaunchScript();\n  }", "signature": "void testLaunchCommandIsEmpty()", "full_signature": "@Test public void testLaunchCommandIsEmpty()", "class_method_signature": "TensorFlowLaunchCommandTest.testLaunchCommandIsEmpty()", "testcase": true, "constructor": false, "invocations": ["createMockClientContext", "setName", "setLaunchCommandToParams", "expect", "expectMessage", "createTensorFlowLaunchCommandObject", "generateLaunchScript"]}, "focal_class": {"identifier": "TensorFlowLaunchCommand", "superclass": "extends AbstractLaunchCommand", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG =\n      LoggerFactory.getLogger(TensorFlowLaunchCommand.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG =\n      LoggerFactory.getLogger(TensorFlowLaunchCommand.class)", "var_name": "LOG"}, {"original_string": "private final Configuration yarnConfig;", "modifier": "private final", "type": "Configuration", "declarator": "yarnConfig", "var_name": "yarnConfig"}, {"original_string": "private final boolean distributed;", "modifier": "private final", "type": "boolean", "declarator": "distributed", "var_name": "distributed"}, {"original_string": "private final int numberOfWorkers;", "modifier": "private final", "type": "int", "declarator": "numberOfWorkers", "var_name": "numberOfWorkers"}, {"original_string": "private final int numberOfPS;", "modifier": "private final", "type": "int", "declarator": "numberOfPS", "var_name": "numberOfPS"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final Role role;", "modifier": "private final", "type": "Role", "declarator": "role", "var_name": "role"}], "methods": [{"identifier": "TensorFlowLaunchCommand", "parameters": "(HadoopEnvironmentSetup hadoopEnvSetup,\n                          Role role, Component component,\n                          TensorFlowRunJobParameters parameters,\n                          Configuration yarnConfig)", "modifiers": "", "return": "", "signature": " TensorFlowLaunchCommand(HadoopEnvironmentSetup hadoopEnvSetup,\n                          Role role, Component component,\n                          TensorFlowRunJobParameters parameters,\n                          Configuration yarnConfig)", "full_signature": "  TensorFlowLaunchCommand(HadoopEnvironmentSetup hadoopEnvSetup,\n                          Role role, Component component,\n                          TensorFlowRunJobParameters parameters,\n                          Configuration yarnConfig)", "class_method_signature": "TensorFlowLaunchCommand.TensorFlowLaunchCommand(HadoopEnvironmentSetup hadoopEnvSetup,\n                          Role role, Component component,\n                          TensorFlowRunJobParameters parameters,\n                          Configuration yarnConfig)", "testcase": false, "constructor": true}, {"identifier": "logReceivedParameters", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void logReceivedParameters()", "full_signature": "private void logReceivedParameters()", "class_method_signature": "TensorFlowLaunchCommand.logReceivedParameters()", "testcase": false, "constructor": false}, {"identifier": "generateLaunchScript", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String generateLaunchScript()", "full_signature": "@Override public String generateLaunchScript()", "class_method_signature": "TensorFlowLaunchCommand.generateLaunchScript()", "testcase": false, "constructor": false}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/main/java/org/apache/submarine/server/submitter/yarnservice/tensorflow/command/TensorFlowLaunchCommand.java"}, "focal_method": {"identifier": "generateLaunchScript", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String generateLaunchScript() throws IOException {\n    LaunchScriptBuilder builder = getBuilder();\n\n    // When distributed training is required\n    if (distributed) {\n      String tfConfigEnvValue = TensorFlowConfigEnvGenerator.getTFConfigEnv(\n          role.getComponentName(), numberOfWorkers,\n          numberOfPS, name,\n          TensorFlowCommons.getUserName(),\n          TensorFlowCommons.getDNSDomain(yarnConfig));\n      String tfConfig = \"export TF_CONFIG=\\\"\" + tfConfigEnvValue + \"\\\"\\n\";\n      builder.append(tfConfig);\n    }\n\n    return builder\n        .withLaunchCommand(createLaunchCommand())\n        .build();\n  }", "signature": "String generateLaunchScript()", "full_signature": "@Override public String generateLaunchScript()", "class_method_signature": "TensorFlowLaunchCommand.generateLaunchScript()", "testcase": false, "constructor": false, "invocations": ["getBuilder", "getTFConfigEnv", "getComponentName", "getUserName", "getDNSDomain", "append", "build", "withLaunchCommand", "createLaunchCommand"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}