{"test_class": {"identifier": "DomainResponseMessageProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private NotificationService notificationService;", "modifier": "@Mock\n    private", "type": "NotificationService", "declarator": "notificationService", "var_name": "notificationService"}, {"original_string": "@Mock\n    private ResponseDataService responseDataService;", "modifier": "@Mock\n    private", "type": "ResponseDataService", "declarator": "responseDataService", "var_name": "responseDataService"}, {"original_string": "@InjectMocks\n    private final DomainResponseMessageProcessor responseMessageProcessor = new DomainResponseMessageProcessor();", "modifier": "@InjectMocks\n    private final", "type": "DomainResponseMessageProcessor", "declarator": "responseMessageProcessor = new DomainResponseMessageProcessor()", "var_name": "responseMessageProcessor"}], "file": "osgp/platform/osgp-adapter-ws-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/ws/da/infra/jms/messageprocessors/DomainResponseMessageProcessorTest.java"}, "test_case": {"identifier": "testProcessUnknownMessageTypeResponseMessage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcessUnknownMessageTypeResponseMessage() throws JMSException {\n        // Arrange\n        final ObjectMessage myMessage = Mockito.mock(ObjectMessage.class);\n\n        when(myMessage.getJMSType()).thenReturn(\"FAKE_UNKNOWN_NOTIFICATION_TYPE\");\n\n        // Act\n        this.responseMessageProcessor.processMessage(myMessage);\n\n        // Assert\n        // Verify no notification was sent\n        verify(this.notificationService, times(0)).sendNotification(anyString(), anyString(), eq(\"OK\"), anyString(),\n                anyString(), any());\n\n        // Verify no response was enqueued for storage\n        verify(this.responseDataService, times(0)).enqueue(any());\n\n    }", "signature": "void testProcessUnknownMessageTypeResponseMessage()", "full_signature": "@Test public void testProcessUnknownMessageTypeResponseMessage()", "class_method_signature": "DomainResponseMessageProcessorTest.testProcessUnknownMessageTypeResponseMessage()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getJMSType", "processMessage", "sendNotification", "verify", "times", "anyString", "anyString", "eq", "anyString", "anyString", "any", "enqueue", "verify", "times", "any"]}, "focal_class": {"identifier": "DomainResponseMessageProcessor", "superclass": "", "interfaces": "implements MessageProcessor", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DomainResponseMessageProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DomainResponseMessageProcessor.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private String webserviceNotificationOrganisation;", "modifier": "@Autowired\n    private", "type": "String", "declarator": "webserviceNotificationOrganisation", "var_name": "webserviceNotificationOrganisation"}, {"original_string": "@Autowired\n    private NotificationService notificationService;", "modifier": "@Autowired\n    private", "type": "NotificationService", "declarator": "notificationService", "var_name": "notificationService"}, {"original_string": "@Autowired\n    private ResponseDataService responseDataService;", "modifier": "@Autowired\n    private", "type": "ResponseDataService", "declarator": "responseDataService", "var_name": "responseDataService"}], "methods": [{"identifier": "processMessage", "parameters": "(final ObjectMessage message)", "modifiers": "@Override public", "return": "void", "signature": "void processMessage(final ObjectMessage message)", "full_signature": "@Override public void processMessage(final ObjectMessage message)", "class_method_signature": "DomainResponseMessageProcessor.processMessage(final ObjectMessage message)", "testcase": false, "constructor": false}, {"identifier": "handleMessage", "parameters": "(final CorrelationIds ids, final String messageType,\n            final ResponseMessageResultType resultType, final String resultDescription, final Serializable dataObject)", "modifiers": "private", "return": "void", "signature": "void handleMessage(final CorrelationIds ids, final String messageType,\n            final ResponseMessageResultType resultType, final String resultDescription, final Serializable dataObject)", "full_signature": "private void handleMessage(final CorrelationIds ids, final String messageType,\n            final ResponseMessageResultType resultType, final String resultDescription, final Serializable dataObject)", "class_method_signature": "DomainResponseMessageProcessor.handleMessage(final CorrelationIds ids, final String messageType,\n            final ResponseMessageResultType resultType, final String resultDescription, final Serializable dataObject)", "testcase": false, "constructor": false}, {"identifier": "handleError", "parameters": "(final RuntimeException e, final String correlationUid,\n            final NotificationType notificationType)", "modifiers": "private static", "return": "void", "signature": "void handleError(final RuntimeException e, final String correlationUid,\n            final NotificationType notificationType)", "full_signature": "private static void handleError(final RuntimeException e, final String correlationUid,\n            final NotificationType notificationType)", "class_method_signature": "DomainResponseMessageProcessor.handleError(final RuntimeException e, final String correlationUid,\n            final NotificationType notificationType)", "testcase": false, "constructor": false}, {"identifier": "validateMessageType", "parameters": "(final String messageType)", "modifiers": "private static", "return": "void", "signature": "void validateMessageType(final String messageType)", "full_signature": "private static void validateMessageType(final String messageType)", "class_method_signature": "DomainResponseMessageProcessor.validateMessageType(final String messageType)", "testcase": false, "constructor": false}, {"identifier": "logDebugInformation", "parameters": "(final String messageType, final String correlationUid,\n            final String organisationIdentification, final String deviceIdentification)", "modifiers": "private static", "return": "void", "signature": "void logDebugInformation(final String messageType, final String correlationUid,\n            final String organisationIdentification, final String deviceIdentification)", "full_signature": "private static void logDebugInformation(final String messageType, final String correlationUid,\n            final String organisationIdentification, final String deviceIdentification)", "class_method_signature": "DomainResponseMessageProcessor.logDebugInformation(final String messageType, final String correlationUid,\n            final String organisationIdentification, final String deviceIdentification)", "testcase": false, "constructor": false}], "file": "osgp/platform/osgp-adapter-ws-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/ws/da/infra/jms/messageprocessors/DomainResponseMessageProcessor.java"}, "focal_method": {"identifier": "processMessage", "parameters": "(final ObjectMessage message)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void processMessage(final ObjectMessage message) {\n        LOGGER.debug(\"Processing distribution automation response message\");\n\n        String correlationUid = null;\n        String messageType = null;\n        String organisationIdentification = null;\n        String deviceIdentification = null;\n\n        String notificationMessage;\n        NotificationType notificationType;\n        ResponseMessageResultType resultType;\n        String resultDescription;\n        Serializable dataObject;\n\n        try {\n            correlationUid = message.getJMSCorrelationID();\n            organisationIdentification = message.getStringProperty(Constants.ORGANISATION_IDENTIFICATION);\n            deviceIdentification = message.getStringProperty(Constants.DEVICE_IDENTIFICATION);\n\n            messageType = message.getJMSType();\n            validateMessageType(messageType);\n\n            resultType = ResponseMessageResultType.valueOf(message.getStringProperty(Constants.RESULT));\n            resultDescription = message.getStringProperty(Constants.DESCRIPTION);\n\n            notificationMessage = message.getStringProperty(Constants.DESCRIPTION);\n            notificationType = NotificationType.valueOf(messageType);\n\n            dataObject = message.getObject();\n        } catch (final IllegalArgumentException e) {\n            LOGGER.error(\"UNRECOVERABLE ERROR, received messageType {} is unknown.\", messageType, e);\n            logDebugInformation(messageType, correlationUid, organisationIdentification, deviceIdentification);\n\n            return;\n        } catch (final JMSException e) {\n            LOGGER.error(\"UNRECOVERABLE ERROR, unable to read ObjectMessage instance, giving up.\", e);\n            logDebugInformation(messageType, correlationUid, organisationIdentification, deviceIdentification);\n\n            return;\n        }\n\n        try {\n            LOGGER.info(\"Calling application service function to handle response: {}\", messageType);\n\n            final CorrelationIds ids = new CorrelationIds(organisationIdentification, deviceIdentification,\n                    correlationUid);\n            this.handleMessage(ids, messageType, resultType, resultDescription, dataObject);\n\n            // Send notification indicating data is available.\n            this.notificationService.sendNotification(this.webserviceNotificationOrganisation, deviceIdentification,\n                    resultType.name(), correlationUid, notificationMessage, notificationType);\n\n        } catch (final RuntimeException e) {\n            handleError(e, correlationUid, notificationType);\n        }\n    }", "signature": "void processMessage(final ObjectMessage message)", "full_signature": "@Override public void processMessage(final ObjectMessage message)", "class_method_signature": "DomainResponseMessageProcessor.processMessage(final ObjectMessage message)", "testcase": false, "constructor": false, "invocations": ["debug", "getJMSCorrelationID", "getStringProperty", "getStringProperty", "getJMSType", "validateMessageType", "valueOf", "getStringProperty", "getStringProperty", "getStringProperty", "valueOf", "getObject", "error", "logDebugInformation", "error", "logDebugInformation", "info", "handleMessage", "sendNotification", "name", "handleError"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}