{"test_class": {"identifier": "SerializedObserverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Observer<String> observer;", "modifier": "", "type": "Observer<String>", "declarator": "observer", "var_name": "observer"}], "file": "rxjava/src/test/java/io/reactivex/observers/SerializedObserverTest.java"}, "test_case": {"identifier": "dispose", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void dispose() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        SerializedObserver<Integer> so = new SerializedObserver<Integer>(to);\n\n        Disposable d = Disposables.empty();\n\n        so.onSubscribe(d);\n\n        assertFalse(so.isDisposed());\n\n        to.cancel();\n\n        assertTrue(so.isDisposed());\n\n        assertTrue(d.isDisposed());\n    }", "signature": "void dispose()", "full_signature": "@Test public void dispose()", "class_method_signature": "SerializedObserverTest.dispose()", "testcase": true, "constructor": false, "invocations": ["empty", "onSubscribe", "assertFalse", "isDisposed", "cancel", "assertTrue", "isDisposed", "assertTrue", "isDisposed"]}, "focal_class": {"identifier": "SerializedObserver", "superclass": "", "interfaces": "implements Observer<T>, Disposable", "fields": [{"original_string": "final Observer<? super T> actual;", "modifier": "final", "type": "Observer<? super T>", "declarator": "actual", "var_name": "actual"}, {"original_string": "final boolean delayError;", "modifier": "final", "type": "boolean", "declarator": "delayError", "var_name": "delayError"}, {"original_string": "static final int QUEUE_LINK_SIZE = 4;", "modifier": "static final", "type": "int", "declarator": "QUEUE_LINK_SIZE = 4", "var_name": "QUEUE_LINK_SIZE"}, {"original_string": "Disposable s;", "modifier": "", "type": "Disposable", "declarator": "s", "var_name": "s"}, {"original_string": "boolean emitting;", "modifier": "", "type": "boolean", "declarator": "emitting", "var_name": "emitting"}, {"original_string": "AppendOnlyLinkedArrayList<Object> queue;", "modifier": "", "type": "AppendOnlyLinkedArrayList<Object>", "declarator": "queue", "var_name": "queue"}, {"original_string": "volatile boolean done;", "modifier": "volatile", "type": "boolean", "declarator": "done", "var_name": "done"}], "methods": [{"identifier": "SerializedObserver", "parameters": "(@NonNull Observer<? super T> actual)", "modifiers": "public", "return": "", "signature": " SerializedObserver(@NonNull Observer<? super T> actual)", "full_signature": "public  SerializedObserver(@NonNull Observer<? super T> actual)", "class_method_signature": "SerializedObserver.SerializedObserver(@NonNull Observer<? super T> actual)", "testcase": false, "constructor": true}, {"identifier": "SerializedObserver", "parameters": "(@NonNull Observer<? super T> actual, boolean delayError)", "modifiers": "public", "return": "", "signature": " SerializedObserver(@NonNull Observer<? super T> actual, boolean delayError)", "full_signature": "public  SerializedObserver(@NonNull Observer<? super T> actual, boolean delayError)", "class_method_signature": "SerializedObserver.SerializedObserver(@NonNull Observer<? super T> actual, boolean delayError)", "testcase": false, "constructor": true}, {"identifier": "onSubscribe", "parameters": "(@NonNull Disposable s)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(@NonNull Disposable s)", "full_signature": "@Override public void onSubscribe(@NonNull Disposable s)", "class_method_signature": "SerializedObserver.onSubscribe(@NonNull Disposable s)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "SerializedObserver.dispose()", "testcase": false, "constructor": false}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "SerializedObserver.isDisposed()", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(@NonNull T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(@NonNull T t)", "full_signature": "@Override public void onNext(@NonNull T t)", "class_method_signature": "SerializedObserver.onNext(@NonNull T t)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(@NonNull Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void onError(@NonNull Throwable t)", "full_signature": "@Override public void onError(@NonNull Throwable t)", "class_method_signature": "SerializedObserver.onError(@NonNull Throwable t)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@Override public void onComplete()", "class_method_signature": "SerializedObserver.onComplete()", "testcase": false, "constructor": false}, {"identifier": "emitLoop", "parameters": "()", "modifiers": "", "return": "void", "signature": "void emitLoop()", "full_signature": " void emitLoop()", "class_method_signature": "SerializedObserver.emitLoop()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/observers/SerializedObserver.java"}, "focal_method": {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void dispose() {\n        s.dispose();\n    }", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "SerializedObserver.dispose()", "testcase": false, "constructor": false, "invocations": ["dispose"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}