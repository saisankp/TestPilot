{"test_class": {"identifier": "RequestStatusParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "http/src/test/java/ro/polak/http/protocol/parser/impl/RequestStatusParserTest.java"}, "test_case": {"identifier": "shouldParseStatusString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldParseStatusString() throws MalformedInputException {\n        Parser<RequestStatus> requestStatusParser = new RequestStatusParser();\n        RequestStatus requestStatus = requestStatusParser.parse(\"GET /home?param1=ABC&param2=123 HTTP/1.1\");\n\n        assertThat(requestStatus.getMethod(), is(\"GET\"));\n        assertThat(requestStatus.getQueryString(), is(\"param1=ABC&param2=123\"));\n        assertThat(requestStatus.getUri(), is(\"/home\"));\n        assertThat(requestStatus.getProtocol(), is(\"HTTP/1.1\"));\n    }", "signature": "void shouldParseStatusString()", "full_signature": "@Test public void shouldParseStatusString()", "class_method_signature": "RequestStatusParserTest.shouldParseStatusString()", "testcase": true, "constructor": false, "invocations": ["parse", "assertThat", "getMethod", "is", "assertThat", "getQueryString", "is", "assertThat", "getUri", "is", "assertThat", "getProtocol", "is"]}, "focal_class": {"identifier": "RequestStatusParser", "superclass": "", "interfaces": "implements Parser<RequestStatus>", "fields": [{"original_string": "private static final int NUMBER_OF_CHUNKS = 3;", "modifier": "private static final", "type": "int", "declarator": "NUMBER_OF_CHUNKS = 3", "var_name": "NUMBER_OF_CHUNKS"}, {"original_string": "private static final String STATUS_SEPARATOR = \" \";", "modifier": "private static final", "type": "String", "declarator": "STATUS_SEPARATOR = \" \"", "var_name": "STATUS_SEPARATOR"}, {"original_string": "private static final String QUERY_STRING_START = \"?\";", "modifier": "private static final", "type": "String", "declarator": "QUERY_STRING_START = \"?\"", "var_name": "QUERY_STRING_START"}], "methods": [{"identifier": "parse", "parameters": "(final String input)", "modifiers": "@Override public", "return": "RequestStatus", "signature": "RequestStatus parse(final String input)", "full_signature": "@Override public RequestStatus parse(final String input)", "class_method_signature": "RequestStatusParser.parse(final String input)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/protocol/parser/impl/RequestStatusParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(final String input)", "modifiers": "@Override public", "return": "RequestStatus", "body": "@Override\n    public RequestStatus parse(final String input) throws MalformedInputException {\n        RequestStatus status = new RequestStatus();\n        status.setQueryString(\"\");\n        String uri;\n\n\n        String[] statusArray = input.split(STATUS_SEPARATOR, NUMBER_OF_CHUNKS);\n\n        if (statusArray.length < NUMBER_OF_CHUNKS) {\n            throw new MalformedInputException(\"Input status string should be composed out of \"\n                    + NUMBER_OF_CHUNKS + \" chunks. Received \" + input);\n        }\n\n        // First element of the array is the HTTP method\n        status.setMethod(statusArray[0].toUpperCase());\n        // Second element of the array is the HTTP queryString\n        uri = statusArray[1];\n\n        // Protocol is the third part of the status line\n        status.setProtocol(statusArray[2].trim());\n\n        int questionMarkPosition = uri.indexOf(QUERY_STRING_START);\n        if (questionMarkPosition > -1) {\n            status.setQueryString(uri.substring(questionMarkPosition + 1));\n            uri = uri.substring(0, questionMarkPosition);\n        }\n        status.setUri(uri);\n        return status;\n    }", "signature": "RequestStatus parse(final String input)", "full_signature": "@Override public RequestStatus parse(final String input)", "class_method_signature": "RequestStatusParser.parse(final String input)", "testcase": false, "constructor": false, "invocations": ["setQueryString", "split", "setMethod", "toUpperCase", "setProtocol", "trim", "indexOf", "setQueryString", "substring", "substring", "setUri"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}