{"test_class": {"identifier": "MockClusterInvokerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "List<Invoker<IHelloService>> invokers = new ArrayList<Invoker<IHelloService>>();", "modifier": "", "type": "List<Invoker<IHelloService>>", "declarator": "invokers = new ArrayList<Invoker<IHelloService>>()", "var_name": "invokers"}], "file": "dubbo-cluster/src/test/java/com/alibaba/dubbo/rpc/cluster/support/wrapper/MockClusterInvokerTest.java"}, "test_case": {"identifier": "testMockInvokerFromOverride_Invoke_Fock_WithDefault", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMockInvokerFromOverride_Invoke_Fock_WithDefault() {\n        URL url = URL.valueOf(\"remote://1.2.3.4/\" + IHelloService.class.getName())\n                .addParameter(\"mock\", \"fail:return null\")\n                .addParameter(\"getSomething.mock\", \"fail:return x\")\n                .addParameter(\"getSomething2.mock\", \"force:return y\")\n                .addParameter(\"invoke_return_error\", \"true\");\n        Invoker<IHelloService> cluster = getClusterInvoker(url);\n        //Configured with mock\n        RpcInvocation invocation = new RpcInvocation();\n        invocation.setMethodName(\"getSomething\");\n        Result ret = cluster.invoke(invocation);\n        Assert.assertEquals(\"x\", ret.getValue());\n\n        // If no mock was configured, return null directly\n        invocation = new RpcInvocation();\n        invocation.setMethodName(\"getSomething2\");\n        ret = cluster.invoke(invocation);\n        Assert.assertEquals(\"y\", ret.getValue());\n\n        // If no mock was configured, return null directly\n        invocation = new RpcInvocation();\n        invocation.setMethodName(\"getSomething3\");\n        ret = cluster.invoke(invocation);\n        Assert.assertEquals(null, ret.getValue());\n\n        // If no mock was configured, return null directly\n        invocation = new RpcInvocation();\n        invocation.setMethodName(\"sayHello\");\n        ret = cluster.invoke(invocation);\n        Assert.assertEquals(null, ret.getValue());\n    }", "signature": "void testMockInvokerFromOverride_Invoke_Fock_WithDefault()", "full_signature": "@Test public void testMockInvokerFromOverride_Invoke_Fock_WithDefault()", "class_method_signature": "MockClusterInvokerTest.testMockInvokerFromOverride_Invoke_Fock_WithDefault()", "testcase": true, "constructor": false, "invocations": ["addParameter", "addParameter", "addParameter", "addParameter", "valueOf", "getName", "getClusterInvoker", "setMethodName", "invoke", "assertEquals", "getValue", "setMethodName", "invoke", "assertEquals", "getValue", "setMethodName", "invoke", "assertEquals", "getValue", "setMethodName", "invoke", "assertEquals", "getValue"]}, "focal_class": {"identifier": "MockClusterInvoker", "superclass": "", "interfaces": "implements Invoker<T>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(MockClusterInvoker.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MockClusterInvoker.class)", "var_name": "logger"}, {"original_string": "private final Directory<T> directory;", "modifier": "private final", "type": "Directory<T>", "declarator": "directory", "var_name": "directory"}, {"original_string": "private final Invoker<T> invoker;", "modifier": "private final", "type": "Invoker<T>", "declarator": "invoker", "var_name": "invoker"}], "methods": [{"identifier": "MockClusterInvoker", "parameters": "(Directory<T> directory, Invoker<T> invoker)", "modifiers": "public", "return": "", "signature": " MockClusterInvoker(Directory<T> directory, Invoker<T> invoker)", "full_signature": "public  MockClusterInvoker(Directory<T> directory, Invoker<T> invoker)", "class_method_signature": "MockClusterInvoker.MockClusterInvoker(Directory<T> directory, Invoker<T> invoker)", "testcase": false, "constructor": true}, {"identifier": "getUrl", "parameters": "()", "modifiers": "@Override public", "return": "URL", "signature": "URL getUrl()", "full_signature": "@Override public URL getUrl()", "class_method_signature": "MockClusterInvoker.getUrl()", "testcase": false, "constructor": false}, {"identifier": "isAvailable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAvailable()", "full_signature": "@Override public boolean isAvailable()", "class_method_signature": "MockClusterInvoker.isAvailable()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "MockClusterInvoker.destroy()", "testcase": false, "constructor": false}, {"identifier": "getInterface", "parameters": "()", "modifiers": "@Override public", "return": "Class<T>", "signature": "Class<T> getInterface()", "full_signature": "@Override public Class<T> getInterface()", "class_method_signature": "MockClusterInvoker.getInterface()", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invocation invocation)", "full_signature": "@Override public Result invoke(Invocation invocation)", "class_method_signature": "MockClusterInvoker.invoke(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "doMockInvoke", "parameters": "(Invocation invocation, RpcException e)", "modifiers": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) private", "return": "Result", "signature": "Result doMockInvoke(Invocation invocation, RpcException e)", "full_signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) private Result doMockInvoke(Invocation invocation, RpcException e)", "class_method_signature": "MockClusterInvoker.doMockInvoke(Invocation invocation, RpcException e)", "testcase": false, "constructor": false}, {"identifier": "getMockExceptionMessage", "parameters": "(Throwable t, Throwable mt)", "modifiers": "private", "return": "String", "signature": "String getMockExceptionMessage(Throwable t, Throwable mt)", "full_signature": "private String getMockExceptionMessage(Throwable t, Throwable mt)", "class_method_signature": "MockClusterInvoker.getMockExceptionMessage(Throwable t, Throwable mt)", "testcase": false, "constructor": false}, {"identifier": "selectMockInvoker", "parameters": "(Invocation invocation)", "modifiers": "private", "return": "List<Invoker<T>>", "signature": "List<Invoker<T>> selectMockInvoker(Invocation invocation)", "full_signature": "private List<Invoker<T>> selectMockInvoker(Invocation invocation)", "class_method_signature": "MockClusterInvoker.selectMockInvoker(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MockClusterInvoker.toString()", "testcase": false, "constructor": false}], "file": "dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invocation invocation)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invocation invocation) throws RpcException {\n        Result result = null;\n\n        String value = directory.getUrl().getMethodParameter(invocation.getMethodName(), Constants.MOCK_KEY, Boolean.FALSE.toString()).trim();\n        if (value.length() == 0 || value.equalsIgnoreCase(\"false\")) {\n            //no mock\n            result = this.invoker.invoke(invocation);\n        } else if (value.startsWith(\"force\")) {\n            if (logger.isWarnEnabled()) {\n                logger.info(\"force-mock: \" + invocation.getMethodName() + \" force-mock enabled , url : \" + directory.getUrl());\n            }\n            //force:direct mock\n            // \u5c4f\u853d\uff1a\u7cfb\u7edf\u51c6\u5907\u5927\u578b\u4fc3\u9500\u6d3b\u52a8\u65f6\uff0c\u6709\u76ee\u7684\u7684\u76f4\u63a5\u5c4f\u853d\u67d0\u4e9b\u4e0d\u5f71\u54cd\u4e3b\u4e1a\u52a1\u903b\u8f91\u7684\u63a5\u53e3  ===> mock=force:return null\n            result = doMockInvoke(invocation, null);\n        } else {\n            //fail-mock\n            try {\n                result = this.invoker.invoke(invocation);\n            } catch (RpcException e) {\n                // \u5bb9\u9519\uff1a\u5f53\u7cfb\u7edf\u51fa\u73b0\u975e\u4e1a\u52a1\u5f02\u5e38(\u5982\uff1a\u9ad8\u5e76\u53d1\u5bfc\u81f4\u8d85\u65f6\u3001\u7f51\u7edc\u5f02\u5e38\u7b49)  ===> mock=fail:return null\n                if (e.isBiz()) {\n                    throw e;\n                } else {\n                    if (logger.isWarnEnabled()) {\n                        logger.warn(\"fail-mock: \" + invocation.getMethodName() + \" fail-mock enabled , url : \" + directory.getUrl(), e);\n                    }\n                    result = doMockInvoke(invocation, e);\n                }\n            }\n        }\n        return result;\n    }", "signature": "Result invoke(Invocation invocation)", "full_signature": "@Override public Result invoke(Invocation invocation)", "class_method_signature": "MockClusterInvoker.invoke(Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["trim", "getMethodParameter", "getUrl", "getMethodName", "toString", "length", "equalsIgnoreCase", "invoke", "startsWith", "isWarnEnabled", "info", "getMethodName", "getUrl", "doMockInvoke", "invoke", "isBiz", "isWarnEnabled", "warn", "getMethodName", "getUrl", "doMockInvoke"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}