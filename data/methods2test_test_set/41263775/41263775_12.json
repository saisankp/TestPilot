{"test_class": {"identifier": "HasTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/query/simple/HasTest.java"}, "test_case": {"identifier": "testExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExists() {\n        // Create an indexed collection (note: could alternatively use CQEngine.copyFrom() existing collection)...\n        IndexedCollection<Car> cars = new ConcurrentIndexedCollection<Car>();\n\n        Attribute<Car, String> NAME = new SimpleNullableAttribute<Car, String>(\"name\") {\n            public String getValue(Car car, QueryOptions queryOptions) { return car.name; }\n        };\n        // Add some indexes...\n        cars.addIndex(StandingQueryIndex.onQuery(has(NAME)));\n        cars.addIndex(StandingQueryIndex.onQuery(not(has(NAME))));\n\n        // Add some objects to the collection...\n        cars.add(new Car(1, \"ford focus\", \"great condition, low mileage\", Arrays.asList(\"spare tyre\", \"sunroof\")));\n        cars.add(new Car(2, null, \"dirty and unreliable, flat tyre\", Arrays.asList(\"spare tyre\", \"radio\")));\n        cars.add(new Car(3, \"honda civic\", \"has a flat tyre and high mileage\", Arrays.asList(\"radio\")));\n\n        Assert.assertEquals(cars.retrieve(has(NAME)).size(), 2);\n        Assert.assertEquals(cars.retrieve(not(has(NAME))).size(), 1);\n    }", "signature": "void testExists()", "full_signature": "@Test public void testExists()", "class_method_signature": "HasTest.testExists()", "testcase": true, "constructor": false, "invocations": ["addIndex", "onQuery", "has", "addIndex", "onQuery", "not", "has", "add", "asList", "add", "asList", "add", "asList", "assertEquals", "size", "retrieve", "has", "assertEquals", "size", "retrieve", "not", "has"]}, "focal_class": {"identifier": "Has", "superclass": "extends SimpleQuery<O, A>", "interfaces": "", "fields": [], "methods": [{"identifier": "Has", "parameters": "(Attribute<O, A> attribute)", "modifiers": "public", "return": "", "signature": " Has(Attribute<O, A> attribute)", "full_signature": "public  Has(Attribute<O, A> attribute)", "class_method_signature": "Has.Has(Attribute<O, A> attribute)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Has.toString()", "testcase": false, "constructor": false}, {"identifier": "matchesSimpleAttribute", "parameters": "(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "full_signature": "@Override protected boolean matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "class_method_signature": "Has.matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "matchesNonSimpleAttribute", "parameters": "(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean matchesNonSimpleAttribute(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "full_signature": "@Override protected boolean matchesNonSimpleAttribute(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "class_method_signature": "Has.matchesNonSimpleAttribute(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Has.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "calcHashCode", "parameters": "()", "modifiers": "@Override protected", "return": "int", "signature": "int calcHashCode()", "full_signature": "@Override protected int calcHashCode()", "class_method_signature": "Has.calcHashCode()", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/query/simple/Has.java"}, "focal_method": {"identifier": "Has", "parameters": "(Attribute<O, A> attribute)", "modifiers": "public", "return": "", "body": "public Has(Attribute<O, A> attribute) {\n        super(attribute);\n    }", "signature": " Has(Attribute<O, A> attribute)", "full_signature": "public  Has(Attribute<O, A> attribute)", "class_method_signature": "Has.Has(Attribute<O, A> attribute)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}