{"test_class": {"identifier": "NamespacesServiceImplTest", "superclass": "extends GaeTestBase", "interfaces": "", "fields": [{"original_string": "private static final String A_NAMESPACE = \"a-namespace\";", "modifier": "private static final", "type": "String", "declarator": "A_NAMESPACE = \"a-namespace\"", "var_name": "A_NAMESPACE"}, {"original_string": "private static final String ANOTHER_NAMESPACE = \"another-namespace\";", "modifier": "private static final", "type": "String", "declarator": "ANOTHER_NAMESPACE = \"another-namespace\"", "var_name": "ANOTHER_NAMESPACE"}, {"original_string": "private static final String KIND_NAME = \"FakeEntity\";", "modifier": "private static final", "type": "String", "declarator": "KIND_NAME = \"FakeEntity\"", "var_name": "KIND_NAME"}, {"original_string": "private static final String PROPERTY_NAME = \"property-name\";", "modifier": "private static final", "type": "String", "declarator": "PROPERTY_NAME = \"property-name\"", "var_name": "PROPERTY_NAME"}, {"original_string": "private static final String A_NAME = \"a-name\";", "modifier": "private static final", "type": "String", "declarator": "A_NAME = \"a-name\"", "var_name": "A_NAME"}, {"original_string": "private static final String ANOTHER_NAME = \"another-name\";", "modifier": "private static final", "type": "String", "declarator": "ANOTHER_NAME = \"another-name\"", "var_name": "ANOTHER_NAME"}, {"original_string": "@Inject\n    NamespacesService namespacesService;", "modifier": "@Inject", "type": "NamespacesService", "declarator": "namespacesService", "var_name": "namespacesService"}], "file": "gae-studio/gae-studio-server/src/test/java/com/arcbees/gaestudio/server/service/visualizer/NamespacesServiceImplTest.java"}, "test_case": {"identifier": "getNamespaces_twoNamespacesStored_shouldReturnTheTwoNamespaces", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getNamespaces_twoNamespacesStored_shouldReturnTheTwoNamespaces() {\n        // given\n        createEntityInNamespace(A_NAMESPACE, KIND_NAME, PROPERTY_NAME, A_NAME);\n        createEntityInNamespace(ANOTHER_NAMESPACE, KIND_NAME, PROPERTY_NAME, ANOTHER_NAME);\n\n        // when\n        List<AppIdNamespaceDto> namespaceDtoList = namespacesService.getNamespaces();\n\n        // then\n        assertEquals(2, namespaceDtoList.size());\n        assertEquals(A_NAMESPACE, namespaceDtoList.get(0).getNamespace());\n        assertEquals(ANOTHER_NAMESPACE, namespaceDtoList.get(1).getNamespace());\n    }", "signature": "void getNamespaces_twoNamespacesStored_shouldReturnTheTwoNamespaces()", "full_signature": "@Test public void getNamespaces_twoNamespacesStored_shouldReturnTheTwoNamespaces()", "class_method_signature": "NamespacesServiceImplTest.getNamespaces_twoNamespacesStored_shouldReturnTheTwoNamespaces()", "testcase": true, "constructor": false, "invocations": ["createEntityInNamespace", "createEntityInNamespace", "getNamespaces", "assertEquals", "size", "assertEquals", "getNamespace", "get", "assertEquals", "getNamespace", "get"]}, "focal_class": {"identifier": "NamespacesServiceImpl", "superclass": "", "interfaces": "implements NamespacesService", "fields": [{"original_string": "private final DatastoreHelper datastoreHelper;", "modifier": "private final", "type": "DatastoreHelper", "declarator": "datastoreHelper", "var_name": "datastoreHelper"}], "methods": [{"identifier": "NamespacesServiceImpl", "parameters": "(\n            DatastoreHelper datastoreHelper)", "modifiers": "@Inject public", "return": "", "signature": " NamespacesServiceImpl(\n            DatastoreHelper datastoreHelper)", "full_signature": "@Inject public  NamespacesServiceImpl(\n            DatastoreHelper datastoreHelper)", "class_method_signature": "NamespacesServiceImpl.NamespacesServiceImpl(\n            DatastoreHelper datastoreHelper)", "testcase": false, "constructor": true}, {"identifier": "getNamespaces", "parameters": "()", "modifiers": "@Override public", "return": "List<AppIdNamespaceDto>", "signature": "List<AppIdNamespaceDto> getNamespaces()", "full_signature": "@Override public List<AppIdNamespaceDto> getNamespaces()", "class_method_signature": "NamespacesServiceImpl.getNamespaces()", "testcase": false, "constructor": false}], "file": "gae-studio/gae-studio-server/src/main/java/com/arcbees/gaestudio/server/service/visualizer/NamespacesServiceImpl.java"}, "focal_method": {"identifier": "getNamespaces", "parameters": "()", "modifiers": "@Override public", "return": "List<AppIdNamespaceDto>", "body": "@Override\n    public List<AppIdNamespaceDto> getNamespaces() {\n        AppEngineHelper.disableApiHooks();\n\n        Iterable<Entity> entities = datastoreHelper.getAllNamespaces();\n\n        Iterable<AppIdNamespaceDto> namespaces = FluentIterable.from(entities)\n                .transform(new Function<Entity, AppIdNamespaceDto>() {\n                    @Override\n                    public AppIdNamespaceDto apply(Entity input) {\n                        return new AppIdNamespaceDto(input.getAppId(),\n                                Entities.getNamespaceFromNamespaceKey(input.getKey()));\n                    }\n                });\n\n        return Lists.newArrayList(namespaces);\n    }", "signature": "List<AppIdNamespaceDto> getNamespaces()", "full_signature": "@Override public List<AppIdNamespaceDto> getNamespaces()", "class_method_signature": "NamespacesServiceImpl.getNamespaces()", "testcase": false, "constructor": false, "invocations": ["disableApiHooks", "getAllNamespaces", "transform", "from", "getAppId", "getNamespaceFromNamespaceKey", "getKey", "newArrayList"]}, "repository": {"repo_id": 29952888, "url": "https://github.com/ArcBees/gae-studio", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 21, "size": 11408, "license": "licensed"}}