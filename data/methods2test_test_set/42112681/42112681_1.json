{"test_class": {"identifier": "SymbolTest", "superclass": "", "interfaces": "", "fields": [], "file": "lib/jdee-server/src/test/java/jde/juci/SymbolTest.java"}, "test_case": {"identifier": "testJava2Elisp2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testJava2Elisp2() {\n        assertEquals(\"jdee-foo-call-left-right\", Symbol.java2Elisp(\"jdee.foo.Call.leftRight\"));\n    }", "signature": "void testJava2Elisp2()", "full_signature": "@Test public void testJava2Elisp2()", "class_method_signature": "SymbolTest.testJava2Elisp2()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "java2Elisp"]}, "focal_class": {"identifier": "Symbol", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}], "methods": [{"identifier": "Symbol", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " Symbol(String name)", "full_signature": "public  Symbol(String name)", "class_method_signature": "Symbol.Symbol(String name)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "Symbol.getName()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Symbol.toString()", "testcase": false, "constructor": false}, {"identifier": "java2Elisp", "parameters": "(String javaName)", "modifiers": "public static", "return": "String", "signature": "String java2Elisp(String javaName)", "full_signature": "public static String java2Elisp(String javaName)", "class_method_signature": "Symbol.java2Elisp(String javaName)", "testcase": false, "constructor": false}], "file": "lib/jdee-server/src/main/java/jde/juci/Symbol.java"}, "focal_method": {"identifier": "java2Elisp", "parameters": "(String javaName)", "modifiers": "public static", "return": "String", "body": "public static String java2Elisp(String javaName) {\n\n    StringBuffer lispName        = new StringBuffer();\n    boolean      lastCharWasDash = false;\n    char         prev            = ' ';\n\n    for (int i = 0; i < javaName.length(); i++) {\n\n      char c = javaName.charAt(i);\n\n      if (!Character.isLetterOrDigit(c)) {\n        lispName.append('-');\n        lastCharWasDash = true;\n      } else {\n        // add in a dash only if the last character was not a dash and we\n        // didn't undergo a case change from lower to upper case\n        if (i > 0 && !lastCharWasDash\n            && Character.isLetter(prev)\n            && Character.isLetter(c)\n            && Character.isLowerCase(prev)\n            && Character.isUpperCase(c)) {\n          lispName.append('-');\n        }\n\n        lispName.append(Character.toLowerCase(c));\n        lastCharWasDash = false;\n      }\n      prev = c;\n    }\n\n    return lispName.toString();\n  }", "signature": "String java2Elisp(String javaName)", "full_signature": "public static String java2Elisp(String javaName)", "class_method_signature": "Symbol.java2Elisp(String javaName)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "isLetterOrDigit", "append", "isLetter", "isLetter", "isLowerCase", "isUpperCase", "append", "append", "toLowerCase", "toString"]}, "repository": {"repo_id": 42112681, "url": "https://github.com/kqr/.emacs.d", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 42179, "license": "licensed"}}