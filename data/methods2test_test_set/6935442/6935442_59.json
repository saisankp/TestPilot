{"test_class": {"identifier": "_ArraysTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<Integer[]> inputSamples;", "modifier": "private", "type": "List<Integer[]>", "declarator": "inputSamples", "var_name": "inputSamples"}], "file": "commons/src/test/java/org/apache/isis/commons/internal/collections/_ArraysTest.java"}, "test_case": {"identifier": "removeByIndex_null", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void removeByIndex_null() {\n        val input = (Integer[])null;\n        assertThrows(IllegalArgumentException.class, \n                ()->_Arrays.removeByIndex(input, 0));\n    }", "signature": "void removeByIndex_null()", "full_signature": "@Test void removeByIndex_null()", "class_method_signature": "_ArraysTest.removeByIndex_null()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "removeByIndex"]}, "focal_class": {"identifier": "_Arrays", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "testAnyMatch", "parameters": "(\n            @Nullable final T[] array1, \n            @Nullable final T[] array2, \n            final BiPredicate<T, T> test)", "modifiers": "public static", "return": "boolean", "signature": "boolean testAnyMatch(\n            @Nullable final T[] array1, \n            @Nullable final T[] array2, \n            final BiPredicate<T, T> test)", "full_signature": "public static boolean testAnyMatch(\n            @Nullable final T[] array1, \n            @Nullable final T[] array2, \n            final BiPredicate<T, T> test)", "class_method_signature": "_Arrays.testAnyMatch(\n            @Nullable final T[] array1, \n            @Nullable final T[] array2, \n            final BiPredicate<T, T> test)", "testcase": false, "constructor": false}, {"identifier": "testAllMatch", "parameters": "(\n            @Nullable final T[] array1, \n            @Nullable final T[] array2, \n            final BiPredicate<T, T> test)", "modifiers": "public static", "return": "boolean", "signature": "boolean testAllMatch(\n            @Nullable final T[] array1, \n            @Nullable final T[] array2, \n            final BiPredicate<T, T> test)", "full_signature": "public static boolean testAllMatch(\n            @Nullable final T[] array1, \n            @Nullable final T[] array2, \n            final BiPredicate<T, T> test)", "class_method_signature": "_Arrays.testAllMatch(\n            @Nullable final T[] array1, \n            @Nullable final T[] array2, \n            final BiPredicate<T, T> test)", "testcase": false, "constructor": false}, {"identifier": "isArrayType", "parameters": "(@Nullable final Class<?> cls)", "modifiers": "public static", "return": "boolean", "signature": "boolean isArrayType(@Nullable final Class<?> cls)", "full_signature": "public static boolean isArrayType(@Nullable final Class<?> cls)", "class_method_signature": "_Arrays.isArrayType(@Nullable final Class<?> cls)", "testcase": false, "constructor": false}, {"identifier": "isCollectionOrArrayType", "parameters": "(final Class<?> cls)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCollectionOrArrayType(final Class<?> cls)", "full_signature": "public static boolean isCollectionOrArrayType(final Class<?> cls)", "class_method_signature": "_Arrays.isCollectionOrArrayType(final Class<?> cls)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(final Class<T> componentType, final int length)", "modifiers": "public static", "return": "Collector<T,?,T[]>", "signature": "Collector<T,?,T[]> toArray(final Class<T> componentType, final int length)", "full_signature": "public static Collector<T,?,T[]> toArray(final Class<T> componentType, final int length)", "class_method_signature": "_Arrays.toArray(final Class<T> componentType, final int length)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(final Class<T> componentType)", "modifiers": "public static", "return": "Collector<T,?,T[]>", "signature": "Collector<T,?,T[]> toArray(final Class<T> componentType)", "full_signature": "public static Collector<T,?,T[]> toArray(final Class<T> componentType)", "class_method_signature": "_Arrays.toArray(final Class<T> componentType)", "testcase": false, "constructor": false}, {"identifier": "combine", "parameters": "(T first, @Nullable  T... rest)", "modifiers": "@SafeVarargs public static", "return": "T[]", "signature": "T[] combine(T first, @Nullable  T... rest)", "full_signature": "@SafeVarargs public static T[] combine(T first, @Nullable  T... rest)", "class_method_signature": "_Arrays.combine(T first, @Nullable  T... rest)", "testcase": false, "constructor": false}, {"identifier": "combineWithExplicitType", "parameters": "(Class<T> type, X first, @Nullable  Y... rest)", "modifiers": "@SafeVarargs public static", "return": "T[]", "signature": "T[] combineWithExplicitType(Class<T> type, X first, @Nullable  Y... rest)", "full_signature": "@SafeVarargs public static T[] combineWithExplicitType(Class<T> type, X first, @Nullable  Y... rest)", "class_method_signature": "_Arrays.combineWithExplicitType(Class<T> type, X first, @Nullable  Y... rest)", "testcase": false, "constructor": false}, {"identifier": "combine", "parameters": "(T[] first, T... rest)", "modifiers": "@SafeVarargs public static", "return": "T[]", "signature": "T[] combine(T[] first, T... rest)", "full_signature": "@SafeVarargs public static T[] combine(T[] first, T... rest)", "class_method_signature": "_Arrays.combine(T[] first, T... rest)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(@Nullable final Collection<? extends T> collection, final Class<T> componentType)", "modifiers": "public static", "return": "T[]", "signature": "T[] toArray(@Nullable final Collection<? extends T> collection, final Class<T> componentType)", "full_signature": "public static T[] toArray(@Nullable final Collection<? extends T> collection, final Class<T> componentType)", "class_method_signature": "_Arrays.toArray(@Nullable final Collection<? extends T> collection, final Class<T> componentType)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(@Nullable final Iterable<? extends T> iterable, final Class<T> componentType)", "modifiers": "public static", "return": "T[]", "signature": "T[] toArray(@Nullable final Iterable<? extends T> iterable, final Class<T> componentType)", "full_signature": "public static T[] toArray(@Nullable final Iterable<? extends T> iterable, final Class<T> componentType)", "class_method_signature": "_Arrays.toArray(@Nullable final Iterable<? extends T> iterable, final Class<T> componentType)", "testcase": false, "constructor": false}, {"identifier": "removeByIndex", "parameters": "(T[] array, int index)", "modifiers": "public static", "return": "T[]", "signature": "T[] removeByIndex(T[] array, int index)", "full_signature": "public static T[] removeByIndex(T[] array, int index)", "class_method_signature": "_Arrays.removeByIndex(T[] array, int index)", "testcase": false, "constructor": false}, {"identifier": "emptyToNull", "parameters": "(T[] array)", "modifiers": "public static @Nullable", "return": "T[]", "signature": "T[] emptyToNull(T[] array)", "full_signature": "public static @Nullable T[] emptyToNull(T[] array)", "class_method_signature": "_Arrays.emptyToNull(T[] array)", "testcase": false, "constructor": false}, {"identifier": "inferComponentTypeIfAny", "parameters": "(@Nullable final Class<?> arrayType)", "modifiers": "public static @Nullable", "return": "Class<?>", "signature": "Class<?> inferComponentTypeIfAny(@Nullable final Class<?> arrayType)", "full_signature": "public static @Nullable Class<?> inferComponentTypeIfAny(@Nullable final Class<?> arrayType)", "class_method_signature": "_Arrays.inferComponentTypeIfAny(@Nullable final Class<?> arrayType)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(@Nullable T[] array, int index)", "modifiers": "public static", "return": "Optional<T>", "signature": "Optional<T> get(@Nullable T[] array, int index)", "full_signature": "public static Optional<T> get(@Nullable T[] array, int index)", "class_method_signature": "_Arrays.get(@Nullable T[] array, int index)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(\n            @Nullable T[] array, \n            @NonNull Class<R> resultElementType, \n            @NonNull Function<T, R> mapper)", "modifiers": "@Nullable public static", "return": "R[]", "signature": "R[] map(\n            @Nullable T[] array, \n            @NonNull Class<R> resultElementType, \n            @NonNull Function<T, R> mapper)", "full_signature": "@Nullable public static R[] map(\n            @Nullable T[] array, \n            @NonNull Class<R> resultElementType, \n            @NonNull Function<T, R> mapper)", "class_method_signature": "_Arrays.map(\n            @Nullable T[] array, \n            @NonNull Class<R> resultElementType, \n            @NonNull Function<T, R> mapper)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(\n            @Nullable T[] array, \n            @NonNull Function<T, ?> mapper)", "modifiers": "@Nullable public static", "return": "Object[]", "signature": "Object[] map(\n            @Nullable T[] array, \n            @NonNull Function<T, ?> mapper)", "full_signature": "@Nullable public static Object[] map(\n            @Nullable T[] array, \n            @NonNull Function<T, ?> mapper)", "class_method_signature": "_Arrays.map(\n            @Nullable T[] array, \n            @NonNull Function<T, ?> mapper)", "testcase": false, "constructor": false}, {"identifier": "mapCollection", "parameters": "(\n            @Nullable Collection<T> collection, \n            @NonNull Class<R> resultElementType, \n            @NonNull Function<T, R> mapper)", "modifiers": "@Nullable public static", "return": "R[]", "signature": "R[] mapCollection(\n            @Nullable Collection<T> collection, \n            @NonNull Class<R> resultElementType, \n            @NonNull Function<T, R> mapper)", "full_signature": "@Nullable public static R[] mapCollection(\n            @Nullable Collection<T> collection, \n            @NonNull Class<R> resultElementType, \n            @NonNull Function<T, R> mapper)", "class_method_signature": "_Arrays.mapCollection(\n            @Nullable Collection<T> collection, \n            @NonNull Class<R> resultElementType, \n            @NonNull Function<T, R> mapper)", "testcase": false, "constructor": false}, {"identifier": "mapCollection", "parameters": "(\n            @Nullable Collection<T> collection, \n            @NonNull Function<T, ?> mapper)", "modifiers": "@Nullable public static", "return": "Object[]", "signature": "Object[] mapCollection(\n            @Nullable Collection<T> collection, \n            @NonNull Function<T, ?> mapper)", "full_signature": "@Nullable public static Object[] mapCollection(\n            @Nullable Collection<T> collection, \n            @NonNull Function<T, ?> mapper)", "class_method_signature": "_Arrays.mapCollection(\n            @Nullable Collection<T> collection, \n            @NonNull Function<T, ?> mapper)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/org/apache/isis/commons/internal/collections/_Arrays.java"}, "focal_method": {"identifier": "removeByIndex", "parameters": "(T[] array, int index)", "modifiers": "public static", "return": "T[]", "body": "public static <T> T[] removeByIndex(T[] array, int index) {\n        if(array==null || array.length<1) {\n            throw new IllegalArgumentException(\"Array must be of lenght 1 or larger.\");\n        }\n        if(index<0 || index>=array.length) {\n            val msg = String.format(\"Array index %d is out of bounds [0, %d]\", index, array.length-1);\n            throw new IllegalArgumentException(msg);\n        }\n        final T[] result = Arrays.copyOf(array, array.length - 1);\n        // copy the elements from index + 1 till end \n        // from original array to the new array \n        val remaining = result.length - index;\n        System.arraycopy(array, index+1, result, index, remaining);\n        return result;\n    }", "signature": "T[] removeByIndex(T[] array, int index)", "full_signature": "public static T[] removeByIndex(T[] array, int index)", "class_method_signature": "_Arrays.removeByIndex(T[] array, int index)", "testcase": false, "constructor": false, "invocations": ["format", "copyOf", "arraycopy"]}, "repository": {"repo_id": 6935442, "url": "https://github.com/apache/isis", "stars": 516, "created": "11/30/2012 8:00:24 AM +00:00", "updates": "2020-01-27T13:28:09+00:00", "fork": "False", "license": "licensed"}}