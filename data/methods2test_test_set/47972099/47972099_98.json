{"test_class": {"identifier": "GenericTypeInfoTest", "superclass": "extends TestLogger", "interfaces": "", "fields": [], "file": "flink-core/src/test/java/org/apache/flink/api/java/typeutils/GenericTypeInfoTest.java"}, "test_case": {"identifier": "testGenericTypeInfoEquality", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGenericTypeInfoEquality() {\n\t\tGenericTypeInfo<TestClass> tpeInfo1 = new GenericTypeInfo<>(TestClass.class);\n\t\tGenericTypeInfo<TestClass> tpeInfo2 = new GenericTypeInfo<>(TestClass.class);\n\n\t\tassertEquals(tpeInfo1, tpeInfo2);\n\t\tassertEquals(tpeInfo1.hashCode(), tpeInfo2.hashCode());\n\t}", "signature": "void testGenericTypeInfoEquality()", "full_signature": "@Test public void testGenericTypeInfoEquality()", "class_method_signature": "GenericTypeInfoTest.testGenericTypeInfoEquality()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "assertEquals", "hashCode", "hashCode"]}, "focal_class": {"identifier": "GenericTypeInfo", "superclass": "extends TypeInformation<T>", "interfaces": "implements AtomicType<T>", "fields": [{"original_string": "private static final long serialVersionUID = -7959114120287706504L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -7959114120287706504L", "var_name": "serialVersionUID"}, {"original_string": "private final Class<T> typeClass;", "modifier": "private final", "type": "Class<T>", "declarator": "typeClass", "var_name": "typeClass"}], "methods": [{"identifier": "GenericTypeInfo", "parameters": "(Class<T> typeClass)", "modifiers": "@PublicEvolving public", "return": "", "signature": " GenericTypeInfo(Class<T> typeClass)", "full_signature": "@PublicEvolving public  GenericTypeInfo(Class<T> typeClass)", "class_method_signature": "GenericTypeInfo.GenericTypeInfo(Class<T> typeClass)", "testcase": false, "constructor": true}, {"identifier": "isBasicType", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "boolean", "signature": "boolean isBasicType()", "full_signature": "@Override @PublicEvolving public boolean isBasicType()", "class_method_signature": "GenericTypeInfo.isBasicType()", "testcase": false, "constructor": false}, {"identifier": "isTupleType", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "boolean", "signature": "boolean isTupleType()", "full_signature": "@Override @PublicEvolving public boolean isTupleType()", "class_method_signature": "GenericTypeInfo.isTupleType()", "testcase": false, "constructor": false}, {"identifier": "getArity", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "int", "signature": "int getArity()", "full_signature": "@Override @PublicEvolving public int getArity()", "class_method_signature": "GenericTypeInfo.getArity()", "testcase": false, "constructor": false}, {"identifier": "getTotalFields", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "int", "signature": "int getTotalFields()", "full_signature": "@Override @PublicEvolving public int getTotalFields()", "class_method_signature": "GenericTypeInfo.getTotalFields()", "testcase": false, "constructor": false}, {"identifier": "getTypeClass", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "Class<T>", "signature": "Class<T> getTypeClass()", "full_signature": "@Override @PublicEvolving public Class<T> getTypeClass()", "class_method_signature": "GenericTypeInfo.getTypeClass()", "testcase": false, "constructor": false}, {"identifier": "isKeyType", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "boolean", "signature": "boolean isKeyType()", "full_signature": "@Override @PublicEvolving public boolean isKeyType()", "class_method_signature": "GenericTypeInfo.isKeyType()", "testcase": false, "constructor": false}, {"identifier": "createSerializer", "parameters": "(ExecutionConfig config)", "modifiers": "@Override @PublicEvolving public", "return": "TypeSerializer<T>", "signature": "TypeSerializer<T> createSerializer(ExecutionConfig config)", "full_signature": "@Override @PublicEvolving public TypeSerializer<T> createSerializer(ExecutionConfig config)", "class_method_signature": "GenericTypeInfo.createSerializer(ExecutionConfig config)", "testcase": false, "constructor": false}, {"identifier": "createComparator", "parameters": "(boolean sortOrderAscending, ExecutionConfig executionConfig)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override @PublicEvolving public", "return": "TypeComparator<T>", "signature": "TypeComparator<T> createComparator(boolean sortOrderAscending, ExecutionConfig executionConfig)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override @PublicEvolving public TypeComparator<T> createComparator(boolean sortOrderAscending, ExecutionConfig executionConfig)", "class_method_signature": "GenericTypeInfo.createComparator(boolean sortOrderAscending, ExecutionConfig executionConfig)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "GenericTypeInfo.hashCode()", "testcase": false, "constructor": false}, {"identifier": "canEqual", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canEqual(Object obj)", "full_signature": "@Override public boolean canEqual(Object obj)", "class_method_signature": "GenericTypeInfo.canEqual(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "GenericTypeInfo.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "GenericTypeInfo.toString()", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/api/java/typeutils/GenericTypeInfo.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n\tpublic int hashCode() {\n\t\treturn typeClass.hashCode();\n\t}", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "GenericTypeInfo.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}