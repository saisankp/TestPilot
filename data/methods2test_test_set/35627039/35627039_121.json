{"test_class": {"identifier": "NotificationServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mocked\n    ProxyUtil<Notifier> mockProxyUtil;", "modifier": "@Mocked", "type": "ProxyUtil<Notifier>", "declarator": "mockProxyUtil", "var_name": "mockProxyUtil"}, {"original_string": "@Mocked\n    NotificationStore mockNotificationStore;", "modifier": "@Mocked", "type": "NotificationStore", "declarator": "mockNotificationStore", "var_name": "mockNotificationStore"}, {"original_string": "@Mocked\n    NotificationContext mockCtx;", "modifier": "@Mocked", "type": "NotificationContext", "declarator": "mockCtx", "var_name": "mockCtx"}, {"original_string": "@Mocked\n    NotifierConfig mockNotifierConfig;", "modifier": "@Mocked", "type": "NotifierConfig", "declarator": "mockNotifierConfig", "var_name": "mockNotifierConfig"}, {"original_string": "@Mocked\n    Notifier mockNotifier;", "modifier": "@Mocked", "type": "Notifier", "declarator": "mockNotifier", "var_name": "mockNotifier"}, {"original_string": "@Mocked\n    Notification mockNotification;", "modifier": "@Mocked", "type": "Notification", "declarator": "mockNotification", "var_name": "mockNotification"}, {"original_string": "NotificationServiceImpl notificationService;", "modifier": "", "type": "NotificationServiceImpl", "declarator": "notificationService", "var_name": "notificationService"}], "file": "streams/notification/src/test/java/com/hortonworks/streamline/streams/notification/service/NotificationServiceImplTest.java"}, "test_case": {"identifier": "testNotifyWithoutNotifier", "parameters": "()", "modifiers": "@Test(expected = NoSuchNotifierException.class) public", "return": "void", "body": "@Test(expected = NoSuchNotifierException.class)\n    public void testNotifyWithoutNotifier() {\n        notificationService.notify(\"foo_notifier\", mockNotification);\n    }", "signature": "void testNotifyWithoutNotifier()", "full_signature": "@Test(expected = NoSuchNotifierException.class) public void testNotifyWithoutNotifier()", "class_method_signature": "NotificationServiceImplTest.testNotifyWithoutNotifier()", "testcase": true, "constructor": false, "invocations": ["notify"]}, "focal_class": {"identifier": "NotificationServiceImpl", "superclass": "", "interfaces": "implements NotificationService", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(NotificationServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(NotificationServiceImpl.class)", "var_name": "LOG"}, {"original_string": "private static final String QUERY_PARAM_NUM_ROWS = \"numRows\";", "modifier": "private static final", "type": "String", "declarator": "QUERY_PARAM_NUM_ROWS = \"numRows\"", "var_name": "QUERY_PARAM_NUM_ROWS"}, {"original_string": "private static final String QUERY_PARAM_START_TS = \"startTs\";", "modifier": "private static final", "type": "String", "declarator": "QUERY_PARAM_START_TS = \"startTs\"", "var_name": "QUERY_PARAM_START_TS"}, {"original_string": "private static final String QUERY_PARAM_END_TS = \"endTs\";", "modifier": "private static final", "type": "String", "declarator": "QUERY_PARAM_END_TS = \"endTs\"", "var_name": "QUERY_PARAM_END_TS"}, {"original_string": "private static final String QUERY_PARAM_DESC = \"desc\";", "modifier": "private static final", "type": "String", "declarator": "QUERY_PARAM_DESC = \"desc\"", "var_name": "QUERY_PARAM_DESC"}, {"original_string": "private static final String QUEUEHANDLER_THREADS = \"queuehandler.threads\";", "modifier": "private static final", "type": "String", "declarator": "QUEUEHANDLER_THREADS = \"queuehandler.threads\"", "var_name": "QUEUEHANDLER_THREADS"}, {"original_string": "private final ConcurrentHashMap<String, Notifier> notifiers = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentHashMap<String, Notifier>", "declarator": "notifiers = new ConcurrentHashMap<>()", "var_name": "notifiers"}, {"original_string": "private final NotificationQueueHandler queueHandler;", "modifier": "private final", "type": "NotificationQueueHandler", "declarator": "queueHandler", "var_name": "queueHandler"}, {"original_string": "private final ProxyUtil<Notifier> notifierProxyUtil;", "modifier": "private final", "type": "ProxyUtil<Notifier>", "declarator": "notifierProxyUtil", "var_name": "notifierProxyUtil"}, {"original_string": "private final Optional<NotificationStore> notificationStore;", "modifier": "private final", "type": "Optional<NotificationStore>", "declarator": "notificationStore", "var_name": "notificationStore"}], "methods": [{"identifier": "NotificationServiceImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " NotificationServiceImpl()", "full_signature": "public  NotificationServiceImpl()", "class_method_signature": "NotificationServiceImpl.NotificationServiceImpl()", "testcase": false, "constructor": true}, {"identifier": "NotificationServiceImpl", "parameters": "(NotificationStore store)", "modifiers": "public", "return": "", "signature": " NotificationServiceImpl(NotificationStore store)", "full_signature": "public  NotificationServiceImpl(NotificationStore store)", "class_method_signature": "NotificationServiceImpl.NotificationServiceImpl(NotificationStore store)", "testcase": false, "constructor": true}, {"identifier": "NotificationServiceImpl", "parameters": "(Map<String, Object> config)", "modifiers": "public", "return": "", "signature": " NotificationServiceImpl(Map<String, Object> config)", "full_signature": "public  NotificationServiceImpl(Map<String, Object> config)", "class_method_signature": "NotificationServiceImpl.NotificationServiceImpl(Map<String, Object> config)", "testcase": false, "constructor": true}, {"identifier": "NotificationServiceImpl", "parameters": "(Map<String, Object> config, NotificationStore store)", "modifiers": "public", "return": "", "signature": " NotificationServiceImpl(Map<String, Object> config, NotificationStore store)", "full_signature": "public  NotificationServiceImpl(Map<String, Object> config, NotificationStore store)", "class_method_signature": "NotificationServiceImpl.NotificationServiceImpl(Map<String, Object> config, NotificationStore store)", "testcase": false, "constructor": true}, {"identifier": "register", "parameters": "(String notifierName, NotificationContext ctx)", "modifiers": "@Override public", "return": "Notifier", "signature": "Notifier register(String notifierName, NotificationContext ctx)", "full_signature": "@Override public Notifier register(String notifierName, NotificationContext ctx)", "class_method_signature": "NotificationServiceImpl.register(String notifierName, NotificationContext ctx)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String notifierName)", "modifiers": "@Override public", "return": "Notifier", "signature": "Notifier remove(String notifierName)", "full_signature": "@Override public Notifier remove(String notifierName)", "class_method_signature": "NotificationServiceImpl.remove(String notifierName)", "testcase": false, "constructor": false}, {"identifier": "notify", "parameters": "(String notifierName, Notification notification)", "modifiers": "@Override public", "return": "Future<?>", "signature": "Future<?> notify(String notifierName, Notification notification)", "full_signature": "@Override public Future<?> notify(String notifierName, Notification notification)", "class_method_signature": "NotificationServiceImpl.notify(String notifierName, Notification notification)", "testcase": false, "constructor": false}, {"identifier": "getNotification", "parameters": "(String notificationId)", "modifiers": "@Override public", "return": "Notification", "signature": "Notification getNotification(String notificationId)", "full_signature": "@Override public Notification getNotification(String notificationId)", "class_method_signature": "NotificationServiceImpl.getNotification(String notificationId)", "testcase": false, "constructor": false}, {"identifier": "getNotifications", "parameters": "(List<String> notificationIds)", "modifiers": "@Override public", "return": "List<Notification>", "signature": "List<Notification> getNotifications(List<String> notificationIds)", "full_signature": "@Override public List<Notification> getNotifications(List<String> notificationIds)", "class_method_signature": "NotificationServiceImpl.getNotifications(List<String> notificationIds)", "testcase": false, "constructor": false}, {"identifier": "findNotifications", "parameters": "(List<QueryParam> queryParams)", "modifiers": "@Override public", "return": "List<Notification>", "signature": "List<Notification> findNotifications(List<QueryParam> queryParams)", "full_signature": "@Override public List<Notification> findNotifications(List<QueryParam> queryParams)", "class_method_signature": "NotificationServiceImpl.findNotifications(List<QueryParam> queryParams)", "testcase": false, "constructor": false}, {"identifier": "getEvent", "parameters": "(String eventId)", "modifiers": "@Override public", "return": "StreamlineEvent", "signature": "StreamlineEvent getEvent(String eventId)", "full_signature": "@Override public StreamlineEvent getEvent(String eventId)", "class_method_signature": "NotificationServiceImpl.getEvent(String eventId)", "testcase": false, "constructor": false}, {"identifier": "getEvents", "parameters": "(List<String> eventIds)", "modifiers": "@Override public", "return": "List<StreamlineEvent>", "signature": "List<StreamlineEvent> getEvents(List<String> eventIds)", "full_signature": "@Override public List<StreamlineEvent> getEvents(List<String> eventIds)", "class_method_signature": "NotificationServiceImpl.getEvents(List<String> eventIds)", "testcase": false, "constructor": false}, {"identifier": "updateNotificationStatus", "parameters": "(String notificationId, Notification.Status status)", "modifiers": "@Override public", "return": "Notification", "signature": "Notification updateNotificationStatus(String notificationId, Notification.Status status)", "full_signature": "@Override public Notification updateNotificationStatus(String notificationId, Notification.Status status)", "class_method_signature": "NotificationServiceImpl.updateNotificationStatus(String notificationId, Notification.Status status)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "NotificationServiceImpl.close()", "testcase": false, "constructor": false}, {"identifier": "loadNotifier", "parameters": "(String jarPath, String className)", "modifiers": "private", "return": "Notifier", "signature": "Notifier loadNotifier(String jarPath, String className)", "full_signature": "private Notifier loadNotifier(String jarPath, String className)", "class_method_signature": "NotificationServiceImpl.loadNotifier(String jarPath, String className)", "testcase": false, "constructor": false}], "file": "streams/notification/src/main/java/com/hortonworks/streamline/streams/notification/service/NotificationServiceImpl.java"}, "focal_method": {"identifier": "notify", "parameters": "(String notifierName, Notification notification)", "modifiers": "@Override public", "return": "Future<?>", "body": "@Override\n    public Future<?> notify(String notifierName, Notification notification) {\n        LOG.debug(\"Notify notifierName {}, notification {}\", notifierName, notification);\n        notificationStore.ifPresent(s -> s.store(notification));\n        Notifier notifier = notifiers.get(notifierName);\n        if (notifier == null) {\n            throw new NoSuchNotifierException(\"Notifier not found for id \" + notification.getNotifierName());\n        }\n        return queueHandler.enqueue(notifier, notification);\n    }", "signature": "Future<?> notify(String notifierName, Notification notification)", "full_signature": "@Override public Future<?> notify(String notifierName, Notification notification)", "class_method_signature": "NotificationServiceImpl.notify(String notifierName, Notification notification)", "testcase": false, "constructor": false, "invocations": ["debug", "ifPresent", "store", "get", "getNotifierName", "enqueue"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}