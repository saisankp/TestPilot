{"test_class": {"identifier": "DBUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/index/sqlite/support/DBUtilsTest.java"}, "test_case": {"identifier": "testGetDBTypeForClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDBTypeForClass() throws Exception {\n\n        Assert.assertEquals(\"INTEGER\", DBUtils.getDBTypeForClass(Integer.class));\n        Assert.assertEquals(\"INTEGER\", DBUtils.getDBTypeForClass(Long.class));\n        Assert.assertEquals(\"INTEGER\", DBUtils.getDBTypeForClass(Short.class));\n        Assert.assertEquals(\"INTEGER\", DBUtils.getDBTypeForClass(Boolean.class));\n\n        Assert.assertEquals(\"REAL\", DBUtils.getDBTypeForClass(Float.class));\n        Assert.assertEquals(\"REAL\", DBUtils.getDBTypeForClass(Double.class));\n\n        Assert.assertEquals(\"TEXT\", DBUtils.getDBTypeForClass(String.class));\n        Assert.assertEquals(\"TEXT\", DBUtils.getDBTypeForClass(CharSequence.class));\n        Assert.assertEquals(\"TEXT\", DBUtils.getDBTypeForClass(BigDecimal.class));\n\n        Assert.assertEquals(\"INTEGER\", DBUtils.getDBTypeForClass(java.util.Date.class));\n        Assert.assertEquals(\"INTEGER\", DBUtils.getDBTypeForClass(java.sql.Date.class));\n        Assert.assertEquals(\"INTEGER\", DBUtils.getDBTypeForClass(Time.class));\n        Assert.assertEquals(\"INTEGER\", DBUtils.getDBTypeForClass(Timestamp.class));\n\n        Assert.assertEquals(\"BLOB\", DBUtils.getDBTypeForClass(byte[].class));\n\n    }", "signature": "void testGetDBTypeForClass()", "full_signature": "@Test public void testGetDBTypeForClass()", "class_method_signature": "DBUtilsTest.testGetDBTypeForClass()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getDBTypeForClass", "assertEquals", "getDBTypeForClass", "assertEquals", "getDBTypeForClass", "assertEquals", "getDBTypeForClass", "assertEquals", "getDBTypeForClass", "assertEquals", "getDBTypeForClass", "assertEquals", "getDBTypeForClass", "assertEquals", "getDBTypeForClass", "assertEquals", "getDBTypeForClass", "assertEquals", "getDBTypeForClass", "assertEquals", "getDBTypeForClass", "assertEquals", "getDBTypeForClass", "assertEquals", "getDBTypeForClass", "assertEquals", "getDBTypeForClass"]}, "focal_class": {"identifier": "DBUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "wrapAsCloseable", "parameters": "(final ResultSet resultSet)", "modifiers": "public static", "return": "Closeable", "signature": "Closeable wrapAsCloseable(final ResultSet resultSet)", "full_signature": "public static Closeable wrapAsCloseable(final ResultSet resultSet)", "class_method_signature": "DBUtils.wrapAsCloseable(final ResultSet resultSet)", "testcase": false, "constructor": false}, {"identifier": "setAutoCommit", "parameters": "(final Connection connection, final boolean value)", "modifiers": "public static", "return": "boolean", "signature": "boolean setAutoCommit(final Connection connection, final boolean value)", "full_signature": "public static boolean setAutoCommit(final Connection connection, final boolean value)", "class_method_signature": "DBUtils.setAutoCommit(final Connection connection, final boolean value)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(final Connection connection)", "modifiers": "public static", "return": "void", "signature": "void commit(final Connection connection)", "full_signature": "public static void commit(final Connection connection)", "class_method_signature": "DBUtils.commit(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "(final Connection connection)", "modifiers": "public static", "return": "boolean", "signature": "boolean rollback(final Connection connection)", "full_signature": "public static boolean rollback(final Connection connection)", "class_method_signature": "DBUtils.rollback(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "closeQuietly", "parameters": "(java.sql.ResultSet resultSet)", "modifiers": "public static", "return": "void", "signature": "void closeQuietly(java.sql.ResultSet resultSet)", "full_signature": "public static void closeQuietly(java.sql.ResultSet resultSet)", "class_method_signature": "DBUtils.closeQuietly(java.sql.ResultSet resultSet)", "testcase": false, "constructor": false}, {"identifier": "closeQuietly", "parameters": "(Statement statement)", "modifiers": "public static", "return": "void", "signature": "void closeQuietly(Statement statement)", "full_signature": "public static void closeQuietly(Statement statement)", "class_method_signature": "DBUtils.closeQuietly(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "closeQuietly", "parameters": "(Connection connection)", "modifiers": "public static", "return": "void", "signature": "void closeQuietly(Connection connection)", "full_signature": "public static void closeQuietly(Connection connection)", "class_method_signature": "DBUtils.closeQuietly(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getDBTypeForClass", "parameters": "(final Class<?> valueType)", "modifiers": "public static", "return": "String", "signature": "String getDBTypeForClass(final Class<?> valueType)", "full_signature": "public static String getDBTypeForClass(final Class<?> valueType)", "class_method_signature": "DBUtils.getDBTypeForClass(final Class<?> valueType)", "testcase": false, "constructor": false}, {"identifier": "setValueToPreparedStatement", "parameters": "(int index, final PreparedStatement preparedStatement, Object value)", "modifiers": "public static", "return": "void", "signature": "void setValueToPreparedStatement(int index, final PreparedStatement preparedStatement, Object value)", "full_signature": "public static void setValueToPreparedStatement(int index, final PreparedStatement preparedStatement, Object value)", "class_method_signature": "DBUtils.setValueToPreparedStatement(int index, final PreparedStatement preparedStatement, Object value)", "testcase": false, "constructor": false}, {"identifier": "setValuesToPreparedStatement", "parameters": "(final int startIndex, final PreparedStatement preparedStatement, final Iterable values)", "modifiers": "public static", "return": "int", "signature": "int setValuesToPreparedStatement(final int startIndex, final PreparedStatement preparedStatement, final Iterable values)", "full_signature": "public static int setValuesToPreparedStatement(final int startIndex, final PreparedStatement preparedStatement, final Iterable values)", "class_method_signature": "DBUtils.setValuesToPreparedStatement(final int startIndex, final PreparedStatement preparedStatement, final Iterable values)", "testcase": false, "constructor": false}, {"identifier": "getValueFromResultSet", "parameters": "(int index, final ResultSet resultSet, final Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T getValueFromResultSet(int index, final ResultSet resultSet, final Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T getValueFromResultSet(int index, final ResultSet resultSet, final Class<T> type)", "class_method_signature": "DBUtils.getValueFromResultSet(int index, final ResultSet resultSet, final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "sanitizeForTableName", "parameters": "(String input)", "modifiers": "public static", "return": "String", "signature": "String sanitizeForTableName(String input)", "full_signature": "public static String sanitizeForTableName(String input)", "class_method_signature": "DBUtils.sanitizeForTableName(String input)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/index/sqlite/support/DBUtils.java"}, "focal_method": {"identifier": "getDBTypeForClass", "parameters": "(final Class<?> valueType)", "modifiers": "public static", "return": "String", "body": "public static String getDBTypeForClass(final Class<?> valueType){\n\n        if ( CharSequence.class.isAssignableFrom(valueType) || BigDecimal.class.isAssignableFrom(valueType)) {\n            return \"TEXT\";\n\n        }else if (Long.class.isAssignableFrom(valueType) || Integer.class.isAssignableFrom(valueType) || Short.class.isAssignableFrom(valueType) || Boolean.class.isAssignableFrom(valueType) || Date.class.isAssignableFrom(valueType)) {\n            return \"INTEGER\";\n\n        }else if (Float.class.isAssignableFrom(valueType) || Double.class.isAssignableFrom(valueType)){\n            return \"REAL\";\n\n        }else if (valueType == byte[].class){\n            return \"BLOB\";\n\n        }else{\n            throw new IllegalStateException(\"Type \" + valueType + \" not supported.\");\n        }\n    }", "signature": "String getDBTypeForClass(final Class<?> valueType)", "full_signature": "public static String getDBTypeForClass(final Class<?> valueType)", "class_method_signature": "DBUtils.getDBTypeForClass(final Class<?> valueType)", "testcase": false, "constructor": false, "invocations": ["isAssignableFrom", "isAssignableFrom", "isAssignableFrom", "isAssignableFrom", "isAssignableFrom", "isAssignableFrom", "isAssignableFrom", "isAssignableFrom", "isAssignableFrom"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}