{"test_class": {"identifier": "MvcInterceptorManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MvcInterceptorManager mvcInterceptorMgr = new MvcInterceptorManager();", "modifier": "", "type": "MvcInterceptorManager", "declarator": "mvcInterceptorMgr = new MvcInterceptorManager()", "var_name": "mvcInterceptorMgr"}], "file": "core/modules/boot/src/test/java/org/onetwo/boot/core/web/mvc/interceptor/MvcInterceptorManagerTest.java"}, "test_case": {"identifier": "testSub2ControllerUserAuthDisabled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSub2ControllerUserAuthDisabled(){\n\t\tSub2ControllerTest sub = new Sub2ControllerTest();\n\t\tMethod userAuthDisabled = ReflectUtils.findMethod(Sub2ControllerTest.class, \"userAuth\");\n\t\tHandlerMethod hm = new HandlerMethod(sub, userAuthDisabled);\n\t\t\n\t\tList<AnnotationAttributes> attrs = new ArrayList<AnnotationAttributes>(mvcInterceptorMgr.findInterceptorAnnotationAttrsList(hm));\n\t\tassertThat(attrs).isEmpty();\n\t}", "signature": "void testSub2ControllerUserAuthDisabled()", "full_signature": "@Test public void testSub2ControllerUserAuthDisabled()", "class_method_signature": "MvcInterceptorManagerTest.testSub2ControllerUserAuthDisabled()", "testcase": true, "constructor": false, "invocations": ["findMethod", "findInterceptorAnnotationAttrsList", "isEmpty", "assertThat"]}, "focal_class": {"identifier": "MvcInterceptorManager", "superclass": "extends WebInterceptorAdapter", "interfaces": "implements HandlerMappingListener, ApplicationContextAware, HandlerInterceptor, AsyncHandlerInterceptor", "fields": [{"original_string": "private static final String INTERCEPTORS_KEY = MvcInterceptorManager.class.getName() + \".interceptors\";", "modifier": "private static final", "type": "String", "declarator": "INTERCEPTORS_KEY = MvcInterceptorManager.class.getName() + \".interceptors\"", "var_name": "INTERCEPTORS_KEY"}, {"original_string": "private Cache<Method, HandlerMethodInterceptorMeta> interceptorMetaCaces = CacheBuilder.newBuilder().build();", "modifier": "private", "type": "Cache<Method, HandlerMethodInterceptorMeta>", "declarator": "interceptorMetaCaces = CacheBuilder.newBuilder().build()", "var_name": "interceptorMetaCaces"}, {"original_string": "private LoadingCache<MvcInterceptorMeta, MvcInterceptor> interceptorCaces = CacheBuilder.newBuilder()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build(new CacheLoader<MvcInterceptorMeta, MvcInterceptor>(){\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpublic MvcInterceptor load(MvcInterceptorMeta attr) throws Exception {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn getMvcInterceptor(attr);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});", "modifier": "private", "type": "LoadingCache<MvcInterceptorMeta, MvcInterceptor>", "declarator": "interceptorCaces = CacheBuilder.newBuilder()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build(new CacheLoader<MvcInterceptorMeta, MvcInterceptor>(){\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpublic MvcInterceptor load(MvcInterceptorMeta attr) throws Exception {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn getMvcInterceptor(attr);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})", "var_name": "interceptorCaces"}, {"original_string": "private ApplicationContext applicationContext;", "modifier": "private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private PropertyAnnotationReader propertyAnnotationReader = PropertyAnnotationReader.INSTANCE;", "modifier": "private", "type": "PropertyAnnotationReader", "declarator": "propertyAnnotationReader = PropertyAnnotationReader.INSTANCE", "var_name": "propertyAnnotationReader"}], "methods": [{"identifier": "preHandle", "parameters": "(HttpServletRequest request, HttpServletResponse response, Object handler)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)", "full_signature": "@Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)", "class_method_signature": "MvcInterceptorManager.preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)", "testcase": false, "constructor": false}, {"identifier": "postHandle", "parameters": "(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)", "modifiers": "@Override public", "return": "void", "signature": "void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)", "full_signature": "@Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)", "class_method_signature": "MvcInterceptorManager.postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)", "testcase": false, "constructor": false}, {"identifier": "afterCompletion", "parameters": "(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "modifiers": "@Override public", "return": "void", "signature": "void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "full_signature": "@Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "class_method_signature": "MvcInterceptorManager.afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "testcase": false, "constructor": false}, {"identifier": "afterConcurrentHandlingStarted", "parameters": "(HttpServletRequest request, HttpServletResponse response, Object handler)", "modifiers": "@Override public", "return": "void", "signature": "void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object handler)", "full_signature": "@Override public void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object handler)", "class_method_signature": "MvcInterceptorManager.afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object handler)", "testcase": false, "constructor": false}, {"identifier": "executeInterceptors", "parameters": "(HttpServletRequest request, Object handler, BiConsumer<HandlerMethod, MvcInterceptor> consumer)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void executeInterceptors(HttpServletRequest request, Object handler, BiConsumer<HandlerMethod, MvcInterceptor> consumer)", "full_signature": "@SuppressWarnings(\"unchecked\") private void executeInterceptors(HttpServletRequest request, Object handler, BiConsumer<HandlerMethod, MvcInterceptor> consumer)", "class_method_signature": "MvcInterceptorManager.executeInterceptors(HttpServletRequest request, Object handler, BiConsumer<HandlerMethod, MvcInterceptor> consumer)", "testcase": false, "constructor": false}, {"identifier": "getInterceptorMeta", "parameters": "(Method method)", "modifiers": "private", "return": "Optional<HandlerMethodInterceptorMeta>", "signature": "Optional<HandlerMethodInterceptorMeta> getInterceptorMeta(Method method)", "full_signature": "private Optional<HandlerMethodInterceptorMeta> getInterceptorMeta(Method method)", "class_method_signature": "MvcInterceptorManager.getInterceptorMeta(Method method)", "testcase": false, "constructor": false}, {"identifier": "setApplicationContext", "parameters": "(ApplicationContext applicationContext)", "modifiers": "@Override public", "return": "void", "signature": "void setApplicationContext(ApplicationContext applicationContext)", "full_signature": "@Override public void setApplicationContext(ApplicationContext applicationContext)", "class_method_signature": "MvcInterceptorManager.setApplicationContext(ApplicationContext applicationContext)", "testcase": false, "constructor": false}, {"identifier": "onHandlerMethodsInitialized", "parameters": "(Map<RequestMappingInfo, HandlerMethod> handlerMethods)", "modifiers": "@Override public", "return": "void", "signature": "void onHandlerMethodsInitialized(Map<RequestMappingInfo, HandlerMethod> handlerMethods)", "full_signature": "@Override public void onHandlerMethodsInitialized(Map<RequestMappingInfo, HandlerMethod> handlerMethods)", "class_method_signature": "MvcInterceptorManager.onHandlerMethodsInitialized(Map<RequestMappingInfo, HandlerMethod> handlerMethods)", "testcase": false, "constructor": false}, {"identifier": "findMvcInterceptors", "parameters": "(HandlerMethod hm)", "modifiers": "protected", "return": "List<? extends MvcInterceptor>", "signature": "List<? extends MvcInterceptor> findMvcInterceptors(HandlerMethod hm)", "full_signature": "protected List<? extends MvcInterceptor> findMvcInterceptors(HandlerMethod hm)", "class_method_signature": "MvcInterceptorManager.findMvcInterceptors(HandlerMethod hm)", "testcase": false, "constructor": false}, {"identifier": "asMvcInterceptorMeta", "parameters": "(AnnotationAttributes attr)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "MvcInterceptorMeta", "signature": "MvcInterceptorMeta asMvcInterceptorMeta(AnnotationAttributes attr)", "full_signature": "@SuppressWarnings(\"unchecked\") protected MvcInterceptorMeta asMvcInterceptorMeta(AnnotationAttributes attr)", "class_method_signature": "MvcInterceptorManager.asMvcInterceptorMeta(AnnotationAttributes attr)", "testcase": false, "constructor": false}, {"identifier": "getMvcInterceptor", "parameters": "(MvcInterceptorMeta attr)", "modifiers": "protected", "return": "MvcInterceptor", "signature": "MvcInterceptor getMvcInterceptor(MvcInterceptorMeta attr)", "full_signature": "protected MvcInterceptor getMvcInterceptor(MvcInterceptorMeta attr)", "class_method_signature": "MvcInterceptorManager.getMvcInterceptor(MvcInterceptorMeta attr)", "testcase": false, "constructor": false}, {"identifier": "createInterceptorInstance", "parameters": "(MvcInterceptorMeta attr)", "modifiers": "protected", "return": "MvcInterceptor", "signature": "MvcInterceptor createInterceptorInstance(MvcInterceptorMeta attr)", "full_signature": "protected MvcInterceptor createInterceptorInstance(MvcInterceptorMeta attr)", "class_method_signature": "MvcInterceptorManager.createInterceptorInstance(MvcInterceptorMeta attr)", "testcase": false, "constructor": false}, {"identifier": "injectAnnotationProperties", "parameters": "(MvcInterceptor interInst, MvcInterceptorMeta attr)", "modifiers": "protected", "return": "MvcInterceptor", "signature": "MvcInterceptor injectAnnotationProperties(MvcInterceptor interInst, MvcInterceptorMeta attr)", "full_signature": "protected MvcInterceptor injectAnnotationProperties(MvcInterceptor interInst, MvcInterceptorMeta attr)", "class_method_signature": "MvcInterceptorManager.injectAnnotationProperties(MvcInterceptor interInst, MvcInterceptorMeta attr)", "testcase": false, "constructor": false}, {"identifier": "findInterceptorAnnotationAttrsList", "parameters": "(HandlerMethod hm)", "modifiers": "final protected", "return": "Collection<AnnotationAttributes>", "signature": "Collection<AnnotationAttributes> findInterceptorAnnotationAttrsList(HandlerMethod hm)", "full_signature": "final protected Collection<AnnotationAttributes> findInterceptorAnnotationAttrsList(HandlerMethod hm)", "class_method_signature": "MvcInterceptorManager.findInterceptorAnnotationAttrsList(HandlerMethod hm)", "testcase": false, "constructor": false}, {"identifier": "derectFindInterceptorAnnotationAttrsList", "parameters": "(HandlerMethod hm)", "modifiers": "final protected", "return": "Collection<AnnotationAttributes>", "signature": "Collection<AnnotationAttributes> derectFindInterceptorAnnotationAttrsList(HandlerMethod hm)", "full_signature": "final protected Collection<AnnotationAttributes> derectFindInterceptorAnnotationAttrsList(HandlerMethod hm)", "class_method_signature": "MvcInterceptorManager.derectFindInterceptorAnnotationAttrsList(HandlerMethod hm)", "testcase": false, "constructor": false}, {"identifier": "getOrder", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getOrder()", "full_signature": "@Override public int getOrder()", "class_method_signature": "MvcInterceptorManager.getOrder()", "testcase": false, "constructor": false}], "file": "core/modules/boot/src/main/java/org/onetwo/boot/core/web/mvc/interceptor/MvcInterceptorManager.java"}, "focal_method": {"identifier": "findInterceptorAnnotationAttrsList", "parameters": "(HandlerMethod hm)", "modifiers": "final protected", "return": "Collection<AnnotationAttributes>", "body": "final protected Collection<AnnotationAttributes> findInterceptorAnnotationAttrsList(HandlerMethod hm){\n\t\tSet<Interceptor> inters = AnnotatedElementUtils.getMergedRepeatableAnnotations(hm.getMethod(), Interceptor.class);\n\t\tif(LangUtils.isEmpty(inters)){\n\t\t\tinters = AnnotatedElementUtils.getMergedRepeatableAnnotations(hm.getBeanType(), Interceptor.class);\n\t\t}\n\t\tif(LangUtils.isEmpty(inters)){\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\tCollection<AnnotationAttributes> attrs = inters.stream()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.map(inter->org.springframework.core.annotation.AnnotationUtils.getAnnotationAttributes(null, inter))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.collect(Collectors.toSet());\n\t\tboolean hasDisabledFlag = attrs.stream()\n\t\t\t\t\t\t\t\t\t\t.anyMatch(attr->asMvcInterceptorMeta(attr).getInterceptorType()==DisableMvcInterceptor.class);\n\t\tif(hasDisabledFlag){\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\treturn attrs;\n\t}", "signature": "Collection<AnnotationAttributes> findInterceptorAnnotationAttrsList(HandlerMethod hm)", "full_signature": "final protected Collection<AnnotationAttributes> findInterceptorAnnotationAttrsList(HandlerMethod hm)", "class_method_signature": "MvcInterceptorManager.findInterceptorAnnotationAttrsList(HandlerMethod hm)", "testcase": false, "constructor": false, "invocations": ["getMergedRepeatableAnnotations", "getMethod", "isEmpty", "getMergedRepeatableAnnotations", "getBeanType", "isEmpty", "emptyList", "collect", "map", "stream", "getAnnotationAttributes", "toSet", "anyMatch", "stream", "getInterceptorType", "asMvcInterceptorMeta", "emptyList"]}, "repository": {"repo_id": 47802308, "url": "https://github.com/wayshall/onetwo", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 16, "size": 57582, "license": "licensed"}}