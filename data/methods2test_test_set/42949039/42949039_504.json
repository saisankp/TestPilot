{"test_class": {"identifier": "AttributeDaoHelperTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private AttributeDaoHelper attributeDaoHelper;", "modifier": "@InjectMocks\n    private", "type": "AttributeDaoHelper", "declarator": "attributeDaoHelper", "var_name": "attributeDaoHelper"}, {"original_string": "@Mock\n    private BusinessObjectDataHelper businessObjectDataHelper;", "modifier": "@Mock\n    private", "type": "BusinessObjectDataHelper", "declarator": "businessObjectDataHelper", "var_name": "businessObjectDataHelper"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/AttributeDaoHelperTest.java"}, "test_case": {"identifier": "testUpdateBusinessObjectDataAttributesAttributeValueNotUpdated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUpdateBusinessObjectDataAttributesAttributeValueNotUpdated()\n    {\n        // Create a business object data attribute entity.\n        BusinessObjectDataAttributeEntity businessObjectDataAttributeEntity = new BusinessObjectDataAttributeEntity();\n        businessObjectDataAttributeEntity.setName(ATTRIBUTE_NAME);\n        businessObjectDataAttributeEntity.setValue(ATTRIBUTE_VALUE);\n\n        // Create a business object data entity that contains one attribute entity.\n        BusinessObjectDataEntity businessObjectDataEntity = new BusinessObjectDataEntity();\n        List<BusinessObjectDataAttributeEntity> businessObjectDataAttributeEntities = new ArrayList<>();\n        businessObjectDataEntity.setAttributes(businessObjectDataAttributeEntities);\n        businessObjectDataAttributeEntities.add(businessObjectDataAttributeEntity);\n\n        // Call the method under test.\n        attributeDaoHelper.updateBusinessObjectDataAttributes(businessObjectDataEntity, Arrays.asList(new Attribute(ATTRIBUTE_NAME, ATTRIBUTE_VALUE)));\n\n        // Verify the external calls.\n        verifyNoMoreInteractionsHelper();\n\n        // Validate the results.\n        assertEquals(1, CollectionUtils.size(businessObjectDataEntity.getAttributes()));\n        BusinessObjectDataAttributeEntity result = IterableUtils.get(businessObjectDataEntity.getAttributes(), 0);\n        assertEquals(ATTRIBUTE_NAME, result.getName());\n        assertEquals(ATTRIBUTE_VALUE, result.getValue());\n    }", "signature": "void testUpdateBusinessObjectDataAttributesAttributeValueNotUpdated()", "full_signature": "@Test public void testUpdateBusinessObjectDataAttributesAttributeValueNotUpdated()", "class_method_signature": "AttributeDaoHelperTest.testUpdateBusinessObjectDataAttributesAttributeValueNotUpdated()", "testcase": true, "constructor": false, "invocations": ["setName", "setValue", "setAttributes", "add", "updateBusinessObjectDataAttributes", "asList", "verifyNoMoreInteractionsHelper", "assertEquals", "size", "getAttributes", "get", "getAttributes", "assertEquals", "getName", "assertEquals", "getValue"]}, "focal_class": {"identifier": "AttributeDaoHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private BusinessObjectDataHelper businessObjectDataHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataHelper", "declarator": "businessObjectDataHelper", "var_name": "businessObjectDataHelper"}], "methods": [{"identifier": "updateBusinessObjectDataAttributes", "parameters": "(BusinessObjectDataEntity businessObjectDataEntity, final List<Attribute> attributes)", "modifiers": "public", "return": "void", "signature": "void updateBusinessObjectDataAttributes(BusinessObjectDataEntity businessObjectDataEntity, final List<Attribute> attributes)", "full_signature": "public void updateBusinessObjectDataAttributes(BusinessObjectDataEntity businessObjectDataEntity, final List<Attribute> attributes)", "class_method_signature": "AttributeDaoHelper.updateBusinessObjectDataAttributes(BusinessObjectDataEntity businessObjectDataEntity, final List<Attribute> attributes)", "testcase": false, "constructor": false}, {"identifier": "validateAttributesAgainstBusinessObjectDataAttributeDefinitions", "parameters": "(final List<Attribute> attributes,\n        final Collection<BusinessObjectDataAttributeDefinitionEntity> businessObjectDataAttributeDefinitionEntities)", "modifiers": "public", "return": "void", "signature": "void validateAttributesAgainstBusinessObjectDataAttributeDefinitions(final List<Attribute> attributes,\n        final Collection<BusinessObjectDataAttributeDefinitionEntity> businessObjectDataAttributeDefinitionEntities)", "full_signature": "public void validateAttributesAgainstBusinessObjectDataAttributeDefinitions(final List<Attribute> attributes,\n        final Collection<BusinessObjectDataAttributeDefinitionEntity> businessObjectDataAttributeDefinitionEntities)", "class_method_signature": "AttributeDaoHelper.validateAttributesAgainstBusinessObjectDataAttributeDefinitions(final List<Attribute> attributes,\n        final Collection<BusinessObjectDataAttributeDefinitionEntity> businessObjectDataAttributeDefinitionEntities)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/AttributeDaoHelper.java"}, "focal_method": {"identifier": "updateBusinessObjectDataAttributes", "parameters": "(BusinessObjectDataEntity businessObjectDataEntity, final List<Attribute> attributes)", "modifiers": "public", "return": "void", "body": "public void updateBusinessObjectDataAttributes(BusinessObjectDataEntity businessObjectDataEntity, final List<Attribute> attributes)\n    {\n        // Load all existing attribute entities in a map with a \"lowercase\" attribute name as the key for case insensitivity.\n        Map<String, BusinessObjectDataAttributeEntity> existingAttributeEntities = new HashMap<>();\n        for (BusinessObjectDataAttributeEntity attributeEntity : businessObjectDataEntity.getAttributes())\n        {\n            String mapKey = attributeEntity.getName().toLowerCase();\n            if (existingAttributeEntities.containsKey(mapKey))\n            {\n                throw new IllegalStateException(String\n                    .format(\"Found duplicate attribute with name \\\"%s\\\" for business object data. Business object data: {%s}\", mapKey,\n                        businessObjectDataHelper.businessObjectDataEntityAltKeyToString(businessObjectDataEntity)));\n            }\n            existingAttributeEntities.put(mapKey, attributeEntity);\n        }\n\n        // Process the list of attributes to determine that business object definition attribute entities should be created, updated, or deleted.\n        List<BusinessObjectDataAttributeEntity> createdAttributeEntities = new ArrayList<>();\n        List<BusinessObjectDataAttributeEntity> retainedAttributeEntities = new ArrayList<>();\n        if (!CollectionUtils.isEmpty(attributes))\n        {\n            for (Attribute attribute : attributes)\n            {\n                // Use a \"lowercase\" attribute name for case insensitivity.\n                String lowercaseAttributeName = attribute.getName().toLowerCase();\n                if (existingAttributeEntities.containsKey(lowercaseAttributeName))\n                {\n                    // Check if the attribute value needs to be updated.\n                    BusinessObjectDataAttributeEntity attributeEntity = existingAttributeEntities.get(lowercaseAttributeName);\n                    if (!StringUtils.equals(attribute.getValue(), attributeEntity.getValue()))\n                    {\n                        // Update the business object attribute entity.\n                        attributeEntity.setValue(attribute.getValue());\n                    }\n\n                    // Add this entity to the list of business object definition attribute entities to be retained.\n                    retainedAttributeEntities.add(attributeEntity);\n                }\n                else\n                {\n                    // Create a new business object attribute entity.\n                    BusinessObjectDataAttributeEntity attributeEntity = new BusinessObjectDataAttributeEntity();\n                    businessObjectDataEntity.getAttributes().add(attributeEntity);\n                    attributeEntity.setBusinessObjectData(businessObjectDataEntity);\n                    attributeEntity.setName(attribute.getName());\n                    attributeEntity.setValue(attribute.getValue());\n\n                    // Add this entity to the list of the newly created business object definition attribute entities.\n                    createdAttributeEntities.add(attributeEntity);\n                }\n            }\n        }\n\n        // Remove any of the currently existing attribute entities that did not get onto the retained entities list.\n        businessObjectDataEntity.getAttributes().retainAll(retainedAttributeEntities);\n\n        // Add all of the newly created business object definition attribute entities.\n        businessObjectDataEntity.getAttributes().addAll(createdAttributeEntities);\n    }", "signature": "void updateBusinessObjectDataAttributes(BusinessObjectDataEntity businessObjectDataEntity, final List<Attribute> attributes)", "full_signature": "public void updateBusinessObjectDataAttributes(BusinessObjectDataEntity businessObjectDataEntity, final List<Attribute> attributes)", "class_method_signature": "AttributeDaoHelper.updateBusinessObjectDataAttributes(BusinessObjectDataEntity businessObjectDataEntity, final List<Attribute> attributes)", "testcase": false, "constructor": false, "invocations": ["getAttributes", "toLowerCase", "getName", "containsKey", "format", "businessObjectDataEntityAltKeyToString", "put", "isEmpty", "toLowerCase", "getName", "containsKey", "get", "equals", "getValue", "getValue", "setValue", "getValue", "add", "add", "getAttributes", "setBusinessObjectData", "setName", "getName", "setValue", "getValue", "add", "retainAll", "getAttributes", "addAll", "getAttributes"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}