{"test_class": {"identifier": "EmbeddedSensorCreationStrategyTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private IMessageReceiver[] receivers = new IMessageReceiver[10];", "modifier": "private", "type": "IMessageReceiver[]", "declarator": "receivers = new IMessageReceiver[10]", "var_name": "receivers"}, {"original_string": "private IMessageProcessor processor = mock(IMessageProcessor.class);", "modifier": "private", "type": "IMessageProcessor", "declarator": "processor = mock(IMessageProcessor.class)", "var_name": "processor"}, {"original_string": "private IChainStorage chainStorageMock;", "modifier": "private", "type": "IChainStorage", "declarator": "chainStorageMock", "var_name": "chainStorageMock"}, {"original_string": "private Object modId = new Object();", "modifier": "private", "type": "Object", "declarator": "modId = new Object()", "var_name": "modId"}, {"original_string": "private IReceiverChain chain;", "modifier": "private", "type": "IReceiverChain", "declarator": "chain", "var_name": "chain"}], "file": "CoreFeatures/Statistics/EmbeddedSensor/src/test/java/info/smart_tools/smartactors/statistics/sensors/embedded_sensor/utils/EmbeddedSensorCreationStrategyTest.java"}, "test_case": {"identifier": "Should_replaceSomeReceiversByWrappers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_replaceSomeReceiversByWrappers()\n            throws Exception {\n        chain = mock(IReceiverChain.class);\n        when(chain.get(0)).thenReturn(receivers[0]);\n        when(chain.get(1)).thenReturn(receivers[1]);\n        when(chain.get(2)).thenReturn(receivers[2]);\n\n        ISensorHandle handle = new EmbeddedSensorCreationStrategy().resolve(\"stat_chain\", IOC.resolve(\n                Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"),\n                (\"{\" +\n                        \"'chain':'the_chain',\" +\n                        \"'args':{},\" +\n                        \"'embed':[\" +\n                        \"   {\" +\n                        \"       'step':0,\" +\n                        \"       'dependency':'additional sensor'\" +\n                        \"   },\" +\n                        \"   {\" +\n                        \"       'step':2\" +\n                        \"   }\" +\n                        \"]\" +\n                        \"}\").replace('\\'','\"')\n        ));\n\n        assertNotNull(handle);\n\n        chain.get(0).receive(processor);\n        verify(receivers[0], times(1)).receive(processor);\n        verify(receivers[8], times(1)).receive(processor);\n\n        chain.get(2).receive(processor);\n        verify(receivers[2], times(1)).receive(processor);\n        verify(receivers[9], times(1)).receive(processor);\n    }", "signature": "void Should_replaceSomeReceiversByWrappers()", "full_signature": "@Test public void Should_replaceSomeReceiversByWrappers()", "class_method_signature": "EmbeddedSensorCreationStrategyTest.Should_replaceSomeReceiversByWrappers()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "get", "thenReturn", "when", "get", "thenReturn", "when", "get", "resolve", "resolve", "getOrAdd", "replace", "assertNotNull", "receive", "get", "receive", "verify", "times", "receive", "verify", "times", "receive", "get", "receive", "verify", "times", "receive", "verify", "times"]}, "focal_class": {"identifier": "EmbeddedSensorCreationStrategy", "superclass": "", "interfaces": "implements IResolveDependencyStrategy", "fields": [{"original_string": "private static final int CHAIN_ID_STRATEGY_ARGUMENT_INDEX = 0;", "modifier": "private static final", "type": "int", "declarator": "CHAIN_ID_STRATEGY_ARGUMENT_INDEX = 0", "var_name": "CHAIN_ID_STRATEGY_ARGUMENT_INDEX"}, {"original_string": "private static final int CONFIG_STRATEGY_ARGUMENT_INDEX = 1;", "modifier": "private static final", "type": "int", "declarator": "CONFIG_STRATEGY_ARGUMENT_INDEX = 1", "var_name": "CONFIG_STRATEGY_ARGUMENT_INDEX"}, {"original_string": "private static final String SENSOR_RECEIVER_REPLACEMENT_DEPENDENCY = \"prepend sensor receiver\";", "modifier": "private static final", "type": "String", "declarator": "SENSOR_RECEIVER_REPLACEMENT_DEPENDENCY = \"prepend sensor receiver\"", "var_name": "SENSOR_RECEIVER_REPLACEMENT_DEPENDENCY"}, {"original_string": "private static final String RECEIVER_REPLACEMENT_MODIFICATION_DEPENDENCY = \"chain modification: replace receivers\";", "modifier": "private static final", "type": "String", "declarator": "RECEIVER_REPLACEMENT_MODIFICATION_DEPENDENCY = \"chain modification: replace receivers\"", "var_name": "RECEIVER_REPLACEMENT_MODIFICATION_DEPENDENCY"}, {"original_string": "private static final String DEFAULT_RECEIVER_DEPENDENCY = \"embedded sensor receiver\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_RECEIVER_DEPENDENCY = \"embedded sensor receiver\"", "var_name": "DEFAULT_RECEIVER_DEPENDENCY"}, {"original_string": "private final IFieldName argsFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "argsFieldName", "var_name": "argsFieldName"}, {"original_string": "private final IFieldName stepFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "stepFieldName", "var_name": "stepFieldName"}, {"original_string": "private final IFieldName dependencyFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "dependencyFieldName", "var_name": "dependencyFieldName"}, {"original_string": "private final IFieldName statisticsChainFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "statisticsChainFieldName", "var_name": "statisticsChainFieldName"}, {"original_string": "private final IFieldName replacementsFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "replacementsFieldName", "var_name": "replacementsFieldName"}, {"original_string": "private final IFieldName modificationFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "modificationFieldName", "var_name": "modificationFieldName"}, {"original_string": "private final IFieldName embedFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "embedFieldName", "var_name": "embedFieldName"}, {"original_string": "private final IFieldName chainFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "chainFieldName", "var_name": "chainFieldName"}], "methods": [{"identifier": "EmbeddedSensorCreationStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " EmbeddedSensorCreationStrategy()", "full_signature": "public  EmbeddedSensorCreationStrategy()", "class_method_signature": "EmbeddedSensorCreationStrategy.EmbeddedSensorCreationStrategy()", "testcase": false, "constructor": true}, {"identifier": "resolve", "parameters": "(final Object... args)", "modifiers": "@Override public", "return": "T", "signature": "T resolve(final Object... args)", "full_signature": "@Override public T resolve(final Object... args)", "class_method_signature": "EmbeddedSensorCreationStrategy.resolve(final Object... args)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Statistics/EmbeddedSensor/src/main/java/info/smart_tools/smartactors/statistics/sensors/embedded_sensor/utils/EmbeddedSensorCreationStrategy.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final Object... args)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T resolve(final Object... args) throws ResolveDependencyStrategyException {\n        try {\n            Object statisticsChainId = args[CHAIN_ID_STRATEGY_ARGUMENT_INDEX];\n            IObject conf = (IObject) args[CONFIG_STRATEGY_ARGUMENT_INDEX];\n\n            IObject commonArgs = (IObject) conf.getValue(argsFieldName);\n            Collection<IObject> embedConf = (Collection<IObject>) conf.getValue(embedFieldName);\n            List<IObject> replacements = new ArrayList<>(embedConf.size());\n\n            Object targetChainId = IOC.resolve(Keys.getOrAdd(\"chain_id_from_map_name\"), conf.getValue(chainFieldName));\n            IChainStorage chainStorage = IOC.resolve(Keys.getOrAdd(IChainStorage.class.getCanonicalName()));\n\n            for (IObject embedItemConf : embedConf) {\n                IObject itemArgs = (IObject) embedItemConf.getValue(argsFieldName);\n                itemArgs = (itemArgs == null) ? commonArgs : itemArgs;\n                final Object itemDependency = embedItemConf.getValue(dependencyFieldName);\n\n                itemArgs.setValue(statisticsChainFieldName, statisticsChainId);\n\n                IMessageReceiver sensor = IOC.resolve(\n                        IOC.resolve(IOC.getKeyForKeyStorage(),\n                                (itemDependency == null) ? DEFAULT_RECEIVER_DEPENDENCY : itemDependency),\n                            itemArgs\n                        );\n\n                IObject replacement = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"));\n\n                replacement.setValue(stepFieldName, embedItemConf.getValue(stepFieldName));\n                replacement.setValue(dependencyFieldName, SENSOR_RECEIVER_REPLACEMENT_DEPENDENCY);\n                replacement.setValue(argsFieldName, sensor);\n\n                replacements.add(replacement);\n            }\n\n            IObject modification = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"));\n\n            modification.setValue(modificationFieldName, RECEIVER_REPLACEMENT_MODIFICATION_DEPENDENCY);\n            modification.setValue(replacementsFieldName, replacements);\n\n            Object modId = chainStorage.update(targetChainId, modification);\n\n            return (T) new EmbeddedSensorHandle(chainStorage, targetChainId, modId);\n        } catch (ReadValueException | ChangeValueException | InvalidArgumentException | ResolutionException | ChainNotFoundException\n                | ChainModificationException e) {\n            throw new ResolveDependencyStrategyException(e);\n        }\n    }", "signature": "T resolve(final Object... args)", "full_signature": "@Override public T resolve(final Object... args)", "class_method_signature": "EmbeddedSensorCreationStrategy.resolve(final Object... args)", "testcase": false, "constructor": false, "invocations": ["getValue", "getValue", "size", "resolve", "getOrAdd", "getValue", "resolve", "getOrAdd", "getCanonicalName", "getValue", "getValue", "setValue", "resolve", "resolve", "getKeyForKeyStorage", "resolve", "getOrAdd", "setValue", "getValue", "setValue", "setValue", "add", "resolve", "getOrAdd", "setValue", "setValue", "update"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}