{"test_class": {"identifier": "UserKeyTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/fr/gael/dhus/server/http/valve/processings/UserKeyTest.java"}, "test_case": {"identifier": "equalsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void equalsTest()\n   {\n      ProcessingInformation pi = new ProcessingInformation(\"Request\");\n      pi.setRemoteAddress(\"123.12.122.33\");\n      pi.setUsername(\"user1\");\n\n      ProcessingInformation pi1 = new ProcessingInformation(\"Request\");\n      pi1.setRemoteAddress(\"99.99.99.123\");\n      pi1.setUsername(\"user1\");\n\n      ProcessingInformation pi2 = new ProcessingInformation(\"Request\");\n      pi2.setRemoteAddress(\"99.99.99.123\");\n      pi2.setUsername(\"user2\");\n\n      ProcessingInformation pi3 = new ProcessingInformation(\"Request\");\n\n      UserKey uk = new UserKey(pi, new UserSelection[]{UserSelection.LOGIN});\n      UserKey uk1 = new UserKey(pi1, new UserSelection[]{UserSelection.IP});\n      UserKey uk2 = new UserKey(pi2, new UserSelection[]{UserSelection.LOGIN, UserSelection.IP});\n      UserKey uk3 = new UserKey(pi3, new UserSelection[]{UserSelection.LOGIN, UserSelection.IP});\n\n      Assert.assertTrue(uk.equals(uk1)); // Compare by LOGIN with same LOGIN only\n      Assert.assertFalse(uk.equals(uk2)); // Compare by LOGIN with different LOGIN only\n\n      Assert.assertTrue(uk1.equals(uk2)); // Compare by IP with same IP\n      Assert.assertFalse(uk1.equals(uk)); // Compare by IP different IP\n\n      Assert.assertFalse(uk2.equals(uk)); // Compare with different IP and LOGIN\n      Assert.assertTrue(uk2.equals(uk2)); // Compare with same IP and LOGIN\n\n      Assert.assertFalse(uk3.equals(uk)); // Compare with different IP and LOGIN\n      Assert.assertTrue(uk3.equals(uk3)); // Compare with different IP and LOGIN\n      Assert.assertFalse(uk2.equals(uk3)); // Compare with different IP and LOGIN\n   }", "signature": "void equalsTest()", "full_signature": "@Test public void equalsTest()", "class_method_signature": "UserKeyTest.equalsTest()", "testcase": true, "constructor": false, "invocations": ["setRemoteAddress", "setUsername", "setRemoteAddress", "setUsername", "setRemoteAddress", "setUsername", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals"]}, "focal_class": {"identifier": "UserKey", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "ProcessingInformation pi;", "modifier": "", "type": "ProcessingInformation", "declarator": "pi", "var_name": "pi"}, {"original_string": "UserSelection[] selection;", "modifier": "", "type": "UserSelection[]", "declarator": "selection", "var_name": "selection"}], "methods": [{"identifier": "getPi", "parameters": "()", "modifiers": "public", "return": "ProcessingInformation", "signature": "ProcessingInformation getPi()", "full_signature": "public ProcessingInformation getPi()", "class_method_signature": "UserKey.getPi()", "testcase": false, "constructor": false}, {"identifier": "UserKey", "parameters": "(ProcessingInformation pi, UserSelection[] selection)", "modifiers": "public", "return": "", "signature": " UserKey(ProcessingInformation pi, UserSelection[] selection)", "full_signature": "public  UserKey(ProcessingInformation pi, UserSelection[] selection)", "class_method_signature": "UserKey.UserKey(ProcessingInformation pi, UserSelection[] selection)", "testcase": false, "constructor": true}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "UserKey.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "UserKey.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/fr/gael/dhus/server/http/valve/processings/UserKey.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n   public boolean equals(Object o)\n   {\n      if (this == o)\n      {\n         return true;\n      }\n      if (o instanceof UserKey)\n      {\n         UserKey key = (UserKey) o;\n         boolean result = true;\n         for (UserSelection sel: this.selection)\n         {\n            switch (sel)\n            {\n               case LOGIN:\n               case EMAIL:\n                  result &= key.pi.getUsername() == null ? false :\n                        key.pi.getUsername().equals(pi.getUsername());\n                  break;\n               case IP:\n                  result &= key.pi.getRemoteAddress() == null ? false :\n                        key.pi.getRemoteAddress().equals(pi.getRemoteAddress());\n                  break;\n               default:\n                  result = false;\n                  break;\n            }\n         }\n         return result;\n      }\n      return false;\n   }", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "UserKey.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["getUsername", "equals", "getUsername", "getUsername", "getRemoteAddress", "equals", "getRemoteAddress", "getRemoteAddress"]}, "repository": {"repo_id": 90016934, "url": "https://github.com/SentinelDataHub/dhus-core", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 2371, "license": "licensed"}}