{"test_class": {"identifier": "RadicalSiteHrGammaReactionTest", "superclass": "extends ReactionProcessTest", "interfaces": "", "fields": [{"original_string": "private IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "base/reaction/src/test/java/org/openscience/cdk/reaction/type/RadicalSiteHrGammaReactionTest.java"}, "test_case": {"identifier": "testCDKConstants_REACTIVE_CENTER", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCDKConstants_REACTIVE_CENTER() throws Exception {\n        IReactionProcess type = new RadicalSiteHrGammaReaction();\n        IAtomContainerSet setOfReactants = getExampleReactants();\n        IAtomContainer molecule = setOfReactants.getAtomContainer(0);\n\n        /* manually put the reactive center */\n        molecule.getAtom(4).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule.getAtom(0).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule.getAtom(6).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule.getBond(5).setFlag(CDKConstants.REACTIVE_CENTER, true);\n\n        List<IParameterReact> paramList = new ArrayList<IParameterReact>();\n        IParameterReact param = new SetReactionCenter();\n        param.setParameter(Boolean.TRUE);\n        paramList.add(param);\n        type.setParameterList(paramList);\n\n        /* initiate */\n        IReactionSet setOfReactions = type.initiate(setOfReactants, null);\n\n        IAtomContainer reactant = setOfReactions.getReaction(0).getReactants().getAtomContainer(0);\n        Assert.assertTrue(molecule.getAtom(6).getFlag(CDKConstants.REACTIVE_CENTER));\n        Assert.assertTrue(reactant.getAtom(6).getFlag(CDKConstants.REACTIVE_CENTER));\n        Assert.assertTrue(molecule.getAtom(0).getFlag(CDKConstants.REACTIVE_CENTER));\n        Assert.assertTrue(reactant.getAtom(0).getFlag(CDKConstants.REACTIVE_CENTER));\n        Assert.assertTrue(molecule.getAtom(4).getFlag(CDKConstants.REACTIVE_CENTER));\n        Assert.assertTrue(reactant.getAtom(4).getFlag(CDKConstants.REACTIVE_CENTER));\n        Assert.assertTrue(molecule.getBond(5).getFlag(CDKConstants.REACTIVE_CENTER));\n        Assert.assertTrue(reactant.getBond(5).getFlag(CDKConstants.REACTIVE_CENTER));\n    }", "signature": "void testCDKConstants_REACTIVE_CENTER()", "full_signature": "@Test public void testCDKConstants_REACTIVE_CENTER()", "class_method_signature": "RadicalSiteHrGammaReactionTest.testCDKConstants_REACTIVE_CENTER()", "testcase": true, "constructor": false, "invocations": ["getExampleReactants", "getAtomContainer", "setFlag", "getAtom", "setFlag", "getAtom", "setFlag", "getAtom", "setFlag", "getBond", "setParameter", "add", "setParameterList", "initiate", "getAtomContainer", "getReactants", "getReaction", "assertTrue", "getFlag", "getAtom", "assertTrue", "getFlag", "getAtom", "assertTrue", "getFlag", "getAtom", "assertTrue", "getFlag", "getAtom", "assertTrue", "getFlag", "getAtom", "assertTrue", "getFlag", "getAtom", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond"]}, "focal_class": {"identifier": "RadicalSiteHrGammaReaction", "superclass": "extends ReactionEngine", "interfaces": "implements IReactionProcess", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(RadicalSiteHrGammaReaction.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(RadicalSiteHrGammaReaction.class)", "var_name": "logger"}], "methods": [{"identifier": "RadicalSiteHrGammaReaction", "parameters": "()", "modifiers": "public", "return": "", "signature": " RadicalSiteHrGammaReaction()", "full_signature": "public  RadicalSiteHrGammaReaction()", "class_method_signature": "RadicalSiteHrGammaReaction.RadicalSiteHrGammaReaction()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "ReactionSpecification", "signature": "ReactionSpecification getSpecification()", "full_signature": "@Override public ReactionSpecification getSpecification()", "class_method_signature": "RadicalSiteHrGammaReaction.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "RadicalSiteHrGammaReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false}, {"identifier": "setActiveCenters", "parameters": "(IAtomContainer reactant)", "modifiers": "private", "return": "void", "signature": "void setActiveCenters(IAtomContainer reactant)", "full_signature": "private void setActiveCenters(IAtomContainer reactant)", "class_method_signature": "RadicalSiteHrGammaReaction.setActiveCenters(IAtomContainer reactant)", "testcase": false, "constructor": false}], "file": "base/reaction/src/main/java/org/openscience/cdk/reaction/type/RadicalSiteHrGammaReaction.java"}, "focal_method": {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "body": "@Override\n    public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents) throws CDKException {\n\n        logger.debug(\"initiate reaction: RadicalSiteHrGammaReaction\");\n\n        if (reactants.getAtomContainerCount() != 1) {\n            throw new CDKException(\"RadicalSiteHrGammaReaction only expects one reactant\");\n        }\n        if (agents != null) {\n            throw new CDKException(\"RadicalSiteHrGammaReaction don't expects agents\");\n        }\n\n        IReactionSet setOfReactions = reactants.getBuilder().newInstance(IReactionSet.class);\n        IAtomContainer reactant = reactants.getAtomContainer(0);\n\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(reactant);\n        Aromaticity.cdkLegacy().apply(reactant);\n        AllRingsFinder arf = new AllRingsFinder();\n        IRingSet ringSet = arf.findAllRings(reactant);\n        for (int ir = 0; ir < ringSet.getAtomContainerCount(); ir++) {\n            IRing ring = (IRing) ringSet.getAtomContainer(ir);\n            for (int jr = 0; jr < ring.getAtomCount(); jr++) {\n                IAtom aring = ring.getAtom(jr);\n                aring.setFlag(CDKConstants.ISINRING, true);\n            }\n        }\n        /*\n         * if the parameter hasActiveCenter is not fixed yet, set the active\n         * centers\n         */\n        IParameterReact ipr = super.getParameterClass(SetReactionCenter.class);\n        if (ipr != null && !ipr.isSetParameter()) setActiveCenters(reactant);\n\n        HOSECodeGenerator hcg = new HOSECodeGenerator();\n        Iterator<IAtom> atomis = reactant.atoms().iterator();\n        while (atomis.hasNext()) {\n            IAtom atomi = atomis.next();\n            if (atomi.getFlag(CDKConstants.REACTIVE_CENTER) && atomi.getSymbol().equals(\"C\")\n                    && reactant.getConnectedSingleElectronsCount(atomi) == 1) {\n\n                hcg.getSpheres(reactant, atomi, 4, true);\n                Iterator<IAtom> atomls = hcg.getNodesInSphere(4).iterator();\n                while (atomls.hasNext()) {\n                    IAtom atoml = atomls.next();\n                    if (atoml != null && atoml.getFlag(CDKConstants.REACTIVE_CENTER)\n                            && !atoml.getFlag(CDKConstants.ISINRING)\n                            && (atoml.getFormalCharge() == CDKConstants.UNSET ? 0 : atoml.getFormalCharge()) == 0\n                            && !atoml.getSymbol().equals(\"H\") && reactant.getMaximumBondOrder(atoml) == IBond.Order.SINGLE) {\n\n                        Iterator<IAtom> atomhs = reactant.getConnectedAtomsList(atoml).iterator();\n                        while (atomhs.hasNext()) {\n                            IAtom atomh = atomhs.next();\n                            if (reactant.getBond(atomh, atoml).getFlag(CDKConstants.REACTIVE_CENTER)\n                                    && atomh.getFlag(CDKConstants.REACTIVE_CENTER) && atomh.getSymbol().equals(\"H\")) {\n\n                                ArrayList<IAtom> atomList = new ArrayList<IAtom>();\n                                atomList.add(atomh);\n                                atomList.add(atomi);\n                                atomList.add(atoml);\n                                ArrayList<IBond> bondList = new ArrayList<IBond>();\n                                bondList.add(reactant.getBond(atomh, atoml));\n\n                                IAtomContainerSet moleculeSet = reactant.getBuilder().newInstance(\n                                        IAtomContainerSet.class);\n                                moleculeSet.addAtomContainer(reactant);\n                                IReaction reaction = mechanism.initiate(moleculeSet, atomList, bondList);\n                                if (reaction == null)\n                                    continue;\n                                else\n                                    setOfReactions.addReaction(reaction);\n\n                            }\n\n                        }\n\n                    }\n                }\n            }\n        }\n        return setOfReactions;\n    }", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "RadicalSiteHrGammaReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false, "invocations": ["debug", "getAtomContainerCount", "newInstance", "getBuilder", "getAtomContainer", "percieveAtomTypesAndConfigureAtoms", "apply", "cdkLegacy", "findAllRings", "getAtomContainerCount", "getAtomContainer", "getAtomCount", "getAtom", "setFlag", "getParameterClass", "isSetParameter", "setActiveCenters", "iterator", "atoms", "hasNext", "next", "getFlag", "equals", "getSymbol", "getConnectedSingleElectronsCount", "getSpheres", "iterator", "getNodesInSphere", "hasNext", "next", "getFlag", "getFlag", "getFormalCharge", "getFormalCharge", "equals", "getSymbol", "getMaximumBondOrder", "iterator", "getConnectedAtomsList", "hasNext", "next", "getFlag", "getBond", "getFlag", "equals", "getSymbol", "add", "add", "add", "add", "getBond", "newInstance", "getBuilder", "addAtomContainer", "initiate", "addReaction"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}