{"test_class": {"identifier": "ConnectorServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConnectorService connectorService;", "modifier": "private", "type": "ConnectorService", "declarator": "connectorService", "var_name": "connectorService"}, {"original_string": "private JdbcConnector connectorA;", "modifier": "private", "type": "JdbcConnector", "declarator": "connectorA", "var_name": "connectorA"}, {"original_string": "private JdbcConnector connectorB;", "modifier": "private", "type": "JdbcConnector", "declarator": "connectorB", "var_name": "connectorB"}], "file": "link-move/src/test/java/com/nhl/link/move/runtime/connect/ConnectorServiceTest.java"}, "test_case": {"identifier": "testGetConnector", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetConnector() {\n\t\tassertSame(connectorA, connectorService.getConnector(JdbcConnector.class, \"a\"));\n\t\tassertSame(connectorB, connectorService.getConnector(JdbcConnector.class, \"b\"));\n\t\tassertSame(connectorA, connectorService.getConnector(JdbcConnector.class, \"a\"));\n\t\tassertSame(connectorB, connectorService.getConnector(JdbcConnector.class, \"b\"));\n\t}", "signature": "void testGetConnector()", "full_signature": "@Test public void testGetConnector()", "class_method_signature": "ConnectorServiceTest.testGetConnector()", "testcase": true, "constructor": false, "invocations": ["assertSame", "getConnector", "assertSame", "getConnector", "assertSame", "getConnector", "assertSame", "getConnector"]}, "focal_class": {"identifier": "ConnectorService", "superclass": "", "interfaces": "implements IConnectorService", "fields": [{"original_string": "private final ConcurrentMap<String, Connector> connectors;", "modifier": "private final", "type": "ConcurrentMap<String, Connector>", "declarator": "connectors", "var_name": "connectors"}, {"original_string": "private final Map<String, IConnectorFactory> factories;", "modifier": "private final", "type": "Map<String, IConnectorFactory>", "declarator": "factories", "var_name": "factories"}], "methods": [{"identifier": "ConnectorService", "parameters": "(\n            @Inject Map<String, IConnectorFactory> factories,\n            @Inject Map<String, Connector> connectors)", "modifiers": "public", "return": "", "signature": " ConnectorService(\n            @Inject Map<String, IConnectorFactory> factories,\n            @Inject Map<String, Connector> connectors)", "full_signature": "public  ConnectorService(\n            @Inject Map<String, IConnectorFactory> factories,\n            @Inject Map<String, Connector> connectors)", "class_method_signature": "ConnectorService.ConnectorService(\n            @Inject Map<String, IConnectorFactory> factories,\n            @Inject Map<String, Connector> connectors)", "testcase": false, "constructor": true}, {"identifier": "getConnector", "parameters": "(Class<T> type, String id)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "signature": "T getConnector(Class<T> type, String id)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T getConnector(Class<T> type, String id)", "class_method_signature": "ConnectorService.getConnector(Class<T> type, String id)", "testcase": false, "constructor": false}], "file": "link-move/src/main/java/com/nhl/link/move/runtime/connect/ConnectorService.java"}, "focal_method": {"identifier": "getConnector", "parameters": "(Class<T> type, String id)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public <T extends Connector> T getConnector(Class<T> type, String id) {\n\n        if (id == null) {\n            throw new LmRuntimeException(\"Null connector id\");\n        }\n\n        Connector connector = connectors.computeIfAbsent(id, i -> {\n            IConnectorFactory<?> factory = factories.get(type.getName());\n            if (factory == null) {\n                throw new IllegalStateException(\"No factory mapped for Connector type of '\" + type.getName() + \"'\");\n            }\n\n            return factory.createConnector(id);\n        });\n\n        if (!type.isAssignableFrom(connector.getClass())) {\n            throw new LmRuntimeException(\"Connector for id '\" + id + \"' is not a \" + type.getName()\n                    + \". The actual type is \" + connector.getClass().getName());\n        }\n\n        return (T) connector;\n    }", "signature": "T getConnector(Class<T> type, String id)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T getConnector(Class<T> type, String id)", "class_method_signature": "ConnectorService.getConnector(Class<T> type, String id)", "testcase": false, "constructor": false, "invocations": ["computeIfAbsent", "get", "getName", "getName", "createConnector", "isAssignableFrom", "getClass", "getName", "getName", "getClass"]}, "repository": {"repo_id": 22876447, "url": "https://github.com/nhl/link-move", "stars": 25, "created": "8/12/2014 12:27:10 PM +00:00", "updates": "2019-12-01T17:30:35+00:00", "fork": "False", "license": "licensed"}}