{"test_class": {"identifier": "JcrNsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final String prefix = \"foo\";", "modifier": "final", "type": "String", "declarator": "prefix = \"foo\"", "var_name": "prefix"}, {"original_string": "final String uri = \"http://foo.com\";", "modifier": "final", "type": "String", "declarator": "uri = \"http://foo.com\"", "var_name": "uri"}, {"original_string": "private static final JcrNs.JsonKeys KEYS = JcrNs.keys();", "modifier": "private static final", "type": "JcrNs.JsonKeys", "declarator": "KEYS = JcrNs.keys()", "var_name": "KEYS"}], "file": "core/src/test/java/net/adamcin/oakpal/core/JcrNsTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        final JcrNs base = JcrNs.create(prefix, uri);\n        assertEquals(\"should be the same for same\", base, base);\n        final JcrNs same = JcrNs.create(prefix, uri);\n        assertEquals(\"should be the same for same params\", base, same);\n        final JcrNs diffUri = JcrNs.create(prefix, \"http://foo1.com\");\n        assertNotEquals(\"should be diff for diff uri\", base, diffUri);\n        final JcrNs diffPrefix = JcrNs.create(\"foo1\", uri);\n        assertNotEquals(\"should be diff for diff prefix\", base, diffPrefix);\n        final JcrNs diffBoth = JcrNs.create(\"foo1\", \"http://foo1.com\");\n        assertNotEquals(\"should be diff for diff both\", base, diffBoth);\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "JcrNsTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["create", "assertEquals", "create", "assertEquals", "create", "assertNotEquals", "create", "assertNotEquals", "create", "assertNotEquals"]}, "focal_class": {"identifier": "JcrNs", "superclass": "", "interfaces": "implements JsonObjectConvertible, Comparable<JcrNs>", "fields": [{"original_string": "private static final JsonKeys KEYS = new JsonKeys() {\n        @Override\n        public String prefix() {\n            return \"prefix\";\n        }\n\n        @Override\n        public String uri() {\n            return \"uri\";\n        }\n    };", "modifier": "private static final", "type": "JsonKeys", "declarator": "KEYS = new JsonKeys() {\n        @Override\n        public String prefix() {\n            return \"prefix\";\n        }\n\n        @Override\n        public String uri() {\n            return \"uri\";\n        }\n    }", "var_name": "KEYS"}, {"original_string": "private String prefix;", "modifier": "private", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "private String uri;", "modifier": "private", "type": "String", "declarator": "uri", "var_name": "uri"}], "methods": [{"identifier": "keys", "parameters": "()", "modifiers": "@NotNull public static", "return": "JcrNs.JsonKeys", "signature": "JcrNs.JsonKeys keys()", "full_signature": "@NotNull public static JcrNs.JsonKeys keys()", "class_method_signature": "JcrNs.keys()", "testcase": false, "constructor": false}, {"identifier": "getPrefix", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPrefix()", "full_signature": "public String getPrefix()", "class_method_signature": "JcrNs.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "setPrefix", "parameters": "(String prefix)", "modifiers": "public", "return": "void", "signature": "void setPrefix(String prefix)", "full_signature": "public void setPrefix(String prefix)", "class_method_signature": "JcrNs.setPrefix(String prefix)", "testcase": false, "constructor": false}, {"identifier": "getUri", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUri()", "full_signature": "public String getUri()", "class_method_signature": "JcrNs.getUri()", "testcase": false, "constructor": false}, {"identifier": "setUri", "parameters": "(String uri)", "modifiers": "public", "return": "void", "signature": "void setUri(String uri)", "full_signature": "public void setUri(String uri)", "class_method_signature": "JcrNs.setUri(String uri)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final @NotNull JsonObject json)", "modifiers": "public static @Nullable", "return": "JcrNs", "signature": "JcrNs fromJson(final @NotNull JsonObject json)", "full_signature": "public static @Nullable JcrNs fromJson(final @NotNull JsonObject json)", "class_method_signature": "JcrNs.fromJson(final @NotNull JsonObject json)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final @NotNull String prefix, final @NotNull String uri)", "modifiers": "public static @NotNull", "return": "JcrNs", "signature": "JcrNs create(final @NotNull String prefix, final @NotNull String uri)", "full_signature": "public static @NotNull JcrNs create(final @NotNull String prefix, final @NotNull String uri)", "class_method_signature": "JcrNs.create(final @NotNull String prefix, final @NotNull String uri)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "JcrNs.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "JcrNs.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "()", "modifiers": "@Override public", "return": "JsonObject", "signature": "JsonObject toJson()", "full_signature": "@Override public JsonObject toJson()", "class_method_signature": "JcrNs.toJson()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "JcrNs.toString()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(final @NotNull JcrNs o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(final @NotNull JcrNs o)", "full_signature": "@Override public int compareTo(final @NotNull JcrNs o)", "class_method_signature": "JcrNs.compareTo(final @NotNull JcrNs o)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/JcrNs.java"}, "focal_method": {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(final Object o) {\n        if (this == o) return true;\n        if (!(o instanceof JcrNs)) return false;\n        JcrNs jcrNs = (JcrNs) o;\n        return Objects.equals(getPrefix(), jcrNs.getPrefix()) &&\n                Objects.equals(getUri(), jcrNs.getUri());\n    }", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "JcrNs.equals(final Object o)", "testcase": false, "constructor": false, "invocations": ["equals", "getPrefix", "getPrefix", "equals", "getUri", "getUri"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}