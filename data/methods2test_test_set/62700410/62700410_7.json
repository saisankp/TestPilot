{"test_class": {"identifier": "TestNativeImageLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final long seed = 10;", "modifier": "static final", "type": "long", "declarator": "seed = 10", "var_name": "seed"}, {"original_string": "static final Random rng = new Random(seed);", "modifier": "static final", "type": "Random", "declarator": "rng = new Random(seed)", "var_name": "rng"}], "file": "datavec-data/datavec-data-image/src/test/java/org/datavec/image/loader/TestNativeImageLoader.java"}, "test_case": {"identifier": "testAsMatrix", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAsMatrix() throws Exception {\n        BufferedImage img1 = makeRandomBufferedImage(0, 0, 3);\n        Mat img2 = makeRandomImage(0, 0, 4);\n\n        int w1 = 33, h1 = 77, ch1 = 1;\n        NativeImageLoader loader1 = new NativeImageLoader(h1, w1, ch1);\n\n        INDArray array1 = loader1.asMatrix(img1);\n        assertEquals(4, array1.rank());\n        assertEquals(1, array1.size(0));\n        assertEquals(1, array1.size(1));\n        assertEquals(h1, array1.size(2));\n        assertEquals(w1, array1.size(3));\n\n        INDArray array2 = loader1.asMatrix(img2);\n        assertEquals(4, array2.rank());\n        assertEquals(1, array2.size(0));\n        assertEquals(1, array2.size(1));\n        assertEquals(h1, array2.size(2));\n        assertEquals(w1, array2.size(3));\n\n        int w2 = 111, h2 = 66, ch2 = 3;\n        NativeImageLoader loader2 = new NativeImageLoader(h2, w2, ch2);\n\n        INDArray array3 = loader2.asMatrix(img1);\n        assertEquals(4, array3.rank());\n        assertEquals(1, array3.size(0));\n        assertEquals(3, array3.size(1));\n        assertEquals(h2, array3.size(2));\n        assertEquals(w2, array3.size(3));\n\n        INDArray array4 = loader2.asMatrix(img2);\n        assertEquals(4, array4.rank());\n        assertEquals(1, array4.size(0));\n        assertEquals(3, array4.size(1));\n        assertEquals(h2, array4.size(2));\n        assertEquals(w2, array4.size(3));\n\n        int w3 = 123, h3 = 77, ch3 = 3;\n        NativeImageLoader loader3 = new NativeImageLoader(h3, w3, ch3);\n        File f3 = new ClassPathResource(\"/testimages/class0/2.jpg\").getFile();\n        ImageWritable iw3 = loader3.asWritable(f3);\n\n        INDArray array5 = loader3.asMatrix(iw3);\n        assertEquals(4, array5.rank());\n        assertEquals(1, array5.size(0));\n        assertEquals(3, array5.size(1));\n        assertEquals(h3, array5.size(2));\n        assertEquals(w3, array5.size(3));\n\n        Mat mat = loader3.asMat(array5);\n        assertEquals(w3, mat.cols());\n        assertEquals(h3, mat.rows());\n        assertEquals(ch3, mat.channels());\n        assertTrue(mat.type() == CV_32FC(ch3) || mat.type() == CV_64FC(ch3));\n\n        Frame frame = loader3.asFrame(array5, Frame.DEPTH_UBYTE);\n        assertEquals(w3, frame.imageWidth);\n        assertEquals(h3, frame.imageHeight);\n        assertEquals(ch3, frame.imageChannels);\n        assertEquals(Frame.DEPTH_UBYTE, frame.imageDepth);\n\n        Java2DNativeImageLoader loader4 = new Java2DNativeImageLoader();\n        BufferedImage img12 = loader4.asBufferedImage(array1);\n        assertEquals(array1, loader4.asMatrix(img12));\n    }", "signature": "void testAsMatrix()", "full_signature": "@Test public void testAsMatrix()", "class_method_signature": "TestNativeImageLoader.testAsMatrix()", "testcase": true, "constructor": false, "invocations": ["makeRandomBufferedImage", "makeRandomImage", "asMatrix", "assertEquals", "rank", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size", "asMatrix", "assertEquals", "rank", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size", "asMatrix", "assertEquals", "rank", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size", "asMatrix", "assertEquals", "rank", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size", "getFile", "asWritable", "asMatrix", "assertEquals", "rank", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size", "asMat", "assertEquals", "cols", "assertEquals", "rows", "assertEquals", "channels", "assertTrue", "type", "CV_32FC", "type", "CV_64FC", "asFrame", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "asBufferedImage", "assertEquals", "asMatrix"]}, "focal_class": {"identifier": "NativeImageLoader", "superclass": "extends BaseImageLoader", "interfaces": "", "fields": [{"original_string": "private static final int MIN_BUFFER_STEP_SIZE = 1024*1024;", "modifier": "private static final", "type": "int", "declarator": "MIN_BUFFER_STEP_SIZE = 1024*1024", "var_name": "MIN_BUFFER_STEP_SIZE"}, {"original_string": "private byte[] buffer = null;", "modifier": "private", "type": "byte[]", "declarator": "buffer = null", "var_name": "buffer"}, {"original_string": "private Mat bufferMat = null;", "modifier": "private", "type": "Mat", "declarator": "bufferMat = null", "var_name": "bufferMat"}, {"original_string": "public static final String[] ALLOWED_FORMATS = {\"bmp\", \"gif\", \"jpg\", \"jpeg\", \"jp2\", \"pbm\", \"pgm\", \"ppm\", \"pnm\",\n                    \"png\", \"tif\", \"tiff\", \"exr\", \"webp\", \"BMP\", \"GIF\", \"JPG\", \"JPEG\", \"JP2\", \"PBM\", \"PGM\", \"PPM\", \"PNM\",\n                    \"PNG\", \"TIF\", \"TIFF\", \"EXR\", \"WEBP\"};", "modifier": "public static final", "type": "String[]", "declarator": "ALLOWED_FORMATS = {\"bmp\", \"gif\", \"jpg\", \"jpeg\", \"jp2\", \"pbm\", \"pgm\", \"ppm\", \"pnm\",\n                    \"png\", \"tif\", \"tiff\", \"exr\", \"webp\", \"BMP\", \"GIF\", \"JPG\", \"JPEG\", \"JP2\", \"PBM\", \"PGM\", \"PPM\", \"PNM\",\n                    \"PNG\", \"TIF\", \"TIFF\", \"EXR\", \"WEBP\"}", "var_name": "ALLOWED_FORMATS"}, {"original_string": "protected OpenCVFrameConverter.ToMat converter = new OpenCVFrameConverter.ToMat();", "modifier": "protected", "type": "OpenCVFrameConverter.ToMat", "declarator": "converter = new OpenCVFrameConverter.ToMat()", "var_name": "converter"}], "methods": [{"identifier": "NativeImageLoader", "parameters": "()", "modifiers": "public", "return": "", "signature": " NativeImageLoader()", "full_signature": "public  NativeImageLoader()", "class_method_signature": "NativeImageLoader.NativeImageLoader()", "testcase": false, "constructor": true}, {"identifier": "NativeImageLoader", "parameters": "(int height, int width)", "modifiers": "public", "return": "", "signature": " NativeImageLoader(int height, int width)", "full_signature": "public  NativeImageLoader(int height, int width)", "class_method_signature": "NativeImageLoader.NativeImageLoader(int height, int width)", "testcase": false, "constructor": true}, {"identifier": "NativeImageLoader", "parameters": "(int height, int width, int channels)", "modifiers": "public", "return": "", "signature": " NativeImageLoader(int height, int width, int channels)", "full_signature": "public  NativeImageLoader(int height, int width, int channels)", "class_method_signature": "NativeImageLoader.NativeImageLoader(int height, int width, int channels)", "testcase": false, "constructor": true}, {"identifier": "NativeImageLoader", "parameters": "(int height, int width, int channels, boolean centerCropIfNeeded)", "modifiers": "public", "return": "", "signature": " NativeImageLoader(int height, int width, int channels, boolean centerCropIfNeeded)", "full_signature": "public  NativeImageLoader(int height, int width, int channels, boolean centerCropIfNeeded)", "class_method_signature": "NativeImageLoader.NativeImageLoader(int height, int width, int channels, boolean centerCropIfNeeded)", "testcase": false, "constructor": true}, {"identifier": "NativeImageLoader", "parameters": "(int height, int width, int channels, ImageTransform imageTransform)", "modifiers": "public", "return": "", "signature": " NativeImageLoader(int height, int width, int channels, ImageTransform imageTransform)", "full_signature": "public  NativeImageLoader(int height, int width, int channels, ImageTransform imageTransform)", "class_method_signature": "NativeImageLoader.NativeImageLoader(int height, int width, int channels, ImageTransform imageTransform)", "testcase": false, "constructor": true}, {"identifier": "NativeImageLoader", "parameters": "(int height, int width, int channels, MultiPageMode mode)", "modifiers": "public", "return": "", "signature": " NativeImageLoader(int height, int width, int channels, MultiPageMode mode)", "full_signature": "public  NativeImageLoader(int height, int width, int channels, MultiPageMode mode)", "class_method_signature": "NativeImageLoader.NativeImageLoader(int height, int width, int channels, MultiPageMode mode)", "testcase": false, "constructor": true}, {"identifier": "NativeImageLoader", "parameters": "(NativeImageLoader other)", "modifiers": "protected", "return": "", "signature": " NativeImageLoader(NativeImageLoader other)", "full_signature": "protected  NativeImageLoader(NativeImageLoader other)", "class_method_signature": "NativeImageLoader.NativeImageLoader(NativeImageLoader other)", "testcase": false, "constructor": true}, {"identifier": "getAllowedFormats", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getAllowedFormats()", "full_signature": "@Override public String[] getAllowedFormats()", "class_method_signature": "NativeImageLoader.getAllowedFormats()", "testcase": false, "constructor": false}, {"identifier": "asRowVector", "parameters": "(File f)", "modifiers": "@Override public", "return": "INDArray", "signature": "INDArray asRowVector(File f)", "full_signature": "@Override public INDArray asRowVector(File f)", "class_method_signature": "NativeImageLoader.asRowVector(File f)", "testcase": false, "constructor": false}, {"identifier": "asRowVector", "parameters": "(InputStream is)", "modifiers": "@Override public", "return": "INDArray", "signature": "INDArray asRowVector(InputStream is)", "full_signature": "@Override public INDArray asRowVector(InputStream is)", "class_method_signature": "NativeImageLoader.asRowVector(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "asRowVector", "parameters": "(Object image)", "modifiers": "public", "return": "INDArray", "signature": "INDArray asRowVector(Object image)", "full_signature": "public INDArray asRowVector(Object image)", "class_method_signature": "NativeImageLoader.asRowVector(Object image)", "testcase": false, "constructor": false}, {"identifier": "asRowVector", "parameters": "(Frame image)", "modifiers": "public", "return": "INDArray", "signature": "INDArray asRowVector(Frame image)", "full_signature": "public INDArray asRowVector(Frame image)", "class_method_signature": "NativeImageLoader.asRowVector(Frame image)", "testcase": false, "constructor": false}, {"identifier": "asRowVector", "parameters": "(Mat image)", "modifiers": "public", "return": "INDArray", "signature": "INDArray asRowVector(Mat image)", "full_signature": "public INDArray asRowVector(Mat image)", "class_method_signature": "NativeImageLoader.asRowVector(Mat image)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(PIX pix)", "modifiers": "static", "return": "Mat", "signature": "Mat convert(PIX pix)", "full_signature": "static Mat convert(PIX pix)", "class_method_signature": "NativeImageLoader.convert(PIX pix)", "testcase": false, "constructor": false}, {"identifier": "asMatrix", "parameters": "(File f)", "modifiers": "@Override public", "return": "INDArray", "signature": "INDArray asMatrix(File f)", "full_signature": "@Override public INDArray asMatrix(File f)", "class_method_signature": "NativeImageLoader.asMatrix(File f)", "testcase": false, "constructor": false}, {"identifier": "asMatrix", "parameters": "(InputStream is)", "modifiers": "@Override public", "return": "INDArray", "signature": "INDArray asMatrix(InputStream is)", "full_signature": "@Override public INDArray asMatrix(InputStream is)", "class_method_signature": "NativeImageLoader.asMatrix(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "streamToMat", "parameters": "(InputStream is)", "modifiers": "private", "return": "Mat", "signature": "Mat streamToMat(InputStream is)", "full_signature": "private Mat streamToMat(InputStream is)", "class_method_signature": "NativeImageLoader.streamToMat(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "asImageMatrix", "parameters": "(File f)", "modifiers": "@Override public", "return": "Image", "signature": "Image asImageMatrix(File f)", "full_signature": "@Override public Image asImageMatrix(File f)", "class_method_signature": "NativeImageLoader.asImageMatrix(File f)", "testcase": false, "constructor": false}, {"identifier": "asImageMatrix", "parameters": "(InputStream is)", "modifiers": "@Override public", "return": "Image", "signature": "Image asImageMatrix(InputStream is)", "full_signature": "@Override public Image asImageMatrix(InputStream is)", "class_method_signature": "NativeImageLoader.asImageMatrix(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "asMatrix", "parameters": "(Object image)", "modifiers": "public", "return": "INDArray", "signature": "INDArray asMatrix(Object image)", "full_signature": "public INDArray asMatrix(Object image)", "class_method_signature": "NativeImageLoader.asMatrix(Object image)", "testcase": false, "constructor": false}, {"identifier": "fillNDArray", "parameters": "(Mat image, INDArray ret)", "modifiers": "protected", "return": "void", "signature": "void fillNDArray(Mat image, INDArray ret)", "full_signature": "protected void fillNDArray(Mat image, INDArray ret)", "class_method_signature": "NativeImageLoader.fillNDArray(Mat image, INDArray ret)", "testcase": false, "constructor": false}, {"identifier": "asMatrixView", "parameters": "(InputStream is, INDArray view)", "modifiers": "public", "return": "void", "signature": "void asMatrixView(InputStream is, INDArray view)", "full_signature": "public void asMatrixView(InputStream is, INDArray view)", "class_method_signature": "NativeImageLoader.asMatrixView(InputStream is, INDArray view)", "testcase": false, "constructor": false}, {"identifier": "asMatrixView", "parameters": "(File f, INDArray view)", "modifiers": "public", "return": "void", "signature": "void asMatrixView(File f, INDArray view)", "full_signature": "public void asMatrixView(File f, INDArray view)", "class_method_signature": "NativeImageLoader.asMatrixView(File f, INDArray view)", "testcase": false, "constructor": false}, {"identifier": "asMatrixView", "parameters": "(Mat image, INDArray view)", "modifiers": "public", "return": "void", "signature": "void asMatrixView(Mat image, INDArray view)", "full_signature": "public void asMatrixView(Mat image, INDArray view)", "class_method_signature": "NativeImageLoader.asMatrixView(Mat image, INDArray view)", "testcase": false, "constructor": false}, {"identifier": "asMatrix", "parameters": "(Frame image)", "modifiers": "public", "return": "INDArray", "signature": "INDArray asMatrix(Frame image)", "full_signature": "public INDArray asMatrix(Frame image)", "class_method_signature": "NativeImageLoader.asMatrix(Frame image)", "testcase": false, "constructor": false}, {"identifier": "asMatrix", "parameters": "(Mat image)", "modifiers": "public", "return": "INDArray", "signature": "INDArray asMatrix(Mat image)", "full_signature": "public INDArray asMatrix(Mat image)", "class_method_signature": "NativeImageLoader.asMatrix(Mat image)", "testcase": false, "constructor": false}, {"identifier": "transformImage", "parameters": "(Mat image, INDArray ret)", "modifiers": "protected", "return": "INDArray", "signature": "INDArray transformImage(Mat image, INDArray ret)", "full_signature": "protected INDArray transformImage(Mat image, INDArray ret)", "class_method_signature": "NativeImageLoader.transformImage(Mat image, INDArray ret)", "testcase": false, "constructor": false}, {"identifier": "centerCropIfNeeded", "parameters": "(Mat img)", "modifiers": "protected", "return": "Mat", "signature": "Mat centerCropIfNeeded(Mat img)", "full_signature": "protected Mat centerCropIfNeeded(Mat img)", "class_method_signature": "NativeImageLoader.centerCropIfNeeded(Mat img)", "testcase": false, "constructor": false}, {"identifier": "scalingIfNeed", "parameters": "(Mat image)", "modifiers": "protected", "return": "Mat", "signature": "Mat scalingIfNeed(Mat image)", "full_signature": "protected Mat scalingIfNeed(Mat image)", "class_method_signature": "NativeImageLoader.scalingIfNeed(Mat image)", "testcase": false, "constructor": false}, {"identifier": "scalingIfNeed", "parameters": "(Mat image, int dstHeight, int dstWidth)", "modifiers": "protected", "return": "Mat", "signature": "Mat scalingIfNeed(Mat image, int dstHeight, int dstWidth)", "full_signature": "protected Mat scalingIfNeed(Mat image, int dstHeight, int dstWidth)", "class_method_signature": "NativeImageLoader.scalingIfNeed(Mat image, int dstHeight, int dstWidth)", "testcase": false, "constructor": false}, {"identifier": "asWritable", "parameters": "(File f)", "modifiers": "public", "return": "ImageWritable", "signature": "ImageWritable asWritable(File f)", "full_signature": "public ImageWritable asWritable(File f)", "class_method_signature": "NativeImageLoader.asWritable(File f)", "testcase": false, "constructor": false}, {"identifier": "asMatrix", "parameters": "(ImageWritable writable)", "modifiers": "public", "return": "INDArray", "signature": "INDArray asMatrix(ImageWritable writable)", "full_signature": "public INDArray asMatrix(ImageWritable writable)", "class_method_signature": "NativeImageLoader.asMatrix(ImageWritable writable)", "testcase": false, "constructor": false}, {"identifier": "asFrame", "parameters": "(INDArray array)", "modifiers": "public", "return": "Frame", "signature": "Frame asFrame(INDArray array)", "full_signature": "public Frame asFrame(INDArray array)", "class_method_signature": "NativeImageLoader.asFrame(INDArray array)", "testcase": false, "constructor": false}, {"identifier": "asFrame", "parameters": "(INDArray array, int dataType)", "modifiers": "public", "return": "Frame", "signature": "Frame asFrame(INDArray array, int dataType)", "full_signature": "public Frame asFrame(INDArray array, int dataType)", "class_method_signature": "NativeImageLoader.asFrame(INDArray array, int dataType)", "testcase": false, "constructor": false}, {"identifier": "asMat", "parameters": "(INDArray array)", "modifiers": "public", "return": "Mat", "signature": "Mat asMat(INDArray array)", "full_signature": "public Mat asMat(INDArray array)", "class_method_signature": "NativeImageLoader.asMat(INDArray array)", "testcase": false, "constructor": false}, {"identifier": "asMat", "parameters": "(INDArray array, int dataType)", "modifiers": "public", "return": "Mat", "signature": "Mat asMat(INDArray array, int dataType)", "full_signature": "public Mat asMat(INDArray array, int dataType)", "class_method_signature": "NativeImageLoader.asMat(INDArray array, int dataType)", "testcase": false, "constructor": false}, {"identifier": "asMatrix", "parameters": "(BytePointer bytes, int length)", "modifiers": "private", "return": "INDArray", "signature": "INDArray asMatrix(BytePointer bytes, int length)", "full_signature": "private INDArray asMatrix(BytePointer bytes, int length)", "class_method_signature": "NativeImageLoader.asMatrix(BytePointer bytes, int length)", "testcase": false, "constructor": false}], "file": "datavec-data/datavec-data-image/src/main/java/org/datavec/image/loader/NativeImageLoader.java"}, "focal_method": {"identifier": "asMatrix", "parameters": "(File f)", "modifiers": "@Override public", "return": "INDArray", "body": "@Override\n    public INDArray asMatrix(File f) throws IOException {\n        try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(f))) {\n            return asMatrix(bis);\n        }\n    }", "signature": "INDArray asMatrix(File f)", "full_signature": "@Override public INDArray asMatrix(File f)", "class_method_signature": "NativeImageLoader.asMatrix(File f)", "testcase": false, "constructor": false, "invocations": ["asMatrix"]}, "repository": {"repo_id": 62700410, "url": "https://github.com/deeplearning4j/DataVec", "language": "Java", "is_fork": false, "fork_count": 174, "stargazer_count": 260, "size": 39842, "license": "licensed"}}