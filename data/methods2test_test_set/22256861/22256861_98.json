{"test_class": {"identifier": "DataObjectMergerTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-slstr-pdu-stitching/src/test/java/org/esa/s3tbx/slstr/pdu/stitching/manifest/DataObjectMergerTest.java"}, "test_case": {"identifier": "testMergeNodes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMergeNodes() throws Exception {\n        List<Node> fromParents = new ArrayList<>();\n        fromParents.add(ManifestTestUtils.createNode(\n                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                        \"      <dataObject ID=\\\"ADFData\\\">\\n\" +\n                        \"          <byteStream mimeType=\\\"application/x-netcdf\\\" size=\\\"36985\\\">\\n\" +\n                        \"              <fileLocation locatorType=\\\"URL\\\" href=\\\"viscal.nc\\\"/>\\n\" +\n                        \"              <checksum checksumName=\\\"MD5\\\">9c0ed7a6a15d3bfebbeb1609a8d41fa0</checksum>\\n\" +\n                        \"          </byteStream>\\n\" +\n                        \"      </dataObject>\").getFirstChild());\n        fromParents.add(ManifestTestUtils.createNode(\n                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                        \"        <dataObject ID=\\\"ADFData\\\">\\n\" +\n                        \"            <byteStream mimeType=\\\"application/x-netcdf\\\" size=\\\"36985\\\">\\n\" +\n                        \"                <fileLocation locatorType=\\\"URL\\\" href=\\\"viscal.nc\\\"/>\\n\" +\n                        \"                <checksum checksumName=\\\"MD5\\\">bd2e513c1fc816c899fe5b3130846bdd</checksum>\\n\" +\n                        \"            </byteStream>\\n\" +\n                        \"        </dataObject>\").getFirstChild());\n        fromParents.add(ManifestTestUtils.createNode(\n                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                        \"    <dataObject ID=\\\"ADFData\\\">\\n\" +\n                        \"      <byteStream mimeType=\\\"application/x-netcdf\\\" size=\\\"36985\\\">\\n\" +\n                        \"        <fileLocation locatorType=\\\"URL\\\" href=\\\"viscal.nc\\\"/>\\n\" +\n                        \"        <checksum checksumName=\\\"MD5\\\">b12d0db5bbfdc22ea728219511894868</checksum>\\n\" +\n                        \"      </byteStream>\\n\" +\n                        \"    </dataObject>\").getFirstChild());\n\n        Document manifest = ManifestTestUtils.createDocument();\n        final Element manifestElement = manifest.createElement(\"dataObject\");\n        manifestElement.setAttribute(\"ID\", \"test\");\n        manifest.appendChild(manifestElement);\n\n        final DataObjectMerger dataObjectMerger = new DataObjectMerger(DataObjectMergerTest.class.getResource(\"\").getFile());\n        dataObjectMerger.mergeNodes(fromParents, manifestElement, manifest);\n\n        final NodeList manifestChilds = manifestElement.getChildNodes();\n        assertEquals(1, manifestChilds.getLength());\n        final Node byteStreamElement = manifestChilds.item(0);\n        assertEquals(\"byteStream\", byteStreamElement.getNodeName());\n        final NamedNodeMap byteStreamElementAttributes = byteStreamElement.getAttributes();\n        assertEquals(2, byteStreamElementAttributes.getLength());\n        final Node mimeTypeAttribute = byteStreamElementAttributes.getNamedItem(\"mimeType\");\n        assertNotNull(mimeTypeAttribute);\n        assertEquals(\"application/x-netcdf\", mimeTypeAttribute.getNodeValue());\n        final Node sizeAttribute = byteStreamElementAttributes.getNamedItem(\"size\");\n        assertNotNull(sizeAttribute);\n        assertEquals(\"30\", sizeAttribute.getNodeValue());\n\n        final NodeList byteStreamChildren = byteStreamElement.getChildNodes();\n        assertEquals(2, byteStreamChildren.getLength());\n\n        final Node fileLocationElement = byteStreamChildren.item(0);\n        assertEquals(\"fileLocation\", fileLocationElement.getNodeName());\n        final NamedNodeMap fileLocationElementAttributes = fileLocationElement.getAttributes();\n        assertEquals(2, fileLocationElementAttributes.getLength());\n        final Node locatorTypeAttribute = fileLocationElementAttributes.getNamedItem(\"locatorType\");\n        assertNotNull(locatorTypeAttribute);\n        assertEquals(\"URL\", locatorTypeAttribute.getNodeValue());\n        final Node hrefAttribute = fileLocationElementAttributes.getNamedItem(\"href\");\n        assertNotNull(hrefAttribute);\n        assertEquals(\"viscal.nc\", hrefAttribute.getNodeValue());\n\n        final Node checksumElement = byteStreamChildren.item(1);\n        assertEquals(\"checksum\", checksumElement.getNodeName());\n        final NamedNodeMap checksumElementAttributes = checksumElement.getAttributes();\n        assertEquals(1, checksumElementAttributes.getLength());\n        final Node checksumNameAttribute = checksumElementAttributes.getNamedItem(\"checksumName\");\n        assertNotNull(checksumNameAttribute);\n        assertEquals(\"MD5\", checksumNameAttribute.getNodeValue());\n        assertEquals(\"97b5dcca12501c1f051186b9d8755373\", checksumElement.getTextContent());\n    }", "signature": "void testMergeNodes()", "full_signature": "@Test public void testMergeNodes()", "class_method_signature": "DataObjectMergerTest.testMergeNodes()", "testcase": true, "constructor": false, "invocations": ["add", "getFirstChild", "createNode", "add", "getFirstChild", "createNode", "add", "getFirstChild", "createNode", "createDocument", "createElement", "setAttribute", "appendChild", "getFile", "getResource", "mergeNodes", "getChildNodes", "assertEquals", "getLength", "item", "assertEquals", "getNodeName", "getAttributes", "assertEquals", "getLength", "getNamedItem", "assertNotNull", "assertEquals", "getNodeValue", "getNamedItem", "assertNotNull", "assertEquals", "getNodeValue", "getChildNodes", "assertEquals", "getLength", "item", "assertEquals", "getNodeName", "getAttributes", "assertEquals", "getLength", "getNamedItem", "assertNotNull", "assertEquals", "getNodeValue", "getNamedItem", "assertNotNull", "assertEquals", "getNodeValue", "item", "assertEquals", "getNodeName", "getAttributes", "assertEquals", "getLength", "getNamedItem", "assertNotNull", "assertEquals", "getNodeValue", "assertEquals", "getTextContent"]}, "focal_class": {"identifier": "DataObjectMerger", "superclass": "extends AbstractElementMerger", "interfaces": "", "fields": [{"original_string": "private final String fileLocation;", "modifier": "private final", "type": "String", "declarator": "fileLocation", "var_name": "fileLocation"}], "methods": [{"identifier": "DataObjectMerger", "parameters": "(String fileLocation)", "modifiers": "", "return": "", "signature": " DataObjectMerger(String fileLocation)", "full_signature": "  DataObjectMerger(String fileLocation)", "class_method_signature": "DataObjectMerger.DataObjectMerger(String fileLocation)", "testcase": false, "constructor": true}, {"identifier": "mergeNodes", "parameters": "(List<Node> fromParents, Element toParent, Document toDocument)", "modifiers": "@Override public", "return": "void", "signature": "void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "full_signature": "@Override public void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "class_method_signature": "DataObjectMerger.mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(String fileName, Element toParent)", "modifiers": "private", "return": "File", "signature": "File getFile(String fileName, Element toParent)", "full_signature": "private File getFile(String fileName, Element toParent)", "class_method_signature": "DataObjectMerger.getFile(String fileName, Element toParent)", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "(List<Node> fromParents, Element toParent)", "modifiers": "private", "return": "String", "signature": "String getFileName(List<Node> fromParents, Element toParent)", "full_signature": "private String getFileName(List<Node> fromParents, Element toParent)", "class_method_signature": "DataObjectMerger.getFileName(List<Node> fromParents, Element toParent)", "testcase": false, "constructor": false}, {"identifier": "getChecksum", "parameters": "(File file)", "modifiers": "static", "return": "String", "signature": "String getChecksum(File file)", "full_signature": "static String getChecksum(File file)", "class_method_signature": "DataObjectMerger.getChecksum(File file)", "testcase": false, "constructor": false}], "file": "s3tbx-slstr-pdu-stitching/src/main/java/org/esa/s3tbx/slstr/pdu/stitching/manifest/DataObjectMerger.java"}, "focal_method": {"identifier": "mergeNodes", "parameters": "(List<Node> fromParents, Element toParent, Document toDocument)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument) throws PDUStitchingException {\n        final String fileName = getFileName(fromParents, toParent);\n        final File file = getFile(fileName, toParent);\n        final long size = file.length();\n        final Element byteStreamElement = toDocument.createElement(\"byteStream\");\n        toParent.appendChild(byteStreamElement);\n        byteStreamElement.setAttribute(\"mimeType\", \"application/x-netcdf\");\n        byteStreamElement.setAttribute(\"size\", String.valueOf(size));\n        final Element fileLocationElement = toDocument.createElement(\"fileLocation\");\n        byteStreamElement.appendChild(fileLocationElement);\n        fileLocationElement.setAttribute(\"locatorType\", \"URL\");\n        fileLocationElement.setAttribute(\"href\", fileName);\n        final Element checksumElement = toDocument.createElement(\"checksum\");\n        byteStreamElement.appendChild(checksumElement);\n        checksumElement.setAttribute(\"checksumName\", \"MD5\");\n        final String checksum;\n        checksum = getChecksum(file);\n        if (checksum.equals(\"\")) {\n            throw new PDUStitchingException(\"Could not create checksum for file \" + fileName);\n        }\n        addTextToNode(checksumElement, checksum, toDocument);\n    }", "signature": "void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "full_signature": "@Override public void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "class_method_signature": "DataObjectMerger.mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "testcase": false, "constructor": false, "invocations": ["getFileName", "getFile", "length", "createElement", "appendChild", "setAttribute", "setAttribute", "valueOf", "createElement", "appendChild", "setAttribute", "setAttribute", "createElement", "appendChild", "setAttribute", "getChecksum", "equals", "addTextToNode"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}