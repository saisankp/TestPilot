{"test_class": {"identifier": "TypeConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Object _null = null;", "modifier": "private final", "type": "Object", "declarator": "_null = null", "var_name": "_null"}, {"original_string": "private final Object nonNull = new Object();", "modifier": "private final", "type": "Object", "declarator": "nonNull = new Object()", "var_name": "nonNull"}, {"original_string": "private final Boolean _true = true;", "modifier": "private final", "type": "Boolean", "declarator": "_true = true", "var_name": "_true"}, {"original_string": "private final Boolean _false = false;", "modifier": "private final", "type": "Boolean", "declarator": "_false = false", "var_name": "_false"}, {"original_string": "private final Number zero = 0;", "modifier": "private final", "type": "Number", "declarator": "zero = 0", "var_name": "zero"}, {"original_string": "private final Number nan = Double.NaN;", "modifier": "private final", "type": "Number", "declarator": "nan = Double.NaN", "var_name": "nan"}, {"original_string": "private final Number num = 4.2;", "modifier": "private final", "type": "Number", "declarator": "num = 4.2", "var_name": "num"}, {"original_string": "private final String emptyStr = \"\";", "modifier": "private final", "type": "String", "declarator": "emptyStr = \"\"", "var_name": "emptyStr"}, {"original_string": "private final String nonEmptyStr = \"non empty!\";", "modifier": "private final", "type": "String", "declarator": "nonEmptyStr = \"non empty!\"", "var_name": "nonEmptyStr"}], "file": "CoreFeatures/Parser/Parser/src/test/java/info/smart_tools/smartactors/morph_expressions/parser/TypeConverterTest.java"}, "test_case": {"identifier": "should_ThrowException_WithReason_UnrecognizedTypeForConvertToDouble", "parameters": "()", "modifiers": "@Test(expected = TypeConversionException.class) public", "return": "void", "body": "@Test(expected = TypeConversionException.class)\n    public void should_ThrowException_WithReason_UnrecognizedTypeForConvertToDouble() throws TypeConversionException {\n        convertToDouble(nonNull);\n    }", "signature": "void should_ThrowException_WithReason_UnrecognizedTypeForConvertToDouble()", "full_signature": "@Test(expected = TypeConversionException.class) public void should_ThrowException_WithReason_UnrecognizedTypeForConvertToDouble()", "class_method_signature": "TypeConverterTest.should_ThrowException_WithReason_UnrecognizedTypeForConvertToDouble()", "testcase": true, "constructor": false, "invocations": ["convertToDouble"]}, "focal_class": {"identifier": "TypeConverter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "convertToBool", "parameters": "(final Object value)", "modifiers": "public static", "return": "Boolean", "signature": "Boolean convertToBool(final Object value)", "full_signature": "public static Boolean convertToBool(final Object value)", "class_method_signature": "TypeConverter.convertToBool(final Object value)", "testcase": false, "constructor": false}, {"identifier": "convertToDouble", "parameters": "(final Object value)", "modifiers": "public static", "return": "Double", "signature": "Double convertToDouble(final Object value)", "full_signature": "public static Double convertToDouble(final Object value)", "class_method_signature": "TypeConverter.convertToDouble(final Object value)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Parser/Parser/src/main/java/info/smart_tools/smartactors/morph_expressions/parser/TypeConverter.java"}, "focal_method": {"identifier": "convertToDouble", "parameters": "(final Object value)", "modifiers": "public static", "return": "Double", "body": "public static Double convertToDouble(final Object value) throws TypeConversionException {\n        if (value instanceof Number) {\n            return ((Number) value).doubleValue();\n        }\n        if (value instanceof String) {\n            if (((String) value).isEmpty()) {\n                return 0.0;\n            }\n            try {\n                return Double.valueOf((String) value);\n            } catch (NumberFormatException ex) {\n                return Double.NaN;\n            }\n        }\n        if (value instanceof Boolean) {\n            return (Boolean) value ? 1.0 : 0.0;\n        }\n        if (value == null) {\n            return Double.NaN;\n        }\n        // Java Object hasn't default method like a JavaScript\n        // so the arbitrary object can't to be cast to Double type.\n        throw new TypeConversionException(\"Failed converted to number: unrecognized type of the given value!\");\n    }", "signature": "Double convertToDouble(final Object value)", "full_signature": "public static Double convertToDouble(final Object value)", "class_method_signature": "TypeConverter.convertToDouble(final Object value)", "testcase": false, "constructor": false, "invocations": ["doubleValue", "isEmpty", "valueOf"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}