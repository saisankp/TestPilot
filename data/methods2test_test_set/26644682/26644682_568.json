{"test_class": {"identifier": "AggregationServiceTest", "superclass": "extends TransformationBaseTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private AggregationService service;", "modifier": "@Autowired\n    private", "type": "AggregationService", "declarator": "service", "var_name": "service"}], "file": "dataprep-transformation/src/test/java/org/talend/dataprep/transformation/aggregation/AggregationServiceTest.java"}, "test_case": {"identifier": "shouldNotAggregateBecauseNoOperation", "parameters": "()", "modifiers": "@Test(expected = TDPException.class) public", "return": "void", "body": "@Test(expected = TDPException.class)\n    public void shouldNotAggregateBecauseNoOperation() {\n        service.aggregate(new AggregationParameters(), new DataSet());\n    }", "signature": "void shouldNotAggregateBecauseNoOperation()", "full_signature": "@Test(expected = TDPException.class) public void shouldNotAggregateBecauseNoOperation()", "class_method_signature": "AggregationServiceTest.shouldNotAggregateBecauseNoOperation()", "testcase": true, "constructor": false, "invocations": ["aggregate"]}, "focal_class": {"identifier": "AggregationService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private AggregatorFactory factory;", "modifier": "@Autowired\n    private", "type": "AggregatorFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "@Autowired\n    private FilterService filterService;", "modifier": "@Autowired\n    private", "type": "FilterService", "declarator": "filterService", "var_name": "filterService"}], "methods": [{"identifier": "aggregate", "parameters": "(AggregationParameters parameters, DataSet dataset)", "modifiers": "public", "return": "AggregationResult", "signature": "AggregationResult aggregate(AggregationParameters parameters, DataSet dataset)", "full_signature": "public AggregationResult aggregate(AggregationParameters parameters, DataSet dataset)", "class_method_signature": "AggregationService.aggregate(AggregationParameters parameters, DataSet dataset)", "testcase": false, "constructor": false}], "file": "dataprep-transformation/src/main/java/org/talend/dataprep/transformation/aggregation/AggregationService.java"}, "focal_method": {"identifier": "aggregate", "parameters": "(AggregationParameters parameters, DataSet dataset)", "modifiers": "public", "return": "AggregationResult", "body": "public AggregationResult aggregate(AggregationParameters parameters, DataSet dataset) {\n\n        // check the parameters\n        if (parameters.getOperations().isEmpty() || parameters.getGroupBy().isEmpty()) {\n            throw new TDPException(CommonErrorCodes.BAD_AGGREGATION_PARAMETERS);\n        }\n\n        AggregationResult result = new AggregationResult(parameters.getOperations().get(0).getOperator());\n\n        // get the aggregator\n        Aggregator aggregator = factory.get(parameters);\n\n        // Build optional filter\n        final DataSetMetadata metadata = dataset.getMetadata();\n        final RowMetadata rowMetadata = metadata != null ? metadata.getRowMetadata() : new RowMetadata();\n        final Predicate<DataSetRow> filter = filterService.build(parameters.getFilter(), rowMetadata);\n\n        // process the dataset\n        dataset.getRecords().filter(filter).forEach(row -> aggregator.accept(row, result));\n\n        // Normalize result (perform clean / optimization now that all input was processed).\n        aggregator.normalize(result);\n\n        return result;\n    }", "signature": "AggregationResult aggregate(AggregationParameters parameters, DataSet dataset)", "full_signature": "public AggregationResult aggregate(AggregationParameters parameters, DataSet dataset)", "class_method_signature": "AggregationService.aggregate(AggregationParameters parameters, DataSet dataset)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getOperations", "isEmpty", "getGroupBy", "getOperator", "get", "getOperations", "get", "getMetadata", "getRowMetadata", "build", "getFilter", "forEach", "filter", "getRecords", "accept", "normalize"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}