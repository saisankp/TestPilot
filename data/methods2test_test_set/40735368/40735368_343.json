{"test_class": {"identifier": "HttpUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/unsupported/wfs/src/test/java/org/geotools/data/wfs/protocol/http/HttpUtilTest.java"}, "test_case": {"identifier": "testCreateUri", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCreateUri() throws MalformedURLException {\n\t\tMap<String, String> queryStringKvp = new HashMap<String, String>();\n\t\tqueryStringKvp.put(\"service\", \"WFS\");\n\t\tqueryStringKvp.put(\"version\", \"1.1.0\");\n\t\tqueryStringKvp.put(\"request\", \"GetFeature\");\n\t\tqueryStringKvp.put(\"typeName\", \"topp:states\");\n\t\t\n\t\tURL url1 = new URL(\"http://localhost:8080/geoserver/topp/ows\");\n\t\tassertEquals(\n\t\t\t\t\"http://localhost:8080/geoserver/topp/ows?request=GetFeature&service=WFS&typeName=topp%3Astates&version=1.1.0\",\n\t\t\t\tHttpUtil.createUri(url1, queryStringKvp));\n\t\t\n\t\t// when the request url is read from the capabilities, there might be a \"&amp;\"\n\t\t// at the end of the url\n\t\tURL url2 = new URL(\"http://localhost:8080/map/mapserv?map=/opt/data/carto/world.www.map&amp;\");\n\t\tassertEquals(\n\t\t\t\t\"http://localhost:8080/map/mapserv?map=%2Fopt%2Fdata%2Fcarto%2Fworld.www.map&request=GetFeature&service=WFS&typeName=topp%3Astates&version=1.1.0\",\n\t\t\t\tHttpUtil.createUri(url2, queryStringKvp));\n\t\t\n\t\tURL url3 = new URL(\"http://localhost:8080/map/mapserv?map=/opt/data/carto/world.www.map&test=1\");\n\t\tassertEquals(\n\t\t\t\t\"http://localhost:8080/map/mapserv?map=%2Fopt%2Fdata%2Fcarto%2Fworld.www.map&request=GetFeature&service=WFS&test=1&typeName=topp%3Astates&version=1.1.0\",\n\t\t\t\tHttpUtil.createUri(url3, queryStringKvp));\n\t}", "signature": "void testCreateUri()", "full_signature": "@Test public void testCreateUri()", "class_method_signature": "HttpUtilTest.testCreateUri()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "assertEquals", "createUri", "assertEquals", "createUri", "assertEquals", "createUri"]}, "focal_class": {"identifier": "HttpUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Logger LOGGER = Logging.getLogger(HttpUtil.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOGGER = Logging.getLogger(HttpUtil.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "createUrl", "parameters": "(final URL baseUrl, final Map<String, String> queryStringKvp)", "modifiers": "public static", "return": "URL", "signature": "URL createUrl(final URL baseUrl, final Map<String, String> queryStringKvp)", "full_signature": "public static URL createUrl(final URL baseUrl, final Map<String, String> queryStringKvp)", "class_method_signature": "HttpUtil.createUrl(final URL baseUrl, final Map<String, String> queryStringKvp)", "testcase": false, "constructor": false}, {"identifier": "createUri", "parameters": "(final URL baseUrl, final Map<String, String> queryStringKvp)", "modifiers": "public static", "return": "String", "signature": "String createUri(final URL baseUrl, final Map<String, String> queryStringKvp)", "full_signature": "public static String createUri(final URL baseUrl, final Map<String, String> queryStringKvp)", "class_method_signature": "HttpUtil.createUri(final URL baseUrl, final Map<String, String> queryStringKvp)", "testcase": false, "constructor": false}, {"identifier": "requestKvp", "parameters": "(URL url)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Map<String, String>", "signature": "Map<String, String> requestKvp(URL url)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Map<String, String> requestKvp(URL url)", "class_method_signature": "HttpUtil.requestKvp(URL url)", "testcase": false, "constructor": false}], "file": "modules/unsupported/wfs/src/main/java/org/geotools/data/wfs/protocol/http/HttpUtil.java"}, "focal_method": {"identifier": "createUri", "parameters": "(final URL baseUrl, final Map<String, String> queryStringKvp)", "modifiers": "public static", "return": "String", "body": "public static String createUri(final URL baseUrl, final Map<String, String> queryStringKvp) {\n        String query = baseUrl.getQuery();\n        Map<String, String> finalKvpMap = new TreeMap<String, String>(queryStringKvp);\n        if (query != null && query.length() > 0) {\n            Map<String, String> userParams = new CaseInsensitiveMap(queryStringKvp);\n            \n            // there might be a \"&amp;\" at the end, make sure to remove it\n            if (query.endsWith(\"&amp;\")) {\n            \tquery = query.substring(0, query.length() - 5);\n            }\n            \n            String[] rawUrlKvpSet = query.split(\"&\");\n            for (String rawUrlKvp : rawUrlKvpSet) {\n                int eqIdx = rawUrlKvp.indexOf('=');\n                String key, value;\n                if (eqIdx > 0) {\n                    key = rawUrlKvp.substring(0, eqIdx);\n                    value = rawUrlKvp.substring(eqIdx + 1);\n                } else {\n                    key = rawUrlKvp;\n                    value = null;\n                }\n                try {\n                    value = URLDecoder.decode(value, \"UTF-8\");\n                } catch (UnsupportedEncodingException e) {\n                    throw new RuntimeException(e);\n                }\n                if (userParams.containsKey(key)) {\n                    LOGGER.fine(\"user supplied value for query string argument \" + key\n                            + \" overrides the one in the base url\");\n                } else {\n                    finalKvpMap.put(key, value);\n                }\n            }\n        }\n\n        String protocol = baseUrl.getProtocol();\n        String host = baseUrl.getHost();\n        int port = baseUrl.getPort();\n        String path = baseUrl.getPath();\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(protocol).append(\"://\").append(host);\n        if (port != -1 && port != baseUrl.getDefaultPort()) {\n            sb.append(':');\n            sb.append(port);\n        }\n        if (!\"\".equals(path) && !path.startsWith(\"/\")) {\n            sb.append('/');\n        }\n        sb.append(path).append('?');\n\n        String key, value;\n        try {\n            Entry<String, String> kvp;\n            for (Iterator<Map.Entry<String, String>> it = finalKvpMap.entrySet().iterator(); it\n                    .hasNext();) {\n                kvp = it.next();\n                key = kvp.getKey();\n                value = kvp.getValue();\n                if (value == null) {\n                    value = \"\";\n                } else {\n                    value = URLEncoder.encode(value, \"UTF-8\");\n                }\n                sb.append(key);\n                sb.append('=');\n                sb.append(value);\n                if (it.hasNext()) {\n                    sb.append('&');\n                }\n            }\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n        }\n\n        final String finalUrlString = sb.toString();\n        return finalUrlString;\n    }", "signature": "String createUri(final URL baseUrl, final Map<String, String> queryStringKvp)", "full_signature": "public static String createUri(final URL baseUrl, final Map<String, String> queryStringKvp)", "class_method_signature": "HttpUtil.createUri(final URL baseUrl, final Map<String, String> queryStringKvp)", "testcase": false, "constructor": false, "invocations": ["getQuery", "length", "endsWith", "substring", "length", "split", "indexOf", "substring", "substring", "decode", "containsKey", "fine", "put", "getProtocol", "getHost", "getPort", "getPath", "append", "append", "append", "getDefaultPort", "append", "append", "equals", "startsWith", "append", "append", "append", "iterator", "entrySet", "hasNext", "next", "getKey", "getValue", "encode", "append", "append", "append", "hasNext", "append", "toString"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}