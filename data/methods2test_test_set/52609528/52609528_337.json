{"test_class": {"identifier": "RoleMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RoleMapper roleMapper;", "modifier": "private", "type": "RoleMapper", "declarator": "roleMapper", "var_name": "roleMapper"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private MockResourceStorage storage;", "modifier": "private", "type": "MockResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private static final String ROLEMAPPER = \"/gateleen/server/security/v1/rolemapper\";", "modifier": "private static final", "type": "String", "declarator": "ROLEMAPPER = \"/gateleen/server/security/v1/rolemapper\"", "var_name": "ROLEMAPPER"}, {"original_string": "private static final String ROLEMAPPER_DIR = \"rolemapper/\";", "modifier": "private static final", "type": "String", "declarator": "ROLEMAPPER_DIR = \"rolemapper/\"", "var_name": "ROLEMAPPER_DIR"}, {"original_string": "@Rule\n    public Timeout rule = Timeout.seconds(5);", "modifier": "@Rule\n    public", "type": "Timeout", "declarator": "rule = Timeout.seconds(5)", "var_name": "rule"}], "file": "gateleen-security/src/test/java/org/swisspush/gateleen/security/authorization/RoleMapperTest.java"}, "test_case": {"identifier": "checkStageMappingWithFurtherHit", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkStageMappingWithFurtherHit(TestContext context) {\n        Set<String> roles = new HashSet<>();\n        roles.add(\"domain-admin-stage-prod\"); // will match the stage mapping but after that no other one\n        Map<String, RoleMapper.MappedRole> mappedRoles = roleMapper.mapRoles(roles);\n        context.assertNotNull(mappedRoles);\n        context.assertTrue(mappedRoles.size() == 3);\n        context.assertTrue(mappedRoles.get(\"domain-admin-stage-prod\").forward == false);\n        context.assertTrue(mappedRoles.get(\"domain-admin\").forward == true);\n        context.assertTrue(mappedRoles.get(\"domain\").forward == false);\n    }", "signature": "void checkStageMappingWithFurtherHit(TestContext context)", "full_signature": "@Test public void checkStageMappingWithFurtherHit(TestContext context)", "class_method_signature": "RoleMapperTest.checkStageMappingWithFurtherHit(TestContext context)", "testcase": true, "constructor": false, "invocations": ["add", "mapRoles", "assertNotNull", "assertTrue", "size", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get"]}, "focal_class": {"identifier": "RoleMapper", "superclass": "", "interfaces": "implements ConfigurationResource", "fields": [{"original_string": "private ResourceStorage storage;", "modifier": "private", "type": "ResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private String roleMapper;", "modifier": "private", "type": "String", "declarator": "roleMapper", "var_name": "roleMapper"}, {"original_string": "private RoleMapperFactory roleMapperFactory;", "modifier": "private", "type": "RoleMapperFactory", "declarator": "roleMapperFactory", "var_name": "roleMapperFactory"}, {"original_string": "private List<RoleMapperHolder> roleMappers = null;", "modifier": "private", "type": "List<RoleMapperHolder>", "declarator": "roleMappers = null", "var_name": "roleMappers"}, {"original_string": "public static final Logger log = LoggerFactory.getLogger(RoleMapper.class);", "modifier": "public static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RoleMapper.class)", "var_name": "log"}, {"original_string": "public static final String ROLEMAPPER = \"rolemapper\";", "modifier": "public static final", "type": "String", "declarator": "ROLEMAPPER = \"rolemapper\"", "var_name": "ROLEMAPPER"}], "methods": [{"identifier": "RoleMapper", "parameters": "(ResourceStorage storage, String securityRoot, Map<String, Object> properties)", "modifiers": "public", "return": "", "signature": " RoleMapper(ResourceStorage storage, String securityRoot, Map<String, Object> properties)", "full_signature": "public  RoleMapper(ResourceStorage storage, String securityRoot, Map<String, Object> properties)", "class_method_signature": "RoleMapper.RoleMapper(ResourceStorage storage, String securityRoot, Map<String, Object> properties)", "testcase": false, "constructor": true}, {"identifier": "checkConfigResource", "parameters": "(Buffer buffer)", "modifiers": "@Override public", "return": "void", "signature": "void checkConfigResource(Buffer buffer)", "full_signature": "@Override public void checkConfigResource(Buffer buffer)", "class_method_signature": "RoleMapper.checkConfigResource(Buffer buffer)", "testcase": false, "constructor": false}, {"identifier": "configUpdate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configUpdate()", "full_signature": "@Override public void configUpdate()", "class_method_signature": "RoleMapper.configUpdate()", "testcase": false, "constructor": false}, {"identifier": "mapRoles", "parameters": "(Set<String> roles)", "modifiers": "public", "return": "Map<String, MappedRole>", "signature": "Map<String, MappedRole> mapRoles(Set<String> roles)", "full_signature": "public Map<String, MappedRole> mapRoles(Set<String> roles)", "class_method_signature": "RoleMapper.mapRoles(Set<String> roles)", "testcase": false, "constructor": false}], "file": "gateleen-security/src/main/java/org/swisspush/gateleen/security/authorization/RoleMapper.java"}, "focal_method": {"identifier": "mapRoles", "parameters": "(Set<String> roles)", "modifiers": "public", "return": "Map<String, MappedRole>", "body": "public Map<String, MappedRole> mapRoles(Set<String> roles) {\n        Map<String, MappedRole> mappedRoles = new HashMap<>();\n        if (roles != null) {\n            String originalRole; // holds the last known original role to be applied in  mapping rule chains\n            Matcher matcher;\n            for (String role : roles) {\n                originalRole = role;\n                if (roleMappers != null && !roleMappers.isEmpty()) {\n                    for (RoleMapperHolder mapper : roleMappers) {\n                        matcher = mapper.getPattern().matcher(role);\n                        if (matcher.matches()) {\n                            // we found a matching mapping rule to map and therefore,\n                            // we must replace matching regex capture groups if there are any\n                            String matchedRole = matcher.replaceAll(mapper.getRole());\n                            // put the original role in the list of mapped roles\n                            mappedRoles.put(originalRole, new MappedRole(originalRole, mapper.getKeepOriginalRole()));\n                            // now we check if we have to continue matching in the chain of RoleMapper definitions\n                            if (mapper.getContinueMapping()) {\n                                // go on with next mapping rule, but the new original rule from now on is the one\n                                // which matched here and not the previous original one\n                                originalRole = matchedRole;\n                            } else {\n                                originalRole = null;\n                                // put the last resulting mapped role to the list of mapped roles\n                                mappedRoles.put(matchedRole, new MappedRole(matchedRole, mapper.getKeepResultingRole()));\n                                // we don't have to loop further as it is finally mapped now for this given role\n                                // according to the mapping definition\n                                break;\n                            }\n                        }\n                    }\n                    // Finally add what is the last known OriginalRole up to here if there is any\n                    if (originalRole != null) {\n                        mappedRoles.put(originalRole, new MappedRole(originalRole, true));\n                    }\n                } else {\n                    // there is no mapping defined, just add the given role as is\n                    mappedRoles.put(originalRole, new MappedRole(originalRole, true));\n                }\n            }\n        }\n        return mappedRoles;\n    }", "signature": "Map<String, MappedRole> mapRoles(Set<String> roles)", "full_signature": "public Map<String, MappedRole> mapRoles(Set<String> roles)", "class_method_signature": "RoleMapper.mapRoles(Set<String> roles)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "matcher", "getPattern", "matches", "replaceAll", "getRole", "put", "getKeepOriginalRole", "getContinueMapping", "put", "getKeepResultingRole", "put", "put"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}