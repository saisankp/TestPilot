{"test_class": {"identifier": "StationaryVarianceDecompositionTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/satoolkit/diagnostics/StationaryVarianceDecompositionTest.java"}, "test_case": {"identifier": "testX12", "parameters": "()", "modifiers": "@Ignore @Test public", "return": "void", "body": "@Ignore\n    @Test\n    public void testX12() {\n        CompositeResults rslts = X13ProcessingFactory.process(Data.X, X13Specification.RSA5);\n        StationaryVarianceDecomposition var = new StationaryVarianceDecomposition();\n        var.process(rslts);\n        System.out.println(\"X12\");\n        System.out.println(var);\n    }", "signature": "void testX12()", "full_signature": "@Ignore @Test public void testX12()", "class_method_signature": "StationaryVarianceDecompositionTest.testX12()", "testcase": true, "constructor": false, "invocations": ["process", "process", "println", "println"]}, "focal_class": {"identifier": "StationaryVarianceDecomposition", "superclass": "", "interfaces": "", "fields": [{"original_string": "private double varC, varS, varI, varP, varCal;", "modifier": "private", "type": "double", "declarator": "varC", "var_name": "varC"}, {"original_string": "private final ILongTermTrendComputer trendComputer;", "modifier": "private final", "type": "ILongTermTrendComputer", "declarator": "trendComputer", "var_name": "trendComputer"}, {"original_string": "private static final String nl = System.lineSeparator();", "modifier": "private static final", "type": "String", "declarator": "nl = System.lineSeparator()", "var_name": "nl"}], "methods": [{"identifier": "StationaryVarianceDecomposition", "parameters": "()", "modifiers": "public", "return": "", "signature": " StationaryVarianceDecomposition()", "full_signature": "public  StationaryVarianceDecomposition()", "class_method_signature": "StationaryVarianceDecomposition.StationaryVarianceDecomposition()", "testcase": false, "constructor": true}, {"identifier": "StationaryVarianceDecomposition", "parameters": "(final ILongTermTrendComputer trendComputer)", "modifiers": "public", "return": "", "signature": " StationaryVarianceDecomposition(final ILongTermTrendComputer trendComputer)", "full_signature": "public  StationaryVarianceDecomposition(final ILongTermTrendComputer trendComputer)", "class_method_signature": "StationaryVarianceDecomposition.StationaryVarianceDecomposition(final ILongTermTrendComputer trendComputer)", "testcase": false, "constructor": true}, {"identifier": "getTrendComputer", "parameters": "()", "modifiers": "public", "return": "ILongTermTrendComputer", "signature": "ILongTermTrendComputer getTrendComputer()", "full_signature": "public ILongTermTrendComputer getTrendComputer()", "class_method_signature": "StationaryVarianceDecomposition.getTrendComputer()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(final TsData O, final TsData T, final TsData S, final TsData I, final TsData Cal, final TsData others, final boolean mul)", "modifiers": "public", "return": "boolean", "signature": "boolean process(final TsData O, final TsData T, final TsData S, final TsData I, final TsData Cal, final TsData others, final boolean mul)", "full_signature": "public boolean process(final TsData O, final TsData T, final TsData S, final TsData I, final TsData Cal, final TsData others, final boolean mul)", "class_method_signature": "StationaryVarianceDecomposition.process(final TsData O, final TsData T, final TsData S, final TsData I, final TsData Cal, final TsData others, final boolean mul)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(IProcResults results)", "modifiers": "public", "return": "boolean", "signature": "boolean process(IProcResults results)", "full_signature": "public boolean process(IProcResults results)", "class_method_signature": "StationaryVarianceDecomposition.process(IProcResults results)", "testcase": false, "constructor": false}, {"identifier": "getVarI", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getVarI()", "full_signature": "public double getVarI()", "class_method_signature": "StationaryVarianceDecomposition.getVarI()", "testcase": false, "constructor": false}, {"identifier": "getVarS", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getVarS()", "full_signature": "public double getVarS()", "class_method_signature": "StationaryVarianceDecomposition.getVarS()", "testcase": false, "constructor": false}, {"identifier": "getVarC", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getVarC()", "full_signature": "public double getVarC()", "class_method_signature": "StationaryVarianceDecomposition.getVarC()", "testcase": false, "constructor": false}, {"identifier": "getVarP", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getVarP()", "full_signature": "public double getVarP()", "class_method_signature": "StationaryVarianceDecomposition.getVarP()", "testcase": false, "constructor": false}, {"identifier": "getVarTD", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getVarTD()", "full_signature": "public double getVarTD()", "class_method_signature": "StationaryVarianceDecomposition.getVarTD()", "testcase": false, "constructor": false}, {"identifier": "getVarTotal", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getVarTotal()", "full_signature": "public double getVarTotal()", "class_method_signature": "StationaryVarianceDecomposition.getVarTotal()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StationaryVarianceDecomposition.toString()", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/satoolkit/diagnostics/StationaryVarianceDecomposition.java"}, "focal_method": {"identifier": "process", "parameters": "(final TsData O, final TsData T, final TsData S, final TsData I, final TsData Cal, final TsData others, final boolean mul)", "modifiers": "public", "return": "boolean", "body": "public boolean process(final TsData O, final TsData T, final TsData S, final TsData I, final TsData Cal, final TsData others, final boolean mul) {\n        if (O == null) {\n            return false;\n        }\n        TsData stOc, stCc, Sc, Ic, Calc, Pc;\n        if (mul) {\n            // use logs\n            stOc = O.log();\n            stCc = T != null ? T.log() : null;\n            Sc = S != null ? S.log() : null;\n            Ic = I != null ? I.log() : null;\n            Calc = Cal != null ? Cal.log() : null;\n            Pc = others != null ? others.log() : null;\n\n        } else {\n            stOc = O;\n            stCc = T;\n            Sc = S;\n            Ic = I;\n            Calc = Cal;\n            Pc = others;\n        }\n\n        TsData lt = trendComputer.calcLongTermTrend(stCc);\n        stCc = TsData.subtract(stCc, lt);\n        stOc = TsData.subtract(stOc, lt);\n\n        //\n        DescriptiveStatistics stats = new DescriptiveStatistics(stOc);\n        double varO = stats.getVar();\n\n        if (stCc != null) {\n            stats = new DescriptiveStatistics(stCc);\n            varC = stats.getVar();\n        } else {\n            varC = 0;\n        }\n\n        if (Sc != null) {\n            stats = new DescriptiveStatistics(Sc);\n            varS = stats.getVar();\n        } else {\n            varS = 0;\n        }\n        if (Ic != null) {\n            stats = new DescriptiveStatistics(Ic);\n            varI = stats.getVar();\n        } else {\n            varI = 0;\n        }\n        if (Calc != null) {\n            stats = new DescriptiveStatistics(Calc);\n            varCal = stats.getVar();\n        } else {\n            varCal = 0;\n        }\n        if (Pc != null) {\n            stats = new DescriptiveStatistics(Pc);\n            varP = stats.getVar();\n        } else {\n            varP = 0;\n        }\n\n        varP /= varO;\n        varCal /= varO;\n        varS /= varO;\n        varC /= varO;\n        varI /= varO;\n\n        return true;\n    }", "signature": "boolean process(final TsData O, final TsData T, final TsData S, final TsData I, final TsData Cal, final TsData others, final boolean mul)", "full_signature": "public boolean process(final TsData O, final TsData T, final TsData S, final TsData I, final TsData Cal, final TsData others, final boolean mul)", "class_method_signature": "StationaryVarianceDecomposition.process(final TsData O, final TsData T, final TsData S, final TsData I, final TsData Cal, final TsData others, final boolean mul)", "testcase": false, "constructor": false, "invocations": ["log", "log", "log", "log", "log", "log", "calcLongTermTrend", "subtract", "subtract", "getVar", "getVar", "getVar", "getVar", "getVar", "getVar"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}