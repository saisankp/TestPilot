{"test_class": {"identifier": "BitSetBinaryRepresentationTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "protected BitSetBinaryRepresentation representation;", "modifier": "protected", "type": "BitSetBinaryRepresentation", "declarator": "representation", "var_name": "representation"}, {"original_string": "protected SimpleBinaryGenomeDescriptor descriptor;", "modifier": "protected", "type": "SimpleBinaryGenomeDescriptor", "declarator": "descriptor", "var_name": "descriptor"}], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/representations/genotype/BitSetBinaryRepresentationTest.java"}, "test_case": {"identifier": "testSetDoubleValue1", "parameters": "()", "modifiers": "@Test // tests encoding of given information according to descriptor public", "return": "void", "body": "@Test\n    // tests encoding of given information according to descriptor\n    public void testSetDoubleValue1(){\n        this.representation.setDoubleValue(new double[]{13.0, 1.0, 1851.75+10e10, 123456.5});\n        boolean[] boolGenome = new boolean[this.representation.genomeLength];\n        for (int idx = 0; idx < boolGenome.length; idx++){\n            boolGenome[idx] = this.representation.genome.get(idx);\n        }\n        boolean[] expected = new boolean[]{\n                false, true, false, true, true, true,\n                true, false,\n                true, true, true, true,\n                true, true, true, true, true, false, true, false, false\n        };\n\n        assertEquals(expected.length, boolGenome.length);\n        for (int i = 0; i < expected.length; i++){\n            assertEquals(expected[i], boolGenome[i]);\n        }\n    }", "signature": "void testSetDoubleValue1()", "full_signature": "@Test // tests encoding of given information according to descriptor public void testSetDoubleValue1()", "class_method_signature": "BitSetBinaryRepresentationTest.testSetDoubleValue1()", "testcase": true, "constructor": false, "invocations": ["setDoubleValue", "get", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "BitSetBinaryRepresentation", "superclass": "", "interfaces": "implements GenotypeRepresentation", "fields": [{"original_string": "protected BitSet genome = new BitSet();", "modifier": "protected", "type": "BitSet", "declarator": "genome = new BitSet()", "var_name": "genome"}, {"original_string": "protected int genomeLength;", "modifier": "protected", "type": "int", "declarator": "genomeLength", "var_name": "genomeLength"}, {"original_string": "protected SimpleBinaryGenomeDescriptor descriptor;", "modifier": "protected", "type": "SimpleBinaryGenomeDescriptor", "declarator": "descriptor", "var_name": "descriptor"}], "methods": [{"identifier": "BitSetBinaryRepresentation", "parameters": "(SimpleBinaryGenomeDescriptor descriptor)", "modifiers": "public", "return": "", "signature": " BitSetBinaryRepresentation(SimpleBinaryGenomeDescriptor descriptor)", "full_signature": "public  BitSetBinaryRepresentation(SimpleBinaryGenomeDescriptor descriptor)", "class_method_signature": "BitSetBinaryRepresentation.BitSetBinaryRepresentation(SimpleBinaryGenomeDescriptor descriptor)", "testcase": false, "constructor": true}, {"identifier": "BitSetBinaryRepresentation", "parameters": "(BitSetBinaryRepresentation second)", "modifiers": "public", "return": "", "signature": " BitSetBinaryRepresentation(BitSetBinaryRepresentation second)", "full_signature": "public  BitSetBinaryRepresentation(BitSetBinaryRepresentation second)", "class_method_signature": "BitSetBinaryRepresentation.BitSetBinaryRepresentation(BitSetBinaryRepresentation second)", "testcase": false, "constructor": true}, {"identifier": "getTotalLength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTotalLength()", "full_signature": "public int getTotalLength()", "class_method_signature": "BitSetBinaryRepresentation.getTotalLength()", "testcase": false, "constructor": false}, {"identifier": "getValueLengths", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getValueLengths()", "full_signature": "public int[] getValueLengths()", "class_method_signature": "BitSetBinaryRepresentation.getValueLengths()", "testcase": false, "constructor": false}, {"identifier": "getGeneAt", "parameters": "(int idx)", "modifiers": "public", "return": "boolean", "signature": "boolean getGeneAt(int idx)", "full_signature": "public boolean getGeneAt(int idx)", "class_method_signature": "BitSetBinaryRepresentation.getGeneAt(int idx)", "testcase": false, "constructor": false}, {"identifier": "setGeneAt", "parameters": "(int idx, boolean value)", "modifiers": "public", "return": "void", "signature": "void setGeneAt(int idx, boolean value)", "full_signature": "public void setGeneAt(int idx, boolean value)", "class_method_signature": "BitSetBinaryRepresentation.setGeneAt(int idx, boolean value)", "testcase": false, "constructor": false}, {"identifier": "invertGeneAt", "parameters": "(int idx)", "modifiers": "public", "return": "void", "signature": "void invertGeneAt(int idx)", "full_signature": "public void invertGeneAt(int idx)", "class_method_signature": "BitSetBinaryRepresentation.invertGeneAt(int idx)", "testcase": false, "constructor": false}, {"identifier": "swapGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int[] positions)", "modifiers": "public", "return": "void", "signature": "void swapGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "full_signature": "public void swapGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "class_method_signature": "BitSetBinaryRepresentation.swapGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "testcase": false, "constructor": false}, {"identifier": "swapGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int from, int to)", "modifiers": "public", "return": "void", "signature": "void swapGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "full_signature": "public void swapGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "class_method_signature": "BitSetBinaryRepresentation.swapGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "testcase": false, "constructor": false}, {"identifier": "swapGenesInternal", "parameters": "(GenotypeRepresentation secondRepresentation, int position)", "modifiers": "protected", "return": "void", "signature": "void swapGenesInternal(GenotypeRepresentation secondRepresentation, int position)", "full_signature": "protected void swapGenesInternal(GenotypeRepresentation secondRepresentation, int position)", "class_method_signature": "BitSetBinaryRepresentation.swapGenesInternal(GenotypeRepresentation secondRepresentation, int position)", "testcase": false, "constructor": false}, {"identifier": "receiveGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int[] positions)", "modifiers": "public", "return": "void", "signature": "void receiveGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "full_signature": "public void receiveGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "class_method_signature": "BitSetBinaryRepresentation.receiveGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "testcase": false, "constructor": false}, {"identifier": "receiveGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int from, int to)", "modifiers": "public", "return": "void", "signature": "void receiveGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "full_signature": "public void receiveGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "class_method_signature": "BitSetBinaryRepresentation.receiveGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "testcase": false, "constructor": false}, {"identifier": "andGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int[] positions)", "modifiers": "public", "return": "void", "signature": "void andGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "full_signature": "public void andGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "class_method_signature": "BitSetBinaryRepresentation.andGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "testcase": false, "constructor": false}, {"identifier": "andGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int from, int to)", "modifiers": "public", "return": "void", "signature": "void andGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "full_signature": "public void andGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "class_method_signature": "BitSetBinaryRepresentation.andGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "testcase": false, "constructor": false}, {"identifier": "orGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int[] positions)", "modifiers": "public", "return": "void", "signature": "void orGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "full_signature": "public void orGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "class_method_signature": "BitSetBinaryRepresentation.orGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "testcase": false, "constructor": false}, {"identifier": "orGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int from, int to)", "modifiers": "public", "return": "void", "signature": "void orGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "full_signature": "public void orGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "class_method_signature": "BitSetBinaryRepresentation.orGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "testcase": false, "constructor": false}, {"identifier": "xorGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int[] positions)", "modifiers": "public", "return": "void", "signature": "void xorGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "full_signature": "public void xorGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "class_method_signature": "BitSetBinaryRepresentation.xorGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "testcase": false, "constructor": false}, {"identifier": "xorGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int from, int to)", "modifiers": "public", "return": "void", "signature": "void xorGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "full_signature": "public void xorGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "class_method_signature": "BitSetBinaryRepresentation.xorGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "testcase": false, "constructor": false}, {"identifier": "getDoubleValue", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getDoubleValue()", "full_signature": "public double[] getDoubleValue()", "class_method_signature": "BitSetBinaryRepresentation.getDoubleValue()", "testcase": false, "constructor": false}, {"identifier": "setDoubleValue", "parameters": "(double[] phenotypeValue)", "modifiers": "public", "return": "void", "signature": "void setDoubleValue(double[] phenotypeValue)", "full_signature": "public void setDoubleValue(double[] phenotypeValue)", "class_method_signature": "BitSetBinaryRepresentation.setDoubleValue(double[] phenotypeValue)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "public", "return": "Representation", "signature": "Representation copy()", "full_signature": "public Representation copy()", "class_method_signature": "BitSetBinaryRepresentation.copy()", "testcase": false, "constructor": false}, {"identifier": "binaryToInteger", "parameters": "()", "modifiers": "protected", "return": "double[]", "signature": "double[] binaryToInteger()", "full_signature": "protected double[] binaryToInteger()", "class_method_signature": "BitSetBinaryRepresentation.binaryToInteger()", "testcase": false, "constructor": false}, {"identifier": "integerToBinary", "parameters": "(double[] intValues)", "modifiers": "protected", "return": "void", "signature": "void integerToBinary(double[] intValues)", "full_signature": "protected void integerToBinary(double[] intValues)", "class_method_signature": "BitSetBinaryRepresentation.integerToBinary(double[] intValues)", "testcase": false, "constructor": false}, {"identifier": "decodeGenomeToBinary", "parameters": "()", "modifiers": "protected", "return": "BitSet", "signature": "BitSet decodeGenomeToBinary()", "full_signature": "protected BitSet decodeGenomeToBinary()", "class_method_signature": "BitSetBinaryRepresentation.decodeGenomeToBinary()", "testcase": false, "constructor": false}, {"identifier": "encodeBinaryGenome", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void encodeBinaryGenome()", "full_signature": "protected void encodeBinaryGenome()", "class_method_signature": "BitSetBinaryRepresentation.encodeBinaryGenome()", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/representations/genotype/BitSetBinaryRepresentation.java"}, "focal_method": {"identifier": "setDoubleValue", "parameters": "(double[] phenotypeValue)", "modifiers": "public", "return": "void", "body": "public void setDoubleValue(double[] phenotypeValue) {\n        if (this.genome == null || this.genomeLength == 0){\n            this.genome = new BitSet( MathUtils.sumSizes(this.descriptor.getVariablesLengths()) );\n        }\n        double[] intValues = new double[this.descriptor.getNumVariables()];\n        for (int i = 0; i < this.descriptor.getNumVariables(); i++){\n            // prevent falling out from defined interval\n            if (phenotypeValue[i] < this.descriptor.getVariablesLowerBounds()[i]){\n                phenotypeValue[i] = this.descriptor.getVariablesLowerBounds()[i];\n            }\n            intValues[i] = Math.ceil((phenotypeValue[i] - this.descriptor.getVariablesLowerBounds()[i]) / this.descriptor.getVariablesPrecisions()[i]);\n        }\n        integerToBinary(intValues);\n    }", "signature": "void setDoubleValue(double[] phenotypeValue)", "full_signature": "public void setDoubleValue(double[] phenotypeValue)", "class_method_signature": "BitSetBinaryRepresentation.setDoubleValue(double[] phenotypeValue)", "testcase": false, "constructor": false, "invocations": ["sumSizes", "getVariablesLengths", "getNumVariables", "getNumVariables", "getVariablesLowerBounds", "getVariablesLowerBounds", "ceil", "getVariablesLowerBounds", "getVariablesPrecisions", "integerToBinary"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}