{"test_class": {"identifier": "FeignTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n  public final", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "@Rule\n  public final MockWebServer server = new MockWebServer();", "modifier": "@Rule\n  public final", "type": "MockWebServer", "declarator": "server = new MockWebServer()", "var_name": "server"}], "file": "core/src/test/java/feign/FeignTest.java"}, "test_case": {"identifier": "throwsFeignExceptionIncludingBody", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void throwsFeignExceptionIncludingBody() {\n    server.enqueue(new MockResponse().setBody(\"success!\"));\n\n    TestInterface api = Feign.builder()\n        .decoder((response, type) -> {\n          throw new IOException(\"timeout\");\n        })\n        .target(TestInterface.class, \"http://localhost:\" + server.getPort());\n\n    try {\n      api.body(\"Request body\");\n    } catch (FeignException e) {\n      assertThat(e.getMessage())\n          .isEqualTo(\"timeout reading POST http://localhost:\" + server.getPort() + \"/\");\n      assertThat(e.contentUTF8()).isEqualTo(\"Request body\");\n    }\n  }", "signature": "void throwsFeignExceptionIncludingBody()", "full_signature": "@Test public void throwsFeignExceptionIncludingBody()", "class_method_signature": "FeignTest.throwsFeignExceptionIncludingBody()", "testcase": true, "constructor": false, "invocations": ["enqueue", "setBody", "target", "decoder", "builder", "getPort", "body", "isEqualTo", "assertThat", "getMessage", "getPort", "isEqualTo", "assertThat", "contentUTF8"]}, "focal_class": {"identifier": "Feign", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "Feign.builder()", "testcase": false, "constructor": false}, {"identifier": "configKey", "parameters": "(Class targetType, Method method)", "modifiers": "public static", "return": "String", "signature": "String configKey(Class targetType, Method method)", "full_signature": "public static String configKey(Class targetType, Method method)", "class_method_signature": "Feign.configKey(Class targetType, Method method)", "testcase": false, "constructor": false}, {"identifier": "configKey", "parameters": "(Method method)", "modifiers": "@Deprecated public static", "return": "String", "signature": "String configKey(Method method)", "full_signature": "@Deprecated public static String configKey(Method method)", "class_method_signature": "Feign.configKey(Method method)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Target<T> target)", "modifiers": "public abstract", "return": "T", "signature": "T newInstance(Target<T> target)", "full_signature": "public abstract T newInstance(Target<T> target)", "class_method_signature": "Feign.newInstance(Target<T> target)", "testcase": false, "constructor": false}], "file": "core/src/main/java/feign/Feign.java"}, "focal_method": {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "body": "public static Builder builder() {\n    return new Builder();\n  }", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "Feign.builder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 10981994, "url": "https://github.com/OpenFeign/feign", "stars": 5385, "created": "6/26/2013 11:28:16 PM +00:00", "updates": "2020-01-27T14:44:13+00:00", "fork": "False", "license": "licensed"}}