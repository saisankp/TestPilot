{"test_class": {"identifier": "PerProcessInstanceRuntimeManagerTest", "superclass": "extends AbstractBaseTest", "interfaces": "", "fields": [{"original_string": "private PoolingDataSourceWrapper pds;", "modifier": "private", "type": "PoolingDataSourceWrapper", "declarator": "pds", "var_name": "pds"}, {"original_string": "private UserGroupCallback userGroupCallback;", "modifier": "private", "type": "UserGroupCallback", "declarator": "userGroupCallback", "var_name": "userGroupCallback"}, {"original_string": "private RuntimeManager manager;", "modifier": "private", "type": "RuntimeManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private EntityManagerFactory emf;", "modifier": "private", "type": "EntityManagerFactory", "declarator": "emf", "var_name": "emf"}], "file": "jbpm-runtime-manager/src/test/java/org/jbpm/runtime/manager/impl/PerProcessInstanceRuntimeManagerTest.java"}, "test_case": {"identifier": "testAuditServiceNotAvailable", "parameters": "()", "modifiers": "@Test(expected=UnsupportedOperationException.class) public", "return": "void", "body": "@Test(expected=UnsupportedOperationException.class)\n    public void testAuditServiceNotAvailable() {\n        RuntimeEnvironment environment = RuntimeEnvironmentBuilder.Factory.get()\n    \t\t\t.newDefaultInMemoryBuilder()\n                .userGroupCallback(userGroupCallback)\n                .addAsset(ResourceFactory.newClassPathResource(\"BPMN2-ScriptTask.bpmn2\"), ResourceType.BPMN2)\n                .addAsset(ResourceFactory.newClassPathResource(\"BPMN2-UserTask.bpmn2\"), ResourceType.BPMN2)\n                .get();\n\n        manager = RuntimeManagerFactory.Factory.get().newPerProcessInstanceRuntimeManager(environment);\n        assertNotNull(manager);\n\n        // ksession for process instance #1\n        // since there is no process instance yet we need to get new session\n        RuntimeEngine runtime = manager.getRuntimeEngine(ProcessInstanceIdContext.get());\n        runtime.getAuditService();\n\n    }", "signature": "void testAuditServiceNotAvailable()", "full_signature": "@Test(expected=UnsupportedOperationException.class) public void testAuditServiceNotAvailable()", "class_method_signature": "PerProcessInstanceRuntimeManagerTest.testAuditServiceNotAvailable()", "testcase": true, "constructor": false, "invocations": ["get", "addAsset", "addAsset", "userGroupCallback", "newDefaultInMemoryBuilder", "get", "newClassPathResource", "newClassPathResource", "newPerProcessInstanceRuntimeManager", "get", "assertNotNull", "getRuntimeEngine", "get", "getAuditService"]}, "focal_class": {"identifier": "PerProcessInstanceRuntimeManager", "superclass": "extends AbstractRuntimeManager", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(PerProcessInstanceRuntimeManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PerProcessInstanceRuntimeManager.class)", "var_name": "logger"}, {"original_string": "private boolean useLocking = Boolean.parseBoolean(System.getProperty(\"org.jbpm.runtime.manager.ppi.lock\", \"true\"));", "modifier": "private", "type": "boolean", "declarator": "useLocking = Boolean.parseBoolean(System.getProperty(\"org.jbpm.runtime.manager.ppi.lock\", \"true\"))", "var_name": "useLocking"}, {"original_string": "private SessionFactory factory;", "modifier": "private", "type": "SessionFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private TaskServiceFactory taskServiceFactory;", "modifier": "private", "type": "TaskServiceFactory", "declarator": "taskServiceFactory", "var_name": "taskServiceFactory"}, {"original_string": "private static ThreadLocal<Map<Object, RuntimeEngine>> local = new ThreadLocal<Map<Object, RuntimeEngine>>();", "modifier": "private static", "type": "ThreadLocal<Map<Object, RuntimeEngine>>", "declarator": "local = new ThreadLocal<Map<Object, RuntimeEngine>>()", "var_name": "local"}, {"original_string": "private Mapper mapper;", "modifier": "private", "type": "Mapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "PerProcessInstanceRuntimeManager", "parameters": "(RuntimeEnvironment environment, SessionFactory factory, TaskServiceFactory taskServiceFactory, String identifier)", "modifiers": "public", "return": "", "signature": " PerProcessInstanceRuntimeManager(RuntimeEnvironment environment, SessionFactory factory, TaskServiceFactory taskServiceFactory, String identifier)", "full_signature": "public  PerProcessInstanceRuntimeManager(RuntimeEnvironment environment, SessionFactory factory, TaskServiceFactory taskServiceFactory, String identifier)", "class_method_signature": "PerProcessInstanceRuntimeManager.PerProcessInstanceRuntimeManager(RuntimeEnvironment environment, SessionFactory factory, TaskServiceFactory taskServiceFactory, String identifier)", "testcase": false, "constructor": true}, {"identifier": "getRuntimeEngine", "parameters": "(Context<?> context)", "modifiers": "@Override public", "return": "RuntimeEngine", "signature": "RuntimeEngine getRuntimeEngine(Context<?> context)", "full_signature": "@Override public RuntimeEngine getRuntimeEngine(Context<?> context)", "class_method_signature": "PerProcessInstanceRuntimeManager.getRuntimeEngine(Context<?> context)", "testcase": false, "constructor": false}, {"identifier": "signalEvent", "parameters": "(String type, Object event)", "modifiers": "@Override public", "return": "void", "signature": "void signalEvent(String type, Object event)", "full_signature": "@Override public void signalEvent(String type, Object event)", "class_method_signature": "PerProcessInstanceRuntimeManager.signalEvent(String type, Object event)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(KieSession ksession, Context<?> context)", "modifiers": "@Override public", "return": "void", "signature": "void validate(KieSession ksession, Context<?> context)", "full_signature": "@Override public void validate(KieSession ksession, Context<?> context)", "class_method_signature": "PerProcessInstanceRuntimeManager.validate(KieSession ksession, Context<?> context)", "testcase": false, "constructor": false}, {"identifier": "disposeRuntimeEngine", "parameters": "(RuntimeEngine runtime)", "modifiers": "@Override public", "return": "void", "signature": "void disposeRuntimeEngine(RuntimeEngine runtime)", "full_signature": "@Override public void disposeRuntimeEngine(RuntimeEngine runtime)", "class_method_signature": "PerProcessInstanceRuntimeManager.disposeRuntimeEngine(RuntimeEngine runtime)", "testcase": false, "constructor": false}, {"identifier": "softDispose", "parameters": "(RuntimeEngine runtimeEngine)", "modifiers": "@Override public", "return": "void", "signature": "void softDispose(RuntimeEngine runtimeEngine)", "full_signature": "@Override public void softDispose(RuntimeEngine runtimeEngine)", "class_method_signature": "PerProcessInstanceRuntimeManager.softDispose(RuntimeEngine runtimeEngine)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "PerProcessInstanceRuntimeManager.close()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Long ksessionId, Long processInstanceId)", "modifiers": "public", "return": "boolean", "signature": "boolean validate(Long ksessionId, Long processInstanceId)", "full_signature": "public boolean validate(Long ksessionId, Long processInstanceId)", "class_method_signature": "PerProcessInstanceRuntimeManager.validate(Long ksessionId, Long processInstanceId)", "testcase": false, "constructor": false}, {"identifier": "getFactory", "parameters": "()", "modifiers": "public", "return": "SessionFactory", "signature": "SessionFactory getFactory()", "full_signature": "public SessionFactory getFactory()", "class_method_signature": "PerProcessInstanceRuntimeManager.getFactory()", "testcase": false, "constructor": false}, {"identifier": "setFactory", "parameters": "(SessionFactory factory)", "modifiers": "public", "return": "void", "signature": "void setFactory(SessionFactory factory)", "full_signature": "public void setFactory(SessionFactory factory)", "class_method_signature": "PerProcessInstanceRuntimeManager.setFactory(SessionFactory factory)", "testcase": false, "constructor": false}, {"identifier": "getTaskServiceFactory", "parameters": "()", "modifiers": "public", "return": "TaskServiceFactory", "signature": "TaskServiceFactory getTaskServiceFactory()", "full_signature": "public TaskServiceFactory getTaskServiceFactory()", "class_method_signature": "PerProcessInstanceRuntimeManager.getTaskServiceFactory()", "testcase": false, "constructor": false}, {"identifier": "setTaskServiceFactory", "parameters": "(TaskServiceFactory taskServiceFactory)", "modifiers": "public", "return": "void", "signature": "void setTaskServiceFactory(TaskServiceFactory taskServiceFactory)", "full_signature": "public void setTaskServiceFactory(TaskServiceFactory taskServiceFactory)", "class_method_signature": "PerProcessInstanceRuntimeManager.setTaskServiceFactory(TaskServiceFactory taskServiceFactory)", "testcase": false, "constructor": false}, {"identifier": "getMapper", "parameters": "()", "modifiers": "public", "return": "Mapper", "signature": "Mapper getMapper()", "full_signature": "public Mapper getMapper()", "class_method_signature": "PerProcessInstanceRuntimeManager.getMapper()", "testcase": false, "constructor": false}, {"identifier": "setMapper", "parameters": "(Mapper mapper)", "modifiers": "public", "return": "void", "signature": "void setMapper(Mapper mapper)", "full_signature": "public void setMapper(Mapper mapper)", "class_method_signature": "PerProcessInstanceRuntimeManager.setMapper(Mapper mapper)", "testcase": false, "constructor": false}, {"identifier": "findLocalRuntime", "parameters": "(Object processInstanceId)", "modifiers": "protected", "return": "RuntimeEngine", "signature": "RuntimeEngine findLocalRuntime(Object processInstanceId)", "full_signature": "protected RuntimeEngine findLocalRuntime(Object processInstanceId)", "class_method_signature": "PerProcessInstanceRuntimeManager.findLocalRuntime(Object processInstanceId)", "testcase": false, "constructor": false}, {"identifier": "saveLocalRuntime", "parameters": "(Object processInstanceId, RuntimeEngine runtime)", "modifiers": "protected", "return": "void", "signature": "void saveLocalRuntime(Object processInstanceId, RuntimeEngine runtime)", "full_signature": "protected void saveLocalRuntime(Object processInstanceId, RuntimeEngine runtime)", "class_method_signature": "PerProcessInstanceRuntimeManager.saveLocalRuntime(Object processInstanceId, RuntimeEngine runtime)", "testcase": false, "constructor": false}, {"identifier": "removeLocalRuntime", "parameters": "(RuntimeEngine runtime)", "modifiers": "protected", "return": "void", "signature": "void removeLocalRuntime(RuntimeEngine runtime)", "full_signature": "protected void removeLocalRuntime(RuntimeEngine runtime)", "class_method_signature": "PerProcessInstanceRuntimeManager.removeLocalRuntime(RuntimeEngine runtime)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "PerProcessInstanceRuntimeManager.init()", "testcase": false, "constructor": false}, {"identifier": "activate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void activate()", "full_signature": "@Override public void activate()", "class_method_signature": "PerProcessInstanceRuntimeManager.activate()", "testcase": false, "constructor": false}, {"identifier": "deactivate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void deactivate()", "full_signature": "@Override public void deactivate()", "class_method_signature": "PerProcessInstanceRuntimeManager.deactivate()", "testcase": false, "constructor": false}, {"identifier": "isUseLocking", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isUseLocking()", "full_signature": "@Override protected boolean isUseLocking()", "class_method_signature": "PerProcessInstanceRuntimeManager.isUseLocking()", "testcase": false, "constructor": false}], "file": "jbpm-runtime-manager/src/main/java/org/jbpm/runtime/manager/impl/PerProcessInstanceRuntimeManager.java"}, "focal_method": {"identifier": "getRuntimeEngine", "parameters": "(Context<?> context)", "modifiers": "@Override public", "return": "RuntimeEngine", "body": "@Override\n    public RuntimeEngine getRuntimeEngine(Context<?> context) {\n    \tif (isClosed()) {\n    \t\tthrow new IllegalStateException(\"Runtime manager \" + identifier + \" is already closed\");\n    \t}\n    \t\n    \tRuntimeEngine runtime = null;\n    \tObject contextId = context.getContextId();\n    \t\n    \tif (!(context instanceof ProcessInstanceIdContext || context instanceof CorrelationKeyContext)) {\n    \t\tlogger.warn(\"ProcessInstanceIdContext or CorrelationKeyContext shall be used when interacting with PerProcessInstance runtime manager\");\n    \t}\n    \t\n    \tif (engineInitEager) {\n\t\t\tKieSession ksession = null;\n\t\t\tLong ksessionId = null;\n\t\t\tif (contextId == null || context instanceof EmptyContext) {\n\t\t\t\tksession = factory.newKieSession();\n\t\t\t\tksessionId = ksession.getIdentifier();\n\t\t\t} else {\n\t\t\t\tRuntimeEngine localRuntime = findLocalRuntime(contextId);\n\t\t\t\tif (localRuntime != null) {\n\t\t\t\t\treturn localRuntime;\n\t\t\t\t}\n\t\t\t\tksessionId = mapper.findMapping(context, this.identifier);\n\t\t\t\tif (ksessionId == null) {\n\t\t\t\t\tthrow new SessionNotFoundException(\"No session found for context \" + context.getContextId());\n\t\t\t\t}\n\t\t\t\tksession = factory.findKieSessionById(ksessionId);\n\t\t\t}\n\t\t\tInternalTaskService internalTaskService = newTaskService(taskServiceFactory);\t\t\t\n\t\t\truntime = new RuntimeEngineImpl(ksession, internalTaskService);\n\t\t\t((RuntimeEngineImpl) runtime).setManager(this);\n\t\t\t((RuntimeEngineImpl) runtime).setContext(context);\n\t\t\tconfigureRuntimeOnTaskService(internalTaskService, runtime);\n\t\t\tregisterDisposeCallback(runtime, new DisposeSessionTransactionSynchronization(this, runtime), ksession.getEnvironment());\n\t\t\tregisterItems(runtime);\n\t\t\tattachManager(runtime);\n\t\t\tksession.addEventListener(new MaintainMappingListener(ksessionId, runtime, this.identifier));\n    \t} else {\n    \t\tRuntimeEngine localRuntime = findLocalRuntime(contextId);\n\t\t\tif (localRuntime != null) {\n\t\t\t\treturn localRuntime;\n\t\t\t}\n    \t\t// lazy initialization of ksession and task service\n\t    \t\n\t    \truntime = new RuntimeEngineImpl(context, new PerProcessInstanceInitializer());\n\t        ((RuntimeEngineImpl) runtime).setManager(this);\n            \t        \n    \t}\n    \tcreateLockOnGetEngine(context, runtime);\n        saveLocalRuntime(contextId, runtime);        \n        \n        return runtime;\n    }", "signature": "RuntimeEngine getRuntimeEngine(Context<?> context)", "full_signature": "@Override public RuntimeEngine getRuntimeEngine(Context<?> context)", "class_method_signature": "PerProcessInstanceRuntimeManager.getRuntimeEngine(Context<?> context)", "testcase": false, "constructor": false, "invocations": ["isClosed", "getContextId", "warn", "newKieSession", "getIdentifier", "findLocalRuntime", "findMapping", "getContextId", "findKieSessionById", "newTaskService", "setManager", "setContext", "configureRuntimeOnTaskService", "registerDisposeCallback", "getEnvironment", "registerItems", "attachManager", "addEventListener", "findLocalRuntime", "setManager", "createLockOnGetEngine", "saveLocalRuntime"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}