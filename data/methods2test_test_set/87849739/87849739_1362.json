{"test_class": {"identifier": "PolicyIdTest", "superclass": "", "interfaces": "", "fields": [], "file": "model/policies/src/test/java/org/eclipse/ditto/model/policies/PolicyIdTest.java"}, "test_case": {"identifier": "policyIdOfPolicyIdReturnsSameInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void policyIdOfPolicyIdReturnsSameInstance() {\n        final PolicyId policyIdOne = PolicyId.of(\"namespace\", \"name\");\n        final PolicyId policyIdTwo = PolicyId.of(policyIdOne);\n\n        assertThat((CharSequence) policyIdOne).isSameAs(policyIdTwo);\n    }", "signature": "void policyIdOfPolicyIdReturnsSameInstance()", "full_signature": "@Test public void policyIdOfPolicyIdReturnsSameInstance()", "class_method_signature": "PolicyIdTest.policyIdOfPolicyIdReturnsSameInstance()", "testcase": true, "constructor": false, "invocations": ["of", "of", "isSameAs", "assertThat"]}, "focal_class": {"identifier": "PolicyId", "superclass": "", "interfaces": "implements NamespacedEntityId", "fields": [{"original_string": "private static final PolicyId DUMMY_ID = PolicyId.of(DefaultNamespacedEntityId.dummy());", "modifier": "private static final", "type": "PolicyId", "declarator": "DUMMY_ID = PolicyId.of(DefaultNamespacedEntityId.dummy())", "var_name": "DUMMY_ID"}, {"original_string": "private final NamespacedEntityId entityId;", "modifier": "private final", "type": "NamespacedEntityId", "declarator": "entityId", "var_name": "entityId"}], "methods": [{"identifier": "PolicyId", "parameters": "(final NamespacedEntityId entityId)", "modifiers": "private", "return": "", "signature": " PolicyId(final NamespacedEntityId entityId)", "full_signature": "private  PolicyId(final NamespacedEntityId entityId)", "class_method_signature": "PolicyId.PolicyId(final NamespacedEntityId entityId)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(final CharSequence policyId)", "modifiers": "public static", "return": "PolicyId", "signature": "PolicyId of(final CharSequence policyId)", "full_signature": "public static PolicyId of(final CharSequence policyId)", "class_method_signature": "PolicyId.of(final CharSequence policyId)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final PolicyId policyId)", "modifiers": "public static", "return": "PolicyId", "signature": "PolicyId of(final PolicyId policyId)", "full_signature": "public static PolicyId of(final PolicyId policyId)", "class_method_signature": "PolicyId.of(final PolicyId policyId)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final String namespace, final String policyName)", "modifiers": "public static", "return": "PolicyId", "signature": "PolicyId of(final String namespace, final String policyName)", "full_signature": "public static PolicyId of(final String namespace, final String policyName)", "class_method_signature": "PolicyId.of(final String namespace, final String policyName)", "testcase": false, "constructor": false}, {"identifier": "inNamespaceWithRandomName", "parameters": "(final String namespace)", "modifiers": "public static", "return": "PolicyId", "signature": "PolicyId inNamespaceWithRandomName(final String namespace)", "full_signature": "public static PolicyId inNamespaceWithRandomName(final String namespace)", "class_method_signature": "PolicyId.inNamespaceWithRandomName(final String namespace)", "testcase": false, "constructor": false}, {"identifier": "wrapInPolicyIdInvalidException", "parameters": "(final Supplier<T> supplier)", "modifiers": "private static", "return": "T", "signature": "T wrapInPolicyIdInvalidException(final Supplier<T> supplier)", "full_signature": "private static T wrapInPolicyIdInvalidException(final Supplier<T> supplier)", "class_method_signature": "PolicyId.wrapInPolicyIdInvalidException(final Supplier<T> supplier)", "testcase": false, "constructor": false}, {"identifier": "dummy", "parameters": "()", "modifiers": "public static", "return": "PolicyId", "signature": "PolicyId dummy()", "full_signature": "public static PolicyId dummy()", "class_method_signature": "PolicyId.dummy()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "PolicyId.getName()", "testcase": false, "constructor": false}, {"identifier": "getNamespace", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getNamespace()", "full_signature": "@Override public String getNamespace()", "class_method_signature": "PolicyId.getNamespace()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "PolicyId.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PolicyId.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PolicyId.toString()", "testcase": false, "constructor": false}, {"identifier": "isDummy", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDummy()", "full_signature": "@Override public boolean isDummy()", "class_method_signature": "PolicyId.isDummy()", "testcase": false, "constructor": false}], "file": "model/policies/src/main/java/org/eclipse/ditto/model/policies/PolicyId.java"}, "focal_method": {"identifier": "of", "parameters": "(final CharSequence policyId)", "modifiers": "public static", "return": "PolicyId", "body": "public static PolicyId of(final CharSequence policyId) {\n\n        if (policyId instanceof PolicyId) {\n            return (PolicyId) policyId;\n        }\n\n        return wrapInPolicyIdInvalidException(() -> new PolicyId(DefaultNamespacedEntityId.of(policyId)));\n    }", "signature": "PolicyId of(final CharSequence policyId)", "full_signature": "public static PolicyId of(final CharSequence policyId)", "class_method_signature": "PolicyId.of(final CharSequence policyId)", "testcase": false, "constructor": false, "invocations": ["wrapInPolicyIdInvalidException", "of"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}