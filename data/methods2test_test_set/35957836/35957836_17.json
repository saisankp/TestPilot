{"test_class": {"identifier": "StatisticsServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String ORGANIZATION1 = \"org1\", ORGANIZATION2 = \"org2\", ORGANIZATION3 = \"org3\";", "modifier": "private final", "type": "String", "declarator": "ORGANIZATION1 = \"org1\"", "var_name": "ORGANIZATION1"}], "file": "catwatch-backend/src/test/java/org/zalando/catwatch/backend/service/StatisticsServiceTest.java"}, "test_case": {"identifier": "testAggregateHistoricalStatistics", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAggregateHistoricalStatistics(){\n\t\t\n\t\t//given\n\t\tList<List<Statistics>> history = generateStatisticHistory();\n\t\t\n\t\t//when\n\t\tCollection<Statistics> aggregatedHistory = StatisticsService.aggregateHistoricalStatistics(history);\n\t\t\n\t\t//then\n\t\tAssert.assertNotNull(aggregatedHistory);\n\t\tAssert.assertEquals(3, aggregatedHistory.size());\n\t\t\n\t\tIterator<Statistics> iter = aggregatedHistory.iterator();\n\t\t\n\t\t//check the first aggregated record\n\t\tcheckStatisticsRecord(history, 0, iter.next());\n\t\t\n\t\t//check the second aggregated record\n\t\tcheckStatisticsRecord(history, 1, iter.next());\n\t\t\n\t\t//check the second aggregated record\n\t\tcheckStatisticsRecord(history, 2, iter.next());\n\t}", "signature": "void testAggregateHistoricalStatistics()", "full_signature": "@Test public void testAggregateHistoricalStatistics()", "class_method_signature": "StatisticsServiceTest.testAggregateHistoricalStatistics()", "testcase": true, "constructor": false, "invocations": ["generateStatisticHistory", "aggregateHistoricalStatistics", "assertNotNull", "assertEquals", "size", "iterator", "checkStatisticsRecord", "next", "checkStatisticsRecord", "next", "checkStatisticsRecord", "next"]}, "focal_class": {"identifier": "StatisticsService", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getStatistics", "parameters": "(StatisticsRepository repository, Collection<String> organizations, String startDate, String endDate)", "modifiers": "public static", "return": "Collection<Statistics>", "signature": "Collection<Statistics> getStatistics(StatisticsRepository repository, Collection<String> organizations, String startDate, String endDate)", "full_signature": "public static Collection<Statistics> getStatistics(StatisticsRepository repository, Collection<String> organizations, String startDate, String endDate)", "class_method_signature": "StatisticsService.getStatistics(StatisticsRepository repository, Collection<String> organizations, String startDate, String endDate)", "testcase": false, "constructor": false}, {"identifier": "getStatisticsByDate", "parameters": "(StatisticsRepository repository, Collection<String> orgs, String startDate, String endDate)", "modifiers": "private static", "return": "Collection<Statistics>", "signature": "Collection<Statistics> getStatisticsByDate(StatisticsRepository repository, Collection<String> orgs, String startDate, String endDate)", "full_signature": "private static Collection<Statistics> getStatisticsByDate(StatisticsRepository repository, Collection<String> orgs, String startDate, String endDate)", "class_method_signature": "StatisticsService.getStatisticsByDate(StatisticsRepository repository, Collection<String> orgs, String startDate, String endDate)", "testcase": false, "constructor": false}, {"identifier": "collectStatistics", "parameters": "(StatisticsRepository repository, Collection<String> organizations, Date start, Date end)", "modifiers": "private static", "return": "List<List<Statistics>>", "signature": "List<List<Statistics>> collectStatistics(StatisticsRepository repository, Collection<String> organizations, Date start, Date end)", "full_signature": "private static List<List<Statistics>> collectStatistics(StatisticsRepository repository, Collection<String> organizations, Date start, Date end)", "class_method_signature": "StatisticsService.collectStatistics(StatisticsRepository repository, Collection<String> organizations, Date start, Date end)", "testcase": false, "constructor": false}, {"identifier": "aggregateStatistics", "parameters": "(Collection<Statistics> statistics)", "modifiers": "public static", "return": "Statistics", "signature": "Statistics aggregateStatistics(Collection<Statistics> statistics)", "full_signature": "public static Statistics aggregateStatistics(Collection<Statistics> statistics)", "class_method_signature": "StatisticsService.aggregateStatistics(Collection<Statistics> statistics)", "testcase": false, "constructor": false}, {"identifier": "aggregateHistoricalStatistics", "parameters": "(List<List<Statistics>> statisticsLists)", "modifiers": "public static", "return": "Collection<Statistics>", "signature": "Collection<Statistics> aggregateHistoricalStatistics(List<List<Statistics>> statisticsLists)", "full_signature": "public static Collection<Statistics> aggregateHistoricalStatistics(List<List<Statistics>> statisticsLists)", "class_method_signature": "StatisticsService.aggregateHistoricalStatistics(List<List<Statistics>> statisticsLists)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Integer sum, Integer value)", "modifiers": "private static", "return": "Integer", "signature": "Integer add(Integer sum, Integer value)", "full_signature": "private static Integer add(Integer sum, Integer value)", "class_method_signature": "StatisticsService.add(Integer sum, Integer value)", "testcase": false, "constructor": false}], "file": "catwatch-backend/src/main/java/org/zalando/catwatch/backend/service/StatisticsService.java"}, "focal_method": {"identifier": "aggregateHistoricalStatistics", "parameters": "(List<List<Statistics>> statisticsLists)", "modifiers": "public static", "return": "Collection<Statistics>", "body": "public  static Collection<Statistics> aggregateHistoricalStatistics(List<List<Statistics>> statisticsLists){\n\t\t\n\t\tif(statisticsLists.isEmpty()) return Collections.emptyList();\n\t\t\n\t\tif(statisticsLists.size()==1){\n\t\t\treturn statisticsLists.iterator().next();\n\t\t}\n\t\t\n\t\t//TODO check if the lists have the same size\n\t\t\n\t\t//map statistics of the different organizations\n\t\tList<Statistics> aggregatedStatistics = new ArrayList<>();\n\t\tint numberOfRecords = statisticsLists.get(0).size(); //assuming that all organizations have the same amount of records\n\t\t\n\t\tList<Statistics> unaggregatedStatistics;\n\t\t\n\t\tfor (int i=0; i<numberOfRecords; i++){\n\t\t\tunaggregatedStatistics  = new ArrayList<>();\n\t\t\tfor (List<Statistics> orgStats : statisticsLists){\n\t\t\t\t\n\t\t\t\tif(orgStats.isEmpty()) continue;\n\t\t\t\t\n\t\t\t\t//FIXME figure out how to map the records\n\t\t\t\t//for now just use the order\n\t\t\t\tunaggregatedStatistics.add(orgStats.get(i));\n\t\t\t}\n\t\t\t\n\t\t\tStatistics aggregatedRecord = aggregateStatistics(unaggregatedStatistics);\n\t\t\t\n\t\t\taggregatedStatistics.add(aggregatedRecord);\n\t\t}\n\n\t\treturn aggregatedStatistics;\n\t}", "signature": "Collection<Statistics> aggregateHistoricalStatistics(List<List<Statistics>> statisticsLists)", "full_signature": "public static Collection<Statistics> aggregateHistoricalStatistics(List<List<Statistics>> statisticsLists)", "class_method_signature": "StatisticsService.aggregateHistoricalStatistics(List<List<Statistics>> statisticsLists)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "emptyList", "size", "next", "iterator", "size", "get", "isEmpty", "add", "get", "aggregateStatistics", "add"]}, "repository": {"repo_id": 35957836, "url": "https://github.com/zalando-incubator/catwatch", "language": "Java", "is_fork": false, "fork_count": 20, "stargazer_count": 55, "size": 1999, "license": "licensed"}}