{"test_class": {"identifier": "TrustAnchorValidationServiceTest", "superclass": "extends GenericStorageTest", "interfaces": "", "fields": [{"original_string": "private static final String DUMMY_RSYNC_URI = \"rsync://localhost/non-existent/ta/ripe-ncc-ta.cer\";", "modifier": "private static final", "type": "String", "declarator": "DUMMY_RSYNC_URI = \"rsync://localhost/non-existent/ta/ripe-ncc-ta.cer\"", "var_name": "DUMMY_RSYNC_URI"}, {"original_string": "@Autowired\n    private TrustAnchors trustAnchors;", "modifier": "@Autowired\n    private", "type": "TrustAnchors", "declarator": "trustAnchors", "var_name": "trustAnchors"}, {"original_string": "@Autowired\n    private TrustAnchorValidationService subject;", "modifier": "@Autowired\n    private", "type": "TrustAnchorValidationService", "declarator": "subject", "var_name": "subject"}, {"original_string": "@Autowired\n    private ValidationRuns validationRuns;", "modifier": "@Autowired\n    private", "type": "ValidationRuns", "declarator": "validationRuns", "var_name": "validationRuns"}, {"original_string": "@Autowired\n    private TrustAnchorRetrievalService trustAnchorRetrievalService;", "modifier": "@Autowired\n    private", "type": "TrustAnchorRetrievalService", "declarator": "trustAnchorRetrievalService", "var_name": "trustAnchorRetrievalService"}], "file": "rpki-validator/src/test/java/net/ripe/rpki/validator3/domain/validation/TrustAnchorValidationServiceTest.java"}, "test_case": {"identifier": "test_empty_file", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_empty_file() throws IOException {\n        TrustAnchor ta = createRipeNccTrustAnchor();\n        wtx0(tx -> trustAnchors.add(tx, ta));\n\n        ta.setLocations(ImmutableList.of(new ClassPathResource(\"empty-file.cer\").getURI().toString()));\n        wtx0(tx -> trustAnchors.update(tx, ta));\n        subject.validate(ta.key().asLong());\n\n        X509ResourceCertificate certificate = rtx(tx -> trustAnchors.get(tx, ta.key()).get().getCertificate());\n        assertThat(certificate).isNull();\n\n        Optional<TrustAnchorValidationRun> validationRun = rtx(tx -> validationRuns.findLatestCompletedForTrustAnchor(tx, ta));\n        assertThat(validationRun).isPresent();\n\n        List<ValidationCheck> validationChecks = validationRun.get().getValidationChecks();\n        assertThat(validationChecks).hasSize(1);\n        assertThat(validationChecks.get(0).getKey()).isEqualTo(ErrorCodes.REPOSITORY_OBJECT_MINIMUM_SIZE);\n    }", "signature": "void test_empty_file()", "full_signature": "@Test public void test_empty_file()", "class_method_signature": "TrustAnchorValidationServiceTest.test_empty_file()", "testcase": true, "constructor": false, "invocations": ["createRipeNccTrustAnchor", "wtx0", "add", "setLocations", "of", "toString", "getURI", "wtx0", "update", "validate", "asLong", "key", "rtx", "getCertificate", "get", "get", "key", "isNull", "assertThat", "rtx", "findLatestCompletedForTrustAnchor", "isPresent", "assertThat", "getValidationChecks", "get", "hasSize", "assertThat", "isEqualTo", "assertThat", "getKey", "get"]}, "focal_class": {"identifier": "TrustAnchorValidationService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TrustAnchors trustAnchors;", "modifier": "private final", "type": "TrustAnchors", "declarator": "trustAnchors", "var_name": "trustAnchors"}, {"original_string": "private final RpkiRepositories rpkiRepositories;", "modifier": "private final", "type": "RpkiRepositories", "declarator": "rpkiRepositories", "var_name": "rpkiRepositories"}, {"original_string": "private final ValidationRuns validationRuns;", "modifier": "private final", "type": "ValidationRuns", "declarator": "validationRuns", "var_name": "validationRuns"}, {"original_string": "private final ValidationScheduler validationScheduler;", "modifier": "private final", "type": "ValidationScheduler", "declarator": "validationScheduler", "var_name": "validationScheduler"}, {"original_string": "private final RpkiRepositoryValidationService repositoryValidationService;", "modifier": "private final", "type": "RpkiRepositoryValidationService", "declarator": "repositoryValidationService", "var_name": "repositoryValidationService"}, {"original_string": "private final Storage storage;", "modifier": "private final", "type": "Storage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final TrustAnchorMetricsService taMetricsService;", "modifier": "private final", "type": "TrustAnchorMetricsService", "declarator": "taMetricsService", "var_name": "taMetricsService"}, {"original_string": "private final TrustAnchorRetrievalService trustAnchorRetrievalService;", "modifier": "private final", "type": "TrustAnchorRetrievalService", "declarator": "trustAnchorRetrievalService", "var_name": "trustAnchorRetrievalService"}, {"original_string": "private Set<Key> validatedAtLeastOnce = Collections.newSetFromMap(new ConcurrentHashMap<>());", "modifier": "private", "type": "Set<Key>", "declarator": "validatedAtLeastOnce = Collections.newSetFromMap(new ConcurrentHashMap<>())", "var_name": "validatedAtLeastOnce"}], "methods": [{"identifier": "TrustAnchorValidationService", "parameters": "(\n        TrustAnchors trustAnchors,\n        RpkiRepositories rpkiRepositories,\n        ValidationRuns validationRuns,\n        ValidationScheduler validationScheduler,\n        RpkiRepositoryValidationService repositoryValidationService,\n        Storage storage,\n        TrustAnchorMetricsService trustAnchorMetricsService,\n        TrustAnchorRetrievalService trustAnchorRetrievalService)", "modifiers": "@Autowired public", "return": "", "signature": " TrustAnchorValidationService(\n        TrustAnchors trustAnchors,\n        RpkiRepositories rpkiRepositories,\n        ValidationRuns validationRuns,\n        ValidationScheduler validationScheduler,\n        RpkiRepositoryValidationService repositoryValidationService,\n        Storage storage,\n        TrustAnchorMetricsService trustAnchorMetricsService,\n        TrustAnchorRetrievalService trustAnchorRetrievalService)", "full_signature": "@Autowired public  TrustAnchorValidationService(\n        TrustAnchors trustAnchors,\n        RpkiRepositories rpkiRepositories,\n        ValidationRuns validationRuns,\n        ValidationScheduler validationScheduler,\n        RpkiRepositoryValidationService repositoryValidationService,\n        Storage storage,\n        TrustAnchorMetricsService trustAnchorMetricsService,\n        TrustAnchorRetrievalService trustAnchorRetrievalService)", "class_method_signature": "TrustAnchorValidationService.TrustAnchorValidationService(\n        TrustAnchors trustAnchors,\n        RpkiRepositories rpkiRepositories,\n        ValidationRuns validationRuns,\n        ValidationScheduler validationScheduler,\n        RpkiRepositoryValidationService repositoryValidationService,\n        Storage storage,\n        TrustAnchorMetricsService trustAnchorMetricsService,\n        TrustAnchorRetrievalService trustAnchorRetrievalService)", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(long trustAnchorId)", "modifiers": "public", "return": "void", "signature": "void validate(long trustAnchorId)", "full_signature": "public void validate(long trustAnchorId)", "class_method_signature": "TrustAnchorValidationService.validate(long trustAnchorId)", "testcase": false, "constructor": false}, {"identifier": "fetchPreferredTrustAnchorCertificate", "parameters": "(TrustAnchor trustAnchor, ValidationResult validationResult)", "modifiers": "public", "return": "Optional<Tuple2<URI, byte[]>>", "signature": "Optional<Tuple2<URI, byte[]>> fetchPreferredTrustAnchorCertificate(TrustAnchor trustAnchor, ValidationResult validationResult)", "full_signature": "public Optional<Tuple2<URI, byte[]>> fetchPreferredTrustAnchorCertificate(TrustAnchor trustAnchor, ValidationResult validationResult)", "class_method_signature": "TrustAnchorValidationService.fetchPreferredTrustAnchorCertificate(TrustAnchor trustAnchor, ValidationResult validationResult)", "testcase": false, "constructor": false}, {"identifier": "readTrustAnchorFromLocation", "parameters": "(byte[] trustAnchorCertificate, TrustAnchor trustAnchor, URI trustAnchorCertificateURI, ValidationResult validationResult)", "modifiers": "private", "return": "boolean", "signature": "boolean readTrustAnchorFromLocation(byte[] trustAnchorCertificate, TrustAnchor trustAnchor, URI trustAnchorCertificateURI, ValidationResult validationResult)", "full_signature": "private boolean readTrustAnchorFromLocation(byte[] trustAnchorCertificate, TrustAnchor trustAnchor, URI trustAnchorCertificateURI, ValidationResult validationResult)", "class_method_signature": "TrustAnchorValidationService.readTrustAnchorFromLocation(byte[] trustAnchorCertificate, TrustAnchor trustAnchor, URI trustAnchorCertificateURI, ValidationResult validationResult)", "testcase": false, "constructor": false}, {"identifier": "parseCertificate", "parameters": "(TrustAnchor trustAnchor, byte[] certificateData, URI trustAnchorCertificateURI, ValidationResult validationResult)", "modifiers": "private", "return": "X509ResourceCertificate", "signature": "X509ResourceCertificate parseCertificate(TrustAnchor trustAnchor, byte[] certificateData, URI trustAnchorCertificateURI, ValidationResult validationResult)", "full_signature": "private X509ResourceCertificate parseCertificate(TrustAnchor trustAnchor, byte[] certificateData, URI trustAnchorCertificateURI, ValidationResult validationResult)", "class_method_signature": "TrustAnchorValidationService.parseCertificate(TrustAnchor trustAnchor, byte[] certificateData, URI trustAnchorCertificateURI, ValidationResult validationResult)", "testcase": false, "constructor": false}], "file": "rpki-validator/src/main/java/net/ripe/rpki/validator3/domain/validation/TrustAnchorValidationService.java"}, "focal_method": {"identifier": "validate", "parameters": "(long trustAnchorId)", "modifiers": "public", "return": "void", "body": "public void validate(long trustAnchorId) {\n        Optional<TrustAnchor> maybeTrustAnchor = storage.readTx(tx -> trustAnchors.get(tx, Key.of(trustAnchorId)));\n        if (!maybeTrustAnchor.isPresent()) {\n            log.error(\"Trust anchor {} doesn't exist.\", trustAnchorId);\n            return;\n        }\n\n        TrustAnchor trustAnchor = maybeTrustAnchor.get();\n        log.info(\"trust anchor {} located at {} with subject public key info {}\", trustAnchor.getName(), trustAnchor.getLocations(), trustAnchor.getSubjectPublicKeyInfo());\n\n        TrustAnchorValidationRun validationRun = storage.readTx(tx -> {\n            final Ref<TrustAnchor> trustAnchorRef = trustAnchors.makeRef(tx, Key.of(trustAnchorId));\n            return new TrustAnchorValidationRun(trustAnchorRef, trustAnchor.getLocations().get(0));\n        });\n\n        final ValidationLocation trustAnchorValidationLocation = new ValidationLocation(validationRun.getTrustAnchorCertificateURI());\n        ValidationResult validationResult = newValidationResult(trustAnchorValidationLocation);\n\n        boolean updatedTrustAnchor = false;\n        try {\n            final Optional<Tuple2<URI, byte[]>> maybeTrustAnchorCertificate = fetchPreferredTrustAnchorCertificate(trustAnchor, validationResult);\n\n            if (maybeTrustAnchorCertificate.isPresent()) {\n                final Tuple2<URI, byte[]> res = maybeTrustAnchorCertificate.get();\n                updatedTrustAnchor = readTrustAnchorFromLocation(res.v2, trustAnchor, res.v1, validationResult);\n            } else {\n                validationResult.error(\n                        ErrorCodes.TRUST_ANCHOR_FETCH,\n                        \"any location\",\n                        String.format(\"None of the locations (%s) could be loaded.\", Joiner.on(\", \").join(trustAnchor.getLocations())));\n                validationRun.setFailed();\n            }\n\n            if (validationResult.hasFailures()) {\n                log.warn(\"Validation result for the TA {} has failures: {}\", trustAnchor.getName(),\n                        validationResult.getFailuresForAllLocations());\n            }\n\n            if (trustAnchor.getRsyncPrefetchUri() != null) {\n                storage.writeTx0(tx -> {\n                    final Ref<TrustAnchor> trustAnchorRef = trustAnchors.makeRef(tx, trustAnchor.key());\n                    rpkiRepositories.register(tx, trustAnchorRef,\n                            trustAnchor.getRsyncPrefetchUri(), RpkiRepository.Type.RSYNC_PREFETCH);\n                });\n            }\n\n            validationRun.completeWith(validationResult);\n            if (!validatedAtLeastOnce.contains(trustAnchor.getId()) || updatedTrustAnchor) {\n                if (updatedTrustAnchor) {\n                    storage.writeTx0(tx -> trustAnchors.update(tx, trustAnchor));\n                }\n                final Set<TrustAnchor> affectedTrustAnchors = Sets.newHashSet(trustAnchor);\n                if (trustAnchor.getRsyncPrefetchUri() != null) {\n                    storage.readTx(tx ->\n                            rpkiRepositories.findByURI(tx, trustAnchor.getRsyncPrefetchUri()))\n                            .ifPresent(r ->\n                                    affectedTrustAnchors.addAll(repositoryValidationService.prefetchRepository(r)));\n                }\n                affectedTrustAnchors.forEach(validationScheduler::triggerCertificateTreeValidation);\n            }\n        } catch (CommandExecutionException | IOException e) {\n            log.error(\"validation run for trust anchor {} failed\", trustAnchor, e);\n            validationRun.addCheck(new ValidationCheck(validationRun.getTrustAnchorCertificateURI(), ValidationCheck.Status.ERROR, ErrorCodes.UNHANDLED_EXCEPTION, e.toString()));\n            validationRun.setFailed();\n        } finally {\n            validatedAtLeastOnce.add(trustAnchor.getId());\n            storage.writeTx0(tx -> validationRuns.add(tx, validationRun));\n        }\n    }", "signature": "void validate(long trustAnchorId)", "full_signature": "public void validate(long trustAnchorId)", "class_method_signature": "TrustAnchorValidationService.validate(long trustAnchorId)", "testcase": false, "constructor": false, "invocations": ["readTx", "get", "of", "isPresent", "error", "get", "info", "getName", "getLocations", "getSubjectPublicKeyInfo", "readTx", "makeRef", "of", "get", "getLocations", "getTrustAnchorCertificateURI", "newValidationResult", "fetchPreferredTrustAnchorCertificate", "isPresent", "get", "readTrustAnchorFromLocation", "error", "format", "join", "on", "getLocations", "setFailed", "hasFailures", "warn", "getName", "getFailuresForAllLocations", "getRsyncPrefetchUri", "writeTx0", "makeRef", "key", "register", "getRsyncPrefetchUri", "completeWith", "contains", "getId", "writeTx0", "update", "newHashSet", "getRsyncPrefetchUri", "ifPresent", "readTx", "findByURI", "getRsyncPrefetchUri", "addAll", "prefetchRepository", "forEach", "error", "addCheck", "getTrustAnchorCertificateURI", "toString", "setFailed", "add", "getId", "writeTx0", "add"]}, "repository": {"repo_id": 104217624, "url": "https://github.com/RIPE-NCC/rpki-validator-3", "stars": 32, "created": "9/20/2017 1:15:05 PM +00:00", "updates": "2020-01-27T10:48:38+00:00", "fork": "False", "license": "licensed"}}