{"test_class": {"identifier": "PubchemFingerprinterTest", "superclass": "extends AbstractFixedLengthFingerprinterTest", "interfaces": "", "fields": [{"original_string": "SmilesParser parser;", "modifier": "", "type": "SmilesParser", "declarator": "parser", "var_name": "parser"}], "file": "descriptor/fingerprint/src/test/java/org/openscience/cdk/fingerprint/PubchemFingerprinterTest.java"}, "test_case": {"identifier": "testBug934819", "parameters": "()", "modifiers": "@Test @Override public", "return": "void", "body": "@Test\n    @Override\n    public void testBug934819() throws Exception {\n\n        IAtomContainer subStructure = bug934819_1();\n        IAtomContainer superStructure = bug934819_2();\n\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(superStructure);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(subStructure);\n        addImplicitHydrogens(superStructure);\n        addImplicitHydrogens(subStructure);\n\n        IFingerprinter fpr = new PubchemFingerprinter(SilentChemObjectBuilder.getInstance());\n        IBitFingerprint superBits = fpr.getBitFingerprint(superStructure);\n        IBitFingerprint subBits = fpr.getBitFingerprint(subStructure);\n\n        org.hamcrest.MatcherAssert.assertThat(\n                subBits.asBitSet(),\n                is(asBitSet(9, 10, 14, 18, 19, 33, 143, 146, 255, 256, 283, 284, 285, 293, 301, 332, 344, 349, 351,\n                        353, 355, 368, 370, 371, 376, 383, 384, 395, 401, 412, 416, 421, 423, 434, 441, 446, 449, 454,\n                        455, 464, 470, 471, 480, 489, 490, 500, 502, 507, 513, 514, 516, 520, 524, 531, 532, 545, 546,\n                        549, 552, 556, 558, 564, 570, 586, 592, 599, 600, 607, 633, 658, 665)));\n        org.hamcrest.MatcherAssert.assertThat(\n                superBits.asBitSet(),\n                is(asBitSet(9, 10, 11, 14, 18, 19, 33, 34, 143, 146, 150, 153, 255, 256, 257, 258, 283, 284, 285, 293,\n                        301, 332, 344, 349, 351, 353, 355, 368, 370, 371, 374, 376, 383, 384, 395, 401, 412, 416, 417,\n                        421, 423, 427, 434, 441, 446, 449, 454, 455, 460, 464, 470, 471, 479, 480, 489, 490, 500, 502,\n                        507, 513, 514, 516, 520, 524, 531, 532, 545, 546, 549, 552, 556, 558, 564, 570, 578, 582, 584,\n                        586, 592, 595, 600, 603, 607, 608, 633, 634, 640, 658, 660, 664, 665, 668, 677, 678, 683)));\n    }", "signature": "void testBug934819()", "full_signature": "@Test @Override public void testBug934819()", "class_method_signature": "PubchemFingerprinterTest.testBug934819()", "testcase": true, "constructor": false, "invocations": ["bug934819_1", "bug934819_2", "percieveAtomTypesAndConfigureAtoms", "percieveAtomTypesAndConfigureAtoms", "addImplicitHydrogens", "addImplicitHydrogens", "getInstance", "getBitFingerprint", "getBitFingerprint", "assertThat", "asBitSet", "is", "asBitSet", "assertThat", "asBitSet", "is", "asBitSet"]}, "focal_class": {"identifier": "PubchemFingerprinter", "superclass": "extends AbstractFingerprinter", "interfaces": "implements IFingerprinter", "fields": [{"original_string": "public static final int FP_SIZE = 881;", "modifier": "public static final", "type": "int", "declarator": "FP_SIZE = 881", "var_name": "FP_SIZE"}, {"original_string": "private byte[]          m_bits;", "modifier": "private", "type": "byte[]", "declarator": "m_bits", "var_name": "m_bits"}, {"original_string": "private Map<String,SmartsPattern> cache = new HashMap<>();", "modifier": "private", "type": "Map<String,SmartsPattern>", "declarator": "cache = new HashMap<>()", "var_name": "cache"}, {"original_string": "private static String BASE64_LUT = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"abcdefghijklmnopqrstuvwxyz0123456789+/=\";", "modifier": "private static", "type": "String", "declarator": "BASE64_LUT = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"abcdefghijklmnopqrstuvwxyz0123456789+/=\"", "var_name": "BASE64_LUT"}, {"original_string": "static final int BITCOUNT[] = {0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4,\n            3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,\n            1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4,\n            3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4,\n            2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5,\n            4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,\n            3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6,\n            5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8};", "modifier": "static final", "type": "int", "declarator": "BITCOUNT[] = {0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4,\n            3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,\n            1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4,\n            3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4,\n            2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5,\n            4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,\n            3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6,\n            5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8}", "var_name": "BITCOUNT"}, {"original_string": "static final int MASK[]     = {0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01};", "modifier": "static final", "type": "int", "declarator": "MASK[]     = {0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01}", "var_name": "MASK"}], "methods": [{"identifier": "PubchemFingerprinter", "parameters": "(IChemObjectBuilder builder)", "modifiers": "public", "return": "", "signature": " PubchemFingerprinter(IChemObjectBuilder builder)", "full_signature": "public  PubchemFingerprinter(IChemObjectBuilder builder)", "class_method_signature": "PubchemFingerprinter.PubchemFingerprinter(IChemObjectBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "getBitFingerprint", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "IBitFingerprint", "signature": "IBitFingerprint getBitFingerprint(IAtomContainer atomContainer)", "full_signature": "@Override public IBitFingerprint getBitFingerprint(IAtomContainer atomContainer)", "class_method_signature": "PubchemFingerprinter.getBitFingerprint(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getRawFingerprint", "parameters": "(IAtomContainer iAtomContainer)", "modifiers": "@Override public", "return": "Map<String, Integer>", "signature": "Map<String, Integer> getRawFingerprint(IAtomContainer iAtomContainer)", "full_signature": "@Override public Map<String, Integer> getRawFingerprint(IAtomContainer iAtomContainer)", "class_method_signature": "PubchemFingerprinter.getRawFingerprint(IAtomContainer iAtomContainer)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSize()", "full_signature": "@Override public int getSize()", "class_method_signature": "PubchemFingerprinter.getSize()", "testcase": false, "constructor": false}, {"identifier": "_generateFp", "parameters": "(byte[] fp, IAtomContainer mol)", "modifiers": "private", "return": "void", "signature": "void _generateFp(byte[] fp, IAtomContainer mol)", "full_signature": "private void _generateFp(byte[] fp, IAtomContainer mol)", "class_method_signature": "PubchemFingerprinter._generateFp(byte[] fp, IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "generateFp", "parameters": "(IAtomContainer mol)", "modifiers": "private", "return": "void", "signature": "void generateFp(IAtomContainer mol)", "full_signature": "private void generateFp(IAtomContainer mol)", "class_method_signature": "PubchemFingerprinter.generateFp(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "isBitOn", "parameters": "(int bit)", "modifiers": "private", "return": "boolean", "signature": "boolean isBitOn(int bit)", "full_signature": "private boolean isBitOn(int bit)", "class_method_signature": "PubchemFingerprinter.isBitOn(int bit)", "testcase": false, "constructor": false}, {"identifier": "getFingerprintAsBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getFingerprintAsBytes()", "full_signature": "public byte[] getFingerprintAsBytes()", "class_method_signature": "PubchemFingerprinter.getFingerprintAsBytes()", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String enc)", "modifiers": "public static", "return": "BitSet", "signature": "BitSet decode(String enc)", "full_signature": "public static BitSet decode(String enc)", "class_method_signature": "PubchemFingerprinter.decode(String enc)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String encode()", "full_signature": "private String encode()", "class_method_signature": "PubchemFingerprinter.encode()", "testcase": false, "constructor": false}, {"identifier": "base64Encode", "parameters": "(byte[] data)", "modifiers": "private static", "return": "String", "signature": "String base64Encode(byte[] data)", "full_signature": "private static String base64Encode(byte[] data)", "class_method_signature": "PubchemFingerprinter.base64Encode(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "base64Decode", "parameters": "(String data)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] base64Decode(String data)", "full_signature": "private static byte[] base64Decode(String data)", "class_method_signature": "PubchemFingerprinter.base64Decode(String data)", "testcase": false, "constructor": false}, {"identifier": "countElements", "parameters": "(byte[] fp, IAtomContainer mol)", "modifiers": "private static", "return": "void", "signature": "void countElements(byte[] fp, IAtomContainer mol)", "full_signature": "private static void countElements(byte[] fp, IAtomContainer mol)", "class_method_signature": "PubchemFingerprinter.countElements(byte[] fp, IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "countRings", "parameters": "(byte[] fp, IAtomContainer mol)", "modifiers": "private static", "return": "void", "signature": "void countRings(byte[] fp, IAtomContainer mol)", "full_signature": "private static void countRings(byte[] fp, IAtomContainer mol)", "class_method_signature": "PubchemFingerprinter.countRings(byte[] fp, IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "countSubstructures", "parameters": "(byte[] fp, IAtomContainer mol)", "modifiers": "private", "return": "void", "signature": "void countSubstructures(byte[] fp, IAtomContainer mol)", "full_signature": "private void countSubstructures(byte[] fp, IAtomContainer mol)", "class_method_signature": "PubchemFingerprinter.countSubstructures(byte[] fp, IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "getCountFingerprint", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "ICountFingerprint", "signature": "ICountFingerprint getCountFingerprint(IAtomContainer container)", "full_signature": "@Override public ICountFingerprint getCountFingerprint(IAtomContainer container)", "class_method_signature": "PubchemFingerprinter.getCountFingerprint(IAtomContainer container)", "testcase": false, "constructor": false}], "file": "descriptor/fingerprint/src/main/java/org/openscience/cdk/fingerprint/PubchemFingerprinter.java"}, "focal_method": {"identifier": "getBitFingerprint", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "IBitFingerprint", "body": "@Override\n    public IBitFingerprint getBitFingerprint(IAtomContainer atomContainer) throws CDKException {\n        generateFp(atomContainer);\n        BitSet fp = new BitSet(FP_SIZE);\n        for (int i = 0; i < FP_SIZE; i++) {\n            if (isBitOn(i)) fp.set(i);\n        }\n        return new BitSetFingerprint(fp);\n    }", "signature": "IBitFingerprint getBitFingerprint(IAtomContainer atomContainer)", "full_signature": "@Override public IBitFingerprint getBitFingerprint(IAtomContainer atomContainer)", "class_method_signature": "PubchemFingerprinter.getBitFingerprint(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["generateFp", "isBitOn", "set"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}