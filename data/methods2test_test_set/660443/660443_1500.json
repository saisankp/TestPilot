{"test_class": {"identifier": "FractionalCSP3DescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [{"original_string": "private static final SmilesValue[] table = new SmilesValue[] {\n            new SmilesValue(\"[H][H]\", 0),\n            new SmilesValue(\"O\", 0),\n            new SmilesValue(\"C1=CC=CC=C1\", 0),\n            new SmilesValue(\"C1=CN=CC=C1\", 0),\n            new SmilesValue(\"CC1=CC=CC(C)=N1\", 0.29),\n            new SmilesValue(\"CC1CCCC(C)N1\", 1),\n            new SmilesValue(\"CC1=NC(NC(NC2CN(C3=CC=CC(F)=C3)C(C2)=O)=O)=CC=C1\", 0.24),\n    };", "modifier": "private static final", "type": "SmilesValue[]", "declarator": "table = new SmilesValue[] {\n            new SmilesValue(\"[H][H]\", 0),\n            new SmilesValue(\"O\", 0),\n            new SmilesValue(\"C1=CC=CC=C1\", 0),\n            new SmilesValue(\"C1=CN=CC=C1\", 0),\n            new SmilesValue(\"CC1=CC=CC(C)=N1\", 0.29),\n            new SmilesValue(\"CC1CCCC(C)N1\", 1),\n            new SmilesValue(\"CC1=NC(NC(NC2CN(C3=CC=CC(F)=C3)C(C2)=O)=O)=CC=C1\", 0.24),\n    }", "var_name": "table"}], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/FractionalCSP3DescriptorTest.java"}, "test_case": {"identifier": "testFractionalCSP3Descriptor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFractionalCSP3Descriptor() throws CDKException {\n        SmilesParser sp = new SmilesParser(SilentChemObjectBuilder.getInstance());\n        for (SmilesValue e: table) {\n            IAtomContainer mol = sp.parseSmiles(e.smiles);\n            DoubleResult result = (DoubleResult)descriptor.calculate(mol).getValue();\n            Assert.assertEquals(e.value, result.doubleValue(), 0.01);\n        }\n    }", "signature": "void testFractionalCSP3Descriptor()", "full_signature": "@Test public void testFractionalCSP3Descriptor()", "class_method_signature": "FractionalCSP3DescriptorTest.testFractionalCSP3Descriptor()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "getValue", "calculate", "assertEquals", "doubleValue"]}, "focal_class": {"identifier": "FractionalCSP3Descriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [], "methods": [{"identifier": "FractionalCSP3Descriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " FractionalCSP3Descriptor()", "full_signature": "public  FractionalCSP3Descriptor()", "class_method_signature": "FractionalCSP3Descriptor.FractionalCSP3Descriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "FractionalCSP3Descriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "FractionalCSP3Descriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "FractionalCSP3Descriptor.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "FractionalCSP3Descriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "FractionalCSP3Descriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer mol)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer mol)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer mol)", "class_method_signature": "FractionalCSP3Descriptor.calculate(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "FractionalCSP3Descriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "FractionalCSP3Descriptor.getDescriptorNames()", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/FractionalCSP3Descriptor.java"}, "focal_method": {"identifier": "FractionalCSP3Descriptor", "parameters": "()", "modifiers": "public", "return": "", "body": "public FractionalCSP3Descriptor() { }", "signature": " FractionalCSP3Descriptor()", "full_signature": "public  FractionalCSP3Descriptor()", "class_method_signature": "FractionalCSP3Descriptor.FractionalCSP3Descriptor()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}