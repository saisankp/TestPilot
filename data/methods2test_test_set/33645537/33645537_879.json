{"test_class": {"identifier": "CursorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static TestFactory FACTORY;", "modifier": "private static", "type": "TestFactory", "declarator": "FACTORY", "var_name": "FACTORY"}, {"original_string": "private static final String DB_NAME = \"erdo\";", "modifier": "private static final", "type": "String", "declarator": "DB_NAME = \"erdo\"", "var_name": "DB_NAME"}, {"original_string": "private static final String MAP_NAME = \"map\";", "modifier": "private static final", "type": "String", "declarator": "MAP_NAME = \"map\"", "var_name": "MAP_NAME"}, {"original_string": "private static final int GAP = 10;", "modifier": "private static final", "type": "int", "declarator": "GAP = 10", "var_name": "GAP"}, {"original_string": "private OrderedMap map;", "modifier": "private", "type": "OrderedMap", "declarator": "map", "var_name": "map"}], "file": "zava/src/test/java/com/github/geophile/erdo/CursorTest.java"}, "test_case": {"identifier": "testFindAndPrevious", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindAndPrevious()\n        throws InterruptedException, DeadlockException, TransactionRolledBackException, IOException\n    {\n        for (int n = 0; n < 100; n++) {\n            // debug(\"n: %s\", n);\n            loadDisklessDatabase(n);\n            Cursor cursor;\n            TestRecord record;\n            TestKey key;\n            int expected;\n            // Complete cursor\n            {\n                expected = n;\n                cursor = map.last();\n                while ((record = (TestRecord) cursor.previous()) != null) {\n                    // debug(\"expected: %s, actual: %s\", (expected - 1) * GAP, record.key());\n                    checkRecord(--expected, record);\n                }\n                assertEquals(0, expected);\n            }\n            // Random access\n            {\n                // Test:\n                // -    k * GAP - GAP/2 (missing)\n                // -    k * GAP (present if k < n, missing if k = n)\n                for (int k = 0; k <= n; k++) {\n                    // Test missing\n                    {\n                        int missingKey = k * GAP - GAP / 2;\n                        key = new TestKey(missingKey);\n                        // test find -> record\n                        record = (TestRecord) map.find(key);\n                        assertNull(record);\n                        // test find -> cursor\n                        cursor = map.cursor(key);\n                        expected = k;\n                        while ((record = (TestRecord) cursor.previous()) != null) {\n                            checkRecord(--expected, record);\n                        }\n                        assertEquals(0, expected);\n                    }\n                    // Test present\n                    int presentKey = k * GAP;\n                    expected = k;\n                    key = new TestKey(presentKey);\n                    // test find -> record\n                    record = (TestRecord) map.find(key);\n                    if (k < n) {\n                        checkRecord(expected, record);\n                        // test find -> cursor\n                        cursor = map.cursor(key);\n                        while ((record = (TestRecord) cursor.previous()) != null) {\n                            checkRecord(expected--, record);\n                        }\n                        assertEquals(n == 0 ? 0 : -1, expected);\n                    } else {\n                        assertEquals(n, k);\n                        assertNull(record);\n                    }\n                }\n            }\n        }\n    }", "signature": "void testFindAndPrevious()", "full_signature": "@Test public void testFindAndPrevious()", "class_method_signature": "CursorTest.testFindAndPrevious()", "testcase": true, "constructor": false, "invocations": ["loadDisklessDatabase", "last", "previous", "checkRecord", "assertEquals", "find", "assertNull", "cursor", "previous", "checkRecord", "assertEquals", "find", "checkRecord", "cursor", "previous", "checkRecord", "assertEquals", "assertEquals", "assertNull"]}, "focal_class": {"identifier": "Cursor", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "next", "parameters": "()", "modifiers": "public abstract", "return": "AbstractRecord", "signature": "AbstractRecord next()", "full_signature": "public abstract AbstractRecord next()", "class_method_signature": "Cursor.next()", "testcase": false, "constructor": false}, {"identifier": "previous", "parameters": "()", "modifiers": "public abstract", "return": "AbstractRecord", "signature": "AbstractRecord previous()", "full_signature": "public abstract AbstractRecord previous()", "class_method_signature": "Cursor.previous()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public abstract", "return": "void", "signature": "void close()", "full_signature": "public abstract void close()", "class_method_signature": "Cursor.close()", "testcase": false, "constructor": false}], "file": "zava/src/main/java/com/github/geophile/erdo/Cursor.java"}, "focal_method": {"identifier": "previous", "parameters": "()", "modifiers": "public abstract", "return": "AbstractRecord", "body": "public abstract AbstractRecord previous() throws IOException, InterruptedException;", "signature": "AbstractRecord previous()", "full_signature": "public abstract AbstractRecord previous()", "class_method_signature": "Cursor.previous()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}