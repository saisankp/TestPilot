{"test_class": {"identifier": "DXSearchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper mapper = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private DXProject testProject;", "modifier": "private", "type": "DXProject", "declarator": "testProject", "var_name": "testProject"}], "file": "src/java/src/test/java/com/dnanexus/DXSearchTest.java"}, "test_case": {"identifier": "testFindExecutionsQuerySerialization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindExecutionsQuerySerialization() throws IOException {\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"launchedBy\\\":\\\"user-user1\\\"}\"),\n                mapper.valueToTree(DXSearch.findExecutions().launchedBy(\"user-user1\")\n                        .buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"project\\\":\\\"project-000000000000000000000000\\\"}\"),\n                mapper.valueToTree(DXSearch.findExecutions()\n                        .inProject(DXProject.getInstance(\"project-000000000000000000000000\"))\n                        .buildRequestHash()));\n\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"includeSubjobs\\\": false}\"),\n                mapper.valueToTree(DXSearch.findExecutions().includeSubjobs(false)\n                        .buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"name\\\": \\\"dnanexus\\\"}\"),\n                mapper.valueToTree(DXSearch.findExecutions().nameMatchesExactly(\"dnanexus\")\n                        .buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"name\\\": {\\\"regexp\\\": \\\"(DNA|dna)nexus\\\"}}\"),\n                mapper.valueToTree(DXSearch.findExecutions().nameMatchesRegexp(\"(DNA|dna)nexus\")\n                        .buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"name\\\": {\\\"regexp\\\": \\\"[dr]nanexus\\\"}}\"),\n                mapper.valueToTree(DXSearch.findExecutions()\n                        .nameMatchesRegexp(\"[dr]nanexus\", false).buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"name\\\": {\\\"regexp\\\": \\\"[dr]nanexus\\\", \\\"flags\\\": \\\"i\\\"}}\"),\n                mapper.valueToTree(DXSearch.findExecutions().nameMatchesRegexp(\"[dr]nanexus\", true)\n                        .buildRequestHash()));\n\n        Assert.assertEquals(DXJSON.parseJson(\"{\\\"class\\\": \\\"job\\\"}\"),\n                mapper.valueToTree(DXSearch.findExecutions().withClassJob().buildRequestHash()));\n        Assert.assertEquals(DXJSON.parseJson(\"{\\\"class\\\": \\\"analysis\\\"}\"), mapper\n                .valueToTree(DXSearch.findExecutions().withClassAnalysis().buildRequestHash()));\n\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"executable\\\": \\\"applet-000011112222333344445555\\\"}\"),\n                mapper.valueToTree(DXSearch.findExecutions()\n                        .withExecutable(DXApplet.getInstance(\"applet-000011112222333344445555\"))\n                        .buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"originJob\\\": \\\"job-000011112222333344445555\\\"}\"),\n                mapper.valueToTree(DXSearch.findExecutions()\n                        .withOriginJob(DXJob.getInstance(\"job-000011112222333344445555\"))\n                        .buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"parentAnalysis\\\": \\\"analysis-000011112222333344445555\\\"}\"),\n                mapper.valueToTree(DXSearch\n                        .findExecutions()\n                        .withParentAnalysis(\n                                DXAnalysis.getInstance(\"analysis-000011112222333344445555\"))\n                        .buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"parentJob\\\": \\\"job-000011112222333344445555\\\"}\"),\n                mapper.valueToTree(DXSearch.findExecutions()\n                        .withParentJob(DXJob.getInstance(\"job-000011112222333344445555\"))\n                        .buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"properties\\\": {\\\"$and\\\": [{\\\"a\\\": \\\"b\\\"}, {\\\"c\\\": true}]}}\"),\n                mapper.valueToTree(DXSearch.findExecutions().withProperty(\"a\", \"b\")\n                        .withProperty(\"c\").buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"rootExecution\\\": \\\"analysis-000011112222333344445555\\\"}\"),\n                mapper.valueToTree(DXSearch\n                        .findExecutions()\n                        .withRootExecution(\n                                DXAnalysis.getInstance(\"analysis-000011112222333344445555\"))\n                        .buildRequestHash()));\n\n        Assert.assertEquals(DXJSON.parseJson(\"{\\\"tags\\\": \\\"a\\\"}\"),\n                mapper.valueToTree(DXSearch.findExecutions().withTag(\"a\").buildRequestHash()));\n        Assert.assertEquals(DXJSON\n                .parseJson(\"{\\\"tags\\\": {\\\"$or\\\": [{\\\"$and\\\": [\\\"a\\\", \\\"b\\\"]}, \\\"c\\\"]}}\"), mapper\n                .valueToTree(DXSearch\n                        .findExecutions()\n                        .withTags(\n                                DXSearch.TagsQuery.anyOf(DXSearch.TagsQuery.allOf(\"a\", \"b\"),\n                                        DXSearch.TagsQuery.of(\"c\"))).buildRequestHash()));\n\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"state\\\": \\\"done\\\"}\"),\n                mapper.valueToTree(DXSearch.findExecutions().withState(JobState.DONE)\n                        .buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"state\\\": [\\\"in_progress\\\", \\\"done\\\"]}\"),\n                mapper.valueToTree(DXSearch.findExecutions()\n                        .withState(AnalysisState.IN_PROGRESS, AnalysisState.DONE)\n                        .buildRequestHash()));\n\n        Assert.assertEquals(DXJSON.parseJson(\"{\\\"properties\\\": {\\\"foo\\\": true}}\"), mapper\n                .valueToTree(DXSearch.findExecutions().withProperty(\"foo\").buildRequestHash()));\n        Assert.assertEquals(DXJSON\n                .parseJson(\"{\\\"properties\\\": {\\\"$and\\\": [{\\\"foo\\\": true}, {\\\"bar\\\": \\\"a\\\"}]}}\"),\n                mapper.valueToTree(DXSearch.findExecutions().withProperty(\"foo\")\n                        .withProperty(\"bar\", \"a\").buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"properties\\\": {\\\"$and\\\": [{\\\"foo\\\": true}, {\\\"bar\\\": \\\"a\\\"}, {\\\"baz\\\": \\\"b\\\"}]}}\"),\n                mapper.valueToTree(DXSearch.findExecutions().withProperty(\"foo\")\n                        .withProperty(\"bar\", \"a\")\n                        .withProperties(PropertiesQuery.withKeyAndValue(\"baz\", \"b\"))\n                        .buildRequestHash()));\n\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"id\\\": [\\\"job-111100000000000000000000\\\"]}\"),\n                mapper.valueToTree(DXSearch\n                        .findExecutions()\n                        .withIdsIn(\n                                ImmutableList.of(DXJob.getInstance(\"job-111100000000000000000000\")))\n                        .buildRequestHash()));\n\n        // Conversion of dates to milliseconds since epoch\n        GregorianCalendar january15 = new GregorianCalendar(2013, 0, 15);\n        january15.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        GregorianCalendar january16 = new GregorianCalendar(2013, 0, 16);\n        january16.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"created\\\": {\\\"before\\\": 1358208000000}}\"),\n                mapper.valueToTree(DXSearch.findExecutions().createdBefore(january15.getTime())\n                        .buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"created\\\": {\\\"after\\\": 1358208000000}}\"),\n                mapper.valueToTree(DXSearch.findExecutions().createdAfter(january15.getTime())\n                        .buildRequestHash()));\n        Assert.assertEquals(DXJSON\n                .parseJson(\"{\\\"created\\\": {\\\"after\\\": 1358208000000, \\\"before\\\": 1358294400000}}\"),\n                mapper.valueToTree(DXSearch.findExecutions().createdAfter(january15.getTime())\n                        .createdBefore(january16.getTime()).buildRequestHash()));\n\n        // Setting multiple fields\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"launchedBy\\\":\\\"user-user1\\\", \\\"project\\\":\\\"project-000000000000000000000000\\\"}\"),\n                mapper.valueToTree(DXSearch.findExecutions().launchedBy(\"user-user1\")\n                        .inProject(DXProject.getInstance(\"project-000000000000000000000000\"))\n                        .buildRequestHash()));\n\n        // Setting the same field more than once is disallowed\n        try {\n            DXSearch.findExecutions().launchedBy(\"user-user1\").launchedBy(\"user-user2\");\n            Assert.fail(\"Expected double setting of launchedBy to fail\");\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n        try {\n            DXSearch.findExecutions().inProject(DXProject.getInstance(\"project-0\"))\n                    .inProject(DXProject.getInstance(\"project-1\"));\n            Assert.fail(\"Expected double setting of inProject to fail\");\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n        try {\n            DXSearch.findExecutions().includeSubjobs(true).includeSubjobs(false);\n            Assert.fail(\"Expected double setting of includeSubjobs to fail\");\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n        try {\n            DXSearch.findExecutions().nameMatchesExactly(\"foo\").nameMatchesGlob(\"g*\");\n            Assert.fail(\"Expected double setting of name queries to fail\");\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n        try {\n            DXSearch.findExecutions().withClassAnalysis().withClassJob();\n            Assert.fail(\"Expected double setting of class constraints to fail\");\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n        try {\n            DXSearch.findExecutions().withIdsIn(ImmutableList.<DXExecution>of())\n                    .withIdsIn(ImmutableList.<DXExecution>of());\n            Assert.fail(\"Expected double setting of withIdsIn to fail\");\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n\n        // TODO: includeDescribeOutput\n    }", "signature": "void testFindExecutionsQuerySerialization()", "full_signature": "@Test public void testFindExecutionsQuerySerialization()", "class_method_signature": "DXSearchTest.testFindExecutionsQuerySerialization()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "parseJson", "valueToTree", "buildRequestHash", "launchedBy", "findExecutions", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "inProject", "findExecutions", "getInstance", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "includeSubjobs", "findExecutions", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "nameMatchesExactly", "findExecutions", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "nameMatchesRegexp", "findExecutions", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "nameMatchesRegexp", "findExecutions", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "nameMatchesRegexp", "findExecutions", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withClassJob", "findExecutions", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withClassAnalysis", "findExecutions", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withExecutable", "findExecutions", "getInstance", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withOriginJob", "findExecutions", "getInstance", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withParentAnalysis", "findExecutions", "getInstance", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withParentJob", "findExecutions", "getInstance", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withProperty", "withProperty", "findExecutions", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withRootExecution", "findExecutions", "getInstance", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withTag", "findExecutions", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withTags", "findExecutions", "anyOf", "allOf", "of", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withState", "findExecutions", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withState", "findExecutions", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withProperty", "findExecutions", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withProperty", "withProperty", "findExecutions", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withProperties", "withProperty", "withProperty", "findExecutions", "withKeyAndValue", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withIdsIn", "findExecutions", "of", "getInstance", "setTimeZone", "getTimeZone", "setTimeZone", "getTimeZone", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "createdBefore", "findExecutions", "getTime", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "createdAfter", "findExecutions", "getTime", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "createdBefore", "createdAfter", "findExecutions", "getTime", "getTime", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "inProject", "launchedBy", "findExecutions", "getInstance", "launchedBy", "launchedBy", "findExecutions", "fail", "inProject", "inProject", "findExecutions", "getInstance", "getInstance", "fail", "includeSubjobs", "includeSubjobs", "findExecutions", "fail", "nameMatchesGlob", "nameMatchesExactly", "findExecutions", "fail", "withClassJob", "withClassAnalysis", "findExecutions", "fail", "withIdsIn", "withIdsIn", "findExecutions", "of", "of", "fail"]}, "focal_class": {"identifier": "DXSearch", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper MAPPER = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "MAPPER = new ObjectMapper()", "var_name": "MAPPER"}], "methods": [{"identifier": "findDataObjects", "parameters": "()", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "class_method_signature": "DXSearch.findDataObjects()", "testcase": false, "constructor": false}, {"identifier": "findDataObjectsWithEnvironment", "parameters": "(\n            DXEnvironment env)", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjectsWithEnvironment(\n            DXEnvironment env)", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjectsWithEnvironment(\n            DXEnvironment env)", "class_method_signature": "DXSearch.findDataObjectsWithEnvironment(\n            DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "findExecutions", "parameters": "()", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutions()", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutions()", "class_method_signature": "DXSearch.findExecutions()", "testcase": false, "constructor": false}, {"identifier": "findExecutionsWithEnvironment", "parameters": "(\n            DXEnvironment env)", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutionsWithEnvironment(\n            DXEnvironment env)", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutionsWithEnvironment(\n            DXEnvironment env)", "class_method_signature": "DXSearch.findExecutionsWithEnvironment(\n            DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "findJobs", "parameters": "()", "modifiers": "@Deprecated public static", "return": "FindExecutionsRequestBuilder<DXJob>", "signature": "FindExecutionsRequestBuilder<DXJob> findJobs()", "full_signature": "@Deprecated public static FindExecutionsRequestBuilder<DXJob> findJobs()", "class_method_signature": "DXSearch.findJobs()", "testcase": false, "constructor": false}, {"identifier": "findJobsWithEnvironment", "parameters": "(DXEnvironment env)", "modifiers": "@Deprecated public static", "return": "FindExecutionsRequestBuilder<DXJob>", "signature": "FindExecutionsRequestBuilder<DXJob> findJobsWithEnvironment(DXEnvironment env)", "full_signature": "@Deprecated public static FindExecutionsRequestBuilder<DXJob> findJobsWithEnvironment(DXEnvironment env)", "class_method_signature": "DXSearch.findJobsWithEnvironment(DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "serializeCompoundQuery", "parameters": "(String operator, List<? extends Object> operands)", "modifiers": "private static", "return": "JsonNode", "signature": "JsonNode serializeCompoundQuery(String operator, List<? extends Object> operands)", "full_signature": "private static JsonNode serializeCompoundQuery(String operator, List<? extends Object> operands)", "class_method_signature": "DXSearch.serializeCompoundQuery(String operator, List<? extends Object> operands)", "testcase": false, "constructor": false}, {"identifier": "DXSearch", "parameters": "()", "modifiers": "private", "return": "", "signature": " DXSearch()", "full_signature": "private  DXSearch()", "class_method_signature": "DXSearch.DXSearch()", "testcase": false, "constructor": true}], "file": "src/java/src/main/java/com/dnanexus/DXSearch.java"}, "focal_method": {"identifier": "findExecutions", "parameters": "()", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "body": "public static FindExecutionsRequestBuilder<DXExecution> findExecutions() {\n        return new FindExecutionsRequestBuilder<DXExecution>();\n    }", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutions()", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutions()", "class_method_signature": "DXSearch.findExecutions()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4802269, "url": "https://github.com/dnanexus/dx-toolkit", "stars": 59, "created": "6/27/2012 12:23:47 AM +00:00", "updates": "2020-01-21T16:35:18+00:00", "fork": "False", "license": "licensed"}}