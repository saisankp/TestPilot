{"test_class": {"identifier": "AESEncryptionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String DECRYPTED_URI = \"mongodb://toto:truc@dataprep.org/dataprep-db?ssl=toto&truc=machin\";", "modifier": "public static final", "type": "String", "declarator": "DECRYPTED_URI = \"mongodb://toto:truc@dataprep.org/dataprep-db?ssl=toto&truc=machin\"", "var_name": "DECRYPTED_URI"}, {"original_string": "public static final String ENCRYPTED_URI =\n            \"mongodb://toto:qxjQWF%2FZsuzzeLzKIop2pQ==@dataprep.org/dataprep-db?ssl=toto&truc=machin\";", "modifier": "public static final", "type": "String", "declarator": "ENCRYPTED_URI =\n            \"mongodb://toto:qxjQWF%2FZsuzzeLzKIop2pQ==@dataprep.org/dataprep-db?ssl=toto&truc=machin\"", "var_name": "ENCRYPTED_URI"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/encrypt/AESEncryptionTest.java"}, "test_case": {"identifier": "should_throw_an_exception_when_trying_to_decrypt_a_non_encrypted_value", "parameters": "()", "modifiers": "@Test(expected = IllegalBlockSizeException.class) public", "return": "void", "body": "@Test(expected = IllegalBlockSizeException.class)\n    public void should_throw_an_exception_when_trying_to_decrypt_a_non_encrypted_value() throws Exception {\n        // given\n        String src = \"Dataprep\";\n\n        // when\n        String encrypted = AESEncryption.decrypt(src);\n\n        // then\n        Assert.fail(\"should not reach this point\");\n    }", "signature": "void should_throw_an_exception_when_trying_to_decrypt_a_non_encrypted_value()", "full_signature": "@Test(expected = IllegalBlockSizeException.class) public void should_throw_an_exception_when_trying_to_decrypt_a_non_encrypted_value()", "class_method_signature": "AESEncryptionTest.should_throw_an_exception_when_trying_to_decrypt_a_non_encrypted_value()", "testcase": true, "constructor": false, "invocations": ["decrypt", "fail"]}, "focal_class": {"identifier": "AESEncryption", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(AESEncryption.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(AESEncryption.class)", "var_name": "LOGGER"}, {"original_string": "private static final String ALGO = \"AES\";", "modifier": "private static final", "type": "String", "declarator": "ALGO = \"AES\"", "var_name": "ALGO"}, {"original_string": "private static final String ENCODING = \"UTF-8\";", "modifier": "private static final", "type": "String", "declarator": "ENCODING = \"UTF-8\"", "var_name": "ENCODING"}, {"original_string": "private static Key secretKey;", "modifier": "private static", "type": "Key", "declarator": "secretKey", "var_name": "secretKey"}], "methods": [{"identifier": "AESEncryption", "parameters": "()", "modifiers": "private", "return": "", "signature": " AESEncryption()", "full_signature": "private  AESEncryption()", "class_method_signature": "AESEncryption.AESEncryption()", "testcase": false, "constructor": true}, {"identifier": "encrypt", "parameters": "(final String src)", "modifiers": "public static", "return": "String", "signature": "String encrypt(final String src)", "full_signature": "public static String encrypt(final String src)", "class_method_signature": "AESEncryption.encrypt(final String src)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(final String src)", "modifiers": "public static", "return": "String", "signature": "String decrypt(final String src)", "full_signature": "public static String decrypt(final String src)", "class_method_signature": "AESEncryption.decrypt(final String src)", "testcase": false, "constructor": false}, {"identifier": "decryptUriPassword", "parameters": "(final String rawUri)", "modifiers": "public static", "return": "String", "signature": "String decryptUriPassword(final String rawUri)", "full_signature": "public static String decryptUriPassword(final String rawUri)", "class_method_signature": "AESEncryption.decryptUriPassword(final String rawUri)", "testcase": false, "constructor": false}, {"identifier": "encryptUriPassword", "parameters": "(final String rawUri)", "modifiers": "public static", "return": "String", "signature": "String encryptUriPassword(final String rawUri)", "full_signature": "public static String encryptUriPassword(final String rawUri)", "class_method_signature": "AESEncryption.encryptUriPassword(final String rawUri)", "testcase": false, "constructor": false}, {"identifier": "extractCredentials", "parameters": "(URI uri)", "modifiers": "private static", "return": "UserInfo", "signature": "UserInfo extractCredentials(URI uri)", "full_signature": "private static UserInfo extractCredentials(URI uri)", "class_method_signature": "AESEncryption.extractCredentials(URI uri)", "testcase": false, "constructor": false}, {"identifier": "setCredentials", "parameters": "(URI uri, UserInfo userInfo)", "modifiers": "private static", "return": "URI", "signature": "URI setCredentials(URI uri, UserInfo userInfo)", "full_signature": "private static URI setCredentials(URI uri, UserInfo userInfo)", "class_method_signature": "AESEncryption.setCredentials(URI uri, UserInfo userInfo)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(final String name, final String src)", "modifiers": "public static", "return": "String", "signature": "String decrypt(final String name, final String src)", "full_signature": "public static String decrypt(final String name, final String src)", "class_method_signature": "AESEncryption.decrypt(final String name, final String src)", "testcase": false, "constructor": false}, {"identifier": "generateKey", "parameters": "(byte[] defaultValue)", "modifiers": "private static", "return": "Key", "signature": "Key generateKey(byte[] defaultValue)", "full_signature": "private static Key generateKey(byte[] defaultValue)", "class_method_signature": "AESEncryption.generateKey(byte[] defaultValue)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/encrypt/AESEncryption.java"}, "focal_method": {"identifier": "decrypt", "parameters": "(final String src)", "modifiers": "public static", "return": "String", "body": "public static String decrypt(final String src) throws GeneralSecurityException {\n        final Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, secretKey);\n        final byte[] decodedValue = Base64.getDecoder().decode(src);\n        final byte[] decValue = c.doFinal(decodedValue);\n        try {\n            return new String(decValue, ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw new TDPException(CommonErrorCodes.UNEXPECTED_EXCEPTION, e);\n        }\n    }", "signature": "String decrypt(final String src)", "full_signature": "public static String decrypt(final String src)", "class_method_signature": "AESEncryption.decrypt(final String src)", "testcase": false, "constructor": false, "invocations": ["getInstance", "init", "decode", "getDecoder", "doFinal"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}