{"test_class": {"identifier": "JSONSerializerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger LOGGER = LoggerFactory.getLogger(JSONSerializerTest.class);", "modifier": "private final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(JSONSerializerTest.class)", "var_name": "LOGGER"}], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/json/JSONSerializerTest.java"}, "test_case": {"identifier": "testSerialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSerialize() {\n        Assert.assertEquals(JSONSerializer.serialize(null), \"null\");\n        Assert.assertEquals(JSONSerializer.serialize((byte) 1), \"1\");\n        Assert.assertEquals(JSONSerializer.serialize((short) 1), \"1\");\n        Assert.assertEquals(JSONSerializer.serialize(-1), \"-1\");\n        Assert.assertEquals(JSONSerializer.serialize(1l), \"1\");\n        Assert.assertEquals(JSONSerializer.serialize(1.0d), \"1.0\");\n        Assert.assertEquals(JSONSerializer.serialize(1.0f), \"1.0\");\n        Assert.assertEquals(JSONSerializer.serialize(true), \"true\");\n        Assert.assertEquals(JSONSerializer.serialize(false), \"false\");\n        Assert.assertEquals(JSONSerializer.serialize('c'), \"\\\"c\\\"\");\n        Assert.assertEquals(JSONSerializer.serialize(\"c\"), \"\\\"c\\\"\");\n        Assert.assertEquals(JSONSerializer.serialize(\"\\\"c\\\"\"), \"\\\"\\\\\\\"c\\\\\\\"\\\"\");\n\n        Assert.assertEquals(JSONSerializer.serialize(new String[] {}), \"[]\");\n        Assert.assertEquals(JSONSerializer.serialize(new String[] { \"1\", \"2\" }), \"[\\\"1\\\",\\\"2\\\"]\");\n        List list = new ArrayList();\n        Assert.assertEquals(JSONSerializer.serialize(list), \"[]\");\n        list.add(\"1\");\n        list.add(\"2\");\n        Assert.assertEquals(JSONSerializer.serialize(list), \"[\\\"1\\\",\\\"2\\\"]\");\n        Map map = new HashMap();\n        Assert.assertEquals(JSONSerializer.serialize(map), \"{}\");\n        map.put(\"1\", \"2\");\n        Assert.assertEquals(JSONSerializer.serialize(map), \"{\\\"1\\\":\\\"2\\\"}\");\n    }", "signature": "void testSerialize()", "full_signature": "@Test public void testSerialize()", "class_method_signature": "JSONSerializerTest.testSerialize()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "serialize", "assertEquals", "serialize", "assertEquals", "serialize", "assertEquals", "serialize", "assertEquals", "serialize", "assertEquals", "serialize", "assertEquals", "serialize", "assertEquals", "serialize", "assertEquals", "serialize", "assertEquals", "serialize", "assertEquals", "serialize", "assertEquals", "serialize", "assertEquals", "serialize", "assertEquals", "serialize", "assertEquals", "serialize", "add", "add", "assertEquals", "serialize", "assertEquals", "serialize", "put", "assertEquals", "serialize"]}, "focal_class": {"identifier": "JSONSerializer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int          position;", "modifier": "private", "type": "int", "declarator": "position", "var_name": "position"}, {"original_string": "private final char[] buffer;", "modifier": "private final", "type": "char[]", "declarator": "buffer", "var_name": "buffer"}], "methods": [{"identifier": "serialize", "parameters": "(Object object)", "modifiers": "public static", "return": "String", "signature": "String serialize(Object object)", "full_signature": "public static String serialize(Object object)", "class_method_signature": "JSONSerializer.serialize(Object object)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(Object object, boolean addType)", "modifiers": "public static", "return": "String", "signature": "String serialize(Object object, boolean addType)", "full_signature": "public static String serialize(Object object, boolean addType)", "class_method_signature": "JSONSerializer.serialize(Object object, boolean addType)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(String json)", "modifiers": "public static", "return": "Object", "signature": "Object deserialize(String json)", "full_signature": "public static Object deserialize(String json)", "class_method_signature": "JSONSerializer.deserialize(String json)", "testcase": false, "constructor": false}, {"identifier": "JSONSerializer", "parameters": "(String string)", "modifiers": "protected", "return": "", "signature": " JSONSerializer(String string)", "full_signature": "protected  JSONSerializer(String string)", "class_method_signature": "JSONSerializer.JSONSerializer(String string)", "testcase": false, "constructor": true}, {"identifier": "nextValue", "parameters": "()", "modifiers": "protected", "return": "Object", "signature": "Object nextValue()", "full_signature": "protected Object nextValue()", "class_method_signature": "JSONSerializer.nextValue()", "testcase": false, "constructor": false}, {"identifier": "nextToken", "parameters": "()", "modifiers": "private", "return": "char", "signature": "char nextToken()", "full_signature": "private char nextToken()", "class_method_signature": "JSONSerializer.nextToken()", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/json/JSONSerializer.java"}, "focal_method": {"identifier": "serialize", "parameters": "(Object object)", "modifiers": "public static", "return": "String", "body": "public static String serialize(Object object) {\n        return serialize(object, false);\n    }", "signature": "String serialize(Object object)", "full_signature": "public static String serialize(Object object)", "class_method_signature": "JSONSerializer.serialize(Object object)", "testcase": false, "constructor": false, "invocations": ["serialize"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}