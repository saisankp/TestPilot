{"test_class": {"identifier": "FindMissingNumberTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-verifier/drools-verifier-drl/src/test/java/org/drools/verifier/misc/FindMissingNumberTest.java"}, "test_case": {"identifier": "testFindMultiplicationPattern", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindMultiplicationPattern() {\n\n        // Multiplication\n        // *2 missing number 4\n        assertTrue(FindMissingNumber.findMultiplicationPattern(\n                new BigDecimal[] { BigDecimal.valueOf(2),\n                        BigDecimal.valueOf(8), BigDecimal.valueOf(16),\n                        BigDecimal.valueOf(32), BigDecimal.valueOf(64) })\n                .doubleValue() == 4);\n        // *17 missing number 383214\n        assertTrue(FindMissingNumber.findMultiplicationPattern(\n                new BigDecimal[] { BigDecimal.valueOf(78),\n                        BigDecimal.valueOf(1326), BigDecimal.valueOf(22542),\n                        BigDecimal.valueOf(6514638) }).doubleValue() == 383214);\n        // *1,23 missing number 2016.6957\n        assertTrue(FindMissingNumber.findMultiplicationPattern(\n                new BigDecimal[] { BigDecimal.valueOf(1333),\n                        BigDecimal.valueOf(1639.59),\n                        BigDecimal.valueOf(2480.535711),\n                        BigDecimal.valueOf(3051.05892453) }).doubleValue() == 2016.6957);\n\n        // Division\n        // /2 (*0.5) missing number 128\n        assertTrue(FindMissingNumber.findMultiplicationPattern(\n                new BigDecimal[] { BigDecimal.valueOf(256),\n                        BigDecimal.valueOf(64), BigDecimal.valueOf(32),\n                        BigDecimal.valueOf(16), BigDecimal.valueOf(8),\n                        BigDecimal.valueOf(4), BigDecimal.valueOf(2) })\n                .doubleValue() == 128);\n        // /10 (*0.1) missing number 1\n        assertTrue(FindMissingNumber.findMultiplicationPattern(\n                new BigDecimal[] { BigDecimal.valueOf(10000),\n                        BigDecimal.valueOf(1000), BigDecimal.valueOf(100),\n                        BigDecimal.valueOf(10), BigDecimal.valueOf(0.1),\n                        BigDecimal.valueOf(0.01) }).doubleValue() == 1);\n\n        // Not valid\n        // Not in pattern.\n        assertTrue(FindMissingNumber.findMultiplicationPattern(new BigDecimal[] {\n                BigDecimal.valueOf(111.2), BigDecimal.valueOf(3323),\n                BigDecimal.valueOf(234.434), BigDecimal.valueOf(44343),\n                BigDecimal.valueOf(434) }) == null);\n        assertTrue(FindMissingNumber.findMultiplicationPattern(new BigDecimal[] {\n                BigDecimal.valueOf(1), BigDecimal.valueOf(2),\n                BigDecimal.valueOf(3), BigDecimal.valueOf(4),\n                BigDecimal.valueOf(5), BigDecimal.valueOf(6),\n                BigDecimal.valueOf(7), BigDecimal.valueOf(5),\n                BigDecimal.valueOf(4), BigDecimal.valueOf(3),\n                BigDecimal.valueOf(2), BigDecimal.valueOf(1),\n                BigDecimal.valueOf(1), BigDecimal.valueOf(1) }) == null);\n    }", "signature": "void testFindMultiplicationPattern()", "full_signature": "@Test public void testFindMultiplicationPattern()", "class_method_signature": "FindMissingNumberTest.testFindMultiplicationPattern()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "doubleValue", "findMultiplicationPattern", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "assertTrue", "doubleValue", "findMultiplicationPattern", "valueOf", "valueOf", "valueOf", "valueOf", "assertTrue", "doubleValue", "findMultiplicationPattern", "valueOf", "valueOf", "valueOf", "valueOf", "assertTrue", "doubleValue", "findMultiplicationPattern", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "assertTrue", "doubleValue", "findMultiplicationPattern", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "assertTrue", "findMultiplicationPattern", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "assertTrue", "findMultiplicationPattern", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf"]}, "focal_class": {"identifier": "FindMissingNumber", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int MIN_NUMBER_OF_RESTRICTIONS = 4;", "modifier": "public static final", "type": "int", "declarator": "MIN_NUMBER_OF_RESTRICTIONS = 4", "var_name": "MIN_NUMBER_OF_RESTRICTIONS"}], "methods": [{"identifier": "testForPattern", "parameters": "(Collection<NumberRestriction> restrictions)", "modifiers": "public static", "return": "Number", "signature": "Number testForPattern(Collection<NumberRestriction> restrictions)", "full_signature": "public static Number testForPattern(Collection<NumberRestriction> restrictions)", "class_method_signature": "FindMissingNumber.testForPattern(Collection<NumberRestriction> restrictions)", "testcase": false, "constructor": false}, {"identifier": "findSumPattern", "parameters": "(BigDecimal[] numbers)", "modifiers": "protected static", "return": "Number", "signature": "Number findSumPattern(BigDecimal[] numbers)", "full_signature": "protected static Number findSumPattern(BigDecimal[] numbers)", "class_method_signature": "FindMissingNumber.findSumPattern(BigDecimal[] numbers)", "testcase": false, "constructor": false}, {"identifier": "findMultiplicationPattern", "parameters": "(BigDecimal[] numbers)", "modifiers": "protected static", "return": "Number", "signature": "Number findMultiplicationPattern(BigDecimal[] numbers)", "full_signature": "protected static Number findMultiplicationPattern(BigDecimal[] numbers)", "class_method_signature": "FindMissingNumber.findMultiplicationPattern(BigDecimal[] numbers)", "testcase": false, "constructor": false}], "file": "drools-verifier/drools-verifier-drl/src/main/java/org/drools/verifier/misc/FindMissingNumber.java"}, "focal_method": {"identifier": "findMultiplicationPattern", "parameters": "(BigDecimal[] numbers)", "modifiers": "protected static", "return": "Number", "body": "protected static Number findMultiplicationPattern(BigDecimal[] numbers) {\n        if ( numbers == null || numbers.length < MIN_NUMBER_OF_RESTRICTIONS ) {\n            return null;\n        }\n        try {\n\n            BigDecimal gap = null;\n            Number missingNumber = null;\n\n            BigDecimal a = numbers[0];\n            BigDecimal b = numbers[1];\n            BigDecimal c = numbers[2];\n            BigDecimal d = numbers[3];\n\n            // Uses first four numbers to check if there is a pattern and to\n            // calculate the gap between them. One missing value is allowed.\n            if ( b.divide( a ).equals( c.divide( b ) ) ) {\n                gap = b.divide( a );\n            } else if ( c.divide( b ).equals( d.divide( c ) ) ) {\n                gap = c.divide( b );\n            } else if ( b.divide( a ).equals( d.divide( c ) ) ) {\n                gap = b.divide( a );\n            } else {\n                // No pattern found.\n                return null;\n            }\n\n            BigDecimal first = null;\n            BigDecimal second = null;\n            for ( int i = 0; i < (numbers.length - 1); i++ ) {\n                first = numbers[i];\n                second = numbers[i + 1];\n\n                if ( missingNumber == null && !second.divide( first ).equals( gap ) ) {\n                    missingNumber = first.multiply( gap );\n                } else if ( !second.divide( first ).equals( gap ) && missingNumber != null ) {\n                    // Happends if there is no pattern found, or more than 1\n                    // missing number.\n                    return null;\n                }\n            }\n            return missingNumber;\n        } catch ( Exception e ) {\n            return null;\n        }\n    }", "signature": "Number findMultiplicationPattern(BigDecimal[] numbers)", "full_signature": "protected static Number findMultiplicationPattern(BigDecimal[] numbers)", "class_method_signature": "FindMissingNumber.findMultiplicationPattern(BigDecimal[] numbers)", "testcase": false, "constructor": false, "invocations": ["equals", "divide", "divide", "divide", "equals", "divide", "divide", "divide", "equals", "divide", "divide", "divide", "equals", "divide", "multiply", "equals", "divide"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}