{"test_class": {"identifier": "KafkaOperationsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(KafkaOperationsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(KafkaOperationsTest.class)", "var_name": "logger"}, {"original_string": "@ClassRule\n    public static SharedKafkaTestResource sharedKafkaTestResource = new SharedKafkaTestResource();", "modifier": "@ClassRule\n    public static", "type": "SharedKafkaTestResource", "declarator": "sharedKafkaTestResource = new SharedKafkaTestResource()", "var_name": "sharedKafkaTestResource"}, {"original_string": "private final KafkaAdminFactory kafkaAdminFactory = new KafkaAdminFactory(\n        new KafkaClientConfigUtil(\n            \"./uploads\",\n            \"TestPrefix\"\n        )\n    );", "modifier": "private final", "type": "KafkaAdminFactory", "declarator": "kafkaAdminFactory = new KafkaAdminFactory(\n        new KafkaClientConfigUtil(\n            \"./uploads\",\n            \"TestPrefix\"\n        )\n    )", "var_name": "kafkaAdminFactory"}, {"original_string": "private static KafkaOperations kafkaOperations = null;", "modifier": "private static", "type": "KafkaOperations", "declarator": "kafkaOperations = null", "var_name": "kafkaOperations"}], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/manager/kafka/KafkaOperationsTest.java"}, "test_case": {"identifier": "testGetTopicDetails", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetTopicDetails() {\n        final String[] brokerHostBits = sharedKafkaTestResource\n            .getKafkaConnectString()\n            .replaceAll(\"PLAINTEXT://\", \"\")\n            .split(\":\");\n        final String brokerHost = brokerHostBits[0];\n        final int brokerPort = Integer.valueOf(brokerHostBits[1]);\n\n        final String topic1 = \"MyTopic1\" + System.currentTimeMillis();\n        final String topic2 = \"MyTopic2\" + System.currentTimeMillis();\n\n        // Create two topics\n        sharedKafkaTestResource\n            .getKafkaTestUtils()\n            .createTopic(topic1, 2, (short) 1);\n\n        sharedKafkaTestResource\n            .getKafkaTestUtils()\n            .createTopic(topic2, 1, (short) 1);\n\n        final TopicDetails topicDetails = kafkaOperations.getTopicDetails(topic1);\n\n        assertEquals(\"Has correct name\", topic1, topicDetails.getName());\n        assertEquals(\"Is not internal\", false, topicDetails.isInternal());\n        assertEquals(\"Has 2 partitions\", 2, topicDetails.getPartitions().size());\n\n        final PartitionDetails partition0 = topicDetails.getPartitions().get(0);\n        assertEquals(\"Has correct topic name\", topic1, partition0.getTopic());\n        assertEquals(\"Has correct partition\", 0, partition0.getPartition());\n        assertEquals(\"Has one replica\", 1, partition0.getReplicas().size());\n        assertEquals(\"Has one isr\", 1, partition0.getIsr().size());\n        assertNotNull(\"Has a leader\", partition0.getLeader());\n\n        // Validate leader, isr, replica\n        validateNode(partition0.getLeader(), 1, brokerHost, brokerPort);\n        validateNode(partition0.getIsr().get(0), 1, brokerHost, brokerPort);\n        validateNode(partition0.getReplicas().get(0), 1, brokerHost, brokerPort);\n\n        final PartitionDetails partition1 = topicDetails.getPartitions().get(1);\n        assertEquals(\"Has correct topic name\", topic1, partition1.getTopic());\n        assertEquals(\"Has correct partition\", 1, partition1.getPartition());\n        assertEquals(\"Has one replica\", 1, partition1.getReplicas().size());\n        assertEquals(\"Has one isr\", 1, partition1.getIsr().size());\n        assertNotNull(\"Has a leader\", partition1.getLeader());\n\n        // Validate leader, isr, replica\n        validateNode(partition1.getLeader(), 1, brokerHost, brokerPort);\n        validateNode(partition1.getIsr().get(0), 1, brokerHost, brokerPort);\n        validateNode(partition1.getReplicas().get(0), 1, brokerHost, brokerPort);\n\n    }", "signature": "void testGetTopicDetails()", "full_signature": "@Test public void testGetTopicDetails()", "class_method_signature": "KafkaOperationsTest.testGetTopicDetails()", "testcase": true, "constructor": false, "invocations": ["split", "replaceAll", "getKafkaConnectString", "valueOf", "currentTimeMillis", "currentTimeMillis", "createTopic", "getKafkaTestUtils", "createTopic", "getKafkaTestUtils", "getTopicDetails", "assertEquals", "getName", "assertEquals", "isInternal", "assertEquals", "size", "getPartitions", "get", "getPartitions", "assertEquals", "getTopic", "assertEquals", "getPartition", "assertEquals", "size", "getReplicas", "assertEquals", "size", "getIsr", "assertNotNull", "getLeader", "validateNode", "getLeader", "validateNode", "get", "getIsr", "validateNode", "get", "getReplicas", "get", "getPartitions", "assertEquals", "getTopic", "assertEquals", "getPartition", "assertEquals", "size", "getReplicas", "assertEquals", "size", "getIsr", "assertNotNull", "getLeader", "validateNode", "getLeader", "validateNode", "get", "getIsr", "validateNode", "get", "getReplicas"]}, "focal_class": {"identifier": "KafkaOperations", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private final AdminClient adminClient;", "modifier": "private final", "type": "AdminClient", "declarator": "adminClient", "var_name": "adminClient"}, {"original_string": "private final KafkaConsumer<String, String> consumerClient;", "modifier": "private final", "type": "KafkaConsumer<String, String>", "declarator": "consumerClient", "var_name": "consumerClient"}], "methods": [{"identifier": "KafkaOperations", "parameters": "(final AdminClient adminClient, final KafkaConsumer<String, String> consumerClient)", "modifiers": "public", "return": "", "signature": " KafkaOperations(final AdminClient adminClient, final KafkaConsumer<String, String> consumerClient)", "full_signature": "public  KafkaOperations(final AdminClient adminClient, final KafkaConsumer<String, String> consumerClient)", "class_method_signature": "KafkaOperations.KafkaOperations(final AdminClient adminClient, final KafkaConsumer<String, String> consumerClient)", "testcase": false, "constructor": true}, {"identifier": "getAvailableTopics", "parameters": "()", "modifiers": "public", "return": "TopicList", "signature": "TopicList getAvailableTopics()", "full_signature": "public TopicList getAvailableTopics()", "class_method_signature": "KafkaOperations.getAvailableTopics()", "testcase": false, "constructor": false}, {"identifier": "getClusterNodes", "parameters": "()", "modifiers": "public", "return": "NodeList", "signature": "NodeList getClusterNodes()", "full_signature": "public NodeList getClusterNodes()", "class_method_signature": "KafkaOperations.getClusterNodes()", "testcase": false, "constructor": false}, {"identifier": "getTopicDetails", "parameters": "(final Collection<String> topics)", "modifiers": "public", "return": "Map<String, TopicDetails>", "signature": "Map<String, TopicDetails> getTopicDetails(final Collection<String> topics)", "full_signature": "public Map<String, TopicDetails> getTopicDetails(final Collection<String> topics)", "class_method_signature": "KafkaOperations.getTopicDetails(final Collection<String> topics)", "testcase": false, "constructor": false}, {"identifier": "getTopicDetails", "parameters": "(final String topic)", "modifiers": "public", "return": "TopicDetails", "signature": "TopicDetails getTopicDetails(final String topic)", "full_signature": "public TopicDetails getTopicDetails(final String topic)", "class_method_signature": "KafkaOperations.getTopicDetails(final String topic)", "testcase": false, "constructor": false}, {"identifier": "getTopicConfig", "parameters": "(final String topic)", "modifiers": "public", "return": "TopicConfig", "signature": "TopicConfig getTopicConfig(final String topic)", "full_signature": "public TopicConfig getTopicConfig(final String topic)", "class_method_signature": "KafkaOperations.getTopicConfig(final String topic)", "testcase": false, "constructor": false}, {"identifier": "getBrokerConfig", "parameters": "(final String brokerId)", "modifiers": "public", "return": "BrokerConfig", "signature": "BrokerConfig getBrokerConfig(final String brokerId)", "full_signature": "public BrokerConfig getBrokerConfig(final String brokerId)", "class_method_signature": "KafkaOperations.getBrokerConfig(final String brokerId)", "testcase": false, "constructor": false}, {"identifier": "createTopic", "parameters": "(final CreateTopic createTopic)", "modifiers": "public", "return": "boolean", "signature": "boolean createTopic(final CreateTopic createTopic)", "full_signature": "public boolean createTopic(final CreateTopic createTopic)", "class_method_signature": "KafkaOperations.createTopic(final CreateTopic createTopic)", "testcase": false, "constructor": false}, {"identifier": "alterTopicConfig", "parameters": "(final String topic, final Map<String, String> configItems)", "modifiers": "public", "return": "TopicConfig", "signature": "TopicConfig alterTopicConfig(final String topic, final Map<String, String> configItems)", "full_signature": "public TopicConfig alterTopicConfig(final String topic, final Map<String, String> configItems)", "class_method_signature": "KafkaOperations.alterTopicConfig(final String topic, final Map<String, String> configItems)", "testcase": false, "constructor": false}, {"identifier": "removeTopic", "parameters": "(final String topic)", "modifiers": "public", "return": "boolean", "signature": "boolean removeTopic(final String topic)", "full_signature": "public boolean removeTopic(final String topic)", "class_method_signature": "KafkaOperations.removeTopic(final String topic)", "testcase": false, "constructor": false}, {"identifier": "listConsumers", "parameters": "()", "modifiers": "public", "return": "List<ConsumerGroupIdentifier>", "signature": "List<ConsumerGroupIdentifier> listConsumers()", "full_signature": "public List<ConsumerGroupIdentifier> listConsumers()", "class_method_signature": "KafkaOperations.listConsumers()", "testcase": false, "constructor": false}, {"identifier": "removeConsumerGroup", "parameters": "(final String id)", "modifiers": "public", "return": "boolean", "signature": "boolean removeConsumerGroup(final String id)", "full_signature": "public boolean removeConsumerGroup(final String id)", "class_method_signature": "KafkaOperations.removeConsumerGroup(final String id)", "testcase": false, "constructor": false}, {"identifier": "getConsumerGroupDetails", "parameters": "(final String consumerGroupId)", "modifiers": "public", "return": "ConsumerGroupDetails", "signature": "ConsumerGroupDetails getConsumerGroupDetails(final String consumerGroupId)", "full_signature": "public ConsumerGroupDetails getConsumerGroupDetails(final String consumerGroupId)", "class_method_signature": "KafkaOperations.getConsumerGroupDetails(final String consumerGroupId)", "testcase": false, "constructor": false}, {"identifier": "getConsumerGroupDetails", "parameters": "(final List<String> consumerGroupIds)", "modifiers": "public", "return": "List<ConsumerGroupDetails>", "signature": "List<ConsumerGroupDetails> getConsumerGroupDetails(final List<String> consumerGroupIds)", "full_signature": "public List<ConsumerGroupDetails> getConsumerGroupDetails(final List<String> consumerGroupIds)", "class_method_signature": "KafkaOperations.getConsumerGroupDetails(final List<String> consumerGroupIds)", "testcase": false, "constructor": false}, {"identifier": "getConsumerGroupOffsets", "parameters": "(final String consumerGroupId)", "modifiers": "public", "return": "ConsumerGroupOffsets", "signature": "ConsumerGroupOffsets getConsumerGroupOffsets(final String consumerGroupId)", "full_signature": "public ConsumerGroupOffsets getConsumerGroupOffsets(final String consumerGroupId)", "class_method_signature": "KafkaOperations.getConsumerGroupOffsets(final String consumerGroupId)", "testcase": false, "constructor": false}, {"identifier": "getConsumerGroupOffsetsWithTailOffsets", "parameters": "(final String consumerGroupId)", "modifiers": "public", "return": "ConsumerGroupOffsetsWithTailPositions", "signature": "ConsumerGroupOffsetsWithTailPositions getConsumerGroupOffsetsWithTailOffsets(final String consumerGroupId)", "full_signature": "public ConsumerGroupOffsetsWithTailPositions getConsumerGroupOffsetsWithTailOffsets(final String consumerGroupId)", "class_method_signature": "KafkaOperations.getConsumerGroupOffsetsWithTailOffsets(final String consumerGroupId)", "testcase": false, "constructor": false}, {"identifier": "getTailOffsets", "parameters": "(final String topic)", "modifiers": "public", "return": "TailOffsets", "signature": "TailOffsets getTailOffsets(final String topic)", "full_signature": "public TailOffsets getTailOffsets(final String topic)", "class_method_signature": "KafkaOperations.getTailOffsets(final String topic)", "testcase": false, "constructor": false}, {"identifier": "getTailOffsets", "parameters": "(final String topic, final Collection<Integer> partitions)", "modifiers": "public", "return": "TailOffsets", "signature": "TailOffsets getTailOffsets(final String topic, final Collection<Integer> partitions)", "full_signature": "public TailOffsets getTailOffsets(final String topic, final Collection<Integer> partitions)", "class_method_signature": "KafkaOperations.getTailOffsets(final String topic, final Collection<Integer> partitions)", "testcase": false, "constructor": false}, {"identifier": "describeResource", "parameters": "(final ConfigResource configResource)", "modifiers": "private", "return": "List<ConfigItem>", "signature": "List<ConfigItem> describeResource(final ConfigResource configResource)", "full_signature": "private List<ConfigItem> describeResource(final ConfigResource configResource)", "class_method_signature": "KafkaOperations.describeResource(final ConfigResource configResource)", "testcase": false, "constructor": false}, {"identifier": "handleExecutionException", "parameters": "(final ExecutionException executionException)", "modifiers": "private", "return": "RuntimeException", "signature": "RuntimeException handleExecutionException(final ExecutionException executionException)", "full_signature": "private RuntimeException handleExecutionException(final ExecutionException executionException)", "class_method_signature": "KafkaOperations.handleExecutionException(final ExecutionException executionException)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "KafkaOperations.close()", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/manager/kafka/KafkaOperations.java"}, "focal_method": {"identifier": "getTopicDetails", "parameters": "(final Collection<String> topics)", "modifiers": "public", "return": "Map<String, TopicDetails>", "body": "public Map<String, TopicDetails> getTopicDetails(final Collection<String> topics) {\n        final Map<String, TopicDetails> results = new HashMap<>();\n\n        try {\n            final Map<String, TopicDescription> topicDescriptionMap = adminClient.describeTopics(topics).all().get();\n\n            // Now parse results\n            for (final Map.Entry<String, TopicDescription> entry: topicDescriptionMap.entrySet()) {\n                final String topic = entry.getKey();\n                final TopicDescription topicDescription = entry.getValue();\n\n                final List<PartitionDetails> partitionDetails = new ArrayList<>();\n\n                for (final TopicPartitionInfo partitionInfo: topicDescription.partitions()) {\n                    final List<NodeDetails> isrNodes = new ArrayList<>();\n                    final List<NodeDetails> replicaNodes = new ArrayList<>();\n\n                    // Translate Leader\n                    final Node partitionLeader = partitionInfo.leader();\n                    final NodeDetails leaderNode = new NodeDetails(\n                        partitionLeader.id(), partitionLeader.host(), partitionLeader.port(), partitionLeader.rack()\n                    );\n\n                    // Translate ISR nodes\n                    for (final Node node: partitionInfo.isr()) {\n                        isrNodes.add(\n                            new NodeDetails(node.id(), node.host(), node.port(), node.rack())\n                        );\n                    }\n\n                    // Translate Replicas nodes\n                    for (final Node node: partitionInfo.replicas()) {\n                        replicaNodes.add(\n                            new NodeDetails(node.id(), node.host(), node.port(), node.rack())\n                        );\n                    }\n\n                    // Create the details\n                    final PartitionDetails partitionDetail = new PartitionDetails(\n                        topicDescription.name(),\n                        partitionInfo.partition(),\n                        leaderNode,\n                        replicaNodes,\n                        isrNodes\n                    );\n\n                    // Add to the list.\n                    partitionDetails.add(partitionDetail);\n\n                    // Create new TopicDetails.\n                    final TopicDetails topicDetails = new TopicDetails(\n                        topicDescription.name(),\n                        topicDescription.isInternal(),\n                        partitionDetails\n                    );\n                    results.put(topic, topicDetails);\n                }\n            }\n            // Return it\n            return results;\n        } catch (final ExecutionException e) {\n            throw handleExecutionException(e);\n        } catch (final InterruptedException exception) {\n            // TODO Handle this\n            throw new RuntimeException(exception.getMessage(), exception);\n        }\n    }", "signature": "Map<String, TopicDetails> getTopicDetails(final Collection<String> topics)", "full_signature": "public Map<String, TopicDetails> getTopicDetails(final Collection<String> topics)", "class_method_signature": "KafkaOperations.getTopicDetails(final Collection<String> topics)", "testcase": false, "constructor": false, "invocations": ["get", "all", "describeTopics", "entrySet", "getKey", "getValue", "partitions", "leader", "id", "host", "port", "rack", "isr", "add", "id", "host", "port", "rack", "replicas", "add", "id", "host", "port", "rack", "name", "partition", "add", "name", "isInternal", "put", "handleExecutionException", "getMessage"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}