{"test_class": {"identifier": "MeanAbsValueConvergenceCheckerTest", "superclass": "extends ConvergenceCheckerTest", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/composition/boosting/convergence/mean/MeanAbsValueConvergenceCheckerTest.java"}, "test_case": {"identifier": "testConvergenceCheckingWithAnomaliesInData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvergenceCheckingWithAnomaliesInData() {\n        data.put(666, VectorUtils.of(10, 11).labeled(100000.0));\n        LocalDatasetBuilder<Integer, LabeledVector<Double>> datasetBuilder = new LocalDatasetBuilder<>(data, 1);\n        ConvergenceChecker<Integer, LabeledVector<Double>> checker = createChecker(\n            new MeanAbsValueConvergenceCheckerFactory(0.1), datasetBuilder);\n\n        try (LocalDataset<EmptyContext, FeatureMatrixWithLabelsOnHeapData> dataset = datasetBuilder.build(\n            TestUtils.testEnvBuilder(),\n            new EmptyContextBuilder<>(), new FeatureMatrixWithLabelsOnHeapDataBuilder<>(vectorizer),\n            TestUtils.testEnvBuilder().buildForTrainer())) {\n\n            double onDSError = checker.computeMeanErrorOnDataset(dataset, notConvergedMdl);\n            Assert.assertEquals(9090.41, onDSError, 0.01);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }", "signature": "void testConvergenceCheckingWithAnomaliesInData()", "full_signature": "@Test public void testConvergenceCheckingWithAnomaliesInData()", "class_method_signature": "MeanAbsValueConvergenceCheckerTest.testConvergenceCheckingWithAnomaliesInData()", "testcase": true, "constructor": false, "invocations": ["put", "labeled", "of", "createChecker", "build", "testEnvBuilder", "buildForTrainer", "testEnvBuilder", "computeMeanErrorOnDataset", "assertEquals"]}, "focal_class": {"identifier": "MeanAbsValueConvergenceChecker", "superclass": "extends ConvergenceChecker<K, V>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 8534776439755210864L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 8534776439755210864L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "MeanAbsValueConvergenceChecker", "parameters": "(long sampleSize, IgniteFunction<Double, Double> externalLbToInternalMapping,\n        Loss loss, DatasetBuilder<K, V> datasetBuilder, Preprocessor<K, V> preprocessor, double precision)", "modifiers": "public", "return": "", "signature": " MeanAbsValueConvergenceChecker(long sampleSize, IgniteFunction<Double, Double> externalLbToInternalMapping,\n        Loss loss, DatasetBuilder<K, V> datasetBuilder, Preprocessor<K, V> preprocessor, double precision)", "full_signature": "public  MeanAbsValueConvergenceChecker(long sampleSize, IgniteFunction<Double, Double> externalLbToInternalMapping,\n        Loss loss, DatasetBuilder<K, V> datasetBuilder, Preprocessor<K, V> preprocessor, double precision)", "class_method_signature": "MeanAbsValueConvergenceChecker.MeanAbsValueConvergenceChecker(long sampleSize, IgniteFunction<Double, Double> externalLbToInternalMapping,\n        Loss loss, DatasetBuilder<K, V> datasetBuilder, Preprocessor<K, V> preprocessor, double precision)", "testcase": false, "constructor": true}, {"identifier": "computeMeanErrorOnDataset", "parameters": "(\n        Dataset<EmptyContext, ? extends FeatureMatrixWithLabelsOnHeapData> dataset,\n        ModelsComposition mdl)", "modifiers": "@Override public", "return": "Double", "signature": "Double computeMeanErrorOnDataset(\n        Dataset<EmptyContext, ? extends FeatureMatrixWithLabelsOnHeapData> dataset,\n        ModelsComposition mdl)", "full_signature": "@Override public Double computeMeanErrorOnDataset(\n        Dataset<EmptyContext, ? extends FeatureMatrixWithLabelsOnHeapData> dataset,\n        ModelsComposition mdl)", "class_method_signature": "MeanAbsValueConvergenceChecker.computeMeanErrorOnDataset(\n        Dataset<EmptyContext, ? extends FeatureMatrixWithLabelsOnHeapData> dataset,\n        ModelsComposition mdl)", "testcase": false, "constructor": false}, {"identifier": "computeStatisticOnPartition", "parameters": "(ModelsComposition mdl,\n        FeatureMatrixWithLabelsOnHeapData part)", "modifiers": "private", "return": "IgniteBiTuple<Double, Long>", "signature": "IgniteBiTuple<Double, Long> computeStatisticOnPartition(ModelsComposition mdl,\n        FeatureMatrixWithLabelsOnHeapData part)", "full_signature": "private IgniteBiTuple<Double, Long> computeStatisticOnPartition(ModelsComposition mdl,\n        FeatureMatrixWithLabelsOnHeapData part)", "class_method_signature": "MeanAbsValueConvergenceChecker.computeStatisticOnPartition(ModelsComposition mdl,\n        FeatureMatrixWithLabelsOnHeapData part)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(IgniteBiTuple<Double, Long> left, IgniteBiTuple<Double, Long> right)", "modifiers": "private", "return": "IgniteBiTuple<Double, Long>", "signature": "IgniteBiTuple<Double, Long> reduce(IgniteBiTuple<Double, Long> left, IgniteBiTuple<Double, Long> right)", "full_signature": "private IgniteBiTuple<Double, Long> reduce(IgniteBiTuple<Double, Long> left, IgniteBiTuple<Double, Long> right)", "class_method_signature": "MeanAbsValueConvergenceChecker.reduce(IgniteBiTuple<Double, Long> left, IgniteBiTuple<Double, Long> right)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/composition/boosting/convergence/mean/MeanAbsValueConvergenceChecker.java"}, "focal_method": {"identifier": "computeMeanErrorOnDataset", "parameters": "(\n        Dataset<EmptyContext, ? extends FeatureMatrixWithLabelsOnHeapData> dataset,\n        ModelsComposition mdl)", "modifiers": "@Override public", "return": "Double", "body": "@Override public Double computeMeanErrorOnDataset(\n        Dataset<EmptyContext, ? extends FeatureMatrixWithLabelsOnHeapData> dataset,\n        ModelsComposition mdl) {\n\n        IgniteBiTuple<Double, Long> sumAndCnt = dataset.compute(\n            partition -> computeStatisticOnPartition(mdl, partition),\n            this::reduce\n        );\n\n        if (sumAndCnt == null || sumAndCnt.getValue() == 0)\n            return Double.NaN;\n        return sumAndCnt.getKey() / sumAndCnt.getValue();\n    }", "signature": "Double computeMeanErrorOnDataset(\n        Dataset<EmptyContext, ? extends FeatureMatrixWithLabelsOnHeapData> dataset,\n        ModelsComposition mdl)", "full_signature": "@Override public Double computeMeanErrorOnDataset(\n        Dataset<EmptyContext, ? extends FeatureMatrixWithLabelsOnHeapData> dataset,\n        ModelsComposition mdl)", "class_method_signature": "MeanAbsValueConvergenceChecker.computeMeanErrorOnDataset(\n        Dataset<EmptyContext, ? extends FeatureMatrixWithLabelsOnHeapData> dataset,\n        ModelsComposition mdl)", "testcase": false, "constructor": false, "invocations": ["compute", "computeStatisticOnPartition", "getValue", "getKey", "getValue"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}