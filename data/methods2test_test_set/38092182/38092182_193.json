{"test_class": {"identifier": "AdLoadTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AdViewController adViewController;", "modifier": "private", "type": "AdViewController", "declarator": "adViewController", "var_name": "adViewController"}, {"original_string": "private HttpResponse response;", "modifier": "private", "type": "HttpResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private String standardExpectedJson;", "modifier": "private", "type": "String", "declarator": "standardExpectedJson", "var_name": "standardExpectedJson"}], "file": "MoPubAd/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java"}, "test_case": {"identifier": "fromHttpResponse_whenScrollableIsOne_shouldBeReflectedInJson", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fromHttpResponse_whenScrollableIsOne_shouldBeReflectedInJson() throws Exception {\n        String expectedJson = \"{\\\"Scrollable\\\":\\\"true\\\",\\\"Html-Response-Body\\\":\\\"\\\"}\";\n        response.addHeader(SCROLLABLE.getKey(), \"1\");\n        response.addHeader(AD_TYPE.getKey(), \"html\");\n\n\n        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);\n        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_BANNER.toString());\n\n        String actualJsonData = customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey());\n        JsonUtils.assertJsonStringMapsEqual(actualJsonData, expectedJson);\n    }", "signature": "void fromHttpResponse_whenScrollableIsOne_shouldBeReflectedInJson()", "full_signature": "@Test public void fromHttpResponse_whenScrollableIsOne_shouldBeReflectedInJson()", "class_method_signature": "AdLoadTaskTest.fromHttpResponse_whenScrollableIsOne_shouldBeReflectedInJson()", "testcase": true, "constructor": false, "invocations": ["addHeader", "getKey", "addHeader", "getKey", "fromHttpResponse", "isEqualTo", "assertThat", "get", "getParamsMap", "getKey", "toString", "get", "getParamsMap", "getKey", "assertJsonStringMapsEqual"]}, "focal_class": {"identifier": "AdLoadTask", "superclass": "", "interfaces": "", "fields": [{"original_string": "WeakReference<AdViewController> mWeakAdViewController;", "modifier": "", "type": "WeakReference<AdViewController>", "declarator": "mWeakAdViewController", "var_name": "mWeakAdViewController"}], "methods": [{"identifier": "AdLoadTask", "parameters": "(AdViewController adViewController)", "modifiers": "", "return": "", "signature": " AdLoadTask(AdViewController adViewController)", "full_signature": "  AdLoadTask(AdViewController adViewController)", "class_method_signature": "AdLoadTask.AdLoadTask(AdViewController adViewController)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "()", "modifiers": "abstract", "return": "void", "signature": "void execute()", "full_signature": "abstract void execute()", "class_method_signature": "AdLoadTask.execute()", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "abstract", "return": "void", "signature": "void cleanup()", "full_signature": "abstract void cleanup()", "class_method_signature": "AdLoadTask.cleanup()", "testcase": false, "constructor": false}, {"identifier": "fromHttpResponse", "parameters": "(HttpResponse response, AdViewController adViewController)", "modifiers": "static", "return": "AdLoadTask", "signature": "AdLoadTask fromHttpResponse(HttpResponse response, AdViewController adViewController)", "full_signature": "static AdLoadTask fromHttpResponse(HttpResponse response, AdViewController adViewController)", "class_method_signature": "AdLoadTask.fromHttpResponse(HttpResponse response, AdViewController adViewController)", "testcase": false, "constructor": false}], "file": "MoPubAd/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java"}, "focal_method": {"identifier": "fromHttpResponse", "parameters": "(HttpResponse response, AdViewController adViewController)", "modifiers": "static", "return": "AdLoadTask", "body": "static AdLoadTask fromHttpResponse(HttpResponse response, AdViewController adViewController) throws IOException {\n        return new TaskExtractor(response, adViewController).extract();\n    }", "signature": "AdLoadTask fromHttpResponse(HttpResponse response, AdViewController adViewController)", "full_signature": "static AdLoadTask fromHttpResponse(HttpResponse response, AdViewController adViewController)", "class_method_signature": "AdLoadTask.fromHttpResponse(HttpResponse response, AdViewController adViewController)", "testcase": false, "constructor": false, "invocations": ["extract"]}, "repository": {"repo_id": 38092182, "url": "https://github.com/harshalbenake/hbworkspace2-100", "language": "Java", "is_fork": false, "fork_count": 160, "stargazer_count": 191, "size": 307516, "license": "licensed"}}