{"test_class": {"identifier": "RouteServiceTest", "superclass": "", "interfaces": "implements SelectTestSql", "fields": [{"original_string": "private RouteService routeService = new RouteService();", "modifier": "private", "type": "RouteService", "declarator": "routeService = new RouteService()", "var_name": "routeService"}], "file": "baymax-core/src/test/java/com/tongbanjie/baymax/router/RouteServiceTest.java"}, "test_case": {"identifier": "testDoRoute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDoRoute() throws Exception {\n        ExecutePlan plan = routeService.doRoute(single14, null);\n        System.out.println(plan);\n        Assert.assertEquals(ExecuteType.ALL, plan.getExecuteType());\n        TrargetSqlEntity sql = plan.getSqlList().get(0);\n        Assert.assertEquals(\"p1\", sql.getPartition());\n        Assert.assertEquals(\"table1\", sql.getLogicTableName());\n        Assert.assertEquals(\"table1_1\", sql.getTargetTableName());\n        Assert.assertEquals(4, plan.getSqlList().size());\n    }", "signature": "void testDoRoute()", "full_signature": "@Test public void testDoRoute()", "class_method_signature": "RouteServiceTest.testDoRoute()", "testcase": true, "constructor": false, "invocations": ["doRoute", "println", "assertEquals", "getExecuteType", "get", "getSqlList", "assertEquals", "getPartition", "assertEquals", "getLogicTableName", "assertEquals", "getTargetTableName", "assertEquals", "size", "getSqlList"]}, "focal_class": {"identifier": "RouteService", "superclass": "", "interfaces": "implements IRouteService", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(RouteService.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RouteService.class)", "var_name": "logger"}], "methods": [{"identifier": "doRoute", "parameters": "(String sql, Map<Integer, ParameterCommand> parameterCommand)", "modifiers": "public", "return": "ExecutePlan", "signature": "ExecutePlan doRoute(String sql, Map<Integer, ParameterCommand> parameterCommand)", "full_signature": "public ExecutePlan doRoute(String sql, Map<Integer, ParameterCommand> parameterCommand)", "class_method_signature": "RouteService.doRoute(String sql, Map<Integer, ParameterCommand> parameterCommand)", "testcase": false, "constructor": false}, {"identifier": "route", "parameters": "(List<String> tables, List<CalculateUnit> units, String sql, SqlType sqlType)", "modifiers": "public", "return": "ExecutePlan", "signature": "ExecutePlan route(List<String> tables, List<CalculateUnit> units, String sql, SqlType sqlType)", "full_signature": "public ExecutePlan route(List<String> tables, List<CalculateUnit> units, String sql, SqlType sqlType)", "class_method_signature": "RouteService.route(List<String> tables, List<CalculateUnit> units, String sql, SqlType sqlType)", "testcase": false, "constructor": false}, {"identifier": "buildExecutePlanTypeNo", "parameters": "(String sql, String tableName, SqlType sqlType)", "modifiers": "private", "return": "ExecutePlan", "signature": "ExecutePlan buildExecutePlanTypeNo(String sql, String tableName, SqlType sqlType)", "full_signature": "private ExecutePlan buildExecutePlanTypeNo(String sql, String tableName, SqlType sqlType)", "class_method_signature": "RouteService.buildExecutePlanTypeNo(String sql, String tableName, SqlType sqlType)", "testcase": false, "constructor": false}, {"identifier": "buildExecutePlanTypeAll", "parameters": "(PartitionTable partitionTable, SqlType sqlType)", "modifiers": "private", "return": "ExecutePlan", "signature": "ExecutePlan buildExecutePlanTypeAll(PartitionTable partitionTable, SqlType sqlType)", "full_signature": "private ExecutePlan buildExecutePlanTypeAll(PartitionTable partitionTable, SqlType sqlType)", "class_method_signature": "RouteService.buildExecutePlanTypeAll(PartitionTable partitionTable, SqlType sqlType)", "testcase": false, "constructor": false}, {"identifier": "buildExecutePlanTypePartition", "parameters": "(PartitionTable partitionTable, SqlType sqlType, Set<TargetTableEntity> nodeSet)", "modifiers": "private", "return": "ExecutePlan", "signature": "ExecutePlan buildExecutePlanTypePartition(PartitionTable partitionTable, SqlType sqlType, Set<TargetTableEntity> nodeSet)", "full_signature": "private ExecutePlan buildExecutePlanTypePartition(PartitionTable partitionTable, SqlType sqlType, Set<TargetTableEntity> nodeSet)", "class_method_signature": "RouteService.buildExecutePlanTypePartition(PartitionTable partitionTable, SqlType sqlType, Set<TargetTableEntity> nodeSet)", "testcase": false, "constructor": false}, {"identifier": "buildParameters", "parameters": "(Map<Integer, ParameterCommand> commonds)", "modifiers": "public", "return": "List<Object>", "signature": "List<Object> buildParameters(Map<Integer, ParameterCommand> commonds)", "full_signature": "public List<Object> buildParameters(Map<Integer, ParameterCommand> commonds)", "class_method_signature": "RouteService.buildParameters(Map<Integer, ParameterCommand> commonds)", "testcase": false, "constructor": false}], "file": "baymax-core/src/main/java/com/tongbanjie/baymax/router/RouteService.java"}, "focal_method": {"identifier": "doRoute", "parameters": "(String sql, Map<Integer, ParameterCommand> parameterCommand)", "modifiers": "public", "return": "ExecutePlan", "body": "public ExecutePlan doRoute(String sql, Map<Integer, ParameterCommand> parameterCommand) {\n\n        SqlType sqlType = SqlTypeUtil.getSqlType(sql);\n\n        SqlParser parser = SqlParserFactory.getParser(sqlType);\n\n        if (parser == null){\n            return buildExecutePlanTypeNo(sql, null, sqlType);\n        }\n\n        // \u89e3\u6790\u7ed3\u679c\n        ParseResult result = new ParseResult();\n\n        // \u521d\u59cb\u5316\u89e3\u6790\u5668\n        parser.init(sql, buildParameters(parameterCommand));\n\n        // \u89e3\u6790\n        parser.parse(result);\n\n        // \u8def\u7531\n        ExecutePlan plan = route(result.getTables(), result.getCalculateUnits(), sql, sqlType);\n\n        // \u6539\u5199plan\u4e2dsql\n        parser.changeSql(result, plan);\n\n        return plan;\n    }", "signature": "ExecutePlan doRoute(String sql, Map<Integer, ParameterCommand> parameterCommand)", "full_signature": "public ExecutePlan doRoute(String sql, Map<Integer, ParameterCommand> parameterCommand)", "class_method_signature": "RouteService.doRoute(String sql, Map<Integer, ParameterCommand> parameterCommand)", "testcase": false, "constructor": false, "invocations": ["getSqlType", "getParser", "buildExecutePlanTypeNo", "init", "buildParameters", "parse", "route", "getTables", "getCalculateUnits", "changeSql"]}, "repository": {"repo_id": 59288941, "url": "https://github.com/tongbanjie/baymax", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 45, "size": 1578, "license": "licensed"}}