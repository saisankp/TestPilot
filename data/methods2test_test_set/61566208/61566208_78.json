{"test_class": {"identifier": "HMSDebuggerComponentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger( HMSDebuggerComponentTest.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger( HMSDebuggerComponentTest.class )", "var_name": "logger"}, {"original_string": "HMSDebuggerComponent debuggerUtil = mock( HMSDebuggerComponent.class );", "modifier": "", "type": "HMSDebuggerComponent", "declarator": "debuggerUtil = mock( HMSDebuggerComponent.class )", "var_name": "debuggerUtil"}, {"original_string": "@Mock\n    HmsSwitchManager hmsSwitchManager;", "modifier": "@Mock", "type": "HmsSwitchManager", "declarator": "hmsSwitchManager", "var_name": "hmsSwitchManager"}, {"original_string": "@Mock\n    HostDataAggregator hostDataAggregator;", "modifier": "@Mock", "type": "HostDataAggregator", "declarator": "hostDataAggregator", "var_name": "hostDataAggregator"}], "file": "modules/hms-aggregator/src/test/java/com/vmware/vrack/hms/aggregator/util/HMSDebuggerComponentTest.java"}, "test_case": {"identifier": "cleanHmsLogs_validInput_dirNotExist", "parameters": "()", "modifiers": "@Test( expected = HmsException.class ) public", "return": "void", "body": "@Test( expected = HmsException.class )\n    public void cleanHmsLogs_validInput_dirNotExist()\n        throws HmsException\n    {\n        // Calling with file that doesnot exist on system\n        debuggerUtil.cleanHmsDebugLogs( \"sampleDir\" );\n    }", "signature": "void cleanHmsLogs_validInput_dirNotExist()", "full_signature": "@Test( expected = HmsException.class ) public void cleanHmsLogs_validInput_dirNotExist()", "class_method_signature": "HMSDebuggerComponentTest.cleanHmsLogs_validInput_dirNotExist()", "testcase": true, "constructor": false, "invocations": ["cleanHmsDebugLogs"]}, "focal_class": {"identifier": "HMSDebuggerComponent", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger( HMSDebuggerComponent.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger( HMSDebuggerComponent.class )", "var_name": "logger"}, {"original_string": "public final String TIMESTAMP_FORMAT = \"yyyy-MM-dd_hh-mm-ss\";", "modifier": "public final", "type": "String", "declarator": "TIMESTAMP_FORMAT = \"yyyy-MM-dd_hh-mm-ss\"", "var_name": "TIMESTAMP_FORMAT"}, {"original_string": "public final String HMS_ARCHIVE_REGEX =\n        \"(.*)_hms_logs_((19|20)\\\\d\\\\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01]))_(([0-9]|0[0-9]|1[0-9]|2[0-3])-[0-5][0-9]-[0-5][0-9]).zip\";", "modifier": "public final", "type": "String", "declarator": "HMS_ARCHIVE_REGEX =\n        \"(.*)_hms_logs_((19|20)\\\\d\\\\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01]))_(([0-9]|0[0-9]|1[0-9]|2[0-3])-[0-5][0-9]-[0-5][0-9]).zip\"", "var_name": "HMS_ARCHIVE_REGEX"}, {"original_string": "public final String HMS_TIMESTAMP_EXTRACTION_REGEX =\n        \"_hms_logs_(((19|20)\\\\d\\\\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01]))_(([0-9]|0[0-9]|1[0-9]|2[0-3])-[0-5][0-9]-[0-5][0-9]))(.*)\";", "modifier": "public final", "type": "String", "declarator": "HMS_TIMESTAMP_EXTRACTION_REGEX =\n        \"_hms_logs_(((19|20)\\\\d\\\\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01]))_(([0-9]|0[0-9]|1[0-9]|2[0-3])-[0-5][0-9]-[0-5][0-9]))(.*)\"", "var_name": "HMS_TIMESTAMP_EXTRACTION_REGEX"}, {"original_string": "public final long logClearDurationInHours = 48;", "modifier": "public final", "type": "long", "declarator": "logClearDurationInHours = 48", "var_name": "logClearDurationInHours"}, {"original_string": "@Autowired\n    private HmsSwitchManager hmsSwitchManager;", "modifier": "@Autowired\n    private", "type": "HmsSwitchManager", "declarator": "hmsSwitchManager", "var_name": "hmsSwitchManager"}, {"original_string": "@Autowired\n    private HostDataAggregator hostDataAggregator;", "modifier": "@Autowired\n    private", "type": "HostDataAggregator", "declarator": "hostDataAggregator", "var_name": "hostDataAggregator"}], "methods": [{"identifier": "archiveHmsDebugLogs", "parameters": "( final String host_id, final String hmsIpAddr, final String hmsOobUsername,\n                                       final String hmsLogArchiverScript, final String hmsLogArchiveLocation,\n                                       final String hmsOobLogLocation, final String hmsIbLogLocation,\n                                       final int noOfLines, final EventComponent component )", "modifiers": "public", "return": "String", "signature": "String archiveHmsDebugLogs( final String host_id, final String hmsIpAddr, final String hmsOobUsername,\n                                       final String hmsLogArchiverScript, final String hmsLogArchiveLocation,\n                                       final String hmsOobLogLocation, final String hmsIbLogLocation,\n                                       final int noOfLines, final EventComponent component )", "full_signature": "public String archiveHmsDebugLogs( final String host_id, final String hmsIpAddr, final String hmsOobUsername,\n                                       final String hmsLogArchiverScript, final String hmsLogArchiveLocation,\n                                       final String hmsOobLogLocation, final String hmsIbLogLocation,\n                                       final int noOfLines, final EventComponent component )", "class_method_signature": "HMSDebuggerComponent.archiveHmsDebugLogs( final String host_id, final String hmsIpAddr, final String hmsOobUsername,\n                                       final String hmsLogArchiverScript, final String hmsLogArchiveLocation,\n                                       final String hmsOobLogLocation, final String hmsIbLogLocation,\n                                       final int noOfLines, final EventComponent component )", "testcase": false, "constructor": false}, {"identifier": "writeAllEventsToFile", "parameters": "( ServerNode node, String fileName, String logDirectoryPath )", "modifiers": "public", "return": "boolean", "signature": "boolean writeAllEventsToFile( ServerNode node, String fileName, String logDirectoryPath )", "full_signature": "public boolean writeAllEventsToFile( ServerNode node, String fileName, String logDirectoryPath )", "class_method_signature": "HMSDebuggerComponent.writeAllEventsToFile( ServerNode node, String fileName, String logDirectoryPath )", "testcase": false, "constructor": false}, {"identifier": "writeNBSwitchInfoToFile", "parameters": "( NBSwitchInfo node, String fileName, String logDirectoryPath )", "modifiers": "public", "return": "boolean", "signature": "boolean writeNBSwitchInfoToFile( NBSwitchInfo node, String fileName, String logDirectoryPath )", "full_signature": "public boolean writeNBSwitchInfoToFile( NBSwitchInfo node, String fileName, String logDirectoryPath )", "class_method_signature": "HMSDebuggerComponent.writeNBSwitchInfoToFile( NBSwitchInfo node, String fileName, String logDirectoryPath )", "testcase": false, "constructor": false}, {"identifier": "writeServerInfoToFile", "parameters": "( ServerInfo host, String fileName, String logDirectoryPath )", "modifiers": "public", "return": "boolean", "signature": "boolean writeServerInfoToFile( ServerInfo host, String fileName, String logDirectoryPath )", "full_signature": "public boolean writeServerInfoToFile( ServerInfo host, String fileName, String logDirectoryPath )", "class_method_signature": "HMSDebuggerComponent.writeServerInfoToFile( ServerInfo host, String fileName, String logDirectoryPath )", "testcase": false, "constructor": false}, {"identifier": "writeFile", "parameters": "( String eventsLogFilePath, String content )", "modifiers": "public", "return": "boolean", "signature": "boolean writeFile( String eventsLogFilePath, String content )", "full_signature": "public boolean writeFile( String eventsLogFilePath, String content )", "class_method_signature": "HMSDebuggerComponent.writeFile( String eventsLogFilePath, String content )", "testcase": false, "constructor": false}, {"identifier": "getAbsoluteFilePath", "parameters": "( String directoryLocation, String filename )", "modifiers": "public", "return": "String", "signature": "String getAbsoluteFilePath( String directoryLocation, String filename )", "full_signature": "public String getAbsoluteFilePath( String directoryLocation, String filename )", "class_method_signature": "HMSDebuggerComponent.getAbsoluteFilePath( String directoryLocation, String filename )", "testcase": false, "constructor": false}, {"identifier": "getEventsDataAsString", "parameters": "( ServerNode node )", "modifiers": "public", "return": "String", "signature": "String getEventsDataAsString( ServerNode node )", "full_signature": "public String getEventsDataAsString( ServerNode node )", "class_method_signature": "HMSDebuggerComponent.getEventsDataAsString( ServerNode node )", "testcase": false, "constructor": false}, {"identifier": "getSwitchEventsDataAsString", "parameters": "( SwitchNode node )", "modifiers": "public", "return": "String", "signature": "String getSwitchEventsDataAsString( SwitchNode node )", "full_signature": "public String getSwitchEventsDataAsString( SwitchNode node )", "class_method_signature": "HMSDebuggerComponent.getSwitchEventsDataAsString( SwitchNode node )", "testcase": false, "constructor": false}, {"identifier": "writeHmsLogs", "parameters": "( String node_id, String hmsLogArchiverScript, String hmsLogArchiveLocation,\n                                 String timestamp, int noOfLines, String nodeInfoLogFileName, String hmsArchiveName,\n                                 String hmsOobLogLocation, String hmsIbLogLocation,\n                                 final EventComponent isHostOrSwitch )", "modifiers": "public", "return": "boolean", "signature": "boolean writeHmsLogs( String node_id, String hmsLogArchiverScript, String hmsLogArchiveLocation,\n                                 String timestamp, int noOfLines, String nodeInfoLogFileName, String hmsArchiveName,\n                                 String hmsOobLogLocation, String hmsIbLogLocation,\n                                 final EventComponent isHostOrSwitch )", "full_signature": "public boolean writeHmsLogs( String node_id, String hmsLogArchiverScript, String hmsLogArchiveLocation,\n                                 String timestamp, int noOfLines, String nodeInfoLogFileName, String hmsArchiveName,\n                                 String hmsOobLogLocation, String hmsIbLogLocation,\n                                 final EventComponent isHostOrSwitch )", "class_method_signature": "HMSDebuggerComponent.writeHmsLogs( String node_id, String hmsLogArchiverScript, String hmsLogArchiveLocation,\n                                 String timestamp, int noOfLines, String nodeInfoLogFileName, String hmsArchiveName,\n                                 String hmsOobLogLocation, String hmsIbLogLocation,\n                                 final EventComponent isHostOrSwitch )", "testcase": false, "constructor": false}, {"identifier": "callLogArchiverShellScript", "parameters": "( String node_id, String hmsLogArchiverScript,\n                                               String hmsLogArchiveLocation, String eventsLogFileName,\n                                               String hmsArchiveName, String host_id, String timestamp,\n                                               String hmsOobLogFileName, String hmsIbLogLocation, int noOfLines )", "modifiers": "public", "return": "boolean", "signature": "boolean callLogArchiverShellScript( String node_id, String hmsLogArchiverScript,\n                                               String hmsLogArchiveLocation, String eventsLogFileName,\n                                               String hmsArchiveName, String host_id, String timestamp,\n                                               String hmsOobLogFileName, String hmsIbLogLocation, int noOfLines )", "full_signature": "public boolean callLogArchiverShellScript( String node_id, String hmsLogArchiverScript,\n                                               String hmsLogArchiveLocation, String eventsLogFileName,\n                                               String hmsArchiveName, String host_id, String timestamp,\n                                               String hmsOobLogFileName, String hmsIbLogLocation, int noOfLines )", "class_method_signature": "HMSDebuggerComponent.callLogArchiverShellScript( String node_id, String hmsLogArchiverScript,\n                                               String hmsLogArchiveLocation, String eventsLogFileName,\n                                               String hmsArchiveName, String host_id, String timestamp,\n                                               String hmsOobLogFileName, String hmsIbLogLocation, int noOfLines )", "testcase": false, "constructor": false}, {"identifier": "callServerLogArchiverShellScript", "parameters": "( String node_id, String hmsLogArchiverScript,\n                                                     String hmsLogArchiveLocation, String serverInfoFileName,\n                                                     String hmsArchiveName, String host_id, String timestamp,\n                                                     String hmsOobLogLocation, String hmsIbLogLocation, int noOfLines,\n                                                     String eventLogFileName )", "modifiers": "public", "return": "boolean", "signature": "boolean callServerLogArchiverShellScript( String node_id, String hmsLogArchiverScript,\n                                                     String hmsLogArchiveLocation, String serverInfoFileName,\n                                                     String hmsArchiveName, String host_id, String timestamp,\n                                                     String hmsOobLogLocation, String hmsIbLogLocation, int noOfLines,\n                                                     String eventLogFileName )", "full_signature": "public boolean callServerLogArchiverShellScript( String node_id, String hmsLogArchiverScript,\n                                                     String hmsLogArchiveLocation, String serverInfoFileName,\n                                                     String hmsArchiveName, String host_id, String timestamp,\n                                                     String hmsOobLogLocation, String hmsIbLogLocation, int noOfLines,\n                                                     String eventLogFileName )", "class_method_signature": "HMSDebuggerComponent.callServerLogArchiverShellScript( String node_id, String hmsLogArchiverScript,\n                                                     String hmsLogArchiveLocation, String serverInfoFileName,\n                                                     String hmsArchiveName, String host_id, String timestamp,\n                                                     String hmsOobLogLocation, String hmsIbLogLocation, int noOfLines,\n                                                     String eventLogFileName )", "testcase": false, "constructor": false}, {"identifier": "isParameterNotNullNonEmpty", "parameters": "( String param )", "modifiers": "public", "return": "boolean", "signature": "boolean isParameterNotNullNonEmpty( String param )", "full_signature": "public boolean isParameterNotNullNonEmpty( String param )", "class_method_signature": "HMSDebuggerComponent.isParameterNotNullNonEmpty( String param )", "testcase": false, "constructor": false}, {"identifier": "getCurrentTimestamp", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCurrentTimestamp()", "full_signature": "public String getCurrentTimestamp()", "class_method_signature": "HMSDebuggerComponent.getCurrentTimestamp()", "testcase": false, "constructor": false}, {"identifier": "getServerInfoOrNBSwitchInfoLogFilename", "parameters": "( String host_id, String timestamp,\n                                                          EventComponent isHostOrSwitch )", "modifiers": "public", "return": "String", "signature": "String getServerInfoOrNBSwitchInfoLogFilename( String host_id, String timestamp,\n                                                          EventComponent isHostOrSwitch )", "full_signature": "public String getServerInfoOrNBSwitchInfoLogFilename( String host_id, String timestamp,\n                                                          EventComponent isHostOrSwitch )", "class_method_signature": "HMSDebuggerComponent.getServerInfoOrNBSwitchInfoLogFilename( String host_id, String timestamp,\n                                                          EventComponent isHostOrSwitch )", "testcase": false, "constructor": false}, {"identifier": "getHmsEventsLogFilename", "parameters": "( String host_id, String timestamp )", "modifiers": "public", "return": "String", "signature": "String getHmsEventsLogFilename( String host_id, String timestamp )", "full_signature": "public String getHmsEventsLogFilename( String host_id, String timestamp )", "class_method_signature": "HMSDebuggerComponent.getHmsEventsLogFilename( String host_id, String timestamp )", "testcase": false, "constructor": false}, {"identifier": "getHmsOobLogFilename", "parameters": "( String host_id, String timestamp )", "modifiers": "public", "return": "String", "signature": "String getHmsOobLogFilename( String host_id, String timestamp )", "full_signature": "public String getHmsOobLogFilename( String host_id, String timestamp )", "class_method_signature": "HMSDebuggerComponent.getHmsOobLogFilename( String host_id, String timestamp )", "testcase": false, "constructor": false}, {"identifier": "getHmsLogArchiveName", "parameters": "( String host_id, String timestamp )", "modifiers": "public", "return": "String", "signature": "String getHmsLogArchiveName( String host_id, String timestamp )", "full_signature": "public String getHmsLogArchiveName( String host_id, String timestamp )", "class_method_signature": "HMSDebuggerComponent.getHmsLogArchiveName( String host_id, String timestamp )", "testcase": false, "constructor": false}, {"identifier": "cleanHmsDebugLogs", "parameters": "( String logArchiveDirectoryName )", "modifiers": "public", "return": "boolean", "signature": "boolean cleanHmsDebugLogs( String logArchiveDirectoryName )", "full_signature": "public boolean cleanHmsDebugLogs( String logArchiveDirectoryName )", "class_method_signature": "HMSDebuggerComponent.cleanHmsDebugLogs( String logArchiveDirectoryName )", "testcase": false, "constructor": false}, {"identifier": "isFileDeleteable", "parameters": "( String logArchiveName )", "modifiers": "public", "return": "boolean", "signature": "boolean isFileDeleteable( String logArchiveName )", "full_signature": "public boolean isFileDeleteable( String logArchiveName )", "class_method_signature": "HMSDebuggerComponent.isFileDeleteable( String logArchiveName )", "testcase": false, "constructor": false}, {"identifier": "parseDateFromFileName", "parameters": "( String logArchiveName )", "modifiers": "public", "return": "Date", "signature": "Date parseDateFromFileName( String logArchiveName )", "full_signature": "public Date parseDateFromFileName( String logArchiveName )", "class_method_signature": "HMSDebuggerComponent.parseDateFromFileName( String logArchiveName )", "testcase": false, "constructor": false}, {"identifier": "setHmsSwitchManager", "parameters": "( HmsSwitchManager hmsSwitchManager )", "modifiers": "public", "return": "void", "signature": "void setHmsSwitchManager( HmsSwitchManager hmsSwitchManager )", "full_signature": "public void setHmsSwitchManager( HmsSwitchManager hmsSwitchManager )", "class_method_signature": "HMSDebuggerComponent.setHmsSwitchManager( HmsSwitchManager hmsSwitchManager )", "testcase": false, "constructor": false}], "file": "modules/hms-aggregator/src/main/java/com/vmware/vrack/hms/aggregator/util/HMSDebuggerComponent.java"}, "focal_method": {"identifier": "cleanHmsDebugLogs", "parameters": "( String logArchiveDirectoryName )", "modifiers": "public", "return": "boolean", "body": "public boolean cleanHmsDebugLogs( String logArchiveDirectoryName )\n        throws HmsException\n    {\n        logger.debug( \"In cleanHmsDebugLogs(), trying to delete logs in this directory [ \" + logArchiveDirectoryName\n            + \" ]\" );\n        if ( logArchiveDirectoryName != null )\n        {\n            File logArchiveName = new File( logArchiveDirectoryName );\n            if ( logArchiveName.exists() && logArchiveName.isDirectory() && logArchiveName.canWrite() )\n            {\n                for ( File archive : logArchiveName.listFiles() )\n                {\n                    if ( archive.getName().matches( HMS_ARCHIVE_REGEX ) )\n                    {\n                        try\n                        {\n                            if ( isFileDeleteable( archive.getName() ) )\n                            {\n                                archive.delete();\n                            }\n                        }\n                        catch ( Exception e )\n                        {\n                            logger.error( \"Unable to delete log archive [ \" + archive.getName() + \" ] from filesystem.\",\n                                          e );\n                        }\n                    }\n                }\n                return true;\n            }\n            else\n            {\n                String err = \"[ \" + logArchiveDirectoryName + \" ] doesnot exist or is not a directory.\";\n                logger.error( err );\n                throw new HmsException( err );\n            }\n        }\n        else\n        {\n            String err = \"Absolute path for log directory [ \" + logArchiveDirectoryName + \" ] cannot be null\";\n            logger.error( err );\n            throw new HmsException( err );\n        }\n    }", "signature": "boolean cleanHmsDebugLogs( String logArchiveDirectoryName )", "full_signature": "public boolean cleanHmsDebugLogs( String logArchiveDirectoryName )", "class_method_signature": "HMSDebuggerComponent.cleanHmsDebugLogs( String logArchiveDirectoryName )", "testcase": false, "constructor": false, "invocations": ["debug", "exists", "isDirectory", "canWrite", "listFiles", "matches", "getName", "isFileDeleteable", "getName", "delete", "error", "getName", "error", "error"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}