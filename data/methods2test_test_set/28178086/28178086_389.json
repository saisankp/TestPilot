{"test_class": {"identifier": "MersenneTwisterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int SEED = 1234;", "modifier": "static final", "type": "int", "declarator": "SEED = 1234", "var_name": "SEED"}, {"original_string": "static final int N = 1000;", "modifier": "static final", "type": "int", "declarator": "N = 1000", "var_name": "N"}], "file": "jtstoolkit/src/test/java/ec/tstoolkit/random/MersenneTwisterTest.java"}, "test_case": {"identifier": "testNextIntNegativeBound", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testNextIntNegativeBound() {\n        createRNG().nextInt(-1);\n    }", "signature": "void testNextIntNegativeBound()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testNextIntNegativeBound()", "class_method_signature": "MersenneTwisterTest.testNextIntNegativeBound()", "testcase": true, "constructor": false, "invocations": ["nextInt", "createRNG"]}, "focal_class": {"identifier": "MersenneTwister", "superclass": "extends AbstractRNG", "interfaces": "", "fields": [{"original_string": "private static final int N = 624;", "modifier": "private static final", "type": "int", "declarator": "N = 624", "var_name": "N"}, {"original_string": "private static final int M = 397;", "modifier": "private static final", "type": "int", "declarator": "M = 397", "var_name": "M"}, {"original_string": "private static final int MATRIX_A = 0x9908b0df;", "modifier": "private static final", "type": "int", "declarator": "MATRIX_A = 0x9908b0df", "var_name": "MATRIX_A"}, {"original_string": "private static final int UPPER_MASK = 0x80000000;", "modifier": "private static final", "type": "int", "declarator": "UPPER_MASK = 0x80000000", "var_name": "UPPER_MASK"}, {"original_string": "private static final int LOWER_MASK = 0x7fffffff;", "modifier": "private static final", "type": "int", "declarator": "LOWER_MASK = 0x7fffffff", "var_name": "LOWER_MASK"}, {"original_string": "private static final int TEMPERING_MASK_B = 0x9d2c5680;", "modifier": "private static final", "type": "int", "declarator": "TEMPERING_MASK_B = 0x9d2c5680", "var_name": "TEMPERING_MASK_B"}, {"original_string": "private static final int TEMPERING_MASK_C = 0xefc60000;", "modifier": "private static final", "type": "int", "declarator": "TEMPERING_MASK_C = 0xefc60000", "var_name": "TEMPERING_MASK_C"}, {"original_string": "private static final int mag0 = 0x0;", "modifier": "private static final", "type": "int", "declarator": "mag0 = 0x0", "var_name": "mag0"}, {"original_string": "private static final int mag1 = MATRIX_A;", "modifier": "private static final", "type": "int", "declarator": "mag1 = MATRIX_A", "var_name": "mag1"}, {"original_string": "private int mti;", "modifier": "private", "type": "int", "declarator": "mti", "var_name": "mti"}, {"original_string": "private final int[] mt = new int[N];", "modifier": "private final", "type": "int[]", "declarator": "mt = new int[N]", "var_name": "mt"}], "methods": [{"identifier": "fromSystemNanoTime", "parameters": "()", "modifiers": "public static", "return": "MersenneTwister", "signature": "MersenneTwister fromSystemNanoTime()", "full_signature": "public static MersenneTwister fromSystemNanoTime()", "class_method_signature": "MersenneTwister.fromSystemNanoTime()", "testcase": false, "constructor": false}, {"identifier": "fromDate", "parameters": "(Date date)", "modifiers": "public static", "return": "MersenneTwister", "signature": "MersenneTwister fromDate(Date date)", "full_signature": "public static MersenneTwister fromDate(Date date)", "class_method_signature": "MersenneTwister.fromDate(Date date)", "testcase": false, "constructor": false}, {"identifier": "MersenneTwister", "parameters": "(final int seed)", "modifiers": "public", "return": "", "signature": " MersenneTwister(final int seed)", "full_signature": "public  MersenneTwister(final int seed)", "class_method_signature": "MersenneTwister.MersenneTwister(final int seed)", "testcase": false, "constructor": true}, {"identifier": "nextBlock", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void nextBlock()", "full_signature": "protected void nextBlock()", "class_method_signature": "MersenneTwister.nextBlock()", "testcase": false, "constructor": false}, {"identifier": "nextInt", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int nextInt()", "full_signature": "@Override public int nextInt()", "class_method_signature": "MersenneTwister.nextInt()", "testcase": false, "constructor": false}, {"identifier": "setSeed", "parameters": "(int seed)", "modifiers": "protected final", "return": "void", "signature": "void setSeed(int seed)", "full_signature": "protected final void setSeed(int seed)", "class_method_signature": "MersenneTwister.setSeed(int seed)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/random/MersenneTwister.java"}, "focal_method": {"identifier": "nextInt", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int nextInt() {\n        /* Each single bit including the sign bit will be random */\n        if (mti == N) {\n            nextBlock(); // generate N ints at one time\n        }\n        int y = mt[mti++];\n        y ^= (y >>> 11); // y ^= TEMPERING_SHIFT_U(y );\n        y ^= (y << 7) & TEMPERING_MASK_B; // y ^= TEMPERING_SHIFT_S(y) &\n        // TEMPERING_MASK_B;\n        y ^= (y << 15) & TEMPERING_MASK_C; // y ^= TEMPERING_SHIFT_T(y) &\n        // TEMPERING_MASK_C;\n        // y &= 0xffffffff; //you may delete this line if word size = 32\n        y ^= (y >>> 18); // y ^= TEMPERING_SHIFT_L(y);\n        return y;\n    }", "signature": "int nextInt()", "full_signature": "@Override public int nextInt()", "class_method_signature": "MersenneTwister.nextInt()", "testcase": false, "constructor": false, "invocations": ["nextBlock"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}