{"test_class": {"identifier": "TypeProducerFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TypeProducerFactory typeProducerFactory;", "modifier": "private", "type": "TypeProducerFactory", "declarator": "typeProducerFactory", "var_name": "typeProducerFactory"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/method/TypeProducerFactoryTest.java"}, "test_case": {"identifier": "createsProducerForSetOfTypeThatHasStringConstructor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createsProducerForSetOfTypeThatHasStringConstructor() throws Exception {\n        TypeProducer typeProducer =\n                typeProducerFactory\n                        .createTypeProducer(Set.class, ParameterizedTypeImpl.newParameterizedType(Set.class, StringConstructorClass.class));\n        assertEquals(CollectionStringConstructorProducer.class, typeProducer.getClass());\n    }", "signature": "void createsProducerForSetOfTypeThatHasStringConstructor()", "full_signature": "@Test public void createsProducerForSetOfTypeThatHasStringConstructor()", "class_method_signature": "TypeProducerFactoryTest.createsProducerForSetOfTypeThatHasStringConstructor()", "testcase": true, "constructor": false, "invocations": ["createTypeProducer", "newParameterizedType", "assertEquals", "getClass"]}, "focal_class": {"identifier": "TypeProducerFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createTypeProducer", "parameters": "(Class<?> aClass, Type genericType)", "modifiers": "public", "return": "TypeProducer", "signature": "TypeProducer createTypeProducer(Class<?> aClass, Type genericType)", "full_signature": "public TypeProducer createTypeProducer(Class<?> aClass, Type genericType)", "class_method_signature": "TypeProducerFactory.createTypeProducer(Class<?> aClass, Type genericType)", "testcase": false, "constructor": false}, {"identifier": "getActualTypeArgument", "parameters": "(Type type)", "modifiers": "private", "return": "Class<?>", "signature": "Class<?> getActualTypeArgument(Type type)", "full_signature": "private Class<?> getActualTypeArgument(Type type)", "class_method_signature": "TypeProducerFactory.getActualTypeArgument(Type type)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/method/TypeProducerFactory.java"}, "focal_method": {"identifier": "createTypeProducer", "parameters": "(Class<?> aClass, Type genericType)", "modifiers": "public", "return": "TypeProducer", "body": "public TypeProducer createTypeProducer(Class<?> aClass, Type genericType) {\n        if (aClass == List.class || aClass == Set.class || aClass == SortedSet.class) {\n            Class<?> actualTypeArgument = null;\n            if (genericType != null) {\n                actualTypeArgument = getActualTypeArgument(genericType);\n            }\n            Method methodValueOf;\n            Constructor<?> constructor;\n\n            if (actualTypeArgument == String.class || actualTypeArgument == null) {\n                return new CollectionStringProducer(aClass);\n            } else if ((methodValueOf = getStringValueOfMethod(actualTypeArgument)) != null) {\n                return new CollectionStringValueOfProducer(aClass, methodValueOf);\n            } else if ((constructor = getStringConstructor(actualTypeArgument)) != null) {\n                return new CollectionStringConstructorProducer(aClass, constructor);\n            }\n        } else {\n            Method methodValueOf;\n            Constructor<?> constructor;\n\n            if (aClass.isPrimitive()) {\n                return new PrimitiveTypeProducer(aClass);\n            } else if (aClass == String.class) {\n                return new StringProducer();\n            } else if ((methodValueOf = getStringValueOfMethod(aClass)) != null) {\n                return new StringValueOfProducer(methodValueOf);\n            } else if ((constructor = getStringConstructor(aClass)) != null) {\n                return new StringConstructorProducer(constructor);\n            }\n        }\n\n        throw new IllegalArgumentException(String.format(\"Unsupported type %s\", aClass));\n    }", "signature": "TypeProducer createTypeProducer(Class<?> aClass, Type genericType)", "full_signature": "public TypeProducer createTypeProducer(Class<?> aClass, Type genericType)", "class_method_signature": "TypeProducerFactory.createTypeProducer(Class<?> aClass, Type genericType)", "testcase": false, "constructor": false, "invocations": ["getActualTypeArgument", "getStringValueOfMethod", "getStringConstructor", "isPrimitive", "getStringValueOfMethod", "getStringConstructor", "format"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}