{"test_class": {"identifier": "TestAuditDBHelper", "superclass": "extends  AuditDBUtil", "interfaces": "", "fields": [], "file": "conduit-audit/src/test/java/com/inmobi/conduit/audit/util/TestAuditDBHelper.java"}, "test_case": {"identifier": "testRetrieve", "parameters": "()", "modifiers": "@Test(priority = 2) public", "return": "void", "body": "@Test(priority = 2)\n  public void testRetrieve() {\n    GroupBy groupBy = new GroupBy(\"TIER,HOSTNAME,CLUSTER\");\n    Filter filter = new Filter(\"hostname=\"+tuple1.getHostname());\n    AuditDBHelper helper = new AuditDBHelper(\n        ClientConfig.loadFromClasspath(AuditDBConstants.FEEDER_CONF_FILE));\n    Set<Tuple> tupleSet = helper.retrieve(toDate, fromDate, filter, groupBy);\n    Assert.assertEquals(1, tupleSet.size());\n    Iterator<Tuple> tupleSetIter = tupleSet.iterator();\n    Assert.assertTrue(tupleSetIter.hasNext());\n    Tuple returnedTuple = tupleSetIter.next();\n    Assert.assertEquals(tuple1.getHostname(), returnedTuple.getHostname());\n    Assert.assertEquals(tuple1.getTier(), returnedTuple.getTier());\n    Assert.assertEquals(null, returnedTuple.getTopic());\n    Assert.assertEquals(tuple1.getSent() + tuple2.getSent() + tuple3.getSent(),\n        returnedTuple.getSent());\n    for (LatencyColumns latencyColumns : LatencyColumns.values()) {\n      Long val1 = tuple1.getLatencyCountMap().get(latencyColumns);\n      if (val1 == null)\n        val1 = 0l;\n      Long val2 = tuple2.getLatencyCountMap().get(latencyColumns);\n      if (val2 == null)\n        val2 = 0l;\n      Long val3 = tuple3.getLatencyCountMap().get(latencyColumns);\n      if (val3 == null)\n        val3 = 0l;\n      Long val4 = returnedTuple.getLatencyCountMap().get(latencyColumns);\n      if (val4 == null)\n        val4 = 0l;\n      Long valx = val1 + val2 + val3;\n      Assert.assertEquals(valx, val4);\n    }\n    Assert.assertEquals((Long) (tuple1.getLostCount() + tuple2.getLostCount() +\n        tuple3.getLostCount()), returnedTuple.getLostCount());\n    filter = new Filter(null);\n    tupleSet = helper.retrieve(toDate, fromDate, filter, groupBy);\n    Assert.assertEquals(2, tupleSet.size());\n  }", "signature": "void testRetrieve()", "full_signature": "@Test(priority = 2) public void testRetrieve()", "class_method_signature": "TestAuditDBHelper.testRetrieve()", "testcase": true, "constructor": false, "invocations": ["getHostname", "loadFromClasspath", "retrieve", "assertEquals", "size", "iterator", "assertTrue", "hasNext", "next", "assertEquals", "getHostname", "getHostname", "assertEquals", "getTier", "getTier", "assertEquals", "getTopic", "assertEquals", "getSent", "getSent", "getSent", "getSent", "values", "get", "getLatencyCountMap", "get", "getLatencyCountMap", "get", "getLatencyCountMap", "get", "getLatencyCountMap", "assertEquals", "assertEquals", "getLostCount", "getLostCount", "getLostCount", "getLostCount", "retrieve", "assertEquals", "size"]}, "focal_class": {"identifier": "AuditDBHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final SimpleDateFormat DAY_CHK_FORMATTER = new SimpleDateFormat\n      (\"yyyy-MM-dd\");", "modifier": "public static final", "type": "SimpleDateFormat", "declarator": "DAY_CHK_FORMATTER = new SimpleDateFormat\n      (\"yyyy-MM-dd\")", "var_name": "DAY_CHK_FORMATTER"}, {"original_string": "public static final SimpleDateFormat TABLE_DATE_FORMATTER = new\n      SimpleDateFormat(\"yyyyMMdd\");", "modifier": "public static final", "type": "SimpleDateFormat", "declarator": "TABLE_DATE_FORMATTER = new\n      SimpleDateFormat(\"yyyyMMdd\")", "var_name": "TABLE_DATE_FORMATTER"}, {"original_string": "private static final Log LOG = LogFactory.getLog(AuditDBHelper.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(AuditDBHelper.class)", "var_name": "LOG"}, {"original_string": "private final ClientConfig config;", "modifier": "private final", "type": "ClientConfig", "declarator": "config", "var_name": "config"}, {"original_string": "final private String tableName;", "modifier": "final private", "type": "String", "declarator": "tableName", "var_name": "tableName"}], "methods": [{"identifier": "getTableName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTableName()", "full_signature": "public String getTableName()", "class_method_signature": "AuditDBHelper.getTableName()", "testcase": false, "constructor": false}, {"identifier": "AuditDBHelper", "parameters": "(ClientConfig config)", "modifiers": "public", "return": "", "signature": " AuditDBHelper(ClientConfig config)", "full_signature": "public  AuditDBHelper(ClientConfig config)", "class_method_signature": "AuditDBHelper.AuditDBHelper(ClientConfig config)", "testcase": false, "constructor": true}, {"identifier": "getConnection", "parameters": "(ClientConfig config)", "modifiers": "public static", "return": "Connection", "signature": "Connection getConnection(ClientConfig config)", "full_signature": "public static Connection getConnection(ClientConfig config)", "class_method_signature": "AuditDBHelper.getConnection(ClientConfig config)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "(String driverName, String url,\n      String username, String password)", "modifiers": "public static", "return": "Connection", "signature": "Connection getConnection(String driverName, String url,\n      String username, String password)", "full_signature": "public static Connection getConnection(String driverName, String url,\n      String username, String password)", "class_method_signature": "AuditDBHelper.getConnection(String driverName, String url,\n      String username, String password)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Set<Tuple> tupleSet)", "modifiers": "public", "return": "boolean", "signature": "boolean update(Set<Tuple> tupleSet)", "full_signature": "public boolean update(Set<Tuple> tupleSet)", "class_method_signature": "AuditDBHelper.update(Set<Tuple> tupleSet)", "testcase": false, "constructor": false}, {"identifier": "executeSelectStmtUpdation", "parameters": "(\n      PreparedStatement selectPreparedStatement, Tuple tuple)", "modifiers": "private static", "return": "ResultSet", "signature": "ResultSet executeSelectStmtUpdation(\n      PreparedStatement selectPreparedStatement, Tuple tuple)", "full_signature": "private static ResultSet executeSelectStmtUpdation(\n      PreparedStatement selectPreparedStatement, Tuple tuple)", "class_method_signature": "AuditDBHelper.executeSelectStmtUpdation(\n      PreparedStatement selectPreparedStatement, Tuple tuple)", "testcase": false, "constructor": false}, {"identifier": "getUpdateStmtForUpdation", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getUpdateStmtForUpdation()", "full_signature": "private String getUpdateStmtForUpdation()", "class_method_signature": "AuditDBHelper.getUpdateStmtForUpdation()", "testcase": false, "constructor": false}, {"identifier": "getInsertStmtForUpdation", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getInsertStmtForUpdation()", "full_signature": "private String getInsertStmtForUpdation()", "class_method_signature": "AuditDBHelper.getInsertStmtForUpdation()", "testcase": false, "constructor": false}, {"identifier": "getSelectStmtForUpdation", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSelectStmtForUpdation()", "full_signature": "public String getSelectStmtForUpdation()", "class_method_signature": "AuditDBHelper.getSelectStmtForUpdation()", "testcase": false, "constructor": false}, {"identifier": "addToInsertStatementBatch", "parameters": "(\n      PreparedStatement insertPreparedStatement, Tuple tuple)", "modifiers": "private static", "return": "boolean", "signature": "boolean addToInsertStatementBatch(\n      PreparedStatement insertPreparedStatement, Tuple tuple)", "full_signature": "private static boolean addToInsertStatementBatch(\n      PreparedStatement insertPreparedStatement, Tuple tuple)", "class_method_signature": "AuditDBHelper.addToInsertStatementBatch(\n      PreparedStatement insertPreparedStatement, Tuple tuple)", "testcase": false, "constructor": false}, {"identifier": "addToUpdateStatementBatch", "parameters": "(\n      PreparedStatement updatePreparedStatement, Tuple tuple, ResultSet rs)", "modifiers": "private static", "return": "boolean", "signature": "boolean addToUpdateStatementBatch(\n      PreparedStatement updatePreparedStatement, Tuple tuple, ResultSet rs)", "full_signature": "private static boolean addToUpdateStatementBatch(\n      PreparedStatement updatePreparedStatement, Tuple tuple, ResultSet rs)", "class_method_signature": "AuditDBHelper.addToUpdateStatementBatch(\n      PreparedStatement updatePreparedStatement, Tuple tuple, ResultSet rs)", "testcase": false, "constructor": false}, {"identifier": "retrieve", "parameters": "(Date toDate, Date fromDate, Filter filter,\n      GroupBy groupBy)", "modifiers": "public", "return": "Set<Tuple>", "signature": "Set<Tuple> retrieve(Date toDate, Date fromDate, Filter filter,\n      GroupBy groupBy)", "full_signature": "public Set<Tuple> retrieve(Date toDate, Date fromDate, Filter filter,\n      GroupBy groupBy)", "class_method_signature": "AuditDBHelper.retrieve(Date toDate, Date fromDate, Filter filter,\n      GroupBy groupBy)", "testcase": false, "constructor": false}, {"identifier": "createNewTuple", "parameters": "(ResultSet rs, GroupBy groupBy)", "modifiers": "private static", "return": "Tuple", "signature": "Tuple createNewTuple(ResultSet rs, GroupBy groupBy)", "full_signature": "private static Tuple createNewTuple(ResultSet rs, GroupBy groupBy)", "class_method_signature": "AuditDBHelper.createNewTuple(ResultSet rs, GroupBy groupBy)", "testcase": false, "constructor": false}, {"identifier": "getSelectStmtForRetrieve", "parameters": "(Filter filter, GroupBy groupBy)", "modifiers": "public", "return": "String", "signature": "String getSelectStmtForRetrieve(Filter filter, GroupBy groupBy)", "full_signature": "public String getSelectStmtForRetrieve(Filter filter, GroupBy groupBy)", "class_method_signature": "AuditDBHelper.getSelectStmtForRetrieve(Filter filter, GroupBy groupBy)", "testcase": false, "constructor": false}, {"identifier": "logNextException", "parameters": "(String message, SQLException e)", "modifiers": "public static", "return": "void", "signature": "void logNextException(String message, SQLException e)", "full_signature": "public static void logNextException(String message, SQLException e)", "class_method_signature": "AuditDBHelper.logNextException(String message, SQLException e)", "testcase": false, "constructor": false}, {"identifier": "addDaysToCurrentDate", "parameters": "(Integer dayIncrement)", "modifiers": "public static", "return": "Date", "signature": "Date addDaysToCurrentDate(Integer dayIncrement)", "full_signature": "public static Date addDaysToCurrentDate(Integer dayIncrement)", "class_method_signature": "AuditDBHelper.addDaysToCurrentDate(Integer dayIncrement)", "testcase": false, "constructor": false}, {"identifier": "addDaysToGivenDate", "parameters": "(Date date, int increment)", "modifiers": "public static", "return": "Date", "signature": "Date addDaysToGivenDate(Date date, int increment)", "full_signature": "public static Date addDaysToGivenDate(Date date, int increment)", "class_method_signature": "AuditDBHelper.addDaysToGivenDate(Date date, int increment)", "testcase": false, "constructor": false}, {"identifier": "getFirstMilliOfDay", "parameters": "(Date date)", "modifiers": "public static", "return": "Long", "signature": "Long getFirstMilliOfDay(Date date)", "full_signature": "public static Long getFirstMilliOfDay(Date date)", "class_method_signature": "AuditDBHelper.getFirstMilliOfDay(Date date)", "testcase": false, "constructor": false}], "file": "conduit-audit/src/main/java/com/inmobi/conduit/audit/util/AuditDBHelper.java"}, "focal_method": {"identifier": "retrieve", "parameters": "(Date toDate, Date fromDate, Filter filter,\n      GroupBy groupBy)", "modifiers": "public", "return": "Set<Tuple>", "body": "public Set<Tuple> retrieve(Date toDate, Date fromDate, Filter filter,\n      GroupBy groupBy) {\n    LOG.debug(\"Retrieving from db  from-time :\" + fromDate + \" to-date :\" + \":\"\n        + toDate + \" filter :\" + filter.toString());\n    Set<Tuple> tupleSet = new HashSet<Tuple>();\n\n    LOG.info(\"Connecting to DB ...\");\n    Connection connection = getConnection(\n        config.getString(AuditDBConstants.JDBC_DRIVER_CLASS_NAME),\n        config.getString(AuditDBConstants.DB_URL),\n        config.getString(AuditDBConstants.DB_USERNAME),\n        config.getString(AuditDBConstants.DB_PASSWORD));\n    if (connection == null) {\n      LOG.error(\"Connection not initialized returning ...\");\n      return null;\n    }\n    LOG.info(\"Connected to DB\");\n    ResultSet rs = null;\n    String statement = getSelectStmtForRetrieve(filter, groupBy);\n    LOG.debug(\"Select statement :\" + statement);\n    PreparedStatement preparedstatement = null;\n    try {\n      preparedstatement = connection.prepareStatement(statement);\n      int index = 1;\n      preparedstatement.setLong(index++, fromDate.getTime());\n      preparedstatement.setLong(index++, toDate.getTime());\n      if (filter.getFilters() != null) {\n        for (Column column : Column.values()) {\n          List<String> values = filter.getFilters().get(column);\n          if (values != null && !values.isEmpty()) {\n            for (String value : values) {\n              preparedstatement.setString(index++, value);\n            }\n          }\n        }\n      }\n      LOG.debug(\"Prepared statement is \" + preparedstatement.toString());\n      rs = preparedstatement.executeQuery();\n      while (rs.next()) {\n        Tuple tuple = createNewTuple(rs, groupBy);\n         if (tuple == null) {\n          LOG.error(\"Returned null tuple..returning\");\n          return null;\n        }\n        tupleSet.add(tuple);\n      }\n      connection.commit();\n    } catch (SQLException e) {\n      logNextException(\"SQLException encountered\", e);\n    } finally {\n      try {\n        if (rs != null)\n          rs.close();\n        if (preparedstatement != null)\n          preparedstatement.close();\n        connection.close();\n      } catch (SQLException e) {\n        logNextException(\"Exception while closing \", e);\n      }\n    }\n    return tupleSet;\n  }", "signature": "Set<Tuple> retrieve(Date toDate, Date fromDate, Filter filter,\n      GroupBy groupBy)", "full_signature": "public Set<Tuple> retrieve(Date toDate, Date fromDate, Filter filter,\n      GroupBy groupBy)", "class_method_signature": "AuditDBHelper.retrieve(Date toDate, Date fromDate, Filter filter,\n      GroupBy groupBy)", "testcase": false, "constructor": false, "invocations": ["debug", "toString", "info", "getConnection", "getString", "getString", "getString", "getString", "error", "info", "getSelectStmtForRetrieve", "debug", "prepareStatement", "setLong", "getTime", "setLong", "getTime", "getFilters", "values", "get", "getFilters", "isEmpty", "setString", "debug", "toString", "executeQuery", "next", "createNewTuple", "error", "add", "commit", "logNextException", "close", "close", "close", "logNextException"]}, "repository": {"repo_id": 7218024, "url": "https://github.com/InMobi/conduit", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 9, "size": 49400, "license": "licensed"}}