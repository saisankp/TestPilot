{"test_class": {"identifier": "DefinitionsChildIdTest", "superclass": "", "interfaces": "", "fields": [], "file": "org.eclipse.winery.common/src/test/java/org/eclipse/winery/common/ids/definitions/DefinitionsChildIdTest.java"}, "test_case": {"identifier": "compareTwoDefinitionsWithDifferentVersions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void compareTwoDefinitionsWithDifferentVersions() {\n        DefinitionsChildId newerVersion = new NodeTypeId(\"http://example.org/tosca/nodeTypes\", \"myNodeType_3.2.4-w7\", false);\n        DefinitionsChildId olderVersion = new NodeTypeId(\"http://example.org/tosca/nodeTypes\", \"myNodeType_3.2.4-w7-wip40\", false);\n\n        assertEquals(-1, olderVersion.compareTo(newerVersion));\n        assertEquals(1, newerVersion.compareTo(olderVersion));\n    }", "signature": "void compareTwoDefinitionsWithDifferentVersions()", "full_signature": "@Test public void compareTwoDefinitionsWithDifferentVersions()", "class_method_signature": "DefinitionsChildIdTest.compareTwoDefinitionsWithDifferentVersions()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "compareTo", "assertEquals", "compareTo"]}, "focal_class": {"identifier": "DefinitionsChildId", "superclass": "extends GenericId", "interfaces": "", "fields": [{"original_string": "public static final List<Class<? extends DefinitionsChildId>> ALL_TOSCA_COMPONENT_ID_CLASSES = Arrays.asList(\n        ArtifactTemplateId.class,\n        ArtifactTypeId.class,\n        CapabilityTypeId.class,\n        NodeTypeId.class,\n        NodeTypeImplementationId.class,\n        PolicyTemplateId.class,\n        PolicyTypeId.class,\n        RelationshipTypeId.class,\n        RelationshipTypeImplementationId.class,\n        RequirementTypeId.class,\n        ServiceTemplateId.class,\n        ComplianceRuleId.class,\n        PatternRefinementModelId.class,\n        TopologyFragmentRefinementModelId.class,\n        TestRefinementModelId.class\n    );", "modifier": "public static final", "type": "List<Class<? extends DefinitionsChildId>>", "declarator": "ALL_TOSCA_COMPONENT_ID_CLASSES = Arrays.asList(\n        ArtifactTemplateId.class,\n        ArtifactTypeId.class,\n        CapabilityTypeId.class,\n        NodeTypeId.class,\n        NodeTypeImplementationId.class,\n        PolicyTemplateId.class,\n        PolicyTypeId.class,\n        RelationshipTypeId.class,\n        RelationshipTypeImplementationId.class,\n        RequirementTypeId.class,\n        ServiceTemplateId.class,\n        ComplianceRuleId.class,\n        PatternRefinementModelId.class,\n        TopologyFragmentRefinementModelId.class,\n        TestRefinementModelId.class\n    )", "var_name": "ALL_TOSCA_COMPONENT_ID_CLASSES"}, {"original_string": "private final Namespace namespace;", "modifier": "private final", "type": "Namespace", "declarator": "namespace", "var_name": "namespace"}], "methods": [{"identifier": "DefinitionsChildId", "parameters": "(Namespace namespace, XmlId xmlId)", "modifiers": "public", "return": "", "signature": " DefinitionsChildId(Namespace namespace, XmlId xmlId)", "full_signature": "public  DefinitionsChildId(Namespace namespace, XmlId xmlId)", "class_method_signature": "DefinitionsChildId.DefinitionsChildId(Namespace namespace, XmlId xmlId)", "testcase": false, "constructor": true}, {"identifier": "DefinitionsChildId", "parameters": "(String ns, String id, boolean URLencoded)", "modifiers": "public", "return": "", "signature": " DefinitionsChildId(String ns, String id, boolean URLencoded)", "full_signature": "public  DefinitionsChildId(String ns, String id, boolean URLencoded)", "class_method_signature": "DefinitionsChildId.DefinitionsChildId(String ns, String id, boolean URLencoded)", "testcase": false, "constructor": true}, {"identifier": "DefinitionsChildId", "parameters": "(QName qname)", "modifiers": "public", "return": "", "signature": " DefinitionsChildId(QName qname)", "full_signature": "public  DefinitionsChildId(QName qname)", "class_method_signature": "DefinitionsChildId.DefinitionsChildId(QName qname)", "testcase": false, "constructor": true}, {"identifier": "getQName", "parameters": "()", "modifiers": "public", "return": "QName", "signature": "QName getQName()", "full_signature": "public QName getQName()", "class_method_signature": "DefinitionsChildId.getQName()", "testcase": false, "constructor": false}, {"identifier": "getNamespace", "parameters": "()", "modifiers": "public", "return": "Namespace", "signature": "Namespace getNamespace()", "full_signature": "public Namespace getNamespace()", "class_method_signature": "DefinitionsChildId.getNamespace()", "testcase": false, "constructor": false}, {"identifier": "getGroup", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getGroup()", "full_signature": "public abstract String getGroup()", "class_method_signature": "DefinitionsChildId.getGroup()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "DefinitionsChildId.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DefinitionsChildId.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DefinitionsChildId.toString()", "testcase": false, "constructor": false}, {"identifier": "toReadableString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toReadableString()", "full_signature": "public String toReadableString()", "class_method_signature": "DefinitionsChildId.toReadableString()", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "@Override public", "return": "GenericId", "signature": "GenericId getParent()", "full_signature": "@Override public GenericId getParent()", "class_method_signature": "DefinitionsChildId.getParent()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(GenericId o1)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(GenericId o1)", "full_signature": "@Override public int compareTo(GenericId o1)", "class_method_signature": "DefinitionsChildId.compareTo(GenericId o1)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.common/src/main/java/org/eclipse/winery/common/ids/definitions/DefinitionsChildId.java"}, "focal_method": {"identifier": "compareTo", "parameters": "(GenericId o1)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int compareTo(GenericId o1) {\n        if (o1 instanceof DefinitionsChildId) {\n            int res = this.getClass().getName().compareTo(o1.getClass().getName());\n            if (res == 0) {\n                DefinitionsChildId o = (DefinitionsChildId) o1;\n                res = VersionUtils.getNameWithoutVersion(this).compareTo(VersionUtils.getNameWithoutVersion(o));\n                if (res == 0) {\n                    res = VersionUtils.getVersion(this).compareTo(VersionUtils.getVersion(o));\n                }\n                if (res == 0) {\n                    res = this.getNamespace().compareTo(o.getNamespace());\n                }\n            }\n            return res;\n        } else {\n            // comparing TOSCAcomponentIDs with non-TOSCAcomponentIDs is not\n            // possible\n            throw new IllegalStateException();\n        }\n    }", "signature": "int compareTo(GenericId o1)", "full_signature": "@Override public int compareTo(GenericId o1)", "class_method_signature": "DefinitionsChildId.compareTo(GenericId o1)", "testcase": false, "constructor": false, "invocations": ["compareTo", "getName", "getClass", "getName", "getClass", "compareTo", "getNameWithoutVersion", "getNameWithoutVersion", "compareTo", "getVersion", "getVersion", "compareTo", "getNamespace", "getNamespace"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}