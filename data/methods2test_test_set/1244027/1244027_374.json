{"test_class": {"identifier": "FloatOperationsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FloatOperations ops = new FloatOperations();", "modifier": "private", "type": "FloatOperations", "declarator": "ops = new FloatOperations()", "var_name": "ops"}], "file": "modeshape-common/src/test/java/org/modeshape/common/math/FloatOperationsTest.java"}, "test_case": {"identifier": "shouldRoundNumbersGreaterThan10", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldRoundNumbersGreaterThan10() {\n        assertEquals(101.0f, ops.roundUp(101.2523f, 0), 0.01f);\n        assertEquals(101.0f, ops.roundUp(101.2323f, 0), 0.01f);\n        assertEquals(101.3f, ops.roundUp(101.2523f, 1), 0.01f);\n        assertEquals(101.2f, ops.roundUp(101.2323f, 1), 0.01f);\n        assertEquals(110.0f, ops.roundUp(109.2323f, -1), 1f);\n        assertEquals(100.0f, ops.roundUp(101.2323f, -1), 1f);\n    }", "signature": "void shouldRoundNumbersGreaterThan10()", "full_signature": "@Test public void shouldRoundNumbersGreaterThan10()", "class_method_signature": "FloatOperationsTest.shouldRoundNumbersGreaterThan10()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "roundUp", "assertEquals", "roundUp", "assertEquals", "roundUp", "assertEquals", "roundUp", "assertEquals", "roundUp", "assertEquals", "roundUp"]}, "focal_class": {"identifier": "FloatOperations", "superclass": "", "interfaces": "implements MathOperations<Float>, Comparator<Float>", "fields": [], "methods": [{"identifier": "getOperandClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<Float>", "signature": "Class<Float> getOperandClass()", "full_signature": "@Override public Class<Float> getOperandClass()", "class_method_signature": "FloatOperations.getOperandClass()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( Float value1,\n                      Float value2 )", "modifiers": "@Override public", "return": "Float", "signature": "Float add( Float value1,\n                      Float value2 )", "full_signature": "@Override public Float add( Float value1,\n                      Float value2 )", "class_method_signature": "FloatOperations.add( Float value1,\n                      Float value2 )", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "( Float value1,\n                           Float value2 )", "modifiers": "@Override public", "return": "Float", "signature": "Float subtract( Float value1,\n                           Float value2 )", "full_signature": "@Override public Float subtract( Float value1,\n                           Float value2 )", "class_method_signature": "FloatOperations.subtract( Float value1,\n                           Float value2 )", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "( Float value1,\n                           Float value2 )", "modifiers": "@Override public", "return": "Float", "signature": "Float multiply( Float value1,\n                           Float value2 )", "full_signature": "@Override public Float multiply( Float value1,\n                           Float value2 )", "class_method_signature": "FloatOperations.multiply( Float value1,\n                           Float value2 )", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "( Float value1,\n                          Float value2 )", "modifiers": "@Override public", "return": "double", "signature": "double divide( Float value1,\n                          Float value2 )", "full_signature": "@Override public double divide( Float value1,\n                          Float value2 )", "class_method_signature": "FloatOperations.divide( Float value1,\n                          Float value2 )", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "( Float value )", "modifiers": "@Override public", "return": "Float", "signature": "Float negate( Float value )", "full_signature": "@Override public Float negate( Float value )", "class_method_signature": "FloatOperations.negate( Float value )", "testcase": false, "constructor": false}, {"identifier": "increment", "parameters": "( Float value )", "modifiers": "@Override public", "return": "Float", "signature": "Float increment( Float value )", "full_signature": "@Override public Float increment( Float value )", "class_method_signature": "FloatOperations.increment( Float value )", "testcase": false, "constructor": false}, {"identifier": "maximum", "parameters": "( Float value1,\n                          Float value2 )", "modifiers": "@Override public", "return": "Float", "signature": "Float maximum( Float value1,\n                          Float value2 )", "full_signature": "@Override public Float maximum( Float value1,\n                          Float value2 )", "class_method_signature": "FloatOperations.maximum( Float value1,\n                          Float value2 )", "testcase": false, "constructor": false}, {"identifier": "minimum", "parameters": "( Float value1,\n                          Float value2 )", "modifiers": "@Override public", "return": "Float", "signature": "Float minimum( Float value1,\n                          Float value2 )", "full_signature": "@Override public Float minimum( Float value1,\n                          Float value2 )", "class_method_signature": "FloatOperations.minimum( Float value1,\n                          Float value2 )", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "( Float value1,\n                        Float value2 )", "modifiers": "@Override public", "return": "int", "signature": "int compare( Float value1,\n                        Float value2 )", "full_signature": "@Override public int compare( Float value1,\n                        Float value2 )", "class_method_signature": "FloatOperations.compare( Float value1,\n                        Float value2 )", "testcase": false, "constructor": false}, {"identifier": "asBigDecimal", "parameters": "( Float value )", "modifiers": "@Override public", "return": "BigDecimal", "signature": "BigDecimal asBigDecimal( Float value )", "full_signature": "@Override public BigDecimal asBigDecimal( Float value )", "class_method_signature": "FloatOperations.asBigDecimal( Float value )", "testcase": false, "constructor": false}, {"identifier": "fromBigDecimal", "parameters": "( BigDecimal value )", "modifiers": "@Override public", "return": "Float", "signature": "Float fromBigDecimal( BigDecimal value )", "full_signature": "@Override public Float fromBigDecimal( BigDecimal value )", "class_method_signature": "FloatOperations.fromBigDecimal( BigDecimal value )", "testcase": false, "constructor": false}, {"identifier": "createZeroValue", "parameters": "()", "modifiers": "@Override public", "return": "Float", "signature": "Float createZeroValue()", "full_signature": "@Override public Float createZeroValue()", "class_method_signature": "FloatOperations.createZeroValue()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( int value )", "modifiers": "@Override public", "return": "Float", "signature": "Float create( int value )", "full_signature": "@Override public Float create( int value )", "class_method_signature": "FloatOperations.create( int value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( long value )", "modifiers": "@Override public", "return": "Float", "signature": "Float create( long value )", "full_signature": "@Override public Float create( long value )", "class_method_signature": "FloatOperations.create( long value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( double value )", "modifiers": "@Override public", "return": "Float", "signature": "Float create( double value )", "full_signature": "@Override public Float create( double value )", "class_method_signature": "FloatOperations.create( double value )", "testcase": false, "constructor": false}, {"identifier": "sqrt", "parameters": "( Float value )", "modifiers": "@Override public", "return": "double", "signature": "double sqrt( Float value )", "full_signature": "@Override public double sqrt( Float value )", "class_method_signature": "FloatOperations.sqrt( Float value )", "testcase": false, "constructor": false}, {"identifier": "getComparator", "parameters": "()", "modifiers": "@Override public", "return": "Comparator<Float>", "signature": "Comparator<Float> getComparator()", "full_signature": "@Override public Comparator<Float> getComparator()", "class_method_signature": "FloatOperations.getComparator()", "testcase": false, "constructor": false}, {"identifier": "random", "parameters": "( Float minimum,\n                         Float maximum,\n                         Random rng )", "modifiers": "@Override public", "return": "Float", "signature": "Float random( Float minimum,\n                         Float maximum,\n                         Random rng )", "full_signature": "@Override public Float random( Float minimum,\n                         Float maximum,\n                         Random rng )", "class_method_signature": "FloatOperations.random( Float minimum,\n                         Float maximum,\n                         Random rng )", "testcase": false, "constructor": false}, {"identifier": "doubleValue", "parameters": "( Float value )", "modifiers": "@Override public", "return": "double", "signature": "double doubleValue( Float value )", "full_signature": "@Override public double doubleValue( Float value )", "class_method_signature": "FloatOperations.doubleValue( Float value )", "testcase": false, "constructor": false}, {"identifier": "floatValue", "parameters": "( Float value )", "modifiers": "@Override public", "return": "float", "signature": "float floatValue( Float value )", "full_signature": "@Override public float floatValue( Float value )", "class_method_signature": "FloatOperations.floatValue( Float value )", "testcase": false, "constructor": false}, {"identifier": "intValue", "parameters": "( Float value )", "modifiers": "@Override public", "return": "int", "signature": "int intValue( Float value )", "full_signature": "@Override public int intValue( Float value )", "class_method_signature": "FloatOperations.intValue( Float value )", "testcase": false, "constructor": false}, {"identifier": "longValue", "parameters": "( Float value )", "modifiers": "@Override public", "return": "long", "signature": "long longValue( Float value )", "full_signature": "@Override public long longValue( Float value )", "class_method_signature": "FloatOperations.longValue( Float value )", "testcase": false, "constructor": false}, {"identifier": "shortValue", "parameters": "( Float value )", "modifiers": "@Override public", "return": "short", "signature": "short shortValue( Float value )", "full_signature": "@Override public short shortValue( Float value )", "class_method_signature": "FloatOperations.shortValue( Float value )", "testcase": false, "constructor": false}, {"identifier": "getExponentInScientificNotation", "parameters": "( Float value )", "modifiers": "@Override public", "return": "int", "signature": "int getExponentInScientificNotation( Float value )", "full_signature": "@Override public int getExponentInScientificNotation( Float value )", "class_method_signature": "FloatOperations.getExponentInScientificNotation( Float value )", "testcase": false, "constructor": false}, {"identifier": "roundUp", "parameters": "( Float value,\n                          int decimalShift )", "modifiers": "@Override public", "return": "Float", "signature": "Float roundUp( Float value,\n                          int decimalShift )", "full_signature": "@Override public Float roundUp( Float value,\n                          int decimalShift )", "class_method_signature": "FloatOperations.roundUp( Float value,\n                          int decimalShift )", "testcase": false, "constructor": false}, {"identifier": "roundDown", "parameters": "( Float value,\n                            int decimalShift )", "modifiers": "@Override public", "return": "Float", "signature": "Float roundDown( Float value,\n                            int decimalShift )", "full_signature": "@Override public Float roundDown( Float value,\n                            int decimalShift )", "class_method_signature": "FloatOperations.roundDown( Float value,\n                            int decimalShift )", "testcase": false, "constructor": false}, {"identifier": "keepSignificantFigures", "parameters": "( Float value,\n                                         int numSigFigs )", "modifiers": "@Override public", "return": "Float", "signature": "Float keepSignificantFigures( Float value,\n                                         int numSigFigs )", "full_signature": "@Override public Float keepSignificantFigures( Float value,\n                                         int numSigFigs )", "class_method_signature": "FloatOperations.keepSignificantFigures( Float value,\n                                         int numSigFigs )", "testcase": false, "constructor": false}], "file": "modeshape-common/src/main/java/org/modeshape/common/math/FloatOperations.java"}, "focal_method": {"identifier": "roundUp", "parameters": "( Float value,\n                          int decimalShift )", "modifiers": "@Override public", "return": "Float", "body": "@Override\n    public Float roundUp( Float value,\n                          int decimalShift ) {\n        if (value == 0) return 0.0f;\n        double shiftedValue = (Math.abs(value.doubleValue()) * Math.pow(10.0d, decimalShift) + 0.5d) * Math.signum(value);\n        double roundedValue = (long)shiftedValue;\n        return (float)(roundedValue * Math.pow(10.0d, -decimalShift));\n    }", "signature": "Float roundUp( Float value,\n                          int decimalShift )", "full_signature": "@Override public Float roundUp( Float value,\n                          int decimalShift )", "class_method_signature": "FloatOperations.roundUp( Float value,\n                          int decimalShift )", "testcase": false, "constructor": false, "invocations": ["abs", "doubleValue", "pow", "signum", "pow"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}