{"test_class": {"identifier": "TransactionTest", "superclass": "", "interfaces": "", "fields": [], "file": "services/src/test/java/com/greensopinion/finance/services/domain/TransactionTest.java"}, "test_case": {"identifier": "equals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void equals() {\n\t\tDate date1 = new Date(1441842160000L);\n\t\tDate date2 = new Date(1441850000000L);\n\t\tTransaction transaction1 = new Transaction(date1, \"a desc\", 1003, null, null);\n\t\tTransaction transaction2 = new Transaction(date1, \"a desc\", 1003, null, \"123\");\n\t\tTransaction transaction3 = transaction1.withCategoryName(\"some category\");\n\n\t\tassertTransactionEqualsCaseInsensitive(transaction1);\n\t\tassertTransactionEqualsCaseInsensitive(transaction2);\n\t\tassertTransactionEqualsCaseInsensitive(transaction3);\n\n\t\tassertTransactionEquals(transaction1, transaction1);\n\t\tassertTransactionEquals(transaction1, transaction3);\n\t\tassertTransactionEquals(transaction1, new Transaction(date1, \"a desc\", 1003, null, null));\n\t\tassertTransactionEquals(transaction2, new Transaction(date1, \"a desc\", 1003, null, \"123\"));\n\n\t\tassertTransactionNotEquals(transaction1, new Object());\n\t\tassertTransactionNotEquals(transaction1, null);\n\t\tassertTransactionNotEquals(transaction1, transaction2);\n\t\tassertTransactionNotEquals(transaction1, new Transaction(date1, \"a desc\", 1004, null, null));\n\t\tassertTransactionNotEquals(transaction1, new Transaction(date1, \"a desc2\", 1003, null, null));\n\t\tassertTransactionNotEquals(transaction1, new Transaction(date2, \"a desc\", 1003, null, null));\n\t}", "signature": "void equals()", "full_signature": "@Test public void equals()", "class_method_signature": "TransactionTest.equals()", "testcase": true, "constructor": false, "invocations": ["withCategoryName", "assertTransactionEqualsCaseInsensitive", "assertTransactionEqualsCaseInsensitive", "assertTransactionEqualsCaseInsensitive", "assertTransactionEquals", "assertTransactionEquals", "assertTransactionEquals", "assertTransactionEquals", "assertTransactionNotEquals", "assertTransactionNotEquals", "assertTransactionNotEquals", "assertTransactionNotEquals", "assertTransactionNotEquals", "assertTransactionNotEquals"]}, "focal_class": {"identifier": "Transaction", "superclass": "", "interfaces": "implements Comparable<Transaction>", "fields": [{"original_string": "private final String id;", "modifier": "private final", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private final Date date;", "modifier": "private final", "type": "Date", "declarator": "date", "var_name": "date"}, {"original_string": "private final String description;", "modifier": "private final", "type": "String", "declarator": "description", "var_name": "description"}, {"original_string": "private final long amount;", "modifier": "private final", "type": "long", "declarator": "amount", "var_name": "amount"}, {"original_string": "private final String accountNumber;", "modifier": "private final", "type": "String", "declarator": "accountNumber", "var_name": "accountNumber"}, {"original_string": "private final String categoryName;", "modifier": "private final", "type": "String", "declarator": "categoryName", "var_name": "categoryName"}, {"original_string": "private transient final Category category;", "modifier": "private transient final", "type": "Category", "declarator": "category", "var_name": "category"}], "methods": [{"identifier": "Transaction", "parameters": "(Date date, String description, long amount, Category category, String accountNumber)", "modifiers": "public", "return": "", "signature": " Transaction(Date date, String description, long amount, Category category, String accountNumber)", "full_signature": "public  Transaction(Date date, String description, long amount, Category category, String accountNumber)", "class_method_signature": "Transaction.Transaction(Date date, String description, long amount, Category category, String accountNumber)", "testcase": false, "constructor": true}, {"identifier": "Transaction", "parameters": "(String id, Date date, String description, long amount, String categoryName, Category category,\n\t\t\tString accountNumber)", "modifiers": "private", "return": "", "signature": " Transaction(String id, Date date, String description, long amount, String categoryName, Category category,\n\t\t\tString accountNumber)", "full_signature": "private  Transaction(String id, Date date, String description, long amount, String categoryName, Category category,\n\t\t\tString accountNumber)", "class_method_signature": "Transaction.Transaction(String id, Date date, String description, long amount, String categoryName, Category category,\n\t\t\tString accountNumber)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getId()", "full_signature": "public String getId()", "class_method_signature": "Transaction.getId()", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getDate()", "full_signature": "public Date getDate()", "class_method_signature": "Transaction.getDate()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDescription()", "full_signature": "public String getDescription()", "class_method_signature": "Transaction.getDescription()", "testcase": false, "constructor": false}, {"identifier": "getAmount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getAmount()", "full_signature": "public long getAmount()", "class_method_signature": "Transaction.getAmount()", "testcase": false, "constructor": false}, {"identifier": "getAccountNumber", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAccountNumber()", "full_signature": "public String getAccountNumber()", "class_method_signature": "Transaction.getAccountNumber()", "testcase": false, "constructor": false}, {"identifier": "getCategory", "parameters": "()", "modifiers": "public", "return": "Category", "signature": "Category getCategory()", "full_signature": "public Category getCategory()", "class_method_signature": "Transaction.getCategory()", "testcase": false, "constructor": false}, {"identifier": "getCategoryName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCategoryName()", "full_signature": "public String getCategoryName()", "class_method_signature": "Transaction.getCategoryName()", "testcase": false, "constructor": false}, {"identifier": "withCategory", "parameters": "(Category category)", "modifiers": "public", "return": "Transaction", "signature": "Transaction withCategory(Category category)", "full_signature": "public Transaction withCategory(Category category)", "class_method_signature": "Transaction.withCategory(Category category)", "testcase": false, "constructor": false}, {"identifier": "withCategoryName", "parameters": "(String categoryName)", "modifiers": "public", "return": "Transaction", "signature": "Transaction withCategoryName(String categoryName)", "full_signature": "public Transaction withCategoryName(String categoryName)", "class_method_signature": "Transaction.withCategoryName(String categoryName)", "testcase": false, "constructor": false}, {"identifier": "withId", "parameters": "(String id)", "modifiers": "public", "return": "Transaction", "signature": "Transaction withId(String id)", "full_signature": "public Transaction withId(String id)", "class_method_signature": "Transaction.withId(String id)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Transaction.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Transaction.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Transaction o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(Transaction o)", "full_signature": "@Override public int compareTo(Transaction o)", "class_method_signature": "Transaction.compareTo(Transaction o)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Transaction.toString()", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/greensopinion/finance/services/domain/Transaction.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (obj == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (obj == this) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!(obj instanceof Transaction)) {\n\t\t\treturn false;\n\t\t}\n\t\tTransaction other = (Transaction) obj;\n\t\treturn amount == other.getAmount() && Objects.equals(getDate(), other.getDate())\n\t\t\t\t&& getDescription().equalsIgnoreCase(other.getDescription())\n\t\t\t\t&& Objects.equals(accountNumber, other.getAccountNumber());\n\t}", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Transaction.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["getAmount", "equals", "getDate", "getDate", "equalsIgnoreCase", "getDescription", "getDescription", "equals", "getAccountNumber"]}, "repository": {"repo_id": 54854741, "url": "https://github.com/greensopinion/greenbeans", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 30, "size": 1684, "license": "licensed"}}