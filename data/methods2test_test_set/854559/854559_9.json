{"test_class": {"identifier": "TransactionEventHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DEFAULT_TOTAL_ITEMS = 100;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_TOTAL_ITEMS = 100", "var_name": "DEFAULT_TOTAL_ITEMS"}, {"original_string": "private static final int DEFAULT_ITEM_PRICE = 10;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_ITEM_PRICE = 10", "var_name": "DEFAULT_ITEM_PRICE"}, {"original_string": "private static final String DEFAULT_COMPANY_NAME = \"Test Company\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_COMPANY_NAME = \"Test Company\"", "var_name": "DEFAULT_COMPANY_NAME"}, {"original_string": "private final OrderBookViewRepository orderBookViewRepository = mock(OrderBookViewRepository.class);", "modifier": "private final", "type": "OrderBookViewRepository", "declarator": "orderBookViewRepository = mock(OrderBookViewRepository.class)", "var_name": "orderBookViewRepository"}, {"original_string": "private final TransactionViewRepository transactionViewRepository = mock(TransactionViewRepository.class);", "modifier": "private final", "type": "TransactionViewRepository", "declarator": "transactionViewRepository = mock(TransactionViewRepository.class)", "var_name": "transactionViewRepository"}, {"original_string": "private TransactionEventHandler testSubject;", "modifier": "private", "type": "TransactionEventHandler", "declarator": "testSubject", "var_name": "testSubject"}, {"original_string": "private final TransactionId transactionIdentifier = new TransactionId();", "modifier": "private final", "type": "TransactionId", "declarator": "transactionIdentifier = new TransactionId()", "var_name": "transactionIdentifier"}, {"original_string": "private final OrderBookId orderBookIdentifier = new OrderBookId();", "modifier": "private final", "type": "OrderBookId", "declarator": "orderBookIdentifier = new OrderBookId()", "var_name": "orderBookIdentifier"}, {"original_string": "private final PortfolioId portfolioIdentifier = new PortfolioId();", "modifier": "private final", "type": "PortfolioId", "declarator": "portfolioIdentifier = new PortfolioId()", "var_name": "portfolioIdentifier"}, {"original_string": "private final CompanyId companyIdentifier = new CompanyId();", "modifier": "private final", "type": "CompanyId", "declarator": "companyIdentifier = new CompanyId()", "var_name": "companyIdentifier"}], "file": "query/src/test/java/org/axonframework/samples/trader/query/transaction/TransactionEventHandlerTest.java"}, "test_case": {"identifier": "handleSellTransactionCancelledEvent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void handleSellTransactionCancelledEvent() {\n        TransactionView transactionView = new TransactionView();\n        transactionView.setIdentifier(transactionIdentifier.getIdentifier());\n        transactionView.setAmountOfExecutedItems(0);\n        transactionView.setPricePerItem(DEFAULT_ITEM_PRICE);\n        transactionView.setState(STARTED);\n        transactionView.setAmountOfItems(DEFAULT_TOTAL_ITEMS);\n        transactionView.setCompanyName(DEFAULT_COMPANY_NAME);\n        transactionView.setOrderBookId(orderBookIdentifier.getIdentifier());\n        transactionView.setPortfolioId(portfolioIdentifier.getIdentifier());\n        transactionView.setType(SELL);\n\n        when(transactionViewRepository.findOne(transactionIdentifier.getIdentifier())).thenReturn(transactionView);\n\n        testSubject.on(new SellTransactionCancelledEvent(transactionIdentifier,\n                                                         DEFAULT_TOTAL_ITEMS,\n                                                         DEFAULT_TOTAL_ITEMS));\n\n        verify(transactionViewRepository).save(argThat(new TransactionEntryMatcher(\n                DEFAULT_TOTAL_ITEMS, 0, DEFAULT_COMPANY_NAME, DEFAULT_ITEM_PRICE, CANCELLED, SELL\n        )));\n    }", "signature": "void handleSellTransactionCancelledEvent()", "full_signature": "@Test public void handleSellTransactionCancelledEvent()", "class_method_signature": "TransactionEventHandlerTest.handleSellTransactionCancelledEvent()", "testcase": true, "constructor": false, "invocations": ["setIdentifier", "getIdentifier", "setAmountOfExecutedItems", "setPricePerItem", "setState", "setAmountOfItems", "setCompanyName", "setOrderBookId", "getIdentifier", "setPortfolioId", "getIdentifier", "setType", "thenReturn", "when", "findOne", "getIdentifier", "on", "save", "verify", "argThat"]}, "focal_class": {"identifier": "TransactionEventHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final OrderBookViewRepository orderBookViewRepository;", "modifier": "private final", "type": "OrderBookViewRepository", "declarator": "orderBookViewRepository", "var_name": "orderBookViewRepository"}, {"original_string": "private final TransactionViewRepository transactionViewRepository;", "modifier": "private final", "type": "TransactionViewRepository", "declarator": "transactionViewRepository", "var_name": "transactionViewRepository"}], "methods": [{"identifier": "TransactionEventHandler", "parameters": "(OrderBookViewRepository orderBookViewRepository,\n                                   TransactionViewRepository transactionViewRepository)", "modifiers": "@Autowired public", "return": "", "signature": " TransactionEventHandler(OrderBookViewRepository orderBookViewRepository,\n                                   TransactionViewRepository transactionViewRepository)", "full_signature": "@Autowired public  TransactionEventHandler(OrderBookViewRepository orderBookViewRepository,\n                                   TransactionViewRepository transactionViewRepository)", "class_method_signature": "TransactionEventHandler.TransactionEventHandler(OrderBookViewRepository orderBookViewRepository,\n                                   TransactionViewRepository transactionViewRepository)", "testcase": false, "constructor": true}, {"identifier": "on", "parameters": "(BuyTransactionStartedEvent event)", "modifiers": "@EventHandler public", "return": "void", "signature": "void on(BuyTransactionStartedEvent event)", "full_signature": "@EventHandler public void on(BuyTransactionStartedEvent event)", "class_method_signature": "TransactionEventHandler.on(BuyTransactionStartedEvent event)", "testcase": false, "constructor": false}, {"identifier": "on", "parameters": "(SellTransactionStartedEvent event)", "modifiers": "@EventHandler public", "return": "void", "signature": "void on(SellTransactionStartedEvent event)", "full_signature": "@EventHandler public void on(SellTransactionStartedEvent event)", "class_method_signature": "TransactionEventHandler.on(SellTransactionStartedEvent event)", "testcase": false, "constructor": false}, {"identifier": "startTransaction", "parameters": "(AbstractTransactionStartedEvent event, TransactionType type)", "modifiers": "private", "return": "void", "signature": "void startTransaction(AbstractTransactionStartedEvent event, TransactionType type)", "full_signature": "private void startTransaction(AbstractTransactionStartedEvent event, TransactionType type)", "class_method_signature": "TransactionEventHandler.startTransaction(AbstractTransactionStartedEvent event, TransactionType type)", "testcase": false, "constructor": false}, {"identifier": "on", "parameters": "(BuyTransactionCancelledEvent event)", "modifiers": "@EventHandler public", "return": "void", "signature": "void on(BuyTransactionCancelledEvent event)", "full_signature": "@EventHandler public void on(BuyTransactionCancelledEvent event)", "class_method_signature": "TransactionEventHandler.on(BuyTransactionCancelledEvent event)", "testcase": false, "constructor": false}, {"identifier": "on", "parameters": "(SellTransactionCancelledEvent event)", "modifiers": "@EventHandler public", "return": "void", "signature": "void on(SellTransactionCancelledEvent event)", "full_signature": "@EventHandler public void on(SellTransactionCancelledEvent event)", "class_method_signature": "TransactionEventHandler.on(SellTransactionCancelledEvent event)", "testcase": false, "constructor": false}, {"identifier": "on", "parameters": "(BuyTransactionConfirmedEvent event)", "modifiers": "@EventHandler public", "return": "void", "signature": "void on(BuyTransactionConfirmedEvent event)", "full_signature": "@EventHandler public void on(BuyTransactionConfirmedEvent event)", "class_method_signature": "TransactionEventHandler.on(BuyTransactionConfirmedEvent event)", "testcase": false, "constructor": false}, {"identifier": "on", "parameters": "(SellTransactionConfirmedEvent event)", "modifiers": "@EventHandler public", "return": "void", "signature": "void on(SellTransactionConfirmedEvent event)", "full_signature": "@EventHandler public void on(SellTransactionConfirmedEvent event)", "class_method_signature": "TransactionEventHandler.on(SellTransactionConfirmedEvent event)", "testcase": false, "constructor": false}, {"identifier": "changeStateOfTransaction", "parameters": "(String identifier, TransactionState newState)", "modifiers": "private", "return": "void", "signature": "void changeStateOfTransaction(String identifier, TransactionState newState)", "full_signature": "private void changeStateOfTransaction(String identifier, TransactionState newState)", "class_method_signature": "TransactionEventHandler.changeStateOfTransaction(String identifier, TransactionState newState)", "testcase": false, "constructor": false}, {"identifier": "on", "parameters": "(BuyTransactionExecutedEvent event)", "modifiers": "@EventHandler public", "return": "void", "signature": "void on(BuyTransactionExecutedEvent event)", "full_signature": "@EventHandler public void on(BuyTransactionExecutedEvent event)", "class_method_signature": "TransactionEventHandler.on(BuyTransactionExecutedEvent event)", "testcase": false, "constructor": false}, {"identifier": "on", "parameters": "(SellTransactionExecutedEvent event)", "modifiers": "@EventHandler public", "return": "void", "signature": "void on(SellTransactionExecutedEvent event)", "full_signature": "@EventHandler public void on(SellTransactionExecutedEvent event)", "class_method_signature": "TransactionEventHandler.on(SellTransactionExecutedEvent event)", "testcase": false, "constructor": false}, {"identifier": "executeTransaction", "parameters": "(AbstractTransactionExecutedEvent event)", "modifiers": "private", "return": "void", "signature": "void executeTransaction(AbstractTransactionExecutedEvent event)", "full_signature": "private void executeTransaction(AbstractTransactionExecutedEvent event)", "class_method_signature": "TransactionEventHandler.executeTransaction(AbstractTransactionExecutedEvent event)", "testcase": false, "constructor": false}, {"identifier": "on", "parameters": "(BuyTransactionPartiallyExecutedEvent event)", "modifiers": "@EventHandler public", "return": "void", "signature": "void on(BuyTransactionPartiallyExecutedEvent event)", "full_signature": "@EventHandler public void on(BuyTransactionPartiallyExecutedEvent event)", "class_method_signature": "TransactionEventHandler.on(BuyTransactionPartiallyExecutedEvent event)", "testcase": false, "constructor": false}, {"identifier": "on", "parameters": "(SellTransactionPartiallyExecutedEvent event)", "modifiers": "@EventHandler public", "return": "void", "signature": "void on(SellTransactionPartiallyExecutedEvent event)", "full_signature": "@EventHandler public void on(SellTransactionPartiallyExecutedEvent event)", "class_method_signature": "TransactionEventHandler.on(SellTransactionPartiallyExecutedEvent event)", "testcase": false, "constructor": false}, {"identifier": "partiallyExecuteTransaction", "parameters": "(AbstractTransactionPartiallyExecutedEvent event)", "modifiers": "private", "return": "void", "signature": "void partiallyExecuteTransaction(AbstractTransactionPartiallyExecutedEvent event)", "full_signature": "private void partiallyExecuteTransaction(AbstractTransactionPartiallyExecutedEvent event)", "class_method_signature": "TransactionEventHandler.partiallyExecuteTransaction(AbstractTransactionPartiallyExecutedEvent event)", "testcase": false, "constructor": false}], "file": "query/src/main/java/org/axonframework/samples/trader/query/transaction/TransactionEventHandler.java"}, "focal_method": {"identifier": "on", "parameters": "(BuyTransactionStartedEvent event)", "modifiers": "@EventHandler public", "return": "void", "body": "@EventHandler\n    public void on(BuyTransactionStartedEvent event) {\n        startTransaction(event, TransactionType.BUY);\n    }", "signature": "void on(BuyTransactionStartedEvent event)", "full_signature": "@EventHandler public void on(BuyTransactionStartedEvent event)", "class_method_signature": "TransactionEventHandler.on(BuyTransactionStartedEvent event)", "testcase": false, "constructor": false, "invocations": ["startTransaction"]}, "repository": {"repo_id": 854559, "url": "https://github.com/AxonFramework/Axon-trader", "language": "Java", "is_fork": false, "fork_count": 178, "stargazer_count": 356, "size": 1455, "license": "licensed"}}