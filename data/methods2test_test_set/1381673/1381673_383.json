{"test_class": {"identifier": "ConcatenateFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConcatenateFunction concatenateFunction;", "modifier": "private", "type": "ConcatenateFunction", "declarator": "concatenateFunction", "var_name": "concatenateFunction"}], "file": "kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/runtime/functions/ConcatenateFunctionTest.java"}, "test_case": {"identifier": "invokeArrayWithList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invokeArrayWithList() {\n        FunctionTestUtil.assertResultList(concatenateFunction.invoke(new Object[]{\"test\", 2, Arrays.asList(2, 3)}), Arrays.asList(\"test\", 2, 2, 3));\n    }", "signature": "void invokeArrayWithList()", "full_signature": "@Test public void invokeArrayWithList()", "class_method_signature": "ConcatenateFunctionTest.invokeArrayWithList()", "testcase": true, "constructor": false, "invocations": ["assertResultList", "invoke", "asList", "asList"]}, "focal_class": {"identifier": "ConcatenateFunction", "superclass": "extends BaseFEELFunction", "interfaces": "", "fields": [], "methods": [{"identifier": "ConcatenateFunction", "parameters": "()", "modifiers": "public", "return": "", "signature": " ConcatenateFunction()", "full_signature": "public  ConcatenateFunction()", "class_method_signature": "ConcatenateFunction.ConcatenateFunction()", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(@ParameterName(\"list\") Object[] lists)", "modifiers": "public", "return": "FEELFnResult<List<Object>>", "signature": "FEELFnResult<List<Object>> invoke(@ParameterName(\"list\") Object[] lists)", "full_signature": "public FEELFnResult<List<Object>> invoke(@ParameterName(\"list\") Object[] lists)", "class_method_signature": "ConcatenateFunction.invoke(@ParameterName(\"list\") Object[] lists)", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/functions/ConcatenateFunction.java"}, "focal_method": {"identifier": "invoke", "parameters": "(@ParameterName(\"list\") Object[] lists)", "modifiers": "public", "return": "FEELFnResult<List<Object>>", "body": "public FEELFnResult<List<Object>> invoke(@ParameterName(\"list\") Object[] lists) {\n        if ( lists == null ) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"list\", \"cannot be null\"));\n        }\n        // spec requires us to return a new list\n        final List<Object> result = new ArrayList<>();\n        for ( Object list : lists ) {\n            if ( list == null ) {\n                // TODO review accordingly to spec, original behavior was: return null;\n                return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"lists\", \"one of the elements in the list is null\"));\n            } else if ( list instanceof Collection ) {\n                result.addAll( (Collection) list );\n            } else {\n                result.add( list );\n            }\n        }\n        return FEELFnResult.ofResult( result );\n    }", "signature": "FEELFnResult<List<Object>> invoke(@ParameterName(\"list\") Object[] lists)", "full_signature": "public FEELFnResult<List<Object>> invoke(@ParameterName(\"list\") Object[] lists)", "class_method_signature": "ConcatenateFunction.invoke(@ParameterName(\"list\") Object[] lists)", "testcase": false, "constructor": false, "invocations": ["ofError", "ofError", "addAll", "add", "ofResult"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}