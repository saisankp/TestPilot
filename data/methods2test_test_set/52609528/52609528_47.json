{"test_class": {"identifier": "QueueProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private HttpClient httpClient;", "modifier": "private", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "private MonitoringHandler monitoringHandler;", "modifier": "private", "type": "MonitoringHandler", "declarator": "monitoringHandler", "var_name": "monitoringHandler"}, {"original_string": "private String PAYLOAD = \"{\\\"method\\\":\\\"PUT\\\",\\\"uri\\\":\\\"/playground/server/tests/exp/item_2\\\",\\\"headers\\\":[],\\\"payload\\\":\\\"eyJrZXkiOiAidmFsdWUifQ==\\\"}\";", "modifier": "private", "type": "String", "declarator": "PAYLOAD = \"{\\\"method\\\":\\\"PUT\\\",\\\"uri\\\":\\\"/playground/server/tests/exp/item_2\\\",\\\"headers\\\":[],\\\"payload\\\":\\\"eyJrZXkiOiAidmFsdWUifQ==\\\"}\"", "var_name": "PAYLOAD"}, {"original_string": "@org.junit.Rule\n    public Timeout rule = Timeout.seconds(5);", "modifier": "@org.junit.Rule\n    public", "type": "Timeout", "declarator": "rule = Timeout.seconds(5)", "var_name": "rule"}], "file": "gateleen-queue/src/test/java/org/swisspush/gateleen/queue/queuing/QueueProcessorTest.java"}, "test_case": {"identifier": "testOpenCircuit", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOpenCircuit(TestContext context){\n        Async async = context.async();\n        QueueCircuitBreaker circuitBreaker = Mockito.spy(new ConfigurableQueueCircuitBreaker(QueueCircuitState.OPEN, true, true));\n        new QueueProcessor(vertx, httpClient, monitoringHandler, circuitBreaker);\n\n        vertx.eventBus().send(Address.queueProcessorAddress(), buildQueueEventBusMessage(\"my_queue\"), event -> {\n            context.assertTrue(event.succeeded());\n            JsonObject result = (JsonObject) event.result().body();\n            context.assertEquals(\"error\", result.getString(\"status\"));\n            context.assertTrue(result.getString(\"message\").contains(\"Circuit for queue my_queue is OPEN\"));\n\n            // open circuits should not result in actual http requests going out\n            verify(httpClient, never()).request(any(HttpMethod.class), anyString(), Matchers.<Handler<HttpClientResponse>>any());\n            verify(circuitBreaker, times(1)).isCircuitCheckEnabled();\n            verify(circuitBreaker, times(1)).handleQueuedRequest(anyString(), any(HttpRequest.class));\n\n            async.complete();\n        });\n    }", "signature": "void testOpenCircuit(TestContext context)", "full_signature": "@Test public void testOpenCircuit(TestContext context)", "class_method_signature": "QueueProcessorTest.testOpenCircuit(TestContext context)", "testcase": true, "constructor": false, "invocations": ["async", "spy", "send", "eventBus", "queueProcessorAddress", "buildQueueEventBusMessage", "assertTrue", "succeeded", "body", "result", "assertEquals", "getString", "assertTrue", "contains", "getString", "request", "verify", "never", "any", "anyString", "any", "isCircuitCheckEnabled", "verify", "times", "handleQueuedRequest", "verify", "times", "anyString", "any", "complete"]}, "focal_class": {"identifier": "QueueProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private HttpClient httpClient;", "modifier": "private", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "private MonitoringHandler monitoringHandler;", "modifier": "private", "type": "MonitoringHandler", "declarator": "monitoringHandler", "var_name": "monitoringHandler"}, {"original_string": "private QueueCircuitBreaker queueCircuitBreaker;", "modifier": "private", "type": "QueueCircuitBreaker", "declarator": "queueCircuitBreaker", "var_name": "queueCircuitBreaker"}, {"original_string": "private MessageConsumer<JsonObject> consumer;", "modifier": "private", "type": "MessageConsumer<JsonObject>", "declarator": "consumer", "var_name": "consumer"}, {"original_string": "private Logger log = LoggerFactory.getLogger(QueueProcessor.class);", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(QueueProcessor.class)", "var_name": "log"}], "methods": [{"identifier": "QueueProcessor", "parameters": "(final Vertx vertx, final HttpClient httpClient, final MonitoringHandler monitoringHandler)", "modifiers": "public", "return": "", "signature": " QueueProcessor(final Vertx vertx, final HttpClient httpClient, final MonitoringHandler monitoringHandler)", "full_signature": "public  QueueProcessor(final Vertx vertx, final HttpClient httpClient, final MonitoringHandler monitoringHandler)", "class_method_signature": "QueueProcessor.QueueProcessor(final Vertx vertx, final HttpClient httpClient, final MonitoringHandler monitoringHandler)", "testcase": false, "constructor": true}, {"identifier": "QueueProcessor", "parameters": "(final Vertx vertx, final HttpClient httpClient, final MonitoringHandler monitoringHandler, QueueCircuitBreaker queueCircuitBreaker)", "modifiers": "public", "return": "", "signature": " QueueProcessor(final Vertx vertx, final HttpClient httpClient, final MonitoringHandler monitoringHandler, QueueCircuitBreaker queueCircuitBreaker)", "full_signature": "public  QueueProcessor(final Vertx vertx, final HttpClient httpClient, final MonitoringHandler monitoringHandler, QueueCircuitBreaker queueCircuitBreaker)", "class_method_signature": "QueueProcessor.QueueProcessor(final Vertx vertx, final HttpClient httpClient, final MonitoringHandler monitoringHandler, QueueCircuitBreaker queueCircuitBreaker)", "testcase": false, "constructor": true}, {"identifier": "QueueProcessor", "parameters": "(final Vertx vertx, final HttpClient httpClient, final MonitoringHandler monitoringHandler,\n                          QueueCircuitBreaker queueCircuitBreaker, boolean immediatelyStartQueueProcessing)", "modifiers": "public", "return": "", "signature": " QueueProcessor(final Vertx vertx, final HttpClient httpClient, final MonitoringHandler monitoringHandler,\n                          QueueCircuitBreaker queueCircuitBreaker, boolean immediatelyStartQueueProcessing)", "full_signature": "public  QueueProcessor(final Vertx vertx, final HttpClient httpClient, final MonitoringHandler monitoringHandler,\n                          QueueCircuitBreaker queueCircuitBreaker, boolean immediatelyStartQueueProcessing)", "class_method_signature": "QueueProcessor.QueueProcessor(final Vertx vertx, final HttpClient httpClient, final MonitoringHandler monitoringHandler,\n                          QueueCircuitBreaker queueCircuitBreaker, boolean immediatelyStartQueueProcessing)", "testcase": false, "constructor": true}, {"identifier": "startQueueProcessing", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startQueueProcessing()", "full_signature": "public void startQueueProcessing()", "class_method_signature": "QueueProcessor.startQueueProcessing()", "testcase": false, "constructor": false}, {"identifier": "stopQueueProcessing", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stopQueueProcessing()", "full_signature": "public void stopQueueProcessing()", "class_method_signature": "QueueProcessor.stopQueueProcessing()", "testcase": false, "constructor": false}, {"identifier": "isQueueProcessingStarted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isQueueProcessingStarted()", "full_signature": "public boolean isQueueProcessingStarted()", "class_method_signature": "QueueProcessor.isQueueProcessingStarted()", "testcase": false, "constructor": false}, {"identifier": "getQueueProcessorAddress", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getQueueProcessorAddress()", "full_signature": "public String getQueueProcessorAddress()", "class_method_signature": "QueueProcessor.getQueueProcessorAddress()", "testcase": false, "constructor": false}, {"identifier": "isCircuitCheckEnabled", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isCircuitCheckEnabled()", "full_signature": "private boolean isCircuitCheckEnabled()", "class_method_signature": "QueueProcessor.isCircuitCheckEnabled()", "testcase": false, "constructor": false}, {"identifier": "isStatisticsUpdateEnabled", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isStatisticsUpdateEnabled()", "full_signature": "private boolean isStatisticsUpdateEnabled()", "class_method_signature": "QueueProcessor.isStatisticsUpdateEnabled()", "testcase": false, "constructor": false}, {"identifier": "httpMethodIsQueueable", "parameters": "(HttpMethod method)", "modifiers": "public static", "return": "boolean", "signature": "boolean httpMethodIsQueueable(HttpMethod method)", "full_signature": "public static boolean httpMethodIsQueueable(HttpMethod method)", "class_method_signature": "QueueProcessor.httpMethodIsQueueable(HttpMethod method)", "testcase": false, "constructor": false}, {"identifier": "performCircuitBreakerActions", "parameters": "(String queueName, HttpRequest queuedRequest, QueueResponseType queueResponseType, QueueCircuitState state)", "modifiers": "private", "return": "void", "signature": "void performCircuitBreakerActions(String queueName, HttpRequest queuedRequest, QueueResponseType queueResponseType, QueueCircuitState state)", "full_signature": "private void performCircuitBreakerActions(String queueName, HttpRequest queuedRequest, QueueResponseType queueResponseType, QueueCircuitState state)", "class_method_signature": "QueueProcessor.performCircuitBreakerActions(String queueName, HttpRequest queuedRequest, QueueResponseType queueResponseType, QueueCircuitState state)", "testcase": false, "constructor": false}, {"identifier": "updateCircuitBreakerStatistics", "parameters": "(String queueName, HttpRequest queuedRequest, QueueResponseType queueResponseType, QueueCircuitState state)", "modifiers": "private", "return": "void", "signature": "void updateCircuitBreakerStatistics(String queueName, HttpRequest queuedRequest, QueueResponseType queueResponseType, QueueCircuitState state)", "full_signature": "private void updateCircuitBreakerStatistics(String queueName, HttpRequest queuedRequest, QueueResponseType queueResponseType, QueueCircuitState state)", "class_method_signature": "QueueProcessor.updateCircuitBreakerStatistics(String queueName, HttpRequest queuedRequest, QueueResponseType queueResponseType, QueueCircuitState state)", "testcase": false, "constructor": false}, {"identifier": "closeCircuit", "parameters": "(HttpRequest queuedRequest)", "modifiers": "private", "return": "void", "signature": "void closeCircuit(HttpRequest queuedRequest)", "full_signature": "private void closeCircuit(HttpRequest queuedRequest)", "class_method_signature": "QueueProcessor.closeCircuit(HttpRequest queuedRequest)", "testcase": false, "constructor": false}, {"identifier": "reOpenCircuit", "parameters": "(HttpRequest queuedRequest)", "modifiers": "private", "return": "void", "signature": "void reOpenCircuit(HttpRequest queuedRequest)", "full_signature": "private void reOpenCircuit(HttpRequest queuedRequest)", "class_method_signature": "QueueProcessor.reOpenCircuit(HttpRequest queuedRequest)", "testcase": false, "constructor": false}, {"identifier": "executeQueuedRequest", "parameters": "(Message<JsonObject> message, Logger logger, HttpRequest queuedRequest,\n                                      JsonObject jsonRequest, String queueName, QueueCircuitState state)", "modifiers": "private", "return": "void", "signature": "void executeQueuedRequest(Message<JsonObject> message, Logger logger, HttpRequest queuedRequest,\n                                      JsonObject jsonRequest, String queueName, QueueCircuitState state)", "full_signature": "private void executeQueuedRequest(Message<JsonObject> message, Logger logger, HttpRequest queuedRequest,\n                                      JsonObject jsonRequest, String queueName, QueueCircuitState state)", "class_method_signature": "QueueProcessor.executeQueuedRequest(Message<JsonObject> message, Logger logger, HttpRequest queuedRequest,\n                                      JsonObject jsonRequest, String queueName, QueueCircuitState state)", "testcase": false, "constructor": false}, {"identifier": "getHttpClient", "parameters": "()", "modifiers": "public", "return": "HttpClient", "signature": "HttpClient getHttpClient()", "full_signature": "public HttpClient getHttpClient()", "class_method_signature": "QueueProcessor.getHttpClient()", "testcase": false, "constructor": false}], "file": "gateleen-queue/src/main/java/org/swisspush/gateleen/queue/queuing/QueueProcessor.java"}, "focal_method": {"identifier": "isCircuitCheckEnabled", "parameters": "()", "modifiers": "private", "return": "boolean", "body": "private boolean isCircuitCheckEnabled() {\n        return queueCircuitBreaker != null && queueCircuitBreaker.isCircuitCheckEnabled();\n    }", "signature": "boolean isCircuitCheckEnabled()", "full_signature": "private boolean isCircuitCheckEnabled()", "class_method_signature": "QueueProcessor.isCircuitCheckEnabled()", "testcase": false, "constructor": false, "invocations": ["isCircuitCheckEnabled"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}