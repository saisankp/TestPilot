{"test_class": {"identifier": "ValidationExecutorFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ValidationExecutorFactory executorFactory;", "modifier": "private", "type": "ValidationExecutorFactory", "declarator": "executorFactory", "var_name": "executorFactory"}, {"original_string": "@Mock\n    private Validator validator1;", "modifier": "@Mock\n    private", "type": "Validator", "declarator": "validator1", "var_name": "validator1"}, {"original_string": "@Mock\n    private Validator validator2;", "modifier": "@Mock\n    private", "type": "Validator", "declarator": "validator2", "var_name": "validator2"}, {"original_string": "@Mock\n    private Validator validator3;", "modifier": "@Mock\n    private", "type": "Validator", "declarator": "validator3", "var_name": "validator3"}, {"original_string": "@Mock\n    private ValidatorFactory validatorFactory1;", "modifier": "@Mock\n    private", "type": "ValidatorFactory", "declarator": "validatorFactory1", "var_name": "validatorFactory1"}, {"original_string": "@Mock\n    private ValidatorFactory validatorFactory2;", "modifier": "@Mock\n    private", "type": "ValidatorFactory", "declarator": "validatorFactory2", "var_name": "validatorFactory2"}, {"original_string": "@Mock\n    private ValidatorFactory validatorFactory3;", "modifier": "@Mock\n    private", "type": "ValidatorFactory", "declarator": "validatorFactory3", "var_name": "validatorFactory3"}, {"original_string": "@Mock\n    private ValidationContext context;", "modifier": "@Mock\n    private", "type": "ValidationContext", "declarator": "context", "var_name": "context"}, {"original_string": "private Map<String, ValidatorSettings> validatorsSettings;", "modifier": "private", "type": "Map<String, ValidatorSettings>", "declarator": "validatorsSettings", "var_name": "validatorsSettings"}, {"original_string": "List<ValidatorFactory> validatorFactories;", "modifier": "", "type": "List<ValidatorFactory>", "declarator": "validatorFactories", "var_name": "validatorFactories"}], "file": "vault-validation/src/test/java/org/apache/jackrabbit/vault/validation/ValidationExecutorFactoryTest.java"}, "test_case": {"identifier": "testValidatorSettings", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidatorSettings() throws ParserConfigurationException, SAXException {\n        ValidatorSettings settings1 = new ValidatorSettingsImpl(\"option1\", \"value1\");\n        validatorsSettings.put(\"id1\", settings1);\n        ValidatorSettings settings2 = new ValidatorSettingsImpl(true);\n        validatorsSettings.put(\"id2\", settings2);\n        ValidatorSettings settings3 = new ValidatorSettingsImpl(ValidationMessageSeverity.INFO);\n        validatorsSettings.put(\"id3\", settings3);\n        executorFactory.createValidationExecutor(context, true, true, validatorsSettings);\n        Mockito.verify(validatorFactory1).createValidator(context, settings1);\n        Mockito.verify(validatorFactory2, Mockito.never()).createValidator(Mockito.any(), Mockito.any());\n        Mockito.verify(validatorFactory3).createValidator(context, settings3);\n    }", "signature": "void testValidatorSettings()", "full_signature": "@Test public void testValidatorSettings()", "class_method_signature": "ValidationExecutorFactoryTest.testValidatorSettings()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "createValidationExecutor", "createValidator", "verify", "createValidator", "verify", "never", "any", "any", "createValidator", "verify"]}, "focal_class": {"identifier": "ValidationExecutorFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "final List<ValidatorFactory> validatorFactories;", "modifier": "final", "type": "List<ValidatorFactory>", "declarator": "validatorFactories", "var_name": "validatorFactories"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(ValidationExecutorFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ValidationExecutorFactory.class)", "var_name": "log"}], "methods": [{"identifier": "ValidationExecutorFactory", "parameters": "(ClassLoader classLoader)", "modifiers": "public", "return": "", "signature": " ValidationExecutorFactory(ClassLoader classLoader)", "full_signature": "public  ValidationExecutorFactory(ClassLoader classLoader)", "class_method_signature": "ValidationExecutorFactory.ValidationExecutorFactory(ClassLoader classLoader)", "testcase": false, "constructor": true}, {"identifier": "ValidationExecutorFactory", "parameters": "(Iterable<ValidatorFactory> validatorFactoriesUnsorted)", "modifiers": "", "return": "", "signature": " ValidationExecutorFactory(Iterable<ValidatorFactory> validatorFactoriesUnsorted)", "full_signature": "  ValidationExecutorFactory(Iterable<ValidatorFactory> validatorFactoriesUnsorted)", "class_method_signature": "ValidationExecutorFactory.ValidationExecutorFactory(Iterable<ValidatorFactory> validatorFactoriesUnsorted)", "testcase": false, "constructor": true}, {"identifier": "createValidationExecutor", "parameters": "(@NotNull ValidationContext context, boolean isSubPackage, boolean enforceSubpackageValidation, Map<String, ? extends ValidatorSettings> validatorSettingsById)", "modifiers": "public @Nullable", "return": "ValidationExecutor", "signature": "ValidationExecutor createValidationExecutor(@NotNull ValidationContext context, boolean isSubPackage, boolean enforceSubpackageValidation, Map<String, ? extends ValidatorSettings> validatorSettingsById)", "full_signature": "public @Nullable ValidationExecutor createValidationExecutor(@NotNull ValidationContext context, boolean isSubPackage, boolean enforceSubpackageValidation, Map<String, ? extends ValidatorSettings> validatorSettingsById)", "class_method_signature": "ValidationExecutorFactory.createValidationExecutor(@NotNull ValidationContext context, boolean isSubPackage, boolean enforceSubpackageValidation, Map<String, ? extends ValidatorSettings> validatorSettingsById)", "testcase": false, "constructor": false}, {"identifier": "createValidators", "parameters": "(@NotNull ValidationContext context, boolean isSubPackage, boolean enforceSubpackageValidation, Map<String, ? extends ValidatorSettings> validatorSettingsById)", "modifiers": "private @NotNull", "return": "Map<String, Validator>", "signature": "Map<String, Validator> createValidators(@NotNull ValidationContext context, boolean isSubPackage, boolean enforceSubpackageValidation, Map<String, ? extends ValidatorSettings> validatorSettingsById)", "full_signature": "private @NotNull Map<String, Validator> createValidators(@NotNull ValidationContext context, boolean isSubPackage, boolean enforceSubpackageValidation, Map<String, ? extends ValidatorSettings> validatorSettingsById)", "class_method_signature": "ValidationExecutorFactory.createValidators(@NotNull ValidationContext context, boolean isSubPackage, boolean enforceSubpackageValidation, Map<String, ? extends ValidatorSettings> validatorSettingsById)", "testcase": false, "constructor": false}], "file": "vault-validation/src/main/java/org/apache/jackrabbit/vault/validation/ValidationExecutorFactory.java"}, "focal_method": {"identifier": "createValidationExecutor", "parameters": "(@NotNull ValidationContext context, boolean isSubPackage, boolean enforceSubpackageValidation, Map<String, ? extends ValidatorSettings> validatorSettingsById)", "modifiers": "public @Nullable", "return": "ValidationExecutor", "body": "public @Nullable ValidationExecutor createValidationExecutor(@NotNull ValidationContext context, boolean isSubPackage, boolean enforceSubpackageValidation, Map<String, ? extends ValidatorSettings> validatorSettingsById) {\n        Map<String, Validator> validatorsById = createValidators(context, isSubPackage, enforceSubpackageValidation, validatorSettingsById != null ? validatorSettingsById : Collections.emptyMap());\n        if (validatorsById.isEmpty()) {\n            return null;\n        }\n        return new ValidationExecutor(validatorsById);\n    }", "signature": "ValidationExecutor createValidationExecutor(@NotNull ValidationContext context, boolean isSubPackage, boolean enforceSubpackageValidation, Map<String, ? extends ValidatorSettings> validatorSettingsById)", "full_signature": "public @Nullable ValidationExecutor createValidationExecutor(@NotNull ValidationContext context, boolean isSubPackage, boolean enforceSubpackageValidation, Map<String, ? extends ValidatorSettings> validatorSettingsById)", "class_method_signature": "ValidationExecutorFactory.createValidationExecutor(@NotNull ValidationContext context, boolean isSubPackage, boolean enforceSubpackageValidation, Map<String, ? extends ValidatorSettings> validatorSettingsById)", "testcase": false, "constructor": false, "invocations": ["createValidators", "emptyMap", "isEmpty"]}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}