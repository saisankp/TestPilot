{"test_class": {"identifier": "BlasTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/math/BlasTest.java"}, "test_case": {"identifier": "testGemvSparseSparseDense", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGemvSparseSparseDense() {\n        // y := alpha * A * x + beta * y\n        double alpha = 3.0;\n        DenseMatrix a = new DenseMatrix(new double[][] {{10.0, 11.0}, {0.0, 1.0}}, 2);\n        SparseVector x = sparseFromArray(new double[] {1.0, 2.0});\n        double beta = 2.0;\n        DenseVector y = new DenseVector(new double[] {3.0, 4.0});\n\n        DenseVector exp = (DenseVector)y.times(beta).plus(a.times(x).times(alpha));\n\n        Blas.gemv(alpha, a, x, beta, y);\n\n        Assert.assertEquals(exp, y);\n    }", "signature": "void testGemvSparseSparseDense()", "full_signature": "@Test public void testGemvSparseSparseDense()", "class_method_signature": "BlasTest.testGemvSparseSparseDense()", "testcase": true, "constructor": false, "invocations": ["sparseFromArray", "plus", "times", "times", "times", "gemv", "assertEquals"]}, "focal_class": {"identifier": "Blas", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static transient BLAS f2jBlas = new F2jBLAS();", "modifier": "private static transient", "type": "BLAS", "declarator": "f2jBlas = new F2jBLAS()", "var_name": "f2jBlas"}, {"original_string": "private static transient BLAS nativeBlas = BLAS.getInstance();", "modifier": "private static transient", "type": "BLAS", "declarator": "nativeBlas = BLAS.getInstance()", "var_name": "nativeBlas"}], "methods": [{"identifier": "axpy", "parameters": "(Double a, Vector x, Vector y)", "modifiers": "public static", "return": "void", "signature": "void axpy(Double a, Vector x, Vector y)", "full_signature": "public static void axpy(Double a, Vector x, Vector y)", "class_method_signature": "Blas.axpy(Double a, Vector x, Vector y)", "testcase": false, "constructor": false}, {"identifier": "axpy", "parameters": "(Double a, double[] x, double[] y)", "modifiers": "private static", "return": "void", "signature": "void axpy(Double a, double[] x, double[] y)", "full_signature": "private static void axpy(Double a, double[] x, double[] y)", "class_method_signature": "Blas.axpy(Double a, double[] x, double[] y)", "testcase": false, "constructor": false}, {"identifier": "axpy", "parameters": "(Double a, SparseVector x, double[] y)", "modifiers": "private static", "return": "void", "signature": "void axpy(Double a, SparseVector x, double[] y)", "full_signature": "private static void axpy(Double a, SparseVector x, double[] y)", "class_method_signature": "Blas.axpy(Double a, SparseVector x, double[] y)", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(Vector x, Vector y)", "modifiers": "public static", "return": "Double", "signature": "Double dot(Vector x, Vector y)", "full_signature": "public static Double dot(Vector x, Vector y)", "class_method_signature": "Blas.dot(Vector x, Vector y)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(Vector x, Vector y)", "modifiers": "public", "return": "void", "signature": "void copy(Vector x, Vector y)", "full_signature": "public void copy(Vector x, Vector y)", "class_method_signature": "Blas.copy(Vector x, Vector y)", "testcase": false, "constructor": false}, {"identifier": "scal", "parameters": "(Double a, Vector x)", "modifiers": "public static", "return": "void", "signature": "void scal(Double a, Vector x)", "full_signature": "public static void scal(Double a, Vector x)", "class_method_signature": "Blas.scal(Double a, Vector x)", "testcase": false, "constructor": false}, {"identifier": "spr", "parameters": "(Double alpha, DenseVector v, DenseVector u)", "modifiers": "public static", "return": "void", "signature": "void spr(Double alpha, DenseVector v, DenseVector u)", "full_signature": "public static void spr(Double alpha, DenseVector v, DenseVector u)", "class_method_signature": "Blas.spr(Double alpha, DenseVector v, DenseVector u)", "testcase": false, "constructor": false}, {"identifier": "spr", "parameters": "(Double alpha, SparseVector v, DenseVector u)", "modifiers": "public static", "return": "void", "signature": "void spr(Double alpha, SparseVector v, DenseVector u)", "full_signature": "public static void spr(Double alpha, SparseVector v, DenseVector u)", "class_method_signature": "Blas.spr(Double alpha, SparseVector v, DenseVector u)", "testcase": false, "constructor": false}, {"identifier": "syr", "parameters": "(Double alpha, Vector x, DenseMatrix a)", "modifiers": "", "return": "void", "signature": "void syr(Double alpha, Vector x, DenseMatrix a)", "full_signature": " void syr(Double alpha, Vector x, DenseMatrix a)", "class_method_signature": "Blas.syr(Double alpha, Vector x, DenseMatrix a)", "testcase": false, "constructor": false}, {"identifier": "syr", "parameters": "(Double alpha, DenseVector x, DenseMatrix a)", "modifiers": "static", "return": "void", "signature": "void syr(Double alpha, DenseVector x, DenseMatrix a)", "full_signature": "static void syr(Double alpha, DenseVector x, DenseMatrix a)", "class_method_signature": "Blas.syr(Double alpha, DenseVector x, DenseMatrix a)", "testcase": false, "constructor": false}, {"identifier": "syr", "parameters": "(Double alpha, SparseVector x, DenseMatrix a)", "modifiers": "public static", "return": "void", "signature": "void syr(Double alpha, SparseVector x, DenseMatrix a)", "full_signature": "public static void syr(Double alpha, SparseVector x, DenseMatrix a)", "class_method_signature": "Blas.syr(Double alpha, SparseVector x, DenseMatrix a)", "testcase": false, "constructor": false}, {"identifier": "gemm", "parameters": "(double alpha, Matrix a, Matrix b, double beta, Matrix c)", "modifiers": "public static", "return": "void", "signature": "void gemm(double alpha, Matrix a, Matrix b, double beta, Matrix c)", "full_signature": "public static void gemm(double alpha, Matrix a, Matrix b, double beta, Matrix c)", "class_method_signature": "Blas.gemm(double alpha, Matrix a, Matrix b, double beta, Matrix c)", "testcase": false, "constructor": false}, {"identifier": "gemv", "parameters": "(double alpha, Matrix a, Vector x, double beta, Vector y)", "modifiers": "public static", "return": "void", "signature": "void gemv(double alpha, Matrix a, Vector x, double beta, Vector y)", "full_signature": "public static void gemv(double alpha, Matrix a, Vector x, double beta, Vector y)", "class_method_signature": "Blas.gemv(double alpha, Matrix a, Vector x, double beta, Vector y)", "testcase": false, "constructor": false}, {"identifier": "scal", "parameters": "(Matrix m, double alpha)", "modifiers": "private static", "return": "void", "signature": "void scal(Matrix m, double alpha)", "full_signature": "private static void scal(Matrix m, double alpha)", "class_method_signature": "Blas.scal(Matrix m, double alpha)", "testcase": false, "constructor": false}, {"identifier": "scal", "parameters": "(Vector v, double alpha)", "modifiers": "private static", "return": "void", "signature": "void scal(Vector v, double alpha)", "full_signature": "private static void scal(Vector v, double alpha)", "class_method_signature": "Blas.scal(Vector v, double alpha)", "testcase": false, "constructor": false}, {"identifier": "checkCardinality", "parameters": "(Matrix a, Vector v)", "modifiers": "public static", "return": "void", "signature": "void checkCardinality(Matrix a, Vector v)", "full_signature": "public static void checkCardinality(Matrix a, Vector v)", "class_method_signature": "Blas.checkCardinality(Matrix a, Vector v)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/math/Blas.java"}, "focal_method": {"identifier": "gemv", "parameters": "(double alpha, Matrix a, Vector x, double beta, Vector y)", "modifiers": "public static", "return": "void", "body": "public static void gemv(double alpha, Matrix a, Vector x, double beta, Vector y) {\n        checkCardinality(a, x);\n\n        if (a.rowSize() != y.size())\n            throw new CardinalityException(a.columnSize(), y.size());\n\n        if (alpha == 0.0 && beta == 1.0)\n            return;\n\n        if (alpha == 0.0) {\n            scal(y, beta);\n            return;\n        }\n\n        double[] fA = a.getStorage().data();\n        double[] fX = x.getStorage().data();\n        double[] fY = y.getStorage().data();\n\n        nativeBlas.dgemv(\"N\", a.rowSize(), a.columnSize(), alpha, fA, a.rowSize(), fX, 1, beta, fY, 1);\n\n        if (y instanceof SparseVector)\n            y.assign(fY);\n    }", "signature": "void gemv(double alpha, Matrix a, Vector x, double beta, Vector y)", "full_signature": "public static void gemv(double alpha, Matrix a, Vector x, double beta, Vector y)", "class_method_signature": "Blas.gemv(double alpha, Matrix a, Vector x, double beta, Vector y)", "testcase": false, "constructor": false, "invocations": ["checkCardinality", "rowSize", "size", "columnSize", "size", "scal", "data", "getStorage", "data", "getStorage", "data", "getStorage", "dgemv", "rowSize", "columnSize", "rowSize", "assign"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}