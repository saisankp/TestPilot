{"test_class": {"identifier": "ChildTest", "superclass": "", "interfaces": "", "fields": [], "file": "dockerfile-image-update/src/test/java/com/salesforce/dockerfileimageupdate/subcommands/impl/ChildTest.java"}, "test_case": {"identifier": "checkPullRequestMade", "parameters": "(Map<String, Object> inputMap)", "modifiers": "@Test(dataProvider = \"inputMap\") public", "return": "void", "body": "@Test(dataProvider = \"inputMap\")\n    public void checkPullRequestMade(Map<String, Object> inputMap) throws Exception {\n        Child child = new Child();\n        Namespace ns = new Namespace(inputMap);\n        DockerfileGitHubUtil dockerfileGitHubUtil = mock(DockerfileGitHubUtil.class);\n        Mockito.when(dockerfileGitHubUtil.getRepo(Mockito.any())).thenReturn(new GHRepository());\n        Mockito.when(dockerfileGitHubUtil.getOrCreateFork(Mockito.any())).thenReturn(new GHRepository());\n        doNothing().when(dockerfileGitHubUtil).modifyAllOnGithub(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any());\n        GitHubJsonStore gitHubJsonStore = mock(GitHubJsonStore.class);\n        when(dockerfileGitHubUtil.getGitHubJsonStore(anyString())).thenReturn(gitHubJsonStore);\n        doNothing().when(dockerfileGitHubUtil).createPullReq(Mockito.any(), anyString(), Mockito.any(), any());\n\n        child.execute(ns, dockerfileGitHubUtil);\n\n        Mockito.verify(dockerfileGitHubUtil, atLeastOnce())\n                .createPullReq(Mockito.any(), anyString(), Mockito.any(), any());\n    }", "signature": "void checkPullRequestMade(Map<String, Object> inputMap)", "full_signature": "@Test(dataProvider = \"inputMap\") public void checkPullRequestMade(Map<String, Object> inputMap)", "class_method_signature": "ChildTest.checkPullRequestMade(Map<String, Object> inputMap)", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getRepo", "any", "thenReturn", "when", "getOrCreateFork", "any", "modifyAllOnGithub", "when", "doNothing", "any", "any", "any", "any", "mock", "thenReturn", "when", "getGitHubJsonStore", "anyString", "createPullReq", "when", "doNothing", "any", "anyString", "any", "any", "execute", "createPullReq", "verify", "atLeastOnce", "any", "anyString", "any", "any"]}, "focal_class": {"identifier": "Child", "superclass": "", "interfaces": "implements ExecutableWithNamespace", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(Child.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Child.class)", "var_name": "log"}], "methods": [{"identifier": "execute", "parameters": "(final Namespace ns, final DockerfileGitHubUtil dockerfileGitHubUtil)", "modifiers": "@Override public", "return": "void", "signature": "void execute(final Namespace ns, final DockerfileGitHubUtil dockerfileGitHubUtil)", "full_signature": "@Override public void execute(final Namespace ns, final DockerfileGitHubUtil dockerfileGitHubUtil)", "class_method_signature": "Child.execute(final Namespace ns, final DockerfileGitHubUtil dockerfileGitHubUtil)", "testcase": false, "constructor": false}], "file": "dockerfile-image-update/src/main/java/com/salesforce/dockerfileimageupdate/subcommands/impl/Child.java"}, "focal_method": {"identifier": "execute", "parameters": "(final Namespace ns, final DockerfileGitHubUtil dockerfileGitHubUtil)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(final Namespace ns, final DockerfileGitHubUtil dockerfileGitHubUtil)\n            throws IOException, InterruptedException {\n        String branch = ns.get(Constants.GIT_BRANCH);\n        String img = ns.get(Constants.IMG);\n        String forceTag = ns.get(Constants.FORCE_TAG);\n\n        /* Updates store if a store is specified. */\n        dockerfileGitHubUtil.getGitHubJsonStore(ns.get(Constants.STORE)).updateStore(img, forceTag);\n\n        log.info(\"Retrieving repository and creating fork...\");\n        GHRepository repo = dockerfileGitHubUtil.getRepo(ns.get(Constants.GIT_REPO));\n        GHRepository fork = dockerfileGitHubUtil.getOrCreateFork(repo);\n        if (fork == null) {\n            log.info(\"Unable to fork {}. Please make sure that the repo is forkable.\",\n                    repo.getFullName());\n            return;\n        }\n\n        GitForkBranch gitForkBranch = new GitForkBranch(img, forceTag, branch);\n        PullRequestInfo pullRequestInfo =\n                new PullRequestInfo(ns.get(Constants.GIT_PR_TITLE),\n                        gitForkBranch.getImageName(),\n                        gitForkBranch.getImageTag());\n\n        dockerfileGitHubUtil.createOrUpdateForkBranchToParentDefault(repo, fork, gitForkBranch);\n\n        log.info(\"Modifying on Github...\");\n        dockerfileGitHubUtil.modifyAllOnGithub(fork, gitForkBranch.getBranchName(), img, forceTag);\n        dockerfileGitHubUtil.createPullReq(repo,\n                gitForkBranch.getBranchName(),\n                fork,\n                pullRequestInfo);\n    }", "signature": "void execute(final Namespace ns, final DockerfileGitHubUtil dockerfileGitHubUtil)", "full_signature": "@Override public void execute(final Namespace ns, final DockerfileGitHubUtil dockerfileGitHubUtil)", "class_method_signature": "Child.execute(final Namespace ns, final DockerfileGitHubUtil dockerfileGitHubUtil)", "testcase": false, "constructor": false, "invocations": ["get", "get", "get", "updateStore", "getGitHubJsonStore", "get", "info", "getRepo", "get", "getOrCreateFork", "info", "getFullName", "get", "getImageName", "getImageTag", "createOrUpdateForkBranchToParentDefault", "info", "modifyAllOnGithub", "getBranchName", "createPullReq", "getBranchName"]}, "repository": {"repo_id": 104787715, "url": "https://github.com/salesforce/dockerfile-image-update", "stars": 62, "created": "9/25/2017 6:38:13 PM +00:00", "updates": "2020-01-23T07:15:59+00:00", "fork": "False", "license": "licensed"}}