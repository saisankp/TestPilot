{"test_class": {"identifier": "GetFirmwareVersionsCommandExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int CLASS_ID = 1;", "modifier": "private static final", "type": "int", "declarator": "CLASS_ID = 1", "var_name": "CLASS_ID"}, {"original_string": "private static final int ATTRIBUTE_ID = 2;", "modifier": "private static final", "type": "int", "declarator": "ATTRIBUTE_ID = 2", "var_name": "ATTRIBUTE_ID"}, {"original_string": "private static final ObisCode OBIS_CODE_ACTIVE_FIRMWARE_VERSION = new ObisCode(\"1.0.0.2.0.255\");", "modifier": "private static final", "type": "ObisCode", "declarator": "OBIS_CODE_ACTIVE_FIRMWARE_VERSION = new ObisCode(\"1.0.0.2.0.255\")", "var_name": "OBIS_CODE_ACTIVE_FIRMWARE_VERSION"}, {"original_string": "private static final ObisCode OBIS_CODE_MODULE_ACTIVE_FIRMWARE_VERSION = new ObisCode(\"1.1.0.2.0.255\");", "modifier": "private static final", "type": "ObisCode", "declarator": "OBIS_CODE_MODULE_ACTIVE_FIRMWARE_VERSION = new ObisCode(\"1.1.0.2.0.255\")", "var_name": "OBIS_CODE_MODULE_ACTIVE_FIRMWARE_VERSION"}, {"original_string": "private static final ObisCode OBIS_CODE_COMMUNICATION_MODULE_ACTIVE_FIRMWARE_VERSION = new ObisCode(\n            \"1.2.0.2.0.255\");", "modifier": "private static final", "type": "ObisCode", "declarator": "OBIS_CODE_COMMUNICATION_MODULE_ACTIVE_FIRMWARE_VERSION = new ObisCode(\n            \"1.2.0.2.0.255\")", "var_name": "OBIS_CODE_COMMUNICATION_MODULE_ACTIVE_FIRMWARE_VERSION"}, {"original_string": "private static final ObisCode OBIS_CODE_MBUS_DRIVER_ACTIVE_FIRMWARE_VERSION = new ObisCode(\"1.4.0.2.0.255\");", "modifier": "private static final", "type": "ObisCode", "declarator": "OBIS_CODE_MBUS_DRIVER_ACTIVE_FIRMWARE_VERSION = new ObisCode(\"1.4.0.2.0.255\")", "var_name": "OBIS_CODE_MBUS_DRIVER_ACTIVE_FIRMWARE_VERSION"}, {"original_string": "private GetFirmwareVersionsCommandExecutor executor;", "modifier": "private", "type": "GetFirmwareVersionsCommandExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "@Mock\n    private DlmsMessageListener listener;", "modifier": "@Mock\n    private", "type": "DlmsMessageListener", "declarator": "listener", "var_name": "listener"}, {"original_string": "@Mock\n    private DlmsHelper helperService;", "modifier": "@Mock\n    private", "type": "DlmsHelper", "declarator": "helperService", "var_name": "helperService"}, {"original_string": "private DlmsConnectionManager connectionHolder;", "modifier": "private", "type": "DlmsConnectionManager", "declarator": "connectionHolder", "var_name": "connectionHolder"}], "file": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/firmware/GetFirmwareVersionsCommandExecutorTest.java"}, "test_case": {"identifier": "returns3FirmwareVersionsForDsmr422Device", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void returns3FirmwareVersionsForDsmr422Device() throws Exception {\n        final DlmsDevice device = new DlmsDevice();\n\n        final GetResult getResult1 = new GetResultBuilder().build();\n        final GetResult getResult2 = new GetResultBuilder().build();\n        final GetResult getResult3 = new GetResultBuilder().build();\n\n        when(this.helperService.getAndCheck(same(this.connectionHolder), same(device), eq(\"retrieve firmware versions\"),\n                refEq(new AttributeAddress(CLASS_ID, OBIS_CODE_ACTIVE_FIRMWARE_VERSION, ATTRIBUTE_ID)),\n                refEq(new AttributeAddress(CLASS_ID, OBIS_CODE_MODULE_ACTIVE_FIRMWARE_VERSION, ATTRIBUTE_ID)),\n                refEq(new AttributeAddress(CLASS_ID, OBIS_CODE_COMMUNICATION_MODULE_ACTIVE_FIRMWARE_VERSION,\n                        ATTRIBUTE_ID)))).thenReturn(asList(getResult1, getResult2, getResult3));\n        when(this.helperService.readString(getResult1.getResultData(),\n                FirmwareModuleType.ACTIVE_FIRMWARE.getDescription())).thenReturn(\"string1\");\n        when(this.helperService.readString(getResult2.getResultData(),\n                FirmwareModuleType.MODULE_ACTIVE.getDescription())).thenReturn(\"string2\");\n        when(this.helperService.readString(getResult3.getResultData(),\n                FirmwareModuleType.COMMUNICATION.getDescription())).thenReturn(\"string3\");\n\n        final List<FirmwareVersionDto> result = this.executor.execute(this.connectionHolder, device, null);\n\n        Assertions.assertThat(result)\n                .usingRecursiveFieldByFieldElementComparator()\n                .containsExactly(new FirmwareVersionDto(FirmwareModuleType.ACTIVE_FIRMWARE, \"string1\"),\n                        new FirmwareVersionDto(FirmwareModuleType.MODULE_ACTIVE, \"string2\"),\n                        new FirmwareVersionDto(FirmwareModuleType.COMMUNICATION, \"string3\"));\n    }", "signature": "void returns3FirmwareVersionsForDsmr422Device()", "full_signature": "@Test public void returns3FirmwareVersionsForDsmr422Device()", "class_method_signature": "GetFirmwareVersionsCommandExecutorTest.returns3FirmwareVersionsForDsmr422Device()", "testcase": true, "constructor": false, "invocations": ["build", "build", "build", "thenReturn", "when", "getAndCheck", "same", "same", "eq", "refEq", "refEq", "refEq", "asList", "thenReturn", "when", "readString", "getResultData", "getDescription", "thenReturn", "when", "readString", "getResultData", "getDescription", "thenReturn", "when", "readString", "getResultData", "getDescription", "execute", "containsExactly", "usingRecursiveFieldByFieldElementComparator", "assertThat"]}, "focal_class": {"identifier": "GetFirmwareVersionsCommandExecutor", "superclass": "extends AbstractCommandExecutor<Void, List<FirmwareVersionDto>>", "interfaces": "", "fields": [{"original_string": "private static final int CLASS_ID = 1;", "modifier": "private static final", "type": "int", "declarator": "CLASS_ID = 1", "var_name": "CLASS_ID"}, {"original_string": "private static final int ATTRIBUTE_ID = 2;", "modifier": "private static final", "type": "int", "declarator": "ATTRIBUTE_ID = 2", "var_name": "ATTRIBUTE_ID"}, {"original_string": "private static final ObisCode OBIS_CODE_ACTIVE_FIRMWARE_VERSION = new ObisCode(\"1.0.0.2.0.255\");", "modifier": "private static final", "type": "ObisCode", "declarator": "OBIS_CODE_ACTIVE_FIRMWARE_VERSION = new ObisCode(\"1.0.0.2.0.255\")", "var_name": "OBIS_CODE_ACTIVE_FIRMWARE_VERSION"}, {"original_string": "private static final ObisCode OBIS_CODE_MODULE_ACTIVE_FIRMWARE_VERSION = new ObisCode(\"1.1.0.2.0.255\");", "modifier": "private static final", "type": "ObisCode", "declarator": "OBIS_CODE_MODULE_ACTIVE_FIRMWARE_VERSION = new ObisCode(\"1.1.0.2.0.255\")", "var_name": "OBIS_CODE_MODULE_ACTIVE_FIRMWARE_VERSION"}, {"original_string": "private static final ObisCode OBIS_CODE_COMMUNICATION_MODULE_ACTIVE_FIRMWARE_VERSION = new ObisCode(\n            \"1.2.0.2.0.255\");", "modifier": "private static final", "type": "ObisCode", "declarator": "OBIS_CODE_COMMUNICATION_MODULE_ACTIVE_FIRMWARE_VERSION = new ObisCode(\n            \"1.2.0.2.0.255\")", "var_name": "OBIS_CODE_COMMUNICATION_MODULE_ACTIVE_FIRMWARE_VERSION"}, {"original_string": "private static final ObisCode OBIS_CODE_MBUS_DRIVER_ACTIVE_FIRMWARE_VERSION = new ObisCode(\"1.4.0.2.0.255\");", "modifier": "private static final", "type": "ObisCode", "declarator": "OBIS_CODE_MBUS_DRIVER_ACTIVE_FIRMWARE_VERSION = new ObisCode(\"1.4.0.2.0.255\")", "var_name": "OBIS_CODE_MBUS_DRIVER_ACTIVE_FIRMWARE_VERSION"}, {"original_string": "private static final List<FirmwareModuleType> FIRMWARE_MODULE_TYPES = asList(FirmwareModuleType.ACTIVE_FIRMWARE,\n            FirmwareModuleType.MODULE_ACTIVE, FirmwareModuleType.COMMUNICATION, FirmwareModuleType.M_BUS_DRIVER_ACTIVE);", "modifier": "private static final", "type": "List<FirmwareModuleType>", "declarator": "FIRMWARE_MODULE_TYPES = asList(FirmwareModuleType.ACTIVE_FIRMWARE,\n            FirmwareModuleType.MODULE_ACTIVE, FirmwareModuleType.COMMUNICATION, FirmwareModuleType.M_BUS_DRIVER_ACTIVE)", "var_name": "FIRMWARE_MODULE_TYPES"}, {"original_string": "private static final List<AttributeAddress> ALL_ATTRIBUTE_ADDRESSES = asList(\n            new AttributeAddress(CLASS_ID, OBIS_CODE_ACTIVE_FIRMWARE_VERSION, ATTRIBUTE_ID),\n            new AttributeAddress(CLASS_ID, OBIS_CODE_MODULE_ACTIVE_FIRMWARE_VERSION, ATTRIBUTE_ID),\n            new AttributeAddress(CLASS_ID, OBIS_CODE_COMMUNICATION_MODULE_ACTIVE_FIRMWARE_VERSION, ATTRIBUTE_ID),\n            new AttributeAddress(CLASS_ID, OBIS_CODE_MBUS_DRIVER_ACTIVE_FIRMWARE_VERSION, ATTRIBUTE_ID));", "modifier": "private static final", "type": "List<AttributeAddress>", "declarator": "ALL_ATTRIBUTE_ADDRESSES = asList(\n            new AttributeAddress(CLASS_ID, OBIS_CODE_ACTIVE_FIRMWARE_VERSION, ATTRIBUTE_ID),\n            new AttributeAddress(CLASS_ID, OBIS_CODE_MODULE_ACTIVE_FIRMWARE_VERSION, ATTRIBUTE_ID),\n            new AttributeAddress(CLASS_ID, OBIS_CODE_COMMUNICATION_MODULE_ACTIVE_FIRMWARE_VERSION, ATTRIBUTE_ID),\n            new AttributeAddress(CLASS_ID, OBIS_CODE_MBUS_DRIVER_ACTIVE_FIRMWARE_VERSION, ATTRIBUTE_ID))", "var_name": "ALL_ATTRIBUTE_ADDRESSES"}, {"original_string": "private static final AttributeAddress[] FOR_DSMR_4_2_2 = ALL_ATTRIBUTE_ADDRESSES.subList(0, 3).toArray(\n            new AttributeAddress[3]);", "modifier": "private static final", "type": "AttributeAddress[]", "declarator": "FOR_DSMR_4_2_2 = ALL_ATTRIBUTE_ADDRESSES.subList(0, 3).toArray(\n            new AttributeAddress[3])", "var_name": "FOR_DSMR_4_2_2"}, {"original_string": "private static final AttributeAddress[] FOR_SMR_5 = ALL_ATTRIBUTE_ADDRESSES.subList(0, 4).toArray(\n            new AttributeAddress[4]);", "modifier": "private static final", "type": "AttributeAddress[]", "declarator": "FOR_SMR_5 = ALL_ATTRIBUTE_ADDRESSES.subList(0, 4).toArray(\n            new AttributeAddress[4])", "var_name": "FOR_SMR_5"}, {"original_string": "private final DlmsHelper dlmsHelper;", "modifier": "private final", "type": "DlmsHelper", "declarator": "dlmsHelper", "var_name": "dlmsHelper"}], "methods": [{"identifier": "GetFirmwareVersionsCommandExecutor", "parameters": "(final DlmsHelper dlmsHelper)", "modifiers": "@Autowired public", "return": "", "signature": " GetFirmwareVersionsCommandExecutor(final DlmsHelper dlmsHelper)", "full_signature": "@Autowired public  GetFirmwareVersionsCommandExecutor(final DlmsHelper dlmsHelper)", "class_method_signature": "GetFirmwareVersionsCommandExecutor.GetFirmwareVersionsCommandExecutor(final DlmsHelper dlmsHelper)", "testcase": false, "constructor": true}, {"identifier": "fromBundleRequestInput", "parameters": "(final ActionRequestDto bundleInput)", "modifiers": "@Override public", "return": "Void", "signature": "Void fromBundleRequestInput(final ActionRequestDto bundleInput)", "full_signature": "@Override public Void fromBundleRequestInput(final ActionRequestDto bundleInput)", "class_method_signature": "GetFirmwareVersionsCommandExecutor.fromBundleRequestInput(final ActionRequestDto bundleInput)", "testcase": false, "constructor": false}, {"identifier": "asBundleResponse", "parameters": "(final List<FirmwareVersionDto> executionResult)", "modifiers": "@Override public", "return": "ActionResponseDto", "signature": "ActionResponseDto asBundleResponse(final List<FirmwareVersionDto> executionResult)", "full_signature": "@Override public ActionResponseDto asBundleResponse(final List<FirmwareVersionDto> executionResult)", "class_method_signature": "GetFirmwareVersionsCommandExecutor.asBundleResponse(final List<FirmwareVersionDto> executionResult)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Void useless)", "modifiers": "@Override public", "return": "List<FirmwareVersionDto>", "signature": "List<FirmwareVersionDto> execute(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Void useless)", "full_signature": "@Override public List<FirmwareVersionDto> execute(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Void useless)", "class_method_signature": "GetFirmwareVersionsCommandExecutor.execute(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Void useless)", "testcase": false, "constructor": false}, {"identifier": "getFirmwareVersions", "parameters": "(final DlmsConnectionManager conn, final DlmsDevice device,\n            final AttributeAddress[] attributes)", "modifiers": "private", "return": "List<FirmwareVersionDto>", "signature": "List<FirmwareVersionDto> getFirmwareVersions(final DlmsConnectionManager conn, final DlmsDevice device,\n            final AttributeAddress[] attributes)", "full_signature": "private List<FirmwareVersionDto> getFirmwareVersions(final DlmsConnectionManager conn, final DlmsDevice device,\n            final AttributeAddress[] attributes)", "class_method_signature": "GetFirmwareVersionsCommandExecutor.getFirmwareVersions(final DlmsConnectionManager conn, final DlmsDevice device,\n            final AttributeAddress[] attributes)", "testcase": false, "constructor": false}], "file": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/firmware/GetFirmwareVersionsCommandExecutor.java"}, "focal_method": {"identifier": "execute", "parameters": "(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Void useless)", "modifiers": "@Override public", "return": "List<FirmwareVersionDto>", "body": "@Override\n    public List<FirmwareVersionDto> execute(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Void useless) throws ProtocolAdapterException {\n        if (Protocol.forDevice(device).isSmr5()) {\n            return this.getFirmwareVersions(conn, device, FOR_SMR_5);\n        }\n        return this.getFirmwareVersions(conn, device, FOR_DSMR_4_2_2);\n    }", "signature": "List<FirmwareVersionDto> execute(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Void useless)", "full_signature": "@Override public List<FirmwareVersionDto> execute(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Void useless)", "class_method_signature": "GetFirmwareVersionsCommandExecutor.execute(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Void useless)", "testcase": false, "constructor": false, "invocations": ["isSmr5", "forDevice", "getFirmwareVersions", "getFirmwareVersions"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}