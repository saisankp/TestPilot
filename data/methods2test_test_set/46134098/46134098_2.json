{"test_class": {"identifier": "AndroidStringsResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File INPUT_FILE = new File(\"src/test/resource/resfilter/xml/input.xml\");", "modifier": "private static final", "type": "File", "declarator": "INPUT_FILE = new File(\"src/test/resource/resfilter/xml/input.xml\")", "var_name": "INPUT_FILE"}, {"original_string": "private static final File EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/xml/write-output.xml\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/xml/write-output.xml\")", "var_name": "EXPECTED_WRITE_FILE"}, {"original_string": "private static final File MERGE_INPUT_1_FILE = new File(\"src/test/resource/resfilter/xml/merge-input-1.xml\");", "modifier": "private static final", "type": "File", "declarator": "MERGE_INPUT_1_FILE = new File(\"src/test/resource/resfilter/xml/merge-input-1.xml\")", "var_name": "MERGE_INPUT_1_FILE"}, {"original_string": "private static final File MERGE_INPUT_2_FILE = new File(\"src/test/resource/resfilter/xml/merge-input-2.xml\");", "modifier": "private static final", "type": "File", "declarator": "MERGE_INPUT_2_FILE = new File(\"src/test/resource/resfilter/xml/merge-input-2.xml\")", "var_name": "MERGE_INPUT_2_FILE"}, {"original_string": "private static final File EXPECTED_MERGE_1_FILE = new File(\"src/test/resource/resfilter/xml/merge-output-1.xml\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_MERGE_1_FILE = new File(\"src/test/resource/resfilter/xml/merge-output-1.xml\")", "var_name": "EXPECTED_MERGE_1_FILE"}, {"original_string": "private static final File EXPECTED_MERGE_2_FILE = new File(\"src/test/resource/resfilter/xml/merge-output-2.xml\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_MERGE_2_FILE = new File(\"src/test/resource/resfilter/xml/merge-output-2.xml\")", "var_name": "EXPECTED_MERGE_2_FILE"}, {"original_string": "private static final Collection<ResourceString> EXPECTED_INPUT_RES_LIST;", "modifier": "private static final", "type": "Collection<ResourceString>", "declarator": "EXPECTED_INPUT_RES_LIST", "var_name": "EXPECTED_INPUT_RES_LIST"}, {"original_string": "private static LanguageBundle WRITE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "WRITE_BUNDLE", "var_name": "WRITE_BUNDLE"}, {"original_string": "private static LanguageBundle MERGE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "MERGE_BUNDLE", "var_name": "MERGE_BUNDLE"}, {"original_string": "private static final AndroidStringsResource res = new AndroidStringsResource();", "modifier": "private static final", "type": "AndroidStringsResource", "declarator": "res = new AndroidStringsResource()", "var_name": "res"}], "file": "gp-res-filter/src/test/java/com/ibm/g11n/pipeline/resfilter/impl/AndroidStringsResourceTest.java"}, "test_case": {"identifier": "testWrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWrite() throws IOException, ResourceFilterException{\n        File tempFile = File.createTempFile(this.getClass().getSimpleName(), \".xml\");\n        tempFile.deleteOnExit();\n\n        try (OutputStream os = new FileOutputStream(tempFile)) {\n            res.write(os, WRITE_BUNDLE, null);\n            os.flush();\n            assertTrue(ResourceTestUtil.compareFiles(EXPECTED_WRITE_FILE, tempFile, 1));\n        }\n    }", "signature": "void testWrite()", "full_signature": "@Test public void testWrite()", "class_method_signature": "AndroidStringsResourceTest.testWrite()", "testcase": true, "constructor": false, "invocations": ["createTempFile", "getSimpleName", "getClass", "deleteOnExit", "write", "flush", "assertTrue", "compareFiles"]}, "focal_class": {"identifier": "AndroidStringsResource", "superclass": "extends ResourceFilter", "interfaces": "", "fields": [{"original_string": "private static final String CHAR_SET = \"UTF-8\";", "modifier": "private static final", "type": "String", "declarator": "CHAR_SET = \"UTF-8\"", "var_name": "CHAR_SET"}, {"original_string": "private static final String RESOURCES_STRING = \"resources\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCES_STRING = \"resources\"", "var_name": "RESOURCES_STRING"}, {"original_string": "private static final String NAME_STRING = \"name\";", "modifier": "private static final", "type": "String", "declarator": "NAME_STRING = \"name\"", "var_name": "NAME_STRING"}, {"original_string": "private static final String STR_STRING = \"string\";", "modifier": "private static final", "type": "String", "declarator": "STR_STRING = \"string\"", "var_name": "STR_STRING"}, {"original_string": "private static final String STR_ARRAY = \"string-array\";", "modifier": "private static final", "type": "String", "declarator": "STR_ARRAY = \"string-array\"", "var_name": "STR_ARRAY"}, {"original_string": "private static final String PLURAL_STRING = \"plural\";", "modifier": "private static final", "type": "String", "declarator": "PLURAL_STRING = \"plural\"", "var_name": "PLURAL_STRING"}, {"original_string": "private static final String PLURALS_STRING = \"plurals\";", "modifier": "private static final", "type": "String", "declarator": "PLURALS_STRING = \"plurals\"", "var_name": "PLURALS_STRING"}, {"original_string": "private static final String QUANTITY_STRING = \"quantity\";", "modifier": "private static final", "type": "String", "declarator": "QUANTITY_STRING = \"quantity\"", "var_name": "QUANTITY_STRING"}, {"original_string": "private static final String ITEM_STRING = \"item\";", "modifier": "private static final", "type": "String", "declarator": "ITEM_STRING = \"item\"", "var_name": "ITEM_STRING"}, {"original_string": "private static final String STR_ARRAY_OPEN_TAG_PTRN = \"^(\\\\s*<string-array\\\\s*name=\\\".*\\\">).*\";", "modifier": "private static final", "type": "String", "declarator": "STR_ARRAY_OPEN_TAG_PTRN = \"^(\\\\s*<string-array\\\\s*name=\\\".*\\\">).*\"", "var_name": "STR_ARRAY_OPEN_TAG_PTRN"}, {"original_string": "private static final String STR_ARRAY_CLOSE_TAG_PTRN = \".*(\\\\s*</string-array\\\\s*>)$\";", "modifier": "private static final", "type": "String", "declarator": "STR_ARRAY_CLOSE_TAG_PTRN = \".*(\\\\s*</string-array\\\\s*>)$\"", "var_name": "STR_ARRAY_CLOSE_TAG_PTRN"}, {"original_string": "private static final String STR_OPEN_TAG_PTRN = \"^(\\\\s*<string\\\\s*name=\\\".*\\\">).*\";", "modifier": "private static final", "type": "String", "declarator": "STR_OPEN_TAG_PTRN = \"^(\\\\s*<string\\\\s*name=\\\".*\\\">).*\"", "var_name": "STR_OPEN_TAG_PTRN"}, {"original_string": "private static final String STR_CLOSE_TAG_PTRN = \".*(\\\\s*</string\\\\s*>)$\";", "modifier": "private static final", "type": "String", "declarator": "STR_CLOSE_TAG_PTRN = \".*(\\\\s*</string\\\\s*>)$\"", "var_name": "STR_CLOSE_TAG_PTRN"}, {"original_string": "private static final String PLURALS_OPEN_TAG_PTRN = \"^(\\\\s*<plurals\\\\s*name=\\\".*\\\">).*\";", "modifier": "private static final", "type": "String", "declarator": "PLURALS_OPEN_TAG_PTRN = \"^(\\\\s*<plurals\\\\s*name=\\\".*\\\">).*\"", "var_name": "PLURALS_OPEN_TAG_PTRN"}, {"original_string": "private static final String PLURALS_CLOSE_TAG_PTRN = \".*(\\\\s*</plurals\\\\s*>)$\";", "modifier": "private static final", "type": "String", "declarator": "PLURALS_CLOSE_TAG_PTRN = \".*(\\\\s*</plurals\\\\s*>)$\"", "var_name": "PLURALS_CLOSE_TAG_PTRN"}, {"original_string": "private static final String PLURAL_ENTIRY_PTRN = \"{0}, plural, {1}\";", "modifier": "private static final", "type": "String", "declarator": "PLURAL_ENTIRY_PTRN = \"{0}, plural, {1}\"", "var_name": "PLURAL_ENTIRY_PTRN"}], "methods": [{"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "AndroidStringsResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "collectResourceStrings", "parameters": "(NodeList nodeList, int startSeqNum, Collection<ResourceString> resStrings)", "modifiers": "private", "return": "int", "signature": "int collectResourceStrings(NodeList nodeList, int startSeqNum, Collection<ResourceString> resStrings)", "full_signature": "private int collectResourceStrings(NodeList nodeList, int startSeqNum, Collection<ResourceString> resStrings)", "class_method_signature": "AndroidStringsResource.collectResourceStrings(NodeList nodeList, int startSeqNum, Collection<ResourceString> resStrings)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream outStream, LanguageBundle languageBundle, FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void write(OutputStream outStream, LanguageBundle languageBundle, FilterOptions options)", "full_signature": "@Override public void write(OutputStream outStream, LanguageBundle languageBundle, FilterOptions options)", "class_method_signature": "AndroidStringsResource.write(OutputStream outStream, LanguageBundle languageBundle, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "AndroidStringsResource.merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "getTabStr", "parameters": "(String str)", "modifiers": "static", "return": "String", "signature": "String getTabStr(String str)", "full_signature": "static String getTabStr(String str)", "class_method_signature": "AndroidStringsResource.getTabStr(String str)", "testcase": false, "constructor": false}, {"identifier": "getSpacesSize", "parameters": "(String whitespace)", "modifiers": "static", "return": "int", "signature": "int getSpacesSize(String whitespace)", "full_signature": "static int getSpacesSize(String whitespace)", "class_method_signature": "AndroidStringsResource.getSpacesSize(String whitespace)", "testcase": false, "constructor": false}, {"identifier": "formatMessage", "parameters": "(String openingTag, String message, String closingTag, String whitespace,\n            BreakIterator brkItr)", "modifiers": "static", "return": "String", "signature": "String formatMessage(String openingTag, String message, String closingTag, String whitespace,\n            BreakIterator brkItr)", "full_signature": "static String formatMessage(String openingTag, String message, String closingTag, String whitespace,\n            BreakIterator brkItr)", "class_method_signature": "AndroidStringsResource.formatMessage(String openingTag, String message, String closingTag, String whitespace,\n            BreakIterator brkItr)", "testcase": false, "constructor": false}, {"identifier": "containPluralString", "parameters": "(String inputString)", "modifiers": "static", "return": "boolean", "signature": "boolean containPluralString(String inputString)", "full_signature": "static boolean containPluralString(String inputString)", "class_method_signature": "AndroidStringsResource.containPluralString(String inputString)", "testcase": false, "constructor": false}, {"identifier": "getPluralString", "parameters": "(String inputString)", "modifiers": "static", "return": "String", "signature": "String getPluralString(String inputString)", "full_signature": "static String getPluralString(String inputString)", "class_method_signature": "AndroidStringsResource.getPluralString(String inputString)", "testcase": false, "constructor": false}, {"identifier": "getPluralCategories", "parameters": "(String inputString)", "modifiers": "static", "return": "Map<String, String>", "signature": "Map<String, String> getPluralCategories(String inputString)", "full_signature": "static Map<String, String> getPluralCategories(String inputString)", "class_method_signature": "AndroidStringsResource.getPluralCategories(String inputString)", "testcase": false, "constructor": false}], "file": "gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/AndroidStringsResource.java"}, "focal_method": {"identifier": "write", "parameters": "(OutputStream outStream, LanguageBundle languageBundle, FilterOptions options)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void write(OutputStream outStream, LanguageBundle languageBundle, FilterOptions options)\n            throws IOException, ResourceFilterException {\n\n        List<ResourceString> resStrings = languageBundle.getSortedResourceStrings();\n\n        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder docBuilder = null;\n        try {\n            docBuilder = docFactory.newDocumentBuilder();\n        } catch (ParserConfigurationException e) {\n            // runtime problem\n            throw new RuntimeException(e);\n        }\n\n        // root elements\n        Document doc = docBuilder.newDocument();\n\n        // creating <resources></resources>\n        Element rootElement = doc.createElement(RESOURCES_STRING);\n\n        for (ResourceString resString : resStrings) {\n            String value = resString.getValue();\n            Map<String, String> plural_categories = null;\n\n            if (value.startsWith(\"[\") && value.endsWith(\"]\")) {\n                // creating <string-array name=\"$NAME\">\n                Element child = doc.createElement(STR_ARRAY);\n                Attr attr = doc.createAttribute(NAME_STRING);\n                attr.setValue(resString.getKey());\n                child.setAttributeNode(attr);\n\n                int startIndex = 0;\n                int endIndex = -1;\n\n                while (endIndex < value.length() - 1) {\n                    endIndex = value.indexOf(',', startIndex);\n\n                    if (endIndex == -1) {\n                        endIndex = value.length() - 1;\n                    }\n\n                    String itemValue = value.substring(startIndex + 1, endIndex);\n\n                    Element arrayChild = doc.createElement(\"item\");\n                    arrayChild.setTextContent(itemValue);\n                    child.appendChild(arrayChild);\n\n                    startIndex = endIndex + 1;\n                }\n                rootElement.appendChild(child);\n            } else if (!(plural_categories = getPluralCategories(value)).isEmpty()) {\n                Element child = doc.createElement(PLURALS_STRING);\n                Attr attr = doc.createAttribute(NAME_STRING);\n                attr.setValue(resString.getKey());\n                child.setAttributeNode(attr);\n\n                if (!resString.getNotes().isEmpty()) {\n                    List<String> comments = resString.getNotes();\n                    for (String comment : comments) {\n                        Comment d_comment = doc.createComment(comment);\n                        child.appendChild(d_comment);\n                    }\n                }\n\n                /**\n                 * Append plural category items Show the items in predefined\n                 * order\n                 */\n                for (String pKey : Constants.PLURAL_CATEGORIES) {\n                    if (plural_categories.containsKey(pKey)) {\n                        String pValue = plural_categories.get(pKey);\n                        Element item = doc.createElement(ITEM_STRING);\n                        Attr pAttr = doc.createAttribute(QUANTITY_STRING);\n                        pAttr.setValue(pKey);\n                        item.setAttributeNode(pAttr);\n                        item.setTextContent(pValue);\n                        child.appendChild(item);\n                    }\n                }\n\n                rootElement.appendChild(child);\n            } else {\n                // creating <string name=$NAME>VALUE</string>\n                Element child = doc.createElement(STR_STRING);\n                Attr attr = doc.createAttribute(NAME_STRING);\n                attr.setValue(resString.getKey());\n                child.setAttributeNode(attr);\n                child.setTextContent(value);\n                rootElement.appendChild(child);\n            }\n        }\n        doc.appendChild(rootElement);\n\n        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n        Transformer transformer = null;\n        try {\n            transformer = transformerFactory.newTransformer();\n        } catch (TransformerConfigurationException e) {\n            // runtime problem\n            throw new ResourceFilterException(e);\n        }\n\n        // to add the tab spacing to files\n        transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n        transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"4\");\n\n        transformer.setOutputProperty(OutputKeys.STANDALONE, \"no\");\n\n        DOMSource source = new DOMSource(doc);\n        StreamResult result = new StreamResult(outStream);\n\n        // write the file\n        try {\n            transformer.transform(source, result);\n        } catch (TransformerException e) {\n            // runtime problem?\n            throw new ResourceFilterException(e);\n        }\n    }", "signature": "void write(OutputStream outStream, LanguageBundle languageBundle, FilterOptions options)", "full_signature": "@Override public void write(OutputStream outStream, LanguageBundle languageBundle, FilterOptions options)", "class_method_signature": "AndroidStringsResource.write(OutputStream outStream, LanguageBundle languageBundle, FilterOptions options)", "testcase": false, "constructor": false, "invocations": ["getSortedResourceStrings", "newInstance", "newDocumentBuilder", "newDocument", "createElement", "getValue", "startsWith", "endsWith", "createElement", "createAttribute", "setValue", "getKey", "setAttributeNode", "length", "indexOf", "length", "substring", "createElement", "setTextContent", "appendChild", "appendChild", "isEmpty", "getPluralCategories", "createElement", "createAttribute", "setValue", "getKey", "setAttributeNode", "isEmpty", "getNotes", "getNotes", "createComment", "appendChild", "containsKey", "get", "createElement", "createAttribute", "setValue", "setAttributeNode", "setTextContent", "appendChild", "appendChild", "createElement", "createAttribute", "setValue", "getKey", "setAttributeNode", "setTextContent", "appendChild", "appendChild", "newInstance", "newTransformer", "setOutputProperty", "setOutputProperty", "setOutputProperty", "transform"]}, "repository": {"repo_id": 46134098, "url": "https://github.com/IBM-Cloud/gp-java-tools", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 9, "size": 6216, "license": "licensed"}}