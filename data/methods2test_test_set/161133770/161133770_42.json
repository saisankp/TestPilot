{"test_class": {"identifier": "FeatureSetValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public final ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule public final", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "core/src/test/java/feast/core/validators/FeatureSetValidatorTest.java"}, "test_case": {"identifier": "shouldThrowExceptionForFeatureSetLabelsWithAnEmptyKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldThrowExceptionForFeatureSetLabelsWithAnEmptyKey() {\n\n    Map<String, String> featureSetLabels =\n        new HashMap<>() {\n          {\n            put(\"\", \"empty_key\");\n          }\n        };\n\n    FeatureSetProto.FeatureSetSpec featureSetSpec =\n        FeatureSetProto.FeatureSetSpec.newBuilder()\n            .setProject(\"project1\")\n            .setName(\"featureSetWithConstraints\")\n            .putAllLabels(featureSetLabels)\n            .build();\n    FeatureSetProto.FeatureSet featureSet =\n        FeatureSetProto.FeatureSet.newBuilder().setSpec(featureSetSpec).build();\n\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"Feature set label keys must not be empty\");\n    FeatureSetValidator.validateSpec(featureSet);\n  }", "signature": "void shouldThrowExceptionForFeatureSetLabelsWithAnEmptyKey()", "full_signature": "@Test public void shouldThrowExceptionForFeatureSetLabelsWithAnEmptyKey()", "class_method_signature": "FeatureSetValidatorTest.shouldThrowExceptionForFeatureSetLabelsWithAnEmptyKey()", "testcase": true, "constructor": false, "invocations": ["put", "build", "putAllLabels", "setName", "setProject", "newBuilder", "build", "setSpec", "newBuilder", "expect", "expectMessage", "validateSpec"]}, "focal_class": {"identifier": "FeatureSetValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static List<String> reservedNames =\n      Arrays.asList(\"created_timestamp\", \"event_timestamp\", \"ingestion_id\", \"job_id\");", "modifier": "private static", "type": "List<String>", "declarator": "reservedNames =\n      Arrays.asList(\"created_timestamp\", \"event_timestamp\", \"ingestion_id\", \"job_id\")", "var_name": "reservedNames"}], "methods": [{"identifier": "validateSpec", "parameters": "(FeatureSet featureSet)", "modifiers": "public static", "return": "void", "signature": "void validateSpec(FeatureSet featureSet)", "full_signature": "public static void validateSpec(FeatureSet featureSet)", "class_method_signature": "FeatureSetValidator.validateSpec(FeatureSet featureSet)", "testcase": false, "constructor": false}, {"identifier": "checkUniqueColumns", "parameters": "(\n      List<EntitySpec> entitySpecs, List<FeatureSpec> featureSpecs)", "modifiers": "private static", "return": "void", "signature": "void checkUniqueColumns(\n      List<EntitySpec> entitySpecs, List<FeatureSpec> featureSpecs)", "full_signature": "private static void checkUniqueColumns(\n      List<EntitySpec> entitySpecs, List<FeatureSpec> featureSpecs)", "class_method_signature": "FeatureSetValidator.checkUniqueColumns(\n      List<EntitySpec> entitySpecs, List<FeatureSpec> featureSpecs)", "testcase": false, "constructor": false}, {"identifier": "checkReservedColumns", "parameters": "(List<FeatureSpec> featureSpecs)", "modifiers": "private static", "return": "void", "signature": "void checkReservedColumns(List<FeatureSpec> featureSpecs)", "full_signature": "private static void checkReservedColumns(List<FeatureSpec> featureSpecs)", "class_method_signature": "FeatureSetValidator.checkReservedColumns(List<FeatureSpec> featureSpecs)", "testcase": false, "constructor": false}], "file": "core/src/main/java/feast/core/validators/FeatureSetValidator.java"}, "focal_method": {"identifier": "validateSpec", "parameters": "(FeatureSet featureSet)", "modifiers": "public static", "return": "void", "body": "public static void validateSpec(FeatureSet featureSet) {\n    if (featureSet.getSpec().getProject().isEmpty()) {\n      throw new IllegalArgumentException(\"Project name must be provided\");\n    }\n    if (featureSet.getSpec().getName().isEmpty()) {\n      throw new IllegalArgumentException(\"Feature set name must be provided\");\n    }\n    if (featureSet.getSpec().getLabelsMap().containsKey(\"\")) {\n      throw new IllegalArgumentException(\"Feature set label keys must not be empty\");\n    }\n\n    checkValidCharacters(featureSet.getSpec().getProject(), \"project\");\n    checkValidCharacters(featureSet.getSpec().getName(), \"featureset\");\n    checkUniqueColumns(\n        featureSet.getSpec().getEntitiesList(), featureSet.getSpec().getFeaturesList());\n    checkReservedColumns(featureSet.getSpec().getFeaturesList());\n    for (EntitySpec entitySpec : featureSet.getSpec().getEntitiesList()) {\n      checkValidCharacters(entitySpec.getName(), \"entity\");\n    }\n    for (FeatureSpec featureSpec : featureSet.getSpec().getFeaturesList()) {\n      checkValidCharacters(featureSpec.getName(), \"feature\");\n      if (featureSpec.getLabelsMap().containsKey(\"\")) {\n        throw new IllegalArgumentException(\"Feature label keys must not be empty\");\n      }\n    }\n  }", "signature": "void validateSpec(FeatureSet featureSet)", "full_signature": "public static void validateSpec(FeatureSet featureSet)", "class_method_signature": "FeatureSetValidator.validateSpec(FeatureSet featureSet)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getProject", "getSpec", "isEmpty", "getName", "getSpec", "containsKey", "getLabelsMap", "getSpec", "checkValidCharacters", "getProject", "getSpec", "checkValidCharacters", "getName", "getSpec", "checkUniqueColumns", "getEntitiesList", "getSpec", "getFeaturesList", "getSpec", "checkReservedColumns", "getFeaturesList", "getSpec", "getEntitiesList", "getSpec", "checkValidCharacters", "getName", "getFeaturesList", "getSpec", "checkValidCharacters", "getName", "containsKey", "getLabelsMap"]}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}