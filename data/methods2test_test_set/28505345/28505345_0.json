{"test_class": {"identifier": "OkHttpStackTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockWebServer server = new MockWebServer();", "modifier": "@Rule\n    public final", "type": "MockWebServer", "declarator": "server = new MockWebServer()", "var_name": "server"}], "file": "stack/jus-okhttp3/src/test/java/io/apptik/comm/jus/okhttp3/OkHttpStackTest.java"}, "test_case": {"identifier": "MarkerInterceptor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void MarkerInterceptor() throws IOException {\n        OkHttpStack okHttpStack = new OkHttpStack(new MarkerInterceptorFactory() {\n            @Override\n            public AbstractMarkerInterceptor create(Request request) {\n                return new AbstractMarkerInterceptor(request) {\n                    @Override\n                    Object[] getMarkerArgs(Request<?> request, okhttp3.Request okhttpRequest) {\n                        return new Object[]{\"test marker arg\"};\n                    }\n                };\n            }\n        });\n        server.enqueue(new MockResponse().setBody(\"Hi\"));\n        Request request = mock(Request.class);\n        when(request.getMethod()).thenReturn(\"GET\");\n        when(request.getTag()).thenReturn(\"mytag\");\n        when(request.getBody()).thenReturn(null);\n        when(request.getUrlString()).thenReturn(server.url(\"/\").toString());\n\n        okHttpStack.performRequest(request, null, new ByteArrayPool(100));\n\n        verify(request).addMarker(AbstractMarkerInterceptor.OKHTTP3_INTERCEPT,\"test marker arg\");\n    }", "signature": "void MarkerInterceptor()", "full_signature": "@Test public void MarkerInterceptor()", "class_method_signature": "OkHttpStackTest.MarkerInterceptor()", "testcase": true, "constructor": false, "invocations": ["enqueue", "setBody", "mock", "thenReturn", "when", "getMethod", "thenReturn", "when", "getTag", "thenReturn", "when", "getBody", "thenReturn", "when", "getUrlString", "toString", "url", "performRequest", "addMarker", "verify"]}, "focal_class": {"identifier": "OkHttpStack", "superclass": "extends AbstractHttpStack", "interfaces": "", "fields": [{"original_string": "private final OkHttpClient client;", "modifier": "private final", "type": "OkHttpClient", "declarator": "client", "var_name": "client"}, {"original_string": "private MarkerInterceptorFactory markerInterceptorFactory;", "modifier": "private", "type": "MarkerInterceptorFactory", "declarator": "markerInterceptorFactory", "var_name": "markerInterceptorFactory"}], "methods": [{"identifier": "OkHttpStack", "parameters": "()", "modifiers": "public", "return": "", "signature": " OkHttpStack()", "full_signature": "public  OkHttpStack()", "class_method_signature": "OkHttpStack.OkHttpStack()", "testcase": false, "constructor": true}, {"identifier": "OkHttpStack", "parameters": "(MarkerInterceptorFactory markerInterceptorFactory)", "modifiers": "public", "return": "", "signature": " OkHttpStack(MarkerInterceptorFactory markerInterceptorFactory)", "full_signature": "public  OkHttpStack(MarkerInterceptorFactory markerInterceptorFactory)", "class_method_signature": "OkHttpStack.OkHttpStack(MarkerInterceptorFactory markerInterceptorFactory)", "testcase": false, "constructor": true}, {"identifier": "OkHttpStack", "parameters": "(OkHttpClient client, MarkerInterceptorFactory markerInterceptorFactory)", "modifiers": "public", "return": "", "signature": " OkHttpStack(OkHttpClient client, MarkerInterceptorFactory markerInterceptorFactory)", "full_signature": "public  OkHttpStack(OkHttpClient client, MarkerInterceptorFactory markerInterceptorFactory)", "class_method_signature": "OkHttpStack.OkHttpStack(OkHttpClient client, MarkerInterceptorFactory markerInterceptorFactory)", "testcase": false, "constructor": true}, {"identifier": "performRequest", "parameters": "(Request<?> request, Headers\n            additionalHeaders, ByteArrayPool byteArrayPool)", "modifiers": "@Override public", "return": "NetworkResponse", "signature": "NetworkResponse performRequest(Request<?> request, Headers\n            additionalHeaders, ByteArrayPool byteArrayPool)", "full_signature": "@Override public NetworkResponse performRequest(Request<?> request, Headers\n            additionalHeaders, ByteArrayPool byteArrayPool)", "class_method_signature": "OkHttpStack.performRequest(Request<?> request, Headers\n            additionalHeaders, ByteArrayPool byteArrayPool)", "testcase": false, "constructor": false}, {"identifier": "getContentBytes", "parameters": "(BufferedSource bufferedSource, ByteArrayPool\n            byteArrayPool, int contentLen)", "modifiers": "protected final", "return": "byte[]", "signature": "byte[] getContentBytes(BufferedSource bufferedSource, ByteArrayPool\n            byteArrayPool, int contentLen)", "full_signature": "protected final byte[] getContentBytes(BufferedSource bufferedSource, ByteArrayPool\n            byteArrayPool, int contentLen)", "class_method_signature": "OkHttpStack.getContentBytes(BufferedSource bufferedSource, ByteArrayPool\n            byteArrayPool, int contentLen)", "testcase": false, "constructor": false}], "file": "stack/jus-okhttp3/src/main/java/io/apptik/comm/jus/okhttp3/OkHttpStack.java"}, "focal_method": {"identifier": "performRequest", "parameters": "(Request<?> request, Headers\n            additionalHeaders, ByteArrayPool byteArrayPool)", "modifiers": "@Override public", "return": "NetworkResponse", "body": "@Override\n    public NetworkResponse performRequest(Request<?> request, Headers\n            additionalHeaders, ByteArrayPool byteArrayPool) throws IOException {\n\n        //clone to be able to set timeouts per call\n        OkHttpClient.Builder clientBuilder = this.client.newBuilder();\n        if (request.getRetryPolicy() != null) {\n            clientBuilder\n                    .connectTimeout(request.getRetryPolicy().getCurrentConnectTimeout(),\n                            TimeUnit.MILLISECONDS)\n                    .readTimeout(request.getRetryPolicy().getCurrentReadTimeout(),\n                            TimeUnit.MILLISECONDS);\n        }\n        if (markerInterceptorFactory != null) {\n            clientBuilder.addNetworkInterceptor(markerInterceptorFactory.create(request));\n        }\n\n        OkHttpClient client = clientBuilder.build();\n        okhttp3.Request okRequest = new okhttp3.Request.Builder()\n                .url(request.getUrlString())\n                .headers(JusOk.okHeaders(request.getHeaders(), additionalHeaders))\n                .tag(request.getTag())\n                .method(request.getMethod(), JusOk.okBody(request.getNetworkRequest()))\n                .build();\n\n        long requestStart = System.nanoTime();\n\n        Response response = client.newCall(okRequest).execute();\n\n        byte[] data = null;\n        if (NetworkDispatcher.hasResponseBody(request.getMethod(), response.code())) {\n            data = getContentBytes(response.body().source(),\n                    byteArrayPool, (int) response.body().contentLength());\n        } else {\n            // Add 0 byte response as a way of honestly representing a\n            // no-content request.\n            data = new byte[0];\n        }\n        return new NetworkResponse.Builder()\n                .setHeaders(JusOk.jusHeaders(response.headers()))\n                .setStatusCode(response.code())\n                .setBody(data)\n                .setNetworkTimeNs(System.nanoTime() - requestStart)\n                .build();\n    }", "signature": "NetworkResponse performRequest(Request<?> request, Headers\n            additionalHeaders, ByteArrayPool byteArrayPool)", "full_signature": "@Override public NetworkResponse performRequest(Request<?> request, Headers\n            additionalHeaders, ByteArrayPool byteArrayPool)", "class_method_signature": "OkHttpStack.performRequest(Request<?> request, Headers\n            additionalHeaders, ByteArrayPool byteArrayPool)", "testcase": false, "constructor": false, "invocations": ["newBuilder", "getRetryPolicy", "readTimeout", "connectTimeout", "getCurrentConnectTimeout", "getRetryPolicy", "getCurrentReadTimeout", "getRetryPolicy", "addNetworkInterceptor", "create", "build", "build", "method", "tag", "headers", "url", "getUrlString", "okHeaders", "getHeaders", "getTag", "getMethod", "okBody", "getNetworkRequest", "nanoTime", "execute", "newCall", "hasResponseBody", "getMethod", "code", "getContentBytes", "source", "body", "contentLength", "body", "build", "setNetworkTimeNs", "setBody", "setStatusCode", "setHeaders", "jusHeaders", "headers", "code", "nanoTime"]}, "repository": {"repo_id": 28505345, "url": "https://github.com/apptik/jus", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 56, "size": 2057, "license": "licensed"}}