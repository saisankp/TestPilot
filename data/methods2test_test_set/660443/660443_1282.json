{"test_class": {"identifier": "CombinedPermutationParityTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/stereo/CombinedPermutationParityTest.java"}, "test_case": {"identifier": "testParity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParity() throws Exception {\n        PermutationParity left = mock(PermutationParity.class);\n        PermutationParity right = mock(PermutationParity.class);\n        PermutationParity parity = new CombinedPermutationParity(left, right);\n\n        long[] dummy = new long[5];\n\n        when(left.parity(dummy)).thenReturn(-1);\n        when(right.parity(dummy)).thenReturn(-1);\n        assertThat(parity.parity(dummy), is(1));\n\n        verify(left, times(1)).parity(dummy);\n        verify(right, times(1)).parity(dummy);\n\n        when(left.parity(dummy)).thenReturn(-1);\n        when(right.parity(dummy)).thenReturn(1);\n        assertThat(parity.parity(dummy), is(-1));\n\n        when(left.parity(dummy)).thenReturn(1);\n        when(right.parity(dummy)).thenReturn(-1);\n        assertThat(parity.parity(dummy), is(-1));\n\n        when(left.parity(dummy)).thenReturn(1);\n        when(right.parity(dummy)).thenReturn(1);\n        assertThat(parity.parity(dummy), is(1));\n\n        when(left.parity(dummy)).thenReturn(0);\n        when(right.parity(dummy)).thenReturn(1);\n        assertThat(parity.parity(dummy), is(0));\n\n        when(left.parity(dummy)).thenReturn(1);\n        when(right.parity(dummy)).thenReturn(0);\n        assertThat(parity.parity(dummy), is(0));\n\n        when(left.parity(dummy)).thenReturn(0);\n        when(right.parity(dummy)).thenReturn(-1);\n        assertThat(parity.parity(dummy), is(0));\n\n        when(left.parity(dummy)).thenReturn(-1);\n        when(right.parity(dummy)).thenReturn(0);\n        assertThat(parity.parity(dummy), is(0));\n    }", "signature": "void testParity()", "full_signature": "@Test public void testParity()", "class_method_signature": "CombinedPermutationParityTest.testParity()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "parity", "thenReturn", "when", "parity", "assertThat", "parity", "is", "parity", "verify", "times", "parity", "verify", "times", "thenReturn", "when", "parity", "thenReturn", "when", "parity", "assertThat", "parity", "is", "thenReturn", "when", "parity", "thenReturn", "when", "parity", "assertThat", "parity", "is", "thenReturn", "when", "parity", "thenReturn", "when", "parity", "assertThat", "parity", "is", "thenReturn", "when", "parity", "thenReturn", "when", "parity", "assertThat", "parity", "is", "thenReturn", "when", "parity", "thenReturn", "when", "parity", "assertThat", "parity", "is", "thenReturn", "when", "parity", "thenReturn", "when", "parity", "assertThat", "parity", "is", "thenReturn", "when", "parity", "thenReturn", "when", "parity", "assertThat", "parity", "is"]}, "focal_class": {"identifier": "CombinedPermutationParity", "superclass": "extends PermutationParity", "interfaces": "", "fields": [{"original_string": "private final PermutationParity left;", "modifier": "private final", "type": "PermutationParity", "declarator": "left", "var_name": "left"}, {"original_string": "private final PermutationParity right;", "modifier": "private final", "type": "PermutationParity", "declarator": "right", "var_name": "right"}], "methods": [{"identifier": "CombinedPermutationParity", "parameters": "(PermutationParity left, PermutationParity right)", "modifiers": "public", "return": "", "signature": " CombinedPermutationParity(PermutationParity left, PermutationParity right)", "full_signature": "public  CombinedPermutationParity(PermutationParity left, PermutationParity right)", "class_method_signature": "CombinedPermutationParity.CombinedPermutationParity(PermutationParity left, PermutationParity right)", "testcase": false, "constructor": true}, {"identifier": "parity", "parameters": "(long[] current)", "modifiers": "@Override public", "return": "int", "signature": "int parity(long[] current)", "full_signature": "@Override public int parity(long[] current)", "class_method_signature": "CombinedPermutationParity.parity(long[] current)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/stereo/CombinedPermutationParity.java"}, "focal_method": {"identifier": "parity", "parameters": "(long[] current)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int parity(long[] current) {\n        return left.parity(current) * right.parity(current);\n    }", "signature": "int parity(long[] current)", "full_signature": "@Override public int parity(long[] current)", "class_method_signature": "CombinedPermutationParity.parity(long[] current)", "testcase": false, "constructor": false, "invocations": ["parity", "parity"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}