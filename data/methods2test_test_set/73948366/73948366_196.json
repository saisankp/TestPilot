{"test_class": {"identifier": "StringUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/util/StringUtilsTest.java"}, "test_case": {"identifier": "testRequestUriMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRequestUriMatch() {\n        assertFalse(StringUtils.requestUriMatch(\"/zts/v1/schema\", null, null));\n        assertFalse(StringUtils.requestUriMatch(\"/zts/v1/schema\", Collections.emptySet(), null));\n        assertFalse(StringUtils.requestUriMatch(\"/zts/v1/schema\", null, Collections.emptyList()));\n        \n        Set<String> uriSet = new HashSet<>();\n        uriSet.add(\"/zts/v1/domain\");\n        uriSet.add(\"/zts/v1/schema\");\n        assertFalse(StringUtils.requestUriMatch(\"/zts/v1/token\", uriSet, null));\n        assertTrue(StringUtils.requestUriMatch(\"/zts/v1/domain\", uriSet, null));\n        assertTrue(StringUtils.requestUriMatch(\"/zts/v1/schema\", uriSet, null));\n        \n        List<Pattern> uriList = new ArrayList<>();\n        uriList.add(Pattern.compile(\"/zts/v1/domain/.+/service/.+/publickey/.+\"));\n        assertFalse(StringUtils.requestUriMatch(\"/zts/v1/domain/athenz/service/zms/publickey/\", uriSet, uriList));\n        assertFalse(StringUtils.requestUriMatch(\"/zts/v1/domain/athenz\", uriSet, uriList));\n        assertFalse(StringUtils.requestUriMatch(\"/zts/v1/domain/athenz/token\", uriSet, uriList));\n        assertFalse(StringUtils.requestUriMatch(\"/zts/v1/domain/athenz/service/zms\", uriSet, uriList));\n        assertTrue(StringUtils.requestUriMatch(\"/zts/v1/domain/athenz/service/zms/publickey/zms1\", uriSet, uriList));\n    }", "signature": "void testRequestUriMatch()", "full_signature": "@Test public void testRequestUriMatch()", "class_method_signature": "StringUtilsTest.testRequestUriMatch()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "requestUriMatch", "assertFalse", "requestUriMatch", "emptySet", "assertFalse", "requestUriMatch", "emptyList", "add", "add", "assertFalse", "requestUriMatch", "assertTrue", "requestUriMatch", "assertTrue", "requestUriMatch", "add", "compile", "assertFalse", "requestUriMatch", "assertFalse", "requestUriMatch", "assertFalse", "requestUriMatch", "assertFalse", "requestUriMatch", "assertTrue", "requestUriMatch"]}, "focal_class": {"identifier": "StringUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "isRegexMetaCharacter", "parameters": "(char regexChar)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRegexMetaCharacter(char regexChar)", "full_signature": "public static boolean isRegexMetaCharacter(char regexChar)", "class_method_signature": "StringUtils.isRegexMetaCharacter(char regexChar)", "testcase": false, "constructor": false}, {"identifier": "containsMatchCharacter", "parameters": "(String name)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsMatchCharacter(String name)", "full_signature": "public static boolean containsMatchCharacter(String name)", "class_method_signature": "StringUtils.containsMatchCharacter(String name)", "testcase": false, "constructor": false}, {"identifier": "patternFromGlob", "parameters": "(String glob)", "modifiers": "public static", "return": "String", "signature": "String patternFromGlob(String glob)", "full_signature": "public static String patternFromGlob(String glob)", "class_method_signature": "StringUtils.patternFromGlob(String glob)", "testcase": false, "constructor": false}, {"identifier": "containsControlCharacter", "parameters": "(String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsControlCharacter(String value)", "full_signature": "public static boolean containsControlCharacter(String value)", "class_method_signature": "StringUtils.containsControlCharacter(String value)", "testcase": false, "constructor": false}, {"identifier": "requestUriMatch", "parameters": "(String uri, Set<String> uriSet,\n            List<Pattern> uriList)", "modifiers": "public static", "return": "boolean", "signature": "boolean requestUriMatch(String uri, Set<String> uriSet,\n            List<Pattern> uriList)", "full_signature": "public static boolean requestUriMatch(String uri, Set<String> uriSet,\n            List<Pattern> uriList)", "class_method_signature": "StringUtils.requestUriMatch(String uri, Set<String> uriSet,\n            List<Pattern> uriList)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/StringUtils.java"}, "focal_method": {"identifier": "requestUriMatch", "parameters": "(String uri, Set<String> uriSet,\n            List<Pattern> uriList)", "modifiers": "public static", "return": "boolean", "body": "public static boolean requestUriMatch(String uri, Set<String> uriSet,\n            List<Pattern> uriList) {\n        \n        // first we're going to check if we have the uri in our set\n        \n        if (uriSet != null && uriSet.contains(uri)) {\n            return true;\n        }\n        \n        // if not in our set, we'll check our pattern list for a regex match\n        \n        if (uriList != null) {\n            for (Pattern pattern : uriList) {\n                Matcher matcher = pattern.matcher(uri);\n                if (matcher.matches()) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }", "signature": "boolean requestUriMatch(String uri, Set<String> uriSet,\n            List<Pattern> uriList)", "full_signature": "public static boolean requestUriMatch(String uri, Set<String> uriSet,\n            List<Pattern> uriList)", "class_method_signature": "StringUtils.requestUriMatch(String uri, Set<String> uriSet,\n            List<Pattern> uriList)", "testcase": false, "constructor": false, "invocations": ["contains", "matcher", "matches"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}