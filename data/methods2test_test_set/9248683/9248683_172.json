{"test_class": {"identifier": "SimpleHibernateEntityResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SimpleHibernateEntityResolver resolver = new SimpleHibernateEntityResolver();", "modifier": "private final", "type": "SimpleHibernateEntityResolver", "declarator": "resolver = new SimpleHibernateEntityResolver()", "var_name": "resolver"}], "file": "seeking-hibernate/src/test/java/com/eharmony/matching/seeking/translator/hibernate/SimpleHibernateEntityResolverTest.java"}, "test_case": {"identifier": "resolve_collectionName_default", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void resolve_collectionName_default() {\n        assertEquals(\"Maybe\", resolver.resolve(Maybe.class));\n    }", "signature": "void resolve_collectionName_default()", "full_signature": "@Test public void resolve_collectionName_default()", "class_method_signature": "SimpleHibernateEntityResolverTest.resolve_collectionName_default()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "resolve"]}, "focal_class": {"identifier": "SimpleHibernateEntityResolver", "superclass": "extends SimpleEntityResolver", "interfaces": "implements EntityResolver", "fields": [], "methods": [{"identifier": "resolve", "parameters": "(Class<?> entityClass)", "modifiers": "@Override public", "return": "String", "signature": "String resolve(Class<?> entityClass)", "full_signature": "@Override public String resolve(Class<?> entityClass)", "class_method_signature": "SimpleHibernateEntityResolver.resolve(Class<?> entityClass)", "testcase": false, "constructor": false}], "file": "seeking-hibernate/src/main/java/com/eharmony/matching/seeking/translator/hibernate/SimpleHibernateEntityResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(Class<?> entityClass)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String resolve(Class<?> entityClass) {\n        if (entityClass.isAnnotationPresent(Table.class)) {\n            Table annotation = entityClass.getAnnotation(Table.class);\n            if (!Strings.isNullOrEmpty(annotation.name())) {\n                return annotation.name();\n            }\n        }\n        if (entityClass.isAnnotationPresent(Entity.class)) {\n            Entity annotation = entityClass.getAnnotation(Entity.class);\n            if (!Strings.isNullOrEmpty(annotation.name())) {\n                return annotation.name();\n            }\n        }\n        return entityClass.getSimpleName();\n    }", "signature": "String resolve(Class<?> entityClass)", "full_signature": "@Override public String resolve(Class<?> entityClass)", "class_method_signature": "SimpleHibernateEntityResolver.resolve(Class<?> entityClass)", "testcase": false, "constructor": false, "invocations": ["isAnnotationPresent", "getAnnotation", "isNullOrEmpty", "name", "name", "isAnnotationPresent", "getAnnotation", "isNullOrEmpty", "name", "name", "getSimpleName"]}, "repository": {"repo_id": 9248683, "url": "https://github.com/eHarmony/seeking", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 194, "license": "licensed"}}