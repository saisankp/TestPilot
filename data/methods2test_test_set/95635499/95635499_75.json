{"test_class": {"identifier": "LinearlyScaledFunctionTest", "superclass": "", "interfaces": "", "fields": [], "file": "JAICore/jaicore-math/src/test/java/ai/libs/jaicore/math/linearalgebra/LinearlyScaledFunctionTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test() {\n\t\tDoubleFunction<Double> fun = x -> Math.pow(x, 2);\n\t\tLinearlyScaledFunction scaledFun = new LinearlyScaledFunction(fun, 0, 0, 100, 1000);\n\t\tassertEquals(0.0, scaledFun.apply(0), 0.001);\n\t\tassertEquals(1000.0, scaledFun.apply(100), 0.001);\n\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tSystem.out.println(scaledFun.apply(i));\n\t\t}\n\t}", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "LinearlyScaledFunctionTest.test()", "testcase": true, "constructor": false, "invocations": ["pow", "assertEquals", "apply", "assertEquals", "apply", "println", "apply"]}, "focal_class": {"identifier": "LinearlyScaledFunction", "superclass": "", "interfaces": "implements DoubleFunction<Double>", "fields": [{"original_string": "private final DoubleFunction<Double> baseFunction;", "modifier": "private final", "type": "DoubleFunction<Double>", "declarator": "baseFunction", "var_name": "baseFunction"}, {"original_string": "private final AffineFunction mapping;", "modifier": "private final", "type": "AffineFunction", "declarator": "mapping", "var_name": "mapping"}], "methods": [{"identifier": "LinearlyScaledFunction", "parameters": "(final DoubleFunction<Double> baseFunction, final double x1, final double y1, final double x2, final double y2)", "modifiers": "public", "return": "", "signature": " LinearlyScaledFunction(final DoubleFunction<Double> baseFunction, final double x1, final double y1, final double x2, final double y2)", "full_signature": "public  LinearlyScaledFunction(final DoubleFunction<Double> baseFunction, final double x1, final double y1, final double x2, final double y2)", "class_method_signature": "LinearlyScaledFunction.LinearlyScaledFunction(final DoubleFunction<Double> baseFunction, final double x1, final double y1, final double x2, final double y2)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(final double arg0)", "modifiers": "@Override public", "return": "Double", "signature": "Double apply(final double arg0)", "full_signature": "@Override public Double apply(final double arg0)", "class_method_signature": "LinearlyScaledFunction.apply(final double arg0)", "testcase": false, "constructor": false}, {"identifier": "getMapping", "parameters": "()", "modifiers": "public", "return": "AffineFunction", "signature": "AffineFunction getMapping()", "full_signature": "public AffineFunction getMapping()", "class_method_signature": "LinearlyScaledFunction.getMapping()", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-math/src/main/java/ai/libs/jaicore/math/linearalgebra/LinearlyScaledFunction.java"}, "focal_method": {"identifier": "apply", "parameters": "(final double arg0)", "modifiers": "@Override public", "return": "Double", "body": "@Override\n\tpublic Double apply(final double arg0) {\n\t\tdouble intermediate = this.baseFunction.apply(arg0);\n\t\treturn this.mapping.applyAsDouble(intermediate);\n\t}", "signature": "Double apply(final double arg0)", "full_signature": "@Override public Double apply(final double arg0)", "class_method_signature": "LinearlyScaledFunction.apply(final double arg0)", "testcase": false, "constructor": false, "invocations": ["apply", "applyAsDouble"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}