{"test_class": {"identifier": "GeometryMergeCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate CommandDispatcher dispatcher;", "modifier": "@Autowired\n\tprivate", "type": "CommandDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "private List<Geometry> geometries;", "modifier": "private", "type": "List<Geometry>", "declarator": "geometries", "var_name": "geometries"}], "file": "command/src/test/java/org/geomajas/command/geometry/GeometryMergeCommandTest.java"}, "test_case": {"identifier": "withPrecisionAsBufferTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void withPrecisionAsBufferTest() throws GeomajasException {\n\t\tGeometryMergeRequest request = new GeometryMergeRequest();\n\t\trequest.setGeometries(geometries);\n\t\trequest.setPrecision(0);\n\t\trequest.setUsePrecisionAsBuffer(true);\n\t\tGeometryMergeResponse response = (GeometryMergeResponse) dispatcher.execute(\n\t\t\t\tGeometryMergeRequest.COMMAND, request, null, \"en\");\n\t\tAssert.assertEquals(3, response.getGeometry().getGeometries().length);\n\t}", "signature": "void withPrecisionAsBufferTest()", "full_signature": "@Test public void withPrecisionAsBufferTest()", "class_method_signature": "GeometryMergeCommandTest.withPrecisionAsBufferTest()", "testcase": true, "constructor": false, "invocations": ["setGeometries", "setPrecision", "setUsePrecisionAsBuffer", "execute", "assertEquals", "getGeometries", "getGeometry"]}, "focal_class": {"identifier": "GeometryMergeCommand", "superclass": "", "interfaces": "implements CommandHasRequest<GeometryMergeRequest, GeometryMergeResponse>", "fields": [{"original_string": "@Autowired\n\tprivate DtoConverterService converter;", "modifier": "@Autowired\n\tprivate", "type": "DtoConverterService", "declarator": "converter", "var_name": "converter"}], "methods": [{"identifier": "getEmptyCommandRequest", "parameters": "()", "modifiers": "@Override public", "return": "GeometryMergeRequest", "signature": "GeometryMergeRequest getEmptyCommandRequest()", "full_signature": "@Override public GeometryMergeRequest getEmptyCommandRequest()", "class_method_signature": "GeometryMergeCommand.getEmptyCommandRequest()", "testcase": false, "constructor": false}, {"identifier": "getEmptyCommandResponse", "parameters": "()", "modifiers": "@Override public", "return": "GeometryMergeResponse", "signature": "GeometryMergeResponse getEmptyCommandResponse()", "full_signature": "@Override public GeometryMergeResponse getEmptyCommandResponse()", "class_method_signature": "GeometryMergeCommand.getEmptyCommandResponse()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(GeometryMergeRequest request, GeometryMergeResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void execute(GeometryMergeRequest request, GeometryMergeResponse response)", "full_signature": "@Override public void execute(GeometryMergeRequest request, GeometryMergeResponse response)", "class_method_signature": "GeometryMergeCommand.execute(GeometryMergeRequest request, GeometryMergeResponse response)", "testcase": false, "constructor": false}], "file": "command/src/main/java/org/geomajas/command/geometry/GeometryMergeCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(GeometryMergeRequest request, GeometryMergeResponse response)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(GeometryMergeRequest request, GeometryMergeResponse response) throws Exception {\n\t\tList<org.geomajas.geometry.Geometry> clientGeometries = request.getGeometries();\n\t\tif (clientGeometries == null || clientGeometries.size() == 0) {\n\t\t\tthrow new GeomajasException(ExceptionCode.PARAMETER_MISSING, \"request\");\n\t\t}\n\t\tif (clientGeometries.size() == 1) {\n\t\t\tresponse.setGeometry(clientGeometries.get(0));\n\t\t\treturn;\n\t\t}\n\t\tint precision = request.getPrecision();\n\n\t\tList<Geometry> geometries = new ArrayList<Geometry>();\n\t\tfor (org.geomajas.geometry.Geometry geometry : clientGeometries) {\n\t\t\tgeometry.setPrecision(precision);\n\t\t\tgeometries.add(converter.toInternal(geometry));\n\t\t}\n\t\tPrecisionModel precisionModel;\n\t\tif (precision == -1) {\n\t\t\tprecisionModel = new PrecisionModel(PrecisionModel.FLOATING);\n\t\t\tprecision = 20;\n\t\t} else {\n\t\t\tprecisionModel = new PrecisionModel(Math.pow(10.0, precision));\n\t\t}\n\t\tGeometryFactory factory = new GeometryFactory(precisionModel, geometries.get(0).getSRID());\n\n\t\t// Calculate the union:\n\t\tdouble buffer = 0;\n\t\tif (request.usePrecisionAsBuffer()) {\n\t\t\tbuffer = Math.pow(10.0, -(precision - 1));\n\t\t}\n\t\tGeometryCollection geometryCollection = (GeometryCollection) factory.buildGeometry(geometries);\n\n\t\tGeometry union = geometryCollection.buffer(buffer);\n\t\tresponse.setGeometry(converter.toDto(union));\n\t}", "signature": "void execute(GeometryMergeRequest request, GeometryMergeResponse response)", "full_signature": "@Override public void execute(GeometryMergeRequest request, GeometryMergeResponse response)", "class_method_signature": "GeometryMergeCommand.execute(GeometryMergeRequest request, GeometryMergeResponse response)", "testcase": false, "constructor": false, "invocations": ["getGeometries", "size", "size", "setGeometry", "get", "getPrecision", "setPrecision", "add", "toInternal", "pow", "getSRID", "get", "usePrecisionAsBuffer", "pow", "buildGeometry", "buffer", "setGeometry", "toDto"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}