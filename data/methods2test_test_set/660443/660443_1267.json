{"test_class": {"identifier": "ConjugatedAtomEncoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/ConjugatedAtomEncoderTest.java"}, "test_case": {"identifier": "testEncode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEncode() throws Exception {\n        AtomEncoder a = mock(AtomEncoder.class);\n        AtomEncoder b = mock(AtomEncoder.class);\n        AtomEncoder c = mock(AtomEncoder.class);\n        IAtom atom = mock(IAtom.class);\n        IAtomContainer container = mock(IAtomContainer.class);\n\n        AtomEncoder encoder = new ConjugatedAtomEncoder(Arrays.asList(a, b, c));\n\n        encoder.encode(atom, container);\n\n        InOrder order = inOrder(a, b, c);\n        order.verify(a, times(1)).encode(atom, container);\n        order.verify(b, times(1)).encode(atom, container);\n        order.verify(c, times(1)).encode(atom, container);\n        verifyNoMoreInteractions(a, b, c, atom, container);\n    }", "signature": "void testEncode()", "full_signature": "@Test public void testEncode()", "class_method_signature": "ConjugatedAtomEncoderTest.testEncode()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "mock", "asList", "encode", "inOrder", "encode", "verify", "times", "encode", "verify", "times", "encode", "verify", "times", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "ConjugatedAtomEncoder", "superclass": "", "interfaces": "implements AtomEncoder", "fields": [{"original_string": "private final List<AtomEncoder> encoders;", "modifier": "private final", "type": "List<AtomEncoder>", "declarator": "encoders", "var_name": "encoders"}], "methods": [{"identifier": "ConjugatedAtomEncoder", "parameters": "(List<AtomEncoder> encoders)", "modifiers": "public", "return": "", "signature": " ConjugatedAtomEncoder(List<AtomEncoder> encoders)", "full_signature": "public  ConjugatedAtomEncoder(List<AtomEncoder> encoders)", "class_method_signature": "ConjugatedAtomEncoder.ConjugatedAtomEncoder(List<AtomEncoder> encoders)", "testcase": false, "constructor": true}, {"identifier": "encode", "parameters": "(IAtom atom, IAtomContainer container)", "modifiers": "@Override public", "return": "int", "signature": "int encode(IAtom atom, IAtomContainer container)", "full_signature": "@Override public int encode(IAtom atom, IAtomContainer container)", "class_method_signature": "ConjugatedAtomEncoder.encode(IAtom atom, IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(AtomEncoder encoder, AtomEncoder... encoders)", "modifiers": "public static", "return": "AtomEncoder", "signature": "AtomEncoder create(AtomEncoder encoder, AtomEncoder... encoders)", "full_signature": "public static AtomEncoder create(AtomEncoder encoder, AtomEncoder... encoders)", "class_method_signature": "ConjugatedAtomEncoder.create(AtomEncoder encoder, AtomEncoder... encoders)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/ConjugatedAtomEncoder.java"}, "focal_method": {"identifier": "encode", "parameters": "(IAtom atom, IAtomContainer container)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int encode(IAtom atom, IAtomContainer container) {\n        int hash = 179426549;\n        for (AtomEncoder encoder : encoders)\n            hash = 31 * hash + encoder.encode(atom, container);\n        return hash;\n    }", "signature": "int encode(IAtom atom, IAtomContainer container)", "full_signature": "@Override public int encode(IAtom atom, IAtomContainer container)", "class_method_signature": "ConjugatedAtomEncoder.encode(IAtom atom, IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["encode"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}