{"test_class": {"identifier": "DubboMonitorFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DubboMonitorFactory dubboMonitorFactory;", "modifier": "private", "type": "DubboMonitorFactory", "declarator": "dubboMonitorFactory", "var_name": "dubboMonitorFactory"}, {"original_string": "@Mock\n    private ProxyFactory proxyFactory;", "modifier": "@Mock\n    private", "type": "ProxyFactory", "declarator": "proxyFactory", "var_name": "proxyFactory"}], "file": "dubbo-monitor/dubbo-monitor-default/src/test/java/org/apache/dubbo/monitor/dubbo/DubboMonitorFactoryTest.java"}, "test_case": {"identifier": "testCreateMonitor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateMonitor() {\n        URL urlWithoutPath = URL.valueOf(\"http://10.10.10.11\");\n        Monitor monitor = dubboMonitorFactory.createMonitor(urlWithoutPath);\n        assertThat(monitor, not(nullValue()));\n\n        URL urlWithFilterKey = URL.valueOf(\"http://10.10.10.11/\").addParameter(REFERENCE_FILTER_KEY, \"testFilter\");\n        monitor = dubboMonitorFactory.createMonitor(urlWithFilterKey);\n\n        assertThat(monitor, not(nullValue()));\n        ArgumentCaptor<Invoker> invokerArgumentCaptor = ArgumentCaptor.forClass(Invoker.class);\n        verify(proxyFactory, atLeastOnce()).getProxy(invokerArgumentCaptor.capture());\n\n        Invoker invoker = invokerArgumentCaptor.getValue();\n        assertThat(invoker.getUrl().getParameter(REFERENCE_FILTER_KEY), containsString(\"testFilter\"));\n    }", "signature": "void testCreateMonitor()", "full_signature": "@Test public void testCreateMonitor()", "class_method_signature": "DubboMonitorFactoryTest.testCreateMonitor()", "testcase": true, "constructor": false, "invocations": ["valueOf", "createMonitor", "assertThat", "not", "nullValue", "addParameter", "valueOf", "createMonitor", "assertThat", "not", "nullValue", "forClass", "getProxy", "verify", "atLeastOnce", "capture", "getValue", "assertThat", "getParameter", "getUrl", "containsString"]}, "focal_class": {"identifier": "DubboMonitorFactory", "superclass": "extends AbstractMonitorFactory", "interfaces": "", "fields": [{"original_string": "private Protocol protocol;", "modifier": "private", "type": "Protocol", "declarator": "protocol", "var_name": "protocol"}, {"original_string": "private ProxyFactory proxyFactory;", "modifier": "private", "type": "ProxyFactory", "declarator": "proxyFactory", "var_name": "proxyFactory"}], "methods": [{"identifier": "setProtocol", "parameters": "(Protocol protocol)", "modifiers": "public", "return": "void", "signature": "void setProtocol(Protocol protocol)", "full_signature": "public void setProtocol(Protocol protocol)", "class_method_signature": "DubboMonitorFactory.setProtocol(Protocol protocol)", "testcase": false, "constructor": false}, {"identifier": "setProxyFactory", "parameters": "(ProxyFactory proxyFactory)", "modifiers": "public", "return": "void", "signature": "void setProxyFactory(ProxyFactory proxyFactory)", "full_signature": "public void setProxyFactory(ProxyFactory proxyFactory)", "class_method_signature": "DubboMonitorFactory.setProxyFactory(ProxyFactory proxyFactory)", "testcase": false, "constructor": false}, {"identifier": "createMonitor", "parameters": "(URL url)", "modifiers": "@Override protected", "return": "Monitor", "signature": "Monitor createMonitor(URL url)", "full_signature": "@Override protected Monitor createMonitor(URL url)", "class_method_signature": "DubboMonitorFactory.createMonitor(URL url)", "testcase": false, "constructor": false}], "file": "dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/DubboMonitorFactory.java"}, "focal_method": {"identifier": "createMonitor", "parameters": "(URL url)", "modifiers": "@Override protected", "return": "Monitor", "body": "@Override\n    protected Monitor createMonitor(URL url) {\n        URLBuilder urlBuilder = URLBuilder.from(url);\n        urlBuilder.setProtocol(url.getParameter(PROTOCOL_KEY, DUBBO_PROTOCOL));\n        if (StringUtils.isEmpty(url.getPath())) {\n            urlBuilder.setPath(MonitorService.class.getName());\n        }\n        String filter = url.getParameter(REFERENCE_FILTER_KEY);\n        if (StringUtils.isEmpty(filter)) {\n            filter = \"\";\n        } else {\n            filter = filter + \",\";\n        }\n        urlBuilder.addParameters(CHECK_KEY, String.valueOf(false),\n                REFERENCE_FILTER_KEY, filter + \"-monitor\");\n        Invoker<MonitorService> monitorInvoker = protocol.refer(MonitorService.class, urlBuilder.build());\n        MonitorService monitorService = proxyFactory.getProxy(monitorInvoker);\n        return new DubboMonitor(monitorInvoker, monitorService);\n    }", "signature": "Monitor createMonitor(URL url)", "full_signature": "@Override protected Monitor createMonitor(URL url)", "class_method_signature": "DubboMonitorFactory.createMonitor(URL url)", "testcase": false, "constructor": false, "invocations": ["from", "setProtocol", "getParameter", "isEmpty", "getPath", "setPath", "getName", "getParameter", "isEmpty", "addParameters", "valueOf", "refer", "build", "getProxy"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}