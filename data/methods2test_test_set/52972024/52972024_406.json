{"test_class": {"identifier": "PasswordEncoderPluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PasswordEncoderPlugin plugin;", "modifier": "private", "type": "PasswordEncoderPlugin", "declarator": "plugin", "var_name": "plugin"}, {"original_string": "private IBootstrap bootstrap;", "modifier": "private", "type": "IBootstrap", "declarator": "bootstrap", "var_name": "bootstrap"}, {"original_string": "private ArgumentCaptor<IPoorAction> actionArgumentCaptor;", "modifier": "private", "type": "ArgumentCaptor<IPoorAction>", "declarator": "actionArgumentCaptor", "var_name": "actionArgumentCaptor"}], "file": "CoreFeatures/Security-plugins/PluginPasswordEncoder/src/test/java/info/smart_tools/smartactors/security_plugins/password_encoder_plugin/PasswordEncoderPluginTest.java"}, "test_case": {"identifier": "ShouldThrowException_When_InternalExceptionIsThrown", "parameters": "()", "modifiers": "@Test(expected = PluginException.class) public", "return": "void", "body": "@Test(expected = PluginException.class)\n    public void ShouldThrowException_When_InternalExceptionIsThrown() throws Exception {\n\n        whenNew(BootstrapItem.class).withArguments(\"PasswordEncoderPlugin\").thenThrow(new InvalidArgumentException(\"\"));\n        plugin.load();\n    }", "signature": "void ShouldThrowException_When_InternalExceptionIsThrown()", "full_signature": "@Test(expected = PluginException.class) public void ShouldThrowException_When_InternalExceptionIsThrown()", "class_method_signature": "PasswordEncoderPluginTest.ShouldThrowException_When_InternalExceptionIsThrown()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "withArguments", "whenNew", "load"]}, "focal_class": {"identifier": "PasswordEncoderPlugin", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private final IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private final", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}], "methods": [{"identifier": "PasswordEncoderPlugin", "parameters": "(final IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " PasswordEncoderPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  PasswordEncoderPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "PasswordEncoderPlugin.PasswordEncoderPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "PasswordEncoderPlugin.load()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Security-plugins/PluginPasswordEncoder/src/main/java/info/smart_tools/smartactors/security_plugins/password_encoder_plugin/PasswordEncoderPlugin.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load() throws PluginException {\n\n        try {\n            IBootstrapItem<String> item = new BootstrapItem(\"PasswordEncoderPlugin\");\n            item\n                .process(() -> {\n                    try {\n                        IOC.register(Keys.getOrAdd(\"CharSequenceCodec\"), new ApplyFunctionToArgumentsStrategy(\n                                (args) -> {\n                                    try {\n                                        String charset = String.valueOf(args[0]);\n                                        return CharSequenceCodec.create(charset);\n                                    } catch (Exception e) {\n                                        throw new RuntimeException(\"Error during resolving char sequence codec\", e);\n                                    }\n                                }\n                            )\n                        );\n                        IOC.register(Keys.getOrAdd(\"Base64Encoder\"), new ApplyFunctionToArgumentsStrategy(\n                                (args) -> {\n                                    try {\n                                        return Base64.create();\n                                    } catch (Exception e) {\n                                        throw new RuntimeException(\"Error during resolving encoder\", e);\n                                    }\n                                }\n                            )\n                        );\n                        IOC.register(Keys.getOrAdd(\"HexEncoder\"), new ApplyFunctionToArgumentsStrategy(\n                                (args) -> {\n                                    try {\n                                        return Hex.create();\n                                    } catch (Exception e) {\n                                        throw new RuntimeException(\"Error during resolving encoder\", e);\n                                    }\n                                }\n                            )\n                        );\n                        IOC.register(Keys.getOrAdd(\"PasswordEncoder\"), new ApplyFunctionToArgumentsStrategy(\n                                (args) -> {\n                                    try {\n                                        String algorithm = String.valueOf(args[0]);\n                                        String encoderType = String.valueOf(args[1]);\n                                        String charset = String.valueOf(args[2]);\n\n                                        IEncoder encoder = IOC.resolve(Keys.getOrAdd(encoderType));\n                                        ICharSequenceCodec charSequenceCodec = IOC.resolve(Keys.getOrAdd(\"CharSequenceCodec\"), charset);\n                                        return MDPasswordEncoder.create(algorithm, encoder, charSequenceCodec);\n                                    } catch (Exception e) {\n                                        throw new RuntimeException(\"Error during resolving password encoder\", e);\n                                    }\n                                }\n                            )\n                        );\n                    } catch (ResolutionException e) {\n                        throw new ActionExecuteException(\"PasswordEncoder plugin can't load: can't get key\");\n                    } catch (InvalidArgumentException e) {\n                        throw new ActionExecuteException(\"PasswordEncoder plugin can't load: can't create strategy\");\n                    } catch (RegistrationException e) {\n                        throw new ActionExecuteException(\"PasswordEncoder plugin can't load: can't register new strategy\");\n                    }\n                });\n            bootstrap.add(item);\n        } catch (InvalidArgumentException e) {\n            throw new PluginException(\"Can't get BootstrapItem\", e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "PasswordEncoderPlugin.load()", "testcase": false, "constructor": false, "invocations": ["process", "register", "getOrAdd", "valueOf", "create", "register", "getOrAdd", "create", "register", "getOrAdd", "create", "register", "getOrAdd", "valueOf", "valueOf", "valueOf", "resolve", "getOrAdd", "resolve", "getOrAdd", "create", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}