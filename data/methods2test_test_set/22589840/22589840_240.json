{"test_class": {"identifier": "NotificationCourseAccessManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "NotificationCourseAccessManager notificationCourseAccessManager;", "modifier": "", "type": "NotificationCourseAccessManager", "declarator": "notificationCourseAccessManager", "var_name": "notificationCourseAccessManager"}, {"original_string": "NotificationLearnService notificationLearnServiceMock;", "modifier": "", "type": "NotificationLearnService", "declarator": "notificationLearnServiceMock", "var_name": "notificationLearnServiceMock"}, {"original_string": "RepositoryService repositoryServiceMock;", "modifier": "", "type": "RepositoryService", "declarator": "repositoryServiceMock", "var_name": "repositoryServiceMock"}, {"original_string": "CourseAccessEvaluator courseAccessEvaluatorMock;", "modifier": "", "type": "CourseAccessEvaluator", "declarator": "courseAccessEvaluatorMock", "var_name": "courseAccessEvaluatorMock"}, {"original_string": "RepositoryEntry privateCourseMock1;", "modifier": "", "type": "RepositoryEntry", "declarator": "privateCourseMock1", "var_name": "privateCourseMock1"}, {"original_string": "Long resourceableId_privateCourse1 = new Long(7);", "modifier": "", "type": "Long", "declarator": "resourceableId_privateCourse1 = new Long(7)", "var_name": "resourceableId_privateCourse1"}, {"original_string": "RepositoryEntry privateCourseMock2;", "modifier": "", "type": "RepositoryEntry", "declarator": "privateCourseMock2", "var_name": "privateCourseMock2"}, {"original_string": "Long resourceableId_privateCourse2 = new Long(8);", "modifier": "", "type": "Long", "declarator": "resourceableId_privateCourse2 = new Long(8)", "var_name": "resourceableId_privateCourse2"}, {"original_string": "RepositoryEntry closedCourseMock;", "modifier": "", "type": "RepositoryEntry", "declarator": "closedCourseMock", "var_name": "closedCourseMock"}, {"original_string": "Long resourceableId_closedCourse = new Long(9);", "modifier": "", "type": "Long", "declarator": "resourceableId_closedCourse = new Long(9)", "var_name": "resourceableId_closedCourse"}, {"original_string": "RepositoryEntry okCourseMock;", "modifier": "", "type": "RepositoryEntry", "declarator": "okCourseMock", "var_name": "okCourseMock"}, {"original_string": "Long resourceableId_OKCourse = new Long(6);", "modifier": "", "type": "Long", "declarator": "resourceableId_OKCourse = new Long(6)", "var_name": "resourceableId_OKCourse"}, {"original_string": "ICourse accessibleCourseMock;", "modifier": "", "type": "ICourse", "declarator": "accessibleCourseMock", "var_name": "accessibleCourseMock"}, {"original_string": "CourseNode courseNodeMock;", "modifier": "", "type": "CourseNode", "declarator": "courseNodeMock", "var_name": "courseNodeMock"}, {"original_string": "Long contextId_privateCourse1 = new Long(1);", "modifier": "", "type": "Long", "declarator": "contextId_privateCourse1 = new Long(1)", "var_name": "contextId_privateCourse1"}, {"original_string": "Long contextId_privateCourse2 = new Long(11);", "modifier": "", "type": "Long", "declarator": "contextId_privateCourse2 = new Long(11)", "var_name": "contextId_privateCourse2"}, {"original_string": "Long contextId_deletedCourse = new Long(2);", "modifier": "", "type": "Long", "declarator": "contextId_deletedCourse = new Long(2)", "var_name": "contextId_deletedCourse"}, {"original_string": "Long contextId_closedCourse = new Long(3);", "modifier": "", "type": "Long", "declarator": "contextId_closedCourse = new Long(3)", "var_name": "contextId_closedCourse"}, {"original_string": "Long contextId_ok = new Long(4);", "modifier": "", "type": "Long", "declarator": "contextId_ok = new Long(4)", "var_name": "contextId_ok"}, {"original_string": "Long subcontextId_ok = new Long(5);", "modifier": "", "type": "Long", "declarator": "subcontextId_ok = new Long(5)", "var_name": "subcontextId_ok"}, {"original_string": "List<NotificationSubscriptionContext> contextsOfSubscriber1;", "modifier": "", "type": "List<NotificationSubscriptionContext>", "declarator": "contextsOfSubscriber1", "var_name": "contextsOfSubscriber1"}, {"original_string": "List<NotificationSubscriptionContext> contextsOfSubscriber2;", "modifier": "", "type": "List<NotificationSubscriptionContext>", "declarator": "contextsOfSubscriber2", "var_name": "contextsOfSubscriber2"}, {"original_string": "Long subscriberId1 = new Long(50);", "modifier": "", "type": "Long", "declarator": "subscriberId1 = new Long(50)", "var_name": "subscriberId1"}, {"original_string": "Long subscriberId2 = new Long(60);", "modifier": "", "type": "Long", "declarator": "subscriberId2 = new Long(60)", "var_name": "subscriberId2"}, {"original_string": "List<Long> subscriberIds;", "modifier": "", "type": "List<Long>", "declarator": "subscriberIds", "var_name": "subscriberIds"}, {"original_string": "Identity identityMock1;", "modifier": "", "type": "Identity", "declarator": "identityMock1", "var_name": "identityMock1"}], "file": "olat7.8/src/test/java/org/olat/lms/course/access/notification/NotificationCourseAccessManagerTest.java"}, "test_case": {"identifier": "getCourseFromCacheOrLoad_getNotExisting", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getCourseFromCacheOrLoad_getNotExisting() {\n        // this is not found in cache and cannot be loaded, so it is null\n        RepositoryEntry notExistingRepositoryEntry = mock(RepositoryEntry.class);\n        when(notExistingRepositoryEntry.getResourceableId()).thenReturn(new Long(100));\n        ICourse publicCourse = notificationCourseAccessManager.getCourseFromCacheOrLoad(notExistingRepositoryEntry);\n        assertNull(publicCourse);\n    }", "signature": "void getCourseFromCacheOrLoad_getNotExisting()", "full_signature": "@Test public void getCourseFromCacheOrLoad_getNotExisting()", "class_method_signature": "NotificationCourseAccessManagerTest.getCourseFromCacheOrLoad_getNotExisting()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getResourceableId", "getCourseFromCacheOrLoad", "assertNull"]}, "focal_class": {"identifier": "NotificationCourseAccessManager", "superclass": "", "interfaces": "implements CourseAccessManager", "fields": [{"original_string": "private static final Logger log = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}, {"original_string": "@Autowired\n    NotificationLearnService notificationLearnServiceImpl;", "modifier": "@Autowired", "type": "NotificationLearnService", "declarator": "notificationLearnServiceImpl", "var_name": "notificationLearnServiceImpl"}, {"original_string": "@Autowired\n    RepositoryService repositoryService;", "modifier": "@Autowired", "type": "RepositoryService", "declarator": "repositoryService", "var_name": "repositoryService"}, {"original_string": "@Autowired\n    CourseAccessEvaluator courseAccessEvaluatorImpl;", "modifier": "@Autowired", "type": "CourseAccessEvaluator", "declarator": "courseAccessEvaluatorImpl", "var_name": "courseAccessEvaluatorImpl"}, {"original_string": "DB dBImpl;", "modifier": "", "type": "DB", "declarator": "dBImpl", "var_name": "dBImpl"}, {"original_string": "Map<Long, ICourse> repositoryEntryToCourseCache;", "modifier": "", "type": "Map<Long, ICourse>", "declarator": "repositoryEntryToCourseCache", "var_name": "repositoryEntryToCourseCache"}], "methods": [{"identifier": "NotificationCourseAccessManager", "parameters": "()", "modifiers": "", "return": "", "signature": " NotificationCourseAccessManager()", "full_signature": "  NotificationCourseAccessManager()", "class_method_signature": "NotificationCourseAccessManager.NotificationCourseAccessManager()", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "NotificationCourseAccessManager.execute()", "testcase": false, "constructor": false}, {"identifier": "removeOldEvents", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removeOldEvents()", "full_signature": "private void removeOldEvents()", "class_method_signature": "NotificationCourseAccessManager.removeOldEvents()", "testcase": false, "constructor": false}, {"identifier": "removeInvalidSubscribers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removeInvalidSubscribers()", "full_signature": "private void removeInvalidSubscribers()", "class_method_signature": "NotificationCourseAccessManager.removeInvalidSubscribers()", "testcase": false, "constructor": false}, {"identifier": "removeInvalidContexts", "parameters": "(List<Long> subscriberIds)", "modifiers": "", "return": "Set<Long>", "signature": "Set<Long> removeInvalidContexts(List<Long> subscriberIds)", "full_signature": " Set<Long> removeInvalidContexts(List<Long> subscriberIds)", "class_method_signature": "NotificationCourseAccessManager.removeInvalidContexts(List<Long> subscriberIds)", "testcase": false, "constructor": false}, {"identifier": "invalidateUnaccessibleSubscriptionsForSubscribers", "parameters": "(List<Long> subscriberIds)", "modifiers": "private", "return": "void", "signature": "void invalidateUnaccessibleSubscriptionsForSubscribers(List<Long> subscriberIds)", "full_signature": "private void invalidateUnaccessibleSubscriptionsForSubscribers(List<Long> subscriberIds)", "class_method_signature": "NotificationCourseAccessManager.invalidateUnaccessibleSubscriptionsForSubscribers(List<Long> subscriberIds)", "testcase": false, "constructor": false}, {"identifier": "invalidateUnaccessibleSubscriptions", "parameters": "(List<NotificationSubscriptionContext> notAccessibleNotificationSubscriptionContexts)", "modifiers": "private", "return": "void", "signature": "void invalidateUnaccessibleSubscriptions(List<NotificationSubscriptionContext> notAccessibleNotificationSubscriptionContexts)", "full_signature": "private void invalidateUnaccessibleSubscriptions(List<NotificationSubscriptionContext> notAccessibleNotificationSubscriptionContexts)", "class_method_signature": "NotificationCourseAccessManager.invalidateUnaccessibleSubscriptions(List<NotificationSubscriptionContext> notAccessibleNotificationSubscriptionContexts)", "testcase": false, "constructor": false}, {"identifier": "getUnaccesibleSubscriptionsForSubscriber", "parameters": "(Long subscriberId)", "modifiers": "", "return": "List<NotificationSubscriptionContext>", "signature": "List<NotificationSubscriptionContext> getUnaccesibleSubscriptionsForSubscriber(Long subscriberId)", "full_signature": " List<NotificationSubscriptionContext> getUnaccesibleSubscriptionsForSubscriber(Long subscriberId)", "class_method_signature": "NotificationCourseAccessManager.getUnaccesibleSubscriptionsForSubscriber(Long subscriberId)", "testcase": false, "constructor": false}, {"identifier": "getCoursesAccesibleForIdentity", "parameters": "(List<NotificationSubscriptionContext> notificationCourseAccessTOs)", "modifiers": "", "return": "Map<Long, RepositoryEntry>", "signature": "Map<Long, RepositoryEntry> getCoursesAccesibleForIdentity(List<NotificationSubscriptionContext> notificationCourseAccessTOs)", "full_signature": " Map<Long, RepositoryEntry> getCoursesAccesibleForIdentity(List<NotificationSubscriptionContext> notificationCourseAccessTOs)", "class_method_signature": "NotificationCourseAccessManager.getCoursesAccesibleForIdentity(List<NotificationSubscriptionContext> notificationCourseAccessTOs)", "testcase": false, "constructor": false}, {"identifier": "isCourseAccesibleForIdentity", "parameters": "(NotificationSubscriptionContext notificationSubscriptionContext)", "modifiers": "private", "return": "RepositoryEntry", "signature": "RepositoryEntry isCourseAccesibleForIdentity(NotificationSubscriptionContext notificationSubscriptionContext)", "full_signature": "private RepositoryEntry isCourseAccesibleForIdentity(NotificationSubscriptionContext notificationSubscriptionContext)", "class_method_signature": "NotificationCourseAccessManager.isCourseAccesibleForIdentity(NotificationSubscriptionContext notificationSubscriptionContext)", "testcase": false, "constructor": false}, {"identifier": "lookupRepositoryEntryAndCommit", "parameters": "(Long contextId)", "modifiers": "", "return": "RepositoryEntry", "signature": "RepositoryEntry lookupRepositoryEntryAndCommit(Long contextId)", "full_signature": " RepositoryEntry lookupRepositoryEntryAndCommit(Long contextId)", "class_method_signature": "NotificationCourseAccessManager.lookupRepositoryEntryAndCommit(Long contextId)", "testcase": false, "constructor": false}, {"identifier": "isSubscriptionAccessible", "parameters": "(NotificationSubscriptionContext notificationSubscriptionContext)", "modifiers": "private", "return": "boolean", "signature": "boolean isSubscriptionAccessible(NotificationSubscriptionContext notificationSubscriptionContext)", "full_signature": "private boolean isSubscriptionAccessible(NotificationSubscriptionContext notificationSubscriptionContext)", "class_method_signature": "NotificationCourseAccessManager.isSubscriptionAccessible(NotificationSubscriptionContext notificationSubscriptionContext)", "testcase": false, "constructor": false}, {"identifier": "commitDBImplTransaction", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void commitDBImplTransaction()", "full_signature": "private void commitDBImplTransaction()", "class_method_signature": "NotificationCourseAccessManager.commitDBImplTransaction()", "testcase": false, "constructor": false}, {"identifier": "getCourseFromCacheOrLoad", "parameters": "(RepositoryEntry courseRepositoryEntry)", "modifiers": "", "return": "ICourse", "signature": "ICourse getCourseFromCacheOrLoad(RepositoryEntry courseRepositoryEntry)", "full_signature": " ICourse getCourseFromCacheOrLoad(RepositoryEntry courseRepositoryEntry)", "class_method_signature": "NotificationCourseAccessManager.getCourseFromCacheOrLoad(RepositoryEntry courseRepositoryEntry)", "testcase": false, "constructor": false}, {"identifier": "isCourseNodeStillAvailable", "parameters": "(ICourse course, String nodeId)", "modifiers": "private", "return": "boolean", "signature": "boolean isCourseNodeStillAvailable(ICourse course, String nodeId)", "full_signature": "private boolean isCourseNodeStillAvailable(ICourse course, String nodeId)", "class_method_signature": "NotificationCourseAccessManager.isCourseNodeStillAvailable(ICourse course, String nodeId)", "testcase": false, "constructor": false}, {"identifier": "getCourseNode", "parameters": "(ICourse course, String nodeId)", "modifiers": "private", "return": "CourseNode", "signature": "CourseNode getCourseNode(ICourse course, String nodeId)", "full_signature": "private CourseNode getCourseNode(ICourse course, String nodeId)", "class_method_signature": "NotificationCourseAccessManager.getCourseNode(ICourse course, String nodeId)", "testcase": false, "constructor": false}, {"identifier": "getSubscribedCourseIds", "parameters": "(List<NotificationSubscriptionContext> contexts)", "modifiers": "private", "return": "Set<Long>", "signature": "Set<Long> getSubscribedCourseIds(List<NotificationSubscriptionContext> contexts)", "full_signature": "private Set<Long> getSubscribedCourseIds(List<NotificationSubscriptionContext> contexts)", "class_method_signature": "NotificationCourseAccessManager.getSubscribedCourseIds(List<NotificationSubscriptionContext> contexts)", "testcase": false, "constructor": false}, {"identifier": "addUnaccessibleCourseIds", "parameters": "(Set<Long> subscribedCourseIds, Set<Long> unaccessibleCourseIds)", "modifiers": "private", "return": "void", "signature": "void addUnaccessibleCourseIds(Set<Long> subscribedCourseIds, Set<Long> unaccessibleCourseIds)", "full_signature": "private void addUnaccessibleCourseIds(Set<Long> subscribedCourseIds, Set<Long> unaccessibleCourseIds)", "class_method_signature": "NotificationCourseAccessManager.addUnaccessibleCourseIds(Set<Long> subscribedCourseIds, Set<Long> unaccessibleCourseIds)", "testcase": false, "constructor": false}, {"identifier": "isCourseDeleted", "parameters": "(RepositoryEntry courseRepositoryEntry)", "modifiers": "private", "return": "boolean", "signature": "boolean isCourseDeleted(RepositoryEntry courseRepositoryEntry)", "full_signature": "private boolean isCourseDeleted(RepositoryEntry courseRepositoryEntry)", "class_method_signature": "NotificationCourseAccessManager.isCourseDeleted(RepositoryEntry courseRepositoryEntry)", "testcase": false, "constructor": false}, {"identifier": "isCourseClosed", "parameters": "(RepositoryEntry courseRepositoryEntry)", "modifiers": "private", "return": "boolean", "signature": "boolean isCourseClosed(RepositoryEntry courseRepositoryEntry)", "full_signature": "private boolean isCourseClosed(RepositoryEntry courseRepositoryEntry)", "class_method_signature": "NotificationCourseAccessManager.isCourseClosed(RepositoryEntry courseRepositoryEntry)", "testcase": false, "constructor": false}, {"identifier": "isCoursePrivate", "parameters": "(RepositoryEntry courseRepositoryEntry)", "modifiers": "private", "return": "boolean", "signature": "boolean isCoursePrivate(RepositoryEntry courseRepositoryEntry)", "full_signature": "private boolean isCoursePrivate(RepositoryEntry courseRepositoryEntry)", "class_method_signature": "NotificationCourseAccessManager.isCoursePrivate(RepositoryEntry courseRepositoryEntry)", "testcase": false, "constructor": false}], "file": "olat7.8/src/main/java/org/olat/lms/course/access/notification/NotificationCourseAccessManager.java"}, "focal_method": {"identifier": "getCourseFromCacheOrLoad", "parameters": "(RepositoryEntry courseRepositoryEntry)", "modifiers": "", "return": "ICourse", "body": "ICourse getCourseFromCacheOrLoad(RepositoryEntry courseRepositoryEntry) {\n        ICourse course = repositoryEntryToCourseCache.get(courseRepositoryEntry.getResourceableId());\n        if (course == null) {\n            OLATResourceable oLATResourceable = courseRepositoryEntry.getOlatResource();\n            if (oLATResourceable != null) {\n                course = CourseFactory.loadCourse(oLATResourceable);\n                repositoryEntryToCourseCache.put(courseRepositoryEntry.getResourceableId(), course);\n            }\n        }\n        return course;\n    }", "signature": "ICourse getCourseFromCacheOrLoad(RepositoryEntry courseRepositoryEntry)", "full_signature": " ICourse getCourseFromCacheOrLoad(RepositoryEntry courseRepositoryEntry)", "class_method_signature": "NotificationCourseAccessManager.getCourseFromCacheOrLoad(RepositoryEntry courseRepositoryEntry)", "testcase": false, "constructor": false, "invocations": ["get", "getResourceableId", "getOlatResource", "loadCourse", "put", "getResourceableId"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}