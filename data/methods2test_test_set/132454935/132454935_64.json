{"test_class": {"identifier": "ConsensusServiceImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "elrond-core/src/test/java/network/elrond/consensus/ConsensusServiceImplTest.java"}, "test_case": {"identifier": "testComputeLeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testComputeLeader(){\n        List<String> listNodes = new ArrayList<>();\n\n        listNodes.add(\"000\");\n        listNodes.add(\"040\");\n        listNodes.add(\"001\");\n        listNodes.add(\"005\");\n        listNodes.add(\"100\");\n        listNodes.add(\"002\");\n        listNodes.add(\"060\");\n\n        Collections.sort(listNodes);\n\n        //test sorting is ok\n        String prevValue = listNodes.get(0);\n        for (int i = 1; i < listNodes.size(); i++){\n            TestCase.assertTrue(prevValue.compareTo(listNodes.get(i)) < 0);\n\n            prevValue = listNodes.get(i);\n        }\n\n        System.out.println(String.format(\"%s\", listNodes));\n\n        ConsensusService consensusService = new ConsensusServiceImpl();\n        TestCase.assertEquals(listNodes.get(0), consensusService.computeLeader(listNodes, new Round(0, 0)));\n        TestCase.assertEquals(listNodes.get(1), consensusService.computeLeader(listNodes, new Round(1, 0)));\n        TestCase.assertEquals(listNodes.get(2), consensusService.computeLeader(listNodes, new Round(2, 0)));\n        TestCase.assertEquals(listNodes.get(3), consensusService.computeLeader(listNodes, new Round(3, 0)));\n        TestCase.assertEquals(listNodes.get(4), consensusService.computeLeader(listNodes, new Round(4, 0)));\n        TestCase.assertEquals(listNodes.get(5), consensusService.computeLeader(listNodes, new Round(5, 0)));\n        TestCase.assertEquals(listNodes.get(6), consensusService.computeLeader(listNodes, new Round(6, 0)));\n        TestCase.assertEquals(listNodes.get(0), consensusService.computeLeader(listNodes, new Round(7, 0)));\n        TestCase.assertEquals(listNodes.get(1), consensusService.computeLeader(listNodes, new Round(8, 0)));\n        TestCase.assertEquals(listNodes.get(2), consensusService.computeLeader(listNodes, new Round(9, 0)));\n        TestCase.assertEquals(listNodes.get(3), consensusService.computeLeader(listNodes, new Round(10, 0)));\n        TestCase.assertEquals(listNodes.get(4), consensusService.computeLeader(listNodes, new Round(11, 0)));\n\n\n\n    }", "signature": "void testComputeLeader()", "full_signature": "@Test public void testComputeLeader()", "class_method_signature": "ConsensusServiceImplTest.testComputeLeader()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "add", "sort", "get", "size", "assertTrue", "compareTo", "get", "get", "println", "format", "assertEquals", "get", "computeLeader", "assertEquals", "get", "computeLeader", "assertEquals", "get", "computeLeader", "assertEquals", "get", "computeLeader", "assertEquals", "get", "computeLeader", "assertEquals", "get", "computeLeader", "assertEquals", "get", "computeLeader", "assertEquals", "get", "computeLeader", "assertEquals", "get", "computeLeader", "assertEquals", "get", "computeLeader", "assertEquals", "get", "computeLeader", "assertEquals", "get", "computeLeader"]}, "focal_class": {"identifier": "ConsensusServiceImpl", "superclass": "", "interfaces": "implements ConsensusService", "fields": [], "methods": [{"identifier": "computeLeader", "parameters": "(List<String> nodes, Round round)", "modifiers": "@Override public", "return": "String", "signature": "String computeLeader(List<String> nodes, Round round)", "full_signature": "@Override public String computeLeader(List<String> nodes, Round round)", "class_method_signature": "ConsensusServiceImpl.computeLeader(List<String> nodes, Round round)", "testcase": false, "constructor": false}], "file": "elrond-core/src/main/java/network/elrond/consensus/ConsensusServiceImpl.java"}, "focal_method": {"identifier": "computeLeader", "parameters": "(List<String> nodes, Round round)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String computeLeader(List<String> nodes, Round round) {\n        Util.check(round != null, \"round != null\");\n        Util.check(!CollectionUtil.isEmpty(nodes), \"nodes empty\");\n\n        int index = (int) (round.getIndex() % (long) nodes.size());\n        return nodes.get(index);\n\n    }", "signature": "String computeLeader(List<String> nodes, Round round)", "full_signature": "@Override public String computeLeader(List<String> nodes, Round round)", "class_method_signature": "ConsensusServiceImpl.computeLeader(List<String> nodes, Round round)", "testcase": false, "constructor": false, "invocations": ["check", "check", "isEmpty", "getIndex", "size", "get"]}, "repository": {"repo_id": 132454935, "url": "https://github.com/ElrondNetwork/elrond-node-prototype", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 16635, "license": "licensed"}}