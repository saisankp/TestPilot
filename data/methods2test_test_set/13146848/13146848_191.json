{"test_class": {"identifier": "XmlConfigurationStreamProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-core/src/test/java/org/sejda/core/context/XmlConfigurationStreamProviderTest.java"}, "test_case": {"identifier": "testNotExistingCustomConfiguration", "parameters": "()", "modifiers": "@Test(expected = ConfigurationException.class) public", "return": "void", "body": "@Test(expected = ConfigurationException.class)\n    public void testNotExistingCustomConfiguration() throws ConfigurationException {\n        System.setProperty(\"sejda.config.file\", \"not-existing-sejda.xml\");\n        ConfigurationStreamProvider provider = new XmlConfigurationStreamProvider();\n        assertNotNull(provider.getConfigurationStream());\n    }", "signature": "void testNotExistingCustomConfiguration()", "full_signature": "@Test(expected = ConfigurationException.class) public void testNotExistingCustomConfiguration()", "class_method_signature": "XmlConfigurationStreamProviderTest.testNotExistingCustomConfiguration()", "testcase": true, "constructor": false, "invocations": ["setProperty", "assertNotNull", "getConfigurationStream"]}, "focal_class": {"identifier": "XmlConfigurationStreamProvider", "superclass": "", "interfaces": "implements ConfigurationStreamProvider", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(XmlConfigurationStreamProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(XmlConfigurationStreamProvider.class)", "var_name": "LOG"}, {"original_string": "private static final List<String> CONFIG_FILES = Arrays.asList(\"sejda.xml\", \"sejda.pro.xml\", \"sejda.default.xml\");", "modifier": "private static final", "type": "List<String>", "declarator": "CONFIG_FILES = Arrays.asList(\"sejda.xml\", \"sejda.pro.xml\", \"sejda.default.xml\")", "var_name": "CONFIG_FILES"}], "methods": [{"identifier": "getConfigurationStream", "parameters": "()", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getConfigurationStream()", "full_signature": "@Override public InputStream getConfigurationStream()", "class_method_signature": "XmlConfigurationStreamProvider.getConfigurationStream()", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "private", "return": "InputStream", "signature": "InputStream getConfiguration()", "full_signature": "private InputStream getConfiguration()", "class_method_signature": "XmlConfigurationStreamProvider.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getCustomConfigurationStream", "parameters": "(String userConfigFileName)", "modifiers": "private", "return": "InputStream", "signature": "InputStream getCustomConfigurationStream(String userConfigFileName)", "full_signature": "private InputStream getCustomConfigurationStream(String userConfigFileName)", "class_method_signature": "XmlConfigurationStreamProvider.getCustomConfigurationStream(String userConfigFileName)", "testcase": false, "constructor": false}, {"identifier": "getDefaultConfigurationStream", "parameters": "()", "modifiers": "private", "return": "InputStream", "signature": "InputStream getDefaultConfigurationStream()", "full_signature": "private InputStream getDefaultConfigurationStream()", "class_method_signature": "XmlConfigurationStreamProvider.getDefaultConfigurationStream()", "testcase": false, "constructor": false}], "file": "sejda-core/src/main/java/org/sejda/core/context/XmlConfigurationStreamProvider.java"}, "focal_method": {"identifier": "getConfigurationStream", "parameters": "()", "modifiers": "@Override public", "return": "InputStream", "body": "@Override\n    public InputStream getConfigurationStream() throws ConfigurationException {\n        return ofNullable(getConfiguration())\n                .orElseThrow(() -> new ConfigurationException(\"Unable to find xml configuration file\"));\n    }", "signature": "InputStream getConfigurationStream()", "full_signature": "@Override public InputStream getConfigurationStream()", "class_method_signature": "XmlConfigurationStreamProvider.getConfigurationStream()", "testcase": false, "constructor": false, "invocations": ["orElseThrow", "ofNullable", "getConfiguration"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}