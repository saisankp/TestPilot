{"test_class": {"identifier": "CleanupStrategyProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String DRIVER_CLASS = \"org.h2.Driver\";", "modifier": "public static final", "type": "String", "declarator": "DRIVER_CLASS = \"org.h2.Driver\"", "var_name": "DRIVER_CLASS"}, {"original_string": "public static final String CONNECTION_URL = \"jdbc:h2:mem:test;DB_CLOSE_DELAY=-1\";", "modifier": "public static final", "type": "String", "declarator": "CONNECTION_URL = \"jdbc:h2:mem:test;DB_CLOSE_DELAY=-1\"", "var_name": "CONNECTION_URL"}, {"original_string": "public static final String USER_NAME = \"test\";", "modifier": "public static final", "type": "String", "declarator": "USER_NAME = \"test\"", "var_name": "USER_NAME"}, {"original_string": "public static final String PASSWORD = \"test\";", "modifier": "public static final", "type": "String", "declarator": "PASSWORD = \"test\"", "var_name": "PASSWORD"}, {"original_string": "public static final String DB_SETUP_SCRIPT = \"src/test/resources/schema.sql\";", "modifier": "public static final", "type": "String", "declarator": "DB_SETUP_SCRIPT = \"src/test/resources/schema.sql\"", "var_name": "DB_SETUP_SCRIPT"}, {"original_string": "private DatabaseConnection connection;", "modifier": "private", "type": "DatabaseConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private IDataSet initialDataSet;", "modifier": "private", "type": "IDataSet", "declarator": "initialDataSet", "var_name": "initialDataSet"}], "file": "rdbms/src/test/java/eu/drus/jpa/unit/sql/dbunit/CleanupStrategyProviderTest.java"}, "test_case": {"identifier": "testStrictCleanupWithoutInitialDataSetsExcludingOneTable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStrictCleanupWithoutInitialDataSetsExcludingOneTable() throws Exception {\n        // GIVEN\n        final CleanupStrategyProvider provider = new CleanupStrategyProvider();\n        final CleanupStrategyExecutor<IDatabaseConnection, IDataSet> strategyExecutor = provider.strictStrategy();\n        assertThat(strategyExecutor, notNullValue());\n\n        // WHEN\n        strategyExecutor.execute(connection, Collections.emptyList(), \"XML_TABLE_2\");\n\n        // THEN\n        assertThat(getRecordCountFromTable(connection, \"XML_TABLE_1\"), equalTo(0));\n        assertThat(getRecordCountFromTable(connection, \"XML_TABLE_2\"), equalTo(1));\n        assertThat(getRecordCountFromTable(connection, \"XML_TABLE_3\"), equalTo(0));\n    }", "signature": "void testStrictCleanupWithoutInitialDataSetsExcludingOneTable()", "full_signature": "@Test public void testStrictCleanupWithoutInitialDataSetsExcludingOneTable()", "class_method_signature": "CleanupStrategyProviderTest.testStrictCleanupWithoutInitialDataSetsExcludingOneTable()", "testcase": true, "constructor": false, "invocations": ["strictStrategy", "assertThat", "notNullValue", "execute", "emptyList", "assertThat", "getRecordCountFromTable", "equalTo", "assertThat", "getRecordCountFromTable", "equalTo", "assertThat", "getRecordCountFromTable", "equalTo"]}, "focal_class": {"identifier": "CleanupStrategyProvider", "superclass": "", "interfaces": "implements StrategyProvider<CleanupStrategyExecutor<IDatabaseConnection, IDataSet>>", "fields": [{"original_string": "private static final String UNABLE_TO_CLEAN_DATABASE = \"Unable to clean database.\";", "modifier": "private static final", "type": "String", "declarator": "UNABLE_TO_CLEAN_DATABASE = \"Unable to clean database.\"", "var_name": "UNABLE_TO_CLEAN_DATABASE"}], "methods": [{"identifier": "strictStrategy", "parameters": "()", "modifiers": "@Override public", "return": "CleanupStrategyExecutor<IDatabaseConnection, IDataSet>", "signature": "CleanupStrategyExecutor<IDatabaseConnection, IDataSet> strictStrategy()", "full_signature": "@Override public CleanupStrategyExecutor<IDatabaseConnection, IDataSet> strictStrategy()", "class_method_signature": "CleanupStrategyProvider.strictStrategy()", "testcase": false, "constructor": false}, {"identifier": "usedTablesOnlyStrategy", "parameters": "()", "modifiers": "@Override public", "return": "CleanupStrategyExecutor<IDatabaseConnection, IDataSet>", "signature": "CleanupStrategyExecutor<IDatabaseConnection, IDataSet> usedTablesOnlyStrategy()", "full_signature": "@Override public CleanupStrategyExecutor<IDatabaseConnection, IDataSet> usedTablesOnlyStrategy()", "class_method_signature": "CleanupStrategyProvider.usedTablesOnlyStrategy()", "testcase": false, "constructor": false}, {"identifier": "usedRowsOnlyStrategy", "parameters": "()", "modifiers": "@Override public", "return": "CleanupStrategyExecutor<IDatabaseConnection, IDataSet>", "signature": "CleanupStrategyExecutor<IDatabaseConnection, IDataSet> usedRowsOnlyStrategy()", "full_signature": "@Override public CleanupStrategyExecutor<IDatabaseConnection, IDataSet> usedRowsOnlyStrategy()", "class_method_signature": "CleanupStrategyProvider.usedRowsOnlyStrategy()", "testcase": false, "constructor": false}, {"identifier": "mergeDataSets", "parameters": "(final List<IDataSet> dataSets)", "modifiers": "private", "return": "IDataSet", "signature": "IDataSet mergeDataSets(final List<IDataSet> dataSets)", "full_signature": "private IDataSet mergeDataSets(final List<IDataSet> dataSets)", "class_method_signature": "CleanupStrategyProvider.mergeDataSets(final List<IDataSet> dataSets)", "testcase": false, "constructor": false}, {"identifier": "excludeTables", "parameters": "(final IDataSet dataSet, final String... tablesToExclude)", "modifiers": "private", "return": "IDataSet", "signature": "IDataSet excludeTables(final IDataSet dataSet, final String... tablesToExclude)", "full_signature": "private IDataSet excludeTables(final IDataSet dataSet, final String... tablesToExclude)", "class_method_signature": "CleanupStrategyProvider.excludeTables(final IDataSet dataSet, final String... tablesToExclude)", "testcase": false, "constructor": false}], "file": "rdbms/src/main/java/eu/drus/jpa/unit/sql/dbunit/CleanupStrategyProvider.java"}, "focal_method": {"identifier": "strictStrategy", "parameters": "()", "modifiers": "@Override public", "return": "CleanupStrategyExecutor<IDatabaseConnection, IDataSet>", "body": "@Override\n    public CleanupStrategyExecutor<IDatabaseConnection, IDataSet> strictStrategy() {\n        return (final IDatabaseConnection connection, final List<IDataSet> initialDataSets, final String... tablesToExclude) -> {\n            try {\n                IDataSet dataSet = excludeTables(connection.createDataSet(), tablesToExclude);\n                dataSet = new FilteredDataSet(new DatabaseSequenceFilter(connection), dataSet);\n                DatabaseOperation.DELETE_ALL.execute(connection, dataSet);\n            } catch (final SQLException | DatabaseUnitException e) {\n                throw new DbFeatureException(UNABLE_TO_CLEAN_DATABASE, e);\n            }\n        };\n    }", "signature": "CleanupStrategyExecutor<IDatabaseConnection, IDataSet> strictStrategy()", "full_signature": "@Override public CleanupStrategyExecutor<IDatabaseConnection, IDataSet> strictStrategy()", "class_method_signature": "CleanupStrategyProvider.strictStrategy()", "testcase": false, "constructor": false, "invocations": ["excludeTables", "createDataSet", "execute"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}