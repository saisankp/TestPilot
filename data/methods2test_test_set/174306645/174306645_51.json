{"test_class": {"identifier": "SpringBootModelEventEmitterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());", "modifier": "private static final", "type": "ObjectMapper", "declarator": "OBJECT_MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule())", "var_name": "OBJECT_MAPPER"}, {"original_string": "private static final String TEST_TOPIC = \"test-topic\";", "modifier": "private static final", "type": "String", "declarator": "TEST_TOPIC = \"test-topic\"", "var_name": "TEST_TOPIC"}], "file": "addons/tracing/tracing-decision-springboot-addon/src/test/java/org/kie/kogito/tracing/decision/SpringBootModelEventEmitterTest.java"}, "test_case": {"identifier": "testEmitEvent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmitEvent() throws JsonProcessingException {\n        @SuppressWarnings(\"unchecked\")\n        final KafkaTemplate<String, String> mockedKarkaTemplate = mock(KafkaTemplate.class);\n        final List<DecisionModelResource> models = Arrays.asList(makeModel(), makeModel());\n        final DecisionModelResourcesProvider mockedDecisionModelResourcesProvider = () -> models;\n\n        final SpringBootModelEventEmitter eventEmitter = new SpringBootModelEventEmitter(mockedDecisionModelResourcesProvider, mockedKarkaTemplate, TEST_TOPIC);\n        eventEmitter.publishDecisionModels();\n\n        final ArgumentCaptor<String> topicCaptor = ArgumentCaptor.forClass(String.class);\n        final ArgumentCaptor<String> payloadCaptor = ArgumentCaptor.forClass(String.class);\n        verify(mockedKarkaTemplate, times(2)).send(topicCaptor.capture(), payloadCaptor.capture());\n\n        topicCaptor.getAllValues().forEach(v -> assertEquals(TEST_TOPIC, v));\n\n        final String rawCloudEvent1 = payloadCaptor.getAllValues().get(0);\n        final String rawCloudEvent2 = payloadCaptor.getAllValues().get(1);\n        final CloudEvent cloudEvent1 = OBJECT_MAPPER.readValue(rawCloudEvent1, CloudEvent.class);\n        final CloudEvent cloudEvent2 = OBJECT_MAPPER.readValue(rawCloudEvent2, CloudEvent.class);\n\n        assertEquals(\"id\", cloudEvent1.getId());\n        assertEquals(\"id\", cloudEvent2.getId());\n    }", "signature": "void testEmitEvent()", "full_signature": "@Test public void testEmitEvent()", "class_method_signature": "SpringBootModelEventEmitterTest.testEmitEvent()", "testcase": true, "constructor": false, "invocations": ["mock", "asList", "makeModel", "makeModel", "publishDecisionModels", "forClass", "forClass", "send", "verify", "times", "capture", "capture", "forEach", "getAllValues", "assertEquals", "get", "getAllValues", "get", "getAllValues", "readValue", "readValue", "assertEquals", "getId", "assertEquals", "getId"]}, "focal_class": {"identifier": "SpringBootModelEventEmitter", "superclass": "extends BaseModelEventEmitter", "interfaces": "", "fields": [{"original_string": "private final KafkaTemplate<String, String> template;", "modifier": "private final", "type": "KafkaTemplate<String, String>", "declarator": "template", "var_name": "template"}, {"original_string": "private final String kafkaTopicName;", "modifier": "private final", "type": "String", "declarator": "kafkaTopicName", "var_name": "kafkaTopicName"}], "methods": [{"identifier": "SpringBootModelEventEmitter", "parameters": "(final DecisionModelResourcesProvider decisionModelResourcesProvider,\n                                       final KafkaTemplate<String, String> template,\n                                       final @Value(value = \"${kogito.addon.tracing.decision.kafka.topic.name:kogito-tracing-model}\") String kafkaTopicName)", "modifiers": "@Autowired public", "return": "", "signature": " SpringBootModelEventEmitter(final DecisionModelResourcesProvider decisionModelResourcesProvider,\n                                       final KafkaTemplate<String, String> template,\n                                       final @Value(value = \"${kogito.addon.tracing.decision.kafka.topic.name:kogito-tracing-model}\") String kafkaTopicName)", "full_signature": "@Autowired public  SpringBootModelEventEmitter(final DecisionModelResourcesProvider decisionModelResourcesProvider,\n                                       final KafkaTemplate<String, String> template,\n                                       final @Value(value = \"${kogito.addon.tracing.decision.kafka.topic.name:kogito-tracing-model}\") String kafkaTopicName)", "class_method_signature": "SpringBootModelEventEmitter.SpringBootModelEventEmitter(final DecisionModelResourcesProvider decisionModelResourcesProvider,\n                                       final KafkaTemplate<String, String> template,\n                                       final @Value(value = \"${kogito.addon.tracing.decision.kafka.topic.name:kogito-tracing-model}\") String kafkaTopicName)", "testcase": false, "constructor": true}, {"identifier": "publishDecisionModels", "parameters": "()", "modifiers": "@Override @PostConstruct public", "return": "void", "signature": "void publishDecisionModels()", "full_signature": "@Override @PostConstruct public void publishDecisionModels()", "class_method_signature": "SpringBootModelEventEmitter.publishDecisionModels()", "testcase": false, "constructor": false}, {"identifier": "emit", "parameters": "(final String payload)", "modifiers": "@Override public", "return": "void", "signature": "void emit(final String payload)", "full_signature": "@Override public void emit(final String payload)", "class_method_signature": "SpringBootModelEventEmitter.emit(final String payload)", "testcase": false, "constructor": false}], "file": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootModelEventEmitter.java"}, "focal_method": {"identifier": "publishDecisionModels", "parameters": "()", "modifiers": "@Override @PostConstruct public", "return": "void", "body": "@Override\n    @PostConstruct\n    public void publishDecisionModels() {\n        super.publishDecisionModels();\n    }", "signature": "void publishDecisionModels()", "full_signature": "@Override @PostConstruct public void publishDecisionModels()", "class_method_signature": "SpringBootModelEventEmitter.publishDecisionModels()", "testcase": false, "constructor": false, "invocations": ["publishDecisionModels"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}