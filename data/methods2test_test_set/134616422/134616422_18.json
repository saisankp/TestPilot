{"test_class": {"identifier": "PackageValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "conjure-core/src/test/java/com/palantir/conjure/defs/validator/PackageValidatorTest.java"}, "test_case": {"identifier": "testInvalidPackageNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvalidPackageNames() {\n        for (String illegal : new String[] {\".\", \"foo-bar\", \"foo_bar\", \"1a\", \"a.foo\"}) {\n            assertThatThrownBy(() -> PackageValidator.validate(illegal))\n                    .isInstanceOf(IllegalArgumentException.class)\n                    .hasMessage(\"Conjure package names must match pattern ^([a-z][a-z0-9]+(\\\\.[a-z][a-z0-9]*)*)?$: \"\n                            + illegal);\n        }\n    }", "signature": "void testInvalidPackageNames()", "full_signature": "@Test public void testInvalidPackageNames()", "class_method_signature": "PackageValidatorTest.testInvalidPackageNames()", "testcase": true, "constructor": false, "invocations": ["hasMessage", "isInstanceOf", "assertThatThrownBy", "validate"]}, "focal_class": {"identifier": "PackageValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PRIMITIVE = \"\";", "modifier": "public static final", "type": "String", "declarator": "PRIMITIVE = \"\"", "var_name": "PRIMITIVE"}, {"original_string": "private static final Pattern VALID_PACKAGE = Pattern.compile(\"^([a-z][a-z0-9]+(\\\\.[a-z][a-z0-9]*)*)?$\");", "modifier": "private static final", "type": "Pattern", "declarator": "VALID_PACKAGE = Pattern.compile(\"^([a-z][a-z0-9]+(\\\\.[a-z][a-z0-9]*)*)?$\")", "var_name": "VALID_PACKAGE"}], "methods": [{"identifier": "PackageValidator", "parameters": "()", "modifiers": "private", "return": "", "signature": " PackageValidator()", "full_signature": "private  PackageValidator()", "class_method_signature": "PackageValidator.PackageValidator()", "testcase": false, "constructor": true}, {"identifier": "components", "parameters": "(String name)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> components(String name)", "full_signature": "public static List<String> components(String name)", "class_method_signature": "PackageValidator.components(String name)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(String name)", "modifiers": "public static", "return": "void", "signature": "void validate(String name)", "full_signature": "public static void validate(String name)", "class_method_signature": "PackageValidator.validate(String name)", "testcase": false, "constructor": false}, {"identifier": "conjurePackage", "parameters": "(Iterable<String> components)", "modifiers": "public static", "return": "String", "signature": "String conjurePackage(Iterable<String> components)", "full_signature": "public static String conjurePackage(Iterable<String> components)", "class_method_signature": "PackageValidator.conjurePackage(Iterable<String> components)", "testcase": false, "constructor": false}], "file": "conjure-core/src/main/java/com/palantir/conjure/defs/validator/PackageValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(String name)", "modifiers": "public static", "return": "void", "body": "public static void validate(String name) {\n        // TODO(rfink): NPE when the pattern is static !?!?\n\n        Preconditions.checkArgument(\n                VALID_PACKAGE.matcher(name).matches(),\n                \"Conjure package names must match pattern %s: %s\",\n                VALID_PACKAGE.pattern(),\n                name);\n    }", "signature": "void validate(String name)", "full_signature": "public static void validate(String name)", "class_method_signature": "PackageValidator.validate(String name)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "matches", "matcher", "pattern"]}, "repository": {"repo_id": 134616422, "url": "https://github.com/palantir/conjure", "stars": 211, "created": "5/23/2018 7:28:43 PM +00:00", "updates": "2020-01-24T17:51:52+00:00", "fork": "False", "license": "licensed"}}