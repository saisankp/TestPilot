{"test_class": {"identifier": "IndividualUtilsTest", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/util/IndividualUtilsTest.java"}, "test_case": {"identifier": "testMakeCopy4", "parameters": "()", "modifiers": "@Test // tests deep copy of non-null objects in input public", "return": "void", "body": "@Test\n    // tests deep copy of non-null objects in input\n    public void testMakeCopy4() throws Exception {\n        int size = 5;\n        Individual[] source = new Individual[size];\n        for (int i = 0; i < size; i++){\n            if (i == 2 || i == 4){\n                source[i] = null;\n            } else {\n                source[i] = new SimpleIndividual(i, i, new SimplePhenotypeRepresentation(new double[]{1.0, 2.0, 3.0}));\n            }\n        }\n        int birthday = 1;\n        Individual[] copies = IndividualUtils.makeCopy(source, birthday);\n        for (int i = 0; i < size; i++){\n            if (i == 2 || i == 4){\n                assertTrue(copies[i] == null);\n            } else {\n                assertNotSame(copies[i], source[i]);\n                assertEquals(birthday, copies[i].getBirthday());\n                assertNotSame(copies[i].getRepresentation(), source[i].getRepresentation());\n            }\n        }\n\n        assertNotSame(copies, source);\n    }", "signature": "void testMakeCopy4()", "full_signature": "@Test // tests deep copy of non-null objects in input public void testMakeCopy4()", "class_method_signature": "IndividualUtilsTest.testMakeCopy4()", "testcase": true, "constructor": false, "invocations": ["makeCopy", "assertTrue", "assertNotSame", "assertEquals", "getBirthday", "assertNotSame", "getRepresentation", "getRepresentation", "assertNotSame"]}, "focal_class": {"identifier": "IndividualUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "makeCopy", "parameters": "(Individual[] sourceIndividuals, int birthday)", "modifiers": "public static", "return": "Individual[]", "signature": "Individual[] makeCopy(Individual[] sourceIndividuals, int birthday)", "full_signature": "public static Individual[] makeCopy(Individual[] sourceIndividuals, int birthday)", "class_method_signature": "IndividualUtils.makeCopy(Individual[] sourceIndividuals, int birthday)", "testcase": false, "constructor": false}, {"identifier": "getBestIndividual", "parameters": "(Population[] populations)", "modifiers": "public static", "return": "Individual", "signature": "Individual getBestIndividual(Population[] populations)", "full_signature": "public static Individual getBestIndividual(Population[] populations)", "class_method_signature": "IndividualUtils.getBestIndividual(Population[] populations)", "testcase": false, "constructor": false}, {"identifier": "getAllIndividuals", "parameters": "(Population[] populations)", "modifiers": "public static", "return": "Individual[]", "signature": "Individual[] getAllIndividuals(Population[] populations)", "full_signature": "public static Individual[] getAllIndividuals(Population[] populations)", "class_method_signature": "IndividualUtils.getAllIndividuals(Population[] populations)", "testcase": false, "constructor": false}, {"identifier": "getIndividuals", "parameters": "(Population[] populations, int maxIndexExclusive)", "modifiers": "public static", "return": "Individual[]", "signature": "Individual[] getIndividuals(Population[] populations, int maxIndexExclusive)", "full_signature": "public static Individual[] getIndividuals(Population[] populations, int maxIndexExclusive)", "class_method_signature": "IndividualUtils.getIndividuals(Population[] populations, int maxIndexExclusive)", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/util/IndividualUtils.java"}, "focal_method": {"identifier": "makeCopy", "parameters": "(Individual[] sourceIndividuals, int birthday)", "modifiers": "public static", "return": "Individual[]", "body": "public static Individual[] makeCopy(Individual[] sourceIndividuals, int birthday){\n        if (sourceIndividuals == null){\n            return null;\n        }\n        Individual[] copies = new Individual[sourceIndividuals.length];\n        for (int i = 0; i < sourceIndividuals.length; i++){\n            if (sourceIndividuals[i] != null){ // in the future, there might be null individuals in the Population\n                copies[i] = sourceIndividuals[i].copy(birthday);\n            }\n        }\n        return copies;\n    }", "signature": "Individual[] makeCopy(Individual[] sourceIndividuals, int birthday)", "full_signature": "public static Individual[] makeCopy(Individual[] sourceIndividuals, int birthday)", "class_method_signature": "IndividualUtils.makeCopy(Individual[] sourceIndividuals, int birthday)", "testcase": false, "constructor": false, "invocations": ["copy"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}