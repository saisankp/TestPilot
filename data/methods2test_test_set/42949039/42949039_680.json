{"test_class": {"identifier": "UserNamespaceAuthorizationServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String USER_ID_VALUE = \"testUserId\";", "modifier": "private static final", "type": "String", "declarator": "USER_ID_VALUE = \"testUserId\"", "var_name": "USER_ID_VALUE"}, {"original_string": "private static final String NAMESPACE_VALUE = \"testNamespace\";", "modifier": "private static final", "type": "String", "declarator": "NAMESPACE_VALUE = \"testNamespace\"", "var_name": "NAMESPACE_VALUE"}, {"original_string": "private static final long USER_NAMESPACE_AUTHORIZATION_ID = 10L;", "modifier": "private static final", "type": "long", "declarator": "USER_NAMESPACE_AUTHORIZATION_ID = 10L", "var_name": "USER_NAMESPACE_AUTHORIZATION_ID"}, {"original_string": "private static final List<NamespacePermissionEnum> NAMESPACE_PERMISSIONS = ImmutableList.of(NamespacePermissionEnum.READ);", "modifier": "private static final", "type": "List<NamespacePermissionEnum>", "declarator": "NAMESPACE_PERMISSIONS = ImmutableList.of(NamespacePermissionEnum.READ)", "var_name": "NAMESPACE_PERMISSIONS"}, {"original_string": "private static final UserNamespaceAuthorizationKey USER_NAMESPACE_AUTHORIZATION_KEY = new UserNamespaceAuthorizationKey(USER_ID_VALUE, NAMESPACE_VALUE);", "modifier": "private static final", "type": "UserNamespaceAuthorizationKey", "declarator": "USER_NAMESPACE_AUTHORIZATION_KEY = new UserNamespaceAuthorizationKey(USER_ID_VALUE, NAMESPACE_VALUE)", "var_name": "USER_NAMESPACE_AUTHORIZATION_KEY"}, {"original_string": "private static final UserNamespaceAuthorizationCreateRequest USER_NAMESPACE_AUTHORIZATION_CREATE_REQUEST =\n        new UserNamespaceAuthorizationCreateRequest(USER_NAMESPACE_AUTHORIZATION_KEY, NAMESPACE_PERMISSIONS);", "modifier": "private static final", "type": "UserNamespaceAuthorizationCreateRequest", "declarator": "USER_NAMESPACE_AUTHORIZATION_CREATE_REQUEST =\n        new UserNamespaceAuthorizationCreateRequest(USER_NAMESPACE_AUTHORIZATION_KEY, NAMESPACE_PERMISSIONS)", "var_name": "USER_NAMESPACE_AUTHORIZATION_CREATE_REQUEST"}, {"original_string": "private static final UserNamespaceAuthorizationUpdateRequest USER_NAMESPACE_AUTHORIZATION_UPDATE_REQUEST =\n        new UserNamespaceAuthorizationUpdateRequest(NAMESPACE_PERMISSIONS);", "modifier": "private static final", "type": "UserNamespaceAuthorizationUpdateRequest", "declarator": "USER_NAMESPACE_AUTHORIZATION_UPDATE_REQUEST =\n        new UserNamespaceAuthorizationUpdateRequest(NAMESPACE_PERMISSIONS)", "var_name": "USER_NAMESPACE_AUTHORIZATION_UPDATE_REQUEST"}, {"original_string": "private static final NamespaceEntity NAMESPACE_ENTITY = new NamespaceEntity()\n    {{\n        setCode(NAMESPACE_VALUE);\n    }};", "modifier": "private static final", "type": "NamespaceEntity", "declarator": "NAMESPACE_ENTITY = new NamespaceEntity()\n    {{\n        setCode(NAMESPACE_VALUE);\n    }}", "var_name": "NAMESPACE_ENTITY"}, {"original_string": "private static final UserNamespaceAuthorizationEntity USER_NAMESPACE_AUTHORIZATION_ENTITY = new UserNamespaceAuthorizationEntity()\n    {{\n        setId(USER_NAMESPACE_AUTHORIZATION_ID);\n        setUserId(USER_ID_VALUE);\n        setNamespace(NAMESPACE_ENTITY);\n        setReadPermission(true);\n    }};", "modifier": "private static final", "type": "UserNamespaceAuthorizationEntity", "declarator": "USER_NAMESPACE_AUTHORIZATION_ENTITY = new UserNamespaceAuthorizationEntity()\n    {{\n        setId(USER_NAMESPACE_AUTHORIZATION_ID);\n        setUserId(USER_ID_VALUE);\n        setNamespace(NAMESPACE_ENTITY);\n        setReadPermission(true);\n    }}", "var_name": "USER_NAMESPACE_AUTHORIZATION_ENTITY"}, {"original_string": "private static final UserAuthorizations USER_AUTHORIZATIONS = new UserAuthorizations()\n    {{\n        setUserId(\"currentUser\");\n    }};", "modifier": "private static final", "type": "UserAuthorizations", "declarator": "USER_AUTHORIZATIONS = new UserAuthorizations()\n    {{\n        setUserId(\"currentUser\");\n    }}", "var_name": "USER_AUTHORIZATIONS"}, {"original_string": "@InjectMocks\n    private UserNamespaceAuthorizationService userNamespaceAuthorizationService = new UserNamespaceAuthorizationServiceImpl();", "modifier": "@InjectMocks\n    private", "type": "UserNamespaceAuthorizationService", "declarator": "userNamespaceAuthorizationService = new UserNamespaceAuthorizationServiceImpl()", "var_name": "userNamespaceAuthorizationService"}, {"original_string": "@Mock\n    private AlternateKeyHelper alternateKeyHelper;", "modifier": "@Mock\n    private", "type": "AlternateKeyHelper", "declarator": "alternateKeyHelper", "var_name": "alternateKeyHelper"}, {"original_string": "@Mock\n    private CurrentUserService currentUserService;", "modifier": "@Mock\n    private", "type": "CurrentUserService", "declarator": "currentUserService", "var_name": "currentUserService"}, {"original_string": "@Mock\n    private NamespaceDaoHelper namespaceDaoHelper;", "modifier": "@Mock\n    private", "type": "NamespaceDaoHelper", "declarator": "namespaceDaoHelper", "var_name": "namespaceDaoHelper"}, {"original_string": "@Mock\n    private UserNamespaceAuthorizationDao userNamespaceAuthorizationDao;", "modifier": "@Mock\n    private", "type": "UserNamespaceAuthorizationDao", "declarator": "userNamespaceAuthorizationDao", "var_name": "userNamespaceAuthorizationDao"}, {"original_string": "@Mock\n    private UserNamespaceAuthorizationHelper userNamespaceAuthorizationHelper;", "modifier": "@Mock\n    private", "type": "UserNamespaceAuthorizationHelper", "declarator": "userNamespaceAuthorizationHelper", "var_name": "userNamespaceAuthorizationHelper"}, {"original_string": "@Mock\n    private MessageNotificationEventService messageNotificationEventService;", "modifier": "@Mock\n    private", "type": "MessageNotificationEventService", "declarator": "messageNotificationEventService", "var_name": "messageNotificationEventService"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/impl/UserNamespaceAuthorizationServiceImplTest.java"}, "test_case": {"identifier": "testCreateUserNamespaceAuthorizationHappyPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateUserNamespaceAuthorizationHappyPath()\n    {\n        when(alternateKeyHelper.validateStringParameter(\"namespace\", NAMESPACE_VALUE)).thenReturn(NAMESPACE_VALUE);\n        when(alternateKeyHelper.validateStringParameter(\"user id\", USER_ID_VALUE)).thenReturn(USER_ID_VALUE);\n        when(userNamespaceAuthorizationDao.getUserNamespaceAuthorizationByKey(USER_NAMESPACE_AUTHORIZATION_KEY)).thenReturn(null);\n        when(namespaceDaoHelper.getNamespaceEntity(NAMESPACE_VALUE)).thenReturn(NAMESPACE_ENTITY);\n        when(userNamespaceAuthorizationDao.saveAndRefresh(any())).thenReturn(USER_NAMESPACE_AUTHORIZATION_ENTITY);\n        when(userNamespaceAuthorizationHelper.getNamespacePermissions(USER_NAMESPACE_AUTHORIZATION_ENTITY)).thenReturn(NAMESPACE_PERMISSIONS);\n\n        UserNamespaceAuthorization userNamespaceAuthorization =\n            userNamespaceAuthorizationService.createUserNamespaceAuthorization(USER_NAMESPACE_AUTHORIZATION_CREATE_REQUEST);\n\n        assertEquals(USER_NAMESPACE_AUTHORIZATION_ID, userNamespaceAuthorization.getId());\n        assertEquals(USER_NAMESPACE_AUTHORIZATION_KEY, userNamespaceAuthorization.getUserNamespaceAuthorizationKey());\n        assertEquals(NAMESPACE_PERMISSIONS, userNamespaceAuthorization.getNamespacePermissions());\n\n        verify(alternateKeyHelper).validateStringParameter(\"namespace\", NAMESPACE_VALUE);\n        verify(alternateKeyHelper).validateStringParameter(\"user id\", USER_ID_VALUE);\n        verify(namespaceDaoHelper).getNamespaceEntity(NAMESPACE_VALUE);\n        verify(userNamespaceAuthorizationDao).getUserNamespaceAuthorizationByKey(USER_NAMESPACE_AUTHORIZATION_KEY);\n        verify(userNamespaceAuthorizationDao).saveAndRefresh(any(UserNamespaceAuthorizationEntity.class));\n        verify(messageNotificationEventService).processUserNamespaceAuthorizationChangeNotificationEvent(USER_NAMESPACE_AUTHORIZATION_KEY);\n        verify(userNamespaceAuthorizationHelper).getNamespacePermissions(USER_NAMESPACE_AUTHORIZATION_ENTITY);\n\n        verifyNoMoreInteractionsHelper();\n    }", "signature": "void testCreateUserNamespaceAuthorizationHappyPath()", "full_signature": "@Test public void testCreateUserNamespaceAuthorizationHappyPath()", "class_method_signature": "UserNamespaceAuthorizationServiceImplTest.testCreateUserNamespaceAuthorizationHappyPath()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "validateStringParameter", "thenReturn", "when", "validateStringParameter", "thenReturn", "when", "getUserNamespaceAuthorizationByKey", "thenReturn", "when", "getNamespaceEntity", "thenReturn", "when", "saveAndRefresh", "any", "thenReturn", "when", "getNamespacePermissions", "createUserNamespaceAuthorization", "assertEquals", "getId", "assertEquals", "getUserNamespaceAuthorizationKey", "assertEquals", "getNamespacePermissions", "validateStringParameter", "verify", "validateStringParameter", "verify", "getNamespaceEntity", "verify", "getUserNamespaceAuthorizationByKey", "verify", "saveAndRefresh", "verify", "any", "processUserNamespaceAuthorizationChangeNotificationEvent", "verify", "getNamespacePermissions", "verify", "verifyNoMoreInteractionsHelper"]}, "focal_class": {"identifier": "UserNamespaceAuthorizationServiceImpl", "superclass": "", "interfaces": "implements UserNamespaceAuthorizationService", "fields": [{"original_string": "@Autowired\n    private AlternateKeyHelper alternateKeyHelper;", "modifier": "@Autowired\n    private", "type": "AlternateKeyHelper", "declarator": "alternateKeyHelper", "var_name": "alternateKeyHelper"}, {"original_string": "@Autowired\n    private CurrentUserService currentUserService;", "modifier": "@Autowired\n    private", "type": "CurrentUserService", "declarator": "currentUserService", "var_name": "currentUserService"}, {"original_string": "@Autowired\n    private NamespaceDaoHelper namespaceDaoHelper;", "modifier": "@Autowired\n    private", "type": "NamespaceDaoHelper", "declarator": "namespaceDaoHelper", "var_name": "namespaceDaoHelper"}, {"original_string": "@Autowired\n    private UserNamespaceAuthorizationDao userNamespaceAuthorizationDao;", "modifier": "@Autowired\n    private", "type": "UserNamespaceAuthorizationDao", "declarator": "userNamespaceAuthorizationDao", "var_name": "userNamespaceAuthorizationDao"}, {"original_string": "@Autowired\n    private UserNamespaceAuthorizationHelper userNamespaceAuthorizationHelper;", "modifier": "@Autowired\n    private", "type": "UserNamespaceAuthorizationHelper", "declarator": "userNamespaceAuthorizationHelper", "var_name": "userNamespaceAuthorizationHelper"}, {"original_string": "@Autowired\n    private MessageNotificationEventService messageNotificationEventService;", "modifier": "@Autowired\n    private", "type": "MessageNotificationEventService", "declarator": "messageNotificationEventService", "var_name": "messageNotificationEventService"}], "methods": [{"identifier": "createUserNamespaceAuthorization", "parameters": "(UserNamespaceAuthorizationCreateRequest request)", "modifiers": "@PublishNotificationMessages @NamespacePermission(fields = \"#request?.userNamespaceAuthorizationKey?.namespace\", permissions = NamespacePermissionEnum.GRANT) @Override public", "return": "UserNamespaceAuthorization", "signature": "UserNamespaceAuthorization createUserNamespaceAuthorization(UserNamespaceAuthorizationCreateRequest request)", "full_signature": "@PublishNotificationMessages @NamespacePermission(fields = \"#request?.userNamespaceAuthorizationKey?.namespace\", permissions = NamespacePermissionEnum.GRANT) @Override public UserNamespaceAuthorization createUserNamespaceAuthorization(UserNamespaceAuthorizationCreateRequest request)", "class_method_signature": "UserNamespaceAuthorizationServiceImpl.createUserNamespaceAuthorization(UserNamespaceAuthorizationCreateRequest request)", "testcase": false, "constructor": false}, {"identifier": "updateUserNamespaceAuthorization", "parameters": "(UserNamespaceAuthorizationKey key, UserNamespaceAuthorizationUpdateRequest request)", "modifiers": "@PublishNotificationMessages @NamespacePermission(fields = \"#key?.namespace\", permissions = NamespacePermissionEnum.GRANT) @Override public", "return": "UserNamespaceAuthorization", "signature": "UserNamespaceAuthorization updateUserNamespaceAuthorization(UserNamespaceAuthorizationKey key, UserNamespaceAuthorizationUpdateRequest request)", "full_signature": "@PublishNotificationMessages @NamespacePermission(fields = \"#key?.namespace\", permissions = NamespacePermissionEnum.GRANT) @Override public UserNamespaceAuthorization updateUserNamespaceAuthorization(UserNamespaceAuthorizationKey key, UserNamespaceAuthorizationUpdateRequest request)", "class_method_signature": "UserNamespaceAuthorizationServiceImpl.updateUserNamespaceAuthorization(UserNamespaceAuthorizationKey key, UserNamespaceAuthorizationUpdateRequest request)", "testcase": false, "constructor": false}, {"identifier": "getUserNamespaceAuthorization", "parameters": "(UserNamespaceAuthorizationKey key)", "modifiers": "@NamespacePermission(fields = \"#key?.namespace\", permissions = NamespacePermissionEnum.READ) @Override public", "return": "UserNamespaceAuthorization", "signature": "UserNamespaceAuthorization getUserNamespaceAuthorization(UserNamespaceAuthorizationKey key)", "full_signature": "@NamespacePermission(fields = \"#key?.namespace\", permissions = NamespacePermissionEnum.READ) @Override public UserNamespaceAuthorization getUserNamespaceAuthorization(UserNamespaceAuthorizationKey key)", "class_method_signature": "UserNamespaceAuthorizationServiceImpl.getUserNamespaceAuthorization(UserNamespaceAuthorizationKey key)", "testcase": false, "constructor": false}, {"identifier": "deleteUserNamespaceAuthorization", "parameters": "(UserNamespaceAuthorizationKey key)", "modifiers": "@PublishNotificationMessages @NamespacePermission(fields = \"#key?.namespace\", permissions = NamespacePermissionEnum.GRANT) @Override public", "return": "UserNamespaceAuthorization", "signature": "UserNamespaceAuthorization deleteUserNamespaceAuthorization(UserNamespaceAuthorizationKey key)", "full_signature": "@PublishNotificationMessages @NamespacePermission(fields = \"#key?.namespace\", permissions = NamespacePermissionEnum.GRANT) @Override public UserNamespaceAuthorization deleteUserNamespaceAuthorization(UserNamespaceAuthorizationKey key)", "class_method_signature": "UserNamespaceAuthorizationServiceImpl.deleteUserNamespaceAuthorization(UserNamespaceAuthorizationKey key)", "testcase": false, "constructor": false}, {"identifier": "getUserNamespaceAuthorizationsByUserId", "parameters": "(String userId)", "modifiers": "@Override public", "return": "UserNamespaceAuthorizations", "signature": "UserNamespaceAuthorizations getUserNamespaceAuthorizationsByUserId(String userId)", "full_signature": "@Override public UserNamespaceAuthorizations getUserNamespaceAuthorizationsByUserId(String userId)", "class_method_signature": "UserNamespaceAuthorizationServiceImpl.getUserNamespaceAuthorizationsByUserId(String userId)", "testcase": false, "constructor": false}, {"identifier": "getUserNamespaceAuthorizationsByNamespace", "parameters": "(String namespace)", "modifiers": "@NamespacePermission(fields = \"#namespace\", permissions = NamespacePermissionEnum.READ) @Override public", "return": "UserNamespaceAuthorizations", "signature": "UserNamespaceAuthorizations getUserNamespaceAuthorizationsByNamespace(String namespace)", "full_signature": "@NamespacePermission(fields = \"#namespace\", permissions = NamespacePermissionEnum.READ) @Override public UserNamespaceAuthorizations getUserNamespaceAuthorizationsByNamespace(String namespace)", "class_method_signature": "UserNamespaceAuthorizationServiceImpl.getUserNamespaceAuthorizationsByNamespace(String namespace)", "testcase": false, "constructor": false}, {"identifier": "validateUserNamespaceAuthorizationCreateRequest", "parameters": "(UserNamespaceAuthorizationCreateRequest request)", "modifiers": "private", "return": "void", "signature": "void validateUserNamespaceAuthorizationCreateRequest(UserNamespaceAuthorizationCreateRequest request)", "full_signature": "private void validateUserNamespaceAuthorizationCreateRequest(UserNamespaceAuthorizationCreateRequest request)", "class_method_signature": "UserNamespaceAuthorizationServiceImpl.validateUserNamespaceAuthorizationCreateRequest(UserNamespaceAuthorizationCreateRequest request)", "testcase": false, "constructor": false}, {"identifier": "validateUserNamespaceAuthorizationUpdateRequest", "parameters": "(UserNamespaceAuthorizationUpdateRequest request)", "modifiers": "private", "return": "void", "signature": "void validateUserNamespaceAuthorizationUpdateRequest(UserNamespaceAuthorizationUpdateRequest request)", "full_signature": "private void validateUserNamespaceAuthorizationUpdateRequest(UserNamespaceAuthorizationUpdateRequest request)", "class_method_signature": "UserNamespaceAuthorizationServiceImpl.validateUserNamespaceAuthorizationUpdateRequest(UserNamespaceAuthorizationUpdateRequest request)", "testcase": false, "constructor": false}, {"identifier": "validateUserNamespaceAuthorizationKey", "parameters": "(UserNamespaceAuthorizationKey key)", "modifiers": "public", "return": "void", "signature": "void validateUserNamespaceAuthorizationKey(UserNamespaceAuthorizationKey key)", "full_signature": "public void validateUserNamespaceAuthorizationKey(UserNamespaceAuthorizationKey key)", "class_method_signature": "UserNamespaceAuthorizationServiceImpl.validateUserNamespaceAuthorizationKey(UserNamespaceAuthorizationKey key)", "testcase": false, "constructor": false}, {"identifier": "validateNamespacePermissions", "parameters": "(List<NamespacePermissionEnum> namespacePermissions)", "modifiers": "public", "return": "void", "signature": "void validateNamespacePermissions(List<NamespacePermissionEnum> namespacePermissions)", "full_signature": "public void validateNamespacePermissions(List<NamespacePermissionEnum> namespacePermissions)", "class_method_signature": "UserNamespaceAuthorizationServiceImpl.validateNamespacePermissions(List<NamespacePermissionEnum> namespacePermissions)", "testcase": false, "constructor": false}, {"identifier": "createUserNamespaceAuthorizationEntity", "parameters": "(String userId, NamespaceEntity namespaceEntity,\n        List<NamespacePermissionEnum> namespacePermissions)", "modifiers": "private", "return": "UserNamespaceAuthorizationEntity", "signature": "UserNamespaceAuthorizationEntity createUserNamespaceAuthorizationEntity(String userId, NamespaceEntity namespaceEntity,\n        List<NamespacePermissionEnum> namespacePermissions)", "full_signature": "private UserNamespaceAuthorizationEntity createUserNamespaceAuthorizationEntity(String userId, NamespaceEntity namespaceEntity,\n        List<NamespacePermissionEnum> namespacePermissions)", "class_method_signature": "UserNamespaceAuthorizationServiceImpl.createUserNamespaceAuthorizationEntity(String userId, NamespaceEntity namespaceEntity,\n        List<NamespacePermissionEnum> namespacePermissions)", "testcase": false, "constructor": false}, {"identifier": "updateNamespacePermissions", "parameters": "(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity,\n        List<NamespacePermissionEnum> namespacePermissions)", "modifiers": "private", "return": "void", "signature": "void updateNamespacePermissions(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity,\n        List<NamespacePermissionEnum> namespacePermissions)", "full_signature": "private void updateNamespacePermissions(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity,\n        List<NamespacePermissionEnum> namespacePermissions)", "class_method_signature": "UserNamespaceAuthorizationServiceImpl.updateNamespacePermissions(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity,\n        List<NamespacePermissionEnum> namespacePermissions)", "testcase": false, "constructor": false}, {"identifier": "createUserNamespaceAuthorizationsFromEntities", "parameters": "(\n        List<UserNamespaceAuthorizationEntity> userNamespaceAuthorizationEntities)", "modifiers": "private", "return": "List<UserNamespaceAuthorization>", "signature": "List<UserNamespaceAuthorization> createUserNamespaceAuthorizationsFromEntities(\n        List<UserNamespaceAuthorizationEntity> userNamespaceAuthorizationEntities)", "full_signature": "private List<UserNamespaceAuthorization> createUserNamespaceAuthorizationsFromEntities(\n        List<UserNamespaceAuthorizationEntity> userNamespaceAuthorizationEntities)", "class_method_signature": "UserNamespaceAuthorizationServiceImpl.createUserNamespaceAuthorizationsFromEntities(\n        List<UserNamespaceAuthorizationEntity> userNamespaceAuthorizationEntities)", "testcase": false, "constructor": false}, {"identifier": "createUserNamespaceAuthorizationFromEntity", "parameters": "(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "modifiers": "private", "return": "UserNamespaceAuthorization", "signature": "UserNamespaceAuthorization createUserNamespaceAuthorizationFromEntity(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "full_signature": "private UserNamespaceAuthorization createUserNamespaceAuthorizationFromEntity(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "class_method_signature": "UserNamespaceAuthorizationServiceImpl.createUserNamespaceAuthorizationFromEntity(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "testcase": false, "constructor": false}, {"identifier": "getUserNamespaceAuthorizationEntity", "parameters": "(UserNamespaceAuthorizationKey key)", "modifiers": "private", "return": "UserNamespaceAuthorizationEntity", "signature": "UserNamespaceAuthorizationEntity getUserNamespaceAuthorizationEntity(UserNamespaceAuthorizationKey key)", "full_signature": "private UserNamespaceAuthorizationEntity getUserNamespaceAuthorizationEntity(UserNamespaceAuthorizationKey key)", "class_method_signature": "UserNamespaceAuthorizationServiceImpl.getUserNamespaceAuthorizationEntity(UserNamespaceAuthorizationKey key)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/impl/UserNamespaceAuthorizationServiceImpl.java"}, "focal_method": {"identifier": "createUserNamespaceAuthorization", "parameters": "(UserNamespaceAuthorizationCreateRequest request)", "modifiers": "@PublishNotificationMessages @NamespacePermission(fields = \"#request?.userNamespaceAuthorizationKey?.namespace\", permissions = NamespacePermissionEnum.GRANT) @Override public", "return": "UserNamespaceAuthorization", "body": "@PublishNotificationMessages\n    @NamespacePermission(fields = \"#request?.userNamespaceAuthorizationKey?.namespace\", permissions = NamespacePermissionEnum.GRANT)\n    @Override\n    public UserNamespaceAuthorization createUserNamespaceAuthorization(UserNamespaceAuthorizationCreateRequest request)\n    {\n        // Validate and trim the request parameters.\n        validateUserNamespaceAuthorizationCreateRequest(request);\n\n        // Get the user namespace authorization key.\n        UserNamespaceAuthorizationKey key = request.getUserNamespaceAuthorizationKey();\n\n        // Ensure a user namespace authorization with the specified name doesn't already exist for the specified namespace.\n        UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity = userNamespaceAuthorizationDao.getUserNamespaceAuthorizationByKey(key);\n        if (userNamespaceAuthorizationEntity != null)\n        {\n            throw new AlreadyExistsException(String\n                .format(\"Unable to create user namespace authorization with user id \\\"%s\\\" and namespace \\\"%s\\\" because it already exists.\", key.getUserId(),\n                    key.getNamespace()));\n        }\n\n        // Retrieve and ensure that namespace exists with the specified user namespace authorization namespace code.\n        NamespaceEntity namespaceEntity = namespaceDaoHelper.getNamespaceEntity(key.getNamespace());\n\n        // Create and persist a new user namespace authorization entity from the request information.\n        userNamespaceAuthorizationEntity = createUserNamespaceAuthorizationEntity(key.getUserId(), namespaceEntity, request.getNamespacePermissions());\n\n        // Create a user namespace authorization change notification to be sent on create user namespace authorization event.\n        messageNotificationEventService.processUserNamespaceAuthorizationChangeNotificationEvent(key);\n\n        // Create and return the user namespace authorization object from the persisted entity.\n        return createUserNamespaceAuthorizationFromEntity(userNamespaceAuthorizationEntity);\n    }", "signature": "UserNamespaceAuthorization createUserNamespaceAuthorization(UserNamespaceAuthorizationCreateRequest request)", "full_signature": "@PublishNotificationMessages @NamespacePermission(fields = \"#request?.userNamespaceAuthorizationKey?.namespace\", permissions = NamespacePermissionEnum.GRANT) @Override public UserNamespaceAuthorization createUserNamespaceAuthorization(UserNamespaceAuthorizationCreateRequest request)", "class_method_signature": "UserNamespaceAuthorizationServiceImpl.createUserNamespaceAuthorization(UserNamespaceAuthorizationCreateRequest request)", "testcase": false, "constructor": false, "invocations": ["validateUserNamespaceAuthorizationCreateRequest", "getUserNamespaceAuthorizationKey", "getUserNamespaceAuthorizationByKey", "format", "getUserId", "getNamespace", "getNamespaceEntity", "getNamespace", "createUserNamespaceAuthorizationEntity", "getUserId", "getNamespacePermissions", "processUserNamespaceAuthorizationChangeNotificationEvent", "createUserNamespaceAuthorizationFromEntity"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}