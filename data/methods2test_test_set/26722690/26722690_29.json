{"test_class": {"identifier": "GuavaCacheTest", "superclass": "", "interfaces": "", "fields": [], "file": "commons/src/test/java/org/restheart/cache/impl/GuavaCacheTest.java"}, "test_case": {"identifier": "testGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGet() {\n        String key = \"A\";\n        GuavaCache<String, Integer> instance = new GuavaCache<>(100, Cache.EXPIRE_POLICY.AFTER_WRITE, 10000);\n        instance.put(key, 1);\n        Optional<Integer> result = instance.get(key);\n        assertTrue(result.isPresent());\n        assertEquals(Integer.valueOf(1), result.get());\n    }", "signature": "void testGet()", "full_signature": "@Test public void testGet()", "class_method_signature": "GuavaCacheTest.testGet()", "testcase": true, "constructor": false, "invocations": ["put", "get", "assertTrue", "isPresent", "assertEquals", "valueOf", "get"]}, "focal_class": {"identifier": "GuavaCache", "superclass": "", "interfaces": "implements org.restheart.cache.Cache<K, V>", "fields": [{"original_string": "private final Cache<K, Optional<V>> wrapped;", "modifier": "private final", "type": "Cache<K, Optional<V>>", "declarator": "wrapped", "var_name": "wrapped"}], "methods": [{"identifier": "GuavaCache", "parameters": "(long size, EXPIRE_POLICY expirePolicy, long ttl)", "modifiers": "public", "return": "", "signature": " GuavaCache(long size, EXPIRE_POLICY expirePolicy, long ttl)", "full_signature": "public  GuavaCache(long size, EXPIRE_POLICY expirePolicy, long ttl)", "class_method_signature": "GuavaCache.GuavaCache(long size, EXPIRE_POLICY expirePolicy, long ttl)", "testcase": false, "constructor": true}, {"identifier": "GuavaCache", "parameters": "(long size, EXPIRE_POLICY expirePolicy, long ttl, Consumer<Map.Entry<K, Optional<V>>> remover)", "modifiers": "public", "return": "", "signature": " GuavaCache(long size, EXPIRE_POLICY expirePolicy, long ttl, Consumer<Map.Entry<K, Optional<V>>> remover)", "full_signature": "public  GuavaCache(long size, EXPIRE_POLICY expirePolicy, long ttl, Consumer<Map.Entry<K, Optional<V>>> remover)", "class_method_signature": "GuavaCache.GuavaCache(long size, EXPIRE_POLICY expirePolicy, long ttl, Consumer<Map.Entry<K, Optional<V>>> remover)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(K key)", "modifiers": "@Override public", "return": "Optional<V>", "signature": "Optional<V> get(K key)", "full_signature": "@Override public Optional<V> get(K key)", "class_method_signature": "GuavaCache.get(K key)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(K key, V value)", "modifiers": "@Override public", "return": "void", "signature": "void put(K key, V value)", "full_signature": "@Override public void put(K key, V value)", "class_method_signature": "GuavaCache.put(K key, V value)", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "(K key)", "modifiers": "@Override public", "return": "void", "signature": "void invalidate(K key)", "full_signature": "@Override public void invalidate(K key)", "class_method_signature": "GuavaCache.invalidate(K key)", "testcase": false, "constructor": false}, {"identifier": "asMap", "parameters": "()", "modifiers": "@Override public", "return": "Map<K, Optional<V>>", "signature": "Map<K, Optional<V>> asMap()", "full_signature": "@Override public Map<K, Optional<V>> asMap()", "class_method_signature": "GuavaCache.asMap()", "testcase": false, "constructor": false}, {"identifier": "cleanUp", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cleanUp()", "full_signature": "@Override public void cleanUp()", "class_method_signature": "GuavaCache.cleanUp()", "testcase": false, "constructor": false}], "file": "commons/src/main/java/org/restheart/cache/impl/GuavaCache.java"}, "focal_method": {"identifier": "get", "parameters": "(K key)", "modifiers": "@Override public", "return": "Optional<V>", "body": "@Override\n    public Optional<V> get(K key) {\n        return wrapped.getIfPresent(key);\n    }", "signature": "Optional<V> get(K key)", "full_signature": "@Override public Optional<V> get(K key)", "class_method_signature": "GuavaCache.get(K key)", "testcase": false, "constructor": false, "invocations": ["getIfPresent"]}, "repository": {"repo_id": 26722690, "url": "https://github.com/SoftInstigate/restheart", "stars": 582, "created": "11/16/2014 6:01:01 PM +00:00", "updates": "2020-01-18T15:31:59+00:00", "fork": "False", "license": "licensed"}}