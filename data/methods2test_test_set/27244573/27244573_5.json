{"test_class": {"identifier": "CalibrationProtocolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private byte IGNORE = 0b0;", "modifier": "private", "type": "byte", "declarator": "IGNORE = 0b0", "var_name": "IGNORE"}, {"original_string": "private byte[] TEST_ACCELERATION_PACKET = new byte[] {IGNORE, -102, -1,  86, -3, -52, 96, 11};", "modifier": "private", "type": "byte[]", "declarator": "TEST_ACCELERATION_PACKET = new byte[] {IGNORE, -102, -1,  86, -3, -52, 96, 11}", "var_name": "TEST_ACCELERATION_PACKET"}, {"original_string": "private byte[] TEST_MAGNETIC_PACKET =     new byte[] {IGNORE,   48, 31, -43, -7, -56, 62, 1};", "modifier": "private", "type": "byte[]", "declarator": "TEST_MAGNETIC_PACKET =     new byte[] {IGNORE,   48, 31, -43, -7, -56, 62, 1}", "var_name": "TEST_MAGNETIC_PACKET"}, {"original_string": "private static final double ALLOWED_DELTA = 80;", "modifier": "private static final", "type": "double", "declarator": "ALLOWED_DELTA = 80", "var_name": "ALLOWED_DELTA"}], "file": "app/src/test/java/org/hwyl/sexytopo/comms/CalibrationProtocolTest.java"}, "test_case": {"identifier": "testReadDoubleByteMx", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadDoubleByteMx() {\n        double result = CalibrationProtocol.readDoubleByte(\n                TEST_MAGNETIC_PACKET,\n                CalibrationProtocol.MAGNETIC_MX_LOW_BYTE,\n                CalibrationProtocol.MAGNETIC_MX_HIGH_BYTE);\n        Assert.assertEquals(7978, result, ALLOWED_DELTA);\n    }", "signature": "void testReadDoubleByteMx()", "full_signature": "@Test public void testReadDoubleByteMx()", "class_method_signature": "CalibrationProtocolTest.testReadDoubleByteMx()", "testcase": true, "constructor": false, "invocations": ["readDoubleByte", "assertEquals"]}, "focal_class": {"identifier": "CalibrationProtocol", "superclass": "extends DistoXProtocol", "interfaces": "", "fields": [{"original_string": "public static final int ACCELERATION_ADMIN = 0;", "modifier": "public static final", "type": "int", "declarator": "ACCELERATION_ADMIN = 0", "var_name": "ACCELERATION_ADMIN"}, {"original_string": "public static final int ACCELERATION_GX_LOW_BYTE = 1;", "modifier": "public static final", "type": "int", "declarator": "ACCELERATION_GX_LOW_BYTE = 1", "var_name": "ACCELERATION_GX_LOW_BYTE"}, {"original_string": "public static final int ACCELERATION_GX_HIGH_BYTE = 2;", "modifier": "public static final", "type": "int", "declarator": "ACCELERATION_GX_HIGH_BYTE = 2", "var_name": "ACCELERATION_GX_HIGH_BYTE"}, {"original_string": "public static final int ACCELERATION_GY_LOW_BYTE = 3;", "modifier": "public static final", "type": "int", "declarator": "ACCELERATION_GY_LOW_BYTE = 3", "var_name": "ACCELERATION_GY_LOW_BYTE"}, {"original_string": "public static final int ACCELERATION_GY_HIGH_BYTE = 4;", "modifier": "public static final", "type": "int", "declarator": "ACCELERATION_GY_HIGH_BYTE = 4", "var_name": "ACCELERATION_GY_HIGH_BYTE"}, {"original_string": "public static final int ACCELERATION_GZ_LOW_BYTE = 5;", "modifier": "public static final", "type": "int", "declarator": "ACCELERATION_GZ_LOW_BYTE = 5", "var_name": "ACCELERATION_GZ_LOW_BYTE"}, {"original_string": "public static final int ACCELERATION_GZ_HIGH_BYTE = 6;", "modifier": "public static final", "type": "int", "declarator": "ACCELERATION_GZ_HIGH_BYTE = 6", "var_name": "ACCELERATION_GZ_HIGH_BYTE"}, {"original_string": "public static final int ACCELERATION_NOT_USED = 7;", "modifier": "public static final", "type": "int", "declarator": "ACCELERATION_NOT_USED = 7", "var_name": "ACCELERATION_NOT_USED"}, {"original_string": "public static final int MAGNETIC_ADMIN = 0;", "modifier": "public static final", "type": "int", "declarator": "MAGNETIC_ADMIN = 0", "var_name": "MAGNETIC_ADMIN"}, {"original_string": "public static final int MAGNETIC_MX_LOW_BYTE = 1;", "modifier": "public static final", "type": "int", "declarator": "MAGNETIC_MX_LOW_BYTE = 1", "var_name": "MAGNETIC_MX_LOW_BYTE"}, {"original_string": "public static final int MAGNETIC_MX_HIGH_BYTE = 2;", "modifier": "public static final", "type": "int", "declarator": "MAGNETIC_MX_HIGH_BYTE = 2", "var_name": "MAGNETIC_MX_HIGH_BYTE"}, {"original_string": "public static final int MAGNETIC_MY_LOW_BYTE = 3;", "modifier": "public static final", "type": "int", "declarator": "MAGNETIC_MY_LOW_BYTE = 3", "var_name": "MAGNETIC_MY_LOW_BYTE"}, {"original_string": "public static final int MAGNETIC_MY_HIGH_BYTE = 4;", "modifier": "public static final", "type": "int", "declarator": "MAGNETIC_MY_HIGH_BYTE = 4", "var_name": "MAGNETIC_MY_HIGH_BYTE"}, {"original_string": "public static final int MAGNETIC_MZ_LOW_BYTE = 5;", "modifier": "public static final", "type": "int", "declarator": "MAGNETIC_MZ_LOW_BYTE = 5", "var_name": "MAGNETIC_MZ_LOW_BYTE"}, {"original_string": "public static final int MAGNETIC_MZ_HIGH_BYTE = 6;", "modifier": "public static final", "type": "int", "declarator": "MAGNETIC_MZ_HIGH_BYTE = 6", "var_name": "MAGNETIC_MZ_HIGH_BYTE"}, {"original_string": "public static final int MAGNETIC_NOT_USED = 7;", "modifier": "public static final", "type": "int", "declarator": "MAGNETIC_NOT_USED = 7", "var_name": "MAGNETIC_NOT_USED"}, {"original_string": "private CalibrationReading calibrationReading = null;", "modifier": "private", "type": "CalibrationReading", "declarator": "calibrationReading = null", "var_name": "calibrationReading"}, {"original_string": "private int accelerationDuplicated = 0, magneticDuplicated = 0;", "modifier": "private", "type": "int", "declarator": "accelerationDuplicated = 0", "var_name": "accelerationDuplicated"}], "methods": [{"identifier": "CalibrationProtocol", "parameters": "(\n            SexyTopoActivity activity, BluetoothDevice bluetoothDevice, SurveyManager dataManager)", "modifiers": "public", "return": "", "signature": " CalibrationProtocol(\n            SexyTopoActivity activity, BluetoothDevice bluetoothDevice, SurveyManager dataManager)", "full_signature": "public  CalibrationProtocol(\n            SexyTopoActivity activity, BluetoothDevice bluetoothDevice, SurveyManager dataManager)", "class_method_signature": "CalibrationProtocol.CalibrationProtocol(\n            SexyTopoActivity activity, BluetoothDevice bluetoothDevice, SurveyManager dataManager)", "testcase": false, "constructor": true}, {"identifier": "go", "parameters": "(DataInputStream inStream, DataOutputStream outStream)", "modifiers": "@Override public", "return": "void", "signature": "void go(DataInputStream inStream, DataOutputStream outStream)", "full_signature": "@Override public void go(DataInputStream inStream, DataOutputStream outStream)", "class_method_signature": "CalibrationProtocol.go(DataInputStream inStream, DataOutputStream outStream)", "testcase": false, "constructor": false}, {"identifier": "checkExcessiveDuplication", "parameters": "(\n            int count, DataInputStream inStream, DataOutputStream outStream)", "modifiers": "private", "return": "void", "signature": "void checkExcessiveDuplication(\n            int count, DataInputStream inStream, DataOutputStream outStream)", "full_signature": "private void checkExcessiveDuplication(\n            int count, DataInputStream inStream, DataOutputStream outStream)", "class_method_signature": "CalibrationProtocol.checkExcessiveDuplication(\n            int count, DataInputStream inStream, DataOutputStream outStream)", "testcase": false, "constructor": false}, {"identifier": "updateAccelerationSensorReading", "parameters": "(byte[] packet, CalibrationReading reading)", "modifiers": "private static", "return": "void", "signature": "void updateAccelerationSensorReading(byte[] packet, CalibrationReading reading)", "full_signature": "private static void updateAccelerationSensorReading(byte[] packet, CalibrationReading reading)", "class_method_signature": "CalibrationProtocol.updateAccelerationSensorReading(byte[] packet, CalibrationReading reading)", "testcase": false, "constructor": false}, {"identifier": "updateMagneticSensorReading", "parameters": "(byte[] packet, CalibrationReading reading)", "modifiers": "private static", "return": "void", "signature": "void updateMagneticSensorReading(byte[] packet, CalibrationReading reading)", "full_signature": "private static void updateMagneticSensorReading(byte[] packet, CalibrationReading reading)", "class_method_signature": "CalibrationProtocol.updateMagneticSensorReading(byte[] packet, CalibrationReading reading)", "testcase": false, "constructor": false}, {"identifier": "readDoubleByte", "parameters": "(byte[] packet, int lowByteIndex, int highByteIndex)", "modifiers": "public static", "return": "int", "signature": "int readDoubleByte(byte[] packet, int lowByteIndex, int highByteIndex)", "full_signature": "public static int readDoubleByte(byte[] packet, int lowByteIndex, int highByteIndex)", "class_method_signature": "CalibrationProtocol.readDoubleByte(byte[] packet, int lowByteIndex, int highByteIndex)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/hwyl/sexytopo/comms/CalibrationProtocol.java"}, "focal_method": {"identifier": "readDoubleByte", "parameters": "(byte[] packet, int lowByteIndex, int highByteIndex)", "modifiers": "public static", "return": "int", "body": "public static int readDoubleByte(byte[] packet, int lowByteIndex, int highByteIndex) {\n        int low = packet[lowByteIndex] & 0xff;\n        int high = packet[highByteIndex] & 0xff;\n        int combined = (high * 256) + low;\n\n        if (combined > 32768)\n            combined -= 65536;\n\n        return combined;\n    }", "signature": "int readDoubleByte(byte[] packet, int lowByteIndex, int highByteIndex)", "full_signature": "public static int readDoubleByte(byte[] packet, int lowByteIndex, int highByteIndex)", "class_method_signature": "CalibrationProtocol.readDoubleByte(byte[] packet, int lowByteIndex, int highByteIndex)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 27244573, "url": "https://github.com/richsmith/sexytopo", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 15, "size": 83635, "license": "licensed"}}