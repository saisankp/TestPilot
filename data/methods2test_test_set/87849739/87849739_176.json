{"test_class": {"identifier": "ReferencePlaceholderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ThingId THING_ID = ThingId.of(\"namespace:myThing\");", "modifier": "private static final", "type": "ThingId", "declarator": "THING_ID = ThingId.of(\"namespace:myThing\")", "var_name": "THING_ID"}], "file": "services/concierge/enforcement/src/test/java/org/eclipse/ditto/services/concierge/enforcement/placeholders/references/ReferencePlaceholderTest.java"}, "test_case": {"identifier": "fromCharSequenceWithInvalidPlaceholderIsEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fromCharSequenceWithInvalidPlaceholderIsEmpty() {\n        assertThat(ReferencePlaceholder.fromCharSequence(\"{{things/\" + THING_ID + \"/policyId}}\")).isNotPresent();\n        assertThat(ReferencePlaceholder.fromCharSequence(\"{{ref:things\" + THING_ID + \"/policyId}}\")).isNotPresent();\n        assertThat(ReferencePlaceholder.fromCharSequence(\"{{ref:things/ \" + THING_ID + \"/policyId}}\")).isNotPresent();\n        assertThat(ReferencePlaceholder.fromCharSequence(\"{{ref:things/\" + THING_ID + \"}}\")).isNotPresent();\n\n        assertThat(ReferencePlaceholder.fromCharSequence(null)).isNotPresent();\n    }", "signature": "void fromCharSequenceWithInvalidPlaceholderIsEmpty()", "full_signature": "@Test public void fromCharSequenceWithInvalidPlaceholderIsEmpty()", "class_method_signature": "ReferencePlaceholderTest.fromCharSequenceWithInvalidPlaceholderIsEmpty()", "testcase": true, "constructor": false, "invocations": ["isNotPresent", "assertThat", "fromCharSequence", "isNotPresent", "assertThat", "fromCharSequence", "isNotPresent", "assertThat", "fromCharSequence", "isNotPresent", "assertThat", "fromCharSequence", "isNotPresent", "assertThat", "fromCharSequence"]}, "focal_class": {"identifier": "ReferencePlaceholder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String placeholderBeginning = \"\\\\{\\\\{\\\\s?\";", "modifier": "private static", "type": "String", "declarator": "placeholderBeginning = \"\\\\{\\\\{\\\\s?\"", "var_name": "placeholderBeginning"}, {"original_string": "private static String placeholderEnding = \"\\\\s?}}\";", "modifier": "private static", "type": "String", "declarator": "placeholderEnding = \"\\\\s?}}\"", "var_name": "placeholderEnding"}, {"original_string": "private static String referenceKeyword = \"ref\";", "modifier": "private static", "type": "String", "declarator": "referenceKeyword = \"ref\"", "var_name": "referenceKeyword"}, {"original_string": "private static String everythingExceptFrontSlashesAndSpaces = \"[^/\\\\s]\";", "modifier": "private static", "type": "String", "declarator": "everythingExceptFrontSlashesAndSpaces = \"[^/\\\\s]\"", "var_name": "everythingExceptFrontSlashesAndSpaces"}, {"original_string": "private static String everythingExceptSpaces = \"[^\\\\s]\";", "modifier": "private static", "type": "String", "declarator": "everythingExceptSpaces = \"[^\\\\s]\"", "var_name": "everythingExceptSpaces"}, {"original_string": "private static String entityTypeGroup = \"(\" + everythingExceptFrontSlashesAndSpaces + \"+)\";", "modifier": "private static", "type": "String", "declarator": "entityTypeGroup = \"(\" + everythingExceptFrontSlashesAndSpaces + \"+)\"", "var_name": "entityTypeGroup"}, {"original_string": "private static String entityIdGroup = \"(\" + everythingExceptFrontSlashesAndSpaces + \"+)\";", "modifier": "private static", "type": "String", "declarator": "entityIdGroup = \"(\" + everythingExceptFrontSlashesAndSpaces + \"+)\"", "var_name": "entityIdGroup"}, {"original_string": "private static String fieldSelectorGroup = \"(\" + everythingExceptSpaces + \"+)\";", "modifier": "private static", "type": "String", "declarator": "fieldSelectorGroup = \"(\" + everythingExceptSpaces + \"+)\"", "var_name": "fieldSelectorGroup"}, {"original_string": "private static Pattern referencePlaceholderPattern = Pattern.compile(\n            placeholderBeginning + referenceKeyword + \":\" + entityTypeGroup + \"/\" + entityIdGroup + \"/\" +\n                    fieldSelectorGroup + placeholderEnding);", "modifier": "private static", "type": "Pattern", "declarator": "referencePlaceholderPattern = Pattern.compile(\n            placeholderBeginning + referenceKeyword + \":\" + entityTypeGroup + \"/\" + entityIdGroup + \"/\" +\n                    fieldSelectorGroup + placeholderEnding)", "var_name": "referencePlaceholderPattern"}, {"original_string": "private final ReferencedEntityType referencedEntityType;", "modifier": "private final", "type": "ReferencedEntityType", "declarator": "referencedEntityType", "var_name": "referencedEntityType"}, {"original_string": "private final EntityId referencedEntityId;", "modifier": "private final", "type": "EntityId", "declarator": "referencedEntityId", "var_name": "referencedEntityId"}, {"original_string": "private final JsonPointer referencedField;", "modifier": "private final", "type": "JsonPointer", "declarator": "referencedField", "var_name": "referencedField"}], "methods": [{"identifier": "ReferencePlaceholder", "parameters": "(final ReferencedEntityType referencedEntityType, final EntityId referencedEntityId,\n            final JsonPointer referencedField)", "modifiers": "private", "return": "", "signature": " ReferencePlaceholder(final ReferencedEntityType referencedEntityType, final EntityId referencedEntityId,\n            final JsonPointer referencedField)", "full_signature": "private  ReferencePlaceholder(final ReferencedEntityType referencedEntityType, final EntityId referencedEntityId,\n            final JsonPointer referencedField)", "class_method_signature": "ReferencePlaceholder.ReferencePlaceholder(final ReferencedEntityType referencedEntityType, final EntityId referencedEntityId,\n            final JsonPointer referencedField)", "testcase": false, "constructor": true}, {"identifier": "fromCharSequence", "parameters": "(@Nullable final CharSequence input)", "modifiers": "public static", "return": "Optional<ReferencePlaceholder>", "signature": "Optional<ReferencePlaceholder> fromCharSequence(@Nullable final CharSequence input)", "full_signature": "public static Optional<ReferencePlaceholder> fromCharSequence(@Nullable final CharSequence input)", "class_method_signature": "ReferencePlaceholder.fromCharSequence(@Nullable final CharSequence input)", "testcase": false, "constructor": false}, {"identifier": "getReferencedEntityType", "parameters": "()", "modifiers": "", "return": "ReferencedEntityType", "signature": "ReferencedEntityType getReferencedEntityType()", "full_signature": " ReferencedEntityType getReferencedEntityType()", "class_method_signature": "ReferencePlaceholder.getReferencedEntityType()", "testcase": false, "constructor": false}, {"identifier": "getReferencedEntityId", "parameters": "()", "modifiers": "", "return": "EntityId", "signature": "EntityId getReferencedEntityId()", "full_signature": " EntityId getReferencedEntityId()", "class_method_signature": "ReferencePlaceholder.getReferencedEntityId()", "testcase": false, "constructor": false}, {"identifier": "getReferencedField", "parameters": "()", "modifiers": "", "return": "JsonPointer", "signature": "JsonPointer getReferencedField()", "full_signature": " JsonPointer getReferencedField()", "class_method_signature": "ReferencePlaceholder.getReferencedField()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(@Nullable final Object o)", "full_signature": "@Override public boolean equals(@Nullable final Object o)", "class_method_signature": "ReferencePlaceholder.equals(@Nullable final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ReferencePlaceholder.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ReferencePlaceholder.toString()", "testcase": false, "constructor": false}], "file": "services/concierge/enforcement/src/main/java/org/eclipse/ditto/services/concierge/enforcement/placeholders/references/ReferencePlaceholder.java"}, "focal_method": {"identifier": "fromCharSequence", "parameters": "(@Nullable final CharSequence input)", "modifiers": "public static", "return": "Optional<ReferencePlaceholder>", "body": "public static Optional<ReferencePlaceholder> fromCharSequence(@Nullable final CharSequence input) {\n\n        if (input == null) {\n            return Optional.empty();\n        }\n\n        final Matcher matcher = referencePlaceholderPattern.matcher(input);\n        if (matcher.find()) {\n            final ReferencedEntityType referencedEntityType = ReferencedEntityType.fromString(matcher.group(1));\n            final EntityId entityId = DefaultEntityId.of(matcher.group(2));\n            final JsonPointer referencedField = JsonPointer.of(matcher.group(3));\n            return Optional.of(new ReferencePlaceholder(referencedEntityType, entityId, referencedField));\n        }\n\n        return Optional.empty();\n    }", "signature": "Optional<ReferencePlaceholder> fromCharSequence(@Nullable final CharSequence input)", "full_signature": "public static Optional<ReferencePlaceholder> fromCharSequence(@Nullable final CharSequence input)", "class_method_signature": "ReferencePlaceholder.fromCharSequence(@Nullable final CharSequence input)", "testcase": false, "constructor": false, "invocations": ["empty", "matcher", "find", "fromString", "group", "of", "group", "of", "group", "of", "empty"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}