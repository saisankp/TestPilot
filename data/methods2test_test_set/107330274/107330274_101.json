{"test_class": {"identifier": "PropertiesExtTest", "superclass": "", "interfaces": "", "fields": [], "file": "titus-common/src/test/java/com/netflix/titus/common/util/PropertiesExtTest.java"}, "test_case": {"identifier": "testVerifyRootName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVerifyRootName() throws Exception {\n        Map<String, String> properties = asMap(\n                \"my\", \"valueA\",\n                \"your.x\", \"valueX\",\n                \"their.y\", \"valueY\"\n        );\n        List<String> notMatching = PropertiesExt.verifyRootNames(properties, asSet(\"my\", \"your\"));\n        assertThat(notMatching).containsExactly(\"their.y\");\n    }", "signature": "void testVerifyRootName()", "full_signature": "@Test public void testVerifyRootName()", "class_method_signature": "PropertiesExtTest.testVerifyRootName()", "testcase": true, "constructor": false, "invocations": ["asMap", "verifyRootNames", "asSet", "containsExactly", "assertThat"]}, "focal_class": {"identifier": "PropertiesExt", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "PropertiesExt", "parameters": "()", "modifiers": "private", "return": "", "signature": " PropertiesExt()", "full_signature": "private  PropertiesExt()", "class_method_signature": "PropertiesExt.PropertiesExt()", "testcase": false, "constructor": true}, {"identifier": "loadFromClassPath", "parameters": "(String resourceName)", "modifiers": "public static", "return": "Optional<Map<String, String>>", "signature": "Optional<Map<String, String>> loadFromClassPath(String resourceName)", "full_signature": "public static Optional<Map<String, String>> loadFromClassPath(String resourceName)", "class_method_signature": "PropertiesExt.loadFromClassPath(String resourceName)", "testcase": false, "constructor": false}, {"identifier": "groupByRootName", "parameters": "(Map<String, String> properties, int rootParts)", "modifiers": "public static", "return": "Map<String, Map<String, String>>", "signature": "Map<String, Map<String, String>> groupByRootName(Map<String, String> properties, int rootParts)", "full_signature": "public static Map<String, Map<String, String>> groupByRootName(Map<String, String> properties, int rootParts)", "class_method_signature": "PropertiesExt.groupByRootName(Map<String, String> properties, int rootParts)", "testcase": false, "constructor": false}, {"identifier": "getPropertiesOf", "parameters": "(String namePrefix, Map<String, String> properties)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getPropertiesOf(String namePrefix, Map<String, String> properties)", "full_signature": "public static Map<String, String> getPropertiesOf(String namePrefix, Map<String, String> properties)", "class_method_signature": "PropertiesExt.getPropertiesOf(String namePrefix, Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "verifyRootNames", "parameters": "(Map<String, String> properties, Set<String> expectedRootNames)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> verifyRootNames(Map<String, String> properties, Set<String> expectedRootNames)", "full_signature": "public static List<String> verifyRootNames(Map<String, String> properties, Set<String> expectedRootNames)", "class_method_signature": "PropertiesExt.verifyRootNames(Map<String, String> properties, Set<String> expectedRootNames)", "testcase": false, "constructor": false}, {"identifier": "getRootNames", "parameters": "(Collection<String> names, int rootSegments)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getRootNames(Collection<String> names, int rootSegments)", "full_signature": "public static Set<String> getRootNames(Collection<String> names, int rootSegments)", "class_method_signature": "PropertiesExt.getRootNames(Collection<String> names, int rootSegments)", "testcase": false, "constructor": false}, {"identifier": "splitNames", "parameters": "(Collection<String> names, int rootSegments)", "modifiers": "public static", "return": "Map<String, Set<String>>", "signature": "Map<String, Set<String>> splitNames(Collection<String> names, int rootSegments)", "full_signature": "public static Map<String, Set<String>> splitNames(Collection<String> names, int rootSegments)", "class_method_signature": "PropertiesExt.splitNames(Collection<String> names, int rootSegments)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String name, int rootParts)", "modifiers": "public static", "return": "Pair<String, String>", "signature": "Pair<String, String> split(String name, int rootParts)", "full_signature": "public static Pair<String, String> split(String name, int rootParts)", "class_method_signature": "PropertiesExt.split(String name, int rootParts)", "testcase": false, "constructor": false}, {"identifier": "fullSplit", "parameters": "(Collection<String> names)", "modifiers": "public static", "return": "PropertyNode<Boolean>", "signature": "PropertyNode<Boolean> fullSplit(Collection<String> names)", "full_signature": "public static PropertyNode<Boolean> fullSplit(Collection<String> names)", "class_method_signature": "PropertiesExt.fullSplit(Collection<String> names)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/PropertiesExt.java"}, "focal_method": {"identifier": "verifyRootNames", "parameters": "(Map<String, String> properties, Set<String> expectedRootNames)", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> verifyRootNames(Map<String, String> properties, Set<String> expectedRootNames) {\n        if (CollectionsExt.isNullOrEmpty(properties)) {\n            return Collections.emptyList();\n        }\n        List<String> notMatching = new ArrayList<>();\n        for (String key : properties.keySet()) {\n            String name = key.trim();\n\n            int idx = name.indexOf('.');\n            String rootPart = (idx == -1 || idx == name.length() - 1)\n                    ? name\n                    : name.substring(0, idx);\n\n            if (!expectedRootNames.contains(rootPart)) {\n                notMatching.add(name);\n            }\n        }\n        return notMatching;\n    }", "signature": "List<String> verifyRootNames(Map<String, String> properties, Set<String> expectedRootNames)", "full_signature": "public static List<String> verifyRootNames(Map<String, String> properties, Set<String> expectedRootNames)", "class_method_signature": "PropertiesExt.verifyRootNames(Map<String, String> properties, Set<String> expectedRootNames)", "testcase": false, "constructor": false, "invocations": ["isNullOrEmpty", "emptyList", "keySet", "trim", "indexOf", "length", "substring", "contains", "add"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}