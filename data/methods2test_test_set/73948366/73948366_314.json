{"test_class": {"identifier": "IdTokenTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File ecPrivateKey = new File(\"./src/test/resources/unit_test_ec_private.key\");", "modifier": "private final", "type": "File", "declarator": "ecPrivateKey = new File(\"./src/test/resources/unit_test_ec_private.key\")", "var_name": "ecPrivateKey"}, {"original_string": "private final File ecPublicKey = new File(\"./src/test/resources/ec_public.key\");", "modifier": "private final", "type": "File", "declarator": "ecPublicKey = new File(\"./src/test/resources/ec_public.key\")", "var_name": "ecPublicKey"}], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/token/IdTokenTest.java"}, "test_case": {"identifier": "testIdTokenSignedTokenPublicKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIdTokenSignedTokenPublicKey() {\n\n        long now = System.currentTimeMillis() / 1000;\n\n        IdToken token = createIdToken(now);\n\n        // now get the signed token\n\n        PrivateKey privateKey = Crypto.loadPrivateKey(ecPrivateKey);\n        String idJws = token.getSignedToken(privateKey, \"eckey1\", SignatureAlgorithm.ES256);\n        assertNotNull(idJws);\n\n        // now verify our signed token\n\n        IdToken checkToken = new IdToken(idJws, Crypto.loadPublicKey(ecPublicKey));\n        validateIdToken(checkToken, now);\n    }", "signature": "void testIdTokenSignedTokenPublicKey()", "full_signature": "@Test public void testIdTokenSignedTokenPublicKey()", "class_method_signature": "IdTokenTest.testIdTokenSignedTokenPublicKey()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "createIdToken", "loadPrivateKey", "getSignedToken", "assertNotNull", "loadPublicKey", "validateIdToken"]}, "focal_class": {"identifier": "IdToken", "superclass": "extends OAuth2Token", "interfaces": "", "fields": [], "methods": [{"identifier": "IdToken", "parameters": "()", "modifiers": "public", "return": "", "signature": " IdToken()", "full_signature": "public  IdToken()", "class_method_signature": "IdToken.IdToken()", "testcase": false, "constructor": true}, {"identifier": "IdToken", "parameters": "(final String token, JwtsSigningKeyResolver keyResolver)", "modifiers": "public", "return": "", "signature": " IdToken(final String token, JwtsSigningKeyResolver keyResolver)", "full_signature": "public  IdToken(final String token, JwtsSigningKeyResolver keyResolver)", "class_method_signature": "IdToken.IdToken(final String token, JwtsSigningKeyResolver keyResolver)", "testcase": false, "constructor": true}, {"identifier": "IdToken", "parameters": "(final String token, PublicKey publicKey)", "modifiers": "public", "return": "", "signature": " IdToken(final String token, PublicKey publicKey)", "full_signature": "public  IdToken(final String token, PublicKey publicKey)", "class_method_signature": "IdToken.IdToken(final String token, PublicKey publicKey)", "testcase": false, "constructor": true}, {"identifier": "getSignedToken", "parameters": "(final PrivateKey key, final String keyId,\n            final SignatureAlgorithm keyAlg)", "modifiers": "public", "return": "String", "signature": "String getSignedToken(final PrivateKey key, final String keyId,\n            final SignatureAlgorithm keyAlg)", "full_signature": "public String getSignedToken(final PrivateKey key, final String keyId,\n            final SignatureAlgorithm keyAlg)", "class_method_signature": "IdToken.getSignedToken(final PrivateKey key, final String keyId,\n            final SignatureAlgorithm keyAlg)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/token/IdToken.java"}, "focal_method": {"identifier": "getSignedToken", "parameters": "(final PrivateKey key, final String keyId,\n            final SignatureAlgorithm keyAlg)", "modifiers": "public", "return": "String", "body": "public String getSignedToken(final PrivateKey key, final String keyId,\n            final SignatureAlgorithm keyAlg) {\n\n        return Jwts.builder().setSubject(subject)\n                .setIssuedAt(Date.from(Instant.ofEpochSecond(issueTime)))\n                .setExpiration(Date.from(Instant.ofEpochSecond(expiryTime)))\n                .setIssuer(issuer)\n                .setAudience(audience)\n                .claim(CLAIM_AUTH_TIME, authTime)\n                .claim(CLAIM_VERSION, version)\n                .setHeaderParam(HDR_KEY_ID, keyId)\n                .signWith(key, keyAlg)\n                .compact();\n    }", "signature": "String getSignedToken(final PrivateKey key, final String keyId,\n            final SignatureAlgorithm keyAlg)", "full_signature": "public String getSignedToken(final PrivateKey key, final String keyId,\n            final SignatureAlgorithm keyAlg)", "class_method_signature": "IdToken.getSignedToken(final PrivateKey key, final String keyId,\n            final SignatureAlgorithm keyAlg)", "testcase": false, "constructor": false, "invocations": ["compact", "signWith", "setHeaderParam", "claim", "claim", "setAudience", "setIssuer", "setExpiration", "setIssuedAt", "setSubject", "builder", "from", "ofEpochSecond", "from", "ofEpochSecond"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}