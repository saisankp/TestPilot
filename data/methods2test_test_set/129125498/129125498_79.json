{"test_class": {"identifier": "ExponentialWelfordIntervalForecasterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_DATA_FILE = \"tests/exp-welford-test-data.csv\";", "modifier": "private static final", "type": "String", "declarator": "TEST_DATA_FILE = \"tests/exp-welford-test-data.csv\"", "var_name": "TEST_DATA_FILE"}, {"original_string": "private static final double TOLERANCE = 0.001;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.001", "var_name": "TOLERANCE"}, {"original_string": "private static List<TestRow> testData;", "modifier": "private static", "type": "List<TestRow>", "declarator": "testData", "var_name": "testData"}, {"original_string": "private ExponentialWelfordIntervalForecaster forecasterUnderTest;", "modifier": "private", "type": "ExponentialWelfordIntervalForecaster", "declarator": "forecasterUnderTest", "var_name": "forecasterUnderTest"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/forecast/interval/algo/expwelford/ExponentialWelfordIntervalForecasterTest.java"}, "test_case": {"identifier": "testForecast", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testForecast() {\n        val metricDef = TestObjectMother.metricDefinition();\n        val secondBase = Instant.now().getEpochSecond();\n        var secondOffset = 0;\n\n        for (val testRow : testData) {\n            val metricData = new MetricData(metricDef, testRow.getObservation(), secondBase + secondOffset);\n            val actual = forecasterUnderTest.forecast(metricData, testRow.getPointForecast());\n\n            assertEquals(testRow.getUpperStrong(), actual.getUpperStrong(), TOLERANCE);\n            assertEquals(testRow.getUpperWeak(), actual.getUpperWeak(), TOLERANCE);\n            assertEquals(testRow.getLowerWeak(), actual.getLowerWeak(), TOLERANCE);\n            assertEquals(testRow.getLowerStrong(), actual.getLowerStrong(), TOLERANCE);\n        }\n    }", "signature": "void testForecast()", "full_signature": "@Test public void testForecast()", "class_method_signature": "ExponentialWelfordIntervalForecasterTest.testForecast()", "testcase": true, "constructor": false, "invocations": ["metricDefinition", "getEpochSecond", "now", "getObservation", "forecast", "getPointForecast", "assertEquals", "getUpperStrong", "getUpperStrong", "assertEquals", "getUpperWeak", "getUpperWeak", "assertEquals", "getLowerWeak", "getLowerWeak", "assertEquals", "getLowerStrong", "getLowerStrong"]}, "focal_class": {"identifier": "ExponentialWelfordIntervalForecaster", "superclass": "", "interfaces": "implements IntervalForecaster", "fields": [{"original_string": "@Getter\n    private ExponentialWelfordIntervalForecasterParams params;", "modifier": "@Getter\n    private", "type": "ExponentialWelfordIntervalForecasterParams", "declarator": "params", "var_name": "params"}, {"original_string": "@Getter\n    private double variance;", "modifier": "@Getter\n    private", "type": "double", "declarator": "variance", "var_name": "variance"}], "methods": [{"identifier": "ExponentialWelfordIntervalForecaster", "parameters": "()", "modifiers": "public", "return": "", "signature": " ExponentialWelfordIntervalForecaster()", "full_signature": "public  ExponentialWelfordIntervalForecaster()", "class_method_signature": "ExponentialWelfordIntervalForecaster.ExponentialWelfordIntervalForecaster()", "testcase": false, "constructor": true}, {"identifier": "ExponentialWelfordIntervalForecaster", "parameters": "(ExponentialWelfordIntervalForecasterParams params)", "modifiers": "public", "return": "", "signature": " ExponentialWelfordIntervalForecaster(ExponentialWelfordIntervalForecasterParams params)", "full_signature": "public  ExponentialWelfordIntervalForecaster(ExponentialWelfordIntervalForecasterParams params)", "class_method_signature": "ExponentialWelfordIntervalForecaster.ExponentialWelfordIntervalForecaster(ExponentialWelfordIntervalForecasterParams params)", "testcase": false, "constructor": true}, {"identifier": "forecast", "parameters": "(MetricData metricData, double pointForecast)", "modifiers": "@Override public", "return": "IntervalForecast", "signature": "IntervalForecast forecast(MetricData metricData, double pointForecast)", "full_signature": "@Override public IntervalForecast forecast(MetricData metricData, double pointForecast)", "class_method_signature": "ExponentialWelfordIntervalForecaster.forecast(MetricData metricData, double pointForecast)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/forecast/interval/algo/expwelford/ExponentialWelfordIntervalForecaster.java"}, "focal_method": {"identifier": "forecast", "parameters": "(MetricData metricData, double pointForecast)", "modifiers": "@Override public", "return": "IntervalForecast", "body": "@Override\n    public IntervalForecast forecast(MetricData metricData, double pointForecast) {\n\n        // https://en.wikipedia.org/wiki/Moving_average#Exponentially_weighted_moving_variance_and_standard_deviation\n        // http://people.ds.cam.ac.uk/fanf2/hermes/doc/antiforgery/stats.pdf\n        val observed = metricData.getValue();\n        val residual = observed - pointForecast;\n        val incr = params.getAlpha() * residual;\n\n        // FIXME I believe this belongs here... [WLW]\n        this.variance = (1.0 - params.getAlpha()) * (this.variance + residual * incr);\n\n        val stdev = Math.sqrt(variance);\n        val weakWidth = params.getWeakSigmas() * stdev;\n        val strongWidth = params.getStrongSigmas() * stdev;\n\n        // FIXME ...but this is where it is in the legacy code (and where the unit tests expect it). [WLW]\n//        this.variance = (1.0 - params.getAlpha()) * (this.variance + residual * incr);\n\n        return new IntervalForecast(\n                pointForecast + strongWidth,\n                pointForecast + weakWidth,\n                pointForecast - weakWidth,\n                pointForecast - strongWidth);\n    }", "signature": "IntervalForecast forecast(MetricData metricData, double pointForecast)", "full_signature": "@Override public IntervalForecast forecast(MetricData metricData, double pointForecast)", "class_method_signature": "ExponentialWelfordIntervalForecaster.forecast(MetricData metricData, double pointForecast)", "testcase": false, "constructor": false, "invocations": ["getValue", "getAlpha", "getAlpha", "sqrt", "getWeakSigmas", "getStrongSigmas"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}