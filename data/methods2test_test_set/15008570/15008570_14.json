{"test_class": {"identifier": "GitWorkflowRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String WF_WORK = \"wf-work\";", "modifier": "public static final", "type": "String", "declarator": "WF_WORK = \"wf-work\"", "var_name": "WF_WORK"}, {"original_string": "public static final String WORK_DIR = \"./\" + WF_WORK;", "modifier": "public static final", "type": "String", "declarator": "WORK_DIR = \"./\" + WF_WORK", "var_name": "WORK_DIR"}, {"original_string": "public static final int CHECK_INTERVAL_M_SEC = 1000;", "modifier": "public static final", "type": "int", "declarator": "CHECK_INTERVAL_M_SEC = 1000", "var_name": "CHECK_INTERVAL_M_SEC"}, {"original_string": "private GitWorkflowRepository wfRepo;", "modifier": "private", "type": "GitWorkflowRepository", "declarator": "wfRepo", "var_name": "wfRepo"}, {"original_string": "private TransientScottyEngine engine;", "modifier": "private", "type": "TransientScottyEngine", "declarator": "engine", "var_name": "engine"}, {"original_string": "private Backchannel channel;", "modifier": "private", "type": "Backchannel", "declarator": "channel", "var_name": "channel"}], "file": "projects/copper-ext/src/test/java/org/copperengine/ext/wfrepo/git/GitWorkflowRepositoryTest.java"}, "test_case": {"identifier": "startFailureEmptyRepoTest", "parameters": "()", "modifiers": "@Test(expected = GitWorkflowRepository.GitWorkflowRepositoryException.class) public", "return": "void", "body": "@Test(expected = GitWorkflowRepository.GitWorkflowRepositoryException.class)\n    public void startFailureEmptyRepoTest() throws Exception {\n        GitWorkflowRepository wfRepo2 = new GitWorkflowRepository();\n        wfRepo2.start();\n    }", "signature": "void startFailureEmptyRepoTest()", "full_signature": "@Test(expected = GitWorkflowRepository.GitWorkflowRepositoryException.class) public void startFailureEmptyRepoTest()", "class_method_signature": "GitWorkflowRepositoryTest.startFailureEmptyRepoTest()", "testcase": true, "constructor": false, "invocations": ["start"]}, "focal_class": {"identifier": "GitWorkflowRepository", "superclass": "extends FileBasedWorkflowRepository", "interfaces": "implements WorkflowRepository, FileBasedWorkflowRepositoryMXBean", "fields": [{"original_string": "public static final String ORIGIN = \"origin\";", "modifier": "public static final", "type": "String", "declarator": "ORIGIN = \"origin\"", "var_name": "ORIGIN"}, {"original_string": "public static final String DEFAULT_BRANCH = \"master\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_BRANCH = \"master\"", "var_name": "DEFAULT_BRANCH"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(GitWorkflowRepository.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(GitWorkflowRepository.class)", "var_name": "logger"}, {"original_string": "private String originUri;", "modifier": "private", "type": "String", "declarator": "originUri", "var_name": "originUri"}, {"original_string": "private String branch = DEFAULT_BRANCH;", "modifier": "private", "type": "String", "declarator": "branch = DEFAULT_BRANCH", "var_name": "branch"}, {"original_string": "private File gitRepositoryDir;", "modifier": "private", "type": "File", "declarator": "gitRepositoryDir", "var_name": "gitRepositoryDir"}, {"original_string": "private CredentialsProvider credentialsProvider;", "modifier": "private", "type": "CredentialsProvider", "declarator": "credentialsProvider", "var_name": "credentialsProvider"}, {"original_string": "private int checkIntervalMSecGit = 5000;", "modifier": "private", "type": "int", "declarator": "checkIntervalMSecGit = 5000", "var_name": "checkIntervalMSecGit"}, {"original_string": "private AtomicBoolean gitObserverStopped;", "modifier": "private", "type": "AtomicBoolean", "declarator": "gitObserverStopped", "var_name": "gitObserverStopped"}, {"original_string": "private Thread observerThread;", "modifier": "private", "type": "Thread", "declarator": "observerThread", "var_name": "observerThread"}], "methods": [{"identifier": "setGitRepositoryDir", "parameters": "(File gitRepositoryDir)", "modifiers": "public synchronized", "return": "void", "signature": "void setGitRepositoryDir(File gitRepositoryDir)", "full_signature": "public synchronized void setGitRepositoryDir(File gitRepositoryDir)", "class_method_signature": "GitWorkflowRepository.setGitRepositoryDir(File gitRepositoryDir)", "testcase": false, "constructor": false}, {"identifier": "setGitRepositoryDir", "parameters": "(String gitRepositoryDir)", "modifiers": "public synchronized", "return": "void", "signature": "void setGitRepositoryDir(String gitRepositoryDir)", "full_signature": "public synchronized void setGitRepositoryDir(String gitRepositoryDir)", "class_method_signature": "GitWorkflowRepository.setGitRepositoryDir(String gitRepositoryDir)", "testcase": false, "constructor": false}, {"identifier": "getGitRepositoryDir", "parameters": "()", "modifiers": "public synchronized", "return": "File", "signature": "File getGitRepositoryDir()", "full_signature": "public synchronized File getGitRepositoryDir()", "class_method_signature": "GitWorkflowRepository.getGitRepositoryDir()", "testcase": false, "constructor": false}, {"identifier": "getOriginUri", "parameters": "()", "modifiers": "public synchronized", "return": "String", "signature": "String getOriginUri()", "full_signature": "public synchronized String getOriginUri()", "class_method_signature": "GitWorkflowRepository.getOriginUri()", "testcase": false, "constructor": false}, {"identifier": "getBranch", "parameters": "()", "modifiers": "public synchronized", "return": "String", "signature": "String getBranch()", "full_signature": "public synchronized String getBranch()", "class_method_signature": "GitWorkflowRepository.getBranch()", "testcase": false, "constructor": false}, {"identifier": "setOriginURI", "parameters": "(String originUri)", "modifiers": "public synchronized", "return": "void", "signature": "void setOriginURI(String originUri)", "full_signature": "public synchronized void setOriginURI(String originUri)", "class_method_signature": "GitWorkflowRepository.setOriginURI(String originUri)", "testcase": false, "constructor": false}, {"identifier": "setCredentials", "parameters": "(String username, char[] password)", "modifiers": "public synchronized", "return": "void", "signature": "void setCredentials(String username, char[] password)", "full_signature": "public synchronized void setCredentials(String username, char[] password)", "class_method_signature": "GitWorkflowRepository.setCredentials(String username, char[] password)", "testcase": false, "constructor": false}, {"identifier": "setBranch", "parameters": "(String branch)", "modifiers": "public synchronized", "return": "void", "signature": "void setBranch(String branch)", "full_signature": "public synchronized void setBranch(String branch)", "class_method_signature": "GitWorkflowRepository.setBranch(String branch)", "testcase": false, "constructor": false}, {"identifier": "setCheckIntervalMSec", "parameters": "(int checkIntervalMSec)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void setCheckIntervalMSec(int checkIntervalMSec)", "full_signature": "@Override public synchronized void setCheckIntervalMSec(int checkIntervalMSec)", "class_method_signature": "GitWorkflowRepository.setCheckIntervalMSec(int checkIntervalMSec)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void start()", "full_signature": "@Override public synchronized void start()", "class_method_signature": "GitWorkflowRepository.start()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public synchronized void shutdown()", "class_method_signature": "GitWorkflowRepository.shutdown()", "testcase": false, "constructor": false}, {"identifier": "isUp", "parameters": "()", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean isUp()", "full_signature": "public synchronized boolean isUp()", "class_method_signature": "GitWorkflowRepository.isUp()", "testcase": false, "constructor": false}, {"identifier": "updateLocalGitRepositories", "parameters": "()", "modifiers": "protected synchronized", "return": "void", "signature": "void updateLocalGitRepositories()", "full_signature": "protected synchronized void updateLocalGitRepositories()", "class_method_signature": "GitWorkflowRepository.updateLocalGitRepositories()", "testcase": false, "constructor": false}, {"identifier": "deleteGitRepositoryDir", "parameters": "()", "modifiers": "protected synchronized", "return": "void", "signature": "void deleteGitRepositoryDir()", "full_signature": "protected synchronized void deleteGitRepositoryDir()", "class_method_signature": "GitWorkflowRepository.deleteGitRepositoryDir()", "testcase": false, "constructor": false}], "file": "projects/copper-ext/src/main/java/org/copperengine/ext/wfrepo/git/GitWorkflowRepository.java"}, "focal_method": {"identifier": "start", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n    public synchronized void start() {\n        logger.info(\"Starting git workflow repository.\");\n        if (gitObserverStopped != null)\n            throw new IllegalStateException(\"Git workflow repository can only be startet once.\");\n        try {\n            updateLocalGitRepositories();\n        } catch (Exception e) {\n            throw new GitWorkflowRepositoryException(\"Exception while initial update of it workflow repository.\", e);\n        }\n        this.gitObserverStopped = new AtomicBoolean(false);\n        observerThread = new GitWorkflowRepository.ObserverThread(this);\n        observerThread.start();\n        super.start();\n    }", "signature": "void start()", "full_signature": "@Override public synchronized void start()", "class_method_signature": "GitWorkflowRepository.start()", "testcase": false, "constructor": false, "invocations": ["info", "updateLocalGitRepositories", "start", "start"]}, "repository": {"repo_id": 15008570, "url": "https://github.com/copper-engine/copper-engine", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 169, "size": 122984, "license": "licensed"}}