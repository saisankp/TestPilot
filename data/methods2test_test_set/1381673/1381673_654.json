{"test_class": {"identifier": "MeetsFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MeetsFunction meetsFunction;", "modifier": "private", "type": "MeetsFunction", "declarator": "meetsFunction", "var_name": "meetsFunction"}], "file": "kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/runtime/functions/interval/MeetsFunctionTest.java"}, "test_case": {"identifier": "invokeParamIsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invokeParamIsNull() {\n        FunctionTestUtil.assertResultError( meetsFunction.invoke((Range) null, (Range) new RangeImpl() ), InvalidParametersEvent.class );\n        FunctionTestUtil.assertResultError( meetsFunction.invoke((Range) new RangeImpl(), (Range) null ), InvalidParametersEvent.class );\n    }", "signature": "void invokeParamIsNull()", "full_signature": "@Test public void invokeParamIsNull()", "class_method_signature": "MeetsFunctionTest.invokeParamIsNull()", "testcase": true, "constructor": false, "invocations": ["assertResultError", "invoke", "assertResultError", "invoke"]}, "focal_class": {"identifier": "MeetsFunction", "superclass": "extends BaseFEELFunction", "interfaces": "", "fields": [{"original_string": "public static final MeetsFunction INSTANCE = new MeetsFunction();", "modifier": "public static final", "type": "MeetsFunction", "declarator": "INSTANCE = new MeetsFunction()", "var_name": "INSTANCE"}], "methods": [{"identifier": "MeetsFunction", "parameters": "()", "modifiers": "public", "return": "", "signature": " MeetsFunction()", "full_signature": "public  MeetsFunction()", "class_method_signature": "MeetsFunction.MeetsFunction()", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(@ParameterName( \"range1\" ) Range range1, @ParameterName( \"range2\" ) Range range2)", "modifiers": "public", "return": "FEELFnResult<Boolean>", "signature": "FEELFnResult<Boolean> invoke(@ParameterName( \"range1\" ) Range range1, @ParameterName( \"range2\" ) Range range2)", "full_signature": "public FEELFnResult<Boolean> invoke(@ParameterName( \"range1\" ) Range range1, @ParameterName( \"range2\" ) Range range2)", "class_method_signature": "MeetsFunction.invoke(@ParameterName( \"range1\" ) Range range1, @ParameterName( \"range2\" ) Range range2)", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/functions/interval/MeetsFunction.java"}, "focal_method": {"identifier": "invoke", "parameters": "(@ParameterName( \"range1\" ) Range range1, @ParameterName( \"range2\" ) Range range2)", "modifiers": "public", "return": "FEELFnResult<Boolean>", "body": "public FEELFnResult<Boolean> invoke(@ParameterName( \"range1\" ) Range range1, @ParameterName( \"range2\" ) Range range2) {\n        if ( range1 == null ) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"range1\", \"cannot be null\"));\n        }\n        if ( range2 == null ) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"range2\", \"cannot be null\"));\n        }\n        try {\n            boolean result = range1.getHighBoundary() == Range.RangeBoundary.CLOSED &&\n                             range2.getLowBoundary() == Range.RangeBoundary.CLOSED &&\n                             range1.getHighEndPoint().compareTo(range2.getLowEndPoint()) == 0;\n            return FEELFnResult.ofResult( result );\n        } catch( Exception e ) {\n            // values are not comparable\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"range1\", \"cannot be compared to range2\"));\n        }\n    }", "signature": "FEELFnResult<Boolean> invoke(@ParameterName( \"range1\" ) Range range1, @ParameterName( \"range2\" ) Range range2)", "full_signature": "public FEELFnResult<Boolean> invoke(@ParameterName( \"range1\" ) Range range1, @ParameterName( \"range2\" ) Range range2)", "class_method_signature": "MeetsFunction.invoke(@ParameterName( \"range1\" ) Range range1, @ParameterName( \"range2\" ) Range range2)", "testcase": false, "constructor": false, "invocations": ["ofError", "ofError", "getHighBoundary", "getLowBoundary", "compareTo", "getHighEndPoint", "getLowEndPoint", "ofResult", "ofError"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}