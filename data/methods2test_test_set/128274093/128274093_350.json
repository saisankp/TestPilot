{"test_class": {"identifier": "SingleToObservableTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/single/SingleToObservableTest.java"}, "test_case": {"identifier": "dispose", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void dispose() {\n        TestHelper.checkDisposed(PublishSubject.create().singleOrError().toObservable());\n    }", "signature": "void dispose()", "full_signature": "@Test public void dispose()", "class_method_signature": "SingleToObservableTest.dispose()", "testcase": true, "constructor": false, "invocations": ["checkDisposed", "toObservable", "singleOrError", "create"]}, "focal_class": {"identifier": "SingleToObservable", "superclass": "extends Observable<T>", "interfaces": "", "fields": [{"original_string": "final SingleSource<? extends T> source;", "modifier": "final", "type": "SingleSource<? extends T>", "declarator": "source", "var_name": "source"}], "methods": [{"identifier": "SingleToObservable", "parameters": "(SingleSource<? extends T> source)", "modifiers": "public", "return": "", "signature": " SingleToObservable(SingleSource<? extends T> source)", "full_signature": "public  SingleToObservable(SingleSource<? extends T> source)", "class_method_signature": "SingleToObservable.SingleToObservable(SingleSource<? extends T> source)", "testcase": false, "constructor": true}, {"identifier": "subscribeActual", "parameters": "(final Observer<? super T> s)", "modifiers": "@Override public", "return": "void", "signature": "void subscribeActual(final Observer<? super T> s)", "full_signature": "@Override public void subscribeActual(final Observer<? super T> s)", "class_method_signature": "SingleToObservable.subscribeActual(final Observer<? super T> s)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Observer<? super T> downstream)", "modifiers": "@Experimental public static", "return": "SingleObserver<T>", "signature": "SingleObserver<T> create(Observer<? super T> downstream)", "full_signature": "@Experimental public static SingleObserver<T> create(Observer<? super T> downstream)", "class_method_signature": "SingleToObservable.create(Observer<? super T> downstream)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/single/SingleToObservable.java"}, "focal_method": {"identifier": "create", "parameters": "(Observer<? super T> downstream)", "modifiers": "@Experimental public static", "return": "SingleObserver<T>", "body": "@Experimental\n    public static <T> SingleObserver<T> create(Observer<? super T> downstream) {\n        return new SingleToObservableObserver<T>(downstream);\n    }", "signature": "SingleObserver<T> create(Observer<? super T> downstream)", "full_signature": "@Experimental public static SingleObserver<T> create(Observer<? super T> downstream)", "class_method_signature": "SingleToObservable.create(Observer<? super T> downstream)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}