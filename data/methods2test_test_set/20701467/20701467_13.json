{"test_class": {"identifier": "PacketDispatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private PacketProcessingService packetProcessingService;", "modifier": "@Mock\n    private", "type": "PacketProcessingService", "declarator": "packetProcessingService", "var_name": "packetProcessingService"}, {"original_string": "@Mock\n    private InventoryReader inventoryReader;", "modifier": "@Mock\n    private", "type": "InventoryReader", "declarator": "inventoryReader", "var_name": "inventoryReader"}, {"original_string": "private PacketDispatcher packetDispatcher;", "modifier": "private", "type": "PacketDispatcher", "declarator": "packetDispatcher", "var_name": "packetDispatcher"}], "file": "arphandler/src/test/java/org/opendaylight/l2switch/arphandler/core/PacketDispatcherTest.java"}, "test_case": {"identifier": "testSendPacketOut_NullIngress", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSendPacketOut_NullIngress() throws Exception {\n        packetDispatcher.sendPacketOut(null, null,\n                new NodeConnectorRef(InstanceIdentifier.create(NodeConnector.class)));\n        verify(packetProcessingService, times(0)).transmitPacket(any(TransmitPacketInput.class));\n    }", "signature": "void testSendPacketOut_NullIngress()", "full_signature": "@Test public void testSendPacketOut_NullIngress()", "class_method_signature": "PacketDispatcherTest.testSendPacketOut_NullIngress()", "testcase": true, "constructor": false, "invocations": ["sendPacketOut", "create", "transmitPacket", "verify", "times", "any"]}, "focal_class": {"identifier": "PacketDispatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PacketDispatcher.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PacketDispatcher.class)", "var_name": "LOG"}, {"original_string": "private InventoryReader inventoryReader;", "modifier": "private", "type": "InventoryReader", "declarator": "inventoryReader", "var_name": "inventoryReader"}, {"original_string": "private PacketProcessingService packetProcessingService;", "modifier": "private", "type": "PacketProcessingService", "declarator": "packetProcessingService", "var_name": "packetProcessingService"}], "methods": [{"identifier": "setPacketProcessingService", "parameters": "(PacketProcessingService packetProcessingService)", "modifiers": "public", "return": "void", "signature": "void setPacketProcessingService(PacketProcessingService packetProcessingService)", "full_signature": "public void setPacketProcessingService(PacketProcessingService packetProcessingService)", "class_method_signature": "PacketDispatcher.setPacketProcessingService(PacketProcessingService packetProcessingService)", "testcase": false, "constructor": false}, {"identifier": "setInventoryReader", "parameters": "(InventoryReader inventoryReader)", "modifiers": "public", "return": "void", "signature": "void setInventoryReader(InventoryReader inventoryReader)", "full_signature": "public void setInventoryReader(InventoryReader inventoryReader)", "class_method_signature": "PacketDispatcher.setInventoryReader(InventoryReader inventoryReader)", "testcase": false, "constructor": false}, {"identifier": "dispatchPacket", "parameters": "(byte[] payload, NodeConnectorRef ingress, MacAddress srcMac, MacAddress destMac)", "modifiers": "public", "return": "void", "signature": "void dispatchPacket(byte[] payload, NodeConnectorRef ingress, MacAddress srcMac, MacAddress destMac)", "full_signature": "public void dispatchPacket(byte[] payload, NodeConnectorRef ingress, MacAddress srcMac, MacAddress destMac)", "class_method_signature": "PacketDispatcher.dispatchPacket(byte[] payload, NodeConnectorRef ingress, MacAddress srcMac, MacAddress destMac)", "testcase": false, "constructor": false}, {"identifier": "floodPacket", "parameters": "(String nodeId, byte[] payload, NodeConnectorRef origIngress,\n            NodeConnectorRef controllerNodeConnector)", "modifiers": "public", "return": "void", "signature": "void floodPacket(String nodeId, byte[] payload, NodeConnectorRef origIngress,\n            NodeConnectorRef controllerNodeConnector)", "full_signature": "public void floodPacket(String nodeId, byte[] payload, NodeConnectorRef origIngress,\n            NodeConnectorRef controllerNodeConnector)", "class_method_signature": "PacketDispatcher.floodPacket(String nodeId, byte[] payload, NodeConnectorRef origIngress,\n            NodeConnectorRef controllerNodeConnector)", "testcase": false, "constructor": false}, {"identifier": "sendPacketOut", "parameters": "(byte[] payload, NodeConnectorRef ingress, NodeConnectorRef egress)", "modifiers": "public", "return": "void", "signature": "void sendPacketOut(byte[] payload, NodeConnectorRef ingress, NodeConnectorRef egress)", "full_signature": "public void sendPacketOut(byte[] payload, NodeConnectorRef ingress, NodeConnectorRef egress)", "class_method_signature": "PacketDispatcher.sendPacketOut(byte[] payload, NodeConnectorRef ingress, NodeConnectorRef egress)", "testcase": false, "constructor": false}, {"identifier": "refreshInventoryReader", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshInventoryReader()", "full_signature": "private void refreshInventoryReader()", "class_method_signature": "PacketDispatcher.refreshInventoryReader()", "testcase": false, "constructor": false}, {"identifier": "getNodePath", "parameters": "(final InstanceIdentifier<?> nodeChild)", "modifiers": "private", "return": "InstanceIdentifier<Node>", "signature": "InstanceIdentifier<Node> getNodePath(final InstanceIdentifier<?> nodeChild)", "full_signature": "private InstanceIdentifier<Node> getNodePath(final InstanceIdentifier<?> nodeChild)", "class_method_signature": "PacketDispatcher.getNodePath(final InstanceIdentifier<?> nodeChild)", "testcase": false, "constructor": false}], "file": "arphandler/src/main/java/org/opendaylight/l2switch/arphandler/core/PacketDispatcher.java"}, "focal_method": {"identifier": "sendPacketOut", "parameters": "(byte[] payload, NodeConnectorRef ingress, NodeConnectorRef egress)", "modifiers": "public", "return": "void", "body": "public void sendPacketOut(byte[] payload, NodeConnectorRef ingress, NodeConnectorRef egress) {\n        if (ingress == null || egress == null) {\n            return;\n        }\n        InstanceIdentifier<Node> egressNodePath = getNodePath(egress.getValue());\n        TransmitPacketInput input = new TransmitPacketInputBuilder() //\n                .setPayload(payload) //\n                .setNode(new NodeRef(egressNodePath)) //\n                .setEgress(egress) //\n                .setIngress(ingress) //\n                .build();\n\n        Futures.addCallback(JdkFutureAdapters.listenInPoolThread(packetProcessingService.transmitPacket(input)),\n            new FutureCallback<RpcResult<Void>>() {\n                @Override\n                public void onSuccess(RpcResult<Void> result) {\n                    LOG.debug(\"transmitPacket was successful\");\n                }\n\n                @Override\n                public void onFailure(Throwable failure) {\n                    LOG.debug(\"transmitPacket for {} failed\", input, failure);\n                }\n            }, MoreExecutors.directExecutor());\n    }", "signature": "void sendPacketOut(byte[] payload, NodeConnectorRef ingress, NodeConnectorRef egress)", "full_signature": "public void sendPacketOut(byte[] payload, NodeConnectorRef ingress, NodeConnectorRef egress)", "class_method_signature": "PacketDispatcher.sendPacketOut(byte[] payload, NodeConnectorRef ingress, NodeConnectorRef egress)", "testcase": false, "constructor": false, "invocations": ["getNodePath", "getValue", "build", "setIngress", "setEgress", "setNode", "setPayload", "addCallback", "listenInPoolThread", "transmitPacket", "debug", "debug", "directExecutor"]}, "repository": {"repo_id": 20701467, "url": "https://github.com/opendaylight/l2switch", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 25, "size": 4178, "license": "licensed"}}