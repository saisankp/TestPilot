{"test_class": {"identifier": "LiquidTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/osip-model/src/test/java/edu/kit/pse/osip/core/model/base/LiquidTest.java"}, "test_case": {"identifier": "testHashcode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHashcode() {\n        Liquid liquid1 = new Liquid(1, SimulationConstants.MIN_TEMPERATURE, new Color(1, 1, 1));\n        Liquid liquid2 = new Liquid(1, SimulationConstants.MIN_TEMPERATURE, new Color(1, 1, 1));\n        assertEquals(liquid1.hashCode(), liquid2.hashCode());\n\n        liquid2 = new Liquid(2, SimulationConstants.MIN_TEMPERATURE, new Color(1, 1, 1));\n        assertNotEquals(liquid1.hashCode(), liquid2.hashCode());\n\n        liquid2 = new Liquid(1, SimulationConstants.MAX_TEMPERATURE, new Color(1, 1, 1));\n        assertNotEquals(liquid1.hashCode(), liquid2.hashCode());\n    }", "signature": "void testHashcode()", "full_signature": "@Test public void testHashcode()", "class_method_signature": "LiquidTest.testHashcode()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "hashCode", "hashCode", "assertNotEquals", "hashCode", "hashCode", "assertNotEquals", "hashCode", "hashCode"]}, "focal_class": {"identifier": "Liquid", "superclass": "", "interfaces": "", "fields": [{"original_string": "private float amount;", "modifier": "private", "type": "float", "declarator": "amount", "var_name": "amount"}, {"original_string": "private float temperature;", "modifier": "private", "type": "float", "declarator": "temperature", "var_name": "temperature"}, {"original_string": "private Color color;", "modifier": "private", "type": "Color", "declarator": "color", "var_name": "color"}], "methods": [{"identifier": "Liquid", "parameters": "(float amount, float temperature, Color color)", "modifiers": "public", "return": "", "signature": " Liquid(float amount, float temperature, Color color)", "full_signature": "public  Liquid(float amount, float temperature, Color color)", "class_method_signature": "Liquid.Liquid(float amount, float temperature, Color color)", "testcase": false, "constructor": true}, {"identifier": "getColor", "parameters": "()", "modifiers": "public final", "return": "Color", "signature": "Color getColor()", "full_signature": "public final Color getColor()", "class_method_signature": "Liquid.getColor()", "testcase": false, "constructor": false}, {"identifier": "getTemperature", "parameters": "()", "modifiers": "public final", "return": "float", "signature": "float getTemperature()", "full_signature": "public final float getTemperature()", "class_method_signature": "Liquid.getTemperature()", "testcase": false, "constructor": false}, {"identifier": "getAmount", "parameters": "()", "modifiers": "public final", "return": "float", "signature": "float getAmount()", "full_signature": "public final float getAmount()", "class_method_signature": "Liquid.getAmount()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "Liquid.equals(Object other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Liquid.hashCode()", "testcase": false, "constructor": false}], "file": "src/osip-model/src/main/java/edu/kit/pse/osip/core/model/base/Liquid.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int hashCode() {\n        int result = 17; /* prime number! */\n        result = 31 * result + (int) (amount * 100); /* *100 to get a different hashcode if the amount differs only\n                                                        after the decimal point */\n        result = 31 * result + (int) (temperature * 100);\n        result = 31 * result + color.hashCode();\n        return result;\n    }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Liquid.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode"]}, "repository": {"repo_id": 74042107, "url": "https://github.com/ByteHamster/PSE", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 18396, "license": "licensed"}}