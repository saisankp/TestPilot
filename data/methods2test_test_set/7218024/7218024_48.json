{"test_class": {"identifier": "TestCopyCommitter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(TestCopyCommitter.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(TestCopyCommitter.class)", "var_name": "LOG"}, {"original_string": "private static final Random rand = new Random();", "modifier": "private static final", "type": "Random", "declarator": "rand = new Random()", "var_name": "rand"}, {"original_string": "private static final Counters EMPTY_COUNTERS = new Counters();", "modifier": "private static final", "type": "Counters", "declarator": "EMPTY_COUNTERS = new Counters()", "var_name": "EMPTY_COUNTERS"}, {"original_string": "private static final Credentials CREDENTIALS = new Credentials();", "modifier": "private static final", "type": "Credentials", "declarator": "CREDENTIALS = new Credentials()", "var_name": "CREDENTIALS"}, {"original_string": "private static Configuration config;", "modifier": "private static", "type": "Configuration", "declarator": "config", "var_name": "config"}, {"original_string": "private static MiniDFSCluster cluster;", "modifier": "private static", "type": "MiniDFSCluster", "declarator": "cluster", "var_name": "cluster"}, {"original_string": "private static CounterProvider counterProvider;", "modifier": "private static", "type": "CounterProvider", "declarator": "counterProvider", "var_name": "counterProvider"}], "file": "conduit-distcp/src/test/java/com/inmobi/conduit/distcp/tools/mapred/TestCopyCommitter.java"}, "test_case": {"identifier": "testDeleteMissing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDeleteMissing() {\n    TaskAttemptContext taskAttemptContext = getTaskAttemptContext(config);\n    JobContext jobContext = Mockito.mock(JobContext.class);\n    Mockito.when(jobContext.getConfiguration()).thenReturn(config);\n    JobID jobID = new JobID();\n    Mockito.when(jobContext.getJobID()).thenReturn(jobID);\n    Configuration conf = jobContext.getConfiguration();\n\n\n    String sourceBase;\n    String targetBase;\n    FileSystem fs = null;\n    try {\n      OutputCommitter committer = new CopyCommitter(null, taskAttemptContext);\n      fs = FileSystem.get(conf);\n      sourceBase = TestDistCpUtils.createTestSetup(fs, FsPermission.getDefault());\n      targetBase = TestDistCpUtils.createTestSetup(fs, FsPermission.getDefault());\n      String targetBaseAdd = TestDistCpUtils.createTestSetup(fs, FsPermission.getDefault());\n      fs.rename(new Path(targetBaseAdd), new Path(targetBase));\n\n      DistCpOptions options = new DistCpOptions(Arrays.asList(new Path(sourceBase)),\n        new Path(\"/out\"));\n      options.setSyncFolder(true);\n      options.setDeleteMissing(true);\n      options.appendToConf(conf);\n\n      CopyListing listing = new GlobbedCopyListing(conf, CREDENTIALS);\n      Path listingFile = new Path(\"/tmp1/\" + String.valueOf(rand.nextLong()));\n      listing.buildListing(listingFile, options);\n\n      conf.set(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH, targetBase);\n      conf.set(DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH, targetBase);\n\n      committer.commitJob(jobContext);\n      if (!TestDistCpUtils.checkIfFoldersAreInSync(fs, targetBase, sourceBase)) {\n        Assert.fail(\"Source and target folders are not in sync\");\n      }\n      if (!TestDistCpUtils.checkIfFoldersAreInSync(fs, sourceBase, targetBase)) {\n        Assert.fail(\"Source and target folders are not in sync\");\n      }\n\n      //Test for idempotent commit\n      committer.commitJob(jobContext);\n      if (!TestDistCpUtils.checkIfFoldersAreInSync(fs, targetBase, sourceBase)) {\n        Assert.fail(\"Source and target folders are not in sync\");\n      }\n      if (!TestDistCpUtils.checkIfFoldersAreInSync(fs, sourceBase, targetBase)) {\n        Assert.fail(\"Source and target folders are not in sync\");\n      }\n    } catch (Throwable e) {\n      LOG.error(\"Exception encountered while testing for delete missing\", e);\n      Assert.fail(\"Delete missing failure\");\n    } finally {\n      TestDistCpUtils.delete(fs, \"/tmp1\");\n    }\n\n  }", "signature": "void testDeleteMissing()", "full_signature": "@Test public void testDeleteMissing()", "class_method_signature": "TestCopyCommitter.testDeleteMissing()", "testcase": true, "constructor": false, "invocations": ["getTaskAttemptContext", "mock", "thenReturn", "when", "getConfiguration", "thenReturn", "when", "getJobID", "getConfiguration", "get", "createTestSetup", "getDefault", "createTestSetup", "getDefault", "createTestSetup", "getDefault", "rename", "asList", "setSyncFolder", "setDeleteMissing", "appendToConf", "valueOf", "nextLong", "buildListing", "set", "set", "commitJob", "checkIfFoldersAreInSync", "fail", "checkIfFoldersAreInSync", "fail", "commitJob", "checkIfFoldersAreInSync", "fail", "checkIfFoldersAreInSync", "fail", "error", "fail", "delete"]}, "focal_class": {"identifier": "CopyCommitter", "superclass": "extends FileOutputCommitter", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(CopyCommitter.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(CopyCommitter.class)", "var_name": "LOG"}, {"original_string": "private final TaskAttemptContext taskAttemptContext;", "modifier": "private final", "type": "TaskAttemptContext", "declarator": "taskAttemptContext", "var_name": "taskAttemptContext"}], "methods": [{"identifier": "CopyCommitter", "parameters": "(Path outputPath, TaskAttemptContext context)", "modifiers": "public", "return": "", "signature": " CopyCommitter(Path outputPath, TaskAttemptContext context)", "full_signature": "public  CopyCommitter(Path outputPath, TaskAttemptContext context)", "class_method_signature": "CopyCommitter.CopyCommitter(Path outputPath, TaskAttemptContext context)", "testcase": false, "constructor": true}, {"identifier": "commitJob", "parameters": "(JobContext jobContext)", "modifiers": "@Override public", "return": "void", "signature": "void commitJob(JobContext jobContext)", "full_signature": "@Override public void commitJob(JobContext jobContext)", "class_method_signature": "CopyCommitter.commitJob(JobContext jobContext)", "testcase": false, "constructor": false}, {"identifier": "abortJob", "parameters": "(JobContext jobContext,\n                       JobStatus.State state)", "modifiers": "@Override public", "return": "void", "signature": "void abortJob(JobContext jobContext,\n                       JobStatus.State state)", "full_signature": "@Override public void abortJob(JobContext jobContext,\n                       JobStatus.State state)", "class_method_signature": "CopyCommitter.abortJob(JobContext jobContext,\n                       JobStatus.State state)", "testcase": false, "constructor": false}, {"identifier": "cleanupTempFiles", "parameters": "(JobContext context)", "modifiers": "private", "return": "void", "signature": "void cleanupTempFiles(JobContext context)", "full_signature": "private void cleanupTempFiles(JobContext context)", "class_method_signature": "CopyCommitter.cleanupTempFiles(JobContext context)", "testcase": false, "constructor": false}, {"identifier": "deleteAttemptTempFiles", "parameters": "(Path targetWorkPath,\n                                      FileSystem targetFS,\n                                      String jobId)", "modifiers": "private", "return": "void", "signature": "void deleteAttemptTempFiles(Path targetWorkPath,\n                                      FileSystem targetFS,\n                                      String jobId)", "full_signature": "private void deleteAttemptTempFiles(Path targetWorkPath,\n                                      FileSystem targetFS,\n                                      String jobId)", "class_method_signature": "CopyCommitter.deleteAttemptTempFiles(Path targetWorkPath,\n                                      FileSystem targetFS,\n                                      String jobId)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "(Configuration conf)", "modifiers": "private", "return": "void", "signature": "void cleanup(Configuration conf)", "full_signature": "private void cleanup(Configuration conf)", "class_method_signature": "CopyCommitter.cleanup(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "preserveFileAttributes", "parameters": "(Configuration conf)", "modifiers": "private", "return": "void", "signature": "void preserveFileAttributes(Configuration conf)", "full_signature": "private void preserveFileAttributes(Configuration conf)", "class_method_signature": "CopyCommitter.preserveFileAttributes(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "deleteMissing", "parameters": "(Configuration conf)", "modifiers": "private", "return": "void", "signature": "void deleteMissing(Configuration conf)", "full_signature": "private void deleteMissing(Configuration conf)", "class_method_signature": "CopyCommitter.deleteMissing(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "commitData", "parameters": "(Configuration conf)", "modifiers": "private", "return": "void", "signature": "void commitData(Configuration conf)", "full_signature": "private void commitData(Configuration conf)", "class_method_signature": "CopyCommitter.commitData(Configuration conf)", "testcase": false, "constructor": false}], "file": "conduit-distcp/src/main/java/com/inmobi/conduit/distcp/tools/mapred/CopyCommitter.java"}, "focal_method": {"identifier": "deleteMissing", "parameters": "(Configuration conf)", "modifiers": "private", "return": "void", "body": "private void deleteMissing(Configuration conf) throws IOException {\n    LOG.info(\"-delete option is enabled. About to remove entries from \" +\n        \"target that are missing in source\");\n\n    Path sourceListing = new Path(conf.get(DistCpConstants.CONF_LABEL_LISTING_FILE_PATH));\n    FileSystem clusterFS = sourceListing.getFileSystem(conf);\n    Path sortedSourceListing = DistCpUtils.sortListing(clusterFS, conf, sourceListing);\n\n    Path targetListing = new Path(sourceListing.getParent(), \"targetListing.seq\");\n    CopyListing target = new GlobbedCopyListing(conf, null);\n\n    List<Path> targets = new ArrayList<Path>(1);\n    Path targetFinalPath = new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n    targets.add(targetFinalPath);\n    DistCpOptions options = new DistCpOptions(targets, new Path(\"/NONE\"));\n\n    target.buildListing(targetListing, options);\n    Path sortedTargetListing = DistCpUtils.sortListing(clusterFS, conf, targetListing);\n    long totalLen = clusterFS.getFileStatus(sortedTargetListing).getLen();\n\n    SequenceFile.Reader sourceReader = new SequenceFile.Reader(clusterFS, sortedSourceListing, conf);\n    SequenceFile.Reader targetReader = new SequenceFile.Reader(clusterFS, sortedTargetListing, conf);\n\n    long deletedEntries = 0;\n    try {\n      FileStatus srcFileStatus = new FileStatus();\n      Text srcRelPath = new Text();\n      FileStatus trgtFileStatus = new FileStatus();\n      Text trgtRelPath = new Text();\n\n      FileSystem targetFS = targetFinalPath.getFileSystem(conf);\n      boolean srcAvailable = sourceReader.next(srcRelPath, srcFileStatus);\n      while (targetReader.next(trgtRelPath, trgtFileStatus)) {\n        while (srcAvailable && trgtRelPath.compareTo(srcRelPath) > 0) {\n          srcAvailable = sourceReader.next(srcRelPath, srcFileStatus);\n        }\n\n        if (srcAvailable && trgtRelPath.equals(srcRelPath)) continue;\n\n        boolean result = (!targetFS.exists(trgtFileStatus.getPath()) ||\n            targetFS.delete(trgtFileStatus.getPath(), true));\n        if (result) {\n          LOG.info(\"Deleted \" + trgtFileStatus.getPath() + \" - Missing at source\");\n          deletedEntries++;\n        } else {\n          throw new IOException(\"Unable to delete \" + trgtFileStatus.getPath());\n        }\n        HadoopCompat.progress(taskAttemptContext);\n        HadoopCompat.setStatus(taskAttemptContext, \"Deleting missing files from target. [\" +\n          targetReader.getPosition() * 100 / totalLen + \"%]\");\n      }\n    } finally {\n      IOUtils.closeStream(sourceReader);\n      IOUtils.closeStream(targetReader);\n    }\n    LOG.info(\"Deleted \" + deletedEntries + \" from target: \" + targets.get(0));\n  }", "signature": "void deleteMissing(Configuration conf)", "full_signature": "private void deleteMissing(Configuration conf)", "class_method_signature": "CopyCommitter.deleteMissing(Configuration conf)", "testcase": false, "constructor": false, "invocations": ["info", "get", "getFileSystem", "sortListing", "getParent", "get", "add", "buildListing", "sortListing", "getLen", "getFileStatus", "getFileSystem", "next", "next", "compareTo", "next", "equals", "exists", "getPath", "delete", "getPath", "info", "getPath", "getPath", "progress", "setStatus", "getPosition", "closeStream", "closeStream", "info", "get"]}, "repository": {"repo_id": 7218024, "url": "https://github.com/InMobi/conduit", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 9, "size": 49400, "license": "licensed"}}