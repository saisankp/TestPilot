{"test_class": {"identifier": "ExecutorEventSchedulerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExecutorEventScheduler scheduler;", "modifier": "private", "type": "ExecutorEventScheduler", "declarator": "scheduler", "var_name": "scheduler"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/event/scheduling/ExecutorEventSchedulerTest.java"}, "test_case": {"identifier": "testGetQueueSize", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testGetQueueSize() {\n        Assertions.assertEquals(0, scheduler.getQueueSize());\n\n        scheduler.doAt(1000, Runnables.doNothing());\n        Assertions.assertEquals(1, scheduler.getQueueSize());\n    }", "signature": "void testGetQueueSize()", "full_signature": "@Test void testGetQueueSize()", "class_method_signature": "ExecutorEventSchedulerTest.testGetQueueSize()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getQueueSize", "doAt", "doNothing", "assertEquals", "getQueueSize"]}, "focal_class": {"identifier": "ExecutorEventScheduler", "superclass": "extends TypedEventScheduler", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ExecutorEventScheduler.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ExecutorEventScheduler.class)", "var_name": "logger"}, {"original_string": "private static final PlaceholderScheduledFuture PLACEHOLDER_FUTURE = new PlaceholderScheduledFuture();", "modifier": "private static final", "type": "PlaceholderScheduledFuture", "declarator": "PLACEHOLDER_FUTURE = new PlaceholderScheduledFuture()", "var_name": "PLACEHOLDER_FUTURE"}, {"original_string": "private final UtcTimeProvider timeProvider;", "modifier": "private final", "type": "UtcTimeProvider", "declarator": "timeProvider", "var_name": "timeProvider"}, {"original_string": "private final ScheduledThreadPoolExecutor executor;", "modifier": "private final", "type": "ScheduledThreadPoolExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "private final Set<Consumer<Throwable>> failureListeners = new HashSet<>();", "modifier": "private final", "type": "Set<Consumer<Throwable>>", "declarator": "failureListeners = new HashSet<>()", "var_name": "failureListeners"}, {"original_string": "private final Set<Consumer<RecoverableException>> recoverableFailureListeners = new HashSet<>();", "modifier": "private final", "type": "Set<Consumer<RecoverableException>>", "declarator": "recoverableFailureListeners = new HashSet<>()", "var_name": "recoverableFailureListeners"}, {"original_string": "private final Set<Runnable> onShutDowns = new HashSet<>();", "modifier": "private final", "type": "Set<Runnable>", "declarator": "onShutDowns = new HashSet<>()", "var_name": "onShutDowns"}, {"original_string": "private final Map<Event, ScheduledFuture<?>> eventsMap = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<Event, ScheduledFuture<?>>", "declarator": "eventsMap = new ConcurrentHashMap<>()", "var_name": "eventsMap"}, {"original_string": "private final long threadId;", "modifier": "private final", "type": "long", "declarator": "threadId", "var_name": "threadId"}, {"original_string": "private final AtomicBoolean failed = new AtomicBoolean(false);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "failed = new AtomicBoolean(false)", "var_name": "failed"}], "methods": [{"identifier": "ExecutorEventScheduler", "parameters": "(TimeProvider timeProvider, String name, boolean daemon, EventSchedulerType type)", "modifiers": "@Deprecated public", "return": "", "signature": " ExecutorEventScheduler(TimeProvider timeProvider, String name, boolean daemon, EventSchedulerType type)", "full_signature": "@Deprecated public  ExecutorEventScheduler(TimeProvider timeProvider, String name, boolean daemon, EventSchedulerType type)", "class_method_signature": "ExecutorEventScheduler.ExecutorEventScheduler(TimeProvider timeProvider, String name, boolean daemon, EventSchedulerType type)", "testcase": false, "constructor": true}, {"identifier": "ExecutorEventScheduler", "parameters": "(TimeUnit timeUnit, String name, boolean daemon, EventSchedulerType type)", "modifiers": "public", "return": "", "signature": " ExecutorEventScheduler(TimeUnit timeUnit, String name, boolean daemon, EventSchedulerType type)", "full_signature": "public  ExecutorEventScheduler(TimeUnit timeUnit, String name, boolean daemon, EventSchedulerType type)", "class_method_signature": "ExecutorEventScheduler.ExecutorEventScheduler(TimeUnit timeUnit, String name, boolean daemon, EventSchedulerType type)", "testcase": false, "constructor": true}, {"identifier": "ExecutorEventScheduler", "parameters": "(UtcTimeProvider timeProvider, String name, boolean daemon, EventSchedulerType type)", "modifiers": "public", "return": "", "signature": " ExecutorEventScheduler(UtcTimeProvider timeProvider, String name, boolean daemon, EventSchedulerType type)", "full_signature": "public  ExecutorEventScheduler(UtcTimeProvider timeProvider, String name, boolean daemon, EventSchedulerType type)", "class_method_signature": "ExecutorEventScheduler.ExecutorEventScheduler(UtcTimeProvider timeProvider, String name, boolean daemon, EventSchedulerType type)", "testcase": false, "constructor": true}, {"identifier": "doNow", "parameters": "(Runnable r, String description)", "modifiers": "@Override public", "return": "Cancelable", "signature": "Cancelable doNow(Runnable r, String description)", "full_signature": "@Override public Cancelable doNow(Runnable r, String description)", "class_method_signature": "ExecutorEventScheduler.doNow(Runnable r, String description)", "testcase": false, "constructor": false}, {"identifier": "doAt", "parameters": "(double time, Runnable r, String description, boolean isDaemon)", "modifiers": "@Override public", "return": "Cancelable", "signature": "Cancelable doAt(double time, Runnable r, String description, boolean isDaemon)", "full_signature": "@Override public Cancelable doAt(double time, Runnable r, String description, boolean isDaemon)", "class_method_signature": "ExecutorEventScheduler.doAt(double time, Runnable r, String description, boolean isDaemon)", "testcase": false, "constructor": false}, {"identifier": "doAt", "parameters": "(double eventTime, double now, Runnable r, String description, boolean isDaemon)", "modifiers": "private", "return": "Cancelable", "signature": "Cancelable doAt(double eventTime, double now, Runnable r, String description, boolean isDaemon)", "full_signature": "private Cancelable doAt(double eventTime, double now, Runnable r, String description, boolean isDaemon)", "class_method_signature": "ExecutorEventScheduler.doAt(double eventTime, double now, Runnable r, String description, boolean isDaemon)", "testcase": false, "constructor": false}, {"identifier": "hasOnlyDaemonEvents", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasOnlyDaemonEvents()", "full_signature": "@Override public boolean hasOnlyDaemonEvents()", "class_method_signature": "ExecutorEventScheduler.hasOnlyDaemonEvents()", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "(Event e)", "modifiers": "@Override public", "return": "void", "signature": "void cancel(Event e)", "full_signature": "@Override public void cancel(Event e)", "class_method_signature": "ExecutorEventScheduler.cancel(Event e)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "ExecutorEventScheduler.stop()", "testcase": false, "constructor": false}, {"identifier": "isStopped", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStopped()", "full_signature": "public boolean isStopped()", "class_method_signature": "ExecutorEventScheduler.isStopped()", "testcase": false, "constructor": false}, {"identifier": "getTimeProvider", "parameters": "()", "modifiers": "@Override public", "return": "TimeProvider", "signature": "TimeProvider getTimeProvider()", "full_signature": "@Override public TimeProvider getTimeProvider()", "class_method_signature": "ExecutorEventScheduler.getTimeProvider()", "testcase": false, "constructor": false}, {"identifier": "executeEvent", "parameters": "(Event event)", "modifiers": "private", "return": "void", "signature": "void executeEvent(Event event)", "full_signature": "private void executeEvent(Event event)", "class_method_signature": "ExecutorEventScheduler.executeEvent(Event event)", "testcase": false, "constructor": false}, {"identifier": "getThreadId", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getThreadId()", "full_signature": "@Override public long getThreadId()", "class_method_signature": "ExecutorEventScheduler.getThreadId()", "testcase": false, "constructor": false}, {"identifier": "getQueueSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getQueueSize()", "full_signature": "public int getQueueSize()", "class_method_signature": "ExecutorEventScheduler.getQueueSize()", "testcase": false, "constructor": false}, {"identifier": "registerFailureListener", "parameters": "(Consumer<Throwable> failureListener)", "modifiers": "public", "return": "void", "signature": "void registerFailureListener(Consumer<Throwable> failureListener)", "full_signature": "public void registerFailureListener(Consumer<Throwable> failureListener)", "class_method_signature": "ExecutorEventScheduler.registerFailureListener(Consumer<Throwable> failureListener)", "testcase": false, "constructor": false}, {"identifier": "registerOnShutDown", "parameters": "(Runnable onShutDown)", "modifiers": "public", "return": "void", "signature": "void registerOnShutDown(Runnable onShutDown)", "full_signature": "public void registerOnShutDown(Runnable onShutDown)", "class_method_signature": "ExecutorEventScheduler.registerOnShutDown(Runnable onShutDown)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/event/scheduling/ExecutorEventScheduler.java"}, "focal_method": {"identifier": "getQueueSize", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int getQueueSize() {\n        return executor.getQueue().size();\n    }", "signature": "int getQueueSize()", "full_signature": "public int getQueueSize()", "class_method_signature": "ExecutorEventScheduler.getQueueSize()", "testcase": false, "constructor": false, "invocations": ["size", "getQueue"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}