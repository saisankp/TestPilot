{"test_class": {"identifier": "ComparisonTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/tdunning/math/stats/ComparisonTest.java"}, "test_case": {"identifier": "compareLogHistograms", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void compareLogHistograms() {\n        Random r = new Random();\n        int failed = 0;\n\n        try {\n            Comparison.compareChi2(new LogHistogram(10e-6, 10), new LogHistogram(1e-6, 1));\n            fail(\"Should have detected incompatible histograms (lower bound)\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"Incompatible histograms in terms of size or bounds\", e.getMessage());\n        }\n        try {\n            Comparison.compareChi2(new LogHistogram(10e-6, 10), new LogHistogram(10e-6, 1));\n            fail(\"Should have detected incompatible histograms (size)\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"Incompatible histograms in terms of size or bounds\", e.getMessage());\n        }\n\n        for (int i = 0; i < 1000; i++) {\n            LogHistogram d1 = new LogHistogram(10e-6, 10);\n            LogHistogram d2 = new LogHistogram(10e-6, 10);\n            LogHistogram d3 = new LogHistogram(10e-6, 10);\n            for (int j = 0; j < 10000; j++) {\n                // these should look the same\n                d1.add(Math.exp(r.nextGaussian()));\n                d2.add(Math.exp(r.nextGaussian()));\n                // can we see a small difference\n                d3.add(Math.exp(r.nextGaussian() + 0.5));\n            }\n\n            // 144 degrees of freedom, Pr(llr > 250) < 1e-6\n            if (Comparison.compareChi2(d1, d2) > 250) {\n                failed++;\n            }\n\n            if (Comparison.compareChi2(d1, d3) < 1000) {\n                failed++;\n            }\n        }\n        assertEquals(0, failed, 5);\n    }", "signature": "void compareLogHistograms()", "full_signature": "@Test public void compareLogHistograms()", "class_method_signature": "ComparisonTest.compareLogHistograms()", "testcase": true, "constructor": false, "invocations": ["compareChi2", "fail", "assertEquals", "getMessage", "compareChi2", "fail", "assertEquals", "getMessage", "add", "exp", "nextGaussian", "add", "exp", "nextGaussian", "add", "exp", "nextGaussian", "compareChi2", "compareChi2", "assertEquals"]}, "focal_class": {"identifier": "Comparison", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "compareChi2", "parameters": "(TDigest dist1, TDigest dist2, double[] qCuts)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "double", "signature": "double compareChi2(TDigest dist1, TDigest dist2, double[] qCuts)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static double compareChi2(TDigest dist1, TDigest dist2, double[] qCuts)", "class_method_signature": "Comparison.compareChi2(TDigest dist1, TDigest dist2, double[] qCuts)", "testcase": false, "constructor": false}, {"identifier": "compareChi2", "parameters": "(Histogram dist1, Histogram dist2)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "double", "signature": "double compareChi2(Histogram dist1, Histogram dist2)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static double compareChi2(Histogram dist1, Histogram dist2)", "class_method_signature": "Comparison.compareChi2(Histogram dist1, Histogram dist2)", "testcase": false, "constructor": false}, {"identifier": "llr", "parameters": "(double[][] count)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "double", "signature": "double llr(double[][] count)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static double llr(double[][] count)", "class_method_signature": "Comparison.llr(double[][] count)", "testcase": false, "constructor": false}, {"identifier": "ks", "parameters": "(TDigest d1, TDigest d2)", "modifiers": "public static", "return": "double", "signature": "double ks(TDigest d1, TDigest d2)", "full_signature": "public static double ks(TDigest d1, TDigest d2)", "class_method_signature": "Comparison.ks(TDigest d1, TDigest d2)", "testcase": false, "constructor": false}, {"identifier": "maxDiff", "parameters": "(TDigest d1, TDigest d2, double diff, double x1)", "modifiers": "private static", "return": "double", "signature": "double maxDiff(TDigest d1, TDigest d2, double diff, double x1)", "full_signature": "private static double maxDiff(TDigest d1, TDigest d2, double diff, double x1)", "class_method_signature": "Comparison.maxDiff(TDigest d1, TDigest d2, double diff, double x1)", "testcase": false, "constructor": false}, {"identifier": "nextValue", "parameters": "(TDigest d, Iterator<Centroid> ix, double x)", "modifiers": "private static", "return": "double", "signature": "double nextValue(TDigest d, Iterator<Centroid> ix, double x)", "full_signature": "private static double nextValue(TDigest d, Iterator<Centroid> ix, double x)", "class_method_signature": "Comparison.nextValue(TDigest d, Iterator<Centroid> ix, double x)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/tdunning/math/stats/Comparison.java"}, "focal_method": {"identifier": "compareChi2", "parameters": "(TDigest dist1, TDigest dist2, double[] qCuts)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "double", "body": "@SuppressWarnings(\"WeakerAccess\")\n    public static double compareChi2(TDigest dist1, TDigest dist2, double[] qCuts) {\n        double[][] count = new double[2][];\n        count[0] = new double[qCuts.length + 1];\n        count[1] = new double[qCuts.length + 1];\n\n        double oldQ = 0;\n        double oldQ2 = 0;\n        for (int i = 0; i <= qCuts.length; i++) {\n            double newQ;\n            double x;\n            if (i == qCuts.length) {\n                newQ = 1;\n                x = Math.max(dist1.getMax(), dist2.getMax()) + 1;\n            } else {\n                newQ = qCuts[i];\n                x = dist1.quantile(newQ);\n            }\n            count[0][i] = dist1.size() * (newQ - oldQ);\n\n            double q2 = dist2.cdf(x);\n            count[1][i] = dist2.size() * (q2 - oldQ2);\n            oldQ = newQ;\n            oldQ2 = q2;\n        }\n\n        return llr(count);\n    }", "signature": "double compareChi2(TDigest dist1, TDigest dist2, double[] qCuts)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static double compareChi2(TDigest dist1, TDigest dist2, double[] qCuts)", "class_method_signature": "Comparison.compareChi2(TDigest dist1, TDigest dist2, double[] qCuts)", "testcase": false, "constructor": false, "invocations": ["max", "getMax", "getMax", "quantile", "size", "cdf", "size", "llr"]}, "repository": {"repo_id": 14509169, "url": "https://github.com/tdunning/t-digest", "language": "Java", "is_fork": false, "fork_count": 170, "stargazer_count": 1212, "size": 41644, "license": "licensed"}}