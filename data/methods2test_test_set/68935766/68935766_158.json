{"test_class": {"identifier": "ScribeMojoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MavenProject pom = mock(MavenProject.class);", "modifier": "", "type": "MavenProject", "declarator": "pom = mock(MavenProject.class)", "var_name": "pom"}, {"original_string": "Log log = mock(Log.class);", "modifier": "", "type": "Log", "declarator": "log = mock(Log.class)", "var_name": "log"}, {"original_string": "File folder = new File(getClass().getClassLoader().getResource(\"beacon.yml\").getFile()).getParentFile();", "modifier": "", "type": "File", "declarator": "folder = new File(getClass().getClassLoader().getResource(\"beacon.yml\").getFile()).getParentFile()", "var_name": "folder"}, {"original_string": "File file = new File(folder, \"plugin.yml\");", "modifier": "", "type": "File", "declarator": "file = new File(folder, \"plugin.yml\")", "var_name": "file"}, {"original_string": "ScribeMojo mojo;", "modifier": "", "type": "ScribeMojo", "declarator": "mojo", "var_name": "mojo"}], "file": "scribe/maven-plugin/src/test/java/com/karuslabs/scribe/maven/plugin/ScribeMojoTest.java"}, "test_case": {"identifier": "execute", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void execute() throws MojoFailureException {\n        doReturn(true).when(mojo).valid(any());\n        \n        mojo.execute();\n        \n        assertTrue(file.exists());\n    }", "signature": "void execute()", "full_signature": "@Test void execute()", "class_method_signature": "ScribeMojoTest.execute()", "testcase": true, "constructor": false, "invocations": ["valid", "when", "doReturn", "any", "execute", "assertTrue", "exists"]}, "focal_class": {"identifier": "ScribeMojo", "superclass": "extends AbstractMojo", "interfaces": "", "fields": [{"original_string": "@Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n    MavenProject pom;", "modifier": "@Parameter(defaultValue = \"${project}\", readonly = true, required = true)", "type": "MavenProject", "declarator": "pom", "var_name": "pom"}, {"original_string": "@Parameter(defaultValue = \"${project.compileClasspathElements}\", readonly = true, required = true)\n    List<String> classpaths;", "modifier": "@Parameter(defaultValue = \"${project.compileClasspathElements}\", readonly = true, required = true)", "type": "List<String>", "declarator": "classpaths", "var_name": "classpaths"}, {"original_string": "@Parameter(defaultValue = \"${project.basedir}/src/main/resources\")\n    File folder;", "modifier": "@Parameter(defaultValue = \"${project.basedir}/src/main/resources\")", "type": "File", "declarator": "folder", "var_name": "folder"}], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "ScribeMojo.execute()", "testcase": false, "constructor": false}, {"identifier": "project", "parameters": "()", "modifiers": "", "return": "Project", "signature": "Project project()", "full_signature": " Project project()", "class_method_signature": "ScribeMojo.project()", "testcase": false, "constructor": false}, {"identifier": "valid", "parameters": "(MavenEnvironment environment)", "modifiers": "", "return": "boolean", "signature": "boolean valid(MavenEnvironment environment)", "full_signature": " boolean valid(MavenEnvironment environment)", "class_method_signature": "ScribeMojo.valid(MavenEnvironment environment)", "testcase": false, "constructor": false}], "file": "scribe/maven-plugin/src/main/java/com/karuslabs/scribe/maven/plugin/ScribeMojo.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute() throws MojoFailureException {\n        var graph = new ClassGraph().enableClassInfo().enableAnnotationInfo().addClassLoader(Processor.loader(classpaths));\n        var environment = new MavenEnvironment(project());\n        \n        try (var processor = new MavenProcessor(environment, graph)) {   \n            processor.run();\n            \n            if (valid(environment)) {\n                var yaml = YAML.fromFile(\"Scribe Maven Plugin\", new File(folder, \"plugin.yml\"));\n                yaml.write(environment.mappings);\n\n            } else {\n                throw new MojoFailureException(\"Could not resolve annotations\");\n            }\n        }\n    }", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "ScribeMojo.execute()", "testcase": false, "constructor": false, "invocations": ["addClassLoader", "enableAnnotationInfo", "enableClassInfo", "loader", "project", "run", "valid", "fromFile", "write"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}