{"test_class": {"identifier": "OrdinalSmellTypeAnalysisTest", "superclass": "extends SmellTypeAnalysisTestCase", "interfaces": "", "fields": [], "file": "SmellTracker/src/test/java/fr/inria/sniffer/tracker/analysis/query/smell/OrdinalSmellTypeAnalysisTest.java"}, "test_case": {"identifier": "handlePresenceAndIntroductionOnSingleCommitAlsoLastCommit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void handlePresenceAndIntroductionOnSingleCommitAlsoLastCommit() throws QueryException {\n        addSmell(firstCommit, firstSmell);\n\n        mockEndCommit(firstCommit.sha);\n        getAnalysis().query();\n        debugSmellInsertions();\n\n        verify(persistence, times(1)).execute(any());\n        verify(smellQueries).smellInsertionStatement(projectId, firstSmell);\n\n        verify(persistence, times(2)).addStatements(any());\n        verify(smellQueries).smellCategoryInsertionStatement(projectId, firstCommit.sha, firstSmell, SmellCategory.PRESENCE);\n        verify(smellQueries).smellCategoryInsertionStatement(projectId, firstCommit.sha, firstSmell, SmellCategory.INTRODUCTION);\n    }", "signature": "void handlePresenceAndIntroductionOnSingleCommitAlsoLastCommit()", "full_signature": "@Test public void handlePresenceAndIntroductionOnSingleCommitAlsoLastCommit()", "class_method_signature": "OrdinalSmellTypeAnalysisTest.handlePresenceAndIntroductionOnSingleCommitAlsoLastCommit()", "testcase": true, "constructor": false, "invocations": ["addSmell", "mockEndCommit", "query", "getAnalysis", "debugSmellInsertions", "execute", "verify", "times", "any", "smellInsertionStatement", "verify", "addStatements", "verify", "times", "any", "smellCategoryInsertionStatement", "verify", "smellCategoryInsertionStatement", "verify"]}, "focal_class": {"identifier": "OrdinalSmellTypeAnalysis", "superclass": "", "interfaces": "implements Query", "fields": [{"original_string": "private final int projectId;", "modifier": "private final", "type": "int", "declarator": "projectId", "var_name": "projectId"}, {"original_string": "private String smellType;", "modifier": "private", "type": "String", "declarator": "smellType", "var_name": "smellType"}, {"original_string": "private final Persistence persistence;", "modifier": "private final", "type": "Persistence", "declarator": "persistence", "var_name": "persistence"}, {"original_string": "private final CommitQueries commitQueries;", "modifier": "private final", "type": "CommitQueries", "declarator": "commitQueries", "var_name": "commitQueries"}, {"original_string": "private final SmellQueries smellQueries;", "modifier": "private final", "type": "SmellQueries", "declarator": "smellQueries", "var_name": "smellQueries"}, {"original_string": "private final SmellDuplicationChecker duplicationChecker;", "modifier": "private final", "type": "SmellDuplicationChecker", "declarator": "duplicationChecker", "var_name": "duplicationChecker"}, {"original_string": "private final Iterator<Map<String, Object>> smells;", "modifier": "private final", "type": "Iterator<Map<String, Object>>", "declarator": "smells", "var_name": "smells"}], "methods": [{"identifier": "OrdinalSmellTypeAnalysis", "parameters": "(int projectId, Persistence persistence, Iterator<Map<String, Object>> smells,\n                             String smellType, SmellDuplicationChecker duplicationChecker,\n                             CommitQueries commitQueries, SmellQueries smellQueries)", "modifiers": "", "return": "", "signature": " OrdinalSmellTypeAnalysis(int projectId, Persistence persistence, Iterator<Map<String, Object>> smells,\n                             String smellType, SmellDuplicationChecker duplicationChecker,\n                             CommitQueries commitQueries, SmellQueries smellQueries)", "full_signature": "  OrdinalSmellTypeAnalysis(int projectId, Persistence persistence, Iterator<Map<String, Object>> smells,\n                             String smellType, SmellDuplicationChecker duplicationChecker,\n                             CommitQueries commitQueries, SmellQueries smellQueries)", "class_method_signature": "OrdinalSmellTypeAnalysis.OrdinalSmellTypeAnalysis(int projectId, Persistence persistence, Iterator<Map<String, Object>> smells,\n                             String smellType, SmellDuplicationChecker duplicationChecker,\n                             CommitQueries commitQueries, SmellQueries smellQueries)", "testcase": false, "constructor": true}, {"identifier": "query", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void query()", "full_signature": "@Override public void query()", "class_method_signature": "OrdinalSmellTypeAnalysis.query()", "testcase": false, "constructor": false}], "file": "SmellTracker/src/main/java/fr/inria/sniffer/tracker/analysis/query/smell/OrdinalSmellTypeAnalysis.java"}, "focal_method": {"identifier": "query", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void query() throws QueryException {\n        Smell smell;\n        Commit commit;\n\n        Map<String, Object> instance;\n        BranchAnalyzer branchAnalyzer = new BranchAnalyzer(\n                projectId, persistence,\n                duplicationChecker, commitQueries, smellQueries\n        );\n        while (smells.hasNext()) {\n            instance = smells.next();\n            smell = Smell.fromPaprikaInstance(instance, smellType);\n            commit = Commit.fromInstance(instance);\n            branchAnalyzer.notifyCommit(commit);\n            branchAnalyzer.notifySmell(smell);\n        }\n\n        branchAnalyzer.notifyEnd();\n    }", "signature": "void query()", "full_signature": "@Override public void query()", "class_method_signature": "OrdinalSmellTypeAnalysis.query()", "testcase": false, "constructor": false, "invocations": ["hasNext", "next", "fromPaprikaInstance", "fromInstance", "notifyCommit", "notifySmell", "notifyEnd"]}, "repository": {"repo_id": 175298978, "url": "https://github.com/HabchiSarra/Sniffer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 587, "license": "licensed"}}