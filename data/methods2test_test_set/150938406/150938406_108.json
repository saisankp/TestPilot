{"test_class": {"identifier": "UDFHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/utils/UDFHelperTest.java"}, "test_case": {"identifier": "generateUDTFClause", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void generateUDTFClause() {\n        String clause = UDFHelper.generateUDTFClause(\n            \"input\", \"func\", new String[]{\"c1\", \"c2\"}, new String[]{\"c0\", \"c1\"}, new String[]{\"c0\", \"c1\", \"c2\"});\n        String pattern = \"SELECT `c0`, `c1_[0-9a-z]{32}` as `c1`, `c2_[0-9a-z]{32}` as `c2` FROM \\\\(\" +\n            \"SELECT `c0`,`c1_[0-9a-z]{32}`,`c2_[0-9a-z]{32}` FROM input, \" +\n            \"LATERAL TABLE\\\\(func\\\\(`c0`,`c1`\\\\)\\\\) as T\\\\(`c1_[0-9a-z]{32}`,`c2_[0-9a-z]{32}`\\\\)\" +\n            \"\\\\)\";\n        assertTrue(clause.matches(pattern));\n    }", "signature": "void generateUDTFClause()", "full_signature": "@Test public void generateUDTFClause()", "class_method_signature": "UDFHelperTest.generateUDTFClause()", "testcase": true, "constructor": false, "invocations": ["generateUDTFClause", "assertTrue", "matches"]}, "focal_class": {"identifier": "UDFHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "generateRandomFuncName", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String generateRandomFuncName()", "full_signature": "public static String generateRandomFuncName()", "class_method_signature": "UDFHelper.generateRandomFuncName()", "testcase": false, "constructor": false}, {"identifier": "generateUDFClause", "parameters": "(\n        final String inTableName, final String functionName,\n        final String outputCol, final String[] selectedCols, final String[] reservedCols)", "modifiers": "public static", "return": "String", "signature": "String generateUDFClause(\n        final String inTableName, final String functionName,\n        final String outputCol, final String[] selectedCols, final String[] reservedCols)", "full_signature": "public static String generateUDFClause(\n        final String inTableName, final String functionName,\n        final String outputCol, final String[] selectedCols, final String[] reservedCols)", "class_method_signature": "UDFHelper.generateUDFClause(\n        final String inTableName, final String functionName,\n        final String outputCol, final String[] selectedCols, final String[] reservedCols)", "testcase": false, "constructor": false}, {"identifier": "generateUDTFClause", "parameters": "(\n        final String inTableName, final String functionName,\n        final String[] outputCols, final String[] selectedCols, final String[] reservedCols)", "modifiers": "public static", "return": "String", "signature": "String generateUDTFClause(\n        final String inTableName, final String functionName,\n        final String[] outputCols, final String[] selectedCols, final String[] reservedCols)", "full_signature": "public static String generateUDTFClause(\n        final String inTableName, final String functionName,\n        final String[] outputCols, final String[] selectedCols, final String[] reservedCols)", "class_method_signature": "UDFHelper.generateUDTFClause(\n        final String inTableName, final String functionName,\n        final String[] outputCols, final String[] selectedCols, final String[] reservedCols)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/utils/UDFHelper.java"}, "focal_method": {"identifier": "generateUDTFClause", "parameters": "(\n        final String inTableName, final String functionName,\n        final String[] outputCols, final String[] selectedCols, final String[] reservedCols)", "modifiers": "public static", "return": "String", "body": "public static String generateUDTFClause(\n        final String inTableName, final String functionName,\n        final String[] outputCols, final String[] selectedCols, final String[] reservedCols) {\n\n        final String selectedColsStr = TableUtil.columnsToSqlClause(selectedCols);\n\n        // always shade outputCols to avoid potential conflicts with selectedCols\n        final String[] shadedOutputCols = Arrays.stream(outputCols)\n            .map(d -> d + \"_\" + UUID.randomUUID().toString().replace(\"-\", \"\"))\n            .toArray(String[]::new);\n        final String shadedOutputColsStr = TableUtil.columnsToSqlClause(shadedOutputCols);\n\n        // if one of outputCols is found in reservedCols, the one in reservedCols will not be output\n        final Set<String> outputColsSet = new HashSet<>(Arrays.asList(outputCols));\n        final String[] cleanedReservedCols = Arrays.stream(reservedCols)\n            .filter(d -> !outputColsSet.contains(d))\n            .toArray(String[]::new);\n\n        StringBuilder sb = new StringBuilder();\n        if (cleanedReservedCols.length > 0) {\n            sb.append(TableUtil.columnsToSqlClause(cleanedReservedCols)).append(\", \");\n        }\n        for (int i = 0; i < outputCols.length; i += 1) {\n            sb.append(\"`\").append(shadedOutputCols[i]).append(\"` as `\").append(outputCols[i]).append(\"`\");\n            if (i < outputCols.length - 1) {\n                sb.append(\", \");\n            }\n        }\n        String selectClause = sb.toString();\n\n        // generate the join clause\n        final String joinTemplate = \"SELECT %s FROM %s, LATERAL TABLE(%s(%s)) as T(%s)\";\n        final String[] finalOutputCols = ArrayUtils.addAll(cleanedReservedCols, shadedOutputCols);\n        final String finalOutputColsStr = TableUtil.columnsToSqlClause(finalOutputCols);\n\n        final String joinClause = String.format(joinTemplate,\n            finalOutputColsStr, inTableName, functionName, selectedColsStr, shadedOutputColsStr);\n\n        return String.format(\"SELECT %s FROM (%s)\", selectClause, joinClause);\n    }", "signature": "String generateUDTFClause(\n        final String inTableName, final String functionName,\n        final String[] outputCols, final String[] selectedCols, final String[] reservedCols)", "full_signature": "public static String generateUDTFClause(\n        final String inTableName, final String functionName,\n        final String[] outputCols, final String[] selectedCols, final String[] reservedCols)", "class_method_signature": "UDFHelper.generateUDTFClause(\n        final String inTableName, final String functionName,\n        final String[] outputCols, final String[] selectedCols, final String[] reservedCols)", "testcase": false, "constructor": false, "invocations": ["columnsToSqlClause", "toArray", "map", "stream", "replace", "toString", "randomUUID", "columnsToSqlClause", "asList", "toArray", "filter", "stream", "contains", "append", "append", "columnsToSqlClause", "append", "append", "append", "append", "append", "append", "toString", "addAll", "columnsToSqlClause", "format", "format"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}