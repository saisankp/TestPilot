{"test_class": {"identifier": "Swagger2MarkupConfigBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "swagger2markup/src/test/java/io/github/swagger2markup/builder/Swagger2MarkupConfigBuilderTest.java"}, "test_case": {"identifier": "testConfigOfDefaults", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConfigOfDefaults() {\n        Map<String, String> configMap = new HashMap<>();\n        configMap.put(Swagger2MarkupProperties.MARKUP_LANGUAGE, MarkupLanguage.MARKDOWN.toString());\n        configMap.put(\"swagger2markup.extensions.uniqueId1.customProperty1\", \"123\");\n        configMap.put(\"swagger2markup.extensions.uniqueId1.customProperty2\", \"123\");\n        configMap.put(\"swagger2markup.extensions.uniqueId2.customPropertyList1\", \"123,456\");\n        configMap.put(\"swagger2markup.uniqueId1.customProperty1\", \"123\");\n        configMap.put(\"swagger2markup.uniqueId1.customProperty2\", \"123\");\n\n        Swagger2MarkupConfig config = new Swagger2MarkupConfigBuilder(configMap)\n                .build();\n\n        assertThat(config.getAnchorPrefix()).isNull();\n        assertThat(config.getDefinitionOrderBy()).isEqualTo(OrderBy.NATURAL);\n        assertThat(config.getDefinitionOrdering()).isEqualTo(Ordering.natural());\n        assertThat(config.getDefinitionsDocument()).isEqualTo(\"definitions\");\n        assertThat(config.isGeneratedExamplesEnabled()).isFalse();\n        assertThat(config.isInlineSchemaEnabled()).isEqualTo(true);\n        assertThat(config.getInterDocumentCrossReferencesPrefix()).isNull();\n        assertThat(config.getMarkupLanguage().name()).isEqualTo(MarkupLanguage.MARKDOWN.name());\n        assertThat(config.getOperationOrderBy()).isEqualTo(OrderBy.NATURAL);\n        assertThat(config.getOperationOrdering()).isNotNull();\n        assertThat(config.getLanguage()).isEqualTo(Language.EN);\n        assertThat(config.getOverviewDocument()).isEqualTo(\"overview\");\n        assertThat(config.getParameterOrderBy()).isEqualTo(OrderBy.NATURAL);\n        assertThat(config.getParameterOrdering()).isEqualTo(Swagger2MarkupConfigBuilder.PARAMETER_IN_NATURAL_ORDERING.compound(Swagger2MarkupConfigBuilder.PARAMETER_NAME_NATURAL_ORDERING));\n        assertThat(config.getPathsDocument()).isEqualTo(\"paths\");\n        assertThat(config.getPathsGroupedBy()).isEqualTo(GroupBy.AS_IS);\n        assertThat(config.getPropertyOrderBy()).isEqualTo(OrderBy.NATURAL);\n        assertThat(config.getPropertyOrdering()).isEqualTo(Ordering.natural());\n        assertThat(config.getResponseOrderBy()).isEqualTo(OrderBy.NATURAL);\n        assertThat(config.getResponseOrdering()).isEqualTo(Ordering.natural());\n        assertThat(config.getSecurityDocument()).isEqualTo(\"security\");\n        assertThat(config.getSeparatedDefinitionsFolder()).isEqualTo(\"definitions\");\n        assertThat(config.getSeparatedOperationsFolder()).isEqualTo(\"operations\");\n        assertThat(config.getTagOrderBy()).isEqualTo(OrderBy.NATURAL);\n        assertThat(config.getTagOrdering()).isEqualTo(Ordering.natural());\n        assertThat(config.isFlatBodyEnabled()).isFalse();\n        assertThat(config.isPathSecuritySectionEnabled()).isTrue();\n        assertThat(config.isInterDocumentCrossReferencesEnabled()).isFalse();\n        assertThat(config.isSeparatedDefinitionsEnabled()).isFalse();\n        assertThat(config.isSeparatedOperationsEnabled()).isFalse();\n        assertThat(config.getExtensionsProperties().getKeys()).hasSize(3)\n        .containsOnly(\"uniqueId1.customProperty1\",\n                \"uniqueId1.customProperty2\",\n                \"uniqueId2.customPropertyList1\"\n                );\n        assertThat(config.getExtensionsProperties().getString(\"uniqueId1.customProperty1\").get()).isEqualTo(\"123\");\n        assertThat(config.getExtensionsProperties().getPathList(\"uniqueId2.customPropertyList1\")).hasSize(1)\n        .containsOnly(Paths.get(\"123,456\"));\n    }", "signature": "void testConfigOfDefaults()", "full_signature": "@Test public void testConfigOfDefaults()", "class_method_signature": "Swagger2MarkupConfigBuilderTest.testConfigOfDefaults()", "testcase": true, "constructor": false, "invocations": ["put", "toString", "put", "put", "put", "put", "put", "build", "isNull", "assertThat", "getAnchorPrefix", "isEqualTo", "assertThat", "getDefinitionOrderBy", "isEqualTo", "assertThat", "getDefinitionOrdering", "natural", "isEqualTo", "assertThat", "getDefinitionsDocument", "isFalse", "assertThat", "isGeneratedExamplesEnabled", "isEqualTo", "assertThat", "isInlineSchemaEnabled", "isNull", "assertThat", "getInterDocumentCrossReferencesPrefix", "isEqualTo", "assertThat", "name", "getMarkupLanguage", "name", "isEqualTo", "assertThat", "getOperationOrderBy", "isNotNull", "assertThat", "getOperationOrdering", "isEqualTo", "assertThat", "getLanguage", "isEqualTo", "assertThat", "getOverviewDocument", "isEqualTo", "assertThat", "getParameterOrderBy", "isEqualTo", "assertThat", "getParameterOrdering", "compound", "isEqualTo", "assertThat", "getPathsDocument", "isEqualTo", "assertThat", "getPathsGroupedBy", "isEqualTo", "assertThat", "getPropertyOrderBy", "isEqualTo", "assertThat", "getPropertyOrdering", "natural", "isEqualTo", "assertThat", "getResponseOrderBy", "isEqualTo", "assertThat", "getResponseOrdering", "natural", "isEqualTo", "assertThat", "getSecurityDocument", "isEqualTo", "assertThat", "getSeparatedDefinitionsFolder", "isEqualTo", "assertThat", "getSeparatedOperationsFolder", "isEqualTo", "assertThat", "getTagOrderBy", "isEqualTo", "assertThat", "getTagOrdering", "natural", "isFalse", "assertThat", "isFlatBodyEnabled", "isTrue", "assertThat", "isPathSecuritySectionEnabled", "isFalse", "assertThat", "isInterDocumentCrossReferencesEnabled", "isFalse", "assertThat", "isSeparatedDefinitionsEnabled", "isFalse", "assertThat", "isSeparatedOperationsEnabled", "containsOnly", "hasSize", "assertThat", "getKeys", "getExtensionsProperties", "isEqualTo", "assertThat", "get", "getString", "getExtensionsProperties", "containsOnly", "hasSize", "assertThat", "getPathList", "getExtensionsProperties", "get"]}, "focal_class": {"identifier": "Swagger2MarkupConfigBuilder", "superclass": "extends Schema2MarkupConfigBuilder<Swagger2MarkupConfigBuilder, Swagger2MarkupConfig>", "interfaces": "", "fields": [], "methods": [{"identifier": "Swagger2MarkupConfigBuilder", "parameters": "()", "modifiers": "public", "return": "", "signature": " Swagger2MarkupConfigBuilder()", "full_signature": "public  Swagger2MarkupConfigBuilder()", "class_method_signature": "Swagger2MarkupConfigBuilder.Swagger2MarkupConfigBuilder()", "testcase": false, "constructor": true}, {"identifier": "Swagger2MarkupConfigBuilder", "parameters": "(Properties properties)", "modifiers": "public", "return": "", "signature": " Swagger2MarkupConfigBuilder(Properties properties)", "full_signature": "public  Swagger2MarkupConfigBuilder(Properties properties)", "class_method_signature": "Swagger2MarkupConfigBuilder.Swagger2MarkupConfigBuilder(Properties properties)", "testcase": false, "constructor": true}, {"identifier": "Swagger2MarkupConfigBuilder", "parameters": "(Map<String, String> map)", "modifiers": "public", "return": "", "signature": " Swagger2MarkupConfigBuilder(Map<String, String> map)", "full_signature": "public  Swagger2MarkupConfigBuilder(Map<String, String> map)", "class_method_signature": "Swagger2MarkupConfigBuilder.Swagger2MarkupConfigBuilder(Map<String, String> map)", "testcase": false, "constructor": true}, {"identifier": "Swagger2MarkupConfigBuilder", "parameters": "(Configuration configuration)", "modifiers": "public", "return": "", "signature": " Swagger2MarkupConfigBuilder(Configuration configuration)", "full_signature": "public  Swagger2MarkupConfigBuilder(Configuration configuration)", "class_method_signature": "Swagger2MarkupConfigBuilder.Swagger2MarkupConfigBuilder(Configuration configuration)", "testcase": false, "constructor": true}, {"identifier": "build", "parameters": "()", "modifiers": "@Override public", "return": "Swagger2MarkupConfig", "signature": "Swagger2MarkupConfig build()", "full_signature": "@Override public Swagger2MarkupConfig build()", "class_method_signature": "Swagger2MarkupConfigBuilder.build()", "testcase": false, "constructor": false}], "file": "swagger2markup/src/main/java/io/github/swagger2markup/builder/Swagger2MarkupConfigBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "()", "modifiers": "@Override public", "return": "Swagger2MarkupConfig", "body": "@Override\n    public Swagger2MarkupConfig build() {\n        buildNaturalOrdering();\n        return config;\n    }", "signature": "Swagger2MarkupConfig build()", "full_signature": "@Override public Swagger2MarkupConfig build()", "class_method_signature": "Swagger2MarkupConfigBuilder.build()", "testcase": false, "constructor": false, "invocations": ["buildNaturalOrdering"]}, "repository": {"repo_id": 30644093, "url": "https://github.com/Swagger2Markup/swagger2markup", "language": "Java", "is_fork": false, "fork_count": 340, "stargazer_count": 2130, "size": 5225, "license": "licensed"}}