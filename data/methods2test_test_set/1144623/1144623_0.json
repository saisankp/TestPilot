{"test_class": {"identifier": "TestTypes", "superclass": "", "interfaces": "", "fields": [], "file": "stencil/src/test/java/net/stencilproject/template/TestTypes.java"}, "test_case": {"identifier": "testToBoolean", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testToBoolean() {\n\t\tassertTrue(Types.toBoolean(null, 1));\n\t\tassertFalse(Types.toBoolean(null, 0));\n\t\tassertFalse(Types.toBoolean(null, null));\n\t\tassertFalse(Types.toBoolean(null, \"\"));\n\t\tassertTrue(Types.toBoolean(null, \"0\"));\n\t\tassertTrue(Types.toBoolean(null, \"1\"));\n\t\tassertTrue(Types.toBoolean(null, \"2\"));\n\t}", "signature": "void testToBoolean()", "full_signature": "@Test public void testToBoolean()", "class_method_signature": "TestTypes.testToBoolean()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "toBoolean", "assertFalse", "toBoolean", "assertFalse", "toBoolean", "assertFalse", "toBoolean", "assertTrue", "toBoolean", "assertTrue", "toBoolean", "assertTrue", "toBoolean"]}, "focal_class": {"identifier": "Types", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "coerce", "parameters": "(TemplateContext ctx, Class<?> type, final Object o)", "modifiers": "public static", "return": "Object", "signature": "Object coerce(TemplateContext ctx, Class<?> type, final Object o)", "full_signature": "public static Object coerce(TemplateContext ctx, Class<?> type, final Object o)", "class_method_signature": "Types.coerce(TemplateContext ctx, Class<?> type, final Object o)", "testcase": false, "constructor": false}, {"identifier": "getClassName", "parameters": "(TemplateContext ctx, Object o)", "modifiers": "public static", "return": "String", "signature": "String getClassName(TemplateContext ctx, Object o)", "full_signature": "public static String getClassName(TemplateContext ctx, Object o)", "class_method_signature": "Types.getClassName(TemplateContext ctx, Object o)", "testcase": false, "constructor": false}, {"identifier": "getTypeCode", "parameters": "(TemplateContext ctx, Object o)", "modifiers": "public static", "return": "TypeCode", "signature": "TypeCode getTypeCode(TemplateContext ctx, Object o)", "full_signature": "public static TypeCode getTypeCode(TemplateContext ctx, Object o)", "class_method_signature": "Types.getTypeCode(TemplateContext ctx, Object o)", "testcase": false, "constructor": false}, {"identifier": "isArray", "parameters": "(TemplateContext ctx, Object o)", "modifiers": "public static", "return": "boolean", "signature": "boolean isArray(TemplateContext ctx, Object o)", "full_signature": "public static boolean isArray(TemplateContext ctx, Object o)", "class_method_signature": "Types.isArray(TemplateContext ctx, Object o)", "testcase": false, "constructor": false}, {"identifier": "isNumeric", "parameters": "(TemplateContext ctx, Object o)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNumeric(TemplateContext ctx, Object o)", "full_signature": "public static boolean isNumeric(TemplateContext ctx, Object o)", "class_method_signature": "Types.isNumeric(TemplateContext ctx, Object o)", "testcase": false, "constructor": false}, {"identifier": "isDouble", "parameters": "(TemplateContext ctx, Object o)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDouble(TemplateContext ctx, Object o)", "full_signature": "public static boolean isDouble(TemplateContext ctx, Object o)", "class_method_signature": "Types.isDouble(TemplateContext ctx, Object o)", "testcase": false, "constructor": false}, {"identifier": "isIntegral", "parameters": "(TemplateContext ctx, Object o)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIntegral(TemplateContext ctx, Object o)", "full_signature": "public static boolean isIntegral(TemplateContext ctx, Object o)", "class_method_signature": "Types.isIntegral(TemplateContext ctx, Object o)", "testcase": false, "constructor": false}, {"identifier": "isString", "parameters": "(TemplateContext ctx, Object o)", "modifiers": "public static", "return": "boolean", "signature": "boolean isString(TemplateContext ctx, Object o)", "full_signature": "public static boolean isString(TemplateContext ctx, Object o)", "class_method_signature": "Types.isString(TemplateContext ctx, Object o)", "testcase": false, "constructor": false}, {"identifier": "isEnum", "parameters": "(TemplateContext ctx, Object o)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEnum(TemplateContext ctx, Object o)", "full_signature": "public static boolean isEnum(TemplateContext ctx, Object o)", "class_method_signature": "Types.isEnum(TemplateContext ctx, Object o)", "testcase": false, "constructor": false}, {"identifier": "isBoolean", "parameters": "(TemplateContext ctx, Object o1)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBoolean(TemplateContext ctx, Object o1)", "full_signature": "public static boolean isBoolean(TemplateContext ctx, Object o1)", "class_method_signature": "Types.isBoolean(TemplateContext ctx, Object o1)", "testcase": false, "constructor": false}, {"identifier": "isComparable", "parameters": "(TemplateContext ctx, Object o)", "modifiers": "public static", "return": "boolean", "signature": "boolean isComparable(TemplateContext ctx, Object o)", "full_signature": "public static boolean isComparable(TemplateContext ctx, Object o)", "class_method_signature": "Types.isComparable(TemplateContext ctx, Object o)", "testcase": false, "constructor": false}, {"identifier": "toBoolean", "parameters": "(TemplateContext ctx, Object o)", "modifiers": "public static", "return": "boolean", "signature": "boolean toBoolean(TemplateContext ctx, Object o)", "full_signature": "public static boolean toBoolean(TemplateContext ctx, Object o)", "class_method_signature": "Types.toBoolean(TemplateContext ctx, Object o)", "testcase": false, "constructor": false}, {"identifier": "toDouble", "parameters": "(TemplateContext ctx, Object o)", "modifiers": "public static", "return": "double", "signature": "double toDouble(TemplateContext ctx, Object o)", "full_signature": "public static double toDouble(TemplateContext ctx, Object o)", "class_method_signature": "Types.toDouble(TemplateContext ctx, Object o)", "testcase": false, "constructor": false}, {"identifier": "toInteger", "parameters": "(TemplateContext ctx, Object o)", "modifiers": "public static", "return": "int", "signature": "int toInteger(TemplateContext ctx, Object o)", "full_signature": "public static int toInteger(TemplateContext ctx, Object o)", "class_method_signature": "Types.toInteger(TemplateContext ctx, Object o)", "testcase": false, "constructor": false}, {"identifier": "toLong", "parameters": "(TemplateContext ctx, Object o)", "modifiers": "public static", "return": "long", "signature": "long toLong(TemplateContext ctx, Object o)", "full_signature": "public static long toLong(TemplateContext ctx, Object o)", "class_method_signature": "Types.toLong(TemplateContext ctx, Object o)", "testcase": false, "constructor": false}, {"identifier": "toIterator", "parameters": "(TemplateContext ctx, Object o)", "modifiers": "public static", "return": "Iterator<?>", "signature": "Iterator<?> toIterator(TemplateContext ctx, Object o)", "full_signature": "public static Iterator<?> toIterator(TemplateContext ctx, Object o)", "class_method_signature": "Types.toIterator(TemplateContext ctx, Object o)", "testcase": false, "constructor": false}, {"identifier": "toObjectArray", "parameters": "(TemplateContext ctx, Object o)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] toObjectArray(TemplateContext ctx, Object o)", "full_signature": "public static Object[] toObjectArray(TemplateContext ctx, Object o)", "class_method_signature": "Types.toObjectArray(TemplateContext ctx, Object o)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(TemplateContext ctx, Object o)", "modifiers": "public static", "return": "String", "signature": "String toString(TemplateContext ctx, Object o)", "full_signature": "public static String toString(TemplateContext ctx, Object o)", "class_method_signature": "Types.toString(TemplateContext ctx, Object o)", "testcase": false, "constructor": false}, {"identifier": "Types", "parameters": "()", "modifiers": "private", "return": "", "signature": " Types()", "full_signature": "private  Types()", "class_method_signature": "Types.Types()", "testcase": false, "constructor": true}], "file": "stencil/src/main/java/net/stencilproject/template/Types.java"}, "focal_method": {"identifier": "toBoolean", "parameters": "(TemplateContext ctx, Object o)", "modifiers": "public static", "return": "boolean", "body": "public static boolean toBoolean(TemplateContext ctx, Object o) {\n\t\tif (o == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (o instanceof Boolean) {\n\t\t\treturn (Boolean) o;\n\t\t}\n\n\t\tif (o instanceof Number) {\n\t\t\tdouble d = ((Number) o).doubleValue();\n\t\t\treturn !Double.isNaN(d) && d != 0;\n\t\t}\n\n\t\tif (o instanceof Collection<?>) {\n\t\t\treturn !((Collection<?>) o).isEmpty();\n\t\t}\n\n\t\tif (o instanceof Map<?, ?>) {\n\t\t\treturn !((Map<?, ?>) o).isEmpty();\n\t\t}\n\n\t\tif (Types.isString(ctx, o)) {\n\t\t\treturn !StringUtils.isEmpty(Types.toString(ctx, o));\n\t\t}\n\n\t\treturn true;\n\t}", "signature": "boolean toBoolean(TemplateContext ctx, Object o)", "full_signature": "public static boolean toBoolean(TemplateContext ctx, Object o)", "class_method_signature": "Types.toBoolean(TemplateContext ctx, Object o)", "testcase": false, "constructor": false, "invocations": ["doubleValue", "isNaN", "isEmpty", "isEmpty", "isString", "isEmpty", "toString"]}, "repository": {"repo_id": 1144623, "url": "https://github.com/mmastrac/Stencil", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 4680, "license": "licensed"}}