{"test_class": {"identifier": "NumberRadixUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "ch-commons-xbean/src/test/java/com/cloudhopper/commons/xbean/util/NumberRadixUtilTest.java"}, "test_case": {"identifier": "normalizeLeadingHexZeroes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void normalizeLeadingHexZeroes() throws Exception {\n        // appending digits or equal\n        Assert.assertEquals(\"00\", NumberRadixUtil.normalizeLeadingHexZeroes(\"0\", 2));\n        Assert.assertEquals(\"00\", NumberRadixUtil.normalizeLeadingHexZeroes(\"00\", 2));\n        Assert.assertEquals(\"0F\", NumberRadixUtil.normalizeLeadingHexZeroes(\"F\", 2));\n        Assert.assertEquals(\"FF\", NumberRadixUtil.normalizeLeadingHexZeroes(\"FF\", 2));\n        Assert.assertEquals(\"0000\", NumberRadixUtil.normalizeLeadingHexZeroes(\"0\", 4));\n        Assert.assertEquals(\"0000\", NumberRadixUtil.normalizeLeadingHexZeroes(\"00\", 4));\n        Assert.assertEquals(\"000F\", NumberRadixUtil.normalizeLeadingHexZeroes(\"F\", 4));\n        Assert.assertEquals(\"00FF\", NumberRadixUtil.normalizeLeadingHexZeroes(\"FF\", 4));\n        Assert.assertEquals(\"0FFF\", NumberRadixUtil.normalizeLeadingHexZeroes(\"FFF\", 4));\n        Assert.assertEquals(\"FFFF\", NumberRadixUtil.normalizeLeadingHexZeroes(\"FFFF\", 4));\n        Assert.assertEquals(\"00000000\", NumberRadixUtil.normalizeLeadingHexZeroes(\"0\", 8));\n        Assert.assertEquals(\"00000000\", NumberRadixUtil.normalizeLeadingHexZeroes(\"00\", 8));\n        Assert.assertEquals(\"0000000F\", NumberRadixUtil.normalizeLeadingHexZeroes(\"F\", 8));\n        Assert.assertEquals(\"000000FF\", NumberRadixUtil.normalizeLeadingHexZeroes(\"FF\", 8));\n        Assert.assertEquals(\"00000FFF\", NumberRadixUtil.normalizeLeadingHexZeroes(\"FFF\", 8));\n        Assert.assertEquals(\"0000FFFF\", NumberRadixUtil.normalizeLeadingHexZeroes(\"FFFF\", 8));\n        Assert.assertEquals(\"FFFFFFFF\", NumberRadixUtil.normalizeLeadingHexZeroes(\"FFFFFFFF\", 8));\n        // trimming digits\n        Assert.assertEquals(\"00\", NumberRadixUtil.normalizeLeadingHexZeroes(\"000\", 2));\n        Assert.assertEquals(\"00\", NumberRadixUtil.normalizeLeadingHexZeroes(\"0000\", 2));\n        Assert.assertEquals(\"0F\", NumberRadixUtil.normalizeLeadingHexZeroes(\"00F\", 2));\n        Assert.assertEquals(\"FF\", NumberRadixUtil.normalizeLeadingHexZeroes(\"000000000FF\", 2));\n    }", "signature": "void normalizeLeadingHexZeroes()", "full_signature": "@Test public void normalizeLeadingHexZeroes()", "class_method_signature": "NumberRadixUtilTest.normalizeLeadingHexZeroes()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes", "assertEquals", "normalizeLeadingHexZeroes"]}, "focal_class": {"identifier": "NumberRadixUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseNumberRadix", "parameters": "(String number)", "modifiers": "static public", "return": "NumberRadixResult", "signature": "NumberRadixResult parseNumberRadix(String number)", "full_signature": "static public NumberRadixResult parseNumberRadix(String number)", "class_method_signature": "NumberRadixUtil.parseNumberRadix(String number)", "testcase": false, "constructor": false}, {"identifier": "normalizeLeadingHexZeroes", "parameters": "(String v, int length)", "modifiers": "static public", "return": "String", "signature": "String normalizeLeadingHexZeroes(String v, int length)", "full_signature": "static public String normalizeLeadingHexZeroes(String v, int length)", "class_method_signature": "NumberRadixUtil.normalizeLeadingHexZeroes(String v, int length)", "testcase": false, "constructor": false}], "file": "ch-commons-xbean/src/main/java/com/cloudhopper/commons/xbean/util/NumberRadixUtil.java"}, "focal_method": {"identifier": "normalizeLeadingHexZeroes", "parameters": "(String v, int length)", "modifiers": "static public", "return": "String", "body": "static public String normalizeLeadingHexZeroes(String v, int length) throws ConversionException {\n        if (v == null || v.length() == 0) {\n            throw new ConversionException(\"Empty or null value detected; unable to convert\");\n        } else if (v.length() == length) {\n            return v;\n        } else if (v.length() < length) {\n            // add leading zeroes\n            int prepend = (length - v.length());\n            StringBuilder sb = new StringBuilder(length);\n            for (int i = 0; i < prepend; i++) {\n                sb.append('0');\n            }\n            sb.append(v);\n            return sb.toString();\n        } else {\n            // remove leading zeroes (or error out if not zeroes)\n            int remove = (v.length() - length);\n            // check if any of these are non-zero\n            for (int i = 0; i < remove; i++) {\n                if (v.charAt(i) != '0') {\n                    throw new ConversionOverflowException(\"Overflow of value detected; unable to trim value [\" + v + \"] to length \" + length);\n                }\n            }\n            return v.substring(remove);\n        }\n    }", "signature": "String normalizeLeadingHexZeroes(String v, int length)", "full_signature": "static public String normalizeLeadingHexZeroes(String v, int length)", "class_method_signature": "NumberRadixUtil.normalizeLeadingHexZeroes(String v, int length)", "testcase": false, "constructor": false, "invocations": ["length", "length", "length", "length", "append", "append", "toString", "length", "charAt", "substring"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}