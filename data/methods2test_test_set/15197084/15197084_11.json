{"test_class": {"identifier": "AwaitTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExecutorService executor;", "modifier": "private", "type": "ExecutorService", "declarator": "executor", "var_name": "executor"}], "file": "reactfx/src/test/java/org/reactfx/AwaitTest.java"}, "test_case": {"identifier": "testAwaitTask", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAwaitTask() throws InterruptedException, ExecutionException {\n        CompletableFuture<List<Object>> emitted = new CompletableFuture<>();\n        EventSource<Integer> src = new EventSource<>();\n        AwaitingEventStream<Try<Integer>> squares = src.mapToTask(x -> background(x*x)).await();\n        Platform.runLater(() -> {\n            List<Object> res = aggregate(EventStreams.merge(\n                    squares.map(Try::get),\n                    EventStreams.valuesOf(squares.pendingProperty())));\n            src.push(1);\n            src.push(2);\n            src.push(3);\n            src.push(4);\n            executor.execute(() -> Platform.runLater(() -> emitted.complete(res)));\n        });\n        assertEquals(Arrays.asList(false, true, 1, 4, 9, 16, false), emitted.get());\n    }", "signature": "void testAwaitTask()", "full_signature": "@Test public void testAwaitTask()", "class_method_signature": "AwaitTest.testAwaitTask()", "testcase": true, "constructor": false, "invocations": ["await", "mapToTask", "background", "runLater", "aggregate", "merge", "map", "valuesOf", "pendingProperty", "push", "push", "push", "push", "execute", "runLater", "complete", "assertEquals", "asList", "get"]}, "focal_class": {"identifier": "Await", "superclass": "extends EventStreamBase<Try<T>>", "interfaces": "implements AwaitingEventStream<Try<T>>", "fields": [{"original_string": "private final EventStream<F> source;", "modifier": "private final", "type": "EventStream<F>", "declarator": "source", "var_name": "source"}, {"original_string": "private final SuspendableNo pending = new SuspendableNo();", "modifier": "private final", "type": "SuspendableNo", "declarator": "pending = new SuspendableNo()", "var_name": "pending"}, {"original_string": "private final BiConsumer<F, TriConsumer<T, Throwable, Boolean>> addCompletionHandler;", "modifier": "private final", "type": "BiConsumer<F, TriConsumer<T, Throwable, Boolean>>", "declarator": "addCompletionHandler", "var_name": "addCompletionHandler"}], "methods": [{"identifier": "awaitCompletionStage", "parameters": "(\n            EventStream<CompletionStage<T>> source,\n            Executor clientThreadExecutor)", "modifiers": "public static", "return": "AwaitingEventStream<Try<T>>", "signature": "AwaitingEventStream<Try<T>> awaitCompletionStage(\n            EventStream<CompletionStage<T>> source,\n            Executor clientThreadExecutor)", "full_signature": "public static AwaitingEventStream<Try<T>> awaitCompletionStage(\n            EventStream<CompletionStage<T>> source,\n            Executor clientThreadExecutor)", "class_method_signature": "Await.awaitCompletionStage(\n            EventStream<CompletionStage<T>> source,\n            Executor clientThreadExecutor)", "testcase": false, "constructor": false}, {"identifier": "awaitTask", "parameters": "(\n            EventStream<Task<T>> source)", "modifiers": "public static", "return": "AwaitingEventStream<Try<T>>", "signature": "AwaitingEventStream<Try<T>> awaitTask(\n            EventStream<Task<T>> source)", "full_signature": "public static AwaitingEventStream<Try<T>> awaitTask(\n            EventStream<Task<T>> source)", "class_method_signature": "Await.awaitTask(\n            EventStream<Task<T>> source)", "testcase": false, "constructor": false}, {"identifier": "addCompletionHandler", "parameters": "(\n            CompletionStage<T> future,\n            TriConsumer<T, Throwable, Boolean> handler,\n            Executor executor)", "modifiers": "static", "return": "void", "signature": "void addCompletionHandler(\n            CompletionStage<T> future,\n            TriConsumer<T, Throwable, Boolean> handler,\n            Executor executor)", "full_signature": "static void addCompletionHandler(\n            CompletionStage<T> future,\n            TriConsumer<T, Throwable, Boolean> handler,\n            Executor executor)", "class_method_signature": "Await.addCompletionHandler(\n            CompletionStage<T> future,\n            TriConsumer<T, Throwable, Boolean> handler,\n            Executor executor)", "testcase": false, "constructor": false}, {"identifier": "addCompletionHandler", "parameters": "(\n            Task<T> t,\n            TriConsumer<T, Throwable, Boolean> handler)", "modifiers": "static", "return": "void", "signature": "void addCompletionHandler(\n            Task<T> t,\n            TriConsumer<T, Throwable, Boolean> handler)", "full_signature": "static void addCompletionHandler(\n            Task<T> t,\n            TriConsumer<T, Throwable, Boolean> handler)", "class_method_signature": "Await.addCompletionHandler(\n            Task<T> t,\n            TriConsumer<T, Throwable, Boolean> handler)", "testcase": false, "constructor": false}, {"identifier": "Await", "parameters": "(\n            EventStream<F> source,\n            BiConsumer<F, TriConsumer<T, Throwable, Boolean>> addCompletionHandler)", "modifiers": "private", "return": "", "signature": " Await(\n            EventStream<F> source,\n            BiConsumer<F, TriConsumer<T, Throwable, Boolean>> addCompletionHandler)", "full_signature": "private  Await(\n            EventStream<F> source,\n            BiConsumer<F, TriConsumer<T, Throwable, Boolean>> addCompletionHandler)", "class_method_signature": "Await.Await(\n            EventStream<F> source,\n            BiConsumer<F, TriConsumer<T, Throwable, Boolean>> addCompletionHandler)", "testcase": false, "constructor": true}, {"identifier": "pendingProperty", "parameters": "()", "modifiers": "@Override public final", "return": "ObservableBooleanValue", "signature": "ObservableBooleanValue pendingProperty()", "full_signature": "@Override public final ObservableBooleanValue pendingProperty()", "class_method_signature": "Await.pendingProperty()", "testcase": false, "constructor": false}, {"identifier": "isPending", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean isPending()", "full_signature": "@Override public final boolean isPending()", "class_method_signature": "Await.isPending()", "testcase": false, "constructor": false}, {"identifier": "observeInputs", "parameters": "()", "modifiers": "@Override protected final", "return": "Subscription", "signature": "Subscription observeInputs()", "full_signature": "@Override protected final Subscription observeInputs()", "class_method_signature": "Await.observeInputs()", "testcase": false, "constructor": false}], "file": "reactfx/src/main/java/org/reactfx/Await.java"}, "focal_method": {"identifier": "awaitTask", "parameters": "(\n            EventStream<Task<T>> source)", "modifiers": "public static", "return": "AwaitingEventStream<Try<T>>", "body": "public static <T> AwaitingEventStream<Try<T>> awaitTask(\n            EventStream<Task<T>> source) {\n        return new Await<>(source, Await::addCompletionHandler);\n    }", "signature": "AwaitingEventStream<Try<T>> awaitTask(\n            EventStream<Task<T>> source)", "full_signature": "public static AwaitingEventStream<Try<T>> awaitTask(\n            EventStream<Task<T>> source)", "class_method_signature": "Await.awaitTask(\n            EventStream<Task<T>> source)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 15197084, "url": "https://github.com/TomasMikula/ReactFX", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 326, "size": 891, "license": "licensed"}}