{"test_class": {"identifier": "OptimizationRulerTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/component/optimization/OptimizationRulerTest.java"}, "test_case": {"identifier": "sharedResourceWithFontsDictionary", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void sharedResourceWithFontsDictionary() throws IOException {\n        try (PDDocument document = PDFParser.parse(SeekableSources.inMemorySeekableSourceFrom(\n                getClass().getClassLoader().getResourceAsStream(\"pdf/shared_resource_dic_w_fonts.pdf\")))) {\n            assertTrue(new OptimizationRuler(OptimizationPolicy.AUTO).apply(document));\n        }\n    }", "signature": "void sharedResourceWithFontsDictionary()", "full_signature": "@Test public void sharedResourceWithFontsDictionary()", "class_method_signature": "OptimizationRulerTest.sharedResourceWithFontsDictionary()", "testcase": true, "constructor": false, "invocations": ["parse", "inMemorySeekableSourceFrom", "getResourceAsStream", "getClassLoader", "getClass", "assertTrue", "apply"]}, "focal_class": {"identifier": "OptimizationRuler", "superclass": "", "interfaces": "implements Function<PDDocument, Boolean>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(OptimizationRuler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(OptimizationRuler.class)", "var_name": "LOG"}, {"original_string": "private OptimizationPolicy policy;", "modifier": "private", "type": "OptimizationPolicy", "declarator": "policy", "var_name": "policy"}], "methods": [{"identifier": "OptimizationRuler", "parameters": "(OptimizationPolicy policy)", "modifiers": "public", "return": "", "signature": " OptimizationRuler(OptimizationPolicy policy)", "full_signature": "public  OptimizationRuler(OptimizationPolicy policy)", "class_method_signature": "OptimizationRuler.OptimizationRuler(OptimizationPolicy policy)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(PDDocument document)", "modifiers": "@Override public", "return": "Boolean", "signature": "Boolean apply(PDDocument document)", "full_signature": "@Override public Boolean apply(PDDocument document)", "class_method_signature": "OptimizationRuler.apply(PDDocument document)", "testcase": false, "constructor": false}, {"identifier": "willNeedOptimization", "parameters": "(PDDocument document)", "modifiers": "private", "return": "boolean", "signature": "boolean willNeedOptimization(PDDocument document)", "full_signature": "private boolean willNeedOptimization(PDDocument document)", "class_method_signature": "OptimizationRuler.willNeedOptimization(PDDocument document)", "testcase": false, "constructor": false}, {"identifier": "hasInheritedResources", "parameters": "(PDDocument document)", "modifiers": "private", "return": "boolean", "signature": "boolean hasInheritedResources(PDDocument document)", "full_signature": "private boolean hasInheritedResources(PDDocument document)", "class_method_signature": "OptimizationRuler.hasInheritedResources(PDDocument document)", "testcase": false, "constructor": false}, {"identifier": "hasSharedXObjectDictionaries", "parameters": "(PDDocument document)", "modifiers": "private", "return": "boolean", "signature": "boolean hasSharedXObjectDictionaries(PDDocument document)", "full_signature": "private boolean hasSharedXObjectDictionaries(PDDocument document)", "class_method_signature": "OptimizationRuler.hasSharedXObjectDictionaries(PDDocument document)", "testcase": false, "constructor": false}, {"identifier": "hasSharedFontDictionaries", "parameters": "(PDDocument document)", "modifiers": "private", "return": "boolean", "signature": "boolean hasSharedFontDictionaries(PDDocument document)", "full_signature": "private boolean hasSharedFontDictionaries(PDDocument document)", "class_method_signature": "OptimizationRuler.hasSharedFontDictionaries(PDDocument document)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/component/optimization/OptimizationRuler.java"}, "focal_method": {"identifier": "apply", "parameters": "(PDDocument document)", "modifiers": "@Override public", "return": "Boolean", "body": "@Override\n    public Boolean apply(PDDocument document) {\n        if (policy == OptimizationPolicy.YES) {\n            return true;\n        }\n        if (policy == OptimizationPolicy.AUTO) {\n            return willNeedOptimization(document);\n        }\n        return false;\n    }", "signature": "Boolean apply(PDDocument document)", "full_signature": "@Override public Boolean apply(PDDocument document)", "class_method_signature": "OptimizationRuler.apply(PDDocument document)", "testcase": false, "constructor": false, "invocations": ["willNeedOptimization"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}