{"test_class": {"identifier": "XmlMessageTypeCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HEADER_VAL_FASTINFOSET = \"application/fastinfoset\";", "modifier": "private static final", "type": "String", "declarator": "HEADER_VAL_FASTINFOSET = \"application/fastinfoset\"", "var_name": "HEADER_VAL_FASTINFOSET"}, {"original_string": "private static final String HEADER_VAL_XML = \"application/xml\";", "modifier": "private static final", "type": "String", "declarator": "HEADER_VAL_XML = \"application/xml\"", "var_name": "HEADER_VAL_XML"}, {"original_string": "private static final String CONTENT_TYPE_HEADER = \"Content-Type\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE_HEADER = \"Content-Type\"", "var_name": "CONTENT_TYPE_HEADER"}, {"original_string": "private static final String TEXT_PLAIN = \"text/plain\";", "modifier": "private static final", "type": "String", "declarator": "TEXT_PLAIN = \"text/plain\"", "var_name": "TEXT_PLAIN"}, {"original_string": "private ParameterList parameterList;", "modifier": "private", "type": "ParameterList", "declarator": "parameterList", "var_name": "parameterList"}, {"original_string": "@Mock\n    private XQueryExpressionEvaluator xQueryEvaluator;", "modifier": "@Mock\n    private", "type": "XQueryExpressionEvaluator", "declarator": "xQueryEvaluator", "var_name": "xQueryEvaluator"}, {"original_string": "@Mock\n    private WilmaHttpRequest request;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@InjectMocks\n    private XmlMessageTypeChecker underTest;", "modifier": "@InjectMocks\n    private", "type": "XmlMessageTypeChecker", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-stub-configuration-support/src/test/java/com/epam/wilma/stubconfig/condition/checker/xml/XmlMessageTypeCheckerTest.java"}, "test_case": {"identifier": "testCheckConditionShouldReturnTrueWhenQueryResultFalse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckConditionShouldReturnTrueWhenQueryResultFalse() throws SaxonApiException {\n        //GIVEN\n        given(request.getHeader(CONTENT_TYPE_HEADER)).willReturn(HEADER_VAL_XML);\n        parameterList.addParameter(new Parameter(TEXT_PLAIN, HEADER_VAL_XML));\n        given(xQueryEvaluator.evaluateXQuery(anyString(), anyString())).willReturn(\"true\");\n        //WHEN\n        boolean actual = underTest.checkCondition(request, parameterList);\n        //TNEN\n        assertTrue(actual);\n    }", "signature": "void testCheckConditionShouldReturnTrueWhenQueryResultFalse()", "full_signature": "@Test public void testCheckConditionShouldReturnTrueWhenQueryResultFalse()", "class_method_signature": "XmlMessageTypeCheckerTest.testCheckConditionShouldReturnTrueWhenQueryResultFalse()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getHeader", "addParameter", "willReturn", "given", "evaluateXQuery", "anyString", "anyString", "checkCondition", "assertTrue"]}, "focal_class": {"identifier": "XmlMessageTypeChecker", "superclass": "", "interfaces": "implements ConditionChecker", "fields": [{"original_string": "private static final String FASTINFOSET_CONTENT = \"application/fastinfoset\";", "modifier": "private static final", "type": "String", "declarator": "FASTINFOSET_CONTENT = \"application/fastinfoset\"", "var_name": "FASTINFOSET_CONTENT"}, {"original_string": "private static final String XML_CONTENT = \"xml\";", "modifier": "private static final", "type": "String", "declarator": "XML_CONTENT = \"xml\"", "var_name": "XML_CONTENT"}, {"original_string": "private static final String CONTENT_TYPE_HEADER = \"Content-Type\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE_HEADER = \"Content-Type\"", "var_name": "CONTENT_TYPE_HEADER"}, {"original_string": "private static final String XML_DECLARATION_TAG = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\";", "modifier": "private static final", "type": "String", "declarator": "XML_DECLARATION_TAG = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"", "var_name": "XML_DECLARATION_TAG"}, {"original_string": "@Autowired\n    private XQueryExpressionEvaluator xQueryEvaluator;", "modifier": "@Autowired\n    private", "type": "XQueryExpressionEvaluator", "declarator": "xQueryEvaluator", "var_name": "xQueryEvaluator"}], "methods": [{"identifier": "checkCondition", "parameters": "(final WilmaHttpRequest request, final ParameterList parameterList)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterList)", "full_signature": "@Override public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterList)", "class_method_signature": "XmlMessageTypeChecker.checkCondition(final WilmaHttpRequest request, final ParameterList parameterList)", "testcase": false, "constructor": false}, {"identifier": "checkContentTypeIsXml", "parameters": "(final String contentType)", "modifiers": "private", "return": "boolean", "signature": "boolean checkContentTypeIsXml(final String contentType)", "full_signature": "private boolean checkContentTypeIsXml(final String contentType)", "class_method_signature": "XmlMessageTypeChecker.checkContentTypeIsXml(final String contentType)", "testcase": false, "constructor": false}, {"identifier": "evaluateQueryWithParamCheck", "parameters": "(final WilmaHttpRequest request, final ParameterList parameterList)", "modifiers": "private", "return": "String", "signature": "String evaluateQueryWithParamCheck(final WilmaHttpRequest request, final ParameterList parameterList)", "full_signature": "private String evaluateQueryWithParamCheck(final WilmaHttpRequest request, final ParameterList parameterList)", "class_method_signature": "XmlMessageTypeChecker.evaluateQueryWithParamCheck(final WilmaHttpRequest request, final ParameterList parameterList)", "testcase": false, "constructor": false}, {"identifier": "evaluateQuery", "parameters": "(final WilmaHttpRequest request, final String nodeName)", "modifiers": "private", "return": "String", "signature": "String evaluateQuery(final WilmaHttpRequest request, final String nodeName)", "full_signature": "private String evaluateQuery(final WilmaHttpRequest request, final String nodeName)", "class_method_signature": "XmlMessageTypeChecker.evaluateQuery(final WilmaHttpRequest request, final String nodeName)", "testcase": false, "constructor": false}, {"identifier": "removeXmlDeclarationTagFromXQueryResult", "parameters": "(final String nameSpaceWithXmlDecTag)", "modifiers": "private", "return": "String", "signature": "String removeXmlDeclarationTagFromXQueryResult(final String nameSpaceWithXmlDecTag)", "full_signature": "private String removeXmlDeclarationTagFromXQueryResult(final String nameSpaceWithXmlDecTag)", "class_method_signature": "XmlMessageTypeChecker.removeXmlDeclarationTagFromXQueryResult(final String nameSpaceWithXmlDecTag)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-support/src/main/java/com/epam/wilma/stubconfig/condition/checker/xml/XmlMessageTypeChecker.java"}, "focal_method": {"identifier": "checkCondition", "parameters": "(final WilmaHttpRequest request, final ParameterList parameterList)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterList) {\n        boolean result = false;\n        String contentType = request.getHeader(CONTENT_TYPE_HEADER);\n        if (checkContentTypeIsXml(contentType)) {\n            result = Boolean.valueOf(evaluateQueryWithParamCheck(request, parameterList));\n        }\n        return result;\n    }", "signature": "boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterList)", "full_signature": "@Override public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterList)", "class_method_signature": "XmlMessageTypeChecker.checkCondition(final WilmaHttpRequest request, final ParameterList parameterList)", "testcase": false, "constructor": false, "invocations": ["getHeader", "checkContentTypeIsXml", "valueOf", "evaluateQueryWithParamCheck"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}