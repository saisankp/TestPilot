{"test_class": {"identifier": "AsyncIconTest", "superclass": "", "interfaces": "", "fields": [], "file": "android/testSrc/com/android/tools/idea/ui/resourcechooser/icons/AsyncIconTest.java"}, "test_case": {"identifier": "testAsyncIcon", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAsyncIcon() {\n    CompletableFuture<Icon> futureIcon = new CompletableFuture();\n    Icon placeholder = EmptyIcon.create(50, 40);\n    AtomicInteger loaded = new AtomicInteger(0);\n\n    AsyncIcon asyncIcon = new AsyncIcon(futureIcon, placeholder, loaded::incrementAndGet);\n\n    assertEquals(0, loaded.get());\n    assertEquals(50, asyncIcon.getIconWidth());\n    assertEquals(40, asyncIcon.getIconHeight());\n\n    AtomicInteger painted = new AtomicInteger(0);\n    Icon mockIcon = new Icon() {\n      @Override\n      public void paintIcon(Component c, Graphics g, int x, int y) {\n        painted.incrementAndGet();\n      }\n\n      @Override\n      public int getIconWidth() {\n        return 50;\n      }\n\n      @Override\n      public int getIconHeight() {\n        return 40;\n      }\n    };\n\n    // This will still paint the placeholder since the Future is still pending\n    asyncIcon.paintIcon(null, null, 1, 2);\n    assertEquals(0, painted.get());\n\n    futureIcon.complete(mockIcon);\n    assertEquals(1, loaded.get());\n\n    asyncIcon.paintIcon(null, null, 1, 2);\n    assertEquals(1, painted.get());\n\n    // Now check with an icon that it's already loaded (we didn't have to wait for it)\n    asyncIcon = new AsyncIcon(\n      CompletableFuture.completedFuture(mockIcon),\n      placeholder,\n      loaded::incrementAndGet);\n    assertEquals(2, loaded.get());\n    asyncIcon.paintIcon(null, null, 1, 2);\n    assertEquals(2, painted.get());\n  }", "signature": "void testAsyncIcon()", "full_signature": "@Test public void testAsyncIcon()", "class_method_signature": "AsyncIconTest.testAsyncIcon()", "testcase": true, "constructor": false, "invocations": ["create", "assertEquals", "get", "assertEquals", "getIconWidth", "assertEquals", "getIconHeight", "incrementAndGet", "paintIcon", "assertEquals", "get", "complete", "assertEquals", "get", "paintIcon", "assertEquals", "get", "completedFuture", "assertEquals", "get", "paintIcon", "assertEquals", "get"]}, "focal_class": {"identifier": "AsyncIcon", "superclass": "", "interfaces": "implements Icon", "fields": [{"original_string": "@NotNull private Icon myIcon;", "modifier": "@NotNull private", "type": "Icon", "declarator": "myIcon", "var_name": "myIcon"}, {"original_string": "private final int myW;", "modifier": "private final", "type": "int", "declarator": "myW", "var_name": "myW"}, {"original_string": "private final int myH;", "modifier": "private final", "type": "int", "declarator": "myH", "var_name": "myH"}], "methods": [{"identifier": "AsyncIcon", "parameters": "(@NotNull CompletableFuture<? extends Icon> futureIcon,\n                   @NotNull Icon placeholderIcon,\n                   @Nullable Runnable onIconLoad)", "modifiers": "", "return": "", "signature": " AsyncIcon(@NotNull CompletableFuture<? extends Icon> futureIcon,\n                   @NotNull Icon placeholderIcon,\n                   @Nullable Runnable onIconLoad)", "full_signature": "  AsyncIcon(@NotNull CompletableFuture<? extends Icon> futureIcon,\n                   @NotNull Icon placeholderIcon,\n                   @Nullable Runnable onIconLoad)", "class_method_signature": "AsyncIcon.AsyncIcon(@NotNull CompletableFuture<? extends Icon> futureIcon,\n                   @NotNull Icon placeholderIcon,\n                   @Nullable Runnable onIconLoad)", "testcase": false, "constructor": true}, {"identifier": "paintIcon", "parameters": "(Component c, Graphics g, int x, int y)", "modifiers": "@Override public", "return": "void", "signature": "void paintIcon(Component c, Graphics g, int x, int y)", "full_signature": "@Override public void paintIcon(Component c, Graphics g, int x, int y)", "class_method_signature": "AsyncIcon.paintIcon(Component c, Graphics g, int x, int y)", "testcase": false, "constructor": false}, {"identifier": "getIconWidth", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getIconWidth()", "full_signature": "@Override public int getIconWidth()", "class_method_signature": "AsyncIcon.getIconWidth()", "testcase": false, "constructor": false}, {"identifier": "getIconHeight", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getIconHeight()", "full_signature": "@Override public int getIconHeight()", "class_method_signature": "AsyncIcon.getIconHeight()", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/ui/resourcechooser/icons/AsyncIcon.java"}, "focal_method": {"identifier": "AsyncIcon", "parameters": "(@NotNull CompletableFuture<? extends Icon> futureIcon,\n                   @NotNull Icon placeholderIcon,\n                   @Nullable Runnable onIconLoad)", "modifiers": "", "return": "", "body": "AsyncIcon(@NotNull CompletableFuture<? extends Icon> futureIcon,\n                   @NotNull Icon placeholderIcon,\n                   @Nullable Runnable onIconLoad) {\n    myIcon = placeholderIcon;\n    myW = placeholderIcon.getIconWidth();\n    myH = placeholderIcon.getIconHeight();\n\n    futureIcon.whenComplete((result, e) -> {\n      if (e != null) {\n        Logger.getInstance(AsyncIcon.class).warn(\"Unable to load AsyncIcon\", e);\n        return;\n      }\n\n      if (result != null) {\n        myIcon = result;\n      }\n\n      if (onIconLoad != null) {\n        onIconLoad.run();\n      }\n    });\n  }", "signature": " AsyncIcon(@NotNull CompletableFuture<? extends Icon> futureIcon,\n                   @NotNull Icon placeholderIcon,\n                   @Nullable Runnable onIconLoad)", "full_signature": "  AsyncIcon(@NotNull CompletableFuture<? extends Icon> futureIcon,\n                   @NotNull Icon placeholderIcon,\n                   @Nullable Runnable onIconLoad)", "class_method_signature": "AsyncIcon.AsyncIcon(@NotNull CompletableFuture<? extends Icon> futureIcon,\n                   @NotNull Icon placeholderIcon,\n                   @Nullable Runnable onIconLoad)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}