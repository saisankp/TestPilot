{"test_class": {"identifier": "MatchResultWithOffsetTest", "superclass": "", "interfaces": "", "fields": [], "file": "streamflyer-core/src/test/java/com/github/rwitzel/streamflyer/regex/addons/tokens/MatchResultWithOffsetTest.java"}, "test_case": {"identifier": "testGroupCountAndMore_UNEXPECTED_notMatchingGroupsAfterEndOfTargetGroupIncluded", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGroupCountAndMore_UNEXPECTED_notMatchingGroupsAfterEndOfTargetGroupIncluded() throws Exception {\n\n        String input = \"1xxnnnnnnnnnn\";\n        String regex = \"(1xx(2yy)?)(3zz)?\";\n        Matcher matcher = Pattern.compile(regex).matcher(input);\n        assertTrue(matcher.find());\n        assertEquals(3, matcher.groupCount()); // principle of the longest possible match\n\n        {\n            // offset = 1 -> \"1xx\" will be the match result\n            MatchResultWithOffset mo = new MatchResultWithOffset(matcher, 1);\n            assertGroup(-1, \"1xx\", 0, 3, mo);\n            assertGroup(0, \"1xx\", 0, 3, mo);\n            assertGroup(1, null, -1, -1, mo); // group \"(2yy)?\"\n            assertGroup(2, null, -1, -1, mo); // group \"(3yy)?\" UNEXPECTED!\n            assertEquals(2, mo.groupCount()); // UNEXPECTED!\n        }\n\n    }", "signature": "void testGroupCountAndMore_UNEXPECTED_notMatchingGroupsAfterEndOfTargetGroupIncluded()", "full_signature": "@Test public void testGroupCountAndMore_UNEXPECTED_notMatchingGroupsAfterEndOfTargetGroupIncluded()", "class_method_signature": "MatchResultWithOffsetTest.testGroupCountAndMore_UNEXPECTED_notMatchingGroupsAfterEndOfTargetGroupIncluded()", "testcase": true, "constructor": false, "invocations": ["matcher", "compile", "assertTrue", "find", "assertEquals", "groupCount", "assertGroup", "assertGroup", "assertGroup", "assertGroup", "assertEquals", "groupCount"]}, "focal_class": {"identifier": "MatchResultWithOffset", "superclass": "", "interfaces": "implements MatchResult", "fields": [{"original_string": "private MatchResult delegate;", "modifier": "private", "type": "MatchResult", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private int groupOffset;", "modifier": "private", "type": "int", "declarator": "groupOffset", "var_name": "groupOffset"}, {"original_string": "private Integer groupCount;", "modifier": "private", "type": "Integer", "declarator": "groupCount", "var_name": "groupCount"}], "methods": [{"identifier": "MatchResultWithOffset", "parameters": "(MatchResult delegate, int groupOffset)", "modifiers": "public", "return": "", "signature": " MatchResultWithOffset(MatchResult delegate, int groupOffset)", "full_signature": "public  MatchResultWithOffset(MatchResult delegate, int groupOffset)", "class_method_signature": "MatchResultWithOffset.MatchResultWithOffset(MatchResult delegate, int groupOffset)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int start()", "full_signature": "@Override public int start()", "class_method_signature": "MatchResultWithOffset.start()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(int group)", "modifiers": "@Override public", "return": "int", "signature": "int start(int group)", "full_signature": "@Override public int start(int group)", "class_method_signature": "MatchResultWithOffset.start(int group)", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int end()", "full_signature": "@Override public int end()", "class_method_signature": "MatchResultWithOffset.end()", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "(int group)", "modifiers": "@Override public", "return": "int", "signature": "int end(int group)", "full_signature": "@Override public int end(int group)", "class_method_signature": "MatchResultWithOffset.end(int group)", "testcase": false, "constructor": false}, {"identifier": "group", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String group()", "full_signature": "@Override public String group()", "class_method_signature": "MatchResultWithOffset.group()", "testcase": false, "constructor": false}, {"identifier": "group", "parameters": "(int group)", "modifiers": "@Override public", "return": "String", "signature": "String group(int group)", "full_signature": "@Override public String group(int group)", "class_method_signature": "MatchResultWithOffset.group(int group)", "testcase": false, "constructor": false}, {"identifier": "groupCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int groupCount()", "full_signature": "@Override public int groupCount()", "class_method_signature": "MatchResultWithOffset.groupCount()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MatchResultWithOffset.toString()", "testcase": false, "constructor": false}], "file": "streamflyer-core/src/main/java/com/github/rwitzel/streamflyer/regex/addons/tokens/MatchResultWithOffset.java"}, "focal_method": {"identifier": "groupCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int groupCount() {\n        if (groupCount == null) {\n            int groupIndex = groupOffset + 1;\n            while (groupIndex <= delegate.groupCount() && delegate.end(groupIndex) <= delegate.end(groupOffset)) {\n                groupIndex++;\n            }\n            groupCount = (groupIndex - 1) - groupOffset;\n        }\n        return groupCount;\n    }", "signature": "int groupCount()", "full_signature": "@Override public int groupCount()", "class_method_signature": "MatchResultWithOffset.groupCount()", "testcase": false, "constructor": false, "invocations": ["groupCount", "end", "end"]}, "repository": {"repo_id": 32796510, "url": "https://github.com/rwitzel/streamflyer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 26, "size": 2880, "license": "licensed"}}