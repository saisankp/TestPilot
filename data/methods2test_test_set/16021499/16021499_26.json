{"test_class": {"identifier": "AdminPermissionCheckerTest", "superclass": "extends IntegrationTestBase", "interfaces": "", "fields": [{"original_string": "private static final String TEST_USER = \"testUser\";", "modifier": "private static final", "type": "String", "declarator": "TEST_USER = \"testUser\"", "var_name": "TEST_USER"}], "file": "vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/impl/AdminPermissionCheckerTest.java"}, "test_case": {"identifier": "testAdditionalAdminGroup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAdditionalAdminGroup() throws Exception {\n        JackrabbitSession jackrabbitSession = (JackrabbitSession) admin;\n        Authorizable admins = jackrabbitSession.getUserManager().getAuthorizable(\"myadmins\");\n        if (admins == null) {\n            admins = jackrabbitSession.getUserManager().createGroup(\"myadmins\");\n        }\n        Group adminsGroup = (Group) admins;\n        User testUser = (User) jackrabbitSession.getUserManager().getAuthorizable(TEST_USER);\n        if (testUser == null) {\n            testUser = jackrabbitSession.getUserManager().createUser(TEST_USER, TEST_USER);\n        }\n        adminsGroup.addMember(testUser);\n        admin.save();\n        Session session = repository.login(new SimpleCredentials(TEST_USER, TEST_USER.toCharArray()));\n        try {\n            assertTrue(\n                    \"user \\\"\" + TEST_USER + \"\\\" has been added to additional administrators group thus should have admin permissions\",\n                    AdminPermissionChecker.hasAdministrativePermissions(session, \"myadmins\"));\n        } finally {\n            session.logout();\n        }\n    }", "signature": "void testAdditionalAdminGroup()", "full_signature": "@Test public void testAdditionalAdminGroup()", "class_method_signature": "AdminPermissionCheckerTest.testAdditionalAdminGroup()", "testcase": true, "constructor": false, "invocations": ["getAuthorizable", "getUserManager", "createGroup", "getUserManager", "getAuthorizable", "getUserManager", "createUser", "getUserManager", "addMember", "save", "login", "toCharArray", "assertTrue", "hasAdministrativePermissions", "logout"]}, "focal_class": {"identifier": "AdminPermissionChecker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(AdminPermissionChecker.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AdminPermissionChecker.class)", "var_name": "log"}, {"original_string": "private static final String ADMIN_USER = \"admin\";", "modifier": "private static final", "type": "String", "declarator": "ADMIN_USER = \"admin\"", "var_name": "ADMIN_USER"}, {"original_string": "private static final String SYSTEM_USER = \"system\";", "modifier": "private static final", "type": "String", "declarator": "SYSTEM_USER = \"system\"", "var_name": "SYSTEM_USER"}, {"original_string": "private static final String ADMINISTRATORS_GROUP = \"administrators\";", "modifier": "private static final", "type": "String", "declarator": "ADMINISTRATORS_GROUP = \"administrators\"", "var_name": "ADMINISTRATORS_GROUP"}], "methods": [{"identifier": "hasAdministrativePermissions", "parameters": "(@NotNull Session session, String... additionalAdminAuthorizableIds)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasAdministrativePermissions(@NotNull Session session, String... additionalAdminAuthorizableIds)", "full_signature": "public static boolean hasAdministrativePermissions(@NotNull Session session, String... additionalAdminAuthorizableIds)", "class_method_signature": "AdminPermissionChecker.hasAdministrativePermissions(@NotNull Session session, String... additionalAdminAuthorizableIds)", "testcase": false, "constructor": false}], "file": "vault-core/src/main/java/org/apache/jackrabbit/vault/packaging/impl/AdminPermissionChecker.java"}, "focal_method": {"identifier": "hasAdministrativePermissions", "parameters": "(@NotNull Session session, String... additionalAdminAuthorizableIds)", "modifiers": "public static", "return": "boolean", "body": "public static boolean hasAdministrativePermissions(@NotNull Session session, String... additionalAdminAuthorizableIds) throws RepositoryException {\n        String userId = session.getUserID();\n        if (ADMIN_USER.equals(userId) || SYSTEM_USER.equals(userId)) {\n            return true;\n        }\n        List<String> additionalAdminIds = Arrays.asList(Optional.ofNullable(additionalAdminAuthorizableIds).orElse(new String[0]));\n        if (additionalAdminIds.contains(userId)) {\n            return true;\n        }\n        if (!(session instanceof JackrabbitSession)) {\n            log.warn(\"could not evaluate group permissions but just user name\");\n            return false;\n        }\n\n        JackrabbitSession jackrabbitSession = (JackrabbitSession) session;\n        Authorizable authorizable = jackrabbitSession.getUserManager().getAuthorizable(userId);\n        if (authorizable == null) {\n            return false;\n        }\n\n        Iterator<Group> groupIterator = authorizable.memberOf();\n        while (groupIterator.hasNext()) {\n            String groupId = groupIterator.next().getID();\n            if (ADMINISTRATORS_GROUP.equals(groupId)) {\n                return true;\n            }\n            if (additionalAdminIds.contains(groupId)) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "signature": "boolean hasAdministrativePermissions(@NotNull Session session, String... additionalAdminAuthorizableIds)", "full_signature": "public static boolean hasAdministrativePermissions(@NotNull Session session, String... additionalAdminAuthorizableIds)", "class_method_signature": "AdminPermissionChecker.hasAdministrativePermissions(@NotNull Session session, String... additionalAdminAuthorizableIds)", "testcase": false, "constructor": false, "invocations": ["getUserID", "equals", "equals", "asList", "orElse", "ofNullable", "contains", "warn", "getAuthorizable", "getUserManager", "memberOf", "hasNext", "getID", "next", "equals", "contains"]}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}