{"test_class": {"identifier": "UserNamespaceAuthorizationRestControllerTest", "superclass": "extends AbstractRestTest", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private UserNamespaceAuthorizationRestController userNamespaceAuthorizationRestController;", "modifier": "@InjectMocks\n    private", "type": "UserNamespaceAuthorizationRestController", "declarator": "userNamespaceAuthorizationRestController", "var_name": "userNamespaceAuthorizationRestController"}, {"original_string": "@Mock\n    private UserNamespaceAuthorizationService userNamespaceAuthorizationService;", "modifier": "@Mock\n    private", "type": "UserNamespaceAuthorizationService", "declarator": "userNamespaceAuthorizationService", "var_name": "userNamespaceAuthorizationService"}], "file": "herd-code/herd-rest/src/test/java/org/finra/herd/rest/UserNamespaceAuthorizationRestControllerTest.java"}, "test_case": {"identifier": "testGetUserNamespaceAuthorization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetUserNamespaceAuthorization()\n    {\n        // Create a user namespace authorization key\n        UserNamespaceAuthorizationKey key = new UserNamespaceAuthorizationKey(USER_ID, NAMESPACE);\n\n        UserNamespaceAuthorization userNamespaceAuthorization = new UserNamespaceAuthorization(ID, key, SUPPORTED_NAMESPACE_PERMISSIONS);\n\n        when(userNamespaceAuthorizationService.getUserNamespaceAuthorization(key)).thenReturn(userNamespaceAuthorization);\n\n        // Get a user namespace authorization.\n        UserNamespaceAuthorization resultUserNamespaceAuthorization =\n            userNamespaceAuthorizationRestController.getUserNamespaceAuthorization(key.getUserId(), key.getNamespace());\n\n        // Verify the external calls.\n        verify(userNamespaceAuthorizationService).getUserNamespaceAuthorization(key);\n        verifyNoMoreInteractions(userNamespaceAuthorizationService);\n\n        // Validate the returned object.\n        assertEquals(userNamespaceAuthorization, resultUserNamespaceAuthorization);\n    }", "signature": "void testGetUserNamespaceAuthorization()", "full_signature": "@Test public void testGetUserNamespaceAuthorization()", "class_method_signature": "UserNamespaceAuthorizationRestControllerTest.testGetUserNamespaceAuthorization()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getUserNamespaceAuthorization", "getUserNamespaceAuthorization", "getUserId", "getNamespace", "getUserNamespaceAuthorization", "verify", "verifyNoMoreInteractions", "assertEquals"]}, "focal_class": {"identifier": "UserNamespaceAuthorizationRestController", "superclass": "extends HerdBaseController", "interfaces": "", "fields": [{"original_string": "public static final String USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX = \"/userNamespaceAuthorizations\";", "modifier": "public static final", "type": "String", "declarator": "USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX = \"/userNamespaceAuthorizations\"", "var_name": "USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX"}, {"original_string": "@Autowired\n    private UserNamespaceAuthorizationService userNamespaceAuthorizationService;", "modifier": "@Autowired\n    private", "type": "UserNamespaceAuthorizationService", "declarator": "userNamespaceAuthorizationService", "var_name": "userNamespaceAuthorizationService"}], "methods": [{"identifier": "createUserNamespaceAuthorization", "parameters": "(@RequestBody UserNamespaceAuthorizationCreateRequest request)", "modifiers": "@RequestMapping(value = USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX, method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_USER_NAMESPACE_AUTHORIZATIONS_POST) public", "return": "UserNamespaceAuthorization", "signature": "UserNamespaceAuthorization createUserNamespaceAuthorization(@RequestBody UserNamespaceAuthorizationCreateRequest request)", "full_signature": "@RequestMapping(value = USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX, method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_USER_NAMESPACE_AUTHORIZATIONS_POST) public UserNamespaceAuthorization createUserNamespaceAuthorization(@RequestBody UserNamespaceAuthorizationCreateRequest request)", "class_method_signature": "UserNamespaceAuthorizationRestController.createUserNamespaceAuthorization(@RequestBody UserNamespaceAuthorizationCreateRequest request)", "testcase": false, "constructor": false}, {"identifier": "updateUserNamespaceAuthorization", "parameters": "(@PathVariable(\"userId\") String userId, @PathVariable(\"namespace\") String namespace,\n        @RequestBody UserNamespaceAuthorizationUpdateRequest request)", "modifiers": "@RequestMapping(value = USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX + \"/userIds/{userId}/namespaces/{namespace}\", method = RequestMethod.PUT, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_USER_NAMESPACE_AUTHORIZATIONS_PUT) public", "return": "UserNamespaceAuthorization", "signature": "UserNamespaceAuthorization updateUserNamespaceAuthorization(@PathVariable(\"userId\") String userId, @PathVariable(\"namespace\") String namespace,\n        @RequestBody UserNamespaceAuthorizationUpdateRequest request)", "full_signature": "@RequestMapping(value = USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX + \"/userIds/{userId}/namespaces/{namespace}\", method = RequestMethod.PUT, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_USER_NAMESPACE_AUTHORIZATIONS_PUT) public UserNamespaceAuthorization updateUserNamespaceAuthorization(@PathVariable(\"userId\") String userId, @PathVariable(\"namespace\") String namespace,\n        @RequestBody UserNamespaceAuthorizationUpdateRequest request)", "class_method_signature": "UserNamespaceAuthorizationRestController.updateUserNamespaceAuthorization(@PathVariable(\"userId\") String userId, @PathVariable(\"namespace\") String namespace,\n        @RequestBody UserNamespaceAuthorizationUpdateRequest request)", "testcase": false, "constructor": false}, {"identifier": "getUserNamespaceAuthorization", "parameters": "(@PathVariable(\"userId\") String userId, @PathVariable(\"namespace\") String namespace)", "modifiers": "@RequestMapping(value = USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX + \"/userIds/{userId}/namespaces/{namespace}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_USER_NAMESPACE_AUTHORIZATIONS_GET) public", "return": "UserNamespaceAuthorization", "signature": "UserNamespaceAuthorization getUserNamespaceAuthorization(@PathVariable(\"userId\") String userId, @PathVariable(\"namespace\") String namespace)", "full_signature": "@RequestMapping(value = USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX + \"/userIds/{userId}/namespaces/{namespace}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_USER_NAMESPACE_AUTHORIZATIONS_GET) public UserNamespaceAuthorization getUserNamespaceAuthorization(@PathVariable(\"userId\") String userId, @PathVariable(\"namespace\") String namespace)", "class_method_signature": "UserNamespaceAuthorizationRestController.getUserNamespaceAuthorization(@PathVariable(\"userId\") String userId, @PathVariable(\"namespace\") String namespace)", "testcase": false, "constructor": false}, {"identifier": "deleteUserNamespaceAuthorization", "parameters": "(@PathVariable(\"userId\") String userId, @PathVariable(\"namespace\") String namespace)", "modifiers": "@RequestMapping(value = USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX + \"/userIds/{userId}/namespaces/{namespace}\", method = RequestMethod.DELETE) @Secured(SecurityFunctions.FN_USER_NAMESPACE_AUTHORIZATIONS_DELETE) public", "return": "UserNamespaceAuthorization", "signature": "UserNamespaceAuthorization deleteUserNamespaceAuthorization(@PathVariable(\"userId\") String userId, @PathVariable(\"namespace\") String namespace)", "full_signature": "@RequestMapping(value = USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX + \"/userIds/{userId}/namespaces/{namespace}\", method = RequestMethod.DELETE) @Secured(SecurityFunctions.FN_USER_NAMESPACE_AUTHORIZATIONS_DELETE) public UserNamespaceAuthorization deleteUserNamespaceAuthorization(@PathVariable(\"userId\") String userId, @PathVariable(\"namespace\") String namespace)", "class_method_signature": "UserNamespaceAuthorizationRestController.deleteUserNamespaceAuthorization(@PathVariable(\"userId\") String userId, @PathVariable(\"namespace\") String namespace)", "testcase": false, "constructor": false}, {"identifier": "getUserNamespaceAuthorizationsByUserId", "parameters": "(@PathVariable(\"userId\") String userId)", "modifiers": "@RequestMapping(value = USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX + \"/userIds/{userId}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_USER_NAMESPACE_AUTHORIZATIONS_BY_USERID_GET) public", "return": "UserNamespaceAuthorizations", "signature": "UserNamespaceAuthorizations getUserNamespaceAuthorizationsByUserId(@PathVariable(\"userId\") String userId)", "full_signature": "@RequestMapping(value = USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX + \"/userIds/{userId}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_USER_NAMESPACE_AUTHORIZATIONS_BY_USERID_GET) public UserNamespaceAuthorizations getUserNamespaceAuthorizationsByUserId(@PathVariable(\"userId\") String userId)", "class_method_signature": "UserNamespaceAuthorizationRestController.getUserNamespaceAuthorizationsByUserId(@PathVariable(\"userId\") String userId)", "testcase": false, "constructor": false}, {"identifier": "getUserNamespaceAuthorizationsByNamespace", "parameters": "(@PathVariable(\"namespace\") String namespace)", "modifiers": "@RequestMapping(value = USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX + \"/namespaces/{namespace}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_USER_NAMESPACE_AUTHORIZATIONS_BY_NAMESPACE_GET) public", "return": "UserNamespaceAuthorizations", "signature": "UserNamespaceAuthorizations getUserNamespaceAuthorizationsByNamespace(@PathVariable(\"namespace\") String namespace)", "full_signature": "@RequestMapping(value = USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX + \"/namespaces/{namespace}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_USER_NAMESPACE_AUTHORIZATIONS_BY_NAMESPACE_GET) public UserNamespaceAuthorizations getUserNamespaceAuthorizationsByNamespace(@PathVariable(\"namespace\") String namespace)", "class_method_signature": "UserNamespaceAuthorizationRestController.getUserNamespaceAuthorizationsByNamespace(@PathVariable(\"namespace\") String namespace)", "testcase": false, "constructor": false}], "file": "herd-code/herd-rest/src/main/java/org/finra/herd/rest/UserNamespaceAuthorizationRestController.java"}, "focal_method": {"identifier": "getUserNamespaceAuthorization", "parameters": "(@PathVariable(\"userId\") String userId, @PathVariable(\"namespace\") String namespace)", "modifiers": "@RequestMapping(value = USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX + \"/userIds/{userId}/namespaces/{namespace}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_USER_NAMESPACE_AUTHORIZATIONS_GET) public", "return": "UserNamespaceAuthorization", "body": "@RequestMapping(value = USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX + \"/userIds/{userId}/namespaces/{namespace}\",\n        method = RequestMethod.GET)\n    @Secured(SecurityFunctions.FN_USER_NAMESPACE_AUTHORIZATIONS_GET)\n    public UserNamespaceAuthorization getUserNamespaceAuthorization(@PathVariable(\"userId\") String userId, @PathVariable(\"namespace\") String namespace)\n    {\n        return userNamespaceAuthorizationService.getUserNamespaceAuthorization(new UserNamespaceAuthorizationKey(userId, namespace));\n    }", "signature": "UserNamespaceAuthorization getUserNamespaceAuthorization(@PathVariable(\"userId\") String userId, @PathVariable(\"namespace\") String namespace)", "full_signature": "@RequestMapping(value = USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX + \"/userIds/{userId}/namespaces/{namespace}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_USER_NAMESPACE_AUTHORIZATIONS_GET) public UserNamespaceAuthorization getUserNamespaceAuthorization(@PathVariable(\"userId\") String userId, @PathVariable(\"namespace\") String namespace)", "class_method_signature": "UserNamespaceAuthorizationRestController.getUserNamespaceAuthorization(@PathVariable(\"userId\") String userId, @PathVariable(\"namespace\") String namespace)", "testcase": false, "constructor": false, "invocations": ["getUserNamespaceAuthorization"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}