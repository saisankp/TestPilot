{"test_class": {"identifier": "CookiesSetterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "IField field;", "modifier": "", "type": "IField", "declarator": "field", "var_name": "field"}], "file": "CoreFeatures/HttpEndpoint/CookiesSetter/src/test/java/info/smart_tools/smartactors/http_endpoint/cookies_setter/CookiesSetterTest.java"}, "test_case": {"identifier": "testCookiesSettingWithTime_ShouldSetDiscard", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCookiesSettingWithTime_ShouldSetDiscard()\n            throws InvalidArgumentException, CookieSettingException, ReadValueException {\n        FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);\n        CookiesSetter setter = new CookiesSetter();\n        IObject environment = new DSObject(\"{\\n\" +\n                \"  \\\"context\\\": {\\n\" +\n                \"    \\\"cookies\\\": [\\n\" +\n                \"      {\\n\" +\n                \"        \\\"name\\\": \\\"foo\\\", \" +\n                \"        \\\"value\\\": \\\"bar\\\",\\n\" +\n                \"         \\\"maxAge\\\": 12 \\n\" +\n                \"      },\\n\" +\n                \"      {\\n\" +\n                \"        \\\"name\\\": \\\"hello\\\",  \" +\n                \"        \\\"value\\\": \\\"world\\\"\\n\" +\n                \"      }\\n\" +\n                \"    ]\\n\" +\n                \"  }\\n\" +\n                \"}\");\n        IObject context = new DSObject(\n                \" {\" +\n                        \"    \\\"cookies\\\": [\\n\" +\n                        \"      {\\n\" +\n                        \"        \\\"name\\\": \\\"foo\\\", \" +\n                        \"        \\\"value\\\": \\\"bar\\\",\\n\" +\n                        \"         \\\"maxAge\\\": 12 \\n\" +\n                        \"      },\\n\" +\n                        \"      {\\n\" +\n                        \"        \\\"name\\\": \\\"hello\\\",  \" +\n                        \"        \\\"value\\\": \\\"world\\\"\\n\" +\n                        \"      }\\n\" +\n                        \"    ]\\n\" +\n                        \"  }\\n\");\n        IObject cookie1 = new DSObject(\"{\\n\" +\n                \"        \\\"name\\\": \\\"foo\\\", \" +\n                \"        \\\"value\\\": \\\"bar\\\",\\n\" +\n                \"         \\\"maxAge\\\": 12 \\n\" +\n                \"      }\");\n        IObject cookie2 = new DSObject(\"{\\n\" +\n                \"        \\\"name\\\": \\\"hello\\\", \" +\n                \"        \\\"value\\\": \\\"world\\\"\\n\" +\n                \"      }\");\n        List<IObject> cookies = new ArrayList<>(2);\n        cookies.add(cookie1);\n        cookies.add(cookie2);\n        when(field.in(environment, IObject.class)).thenReturn(context);\n        when(field.in(context, List.class)).thenReturn(cookies);\n        setter.set(response, environment);\n        List<String> cookiesString = response.headers().getAll(HttpHeaders.Names.SET_COOKIE);\n        assertTrue(cookiesString.get(0).lastIndexOf(\"Expires\")>0);\n        assertFalse(cookiesString.get(1).lastIndexOf(\"Expires\")>0);\n    }", "signature": "void testCookiesSettingWithTime_ShouldSetDiscard()", "full_signature": "@Test public void testCookiesSettingWithTime_ShouldSetDiscard()", "class_method_signature": "CookiesSetterTest.testCookiesSettingWithTime_ShouldSetDiscard()", "testcase": true, "constructor": false, "invocations": ["add", "add", "thenReturn", "when", "in", "thenReturn", "when", "in", "set", "getAll", "headers", "assertTrue", "lastIndexOf", "get", "assertFalse", "lastIndexOf", "get"]}, "focal_class": {"identifier": "CookiesSetter", "superclass": "", "interfaces": "implements ICookiesSetter", "fields": [], "methods": [{"identifier": "set", "parameters": "(final Object response, final IObject environment)", "modifiers": "@Override public", "return": "void", "signature": "void set(final Object response, final IObject environment)", "full_signature": "@Override public void set(final Object response, final IObject environment)", "class_method_signature": "CookiesSetter.set(final Object response, final IObject environment)", "testcase": false, "constructor": false}], "file": "CoreFeatures/HttpEndpoint/CookiesSetter/src/main/java/info/smart_tools/smartactors/http_endpoint/cookies_setter/CookiesSetter.java"}, "focal_method": {"identifier": "set", "parameters": "(final Object response, final IObject environment)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void set(final Object response, final IObject environment) throws CookieSettingException {\n        FullHttpResponse httpResponse = (FullHttpResponse) response;\n        IField contextField;\n        IField cookiesField;\n        IFieldName cookieName;\n        IFieldName cookieValue;\n        IFieldName maxAgeFieldName;\n        IFieldName cookiePath;\n        try {\n            contextField = IOC.resolve(Keys.getOrAdd(IField.class.getCanonicalName()), \"context\");\n            cookiesField = IOC.resolve(Keys.getOrAdd(IField.class.getCanonicalName()), \"cookies\");\n            cookieName = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"name\");\n            cookieValue = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"value\");\n            cookiePath = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"path\");\n            maxAgeFieldName = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"maxAge\");\n        } catch (ResolutionException e) {\n            throw new CookieSettingException(\"Failed to resolve fieldName\", e);\n        }\n        IObject context = null;\n        List<IObject> cookies = null;\n        try {\n            context = contextField.in(environment, IObject.class);\n        } catch (ReadValueException | InvalidArgumentException e) {\n            throw new CookieSettingException(\"Failed to get context from environment\", e);\n        }\n        try {\n            cookies = cookiesField.in(context, List.class);\n        } catch (ReadValueException | InvalidArgumentException e) {\n            throw new CookieSettingException(\"Failed to get cookies from context\", e);\n        }\n        List<Cookie> cookiesList = new ArrayList<>();\n        for (IObject cookieObject : cookies) {\n            try {\n                Cookie cookie = new DefaultCookie(\n                        cookieObject.getValue(cookieName).toString(),\n                        cookieObject.getValue(cookieValue).toString());\n\n                String path = (String) cookieObject.getValue(cookiePath);\n                if (path != null) {\n                    cookie.setPath(path);\n                }\n\n                Integer maxCookieAge = (Integer) cookieObject.getValue(maxAgeFieldName);\n                if (maxCookieAge != null) {\n                    cookie.setDiscard(false);\n                    cookie.setMaxAge(maxCookieAge);\n                }\n                cookiesList.add(cookie);\n            } catch (ReadValueException | InvalidArgumentException e) {\n                throw new CookieSettingException(\"Failed to resolve cookie\", e);\n            }\n        }\n        httpResponse.headers().set(HttpHeaders.Names.SET_COOKIE,\n                ServerCookieEncoder.encode(cookiesList));\n    }", "signature": "void set(final Object response, final IObject environment)", "full_signature": "@Override public void set(final Object response, final IObject environment)", "class_method_signature": "CookiesSetter.set(final Object response, final IObject environment)", "testcase": false, "constructor": false, "invocations": ["resolve", "getOrAdd", "getCanonicalName", "resolve", "getOrAdd", "getCanonicalName", "resolve", "getOrAdd", "resolve", "getOrAdd", "resolve", "getOrAdd", "resolve", "getOrAdd", "in", "in", "toString", "getValue", "toString", "getValue", "getValue", "setPath", "getValue", "setDiscard", "setMaxAge", "add", "set", "headers", "encode"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}