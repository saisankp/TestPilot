{"test_class": {"identifier": "AsyncResourceTest", "superclass": "extends ResourceTest", "interfaces": "", "fields": [{"original_string": "private TableMetadataManager tableMetadataManager;", "modifier": "private", "type": "TableMetadataManager", "declarator": "tableMetadataManager", "var_name": "tableMetadataManager"}, {"original_string": "private MockElasticsearchServer elasticsearchServer;", "modifier": "private", "type": "MockElasticsearchServer", "declarator": "elasticsearchServer", "var_name": "elasticsearchServer"}, {"original_string": "private HazelcastInstance hazelcastInstance;", "modifier": "private", "type": "HazelcastInstance", "declarator": "hazelcastInstance", "var_name": "hazelcastInstance"}, {"original_string": "private QueryExecutor queryExecutor;", "modifier": "private", "type": "QueryExecutor", "declarator": "queryExecutor", "var_name": "queryExecutor"}], "file": "real-time/foxtrot/foxtrot-server/src/test/java/com/flipkart/foxtrot/server/resources/AsyncResourceTest.java"}, "test_case": {"identifier": "testGetResponsePostInvalidAction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetResponsePostInvalidAction() throws Exception {\n        AsyncDataToken dataToken = new AsyncDataToken(null, UUID.randomUUID().toString());\n\n        try {\n            client().resource(\"/v1/async\")\n                    .type(MediaType.APPLICATION_JSON_TYPE)\n                    .post(GroupResponse.class, dataToken);\n        } catch (UniformInterfaceException ex) {\n            assertEquals(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), ex.getResponse().getStatus());\n        }\n    }", "signature": "void testGetResponsePostInvalidAction()", "full_signature": "@Test public void testGetResponsePostInvalidAction()", "class_method_signature": "AsyncResourceTest.testGetResponsePostInvalidAction()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "post", "type", "resource", "client", "assertEquals", "getStatusCode", "getStatus", "getResponse"]}, "focal_class": {"identifier": "AsyncResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AsyncResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AsyncResource.class)", "var_name": "logger"}], "methods": [{"identifier": "getResponse", "parameters": "(@PathParam(\"action\") final String action, @NotNull @PathParam(\"id\") final String id)", "modifiers": "@GET @Path(\"/{action}/{id}\") public", "return": "Response", "signature": "Response getResponse(@PathParam(\"action\") final String action, @NotNull @PathParam(\"id\") final String id)", "full_signature": "@GET @Path(\"/{action}/{id}\") public Response getResponse(@PathParam(\"action\") final String action, @NotNull @PathParam(\"id\") final String id)", "class_method_signature": "AsyncResource.getResponse(@PathParam(\"action\") final String action, @NotNull @PathParam(\"id\") final String id)", "testcase": false, "constructor": false}, {"identifier": "getResponsePost", "parameters": "(final AsyncDataToken dataToken)", "modifiers": "@POST public", "return": "Response", "signature": "Response getResponsePost(final AsyncDataToken dataToken)", "full_signature": "@POST public Response getResponsePost(final AsyncDataToken dataToken)", "class_method_signature": "AsyncResource.getResponsePost(final AsyncDataToken dataToken)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(final AsyncDataToken dataToken)", "modifiers": "private", "return": "ActionResponse", "signature": "ActionResponse getData(final AsyncDataToken dataToken)", "full_signature": "private ActionResponse getData(final AsyncDataToken dataToken)", "class_method_signature": "AsyncResource.getData(final AsyncDataToken dataToken)", "testcase": false, "constructor": false}], "file": "real-time/foxtrot/foxtrot-server/src/main/java/com/flipkart/foxtrot/server/resources/AsyncResource.java"}, "focal_method": {"identifier": "getResponse", "parameters": "(@PathParam(\"action\") final String action, @NotNull @PathParam(\"id\") final String id)", "modifiers": "@GET @Path(\"/{action}/{id}\") public", "return": "Response", "body": "@GET\n    @Path(\"/{action}/{id}\")\n    public Response getResponse(@PathParam(\"action\") final String action, @NotNull @PathParam(\"id\") final String id) {\n        return Response.ok(getData(new AsyncDataToken(action, id))).build();\n    }", "signature": "Response getResponse(@PathParam(\"action\") final String action, @NotNull @PathParam(\"id\") final String id)", "full_signature": "@GET @Path(\"/{action}/{id}\") public Response getResponse(@PathParam(\"action\") final String action, @NotNull @PathParam(\"id\") final String id)", "class_method_signature": "AsyncResource.getResponse(@PathParam(\"action\") final String action, @NotNull @PathParam(\"id\") final String id)", "testcase": false, "constructor": false, "invocations": ["build", "ok", "getData"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}