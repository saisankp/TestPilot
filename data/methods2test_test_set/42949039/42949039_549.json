{"test_class": {"identifier": "SecurityRoleFunctionServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@Mock\n    private SecurityFunctionDaoHelper securityFunctionDaoHelper;", "modifier": "@Mock\n    private", "type": "SecurityFunctionDaoHelper", "declarator": "securityFunctionDaoHelper", "var_name": "securityFunctionDaoHelper"}, {"original_string": "@Mock\n    private SecurityFunctionHelper securityFunctionHelper;", "modifier": "@Mock\n    private", "type": "SecurityFunctionHelper", "declarator": "securityFunctionHelper", "var_name": "securityFunctionHelper"}, {"original_string": "@Mock\n    private SecurityRoleDaoHelper securityRoleDaoHelper;", "modifier": "@Mock\n    private", "type": "SecurityRoleDaoHelper", "declarator": "securityRoleDaoHelper", "var_name": "securityRoleDaoHelper"}, {"original_string": "@Mock\n    private SecurityRoleFunctionDao securityRoleFunctionDao;", "modifier": "@Mock\n    private", "type": "SecurityRoleFunctionDao", "declarator": "securityRoleFunctionDao", "var_name": "securityRoleFunctionDao"}, {"original_string": "@Mock\n    private SecurityRoleFunctionDaoHelper securityRoleFunctionDaoHelper;", "modifier": "@Mock\n    private", "type": "SecurityRoleFunctionDaoHelper", "declarator": "securityRoleFunctionDaoHelper", "var_name": "securityRoleFunctionDaoHelper"}, {"original_string": "@Mock\n    private SecurityRoleFunctionHelper securityRoleFunctionHelper;", "modifier": "@Mock\n    private", "type": "SecurityRoleFunctionHelper", "declarator": "securityRoleFunctionHelper", "var_name": "securityRoleFunctionHelper"}, {"original_string": "@InjectMocks\n    private SecurityRoleFunctionServiceImpl securityRoleFunctionService;", "modifier": "@InjectMocks\n    private", "type": "SecurityRoleFunctionServiceImpl", "declarator": "securityRoleFunctionService", "var_name": "securityRoleFunctionService"}, {"original_string": "@Mock\n    private SecurityRoleHelper securityRoleHelper;", "modifier": "@Mock\n    private", "type": "SecurityRoleHelper", "declarator": "securityRoleHelper", "var_name": "securityRoleHelper"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/impl/SecurityRoleFunctionServiceImplTest.java"}, "test_case": {"identifier": "testGetSecurityRoleFunctionsBySecurityRole", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSecurityRoleFunctionsBySecurityRole()\n    {\n        // Create a security role key.\n        SecurityRoleKey securityRoleKey = new SecurityRoleKey(SECURITY_ROLE);\n\n        // Create a list of security role to function mapping keys.\n        List<SecurityRoleFunctionKey> securityRoleFunctionKeys = Collections.singletonList(new SecurityRoleFunctionKey(SECURITY_ROLE, SECURITY_FUNCTION));\n\n        // Mock the external calls.\n        when(securityRoleFunctionDao.getSecurityRoleFunctionKeysBySecurityRole(SECURITY_ROLE)).thenReturn(securityRoleFunctionKeys);\n\n        // Call the method under test.\n        SecurityRoleFunctionKeys result = securityRoleFunctionService.getSecurityRoleFunctionsBySecurityRole(securityRoleKey);\n\n        // Validate the results.\n        assertEquals(new SecurityRoleFunctionKeys(securityRoleFunctionKeys), result);\n\n        // Verify the external calls.\n        verify(securityRoleHelper).validateAndTrimSecurityRoleKey(securityRoleKey);\n        verify(securityRoleFunctionDao).getSecurityRoleFunctionKeysBySecurityRole(SECURITY_ROLE);\n        verifyNoMoreInteractionsHelper();\n    }", "signature": "void testGetSecurityRoleFunctionsBySecurityRole()", "full_signature": "@Test public void testGetSecurityRoleFunctionsBySecurityRole()", "class_method_signature": "SecurityRoleFunctionServiceImplTest.testGetSecurityRoleFunctionsBySecurityRole()", "testcase": true, "constructor": false, "invocations": ["singletonList", "thenReturn", "when", "getSecurityRoleFunctionKeysBySecurityRole", "getSecurityRoleFunctionsBySecurityRole", "assertEquals", "validateAndTrimSecurityRoleKey", "verify", "getSecurityRoleFunctionKeysBySecurityRole", "verify", "verifyNoMoreInteractionsHelper"]}, "focal_class": {"identifier": "SecurityRoleFunctionServiceImpl", "superclass": "", "interfaces": "implements SecurityRoleFunctionService", "fields": [{"original_string": "@Autowired\n    private SecurityFunctionDaoHelper securityFunctionDaoHelper;", "modifier": "@Autowired\n    private", "type": "SecurityFunctionDaoHelper", "declarator": "securityFunctionDaoHelper", "var_name": "securityFunctionDaoHelper"}, {"original_string": "@Autowired\n    private SecurityFunctionHelper securityFunctionHelper;", "modifier": "@Autowired\n    private", "type": "SecurityFunctionHelper", "declarator": "securityFunctionHelper", "var_name": "securityFunctionHelper"}, {"original_string": "@Autowired\n    private SecurityRoleDaoHelper securityRoleDaoHelper;", "modifier": "@Autowired\n    private", "type": "SecurityRoleDaoHelper", "declarator": "securityRoleDaoHelper", "var_name": "securityRoleDaoHelper"}, {"original_string": "@Autowired\n    private SecurityRoleFunctionDao securityRoleFunctionDao;", "modifier": "@Autowired\n    private", "type": "SecurityRoleFunctionDao", "declarator": "securityRoleFunctionDao", "var_name": "securityRoleFunctionDao"}, {"original_string": "@Autowired\n    private SecurityRoleFunctionDaoHelper securityRoleFunctionDaoHelper;", "modifier": "@Autowired\n    private", "type": "SecurityRoleFunctionDaoHelper", "declarator": "securityRoleFunctionDaoHelper", "var_name": "securityRoleFunctionDaoHelper"}, {"original_string": "@Autowired\n    private SecurityRoleFunctionHelper securityRoleFunctionHelper;", "modifier": "@Autowired\n    private", "type": "SecurityRoleFunctionHelper", "declarator": "securityRoleFunctionHelper", "var_name": "securityRoleFunctionHelper"}, {"original_string": "@Autowired\n    private SecurityRoleHelper securityRoleHelper;", "modifier": "@Autowired\n    private", "type": "SecurityRoleHelper", "declarator": "securityRoleHelper", "var_name": "securityRoleHelper"}], "methods": [{"identifier": "createSecurityRoleFunction", "parameters": "(SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "modifiers": "@Override public", "return": "SecurityRoleFunction", "signature": "SecurityRoleFunction createSecurityRoleFunction(SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "full_signature": "@Override public SecurityRoleFunction createSecurityRoleFunction(SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "class_method_signature": "SecurityRoleFunctionServiceImpl.createSecurityRoleFunction(SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "testcase": false, "constructor": false}, {"identifier": "deleteSecurityRoleFunction", "parameters": "(SecurityRoleFunctionKey securityRoleFunctionKey)", "modifiers": "@Override public", "return": "SecurityRoleFunction", "signature": "SecurityRoleFunction deleteSecurityRoleFunction(SecurityRoleFunctionKey securityRoleFunctionKey)", "full_signature": "@Override public SecurityRoleFunction deleteSecurityRoleFunction(SecurityRoleFunctionKey securityRoleFunctionKey)", "class_method_signature": "SecurityRoleFunctionServiceImpl.deleteSecurityRoleFunction(SecurityRoleFunctionKey securityRoleFunctionKey)", "testcase": false, "constructor": false}, {"identifier": "getSecurityRoleFunction", "parameters": "(SecurityRoleFunctionKey securityRoleFunctionKey)", "modifiers": "@Override public", "return": "SecurityRoleFunction", "signature": "SecurityRoleFunction getSecurityRoleFunction(SecurityRoleFunctionKey securityRoleFunctionKey)", "full_signature": "@Override public SecurityRoleFunction getSecurityRoleFunction(SecurityRoleFunctionKey securityRoleFunctionKey)", "class_method_signature": "SecurityRoleFunctionServiceImpl.getSecurityRoleFunction(SecurityRoleFunctionKey securityRoleFunctionKey)", "testcase": false, "constructor": false}, {"identifier": "getSecurityRoleFunctions", "parameters": "()", "modifiers": "@Override public", "return": "SecurityRoleFunctionKeys", "signature": "SecurityRoleFunctionKeys getSecurityRoleFunctions()", "full_signature": "@Override public SecurityRoleFunctionKeys getSecurityRoleFunctions()", "class_method_signature": "SecurityRoleFunctionServiceImpl.getSecurityRoleFunctions()", "testcase": false, "constructor": false}, {"identifier": "getSecurityRoleFunctionsBySecurityFunction", "parameters": "(SecurityFunctionKey securityFunctionKey)", "modifiers": "@Override public", "return": "SecurityRoleFunctionKeys", "signature": "SecurityRoleFunctionKeys getSecurityRoleFunctionsBySecurityFunction(SecurityFunctionKey securityFunctionKey)", "full_signature": "@Override public SecurityRoleFunctionKeys getSecurityRoleFunctionsBySecurityFunction(SecurityFunctionKey securityFunctionKey)", "class_method_signature": "SecurityRoleFunctionServiceImpl.getSecurityRoleFunctionsBySecurityFunction(SecurityFunctionKey securityFunctionKey)", "testcase": false, "constructor": false}, {"identifier": "getSecurityRoleFunctionsBySecurityRole", "parameters": "(SecurityRoleKey securityRoleKey)", "modifiers": "@Override public", "return": "SecurityRoleFunctionKeys", "signature": "SecurityRoleFunctionKeys getSecurityRoleFunctionsBySecurityRole(SecurityRoleKey securityRoleKey)", "full_signature": "@Override public SecurityRoleFunctionKeys getSecurityRoleFunctionsBySecurityRole(SecurityRoleKey securityRoleKey)", "class_method_signature": "SecurityRoleFunctionServiceImpl.getSecurityRoleFunctionsBySecurityRole(SecurityRoleKey securityRoleKey)", "testcase": false, "constructor": false}, {"identifier": "createSecurityRoleFunctionEntity", "parameters": "(SecurityRoleEntity securityRoleEntity, SecurityFunctionEntity securityFunctionEntity)", "modifiers": "private", "return": "SecurityRoleFunctionEntity", "signature": "SecurityRoleFunctionEntity createSecurityRoleFunctionEntity(SecurityRoleEntity securityRoleEntity, SecurityFunctionEntity securityFunctionEntity)", "full_signature": "private SecurityRoleFunctionEntity createSecurityRoleFunctionEntity(SecurityRoleEntity securityRoleEntity, SecurityFunctionEntity securityFunctionEntity)", "class_method_signature": "SecurityRoleFunctionServiceImpl.createSecurityRoleFunctionEntity(SecurityRoleEntity securityRoleEntity, SecurityFunctionEntity securityFunctionEntity)", "testcase": false, "constructor": false}, {"identifier": "createSecurityRoleFunctionFromEntity", "parameters": "(SecurityRoleFunctionEntity securityRoleFunctionEntity)", "modifiers": "private", "return": "SecurityRoleFunction", "signature": "SecurityRoleFunction createSecurityRoleFunctionFromEntity(SecurityRoleFunctionEntity securityRoleFunctionEntity)", "full_signature": "private SecurityRoleFunction createSecurityRoleFunctionFromEntity(SecurityRoleFunctionEntity securityRoleFunctionEntity)", "class_method_signature": "SecurityRoleFunctionServiceImpl.createSecurityRoleFunctionFromEntity(SecurityRoleFunctionEntity securityRoleFunctionEntity)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/impl/SecurityRoleFunctionServiceImpl.java"}, "focal_method": {"identifier": "getSecurityRoleFunctionsBySecurityRole", "parameters": "(SecurityRoleKey securityRoleKey)", "modifiers": "@Override public", "return": "SecurityRoleFunctionKeys", "body": "@Override\n    public SecurityRoleFunctionKeys getSecurityRoleFunctionsBySecurityRole(SecurityRoleKey securityRoleKey)\n    {\n        // Validate and trim the security role to function key.\n        securityRoleHelper.validateAndTrimSecurityRoleKey(securityRoleKey);\n\n        // Retrieve and return a list of security role to function mapping keys for the specified security role.\n        SecurityRoleFunctionKeys securityRoleFunctionKeys = new SecurityRoleFunctionKeys();\n        securityRoleFunctionKeys.getSecurityRoleFunctionKeys()\n            .addAll(securityRoleFunctionDao.getSecurityRoleFunctionKeysBySecurityRole(securityRoleKey.getSecurityRoleName()));\n        return securityRoleFunctionKeys;\n    }", "signature": "SecurityRoleFunctionKeys getSecurityRoleFunctionsBySecurityRole(SecurityRoleKey securityRoleKey)", "full_signature": "@Override public SecurityRoleFunctionKeys getSecurityRoleFunctionsBySecurityRole(SecurityRoleKey securityRoleKey)", "class_method_signature": "SecurityRoleFunctionServiceImpl.getSecurityRoleFunctionsBySecurityRole(SecurityRoleKey securityRoleKey)", "testcase": false, "constructor": false, "invocations": ["validateAndTrimSecurityRoleKey", "addAll", "getSecurityRoleFunctionKeys", "getSecurityRoleFunctionKeysBySecurityRole", "getSecurityRoleName"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}