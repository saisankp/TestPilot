{"test_class": {"identifier": "SecretResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper mapper =\n      KeywhizService.customizeObjectMapper(Jackson.newObjectMapper());", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper =\n      KeywhizService.customizeObjectMapper(Jackson.newObjectMapper())", "var_name": "mapper"}, {"original_string": "private static final Encoder encoder = Base64.getEncoder();", "modifier": "private static final", "type": "Encoder", "declarator": "encoder = Base64.getEncoder()", "var_name": "encoder"}, {"original_string": "OkHttpClient mutualSslClient;", "modifier": "", "type": "OkHttpClient", "declarator": "mutualSslClient", "var_name": "mutualSslClient"}, {"original_string": "@ClassRule public static final RuleChain chain = IntegrationTestRule.rule();", "modifier": "@ClassRule public static final", "type": "RuleChain", "declarator": "chain = IntegrationTestRule.rule()", "var_name": "chain"}], "file": "server/src/test/java/keywhiz/service/resources/automation/v2/SecretResourceTest.java"}, "test_case": {"identifier": "backfillExpirationTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void backfillExpirationTest() throws Exception {\n    byte[] certs = Resources.toByteArray(Resources.getResource(\"fixtures/expiring-certificates.crt\"));\n    byte[] pubring = Resources.toByteArray(Resources.getResource(\"fixtures/expiring-pubring.gpg\"));\n    byte[] p12 = Resources.toByteArray(Resources.getResource(\"fixtures/expiring-keystore.p12\"));\n    byte[] jceks = Resources.toByteArray(Resources.getResource(\"fixtures/expiring-keystore.jceks\"));\n\n    create(CreateSecretRequestV2.builder()\n        .name(\"certificate-chain.crt\")\n        .content(encoder.encodeToString(certs))\n        .build());\n\n    create(CreateSecretRequestV2.builder()\n        .name(\"public-keyring.gpg\")\n        .content(encoder.encodeToString(pubring))\n        .build());\n\n    create(CreateSecretRequestV2.builder()\n        .name(\"keystore.p12\")\n        .content(encoder.encodeToString(p12))\n        .build());\n\n    create(CreateSecretRequestV2.builder()\n        .name(\"keystore.jceks\")\n        .content(encoder.encodeToString(jceks))\n        .build());\n\n    Response response = backfillExpiration(\"certificate-chain.crt\", ImmutableList.of());\n    assertThat(response.isSuccessful()).isTrue();\n\n    response = backfillExpiration(\"public-keyring.gpg\", ImmutableList.of());\n    assertThat(response.isSuccessful()).isTrue();\n\n    response = backfillExpiration(\"keystore.p12\", ImmutableList.of(\"password\"));\n    assertThat(response.isSuccessful()).isTrue();\n\n    response = backfillExpiration(\"keystore.jceks\", ImmutableList.of(\"password\"));\n    assertThat(response.isSuccessful()).isTrue();\n\n    SecretDetailResponseV2 details = lookup(\"certificate-chain.crt\");\n    assertThat(details.expiry()).isEqualTo(1501533950);\n\n    details = lookup(\"public-keyring.gpg\");\n    assertThat(details.expiry()).isEqualTo(1536442365);\n\n    details = lookup(\"keystore.p12\");\n    assertThat(details.expiry()).isEqualTo(1681596851);\n\n    details = lookup(\"keystore.jceks\");\n    assertThat(details.expiry()).isEqualTo(1681596851);\n  }", "signature": "void backfillExpirationTest()", "full_signature": "@Test public void backfillExpirationTest()", "class_method_signature": "SecretResourceTest.backfillExpirationTest()", "testcase": true, "constructor": false, "invocations": ["toByteArray", "getResource", "toByteArray", "getResource", "toByteArray", "getResource", "toByteArray", "getResource", "create", "build", "content", "name", "builder", "encodeToString", "create", "build", "content", "name", "builder", "encodeToString", "create", "build", "content", "name", "builder", "encodeToString", "create", "build", "content", "name", "builder", "encodeToString", "backfillExpiration", "of", "isTrue", "assertThat", "isSuccessful", "backfillExpiration", "of", "isTrue", "assertThat", "isSuccessful", "backfillExpiration", "of", "isTrue", "assertThat", "isSuccessful", "backfillExpiration", "of", "isTrue", "assertThat", "isSuccessful", "lookup", "isEqualTo", "assertThat", "expiry", "lookup", "isEqualTo", "assertThat", "expiry", "lookup", "isEqualTo", "assertThat", "expiry", "lookup", "isEqualTo", "assertThat", "expiry"]}, "focal_class": {"identifier": "SecretResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SecretResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SecretResource.class)", "var_name": "logger"}, {"original_string": "private final SecretController secretController;", "modifier": "private final", "type": "SecretController", "declarator": "secretController", "var_name": "secretController"}, {"original_string": "private final AclDAO aclDAO;", "modifier": "private final", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "private final GroupDAO groupDAO;", "modifier": "private final", "type": "GroupDAO", "declarator": "groupDAO", "var_name": "groupDAO"}, {"original_string": "private final SecretDAO secretDAO;", "modifier": "private final", "type": "SecretDAO", "declarator": "secretDAO", "var_name": "secretDAO"}, {"original_string": "private final AuditLog auditLog;", "modifier": "private final", "type": "AuditLog", "declarator": "auditLog", "var_name": "auditLog"}, {"original_string": "private final SecretSeriesDAO secretSeriesDAO;", "modifier": "private final", "type": "SecretSeriesDAO", "declarator": "secretSeriesDAO", "var_name": "secretSeriesDAO"}, {"original_string": "private final ContentCryptographer cryptographer;", "modifier": "private final", "type": "ContentCryptographer", "declarator": "cryptographer", "var_name": "cryptographer"}, {"original_string": "private final SecretController secretControllerReadOnly;", "modifier": "private final", "type": "SecretController", "declarator": "secretControllerReadOnly", "var_name": "secretControllerReadOnly"}], "methods": [{"identifier": "SecretResource", "parameters": "(SecretController secretController, AclDAOFactory aclDAOFactory,\n      GroupDAOFactory groupDAOFactory, SecretDAOFactory secretDAOFactory, AuditLog auditLog,\n      SecretSeriesDAOFactory secretSeriesDAOFactory, ContentCryptographer cryptographer,\n      @Readonly SecretController secretControllerReadOnly)", "modifiers": "@Inject public", "return": "", "signature": " SecretResource(SecretController secretController, AclDAOFactory aclDAOFactory,\n      GroupDAOFactory groupDAOFactory, SecretDAOFactory secretDAOFactory, AuditLog auditLog,\n      SecretSeriesDAOFactory secretSeriesDAOFactory, ContentCryptographer cryptographer,\n      @Readonly SecretController secretControllerReadOnly)", "full_signature": "@Inject public  SecretResource(SecretController secretController, AclDAOFactory aclDAOFactory,\n      GroupDAOFactory groupDAOFactory, SecretDAOFactory secretDAOFactory, AuditLog auditLog,\n      SecretSeriesDAOFactory secretSeriesDAOFactory, ContentCryptographer cryptographer,\n      @Readonly SecretController secretControllerReadOnly)", "class_method_signature": "SecretResource.SecretResource(SecretController secretController, AclDAOFactory aclDAOFactory,\n      GroupDAOFactory groupDAOFactory, SecretDAOFactory secretDAOFactory, AuditLog auditLog,\n      SecretSeriesDAOFactory secretSeriesDAOFactory, ContentCryptographer cryptographer,\n      @Readonly SecretController secretControllerReadOnly)", "testcase": false, "constructor": true}, {"identifier": "createSecret", "parameters": "(@Auth AutomationClient automationClient,\n      @Valid CreateSecretRequestV2 request)", "modifiers": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public", "return": "Response", "signature": "Response createSecret(@Auth AutomationClient automationClient,\n      @Valid CreateSecretRequestV2 request)", "full_signature": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public Response createSecret(@Auth AutomationClient automationClient,\n      @Valid CreateSecretRequestV2 request)", "class_method_signature": "SecretResource.createSecret(@Auth AutomationClient automationClient,\n      @Valid CreateSecretRequestV2 request)", "testcase": false, "constructor": false}, {"identifier": "createOrUpdateSecret", "parameters": "(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name,\n      @Valid CreateOrUpdateSecretRequestV2 request)", "modifiers": "@Timed @ExceptionMetered @Path(\"{name}\") @POST @Consumes(APPLICATION_JSON) public", "return": "Response", "signature": "Response createOrUpdateSecret(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name,\n      @Valid CreateOrUpdateSecretRequestV2 request)", "full_signature": "@Timed @ExceptionMetered @Path(\"{name}\") @POST @Consumes(APPLICATION_JSON) public Response createOrUpdateSecret(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name,\n      @Valid CreateOrUpdateSecretRequestV2 request)", "class_method_signature": "SecretResource.createOrUpdateSecret(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name,\n      @Valid CreateOrUpdateSecretRequestV2 request)", "testcase": false, "constructor": false}, {"identifier": "partialUpdateSecret", "parameters": "(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name,\n      @Valid PartialUpdateSecretRequestV2 request)", "modifiers": "@Timed @ExceptionMetered @Path(\"{name}/partialupdate\") @POST @Consumes(APPLICATION_JSON) public", "return": "Response", "signature": "Response partialUpdateSecret(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name,\n      @Valid PartialUpdateSecretRequestV2 request)", "full_signature": "@Timed @ExceptionMetered @Path(\"{name}/partialupdate\") @POST @Consumes(APPLICATION_JSON) public Response partialUpdateSecret(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name,\n      @Valid PartialUpdateSecretRequestV2 request)", "class_method_signature": "SecretResource.partialUpdateSecret(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name,\n      @Valid PartialUpdateSecretRequestV2 request)", "testcase": false, "constructor": false}, {"identifier": "secretListing", "parameters": "(@Auth AutomationClient automationClient,\n      @QueryParam(\"idx\") Integer idx, @QueryParam(\"num\") Integer num,\n      @DefaultValue(\"true\") @QueryParam(\"newestFirst\") boolean newestFirst)", "modifiers": "@Timed @ExceptionMetered @GET @Produces(APPLICATION_JSON) public", "return": "Iterable<String>", "signature": "Iterable<String> secretListing(@Auth AutomationClient automationClient,\n      @QueryParam(\"idx\") Integer idx, @QueryParam(\"num\") Integer num,\n      @DefaultValue(\"true\") @QueryParam(\"newestFirst\") boolean newestFirst)", "full_signature": "@Timed @ExceptionMetered @GET @Produces(APPLICATION_JSON) public Iterable<String> secretListing(@Auth AutomationClient automationClient,\n      @QueryParam(\"idx\") Integer idx, @QueryParam(\"num\") Integer num,\n      @DefaultValue(\"true\") @QueryParam(\"newestFirst\") boolean newestFirst)", "class_method_signature": "SecretResource.secretListing(@Auth AutomationClient automationClient,\n      @QueryParam(\"idx\") Integer idx, @QueryParam(\"num\") Integer num,\n      @DefaultValue(\"true\") @QueryParam(\"newestFirst\") boolean newestFirst)", "testcase": false, "constructor": false}, {"identifier": "secretListingV2", "parameters": "(@Auth AutomationClient automationClient,\n      @QueryParam(\"idx\") Integer idx, @QueryParam(\"num\") Integer num,\n      @DefaultValue(\"true\") @QueryParam(\"newestFirst\") boolean newestFirst)", "modifiers": "@Timed @ExceptionMetered @Path(\"/v2\") @GET @Produces(APPLICATION_JSON) public", "return": "Iterable<SanitizedSecret>", "signature": "Iterable<SanitizedSecret> secretListingV2(@Auth AutomationClient automationClient,\n      @QueryParam(\"idx\") Integer idx, @QueryParam(\"num\") Integer num,\n      @DefaultValue(\"true\") @QueryParam(\"newestFirst\") boolean newestFirst)", "full_signature": "@Timed @ExceptionMetered @Path(\"/v2\") @GET @Produces(APPLICATION_JSON) public Iterable<SanitizedSecret> secretListingV2(@Auth AutomationClient automationClient,\n      @QueryParam(\"idx\") Integer idx, @QueryParam(\"num\") Integer num,\n      @DefaultValue(\"true\") @QueryParam(\"newestFirst\") boolean newestFirst)", "class_method_signature": "SecretResource.secretListingV2(@Auth AutomationClient automationClient,\n      @QueryParam(\"idx\") Integer idx, @QueryParam(\"num\") Integer num,\n      @DefaultValue(\"true\") @QueryParam(\"newestFirst\") boolean newestFirst)", "testcase": false, "constructor": false}, {"identifier": "secretListingExpiring", "parameters": "(@Auth AutomationClient automationClient, @PathParam(\"time\") Long time)", "modifiers": "@Timed @ExceptionMetered @Path(\"expiring/{time}\") @GET @Produces(APPLICATION_JSON) public", "return": "Iterable<String>", "signature": "Iterable<String> secretListingExpiring(@Auth AutomationClient automationClient, @PathParam(\"time\") Long time)", "full_signature": "@Timed @ExceptionMetered @Path(\"expiring/{time}\") @GET @Produces(APPLICATION_JSON) public Iterable<String> secretListingExpiring(@Auth AutomationClient automationClient, @PathParam(\"time\") Long time)", "class_method_signature": "SecretResource.secretListingExpiring(@Auth AutomationClient automationClient, @PathParam(\"time\") Long time)", "testcase": false, "constructor": false}, {"identifier": "secretListingExpiringV2", "parameters": "(@Auth AutomationClient automationClient, @PathParam(\"time\") Long time)", "modifiers": "@Timed @ExceptionMetered @Path(\"expiring/v2/{time}\") @GET @Produces(APPLICATION_JSON) public", "return": "Iterable<SanitizedSecret>", "signature": "Iterable<SanitizedSecret> secretListingExpiringV2(@Auth AutomationClient automationClient, @PathParam(\"time\") Long time)", "full_signature": "@Timed @ExceptionMetered @Path(\"expiring/v2/{time}\") @GET @Produces(APPLICATION_JSON) public Iterable<SanitizedSecret> secretListingExpiringV2(@Auth AutomationClient automationClient, @PathParam(\"time\") Long time)", "class_method_signature": "SecretResource.secretListingExpiringV2(@Auth AutomationClient automationClient, @PathParam(\"time\") Long time)", "testcase": false, "constructor": false}, {"identifier": "secretListingExpiringV3", "parameters": "(@Auth AutomationClient automationClient,\n      @PathParam(\"time\") Long maxTime)", "modifiers": "@Timed @ExceptionMetered @Path(\"expiring/v3/{time}\") @GET @Produces(APPLICATION_JSON) public", "return": "Iterable<SanitizedSecretWithGroups>", "signature": "Iterable<SanitizedSecretWithGroups> secretListingExpiringV3(@Auth AutomationClient automationClient,\n      @PathParam(\"time\") Long maxTime)", "full_signature": "@Timed @ExceptionMetered @Path(\"expiring/v3/{time}\") @GET @Produces(APPLICATION_JSON) public Iterable<SanitizedSecretWithGroups> secretListingExpiringV3(@Auth AutomationClient automationClient,\n      @PathParam(\"time\") Long maxTime)", "class_method_signature": "SecretResource.secretListingExpiringV3(@Auth AutomationClient automationClient,\n      @PathParam(\"time\") Long maxTime)", "testcase": false, "constructor": false}, {"identifier": "secretListingExpiringV4", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"maxTime\") Long maxTime,\n      @QueryParam(\"limit\") Integer limit,\n      @QueryParam(\"cursor\") String cursor)", "modifiers": "@Timed @ExceptionMetered @Path(\"expiring/v4\") @GET @Produces(APPLICATION_JSON) public", "return": "SanitizedSecretWithGroupsListAndCursor", "signature": "SanitizedSecretWithGroupsListAndCursor secretListingExpiringV4(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"maxTime\") Long maxTime,\n      @QueryParam(\"limit\") Integer limit,\n      @QueryParam(\"cursor\") String cursor)", "full_signature": "@Timed @ExceptionMetered @Path(\"expiring/v4\") @GET @Produces(APPLICATION_JSON) public SanitizedSecretWithGroupsListAndCursor secretListingExpiringV4(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"maxTime\") Long maxTime,\n      @QueryParam(\"limit\") Integer limit,\n      @QueryParam(\"cursor\") String cursor)", "class_method_signature": "SecretResource.secretListingExpiringV4(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"maxTime\") Long maxTime,\n      @QueryParam(\"limit\") Integer limit,\n      @QueryParam(\"cursor\") String cursor)", "testcase": false, "constructor": false}, {"identifier": "backfillExpiration", "parameters": "(@Auth AutomationClient automationClient, @PathParam(\"name\") String name, List<String> passwords)", "modifiers": "@Timed @ExceptionMetered @Path(\"{name}/backfill-expiration\") @POST @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public", "return": "boolean", "signature": "boolean backfillExpiration(@Auth AutomationClient automationClient, @PathParam(\"name\") String name, List<String> passwords)", "full_signature": "@Timed @ExceptionMetered @Path(\"{name}/backfill-expiration\") @POST @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public boolean backfillExpiration(@Auth AutomationClient automationClient, @PathParam(\"name\") String name, List<String> passwords)", "class_method_signature": "SecretResource.backfillExpiration(@Auth AutomationClient automationClient, @PathParam(\"name\") String name, List<String> passwords)", "testcase": false, "constructor": false}, {"identifier": "backfillHmac", "parameters": "(@Auth AutomationClient automationClient, @PathParam(\"name\") String name)", "modifiers": "@Timed @ExceptionMetered @Path(\"{name}/backfill-hmac\") @POST @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public", "return": "boolean", "signature": "boolean backfillHmac(@Auth AutomationClient automationClient, @PathParam(\"name\") String name)", "full_signature": "@Timed @ExceptionMetered @Path(\"{name}/backfill-hmac\") @POST @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public boolean backfillHmac(@Auth AutomationClient automationClient, @PathParam(\"name\") String name)", "class_method_signature": "SecretResource.backfillHmac(@Auth AutomationClient automationClient, @PathParam(\"name\") String name)", "testcase": false, "constructor": false}, {"identifier": "secretListingExpiringForGroup", "parameters": "(@Auth AutomationClient automationClient,\n      @PathParam(\"time\") Long time, @PathParam(\"name\") String name)", "modifiers": "@Timed @ExceptionMetered @Path(\"expiring/{time}/{name}\") @GET @Produces(APPLICATION_JSON) public", "return": "Iterable<String>", "signature": "Iterable<String> secretListingExpiringForGroup(@Auth AutomationClient automationClient,\n      @PathParam(\"time\") Long time, @PathParam(\"name\") String name)", "full_signature": "@Timed @ExceptionMetered @Path(\"expiring/{time}/{name}\") @GET @Produces(APPLICATION_JSON) public Iterable<String> secretListingExpiringForGroup(@Auth AutomationClient automationClient,\n      @PathParam(\"time\") Long time, @PathParam(\"name\") String name)", "class_method_signature": "SecretResource.secretListingExpiringForGroup(@Auth AutomationClient automationClient,\n      @PathParam(\"time\") Long time, @PathParam(\"name\") String name)", "testcase": false, "constructor": false}, {"identifier": "secretInfo", "parameters": "(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "modifiers": "@Timed @ExceptionMetered @GET @Path(\"{name}\") @Produces(APPLICATION_JSON) public", "return": "SecretDetailResponseV2", "signature": "SecretDetailResponseV2 secretInfo(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "full_signature": "@Timed @ExceptionMetered @GET @Path(\"{name}\") @Produces(APPLICATION_JSON) public SecretDetailResponseV2 secretInfo(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "class_method_signature": "SecretResource.secretInfo(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "testcase": false, "constructor": false}, {"identifier": "getSanitizedSecret", "parameters": "(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "modifiers": "@Timed @ExceptionMetered @GET @Path(\"{name}/sanitized\") @Produces(APPLICATION_JSON) public", "return": "SanitizedSecret", "signature": "SanitizedSecret getSanitizedSecret(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "full_signature": "@Timed @ExceptionMetered @GET @Path(\"{name}/sanitized\") @Produces(APPLICATION_JSON) public SanitizedSecret getSanitizedSecret(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "class_method_signature": "SecretResource.getSanitizedSecret(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "testcase": false, "constructor": false}, {"identifier": "secretContents", "parameters": "(@Auth AutomationClient automationClient,\n      @Valid SecretContentsRequestV2 request)", "modifiers": "@Timed @ExceptionMetered @POST @Path(\"request/contents\") @Produces(APPLICATION_JSON) public", "return": "SecretContentsResponseV2", "signature": "SecretContentsResponseV2 secretContents(@Auth AutomationClient automationClient,\n      @Valid SecretContentsRequestV2 request)", "full_signature": "@Timed @ExceptionMetered @POST @Path(\"request/contents\") @Produces(APPLICATION_JSON) public SecretContentsResponseV2 secretContents(@Auth AutomationClient automationClient,\n      @Valid SecretContentsRequestV2 request)", "class_method_signature": "SecretResource.secretContents(@Auth AutomationClient automationClient,\n      @Valid SecretContentsRequestV2 request)", "testcase": false, "constructor": false}, {"identifier": "secretVersions", "parameters": "(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name, @QueryParam(\"versionIdx\") int versionIdx,\n      @QueryParam(\"numVersions\") int numVersions)", "modifiers": "@Timed @ExceptionMetered @GET @Path(\"{name}/versions\") @Produces(APPLICATION_JSON) public", "return": "Iterable<SecretDetailResponseV2>", "signature": "Iterable<SecretDetailResponseV2> secretVersions(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name, @QueryParam(\"versionIdx\") int versionIdx,\n      @QueryParam(\"numVersions\") int numVersions)", "full_signature": "@Timed @ExceptionMetered @GET @Path(\"{name}/versions\") @Produces(APPLICATION_JSON) public Iterable<SecretDetailResponseV2> secretVersions(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name, @QueryParam(\"versionIdx\") int versionIdx,\n      @QueryParam(\"numVersions\") int numVersions)", "class_method_signature": "SecretResource.secretVersions(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name, @QueryParam(\"versionIdx\") int versionIdx,\n      @QueryParam(\"numVersions\") int numVersions)", "testcase": false, "constructor": false}, {"identifier": "resetSecretVersion", "parameters": "(@Auth AutomationClient automationClient,\n      @Valid SetSecretVersionRequestV2 request)", "modifiers": "@Timed @ExceptionMetered @Path(\"{name}/setversion\") @POST public", "return": "Response", "signature": "Response resetSecretVersion(@Auth AutomationClient automationClient,\n      @Valid SetSecretVersionRequestV2 request)", "full_signature": "@Timed @ExceptionMetered @Path(\"{name}/setversion\") @POST public Response resetSecretVersion(@Auth AutomationClient automationClient,\n      @Valid SetSecretVersionRequestV2 request)", "class_method_signature": "SecretResource.resetSecretVersion(@Auth AutomationClient automationClient,\n      @Valid SetSecretVersionRequestV2 request)", "testcase": false, "constructor": false}, {"identifier": "secretGroupsListing", "parameters": "(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "modifiers": "@Timed @ExceptionMetered @GET @Path(\"{name}/groups\") @Produces(APPLICATION_JSON) public", "return": "Iterable<String>", "signature": "Iterable<String> secretGroupsListing(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "full_signature": "@Timed @ExceptionMetered @GET @Path(\"{name}/groups\") @Produces(APPLICATION_JSON) public Iterable<String> secretGroupsListing(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "class_method_signature": "SecretResource.secretGroupsListing(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "testcase": false, "constructor": false}, {"identifier": "modifySecretGroups", "parameters": "(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name, @Valid ModifyGroupsRequestV2 request)", "modifiers": "@Timed @ExceptionMetered @PUT @Path(\"{name}/groups\") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public", "return": "Iterable<String>", "signature": "Iterable<String> modifySecretGroups(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name, @Valid ModifyGroupsRequestV2 request)", "full_signature": "@Timed @ExceptionMetered @PUT @Path(\"{name}/groups\") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public Iterable<String> modifySecretGroups(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name, @Valid ModifyGroupsRequestV2 request)", "class_method_signature": "SecretResource.modifySecretGroups(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name, @Valid ModifyGroupsRequestV2 request)", "testcase": false, "constructor": false}, {"identifier": "deleteSecretSeries", "parameters": "(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "modifiers": "@Timed @ExceptionMetered @DELETE @Path(\"{name}\") public", "return": "Response", "signature": "Response deleteSecretSeries(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "full_signature": "@Timed @ExceptionMetered @DELETE @Path(\"{name}\") public Response deleteSecretSeries(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "class_method_signature": "SecretResource.deleteSecretSeries(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "testcase": false, "constructor": false}, {"identifier": "groupsToGroupIds", "parameters": "(Set<String> groupNames)", "modifiers": "private", "return": "Stream<Optional<Long>>", "signature": "Stream<Optional<Long>> groupsToGroupIds(Set<String> groupNames)", "full_signature": "private Stream<Optional<Long>> groupsToGroupIds(Set<String> groupNames)", "class_method_signature": "SecretResource.groupsToGroupIds(Set<String> groupNames)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/resources/automation/v2/SecretResource.java"}, "focal_method": {"identifier": "backfillExpiration", "parameters": "(@Auth AutomationClient automationClient, @PathParam(\"name\") String name, List<String> passwords)", "modifiers": "@Timed @ExceptionMetered @Path(\"{name}/backfill-expiration\") @POST @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public", "return": "boolean", "body": "@Timed @ExceptionMetered\n  @Path(\"{name}/backfill-expiration\")\n  @POST\n  @Consumes(APPLICATION_JSON)\n  @Produces(APPLICATION_JSON)\n  public boolean backfillExpiration(@Auth AutomationClient automationClient, @PathParam(\"name\") String name, List<String> passwords) {\n    Optional<Secret> secretOptional = secretController.getSecretByName(name);\n    if (!secretOptional.isPresent()) {\n      throw new NotFoundException(\"No such secret: \" + name);\n    }\n\n    Secret secret = secretOptional.get();\n    Optional<Instant> existingExpiry = Optional.empty();\n    if (secret.getExpiry() > 0) {\n      existingExpiry = Optional.of(Instant.ofEpochMilli(secret.getExpiry()*1000));\n    }\n\n    String secretName = secret.getName();\n    byte[] secretContent = Base64.getDecoder().decode(secret.getSecret());\n\n    // Always try empty password\n    passwords.add(\"\");\n\n    Instant expiry = null;\n    if (secretName.endsWith(\".crt\") || secretName.endsWith(\".pem\") || secretName.endsWith(\".key\")) {\n      expiry = ExpirationExtractor.expirationFromEncodedCertificateChain(secretContent);\n    } else if (secretName.endsWith(\".gpg\") || secretName.endsWith(\".pgp\")) {\n      expiry = ExpirationExtractor.expirationFromOpenPGP(secretContent);\n    } else if (secretName.endsWith(\".p12\") || secretName.endsWith(\".pfx\")) {\n      while (expiry == null && !passwords.isEmpty()) {\n        String password = passwords.remove(0);\n        expiry = ExpirationExtractor.expirationFromKeystore(\"PKCS12\", password, secretContent);\n      }\n    } else if (secretName.endsWith(\".jceks\")) {\n      while (expiry == null && !passwords.isEmpty()) {\n        String password = passwords.remove(0);\n        expiry = ExpirationExtractor.expirationFromKeystore(\"JCEKS\", password, secretContent);\n      }\n    } else if (secretName.endsWith(\".jks\")) {\n      while (expiry == null && !passwords.isEmpty()) {\n        String password = passwords.remove(0);\n        expiry = ExpirationExtractor.expirationFromKeystore(\"JKS\", password, secretContent);\n      }\n    }\n\n    if (expiry != null) {\n      if (existingExpiry.isPresent()) {\n        long offset = existingExpiry.get().until(expiry, HOURS);\n        if (offset > 24 || offset < -24) {\n          logger.warn(\n              \"Extracted expiration of secret {} differs from actual by more than {} hours (extracted = {}, database = {}).\",\n              secretName, offset, expiry, existingExpiry.get());\n        }\n\n        // Do not overwrite existing expiry, we just want to check for differences and warn.\n        return true;\n      }\n\n      logger.info(\"Found expiry for secret {}: {}\", secretName, expiry.getEpochSecond());\n      boolean success = secretDAO.setExpiration(name, expiry);\n      if (success) {\n        Map<String, String> extraInfo = new HashMap<>();\n        extraInfo.put(\"backfilled expiry\", Long.toString(expiry.getEpochSecond()));\n        auditLog.recordEvent(new Event(Instant.now(), EventTag.SECRET_BACKFILLEXPIRY, automationClient.getName(), name, extraInfo));\n      }\n      return success;\n    }\n\n    logger.info(\"Unable to determine expiry for secret {}\", secretName);\n    return false;\n  }", "signature": "boolean backfillExpiration(@Auth AutomationClient automationClient, @PathParam(\"name\") String name, List<String> passwords)", "full_signature": "@Timed @ExceptionMetered @Path(\"{name}/backfill-expiration\") @POST @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public boolean backfillExpiration(@Auth AutomationClient automationClient, @PathParam(\"name\") String name, List<String> passwords)", "class_method_signature": "SecretResource.backfillExpiration(@Auth AutomationClient automationClient, @PathParam(\"name\") String name, List<String> passwords)", "testcase": false, "constructor": false, "invocations": ["getSecretByName", "isPresent", "get", "empty", "getExpiry", "of", "ofEpochMilli", "getExpiry", "getName", "decode", "getDecoder", "getSecret", "add", "endsWith", "endsWith", "endsWith", "expirationFromEncodedCertificateChain", "endsWith", "endsWith", "expirationFromOpenPGP", "endsWith", "endsWith", "isEmpty", "remove", "expirationFromKeystore", "endsWith", "isEmpty", "remove", "expirationFromKeystore", "endsWith", "isEmpty", "remove", "expirationFromKeystore", "isPresent", "until", "get", "warn", "get", "info", "getEpochSecond", "setExpiration", "put", "toString", "getEpochSecond", "recordEvent", "now", "getName", "info"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}