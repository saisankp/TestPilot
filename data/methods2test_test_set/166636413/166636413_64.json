{"test_class": {"identifier": "DateTimeUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DatePickerDetails gregorian;", "modifier": "private", "type": "DatePickerDetails", "declarator": "gregorian", "var_name": "gregorian"}, {"original_string": "private DatePickerDetails gregorianSpinners;", "modifier": "private", "type": "DatePickerDetails", "declarator": "gregorianSpinners", "var_name": "gregorianSpinners"}, {"original_string": "private DatePickerDetails gregorianMonthYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "gregorianMonthYear", "var_name": "gregorianMonthYear"}, {"original_string": "private DatePickerDetails gregorianYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "gregorianYear", "var_name": "gregorianYear"}, {"original_string": "private DatePickerDetails ethiopian;", "modifier": "private", "type": "DatePickerDetails", "declarator": "ethiopian", "var_name": "ethiopian"}, {"original_string": "private DatePickerDetails ethiopianMonthYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "ethiopianMonthYear", "var_name": "ethiopianMonthYear"}, {"original_string": "private DatePickerDetails ethiopianYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "ethiopianYear", "var_name": "ethiopianYear"}, {"original_string": "private DatePickerDetails coptic;", "modifier": "private", "type": "DatePickerDetails", "declarator": "coptic", "var_name": "coptic"}, {"original_string": "private DatePickerDetails copticMonthYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "copticMonthYear", "var_name": "copticMonthYear"}, {"original_string": "private DatePickerDetails copticYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "copticYear", "var_name": "copticYear"}, {"original_string": "private DatePickerDetails islamic;", "modifier": "private", "type": "DatePickerDetails", "declarator": "islamic", "var_name": "islamic"}, {"original_string": "private DatePickerDetails islamicMonthYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "islamicMonthYear", "var_name": "islamicMonthYear"}, {"original_string": "private DatePickerDetails islamicYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "islamicYear", "var_name": "islamicYear"}, {"original_string": "private DatePickerDetails bikramSambat;", "modifier": "private", "type": "DatePickerDetails", "declarator": "bikramSambat", "var_name": "bikramSambat"}, {"original_string": "private DatePickerDetails bikramSambatMonthYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "bikramSambatMonthYear", "var_name": "bikramSambatMonthYear"}, {"original_string": "private DatePickerDetails bikramSambatYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "bikramSambatYear", "var_name": "bikramSambatYear"}, {"original_string": "private DatePickerDetails myanmar;", "modifier": "private", "type": "DatePickerDetails", "declarator": "myanmar", "var_name": "myanmar"}, {"original_string": "private DatePickerDetails myanmarMonthYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "myanmarMonthYear", "var_name": "myanmarMonthYear"}, {"original_string": "private DatePickerDetails myanmarYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "myanmarYear", "var_name": "myanmarYear"}, {"original_string": "private DatePickerDetails persian;", "modifier": "private", "type": "DatePickerDetails", "declarator": "persian", "var_name": "persian"}, {"original_string": "private DatePickerDetails persianMonthYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "persianMonthYear", "var_name": "persianMonthYear"}, {"original_string": "private DatePickerDetails persianYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "persianYear", "var_name": "persianYear"}], "file": "collect_app/src/test/java/org/odk/collect/android/utilities/DateTimeUtilsTest.java"}, "test_case": {"identifier": "skipDaylightSavingGapIfExistsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void skipDaylightSavingGapIfExistsTest() {\n        DateTimeZone originalDefaultTimeZone = DateTimeZone.getDefault();\n        DateTimeZone.setDefault(DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"Africa/Nairobi\")));\n\n        // 1 Jan 1960 at 00:00:00 clocks were turned forward to 00:15:00\n        LocalDateTime ldtOriginal = new LocalDateTime().withYear(1960).withMonthOfYear(1).withDayOfMonth(1).withHourOfDay(0).withMinuteOfHour(0).withSecondOfMinute(0).withMillisOfSecond(0);\n        LocalDateTime ldtExpected = new LocalDateTime().withYear(1960).withMonthOfYear(1).withDayOfMonth(1).withHourOfDay(0).withMinuteOfHour(15).withSecondOfMinute(0).withMillisOfSecond(0);\n\n        assertEquals(ldtExpected, DateTimeUtils.skipDaylightSavingGapIfExists(ldtOriginal));\n        DateTimeZone.setDefault(originalDefaultTimeZone);\n    }", "signature": "void skipDaylightSavingGapIfExistsTest()", "full_signature": "@Test public void skipDaylightSavingGapIfExistsTest()", "class_method_signature": "DateTimeUtilsTest.skipDaylightSavingGapIfExistsTest()", "testcase": true, "constructor": false, "invocations": ["getDefault", "setDefault", "forTimeZone", "getTimeZone", "withMillisOfSecond", "withSecondOfMinute", "withMinuteOfHour", "withHourOfDay", "withDayOfMonth", "withMonthOfYear", "withYear", "withMillisOfSecond", "withSecondOfMinute", "withMinuteOfHour", "withHourOfDay", "withDayOfMonth", "withMonthOfYear", "withYear", "assertEquals", "skipDaylightSavingGapIfExists", "setDefault"]}, "focal_class": {"identifier": "DateTimeUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SERVER_DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";", "modifier": "private static final", "type": "String", "declarator": "SERVER_DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"", "var_name": "SERVER_DATE_FORMAT"}], "methods": [{"identifier": "DateTimeUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " DateTimeUtils()", "full_signature": "private  DateTimeUtils()", "class_method_signature": "DateTimeUtils.DateTimeUtils()", "testcase": false, "constructor": true}, {"identifier": "getGregorianDateTimeLabel", "parameters": "(Date date, DatePickerDetails datePickerDetails, boolean containsTime, Locale locale)", "modifiers": "private static", "return": "String", "signature": "String getGregorianDateTimeLabel(Date date, DatePickerDetails datePickerDetails, boolean containsTime, Locale locale)", "full_signature": "private static String getGregorianDateTimeLabel(Date date, DatePickerDetails datePickerDetails, boolean containsTime, Locale locale)", "class_method_signature": "DateTimeUtils.getGregorianDateTimeLabel(Date date, DatePickerDetails datePickerDetails, boolean containsTime, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "getDateTimeLabel", "parameters": "(Date date, DatePickerDetails datePickerDetails, boolean containsTime, Context context)", "modifiers": "public static", "return": "String", "signature": "String getDateTimeLabel(Date date, DatePickerDetails datePickerDetails, boolean containsTime, Context context)", "full_signature": "public static String getDateTimeLabel(Date date, DatePickerDetails datePickerDetails, boolean containsTime, Context context)", "class_method_signature": "DateTimeUtils.getDateTimeLabel(Date date, DatePickerDetails datePickerDetails, boolean containsTime, Context context)", "testcase": false, "constructor": false}, {"identifier": "getDateTimeSkeleton", "parameters": "(boolean containsTime, DatePickerDetails datePickerDetails)", "modifiers": "private static", "return": "String", "signature": "String getDateTimeSkeleton(boolean containsTime, DatePickerDetails datePickerDetails)", "full_signature": "private static String getDateTimeSkeleton(boolean containsTime, DatePickerDetails datePickerDetails)", "class_method_signature": "DateTimeUtils.getDateTimeSkeleton(boolean containsTime, DatePickerDetails datePickerDetails)", "testcase": false, "constructor": false}, {"identifier": "skipDaylightSavingGapIfExists", "parameters": "(LocalDateTime date)", "modifiers": "public static", "return": "LocalDateTime", "signature": "LocalDateTime skipDaylightSavingGapIfExists(LocalDateTime date)", "full_signature": "public static LocalDateTime skipDaylightSavingGapIfExists(LocalDateTime date)", "class_method_signature": "DateTimeUtils.skipDaylightSavingGapIfExists(LocalDateTime date)", "testcase": false, "constructor": false}, {"identifier": "getDatePickerDetails", "parameters": "(String appearance)", "modifiers": "public static", "return": "DatePickerDetails", "signature": "DatePickerDetails getDatePickerDetails(String appearance)", "full_signature": "public static DatePickerDetails getDatePickerDetails(String appearance)", "class_method_signature": "DateTimeUtils.getDatePickerDetails(String appearance)", "testcase": false, "constructor": false}, {"identifier": "tsToSec8601", "parameters": "(String timestamp)", "modifiers": "public static", "return": "long", "signature": "long tsToSec8601(String timestamp)", "full_signature": "public static long tsToSec8601(String timestamp)", "class_method_signature": "DateTimeUtils.tsToSec8601(String timestamp)", "testcase": false, "constructor": false}, {"identifier": "formatDateFromServer", "parameters": "(String time)", "modifiers": "public static", "return": "String", "signature": "String formatDateFromServer(String time)", "full_signature": "public static String formatDateFromServer(String time)", "class_method_signature": "DateTimeUtils.formatDateFromServer(String time)", "testcase": false, "constructor": false}, {"identifier": "getRelativeTime", "parameters": "(String dateTime, Boolean dateTimeFromServer)", "modifiers": "public static", "return": "String", "signature": "String getRelativeTime(String dateTime, Boolean dateTimeFromServer)", "full_signature": "public static String getRelativeTime(String dateTime, Boolean dateTimeFromServer)", "class_method_signature": "DateTimeUtils.getRelativeTime(String dateTime, Boolean dateTimeFromServer)", "testcase": false, "constructor": false}, {"identifier": "getFormattedDate", "parameters": "(String format, long time)", "modifiers": "public static", "return": "String", "signature": "String getFormattedDate(String format, long time)", "full_signature": "public static String getFormattedDate(String format, long time)", "class_method_signature": "DateTimeUtils.getFormattedDate(String format, long time)", "testcase": false, "constructor": false}], "file": "collect_app/src/main/java/org/odk/collect/android/utilities/DateTimeUtils.java"}, "focal_method": {"identifier": "skipDaylightSavingGapIfExists", "parameters": "(LocalDateTime date)", "modifiers": "public static", "return": "LocalDateTime", "body": "public static LocalDateTime skipDaylightSavingGapIfExists(LocalDateTime date) {\n        final DateTimeZone dtz = DateTimeZone.getDefault();\n\n        if (dtz != null) {\n            while (dtz.isLocalDateTimeGap(date)) {\n                date = date.plusMinutes(1);\n            }\n        }\n        return date;\n    }", "signature": "LocalDateTime skipDaylightSavingGapIfExists(LocalDateTime date)", "full_signature": "public static LocalDateTime skipDaylightSavingGapIfExists(LocalDateTime date)", "class_method_signature": "DateTimeUtils.skipDaylightSavingGapIfExists(LocalDateTime date)", "testcase": false, "constructor": false, "invocations": ["getDefault", "isLocalDateTimeGap", "plusMinutes"]}, "repository": {"repo_id": 166636413, "url": "https://github.com/fieldsight/fieldsight-mobile", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 41030, "license": "licensed"}}