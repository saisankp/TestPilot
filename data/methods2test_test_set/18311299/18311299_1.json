{"test_class": {"identifier": "ReactiveTriggerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String TRIGGER_TABLE = \"testTable\";", "modifier": "public static final", "type": "String", "declarator": "TRIGGER_TABLE = \"testTable\"", "var_name": "TRIGGER_TABLE"}, {"original_string": "public static final String TRIGGER_NAME = \"triggerName\";", "modifier": "public static final", "type": "String", "declarator": "TRIGGER_NAME = \"triggerName\"", "var_name": "TRIGGER_NAME"}, {"original_string": "public static final List<String> TABLE_COLS = Lists.newArrayList(\"ID\", \"TXT\");", "modifier": "public static final", "type": "List<String>", "declarator": "TABLE_COLS = Lists.newArrayList(\"ID\", \"TXT\")", "var_name": "TABLE_COLS"}, {"original_string": "private ReactiveTrigger reactiveTrigger = new ReactiveTrigger(TRIGGER_NAME, TRIGGER_TABLE, INSERT, AFTER,\n            TABLE_COLS);", "modifier": "private", "type": "ReactiveTrigger", "declarator": "reactiveTrigger = new ReactiveTrigger(TRIGGER_NAME, TRIGGER_TABLE, INSERT, AFTER,\n            TABLE_COLS)", "var_name": "reactiveTrigger"}], "file": "reactive-source-mysql/src/test/java/org/reactivesource/mysql/ReactiveTriggerTest.java"}, "test_case": {"identifier": "testCreatesTheCorrectJsonForOldEntityForUpdate", "parameters": "()", "modifiers": "@Test(groups = SMALL) public", "return": "void", "body": "@Test(groups = SMALL)\n    public void testCreatesTheCorrectJsonForOldEntityForUpdate() {\n        ReactiveTrigger reactiveTrigger = new ReactiveTrigger(TRIGGER_NAME, TRIGGER_TABLE, UPDATE, AFTER, TABLE_COLS);\n        assertEquals(reactiveTrigger.oldJson(), \"CONCAT('{',\" +\n                \"'\\\\\\\"ID\\\\\\\":','\\\\\\\"',OLD.ID,'\\\\\\\"',',',\" +\n                \"'\\\\\\\"TXT\\\\\\\":','\\\\\\\"',OLD.TXT,'\\\\\\\"',\" +\n                \"'}')\");\n    }", "signature": "void testCreatesTheCorrectJsonForOldEntityForUpdate()", "full_signature": "@Test(groups = SMALL) public void testCreatesTheCorrectJsonForOldEntityForUpdate()", "class_method_signature": "ReactiveTriggerTest.testCreatesTheCorrectJsonForOldEntityForUpdate()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "oldJson"]}, "focal_class": {"identifier": "ReactiveTrigger", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EMPTY_TRIGGER_NAME_MSG = \"triggerName can not be null or empty\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY_TRIGGER_NAME_MSG = \"triggerName can not be null or empty\"", "var_name": "EMPTY_TRIGGER_NAME_MSG"}, {"original_string": "private static final String EMPTY_TRIGGER_TABLE_MSG = \"triggerTable can not be null or empty\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY_TRIGGER_TABLE_MSG = \"triggerTable can not be null or empty\"", "var_name": "EMPTY_TRIGGER_TABLE_MSG"}, {"original_string": "private static final String NULL_TRIGGER_EVENT_MSG = \"triggerEvent can not be null or empty\";", "modifier": "private static final", "type": "String", "declarator": "NULL_TRIGGER_EVENT_MSG = \"triggerEvent can not be null or empty\"", "var_name": "NULL_TRIGGER_EVENT_MSG"}, {"original_string": "private static final String NULL_TRIGGER_TIME_MSG = \"triggerTime can not be null or empty\";", "modifier": "private static final", "type": "String", "declarator": "NULL_TRIGGER_TIME_MSG = \"triggerTime can not be null or empty\"", "var_name": "NULL_TRIGGER_TIME_MSG"}, {"original_string": "private static final String EMPTY_TABLE_COLUMNS_MSG = \"tableColumns can not be null or empty\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY_TABLE_COLUMNS_MSG = \"tableColumns can not be null or empty\"", "var_name": "EMPTY_TABLE_COLUMNS_MSG"}, {"original_string": "private final String triggerName;", "modifier": "private final", "type": "String", "declarator": "triggerName", "var_name": "triggerName"}, {"original_string": "private final String triggerTable;", "modifier": "private final", "type": "String", "declarator": "triggerTable", "var_name": "triggerTable"}, {"original_string": "private final TriggerEvent triggerEvent;", "modifier": "private final", "type": "TriggerEvent", "declarator": "triggerEvent", "var_name": "triggerEvent"}, {"original_string": "private final TriggerTime triggerTime;", "modifier": "private final", "type": "TriggerTime", "declarator": "triggerTime", "var_name": "triggerTime"}, {"original_string": "private final List<String> tableColumns;", "modifier": "private final", "type": "List<String>", "declarator": "tableColumns", "var_name": "tableColumns"}, {"original_string": "private static final String CREATE_TRIGGER_TEMPLATE =\n            \"CREATE TRIGGER %s %s %s ON %s FOR EACH ROW\\n\" +\n                    \"BEGIN \\n\" +\n                    \"{mainBody} \\n\" +\n                    \"END\";", "modifier": "private static final", "type": "String", "declarator": "CREATE_TRIGGER_TEMPLATE =\n            \"CREATE TRIGGER %s %s %s ON %s FOR EACH ROW\\n\" +\n                    \"BEGIN \\n\" +\n                    \"{mainBody} \\n\" +\n                    \"END\"", "var_name": "CREATE_TRIGGER_TEMPLATE"}, {"original_string": "private static final String DROP_TRIGGER_TEMPLATE =\n            \"DROP TRIGGER IF EXISTS %s\";", "modifier": "private static final", "type": "String", "declarator": "DROP_TRIGGER_TEMPLATE =\n            \"DROP TRIGGER IF EXISTS %s\"", "var_name": "DROP_TRIGGER_TEMPLATE"}, {"original_string": "private static final String MAIN_BODY_TEMPLATE =\n            \"SET @oldJson = {oldJson}; \\n\" +\n                    \"SET @newJson = {newJson}; \\n\" +\n                    \"INSERT INTO \" + MysqlEventRepo.TABLE_NAME +\n                    \"(\" + TABLE_NAME_COL + \",\" + EVENT_TYPE_COL + \",\" + OLD_ENTITY_COL + \",\" + NEW_ENTITY_COL + \",\"\n                    + CREATED_DT_COL + \")\\n\" +\n                    \"VALUES ('{tableName}', '{eventType}', @oldJson, @newJson, NOW());\";", "modifier": "private static final", "type": "String", "declarator": "MAIN_BODY_TEMPLATE =\n            \"SET @oldJson = {oldJson}; \\n\" +\n                    \"SET @newJson = {newJson}; \\n\" +\n                    \"INSERT INTO \" + MysqlEventRepo.TABLE_NAME +\n                    \"(\" + TABLE_NAME_COL + \",\" + EVENT_TYPE_COL + \",\" + OLD_ENTITY_COL + \",\" + NEW_ENTITY_COL + \",\"\n                    + CREATED_DT_COL + \")\\n\" +\n                    \"VALUES ('{tableName}', '{eventType}', @oldJson, @newJson, NOW());\"", "var_name": "MAIN_BODY_TEMPLATE"}], "methods": [{"identifier": "ReactiveTrigger", "parameters": "(String triggerName, String triggerTable, TriggerEvent triggerEvent, TriggerTime triggerTime,\n                    List<String> tableColumns)", "modifiers": "", "return": "", "signature": " ReactiveTrigger(String triggerName, String triggerTable, TriggerEvent triggerEvent, TriggerTime triggerTime,\n                    List<String> tableColumns)", "full_signature": "  ReactiveTrigger(String triggerName, String triggerTable, TriggerEvent triggerEvent, TriggerTime triggerTime,\n                    List<String> tableColumns)", "class_method_signature": "ReactiveTrigger.ReactiveTrigger(String triggerName, String triggerTable, TriggerEvent triggerEvent, TriggerTime triggerTime,\n                    List<String> tableColumns)", "testcase": false, "constructor": true}, {"identifier": "getCreateSql", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getCreateSql()", "full_signature": " String getCreateSql()", "class_method_signature": "ReactiveTrigger.getCreateSql()", "testcase": false, "constructor": false}, {"identifier": "newJson", "parameters": "()", "modifiers": "", "return": "String", "signature": "String newJson()", "full_signature": " String newJson()", "class_method_signature": "ReactiveTrigger.newJson()", "testcase": false, "constructor": false}, {"identifier": "oldJson", "parameters": "()", "modifiers": "", "return": "String", "signature": "String oldJson()", "full_signature": " String oldJson()", "class_method_signature": "ReactiveTrigger.oldJson()", "testcase": false, "constructor": false}, {"identifier": "getTriggerName", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getTriggerName()", "full_signature": " String getTriggerName()", "class_method_signature": "ReactiveTrigger.getTriggerName()", "testcase": false, "constructor": false}, {"identifier": "getTriggerTable", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getTriggerTable()", "full_signature": " String getTriggerTable()", "class_method_signature": "ReactiveTrigger.getTriggerTable()", "testcase": false, "constructor": false}, {"identifier": "getTriggerEvent", "parameters": "()", "modifiers": "", "return": "TriggerEvent", "signature": "TriggerEvent getTriggerEvent()", "full_signature": " TriggerEvent getTriggerEvent()", "class_method_signature": "ReactiveTrigger.getTriggerEvent()", "testcase": false, "constructor": false}, {"identifier": "getTriggerTime", "parameters": "()", "modifiers": "", "return": "TriggerTime", "signature": "TriggerTime getTriggerTime()", "full_signature": " TriggerTime getTriggerTime()", "class_method_signature": "ReactiveTrigger.getTriggerTime()", "testcase": false, "constructor": false}, {"identifier": "getTableColumns", "parameters": "()", "modifiers": "", "return": "List<String>", "signature": "List<String> getTableColumns()", "full_signature": " List<String> getTableColumns()", "class_method_signature": "ReactiveTrigger.getTableColumns()", "testcase": false, "constructor": false}, {"identifier": "generateConcatStatement", "parameters": "(String columnPrefix, List<String> tableColumns)", "modifiers": "private", "return": "String", "signature": "String generateConcatStatement(String columnPrefix, List<String> tableColumns)", "full_signature": "private String generateConcatStatement(String columnPrefix, List<String> tableColumns)", "class_method_signature": "ReactiveTrigger.generateConcatStatement(String columnPrefix, List<String> tableColumns)", "testcase": false, "constructor": false}, {"identifier": "getDropSql", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDropSql()", "full_signature": "public String getDropSql()", "class_method_signature": "ReactiveTrigger.getDropSql()", "testcase": false, "constructor": false}], "file": "reactive-source-mysql/src/main/java/org/reactivesource/mysql/ReactiveTrigger.java"}, "focal_method": {"identifier": "oldJson", "parameters": "()", "modifiers": "", "return": "String", "body": "String oldJson() {\n        if (INSERT.equals(triggerEvent)) {\n            return \"'{}'\";\n        } else {\n            return generateConcatStatement(\"OLD\", tableColumns);\n        }\n    }", "signature": "String oldJson()", "full_signature": " String oldJson()", "class_method_signature": "ReactiveTrigger.oldJson()", "testcase": false, "constructor": false, "invocations": ["equals", "generateConcatStatement"]}, "repository": {"repo_id": 18311299, "url": "https://github.com/eBay/reactive-source", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 9, "size": 317, "license": "licensed"}}