{"test_class": {"identifier": "AnomaliesProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExecutorService executorService;", "modifier": "private", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private AnomaliesProcessor anomaliesProcessor;", "modifier": "private", "type": "AnomaliesProcessor", "declarator": "anomaliesProcessor", "var_name": "anomaliesProcessor"}], "file": "kafka/src/test/java/com/expedia/adaptivealerting/kafka/visualizer/AnomaliesProcessorTest.java"}, "test_case": {"identifier": "testProcessZeroMetricsForNormalAnomalies", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcessZeroMetricsForNormalAnomalies() {\n        ConsumerRecords<String, MappedMetricData> metricDataConsumerRecords = buildMetricRecords(4, AnomalyLevel.NORMAL);\n        List<AnomalyModel> anomalyModels = anomaliesProcessor.processMetrics(metricDataConsumerRecords, executorService);\n        assertNotNull(anomalyModels);\n        assertTrue(anomalyModels.size() == 0);\n    }", "signature": "void testProcessZeroMetricsForNormalAnomalies()", "full_signature": "@Test public void testProcessZeroMetricsForNormalAnomalies()", "class_method_signature": "AnomaliesProcessorTest.testProcessZeroMetricsForNormalAnomalies()", "testcase": true, "constructor": false, "invocations": ["buildMetricRecords", "processMetrics", "assertNotNull", "assertTrue", "size"]}, "focal_class": {"identifier": "AnomaliesProcessor", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "AnomaliesProcessor", "parameters": "()", "modifiers": "public", "return": "", "signature": " AnomaliesProcessor()", "full_signature": "public  AnomaliesProcessor()", "class_method_signature": "AnomaliesProcessor.AnomaliesProcessor()", "testcase": false, "constructor": true}, {"identifier": "processMetrics", "parameters": "(ConsumerRecords<String, MappedMetricData> metricRecords, ExecutorService executorService)", "modifiers": "public", "return": "List<AnomalyModel>", "signature": "List<AnomalyModel> processMetrics(ConsumerRecords<String, MappedMetricData> metricRecords, ExecutorService executorService)", "full_signature": "public List<AnomalyModel> processMetrics(ConsumerRecords<String, MappedMetricData> metricRecords, ExecutorService executorService)", "class_method_signature": "AnomaliesProcessor.processMetrics(ConsumerRecords<String, MappedMetricData> metricRecords, ExecutorService executorService)", "testcase": false, "constructor": false}], "file": "kafka/src/main/java/com/expedia/adaptivealerting/kafka/visualizer/AnomaliesProcessor.java"}, "focal_method": {"identifier": "processMetrics", "parameters": "(ConsumerRecords<String, MappedMetricData> metricRecords, ExecutorService executorService)", "modifiers": "public", "return": "List<AnomalyModel>", "body": "public List<AnomalyModel> processMetrics(ConsumerRecords<String, MappedMetricData> metricRecords, ExecutorService executorService) {\n\n        List<AnomalyModel> anomalyModels = new ArrayList();\n        for (ConsumerRecord<String, MappedMetricData> consumerRecord : metricRecords) {\n            MappedMetricData mappedMetricData = consumerRecord.value();\n            if (mappedMetricData != null) {\n                OutlierDetectorResult outlierDetectorResult = (OutlierDetectorResult) mappedMetricData.getAnomalyResult();\n                if (outlierDetectorResult.getAnomalyLevel() != AnomalyLevel.NORMAL) {\n                    AnomalyModel.Builder anomalyModel = AnomalyModel.newBuilder();\n                    if (outlierDetectorResult != null) {\n                        anomalyModel.level(outlierDetectorResult.getAnomalyLevel().toString());\n                        anomalyModel.anomalyThresholds(outlierDetectorResult.getThresholds());\n                    }\n\n                    if (mappedMetricData.getDetectorUuid() != null) {\n                        anomalyModel.uuid(mappedMetricData.getDetectorUuid().toString());\n                    }\n                    MetricData metricData = mappedMetricData.getMetricData();\n                    if (metricData != null) {\n                        anomalyModel.timestamp(VisualizerUtility.convertToDate(metricData.getTimestamp()));\n                        anomalyModel.value(metricData.getValue());\n                        if (metricData.getMetricDefinition() != null) {\n                            anomalyModel.key(metricData.getMetricDefinition().getKey());\n                            anomalyModel.tags(metricData.getMetricDefinition().getTags());\n                        }\n                    }\n                    anomalyModels.add(anomalyModel.build());\n                }\n            }\n        }\n        if (anomalyModels.size() > 0) {\n            ElasticSearchBulkService elasticSearchBulkService = new ElasticSearchBulkService(anomalyModels);\n            executorService.submit(elasticSearchBulkService);\n            log.info(\"sending anomaly records to elasticsearch: {}\", anomalyModels.size());\n        }\n        return anomalyModels;\n    }", "signature": "List<AnomalyModel> processMetrics(ConsumerRecords<String, MappedMetricData> metricRecords, ExecutorService executorService)", "full_signature": "public List<AnomalyModel> processMetrics(ConsumerRecords<String, MappedMetricData> metricRecords, ExecutorService executorService)", "class_method_signature": "AnomaliesProcessor.processMetrics(ConsumerRecords<String, MappedMetricData> metricRecords, ExecutorService executorService)", "testcase": false, "constructor": false, "invocations": ["value", "getAnomalyResult", "getAnomalyLevel", "newBuilder", "level", "toString", "getAnomalyLevel", "anomalyThresholds", "getThresholds", "getDetectorUuid", "uuid", "toString", "getDetectorUuid", "getMetricData", "timestamp", "convertToDate", "getTimestamp", "value", "getValue", "getMetricDefinition", "key", "getKey", "getMetricDefinition", "tags", "getTags", "getMetricDefinition", "add", "build", "size", "submit", "info", "size"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}