{"test_class": {"identifier": "CreateAsyncOpPluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CreateAsyncOpPlugin plugin;", "modifier": "private", "type": "CreateAsyncOpPlugin", "declarator": "plugin", "var_name": "plugin"}, {"original_string": "private IBootstrap bootstrap;", "modifier": "private", "type": "IBootstrap", "declarator": "bootstrap", "var_name": "bootstrap"}], "file": "CommonFeatures/AsyncOperations-plugins/PluginCreateAsyncOperationActor/src/test/java/info/smart_tools/smartactors/async_operations_plugins/create_async_operation_plugin/CreateAsyncOpPluginTest.java"}, "test_case": {"identifier": "MustCorrectLoadPlugin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void MustCorrectLoadPlugin() throws Exception {\n\n        BootstrapItem bootstrapItem = mock(BootstrapItem.class);\n        whenNew(BootstrapItem.class).withArguments(\"CreateAsyncOperationActorPlugin\").thenReturn(bootstrapItem);\n\n        when(bootstrapItem.after(anyString())).thenReturn(bootstrapItem);\n        when(bootstrapItem.before(anyString())).thenReturn(bootstrapItem);\n\n        plugin.load();\n\n        verifyNew(BootstrapItem.class).withArguments(\"CreateAsyncOperationActorPlugin\");\n\n        ArgumentCaptor<IPoorAction> actionArgumentCaptor = ArgumentCaptor.forClass(IPoorAction.class);\n\n        //verify(bootstrapItem).after(\"IOC\");\n        verify(bootstrapItem).process(actionArgumentCaptor.capture());\n\n        verify(bootstrap).add(bootstrapItem);\n\n        IKey createAsyncOpKey = mock(IKey.class);\n        when(Keys.getOrAdd(CreateAsyncOperationActor.class.getCanonicalName())).thenReturn(createAsyncOpKey);\n\n        actionArgumentCaptor.getValue().execute();\n\n        verifyStatic();\n        Keys.getOrAdd(CreateAsyncOperationActor.class.getCanonicalName());\n\n        ArgumentCaptor<CreateNewInstanceStrategy> createNewInstanceStrategyArgumentCaptor = ArgumentCaptor.forClass(CreateNewInstanceStrategy.class);\n\n        verifyStatic();\n        IOC.register(eq(createAsyncOpKey), createNewInstanceStrategyArgumentCaptor.capture());\n\n        IObject arg = mock(IObject.class);\n\n        CreateAsyncOperationActor actor = mock(CreateAsyncOperationActor.class);\n        whenNew(CreateAsyncOperationActor.class).withArguments(arg).thenReturn(actor);\n\n        assertTrue(\"Objects must return correct object\", createNewInstanceStrategyArgumentCaptor.getValue().resolve(arg) == actor);\n        verifyNew(CreateAsyncOperationActor.class).withArguments(arg);\n    }", "signature": "void MustCorrectLoadPlugin()", "full_signature": "@Test public void MustCorrectLoadPlugin()", "class_method_signature": "CreateAsyncOpPluginTest.MustCorrectLoadPlugin()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "withArguments", "whenNew", "thenReturn", "when", "after", "anyString", "thenReturn", "when", "before", "anyString", "load", "withArguments", "verifyNew", "forClass", "process", "verify", "capture", "add", "verify", "mock", "thenReturn", "when", "getOrAdd", "getCanonicalName", "execute", "getValue", "verifyStatic", "getOrAdd", "getCanonicalName", "forClass", "verifyStatic", "register", "eq", "capture", "mock", "mock", "thenReturn", "withArguments", "whenNew", "assertTrue", "resolve", "getValue", "withArguments", "verifyNew"]}, "focal_class": {"identifier": "CreateAsyncOpPlugin", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private final IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private final", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}], "methods": [{"identifier": "CreateAsyncOpPlugin", "parameters": "(final IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " CreateAsyncOpPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  CreateAsyncOpPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "CreateAsyncOpPlugin.CreateAsyncOpPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "CreateAsyncOpPlugin.load()", "testcase": false, "constructor": false}], "file": "CommonFeatures/AsyncOperations-plugins/PluginCreateAsyncOperationActor/src/main/java/info/smart_tools/smartactors/async_operations_plugins/create_async_operation_plugin/CreateAsyncOpPlugin.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load() throws PluginException {\n        try {\n            IBootstrapItem<String> item = new BootstrapItem(\"CreateAsyncOperationActorPlugin\");\n\n            item\n//                    .after(\"IOC\")\n//                    .after(\"datetime_formatter_plugin\")\n//                    .before(\"starter\")\n                    .process(() -> {\n                        try {\n                            IKey createAsyncOpKey = Keys.getOrAdd(CreateAsyncOperationActor.class.getCanonicalName());\n                            IOC.register(createAsyncOpKey, new CreateNewInstanceStrategy(\n                                    (args) -> {\n                                        try {\n                                            return new CreateAsyncOperationActor((IObject) args[0]);\n                                        } catch (Exception e) {\n                                            throw new RuntimeException(e);\n                                        }\n                                    }));\n                        } catch (ResolutionException e) {\n                            throw new ActionExecuteException(\"CreateAsyncOperationActor plugin can't load: can't get CreateAsyncOperationActor key\", e);\n                        } catch (InvalidArgumentException e) {\n                            throw new ActionExecuteException(\"CreateAsyncOperationActor plugin can't load: can't create strategy\", e);\n                        } catch (RegistrationException e) {\n                            throw new ActionExecuteException(\"CreateAsyncOperationActor plugin can't load: can't register new strategy\", e);\n                        }\n                    });\n            bootstrap.add(item);\n        } catch (Exception e) {\n            throw new PluginException(\"Can't load CreateAsyncOperationActor plugin\", e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "CreateAsyncOpPlugin.load()", "testcase": false, "constructor": false, "invocations": ["process", "getOrAdd", "getCanonicalName", "register", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}