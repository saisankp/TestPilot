{"test_class": {"identifier": "ConfigBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DataSourceConfig DATA_SOURCE_CONFIG = new DataSourceConfig()\n        .setUrl(\"jdbc:h2:mem:test;MODE=mysql;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE\").setDriverName(Driver.class.getName()).setUsername(\"sa\").setPassword(\"\");", "modifier": "private static final", "type": "DataSourceConfig", "declarator": "DATA_SOURCE_CONFIG = new DataSourceConfig()\n        .setUrl(\"jdbc:h2:mem:test;MODE=mysql;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE\").setDriverName(Driver.class.getName()).setUsername(\"sa\").setPassword(\"\")", "var_name": "DATA_SOURCE_CONFIG"}], "file": "mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilderTest.java"}, "test_case": {"identifier": "matcherRegTableTest", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void matcherRegTableTest(){\n        Assertions.assertFalse(ConfigBuilder.matcherRegTable(\"user\"));\n        Assertions.assertFalse(ConfigBuilder.matcherRegTable(\"USER\"));\n        Assertions.assertFalse(ConfigBuilder.matcherRegTable(\"t_user\"));\n        Assertions.assertFalse(ConfigBuilder.matcherRegTable(\"T_USER\"));\n        Assertions.assertFalse(ConfigBuilder.matcherRegTable(\"t_user_1\"));\n        Assertions.assertFalse(ConfigBuilder.matcherRegTable(\"t_user_12\"));\n        Assertions.assertFalse(ConfigBuilder.matcherRegTable(\"t-user-12\"));\n        Assertions.assertTrue(ConfigBuilder.matcherRegTable(\"t_user_[0-9]\"));\n        Assertions.assertTrue(ConfigBuilder.matcherRegTable(\"t_user_\\\\d\"));\n        Assertions.assertTrue(ConfigBuilder.matcherRegTable(\"t_user_\\\\d{3,4}\"));\n        Assertions.assertTrue(ConfigBuilder.matcherRegTable(\"^t_.*\"));\n    }", "signature": "void matcherRegTableTest()", "full_signature": "@Test void matcherRegTableTest()", "class_method_signature": "ConfigBuilderTest.matcherRegTableTest()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "matcherRegTable", "assertFalse", "matcherRegTable", "assertFalse", "matcherRegTable", "assertFalse", "matcherRegTable", "assertFalse", "matcherRegTable", "assertFalse", "matcherRegTable", "assertFalse", "matcherRegTable", "assertTrue", "matcherRegTable", "assertTrue", "matcherRegTable", "assertTrue", "matcherRegTable", "assertTrue", "matcherRegTable"]}, "focal_class": {"identifier": "ConfigBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger LOGGER = LoggerFactory.getLogger(ConfigBuilder.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ConfigBuilder.class)", "var_name": "LOGGER"}, {"original_string": "@Setter(value = AccessLevel.NONE)\n    private final TemplateConfig template;", "modifier": "@Setter(value = AccessLevel.NONE)\n    private final", "type": "TemplateConfig", "declarator": "template", "var_name": "template"}, {"original_string": "@Getter(value = AccessLevel.NONE)\n    @Setter(value = AccessLevel.NONE)\n    private final DataSourceConfig dataSourceConfig;", "modifier": "@Getter(value = AccessLevel.NONE)\n    @Setter(value = AccessLevel.NONE)\n    private final", "type": "DataSourceConfig", "declarator": "dataSourceConfig", "var_name": "dataSourceConfig"}, {"original_string": "private final List<TableInfo> tableInfoList = new ArrayList<>();", "modifier": "private final", "type": "List<TableInfo>", "declarator": "tableInfoList = new ArrayList<>()", "var_name": "tableInfoList"}, {"original_string": "@Setter(value = AccessLevel.NONE)\n    private final Map<String, String> pathInfo = new HashMap<>();", "modifier": "@Setter(value = AccessLevel.NONE)\n    private final", "type": "Map<String, String>", "declarator": "pathInfo = new HashMap<>()", "var_name": "pathInfo"}, {"original_string": "private StrategyConfig strategyConfig;", "modifier": "private", "type": "StrategyConfig", "declarator": "strategyConfig", "var_name": "strategyConfig"}, {"original_string": "private GlobalConfig globalConfig;", "modifier": "private", "type": "GlobalConfig", "declarator": "globalConfig", "var_name": "globalConfig"}, {"original_string": "private InjectionConfig injectionConfig;", "modifier": "private", "type": "InjectionConfig", "declarator": "injectionConfig", "var_name": "injectionConfig"}, {"original_string": "private static final Pattern REGX = Pattern.compile(\"[~!/@#$%^&*()+\\\\\\\\\\\\[\\\\]|{};:'\\\",<.>?]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "REGX = Pattern.compile(\"[~!/@#$%^&*()+\\\\\\\\\\\\[\\\\]|{};:'\\\",<.>?]+\")", "var_name": "REGX"}, {"original_string": "private final DecoratorDbQuery dbQuery;", "modifier": "private final", "type": "DecoratorDbQuery", "declarator": "dbQuery", "var_name": "dbQuery"}, {"original_string": "private final PackageConfig packageConfig;", "modifier": "private final", "type": "PackageConfig", "declarator": "packageConfig", "var_name": "packageConfig"}], "methods": [{"identifier": "ConfigBuilder", "parameters": "(PackageConfig packageConfig, DataSourceConfig dataSourceConfig, StrategyConfig strategyConfig,\n                         TemplateConfig template, GlobalConfig globalConfig)", "modifiers": "public", "return": "", "signature": " ConfigBuilder(PackageConfig packageConfig, DataSourceConfig dataSourceConfig, StrategyConfig strategyConfig,\n                         TemplateConfig template, GlobalConfig globalConfig)", "full_signature": "public  ConfigBuilder(PackageConfig packageConfig, DataSourceConfig dataSourceConfig, StrategyConfig strategyConfig,\n                         TemplateConfig template, GlobalConfig globalConfig)", "class_method_signature": "ConfigBuilder.ConfigBuilder(PackageConfig packageConfig, DataSourceConfig dataSourceConfig, StrategyConfig strategyConfig,\n                         TemplateConfig template, GlobalConfig globalConfig)", "testcase": false, "constructor": true}, {"identifier": "getTablesInfo", "parameters": "()", "modifiers": "private", "return": "List<TableInfo>", "signature": "List<TableInfo> getTablesInfo()", "full_signature": "private List<TableInfo> getTablesInfo()", "class_method_signature": "ConfigBuilder.getTablesInfo()", "testcase": false, "constructor": false}, {"identifier": "convertTableFields", "parameters": "(TableInfo tableInfo)", "modifiers": "private", "return": "void", "signature": "void convertTableFields(TableInfo tableInfo)", "full_signature": "private void convertTableFields(TableInfo tableInfo)", "class_method_signature": "ConfigBuilder.convertTableFields(TableInfo tableInfo)", "testcase": false, "constructor": false}, {"identifier": "formatComment", "parameters": "(String comment)", "modifiers": "@Deprecated public", "return": "String", "signature": "String formatComment(String comment)", "full_signature": "@Deprecated public String formatComment(String comment)", "class_method_signature": "ConfigBuilder.formatComment(String comment)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ConfigBuilder.close()", "testcase": false, "constructor": false}, {"identifier": "setTableInfoList", "parameters": "(List<TableInfo> tableInfoList)", "modifiers": "@Deprecated public", "return": "ConfigBuilder", "signature": "ConfigBuilder setTableInfoList(List<TableInfo> tableInfoList)", "full_signature": "@Deprecated public ConfigBuilder setTableInfoList(List<TableInfo> tableInfoList)", "class_method_signature": "ConfigBuilder.setTableInfoList(List<TableInfo> tableInfoList)", "testcase": false, "constructor": false}, {"identifier": "matcherRegTable", "parameters": "(String tableName)", "modifiers": "public static", "return": "boolean", "signature": "boolean matcherRegTable(String tableName)", "full_signature": "public static boolean matcherRegTable(String tableName)", "class_method_signature": "ConfigBuilder.matcherRegTable(String tableName)", "testcase": false, "constructor": false}, {"identifier": "getPackageInfo", "parameters": "()", "modifiers": "@Deprecated public", "return": "Map<String, String>", "signature": "Map<String, String> getPackageInfo()", "full_signature": "@Deprecated public Map<String, String> getPackageInfo()", "class_method_signature": "ConfigBuilder.getPackageInfo()", "testcase": false, "constructor": false}], "file": "mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java"}, "focal_method": {"identifier": "matcherRegTable", "parameters": "(String tableName)", "modifiers": "public static", "return": "boolean", "body": "public static boolean matcherRegTable(String tableName) {\n        return REGX.matcher(tableName).find();\n    }", "signature": "boolean matcherRegTable(String tableName)", "full_signature": "public static boolean matcherRegTable(String tableName)", "class_method_signature": "ConfigBuilder.matcherRegTable(String tableName)", "testcase": false, "constructor": false, "invocations": ["find", "matcher"]}, "repository": {"repo_id": 65987043, "url": "https://github.com/baomidou/mybatis-plus", "stars": 7720, "created": "8/18/2016 10:06:53 AM +00:00", "updates": "2020-01-27T08:09:51+00:00", "fork": "False", "license": "licensed"}}