{"test_class": {"identifier": "MixtureTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(MixtureTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(MixtureTest.class)", "var_name": "log"}], "file": "contrib/src/test/java/macrobase/analysis/stats/distribution/MixtureTest.java"}, "test_case": {"identifier": "nonZeroScoreTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void nonZeroScoreTest() {\n        List<MultivariateDistribution> listDist = new ArrayList<>(3);\n        double[] weights = {2. / 7, 3. / 7, 2. / 7};\n        double[][] distData = {\n                {1.5, 2}, {0.5, 0.4, 0.4, 0.5}, {2000},\n                {2, 0}, {0.3, 0, 0, 0.6}, {3000},\n                {4.5, 1}, {0.9, 0.2, 0.2, 0.3}, {2000}};\n        for (int i = 0; i < distData.length; i += 3) {\n            RealVector mean = new ArrayRealVector(distData[i + 0]);\n            double[][] covArray = new double[2][2];\n            covArray[0] = Arrays.copyOfRange(distData[i + 1], 0, 2);\n            covArray[1] = Arrays.copyOfRange(distData[i + 1], 2, 4);\n            RealMatrix cov = new BlockRealMatrix(covArray);\n            listDist.add(new MultivariateNormal(mean, cov));\n        }\n\n        Mixture mixture = new Mixture(listDist, weights);\n\n        assertEquals(0.155359, mixture.density(new ArrayRealVector(distData[0])), 1e-6);\n        assertEquals(0.162771, mixture.density(new ArrayRealVector(distData[3])), 1e-6);\n        assertEquals(0.094819, mixture.density(new ArrayRealVector(distData[6])), 1e-6);\n    }", "signature": "void nonZeroScoreTest()", "full_signature": "@Test public void nonZeroScoreTest()", "class_method_signature": "MixtureTest.nonZeroScoreTest()", "testcase": true, "constructor": false, "invocations": ["copyOfRange", "copyOfRange", "add", "assertEquals", "density", "assertEquals", "density", "assertEquals", "density"]}, "focal_class": {"identifier": "Mixture", "superclass": "", "interfaces": "implements MultivariateDistribution", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(Mixture.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Mixture.class)", "var_name": "log"}, {"original_string": "private List<MultivariateDistribution> components;", "modifier": "private", "type": "List<MultivariateDistribution>", "declarator": "components", "var_name": "components"}, {"original_string": "private double[] weights;", "modifier": "private", "type": "double[]", "declarator": "weights", "var_name": "weights"}], "methods": [{"identifier": "Mixture", "parameters": "(List<MultivariateDistribution> components, double[] weights)", "modifiers": "public", "return": "", "signature": " Mixture(List<MultivariateDistribution> components, double[] weights)", "full_signature": "public  Mixture(List<MultivariateDistribution> components, double[] weights)", "class_method_signature": "Mixture.Mixture(List<MultivariateDistribution> components, double[] weights)", "testcase": false, "constructor": true}, {"identifier": "density", "parameters": "(RealVector vector)", "modifiers": "@Override public", "return": "double", "signature": "double density(RealVector vector)", "full_signature": "@Override public double density(RealVector vector)", "class_method_signature": "Mixture.density(RealVector vector)", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/stats/distribution/Mixture.java"}, "focal_method": {"identifier": "density", "parameters": "(RealVector vector)", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double density(RealVector vector) {\n        double d = 0;\n        for (int i=0; i< components.size(); i++) {\n            d += components.get(i).density(vector) * weights[i];\n        }\n        return d;\n    }", "signature": "double density(RealVector vector)", "full_signature": "@Override public double density(RealVector vector)", "class_method_signature": "Mixture.density(RealVector vector)", "testcase": false, "constructor": false, "invocations": ["size", "density", "get"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}