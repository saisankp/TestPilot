{"test_class": {"identifier": "ImplicitThingCreationMessageMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DittoProtocolAdapter DITTO_PROTOCOL_ADAPTER = DittoProtocolAdapter.newInstance();", "modifier": "private static final", "type": "DittoProtocolAdapter", "declarator": "DITTO_PROTOCOL_ADAPTER = DittoProtocolAdapter.newInstance()", "var_name": "DITTO_PROTOCOL_ADAPTER"}, {"original_string": "private static final String HEADER_HONO_DEVICE_ID = \"device_id\";", "modifier": "private static final", "type": "String", "declarator": "HEADER_HONO_DEVICE_ID = \"device_id\"", "var_name": "HEADER_HONO_DEVICE_ID"}, {"original_string": "private static final String HEADER_HONO_GATEWAY_ID = \"gateway_id\";", "modifier": "private static final", "type": "String", "declarator": "HEADER_HONO_GATEWAY_ID = \"gateway_id\"", "var_name": "HEADER_HONO_GATEWAY_ID"}, {"original_string": "private static final JsonObject THING_TEMPLATE = JsonObject.newBuilder()\n            .set(\"thingId\", \"{{ header:device_id }}\")\n            .set(\"_copyPolicyFrom\", \"{{ header:gateway_id }}\")\n            .set(\"attributes\", JsonObject.newBuilder()\n                    .set(\"Info\", JsonObject.newBuilder()\n                            .set(\"gatewayId\", \"{{ header:gateway_id }}\")\n                            .build())\n                    .build())\n            .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "THING_TEMPLATE = JsonObject.newBuilder()\n            .set(\"thingId\", \"{{ header:device_id }}\")\n            .set(\"_copyPolicyFrom\", \"{{ header:gateway_id }}\")\n            .set(\"attributes\", JsonObject.newBuilder()\n                    .set(\"Info\", JsonObject.newBuilder()\n                            .set(\"gatewayId\", \"{{ header:gateway_id }}\")\n                            .build())\n                    .build())\n            .build()", "var_name": "THING_TEMPLATE"}, {"original_string": "private static final JsonObject COMMAND_HEADERS = JsonObject.newBuilder()\n            .set(\"test-header\", \"this-is-a-test-header\")\n            .set(\"other-test-header\", \"{{ header:gateway_id }}\")\n            .set(\"empty-test-header\", \"{{ header:gateway_id | fn:filter(header:foobar, 'eq', 'bar') }}\")\n            .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "COMMAND_HEADERS = JsonObject.newBuilder()\n            .set(\"test-header\", \"this-is-a-test-header\")\n            .set(\"other-test-header\", \"{{ header:gateway_id }}\")\n            .set(\"empty-test-header\", \"{{ header:gateway_id | fn:filter(header:foobar, 'eq', 'bar') }}\")\n            .build()", "var_name": "COMMAND_HEADERS"}, {"original_string": "private static final JsonObject INITIAL_POLICY = Policy.newBuilder()\n            .forLabel(\"DEFAULT\")\n            .setSubject(SubjectIssuer.INTEGRATION, \"solutionId:connectionId\")\n            .setGrantedPermissions(PoliciesResourceType.policyResource(\"/\"), READ, WRITE)\n            .setGrantedPermissions(PoliciesResourceType.thingResource(\"/\"), READ, WRITE)\n            .setGrantedPermissions(PoliciesResourceType.messageResource(\"/\"), READ, WRITE)\n            .build()\n            .toJson();", "modifier": "private static final", "type": "JsonObject", "declarator": "INITIAL_POLICY = Policy.newBuilder()\n            .forLabel(\"DEFAULT\")\n            .setSubject(SubjectIssuer.INTEGRATION, \"solutionId:connectionId\")\n            .setGrantedPermissions(PoliciesResourceType.policyResource(\"/\"), READ, WRITE)\n            .setGrantedPermissions(PoliciesResourceType.thingResource(\"/\"), READ, WRITE)\n            .setGrantedPermissions(PoliciesResourceType.messageResource(\"/\"), READ, WRITE)\n            .build()\n            .toJson()", "var_name": "INITIAL_POLICY"}, {"original_string": "private static final JsonObject THING_TEMPLATE_WITH_POLICY = JsonObject.newBuilder()\n            .set(\"thingId\", \"{{ header:device_id }}\")\n            .set(\"policyId\", \"{{ header:device_id }}\")\n            .set(\"_policy\", INITIAL_POLICY)\n            .set(\"attributes\", JsonObject.newBuilder()\n                    .set(\"Info\", JsonObject.newBuilder()\n                            .set(\"gatewayId\", \"{{ header:gateway_id }}\")\n                            .build())\n                    .build())\n            .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "THING_TEMPLATE_WITH_POLICY = JsonObject.newBuilder()\n            .set(\"thingId\", \"{{ header:device_id }}\")\n            .set(\"policyId\", \"{{ header:device_id }}\")\n            .set(\"_policy\", INITIAL_POLICY)\n            .set(\"attributes\", JsonObject.newBuilder()\n                    .set(\"Info\", JsonObject.newBuilder()\n                            .set(\"gatewayId\", \"{{ header:gateway_id }}\")\n                            .build())\n                    .build())\n            .build()", "var_name": "THING_TEMPLATE_WITH_POLICY"}, {"original_string": "private static final JsonObject THING_TEMPLATE_WITHOUT_PLACEHOLDERS = JsonObject.newBuilder()\n            .set(\"thingId\", \"some:validThingId!\")\n            .set(\"policyId\", \"some:validPolicyId!\")\n            .set(\"attributes\", JsonObject.newBuilder()\n                    .set(\"Info\", JsonObject.newBuilder()\n                            .set(\"gatewayId\", \"some:validGatewayId!\")\n                            .build())\n                    .build())\n            .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "THING_TEMPLATE_WITHOUT_PLACEHOLDERS = JsonObject.newBuilder()\n            .set(\"thingId\", \"some:validThingId!\")\n            .set(\"policyId\", \"some:validPolicyId!\")\n            .set(\"attributes\", JsonObject.newBuilder()\n                    .set(\"Info\", JsonObject.newBuilder()\n                            .set(\"gatewayId\", \"some:validGatewayId!\")\n                            .build())\n                    .build())\n            .build()", "var_name": "THING_TEMPLATE_WITHOUT_PLACEHOLDERS"}, {"original_string": "public static final String GATEWAY_ID = \"headerNamespace:headerGatewayId\";", "modifier": "public static final", "type": "String", "declarator": "GATEWAY_ID = \"headerNamespace:headerGatewayId\"", "var_name": "GATEWAY_ID"}, {"original_string": "public static final String DEVICE_ID = \"headerNamespace:headerDeviceId\";", "modifier": "public static final", "type": "String", "declarator": "DEVICE_ID = \"headerNamespace:headerDeviceId\"", "var_name": "DEVICE_ID"}, {"original_string": "private static MappingConfig mappingConfig;", "modifier": "private static", "type": "MappingConfig", "declarator": "mappingConfig", "var_name": "mappingConfig"}, {"original_string": "private MessageMapper underTest;", "modifier": "private", "type": "MessageMapper", "declarator": "underTest", "var_name": "underTest"}], "file": "services/connectivity/mapping/src/test/java/org/eclipse/ditto/services/connectivity/mapping/ImplicitThingCreationMessageMapperTest.java"}, "test_case": {"identifier": "doForwardMappingContextWithDeviceIdPlaceholder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doForwardMappingContextWithDeviceIdPlaceholder() {\n        final Map<String, String> headers = createValidHeaders();\n        underTest.configure(mappingConfig, createMapperConfig(THING_TEMPLATE, COMMAND_HEADERS));\n\n        final ExternalMessage externalMessage = ExternalMessageFactory.newExternalMessageBuilder(headers).build();\n        final List<Adaptable> mappingResult = underTest.map(externalMessage);\n\n        final Signal<?> firstMappedSignal = getFirstMappedSignal(mappingResult);\n        assertThat(firstMappedSignal).isInstanceOf(CreateThing.class);\n        final CreateThing createThing = (CreateThing) firstMappedSignal;\n\n        final Thing expectedThing = createExpectedThing(DEVICE_ID, DEVICE_ID, GATEWAY_ID);\n        assertThat(createThing.getThing().getEntityId()).isEqualTo(expectedThing.getEntityId());\n        assertThat(createThing.getThing().getPolicyEntityId()).isEmpty();\n        assertThat(createThing.getThing().getAttributes()).isEqualTo(expectedThing.getAttributes());\n        assertThat(createThing.getDittoHeaders().getContentType()).contains(DITTO_PROTOCOL_CONTENT_TYPE);\n        assertThat(createThing.getPolicyIdOrPlaceholder()).contains(GATEWAY_ID);\n        assertThat(createThing.getDittoHeaders().isAllowPolicyLockout()).isEqualTo(true);\n    }", "signature": "void doForwardMappingContextWithDeviceIdPlaceholder()", "full_signature": "@Test public void doForwardMappingContextWithDeviceIdPlaceholder()", "class_method_signature": "ImplicitThingCreationMessageMapperTest.doForwardMappingContextWithDeviceIdPlaceholder()", "testcase": true, "constructor": false, "invocations": ["createValidHeaders", "configure", "createMapperConfig", "build", "newExternalMessageBuilder", "map", "getFirstMappedSignal", "isInstanceOf", "assertThat", "createExpectedThing", "isEqualTo", "assertThat", "getEntityId", "getThing", "getEntityId", "isEmpty", "assertThat", "getPolicyEntityId", "getThing", "isEqualTo", "assertThat", "getAttributes", "getThing", "getAttributes", "contains", "assertThat", "getContentType", "getDittoHeaders", "contains", "assertThat", "getPolicyIdOrPlaceholder", "isEqualTo", "assertThat", "isAllowPolicyLockout", "getDittoHeaders"]}, "focal_class": {"identifier": "ImplicitThingCreationMessageMapper", "superclass": "extends AbstractMessageMapper", "interfaces": "", "fields": [{"original_string": "private static final DittoLogger LOGGER = DittoLoggerFactory.getLogger(ImplicitThingCreationMessageMapper.class);", "modifier": "private static final", "type": "DittoLogger", "declarator": "LOGGER = DittoLoggerFactory.getLogger(ImplicitThingCreationMessageMapper.class)", "var_name": "LOGGER"}, {"original_string": "private static final DittoProtocolAdapter DITTO_PROTOCOL_ADAPTER = DittoProtocolAdapter.newInstance();", "modifier": "private static final", "type": "DittoProtocolAdapter", "declarator": "DITTO_PROTOCOL_ADAPTER = DittoProtocolAdapter.newInstance()", "var_name": "DITTO_PROTOCOL_ADAPTER"}, {"original_string": "private static final HeadersPlaceholder HEADERS_PLACEHOLDER = PlaceholderFactory.newHeadersPlaceholder();", "modifier": "private static final", "type": "HeadersPlaceholder", "declarator": "HEADERS_PLACEHOLDER = PlaceholderFactory.newHeadersPlaceholder()", "var_name": "HEADERS_PLACEHOLDER"}, {"original_string": "private static final String THING_TEMPLATE = \"thing\";", "modifier": "private static final", "type": "String", "declarator": "THING_TEMPLATE = \"thing\"", "var_name": "THING_TEMPLATE"}, {"original_string": "private static final String ALLOW_POLICY_LOCKOUT_OPTION = \"allowPolicyLockout\";", "modifier": "private static final", "type": "String", "declarator": "ALLOW_POLICY_LOCKOUT_OPTION = \"allowPolicyLockout\"", "var_name": "ALLOW_POLICY_LOCKOUT_OPTION"}, {"original_string": "private static final String COMMAND_HEADERS = \"commandHeaders\";", "modifier": "private static final", "type": "String", "declarator": "COMMAND_HEADERS = \"commandHeaders\"", "var_name": "COMMAND_HEADERS"}, {"original_string": "private static final String THING_ID = \"thingId\";", "modifier": "private static final", "type": "String", "declarator": "THING_ID = \"thingId\"", "var_name": "THING_ID"}, {"original_string": "private static final String THING_ID_CONFIGURATION_PROPERTY = THING_TEMPLATE + \"/\" + THING_ID;", "modifier": "private static final", "type": "String", "declarator": "THING_ID_CONFIGURATION_PROPERTY = THING_TEMPLATE + \"/\" + THING_ID", "var_name": "THING_ID_CONFIGURATION_PROPERTY"}, {"original_string": "private static final String POLICY_ID = \"policyId\";", "modifier": "private static final", "type": "String", "declarator": "POLICY_ID = \"policyId\"", "var_name": "POLICY_ID"}, {"original_string": "private static final String POLICY_ID_CONFIGURATION_PROPERTY = THING_TEMPLATE + \"/\" + POLICY_ID;", "modifier": "private static final", "type": "String", "declarator": "POLICY_ID_CONFIGURATION_PROPERTY = THING_TEMPLATE + \"/\" + POLICY_ID", "var_name": "POLICY_ID_CONFIGURATION_PROPERTY"}, {"original_string": "private String thingTemplate;", "modifier": "private", "type": "String", "declarator": "thingTemplate", "var_name": "thingTemplate"}, {"original_string": "private Map<String, String> commandHeaders;", "modifier": "private", "type": "Map<String, String>", "declarator": "commandHeaders", "var_name": "commandHeaders"}, {"original_string": "private boolean allowPolicyLockout;", "modifier": "private", "type": "boolean", "declarator": "allowPolicyLockout", "var_name": "allowPolicyLockout"}], "methods": [{"identifier": "doConfigure", "parameters": "(final MappingConfig mappingConfig, final MessageMapperConfiguration configuration)", "modifiers": "@Override protected", "return": "void", "signature": "void doConfigure(final MappingConfig mappingConfig, final MessageMapperConfiguration configuration)", "full_signature": "@Override protected void doConfigure(final MappingConfig mappingConfig, final MessageMapperConfiguration configuration)", "class_method_signature": "ImplicitThingCreationMessageMapper.doConfigure(final MappingConfig mappingConfig, final MessageMapperConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "validateThingEntityId", "parameters": "(final String thingId)", "modifiers": "private static", "return": "void", "signature": "void validateThingEntityId(final String thingId)", "full_signature": "private static void validateThingEntityId(final String thingId)", "class_method_signature": "ImplicitThingCreationMessageMapper.validateThingEntityId(final String thingId)", "testcase": false, "constructor": false}, {"identifier": "validatePolicyEntityId", "parameters": "(final String policyId)", "modifiers": "private static", "return": "void", "signature": "void validatePolicyEntityId(final String policyId)", "full_signature": "private static void validatePolicyEntityId(final String policyId)", "class_method_signature": "ImplicitThingCreationMessageMapper.validatePolicyEntityId(final String policyId)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(final ExternalMessage message)", "modifiers": "@Override public", "return": "List<Adaptable>", "signature": "List<Adaptable> map(final ExternalMessage message)", "full_signature": "@Override public List<Adaptable> map(final ExternalMessage message)", "class_method_signature": "ImplicitThingCreationMessageMapper.map(final ExternalMessage message)", "testcase": false, "constructor": false}, {"identifier": "getExpressionResolver", "parameters": "(final Map<String, String> headers)", "modifiers": "private static", "return": "ExpressionResolver", "signature": "ExpressionResolver getExpressionResolver(final Map<String, String> headers)", "full_signature": "private static ExpressionResolver getExpressionResolver(final Map<String, String> headers)", "class_method_signature": "ImplicitThingCreationMessageMapper.getExpressionResolver(final Map<String, String> headers)", "testcase": false, "constructor": false}, {"identifier": "applyPlaceholderReplacement", "parameters": "(final String template, final ExpressionResolver resolver)", "modifiers": "private static", "return": "String", "signature": "String applyPlaceholderReplacement(final String template, final ExpressionResolver resolver)", "full_signature": "private static String applyPlaceholderReplacement(final String template, final ExpressionResolver resolver)", "class_method_signature": "ImplicitThingCreationMessageMapper.applyPlaceholderReplacement(final String template, final ExpressionResolver resolver)", "testcase": false, "constructor": false}, {"identifier": "getCreateThingSignal", "parameters": "(final ExternalMessage message, final String template)", "modifiers": "private", "return": "Signal<CreateThing>", "signature": "Signal<CreateThing> getCreateThingSignal(final ExternalMessage message, final String template)", "full_signature": "private Signal<CreateThing> getCreateThingSignal(final ExternalMessage message, final String template)", "class_method_signature": "ImplicitThingCreationMessageMapper.getCreateThingSignal(final ExternalMessage message, final String template)", "testcase": false, "constructor": false}, {"identifier": "resolveCommandHeaders", "parameters": "(final ExternalMessage externalMessage,\n            final Map<String, String> errorResponseHeaders)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> resolveCommandHeaders(final ExternalMessage externalMessage,\n            final Map<String, String> errorResponseHeaders)", "full_signature": "private static Map<String, String> resolveCommandHeaders(final ExternalMessage externalMessage,\n            final Map<String, String> errorResponseHeaders)", "class_method_signature": "ImplicitThingCreationMessageMapper.resolveCommandHeaders(final ExternalMessage externalMessage,\n            final Map<String, String> errorResponseHeaders)", "testcase": false, "constructor": false}, {"identifier": "createInlinePolicyJson", "parameters": "(final JsonObject thingJson)", "modifiers": "@Nullable private static", "return": "JsonObject", "signature": "JsonObject createInlinePolicyJson(final JsonObject thingJson)", "full_signature": "@Nullable private static JsonObject createInlinePolicyJson(final JsonObject thingJson)", "class_method_signature": "ImplicitThingCreationMessageMapper.createInlinePolicyJson(final JsonObject thingJson)", "testcase": false, "constructor": false}, {"identifier": "getCopyPolicyFrom", "parameters": "(final JsonObject thingJson)", "modifiers": "@Nullable private static", "return": "String", "signature": "String getCopyPolicyFrom(final JsonObject thingJson)", "full_signature": "@Nullable private static String getCopyPolicyFrom(final JsonObject thingJson)", "class_method_signature": "ImplicitThingCreationMessageMapper.getCopyPolicyFrom(final JsonObject thingJson)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(final Adaptable adaptable)", "modifiers": "@Override public", "return": "List<ExternalMessage>", "signature": "List<ExternalMessage> map(final Adaptable adaptable)", "full_signature": "@Override public List<ExternalMessage> map(final Adaptable adaptable)", "class_method_signature": "ImplicitThingCreationMessageMapper.map(final Adaptable adaptable)", "testcase": false, "constructor": false}], "file": "services/connectivity/mapping/src/main/java/org/eclipse/ditto/services/connectivity/mapping/ImplicitThingCreationMessageMapper.java"}, "focal_method": {"identifier": "map", "parameters": "(final ExternalMessage message)", "modifiers": "@Override public", "return": "List<Adaptable>", "body": "@Override\n    public List<Adaptable> map(final ExternalMessage message) {\n        LOGGER.withCorrelationId(message.getInternalHeaders()).debug(\"Received ExternalMessage: {}\", message);\n\n        final Map<String, String> externalHeaders = message.getHeaders();\n        final ExpressionResolver expressionResolver = getExpressionResolver(externalHeaders);\n\n        final String resolvedTemplate;\n        if (Placeholders.containsAnyPlaceholder(thingTemplate)) {\n            resolvedTemplate = applyPlaceholderReplacement(thingTemplate, expressionResolver);\n        } else {\n            resolvedTemplate = thingTemplate;\n        }\n\n        if (Placeholders.containsAnyPlaceholder(thingTemplate)) {\n            commandHeaders = resolveCommandHeaders(message, commandHeaders);\n        }\n\n        final Signal<CreateThing> createThing = getCreateThingSignal(message, resolvedTemplate);\n        final Adaptable adaptable = DITTO_PROTOCOL_ADAPTER.toAdaptable(createThing);\n\n        // we cannot set the header on CreateThing directly because it is filtered when mapped to an adaptable\n        final DittoHeaders modifiedHeaders =\n                adaptable.getDittoHeaders().toBuilder().allowPolicyLockout(allowPolicyLockout).build();\n        final Adaptable adaptableWithModifiedHeaders = adaptable.setDittoHeaders(modifiedHeaders);\n\n        LOGGER.withCorrelationId(message.getInternalHeaders())\n                .debug(\"Mapped ExternalMessage to Adaptable: {}\", adaptableWithModifiedHeaders);\n\n        return Collections.singletonList(adaptableWithModifiedHeaders);\n    }", "signature": "List<Adaptable> map(final ExternalMessage message)", "full_signature": "@Override public List<Adaptable> map(final ExternalMessage message)", "class_method_signature": "ImplicitThingCreationMessageMapper.map(final ExternalMessage message)", "testcase": false, "constructor": false, "invocations": ["debug", "withCorrelationId", "getInternalHeaders", "getHeaders", "getExpressionResolver", "containsAnyPlaceholder", "applyPlaceholderReplacement", "containsAnyPlaceholder", "resolveCommandHeaders", "getCreateThingSignal", "toAdaptable", "build", "allowPolicyLockout", "toBuilder", "getDittoHeaders", "setDittoHeaders", "debug", "withCorrelationId", "getInternalHeaders", "singletonList"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}