{"test_class": {"identifier": "UserPreferenceTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/co/smartreceipts/android/settings/catalog/UserPreferenceTest.java"}, "test_case": {"identifier": "values", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void values() {\n        final List<UserPreference<?>> userPreferences = UserPreference.values();\n\n        Assert.assertNotNull(userPreferences);\n        Assert.assertFalse(userPreferences.isEmpty());\n        Assert.assertTrue(userPreferences.contains(UserPreference.General.DefaultReportDuration));\n        Assert.assertTrue(userPreferences.contains(UserPreference.General.DefaultCurrency));\n        Assert.assertTrue(userPreferences.contains(UserPreference.General.DateSeparator));\n        Assert.assertTrue(userPreferences.contains(UserPreference.General.DateFormat));\n        Assert.assertTrue(userPreferences.contains(UserPreference.General.IncludeCostCenter));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Receipts.MinimumReceiptPrice));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Receipts.DefaultTaxPercentage));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Receipts.PredictCategories));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Receipts.EnableAutoCompleteSuggestions));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Receipts.OnlyIncludeReimbursable));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Receipts.ReceiptsDefaultAsReimbursable));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Receipts.ReceiptDateDefaultsToReportStartDate));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Receipts.MatchReceiptNameToCategory));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Receipts.MatchReceiptCommentToCategory));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Receipts.ShowReceiptID));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Receipts.IncludeTaxField));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Receipts.UsePreTaxPrice));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Receipts.DefaultToFullPage));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Receipts.UsePaymentMethods));\n        Assert.assertTrue(userPreferences.contains(UserPreference.ReportOutput.UserId));\n        Assert.assertTrue(userPreferences.contains(UserPreference.ReportOutput.PrintUserIdByPdfPhoto));\n        Assert.assertTrue(userPreferences.contains(UserPreference.ReportOutput.PrintReceiptCommentByPdfPhoto));\n        Assert.assertTrue(userPreferences.contains(UserPreference.ReportOutput.PrintReceiptsTableInLandscape));\n        Assert.assertTrue(userPreferences.contains(UserPreference.ReportOutput.DefaultPdfPageSize));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Email.ToAddresses));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Email.CcAddresses));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Email.BccAddresses));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Email.Subject));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Camera.SaveImagesInGrayScale));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Camera.AutomaticallyRotateImages));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Layout.IncludeReceiptDateInLayout));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Layout.IncludeReceiptCategoryInLayout));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Distance.DefaultDistanceRate));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Distance.PrintDistanceTableInReports));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Distance.IncludeDistancePriceInReports));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Distance.PrintDistanceAsDailyReceiptInReports));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Distance.ShowDistanceAsPriceInSubtotal));\n        Assert.assertTrue(userPreferences.contains(UserPreference.PlusSubscription.PdfFooterString));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Privacy.EnableAnalytics));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Privacy.EnableCrashTracking));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Privacy.EnableAdPersonalization));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Misc.AutoBackupOnWifiOnly));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Misc.OcrIncognitoMode));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Misc.OcrIsEnabled));\n        Assert.assertTrue(userPreferences.contains(UserPreference.Internal.ApplicationVersionCode));\n    }", "signature": "void values()", "full_signature": "@Test public void values()", "class_method_signature": "UserPreferenceTest.values()", "testcase": true, "constructor": false, "invocations": ["values", "assertNotNull", "assertFalse", "isEmpty", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "UserPreference", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static List<UserPreference<?>> CACHED_VALUES;", "modifier": "private static", "type": "List<UserPreference<?>>", "declarator": "CACHED_VALUES", "var_name": "CACHED_VALUES"}, {"original_string": "private final Class<T> type;", "modifier": "private final", "type": "Class<T>", "declarator": "type", "var_name": "type"}, {"original_string": "private final int name;", "modifier": "private final", "type": "int", "declarator": "name", "var_name": "name"}, {"original_string": "private final int defaultValue;", "modifier": "private final", "type": "int", "declarator": "defaultValue", "var_name": "defaultValue"}], "methods": [{"identifier": "UserPreference", "parameters": "(@NonNull Class<T> type, @StringRes int name, @AnyRes int defaultValue)", "modifiers": "private", "return": "", "signature": " UserPreference(@NonNull Class<T> type, @StringRes int name, @AnyRes int defaultValue)", "full_signature": "private  UserPreference(@NonNull Class<T> type, @StringRes int name, @AnyRes int defaultValue)", "class_method_signature": "UserPreference.UserPreference(@NonNull Class<T> type, @StringRes int name, @AnyRes int defaultValue)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "@NonNull public", "return": "Class<T>", "signature": "Class<T> getType()", "full_signature": "@NonNull public Class<T> getType()", "class_method_signature": "UserPreference.getType()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@StringRes public", "return": "int", "signature": "int getName()", "full_signature": "@StringRes public int getName()", "class_method_signature": "UserPreference.getName()", "testcase": false, "constructor": false}, {"identifier": "getDefaultValue", "parameters": "()", "modifiers": "@AnyRes public", "return": "int", "signature": "int getDefaultValue()", "full_signature": "@AnyRes public int getDefaultValue()", "class_method_signature": "UserPreference.getDefaultValue()", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "()", "modifiers": "@NonNull public static synchronized", "return": "List<UserPreference<?>>", "signature": "List<UserPreference<?>> values()", "full_signature": "@NonNull public static synchronized List<UserPreference<?>> values()", "class_method_signature": "UserPreference.values()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "UserPreference.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "UserPreference.hashCode()", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/settings/catalog/UserPreference.java"}, "focal_method": {"identifier": "values", "parameters": "()", "modifiers": "@NonNull public static synchronized", "return": "List<UserPreference<?>>", "body": "@NonNull\n    public static synchronized List<UserPreference<?>> values() {\n        if (CACHED_VALUES == null) {\n            CACHED_VALUES = new ArrayList<>();\n            final Class<?>[] declaredClasses = UserPreference.class.getDeclaredClasses();\n            if (declaredClasses != null) {\n                for (final Class<?> declaredClass : declaredClasses) {\n                    final Field[] fields = declaredClass.getFields();\n                    if (fields != null) {\n                        for (final Field field : fields) {\n                            if (UserPreference.class.equals(field.getType())) {\n                                try {\n                                    CACHED_VALUES.add((UserPreference<?>) field.get(declaredClass));\n                                } catch (IllegalAccessException e) {\n                                    Logger.warn(UserPreference.class, \"Failed to get field \" + field + \" due to access exception\", e);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return CACHED_VALUES;\n    }", "signature": "List<UserPreference<?>> values()", "full_signature": "@NonNull public static synchronized List<UserPreference<?>> values()", "class_method_signature": "UserPreference.values()", "testcase": false, "constructor": false, "invocations": ["getDeclaredClasses", "getFields", "equals", "getType", "add", "get", "warn"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}