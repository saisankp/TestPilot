{"test_class": {"identifier": "TopTenControllerTest", "superclass": "extends AbstractEndPointControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private TopTenController topTenController;", "modifier": "@Autowired\n    private", "type": "TopTenController", "declarator": "topTenController", "var_name": "topTenController"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/TopTenControllerTest.java"}, "test_case": {"identifier": "topTenLargestTenders", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void topTenLargestTenders() throws Exception {\n        final List<Document> topTenLargestTenders = topTenController\n                .topTenLargestTenders(new YearFilterPagingRequest());\n\n        Assert.assertEquals(3, topTenLargestTenders.size());\n\n        final Document first = topTenLargestTenders.get(0);\n        BasicDBObject tender = (BasicDBObject) first.get(\"tender\");\n        BasicDBObject value = (BasicDBObject) tender.get(\"value\");\n        double amount = (double) value.get(\"amount\");\n        Assert.assertEquals(600000.0, amount, 0);\n\n        final Document second = topTenLargestTenders.get(1);\n        tender = (BasicDBObject) second.get(\"tender\");\n        value = (BasicDBObject) tender.get(\"value\");\n        amount = (double) value.get(\"amount\");\n        Assert.assertEquals(400000.0, amount, 0);\n\n        final Document third = topTenLargestTenders.get(2);\n        tender = (BasicDBObject) third.get(\"tender\");\n        value = (BasicDBObject) tender.get(\"value\");\n        amount = (double) value.get(\"amount\");\n        Assert.assertEquals(9000.0, amount, 0);\n    }", "signature": "void topTenLargestTenders()", "full_signature": "@Test public void topTenLargestTenders()", "class_method_signature": "TopTenControllerTest.topTenLargestTenders()", "testcase": true, "constructor": false, "invocations": ["topTenLargestTenders", "assertEquals", "size", "get", "get", "get", "get", "assertEquals", "get", "get", "get", "get", "assertEquals", "get", "get", "get", "get", "assertEquals"]}, "focal_class": {"identifier": "TopTenController", "superclass": "extends GenericOCDSController", "interfaces": "", "fields": [], "methods": [{"identifier": "topTenLargestAwards", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Returns the top ten largest active awards.\" + \" The amount is taken from the award.value field. The returned data will contain\" + \"the following fields: \" + \"awards.date, awards.suppliers.name, \" + \"awards.value.amount, awards.suppliers.name, planning.budget (if any)\") @RequestMapping(value = \"/api/topTenLargestAwards\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> topTenLargestAwards(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Returns the top ten largest active awards.\" + \" The amount is taken from the award.value field. The returned data will contain\" + \"the following fields: \" + \"awards.date, awards.suppliers.name, \" + \"awards.value.amount, awards.suppliers.name, planning.budget (if any)\") @RequestMapping(value = \"/api/topTenLargestAwards\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> topTenLargestAwards(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "TopTenController.topTenLargestAwards(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "topTenLargestTenders", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Returns the top ten largest active tenders.\" + \" The amount is taken from the tender.value.amount field.\" + \" The returned data will contain\" + \"the following fields: \" + \"tender.date, tender.value.amount, tender.tenderPeriod, \" + \"tender.procuringEntity.name\") @RequestMapping(value = \"/api/topTenLargestTenders\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> topTenLargestTenders(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Returns the top ten largest active tenders.\" + \" The amount is taken from the tender.value.amount field.\" + \" The returned data will contain\" + \"the following fields: \" + \"tender.date, tender.value.amount, tender.tenderPeriod, \" + \"tender.procuringEntity.name\") @RequestMapping(value = \"/api/topTenLargestTenders\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> topTenLargestTenders(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "TopTenController.topTenLargestTenders(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "topTenLargestSuppliers", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"This endpoint should return the following data for the Top 10 suppliers (by award value).\" + \"Returns supplier id, total awarded amount of all awarded contracts, count of awarded contracts,\" + \"Ids of the procuring entities from which they have received an award, and their count. \" + \"All filters ally here, the year filter uses the awards.date field.\") @RequestMapping(value = \"/api/topTenSuppliers\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> topTenLargestSuppliers(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"This endpoint should return the following data for the Top 10 suppliers (by award value).\" + \"Returns supplier id, total awarded amount of all awarded contracts, count of awarded contracts,\" + \"Ids of the procuring entities from which they have received an award, and their count. \" + \"All filters ally here, the year filter uses the awards.date field.\") @RequestMapping(value = \"/api/topTenSuppliers\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> topTenLargestSuppliers(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "TopTenController.topTenLargestSuppliers(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/TopTenController.java"}, "focal_method": {"identifier": "topTenLargestTenders", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Returns the top ten largest active tenders.\" + \" The amount is taken from the tender.value.amount field.\" + \" The returned data will contain\" + \"the following fields: \" + \"tender.date, tender.value.amount, tender.tenderPeriod, \" + \"tender.procuringEntity.name\") @RequestMapping(value = \"/api/topTenLargestTenders\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "body": "@ApiOperation(value = \"Returns the top ten largest active tenders.\"\n            + \" The amount is taken from the tender.value.amount field.\" + \" The returned data will contain\"\n            + \"the following fields: \" + \"tender.date, tender.value.amount, tender.tenderPeriod, \"\n            + \"tender.procuringEntity.name\")\n    @RequestMapping(value = \"/api/topTenLargestTenders\", method = {RequestMethod.POST, RequestMethod.GET},\n            produces = \"application/json\")\n    public List<Document> topTenLargestTenders(@ModelAttribute @Valid final YearFilterPagingRequest filter) {\n\n        BasicDBObject project = new BasicDBObject();\n        project.put(Fields.UNDERSCORE_ID, 0);\n        project.put(MongoConstants.FieldNames.TENDER_VALUE_AMOUNT, 1);\n        project.put(\"tender.tenderPeriod\", 1);\n        project.put(\"tender.procuringEntity.name\", 1);\n\n        Aggregation agg = newAggregation(\n                match(where(MongoConstants.FieldNames.TENDER_VALUE_AMOUNT).exists(true)\n                        .andOperator(getYearDefaultFilterCriteria(\n                                filter,\n                                MongoConstants.FieldNames.TENDER_PERIOD_START_DATE\n                        ))),\n                new CustomOperation(new Document(\"$project\", project)),\n                sort(Direction.DESC, MongoConstants.FieldNames.TENDER_VALUE_AMOUNT), limit(10)\n        );\n\n        return releaseAgg(agg);\n    }", "signature": "List<Document> topTenLargestTenders(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Returns the top ten largest active tenders.\" + \" The amount is taken from the tender.value.amount field.\" + \" The returned data will contain\" + \"the following fields: \" + \"tender.date, tender.value.amount, tender.tenderPeriod, \" + \"tender.procuringEntity.name\") @RequestMapping(value = \"/api/topTenLargestTenders\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> topTenLargestTenders(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "TopTenController.topTenLargestTenders(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false, "invocations": ["put", "put", "put", "put", "newAggregation", "match", "andOperator", "exists", "where", "getYearDefaultFilterCriteria", "sort", "limit", "releaseAgg"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}