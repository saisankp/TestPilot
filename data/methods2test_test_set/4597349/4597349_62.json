{"test_class": {"identifier": "SwingImageTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Document doc = null;", "modifier": "", "type": "Document", "declarator": "doc = null", "var_name": "doc"}, {"original_string": "XulDomContainer container;", "modifier": "", "type": "XulDomContainer", "declarator": "container", "var_name": "container"}], "file": "swing/src/test/java/org/pentaho/ui/xul/swing/tags/SwingImageTest.java"}, "test_case": {"identifier": "testSetSrc", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSetSrc() throws Exception {\n    SwingImage img = (SwingImage) doc.getElementById( \"img_dimed\" );\n    assertEquals( \"testImage.png\", img.getSrc() );\n\n    Image newImg =\n        new ImageIcon( ImageHandler.class.getClassLoader().getResource( \"documents/testImage2.png\" ) )\n            .getImage();\n    img.setSrc( newImg );\n  }", "signature": "void testSetSrc()", "full_signature": "@Test public void testSetSrc()", "class_method_signature": "SwingImageTest.testSetSrc()", "testcase": true, "constructor": false, "invocations": ["getElementById", "assertEquals", "getSrc", "getImage", "getResource", "getClassLoader", "setSrc"]}, "focal_class": {"identifier": "SwingImage", "superclass": "extends SwingElement", "interfaces": "implements XulImage", "fields": [{"original_string": "private String src;", "modifier": "private", "type": "String", "declarator": "src", "var_name": "src"}, {"original_string": "private static final Log logger = LogFactory.getLog( SwingImage.class );", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog( SwingImage.class )", "var_name": "logger"}, {"original_string": "private XulDomContainer container;", "modifier": "private", "type": "XulDomContainer", "declarator": "container", "var_name": "container"}, {"original_string": "private JPanel panel;", "modifier": "private", "type": "JPanel", "declarator": "panel", "var_name": "panel"}, {"original_string": "private ImageIcon ico = null;", "modifier": "private", "type": "ImageIcon", "declarator": "ico = null", "var_name": "ico"}, {"original_string": "private Image image;", "modifier": "private", "type": "Image", "declarator": "image", "var_name": "image"}, {"original_string": "private JLabel lbl = null;", "modifier": "private", "type": "JLabel", "declarator": "lbl = null", "var_name": "lbl"}], "methods": [{"identifier": "SwingImage", "parameters": "( Element self, XulComponent parent, XulDomContainer domContainer, String tagName )", "modifiers": "public", "return": "", "signature": " SwingImage( Element self, XulComponent parent, XulDomContainer domContainer, String tagName )", "full_signature": "public  SwingImage( Element self, XulComponent parent, XulDomContainer domContainer, String tagName )", "class_method_signature": "SwingImage.SwingImage( Element self, XulComponent parent, XulDomContainer domContainer, String tagName )", "testcase": false, "constructor": true}, {"identifier": "getSrc", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSrc()", "full_signature": "public String getSrc()", "class_method_signature": "SwingImage.getSrc()", "testcase": false, "constructor": false}, {"identifier": "setSrc", "parameters": "( String src )", "modifiers": "public", "return": "void", "signature": "void setSrc( String src )", "full_signature": "public void setSrc( String src )", "class_method_signature": "SwingImage.setSrc( String src )", "testcase": false, "constructor": false}, {"identifier": "setSrc", "parameters": "( Object img )", "modifiers": "public", "return": "void", "signature": "void setSrc( Object img )", "full_signature": "public void setSrc( Object img )", "class_method_signature": "SwingImage.setSrc( Object img )", "testcase": false, "constructor": false}, {"identifier": "setVisible", "parameters": "( boolean visible )", "modifiers": "public", "return": "void", "signature": "void setVisible( boolean visible )", "full_signature": "public void setVisible( boolean visible )", "class_method_signature": "SwingImage.setVisible( boolean visible )", "testcase": false, "constructor": false}, {"identifier": "layout", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void layout()", "full_signature": "@Override public void layout()", "class_method_signature": "SwingImage.layout()", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void refresh()", "full_signature": "public void refresh()", "class_method_signature": "SwingImage.refresh()", "testcase": false, "constructor": false}], "file": "swing/src/main/java/org/pentaho/ui/xul/swing/tags/SwingImage.java"}, "focal_method": {"identifier": "setSrc", "parameters": "( String src )", "modifiers": "public", "return": "void", "body": "public void setSrc( String src ) {\n\n    // First try the relative path\n    URL url = SwingImage.class.getClassLoader().getResource( this.container.getXulLoader().getRootDir() + src );\n\n    // Then try to see if we can get the fully qualified file\n    if ( url == null ) {\n      try {\n        File f = new File( src );\n        if ( f.exists() ) {\n          url = f.toURL();\n        }\n      } catch ( MalformedURLException e ) {\n        // do nothing and let the null url get caught below.\n      }\n    }\n\n    if ( url == null ) {\n      logger.error( \"Could not find resource: \" + src );\n      return;\n    }\n    ico = new ImageIcon( url );\n    if ( ico == null ) {\n      logger.error( \"Image could not be found: \" + ico );\n    }\n    this.src = src;\n    layout();\n  }", "signature": "void setSrc( String src )", "full_signature": "public void setSrc( String src )", "class_method_signature": "SwingImage.setSrc( String src )", "testcase": false, "constructor": false, "invocations": ["getResource", "getClassLoader", "getRootDir", "getXulLoader", "exists", "toURL", "error", "error", "layout"]}, "repository": {"repo_id": 4597349, "url": "https://github.com/pentaho/pentaho-commons-xul", "language": "Java", "is_fork": false, "fork_count": 108, "stargazer_count": 5, "size": 24225, "license": "licensed"}}