{"test_class": {"identifier": "SpreadsheetImportActivityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SpreadsheetImportActivity activity;", "modifier": "private", "type": "SpreadsheetImportActivity", "declarator": "activity", "var_name": "activity"}, {"original_string": "private SpreadsheetImportActivityFactory activityFactory;", "modifier": "private", "type": "SpreadsheetImportActivityFactory", "declarator": "activityFactory", "var_name": "activityFactory"}, {"original_string": "private Edits edits;", "modifier": "private", "type": "Edits", "declarator": "edits", "var_name": "edits"}, {"original_string": "private ObjectNode configuration;", "modifier": "private", "type": "ObjectNode", "declarator": "configuration", "var_name": "configuration"}], "file": "taverna-spreadsheet-import-activity/src/test/java/org/apache/taverna/activities/spreadsheet/SpreadsheetImportActivityTest.java"}, "test_case": {"identifier": "testExecuteAsynchMapOfStringT2ReferenceAsynchronousActivityCallback", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testExecuteAsynchMapOfStringT2ReferenceAsynchronousActivityCallback() throws Exception {\n\t\tconfiguration.put(\"columnRange\", configuration.objectNode().put(\"start\", 0).put(\"end\", 3));\n\t\tactivity.configure(configuration);\n\t\tfor (ActivityInputPort activityInputPort : activityFactory.getInputPorts(configuration)) {\n\t\t\tedits.getAddActivityInputPortEdit(activity, activityInputPort).doEdit();\n\t\t}\n\t\tfor (ActivityOutputPort activityOutputPort : activityFactory.getOutputPorts(configuration)) {\n\t\t\tedits.getAddActivityOutputPortEdit(activity, activityOutputPort).doEdit();\n\t\t}\n\t\tMap<String, Class<?>> outputs = new HashMap<String, Class<?>>();\n\t\toutputs.put(\"A\", String.class);\n\t\toutputs.put(\"B\", String.class);\n\t\toutputs.put(\"C\", String.class);\n\t\toutputs.put(\"D\", String.class);\n\t\tMap<String, Object> results = ActivityInvoker.invokeAsyncActivity(activity, Collections.singletonMap(\"fileurl\",\n\t\t\t\t(Object) \"src/test/resources/test-spreadsheet.xls\"), outputs);\n\t\tassertEquals(4, results.size());\n\t\tassertTrue(results.get(\"A\") instanceof List<?>);\n\t\tassertEquals(15, ((List<?>) results.get(\"A\")).size());\n\t\tresults = ActivityInvoker.invokeAsyncActivity(activity, Collections.singletonMap(\"fileurl\",\n\t\t\t\t(Object) \"src/test/resources/test-spreadsheet.ods\"), outputs);\n\t\tassertEquals(4, results.size());\n\t\tassertTrue(results.get(\"A\") instanceof List<?>);\n\t\tassertEquals(15, ((List<?>) results.get(\"A\")).size());\n\t\tresults = ActivityInvoker.invokeAsyncActivity(activity, Collections.singletonMap(\"fileurl\",\n\t\t\t\t(Object) \"src/test/resources/test-spreadsheet.csv\"), outputs);\n\t\tassertEquals(4, results.size());\n\t\tassertTrue(results.get(\"A\") instanceof List<?>);\n\t\tassertEquals(15, ((List<?>) results.get(\"A\")).size());\n\n\t\t// CSV output\n\t\tconfiguration.put(\"outputFormat\", SpreadsheetOutputFormat.SINGLE_PORT.name());\n\t\tactivity.configure(configuration);\n\t\toutputs = new HashMap<String, Class<?>>();\n\t\toutputs.put(\"output\", String.class);\n\t\tresults = ActivityInvoker.invokeAsyncActivity(activity, Collections.singletonMap(\"fileurl\",\n\t\t\t\t(Object) \"src/test/resources/test-spreadsheet.xls\"), outputs);\n\t\tassertEquals(1, results.size());\n\t\tassertTrue(results.get(\"output\") instanceof String);\n\t\tassertEquals(15, ((String) results.get(\"output\")).split(System.getProperty(\"line.separator\")).length);\n\n\t\t// TSV output\n\t\tconfiguration.put(\"csvDelimiter\", \"\\t\");\n\t\tactivity.configure(configuration);\n\t\tresults = ActivityInvoker.invokeAsyncActivity(activity, Collections.singletonMap(\"fileurl\",\n\t\t\t\t(Object) \"src/test/resources/test-spreadsheet.csv\"), outputs);\n\t\tassertEquals(1, results.size());\n\t\tassertTrue(results.get(\"output\") instanceof String);\n\t\tassertEquals(15, ((String) results.get(\"output\")).split(System.getProperty(\"line.separator\")).length);\n\t}", "signature": "void testExecuteAsynchMapOfStringT2ReferenceAsynchronousActivityCallback()", "full_signature": "@Test public void testExecuteAsynchMapOfStringT2ReferenceAsynchronousActivityCallback()", "class_method_signature": "SpreadsheetImportActivityTest.testExecuteAsynchMapOfStringT2ReferenceAsynchronousActivityCallback()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "objectNode", "configure", "getInputPorts", "doEdit", "getAddActivityInputPortEdit", "getOutputPorts", "doEdit", "getAddActivityOutputPortEdit", "put", "put", "put", "put", "invokeAsyncActivity", "singletonMap", "assertEquals", "size", "assertTrue", "get", "assertEquals", "size", "get", "invokeAsyncActivity", "singletonMap", "assertEquals", "size", "assertTrue", "get", "assertEquals", "size", "get", "invokeAsyncActivity", "singletonMap", "assertEquals", "size", "assertTrue", "get", "assertEquals", "size", "get", "put", "name", "configure", "put", "invokeAsyncActivity", "singletonMap", "assertEquals", "size", "assertTrue", "get", "assertEquals", "split", "get", "getProperty", "put", "configure", "invokeAsyncActivity", "singletonMap", "assertEquals", "size", "assertTrue", "get", "assertEquals", "split", "get", "getProperty"]}, "focal_class": {"identifier": "SpreadsheetImportActivity", "superclass": "extends AbstractAsynchronousActivity<JsonNode>", "interfaces": "", "fields": [{"original_string": "public static final String URI = \"http://ns.taverna.org.uk/2010/activity/spreadsheet-import\";", "modifier": "public static final", "type": "String", "declarator": "URI = \"http://ns.taverna.org.uk/2010/activity/spreadsheet-import\"", "var_name": "URI"}, {"original_string": "public static final String INPUT_PORT_NAME = \"fileurl\";", "modifier": "public static final", "type": "String", "declarator": "INPUT_PORT_NAME = \"fileurl\"", "var_name": "INPUT_PORT_NAME"}, {"original_string": "public static final String OUTPUT_PORT_NAME = \"output\";", "modifier": "public static final", "type": "String", "declarator": "OUTPUT_PORT_NAME = \"output\"", "var_name": "OUTPUT_PORT_NAME"}, {"original_string": "private static Logger logger = Logger.getLogger(SpreadsheetImportActivity.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger(SpreadsheetImportActivity.class)", "var_name": "logger"}, {"original_string": "private JsonNode configurationBean;", "modifier": "private", "type": "JsonNode", "declarator": "configurationBean", "var_name": "configurationBean"}, {"original_string": "private Range rowRange, columnRange;", "modifier": "private", "type": "Range", "declarator": "rowRange", "var_name": "rowRange"}, {"original_string": "private boolean ignoreBlankRows;", "modifier": "private", "type": "boolean", "declarator": "ignoreBlankRows", "var_name": "ignoreBlankRows"}, {"original_string": "private String missingCellValue;", "modifier": "private", "type": "String", "declarator": "missingCellValue", "var_name": "missingCellValue"}, {"original_string": "private SpreadsheetEmptyCellPolicy emptyCellPolicy;", "modifier": "private", "type": "SpreadsheetEmptyCellPolicy", "declarator": "emptyCellPolicy", "var_name": "emptyCellPolicy"}, {"original_string": "private SpreadsheetOutputFormat outputFormat;", "modifier": "private", "type": "SpreadsheetOutputFormat", "declarator": "outputFormat", "var_name": "outputFormat"}, {"original_string": "private String csvDelimiter;", "modifier": "private", "type": "String", "declarator": "csvDelimiter", "var_name": "csvDelimiter"}], "methods": [{"identifier": "SpreadsheetImportActivity", "parameters": "()", "modifiers": "public", "return": "", "signature": " SpreadsheetImportActivity()", "full_signature": "public  SpreadsheetImportActivity()", "class_method_signature": "SpreadsheetImportActivity.SpreadsheetImportActivity()", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(JsonNode configurationBean)", "modifiers": "@Override public", "return": "void", "signature": "void configure(JsonNode configurationBean)", "full_signature": "@Override public void configure(JsonNode configurationBean)", "class_method_signature": "SpreadsheetImportActivity.configure(JsonNode configurationBean)", "testcase": false, "constructor": false}, {"identifier": "configurePorts", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void configurePorts()", "full_signature": "private void configurePorts()", "class_method_signature": "SpreadsheetImportActivity.configurePorts()", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "@Override public", "return": "JsonNode", "signature": "JsonNode getConfiguration()", "full_signature": "@Override public JsonNode getConfiguration()", "class_method_signature": "SpreadsheetImportActivity.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "executeAsynch", "parameters": "(final Map<String, T2Reference> data,\n\t\t\tfinal AsynchronousActivityCallback callback)", "modifiers": "@Override public", "return": "void", "signature": "void executeAsynch(final Map<String, T2Reference> data,\n\t\t\tfinal AsynchronousActivityCallback callback)", "full_signature": "@Override public void executeAsynch(final Map<String, T2Reference> data,\n\t\t\tfinal AsynchronousActivityCallback callback)", "class_method_signature": "SpreadsheetImportActivity.executeAsynch(final Map<String, T2Reference> data,\n\t\t\tfinal AsynchronousActivityCallback callback)", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "(InvocationContext context,\n\t\t\tReferenceService referenceService, T2Reference inputRef)", "modifiers": "private", "return": "InputStream", "signature": "InputStream getInputStream(InvocationContext context,\n\t\t\tReferenceService referenceService, T2Reference inputRef)", "full_signature": "private InputStream getInputStream(InvocationContext context,\n\t\t\tReferenceService referenceService, T2Reference inputRef)", "class_method_signature": "SpreadsheetImportActivity.getInputStream(InvocationContext context,\n\t\t\tReferenceService referenceService, T2Reference inputRef)", "testcase": false, "constructor": false}], "file": "taverna-spreadsheet-import-activity/src/main/java/org/apache/taverna/activities/spreadsheet/SpreadsheetImportActivity.java"}, "focal_method": {"identifier": "configure", "parameters": "(JsonNode configurationBean)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void configure(JsonNode configurationBean)\n\t\t\tthrows ActivityConfigurationException {\n\t\tthis.configurationBean = configurationBean;\n\t\trowRange = SpreadsheetUtils.getRange(configurationBean.get(\"rowRange\"));\n\t\tlogger.debug(\"Setting row range to \" + rowRange);\n\t\tcolumnRange = SpreadsheetUtils.getRange(configurationBean.get(\"columnRange\"));\n\t\tlogger.debug(\"Setting column range to \" + columnRange);\n\t\tignoreBlankRows = configurationBean.get(\"ignoreBlankRows\").booleanValue();\n\t\tmissingCellValue = configurationBean.get(\"emptyCellValue\").textValue();\n\t\tlogger.debug(\"Setting empty cell value to '\" + missingCellValue + \"'\");\n\t\temptyCellPolicy = SpreadsheetEmptyCellPolicy.valueOf(configurationBean.get(\"emptyCellPolicy\").textValue());\n\t\tlogger.debug(\"Setting empty cell policy to \" + emptyCellPolicy);\n\t\toutputFormat = SpreadsheetOutputFormat.valueOf(configurationBean.get(\"outputFormat\").textValue());\n\t\tlogger.debug(\"Setting output format to \" + outputFormat);\n\t\tcsvDelimiter = configurationBean.get(\"csvDelimiter\").textValue();\n\t\tlogger.debug(\"Setting csv delimiter to '\" + csvDelimiter + \"'\");\n//\t\tconfigurePorts();\n\t}", "signature": "void configure(JsonNode configurationBean)", "full_signature": "@Override public void configure(JsonNode configurationBean)", "class_method_signature": "SpreadsheetImportActivity.configure(JsonNode configurationBean)", "testcase": false, "constructor": false, "invocations": ["getRange", "get", "debug", "getRange", "get", "debug", "booleanValue", "get", "textValue", "get", "debug", "valueOf", "textValue", "get", "debug", "valueOf", "textValue", "get", "debug", "textValue", "get", "debug"]}, "repository": {"repo_id": 30956938, "url": "https://github.com/apache/incubator-taverna-common-activities", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 5696, "license": "licensed"}}