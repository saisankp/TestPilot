{"test_class": {"identifier": "StatementUpdateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final static ItemIdValue Q1 = Datamodel.makeWikidataItemIdValue(\"Q1\");", "modifier": "final static", "type": "ItemIdValue", "declarator": "Q1 = Datamodel.makeWikidataItemIdValue(\"Q1\")", "var_name": "Q1"}, {"original_string": "final static ItemIdValue Q2 = Datamodel.makeWikidataItemIdValue(\"Q2\");", "modifier": "final static", "type": "ItemIdValue", "declarator": "Q2 = Datamodel.makeWikidataItemIdValue(\"Q2\")", "var_name": "Q2"}, {"original_string": "final static ItemIdValue Q3 = Datamodel.makeWikidataItemIdValue(\"Q3\");", "modifier": "final static", "type": "ItemIdValue", "declarator": "Q3 = Datamodel.makeWikidataItemIdValue(\"Q3\")", "var_name": "Q3"}, {"original_string": "final static PropertyIdValue P1 = Datamodel\n\t\t\t.makeWikidataPropertyIdValue(\"P1\");", "modifier": "final static", "type": "PropertyIdValue", "declarator": "P1 = Datamodel\n\t\t\t.makeWikidataPropertyIdValue(\"P1\")", "var_name": "P1"}, {"original_string": "final static PropertyIdValue P2 = Datamodel\n\t\t\t.makeWikidataPropertyIdValue(\"P2\");", "modifier": "final static", "type": "PropertyIdValue", "declarator": "P2 = Datamodel\n\t\t\t.makeWikidataPropertyIdValue(\"P2\")", "var_name": "P2"}, {"original_string": "final static PropertyIdValue P3 = Datamodel\n\t\t\t.makeWikidataPropertyIdValue(\"P3\");", "modifier": "final static", "type": "PropertyIdValue", "declarator": "P3 = Datamodel\n\t\t\t.makeWikidataPropertyIdValue(\"P3\")", "var_name": "P3"}], "file": "wdtk-wikibaseapi/src/test/java/org/wikidata/wdtk/wikibaseapi/StatementUpdateTest.java"}, "test_case": {"identifier": "testMergeReferences", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMergeReferences() {\n\t\tReference r1 = ReferenceBuilder.newInstance().withPropertyValue(P1, Q1)\n\t\t\t\t.withPropertyValue(P2, Q2).build();\n\t\tReference r2 = ReferenceBuilder.newInstance().withPropertyValue(P1, Q1)\n\t\t\t\t.build();\n\t\tReference r3 = ReferenceBuilder.newInstance().withPropertyValue(P2, Q2)\n\t\t\t\t.build();\n\t\tReference r4 = ReferenceBuilder.newInstance().withPropertyValue(P2, Q2)\n\t\t\t\t.withPropertyValue(P1, Q1).build();\n\n\t\tStatement s1 = StatementBuilder.forSubjectAndProperty(Q1, P1)\n\t\t\t\t.withValue(Q1).withReference(r1).withReference(r2)\n\t\t\t\t.withId(\"ID-s1\").build();\n\t\tStatement s2 = StatementBuilder.forSubjectAndProperty(Q1, P1)\n\t\t\t\t.withValue(Q1).withReference(r3).withReference(r4).build();\n\n\t\tItemDocument currentDocument = ItemDocumentBuilder.forItemId(Q1)\n\t\t\t\t.withStatement(s1).build();\n\n\t\tStatementUpdate su = new StatementUpdate(currentDocument,\n\t\t\t\tCollections.singletonList(s2), Collections.emptyList());\n\n\t\tStatement s1merged = StatementBuilder.forSubjectAndProperty(Q1, P1)\n\t\t\t\t.withValue(Q1).withReference(r1).withReference(r2)\n\t\t\t\t.withReference(r3).withId(\"ID-s1\").build();\n\n\t\tassertEquals(0, su.toDelete.size());\n\t\tassertEquals(1, su.toKeep.size());\n\t\tassertTrue(su.toKeep.containsKey(P1));\n\t\tassertEquals(1, su.toKeep.get(P1).size());\n\t\tassertEquals(s1merged, su.toKeep.get(P1).get(0).statement);\n\t\tassertTrue(su.toKeep.get(P1).get(0).write);\n\t}", "signature": "void testMergeReferences()", "full_signature": "@Test public void testMergeReferences()", "class_method_signature": "StatementUpdateTest.testMergeReferences()", "testcase": true, "constructor": false, "invocations": ["build", "withPropertyValue", "withPropertyValue", "newInstance", "build", "withPropertyValue", "newInstance", "build", "withPropertyValue", "newInstance", "build", "withPropertyValue", "withPropertyValue", "newInstance", "build", "withId", "withReference", "withReference", "withValue", "forSubjectAndProperty", "build", "withReference", "withReference", "withValue", "forSubjectAndProperty", "build", "withStatement", "forItemId", "singletonList", "emptyList", "build", "withId", "withReference", "withReference", "withReference", "withValue", "forSubjectAndProperty", "assertEquals", "size", "assertEquals", "size", "assertTrue", "containsKey", "assertEquals", "size", "get", "assertEquals", "get", "get", "assertTrue", "get", "get"]}, "focal_class": {"identifier": "StatementUpdate", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Logger logger = LoggerFactory.getLogger(StatementUpdate.class);", "modifier": "static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(StatementUpdate.class)", "var_name": "logger"}, {"original_string": "private GuidGenerator guidGenerator = new RandomGuidGenerator();", "modifier": "private", "type": "GuidGenerator", "declarator": "guidGenerator = new RandomGuidGenerator()", "var_name": "guidGenerator"}, {"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "@JsonIgnore\n\tfinal HashMap<PropertyIdValue, List<StatementWithUpdate>> toKeep;", "modifier": "@JsonIgnore\n\tfinal", "type": "HashMap<PropertyIdValue, List<StatementWithUpdate>>", "declarator": "toKeep", "var_name": "toKeep"}, {"original_string": "@JsonIgnore\n\tfinal List<String> toDelete;", "modifier": "@JsonIgnore\n\tfinal", "type": "List<String>", "declarator": "toDelete", "var_name": "toDelete"}, {"original_string": "@JsonIgnore\n\tStatementDocument currentDocument;", "modifier": "@JsonIgnore", "type": "StatementDocument", "declarator": "currentDocument", "var_name": "currentDocument"}], "methods": [{"identifier": "StatementUpdate", "parameters": "(StatementDocument currentDocument,\n\t\t\tList<Statement> addStatements, List<Statement> deleteStatements)", "modifiers": "public", "return": "", "signature": " StatementUpdate(StatementDocument currentDocument,\n\t\t\tList<Statement> addStatements, List<Statement> deleteStatements)", "full_signature": "public  StatementUpdate(StatementDocument currentDocument,\n\t\t\tList<Statement> addStatements, List<Statement> deleteStatements)", "class_method_signature": "StatementUpdate.StatementUpdate(StatementDocument currentDocument,\n\t\t\tList<Statement> addStatements, List<Statement> deleteStatements)", "testcase": false, "constructor": true}, {"identifier": "getJsonUpdateString", "parameters": "()", "modifiers": "@JsonIgnore public", "return": "String", "signature": "String getJsonUpdateString()", "full_signature": "@JsonIgnore public String getJsonUpdateString()", "class_method_signature": "StatementUpdate.getJsonUpdateString()", "testcase": false, "constructor": false}, {"identifier": "performEdit", "parameters": "(WbEditingAction action, boolean editAsBot, String summary, List<String> tags)", "modifiers": "public", "return": "StatementDocument", "signature": "StatementDocument performEdit(WbEditingAction action, boolean editAsBot, String summary, List<String> tags)", "full_signature": "public StatementDocument performEdit(WbEditingAction action, boolean editAsBot, String summary, List<String> tags)", "class_method_signature": "StatementUpdate.performEdit(WbEditingAction action, boolean editAsBot, String summary, List<String> tags)", "testcase": false, "constructor": false}, {"identifier": "getUpdatedStatements", "parameters": "()", "modifiers": "@JsonProperty(\"claims\") @JsonInclude(Include.NON_EMPTY) public", "return": "List<Statement>", "signature": "List<Statement> getUpdatedStatements()", "full_signature": "@JsonProperty(\"claims\") @JsonInclude(Include.NON_EMPTY) public List<Statement> getUpdatedStatements()", "class_method_signature": "StatementUpdate.getUpdatedStatements()", "testcase": false, "constructor": false}, {"identifier": "isEmptyEdit", "parameters": "()", "modifiers": "@JsonIgnore public", "return": "boolean", "signature": "boolean isEmptyEdit()", "full_signature": "@JsonIgnore public boolean isEmptyEdit()", "class_method_signature": "StatementUpdate.isEmptyEdit()", "testcase": false, "constructor": false}, {"identifier": "markStatementsForUpdate", "parameters": "(StatementDocument currentDocument,\n\t\t\tList<Statement> addStatements, List<Statement> deleteStatements)", "modifiers": "protected", "return": "void", "signature": "void markStatementsForUpdate(StatementDocument currentDocument,\n\t\t\tList<Statement> addStatements, List<Statement> deleteStatements)", "full_signature": "protected void markStatementsForUpdate(StatementDocument currentDocument,\n\t\t\tList<Statement> addStatements, List<Statement> deleteStatements)", "class_method_signature": "StatementUpdate.markStatementsForUpdate(StatementDocument currentDocument,\n\t\t\tList<Statement> addStatements, List<Statement> deleteStatements)", "testcase": false, "constructor": false}, {"identifier": "markStatementsForDeletion", "parameters": "(StatementDocument currentDocument,\n\t\t\tList<Statement> deleteStatements)", "modifiers": "protected", "return": "void", "signature": "void markStatementsForDeletion(StatementDocument currentDocument,\n\t\t\tList<Statement> deleteStatements)", "full_signature": "protected void markStatementsForDeletion(StatementDocument currentDocument,\n\t\t\tList<Statement> deleteStatements)", "class_method_signature": "StatementUpdate.markStatementsForDeletion(StatementDocument currentDocument,\n\t\t\tList<Statement> deleteStatements)", "testcase": false, "constructor": false}, {"identifier": "markStatementsForInsertion", "parameters": "(\n\t\t\tStatementDocument currentDocument, List<Statement> addStatements)", "modifiers": "protected", "return": "void", "signature": "void markStatementsForInsertion(\n\t\t\tStatementDocument currentDocument, List<Statement> addStatements)", "full_signature": "protected void markStatementsForInsertion(\n\t\t\tStatementDocument currentDocument, List<Statement> addStatements)", "class_method_signature": "StatementUpdate.markStatementsForInsertion(\n\t\t\tStatementDocument currentDocument, List<Statement> addStatements)", "testcase": false, "constructor": false}, {"identifier": "addStatement", "parameters": "(Statement statement, boolean isNew)", "modifiers": "protected", "return": "void", "signature": "void addStatement(Statement statement, boolean isNew)", "full_signature": "protected void addStatement(Statement statement, boolean isNew)", "class_method_signature": "StatementUpdate.addStatement(Statement statement, boolean isNew)", "testcase": false, "constructor": false}, {"identifier": "mergeStatements", "parameters": "(Statement statement1, Statement statement2)", "modifiers": "private", "return": "Statement", "signature": "Statement mergeStatements(Statement statement1, Statement statement2)", "full_signature": "private Statement mergeStatements(Statement statement1, Statement statement2)", "class_method_signature": "StatementUpdate.mergeStatements(Statement statement1, Statement statement2)", "testcase": false, "constructor": false}, {"identifier": "mergeReferences", "parameters": "(\n\t\t\tList<? extends Reference> references1,\n\t\t\tList<? extends Reference> references2)", "modifiers": "protected", "return": "List<Reference>", "signature": "List<Reference> mergeReferences(\n\t\t\tList<? extends Reference> references1,\n\t\t\tList<? extends Reference> references2)", "full_signature": "protected List<Reference> mergeReferences(\n\t\t\tList<? extends Reference> references1,\n\t\t\tList<? extends Reference> references2)", "class_method_signature": "StatementUpdate.mergeReferences(\n\t\t\tList<? extends Reference> references1,\n\t\t\tList<? extends Reference> references2)", "testcase": false, "constructor": false}, {"identifier": "addBestReferenceToList", "parameters": "(Reference reference,\n\t\t\tList<Reference> referenceList)", "modifiers": "protected", "return": "void", "signature": "void addBestReferenceToList(Reference reference,\n\t\t\tList<Reference> referenceList)", "full_signature": "protected void addBestReferenceToList(Reference reference,\n\t\t\tList<Reference> referenceList)", "class_method_signature": "StatementUpdate.addBestReferenceToList(Reference reference,\n\t\t\tList<Reference> referenceList)", "testcase": false, "constructor": false}, {"identifier": "equivalentClaims", "parameters": "(Claim claim1, Claim claim2)", "modifiers": "protected", "return": "boolean", "signature": "boolean equivalentClaims(Claim claim1, Claim claim2)", "full_signature": "protected boolean equivalentClaims(Claim claim1, Claim claim2)", "class_method_signature": "StatementUpdate.equivalentClaims(Claim claim1, Claim claim2)", "testcase": false, "constructor": false}, {"identifier": "isSameSnakSet", "parameters": "(Iterator<Snak> snaks1, Iterator<Snak> snaks2)", "modifiers": "protected", "return": "boolean", "signature": "boolean isSameSnakSet(Iterator<Snak> snaks1, Iterator<Snak> snaks2)", "full_signature": "protected boolean isSameSnakSet(Iterator<Snak> snaks1, Iterator<Snak> snaks2)", "class_method_signature": "StatementUpdate.isSameSnakSet(Iterator<Snak> snaks1, Iterator<Snak> snaks2)", "testcase": false, "constructor": false}, {"identifier": "setGuidGenerator", "parameters": "(GuidGenerator generator)", "modifiers": "public", "return": "void", "signature": "void setGuidGenerator(GuidGenerator generator)", "full_signature": "public void setGuidGenerator(GuidGenerator generator)", "class_method_signature": "StatementUpdate.setGuidGenerator(GuidGenerator generator)", "testcase": false, "constructor": false}, {"identifier": "getRevisionIdFromResponse", "parameters": "(JsonNode response)", "modifiers": "protected", "return": "long", "signature": "long getRevisionIdFromResponse(JsonNode response)", "full_signature": "protected long getRevisionIdFromResponse(JsonNode response)", "class_method_signature": "StatementUpdate.getRevisionIdFromResponse(JsonNode response)", "testcase": false, "constructor": false}, {"identifier": "getDatamodelObjectFromResponse", "parameters": "(JsonNode response, List<String> path, Class<T> targetClass)", "modifiers": "protected", "return": "T", "signature": "T getDatamodelObjectFromResponse(JsonNode response, List<String> path, Class<T> targetClass)", "full_signature": "protected T getDatamodelObjectFromResponse(JsonNode response, List<String> path, Class<T> targetClass)", "class_method_signature": "StatementUpdate.getDatamodelObjectFromResponse(JsonNode response, List<String> path, Class<T> targetClass)", "testcase": false, "constructor": false}], "file": "wdtk-wikibaseapi/src/main/java/org/wikidata/wdtk/wikibaseapi/StatementUpdate.java"}, "focal_method": {"identifier": "mergeReferences", "parameters": "(\n\t\t\tList<? extends Reference> references1,\n\t\t\tList<? extends Reference> references2)", "modifiers": "protected", "return": "List<Reference>", "body": "protected List<Reference> mergeReferences(\n\t\t\tList<? extends Reference> references1,\n\t\t\tList<? extends Reference> references2) {\n\t\tList<Reference> result = new ArrayList<>();\n\t\tfor (Reference reference : references1) {\n\t\t\taddBestReferenceToList(reference, result);\n\t\t}\n\t\tfor (Reference reference : references2) {\n\t\t\taddBestReferenceToList(reference, result);\n\t\t}\n\t\treturn result;\n\t}", "signature": "List<Reference> mergeReferences(\n\t\t\tList<? extends Reference> references1,\n\t\t\tList<? extends Reference> references2)", "full_signature": "protected List<Reference> mergeReferences(\n\t\t\tList<? extends Reference> references1,\n\t\t\tList<? extends Reference> references2)", "class_method_signature": "StatementUpdate.mergeReferences(\n\t\t\tList<? extends Reference> references1,\n\t\t\tList<? extends Reference> references2)", "testcase": false, "constructor": false, "invocations": ["addBestReferenceToList", "addBestReferenceToList"]}, "repository": {"repo_id": 16144428, "url": "https://github.com/Wikidata/Wikidata-Toolkit", "language": "Java", "is_fork": false, "fork_count": 80, "stargazer_count": 264, "size": 11241, "license": "licensed"}}