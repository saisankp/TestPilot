{"test_class": {"identifier": "SPIDIntegrationUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n      private SPIDIntegrationUtil spidIntegrationUtil;", "modifier": "@Autowired\n      private", "type": "SPIDIntegrationUtil", "declarator": "spidIntegrationUtil", "var_name": "spidIntegrationUtil"}], "file": "spid-spring-integration/src/test/java/it/italia/developers/spid/integration/util/SPIDIntegrationUtilTest.java"}, "test_case": {"identifier": "xmlStringToXMLObjectTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n      public void xmlStringToXMLObjectTest() {\n\n            ClassLoader classLoader = getClass().getClassLoader();\n            File xmlFile = new File(classLoader.getResource(\"metadata/idp/telecom-metadata.xml\").getFile());\n            try (Scanner scanner = new Scanner(xmlFile)) {\n                  String xmlData = scanner.useDelimiter(\"\\\\Z\").next();\n                  Element node = spidIntegrationUtil.xmlStringToElement(xmlData);\n\n                  Assert.assertEquals(\"md:EntityDescriptor\", node.getNodeName());\n\n            } catch (SAXException | IOException | ParserConfigurationException e) {\n                  e.printStackTrace();\n                  Assert.fail();\n            }\n      }", "signature": "void xmlStringToXMLObjectTest()", "full_signature": "@Test public void xmlStringToXMLObjectTest()", "class_method_signature": "SPIDIntegrationUtilTest.xmlStringToXMLObjectTest()", "testcase": true, "constructor": false, "invocations": ["getClassLoader", "getClass", "getFile", "getResource", "next", "useDelimiter", "xmlStringToElement", "assertEquals", "getNodeName", "printStackTrace", "fail"]}, "focal_class": {"identifier": "SPIDIntegrationUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(SPIDIntegrationUtil.class.getName());", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SPIDIntegrationUtil.class.getName())", "var_name": "log"}, {"original_string": "@Value(\"${spid.spring.integration.keystore.certificate.alias}\")\n\tprivate String certificateAliasName;", "modifier": "@Value(\"${spid.spring.integration.keystore.certificate.alias}\")\n\tprivate", "type": "String", "declarator": "certificateAliasName", "var_name": "certificateAliasName"}, {"original_string": "@Value(\"${spid.spring.integration.keystore.path}\")\n\tprivate String keystorePath;", "modifier": "@Value(\"${spid.spring.integration.keystore.path}\")\n\tprivate", "type": "String", "declarator": "keystorePath", "var_name": "keystorePath"}, {"original_string": "@Value(\"${spid.spring.integration.keystore.password}\")\n\tprivate String keystorePassword;", "modifier": "@Value(\"${spid.spring.integration.keystore.password}\")\n\tprivate", "type": "String", "declarator": "keystorePassword", "var_name": "keystorePassword"}], "methods": [{"identifier": "SPIDIntegrationUtil", "parameters": "()", "modifiers": "public", "return": "", "signature": " SPIDIntegrationUtil()", "full_signature": "public  SPIDIntegrationUtil()", "class_method_signature": "SPIDIntegrationUtil.SPIDIntegrationUtil()", "testcase": false, "constructor": true}, {"identifier": "encodeAndPrintAuthnRequest", "parameters": "(AuthnRequest authnRequest)", "modifiers": "public", "return": "String", "signature": "String encodeAndPrintAuthnRequest(AuthnRequest authnRequest)", "full_signature": "public String encodeAndPrintAuthnRequest(AuthnRequest authnRequest)", "class_method_signature": "SPIDIntegrationUtil.encodeAndPrintAuthnRequest(AuthnRequest authnRequest)", "testcase": false, "constructor": false}, {"identifier": "printAuthnRequest", "parameters": "(AuthnRequest authnRequest)", "modifiers": "public", "return": "String", "signature": "String printAuthnRequest(AuthnRequest authnRequest)", "full_signature": "public String printAuthnRequest(AuthnRequest authnRequest)", "class_method_signature": "SPIDIntegrationUtil.printAuthnRequest(AuthnRequest authnRequest)", "testcase": false, "constructor": false}, {"identifier": "xmlStringToElement", "parameters": "(String xmlData)", "modifiers": "public", "return": "Element", "signature": "Element xmlStringToElement(String xmlData)", "full_signature": "public Element xmlStringToElement(String xmlData)", "class_method_signature": "SPIDIntegrationUtil.xmlStringToElement(String xmlData)", "testcase": false, "constructor": false}, {"identifier": "getCredential", "parameters": "()", "modifiers": "public", "return": "Credential", "signature": "Credential getCredential()", "full_signature": "public Credential getCredential()", "class_method_signature": "SPIDIntegrationUtil.getCredential()", "testcase": false, "constructor": false}, {"identifier": "getKeyStore", "parameters": "()", "modifiers": "public", "return": "KeyStore", "signature": "KeyStore getKeyStore()", "full_signature": "public KeyStore getKeyStore()", "class_method_signature": "SPIDIntegrationUtil.getKeyStore()", "testcase": false, "constructor": false}, {"identifier": "getSignature", "parameters": "()", "modifiers": "public", "return": "Signature", "signature": "Signature getSignature()", "full_signature": "public Signature getSignature()", "class_method_signature": "SPIDIntegrationUtil.getSignature()", "testcase": false, "constructor": false}], "file": "spid-spring-integration/src/main/java/it/italia/developers/spid/integration/util/SPIDIntegrationUtil.java"}, "focal_method": {"identifier": "xmlStringToElement", "parameters": "(String xmlData)", "modifiers": "public", "return": "Element", "body": "public Element xmlStringToElement(String xmlData) throws SAXException, IOException, ParserConfigurationException {\n\t\tInputStream xmlByteArrayInputStream = new ByteArrayInputStream(xmlData.getBytes());\n\t\tElement node = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(xmlByteArrayInputStream).getDocumentElement();\n\n\t\treturn node;\n\t}", "signature": "Element xmlStringToElement(String xmlData)", "full_signature": "public Element xmlStringToElement(String xmlData)", "class_method_signature": "SPIDIntegrationUtil.xmlStringToElement(String xmlData)", "testcase": false, "constructor": false, "invocations": ["getBytes", "getDocumentElement", "parse", "newDocumentBuilder", "newInstance"]}, "repository": {"repo_id": 106042361, "url": "https://github.com/italia/spid-spring", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 9, "size": 129, "license": "licensed"}}