{"test_class": {"identifier": "BarrierTrackerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int PAGE_SIZE = 512;", "modifier": "private static final", "type": "int", "declarator": "PAGE_SIZE = 512", "var_name": "PAGE_SIZE"}], "file": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/BarrierTrackerTest.java"}, "test_case": {"identifier": "testMultiChannelNoBarriers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMultiChannelNoBarriers() {\n\t\ttry {\n\t\t\tBufferOrEvent[] sequence = { createBuffer(2), createBuffer(2), createBuffer(0),\n\t\t\t\t\tcreateBuffer(1), createBuffer(0), createBuffer(3),\n\t\t\t\t\tcreateBuffer(1), createBuffer(1), createBuffer(2)\n\t\t\t};\n\n\t\t\tMockInputGate gate = new MockInputGate(PAGE_SIZE, 4, Arrays.asList(sequence));\n\t\t\tBarrierTracker tracker = new BarrierTracker(gate);\n\n\t\t\tfor (BufferOrEvent boe : sequence) {\n\t\t\t\tassertEquals(boe, tracker.getNextNonBlocked());\n\t\t\t}\n\n\t\t\tassertNull(tracker.getNextNonBlocked());\n\t\t\tassertNull(tracker.getNextNonBlocked());\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "signature": "void testMultiChannelNoBarriers()", "full_signature": "@Test public void testMultiChannelNoBarriers()", "class_method_signature": "BarrierTrackerTest.testMultiChannelNoBarriers()", "testcase": true, "constructor": false, "invocations": ["createBuffer", "createBuffer", "createBuffer", "createBuffer", "createBuffer", "createBuffer", "createBuffer", "createBuffer", "createBuffer", "asList", "assertEquals", "getNextNonBlocked", "assertNull", "getNextNonBlocked", "assertNull", "getNextNonBlocked", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "BarrierTracker", "superclass": "", "interfaces": "implements CheckpointBarrierHandler", "fields": [{"original_string": "private static final int MAX_CHECKPOINTS_TO_TRACK = 50;", "modifier": "private static final", "type": "int", "declarator": "MAX_CHECKPOINTS_TO_TRACK = 50", "var_name": "MAX_CHECKPOINTS_TO_TRACK"}, {"original_string": "private final InputGate inputGate;", "modifier": "private final", "type": "InputGate", "declarator": "inputGate", "var_name": "inputGate"}, {"original_string": "private final int totalNumberOfInputChannels;", "modifier": "private final", "type": "int", "declarator": "totalNumberOfInputChannels", "var_name": "totalNumberOfInputChannels"}, {"original_string": "private final ArrayDeque<CheckpointBarrierCount> pendingCheckpoints;", "modifier": "private final", "type": "ArrayDeque<CheckpointBarrierCount>", "declarator": "pendingCheckpoints", "var_name": "pendingCheckpoints"}, {"original_string": "private EventListener<CheckpointBarrier> checkpointHandler;", "modifier": "private", "type": "EventListener<CheckpointBarrier>", "declarator": "checkpointHandler", "var_name": "checkpointHandler"}, {"original_string": "private long latestPendingCheckpointID = -1;", "modifier": "private", "type": "long", "declarator": "latestPendingCheckpointID = -1", "var_name": "latestPendingCheckpointID"}], "methods": [{"identifier": "BarrierTracker", "parameters": "(InputGate inputGate)", "modifiers": "public", "return": "", "signature": " BarrierTracker(InputGate inputGate)", "full_signature": "public  BarrierTracker(InputGate inputGate)", "class_method_signature": "BarrierTracker.BarrierTracker(InputGate inputGate)", "testcase": false, "constructor": true}, {"identifier": "getNextNonBlocked", "parameters": "()", "modifiers": "@Override public", "return": "BufferOrEvent", "signature": "BufferOrEvent getNextNonBlocked()", "full_signature": "@Override public BufferOrEvent getNextNonBlocked()", "class_method_signature": "BarrierTracker.getNextNonBlocked()", "testcase": false, "constructor": false}, {"identifier": "registerCheckpointEventHandler", "parameters": "(EventListener<CheckpointBarrier> checkpointHandler)", "modifiers": "@Override public", "return": "void", "signature": "void registerCheckpointEventHandler(EventListener<CheckpointBarrier> checkpointHandler)", "full_signature": "@Override public void registerCheckpointEventHandler(EventListener<CheckpointBarrier> checkpointHandler)", "class_method_signature": "BarrierTracker.registerCheckpointEventHandler(EventListener<CheckpointBarrier> checkpointHandler)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cleanup()", "full_signature": "@Override public void cleanup()", "class_method_signature": "BarrierTracker.cleanup()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "BarrierTracker.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "processBarrier", "parameters": "(CheckpointBarrier receivedBarrier)", "modifiers": "private", "return": "void", "signature": "void processBarrier(CheckpointBarrier receivedBarrier)", "full_signature": "private void processBarrier(CheckpointBarrier receivedBarrier)", "class_method_signature": "BarrierTracker.processBarrier(CheckpointBarrier receivedBarrier)", "testcase": false, "constructor": false}], "file": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/BarrierTracker.java"}, "focal_method": {"identifier": "getNextNonBlocked", "parameters": "()", "modifiers": "@Override public", "return": "BufferOrEvent", "body": "@Override\n\tpublic BufferOrEvent getNextNonBlocked() throws IOException, InterruptedException {\n\t\twhile (true) {\n\t\t\tBufferOrEvent next = inputGate.getNextBufferOrEvent();\n\t\t\tif (next == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\telse if (next.isBuffer() || next.getEvent().getClass() != CheckpointBarrier.class) {\n\t\t\t\treturn next;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprocessBarrier((CheckpointBarrier) next.getEvent());\n\t\t\t}\n\t\t}\n\t}", "signature": "BufferOrEvent getNextNonBlocked()", "full_signature": "@Override public BufferOrEvent getNextNonBlocked()", "class_method_signature": "BarrierTracker.getNextNonBlocked()", "testcase": false, "constructor": false, "invocations": ["getNextBufferOrEvent", "isBuffer", "getClass", "getEvent", "processBarrier", "getEvent"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}