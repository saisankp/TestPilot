{"test_class": {"identifier": "CSVDataFrameWriterTest", "superclass": "", "interfaces": "", "fields": [], "file": "lib/src/test/java/edu/stanford/futuredata/macrobase/ingest/CSVDataFrameWriterTest.java"}, "test_case": {"identifier": "writeToStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void writeToStream() throws Exception {\n        StringWriter sb = new StringWriter();\n        DataFrame df = new DataFrame();\n        String[] col1 = {\"a\", \"b\"};\n        double[] col2 = {1.0, 2.0};\n        df.addColumn(\"col1\", col1);\n        df.addColumn(\"col2\", col2);\n\n        CSVDataFrameWriter writer = new CSVDataFrameWriter();\n        writer.writeToStream(df, sb);\n        String out = sb.toString();\n        assertEquals(3, out.split(\"\\n\").length);\n        assertTrue(out.contains(\"b\"));\n    }", "signature": "void writeToStream()", "full_signature": "@Test public void writeToStream()", "class_method_signature": "CSVDataFrameWriterTest.writeToStream()", "testcase": true, "constructor": false, "invocations": ["addColumn", "addColumn", "writeToStream", "toString", "assertEquals", "split", "assertTrue", "contains"]}, "focal_class": {"identifier": "CSVDataFrameWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CsvFormat format;", "modifier": "private final", "type": "CsvFormat", "declarator": "format", "var_name": "format"}], "methods": [{"identifier": "CSVDataFrameWriter", "parameters": "()", "modifiers": "public", "return": "", "signature": " CSVDataFrameWriter()", "full_signature": "public  CSVDataFrameWriter()", "class_method_signature": "CSVDataFrameWriter.CSVDataFrameWriter()", "testcase": false, "constructor": true}, {"identifier": "CSVDataFrameWriter", "parameters": "(String fieldDelimiter, String lineDelimiter)", "modifiers": "public", "return": "", "signature": " CSVDataFrameWriter(String fieldDelimiter, String lineDelimiter)", "full_signature": "public  CSVDataFrameWriter(String fieldDelimiter, String lineDelimiter)", "class_method_signature": "CSVDataFrameWriter.CSVDataFrameWriter(String fieldDelimiter, String lineDelimiter)", "testcase": false, "constructor": true}, {"identifier": "writeToStream", "parameters": "(DataFrame df, Writer out)", "modifiers": "public", "return": "void", "signature": "void writeToStream(DataFrame df, Writer out)", "full_signature": "public void writeToStream(DataFrame df, Writer out)", "class_method_signature": "CSVDataFrameWriter.writeToStream(DataFrame df, Writer out)", "testcase": false, "constructor": false}], "file": "lib/src/main/java/edu/stanford/futuredata/macrobase/ingest/CSVDataFrameWriter.java"}, "focal_method": {"identifier": "writeToStream", "parameters": "(DataFrame df, Writer out)", "modifiers": "public", "return": "void", "body": "public void writeToStream(DataFrame df, Writer out) throws IOException {\n        String[] columnNames = df.getSchema().getColumnNames().toArray(new String[0]);\n        final CsvWriterSettings settings = new CsvWriterSettings();\n        settings.setFormat(format);\n        CsvWriter writer = new CsvWriter(out, settings);\n        writer.writeHeaders(columnNames);\n\n        for (Row curRow : df.getRowIterator()) {\n            List<Object> rowValues = curRow.getVals();\n            writer.writeRow(rowValues);\n        }\n        writer.close();\n    }", "signature": "void writeToStream(DataFrame df, Writer out)", "full_signature": "public void writeToStream(DataFrame df, Writer out)", "class_method_signature": "CSVDataFrameWriter.writeToStream(DataFrame df, Writer out)", "testcase": false, "constructor": false, "invocations": ["toArray", "getColumnNames", "getSchema", "setFormat", "writeHeaders", "getRowIterator", "getVals", "writeRow", "close"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}