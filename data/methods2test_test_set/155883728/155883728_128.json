{"test_class": {"identifier": "WebsterPlanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final File testOutDir = new File(\"target/test-out/WebsterPlanTest\");", "modifier": "final", "type": "File", "declarator": "testOutDir = new File(\"target/test-out/WebsterPlanTest\")", "var_name": "testOutDir"}], "file": "webster/src/test/java/net/adamcin/oakpal/webster/WebsterPlanTest.java"}, "test_case": {"identifier": "testCreateArchive_noJcrRoot", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testCreateArchive_noJcrRoot() throws Exception {\n        final File testBase = new File(testOutDir, \"testCreateArchive_noJcrRoot\");\n        final File archiveSrc = new File(\"src/test/resources/filevault/noJcrRoot\");\n        final File archiveRoot = new File(testBase, \"noJcrRoot\");\n        FileUtils.deleteDirectory(archiveRoot);\n        FileUtils.copyDirectory(archiveSrc, archiveRoot);\n        WebsterPlan.Builder builder = new WebsterPlan.Builder();\n        builder.withArchiveRoot(archiveRoot);\n        assertTrue(\"archiveRoot should exist\", archiveRoot.exists());\n        builder.build().createArchive();\n    }", "signature": "void testCreateArchive_noJcrRoot()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testCreateArchive_noJcrRoot()", "class_method_signature": "WebsterPlanTest.testCreateArchive_noJcrRoot()", "testcase": true, "constructor": false, "invocations": ["deleteDirectory", "copyDirectory", "withArchiveRoot", "assertTrue", "exists", "createArchive", "build"]}, "focal_class": {"identifier": "WebsterPlan", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(WebsterPlan.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(WebsterPlan.class)", "var_name": "LOGGER"}, {"original_string": "private static final FixtureProvider DEFAULT_FIXTURE_PROVIDER = new FixtureProvider() {\n        @Override\n        public NodeStoreFixture openFixture() throws Exception {\n            throw new IllegalStateException(\"A fixture provider must be supplied to the builder.\");\n        }\n    };", "modifier": "private static final", "type": "FixtureProvider", "declarator": "DEFAULT_FIXTURE_PROVIDER = new FixtureProvider() {\n        @Override\n        public NodeStoreFixture openFixture() throws Exception {\n            throw new IllegalStateException(\"A fixture provider must be supplied to the builder.\");\n        }\n    }", "var_name": "DEFAULT_FIXTURE_PROVIDER"}, {"original_string": "private final FixtureProvider fixtureProvider;", "modifier": "private final", "type": "FixtureProvider", "declarator": "fixtureProvider", "var_name": "fixtureProvider"}, {"original_string": "private final File globalSegmentStore;", "modifier": "private final", "type": "File", "declarator": "globalSegmentStore", "var_name": "globalSegmentStore"}, {"original_string": "private final List<WebsterTarget> targets;", "modifier": "private final", "type": "List<WebsterTarget>", "declarator": "targets", "var_name": "targets"}, {"original_string": "private final File archiveRoot;", "modifier": "private final", "type": "File", "declarator": "archiveRoot", "var_name": "archiveRoot"}], "methods": [{"identifier": "WebsterPlan", "parameters": "(final @NotNull FixtureProvider fixtureProvider,\n                final @NotNull List<WebsterTarget> targets,\n                final @Nullable File globalSegmentStore,\n                final @Nullable File archiveRoot)", "modifiers": "", "return": "", "signature": " WebsterPlan(final @NotNull FixtureProvider fixtureProvider,\n                final @NotNull List<WebsterTarget> targets,\n                final @Nullable File globalSegmentStore,\n                final @Nullable File archiveRoot)", "full_signature": "  WebsterPlan(final @NotNull FixtureProvider fixtureProvider,\n                final @NotNull List<WebsterTarget> targets,\n                final @Nullable File globalSegmentStore,\n                final @Nullable File archiveRoot)", "class_method_signature": "WebsterPlan.WebsterPlan(final @NotNull FixtureProvider fixtureProvider,\n                final @NotNull List<WebsterTarget> targets,\n                final @Nullable File globalSegmentStore,\n                final @Nullable File archiveRoot)", "testcase": false, "constructor": true}, {"identifier": "performWithGlobalSegment", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void performWithGlobalSegment()", "full_signature": "private void performWithGlobalSegment()", "class_method_signature": "WebsterPlan.performWithGlobalSegment()", "testcase": false, "constructor": false}, {"identifier": "performWithGlobalMemory", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void performWithGlobalMemory()", "full_signature": "private void performWithGlobalMemory()", "class_method_signature": "WebsterPlan.performWithGlobalMemory()", "testcase": false, "constructor": false}, {"identifier": "internalPerform", "parameters": "(final Session session)", "modifiers": "", "return": "void", "signature": "void internalPerform(final Session session)", "full_signature": " void internalPerform(final Session session)", "class_method_signature": "WebsterPlan.internalPerform(final Session session)", "testcase": false, "constructor": false}, {"identifier": "createArchive", "parameters": "()", "modifiers": "", "return": "Archive", "signature": "Archive createArchive()", "full_signature": " Archive createArchive()", "class_method_signature": "WebsterPlan.createArchive()", "testcase": false, "constructor": false}, {"identifier": "perform", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void perform()", "full_signature": "public void perform()", "class_method_signature": "WebsterPlan.perform()", "testcase": false, "constructor": false}], "file": "webster/src/main/java/net/adamcin/oakpal/webster/WebsterPlan.java"}, "focal_method": {"identifier": "createArchive", "parameters": "()", "modifiers": "", "return": "Archive", "body": "Archive createArchive() throws IOException {\n        if (archiveRoot == null || !archiveRoot.isDirectory()) {\n            throw new IllegalArgumentException(\"archiveRoot must be an existing directory\");\n        }\n\n        final FileArchive archive = new FileArchive(archiveRoot);\n        if (!new File(archiveRoot, Constants.ROOT_DIR).exists()) {\n            throw new IllegalArgumentException(\"archiveRoot must have a child jcr_root directory\");\n        }\n\n        final File archiveMetaInfVault = new File(archiveRoot, Constants.META_DIR);\n        if (!archiveMetaInfVault.isDirectory()) {\n            archiveMetaInfVault.mkdirs();\n        }\n\n        archive.open(false);\n\n        return archive;\n    }", "signature": "Archive createArchive()", "full_signature": " Archive createArchive()", "class_method_signature": "WebsterPlan.createArchive()", "testcase": false, "constructor": false, "invocations": ["isDirectory", "exists", "isDirectory", "mkdirs", "open"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}