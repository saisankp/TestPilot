{"test_class": {"identifier": "UtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "abi/src/test/java/org/web3j/abi/UtilsTest.java"}, "test_case": {"identifier": "testTypeMapEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTypeMapEmpty() {\n        assertThat(typeMap(new ArrayList<BigInteger>(), Uint256.class),\n                CoreMatchers.<List<Uint256>>equalTo(new ArrayList<Uint256>()));\n    }", "signature": "void testTypeMapEmpty()", "full_signature": "@Test public void testTypeMapEmpty()", "class_method_signature": "UtilsTest.testTypeMapEmpty()", "testcase": true, "constructor": false, "invocations": ["assertThat", "typeMap", "equalTo"]}, "focal_class": {"identifier": "Utils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Utils", "parameters": "()", "modifiers": "private", "return": "", "signature": " Utils()", "full_signature": "private  Utils()", "class_method_signature": "Utils.Utils()", "testcase": false, "constructor": true}, {"identifier": "getTypeName", "parameters": "(TypeReference<T> typeReference)", "modifiers": "static", "return": "String", "signature": "String getTypeName(TypeReference<T> typeReference)", "full_signature": "static String getTypeName(TypeReference<T> typeReference)", "class_method_signature": "Utils.getTypeName(TypeReference<T> typeReference)", "testcase": false, "constructor": false}, {"identifier": "getSimpleTypeName", "parameters": "(Class<?> type)", "modifiers": "static", "return": "String", "signature": "String getSimpleTypeName(Class<?> type)", "full_signature": "static String getSimpleTypeName(Class<?> type)", "class_method_signature": "Utils.getSimpleTypeName(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getParameterizedTypeName", "parameters": "(\n            TypeReference<T> typeReference, Class<?> type)", "modifiers": "static", "return": "String", "signature": "String getParameterizedTypeName(\n            TypeReference<T> typeReference, Class<?> type)", "full_signature": "static String getParameterizedTypeName(\n            TypeReference<T> typeReference, Class<?> type)", "class_method_signature": "Utils.getParameterizedTypeName(\n            TypeReference<T> typeReference, Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getParameterizedTypeFromArray", "parameters": "(\n            TypeReference typeReference)", "modifiers": "@SuppressWarnings(\"unchecked\") static", "return": "Class<T>", "signature": "Class<T> getParameterizedTypeFromArray(\n            TypeReference typeReference)", "full_signature": "@SuppressWarnings(\"unchecked\") static Class<T> getParameterizedTypeFromArray(\n            TypeReference typeReference)", "class_method_signature": "Utils.getParameterizedTypeFromArray(\n            TypeReference typeReference)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(List<TypeReference<?>> input)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "List<TypeReference<Type>>", "signature": "List<TypeReference<Type>> convert(List<TypeReference<?>> input)", "full_signature": "@SuppressWarnings(\"unchecked\") public static List<TypeReference<Type>> convert(List<TypeReference<?>> input)", "class_method_signature": "Utils.convert(List<TypeReference<?>> input)", "testcase": false, "constructor": false}, {"identifier": "typeMap", "parameters": "(List<T> input, Class<R> destType)", "modifiers": "public static", "return": "List<R>", "signature": "List<R> typeMap(List<T> input, Class<R> destType)", "full_signature": "public static List<R> typeMap(List<T> input, Class<R> destType)", "class_method_signature": "Utils.typeMap(List<T> input, Class<R> destType)", "testcase": false, "constructor": false}], "file": "abi/src/main/java/org/web3j/abi/Utils.java"}, "focal_method": {"identifier": "typeMap", "parameters": "(List<T> input, Class<R> destType)", "modifiers": "public static", "return": "List<R>", "body": "public static <T, R extends Type<T>> List<R> typeMap(List<T> input, Class<R> destType)\n            throws TypeMappingException {\n\n        List<R> result = new ArrayList<R>(input.size());\n\n        if (!input.isEmpty()) {\n            try {\n                Constructor<R> constructor = destType.getDeclaredConstructor(\n                        input.get(0).getClass());\n                for (T value : input) {\n                    result.add(constructor.newInstance(value));\n                }\n            } catch (NoSuchMethodException e) {\n                throw new TypeMappingException(e);\n            } catch (IllegalAccessException e) {\n                throw new TypeMappingException(e);\n            } catch (InvocationTargetException e) {\n                throw new TypeMappingException(e);\n            } catch (InstantiationException e) {\n                throw new TypeMappingException(e);\n            }\n        }\n\n        return result;\n    }", "signature": "List<R> typeMap(List<T> input, Class<R> destType)", "full_signature": "public static List<R> typeMap(List<T> input, Class<R> destType)", "class_method_signature": "Utils.typeMap(List<T> input, Class<R> destType)", "testcase": false, "constructor": false, "invocations": ["size", "isEmpty", "getDeclaredConstructor", "getClass", "get", "add", "newInstance"]}, "repository": {"repo_id": 149736342, "url": "https://github.com/BrahmaOS/brahmaos-web3j", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 1779, "license": "licensed"}}