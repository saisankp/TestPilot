{"test_class": {"identifier": "LandsatGeotiffReaderPluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LandsatGeotiffReaderPlugin plugin;", "modifier": "private", "type": "LandsatGeotiffReaderPlugin", "declarator": "plugin", "var_name": "plugin"}], "file": "s3tbx-landsat-reader/src/test/java/org/esa/s3tbx/dataio/landsat/geotiff/LandsatGeotiffReaderPluginTest.java"}, "test_case": {"identifier": "testIsMetadataFilename", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsMetadataFilename() throws Exception {\n        assertTrue(LandsatGeotiffReaderPlugin.isMetadataFilename(\"test_L8_MTL.txt\"));\n        assertTrue(LandsatGeotiffReaderPlugin.isMetadataFilename(\"test_legacy_L5_WithTrailingWhiteSpace_MTL.txt\"));\n        assertFalse(LandsatGeotiffReaderPlugin.isMetadataFilename(\"test_MTL_L7.txt\"));\n    }", "signature": "void testIsMetadataFilename()", "full_signature": "@Test public void testIsMetadataFilename()", "class_method_signature": "LandsatGeotiffReaderPluginTest.testIsMetadataFilename()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isMetadataFilename", "assertTrue", "isMetadataFilename", "assertFalse", "isMetadataFilename"]}, "focal_class": {"identifier": "LandsatGeotiffReaderPlugin", "superclass": "", "interfaces": "implements ProductReaderPlugIn", "fields": [{"original_string": "private static final Class[] READER_INPUT_TYPES = new Class[]{String.class, File.class};", "modifier": "private static final", "type": "Class[]", "declarator": "READER_INPUT_TYPES = new Class[]{String.class, File.class}", "var_name": "READER_INPUT_TYPES"}, {"original_string": "private static final String[] FORMAT_NAMES = new String[]{\"LandsatGeoTIFF\"};", "modifier": "private static final", "type": "String[]", "declarator": "FORMAT_NAMES = new String[]{\"LandsatGeoTIFF\"}", "var_name": "FORMAT_NAMES"}, {"original_string": "private static final String[] DEFAULT_FILE_EXTENSIONS = new String[]{\".txt\", \".TXT\", \".gz\", \".tgz\"};", "modifier": "private static final", "type": "String[]", "declarator": "DEFAULT_FILE_EXTENSIONS = new String[]{\".txt\", \".TXT\", \".gz\", \".tgz\"}", "var_name": "DEFAULT_FILE_EXTENSIONS"}, {"original_string": "private static final String READER_DESCRIPTION = \"Landsat Data Products (GeoTIFF)\";", "modifier": "private static final", "type": "String", "declarator": "READER_DESCRIPTION = \"Landsat Data Products (GeoTIFF)\"", "var_name": "READER_DESCRIPTION"}], "methods": [{"identifier": "getDecodeQualification", "parameters": "(Object input)", "modifiers": "@Override public", "return": "DecodeQualification", "signature": "DecodeQualification getDecodeQualification(Object input)", "full_signature": "@Override public DecodeQualification getDecodeQualification(Object input)", "class_method_signature": "LandsatGeotiffReaderPlugin.getDecodeQualification(Object input)", "testcase": false, "constructor": false}, {"identifier": "getDecodeQualification", "parameters": "(VirtualDir virtualDir)", "modifiers": "static", "return": "DecodeQualification", "signature": "DecodeQualification getDecodeQualification(VirtualDir virtualDir)", "full_signature": "static DecodeQualification getDecodeQualification(VirtualDir virtualDir)", "class_method_signature": "LandsatGeotiffReaderPlugin.getDecodeQualification(VirtualDir virtualDir)", "testcase": false, "constructor": false}, {"identifier": "isMetadataFilename", "parameters": "(String filename)", "modifiers": "static", "return": "boolean", "signature": "boolean isMetadataFilename(String filename)", "full_signature": "static boolean isMetadataFilename(String filename)", "class_method_signature": "LandsatGeotiffReaderPlugin.isMetadataFilename(String filename)", "testcase": false, "constructor": false}, {"identifier": "isMetadataFile", "parameters": "(InputStream inputStream)", "modifiers": "static", "return": "boolean", "signature": "boolean isMetadataFile(InputStream inputStream)", "full_signature": "static boolean isMetadataFile(InputStream inputStream)", "class_method_signature": "LandsatGeotiffReaderPlugin.isMetadataFile(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "getInputTypes", "parameters": "()", "modifiers": "@Override public", "return": "Class[]", "signature": "Class[] getInputTypes()", "full_signature": "@Override public Class[] getInputTypes()", "class_method_signature": "LandsatGeotiffReaderPlugin.getInputTypes()", "testcase": false, "constructor": false}, {"identifier": "createReaderInstance", "parameters": "()", "modifiers": "@Override public", "return": "ProductReader", "signature": "ProductReader createReaderInstance()", "full_signature": "@Override public ProductReader createReaderInstance()", "class_method_signature": "LandsatGeotiffReaderPlugin.createReaderInstance()", "testcase": false, "constructor": false}, {"identifier": "getFormatNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getFormatNames()", "full_signature": "@Override public String[] getFormatNames()", "class_method_signature": "LandsatGeotiffReaderPlugin.getFormatNames()", "testcase": false, "constructor": false}, {"identifier": "getDefaultFileExtensions", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDefaultFileExtensions()", "full_signature": "@Override public String[] getDefaultFileExtensions()", "class_method_signature": "LandsatGeotiffReaderPlugin.getDefaultFileExtensions()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "(Locale locale)", "modifiers": "@Override public", "return": "String", "signature": "String getDescription(Locale locale)", "full_signature": "@Override public String getDescription(Locale locale)", "class_method_signature": "LandsatGeotiffReaderPlugin.getDescription(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "getProductFileFilter", "parameters": "()", "modifiers": "@Override public", "return": "SnapFileFilter", "signature": "SnapFileFilter getProductFileFilter()", "full_signature": "@Override public SnapFileFilter getProductFileFilter()", "class_method_signature": "LandsatGeotiffReaderPlugin.getProductFileFilter()", "testcase": false, "constructor": false}, {"identifier": "getInput", "parameters": "(Object input)", "modifiers": "static", "return": "VirtualDir", "signature": "VirtualDir getInput(Object input)", "full_signature": "static VirtualDir getInput(Object input)", "class_method_signature": "LandsatGeotiffReaderPlugin.getInput(Object input)", "testcase": false, "constructor": false}, {"identifier": "getFileInput", "parameters": "(Object input)", "modifiers": "static", "return": "File", "signature": "File getFileInput(Object input)", "full_signature": "static File getFileInput(Object input)", "class_method_signature": "LandsatGeotiffReaderPlugin.getFileInput(Object input)", "testcase": false, "constructor": false}, {"identifier": "isCompressedFile", "parameters": "(File file)", "modifiers": "static", "return": "boolean", "signature": "boolean isCompressedFile(File file)", "full_signature": "static boolean isCompressedFile(File file)", "class_method_signature": "LandsatGeotiffReaderPlugin.isCompressedFile(File file)", "testcase": false, "constructor": false}], "file": "s3tbx-landsat-reader/src/main/java/org/esa/s3tbx/dataio/landsat/geotiff/LandsatGeotiffReaderPlugin.java"}, "focal_method": {"identifier": "isMetadataFilename", "parameters": "(String filename)", "modifiers": "static", "return": "boolean", "body": "static boolean isMetadataFilename(String filename) {\n        return filename.toLowerCase().endsWith(\"_mtl.txt\");\n    }", "signature": "boolean isMetadataFilename(String filename)", "full_signature": "static boolean isMetadataFilename(String filename)", "class_method_signature": "LandsatGeotiffReaderPlugin.isMetadataFilename(String filename)", "testcase": false, "constructor": false, "invocations": ["endsWith", "toLowerCase"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}