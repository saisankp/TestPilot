{"test_class": {"identifier": "DbBeanTest", "superclass": "", "interfaces": "", "fields": [], "file": "jdbcprovider/src/test/java/ec/tss/tsproviders/db/DbBeanTest.java"}, "test_case": {"identifier": "testGetDimArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDimArray() {\n\n        assertArrayEquals(new String[]{\"Col1\", \"Col2\", \"Col3\"}, DbBean.getDimArray(\"Col1, Col2, Col3\"));\n        assertArrayEquals(new String[]{\"Col1\", \"Col3\"}, DbBean.getDimArray(\"Col1, , Col3\"));\n\n    }", "signature": "void testGetDimArray()", "full_signature": "@Test public void testGetDimArray()", "class_method_signature": "DbBeanTest.testGetDimArray()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "getDimArray", "assertArrayEquals", "getDimArray"]}, "focal_class": {"identifier": "DbBean", "superclass": "", "interfaces": "implements IDataSourceBean", "fields": [{"original_string": "public static final IParam<DataSource, String> X_DBNAME = onString(\"\", \"dbName\");", "modifier": "public static final", "type": "IParam<DataSource, String>", "declarator": "X_DBNAME = onString(\"\", \"dbName\")", "var_name": "X_DBNAME"}, {"original_string": "public static final IParam<DataSource, String> X_TABLENAME = onString(\"\", \"tableName\");", "modifier": "public static final", "type": "IParam<DataSource, String>", "declarator": "X_TABLENAME = onString(\"\", \"tableName\")", "var_name": "X_TABLENAME"}, {"original_string": "public static final IParam<DataSource, String> X_DIMCOLUMNS = onString(\"\", \"dimColumns\");", "modifier": "public static final", "type": "IParam<DataSource, String>", "declarator": "X_DIMCOLUMNS = onString(\"\", \"dimColumns\")", "var_name": "X_DIMCOLUMNS"}, {"original_string": "public static final IParam<DataSource, String> X_PERIODCOLUMN = onString(\"\", \"periodColumn\");", "modifier": "public static final", "type": "IParam<DataSource, String>", "declarator": "X_PERIODCOLUMN = onString(\"\", \"periodColumn\")", "var_name": "X_PERIODCOLUMN"}, {"original_string": "public static final IParam<DataSource, String> X_VALUECOLUMN = onString(\"\", \"valueColumn\");", "modifier": "public static final", "type": "IParam<DataSource, String>", "declarator": "X_VALUECOLUMN = onString(\"\", \"valueColumn\")", "var_name": "X_VALUECOLUMN"}, {"original_string": "public static final IParam<DataSource, DataFormat> X_DATAFORMAT = onDataFormat(DataFormat.DEFAULT, \"locale\", \"datePattern\", \"numberPattern\");", "modifier": "public static final", "type": "IParam<DataSource, DataFormat>", "declarator": "X_DATAFORMAT = onDataFormat(DataFormat.DEFAULT, \"locale\", \"datePattern\", \"numberPattern\")", "var_name": "X_DATAFORMAT"}, {"original_string": "public static final IParam<DataSource, String> X_VERSIONCOLUMN = onString(\"\", \"versionColumn\");", "modifier": "public static final", "type": "IParam<DataSource, String>", "declarator": "X_VERSIONCOLUMN = onString(\"\", \"versionColumn\")", "var_name": "X_VERSIONCOLUMN"}, {"original_string": "public static final IParam<DataSource, TsFrequency> X_FREQUENCY = onEnum(TsFrequency.Undefined, \"frequency\");", "modifier": "public static final", "type": "IParam<DataSource, TsFrequency>", "declarator": "X_FREQUENCY = onEnum(TsFrequency.Undefined, \"frequency\")", "var_name": "X_FREQUENCY"}, {"original_string": "public static final IParam<DataSource, TsAggregationType> X_AGGREGATION_TYPE = onEnum(TsAggregationType.None, \"aggregationType\");", "modifier": "public static final", "type": "IParam<DataSource, TsAggregationType>", "declarator": "X_AGGREGATION_TYPE = onEnum(TsAggregationType.None, \"aggregationType\")", "var_name": "X_AGGREGATION_TYPE"}, {"original_string": "protected String dbName;", "modifier": "protected", "type": "String", "declarator": "dbName", "var_name": "dbName"}, {"original_string": "protected String tableName;", "modifier": "protected", "type": "String", "declarator": "tableName", "var_name": "tableName"}, {"original_string": "protected String dimColumns;", "modifier": "protected", "type": "String", "declarator": "dimColumns", "var_name": "dimColumns"}, {"original_string": "protected String periodColumn;", "modifier": "protected", "type": "String", "declarator": "periodColumn", "var_name": "periodColumn"}, {"original_string": "protected String valueColumn;", "modifier": "protected", "type": "String", "declarator": "valueColumn", "var_name": "valueColumn"}, {"original_string": "protected DataFormat dataFormat;", "modifier": "protected", "type": "DataFormat", "declarator": "dataFormat", "var_name": "dataFormat"}, {"original_string": "protected String versionColumn;", "modifier": "protected", "type": "String", "declarator": "versionColumn", "var_name": "versionColumn"}, {"original_string": "protected TsFrequency frequency;", "modifier": "protected", "type": "TsFrequency", "declarator": "frequency", "var_name": "frequency"}, {"original_string": "protected TsAggregationType aggregationType;", "modifier": "protected", "type": "TsAggregationType", "declarator": "aggregationType", "var_name": "aggregationType"}, {"original_string": "static final Splitter DIM_ARRAY_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings();", "modifier": "static final", "type": "Splitter", "declarator": "DIM_ARRAY_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings()", "var_name": "DIM_ARRAY_SPLITTER"}], "methods": [{"identifier": "DbBean", "parameters": "()", "modifiers": "public", "return": "", "signature": " DbBean()", "full_signature": "public  DbBean()", "class_method_signature": "DbBean.DbBean()", "testcase": false, "constructor": true}, {"identifier": "DbBean", "parameters": "(@NonNull DataSource id)", "modifiers": "public", "return": "", "signature": " DbBean(@NonNull DataSource id)", "full_signature": "public  DbBean(@NonNull DataSource id)", "class_method_signature": "DbBean.DbBean(@NonNull DataSource id)", "testcase": false, "constructor": true}, {"identifier": "getDbName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDbName()", "full_signature": "public String getDbName()", "class_method_signature": "DbBean.getDbName()", "testcase": false, "constructor": false}, {"identifier": "setDbName", "parameters": "(String dbName)", "modifiers": "public", "return": "void", "signature": "void setDbName(String dbName)", "full_signature": "public void setDbName(String dbName)", "class_method_signature": "DbBean.setDbName(String dbName)", "testcase": false, "constructor": false}, {"identifier": "getTableName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTableName()", "full_signature": "public String getTableName()", "class_method_signature": "DbBean.getTableName()", "testcase": false, "constructor": false}, {"identifier": "setTableName", "parameters": "(String tableName)", "modifiers": "public", "return": "void", "signature": "void setTableName(String tableName)", "full_signature": "public void setTableName(String tableName)", "class_method_signature": "DbBean.setTableName(String tableName)", "testcase": false, "constructor": false}, {"identifier": "getDimColumns", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDimColumns()", "full_signature": "public String getDimColumns()", "class_method_signature": "DbBean.getDimColumns()", "testcase": false, "constructor": false}, {"identifier": "setDimColumns", "parameters": "(String dimColumns)", "modifiers": "public", "return": "void", "signature": "void setDimColumns(String dimColumns)", "full_signature": "public void setDimColumns(String dimColumns)", "class_method_signature": "DbBean.setDimColumns(String dimColumns)", "testcase": false, "constructor": false}, {"identifier": "getPeriodColumn", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPeriodColumn()", "full_signature": "public String getPeriodColumn()", "class_method_signature": "DbBean.getPeriodColumn()", "testcase": false, "constructor": false}, {"identifier": "setPeriodColumn", "parameters": "(String periodColumn)", "modifiers": "public", "return": "void", "signature": "void setPeriodColumn(String periodColumn)", "full_signature": "public void setPeriodColumn(String periodColumn)", "class_method_signature": "DbBean.setPeriodColumn(String periodColumn)", "testcase": false, "constructor": false}, {"identifier": "getValueColumn", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getValueColumn()", "full_signature": "public String getValueColumn()", "class_method_signature": "DbBean.getValueColumn()", "testcase": false, "constructor": false}, {"identifier": "setValueColumn", "parameters": "(String valueColumn)", "modifiers": "public", "return": "void", "signature": "void setValueColumn(String valueColumn)", "full_signature": "public void setValueColumn(String valueColumn)", "class_method_signature": "DbBean.setValueColumn(String valueColumn)", "testcase": false, "constructor": false}, {"identifier": "getDataFormat", "parameters": "()", "modifiers": "public", "return": "DataFormat", "signature": "DataFormat getDataFormat()", "full_signature": "public DataFormat getDataFormat()", "class_method_signature": "DbBean.getDataFormat()", "testcase": false, "constructor": false}, {"identifier": "setDataFormat", "parameters": "(DataFormat dataFormat)", "modifiers": "public", "return": "void", "signature": "void setDataFormat(DataFormat dataFormat)", "full_signature": "public void setDataFormat(DataFormat dataFormat)", "class_method_signature": "DbBean.setDataFormat(DataFormat dataFormat)", "testcase": false, "constructor": false}, {"identifier": "getVersionColumn", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getVersionColumn()", "full_signature": "public String getVersionColumn()", "class_method_signature": "DbBean.getVersionColumn()", "testcase": false, "constructor": false}, {"identifier": "setVersionColumn", "parameters": "(String versionColumn)", "modifiers": "public", "return": "void", "signature": "void setVersionColumn(String versionColumn)", "full_signature": "public void setVersionColumn(String versionColumn)", "class_method_signature": "DbBean.setVersionColumn(String versionColumn)", "testcase": false, "constructor": false}, {"identifier": "getFrequency", "parameters": "()", "modifiers": "public", "return": "TsFrequency", "signature": "TsFrequency getFrequency()", "full_signature": "public TsFrequency getFrequency()", "class_method_signature": "DbBean.getFrequency()", "testcase": false, "constructor": false}, {"identifier": "setFrequency", "parameters": "(TsFrequency frequency)", "modifiers": "public", "return": "void", "signature": "void setFrequency(TsFrequency frequency)", "full_signature": "public void setFrequency(TsFrequency frequency)", "class_method_signature": "DbBean.setFrequency(TsFrequency frequency)", "testcase": false, "constructor": false}, {"identifier": "getAggregationType", "parameters": "()", "modifiers": "public", "return": "TsAggregationType", "signature": "TsAggregationType getAggregationType()", "full_signature": "public TsAggregationType getAggregationType()", "class_method_signature": "DbBean.getAggregationType()", "testcase": false, "constructor": false}, {"identifier": "setAggregationType", "parameters": "(TsAggregationType aggregationType)", "modifiers": "public", "return": "void", "signature": "void setAggregationType(TsAggregationType aggregationType)", "full_signature": "public void setAggregationType(TsAggregationType aggregationType)", "class_method_signature": "DbBean.setAggregationType(TsAggregationType aggregationType)", "testcase": false, "constructor": false}, {"identifier": "toDataSource", "parameters": "(String providerName, String version)", "modifiers": "@Override public", "return": "DataSource", "signature": "DataSource toDataSource(String providerName, String version)", "full_signature": "@Override public DataSource toDataSource(String providerName, String version)", "class_method_signature": "DbBean.toDataSource(String providerName, String version)", "testcase": false, "constructor": false}, {"identifier": "getDimArray", "parameters": "()", "modifiers": "@NonNull public", "return": "String[]", "signature": "String[] getDimArray()", "full_signature": "@NonNull public String[] getDimArray()", "class_method_signature": "DbBean.getDimArray()", "testcase": false, "constructor": false}, {"identifier": "getDimArray", "parameters": "(String dimColumns)", "modifiers": "static", "return": "String[]", "signature": "String[] getDimArray(String dimColumns)", "full_signature": "static String[] getDimArray(String dimColumns)", "class_method_signature": "DbBean.getDimArray(String dimColumns)", "testcase": false, "constructor": false}, {"identifier": "getDimArray", "parameters": "(@NonNull DataSource dataSource)", "modifiers": "@NonNull public static", "return": "String[]", "signature": "String[] getDimArray(@NonNull DataSource dataSource)", "full_signature": "@NonNull public static String[] getDimArray(@NonNull DataSource dataSource)", "class_method_signature": "DbBean.getDimArray(@NonNull DataSource dataSource)", "testcase": false, "constructor": false}], "file": "jdbcprovider/src/main/java/ec/tss/tsproviders/db/DbBean.java"}, "focal_method": {"identifier": "getDimArray", "parameters": "()", "modifiers": "@NonNull public", "return": "String[]", "body": "@NonNull\n    public String[] getDimArray() {\n        return getDimArray(dimColumns);\n    }", "signature": "String[] getDimArray()", "full_signature": "@NonNull public String[] getDimArray()", "class_method_signature": "DbBean.getDimArray()", "testcase": false, "constructor": false, "invocations": ["getDimArray"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}