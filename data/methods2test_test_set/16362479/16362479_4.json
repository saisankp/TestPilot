{"test_class": {"identifier": "RemoteRpcRegistryMXBeanImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final QName LOCAL_QNAME = QName.create(\"base\", \"local\");", "modifier": "private static final", "type": "QName", "declarator": "LOCAL_QNAME = QName.create(\"base\", \"local\")", "var_name": "LOCAL_QNAME"}, {"original_string": "private static final QName REMOTE_QNAME = QName.create(\"base\", \"remote\");", "modifier": "private static final", "type": "QName", "declarator": "REMOTE_QNAME = QName.create(\"base\", \"remote\")", "var_name": "REMOTE_QNAME"}, {"original_string": "private ActorSystem system;", "modifier": "private", "type": "ActorSystem", "declarator": "system", "var_name": "system"}, {"original_string": "private TestActorRef<RpcRegistry> testActor;", "modifier": "private", "type": "TestActorRef<RpcRegistry>", "declarator": "testActor", "var_name": "testActor"}, {"original_string": "private List<DOMRpcIdentifier> buckets;", "modifier": "private", "type": "List<DOMRpcIdentifier>", "declarator": "buckets", "var_name": "buckets"}, {"original_string": "private RemoteRpcRegistryMXBeanImpl mxBean;", "modifier": "private", "type": "RemoteRpcRegistryMXBeanImpl", "declarator": "mxBean", "var_name": "mxBean"}], "file": "opendaylight/md-sal/sal-remoterpc-connector/src/test/java/org/opendaylight/controller/remote/rpc/registry/mbeans/RemoteRpcRegistryMXBeanImplTest.java"}, "test_case": {"identifier": "testGetGlobalRpc", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetGlobalRpc() {\n        testActor.tell(new RpcRegistry.Messages.AddOrUpdateRoutes(Lists.newArrayList(buckets)), ActorRef.noSender());\n        final Set<String> globalRpc = mxBean.getGlobalRpc();\n\n        assertNotNull(globalRpc);\n        assertEquals(1, globalRpc.size());\n\n        final String rpc = globalRpc.iterator().next();\n        assertEquals(REMOTE_QNAME.toString(), rpc);\n    }", "signature": "void testGetGlobalRpc()", "full_signature": "@Test public void testGetGlobalRpc()", "class_method_signature": "RemoteRpcRegistryMXBeanImplTest.testGetGlobalRpc()", "testcase": true, "constructor": false, "invocations": ["tell", "newArrayList", "noSender", "getGlobalRpc", "assertNotNull", "assertEquals", "size", "next", "iterator", "assertEquals", "toString"]}, "focal_class": {"identifier": "RemoteRpcRegistryMXBeanImpl", "superclass": "extends AbstractRegistryMXBean<RoutingTable, DOMRpcIdentifier>", "interfaces": "implements RemoteRpcRegistryMXBean", "fields": [], "methods": [{"identifier": "RemoteRpcRegistryMXBeanImpl", "parameters": "(final BucketStoreAccess rpcRegistryAccess, final Timeout timeout)", "modifiers": "public", "return": "", "signature": " RemoteRpcRegistryMXBeanImpl(final BucketStoreAccess rpcRegistryAccess, final Timeout timeout)", "full_signature": "public  RemoteRpcRegistryMXBeanImpl(final BucketStoreAccess rpcRegistryAccess, final Timeout timeout)", "class_method_signature": "RemoteRpcRegistryMXBeanImpl.RemoteRpcRegistryMXBeanImpl(final BucketStoreAccess rpcRegistryAccess, final Timeout timeout)", "testcase": false, "constructor": true}, {"identifier": "getGlobalRpc", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getGlobalRpc()", "full_signature": "@Override public Set<String> getGlobalRpc()", "class_method_signature": "RemoteRpcRegistryMXBeanImpl.getGlobalRpc()", "testcase": false, "constructor": false}, {"identifier": "getLocalRegisteredRoutedRpc", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getLocalRegisteredRoutedRpc()", "full_signature": "@Override public Set<String> getLocalRegisteredRoutedRpc()", "class_method_signature": "RemoteRpcRegistryMXBeanImpl.getLocalRegisteredRoutedRpc()", "testcase": false, "constructor": false}, {"identifier": "findRpcByName", "parameters": "(final String name)", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> findRpcByName(final String name)", "full_signature": "@Override public Map<String, String> findRpcByName(final String name)", "class_method_signature": "RemoteRpcRegistryMXBeanImpl.findRpcByName(final String name)", "testcase": false, "constructor": false}, {"identifier": "findRpcByRoute", "parameters": "(final String routeId)", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> findRpcByRoute(final String routeId)", "full_signature": "@Override public Map<String, String> findRpcByRoute(final String routeId)", "class_method_signature": "RemoteRpcRegistryMXBeanImpl.findRpcByRoute(final String routeId)", "testcase": false, "constructor": false}, {"identifier": "getRpcMemberMapByRoute", "parameters": "(final RoutingTable table, final String routeName,\n                                                             final String address)", "modifiers": "private static", "return": "Map<String,String>", "signature": "Map<String,String> getRpcMemberMapByRoute(final RoutingTable table, final String routeName,\n                                                             final String address)", "full_signature": "private static Map<String,String> getRpcMemberMapByRoute(final RoutingTable table, final String routeName,\n                                                             final String address)", "class_method_signature": "RemoteRpcRegistryMXBeanImpl.getRpcMemberMapByRoute(final RoutingTable table, final String routeName,\n                                                             final String address)", "testcase": false, "constructor": false}, {"identifier": "getRpcMemberMapByName", "parameters": "(final RoutingTable table, final String name,\n                                                             final String address)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> getRpcMemberMapByName(final RoutingTable table, final String name,\n                                                             final String address)", "full_signature": "private static Map<String, String> getRpcMemberMapByName(final RoutingTable table, final String name,\n                                                             final String address)", "class_method_signature": "RemoteRpcRegistryMXBeanImpl.getRpcMemberMapByName(final RoutingTable table, final String name,\n                                                             final String address)", "testcase": false, "constructor": false}, {"identifier": "getBucketVersions", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getBucketVersions()", "full_signature": "@Override public String getBucketVersions()", "class_method_signature": "RemoteRpcRegistryMXBeanImpl.getBucketVersions()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-remoterpc-connector/src/main/java/org/opendaylight/controller/remote/rpc/registry/mbeans/RemoteRpcRegistryMXBeanImpl.java"}, "focal_method": {"identifier": "getGlobalRpc", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "body": "@Override\n    public Set<String> getGlobalRpc() {\n        RoutingTable table = localData();\n        Set<String> globalRpc = new HashSet<>(table.getItems().size());\n        for (DOMRpcIdentifier route : table.getItems()) {\n            if (route.getContextReference().isEmpty()) {\n                globalRpc.add(route.getType().toString());\n            }\n        }\n\n        log.debug(\"Locally registered global RPCs {}\", globalRpc);\n        return globalRpc;\n    }", "signature": "Set<String> getGlobalRpc()", "full_signature": "@Override public Set<String> getGlobalRpc()", "class_method_signature": "RemoteRpcRegistryMXBeanImpl.getGlobalRpc()", "testcase": false, "constructor": false, "invocations": ["localData", "size", "getItems", "getItems", "isEmpty", "getContextReference", "add", "toString", "getType", "debug"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}