{"test_class": {"identifier": "CndExporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final File testBaseDir = new File(\"target/repos/CndExporterTest\");", "modifier": "final", "type": "File", "declarator": "testBaseDir = new File(\"target/repos/CndExporterTest\")", "var_name": "testBaseDir"}], "file": "webster/src/test/java/net/adamcin/oakpal/webster/CndExporterTest.java"}, "test_case": {"identifier": "testWriteNodetypesByName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWriteNodetypesByName() throws Exception {\n        final File tempDir = new File(testBaseDir, \"testWriteNodetypesByName\");\n        final File fromRepoDir = new File(tempDir, \"fromRepo/segmentstore\");\n        final File toRepoDir = new File(tempDir, \"toRepo/segmentstore\");\n        final File exportedCnd = new File(tempDir, \"exported.cnd\");\n\n        TestUtil.prepareRepo(fromRepoDir, session -> {\n            final URL slingNodetypes = getClass().getResource(\"/sling_nodetypes.cnd\");\n            TestUtil.installCndFromURL(session, slingNodetypes);\n        });\n\n        if (exportedCnd.exists()) {\n            exportedCnd.delete();\n        }\n\n        TestUtil.withReadOnlyFixture(fromRepoDir, session -> {\n            final Workspace workspace = session.getWorkspace();\n            NodeTypeManager ntManager = workspace.getNodeTypeManager();\n\n            assertTrue(\"sling:Folder should be imported\",\n                    ntManager.hasNodeType(\"sling:Folder\"));\n            assertTrue(\"sling:OrderedFolder should be imported\",\n                    ntManager.hasNodeType(\"sling:OrderedFolder\"));\n\n            new CndExporter.Builder().build()\n                    .writeNodetypes(exportedCnd, session, Collections.singletonList(\"sling:Folder\"));\n        });\n\n        TestUtil.prepareRepo(toRepoDir, session -> {\n            final URL exportedUrl = exportedCnd.toURL();\n            TestUtil.installCndFromURL(session, exportedUrl);\n        });\n\n        TestUtil.withReadOnlyFixture(toRepoDir, session -> {\n            final Workspace workspace = session.getWorkspace();\n            NodeTypeManager ntManager = workspace.getNodeTypeManager();\n\n            assertTrue(\"sling:Folder should be imported\",\n                    ntManager.hasNodeType(\"sling:Folder\"));\n            assertFalse(\"sling:OrderedFolder should NOT be imported\",\n                    ntManager.hasNodeType(\"sling:OrderedFolder\"));\n        });\n    }", "signature": "void testWriteNodetypesByName()", "full_signature": "@Test public void testWriteNodetypesByName()", "class_method_signature": "CndExporterTest.testWriteNodetypesByName()", "testcase": true, "constructor": false, "invocations": ["prepareRepo", "getResource", "getClass", "installCndFromURL", "exists", "delete", "withReadOnlyFixture", "getWorkspace", "getNodeTypeManager", "assertTrue", "hasNodeType", "assertTrue", "hasNodeType", "writeNodetypes", "build", "singletonList", "prepareRepo", "toURL", "installCndFromURL", "withReadOnlyFixture", "getWorkspace", "getNodeTypeManager", "assertTrue", "hasNodeType", "assertFalse", "hasNodeType"]}, "focal_class": {"identifier": "CndExporter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<Rule> scopeExportNames;", "modifier": "private final", "type": "List<Rule>", "declarator": "scopeExportNames", "var_name": "scopeExportNames"}, {"original_string": "private final List<Rule> scopeReplaceNames;", "modifier": "private final", "type": "List<Rule>", "declarator": "scopeReplaceNames", "var_name": "scopeReplaceNames"}, {"original_string": "private final boolean includeBuiltins;", "modifier": "private final", "type": "boolean", "declarator": "includeBuiltins", "var_name": "includeBuiltins"}, {"original_string": "public static final List<String> BUILTIN_NODETYPES = JsonCnd.BUILTIN_NODETYPES;", "modifier": "public static final", "type": "List<String>", "declarator": "BUILTIN_NODETYPES = JsonCnd.BUILTIN_NODETYPES", "var_name": "BUILTIN_NODETYPES"}], "methods": [{"identifier": "CndExporter", "parameters": "(final List<Rule> scopeExportNames,\n                        final List<Rule> scopeReplaceNames,\n                        final boolean includeBuiltins)", "modifiers": "private", "return": "", "signature": " CndExporter(final List<Rule> scopeExportNames,\n                        final List<Rule> scopeReplaceNames,\n                        final boolean includeBuiltins)", "full_signature": "private  CndExporter(final List<Rule> scopeExportNames,\n                        final List<Rule> scopeReplaceNames,\n                        final boolean includeBuiltins)", "class_method_signature": "CndExporter.CndExporter(final List<Rule> scopeExportNames,\n                        final List<Rule> scopeReplaceNames,\n                        final boolean includeBuiltins)", "testcase": false, "constructor": true}, {"identifier": "writeNodetypes", "parameters": "(final @NotNull File cndFile,\n                               final @NotNull Session session,\n                               final @NotNull List<String> desiredTypeNames)", "modifiers": "public", "return": "void", "signature": "void writeNodetypes(final @NotNull File cndFile,\n                               final @NotNull Session session,\n                               final @NotNull List<String> desiredTypeNames)", "full_signature": "public void writeNodetypes(final @NotNull File cndFile,\n                               final @NotNull Session session,\n                               final @NotNull List<String> desiredTypeNames)", "class_method_signature": "CndExporter.writeNodetypes(final @NotNull File cndFile,\n                               final @NotNull Session session,\n                               final @NotNull List<String> desiredTypeNames)", "testcase": false, "constructor": false}, {"identifier": "writeNodetypes", "parameters": "(final @NotNull WriterOpener writerOpener,\n                               final @NotNull Session session,\n                               final @NotNull List<String> desiredTypeNames,\n                               final @Nullable File initialCnd)", "modifiers": "public", "return": "void", "signature": "void writeNodetypes(final @NotNull WriterOpener writerOpener,\n                               final @NotNull Session session,\n                               final @NotNull List<String> desiredTypeNames,\n                               final @Nullable File initialCnd)", "full_signature": "public void writeNodetypes(final @NotNull WriterOpener writerOpener,\n                               final @NotNull Session session,\n                               final @NotNull List<String> desiredTypeNames,\n                               final @Nullable File initialCnd)", "class_method_signature": "CndExporter.writeNodetypes(final @NotNull WriterOpener writerOpener,\n                               final @NotNull Session session,\n                               final @NotNull List<String> desiredTypeNames,\n                               final @Nullable File initialCnd)", "testcase": false, "constructor": false}, {"identifier": "retrieveNodeTypes", "parameters": "(final @NotNull Session session,\n                                                                  final @NotNull Collection<Name> desiredTypeNames)", "modifiers": "public static", "return": "Map<Name, NodeTypeDefinition>", "signature": "Map<Name, NodeTypeDefinition> retrieveNodeTypes(final @NotNull Session session,\n                                                                  final @NotNull Collection<Name> desiredTypeNames)", "full_signature": "public static Map<Name, NodeTypeDefinition> retrieveNodeTypes(final @NotNull Session session,\n                                                                  final @NotNull Collection<Name> desiredTypeNames)", "class_method_signature": "CndExporter.retrieveNodeTypes(final @NotNull Session session,\n                                                                  final @NotNull Collection<Name> desiredTypeNames)", "testcase": false, "constructor": false}, {"identifier": "retrieveNodeTypes", "parameters": "(final @NotNull Session session,\n                      final @NotNull Collection<Name> desiredTypeNames,\n                      final @Nullable BiPredicate<NamePathResolver, NodeType> nodeTypeSelector)", "modifiers": "public static", "return": "Map<Name, NodeTypeDefinition>", "signature": "Map<Name, NodeTypeDefinition> retrieveNodeTypes(final @NotNull Session session,\n                      final @NotNull Collection<Name> desiredTypeNames,\n                      final @Nullable BiPredicate<NamePathResolver, NodeType> nodeTypeSelector)", "full_signature": "public static Map<Name, NodeTypeDefinition> retrieveNodeTypes(final @NotNull Session session,\n                      final @NotNull Collection<Name> desiredTypeNames,\n                      final @Nullable BiPredicate<NamePathResolver, NodeType> nodeTypeSelector)", "class_method_signature": "CndExporter.retrieveNodeTypes(final @NotNull Session session,\n                      final @NotNull Collection<Name> desiredTypeNames,\n                      final @Nullable BiPredicate<NamePathResolver, NodeType> nodeTypeSelector)", "testcase": false, "constructor": false}, {"identifier": "combineCauseMessages", "parameters": "(final @NotNull Stream<Result<T>> results,\n                                                              final @NotNull Class<? extends Throwable> causeType,\n                                                              final @NotNull Class<E> andThrow)", "modifiers": "static", "return": "void", "signature": "void combineCauseMessages(final @NotNull Stream<Result<T>> results,\n                                                              final @NotNull Class<? extends Throwable> causeType,\n                                                              final @NotNull Class<E> andThrow)", "full_signature": "static void combineCauseMessages(final @NotNull Stream<Result<T>> results,\n                                                              final @NotNull Class<? extends Throwable> causeType,\n                                                              final @NotNull Class<E> andThrow)", "class_method_signature": "CndExporter.combineCauseMessages(final @NotNull Stream<Result<T>> results,\n                                                              final @NotNull Class<? extends Throwable> causeType,\n                                                              final @NotNull Class<E> andThrow)", "testcase": false, "constructor": false}, {"identifier": "optStream", "parameters": "(final T element)", "modifiers": "static", "return": "Stream<T>", "signature": "Stream<T> optStream(final T element)", "full_signature": "static Stream<T> optStream(final T element)", "class_method_signature": "CndExporter.optStream(final T element)", "testcase": false, "constructor": false}, {"identifier": "ntDepStream", "parameters": "(final NodeTypeTemplate ntDef)", "modifiers": "@SuppressWarnings(\"unchecked\") static", "return": "Stream<String>", "signature": "Stream<String> ntDepStream(final NodeTypeTemplate ntDef)", "full_signature": "@SuppressWarnings(\"unchecked\") static Stream<String> ntDepStream(final NodeTypeTemplate ntDef)", "class_method_signature": "CndExporter.ntDepStream(final NodeTypeTemplate ntDef)", "testcase": false, "constructor": false}, {"identifier": "addType", "parameters": "(final @NotNull NamePathResolver resolver,\n                        final @NotNull Map<Name, NodeTypeDefinition> typeSet,\n                        final @NotNull NodeType def)", "modifiers": "static", "return": "void", "signature": "void addType(final @NotNull NamePathResolver resolver,\n                        final @NotNull Map<Name, NodeTypeDefinition> typeSet,\n                        final @NotNull NodeType def)", "full_signature": "static void addType(final @NotNull NamePathResolver resolver,\n                        final @NotNull Map<Name, NodeTypeDefinition> typeSet,\n                        final @NotNull NodeType def)", "class_method_signature": "CndExporter.addType(final @NotNull NamePathResolver resolver,\n                        final @NotNull Map<Name, NodeTypeDefinition> typeSet,\n                        final @NotNull NodeType def)", "testcase": false, "constructor": false}], "file": "webster/src/main/java/net/adamcin/oakpal/webster/CndExporter.java"}, "focal_method": {"identifier": "writeNodetypes", "parameters": "(final @NotNull File cndFile,\n                               final @NotNull Session session,\n                               final @NotNull List<String> desiredTypeNames)", "modifiers": "public", "return": "void", "body": "public void writeNodetypes(final @NotNull File cndFile,\n                               final @NotNull Session session,\n                               final @NotNull List<String> desiredTypeNames)\n            throws RepositoryException, IOException, ParseException {\n        writeNodetypes(() -> new OutputStreamWriter(new FileOutputStream(cndFile), StandardCharsets.UTF_8),\n                session, desiredTypeNames, cndFile);\n    }", "signature": "void writeNodetypes(final @NotNull File cndFile,\n                               final @NotNull Session session,\n                               final @NotNull List<String> desiredTypeNames)", "full_signature": "public void writeNodetypes(final @NotNull File cndFile,\n                               final @NotNull Session session,\n                               final @NotNull List<String> desiredTypeNames)", "class_method_signature": "CndExporter.writeNodetypes(final @NotNull File cndFile,\n                               final @NotNull Session session,\n                               final @NotNull List<String> desiredTypeNames)", "testcase": false, "constructor": false, "invocations": ["writeNodetypes"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}