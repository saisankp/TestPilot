{"test_class": {"identifier": "DefaultThreadManagerTest", "superclass": "extends HaloRobolectricTest", "interfaces": "", "fields": [{"original_string": "private CallbackFlag mCallbackFlag;", "modifier": "private", "type": "CallbackFlag", "declarator": "mCallbackFlag", "var_name": "mCallbackFlag"}, {"original_string": "private HaloFramework mFramework;", "modifier": "private", "type": "HaloFramework", "declarator": "mFramework", "var_name": "mFramework"}], "file": "sdk/halo-framework/src/test/java/com/mobgen/halo/android/framework/toolbox/threading/DefaultThreadManagerTest.java"}, "test_case": {"identifier": "thatCanCreateADefaultThreadManagerWithPoolQueuePolicy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void thatCanCreateADefaultThreadManagerWithPoolQueuePolicy() {\n\n        DefaultThreadManager defaultThreadManager = new DefaultThreadManager();\n        Future future = defaultThreadManager.enqueue(Threading.POOL_QUEUE_POLICY, givenARunnable(mCallbackFlag));\n        assertThat(mCallbackFlag.isFlagged()).isFalse();\n        assertThat(future).isNotNull();\n    }", "signature": "void thatCanCreateADefaultThreadManagerWithPoolQueuePolicy()", "full_signature": "@Test public void thatCanCreateADefaultThreadManagerWithPoolQueuePolicy()", "class_method_signature": "DefaultThreadManagerTest.thatCanCreateADefaultThreadManagerWithPoolQueuePolicy()", "testcase": true, "constructor": false, "invocations": ["enqueue", "givenARunnable", "isFalse", "assertThat", "isFlagged", "isNotNull", "assertThat"]}, "focal_class": {"identifier": "DefaultThreadManager", "superclass": "extends HaloThreadManager", "interfaces": "", "fields": [{"original_string": "private static final int KEEP_ALIVE_TIME = 1;", "modifier": "private static final", "type": "int", "declarator": "KEEP_ALIVE_TIME = 1", "var_name": "KEEP_ALIVE_TIME"}, {"original_string": "private static final TimeUnit KEEP_ALIVE_TIME_UNIT = TimeUnit.SECONDS;", "modifier": "private static final", "type": "TimeUnit", "declarator": "KEEP_ALIVE_TIME_UNIT = TimeUnit.SECONDS", "var_name": "KEEP_ALIVE_TIME_UNIT"}, {"original_string": "private static final int NUMBER_OF_CORES = Runtime.getRuntime().availableProcessors();", "modifier": "private static final", "type": "int", "declarator": "NUMBER_OF_CORES = Runtime.getRuntime().availableProcessors()", "var_name": "NUMBER_OF_CORES"}, {"original_string": "private static final int CORE_POOL_SIZE = NUMBER_OF_CORES + 1;", "modifier": "private static final", "type": "int", "declarator": "CORE_POOL_SIZE = NUMBER_OF_CORES + 1", "var_name": "CORE_POOL_SIZE"}, {"original_string": "private static final int MAXIMUM_POOL_SIZE = NUMBER_OF_CORES * 2 + 1;", "modifier": "private static final", "type": "int", "declarator": "MAXIMUM_POOL_SIZE = NUMBER_OF_CORES * 2 + 1", "var_name": "MAXIMUM_POOL_SIZE"}, {"original_string": "private ExecutorService mPoolQueue;", "modifier": "private", "type": "ExecutorService", "declarator": "mPoolQueue", "var_name": "mPoolQueue"}, {"original_string": "private ExecutorService mSingleQueue;", "modifier": "private", "type": "ExecutorService", "declarator": "mSingleQueue", "var_name": "mSingleQueue"}], "methods": [{"identifier": "DefaultThreadManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " DefaultThreadManager()", "full_signature": "public  DefaultThreadManager()", "class_method_signature": "DefaultThreadManager.DefaultThreadManager()", "testcase": false, "constructor": true}, {"identifier": "enqueue", "parameters": "(@Threading.Policy int thread, @NonNull Runnable runnable)", "modifiers": "@Override public", "return": "Future", "signature": "Future enqueue(@Threading.Policy int thread, @NonNull Runnable runnable)", "full_signature": "@Override public Future enqueue(@Threading.Policy int thread, @NonNull Runnable runnable)", "class_method_signature": "DefaultThreadManager.enqueue(@Threading.Policy int thread, @NonNull Runnable runnable)", "testcase": false, "constructor": false}], "file": "sdk/halo-framework/src/main/java/com/mobgen/halo/android/framework/toolbox/threading/DefaultThreadManager.java"}, "focal_method": {"identifier": "enqueue", "parameters": "(@Threading.Policy int thread, @NonNull Runnable runnable)", "modifiers": "@Override public", "return": "Future", "body": "@Override\n    public Future enqueue(@Threading.Policy int thread, @NonNull Runnable runnable) {\n        Future<?> future;\n        switch (thread) {\n            case Threading.POOL_QUEUE_POLICY:\n                future = mPoolQueue.submit(runnable);\n                break;\n            case Threading.SINGLE_QUEUE_POLICY:\n                future = mSingleQueue.submit(runnable);\n                break;\n            case Threading.SAME_THREAD_POLICY:\n                future = new FutureTask<>(runnable, null);\n                runnable.run();\n                break;\n            default:\n                throw new HaloConfigurationException(\"Unsupported option or an Action operation\");\n        }\n        return future;\n    }", "signature": "Future enqueue(@Threading.Policy int thread, @NonNull Runnable runnable)", "full_signature": "@Override public Future enqueue(@Threading.Policy int thread, @NonNull Runnable runnable)", "class_method_signature": "DefaultThreadManager.enqueue(@Threading.Policy int thread, @NonNull Runnable runnable)", "testcase": false, "constructor": false, "invocations": ["submit", "submit", "run"]}, "repository": {"repo_id": 72189814, "url": "https://github.com/mobgen/halo-android", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 6, "size": 3343, "license": "licensed"}}