{"test_class": {"identifier": "DbTableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedEx = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedEx = ExpectedException.none()", "var_name": "expectedEx"}], "file": "dbfit-java/core/src/test/java/dbfit/api/DbTableTest.java"}, "test_case": {"identifier": "exceptionWhenAccessingNonexistentColumn", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void exceptionWhenAccessingNonexistentColumn() throws SQLException {\n        DBEnvironment env = mock(DBEnvironment.class);\n\n        when(env.getAllColumns(\"mytable\")).thenReturn(columns(\"some_column\"));\n        expectedEx.expect(RuntimeException.class);\n        expectedEx.expectMessage(\"No such database column or parameter: 'nonexistent_column'\");\n\n        new DbTable(env, \"mytable\").getDbParameterAccessor(\"nonexistent_column\", INPUT);\n    }", "signature": "void exceptionWhenAccessingNonexistentColumn()", "full_signature": "@Test public void exceptionWhenAccessingNonexistentColumn()", "class_method_signature": "DbTableTest.exceptionWhenAccessingNonexistentColumn()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getAllColumns", "columns", "expect", "expectMessage", "getDbParameterAccessor"]}, "focal_class": {"identifier": "DbTable", "superclass": "", "interfaces": "implements DbObject", "fields": [{"original_string": "private DBEnvironment dbEnvironment;", "modifier": "private", "type": "DBEnvironment", "declarator": "dbEnvironment", "var_name": "dbEnvironment"}, {"original_string": "private String tableOrViewName;", "modifier": "private", "type": "String", "declarator": "tableOrViewName", "var_name": "tableOrViewName"}, {"original_string": "private Map<String, DbParameterAccessor> columns;", "modifier": "private", "type": "Map<String, DbParameterAccessor>", "declarator": "columns", "var_name": "columns"}], "methods": [{"identifier": "DbTable", "parameters": "(DBEnvironment dbEnvironment, String tableName)", "modifiers": "public", "return": "", "signature": " DbTable(DBEnvironment dbEnvironment, String tableName)", "full_signature": "public  DbTable(DBEnvironment dbEnvironment, String tableName)", "class_method_signature": "DbTable.DbTable(DBEnvironment dbEnvironment, String tableName)", "testcase": false, "constructor": true}, {"identifier": "buildPreparedStatement", "parameters": "(\n            DbParameterAccessor[] accessors)", "modifiers": "public", "return": "StatementExecution", "signature": "StatementExecution buildPreparedStatement(\n            DbParameterAccessor[] accessors)", "full_signature": "public StatementExecution buildPreparedStatement(\n            DbParameterAccessor[] accessors)", "class_method_signature": "DbTable.buildPreparedStatement(\n            DbParameterAccessor[] accessors)", "testcase": false, "constructor": false}, {"identifier": "getDbParameterAccessor", "parameters": "(String columnName,\n            Direction expectedDirection)", "modifiers": "public", "return": "DbParameterAccessor", "signature": "DbParameterAccessor getDbParameterAccessor(String columnName,\n            Direction expectedDirection)", "full_signature": "public DbParameterAccessor getDbParameterAccessor(String columnName,\n            Direction expectedDirection)", "class_method_signature": "DbTable.getDbParameterAccessor(String columnName,\n            Direction expectedDirection)", "testcase": false, "constructor": false}], "file": "dbfit-java/core/src/main/java/dbfit/api/DbTable.java"}, "focal_method": {"identifier": "getDbParameterAccessor", "parameters": "(String columnName,\n            Direction expectedDirection)", "modifiers": "public", "return": "DbParameterAccessor", "body": "public DbParameterAccessor getDbParameterAccessor(String columnName,\n            Direction expectedDirection) {\n        String normalisedName = NameNormaliser.normaliseName(columnName);\n        DbParameterAccessor accessor = columns.get(normalisedName);\n        if (null == accessor) {\n            throw new RuntimeException(\n                    \"No such database column or parameter: '\" + normalisedName + \"'\");\n        }\n\n        if (accessor.hasDirection(INPUT)\n                && expectedDirection == OUTPUT) {\n            accessor = dbEnvironment\n                    .createAutogeneratedPrimaryKeyAccessor(accessor);\n        }\n        return accessor;\n    }", "signature": "DbParameterAccessor getDbParameterAccessor(String columnName,\n            Direction expectedDirection)", "full_signature": "public DbParameterAccessor getDbParameterAccessor(String columnName,\n            Direction expectedDirection)", "class_method_signature": "DbTable.getDbParameterAccessor(String columnName,\n            Direction expectedDirection)", "testcase": false, "constructor": false, "invocations": ["normaliseName", "get", "hasDirection", "createAutogeneratedPrimaryKeyAccessor"]}, "repository": {"repo_id": 7283919, "url": "https://github.com/dbfit/dbfit", "language": "Java", "is_fork": false, "fork_count": 83, "stargazer_count": 181, "size": 6978, "license": "licensed"}}