{"test_class": {"identifier": "VideoDecoderTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "domain/src/test/java/org/m4m/domain/VideoDecoderTest.java"}, "test_case": {"identifier": "mediaCodec_releaseOutputBuffer_doRenderVariableMustBeTrue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mediaCodec_releaseOutputBuffer_doRenderVariableMustBeTrue() {\n        IMediaCodec mediaCodec = create.mediaCodec()\n                .withDequeueOutputBufferIndex(1)\n                .construct();\n        VideoDecoder decoder = create.videoDecoder()\n                .with(mediaCodec)\n                .construct();\n        ISurfaceWrapper surface = create.surfaceContainer().construct();\n\n        decoder.setOutputSurface(surface);\n        decoder.releaseOutputBuffer(1);\n\n        verify(mediaCodec).releaseOutputBuffer(eq(1), eq(true));\n    }", "signature": "void mediaCodec_releaseOutputBuffer_doRenderVariableMustBeTrue()", "full_signature": "@Test public void mediaCodec_releaseOutputBuffer_doRenderVariableMustBeTrue()", "class_method_signature": "VideoDecoderTest.mediaCodec_releaseOutputBuffer_doRenderVariableMustBeTrue()", "testcase": true, "constructor": false, "invocations": ["construct", "withDequeueOutputBufferIndex", "mediaCodec", "construct", "with", "videoDecoder", "construct", "surfaceContainer", "setOutputSurface", "releaseOutputBuffer", "releaseOutputBuffer", "verify", "eq", "eq"]}, "focal_class": {"identifier": "VideoDecoder", "superclass": "extends Decoder", "interfaces": "implements IVideoOutput", "fields": [], "methods": [{"identifier": "VideoDecoder", "parameters": "(IMediaCodec mediaCodec)", "modifiers": "public", "return": "", "signature": " VideoDecoder(IMediaCodec mediaCodec)", "full_signature": "public  VideoDecoder(IMediaCodec mediaCodec)", "class_method_signature": "VideoDecoder.VideoDecoder(IMediaCodec mediaCodec)", "testcase": false, "constructor": true}, {"identifier": "drain", "parameters": "(int bufferIndex)", "modifiers": "@Override public", "return": "void", "signature": "void drain(int bufferIndex)", "full_signature": "@Override public void drain(int bufferIndex)", "class_method_signature": "VideoDecoder.drain(int bufferIndex)", "testcase": false, "constructor": false}, {"identifier": "push", "parameters": "(Frame frame)", "modifiers": "@Override public", "return": "void", "signature": "void push(Frame frame)", "full_signature": "@Override public void push(Frame frame)", "class_method_signature": "VideoDecoder.push(Frame frame)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "VideoDecoder.stop()", "testcase": false, "constructor": false}, {"identifier": "initInputCommandQueue", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void initInputCommandQueue()", "full_signature": "@Override protected void initInputCommandQueue()", "class_method_signature": "VideoDecoder.initInputCommandQueue()", "testcase": false, "constructor": false}, {"identifier": "getOutputResolution", "parameters": "()", "modifiers": "public", "return": "Resolution", "signature": "Resolution getOutputResolution()", "full_signature": "public Resolution getOutputResolution()", "class_method_signature": "VideoDecoder.getOutputResolution()", "testcase": false, "constructor": false}], "file": "domain/src/main/java/org/m4m/domain/VideoDecoder.java"}, "focal_method": {"identifier": "VideoDecoder", "parameters": "(IMediaCodec mediaCodec)", "modifiers": "public", "return": "", "body": "public VideoDecoder(IMediaCodec mediaCodec) {\n        super(mediaCodec, MediaFormatType.VIDEO);\n    }", "signature": " VideoDecoder(IMediaCodec mediaCodec)", "full_signature": "public  VideoDecoder(IMediaCodec mediaCodec)", "class_method_signature": "VideoDecoder.VideoDecoder(IMediaCodec mediaCodec)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 25040346, "url": "https://github.com/INDExOS/media-for-mobile", "language": "Java", "is_fork": false, "fork_count": 167, "stargazer_count": 416, "size": 619, "license": "licensed"}}