{"test_class": {"identifier": "CharScannerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "boolean ok;", "modifier": "", "type": "boolean", "declarator": "ok", "var_name": "ok"}], "file": "reflekt/src/test/java/io/advantageous/boon/primitive/CharScannerTest.java"}, "test_case": {"identifier": "parseInt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseInt() {\n\n        int i =  CharScanner.parseInt( \"-22\".toCharArray() );\n        boolean ok  = i  == -22 || die( \"\" + i);\n\n\n        i =  CharScanner.parseInt( \"22\".toCharArray() );\n        ok  = i  == 22 || die( \"\" + i);\n\n    }", "signature": "void parseInt()", "full_signature": "@Test public void parseInt()", "class_method_signature": "CharScannerTest.parseInt()", "testcase": true, "constructor": false, "invocations": ["parseInt", "toCharArray", "die", "parseInt", "toCharArray", "die"]}, "focal_class": {"identifier": "CharScanner", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final int COMMA = ',';", "modifier": "protected static final", "type": "int", "declarator": "COMMA = ','", "var_name": "COMMA"}, {"original_string": "protected static final int CLOSED_CURLY = '}';", "modifier": "protected static final", "type": "int", "declarator": "CLOSED_CURLY = '}'", "var_name": "CLOSED_CURLY"}, {"original_string": "protected static final int CLOSED_BRACKET = ']';", "modifier": "protected static final", "type": "int", "declarator": "CLOSED_BRACKET = ']'", "var_name": "CLOSED_BRACKET"}, {"original_string": "protected static final int LETTER_E = 'e';", "modifier": "protected static final", "type": "int", "declarator": "LETTER_E = 'e'", "var_name": "LETTER_E"}, {"original_string": "protected static final int LETTER_BIG_E = 'E';", "modifier": "protected static final", "type": "int", "declarator": "LETTER_BIG_E = 'E'", "var_name": "LETTER_BIG_E"}, {"original_string": "protected static final int DECIMAL_POINT = '.';", "modifier": "protected static final", "type": "int", "declarator": "DECIMAL_POINT = '.'", "var_name": "DECIMAL_POINT"}, {"original_string": "private static final int SPACE =  ' ';", "modifier": "private static final", "type": "int", "declarator": "SPACE =  ' '", "var_name": "SPACE"}, {"original_string": "private static final int PIPE = '|';", "modifier": "private static final", "type": "int", "declarator": "PIPE = '|'", "var_name": "PIPE"}, {"original_string": "private static final char[][] EMPTY_CHAR_ARRAY_ARRAY = new char[0][0];", "modifier": "private static final", "type": "char[][]", "declarator": "EMPTY_CHAR_ARRAY_ARRAY = new char[0][0]", "var_name": "EMPTY_CHAR_ARRAY_ARRAY"}, {"original_string": "public static int NEWLINE= '\\n';", "modifier": "public static", "type": "int", "declarator": "NEWLINE= '\\n'", "var_name": "NEWLINE"}, {"original_string": "public static int CARRIAGE_RETURN= '\\r';", "modifier": "public static", "type": "int", "declarator": "CARRIAGE_RETURN= '\\r'", "var_name": "CARRIAGE_RETURN"}, {"original_string": "protected static final int ALPHA_0 = '0';", "modifier": "protected static final", "type": "int", "declarator": "ALPHA_0 = '0'", "var_name": "ALPHA_0"}, {"original_string": "protected static final int ALPHA_1 = '1';", "modifier": "protected static final", "type": "int", "declarator": "ALPHA_1 = '1'", "var_name": "ALPHA_1"}, {"original_string": "protected static final int ALPHA_2 = '2';", "modifier": "protected static final", "type": "int", "declarator": "ALPHA_2 = '2'", "var_name": "ALPHA_2"}, {"original_string": "protected static final int ALPHA_3 = '3';", "modifier": "protected static final", "type": "int", "declarator": "ALPHA_3 = '3'", "var_name": "ALPHA_3"}, {"original_string": "protected static final int ALPHA_4 = '4';", "modifier": "protected static final", "type": "int", "declarator": "ALPHA_4 = '4'", "var_name": "ALPHA_4"}, {"original_string": "protected static final int ALPHA_5 = '5';", "modifier": "protected static final", "type": "int", "declarator": "ALPHA_5 = '5'", "var_name": "ALPHA_5"}, {"original_string": "protected static final int ALPHA_6 = '6';", "modifier": "protected static final", "type": "int", "declarator": "ALPHA_6 = '6'", "var_name": "ALPHA_6"}, {"original_string": "protected static final int ALPHA_7 = '7';", "modifier": "protected static final", "type": "int", "declarator": "ALPHA_7 = '7'", "var_name": "ALPHA_7"}, {"original_string": "protected static final int ALPHA_8 = '8';", "modifier": "protected static final", "type": "int", "declarator": "ALPHA_8 = '8'", "var_name": "ALPHA_8"}, {"original_string": "protected static final int ALPHA_9 = '9';", "modifier": "protected static final", "type": "int", "declarator": "ALPHA_9 = '9'", "var_name": "ALPHA_9"}, {"original_string": "protected static final int MINUS = '-';", "modifier": "protected static final", "type": "int", "declarator": "MINUS = '-'", "var_name": "MINUS"}, {"original_string": "protected static final int PLUS = '+';", "modifier": "protected static final", "type": "int", "declarator": "PLUS = '+'", "var_name": "PLUS"}, {"original_string": "protected static final int DOUBLE_QUOTE = '\"';", "modifier": "protected static final", "type": "int", "declarator": "DOUBLE_QUOTE = '\"'", "var_name": "DOUBLE_QUOTE"}, {"original_string": "protected static final int ESCAPE = '\\\\';", "modifier": "protected static final", "type": "int", "declarator": "ESCAPE = '\\\\'", "var_name": "ESCAPE"}, {"original_string": "final static String MIN_LONG_STR_NO_SIGN = String.valueOf( Long.MIN_VALUE ).substring(1);", "modifier": "final static", "type": "String", "declarator": "MIN_LONG_STR_NO_SIGN = String.valueOf( Long.MIN_VALUE ).substring(1)", "var_name": "MIN_LONG_STR_NO_SIGN"}, {"original_string": "final static String MAX_LONG_STR = String.valueOf( Long.MAX_VALUE );", "modifier": "final static", "type": "String", "declarator": "MAX_LONG_STR = String.valueOf( Long.MAX_VALUE )", "var_name": "MAX_LONG_STR"}, {"original_string": "final static String MIN_INT_STR_NO_SIGN = String.valueOf( Integer.MIN_VALUE ).substring(1);", "modifier": "final static", "type": "String", "declarator": "MIN_INT_STR_NO_SIGN = String.valueOf( Integer.MIN_VALUE ).substring(1)", "var_name": "MIN_INT_STR_NO_SIGN"}, {"original_string": "final static String MAX_INT_STR = String.valueOf( Integer.MAX_VALUE );", "modifier": "final static", "type": "String", "declarator": "MAX_INT_STR = String.valueOf( Integer.MAX_VALUE )", "var_name": "MAX_INT_STR"}, {"original_string": "private static double powersOf10[] = {\n                              1.0,\n                             10.0,\n                            100.0,\n                          1_000.0,\n                         10_000.0,\n                        100_000.0,\n                      1_000_000.0,\n                     10_000_000.0,\n                    100_000_000.0,\n                  1_000_000_000.0,\n                 10_000_000_000.0,\n                100_000_000_000.0,\n              1_000_000_000_000.0,\n             10_000_000_000_000.0,\n            100_000_000_000_000.0,\n          1_000_000_000_000_000.0,\n         10_000_000_000_000_000.0,\n        100_000_000_000_000_000.0,\n      1_000_000_000_000_000_000.0,\n\n    };", "modifier": "private static", "type": "double", "declarator": "powersOf10[] = {\n                              1.0,\n                             10.0,\n                            100.0,\n                          1_000.0,\n                         10_000.0,\n                        100_000.0,\n                      1_000_000.0,\n                     10_000_000.0,\n                    100_000_000.0,\n                  1_000_000_000.0,\n                 10_000_000_000.0,\n                100_000_000_000.0,\n              1_000_000_000_000.0,\n             10_000_000_000_000.0,\n            100_000_000_000_000.0,\n          1_000_000_000_000_000.0,\n         10_000_000_000_000_000.0,\n        100_000_000_000_000_000.0,\n      1_000_000_000_000_000_000.0,\n\n    }", "var_name": "powersOf10"}], "methods": [{"identifier": "isDigit", "parameters": "( int c )", "modifiers": "public static", "return": "boolean", "signature": "boolean isDigit( int c )", "full_signature": "public static boolean isDigit( int c )", "class_method_signature": "CharScanner.isDigit( int c )", "testcase": false, "constructor": false}, {"identifier": "isDecimalDigit", "parameters": "( int c )", "modifiers": "public static", "return": "boolean", "signature": "boolean isDecimalDigit( int c )", "full_signature": "public static boolean isDecimalDigit( int c )", "class_method_signature": "CharScanner.isDecimalDigit( int c )", "testcase": false, "constructor": false}, {"identifier": "isDecimalChar", "parameters": "( int currentChar )", "modifiers": "public static", "return": "boolean", "signature": "boolean isDecimalChar( int currentChar )", "full_signature": "public static boolean isDecimalChar( int currentChar )", "class_method_signature": "CharScanner.isDecimalChar( int currentChar )", "testcase": false, "constructor": false}, {"identifier": "hasDecimalChar", "parameters": "( char[] chars, boolean negative )", "modifiers": "public static", "return": "boolean", "signature": "boolean hasDecimalChar( char[] chars, boolean negative )", "full_signature": "public static boolean hasDecimalChar( char[] chars, boolean negative )", "class_method_signature": "CharScanner.hasDecimalChar( char[] chars, boolean negative )", "testcase": false, "constructor": false}, {"identifier": "isDigits", "parameters": "( final char[] inputArray )", "modifiers": "public static", "return": "boolean", "signature": "boolean isDigits( final char[] inputArray )", "full_signature": "public static boolean isDigits( final char[] inputArray )", "class_method_signature": "CharScanner.isDigits( final char[] inputArray )", "testcase": false, "constructor": false}, {"identifier": "isDigits", "parameters": "( final char[] inputArray, int offset, int len)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDigits( final char[] inputArray, int offset, int len)", "full_signature": "public static boolean isDigits( final char[] inputArray, int offset, int len)", "class_method_signature": "CharScanner.isDigits( final char[] inputArray, int offset, int len)", "testcase": false, "constructor": false}, {"identifier": "splitExact", "parameters": "( final char[] inputArray,\n                                       final char split, final int resultsArrayLength )", "modifiers": "public static", "return": "char[][]", "signature": "char[][] splitExact( final char[] inputArray,\n                                       final char split, final int resultsArrayLength )", "full_signature": "public static char[][] splitExact( final char[] inputArray,\n                                       final char split, final int resultsArrayLength )", "class_method_signature": "CharScanner.splitExact( final char[] inputArray,\n                                       final char split, final int resultsArrayLength )", "testcase": false, "constructor": false}, {"identifier": "splitExact", "parameters": "( final char[] inputArray,\n                                       final int resultsArrayLength, char... delims )", "modifiers": "public static", "return": "char[][]", "signature": "char[][] splitExact( final char[] inputArray,\n                                       final int resultsArrayLength, char... delims )", "full_signature": "public static char[][] splitExact( final char[] inputArray,\n                                       final int resultsArrayLength, char... delims )", "class_method_signature": "CharScanner.splitExact( final char[] inputArray,\n                                       final int resultsArrayLength, char... delims )", "testcase": false, "constructor": false}, {"identifier": "splitLines", "parameters": "( final char[] inputArray)", "modifiers": "public static", "return": "char[][]", "signature": "char[][] splitLines( final char[] inputArray)", "full_signature": "public static char[][] splitLines( final char[] inputArray)", "class_method_signature": "CharScanner.splitLines( final char[] inputArray)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "( final char[] inputArray,\n                                  final char split )", "modifiers": "public static", "return": "char[][]", "signature": "char[][] split( final char[] inputArray,\n                                  final char split )", "full_signature": "public static char[][] split( final char[] inputArray,\n                                  final char split )", "class_method_signature": "CharScanner.split( final char[] inputArray,\n                                  final char split )", "testcase": false, "constructor": false}, {"identifier": "splitFrom", "parameters": "( final char[] inputArray,\n                                  final char split, int from )", "modifiers": "public static", "return": "char[][]", "signature": "char[][] splitFrom( final char[] inputArray,\n                                  final char split, int from )", "full_signature": "public static char[][] splitFrom( final char[] inputArray,\n                                  final char split, int from )", "class_method_signature": "CharScanner.splitFrom( final char[] inputArray,\n                                  final char split, int from )", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "( final char[] inputArray,\n                                  final char split, final int limit )", "modifiers": "public static", "return": "char[][]", "signature": "char[][] split( final char[] inputArray,\n                                  final char split, final int limit )", "full_signature": "public static char[][] split( final char[] inputArray,\n                                  final char split, final int limit )", "class_method_signature": "CharScanner.split( final char[] inputArray,\n                                  final char split, final int limit )", "testcase": false, "constructor": false}, {"identifier": "splitFromStartWithLimit", "parameters": "( final char[] inputArray,\n                                  final char split, final int start,\n                                  final int limit )", "modifiers": "public static", "return": "char[][]", "signature": "char[][] splitFromStartWithLimit( final char[] inputArray,\n                                  final char split, final int start,\n                                  final int limit )", "full_signature": "public static char[][] splitFromStartWithLimit( final char[] inputArray,\n                                  final char split, final int start,\n                                  final int limit )", "class_method_signature": "CharScanner.splitFromStartWithLimit( final char[] inputArray,\n                                  final char split, final int start,\n                                  final int limit )", "testcase": false, "constructor": false}, {"identifier": "splitByChars", "parameters": "( final char[] inputArray,\n                                         final char... delims )", "modifiers": "public static", "return": "char[][]", "signature": "char[][] splitByChars( final char[] inputArray,\n                                         final char... delims )", "full_signature": "public static char[][] splitByChars( final char[] inputArray,\n                                         final char... delims )", "class_method_signature": "CharScanner.splitByChars( final char[] inputArray,\n                                         final char... delims )", "testcase": false, "constructor": false}, {"identifier": "splitByCharsFromToDelims", "parameters": "( final char[] inputArray, int from, int to,\n                                                     final char... delims )", "modifiers": "public static", "return": "char[][]", "signature": "char[][] splitByCharsFromToDelims( final char[] inputArray, int from, int to,\n                                                     final char... delims )", "full_signature": "public static char[][] splitByCharsFromToDelims( final char[] inputArray, int from, int to,\n                                                     final char... delims )", "class_method_signature": "CharScanner.splitByCharsFromToDelims( final char[] inputArray, int from, int to,\n                                                     final char... delims )", "testcase": false, "constructor": false}, {"identifier": "splitByCharsNoneEmpty", "parameters": "( final char[] inputArray,\n                                                  final char... delims )", "modifiers": "public static", "return": "char[][]", "signature": "char[][] splitByCharsNoneEmpty( final char[] inputArray,\n                                                  final char... delims )", "full_signature": "public static char[][] splitByCharsNoneEmpty( final char[] inputArray,\n                                                  final char... delims )", "class_method_signature": "CharScanner.splitByCharsNoneEmpty( final char[] inputArray,\n                                                  final char... delims )", "testcase": false, "constructor": false}, {"identifier": "splitByCharsNoneEmpty", "parameters": "( final char[] inputArray, int from, int to,\n                                                  final char... delims )", "modifiers": "public static", "return": "char[][]", "signature": "char[][] splitByCharsNoneEmpty( final char[] inputArray, int from, int to,\n                                                  final char... delims )", "full_signature": "public static char[][] splitByCharsNoneEmpty( final char[] inputArray, int from, int to,\n                                                  final char... delims )", "class_method_signature": "CharScanner.splitByCharsNoneEmpty( final char[] inputArray, int from, int to,\n                                                  final char... delims )", "testcase": false, "constructor": false}, {"identifier": "compact", "parameters": "( char[][] array )", "modifiers": "public static", "return": "char[][]", "signature": "char[][] compact( char[][] array )", "full_signature": "public static char[][] compact( char[][] array )", "class_method_signature": "CharScanner.compact( char[][] array )", "testcase": false, "constructor": false}, {"identifier": "_grow", "parameters": "( char[][] array )", "modifiers": "private static", "return": "char[][]", "signature": "char[][] _grow( char[][] array )", "full_signature": "private static char[][] _grow( char[][] array )", "class_method_signature": "CharScanner._grow( char[][] array )", "testcase": false, "constructor": false}, {"identifier": "__shrink", "parameters": "( char[][] array, int size )", "modifiers": "private static", "return": "char[][]", "signature": "char[][] __shrink( char[][] array, int size )", "full_signature": "private static char[][] __shrink( char[][] array, int size )", "class_method_signature": "CharScanner.__shrink( char[][] array, int size )", "testcase": false, "constructor": false}, {"identifier": "isLong", "parameters": "( char[] digitChars )", "modifiers": "public static", "return": "boolean", "signature": "boolean isLong( char[] digitChars )", "full_signature": "public static boolean isLong( char[] digitChars )", "class_method_signature": "CharScanner.isLong( char[] digitChars )", "testcase": false, "constructor": false}, {"identifier": "isLong", "parameters": "( char[] digitChars, int offset, int len )", "modifiers": "public static", "return": "boolean", "signature": "boolean isLong( char[] digitChars, int offset, int len )", "full_signature": "public static boolean isLong( char[] digitChars, int offset, int len )", "class_method_signature": "CharScanner.isLong( char[] digitChars, int offset, int len )", "testcase": false, "constructor": false}, {"identifier": "isInteger", "parameters": "( char[] digitChars )", "modifiers": "public static", "return": "boolean", "signature": "boolean isInteger( char[] digitChars )", "full_signature": "public static boolean isInteger( char[] digitChars )", "class_method_signature": "CharScanner.isInteger( char[] digitChars )", "testcase": false, "constructor": false}, {"identifier": "isInteger", "parameters": "( char[] digitChars, int offset, int len)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInteger( char[] digitChars, int offset, int len)", "full_signature": "public static boolean isInteger( char[] digitChars, int offset, int len)", "class_method_signature": "CharScanner.isInteger( char[] digitChars, int offset, int len)", "testcase": false, "constructor": false}, {"identifier": "verifyValueFitsInNumber", "parameters": "(char[] digitChars, int offset, int len, String cmpStr)", "modifiers": "private static", "return": "boolean", "signature": "boolean verifyValueFitsInNumber(char[] digitChars, int offset, int len, String cmpStr)", "full_signature": "private static boolean verifyValueFitsInNumber(char[] digitChars, int offset, int len, String cmpStr)", "class_method_signature": "CharScanner.verifyValueFitsInNumber(char[] digitChars, int offset, int len, String cmpStr)", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "( char[] digitChars )", "modifiers": "public static", "return": "int", "signature": "int parseInt( char[] digitChars )", "full_signature": "public static int parseInt( char[] digitChars )", "class_method_signature": "CharScanner.parseInt( char[] digitChars )", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "(char[] digitChars, int offset, int to)", "modifiers": "public static", "return": "int", "signature": "int parseInt(char[] digitChars, int offset, int to)", "full_signature": "public static int parseInt(char[] digitChars, int offset, int to)", "class_method_signature": "CharScanner.parseInt(char[] digitChars, int offset, int to)", "testcase": false, "constructor": false}, {"identifier": "parseIntFromToIgnoreDot", "parameters": "( char[] digitChars, int offset, int to )", "modifiers": "public static", "return": "int", "signature": "int parseIntFromToIgnoreDot( char[] digitChars, int offset, int to )", "full_signature": "public static int parseIntFromToIgnoreDot( char[] digitChars, int offset, int to )", "class_method_signature": "CharScanner.parseIntFromToIgnoreDot( char[] digitChars, int offset, int to )", "testcase": false, "constructor": false}, {"identifier": "parseLongFromToIgnoreDot", "parameters": "( char[] digitChars, int offset, int to )", "modifiers": "public static", "return": "long", "signature": "long parseLongFromToIgnoreDot( char[] digitChars, int offset, int to )", "full_signature": "public static long parseLongFromToIgnoreDot( char[] digitChars, int offset, int to )", "class_method_signature": "CharScanner.parseLongFromToIgnoreDot( char[] digitChars, int offset, int to )", "testcase": false, "constructor": false}, {"identifier": "parseLong", "parameters": "(char[] digitChars, int offset, int to)", "modifiers": "public static", "return": "long", "signature": "long parseLong(char[] digitChars, int offset, int to)", "full_signature": "public static long parseLong(char[] digitChars, int offset, int to)", "class_method_signature": "CharScanner.parseLong(char[] digitChars, int offset, int to)", "testcase": false, "constructor": false}, {"identifier": "parseLong", "parameters": "( char[] digitChars )", "modifiers": "public static", "return": "long", "signature": "long parseLong( char[] digitChars )", "full_signature": "public static long parseLong( char[] digitChars )", "class_method_signature": "CharScanner.parseLong( char[] digitChars )", "testcase": false, "constructor": false}, {"identifier": "parseJsonNumber", "parameters": "( char[] buffer )", "modifiers": "public static", "return": "Number", "signature": "Number parseJsonNumber( char[] buffer )", "full_signature": "public static Number parseJsonNumber( char[] buffer )", "class_method_signature": "CharScanner.parseJsonNumber( char[] buffer )", "testcase": false, "constructor": false}, {"identifier": "parseJsonNumber", "parameters": "( char[] buffer, int from, int to )", "modifiers": "public static", "return": "Number", "signature": "Number parseJsonNumber( char[] buffer, int from, int to )", "full_signature": "public static Number parseJsonNumber( char[] buffer, int from, int to )", "class_method_signature": "CharScanner.parseJsonNumber( char[] buffer, int from, int to )", "testcase": false, "constructor": false}, {"identifier": "isNumberDigit", "parameters": "(int c)", "modifiers": "public static final", "return": "boolean", "signature": "boolean isNumberDigit(int c)", "full_signature": "public static final boolean isNumberDigit(int c)", "class_method_signature": "CharScanner.isNumberDigit(int c)", "testcase": false, "constructor": false}, {"identifier": "isDelimiter", "parameters": "( int c )", "modifiers": "public static", "return": "boolean", "signature": "boolean isDelimiter( int c )", "full_signature": "public static boolean isDelimiter( int c )", "class_method_signature": "CharScanner.isDelimiter( int c )", "testcase": false, "constructor": false}, {"identifier": "parseJsonNumber", "parameters": "( char[] buffer, int from, int max, int size[] )", "modifiers": "public static", "return": "Number", "signature": "Number parseJsonNumber( char[] buffer, int from, int max, int size[] )", "full_signature": "public static Number parseJsonNumber( char[] buffer, int from, int max, int size[] )", "class_method_signature": "CharScanner.parseJsonNumber( char[] buffer, int from, int max, int size[] )", "testcase": false, "constructor": false}, {"identifier": "parseFloat", "parameters": "( char[] buffer, int from, int to )", "modifiers": "public static", "return": "float", "signature": "float parseFloat( char[] buffer, int from, int to )", "full_signature": "public static float parseFloat( char[] buffer, int from, int to )", "class_method_signature": "CharScanner.parseFloat( char[] buffer, int from, int to )", "testcase": false, "constructor": false}, {"identifier": "parseFloat", "parameters": "( char[] buffer )", "modifiers": "public static", "return": "float", "signature": "float parseFloat( char[] buffer )", "full_signature": "public static float parseFloat( char[] buffer )", "class_method_signature": "CharScanner.parseFloat( char[] buffer )", "testcase": false, "constructor": false}, {"identifier": "parseDouble", "parameters": "( char[] buffer )", "modifiers": "public static", "return": "double", "signature": "double parseDouble( char[] buffer )", "full_signature": "public static double parseDouble( char[] buffer )", "class_method_signature": "CharScanner.parseDouble( char[] buffer )", "testcase": false, "constructor": false}, {"identifier": "parseDouble", "parameters": "( char[] buffer, int from, int to )", "modifiers": "public static", "return": "double", "signature": "double parseDouble( char[] buffer, int from, int to )", "full_signature": "public static double parseDouble( char[] buffer, int from, int to )", "class_method_signature": "CharScanner.parseDouble( char[] buffer, int from, int to )", "testcase": false, "constructor": false}, {"identifier": "skipWhiteSpace", "parameters": "( char [] array)", "modifiers": "public static", "return": "int", "signature": "int skipWhiteSpace( char [] array)", "full_signature": "public static int skipWhiteSpace( char [] array)", "class_method_signature": "CharScanner.skipWhiteSpace( char [] array)", "testcase": false, "constructor": false}, {"identifier": "skipWhiteSpace", "parameters": "( char [] array, int index )", "modifiers": "public static", "return": "int", "signature": "int skipWhiteSpace( char [] array, int index )", "full_signature": "public static int skipWhiteSpace( char [] array, int index )", "class_method_signature": "CharScanner.skipWhiteSpace( char [] array, int index )", "testcase": false, "constructor": false}, {"identifier": "skipWhiteSpace", "parameters": "( char [] array, int index, final int length )", "modifiers": "public static", "return": "int", "signature": "int skipWhiteSpace( char [] array, int index, final int length )", "full_signature": "public static int skipWhiteSpace( char [] array, int index, final int length )", "class_method_signature": "CharScanner.skipWhiteSpace( char [] array, int index, final int length )", "testcase": false, "constructor": false}, {"identifier": "readNumber", "parameters": "( char[] array, int idx )", "modifiers": "public static", "return": "char[]", "signature": "char[] readNumber( char[] array, int idx )", "full_signature": "public static char[] readNumber( char[] array, int idx )", "class_method_signature": "CharScanner.readNumber( char[] array, int idx )", "testcase": false, "constructor": false}, {"identifier": "readNumber", "parameters": "( char[] array, int idx, final int len )", "modifiers": "public static", "return": "char[]", "signature": "char[] readNumber( char[] array, int idx, final int len )", "full_signature": "public static char[] readNumber( char[] array, int idx, final int len )", "class_method_signature": "CharScanner.readNumber( char[] array, int idx, final int len )", "testcase": false, "constructor": false}, {"identifier": "skipWhiteSpaceFast", "parameters": "( char [] array )", "modifiers": "public static", "return": "int", "signature": "int skipWhiteSpaceFast( char [] array )", "full_signature": "public static int skipWhiteSpaceFast( char [] array )", "class_method_signature": "CharScanner.skipWhiteSpaceFast( char [] array )", "testcase": false, "constructor": false}, {"identifier": "skipWhiteSpaceFast", "parameters": "( char [] array, int index )", "modifiers": "public static", "return": "int", "signature": "int skipWhiteSpaceFast( char [] array, int index )", "full_signature": "public static int skipWhiteSpaceFast( char [] array, int index )", "class_method_signature": "CharScanner.skipWhiteSpaceFast( char [] array, int index )", "testcase": false, "constructor": false}, {"identifier": "errorDetails", "parameters": "( String message, char[] array, int index, int ch )", "modifiers": "public static", "return": "String", "signature": "String errorDetails( String message, char[] array, int index, int ch )", "full_signature": "public static String errorDetails( String message, char[] array, int index, int ch )", "class_method_signature": "CharScanner.errorDetails( String message, char[] array, int index, int ch )", "testcase": false, "constructor": false}, {"identifier": "debugCharDescription", "parameters": "( int c )", "modifiers": "public static", "return": "String", "signature": "String debugCharDescription( int c )", "full_signature": "public static String debugCharDescription( int c )", "class_method_signature": "CharScanner.debugCharDescription( int c )", "testcase": false, "constructor": false}, {"identifier": "isDoubleQuote", "parameters": "( int c )", "modifiers": "public static final", "return": "boolean", "signature": "boolean isDoubleQuote( int c )", "full_signature": "public static final boolean isDoubleQuote( int c )", "class_method_signature": "CharScanner.isDoubleQuote( int c )", "testcase": false, "constructor": false}, {"identifier": "isEscape", "parameters": "( int c )", "modifiers": "public static final", "return": "boolean", "signature": "boolean isEscape( int c )", "full_signature": "public static final boolean isEscape( int c )", "class_method_signature": "CharScanner.isEscape( int c )", "testcase": false, "constructor": false}, {"identifier": "hasEscapeChar", "parameters": "(char []array, int index, int[] indexHolder)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasEscapeChar(char []array, int index, int[] indexHolder)", "full_signature": "public static boolean hasEscapeChar(char []array, int index, int[] indexHolder)", "class_method_signature": "CharScanner.hasEscapeChar(char []array, int index, int[] indexHolder)", "testcase": false, "constructor": false}, {"identifier": "findEndQuote", "parameters": "(final char[] array,  int index)", "modifiers": "public static", "return": "int", "signature": "int findEndQuote(final char[] array,  int index)", "full_signature": "public static int findEndQuote(final char[] array,  int index)", "class_method_signature": "CharScanner.findEndQuote(final char[] array,  int index)", "testcase": false, "constructor": false}, {"identifier": "splitComma", "parameters": "(char[] inputArray)", "modifiers": "public static", "return": "char[][]", "signature": "char[][] splitComma(char[] inputArray)", "full_signature": "public static char[][] splitComma(char[] inputArray)", "class_method_signature": "CharScanner.splitComma(char[] inputArray)", "testcase": false, "constructor": false}, {"identifier": "splitBySpace", "parameters": "( char[] inputArray)", "modifiers": "public static", "return": "char[][]", "signature": "char[][] splitBySpace( char[] inputArray)", "full_signature": "public static char[][] splitBySpace( char[] inputArray)", "class_method_signature": "CharScanner.splitBySpace( char[] inputArray)", "testcase": false, "constructor": false}, {"identifier": "splitByChar", "parameters": "(int splitChar, char[] inputArray)", "modifiers": "public static", "return": "char[][]", "signature": "char[][] splitByChar(int splitChar, char[] inputArray)", "full_signature": "public static char[][] splitByChar(int splitChar, char[] inputArray)", "class_method_signature": "CharScanner.splitByChar(int splitChar, char[] inputArray)", "testcase": false, "constructor": false}, {"identifier": "findChar", "parameters": "(char c, char[] line)", "modifiers": "public static", "return": "int", "signature": "int findChar(char c, char[] line)", "full_signature": "public static int findChar(char c, char[] line)", "class_method_signature": "CharScanner.findChar(char c, char[] line)", "testcase": false, "constructor": false}, {"identifier": "findWhiteSpace", "parameters": "(char[] line)", "modifiers": "public static", "return": "int", "signature": "int findWhiteSpace(char[] line)", "full_signature": "public static int findWhiteSpace(char[] line)", "class_method_signature": "CharScanner.findWhiteSpace(char[] line)", "testcase": false, "constructor": false}, {"identifier": "findWhiteSpace", "parameters": "( int start, char[] line)", "modifiers": "public static", "return": "int", "signature": "int findWhiteSpace( int start, char[] line)", "full_signature": "public static int findWhiteSpace( int start, char[] line)", "class_method_signature": "CharScanner.findWhiteSpace( int start, char[] line)", "testcase": false, "constructor": false}, {"identifier": "findChar", "parameters": "(char c, int startIndex, char[] line)", "modifiers": "public static", "return": "int", "signature": "int findChar(char c, int startIndex, char[] line)", "full_signature": "public static int findChar(char c, int startIndex, char[] line)", "class_method_signature": "CharScanner.findChar(char c, int startIndex, char[] line)", "testcase": false, "constructor": false}, {"identifier": "findString", "parameters": "(String matchString, int startIndex, char[] line)", "modifiers": "public static", "return": "int", "signature": "int findString(String matchString, int startIndex, char[] line)", "full_signature": "public static int findString(String matchString, int startIndex, char[] line)", "class_method_signature": "CharScanner.findString(String matchString, int startIndex, char[] line)", "testcase": false, "constructor": false}, {"identifier": "findString", "parameters": "(String matchString, char[] line)", "modifiers": "public static", "return": "int", "signature": "int findString(String matchString, char[] line)", "full_signature": "public static int findString(String matchString, char[] line)", "class_method_signature": "CharScanner.findString(String matchString, char[] line)", "testcase": false, "constructor": false}, {"identifier": "findChars", "parameters": "(char[] matchChars, char[] line)", "modifiers": "public static", "return": "int", "signature": "int findChars(char[] matchChars, char[] line)", "full_signature": "public static int findChars(char[] matchChars, char[] line)", "class_method_signature": "CharScanner.findChars(char[] matchChars, char[] line)", "testcase": false, "constructor": false}, {"identifier": "matchChars", "parameters": "(char[] matchChars, int startIndex, char[] line)", "modifiers": "public static", "return": "boolean", "signature": "boolean matchChars(char[] matchChars, int startIndex, char[] line)", "full_signature": "public static boolean matchChars(char[] matchChars, int startIndex, char[] line)", "class_method_signature": "CharScanner.matchChars(char[] matchChars, int startIndex, char[] line)", "testcase": false, "constructor": false}, {"identifier": "findChars", "parameters": "(char[] matchChars, int startIndex, char[] line)", "modifiers": "public static", "return": "int", "signature": "int findChars(char[] matchChars, int startIndex, char[] line)", "full_signature": "public static int findChars(char[] matchChars, int startIndex, char[] line)", "class_method_signature": "CharScanner.findChars(char[] matchChars, int startIndex, char[] line)", "testcase": false, "constructor": false}, {"identifier": "splitByPipe", "parameters": "(char[] inputArray)", "modifiers": "public static", "return": "char[][]", "signature": "char[][] splitByPipe(char[] inputArray)", "full_signature": "public static char[][] splitByPipe(char[] inputArray)", "class_method_signature": "CharScanner.splitByPipe(char[] inputArray)", "testcase": false, "constructor": false}], "file": "reflekt/src/main/java/io/advantageous/boon/primitive/CharScanner.java"}, "focal_method": {"identifier": "parseInt", "parameters": "( char[] digitChars )", "modifiers": "public static", "return": "int", "body": "public static int parseInt( char[] digitChars ) {\n        return parseInt(digitChars, 0, digitChars.length);\n    }", "signature": "int parseInt( char[] digitChars )", "full_signature": "public static int parseInt( char[] digitChars )", "class_method_signature": "CharScanner.parseInt( char[] digitChars )", "testcase": false, "constructor": false, "invocations": ["parseInt"]}, "repository": {"repo_id": 33015857, "url": "https://github.com/advantageous/boon", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 18, "size": 6174, "license": "licensed"}}