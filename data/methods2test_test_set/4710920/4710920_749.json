{"test_class": {"identifier": "ReferenceConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Reference(methods = {@Method(name = \"sayHello\", timeout = 1300, retries = 4, loadbalance = \"random\", async = true,\n            actives = 3, executes = 5, deprecated = true, sticky = true, oninvoke = \"i\", onthrow = \"t\", onreturn = \"r\", cache = \"c\", validation = \"v\",\n            arguments = {@Argument(index = 24, callback = true, type = \"sss\")})})\n    private InnerTest innerTest;", "modifier": "@Reference(methods = {@Method(name = \"sayHello\", timeout = 1300, retries = 4, loadbalance = \"random\", async = true,\n            actives = 3, executes = 5, deprecated = true, sticky = true, oninvoke = \"i\", onthrow = \"t\", onreturn = \"r\", cache = \"c\", validation = \"v\",\n            arguments = {@Argument(index = 24, callback = true, type = \"sss\")})})\n    private", "type": "InnerTest", "declarator": "innerTest", "var_name": "innerTest"}], "file": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java"}, "test_case": {"identifier": "testReferenceRetry", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReferenceRetry() {\n        ApplicationConfig application = new ApplicationConfig();\n        application.setName(\"test-reference-retry\");\n        RegistryConfig registry = new RegistryConfig();\n        registry.setAddress(\"multicast://224.5.6.7:1234\");\n        ProtocolConfig protocol = new ProtocolConfig();\n        protocol.setName(\"mockprotocol\");\n\n        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();\n        rc.setApplication(application);\n        rc.setRegistry(registry);\n        rc.setInterface(DemoService.class.getName());\n\n        boolean success = false;\n        DemoService demoService = null;\n        try {\n            demoService = rc.get();\n            success = true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        Assertions.assertFalse(success);\n        Assertions.assertNull(demoService);\n\n        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();\n        sc.setInterface(DemoService.class);\n        sc.setRef(new DemoServiceImpl());\n        sc.setApplication(application);\n        sc.setRegistry(registry);\n        sc.setProtocol(protocol);\n\n        try {\n            System.setProperty(\"java.net.preferIPv4Stack\", \"true\");\n            sc.export();\n            demoService = rc.get();\n            success = true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            System.clearProperty(\"java.net.preferIPv4Stack\");\n        }\n        Assertions.assertTrue(success);\n        Assertions.assertNotNull(demoService);\n\n    }", "signature": "void testReferenceRetry()", "full_signature": "@Test public void testReferenceRetry()", "class_method_signature": "ReferenceConfigTest.testReferenceRetry()", "testcase": true, "constructor": false, "invocations": ["setName", "setAddress", "setName", "setApplication", "setRegistry", "setInterface", "getName", "get", "printStackTrace", "assertFalse", "assertNull", "setInterface", "setRef", "setApplication", "setRegistry", "setProtocol", "setProperty", "export", "get", "printStackTrace", "clearProperty", "assertTrue", "assertNotNull"]}, "focal_class": {"identifier": "ReferenceConfig", "superclass": "extends ReferenceConfigBase<T>", "interfaces": "", "fields": [{"original_string": "public static final Logger logger = LoggerFactory.getLogger(ReferenceConfig.class);", "modifier": "public static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ReferenceConfig.class)", "var_name": "logger"}, {"original_string": "private static final Protocol REF_PROTOCOL = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();", "modifier": "private static final", "type": "Protocol", "declarator": "REF_PROTOCOL = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension()", "var_name": "REF_PROTOCOL"}, {"original_string": "private static final Cluster CLUSTER = ExtensionLoader.getExtensionLoader(Cluster.class).getAdaptiveExtension();", "modifier": "private static final", "type": "Cluster", "declarator": "CLUSTER = ExtensionLoader.getExtensionLoader(Cluster.class).getAdaptiveExtension()", "var_name": "CLUSTER"}, {"original_string": "private static final ProxyFactory PROXY_FACTORY = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();", "modifier": "private static final", "type": "ProxyFactory", "declarator": "PROXY_FACTORY = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension()", "var_name": "PROXY_FACTORY"}, {"original_string": "private transient volatile T ref;", "modifier": "private transient volatile", "type": "T", "declarator": "ref", "var_name": "ref"}, {"original_string": "private transient volatile Invoker<?> invoker;", "modifier": "private transient volatile", "type": "Invoker<?>", "declarator": "invoker", "var_name": "invoker"}, {"original_string": "private transient volatile boolean initialized;", "modifier": "private transient volatile", "type": "boolean", "declarator": "initialized", "var_name": "initialized"}, {"original_string": "private transient volatile boolean destroyed;", "modifier": "private transient volatile", "type": "boolean", "declarator": "destroyed", "var_name": "destroyed"}, {"original_string": "private final ServiceRepository repository;", "modifier": "private final", "type": "ServiceRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private DubboBootstrap bootstrap;", "modifier": "private", "type": "DubboBootstrap", "declarator": "bootstrap", "var_name": "bootstrap"}, {"original_string": "private String services;", "modifier": "private", "type": "String", "declarator": "services", "var_name": "services"}], "methods": [{"identifier": "ReferenceConfig", "parameters": "()", "modifiers": "public", "return": "", "signature": " ReferenceConfig()", "full_signature": "public  ReferenceConfig()", "class_method_signature": "ReferenceConfig.ReferenceConfig()", "testcase": false, "constructor": true}, {"identifier": "ReferenceConfig", "parameters": "(Reference reference)", "modifiers": "public", "return": "", "signature": " ReferenceConfig(Reference reference)", "full_signature": "public  ReferenceConfig(Reference reference)", "class_method_signature": "ReferenceConfig.ReferenceConfig(Reference reference)", "testcase": false, "constructor": true}, {"identifier": "getServices", "parameters": "()", "modifiers": "@Parameter(key = SUBSCRIBED_SERVICE_NAMES_KEY) public", "return": "String", "signature": "String getServices()", "full_signature": "@Parameter(key = SUBSCRIBED_SERVICE_NAMES_KEY) public String getServices()", "class_method_signature": "ReferenceConfig.getServices()", "testcase": false, "constructor": false}, {"identifier": "getSubscribedServices", "parameters": "()", "modifiers": "@Parameter(excluded = true) public", "return": "Set<String>", "signature": "Set<String> getSubscribedServices()", "full_signature": "@Parameter(excluded = true) public Set<String> getSubscribedServices()", "class_method_signature": "ReferenceConfig.getSubscribedServices()", "testcase": false, "constructor": false}, {"identifier": "setServices", "parameters": "(String services)", "modifiers": "public", "return": "void", "signature": "void setServices(String services)", "full_signature": "public void setServices(String services)", "class_method_signature": "ReferenceConfig.setServices(String services)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "public synchronized", "return": "T", "signature": "T get()", "full_signature": "public synchronized T get()", "class_method_signature": "ReferenceConfig.get()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void destroy()", "full_signature": "public synchronized void destroy()", "class_method_signature": "ReferenceConfig.destroy()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void init()", "full_signature": "public synchronized void init()", "class_method_signature": "ReferenceConfig.init()", "testcase": false, "constructor": false}, {"identifier": "createProxy", "parameters": "(Map<String, String> map)", "modifiers": "@SuppressWarnings({\"unchecked\", \"rawtypes\", \"deprecation\"}) private", "return": "T", "signature": "T createProxy(Map<String, String> map)", "full_signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\", \"deprecation\"}) private T createProxy(Map<String, String> map)", "class_method_signature": "ReferenceConfig.createProxy(Map<String, String> map)", "testcase": false, "constructor": false}, {"identifier": "checkInvokerAvailable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkInvokerAvailable()", "full_signature": "private void checkInvokerAvailable()", "class_method_signature": "ReferenceConfig.checkInvokerAvailable()", "testcase": false, "constructor": false}, {"identifier": "checkAndUpdateSubConfigs", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void checkAndUpdateSubConfigs()", "full_signature": "public void checkAndUpdateSubConfigs()", "class_method_signature": "ReferenceConfig.checkAndUpdateSubConfigs()", "testcase": false, "constructor": false}, {"identifier": "shouldJvmRefer", "parameters": "(Map<String, String> map)", "modifiers": "protected", "return": "boolean", "signature": "boolean shouldJvmRefer(Map<String, String> map)", "full_signature": "protected boolean shouldJvmRefer(Map<String, String> map)", "class_method_signature": "ReferenceConfig.shouldJvmRefer(Map<String, String> map)", "testcase": false, "constructor": false}, {"identifier": "dispatch", "parameters": "(Event event)", "modifiers": "protected", "return": "void", "signature": "void dispatch(Event event)", "full_signature": "protected void dispatch(Event event)", "class_method_signature": "ReferenceConfig.dispatch(Event event)", "testcase": false, "constructor": false}, {"identifier": "getBootstrap", "parameters": "()", "modifiers": "public", "return": "DubboBootstrap", "signature": "DubboBootstrap getBootstrap()", "full_signature": "public DubboBootstrap getBootstrap()", "class_method_signature": "ReferenceConfig.getBootstrap()", "testcase": false, "constructor": false}, {"identifier": "setBootstrap", "parameters": "(DubboBootstrap bootstrap)", "modifiers": "public", "return": "void", "signature": "void setBootstrap(DubboBootstrap bootstrap)", "full_signature": "public void setBootstrap(DubboBootstrap bootstrap)", "class_method_signature": "ReferenceConfig.setBootstrap(DubboBootstrap bootstrap)", "testcase": false, "constructor": false}, {"identifier": "postProcessConfig", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void postProcessConfig()", "full_signature": "private void postProcessConfig()", "class_method_signature": "ReferenceConfig.postProcessConfig()", "testcase": false, "constructor": false}, {"identifier": "getInvoker", "parameters": "()", "modifiers": "", "return": "Invoker<?>", "signature": "Invoker<?> getInvoker()", "full_signature": " Invoker<?> getInvoker()", "class_method_signature": "ReferenceConfig.getInvoker()", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "public synchronized", "return": "T", "body": "public synchronized T get() {\n        if (destroyed) {\n            throw new IllegalStateException(\"The invoker of ReferenceConfig(\" + url + \") has already destroyed!\");\n        }\n        if (ref == null) {\n            init();\n        }\n        return ref;\n    }", "signature": "T get()", "full_signature": "public synchronized T get()", "class_method_signature": "ReferenceConfig.get()", "testcase": false, "constructor": false, "invocations": ["init"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}