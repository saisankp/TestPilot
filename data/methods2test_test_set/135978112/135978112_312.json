{"test_class": {"identifier": "KGroupedTableImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private File stateDir;", "modifier": "private", "type": "File", "declarator": "stateDir", "var_name": "stateDir"}], "file": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedTableImplTest.java"}, "test_case": {"identifier": "testGroupedCountOccurences", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testGroupedCountOccurences() throws IOException {\n        final KStreamBuilder builder = new KStreamBuilder();\n        final String input = \"count-test-input\";\n        final MockProcessorSupplier processorSupplier = new MockProcessorSupplier<>();\n\n        builder.table(Serdes.String(), Serdes.String(), input)\n                .groupBy(new KeyValueMapper<String, String, KeyValue<String, String>>() {\n                    @Override\n                    public KeyValue<String, String> apply(final String key, final String value) {\n                        return new KeyValue<>(value, value);\n                    }\n                }, Serdes.String(), Serdes.String())\n                .count(\"count\")\n                .toStream()\n                .process(processorSupplier);\n\n\n        final KStreamTestDriver driver = new KStreamTestDriver(builder, stateDir);\n\n\n        driver.process(input, \"A\", \"green\");\n        driver.process(input, \"B\", \"green\");\n        driver.process(input, \"A\", \"blue\");\n        driver.process(input, \"C\", \"yellow\");\n        driver.process(input, \"D\", \"green\");\n\n        final List<String> expected = Arrays.asList(\"green:1\", \"green:2\", \"blue:1\", \"green:1\", \"yellow:1\", \"green:2\");\n        final List<String> actual = processorSupplier.processed;\n        assertEquals(expected, actual);\n    }", "signature": "void testGroupedCountOccurences()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testGroupedCountOccurences()", "class_method_signature": "KGroupedTableImplTest.testGroupedCountOccurences()", "testcase": true, "constructor": false, "invocations": ["process", "toStream", "count", "groupBy", "table", "String", "String", "String", "String", "process", "process", "process", "process", "process", "asList", "assertEquals"]}, "focal_class": {"identifier": "KGroupedTableImpl", "superclass": "extends AbstractStream<K>", "interfaces": "implements KGroupedTable<K, V>", "fields": [{"original_string": "private static final String AGGREGATE_NAME = \"KTABLE-AGGREGATE-\";", "modifier": "private static final", "type": "String", "declarator": "AGGREGATE_NAME = \"KTABLE-AGGREGATE-\"", "var_name": "AGGREGATE_NAME"}, {"original_string": "private static final String REDUCE_NAME = \"KTABLE-REDUCE-\";", "modifier": "private static final", "type": "String", "declarator": "REDUCE_NAME = \"KTABLE-REDUCE-\"", "var_name": "REDUCE_NAME"}, {"original_string": "private static final String REPARTITION_TOPIC_SUFFIX = \"-repartition\";", "modifier": "private static final", "type": "String", "declarator": "REPARTITION_TOPIC_SUFFIX = \"-repartition\"", "var_name": "REPARTITION_TOPIC_SUFFIX"}, {"original_string": "protected final Serde<K> keySerde;", "modifier": "protected final", "type": "Serde<K>", "declarator": "keySerde", "var_name": "keySerde"}, {"original_string": "protected final Serde<V> valSerde;", "modifier": "protected final", "type": "Serde<V>", "declarator": "valSerde", "var_name": "valSerde"}], "methods": [{"identifier": "KGroupedTableImpl", "parameters": "(KStreamBuilder topology,\n                             String name,\n                             String sourceName,\n                             Serde<K> keySerde,\n                             Serde<V> valSerde)", "modifiers": "public", "return": "", "signature": " KGroupedTableImpl(KStreamBuilder topology,\n                             String name,\n                             String sourceName,\n                             Serde<K> keySerde,\n                             Serde<V> valSerde)", "full_signature": "public  KGroupedTableImpl(KStreamBuilder topology,\n                             String name,\n                             String sourceName,\n                             Serde<K> keySerde,\n                             Serde<V> valSerde)", "class_method_signature": "KGroupedTableImpl.KGroupedTableImpl(KStreamBuilder topology,\n                             String name,\n                             String sourceName,\n                             Serde<K> keySerde,\n                             Serde<V> valSerde)", "testcase": false, "constructor": true}, {"identifier": "aggregate", "parameters": "(Initializer<T> initializer,\n                                      Aggregator<K, V, T> adder,\n                                      Aggregator<K, V, T> subtractor,\n                                      Serde<T> aggValueSerde,\n                                      String name)", "modifiers": "@Override public", "return": "KTable<K, T>", "signature": "KTable<K, T> aggregate(Initializer<T> initializer,\n                                      Aggregator<K, V, T> adder,\n                                      Aggregator<K, V, T> subtractor,\n                                      Serde<T> aggValueSerde,\n                                      String name)", "full_signature": "@Override public KTable<K, T> aggregate(Initializer<T> initializer,\n                                      Aggregator<K, V, T> adder,\n                                      Aggregator<K, V, T> subtractor,\n                                      Serde<T> aggValueSerde,\n                                      String name)", "class_method_signature": "KGroupedTableImpl.aggregate(Initializer<T> initializer,\n                                      Aggregator<K, V, T> adder,\n                                      Aggregator<K, V, T> subtractor,\n                                      Serde<T> aggValueSerde,\n                                      String name)", "testcase": false, "constructor": false}, {"identifier": "aggregate", "parameters": "(Initializer<T> initializer,\n                            Aggregator<K, V, T> adder,\n                            Aggregator<K, V, T> substractor,\n                            String name)", "modifiers": "@Override public", "return": "KTable<K, T>", "signature": "KTable<K, T> aggregate(Initializer<T> initializer,\n                            Aggregator<K, V, T> adder,\n                            Aggregator<K, V, T> substractor,\n                            String name)", "full_signature": "@Override public KTable<K, T> aggregate(Initializer<T> initializer,\n                            Aggregator<K, V, T> adder,\n                            Aggregator<K, V, T> substractor,\n                            String name)", "class_method_signature": "KGroupedTableImpl.aggregate(Initializer<T> initializer,\n                            Aggregator<K, V, T> adder,\n                            Aggregator<K, V, T> substractor,\n                            String name)", "testcase": false, "constructor": false}, {"identifier": "doAggregate", "parameters": "(ProcessorSupplier<K, Change<V>> aggregateSupplier,\n                                         Serde<T> aggValueSerde,\n                                         String functionName,\n                                         String name)", "modifiers": "private", "return": "KTable<K, T>", "signature": "KTable<K, T> doAggregate(ProcessorSupplier<K, Change<V>> aggregateSupplier,\n                                         Serde<T> aggValueSerde,\n                                         String functionName,\n                                         String name)", "full_signature": "private KTable<K, T> doAggregate(ProcessorSupplier<K, Change<V>> aggregateSupplier,\n                                         Serde<T> aggValueSerde,\n                                         String functionName,\n                                         String name)", "class_method_signature": "KGroupedTableImpl.doAggregate(ProcessorSupplier<K, Change<V>> aggregateSupplier,\n                                         Serde<T> aggValueSerde,\n                                         String functionName,\n                                         String name)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(Reducer<V> adder,\n                               Reducer<V> subtractor,\n                               String name)", "modifiers": "@Override public", "return": "KTable<K, V>", "signature": "KTable<K, V> reduce(Reducer<V> adder,\n                               Reducer<V> subtractor,\n                               String name)", "full_signature": "@Override public KTable<K, V> reduce(Reducer<V> adder,\n                               Reducer<V> subtractor,\n                               String name)", "class_method_signature": "KGroupedTableImpl.reduce(Reducer<V> adder,\n                               Reducer<V> subtractor,\n                               String name)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(String name)", "modifiers": "@Override public", "return": "KTable<K, Long>", "signature": "KTable<K, Long> count(String name)", "full_signature": "@Override public KTable<K, Long> count(String name)", "class_method_signature": "KGroupedTableImpl.count(String name)", "testcase": false, "constructor": false}], "file": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KGroupedTableImpl.java"}, "focal_method": {"identifier": "count", "parameters": "(String name)", "modifiers": "@Override public", "return": "KTable<K, Long>", "body": "@Override\n    public KTable<K, Long> count(String name) {\n        return this.aggregate(\n                new Initializer<Long>() {\n                    @Override\n                    public Long apply() {\n                        return 0L;\n                    }\n                },\n                new Aggregator<K, V, Long>() {\n                    @Override\n                    public Long apply(K aggKey, V value, Long aggregate) {\n                        return aggregate + 1L;\n                    }\n                }, new Aggregator<K, V, Long>() {\n                    @Override\n                    public Long apply(K aggKey, V value, Long aggregate) {\n                        return aggregate - 1L;\n                    }\n                },\n                Serdes.Long(), name);\n    }", "signature": "KTable<K, Long> count(String name)", "full_signature": "@Override public KTable<K, Long> count(String name)", "class_method_signature": "KGroupedTableImpl.count(String name)", "testcase": false, "constructor": false, "invocations": ["aggregate", "Long"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}