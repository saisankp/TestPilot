{"test_class": {"identifier": "CheckpointSchedulerActionTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private IRecoverStrategy recoverStrategy;", "modifier": "private", "type": "IRecoverStrategy", "declarator": "recoverStrategy", "var_name": "recoverStrategy"}, {"original_string": "private IAction failureAction;", "modifier": "private", "type": "IAction", "declarator": "failureAction", "var_name": "failureAction"}, {"original_string": "private ISchedulerEntry entryMock;", "modifier": "private", "type": "ISchedulerEntry", "declarator": "entryMock", "var_name": "entryMock"}, {"original_string": "private IObject entryState;", "modifier": "private", "type": "IObject", "declarator": "entryState", "var_name": "entryState"}, {"original_string": "private String entryId;", "modifier": "private", "type": "String", "declarator": "entryId", "var_name": "entryId"}, {"original_string": "private IMessageBusHandler messageBusHandlerMock;", "modifier": "private", "type": "IMessageBusHandler", "declarator": "messageBusHandlerMock", "var_name": "messageBusHandlerMock"}, {"original_string": "private Object chainId = new Object();", "modifier": "private", "type": "Object", "declarator": "chainId = new Object()", "var_name": "chainId"}], "file": "CoreFeatures/Checkpoint/CheckpointActor/src/test/java/info/smart_tools/smartactors/checkpoint/checkpoint_actor/CheckpointSchedulerActionTest.java"}, "test_case": {"identifier": "Should_notSendMessageIfEntryIsMarkedAsCompleted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_notSendMessageIfEntryIsMarkedAsCompleted()\n            throws Exception {\n        IObject entryState = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"),\n                (\"{'recoverStrategy':'the recover strategy',\" +\n                        \"'message':{'a':'1'},\" +\n                        \"'responsibleCheckpointId':'rCP',\" +\n                        \"'prevCheckpointId':'prCP',\" +\n                        \"'prevCheckpointEntryId':'pcpEi',\" +\n                        \"'completed':true,\" +\n                        \"'gotFeedback':true}\").replace('\\'','\"'));\n\n        when(entryMock.getState()).thenReturn(entryState);\n\n        CheckpointSchedulerAction action = new CheckpointSchedulerAction();\n\n        action.execute(entryMock);\n\n        verify(messageBusHandlerMock, never()).handle(any(), any());\n    }", "signature": "void Should_notSendMessageIfEntryIsMarkedAsCompleted()", "full_signature": "@Test public void Should_notSendMessageIfEntryIsMarkedAsCompleted()", "class_method_signature": "CheckpointSchedulerActionTest.Should_notSendMessageIfEntryIsMarkedAsCompleted()", "testcase": true, "constructor": false, "invocations": ["resolve", "getOrAdd", "replace", "thenReturn", "when", "getState", "execute", "handle", "verify", "never", "any", "any"]}, "focal_class": {"identifier": "CheckpointSchedulerAction", "superclass": "", "interfaces": "implements ISchedulerAction", "fields": [{"original_string": "private final IFieldName recoverFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "recoverFieldName", "var_name": "recoverFieldName"}, {"original_string": "private final IFieldName strategyFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "strategyFieldName", "var_name": "strategyFieldName"}, {"original_string": "private final IFieldName recoverStrategyFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "recoverStrategyFieldName", "var_name": "recoverStrategyFieldName"}, {"original_string": "private final IFieldName messageFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "messageFieldName", "var_name": "messageFieldName"}, {"original_string": "private final IFieldName completedFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "completedFieldName", "var_name": "completedFieldName"}, {"original_string": "private final IFieldName gotFeedbackFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "gotFeedbackFieldName", "var_name": "gotFeedbackFieldName"}, {"original_string": "private final IFieldName responsibleCheckpointIdFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "responsibleCheckpointIdFieldName", "var_name": "responsibleCheckpointIdFieldName"}, {"original_string": "private final IFieldName prevCheckpointEntryIdFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "prevCheckpointEntryIdFieldName", "var_name": "prevCheckpointEntryIdFieldName"}, {"original_string": "private final IFieldName prevCheckpointIdFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "prevCheckpointIdFieldName", "var_name": "prevCheckpointIdFieldName"}, {"original_string": "private final IFieldName processorFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "processorFieldName", "var_name": "processorFieldName"}], "methods": [{"identifier": "CheckpointSchedulerAction", "parameters": "()", "modifiers": "public", "return": "", "signature": " CheckpointSchedulerAction()", "full_signature": "public  CheckpointSchedulerAction()", "class_method_signature": "CheckpointSchedulerAction.CheckpointSchedulerAction()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(final ISchedulerEntry entry, final IObject args)", "modifiers": "@Override public", "return": "void", "signature": "void init(final ISchedulerEntry entry, final IObject args)", "full_signature": "@Override public void init(final ISchedulerEntry entry, final IObject args)", "class_method_signature": "CheckpointSchedulerAction.init(final ISchedulerEntry entry, final IObject args)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final ISchedulerEntry entry)", "modifiers": "@Override public", "return": "void", "signature": "void execute(final ISchedulerEntry entry)", "full_signature": "@Override public void execute(final ISchedulerEntry entry)", "class_method_signature": "CheckpointSchedulerAction.execute(final ISchedulerEntry entry)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Checkpoint/CheckpointActor/src/main/java/info/smart_tools/smartactors/checkpoint/checkpoint_actor/CheckpointSchedulerAction.java"}, "focal_method": {"identifier": "execute", "parameters": "(final ISchedulerEntry entry)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(final ISchedulerEntry entry) throws SchedulerActionExecutionException {\n        try {\n            // Scheduling strategy or checkpoint actor may write a non-null value into \"completed\" field of entry state if the message\n            // should be no more re-sent.\n            // The entry will still be kept in both remote and local storage to avoid duplication of the message until it will be deleted.\n            if (null != entry.getState().getValue(completedFieldName)) {\n                // Checkpoint actor writes non-null value into \"gotFeedback\" field of the entry state when it gets a feedback from next\n                // checkpoint.\n                // If there was no feedback (the message did not reach next checkpoint before it ran out of re-send trials) then we should\n                // execute a \"failure action\" that will handle the \"lost\" message.\n                if (null == entry.getState().getValue(gotFeedbackFieldName)) {\n                    IAction<IObject> failureAction = IOC.resolve(Keys.getOrAdd(\"checkpoint failure action\"));\n\n                    failureAction.execute((IObject) entry.getState().getValue(messageFieldName));\n                }\n                return;\n            }\n\n            IRecoverStrategy recoverStrategy = IOC.resolve(IOC.resolve(\n                    IOC.getKeyForKeyStorage(),\n                    entry.getState().getValue(recoverStrategyFieldName)\n            ));\n\n            recoverStrategy.reSend(entry.getState());\n        } catch (ResolutionException | ReadValueException | InvalidArgumentException | RecoverStrategyExecutionException\n                | ActionExecuteException e) {\n            throw new SchedulerActionExecutionException(\"Error occurred executing checkpoint action.\", e);\n        }\n    }", "signature": "void execute(final ISchedulerEntry entry)", "full_signature": "@Override public void execute(final ISchedulerEntry entry)", "class_method_signature": "CheckpointSchedulerAction.execute(final ISchedulerEntry entry)", "testcase": false, "constructor": false, "invocations": ["getValue", "getState", "getValue", "getState", "resolve", "getOrAdd", "execute", "getValue", "getState", "resolve", "resolve", "getKeyForKeyStorage", "getValue", "getState", "reSend", "getState"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}