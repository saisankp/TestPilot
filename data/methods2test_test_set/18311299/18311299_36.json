{"test_class": {"identifier": "ReactiveTriggerFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String TRIGGER_TABLE = \"testTable\";", "modifier": "public static final", "type": "String", "declarator": "TRIGGER_TABLE = \"testTable\"", "var_name": "TRIGGER_TABLE"}, {"original_string": "public static final List<String> TABLE_COLS = Lists.newArrayList(\"ID\", \"TXT\");", "modifier": "public static final", "type": "List<String>", "declarator": "TABLE_COLS = Lists.newArrayList(\"ID\", \"TXT\")", "var_name": "TABLE_COLS"}], "file": "reactive-source-mysql/src/test/java/org/reactivesource/mysql/ReactiveTriggerFactoryTest.java"}, "test_case": {"identifier": "testCanBuildAfterInsertTrigger", "parameters": "()", "modifiers": "@Test(groups = SMALL) public", "return": "void", "body": "@Test(groups = SMALL)\n    public void testCanBuildAfterInsertTrigger() {\n        ReactiveTrigger reactiveTrigger = ReactiveTriggerFactory.afterInsert(TRIGGER_TABLE, TABLE_COLS);\n        assertNotNull(reactiveTrigger);\n        assertEquals(reactiveTrigger.getTriggerEvent(), INSERT);\n        assertEquals(reactiveTrigger.getTriggerTime(), AFTER);\n        assertEquals(reactiveTrigger.getTriggerTable(), TRIGGER_TABLE);\n        assertEquals(reactiveTrigger.getTableColumns(), TABLE_COLS);\n        assertEquals(reactiveTrigger.getTriggerName(),\n                String.format(TRIGGER_NAME_TEMPLATE, AFTER, INSERT, TRIGGER_TABLE));\n    }", "signature": "void testCanBuildAfterInsertTrigger()", "full_signature": "@Test(groups = SMALL) public void testCanBuildAfterInsertTrigger()", "class_method_signature": "ReactiveTriggerFactoryTest.testCanBuildAfterInsertTrigger()", "testcase": true, "constructor": false, "invocations": ["afterInsert", "assertNotNull", "assertEquals", "getTriggerEvent", "assertEquals", "getTriggerTime", "assertEquals", "getTriggerTable", "assertEquals", "getTableColumns", "assertEquals", "getTriggerName", "format"]}, "focal_class": {"identifier": "ReactiveTriggerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String TRIGGER_NAME_TEMPLATE = \"REACTIVE_%s_%s_%s_TRIGGER\";", "modifier": "static final", "type": "String", "declarator": "TRIGGER_NAME_TEMPLATE = \"REACTIVE_%s_%s_%s_TRIGGER\"", "var_name": "TRIGGER_NAME_TEMPLATE"}], "methods": [{"identifier": "afterInsert", "parameters": "(String triggerTable, List<String> tableColumns)", "modifiers": "public static", "return": "ReactiveTrigger", "signature": "ReactiveTrigger afterInsert(String triggerTable, List<String> tableColumns)", "full_signature": "public static ReactiveTrigger afterInsert(String triggerTable, List<String> tableColumns)", "class_method_signature": "ReactiveTriggerFactory.afterInsert(String triggerTable, List<String> tableColumns)", "testcase": false, "constructor": false}, {"identifier": "afterUpdate", "parameters": "(String triggerTable, List<String> tableColumns)", "modifiers": "public static", "return": "ReactiveTrigger", "signature": "ReactiveTrigger afterUpdate(String triggerTable, List<String> tableColumns)", "full_signature": "public static ReactiveTrigger afterUpdate(String triggerTable, List<String> tableColumns)", "class_method_signature": "ReactiveTriggerFactory.afterUpdate(String triggerTable, List<String> tableColumns)", "testcase": false, "constructor": false}, {"identifier": "afterDelete", "parameters": "(String triggerTable, List<String> tableColumns)", "modifiers": "public static", "return": "ReactiveTrigger", "signature": "ReactiveTrigger afterDelete(String triggerTable, List<String> tableColumns)", "full_signature": "public static ReactiveTrigger afterDelete(String triggerTable, List<String> tableColumns)", "class_method_signature": "ReactiveTriggerFactory.afterDelete(String triggerTable, List<String> tableColumns)", "testcase": false, "constructor": false}, {"identifier": "createTrigger", "parameters": "(String triggerTable, TriggerEvent triggerEvent,\n                                                 TriggerTime triggerTime, List<String> tableColumns)", "modifiers": "private static", "return": "ReactiveTrigger", "signature": "ReactiveTrigger createTrigger(String triggerTable, TriggerEvent triggerEvent,\n                                                 TriggerTime triggerTime, List<String> tableColumns)", "full_signature": "private static ReactiveTrigger createTrigger(String triggerTable, TriggerEvent triggerEvent,\n                                                 TriggerTime triggerTime, List<String> tableColumns)", "class_method_signature": "ReactiveTriggerFactory.createTrigger(String triggerTable, TriggerEvent triggerEvent,\n                                                 TriggerTime triggerTime, List<String> tableColumns)", "testcase": false, "constructor": false}], "file": "reactive-source-mysql/src/main/java/org/reactivesource/mysql/ReactiveTriggerFactory.java"}, "focal_method": {"identifier": "afterInsert", "parameters": "(String triggerTable, List<String> tableColumns)", "modifiers": "public static", "return": "ReactiveTrigger", "body": "public static ReactiveTrigger afterInsert(String triggerTable, List<String> tableColumns) {\n        return createTrigger(triggerTable, INSERT, AFTER, tableColumns);\n    }", "signature": "ReactiveTrigger afterInsert(String triggerTable, List<String> tableColumns)", "full_signature": "public static ReactiveTrigger afterInsert(String triggerTable, List<String> tableColumns)", "class_method_signature": "ReactiveTriggerFactory.afterInsert(String triggerTable, List<String> tableColumns)", "testcase": false, "constructor": false, "invocations": ["createTrigger"]}, "repository": {"repo_id": 18311299, "url": "https://github.com/eBay/reactive-source", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 9, "size": 317, "license": "licensed"}}