{"test_class": {"identifier": "GraphElementFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static TemporaryFolder testFolder = new TemporaryFolder();", "modifier": "@ClassRule\n    public static", "type": "TemporaryFolder", "declarator": "testFolder = new TemporaryFolder()", "var_name": "testFolder"}, {"original_string": "private static Class<?> entityAClass;", "modifier": "private static", "type": "Class<?>", "declarator": "entityAClass", "var_name": "entityAClass"}, {"original_string": "private GraphElementFactory factory;", "modifier": "private", "type": "GraphElementFactory", "declarator": "factory", "var_name": "factory"}], "file": "neo4j/src/test/java/eu/drus/jpa/unit/neo4j/dataset/GraphElementFactoryTest.java"}, "test_case": {"identifier": "testBuildEdge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildEdge() throws NoSuchClassException {\n        // GIVEN\n        final String nodeAId = \"a\";\n        final List<String> nodeALabels = Arrays.asList(\"A\");\n        final Map<String, Object> nodeAAttributes = ImmutableMap.<String, Object>builder().put(\"id\", 1l).put(\"value\", \"foo\").build();\n\n        final String nodeBId = \"b\";\n        final List<String> nodeBLabels = Arrays.asList(\"A\");\n        final Map<String, Object> nodeBAttributes = ImmutableMap.<String, Object>builder().put(\"id\", 2l).put(\"value\", \"boo\").build();\n\n        final String edgeId = \"e\";\n        final Map<String, eu.drus.jpa.unit.neo4j.dataset.graphml.Attribute> edgeAttributes = ImmutableMap.<String, eu.drus.jpa.unit.neo4j.dataset.graphml.Attribute>builder()\n                .put(\"value\", new DefaultAttribute<>(\"moo\", AttributeType.STRING))\n                .put(\"label\", new DefaultAttribute<>(\"edge\", AttributeType.STRING)).build();\n\n        final Node nodeA = factory.createNode(nodeAId, nodeALabels, nodeAAttributes);\n        final Node nodeB = factory.createNode(nodeBId, nodeBLabels, nodeBAttributes);\n\n        // WHEN\n        final Edge edge = factory.buildEdge(nodeA, nodeB, edgeId, edgeAttributes);\n\n        // THEN\n        assertThat(edge, notNullValue());\n        assertThat(edge.getId(), equalTo(edgeId));\n        assertThat(edge.getLabels(), equalTo(Arrays.asList(\"edge\")));\n        assertThat(edge.getAttributes().size(), equalTo(1));\n        assertThat(edge.getSourceNode(), equalTo(nodeA));\n        assertThat(edge.getTargetNode(), equalTo(nodeB));\n\n        final Attribute idAttribute = edge.getAttributes().get(0);\n        assertThat(idAttribute.getName(), equalTo(\"value\"));\n        assertThat(idAttribute.getValue(), equalTo(\"moo\"));\n        assertThat(idAttribute.isId(), equalTo(Boolean.FALSE));\n    }", "signature": "void testBuildEdge()", "full_signature": "@Test public void testBuildEdge()", "class_method_signature": "GraphElementFactoryTest.testBuildEdge()", "testcase": true, "constructor": false, "invocations": ["asList", "build", "put", "put", "builder", "asList", "build", "put", "put", "builder", "build", "put", "put", "builder", "createNode", "createNode", "buildEdge", "assertThat", "notNullValue", "assertThat", "getId", "equalTo", "assertThat", "getLabels", "equalTo", "asList", "assertThat", "size", "getAttributes", "equalTo", "assertThat", "getSourceNode", "equalTo", "assertThat", "getTargetNode", "equalTo", "get", "getAttributes", "assertThat", "getName", "equalTo", "assertThat", "getValue", "equalTo", "assertThat", "isId", "equalTo"]}, "focal_class": {"identifier": "GraphElementFactory", "superclass": "", "interfaces": "implements VertexProvider<Node>, EdgeProvider<Node, Edge>", "fields": [{"original_string": "private static Map<List<String>, Class<?>> nodeLabelsEntityClassMap = new HashMap<>();", "modifier": "private static", "type": "Map<List<String>, Class<?>>", "declarator": "nodeLabelsEntityClassMap = new HashMap<>()", "var_name": "nodeLabelsEntityClassMap"}, {"original_string": "private static Map<Class<?>, List<String>> entityClassIdPropertiesMap = new HashMap<>();", "modifier": "private static", "type": "Map<Class<?>, List<String>>", "declarator": "entityClassIdPropertiesMap = new HashMap<>()", "var_name": "entityClassIdPropertiesMap"}, {"original_string": "private List<Class<?>> entityClasses;", "modifier": "private", "type": "List<Class<?>>", "declarator": "entityClasses", "var_name": "entityClasses"}], "methods": [{"identifier": "GraphElementFactory", "parameters": "(final List<Class<?>> entityClasses)", "modifiers": "public", "return": "", "signature": " GraphElementFactory(final List<Class<?>> entityClasses)", "full_signature": "public  GraphElementFactory(final List<Class<?>> entityClasses)", "class_method_signature": "GraphElementFactory.GraphElementFactory(final List<Class<?>> entityClasses)", "testcase": false, "constructor": true}, {"identifier": "convertAttributes", "parameters": "(final Map<String, eu.drus.jpa.unit.neo4j.dataset.graphml.Attribute> attributes)", "modifiers": "private static", "return": "Map<String, Object>", "signature": "Map<String, Object> convertAttributes(final Map<String, eu.drus.jpa.unit.neo4j.dataset.graphml.Attribute> attributes)", "full_signature": "private static Map<String, Object> convertAttributes(final Map<String, eu.drus.jpa.unit.neo4j.dataset.graphml.Attribute> attributes)", "class_method_signature": "GraphElementFactory.convertAttributes(final Map<String, eu.drus.jpa.unit.neo4j.dataset.graphml.Attribute> attributes)", "testcase": false, "constructor": false}, {"identifier": "extractLabels", "parameters": "(final Map<String, eu.drus.jpa.unit.neo4j.dataset.graphml.Attribute> attributes)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> extractLabels(final Map<String, eu.drus.jpa.unit.neo4j.dataset.graphml.Attribute> attributes)", "full_signature": "private static List<String> extractLabels(final Map<String, eu.drus.jpa.unit.neo4j.dataset.graphml.Attribute> attributes)", "class_method_signature": "GraphElementFactory.extractLabels(final Map<String, eu.drus.jpa.unit.neo4j.dataset.graphml.Attribute> attributes)", "testcase": false, "constructor": false}, {"identifier": "toNodeAttributes", "parameters": "(final List<String> labels,\n            final Map<String, Object> propertiesMap)", "modifiers": "private", "return": "List<eu.drus.jpa.unit.neo4j.dataset.Attribute>", "signature": "List<eu.drus.jpa.unit.neo4j.dataset.Attribute> toNodeAttributes(final List<String> labels,\n            final Map<String, Object> propertiesMap)", "full_signature": "private List<eu.drus.jpa.unit.neo4j.dataset.Attribute> toNodeAttributes(final List<String> labels,\n            final Map<String, Object> propertiesMap)", "class_method_signature": "GraphElementFactory.toNodeAttributes(final List<String> labels,\n            final Map<String, Object> propertiesMap)", "testcase": false, "constructor": false}, {"identifier": "toEdgeAttributes", "parameters": "(final Map<String, Object> propertiesMap)", "modifiers": "private", "return": "List<eu.drus.jpa.unit.neo4j.dataset.Attribute>", "signature": "List<eu.drus.jpa.unit.neo4j.dataset.Attribute> toEdgeAttributes(final Map<String, Object> propertiesMap)", "full_signature": "private List<eu.drus.jpa.unit.neo4j.dataset.Attribute> toEdgeAttributes(final Map<String, Object> propertiesMap)", "class_method_signature": "GraphElementFactory.toEdgeAttributes(final Map<String, Object> propertiesMap)", "testcase": false, "constructor": false}, {"identifier": "buildEdge", "parameters": "(final Node from, final Node to, final String name, final Map<String, Attribute> edgeAttributes)", "modifiers": "@Override public", "return": "Edge", "signature": "Edge buildEdge(final Node from, final Node to, final String name, final Map<String, Attribute> edgeAttributes)", "full_signature": "@Override public Edge buildEdge(final Node from, final Node to, final String name, final Map<String, Attribute> edgeAttributes)", "class_method_signature": "GraphElementFactory.buildEdge(final Node from, final Node to, final String name, final Map<String, Attribute> edgeAttributes)", "testcase": false, "constructor": false}, {"identifier": "createEdge", "parameters": "(final Node from, final Node to, final String name, final List<String> labels,\n            final Map<String, Object> attributesMap)", "modifiers": "public", "return": "Edge", "signature": "Edge createEdge(final Node from, final Node to, final String name, final List<String> labels,\n            final Map<String, Object> attributesMap)", "full_signature": "public Edge createEdge(final Node from, final Node to, final String name, final List<String> labels,\n            final Map<String, Object> attributesMap)", "class_method_signature": "GraphElementFactory.createEdge(final Node from, final Node to, final String name, final List<String> labels,\n            final Map<String, Object> attributesMap)", "testcase": false, "constructor": false}, {"identifier": "buildVertex", "parameters": "(final String name, final Map<String, Attribute> nodeAttributes)", "modifiers": "@Override public", "return": "Node", "signature": "Node buildVertex(final String name, final Map<String, Attribute> nodeAttributes)", "full_signature": "@Override public Node buildVertex(final String name, final Map<String, Attribute> nodeAttributes)", "class_method_signature": "GraphElementFactory.buildVertex(final String name, final Map<String, Attribute> nodeAttributes)", "testcase": false, "constructor": false}, {"identifier": "createNode", "parameters": "(final String name, final List<String> labels, final Map<String, Object> attributesMap)", "modifiers": "public", "return": "Node", "signature": "Node createNode(final String name, final List<String> labels, final Map<String, Object> attributesMap)", "full_signature": "public Node createNode(final String name, final List<String> labels, final Map<String, Object> attributesMap)", "class_method_signature": "GraphElementFactory.createNode(final String name, final List<String> labels, final Map<String, Object> attributesMap)", "testcase": false, "constructor": false}], "file": "neo4j/src/main/java/eu/drus/jpa/unit/neo4j/dataset/GraphElementFactory.java"}, "focal_method": {"identifier": "buildEdge", "parameters": "(final Node from, final Node to, final String name, final Map<String, Attribute> edgeAttributes)", "modifiers": "@Override public", "return": "Edge", "body": "@Override\n    public Edge buildEdge(final Node from, final Node to, final String name, final Map<String, Attribute> edgeAttributes) {\n        return createEdge(from, to, name, extractLabels(edgeAttributes), convertAttributes(edgeAttributes));\n    }", "signature": "Edge buildEdge(final Node from, final Node to, final String name, final Map<String, Attribute> edgeAttributes)", "full_signature": "@Override public Edge buildEdge(final Node from, final Node to, final String name, final Map<String, Attribute> edgeAttributes)", "class_method_signature": "GraphElementFactory.buildEdge(final Node from, final Node to, final String name, final Map<String, Attribute> edgeAttributes)", "testcase": false, "constructor": false, "invocations": ["createEdge", "extractLabels", "convertAttributes"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}