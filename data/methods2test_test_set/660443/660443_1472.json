{"test_class": {"identifier": "CPSADescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/CPSADescriptorTest.java"}, "test_case": {"identifier": "testUnChargedMolecule", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnChargedMolecule() throws Exception {\n        String filename = \"data/mdl/cpsa-uncharged.sdf\";\n        InputStream ins = this.getClass().getClassLoader().getResourceAsStream(filename);\n        ISimpleChemObjectReader reader = new MDLV2000Reader(ins);\n        ChemFile content = (ChemFile) reader.read((ChemObject) new ChemFile());\n        List cList = ChemFileManipulator.getAllAtomContainers(content);\n        IAtomContainer ac = (IAtomContainer) cList.get(0);\n\n        DoubleArrayResult retval = (DoubleArrayResult) descriptor.calculate(ac).getValue();\n        int ndesc = retval.length();\n        for (int i = 0; i < ndesc; i++)\n            Assert.assertTrue(retval.get(i) != Double.NaN);\n    }", "signature": "void testUnChargedMolecule()", "full_signature": "@Test public void testUnChargedMolecule()", "class_method_signature": "CPSADescriptorTest.testUnChargedMolecule()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "getClass", "read", "getAllAtomContainers", "get", "getValue", "calculate", "length", "assertTrue", "get"]}, "focal_class": {"identifier": "CPSADescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private static final String[] NAMES  = {\"PPSA-1\", \"PPSA-2\", \"PPSA-3\", \"PNSA-1\", \"PNSA-2\", \"PNSA-3\", \"DPSA-1\",\n            \"DPSA-2\", \"DPSA-3\", \"FPSA-1\", \"FPSA-2\", \"FPSA-3\", \"FNSA-1\", \"FNSA-2\", \"FNSA-3\", \"WPSA-1\", \"WPSA-2\",\n            \"WPSA-3\", \"WNSA-1\", \"WNSA-2\", \"WNSA-3\", \"RPCG\", \"RNCG\", \"RPCS\", \"RNCS\", \"THSA\", \"TPSA\", \"RHSA\", \"RPSA\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES  = {\"PPSA-1\", \"PPSA-2\", \"PPSA-3\", \"PNSA-1\", \"PNSA-2\", \"PNSA-3\", \"DPSA-1\",\n            \"DPSA-2\", \"DPSA-3\", \"FPSA-1\", \"FPSA-2\", \"FPSA-3\", \"FNSA-1\", \"FNSA-2\", \"FNSA-3\", \"WPSA-1\", \"WPSA-2\",\n            \"WPSA-3\", \"WNSA-1\", \"WNSA-2\", \"WNSA-3\", \"RPCG\", \"RNCG\", \"RPCS\", \"RNCS\", \"THSA\", \"TPSA\", \"RHSA\", \"RPSA\"}", "var_name": "NAMES"}, {"original_string": "private static ILoggingTool   logger = LoggingToolFactory.createLoggingTool(CPSADescriptor.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(CPSADescriptor.class)", "var_name": "logger"}], "methods": [{"identifier": "CPSADescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " CPSADescriptor()", "full_signature": "public  CPSADescriptor()", "class_method_signature": "CPSADescriptor.CPSADescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "CPSADescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "CPSADescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "CPSADescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "CPSADescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "CPSADescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "CPSADescriptor.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "CPSADescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "CPSADescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/CPSADescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer atomContainer) {\n        DoubleArrayResult retval = new DoubleArrayResult();\n\n        if (!GeometryUtil.has3DCoordinates(atomContainer)) {\n            for (int i = 0; i < 29; i++)\n                retval.add(Double.NaN);\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), retval,\n                    getDescriptorNames(), new CDKException(\"Molecule must have 3D coordinates\"));\n        }\n\n        IAtomContainer container;\n        try {\n            container = (IAtomContainer) atomContainer.clone();\n        } catch (CloneNotSupportedException e) {\n            logger.debug(\"Error during clone\");\n            for (int i = 0; i < 29; i++)\n                retval.add(Double.NaN);\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), retval,\n                    getDescriptorNames(), new CDKException(\"Error during clone\" + e.getMessage()));\n        }\n\n        //        IsotopeFactory factory = null;\n        //        try {\n        //            factory = IsotopeFactory.getInstance(container.getNewBuilder());\n        //        } catch (Exception e) {\n        //            logger.debug(e);\n        //        }\n\n        GasteigerMarsiliPartialCharges peoe;\n        try {\n            peoe = new GasteigerMarsiliPartialCharges();\n            peoe.assignGasteigerMarsiliSigmaPartialCharges(container, true);\n        } catch (Exception e) {\n            logger.debug(\"Error in assigning Gasteiger-Marsilli charges\");\n            for (int i = 0; i < 29; i++)\n                retval.add(Double.NaN);\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), retval,\n                    getDescriptorNames(), new CDKException(\"Error in getting G-M charges\"));\n        }\n\n        NumericalSurface surface;\n        try {\n            surface = new NumericalSurface(container);\n            surface.calculateSurface();\n        } catch (NullPointerException npe) {\n            logger.debug(\"Error in surface area calculation\");\n            for (int i = 0; i < 29; i++)\n                retval.add(Double.NaN);\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), retval,\n                    getDescriptorNames(), new CDKException(\"Error in surface area calculation\"));\n        }\n\n        //double molecularWeight = mfa.getMass();\n        double[] atomSurfaces = surface.getAllSurfaceAreas();\n        double totalSA = surface.getTotalSurfaceArea();\n\n        double ppsa1 = 0.0;\n        double ppsa3 = 0.0;\n        double pnsa1 = 0.0;\n        double pnsa3 = 0.0;\n        double totpcharge = 0.0;\n        double totncharge = 0.0;\n        for (int i = 0; i < container.getAtomCount(); i++) {\n            if (container.getAtom(i).getCharge() > 0) {\n                ppsa1 += atomSurfaces[i];\n                ppsa3 += container.getAtom(i).getCharge() * atomSurfaces[i];\n                totpcharge += container.getAtom(i).getCharge();\n            } else {\n                pnsa1 += atomSurfaces[i];\n                pnsa3 += container.getAtom(i).getCharge() * atomSurfaces[i];\n                totncharge += container.getAtom(i).getCharge();\n            }\n        }\n\n        double ppsa2 = ppsa1 * totpcharge;\n        double pnsa2 = pnsa1 * totncharge;\n\n        // fractional +ve & -ve SA\n        double fpsa1 = ppsa1 / totalSA;\n        double fpsa2 = ppsa2 / totalSA;\n        double fpsa3 = ppsa3 / totalSA;\n        double fnsa1 = pnsa1 / totalSA;\n        double fnsa2 = pnsa2 / totalSA;\n        double fnsa3 = pnsa3 / totalSA;\n\n        // surface wtd +ve & -ve SA\n        double wpsa1 = ppsa1 * totalSA / 1000;\n        double wpsa2 = ppsa2 * totalSA / 1000;\n        double wpsa3 = ppsa3 * totalSA / 1000;\n        double wnsa1 = pnsa1 * totalSA / 1000;\n        double wnsa2 = pnsa2 * totalSA / 1000;\n        double wnsa3 = pnsa3 * totalSA / 1000;\n\n        // hydrophobic and poalr surface area\n        double phobic = 0.0;\n        double polar = 0.0;\n        for (int i = 0; i < container.getAtomCount(); i++) {\n            if (Math.abs(container.getAtom(i).getCharge()) < 0.2) {\n                phobic += atomSurfaces[i];\n            } else {\n                polar += atomSurfaces[i];\n            }\n        }\n        double thsa = phobic;\n        double tpsa = polar;\n        double rhsa = phobic / totalSA;\n        double rpsa = polar / totalSA;\n\n        // differential +ve & -ve SA\n        double dpsa1 = ppsa1 - pnsa1;\n        double dpsa2 = ppsa2 - pnsa2;\n        double dpsa3 = ppsa3 - pnsa3;\n\n        double maxpcharge = 0.0;\n        double maxncharge = 0.0;\n        int pidx = 0;\n        int nidx = 0;\n        for (int i = 0; i < container.getAtomCount(); i++) {\n            double charge = container.getAtom(i).getCharge();\n            if (charge > maxpcharge) {\n                maxpcharge = charge;\n                pidx = i;\n            }\n            if (charge < maxncharge) {\n                maxncharge = charge;\n                nidx = i;\n            }\n        }\n\n        // relative descriptors\n        double rpcg = maxpcharge / totpcharge;\n        double rncg = maxncharge / totncharge;\n        double rpcs = atomSurfaces[pidx] * rpcg;\n        double rncs = atomSurfaces[nidx] * rncg;\n\n        // fill in the values\n        retval.add(ppsa1);\n        retval.add(ppsa2);\n        retval.add(ppsa3);\n        retval.add(pnsa1);\n        retval.add(pnsa2);\n        retval.add(pnsa3);\n\n        retval.add(dpsa1);\n        retval.add(dpsa2);\n        retval.add(dpsa3);\n\n        retval.add(fpsa1);\n        retval.add(fpsa2);\n        retval.add(fpsa3);\n        retval.add(fnsa1);\n        retval.add(fnsa2);\n        retval.add(fnsa3);\n\n        retval.add(wpsa1);\n        retval.add(wpsa2);\n        retval.add(wpsa3);\n        retval.add(wnsa1);\n        retval.add(wnsa2);\n        retval.add(wnsa3);\n\n        retval.add(rpcg);\n        retval.add(rncg);\n        retval.add(rpcs);\n        retval.add(rncs);\n\n        retval.add(thsa);\n        retval.add(tpsa);\n        retval.add(rhsa);\n        retval.add(rpsa);\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), retval,\n                getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "CPSADescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["has3DCoordinates", "add", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "clone", "debug", "add", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "getMessage", "assignGasteigerMarsiliSigmaPartialCharges", "debug", "add", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "calculateSurface", "debug", "add", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "getAllSurfaceAreas", "getTotalSurfaceArea", "getAtomCount", "getCharge", "getAtom", "getCharge", "getAtom", "getCharge", "getAtom", "getCharge", "getAtom", "getCharge", "getAtom", "getAtomCount", "abs", "getCharge", "getAtom", "getAtomCount", "getCharge", "getAtom", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}