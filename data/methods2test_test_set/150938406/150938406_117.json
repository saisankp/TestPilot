{"test_class": {"identifier": "BucketRandomProjectionLSHTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/feature/BucketRandomProjectionLSHTest.java"}, "test_case": {"identifier": "testHashFunction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHashFunction() {\n        BucketRandomProjectionLSH lsh = new BucketRandomProjectionLSH(0, 5, 2, 2, 1);\n        Vector vec1 = new DenseVector(new double[]{1, 2, 3, 4, 5});\n        Assert.assertEquals(new DenseVector(new double[]{-348137008, 1394862530}), lsh.hashFunction(vec1));\n        Vector vec2 = new SparseVector(5, new int[]{0, 4}, new double[]{1.0, 4.0});\n        Assert.assertEquals(new DenseVector(new double[]{-802232505, 1759100286}), lsh.hashFunction(vec2));\n    }", "signature": "void testHashFunction()", "full_signature": "@Test public void testHashFunction()", "class_method_signature": "BucketRandomProjectionLSHTest.testHashFunction()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "hashFunction", "assertEquals", "hashFunction"]}, "focal_class": {"identifier": "BucketRandomProjectionLSH", "superclass": "extends BaseLSH", "interfaces": "", "fields": [{"original_string": "double projectionWidth;", "modifier": "", "type": "double", "declarator": "projectionWidth", "var_name": "projectionWidth"}, {"original_string": "DenseVector[][] randVectors;", "modifier": "", "type": "DenseVector[][]", "declarator": "randVectors", "var_name": "randVectors"}, {"original_string": "double[][] randNumber;", "modifier": "", "type": "double[][]", "declarator": "randNumber", "var_name": "randNumber"}], "methods": [{"identifier": "BucketRandomProjectionLSH", "parameters": "(long seed, int vectorSize, int numProjectionsPerTable, int numHashTables,\n                                     double projectionWidth)", "modifiers": "public", "return": "", "signature": " BucketRandomProjectionLSH(long seed, int vectorSize, int numProjectionsPerTable, int numHashTables,\n                                     double projectionWidth)", "full_signature": "public  BucketRandomProjectionLSH(long seed, int vectorSize, int numProjectionsPerTable, int numHashTables,\n                                     double projectionWidth)", "class_method_signature": "BucketRandomProjectionLSH.BucketRandomProjectionLSH(long seed, int vectorSize, int numProjectionsPerTable, int numHashTables,\n                                     double projectionWidth)", "testcase": false, "constructor": true}, {"identifier": "BucketRandomProjectionLSH", "parameters": "(DenseVector[][] randVectors, double[][] randNumber, double projectionWidth)", "modifiers": "public", "return": "", "signature": " BucketRandomProjectionLSH(DenseVector[][] randVectors, double[][] randNumber, double projectionWidth)", "full_signature": "public  BucketRandomProjectionLSH(DenseVector[][] randVectors, double[][] randNumber, double projectionWidth)", "class_method_signature": "BucketRandomProjectionLSH.BucketRandomProjectionLSH(DenseVector[][] randVectors, double[][] randNumber, double projectionWidth)", "testcase": false, "constructor": true}, {"identifier": "hashFunction", "parameters": "(Vector elemVec)", "modifiers": "@Override public", "return": "DenseVector", "signature": "DenseVector hashFunction(Vector elemVec)", "full_signature": "@Override public DenseVector hashFunction(Vector elemVec)", "class_method_signature": "BucketRandomProjectionLSH.hashFunction(Vector elemVec)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/feature/BucketRandomProjectionLSH.java"}, "focal_method": {"identifier": "hashFunction", "parameters": "(Vector elemVec)", "modifiers": "@Override public", "return": "DenseVector", "body": "@Override\n    public DenseVector hashFunction(Vector elemVec) {\n        double[] brpSet = new double[randVectors.length];\n        if (randVectors.length > 0) {\n            int[] hashValues = new int[randVectors[0].length];\n            for (int i = 0; i < brpSet.length; i++) {\n                for (int j = 0; j < hashValues.length; j++) {\n                    double dot = elemVec.dot(randVectors[i][j]);\n                    hashValues[j] = (int) Math.floor((dot + randNumber[i][j]) / projectionWidth);\n                }\n                brpSet[i] = tableHash(hashValues);\n            }\n        }\n        return new DenseVector(brpSet);\n    }", "signature": "DenseVector hashFunction(Vector elemVec)", "full_signature": "@Override public DenseVector hashFunction(Vector elemVec)", "class_method_signature": "BucketRandomProjectionLSH.hashFunction(Vector elemVec)", "testcase": false, "constructor": false, "invocations": ["dot", "floor", "tableHash"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}