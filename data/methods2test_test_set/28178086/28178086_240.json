{"test_class": {"identifier": "StmSpecificationTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/satoolkit/special/StmSpecificationTest.java"}, "test_case": {"identifier": "testClone", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClone(){\n        StmSpecification spec=new StmSpecification();\n        spec=spec.clone();\n    }", "signature": "void testClone()", "full_signature": "@Test public void testClone()", "class_method_signature": "StmSpecificationTest.testClone()", "testcase": true, "constructor": false, "invocations": ["clone"]}, "focal_class": {"identifier": "StmSpecification", "superclass": "", "interfaces": "implements ISaSpecification, Cloneable", "fields": [{"original_string": "private PreprocessingSpecification preprocessingSpec;", "modifier": "private", "type": "PreprocessingSpecification", "declarator": "preprocessingSpec", "var_name": "preprocessingSpec"}, {"original_string": "private BsmSpecification decompositionSpec;", "modifier": "private", "type": "BsmSpecification", "declarator": "decompositionSpec", "var_name": "decompositionSpec"}, {"original_string": "private SaBenchmarkingSpec benchmarkingSpec;", "modifier": "private", "type": "SaBenchmarkingSpec", "declarator": "benchmarkingSpec", "var_name": "benchmarkingSpec"}], "methods": [{"identifier": "StmSpecification", "parameters": "()", "modifiers": "public", "return": "", "signature": " StmSpecification()", "full_signature": "public  StmSpecification()", "class_method_signature": "StmSpecification.StmSpecification()", "testcase": false, "constructor": true}, {"identifier": "getPreprocessingSpec", "parameters": "()", "modifiers": "public", "return": "PreprocessingSpecification", "signature": "PreprocessingSpecification getPreprocessingSpec()", "full_signature": "public PreprocessingSpecification getPreprocessingSpec()", "class_method_signature": "StmSpecification.getPreprocessingSpec()", "testcase": false, "constructor": false}, {"identifier": "getDecompositionSpec", "parameters": "()", "modifiers": "public", "return": "BsmSpecification", "signature": "BsmSpecification getDecompositionSpec()", "full_signature": "public BsmSpecification getDecompositionSpec()", "class_method_signature": "StmSpecification.getDecompositionSpec()", "testcase": false, "constructor": false}, {"identifier": "getBenchmarkingSpec", "parameters": "()", "modifiers": "public", "return": "SaBenchmarkingSpec", "signature": "SaBenchmarkingSpec getBenchmarkingSpec()", "full_signature": "public SaBenchmarkingSpec getBenchmarkingSpec()", "class_method_signature": "StmSpecification.getBenchmarkingSpec()", "testcase": false, "constructor": false}, {"identifier": "setPreprocessingSpec", "parameters": "(PreprocessingSpecification spec)", "modifiers": "public", "return": "void", "signature": "void setPreprocessingSpec(PreprocessingSpecification spec)", "full_signature": "public void setPreprocessingSpec(PreprocessingSpecification spec)", "class_method_signature": "StmSpecification.setPreprocessingSpec(PreprocessingSpecification spec)", "testcase": false, "constructor": false}, {"identifier": "setDecompositionSpec", "parameters": "(BsmSpecification spec)", "modifiers": "public", "return": "void", "signature": "void setDecompositionSpec(BsmSpecification spec)", "full_signature": "public void setDecompositionSpec(BsmSpecification spec)", "class_method_signature": "StmSpecification.setDecompositionSpec(BsmSpecification spec)", "testcase": false, "constructor": false}, {"identifier": "setBenchmarkingSpec", "parameters": "(SaBenchmarkingSpec spec)", "modifiers": "public", "return": "void", "signature": "void setBenchmarkingSpec(SaBenchmarkingSpec spec)", "full_signature": "public void setBenchmarkingSpec(SaBenchmarkingSpec spec)", "class_method_signature": "StmSpecification.setBenchmarkingSpec(SaBenchmarkingSpec spec)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StmSpecification.toString()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "StmSpecification", "signature": "StmSpecification clone()", "full_signature": "@Override public StmSpecification clone()", "class_method_signature": "StmSpecification.clone()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(StmSpecification other)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(StmSpecification other)", "full_signature": "public boolean equals(StmSpecification other)", "class_method_signature": "StmSpecification.equals(StmSpecification other)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "StmSpecification.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "StmSpecification.hashCode()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(boolean verbose)", "modifiers": "@Override public", "return": "InformationSet", "signature": "InformationSet write(boolean verbose)", "full_signature": "@Override public InformationSet write(boolean verbose)", "class_method_signature": "StmSpecification.write(boolean verbose)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(InformationSet info)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean read(InformationSet info)", "full_signature": "@Override public boolean read(InformationSet info)", "class_method_signature": "StmSpecification.read(InformationSet info)", "testcase": false, "constructor": false}, {"identifier": "fillDictionary", "parameters": "(String prefix, Map<String, Class> dic)", "modifiers": "public static", "return": "void", "signature": "void fillDictionary(String prefix, Map<String, Class> dic)", "full_signature": "public static void fillDictionary(String prefix, Map<String, Class> dic)", "class_method_signature": "StmSpecification.fillDictionary(String prefix, Map<String, Class> dic)", "testcase": false, "constructor": false}, {"identifier": "buildPreprocessor", "parameters": "(ProcessingContext context)", "modifiers": "public", "return": "IPreprocessor", "signature": "IPreprocessor buildPreprocessor(ProcessingContext context)", "full_signature": "public IPreprocessor buildPreprocessor(ProcessingContext context)", "class_method_signature": "StmSpecification.buildPreprocessor(ProcessingContext context)", "testcase": false, "constructor": false}, {"identifier": "toLongString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toLongString()", "full_signature": "@Override public String toLongString()", "class_method_signature": "StmSpecification.toLongString()", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/satoolkit/special/StmSpecification.java"}, "focal_method": {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "StmSpecification", "body": "@Override\n    public StmSpecification clone() {\n        try {\n            StmSpecification spec = (StmSpecification) super.clone();\n            if (preprocessingSpec != null) {\n                spec.preprocessingSpec = preprocessingSpec.clone();\n            }\n            if (decompositionSpec != null) {\n                spec.decompositionSpec = decompositionSpec.clone();\n            }\n            return spec;\n        } catch (CloneNotSupportedException ex) {\n            throw new AssertionError();\n        }\n    }", "signature": "StmSpecification clone()", "full_signature": "@Override public StmSpecification clone()", "class_method_signature": "StmSpecification.clone()", "testcase": false, "constructor": false, "invocations": ["clone", "clone", "clone"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}