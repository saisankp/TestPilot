{"test_class": {"identifier": "VmsDispersionAlgorithmForHomogeneousEnvironmentTest", "superclass": "extends ConsolidationAlgorithmsTest", "interfaces": "", "fields": [{"original_string": "private VmsDispersionAlgorithmForHomogeneousEnvironment vmsDistributionAlgorithm;", "modifier": "private", "type": "VmsDispersionAlgorithmForHomogeneousEnvironment", "declarator": "vmsDistributionAlgorithm", "var_name": "vmsDistributionAlgorithm"}], "file": "autonomic-administration-algorithms/src/test/java/br/com/autonomiccs/autonomic/administration/algorithms/impl/VmsDispersionAlgorithmForHomogeneousEnvironmentTest.java"}, "test_case": {"identifier": "mapVMsToHostTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mapVMsToHostTest() {\n        HostResources h0 = createHostWithSmallVms(2);\n        HostResources h1 = createHostWithSmallVms(1);\n        HostResources h2 = createHostWithMediumVms(2);\n\n        List<HostResources> hostsList = new ArrayList<HostResources>();\n        hostsList.add(h0);\n        hostsList.add(h1);\n        hostsList.add(h2);\n\n        List<HostResources> rankedHosts = vmsDistributionAlgorithm.rankHosts(hostsList);\n        Map<Long, HostResources> mapTest = vmsDistributionAlgorithm.mapVMsToHost(rankedHosts);\n\n        Assert.assertEquals(1, mapTest.size());\n\n        long mapValues[] = new long[mapTest.size()];\n        for (HostResources host : mapTest.values()) {\n            mapValues[0] = host.getUsedMemoryInMegaBytes();\n        }\n        Assert.assertEquals(1536, mapValues[0]);\n\n        verifyMapVmsToHostCalledMethods(rankedHosts, 3);\n    }", "signature": "void mapVMsToHostTest()", "full_signature": "@Test public void mapVMsToHostTest()", "class_method_signature": "VmsDispersionAlgorithmForHomogeneousEnvironmentTest.mapVMsToHostTest()", "testcase": true, "constructor": false, "invocations": ["createHostWithSmallVms", "createHostWithSmallVms", "createHostWithMediumVms", "add", "add", "add", "rankHosts", "mapVMsToHost", "assertEquals", "size", "size", "values", "getUsedMemoryInMegaBytes", "assertEquals", "verifyMapVmsToHostCalledMethods"]}, "focal_class": {"identifier": "VmsDispersionAlgorithmForHomogeneousEnvironment", "superclass": "extends ConsolidationScoredPreferenceForSmallHosts", "interfaces": "", "fields": [{"original_string": "private double clusterMemoryUsageAverage;", "modifier": "private", "type": "double", "declarator": "clusterMemoryUsageAverage", "var_name": "clusterMemoryUsageAverage"}, {"original_string": "private double standardDeviationVmsConfiguration;", "modifier": "private", "type": "double", "declarator": "standardDeviationVmsConfiguration", "var_name": "standardDeviationVmsConfiguration"}, {"original_string": "private double standardDeviationHostsUsage;", "modifier": "private", "type": "double", "declarator": "standardDeviationHostsUsage", "var_name": "standardDeviationHostsUsage"}, {"original_string": "private double standardDeviationAverage;", "modifier": "private", "type": "double", "declarator": "standardDeviationAverage", "var_name": "standardDeviationAverage"}, {"original_string": "private StandardDeviation std = new StandardDeviation(false);", "modifier": "private", "type": "StandardDeviation", "declarator": "std = new StandardDeviation(false)", "var_name": "std"}], "methods": [{"identifier": "VmsDispersionAlgorithmForHomogeneousEnvironment", "parameters": "()", "modifiers": "public", "return": "", "signature": " VmsDispersionAlgorithmForHomogeneousEnvironment()", "full_signature": "public  VmsDispersionAlgorithmForHomogeneousEnvironment()", "class_method_signature": "VmsDispersionAlgorithmForHomogeneousEnvironment.VmsDispersionAlgorithmForHomogeneousEnvironment()", "testcase": false, "constructor": true}, {"identifier": "rankHosts", "parameters": "(List<HostResources> hostsList)", "modifiers": "@Override public", "return": "List<HostResources>", "signature": "List<HostResources> rankHosts(List<HostResources> hostsList)", "full_signature": "@Override public List<HostResources> rankHosts(List<HostResources> hostsList)", "class_method_signature": "VmsDispersionAlgorithmForHomogeneousEnvironment.rankHosts(List<HostResources> hostsList)", "testcase": false, "constructor": false}, {"identifier": "sortHosts", "parameters": "(List<HostResources> hosts)", "modifiers": "@Override protected", "return": "void", "signature": "void sortHosts(List<HostResources> hosts)", "full_signature": "@Override protected void sortHosts(List<HostResources> hosts)", "class_method_signature": "VmsDispersionAlgorithmForHomogeneousEnvironment.sortHosts(List<HostResources> hosts)", "testcase": false, "constructor": false}, {"identifier": "rankHostToPowerOff", "parameters": "(List<HostResources> idleHosts)", "modifiers": "@Override public", "return": "List<HostResources>", "signature": "List<HostResources> rankHostToPowerOff(List<HostResources> idleHosts)", "full_signature": "@Override public List<HostResources> rankHostToPowerOff(List<HostResources> idleHosts)", "class_method_signature": "VmsDispersionAlgorithmForHomogeneousEnvironment.rankHostToPowerOff(List<HostResources> idleHosts)", "testcase": false, "constructor": false}, {"identifier": "calculateHostScore", "parameters": "(HostResources host)", "modifiers": "@Override protected", "return": "double", "signature": "double calculateHostScore(HostResources host)", "full_signature": "@Override protected double calculateHostScore(HostResources host)", "class_method_signature": "VmsDispersionAlgorithmForHomogeneousEnvironment.calculateHostScore(HostResources host)", "testcase": false, "constructor": false}, {"identifier": "internalCanPowerOffHost", "parameters": "(HostResources hostToPowerOff, CloudResources cloudResources)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean internalCanPowerOffHost(HostResources hostToPowerOff, CloudResources cloudResources)", "full_signature": "@Override public boolean internalCanPowerOffHost(HostResources hostToPowerOff, CloudResources cloudResources)", "class_method_signature": "VmsDispersionAlgorithmForHomogeneousEnvironment.internalCanPowerOffHost(HostResources hostToPowerOff, CloudResources cloudResources)", "testcase": false, "constructor": false}, {"identifier": "clusterMemoryUsagePercentage", "parameters": "(List<HostResources> hosts)", "modifiers": "protected", "return": "void", "signature": "void clusterMemoryUsagePercentage(List<HostResources> hosts)", "full_signature": "protected void clusterMemoryUsagePercentage(List<HostResources> hosts)", "class_method_signature": "VmsDispersionAlgorithmForHomogeneousEnvironment.clusterMemoryUsagePercentage(List<HostResources> hosts)", "testcase": false, "constructor": false}, {"identifier": "mapVMsToHost", "parameters": "(List<HostResources> rankedHosts)", "modifiers": "@Override public", "return": "Map<Long, HostResources>", "signature": "Map<Long, HostResources> mapVMsToHost(List<HostResources> rankedHosts)", "full_signature": "@Override public Map<Long, HostResources> mapVMsToHost(List<HostResources> rankedHosts)", "class_method_signature": "VmsDispersionAlgorithmForHomogeneousEnvironment.mapVMsToHost(List<HostResources> rankedHosts)", "testcase": false, "constructor": false}, {"identifier": "simulateVmsMigrations", "parameters": "(List<HostResources> rankedHosts, double standardDeviation)", "modifiers": "protected", "return": "Map<Long, HostResources>", "signature": "Map<Long, HostResources> simulateVmsMigrations(List<HostResources> rankedHosts, double standardDeviation)", "full_signature": "protected Map<Long, HostResources> simulateVmsMigrations(List<HostResources> rankedHosts, double standardDeviation)", "class_method_signature": "VmsDispersionAlgorithmForHomogeneousEnvironment.simulateVmsMigrations(List<HostResources> rankedHosts, double standardDeviation)", "testcase": false, "constructor": false}, {"identifier": "updateHostUsedResources", "parameters": "(VmResources vm, HostResources hostVmResidOn, HostResources targetHost)", "modifiers": "private", "return": "void", "signature": "void updateHostUsedResources(VmResources vm, HostResources hostVmResidOn, HostResources targetHost)", "full_signature": "private void updateHostUsedResources(VmResources vm, HostResources hostVmResidOn, HostResources targetHost)", "class_method_signature": "VmsDispersionAlgorithmForHomogeneousEnvironment.updateHostUsedResources(VmResources vm, HostResources hostVmResidOn, HostResources targetHost)", "testcase": false, "constructor": false}, {"identifier": "isMemoryUsageOfHostsAfterVmMigration", "parameters": "(VmResources vmResources, HostResources hostVmResidOn, HostResources targetHost, double standarDeviation)", "modifiers": "private", "return": "boolean", "signature": "boolean isMemoryUsageOfHostsAfterVmMigration(VmResources vmResources, HostResources hostVmResidOn, HostResources targetHost, double standarDeviation)", "full_signature": "private boolean isMemoryUsageOfHostsAfterVmMigration(VmResources vmResources, HostResources hostVmResidOn, HostResources targetHost, double standarDeviation)", "class_method_signature": "VmsDispersionAlgorithmForHomogeneousEnvironment.isMemoryUsageOfHostsAfterVmMigration(VmResources vmResources, HostResources hostVmResidOn, HostResources targetHost, double standarDeviation)", "testcase": false, "constructor": false}], "file": "autonomic-administration-algorithms/src/main/java/br/com/autonomiccs/autonomic/administration/algorithms/impl/VmsDispersionAlgorithmForHomogeneousEnvironment.java"}, "focal_method": {"identifier": "mapVMsToHost", "parameters": "(List<HostResources> rankedHosts)", "modifiers": "@Override public", "return": "Map<Long, HostResources>", "body": "@Override\n    public Map<Long, HostResources> mapVMsToHost(List<HostResources> rankedHosts) {\n        if (MathUtils.equals(standardDeviationHostsUsage, 0)) {\n            return new HashMap<>();\n        }\n        List<HostResources> rankedHostsStdVms = cloneListOfHosts(rankedHosts);\n        List<HostResources> rankedHostsStdHosts = cloneListOfHosts(rankedHosts);\n        List<HostResources> rankedHostsStdAverage = cloneListOfHosts(rankedHosts);\n\n        logger.debug(\"Simulating migration mapping with VMs resource standard deviation\");\n        Map<Long, HostResources> vmsToHostStdVms = simulateVmsMigrations(rankedHostsStdVms, standardDeviationVmsConfiguration);\n\n        logger.debug(\"Simulating migration mapping with hosts resource standard deviation\");\n        Map<Long, HostResources> vmsToHostStdHosts = simulateVmsMigrations(rankedHostsStdHosts, standardDeviationHostsUsage);\n\n        logger.debug(\"Simulating migration mapping with the average of hosts resource and VMs resource standard deviation\");\n        Map<Long, HostResources> vmsToHostStdAverage = simulateVmsMigrations(rankedHostsStdAverage, standardDeviationAverage);\n\n        double usedMemoryHostsWithStdVms[] = new double[rankedHosts.size()];\n        for (int i = 0; i < rankedHostsStdVms.size(); i++) {\n            usedMemoryHostsWithStdVms[i] = rankedHostsStdVms.get(i).getUsedMemoryInMegaBytes();\n        }\n        double stdWithStdVms = std.evaluate(usedMemoryHostsWithStdVms);\n        logger.debug(String.format(\"The Std. achieved using the VMs resource standard deviation as parameter for the simulation was [%f]\", stdWithStdVms));\n        double usedMemoryHostsWithStdHost[] = new double[rankedHosts.size()];\n        for (int i = 0; i < rankedHostsStdHosts.size(); i++) {\n            usedMemoryHostsWithStdHost[i] = rankedHostsStdHosts.get(i).getUsedMemoryInMegaBytes();\n        }\n        double stdWithStdHosts = std.evaluate(usedMemoryHostsWithStdHost);\n        logger.debug(String.format(\"The Std. achieved using the hosts resource standard deviation as parameter for the simulation was [%f]\", stdWithStdHosts));\n\n        double usedMemoryHostsWithStdAverage[] = new double[rankedHosts.size()];\n        for (int i = 0; i < rankedHostsStdAverage.size(); i++) {\n            usedMemoryHostsWithStdAverage[i] = rankedHostsStdAverage.get(i).getUsedMemoryInMegaBytes();\n        }\n        double stdWithStdAverage = std.evaluate(usedMemoryHostsWithStdAverage);\n        logger.debug(String.format(\"The Std. achieved using the average between hosts resource and VMs resource standard deviation as parameter for the simulation was [%f]\",\n                stdWithStdAverage));\n\n        if (stdWithStdAverage <= stdWithStdHosts && stdWithStdAverage <= stdWithStdVms) {\n            logger.debug(\"The simulation that won the competition was the one executed with alpha as the average of host resource and VMs resource standard deviation.\");\n            logger.debug(String.format(\"The number of migrations that will be executed is[%d].\", vmsToHostStdAverage.size()));\n            return vmsToHostStdAverage;\n        }\n        if (stdWithStdHosts <= stdWithStdVms) {\n            logger.debug(\"The simulation that won the competition was the one executed with alpha as the host resource standard deviation.\");\n            logger.debug(String.format(\"The number of migrations that will be executed is[%d].\", vmsToHostStdHosts.size()));\n            return vmsToHostStdHosts;\n        }\n        logger.debug(\"The simulation that won the competition was the one executed with alpha as the VMs resource standard deviation.\");\n        logger.debug(String.format(\"The number of migrations that will be executed is[%d].\", vmsToHostStdVms.size()));\n        return vmsToHostStdVms;\n    }", "signature": "Map<Long, HostResources> mapVMsToHost(List<HostResources> rankedHosts)", "full_signature": "@Override public Map<Long, HostResources> mapVMsToHost(List<HostResources> rankedHosts)", "class_method_signature": "VmsDispersionAlgorithmForHomogeneousEnvironment.mapVMsToHost(List<HostResources> rankedHosts)", "testcase": false, "constructor": false, "invocations": ["equals", "cloneListOfHosts", "cloneListOfHosts", "cloneListOfHosts", "debug", "simulateVmsMigrations", "debug", "simulateVmsMigrations", "debug", "simulateVmsMigrations", "size", "size", "getUsedMemoryInMegaBytes", "get", "evaluate", "debug", "format", "size", "size", "getUsedMemoryInMegaBytes", "get", "evaluate", "debug", "format", "size", "size", "getUsedMemoryInMegaBytes", "get", "evaluate", "debug", "format", "debug", "debug", "format", "size", "debug", "debug", "format", "size", "debug", "debug", "format", "size"]}, "repository": {"repo_id": 56359101, "url": "https://github.com/Autonomiccs/autonomiccs-platform", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 944, "license": "licensed"}}