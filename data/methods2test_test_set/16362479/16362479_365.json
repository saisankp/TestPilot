{"test_class": {"identifier": "LocalReadOnlyProxyTransactionTest", "superclass": "extends LocalProxyTransactionTest<LocalReadOnlyProxyTransaction>", "interfaces": "", "fields": [{"original_string": "private DataTreeSnapshot snapshot;", "modifier": "private", "type": "DataTreeSnapshot", "declarator": "snapshot", "var_name": "snapshot"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/databroker/actors/dds/LocalReadOnlyProxyTransactionTest.java"}, "test_case": {"identifier": "testApplyModifyTransactionRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testApplyModifyTransactionRequest() {\n        final TestProbe probe = createProbe();\n        final ModifyTransactionRequestBuilder builder =\n                new ModifyTransactionRequestBuilder(TRANSACTION_ID, probe.ref());\n        builder.setSequence(0);\n        builder.setAbort();\n        final ModifyTransactionRequest request = builder.build();\n        transaction.replayModifyTransactionRequest(request, createCallbackMock(), Ticker.systemTicker().read());\n        getTester().expectTransactionRequest(AbortLocalTransactionRequest.class);\n    }", "signature": "void testApplyModifyTransactionRequest()", "full_signature": "@Test public void testApplyModifyTransactionRequest()", "class_method_signature": "LocalReadOnlyProxyTransactionTest.testApplyModifyTransactionRequest()", "testcase": true, "constructor": false, "invocations": ["createProbe", "ref", "setSequence", "setAbort", "build", "replayModifyTransactionRequest", "createCallbackMock", "read", "systemTicker", "expectTransactionRequest", "getTester"]}, "focal_class": {"identifier": "LocalReadOnlyProxyTransaction", "superclass": "extends LocalProxyTransaction", "interfaces": "", "fields": [{"original_string": "private final DataTreeSnapshot snapshot;", "modifier": "private final", "type": "DataTreeSnapshot", "declarator": "snapshot", "var_name": "snapshot"}], "methods": [{"identifier": "LocalReadOnlyProxyTransaction", "parameters": "(final ProxyHistory parent, final TransactionIdentifier identifier,\n        final DataTreeSnapshot snapshot)", "modifiers": "", "return": "", "signature": " LocalReadOnlyProxyTransaction(final ProxyHistory parent, final TransactionIdentifier identifier,\n        final DataTreeSnapshot snapshot)", "full_signature": "  LocalReadOnlyProxyTransaction(final ProxyHistory parent, final TransactionIdentifier identifier,\n        final DataTreeSnapshot snapshot)", "class_method_signature": "LocalReadOnlyProxyTransaction.LocalReadOnlyProxyTransaction(final ProxyHistory parent, final TransactionIdentifier identifier,\n        final DataTreeSnapshot snapshot)", "testcase": false, "constructor": true}, {"identifier": "LocalReadOnlyProxyTransaction", "parameters": "(final ProxyHistory parent, final TransactionIdentifier identifier)", "modifiers": "", "return": "", "signature": " LocalReadOnlyProxyTransaction(final ProxyHistory parent, final TransactionIdentifier identifier)", "full_signature": "  LocalReadOnlyProxyTransaction(final ProxyHistory parent, final TransactionIdentifier identifier)", "class_method_signature": "LocalReadOnlyProxyTransaction.LocalReadOnlyProxyTransaction(final ProxyHistory parent, final TransactionIdentifier identifier)", "testcase": false, "constructor": true}, {"identifier": "isSnapshotOnly", "parameters": "()", "modifiers": "@Override", "return": "boolean", "signature": "boolean isSnapshotOnly()", "full_signature": "@Override boolean isSnapshotOnly()", "class_method_signature": "LocalReadOnlyProxyTransaction.isSnapshotOnly()", "testcase": false, "constructor": false}, {"identifier": "readOnlyView", "parameters": "()", "modifiers": "@Override", "return": "DataTreeSnapshot", "signature": "DataTreeSnapshot readOnlyView()", "full_signature": "@Override DataTreeSnapshot readOnlyView()", "class_method_signature": "LocalReadOnlyProxyTransaction.readOnlyView()", "testcase": false, "constructor": false}, {"identifier": "doDelete", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "@Override", "return": "void", "signature": "void doDelete(final YangInstanceIdentifier path)", "full_signature": "@Override void doDelete(final YangInstanceIdentifier path)", "class_method_signature": "LocalReadOnlyProxyTransaction.doDelete(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "doMerge", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "@Override", "return": "void", "signature": "void doMerge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "@Override void doMerge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "LocalReadOnlyProxyTransaction.doMerge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": false}, {"identifier": "doWrite", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "@Override", "return": "void", "signature": "void doWrite(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "@Override void doWrite(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "LocalReadOnlyProxyTransaction.doWrite(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": false}, {"identifier": "commitRequest", "parameters": "(final boolean coordinated)", "modifiers": "@Override", "return": "CommitLocalTransactionRequest", "signature": "CommitLocalTransactionRequest commitRequest(final boolean coordinated)", "full_signature": "@Override CommitLocalTransactionRequest commitRequest(final boolean coordinated)", "class_method_signature": "LocalReadOnlyProxyTransaction.commitRequest(final boolean coordinated)", "testcase": false, "constructor": false}, {"identifier": "flushState", "parameters": "()", "modifiers": "@Override", "return": "Optional<ModifyTransactionRequest>", "signature": "Optional<ModifyTransactionRequest> flushState()", "full_signature": "@Override Optional<ModifyTransactionRequest> flushState()", "class_method_signature": "LocalReadOnlyProxyTransaction.flushState()", "testcase": false, "constructor": false}, {"identifier": "applyForwardedModifyTransactionRequest", "parameters": "(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback)", "modifiers": "@Override", "return": "void", "signature": "void applyForwardedModifyTransactionRequest(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback)", "full_signature": "@Override void applyForwardedModifyTransactionRequest(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback)", "class_method_signature": "LocalReadOnlyProxyTransaction.applyForwardedModifyTransactionRequest(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback)", "testcase": false, "constructor": false}, {"identifier": "replayModifyTransactionRequest", "parameters": "(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "modifiers": "@Override", "return": "void", "signature": "void replayModifyTransactionRequest(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "full_signature": "@Override void replayModifyTransactionRequest(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "class_method_signature": "LocalReadOnlyProxyTransaction.replayModifyTransactionRequest(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "testcase": false, "constructor": false}, {"identifier": "commonModifyTransactionRequest", "parameters": "(final ModifyTransactionRequest request)", "modifiers": "private static", "return": "void", "signature": "void commonModifyTransactionRequest(final ModifyTransactionRequest request)", "full_signature": "private static void commonModifyTransactionRequest(final ModifyTransactionRequest request)", "class_method_signature": "LocalReadOnlyProxyTransaction.commonModifyTransactionRequest(final ModifyTransactionRequest request)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/databroker/actors/dds/LocalReadOnlyProxyTransaction.java"}, "focal_method": {"identifier": "replayModifyTransactionRequest", "parameters": "(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "modifiers": "@Override", "return": "void", "body": "@Override\n    void replayModifyTransactionRequest(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback, final long enqueuedTicks) {\n        commonModifyTransactionRequest(request);\n        enqueueAbort(callback, enqueuedTicks);\n    }", "signature": "void replayModifyTransactionRequest(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "full_signature": "@Override void replayModifyTransactionRequest(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "class_method_signature": "LocalReadOnlyProxyTransaction.replayModifyTransactionRequest(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "testcase": false, "constructor": false, "invocations": ["commonModifyTransactionRequest", "enqueueAbort"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}