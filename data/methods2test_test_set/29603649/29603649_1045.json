{"test_class": {"identifier": "SoapMessageNameResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EVALUATED_QUERY = \"evaluated query\";", "modifier": "private static final", "type": "String", "declarator": "EVALUATED_QUERY = \"evaluated query\"", "var_name": "EVALUATED_QUERY"}, {"original_string": "private static final String SOAP_CONTENT = \"soap content\";", "modifier": "private static final", "type": "String", "declarator": "SOAP_CONTENT = \"soap content\"", "var_name": "SOAP_CONTENT"}, {"original_string": "private static final String SOAP_TYPE_QUERY = \"local-name(/*/*/*[1])\";", "modifier": "private static final", "type": "String", "declarator": "SOAP_TYPE_QUERY = \"local-name(/*/*/*[1])\"", "var_name": "SOAP_TYPE_QUERY"}, {"original_string": "@Mock\n    private XmlXpathResolver xmlTypeResolver;", "modifier": "@Mock\n    private", "type": "XmlXpathResolver", "declarator": "xmlTypeResolver", "var_name": "xmlTypeResolver"}, {"original_string": "@Mock\n    private WilmaHttpEntity request;", "modifier": "@Mock\n    private", "type": "WilmaHttpEntity", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private ParameterList parameters;", "modifier": "@Mock\n    private", "type": "ParameterList", "declarator": "parameters", "var_name": "parameters"}, {"original_string": "@InjectMocks\n    private SoapMessageNameResolver underTest;", "modifier": "@InjectMocks\n    private", "type": "SoapMessageNameResolver", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/sequence/formatters/helper/resolver/SoapMessageNameResolverTest.java"}, "test_case": {"identifier": "testResolveShouldReturnEvaluatedXpathQuery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResolveShouldReturnEvaluatedXpathQuery() {\n        given(request.getBody()).willReturn(SOAP_CONTENT);\n        given(xmlTypeResolver.getValue(SOAP_TYPE_QUERY, SOAP_CONTENT)).willReturn(EVALUATED_QUERY);\n\n        String actual = underTest.resolve(request, parameters);\n\n        assertEquals(actual, EVALUATED_QUERY);\n    }", "signature": "void testResolveShouldReturnEvaluatedXpathQuery()", "full_signature": "@Test public void testResolveShouldReturnEvaluatedXpathQuery()", "class_method_signature": "SoapMessageNameResolverTest.testResolveShouldReturnEvaluatedXpathQuery()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getBody", "willReturn", "given", "getValue", "resolve", "assertEquals"]}, "focal_class": {"identifier": "SoapMessageNameResolver", "superclass": "", "interfaces": "implements MessageNameResolver", "fields": [{"original_string": "private static final String SOAP_TYPE_QUERY = \"local-name(/*/*/*[1])\";", "modifier": "private static final", "type": "String", "declarator": "SOAP_TYPE_QUERY = \"local-name(/*/*/*[1])\"", "var_name": "SOAP_TYPE_QUERY"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(SoapMessageNameResolver.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SoapMessageNameResolver.class)", "var_name": "logger"}, {"original_string": "@Qualifier(\"sequenceXmlXpathResolver\")\n    @Autowired\n    private XmlXpathResolver xmlTypeResolver;", "modifier": "@Qualifier(\"sequenceXmlXpathResolver\")\n    @Autowired\n    private", "type": "XmlXpathResolver", "declarator": "xmlTypeResolver", "var_name": "xmlTypeResolver"}], "methods": [{"identifier": "resolve", "parameters": "(final WilmaHttpEntity request, final ParameterList parameters)", "modifiers": "@Override public", "return": "String", "signature": "String resolve(final WilmaHttpEntity request, final ParameterList parameters)", "full_signature": "@Override public String resolve(final WilmaHttpEntity request, final ParameterList parameters)", "class_method_signature": "SoapMessageNameResolver.resolve(final WilmaHttpEntity request, final ParameterList parameters)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/sequence/formatters/helper/resolver/SoapMessageNameResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final WilmaHttpEntity request, final ParameterList parameters)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String resolve(final WilmaHttpEntity request, final ParameterList parameters) {\n        String name;\n        try {\n            name = xmlTypeResolver.getValue(SOAP_TYPE_QUERY, request.getBody());\n        } catch (Exception e) {\n            logger.debug(\"Invalid XPath expression: \" + SOAP_TYPE_QUERY, e);\n            name = \"\";\n        }\n        return name;\n    }", "signature": "String resolve(final WilmaHttpEntity request, final ParameterList parameters)", "full_signature": "@Override public String resolve(final WilmaHttpEntity request, final ParameterList parameters)", "class_method_signature": "SoapMessageNameResolver.resolve(final WilmaHttpEntity request, final ParameterList parameters)", "testcase": false, "constructor": false, "invocations": ["getValue", "getBody", "debug"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}