{"test_class": {"identifier": "TestHCatClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TestHCatClient.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TestHCatClient.class)", "var_name": "LOG"}, {"original_string": "private static final String msPort = \"20101\";", "modifier": "private static final", "type": "String", "declarator": "msPort = \"20101\"", "var_name": "msPort"}, {"original_string": "private static HiveConf hcatConf;", "modifier": "private static", "type": "HiveConf", "declarator": "hcatConf", "var_name": "hcatConf"}, {"original_string": "private static SecurityManager securityManager;", "modifier": "private static", "type": "SecurityManager", "declarator": "securityManager", "var_name": "securityManager"}], "file": "hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java"}, "test_case": {"identifier": "testUpdateTableSchema", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testUpdateTableSchema() throws Exception {\n    try {\n      HCatClient client = HCatClient.create(new Configuration(hcatConf));\n      final String dbName = \"testUpdateTableSchema_DBName\";\n      final String tableName = \"testUpdateTableSchema_TableName\";\n\n      client.dropDatabase(dbName, true, HCatClient.DropDBMode.CASCADE);\n\n      client.createDatabase(HCatCreateDBDesc.create(dbName).build());\n      List<HCatFieldSchema> oldSchema = Arrays.asList(new HCatFieldSchema(\"foo\", Type.INT, \"\"),\n          new HCatFieldSchema(\"bar\", Type.STRING, \"\"));\n      client.createTable(HCatCreateTableDesc.create(dbName, tableName, oldSchema).build());\n\n      List<HCatFieldSchema> newSchema = Arrays.asList(new HCatFieldSchema(\"completely\", Type.DOUBLE, \"\"),\n          new HCatFieldSchema(\"new\", Type.FLOAT, \"\"),\n          new HCatFieldSchema(\"fields\", Type.STRING, \"\"));\n\n      client.updateTableSchema(dbName, tableName, newSchema);\n\n      assertArrayEquals(newSchema.toArray(), client.getTable(dbName, tableName).getCols().toArray());\n\n      client.dropDatabase(dbName, false, HCatClient.DropDBMode.CASCADE);\n    }\n    catch (Exception exception) {\n      LOG.error(\"Unexpected exception.\", exception);\n      assertTrue(\"Unexpected exception: \" + exception.getMessage(), false);\n    }\n  }", "signature": "void testUpdateTableSchema()", "full_signature": "@Test public void testUpdateTableSchema()", "class_method_signature": "TestHCatClient.testUpdateTableSchema()", "testcase": true, "constructor": false, "invocations": ["create", "dropDatabase", "createDatabase", "build", "create", "asList", "createTable", "build", "create", "asList", "updateTableSchema", "assertArrayEquals", "toArray", "toArray", "getCols", "getTable", "dropDatabase", "error", "assertTrue", "getMessage"]}, "focal_class": {"identifier": "HCatClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String HCAT_CLIENT_IMPL_CLASS = \"hcat.client.impl.class\";", "modifier": "public static final", "type": "String", "declarator": "HCAT_CLIENT_IMPL_CLASS = \"hcat.client.impl.class\"", "var_name": "HCAT_CLIENT_IMPL_CLASS"}], "methods": [{"identifier": "create", "parameters": "(Configuration conf)", "modifiers": "public static", "return": "HCatClient", "signature": "HCatClient create(Configuration conf)", "full_signature": "public static HCatClient create(Configuration conf)", "class_method_signature": "HCatClient.create(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(Configuration conf)", "modifiers": "abstract", "return": "void", "signature": "void initialize(Configuration conf)", "full_signature": "abstract void initialize(Configuration conf)", "class_method_signature": "HCatClient.initialize(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "listDatabaseNamesByPattern", "parameters": "(String pattern)", "modifiers": "public abstract", "return": "List<String>", "signature": "List<String> listDatabaseNamesByPattern(String pattern)", "full_signature": "public abstract List<String> listDatabaseNamesByPattern(String pattern)", "class_method_signature": "HCatClient.listDatabaseNamesByPattern(String pattern)", "testcase": false, "constructor": false}, {"identifier": "getDatabase", "parameters": "(String dbName)", "modifiers": "public abstract", "return": "HCatDatabase", "signature": "HCatDatabase getDatabase(String dbName)", "full_signature": "public abstract HCatDatabase getDatabase(String dbName)", "class_method_signature": "HCatClient.getDatabase(String dbName)", "testcase": false, "constructor": false}, {"identifier": "createDatabase", "parameters": "(HCatCreateDBDesc dbInfo)", "modifiers": "public abstract", "return": "void", "signature": "void createDatabase(HCatCreateDBDesc dbInfo)", "full_signature": "public abstract void createDatabase(HCatCreateDBDesc dbInfo)", "class_method_signature": "HCatClient.createDatabase(HCatCreateDBDesc dbInfo)", "testcase": false, "constructor": false}, {"identifier": "dropDatabase", "parameters": "(String dbName, boolean ifExists,\n                    DropDBMode mode)", "modifiers": "public abstract", "return": "void", "signature": "void dropDatabase(String dbName, boolean ifExists,\n                    DropDBMode mode)", "full_signature": "public abstract void dropDatabase(String dbName, boolean ifExists,\n                    DropDBMode mode)", "class_method_signature": "HCatClient.dropDatabase(String dbName, boolean ifExists,\n                    DropDBMode mode)", "testcase": false, "constructor": false}, {"identifier": "listTableNamesByPattern", "parameters": "(String dbName, String tablePattern)", "modifiers": "public abstract", "return": "List<String>", "signature": "List<String> listTableNamesByPattern(String dbName, String tablePattern)", "full_signature": "public abstract List<String> listTableNamesByPattern(String dbName, String tablePattern)", "class_method_signature": "HCatClient.listTableNamesByPattern(String dbName, String tablePattern)", "testcase": false, "constructor": false}, {"identifier": "getTable", "parameters": "(String dbName, String tableName)", "modifiers": "public abstract", "return": "HCatTable", "signature": "HCatTable getTable(String dbName, String tableName)", "full_signature": "public abstract HCatTable getTable(String dbName, String tableName)", "class_method_signature": "HCatClient.getTable(String dbName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "createTable", "parameters": "(HCatCreateTableDesc createTableDesc)", "modifiers": "public abstract", "return": "void", "signature": "void createTable(HCatCreateTableDesc createTableDesc)", "full_signature": "public abstract void createTable(HCatCreateTableDesc createTableDesc)", "class_method_signature": "HCatClient.createTable(HCatCreateTableDesc createTableDesc)", "testcase": false, "constructor": false}, {"identifier": "updateTableSchema", "parameters": "(String dbName, String tableName, List<HCatFieldSchema> columnSchema)", "modifiers": "public abstract", "return": "void", "signature": "void updateTableSchema(String dbName, String tableName, List<HCatFieldSchema> columnSchema)", "full_signature": "public abstract void updateTableSchema(String dbName, String tableName, List<HCatFieldSchema> columnSchema)", "class_method_signature": "HCatClient.updateTableSchema(String dbName, String tableName, List<HCatFieldSchema> columnSchema)", "testcase": false, "constructor": false}, {"identifier": "createTableLike", "parameters": "(String dbName, String existingTblName,\n                     String newTableName, boolean ifNotExists, boolean isExternal,\n                     String location)", "modifiers": "public abstract", "return": "void", "signature": "void createTableLike(String dbName, String existingTblName,\n                     String newTableName, boolean ifNotExists, boolean isExternal,\n                     String location)", "full_signature": "public abstract void createTableLike(String dbName, String existingTblName,\n                     String newTableName, boolean ifNotExists, boolean isExternal,\n                     String location)", "class_method_signature": "HCatClient.createTableLike(String dbName, String existingTblName,\n                     String newTableName, boolean ifNotExists, boolean isExternal,\n                     String location)", "testcase": false, "constructor": false}, {"identifier": "dropTable", "parameters": "(String dbName, String tableName,\n                   boolean ifExists)", "modifiers": "public abstract", "return": "void", "signature": "void dropTable(String dbName, String tableName,\n                   boolean ifExists)", "full_signature": "public abstract void dropTable(String dbName, String tableName,\n                   boolean ifExists)", "class_method_signature": "HCatClient.dropTable(String dbName, String tableName,\n                   boolean ifExists)", "testcase": false, "constructor": false}, {"identifier": "renameTable", "parameters": "(String dbName, String oldName,\n                   String newName)", "modifiers": "public abstract", "return": "void", "signature": "void renameTable(String dbName, String oldName,\n                   String newName)", "full_signature": "public abstract void renameTable(String dbName, String oldName,\n                   String newName)", "class_method_signature": "HCatClient.renameTable(String dbName, String oldName,\n                   String newName)", "testcase": false, "constructor": false}, {"identifier": "getPartitions", "parameters": "(String dbName, String tblName)", "modifiers": "public abstract", "return": "List<HCatPartition>", "signature": "List<HCatPartition> getPartitions(String dbName, String tblName)", "full_signature": "public abstract List<HCatPartition> getPartitions(String dbName, String tblName)", "class_method_signature": "HCatClient.getPartitions(String dbName, String tblName)", "testcase": false, "constructor": false}, {"identifier": "getPartitions", "parameters": "(String dbName, String tblName, Map<String, String> partitionSpec)", "modifiers": "public abstract", "return": "List<HCatPartition>", "signature": "List<HCatPartition> getPartitions(String dbName, String tblName, Map<String, String> partitionSpec)", "full_signature": "public abstract List<HCatPartition> getPartitions(String dbName, String tblName, Map<String, String> partitionSpec)", "class_method_signature": "HCatClient.getPartitions(String dbName, String tblName, Map<String, String> partitionSpec)", "testcase": false, "constructor": false}, {"identifier": "getPartition", "parameters": "(String dbName, String tableName,\n                         Map<String, String> partitionSpec)", "modifiers": "public abstract", "return": "HCatPartition", "signature": "HCatPartition getPartition(String dbName, String tableName,\n                         Map<String, String> partitionSpec)", "full_signature": "public abstract HCatPartition getPartition(String dbName, String tableName,\n                         Map<String, String> partitionSpec)", "class_method_signature": "HCatClient.getPartition(String dbName, String tableName,\n                         Map<String, String> partitionSpec)", "testcase": false, "constructor": false}, {"identifier": "addPartition", "parameters": "(HCatAddPartitionDesc partInfo)", "modifiers": "public abstract", "return": "void", "signature": "void addPartition(HCatAddPartitionDesc partInfo)", "full_signature": "public abstract void addPartition(HCatAddPartitionDesc partInfo)", "class_method_signature": "HCatClient.addPartition(HCatAddPartitionDesc partInfo)", "testcase": false, "constructor": false}, {"identifier": "addPartitions", "parameters": "(List<HCatAddPartitionDesc> partInfoList)", "modifiers": "public abstract", "return": "int", "signature": "int addPartitions(List<HCatAddPartitionDesc> partInfoList)", "full_signature": "public abstract int addPartitions(List<HCatAddPartitionDesc> partInfoList)", "class_method_signature": "HCatClient.addPartitions(List<HCatAddPartitionDesc> partInfoList)", "testcase": false, "constructor": false}, {"identifier": "dropPartitions", "parameters": "(String dbName, String tableName,\n                    Map<String, String> partitionSpec, boolean ifExists)", "modifiers": "public abstract", "return": "void", "signature": "void dropPartitions(String dbName, String tableName,\n                    Map<String, String> partitionSpec, boolean ifExists)", "full_signature": "public abstract void dropPartitions(String dbName, String tableName,\n                    Map<String, String> partitionSpec, boolean ifExists)", "class_method_signature": "HCatClient.dropPartitions(String dbName, String tableName,\n                    Map<String, String> partitionSpec, boolean ifExists)", "testcase": false, "constructor": false}, {"identifier": "listPartitionsByFilter", "parameters": "(String dbName, String tblName,\n                                 String filter)", "modifiers": "public abstract", "return": "List<HCatPartition>", "signature": "List<HCatPartition> listPartitionsByFilter(String dbName, String tblName,\n                                 String filter)", "full_signature": "public abstract List<HCatPartition> listPartitionsByFilter(String dbName, String tblName,\n                                 String filter)", "class_method_signature": "HCatClient.listPartitionsByFilter(String dbName, String tblName,\n                                 String filter)", "testcase": false, "constructor": false}, {"identifier": "markPartitionForEvent", "parameters": "(String dbName, String tblName,\n                         Map<String, String> partKVs, PartitionEventType eventType)", "modifiers": "public abstract", "return": "void", "signature": "void markPartitionForEvent(String dbName, String tblName,\n                         Map<String, String> partKVs, PartitionEventType eventType)", "full_signature": "public abstract void markPartitionForEvent(String dbName, String tblName,\n                         Map<String, String> partKVs, PartitionEventType eventType)", "class_method_signature": "HCatClient.markPartitionForEvent(String dbName, String tblName,\n                         Map<String, String> partKVs, PartitionEventType eventType)", "testcase": false, "constructor": false}, {"identifier": "isPartitionMarkedForEvent", "parameters": "(String dbName, String tblName,\n                            Map<String, String> partKVs, PartitionEventType eventType)", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isPartitionMarkedForEvent(String dbName, String tblName,\n                            Map<String, String> partKVs, PartitionEventType eventType)", "full_signature": "public abstract boolean isPartitionMarkedForEvent(String dbName, String tblName,\n                            Map<String, String> partKVs, PartitionEventType eventType)", "class_method_signature": "HCatClient.isPartitionMarkedForEvent(String dbName, String tblName,\n                            Map<String, String> partKVs, PartitionEventType eventType)", "testcase": false, "constructor": false}, {"identifier": "getDelegationToken", "parameters": "(String owner,\n                        String renewerKerberosPrincipalName)", "modifiers": "public abstract", "return": "String", "signature": "String getDelegationToken(String owner,\n                        String renewerKerberosPrincipalName)", "full_signature": "public abstract String getDelegationToken(String owner,\n                        String renewerKerberosPrincipalName)", "class_method_signature": "HCatClient.getDelegationToken(String owner,\n                        String renewerKerberosPrincipalName)", "testcase": false, "constructor": false}, {"identifier": "renewDelegationToken", "parameters": "(String tokenStrForm)", "modifiers": "public abstract", "return": "long", "signature": "long renewDelegationToken(String tokenStrForm)", "full_signature": "public abstract long renewDelegationToken(String tokenStrForm)", "class_method_signature": "HCatClient.renewDelegationToken(String tokenStrForm)", "testcase": false, "constructor": false}, {"identifier": "cancelDelegationToken", "parameters": "(String tokenStrForm)", "modifiers": "public abstract", "return": "void", "signature": "void cancelDelegationToken(String tokenStrForm)", "full_signature": "public abstract void cancelDelegationToken(String tokenStrForm)", "class_method_signature": "HCatClient.cancelDelegationToken(String tokenStrForm)", "testcase": false, "constructor": false}, {"identifier": "getMessageBusTopicName", "parameters": "(String dbName, String tableName)", "modifiers": "public abstract", "return": "String", "signature": "String getMessageBusTopicName(String dbName, String tableName)", "full_signature": "public abstract String getMessageBusTopicName(String dbName, String tableName)", "class_method_signature": "HCatClient.getMessageBusTopicName(String dbName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public abstract", "return": "void", "signature": "void close()", "full_signature": "public abstract void close()", "class_method_signature": "HCatClient.close()", "testcase": false, "constructor": false}], "file": "hcatalog/webhcat/java-client/src/main/java/org/apache/hive/hcatalog/api/HCatClient.java"}, "focal_method": {"identifier": "updateTableSchema", "parameters": "(String dbName, String tableName, List<HCatFieldSchema> columnSchema)", "modifiers": "public abstract", "return": "void", "body": "public abstract void updateTableSchema(String dbName, String tableName, List<HCatFieldSchema> columnSchema)\n    throws HCatException;", "signature": "void updateTableSchema(String dbName, String tableName, List<HCatFieldSchema> columnSchema)", "full_signature": "public abstract void updateTableSchema(String dbName, String tableName, List<HCatFieldSchema> columnSchema)", "class_method_signature": "HCatClient.updateTableSchema(String dbName, String tableName, List<HCatFieldSchema> columnSchema)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 272398615, "url": "https://github.com/zhihuili/project-panthera-ase", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 59864, "license": "licensed"}}