{"test_class": {"identifier": "RandomAccessFileInputStreamTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RandomAccessFileInputStream stream = null;", "modifier": "private", "type": "RandomAccessFileInputStream", "declarator": "stream = null", "var_name": "stream"}, {"original_string": "private byte[] testData = null;", "modifier": "private", "type": "byte[]", "declarator": "testData = null", "var_name": "testData"}, {"original_string": "private File tempFile = null;", "modifier": "private", "type": "File", "declarator": "tempFile = null", "var_name": "tempFile"}], "file": "feya/libraries/archive_diff/diff.shared/src/test/java/com/google/archivepatcher/shared/RandomAccessFileInputStreamTest.java"}, "test_case": {"identifier": "testAvailable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAvailable() throws IOException {\n    // Available always knows the answer precisely unless the file length exceeds Integer.MAX_VALUE\n    Assert.assertEquals(testData.length, stream.available());\n    stream.read(new byte[17]);\n    Assert.assertEquals(testData.length - 17, stream.available());\n    stream.read(new byte[testData.length]);\n    Assert.assertEquals(0, stream.available());\n    stream.read();\n    Assert.assertEquals(0, stream.available());\n  }", "signature": "void testAvailable()", "full_signature": "@Test public void testAvailable()", "class_method_signature": "RandomAccessFileInputStreamTest.testAvailable()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "available", "read", "assertEquals", "available", "read", "assertEquals", "available", "read", "assertEquals", "available"]}, "focal_class": {"identifier": "RandomAccessFileInputStream", "superclass": "extends InputStream", "interfaces": "", "fields": [{"original_string": "private final RandomAccessFile raf;", "modifier": "private final", "type": "RandomAccessFile", "declarator": "raf", "var_name": "raf"}, {"original_string": "private long mark = -1;", "modifier": "private", "type": "long", "declarator": "mark = -1", "var_name": "mark"}, {"original_string": "private long rangeOffset;", "modifier": "private", "type": "long", "declarator": "rangeOffset", "var_name": "rangeOffset"}, {"original_string": "private long rangeLength;", "modifier": "private", "type": "long", "declarator": "rangeLength", "var_name": "rangeLength"}, {"original_string": "private final long fileLength;", "modifier": "private final", "type": "long", "declarator": "fileLength", "var_name": "fileLength"}], "methods": [{"identifier": "RandomAccessFileInputStream", "parameters": "(File file)", "modifiers": "public", "return": "", "signature": " RandomAccessFileInputStream(File file)", "full_signature": "public  RandomAccessFileInputStream(File file)", "class_method_signature": "RandomAccessFileInputStream.RandomAccessFileInputStream(File file)", "testcase": false, "constructor": true}, {"identifier": "RandomAccessFileInputStream", "parameters": "(File file, long rangeOffset, long rangeLength)", "modifiers": "public", "return": "", "signature": " RandomAccessFileInputStream(File file, long rangeOffset, long rangeLength)", "full_signature": "public  RandomAccessFileInputStream(File file, long rangeOffset, long rangeLength)", "class_method_signature": "RandomAccessFileInputStream.RandomAccessFileInputStream(File file, long rangeOffset, long rangeLength)", "testcase": false, "constructor": true}, {"identifier": "getRandomAccessFile", "parameters": "(File file)", "modifiers": "protected", "return": "RandomAccessFile", "signature": "RandomAccessFile getRandomAccessFile(File file)", "full_signature": "protected RandomAccessFile getRandomAccessFile(File file)", "class_method_signature": "RandomAccessFileInputStream.getRandomAccessFile(File file)", "testcase": false, "constructor": false}, {"identifier": "setRange", "parameters": "(long rangeOffset, long rangeLength)", "modifiers": "public", "return": "void", "signature": "void setRange(long rangeOffset, long rangeLength)", "full_signature": "public void setRange(long rangeOffset, long rangeLength)", "class_method_signature": "RandomAccessFileInputStream.setRange(long rangeOffset, long rangeLength)", "testcase": false, "constructor": false}, {"identifier": "available", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int available()", "full_signature": "@Override public int available()", "class_method_signature": "RandomAccessFileInputStream.available()", "testcase": false, "constructor": false}, {"identifier": "getPosition", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getPosition()", "full_signature": "public long getPosition()", "class_method_signature": "RandomAccessFileInputStream.getPosition()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "RandomAccessFileInputStream.close()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int read()", "full_signature": "@Override public int read()", "class_method_signature": "RandomAccessFileInputStream.read()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(byte[] b, int off, int len)", "modifiers": "@Override public", "return": "int", "signature": "int read(byte[] b, int off, int len)", "full_signature": "@Override public int read(byte[] b, int off, int len)", "class_method_signature": "RandomAccessFileInputStream.read(byte[] b, int off, int len)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(byte[] b)", "modifiers": "@Override public", "return": "int", "signature": "int read(byte[] b)", "full_signature": "@Override public int read(byte[] b)", "class_method_signature": "RandomAccessFileInputStream.read(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "skip", "parameters": "(long n)", "modifiers": "@Override public", "return": "long", "signature": "long skip(long n)", "full_signature": "@Override public long skip(long n)", "class_method_signature": "RandomAccessFileInputStream.skip(long n)", "testcase": false, "constructor": false}, {"identifier": "markSupported", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean markSupported()", "full_signature": "@Override public boolean markSupported()", "class_method_signature": "RandomAccessFileInputStream.markSupported()", "testcase": false, "constructor": false}, {"identifier": "mark", "parameters": "(int readlimit)", "modifiers": "@Override public", "return": "void", "signature": "void mark(int readlimit)", "full_signature": "@Override public void mark(int readlimit)", "class_method_signature": "RandomAccessFileInputStream.mark(int readlimit)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "RandomAccessFileInputStream.reset()", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long length()", "full_signature": "public long length()", "class_method_signature": "RandomAccessFileInputStream.length()", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.shared/src/main/java/com/google/archivepatcher/shared/RandomAccessFileInputStream.java"}, "focal_method": {"identifier": "available", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int available() throws IOException {\n    long rangeRelativePosition = raf.getFilePointer() - rangeOffset;\n    long result = rangeLength - rangeRelativePosition;\n    if (result > Integer.MAX_VALUE) {\n      return Integer.MAX_VALUE;\n    }\n    return (int) result;\n  }", "signature": "int available()", "full_signature": "@Override public int available()", "class_method_signature": "RandomAccessFileInputStream.available()", "testcase": false, "constructor": false, "invocations": ["getFilePointer"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}