{"test_class": {"identifier": "DateTimeUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DatePickerDetails gregorian;", "modifier": "private", "type": "DatePickerDetails", "declarator": "gregorian", "var_name": "gregorian"}, {"original_string": "private DatePickerDetails gregorianSpinners;", "modifier": "private", "type": "DatePickerDetails", "declarator": "gregorianSpinners", "var_name": "gregorianSpinners"}, {"original_string": "private DatePickerDetails gregorianMonthYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "gregorianMonthYear", "var_name": "gregorianMonthYear"}, {"original_string": "private DatePickerDetails gregorianYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "gregorianYear", "var_name": "gregorianYear"}, {"original_string": "private DatePickerDetails ethiopian;", "modifier": "private", "type": "DatePickerDetails", "declarator": "ethiopian", "var_name": "ethiopian"}, {"original_string": "private DatePickerDetails ethiopianMonthYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "ethiopianMonthYear", "var_name": "ethiopianMonthYear"}, {"original_string": "private DatePickerDetails ethiopianYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "ethiopianYear", "var_name": "ethiopianYear"}, {"original_string": "private DatePickerDetails coptic;", "modifier": "private", "type": "DatePickerDetails", "declarator": "coptic", "var_name": "coptic"}, {"original_string": "private DatePickerDetails copticMonthYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "copticMonthYear", "var_name": "copticMonthYear"}, {"original_string": "private DatePickerDetails copticYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "copticYear", "var_name": "copticYear"}, {"original_string": "private DatePickerDetails islamic;", "modifier": "private", "type": "DatePickerDetails", "declarator": "islamic", "var_name": "islamic"}, {"original_string": "private DatePickerDetails islamicMonthYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "islamicMonthYear", "var_name": "islamicMonthYear"}, {"original_string": "private DatePickerDetails islamicYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "islamicYear", "var_name": "islamicYear"}, {"original_string": "private DatePickerDetails bikramSambat;", "modifier": "private", "type": "DatePickerDetails", "declarator": "bikramSambat", "var_name": "bikramSambat"}, {"original_string": "private DatePickerDetails bikramSambatMonthYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "bikramSambatMonthYear", "var_name": "bikramSambatMonthYear"}, {"original_string": "private DatePickerDetails bikramSambatYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "bikramSambatYear", "var_name": "bikramSambatYear"}, {"original_string": "private DatePickerDetails myanmar;", "modifier": "private", "type": "DatePickerDetails", "declarator": "myanmar", "var_name": "myanmar"}, {"original_string": "private DatePickerDetails myanmarMonthYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "myanmarMonthYear", "var_name": "myanmarMonthYear"}, {"original_string": "private DatePickerDetails myanmarYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "myanmarYear", "var_name": "myanmarYear"}, {"original_string": "private DatePickerDetails persian;", "modifier": "private", "type": "DatePickerDetails", "declarator": "persian", "var_name": "persian"}, {"original_string": "private DatePickerDetails persianMonthYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "persianMonthYear", "var_name": "persianMonthYear"}, {"original_string": "private DatePickerDetails persianYear;", "modifier": "private", "type": "DatePickerDetails", "declarator": "persianYear", "var_name": "persianYear"}], "file": "collect_app/src/test/java/org/odk/collect/android/utilities/DateTimeUtilsTest.java"}, "test_case": {"identifier": "getDatePickerDetailsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getDatePickerDetailsTest() {\n        assertEquals(gregorian, DateTimeUtils.getDatePickerDetails(null));\n        String appearance = \"something\";\n        assertEquals(gregorian, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"no-calendar\";\n        assertEquals(gregorianSpinners, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"NO-CALENDAR\";\n        assertEquals(gregorianSpinners, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"month-year\";\n        assertEquals(gregorianMonthYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"MONTH-year\";\n        assertEquals(gregorianMonthYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"year\";\n        assertEquals(gregorianYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"Year\";\n        assertEquals(gregorianYear, DateTimeUtils.getDatePickerDetails(appearance));\n\n        appearance = \"ethiopian\";\n        assertEquals(ethiopian, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"Ethiopian month-year\";\n        assertEquals(ethiopianMonthYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"month-year ethiopian\";\n        assertEquals(ethiopianMonthYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"Ethiopian year\";\n        assertEquals(ethiopianYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"year ethiopian\";\n        assertEquals(ethiopianYear, DateTimeUtils.getDatePickerDetails(appearance));\n\n        appearance = \"coptic\";\n        assertEquals(coptic, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"Coptic month-year\";\n        assertEquals(copticMonthYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"month-year coptic\";\n        assertEquals(copticMonthYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"Coptic year\";\n        assertEquals(copticYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"year coptic\";\n        assertEquals(copticYear, DateTimeUtils.getDatePickerDetails(appearance));\n\n        appearance = \"islamic\";\n        assertEquals(islamic, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"Islamic month-year\";\n        assertEquals(islamicMonthYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"month-year islamic\";\n        assertEquals(islamicMonthYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"Islamic year\";\n        assertEquals(islamicYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"year islamic\";\n        assertEquals(islamicYear, DateTimeUtils.getDatePickerDetails(appearance));\n\n        appearance = \"bikram-sambat\";\n        assertEquals(bikramSambat, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"Bikram-sambat month-year\";\n        assertEquals(bikramSambatMonthYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"month-year bikram-sambat\";\n        assertEquals(bikramSambatMonthYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"Bikram-sambat year\";\n        assertEquals(bikramSambatYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"year bikram-sambat\";\n        assertEquals(bikramSambatYear, DateTimeUtils.getDatePickerDetails(appearance));\n\n        appearance = \"myanmar\";\n        assertEquals(myanmar, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"Myanmar month-year\";\n        assertEquals(myanmarMonthYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"month-year myanmar\";\n        assertEquals(myanmarMonthYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"Myanmar year\";\n        assertEquals(myanmarYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"year myanmar\";\n        assertEquals(myanmarYear, DateTimeUtils.getDatePickerDetails(appearance));\n\n        appearance = \"persian\";\n        assertEquals(persian, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"Persian month-year\";\n        assertEquals(persianMonthYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"month-year persian\";\n        assertEquals(persianMonthYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"Persian year\";\n        assertEquals(persianYear, DateTimeUtils.getDatePickerDetails(appearance));\n        appearance = \"year persian\";\n        assertEquals(persianYear, DateTimeUtils.getDatePickerDetails(appearance));\n    }", "signature": "void getDatePickerDetailsTest()", "full_signature": "@Test public void getDatePickerDetailsTest()", "class_method_signature": "DateTimeUtilsTest.getDatePickerDetailsTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails", "assertEquals", "getDatePickerDetails"]}, "focal_class": {"identifier": "DateTimeUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SERVER_DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";", "modifier": "private static final", "type": "String", "declarator": "SERVER_DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"", "var_name": "SERVER_DATE_FORMAT"}], "methods": [{"identifier": "DateTimeUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " DateTimeUtils()", "full_signature": "private  DateTimeUtils()", "class_method_signature": "DateTimeUtils.DateTimeUtils()", "testcase": false, "constructor": true}, {"identifier": "getGregorianDateTimeLabel", "parameters": "(Date date, DatePickerDetails datePickerDetails, boolean containsTime, Locale locale)", "modifiers": "private static", "return": "String", "signature": "String getGregorianDateTimeLabel(Date date, DatePickerDetails datePickerDetails, boolean containsTime, Locale locale)", "full_signature": "private static String getGregorianDateTimeLabel(Date date, DatePickerDetails datePickerDetails, boolean containsTime, Locale locale)", "class_method_signature": "DateTimeUtils.getGregorianDateTimeLabel(Date date, DatePickerDetails datePickerDetails, boolean containsTime, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "getDateTimeLabel", "parameters": "(Date date, DatePickerDetails datePickerDetails, boolean containsTime, Context context)", "modifiers": "public static", "return": "String", "signature": "String getDateTimeLabel(Date date, DatePickerDetails datePickerDetails, boolean containsTime, Context context)", "full_signature": "public static String getDateTimeLabel(Date date, DatePickerDetails datePickerDetails, boolean containsTime, Context context)", "class_method_signature": "DateTimeUtils.getDateTimeLabel(Date date, DatePickerDetails datePickerDetails, boolean containsTime, Context context)", "testcase": false, "constructor": false}, {"identifier": "getDateTimeSkeleton", "parameters": "(boolean containsTime, DatePickerDetails datePickerDetails)", "modifiers": "private static", "return": "String", "signature": "String getDateTimeSkeleton(boolean containsTime, DatePickerDetails datePickerDetails)", "full_signature": "private static String getDateTimeSkeleton(boolean containsTime, DatePickerDetails datePickerDetails)", "class_method_signature": "DateTimeUtils.getDateTimeSkeleton(boolean containsTime, DatePickerDetails datePickerDetails)", "testcase": false, "constructor": false}, {"identifier": "skipDaylightSavingGapIfExists", "parameters": "(LocalDateTime date)", "modifiers": "public static", "return": "LocalDateTime", "signature": "LocalDateTime skipDaylightSavingGapIfExists(LocalDateTime date)", "full_signature": "public static LocalDateTime skipDaylightSavingGapIfExists(LocalDateTime date)", "class_method_signature": "DateTimeUtils.skipDaylightSavingGapIfExists(LocalDateTime date)", "testcase": false, "constructor": false}, {"identifier": "getDatePickerDetails", "parameters": "(String appearance)", "modifiers": "public static", "return": "DatePickerDetails", "signature": "DatePickerDetails getDatePickerDetails(String appearance)", "full_signature": "public static DatePickerDetails getDatePickerDetails(String appearance)", "class_method_signature": "DateTimeUtils.getDatePickerDetails(String appearance)", "testcase": false, "constructor": false}, {"identifier": "tsToSec8601", "parameters": "(String timestamp)", "modifiers": "public static", "return": "long", "signature": "long tsToSec8601(String timestamp)", "full_signature": "public static long tsToSec8601(String timestamp)", "class_method_signature": "DateTimeUtils.tsToSec8601(String timestamp)", "testcase": false, "constructor": false}, {"identifier": "formatDateFromServer", "parameters": "(String time)", "modifiers": "public static", "return": "String", "signature": "String formatDateFromServer(String time)", "full_signature": "public static String formatDateFromServer(String time)", "class_method_signature": "DateTimeUtils.formatDateFromServer(String time)", "testcase": false, "constructor": false}, {"identifier": "getRelativeTime", "parameters": "(String dateTime, Boolean dateTimeFromServer)", "modifiers": "public static", "return": "String", "signature": "String getRelativeTime(String dateTime, Boolean dateTimeFromServer)", "full_signature": "public static String getRelativeTime(String dateTime, Boolean dateTimeFromServer)", "class_method_signature": "DateTimeUtils.getRelativeTime(String dateTime, Boolean dateTimeFromServer)", "testcase": false, "constructor": false}, {"identifier": "getFormattedDate", "parameters": "(String format, long time)", "modifiers": "public static", "return": "String", "signature": "String getFormattedDate(String format, long time)", "full_signature": "public static String getFormattedDate(String format, long time)", "class_method_signature": "DateTimeUtils.getFormattedDate(String format, long time)", "testcase": false, "constructor": false}], "file": "collect_app/src/main/java/org/odk/collect/android/utilities/DateTimeUtils.java"}, "focal_method": {"identifier": "getDatePickerDetails", "parameters": "(String appearance)", "modifiers": "public static", "return": "DatePickerDetails", "body": "public static DatePickerDetails getDatePickerDetails(String appearance) {\n        DatePickerDetails.DatePickerType datePickerType = DatePickerDetails.DatePickerType.GREGORIAN;\n        DatePickerDetails.DatePickerMode datePickerMode = DatePickerDetails.DatePickerMode.CALENDAR;\n        if (appearance != null) {\n            appearance = appearance.toLowerCase(Locale.US);\n            if (appearance.contains(WidgetAppearanceUtils.ETHIOPIAN)) {\n                datePickerType = DatePickerDetails.DatePickerType.ETHIOPIAN;\n                datePickerMode = DatePickerDetails.DatePickerMode.SPINNERS;\n            } else if (appearance.contains(WidgetAppearanceUtils.COPTIC)) {\n                datePickerType = DatePickerDetails.DatePickerType.COPTIC;\n                datePickerMode = DatePickerDetails.DatePickerMode.SPINNERS;\n            } else if (appearance.contains(WidgetAppearanceUtils.ISLAMIC)) {\n                datePickerType = DatePickerDetails.DatePickerType.ISLAMIC;\n                datePickerMode = DatePickerDetails.DatePickerMode.SPINNERS;\n            } else if (appearance.contains(WidgetAppearanceUtils.BIKRAM_SAMBAT)) {\n                datePickerType = DatePickerDetails.DatePickerType.BIKRAM_SAMBAT;\n                datePickerMode = DatePickerDetails.DatePickerMode.SPINNERS;\n            } else if (appearance.contains(WidgetAppearanceUtils.MYANMAR)) {\n                datePickerType = DatePickerDetails.DatePickerType.MYANMAR;\n                datePickerMode = DatePickerDetails.DatePickerMode.SPINNERS;\n            } else if (appearance.contains(WidgetAppearanceUtils.PERSIAN)) {\n                datePickerType = DatePickerDetails.DatePickerType.PERSIAN;\n                datePickerMode = DatePickerDetails.DatePickerMode.SPINNERS;\n            } else if (appearance.contains(WidgetAppearanceUtils.NO_CALENDAR)) {\n                datePickerMode = DatePickerDetails.DatePickerMode.SPINNERS;\n            }\n\n            if (appearance.contains(WidgetAppearanceUtils.MONTH_YEAR)) {\n                datePickerMode = DatePickerDetails.DatePickerMode.MONTH_YEAR;\n            } else if (appearance.contains(WidgetAppearanceUtils.YEAR)) {\n                datePickerMode = DatePickerDetails.DatePickerMode.YEAR;\n            }\n        }\n\n        return new DatePickerDetails(datePickerType, datePickerMode);\n    }", "signature": "DatePickerDetails getDatePickerDetails(String appearance)", "full_signature": "public static DatePickerDetails getDatePickerDetails(String appearance)", "class_method_signature": "DateTimeUtils.getDatePickerDetails(String appearance)", "testcase": false, "constructor": false, "invocations": ["toLowerCase", "contains", "contains", "contains", "contains", "contains", "contains", "contains", "contains", "contains"]}, "repository": {"repo_id": 166636413, "url": "https://github.com/fieldsight/fieldsight-mobile", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 41030, "license": "licensed"}}