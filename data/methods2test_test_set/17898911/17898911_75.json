{"test_class": {"identifier": "NavTilesWidgetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    NavTilesWidget.View view;", "modifier": "@Mock", "type": "NavTilesWidget.View", "declarator": "view", "var_name": "view"}, {"original_string": "@Mock\n    PerspectivePluginManager pluginManager;", "modifier": "@Mock", "type": "PerspectivePluginManager", "declarator": "pluginManager", "var_name": "pluginManager"}, {"original_string": "@Mock\n    NavigationManager navigationManager;", "modifier": "@Mock", "type": "NavigationManager", "declarator": "navigationManager", "var_name": "navigationManager"}, {"original_string": "@Mock\n    SyncBeanManager beanManager;", "modifier": "@Mock", "type": "SyncBeanManager", "declarator": "beanManager", "var_name": "beanManager"}, {"original_string": "@Mock\n    PlaceManager placeManager;", "modifier": "@Mock", "type": "PlaceManager", "declarator": "placeManager", "var_name": "placeManager"}, {"original_string": "@Mock\n    SyncBeanDef<NavItemTileWidget> tileWidgetBeanDef;", "modifier": "@Mock", "type": "SyncBeanDef<NavItemTileWidget>", "declarator": "tileWidgetBeanDef", "var_name": "tileWidgetBeanDef"}, {"original_string": "@Mock\n    NavItemTileWidget tileWidget;", "modifier": "@Mock", "type": "NavItemTileWidget", "declarator": "tileWidget", "var_name": "tileWidget"}, {"original_string": "NavTilesWidget presenter;", "modifier": "", "type": "NavTilesWidget", "declarator": "presenter", "var_name": "presenter"}, {"original_string": "NavTree tree;", "modifier": "", "type": "NavTree", "declarator": "tree", "var_name": "tree"}], "file": "dashbuilder-client/dashbuilder-navigation-client/src/test/java/org/dashbuilder/client/navigation/widget/NavTilesWidgetTest.java"}, "test_case": {"identifier": "testOpenItem", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOpenItem() {\n        NavItem navItem = tree.getItemById(\"A\");\n        presenter.openItem(navItem);\n        assertEquals(presenter.getNavItemStack().size(), 2);\n\n        verify(view, times(3)).addTileWidget(tileWidget);\n        verify(view).clearBreadcrumb();\n        verify(view).addBreadcrumbItem(eq(\"Home\"), any());\n        verify(view).addBreadcrumbItem(eq(\"A\"));\n\n        reset(view);\n        navItem = tree.getItemById(\"A3\");\n        presenter.openItem(navItem);\n        assertEquals(presenter.getNavItemStack().size(), 3);\n\n        verify(view, times(1)).addTileWidget(tileWidget);\n        verify(view).clearBreadcrumb();\n        verify(view).addBreadcrumbItem(eq(\"Home\"), any());\n        verify(view).addBreadcrumbItem(eq(\"A\"), any());\n        verify(view).addBreadcrumbItem(eq(\"A3\"));\n    }", "signature": "void testOpenItem()", "full_signature": "@Test public void testOpenItem()", "class_method_signature": "NavTilesWidgetTest.testOpenItem()", "testcase": true, "constructor": false, "invocations": ["getItemById", "openItem", "assertEquals", "size", "getNavItemStack", "addTileWidget", "verify", "times", "clearBreadcrumb", "verify", "addBreadcrumbItem", "verify", "eq", "any", "addBreadcrumbItem", "verify", "eq", "reset", "getItemById", "openItem", "assertEquals", "size", "getNavItemStack", "addTileWidget", "verify", "times", "clearBreadcrumb", "verify", "addBreadcrumbItem", "verify", "eq", "any", "addBreadcrumbItem", "verify", "eq", "any", "addBreadcrumbItem", "verify", "eq"]}, "focal_class": {"identifier": "NavTilesWidget", "superclass": "extends BaseNavWidget", "interfaces": "", "fields": [{"original_string": "View view;", "modifier": "", "type": "View", "declarator": "view", "var_name": "view"}, {"original_string": "PerspectivePluginManager perspectivePluginManager;", "modifier": "", "type": "PerspectivePluginManager", "declarator": "perspectivePluginManager", "var_name": "perspectivePluginManager"}, {"original_string": "PlaceManager placeManager;", "modifier": "", "type": "PlaceManager", "declarator": "placeManager", "var_name": "placeManager"}, {"original_string": "SyncBeanManager beanManager;", "modifier": "", "type": "SyncBeanManager", "declarator": "beanManager", "var_name": "beanManager"}, {"original_string": "NavItem currentPerspectiveNavItem = null;", "modifier": "", "type": "NavItem", "declarator": "currentPerspectiveNavItem = null", "var_name": "currentPerspectiveNavItem"}, {"original_string": "Stack<NavItem> navItemStack = new Stack<>();", "modifier": "", "type": "Stack<NavItem>", "declarator": "navItemStack = new Stack<>()", "var_name": "navItemStack"}], "methods": [{"identifier": "NavTilesWidget", "parameters": "(View view,\n                          NavigationManager navigationManager,\n                          PerspectivePluginManager perspectivePluginManager,\n                          PlaceManager placeManager,\n                          SyncBeanManager beanManager)", "modifiers": "@Inject public", "return": "", "signature": " NavTilesWidget(View view,\n                          NavigationManager navigationManager,\n                          PerspectivePluginManager perspectivePluginManager,\n                          PlaceManager placeManager,\n                          SyncBeanManager beanManager)", "full_signature": "@Inject public  NavTilesWidget(View view,\n                          NavigationManager navigationManager,\n                          PerspectivePluginManager perspectivePluginManager,\n                          PlaceManager placeManager,\n                          SyncBeanManager beanManager)", "class_method_signature": "NavTilesWidget.NavTilesWidget(View view,\n                          NavigationManager navigationManager,\n                          PerspectivePluginManager perspectivePluginManager,\n                          PlaceManager placeManager,\n                          SyncBeanManager beanManager)", "testcase": false, "constructor": true}, {"identifier": "getNavItemStack", "parameters": "()", "modifiers": "public", "return": "Stack<NavItem>", "signature": "Stack<NavItem> getNavItemStack()", "full_signature": "public Stack<NavItem> getNavItemStack()", "class_method_signature": "NavTilesWidget.getNavItemStack()", "testcase": false, "constructor": false}, {"identifier": "show", "parameters": "(NavGroup navGroup)", "modifiers": "@Override public", "return": "void", "signature": "void show(NavGroup navGroup)", "full_signature": "@Override public void show(NavGroup navGroup)", "class_method_signature": "NavTilesWidget.show(NavGroup navGroup)", "testcase": false, "constructor": false}, {"identifier": "show", "parameters": "(List<NavItem> itemList)", "modifiers": "@Override public", "return": "void", "signature": "void show(List<NavItem> itemList)", "full_signature": "@Override public void show(List<NavItem> itemList)", "class_method_signature": "NavTilesWidget.show(List<NavItem> itemList)", "testcase": false, "constructor": false}, {"identifier": "show", "parameters": "(NavGroup navGroup, boolean clearBreadcrumb)", "modifiers": "public", "return": "void", "signature": "void show(NavGroup navGroup, boolean clearBreadcrumb)", "full_signature": "public void show(NavGroup navGroup, boolean clearBreadcrumb)", "class_method_signature": "NavTilesWidget.show(NavGroup navGroup, boolean clearBreadcrumb)", "testcase": false, "constructor": false}, {"identifier": "showItem", "parameters": "(NavItem navItem)", "modifiers": "@Override protected", "return": "void", "signature": "void showItem(NavItem navItem)", "full_signature": "@Override protected void showItem(NavItem navItem)", "class_method_signature": "NavTilesWidget.showItem(NavItem navItem)", "testcase": false, "constructor": false}, {"identifier": "showGroup", "parameters": "(NavGroup navGroup)", "modifiers": "@Override protected", "return": "void", "signature": "void showGroup(NavGroup navGroup)", "full_signature": "@Override protected void showGroup(NavGroup navGroup)", "class_method_signature": "NavTilesWidget.showGroup(NavGroup navGroup)", "testcase": false, "constructor": false}, {"identifier": "openItem", "parameters": "(NavItem navItem)", "modifiers": "public", "return": "void", "signature": "void openItem(NavItem navItem)", "full_signature": "public void openItem(NavItem navItem)", "class_method_signature": "NavTilesWidget.openItem(NavItem navItem)", "testcase": false, "constructor": false}, {"identifier": "openPerspective", "parameters": "(NavItem perspectiveItem)", "modifiers": "protected", "return": "void", "signature": "void openPerspective(NavItem perspectiveItem)", "full_signature": "protected void openPerspective(NavItem perspectiveItem)", "class_method_signature": "NavTilesWidget.openPerspective(NavItem perspectiveItem)", "testcase": false, "constructor": false}, {"identifier": "onInfiniteRecursion", "parameters": "(LayoutRecursionIssue issue)", "modifiers": "public", "return": "void", "signature": "void onInfiniteRecursion(LayoutRecursionIssue issue)", "full_signature": "public void onInfiniteRecursion(LayoutRecursionIssue issue)", "class_method_signature": "NavTilesWidget.onInfiniteRecursion(LayoutRecursionIssue issue)", "testcase": false, "constructor": false}, {"identifier": "updateBreadcrumb", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void updateBreadcrumb()", "full_signature": "protected void updateBreadcrumb()", "class_method_signature": "NavTilesWidget.updateBreadcrumb()", "testcase": false, "constructor": false}, {"identifier": "gotoBreadcrumbItem", "parameters": "(NavItem navItem)", "modifiers": "public", "return": "void", "signature": "void gotoBreadcrumbItem(NavItem navItem)", "full_signature": "public void gotoBreadcrumbItem(NavItem navItem)", "class_method_signature": "NavTilesWidget.gotoBreadcrumbItem(NavItem navItem)", "testcase": false, "constructor": false}, {"identifier": "onPerspectiveChanged", "parameters": "(@Observes PluginSaved event)", "modifiers": "private", "return": "void", "signature": "void onPerspectiveChanged(@Observes PluginSaved event)", "full_signature": "private void onPerspectiveChanged(@Observes PluginSaved event)", "class_method_signature": "NavTilesWidget.onPerspectiveChanged(@Observes PluginSaved event)", "testcase": false, "constructor": false}], "file": "dashbuilder-client/dashbuilder-navigation-client/src/main/java/org/dashbuilder/client/navigation/widget/NavTilesWidget.java"}, "focal_method": {"identifier": "openItem", "parameters": "(NavItem navItem)", "modifiers": "public", "return": "void", "body": "public void openItem(NavItem navItem) {\n        NavItem parent = navItem.getParent();\n        if (navItemStack.isEmpty()) {\n            if (parent != null) {\n                navItemStack.add(parent);\n                navItemStack.add(navItem);\n            }\n        } else {\n            navItemStack.add(navItem);\n        }\n        this.updateBreadcrumb();\n\n        if (navItem instanceof NavGroup) {\n            this.show((NavGroup) navItem, false);\n        }\n        else {\n            NavWorkbenchCtx navCtx = NavWorkbenchCtx.get(navItem);\n            String resourceId = navCtx.getResourceId();\n            if (resourceId != null && ActivityResourceType.PERSPECTIVE.equals(navCtx.getResourceType())) {\n\n                // Runtime perspectives are displayed inline\n                if (perspectivePluginManager.isRuntimePerspective(resourceId)) {\n                    openPerspective(navItem);\n                }\n                // Classic UF perspectives take over the entire window\n                else {\n                    placeManager.goTo(resourceId);\n                }\n            }\n        }\n    }", "signature": "void openItem(NavItem navItem)", "full_signature": "public void openItem(NavItem navItem)", "class_method_signature": "NavTilesWidget.openItem(NavItem navItem)", "testcase": false, "constructor": false, "invocations": ["getParent", "isEmpty", "add", "add", "add", "updateBreadcrumb", "show", "get", "getResourceId", "equals", "getResourceType", "isRuntimePerspective", "openPerspective", "goTo"]}, "repository": {"repo_id": 17898911, "url": "https://github.com/dashbuilder/dashbuilder", "language": "Java", "is_fork": false, "fork_count": 119, "stargazer_count": 160, "size": 10456, "license": "licensed"}}