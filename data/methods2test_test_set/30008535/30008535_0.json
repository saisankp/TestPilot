{"test_class": {"identifier": "EPLUtilitiesTest", "superclass": "", "interfaces": "", "fields": [], "file": "jetstream-esper/src/test/java/com/ebay/jetstream/epl/EPLUtilitiesTest.java"}, "test_case": {"identifier": "testFindIntersection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFindIntersection() {\n    Map<String, Object> map1 = new HashMap<String, Object>();\n    Map<String, Object> map2 = new HashMap<String, Object>();\n\n    // Double test\n    map1.put(\"score1\", 0.0888676767676767676767676767);\n    map2.put(\"score1\", 0.0888676767676767676767676767);\n    \n    System.out.println(EPLUtilities.findIntersection(map1, map2));\n\n    assertEquals(EPLUtilities.findIntersection(map1, map2).size(), 0); // No Change\n\n    map1.put(\"score1\", 0.0);\n    map2.put(\"score1\", 0.2);\n    assertEquals(EPLUtilities.findIntersection(map1, map2).size(), 1); // Value Change\n\n    clearSets(map1, map2);\n    map1.put(\"score1\", 0.0);\n    map2.put(\"score1\", 0.1);\n    map2.put(\"score2\", 0.2);\n    assertEquals(EPLUtilities.findIntersection(map1, map2).size(), 2); // Value Change + Addional Key\n\n    // String Test\n    clearSets(map1, map2);\n    map1.put(\"score1\", \"234\");\n    map2.put(\"score1\", \"234\");\n    assertEquals(EPLUtilities.findIntersection(map1, map2).size(), 0); // No change\n\n    clearSets(map1, map2);\n    map1.put(\"score1\", \"234\");\n    map2.put(\"score1\", \"234.4\");\n    assertEquals(EPLUtilities.findIntersection(map1, map2).size(), 1); // Value Change\n\n    clearSets(map1, map2);\n    map1.put(\"score1\", \"234\");\n    map2.put(\"score1\", \"234.4\");\n    map2.put(\"score2\", \"234.4\");\n    assertEquals(EPLUtilities.findIntersection(map1, map2).size(), 2); // Value Change + Additional Key\n\n    // Long Test\n    clearSets(map1, map2);\n    map1.put(\"score1\", 234L);\n    map2.put(\"score1\", 234L);\n    assertEquals(EPLUtilities.findIntersection(map1, map2).size(), 0); // No change\n\n    clearSets(map1, map2);\n    map1.put(\"score1\", 234L);\n    map2.put(\"score1\", 235L);\n    assertEquals(EPLUtilities.findIntersection(map1, map2).size(), 1); // Value Change\n\n    clearSets(map1, map2);\n    map1.put(\"score1\", 234L);\n    map2.put(\"score1\", 235L);\n    map2.put(\"score2\", 4444L);\n    assertEquals(EPLUtilities.findIntersection(map1, map2).size(), 2); // Value Change + Additional Key\n\n    // Float Test\n\n    clearSets(map1, map2);\n    map1.put(\"score1\", 234.5565f);\n    map2.put(\"score1\", 234.5565f);\n    assertEquals(EPLUtilities.findIntersection(map1, map2).size(), 0); // No change\n\n    clearSets(map1, map2);\n    map1.put(\"score1\", 234.5f);\n    map2.put(\"score1\", 235f);\n    assertEquals(EPLUtilities.findIntersection(map1, map2).size(), 1); // Value Change\n\n    clearSets(map1, map2);\n    map1.put(\"score1\", 234.5f);\n    map2.put(\"score1\", 235f);\n    map2.put(\"score2\", 666f);\n    assertEquals(EPLUtilities.findIntersection(map1, map2).size(), 2); // Value Change + Additional Key\n\n  }", "signature": "void testFindIntersection()", "full_signature": "@Test public void testFindIntersection()", "class_method_signature": "EPLUtilitiesTest.testFindIntersection()", "testcase": true, "constructor": false, "invocations": ["put", "put", "println", "findIntersection", "assertEquals", "size", "findIntersection", "put", "put", "assertEquals", "size", "findIntersection", "clearSets", "put", "put", "put", "assertEquals", "size", "findIntersection", "clearSets", "put", "put", "assertEquals", "size", "findIntersection", "clearSets", "put", "put", "assertEquals", "size", "findIntersection", "clearSets", "put", "put", "put", "assertEquals", "size", "findIntersection", "clearSets", "put", "put", "assertEquals", "size", "findIntersection", "clearSets", "put", "put", "assertEquals", "size", "findIntersection", "clearSets", "put", "put", "put", "assertEquals", "size", "findIntersection", "clearSets", "put", "put", "assertEquals", "size", "findIntersection", "clearSets", "put", "put", "assertEquals", "size", "findIntersection", "clearSets", "put", "put", "put", "assertEquals", "size", "findIntersection"]}, "focal_class": {"identifier": "EPLUtilities", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(\"com.ebay.jetstream.epl.EPLUtilities\");", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(\"com.ebay.jetstream.epl.EPLUtilities\")", "var_name": "logger"}, {"original_string": "private static final String LOGGING_COMPONENT_NAME = \"EPLUtilities\";", "modifier": "private static final", "type": "String", "declarator": "LOGGING_COMPONENT_NAME = \"EPLUtilities\"", "var_name": "LOGGING_COMPONENT_NAME"}, {"original_string": "private static final String EPL_STREAM_COLUMN1 = \"COLUMN1\";", "modifier": "private static final", "type": "String", "declarator": "EPL_STREAM_COLUMN1 = \"COLUMN1\"", "var_name": "EPL_STREAM_COLUMN1"}, {"original_string": "private static final String EPL_STREAM_COLUMN2 = \"COLUMN2\";", "modifier": "private static final", "type": "String", "declarator": "EPL_STREAM_COLUMN2 = \"COLUMN2\"", "var_name": "EPL_STREAM_COLUMN2"}, {"original_string": "private static final String EPL_STREAM_COLUMN3 = \"COLUMN3\";", "modifier": "private static final", "type": "String", "declarator": "EPL_STREAM_COLUMN3 = \"COLUMN3\"", "var_name": "EPL_STREAM_COLUMN3"}, {"original_string": "private static final String EPL_STREAM_NAME = \"name\";", "modifier": "private static final", "type": "String", "declarator": "EPL_STREAM_NAME = \"name\"", "var_name": "EPL_STREAM_NAME"}, {"original_string": "private static final String EPL_STREAM_VALUE = \"value\";", "modifier": "private static final", "type": "String", "declarator": "EPL_STREAM_VALUE = \"value\"", "var_name": "EPL_STREAM_VALUE"}, {"original_string": "private static final String SLICE_SEPARATOR = \"|\";", "modifier": "private static final", "type": "String", "declarator": "SLICE_SEPARATOR = \"|\"", "var_name": "SLICE_SEPARATOR"}, {"original_string": "private static boolean attributesAliasesBeanReported = false;", "modifier": "private static", "type": "boolean", "declarator": "attributesAliasesBeanReported = false", "var_name": "attributesAliasesBeanReported"}, {"original_string": "private static Random m_random = new SecureRandom();", "modifier": "private static", "type": "Random", "declarator": "m_random = new SecureRandom()", "var_name": "m_random"}], "methods": [{"identifier": "arrayToList", "parameters": "(T[] array)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> arrayToList(T[] array)", "full_signature": "public static List<T> arrayToList(T[] array)", "class_method_signature": "EPLUtilities.arrayToList(T[] array)", "testcase": false, "constructor": false}, {"identifier": "castToDouble", "parameters": "(Object object)", "modifiers": "public static", "return": "Double", "signature": "Double castToDouble(Object object)", "full_signature": "public static Double castToDouble(Object object)", "class_method_signature": "EPLUtilities.castToDouble(Object object)", "testcase": false, "constructor": false}, {"identifier": "castToDoubleArray", "parameters": "(Object[] array)", "modifiers": "public static", "return": "Double[]", "signature": "Double[] castToDoubleArray(Object[] array)", "full_signature": "public static Double[] castToDoubleArray(Object[] array)", "class_method_signature": "EPLUtilities.castToDoubleArray(Object[] array)", "testcase": false, "constructor": false}, {"identifier": "castToInteger", "parameters": "(Object object)", "modifiers": "public static", "return": "Integer", "signature": "Integer castToInteger(Object object)", "full_signature": "public static Integer castToInteger(Object object)", "class_method_signature": "EPLUtilities.castToInteger(Object object)", "testcase": false, "constructor": false}, {"identifier": "castToIntegerArray", "parameters": "(Object[] array)", "modifiers": "public static", "return": "Integer[]", "signature": "Integer[] castToIntegerArray(Object[] array)", "full_signature": "public static Integer[] castToIntegerArray(Object[] array)", "class_method_signature": "EPLUtilities.castToIntegerArray(Object[] array)", "testcase": false, "constructor": false}, {"identifier": "castToLong", "parameters": "(Object object)", "modifiers": "public static", "return": "Long", "signature": "Long castToLong(Object object)", "full_signature": "public static Long castToLong(Object object)", "class_method_signature": "EPLUtilities.castToLong(Object object)", "testcase": false, "constructor": false}, {"identifier": "castToLongArray", "parameters": "(Object[] array)", "modifiers": "public static", "return": "Long[]", "signature": "Long[] castToLongArray(Object[] array)", "full_signature": "public static Long[] castToLongArray(Object[] array)", "class_method_signature": "EPLUtilities.castToLongArray(Object[] array)", "testcase": false, "constructor": false}, {"identifier": "castToString", "parameters": "(Object object)", "modifiers": "public static", "return": "String", "signature": "String castToString(Object object)", "full_signature": "public static String castToString(Object object)", "class_method_signature": "EPLUtilities.castToString(Object object)", "testcase": false, "constructor": false}, {"identifier": "castToStringArray", "parameters": "(Object[] array)", "modifiers": "public static", "return": "String[]", "signature": "String[] castToStringArray(Object[] array)", "full_signature": "public static String[] castToStringArray(Object[] array)", "class_method_signature": "EPLUtilities.castToStringArray(Object[] array)", "testcase": false, "constructor": false}, {"identifier": "findIntersection", "parameters": "(Object set1, Object set2)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Map<String, Object>", "signature": "Map<String, Object> findIntersection(Object set1, Object set2)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Map<String, Object> findIntersection(Object set1, Object set2)", "class_method_signature": "EPLUtilities.findIntersection(Object set1, Object set2)", "testcase": false, "constructor": false}, {"identifier": "findIntersectionMap", "parameters": "(Map<String, Object> set1, Map<String, Object> set2)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> findIntersectionMap(Map<String, Object> set1, Map<String, Object> set2)", "full_signature": "public static Map<String, Object> findIntersectionMap(Map<String, Object> set1, Map<String, Object> set2)", "class_method_signature": "EPLUtilities.findIntersectionMap(Map<String, Object> set1, Map<String, Object> set2)", "testcase": false, "constructor": false}, {"identifier": "generateRandomDouble", "parameters": "(Object key)", "modifiers": "public static", "return": "Double", "signature": "Double generateRandomDouble(Object key)", "full_signature": "public static Double generateRandomDouble(Object key)", "class_method_signature": "EPLUtilities.generateRandomDouble(Object key)", "testcase": false, "constructor": false}, {"identifier": "getArrayElement", "parameters": "(T[] array, int at)", "modifiers": "public static", "return": "T", "signature": "T getArrayElement(T[] array, int at)", "full_signature": "public static T getArrayElement(T[] array, int at)", "class_method_signature": "EPLUtilities.getArrayElement(T[] array, int at)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(Object object, String key)", "modifiers": "public static", "return": "Object", "signature": "Object getAttribute(Object object, String key)", "full_signature": "public static Object getAttribute(Object object, String key)", "class_method_signature": "EPLUtilities.getAttribute(Object object, String key)", "testcase": false, "constructor": false}, {"identifier": "getAttributeDoubleValue", "parameters": "(List<Map<String, String>> attributes, String name)", "modifiers": "@Deprecated public static", "return": "Double", "signature": "Double getAttributeDoubleValue(List<Map<String, String>> attributes, String name)", "full_signature": "@Deprecated public static Double getAttributeDoubleValue(List<Map<String, String>> attributes, String name)", "class_method_signature": "EPLUtilities.getAttributeDoubleValue(List<Map<String, String>> attributes, String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeValue", "parameters": "(List<Map<String, String>> attributes, String name)", "modifiers": "public static", "return": "Object", "signature": "Object getAttributeValue(List<Map<String, String>> attributes, String name)", "full_signature": "public static Object getAttributeValue(List<Map<String, String>> attributes, String name)", "class_method_signature": "EPLUtilities.getAttributeValue(List<Map<String, String>> attributes, String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeValue", "parameters": "(Map<String, Object> attrs, String name)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Object", "signature": "Object getAttributeValue(Map<String, Object> attrs, String name)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Object getAttributeValue(Map<String, Object> attrs, String name)", "class_method_signature": "EPLUtilities.getAttributeValue(Map<String, Object> attrs, String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeValues", "parameters": "(List<Map<String, String>> attributes, String name)", "modifiers": "public static", "return": "List", "signature": "List getAttributeValues(List<Map<String, String>> attributes, String name)", "full_signature": "public static List getAttributeValues(List<Map<String, String>> attributes, String name)", "class_method_signature": "EPLUtilities.getAttributeValues(List<Map<String, String>> attributes, String name)", "testcase": false, "constructor": false}, {"identifier": "getBeanEntry", "parameters": "(Object bean, String name)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "Object", "signature": "Object getBeanEntry(Object bean, String name)", "full_signature": "@SuppressWarnings(\"unchecked\") private static Object getBeanEntry(Object bean, String name)", "class_method_signature": "EPLUtilities.getBeanEntry(Object bean, String name)", "testcase": false, "constructor": false}, {"identifier": "getCollectionSize", "parameters": "(Collection<?> collection)", "modifiers": "public static", "return": "int", "signature": "int getCollectionSize(Collection<?> collection)", "full_signature": "public static int getCollectionSize(Collection<?> collection)", "class_method_signature": "EPLUtilities.getCollectionSize(Collection<?> collection)", "testcase": false, "constructor": false}, {"identifier": "getCurrentDateInISO8601Format", "parameters": "(Object key)", "modifiers": "public static", "return": "String", "signature": "String getCurrentDateInISO8601Format(Object key)", "full_signature": "public static String getCurrentDateInISO8601Format(Object key)", "class_method_signature": "EPLUtilities.getCurrentDateInISO8601Format(Object key)", "testcase": false, "constructor": false}, {"identifier": "getDateFromISO8601", "parameters": "(Object iso8601)", "modifiers": "public static", "return": "Date", "signature": "Date getDateFromISO8601(Object iso8601)", "full_signature": "public static Date getDateFromISO8601(Object iso8601)", "class_method_signature": "EPLUtilities.getDateFromISO8601(Object iso8601)", "testcase": false, "constructor": false}, {"identifier": "getDateFromRFC822String", "parameters": "(Object rfc822)", "modifiers": "public static", "return": "Date", "signature": "Date getDateFromRFC822String(Object rfc822)", "full_signature": "public static Date getDateFromRFC822String(Object rfc822)", "class_method_signature": "EPLUtilities.getDateFromRFC822String(Object rfc822)", "testcase": false, "constructor": false}, {"identifier": "getListElement", "parameters": "(List<T> list, int at)", "modifiers": "public static", "return": "T", "signature": "T getListElement(List<T> list, int at)", "full_signature": "public static T getListElement(List<T> list, int at)", "class_method_signature": "EPLUtilities.getListElement(List<T> list, int at)", "testcase": false, "constructor": false}, {"identifier": "getMillisFromISO8601", "parameters": "(Object iso8601)", "modifiers": "public static", "return": "Long", "signature": "Long getMillisFromISO8601(Object iso8601)", "full_signature": "public static Long getMillisFromISO8601(Object iso8601)", "class_method_signature": "EPLUtilities.getMillisFromISO8601(Object iso8601)", "testcase": false, "constructor": false}, {"identifier": "getMillisFromRFC822String", "parameters": "(Object rfc822)", "modifiers": "public static", "return": "Long", "signature": "Long getMillisFromRFC822String(Object rfc822)", "full_signature": "public static Long getMillisFromRFC822String(Object rfc822)", "class_method_signature": "EPLUtilities.getMillisFromRFC822String(Object rfc822)", "testcase": false, "constructor": false}, {"identifier": "getNestedKeyValue", "parameters": "(Map<String, Object> event, String key)", "modifiers": "@SuppressWarnings(\"unchecked\") static public", "return": "String", "signature": "String getNestedKeyValue(Map<String, Object> event, String key)", "full_signature": "@SuppressWarnings(\"unchecked\") static public String getNestedKeyValue(Map<String, Object> event, String key)", "class_method_signature": "EPLUtilities.getNestedKeyValue(Map<String, Object> event, String key)", "testcase": false, "constructor": false}, {"identifier": "getTimeInMillis", "parameters": "()", "modifiers": "public static", "return": "Long", "signature": "Long getTimeInMillis()", "full_signature": "public static Long getTimeInMillis()", "class_method_signature": "EPLUtilities.getTimeInMillis()", "testcase": false, "constructor": false}, {"identifier": "getTimeInNanos", "parameters": "()", "modifiers": "public static", "return": "Long", "signature": "Long getTimeInNanos()", "full_signature": "public static Long getTimeInNanos()", "class_method_signature": "EPLUtilities.getTimeInNanos()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(Map<String, Object> event, String key)", "modifiers": "public static", "return": "String", "signature": "String getValue(Map<String, Object> event, String key)", "full_signature": "public static String getValue(Map<String, Object> event, String key)", "class_method_signature": "EPLUtilities.getValue(Map<String, Object> event, String key)", "testcase": false, "constructor": false}, {"identifier": "isContains", "parameters": "(Object object, String key)", "modifiers": "public static", "return": "boolean", "signature": "boolean isContains(Object object, String key)", "full_signature": "public static boolean isContains(Object object, String key)", "class_method_signature": "EPLUtilities.isContains(Object object, String key)", "testcase": false, "constructor": false}, {"identifier": "isNameOrAliasEqual", "parameters": "(Map<String, String> attribute, String name)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNameOrAliasEqual(Map<String, String> attribute, String name)", "full_signature": "public static boolean isNameOrAliasEqual(Map<String, String> attribute, String name)", "class_method_signature": "EPLUtilities.isNameOrAliasEqual(Map<String, String> attribute, String name)", "testcase": false, "constructor": false}, {"identifier": "isVersionEqualOrGreaterThan", "parameters": "(Object versionBase, Object versionValue)", "modifiers": "public static", "return": "boolean", "signature": "boolean isVersionEqualOrGreaterThan(Object versionBase, Object versionValue)", "full_signature": "public static boolean isVersionEqualOrGreaterThan(Object versionBase, Object versionValue)", "class_method_signature": "EPLUtilities.isVersionEqualOrGreaterThan(Object versionBase, Object versionValue)", "testcase": false, "constructor": false}, {"identifier": "removeElement", "parameters": "(Object[] array, Object entryToRemove)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] removeElement(Object[] array, Object entryToRemove)", "full_signature": "public static Object[] removeElement(Object[] array, Object entryToRemove)", "class_method_signature": "EPLUtilities.removeElement(Object[] array, Object entryToRemove)", "testcase": false, "constructor": false}, {"identifier": "removeKeyAndConvertToListOfMaps", "parameters": "(Object obj, String key)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "List<Map<Object, Object>>", "signature": "List<Map<Object, Object>> removeKeyAndConvertToListOfMaps(Object obj, String key)", "full_signature": "@SuppressWarnings(\"unchecked\") public static List<Map<Object, Object>> removeKeyAndConvertToListOfMaps(Object obj, String key)", "class_method_signature": "EPLUtilities.removeKeyAndConvertToListOfMaps(Object obj, String key)", "testcase": false, "constructor": false}, {"identifier": "sliceArray", "parameters": "(Object[] objArray, String keys)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] sliceArray(Object[] objArray, String keys)", "full_signature": "public static Object[] sliceArray(Object[] objArray, String keys)", "class_method_signature": "EPLUtilities.sliceArray(Object[] objArray, String keys)", "testcase": false, "constructor": false}, {"identifier": "sliceObject", "parameters": "(Object obj, String keys)", "modifiers": "public static", "return": "Object", "signature": "Object sliceObject(Object obj, String keys)", "full_signature": "public static Object sliceObject(Object obj, String keys)", "class_method_signature": "EPLUtilities.sliceObject(Object obj, String keys)", "testcase": false, "constructor": false}, {"identifier": "toLowerCase", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String toLowerCase(String str)", "full_signature": "public static String toLowerCase(String str)", "class_method_signature": "EPLUtilities.toLowerCase(String str)", "testcase": false, "constructor": false}, {"identifier": "toLowerCase", "parameters": "(String[] strArray)", "modifiers": "public static", "return": "String[]", "signature": "String[] toLowerCase(String[] strArray)", "full_signature": "public static String[] toLowerCase(String[] strArray)", "class_method_signature": "EPLUtilities.toLowerCase(String[] strArray)", "testcase": false, "constructor": false}, {"identifier": "toStream1", "parameters": "(Object[] array)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Map<String, Object>[]", "signature": "Map<String, Object>[] toStream1(Object[] array)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Map<String, Object>[] toStream1(Object[] array)", "class_method_signature": "EPLUtilities.toStream1(Object[] array)", "testcase": false, "constructor": false}, {"identifier": "toStream1Metadata", "parameters": "()", "modifiers": "public static", "return": "Map<String, Class>", "signature": "Map<String, Class> toStream1Metadata()", "full_signature": "public static Map<String, Class> toStream1Metadata()", "class_method_signature": "EPLUtilities.toStream1Metadata()", "testcase": false, "constructor": false}, {"identifier": "toStream2", "parameters": "(Object[] array1, Object[] array2)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Map<String, Object>[]", "signature": "Map<String, Object>[] toStream2(Object[] array1, Object[] array2)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Map<String, Object>[] toStream2(Object[] array1, Object[] array2)", "class_method_signature": "EPLUtilities.toStream2(Object[] array1, Object[] array2)", "testcase": false, "constructor": false}, {"identifier": "toStream2Metadata", "parameters": "()", "modifiers": "public static", "return": "Map<String, Class>", "signature": "Map<String, Class> toStream2Metadata()", "full_signature": "public static Map<String, Class> toStream2Metadata()", "class_method_signature": "EPLUtilities.toStream2Metadata()", "testcase": false, "constructor": false}, {"identifier": "toStream3", "parameters": "(Object[] array1, Object[] array2, Object[] array3)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Map<String, Object>[]", "signature": "Map<String, Object>[] toStream3(Object[] array1, Object[] array2, Object[] array3)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Map<String, Object>[] toStream3(Object[] array1, Object[] array2, Object[] array3)", "class_method_signature": "EPLUtilities.toStream3(Object[] array1, Object[] array2, Object[] array3)", "testcase": false, "constructor": false}, {"identifier": "toStream3Metadata", "parameters": "()", "modifiers": "public static", "return": "Map<String, Class>", "signature": "Map<String, Class> toStream3Metadata()", "full_signature": "public static Map<String, Class> toStream3Metadata()", "class_method_signature": "EPLUtilities.toStream3Metadata()", "testcase": false, "constructor": false}, {"identifier": "toUpperCase", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String toUpperCase(String str)", "full_signature": "public static String toUpperCase(String str)", "class_method_signature": "EPLUtilities.toUpperCase(String str)", "testcase": false, "constructor": false}, {"identifier": "toUpperCase", "parameters": "(String[] strArray)", "modifiers": "public static", "return": "String[]", "signature": "String[] toUpperCase(String[] strArray)", "full_signature": "public static String[] toUpperCase(String[] strArray)", "class_method_signature": "EPLUtilities.toUpperCase(String[] strArray)", "testcase": false, "constructor": false}, {"identifier": "transformToJsonString", "parameters": "(Object obj)", "modifiers": "public static", "return": "String", "signature": "String transformToJsonString(Object obj)", "full_signature": "public static String transformToJsonString(Object obj)", "class_method_signature": "EPLUtilities.transformToJsonString(Object obj)", "testcase": false, "constructor": false}, {"identifier": "transformToObjectAndRemoveKey", "parameters": "(String jsonStr, String key)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "HashMap<String, Object>", "signature": "HashMap<String, Object> transformToObjectAndRemoveKey(String jsonStr, String key)", "full_signature": "@SuppressWarnings(\"unchecked\") public static HashMap<String, Object> transformToObjectAndRemoveKey(String jsonStr, String key)", "class_method_signature": "EPLUtilities.transformToObjectAndRemoveKey(String jsonStr, String key)", "testcase": false, "constructor": false}], "file": "jetstream-esper/src/main/java/com/ebay/jetstream/epl/EPLUtilities.java"}, "focal_method": {"identifier": "findIntersection", "parameters": "(Object set1, Object set2)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Map<String, Object>", "body": "@SuppressWarnings(\"unchecked\")\n  public static Map<String, Object> findIntersection(Object set1, Object set2) {\n    if (set1 instanceof Map && set2 instanceof Map) {\n      return findIntersectionMap((Map<String, Object>) set1, (Map<String, Object>) set2);\n    }\n    return null;\n  }", "signature": "Map<String, Object> findIntersection(Object set1, Object set2)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Map<String, Object> findIntersection(Object set1, Object set2)", "class_method_signature": "EPLUtilities.findIntersection(Object set1, Object set2)", "testcase": false, "constructor": false, "invocations": ["findIntersectionMap"]}, "repository": {"repo_id": 30008535, "url": "https://github.com/pulsarIO/jetstream-esper", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 22, "size": 637, "license": "licensed"}}