{"test_class": {"identifier": "KeyLockCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  TerminalPermissionAO facade;", "modifier": "@Mock", "type": "TerminalPermissionAO", "declarator": "facade", "var_name": "facade"}, {"original_string": "@Mock\n  HSMServiceHolder hsmServiceHolder;", "modifier": "@Mock", "type": "HSMServiceHolder", "declarator": "hsmServiceHolder", "var_name": "hsmServiceHolder"}], "file": "poseidas/src/test/java/de/governikus/eumw/poseidas/server/pki/KeyLockCheckerTest.java"}, "test_case": {"identifier": "testCheckKeyLocks", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testCheckKeyLocks() throws IOException, HSMException\n  {\n    // Create commonly used key names\n    String firstKey = \"firstKey\";\n    String secondKey = \"secondKey\";\n    String thirdKey = \"thirdKey\";\n    String fourthKey = \"fourthKey\";\n    String fifthKey = \"fifthKey\";\n\n    // Prepare ChangeKeyLocks for so called own instance\n    Map<String, ChangeKeyLock> ownKeyLockList = new HashMap<>();\n    ownKeyLockList.put(firstKey, new ChangeKeyLock(firstKey, \"localhost\", System.currentTimeMillis(), 0));\n    ownKeyLockList.put(secondKey, new ChangeKeyLock(secondKey, \"localhost\", System.currentTimeMillis(), 1));\n\n    // Prepare ChangeKeyLocks for so called other instances\n    Map<String, ChangeKeyLock> otherKeyLockList = new HashMap<>();\n    otherKeyLockList.put(thirdKey, new ChangeKeyLock(thirdKey, \"otherhost\", System.currentTimeMillis(), 0));\n    otherKeyLockList.put(fourthKey, new ChangeKeyLock(fourthKey, \"otherhost\", System.currentTimeMillis(), 1));\n    otherKeyLockList.put(fifthKey, new ChangeKeyLock(fifthKey, \"otherhost\", System.currentTimeMillis(), 1));\n\n    // Make mock return different lists of ChangeKeyLocks depending on the parameter\n    Mockito.doReturn(new ArrayList<>(ownKeyLockList.values()))\n           .when(facade)\n           .getAllChangeKeyLocksByInstance(true);\n    Mockito.doReturn(new ArrayList<>(otherKeyLockList.values()))\n           .when(facade)\n           .getAllChangeKeyLocksByInstance(false);\n\n    // Make mock return correct ChangeKeyLocks when obtainChangeKeyLock is called with different parameters\n    Mockito.doReturn(otherKeyLockList.get(thirdKey)).when(facade).obtainChangeKeyLock(thirdKey, 0);\n    Mockito.doReturn(otherKeyLockList.get(fourthKey)).when(facade).obtainChangeKeyLock(fourthKey, 1);\n    Mockito.doReturn(null).when(facade).obtainChangeKeyLock(fifthKey, 1);\n\n    // Make mock return different values depending on the parameter\n    Mockito.when(hsmServiceHolder.isServiceSet()).thenReturn(true);\n    Mockito.doReturn(false).when(hsmServiceHolder).isWorkingOnKey(firstKey);\n    Mockito.doReturn(true).when(hsmServiceHolder).isWorkingOnKey(secondKey);\n\n    // Create the KeyLockChecker and execute the method\n    KeyLockChecker keyLockChecker = new KeyLockChecker(facade, hsmServiceHolder);\n    keyLockChecker.checkKeyLocks();\n\n    // Verify that the correct ChangeKeyLocks are released\n    Mockito.verify(facade).releaseChangeKeyLock(ownKeyLockList.get(firstKey));\n    Mockito.verify(facade, Mockito.never()).releaseChangeKeyLock(ownKeyLockList.get(secondKey));\n\n    // Verify that the correct ChangeKeyLocks are deleted or distributed\n    Mockito.verify(hsmServiceHolder).deleteKey(thirdKey);\n    Mockito.verify(hsmServiceHolder).distributeKey(fourthKey);\n    Mockito.verify(hsmServiceHolder, Mockito.never()).deleteKey(fifthKey);\n    Mockito.verify(hsmServiceHolder, Mockito.never()).distributeKey(fifthKey);\n  }", "signature": "void testCheckKeyLocks()", "full_signature": "@Test void testCheckKeyLocks()", "class_method_signature": "KeyLockCheckerTest.testCheckKeyLocks()", "testcase": true, "constructor": false, "invocations": ["put", "currentTimeMillis", "put", "currentTimeMillis", "put", "currentTimeMillis", "put", "currentTimeMillis", "put", "currentTimeMillis", "getAllChangeKeyLocksByInstance", "when", "doReturn", "values", "getAllChangeKeyLocksByInstance", "when", "doReturn", "values", "obtainChangeKeyLock", "when", "doReturn", "get", "obtainChangeKeyLock", "when", "doReturn", "get", "obtainChangeKeyLock", "when", "doReturn", "thenReturn", "when", "isServiceSet", "isWorkingOnKey", "when", "doReturn", "isWorkingOnKey", "when", "doReturn", "checkKeyLocks", "releaseChangeKeyLock", "verify", "get", "releaseChangeKeyLock", "verify", "never", "get", "deleteKey", "verify", "distributeKey", "verify", "deleteKey", "verify", "never", "distributeKey", "verify", "never"]}, "focal_class": {"identifier": "KeyLockChecker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TerminalPermissionAO facade;", "modifier": "private final", "type": "TerminalPermissionAO", "declarator": "facade", "var_name": "facade"}, {"original_string": "private final HSMServiceHolder hsmServiceHolder;", "modifier": "private final", "type": "HSMServiceHolder", "declarator": "hsmServiceHolder", "var_name": "hsmServiceHolder"}], "methods": [{"identifier": "KeyLockChecker", "parameters": "(TerminalPermissionAO facade, HSMServiceHolder hsmServiceHolder)", "modifiers": "public", "return": "", "signature": " KeyLockChecker(TerminalPermissionAO facade, HSMServiceHolder hsmServiceHolder)", "full_signature": "public  KeyLockChecker(TerminalPermissionAO facade, HSMServiceHolder hsmServiceHolder)", "class_method_signature": "KeyLockChecker.KeyLockChecker(TerminalPermissionAO facade, HSMServiceHolder hsmServiceHolder)", "testcase": false, "constructor": true}, {"identifier": "checkKeyLocks", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void checkKeyLocks()", "full_signature": "public void checkKeyLocks()", "class_method_signature": "KeyLockChecker.checkKeyLocks()", "testcase": false, "constructor": false}], "file": "poseidas/src/main/java/de/governikus/eumw/poseidas/server/pki/KeyLockChecker.java"}, "focal_method": {"identifier": "checkKeyLocks", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void checkKeyLocks()\n  {\n    try\n    {\n      log.debug(\"checking locks for {}\", InetAddress.getLocalHost().toString());\n      List<ChangeKeyLock> lockList = facade.getAllChangeKeyLocksByInstance(true);\n      if (hsmServiceHolder.isServiceSet())\n      {\n        for ( ChangeKeyLock lock : lockList )\n        {\n          if (!hsmServiceHolder.isWorkingOnKey(lock.getKeyName()))\n          {\n            facade.releaseChangeKeyLock(lock);\n            log.debug(\"lock for key {} released\", lock.getKeyName());\n          }\n        }\n      }\n      List<ChangeKeyLock> foreignLockList = facade.getAllChangeKeyLocksByInstance(false);\n      for ( ChangeKeyLock lock : foreignLockList )\n      {\n        if (facade.obtainChangeKeyLock(lock.getKeyName(), lock.getType()) != null)\n        {\n          if (lock.getType() == ChangeKeyLock.TYPE_DELETE)\n          {\n            hsmServiceHolder.deleteKey(lock.getKeyName());\n            log.debug(\"lock for key {} stolen, deleting key\", lock.getKeyName());\n          }\n          else\n          {\n            hsmServiceHolder.distributeKey(lock.getKeyName());\n            log.debug(\"lock for key {} stolen, distributing key\", lock.getKeyName());\n          }\n        }\n      }\n    }\n    catch (HSMException | IOException e)\n    {\n      log.error(\"Problem during key lock check\", e);\n    }\n  }", "signature": "void checkKeyLocks()", "full_signature": "public void checkKeyLocks()", "class_method_signature": "KeyLockChecker.checkKeyLocks()", "testcase": false, "constructor": false, "invocations": ["debug", "toString", "getLocalHost", "getAllChangeKeyLocksByInstance", "isServiceSet", "isWorkingOnKey", "getKeyName", "releaseChangeKeyLock", "debug", "getKeyName", "getAllChangeKeyLocksByInstance", "obtainChangeKeyLock", "getKeyName", "getType", "getType", "deleteKey", "getKeyName", "debug", "getKeyName", "distributeKey", "getKeyName", "debug", "getKeyName", "error"]}, "repository": {"repo_id": 133799133, "url": "https://github.com/Governikus/eidas-middleware", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 15, "size": 2286, "license": "licensed"}}