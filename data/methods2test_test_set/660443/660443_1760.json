{"test_class": {"identifier": "BondPartialPiChargeDescriptorTest", "superclass": "extends BondDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarbond/src/test/java/org/openscience/cdk/qsar/descriptors/bond/BondPartialPiChargeDescriptorTest.java"}, "test_case": {"identifier": "testBondPiElectronegativityDescriptor_Allyl_mercaptan", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBondPiElectronegativityDescriptor_Allyl_mercaptan() throws ClassNotFoundException, CDKException,\n            java.lang.Exception {\n        descriptor = new BondPartialPiChargeDescriptor();\n        double[] testResult = {0.0006, 0.0003, 0.0003, 0.0003, 0.0003, 0.0, 0.0, 0.0, 0.0}; /*\n                                                                                             * from\n                                                                                             * Petra\n                                                                                             * online\n                                                                                             * :\n                                                                                             * http\n                                                                                             * :\n                                                                                             * /\n                                                                                             * /\n                                                                                             * www2\n                                                                                             * .\n                                                                                             * chemie\n                                                                                             * .\n                                                                                             * uni\n                                                                                             * -\n                                                                                             * erlangen\n                                                                                             * .\n                                                                                             * de\n                                                                                             * /\n                                                                                             * services\n                                                                                             * /\n                                                                                             * petra\n                                                                                             * /\n                                                                                             * smiles\n                                                                                             * .\n                                                                                             * phtml\n                                                                                             */\n\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"C=CCS\");\n        addExplicitHydrogens(mol);\n\n        for (int i = 0; i < 9; i++) {\n            double result = ((DoubleResult) descriptor.calculate(mol.getBond(i), mol).getValue()).doubleValue();\n            Assert.assertEquals(testResult[i], result, 0.03);\n        }\n    }", "signature": "void testBondPiElectronegativityDescriptor_Allyl_mercaptan()", "full_signature": "@Test public void testBondPiElectronegativityDescriptor_Allyl_mercaptan()", "class_method_signature": "BondPartialPiChargeDescriptorTest.testBondPiElectronegativityDescriptor_Allyl_mercaptan()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "addExplicitHydrogens", "doubleValue", "getValue", "calculate", "getBond", "assertEquals"]}, "focal_class": {"identifier": "BondPartialPiChargeDescriptor", "superclass": "extends AbstractBondDescriptor", "interfaces": "", "fields": [{"original_string": "private GasteigerPEPEPartialCharges pepe          = null;", "modifier": "private", "type": "GasteigerPEPEPartialCharges", "declarator": "pepe          = null", "var_name": "pepe"}, {"original_string": "private int                         maxIterations = -1;", "modifier": "private", "type": "int", "declarator": "maxIterations = -1", "var_name": "maxIterations"}, {"original_string": "private int                         maxResonStruc = -1;", "modifier": "private", "type": "int", "declarator": "maxResonStruc = -1", "var_name": "maxResonStruc"}, {"original_string": "private boolean                     lpeChecker    = true;", "modifier": "private", "type": "boolean", "declarator": "lpeChecker    = true", "var_name": "lpeChecker"}, {"original_string": "private static final String[] NAMES = {\"pepeB\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES = {\"pepeB\"}", "var_name": "NAMES"}], "methods": [{"identifier": "BondPartialPiChargeDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " BondPartialPiChargeDescriptor()", "full_signature": "public  BondPartialPiChargeDescriptor()", "class_method_signature": "BondPartialPiChargeDescriptor.BondPartialPiChargeDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "BondPartialPiChargeDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "BondPartialPiChargeDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "BondPartialPiChargeDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "BondPartialPiChargeDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "BondPartialPiChargeDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IBond bond, IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IBond bond, IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IBond bond, IAtomContainer ac)", "class_method_signature": "BondPartialPiChargeDescriptor.calculate(IBond bond, IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "BondPartialPiChargeDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "BondPartialPiChargeDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsarbond/src/main/java/org/openscience/cdk/qsar/descriptors/bond/BondPartialPiChargeDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IBond bond, IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IBond bond, IAtomContainer ac) {\n        // FIXME: for now I'll cache a few modified atomic properties, and restore them at the end of this method\n        Double originalCharge1 = bond.getBegin().getCharge();\n        String originalAtomtypeName1 = bond.getBegin().getAtomTypeName();\n        Integer originalNeighborCount1 = bond.getBegin().getFormalNeighbourCount();\n        IAtomType.Hybridization originalHybridization1 = bond.getBegin().getHybridization();\n        Integer originalValency1 = bond.getBegin().getValency();\n        Double originalCharge2 = bond.getEnd().getCharge();\n        String originalAtomtypeName2 = bond.getEnd().getAtomTypeName();\n        Integer originalNeighborCount2 = bond.getEnd().getFormalNeighbourCount();\n        IAtomType.Hybridization originalHybridization2 = bond.getEnd().getHybridization();\n        Integer originalValency2 = bond.getEnd().getValency();\n        Double originalBondOrderSum1 = bond.getBegin().getBondOrderSum();\n        Order originalMaxBondOrder1 = bond.getBegin().getMaxBondOrder();\n        Double originalBondOrderSum2 = bond.getEnd().getBondOrderSum();\n        Order originalMaxBondOrder2 = bond.getEnd().getMaxBondOrder();\n        if (!isCachedAtomContainer(ac)) {\n            try {\n                AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(ac);\n                if (lpeChecker) {\n                    LonePairElectronChecker lpcheck = new LonePairElectronChecker();\n                    lpcheck.saturate(ac);\n                }\n            } catch (CDKException e) {\n                return getDummyDescriptorValue(e);\n            }\n\n            if (maxIterations != -1) pepe.setMaxGasteigerIters(maxIterations);\n            if (maxResonStruc != -1) pepe.setMaxResoStruc(maxResonStruc);\n            try {\n                for (int i = 0; i < ac.getAtomCount(); i++)\n                    ac.getAtom(i).setCharge(0.0);\n\n                pepe.assignGasteigerPiPartialCharges(ac, true);\n                for (Iterator<IBond> it = ac.bonds().iterator(); it.hasNext();) {\n                    IBond bondi = it.next();\n                    double result = Math.abs(bondi.getBegin().getCharge() - bondi.getEnd().getCharge());\n                    cacheDescriptorValue(bondi, ac, new DoubleResult(result));\n                }\n            } catch (Exception ex1) {\n                return getDummyDescriptorValue(ex1);\n            }\n        }\n        bond.getBegin().setCharge(originalCharge1);\n        bond.getBegin().setAtomTypeName(originalAtomtypeName1);\n        bond.getBegin().setHybridization(originalHybridization1);\n        bond.getBegin().setValency(originalValency1);\n        bond.getBegin().setFormalNeighbourCount(originalNeighborCount1);\n        bond.getEnd().setCharge(originalCharge2);\n        bond.getEnd().setAtomTypeName(originalAtomtypeName2);\n        bond.getEnd().setHybridization(originalHybridization2);\n        bond.getEnd().setValency(originalValency2);\n        bond.getEnd().setFormalNeighbourCount(originalNeighborCount2);\n        bond.getBegin().setMaxBondOrder(originalMaxBondOrder1);\n        bond.getBegin().setBondOrderSum(originalBondOrderSum1);\n        bond.getEnd().setMaxBondOrder(originalMaxBondOrder2);\n        bond.getEnd().setBondOrderSum(originalBondOrderSum2);\n\n        return getCachedDescriptorValue(bond) != null ? new DescriptorValue(getSpecification(), getParameterNames(),\n                getParameters(), getCachedDescriptorValue(bond), NAMES) : null;\n    }", "signature": "DescriptorValue calculate(IBond bond, IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IBond bond, IAtomContainer ac)", "class_method_signature": "BondPartialPiChargeDescriptor.calculate(IBond bond, IAtomContainer ac)", "testcase": false, "constructor": false, "invocations": ["getCharge", "getBegin", "getAtomTypeName", "getBegin", "getFormalNeighbourCount", "getBegin", "getHybridization", "getBegin", "getValency", "getBegin", "getCharge", "getEnd", "getAtomTypeName", "getEnd", "getFormalNeighbourCount", "getEnd", "getHybridization", "getEnd", "getValency", "getEnd", "getBondOrderSum", "getBegin", "getMaxBondOrder", "getBegin", "getBondOrderSum", "getEnd", "getMaxBondOrder", "getEnd", "isCachedAtomContainer", "percieveAtomTypesAndConfigureAtoms", "saturate", "getDummyDescriptorValue", "setMaxGasteigerIters", "setMaxResoStruc", "getAtomCount", "setCharge", "getAtom", "assignGasteigerPiPartialCharges", "iterator", "bonds", "hasNext", "next", "abs", "getCharge", "getBegin", "getCharge", "getEnd", "cacheDescriptorValue", "getDummyDescriptorValue", "setCharge", "getBegin", "setAtomTypeName", "getBegin", "setHybridization", "getBegin", "setValency", "getBegin", "setFormalNeighbourCount", "getBegin", "setCharge", "getEnd", "setAtomTypeName", "getEnd", "setHybridization", "getEnd", "setValency", "getEnd", "setFormalNeighbourCount", "getEnd", "setMaxBondOrder", "getBegin", "setBondOrderSum", "getBegin", "setMaxBondOrder", "getEnd", "setBondOrderSum", "getEnd", "getCachedDescriptorValue", "getSpecification", "getParameterNames", "getParameters", "getCachedDescriptorValue"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}