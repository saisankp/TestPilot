{"test_class": {"identifier": "ServerRunnableTest", "superclass": "", "interfaces": "", "fields": [], "file": "http/src/test/java/ro/polak/http/ServerRunnableTest.java"}, "test_case": {"identifier": "shouldLogIOExceptionsSilently", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldLogIOExceptionsSilently() throws Exception {\n\n        Socket socket = mock(Socket.class);\n        HttpServletResponseImplFactory responseFactory = mock(HttpServletResponseImplFactory.class);\n\n        when(responseFactory.createFromSocket(socket)).thenThrow(new IOException());\n\n        ServerRunnable serverRunnable = new ServerRunnable(socket, mock(ServerConfig.class),\n                mock(HttpServletRequestImplFactory.class),\n                responseFactory,\n                mock(HttpErrorHandlerResolver.class),\n                new PathHelper()\n        );\n\n        serverRunnable.run();\n\n        verify(socket, times(1)).close();\n    }", "signature": "void shouldLogIOExceptionsSilently()", "full_signature": "@Test public void shouldLogIOExceptionsSilently()", "class_method_signature": "ServerRunnableTest.shouldLogIOExceptionsSilently()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenThrow", "when", "createFromSocket", "mock", "mock", "mock", "run", "close", "verify", "times"]}, "focal_class": {"identifier": "ServerRunnable", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(ServerRunnable.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(ServerRunnable.class.getName())", "var_name": "LOGGER"}, {"original_string": "private final ServerConfig serverConfig;", "modifier": "private final", "type": "ServerConfig", "declarator": "serverConfig", "var_name": "serverConfig"}, {"original_string": "private final Socket socket;", "modifier": "private final", "type": "Socket", "declarator": "socket", "var_name": "socket"}, {"original_string": "private final HttpServletRequestImplFactory requestFactory;", "modifier": "private final", "type": "HttpServletRequestImplFactory", "declarator": "requestFactory", "var_name": "requestFactory"}, {"original_string": "private final HttpServletResponseImplFactory responseFactory;", "modifier": "private final", "type": "HttpServletResponseImplFactory", "declarator": "responseFactory", "var_name": "responseFactory"}, {"original_string": "private final HttpErrorHandlerResolver httpErrorHandlerResolver;", "modifier": "private final", "type": "HttpErrorHandlerResolver", "declarator": "httpErrorHandlerResolver", "var_name": "httpErrorHandlerResolver"}, {"original_string": "private final PathHelper pathHelper;", "modifier": "private final", "type": "PathHelper", "declarator": "pathHelper", "var_name": "pathHelper"}], "methods": [{"identifier": "ServerRunnable", "parameters": "(final Socket socket,\n                          final ServerConfig serverConfig,\n                          final HttpServletRequestImplFactory requestFactory,\n                          final HttpServletResponseImplFactory responseFactory,\n                          final HttpErrorHandlerResolver httpErrorHandlerResolver,\n                          final PathHelper pathHelper)", "modifiers": "public", "return": "", "signature": " ServerRunnable(final Socket socket,\n                          final ServerConfig serverConfig,\n                          final HttpServletRequestImplFactory requestFactory,\n                          final HttpServletResponseImplFactory responseFactory,\n                          final HttpErrorHandlerResolver httpErrorHandlerResolver,\n                          final PathHelper pathHelper)", "full_signature": "public  ServerRunnable(final Socket socket,\n                          final ServerConfig serverConfig,\n                          final HttpServletRequestImplFactory requestFactory,\n                          final HttpServletResponseImplFactory responseFactory,\n                          final HttpErrorHandlerResolver httpErrorHandlerResolver,\n                          final PathHelper pathHelper)", "class_method_signature": "ServerRunnable.ServerRunnable(final Socket socket,\n                          final ServerConfig serverConfig,\n                          final HttpServletRequestImplFactory requestFactory,\n                          final HttpServletResponseImplFactory responseFactory,\n                          final HttpErrorHandlerResolver httpErrorHandlerResolver,\n                          final PathHelper pathHelper)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ServerRunnable.run()", "testcase": false, "constructor": false}, {"identifier": "setDefaultResponseHeaders", "parameters": "(final HttpServletRequest request, final HttpServletResponseImpl response)", "modifiers": "private", "return": "void", "signature": "void setDefaultResponseHeaders(final HttpServletRequest request, final HttpServletResponseImpl response)", "full_signature": "private void setDefaultResponseHeaders(final HttpServletRequest request, final HttpServletResponseImpl response)", "class_method_signature": "ServerRunnable.setDefaultResponseHeaders(final HttpServletRequest request, final HttpServletResponseImpl response)", "testcase": false, "constructor": false}, {"identifier": "validateRequest", "parameters": "(final HttpServletRequest request)", "modifiers": "private", "return": "void", "signature": "void validateRequest(final HttpServletRequest request)", "full_signature": "private void validateRequest(final HttpServletRequest request)", "class_method_signature": "ServerRunnable.validateRequest(final HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "isMethodSupported", "parameters": "(final String method)", "modifiers": "private", "return": "boolean", "signature": "boolean isMethodSupported(final String method)", "full_signature": "private boolean isMethodSupported(final String method)", "class_method_signature": "ServerRunnable.isMethodSupported(final String method)", "testcase": false, "constructor": false}, {"identifier": "getSocket", "parameters": "()", "modifiers": "protected", "return": "Socket", "signature": "Socket getSocket()", "full_signature": "protected Socket getSocket()", "class_method_signature": "ServerRunnable.getSocket()", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/ServerRunnable.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() {\n        HttpServletResponseImpl response = null;\n\n        try {\n            try {\n                response = responseFactory.createFromSocket(socket);\n                HttpServletRequestImpl request = requestFactory.createFromSocket(socket);\n\n                LOGGER.log(Level.INFO, \"Handling request {0} {1}\", new Object[]{\n                        request.getMethod(), request.getRequestURI()\n                });\n\n                String requestedPath = request.getRequestURI();\n\n                if (pathHelper.isPathContainingIllegalCharacters(requestedPath)) {\n                    throw new AccessDeniedException();\n                }\n\n                validateRequest(request);\n                setDefaultResponseHeaders(request, response);\n                serverConfig.getServletDispatcher().load(requestedPath, request, response);\n            } catch (RuntimeException e) {\n                if (response != null) {\n                    httpErrorHandlerResolver.getHandler(e).serve(response);\n                }\n\n                throw e; // Make it logged by the main thread\n            } finally {\n                IOUtilities.closeSilently(socket);\n            }\n        } catch (IOException e) {\n            LOGGER.log(Level.INFO, \"Encountered IOException when handling request {0}\", new Object[]{\n                    e.getMessage()\n            });\n        }\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ServerRunnable.run()", "testcase": false, "constructor": false, "invocations": ["createFromSocket", "createFromSocket", "log", "getMethod", "getRequestURI", "getRequestURI", "isPathContainingIllegalCharacters", "validateRequest", "setDefaultResponseHeaders", "load", "getServletDispatcher", "serve", "getHandler", "closeSilently", "log", "getMessage"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}