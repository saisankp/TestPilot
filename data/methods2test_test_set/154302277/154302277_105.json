{"test_class": {"identifier": "DeviceRegistrationMessageServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private DeviceRepository deviceRepository;", "modifier": "@Mock\n    private", "type": "DeviceRepository", "declarator": "deviceRepository", "var_name": "deviceRepository"}, {"original_string": "@Mock\n    private DeviceNetworkAddressCleanupService deviceNetworkAddressCleanupService;", "modifier": "@Mock\n    private", "type": "DeviceNetworkAddressCleanupService", "declarator": "deviceNetworkAddressCleanupService", "var_name": "deviceNetworkAddressCleanupService"}, {"original_string": "@InjectMocks\n    private DeviceRegistrationMessageService deviceRegistrationMessageService;", "modifier": "@InjectMocks\n    private", "type": "DeviceRegistrationMessageService", "declarator": "deviceRegistrationMessageService", "var_name": "deviceRegistrationMessageService"}], "file": "osgp/platform/osgp-core/src/test/java/org/opensmartgridplatform/core/application/services/DeviceRegistrationMessageServiceTest.java"}, "test_case": {"identifier": "duplicateAddressesAreClearedWhenUpdatingRegistrationData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void duplicateAddressesAreClearedWhenUpdatingRegistrationData() throws Exception {\n        final String deviceIdentification = \"test-device\";\n        final String ipAddress = \"127.0.0.1\";\n        final String deviceType = \"DeviceType\";\n        final boolean hasSchedule = false;\n        when(this.deviceRepository.findByDeviceIdentification(deviceIdentification))\n                .thenReturn(new Device(deviceIdentification));\n\n        this.deviceRegistrationMessageService.updateRegistrationData(deviceIdentification, ipAddress, deviceType,\n                hasSchedule);\n\n        verify(this.deviceNetworkAddressCleanupService).clearDuplicateAddresses(deviceIdentification, ipAddress);\n    }", "signature": "void duplicateAddressesAreClearedWhenUpdatingRegistrationData()", "full_signature": "@Test public void duplicateAddressesAreClearedWhenUpdatingRegistrationData()", "class_method_signature": "DeviceRegistrationMessageServiceTest.duplicateAddressesAreClearedWhenUpdatingRegistrationData()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findByDeviceIdentification", "updateRegistrationData", "clearDuplicateAddresses", "verify"]}, "focal_class": {"identifier": "DeviceRegistrationMessageService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DeviceRegistrationMessageService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DeviceRegistrationMessageService.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private DeviceRepository deviceRepository;", "modifier": "@Autowired\n    private", "type": "DeviceRepository", "declarator": "deviceRepository", "var_name": "deviceRepository"}, {"original_string": "@Autowired\n    private DomainInfoRepository domainInfoRepository;", "modifier": "@Autowired\n    private", "type": "DomainInfoRepository", "declarator": "domainInfoRepository", "var_name": "domainInfoRepository"}, {"original_string": "@Autowired\n    private DomainRequestService domainRequestService;", "modifier": "@Autowired\n    private", "type": "DomainRequestService", "declarator": "domainRequestService", "var_name": "domainRequestService"}, {"original_string": "@Autowired\n    private DeviceNetworkAddressCleanupService deviceNetworkAddressCleanupService;", "modifier": "@Autowired\n    private", "type": "DeviceNetworkAddressCleanupService", "declarator": "deviceNetworkAddressCleanupService", "var_name": "deviceNetworkAddressCleanupService"}], "methods": [{"identifier": "updateRegistrationData", "parameters": "(final String deviceIdentification, final String ipAddress,\n            final String deviceType, final boolean hasSchedule)", "modifiers": "@Transactional(value = \"transactionManager\") public", "return": "Device", "signature": "Device updateRegistrationData(final String deviceIdentification, final String ipAddress,\n            final String deviceType, final boolean hasSchedule)", "full_signature": "@Transactional(value = \"transactionManager\") public Device updateRegistrationData(final String deviceIdentification, final String ipAddress,\n            final String deviceType, final boolean hasSchedule)", "class_method_signature": "DeviceRegistrationMessageService.updateRegistrationData(final String deviceIdentification, final String ipAddress,\n            final String deviceType, final boolean hasSchedule)", "testcase": false, "constructor": false}, {"identifier": "createNewDevice", "parameters": "(final String deviceIdentification, final String deviceType)", "modifiers": "private", "return": "Device", "signature": "Device createNewDevice(final String deviceIdentification, final String deviceType)", "full_signature": "private Device createNewDevice(final String deviceIdentification, final String deviceType)", "class_method_signature": "DeviceRegistrationMessageService.createNewDevice(final String deviceIdentification, final String deviceType)", "testcase": false, "constructor": false}, {"identifier": "sendRequestMessageToDomainCore", "parameters": "(final String deviceIdentification,\n            final String organisationIdentification, final String correlationUid, final MessageType messageType)", "modifiers": "public", "return": "void", "signature": "void sendRequestMessageToDomainCore(final String deviceIdentification,\n            final String organisationIdentification, final String correlationUid, final MessageType messageType)", "full_signature": "public void sendRequestMessageToDomainCore(final String deviceIdentification,\n            final String organisationIdentification, final String correlationUid, final MessageType messageType)", "class_method_signature": "DeviceRegistrationMessageService.sendRequestMessageToDomainCore(final String deviceIdentification,\n            final String organisationIdentification, final String correlationUid, final MessageType messageType)", "testcase": false, "constructor": false}], "file": "osgp/platform/osgp-core/src/main/java/org/opensmartgridplatform/core/application/services/DeviceRegistrationMessageService.java"}, "focal_method": {"identifier": "updateRegistrationData", "parameters": "(final String deviceIdentification, final String ipAddress,\n            final String deviceType, final boolean hasSchedule)", "modifiers": "@Transactional(value = \"transactionManager\") public", "return": "Device", "body": "@Transactional(value = \"transactionManager\")\n    public Device updateRegistrationData(final String deviceIdentification, final String ipAddress,\n            final String deviceType, final boolean hasSchedule) throws UnknownHostException {\n\n        LOGGER.info(\"updateRegistrationData called for device: {} ipAddress: {}, deviceType: {} hasSchedule: {}.\",\n                deviceIdentification, ipAddress, deviceType, hasSchedule);\n\n        // Check for existing IP addresses\n        this.deviceNetworkAddressCleanupService.clearDuplicateAddresses(deviceIdentification, ipAddress);\n\n        Device device = this.deviceRepository.findByDeviceIdentification(deviceIdentification);\n        if (device == null) {\n            // Device does not exist yet, create without an owner.\n            device = this.createNewDevice(deviceIdentification, deviceType);\n        }\n\n        final InetAddress inetAddress = InetAddress.getByName(ipAddress);\n        device.updateRegistrationData(inetAddress, deviceType);\n        device.updateConnectionDetailsToSuccess();\n\n        return this.deviceRepository.save(device);\n    }", "signature": "Device updateRegistrationData(final String deviceIdentification, final String ipAddress,\n            final String deviceType, final boolean hasSchedule)", "full_signature": "@Transactional(value = \"transactionManager\") public Device updateRegistrationData(final String deviceIdentification, final String ipAddress,\n            final String deviceType, final boolean hasSchedule)", "class_method_signature": "DeviceRegistrationMessageService.updateRegistrationData(final String deviceIdentification, final String ipAddress,\n            final String deviceType, final boolean hasSchedule)", "testcase": false, "constructor": false, "invocations": ["info", "clearDuplicateAddresses", "findByDeviceIdentification", "createNewDevice", "getByName", "updateRegistrationData", "updateConnectionDetailsToSuccess", "save"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}