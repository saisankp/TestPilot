{"test_class": {"identifier": "PayloadTransformingInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PayloadTransformingInterceptor interceptor;", "modifier": "private", "type": "PayloadTransformingInterceptor", "declarator": "interceptor", "var_name": "interceptor"}, {"original_string": "private Transformer transformer;", "modifier": "private", "type": "Transformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "private Resource input;", "modifier": "private", "type": "Resource", "declarator": "input", "var_name": "input"}, {"original_string": "private Resource output;", "modifier": "private", "type": "Resource", "declarator": "output", "var_name": "output"}, {"original_string": "private Resource xslt;", "modifier": "private", "type": "Resource", "declarator": "xslt", "var_name": "xslt"}], "file": "spring-ws-core/src/test/java/org/springframework/ws/server/endpoint/interceptor/PayloadTransformingInterceptorTest.java"}, "test_case": {"identifier": "testHandleRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testHandleRequest() throws Exception {\n\t\tinterceptor.setRequestXslt(xslt);\n\t\tinterceptor.afterPropertiesSet();\n\t\tMockWebServiceMessage request = new MockWebServiceMessage(input);\n\t\tMessageContext context = new DefaultMessageContext(request, new MockWebServiceMessageFactory());\n\n\t\tboolean result = interceptor.handleRequest(context, null);\n\t\tAssert.assertTrue(\"Invalid interceptor result\", result);\n\t\tStringResult expected = new StringResult();\n\t\ttransformer.transform(new SAXSource(SaxUtils.createInputSource(output)), expected);\n\t\tassertXMLEqual(expected.toString(), request.getPayloadAsString());\n\t}", "signature": "void testHandleRequest()", "full_signature": "@Test public void testHandleRequest()", "class_method_signature": "PayloadTransformingInterceptorTest.testHandleRequest()", "testcase": true, "constructor": false, "invocations": ["setRequestXslt", "afterPropertiesSet", "handleRequest", "assertTrue", "transform", "createInputSource", "assertXMLEqual", "toString", "getPayloadAsString"]}, "focal_class": {"identifier": "PayloadTransformingInterceptor", "superclass": "extends TransformerObjectSupport", "interfaces": "implements EndpointInterceptor, InitializingBean", "fields": [{"original_string": "private static final Log logger = LogFactory.getLog(PayloadTransformingInterceptor.class);", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog(PayloadTransformingInterceptor.class)", "var_name": "logger"}, {"original_string": "private Resource requestXslt;", "modifier": "private", "type": "Resource", "declarator": "requestXslt", "var_name": "requestXslt"}, {"original_string": "private Resource responseXslt;", "modifier": "private", "type": "Resource", "declarator": "responseXslt", "var_name": "responseXslt"}, {"original_string": "private Templates requestTemplates;", "modifier": "private", "type": "Templates", "declarator": "requestTemplates", "var_name": "requestTemplates"}, {"original_string": "private Templates responseTemplates;", "modifier": "private", "type": "Templates", "declarator": "responseTemplates", "var_name": "responseTemplates"}], "methods": [{"identifier": "setRequestXslt", "parameters": "(Resource requestXslt)", "modifiers": "public", "return": "void", "signature": "void setRequestXslt(Resource requestXslt)", "full_signature": "public void setRequestXslt(Resource requestXslt)", "class_method_signature": "PayloadTransformingInterceptor.setRequestXslt(Resource requestXslt)", "testcase": false, "constructor": false}, {"identifier": "setResponseXslt", "parameters": "(Resource responseXslt)", "modifiers": "public", "return": "void", "signature": "void setResponseXslt(Resource responseXslt)", "full_signature": "public void setResponseXslt(Resource responseXslt)", "class_method_signature": "PayloadTransformingInterceptor.setResponseXslt(Resource responseXslt)", "testcase": false, "constructor": false}, {"identifier": "handleRequest", "parameters": "(MessageContext messageContext, Object endpoint)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean handleRequest(MessageContext messageContext, Object endpoint)", "full_signature": "@Override public boolean handleRequest(MessageContext messageContext, Object endpoint)", "class_method_signature": "PayloadTransformingInterceptor.handleRequest(MessageContext messageContext, Object endpoint)", "testcase": false, "constructor": false}, {"identifier": "handleResponse", "parameters": "(MessageContext messageContext, Object endpoint)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean handleResponse(MessageContext messageContext, Object endpoint)", "full_signature": "@Override public boolean handleResponse(MessageContext messageContext, Object endpoint)", "class_method_signature": "PayloadTransformingInterceptor.handleResponse(MessageContext messageContext, Object endpoint)", "testcase": false, "constructor": false}, {"identifier": "transformMessage", "parameters": "(WebServiceMessage message, Transformer transformer)", "modifiers": "private", "return": "void", "signature": "void transformMessage(WebServiceMessage message, Transformer transformer)", "full_signature": "private void transformMessage(WebServiceMessage message, Transformer transformer)", "class_method_signature": "PayloadTransformingInterceptor.transformMessage(WebServiceMessage message, Transformer transformer)", "testcase": false, "constructor": false}, {"identifier": "handleFault", "parameters": "(MessageContext messageContext, Object endpoint)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean handleFault(MessageContext messageContext, Object endpoint)", "full_signature": "@Override public boolean handleFault(MessageContext messageContext, Object endpoint)", "class_method_signature": "PayloadTransformingInterceptor.handleFault(MessageContext messageContext, Object endpoint)", "testcase": false, "constructor": false}, {"identifier": "afterCompletion", "parameters": "(MessageContext messageContext, Object endpoint, Exception ex)", "modifiers": "@Override public", "return": "void", "signature": "void afterCompletion(MessageContext messageContext, Object endpoint, Exception ex)", "full_signature": "@Override public void afterCompletion(MessageContext messageContext, Object endpoint, Exception ex)", "class_method_signature": "PayloadTransformingInterceptor.afterCompletion(MessageContext messageContext, Object endpoint, Exception ex)", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "PayloadTransformingInterceptor.afterPropertiesSet()", "testcase": false, "constructor": false}], "file": "spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/interceptor/PayloadTransformingInterceptor.java"}, "focal_method": {"identifier": "handleRequest", "parameters": "(MessageContext messageContext, Object endpoint)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean handleRequest(MessageContext messageContext, Object endpoint) throws Exception {\n\t\tif (requestTemplates != null) {\n\t\t\tWebServiceMessage request = messageContext.getRequest();\n\t\t\tTransformer transformer = requestTemplates.newTransformer();\n\t\t\ttransformMessage(request, transformer);\n\t\t\tlogger.debug(\"Request message transformed\");\n\t\t}\n\t\treturn true;\n\t}", "signature": "boolean handleRequest(MessageContext messageContext, Object endpoint)", "full_signature": "@Override public boolean handleRequest(MessageContext messageContext, Object endpoint)", "class_method_signature": "PayloadTransformingInterceptor.handleRequest(MessageContext messageContext, Object endpoint)", "testcase": false, "constructor": false, "invocations": ["getRequest", "newTransformer", "transformMessage", "debug"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}