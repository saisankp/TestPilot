{"test_class": {"identifier": "NumberItemTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ITEM_NAME = \"test\";", "modifier": "private static final", "type": "String", "declarator": "ITEM_NAME = \"test\"", "var_name": "ITEM_NAME"}, {"original_string": "private @Mock StateDescriptionService stateDescriptionService;", "modifier": "private @Mock", "type": "StateDescriptionService", "declarator": "stateDescriptionService", "var_name": "stateDescriptionService"}], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/library/items/NumberItemTest.java"}, "test_case": {"identifier": "setHSBType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setHSBType() {\n        NumberItem item = new NumberItem(ITEM_NAME);\n        State hsb = new HSBType(\"5,23,42\");\n        item.setState(hsb);\n        assertEquals(hsb, item.getState());\n    }", "signature": "void setHSBType()", "full_signature": "@Test public void setHSBType()", "class_method_signature": "NumberItemTest.setHSBType()", "testcase": true, "constructor": false, "invocations": ["setState", "assertEquals", "getState"]}, "focal_class": {"identifier": "NumberItem", "superclass": "extends GenericItem", "interfaces": "", "fields": [{"original_string": "private static List<Class<? extends State>> acceptedDataTypes = new ArrayList<>();", "modifier": "private static", "type": "List<Class<? extends State>>", "declarator": "acceptedDataTypes = new ArrayList<>()", "var_name": "acceptedDataTypes"}, {"original_string": "private static List<Class<? extends Command>> acceptedCommandTypes = new ArrayList<>();", "modifier": "private static", "type": "List<Class<? extends Command>>", "declarator": "acceptedCommandTypes = new ArrayList<>()", "var_name": "acceptedCommandTypes"}, {"original_string": "@Nullable\n    private Class<? extends Quantity<?>> dimension;", "modifier": "@Nullable\n    private", "type": "Class<? extends Quantity<?>>", "declarator": "dimension", "var_name": "dimension"}], "methods": [{"identifier": "NumberItem", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " NumberItem(String name)", "full_signature": "public  NumberItem(String name)", "class_method_signature": "NumberItem.NumberItem(String name)", "testcase": false, "constructor": true}, {"identifier": "NumberItem", "parameters": "(String type, String name)", "modifiers": "public", "return": "", "signature": " NumberItem(String type, String name)", "full_signature": "public  NumberItem(String type, String name)", "class_method_signature": "NumberItem.NumberItem(String type, String name)", "testcase": false, "constructor": true}, {"identifier": "getAcceptedDataTypes", "parameters": "()", "modifiers": "@Override public", "return": "List<Class<? extends State>>", "signature": "List<Class<? extends State>> getAcceptedDataTypes()", "full_signature": "@Override public List<Class<? extends State>> getAcceptedDataTypes()", "class_method_signature": "NumberItem.getAcceptedDataTypes()", "testcase": false, "constructor": false}, {"identifier": "getAcceptedCommandTypes", "parameters": "()", "modifiers": "@Override public", "return": "List<Class<? extends Command>>", "signature": "List<Class<? extends Command>> getAcceptedCommandTypes()", "full_signature": "@Override public List<Class<? extends Command>> getAcceptedCommandTypes()", "class_method_signature": "NumberItem.getAcceptedCommandTypes()", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(DecimalType command)", "modifiers": "public", "return": "void", "signature": "void send(DecimalType command)", "full_signature": "public void send(DecimalType command)", "class_method_signature": "NumberItem.send(DecimalType command)", "testcase": false, "constructor": false}, {"identifier": "getStateDescription", "parameters": "(@Nullable Locale locale)", "modifiers": "@Override public @Nullable", "return": "StateDescription", "signature": "StateDescription getStateDescription(@Nullable Locale locale)", "full_signature": "@Override public @Nullable StateDescription getStateDescription(@Nullable Locale locale)", "class_method_signature": "NumberItem.getStateDescription(@Nullable Locale locale)", "testcase": false, "constructor": false}, {"identifier": "getDimension", "parameters": "()", "modifiers": "public @Nullable", "return": "Class<? extends Quantity<?>>", "signature": "Class<? extends Quantity<?>> getDimension()", "full_signature": "public @Nullable Class<? extends Quantity<?>> getDimension()", "class_method_signature": "NumberItem.getDimension()", "testcase": false, "constructor": false}, {"identifier": "setState", "parameters": "(State state)", "modifiers": "@Override public", "return": "void", "signature": "void setState(State state)", "full_signature": "@Override public void setState(State state)", "class_method_signature": "NumberItem.setState(State state)", "testcase": false, "constructor": false}, {"identifier": "getUnitSymbol", "parameters": "()", "modifiers": "public @Nullable", "return": "String", "signature": "String getUnitSymbol()", "full_signature": "public @Nullable String getUnitSymbol()", "class_method_signature": "NumberItem.getUnitSymbol()", "testcase": false, "constructor": false}, {"identifier": "getUnit", "parameters": "()", "modifiers": "public @Nullable", "return": "Unit<? extends Quantity<?>>", "signature": "Unit<? extends Quantity<?>> getUnit()", "full_signature": "public @Nullable Unit<? extends Quantity<?>> getUnit()", "class_method_signature": "NumberItem.getUnit()", "testcase": false, "constructor": false}, {"identifier": "toQuantityType", "parameters": "(DecimalType originalType,\n            @Nullable Class<? extends Quantity<?>> dimension)", "modifiers": "public @Nullable", "return": "QuantityType<?>", "signature": "QuantityType<?> toQuantityType(DecimalType originalType,\n            @Nullable Class<? extends Quantity<?>> dimension)", "full_signature": "public @Nullable QuantityType<?> toQuantityType(DecimalType originalType,\n            @Nullable Class<? extends Quantity<?>> dimension)", "class_method_signature": "NumberItem.toQuantityType(DecimalType originalType,\n            @Nullable Class<? extends Quantity<?>> dimension)", "testcase": false, "constructor": false}, {"identifier": "getUnit", "parameters": "(@Nullable Class<? extends Quantity<?>> dimension)", "modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) private @Nullable", "return": "Unit<? extends Quantity<?>>", "signature": "Unit<? extends Quantity<?>> getUnit(@Nullable Class<? extends Quantity<?>> dimension)", "full_signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) private @Nullable Unit<? extends Quantity<?>> getUnit(@Nullable Class<? extends Quantity<?>> dimension)", "class_method_signature": "NumberItem.getUnit(@Nullable Class<? extends Quantity<?>> dimension)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/library/items/NumberItem.java"}, "focal_method": {"identifier": "setState", "parameters": "(State state)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setState(State state) {\n        // DecimalType update for a NumberItem with dimension, convert to QuantityType:\n        if (state instanceof DecimalType && dimension != null) {\n            Unit<?> unit = getUnit();\n            if (unit != null) {\n                super.setState(new QuantityType<>(((DecimalType) state).doubleValue(), unit));\n                return;\n            }\n        }\n\n        // QuantityType update, check unit and convert if necessary:\n        if (state instanceof QuantityType) {\n            Unit<?> itemUnit = getUnit();\n            Unit<?> stateUnit = ((QuantityType<?>) state).getUnit();\n            if (itemUnit != null && (!stateUnit.getSystemUnit().equals(itemUnit.getSystemUnit())\n                    || UnitUtils.isDifferentMeasurementSystem(itemUnit, stateUnit))) {\n                QuantityType<?> convertedState = ((QuantityType<?>) state).toUnit(itemUnit);\n                if (convertedState != null) {\n                    super.setState(convertedState);\n                    return;\n                }\n\n                // the state could not be converted to an accepted unit.\n                return;\n            }\n        }\n\n        if (isAcceptedState(acceptedDataTypes, state)) {\n            super.setState(state);\n        } else {\n            logSetTypeError(state);\n        }\n    }", "signature": "void setState(State state)", "full_signature": "@Override public void setState(State state)", "class_method_signature": "NumberItem.setState(State state)", "testcase": false, "constructor": false, "invocations": ["getUnit", "setState", "doubleValue", "getUnit", "getUnit", "equals", "getSystemUnit", "getSystemUnit", "isDifferentMeasurementSystem", "toUnit", "setState", "isAcceptedState", "setState", "logSetTypeError"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}