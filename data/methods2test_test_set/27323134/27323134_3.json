{"test_class": {"identifier": "UtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "mythtv-player/src/test/java/org/mythtv/android/presentation/utils/UtilsTest.java"}, "test_case": {"identifier": "testMeetsMinimumVersion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMeetsMinimumVersion() throws Exception {\n\n        assertThat( Utils.meetsMinimumVersion( \"b6ae90c071\", 0.28f ) ).isEqualTo( false );\n        assertThat( Utils.meetsMinimumVersion( \"Unknown\", 0.28f ) ).isEqualTo( false );\n        assertThat( Utils.meetsMinimumVersion( \"v0.27.6\", 0.28f ) ).isEqualTo( false );\n        assertThat( Utils.meetsMinimumVersion( \"v0.27\", 0.28f ) ).isEqualTo( false );\n        assertThat( Utils.meetsMinimumVersion( \"0.27\", 0.28f ) ).isEqualTo( false );\n        assertThat( Utils.meetsMinimumVersion( \"v0.27-xyz\", 0.28f ) ).isEqualTo( false );\n        assertThat( Utils.meetsMinimumVersion( \"v0.26\", 0.28f ) ).isEqualTo( false );\n        assertThat( Utils.meetsMinimumVersion( \"0.26\", 0.28f ) ).isEqualTo( false );\n        assertThat( Utils.meetsMinimumVersion( \"v0.26-xyz\", 0.28f ) ).isEqualTo( false );\n\n        assertThat( Utils.meetsMinimumVersion( \"v0.28\", 0.28f ) ).isEqualTo( true );\n        assertThat( Utils.meetsMinimumVersion( \"0.28\", 0.28f ) ).isEqualTo( true );\n        assertThat( Utils.meetsMinimumVersion( \"v0.28-xyz\", 0.28f ) ).isEqualTo( true );\n        assertThat( Utils.meetsMinimumVersion( \"v28.0\", 0.28f ) ).isEqualTo( true );\n\n        assertThat( Utils.meetsMinimumVersion( \"v0.29\", 0.28f ) ).isEqualTo( true );\n        assertThat( Utils.meetsMinimumVersion( \"0.29\", 0.28f ) ).isEqualTo( true );\n        assertThat( Utils.meetsMinimumVersion( \"v0.29-xyz\", 0.28f ) ).isEqualTo( true );\n        assertThat( Utils.meetsMinimumVersion( \"v29.0\", 0.28f ) ).isEqualTo( true );\n\n        assertThat( Utils.meetsMinimumVersion( \"v0.28.1-21-ge26a33c\", 0.28f ) ).isEqualTo( true );\n\n    }", "signature": "void testMeetsMinimumVersion()", "full_signature": "@Test public void testMeetsMinimumVersion()", "class_method_signature": "UtilsTest.testMeetsMinimumVersion()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "meetsMinimumVersion", "isEqualTo", "assertThat", "meetsMinimumVersion", "isEqualTo", "assertThat", "meetsMinimumVersion", "isEqualTo", "assertThat", "meetsMinimumVersion", "isEqualTo", "assertThat", "meetsMinimumVersion", "isEqualTo", "assertThat", "meetsMinimumVersion", "isEqualTo", "assertThat", "meetsMinimumVersion", "isEqualTo", "assertThat", "meetsMinimumVersion", "isEqualTo", "assertThat", "meetsMinimumVersion", "isEqualTo", "assertThat", "meetsMinimumVersion", "isEqualTo", "assertThat", "meetsMinimumVersion", "isEqualTo", "assertThat", "meetsMinimumVersion", "isEqualTo", "assertThat", "meetsMinimumVersion", "isEqualTo", "assertThat", "meetsMinimumVersion", "isEqualTo", "assertThat", "meetsMinimumVersion", "isEqualTo", "assertThat", "meetsMinimumVersion", "isEqualTo", "assertThat", "meetsMinimumVersion", "isEqualTo", "assertThat", "meetsMinimumVersion"]}, "focal_class": {"identifier": "Utils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Utils", "parameters": "()", "modifiers": "private", "return": "", "signature": " Utils()", "full_signature": "private  Utils()", "class_method_signature": "Utils.Utils()", "testcase": false, "constructor": true}, {"identifier": "getDisplaySize", "parameters": "( Context context )", "modifiers": "public static", "return": "Point", "signature": "Point getDisplaySize( Context context )", "full_signature": "public static Point getDisplaySize( Context context )", "class_method_signature": "Utils.getDisplaySize( Context context )", "testcase": false, "constructor": false}, {"identifier": "isOrientationPortrait", "parameters": "( Context context )", "modifiers": "public static", "return": "boolean", "signature": "boolean isOrientationPortrait( Context context )", "full_signature": "public static boolean isOrientationPortrait( Context context )", "class_method_signature": "Utils.isOrientationPortrait( Context context )", "testcase": false, "constructor": false}, {"identifier": "showErrorDialog", "parameters": "( Context context, String errorString )", "modifiers": "public static", "return": "void", "signature": "void showErrorDialog( Context context, String errorString )", "full_signature": "public static void showErrorDialog( Context context, String errorString )", "class_method_signature": "Utils.showErrorDialog( Context context, String errorString )", "testcase": false, "constructor": false}, {"identifier": "convertDpToPixel", "parameters": "( Context ctx, int dp )", "modifiers": "public static", "return": "int", "signature": "int convertDpToPixel( Context ctx, int dp )", "full_signature": "public static int convertDpToPixel( Context ctx, int dp )", "class_method_signature": "Utils.convertDpToPixel( Context ctx, int dp )", "testcase": false, "constructor": false}, {"identifier": "formatMillis", "parameters": "( int millis )", "modifiers": "public static", "return": "String", "signature": "String formatMillis( int millis )", "full_signature": "public static String formatMillis( int millis )", "class_method_signature": "Utils.formatMillis( int millis )", "testcase": false, "constructor": false}, {"identifier": "getDuration", "parameters": "( String videoUrl )", "modifiers": "public static", "return": "long", "signature": "long getDuration( String videoUrl )", "full_signature": "public static long getDuration( String videoUrl )", "class_method_signature": "Utils.getDuration( String videoUrl )", "testcase": false, "constructor": false}, {"identifier": "meetsMinimumVersion", "parameters": "( String version, float minimumVersion )", "modifiers": "public static", "return": "boolean", "signature": "boolean meetsMinimumVersion( String version, float minimumVersion )", "full_signature": "public static boolean meetsMinimumVersion( String version, float minimumVersion )", "class_method_signature": "Utils.meetsMinimumVersion( String version, float minimumVersion )", "testcase": false, "constructor": false}], "file": "mythtv-player/src/main/java/org/mythtv/android/presentation/utils/Utils.java"}, "focal_method": {"identifier": "meetsMinimumVersion", "parameters": "( String version, float minimumVersion )", "modifiers": "public static", "return": "boolean", "body": "public static boolean meetsMinimumVersion( String version, float minimumVersion ) {\n\n        if( \"Unknown\".equals( version ) || version.matches( \"\\\\b[0-9a-f]{5,40}\\\\b\" ) ) {\n\n            return false;\n        }\n\n        String cleanVersion = version;\n        if( cleanVersion.startsWith( \"v\" ) ) {\n            cleanVersion = cleanVersion.substring( 1 );\n        }\n\n        if( cleanVersion.contains( \"-\" ) ) {\n\n            cleanVersion = cleanVersion.substring( 0, cleanVersion.indexOf( '-' ) );\n\n        }\n\n        if( cleanVersion.length() > 4 ) {\n\n            cleanVersion = cleanVersion.substring( 0, 4 );\n\n        }\n\n        try {\n\n            Float.parseFloat( cleanVersion );\n\n        } catch( NumberFormatException e ) {\n\n            return false;\n        }\n\n        float extractedVersion = Float.parseFloat( cleanVersion );\n\n        if( !cleanVersion.startsWith( \"0\" ) ) {\n\n            extractedVersion *= 100;\n\n        }\n\n        return ( extractedVersion >= minimumVersion );\n    }", "signature": "boolean meetsMinimumVersion( String version, float minimumVersion )", "full_signature": "public static boolean meetsMinimumVersion( String version, float minimumVersion )", "class_method_signature": "Utils.meetsMinimumVersion( String version, float minimumVersion )", "testcase": false, "constructor": false, "invocations": ["equals", "matches", "startsWith", "substring", "contains", "substring", "indexOf", "length", "substring", "parseFloat", "parseFloat", "startsWith"]}, "repository": {"repo_id": 27323134, "url": "https://github.com/MythTV-Clients/MythtvPlayerForAndroid", "stars": 17, "created": "11/30/2014 3:26:45 AM +00:00", "updates": "2019-12-31T22:13:00+00:00", "fork": "False", "license": "licensed"}}