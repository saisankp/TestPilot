{"test_class": {"identifier": "AbstractDynamicConfigurationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AbstractDynamicConfiguration configuration;", "modifier": "private", "type": "AbstractDynamicConfiguration", "declarator": "configuration", "var_name": "configuration"}], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/config/configcenter/AbstractDynamicConfigurationTest.java"}, "test_case": {"identifier": "testConstructor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConstructor() {\n        URL url = URL.valueOf(\"default://\")\n                .addParameter(THREAD_POOL_PREFIX_PARAM_NAME, \"test\")\n                .addParameter(THREAD_POOL_SIZE_PARAM_NAME, 10)\n                .addParameter(THREAD_POOL_KEEP_ALIVE_TIME_PARAM_NAME, 100);\n\n        AbstractDynamicConfiguration configuration = new AbstractDynamicConfiguration(url) {\n\n            @Override\n            protected String doGetConfig(String key, String group) throws Exception {\n                return null;\n            }\n\n            @Override\n            protected void doClose() throws Exception {\n\n            }\n\n            @Override\n            protected boolean doRemoveConfig(String key, String group) throws Exception {\n                return false;\n            }\n        };\n\n        ThreadPoolExecutor threadPoolExecutor = configuration.getWorkersThreadPool();\n        ThreadFactory threadFactory = threadPoolExecutor.getThreadFactory();\n\n        Thread thread = threadFactory.newThread(() -> {\n        });\n\n        assertEquals(10, threadPoolExecutor.getCorePoolSize());\n        assertEquals(10, threadPoolExecutor.getMaximumPoolSize());\n        assertEquals(100, threadPoolExecutor.getKeepAliveTime(TimeUnit.MILLISECONDS));\n        assertEquals(\"test-thread-1\", thread.getName());\n    }", "signature": "void testConstructor()", "full_signature": "@Test public void testConstructor()", "class_method_signature": "AbstractDynamicConfigurationTest.testConstructor()", "testcase": true, "constructor": false, "invocations": ["addParameter", "addParameter", "addParameter", "valueOf", "getWorkersThreadPool", "getThreadFactory", "newThread", "assertEquals", "getCorePoolSize", "assertEquals", "getMaximumPoolSize", "assertEquals", "getKeepAliveTime", "assertEquals", "getName"]}, "focal_class": {"identifier": "AbstractDynamicConfiguration", "superclass": "", "interfaces": "implements DynamicConfiguration", "fields": [{"original_string": "public static final String PARAM_NAME_PREFIX = \"dubbo.config-center.\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_NAME_PREFIX = \"dubbo.config-center.\"", "var_name": "PARAM_NAME_PREFIX"}, {"original_string": "public static final String THREAD_POOL_PREFIX_PARAM_NAME = PARAM_NAME_PREFIX + \"thread-pool.prefix\";", "modifier": "public static final", "type": "String", "declarator": "THREAD_POOL_PREFIX_PARAM_NAME = PARAM_NAME_PREFIX + \"thread-pool.prefix\"", "var_name": "THREAD_POOL_PREFIX_PARAM_NAME"}, {"original_string": "public static final String DEFAULT_THREAD_POOL_PREFIX = PARAM_NAME_PREFIX + \"workers\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_THREAD_POOL_PREFIX = PARAM_NAME_PREFIX + \"workers\"", "var_name": "DEFAULT_THREAD_POOL_PREFIX"}, {"original_string": "public static final String THREAD_POOL_SIZE_PARAM_NAME = PARAM_NAME_PREFIX + \"thread-pool.size\";", "modifier": "public static final", "type": "String", "declarator": "THREAD_POOL_SIZE_PARAM_NAME = PARAM_NAME_PREFIX + \"thread-pool.size\"", "var_name": "THREAD_POOL_SIZE_PARAM_NAME"}, {"original_string": "public static final String THREAD_POOL_KEEP_ALIVE_TIME_PARAM_NAME = PARAM_NAME_PREFIX + \"thread-pool.keep-alive-time\";", "modifier": "public static final", "type": "String", "declarator": "THREAD_POOL_KEEP_ALIVE_TIME_PARAM_NAME = PARAM_NAME_PREFIX + \"thread-pool.keep-alive-time\"", "var_name": "THREAD_POOL_KEEP_ALIVE_TIME_PARAM_NAME"}, {"original_string": "public static final String GROUP_PARAM_NAME = PARAM_NAME_PREFIX + GROUP_KEY;", "modifier": "public static final", "type": "String", "declarator": "GROUP_PARAM_NAME = PARAM_NAME_PREFIX + GROUP_KEY", "var_name": "GROUP_PARAM_NAME"}, {"original_string": "public static final String TIMEOUT_PARAM_NAME = PARAM_NAME_PREFIX + TIMEOUT_KEY;", "modifier": "public static final", "type": "String", "declarator": "TIMEOUT_PARAM_NAME = PARAM_NAME_PREFIX + TIMEOUT_KEY", "var_name": "TIMEOUT_PARAM_NAME"}, {"original_string": "public static final int DEFAULT_THREAD_POOL_SIZE = 1;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_THREAD_POOL_SIZE = 1", "var_name": "DEFAULT_THREAD_POOL_SIZE"}, {"original_string": "public static final long DEFAULT_THREAD_POOL_KEEP_ALIVE_TIME = TimeUnit.MINUTES.toMillis(1);", "modifier": "public static final", "type": "long", "declarator": "DEFAULT_THREAD_POOL_KEEP_ALIVE_TIME = TimeUnit.MINUTES.toMillis(1)", "var_name": "DEFAULT_THREAD_POOL_KEEP_ALIVE_TIME"}, {"original_string": "protected final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "protected final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private final ThreadPoolExecutor workersThreadPool;", "modifier": "private final", "type": "ThreadPoolExecutor", "declarator": "workersThreadPool", "var_name": "workersThreadPool"}, {"original_string": "private final String group;", "modifier": "private final", "type": "String", "declarator": "group", "var_name": "group"}, {"original_string": "private final long timeout;", "modifier": "private final", "type": "long", "declarator": "timeout", "var_name": "timeout"}], "methods": [{"identifier": "AbstractDynamicConfiguration", "parameters": "(URL url)", "modifiers": "public", "return": "", "signature": " AbstractDynamicConfiguration(URL url)", "full_signature": "public  AbstractDynamicConfiguration(URL url)", "class_method_signature": "AbstractDynamicConfiguration.AbstractDynamicConfiguration(URL url)", "testcase": false, "constructor": true}, {"identifier": "AbstractDynamicConfiguration", "parameters": "(String threadPoolPrefixName,\n                                        int threadPoolSize,\n                                        long keepAliveTime,\n                                        String group,\n                                        long timeout)", "modifiers": "public", "return": "", "signature": " AbstractDynamicConfiguration(String threadPoolPrefixName,\n                                        int threadPoolSize,\n                                        long keepAliveTime,\n                                        String group,\n                                        long timeout)", "full_signature": "public  AbstractDynamicConfiguration(String threadPoolPrefixName,\n                                        int threadPoolSize,\n                                        long keepAliveTime,\n                                        String group,\n                                        long timeout)", "class_method_signature": "AbstractDynamicConfiguration.AbstractDynamicConfiguration(String threadPoolPrefixName,\n                                        int threadPoolSize,\n                                        long keepAliveTime,\n                                        String group,\n                                        long timeout)", "testcase": false, "constructor": true}, {"identifier": "addListener", "parameters": "(String key, String group, ConfigurationListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(String key, String group, ConfigurationListener listener)", "full_signature": "@Override public void addListener(String key, String group, ConfigurationListener listener)", "class_method_signature": "AbstractDynamicConfiguration.addListener(String key, String group, ConfigurationListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(String key, String group, ConfigurationListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeListener(String key, String group, ConfigurationListener listener)", "full_signature": "@Override public void removeListener(String key, String group, ConfigurationListener listener)", "class_method_signature": "AbstractDynamicConfiguration.removeListener(String key, String group, ConfigurationListener listener)", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "(String key, String group, long timeout)", "modifiers": "@Override public final", "return": "String", "signature": "String getConfig(String key, String group, long timeout)", "full_signature": "@Override public final String getConfig(String key, String group, long timeout)", "class_method_signature": "AbstractDynamicConfiguration.getConfig(String key, String group, long timeout)", "testcase": false, "constructor": false}, {"identifier": "getInternalProperty", "parameters": "(String key)", "modifiers": "@Override public", "return": "Object", "signature": "Object getInternalProperty(String key)", "full_signature": "@Override public Object getInternalProperty(String key)", "class_method_signature": "AbstractDynamicConfiguration.getInternalProperty(String key)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void close()", "full_signature": "@Override public final void close()", "class_method_signature": "AbstractDynamicConfiguration.close()", "testcase": false, "constructor": false}, {"identifier": "removeConfig", "parameters": "(String key, String group)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeConfig(String key, String group)", "full_signature": "@Override public boolean removeConfig(String key, String group)", "class_method_signature": "AbstractDynamicConfiguration.removeConfig(String key, String group)", "testcase": false, "constructor": false}, {"identifier": "getDefaultGroup", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDefaultGroup()", "full_signature": "@Override public String getDefaultGroup()", "class_method_signature": "AbstractDynamicConfiguration.getDefaultGroup()", "testcase": false, "constructor": false}, {"identifier": "getDefaultTimeout", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getDefaultTimeout()", "full_signature": "@Override public long getDefaultTimeout()", "class_method_signature": "AbstractDynamicConfiguration.getDefaultTimeout()", "testcase": false, "constructor": false}, {"identifier": "doGetConfig", "parameters": "(String key, String group)", "modifiers": "protected abstract", "return": "String", "signature": "String doGetConfig(String key, String group)", "full_signature": "protected abstract String doGetConfig(String key, String group)", "class_method_signature": "AbstractDynamicConfiguration.doGetConfig(String key, String group)", "testcase": false, "constructor": false}, {"identifier": "doClose", "parameters": "()", "modifiers": "protected abstract", "return": "void", "signature": "void doClose()", "full_signature": "protected abstract void doClose()", "class_method_signature": "AbstractDynamicConfiguration.doClose()", "testcase": false, "constructor": false}, {"identifier": "doRemoveConfig", "parameters": "(String key, String group)", "modifiers": "protected abstract", "return": "boolean", "signature": "boolean doRemoveConfig(String key, String group)", "full_signature": "protected abstract boolean doRemoveConfig(String key, String group)", "class_method_signature": "AbstractDynamicConfiguration.doRemoveConfig(String key, String group)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Runnable task, long timeout)", "modifiers": "protected final", "return": "void", "signature": "void execute(Runnable task, long timeout)", "full_signature": "protected final void execute(Runnable task, long timeout)", "class_method_signature": "AbstractDynamicConfiguration.execute(Runnable task, long timeout)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Callable<V> task, long timeout)", "modifiers": "protected final", "return": "V", "signature": "V execute(Callable<V> task, long timeout)", "full_signature": "protected final V execute(Callable<V> task, long timeout)", "class_method_signature": "AbstractDynamicConfiguration.execute(Callable<V> task, long timeout)", "testcase": false, "constructor": false}, {"identifier": "getWorkersThreadPool", "parameters": "()", "modifiers": "protected", "return": "ThreadPoolExecutor", "signature": "ThreadPoolExecutor getWorkersThreadPool()", "full_signature": "protected ThreadPoolExecutor getWorkersThreadPool()", "class_method_signature": "AbstractDynamicConfiguration.getWorkersThreadPool()", "testcase": false, "constructor": false}, {"identifier": "doFinally", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void doFinally()", "full_signature": "private void doFinally()", "class_method_signature": "AbstractDynamicConfiguration.doFinally()", "testcase": false, "constructor": false}, {"identifier": "shutdownWorkersThreadPool", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void shutdownWorkersThreadPool()", "full_signature": "private void shutdownWorkersThreadPool()", "class_method_signature": "AbstractDynamicConfiguration.shutdownWorkersThreadPool()", "testcase": false, "constructor": false}, {"identifier": "initWorkersThreadPool", "parameters": "(String threadPoolPrefixName,\n                                                       int threadPoolSize,\n                                                       long keepAliveTime)", "modifiers": "protected", "return": "ThreadPoolExecutor", "signature": "ThreadPoolExecutor initWorkersThreadPool(String threadPoolPrefixName,\n                                                       int threadPoolSize,\n                                                       long keepAliveTime)", "full_signature": "protected ThreadPoolExecutor initWorkersThreadPool(String threadPoolPrefixName,\n                                                       int threadPoolSize,\n                                                       long keepAliveTime)", "class_method_signature": "AbstractDynamicConfiguration.initWorkersThreadPool(String threadPoolPrefixName,\n                                                       int threadPoolSize,\n                                                       long keepAliveTime)", "testcase": false, "constructor": false}, {"identifier": "getThreadPoolPrefixName", "parameters": "(URL url)", "modifiers": "protected static", "return": "String", "signature": "String getThreadPoolPrefixName(URL url)", "full_signature": "protected static String getThreadPoolPrefixName(URL url)", "class_method_signature": "AbstractDynamicConfiguration.getThreadPoolPrefixName(URL url)", "testcase": false, "constructor": false}, {"identifier": "getThreadPoolSize", "parameters": "(URL url)", "modifiers": "protected static", "return": "int", "signature": "int getThreadPoolSize(URL url)", "full_signature": "protected static int getThreadPoolSize(URL url)", "class_method_signature": "AbstractDynamicConfiguration.getThreadPoolSize(URL url)", "testcase": false, "constructor": false}, {"identifier": "getThreadPoolKeepAliveTime", "parameters": "(URL url)", "modifiers": "protected static", "return": "long", "signature": "long getThreadPoolKeepAliveTime(URL url)", "full_signature": "protected static long getThreadPoolKeepAliveTime(URL url)", "class_method_signature": "AbstractDynamicConfiguration.getThreadPoolKeepAliveTime(URL url)", "testcase": false, "constructor": false}, {"identifier": "getParameter", "parameters": "(URL url, String name, String defaultValue)", "modifiers": "protected static", "return": "String", "signature": "String getParameter(URL url, String name, String defaultValue)", "full_signature": "protected static String getParameter(URL url, String name, String defaultValue)", "class_method_signature": "AbstractDynamicConfiguration.getParameter(URL url, String name, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getParameter", "parameters": "(URL url, String name, int defaultValue)", "modifiers": "protected static", "return": "int", "signature": "int getParameter(URL url, String name, int defaultValue)", "full_signature": "protected static int getParameter(URL url, String name, int defaultValue)", "class_method_signature": "AbstractDynamicConfiguration.getParameter(URL url, String name, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getParameter", "parameters": "(URL url, String name, long defaultValue)", "modifiers": "protected static", "return": "long", "signature": "long getParameter(URL url, String name, long defaultValue)", "full_signature": "protected static long getParameter(URL url, String name, long defaultValue)", "class_method_signature": "AbstractDynamicConfiguration.getParameter(URL url, String name, long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getGroup", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getGroup()", "full_signature": "protected String getGroup()", "class_method_signature": "AbstractDynamicConfiguration.getGroup()", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "protected", "return": "long", "signature": "long getTimeout()", "full_signature": "protected long getTimeout()", "class_method_signature": "AbstractDynamicConfiguration.getTimeout()", "testcase": false, "constructor": false}, {"identifier": "getGroup", "parameters": "(URL url)", "modifiers": "protected static", "return": "String", "signature": "String getGroup(URL url)", "full_signature": "protected static String getGroup(URL url)", "class_method_signature": "AbstractDynamicConfiguration.getGroup(URL url)", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "(URL url)", "modifiers": "protected static", "return": "long", "signature": "long getTimeout(URL url)", "full_signature": "protected static long getTimeout(URL url)", "class_method_signature": "AbstractDynamicConfiguration.getTimeout(URL url)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/AbstractDynamicConfiguration.java"}, "focal_method": {"identifier": "getWorkersThreadPool", "parameters": "()", "modifiers": "protected", "return": "ThreadPoolExecutor", "body": "protected ThreadPoolExecutor getWorkersThreadPool() {\n        return workersThreadPool;\n    }", "signature": "ThreadPoolExecutor getWorkersThreadPool()", "full_signature": "protected ThreadPoolExecutor getWorkersThreadPool()", "class_method_signature": "AbstractDynamicConfiguration.getWorkersThreadPool()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}