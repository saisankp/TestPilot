{"test_class": {"identifier": "RangeCombinerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();", "modifier": "", "type": "FilterFactory2", "declarator": "ff = CommonFactoryFinder.getFilterFactory2()", "var_name": "ff"}, {"original_string": "ExpressionTypeVisitor visitor;", "modifier": "", "type": "ExpressionTypeVisitor", "declarator": "visitor", "var_name": "visitor"}, {"original_string": "SimpleFeatureType ft;", "modifier": "", "type": "SimpleFeatureType", "declarator": "ft", "var_name": "ft"}], "file": "modules/library/main/src/test/java/org/geotools/filter/visitor/RangeCombinerTest.java"}, "test_case": {"identifier": "testOtherFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOtherFilter() {\n        PropertyName label = ff.property(\"label\");\n        Filter f1 = ff.greater(label, ff.literal(\"abc\"));\n        Filter f2 = ff.greater(label, ff.literal(\"adc\"));\n        Filter f3 = ff.notEqual(ff.function(\"random\"), ff.property(\"i\"));\n        RangeCombiner rc = new RangeCombiner.And(ff, ft, Arrays.asList(f1, f2, f3));\n        List<Filter> reduced = rc.getReducedFilters();\n        assertEquals(2, reduced.size());\n        assertTrue(reduced.contains(f2));\n        assertTrue(reduced.contains(f3));\n    }", "signature": "void testOtherFilter()", "full_signature": "@Test public void testOtherFilter()", "class_method_signature": "RangeCombinerTest.testOtherFilter()", "testcase": true, "constructor": false, "invocations": ["property", "greater", "literal", "greater", "literal", "notEqual", "function", "property", "asList", "getReducedFilters", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "RangeCombiner", "superclass": "", "interfaces": "", "fields": [{"original_string": "ExpressionTypeVisitor expressionTypeVisitor;", "modifier": "", "type": "ExpressionTypeVisitor", "declarator": "expressionTypeVisitor", "var_name": "expressionTypeVisitor"}, {"original_string": "Map<Expression, MultiRange<?>> rangeMap = new HashMap<>();", "modifier": "", "type": "Map<Expression, MultiRange<?>>", "declarator": "rangeMap = new HashMap<>()", "var_name": "rangeMap"}, {"original_string": "FeatureType featureType;", "modifier": "", "type": "FeatureType", "declarator": "featureType", "var_name": "featureType"}, {"original_string": "List<Filter> otherFilters = new ArrayList<Filter>();", "modifier": "", "type": "List<Filter>", "declarator": "otherFilters = new ArrayList<Filter>()", "var_name": "otherFilters"}, {"original_string": "List<Filter> filters;", "modifier": "", "type": "List<Filter>", "declarator": "filters", "var_name": "filters"}, {"original_string": "FilterFactory2 ff;", "modifier": "", "type": "FilterFactory2", "declarator": "ff", "var_name": "ff"}], "methods": [{"identifier": "RangeCombiner", "parameters": "(FilterFactory2 ff, FeatureType featureType, List<Filter> filters)", "modifiers": "public", "return": "", "signature": " RangeCombiner(FilterFactory2 ff, FeatureType featureType, List<Filter> filters)", "full_signature": "public  RangeCombiner(FilterFactory2 ff, FeatureType featureType, List<Filter> filters)", "class_method_signature": "RangeCombiner.RangeCombiner(FilterFactory2 ff, FeatureType featureType, List<Filter> filters)", "testcase": false, "constructor": true}, {"identifier": "getRange", "parameters": "(BinaryComparisonOperator op)", "modifiers": "private", "return": "ExpressionRange", "signature": "ExpressionRange getRange(BinaryComparisonOperator op)", "full_signature": "private ExpressionRange getRange(BinaryComparisonOperator op)", "class_method_signature": "RangeCombiner.getRange(BinaryComparisonOperator op)", "testcase": false, "constructor": false}, {"identifier": "isStatic", "parameters": "(Expression exp)", "modifiers": "private", "return": "boolean", "signature": "boolean isStatic(Expression exp)", "full_signature": "private boolean isStatic(Expression exp)", "class_method_signature": "RangeCombiner.isStatic(Expression exp)", "testcase": false, "constructor": false}, {"identifier": "getTypeIfComparable", "parameters": "(Expression ex)", "modifiers": "private", "return": "Class", "signature": "Class getTypeIfComparable(Expression ex)", "full_signature": "private Class getTypeIfComparable(Expression ex)", "class_method_signature": "RangeCombiner.getTypeIfComparable(Expression ex)", "testcase": false, "constructor": false}, {"identifier": "getPropertyName", "parameters": "(Expression ex)", "modifiers": "", "return": "String", "signature": "String getPropertyName(Expression ex)", "full_signature": " String getPropertyName(Expression ex)", "class_method_signature": "RangeCombiner.getPropertyName(Expression ex)", "testcase": false, "constructor": false}, {"identifier": "getReducedFilters", "parameters": "()", "modifiers": "public", "return": "List<Filter>", "signature": "List<Filter> getReducedFilters()", "full_signature": "public List<Filter> getReducedFilters()", "class_method_signature": "RangeCombiner.getReducedFilters()", "testcase": false, "constructor": false}, {"identifier": "addFiltersToResults", "parameters": "(List<Filter> result, Filter filter)", "modifiers": "protected abstract", "return": "void", "signature": "void addFiltersToResults(List<Filter> result, Filter filter)", "full_signature": "protected abstract void addFiltersToResults(List<Filter> result, Filter filter)", "class_method_signature": "RangeCombiner.addFiltersToResults(List<Filter> result, Filter filter)", "testcase": false, "constructor": false}, {"identifier": "combineRanges", "parameters": "(\n            MultiRange<T> r1, MultiRange<T> r2)", "modifiers": "protected abstract", "return": "MultiRange<T>", "signature": "MultiRange<T> combineRanges(\n            MultiRange<T> r1, MultiRange<T> r2)", "full_signature": "protected abstract MultiRange<T> combineRanges(\n            MultiRange<T> r1, MultiRange<T> r2)", "class_method_signature": "RangeCombiner.combineRanges(\n            MultiRange<T> r1, MultiRange<T> r2)", "testcase": false, "constructor": false}, {"identifier": "addRange", "parameters": "(Map<Expression, MultiRange<?>> rangeMap, Expression expression,\n            MultiRange<?> other)", "modifiers": "private", "return": "void", "signature": "void addRange(Map<Expression, MultiRange<?>> rangeMap, Expression expression,\n            MultiRange<?> other)", "full_signature": "private void addRange(Map<Expression, MultiRange<?>> rangeMap, Expression expression,\n            MultiRange<?> other)", "class_method_signature": "RangeCombiner.addRange(Map<Expression, MultiRange<?>> rangeMap, Expression expression,\n            MultiRange<?> other)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Expression ex, Class<T> target)", "modifiers": "private", "return": "T", "signature": "T evaluate(Expression ex, Class<T> target)", "full_signature": "private T evaluate(Expression ex, Class<T> target)", "class_method_signature": "RangeCombiner.evaluate(Expression ex, Class<T> target)", "testcase": false, "constructor": false}], "file": "modules/library/main/src/main/java/org/geotools/filter/visitor/RangeCombiner.java"}, "focal_method": {"identifier": "getReducedFilters", "parameters": "()", "modifiers": "public", "return": "List<Filter>", "body": "public List<Filter> getReducedFilters() {\n        if (rangeMap.isEmpty()) {\n            return filters;\n        }\n\n        List<Filter> result = new ArrayList<>(otherFilters);\n        for (Expression ex : new ArrayList<Expression>(rangeMap.keySet())) {\n            MultiRange<?> multiRange = rangeMap.get(ex);\n            addFiltersToResults(result, multiRange.toFilter(ff, ex));\n        }\n\n        return result;\n    }", "signature": "List<Filter> getReducedFilters()", "full_signature": "public List<Filter> getReducedFilters()", "class_method_signature": "RangeCombiner.getReducedFilters()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "keySet", "get", "addFiltersToResults", "toFilter"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}