{"test_class": {"identifier": "LazyInitTest", "superclass": "", "interfaces": "", "fields": [], "file": "api/src/test/java/edu/wpi/first/shuffleboard/api/util/LazyInitTest.java"}, "test_case": {"identifier": "testNullInitializer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNullInitializer() {\n    assertThrows(NullPointerException.class, () -> LazyInit.of(null), \"Null initializer should throw\");\n  }", "signature": "void testNullInitializer()", "full_signature": "@Test public void testNullInitializer()", "class_method_signature": "LazyInitTest.testNullInitializer()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "of"]}, "focal_class": {"identifier": "LazyInit", "superclass": "", "interfaces": "implements Supplier<T>", "fields": [{"original_string": "private final Lock lock = new ReentrantLock();", "modifier": "private final", "type": "Lock", "declarator": "lock = new ReentrantLock()", "var_name": "lock"}, {"original_string": "private boolean initialized = false;", "modifier": "private", "type": "boolean", "declarator": "initialized = false", "var_name": "initialized"}, {"original_string": "private T value = null;", "modifier": "private", "type": "T", "declarator": "value = null", "var_name": "value"}, {"original_string": "private final Callable<? extends T> initializer;", "modifier": "private final", "type": "Callable<? extends T>", "declarator": "initializer", "var_name": "initializer"}], "methods": [{"identifier": "LazyInit", "parameters": "(Callable<? extends T> initializer)", "modifiers": "public", "return": "", "signature": " LazyInit(Callable<? extends T> initializer)", "full_signature": "public  LazyInit(Callable<? extends T> initializer)", "class_method_signature": "LazyInit.LazyInit(Callable<? extends T> initializer)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(Callable<? extends T> initializer)", "modifiers": "public static", "return": "LazyInit<T>", "signature": "LazyInit<T> of(Callable<? extends T> initializer)", "full_signature": "public static LazyInit<T> of(Callable<? extends T> initializer)", "class_method_signature": "LazyInit.of(Callable<? extends T> initializer)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T get()", "full_signature": "@Override public T get()", "class_method_signature": "LazyInit.get()", "testcase": false, "constructor": false}, {"identifier": "hasValue", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasValue()", "full_signature": "public boolean hasValue()", "class_method_signature": "LazyInit.hasValue()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "LazyInit.clear()", "testcase": false, "constructor": false}], "file": "api/src/main/java/edu/wpi/first/shuffleboard/api/util/LazyInit.java"}, "focal_method": {"identifier": "of", "parameters": "(Callable<? extends T> initializer)", "modifiers": "public static", "return": "LazyInit<T>", "body": "public static <T> LazyInit<T> of(Callable<? extends T> initializer) {\n    return new LazyInit<>(initializer);\n  }", "signature": "LazyInit<T> of(Callable<? extends T> initializer)", "full_signature": "public static LazyInit<T> of(Callable<? extends T> initializer)", "class_method_signature": "LazyInit.of(Callable<? extends T> initializer)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}