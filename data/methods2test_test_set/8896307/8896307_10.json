{"test_class": {"identifier": "SpaTest", "superclass": "", "interfaces": "", "fields": [], "file": "universal/src/test/java/com/chiralbehaviors/CoRE/universal/SpaTest.java"}, "test_case": {"identifier": "testSpa", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSpa() throws Exception {\n        ObjectNode node = (ObjectNode) new ObjectMapper().readTree(getClass().getResourceAsStream(\"/test-app.json\"));\n        Spa spa = new Spa(node);\n        Page page = spa.getRoot();\n        assertNotNull(page);\n        assertEquals(\"Applications\", page.getTitle());\n        assertEquals(\"All applications\", page.getName());\n        assertEquals(\"Page with all applications\", page.getDescription());\n        assertNull(page.getFrame());\n        assertNotNull(page.getQuery());\n\n        Relation relation = new Relation(\"singlePageApplications\");\n        Action create = page.getCreate(relation);\n        assertNotNull(create);\n        ObjectNode extract = create.getExtract();\n        assertNotNull(extract);\n        assertEquals(1, extract.size());\n        assertEquals(\"bar\", extract.get(\"foo\")\n                                   .asText());\n        assertNotNull(create.getQuery());\n        assertEquals(\"cc2f49ae-1c72-11e7-b9f2-31cf61e9d1f6\",\n                     create.getFrameBy());\n\n        assertNotNull(page.getUpdate(relation));\n        assertNotNull(page.getDelete(relation));\n\n        Launch launch = page.getLaunch(relation);\n        assertNotNull(launch);\n        assertNull(launch.getFrame());\n        assertEquals(\"id\", launch.getFrameBy());\n        assertEquals(\"cc2f49ae-1c72-11e7-b9f2-31cf61e9d1f6\",\n                     launch.getImmediate());\n        assertEquals(\"id\", launch.getLaunchBy());\n\n        Route route = page.getNavigation(relation);\n        assertNotNull(route);\n        assertEquals(\"workspace\", route.getFrameBy());\n        extract = route.getExtract();\n        assertNotNull(extract);\n        assertEquals(\"bar\", extract.get(\"foo\")\n                                   .asText());\n        assertEquals(\"foo\", route.getPath());\n    }", "signature": "void testSpa()", "full_signature": "@Test public void testSpa()", "class_method_signature": "SpaTest.testSpa()", "testcase": true, "constructor": false, "invocations": ["readTree", "getResourceAsStream", "getClass", "getRoot", "assertNotNull", "assertEquals", "getTitle", "assertEquals", "getName", "assertEquals", "getDescription", "assertNull", "getFrame", "assertNotNull", "getQuery", "getCreate", "assertNotNull", "getExtract", "assertNotNull", "assertEquals", "size", "assertEquals", "asText", "get", "assertNotNull", "getQuery", "assertEquals", "getFrameBy", "assertNotNull", "getUpdate", "assertNotNull", "getDelete", "getLaunch", "assertNotNull", "assertNull", "getFrame", "assertEquals", "getFrameBy", "assertEquals", "getImmediate", "assertEquals", "getLaunchBy", "getNavigation", "assertNotNull", "assertEquals", "getFrameBy", "getExtract", "assertNotNull", "assertEquals", "asText", "get", "assertEquals", "getPath"]}, "focal_class": {"identifier": "Spa", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String                  description;", "modifier": "private", "type": "String", "declarator": "description", "var_name": "description"}, {"original_string": "private String                  frame;", "modifier": "private", "type": "String", "declarator": "frame", "var_name": "frame"}, {"original_string": "private boolean                 meta = false;", "modifier": "private", "type": "boolean", "declarator": "meta = false", "var_name": "meta"}, {"original_string": "private String                  name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private String                  root;", "modifier": "private", "type": "String", "declarator": "root", "var_name": "root"}, {"original_string": "private final Map<String, Page> routes;", "modifier": "private final", "type": "Map<String, Page>", "declarator": "routes", "var_name": "routes"}], "methods": [{"identifier": "manifest", "parameters": "(String resource)", "modifiers": "public static", "return": "Spa", "signature": "Spa manifest(String resource)", "full_signature": "public static Spa manifest(String resource)", "class_method_signature": "Spa.manifest(String resource)", "testcase": false, "constructor": false}, {"identifier": "routes", "parameters": "(ArrayNode pages)", "modifiers": "public static", "return": "Map<String, Page>", "signature": "Map<String, Page> routes(ArrayNode pages)", "full_signature": "public static Map<String, Page> routes(ArrayNode pages)", "class_method_signature": "Spa.routes(ArrayNode pages)", "testcase": false, "constructor": false}, {"identifier": "Spa", "parameters": "()", "modifiers": "public", "return": "", "signature": " Spa()", "full_signature": "public  Spa()", "class_method_signature": "Spa.Spa()", "testcase": false, "constructor": true}, {"identifier": "Spa", "parameters": "(ObjectNode app)", "modifiers": "public", "return": "", "signature": " Spa(ObjectNode app)", "full_signature": "public  Spa(ObjectNode app)", "class_method_signature": "Spa.Spa(ObjectNode app)", "testcase": false, "constructor": true}, {"identifier": "Spa", "parameters": "(String name, String description, String frame, JsonNode jsonNode,\n               String root, Map<String, Page> routes)", "modifiers": "public", "return": "", "signature": " Spa(String name, String description, String frame, JsonNode jsonNode,\n               String root, Map<String, Page> routes)", "full_signature": "public  Spa(String name, String description, String frame, JsonNode jsonNode,\n               String root, Map<String, Page> routes)", "class_method_signature": "Spa.Spa(String name, String description, String frame, JsonNode jsonNode,\n               String root, Map<String, Page> routes)", "testcase": false, "constructor": true}, {"identifier": "getDescription", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDescription()", "full_signature": "public String getDescription()", "class_method_signature": "Spa.getDescription()", "testcase": false, "constructor": false}, {"identifier": "getFrame", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFrame()", "full_signature": "public String getFrame()", "class_method_signature": "Spa.getFrame()", "testcase": false, "constructor": false}, {"identifier": "getMeta", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getMeta()", "full_signature": "public boolean getMeta()", "class_method_signature": "Spa.getMeta()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "Spa.getName()", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "public", "return": "Page", "signature": "Page getRoot()", "full_signature": "public Page getRoot()", "class_method_signature": "Spa.getRoot()", "testcase": false, "constructor": false}, {"identifier": "route", "parameters": "(String path)", "modifiers": "public", "return": "Page", "signature": "Page route(String path)", "full_signature": "public Page route(String path)", "class_method_signature": "Spa.route(String path)", "testcase": false, "constructor": false}, {"identifier": "route", "parameters": "(String path, Page page)", "modifiers": "public", "return": "void", "signature": "void route(String path, Page page)", "full_signature": "public void route(String path, Page page)", "class_method_signature": "Spa.route(String path, Page page)", "testcase": false, "constructor": false}, {"identifier": "setDescription", "parameters": "(String description)", "modifiers": "public", "return": "void", "signature": "void setDescription(String description)", "full_signature": "public void setDescription(String description)", "class_method_signature": "Spa.setDescription(String description)", "testcase": false, "constructor": false}, {"identifier": "setFrame", "parameters": "(String frame)", "modifiers": "public", "return": "void", "signature": "void setFrame(String frame)", "full_signature": "public void setFrame(String frame)", "class_method_signature": "Spa.setFrame(String frame)", "testcase": false, "constructor": false}, {"identifier": "setMeta", "parameters": "(boolean meta)", "modifiers": "public", "return": "void", "signature": "void setMeta(boolean meta)", "full_signature": "public void setMeta(boolean meta)", "class_method_signature": "Spa.setMeta(boolean meta)", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setName(String name)", "full_signature": "public void setName(String name)", "class_method_signature": "Spa.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "setRoot", "parameters": "(String root)", "modifiers": "public", "return": "void", "signature": "void setRoot(String root)", "full_signature": "public void setRoot(String root)", "class_method_signature": "Spa.setRoot(String root)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Spa.toString()", "testcase": false, "constructor": false}], "file": "universal/src/main/java/com/chiralbehaviors/CoRE/universal/Spa.java"}, "focal_method": {"identifier": "Spa", "parameters": "()", "modifiers": "public", "return": "", "body": "public Spa() {\n        routes = new HashMap<>();\n    }", "signature": " Spa()", "full_signature": "public  Spa()", "class_method_signature": "Spa.Spa()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 8896307, "url": "https://github.com/ChiralBehaviors/Ultrastructure", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 22985, "license": "licensed"}}