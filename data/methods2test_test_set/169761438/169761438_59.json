{"test_class": {"identifier": "DateUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "OpenADRServerVTNCommon/src/test/java/com/avob/openadr/server/common/vtn/utils/DateUtilsTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() throws UnparsableDateFormatException {\n        assertEquals(new Long(1483228800000L), DateUtils.parseDateAsTimestamp(\"2017-01-01\"));\n        assertEquals(new Long(1483228800000L), DateUtils.parseDateAsTimestamp(\"2017-01-01 00:00\"));\n        assertEquals(new Long(1483228800000L), DateUtils.parseDateAsTimestamp(\"01/01/2017\"));\n        assertEquals(new Long(1483228800000L), DateUtils.parseDateAsTimestamp(\"01/01/2017 00:00\"));\n        assertEquals(new Long(1483228800000L), DateUtils.parseDateAsTimestamp(\"1483228800000\"));\n\n        boolean exception = false;\n        try {\n            assertEquals(new Long(1483228800000L), DateUtils.parseDateAsTimestamp(\"mouaiccool\"));\n        } catch (UnparsableDateFormatException e) {\n            exception = true;\n        }\n        assertTrue(exception);\n\n        exception = false;\n        try {\n            assertEquals(new Long(1483228800000L), DateUtils.parseDateAsTimestamp(\"\"));\n        } catch (UnparsableDateFormatException e) {\n            exception = true;\n        }\n        assertTrue(exception);\n\n        exception = false;\n        try {\n            assertEquals(new Long(1483228800000L), DateUtils.parseDateAsTimestamp(null));\n        } catch (UnparsableDateFormatException e) {\n            exception = true;\n        }\n        assertTrue(exception);\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "DateUtilsTest.test()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "parseDateAsTimestamp", "assertEquals", "parseDateAsTimestamp", "assertEquals", "parseDateAsTimestamp", "assertEquals", "parseDateAsTimestamp", "assertEquals", "parseDateAsTimestamp", "assertEquals", "parseDateAsTimestamp", "assertTrue", "assertEquals", "parseDateAsTimestamp", "assertTrue", "assertEquals", "parseDateAsTimestamp", "assertTrue"]}, "focal_class": {"identifier": "DateUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<SimpleDateFormat> formats = Lists.newArrayList();", "modifier": "private static final", "type": "List<SimpleDateFormat>", "declarator": "formats = Lists.newArrayList()", "var_name": "formats"}], "methods": [{"identifier": "DateUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " DateUtils()", "full_signature": "private  DateUtils()", "class_method_signature": "DateUtils.DateUtils()", "testcase": false, "constructor": true}, {"identifier": "parseDateAsTimestamp", "parameters": "(String date)", "modifiers": "public static", "return": "Long", "signature": "Long parseDateAsTimestamp(String date)", "full_signature": "public static Long parseDateAsTimestamp(String date)", "class_method_signature": "DateUtils.parseDateAsTimestamp(String date)", "testcase": false, "constructor": false}], "file": "OpenADRServerVTNCommon/src/main/java/com/avob/openadr/server/common/vtn/utils/DateUtils.java"}, "focal_method": {"identifier": "parseDateAsTimestamp", "parameters": "(String date)", "modifiers": "public static", "return": "Long", "body": "public static Long parseDateAsTimestamp(String date) throws UnparsableDateFormatException {\n        if (date != null) {\n            try {\n                return Long.valueOf(date);\n            } catch (NumberFormatException e) {\n                for (SimpleDateFormat f : formats) {\n                    try {\n                        Date d = f.parse(date);\n                        return d.getTime();\n                    } catch (ParseException ex) {\n                    }\n\n                }\n            }\n        }\n        throw new UnparsableDateFormatException();\n\n    }", "signature": "Long parseDateAsTimestamp(String date)", "full_signature": "public static Long parseDateAsTimestamp(String date)", "class_method_signature": "DateUtils.parseDateAsTimestamp(String date)", "testcase": false, "constructor": false, "invocations": ["valueOf", "parse", "getTime"]}, "repository": {"repo_id": 169761438, "url": "https://github.com/avob/OpenADR", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 55915, "license": "licensed"}}