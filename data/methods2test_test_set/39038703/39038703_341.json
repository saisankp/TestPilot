{"test_class": {"identifier": "PathsClassLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FILENAME_PREFIX = \"foo\";", "modifier": "private static final", "type": "String", "declarator": "FILENAME_PREFIX = \"foo\"", "var_name": "FILENAME_PREFIX"}, {"original_string": "private static final String CLASS_FILENAME_SUFFIX = \".class\";", "modifier": "private static final", "type": "String", "declarator": "CLASS_FILENAME_SUFFIX = \".class\"", "var_name": "CLASS_FILENAME_SUFFIX"}, {"original_string": "private static final String JAR_FILENAME_SUFFIX = \".jar\";", "modifier": "private static final", "type": "String", "declarator": "JAR_FILENAME_SUFFIX = \".jar\"", "var_name": "JAR_FILENAME_SUFFIX"}, {"original_string": "private static final ClassLoader parentCL = PathsClassLoaderTest.class.getClassLoader();", "modifier": "private static final", "type": "ClassLoader", "declarator": "parentCL = PathsClassLoaderTest.class.getClassLoader()", "var_name": "parentCL"}, {"original_string": "private static File classFile;", "modifier": "private static", "type": "File", "declarator": "classFile", "var_name": "classFile"}, {"original_string": "private static File jarFile;", "modifier": "private static", "type": "File", "declarator": "jarFile", "var_name": "jarFile"}, {"original_string": "private static String className;", "modifier": "private static", "type": "String", "declarator": "className", "var_name": "className"}, {"original_string": "private static String jarClassName;", "modifier": "private static", "type": "String", "declarator": "jarClassName", "var_name": "jarClassName"}], "file": "dspace-api/src/test/java/org/dspace/core/PathsClassLoaderTest.java"}, "test_case": {"identifier": "testFindClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindClass()\n            throws Exception\n    {\n        System.out.println(\"findClass\");\n\n        String[] classpath = { classFile.getParent(),\n            jarFile.getCanonicalPath() };\n        PathsClassLoader instance = new PathsClassLoader(parentCL, classpath);\n        Class result = instance.findClass(className);\n        assertTrue(\"Should return a Class from file\", result instanceof Class);\n\n        classpath[0] = jarFile.getCanonicalPath();\n        instance = new PathsClassLoader(parentCL, classpath);\n        result = instance.findClass(jarClassName);\n        assertTrue(\"Should return a Class from JAR\", result instanceof Class);\n    }", "signature": "void testFindClass()", "full_signature": "@Test public void testFindClass()", "class_method_signature": "PathsClassLoaderTest.testFindClass()", "testcase": true, "constructor": false, "invocations": ["println", "getParent", "getCanonicalPath", "findClass", "assertTrue", "getCanonicalPath", "findClass", "assertTrue"]}, "focal_class": {"identifier": "PathsClassLoader", "superclass": "extends ClassLoader", "interfaces": "", "fields": [{"original_string": "private final String[] classpath;", "modifier": "private final", "type": "String[]", "declarator": "classpath", "var_name": "classpath"}], "methods": [{"identifier": "PathsClassLoader", "parameters": "(ClassLoader parent, String[] classpath)", "modifiers": "", "return": "", "signature": " PathsClassLoader(ClassLoader parent, String[] classpath)", "full_signature": "  PathsClassLoader(ClassLoader parent, String[] classpath)", "class_method_signature": "PathsClassLoader.PathsClassLoader(ClassLoader parent, String[] classpath)", "testcase": false, "constructor": true}, {"identifier": "findClass", "parameters": "(String name)", "modifiers": "@Override protected", "return": "Class", "signature": "Class findClass(String name)", "full_signature": "@Override protected Class findClass(String name)", "class_method_signature": "PathsClassLoader.findClass(String name)", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/core/PathsClassLoader.java"}, "focal_method": {"identifier": "findClass", "parameters": "(String name)", "modifiers": "@Override protected", "return": "Class", "body": "@Override\n    protected Class findClass(String name) throws ClassNotFoundException\n    {\n        Class found = null;\n        for (String aPath : classpath)\n        {\n            String bodyPath = name.replace('.', '/');\n            File pathFile = new File(aPath);\n            if (pathFile.isDirectory())\n            {\n                byte[] body;\n                int bodySize;\n                File bodyFile = new File(pathFile, bodyPath + \".class\");\n                if (!bodyFile.exists())\n                {\n                    continue;\n                }\n                bodySize = (int) bodyFile.length();\n                body = new byte[bodySize];\n                FileInputStream bodyStream = null;\n                try\n                {\n                    bodyStream = new FileInputStream(bodyFile);\n                    int pos = 0;\n                    int len;\n                    do\n                    {\n                        len = bodyStream.read(body, pos, bodySize);\n                        pos += len;\n                    } while (pos < bodySize);\n                } catch (IOException e)\n                {\n                    throw new ClassNotFoundException(\"Class body not read\", e);\n                } finally\n                {\n                    if (null != bodyStream)\n                    {\n                        try\n                        {\n                            bodyStream.close();\n                        } catch (IOException ex)\n                        {\n                            /* don't care */\n                        }\n                    }\n                }\n                found = defineClass(name, body, 0, bodySize);\n                break;\n            }\n            else if (pathFile.isFile())\n            {\n                byte[] body;\n                int bodySize;\n                InputStream bodyStream = null;\n                JarFile jar = null;\n                try\n                {\n                    jar = new JarFile(pathFile);\n                    JarEntry entry = jar.getJarEntry(bodyPath + \".class\");\n                    if (null == entry)\n                    {\n                        continue;\n                    }\n                    bodyStream = jar.getInputStream(entry);\n                    bodySize = (int) entry.getSize();\n                    body = new byte[bodySize];\n                    int pos = 0;\n                    int len;\n                    do\n                    {\n                        len = bodyStream.read(body, pos, bodySize);\n                        pos += len;\n                    } while (pos < bodySize);\n                } catch (IOException e)\n                {\n                    throw new ClassNotFoundException(\"Class body not read\", e);\n                } finally\n                {\n                    if (null != bodyStream)\n                    {\n                        try\n                        {\n                            bodyStream.close();\n                        } catch (IOException e)\n                        {\n                            /* don't care */\n                        }\n                    }\n                    if (null != jar)\n                    {\n                        try\n                        {\n                            jar.close();\n                        } catch (IOException e)\n                        {\n                            /* don't care */\n                        }\n                    }\n                }\n                found = defineClass(name, body, 0, bodySize);\n                break;\n            }\n            else\n            {\n                // Just skip this path element -- probably just file not found here.\n            }\n        }\n        if (null == found)\n        {\n            throw new ClassNotFoundException(name);\n        }\n        else\n        {\n            resolveClass(found);\n            return found;\n        }\n    }", "signature": "Class findClass(String name)", "full_signature": "@Override protected Class findClass(String name)", "class_method_signature": "PathsClassLoader.findClass(String name)", "testcase": false, "constructor": false, "invocations": ["replace", "isDirectory", "exists", "length", "read", "close", "defineClass", "isFile", "getJarEntry", "getInputStream", "getSize", "read", "close", "close", "defineClass", "resolveClass"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}