{"test_class": {"identifier": "UnassignActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ApiDate NOW = ApiDate.now();", "modifier": "private static final", "type": "ApiDate", "declarator": "NOW = ApiDate.now()", "var_name": "NOW"}, {"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock KeywhizClient keywhizClient;", "modifier": "@Mock", "type": "KeywhizClient", "declarator": "keywhizClient", "var_name": "keywhizClient"}, {"original_string": "UnassignActionConfig unassignActionConfig;", "modifier": "", "type": "UnassignActionConfig", "declarator": "unassignActionConfig", "var_name": "unassignActionConfig"}, {"original_string": "UnassignAction unassignAction;", "modifier": "", "type": "UnassignAction", "declarator": "unassignAction", "var_name": "unassignAction"}, {"original_string": "Client client = new Client(11, \"client-name\", null, null, null, null, null, null, null, null, false,\n      false);", "modifier": "", "type": "Client", "declarator": "client = new Client(11, \"client-name\", null, null, null, null, null, null, null, null, false,\n      false)", "var_name": "client"}, {"original_string": "Group group = new Group(22, \"group-name\", null, null, null, null, null, null);", "modifier": "", "type": "Group", "declarator": "group = new Group(22, \"group-name\", null, null, null, null, null, null)", "var_name": "group"}, {"original_string": "Secret secret = new Secret(33, \"secret-name\", null, () -> \"c2VjcmV0MQ==\", \"checksum\", NOW, null, NOW, null, null, null,\n      ImmutableMap.of(), 0, 1L, NOW, null);", "modifier": "", "type": "Secret", "declarator": "secret = new Secret(33, \"secret-name\", null, () -> \"c2VjcmV0MQ==\", \"checksum\", NOW, null, NOW, null, null, null,\n      ImmutableMap.of(), 0, 1L, NOW, null)", "var_name": "secret"}, {"original_string": "SanitizedSecret sanitizedSecret = SanitizedSecret.fromSecret(secret);", "modifier": "", "type": "SanitizedSecret", "declarator": "sanitizedSecret = SanitizedSecret.fromSecret(secret)", "var_name": "sanitizedSecret"}, {"original_string": "GroupDetailResponse groupDetailResponse = GroupDetailResponse.fromGroup(group,\n      ImmutableList.of(sanitizedSecret), ImmutableList.of(client));", "modifier": "", "type": "GroupDetailResponse", "declarator": "groupDetailResponse = GroupDetailResponse.fromGroup(group,\n      ImmutableList.of(sanitizedSecret), ImmutableList.of(client))", "var_name": "groupDetailResponse"}], "file": "cli/src/test/java/keywhiz/cli/commands/UnassignActionTest.java"}, "test_case": {"identifier": "unassignValidatesGroupName", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void unassignValidatesGroupName() throws Exception {\n    unassignActionConfig.unassignType = Arrays.asList(\"secret\");\n    unassignActionConfig.name = \"General_Password\";\n    unassignActionConfig.group = \"Invalid Name\";\n\n    unassignAction.run();\n  }", "signature": "void unassignValidatesGroupName()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void unassignValidatesGroupName()", "class_method_signature": "UnassignActionTest.unassignValidatesGroupName()", "testcase": true, "constructor": false, "invocations": ["asList", "run"]}, "focal_class": {"identifier": "UnassignAction", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(UnassignAction.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(UnassignAction.class)", "var_name": "logger"}, {"original_string": "private final UnassignActionConfig unassignActionConfig;", "modifier": "private final", "type": "UnassignActionConfig", "declarator": "unassignActionConfig", "var_name": "unassignActionConfig"}, {"original_string": "private final KeywhizClient keywhizClient;", "modifier": "private final", "type": "KeywhizClient", "declarator": "keywhizClient", "var_name": "keywhizClient"}], "methods": [{"identifier": "UnassignAction", "parameters": "(UnassignActionConfig unassignActionConfig, KeywhizClient client)", "modifiers": "public", "return": "", "signature": " UnassignAction(UnassignActionConfig unassignActionConfig, KeywhizClient client)", "full_signature": "public  UnassignAction(UnassignActionConfig unassignActionConfig, KeywhizClient client)", "class_method_signature": "UnassignAction.UnassignAction(UnassignActionConfig unassignActionConfig, KeywhizClient client)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "UnassignAction.run()", "testcase": false, "constructor": false}], "file": "cli/src/main/java/keywhiz/cli/commands/UnassignAction.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override public void run() {\n    List<String> unassignType = unassignActionConfig.unassignType;\n\n    if (unassignType == null || unassignType.isEmpty()) {\n      throw new IllegalArgumentException(\"Must specify a single type to unassign.\");\n    }\n\n    if (unassignActionConfig.name == null || !validName(unassignActionConfig.name) ||\n        unassignActionConfig.group == null || !validName(unassignActionConfig.group)) {\n      throw new IllegalArgumentException(format(\"Invalid name, must match %s\", VALID_NAME_PATTERN));\n    }\n    Group group;\n    try {\n      group = keywhizClient.getGroupByName(unassignActionConfig.group);\n      if (group == null) {\n        throw new AssertionError(\"Group doesn't exist.\");\n      }\n    } catch (IOException e) {\n      throw Throwables.propagate(e);\n    }\n\n    String firstType = unassignType.get(0).toLowerCase().trim();\n\n    switch (firstType) {\n      case \"client\":\n\n        try {\n          Client client = keywhizClient.getClientByName(unassignActionConfig.name);\n          if (!keywhizClient.groupDetailsForId(group.getId()).getClients().contains(client)) {\n            throw new AssertionError(\n                format(\"Client '%s' not assigned to group '%s'.\", unassignActionConfig.name,\n                    group));\n          }\n\n          logger.info(\"Evicting client '{}' from group '{}'.\", client.getName(), group.getName());\n          keywhizClient.evictClientFromGroupByIds(client.getId(), group.getId());\n        } catch (NotFoundException e) {\n          throw new AssertionError(\"Client or group doesn't exist.\");\n        } catch (IOException e) {\n          throw Throwables.propagate(e);\n        }\n        break;\n\n      case \"secret\":\n        try {\n          long groupId = group.getId();\n          SanitizedSecret sanitizedSecret =\n              keywhizClient.getSanitizedSecretByName(unassignActionConfig.name);\n          if (!keywhizClient.groupDetailsForId(groupId).getSecrets().contains(sanitizedSecret)) {\n            throw new AssertionError(\n                format(\"Secret '%s' not assigned to group '%s'\", unassignActionConfig.name, group));\n          }\n          logger.info(\"Revoke group '{}' access to secret '{}'.\", group.getName(),\n              SanitizedSecret.displayName(sanitizedSecret));\n          keywhizClient.revokeSecretFromGroupByIds(sanitizedSecret.id(), groupId);\n        } catch (NotFoundException e) {\n          throw new AssertionError(\"Secret or group doesn't exist.\");\n        } catch (IOException e) {\n          throw Throwables.propagate(e);\n        }\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"Invalid unassign type specified: \" + firstType);\n    }\n  }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "UnassignAction.run()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "validName", "validName", "format", "getGroupByName", "propagate", "trim", "toLowerCase", "get", "getClientByName", "contains", "getClients", "groupDetailsForId", "getId", "format", "info", "getName", "getName", "evictClientFromGroupByIds", "getId", "getId", "propagate", "getId", "getSanitizedSecretByName", "contains", "getSecrets", "groupDetailsForId", "format", "info", "getName", "displayName", "revokeSecretFromGroupByIds", "id", "propagate"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}