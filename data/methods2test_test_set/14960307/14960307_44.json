{"test_class": {"identifier": "MobileTextUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(MobileTextUtilTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MobileTextUtilTest.class)", "var_name": "logger"}], "file": "ch-commons-charset/src/test/java/com/cloudhopper/commons/charset/MobileTextUtilTest.java"}, "test_case": {"identifier": "replaceAccentedChars", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void replaceAccentedChars() throws Exception {\n        String source = null;\n        StringBuilder buffer = null;\n        int replaced = -1;\n\n        source = \"hello\";\n        buffer = new StringBuilder(source);\n        replaced = MobileTextUtil.replaceAccentedChars(buffer);\n        Assert.assertEquals(0, replaced);\n        Assert.assertEquals(source, buffer.toString());\n\n        source = \"h\\u00E9llo\";\n        buffer = new StringBuilder(source);\n        replaced = MobileTextUtil.replaceAccentedChars(buffer);\n        Assert.assertEquals(1, replaced);\n        Assert.assertEquals(\"hello\", buffer.toString());\n\n        source = \"\\u00E8\\u00E9\\u00EA\\u00EB\\u00EF\\u00F1\\u00F2\";\n        buffer = new StringBuilder(source);\n        replaced = MobileTextUtil.replaceAccentedChars(buffer);\n        Assert.assertEquals(7, replaced);\n        Assert.assertEquals(\"eeeeino\", buffer.toString());\n\n        source = \"\\u20AC\";\n        buffer = new StringBuilder(source);\n        replaced = MobileTextUtil.replaceAccentedChars(buffer);\n        Assert.assertEquals(0, replaced);\n        Assert.assertEquals(\"\\u20AC\", buffer.toString());\n    }", "signature": "void replaceAccentedChars()", "full_signature": "@Test public void replaceAccentedChars()", "class_method_signature": "MobileTextUtilTest.replaceAccentedChars()", "testcase": true, "constructor": false, "invocations": ["replaceAccentedChars", "assertEquals", "assertEquals", "toString", "replaceAccentedChars", "assertEquals", "assertEquals", "toString", "replaceAccentedChars", "assertEquals", "assertEquals", "toString", "replaceAccentedChars", "assertEquals", "assertEquals", "toString"]}, "focal_class": {"identifier": "MobileTextUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "static public final char[][] CHAR_TABLE = {\n        { '\\u2013', '-' },\n        { '\\u2014', '-' },\n        { '\\u2018', '\\'' },\n        { '\\u2019', '\\'' },\n        { '\\u201A', '\\'' },\n        { '\\u201B', '\\'' }, // U+201B \u201b\u200b single high-reversed-9 quotation mark (HTML: &#8219; ), also called single reversed comma, quotation mark \n        { '\\u201C', '\"' },\n        { '\\u201D', '\"' },\n        { '\\u201E', '\"' },\n        { '\\u201F', '\"' }, // U+201F \u201f\u200b double high-reversed-9 quotation mark (HTML: &#8223; ), also called double reversed comma, quotation mark\n        { '\\u2020', '+' },\n        { '\\u2022', '.' },\n        { '\\u2026', '.' }, // actually \"...\", but just replacing with \".\"\n        { '\\u2039', '<' },\n        { '\\u203A', '>' },\n        /** deprecated at recommendation by Turkcell - these replacements changed meaning too much */\n        //{ '\\u0131', '1' }, // U+0131 is a lower case letter dotless i (\u0131)\n        //{ '\\u0130', 'i' }, // U+0130 (\u0130) is capital i with dot\n    };", "modifier": "static public final", "type": "char[][]", "declarator": "CHAR_TABLE = {\n        { '\\u2013', '-' },\n        { '\\u2014', '-' },\n        { '\\u2018', '\\'' },\n        { '\\u2019', '\\'' },\n        { '\\u201A', '\\'' },\n        { '\\u201B', '\\'' }, // U+201B \u201b\u200b single high-reversed-9 quotation mark (HTML: &#8219; ), also called single reversed comma, quotation mark \n        { '\\u201C', '\"' },\n        { '\\u201D', '\"' },\n        { '\\u201E', '\"' },\n        { '\\u201F', '\"' }, // U+201F \u201f\u200b double high-reversed-9 quotation mark (HTML: &#8223; ), also called double reversed comma, quotation mark\n        { '\\u2020', '+' },\n        { '\\u2022', '.' },\n        { '\\u2026', '.' }, // actually \"...\", but just replacing with \".\"\n        { '\\u2039', '<' },\n        { '\\u203A', '>' },\n        /** deprecated at recommendation by Turkcell - these replacements changed meaning too much */\n        //{ '\\u0131', '1' }, // U+0131 is a lower case letter dotless i (\u0131)\n        //{ '\\u0130', 'i' }, // U+0130 (\u0130) is capital i with dot\n    }", "var_name": "CHAR_TABLE"}], "methods": [{"identifier": "replaceSafeUnicodeChars", "parameters": "(StringBuilder buffer)", "modifiers": "static public", "return": "int", "signature": "int replaceSafeUnicodeChars(StringBuilder buffer)", "full_signature": "static public int replaceSafeUnicodeChars(StringBuilder buffer)", "class_method_signature": "MobileTextUtil.replaceSafeUnicodeChars(StringBuilder buffer)", "testcase": false, "constructor": false}, {"identifier": "replaceAccentedChars", "parameters": "(StringBuilder buffer)", "modifiers": "public static", "return": "int", "signature": "int replaceAccentedChars(StringBuilder buffer)", "full_signature": "public static int replaceAccentedChars(StringBuilder buffer)", "class_method_signature": "MobileTextUtil.replaceAccentedChars(StringBuilder buffer)", "testcase": false, "constructor": false}], "file": "ch-commons-charset/src/main/java/com/cloudhopper/commons/charset/MobileTextUtil.java"}, "focal_method": {"identifier": "replaceAccentedChars", "parameters": "(StringBuilder buffer)", "modifiers": "public static", "return": "int", "body": "public static int replaceAccentedChars(StringBuilder buffer) {\n        // save the size before we strip out the accents\n        int sizeBefore = buffer.length();\n        // each accented char will be converted into 2 chars -- the ascii version\n        // followed by the accent character\n        String s = Normalizer.normalize(buffer, Normalizer.Form.NFD);\n        // new size will include accented chars\n        int sizeAfter = s.length();\n        // efficiency check #1 - if the length hasn't changed, do nothing\n        int replaced = sizeAfter - sizeBefore;\n        if (replaced <= 0) {\n            return 0;\n        }\n\n        // replace the accents with nothing\n        s = s.replaceAll(\"\\\\p{InCombiningDiacriticalMarks}+\", \"\");\n        buffer.setLength(0);\n        buffer.append(s);\n        \n        return replaced;\n    }", "signature": "int replaceAccentedChars(StringBuilder buffer)", "full_signature": "public static int replaceAccentedChars(StringBuilder buffer)", "class_method_signature": "MobileTextUtil.replaceAccentedChars(StringBuilder buffer)", "testcase": false, "constructor": false, "invocations": ["length", "normalize", "length", "replaceAll", "setLength", "append"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}