{"test_class": {"identifier": "GauloisPipeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static HashMap<QName,ParameterValue> emptyInputParams;", "modifier": "private static", "type": "HashMap<QName,ParameterValue>", "declarator": "emptyInputParams", "var_name": "emptyInputParams"}, {"original_string": "private static SaxonConfigurationFactory configFactory;", "modifier": "private static", "type": "SaxonConfigurationFactory", "declarator": "configFactory", "var_name": "configFactory"}, {"original_string": "private static DatatypeFactory factory;", "modifier": "private static", "type": "DatatypeFactory", "declarator": "factory", "var_name": "factory"}], "file": "gaulois-pipe/src/test/java/fr/efl/chaine/xslt/GauloisPipeTest.java"}, "test_case": {"identifier": "testChooseAtRoot", "parameters": "()", "modifiers": "@Test(expected = InvalidSyntaxException.class) public", "return": "void", "body": "@Test(expected = InvalidSyntaxException.class)\n    public void testChooseAtRoot() throws Exception {\n    \tString sample = \"./src/test/resources/choose-at-root.xml\";\n        GauloisPipe piper = new GauloisPipe(configFactory);\n        ConfigUtil cu = new ConfigUtil(configFactory.getConfiguration(), piper.getUriResolver(), sample);\n\n        Config config = cu.buildConfig(emptyInputParams);\n        config.verify();\n    }", "signature": "void testChooseAtRoot()", "full_signature": "@Test(expected = InvalidSyntaxException.class) public void testChooseAtRoot()", "class_method_signature": "GauloisPipeTest.testChooseAtRoot()", "testcase": true, "constructor": false, "invocations": ["getConfiguration", "getUriResolver", "buildConfig", "verify"]}, "focal_class": {"identifier": "GauloisPipe", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(GauloisPipe.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(GauloisPipe.class)", "var_name": "LOGGER"}, {"original_string": "public static final String INSTANCE_DEFAULT_NAME = \"instance1\";", "modifier": "public static final", "type": "String", "declarator": "INSTANCE_DEFAULT_NAME = \"instance1\"", "var_name": "INSTANCE_DEFAULT_NAME"}, {"original_string": "private String instanceName;", "modifier": "private", "type": "String", "declarator": "instanceName", "var_name": "instanceName"}, {"original_string": "private Config config;", "modifier": "private", "type": "Config", "declarator": "config", "var_name": "config"}, {"original_string": "private final Map<String,XsltExecutable> xslCache;", "modifier": "private final", "type": "Map<String,XsltExecutable>", "declarator": "xslCache", "var_name": "xslCache"}, {"original_string": "private Processor processor;", "modifier": "private", "type": "Processor", "declarator": "processor", "var_name": "processor"}, {"original_string": "private final SaxonConfigurationFactory configurationFactory;", "modifier": "private final", "type": "SaxonConfigurationFactory", "declarator": "configurationFactory", "var_name": "configurationFactory"}, {"original_string": "private Class<MessageListener> messageListenerclass;", "modifier": "private", "type": "Class<MessageListener>", "declarator": "messageListenerclass", "var_name": "messageListenerclass"}, {"original_string": "private MessageListener messageListener = null;", "modifier": "private", "type": "MessageListener", "declarator": "messageListener = null", "var_name": "messageListener"}, {"original_string": "private XSLTTraceListener traceListener = null;", "modifier": "private", "type": "XSLTTraceListener", "declarator": "traceListener = null", "var_name": "traceListener"}, {"original_string": "private DocumentCache documentCache;", "modifier": "private", "type": "DocumentCache", "declarator": "documentCache", "var_name": "documentCache"}, {"original_string": "private XsltCompiler xsltCompiler;", "modifier": "private", "type": "XsltCompiler", "declarator": "xsltCompiler", "var_name": "xsltCompiler"}, {"original_string": "private DocumentBuilder builder = null;", "modifier": "private", "type": "DocumentBuilder", "declarator": "builder = null", "var_name": "builder"}, {"original_string": "private URIResolver uriResolver;", "modifier": "private", "type": "URIResolver", "declarator": "uriResolver", "var_name": "uriResolver"}, {"original_string": "private static transient boolean protocolInstalled = false;", "modifier": "private static transient", "type": "boolean", "declarator": "protocolInstalled = false", "var_name": "protocolInstalled"}, {"original_string": "private XPathCompiler xpathCompiler;", "modifier": "private", "type": "XPathCompiler", "declarator": "xpathCompiler", "var_name": "xpathCompiler"}, {"original_string": "private File debugDirectory;", "modifier": "private", "type": "File", "declarator": "debugDirectory", "var_name": "debugDirectory"}, {"original_string": "private String currentDir = System.getProperty(\"user.dir\");", "modifier": "private", "type": "String", "declarator": "currentDir = System.getProperty(\"user.dir\")", "var_name": "currentDir"}, {"original_string": "private String currentDirUri;", "modifier": "private", "type": "String", "declarator": "currentDirUri", "var_name": "currentDirUri"}, {"original_string": "private GPErrorListener errorListener;", "modifier": "private", "type": "GPErrorListener", "declarator": "errorListener", "var_name": "errorListener"}, {"original_string": "private DatatypeFactory datatypeFactory;", "modifier": "private", "type": "DatatypeFactory", "declarator": "datatypeFactory", "var_name": "datatypeFactory"}, {"original_string": "private SAXParserFactory saxParserFactory;", "modifier": "private", "type": "SAXParserFactory", "declarator": "saxParserFactory", "var_name": "saxParserFactory"}, {"original_string": "private BlockingQueue<XMLReader> readers;", "modifier": "private", "type": "BlockingQueue<XMLReader>", "declarator": "readers", "var_name": "readers"}, {"original_string": "public static final transient String GAULOIS_DEBUG_DIR_PROPERTY = \"gaulois.debug.dir\";", "modifier": "public static final transient", "type": "String", "declarator": "GAULOIS_DEBUG_DIR_PROPERTY = \"gaulois.debug.dir\"", "var_name": "GAULOIS_DEBUG_DIR_PROPERTY"}, {"original_string": "private ThreadFactory threadFactory;", "modifier": "private", "type": "ThreadFactory", "declarator": "threadFactory", "var_name": "threadFactory"}, {"original_string": "private List<String> errors;", "modifier": "private", "type": "List<String>", "declarator": "errors", "var_name": "errors"}, {"original_string": "private javax.xml.datatype.DatatypeFactory xmlDatatypeFactory;", "modifier": "private", "type": "javax.xml.datatype.DatatypeFactory", "declarator": "xmlDatatypeFactory", "var_name": "xmlDatatypeFactory"}, {"original_string": "private static final transient String USAGE_PROMPT = \"\\nUSAGE:\\njava \" + GauloisPipe.class.getName() + \"\\n\"\n            + \"\\t--config config.xml\\tthe config file to use\\n\"\n            + \"\\t--msg-listener package.of.MessageListener The class to use as MessageListener\\n\"\n            + \"\\t{--instance-name | -iName} <name>\\t\\tthe instance name to use in logs\\n\"\n            + \"\\t{--working-dir | -wd} <cwd>\\t\\t\\tThe director to use as current directory ; ${user.dir} if missing\\n\"\n            + \"\\t{--output | -o} <outputfile>\\t\\t\\toutput directory\\n\"\n            + \"\\t{--nbthreads | -n} <n>\\t\\t\\tnumber of threads to use\\n\"\n            + \"\\t{--logFileSize}\\t\\t\\tdisplays intput and output files size in logs as INFO\\n\"\n            + \"\\txsl_file[ xsl_file]*\\t\\tthe XSLs to pipe\\n\"\n            + \"\\t[PARAMS p1=xxx[ p2=yyy]*]\\tthe params to give to XSLs\\n\"\n            + \"\\tFILES file1[ filen]*\\t\\tthe files to apply pipe on\\n.\\n\"\n            + \"\\tAn XSL may be specified as this, if it needs specials parameters :\\n\"\n            + \"\\t\\txsl_file(param1=value1,param2=value2,...)\\n\"\n            + \"\\tA source file may be specified as this, if it needs special parameters :\\n\"\n            + \"\\t\\tfile(param1=value1,param2=value2,...)\\n\\n\"\n//            + \"\\tIt is impossible to override via command-line option something defined in config file, but it is possible to add inputs or templates.\\n\"\n            + \"\\tIf a MessageListener is specified, the denoted class must implement net.sf.saxon.s9api.MessageListener\";", "modifier": "private static final transient", "type": "String", "declarator": "USAGE_PROMPT = \"\\nUSAGE:\\njava \" + GauloisPipe.class.getName() + \"\\n\"\n            + \"\\t--config config.xml\\tthe config file to use\\n\"\n            + \"\\t--msg-listener package.of.MessageListener The class to use as MessageListener\\n\"\n            + \"\\t{--instance-name | -iName} <name>\\t\\tthe instance name to use in logs\\n\"\n            + \"\\t{--working-dir | -wd} <cwd>\\t\\t\\tThe director to use as current directory ; ${user.dir} if missing\\n\"\n            + \"\\t{--output | -o} <outputfile>\\t\\t\\toutput directory\\n\"\n            + \"\\t{--nbthreads | -n} <n>\\t\\t\\tnumber of threads to use\\n\"\n            + \"\\t{--logFileSize}\\t\\t\\tdisplays intput and output files size in logs as INFO\\n\"\n            + \"\\txsl_file[ xsl_file]*\\t\\tthe XSLs to pipe\\n\"\n            + \"\\t[PARAMS p1=xxx[ p2=yyy]*]\\tthe params to give to XSLs\\n\"\n            + \"\\tFILES file1[ filen]*\\t\\tthe files to apply pipe on\\n.\\n\"\n            + \"\\tAn XSL may be specified as this, if it needs specials parameters :\\n\"\n            + \"\\t\\txsl_file(param1=value1,param2=value2,...)\\n\"\n            + \"\\tA source file may be specified as this, if it needs special parameters :\\n\"\n            + \"\\t\\tfile(param1=value1,param2=value2,...)\\n\\n\"\n//            + \"\\tIt is impossible to override via command-line option something defined in config file, but it is possible to add inputs or templates.\\n\"\n            + \"\\tIf a MessageListener is specified, the denoted class must implement net.sf.saxon.s9api.MessageListener\"", "var_name": "USAGE_PROMPT"}, {"original_string": "private static final int INPUT_XSL = 0x00;", "modifier": "private static final", "type": "int", "declarator": "INPUT_XSL = 0x00", "var_name": "INPUT_XSL"}, {"original_string": "private static final int INPUT_PARAMS = 0x01;", "modifier": "private static final", "type": "int", "declarator": "INPUT_PARAMS = 0x01", "var_name": "INPUT_PARAMS"}, {"original_string": "private static final int INPUT_FILES = 0x02;", "modifier": "private static final", "type": "int", "declarator": "INPUT_FILES = 0x02", "var_name": "INPUT_FILES"}, {"original_string": "private static final int INPUT_OUTPUT = 0x04;", "modifier": "private static final", "type": "int", "declarator": "INPUT_OUTPUT = 0x04", "var_name": "INPUT_OUTPUT"}, {"original_string": "private static final int INPUT_THREADS = 0x08;", "modifier": "private static final", "type": "int", "declarator": "INPUT_THREADS = 0x08", "var_name": "INPUT_THREADS"}, {"original_string": "private static final int MESSAGE_LISTENER = 0x0F;", "modifier": "private static final", "type": "int", "declarator": "MESSAGE_LISTENER = 0x0F", "var_name": "MESSAGE_LISTENER"}, {"original_string": "private static final int INSTANCE_NAME = 0x10;", "modifier": "private static final", "type": "int", "declarator": "INSTANCE_NAME = 0x10", "var_name": "INSTANCE_NAME"}, {"original_string": "private static final int CONFIG = 0x20;", "modifier": "private static final", "type": "int", "declarator": "CONFIG = 0x20", "var_name": "CONFIG"}, {"original_string": "private static final int CURRENT_DIR = 0x40;", "modifier": "private static final", "type": "int", "declarator": "CURRENT_DIR = 0x40", "var_name": "CURRENT_DIR"}], "methods": [{"identifier": "GauloisPipe", "parameters": "(final SaxonConfigurationFactory configurationFactory)", "modifiers": "@SuppressWarnings(\"OverridableMethodCallInConstructor\") public", "return": "", "signature": " GauloisPipe(final SaxonConfigurationFactory configurationFactory)", "full_signature": "@SuppressWarnings(\"OverridableMethodCallInConstructor\") public  GauloisPipe(final SaxonConfigurationFactory configurationFactory)", "class_method_signature": "GauloisPipe.GauloisPipe(final SaxonConfigurationFactory configurationFactory)", "testcase": false, "constructor": true}, {"identifier": "GauloisPipe", "parameters": "(final SaxonConfigurationFactory configurationFactory, List<String> inputs, String outputDirectory,List<String> templatePaths, int nbThreads, String instanceName)", "modifiers": "public", "return": "", "signature": " GauloisPipe(final SaxonConfigurationFactory configurationFactory, List<String> inputs, String outputDirectory,List<String> templatePaths, int nbThreads, String instanceName)", "full_signature": "public  GauloisPipe(final SaxonConfigurationFactory configurationFactory, List<String> inputs, String outputDirectory,List<String> templatePaths, int nbThreads, String instanceName)", "class_method_signature": "GauloisPipe.GauloisPipe(final SaxonConfigurationFactory configurationFactory, List<String> inputs, String outputDirectory,List<String> templatePaths, int nbThreads, String instanceName)", "testcase": false, "constructor": true}, {"identifier": "launch", "parameters": "()", "modifiers": "@SuppressWarnings(\"ThrowFromFinallyBlock\") public", "return": "void", "signature": "void launch()", "full_signature": "@SuppressWarnings(\"ThrowFromFinallyBlock\") public void launch()", "class_method_signature": "GauloisPipe.launch()", "testcase": false, "constructor": false}, {"identifier": "getDocumentCacheSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDocumentCacheSize()", "full_signature": "public int getDocumentCacheSize()", "class_method_signature": "GauloisPipe.getDocumentCacheSize()", "testcase": false, "constructor": false}, {"identifier": "getXsltCacheSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getXsltCacheSize()", "full_signature": "public int getXsltCacheSize()", "class_method_signature": "GauloisPipe.getXsltCacheSize()", "testcase": false, "constructor": false}, {"identifier": "resolveInputFile", "parameters": "(CfgFile file)", "modifiers": "private", "return": "ParametrableFile", "signature": "ParametrableFile resolveInputFile(CfgFile file)", "full_signature": "private ParametrableFile resolveInputFile(CfgFile file)", "class_method_signature": "GauloisPipe.resolveInputFile(CfgFile file)", "testcase": false, "constructor": false}, {"identifier": "executesPipeOnMultiThread", "parameters": "(\n            final Pipe pipe,\n            List<ParametrableFile> inputs,\n            int nbThreads,\n            Listener listener)", "modifiers": "private", "return": "boolean", "signature": "boolean executesPipeOnMultiThread(\n            final Pipe pipe,\n            List<ParametrableFile> inputs,\n            int nbThreads,\n            Listener listener)", "full_signature": "private boolean executesPipeOnMultiThread(\n            final Pipe pipe,\n            List<ParametrableFile> inputs,\n            int nbThreads,\n            Listener listener)", "class_method_signature": "GauloisPipe.executesPipeOnMultiThread(\n            final Pipe pipe,\n            List<ParametrableFile> inputs,\n            int nbThreads,\n            Listener listener)", "testcase": false, "constructor": false}, {"identifier": "executesPipeOnMonoThread", "parameters": "(Pipe pipe, List<ParametrableFile> inputs)", "modifiers": "@Deprecated private", "return": "boolean", "signature": "boolean executesPipeOnMonoThread(Pipe pipe, List<ParametrableFile> inputs)", "full_signature": "@Deprecated private boolean executesPipeOnMonoThread(Pipe pipe, List<ParametrableFile> inputs)", "class_method_signature": "GauloisPipe.executesPipeOnMonoThread(Pipe pipe, List<ParametrableFile> inputs)", "testcase": false, "constructor": false}, {"identifier": "getErrors", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getErrors()", "full_signature": "public List<String> getErrors()", "class_method_signature": "GauloisPipe.getErrors()", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "()", "modifiers": "public", "return": "Config", "signature": "Config getConfig()", "full_signature": "public Config getConfig()", "class_method_signature": "GauloisPipe.getConfig()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Pipe pipe, ParametrableFile input, MessageListener listener, Map<String,OutputStream> ... outputs)", "modifiers": "public", "return": "void", "signature": "void execute(Pipe pipe, ParametrableFile input, MessageListener listener, Map<String,OutputStream> ... outputs)", "full_signature": "public void execute(Pipe pipe, ParametrableFile input, MessageListener listener, Map<String,OutputStream> ... outputs)", "class_method_signature": "GauloisPipe.execute(Pipe pipe, ParametrableFile input, MessageListener listener, Map<String,OutputStream> ... outputs)", "testcase": false, "constructor": false}, {"identifier": "buildTransformer", "parameters": "(Pipe pipe, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, boolean... isFake)", "modifiers": "private", "return": "DoubleDestination", "signature": "DoubleDestination buildTransformer(Pipe pipe, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, boolean... isFake)", "full_signature": "private DoubleDestination buildTransformer(Pipe pipe, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, boolean... isFake)", "class_method_signature": "GauloisPipe.buildTransformer(Pipe pipe, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, boolean... isFake)", "testcase": false, "constructor": false}, {"identifier": "buildTransformer", "parameters": "(Pipe pipe, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, boolean isFake, Map<String, OutputStream> ... outputs)", "modifiers": "private", "return": "DoubleDestination", "signature": "DoubleDestination buildTransformer(Pipe pipe, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, boolean isFake, Map<String, OutputStream> ... outputs)", "full_signature": "private DoubleDestination buildTransformer(Pipe pipe, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, boolean isFake, Map<String, OutputStream> ... outputs)", "class_method_signature": "GauloisPipe.buildTransformer(Pipe pipe, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, boolean isFake, Map<String, OutputStream> ... outputs)", "testcase": false, "constructor": false}, {"identifier": "assignStepToDestination", "parameters": "(Object assignee, Destination assigned)", "modifiers": "private", "return": "void", "signature": "void assignStepToDestination(Object assignee, Destination assigned)", "full_signature": "private void assignStepToDestination(Object assignee, Destination assigned)", "class_method_signature": "GauloisPipe.assignStepToDestination(Object assignee, Destination assigned)", "testcase": false, "constructor": false}, {"identifier": "getXsltTransformer", "parameters": "(String href, HashMap<QName,ParameterValue> parameters)", "modifiers": "private", "return": "XsltTransformer", "signature": "XsltTransformer getXsltTransformer(String href, HashMap<QName,ParameterValue> parameters)", "full_signature": "private XsltTransformer getXsltTransformer(String href, HashMap<QName,ParameterValue> parameters)", "class_method_signature": "GauloisPipe.getXsltTransformer(String href, HashMap<QName,ParameterValue> parameters)", "testcase": false, "constructor": false}, {"identifier": "buildTransformer", "parameters": "(Tee tee, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, Map<String, OutputStream> outputs)", "modifiers": "private", "return": "DoubleDestination", "signature": "DoubleDestination buildTransformer(Tee tee, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, Map<String, OutputStream> outputs)", "full_signature": "private DoubleDestination buildTransformer(Tee tee, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, Map<String, OutputStream> outputs)", "class_method_signature": "GauloisPipe.buildTransformer(Tee tee, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, Map<String, OutputStream> outputs)", "testcase": false, "constructor": false}, {"identifier": "buildShortPipeTransformer", "parameters": "(Pipe pipe, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, Map<String, OutputStream> outputs)", "modifiers": "private", "return": "DoubleDestination", "signature": "DoubleDestination buildShortPipeTransformer(Pipe pipe, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, Map<String, OutputStream> outputs)", "full_signature": "private DoubleDestination buildShortPipeTransformer(Pipe pipe, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, Map<String, OutputStream> outputs)", "class_method_signature": "GauloisPipe.buildShortPipeTransformer(Pipe pipe, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, Map<String, OutputStream> outputs)", "testcase": false, "constructor": false}, {"identifier": "buildSerializer", "parameters": "(Output output, File inputFile, HashMap<QName,ParameterValue> parameters, Map<String,OutputStream> outputs)", "modifiers": "private", "return": "DoubleDestination", "signature": "DoubleDestination buildSerializer(Output output, File inputFile, HashMap<QName,ParameterValue> parameters, Map<String,OutputStream> outputs)", "full_signature": "private DoubleDestination buildSerializer(Output output, File inputFile, HashMap<QName,ParameterValue> parameters, Map<String,OutputStream> outputs)", "class_method_signature": "GauloisPipe.buildSerializer(Output output, File inputFile, HashMap<QName,ParameterValue> parameters, Map<String,OutputStream> outputs)", "testcase": false, "constructor": false}, {"identifier": "buildUriResolver", "parameters": "(URIResolver defaultUriResolver)", "modifiers": "protected", "return": "URIResolver", "signature": "URIResolver buildUriResolver(URIResolver defaultUriResolver)", "full_signature": "protected URIResolver buildUriResolver(URIResolver defaultUriResolver)", "class_method_signature": "GauloisPipe.buildUriResolver(URIResolver defaultUriResolver)", "testcase": false, "constructor": false}, {"identifier": "doPostCloseService", "parameters": "(ExecutionContext context)", "modifiers": "public", "return": "void", "signature": "void doPostCloseService(ExecutionContext context)", "full_signature": "public void doPostCloseService(ExecutionContext context)", "class_method_signature": "GauloisPipe.doPostCloseService(ExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "GauloisPipe.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "setMessageListenerclass", "parameters": "(Class messageListenerclass)", "modifiers": "public", "return": "void", "signature": "void setMessageListenerclass(Class messageListenerclass)", "full_signature": "public void setMessageListenerclass(Class messageListenerclass)", "class_method_signature": "GauloisPipe.setMessageListenerclass(Class messageListenerclass)", "testcase": false, "constructor": false}, {"identifier": "parseCommandLine", "parameters": "(String[] args)", "modifiers": "@SuppressWarnings(\"LocalVariableHidesMemberVariable\") public", "return": "Config", "signature": "Config parseCommandLine(String[] args)", "full_signature": "@SuppressWarnings(\"LocalVariableHidesMemberVariable\") public Config parseCommandLine(String[] args)", "class_method_signature": "GauloisPipe.parseCommandLine(String[] args)", "testcase": false, "constructor": false}, {"identifier": "parseConfig", "parameters": "(String fileName, HashMap<QName,ParameterValue> inputParameters, Configuration saxonConfig, final boolean skipSchemaValidation)", "modifiers": "private", "return": "Config", "signature": "Config parseConfig(String fileName, HashMap<QName,ParameterValue> inputParameters, Configuration saxonConfig, final boolean skipSchemaValidation)", "full_signature": "private Config parseConfig(String fileName, HashMap<QName,ParameterValue> inputParameters, Configuration saxonConfig, final boolean skipSchemaValidation)", "class_method_signature": "GauloisPipe.parseConfig(String fileName, HashMap<QName,ParameterValue> inputParameters, Configuration saxonConfig, final boolean skipSchemaValidation)", "testcase": false, "constructor": false}, {"identifier": "getUriResolver", "parameters": "()", "modifiers": "public", "return": "URIResolver", "signature": "URIResolver getUriResolver()", "full_signature": "public URIResolver getUriResolver()", "class_method_signature": "GauloisPipe.getUriResolver()", "testcase": false, "constructor": false}, {"identifier": "getEntityResolver", "parameters": "()", "modifiers": "public", "return": "EntityResolver2", "signature": "EntityResolver2 getEntityResolver()", "full_signature": "public EntityResolver2 getEntityResolver()", "class_method_signature": "GauloisPipe.getEntityResolver()", "testcase": false, "constructor": false}, {"identifier": "setInstanceName", "parameters": "(String instanceName)", "modifiers": "public", "return": "void", "signature": "void setInstanceName(String instanceName)", "full_signature": "public void setInstanceName(String instanceName)", "class_method_signature": "GauloisPipe.setInstanceName(String instanceName)", "testcase": false, "constructor": false}, {"identifier": "setConfig", "parameters": "(Config config)", "modifiers": "public", "return": "void", "signature": "void setConfig(Config config)", "full_signature": "public void setConfig(Config config)", "class_method_signature": "GauloisPipe.setConfig(Config config)", "testcase": false, "constructor": false}, {"identifier": "getInstanceName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInstanceName()", "full_signature": "public String getInstanceName()", "class_method_signature": "GauloisPipe.getInstanceName()", "testcase": false, "constructor": false}, {"identifier": "setThreadFactory", "parameters": "(ThreadFactory threadFactory)", "modifiers": "public", "return": "void", "signature": "void setThreadFactory(ThreadFactory threadFactory)", "full_signature": "public void setThreadFactory(ThreadFactory threadFactory)", "class_method_signature": "GauloisPipe.setThreadFactory(ThreadFactory threadFactory)", "testcase": false, "constructor": false}, {"identifier": "getThreadFactory", "parameters": "()", "modifiers": "protected", "return": "ThreadFactory", "signature": "ThreadFactory getThreadFactory()", "full_signature": "protected ThreadFactory getThreadFactory()", "class_method_signature": "GauloisPipe.getThreadFactory()", "testcase": false, "constructor": false}, {"identifier": "collectError", "parameters": "(Exception ex, String... message)", "modifiers": "public", "return": "void", "signature": "void collectError(Exception ex, String... message)", "full_signature": "public void collectError(Exception ex, String... message)", "class_method_signature": "GauloisPipe.collectError(Exception ex, String... message)", "testcase": false, "constructor": false}, {"identifier": "collectError", "parameters": "(GauloisRunException ex, String... message)", "modifiers": "public", "return": "void", "signature": "void collectError(GauloisRunException ex, String... message)", "full_signature": "public void collectError(GauloisRunException ex, String... message)", "class_method_signature": "GauloisPipe.collectError(GauloisRunException ex, String... message)", "testcase": false, "constructor": false}, {"identifier": "sendError", "parameters": "(String error)", "modifiers": "protected", "return": "void", "signature": "void sendError(String error)", "full_signature": "protected void sendError(String error)", "class_method_signature": "GauloisPipe.sendError(String error)", "testcase": false, "constructor": false}, {"identifier": "startErrorCollector", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void startErrorCollector()", "full_signature": "protected void startErrorCollector()", "class_method_signature": "GauloisPipe.startErrorCollector()", "testcase": false, "constructor": false}, {"identifier": "terminateErrorCollector", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int terminateErrorCollector()", "full_signature": "protected int terminateErrorCollector()", "class_method_signature": "GauloisPipe.terminateErrorCollector()", "testcase": false, "constructor": false}, {"identifier": "buildTraceListener", "parameters": "(final String outputDest)", "modifiers": "private", "return": "XSLTTraceListener", "signature": "XSLTTraceListener buildTraceListener(final String outputDest)", "full_signature": "private XSLTTraceListener buildTraceListener(final String outputDest)", "class_method_signature": "GauloisPipe.buildTraceListener(final String outputDest)", "testcase": false, "constructor": false}, {"identifier": "getCurrentDirUri", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getCurrentDirUri()", "full_signature": "protected String getCurrentDirUri()", "class_method_signature": "GauloisPipe.getCurrentDirUri()", "testcase": false, "constructor": false}, {"identifier": "getXPathCompiler", "parameters": "()", "modifiers": "private", "return": "XPathCompiler", "signature": "XPathCompiler getXPathCompiler()", "full_signature": "private XPathCompiler getXPathCompiler()", "class_method_signature": "GauloisPipe.getXPathCompiler()", "testcase": false, "constructor": false}, {"identifier": "initDebugDirectory", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initDebugDirectory()", "full_signature": "private void initDebugDirectory()", "class_method_signature": "GauloisPipe.initDebugDirectory()", "testcase": false, "constructor": false}, {"identifier": "getDatatypeFactory", "parameters": "()", "modifiers": "public", "return": "DatatypeFactory", "signature": "DatatypeFactory getDatatypeFactory()", "full_signature": "public DatatypeFactory getDatatypeFactory()", "class_method_signature": "GauloisPipe.getDatatypeFactory()", "testcase": false, "constructor": false}, {"identifier": "setProtocolInstalled", "parameters": "(final boolean installed)", "modifiers": "public static", "return": "void", "signature": "void setProtocolInstalled(final boolean installed)", "full_signature": "public static void setProtocolInstalled(final boolean installed)", "class_method_signature": "GauloisPipe.setProtocolInstalled(final boolean installed)", "testcase": false, "constructor": false}, {"identifier": "isProtocolInstalled", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isProtocolInstalled()", "full_signature": "public static boolean isProtocolInstalled()", "class_method_signature": "GauloisPipe.isProtocolInstalled()", "testcase": false, "constructor": false}], "file": "gaulois-pipe/src/main/java/fr/efl/chaine/xslt/GauloisPipe.java"}, "focal_method": {"identifier": "getUriResolver", "parameters": "()", "modifiers": "public", "return": "URIResolver", "body": "public URIResolver getUriResolver() {\n        if(uriResolver==null) {\n            uriResolver = buildUriResolver(configurationFactory.getConfiguration().getURIResolver());\n        }\n        return uriResolver;\n    }", "signature": "URIResolver getUriResolver()", "full_signature": "public URIResolver getUriResolver()", "class_method_signature": "GauloisPipe.getUriResolver()", "testcase": false, "constructor": false, "invocations": ["buildUriResolver", "getURIResolver", "getConfiguration"]}, "repository": {"repo_id": 56587374, "url": "https://github.com/cmarchand/gaulois-pipe", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 506, "license": "licensed"}}