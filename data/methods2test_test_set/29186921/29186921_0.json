{"test_class": {"identifier": "JavaScripPredicateTest", "superclass": "", "interfaces": "", "fields": [], "file": "onplan-service/src/test/java/com/onplan/adviser/predicate/scripting/JavaScripPredicateTest.java"}, "test_case": {"identifier": "testApplyScriptBadSyntax", "parameters": "()", "modifiers": "@Test(expected = Exception.class) public", "return": "void", "body": "@Test(expected = Exception.class)\n  public void testApplyScriptBadSyntax() throws Exception {\n    String script = \"this syntax is invalid!\";\n    AdviserPredicate adviserPredicate = createAdviserPredicate(script);\n    adviserPredicate.init();\n  }", "signature": "void testApplyScriptBadSyntax()", "full_signature": "@Test(expected = Exception.class) public void testApplyScriptBadSyntax()", "class_method_signature": "JavaScripPredicateTest.testApplyScriptBadSyntax()", "testcase": true, "constructor": false, "invocations": ["createAdviserPredicate", "init"]}, "focal_class": {"identifier": "JavaScripPredicate", "superclass": "extends AbstractAdviserPredicate", "interfaces": "", "fields": [{"original_string": "public static final String PARAMETER_JAVASCRIPT_EXPRESSION = \"javascriptExpression\";", "modifier": "public static final", "type": "String", "declarator": "PARAMETER_JAVASCRIPT_EXPRESSION = \"javascriptExpression\"", "var_name": "PARAMETER_JAVASCRIPT_EXPRESSION"}, {"original_string": "private Invocable scriptEngine;", "modifier": "private", "type": "Invocable", "declarator": "scriptEngine", "var_name": "scriptEngine"}, {"original_string": "private String javaScripExpression;", "modifier": "private", "type": "String", "declarator": "javaScripExpression", "var_name": "javaScripExpression"}], "methods": [{"identifier": "JavaScripPredicate", "parameters": "(PredicateExecutionContext predicateExecutionContext)", "modifiers": "public", "return": "", "signature": " JavaScripPredicate(PredicateExecutionContext predicateExecutionContext)", "full_signature": "public  JavaScripPredicate(PredicateExecutionContext predicateExecutionContext)", "class_method_signature": "JavaScripPredicate.JavaScripPredicate(PredicateExecutionContext predicateExecutionContext)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(final PriceTick priceTick)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean apply(final PriceTick priceTick)", "full_signature": "@Override public boolean apply(final PriceTick priceTick)", "class_method_signature": "JavaScripPredicate.apply(final PriceTick priceTick)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "JavaScripPredicate.init()", "testcase": false, "constructor": false}], "file": "onplan-service/src/main/java/com/onplan/adviser/predicate/scripting/JavaScripPredicate.java"}, "focal_method": {"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void init() throws Exception {\n    javaScripExpression = checkNotNull(getParameterValue(PARAMETER_JAVASCRIPT_EXPRESSION));\n    ScriptEngine engine = createJavaScriptEngine();\n    /*\n     * TODO(robertom): Wrap PredicateExecutionContext in a JavaScriptPredicateExecutionContext and\n     * reintroduce PredicateExecutionContext.newBuilder().\n     */\n    engine.getContext().getBindings(ScriptContext.ENGINE_SCOPE)\n        .put(BINDING_NAME_CONTEXT, predicateExecutionContext);\n    try {\n      engine.eval(javaScripExpression);\n    } catch (Exception e) {\n      throw new Exception(\n          String.format(\"Error [%s] while parsing javascript expression [%s].\",\n              e.getMessage(),\n              javaScripExpression),\n          e);\n    }\n    this.scriptEngine = (Invocable) engine;\n    try {\n      scriptEngine.invokeFunction(FUNCTION_INIT);\n    } catch (NoSuchMethodException e) {\n      // Intentionally empty.\n    } catch (ScriptException e) {\n      throw new Exception(\n          String.format(\"Error [%s] while calling initializing script with init().\",\n              e.getMessage()),\n          e);\n    }\n  }", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "JavaScripPredicate.init()", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "getParameterValue", "createJavaScriptEngine", "put", "getBindings", "getContext", "eval", "format", "getMessage", "invokeFunction", "format", "getMessage"]}, "repository": {"repo_id": 29186921, "url": "https://github.com/melphi/onplan", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 732, "license": "licensed"}}