{"test_class": {"identifier": "TestCommandLineSupport", "superclass": "", "interfaces": "", "fields": [], "file": "com.gzoltar.core/src/test/java/com/gzoltar/core/util/TestCommandLineSupport.java"}, "test_case": {"identifier": "testSplit1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSplit1() {\n    assertEquals(Arrays.asList(), CommandLineSupport.split(null));\n  }", "signature": "void testSplit1()", "full_signature": "@Test public void testSplit1()", "class_method_signature": "TestCommandLineSupport.testSplit1()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "asList", "split"]}, "focal_class": {"identifier": "CommandLineSupport", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char BLANK = ' ';", "modifier": "private static final", "type": "char", "declarator": "BLANK = ' '", "var_name": "BLANK"}, {"original_string": "private static final char QUOTE = '\"';", "modifier": "private static final", "type": "char", "declarator": "QUOTE = '\"'", "var_name": "QUOTE"}, {"original_string": "private static final char SLASH = '\\\\';", "modifier": "private static final", "type": "char", "declarator": "SLASH = '\\\\'", "var_name": "SLASH"}, {"original_string": "private static final int M_STRIPWHITESPACE = 0;", "modifier": "private static final", "type": "int", "declarator": "M_STRIPWHITESPACE = 0", "var_name": "M_STRIPWHITESPACE"}, {"original_string": "private static final int M_PARSEARGUMENT = 1;", "modifier": "private static final", "type": "int", "declarator": "M_PARSEARGUMENT = 1", "var_name": "M_PARSEARGUMENT"}, {"original_string": "private static final int M_ESCAPED = 2;", "modifier": "private static final", "type": "int", "declarator": "M_ESCAPED = 2", "var_name": "M_ESCAPED"}], "methods": [{"identifier": "quote", "parameters": "(final String arg)", "modifiers": "public static", "return": "String", "signature": "String quote(final String arg)", "full_signature": "public static String quote(final String arg)", "class_method_signature": "CommandLineSupport.quote(final String arg)", "testcase": false, "constructor": false}, {"identifier": "quote", "parameters": "(final List<String> args)", "modifiers": "public static", "return": "String", "signature": "String quote(final List<String> args)", "full_signature": "public static String quote(final List<String> args)", "class_method_signature": "CommandLineSupport.quote(final List<String> args)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(final String commandline)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> split(final String commandline)", "full_signature": "public static List<String> split(final String commandline)", "class_method_signature": "CommandLineSupport.split(final String commandline)", "testcase": false, "constructor": false}, {"identifier": "addArgument", "parameters": "(final List<String> args, final StringBuilder current)", "modifiers": "private static", "return": "void", "signature": "void addArgument(final List<String> args, final StringBuilder current)", "full_signature": "private static void addArgument(final List<String> args, final StringBuilder current)", "class_method_signature": "CommandLineSupport.addArgument(final List<String> args, final StringBuilder current)", "testcase": false, "constructor": false}], "file": "com.gzoltar.core/src/main/java/com/gzoltar/core/util/CommandLineSupport.java"}, "focal_method": {"identifier": "split", "parameters": "(final String commandline)", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> split(final String commandline) {\n    if (commandline == null || commandline.length() == 0) {\n      return new ArrayList<String>();\n    }\n    final List<String> args = new ArrayList<String>();\n    final StringBuilder current = new StringBuilder();\n    int mode = M_STRIPWHITESPACE;\n    int endChar = BLANK;\n    for (final char c : commandline.toCharArray()) {\n      switch (mode) {\n        case M_STRIPWHITESPACE:\n          if (!Character.isWhitespace(c)) {\n            if (c == QUOTE) {\n              endChar = QUOTE;\n            } else {\n              current.append(c);\n              endChar = BLANK;\n            }\n            mode = M_PARSEARGUMENT;\n          }\n          break;\n        case M_PARSEARGUMENT:\n          if (c == endChar) {\n            addArgument(args, current);\n            mode = M_STRIPWHITESPACE;\n          } else if (c == SLASH) {\n            current.append(SLASH);\n            mode = M_ESCAPED;\n          } else {\n            current.append(c);\n          }\n          break;\n        case M_ESCAPED:\n          if (c == QUOTE || c == SLASH) {\n            current.setCharAt(current.length() - 1, c);\n          } else if (c == endChar) {\n            addArgument(args, current);\n            mode = M_STRIPWHITESPACE;\n          } else {\n            current.append(c);\n          }\n          mode = M_PARSEARGUMENT;\n          break;\n        default:\n          continue;\n      }\n    }\n    addArgument(args, current);\n    return args;\n  }", "signature": "List<String> split(final String commandline)", "full_signature": "public static List<String> split(final String commandline)", "class_method_signature": "CommandLineSupport.split(final String commandline)", "testcase": false, "constructor": false, "invocations": ["length", "toCharArray", "isWhitespace", "append", "addArgument", "append", "append", "setCharAt", "length", "addArgument", "append", "addArgument"]}, "repository": {"repo_id": 139729058, "url": "https://github.com/GZoltar/gzoltar", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 30, "size": 2454, "license": "licensed"}}