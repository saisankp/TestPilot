{"test_class": {"identifier": "SwarmScannerTest", "superclass": "extends MercatorIntegrationTest", "interfaces": "", "fields": [{"original_string": "ObjectMapper mapper = new ObjectMapper();", "modifier": "", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}], "file": "mercator-docker/src/test/java/org/lendingclub/mercator/docker/SwarmScannerTest.java"}, "test_case": {"identifier": "testLabels", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testLabels() {\n\t\t// we don't want to use LocalDockerDaemonIntegrationTest because it will only work with a local docker daemon\n\t\tProjector p = getProjector();\n\t\tSwarmScanner ss = new SwarmScanner(p.createBuilder(DockerScannerBuilder.class).build());\n\t\t\n\t\tString id = \"junit-\"+System.currentTimeMillis();\n\t\tJsonNode actual = p.getNeoRxClient().execCypher(\"merge (x:DockerService {serviceId:{id}}) set x.label_c='c', x.label_foo='foo', x.junitData=true return x\",\"id\",id).blockingFirst();\n\t\t\n\t\tJsonNode intended = mapper.createObjectNode().put(\"label_a\", \"1\").put(\"label_b\", \"2\").put(\"chinacat\",\"sunflower\");\n\t\t\n\t\tp.getNeoRxClient().execCypher(\"merge (a:DockerService {serviceId:{id}}) set a+={props} return a\",\"id\",id,\"props\",intended);\n\t\n\t\tss.removeDockerLabels(\"DockerService\",\"serviceId\",id,intended, actual);\n\t\t\n\t\tJsonNode result = p.getNeoRxClient().execCypher(\"match (x:DockerService {serviceId:{id}}) return x\",\"id\",id).blockingFirst();\n\t\tAssertions.assertThat(result.path(\"serviceId\").asText()).isEqualTo(id);\n\t\tAssertions.assertThat(result.has(\"label_c\")).isFalse();\n\t\tAssertions.assertThat(result.has(\"label_foo\")).isFalse();\n\t\tAssertions.assertThat(result.get(\"label_a\").asText()).isEqualTo(\"1\");\n\t}", "signature": "void testLabels()", "full_signature": "@Test public void testLabels()", "class_method_signature": "SwarmScannerTest.testLabels()", "testcase": true, "constructor": false, "invocations": ["getProjector", "build", "createBuilder", "currentTimeMillis", "blockingFirst", "execCypher", "getNeoRxClient", "put", "put", "put", "createObjectNode", "execCypher", "getNeoRxClient", "removeDockerLabels", "blockingFirst", "execCypher", "getNeoRxClient", "isEqualTo", "assertThat", "asText", "path", "isFalse", "assertThat", "has", "isFalse", "assertThat", "has", "isEqualTo", "assertThat", "asText", "get"]}, "focal_class": {"identifier": "SwarmScanner", "superclass": "", "interfaces": "", "fields": [{"original_string": "ObjectMapper mapper = new ObjectMapper();", "modifier": "", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "Logger logger = LoggerFactory.getLogger(SwarmScanner.class);", "modifier": "", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SwarmScanner.class)", "var_name": "logger"}, {"original_string": "DockerScanner dockerScanner;", "modifier": "", "type": "DockerScanner", "declarator": "dockerScanner", "var_name": "dockerScanner"}, {"original_string": "String swarmClusterId = null;", "modifier": "", "type": "String", "declarator": "swarmClusterId = null", "var_name": "swarmClusterId"}], "methods": [{"identifier": "SwarmScanner", "parameters": "(DockerScanner ds)", "modifiers": "", "return": "", "signature": " SwarmScanner(DockerScanner ds)", "full_signature": "  SwarmScanner(DockerScanner ds)", "class_method_signature": "SwarmScanner.SwarmScanner(DockerScanner ds)", "testcase": false, "constructor": true}, {"identifier": "getRestClient", "parameters": "()", "modifiers": "public", "return": "DockerRestClient", "signature": "DockerRestClient getRestClient()", "full_signature": "public DockerRestClient getRestClient()", "class_method_signature": "SwarmScanner.getRestClient()", "testcase": false, "constructor": false}, {"identifier": "saveDockerNode", "parameters": "(String swarmClusterId, JsonNode n)", "modifiers": "", "return": "long", "signature": "long saveDockerNode(String swarmClusterId, JsonNode n)", "full_signature": " long saveDockerNode(String swarmClusterId, JsonNode n)", "class_method_signature": "SwarmScanner.saveDockerNode(String swarmClusterId, JsonNode n)", "testcase": false, "constructor": false}, {"identifier": "flattenSwarmNode", "parameters": "(JsonNode n)", "modifiers": "", "return": "JsonNode", "signature": "JsonNode flattenSwarmNode(JsonNode n)", "full_signature": " JsonNode flattenSwarmNode(JsonNode n)", "class_method_signature": "SwarmScanner.flattenSwarmNode(JsonNode n)", "testcase": false, "constructor": false}, {"identifier": "extractWebTarget", "parameters": "(DockerClient c)", "modifiers": "public static", "return": "WebTarget", "signature": "WebTarget extractWebTarget(DockerClient c)", "full_signature": "public static WebTarget extractWebTarget(DockerClient c)", "class_method_signature": "SwarmScanner.extractWebTarget(DockerClient c)", "testcase": false, "constructor": false}, {"identifier": "isUnixDomainScoket", "parameters": "(String jerseyUri)", "modifiers": "protected", "return": "boolean", "signature": "boolean isUnixDomainScoket(String jerseyUri)", "full_signature": "protected boolean isUnixDomainScoket(String jerseyUri)", "class_method_signature": "SwarmScanner.isUnixDomainScoket(String jerseyUri)", "testcase": false, "constructor": false}, {"identifier": "scan", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void scan()", "full_signature": "public void scan()", "class_method_signature": "SwarmScanner.scan()", "testcase": false, "constructor": false}, {"identifier": "formatLabelKey", "parameters": "(String key)", "modifiers": "protected", "return": "String", "signature": "String formatLabelKey(String key)", "full_signature": "protected String formatLabelKey(String key)", "class_method_signature": "SwarmScanner.formatLabelKey(String key)", "testcase": false, "constructor": false}, {"identifier": "flattenService", "parameters": "(JsonNode n)", "modifiers": "", "return": "ObjectNode", "signature": "ObjectNode flattenService(JsonNode n)", "full_signature": " ObjectNode flattenService(JsonNode n)", "class_method_signature": "SwarmScanner.flattenService(JsonNode n)", "testcase": false, "constructor": false}, {"identifier": "flattenTask", "parameters": "(JsonNode n)", "modifiers": "protected", "return": "ObjectNode", "signature": "ObjectNode flattenTask(JsonNode n)", "full_signature": "protected ObjectNode flattenTask(JsonNode n)", "class_method_signature": "SwarmScanner.flattenTask(JsonNode n)", "testcase": false, "constructor": false}, {"identifier": "scanServicesForSwarm", "parameters": "(String swarmClusterId)", "modifiers": "public", "return": "void", "signature": "void scanServicesForSwarm(String swarmClusterId)", "full_signature": "public void scanServicesForSwarm(String swarmClusterId)", "class_method_signature": "SwarmScanner.scanServicesForSwarm(String swarmClusterId)", "testcase": false, "constructor": false}, {"identifier": "scanNode", "parameters": "(String nodeId)", "modifiers": "public", "return": "void", "signature": "void scanNode(String nodeId)", "full_signature": "public void scanNode(String nodeId)", "class_method_signature": "SwarmScanner.scanNode(String nodeId)", "testcase": false, "constructor": false}, {"identifier": "scanTask", "parameters": "(String taskId)", "modifiers": "public", "return": "void", "signature": "void scanTask(String taskId)", "full_signature": "public void scanTask(String taskId)", "class_method_signature": "SwarmScanner.scanTask(String taskId)", "testcase": false, "constructor": false}, {"identifier": "deleteTask", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void deleteTask(String id)", "full_signature": "public void deleteTask(String id)", "class_method_signature": "SwarmScanner.deleteTask(String id)", "testcase": false, "constructor": false}, {"identifier": "deleteNode", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void deleteNode(String id)", "full_signature": "public void deleteNode(String id)", "class_method_signature": "SwarmScanner.deleteNode(String id)", "testcase": false, "constructor": false}, {"identifier": "checkNotEmpty", "parameters": "(String val, String msg)", "modifiers": "private", "return": "void", "signature": "void checkNotEmpty(String val, String msg)", "full_signature": "private void checkNotEmpty(String val, String msg)", "class_method_signature": "SwarmScanner.checkNotEmpty(String val, String msg)", "testcase": false, "constructor": false}, {"identifier": "saveTask", "parameters": "(JsonNode it)", "modifiers": "protected", "return": "long", "signature": "long saveTask(JsonNode it)", "full_signature": "protected long saveTask(JsonNode it)", "class_method_signature": "SwarmScanner.saveTask(JsonNode it)", "testcase": false, "constructor": false}, {"identifier": "scanTasksForSwarm", "parameters": "(String swarmClusterId)", "modifiers": "public", "return": "void", "signature": "void scanTasksForSwarm(String swarmClusterId)", "full_signature": "public void scanTasksForSwarm(String swarmClusterId)", "class_method_signature": "SwarmScanner.scanTasksForSwarm(String swarmClusterId)", "testcase": false, "constructor": false}, {"identifier": "getSwarmClusterId", "parameters": "()", "modifiers": "public", "return": "Optional<String>", "signature": "Optional<String> getSwarmClusterId()", "full_signature": "public Optional<String> getSwarmClusterId()", "class_method_signature": "SwarmScanner.getSwarmClusterId()", "testcase": false, "constructor": false}, {"identifier": "scanService", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void scanService(String id)", "full_signature": "public void scanService(String id)", "class_method_signature": "SwarmScanner.scanService(String id)", "testcase": false, "constructor": false}, {"identifier": "deleteService", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void deleteService(String id)", "full_signature": "public void deleteService(String id)", "class_method_signature": "SwarmScanner.deleteService(String id)", "testcase": false, "constructor": false}, {"identifier": "removeDockerLabels", "parameters": "(String neo4jLabel, String idName, String idVal, JsonNode intended,\n\t\t\tJsonNode actual)", "modifiers": "protected", "return": "void", "signature": "void removeDockerLabels(String neo4jLabel, String idName, String idVal, JsonNode intended,\n\t\t\tJsonNode actual)", "full_signature": "protected void removeDockerLabels(String neo4jLabel, String idName, String idVal, JsonNode intended,\n\t\t\tJsonNode actual)", "class_method_signature": "SwarmScanner.removeDockerLabels(String neo4jLabel, String idName, String idVal, JsonNode intended,\n\t\t\tJsonNode actual)", "testcase": false, "constructor": false}, {"identifier": "isNotFound", "parameters": "(Throwable e)", "modifiers": "protected", "return": "boolean", "signature": "boolean isNotFound(Throwable e)", "full_signature": "protected boolean isNotFound(Throwable e)", "class_method_signature": "SwarmScanner.isNotFound(Throwable e)", "testcase": false, "constructor": false}], "file": "mercator-docker/src/main/java/org/lendingclub/mercator/docker/SwarmScanner.java"}, "focal_method": {"identifier": "removeDockerLabels", "parameters": "(String neo4jLabel, String idName, String idVal, JsonNode intended,\n\t\t\tJsonNode actual)", "modifiers": "protected", "return": "void", "body": "protected void removeDockerLabels(String neo4jLabel, String idName, String idVal, JsonNode intended,\n\t\t\tJsonNode actual) {\n\n\t\tList<String> x = Lists.newArrayList();\n\t\tactual.fieldNames().forEachRemaining(it -> {\n\t\t\tif (it != null && it.startsWith(\"label_\")) {\n\t\t\t\tif (!intended.has(it)) {\n\n\t\t\t\t\tif (!it.contains(\" \")) {\n\t\t\t\t\t\tx.add(\"a.`\" + it + \"`\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tif (!x.isEmpty()) {\n\t\t\tString cypher = \"match (a:\" + neo4jLabel + \" {\" + idName + \":{id}}) remove \" + Joiner.on(\", \").join(x)\n\t\t\t\t\t+ \" return a\";\n\n\t\t\tdockerScanner.getNeoRxClient().execCypher(cypher, \"id\", idVal);\n\t\t}\n\n\t}", "signature": "void removeDockerLabels(String neo4jLabel, String idName, String idVal, JsonNode intended,\n\t\t\tJsonNode actual)", "full_signature": "protected void removeDockerLabels(String neo4jLabel, String idName, String idVal, JsonNode intended,\n\t\t\tJsonNode actual)", "class_method_signature": "SwarmScanner.removeDockerLabels(String neo4jLabel, String idName, String idVal, JsonNode intended,\n\t\t\tJsonNode actual)", "testcase": false, "constructor": false, "invocations": ["newArrayList", "forEachRemaining", "fieldNames", "startsWith", "has", "contains", "add", "isEmpty", "join", "on", "execCypher", "getNeoRxClient"]}, "repository": {"repo_id": 80497637, "url": "https://github.com/LendingClub/mercator", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 64, "size": 646, "license": "licensed"}}