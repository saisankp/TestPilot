{"test_class": {"identifier": "UploadDownloadHelperServiceImplTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    private AwsHelper awsHelper;", "modifier": "@Mock\n    private", "type": "AwsHelper", "declarator": "awsHelper", "var_name": "awsHelper"}, {"original_string": "@Mock\n    private BusinessObjectDataDao businessObjectDataDao;", "modifier": "@Mock\n    private", "type": "BusinessObjectDataDao", "declarator": "businessObjectDataDao", "var_name": "businessObjectDataDao"}, {"original_string": "@Mock\n    private BusinessObjectDataDaoHelper businessObjectDataDaoHelper;", "modifier": "@Mock\n    private", "type": "BusinessObjectDataDaoHelper", "declarator": "businessObjectDataDaoHelper", "var_name": "businessObjectDataDaoHelper"}, {"original_string": "@Mock\n    private BusinessObjectDataHelper businessObjectDataHelper;", "modifier": "@Mock\n    private", "type": "BusinessObjectDataHelper", "declarator": "businessObjectDataHelper", "var_name": "businessObjectDataHelper"}, {"original_string": "@Mock\n    private JsonHelper jsonHelper;", "modifier": "@Mock\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@Mock\n    private NotificationEventService notificationEventService;", "modifier": "@Mock\n    private", "type": "NotificationEventService", "declarator": "notificationEventService", "var_name": "notificationEventService"}, {"original_string": "@Mock\n    private S3Dao s3Dao;", "modifier": "@Mock\n    private", "type": "S3Dao", "declarator": "s3Dao", "var_name": "s3Dao"}, {"original_string": "@Mock\n    private StorageDaoHelper storageDaoHelper;", "modifier": "@Mock\n    private", "type": "StorageDaoHelper", "declarator": "storageDaoHelper", "var_name": "storageDaoHelper"}, {"original_string": "@Mock\n    private StorageFileDaoHelper storageFileDaoHelper;", "modifier": "@Mock\n    private", "type": "StorageFileDaoHelper", "declarator": "storageFileDaoHelper", "var_name": "storageFileDaoHelper"}, {"original_string": "@Mock\n    private StorageHelper storageHelper;", "modifier": "@Mock\n    private", "type": "StorageHelper", "declarator": "storageHelper", "var_name": "storageHelper"}, {"original_string": "@Mock\n    private StorageUnitDaoHelper storageUnitDaoHelper;", "modifier": "@Mock\n    private", "type": "StorageUnitDaoHelper", "declarator": "storageUnitDaoHelper", "var_name": "storageUnitDaoHelper"}, {"original_string": "@InjectMocks\n    private UploadDownloadHelperServiceImpl uploadDownloadHelperService;", "modifier": "@InjectMocks\n    private", "type": "UploadDownloadHelperServiceImpl", "declarator": "uploadDownloadHelperService", "var_name": "uploadDownloadHelperService"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/impl/UploadDownloadHelperServiceImplTest.java"}, "test_case": {"identifier": "testPrepareForFileMove", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPrepareForFileMove()\n    {\n        // Create an object key.\n        String objectKey = UUID_VALUE;\n\n        // Create a complete upload single parameters DTO.\n        CompleteUploadSingleParamsDto completeUploadSingleParamsDto = new CompleteUploadSingleParamsDto();\n\n        // Create a business object data status entity.\n        BusinessObjectDataStatusEntity businessObjectDataStatusEntity = new BusinessObjectDataStatusEntity();\n        businessObjectDataStatusEntity.setCode(BusinessObjectDataStatusEntity.UPLOADING);\n\n        // Create a source storage entity.\n        StorageEntity sourceStorageEntity = new StorageEntity();\n\n        // Create a source business object data key.\n        BusinessObjectDataKey sourceBusinessObjectDataKey = new BusinessObjectDataKey();\n        sourceBusinessObjectDataKey.setBusinessObjectFormatUsage(FORMAT_USAGE_CODE);\n\n        // Create a source business object data entity.\n        BusinessObjectDataEntity sourceBusinessObjectDataEntity = new BusinessObjectDataEntity();\n        sourceBusinessObjectDataEntity.setId(ID);\n        sourceBusinessObjectDataEntity.setPartitionValue(objectKey);\n        sourceBusinessObjectDataEntity.setStatus(businessObjectDataStatusEntity);\n\n        // Create a list of source storage files.\n        List<StorageFileEntity> sourceStorageFileEntities = new ArrayList<>();\n\n        // Create a source storage unit.\n        StorageUnitEntity sourceStorageUnitEntity = new StorageUnitEntity();\n        sourceStorageUnitEntity.setBusinessObjectData(sourceBusinessObjectDataEntity);\n        sourceStorageUnitEntity.setStorage(sourceStorageEntity);\n        sourceStorageUnitEntity.setStorageFiles(sourceStorageFileEntities);\n\n        // Create a source storage file entity.\n        StorageFileEntity sourceStorageFileEntity = new StorageFileEntity();\n        sourceStorageFileEntities.add(sourceStorageFileEntity);\n        sourceStorageFileEntity.setStorageUnit(sourceStorageUnitEntity);\n        sourceStorageFileEntity.setPath(S3_KEY);\n        sourceStorageFileEntity.setFileSizeBytes(FILE_SIZE);\n\n        // Create a target storage entity.\n        StorageEntity targetStorageEntity = new StorageEntity();\n\n        // Create a target business object data key.\n        BusinessObjectDataKey targetBusinessObjectDataKey = new BusinessObjectDataKey();\n        targetBusinessObjectDataKey.setBusinessObjectFormatUsage(FORMAT_USAGE_CODE_2);\n\n        // Create a list of source storage files.\n        List<StorageFileEntity> targetStorageFileEntities = new ArrayList<>();\n\n        // Create a target storage unit.\n        StorageUnitEntity targetStorageUnitEntity = new StorageUnitEntity();\n        targetStorageUnitEntity.setStorage(targetStorageEntity);\n        targetStorageUnitEntity.setStorageFiles(targetStorageFileEntities);\n\n        // Create a source storage file entity.\n        StorageFileEntity targetStorageFileEntity = new StorageFileEntity();\n        targetStorageFileEntities.add(targetStorageFileEntity);\n        targetStorageFileEntity.setPath(S3_KEY_2);\n\n        // Create a target business object data entity.\n        BusinessObjectDataEntity targetBusinessObjectDataEntity = new BusinessObjectDataEntity();\n        targetBusinessObjectDataEntity.setId(ID_2);\n        targetBusinessObjectDataEntity.setStatus(businessObjectDataStatusEntity);\n        targetBusinessObjectDataEntity.setStorageUnits(Collections.singletonList(targetStorageUnitEntity));\n\n        // Create an AWS parameters DTO.\n        AwsParamsDto awsParamsDto =\n            new AwsParamsDto(NO_AWS_ACCESS_KEY, NO_AWS_SECRET_KEY, NO_SESSION_TOKEN, HTTP_PROXY_HOST, HTTP_PROXY_PORT, AWS_REGION_NAME_US_EAST_1);\n\n        // Mock the external calls.\n        when(storageFileDaoHelper.getStorageFileEntity(StorageEntity.MANAGED_LOADING_DOCK_STORAGE, objectKey)).thenReturn(sourceStorageFileEntity);\n        when(businessObjectDataHelper.getBusinessObjectDataKey(sourceBusinessObjectDataEntity)).thenReturn(sourceBusinessObjectDataKey);\n        when(businessObjectDataDao.getBusinessObjectDataEntitiesByPartitionValue(objectKey))\n            .thenReturn(Arrays.asList(sourceBusinessObjectDataEntity, targetBusinessObjectDataEntity));\n        when(businessObjectDataHelper.getBusinessObjectDataKey(targetBusinessObjectDataEntity)).thenReturn(targetBusinessObjectDataKey);\n        when(storageDaoHelper.getStorageEntity(StorageEntity.MANAGED_LOADING_DOCK_STORAGE)).thenReturn(sourceStorageEntity);\n        when(storageHelper.getStorageBucketName(sourceStorageEntity)).thenReturn(S3_BUCKET_NAME);\n        when(storageUnitDaoHelper.getStorageUnitEntity(StorageEntity.MANAGED_LOADING_DOCK_STORAGE, sourceBusinessObjectDataEntity))\n            .thenReturn(sourceStorageUnitEntity);\n        when(awsHelper.getAwsParamsDto()).thenReturn(awsParamsDto);\n        when(storageHelper.getStorageBucketName(targetStorageEntity)).thenReturn(S3_BUCKET_NAME_2);\n        when(storageHelper.getStorageKmsKeyId(targetStorageEntity)).thenReturn(AWS_KMS_KEY_ID);\n\n        // Call the method under test.\n        uploadDownloadHelperService.prepareForFileMoveImpl(objectKey, completeUploadSingleParamsDto);\n\n        // Verify the external calls.\n        verify(storageFileDaoHelper).getStorageFileEntity(StorageEntity.MANAGED_LOADING_DOCK_STORAGE, objectKey);\n        verify(storageFileDaoHelper).getStorageFileEntity(StorageEntity.MANAGED_LOADING_DOCK_STORAGE, objectKey);\n        verify(businessObjectDataHelper).getBusinessObjectDataKey(sourceBusinessObjectDataEntity);\n        verify(businessObjectDataDao).getBusinessObjectDataEntitiesByPartitionValue(objectKey);\n        verify(businessObjectDataHelper).getBusinessObjectDataKey(targetBusinessObjectDataEntity);\n        verify(storageDaoHelper).getStorageEntity(StorageEntity.MANAGED_LOADING_DOCK_STORAGE);\n        verify(storageHelper).getStorageBucketName(sourceStorageEntity);\n        verify(storageUnitDaoHelper).getStorageUnitEntity(StorageEntity.MANAGED_LOADING_DOCK_STORAGE, sourceBusinessObjectDataEntity);\n        verify(awsHelper, times(2)).getAwsParamsDto();\n        verify(s3Dao).validateS3File(any(S3FileTransferRequestParamsDto.class), eq(FILE_SIZE));\n        verify(storageHelper).getStorageBucketName(targetStorageEntity);\n        verify(storageHelper).getStorageKmsKeyId(targetStorageEntity);\n        verify(s3Dao).s3FileExists(any(S3FileTransferRequestParamsDto.class));\n        verify(businessObjectDataDaoHelper).updateBusinessObjectDataStatus(sourceBusinessObjectDataEntity, BusinessObjectDataStatusEntity.RE_ENCRYPTING);\n        verify(businessObjectDataDaoHelper).updateBusinessObjectDataStatus(targetBusinessObjectDataEntity, BusinessObjectDataStatusEntity.RE_ENCRYPTING);\n        verify(notificationEventService)\n            .processBusinessObjectDataNotificationEventAsync(NotificationEventTypeEntity.EventTypesBdata.BUS_OBJCT_DATA_STTS_CHG, sourceBusinessObjectDataKey,\n                BusinessObjectDataStatusEntity.RE_ENCRYPTING, BusinessObjectDataStatusEntity.UPLOADING);\n        verify(notificationEventService)\n            .processBusinessObjectDataNotificationEventAsync(NotificationEventTypeEntity.EventTypesBdata.BUS_OBJCT_DATA_STTS_CHG, targetBusinessObjectDataKey,\n                BusinessObjectDataStatusEntity.RE_ENCRYPTING, BusinessObjectDataStatusEntity.UPLOADING);\n        verifyNoMoreInteractionsHelper();\n\n        // Validate the results.\n        assertEquals(new CompleteUploadSingleParamsDto(sourceBusinessObjectDataKey, S3_BUCKET_NAME, S3_KEY, BusinessObjectDataStatusEntity.UPLOADING,\n            BusinessObjectDataStatusEntity.RE_ENCRYPTING, targetBusinessObjectDataKey, S3_BUCKET_NAME_2, S3_KEY_2, BusinessObjectDataStatusEntity.UPLOADING,\n            BusinessObjectDataStatusEntity.RE_ENCRYPTING, AWS_KMS_KEY_ID, awsParamsDto), completeUploadSingleParamsDto);\n    }", "signature": "void testPrepareForFileMove()", "full_signature": "@Test public void testPrepareForFileMove()", "class_method_signature": "UploadDownloadHelperServiceImplTest.testPrepareForFileMove()", "testcase": true, "constructor": false, "invocations": ["setCode", "setBusinessObjectFormatUsage", "setId", "setPartitionValue", "setStatus", "setBusinessObjectData", "setStorage", "setStorageFiles", "add", "setStorageUnit", "setPath", "setFileSizeBytes", "setBusinessObjectFormatUsage", "setStorage", "setStorageFiles", "add", "setPath", "setId", "setStatus", "setStorageUnits", "singletonList", "thenReturn", "when", "getStorageFileEntity", "thenReturn", "when", "getBusinessObjectDataKey", "thenReturn", "when", "getBusinessObjectDataEntitiesByPartitionValue", "asList", "thenReturn", "when", "getBusinessObjectDataKey", "thenReturn", "when", "getStorageEntity", "thenReturn", "when", "getStorageBucketName", "thenReturn", "when", "getStorageUnitEntity", "thenReturn", "when", "getAwsParamsDto", "thenReturn", "when", "getStorageBucketName", "thenReturn", "when", "getStorageKmsKeyId", "prepareForFileMoveImpl", "getStorageFileEntity", "verify", "getStorageFileEntity", "verify", "getBusinessObjectDataKey", "verify", "getBusinessObjectDataEntitiesByPartitionValue", "verify", "getBusinessObjectDataKey", "verify", "getStorageEntity", "verify", "getStorageBucketName", "verify", "getStorageUnitEntity", "verify", "getAwsParamsDto", "verify", "times", "validateS3File", "verify", "any", "eq", "getStorageBucketName", "verify", "getStorageKmsKeyId", "verify", "s3FileExists", "verify", "any", "updateBusinessObjectDataStatus", "verify", "updateBusinessObjectDataStatus", "verify", "processBusinessObjectDataNotificationEventAsync", "verify", "processBusinessObjectDataNotificationEventAsync", "verify", "verifyNoMoreInteractionsHelper", "assertEquals"]}, "focal_class": {"identifier": "UploadDownloadHelperServiceImpl", "superclass": "", "interfaces": "implements UploadDownloadHelperService", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(UploadDownloadHelperServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(UploadDownloadHelperServiceImpl.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private AwsHelper awsHelper;", "modifier": "@Autowired\n    private", "type": "AwsHelper", "declarator": "awsHelper", "var_name": "awsHelper"}, {"original_string": "@Autowired\n    private BusinessObjectDataDao businessObjectDataDao;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataDao", "declarator": "businessObjectDataDao", "var_name": "businessObjectDataDao"}, {"original_string": "@Autowired\n    private BusinessObjectDataDaoHelper businessObjectDataDaoHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataDaoHelper", "declarator": "businessObjectDataDaoHelper", "var_name": "businessObjectDataDaoHelper"}, {"original_string": "@Autowired\n    private BusinessObjectDataHelper businessObjectDataHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataHelper", "declarator": "businessObjectDataHelper", "var_name": "businessObjectDataHelper"}, {"original_string": "@Autowired\n    private StorageFileDaoHelper storageFileDaoHelper;", "modifier": "@Autowired\n    private", "type": "StorageFileDaoHelper", "declarator": "storageFileDaoHelper", "var_name": "storageFileDaoHelper"}, {"original_string": "@Autowired\n    private StorageHelper storageHelper;", "modifier": "@Autowired\n    private", "type": "StorageHelper", "declarator": "storageHelper", "var_name": "storageHelper"}, {"original_string": "@Autowired\n    private JsonHelper jsonHelper;", "modifier": "@Autowired\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@Autowired\n    @Lazy\n    private NotificationEventService notificationEventService;", "modifier": "@Autowired\n    @Lazy\n    private", "type": "NotificationEventService", "declarator": "notificationEventService", "var_name": "notificationEventService"}, {"original_string": "@Autowired\n    private S3Dao s3Dao;", "modifier": "@Autowired\n    private", "type": "S3Dao", "declarator": "s3Dao", "var_name": "s3Dao"}, {"original_string": "@Autowired\n    private StorageDaoHelper storageDaoHelper;", "modifier": "@Autowired\n    private", "type": "StorageDaoHelper", "declarator": "storageDaoHelper", "var_name": "storageDaoHelper"}, {"original_string": "@Autowired\n    private StorageUnitDaoHelper storageUnitDaoHelper;", "modifier": "@Autowired\n    private", "type": "StorageUnitDaoHelper", "declarator": "storageUnitDaoHelper", "var_name": "storageUnitDaoHelper"}], "methods": [{"identifier": "prepareForFileMove", "parameters": "(String objectKey, CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "modifiers": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "void", "signature": "void prepareForFileMove(String objectKey, CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "full_signature": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public void prepareForFileMove(String objectKey, CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "class_method_signature": "UploadDownloadHelperServiceImpl.prepareForFileMove(String objectKey, CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "testcase": false, "constructor": false}, {"identifier": "prepareForFileMoveImpl", "parameters": "(String objectKey, CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "modifiers": "protected", "return": "void", "signature": "void prepareForFileMoveImpl(String objectKey, CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "full_signature": "protected void prepareForFileMoveImpl(String objectKey, CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "class_method_signature": "UploadDownloadHelperServiceImpl.prepareForFileMoveImpl(String objectKey, CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "testcase": false, "constructor": false}, {"identifier": "performFileMove", "parameters": "(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "modifiers": "@Override @Transactional(propagation = Propagation.NOT_SUPPORTED) public", "return": "void", "signature": "void performFileMove(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "full_signature": "@Override @Transactional(propagation = Propagation.NOT_SUPPORTED) public void performFileMove(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "class_method_signature": "UploadDownloadHelperServiceImpl.performFileMove(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "testcase": false, "constructor": false}, {"identifier": "performFileMoveImpl", "parameters": "(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "modifiers": "protected", "return": "void", "signature": "void performFileMoveImpl(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "full_signature": "protected void performFileMoveImpl(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "class_method_signature": "UploadDownloadHelperServiceImpl.performFileMoveImpl(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "testcase": false, "constructor": false}, {"identifier": "executeFileMoveAfterSteps", "parameters": "(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "modifiers": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "void", "signature": "void executeFileMoveAfterSteps(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "full_signature": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public void executeFileMoveAfterSteps(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "class_method_signature": "UploadDownloadHelperServiceImpl.executeFileMoveAfterSteps(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "testcase": false, "constructor": false}, {"identifier": "executeFileMoveAfterStepsImpl", "parameters": "(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "modifiers": "public", "return": "void", "signature": "void executeFileMoveAfterStepsImpl(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "full_signature": "public void executeFileMoveAfterStepsImpl(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "class_method_signature": "UploadDownloadHelperServiceImpl.executeFileMoveAfterStepsImpl(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "testcase": false, "constructor": false}, {"identifier": "deleteSourceFileFromS3", "parameters": "(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "modifiers": "@Override @Transactional(propagation = Propagation.NOT_SUPPORTED) public", "return": "void", "signature": "void deleteSourceFileFromS3(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "full_signature": "@Override @Transactional(propagation = Propagation.NOT_SUPPORTED) public void deleteSourceFileFromS3(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "class_method_signature": "UploadDownloadHelperServiceImpl.deleteSourceFileFromS3(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "testcase": false, "constructor": false}, {"identifier": "deleteSourceFileFromS3Impl", "parameters": "(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "modifiers": "protected", "return": "void", "signature": "void deleteSourceFileFromS3Impl(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "full_signature": "protected void deleteSourceFileFromS3Impl(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "class_method_signature": "UploadDownloadHelperServiceImpl.deleteSourceFileFromS3Impl(CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "testcase": false, "constructor": false}, {"identifier": "updateBusinessObjectDataStatus", "parameters": "(BusinessObjectDataKey businessObjectDataKey, String businessObjectDataStatus)", "modifiers": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "void", "signature": "void updateBusinessObjectDataStatus(BusinessObjectDataKey businessObjectDataKey, String businessObjectDataStatus)", "full_signature": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public void updateBusinessObjectDataStatus(BusinessObjectDataKey businessObjectDataKey, String businessObjectDataStatus)", "class_method_signature": "UploadDownloadHelperServiceImpl.updateBusinessObjectDataStatus(BusinessObjectDataKey businessObjectDataKey, String businessObjectDataStatus)", "testcase": false, "constructor": false}, {"identifier": "updateBusinessObjectDataStatusImpl", "parameters": "(BusinessObjectDataKey businessObjectDataKey, String businessObjectDataStatus)", "modifiers": "protected", "return": "void", "signature": "void updateBusinessObjectDataStatusImpl(BusinessObjectDataKey businessObjectDataKey, String businessObjectDataStatus)", "full_signature": "protected void updateBusinessObjectDataStatusImpl(BusinessObjectDataKey businessObjectDataKey, String businessObjectDataStatus)", "class_method_signature": "UploadDownloadHelperServiceImpl.updateBusinessObjectDataStatusImpl(BusinessObjectDataKey businessObjectDataKey, String businessObjectDataStatus)", "testcase": false, "constructor": false}, {"identifier": "assertS3ObjectKeyDoesNotExist", "parameters": "(String bucketName, String key)", "modifiers": "@Override public", "return": "void", "signature": "void assertS3ObjectKeyDoesNotExist(String bucketName, String key)", "full_signature": "@Override public void assertS3ObjectKeyDoesNotExist(String bucketName, String key)", "class_method_signature": "UploadDownloadHelperServiceImpl.assertS3ObjectKeyDoesNotExist(String bucketName, String key)", "testcase": false, "constructor": false}, {"identifier": "setAndReturnNewSourceBusinessObjectDataStatusAfterError", "parameters": "(BusinessObjectDataKey sourceBusinessObjectDataKey)", "modifiers": "private", "return": "String", "signature": "String setAndReturnNewSourceBusinessObjectDataStatusAfterError(BusinessObjectDataKey sourceBusinessObjectDataKey)", "full_signature": "private String setAndReturnNewSourceBusinessObjectDataStatusAfterError(BusinessObjectDataKey sourceBusinessObjectDataKey)", "class_method_signature": "UploadDownloadHelperServiceImpl.setAndReturnNewSourceBusinessObjectDataStatusAfterError(BusinessObjectDataKey sourceBusinessObjectDataKey)", "testcase": false, "constructor": false}, {"identifier": "setAndReturnNewTargetBusinessObjectDataStatusAfterError", "parameters": "(BusinessObjectDataKey targetBusinessObjectDataKey)", "modifiers": "private", "return": "String", "signature": "String setAndReturnNewTargetBusinessObjectDataStatusAfterError(BusinessObjectDataKey targetBusinessObjectDataKey)", "full_signature": "private String setAndReturnNewTargetBusinessObjectDataStatusAfterError(BusinessObjectDataKey targetBusinessObjectDataKey)", "class_method_signature": "UploadDownloadHelperServiceImpl.setAndReturnNewTargetBusinessObjectDataStatusAfterError(BusinessObjectDataKey targetBusinessObjectDataKey)", "testcase": false, "constructor": false}, {"identifier": "deleteSourceS3ObjectAfterError", "parameters": "(String s3BucketName, String storageFilePath, BusinessObjectDataKey businessObjectDataKey)", "modifiers": "private", "return": "void", "signature": "void deleteSourceS3ObjectAfterError(String s3BucketName, String storageFilePath, BusinessObjectDataKey businessObjectDataKey)", "full_signature": "private void deleteSourceS3ObjectAfterError(String s3BucketName, String storageFilePath, BusinessObjectDataKey businessObjectDataKey)", "class_method_signature": "UploadDownloadHelperServiceImpl.deleteSourceS3ObjectAfterError(String s3BucketName, String storageFilePath, BusinessObjectDataKey businessObjectDataKey)", "testcase": false, "constructor": false}, {"identifier": "getUniqueStorage", "parameters": "(BusinessObjectDataEntity businessObjectDataEntity)", "modifiers": "private", "return": "StorageEntity", "signature": "StorageEntity getUniqueStorage(BusinessObjectDataEntity businessObjectDataEntity)", "full_signature": "private StorageEntity getUniqueStorage(BusinessObjectDataEntity businessObjectDataEntity)", "class_method_signature": "UploadDownloadHelperServiceImpl.getUniqueStorage(BusinessObjectDataEntity businessObjectDataEntity)", "testcase": false, "constructor": false}, {"identifier": "getTargetBusinessObjectDataEntity", "parameters": "(BusinessObjectDataEntity sourceBusinessObjectDataEntity)", "modifiers": "private", "return": "BusinessObjectDataEntity", "signature": "BusinessObjectDataEntity getTargetBusinessObjectDataEntity(BusinessObjectDataEntity sourceBusinessObjectDataEntity)", "full_signature": "private BusinessObjectDataEntity getTargetBusinessObjectDataEntity(BusinessObjectDataEntity sourceBusinessObjectDataEntity)", "class_method_signature": "UploadDownloadHelperServiceImpl.getTargetBusinessObjectDataEntity(BusinessObjectDataEntity sourceBusinessObjectDataEntity)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/impl/UploadDownloadHelperServiceImpl.java"}, "focal_method": {"identifier": "prepareForFileMove", "parameters": "(String objectKey, CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "modifiers": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "void", "body": "@PublishNotificationMessages\n    @Override\n    @Transactional(propagation = Propagation.REQUIRES_NEW)\n    public void prepareForFileMove(String objectKey, CompleteUploadSingleParamsDto completeUploadSingleParamsDto)\n    {\n        prepareForFileMoveImpl(objectKey, completeUploadSingleParamsDto);\n    }", "signature": "void prepareForFileMove(String objectKey, CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "full_signature": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public void prepareForFileMove(String objectKey, CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "class_method_signature": "UploadDownloadHelperServiceImpl.prepareForFileMove(String objectKey, CompleteUploadSingleParamsDto completeUploadSingleParamsDto)", "testcase": false, "constructor": false, "invocations": ["prepareForFileMoveImpl"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}