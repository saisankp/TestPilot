{"test_class": {"identifier": "SecretDAOTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject private DSLContext jooqContext;", "modifier": "@Inject private", "type": "DSLContext", "declarator": "jooqContext", "var_name": "jooqContext"}, {"original_string": "@Inject private ObjectMapper objectMapper;", "modifier": "@Inject private", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "@Inject private SecretDAOFactory secretDAOFactory;", "modifier": "@Inject private", "type": "SecretDAOFactory", "declarator": "secretDAOFactory", "var_name": "secretDAOFactory"}, {"original_string": "@Inject private RowHmacGenerator rowHmacGenerator;", "modifier": "@Inject private", "type": "RowHmacGenerator", "declarator": "rowHmacGenerator", "var_name": "rowHmacGenerator"}, {"original_string": "private final static ContentCryptographer cryptographer = CryptoFixtures.contentCryptographer();", "modifier": "private final static", "type": "ContentCryptographer", "declarator": "cryptographer = CryptoFixtures.contentCryptographer()", "var_name": "cryptographer"}, {"original_string": "private final static ApiDate date = ApiDate.now();", "modifier": "private final static", "type": "ApiDate", "declarator": "date = ApiDate.now()", "var_name": "date"}, {"original_string": "private ImmutableMap<String, String> emptyMetadata = ImmutableMap.of();", "modifier": "private", "type": "ImmutableMap<String, String>", "declarator": "emptyMetadata = ImmutableMap.of()", "var_name": "emptyMetadata"}, {"original_string": "private SecretSeries series1 =\n      SecretSeries.of(1, \"secret1\", \"desc1\", date, \"creator\", date, \"updater\", null, null, 101L);", "modifier": "private", "type": "SecretSeries", "declarator": "series1 =\n      SecretSeries.of(1, \"secret1\", \"desc1\", date, \"creator\", date, \"updater\", null, null, 101L)", "var_name": "series1"}, {"original_string": "private String content = \"c2VjcmV0MQ==\";", "modifier": "private", "type": "String", "declarator": "content = \"c2VjcmV0MQ==\"", "var_name": "content"}, {"original_string": "private String encryptedContent =\n      cryptographer.encryptionKeyDerivedFrom(series1.name()).encrypt(content);", "modifier": "private", "type": "String", "declarator": "encryptedContent =\n      cryptographer.encryptionKeyDerivedFrom(series1.name()).encrypt(content)", "var_name": "encryptedContent"}, {"original_string": "private SecretContent content1 =\n      SecretContent.of(101, 1, encryptedContent, \"checksum\", date, \"creator\", date, \"updater\",\n          emptyMetadata, 0);", "modifier": "private", "type": "SecretContent", "declarator": "content1 =\n      SecretContent.of(101, 1, encryptedContent, \"checksum\", date, \"creator\", date, \"updater\",\n          emptyMetadata, 0)", "var_name": "content1"}, {"original_string": "private SecretSeriesAndContent secret1 = SecretSeriesAndContent.of(series1, content1);", "modifier": "private", "type": "SecretSeriesAndContent", "declarator": "secret1 = SecretSeriesAndContent.of(series1, content1)", "var_name": "secret1"}, {"original_string": "private SecretSeries series2 =\n      SecretSeries.of(2, \"secret2\", \"desc2\", date, \"creator\", date, \"updater\", null, null, 103L);", "modifier": "private", "type": "SecretSeries", "declarator": "series2 =\n      SecretSeries.of(2, \"secret2\", \"desc2\", date, \"creator\", date, \"updater\", null, null, 103L)", "var_name": "series2"}, {"original_string": "private SecretContent content2a =\n      SecretContent.of(102, 2, encryptedContent, \"checksum\", date, \"creator\", date, \"updater\",\n          emptyMetadata, 0);", "modifier": "private", "type": "SecretContent", "declarator": "content2a =\n      SecretContent.of(102, 2, encryptedContent, \"checksum\", date, \"creator\", date, \"updater\",\n          emptyMetadata, 0)", "var_name": "content2a"}, {"original_string": "private SecretSeriesAndContent secret2a = SecretSeriesAndContent.of(series2, content2a);", "modifier": "private", "type": "SecretSeriesAndContent", "declarator": "secret2a = SecretSeriesAndContent.of(series2, content2a)", "var_name": "secret2a"}, {"original_string": "private SecretContent content2b =\n      SecretContent.of(103, 2, \"some other content\", \"checksum\", date, \"creator\", date, \"updater\",\n          emptyMetadata, 0);", "modifier": "private", "type": "SecretContent", "declarator": "content2b =\n      SecretContent.of(103, 2, \"some other content\", \"checksum\", date, \"creator\", date, \"updater\",\n          emptyMetadata, 0)", "var_name": "content2b"}, {"original_string": "private SecretSeriesAndContent secret2b = SecretSeriesAndContent.of(series2, content2b);", "modifier": "private", "type": "SecretSeriesAndContent", "declarator": "secret2b = SecretSeriesAndContent.of(series2, content2b)", "var_name": "secret2b"}, {"original_string": "private SecretSeries series3 =\n      SecretSeries.of(3, \"secret3\", \"desc3\", date, \"creator\", date, \"updater\", null, null, null);", "modifier": "private", "type": "SecretSeries", "declarator": "series3 =\n      SecretSeries.of(3, \"secret3\", \"desc3\", date, \"creator\", date, \"updater\", null, null, null)", "var_name": "series3"}, {"original_string": "private SecretContent content3 =\n      SecretContent.of(104, 3, encryptedContent, \"checksum\", date, \"creator\", date, \"updater\",\n          emptyMetadata, 0);", "modifier": "private", "type": "SecretContent", "declarator": "content3 =\n      SecretContent.of(104, 3, encryptedContent, \"checksum\", date, \"creator\", date, \"updater\",\n          emptyMetadata, 0)", "var_name": "content3"}, {"original_string": "private SecretSeriesAndContent secret3 = SecretSeriesAndContent.of(series3, content3);", "modifier": "private", "type": "SecretSeriesAndContent", "declarator": "secret3 = SecretSeriesAndContent.of(series3, content3)", "var_name": "secret3"}, {"original_string": "private SecretDAO secretDAO;", "modifier": "private", "type": "SecretDAO", "declarator": "secretDAO", "var_name": "secretDAO"}], "file": "server/src/test/java/keywhiz/service/daos/SecretDAOTest.java"}, "test_case": {"identifier": "getSecretsByName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void getSecretsByName() {\n    List<String> secrets = List.of(secret1.series().name(), secret2b.series().name());\n    List<SecretSeriesAndContent> response = secretDAO.getSecretsByName(secrets);\n\n    assertThat(response.size()).isEqualTo(2);\n    assertThat(response).contains(secret1);\n    assertThat(response).contains(secret2b);\n  }", "signature": "void getSecretsByName()", "full_signature": "@Test public void getSecretsByName()", "class_method_signature": "SecretDAOTest.getSecretsByName()", "testcase": true, "constructor": false, "invocations": ["of", "name", "series", "name", "series", "getSecretsByName", "isEqualTo", "assertThat", "size", "contains", "assertThat", "contains", "assertThat"]}, "focal_class": {"identifier": "SecretDAO", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DSLContext dslContext;", "modifier": "private final", "type": "DSLContext", "declarator": "dslContext", "var_name": "dslContext"}, {"original_string": "private final SecretContentDAOFactory secretContentDAOFactory;", "modifier": "private final", "type": "SecretContentDAOFactory", "declarator": "secretContentDAOFactory", "var_name": "secretContentDAOFactory"}, {"original_string": "private final SecretSeriesDAOFactory secretSeriesDAOFactory;", "modifier": "private final", "type": "SecretSeriesDAOFactory", "declarator": "secretSeriesDAOFactory", "var_name": "secretSeriesDAOFactory"}, {"original_string": "private final ContentCryptographer cryptographer;", "modifier": "private final", "type": "ContentCryptographer", "declarator": "cryptographer", "var_name": "cryptographer"}, {"original_string": "private static final int SECRET_NAME_MAX_LENGTH = 195;", "modifier": "private static final", "type": "int", "declarator": "SECRET_NAME_MAX_LENGTH = 195", "var_name": "SECRET_NAME_MAX_LENGTH"}, {"original_string": "private static final int MAX_ROWS_REMOVED_PER_TRANSACTION = 1000;", "modifier": "private static final", "type": "int", "declarator": "MAX_ROWS_REMOVED_PER_TRANSACTION = 1000", "var_name": "MAX_ROWS_REMOVED_PER_TRANSACTION"}], "methods": [{"identifier": "SecretDAO", "parameters": "(DSLContext dslContext, SecretContentDAOFactory secretContentDAOFactory,\n      SecretSeriesDAOFactory secretSeriesDAOFactory, ContentCryptographer cryptographer)", "modifiers": "public", "return": "", "signature": " SecretDAO(DSLContext dslContext, SecretContentDAOFactory secretContentDAOFactory,\n      SecretSeriesDAOFactory secretSeriesDAOFactory, ContentCryptographer cryptographer)", "full_signature": "public  SecretDAO(DSLContext dslContext, SecretContentDAOFactory secretContentDAOFactory,\n      SecretSeriesDAOFactory secretSeriesDAOFactory, ContentCryptographer cryptographer)", "class_method_signature": "SecretDAO.SecretDAO(DSLContext dslContext, SecretContentDAOFactory secretContentDAOFactory,\n      SecretSeriesDAOFactory secretSeriesDAOFactory, ContentCryptographer cryptographer)", "testcase": false, "constructor": true}, {"identifier": "createSecret", "parameters": "(String name, String encryptedSecret, String hmac,\n      String creator, Map<String, String> metadata, long expiry, String description,\n      @Nullable String type, @Nullable Map<String, String> generationOptions)", "modifiers": "@VisibleForTesting public", "return": "long", "signature": "long createSecret(String name, String encryptedSecret, String hmac,\n      String creator, Map<String, String> metadata, long expiry, String description,\n      @Nullable String type, @Nullable Map<String, String> generationOptions)", "full_signature": "@VisibleForTesting public long createSecret(String name, String encryptedSecret, String hmac,\n      String creator, Map<String, String> metadata, long expiry, String description,\n      @Nullable String type, @Nullable Map<String, String> generationOptions)", "class_method_signature": "SecretDAO.createSecret(String name, String encryptedSecret, String hmac,\n      String creator, Map<String, String> metadata, long expiry, String description,\n      @Nullable String type, @Nullable Map<String, String> generationOptions)", "testcase": false, "constructor": false}, {"identifier": "createOrUpdateSecret", "parameters": "(String name, String encryptedSecret, String hmac, String creator,\n      Map<String, String> metadata, long expiry, String description, @Nullable String type,\n      @Nullable Map<String, String> generationOptions)", "modifiers": "@VisibleForTesting public", "return": "long", "signature": "long createOrUpdateSecret(String name, String encryptedSecret, String hmac, String creator,\n      Map<String, String> metadata, long expiry, String description, @Nullable String type,\n      @Nullable Map<String, String> generationOptions)", "full_signature": "@VisibleForTesting public long createOrUpdateSecret(String name, String encryptedSecret, String hmac, String creator,\n      Map<String, String> metadata, long expiry, String description, @Nullable String type,\n      @Nullable Map<String, String> generationOptions)", "class_method_signature": "SecretDAO.createOrUpdateSecret(String name, String encryptedSecret, String hmac, String creator,\n      Map<String, String> metadata, long expiry, String description, @Nullable String type,\n      @Nullable Map<String, String> generationOptions)", "testcase": false, "constructor": false}, {"identifier": "partialUpdateSecret", "parameters": "(String name, String creator,\n      PartialUpdateSecretRequestV2 request)", "modifiers": "@VisibleForTesting public", "return": "long", "signature": "long partialUpdateSecret(String name, String creator,\n      PartialUpdateSecretRequestV2 request)", "full_signature": "@VisibleForTesting public long partialUpdateSecret(String name, String creator,\n      PartialUpdateSecretRequestV2 request)", "class_method_signature": "SecretDAO.partialUpdateSecret(String name, String creator,\n      PartialUpdateSecretRequestV2 request)", "testcase": false, "constructor": false}, {"identifier": "setExpiration", "parameters": "(String name, Instant expiration)", "modifiers": "public", "return": "boolean", "signature": "boolean setExpiration(String name, Instant expiration)", "full_signature": "public boolean setExpiration(String name, Instant expiration)", "class_method_signature": "SecretDAO.setExpiration(String name, Instant expiration)", "testcase": false, "constructor": false}, {"identifier": "getSecretById", "parameters": "(long secretId)", "modifiers": "public", "return": "Optional<SecretSeriesAndContent>", "signature": "Optional<SecretSeriesAndContent> getSecretById(long secretId)", "full_signature": "public Optional<SecretSeriesAndContent> getSecretById(long secretId)", "class_method_signature": "SecretDAO.getSecretById(long secretId)", "testcase": false, "constructor": false}, {"identifier": "getSecretByName", "parameters": "(String name)", "modifiers": "public", "return": "Optional<SecretSeriesAndContent>", "signature": "Optional<SecretSeriesAndContent> getSecretByName(String name)", "full_signature": "public Optional<SecretSeriesAndContent> getSecretByName(String name)", "class_method_signature": "SecretDAO.getSecretByName(String name)", "testcase": false, "constructor": false}, {"identifier": "getSecretsByName", "parameters": "(List<String> names)", "modifiers": "public", "return": "List<SecretSeriesAndContent>", "signature": "List<SecretSeriesAndContent> getSecretsByName(List<String> names)", "full_signature": "public List<SecretSeriesAndContent> getSecretsByName(List<String> names)", "class_method_signature": "SecretDAO.getSecretsByName(List<String> names)", "testcase": false, "constructor": false}, {"identifier": "getSecrets", "parameters": "(@Nullable Long expireMaxTime,\n      @Nullable Group group, @Nullable Long expireMinTime, @Nullable String minName,\n      @Nullable Integer limit)", "modifiers": "public", "return": "ImmutableList<SecretSeriesAndContent>", "signature": "ImmutableList<SecretSeriesAndContent> getSecrets(@Nullable Long expireMaxTime,\n      @Nullable Group group, @Nullable Long expireMinTime, @Nullable String minName,\n      @Nullable Integer limit)", "full_signature": "public ImmutableList<SecretSeriesAndContent> getSecrets(@Nullable Long expireMaxTime,\n      @Nullable Group group, @Nullable Long expireMinTime, @Nullable String minName,\n      @Nullable Integer limit)", "class_method_signature": "SecretDAO.getSecrets(@Nullable Long expireMaxTime,\n      @Nullable Group group, @Nullable Long expireMinTime, @Nullable String minName,\n      @Nullable Integer limit)", "testcase": false, "constructor": false}, {"identifier": "getSecretsNameOnly", "parameters": "()", "modifiers": "public", "return": "ImmutableList<SimpleEntry<Long, String>>", "signature": "ImmutableList<SimpleEntry<Long, String>> getSecretsNameOnly()", "full_signature": "public ImmutableList<SimpleEntry<Long, String>> getSecretsNameOnly()", "class_method_signature": "SecretDAO.getSecretsNameOnly()", "testcase": false, "constructor": false}, {"identifier": "getSecretsBatched", "parameters": "(int idx, int num,\n      boolean newestFirst)", "modifiers": "public", "return": "ImmutableList<SecretSeriesAndContent>", "signature": "ImmutableList<SecretSeriesAndContent> getSecretsBatched(int idx, int num,\n      boolean newestFirst)", "full_signature": "public ImmutableList<SecretSeriesAndContent> getSecretsBatched(int idx, int num,\n      boolean newestFirst)", "class_method_signature": "SecretDAO.getSecretsBatched(int idx, int num,\n      boolean newestFirst)", "testcase": false, "constructor": false}, {"identifier": "getSecretVersionsByName", "parameters": "(String name,\n      int versionIdx, int numVersions)", "modifiers": "public", "return": "Optional<ImmutableList<SanitizedSecret>>", "signature": "Optional<ImmutableList<SanitizedSecret>> getSecretVersionsByName(String name,\n      int versionIdx, int numVersions)", "full_signature": "public Optional<ImmutableList<SanitizedSecret>> getSecretVersionsByName(String name,\n      int versionIdx, int numVersions)", "class_method_signature": "SecretDAO.getSecretVersionsByName(String name,\n      int versionIdx, int numVersions)", "testcase": false, "constructor": false}, {"identifier": "setCurrentSecretVersionByName", "parameters": "(String name, long versionId, String updater)", "modifiers": "public", "return": "void", "signature": "void setCurrentSecretVersionByName(String name, long versionId, String updater)", "full_signature": "public void setCurrentSecretVersionByName(String name, long versionId, String updater)", "class_method_signature": "SecretDAO.setCurrentSecretVersionByName(String name, long versionId, String updater)", "testcase": false, "constructor": false}, {"identifier": "deleteSecretsByName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void deleteSecretsByName(String name)", "full_signature": "public void deleteSecretsByName(String name)", "class_method_signature": "SecretDAO.deleteSecretsByName(String name)", "testcase": false, "constructor": false}, {"identifier": "countDeletedSecrets", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int countDeletedSecrets()", "full_signature": "public int countDeletedSecrets()", "class_method_signature": "SecretDAO.countDeletedSecrets()", "testcase": false, "constructor": false}, {"identifier": "countSecretsDeletedBeforeDate", "parameters": "(DateTime deleteBefore)", "modifiers": "public", "return": "int", "signature": "int countSecretsDeletedBeforeDate(DateTime deleteBefore)", "full_signature": "public int countSecretsDeletedBeforeDate(DateTime deleteBefore)", "class_method_signature": "SecretDAO.countSecretsDeletedBeforeDate(DateTime deleteBefore)", "testcase": false, "constructor": false}, {"identifier": "dangerPermanentlyRemoveSecretsDeletedBeforeDate", "parameters": "(DateTime deletedBefore,\n      int sleepMillis)", "modifiers": "public", "return": "void", "signature": "void dangerPermanentlyRemoveSecretsDeletedBeforeDate(DateTime deletedBefore,\n      int sleepMillis)", "full_signature": "public void dangerPermanentlyRemoveSecretsDeletedBeforeDate(DateTime deletedBefore,\n      int sleepMillis)", "class_method_signature": "SecretDAO.dangerPermanentlyRemoveSecretsDeletedBeforeDate(DateTime deletedBefore,\n      int sleepMillis)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/daos/SecretDAO.java"}, "focal_method": {"identifier": "getSecretsByName", "parameters": "(List<String> names)", "modifiers": "public", "return": "List<SecretSeriesAndContent>", "body": "public List<SecretSeriesAndContent> getSecretsByName(List<String> names) {\n    checkArgument(!names.isEmpty());\n\n    SecretContentDAO secretContentDAO = secretContentDAOFactory.using(dslContext.configuration());\n    SecretSeriesDAO secretSeriesDAO = secretSeriesDAOFactory.using(dslContext.configuration());\n\n    List<SecretSeries> multipleSeries = secretSeriesDAO.getMultipleSecretSeriesByName(names);\n\n    List<SecretSeriesAndContent> ret = new ArrayList<SecretSeriesAndContent>();\n\n    for (SecretSeries series : multipleSeries) {\n      if (series.currentVersion().isPresent()) {\n        long secretContentId = series.currentVersion().get();\n        Optional<SecretContent> secretContent =\n                secretContentDAO.getSecretContentById(secretContentId);\n        if (secretContent.isPresent()) {\n          ret.add(SecretSeriesAndContent.of(series, secretContent.get()));\n        } else {\n          throw new NotFoundException(\"Secret not found.\");\n        }\n      }\n    }\n    return ret;\n  }", "signature": "List<SecretSeriesAndContent> getSecretsByName(List<String> names)", "full_signature": "public List<SecretSeriesAndContent> getSecretsByName(List<String> names)", "class_method_signature": "SecretDAO.getSecretsByName(List<String> names)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "isEmpty", "using", "configuration", "using", "configuration", "getMultipleSecretSeriesByName", "isPresent", "currentVersion", "get", "currentVersion", "getSecretContentById", "isPresent", "add", "of", "get"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}