{"test_class": {"identifier": "RandomKinematicAlgorithmTest", "superclass": "extends AbstractMathTestCase", "interfaces": "", "fields": [{"original_string": "private RandomKinematicAlgorithm random;", "modifier": "private", "type": "RandomKinematicAlgorithm", "declarator": "random", "var_name": "random"}], "file": "advanced/agentmotion/src/test/java/org/arakhne/afc/agentmotion/kinematic/RandomKinematicAlgorithmTest.java"}, "test_case": {"identifier": "calculate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void calculate() {\n\t\tAgentMotion m = this.random.calculate(new Point2d(1, 2), new Vector2d(3, 4), 5, 6, 7, 8);\n\t\tassertNotNull(m);\n\t\tassertFpVectorEquals(3.6, 4.8, m.getLinear()); \n\t}", "signature": "void calculate()", "full_signature": "@Test public void calculate()", "class_method_signature": "RandomKinematicAlgorithmTest.calculate()", "testcase": true, "constructor": false, "invocations": ["calculate", "assertNotNull", "assertFpVectorEquals", "getLinear"]}, "focal_class": {"identifier": "RandomKinematicAlgorithm", "superclass": "", "interfaces": "implements RandomMotionAlgorithm, Serializable, Cloneable", "fields": [{"original_string": "private static final long serialVersionUID = -8318025671219960417L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -8318025671219960417L", "var_name": "serialVersionUID"}, {"original_string": "private Random random = new Random();", "modifier": "private", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}], "methods": [{"identifier": "clone", "parameters": "()", "modifiers": "@Pure @Override public", "return": "RandomKinematicAlgorithm", "signature": "RandomKinematicAlgorithm clone()", "full_signature": "@Pure @Override public RandomKinematicAlgorithm clone()", "class_method_signature": "RandomKinematicAlgorithm.clone()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(Point2D<?, ?> position, Vector2D<?, ?> orientation, double linearSpeed,\n\t\t\tdouble maxLinearSpeed, double angularSpeed, double maxAngularSpeed)", "modifiers": "@Override public", "return": "AgentMotion", "signature": "AgentMotion calculate(Point2D<?, ?> position, Vector2D<?, ?> orientation, double linearSpeed,\n\t\t\tdouble maxLinearSpeed, double angularSpeed, double maxAngularSpeed)", "full_signature": "@Override public AgentMotion calculate(Point2D<?, ?> position, Vector2D<?, ?> orientation, double linearSpeed,\n\t\t\tdouble maxLinearSpeed, double angularSpeed, double maxAngularSpeed)", "class_method_signature": "RandomKinematicAlgorithm.calculate(Point2D<?, ?> position, Vector2D<?, ?> orientation, double linearSpeed,\n\t\t\tdouble maxLinearSpeed, double angularSpeed, double maxAngularSpeed)", "testcase": false, "constructor": false}], "file": "advanced/agentmotion/src/main/java/org/arakhne/afc/agentmotion/kinematic/RandomKinematicAlgorithm.java"}, "focal_method": {"identifier": "calculate", "parameters": "(Point2D<?, ?> position, Vector2D<?, ?> orientation, double linearSpeed,\n\t\t\tdouble maxLinearSpeed, double angularSpeed, double maxAngularSpeed)", "modifiers": "@Override public", "return": "AgentMotion", "body": "@Override\n\tpublic AgentMotion calculate(Point2D<?, ?> position, Vector2D<?, ?> orientation, double linearSpeed,\n\t\t\tdouble maxLinearSpeed, double angularSpeed, double maxAngularSpeed) {\n\t\tfinal Vector2D<?, ?> v = orientation.toColinearVector(maxLinearSpeed);\n\t\tfinal double rotation = this.random.nextGaussian() * maxAngularSpeed;\n\t\treturn new AgentMotion(v, rotation);\n\t}", "signature": "AgentMotion calculate(Point2D<?, ?> position, Vector2D<?, ?> orientation, double linearSpeed,\n\t\t\tdouble maxLinearSpeed, double angularSpeed, double maxAngularSpeed)", "full_signature": "@Override public AgentMotion calculate(Point2D<?, ?> position, Vector2D<?, ?> orientation, double linearSpeed,\n\t\t\tdouble maxLinearSpeed, double angularSpeed, double maxAngularSpeed)", "class_method_signature": "RandomKinematicAlgorithm.calculate(Point2D<?, ?> position, Vector2D<?, ?> orientation, double linearSpeed,\n\t\t\tdouble maxLinearSpeed, double angularSpeed, double maxAngularSpeed)", "testcase": false, "constructor": false, "invocations": ["toColinearVector", "nextGaussian"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}