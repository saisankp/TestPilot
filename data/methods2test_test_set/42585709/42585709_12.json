{"test_class": {"identifier": "GephiSolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SolverConfiguration config;", "modifier": "private", "type": "SolverConfiguration", "declarator": "config", "var_name": "config"}, {"original_string": "private AtomicLong idGenerator = new AtomicLong(10);", "modifier": "private", "type": "AtomicLong", "declarator": "idGenerator = new AtomicLong(10)", "var_name": "idGenerator"}, {"original_string": "private CouplingInstanceRepository couplingInstanceRepository;", "modifier": "private", "type": "CouplingInstanceRepository", "declarator": "couplingInstanceRepository", "var_name": "couplingInstanceRepository"}, {"original_string": "private NanoentityRepository nanoentityRepository;", "modifier": "private", "type": "NanoentityRepository", "declarator": "nanoentityRepository", "var_name": "nanoentityRepository"}, {"original_string": "private CouplingCriterion identityCoupling;", "modifier": "private", "type": "CouplingCriterion", "declarator": "identityCoupling", "var_name": "identityCoupling"}, {"original_string": "private CouplingCriterion semanticCoupling;", "modifier": "private", "type": "CouplingCriterion", "declarator": "semanticCoupling", "var_name": "semanticCoupling"}], "file": "Engine/src/test/java/ch/hsr/servicecutter/solver/GephiSolverTest.java"}, "test_case": {"identifier": "testSimpleModelSomeEdges", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSimpleModelSomeEdges() {\n\t\tUserSystem model = new UserSystem();\n\t\tmodel.addNanoentity(createNanoentity(\"nanoentity1\"));\n\t\tmodel.addNanoentity(createNanoentity(\"nanoentity2\"));\n\t\tmodel.addNanoentity(createNanoentity(\"nanoentity3\"));\n\t\tmodel.addNanoentity(createNanoentity(\"nanoentity4\"));\n\t\tmodel.addNanoentity(createNanoentity(\"nanoentity5\"));\n\t\tmodel.addNanoentity(createNanoentity(\"nanoentity6\"));\n\n\t\tSet<CouplingInstance> entityCoupling = new HashSet<>();\n\t\tentityCoupling.add(createInstance(model, new String[] { \"nanoentity1\", \"nanoentity2\", \"nanoentity3\" }));\n\t\tentityCoupling.add(createInstance(model, new String[] { \"nanoentity4\", \"nanoentity5\", \"nanoentity6\" }));\n\t\tSet<CouplingInstance> relationshipCoupling = createRelationship(model);\n\t\twhen(couplingInstanceRepository.findByUserSystem(model)).thenReturn(entityCoupling);\n\t\twhen(couplingInstanceRepository.findByUserSystemAndCriterion(model, identityCoupling.getName())).thenReturn(entityCoupling);\n\t\twhen(couplingInstanceRepository.findByUserSystemAndCriterion(model, semanticCoupling.getName())).thenReturn(relationshipCoupling);\n\n\t\tfinal Scorer scorer = new Scorer(couplingInstanceRepository, nanoentityRepository);\n\t\tMap<EntityPair, Map<String, Score>> scores = scorer.getScores(model, (final String key) -> {\n\t\t\treturn config.getPriorityForCouplingCriterion(key);\n\t\t});\n\t\tGephiSolver solver = new GephiSolver(model, scores, null);\n\t\tSolverResult result = solver.solveWithGirvanNewman(2);\n\n\t\tassertThat(result.getServices(), hasSize(2));\n\t\tfor (Service context : result.getServices()) {\n\t\t\tassertThat(context.getNanoentities(), hasSize(3));\n\t\t}\n\t}", "signature": "void testSimpleModelSomeEdges()", "full_signature": "@Test public void testSimpleModelSomeEdges()", "class_method_signature": "GephiSolverTest.testSimpleModelSomeEdges()", "testcase": true, "constructor": false, "invocations": ["addNanoentity", "createNanoentity", "addNanoentity", "createNanoentity", "addNanoentity", "createNanoentity", "addNanoentity", "createNanoentity", "addNanoentity", "createNanoentity", "addNanoentity", "createNanoentity", "add", "createInstance", "add", "createInstance", "createRelationship", "thenReturn", "when", "findByUserSystem", "thenReturn", "when", "findByUserSystemAndCriterion", "getName", "thenReturn", "when", "findByUserSystemAndCriterion", "getName", "getScores", "getPriorityForCouplingCriterion", "solveWithGirvanNewman", "assertThat", "getServices", "hasSize", "getServices", "assertThat", "getNanoentities", "hasSize"]}, "focal_class": {"identifier": "GephiSolver", "superclass": "extends AbstractSolver<Node, Edge>", "interfaces": "", "fields": [{"original_string": "private Map<String, Node> nodes;", "modifier": "private", "type": "Map<String, Node>", "declarator": "nodes", "var_name": "nodes"}, {"original_string": "private UndirectedGraph undirectedGraph;", "modifier": "private", "type": "UndirectedGraph", "declarator": "undirectedGraph", "var_name": "undirectedGraph"}, {"original_string": "private GraphModel graphModel;", "modifier": "private", "type": "GraphModel", "declarator": "graphModel", "var_name": "graphModel"}, {"original_string": "private Logger log = LoggerFactory.getLogger(GephiSolver.class);", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(GephiSolver.class)", "var_name": "log"}, {"original_string": "private Integer numberOfClusters;", "modifier": "private", "type": "Integer", "declarator": "numberOfClusters", "var_name": "numberOfClusters"}, {"original_string": "private char serviceIdGenerator = 'A';", "modifier": "private", "type": "char", "declarator": "serviceIdGenerator = 'A'", "var_name": "serviceIdGenerator"}], "methods": [{"identifier": "GephiSolver", "parameters": "(final UserSystem userSystem, final Map<EntityPair, Map<String, Score>> scores, final Integer numberOfClusters)", "modifiers": "public", "return": "", "signature": " GephiSolver(final UserSystem userSystem, final Map<EntityPair, Map<String, Score>> scores, final Integer numberOfClusters)", "full_signature": "public  GephiSolver(final UserSystem userSystem, final Map<EntityPair, Map<String, Score>> scores, final Integer numberOfClusters)", "class_method_signature": "GephiSolver.GephiSolver(final UserSystem userSystem, final Map<EntityPair, Map<String, Score>> scores, final Integer numberOfClusters)", "testcase": false, "constructor": true}, {"identifier": "solve", "parameters": "()", "modifiers": "@Override public", "return": "SolverResult", "signature": "SolverResult solve()", "full_signature": "@Override public SolverResult solve()", "class_method_signature": "GephiSolver.solve()", "testcase": false, "constructor": false}, {"identifier": "solveWithGirvanNewman", "parameters": "(final int numberOfClusters)", "modifiers": "", "return": "SolverResult", "signature": "SolverResult solveWithGirvanNewman(final int numberOfClusters)", "full_signature": " SolverResult solveWithGirvanNewman(final int numberOfClusters)", "class_method_signature": "GephiSolver.solveWithGirvanNewman(final int numberOfClusters)", "testcase": false, "constructor": false}, {"identifier": "getClustererResult", "parameters": "(final Clusterer clusterer)", "modifiers": "private", "return": "Set<Service>", "signature": "Set<Service> getClustererResult(final Clusterer clusterer)", "full_signature": "private Set<Service> getClustererResult(final Clusterer clusterer)", "class_method_signature": "GephiSolver.getClustererResult(final Clusterer clusterer)", "testcase": false, "constructor": false}, {"identifier": "getEdges", "parameters": "()", "modifiers": "@Override protected", "return": "Iterable<Edge>", "signature": "Iterable<Edge> getEdges()", "full_signature": "@Override protected Iterable<Edge> getEdges()", "class_method_signature": "GephiSolver.getEdges()", "testcase": false, "constructor": false}, {"identifier": "getEdge", "parameters": "(final Nanoentity first, final Nanoentity second)", "modifiers": "@Override protected", "return": "Edge", "signature": "Edge getEdge(final Nanoentity first, final Nanoentity second)", "full_signature": "@Override protected Edge getEdge(final Nanoentity first, final Nanoentity second)", "class_method_signature": "GephiSolver.getEdge(final Nanoentity first, final Nanoentity second)", "testcase": false, "constructor": false}, {"identifier": "removeEdge", "parameters": "(final Edge edge)", "modifiers": "@Override protected", "return": "void", "signature": "void removeEdge(final Edge edge)", "full_signature": "@Override protected void removeEdge(final Edge edge)", "class_method_signature": "GephiSolver.removeEdge(final Edge edge)", "testcase": false, "constructor": false}, {"identifier": "createEdgeAndSetWeight", "parameters": "(final Nanoentity first, final Nanoentity second, final double weight)", "modifiers": "@Override protected", "return": "void", "signature": "void createEdgeAndSetWeight(final Nanoentity first, final Nanoentity second, final double weight)", "full_signature": "@Override protected void createEdgeAndSetWeight(final Nanoentity first, final Nanoentity second, final double weight)", "class_method_signature": "GephiSolver.createEdgeAndSetWeight(final Nanoentity first, final Nanoentity second, final double weight)", "testcase": false, "constructor": false}, {"identifier": "getWeight", "parameters": "(final Edge edge)", "modifiers": "@Override protected", "return": "double", "signature": "double getWeight(final Edge edge)", "full_signature": "@Override protected double getWeight(final Edge edge)", "class_method_signature": "GephiSolver.getWeight(final Edge edge)", "testcase": false, "constructor": false}, {"identifier": "setWeight", "parameters": "(final Edge edge, final double weight)", "modifiers": "@Override protected", "return": "void", "signature": "void setWeight(final Edge edge, final double weight)", "full_signature": "@Override protected void setWeight(final Edge edge, final double weight)", "class_method_signature": "GephiSolver.setWeight(final Edge edge, final double weight)", "testcase": false, "constructor": false}, {"identifier": "getNode", "parameters": "(final String name)", "modifiers": "@Override protected", "return": "Node", "signature": "Node getNode(final String name)", "full_signature": "@Override protected Node getNode(final String name)", "class_method_signature": "GephiSolver.getNode(final String name)", "testcase": false, "constructor": false}, {"identifier": "createNode", "parameters": "(final String name)", "modifiers": "@Override protected", "return": "void", "signature": "void createNode(final String name)", "full_signature": "@Override protected void createNode(final String name)", "class_method_signature": "GephiSolver.createNode(final String name)", "testcase": false, "constructor": false}, {"identifier": "bootstrapGephi", "parameters": "()", "modifiers": "private", "return": "GraphModel", "signature": "GraphModel bootstrapGephi()", "full_signature": "private GraphModel bootstrapGephi()", "class_method_signature": "GephiSolver.bootstrapGephi()", "testcase": false, "constructor": false}], "file": "Engine/src/main/java/ch/hsr/servicecutter/solver/GephiSolver.java"}, "focal_method": {"identifier": "solveWithGirvanNewman", "parameters": "(final int numberOfClusters)", "modifiers": "", "return": "SolverResult", "body": "SolverResult solveWithGirvanNewman(final int numberOfClusters) {\n\t\tLog.debug(\"solve cluster with numberOfClusters = \" + numberOfClusters);\n\t\tGirvanNewmanClusterer clusterer = new GirvanNewmanClusterer();\n\t\tclusterer.setPreferredNumberOfClusters(numberOfClusters);\n\t\tclusterer.execute(graphModel);\n\t\tSolverResult solverResult = new SolverResult(getClustererResult(clusterer));\n\t\treturn solverResult;\n\t}", "signature": "SolverResult solveWithGirvanNewman(final int numberOfClusters)", "full_signature": " SolverResult solveWithGirvanNewman(final int numberOfClusters)", "class_method_signature": "GephiSolver.solveWithGirvanNewman(final int numberOfClusters)", "testcase": false, "constructor": false, "invocations": ["debug", "setPreferredNumberOfClusters", "execute", "getClustererResult"]}, "repository": {"repo_id": 42585709, "url": "https://github.com/ServiceCutter/ServiceCutter", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 29, "size": 8580, "license": "licensed"}}