{"test_class": {"identifier": "NumericCodecTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Resolver resolver;", "modifier": "@Mock\n    private", "type": "Resolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "@Mock\n    private Expression<Integer, Resolver> size;", "modifier": "@Mock\n    private", "type": "Expression<Integer, Resolver>", "declarator": "size", "var_name": "size"}, {"original_string": "@Mock\n    private Expression<Integer, Resolver> matchExpression;", "modifier": "@Mock\n    private", "type": "Expression<Integer, Resolver>", "declarator": "matchExpression", "var_name": "matchExpression"}, {"original_string": "@Mock\n    private BitChannel channel;", "modifier": "@Mock\n    private", "type": "BitChannel", "declarator": "channel", "var_name": "channel"}], "file": "preon-binding/src/test/java/org/codehaus/preon/codec/NumericCodecTest.java"}, "test_case": {"identifier": "shouldEncodeCorrectly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldEncodeCorrectly() throws IOException {\n        NumericCodec codec = new NumericCodec(size, ByteOrder.BigEndian, NumericCodec.NumericType.Long, matchExpression);\n        when(size.eval(resolver)).thenReturn(3);\n        codec.encode(new Long(12L), channel, resolver);\n        Mockito.verify(channel).write(3, 12L, ByteOrder.BigEndian);\n    }", "signature": "void shouldEncodeCorrectly()", "full_signature": "@Test public void shouldEncodeCorrectly()", "class_method_signature": "NumericCodecTest.shouldEncodeCorrectly()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "eval", "encode", "write", "verify"]}, "focal_class": {"identifier": "NumericCodec", "superclass": "", "interfaces": "implements Codec<Object>", "fields": [{"original_string": "static Map<Class<?>, NumericType> NUMERIC_TYPES = new HashMap<Class<?>, NumericType>(\n            8);", "modifier": "static", "type": "Map<Class<?>, NumericType>", "declarator": "NUMERIC_TYPES = new HashMap<Class<?>, NumericType>(\n            8)", "var_name": "NUMERIC_TYPES"}, {"original_string": "protected Expression<Integer, Resolver> sizeExpr;", "modifier": "protected", "type": "Expression<Integer, Resolver>", "declarator": "sizeExpr", "var_name": "sizeExpr"}, {"original_string": "protected ByteOrder byteOrder;", "modifier": "protected", "type": "ByteOrder", "declarator": "byteOrder", "var_name": "byteOrder"}, {"original_string": "protected NumericType type;", "modifier": "protected", "type": "NumericType", "declarator": "type", "var_name": "type"}, {"original_string": "private Expression<Integer, Resolver> matchExpr;", "modifier": "private", "type": "Expression<Integer, Resolver>", "declarator": "matchExpr", "var_name": "matchExpr"}], "methods": [{"identifier": "NumericCodec", "parameters": "(Expression<Integer, Resolver> sizeExpr,\n                        ByteOrder byteOrder, NumericType type,\n                        Expression<Integer, Resolver> matchExpr)", "modifiers": "public", "return": "", "signature": " NumericCodec(Expression<Integer, Resolver> sizeExpr,\n                        ByteOrder byteOrder, NumericType type,\n                        Expression<Integer, Resolver> matchExpr)", "full_signature": "public  NumericCodec(Expression<Integer, Resolver> sizeExpr,\n                        ByteOrder byteOrder, NumericType type,\n                        Expression<Integer, Resolver> matchExpr)", "class_method_signature": "NumericCodec.NumericCodec(Expression<Integer, Resolver> sizeExpr,\n                        ByteOrder byteOrder, NumericType type,\n                        Expression<Integer, Resolver> matchExpr)", "testcase": false, "constructor": true}, {"identifier": "decode", "parameters": "(BitBuffer buffer, Resolver resolver,\n                         Builder builder)", "modifiers": "public", "return": "Object", "signature": "Object decode(BitBuffer buffer, Resolver resolver,\n                         Builder builder)", "full_signature": "public Object decode(BitBuffer buffer, Resolver resolver,\n                         Builder builder)", "class_method_signature": "NumericCodec.decode(BitBuffer buffer, Resolver resolver,\n                         Builder builder)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(Object value, BitChannel channel, Resolver resolver)", "modifiers": "public", "return": "void", "signature": "void encode(Object value, BitChannel channel, Resolver resolver)", "full_signature": "public void encode(Object value, BitChannel channel, Resolver resolver)", "class_method_signature": "NumericCodec.encode(Object value, BitChannel channel, Resolver resolver)", "testcase": false, "constructor": false}, {"identifier": "getTypes", "parameters": "()", "modifiers": "public", "return": "Class<?>[]", "signature": "Class<?>[] getTypes()", "full_signature": "public Class<?>[] getTypes()", "class_method_signature": "NumericCodec.getTypes()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "Expression<Integer, Resolver>", "signature": "Expression<Integer, Resolver> getSize()", "full_signature": "public Expression<Integer, Resolver> getSize()", "class_method_signature": "NumericCodec.getSize()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getType()", "full_signature": "public Class<?> getType()", "class_method_signature": "NumericCodec.getType()", "testcase": false, "constructor": false}, {"identifier": "getCodecDescriptor", "parameters": "()", "modifiers": "public", "return": "CodecDescriptor", "signature": "CodecDescriptor getCodecDescriptor()", "full_signature": "public CodecDescriptor getCodecDescriptor()", "class_method_signature": "NumericCodec.getCodecDescriptor()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "NumericCodec.toString()", "testcase": false, "constructor": false}], "file": "preon-binding/src/main/java/org/codehaus/preon/codec/NumericCodec.java"}, "focal_method": {"identifier": "encode", "parameters": "(Object value, BitChannel channel, Resolver resolver)", "modifiers": "public", "return": "void", "body": "public void encode(Object value, BitChannel channel, Resolver resolver) throws IOException {\n        type.encode(channel, sizeExpr.eval(resolver), byteOrder, value);\n    }", "signature": "void encode(Object value, BitChannel channel, Resolver resolver)", "full_signature": "public void encode(Object value, BitChannel channel, Resolver resolver)", "class_method_signature": "NumericCodec.encode(Object value, BitChannel channel, Resolver resolver)", "testcase": false, "constructor": false, "invocations": ["encode", "eval"]}, "repository": {"repo_id": 854893, "url": "https://github.com/preon/preon", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 155, "size": 2459, "license": "licensed"}}