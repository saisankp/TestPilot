{"test_class": {"identifier": "ProxyHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PATTERN = \"localhost|*.my.company|192.168.*|127.0.0.1\";", "modifier": "public static final", "type": "String", "declarator": "PATTERN = \"localhost|*.my.company|192.168.*|127.0.0.1\"", "var_name": "PATTERN"}, {"original_string": "public static final String HOST = \"test.my.company\";", "modifier": "public static final", "type": "String", "declarator": "HOST = \"test.my.company\"", "var_name": "HOST"}, {"original_string": "public static final String SOURCE_URL = \"https://test.my.company/repository/thirdparty/\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_URL = \"https://test.my.company/repository/thirdparty/\"", "var_name": "SOURCE_URL"}], "file": "maven-repository-provisioner/src/test/java/com/simpligility/maven/provisioner/ProxyHelperTest.java"}, "test_case": {"identifier": "testConvertToJavaPattern", "parameters": "(  )", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvertToJavaPattern(  )\n    {\n        String javaPattern = ProxyHelper.convertToJavaPattern( PATTERN );\n        String expected = \"localhost|.*\\\\.my\\\\.company|192\\\\.168\\\\..*|127\\\\.0\\\\.0\\\\.1\";\n        assertEquals( \"javaPattern\", expected, javaPattern );\n    }", "signature": "void testConvertToJavaPattern(  )", "full_signature": "@Test public void testConvertToJavaPattern(  )", "class_method_signature": "ProxyHelperTest.testConvertToJavaPattern(  )", "testcase": true, "constructor": false, "invocations": ["convertToJavaPattern", "assertEquals"]}, "focal_class": {"identifier": "ProxyHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger( ProxyHelper.class );", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger( ProxyHelper.class )", "var_name": "log"}, {"original_string": "public static final String DEFAULT_PROTOCOL = \"http\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_PROTOCOL = \"http\"", "var_name": "DEFAULT_PROTOCOL"}], "methods": [{"identifier": "ProxyHelper", "parameters": "(  )", "modifiers": "private", "return": "", "signature": " ProxyHelper(  )", "full_signature": "private  ProxyHelper(  )", "class_method_signature": "ProxyHelper.ProxyHelper(  )", "testcase": false, "constructor": true}, {"identifier": "getProxy", "parameters": "( String url )", "modifiers": "public static", "return": "Proxy", "signature": "Proxy getProxy( String url )", "full_signature": "public static Proxy getProxy( String url )", "class_method_signature": "ProxyHelper.getProxy( String url )", "testcase": false, "constructor": false}, {"identifier": "isUseProxy", "parameters": "( String protocol, String host )", "modifiers": "private static", "return": "boolean", "signature": "boolean isUseProxy( String protocol, String host )", "full_signature": "private static boolean isUseProxy( String protocol, String host )", "class_method_signature": "ProxyHelper.isUseProxy( String protocol, String host )", "testcase": false, "constructor": false}, {"identifier": "isUseProxyByPattern", "parameters": "( String host, String nonProxyHostsPattern )", "modifiers": "static", "return": "boolean", "signature": "boolean isUseProxyByPattern( String host, String nonProxyHostsPattern )", "full_signature": "static boolean isUseProxyByPattern( String host, String nonProxyHostsPattern )", "class_method_signature": "ProxyHelper.isUseProxyByPattern( String host, String nonProxyHostsPattern )", "testcase": false, "constructor": false}, {"identifier": "convertToJavaPattern", "parameters": "( String pattern )", "modifiers": "static", "return": "String", "signature": "String convertToJavaPattern( String pattern )", "full_signature": "static String convertToJavaPattern( String pattern )", "class_method_signature": "ProxyHelper.convertToJavaPattern( String pattern )", "testcase": false, "constructor": false}, {"identifier": "isHostMatchesNonProxyHostsPattern", "parameters": "( String host, String nonProxyHostsPattern )", "modifiers": "static", "return": "boolean", "signature": "boolean isHostMatchesNonProxyHostsPattern( String host, String nonProxyHostsPattern )", "full_signature": "static boolean isHostMatchesNonProxyHostsPattern( String host, String nonProxyHostsPattern )", "class_method_signature": "ProxyHelper.isHostMatchesNonProxyHostsPattern( String host, String nonProxyHostsPattern )", "testcase": false, "constructor": false}, {"identifier": "getProxyPort", "parameters": "( String protocol )", "modifiers": "private static", "return": "int", "signature": "int getProxyPort( String protocol )", "full_signature": "private static int getProxyPort( String protocol )", "class_method_signature": "ProxyHelper.getProxyPort( String protocol )", "testcase": false, "constructor": false}, {"identifier": "getProxyHost", "parameters": "( String protocol )", "modifiers": "private static", "return": "String", "signature": "String getProxyHost( String protocol )", "full_signature": "private static String getProxyHost( String protocol )", "class_method_signature": "ProxyHelper.getProxyHost( String protocol )", "testcase": false, "constructor": false}, {"identifier": "getNonProxyHostsPattern", "parameters": "( String protocol )", "modifiers": "private static", "return": "String", "signature": "String getNonProxyHostsPattern( String protocol )", "full_signature": "private static String getNonProxyHostsPattern( String protocol )", "class_method_signature": "ProxyHelper.getNonProxyHostsPattern( String protocol )", "testcase": false, "constructor": false}, {"identifier": "getProxyPassword", "parameters": "( String protocol )", "modifiers": "private static", "return": "String", "signature": "String getProxyPassword( String protocol )", "full_signature": "private static String getProxyPassword( String protocol )", "class_method_signature": "ProxyHelper.getProxyPassword( String protocol )", "testcase": false, "constructor": false}, {"identifier": "getProxyUser", "parameters": "( String protocol )", "modifiers": "private static", "return": "String", "signature": "String getProxyUser( String protocol )", "full_signature": "private static String getProxyUser( String protocol )", "class_method_signature": "ProxyHelper.getProxyUser( String protocol )", "testcase": false, "constructor": false}, {"identifier": "getProtocol", "parameters": "( String url )", "modifiers": "static", "return": "String", "signature": "String getProtocol( String url )", "full_signature": "static String getProtocol( String url )", "class_method_signature": "ProxyHelper.getProtocol( String url )", "testcase": false, "constructor": false}, {"identifier": "getHost", "parameters": "( String url )", "modifiers": "static", "return": "String", "signature": "String getHost( String url )", "full_signature": "static String getHost( String url )", "class_method_signature": "ProxyHelper.getHost( String url )", "testcase": false, "constructor": false}], "file": "maven-repository-provisioner/src/main/java/com/simpligility/maven/provisioner/ProxyHelper.java"}, "focal_method": {"identifier": "convertToJavaPattern", "parameters": "( String pattern )", "modifiers": "static", "return": "String", "body": "static String convertToJavaPattern( String pattern )\n   {\n       String javaPattern = pattern;\n       if ( StringUtils.isNotBlank( pattern ) )\n       {\n           javaPattern = javaPattern.replaceAll( \"\\\\.\", \"\\\\\\\\.\" );\n           javaPattern = javaPattern.replaceAll( \"\\\\*\", \".*\" );\n       }\n       log.debug( \"convertToJavaPattern: javaPattern = '{}'\", javaPattern );\n       return javaPattern;\n   }", "signature": "String convertToJavaPattern( String pattern )", "full_signature": "static String convertToJavaPattern( String pattern )", "class_method_signature": "ProxyHelper.convertToJavaPattern( String pattern )", "testcase": false, "constructor": false, "invocations": ["isNotBlank", "replaceAll", "replaceAll", "debug"]}, "repository": {"repo_id": 22169673, "url": "https://github.com/simpligility/maven-repository-tools", "stars": 80, "created": "7/23/2014 6:51:16 PM +00:00", "updates": "2020-01-24T15:25:21+00:00", "fork": "False", "license": "licensed"}}