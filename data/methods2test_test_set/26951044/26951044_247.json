{"test_class": {"identifier": "DefaultServiceContextTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DefaultServiceContext context = new DefaultServiceContext();", "modifier": "private final", "type": "DefaultServiceContext", "declarator": "context = new DefaultServiceContext()", "var_name": "context"}], "file": "code/spi-support/src/test/java/org/apache/tamaya/spisupport/DefaultServiceContextTest.java"}, "test_case": {"identifier": "testGetServices_shouldReturnServices", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetServices_shouldReturnServices() {\n        {\n            Collection<InvalidPriorityInterface> services = context.getServices(InvalidPriorityInterface.class);\n            assertThat(services).isNotNull();\n            assertThat(services).hasSize(2);\n\n            for (InvalidPriorityInterface service : services) {\n                assertThat(service instanceof InvalidPriorityImpl1 || service instanceof InvalidPriorityImpl2).isTrue();\n            }\n        }\n\n        {\n            List<MultiImplsInterface> services = context.getServices(MultiImplsInterface.class);\n            assertThat(services).isNotNull();\n            assertThat(services).hasSize(3);\n\n            assertThat(services.get(0) instanceof MultiImpl2).isTrue();\n            assertThat(services.get(1) instanceof MultiImpl1).isTrue();\n            assertThat(services.get(2) instanceof MultiImpl3).isTrue();\n        }\n    }", "signature": "void testGetServices_shouldReturnServices()", "full_signature": "@Test public void testGetServices_shouldReturnServices()", "class_method_signature": "DefaultServiceContextTest.testGetServices_shouldReturnServices()", "testcase": true, "constructor": false, "invocations": ["getServices", "isNotNull", "assertThat", "hasSize", "assertThat", "isTrue", "assertThat", "getServices", "isNotNull", "assertThat", "hasSize", "assertThat", "isTrue", "assertThat", "get", "isTrue", "assertThat", "get", "isTrue", "assertThat", "get"]}, "focal_class": {"identifier": "DefaultServiceContext", "superclass": "", "interfaces": "implements ServiceContext", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(DefaultServiceContext.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(DefaultServiceContext.class.getName())", "var_name": "LOG"}, {"original_string": "private ClassLoader classLoader;", "modifier": "private", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}, {"original_string": "private final ConcurrentHashMap<Class<?>, List<Object>> servicesLoaded = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentHashMap<Class<?>, List<Object>>", "declarator": "servicesLoaded = new ConcurrentHashMap<>()", "var_name": "servicesLoaded"}, {"original_string": "private final Map<Class<?>, Object> singletons = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<Class<?>, Object>", "declarator": "singletons = new ConcurrentHashMap<>()", "var_name": "singletons"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    private Map<Class, Class> factoryTypes = new ConcurrentHashMap<>();", "modifier": "@SuppressWarnings(\"rawtypes\")\n    private", "type": "Map<Class, Class>", "declarator": "factoryTypes = new ConcurrentHashMap<>()", "var_name": "factoryTypes"}], "methods": [{"identifier": "getService", "parameters": "(Class<T> serviceType, Supplier<T> supplier)", "modifiers": "@Override public", "return": "T", "signature": "T getService(Class<T> serviceType, Supplier<T> supplier)", "full_signature": "@Override public T getService(Class<T> serviceType, Supplier<T> supplier)", "class_method_signature": "DefaultServiceContext.getService(Class<T> serviceType, Supplier<T> supplier)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Class<T> serviceType, Supplier<T> supplier)", "modifiers": "@Override public", "return": "T", "signature": "T create(Class<T> serviceType, Supplier<T> supplier)", "full_signature": "@Override public T create(Class<T> serviceType, Supplier<T> supplier)", "class_method_signature": "DefaultServiceContext.create(Class<T> serviceType, Supplier<T> supplier)", "testcase": false, "constructor": false}, {"identifier": "getServiceWithHighestPriority", "parameters": "(Collection<T> services, Class<T> serviceType)", "modifiers": "private", "return": "T", "signature": "T getServiceWithHighestPriority(Collection<T> services, Class<T> serviceType)", "full_signature": "private T getServiceWithHighestPriority(Collection<T> services, Class<T> serviceType)", "class_method_signature": "DefaultServiceContext.getServiceWithHighestPriority(Collection<T> services, Class<T> serviceType)", "testcase": false, "constructor": false}, {"identifier": "getServices", "parameters": "(final Class<T> serviceType, Supplier<List<T>> supplier)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> getServices(final Class<T> serviceType, Supplier<List<T>> supplier)", "full_signature": "@Override public List<T> getServices(final Class<T> serviceType, Supplier<List<T>> supplier)", "class_method_signature": "DefaultServiceContext.getServices(final Class<T> serviceType, Supplier<List<T>> supplier)", "testcase": false, "constructor": false}, {"identifier": "loadServices", "parameters": "(final Class<T> serviceType, Supplier<List<T>> supplier)", "modifiers": "private", "return": "List<T>", "signature": "List<T> loadServices(final Class<T> serviceType, Supplier<List<T>> supplier)", "full_signature": "private List<T> loadServices(final Class<T> serviceType, Supplier<List<T>> supplier)", "class_method_signature": "DefaultServiceContext.loadServices(final Class<T> serviceType, Supplier<List<T>> supplier)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Class<T> serviceType, T instance, boolean force)", "modifiers": "@Override public", "return": "T", "signature": "T register(Class<T> serviceType, T instance, boolean force)", "full_signature": "@Override public T register(Class<T> serviceType, T instance, boolean force)", "class_method_signature": "DefaultServiceContext.register(Class<T> serviceType, T instance, boolean force)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Class<T> type, List<T> instances, boolean force)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> register(Class<T> type, List<T> instances, boolean force)", "full_signature": "@Override public List<T> register(Class<T> type, List<T> instances, boolean force)", "class_method_signature": "DefaultServiceContext.register(Class<T> type, List<T> instances, boolean force)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "DefaultServiceContext.reset()", "testcase": false, "constructor": false}, {"identifier": "getClassLoader", "parameters": "()", "modifiers": "@Override public", "return": "ClassLoader", "signature": "ClassLoader getClassLoader()", "full_signature": "@Override public ClassLoader getClassLoader()", "class_method_signature": "DefaultServiceContext.getClassLoader()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(ClassLoader classLoader)", "modifiers": "@Override public", "return": "void", "signature": "void init(ClassLoader classLoader)", "full_signature": "@Override public void init(ClassLoader classLoader)", "class_method_signature": "DefaultServiceContext.init(ClassLoader classLoader)", "testcase": false, "constructor": false}], "file": "code/spi-support/src/main/java/org/apache/tamaya/spisupport/DefaultServiceContext.java"}, "focal_method": {"identifier": "getServices", "parameters": "(final Class<T> serviceType, Supplier<List<T>> supplier)", "modifiers": "@Override public", "return": "List<T>", "body": "@Override\n    public <T> List<T> getServices(final Class<T> serviceType, Supplier<List<T>> supplier) {\n        @SuppressWarnings(\"unchecked\")\n        List<T> found = (List<T>) servicesLoaded.get(serviceType);\n        if (found != null) {\n            return found;\n        }\n        List<T> services = loadServices(serviceType, supplier);\n        @SuppressWarnings(\"unchecked\")\n        final List<T> previousServices = List.class.cast(servicesLoaded.putIfAbsent(serviceType, (List<Object>) services));\n        return previousServices != null ? previousServices : services;\n    }", "signature": "List<T> getServices(final Class<T> serviceType, Supplier<List<T>> supplier)", "full_signature": "@Override public List<T> getServices(final Class<T> serviceType, Supplier<List<T>> supplier)", "class_method_signature": "DefaultServiceContext.getServices(final Class<T> serviceType, Supplier<List<T>> supplier)", "testcase": false, "constructor": false, "invocations": ["get", "loadServices", "cast", "putIfAbsent"]}, "repository": {"repo_id": 26951044, "url": "https://github.com/apache/incubator-tamaya", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 44, "size": 7630, "license": "licensed"}}