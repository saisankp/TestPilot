{"test_class": {"identifier": "ScheduledRunnableTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/schedulers/ScheduledRunnableTest.java"}, "test_case": {"identifier": "dispose", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void dispose() {\n        CompositeDisposable set = new CompositeDisposable();\n        ScheduledRunnable run = new ScheduledRunnable(Functions.EMPTY_RUNNABLE, set);\n        set.add(run);\n\n        assertFalse(run.isDisposed());\n\n        set.dispose();\n\n        assertTrue(run.isDisposed());\n    }", "signature": "void dispose()", "full_signature": "@Test public void dispose()", "class_method_signature": "ScheduledRunnableTest.dispose()", "testcase": true, "constructor": false, "invocations": ["add", "assertFalse", "isDisposed", "dispose", "assertTrue", "isDisposed"]}, "focal_class": {"identifier": "ScheduledRunnable", "superclass": "extends AtomicReferenceArray<Object>", "interfaces": "implements Runnable, Callable<Object>, Disposable", "fields": [{"original_string": "private static final long serialVersionUID = -6120223772001106981L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -6120223772001106981L", "var_name": "serialVersionUID"}, {"original_string": "final Runnable actual;", "modifier": "final", "type": "Runnable", "declarator": "actual", "var_name": "actual"}, {"original_string": "static final Object PARENT_DISPOSED = new Object();", "modifier": "static final", "type": "Object", "declarator": "PARENT_DISPOSED = new Object()", "var_name": "PARENT_DISPOSED"}, {"original_string": "static final Object SYNC_DISPOSED = new Object();", "modifier": "static final", "type": "Object", "declarator": "SYNC_DISPOSED = new Object()", "var_name": "SYNC_DISPOSED"}, {"original_string": "static final Object ASYNC_DISPOSED = new Object();", "modifier": "static final", "type": "Object", "declarator": "ASYNC_DISPOSED = new Object()", "var_name": "ASYNC_DISPOSED"}, {"original_string": "static final Object DONE = new Object();", "modifier": "static final", "type": "Object", "declarator": "DONE = new Object()", "var_name": "DONE"}, {"original_string": "static final int PARENT_INDEX = 0;", "modifier": "static final", "type": "int", "declarator": "PARENT_INDEX = 0", "var_name": "PARENT_INDEX"}, {"original_string": "static final int FUTURE_INDEX = 1;", "modifier": "static final", "type": "int", "declarator": "FUTURE_INDEX = 1", "var_name": "FUTURE_INDEX"}, {"original_string": "static final int THREAD_INDEX = 2;", "modifier": "static final", "type": "int", "declarator": "THREAD_INDEX = 2", "var_name": "THREAD_INDEX"}], "methods": [{"identifier": "ScheduledRunnable", "parameters": "(Runnable actual, DisposableContainer parent)", "modifiers": "public", "return": "", "signature": " ScheduledRunnable(Runnable actual, DisposableContainer parent)", "full_signature": "public  ScheduledRunnable(Runnable actual, DisposableContainer parent)", "class_method_signature": "ScheduledRunnable.ScheduledRunnable(Runnable actual, DisposableContainer parent)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object call()", "full_signature": "@Override public Object call()", "class_method_signature": "ScheduledRunnable.call()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ScheduledRunnable.run()", "testcase": false, "constructor": false}, {"identifier": "setFuture", "parameters": "(Future<?> f)", "modifiers": "public", "return": "void", "signature": "void setFuture(Future<?> f)", "full_signature": "public void setFuture(Future<?> f)", "class_method_signature": "ScheduledRunnable.setFuture(Future<?> f)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "ScheduledRunnable.dispose()", "testcase": false, "constructor": false}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "ScheduledRunnable.isDisposed()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/schedulers/ScheduledRunnable.java"}, "focal_method": {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void dispose() {\n        for (;;) {\n            Object o = get(FUTURE_INDEX);\n            if (o == DONE || o == SYNC_DISPOSED || o == ASYNC_DISPOSED) {\n                break;\n            }\n            boolean async = get(THREAD_INDEX) != Thread.currentThread();\n            if (compareAndSet(FUTURE_INDEX, o, async ? ASYNC_DISPOSED : SYNC_DISPOSED)) {\n                if (o != null) {\n                    ((Future<?>)o).cancel(async);\n                }\n                break;\n            }\n        }\n\n        for (;;) {\n            Object o = get(PARENT_INDEX);\n            if (o == DONE || o == PARENT_DISPOSED || o == null) {\n                return;\n            }\n            if (compareAndSet(PARENT_INDEX, o, PARENT_DISPOSED)) {\n                ((DisposableContainer)o).delete(this);\n                return;\n            }\n        }\n    }", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "ScheduledRunnable.dispose()", "testcase": false, "constructor": false, "invocations": ["get", "get", "currentThread", "compareAndSet", "cancel", "get", "compareAndSet", "delete"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}