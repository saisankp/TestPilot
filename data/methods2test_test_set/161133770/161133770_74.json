{"test_class": {"identifier": "ServingServiceGRpcControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private ServingService mockServingService;", "modifier": "@Mock private", "type": "ServingService", "declarator": "mockServingService", "var_name": "mockServingService"}, {"original_string": "@Mock private StreamObserver<GetOnlineFeaturesResponse> mockStreamObserver;", "modifier": "@Mock private", "type": "StreamObserver<GetOnlineFeaturesResponse>", "declarator": "mockStreamObserver", "var_name": "mockStreamObserver"}, {"original_string": "private GetOnlineFeaturesRequest validRequest;", "modifier": "private", "type": "GetOnlineFeaturesRequest", "declarator": "validRequest", "var_name": "validRequest"}, {"original_string": "private ServingServiceGRpcController service;", "modifier": "private", "type": "ServingServiceGRpcController", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock private Authentication authentication;", "modifier": "@Mock private", "type": "Authentication", "declarator": "authentication", "var_name": "authentication"}, {"original_string": "@Mock private AuthorizationProvider authProvider;", "modifier": "@Mock private", "type": "AuthorizationProvider", "declarator": "authProvider", "var_name": "authProvider"}], "file": "serving/src/test/java/feast/serving/controller/ServingServiceGRpcControllerTest.java"}, "test_case": {"identifier": "shouldThrowErrorOnValidRequestIfRequestIsUnauthorized", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldThrowErrorOnValidRequestIfRequestIsUnauthorized() {\n    service = getServingServiceGRpcController(true);\n    SecurityContext context = mock(SecurityContext.class);\n    SecurityContextHolder.setContext(context);\n    when(context.getAuthentication()).thenReturn(authentication);\n    doReturn(AuthorizationResult.failed(null))\n        .when(authProvider)\n        .checkAccessToProject(anyString(), any(Authentication.class));\n    service.getOnlineFeatures(validRequest, mockStreamObserver);\n    Mockito.verify(mockStreamObserver).onError(Mockito.any(StatusRuntimeException.class));\n  }", "signature": "void shouldThrowErrorOnValidRequestIfRequestIsUnauthorized()", "full_signature": "@Test public void shouldThrowErrorOnValidRequestIfRequestIsUnauthorized()", "class_method_signature": "ServingServiceGRpcControllerTest.shouldThrowErrorOnValidRequestIfRequestIsUnauthorized()", "testcase": true, "constructor": false, "invocations": ["getServingServiceGRpcController", "mock", "setContext", "thenReturn", "when", "getAuthentication", "checkAccessToProject", "when", "doReturn", "failed", "anyString", "any", "getOnlineFeatures", "onError", "verify", "any"]}, "focal_class": {"identifier": "ServingServiceGRpcController", "superclass": "extends ServingServiceImplBase", "interfaces": "", "fields": [{"original_string": "private static final Logger log =\n      org.slf4j.LoggerFactory.getLogger(ServingServiceGRpcController.class);", "modifier": "private static final", "type": "Logger", "declarator": "log =\n      org.slf4j.LoggerFactory.getLogger(ServingServiceGRpcController.class)", "var_name": "log"}, {"original_string": "private final ServingService servingService;", "modifier": "private final", "type": "ServingService", "declarator": "servingService", "var_name": "servingService"}, {"original_string": "private final String version;", "modifier": "private final", "type": "String", "declarator": "version", "var_name": "version"}, {"original_string": "private final Tracer tracer;", "modifier": "private final", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "private final AuthorizationService authorizationService;", "modifier": "private final", "type": "AuthorizationService", "declarator": "authorizationService", "var_name": "authorizationService"}], "methods": [{"identifier": "ServingServiceGRpcController", "parameters": "(\n      AuthorizationService authorizationService,\n      ServingService servingService,\n      FeastProperties feastProperties,\n      Tracer tracer)", "modifiers": "@Autowired public", "return": "", "signature": " ServingServiceGRpcController(\n      AuthorizationService authorizationService,\n      ServingService servingService,\n      FeastProperties feastProperties,\n      Tracer tracer)", "full_signature": "@Autowired public  ServingServiceGRpcController(\n      AuthorizationService authorizationService,\n      ServingService servingService,\n      FeastProperties feastProperties,\n      Tracer tracer)", "class_method_signature": "ServingServiceGRpcController.ServingServiceGRpcController(\n      AuthorizationService authorizationService,\n      ServingService servingService,\n      FeastProperties feastProperties,\n      Tracer tracer)", "testcase": false, "constructor": true}, {"identifier": "getFeastServingInfo", "parameters": "(\n      GetFeastServingInfoRequest request,\n      StreamObserver<GetFeastServingInfoResponse> responseObserver)", "modifiers": "@Override public", "return": "void", "signature": "void getFeastServingInfo(\n      GetFeastServingInfoRequest request,\n      StreamObserver<GetFeastServingInfoResponse> responseObserver)", "full_signature": "@Override public void getFeastServingInfo(\n      GetFeastServingInfoRequest request,\n      StreamObserver<GetFeastServingInfoResponse> responseObserver)", "class_method_signature": "ServingServiceGRpcController.getFeastServingInfo(\n      GetFeastServingInfoRequest request,\n      StreamObserver<GetFeastServingInfoResponse> responseObserver)", "testcase": false, "constructor": false}, {"identifier": "getOnlineFeatures", "parameters": "(\n      GetOnlineFeaturesRequest request,\n      StreamObserver<GetOnlineFeaturesResponse> responseObserver)", "modifiers": "@Override public", "return": "void", "signature": "void getOnlineFeatures(\n      GetOnlineFeaturesRequest request,\n      StreamObserver<GetOnlineFeaturesResponse> responseObserver)", "full_signature": "@Override public void getOnlineFeatures(\n      GetOnlineFeaturesRequest request,\n      StreamObserver<GetOnlineFeaturesResponse> responseObserver)", "class_method_signature": "ServingServiceGRpcController.getOnlineFeatures(\n      GetOnlineFeaturesRequest request,\n      StreamObserver<GetOnlineFeaturesResponse> responseObserver)", "testcase": false, "constructor": false}, {"identifier": "getBatchFeatures", "parameters": "(\n      GetBatchFeaturesRequest request, StreamObserver<GetBatchFeaturesResponse> responseObserver)", "modifiers": "@Override public", "return": "void", "signature": "void getBatchFeatures(\n      GetBatchFeaturesRequest request, StreamObserver<GetBatchFeaturesResponse> responseObserver)", "full_signature": "@Override public void getBatchFeatures(\n      GetBatchFeaturesRequest request, StreamObserver<GetBatchFeaturesResponse> responseObserver)", "class_method_signature": "ServingServiceGRpcController.getBatchFeatures(\n      GetBatchFeaturesRequest request, StreamObserver<GetBatchFeaturesResponse> responseObserver)", "testcase": false, "constructor": false}, {"identifier": "getJob", "parameters": "(GetJobRequest request, StreamObserver<GetJobResponse> responseObserver)", "modifiers": "@Override public", "return": "void", "signature": "void getJob(GetJobRequest request, StreamObserver<GetJobResponse> responseObserver)", "full_signature": "@Override public void getJob(GetJobRequest request, StreamObserver<GetJobResponse> responseObserver)", "class_method_signature": "ServingServiceGRpcController.getJob(GetJobRequest request, StreamObserver<GetJobResponse> responseObserver)", "testcase": false, "constructor": false}, {"identifier": "checkProjectAccess", "parameters": "(List<FeatureReference> featureList)", "modifiers": "private", "return": "void", "signature": "void checkProjectAccess(List<FeatureReference> featureList)", "full_signature": "private void checkProjectAccess(List<FeatureReference> featureList)", "class_method_signature": "ServingServiceGRpcController.checkProjectAccess(List<FeatureReference> featureList)", "testcase": false, "constructor": false}], "file": "serving/src/main/java/feast/serving/controller/ServingServiceGRpcController.java"}, "focal_method": {"identifier": "getOnlineFeatures", "parameters": "(\n      GetOnlineFeaturesRequest request,\n      StreamObserver<GetOnlineFeaturesResponse> responseObserver)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void getOnlineFeatures(\n      GetOnlineFeaturesRequest request,\n      StreamObserver<GetOnlineFeaturesResponse> responseObserver) {\n    Span span = tracer.buildSpan(\"getOnlineFeatures\").start();\n    try (Scope scope = tracer.scopeManager().activate(span, false)) {\n      // authorize for the project in request object.\n      if (request.getProject() != null && !request.getProject().isEmpty()) {\n        // project set at root level overrides the project set at feature set level\n        this.authorizationService.authorizeRequest(\n            SecurityContextHolder.getContext(), request.getProject());\n      } else {\n        // authorize for projects set in feature list, backward compatibility for\n        // <=v0.5.X\n        this.checkProjectAccess(request.getFeaturesList());\n      }\n      RequestHelper.validateOnlineRequest(request);\n      GetOnlineFeaturesResponse onlineFeatures = servingService.getOnlineFeatures(request);\n      responseObserver.onNext(onlineFeatures);\n      responseObserver.onCompleted();\n    } catch (SpecRetrievalException e) {\n      log.error(\"Failed to retrieve specs in SpecService\", e);\n      responseObserver.onError(\n          Status.NOT_FOUND.withDescription(e.getMessage()).withCause(e).asException());\n    } catch (AccessDeniedException e) {\n      log.info(String.format(\"User prevented from accessing one of the projects in request\"));\n      responseObserver.onError(\n          Status.PERMISSION_DENIED\n              .withDescription(e.getMessage())\n              .withCause(e)\n              .asRuntimeException());\n    } catch (Exception e) {\n      log.warn(\"Failed to get Online Features\", e);\n      responseObserver.onError(e);\n    }\n    span.finish();\n  }", "signature": "void getOnlineFeatures(\n      GetOnlineFeaturesRequest request,\n      StreamObserver<GetOnlineFeaturesResponse> responseObserver)", "full_signature": "@Override public void getOnlineFeatures(\n      GetOnlineFeaturesRequest request,\n      StreamObserver<GetOnlineFeaturesResponse> responseObserver)", "class_method_signature": "ServingServiceGRpcController.getOnlineFeatures(\n      GetOnlineFeaturesRequest request,\n      StreamObserver<GetOnlineFeaturesResponse> responseObserver)", "testcase": false, "constructor": false, "invocations": ["start", "buildSpan", "activate", "scopeManager", "getProject", "isEmpty", "getProject", "authorizeRequest", "getContext", "getProject", "checkProjectAccess", "getFeaturesList", "validateOnlineRequest", "getOnlineFeatures", "onNext", "onCompleted", "error", "onError", "asException", "withCause", "withDescription", "getMessage", "info", "format", "onError", "asRuntimeException", "withCause", "withDescription", "getMessage", "warn", "onError", "finish"]}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}