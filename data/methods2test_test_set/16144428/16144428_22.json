{"test_class": {"identifier": "DirectoryManagerFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "wdtk-util/src/test/java/org/wikidata/wdtk/util/DirectoryManagerFactoryTest.java"}, "test_case": {"identifier": "createDirectoryManagerIoException", "parameters": "()", "modifiers": "@Test(expected = IOException.class) public", "return": "void", "body": "@Test(expected = IOException.class)\n\tpublic void createDirectoryManagerIoException() throws IOException {\n\t\tDirectoryManagerFactory.createDirectoryManager(\n\t\t\t\t\"/nonexisting-directory/123456789/hopefully\", true);\n\t}", "signature": "void createDirectoryManagerIoException()", "full_signature": "@Test(expected = IOException.class) public void createDirectoryManagerIoException()", "class_method_signature": "DirectoryManagerFactoryTest.createDirectoryManagerIoException()", "testcase": true, "constructor": false, "invocations": ["createDirectoryManager"]}, "focal_class": {"identifier": "DirectoryManagerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Class<? extends DirectoryManager> dmClass = DirectoryManagerImpl.class;", "modifier": "static", "type": "Class<? extends DirectoryManager>", "declarator": "dmClass = DirectoryManagerImpl.class", "var_name": "dmClass"}], "methods": [{"identifier": "setDirectoryManagerClass", "parameters": "(\n\t\t\tClass<? extends DirectoryManager> clazz)", "modifiers": "public static", "return": "void", "signature": "void setDirectoryManagerClass(\n\t\t\tClass<? extends DirectoryManager> clazz)", "full_signature": "public static void setDirectoryManagerClass(\n\t\t\tClass<? extends DirectoryManager> clazz)", "class_method_signature": "DirectoryManagerFactory.setDirectoryManagerClass(\n\t\t\tClass<? extends DirectoryManager> clazz)", "testcase": false, "constructor": false}, {"identifier": "createDirectoryManager", "parameters": "(Path path,\n\t\t\tboolean readOnly)", "modifiers": "public static", "return": "DirectoryManager", "signature": "DirectoryManager createDirectoryManager(Path path,\n\t\t\tboolean readOnly)", "full_signature": "public static DirectoryManager createDirectoryManager(Path path,\n\t\t\tboolean readOnly)", "class_method_signature": "DirectoryManagerFactory.createDirectoryManager(Path path,\n\t\t\tboolean readOnly)", "testcase": false, "constructor": false}, {"identifier": "createDirectoryManager", "parameters": "(String directory,\n\t\t\tboolean readOnly)", "modifiers": "public static", "return": "DirectoryManager", "signature": "DirectoryManager createDirectoryManager(String directory,\n\t\t\tboolean readOnly)", "full_signature": "public static DirectoryManager createDirectoryManager(String directory,\n\t\t\tboolean readOnly)", "class_method_signature": "DirectoryManagerFactory.createDirectoryManager(String directory,\n\t\t\tboolean readOnly)", "testcase": false, "constructor": false}], "file": "wdtk-util/src/main/java/org/wikidata/wdtk/util/DirectoryManagerFactory.java"}, "focal_method": {"identifier": "createDirectoryManager", "parameters": "(Path path,\n\t\t\tboolean readOnly)", "modifiers": "public static", "return": "DirectoryManager", "body": "public static DirectoryManager createDirectoryManager(Path path,\n\t\t\tboolean readOnly) throws IOException {\n\t\ttry {\n\t\t\treturn dmClass.getConstructor(Path.class, Boolean.class)\n\t\t\t\t\t.newInstance(path, readOnly);\n\t\t} catch (InstantiationException | IllegalAccessException\n\t\t\t\t| IllegalArgumentException | NoSuchMethodException\n\t\t\t\t| SecurityException e) {\n\t\t\tthrow new RuntimeException(e.toString(), e);\n\t\t} catch (InvocationTargetException e) {\n\t\t\tif (e.getTargetException() instanceof IOException) {\n\t\t\t\tthrow (IOException) e.getTargetException();\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(e.getTargetException().toString(),\n\t\t\t\t\t\te.getTargetException());\n\t\t\t}\n\t\t}\n\t}", "signature": "DirectoryManager createDirectoryManager(Path path,\n\t\t\tboolean readOnly)", "full_signature": "public static DirectoryManager createDirectoryManager(Path path,\n\t\t\tboolean readOnly)", "class_method_signature": "DirectoryManagerFactory.createDirectoryManager(Path path,\n\t\t\tboolean readOnly)", "testcase": false, "constructor": false, "invocations": ["newInstance", "getConstructor", "toString", "getTargetException", "getTargetException", "toString", "getTargetException", "getTargetException"]}, "repository": {"repo_id": 16144428, "url": "https://github.com/Wikidata/Wikidata-Toolkit", "language": "Java", "is_fork": false, "fork_count": 80, "stargazer_count": 264, "size": 11241, "license": "licensed"}}