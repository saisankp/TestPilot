{"test_class": {"identifier": "BloomFilterAltTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Random r = new Random();", "modifier": "static", "type": "Random", "declarator": "r = new Random()", "var_name": "r"}], "file": "ml/streaminer/src/test/java/org/streaminer/stream/membership/BloomFilterAltTest.java"}, "test_case": {"identifier": "testCreateHash_byteArr", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateHash_byteArr() throws UnsupportedEncodingException {\n        System.out.println(\"createHash\");\n        String val = UUID.randomUUID().toString();\n        byte[] data = val.getBytes(\"UTF-8\");\n        int result1 = BloomFilterAlt.createHash(data);\n        int result2 = BloomFilterAlt.createHash(val);\n        assertEquals(result1, result2);\n    }", "signature": "void testCreateHash_byteArr()", "full_signature": "@Test public void testCreateHash_byteArr()", "class_method_signature": "BloomFilterAltTest.testCreateHash_byteArr()", "testcase": true, "constructor": false, "invocations": ["println", "toString", "randomUUID", "getBytes", "createHash", "createHash", "assertEquals"]}, "focal_class": {"identifier": "BloomFilterAlt", "superclass": "", "interfaces": "implements IFilter<E>, Serializable", "fields": [{"original_string": "private BitSet bitset;", "modifier": "private", "type": "BitSet", "declarator": "bitset", "var_name": "bitset"}, {"original_string": "private int bitSetSize;", "modifier": "private", "type": "int", "declarator": "bitSetSize", "var_name": "bitSetSize"}, {"original_string": "private double bitsPerElement;", "modifier": "private", "type": "double", "declarator": "bitsPerElement", "var_name": "bitsPerElement"}, {"original_string": "private int expectedNumberOfFilterElements;", "modifier": "private", "type": "int", "declarator": "expectedNumberOfFilterElements", "var_name": "expectedNumberOfFilterElements"}, {"original_string": "private int numberOfAddedElements;", "modifier": "private", "type": "int", "declarator": "numberOfAddedElements", "var_name": "numberOfAddedElements"}, {"original_string": "private int k;", "modifier": "private", "type": "int", "declarator": "k", "var_name": "k"}, {"original_string": "private int numNonZero;", "modifier": "private", "type": "int", "declarator": "numNonZero", "var_name": "numNonZero"}, {"original_string": "static final Charset charset = Charset.forName(\"UTF-8\");", "modifier": "static final", "type": "Charset", "declarator": "charset = Charset.forName(\"UTF-8\")", "var_name": "charset"}, {"original_string": "static final String hashName = \"MD5\";", "modifier": "static final", "type": "String", "declarator": "hashName = \"MD5\"", "var_name": "hashName"}, {"original_string": "static final MessageDigest digestFunction;", "modifier": "static final", "type": "MessageDigest", "declarator": "digestFunction", "var_name": "digestFunction"}], "methods": [{"identifier": "BloomFilterAlt", "parameters": "(double c, int n, int k)", "modifiers": "public", "return": "", "signature": " BloomFilterAlt(double c, int n, int k)", "full_signature": "public  BloomFilterAlt(double c, int n, int k)", "class_method_signature": "BloomFilterAlt.BloomFilterAlt(double c, int n, int k)", "testcase": false, "constructor": true}, {"identifier": "BloomFilterAlt", "parameters": "(int bitSetSize, int expectedNumberOElements)", "modifiers": "public", "return": "", "signature": " BloomFilterAlt(int bitSetSize, int expectedNumberOElements)", "full_signature": "public  BloomFilterAlt(int bitSetSize, int expectedNumberOElements)", "class_method_signature": "BloomFilterAlt.BloomFilterAlt(int bitSetSize, int expectedNumberOElements)", "testcase": false, "constructor": true}, {"identifier": "BloomFilterAlt", "parameters": "(double falsePositiveProbability, int expectedNumberOfElements)", "modifiers": "public", "return": "", "signature": " BloomFilterAlt(double falsePositiveProbability, int expectedNumberOfElements)", "full_signature": "public  BloomFilterAlt(double falsePositiveProbability, int expectedNumberOfElements)", "class_method_signature": "BloomFilterAlt.BloomFilterAlt(double falsePositiveProbability, int expectedNumberOfElements)", "testcase": false, "constructor": true}, {"identifier": "BloomFilterAlt", "parameters": "(int bitSetSize, int expectedNumberOfFilterElements, int actualNumberOfFilterElements, BitSet filterData)", "modifiers": "public", "return": "", "signature": " BloomFilterAlt(int bitSetSize, int expectedNumberOfFilterElements, int actualNumberOfFilterElements, BitSet filterData)", "full_signature": "public  BloomFilterAlt(int bitSetSize, int expectedNumberOfFilterElements, int actualNumberOfFilterElements, BitSet filterData)", "class_method_signature": "BloomFilterAlt.BloomFilterAlt(int bitSetSize, int expectedNumberOfFilterElements, int actualNumberOfFilterElements, BitSet filterData)", "testcase": false, "constructor": true}, {"identifier": "createHash", "parameters": "(String val, Charset charset)", "modifiers": "public static", "return": "int", "signature": "int createHash(String val, Charset charset)", "full_signature": "public static int createHash(String val, Charset charset)", "class_method_signature": "BloomFilterAlt.createHash(String val, Charset charset)", "testcase": false, "constructor": false}, {"identifier": "createHash", "parameters": "(String val)", "modifiers": "public static", "return": "int", "signature": "int createHash(String val)", "full_signature": "public static int createHash(String val)", "class_method_signature": "BloomFilterAlt.createHash(String val)", "testcase": false, "constructor": false}, {"identifier": "createHash", "parameters": "(byte[] data)", "modifiers": "public static", "return": "int", "signature": "int createHash(byte[] data)", "full_signature": "public static int createHash(byte[] data)", "class_method_signature": "BloomFilterAlt.createHash(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "createHashes", "parameters": "(byte[] data, int hashes)", "modifiers": "public static", "return": "int[]", "signature": "int[] createHashes(byte[] data, int hashes)", "full_signature": "public static int[] createHashes(byte[] data, int hashes)", "class_method_signature": "BloomFilterAlt.createHashes(byte[] data, int hashes)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "BloomFilterAlt.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BloomFilterAlt.hashCode()", "testcase": false, "constructor": false}, {"identifier": "expectedFalsePositiveProbability", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double expectedFalsePositiveProbability()", "full_signature": "public double expectedFalsePositiveProbability()", "class_method_signature": "BloomFilterAlt.expectedFalsePositiveProbability()", "testcase": false, "constructor": false}, {"identifier": "getFalsePositiveProbability", "parameters": "(double numberOfElements)", "modifiers": "public", "return": "double", "signature": "double getFalsePositiveProbability(double numberOfElements)", "full_signature": "public double getFalsePositiveProbability(double numberOfElements)", "class_method_signature": "BloomFilterAlt.getFalsePositiveProbability(double numberOfElements)", "testcase": false, "constructor": false}, {"identifier": "getFalsePositiveProbability", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getFalsePositiveProbability()", "full_signature": "public double getFalsePositiveProbability()", "class_method_signature": "BloomFilterAlt.getFalsePositiveProbability()", "testcase": false, "constructor": false}, {"identifier": "getK", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getK()", "full_signature": "public int getK()", "class_method_signature": "BloomFilterAlt.getK()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "BloomFilterAlt.clear()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(E element)", "modifiers": "public", "return": "void", "signature": "void add(E element)", "full_signature": "public void add(E element)", "class_method_signature": "BloomFilterAlt.add(E element)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(byte[] bytes)", "modifiers": "public", "return": "void", "signature": "void add(byte[] bytes)", "full_signature": "public void add(byte[] bytes)", "class_method_signature": "BloomFilterAlt.add(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "getPercentNonZero", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getPercentNonZero()", "full_signature": "public double getPercentNonZero()", "class_method_signature": "BloomFilterAlt.getPercentNonZero()", "testcase": false, "constructor": false}, {"identifier": "getNumNonZero", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumNonZero()", "full_signature": "public int getNumNonZero()", "class_method_signature": "BloomFilterAlt.getNumNonZero()", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Collection<? extends E> c)", "modifiers": "public", "return": "void", "signature": "void addAll(Collection<? extends E> c)", "full_signature": "public void addAll(Collection<? extends E> c)", "class_method_signature": "BloomFilterAlt.addAll(Collection<? extends E> c)", "testcase": false, "constructor": false}, {"identifier": "membershipTest", "parameters": "(E element)", "modifiers": "public", "return": "boolean", "signature": "boolean membershipTest(E element)", "full_signature": "public boolean membershipTest(E element)", "class_method_signature": "BloomFilterAlt.membershipTest(E element)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(E element)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(E element)", "full_signature": "public boolean contains(E element)", "class_method_signature": "BloomFilterAlt.contains(E element)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(byte[] bytes)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(byte[] bytes)", "full_signature": "public boolean contains(byte[] bytes)", "class_method_signature": "BloomFilterAlt.contains(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "containsAll", "parameters": "(Collection<? extends E> c)", "modifiers": "public", "return": "boolean", "signature": "boolean containsAll(Collection<? extends E> c)", "full_signature": "public boolean containsAll(Collection<? extends E> c)", "class_method_signature": "BloomFilterAlt.containsAll(Collection<? extends E> c)", "testcase": false, "constructor": false}, {"identifier": "getBit", "parameters": "(int bit)", "modifiers": "public", "return": "boolean", "signature": "boolean getBit(int bit)", "full_signature": "public boolean getBit(int bit)", "class_method_signature": "BloomFilterAlt.getBit(int bit)", "testcase": false, "constructor": false}, {"identifier": "setBit", "parameters": "(int bit, boolean value)", "modifiers": "public", "return": "void", "signature": "void setBit(int bit, boolean value)", "full_signature": "public void setBit(int bit, boolean value)", "class_method_signature": "BloomFilterAlt.setBit(int bit, boolean value)", "testcase": false, "constructor": false}, {"identifier": "getBitSet", "parameters": "()", "modifiers": "public", "return": "BitSet", "signature": "BitSet getBitSet()", "full_signature": "public BitSet getBitSet()", "class_method_signature": "BloomFilterAlt.getBitSet()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "BloomFilterAlt.size()", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int count()", "full_signature": "public int count()", "class_method_signature": "BloomFilterAlt.count()", "testcase": false, "constructor": false}, {"identifier": "getExpectedNumberOfElements", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getExpectedNumberOfElements()", "full_signature": "public int getExpectedNumberOfElements()", "class_method_signature": "BloomFilterAlt.getExpectedNumberOfElements()", "testcase": false, "constructor": false}, {"identifier": "getExpectedBitsPerElement", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getExpectedBitsPerElement()", "full_signature": "public double getExpectedBitsPerElement()", "class_method_signature": "BloomFilterAlt.getExpectedBitsPerElement()", "testcase": false, "constructor": false}, {"identifier": "getBitsPerElement", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getBitsPerElement()", "full_signature": "public double getBitsPerElement()", "class_method_signature": "BloomFilterAlt.getBitsPerElement()", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/membership/BloomFilterAlt.java"}, "focal_method": {"identifier": "createHash", "parameters": "(String val, Charset charset)", "modifiers": "public static", "return": "int", "body": "public static int createHash(String val, Charset charset) {\n        return createHash(val.getBytes(charset));\n    }", "signature": "int createHash(String val, Charset charset)", "full_signature": "public static int createHash(String val, Charset charset)", "class_method_signature": "BloomFilterAlt.createHash(String val, Charset charset)", "testcase": false, "constructor": false, "invocations": ["createHash", "getBytes"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}