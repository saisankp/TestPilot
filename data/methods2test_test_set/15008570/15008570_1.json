{"test_class": {"identifier": "BatcherImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(BatcherImplTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(BatcherImplTest.class)", "var_name": "logger"}], "file": "projects/copper-coreengine/src/test/java/org/copperengine/core/batcher/impl/BatcherImplTest.java"}, "test_case": {"identifier": "testSubmitBatchCommand", "parameters": "()", "modifiers": "@SuppressWarnings(\"rawtypes\") @Test public final", "return": "void", "body": "@SuppressWarnings(\"rawtypes\")\n    @Test\n    public final void testSubmitBatchCommand() throws InterruptedException {\n        BatcherImpl batcher = new BatcherImpl(2);\n        batcher.setBatchRunner(new RetryingTxnBatchRunner());\n        batcher.startup();\n        try {\n            for (int i = 0; i < 100; i++) {\n                batcher.submitBatchCommand(new TestBatchCommand(\"Test#\" + i));\n            }\n            Thread.sleep(5000);\n        } finally {\n            batcher.shutdown();\n        }\n    }", "signature": "void testSubmitBatchCommand()", "full_signature": "@SuppressWarnings(\"rawtypes\") @Test public final void testSubmitBatchCommand()", "class_method_signature": "BatcherImplTest.testSubmitBatchCommand()", "testcase": true, "constructor": false, "invocations": ["setBatchRunner", "startup", "submitBatchCommand", "sleep", "shutdown"]}, "focal_class": {"identifier": "BatcherImpl", "superclass": "", "interfaces": "implements Batcher, BatcherMXBean", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(BatcherImpl.class);", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(BatcherImpl.class)", "var_name": "logger"}, {"original_string": "BatcherQueue queue = new BatcherQueue();", "modifier": "", "type": "BatcherQueue", "declarator": "queue = new BatcherQueue()", "var_name": "queue"}, {"original_string": "private RuntimeStatisticsCollector statisticsCollector = new NullRuntimeStatisticsCollector();", "modifier": "private", "type": "RuntimeStatisticsCollector", "declarator": "statisticsCollector = new NullRuntimeStatisticsCollector()", "var_name": "statisticsCollector"}, {"original_string": "private List<WorkerThread> threads = new ArrayList<WorkerThread>();", "modifier": "private", "type": "List<WorkerThread>", "declarator": "threads = new ArrayList<WorkerThread>()", "var_name": "threads"}, {"original_string": "private int numThreads;", "modifier": "private", "type": "int", "declarator": "numThreads", "var_name": "numThreads"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    private BatchRunner batchRunner;", "modifier": "@SuppressWarnings(\"rawtypes\")\n    private", "type": "BatchRunner", "declarator": "batchRunner", "var_name": "batchRunner"}], "methods": [{"identifier": "BatcherImpl", "parameters": "(int numThreads)", "modifiers": "public", "return": "", "signature": " BatcherImpl(int numThreads)", "full_signature": "public  BatcherImpl(int numThreads)", "class_method_signature": "BatcherImpl.BatcherImpl(int numThreads)", "testcase": false, "constructor": true}, {"identifier": "setBatchRunner", "parameters": "(BatchRunner batchRunner)", "modifiers": "@SuppressWarnings(\"rawtypes\") public", "return": "void", "signature": "void setBatchRunner(BatchRunner batchRunner)", "full_signature": "@SuppressWarnings(\"rawtypes\") public void setBatchRunner(BatchRunner batchRunner)", "class_method_signature": "BatcherImpl.setBatchRunner(BatchRunner batchRunner)", "testcase": false, "constructor": false}, {"identifier": "getNumThreads", "parameters": "()", "modifiers": "public synchronized", "return": "int", "signature": "int getNumThreads()", "full_signature": "public synchronized int getNumThreads()", "class_method_signature": "BatcherImpl.getNumThreads()", "testcase": false, "constructor": false}, {"identifier": "setNumThreads", "parameters": "(int numThreads)", "modifiers": "public synchronized", "return": "void", "signature": "void setNumThreads(int numThreads)", "full_signature": "public synchronized void setNumThreads(int numThreads)", "class_method_signature": "BatcherImpl.setNumThreads(int numThreads)", "testcase": false, "constructor": false}, {"identifier": "setStatisticsCollector", "parameters": "(RuntimeStatisticsCollector statisticsCollector)", "modifiers": "public", "return": "void", "signature": "void setStatisticsCollector(RuntimeStatisticsCollector statisticsCollector)", "full_signature": "public void setStatisticsCollector(RuntimeStatisticsCollector statisticsCollector)", "class_method_signature": "BatcherImpl.setStatisticsCollector(RuntimeStatisticsCollector statisticsCollector)", "testcase": false, "constructor": false}, {"identifier": "adjustNumberOfThreads", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void adjustNumberOfThreads()", "full_signature": "private synchronized void adjustNumberOfThreads()", "class_method_signature": "BatcherImpl.adjustNumberOfThreads()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void start()", "full_signature": "private synchronized void start()", "class_method_signature": "BatcherImpl.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void stop()", "full_signature": "private synchronized void stop()", "class_method_signature": "BatcherImpl.stop()", "testcase": false, "constructor": false}, {"identifier": "submitBatchCommand", "parameters": "(BatchCommand<E, T> cmd)", "modifiers": "public", "return": "void", "signature": "void submitBatchCommand(BatchCommand<E, T> cmd)", "full_signature": "public void submitBatchCommand(BatchCommand<E, T> cmd)", "class_method_signature": "BatcherImpl.submitBatchCommand(BatchCommand<E, T> cmd)", "testcase": false, "constructor": false}, {"identifier": "startup", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startup()", "full_signature": "public void startup()", "class_method_signature": "BatcherImpl.startup()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "BatcherImpl.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "BatcherImpl.getDescription()", "testcase": false, "constructor": false}, {"identifier": "getQueueSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getQueueSize()", "full_signature": "public int getQueueSize()", "class_method_signature": "BatcherImpl.getQueueSize()", "testcase": false, "constructor": false}], "file": "projects/copper-coreengine/src/main/java/org/copperengine/core/batcher/impl/BatcherImpl.java"}, "focal_method": {"identifier": "submitBatchCommand", "parameters": "(BatchCommand<E, T> cmd)", "modifiers": "public", "return": "void", "body": "public <E extends BatchExecutor<E, T>, T extends BatchCommand<E, T>> void submitBatchCommand(BatchCommand<E, T> cmd) {\n        if (queue.state != State.STARTED)\n            throw new IllegalStateException(\"Batcher is shutting down\");\n        queue.submitBatchCommand(cmd);\n    }", "signature": "void submitBatchCommand(BatchCommand<E, T> cmd)", "full_signature": "public void submitBatchCommand(BatchCommand<E, T> cmd)", "class_method_signature": "BatcherImpl.submitBatchCommand(BatchCommand<E, T> cmd)", "testcase": false, "constructor": false, "invocations": ["submitBatchCommand"]}, "repository": {"repo_id": 15008570, "url": "https://github.com/copper-engine/copper-engine", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 169, "size": 122984, "license": "licensed"}}