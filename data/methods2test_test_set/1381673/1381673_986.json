{"test_class": {"identifier": "RBTreeTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-core/src/test/java/org/drools/core/util/RBTreeTest.java"}, "test_case": {"identifier": "testRange", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRange() {\n        RBTree<Integer, String> tree = new RBTree<Integer, String>();\n        tree.insert( 10, \"\" + 10 );\n        tree.insert( 20, \"\" + 20 );\n        tree.insert( 25, \"\" + 25 );\n        tree.insert( 15, \"\" + 15 );\n        tree.insert( 5, \"\" + 5 );\n\n        FastIterator fastIterator = tree.range(2, true, 15, false);\n        Node<Integer, String> node = (Node<Integer, String>)fastIterator.next(null);\n        assertEquals(5, (int)node.key);\n        node = (Node<Integer, String>)fastIterator.next(node);\n        assertEquals(10, (int)node.key);\n        node = (Node<Integer, String>)fastIterator.next(node);\n        assertNull(node);\n\n        fastIterator = tree.range(2, true, 5, false);\n        node = (Node<Integer, String>)fastIterator.next(null);\n        assertNull(node);\n\n        fastIterator = tree.range(5, false, 35, false);\n        node = (Node<Integer, String>)fastIterator.next(null);\n        assertEquals(10, (int)node.key);\n        node = (Node<Integer, String>)fastIterator.next(node);\n        assertEquals(15, (int)node.key);\n        node = (Node<Integer, String>)fastIterator.next(node);\n        assertEquals(20, (int)node.key);\n        node = (Node<Integer, String>)fastIterator.next(node);\n        assertEquals(25, (int)node.key);\n        node = (Node<Integer, String>)fastIterator.next(node);\n        assertNull(node);\n    }", "signature": "void testRange()", "full_signature": "@Test public void testRange()", "class_method_signature": "RBTreeTest.testRange()", "testcase": true, "constructor": false, "invocations": ["insert", "insert", "insert", "insert", "insert", "range", "next", "assertEquals", "next", "assertEquals", "next", "assertNull", "range", "next", "assertNull", "range", "next", "assertEquals", "next", "assertEquals", "next", "assertEquals", "next", "assertEquals", "next", "assertNull"]}, "focal_class": {"identifier": "RBTree", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "public static final boolean VERIFY_RBTREE = false;", "modifier": "public static final", "type": "boolean", "declarator": "VERIFY_RBTREE = false", "var_name": "VERIFY_RBTREE"}, {"original_string": "private static final int    INDENT_STEP   = 4;", "modifier": "private static final", "type": "int", "declarator": "INDENT_STEP   = 4", "var_name": "INDENT_STEP"}, {"original_string": "public Node<K, V>           root;", "modifier": "public", "type": "Node<K, V>", "declarator": "root", "var_name": "root"}], "methods": [{"identifier": "RBTree", "parameters": "()", "modifiers": "public", "return": "", "signature": " RBTree()", "full_signature": "public  RBTree()", "class_method_signature": "RBTree.RBTree()", "testcase": false, "constructor": true}, {"identifier": "verifyProperties", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void verifyProperties()", "full_signature": "public void verifyProperties()", "class_method_signature": "RBTree.verifyProperties()", "testcase": false, "constructor": false}, {"identifier": "verifyProperty1", "parameters": "(Node< ? , ? > n)", "modifiers": "private static", "return": "void", "signature": "void verifyProperty1(Node< ? , ? > n)", "full_signature": "private static void verifyProperty1(Node< ? , ? > n)", "class_method_signature": "RBTree.verifyProperty1(Node< ? , ? > n)", "testcase": false, "constructor": false}, {"identifier": "verifyProperty2", "parameters": "(Node< ? , ? > root)", "modifiers": "private static", "return": "void", "signature": "void verifyProperty2(Node< ? , ? > root)", "full_signature": "private static void verifyProperty2(Node< ? , ? > root)", "class_method_signature": "RBTree.verifyProperty2(Node< ? , ? > root)", "testcase": false, "constructor": false}, {"identifier": "nodeColor", "parameters": "(Node< ? , ? > n)", "modifiers": "private static", "return": "Color", "signature": "Color nodeColor(Node< ? , ? > n)", "full_signature": "private static Color nodeColor(Node< ? , ? > n)", "class_method_signature": "RBTree.nodeColor(Node< ? , ? > n)", "testcase": false, "constructor": false}, {"identifier": "verifyProperty4", "parameters": "(Node< ? , ? > n)", "modifiers": "private static", "return": "void", "signature": "void verifyProperty4(Node< ? , ? > n)", "full_signature": "private static void verifyProperty4(Node< ? , ? > n)", "class_method_signature": "RBTree.verifyProperty4(Node< ? , ? > n)", "testcase": false, "constructor": false}, {"identifier": "verifyProperty5", "parameters": "(Node< ? , ? > root)", "modifiers": "private static", "return": "void", "signature": "void verifyProperty5(Node< ? , ? > root)", "full_signature": "private static void verifyProperty5(Node< ? , ? > root)", "class_method_signature": "RBTree.verifyProperty5(Node< ? , ? > root)", "testcase": false, "constructor": false}, {"identifier": "verifyProperty5Helper", "parameters": "(Node< ? , ? > n,\n                                             int blackCount,\n                                             int pathBlackCount)", "modifiers": "private static", "return": "int", "signature": "int verifyProperty5Helper(Node< ? , ? > n,\n                                             int blackCount,\n                                             int pathBlackCount)", "full_signature": "private static int verifyProperty5Helper(Node< ? , ? > n,\n                                             int blackCount,\n                                             int pathBlackCount)", "class_method_signature": "RBTree.verifyProperty5Helper(Node< ? , ? > n,\n                                             int blackCount,\n                                             int pathBlackCount)", "testcase": false, "constructor": false}, {"identifier": "lookupNode", "parameters": "(K key)", "modifiers": "private", "return": "Node<K, V>", "signature": "Node<K, V> lookupNode(K key)", "full_signature": "private Node<K, V> lookupNode(K key)", "class_method_signature": "RBTree.lookupNode(K key)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "RBTree.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "()", "modifiers": "public", "return": "Node<K, V>", "signature": "Node<K, V> first()", "full_signature": "public Node<K, V> first()", "class_method_signature": "RBTree.first()", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "()", "modifiers": "public", "return": "Node<K, V>", "signature": "Node<K, V> last()", "full_signature": "public Node<K, V> last()", "class_method_signature": "RBTree.last()", "testcase": false, "constructor": false}, {"identifier": "fastIterator", "parameters": "()", "modifiers": "public", "return": "FastIterator", "signature": "FastIterator fastIterator()", "full_signature": "public FastIterator fastIterator()", "class_method_signature": "RBTree.fastIterator()", "testcase": false, "constructor": false}, {"identifier": "range", "parameters": "(K lowerBound,\n                              boolean testLowerEqual,\n                              K upperBound,\n                              boolean testUpperEqual)", "modifiers": "public", "return": "FastIterator", "signature": "FastIterator range(K lowerBound,\n                              boolean testLowerEqual,\n                              K upperBound,\n                              boolean testUpperEqual)", "full_signature": "public FastIterator range(K lowerBound,\n                              boolean testLowerEqual,\n                              K upperBound,\n                              boolean testUpperEqual)", "class_method_signature": "RBTree.range(K lowerBound,\n                              boolean testLowerEqual,\n                              K upperBound,\n                              boolean testUpperEqual)", "testcase": false, "constructor": false}, {"identifier": "findNearestNode", "parameters": "(K key, boolean allowEqual, Boundary boundary)", "modifiers": "public", "return": "Node<K, V>", "signature": "Node<K, V> findNearestNode(K key, boolean allowEqual, Boundary boundary)", "full_signature": "public Node<K, V> findNearestNode(K key, boolean allowEqual, Boundary boundary)", "class_method_signature": "RBTree.findNearestNode(K key, boolean allowEqual, Boundary boundary)", "testcase": false, "constructor": false}, {"identifier": "acceptNode", "parameters": "(int compResult, Boundary boundary)", "modifiers": "private", "return": "boolean", "signature": "boolean acceptNode(int compResult, Boundary boundary)", "full_signature": "private boolean acceptNode(int compResult, Boundary boundary)", "class_method_signature": "RBTree.acceptNode(int compResult, Boundary boundary)", "testcase": false, "constructor": false}, {"identifier": "lookup", "parameters": "(K key)", "modifiers": "public", "return": "V", "signature": "V lookup(K key)", "full_signature": "public V lookup(K key)", "class_method_signature": "RBTree.lookup(K key)", "testcase": false, "constructor": false}, {"identifier": "rotateLeft", "parameters": "(Node<K, V> n)", "modifiers": "private", "return": "void", "signature": "void rotateLeft(Node<K, V> n)", "full_signature": "private void rotateLeft(Node<K, V> n)", "class_method_signature": "RBTree.rotateLeft(Node<K, V> n)", "testcase": false, "constructor": false}, {"identifier": "rotateRight", "parameters": "(Node<K, V> n)", "modifiers": "private", "return": "void", "signature": "void rotateRight(Node<K, V> n)", "full_signature": "private void rotateRight(Node<K, V> n)", "class_method_signature": "RBTree.rotateRight(Node<K, V> n)", "testcase": false, "constructor": false}, {"identifier": "replaceNode", "parameters": "(Node<K, V> oldn,\n                             Node<K, V> newn)", "modifiers": "private", "return": "void", "signature": "void replaceNode(Node<K, V> oldn,\n                             Node<K, V> newn)", "full_signature": "private void replaceNode(Node<K, V> oldn,\n                             Node<K, V> newn)", "class_method_signature": "RBTree.replaceNode(Node<K, V> oldn,\n                             Node<K, V> newn)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(K key,\n                       V value)", "modifiers": "public", "return": "void", "signature": "void insert(K key,\n                       V value)", "full_signature": "public void insert(K key,\n                       V value)", "class_method_signature": "RBTree.insert(K key,\n                       V value)", "testcase": false, "constructor": false}, {"identifier": "insertCase1", "parameters": "(Node<K, V> n)", "modifiers": "private", "return": "void", "signature": "void insertCase1(Node<K, V> n)", "full_signature": "private void insertCase1(Node<K, V> n)", "class_method_signature": "RBTree.insertCase1(Node<K, V> n)", "testcase": false, "constructor": false}, {"identifier": "insertCase2", "parameters": "(Node<K, V> n)", "modifiers": "private", "return": "void", "signature": "void insertCase2(Node<K, V> n)", "full_signature": "private void insertCase2(Node<K, V> n)", "class_method_signature": "RBTree.insertCase2(Node<K, V> n)", "testcase": false, "constructor": false}, {"identifier": "insertCase3", "parameters": "(Node<K, V> n)", "modifiers": "", "return": "void", "signature": "void insertCase3(Node<K, V> n)", "full_signature": " void insertCase3(Node<K, V> n)", "class_method_signature": "RBTree.insertCase3(Node<K, V> n)", "testcase": false, "constructor": false}, {"identifier": "insertCase4", "parameters": "(Node<K, V> n)", "modifiers": "", "return": "void", "signature": "void insertCase4(Node<K, V> n)", "full_signature": " void insertCase4(Node<K, V> n)", "class_method_signature": "RBTree.insertCase4(Node<K, V> n)", "testcase": false, "constructor": false}, {"identifier": "insertCase5", "parameters": "(Node<K, V> n)", "modifiers": "", "return": "void", "signature": "void insertCase5(Node<K, V> n)", "full_signature": " void insertCase5(Node<K, V> n)", "class_method_signature": "RBTree.insertCase5(Node<K, V> n)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(K key)", "modifiers": "public", "return": "void", "signature": "void delete(K key)", "full_signature": "public void delete(K key)", "class_method_signature": "RBTree.delete(K key)", "testcase": false, "constructor": false}, {"identifier": "maximumNode", "parameters": "(Node<K, V> n)", "modifiers": "private static", "return": "Node<K, V>", "signature": "Node<K, V> maximumNode(Node<K, V> n)", "full_signature": "private static Node<K, V> maximumNode(Node<K, V> n)", "class_method_signature": "RBTree.maximumNode(Node<K, V> n)", "testcase": false, "constructor": false}, {"identifier": "deleteCase1", "parameters": "(Node<K, V> n)", "modifiers": "private", "return": "void", "signature": "void deleteCase1(Node<K, V> n)", "full_signature": "private void deleteCase1(Node<K, V> n)", "class_method_signature": "RBTree.deleteCase1(Node<K, V> n)", "testcase": false, "constructor": false}, {"identifier": "deleteCase2", "parameters": "(Node<K, V> n)", "modifiers": "private", "return": "void", "signature": "void deleteCase2(Node<K, V> n)", "full_signature": "private void deleteCase2(Node<K, V> n)", "class_method_signature": "RBTree.deleteCase2(Node<K, V> n)", "testcase": false, "constructor": false}, {"identifier": "deleteCase3", "parameters": "(Node<K, V> n)", "modifiers": "private", "return": "void", "signature": "void deleteCase3(Node<K, V> n)", "full_signature": "private void deleteCase3(Node<K, V> n)", "class_method_signature": "RBTree.deleteCase3(Node<K, V> n)", "testcase": false, "constructor": false}, {"identifier": "deleteCase4", "parameters": "(Node<K, V> n)", "modifiers": "private", "return": "void", "signature": "void deleteCase4(Node<K, V> n)", "full_signature": "private void deleteCase4(Node<K, V> n)", "class_method_signature": "RBTree.deleteCase4(Node<K, V> n)", "testcase": false, "constructor": false}, {"identifier": "deleteCase5", "parameters": "(Node<K, V> n)", "modifiers": "private", "return": "void", "signature": "void deleteCase5(Node<K, V> n)", "full_signature": "private void deleteCase5(Node<K, V> n)", "class_method_signature": "RBTree.deleteCase5(Node<K, V> n)", "testcase": false, "constructor": false}, {"identifier": "deleteCase6", "parameters": "(Node<K, V> n)", "modifiers": "private", "return": "void", "signature": "void deleteCase6(Node<K, V> n)", "full_signature": "private void deleteCase6(Node<K, V> n)", "class_method_signature": "RBTree.deleteCase6(Node<K, V> n)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void print()", "full_signature": "public void print()", "class_method_signature": "RBTree.print()", "testcase": false, "constructor": false}, {"identifier": "printHelper", "parameters": "(Node< ? , ? > n,\n                                    int indent)", "modifiers": "private static", "return": "void", "signature": "void printHelper(Node< ? , ? > n,\n                                    int indent)", "full_signature": "private static void printHelper(Node< ? , ? > n,\n                                    int indent)", "class_method_signature": "RBTree.printHelper(Node< ? , ? > n,\n                                    int indent)", "testcase": false, "constructor": false}], "file": "drools-core/src/main/java/org/drools/core/util/RBTree.java"}, "focal_method": {"identifier": "range", "parameters": "(K lowerBound,\n                              boolean testLowerEqual,\n                              K upperBound,\n                              boolean testUpperEqual)", "modifiers": "public", "return": "FastIterator", "body": "public FastIterator range(K lowerBound,\n                              boolean testLowerEqual,\n                              K upperBound,\n                              boolean testUpperEqual) {\n        Node<K, V> lowerNearest = findNearestNode( lowerBound, testLowerEqual, Boundary.LOWER );\n        Node<K, V> upperNearest = findNearestNode( upperBound, testUpperEqual, Boundary.UPPER );\n\n        if ( lowerNearest == null || upperNearest == null ) {\n            return FastIterator.EMPTY;\n        }\n\n        if ( lowerNearest.key.compareTo( upperNearest.key  ) > 0 ) {\n            upperNearest = lowerNearest;\n        }\n\n        return new RBTreeFastIterator( lowerNearest, upperNearest );\n    }", "signature": "FastIterator range(K lowerBound,\n                              boolean testLowerEqual,\n                              K upperBound,\n                              boolean testUpperEqual)", "full_signature": "public FastIterator range(K lowerBound,\n                              boolean testLowerEqual,\n                              K upperBound,\n                              boolean testUpperEqual)", "class_method_signature": "RBTree.range(K lowerBound,\n                              boolean testLowerEqual,\n                              K upperBound,\n                              boolean testUpperEqual)", "testcase": false, "constructor": false, "invocations": ["findNearestNode", "findNearestNode", "compareTo"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}