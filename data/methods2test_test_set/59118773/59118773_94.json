{"test_class": {"identifier": "FundingByLocationControllerTest", "superclass": "extends AbstractEndPointControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private FundingByLocationController fundingByLocationController;", "modifier": "@Autowired\n    private", "type": "FundingByLocationController", "declarator": "fundingByLocationController", "var_name": "fundingByLocationController"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/FundingByLocationControllerTest.java"}, "test_case": {"identifier": "fundingByTenderDeliveryLocation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fundingByTenderDeliveryLocation() throws Exception {\n        final List<Document> fundingByTenderDeliveryLocation = fundingByLocationController\n                .fundingByTenderDeliveryLocation(new YearFilterPagingRequest());\n\n        final Document first = fundingByTenderDeliveryLocation.get(0);\n        int year = (int) first.get(FundingByLocationController.Keys.YEAR);\n        BasicDBObject deliveryLocation = (BasicDBObject) first\n                .get(FundingByLocationController.Keys.ITEMS_DELIVERY_LOCATION);\n        BasicDBObject geometry = (BasicDBObject) deliveryLocation.get(\"geometry\");\n        String geometryType = (String) geometry.get(\"type\");\n        List<Double> coordinates = (List<Double>) geometry.get(\"coordinates\");\n        double totalTendersAmount = (double) first.get(FundingByLocationController.Keys.TOTAL_TENDERS_AMOUNT);\n        int tendersCount = (int) first.get(FundingByLocationController.Keys.TENDERS_COUNT);\n\n        Assert.assertEquals(2015, year);\n        Assert.assertEquals(\"Point\", geometryType);\n        Assert.assertEquals(new ArrayList<>(Arrays.asList(45.9432, 24.9668)), coordinates);\n        Assert.assertEquals(9000.0, totalTendersAmount, 0);\n        Assert.assertEquals(1, tendersCount);\n    }", "signature": "void fundingByTenderDeliveryLocation()", "full_signature": "@Test public void fundingByTenderDeliveryLocation()", "class_method_signature": "FundingByLocationControllerTest.fundingByTenderDeliveryLocation()", "testcase": true, "constructor": false, "invocations": ["fundingByTenderDeliveryLocation", "get", "get", "get", "get", "get", "get", "get", "get", "assertEquals", "assertEquals", "assertEquals", "asList", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "FundingByLocationController", "superclass": "extends GenericOCDSController", "interfaces": "", "fields": [], "methods": [{"identifier": "fundingByTenderDeliveryLocation", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Total estimated funding (tender.value) grouped by \" + \"tender.items.deliveryLocation and also grouped by year.\" + \" The endpoint also returns the count of tenders for each location. \" + \"It responds to all filters. The year is calculated based on tender.tenderPeriod.startDate\") @RequestMapping(value = \"/api/fundingByTenderDeliveryLocation\", method = { RequestMethod.POST, RequestMethod.GET }, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> fundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Total estimated funding (tender.value) grouped by \" + \"tender.items.deliveryLocation and also grouped by year.\" + \" The endpoint also returns the count of tenders for each location. \" + \"It responds to all filters. The year is calculated based on tender.tenderPeriod.startDate\") @RequestMapping(value = \"/api/fundingByTenderDeliveryLocation\", method = { RequestMethod.POST, RequestMethod.GET }, produces = \"application/json\") public List<Document> fundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "FundingByLocationController.fundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "qualityFundingByTenderDeliveryLocation", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(\"Calculates percentage of releases with tender with at least one specified delivery location,\" + \" that is the array tender.items.deliveryLocation has to have items.\" + \"Filters out stub tenders, therefore tender.tenderPeriod.startDate has to exist.\") @RequestMapping(value = \"/api/qualityFundingByTenderDeliveryLocation\", method = { RequestMethod.POST, RequestMethod.GET }, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> qualityFundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(\"Calculates percentage of releases with tender with at least one specified delivery location,\" + \" that is the array tender.items.deliveryLocation has to have items.\" + \"Filters out stub tenders, therefore tender.tenderPeriod.startDate has to exist.\") @RequestMapping(value = \"/api/qualityFundingByTenderDeliveryLocation\", method = { RequestMethod.POST, RequestMethod.GET }, produces = \"application/json\") public List<Document> qualityFundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "FundingByLocationController.qualityFundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/FundingByLocationController.java"}, "focal_method": {"identifier": "fundingByTenderDeliveryLocation", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Total estimated funding (tender.value) grouped by \" + \"tender.items.deliveryLocation and also grouped by year.\" + \" The endpoint also returns the count of tenders for each location. \" + \"It responds to all filters. The year is calculated based on tender.tenderPeriod.startDate\") @RequestMapping(value = \"/api/fundingByTenderDeliveryLocation\", method = { RequestMethod.POST, RequestMethod.GET }, produces = \"application/json\") public", "return": "List<Document>", "body": "@ApiOperation(value = \"Total estimated funding (tender.value) grouped by \"\n            + \"tender.items.deliveryLocation and also grouped by year.\"\n            + \" The endpoint also returns the count of tenders for each location. \"\n            + \"It responds to all filters. The year is calculated based on tender.tenderPeriod.startDate\")\n    @RequestMapping(value = \"/api/fundingByTenderDeliveryLocation\", method = { RequestMethod.POST,\n            RequestMethod.GET }, produces = \"application/json\")\n    public List<Document> fundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter) {\n\n        DBObject project = new BasicDBObject();\n        project.put(\"tender.items.deliveryLocation\", 1);\n        project.put(MongoConstants.FieldNames.TENDER_VALUE_AMOUNT, 1);\n        addYearlyMonthlyProjection(filter, project, ref(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE));\n\n        Aggregation agg = newAggregation(\n                match(where(\"tender\").exists(true).and(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE).exists(true)\n                        .andOperator(getYearDefaultFilterCriteria(filter,\n                                MongoConstants.FieldNames.TENDER_PERIOD_START_DATE))),\n                new CustomProjectionOperation(project), unwind(\"$tender.items\"),\n                unwind(\"$tender.items.deliveryLocation\"),\n                project(getYearlyMonthlyGroupingFields(filter)).and(MongoConstants.FieldNames.TENDER_VALUE_AMOUNT)\n                        .as(\"tenderAmount\")\n                        .and(\"tender.items.deliveryLocation\").as(\"deliveryLocation\"),\n                match(where(\"deliveryLocation.geometry.coordinates.0\").exists(true)),\n                group(getYearlyMonthlyGroupingFields(filter, Keys.ITEMS_DELIVERY_LOCATION))\n                        .sum(\"tenderAmount\").as(Keys.TOTAL_TENDERS_AMOUNT).count().as(Keys.TENDERS_COUNT),\n                getSortByYearMonth(filter)\n        // ,skip(filter.getSkip()), limit(filter.getPageSize())\n        );\n\n        return releaseAgg(agg);\n    }", "signature": "List<Document> fundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Total estimated funding (tender.value) grouped by \" + \"tender.items.deliveryLocation and also grouped by year.\" + \" The endpoint also returns the count of tenders for each location. \" + \"It responds to all filters. The year is calculated based on tender.tenderPeriod.startDate\") @RequestMapping(value = \"/api/fundingByTenderDeliveryLocation\", method = { RequestMethod.POST, RequestMethod.GET }, produces = \"application/json\") public List<Document> fundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "FundingByLocationController.fundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false, "invocations": ["put", "put", "addYearlyMonthlyProjection", "ref", "newAggregation", "match", "andOperator", "exists", "and", "exists", "where", "getYearDefaultFilterCriteria", "unwind", "unwind", "as", "and", "as", "and", "project", "getYearlyMonthlyGroupingFields", "match", "exists", "where", "as", "count", "as", "sum", "group", "getYearlyMonthlyGroupingFields", "getSortByYearMonth", "releaseAgg"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}