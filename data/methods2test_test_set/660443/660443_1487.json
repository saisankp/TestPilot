{"test_class": {"identifier": "AcidicGroupCountDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/AcidicGroupCountDescriptorTest.java"}, "test_case": {"identifier": "testCID", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCID() throws Exception {\n        IAtomContainer mol = SilentChemObjectBuilder.getInstance().newAtomContainer();\n        IAtom a1 = mol.getBuilder().newInstance(IAtom.class, \"S\");\n        a1.setFormalCharge(0);\n        a1.setPoint2d(new Point2d(9.4651, 0.25));\n        mol.addAtom(a1);\n        IAtom a2 = mol.getBuilder().newInstance(IAtom.class, \"O\");\n        a2.setFormalCharge(0);\n        a2.setPoint2d(new Point2d(6.001, 1.25));\n        mol.addAtom(a2);\n        IAtom a3 = mol.getBuilder().newInstance(IAtom.class, \"O\");\n        a3.setFormalCharge(0);\n        a3.setPoint2d(new Point2d(5.135, -1.25));\n        mol.addAtom(a3);\n        IAtom a4 = mol.getBuilder().newInstance(IAtom.class, \"O\");\n        a4.setFormalCharge(0);\n        a4.setPoint2d(new Point2d(6.8671, -1.25));\n        mol.addAtom(a4);\n        IAtom a5 = mol.getBuilder().newInstance(IAtom.class, \"O\");\n        a5.setFormalCharge(0);\n        a5.setPoint2d(new Point2d(8.5991, -0.25));\n        mol.addAtom(a5);\n        IAtom a6 = mol.getBuilder().newInstance(IAtom.class, \"O\");\n        a6.setFormalCharge(0);\n        a6.setPoint2d(new Point2d(4.269, 1.25));\n        mol.addAtom(a6);\n        IAtom a7 = mol.getBuilder().newInstance(IAtom.class, \"O\");\n        a7.setFormalCharge(0);\n        a7.setPoint2d(new Point2d(2.5369, 0.25));\n        mol.addAtom(a7);\n        IAtom a8 = mol.getBuilder().newInstance(IAtom.class, \"O\");\n        a8.setFormalCharge(0);\n        a8.setPoint2d(new Point2d(3.403, -1.25));\n        mol.addAtom(a8);\n        IAtom a9 = mol.getBuilder().newInstance(IAtom.class, \"O\");\n        a9.setFormalCharge(0);\n        a9.setPoint2d(new Point2d(10.3312, 0.75));\n        mol.addAtom(a9);\n        IAtom a10 = mol.getBuilder().newInstance(IAtom.class, \"O\");\n        a10.setFormalCharge(0);\n        a10.setPoint2d(new Point2d(9.9651, -0.616));\n        mol.addAtom(a10);\n        IAtom a11 = mol.getBuilder().newInstance(IAtom.class, \"O\");\n        a11.setFormalCharge(0);\n        a11.setPoint2d(new Point2d(8.9651, 1.116));\n        mol.addAtom(a11);\n        IAtom a12 = mol.getBuilder().newInstance(IAtom.class, \"C\");\n        a12.setFormalCharge(0);\n        a12.setPoint2d(new Point2d(6.001, 0.25));\n        mol.addAtom(a12);\n        IAtom a13 = mol.getBuilder().newInstance(IAtom.class, \"C\");\n        a13.setFormalCharge(0);\n        a13.setPoint2d(new Point2d(5.135, -0.25));\n        mol.addAtom(a13);\n        IAtom a14 = mol.getBuilder().newInstance(IAtom.class, \"C\");\n        a14.setFormalCharge(0);\n        a14.setPoint2d(new Point2d(6.8671, -0.25));\n        mol.addAtom(a14);\n        IAtom a15 = mol.getBuilder().newInstance(IAtom.class, \"C\");\n        a15.setFormalCharge(0);\n        a15.setPoint2d(new Point2d(4.269, 0.25));\n        mol.addAtom(a15);\n        IAtom a16 = mol.getBuilder().newInstance(IAtom.class, \"C\");\n        a16.setFormalCharge(0);\n        a16.setPoint2d(new Point2d(7.7331, 0.25));\n        mol.addAtom(a16);\n        IAtom a17 = mol.getBuilder().newInstance(IAtom.class, \"C\");\n        a17.setFormalCharge(0);\n        a17.setPoint2d(new Point2d(3.403, -0.25));\n        mol.addAtom(a17);\n        IAtom a18 = mol.getBuilder().newInstance(IAtom.class, \"H\");\n        a18.setFormalCharge(0);\n        a18.setPoint2d(new Point2d(6.538, 0.56));\n        mol.addAtom(a18);\n        IAtom a19 = mol.getBuilder().newInstance(IAtom.class, \"H\");\n        a19.setFormalCharge(0);\n        a19.setPoint2d(new Point2d(5.672, -0.56));\n        mol.addAtom(a19);\n        IAtom a20 = mol.getBuilder().newInstance(IAtom.class, \"H\");\n        a20.setFormalCharge(0);\n        a20.setPoint2d(new Point2d(6.3301, -0.56));\n        mol.addAtom(a20);\n        IAtom a21 = mol.getBuilder().newInstance(IAtom.class, \"H\");\n        a21.setFormalCharge(0);\n        a21.setPoint2d(new Point2d(4.8059, 0.56));\n        mol.addAtom(a21);\n        IAtom a22 = mol.getBuilder().newInstance(IAtom.class, \"H\");\n        a22.setFormalCharge(0);\n        a22.setPoint2d(new Point2d(8.1316, 0.7249));\n        mol.addAtom(a22);\n        IAtom a23 = mol.getBuilder().newInstance(IAtom.class, \"H\");\n        a23.setFormalCharge(0);\n        a23.setPoint2d(new Point2d(7.3346, 0.7249));\n        mol.addAtom(a23);\n        IAtom a24 = mol.getBuilder().newInstance(IAtom.class, \"H\");\n        a24.setFormalCharge(0);\n        a24.setPoint2d(new Point2d(6.538, 1.56));\n        mol.addAtom(a24);\n        IAtom a25 = mol.getBuilder().newInstance(IAtom.class, \"H\");\n        a25.setFormalCharge(0);\n        a25.setPoint2d(new Point2d(4.5981, -1.56));\n        mol.addAtom(a25);\n        IAtom a26 = mol.getBuilder().newInstance(IAtom.class, \"H\");\n        a26.setFormalCharge(0);\n        a26.setPoint2d(new Point2d(7.404, -1.56));\n        mol.addAtom(a26);\n        IAtom a27 = mol.getBuilder().newInstance(IAtom.class, \"H\");\n        a27.setFormalCharge(0);\n        a27.setPoint2d(new Point2d(3.732, 1.56));\n        mol.addAtom(a27);\n        IAtom a28 = mol.getBuilder().newInstance(IAtom.class, \"H\");\n        a28.setFormalCharge(0);\n        a28.setPoint2d(new Point2d(2.0, -0.06));\n        mol.addAtom(a28);\n        IAtom a29 = mol.getBuilder().newInstance(IAtom.class, \"H\");\n        a29.setFormalCharge(0);\n        a29.setPoint2d(new Point2d(10.8681, 0.44));\n        mol.addAtom(a29);\n        IBond b1 = mol.getBuilder().newInstance(IBond.class, a1, a5, IBond.Order.SINGLE);\n        mol.addBond(b1);\n        IBond b2 = mol.getBuilder().newInstance(IBond.class, a1, a9, IBond.Order.SINGLE);\n        mol.addBond(b2);\n        IBond b3 = mol.getBuilder().newInstance(IBond.class, a1, a10, IBond.Order.DOUBLE);\n        mol.addBond(b3);\n        IBond b4 = mol.getBuilder().newInstance(IBond.class, a1, a11, IBond.Order.DOUBLE);\n        mol.addBond(b4);\n        IBond b5 = mol.getBuilder().newInstance(IBond.class, a2, a12, IBond.Order.SINGLE);\n        mol.addBond(b5);\n        IBond b6 = mol.getBuilder().newInstance(IBond.class, a2, a24, IBond.Order.SINGLE);\n        mol.addBond(b6);\n        IBond b7 = mol.getBuilder().newInstance(IBond.class, a3, a13, IBond.Order.SINGLE);\n        mol.addBond(b7);\n        IBond b8 = mol.getBuilder().newInstance(IBond.class, a3, a25, IBond.Order.SINGLE);\n        mol.addBond(b8);\n        IBond b9 = mol.getBuilder().newInstance(IBond.class, a4, a14, IBond.Order.SINGLE);\n        mol.addBond(b9);\n        IBond b10 = mol.getBuilder().newInstance(IBond.class, a4, a26, IBond.Order.SINGLE);\n        mol.addBond(b10);\n        IBond b11 = mol.getBuilder().newInstance(IBond.class, a5, a16, IBond.Order.SINGLE);\n        mol.addBond(b11);\n        IBond b12 = mol.getBuilder().newInstance(IBond.class, a6, a15, IBond.Order.SINGLE);\n        mol.addBond(b12);\n        IBond b13 = mol.getBuilder().newInstance(IBond.class, a6, a27, IBond.Order.SINGLE);\n        mol.addBond(b13);\n        IBond b14 = mol.getBuilder().newInstance(IBond.class, a7, a17, IBond.Order.SINGLE);\n        mol.addBond(b14);\n        IBond b15 = mol.getBuilder().newInstance(IBond.class, a7, a28, IBond.Order.SINGLE);\n        mol.addBond(b15);\n        IBond b16 = mol.getBuilder().newInstance(IBond.class, a8, a17, IBond.Order.DOUBLE);\n        mol.addBond(b16);\n        IBond b17 = mol.getBuilder().newInstance(IBond.class, a9, a29, IBond.Order.SINGLE);\n        mol.addBond(b17);\n        IBond b18 = mol.getBuilder().newInstance(IBond.class, a12, a13, IBond.Order.SINGLE);\n        mol.addBond(b18);\n        IBond b19 = mol.getBuilder().newInstance(IBond.class, a12, a14, IBond.Order.SINGLE);\n        mol.addBond(b19);\n        IBond b20 = mol.getBuilder().newInstance(IBond.class, a12, a18, IBond.Order.SINGLE);\n        mol.addBond(b20);\n        IBond b21 = mol.getBuilder().newInstance(IBond.class, a13, a15, IBond.Order.SINGLE);\n        mol.addBond(b21);\n        IBond b22 = mol.getBuilder().newInstance(IBond.class, a13, a19, IBond.Order.SINGLE);\n        mol.addBond(b22);\n        IBond b23 = mol.getBuilder().newInstance(IBond.class, a14, a16, IBond.Order.SINGLE);\n        mol.addBond(b23);\n        IBond b24 = mol.getBuilder().newInstance(IBond.class, a14, a20, IBond.Order.SINGLE);\n        mol.addBond(b24);\n        IBond b25 = mol.getBuilder().newInstance(IBond.class, a15, a17, IBond.Order.SINGLE);\n        mol.addBond(b25);\n        IBond b26 = mol.getBuilder().newInstance(IBond.class, a15, a21, IBond.Order.SINGLE);\n        mol.addBond(b26);\n        IBond b27 = mol.getBuilder().newInstance(IBond.class, a16, a22, IBond.Order.SINGLE);\n        mol.addBond(b27);\n        IBond b28 = mol.getBuilder().newInstance(IBond.class, a16, a23, IBond.Order.SINGLE);\n        mol.addBond(b28);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol);\n        addImplicitHydrogens(mol);\n        IntegerResult result = (IntegerResult) descriptor.calculate(mol).getValue();\n        Assert.assertEquals(2, result.intValue());\n    }", "signature": "void testCID()", "full_signature": "@Test public void testCID()", "class_method_signature": "AcidicGroupCountDescriptorTest.testCID()", "testcase": true, "constructor": false, "invocations": ["newAtomContainer", "getInstance", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setFormalCharge", "setPoint2d", "addAtom", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "percieveAtomTypesAndConfigureAtoms", "addImplicitHydrogens", "getValue", "calculate", "assertEquals", "intValue"]}, "focal_class": {"identifier": "AcidicGroupCountDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private final static String[] SMARTS_STRINGS = {\"[$([O;H1]-[C,S,P]=O)]\", \"[$([*;-;!$(*~[*;+])])]\",\n            \"[$([NH](S(=O)=O)C(F)(F)F)]\", \"[$(n1nnnc1)]\"};", "modifier": "private final static", "type": "String[]", "declarator": "SMARTS_STRINGS = {\"[$([O;H1]-[C,S,P]=O)]\", \"[$([*;-;!$(*~[*;+])])]\",\n            \"[$([NH](S(=O)=O)C(F)(F)F)]\", \"[$(n1nnnc1)]\"}", "var_name": "SMARTS_STRINGS"}, {"original_string": "private final static String[] NAMES          = {\"nAcid\"};", "modifier": "private final static", "type": "String[]", "declarator": "NAMES          = {\"nAcid\"}", "var_name": "NAMES"}, {"original_string": "private List<SmartsPattern> tools  = new ArrayList<SmartsPattern>();", "modifier": "private", "type": "List<SmartsPattern>", "declarator": "tools  = new ArrayList<SmartsPattern>()", "var_name": "tools"}, {"original_string": "private boolean               checkAromaticity;", "modifier": "private", "type": "boolean", "declarator": "checkAromaticity", "var_name": "checkAromaticity"}], "methods": [{"identifier": "AcidicGroupCountDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " AcidicGroupCountDescriptor()", "full_signature": "public  AcidicGroupCountDescriptor()", "class_method_signature": "AcidicGroupCountDescriptor.AcidicGroupCountDescriptor()", "testcase": false, "constructor": true}, {"identifier": "initialise", "parameters": "(IChemObjectBuilder builder)", "modifiers": "@Override public", "return": "void", "signature": "void initialise(IChemObjectBuilder builder)", "full_signature": "@Override public void initialise(IChemObjectBuilder builder)", "class_method_signature": "AcidicGroupCountDescriptor.initialise(IChemObjectBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "AcidicGroupCountDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "AcidicGroupCountDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "AcidicGroupCountDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "AcidicGroupCountDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "AcidicGroupCountDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "AcidicGroupCountDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "AcidicGroupCountDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "AcidicGroupCountDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception exception)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception exception)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception exception)", "class_method_signature": "AcidicGroupCountDescriptor.getDummyDescriptorValue(Exception exception)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/AcidicGroupCountDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer atomContainer) {\n\n        if (tools.isEmpty()) {\n            throw new IllegalStateException(\"descriptor is not initalised, invoke 'initalise' first\");\n        }\n\n        atomContainer = clone(atomContainer); // don't mod original\n        for (IAtom atom : atomContainer.atoms()) {\n            if (atom.getImplicitHydrogenCount() == null)\n                atom.setImplicitHydrogenCount(0);\n        }\n\n        // do aromaticity detection\n        if (this.checkAromaticity) {\n            try {\n                AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(atomContainer);\n                Aromaticity.cdkLegacy().apply(atomContainer);\n            } catch (CDKException exception) {\n                return getDummyDescriptorValue(exception);\n            }\n        }\n\n        int count = 0;\n        for (SmartsPattern tool : tools)\n            count += tool.matchAll(atomContainer).count();\n        return new DescriptorValue(getSpecification(), getParameterNames(),\n                                   getParameters(), new IntegerResult(count),\n                                   getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "AcidicGroupCountDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "clone", "atoms", "getImplicitHydrogenCount", "setImplicitHydrogenCount", "percieveAtomTypesAndConfigureAtoms", "apply", "cdkLegacy", "getDummyDescriptorValue", "count", "matchAll", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}