{"test_class": {"identifier": "CopyDataCommandHandlerTest", "superclass": "extends TestBase", "interfaces": "", "fields": [{"original_string": "private VideoDecoder decoder;", "modifier": "private", "type": "VideoDecoder", "declarator": "decoder", "var_name": "decoder"}, {"original_string": "private AudioEncoder encoder;", "modifier": "private", "type": "AudioEncoder", "declarator": "encoder", "var_name": "encoder"}, {"original_string": "private IMediaCodec mediaCodec;", "modifier": "private", "type": "IMediaCodec", "declarator": "mediaCodec", "var_name": "mediaCodec"}], "file": "domain/src/test/java/org/m4m/domain/pipeline/CopyDataCommandHandlerTest.java"}, "test_case": {"identifier": "handleEof", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void handleEof() {\n        decoder = create.videoDecoder().whichDecodesTo(Frame.EOF()).construct();\n        decoder.push(Frame.EOF());\n        decoder.start();\n\n        new CopyDataCommandHandler(decoder, encoder).handle();\n\n        verify(mediaCodec).queueInputBuffer(anyInt(), anyInt(), anyInt(), anyLong(), eq(IMediaCodec.BUFFER_FLAG_END_OF_STREAM));\n    }", "signature": "void handleEof()", "full_signature": "@Test public void handleEof()", "class_method_signature": "CopyDataCommandHandlerTest.handleEof()", "testcase": true, "constructor": false, "invocations": ["construct", "whichDecodesTo", "videoDecoder", "EOF", "push", "EOF", "start", "handle", "queueInputBuffer", "verify", "anyInt", "anyInt", "anyInt", "anyLong", "eq"]}, "focal_class": {"identifier": "CopyDataCommandHandler", "superclass": "", "interfaces": "implements ICommandHandler", "fields": [{"original_string": "private final IPluginOutput output;", "modifier": "private final", "type": "IPluginOutput", "declarator": "output", "var_name": "output"}, {"original_string": "private final MediaCodecPlugin input;", "modifier": "private final", "type": "MediaCodecPlugin", "declarator": "input", "var_name": "input"}], "methods": [{"identifier": "CopyDataCommandHandler", "parameters": "(IPluginOutput output, MediaCodecPlugin input)", "modifiers": "public", "return": "", "signature": " CopyDataCommandHandler(IPluginOutput output, MediaCodecPlugin input)", "full_signature": "public  CopyDataCommandHandler(IPluginOutput output, MediaCodecPlugin input)", "class_method_signature": "CopyDataCommandHandler.CopyDataCommandHandler(IPluginOutput output, MediaCodecPlugin input)", "testcase": false, "constructor": true}, {"identifier": "handle", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void handle()", "full_signature": "@Override public void handle()", "class_method_signature": "CopyDataCommandHandler.handle()", "testcase": false, "constructor": false}, {"identifier": "restoreCommands", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void restoreCommands()", "full_signature": "private void restoreCommands()", "class_method_signature": "CopyDataCommandHandler.restoreCommands()", "testcase": false, "constructor": false}], "file": "domain/src/main/java/org/m4m/domain/pipeline/CopyDataCommandHandler.java"}, "focal_method": {"identifier": "handle", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void handle() {\n        Frame encoderFrame = input.findFreeFrame();\n        if (encoderFrame == null) {\n            restoreCommands();\n            return;\n        }\n\n        Frame decoderFrame = output.getFrame();\n        if (decoderFrame == null) return;\n\n        encoderFrame.copyDataFrom(decoderFrame);\n        input.push(encoderFrame);\n\n        output.releaseOutputBuffer(decoderFrame.getBufferIndex());\n    }", "signature": "void handle()", "full_signature": "@Override public void handle()", "class_method_signature": "CopyDataCommandHandler.handle()", "testcase": false, "constructor": false, "invocations": ["findFreeFrame", "restoreCommands", "getFrame", "copyDataFrom", "push", "releaseOutputBuffer", "getBufferIndex"]}, "repository": {"repo_id": 25040346, "url": "https://github.com/INDExOS/media-for-mobile", "language": "Java", "is_fork": false, "fork_count": 167, "stargazer_count": 416, "size": 619, "license": "licensed"}}