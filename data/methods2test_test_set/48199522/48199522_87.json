{"test_class": {"identifier": "AnalyzeResourceTest", "superclass": "", "interfaces": "", "fields": [], "file": "frontend/src/test/java/macrobase/runtime/resources/AnalyzeResourceTest.java"}, "test_case": {"identifier": "testMADAnalyzer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMADAnalyzer() throws Exception {\n        MacroBaseConf conf = new MacroBaseConf()\n                .set(MacroBaseConf.TARGET_PERCENTILE, 0.99) // analysis\n                .set(MacroBaseConf.USE_PERCENTILE, true)\n                .set(MacroBaseConf.MIN_OI_RATIO, .01)\n                .set(MacroBaseConf.MIN_SUPPORT, .01)\n                .set(MacroBaseConf.RANDOM_SEED, 0)\n                .set(MacroBaseConf.DATA_LOADER_TYPE, MacroBaseConf.DataIngesterType.CSV_LOADER)\n                .set(MacroBaseConf.CSV_INPUT_FILE, \"src/test/resources/data/simple.csv\");\n\n        conf.loadSystemProperties();\n\n        AnalyzeResource resource = new AnalyzeResource(conf);\n        AnalyzeResource.AnalysisRequest r = new AnalyzeResource.AnalysisRequest();\n        r.attributes = Lists.newArrayList(\"A1\", \"A2\", \"A3\", \"A4\");\n        r.highMetrics = Lists.newArrayList();\n        r.lowMetrics = Lists.newArrayList(\"A5\");\n\n        // this is not a great API...\n        r.pgUrl = \"should be unused\";\n        r.baseQuery = \"also should be unused\";\n\n        List<AnalysisResult> arl = resource.getAnalysis(r).results;\n\n        assertTrue(arl.size() == 1);\n\n        AnalysisResult ar = arl.get(0);\n\n        assertEquals(1, ar.getItemSets().size());\n\n        HashSet<String> toFindColumn = Sets.newHashSet(\"A1\", \"A2\", \"A3\", \"A4\");\n        HashSet<String> toFindValue = Sets.newHashSet(\"0\", \"1\", \"2\", \"3\");\n\n        for (ColumnValue cv : ar.getItemSets().get(0).getItems()) {\n            assertTrue(toFindColumn.contains(cv.getColumn()));\n            toFindColumn.remove(cv.getColumn());\n            assertTrue(toFindValue.contains(cv.getValue()));\n            toFindValue.remove(cv.getValue());\n        }\n\n        assertEquals(0, toFindColumn.size());\n        assertEquals(0, toFindValue.size());\n    }", "signature": "void testMADAnalyzer()", "full_signature": "@Test public void testMADAnalyzer()", "class_method_signature": "AnalyzeResourceTest.testMADAnalyzer()", "testcase": true, "constructor": false, "invocations": ["set", "set", "set", "set", "set", "set", "set", "loadSystemProperties", "newArrayList", "newArrayList", "newArrayList", "getAnalysis", "assertTrue", "size", "get", "assertEquals", "size", "getItemSets", "newHashSet", "newHashSet", "getItems", "get", "getItemSets", "assertTrue", "contains", "getColumn", "remove", "getColumn", "assertTrue", "contains", "getValue", "remove", "getValue", "assertEquals", "size", "assertEquals", "size"]}, "focal_class": {"identifier": "AnalyzeResource", "superclass": "extends BaseResource", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(SchemaResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SchemaResource.class)", "var_name": "log"}], "methods": [{"identifier": "AnalyzeResource", "parameters": "(MacroBaseConf conf)", "modifiers": "public", "return": "", "signature": " AnalyzeResource(MacroBaseConf conf)", "full_signature": "public  AnalyzeResource(MacroBaseConf conf)", "class_method_signature": "AnalyzeResource.AnalyzeResource(MacroBaseConf conf)", "testcase": false, "constructor": true}, {"identifier": "getAnalysis", "parameters": "(AnalysisRequest request)", "modifiers": "@POST @Consumes(MediaType.APPLICATION_JSON) public", "return": "AnalysisResponse", "signature": "AnalysisResponse getAnalysis(AnalysisRequest request)", "full_signature": "@POST @Consumes(MediaType.APPLICATION_JSON) public AnalysisResponse getAnalysis(AnalysisRequest request)", "class_method_signature": "AnalyzeResource.getAnalysis(AnalysisRequest request)", "testcase": false, "constructor": false}], "file": "frontend/src/main/java/macrobase/runtime/resources/AnalyzeResource.java"}, "focal_method": {"identifier": "getAnalysis", "parameters": "(AnalysisRequest request)", "modifiers": "@POST @Consumes(MediaType.APPLICATION_JSON) public", "return": "AnalysisResponse", "body": "@POST\n    @Consumes(MediaType.APPLICATION_JSON)\n    public AnalysisResponse getAnalysis(AnalysisRequest request) {\n        AnalysisResponse response = new AnalysisResponse();\n\n        try {\n            List<String> allMetrics = new ArrayList<>();\n            allMetrics.addAll(request.highMetrics);\n            allMetrics.addAll(request.lowMetrics);\n\n            conf.set(MacroBaseConf.DB_URL, request.pgUrl);\n            conf.set(MacroBaseConf.BASE_QUERY, request.baseQuery);\n            conf.set(MacroBaseConf.ATTRIBUTES, request.attributes);\n            conf.set(MacroBaseConf.METRICS, allMetrics);\n            conf.set(MacroBaseConf.LOW_METRIC_TRANSFORM, request.lowMetrics);\n            conf.set(MacroBaseConf.USE_PERCENTILE, true);\n\n            // temp hack to enable CSV loading\n            if (request.baseQuery.contains(\"csv://\")) {\n                conf.set(MacroBaseConf.CSV_INPUT_FILE, request.baseQuery.replace(\"csv://\", \"\"));\n                conf.set(MacroBaseConf.DATA_LOADER_TYPE, MacroBaseConf.DataIngesterType.CSV_LOADER);\n            }\n\n            Class c = Class.forName(conf.getString(MacroBaseConf.PIPELINE_NAME, BasicBatchedPipeline.class.getName()));\n            Object ao = c.newInstance();\n\n            if (!(ao instanceof Pipeline)) {\n                log.error(\"{} is not an instance of Pipeline! Exiting...\", ao);\n                response.errorMessage = \"Requested pipeline of type \"+c.getName()+ \" is not a Pipeline\";\n                return response;\n            }\n            Pipeline pipeline = (Pipeline) ao;\n\n            List<AnalysisResult> results = pipeline.initialize(conf).run();\n\n            for (AnalysisResult result : results) {\n                if (result.getItemSets().size() > 1000) {\n                    log.warn(\"Very large result set! {}; truncating to 1000\", result.getItemSets().size());\n                    result.setItemSets(result.getItemSets().subList(0, 1000));\n                }\n            }\n\n            response.results = results;\n\n            MacroBase.reporter.report();\n        } catch (Exception e) {\n            log.error(\"An error occurred while processing a request: {}\", e);\n            response.errorMessage = ExceptionUtils.getStackTrace(e);\n        }\n\n        return response;\n    }", "signature": "AnalysisResponse getAnalysis(AnalysisRequest request)", "full_signature": "@POST @Consumes(MediaType.APPLICATION_JSON) public AnalysisResponse getAnalysis(AnalysisRequest request)", "class_method_signature": "AnalyzeResource.getAnalysis(AnalysisRequest request)", "testcase": false, "constructor": false, "invocations": ["addAll", "addAll", "set", "set", "set", "set", "set", "set", "contains", "set", "replace", "set", "forName", "getString", "getName", "newInstance", "error", "getName", "run", "initialize", "size", "getItemSets", "warn", "size", "getItemSets", "setItemSets", "subList", "getItemSets", "report", "error", "getStackTrace"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}