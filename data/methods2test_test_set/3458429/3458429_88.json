{"test_class": {"identifier": "HttpParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<HttpComplianceSection> complianceViolation = new ArrayList<>();", "modifier": "private final", "type": "List<HttpComplianceSection>", "declarator": "complianceViolation = new ArrayList<>()", "var_name": "complianceViolation"}, {"original_string": "private String host;", "modifier": "private", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "private int port;", "modifier": "private", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "private String bad;", "modifier": "private", "type": "String", "declarator": "bad", "var_name": "bad"}, {"original_string": "private String content;", "modifier": "private", "type": "String", "declarator": "content", "var_name": "content"}, {"original_string": "private String methodOrVersion;", "modifier": "private", "type": "String", "declarator": "methodOrVersion", "var_name": "methodOrVersion"}, {"original_string": "private String uriOrStatus;", "modifier": "private", "type": "String", "declarator": "uriOrStatus", "var_name": "uriOrStatus"}, {"original_string": "private String versionOrReason;", "modifier": "private", "type": "String", "declarator": "versionOrReason", "var_name": "versionOrReason"}, {"original_string": "private List<HttpField> fields = new ArrayList<>();", "modifier": "private", "type": "List<HttpField>", "declarator": "fields = new ArrayList<>()", "var_name": "fields"}, {"original_string": "private List<HttpField> trailers = new ArrayList<>();", "modifier": "private", "type": "List<HttpField>", "declarator": "trailers = new ArrayList<>()", "var_name": "trailers"}, {"original_string": "private String[] hdr;", "modifier": "private", "type": "String[]", "declarator": "hdr", "var_name": "hdr"}, {"original_string": "private String[] val;", "modifier": "private", "type": "String[]", "declarator": "val", "var_name": "val"}, {"original_string": "private int headers;", "modifier": "private", "type": "int", "declarator": "headers", "var_name": "headers"}, {"original_string": "private boolean early;", "modifier": "private", "type": "boolean", "declarator": "early", "var_name": "early"}, {"original_string": "private boolean headerCompleted;", "modifier": "private", "type": "boolean", "declarator": "headerCompleted", "var_name": "headerCompleted"}, {"original_string": "private boolean messageCompleted;", "modifier": "private", "type": "boolean", "declarator": "messageCompleted", "var_name": "messageCompleted"}], "file": "firefly-net/src/test/java/com/fireflysource/net/http/common/v1/decoder/HttpParserTest.java"}, "test_case": {"identifier": "testResponse101WithTransferEncoding", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testResponse101WithTransferEncoding() {\n        ByteBuffer buffer = BufferUtils.toBuffer(\n                \"HTTP/1.1 101 switching protocols\\r\\n\"\n                        + \"Transfer-Encoding: chunked\\r\\n\"\n                        + \"\\r\\n\");\n\n        HttpParser.ResponseHandler handler = new Handler();\n        HttpParser parser = new HttpParser(handler);\n        parser.parseNext(buffer);\n        assertEquals(\"HTTP/1.1\", methodOrVersion);\n        assertEquals(\"101\", uriOrStatus);\n        assertEquals(\"switching protocols\", versionOrReason);\n        assertNull(content);\n        assertTrue(headerCompleted);\n        assertTrue(messageCompleted);\n    }", "signature": "void testResponse101WithTransferEncoding()", "full_signature": "@Test void testResponse101WithTransferEncoding()", "class_method_signature": "HttpParserTest.testResponse101WithTransferEncoding()", "testcase": true, "constructor": false, "invocations": ["toBuffer", "parseNext", "assertEquals", "assertEquals", "assertEquals", "assertNull", "assertTrue", "assertTrue"]}, "focal_class": {"identifier": "HttpParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final LazyLogger LOG = SystemLogger.create(HttpParser.class);", "modifier": "public static final", "type": "LazyLogger", "declarator": "LOG = SystemLogger.create(HttpParser.class)", "var_name": "LOG"}, {"original_string": "@Deprecated\n    public final static String STRICT = \"com.fireflysource.net.http.common.v1.decoder.HttpParser.STRICT\";", "modifier": "@Deprecated\n    public final static", "type": "String", "declarator": "STRICT = \"com.fireflysource.net.http.common.v1.decoder.HttpParser.STRICT\"", "var_name": "STRICT"}, {"original_string": "public final static int INITIAL_URI_LENGTH = 256;", "modifier": "public final static", "type": "int", "declarator": "INITIAL_URI_LENGTH = 256", "var_name": "INITIAL_URI_LENGTH"}, {"original_string": "public final static Trie<HttpField> CACHE = new ArrayTrie<>(2048);", "modifier": "public final static", "type": "Trie<HttpField>", "declarator": "CACHE = new ArrayTrie<>(2048)", "var_name": "CACHE"}, {"original_string": "private final static int MAX_CHUNK_LENGTH = Integer.MAX_VALUE / 16 - 16;", "modifier": "private final static", "type": "int", "declarator": "MAX_CHUNK_LENGTH = Integer.MAX_VALUE / 16 - 16", "var_name": "MAX_CHUNK_LENGTH"}, {"original_string": "private final static EnumSet<State> IDLE_STATES = EnumSet.of(State.START, State.END, State.CLOSE, State.CLOSED);", "modifier": "private final static", "type": "EnumSet<State>", "declarator": "IDLE_STATES = EnumSet.of(State.START, State.END, State.CLOSE, State.CLOSED)", "var_name": "IDLE_STATES"}, {"original_string": "private final static EnumSet<State> COMPLETE_STATES = EnumSet.of(State.END, State.CLOSE, State.CLOSED);", "modifier": "private final static", "type": "EnumSet<State>", "declarator": "COMPLETE_STATES = EnumSet.of(State.END, State.CLOSE, State.CLOSED)", "var_name": "COMPLETE_STATES"}, {"original_string": "private static final boolean DEBUG = LOG.isDebugEnabled();", "modifier": "private static final", "type": "boolean", "declarator": "DEBUG = LOG.isDebugEnabled()", "var_name": "DEBUG"}, {"original_string": "private final HttpHandler handler;", "modifier": "private final", "type": "HttpHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "private final RequestHandler requestHandler;", "modifier": "private final", "type": "RequestHandler", "declarator": "requestHandler", "var_name": "requestHandler"}, {"original_string": "private final ResponseHandler responseHandler;", "modifier": "private final", "type": "ResponseHandler", "declarator": "responseHandler", "var_name": "responseHandler"}, {"original_string": "private final ComplianceHandler complianceHandler;", "modifier": "private final", "type": "ComplianceHandler", "declarator": "complianceHandler", "var_name": "complianceHandler"}, {"original_string": "private final int maxHeaderBytes;", "modifier": "private final", "type": "int", "declarator": "maxHeaderBytes", "var_name": "maxHeaderBytes"}, {"original_string": "private final HttpCompliance compliance;", "modifier": "private final", "type": "HttpCompliance", "declarator": "compliance", "var_name": "compliance"}, {"original_string": "private final EnumSet<HttpComplianceSection> complianceSections;", "modifier": "private final", "type": "EnumSet<HttpComplianceSection>", "declarator": "complianceSections", "var_name": "complianceSections"}, {"original_string": "private final StringBuilder string = new StringBuilder();", "modifier": "private final", "type": "StringBuilder", "declarator": "string = new StringBuilder()", "var_name": "string"}, {"original_string": "private HttpField field;", "modifier": "private", "type": "HttpField", "declarator": "field", "var_name": "field"}, {"original_string": "private HttpHeader header;", "modifier": "private", "type": "HttpHeader", "declarator": "header", "var_name": "header"}, {"original_string": "private String headerString;", "modifier": "private", "type": "String", "declarator": "headerString", "var_name": "headerString"}, {"original_string": "private String valueString;", "modifier": "private", "type": "String", "declarator": "valueString", "var_name": "valueString"}, {"original_string": "private int responseStatus;", "modifier": "private", "type": "int", "declarator": "responseStatus", "var_name": "responseStatus"}, {"original_string": "private int headerBytes;", "modifier": "private", "type": "int", "declarator": "headerBytes", "var_name": "headerBytes"}, {"original_string": "private boolean host;", "modifier": "private", "type": "boolean", "declarator": "host", "var_name": "host"}, {"original_string": "private boolean headerComplete;", "modifier": "private", "type": "boolean", "declarator": "headerComplete", "var_name": "headerComplete"}, {"original_string": "private volatile State state = State.START;", "modifier": "private volatile", "type": "State", "declarator": "state = State.START", "var_name": "state"}, {"original_string": "private volatile FieldState fieldState = FieldState.FIELD;", "modifier": "private volatile", "type": "FieldState", "declarator": "fieldState = FieldState.FIELD", "var_name": "fieldState"}, {"original_string": "private volatile boolean eof;", "modifier": "private volatile", "type": "boolean", "declarator": "eof", "var_name": "eof"}, {"original_string": "private HttpMethod method;", "modifier": "private", "type": "HttpMethod", "declarator": "method", "var_name": "method"}, {"original_string": "private String methodString;", "modifier": "private", "type": "String", "declarator": "methodString", "var_name": "methodString"}, {"original_string": "private HttpVersion version;", "modifier": "private", "type": "HttpVersion", "declarator": "version", "var_name": "version"}, {"original_string": "private Utf8StringBuilder uri = new Utf8StringBuilder(INITIAL_URI_LENGTH);", "modifier": "private", "type": "Utf8StringBuilder", "declarator": "uri = new Utf8StringBuilder(INITIAL_URI_LENGTH)", "var_name": "uri"}, {"original_string": "private EndOfContent endOfContent;", "modifier": "private", "type": "EndOfContent", "declarator": "endOfContent", "var_name": "endOfContent"}, {"original_string": "private boolean hasContentLength;", "modifier": "private", "type": "boolean", "declarator": "hasContentLength", "var_name": "hasContentLength"}, {"original_string": "private long contentLength = -1;", "modifier": "private", "type": "long", "declarator": "contentLength = -1", "var_name": "contentLength"}, {"original_string": "private long contentPosition;", "modifier": "private", "type": "long", "declarator": "contentPosition", "var_name": "contentPosition"}, {"original_string": "private int chunkLength;", "modifier": "private", "type": "int", "declarator": "chunkLength", "var_name": "chunkLength"}, {"original_string": "private int chunkPosition;", "modifier": "private", "type": "int", "declarator": "chunkPosition", "var_name": "chunkPosition"}, {"original_string": "private boolean headResponse;", "modifier": "private", "type": "boolean", "declarator": "headResponse", "var_name": "headResponse"}, {"original_string": "private boolean cr;", "modifier": "private", "type": "boolean", "declarator": "cr", "var_name": "cr"}, {"original_string": "private ByteBuffer contentChunk;", "modifier": "private", "type": "ByteBuffer", "declarator": "contentChunk", "var_name": "contentChunk"}, {"original_string": "private Trie<HttpField> fieldCache;", "modifier": "private", "type": "Trie<HttpField>", "declarator": "fieldCache", "var_name": "fieldCache"}, {"original_string": "private int length;", "modifier": "private", "type": "int", "declarator": "length", "var_name": "length"}], "methods": [{"identifier": "HttpParser", "parameters": "(RequestHandler handler)", "modifiers": "public", "return": "", "signature": " HttpParser(RequestHandler handler)", "full_signature": "public  HttpParser(RequestHandler handler)", "class_method_signature": "HttpParser.HttpParser(RequestHandler handler)", "testcase": false, "constructor": true}, {"identifier": "HttpParser", "parameters": "(ResponseHandler handler)", "modifiers": "public", "return": "", "signature": " HttpParser(ResponseHandler handler)", "full_signature": "public  HttpParser(ResponseHandler handler)", "class_method_signature": "HttpParser.HttpParser(ResponseHandler handler)", "testcase": false, "constructor": true}, {"identifier": "HttpParser", "parameters": "(RequestHandler handler, int maxHeaderBytes)", "modifiers": "public", "return": "", "signature": " HttpParser(RequestHandler handler, int maxHeaderBytes)", "full_signature": "public  HttpParser(RequestHandler handler, int maxHeaderBytes)", "class_method_signature": "HttpParser.HttpParser(RequestHandler handler, int maxHeaderBytes)", "testcase": false, "constructor": true}, {"identifier": "HttpParser", "parameters": "(ResponseHandler handler, int maxHeaderBytes)", "modifiers": "public", "return": "", "signature": " HttpParser(ResponseHandler handler, int maxHeaderBytes)", "full_signature": "public  HttpParser(ResponseHandler handler, int maxHeaderBytes)", "class_method_signature": "HttpParser.HttpParser(ResponseHandler handler, int maxHeaderBytes)", "testcase": false, "constructor": true}, {"identifier": "HttpParser", "parameters": "(RequestHandler handler, int maxHeaderBytes, boolean strict)", "modifiers": "@Deprecated public", "return": "", "signature": " HttpParser(RequestHandler handler, int maxHeaderBytes, boolean strict)", "full_signature": "@Deprecated public  HttpParser(RequestHandler handler, int maxHeaderBytes, boolean strict)", "class_method_signature": "HttpParser.HttpParser(RequestHandler handler, int maxHeaderBytes, boolean strict)", "testcase": false, "constructor": true}, {"identifier": "HttpParser", "parameters": "(ResponseHandler handler, int maxHeaderBytes, boolean strict)", "modifiers": "@Deprecated public", "return": "", "signature": " HttpParser(ResponseHandler handler, int maxHeaderBytes, boolean strict)", "full_signature": "@Deprecated public  HttpParser(ResponseHandler handler, int maxHeaderBytes, boolean strict)", "class_method_signature": "HttpParser.HttpParser(ResponseHandler handler, int maxHeaderBytes, boolean strict)", "testcase": false, "constructor": true}, {"identifier": "HttpParser", "parameters": "(RequestHandler handler, HttpCompliance compliance)", "modifiers": "public", "return": "", "signature": " HttpParser(RequestHandler handler, HttpCompliance compliance)", "full_signature": "public  HttpParser(RequestHandler handler, HttpCompliance compliance)", "class_method_signature": "HttpParser.HttpParser(RequestHandler handler, HttpCompliance compliance)", "testcase": false, "constructor": true}, {"identifier": "HttpParser", "parameters": "(RequestHandler handler, int maxHeaderBytes, HttpCompliance compliance)", "modifiers": "public", "return": "", "signature": " HttpParser(RequestHandler handler, int maxHeaderBytes, HttpCompliance compliance)", "full_signature": "public  HttpParser(RequestHandler handler, int maxHeaderBytes, HttpCompliance compliance)", "class_method_signature": "HttpParser.HttpParser(RequestHandler handler, int maxHeaderBytes, HttpCompliance compliance)", "testcase": false, "constructor": true}, {"identifier": "HttpParser", "parameters": "(ResponseHandler handler, int maxHeaderBytes, HttpCompliance compliance)", "modifiers": "public", "return": "", "signature": " HttpParser(ResponseHandler handler, int maxHeaderBytes, HttpCompliance compliance)", "full_signature": "public  HttpParser(ResponseHandler handler, int maxHeaderBytes, HttpCompliance compliance)", "class_method_signature": "HttpParser.HttpParser(ResponseHandler handler, int maxHeaderBytes, HttpCompliance compliance)", "testcase": false, "constructor": true}, {"identifier": "HttpParser", "parameters": "(RequestHandler requestHandler, ResponseHandler responseHandler, int maxHeaderBytes, HttpCompliance compliance)", "modifiers": "private", "return": "", "signature": " HttpParser(RequestHandler requestHandler, ResponseHandler responseHandler, int maxHeaderBytes, HttpCompliance compliance)", "full_signature": "private  HttpParser(RequestHandler requestHandler, ResponseHandler responseHandler, int maxHeaderBytes, HttpCompliance compliance)", "class_method_signature": "HttpParser.HttpParser(RequestHandler requestHandler, ResponseHandler responseHandler, int maxHeaderBytes, HttpCompliance compliance)", "testcase": false, "constructor": true}, {"identifier": "compliance", "parameters": "()", "modifiers": "private static", "return": "HttpCompliance", "signature": "HttpCompliance compliance()", "full_signature": "private static HttpCompliance compliance()", "class_method_signature": "HttpParser.compliance()", "testcase": false, "constructor": false}, {"identifier": "getHandler", "parameters": "()", "modifiers": "public", "return": "HttpHandler", "signature": "HttpHandler getHandler()", "full_signature": "public HttpHandler getHandler()", "class_method_signature": "HttpParser.getHandler()", "testcase": false, "constructor": false}, {"identifier": "complianceViolation", "parameters": "(HttpComplianceSection violation)", "modifiers": "protected", "return": "boolean", "signature": "boolean complianceViolation(HttpComplianceSection violation)", "full_signature": "protected boolean complianceViolation(HttpComplianceSection violation)", "class_method_signature": "HttpParser.complianceViolation(HttpComplianceSection violation)", "testcase": false, "constructor": false}, {"identifier": "complianceViolation", "parameters": "(HttpComplianceSection violation, String reason)", "modifiers": "protected", "return": "boolean", "signature": "boolean complianceViolation(HttpComplianceSection violation, String reason)", "full_signature": "protected boolean complianceViolation(HttpComplianceSection violation, String reason)", "class_method_signature": "HttpParser.complianceViolation(HttpComplianceSection violation, String reason)", "testcase": false, "constructor": false}, {"identifier": "handleViolation", "parameters": "(HttpComplianceSection section, String reason)", "modifiers": "protected", "return": "void", "signature": "void handleViolation(HttpComplianceSection section, String reason)", "full_signature": "protected void handleViolation(HttpComplianceSection section, String reason)", "class_method_signature": "HttpParser.handleViolation(HttpComplianceSection section, String reason)", "testcase": false, "constructor": false}, {"identifier": "caseInsensitiveHeader", "parameters": "(String orig, String normative)", "modifiers": "protected", "return": "String", "signature": "String caseInsensitiveHeader(String orig, String normative)", "full_signature": "protected String caseInsensitiveHeader(String orig, String normative)", "class_method_signature": "HttpParser.caseInsensitiveHeader(String orig, String normative)", "testcase": false, "constructor": false}, {"identifier": "getContentLength", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getContentLength()", "full_signature": "public long getContentLength()", "class_method_signature": "HttpParser.getContentLength()", "testcase": false, "constructor": false}, {"identifier": "getContentRead", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getContentRead()", "full_signature": "public long getContentRead()", "class_method_signature": "HttpParser.getContentRead()", "testcase": false, "constructor": false}, {"identifier": "setHeadResponse", "parameters": "(boolean head)", "modifiers": "public", "return": "void", "signature": "void setHeadResponse(boolean head)", "full_signature": "public void setHeadResponse(boolean head)", "class_method_signature": "HttpParser.setHeadResponse(boolean head)", "testcase": false, "constructor": false}, {"identifier": "setResponseStatus", "parameters": "(int status)", "modifiers": "protected", "return": "void", "signature": "void setResponseStatus(int status)", "full_signature": "protected void setResponseStatus(int status)", "class_method_signature": "HttpParser.setResponseStatus(int status)", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "public", "return": "State", "signature": "State getState()", "full_signature": "public State getState()", "class_method_signature": "HttpParser.getState()", "testcase": false, "constructor": false}, {"identifier": "setState", "parameters": "(State state)", "modifiers": "protected", "return": "void", "signature": "void setState(State state)", "full_signature": "protected void setState(State state)", "class_method_signature": "HttpParser.setState(State state)", "testcase": false, "constructor": false}, {"identifier": "setState", "parameters": "(FieldState state)", "modifiers": "protected", "return": "void", "signature": "void setState(FieldState state)", "full_signature": "protected void setState(FieldState state)", "class_method_signature": "HttpParser.setState(FieldState state)", "testcase": false, "constructor": false}, {"identifier": "inContentState", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean inContentState()", "full_signature": "public boolean inContentState()", "class_method_signature": "HttpParser.inContentState()", "testcase": false, "constructor": false}, {"identifier": "inHeaderState", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean inHeaderState()", "full_signature": "public boolean inHeaderState()", "class_method_signature": "HttpParser.inHeaderState()", "testcase": false, "constructor": false}, {"identifier": "isChunking", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isChunking()", "full_signature": "public boolean isChunking()", "class_method_signature": "HttpParser.isChunking()", "testcase": false, "constructor": false}, {"identifier": "isStart", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStart()", "full_signature": "public boolean isStart()", "class_method_signature": "HttpParser.isStart()", "testcase": false, "constructor": false}, {"identifier": "isClose", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClose()", "full_signature": "public boolean isClose()", "class_method_signature": "HttpParser.isClose()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "public boolean isClosed()", "class_method_signature": "HttpParser.isClosed()", "testcase": false, "constructor": false}, {"identifier": "isIdle", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIdle()", "full_signature": "public boolean isIdle()", "class_method_signature": "HttpParser.isIdle()", "testcase": false, "constructor": false}, {"identifier": "isComplete", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isComplete()", "full_signature": "public boolean isComplete()", "class_method_signature": "HttpParser.isComplete()", "testcase": false, "constructor": false}, {"identifier": "isState", "parameters": "(State state)", "modifiers": "public", "return": "boolean", "signature": "boolean isState(State state)", "full_signature": "public boolean isState(State state)", "class_method_signature": "HttpParser.isState(State state)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(ByteBuffer buffer)", "modifiers": "private", "return": "HttpTokens.Token", "signature": "HttpTokens.Token next(ByteBuffer buffer)", "full_signature": "private HttpTokens.Token next(ByteBuffer buffer)", "class_method_signature": "HttpParser.next(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "quickStart", "parameters": "(ByteBuffer buffer)", "modifiers": "private", "return": "boolean", "signature": "boolean quickStart(ByteBuffer buffer)", "full_signature": "private boolean quickStart(ByteBuffer buffer)", "class_method_signature": "HttpParser.quickStart(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "setString", "parameters": "(String s)", "modifiers": "private", "return": "void", "signature": "void setString(String s)", "full_signature": "private void setString(String s)", "class_method_signature": "HttpParser.setString(String s)", "testcase": false, "constructor": false}, {"identifier": "takeString", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String takeString()", "full_signature": "private String takeString()", "class_method_signature": "HttpParser.takeString()", "testcase": false, "constructor": false}, {"identifier": "handleHeaderContentMessage", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean handleHeaderContentMessage()", "full_signature": "private boolean handleHeaderContentMessage()", "class_method_signature": "HttpParser.handleHeaderContentMessage()", "testcase": false, "constructor": false}, {"identifier": "handleContentMessage", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean handleContentMessage()", "full_signature": "private boolean handleContentMessage()", "class_method_signature": "HttpParser.handleContentMessage()", "testcase": false, "constructor": false}, {"identifier": "parseLine", "parameters": "(ByteBuffer buffer)", "modifiers": "private", "return": "boolean", "signature": "boolean parseLine(ByteBuffer buffer)", "full_signature": "private boolean parseLine(ByteBuffer buffer)", "class_method_signature": "HttpParser.parseLine(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "checkVersion", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkVersion()", "full_signature": "private void checkVersion()", "class_method_signature": "HttpParser.checkVersion()", "testcase": false, "constructor": false}, {"identifier": "parsedHeader", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void parsedHeader()", "full_signature": "private void parsedHeader()", "class_method_signature": "HttpParser.parsedHeader()", "testcase": false, "constructor": false}, {"identifier": "parsedTrailer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void parsedTrailer()", "full_signature": "private void parsedTrailer()", "class_method_signature": "HttpParser.parsedTrailer()", "testcase": false, "constructor": false}, {"identifier": "convertContentLength", "parameters": "(String valueString)", "modifiers": "private", "return": "long", "signature": "long convertContentLength(String valueString)", "full_signature": "private long convertContentLength(String valueString)", "class_method_signature": "HttpParser.convertContentLength(String valueString)", "testcase": false, "constructor": false}, {"identifier": "parseFields", "parameters": "(ByteBuffer buffer)", "modifiers": "protected", "return": "boolean", "signature": "boolean parseFields(ByteBuffer buffer)", "full_signature": "protected boolean parseFields(ByteBuffer buffer)", "class_method_signature": "HttpParser.parseFields(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "parseNext", "parameters": "(ByteBuffer buffer)", "modifiers": "public", "return": "boolean", "signature": "boolean parseNext(ByteBuffer buffer)", "full_signature": "public boolean parseNext(ByteBuffer buffer)", "class_method_signature": "HttpParser.parseNext(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "badMessage", "parameters": "(BadMessageException x)", "modifiers": "protected", "return": "void", "signature": "void badMessage(BadMessageException x)", "full_signature": "protected void badMessage(BadMessageException x)", "class_method_signature": "HttpParser.badMessage(BadMessageException x)", "testcase": false, "constructor": false}, {"identifier": "parseContent", "parameters": "(ByteBuffer buffer)", "modifiers": "protected", "return": "boolean", "signature": "boolean parseContent(ByteBuffer buffer)", "full_signature": "protected boolean parseContent(ByteBuffer buffer)", "class_method_signature": "HttpParser.parseContent(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "isAtEOF", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAtEOF()", "full_signature": "public boolean isAtEOF()", "class_method_signature": "HttpParser.isAtEOF()", "testcase": false, "constructor": false}, {"identifier": "atEOF", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void atEOF()", "full_signature": "public void atEOF()", "class_method_signature": "HttpParser.atEOF()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "HttpParser.close()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "HttpParser.reset()", "testcase": false, "constructor": false}, {"identifier": "getFieldCache", "parameters": "()", "modifiers": "public", "return": "Trie<HttpField>", "signature": "Trie<HttpField> getFieldCache()", "full_signature": "public Trie<HttpField> getFieldCache()", "class_method_signature": "HttpParser.getFieldCache()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HttpParser.toString()", "testcase": false, "constructor": false}], "file": "firefly-net/src/main/java/com/fireflysource/net/http/common/v1/decoder/HttpParser.java"}, "focal_method": {"identifier": "parseNext", "parameters": "(ByteBuffer buffer)", "modifiers": "public", "return": "boolean", "body": "public boolean parseNext(ByteBuffer buffer) {\n        if (DEBUG)\n            LOG.debug(\"parseNext s={} {}\", state, BufferUtils.toDetailString(buffer));\n        try {\n            // Start a request/response\n            if (state == State.START) {\n                version = null;\n                method = null;\n                methodString = null;\n                endOfContent = EndOfContent.UNKNOWN_CONTENT;\n                header = null;\n                if (quickStart(buffer))\n                    return true;\n            }\n\n            // Request/response line\n            if (state.ordinal() >= State.START.ordinal() && state.ordinal() < State.HEADER.ordinal()) {\n                if (parseLine(buffer))\n                    return true;\n            }\n\n            // parse headers\n            if (state == State.HEADER) {\n                if (parseFields(buffer))\n                    return true;\n            }\n\n            // parse content\n            if (state.ordinal() >= State.CONTENT.ordinal() && state.ordinal() < State.TRAILER.ordinal()) {\n                // Handle HEAD response\n                if (responseStatus > 0 && headResponse) {\n                    setState(State.END);\n                    return handleContentMessage();\n                } else {\n                    if (parseContent(buffer))\n                        return true;\n                }\n            }\n\n            // parse headers\n            if (state == State.TRAILER) {\n                if (parseFields(buffer))\n                    return true;\n            }\n\n            // handle end states\n            if (state == State.END) {\n                // eat white space\n                while (buffer.remaining() > 0 && buffer.get(buffer.position()) <= HttpTokens.SPACE)\n                    buffer.get();\n            } else if (isClose() || isClosed()) {\n                BufferUtils.clear(buffer);\n            }\n\n            // Handle EOF\n            if (eof && !buffer.hasRemaining()) {\n                switch (state) {\n                    case CLOSED:\n                        break;\n\n                    case START:\n                        setState(State.CLOSED);\n                        handler.earlyEOF();\n                        break;\n\n                    case END:\n                    case CLOSE:\n                        setState(State.CLOSED);\n                        break;\n\n                    case EOF_CONTENT:\n                    case TRAILER:\n                        if (fieldState == FieldState.FIELD) {\n                            // Be forgiving of missing last CRLF\n                            setState(State.CLOSED);\n                            return handleContentMessage();\n                        }\n                        setState(State.CLOSED);\n                        handler.earlyEOF();\n                        break;\n\n                    case CONTENT:\n                    case CHUNKED_CONTENT:\n                    case CHUNK_SIZE:\n                    case CHUNK_PARAMS:\n                    case CHUNK:\n                        setState(State.CLOSED);\n                        handler.earlyEOF();\n                        break;\n\n                    default:\n                        if (DEBUG)\n                            LOG.debug(\"{} EOF in {}\", this, state);\n                        setState(State.CLOSED);\n                        handler.badMessage(new BadMessageException(HttpStatus.BAD_REQUEST_400));\n                        break;\n                }\n            }\n        } catch (BadMessageException x) {\n            BufferUtils.clear(buffer);\n            badMessage(x);\n        } catch (Throwable x) {\n            BufferUtils.clear(buffer);\n            badMessage(new BadMessageException(HttpStatus.BAD_REQUEST_400, requestHandler != null ? \"Bad Request\" : \"Bad Response\", x));\n        }\n        return false;\n    }", "signature": "boolean parseNext(ByteBuffer buffer)", "full_signature": "public boolean parseNext(ByteBuffer buffer)", "class_method_signature": "HttpParser.parseNext(ByteBuffer buffer)", "testcase": false, "constructor": false, "invocations": ["debug", "toDetailString", "quickStart", "ordinal", "ordinal", "ordinal", "ordinal", "parseLine", "parseFields", "ordinal", "ordinal", "ordinal", "ordinal", "setState", "handleContentMessage", "parseContent", "parseFields", "remaining", "get", "position", "get", "isClose", "isClosed", "clear", "hasRemaining", "setState", "earlyEOF", "setState", "setState", "handleContentMessage", "setState", "earlyEOF", "setState", "earlyEOF", "debug", "setState", "badMessage", "clear", "badMessage", "clear", "badMessage"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}