{"test_class": {"identifier": "DelegatingAuthenticatorTest", "superclass": "extends BaseAuthenticatorTest", "interfaces": "", "fields": [{"original_string": "private Server jettyServer;", "modifier": "private", "type": "Server", "declarator": "jettyServer", "var_name": "jettyServer"}, {"original_string": "private String url;", "modifier": "private", "type": "String", "declarator": "url", "var_name": "url"}], "file": "agent/jvm/src/test/java/org/jolokia/jvmagent/security/DelegatingAuthenticatorTest.java"}, "test_case": {"identifier": "invalidProtocol", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invalidProtocol() {\n        DelegatingAuthenticator authenticator = new DelegatingAuthenticator(\"jolokia\",\"ftp://ftp.redhat.com\",null,false);\n\n        Authenticator.Result result = authenticator.authenticate(createHttpExchange(new Headers()));\n        Authenticator.Failure failure = (Authenticator.Failure) result;\n        assertEquals(failure.getResponseCode(),401);\n    }", "signature": "void invalidProtocol()", "full_signature": "@Test public void invalidProtocol()", "class_method_signature": "DelegatingAuthenticatorTest.invalidProtocol()", "testcase": true, "constructor": false, "invocations": ["authenticate", "createHttpExchange", "assertEquals", "getResponseCode"]}, "focal_class": {"identifier": "DelegatingAuthenticator", "superclass": "extends Authenticator", "interfaces": "", "fields": [{"original_string": "private final URL delegateURL;", "modifier": "private final", "type": "URL", "declarator": "delegateURL", "var_name": "delegateURL"}, {"original_string": "private final PrincipalExtractor principalExtractor;", "modifier": "private final", "type": "PrincipalExtractor", "declarator": "principalExtractor", "var_name": "principalExtractor"}, {"original_string": "private final String realm;", "modifier": "private final", "type": "String", "declarator": "realm", "var_name": "realm"}, {"original_string": "private SSLSocketFactory sslSocketFactory;", "modifier": "private", "type": "SSLSocketFactory", "declarator": "sslSocketFactory", "var_name": "sslSocketFactory"}, {"original_string": "private HostnameVerifier hostnameVerifier;", "modifier": "private", "type": "HostnameVerifier", "declarator": "hostnameVerifier", "var_name": "hostnameVerifier"}], "methods": [{"identifier": "DelegatingAuthenticator", "parameters": "(String pRealm, String pUrl, String pPrincipalSpec, boolean pDisableCertCheck)", "modifiers": "public", "return": "", "signature": " DelegatingAuthenticator(String pRealm, String pUrl, String pPrincipalSpec, boolean pDisableCertCheck)", "full_signature": "public  DelegatingAuthenticator(String pRealm, String pUrl, String pPrincipalSpec, boolean pDisableCertCheck)", "class_method_signature": "DelegatingAuthenticator.DelegatingAuthenticator(String pRealm, String pUrl, String pPrincipalSpec, boolean pDisableCertCheck)", "testcase": false, "constructor": true}, {"identifier": "authenticate", "parameters": "(HttpExchange pHttpExchange)", "modifiers": "@Override public", "return": "Result", "signature": "Result authenticate(HttpExchange pHttpExchange)", "full_signature": "@Override public Result authenticate(HttpExchange pHttpExchange)", "class_method_signature": "DelegatingAuthenticator.authenticate(HttpExchange pHttpExchange)", "testcase": false, "constructor": false}, {"identifier": "prepareFailure", "parameters": "(HttpExchange pHttpExchange, String pErrorDetails, int pCode)", "modifiers": "private", "return": "Result", "signature": "Result prepareFailure(HttpExchange pHttpExchange, String pErrorDetails, int pCode)", "full_signature": "private Result prepareFailure(HttpExchange pHttpExchange, String pErrorDetails, int pCode)", "class_method_signature": "DelegatingAuthenticator.prepareFailure(HttpExchange pHttpExchange, String pErrorDetails, int pCode)", "testcase": false, "constructor": false}, {"identifier": "createPrincipalExtractor", "parameters": "(String pPrincipalExtractorSpec)", "modifiers": "private", "return": "PrincipalExtractor", "signature": "PrincipalExtractor createPrincipalExtractor(String pPrincipalExtractorSpec)", "full_signature": "private PrincipalExtractor createPrincipalExtractor(String pPrincipalExtractorSpec)", "class_method_signature": "DelegatingAuthenticator.createPrincipalExtractor(String pPrincipalExtractorSpec)", "testcase": false, "constructor": false}, {"identifier": "disableSSLCertificateChecking", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void disableSSLCertificateChecking()", "full_signature": "private void disableSSLCertificateChecking()", "class_method_signature": "DelegatingAuthenticator.disableSSLCertificateChecking()", "testcase": false, "constructor": false}], "file": "agent/jvm/src/main/java/org/jolokia/jvmagent/security/DelegatingAuthenticator.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(HttpExchange pHttpExchange)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result authenticate(HttpExchange pHttpExchange) {\n        try {\n            URLConnection connection = delegateURL.openConnection();\n            String authorization = pHttpExchange.getRequestHeaders()\n                .getFirst(\"Authorization\");\n            if(authorization == null){//In case middleware strips Authorization, allow alternate header\n                authorization = pHttpExchange.getRequestHeaders()\n                    .getFirst(AuthorizationHeaderParser.JOLOKIA_ALTERNATE_AUTHORIZATION_HEADER);\n            }\n            connection.addRequestProperty(\"Authorization\",\n                authorization);\n            connection.setConnectTimeout(2000);\n            connection.connect();\n            if (connection instanceof HttpURLConnection) {\n                HttpURLConnection httpConnection = (HttpURLConnection) connection;\n                if (connection instanceof HttpsURLConnection) {\n                    HttpsURLConnection httpsConnection = (HttpsURLConnection) connection;\n                    if (sslSocketFactory != null) {\n                        httpsConnection.setSSLSocketFactory(sslSocketFactory);\n                    }\n                    if (hostnameVerifier != null) {\n                        httpsConnection.setHostnameVerifier(hostnameVerifier);\n                    }\n                }\n                return httpConnection.getResponseCode() == 200 ?\n                        new Success(principalExtractor.extract(connection)) :\n                        new Failure(401);\n            } else {\n                return new Failure(401);\n            }\n        } catch (final IOException e) {\n            return prepareFailure(pHttpExchange, \"Cannot call delegate url \" + delegateURL + \": \" + e, 503);\n        } catch (final IllegalArgumentException e) {\n            return prepareFailure(pHttpExchange, \"Illegal Argument: \" + e, 400);\n        } catch (ParseException e) {\n            return prepareFailure(pHttpExchange, \"Invalid JSON response: \" + e, 422);\n        }\n    }", "signature": "Result authenticate(HttpExchange pHttpExchange)", "full_signature": "@Override public Result authenticate(HttpExchange pHttpExchange)", "class_method_signature": "DelegatingAuthenticator.authenticate(HttpExchange pHttpExchange)", "testcase": false, "constructor": false, "invocations": ["openConnection", "getFirst", "getRequestHeaders", "getFirst", "getRequestHeaders", "addRequestProperty", "setConnectTimeout", "connect", "setSSLSocketFactory", "setHostnameVerifier", "getResponseCode", "extract", "prepareFailure", "prepareFailure", "prepareFailure"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}