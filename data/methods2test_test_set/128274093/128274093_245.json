{"test_class": {"identifier": "DeferredScalarSubscriberTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/subscribers/DeferredScalarSubscriberTest.java"}, "test_case": {"identifier": "emissionRequestRace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void emissionRequestRace() {\n        Worker w = Schedulers.computation().createWorker();\n        try {\n            for (int i = 0; i < 10000; i++) {\n\n                final TestSubscriber<Integer> ts = TestSubscriber.create(0L);\n                TestingDeferredScalarSubscriber ds = new TestingDeferredScalarSubscriber(ts);\n                ds.setupDownstream();\n                ds.onNext(1);\n\n                final AtomicInteger ready = new AtomicInteger(2);\n\n                w.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        ready.decrementAndGet();\n                        while (ready.get() != 0) { }\n\n                        ts.request(1);\n                    }\n                });\n\n                ready.decrementAndGet();\n                while (ready.get() != 0) { }\n\n                ds.onComplete();\n\n                ts.awaitTerminalEvent(5, TimeUnit.SECONDS);\n                ts.assertValues(1);\n                ts.assertNoErrors();\n                ts.assertComplete();\n\n            }\n        } finally {\n            w.dispose();\n        }\n    }", "signature": "void emissionRequestRace()", "full_signature": "@Test public void emissionRequestRace()", "class_method_signature": "DeferredScalarSubscriberTest.emissionRequestRace()", "testcase": true, "constructor": false, "invocations": ["createWorker", "computation", "create", "setupDownstream", "onNext", "schedule", "decrementAndGet", "get", "request", "decrementAndGet", "get", "onComplete", "awaitTerminalEvent", "assertValues", "assertNoErrors", "assertComplete", "dispose"]}, "focal_class": {"identifier": "DeferredScalarSubscriber", "superclass": "extends DeferredScalarSubscription<R>", "interfaces": "implements FlowableSubscriber<T>", "fields": [{"original_string": "private static final long serialVersionUID = 2984505488220891551L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 2984505488220891551L", "var_name": "serialVersionUID"}, {"original_string": "protected Subscription s;", "modifier": "protected", "type": "Subscription", "declarator": "s", "var_name": "s"}, {"original_string": "protected boolean hasValue;", "modifier": "protected", "type": "boolean", "declarator": "hasValue", "var_name": "hasValue"}], "methods": [{"identifier": "DeferredScalarSubscriber", "parameters": "(Subscriber<? super R> actual)", "modifiers": "public", "return": "", "signature": " DeferredScalarSubscriber(Subscriber<? super R> actual)", "full_signature": "public  DeferredScalarSubscriber(Subscriber<? super R> actual)", "class_method_signature": "DeferredScalarSubscriber.DeferredScalarSubscriber(Subscriber<? super R> actual)", "testcase": false, "constructor": true}, {"identifier": "onSubscribe", "parameters": "(Subscription s)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Subscription s)", "full_signature": "@Override public void onSubscribe(Subscription s)", "class_method_signature": "DeferredScalarSubscriber.onSubscribe(Subscription s)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable t)", "full_signature": "@Override public void onError(Throwable t)", "class_method_signature": "DeferredScalarSubscriber.onError(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@Override public void onComplete()", "class_method_signature": "DeferredScalarSubscriber.onComplete()", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "DeferredScalarSubscriber.cancel()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/subscribers/DeferredScalarSubscriber.java"}, "focal_method": {"identifier": "onComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onComplete() {\n        if (hasValue) {\n            complete(value);\n        } else {\n            actual.onComplete();\n        }\n    }", "signature": "void onComplete()", "full_signature": "@Override public void onComplete()", "class_method_signature": "DeferredScalarSubscriber.onComplete()", "testcase": false, "constructor": false, "invocations": ["complete", "onComplete"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}