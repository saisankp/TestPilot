{"test_class": {"identifier": "NetUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "module/com.sandpolis.core.foundation/src/test/java/com/sandpolis/core/foundation/util/NetUtilTest.java"}, "test_case": {"identifier": "checkPort_1", "parameters": "()", "modifiers": "@Test @DisplayName(\"Check some localhost ports\")", "return": "void", "body": "@Test\n\t@DisplayName(\"Check some localhost ports\")\n\tvoid checkPort_1() throws IOException {\n\t\tassertFalse(checkPort(\"127.0.0.1\", 8923));\n\n\t\ttry (ServerSocket socket = new ServerSocket(8923)) {\n\t\t\tassertTrue(checkPort(\"127.0.0.1\", 8923));\n\t\t}\n\n\t\tassertFalse(checkPort(\"127.0.0.1\", 8923));\n\t}", "signature": "void checkPort_1()", "full_signature": "@Test @DisplayName(\"Check some localhost ports\") void checkPort_1()", "class_method_signature": "NetUtilTest.checkPort_1()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "checkPort", "assertTrue", "checkPort", "assertFalse", "checkPort"]}, "focal_class": {"identifier": "NetUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long DOWNLOAD_LIMIT = 536870912L;", "modifier": "private static final", "type": "long", "declarator": "DOWNLOAD_LIMIT = 536870912L", "var_name": "DOWNLOAD_LIMIT"}, {"original_string": "private static final int PORTCHECK_TIMEOUT = 850;", "modifier": "private static final", "type": "int", "declarator": "PORTCHECK_TIMEOUT = 850", "var_name": "PORTCHECK_TIMEOUT"}, {"original_string": "private static Map<Integer, String> serviceCache = new HashMap<>();", "modifier": "private static", "type": "Map<Integer, String>", "declarator": "serviceCache = new HashMap<>()", "var_name": "serviceCache"}, {"original_string": "private static boolean serviceResolutionEnabled = true;", "modifier": "private static", "type": "boolean", "declarator": "serviceResolutionEnabled = true", "var_name": "serviceResolutionEnabled"}], "methods": [{"identifier": "checkPort", "parameters": "(String host, int port)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkPort(String host, int port)", "full_signature": "public static boolean checkPort(String host, int port)", "class_method_signature": "NetUtil.checkPort(String host, int port)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(String url)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] download(String url)", "full_signature": "public static byte[] download(String url)", "class_method_signature": "NetUtil.download(String url)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(String url, File file)", "modifiers": "public static", "return": "void", "signature": "void download(String url, File file)", "full_signature": "public static void download(String url, File file)", "class_method_signature": "NetUtil.download(String url, File file)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(URL url)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] download(URL url)", "full_signature": "public static byte[] download(URL url)", "class_method_signature": "NetUtil.download(URL url)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(URL url, File file)", "modifiers": "public static", "return": "void", "signature": "void download(URL url, File file)", "full_signature": "public static void download(URL url, File file)", "class_method_signature": "NetUtil.download(URL url, File file)", "testcase": false, "constructor": false}, {"identifier": "serviceName", "parameters": "(int port)", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> serviceName(int port)", "full_signature": "public static Optional<String> serviceName(int port)", "class_method_signature": "NetUtil.serviceName(int port)", "testcase": false, "constructor": false}, {"identifier": "serviceName0", "parameters": "(int port)", "modifiers": "private static", "return": "String", "signature": "String serviceName0(int port)", "full_signature": "private static String serviceName0(int port)", "class_method_signature": "NetUtil.serviceName0(int port)", "testcase": false, "constructor": false}, {"identifier": "NetUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " NetUtil()", "full_signature": "private  NetUtil()", "class_method_signature": "NetUtil.NetUtil()", "testcase": false, "constructor": true}], "file": "module/com.sandpolis.core.foundation/src/main/java/com/sandpolis/core/foundation/util/NetUtil.java"}, "focal_method": {"identifier": "checkPort", "parameters": "(String host, int port)", "modifiers": "public static", "return": "boolean", "body": "public static boolean checkPort(String host, int port) {\n\t\tif (!DomainValidator.getInstance().isValid(host) && !InetAddressValidator.getInstance().isValid(host))\n\t\t\tthrow new IllegalArgumentException(\"Invalid host: \" + host);\n\t\tif (!ValidationUtil.port(port))\n\t\t\tthrow new IllegalArgumentException(\"Invalid port: \" + port);\n\n\t\ttry (Socket sock = new Socket()) {\n\t\t\tsock.connect(new InetSocketAddress(host, port), PORTCHECK_TIMEOUT);\n\t\t\treturn sock.isConnected();\n\t\t} catch (UnknownHostException e) {\n\t\t\treturn false;\n\t\t} catch (IOException e) {\n\t\t\treturn false;\n\t\t}\n\t}", "signature": "boolean checkPort(String host, int port)", "full_signature": "public static boolean checkPort(String host, int port)", "class_method_signature": "NetUtil.checkPort(String host, int port)", "testcase": false, "constructor": false, "invocations": ["isValid", "getInstance", "isValid", "getInstance", "port", "connect", "isConnected"]}, "repository": {"repo_id": 100069523, "url": "https://github.com/Subterranean-Security/Sandpolis", "stars": 25, "created": "8/11/2017 8:55:30 PM +00:00", "updates": "2020-01-27T01:41:01+00:00", "fork": "False", "license": "licensed"}}