{"test_class": {"identifier": "AccessBoundaryUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String MOCK_BUCKET = \"//storage.googleapis.com/projects/_/buckets/example\";", "modifier": "private static final", "type": "String", "declarator": "MOCK_BUCKET = \"//storage.googleapis.com/projects/_/buckets/example\"", "var_name": "MOCK_BUCKET"}], "file": "code/broker-server/src/test/java/com/google/cloud/broker/apps/brokerserver/accesstokens/AccessBoundaryUtilsTest.java"}, "test_case": {"identifier": "testBoundary", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBoundary() throws IOException {\n        GoogleCredentials credentials = CloudStorageUtils.getCloudStorageCredentials();\n        com.google.auth.oauth2.AccessToken rawAccessToken = credentials.refreshAccessToken();\n        AccessToken accessToken = new AccessToken(rawAccessToken.getTokenValue(), rawAccessToken.getExpirationTime().getTime());\n        AccessToken boundedToken = AccessBoundaryUtils.addAccessBoundary(accessToken, MOCK_BUCKET);\n        assertNotEquals(boundedToken.getValue(), rawAccessToken.getTokenValue());\n        assertNotEquals(boundedToken.getExpiresAt(), rawAccessToken.getExpirationTime().getTime());\n        // TODO: Verify the token is bounded to the bucket\n    }", "signature": "void testBoundary()", "full_signature": "@Test public void testBoundary()", "class_method_signature": "AccessBoundaryUtilsTest.testBoundary()", "testcase": true, "constructor": false, "invocations": ["getCloudStorageCredentials", "refreshAccessToken", "getTokenValue", "getTime", "getExpirationTime", "addAccessBoundary", "assertNotEquals", "getValue", "getTokenValue", "assertNotEquals", "getExpiresAt", "getTime", "getExpirationTime"]}, "focal_class": {"identifier": "AccessBoundaryUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "addAccessBoundary", "parameters": "(AccessToken accessToken, String target)", "modifiers": "public static", "return": "AccessToken", "signature": "AccessToken addAccessBoundary(AccessToken accessToken, String target)", "full_signature": "public static AccessToken addAccessBoundary(AccessToken accessToken, String target)", "class_method_signature": "AccessBoundaryUtils.addAccessBoundary(AccessToken accessToken, String target)", "testcase": false, "constructor": false}], "file": "code/broker-server/src/main/java/com/google/cloud/broker/apps/brokerserver/accesstokens/AccessBoundaryUtils.java"}, "focal_method": {"identifier": "addAccessBoundary", "parameters": "(AccessToken accessToken, String target)", "modifiers": "public static", "return": "AccessToken", "body": "public static AccessToken addAccessBoundary(AccessToken accessToken, String target) {\n        if (target == null || target.isEmpty()) {\n            return accessToken;\n        }\n\n        // Retrieve the access boundary permissions from configuration\n        JsonArray permissionsJSON = new JsonArray();\n        List<String> permissions = AppSettings.getInstance().getStringList(AppSettings.ACCESS_TOKEN_BOUNDARY_PERMISSIONS);\n        for (String permission: permissions) {\n            permissionsJSON.add(permission);\n        }\n\n        // Create the access boundary spec\n        Gson gson = new Gson();\n        JsonObject accessBoundaryRule = new JsonObject();\n        accessBoundaryRule.addProperty(\"availableResource\", target);\n        accessBoundaryRule.add(\"availablePermissions\", permissionsJSON);\n        JsonArray accessBoundaryRules = new JsonArray();\n        accessBoundaryRules.add(accessBoundaryRule);\n        JsonObject accessBoundary = new JsonObject();\n        accessBoundary.add(\"accessBoundaryRules\", accessBoundaryRules);\n        String encodedAccessBoundary;\n        try {\n            encodedAccessBoundary = URLEncoder.encode(gson.toJson(accessBoundary), StandardCharsets.UTF_8.toString());\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n        }\n\n        // Initialize the HTTP request\n        CloseableHttpClient httpClient = HttpClients.createDefault();\n        HttpPost httpPost = new HttpPost(\"https://securetoken.googleapis.com/v1alpha2/identitybindingtoken\");\n        httpPost.setHeader(\"Content-type\", \"application/json\");\n\n        // Set the request body\n        Map<String, String> requestBody = new HashMap<>();\n        requestBody.put(\"grant_type\", \"urn:ietf:params:oauth:grant-type:token-exchange\");\n        requestBody.put(\"subject_token_type\", \"urn:ietf:params:oauth:token-type:access_token\");\n        requestBody.put(\"requested_token_type\", \"urn:ietf:params:oauth:token-type:access_token\");\n        requestBody.put(\"subject_token\", accessToken.getValue());\n        requestBody.put(\"access_boundary\", encodedAccessBoundary);\n        try {\n            httpPost.setEntity(new StringEntity(gson.toJson(requestBody)));\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n        }\n\n        // Submit the request\n        BoundedAccessTokenResponse accessTokenResponse;\n        try {\n            CloseableHttpResponse response = httpClient.execute(httpPost);\n            if (response.getStatusLine().getStatusCode() != 200) {\n                throw Status.PERMISSION_DENIED.asRuntimeException();\n            }\n            accessTokenResponse = gson.fromJson(EntityUtils.toString(response.getEntity()), BoundedAccessTokenResponse.class);\n            httpClient.close();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\n        return new AccessToken(accessTokenResponse.access_token, accessTokenResponse.expires_in);\n    }", "signature": "AccessToken addAccessBoundary(AccessToken accessToken, String target)", "full_signature": "public static AccessToken addAccessBoundary(AccessToken accessToken, String target)", "class_method_signature": "AccessBoundaryUtils.addAccessBoundary(AccessToken accessToken, String target)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getStringList", "getInstance", "add", "addProperty", "add", "add", "add", "encode", "toJson", "toString", "createDefault", "setHeader", "put", "put", "put", "put", "getValue", "put", "setEntity", "toJson", "execute", "getStatusCode", "getStatusLine", "asRuntimeException", "fromJson", "toString", "getEntity", "close"]}, "repository": {"repo_id": 176837289, "url": "https://github.com/GoogleCloudPlatform/gcp-token-broker", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 27, "size": 1700, "license": "licensed"}}