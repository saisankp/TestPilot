{"test_class": {"identifier": "TestJSONUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log s_log = LogFactory.getLog(TestJSONUtil.class);", "modifier": "private static final", "type": "Log", "declarator": "s_log = LogFactory.getLog(TestJSONUtil.class)", "var_name": "s_log"}, {"original_string": "private static Invocable invocable;", "modifier": "private static", "type": "Invocable", "declarator": "invocable", "var_name": "invocable"}, {"original_string": "private static final int BAD_CHARS = 4096;", "modifier": "private static final", "type": "int", "declarator": "BAD_CHARS = 4096", "var_name": "BAD_CHARS"}], "file": "JSONUtil/src/test/java/org/kopitubruk/util/json/TestJSONUtil.java"}, "test_case": {"identifier": "testParser", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParser() throws ParseException\n    {\n        Object obj = JSONParser.parseJSON(\"{\\\"foo\\\":\\\"b\\\\\\\\\\\\\\\"ar\\\",\\\"a\\\":5,\\\"b\\\":2.37e24,c:Infinity,\\\"d\\\":NaN,\\\"e\\\":[1,2,3,{\\\"a\\\":4}]}\");\n        String json = JSONUtil.toJSON(obj);\n        assertEquals(\"{\\\"foo\\\":\\\"b\\\\\\\\\\\\\\\"ar\\\",\\\"a\\\":5,\\\"b\\\":2.37E24,\\\"c\\\":\\\"Infinity\\\",\\\"d\\\":\\\"NaN\\\",\\\"e\\\":[1,2,3,{\\\"a\\\":4}]}\", json);\n\n        obj = JSONParser.parseJSON(\"'foo'\");\n        assertEquals(\"foo\", obj);\n\n        obj = JSONParser.parseJSON(\"2.37e24\");\n        assertEquals(2.37e24, obj);\n\n        obj = JSONParser.parseJSON(\"Infinity\");\n        assertTrue(Double.isInfinite((Double)obj));\n\n        obj = JSONParser.parseJSON(\"NaN\");\n        assertTrue(Double.isNaN((Double)obj));\n\n        obj = JSONParser.parseJSON(\"false\");\n        assertEquals(Boolean.FALSE, obj);\n\n        obj = JSONParser.parseJSON(\"null\");\n        assertEquals(null, obj);\n\n        JSONConfig cfg = new JSONConfig().setUsePrimitiveArrays(true);\n\n        obj = JSONParser.parseJSON(\"[1.1,2.2,-3.134598765,4.0]\", cfg);\n        double[] doubles = (double[])obj;\n        assertEquals(new Double(1.1), new Double(doubles[0]));\n        assertEquals(new Double(2.2), new Double(doubles[1]));\n        assertEquals(new Double(-3.134598765), new Double(doubles[2]));\n        assertEquals(new Double(4.0), new Double(doubles[3]));\n\n        obj = JSONParser.parseJSON(\"[1.1,2.2,-3.134,4.0]\", cfg);\n        float[] floats = (float[])obj;\n        assertEquals(new Float(1.1), new Float(floats[0]));\n        assertEquals(new Float(2.2), new Float(floats[1]));\n        assertEquals(new Float(-3.134), new Float(floats[2]));\n        assertEquals(new Float(4.0), new Float(floats[3]));\n\n        obj = JSONParser.parseJSON(\"[1,2,-3,4]\", cfg);\n        byte[] bytes = (byte[])obj;\n        assertEquals(new Byte((byte)1), new Byte(bytes[0]));\n        assertEquals(new Byte((byte)2), new Byte(bytes[1]));\n        assertEquals(new Byte((byte)-3), new Byte(bytes[2]));\n        assertEquals(new Byte((byte)4), new Byte(bytes[3]));\n\n        // parse various forms of date strings.\n        cfg.setEncodeDatesAsStrings(true);\n        DateFormat fmt = cfg.getDateGenFormat();\n\n        Date dt = (Date)JSONParser.parseJSON(\"new Date(\\\"2015-09-16T14:08:34.034Z\\\")\", cfg);\n        assertEquals(\"2015-09-16T14:08:34.034Z\", fmt.format(dt));\n\n        dt = (Date)JSONParser.parseJSON(\"\\\"2015-09-16T14:08:34.034Z\\\"\", cfg);\n        assertEquals(\"2015-09-16T14:08:34.034Z\", fmt.format(dt));\n\n        dt = (Date)JSONParser.parseJSON(\"\\\"2015-09-16T14:08:34.034+01\\\"\", cfg);\n        assertEquals(\"2015-09-16T14:08:34.034Z\", fmt.format(dt));\n\n        dt = (Date)JSONParser.parseJSON(\"\\\"2015-09-16T14:08:34.034+01:30\\\"\", cfg);\n        assertEquals(\"2015-09-16T12:38:34.034Z\", fmt.format(dt));\n\n        dt = (Date)JSONParser.parseJSON(\"\\\"2015-09-16T14:08:34\\\"\", cfg);\n        assertEquals(\"2015-09-16T14:08:34.034Z\", fmt.format(dt));\n\n        dt = (Date)JSONParser.parseJSON(\"\\\"2015-09-16T14:08:34+01:30\\\"\", cfg);\n        assertEquals(\"2015-09-16T12:38:34.034Z\", fmt.format(dt));\n\n        // custom formats.\n        DateFormat nfmt = cfg.setDateGenFormat(\"EEE, d MMM yyyy HH:mm:ss Z\");\n        nfmt.setTimeZone(TimeZone.getTimeZone(\"US/Eastern\"));\n        cfg.addDateParseFormat(\"yyyy.MM.dd G 'at' HH:mm:ss z\");\n        dt = (Date)JSONParser.parseJSON(\"\\\"2001.07.04 AD at 12:08:56 EDT\\\"\", cfg);\n        assertEquals(\"Wed, 4 Jul 2001 12:08:56 -0400\", nfmt.format(dt));\n\n        // test that the old one still works.\n        dt = (Date)JSONParser.parseJSON(\"\\\"2015-09-16T14:08:34+01:30\\\"\", cfg);\n        assertEquals(\"2015-09-16T12:38:34.034Z\", fmt.format(dt));\n\n        try{\n            JSONParser.parseJSON(\"{\\\"foo\\\":\\\"b\\\\\\\\\\\\\\\"ar\\\",\\\"a\\\":5,\\\"b\\\":2.37e24,\\\"c\\\":&*^,\\\"d\\\":NaN,\\\"e\\\":[1,2,3,{\\\"a\\\":4}]}\");\n            fail(\"Expected JSONParserException for bad data\");\n        }catch ( JSONParserException e ){\n        }\n    }", "signature": "void testParser()", "full_signature": "@Test public void testParser()", "class_method_signature": "TestJSONUtil.testParser()", "testcase": true, "constructor": false, "invocations": ["parseJSON", "toJSON", "assertEquals", "parseJSON", "assertEquals", "parseJSON", "assertEquals", "parseJSON", "assertTrue", "isInfinite", "parseJSON", "assertTrue", "isNaN", "parseJSON", "assertEquals", "parseJSON", "assertEquals", "setUsePrimitiveArrays", "parseJSON", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "parseJSON", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "parseJSON", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "setEncodeDatesAsStrings", "getDateGenFormat", "parseJSON", "assertEquals", "format", "parseJSON", "assertEquals", "format", "parseJSON", "assertEquals", "format", "parseJSON", "assertEquals", "format", "parseJSON", "assertEquals", "format", "parseJSON", "assertEquals", "format", "setDateGenFormat", "setTimeZone", "getTimeZone", "addDateParseFormat", "parseJSON", "assertEquals", "format", "parseJSON", "assertEquals", "format", "parseJSON", "fail"]}, "focal_class": {"identifier": "JSONUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern JSON_NUMBER_PAT = Pattern.compile(\"^-?(?:(?:\\\\d+(?:\\\\.\\\\d+)?)|(?:\\\\.\\\\d+))(?:[eE][-+]?\\\\d+)?$\");", "modifier": "private static final", "type": "Pattern", "declarator": "JSON_NUMBER_PAT = Pattern.compile(\"^-?(?:(?:\\\\d+(?:\\\\.\\\\d+)?)|(?:\\\\.\\\\d+))(?:[eE][-+]?\\\\d+)?$\")", "var_name": "JSON_NUMBER_PAT"}, {"original_string": "private static final Pattern OCTAL_NUMBER_PAT = Pattern.compile(\"^-?0[0-7]+$\");", "modifier": "private static final", "type": "Pattern", "declarator": "OCTAL_NUMBER_PAT = Pattern.compile(\"^-?0[0-7]+$\")", "var_name": "OCTAL_NUMBER_PAT"}, {"original_string": "private static final Pattern VALID_ECMA5_PROPERTY_NAME_PAT =\n            Pattern.compile(\"^(?:[_\\\\$\\\\p{L}]|\\\\\\\\u\\\\p{XDigit}{4})\" +\n                             \"(?:[_\\\\$\\\\p{L}\\\\p{Nd}\\\\p{Mn}\\\\p{Mc}\\\\p{Pc}\\\\u200C\\\\u200D]|\\\\\\\\u\\\\p{XDigit}{4})*$\");", "modifier": "private static final", "type": "Pattern", "declarator": "VALID_ECMA5_PROPERTY_NAME_PAT =\n            Pattern.compile(\"^(?:[_\\\\$\\\\p{L}]|\\\\\\\\u\\\\p{XDigit}{4})\" +\n                             \"(?:[_\\\\$\\\\p{L}\\\\p{Nd}\\\\p{Mn}\\\\p{Mc}\\\\p{Pc}\\\\u200C\\\\u200D]|\\\\\\\\u\\\\p{XDigit}{4})*$\")", "var_name": "VALID_ECMA5_PROPERTY_NAME_PAT"}, {"original_string": "static final Pattern VALID_ECMA6_PROPERTY_NAME_PAT =\n            Pattern.compile(\"^(?:[_\\\\$\\\\p{L}\\\\p{Nl}]|\\\\\\\\u\\\\p{XDigit}{4}|\\\\\\\\u\\\\{\\\\p{XDigit}+\\\\})\" +\n                             \"(?:[_\\\\$\\\\p{L}\\\\p{Nl}\\\\p{Nd}\\\\p{Mn}\\\\p{Mc}\\\\p{Pc}\\\\u200C\\\\u200D]|\\\\\\\\u\\\\p{XDigit}{4}|\\\\\\\\u\\\\{\\\\p{XDigit}+\\\\})*$\");", "modifier": "static final", "type": "Pattern", "declarator": "VALID_ECMA6_PROPERTY_NAME_PAT =\n            Pattern.compile(\"^(?:[_\\\\$\\\\p{L}\\\\p{Nl}]|\\\\\\\\u\\\\p{XDigit}{4}|\\\\\\\\u\\\\{\\\\p{XDigit}+\\\\})\" +\n                             \"(?:[_\\\\$\\\\p{L}\\\\p{Nl}\\\\p{Nd}\\\\p{Mn}\\\\p{Mc}\\\\p{Pc}\\\\u200C\\\\u200D]|\\\\\\\\u\\\\p{XDigit}{4}|\\\\\\\\u\\\\{\\\\p{XDigit}+\\\\})*$\")", "var_name": "VALID_ECMA6_PROPERTY_NAME_PAT"}, {"original_string": "private static final Pattern VALID_JSON5_PROPERTY_NAME_PAT =\n            Pattern.compile(\"^([^\\u0000-\\u001F\\\\p{Cn}\\\"/\\\\\\\\]|\\\\\\\\[bfnrt\\\\\\\\/\\\"]|\\\\\\\\u\\\\p{XDigit}{4})+$\");", "modifier": "private static final", "type": "Pattern", "declarator": "VALID_JSON5_PROPERTY_NAME_PAT =\n            Pattern.compile(\"^([^\\u0000-\\u001F\\\\p{Cn}\\\"/\\\\\\\\]|\\\\\\\\[bfnrt\\\\\\\\/\\\"]|\\\\\\\\u\\\\p{XDigit}{4})+$\")", "var_name": "VALID_JSON5_PROPERTY_NAME_PAT"}, {"original_string": "private static final Pattern VALID_JSON6_PROPERTY_NAME_PAT =\n            Pattern.compile(\"^([^\\u0000-\\u001F\\\\p{Cn}\\\"/\\\\\\\\]|\\\\\\\\[bfnrt\\\\\\\\/\\\"]|\\\\\\\\u\\\\p{XDigit}{4}|\\\\\\\\u\\\\{\\\\p{XDigit}+\\\\})+$\");", "modifier": "private static final", "type": "Pattern", "declarator": "VALID_JSON6_PROPERTY_NAME_PAT =\n            Pattern.compile(\"^([^\\u0000-\\u001F\\\\p{Cn}\\\"/\\\\\\\\]|\\\\\\\\[bfnrt\\\\\\\\/\\\"]|\\\\\\\\u\\\\p{XDigit}{4}|\\\\\\\\u\\\\{\\\\p{XDigit}+\\\\})+$\")", "var_name": "VALID_JSON6_PROPERTY_NAME_PAT"}, {"original_string": "private static final Set<String> RESERVED_WORDS =\n            new HashSet<>(Arrays.asList(\n                                    /* keywords for ECMAScript 5.1 */\n                          \"break\", \"case\", \"catch\", \"continue\", \"debugger\",\n                          \"default\", \"delete\", \"do\", \"else\", \"finally\", \"for\",\n                          \"function\", \"if\", \"in\", \"instanceof\", \"new\", \"return\",\n                          \"switch\", \"this\", \"throw\", \"try\", \"typeof\", \"var\",\n                          \"void\", \"while\", \"with\",\n                                    /* future reserved words for ECMAScript 5.1 */\n                          \"class\", \"const\", \"enum\", \"export\", \"extends\",\n                          \"implements\", \"import\",  \"interface\", \"let\", \"package\",\n                          \"private\", \"protected\", \"public\", \"static\",\n                          \"super\", \"yield\",\n                                    /* future reserved words for ECMAScript 6 */\n                          \"await\",\n                                    /* literals */\n                          \"true\", \"false\", \"null\", \"undefined\", \"Infinity\", \"NaN\"));", "modifier": "private static final", "type": "Set<String>", "declarator": "RESERVED_WORDS =\n            new HashSet<>(Arrays.asList(\n                                    /* keywords for ECMAScript 5.1 */\n                          \"break\", \"case\", \"catch\", \"continue\", \"debugger\",\n                          \"default\", \"delete\", \"do\", \"else\", \"finally\", \"for\",\n                          \"function\", \"if\", \"in\", \"instanceof\", \"new\", \"return\",\n                          \"switch\", \"this\", \"throw\", \"try\", \"typeof\", \"var\",\n                          \"void\", \"while\", \"with\",\n                                    /* future reserved words for ECMAScript 5.1 */\n                          \"class\", \"const\", \"enum\", \"export\", \"extends\",\n                          \"implements\", \"import\",  \"interface\", \"let\", \"package\",\n                          \"private\", \"protected\", \"public\", \"static\",\n                          \"super\", \"yield\",\n                                    /* future reserved words for ECMAScript 6 */\n                          \"await\",\n                                    /* literals */\n                          \"true\", \"false\", \"null\", \"undefined\", \"Infinity\", \"NaN\"))", "var_name": "RESERVED_WORDS"}], "methods": [{"identifier": "toJSON", "parameters": "( Object obj )", "modifiers": "public static", "return": "String", "signature": "String toJSON( Object obj )", "full_signature": "public static String toJSON( Object obj )", "class_method_signature": "JSONUtil.toJSON( Object obj )", "testcase": false, "constructor": false}, {"identifier": "toJSON", "parameters": "( Object obj, JSONConfig cfg )", "modifiers": "public static", "return": "String", "signature": "String toJSON( Object obj, JSONConfig cfg )", "full_signature": "public static String toJSON( Object obj, JSONConfig cfg )", "class_method_signature": "JSONUtil.toJSON( Object obj, JSONConfig cfg )", "testcase": false, "constructor": false}, {"identifier": "toJSON", "parameters": "( Object obj, Writer json )", "modifiers": "public static", "return": "void", "signature": "void toJSON( Object obj, Writer json )", "full_signature": "public static void toJSON( Object obj, Writer json )", "class_method_signature": "JSONUtil.toJSON( Object obj, Writer json )", "testcase": false, "constructor": false}, {"identifier": "toJSON", "parameters": "( Object obj, JSONConfig cfg, Writer json )", "modifiers": "public static", "return": "void", "signature": "void toJSON( Object obj, JSONConfig cfg, Writer json )", "full_signature": "public static void toJSON( Object obj, JSONConfig cfg, Writer json )", "class_method_signature": "JSONUtil.toJSON( Object obj, JSONConfig cfg, Writer json )", "testcase": false, "constructor": false}, {"identifier": "appendPropertyValue", "parameters": "( Object propertyValue, Writer json, JSONConfig cfg )", "modifiers": "private static", "return": "void", "signature": "void appendPropertyValue( Object propertyValue, Writer json, JSONConfig cfg )", "full_signature": "private static void appendPropertyValue( Object propertyValue, Writer json, JSONConfig cfg )", "class_method_signature": "JSONUtil.appendPropertyValue( Object propertyValue, Writer json, JSONConfig cfg )", "testcase": false, "constructor": false}, {"identifier": "appendRecursiblePropertyValue", "parameters": "( Object propertyValue, Writer json, JSONConfig cfg, JSONType jsonType )", "modifiers": "private static", "return": "void", "signature": "void appendRecursiblePropertyValue( Object propertyValue, Writer json, JSONConfig cfg, JSONType jsonType )", "full_signature": "private static void appendRecursiblePropertyValue( Object propertyValue, Writer json, JSONConfig cfg, JSONType jsonType )", "class_method_signature": "JSONUtil.appendRecursiblePropertyValue( Object propertyValue, Writer json, JSONConfig cfg, JSONType jsonType )", "testcase": false, "constructor": false}, {"identifier": "appendSimplePropertyValue", "parameters": "( Object propertyValue, Writer json, JSONConfig cfg, JSONType jsonType )", "modifiers": "private static", "return": "void", "signature": "void appendSimplePropertyValue( Object propertyValue, Writer json, JSONConfig cfg, JSONType jsonType )", "full_signature": "private static void appendSimplePropertyValue( Object propertyValue, Writer json, JSONConfig cfg, JSONType jsonType )", "class_method_signature": "JSONUtil.appendSimplePropertyValue( Object propertyValue, Writer json, JSONConfig cfg, JSONType jsonType )", "testcase": false, "constructor": false}, {"identifier": "appendNumber", "parameters": "( Number num, Writer json, JSONConfig cfg )", "modifiers": "private static", "return": "void", "signature": "void appendNumber( Number num, Writer json, JSONConfig cfg )", "full_signature": "private static void appendNumber( Number num, Writer json, JSONConfig cfg )", "class_method_signature": "JSONUtil.appendNumber( Number num, Writer json, JSONConfig cfg )", "testcase": false, "constructor": false}, {"identifier": "appendDate", "parameters": "( Date date, Writer json, JSONConfig cfg )", "modifiers": "private static", "return": "void", "signature": "void appendDate( Date date, Writer json, JSONConfig cfg )", "full_signature": "private static void appendDate( Date date, Writer json, JSONConfig cfg )", "class_method_signature": "JSONUtil.appendDate( Date date, Writer json, JSONConfig cfg )", "testcase": false, "constructor": false}, {"identifier": "appendArrayPropertyValue", "parameters": "( Object propertyValue, Writer json, JSONConfig cfg )", "modifiers": "private static", "return": "void", "signature": "void appendArrayPropertyValue( Object propertyValue, Writer json, JSONConfig cfg )", "full_signature": "private static void appendArrayPropertyValue( Object propertyValue, Writer json, JSONConfig cfg )", "class_method_signature": "JSONUtil.appendArrayPropertyValue( Object propertyValue, Writer json, JSONConfig cfg )", "testcase": false, "constructor": false}, {"identifier": "appendObjectPropertyValue", "parameters": "( Map<?,?> map, Writer json, JSONConfig cfg )", "modifiers": "private static", "return": "void", "signature": "void appendObjectPropertyValue( Map<?,?> map, Writer json, JSONConfig cfg )", "full_signature": "private static void appendObjectPropertyValue( Map<?,?> map, Writer json, JSONConfig cfg )", "class_method_signature": "JSONUtil.appendObjectPropertyValue( Map<?,?> map, Writer json, JSONConfig cfg )", "testcase": false, "constructor": false}, {"identifier": "resourceBundleToMap", "parameters": "( ResourceBundle bundle )", "modifiers": "private static", "return": "Map<?,?>", "signature": "Map<?,?> resourceBundleToMap( ResourceBundle bundle )", "full_signature": "private static Map<?,?> resourceBundleToMap( ResourceBundle bundle )", "class_method_signature": "JSONUtil.resourceBundleToMap( ResourceBundle bundle )", "testcase": false, "constructor": false}, {"identifier": "getPropertyName", "parameters": "( Object key, JSONConfig cfg, Set<String> propertyNames )", "modifiers": "private static", "return": "String", "signature": "String getPropertyName( Object key, JSONConfig cfg, Set<String> propertyNames )", "full_signature": "private static String getPropertyName( Object key, JSONConfig cfg, Set<String> propertyNames )", "class_method_signature": "JSONUtil.getPropertyName( Object key, JSONConfig cfg, Set<String> propertyNames )", "testcase": false, "constructor": false}, {"identifier": "appendPropertyName", "parameters": "( String propertyName, Writer json, boolean quoteIdentifier )", "modifiers": "private static", "return": "void", "signature": "void appendPropertyName( String propertyName, Writer json, boolean quoteIdentifier )", "full_signature": "private static void appendPropertyName( String propertyName, Writer json, boolean quoteIdentifier )", "class_method_signature": "JSONUtil.appendPropertyName( String propertyName, Writer json, boolean quoteIdentifier )", "testcase": false, "constructor": false}, {"identifier": "escapeBadIdentifierCodePoints", "parameters": "( String propertyName, JSONConfig cfg )", "modifiers": "private static", "return": "String", "signature": "String escapeBadIdentifierCodePoints( String propertyName, JSONConfig cfg )", "full_signature": "private static String escapeBadIdentifierCodePoints( String propertyName, JSONConfig cfg )", "class_method_signature": "JSONUtil.escapeBadIdentifierCodePoints( String propertyName, JSONConfig cfg )", "testcase": false, "constructor": false}, {"identifier": "escapeNonAscii", "parameters": "( String str, JSONConfig cfg )", "modifiers": "private static", "return": "String", "signature": "String escapeNonAscii( String str, JSONConfig cfg )", "full_signature": "private static String escapeNonAscii( String str, JSONConfig cfg )", "class_method_signature": "JSONUtil.escapeNonAscii( String str, JSONConfig cfg )", "testcase": false, "constructor": false}, {"identifier": "escapeSurrogates", "parameters": "( String str, JSONConfig cfg )", "modifiers": "private static", "return": "String", "signature": "String escapeSurrogates( String str, JSONConfig cfg )", "full_signature": "private static String escapeSurrogates( String str, JSONConfig cfg )", "class_method_signature": "JSONUtil.escapeSurrogates( String str, JSONConfig cfg )", "testcase": false, "constructor": false}, {"identifier": "hasSurrogates", "parameters": "( String str )", "modifiers": "private static", "return": "boolean", "signature": "boolean hasSurrogates( String str )", "full_signature": "private static boolean hasSurrogates( String str )", "class_method_signature": "JSONUtil.hasSurrogates( String str )", "testcase": false, "constructor": false}, {"identifier": "writeString", "parameters": "( String strValue, Writer json, JSONConfig cfg, boolean checkNum )", "modifiers": "private static", "return": "void", "signature": "void writeString( String strValue, Writer json, JSONConfig cfg, boolean checkNum )", "full_signature": "private static void writeString( String strValue, Writer json, JSONConfig cfg, boolean checkNum )", "class_method_signature": "JSONUtil.writeString( String strValue, Writer json, JSONConfig cfg, boolean checkNum )", "testcase": false, "constructor": false}, {"identifier": "fastWriteString", "parameters": "( String strValue, Writer json )", "modifiers": "private static", "return": "void", "signature": "void fastWriteString( String strValue, Writer json )", "full_signature": "private static void fastWriteString( String strValue, Writer json )", "class_method_signature": "JSONUtil.fastWriteString( String strValue, Writer json )", "testcase": false, "constructor": false}, {"identifier": "isValidJSONNumber", "parameters": "( String numericString, JSONConfig cfg, Number num )", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidJSONNumber( String numericString, JSONConfig cfg, Number num )", "full_signature": "private static boolean isValidJSONNumber( String numericString, JSONConfig cfg, Number num )", "class_method_signature": "JSONUtil.isValidJSONNumber( String numericString, JSONConfig cfg, Number num )", "testcase": false, "constructor": false}, {"identifier": "isSafeJsonNumber", "parameters": "( Number num, String numericString, JSONConfig cfg )", "modifiers": "private static", "return": "boolean", "signature": "boolean isSafeJsonNumber( Number num, String numericString, JSONConfig cfg )", "full_signature": "private static boolean isSafeJsonNumber( Number num, String numericString, JSONConfig cfg )", "class_method_signature": "JSONUtil.isSafeJsonNumber( Number num, String numericString, JSONConfig cfg )", "testcase": false, "constructor": false}, {"identifier": "getBundle", "parameters": "( Locale locale )", "modifiers": "static", "return": "ResourceBundle", "signature": "ResourceBundle getBundle( Locale locale )", "full_signature": "static ResourceBundle getBundle( Locale locale )", "class_method_signature": "JSONUtil.getBundle( Locale locale )", "testcase": false, "constructor": false}, {"identifier": "getJavascriptReservedWords", "parameters": "()", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getJavascriptReservedWords()", "full_signature": "public static Set<String> getJavascriptReservedWords()", "class_method_signature": "JSONUtil.getJavascriptReservedWords()", "testcase": false, "constructor": false}, {"identifier": "isReservedWord", "parameters": "( String name )", "modifiers": "public static", "return": "boolean", "signature": "boolean isReservedWord( String name )", "full_signature": "public static boolean isReservedWord( String name )", "class_method_signature": "JSONUtil.isReservedWord( String name )", "testcase": false, "constructor": false}, {"identifier": "isValidIdentifierStart", "parameters": "( int codePoint, JSONConfig cfg )", "modifiers": "static", "return": "boolean", "signature": "boolean isValidIdentifierStart( int codePoint, JSONConfig cfg )", "full_signature": "static boolean isValidIdentifierStart( int codePoint, JSONConfig cfg )", "class_method_signature": "JSONUtil.isValidIdentifierStart( int codePoint, JSONConfig cfg )", "testcase": false, "constructor": false}, {"identifier": "isValidIdentifierPart", "parameters": "( int codePoint, JSONConfig cfg )", "modifiers": "static", "return": "boolean", "signature": "boolean isValidIdentifierPart( int codePoint, JSONConfig cfg )", "full_signature": "static boolean isValidIdentifierPart( int codePoint, JSONConfig cfg )", "class_method_signature": "JSONUtil.isValidIdentifierPart( int codePoint, JSONConfig cfg )", "testcase": false, "constructor": false}, {"identifier": "checkValidJavascriptPropertyName", "parameters": "( String propertyName, JSONConfig cfg )", "modifiers": "public static", "return": "void", "signature": "void checkValidJavascriptPropertyName( String propertyName, JSONConfig cfg )", "full_signature": "public static void checkValidJavascriptPropertyName( String propertyName, JSONConfig cfg )", "class_method_signature": "JSONUtil.checkValidJavascriptPropertyName( String propertyName, JSONConfig cfg )", "testcase": false, "constructor": false}, {"identifier": "checkValidJavascriptPropertyName", "parameters": "( String propertyName )", "modifiers": "public static", "return": "void", "signature": "void checkValidJavascriptPropertyName( String propertyName )", "full_signature": "public static void checkValidJavascriptPropertyName( String propertyName )", "class_method_signature": "JSONUtil.checkValidJavascriptPropertyName( String propertyName )", "testcase": false, "constructor": false}, {"identifier": "checkValidJavascriptPropertyNameImpl", "parameters": "( String propertyName, JSONConfig cfg )", "modifiers": "private static", "return": "void", "signature": "void checkValidJavascriptPropertyNameImpl( String propertyName, JSONConfig cfg )", "full_signature": "private static void checkValidJavascriptPropertyNameImpl( String propertyName, JSONConfig cfg )", "class_method_signature": "JSONUtil.checkValidJavascriptPropertyNameImpl( String propertyName, JSONConfig cfg )", "testcase": false, "constructor": false}, {"identifier": "isValidJavascriptPropertyName", "parameters": "( String propertyName, JSONConfig cfg )", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidJavascriptPropertyName( String propertyName, JSONConfig cfg )", "full_signature": "public static boolean isValidJavascriptPropertyName( String propertyName, JSONConfig cfg )", "class_method_signature": "JSONUtil.isValidJavascriptPropertyName( String propertyName, JSONConfig cfg )", "testcase": false, "constructor": false}, {"identifier": "isValidJavascriptPropertyName", "parameters": "( String propertyName )", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidJavascriptPropertyName( String propertyName )", "full_signature": "public static boolean isValidJavascriptPropertyName( String propertyName )", "class_method_signature": "JSONUtil.isValidJavascriptPropertyName( String propertyName )", "testcase": false, "constructor": false}, {"identifier": "isValidJavascriptPropertyNameImpl", "parameters": "( String propertyName, JSONConfig cfg )", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidJavascriptPropertyNameImpl( String propertyName, JSONConfig cfg )", "full_signature": "private static boolean isValidJavascriptPropertyNameImpl( String propertyName, JSONConfig cfg )", "class_method_signature": "JSONUtil.isValidJavascriptPropertyNameImpl( String propertyName, JSONConfig cfg )", "testcase": false, "constructor": false}, {"identifier": "getPropertyNameValidationPattern", "parameters": "( JSONConfig cfg )", "modifiers": "static", "return": "Pattern", "signature": "Pattern getPropertyNameValidationPattern( JSONConfig cfg )", "full_signature": "static Pattern getPropertyNameValidationPattern( JSONConfig cfg )", "class_method_signature": "JSONUtil.getPropertyNameValidationPattern( JSONConfig cfg )", "testcase": false, "constructor": false}, {"identifier": "JSONUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " JSONUtil()", "full_signature": "private  JSONUtil()", "class_method_signature": "JSONUtil.JSONUtil()", "testcase": false, "constructor": true}], "file": "JSONUtil/src/main/java/org/kopitubruk/util/json/JSONUtil.java"}, "focal_method": {"identifier": "toJSON", "parameters": "( Object obj )", "modifiers": "public static", "return": "String", "body": "public static String toJSON( Object obj )\n    {\n        return toJSON(obj, (JSONConfig)null);\n    }", "signature": "String toJSON( Object obj )", "full_signature": "public static String toJSON( Object obj )", "class_method_signature": "JSONUtil.toJSON( Object obj )", "testcase": false, "constructor": false, "invocations": ["toJSON"]}, "repository": {"repo_id": 38781549, "url": "https://github.com/billdavidson/JSONUtil", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 49, "size": 6087, "license": "licensed"}}