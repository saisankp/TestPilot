{"test_class": {"identifier": "MDLRXNV2000ReaderTest", "superclass": "extends SimpleChemObjectReaderTest", "interfaces": "", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(MDLRXNV2000ReaderTest.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(MDLRXNV2000ReaderTest.class)", "var_name": "logger"}], "file": "storage/ctab/src/test/java/org/openscience/cdk/io/MDLRXNV2000ReaderTest.java"}, "test_case": {"identifier": "optionalSdfSeparator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void optionalSdfSeparator() throws Exception {\n        String dummyRecord = \"ethanol\\n\" +\n                       \"  Mrv1810 09251921392D          \\n\" +\n                       \"\\n\" +\n                       \"  3  2  0  0  0  0            999 V2000\\n\" +\n                       \"    1.9520   -1.1270    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\\n\" +\n                       \"    1.2375   -0.7145    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\\n\" +\n                       \"    2.6664   -0.7145    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\\n\" +\n                       \"  1  2  1  0  0  0  0\\n\" +\n                       \"  1  3  1  0  0  0  0\\n\" +\n                       \"M  END\\n\" +\n                       \"$$$$\\n\";\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"$RXN\\n\");\n        sb.append(\"Test\\n\\n\\n  2  1\\n\");\n        sb.append(\"$MOL\\n\");\n        sb.append(dummyRecord);\n        sb.append(\"$MOL\\n\");\n        sb.append(dummyRecord);\n        sb.append(\"$MOL\\n\");\n        sb.append(dummyRecord);\n\n        IChemObjectBuilder bldr = SilentChemObjectBuilder.getInstance();\n        try (MDLRXNV2000Reader reader = new MDLRXNV2000Reader(new StringReader(sb.toString()))) {\n            IReaction rxn = reader.read(bldr.newInstance(IReaction.class));\n            assertThat(rxn.getReactants().getAtomContainerCount(), is(2));\n            assertThat(rxn.getProducts().getAtomContainerCount(), is(1));\n            assertThat(rxn.getReactants().getAtomContainer(0).getAtomCount(), is(3));\n            assertThat(rxn.getReactants().getAtomContainer(1).getAtomCount(), is(3));\n        }\n    }", "signature": "void optionalSdfSeparator()", "full_signature": "@Test public void optionalSdfSeparator()", "class_method_signature": "MDLRXNV2000ReaderTest.optionalSdfSeparator()", "testcase": true, "constructor": false, "invocations": ["append", "append", "append", "append", "append", "append", "append", "append", "getInstance", "toString", "read", "newInstance", "assertThat", "getAtomContainerCount", "getReactants", "is", "assertThat", "getAtomContainerCount", "getProducts", "is", "assertThat", "getAtomCount", "getAtomContainer", "getReactants", "is", "assertThat", "getAtomCount", "getAtomContainer", "getReactants", "is"]}, "focal_class": {"identifier": "MDLRXNV2000Reader", "superclass": "extends DefaultChemObjectReader", "interfaces": "", "fields": [{"original_string": "BufferedReader              input  = null;", "modifier": "", "type": "BufferedReader", "declarator": "input  = null", "var_name": "input"}, {"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(MDLRXNV2000Reader.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(MDLRXNV2000Reader.class)", "var_name": "logger"}], "methods": [{"identifier": "MDLRXNV2000Reader", "parameters": "(Reader in)", "modifiers": "public", "return": "", "signature": " MDLRXNV2000Reader(Reader in)", "full_signature": "public  MDLRXNV2000Reader(Reader in)", "class_method_signature": "MDLRXNV2000Reader.MDLRXNV2000Reader(Reader in)", "testcase": false, "constructor": true}, {"identifier": "MDLRXNV2000Reader", "parameters": "(Reader in, Mode mode)", "modifiers": "public", "return": "", "signature": " MDLRXNV2000Reader(Reader in, Mode mode)", "full_signature": "public  MDLRXNV2000Reader(Reader in, Mode mode)", "class_method_signature": "MDLRXNV2000Reader.MDLRXNV2000Reader(Reader in, Mode mode)", "testcase": false, "constructor": true}, {"identifier": "MDLRXNV2000Reader", "parameters": "(InputStream input)", "modifiers": "public", "return": "", "signature": " MDLRXNV2000Reader(InputStream input)", "full_signature": "public  MDLRXNV2000Reader(InputStream input)", "class_method_signature": "MDLRXNV2000Reader.MDLRXNV2000Reader(InputStream input)", "testcase": false, "constructor": true}, {"identifier": "MDLRXNV2000Reader", "parameters": "(InputStream input, Mode mode)", "modifiers": "public", "return": "", "signature": " MDLRXNV2000Reader(InputStream input, Mode mode)", "full_signature": "public  MDLRXNV2000Reader(InputStream input, Mode mode)", "class_method_signature": "MDLRXNV2000Reader.MDLRXNV2000Reader(InputStream input, Mode mode)", "testcase": false, "constructor": true}, {"identifier": "MDLRXNV2000Reader", "parameters": "()", "modifiers": "public", "return": "", "signature": " MDLRXNV2000Reader()", "full_signature": "public  MDLRXNV2000Reader()", "class_method_signature": "MDLRXNV2000Reader.MDLRXNV2000Reader()", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "IResourceFormat", "signature": "IResourceFormat getFormat()", "full_signature": "@Override public IResourceFormat getFormat()", "class_method_signature": "MDLRXNV2000Reader.getFormat()", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(Reader input)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(Reader input)", "full_signature": "@Override public void setReader(Reader input)", "class_method_signature": "MDLRXNV2000Reader.setReader(Reader input)", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(InputStream input)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(InputStream input)", "full_signature": "@Override public void setReader(InputStream input)", "class_method_signature": "MDLRXNV2000Reader.setReader(InputStream input)", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> classObject)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accepts(Class<? extends IChemObject> classObject)", "full_signature": "@Override public boolean accepts(Class<? extends IChemObject> classObject)", "class_method_signature": "MDLRXNV2000Reader.accepts(Class<? extends IChemObject> classObject)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(T object)", "modifiers": "@Override public", "return": "T", "signature": "T read(T object)", "full_signature": "@Override public T read(T object)", "class_method_signature": "MDLRXNV2000Reader.read(T object)", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(IChemObject object)", "modifiers": "public", "return": "boolean", "signature": "boolean accepts(IChemObject object)", "full_signature": "public boolean accepts(IChemObject object)", "class_method_signature": "MDLRXNV2000Reader.accepts(IChemObject object)", "testcase": false, "constructor": false}, {"identifier": "readReaction", "parameters": "(IChemObjectBuilder builder)", "modifiers": "private", "return": "IReaction", "signature": "IReaction readReaction(IChemObjectBuilder builder)", "full_signature": "private IReaction readReaction(IChemObjectBuilder builder)", "class_method_signature": "MDLRXNV2000Reader.readReaction(IChemObjectBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "processMol", "parameters": "(IAtomContainer mol, List<IAtomContainer> components, StringBuilder sb)", "modifiers": "private", "return": "void", "signature": "void processMol(IAtomContainer mol, List<IAtomContainer> components, StringBuilder sb)", "full_signature": "private void processMol(IAtomContainer mol, List<IAtomContainer> components, StringBuilder sb)", "class_method_signature": "MDLRXNV2000Reader.processMol(IAtomContainer mol, List<IAtomContainer> components, StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "MDLRXNV2000Reader.close()", "testcase": false, "constructor": false}], "file": "storage/ctab/src/main/java/org/openscience/cdk/io/MDLRXNV2000Reader.java"}, "focal_method": {"identifier": "read", "parameters": "(T object)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T extends IChemObject> T read(T object) throws CDKException {\n        if (object instanceof IReaction) {\n            return (T) readReaction(object.getBuilder());\n        } else if (object instanceof IReactionSet) {\n            IReactionSet reactionSet = object.getBuilder().newInstance(IReactionSet.class);\n            reactionSet.addReaction(readReaction(object.getBuilder()));\n            return (T) reactionSet;\n        } else if (object instanceof IChemModel) {\n            IChemModel model = object.getBuilder().newInstance(IChemModel.class);\n            IReactionSet reactionSet = object.getBuilder().newInstance(IReactionSet.class);\n            reactionSet.addReaction(readReaction(object.getBuilder()));\n            model.setReactionSet(reactionSet);\n            return (T) model;\n        } else if (object instanceof IChemFile) {\n            IChemFile chemFile = object.getBuilder().newInstance(IChemFile.class);\n            IChemSequence sequence = object.getBuilder().newInstance(IChemSequence.class);\n            sequence.addChemModel((IChemModel) read(object.getBuilder().newInstance(IChemModel.class)));\n            chemFile.addChemSequence(sequence);\n            return (T) chemFile;\n        } else {\n            throw new CDKException(\"Only supported are Reaction and ChemModel, and not \" + object.getClass().getName()\n                    + \".\");\n        }\n    }", "signature": "T read(T object)", "full_signature": "@Override public T read(T object)", "class_method_signature": "MDLRXNV2000Reader.read(T object)", "testcase": false, "constructor": false, "invocations": ["readReaction", "getBuilder", "newInstance", "getBuilder", "addReaction", "readReaction", "getBuilder", "newInstance", "getBuilder", "newInstance", "getBuilder", "addReaction", "readReaction", "getBuilder", "setReactionSet", "newInstance", "getBuilder", "newInstance", "getBuilder", "addChemModel", "read", "newInstance", "getBuilder", "addChemSequence", "getName", "getClass"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}