{"test_class": {"identifier": "JDBCUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    Connection connection;", "modifier": "@Mock", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock\n    Statement statement;", "modifier": "@Mock", "type": "Statement", "declarator": "statement", "var_name": "statement"}, {"original_string": "@Mock\n    ResultSet resultSet;", "modifier": "@Mock", "type": "ResultSet", "declarator": "resultSet", "var_name": "resultSet"}, {"original_string": "@Mock\n    ResultSetMetaData metaData;", "modifier": "@Mock", "type": "ResultSetMetaData", "declarator": "metaData", "var_name": "metaData"}, {"original_string": "@Mock\n    Clob clob;", "modifier": "@Mock", "type": "Clob", "declarator": "clob", "var_name": "clob"}], "file": "kie-soup-dataset/kie-soup-dataset-sql/src/test/java/org/dashbuilder/dataprovider/sql/JDBCUtilsTest.java"}, "test_case": {"identifier": "testSupportedTypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSupportedTypes() throws Exception {\n        when(metaData.getColumnCount()).thenReturn(35);\n        when(metaData.getColumnType(1)).thenReturn(Types.CHAR);\n        when(metaData.getColumnType(2)).thenReturn(Types.VARCHAR);\n        when(metaData.getColumnType(3)).thenReturn(Types.NCHAR);\n        when(metaData.getColumnType(4)).thenReturn(Types.NVARCHAR);\n        when(metaData.getColumnType(5)).thenReturn(Types.BIT);\n        when(metaData.getColumnType(6)).thenReturn(Types.BOOLEAN);\n        when(metaData.getColumnType(7)).thenReturn(Types.LONGVARCHAR);\n        when(metaData.getColumnType(8)).thenReturn(Types.LONGNVARCHAR);\n        when(metaData.getColumnType(9)).thenReturn(Types.TINYINT);\n        when(metaData.getColumnType(10)).thenReturn(Types.BIGINT);\n        when(metaData.getColumnType(11)).thenReturn(Types.INTEGER);\n        when(metaData.getColumnType(12)).thenReturn(Types.DECIMAL);\n        when(metaData.getColumnType(13)).thenReturn(Types.DOUBLE);\n        when(metaData.getColumnType(14)).thenReturn(Types.FLOAT);\n        when(metaData.getColumnType(15)).thenReturn(Types.NUMERIC);\n        when(metaData.getColumnType(16)).thenReturn(Types.REAL);\n        when(metaData.getColumnType(17)).thenReturn(Types.SMALLINT);\n        when(metaData.getColumnType(18)).thenReturn(Types.DATE);\n        when(metaData.getColumnType(19)).thenReturn(Types.TIME);\n        when(metaData.getColumnType(20)).thenReturn(Types.TIMESTAMP);\n        when(metaData.getColumnType(21)).thenReturn(Types.VARBINARY);\n        when(metaData.getColumnType(22)).thenReturn(Types.LONGVARBINARY);\n        when(metaData.getColumnType(23)).thenReturn(Types.NULL);\n        when(metaData.getColumnType(24)).thenReturn(Types.OTHER);\n        when(metaData.getColumnType(25)).thenReturn(Types.JAVA_OBJECT);\n        when(metaData.getColumnType(26)).thenReturn(Types.DISTINCT);\n        when(metaData.getColumnType(27)).thenReturn(Types.STRUCT);\n        when(metaData.getColumnType(28)).thenReturn(Types.ARRAY);\n        when(metaData.getColumnType(29)).thenReturn(Types.BLOB);\n        when(metaData.getColumnType(30)).thenReturn(Types.CLOB);\n        when(metaData.getColumnType(31)).thenReturn(Types.REF);\n        when(metaData.getColumnType(32)).thenReturn(Types.ROWID);\n        when(metaData.getColumnType(33)).thenReturn(Types.SQLXML);\n        when(metaData.getColumnType(34)).thenReturn(Types.DATALINK);\n\n        List<Column> columns = JDBCUtils.getColumns(resultSet, null);\n        assertEquals(columns.size(), 21);\n        assertEquals(columns.get(0).getType(), ColumnType.LABEL);\n        assertEquals(columns.get(1).getType(), ColumnType.LABEL);\n        assertEquals(columns.get(2).getType(), ColumnType.LABEL);\n        assertEquals(columns.get(4).getType(), ColumnType.LABEL);\n        assertEquals(columns.get(5).getType(), ColumnType.LABEL);\n        assertEquals(columns.get(6).getType(), ColumnType.TEXT);\n        assertEquals(columns.get(7).getType(), ColumnType.TEXT);\n        assertEquals(columns.get(8).getType(), ColumnType.NUMBER);\n        assertEquals(columns.get(9).getType(), ColumnType.NUMBER);\n        assertEquals(columns.get(10).getType(), ColumnType.NUMBER);\n        assertEquals(columns.get(11).getType(), ColumnType.NUMBER);\n        assertEquals(columns.get(12).getType(), ColumnType.NUMBER);\n        assertEquals(columns.get(13).getType(), ColumnType.NUMBER);\n        assertEquals(columns.get(14).getType(), ColumnType.NUMBER);\n        assertEquals(columns.get(15).getType(), ColumnType.NUMBER);\n        assertEquals(columns.get(16).getType(), ColumnType.NUMBER);\n        assertEquals(columns.get(17).getType(), ColumnType.DATE);\n        assertEquals(columns.get(18).getType(), ColumnType.DATE);\n        assertEquals(columns.get(19).getType(), ColumnType.DATE);\n        assertEquals(columns.get(20).getType(), ColumnType.TEXT);\n    }", "signature": "void testSupportedTypes()", "full_signature": "@Test public void testSupportedTypes()", "class_method_signature": "JDBCUtilsTest.testSupportedTypes()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getColumnCount", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "thenReturn", "when", "getColumnType", "getColumns", "assertEquals", "size", "assertEquals", "getType", "get", "assertEquals", "getType", "get", "assertEquals", "getType", "get", "assertEquals", "getType", "get", "assertEquals", "getType", "get", "assertEquals", "getType", "get", "assertEquals", "getType", "get", "assertEquals", "getType", "get", "assertEquals", "getType", "get", "assertEquals", "getType", "get", "assertEquals", "getType", "get", "assertEquals", "getType", "get", "assertEquals", "getType", "get", "assertEquals", "getType", "get", "assertEquals", "getType", "get", "assertEquals", "getType", "get", "assertEquals", "getType", "get", "assertEquals", "getType", "get", "assertEquals", "getType", "get", "assertEquals", "getType", "get"]}, "focal_class": {"identifier": "JDBCUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Dialect DEFAULT = new DefaultDialect();", "modifier": "public static final", "type": "Dialect", "declarator": "DEFAULT = new DefaultDialect()", "var_name": "DEFAULT"}, {"original_string": "public static final Dialect H2 = new H2Dialect();", "modifier": "public static final", "type": "Dialect", "declarator": "H2 = new H2Dialect()", "var_name": "H2"}, {"original_string": "public static final Dialect MYSQL = new MySQLDialect();", "modifier": "public static final", "type": "Dialect", "declarator": "MYSQL = new MySQLDialect()", "var_name": "MYSQL"}, {"original_string": "public static final Dialect POSTGRES = new PostgresDialect();", "modifier": "public static final", "type": "Dialect", "declarator": "POSTGRES = new PostgresDialect()", "var_name": "POSTGRES"}, {"original_string": "public static final Dialect ORACLE = new OracleDialect();", "modifier": "public static final", "type": "Dialect", "declarator": "ORACLE = new OracleDialect()", "var_name": "ORACLE"}, {"original_string": "public static final Dialect ORACLE_LEGACY = new OracleLegacyDialect();", "modifier": "public static final", "type": "Dialect", "declarator": "ORACLE_LEGACY = new OracleLegacyDialect()", "var_name": "ORACLE_LEGACY"}, {"original_string": "public static final Dialect SQLSERVER = new SQLServerDialect();", "modifier": "public static final", "type": "Dialect", "declarator": "SQLSERVER = new SQLServerDialect()", "var_name": "SQLSERVER"}, {"original_string": "public static final Dialect DB2 = new DB2Dialect();", "modifier": "public static final", "type": "Dialect", "declarator": "DB2 = new DB2Dialect()", "var_name": "DB2"}, {"original_string": "public static final Dialect SYBASE_ASE = new SybaseASEDialect();", "modifier": "public static final", "type": "Dialect", "declarator": "SYBASE_ASE = new SybaseASEDialect()", "var_name": "SYBASE_ASE"}, {"original_string": "public static final Dialect MONETDB = new MonetDBDialect();", "modifier": "public static final", "type": "Dialect", "declarator": "MONETDB = new MonetDBDialect()", "var_name": "MONETDB"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(JDBCUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(JDBCUtils.class)", "var_name": "log"}, {"original_string": "public static final String[] QUOTES = new String[]{\"\\\"\", \"'\", \"`\", \"\u00b4\"};", "modifier": "public static final", "type": "String[]", "declarator": "QUOTES = new String[]{\"\\\"\", \"'\", \"`\", \"\u00b4\"};", "var_name": "QUOTES"}], "methods": [{"identifier": "listDatasourceDefs", "parameters": "()", "modifiers": "public static", "return": "List<SQLDataSourceDef>", "signature": "List<SQLDataSourceDef> listDatasourceDefs()", "full_signature": "public static List<SQLDataSourceDef> listDatasourceDefs()", "class_method_signature": "JDBCUtils.listDatasourceDefs()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Connection connection, String sql)", "modifiers": "public static", "return": "void", "signature": "void execute(Connection connection, String sql)", "full_signature": "public static void execute(Connection connection, String sql)", "class_method_signature": "JDBCUtils.execute(Connection connection, String sql)", "testcase": false, "constructor": false}, {"identifier": "metadata", "parameters": "(Connection connection, String sql, Function<ResultSetMetaData, T> callback)", "modifiers": "public static", "return": "T", "signature": "T metadata(Connection connection, String sql, Function<ResultSetMetaData, T> callback)", "full_signature": "public static T metadata(Connection connection, String sql, Function<ResultSetMetaData, T> callback)", "class_method_signature": "JDBCUtils.metadata(Connection connection, String sql, Function<ResultSetMetaData, T> callback)", "testcase": false, "constructor": false}, {"identifier": "executeQuery", "parameters": "(Connection connection, String sql)", "modifiers": "public static", "return": "ResultSetHandler", "signature": "ResultSetHandler executeQuery(Connection connection, String sql)", "full_signature": "public static ResultSetHandler executeQuery(Connection connection, String sql)", "class_method_signature": "JDBCUtils.executeQuery(Connection connection, String sql)", "testcase": false, "constructor": false}, {"identifier": "dialect", "parameters": "(Connection connection)", "modifiers": "public static", "return": "Dialect", "signature": "Dialect dialect(Connection connection)", "full_signature": "public static Dialect dialect(Connection connection)", "class_method_signature": "JDBCUtils.dialect(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "dialect", "parameters": "(String url, int majorVersion)", "modifiers": "public static", "return": "Dialect", "signature": "Dialect dialect(String url, int majorVersion)", "full_signature": "public static Dialect dialect(String url, int majorVersion)", "class_method_signature": "JDBCUtils.dialect(String url, int majorVersion)", "testcase": false, "constructor": false}, {"identifier": "dialect", "parameters": "(String dbName)", "modifiers": "public static", "return": "Dialect", "signature": "Dialect dialect(String dbName)", "full_signature": "public static Dialect dialect(String dbName)", "class_method_signature": "JDBCUtils.dialect(String dbName)", "testcase": false, "constructor": false}, {"identifier": "getColumns", "parameters": "(ResultSet resultSet, String[] exclude)", "modifiers": "public static", "return": "List<Column>", "signature": "List<Column> getColumns(ResultSet resultSet, String[] exclude)", "full_signature": "public static List<Column> getColumns(ResultSet resultSet, String[] exclude)", "class_method_signature": "JDBCUtils.getColumns(ResultSet resultSet, String[] exclude)", "testcase": false, "constructor": false}, {"identifier": "fixCase", "parameters": "(Connection connection, String id)", "modifiers": "public static", "return": "String", "signature": "String fixCase(Connection connection, String id)", "full_signature": "public static String fixCase(Connection connection, String id)", "class_method_signature": "JDBCUtils.fixCase(Connection connection, String id)", "testcase": false, "constructor": false}, {"identifier": "getWordsBetweenQuotes", "parameters": "(String s)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getWordsBetweenQuotes(String s)", "full_signature": "public static List<String> getWordsBetweenQuotes(String s)", "class_method_signature": "JDBCUtils.getWordsBetweenQuotes(String s)", "testcase": false, "constructor": false}, {"identifier": "changeCaseExcludeQuotes", "parameters": "(String s, boolean upper)", "modifiers": "public static", "return": "String", "signature": "String changeCaseExcludeQuotes(String s, boolean upper)", "full_signature": "public static String changeCaseExcludeQuotes(String s, boolean upper)", "class_method_signature": "JDBCUtils.changeCaseExcludeQuotes(String s, boolean upper)", "testcase": false, "constructor": false}, {"identifier": "calculateType", "parameters": "(int sqlDataType)", "modifiers": "public static", "return": "ColumnType", "signature": "ColumnType calculateType(int sqlDataType)", "full_signature": "public static ColumnType calculateType(int sqlDataType)", "class_method_signature": "JDBCUtils.calculateType(int sqlDataType)", "testcase": false, "constructor": false}, {"identifier": "clobToString", "parameters": "(Clob value)", "modifiers": "public static", "return": "String", "signature": "String clobToString(Clob value)", "full_signature": "public static String clobToString(Clob value)", "class_method_signature": "JDBCUtils.clobToString(Clob value)", "testcase": false, "constructor": false}], "file": "kie-soup-dataset/kie-soup-dataset-sql/src/main/java/org/dashbuilder/dataprovider/sql/JDBCUtils.java"}, "focal_method": {"identifier": "getColumns", "parameters": "(ResultSet resultSet, String[] exclude)", "modifiers": "public static", "return": "List<Column>", "body": "public static List<Column> getColumns(ResultSet resultSet, String[] exclude) {\n        try {\n            List<Column> columnList = new ArrayList<>();\n            List<String> columnExcluded = exclude == null ? new ArrayList<String>() : Arrays.asList(exclude);\n        \n            ResultSetMetaData meta = resultSet.getMetaData();\n            for (int i = 1; i <= meta.getColumnCount(); i++) {\n            String name = meta.getColumnName(i);\n            String alias = meta.getColumnLabel(i);\n            if (alias != null && !alias.trim().isEmpty()) {\n                name = alias.trim();\n            }\n            if (!columnExcluded.contains(name) && !columnExcluded.contains(alias)) {\n                ColumnType type = JDBCUtils.calculateType(meta.getColumnType(i));\n                if (type != null) {\n                    int size = meta.getColumnDisplaySize(i);\n                    Column column = SQLFactory.column(name, type, size);\n                    columnList.add(column);\n                }\n            }\n             }\n            return columnList;\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n    }", "signature": "List<Column> getColumns(ResultSet resultSet, String[] exclude)", "full_signature": "public static List<Column> getColumns(ResultSet resultSet, String[] exclude)", "class_method_signature": "JDBCUtils.getColumns(ResultSet resultSet, String[] exclude)", "testcase": false, "constructor": false, "invocations": ["asList", "getMetaData", "getColumnCount", "getColumnName", "getColumnLabel", "isEmpty", "trim", "trim", "contains", "contains", "calculateType", "getColumnType", "getColumnDisplaySize", "column", "add"]}, "repository": {"repo_id": 103437385, "url": "https://github.com/kiegroup/kie-soup", "stars": 11, "created": "9/13/2017 6:41:37 PM +00:00", "updates": "2020-01-21T13:07:53+00:00", "fork": "False", "license": "licensed"}}