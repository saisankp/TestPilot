{"test_class": {"identifier": "BloomFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static BloomFilter bloomFilter;", "modifier": "private static", "type": "BloomFilter", "declarator": "bloomFilter", "var_name": "bloomFilter"}, {"original_string": "private static final int INPUT_SIZE = 1024;", "modifier": "private static final", "type": "int", "declarator": "INPUT_SIZE = 1024", "var_name": "INPUT_SIZE"}, {"original_string": "private static final double FALSE_POSITIVE_PROBABILITY = 0.05;", "modifier": "private static final", "type": "double", "declarator": "FALSE_POSITIVE_PROBABILITY = 0.05", "var_name": "FALSE_POSITIVE_PROBABILITY"}], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/util/BloomFilterTest.java"}, "test_case": {"identifier": "testBloomNumBits", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testBloomNumBits() {\n\t\tassertEquals(0, BloomFilter.optimalNumOfBits(0, 0));\n\t\tassertEquals(0, BloomFilter.optimalNumOfBits(0, 1));\n\t\tassertEquals(0, BloomFilter.optimalNumOfBits(1, 1));\n\t\tassertEquals(7, BloomFilter.optimalNumOfBits(1, 0.03));\n\t\tassertEquals(72, BloomFilter.optimalNumOfBits(10, 0.03));\n\t\tassertEquals(729, BloomFilter.optimalNumOfBits(100, 0.03));\n\t\tassertEquals(7298, BloomFilter.optimalNumOfBits(1000, 0.03));\n\t\tassertEquals(72984, BloomFilter.optimalNumOfBits(10000, 0.03));\n\t\tassertEquals(729844, BloomFilter.optimalNumOfBits(100000, 0.03));\n\t\tassertEquals(7298440, BloomFilter.optimalNumOfBits(1000000, 0.03));\n\t\tassertEquals(6235224, BloomFilter.optimalNumOfBits(1000000, 0.05));\n\t}", "signature": "void testBloomNumBits()", "full_signature": "@Test public void testBloomNumBits()", "class_method_signature": "BloomFilterTest.testBloomNumBits()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "optimalNumOfBits", "assertEquals", "optimalNumOfBits", "assertEquals", "optimalNumOfBits", "assertEquals", "optimalNumOfBits", "assertEquals", "optimalNumOfBits", "assertEquals", "optimalNumOfBits", "assertEquals", "optimalNumOfBits", "assertEquals", "optimalNumOfBits", "assertEquals", "optimalNumOfBits", "assertEquals", "optimalNumOfBits", "assertEquals", "optimalNumOfBits"]}, "focal_class": {"identifier": "BloomFilter", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected BitSet bitSet;", "modifier": "protected", "type": "BitSet", "declarator": "bitSet", "var_name": "bitSet"}, {"original_string": "protected int expectedEntries;", "modifier": "protected", "type": "int", "declarator": "expectedEntries", "var_name": "expectedEntries"}, {"original_string": "protected int numHashFunctions;", "modifier": "protected", "type": "int", "declarator": "numHashFunctions", "var_name": "numHashFunctions"}], "methods": [{"identifier": "BloomFilter", "parameters": "(int expectedEntries, int byteSize)", "modifiers": "public", "return": "", "signature": " BloomFilter(int expectedEntries, int byteSize)", "full_signature": "public  BloomFilter(int expectedEntries, int byteSize)", "class_method_signature": "BloomFilter.BloomFilter(int expectedEntries, int byteSize)", "testcase": false, "constructor": true}, {"identifier": "setBitsLocation", "parameters": "(MemorySegment memorySegment, int offset)", "modifiers": "public", "return": "void", "signature": "void setBitsLocation(MemorySegment memorySegment, int offset)", "full_signature": "public void setBitsLocation(MemorySegment memorySegment, int offset)", "class_method_signature": "BloomFilter.setBitsLocation(MemorySegment memorySegment, int offset)", "testcase": false, "constructor": false}, {"identifier": "optimalNumOfBits", "parameters": "(long inputEntries, double fpp)", "modifiers": "public static", "return": "int", "signature": "int optimalNumOfBits(long inputEntries, double fpp)", "full_signature": "public static int optimalNumOfBits(long inputEntries, double fpp)", "class_method_signature": "BloomFilter.optimalNumOfBits(long inputEntries, double fpp)", "testcase": false, "constructor": false}, {"identifier": "estimateFalsePositiveProbability", "parameters": "(long inputEntries, int bitSize)", "modifiers": "public static", "return": "double", "signature": "double estimateFalsePositiveProbability(long inputEntries, int bitSize)", "full_signature": "public static double estimateFalsePositiveProbability(long inputEntries, int bitSize)", "class_method_signature": "BloomFilter.estimateFalsePositiveProbability(long inputEntries, int bitSize)", "testcase": false, "constructor": false}, {"identifier": "optimalNumOfHashFunctions", "parameters": "(long expectEntries, long bitSize)", "modifiers": "static", "return": "int", "signature": "int optimalNumOfHashFunctions(long expectEntries, long bitSize)", "full_signature": "static int optimalNumOfHashFunctions(long expectEntries, long bitSize)", "class_method_signature": "BloomFilter.optimalNumOfHashFunctions(long expectEntries, long bitSize)", "testcase": false, "constructor": false}, {"identifier": "addHash", "parameters": "(int hash32)", "modifiers": "public", "return": "void", "signature": "void addHash(int hash32)", "full_signature": "public void addHash(int hash32)", "class_method_signature": "BloomFilter.addHash(int hash32)", "testcase": false, "constructor": false}, {"identifier": "testHash", "parameters": "(int hash32)", "modifiers": "public", "return": "boolean", "signature": "boolean testHash(int hash32)", "full_signature": "public boolean testHash(int hash32)", "class_method_signature": "BloomFilter.testHash(int hash32)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "BloomFilter.reset()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BloomFilter.toString()", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/util/BloomFilter.java"}, "focal_method": {"identifier": "optimalNumOfBits", "parameters": "(long inputEntries, double fpp)", "modifiers": "public static", "return": "int", "body": "public static int optimalNumOfBits(long inputEntries, double fpp) {\n\t\tint numBits = (int) (-inputEntries * Math.log(fpp) / (Math.log(2) * Math.log(2)));\n\t\treturn numBits;\n\t}", "signature": "int optimalNumOfBits(long inputEntries, double fpp)", "full_signature": "public static int optimalNumOfBits(long inputEntries, double fpp)", "class_method_signature": "BloomFilter.optimalNumOfBits(long inputEntries, double fpp)", "testcase": false, "constructor": false, "invocations": ["log", "log", "log"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}