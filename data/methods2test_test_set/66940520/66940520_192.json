{"test_class": {"identifier": "JdbcEventStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JdbcEventStore subject;", "modifier": "private", "type": "JdbcEventStore", "declarator": "subject", "var_name": "subject"}, {"original_string": "@Mock\n    private JdbcTemplate jdbcTemplate;", "modifier": "@Mock\n    private", "type": "JdbcTemplate", "declarator": "jdbcTemplate", "var_name": "jdbcTemplate"}, {"original_string": "@Mock\n    private CurrentUserService currentUserService;", "modifier": "@Mock\n    private", "type": "CurrentUserService", "declarator": "currentUserService", "var_name": "currentUserService"}, {"original_string": "@Mock\n    private IdentifiableObjectManager manager;", "modifier": "@Mock\n    private", "type": "IdentifiableObjectManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "@Mock\n    protected SqlRowSet rowSet;", "modifier": "@Mock\n    protected", "type": "SqlRowSet", "declarator": "rowSet", "var_name": "rowSet"}, {"original_string": "@Mock\n    private Environment env;", "modifier": "@Mock\n    private", "type": "Environment", "declarator": "env", "var_name": "env"}, {"original_string": "@Rule\n    public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/event/JdbcEventStoreTest.java"}, "test_case": {"identifier": "verifyEventDataValuesAreProcessedOnceForEachPSI", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyEventDataValuesAreProcessedOnceForEachPSI()\n    {\n        mockRowSet();\n        EventSearchParams eventSearchParams = new EventSearchParams();\n\n        List<EventRow> rows = subject.getEventRows( eventSearchParams, new ArrayList<>() );\n        assertThat( rows, hasSize( 1 ) );\n        verify( rowSet, times( 4 ) ).getString( \"psi_eventdatavalues\" );\n    }", "signature": "void verifyEventDataValuesAreProcessedOnceForEachPSI()", "full_signature": "@Test public void verifyEventDataValuesAreProcessedOnceForEachPSI()", "class_method_signature": "JdbcEventStoreTest.verifyEventDataValuesAreProcessedOnceForEachPSI()", "testcase": true, "constructor": false, "invocations": ["mockRowSet", "getEventRows", "assertThat", "hasSize", "getString", "verify", "times"]}, "focal_class": {"identifier": "JdbcEventStore", "superclass": "", "interfaces": "implements EventStore", "fields": [{"original_string": "private static final String PSI_STATUS_EQ = \" psi.status = '\";", "modifier": "private static final", "type": "String", "declarator": "PSI_STATUS_EQ = \" psi.status = '\"", "var_name": "PSI_STATUS_EQ"}, {"original_string": "private static final String PSI_LASTUPDATED_GT = \" psi.lastupdated >= '\";", "modifier": "private static final", "type": "String", "declarator": "PSI_LASTUPDATED_GT = \" psi.lastupdated >= '\"", "var_name": "PSI_LASTUPDATED_GT"}, {"original_string": "private static final String DOT_NAME = \".name)\";", "modifier": "private static final", "type": "String", "declarator": "DOT_NAME = \".name)\"", "var_name": "DOT_NAME"}, {"original_string": "private static final Map<String, String> QUERY_PARAM_COL_MAP = ImmutableMap.<String, String> builder()\n        .put( \"event\", \"psi_uid\" ).put( \"program\", \"p_uid\" ).put( \"programStage\", \"ps_uid\" )\n        .put( \"enrollment\", \"pi_uid\" ).put( \"enrollmentStatus\", \"pi_status\" ).put( \"orgUnit\", \"ou_uid\" )\n        .put( \"orgUnitName\", \"ou_name\" ).put( \"trackedEntityInstance\", \"tei_uid\" )\n        .put( \"eventDate\", \"psi_executiondate\" ).put( \"followup\", \"pi_followup\" ).put( \"status\", \"psi_status\" )\n        .put( \"dueDate\", \"psi_duedate\" ).put( \"storedBy\", \"psi_storedby\" ).put( \"created\", \"psi_created\" )\n        .put( \"lastUpdated\", \"psi_lastupdated\" ).put( \"completedBy\", \"psi_completedby\" )\n        .put( \"attributeOptionCombo\", \"psi_aoc\" ).put( \"completedDate\", \"psi_completeddate\" )\n        .put( \"deleted\", \"psi_deleted\" ).put( \"assignedUser\", \"user_assigned_username\" )\n        .put( \"assignedUserDisplayName\", \"user_assigned_name\" ).build();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "QUERY_PARAM_COL_MAP = ImmutableMap.<String, String> builder()\n        .put( \"event\", \"psi_uid\" ).put( \"program\", \"p_uid\" ).put( \"programStage\", \"ps_uid\" )\n        .put( \"enrollment\", \"pi_uid\" ).put( \"enrollmentStatus\", \"pi_status\" ).put( \"orgUnit\", \"ou_uid\" )\n        .put( \"orgUnitName\", \"ou_name\" ).put( \"trackedEntityInstance\", \"tei_uid\" )\n        .put( \"eventDate\", \"psi_executiondate\" ).put( \"followup\", \"pi_followup\" ).put( \"status\", \"psi_status\" )\n        .put( \"dueDate\", \"psi_duedate\" ).put( \"storedBy\", \"psi_storedby\" ).put( \"created\", \"psi_created\" )\n        .put( \"lastUpdated\", \"psi_lastupdated\" ).put( \"completedBy\", \"psi_completedby\" )\n        .put( \"attributeOptionCombo\", \"psi_aoc\" ).put( \"completedDate\", \"psi_completeddate\" )\n        .put( \"deleted\", \"psi_deleted\" ).put( \"assignedUser\", \"user_assigned_username\" )\n        .put( \"assignedUserDisplayName\", \"user_assigned_name\" ).build()", "var_name": "QUERY_PARAM_COL_MAP"}, {"original_string": "private final static String INSERT_EVENT_SQL = \"insert into programstageinstance (\" +\n        // @formatter:off\n        \"programstageinstanceid, \" +    // 0\n        \"programinstanceid, \" +         // 1\n        \"programstageid, \" +            // 2\n        \"duedate, \" +                   // 3\n        \"executiondate, \" +             // 4\n        \"organisationunitid, \" +        // 5\n        \"status, \" +                    // 6\n        \"completeddate, \" +             // 7\n        \"uid, \" +                       // 8\n        \"created, \" +                   // 9\n        \"lastupdated, \" +               // 10\n        \"attributeoptioncomboid, \" +    // 11\n        \"storedby, \" +                  // 12\n        \"completedby, \" +               // 13\n        \"deleted, \" +                   // 14\n        \"code, \" +                      // 15\n        \"createdatclient, \" +           // 16\n        \"lastupdatedatclient, \" +       // 17\n        \"geometry, \" +                  // 18\n        \"assigneduserid, \" +            // 19\n        \"eventdatavalues) \" +           // 20\n        // @formatter:on\n        \"values ( nextval('programstageinstance_sequence'), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )\";", "modifier": "private final static", "type": "String", "declarator": "INSERT_EVENT_SQL = \"insert into programstageinstance (\" +\n        // @formatter:off\n        \"programstageinstanceid, \" +    // 0\n        \"programinstanceid, \" +         // 1\n        \"programstageid, \" +            // 2\n        \"duedate, \" +                   // 3\n        \"executiondate, \" +             // 4\n        \"organisationunitid, \" +        // 5\n        \"status, \" +                    // 6\n        \"completeddate, \" +             // 7\n        \"uid, \" +                       // 8\n        \"created, \" +                   // 9\n        \"lastupdated, \" +               // 10\n        \"attributeoptioncomboid, \" +    // 11\n        \"storedby, \" +                  // 12\n        \"completedby, \" +               // 13\n        \"deleted, \" +                   // 14\n        \"code, \" +                      // 15\n        \"createdatclient, \" +           // 16\n        \"lastupdatedatclient, \" +       // 17\n        \"geometry, \" +                  // 18\n        \"assigneduserid, \" +            // 19\n        \"eventdatavalues) \" +           // 20\n        // @formatter:on\n        \"values ( nextval('programstageinstance_sequence'), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )\"", "var_name": "INSERT_EVENT_SQL"}, {"original_string": "private final static String UPDATE_EVENT_SQL = \"update programstageinstance set \" +\n        // @formatter:off\n        \"programinstanceid = ?, \" +         // 1\n        \"programstageid = ?, \" +            // 2\n        \"duedate = ?, \" +                   // 3\n        \"executiondate = ?, \" +             // 4\n        \"organisationunitid = ?, \" +        // 5\n        \"status = ?, \" +                    // 6\n        \"completeddate = ?, \" +             // 7\n        \"lastupdated = ?, \" +               // 8\n        \"attributeoptioncomboid = ?, \" +    // 9\n        \"storedby = ?, \" +                  // 10\n        \"completedby = ?, \" +               // 11\n        \"deleted = ?, \" +                   // 12\n        \"code = ?, \" +                      // 13\n        \"createdatclient = ?, \" +           // 14\n        \"lastupdatedatclient = ?, \" +       // 15\n        \"geometry = ?, \" +                  // 16\n        \"assigneduserid = ?, \" +            // 17\n        \"eventdatavalues = ? \" +            // 18\n        \"where uid = ?;\";", "modifier": "private final static", "type": "String", "declarator": "UPDATE_EVENT_SQL = \"update programstageinstance set \" +\n        // @formatter:off\n        \"programinstanceid = ?, \" +         // 1\n        \"programstageid = ?, \" +            // 2\n        \"duedate = ?, \" +                   // 3\n        \"executiondate = ?, \" +             // 4\n        \"organisationunitid = ?, \" +        // 5\n        \"status = ?, \" +                    // 6\n        \"completeddate = ?, \" +             // 7\n        \"lastupdated = ?, \" +               // 8\n        \"attributeoptioncomboid = ?, \" +    // 9\n        \"storedby = ?, \" +                  // 10\n        \"completedby = ?, \" +               // 11\n        \"deleted = ?, \" +                   // 12\n        \"code = ?, \" +                      // 13\n        \"createdatclient = ?, \" +           // 14\n        \"lastupdatedatclient = ?, \" +       // 15\n        \"geometry = ?, \" +                  // 16\n        \"assigneduserid = ?, \" +            // 17\n        \"eventdatavalues = ? \" +            // 18\n        \"where uid = ?;\"", "var_name": "UPDATE_EVENT_SQL"}, {"original_string": "private final static String UPDATE_TEI_SQL = \"SELECT * FROM trackedentityinstance where uid in (?) FOR UPDATE %s;\" +\n        \"update trackedentityinstance set lastupdated = ?, lastupdatedby = ? where uid in (?)\";", "modifier": "private final static", "type": "String", "declarator": "UPDATE_TEI_SQL = \"SELECT * FROM trackedentityinstance where uid in (?) FOR UPDATE %s;\" +\n        \"update trackedentityinstance set lastupdated = ?, lastupdatedby = ? where uid in (?)\"", "var_name": "UPDATE_TEI_SQL"}, {"original_string": "private static final ObjectReader eventDataValueJsonReader = JsonEventDataValueSetBinaryType.MAPPER\n        .readerFor( new TypeReference<Map<String, EventDataValue>>() {} );", "modifier": "private static final", "type": "ObjectReader", "declarator": "eventDataValueJsonReader = JsonEventDataValueSetBinaryType.MAPPER\n        .readerFor( new TypeReference<Map<String, EventDataValue>>() {} )", "var_name": "eventDataValueJsonReader"}, {"original_string": "private final StatementBuilder statementBuilder;", "modifier": "private final", "type": "StatementBuilder", "declarator": "statementBuilder", "var_name": "statementBuilder"}, {"original_string": "private final JdbcTemplate jdbcTemplate;", "modifier": "private final", "type": "JdbcTemplate", "declarator": "jdbcTemplate", "var_name": "jdbcTemplate"}, {"original_string": "private final CurrentUserService currentUserService;", "modifier": "private final", "type": "CurrentUserService", "declarator": "currentUserService", "var_name": "currentUserService"}, {"original_string": "private final IdentifiableObjectManager manager;", "modifier": "private final", "type": "IdentifiableObjectManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private final ObjectMapper jsonMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "jsonMapper", "var_name": "jsonMapper"}, {"original_string": "private final Environment env;", "modifier": "private final", "type": "Environment", "declarator": "env", "var_name": "env"}], "methods": [{"identifier": "JdbcEventStore", "parameters": "( StatementBuilder statementBuilder, JdbcTemplate jdbcTemplate,\n        @Qualifier( \"dataValueJsonMapper\" ) ObjectMapper jsonMapper,\n        CurrentUserService currentUserService, IdentifiableObjectManager identifiableObjectManager, Environment env )", "modifiers": "public", "return": "", "signature": " JdbcEventStore( StatementBuilder statementBuilder, JdbcTemplate jdbcTemplate,\n        @Qualifier( \"dataValueJsonMapper\" ) ObjectMapper jsonMapper,\n        CurrentUserService currentUserService, IdentifiableObjectManager identifiableObjectManager, Environment env )", "full_signature": "public  JdbcEventStore( StatementBuilder statementBuilder, JdbcTemplate jdbcTemplate,\n        @Qualifier( \"dataValueJsonMapper\" ) ObjectMapper jsonMapper,\n        CurrentUserService currentUserService, IdentifiableObjectManager identifiableObjectManager, Environment env )", "class_method_signature": "JdbcEventStore.JdbcEventStore( StatementBuilder statementBuilder, JdbcTemplate jdbcTemplate,\n        @Qualifier( \"dataValueJsonMapper\" ) ObjectMapper jsonMapper,\n        CurrentUserService currentUserService, IdentifiableObjectManager identifiableObjectManager, Environment env )", "testcase": false, "constructor": true}, {"identifier": "getEvents", "parameters": "( EventSearchParams params, List<OrganisationUnit> organisationUnits,\n        Map<String, Set<String>> psdesWithSkipSyncTrue )", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> getEvents( EventSearchParams params, List<OrganisationUnit> organisationUnits,\n        Map<String, Set<String>> psdesWithSkipSyncTrue )", "full_signature": "@Override public List<Event> getEvents( EventSearchParams params, List<OrganisationUnit> organisationUnits,\n        Map<String, Set<String>> psdesWithSkipSyncTrue )", "class_method_signature": "JdbcEventStore.getEvents( EventSearchParams params, List<OrganisationUnit> organisationUnits,\n        Map<String, Set<String>> psdesWithSkipSyncTrue )", "testcase": false, "constructor": false}, {"identifier": "saveEvents", "parameters": "(List<ProgramStageInstance> events )", "modifiers": "public", "return": "List<ProgramStageInstance>", "signature": "List<ProgramStageInstance> saveEvents(List<ProgramStageInstance> events )", "full_signature": "public List<ProgramStageInstance> saveEvents(List<ProgramStageInstance> events )", "class_method_signature": "JdbcEventStore.saveEvents(List<ProgramStageInstance> events )", "testcase": false, "constructor": false}, {"identifier": "updateEvents", "parameters": "(List<ProgramStageInstance> programStageInstances )", "modifiers": "@Override public", "return": "List<ProgramStageInstance>", "signature": "List<ProgramStageInstance> updateEvents(List<ProgramStageInstance> programStageInstances )", "full_signature": "@Override public List<ProgramStageInstance> updateEvents(List<ProgramStageInstance> programStageInstances )", "class_method_signature": "JdbcEventStore.updateEvents(List<ProgramStageInstance> programStageInstances )", "testcase": false, "constructor": false}, {"identifier": "getEventsGrid", "parameters": "( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> getEventsGrid( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "full_signature": "@Override public List<Map<String, String>> getEventsGrid( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "class_method_signature": "JdbcEventStore.getEventsGrid( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "testcase": false, "constructor": false}, {"identifier": "getEventRows", "parameters": "( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "modifiers": "@Override public", "return": "List<EventRow>", "signature": "List<EventRow> getEventRows( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "full_signature": "@Override public List<EventRow> getEventRows( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "class_method_signature": "JdbcEventStore.getEventRows( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "testcase": false, "constructor": false}, {"identifier": "getIdSqlBasedOnIdScheme", "parameters": "( IdScheme idScheme, String uidSql, String attributeSql, String codeSql )", "modifiers": "private", "return": "String", "signature": "String getIdSqlBasedOnIdScheme( IdScheme idScheme, String uidSql, String attributeSql, String codeSql )", "full_signature": "private String getIdSqlBasedOnIdScheme( IdScheme idScheme, String uidSql, String attributeSql, String codeSql )", "class_method_signature": "JdbcEventStore.getIdSqlBasedOnIdScheme( IdScheme idScheme, String uidSql, String attributeSql, String codeSql )", "testcase": false, "constructor": false}, {"identifier": "validateIdentifiersPresence", "parameters": "( SqlRowSet rowSet, IdSchemes idSchemes,\n        boolean validateCategoryOptionCombo )", "modifiers": "private", "return": "void", "signature": "void validateIdentifiersPresence( SqlRowSet rowSet, IdSchemes idSchemes,\n        boolean validateCategoryOptionCombo )", "full_signature": "private void validateIdentifiersPresence( SqlRowSet rowSet, IdSchemes idSchemes,\n        boolean validateCategoryOptionCombo )", "class_method_signature": "JdbcEventStore.validateIdentifiersPresence( SqlRowSet rowSet, IdSchemes idSchemes,\n        boolean validateCategoryOptionCombo )", "testcase": false, "constructor": false}, {"identifier": "getEventSelectIdentifiersByIdScheme", "parameters": "( IdSchemes idSchemes )", "modifiers": "private", "return": "String", "signature": "String getEventSelectIdentifiersByIdScheme( IdSchemes idSchemes )", "full_signature": "private String getEventSelectIdentifiersByIdScheme( IdSchemes idSchemes )", "class_method_signature": "JdbcEventStore.getEventSelectIdentifiersByIdScheme( IdSchemes idSchemes )", "testcase": false, "constructor": false}, {"identifier": "getEventCount", "parameters": "( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "modifiers": "@Override public", "return": "int", "signature": "int getEventCount( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "full_signature": "@Override public int getEventCount( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "class_method_signature": "JdbcEventStore.getEventCount( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "testcase": false, "constructor": false}, {"identifier": "convertEventDataValueIntoDtoDataValue", "parameters": "( EventDataValue eventDataValue )", "modifiers": "private", "return": "DataValue", "signature": "DataValue convertEventDataValueIntoDtoDataValue( EventDataValue eventDataValue )", "full_signature": "private DataValue convertEventDataValueIntoDtoDataValue( EventDataValue eventDataValue )", "class_method_signature": "JdbcEventStore.convertEventDataValueIntoDtoDataValue( EventDataValue eventDataValue )", "testcase": false, "constructor": false}, {"identifier": "buildGridSql", "parameters": "( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "modifiers": "private", "return": "String", "signature": "String buildGridSql( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "full_signature": "private String buildGridSql( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "class_method_signature": "JdbcEventStore.buildGridSql( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "testcase": false, "constructor": false}, {"identifier": "buildSql", "parameters": "( EventSearchParams params, List<OrganisationUnit> organisationUnits, User user )", "modifiers": "private", "return": "String", "signature": "String buildSql( EventSearchParams params, List<OrganisationUnit> organisationUnits, User user )", "full_signature": "private String buildSql( EventSearchParams params, List<OrganisationUnit> organisationUnits, User user )", "class_method_signature": "JdbcEventStore.buildSql( EventSearchParams params, List<OrganisationUnit> organisationUnits, User user )", "testcase": false, "constructor": false}, {"identifier": "getEventSelectQuery", "parameters": "( EventSearchParams params, List<OrganisationUnit> organisationUnits, User user )", "modifiers": "private", "return": "String", "signature": "String getEventSelectQuery( EventSearchParams params, List<OrganisationUnit> organisationUnits, User user )", "full_signature": "private String getEventSelectQuery( EventSearchParams params, List<OrganisationUnit> organisationUnits, User user )", "class_method_signature": "JdbcEventStore.getEventSelectQuery( EventSearchParams params, List<OrganisationUnit> organisationUnits, User user )", "testcase": false, "constructor": false}, {"identifier": "getFromWhereClause", "parameters": "( EventSearchParams params, SqlHelper hlp,\n        List<OrganisationUnit> organisationUnits )", "modifiers": "private", "return": "String", "signature": "String getFromWhereClause( EventSearchParams params, SqlHelper hlp,\n        List<OrganisationUnit> organisationUnits )", "full_signature": "private String getFromWhereClause( EventSearchParams params, SqlHelper hlp,\n        List<OrganisationUnit> organisationUnits )", "class_method_signature": "JdbcEventStore.getFromWhereClause( EventSearchParams params, SqlHelper hlp,\n        List<OrganisationUnit> organisationUnits )", "testcase": false, "constructor": false}, {"identifier": "addLastUpdatedFilters", "parameters": "( EventSearchParams params, SqlHelper hlp, boolean useDateAfterEndDate )", "modifiers": "private", "return": "String", "signature": "String addLastUpdatedFilters( EventSearchParams params, SqlHelper hlp, boolean useDateAfterEndDate )", "full_signature": "private String addLastUpdatedFilters( EventSearchParams params, SqlHelper hlp, boolean useDateAfterEndDate )", "class_method_signature": "JdbcEventStore.addLastUpdatedFilters( EventSearchParams params, SqlHelper hlp, boolean useDateAfterEndDate )", "testcase": false, "constructor": false}, {"identifier": "getCategoryOptionSharingForUser", "parameters": "( User user )", "modifiers": "private", "return": "String", "signature": "String getCategoryOptionSharingForUser( User user )", "full_signature": "private String getCategoryOptionSharingForUser( User user )", "class_method_signature": "JdbcEventStore.getCategoryOptionSharingForUser( User user )", "testcase": false, "constructor": false}, {"identifier": "getEventPagingQuery", "parameters": "( EventSearchParams params )", "modifiers": "private", "return": "String", "signature": "String getEventPagingQuery( EventSearchParams params )", "full_signature": "private String getEventPagingQuery( EventSearchParams params )", "class_method_signature": "JdbcEventStore.getEventPagingQuery( EventSearchParams params )", "testcase": false, "constructor": false}, {"identifier": "getCommentQuery", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getCommentQuery()", "full_signature": "private String getCommentQuery()", "class_method_signature": "JdbcEventStore.getCommentQuery()", "testcase": false, "constructor": false}, {"identifier": "getGridOrderQuery", "parameters": "( EventSearchParams params )", "modifiers": "private", "return": "String", "signature": "String getGridOrderQuery( EventSearchParams params )", "full_signature": "private String getGridOrderQuery( EventSearchParams params )", "class_method_signature": "JdbcEventStore.getGridOrderQuery( EventSearchParams params )", "testcase": false, "constructor": false}, {"identifier": "getOrderQuery", "parameters": "( EventSearchParams params )", "modifiers": "private", "return": "String", "signature": "String getOrderQuery( EventSearchParams params )", "full_signature": "private String getOrderQuery( EventSearchParams params )", "class_method_signature": "JdbcEventStore.getOrderQuery( EventSearchParams params )", "testcase": false, "constructor": false}, {"identifier": "getAttributeValueQuery", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getAttributeValueQuery()", "full_signature": "private String getAttributeValueQuery()", "class_method_signature": "JdbcEventStore.getAttributeValueQuery()", "testcase": false, "constructor": false}, {"identifier": "isSuper", "parameters": "( User user )", "modifiers": "private", "return": "boolean", "signature": "boolean isSuper( User user )", "full_signature": "private boolean isSuper( User user )", "class_method_signature": "JdbcEventStore.isSuper( User user )", "testcase": false, "constructor": false}, {"identifier": "saveAllEvents", "parameters": "( List<ProgramStageInstance> batch )", "modifiers": "private", "return": "List<ProgramStageInstance>", "signature": "List<ProgramStageInstance> saveAllEvents( List<ProgramStageInstance> batch )", "full_signature": "private List<ProgramStageInstance> saveAllEvents( List<ProgramStageInstance> batch )", "class_method_signature": "JdbcEventStore.saveAllEvents( List<ProgramStageInstance> batch )", "testcase": false, "constructor": false}, {"identifier": "updateTrackedEntityInstances", "parameters": "( List<String> teiUids, User user )", "modifiers": "public", "return": "void", "signature": "void updateTrackedEntityInstances( List<String> teiUids, User user )", "full_signature": "public void updateTrackedEntityInstances( List<String> teiUids, User user )", "class_method_signature": "JdbcEventStore.updateTrackedEntityInstances( List<String> teiUids, User user )", "testcase": false, "constructor": false}, {"identifier": "getUpdateTeiSql", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getUpdateTeiSql()", "full_signature": "private String getUpdateTeiSql()", "class_method_signature": "JdbcEventStore.getUpdateTeiSql()", "testcase": false, "constructor": false}, {"identifier": "bindEventParamsForInsert", "parameters": "( PreparedStatement ps, ProgramStageInstance event )", "modifiers": "private", "return": "void", "signature": "void bindEventParamsForInsert( PreparedStatement ps, ProgramStageInstance event )", "full_signature": "private void bindEventParamsForInsert( PreparedStatement ps, ProgramStageInstance event )", "class_method_signature": "JdbcEventStore.bindEventParamsForInsert( PreparedStatement ps, ProgramStageInstance event )", "testcase": false, "constructor": false}, {"identifier": "bindEventParamsForUpdate", "parameters": "( PreparedStatement ps, ProgramStageInstance programStageInstance  )", "modifiers": "private", "return": "void", "signature": "void bindEventParamsForUpdate( PreparedStatement ps, ProgramStageInstance programStageInstance  )", "full_signature": "private void bindEventParamsForUpdate( PreparedStatement ps, ProgramStageInstance programStageInstance  )", "class_method_signature": "JdbcEventStore.bindEventParamsForUpdate( PreparedStatement ps, ProgramStageInstance programStageInstance  )", "testcase": false, "constructor": false}, {"identifier": "userHasAccess", "parameters": "( SqlRowSet rowSet )", "modifiers": "private", "return": "boolean", "signature": "boolean userHasAccess( SqlRowSet rowSet )", "full_signature": "private boolean userHasAccess( SqlRowSet rowSet )", "class_method_signature": "JdbcEventStore.userHasAccess( SqlRowSet rowSet )", "testcase": false, "constructor": false}, {"identifier": "convertEventDataValueJsonIntoSet", "parameters": "( String jsonString )", "modifiers": "private", "return": "Set<EventDataValue>", "signature": "Set<EventDataValue> convertEventDataValueJsonIntoSet( String jsonString )", "full_signature": "private Set<EventDataValue> convertEventDataValueJsonIntoSet( String jsonString )", "class_method_signature": "JdbcEventStore.convertEventDataValueJsonIntoSet( String jsonString )", "testcase": false, "constructor": false}, {"identifier": "convertDataValuesIdentifiers", "parameters": "( IdScheme idScheme, List<Collection<DataValue>> dataValuesList,\n        CachingMap<String, String> dataElementUidToIdentifierCache )", "modifiers": "private", "return": "void", "signature": "void convertDataValuesIdentifiers( IdScheme idScheme, List<Collection<DataValue>> dataValuesList,\n        CachingMap<String, String> dataElementUidToIdentifierCache )", "full_signature": "private void convertDataValuesIdentifiers( IdScheme idScheme, List<Collection<DataValue>> dataValuesList,\n        CachingMap<String, String> dataElementUidToIdentifierCache )", "class_method_signature": "JdbcEventStore.convertDataValuesIdentifiers( IdScheme idScheme, List<Collection<DataValue>> dataValuesList,\n        CachingMap<String, String> dataElementUidToIdentifierCache )", "testcase": false, "constructor": false}, {"identifier": "populateCache", "parameters": "( IdScheme idScheme, List<Collection<DataValue>> dataValuesList,\n        CachingMap<String, String> dataElementUidToIdentifierCache )", "modifiers": "private", "return": "void", "signature": "void populateCache( IdScheme idScheme, List<Collection<DataValue>> dataValuesList,\n        CachingMap<String, String> dataElementUidToIdentifierCache )", "full_signature": "private void populateCache( IdScheme idScheme, List<Collection<DataValue>> dataValuesList,\n        CachingMap<String, String> dataElementUidToIdentifierCache )", "class_method_signature": "JdbcEventStore.populateCache( IdScheme idScheme, List<Collection<DataValue>> dataValuesList,\n        CachingMap<String, String> dataElementUidToIdentifierCache )", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "( final List<Event> events )", "modifiers": "public", "return": "void", "signature": "void delete( final List<Event> events )", "full_signature": "public void delete( final List<Event> events )", "class_method_signature": "JdbcEventStore.delete( final List<Event> events )", "testcase": false, "constructor": false}, {"identifier": "setAccessiblePrograms", "parameters": "( User user, EventSearchParams params )", "modifiers": "private", "return": "void", "signature": "void setAccessiblePrograms( User user, EventSearchParams params )", "full_signature": "private void setAccessiblePrograms( User user, EventSearchParams params )", "class_method_signature": "JdbcEventStore.setAccessiblePrograms( User user, EventSearchParams params )", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "( List<ProgramStageInstance> batch )", "modifiers": "private", "return": "List<ProgramStageInstance>", "signature": "List<ProgramStageInstance> sort( List<ProgramStageInstance> batch )", "full_signature": "private List<ProgramStageInstance> sort( List<ProgramStageInstance> batch )", "class_method_signature": "JdbcEventStore.sort( List<ProgramStageInstance> batch )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java"}, "focal_method": {"identifier": "getEventRows", "parameters": "( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "modifiers": "@Override public", "return": "List<EventRow>", "body": "@Override\n    public List<EventRow> getEventRows( EventSearchParams params, List<OrganisationUnit> organisationUnits )\n    {\n        User user = currentUserService.getCurrentUser();\n\n        setAccessiblePrograms( user, params );\n\n        List<EventRow> eventRows = new ArrayList<>();\n\n        String sql = buildSql( params, organisationUnits, user );\n        SqlRowSet rowSet = jdbcTemplate.queryForRowSet( sql );\n\n        log.debug( \"Event query SQL: \" + sql );\n\n        EventRow eventRow = new EventRow();\n\n        eventRow.setEvent( \"not_valid\" );\n\n        Set<String> notes = new HashSet<>();\n\n        Map<String, List<DataValue>> processedDataValues = new HashMap<>();\n\n        while ( rowSet.next() )\n        {\n            if ( rowSet.getString( \"psi_uid\" ) == null\n                || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )\n            {\n                continue;\n            }\n\n            if ( eventRow.getUid() == null || !eventRow.getUid().equals( rowSet.getString( \"psi_uid\" ) ) )\n            {\n                validateIdentifiersPresence( rowSet, params.getIdSchemes(), false );\n\n                eventRow = new EventRow();\n\n                eventRow.setUid( rowSet.getString( \"psi_uid\" ) );\n\n                eventRow.setEvent( rowSet.getString( \"psi_uid\" ) );\n                eventRow.setTrackedEntityInstance( rowSet.getString( \"tei_uid\" ) );\n                eventRow.setTrackedEntityInstanceOrgUnit( rowSet.getString( \"tei_ou\" ) );\n                eventRow.setTrackedEntityInstanceOrgUnitName( rowSet.getString( \"tei_ou_name\" ) );\n                eventRow.setTrackedEntityInstanceCreated( rowSet.getString( \"tei_created\" ) );\n                eventRow.setTrackedEntityInstanceInactive( rowSet.getBoolean( \"tei_inactive\" ) );\n                eventRow.setDeleted( rowSet.getBoolean( \"psi_deleted\" ) );\n\n                eventRow.setProgram( rowSet.getString( \"p_identifier\" ) );\n                eventRow.setProgramStage( rowSet.getString( \"ps_identifier\" ) );\n                eventRow.setOrgUnit( rowSet.getString( \"ou_identifier\" ) );\n\n                ProgramType programType = ProgramType.fromValue( rowSet.getString( \"p_type\" ) );\n\n                if ( programType == ProgramType.WITHOUT_REGISTRATION )\n                {\n                    eventRow.setEnrollment( rowSet.getString( \"pi_uid\" ) );\n                    eventRow.setFollowup( rowSet.getBoolean( \"pi_followup\" ) );\n                }\n\n                eventRow.setTrackedEntityInstance( rowSet.getString( \"tei_uid\" ) );\n                eventRow.setOrgUnitName( rowSet.getString( \"ou_name\" ) );\n                eventRow.setDueDate( DateUtils.getIso8601NoTz( rowSet.getDate( \"psi_duedate\" ) ) );\n                eventRow.setEventDate( DateUtils.getIso8601NoTz( rowSet.getDate( \"psi_executiondate\" ) ) );\n\n                eventRows.add( eventRow );\n            }\n\n            if ( rowSet.getString( \"pav_value\" ) != null && rowSet.getString( \"ta_uid\" ) != null )\n            {\n                String valueType = rowSet.getString( \"ta_valuetype\" );\n\n                Attribute attribute = new Attribute();\n                attribute.setCreated( DateUtils.getIso8601NoTz( rowSet.getDate( \"pav_created\" ) ) );\n                attribute.setLastUpdated( DateUtils.getIso8601NoTz( rowSet.getDate( \"pav_lastupdated\" ) ) );\n                attribute.setValue( rowSet.getString( \"pav_value\" ) );\n                attribute.setDisplayName( rowSet.getString( \"ta_name\" ) );\n                attribute.setValueType( valueType != null ? ValueType.valueOf( valueType.toUpperCase() ) : null );\n                attribute.setAttribute( rowSet.getString( \"ta_uid\" ) );\n\n                eventRow.getAttributes().add( attribute );\n            }\n\n            if ( !org.springframework.util.StringUtils.isEmpty( rowSet.getString( \"psi_eventdatavalues\" ) )\n                && !processedDataValues.containsKey( rowSet.getString( \"psi_uid\" ) ) )\n            {\n                List<DataValue> dataValues = new ArrayList<>();\n                Set<EventDataValue> eventDataValues = convertEventDataValueJsonIntoSet(\n                    rowSet.getString( \"psi_eventdatavalues\" ) );\n\n                for ( EventDataValue dv : eventDataValues )\n                {\n                    dataValues.add( convertEventDataValueIntoDtoDataValue( dv ) );\n                }\n                processedDataValues.put( rowSet.getString( \"psi_uid\" ), dataValues );\n            }\n\n            if ( rowSet.getString( \"psinote_value\" ) != null && !notes.contains( rowSet.getString( \"psinote_id\" ) ) )\n            {\n                Note note = new Note();\n                note.setNote( rowSet.getString( \"psinote_uid\" ) );\n                note.setValue( rowSet.getString( \"psinote_value\" ) );\n                note.setStoredDate( DateUtils.getIso8601NoTz( rowSet.getDate( \"psinote_storeddate\" ) ) );\n                note.setStoredBy( rowSet.getString( \"psinote_storedby\" ) );\n\n                eventRow.getNotes().add( note );\n                notes.add( rowSet.getString( \"psinote_id\" ) );\n            }\n        }\n        eventRows.forEach( e -> e.setDataValues( processedDataValues.get( e.getUid() ) ) );\n\n        IdSchemes idSchemes = ObjectUtils.firstNonNull( params.getIdSchemes(), new IdSchemes() );\n        IdScheme dataElementIdScheme = idSchemes.getDataElementIdScheme();\n\n        if ( dataElementIdScheme != IdScheme.ID && dataElementIdScheme != IdScheme.UID )\n        {\n            CachingMap<String, String> dataElementUidToIdentifierCache = new CachingMap<>();\n\n            List<Collection<DataValue>> dataValuesList = eventRows.stream().map( EventRow::getDataValues )\n                .collect( Collectors.toList() );\n            populateCache( dataElementIdScheme, dataValuesList, dataElementUidToIdentifierCache );\n            convertDataValuesIdentifiers( dataElementIdScheme, dataValuesList, dataElementUidToIdentifierCache );\n        }\n\n        return eventRows;\n    }", "signature": "List<EventRow> getEventRows( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "full_signature": "@Override public List<EventRow> getEventRows( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "class_method_signature": "JdbcEventStore.getEventRows( EventSearchParams params, List<OrganisationUnit> organisationUnits )", "testcase": false, "constructor": false, "invocations": ["getCurrentUser", "setAccessiblePrograms", "buildSql", "queryForRowSet", "debug", "setEvent", "next", "getString", "getCategoryOptionCombo", "isSuper", "userHasAccess", "getUid", "equals", "getUid", "getString", "validateIdentifiersPresence", "getIdSchemes", "setUid", "getString", "setEvent", "getString", "setTrackedEntityInstance", "getString", "setTrackedEntityInstanceOrgUnit", "getString", "setTrackedEntityInstanceOrgUnitName", "getString", "setTrackedEntityInstanceCreated", "getString", "setTrackedEntityInstanceInactive", "getBoolean", "setDeleted", "getBoolean", "setProgram", "getString", "setProgramStage", "getString", "setOrgUnit", "getString", "fromValue", "getString", "setEnrollment", "getString", "setFollowup", "getBoolean", "setTrackedEntityInstance", "getString", "setOrgUnitName", "getString", "setDueDate", "getIso8601NoTz", "getDate", "setEventDate", "getIso8601NoTz", "getDate", "add", "getString", "getString", "getString", "setCreated", "getIso8601NoTz", "getDate", "setLastUpdated", "getIso8601NoTz", "getDate", "setValue", "getString", "setDisplayName", "getString", "setValueType", "valueOf", "toUpperCase", "setAttribute", "getString", "add", "getAttributes", "isEmpty", "getString", "containsKey", "getString", "convertEventDataValueJsonIntoSet", "getString", "add", "convertEventDataValueIntoDtoDataValue", "put", "getString", "getString", "contains", "getString", "setNote", "getString", "setValue", "getString", "setStoredDate", "getIso8601NoTz", "getDate", "setStoredBy", "getString", "add", "getNotes", "add", "getString", "forEach", "setDataValues", "get", "getUid", "firstNonNull", "getIdSchemes", "getDataElementIdScheme", "collect", "map", "stream", "toList", "populateCache", "convertDataValuesIdentifiers"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}