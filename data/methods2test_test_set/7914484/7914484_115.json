{"test_class": {"identifier": "SoapHeaderElementMethodArgumentResolverTest", "superclass": "extends AbstractMethodArgumentResolverTestCase", "interfaces": "", "fields": [{"original_string": "private static final QName HEADER_QNAME = new QName(NAMESPACE_URI, \"header\");", "modifier": "private static final", "type": "QName", "declarator": "HEADER_QNAME = new QName(NAMESPACE_URI, \"header\")", "var_name": "HEADER_QNAME"}, {"original_string": "private static final String HEADER_CONTENT = \"content\";", "modifier": "private static final", "type": "String", "declarator": "HEADER_CONTENT = \"content\"", "var_name": "HEADER_CONTENT"}, {"original_string": "private SoapHeaderElementMethodArgumentResolver resolver;", "modifier": "private", "type": "SoapHeaderElementMethodArgumentResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private MessageContext messageContext;", "modifier": "private", "type": "MessageContext", "declarator": "messageContext", "var_name": "messageContext"}, {"original_string": "private MethodParameter soapHeaderWithEmptyValue;", "modifier": "private", "type": "MethodParameter", "declarator": "soapHeaderWithEmptyValue", "var_name": "soapHeaderWithEmptyValue"}, {"original_string": "private MethodParameter soapHeaderElementParameter;", "modifier": "private", "type": "MethodParameter", "declarator": "soapHeaderElementParameter", "var_name": "soapHeaderElementParameter"}, {"original_string": "private MethodParameter soapHeaderElementListParameter;", "modifier": "private", "type": "MethodParameter", "declarator": "soapHeaderElementListParameter", "var_name": "soapHeaderElementListParameter"}, {"original_string": "private MethodParameter soapHeaderMismatch;", "modifier": "private", "type": "MethodParameter", "declarator": "soapHeaderMismatch", "var_name": "soapHeaderMismatch"}, {"original_string": "private MethodParameter soapHeaderMismatchList;", "modifier": "private", "type": "MethodParameter", "declarator": "soapHeaderMismatchList", "var_name": "soapHeaderMismatchList"}], "file": "spring-ws-core/src/test/java/org/springframework/ws/soap/server/endpoint/adapter/method/SoapHeaderElementMethodArgumentResolverTest.java"}, "test_case": {"identifier": "supportsParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void supportsParameter() throws Exception {\n\t\tassertTrue(\"resolver does not support soapHeaderElement\", resolver.supportsParameter(soapHeaderElementParameter));\n\t\tassertTrue(\"resolver does not support List<soapHeaderElement>\",\n\t\t\t\tresolver.supportsParameter(soapHeaderElementListParameter));\n\t}", "signature": "void supportsParameter()", "full_signature": "@Test public void supportsParameter()", "class_method_signature": "SoapHeaderElementMethodArgumentResolverTest.supportsParameter()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "supportsParameter", "assertTrue", "supportsParameter"]}, "focal_class": {"identifier": "SoapHeaderElementMethodArgumentResolver", "superclass": "", "interfaces": "implements MethodArgumentResolver", "fields": [], "methods": [{"identifier": "supportsParameter", "parameters": "(MethodParameter parameter)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsParameter(MethodParameter parameter)", "full_signature": "@Override public boolean supportsParameter(MethodParameter parameter)", "class_method_signature": "SoapHeaderElementMethodArgumentResolver.supportsParameter(MethodParameter parameter)", "testcase": false, "constructor": false}, {"identifier": "resolveArgument", "parameters": "(MessageContext messageContext, MethodParameter parameter)", "modifiers": "@Override public", "return": "Object", "signature": "Object resolveArgument(MessageContext messageContext, MethodParameter parameter)", "full_signature": "@Override public Object resolveArgument(MessageContext messageContext, MethodParameter parameter)", "class_method_signature": "SoapHeaderElementMethodArgumentResolver.resolveArgument(MessageContext messageContext, MethodParameter parameter)", "testcase": false, "constructor": false}, {"identifier": "extractSoapHeader", "parameters": "(QName qname, org.springframework.ws.soap.SoapHeader soapHeader)", "modifiers": "private", "return": "SoapHeaderElement", "signature": "SoapHeaderElement extractSoapHeader(QName qname, org.springframework.ws.soap.SoapHeader soapHeader)", "full_signature": "private SoapHeaderElement extractSoapHeader(QName qname, org.springframework.ws.soap.SoapHeader soapHeader)", "class_method_signature": "SoapHeaderElementMethodArgumentResolver.extractSoapHeader(QName qname, org.springframework.ws.soap.SoapHeader soapHeader)", "testcase": false, "constructor": false}, {"identifier": "extractSoapHeaderList", "parameters": "(QName qname,\n\t\t\torg.springframework.ws.soap.SoapHeader soapHeader)", "modifiers": "private", "return": "List<SoapHeaderElement>", "signature": "List<SoapHeaderElement> extractSoapHeaderList(QName qname,\n\t\t\torg.springframework.ws.soap.SoapHeader soapHeader)", "full_signature": "private List<SoapHeaderElement> extractSoapHeaderList(QName qname,\n\t\t\torg.springframework.ws.soap.SoapHeader soapHeader)", "class_method_signature": "SoapHeaderElementMethodArgumentResolver.extractSoapHeaderList(QName qname,\n\t\t\torg.springframework.ws.soap.SoapHeader soapHeader)", "testcase": false, "constructor": false}], "file": "spring-ws-core/src/main/java/org/springframework/ws/soap/server/endpoint/adapter/method/SoapHeaderElementMethodArgumentResolver.java"}, "focal_method": {"identifier": "supportsParameter", "parameters": "(MethodParameter parameter)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean supportsParameter(MethodParameter parameter) {\n\t\tSoapHeader soapHeader = parameter.getParameterAnnotation(SoapHeader.class);\n\t\tif (soapHeader == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tClass<?> parameterType = parameter.getParameterType();\n\n\t\t// Simple SoapHeaderElement parameter\n\t\tif (SoapHeaderElement.class.equals(parameterType)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// List<SoapHeaderElement> parameter\n\t\tif (List.class.equals(parameterType)) {\n\t\t\tType genericType = parameter.getGenericParameterType();\n\t\t\tif (genericType instanceof ParameterizedType) {\n\t\t\t\tParameterizedType parameterizedType = (ParameterizedType) genericType;\n\t\t\t\tType[] typeArguments = parameterizedType.getActualTypeArguments();\n\t\t\t\tif (typeArguments.length == 1 && SoapHeaderElement.class.equals(typeArguments[0])) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "signature": "boolean supportsParameter(MethodParameter parameter)", "full_signature": "@Override public boolean supportsParameter(MethodParameter parameter)", "class_method_signature": "SoapHeaderElementMethodArgumentResolver.supportsParameter(MethodParameter parameter)", "testcase": false, "constructor": false, "invocations": ["getParameterAnnotation", "getParameterType", "equals", "equals", "getGenericParameterType", "getActualTypeArguments", "equals"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}