{"test_class": {"identifier": "DeadlockDetectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final TestFactory FACTORY = new TestFactory();", "modifier": "private static final", "type": "TestFactory", "declarator": "FACTORY = new TestFactory()", "var_name": "FACTORY"}, {"original_string": "private LockManager lockManager;", "modifier": "private", "type": "LockManager", "declarator": "lockManager", "var_name": "lockManager"}, {"original_string": "private TestThread a;", "modifier": "private", "type": "TestThread", "declarator": "a", "var_name": "a"}, {"original_string": "private TestThread b;", "modifier": "private", "type": "TestThread", "declarator": "b", "var_name": "b"}, {"original_string": "private TestThread c;", "modifier": "private", "type": "TestThread", "declarator": "c", "var_name": "c"}, {"original_string": "private TestThread d;", "modifier": "private", "type": "TestThread", "declarator": "d", "var_name": "d"}], "file": "zava/src/test/java/com/github/geophile/erdo/transaction/DeadlockDetectorTest.java"}, "test_case": {"identifier": "testDeadlockOf3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeadlockOf3() throws Exception\n    {\n        TestKey k0 = key(0);\n        TestKey k1 = key(1);\n        TestKey k2 = key(2);\n        a.lock(k0);\n        b.lock(k1);\n        c.lock(k2);\n        a.lock(k1);\n        b.lock(k2);\n        c.lock(k0);\n        DeadlockDetector deadlockDetector = new DeadlockDetector(lockManager);\n        Set<Transaction> victims = deadlockDetector.victims();\n        assertEquals(1, victims.size());\n        assertEquals(latestStart(a, b, c).transaction(), victims.iterator().next());\n    }", "signature": "void testDeadlockOf3()", "full_signature": "@Test public void testDeadlockOf3()", "class_method_signature": "DeadlockDetectorTest.testDeadlockOf3()", "testcase": true, "constructor": false, "invocations": ["key", "key", "key", "lock", "lock", "lock", "lock", "lock", "lock", "victims", "assertEquals", "size", "assertEquals", "transaction", "latestStart", "next", "iterator"]}, "focal_class": {"identifier": "DeadlockDetector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(DeadlockDetector.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(DeadlockDetector.class.getName())", "var_name": "LOG"}, {"original_string": "private final LockManager lockManager;", "modifier": "private final", "type": "LockManager", "declarator": "lockManager", "var_name": "lockManager"}, {"original_string": "private int detectionCounter = 0;", "modifier": "private", "type": "int", "declarator": "detectionCounter = 0", "var_name": "detectionCounter"}], "methods": [{"identifier": "victims", "parameters": "()", "modifiers": "public", "return": "Set<Transaction>", "signature": "Set<Transaction> victims()", "full_signature": "public Set<Transaction> victims()", "class_method_signature": "DeadlockDetector.victims()", "testcase": false, "constructor": false}, {"identifier": "DeadlockDetector", "parameters": "(LockManager lockManager)", "modifiers": "public", "return": "", "signature": " DeadlockDetector(LockManager lockManager)", "full_signature": "public  DeadlockDetector(LockManager lockManager)", "class_method_signature": "DeadlockDetector.DeadlockDetector(LockManager lockManager)", "testcase": false, "constructor": true}, {"identifier": "logPaths", "parameters": "(int detectionId, int extensions, List<Path> paths, List<Path> cycles)", "modifiers": "private", "return": "void", "signature": "void logPaths(int detectionId, int extensions, List<Path> paths, List<Path> cycles)", "full_signature": "private void logPaths(int detectionId, int extensions, List<Path> paths, List<Path> cycles)", "class_method_signature": "DeadlockDetector.logPaths(int detectionId, int extensions, List<Path> paths, List<Path> cycles)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/com/github/geophile/erdo/transaction/DeadlockDetector.java"}, "focal_method": {"identifier": "victims", "parameters": "()", "modifiers": "public", "return": "Set<Transaction>", "body": "public Set<Transaction> victims()\n    {\n        int detectionId = detectionCounter++;\n        LOG.log(Level.INFO, \"Starting deadlock detection {0}\", detectionId);\n        Set<Transaction> victims = new HashSet<Transaction>();\n        // WaitsFor.waiter -> WaitsFor\n        Map<Transaction, WaitsFor> dependencies = lockManager.dependencies();\n        List<Path> paths = new ArrayList<Path>();\n        for (WaitsFor waitsFor : dependencies.values()) {\n            paths.add(new Path(waitsFor));\n        }\n        int extensions = 0;\n        List<Path> cycles = new ArrayList<Path>();\n        logPaths(detectionId, 0, paths, cycles);\n        do {\n            for (Iterator<Path> pathIterator = paths.iterator(); pathIterator.hasNext();) {\n                Path path = pathIterator.next();\n                Transaction pathLast = path.last();\n                WaitsFor extension = dependencies.get(pathLast);\n                if (extension == null) {\n                    pathIterator.remove();\n                } else if (!path.extend(extension.copy())) {\n                    // path contains cycle\n                    cycles.add(path);\n                    pathIterator.remove();\n                }\n            }\n            logPaths(detectionId, ++extensions, paths, cycles);\n        } while (!paths.isEmpty());\n        for (Path path : cycles) {\n            victims.add(path.victim());\n        }\n        return victims;\n    }", "signature": "Set<Transaction> victims()", "full_signature": "public Set<Transaction> victims()", "class_method_signature": "DeadlockDetector.victims()", "testcase": false, "constructor": false, "invocations": ["log", "dependencies", "values", "add", "logPaths", "iterator", "hasNext", "next", "last", "get", "remove", "extend", "copy", "add", "remove", "logPaths", "isEmpty", "add", "victim"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}