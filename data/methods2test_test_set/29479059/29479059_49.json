{"test_class": {"identifier": "OnJobExecutionFinishedEventListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private OnJobExecutionFinishedEventListener onJobExecutionFinishedEventListener;", "modifier": "private", "type": "OnJobExecutionFinishedEventListener", "declarator": "onJobExecutionFinishedEventListener", "var_name": "onJobExecutionFinishedEventListener"}, {"original_string": "@Mock\n    private RemoteJobExecutionEventPublisher jobExecutionEventPublisher;", "modifier": "@Mock\n    private", "type": "RemoteJobExecutionEventPublisher", "declarator": "jobExecutionEventPublisher", "var_name": "jobExecutionEventPublisher"}, {"original_string": "@Mock\n    private RemoteStepExecutionEventPublisher remoteStepExecutionEventPublisher;", "modifier": "@Mock\n    private", "type": "RemoteStepExecutionEventPublisher", "declarator": "remoteStepExecutionEventPublisher", "var_name": "remoteStepExecutionEventPublisher"}], "file": "spring-batch-lightmin-client/spring-batch-lightmin-client-core/src/test/java/org/tuxdevelop/spring/batch/lightmin/client/listener/OnJobExecutionFinishedEventListenerTest.java"}, "test_case": {"identifier": "testOnApplicationEventJobExecution", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnApplicationEventJobExecution() {\n        final JobInstance instance = new JobInstance(1L, \"testJob\");\n        final JobExecution jobExecution = new JobExecution(1L);\n        jobExecution.setJobInstance(instance);\n        jobExecution.setExitStatus(ExitStatus.COMPLETED);\n        final JobExecutionEvent jobExecutionEvent = new JobExecutionEvent(jobExecution, \"testApplication\");\n\n        this.onJobExecutionFinishedEventListener.onApplicationEvent(jobExecutionEvent);\n        Mockito.verify(this.jobExecutionEventPublisher, Mockito.times(1))\n                .publishEvent(any(JobExecutionEventInfo.class));\n    }", "signature": "void testOnApplicationEventJobExecution()", "full_signature": "@Test public void testOnApplicationEventJobExecution()", "class_method_signature": "OnJobExecutionFinishedEventListenerTest.testOnApplicationEventJobExecution()", "testcase": true, "constructor": false, "invocations": ["setJobInstance", "setExitStatus", "onApplicationEvent", "publishEvent", "verify", "times", "any"]}, "focal_class": {"identifier": "OnJobExecutionFinishedEventListener", "superclass": "", "interfaces": "implements ApplicationListener<JobExecutionEvent>", "fields": [{"original_string": "private final JobExecutionEventPublisher jobExecutionEventPublisher;", "modifier": "private final", "type": "JobExecutionEventPublisher", "declarator": "jobExecutionEventPublisher", "var_name": "jobExecutionEventPublisher"}, {"original_string": "private final StepExecutionEventPublisher stepExecutionEventPublisher;", "modifier": "private final", "type": "StepExecutionEventPublisher", "declarator": "stepExecutionEventPublisher", "var_name": "stepExecutionEventPublisher"}], "methods": [{"identifier": "OnJobExecutionFinishedEventListener", "parameters": "(final JobExecutionEventPublisher jobExecutionEventPublisher, final StepExecutionEventPublisher stepExecutionEventPublisher)", "modifiers": "public", "return": "", "signature": " OnJobExecutionFinishedEventListener(final JobExecutionEventPublisher jobExecutionEventPublisher, final StepExecutionEventPublisher stepExecutionEventPublisher)", "full_signature": "public  OnJobExecutionFinishedEventListener(final JobExecutionEventPublisher jobExecutionEventPublisher, final StepExecutionEventPublisher stepExecutionEventPublisher)", "class_method_signature": "OnJobExecutionFinishedEventListener.OnJobExecutionFinishedEventListener(final JobExecutionEventPublisher jobExecutionEventPublisher, final StepExecutionEventPublisher stepExecutionEventPublisher)", "testcase": false, "constructor": true}, {"identifier": "onApplicationEvent", "parameters": "(final JobExecutionEvent jobExecutionEvent)", "modifiers": "@Override public", "return": "void", "signature": "void onApplicationEvent(final JobExecutionEvent jobExecutionEvent)", "full_signature": "@Override public void onApplicationEvent(final JobExecutionEvent jobExecutionEvent)", "class_method_signature": "OnJobExecutionFinishedEventListener.onApplicationEvent(final JobExecutionEvent jobExecutionEvent)", "testcase": false, "constructor": false}], "file": "spring-batch-lightmin-client/spring-batch-lightmin-client-core/src/main/java/org/tuxdevelop/spring/batch/lightmin/client/listener/OnJobExecutionFinishedEventListener.java"}, "focal_method": {"identifier": "onApplicationEvent", "parameters": "(final JobExecutionEvent jobExecutionEvent)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onApplicationEvent(final JobExecutionEvent jobExecutionEvent) {\n        final JobExecution jobExecution = jobExecutionEvent.getJobExecution();\n        if (jobExecution != null) {\n            log.info(jobExecution.getJobInstance().getJobName() + \", Status: \" + jobExecution.getStatus().getBatchStatus() +\n                    \", Exit: \" + jobExecution.getExitStatus().getExitCode());\n            final JobExecutionEventInfo jobExecutionEventInfo =\n                    EventTransformer.transformToJobExecutionEventInfo(\n                            jobExecution,\n                            jobExecutionEvent.getApplicationName());\n            this.jobExecutionEventPublisher.publishEvent(jobExecutionEventInfo);\n            jobExecution.getStepExecutions()\n                    .stream()\n                    .map(step -> EventTransformer.transformToStepExecutionEventInfo(step, jobExecutionEvent.getApplicationName()))\n                    .forEach(this.stepExecutionEventPublisher::publishEvent);\n        } else {\n            log.debug(\"could not fire JobExcutionEvent, exitStatus was null\");\n        }\n\n    }", "signature": "void onApplicationEvent(final JobExecutionEvent jobExecutionEvent)", "full_signature": "@Override public void onApplicationEvent(final JobExecutionEvent jobExecutionEvent)", "class_method_signature": "OnJobExecutionFinishedEventListener.onApplicationEvent(final JobExecutionEvent jobExecutionEvent)", "testcase": false, "constructor": false, "invocations": ["getJobExecution", "info", "getJobName", "getJobInstance", "getBatchStatus", "getStatus", "getExitCode", "getExitStatus", "transformToJobExecutionEventInfo", "getApplicationName", "publishEvent", "forEach", "map", "stream", "getStepExecutions", "transformToStepExecutionEventInfo", "getApplicationName", "debug"]}, "repository": {"repo_id": 29479059, "url": "https://github.com/tuxdevelop/spring-batch-lightmin", "language": "Java", "is_fork": false, "fork_count": 34, "stargazer_count": 109, "size": 12355, "license": "licensed"}}