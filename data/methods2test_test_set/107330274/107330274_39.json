{"test_class": {"identifier": "SpectatorCodePointTrackerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Registry registry = new DefaultRegistry();", "modifier": "private final", "type": "Registry", "declarator": "registry = new DefaultRegistry()", "var_name": "registry"}, {"original_string": "private final SpectatorCodePointTracker tracker = new SpectatorCodePointTracker(registry);", "modifier": "private final", "type": "SpectatorCodePointTracker", "declarator": "tracker = new SpectatorCodePointTracker(registry)", "var_name": "tracker"}], "file": "titus-common/src/test/java/com/netflix/titus/common/util/code/SpectatorCodePointTrackerTest.java"}, "test_case": {"identifier": "testCodePointHit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCodePointHit() throws Exception {\n        tracker.markReachable();\n        tracker.markReachable(\"request2\");\n\n        assertThat(tracker.marked).hasSize(2);\n\n        for (CodePoint first : tracker.marked.keySet()) {\n            assertThat(first.getClassName()).isEqualTo(SpectatorCodePointTrackerTest.class.getName());\n            assertThat(first.getMethodName()).isEqualTo(\"testCodePointHit\");\n        }\n    }", "signature": "void testCodePointHit()", "full_signature": "@Test public void testCodePointHit()", "class_method_signature": "SpectatorCodePointTrackerTest.testCodePointHit()", "testcase": true, "constructor": false, "invocations": ["markReachable", "markReachable", "hasSize", "assertThat", "keySet", "isEqualTo", "assertThat", "getClassName", "getName", "isEqualTo", "assertThat", "getMethodName"]}, "focal_class": {"identifier": "SpectatorCodePointTracker", "superclass": "extends CodePointTracker", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SpectatorCodePointTracker.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SpectatorCodePointTracker.class)", "var_name": "logger"}, {"original_string": "private final Registry registry;", "modifier": "private final", "type": "Registry", "declarator": "registry", "var_name": "registry"}, {"original_string": "final ConcurrentMap<CodePoint, Counter> marked = new ConcurrentHashMap<>();", "modifier": "final", "type": "ConcurrentMap<CodePoint, Counter>", "declarator": "marked = new ConcurrentHashMap<>()", "var_name": "marked"}], "methods": [{"identifier": "SpectatorCodePointTracker", "parameters": "(Registry registry)", "modifiers": "public", "return": "", "signature": " SpectatorCodePointTracker(Registry registry)", "full_signature": "public  SpectatorCodePointTracker(Registry registry)", "class_method_signature": "SpectatorCodePointTracker.SpectatorCodePointTracker(Registry registry)", "testcase": false, "constructor": true}, {"identifier": "markReachable", "parameters": "(CodePoint codePoint)", "modifiers": "protected", "return": "void", "signature": "void markReachable(CodePoint codePoint)", "full_signature": "protected void markReachable(CodePoint codePoint)", "class_method_signature": "SpectatorCodePointTracker.markReachable(CodePoint codePoint)", "testcase": false, "constructor": false}, {"identifier": "createCounter", "parameters": "(CodePoint codePoint)", "modifiers": "private", "return": "Counter", "signature": "Counter createCounter(CodePoint codePoint)", "full_signature": "private Counter createCounter(CodePoint codePoint)", "class_method_signature": "SpectatorCodePointTracker.createCounter(CodePoint codePoint)", "testcase": false, "constructor": false}, {"identifier": "markFirst", "parameters": "(CodePoint codePoint)", "modifiers": "private", "return": "void", "signature": "void markFirst(CodePoint codePoint)", "full_signature": "private void markFirst(CodePoint codePoint)", "class_method_signature": "SpectatorCodePointTracker.markFirst(CodePoint codePoint)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/code/SpectatorCodePointTracker.java"}, "focal_method": {"identifier": "markReachable", "parameters": "(CodePoint codePoint)", "modifiers": "protected", "return": "void", "body": "protected void markReachable(CodePoint codePoint) {\n        if (!marked.containsKey(codePoint)) {\n            if (marked.putIfAbsent(codePoint, createCounter(codePoint)) == null) {\n                markFirst(codePoint);\n            }\n        }\n        marked.get(codePoint).increment();\n    }", "signature": "void markReachable(CodePoint codePoint)", "full_signature": "protected void markReachable(CodePoint codePoint)", "class_method_signature": "SpectatorCodePointTracker.markReachable(CodePoint codePoint)", "testcase": false, "constructor": false, "invocations": ["containsKey", "putIfAbsent", "createCounter", "markFirst", "increment", "get"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}