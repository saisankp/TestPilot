{"test_class": {"identifier": "GeometricTetrahedralEncoderFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/stereo/GeometricTetrahedralEncoderFactoryTest.java"}, "test_case": {"identifier": "testCreate_2D", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreate_2D() throws Exception {\n\n        IAtomContainer container = mock(IAtomContainer.class);\n        when(container.getAtomCount()).thenReturn(5);\n\n        IAtom c1 = mock(IAtom.class);\n        IAtom o2 = mock(IAtom.class);\n        IAtom n3 = mock(IAtom.class);\n        IAtom c4 = mock(IAtom.class);\n        IAtom h5 = mock(IAtom.class);\n\n        when(container.getAtom(0)).thenReturn(c1);\n        when(container.getAtom(1)).thenReturn(o2);\n        when(container.getAtom(2)).thenReturn(n3);\n        when(container.getAtom(3)).thenReturn(c4);\n        when(container.getAtom(4)).thenReturn(h5);\n\n        Point2d p1 = new Point2d(1.23, -0.29);\n        Point2d p2 = new Point2d(-0.30, -0.29);\n        Point2d p3 = new Point2d(2.00, -1.63);\n        Point2d p4 = new Point2d(2.00, 1.03);\n        Point2d p5 = new Point2d(2.32, -0.29);\n\n        when(c1.getPoint2d()).thenReturn(p1);\n        when(o2.getPoint2d()).thenReturn(p2);\n        when(n3.getPoint2d()).thenReturn(p3);\n        when(c4.getPoint2d()).thenReturn(p4);\n        when(h5.getPoint2d()).thenReturn(p5);\n\n        IBond c1c4 = mock(IBond.class);\n        IBond c1o2 = mock(IBond.class);\n        IBond c1n3 = mock(IBond.class);\n        IBond c1h5 = mock(IBond.class);\n\n        int[][] graph = new int[][]{{1, 2, 3, 4}, {0}, {0}, {0}, {0}};\n\n        when(container.getConnectedBondsList(c1)).thenReturn(Arrays.asList(c1c4, c1o2, c1n3, c1h5));\n\n        // let's say c1 is a chiral carbon\n        when(c1.getHybridization()).thenReturn(IAtomType.Hybridization.SP3);\n        // with a hatch bond from c1 to n3\n        when(c1n3.getStereo()).thenReturn(DOWN);\n        when(c1n3.getBegin()).thenReturn(c1);\n        when(c1n3.getEnd()).thenReturn(n3);\n        when(c1o2.getStereo()).thenReturn(NONE);\n        when(c1o2.getBegin()).thenReturn(c1);\n        when(c1o2.getEnd()).thenReturn(o2);\n        when(c1c4.getStereo()).thenReturn(NONE);\n        when(c1c4.getBegin()).thenReturn(c1);\n        when(c1c4.getEnd()).thenReturn(c4);\n        when(c1h5.getStereo()).thenReturn(NONE);\n        when(c1h5.getBegin()).thenReturn(c1);\n        when(c1h5.getEnd()).thenReturn(h5);\n\n        StereoEncoder encoder = new GeometricTetrahedralEncoderFactory().create(container, graph);\n\n        assertThat(extractEncoders(encoder).size(), is(1));\n\n        GeometricParity geometricParity = getGeometricParity(extractEncoders(encoder).get(0));\n\n        assertTrue(geometricParity instanceof Tetrahedral2DParity);\n\n        assertThat(coords2D(geometricParity), CoreMatchers.is(new Point2d[]{p2, p3, p4, p5}));\n\n    }", "signature": "void testCreate_2D()", "full_signature": "@Test public void testCreate_2D()", "class_method_signature": "GeometricTetrahedralEncoderFactoryTest.testCreate_2D()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getAtomCount", "mock", "mock", "mock", "mock", "mock", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getPoint2d", "thenReturn", "when", "getPoint2d", "thenReturn", "when", "getPoint2d", "thenReturn", "when", "getPoint2d", "thenReturn", "when", "getPoint2d", "mock", "mock", "mock", "mock", "thenReturn", "when", "getConnectedBondsList", "asList", "thenReturn", "when", "getHybridization", "thenReturn", "when", "getStereo", "thenReturn", "when", "getBegin", "thenReturn", "when", "getEnd", "thenReturn", "when", "getStereo", "thenReturn", "when", "getBegin", "thenReturn", "when", "getEnd", "thenReturn", "when", "getStereo", "thenReturn", "when", "getBegin", "thenReturn", "when", "getEnd", "thenReturn", "when", "getStereo", "thenReturn", "when", "getBegin", "thenReturn", "when", "getEnd", "create", "assertThat", "size", "extractEncoders", "is", "getGeometricParity", "get", "extractEncoders", "assertTrue", "assertThat", "coords2D", "is"]}, "focal_class": {"identifier": "GeometricTetrahedralEncoderFactory", "superclass": "", "interfaces": "implements StereoEncoderFactory", "fields": [], "methods": [{"identifier": "create", "parameters": "(IAtomContainer container, int[][] graph)", "modifiers": "@Override public", "return": "StereoEncoder", "signature": "StereoEncoder create(IAtomContainer container, int[][] graph)", "full_signature": "@Override public StereoEncoder create(IAtomContainer container, int[][] graph)", "class_method_signature": "GeometricTetrahedralEncoderFactory.create(IAtomContainer container, int[][] graph)", "testcase": false, "constructor": false}, {"identifier": "geometric", "parameters": "(Map<IAtom, Integer> elevationMap, List<IBond> bonds, int i,\n            int[] adjacent, IAtomContainer container)", "modifiers": "private static", "return": "GeometricParity", "signature": "GeometricParity geometric(Map<IAtom, Integer> elevationMap, List<IBond> bonds, int i,\n            int[] adjacent, IAtomContainer container)", "full_signature": "private static GeometricParity geometric(Map<IAtom, Integer> elevationMap, List<IBond> bonds, int i,\n            int[] adjacent, IAtomContainer container)", "class_method_signature": "GeometricTetrahedralEncoderFactory.geometric(Map<IAtom, Integer> elevationMap, List<IBond> bonds, int i,\n            int[] adjacent, IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "geometric2D", "parameters": "(Map<IAtom, Integer> elevationMap, List<IBond> bonds, int i,\n            int[] adjacent, IAtomContainer container)", "modifiers": "private static", "return": "GeometricParity", "signature": "GeometricParity geometric2D(Map<IAtom, Integer> elevationMap, List<IBond> bonds, int i,\n            int[] adjacent, IAtomContainer container)", "full_signature": "private static GeometricParity geometric2D(Map<IAtom, Integer> elevationMap, List<IBond> bonds, int i,\n            int[] adjacent, IAtomContainer container)", "class_method_signature": "GeometricTetrahedralEncoderFactory.geometric2D(Map<IAtom, Integer> elevationMap, List<IBond> bonds, int i,\n            int[] adjacent, IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "geometric3D", "parameters": "(int i, int[] adjacent, IAtomContainer container)", "modifiers": "private static", "return": "GeometricParity", "signature": "GeometricParity geometric3D(int i, int[] adjacent, IAtomContainer container)", "full_signature": "private static GeometricParity geometric3D(int i, int[] adjacent, IAtomContainer container)", "class_method_signature": "GeometricTetrahedralEncoderFactory.geometric3D(int i, int[] adjacent, IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "sp3", "parameters": "(IAtom atom)", "modifiers": "private static", "return": "boolean", "signature": "boolean sp3(IAtom atom)", "full_signature": "private static boolean sp3(IAtom atom)", "class_method_signature": "GeometricTetrahedralEncoderFactory.sp3(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "nStereoBonds", "parameters": "(List<IBond> bonds)", "modifiers": "private static", "return": "int", "signature": "int nStereoBonds(List<IBond> bonds)", "full_signature": "private static int nStereoBonds(List<IBond> bonds)", "class_method_signature": "GeometricTetrahedralEncoderFactory.nStereoBonds(List<IBond> bonds)", "testcase": false, "constructor": false}, {"identifier": "makeElevationMap", "parameters": "(IAtom atom, List<IBond> bonds, Map<IAtom, Integer> map)", "modifiers": "private static", "return": "void", "signature": "void makeElevationMap(IAtom atom, List<IBond> bonds, Map<IAtom, Integer> map)", "full_signature": "private static void makeElevationMap(IAtom atom, List<IBond> bonds, Map<IAtom, Integer> map)", "class_method_signature": "GeometricTetrahedralEncoderFactory.makeElevationMap(IAtom atom, List<IBond> bonds, Map<IAtom, Integer> map)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/stereo/GeometricTetrahedralEncoderFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(IAtomContainer container, int[][] graph)", "modifiers": "@Override public", "return": "StereoEncoder", "body": "@Override\n    public StereoEncoder create(IAtomContainer container, int[][] graph) {\n\n        // XXX: this code isn't pretty, the current IAtomContainer\n        // implementations are  slow for the queries (i.e. looking at connected\n        // atoms/bonds) we need to ask to decide if something is a potential\n        // tetrahedral centre. We can help out a little with the adjacency list\n        // (int[][]) but this doesn't help with the bonds.\n\n        int n = container.getAtomCount();\n\n        List<StereoEncoder> encoders = new ArrayList<StereoEncoder>();\n        Map<IAtom, Integer> elevation = new HashMap<IAtom, Integer>(10);\n\n        ATOMS: for (int i = 0; i < n; i++) {\n\n            int degree = graph[i].length;\n\n            // ignore those which don't have 3 or 4 neighbors\n            if (degree < 3 || degree > 4) continue;\n\n            IAtom atom = container.getAtom(i);\n\n            // only create encoders for SP3 hybridized atom. atom typing is\n            // currently wrong for some atoms, in sulfoxide for example the atom\n            // type sets SP2... but there we don't to fuss about with that here\n            if (!sp3(atom)) continue;\n\n            // avoid nitrogen-inversion\n            if (Integer.valueOf(7).equals(atom.getAtomicNumber()) && degree == 3) continue;\n\n            // TODO: we could be more strict with our selection, InChI uses C,\n            // Si, Ge, P, As, B, Sn, N, P, S, Se but has preconditions for\n            // certain cases. An atom or ion N, P, As, S or Se is not stereogenic\n            // if it has a terminal H or two terminal neighbors -XHm, -XHn (n+m>0)\n            // where X is O, S, Se, Te, or N\n\n            // XXX: likely bottle neck\n            List<IBond> bonds = container.getConnectedBondsList(atom);\n\n            // try to create geometric parity\n            GeometricParity geometric = geometric(elevation, bonds, i, graph[i], container);\n\n            if (geometric != null) {\n                // add a new encoder if a geometric parity\n                encoders.add(new GeometryEncoder(i, new BasicPermutationParity(graph[i]), geometric));\n            }\n        }\n\n        // no encoders, replace with the empty encoder\n        return encoders.isEmpty() ? StereoEncoder.EMPTY : new MultiStereoEncoder(encoders);\n    }", "signature": "StereoEncoder create(IAtomContainer container, int[][] graph)", "full_signature": "@Override public StereoEncoder create(IAtomContainer container, int[][] graph)", "class_method_signature": "GeometricTetrahedralEncoderFactory.create(IAtomContainer container, int[][] graph)", "testcase": false, "constructor": false, "invocations": ["getAtomCount", "getAtom", "sp3", "equals", "valueOf", "getAtomicNumber", "getConnectedBondsList", "geometric", "add", "isEmpty"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}