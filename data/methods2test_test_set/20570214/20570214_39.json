{"test_class": {"identifier": "AeadFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int AES_KEY_SIZE = 16;", "modifier": "private static final", "type": "int", "declarator": "AES_KEY_SIZE = 16", "var_name": "AES_KEY_SIZE"}, {"original_string": "private static final int HMAC_KEY_SIZE = 20;", "modifier": "private static final", "type": "int", "declarator": "HMAC_KEY_SIZE = 20", "var_name": "HMAC_KEY_SIZE"}], "file": "java_src/src/test/java/com/google/crypto/tink/aead/AeadFactoryTest.java"}, "test_case": {"identifier": "testSmallPlaintextWithRawKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSmallPlaintextWithRawKey() throws Exception {\n    byte[] aesCtrKeyValue = Random.randBytes(AES_KEY_SIZE);\n    byte[] hmacKeyValue = Random.randBytes(HMAC_KEY_SIZE);\n    int ivSize = 12;\n    int tagSize = 16;\n\n    Key primary =\n        TestUtil.createKey(\n            TestUtil.createAesCtrHmacAeadKeyData(aesCtrKeyValue, ivSize, hmacKeyValue, tagSize),\n            42,\n            KeyStatusType.ENABLED,\n            OutputPrefixType.RAW);\n    KeysetHandle keysetHandle = TestUtil.createKeysetHandle(TestUtil.createKeyset(primary));\n    Aead aead = keysetHandle.getPrimitive(Aead.class);\n    byte[] plaintext = Random.randBytes(1);\n    byte[] associatedData = Random.randBytes(20);\n    byte[] ciphertext = aead.encrypt(plaintext, associatedData);\n    assertArrayEquals(plaintext, aead.decrypt(ciphertext, associatedData));\n    assertEquals(\n        CryptoFormat.RAW_PREFIX_SIZE + plaintext.length + ivSize + tagSize, ciphertext.length);\n  }", "signature": "void testSmallPlaintextWithRawKey()", "full_signature": "@Test public void testSmallPlaintextWithRawKey()", "class_method_signature": "AeadFactoryTest.testSmallPlaintextWithRawKey()", "testcase": true, "constructor": false, "invocations": ["randBytes", "randBytes", "createKey", "createAesCtrHmacAeadKeyData", "createKeysetHandle", "createKeyset", "getPrimitive", "randBytes", "randBytes", "encrypt", "assertArrayEquals", "decrypt", "assertEquals"]}, "focal_class": {"identifier": "AeadFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getPrimitive", "parameters": "(KeysetHandle keysetHandle)", "modifiers": "@Deprecated public static", "return": "Aead", "signature": "Aead getPrimitive(KeysetHandle keysetHandle)", "full_signature": "@Deprecated public static Aead getPrimitive(KeysetHandle keysetHandle)", "class_method_signature": "AeadFactory.getPrimitive(KeysetHandle keysetHandle)", "testcase": false, "constructor": false}, {"identifier": "getPrimitive", "parameters": "(KeysetHandle keysetHandle, final KeyManager<Aead> keyManager)", "modifiers": "@Deprecated public static", "return": "Aead", "signature": "Aead getPrimitive(KeysetHandle keysetHandle, final KeyManager<Aead> keyManager)", "full_signature": "@Deprecated public static Aead getPrimitive(KeysetHandle keysetHandle, final KeyManager<Aead> keyManager)", "class_method_signature": "AeadFactory.getPrimitive(KeysetHandle keysetHandle, final KeyManager<Aead> keyManager)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/aead/AeadFactory.java"}, "focal_method": {"identifier": "getPrimitive", "parameters": "(KeysetHandle keysetHandle)", "modifiers": "@Deprecated public static", "return": "Aead", "body": "@Deprecated\n  public static Aead getPrimitive(KeysetHandle keysetHandle) throws GeneralSecurityException {\n    return getPrimitive(keysetHandle, /* keyManager= */ null);\n  }", "signature": "Aead getPrimitive(KeysetHandle keysetHandle)", "full_signature": "@Deprecated public static Aead getPrimitive(KeysetHandle keysetHandle)", "class_method_signature": "AeadFactory.getPrimitive(KeysetHandle keysetHandle)", "testcase": false, "constructor": false, "invocations": ["getPrimitive"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}