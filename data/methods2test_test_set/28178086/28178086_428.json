{"test_class": {"identifier": "TradingDaysSelectionModuleTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/modelling/arima/demetra/TradingDaysSelectionModuleTest.java"}, "test_case": {"identifier": "testProd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProd() {\n        TradingDaysSelectionModule tdm=new TradingDaysSelectionModule(.01, .01);\n        ModellingContext context=new ModellingContext();\n        context.automodelling=true;\n        context.hasseas=true;\n        context.description=new ModelDescription(Data.X, null);\n        context.description.setAirline(true);\n        context.description.setTransformation(DefaultTransformationType.Log);\n        tdm.process(context);\n//        System.out.println(new DataBlock(tdm.getPdel()));\n//        System.out.println(new DataBlock(tdm.getPtd()));\n//        System.out.println(tdm.getChoice());\n    }", "signature": "void testProd()", "full_signature": "@Test public void testProd()", "class_method_signature": "TradingDaysSelectionModuleTest.testProd()", "testcase": true, "constructor": false, "invocations": ["setAirline", "setTransformation", "process"]}, "focal_class": {"identifier": "TradingDaysSelectionModule", "superclass": "extends DemetraModule", "interfaces": "implements IPreprocessingModule", "fields": [{"original_string": "private static final String REGS = \"Regression variables\";", "modifier": "private static final", "type": "String", "declarator": "REGS = \"Regression variables\"", "var_name": "REGS"}, {"original_string": "private static final double DEF_MODEL_EPS = .01, DEF_CONSTRAINT_EPS = .01;", "modifier": "private static final", "type": "double", "declarator": "DEF_MODEL_EPS = .01", "var_name": "DEF_MODEL_EPS"}, {"original_string": "private static final GenericTradingDays[] DEF_TD\n            = new GenericTradingDays[]{\n                GenericTradingDays.contrasts(DayClustering.TD7),\n                GenericTradingDays.contrasts(DayClustering.TD4),\n                GenericTradingDays.contrasts(DayClustering.TD3),\n                GenericTradingDays.contrasts(DayClustering.TD2)\n            };", "modifier": "private static final", "type": "GenericTradingDays[]", "declarator": "DEF_TD\n            = new GenericTradingDays[]{\n                GenericTradingDays.contrasts(DayClustering.TD7),\n                GenericTradingDays.contrasts(DayClustering.TD4),\n                GenericTradingDays.contrasts(DayClustering.TD3),\n                GenericTradingDays.contrasts(DayClustering.TD2)\n            }", "var_name": "DEF_TD"}, {"original_string": "private final GenericTradingDays[] tdVars;", "modifier": "private final", "type": "GenericTradingDays[]", "declarator": "tdVars", "var_name": "tdVars"}, {"original_string": "private PreprocessingModel tdModel;", "modifier": "private", "type": "PreprocessingModel", "declarator": "tdModel", "var_name": "tdModel"}, {"original_string": "private LikelihoodStatistics ntdStats;", "modifier": "private", "type": "LikelihoodStatistics", "declarator": "ntdStats", "var_name": "ntdStats"}, {"original_string": "private LikelihoodStatistics[] tdStats;", "modifier": "private", "type": "LikelihoodStatistics[]", "declarator": "tdStats", "var_name": "tdStats"}, {"original_string": "private final double pftd, pfdel;", "modifier": "private final", "type": "double", "declarator": "pftd", "var_name": "pftd"}, {"original_string": "private double[] pdel, ptd, bic;", "modifier": "private", "type": "double[]", "declarator": "pdel", "var_name": "pdel"}, {"original_string": "private double sigma;", "modifier": "private", "type": "double", "declarator": "sigma", "var_name": "sigma"}, {"original_string": "private static final double DEF_TVAL = 1.96;", "modifier": "private static final", "type": "double", "declarator": "DEF_TVAL = 1.96", "var_name": "DEF_TVAL"}, {"original_string": "private double tval = DEF_TVAL;", "modifier": "private", "type": "double", "declarator": "tval = DEF_TVAL", "var_name": "tval"}, {"original_string": "private int choice;", "modifier": "private", "type": "int", "declarator": "choice", "var_name": "choice"}], "methods": [{"identifier": "TradingDaysSelectionModule", "parameters": "(final double pftd, final double pfdel)", "modifiers": "public", "return": "", "signature": " TradingDaysSelectionModule(final double pftd, final double pfdel)", "full_signature": "public  TradingDaysSelectionModule(final double pftd, final double pfdel)", "class_method_signature": "TradingDaysSelectionModule.TradingDaysSelectionModule(final double pftd, final double pfdel)", "testcase": false, "constructor": true}, {"identifier": "TradingDaysSelectionModule", "parameters": "(final double pftd, final double pfdel, final GenericTradingDays[] td)", "modifiers": "public", "return": "", "signature": " TradingDaysSelectionModule(final double pftd, final double pfdel, final GenericTradingDays[] td)", "full_signature": "public  TradingDaysSelectionModule(final double pftd, final double pfdel, final GenericTradingDays[] td)", "class_method_signature": "TradingDaysSelectionModule.TradingDaysSelectionModule(final double pftd, final double pfdel, final GenericTradingDays[] td)", "testcase": false, "constructor": true}, {"identifier": "getPftd", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getPftd()", "full_signature": "public double getPftd()", "class_method_signature": "TradingDaysSelectionModule.getPftd()", "testcase": false, "constructor": false}, {"identifier": "getTValue", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTValue()", "full_signature": "public double getTValue()", "class_method_signature": "TradingDaysSelectionModule.getTValue()", "testcase": false, "constructor": false}, {"identifier": "setTvalue", "parameters": "(double tval)", "modifiers": "public", "return": "void", "signature": "void setTvalue(double tval)", "full_signature": "public void setTvalue(double tval)", "class_method_signature": "TradingDaysSelectionModule.setTvalue(double tval)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(ModellingContext context)", "modifiers": "@Override public", "return": "ProcessingResult", "signature": "ProcessingResult process(ModellingContext context)", "full_signature": "@Override public ProcessingResult process(ModellingContext context)", "class_method_signature": "TradingDaysSelectionModule.process(ModellingContext context)", "testcase": false, "constructor": false}, {"identifier": "calcProb", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void calcProb()", "full_signature": "private void calcProb()", "class_method_signature": "TradingDaysSelectionModule.calcProb()", "testcase": false, "constructor": false}, {"identifier": "createModel", "parameters": "(ModellingContext context, GenericTradingDays td, LengthOfPeriodType lp)", "modifiers": "private", "return": "PreprocessingModel", "signature": "PreprocessingModel createModel(ModellingContext context, GenericTradingDays td, LengthOfPeriodType lp)", "full_signature": "private PreprocessingModel createModel(ModellingContext context, GenericTradingDays td, LengthOfPeriodType lp)", "class_method_signature": "TradingDaysSelectionModule.createModel(ModellingContext context, GenericTradingDays td, LengthOfPeriodType lp)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(GenericTradingDays td, LengthOfPeriodType lp)", "modifiers": "private", "return": "LikelihoodStatistics", "signature": "LikelihoodStatistics check(GenericTradingDays td, LengthOfPeriodType lp)", "full_signature": "private LikelihoodStatistics check(GenericTradingDays td, LengthOfPeriodType lp)", "class_method_signature": "TradingDaysSelectionModule.check(GenericTradingDays td, LengthOfPeriodType lp)", "testcase": false, "constructor": false}, {"identifier": "backModel", "parameters": "(ModellingContext context, GenericTradingDays td, LengthOfPeriodType lp, boolean mean)", "modifiers": "private", "return": "ModelDescription", "signature": "ModelDescription backModel(ModellingContext context, GenericTradingDays td, LengthOfPeriodType lp, boolean mean)", "full_signature": "private ModelDescription backModel(ModellingContext context, GenericTradingDays td, LengthOfPeriodType lp, boolean mean)", "class_method_signature": "TradingDaysSelectionModule.backModel(ModellingContext context, GenericTradingDays td, LengthOfPeriodType lp, boolean mean)", "testcase": false, "constructor": false}, {"identifier": "checkLY", "parameters": "(PreprocessingModel model)", "modifiers": "private", "return": "boolean", "signature": "boolean checkLY(PreprocessingModel model)", "full_signature": "private boolean checkLY(PreprocessingModel model)", "class_method_signature": "TradingDaysSelectionModule.checkLY(PreprocessingModel model)", "testcase": false, "constructor": false}, {"identifier": "addLPInfo", "parameters": "(PreprocessingModel model, double tstat)", "modifiers": "private", "return": "void", "signature": "void addLPInfo(PreprocessingModel model, double tstat)", "full_signature": "private void addLPInfo(PreprocessingModel model, double tstat)", "class_method_signature": "TradingDaysSelectionModule.addLPInfo(PreprocessingModel model, double tstat)", "testcase": false, "constructor": false}, {"identifier": "addEasterInfo", "parameters": "(PreprocessingModel model, double tstat)", "modifiers": "private", "return": "void", "signature": "void addEasterInfo(PreprocessingModel model, double tstat)", "full_signature": "private void addEasterInfo(PreprocessingModel model, double tstat)", "class_method_signature": "TradingDaysSelectionModule.addEasterInfo(PreprocessingModel model, double tstat)", "testcase": false, "constructor": false}, {"identifier": "addTDInfo", "parameters": "(ModellingContext context, double pwd, double ptd, double pdel, int sel)", "modifiers": "private", "return": "void", "signature": "void addTDInfo(ModellingContext context, double pwd, double ptd, double pdel, int sel)", "full_signature": "private void addTDInfo(ModellingContext context, double pwd, double ptd, double pdel, int sel)", "class_method_signature": "TradingDaysSelectionModule.addTDInfo(ModellingContext context, double pwd, double ptd, double pdel, int sel)", "testcase": false, "constructor": false}, {"identifier": "getTdStats", "parameters": "()", "modifiers": "public", "return": "LikelihoodStatistics[]", "signature": "LikelihoodStatistics[] getTdStats()", "full_signature": "public LikelihoodStatistics[] getTdStats()", "class_method_signature": "TradingDaysSelectionModule.getTdStats()", "testcase": false, "constructor": false}, {"identifier": "getPdel", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getPdel()", "full_signature": "public double[] getPdel()", "class_method_signature": "TradingDaysSelectionModule.getPdel()", "testcase": false, "constructor": false}, {"identifier": "getPtd", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getPtd()", "full_signature": "public double[] getPtd()", "class_method_signature": "TradingDaysSelectionModule.getPtd()", "testcase": false, "constructor": false}, {"identifier": "getChoice", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getChoice()", "full_signature": "public int getChoice()", "class_method_signature": "TradingDaysSelectionModule.getChoice()", "testcase": false, "constructor": false}, {"identifier": "getBic", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getBic()", "full_signature": "public double[] getBic()", "class_method_signature": "TradingDaysSelectionModule.getBic()", "testcase": false, "constructor": false}, {"identifier": "getTdVars", "parameters": "()", "modifiers": "public", "return": "GenericTradingDays[]", "signature": "GenericTradingDays[] getTdVars()", "full_signature": "public GenericTradingDays[] getTdVars()", "class_method_signature": "TradingDaysSelectionModule.getTdVars()", "testcase": false, "constructor": false}, {"identifier": "getTdModel", "parameters": "()", "modifiers": "public", "return": "PreprocessingModel", "signature": "PreprocessingModel getTdModel()", "full_signature": "public PreprocessingModel getTdModel()", "class_method_signature": "TradingDaysSelectionModule.getTdModel()", "testcase": false, "constructor": false}, {"identifier": "getNtdStats", "parameters": "()", "modifiers": "public", "return": "LikelihoodStatistics", "signature": "LikelihoodStatistics getNtdStats()", "full_signature": "public LikelihoodStatistics getNtdStats()", "class_method_signature": "TradingDaysSelectionModule.getNtdStats()", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/modelling/arima/demetra/TradingDaysSelectionModule.java"}, "focal_method": {"identifier": "process", "parameters": "(ModellingContext context)", "modifiers": "@Override public", "return": "ProcessingResult", "body": "@Override\n    public ProcessingResult process(ModellingContext context) {\n        tdStats = new LikelihoodStatistics[tdVars.length];\n        // Computes the more general model, the parameters are kept in more restrivitve models\n        PreprocessingModel tdm = createModel(context, tdVars[0], LengthOfPeriodType.LeapYear);\n        if (tdm == null) {\n            return ProcessingResult.Failed;\n        }\n        tdModel = tdm;\n        ConcentratedLikelihood ll = tdm.estimation.getLikelihood();\n        tdStats[0] = tdm.estimation.getStatistics();\n        int nhp = tdm.description.getArimaComponent().getFreeParametersCount();\n        int df = ll.getN() - ll.getNx() - nhp;\n        sigma = ll.getSsqErr() / df;\n        ntdStats = check(null, LengthOfPeriodType.LeapYear);\n\n        // compute the other models\n        for (int i = 1; i < tdVars.length; ++i) {\n            tdStats[i] = check(tdVars[i], LengthOfPeriodType.LeapYear);\n        }\n\n        calcProb();\n\n        int sel = 0;\n        choice = -1;\n        for (int i = 0; i < pdel.length; ++i) {\n            if (pdel[i] < pfdel && ptd[i] < pftd) {\n                choice = i;\n                break;\n            }\n        }\n        if (choice < 0 && ptd[pdel.length] < pftd) {// Prefer TD\n            choice = pdel.length;\n\n        }\n//        addTDInfo(context, 1 - pwd, 1 - ptd, 1 - pdel, sel);\n        GenericTradingDays best = choice < 0 ? null : tdVars[choice];\n        tdModel = createModel(context, best, LengthOfPeriodType.LeapYear);\n        if (best == null || !checkLY(tdModel)) {\n            boolean mean = Math.abs(tdModel.estimation.getLikelihood().getTStats(true, 2)[0]) > 1.96;\n            context.description = backModel(context, best, LengthOfPeriodType.None, mean);\n        } else {\n            boolean mean = Math.abs(tdModel.estimation.getLikelihood().getTStats(true, 2)[0]) > 1.96;\n            context.description = backModel(context, best, LengthOfPeriodType.LeapYear, mean);\n        }\n        context.estimation = null;\n        return ProcessingResult.Changed;\n    }", "signature": "ProcessingResult process(ModellingContext context)", "full_signature": "@Override public ProcessingResult process(ModellingContext context)", "class_method_signature": "TradingDaysSelectionModule.process(ModellingContext context)", "testcase": false, "constructor": false, "invocations": ["createModel", "getLikelihood", "getStatistics", "getFreeParametersCount", "getArimaComponent", "getN", "getNx", "getSsqErr", "check", "check", "calcProb", "createModel", "checkLY", "abs", "getTStats", "getLikelihood", "backModel", "abs", "getTStats", "getLikelihood", "backModel"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}