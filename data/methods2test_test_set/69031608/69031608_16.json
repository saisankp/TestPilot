{"test_class": {"identifier": "ClassMetadataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public CompilationRule compilationRule = new CompilationRule();", "modifier": "@Rule\n    public", "type": "CompilationRule", "declarator": "compilationRule = new CompilationRule()", "var_name": "compilationRule"}, {"original_string": "private ClassMetadata underTest;", "modifier": "private", "type": "ClassMetadata", "declarator": "underTest", "var_name": "underTest"}], "file": "shade-processor/src/test/java/io/t28/shade/processor/metadata/ClassMetadataTest.java"}, "test_case": {"identifier": "getSimpleNameShouldReturnClassName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getSimpleNameShouldReturnClassName() throws Exception {\n        // exercise\n        final String actual = underTest.getSimpleName();\n\n        // verify\n        assertThat(actual)\n                .isEqualTo(\"String\");\n    }", "signature": "void getSimpleNameShouldReturnClassName()", "full_signature": "@Test public void getSimpleNameShouldReturnClassName()", "class_method_signature": "ClassMetadataTest.getSimpleNameShouldReturnClassName()", "testcase": true, "constructor": false, "invocations": ["getSimpleName", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ClassMetadata", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TypeElement element;", "modifier": "private final", "type": "TypeElement", "declarator": "element", "var_name": "element"}, {"original_string": "private final List<ExecutableElement> constructors;", "modifier": "private final", "type": "List<ExecutableElement>", "declarator": "constructors", "var_name": "constructors"}, {"original_string": "private final List<ExecutableElement> methods;", "modifier": "private final", "type": "List<ExecutableElement>", "declarator": "methods", "var_name": "methods"}], "methods": [{"identifier": "ClassMetadata", "parameters": "(@Nonnull TypeElement element)", "modifiers": "", "return": "", "signature": " ClassMetadata(@Nonnull TypeElement element)", "full_signature": "  ClassMetadata(@Nonnull TypeElement element)", "class_method_signature": "ClassMetadata.ClassMetadata(@Nonnull TypeElement element)", "testcase": false, "constructor": true}, {"identifier": "getSimpleName", "parameters": "()", "modifiers": "@Nonnull public", "return": "String", "signature": "String getSimpleName()", "full_signature": "@Nonnull public String getSimpleName()", "class_method_signature": "ClassMetadata.getSimpleName()", "testcase": false, "constructor": false}, {"identifier": "getClassName", "parameters": "()", "modifiers": "@Nonnull public", "return": "ClassName", "signature": "ClassName getClassName()", "full_signature": "@Nonnull public ClassName getClassName()", "class_method_signature": "ClassMetadata.getClassName()", "testcase": false, "constructor": false}, {"identifier": "isAbstract", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAbstract()", "full_signature": "public boolean isAbstract()", "class_method_signature": "ClassMetadata.isAbstract()", "testcase": false, "constructor": false}, {"identifier": "isClass", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClass()", "full_signature": "public boolean isClass()", "class_method_signature": "ClassMetadata.isClass()", "testcase": false, "constructor": false}, {"identifier": "isInterface", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInterface()", "full_signature": "public boolean isInterface()", "class_method_signature": "ClassMetadata.isInterface()", "testcase": false, "constructor": false}, {"identifier": "hasDefaultConstructor", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasDefaultConstructor()", "full_signature": "public boolean hasDefaultConstructor()", "class_method_signature": "ClassMetadata.hasDefaultConstructor()", "testcase": false, "constructor": false}, {"identifier": "getMethods", "parameters": "()", "modifiers": "@Nonnull @SuppressWarnings(\"WeakerAccess\") protected", "return": "List<ExecutableElement>", "signature": "List<ExecutableElement> getMethods()", "full_signature": "@Nonnull @SuppressWarnings(\"WeakerAccess\") protected List<ExecutableElement> getMethods()", "class_method_signature": "ClassMetadata.getMethods()", "testcase": false, "constructor": false}], "file": "shade-processor/src/main/java/io/t28/shade/processor/metadata/ClassMetadata.java"}, "focal_method": {"identifier": "getSimpleName", "parameters": "()", "modifiers": "@Nonnull public", "return": "String", "body": "@Nonnull\n    public String getSimpleName() {\n        return element.getSimpleName().toString();\n    }", "signature": "String getSimpleName()", "full_signature": "@Nonnull public String getSimpleName()", "class_method_signature": "ClassMetadata.getSimpleName()", "testcase": false, "constructor": false, "invocations": ["toString", "getSimpleName"]}, "repository": {"repo_id": 69031608, "url": "https://github.com/t28hub/shade", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 27, "size": 486, "license": "licensed"}}