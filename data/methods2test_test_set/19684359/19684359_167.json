{"test_class": {"identifier": "ForwardingBigQueryFileOutputCommitterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_PROJECT_ID = \"domain:project\";", "modifier": "private static final", "type": "String", "declarator": "TEST_PROJECT_ID = \"domain:project\"", "var_name": "TEST_PROJECT_ID"}, {"original_string": "private static final String TEST_DATASET_ID = \"dataset\";", "modifier": "private static final", "type": "String", "declarator": "TEST_DATASET_ID = \"dataset\"", "var_name": "TEST_DATASET_ID"}, {"original_string": "private static final String TEST_TABLE_ID = \"table\";", "modifier": "private static final", "type": "String", "declarator": "TEST_TABLE_ID = \"table\"", "var_name": "TEST_TABLE_ID"}, {"original_string": "private static final String QUALIFIED_TEST_TABLE_ID =\n      String.format(\"%s:%s.%s\", TEST_PROJECT_ID, TEST_DATASET_ID, TEST_TABLE_ID);", "modifier": "private static final", "type": "String", "declarator": "QUALIFIED_TEST_TABLE_ID =\n      String.format(\"%s:%s.%s\", TEST_PROJECT_ID, TEST_DATASET_ID, TEST_TABLE_ID)", "var_name": "QUALIFIED_TEST_TABLE_ID"}, {"original_string": "private static final BigQueryFileFormat TEST_FILE_FORMAT =\n      BigQueryFileFormat.NEWLINE_DELIMITED_JSON;", "modifier": "private static final", "type": "BigQueryFileFormat", "declarator": "TEST_FILE_FORMAT =\n      BigQueryFileFormat.NEWLINE_DELIMITED_JSON", "var_name": "TEST_FILE_FORMAT"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n  private static final Class<? extends FileOutputFormat> TEST_OUTPUT_CLASS = TextOutputFormat.class;", "modifier": "@SuppressWarnings(\"rawtypes\")\n  private static final", "type": "Class<? extends FileOutputFormat>", "declarator": "TEST_OUTPUT_CLASS = TextOutputFormat.class", "var_name": "TEST_OUTPUT_CLASS"}, {"original_string": "private static final BigQueryTableSchema TEST_TABLE_SCHEMA =\n      new BigQueryTableSchema()\n          .setFields(\n              ImmutableList.of(\n                  new BigQueryTableFieldSchema().setName(\"Word\").setType(\"STRING\"),\n                  new BigQueryTableFieldSchema().setName(\"Count\").setType(\"INTEGER\"),\n                  new BigQueryTableFieldSchema()\n                      .setName(\"MetaInfo\")\n                      .setType(\"RECORD\")\n                      .setFields(\n                          ImmutableList.of(\n                              new BigQueryTableFieldSchema()\n                                  .setName(\"NestedField1\")\n                                  .setType(\"STRING\"),\n                              new BigQueryTableFieldSchema()\n                                  .setName(\"NestedField2\")\n                                  .setType(\"INTEGER\")))));", "modifier": "private static final", "type": "BigQueryTableSchema", "declarator": "TEST_TABLE_SCHEMA =\n      new BigQueryTableSchema()\n          .setFields(\n              ImmutableList.of(\n                  new BigQueryTableFieldSchema().setName(\"Word\").setType(\"STRING\"),\n                  new BigQueryTableFieldSchema().setName(\"Count\").setType(\"INTEGER\"),\n                  new BigQueryTableFieldSchema()\n                      .setName(\"MetaInfo\")\n                      .setType(\"RECORD\")\n                      .setFields(\n                          ImmutableList.of(\n                              new BigQueryTableFieldSchema()\n                                  .setName(\"NestedField1\")\n                                  .setType(\"STRING\"),\n                              new BigQueryTableFieldSchema()\n                                  .setName(\"NestedField2\")\n                                  .setType(\"INTEGER\")))))", "var_name": "TEST_TABLE_SCHEMA"}, {"original_string": "private static final TaskAttemptID TEST_TASK_ATTEMPT_ID =\n      new TaskAttemptID(new TaskID(\"sample_task\", 100, false, 200), 1);", "modifier": "private static final", "type": "TaskAttemptID", "declarator": "TEST_TASK_ATTEMPT_ID =\n      new TaskAttemptID(new TaskID(\"sample_task\", 100, false, 200), 1)", "var_name": "TEST_TASK_ATTEMPT_ID"}, {"original_string": "private static final String TEST_OUTPUT_PATH_STRING = \"gs://test_bucket/test_directory/\";", "modifier": "private static final", "type": "String", "declarator": "TEST_OUTPUT_PATH_STRING = \"gs://test_bucket/test_directory/\"", "var_name": "TEST_OUTPUT_PATH_STRING"}, {"original_string": "private static final String TEST_OUTPUT_FILE_STRING = TEST_OUTPUT_PATH_STRING + \"test_file\";", "modifier": "private static final", "type": "String", "declarator": "TEST_OUTPUT_FILE_STRING = TEST_OUTPUT_PATH_STRING + \"test_file\"", "var_name": "TEST_OUTPUT_FILE_STRING"}, {"original_string": "private InMemoryGoogleHadoopFileSystem ghfs;", "modifier": "private", "type": "InMemoryGoogleHadoopFileSystem", "declarator": "ghfs", "var_name": "ghfs"}, {"original_string": "private Configuration conf;", "modifier": "private", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private Path outputPath;", "modifier": "private", "type": "Path", "declarator": "outputPath", "var_name": "outputPath"}, {"original_string": "private Path outputSampleFilePath;", "modifier": "private", "type": "Path", "declarator": "outputSampleFilePath", "var_name": "outputSampleFilePath"}, {"original_string": "private Job job;", "modifier": "private", "type": "Job", "declarator": "job", "var_name": "job"}, {"original_string": "private ForwardingBigQueryFileOutputCommitter committer;", "modifier": "private", "type": "ForwardingBigQueryFileOutputCommitter", "declarator": "committer", "var_name": "committer"}, {"original_string": "@Mock private TaskAttemptContext mockTaskAttemptContext;", "modifier": "@Mock private", "type": "TaskAttemptContext", "declarator": "mockTaskAttemptContext", "var_name": "mockTaskAttemptContext"}, {"original_string": "@Mock private OutputCommitter mockCommitter;", "modifier": "@Mock private", "type": "OutputCommitter", "declarator": "mockCommitter", "var_name": "mockCommitter"}], "file": "bigquery/src/test/java/com/google/cloud/hadoop/io/bigquery/output/ForwardingBigQueryFileOutputCommitterTest.java"}, "test_case": {"identifier": "testGetOutputFileURIs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetOutputFileURIs() throws IOException {\n    // Setup the sample directory.\n    generateSampleFiles();\n\n    List<String> outputFileURIs = committer.getOutputFileURIs();\n\n    // Verify the file in the output path is being returFned.\n    assertThat(outputFileURIs).containsExactly(TEST_OUTPUT_FILE_STRING);\n  }", "signature": "void testGetOutputFileURIs()", "full_signature": "@Test public void testGetOutputFileURIs()", "class_method_signature": "ForwardingBigQueryFileOutputCommitterTest.testGetOutputFileURIs()", "testcase": true, "constructor": false, "invocations": ["generateSampleFiles", "getOutputFileURIs", "containsExactly", "assertThat"]}, "focal_class": {"identifier": "ForwardingBigQueryFileOutputCommitter", "superclass": "extends OutputCommitter", "interfaces": "", "fields": [{"original_string": "private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();", "modifier": "private static final", "type": "GoogleLogger", "declarator": "logger = GoogleLogger.forEnclosingClass()", "var_name": "logger"}, {"original_string": "private final OutputCommitter delegate;", "modifier": "private final", "type": "OutputCommitter", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private final FileSystem outputFileSystem;", "modifier": "private final", "type": "FileSystem", "declarator": "outputFileSystem", "var_name": "outputFileSystem"}, {"original_string": "private final Path outputPath;", "modifier": "private final", "type": "Path", "declarator": "outputPath", "var_name": "outputPath"}, {"original_string": "private BigQueryHelper bigQueryHelper;", "modifier": "private", "type": "BigQueryHelper", "declarator": "bigQueryHelper", "var_name": "bigQueryHelper"}], "methods": [{"identifier": "ForwardingBigQueryFileOutputCommitter", "parameters": "(TaskAttemptContext context, OutputCommitter delegate)", "modifiers": "public", "return": "", "signature": " ForwardingBigQueryFileOutputCommitter(TaskAttemptContext context, OutputCommitter delegate)", "full_signature": "public  ForwardingBigQueryFileOutputCommitter(TaskAttemptContext context, OutputCommitter delegate)", "class_method_signature": "ForwardingBigQueryFileOutputCommitter.ForwardingBigQueryFileOutputCommitter(TaskAttemptContext context, OutputCommitter delegate)", "testcase": false, "constructor": true}, {"identifier": "commitJob", "parameters": "(JobContext context)", "modifiers": "@Override public", "return": "void", "signature": "void commitJob(JobContext context)", "full_signature": "@Override public void commitJob(JobContext context)", "class_method_signature": "ForwardingBigQueryFileOutputCommitter.commitJob(JobContext context)", "testcase": false, "constructor": false}, {"identifier": "abortJob", "parameters": "(JobContext context, State state)", "modifiers": "@Override public", "return": "void", "signature": "void abortJob(JobContext context, State state)", "full_signature": "@Override public void abortJob(JobContext context, State state)", "class_method_signature": "ForwardingBigQueryFileOutputCommitter.abortJob(JobContext context, State state)", "testcase": false, "constructor": false}, {"identifier": "abortTask", "parameters": "(TaskAttemptContext context)", "modifiers": "@Override public", "return": "void", "signature": "void abortTask(TaskAttemptContext context)", "full_signature": "@Override public void abortTask(TaskAttemptContext context)", "class_method_signature": "ForwardingBigQueryFileOutputCommitter.abortTask(TaskAttemptContext context)", "testcase": false, "constructor": false}, {"identifier": "commitTask", "parameters": "(TaskAttemptContext context)", "modifiers": "@Override public", "return": "void", "signature": "void commitTask(TaskAttemptContext context)", "full_signature": "@Override public void commitTask(TaskAttemptContext context)", "class_method_signature": "ForwardingBigQueryFileOutputCommitter.commitTask(TaskAttemptContext context)", "testcase": false, "constructor": false}, {"identifier": "needsTaskCommit", "parameters": "(TaskAttemptContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean needsTaskCommit(TaskAttemptContext context)", "full_signature": "@Override public boolean needsTaskCommit(TaskAttemptContext context)", "class_method_signature": "ForwardingBigQueryFileOutputCommitter.needsTaskCommit(TaskAttemptContext context)", "testcase": false, "constructor": false}, {"identifier": "setupJob", "parameters": "(JobContext context)", "modifiers": "@Override public", "return": "void", "signature": "void setupJob(JobContext context)", "full_signature": "@Override public void setupJob(JobContext context)", "class_method_signature": "ForwardingBigQueryFileOutputCommitter.setupJob(JobContext context)", "testcase": false, "constructor": false}, {"identifier": "setupTask", "parameters": "(TaskAttemptContext context)", "modifiers": "@Override public", "return": "void", "signature": "void setupTask(TaskAttemptContext context)", "full_signature": "@Override public void setupTask(TaskAttemptContext context)", "class_method_signature": "ForwardingBigQueryFileOutputCommitter.setupTask(TaskAttemptContext context)", "testcase": false, "constructor": false}, {"identifier": "getOutputFileURIs", "parameters": "()", "modifiers": "protected", "return": "List<String>", "signature": "List<String> getOutputFileURIs()", "full_signature": "protected List<String> getOutputFileURIs()", "class_method_signature": "ForwardingBigQueryFileOutputCommitter.getOutputFileURIs()", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "(JobContext context)", "modifiers": "protected", "return": "void", "signature": "void cleanup(JobContext context)", "full_signature": "protected void cleanup(JobContext context)", "class_method_signature": "ForwardingBigQueryFileOutputCommitter.cleanup(JobContext context)", "testcase": false, "constructor": false}, {"identifier": "getDelegate", "parameters": "()", "modifiers": "protected", "return": "OutputCommitter", "signature": "OutputCommitter getDelegate()", "full_signature": "protected OutputCommitter getDelegate()", "class_method_signature": "ForwardingBigQueryFileOutputCommitter.getDelegate()", "testcase": false, "constructor": false}, {"identifier": "getBigQueryHelper", "parameters": "()", "modifiers": "protected", "return": "BigQueryHelper", "signature": "BigQueryHelper getBigQueryHelper()", "full_signature": "protected BigQueryHelper getBigQueryHelper()", "class_method_signature": "ForwardingBigQueryFileOutputCommitter.getBigQueryHelper()", "testcase": false, "constructor": false}, {"identifier": "setBigQueryHelper", "parameters": "(BigQueryHelper bigQueryHelper)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setBigQueryHelper(BigQueryHelper bigQueryHelper)", "full_signature": "@VisibleForTesting void setBigQueryHelper(BigQueryHelper bigQueryHelper)", "class_method_signature": "ForwardingBigQueryFileOutputCommitter.setBigQueryHelper(BigQueryHelper bigQueryHelper)", "testcase": false, "constructor": false}], "file": "bigquery/src/main/java/com/google/cloud/hadoop/io/bigquery/output/ForwardingBigQueryFileOutputCommitter.java"}, "focal_method": {"identifier": "getOutputFileURIs", "parameters": "()", "modifiers": "protected", "return": "List<String>", "body": "protected List<String> getOutputFileURIs() throws IOException {\n    // Enumerate over all files in the output path.\n    FileStatus[] outputFiles = outputFileSystem.listStatus(outputPath);\n    ArrayList<String> sourceUris = new ArrayList<String>(outputFiles.length);\n\n    for (int i = 0; i < outputFiles.length; i++) {\n      FileStatus fileStatus = outputFiles[i];\n\n      // Skip the success file and directories as they're not relevant to BigQuery.\n      if (!fileStatus.isDir()\n          && !fileStatus.getPath().getName().equals(FileOutputCommitter.SUCCEEDED_FILE_NAME)) {\n        sourceUris.add(fileStatus.getPath().toString());\n      }\n    }\n\n    return sourceUris;\n  }", "signature": "List<String> getOutputFileURIs()", "full_signature": "protected List<String> getOutputFileURIs()", "class_method_signature": "ForwardingBigQueryFileOutputCommitter.getOutputFileURIs()", "testcase": false, "constructor": false, "invocations": ["listStatus", "isDir", "equals", "getName", "getPath", "add", "toString", "getPath"]}, "repository": {"repo_id": 19684359, "url": "https://github.com/GoogleCloudDataproc/bigdata-interop", "stars": 178, "created": "5/12/2014 3:11:55 AM +00:00", "updates": "2020-01-23T23:10:40+00:00", "fork": "False", "license": "licensed"}}