{"test_class": {"identifier": "PermissionModelDataMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PermissionModelDataMapper permissionModelDataMapper;", "modifier": "private", "type": "PermissionModelDataMapper", "declarator": "permissionModelDataMapper", "var_name": "permissionModelDataMapper"}], "file": "presentation/src/test/java/com/remotecraft/app/mapper/PermissionModelDataMapperTest.java"}, "test_case": {"identifier": "shouldProperlyMapPermissionModelCollectionIntoPermissionCollection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldProperlyMapPermissionModelCollectionIntoPermissionCollection()\n      throws Exception {\n    PermissionModel permissionModel1 = PermissionModel.builder()\n        .permission(\"CAMERA\")\n        .rationaleTitle(\"Permission Request\")\n        .rationaleMessage(\"You should allow it\")\n        .deniedMessage(\"Allow it!\")\n        .build();\n    PermissionModel permissionModel2 = PermissionModel.builder()\n        .permission(\"CONTACTS\")\n        .rationaleTitle(\"Permission Request\")\n        .rationaleMessage(\"You should allow it, please\")\n        .deniedMessage(\"ALLOW IT!!\")\n        .build();\n    ArrayList<PermissionModel> permissionModels = new ArrayList<>();\n    permissionModels.add(permissionModel1);\n    permissionModels.add(permissionModel2);\n\n    Collection<Permission> permissions =\n        permissionModelDataMapper.transformInverse(permissionModels);\n\n    assertThat(permissions, notNullValue());\n    assertThat(permissions.size(), is(2));\n    Permission permission1 = (Permission) permissions.toArray()[0];\n    assertThat(permission1, notNullValue());\n    assertThat(permission1, instanceOf(Permission.class));\n    assertThat(permission1.permission(), notNullValue());\n    assertThat(permission1.permission(), is(\"CAMERA\"));\n    Permission permission2 = (Permission) permissions.toArray()[1];\n    assertThat(permission2, notNullValue());\n    assertThat(permission2, instanceOf(Permission.class));\n    assertThat(permission2.permission(), notNullValue());\n    assertThat(permission2.permission(), is(\"CONTACTS\"));\n  }", "signature": "void shouldProperlyMapPermissionModelCollectionIntoPermissionCollection()", "full_signature": "@Test public void shouldProperlyMapPermissionModelCollectionIntoPermissionCollection()", "class_method_signature": "PermissionModelDataMapperTest.shouldProperlyMapPermissionModelCollectionIntoPermissionCollection()", "testcase": true, "constructor": false, "invocations": ["build", "deniedMessage", "rationaleMessage", "rationaleTitle", "permission", "builder", "build", "deniedMessage", "rationaleMessage", "rationaleTitle", "permission", "builder", "add", "add", "transformInverse", "assertThat", "notNullValue", "assertThat", "size", "is", "toArray", "assertThat", "notNullValue", "assertThat", "instanceOf", "assertThat", "permission", "notNullValue", "assertThat", "permission", "is", "toArray", "assertThat", "notNullValue", "assertThat", "instanceOf", "assertThat", "permission", "notNullValue", "assertThat", "permission", "is"]}, "focal_class": {"identifier": "PermissionModelDataMapper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "PermissionModelDataMapper", "parameters": "()", "modifiers": "@Inject public", "return": "", "signature": " PermissionModelDataMapper()", "full_signature": "@Inject public  PermissionModelDataMapper()", "class_method_signature": "PermissionModelDataMapper.PermissionModelDataMapper()", "testcase": false, "constructor": true}, {"identifier": "transform", "parameters": "(Permission permission)", "modifiers": "public", "return": "PermissionModel", "signature": "PermissionModel transform(Permission permission)", "full_signature": "public PermissionModel transform(Permission permission)", "class_method_signature": "PermissionModelDataMapper.transform(Permission permission)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(Collection<Permission> permissionCollection)", "modifiers": "public", "return": "Collection<PermissionModel>", "signature": "Collection<PermissionModel> transform(Collection<Permission> permissionCollection)", "full_signature": "public Collection<PermissionModel> transform(Collection<Permission> permissionCollection)", "class_method_signature": "PermissionModelDataMapper.transform(Collection<Permission> permissionCollection)", "testcase": false, "constructor": false}, {"identifier": "transformInverse", "parameters": "(PermissionModel permissionModel)", "modifiers": "public", "return": "Permission", "signature": "Permission transformInverse(PermissionModel permissionModel)", "full_signature": "public Permission transformInverse(PermissionModel permissionModel)", "class_method_signature": "PermissionModelDataMapper.transformInverse(PermissionModel permissionModel)", "testcase": false, "constructor": false}, {"identifier": "transformInverse", "parameters": "(Collection<PermissionModel> permissionModels)", "modifiers": "public", "return": "Collection<Permission>", "signature": "Collection<Permission> transformInverse(Collection<PermissionModel> permissionModels)", "full_signature": "public Collection<Permission> transformInverse(Collection<PermissionModel> permissionModels)", "class_method_signature": "PermissionModelDataMapper.transformInverse(Collection<PermissionModel> permissionModels)", "testcase": false, "constructor": false}], "file": "presentation/src/main/java/com/remotecraft/app/mapper/PermissionModelDataMapper.java"}, "focal_method": {"identifier": "transformInverse", "parameters": "(PermissionModel permissionModel)", "modifiers": "public", "return": "Permission", "body": "public Permission transformInverse(PermissionModel permissionModel) {\n    if (permissionModel == null) {\n      throw new IllegalArgumentException(\"Cannot transform a null PermissionModel object.\");\n    }\n\n    return Permission.builder()\n        .permission(permissionModel.permission())\n        .rationaleTitle(permissionModel.rationaleTitle())\n        .rationaleMessage(permissionModel.rationaleMessage())\n        .deniedMessage(permissionModel.deniedMessage())\n        .build();\n  }", "signature": "Permission transformInverse(PermissionModel permissionModel)", "full_signature": "public Permission transformInverse(PermissionModel permissionModel)", "class_method_signature": "PermissionModelDataMapper.transformInverse(PermissionModel permissionModel)", "testcase": false, "constructor": false, "invocations": ["build", "deniedMessage", "rationaleMessage", "rationaleTitle", "permission", "builder", "permission", "rationaleTitle", "rationaleMessage", "deniedMessage"]}, "repository": {"repo_id": 66076162, "url": "https://github.com/RemotecraftProject/RemotecraftApp", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 2502, "license": "licensed"}}