{"test_class": {"identifier": "MissingTypeInfoTest", "superclass": "extends TestLogger", "interfaces": "", "fields": [{"original_string": "static final String functionName = \"foobar\";", "modifier": "static final", "type": "String", "declarator": "functionName = \"foobar\"", "var_name": "functionName"}, {"original_string": "static final InvalidTypesException testException = new InvalidTypesException(\"Test exception.\");", "modifier": "static final", "type": "InvalidTypesException", "declarator": "testException = new InvalidTypesException(\"Test exception.\")", "var_name": "testException"}], "file": "flink-core/src/test/java/org/apache/flink/api/java/typeutils/MissingTypeInfoTest.java"}, "test_case": {"identifier": "testMissingTypeInfoEquality", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMissingTypeInfoEquality() {\n\t\tMissingTypeInfo tpeInfo1 = new MissingTypeInfo(functionName, testException);\n\t\tMissingTypeInfo tpeInfo2 = new MissingTypeInfo(functionName, testException);\n\n\t\tassertEquals(tpeInfo1, tpeInfo2);\n\t\tassertEquals(tpeInfo1.hashCode(), tpeInfo2.hashCode());\n\t}", "signature": "void testMissingTypeInfoEquality()", "full_signature": "@Test public void testMissingTypeInfoEquality()", "class_method_signature": "MissingTypeInfoTest.testMissingTypeInfoEquality()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "assertEquals", "hashCode", "hashCode"]}, "focal_class": {"identifier": "MissingTypeInfo", "superclass": "extends TypeInformation<InvalidTypesException>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -4212082837126702723L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -4212082837126702723L", "var_name": "serialVersionUID"}, {"original_string": "private final String functionName;", "modifier": "private final", "type": "String", "declarator": "functionName", "var_name": "functionName"}, {"original_string": "private final InvalidTypesException typeException;", "modifier": "private final", "type": "InvalidTypesException", "declarator": "typeException", "var_name": "typeException"}], "methods": [{"identifier": "MissingTypeInfo", "parameters": "(String functionName)", "modifiers": "public", "return": "", "signature": " MissingTypeInfo(String functionName)", "full_signature": "public  MissingTypeInfo(String functionName)", "class_method_signature": "MissingTypeInfo.MissingTypeInfo(String functionName)", "testcase": false, "constructor": true}, {"identifier": "MissingTypeInfo", "parameters": "(String functionName, InvalidTypesException typeException)", "modifiers": "public", "return": "", "signature": " MissingTypeInfo(String functionName, InvalidTypesException typeException)", "full_signature": "public  MissingTypeInfo(String functionName, InvalidTypesException typeException)", "class_method_signature": "MissingTypeInfo.MissingTypeInfo(String functionName, InvalidTypesException typeException)", "testcase": false, "constructor": true}, {"identifier": "getFunctionName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFunctionName()", "full_signature": "public String getFunctionName()", "class_method_signature": "MissingTypeInfo.getFunctionName()", "testcase": false, "constructor": false}, {"identifier": "getTypeException", "parameters": "()", "modifiers": "public", "return": "InvalidTypesException", "signature": "InvalidTypesException getTypeException()", "full_signature": "public InvalidTypesException getTypeException()", "class_method_signature": "MissingTypeInfo.getTypeException()", "testcase": false, "constructor": false}, {"identifier": "isBasicType", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isBasicType()", "full_signature": "@Override public boolean isBasicType()", "class_method_signature": "MissingTypeInfo.isBasicType()", "testcase": false, "constructor": false}, {"identifier": "isTupleType", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isTupleType()", "full_signature": "@Override public boolean isTupleType()", "class_method_signature": "MissingTypeInfo.isTupleType()", "testcase": false, "constructor": false}, {"identifier": "getArity", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getArity()", "full_signature": "@Override public int getArity()", "class_method_signature": "MissingTypeInfo.getArity()", "testcase": false, "constructor": false}, {"identifier": "getTypeClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<InvalidTypesException>", "signature": "Class<InvalidTypesException> getTypeClass()", "full_signature": "@Override public Class<InvalidTypesException> getTypeClass()", "class_method_signature": "MissingTypeInfo.getTypeClass()", "testcase": false, "constructor": false}, {"identifier": "isKeyType", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isKeyType()", "full_signature": "@Override public boolean isKeyType()", "class_method_signature": "MissingTypeInfo.isKeyType()", "testcase": false, "constructor": false}, {"identifier": "createSerializer", "parameters": "(ExecutionConfig executionConfig)", "modifiers": "@Override public", "return": "TypeSerializer<InvalidTypesException>", "signature": "TypeSerializer<InvalidTypesException> createSerializer(ExecutionConfig executionConfig)", "full_signature": "@Override public TypeSerializer<InvalidTypesException> createSerializer(ExecutionConfig executionConfig)", "class_method_signature": "MissingTypeInfo.createSerializer(ExecutionConfig executionConfig)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MissingTypeInfo.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "MissingTypeInfo.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MissingTypeInfo.hashCode()", "testcase": false, "constructor": false}, {"identifier": "canEqual", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canEqual(Object obj)", "full_signature": "@Override public boolean canEqual(Object obj)", "class_method_signature": "MissingTypeInfo.canEqual(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getTotalFields", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getTotalFields()", "full_signature": "@Override public int getTotalFields()", "class_method_signature": "MissingTypeInfo.getTotalFields()", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/api/java/typeutils/MissingTypeInfo.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n\tpublic int hashCode() {\n\t\treturn 31 * functionName.hashCode() + typeException.hashCode();\n\t}", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MissingTypeInfo.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode", "hashCode"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}