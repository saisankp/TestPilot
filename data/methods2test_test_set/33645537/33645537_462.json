{"test_class": {"identifier": "BinaryTreePreOrderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BinaryTreePreOrder binaryTreePreOrder;", "modifier": "private", "type": "BinaryTreePreOrder", "declarator": "binaryTreePreOrder", "var_name": "binaryTreePreOrder"}], "file": "algs/src/test/java/com/github/pedrovgs/problem14/BinaryTreePreOrderTest.java"}, "test_case": {"identifier": "shouldNotAcceptNullBinaryNodesIterative", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNullBinaryNodesIterative() {\n    binaryTreePreOrder.getIterative(null);\n  }", "signature": "void shouldNotAcceptNullBinaryNodesIterative()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNullBinaryNodesIterative()", "class_method_signature": "BinaryTreePreOrderTest.shouldNotAcceptNullBinaryNodesIterative()", "testcase": true, "constructor": false, "invocations": ["getIterative"]}, "focal_class": {"identifier": "BinaryTreePreOrder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getRecursive", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "List<BinaryNode>", "signature": "List<BinaryNode> getRecursive(BinaryNode root)", "full_signature": "public List<BinaryNode> getRecursive(BinaryNode root)", "class_method_signature": "BinaryTreePreOrder.getRecursive(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "getInner", "parameters": "(BinaryNode root)", "modifiers": "private", "return": "List<BinaryNode>", "signature": "List<BinaryNode> getInner(BinaryNode root)", "full_signature": "private List<BinaryNode> getInner(BinaryNode root)", "class_method_signature": "BinaryTreePreOrder.getInner(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "getIterative", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "List<BinaryNode>", "signature": "List<BinaryNode> getIterative(BinaryNode root)", "full_signature": "public List<BinaryNode> getIterative(BinaryNode root)", "class_method_signature": "BinaryTreePreOrder.getIterative(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "validateBinaryNode", "parameters": "(BinaryNode root)", "modifiers": "private", "return": "void", "signature": "void validateBinaryNode(BinaryNode root)", "full_signature": "private void validateBinaryNode(BinaryNode root)", "class_method_signature": "BinaryTreePreOrder.validateBinaryNode(BinaryNode root)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem14/BinaryTreePreOrder.java"}, "focal_method": {"identifier": "getIterative", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "List<BinaryNode>", "body": "public List<BinaryNode> getIterative(BinaryNode root) {\n    validateBinaryNode(root);\n    List<BinaryNode> result = new LinkedList<BinaryNode>();\n    Stack<BinaryNode> stack = new Stack<BinaryNode>();\n    stack.push(root);\n\n    while (!stack.isEmpty()) {\n      BinaryNode node = stack.pop();\n      result.add(node);\n      if (node.hasRight()) {\n        stack.add(node.getRight());\n      }\n      if (node.hasLeft()) {\n        stack.add(node.getLeft());\n      }\n    }\n\n    return result;\n  }", "signature": "List<BinaryNode> getIterative(BinaryNode root)", "full_signature": "public List<BinaryNode> getIterative(BinaryNode root)", "class_method_signature": "BinaryTreePreOrder.getIterative(BinaryNode root)", "testcase": false, "constructor": false, "invocations": ["validateBinaryNode", "push", "isEmpty", "pop", "add", "hasRight", "add", "getRight", "hasLeft", "add", "getLeft"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}