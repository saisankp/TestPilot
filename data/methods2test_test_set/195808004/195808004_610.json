{"test_class": {"identifier": "TestWebAppProxyServlet", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(\n      TestWebAppProxyServlet.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(\n      TestWebAppProxyServlet.class)", "var_name": "LOG"}, {"original_string": "private static Server server;", "modifier": "private static", "type": "Server", "declarator": "server", "var_name": "server"}, {"original_string": "private static int originalPort = 0;", "modifier": "private static", "type": "int", "declarator": "originalPort = 0", "var_name": "originalPort"}, {"original_string": "Configuration configuration = new Configuration();", "modifier": "", "type": "Configuration", "declarator": "configuration = new Configuration()", "var_name": "configuration"}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/test/java/org/apache/hadoop/yarn/server/webproxy/TestWebAppProxyServlet.java"}, "test_case": {"identifier": "testWebAppProxyServlet", "parameters": "()", "modifiers": "@Test(timeout=5000) public", "return": "void", "body": "@Test(timeout=5000)\n  public void testWebAppProxyServlet() throws Exception {\n\n    configuration.set(YarnConfiguration.PROXY_ADDRESS, \"localhost:9090\");\n    // overriding num of web server threads, see HttpServer.HTTP_MAXTHREADS \n    configuration.setInt(\"hadoop.http.max.threads\", 5);\n    WebAppProxyServerForTest proxy = new WebAppProxyServerForTest();\n    proxy.init(configuration);\n    proxy.start();\n    \n    int proxyPort = proxy.proxy.proxyServer.getConnectorAddress(0).getPort();\n    AppReportFetcherForTest appReportFetcher = proxy.proxy.appReportFetcher;\n\n    // wrong url\n    try {\n      // wrong url. Set wrong app ID\n      URL wrongUrl = new URL(\"http://localhost:\" + proxyPort + \"/proxy/app\");\n      HttpURLConnection proxyConn = (HttpURLConnection) wrongUrl\n          .openConnection();\n\n      proxyConn.connect();\n      assertEquals(HttpURLConnection.HTTP_INTERNAL_ERROR,\n          proxyConn.getResponseCode());\n      // set true Application ID in url\n      URL url = new URL(\"http://localhost:\" + proxyPort + \"/proxy/application_00_0\");\n      proxyConn = (HttpURLConnection) url.openConnection();\n      // set cookie\n      proxyConn.setRequestProperty(\"Cookie\", \"checked_application_0_0000=true\");\n      proxyConn.connect();\n      assertEquals(HttpURLConnection.HTTP_OK, proxyConn.getResponseCode());\n      assertTrue(isResponseCookiePresent(\n          proxyConn, \"checked_application_0_0000\", \"true\"));\n      // cannot found application 1: null\n      appReportFetcher.answer = 1;\n      proxyConn = (HttpURLConnection) url.openConnection();\n      proxyConn.setRequestProperty(\"Cookie\", \"checked_application_0_0000=true\");\n      proxyConn.connect();\n      assertEquals(HttpURLConnection.HTTP_NOT_FOUND,\n          proxyConn.getResponseCode());\n      assertFalse(isResponseCookiePresent(\n          proxyConn, \"checked_application_0_0000\", \"true\"));\n      // cannot found application 2: ApplicationNotFoundException\n      appReportFetcher.answer = 4;\n      proxyConn = (HttpURLConnection) url.openConnection();\n      proxyConn.setRequestProperty(\"Cookie\", \"checked_application_0_0000=true\");\n      proxyConn.connect();\n      assertEquals(HttpURLConnection.HTTP_NOT_FOUND,\n          proxyConn.getResponseCode());\n      assertFalse(isResponseCookiePresent(\n          proxyConn, \"checked_application_0_0000\", \"true\"));\n      // wrong user\n      appReportFetcher.answer = 2;\n      proxyConn = (HttpURLConnection) url.openConnection();\n      proxyConn.connect();\n      assertEquals(HttpURLConnection.HTTP_OK, proxyConn.getResponseCode());\n      String s = readInputStream(proxyConn.getInputStream());\n      assertTrue(s\n          .contains(\"to continue to an Application Master web interface owned by\"));\n      assertTrue(s.contains(\"WARNING: The following page may not be safe!\"));\n      //case if task has a not running status\n      appReportFetcher.answer = 3;\n      proxyConn = (HttpURLConnection) url.openConnection();\n      proxyConn.setRequestProperty(\"Cookie\", \"checked_application_0_0000=true\");\n      proxyConn.connect();\n      assertEquals(HttpURLConnection.HTTP_OK, proxyConn.getResponseCode());\n\n      // test user-provided path and query parameter can be appended to the\n      // original tracking url\n      appReportFetcher.answer = 5;\n      URL clientUrl = new URL(\"http://localhost:\" + proxyPort\n        + \"/proxy/application_00_0/test/tez?x=y&h=p\");\n      proxyConn = (HttpURLConnection) clientUrl.openConnection();\n      proxyConn.connect();\n      LOG.info(\"\" + proxyConn.getURL());\n      LOG.info(\"ProxyConn.getHeaderField(): \" +  proxyConn.getHeaderField(ProxyUtils.LOCATION));\n      assertEquals(\"http://localhost:\" + originalPort\n          + \"/foo/bar/test/tez?a=b&x=y&h=p#main\", proxyConn.getURL().toString());\n\n    } finally {\n      proxy.close();\n    }\n  }", "signature": "void testWebAppProxyServlet()", "full_signature": "@Test(timeout=5000) public void testWebAppProxyServlet()", "class_method_signature": "TestWebAppProxyServlet.testWebAppProxyServlet()", "testcase": true, "constructor": false, "invocations": ["set", "setInt", "init", "start", "getPort", "getConnectorAddress", "openConnection", "connect", "assertEquals", "getResponseCode", "openConnection", "setRequestProperty", "connect", "assertEquals", "getResponseCode", "assertTrue", "isResponseCookiePresent", "openConnection", "setRequestProperty", "connect", "assertEquals", "getResponseCode", "assertFalse", "isResponseCookiePresent", "openConnection", "setRequestProperty", "connect", "assertEquals", "getResponseCode", "assertFalse", "isResponseCookiePresent", "openConnection", "connect", "assertEquals", "getResponseCode", "readInputStream", "getInputStream", "assertTrue", "contains", "assertTrue", "contains", "openConnection", "setRequestProperty", "connect", "assertEquals", "getResponseCode", "openConnection", "connect", "info", "getURL", "info", "getHeaderField", "assertEquals", "toString", "getURL", "close"]}, "focal_class": {"identifier": "WebAppProxyServlet", "superclass": "extends HttpServlet", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(\n      WebAppProxyServlet.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(\n      WebAppProxyServlet.class)", "var_name": "LOG"}, {"original_string": "private static final Set<String> passThroughHeaders = \n    new HashSet<>(Arrays.asList(\n        \"User-Agent\",\n        \"Accept\",\n        \"Accept-Encoding\",\n        \"Accept-Language\",\n        \"Accept-Charset\"));", "modifier": "private static final", "type": "Set<String>", "declarator": "passThroughHeaders = \n    new HashSet<>(Arrays.asList(\n        \"User-Agent\",\n        \"Accept\",\n        \"Accept-Encoding\",\n        \"Accept-Language\",\n        \"Accept-Charset\"))", "var_name": "passThroughHeaders"}, {"original_string": "public static final String PROXY_USER_COOKIE_NAME = \"proxy-user\";", "modifier": "public static final", "type": "String", "declarator": "PROXY_USER_COOKIE_NAME = \"proxy-user\"", "var_name": "PROXY_USER_COOKIE_NAME"}, {"original_string": "private transient List<TrackingUriPlugin> trackingUriPlugins;", "modifier": "private transient", "type": "List<TrackingUriPlugin>", "declarator": "trackingUriPlugins", "var_name": "trackingUriPlugins"}, {"original_string": "private final String rmAppPageUrlBase;", "modifier": "private final", "type": "String", "declarator": "rmAppPageUrlBase", "var_name": "rmAppPageUrlBase"}, {"original_string": "private final String ahsAppPageUrlBase;", "modifier": "private final", "type": "String", "declarator": "ahsAppPageUrlBase", "var_name": "ahsAppPageUrlBase"}, {"original_string": "private transient YarnConfiguration conf;", "modifier": "private transient", "type": "YarnConfiguration", "declarator": "conf", "var_name": "conf"}], "methods": [{"identifier": "WebAppProxyServlet", "parameters": "()", "modifiers": "public", "return": "", "signature": " WebAppProxyServlet()", "full_signature": "public  WebAppProxyServlet()", "class_method_signature": "WebAppProxyServlet.WebAppProxyServlet()", "testcase": false, "constructor": true}, {"identifier": "notFound", "parameters": "(HttpServletResponse resp, String message)", "modifiers": "private static", "return": "void", "signature": "void notFound(HttpServletResponse resp, String message)", "full_signature": "private static void notFound(HttpServletResponse resp, String message)", "class_method_signature": "WebAppProxyServlet.notFound(HttpServletResponse resp, String message)", "testcase": false, "constructor": false}, {"identifier": "warnUserPage", "parameters": "(HttpServletResponse resp, String link, \n      String user, ApplicationId id)", "modifiers": "private static", "return": "void", "signature": "void warnUserPage(HttpServletResponse resp, String link, \n      String user, ApplicationId id)", "full_signature": "private static void warnUserPage(HttpServletResponse resp, String link, \n      String user, ApplicationId id)", "class_method_signature": "WebAppProxyServlet.warnUserPage(HttpServletResponse resp, String link, \n      String user, ApplicationId id)", "testcase": false, "constructor": false}, {"identifier": "proxyLink", "parameters": "(HttpServletRequest req, \n      HttpServletResponse resp, URI link, Cookie c, String proxyHost)", "modifiers": "private static", "return": "void", "signature": "void proxyLink(HttpServletRequest req, \n      HttpServletResponse resp, URI link, Cookie c, String proxyHost)", "full_signature": "private static void proxyLink(HttpServletRequest req, \n      HttpServletResponse resp, URI link, Cookie c, String proxyHost)", "class_method_signature": "WebAppProxyServlet.proxyLink(HttpServletRequest req, \n      HttpServletResponse resp, URI link, Cookie c, String proxyHost)", "testcase": false, "constructor": false}, {"identifier": "getCheckCookieName", "parameters": "(ApplicationId id)", "modifiers": "private static", "return": "String", "signature": "String getCheckCookieName(ApplicationId id)", "full_signature": "private static String getCheckCookieName(ApplicationId id)", "class_method_signature": "WebAppProxyServlet.getCheckCookieName(ApplicationId id)", "testcase": false, "constructor": false}, {"identifier": "makeCheckCookie", "parameters": "(ApplicationId id, boolean isSet)", "modifiers": "private static", "return": "Cookie", "signature": "Cookie makeCheckCookie(ApplicationId id, boolean isSet)", "full_signature": "private static Cookie makeCheckCookie(ApplicationId id, boolean isSet)", "class_method_signature": "WebAppProxyServlet.makeCheckCookie(ApplicationId id, boolean isSet)", "testcase": false, "constructor": false}, {"identifier": "isSecurityEnabled", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isSecurityEnabled()", "full_signature": "private boolean isSecurityEnabled()", "class_method_signature": "WebAppProxyServlet.isSecurityEnabled()", "testcase": false, "constructor": false}, {"identifier": "getApplicationReport", "parameters": "(ApplicationId id)", "modifiers": "private", "return": "FetchedAppReport", "signature": "FetchedAppReport getApplicationReport(ApplicationId id)", "full_signature": "private FetchedAppReport getApplicationReport(ApplicationId id)", "class_method_signature": "WebAppProxyServlet.getApplicationReport(ApplicationId id)", "testcase": false, "constructor": false}, {"identifier": "getProxyHost", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getProxyHost()", "full_signature": "private String getProxyHost()", "class_method_signature": "WebAppProxyServlet.getProxyHost()", "testcase": false, "constructor": false}, {"identifier": "doGet", "parameters": "(HttpServletRequest req, HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doGet(HttpServletRequest req, HttpServletResponse resp)", "full_signature": "@Override protected void doGet(HttpServletRequest req, HttpServletResponse resp)", "class_method_signature": "WebAppProxyServlet.doGet(HttpServletRequest req, HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream input)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream input)", "full_signature": "private void readObject(ObjectInputStream input)", "class_method_signature": "WebAppProxyServlet.readObject(ObjectInputStream input)", "testcase": false, "constructor": false}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java"}, "focal_method": {"identifier": "WebAppProxyServlet", "parameters": "()", "modifiers": "public", "return": "", "body": "public WebAppProxyServlet() {\n    super();\n    conf = new YarnConfiguration();\n    this.trackingUriPlugins =\n        conf.getInstances(YarnConfiguration.YARN_TRACKING_URL_GENERATOR,\n            TrackingUriPlugin.class);\n    this.rmAppPageUrlBase = StringHelper.pjoin(\n        WebAppUtils.getResolvedRMWebAppURLWithScheme(conf), \"cluster\", \"app\");\n    this.ahsAppPageUrlBase = StringHelper.pjoin(\n        WebAppUtils.getHttpSchemePrefix(conf) + WebAppUtils\n        .getAHSWebAppURLWithoutScheme(conf), \"applicationhistory\", \"apps\");\n  }", "signature": " WebAppProxyServlet()", "full_signature": "public  WebAppProxyServlet()", "class_method_signature": "WebAppProxyServlet.WebAppProxyServlet()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 195808004, "url": "https://github.com/mouzwang/hadoop-2.7.2", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 24927, "license": "licensed"}}