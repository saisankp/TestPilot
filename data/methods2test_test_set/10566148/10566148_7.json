{"test_class": {"identifier": "HandlerDescriptionAnalyzerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HandlerDescriptionAnalyzer sut;", "modifier": "private", "type": "HandlerDescriptionAnalyzer", "declarator": "sut", "var_name": "sut"}, {"original_string": "private TypeScanner typeScanner;", "modifier": "private", "type": "TypeScanner", "declarator": "typeScanner", "var_name": "typeScanner"}, {"original_string": "private SagaInstanceCreator instanceCreator;", "modifier": "private", "type": "SagaInstanceCreator", "declarator": "instanceCreator", "var_name": "instanceCreator"}], "file": "saga-lib/src/test/java/com/codebullets/sagalib/startup/HandlerDescriptionAnalyzerTest.java"}, "test_case": {"identifier": "scanHandledMessageTypes_sagaWithHandler_returnsHandler", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void scanHandledMessageTypes_sagaWithHandler_returnsHandler() throws ExecutionException {\n        // given\n        mockSaga(String.class);\n\n        // when\n        Map<Class<? extends Saga>, SagaHandlersMap> classSagaHandlersMapMap = sut.scanHandledMessageTypes();\n\n        // then\n        assertThat(\"Expected saga type to be present.\", classSagaHandlersMapMap.containsKey(TestSaga.class), is(true));\n\n        Collection<MessageHandler> handlers = classSagaHandlersMapMap.get(TestSaga.class).messageHandlers();\n        assertThat(\"Expected handlers map to contain handler type.\", handlers.iterator().next().getMessageType(), equalTo(String.class));\n        assertThat(\"Expected handlers map to to be starting type.\", handlers.iterator().next().getStartsSaga(), is(true));\n    }", "signature": "void scanHandledMessageTypes_sagaWithHandler_returnsHandler()", "full_signature": "@Test public void scanHandledMessageTypes_sagaWithHandler_returnsHandler()", "class_method_signature": "HandlerDescriptionAnalyzerTest.scanHandledMessageTypes_sagaWithHandler_returnsHandler()", "testcase": true, "constructor": false, "invocations": ["mockSaga", "scanHandledMessageTypes", "assertThat", "containsKey", "is", "messageHandlers", "get", "assertThat", "getMessageType", "next", "iterator", "equalTo", "assertThat", "getStartsSaga", "next", "iterator", "is"]}, "focal_class": {"identifier": "HandlerDescriptionAnalyzer", "superclass": "", "interfaces": "implements SagaAnalyzer", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AnnotationSagaAnalyzer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AnnotationSagaAnalyzer.class)", "var_name": "LOG"}, {"original_string": "private final TypeScanner typeScanner;", "modifier": "private final", "type": "TypeScanner", "declarator": "typeScanner", "var_name": "typeScanner"}, {"original_string": "private final SagaInstanceCreator instanceCreator;", "modifier": "private final", "type": "SagaInstanceCreator", "declarator": "instanceCreator", "var_name": "instanceCreator"}], "methods": [{"identifier": "HandlerDescriptionAnalyzer", "parameters": "(final TypeScanner typeScanner, final SagaInstanceCreator instanceCreator)", "modifiers": "@Inject public", "return": "", "signature": " HandlerDescriptionAnalyzer(final TypeScanner typeScanner, final SagaInstanceCreator instanceCreator)", "full_signature": "@Inject public  HandlerDescriptionAnalyzer(final TypeScanner typeScanner, final SagaInstanceCreator instanceCreator)", "class_method_signature": "HandlerDescriptionAnalyzer.HandlerDescriptionAnalyzer(final TypeScanner typeScanner, final SagaInstanceCreator instanceCreator)", "testcase": false, "constructor": true}, {"identifier": "scanHandledMessageTypes", "parameters": "()", "modifiers": "@Override public", "return": "Map<Class<? extends Saga>, SagaHandlersMap>", "signature": "Map<Class<? extends Saga>, SagaHandlersMap> scanHandledMessageTypes()", "full_signature": "@Override public Map<Class<? extends Saga>, SagaHandlersMap> scanHandledMessageTypes()", "class_method_signature": "HandlerDescriptionAnalyzer.scanHandledMessageTypes()", "testcase": false, "constructor": false}, {"identifier": "createHandlersMap", "parameters": "(final Stream<DescribesHandlers> directDescriptionSagas)", "modifiers": "private", "return": "Map<Class<? extends Saga>, SagaHandlersMap>", "signature": "Map<Class<? extends Saga>, SagaHandlersMap> createHandlersMap(final Stream<DescribesHandlers> directDescriptionSagas)", "full_signature": "private Map<Class<? extends Saga>, SagaHandlersMap> createHandlersMap(final Stream<DescribesHandlers> directDescriptionSagas)", "class_method_signature": "HandlerDescriptionAnalyzer.createHandlersMap(final Stream<DescribesHandlers> directDescriptionSagas)", "testcase": false, "constructor": false}, {"identifier": "createDirectDescriptionInstance", "parameters": "(final Class<? extends Saga> clazz)", "modifiers": "private", "return": "Stream<DescribesHandlers>", "signature": "Stream<DescribesHandlers> createDirectDescriptionInstance(final Class<? extends Saga> clazz)", "full_signature": "private Stream<DescribesHandlers> createDirectDescriptionInstance(final Class<? extends Saga> clazz)", "class_method_signature": "HandlerDescriptionAnalyzer.createDirectDescriptionInstance(final Class<? extends Saga> clazz)", "testcase": false, "constructor": false}], "file": "saga-lib/src/main/java/com/codebullets/sagalib/startup/HandlerDescriptionAnalyzer.java"}, "focal_method": {"identifier": "scanHandledMessageTypes", "parameters": "()", "modifiers": "@Override public", "return": "Map<Class<? extends Saga>, SagaHandlersMap>", "body": "@Override\n    public Map<Class<? extends Saga>, SagaHandlersMap> scanHandledMessageTypes() {\n\n        Collection<Class<? extends Saga>> sagaClasses = typeScanner.scanForSagas();\n        Stream<DescribesHandlers> directDescriptionSagas = sagaClasses.stream()\n                .filter(DescribesHandlers.class::isAssignableFrom)\n                .filter(c -> !Modifier.isAbstract(c.getModifiers()))\n                .flatMap(this::createDirectDescriptionInstance);\n\n        return createHandlersMap(directDescriptionSagas);\n    }", "signature": "Map<Class<? extends Saga>, SagaHandlersMap> scanHandledMessageTypes()", "full_signature": "@Override public Map<Class<? extends Saga>, SagaHandlersMap> scanHandledMessageTypes()", "class_method_signature": "HandlerDescriptionAnalyzer.scanHandledMessageTypes()", "testcase": false, "constructor": false, "invocations": ["scanForSagas", "flatMap", "filter", "filter", "stream", "isAbstract", "getModifiers", "createHandlersMap"]}, "repository": {"repo_id": 10566148, "url": "https://github.com/Domo42/saga-lib", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 32, "size": 545, "license": "licensed"}}