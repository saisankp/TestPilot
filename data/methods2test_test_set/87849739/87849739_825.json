{"test_class": {"identifier": "ImmutableFunctionExpressionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<String> EXPECTED_FUNCTION_NAMES = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\n            \"filter\",\n            \"default\",\n            \"substring-before\",\n            \"substring-after\",\n            \"lower\",\n            \"upper\",\n            \"delete\"\n    )));", "modifier": "private static final", "type": "Set<String>", "declarator": "EXPECTED_FUNCTION_NAMES = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\n            \"filter\",\n            \"default\",\n            \"substring-before\",\n            \"substring-after\",\n            \"lower\",\n            \"upper\",\n            \"delete\"\n    )))", "var_name": "EXPECTED_FUNCTION_NAMES"}, {"original_string": "private static final HeadersPlaceholder HEADERS_PLACEHOLDER = PlaceholderFactory.newHeadersPlaceholder();", "modifier": "private static final", "type": "HeadersPlaceholder", "declarator": "HEADERS_PLACEHOLDER = PlaceholderFactory.newHeadersPlaceholder()", "var_name": "HEADERS_PLACEHOLDER"}, {"original_string": "private static final ThingPlaceholder THING_PLACEHOLDER = PlaceholderFactory.newThingPlaceholder();", "modifier": "private static final", "type": "ThingPlaceholder", "declarator": "THING_PLACEHOLDER = PlaceholderFactory.newThingPlaceholder()", "var_name": "THING_PLACEHOLDER"}, {"original_string": "private static final String THING_NAME = \"test-id\";", "modifier": "private static final", "type": "String", "declarator": "THING_NAME = \"test-id\"", "var_name": "THING_NAME"}, {"original_string": "private static final ThingId THING_ID = ThingId.of(\"test.namespace\", THING_NAME);", "modifier": "private static final", "type": "ThingId", "declarator": "THING_ID = ThingId.of(\"test.namespace\", THING_NAME)", "var_name": "THING_ID"}, {"original_string": "private static final String HEADER_KEY = \"foo1\";", "modifier": "private static final", "type": "String", "declarator": "HEADER_KEY = \"foo1\"", "var_name": "HEADER_KEY"}, {"original_string": "private static final String HEADER_VAL = \"caMelCasedStuffFOOO\";", "modifier": "private static final", "type": "String", "declarator": "HEADER_VAL = \"caMelCasedStuffFOOO\"", "var_name": "HEADER_VAL"}, {"original_string": "private static final Map<String, String> HEADERS = Collections.singletonMap(HEADER_KEY, HEADER_VAL);", "modifier": "private static final", "type": "Map<String, String>", "declarator": "HEADERS = Collections.singletonMap(HEADER_KEY, HEADER_VAL)", "var_name": "HEADERS"}, {"original_string": "private static final ExpressionResolver EXPRESSION_RESOLVER = PlaceholderFactory.newExpressionResolver(\n            PlaceholderFactory.newPlaceholderResolver(HEADERS_PLACEHOLDER, HEADERS),\n            PlaceholderFactory.newPlaceholderResolver(THING_PLACEHOLDER, THING_ID)\n    );", "modifier": "private static final", "type": "ExpressionResolver", "declarator": "EXPRESSION_RESOLVER = PlaceholderFactory.newExpressionResolver(\n            PlaceholderFactory.newPlaceholderResolver(HEADERS_PLACEHOLDER, HEADERS),\n            PlaceholderFactory.newPlaceholderResolver(THING_PLACEHOLDER, THING_ID)\n    )", "var_name": "EXPRESSION_RESOLVER"}, {"original_string": "private static final ImmutableFunctionExpression UNDER_TEST = ImmutableFunctionExpression.INSTANCE;", "modifier": "private static final", "type": "ImmutableFunctionExpression", "declarator": "UNDER_TEST = ImmutableFunctionExpression.INSTANCE", "var_name": "UNDER_TEST"}], "file": "model/placeholders/src/test/java/org/eclipse/ditto/model/placeholders/ImmutableFunctionExpressionTest.java"}, "test_case": {"identifier": "testFunctionFilterWhenConditionFails", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFunctionFilterWhenConditionFails() {\n        assertThat(UNDER_TEST.resolve(\"fn:filter('false','eq','true')\",\n                PipelineElement.resolved(HEADER_VAL), EXPRESSION_RESOLVER))\n                .isEmpty();\n    }", "signature": "void testFunctionFilterWhenConditionFails()", "full_signature": "@Test public void testFunctionFilterWhenConditionFails()", "class_method_signature": "ImmutableFunctionExpressionTest.testFunctionFilterWhenConditionFails()", "testcase": true, "constructor": false, "invocations": ["isEmpty", "assertThat", "resolve", "resolved"]}, "focal_class": {"identifier": "ImmutableFunctionExpression", "superclass": "", "interfaces": "implements FunctionExpression", "fields": [{"original_string": "static final ImmutableFunctionExpression INSTANCE = new ImmutableFunctionExpression();", "modifier": "static final", "type": "ImmutableFunctionExpression", "declarator": "INSTANCE = new ImmutableFunctionExpression()", "var_name": "INSTANCE"}, {"original_string": "private static final List<PipelineFunction> SUPPORTED = Collections.unmodifiableList(Arrays.asList(\n            new PipelineFunctionFilter(),          // fn:filter(filterValue,rqlFunction,comparedValue)\n            new PipelineFunctionDefault(),         // fn:default('fallback value')\n            new PipelineFunctionSubstringBefore(), // fn:substring-before(':')\n            new PipelineFunctionSubstringAfter(),  // fn:substring-after(':')\n            new PipelineFunctionLower(),           // fn:lower()\n            new PipelineFunctionUpper(),           // fn:upper()\n            new PipelineFunctionDelete()           // fn:delete()\n    ));", "modifier": "private static final", "type": "List<PipelineFunction>", "declarator": "SUPPORTED = Collections.unmodifiableList(Arrays.asList(\n            new PipelineFunctionFilter(),          // fn:filter(filterValue,rqlFunction,comparedValue)\n            new PipelineFunctionDefault(),         // fn:default('fallback value')\n            new PipelineFunctionSubstringBefore(), // fn:substring-before(':')\n            new PipelineFunctionSubstringAfter(),  // fn:substring-after(':')\n            new PipelineFunctionLower(),           // fn:lower()\n            new PipelineFunctionUpper(),           // fn:upper()\n            new PipelineFunctionDelete()           // fn:delete()\n    ))", "var_name": "SUPPORTED"}], "methods": [{"identifier": "getPrefix", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPrefix()", "full_signature": "@Override public String getPrefix()", "class_method_signature": "ImmutableFunctionExpression.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "getSupportedNames", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getSupportedNames()", "full_signature": "@Override public List<String> getSupportedNames()", "class_method_signature": "ImmutableFunctionExpression.getSupportedNames()", "testcase": false, "constructor": false}, {"identifier": "supports", "parameters": "(final String expressionName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supports(final String expressionName)", "full_signature": "@Override public boolean supports(final String expressionName)", "class_method_signature": "ImmutableFunctionExpression.supports(final String expressionName)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final String expression, final PipelineElement resolvedInputValue,\n            final ExpressionResolver expressionResolver)", "modifiers": "@Override public", "return": "PipelineElement", "signature": "PipelineElement resolve(final String expression, final PipelineElement resolvedInputValue,\n            final ExpressionResolver expressionResolver)", "full_signature": "@Override public PipelineElement resolve(final String expression, final PipelineElement resolvedInputValue,\n            final ExpressionResolver expressionResolver)", "class_method_signature": "ImmutableFunctionExpression.resolve(final String expression, final PipelineElement resolvedInputValue,\n            final ExpressionResolver expressionResolver)", "testcase": false, "constructor": false}], "file": "model/placeholders/src/main/java/org/eclipse/ditto/model/placeholders/ImmutableFunctionExpression.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final String expression, final PipelineElement resolvedInputValue,\n            final ExpressionResolver expressionResolver)", "modifiers": "@Override public", "return": "PipelineElement", "body": "@Override\n    public PipelineElement resolve(final String expression, final PipelineElement resolvedInputValue,\n            final ExpressionResolver expressionResolver) {\n\n        if (!supports(expression.replaceFirst(getPrefix() + \":\", \"\"))) {\n            throw PlaceholderFunctionUnknownException.newBuilder(expression).build();\n        }\n\n        return SUPPORTED.stream()\n                .filter(pf -> expression.startsWith(getPrefix() + \":\" + pf.getName() + \"(\"))\n                .map(pf -> pf.apply(resolvedInputValue,\n                        expression.replaceFirst(getPrefix() + \":\" + pf.getName(), \"\").trim(),\n                        expressionResolver)\n                )\n                .findFirst()\n                .orElse(PipelineElement.unresolved());\n    }", "signature": "PipelineElement resolve(final String expression, final PipelineElement resolvedInputValue,\n            final ExpressionResolver expressionResolver)", "full_signature": "@Override public PipelineElement resolve(final String expression, final PipelineElement resolvedInputValue,\n            final ExpressionResolver expressionResolver)", "class_method_signature": "ImmutableFunctionExpression.resolve(final String expression, final PipelineElement resolvedInputValue,\n            final ExpressionResolver expressionResolver)", "testcase": false, "constructor": false, "invocations": ["supports", "replaceFirst", "getPrefix", "build", "newBuilder", "orElse", "findFirst", "map", "filter", "stream", "startsWith", "getPrefix", "getName", "apply", "trim", "replaceFirst", "getPrefix", "getName", "unresolved"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}