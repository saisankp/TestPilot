{"test_class": {"identifier": "DubboParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock Invocation invocation;", "modifier": "@Mock", "type": "Invocation", "declarator": "invocation", "var_name": "invocation"}, {"original_string": "@Mock Invoker invoker;", "modifier": "@Mock", "type": "Invoker", "declarator": "invoker", "var_name": "invoker"}], "file": "instrumentation/dubbo-rpc/src/test/java/brave/dubbo/rpc/DubboParserTest.java"}, "test_case": {"identifier": "errorCodes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void errorCodes() {\n    assertThat(DubboParser.errorCode(null))\n        .isEqualTo(DubboParser.errorCode(new IOException(\"timeout\")))\n        .isNull();\n\n    assertThat(DubboParser.errorCode(new RpcException(0)))\n        .isEqualTo(\"UNKNOWN_EXCEPTION\");\n    assertThat(DubboParser.errorCode(new RpcException(1)))\n        .isEqualTo(\"NETWORK_EXCEPTION\");\n    assertThat(DubboParser.errorCode(new RpcException(2)))\n        .isEqualTo(\"TIMEOUT_EXCEPTION\");\n    assertThat(DubboParser.errorCode(new RpcException(3)))\n        .isEqualTo(\"BIZ_EXCEPTION\");\n    assertThat(DubboParser.errorCode(new RpcException(4)))\n        .isEqualTo(\"FORBIDDEN_EXCEPTION\");\n    assertThat(DubboParser.errorCode(new RpcException(5)))\n        .isEqualTo(\"SERIALIZATION_EXCEPTION\");\n    assertThat(DubboParser.errorCode(new RpcException(6)))\n        .isEqualTo(\"6\"); // this will catch drift if Dubbo adds another code\n  }", "signature": "void errorCodes()", "full_signature": "@Test public void errorCodes()", "class_method_signature": "DubboParserTest.errorCodes()", "testcase": true, "constructor": false, "invocations": ["isNull", "isEqualTo", "assertThat", "errorCode", "errorCode", "isEqualTo", "assertThat", "errorCode", "isEqualTo", "assertThat", "errorCode", "isEqualTo", "assertThat", "errorCode", "isEqualTo", "assertThat", "errorCode", "isEqualTo", "assertThat", "errorCode", "isEqualTo", "assertThat", "errorCode", "isEqualTo", "assertThat", "errorCode"]}, "focal_class": {"identifier": "DubboParser", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "method", "parameters": "(Invocation invocation)", "modifiers": "static @Nullable", "return": "String", "signature": "String method(Invocation invocation)", "full_signature": "static @Nullable String method(Invocation invocation)", "class_method_signature": "DubboParser.method(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "service", "parameters": "(Invoker<?> invoker)", "modifiers": "@Nullable static", "return": "String", "signature": "String service(Invoker<?> invoker)", "full_signature": "@Nullable static String service(Invoker<?> invoker)", "class_method_signature": "DubboParser.service(Invoker<?> invoker)", "testcase": false, "constructor": false}, {"identifier": "parseRemoteIpAndPort", "parameters": "(Span span)", "modifiers": "static", "return": "boolean", "signature": "boolean parseRemoteIpAndPort(Span span)", "full_signature": "static boolean parseRemoteIpAndPort(Span span)", "class_method_signature": "DubboParser.parseRemoteIpAndPort(Span span)", "testcase": false, "constructor": false}, {"identifier": "errorCode", "parameters": "(Throwable error)", "modifiers": "@Nullable static", "return": "String", "signature": "String errorCode(Throwable error)", "full_signature": "@Nullable static String errorCode(Throwable error)", "class_method_signature": "DubboParser.errorCode(Throwable error)", "testcase": false, "constructor": false}], "file": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java"}, "focal_method": {"identifier": "errorCode", "parameters": "(Throwable error)", "modifiers": "@Nullable static", "return": "String", "body": "@Nullable static String errorCode(Throwable error) {\n    if (error instanceof RpcException) {\n      int code = ((RpcException) error).getCode();\n      switch (code) {\n        case RpcException.UNKNOWN_EXCEPTION:\n          return \"UNKNOWN_EXCEPTION\";\n        case RpcException.NETWORK_EXCEPTION:\n          return \"NETWORK_EXCEPTION\";\n        case RpcException.TIMEOUT_EXCEPTION:\n          return \"TIMEOUT_EXCEPTION\";\n        case RpcException.BIZ_EXCEPTION:\n          return \"BIZ_EXCEPTION\";\n        case RpcException.FORBIDDEN_EXCEPTION:\n          return \"FORBIDDEN_EXCEPTION\";\n        case RpcException.SERIALIZATION_EXCEPTION:\n          return \"SERIALIZATION_EXCEPTION\";\n        default:\n          return String.valueOf(code);\n      }\n    }\n    return null;\n  }", "signature": "String errorCode(Throwable error)", "full_signature": "@Nullable static String errorCode(Throwable error)", "class_method_signature": "DubboParser.errorCode(Throwable error)", "testcase": false, "constructor": false, "invocations": ["getCode", "valueOf"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}