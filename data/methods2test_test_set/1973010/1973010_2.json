{"test_class": {"identifier": "CRangeTest", "superclass": "", "interfaces": "", "fields": [], "file": "culvert-main/src/test/java/com/bah/culvert/data/CRangeTest.java"}, "test_case": {"identifier": "testCRangeEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCRangeEquals() {\n    CRange c1 = new CRange();\n    CRange c2 = new CRange(new byte[] { 0 });\n    CRange c3 = new CRange(new byte[] { 0 }, new byte[] { 5 });\n    CRange c4 = new CRange(new byte[] { 0 }, true, new byte[] { 5 }, false);\n\n    Assert.assertFalse(c1.equals(null));\n    Assert.assertFalse(c1.equals(c2));\n    Assert.assertTrue(c2.equals(c2));\n    Assert.assertFalse(c2.equals(c3));\n    Assert.assertFalse(c3.equals(c4));\n  }", "signature": "void testCRangeEquals()", "full_signature": "@Test public void testCRangeEquals()", "class_method_signature": "CRangeTest.testCRangeEquals()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertFalse", "equals"]}, "focal_class": {"identifier": "CRange", "superclass": "", "interfaces": "implements WritableComparable<CRange>", "fields": [{"original_string": "private byte[] start;", "modifier": "private", "type": "byte[]", "declarator": "start", "var_name": "start"}, {"original_string": "private boolean startInclusive;", "modifier": "private", "type": "boolean", "declarator": "startInclusive", "var_name": "startInclusive"}, {"original_string": "private byte[] end;", "modifier": "private", "type": "byte[]", "declarator": "end", "var_name": "end"}, {"original_string": "private boolean endInclusive;", "modifier": "private", "type": "boolean", "declarator": "endInclusive", "var_name": "endInclusive"}, {"original_string": "public static final CRange FULL_TABLE_RANGE = new CRange(new byte[0]);", "modifier": "public static final", "type": "CRange", "declarator": "FULL_TABLE_RANGE = new CRange(new byte[0])", "var_name": "FULL_TABLE_RANGE"}], "methods": [{"identifier": "CRange", "parameters": "()", "modifiers": "public", "return": "", "signature": " CRange()", "full_signature": "public  CRange()", "class_method_signature": "CRange.CRange()", "testcase": false, "constructor": true}, {"identifier": "CRange", "parameters": "(byte[] start)", "modifiers": "public", "return": "", "signature": " CRange(byte[] start)", "full_signature": "public  CRange(byte[] start)", "class_method_signature": "CRange.CRange(byte[] start)", "testcase": false, "constructor": true}, {"identifier": "CRange", "parameters": "(byte[] start, byte[] end)", "modifiers": "public", "return": "", "signature": " CRange(byte[] start, byte[] end)", "full_signature": "public  CRange(byte[] start, byte[] end)", "class_method_signature": "CRange.CRange(byte[] start, byte[] end)", "testcase": false, "constructor": true}, {"identifier": "CRange", "parameters": "(byte[] start, boolean startInclusive, byte[] end,\n      boolean endInclusive)", "modifiers": "public", "return": "", "signature": " CRange(byte[] start, boolean startInclusive, byte[] end,\n      boolean endInclusive)", "full_signature": "public  CRange(byte[] start, boolean startInclusive, byte[] end,\n      boolean endInclusive)", "class_method_signature": "CRange.CRange(byte[] start, boolean startInclusive, byte[] end,\n      boolean endInclusive)", "testcase": false, "constructor": true}, {"identifier": "readFields", "parameters": "(DataInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readFields(DataInput in)", "full_signature": "@Override public void readFields(DataInput in)", "class_method_signature": "CRange.readFields(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void write(DataOutput out)", "full_signature": "@Override public void write(DataOutput out)", "class_method_signature": "CRange.write(DataOutput out)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(CRange other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(CRange other)", "full_signature": "@Override public int compareTo(CRange other)", "class_method_signature": "CRange.compareTo(CRange other)", "testcase": false, "constructor": false}, {"identifier": "getStart", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getStart()", "full_signature": "public byte[] getStart()", "class_method_signature": "CRange.getStart()", "testcase": false, "constructor": false}, {"identifier": "isStartInclusive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStartInclusive()", "full_signature": "public boolean isStartInclusive()", "class_method_signature": "CRange.isStartInclusive()", "testcase": false, "constructor": false}, {"identifier": "getEnd", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getEnd()", "full_signature": "public byte[] getEnd()", "class_method_signature": "CRange.getEnd()", "testcase": false, "constructor": false}, {"identifier": "isEndInclusive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEndInclusive()", "full_signature": "public boolean isEndInclusive()", "class_method_signature": "CRange.isEndInclusive()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "CRange.equals(Object other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "CRange.hashCode()", "testcase": false, "constructor": false}], "file": "culvert-main/src/main/java/com/bah/culvert/data/CRange.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean equals(Object other) {\n    LexicographicBytesComparator bytesComparator = LexicographicBytesComparator.INSTANCE;\n    if (!(other instanceof CRange)) {\n      return false;\n    }\n\n    CRange compare = (CRange) other;\n\n    if ((start == null && compare.start != null) || end == null\n        && compare.end != null) {\n      return false;\n    }\n\n    if ((start != null && compare.start == null) || end != null\n        && compare.end == null) {\n      return false;\n    }\n    if (bytesComparator.compare(start, compare.start) == 0) {\n      if (startInclusive == compare.startInclusive) {\n        if (bytesComparator.compare(end, compare.end) == 0) {\n          if (endInclusive == compare.endInclusive) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "CRange.equals(Object other)", "testcase": false, "constructor": false, "invocations": ["compare", "compare"]}, "repository": {"repo_id": 1973010, "url": "https://github.com/booz-allen-hamilton/culvert", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 373, "license": "licensed"}}