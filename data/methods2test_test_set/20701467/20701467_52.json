{"test_class": {"identifier": "ArpDecoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "packethandler/implementation/src/test/java/org/opendaylight/l2switch/packethandler/decoders/ArpDecoderTest.java"}, "test_case": {"identifier": "testDecode_ReplyIPv4", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecode_ReplyIPv4() throws Exception {\n        byte[] packet = {\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Offset is 8\n            0x00, 0x01, // Hardware Type -- Ethernet\n            0x08, 0x00, // Protocol Type -- Ipv4\n            0x06, // Hardware Length -- 6\n            0x04, // Protcool Length -- 4\n            0x00, 0x02, // Operator -- Reply\n            0x01, 0x23, 0x45, 0x67, (byte) 0x89, (byte) 0xab, // Src Hardware Address\n            (byte)0xc0, (byte)0xa8, 0x00, 0x01, // Src Protocol Address\n            (byte) 0xcd, (byte) 0xef, 0x01, 0x23, 0x45, 0x67, // Dest Hardware Address\n            0x01, 0x02, 0x03, 0x04 // Dest Protocol Address\n        };\n        NotificationProviderService mock = Mockito.mock(NotificationProviderService.class);\n        ArrayList<PacketChain> packetChainList = new ArrayList<>();\n        packetChainList.add(new PacketChainBuilder().setPacket(new RawPacketBuilder().build()).build());\n        packetChainList.add(new PacketChainBuilder()\n                .setPacket(new EthernetPacketBuilder().setPayloadOffset(8).setPayloadLength(36).build()).build());\n        ArpPacketReceived notification = new ArpDecoder(mock)\n                .decode(new EthernetPacketReceivedBuilder().setPacketChain(packetChainList).setPayload(packet).build());\n\n        ArpPacket arpPacket = (ArpPacket) notification.getPacketChain().get(2).getPacket();\n        assertEquals(KnownHardwareType.Ethernet, arpPacket.getHardwareType());\n        assertEquals(KnownEtherType.Ipv4, arpPacket.getProtocolType());\n        assertEquals(6, arpPacket.getHardwareLength().intValue());\n        assertEquals(4, arpPacket.getProtocolLength().intValue());\n        assertEquals(KnownOperation.Reply, arpPacket.getOperation());\n        assertEquals(\"01:23:45:67:89:ab\", arpPacket.getSourceHardwareAddress());\n        assertEquals(\"192.168.0.1\", arpPacket.getSourceProtocolAddress());\n        assertEquals(\"cd:ef:01:23:45:67\", arpPacket.getDestinationHardwareAddress());\n        assertEquals(\"1.2.3.4\", arpPacket.getDestinationProtocolAddress());\n    }", "signature": "void testDecode_ReplyIPv4()", "full_signature": "@Test public void testDecode_ReplyIPv4()", "class_method_signature": "ArpDecoderTest.testDecode_ReplyIPv4()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "build", "setPacket", "build", "add", "build", "setPacket", "build", "setPayloadLength", "setPayloadOffset", "decode", "build", "setPayload", "setPacketChain", "getPacket", "get", "getPacketChain", "assertEquals", "getHardwareType", "assertEquals", "getProtocolType", "assertEquals", "intValue", "getHardwareLength", "assertEquals", "intValue", "getProtocolLength", "assertEquals", "getOperation", "assertEquals", "getSourceHardwareAddress", "assertEquals", "getSourceProtocolAddress", "assertEquals", "getDestinationHardwareAddress", "assertEquals", "getDestinationProtocolAddress"]}, "focal_class": {"identifier": "ArpDecoder", "superclass": "extends AbstractPacketDecoder<EthernetPacketReceived, ArpPacketReceived>", "interfaces": "implements EthernetPacketListener", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ArpDecoder.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ArpDecoder.class)", "var_name": "LOG"}], "methods": [{"identifier": "ArpDecoder", "parameters": "(NotificationProviderService notificationProviderService)", "modifiers": "public", "return": "", "signature": " ArpDecoder(NotificationProviderService notificationProviderService)", "full_signature": "public  ArpDecoder(NotificationProviderService notificationProviderService)", "class_method_signature": "ArpDecoder.ArpDecoder(NotificationProviderService notificationProviderService)", "testcase": false, "constructor": true}, {"identifier": "decode", "parameters": "(EthernetPacketReceived ethernetPacketReceived)", "modifiers": "@Override public", "return": "ArpPacketReceived", "signature": "ArpPacketReceived decode(EthernetPacketReceived ethernetPacketReceived)", "full_signature": "@Override public ArpPacketReceived decode(EthernetPacketReceived ethernetPacketReceived)", "class_method_signature": "ArpDecoder.decode(EthernetPacketReceived ethernetPacketReceived)", "testcase": false, "constructor": false}, {"identifier": "getConsumedNotificationListener", "parameters": "()", "modifiers": "@Override public", "return": "NotificationListener", "signature": "NotificationListener getConsumedNotificationListener()", "full_signature": "@Override public NotificationListener getConsumedNotificationListener()", "class_method_signature": "ArpDecoder.getConsumedNotificationListener()", "testcase": false, "constructor": false}, {"identifier": "onEthernetPacketReceived", "parameters": "(EthernetPacketReceived notification)", "modifiers": "@Override public", "return": "void", "signature": "void onEthernetPacketReceived(EthernetPacketReceived notification)", "full_signature": "@Override public void onEthernetPacketReceived(EthernetPacketReceived notification)", "class_method_signature": "ArpDecoder.onEthernetPacketReceived(EthernetPacketReceived notification)", "testcase": false, "constructor": false}, {"identifier": "canDecode", "parameters": "(EthernetPacketReceived ethernetPacketReceived)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canDecode(EthernetPacketReceived ethernetPacketReceived)", "full_signature": "@Override public boolean canDecode(EthernetPacketReceived ethernetPacketReceived)", "class_method_signature": "ArpDecoder.canDecode(EthernetPacketReceived ethernetPacketReceived)", "testcase": false, "constructor": false}], "file": "packethandler/implementation/src/main/java/org/opendaylight/l2switch/packethandler/decoders/ArpDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(EthernetPacketReceived ethernetPacketReceived)", "modifiers": "@Override public", "return": "ArpPacketReceived", "body": "@Override\n    public ArpPacketReceived decode(EthernetPacketReceived ethernetPacketReceived) {\n        ArpPacketReceivedBuilder arpReceivedBuilder = new ArpPacketReceivedBuilder();\n\n        // Find the latest packet in the packet-chain, which is an\n        // EthernetPacket\n        List<PacketChain> packetChainList = ethernetPacketReceived.getPacketChain();\n        EthernetPacket ethernetPacket = (EthernetPacket) packetChainList.get(packetChainList.size() - 1).getPacket();\n        int bitOffset = ethernetPacket.getPayloadOffset() * NetUtils.NUM_BITS_IN_A_BYTE;\n        byte[] data = ethernetPacketReceived.getPayload();\n\n        ArpPacketBuilder builder = new ArpPacketBuilder();\n        try {\n            // Decode the hardware-type (HTYPE) and protocol-type (PTYPE) fields\n            builder.setHardwareType(KnownHardwareType\n                    .forValue(BitBufferHelper.getInt(BitBufferHelper.getBits(data, bitOffset + 0, 16))));\n            builder.setProtocolType(\n                    KnownEtherType.forValue(BitBufferHelper.getInt(BitBufferHelper.getBits(data, bitOffset + 16, 16))));\n\n            // Decode the hardware-length and protocol-length fields\n            builder.setHardwareLength(BitBufferHelper.getShort(BitBufferHelper.getBits(data, bitOffset + 32, 8)));\n            builder.setProtocolLength(BitBufferHelper.getShort(BitBufferHelper.getBits(data, bitOffset + 40, 8)));\n\n            // Decode the operation field\n            builder.setOperation(\n                    KnownOperation.forValue(BitBufferHelper.getInt(BitBufferHelper.getBits(data, bitOffset + 48, 16))));\n\n            // Decode the address fields\n            int indexSrcProtAdd = 64 + 8 * builder.getHardwareLength();\n            int indexDstHardAdd = indexSrcProtAdd + 8 * builder.getProtocolLength();\n            int indexDstProtAdd = indexDstHardAdd + 8 * builder.getHardwareLength();\n            if (builder.getHardwareType().equals(KnownHardwareType.Ethernet)) {\n                builder.setSourceHardwareAddress(HexEncode.bytesToHexStringFormat(\n                        BitBufferHelper.getBits(data, bitOffset + 64, 8 * builder.getHardwareLength())));\n                builder.setDestinationHardwareAddress(HexEncode.bytesToHexStringFormat(\n                        BitBufferHelper.getBits(data, bitOffset + indexDstHardAdd, 8 * builder.getHardwareLength())));\n            } else {\n                LOG.debug(\n                        \"Unknown HardwareType -- sourceHardwareAddress and destinationHardwareAddress are not decoded\");\n            }\n\n            if (builder.getProtocolType().equals(KnownEtherType.Ipv4)\n                    || builder.getProtocolType().equals(KnownEtherType.Ipv6)) {\n                builder.setSourceProtocolAddress(InetAddress.getByAddress(\n                        BitBufferHelper.getBits(data, bitOffset + indexSrcProtAdd, 8 * builder.getProtocolLength()))\n                        .getHostAddress());\n                builder.setDestinationProtocolAddress(InetAddress.getByAddress(\n                        BitBufferHelper.getBits(data, bitOffset + indexDstProtAdd, 8 * builder.getProtocolLength()))\n                        .getHostAddress());\n            } else {\n                LOG.debug(\n                        \"Unknown ProtocolType -- sourceProtocolAddress and destinationProtocolAddress are not decoded\");\n            }\n        } catch (BufferException | UnknownHostException e) {\n            LOG.debug(\"Exception while decoding APR packet\", e.getMessage());\n        }\n\n        // build arp\n        packetChainList.add(new PacketChainBuilder().setPacket(builder.build()).build());\n        arpReceivedBuilder.setPacketChain(packetChainList);\n\n        // carry forward the original payload.\n        arpReceivedBuilder.setPayload(ethernetPacketReceived.getPayload());\n\n        return arpReceivedBuilder.build();\n    }", "signature": "ArpPacketReceived decode(EthernetPacketReceived ethernetPacketReceived)", "full_signature": "@Override public ArpPacketReceived decode(EthernetPacketReceived ethernetPacketReceived)", "class_method_signature": "ArpDecoder.decode(EthernetPacketReceived ethernetPacketReceived)", "testcase": false, "constructor": false, "invocations": ["getPacketChain", "getPacket", "get", "size", "getPayloadOffset", "getPayload", "setHardwareType", "forValue", "getInt", "getBits", "setProtocolType", "forValue", "getInt", "getBits", "setHardwareLength", "getShort", "getBits", "setProtocolLength", "getShort", "getBits", "setOperation", "forValue", "getInt", "getBits", "getHardwareLength", "getProtocolLength", "getHardwareLength", "equals", "getHardwareType", "setSourceHardwareAddress", "bytesToHexStringFormat", "getBits", "getHardwareLength", "setDestinationHardwareAddress", "bytesToHexStringFormat", "getBits", "getHardwareLength", "debug", "equals", "getProtocolType", "equals", "getProtocolType", "setSourceProtocolAddress", "getHostAddress", "getByAddress", "getBits", "getProtocolLength", "setDestinationProtocolAddress", "getHostAddress", "getByAddress", "getBits", "getProtocolLength", "debug", "debug", "getMessage", "add", "build", "setPacket", "build", "setPacketChain", "setPayload", "getPayload", "build"]}, "repository": {"repo_id": 20701467, "url": "https://github.com/opendaylight/l2switch", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 25, "size": 4178, "license": "licensed"}}