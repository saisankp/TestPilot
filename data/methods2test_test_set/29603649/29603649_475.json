{"test_class": {"identifier": "WilmaHttpRequestProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ProcessorBase requestProcessor;", "modifier": "@Mock\n    private", "type": "ProcessorBase", "declarator": "requestProcessor", "var_name": "requestProcessor"}, {"original_string": "@Mock\n    private WilmaHttpRequest request;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private WilmaHttpRequestProcessor underTest;", "modifier": "private", "type": "WilmaHttpRequestProcessor", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "private List<ProcessorBase> processors;", "modifier": "private", "type": "List<ProcessorBase>", "declarator": "processors", "var_name": "processors"}], "file": "wilma-application/modules/wilma-core/src/test/java/com/epam/wilma/core/processor/request/WilmaHttpRequestProcessorTest.java"}, "test_case": {"identifier": "testProcessRequestShouldHandleRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcessRequestShouldHandleRequest() throws ApplicationException {\n        //GIVEN in setUp\n        given(requestProcessor.isEnabled()).willReturn(true);\n        //WHEN\n        underTest.processRequest(request);\n        //THEN\n        verify(requestProcessor).process(request);\n    }", "signature": "void testProcessRequestShouldHandleRequest()", "full_signature": "@Test public void testProcessRequestShouldHandleRequest()", "class_method_signature": "WilmaHttpRequestProcessorTest.testProcessRequestShouldHandleRequest()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "isEnabled", "processRequest", "process", "verify"]}, "focal_class": {"identifier": "WilmaHttpRequestProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<ProcessorBase> processors;", "modifier": "private", "type": "List<ProcessorBase>", "declarator": "processors", "var_name": "processors"}], "methods": [{"identifier": "processRequest", "parameters": "(final WilmaHttpEntity entity)", "modifiers": "public", "return": "void", "signature": "void processRequest(final WilmaHttpEntity entity)", "full_signature": "public void processRequest(final WilmaHttpEntity entity)", "class_method_signature": "WilmaHttpRequestProcessor.processRequest(final WilmaHttpEntity entity)", "testcase": false, "constructor": false}, {"identifier": "disableProcessor", "parameters": "(final ProcessorBase processor)", "modifiers": "public", "return": "void", "signature": "void disableProcessor(final ProcessorBase processor)", "full_signature": "public void disableProcessor(final ProcessorBase processor)", "class_method_signature": "WilmaHttpRequestProcessor.disableProcessor(final ProcessorBase processor)", "testcase": false, "constructor": false}, {"identifier": "enableProcessor", "parameters": "(final ProcessorBase processor)", "modifiers": "public", "return": "void", "signature": "void enableProcessor(final ProcessorBase processor)", "full_signature": "public void enableProcessor(final ProcessorBase processor)", "class_method_signature": "WilmaHttpRequestProcessor.enableProcessor(final ProcessorBase processor)", "testcase": false, "constructor": false}, {"identifier": "isProcessorEnabled", "parameters": "(final ProcessorBase processor)", "modifiers": "public", "return": "boolean", "signature": "boolean isProcessorEnabled(final ProcessorBase processor)", "full_signature": "public boolean isProcessorEnabled(final ProcessorBase processor)", "class_method_signature": "WilmaHttpRequestProcessor.isProcessorEnabled(final ProcessorBase processor)", "testcase": false, "constructor": false}, {"identifier": "addProcessor", "parameters": "(final ProcessorBase processor)", "modifiers": "public", "return": "void", "signature": "void addProcessor(final ProcessorBase processor)", "full_signature": "public void addProcessor(final ProcessorBase processor)", "class_method_signature": "WilmaHttpRequestProcessor.addProcessor(final ProcessorBase processor)", "testcase": false, "constructor": false}, {"identifier": "containsProcessor", "parameters": "(final WilmaEntityProcessorInterface processor)", "modifiers": "public", "return": "boolean", "signature": "boolean containsProcessor(final WilmaEntityProcessorInterface processor)", "full_signature": "public boolean containsProcessor(final WilmaEntityProcessorInterface processor)", "class_method_signature": "WilmaHttpRequestProcessor.containsProcessor(final WilmaEntityProcessorInterface processor)", "testcase": false, "constructor": false}, {"identifier": "setProcessors", "parameters": "(final List<ProcessorBase> processors)", "modifiers": "public", "return": "void", "signature": "void setProcessors(final List<ProcessorBase> processors)", "full_signature": "public void setProcessors(final List<ProcessorBase> processors)", "class_method_signature": "WilmaHttpRequestProcessor.setProcessors(final List<ProcessorBase> processors)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-core/src/main/java/com/epam/wilma/core/processor/request/WilmaHttpRequestProcessor.java"}, "focal_method": {"identifier": "processRequest", "parameters": "(final WilmaHttpEntity entity)", "modifiers": "public", "return": "void", "body": "public void processRequest(final WilmaHttpEntity entity) throws ApplicationException {\n        WilmaHttpRequest request = (WilmaHttpRequest) entity;\n        for (ProcessorBase processor : processors) {\n            if (processor.isEnabled()) {\n                processor.process(request);\n            }\n        }\n    }", "signature": "void processRequest(final WilmaHttpEntity entity)", "full_signature": "public void processRequest(final WilmaHttpEntity entity)", "class_method_signature": "WilmaHttpRequestProcessor.processRequest(final WilmaHttpEntity entity)", "testcase": false, "constructor": false, "invocations": ["isEnabled", "process"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}