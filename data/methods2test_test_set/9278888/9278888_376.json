{"test_class": {"identifier": "JmsTracingTest", "superclass": "extends ITJms", "interfaces": "", "fields": [{"original_string": "TraceContext parent = newTraceContext(SamplingFlags.DEBUG);", "modifier": "", "type": "TraceContext", "declarator": "parent = newTraceContext(SamplingFlags.DEBUG)", "var_name": "parent"}, {"original_string": "ActiveMQTextMessage message = new ActiveMQTextMessage();", "modifier": "", "type": "ActiveMQTextMessage", "declarator": "message = new ActiveMQTextMessage()", "var_name": "message"}], "file": "instrumentation/jms/src/test/java/brave/jms/JmsTracingTest.java"}, "test_case": {"identifier": "connection_wrapsInput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void connection_wrapsInput() {\n    assertThat(jmsTracing.connection(mock(Connection.class)))\n      .isInstanceOf(TracingConnection.class);\n  }", "signature": "void connection_wrapsInput()", "full_signature": "@Test public void connection_wrapsInput()", "class_method_signature": "JmsTracingTest.connection_wrapsInput()", "testcase": true, "constructor": false, "invocations": ["isInstanceOf", "assertThat", "connection", "mock"]}, "focal_class": {"identifier": "JmsTracing", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String JMS_QUEUE = \"jms.queue\";", "modifier": "static final", "type": "String", "declarator": "JMS_QUEUE = \"jms.queue\"", "var_name": "JMS_QUEUE"}, {"original_string": "static final String JMS_TOPIC = \"jms.topic\";", "modifier": "static final", "type": "String", "declarator": "JMS_TOPIC = \"jms.topic\"", "var_name": "JMS_TOPIC"}, {"original_string": "static final Getter<Message, String> GETTER = new Getter<Message, String>() {\n    @Override public String get(Message message, String name) {\n      return getPropertyIfString(message, name);\n    }\n\n    @Override public String toString() {\n      return \"Message::getStringProperty\";\n    }\n  };", "modifier": "static final", "type": "Getter<Message, String>", "declarator": "GETTER = new Getter<Message, String>() {\n    @Override public String get(Message message, String name) {\n      return getPropertyIfString(message, name);\n    }\n\n    @Override public String toString() {\n      return \"Message::getStringProperty\";\n    }\n  }", "var_name": "GETTER"}, {"original_string": "final Tracing tracing;", "modifier": "final", "type": "Tracing", "declarator": "tracing", "var_name": "tracing"}, {"original_string": "final Tracer tracer;", "modifier": "final", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "final Extractor<MessageProducerRequest> messageProducerExtractor;", "modifier": "final", "type": "Extractor<MessageProducerRequest>", "declarator": "messageProducerExtractor", "var_name": "messageProducerExtractor"}, {"original_string": "final Injector<MessageProducerRequest> messageProducerInjector;", "modifier": "final", "type": "Injector<MessageProducerRequest>", "declarator": "messageProducerInjector", "var_name": "messageProducerInjector"}, {"original_string": "final Extractor<MessageConsumerRequest> messageConsumerExtractor;", "modifier": "final", "type": "Extractor<MessageConsumerRequest>", "declarator": "messageConsumerExtractor", "var_name": "messageConsumerExtractor"}, {"original_string": "final Injector<MessageConsumerRequest> messageConsumerInjector;", "modifier": "final", "type": "Injector<MessageConsumerRequest>", "declarator": "messageConsumerInjector", "var_name": "messageConsumerInjector"}, {"original_string": "final Extractor<Message> processorExtractor;", "modifier": "final", "type": "Extractor<Message>", "declarator": "processorExtractor", "var_name": "processorExtractor"}, {"original_string": "final SamplerFunction<MessagingRequest> producerSampler, consumerSampler;", "modifier": "final", "type": "SamplerFunction<MessagingRequest>", "declarator": "producerSampler", "var_name": "producerSampler"}, {"original_string": "final String remoteServiceName;", "modifier": "final", "type": "String", "declarator": "remoteServiceName", "var_name": "remoteServiceName"}, {"original_string": "final Set<String> traceIdProperties;", "modifier": "final", "type": "Set<String>", "declarator": "traceIdProperties", "var_name": "traceIdProperties"}, {"original_string": "@Nullable final Extractor jmsProducerExtractor;", "modifier": "@Nullable final", "type": "Extractor", "declarator": "jmsProducerExtractor", "var_name": "jmsProducerExtractor"}, {"original_string": "@Nullable final Injector jmsProducerInjector;", "modifier": "@Nullable final", "type": "Injector", "declarator": "jmsProducerInjector", "var_name": "jmsProducerInjector"}], "methods": [{"identifier": "create", "parameters": "(Tracing tracing)", "modifiers": "public static", "return": "JmsTracing", "signature": "JmsTracing create(Tracing tracing)", "full_signature": "public static JmsTracing create(Tracing tracing)", "class_method_signature": "JmsTracing.create(Tracing tracing)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(MessagingTracing messagingTracing)", "modifiers": "public static", "return": "JmsTracing", "signature": "JmsTracing create(MessagingTracing messagingTracing)", "full_signature": "public static JmsTracing create(MessagingTracing messagingTracing)", "class_method_signature": "JmsTracing.create(MessagingTracing messagingTracing)", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "(Tracing tracing)", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder(Tracing tracing)", "full_signature": "public static Builder newBuilder(Tracing tracing)", "class_method_signature": "JmsTracing.newBuilder(Tracing tracing)", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "(MessagingTracing messagingTracing)", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder(MessagingTracing messagingTracing)", "full_signature": "public static Builder newBuilder(MessagingTracing messagingTracing)", "class_method_signature": "JmsTracing.newBuilder(MessagingTracing messagingTracing)", "testcase": false, "constructor": false}, {"identifier": "JmsTracing", "parameters": "(Builder builder)", "modifiers": "", "return": "", "signature": " JmsTracing(Builder builder)", "full_signature": "  JmsTracing(Builder builder)", "class_method_signature": "JmsTracing.JmsTracing(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "connection", "parameters": "(Connection connection)", "modifiers": "public", "return": "Connection", "signature": "Connection connection(Connection connection)", "full_signature": "public Connection connection(Connection connection)", "class_method_signature": "JmsTracing.connection(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "queueConnection", "parameters": "(QueueConnection connection)", "modifiers": "public", "return": "QueueConnection", "signature": "QueueConnection queueConnection(QueueConnection connection)", "full_signature": "public QueueConnection queueConnection(QueueConnection connection)", "class_method_signature": "JmsTracing.queueConnection(QueueConnection connection)", "testcase": false, "constructor": false}, {"identifier": "topicConnection", "parameters": "(TopicConnection connection)", "modifiers": "public", "return": "TopicConnection", "signature": "TopicConnection topicConnection(TopicConnection connection)", "full_signature": "public TopicConnection topicConnection(TopicConnection connection)", "class_method_signature": "JmsTracing.topicConnection(TopicConnection connection)", "testcase": false, "constructor": false}, {"identifier": "xaConnection", "parameters": "(XAConnection xaConnection)", "modifiers": "public", "return": "XAConnection", "signature": "XAConnection xaConnection(XAConnection xaConnection)", "full_signature": "public XAConnection xaConnection(XAConnection xaConnection)", "class_method_signature": "JmsTracing.xaConnection(XAConnection xaConnection)", "testcase": false, "constructor": false}, {"identifier": "xaQueueConnection", "parameters": "(XAQueueConnection connection)", "modifiers": "public", "return": "XAQueueConnection", "signature": "XAQueueConnection xaQueueConnection(XAQueueConnection connection)", "full_signature": "public XAQueueConnection xaQueueConnection(XAQueueConnection connection)", "class_method_signature": "JmsTracing.xaQueueConnection(XAQueueConnection connection)", "testcase": false, "constructor": false}, {"identifier": "xaTopicConnection", "parameters": "(XATopicConnection connection)", "modifiers": "public", "return": "XATopicConnection", "signature": "XATopicConnection xaTopicConnection(XATopicConnection connection)", "full_signature": "public XATopicConnection xaTopicConnection(XATopicConnection connection)", "class_method_signature": "JmsTracing.xaTopicConnection(XATopicConnection connection)", "testcase": false, "constructor": false}, {"identifier": "connectionFactory", "parameters": "(ConnectionFactory connectionFactory)", "modifiers": "public", "return": "ConnectionFactory", "signature": "ConnectionFactory connectionFactory(ConnectionFactory connectionFactory)", "full_signature": "public ConnectionFactory connectionFactory(ConnectionFactory connectionFactory)", "class_method_signature": "JmsTracing.connectionFactory(ConnectionFactory connectionFactory)", "testcase": false, "constructor": false}, {"identifier": "xaConnectionFactory", "parameters": "(XAConnectionFactory xaConnectionFactory)", "modifiers": "public", "return": "XAConnectionFactory", "signature": "XAConnectionFactory xaConnectionFactory(XAConnectionFactory xaConnectionFactory)", "full_signature": "public XAConnectionFactory xaConnectionFactory(XAConnectionFactory xaConnectionFactory)", "class_method_signature": "JmsTracing.xaConnectionFactory(XAConnectionFactory xaConnectionFactory)", "testcase": false, "constructor": false}, {"identifier": "messageListener", "parameters": "(MessageListener messageListener, boolean addConsumerSpan)", "modifiers": "public", "return": "MessageListener", "signature": "MessageListener messageListener(MessageListener messageListener, boolean addConsumerSpan)", "full_signature": "public MessageListener messageListener(MessageListener messageListener, boolean addConsumerSpan)", "class_method_signature": "JmsTracing.messageListener(MessageListener messageListener, boolean addConsumerSpan)", "testcase": false, "constructor": false}, {"identifier": "nextSpan", "parameters": "(Message message)", "modifiers": "public", "return": "Span", "signature": "Span nextSpan(Message message)", "full_signature": "public Span nextSpan(Message message)", "class_method_signature": "JmsTracing.nextSpan(Message message)", "testcase": false, "constructor": false}, {"identifier": "extractAndClearTraceIdProperties", "parameters": "(\n    Extractor<R> extractor, R request, Message message\n  )", "modifiers": "", "return": "TraceContextOrSamplingFlags", "signature": "TraceContextOrSamplingFlags extractAndClearTraceIdProperties(\n    Extractor<R> extractor, R request, Message message\n  )", "full_signature": " TraceContextOrSamplingFlags extractAndClearTraceIdProperties(\n    Extractor<R> extractor, R request, Message message\n  )", "class_method_signature": "JmsTracing.extractAndClearTraceIdProperties(\n    Extractor<R> extractor, R request, Message message\n  )", "testcase": false, "constructor": false}, {"identifier": "nextMessagingSpan", "parameters": "(\n    SamplerFunction<MessagingRequest> sampler,\n    MessagingRequest request,\n    TraceContextOrSamplingFlags extracted\n  )", "modifiers": "", "return": "Span", "signature": "Span nextMessagingSpan(\n    SamplerFunction<MessagingRequest> sampler,\n    MessagingRequest request,\n    TraceContextOrSamplingFlags extracted\n  )", "full_signature": " Span nextMessagingSpan(\n    SamplerFunction<MessagingRequest> sampler,\n    MessagingRequest request,\n    TraceContextOrSamplingFlags extracted\n  )", "class_method_signature": "JmsTracing.nextMessagingSpan(\n    SamplerFunction<MessagingRequest> sampler,\n    MessagingRequest request,\n    TraceContextOrSamplingFlags extracted\n  )", "testcase": false, "constructor": false}, {"identifier": "tagQueueOrTopic", "parameters": "(MessagingRequest request, SpanCustomizer span)", "modifiers": "", "return": "void", "signature": "void tagQueueOrTopic(MessagingRequest request, SpanCustomizer span)", "full_signature": " void tagQueueOrTopic(MessagingRequest request, SpanCustomizer span)", "class_method_signature": "JmsTracing.tagQueueOrTopic(MessagingRequest request, SpanCustomizer span)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(Throwable thrown, String msg, Object zero, @Nullable Object one)", "modifiers": "static", "return": "void", "signature": "void log(Throwable thrown, String msg, Object zero, @Nullable Object one)", "full_signature": "static void log(Throwable thrown, String msg, Object zero, @Nullable Object one)", "class_method_signature": "JmsTracing.log(Throwable thrown, String msg, Object zero, @Nullable Object one)", "testcase": false, "constructor": false}], "file": "instrumentation/jms/src/main/java/brave/jms/JmsTracing.java"}, "focal_method": {"identifier": "connection", "parameters": "(Connection connection)", "modifiers": "public", "return": "Connection", "body": "public Connection connection(Connection connection) {\n    // It is common to implement both interfaces\n    if (connection instanceof XAConnection) {\n      return xaConnection((XAConnection) connection);\n    }\n    return TracingConnection.create(connection, this);\n  }", "signature": "Connection connection(Connection connection)", "full_signature": "public Connection connection(Connection connection)", "class_method_signature": "JmsTracing.connection(Connection connection)", "testcase": false, "constructor": false, "invocations": ["xaConnection", "create"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}