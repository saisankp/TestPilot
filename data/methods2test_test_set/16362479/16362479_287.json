{"test_class": {"identifier": "ClientBackedReadWriteTransactionTest", "superclass": "extends ClientBackedTransactionTest<ClientBackedReadWriteTransaction>", "interfaces": "", "fields": [{"original_string": "private ClientBackedReadWriteTransaction object;", "modifier": "private", "type": "ClientBackedReadWriteTransaction", "declarator": "object", "var_name": "object"}, {"original_string": "@Mock\n    private ClientTransaction delegate;", "modifier": "@Mock\n    private", "type": "ClientTransaction", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "@Mock\n    private NormalizedNode<?, ?> data;", "modifier": "@Mock\n    private", "type": "NormalizedNode<?, ?>", "declarator": "data", "var_name": "data"}, {"original_string": "@Mock\n    private DOMStoreThreePhaseCommitCohort readyCohort;", "modifier": "@Mock\n    private", "type": "DOMStoreThreePhaseCommitCohort", "declarator": "readyCohort", "var_name": "readyCohort"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/databroker/ClientBackedReadWriteTransactionTest.java"}, "test_case": {"identifier": "testExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExists() throws Exception {\n        assertEquals(Boolean.TRUE, object().exists(YangInstanceIdentifier.empty()).get());\n    }", "signature": "void testExists()", "full_signature": "@Test public void testExists()", "class_method_signature": "ClientBackedReadWriteTransactionTest.testExists()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "get", "exists", "object", "empty"]}, "focal_class": {"identifier": "ClientBackedReadWriteTransaction", "superclass": "extends ClientBackedWriteTransaction", "interfaces": "implements DOMStoreReadWriteTransaction", "fields": [], "methods": [{"identifier": "ClientBackedReadWriteTransaction", "parameters": "(final ClientTransaction delegate, final @Nullable Throwable allocationContext)", "modifiers": "", "return": "", "signature": " ClientBackedReadWriteTransaction(final ClientTransaction delegate, final @Nullable Throwable allocationContext)", "full_signature": "  ClientBackedReadWriteTransaction(final ClientTransaction delegate, final @Nullable Throwable allocationContext)", "class_method_signature": "ClientBackedReadWriteTransaction.ClientBackedReadWriteTransaction(final ClientTransaction delegate, final @Nullable Throwable allocationContext)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "@Override public", "return": "FluentFuture<Optional<NormalizedNode<?, ?>>>", "signature": "FluentFuture<Optional<NormalizedNode<?, ?>>> read(final YangInstanceIdentifier path)", "full_signature": "@Override public FluentFuture<Optional<NormalizedNode<?, ?>>> read(final YangInstanceIdentifier path)", "class_method_signature": "ClientBackedReadWriteTransaction.read(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "@Override public", "return": "FluentFuture<Boolean>", "signature": "FluentFuture<Boolean> exists(final YangInstanceIdentifier path)", "full_signature": "@Override public FluentFuture<Boolean> exists(final YangInstanceIdentifier path)", "class_method_signature": "ClientBackedReadWriteTransaction.exists(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/databroker/ClientBackedReadWriteTransaction.java"}, "focal_method": {"identifier": "exists", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "@Override public", "return": "FluentFuture<Boolean>", "body": "@Override\n    public FluentFuture<Boolean> exists(final YangInstanceIdentifier path) {\n        return delegate().exists(path);\n    }", "signature": "FluentFuture<Boolean> exists(final YangInstanceIdentifier path)", "full_signature": "@Override public FluentFuture<Boolean> exists(final YangInstanceIdentifier path)", "class_method_signature": "ClientBackedReadWriteTransaction.exists(final YangInstanceIdentifier path)", "testcase": false, "constructor": false, "invocations": ["exists", "delegate"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}