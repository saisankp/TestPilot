{"test_class": {"identifier": "PolicyUpdaterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String pathToAthenzConfigFile = \"./src/test/resources/athenz.conf\";", "modifier": "private final", "type": "String", "declarator": "pathToAthenzConfigFile = \"./src/test/resources/athenz.conf\"", "var_name": "pathToAthenzConfigFile"}, {"original_string": "private final String pathToZPUConfigFile = \"./src/test/resources/zpu.conf\";", "modifier": "private final", "type": "String", "declarator": "pathToZPUConfigFile = \"./src/test/resources/zpu.conf\"", "var_name": "pathToZPUConfigFile"}, {"original_string": "private final String pathToZPUTestConfigFile = \"./src/test/resources/zpu_test.conf\";", "modifier": "private final", "type": "String", "declarator": "pathToZPUTestConfigFile = \"./src/test/resources/zpu_test.conf\"", "var_name": "pathToZPUTestConfigFile"}, {"original_string": "private final String pathToZPUEmptyConfigFile = \"./src/test/resources/zpu_empty.conf\";", "modifier": "private final", "type": "String", "declarator": "pathToZPUEmptyConfigFile = \"./src/test/resources/zpu_empty.conf\"", "var_name": "pathToZPUEmptyConfigFile"}, {"original_string": "private final String EXPECTED_ROOT_DIR = \"/home/athenz\";", "modifier": "private final", "type": "String", "declarator": "EXPECTED_ROOT_DIR = \"/home/athenz\"", "var_name": "EXPECTED_ROOT_DIR"}, {"original_string": "private final String TEST_ROOT_DIR = \"/home/myroot\";", "modifier": "private final", "type": "String", "declarator": "TEST_ROOT_DIR = \"/home/myroot\"", "var_name": "TEST_ROOT_DIR"}, {"original_string": "private final String EXPECTED_ZTS_PUBLIC_KEY_K0 = \"LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTHpmU09UUUpmRW0xZW00TDNza3lOVlEvYngwTU9UcQphK1J3T0gzWmNNS3lvR3hPSm85QXllUmE2RlhNbXZKSkdZczVQMzRZc3pGcG5qMnVBYmkyNG5FQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo-\";", "modifier": "private final", "type": "String", "declarator": "EXPECTED_ZTS_PUBLIC_KEY_K0 = \"LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTHpmU09UUUpmRW0xZW00TDNza3lOVlEvYngwTU9UcQphK1J3T0gzWmNNS3lvR3hPSm85QXllUmE2RlhNbXZKSkdZczVQMzRZc3pGcG5qMnVBYmkyNG5FQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo-\"", "var_name": "EXPECTED_ZTS_PUBLIC_KEY_K0"}, {"original_string": "private final String EXPECTED_ZTS_PUBLIC_KEY_K1 = \"LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBUFpyWkMxelBhNXBQZloxaXFtcjdnWW9YaHVIbGlSUApVbnlLelliWWhRZXpUSlJlSDBsdWhvVVdQdTZxeWRHSm54RVUyTldNQ1hZLzhuL1VGSUZvakYwQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo-\";", "modifier": "private final", "type": "String", "declarator": "EXPECTED_ZTS_PUBLIC_KEY_K1 = \"LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBUFpyWkMxelBhNXBQZloxaXFtcjdnWW9YaHVIbGlSUApVbnlLelliWWhRZXpUSlJlSDBsdWhvVVdQdTZxeWRHSm54RVUyTldNQ1hZLzhuL1VGSUZvakYwQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo-\"", "var_name": "EXPECTED_ZTS_PUBLIC_KEY_K1"}, {"original_string": "private final String EXPECTED_POLICY_FILE_TMP_DIR_SUFFIX = \"/tmp/zpe\";", "modifier": "private final", "type": "String", "declarator": "EXPECTED_POLICY_FILE_TMP_DIR_SUFFIX = \"/tmp/zpe\"", "var_name": "EXPECTED_POLICY_FILE_TMP_DIR_SUFFIX"}, {"original_string": "private final String TEST_POLICY_DIR = \"/pol_dir\";", "modifier": "private final", "type": "String", "declarator": "TEST_POLICY_DIR = \"/pol_dir\"", "var_name": "TEST_POLICY_DIR"}, {"original_string": "private final String TEST_POLICY_TEMP_DIR = \"/tmp\";", "modifier": "private final", "type": "String", "declarator": "TEST_POLICY_TEMP_DIR = \"/tmp\"", "var_name": "TEST_POLICY_TEMP_DIR"}, {"original_string": "private final int TEST_STARTUP_DELAY = 1339;", "modifier": "private final", "type": "int", "declarator": "TEST_STARTUP_DELAY = 1339", "var_name": "TEST_STARTUP_DELAY"}, {"original_string": "private PolicyUpdaterConfiguration pupConfig = null;", "modifier": "private", "type": "PolicyUpdaterConfiguration", "declarator": "pupConfig = null", "var_name": "pupConfig"}], "file": "utils/zpe_policy_updater/src/test/java/com/yahoo/athenz/zpe_policy_updater/PolicyUpdaterTest.java"}, "test_case": {"identifier": "TestVerifySignature", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void TestVerifySignature() throws Exception {\n        \n        PolicyUpdaterConfiguration configuration = new PolicyUpdaterConfiguration();\n        configuration.init(pathToAthenzConfigFile, pathToZPUConfigFile);\n        \n        SignPoliciesUtility.signPolicies(\"./src/test/resources/unit_test_zts_private_k0.pem\",\n                \"./src/test/resources/unit_test_zms_private_k0.pem\", \"./src/test/resources/sys.auth.pol\",\n                \"./src/test/resources/sys.auth.new.pol\");\n        \n        Path path = Paths.get(\"./src/test/resources/sys.auth.new.pol\");\n        DomainSignedPolicyData domainPolicySignedData = JSON.fromBytes(Files.readAllBytes(path), DomainSignedPolicyData.class);\n        Assert.assertTrue(PolicyUpdater.validateSignedPolicies(null, configuration, domainPolicySignedData, \"sys.auth.new\"));\n        \n        // negative test with tampered publickey - zts pubkey failure\n        PolicyUpdaterConfiguration confMock = Mockito.mock(PolicyUpdaterConfiguration.class);\n        Mockito.when(confMock.getZtsPublicKey(Mockito.any(ZTSClient.class), Mockito.<String>any())).thenReturn(null);\n        Assert.assertFalse(PolicyUpdater.validateSignedPolicies(null, confMock, domainPolicySignedData, \"sys.auth.new\"));\n        \n        // negative test with tampered publickey - zms pubkey failure\n        confMock = Mockito.mock(PolicyUpdaterConfiguration.class);\n        PublicKey pKey = Crypto.loadPublicKey(Crypto.ybase64DecodeString(\"LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZ3d0\"\n                + \"RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTHpmU09UUUpmRW0xZW00TD\"\n                + \"Nza3lOVlEvYngwTU9UcQphK1J3T0gzWmNNS3lvR3hPSm85QXllUmE2RlhNbX\"\n                + \"ZKSkdZczVQMzRZc3pGcG5qMnVBYmkyNG5FQ0F3RUFBUT09Ci0tLS0tRU5EIF\"\n                + \"BVQkxJQyBLRVktLS0tLQo-\"));\n        Mockito.when(confMock.getZtsPublicKey(Mockito.any(ZTSClient.class), Mockito.<String>any())).thenReturn(pKey);\n        Mockito.when(confMock.getZmsPublicKey(Mockito.any(ZTSClient.class), Mockito.<String>any())).thenReturn(null);\n        Assert.assertFalse(PolicyUpdater.validateSignedPolicies(null, confMock, domainPolicySignedData, \"sys.auth.new\"));\n        \n        // negative test with tampered expiration - zts signature failure\n        path = Paths.get(\"./src/test/resources/sys.auth.pol.tampered.zts\");\n        domainPolicySignedData = JSON.fromBytes(Files.readAllBytes(path), DomainSignedPolicyData.class);\n        Assert.assertFalse(PolicyUpdater.validateSignedPolicies(null, configuration, domainPolicySignedData, \"sys.auth.new\"));\n        \n        // negative test with tampered actions - zms signature failure\n        path = Paths.get(\"./src/test/resources/sys.auth.pol.tampered.zms\");\n        domainPolicySignedData = JSON.fromBytes(Files.readAllBytes(path), DomainSignedPolicyData.class);\n        Assert.assertFalse(PolicyUpdater.validateSignedPolicies(null, configuration, domainPolicySignedData, \"sys.auth.new\"));\n        \n        // Test error handling for illegal arguments\n        boolean exceptionCaught = false;\n        try {\n            PolicyUpdater.validateSignedPolicies(null, configuration, null, \"sys.auth.new\");\n        } catch (IllegalArgumentException ex) {\n            exceptionCaught = true;\n        }\n        Assert.assertTrue(exceptionCaught);\n        \n        exceptionCaught = false;\n        try {\n            PolicyUpdater.validateSignedPolicies(null, configuration, domainPolicySignedData, null);\n        } catch (IllegalArgumentException ex) {\n            exceptionCaught = true;\n        }\n        Assert.assertTrue(exceptionCaught);\n    }", "signature": "void TestVerifySignature()", "full_signature": "@Test public void TestVerifySignature()", "class_method_signature": "PolicyUpdaterTest.TestVerifySignature()", "testcase": true, "constructor": false, "invocations": ["init", "signPolicies", "get", "fromBytes", "readAllBytes", "assertTrue", "validateSignedPolicies", "mock", "thenReturn", "when", "getZtsPublicKey", "any", "any", "assertFalse", "validateSignedPolicies", "mock", "loadPublicKey", "ybase64DecodeString", "thenReturn", "when", "getZtsPublicKey", "any", "any", "thenReturn", "when", "getZmsPublicKey", "any", "any", "assertFalse", "validateSignedPolicies", "get", "fromBytes", "readAllBytes", "assertFalse", "validateSignedPolicies", "get", "fromBytes", "readAllBytes", "assertFalse", "validateSignedPolicies", "validateSignedPolicies", "assertTrue", "validateSignedPolicies", "assertTrue"]}, "focal_class": {"identifier": "PolicyUpdater", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PolicyUpdater.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PolicyUpdater.class)", "var_name": "LOG"}, {"original_string": "private static final String POLICY_FILE_EXTENSION = \".pol\";", "modifier": "private static final", "type": "String", "declarator": "POLICY_FILE_EXTENSION = \".pol\"", "var_name": "POLICY_FILE_EXTENSION"}, {"original_string": "private static final String TEMP_FILE_EXTENSION = \".tmp\";", "modifier": "private static final", "type": "String", "declarator": "TEMP_FILE_EXTENSION = \".tmp\"", "var_name": "TEMP_FILE_EXTENSION"}, {"original_string": "public static final String ZPE_METRIC_FILE_PATH = \"/var/zpe_stat/\";", "modifier": "public static final", "type": "String", "declarator": "ZPE_METRIC_FILE_PATH = \"/var/zpe_stat/\"", "var_name": "ZPE_METRIC_FILE_PATH"}, {"original_string": "public static final String ZPE_PROP_METRIC_FILE_PATH = \"athenz.zpe.metric_file_path\";", "modifier": "public static final", "type": "String", "declarator": "ZPE_PROP_METRIC_FILE_PATH = \"athenz.zpe.metric_file_path\"", "var_name": "ZPE_PROP_METRIC_FILE_PATH"}, {"original_string": "static final String METRIC_GENERAL_FAILURE = \"zpu_general_fail_sum\";", "modifier": "static final", "type": "String", "declarator": "METRIC_GENERAL_FAILURE = \"zpu_general_fail_sum\"", "var_name": "METRIC_GENERAL_FAILURE"}, {"original_string": "static final String METRIC_PROCESS_SUM     = \"zpu_process_sum\";", "modifier": "static final", "type": "String", "declarator": "METRIC_PROCESS_SUM     = \"zpu_process_sum\"", "var_name": "METRIC_PROCESS_SUM"}, {"original_string": "static final String METRIC_DOMAIN_FAILURE  = \"domain_fail_sum\";", "modifier": "static final", "type": "String", "declarator": "METRIC_DOMAIN_FAILURE  = \"domain_fail_sum\"", "var_name": "METRIC_DOMAIN_FAILURE"}, {"original_string": "static final String METRIC_DOMAIN_SUCCESS  = \"domain_good_sum\";", "modifier": "static final", "type": "String", "declarator": "METRIC_DOMAIN_SUCCESS  = \"domain_good_sum\"", "var_name": "METRIC_DOMAIN_SUCCESS"}, {"original_string": "static final String METRIC_DOMAIN_FAIL     = \"domain_fail\";", "modifier": "static final", "type": "String", "declarator": "METRIC_DOMAIN_FAIL     = \"domain_fail\"", "var_name": "METRIC_DOMAIN_FAIL"}, {"original_string": "static final String METRIC_DOMAIN_GOOD     = \"domain_good\";", "modifier": "static final", "type": "String", "declarator": "METRIC_DOMAIN_GOOD     = \"domain_good\"", "var_name": "METRIC_DOMAIN_GOOD"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "PolicyUpdater.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "policyUpdater", "parameters": "(PolicyUpdaterConfiguration configuration, ZTSClientFactory ztsFactory)", "modifiers": "static", "return": "void", "signature": "void policyUpdater(PolicyUpdaterConfiguration configuration, ZTSClientFactory ztsFactory)", "full_signature": "static void policyUpdater(PolicyUpdaterConfiguration configuration, ZTSClientFactory ztsFactory)", "class_method_signature": "PolicyUpdater.policyUpdater(PolicyUpdaterConfiguration configuration, ZTSClientFactory ztsFactory)", "testcase": false, "constructor": false}, {"identifier": "validateSignedPolicies", "parameters": "(ZTSClient zts, PolicyUpdaterConfiguration configuration,\n            DomainSignedPolicyData domainSignedPolicyData, String domain)", "modifiers": "static", "return": "boolean", "signature": "boolean validateSignedPolicies(ZTSClient zts, PolicyUpdaterConfiguration configuration,\n            DomainSignedPolicyData domainSignedPolicyData, String domain)", "full_signature": "static boolean validateSignedPolicies(ZTSClient zts, PolicyUpdaterConfiguration configuration,\n            DomainSignedPolicyData domainSignedPolicyData, String domain)", "class_method_signature": "PolicyUpdater.validateSignedPolicies(ZTSClient zts, PolicyUpdaterConfiguration configuration,\n            DomainSignedPolicyData domainSignedPolicyData, String domain)", "testcase": false, "constructor": false}, {"identifier": "verifyTmpDirSetup", "parameters": "(PolicyUpdaterConfiguration configuration)", "modifiers": "static", "return": "void", "signature": "void verifyTmpDirSetup(PolicyUpdaterConfiguration configuration)", "full_signature": "static void verifyTmpDirSetup(PolicyUpdaterConfiguration configuration)", "class_method_signature": "PolicyUpdater.verifyTmpDirSetup(PolicyUpdaterConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "writePolicies", "parameters": "(PolicyUpdaterConfiguration configuration, String domain,\n            DomainSignedPolicyData domainSignedPolicyData)", "modifiers": "static", "return": "void", "signature": "void writePolicies(PolicyUpdaterConfiguration configuration, String domain,\n            DomainSignedPolicyData domainSignedPolicyData)", "full_signature": "static void writePolicies(PolicyUpdaterConfiguration configuration, String domain,\n            DomainSignedPolicyData domainSignedPolicyData)", "class_method_signature": "PolicyUpdater.writePolicies(PolicyUpdaterConfiguration configuration, String domain,\n            DomainSignedPolicyData domainSignedPolicyData)", "testcase": false, "constructor": false}, {"identifier": "getEtagForExistingPolicy", "parameters": "(ZTSClient zts, PolicyUpdaterConfiguration configuration,\n            String domain)", "modifiers": "static", "return": "String", "signature": "String getEtagForExistingPolicy(ZTSClient zts, PolicyUpdaterConfiguration configuration,\n            String domain)", "full_signature": "static String getEtagForExistingPolicy(ZTSClient zts, PolicyUpdaterConfiguration configuration,\n            String domain)", "class_method_signature": "PolicyUpdater.getEtagForExistingPolicy(ZTSClient zts, PolicyUpdaterConfiguration configuration,\n            String domain)", "testcase": false, "constructor": false}, {"identifier": "getFilePath", "parameters": "()", "modifiers": "static", "return": "String", "signature": "String getFilePath()", "full_signature": "static String getFilePath()", "class_method_signature": "PolicyUpdater.getFilePath()", "testcase": false, "constructor": false}, {"identifier": "postDomainMetrics", "parameters": "(ZTSClient zts)", "modifiers": "public static", "return": "void", "signature": "void postDomainMetrics(ZTSClient zts)", "full_signature": "public static void postDomainMetrics(ZTSClient zts)", "class_method_signature": "PolicyUpdater.postDomainMetrics(ZTSClient zts)", "testcase": false, "constructor": false}], "file": "utils/zpe_policy_updater/src/main/java/com/yahoo/athenz/zpe_policy_updater/PolicyUpdater.java"}, "focal_method": {"identifier": "validateSignedPolicies", "parameters": "(ZTSClient zts, PolicyUpdaterConfiguration configuration,\n            DomainSignedPolicyData domainSignedPolicyData, String domain)", "modifiers": "static", "return": "boolean", "body": "static boolean validateSignedPolicies(ZTSClient zts, PolicyUpdaterConfiguration configuration,\n            DomainSignedPolicyData domainSignedPolicyData, String domain) {\n        \n        if (domainSignedPolicyData == null || domain == null) {\n            throw new IllegalArgumentException(\"null parameters are not valid arguments\");\n        }\n        \n        LOG.info(\"Checking expiration time for:\" + domain);\n\n        Timestamp expires = domainSignedPolicyData.getSignedPolicyData().getExpires();\n        if (System.currentTimeMillis() > expires.millis()) {\n            LOG.error(\"Signed policy for domain:\" + domain + \" was expired.\");\n            return false;\n        }\n\n        // first we're going to verify the ZTS signature for the data\n        \n        LOG.info(\"Verifying ZTS signature for: \" + domain);\n        SignedPolicyData signedPolicyData = domainSignedPolicyData.getSignedPolicyData();\n        \n        LOG.debug(\"Policies retrieved from the ZTS server: \" + signedPolicyData);\n\n        String signature = domainSignedPolicyData.getSignature();\n        String keyId     = domainSignedPolicyData.getKeyId();\n        LOG.debug(\"validateSignedPolicies: domain=\" + domain + \" zts key id=\" + keyId + \" Digital ZTS signature=\" + signature);\n\n        PublicKey ztsPublicKey = configuration.getZtsPublicKey(zts, keyId);\n        if (ztsPublicKey == null) {\n            LOG.error(\"validateSignedPolicies: Missing ZTS Public key for id: \" + keyId);\n            return false;\n        }\n        \n        boolean verified = Crypto.verify(SignUtils.asCanonicalString(signedPolicyData), ztsPublicKey, signature);\n        if (verified == false) {\n            LOG.error(\"Signed policy for domain:\" + domain + \" failed ZTS signature verification.\");\n            LOG.error(\"ZTS Signature: \" + signature + \". Policies data returned from ZTS: \" + signedPolicyData);\n            return false;\n        }\n        \n        // then we're going to verify the ZMS signature for the policy data\n        \n        LOG.info(\"Verifying ZMS signature for: \" + domain);\n        PolicyData policyData = signedPolicyData.getPolicyData();\n       \n        signature = signedPolicyData.getZmsSignature();\n        LOG.debug(\"Digital ZMS signature: \" + signature);\n        keyId = signedPolicyData.getZmsKeyId();\n        LOG.debug(\"Digital ZMS signature key Id: \" + keyId);\n        \n        PublicKey zmsPublicKey = configuration.getZmsPublicKey(zts, keyId);\n        if (zmsPublicKey == null) {\n            LOG.error(\"Missing ZMS Public key with id: \" + keyId);\n            return false;\n        }\n        \n        verified = Crypto.verify(SignUtils.asCanonicalString(policyData), zmsPublicKey, signature);\n        if (verified == false) {\n            LOG.error(\"Signed policy for domain:\" + domain + \" failed ZMS signature verification.\");\n            LOG.error(\"ZMS Signature: \" + signature + \". Policies data returned from ZTS: \" + policyData);\n        }\n        \n        return verified;\n    }", "signature": "boolean validateSignedPolicies(ZTSClient zts, PolicyUpdaterConfiguration configuration,\n            DomainSignedPolicyData domainSignedPolicyData, String domain)", "full_signature": "static boolean validateSignedPolicies(ZTSClient zts, PolicyUpdaterConfiguration configuration,\n            DomainSignedPolicyData domainSignedPolicyData, String domain)", "class_method_signature": "PolicyUpdater.validateSignedPolicies(ZTSClient zts, PolicyUpdaterConfiguration configuration,\n            DomainSignedPolicyData domainSignedPolicyData, String domain)", "testcase": false, "constructor": false, "invocations": ["info", "getExpires", "getSignedPolicyData", "currentTimeMillis", "millis", "error", "info", "getSignedPolicyData", "debug", "getSignature", "getKeyId", "debug", "getZtsPublicKey", "error", "verify", "asCanonicalString", "error", "error", "info", "getPolicyData", "getZmsSignature", "debug", "getZmsKeyId", "debug", "getZmsPublicKey", "error", "verify", "asCanonicalString", "error", "error"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}