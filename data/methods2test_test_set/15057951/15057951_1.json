{"test_class": {"identifier": "StandardTransfererTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private StandardTransferer standardTransferer;", "modifier": "private", "type": "StandardTransferer", "declarator": "standardTransferer", "var_name": "standardTransferer"}, {"original_string": "private Map<TransferOperationType, TransferOperation> operations;", "modifier": "private", "type": "Map<TransferOperationType, TransferOperation>", "declarator": "operations", "var_name": "operations"}, {"original_string": "private ParameterSorter sorter;", "modifier": "private", "type": "ParameterSorter", "declarator": "sorter", "var_name": "sorter"}], "file": "smartparam-transferer/src/test/java/org/smartparam/transferer/StandardTransfererTest.java"}, "test_case": {"identifier": "shouldRunTransferOperationsOnlyForChosenOperations", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldRunTransferOperationsOnlyForChosenOperations() {\n        // given\n        TransferConfig config = new TransferConfig(TransferOperationType.CREATE);\n        SortedParameters sortedParameters = sortedParameters().with(TransferOperationType.CREATE, \"create\").build();\n        when(sorter.sort(anySetOf(String.class), anySetOf(String.class))).thenReturn(sortedParameters);\n\n        // when\n        standardTransferer.transfer(config, mock(ParamRepository.class), mock(WritableParamRepository.class));\n\n        // then\n        verify(operations.get(TransferOperationType.CREATE), times(1)).run(eq(\"create\"), any(ParamRepository.class), any(WritableParamRepository.class));\n        verify(operations.get(TransferOperationType.DELETE), never()).run(anyString(), any(ParamRepository.class), any(WritableParamRepository.class));\n        verify(operations.get(TransferOperationType.OVERRIDE), never()).run(anyString(), any(ParamRepository.class), any(WritableParamRepository.class));\n    }", "signature": "void shouldRunTransferOperationsOnlyForChosenOperations()", "full_signature": "@Test public void shouldRunTransferOperationsOnlyForChosenOperations()", "class_method_signature": "StandardTransfererTest.shouldRunTransferOperationsOnlyForChosenOperations()", "testcase": true, "constructor": false, "invocations": ["build", "with", "sortedParameters", "thenReturn", "when", "sort", "anySetOf", "anySetOf", "transfer", "mock", "mock", "run", "verify", "get", "times", "eq", "any", "any", "run", "verify", "get", "never", "anyString", "any", "any", "run", "verify", "get", "never", "anyString", "any", "any"]}, "focal_class": {"identifier": "StandardTransferer", "superclass": "", "interfaces": "implements Transferer", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(StandardTransferer.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(StandardTransferer.class)", "var_name": "logger"}, {"original_string": "private final ParameterSorter sorter;", "modifier": "private final", "type": "ParameterSorter", "declarator": "sorter", "var_name": "sorter"}, {"original_string": "private final Map<TransferOperationType, TransferOperation> operations;", "modifier": "private final", "type": "Map<TransferOperationType, TransferOperation>", "declarator": "operations", "var_name": "operations"}], "methods": [{"identifier": "StandardTransferer", "parameters": "(ParameterSorter sorter, Map<TransferOperationType, TransferOperation> operations)", "modifiers": "public", "return": "", "signature": " StandardTransferer(ParameterSorter sorter, Map<TransferOperationType, TransferOperation> operations)", "full_signature": "public  StandardTransferer(ParameterSorter sorter, Map<TransferOperationType, TransferOperation> operations)", "class_method_signature": "StandardTransferer.StandardTransferer(ParameterSorter sorter, Map<TransferOperationType, TransferOperation> operations)", "testcase": false, "constructor": true}, {"identifier": "transfer", "parameters": "(TransferConfig config, ParamRepository source, WritableParamRepository target)", "modifiers": "@Override public", "return": "void", "signature": "void transfer(TransferConfig config, ParamRepository source, WritableParamRepository target)", "full_signature": "@Override public void transfer(TransferConfig config, ParamRepository source, WritableParamRepository target)", "class_method_signature": "StandardTransferer.transfer(TransferConfig config, ParamRepository source, WritableParamRepository target)", "testcase": false, "constructor": false}, {"identifier": "runTransferOperations", "parameters": "(SortedParameters parameters, TransferConfig config, ParamRepository source, WritableParamRepository target)", "modifiers": "private", "return": "void", "signature": "void runTransferOperations(SortedParameters parameters, TransferConfig config, ParamRepository source, WritableParamRepository target)", "full_signature": "private void runTransferOperations(SortedParameters parameters, TransferConfig config, ParamRepository source, WritableParamRepository target)", "class_method_signature": "StandardTransferer.runTransferOperations(SortedParameters parameters, TransferConfig config, ParamRepository source, WritableParamRepository target)", "testcase": false, "constructor": false}, {"identifier": "runOperationOnParameters", "parameters": "(TransferOperation operation, Set<String> parameters, ParamRepository source, WritableParamRepository target)", "modifiers": "private", "return": "void", "signature": "void runOperationOnParameters(TransferOperation operation, Set<String> parameters, ParamRepository source, WritableParamRepository target)", "full_signature": "private void runOperationOnParameters(TransferOperation operation, Set<String> parameters, ParamRepository source, WritableParamRepository target)", "class_method_signature": "StandardTransferer.runOperationOnParameters(TransferOperation operation, Set<String> parameters, ParamRepository source, WritableParamRepository target)", "testcase": false, "constructor": false}], "file": "smartparam-transferer/src/main/java/org/smartparam/transferer/StandardTransferer.java"}, "focal_method": {"identifier": "transfer", "parameters": "(TransferConfig config, ParamRepository source, WritableParamRepository target)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void transfer(TransferConfig config, ParamRepository source, WritableParamRepository target) {\n        long startTime = System.currentTimeMillis();\n        logger.info(\"starting transfer from repository {} to repository {}\", source.getClass().getSimpleName(), target.getClass().getSimpleName());\n\n        SortedParameters sortedParameters = sorter.sort(source.listParameters(), target.listParameters());\n        runTransferOperations(sortedParameters, config, source, target);\n\n        long endTime = System.currentTimeMillis();\n        logger.info(\"done transfering parameters, took {}ms\", endTime - startTime);\n    }", "signature": "void transfer(TransferConfig config, ParamRepository source, WritableParamRepository target)", "full_signature": "@Override public void transfer(TransferConfig config, ParamRepository source, WritableParamRepository target)", "class_method_signature": "StandardTransferer.transfer(TransferConfig config, ParamRepository source, WritableParamRepository target)", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "info", "getSimpleName", "getClass", "getSimpleName", "getClass", "sort", "listParameters", "listParameters", "runTransferOperations", "currentTimeMillis", "info"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}