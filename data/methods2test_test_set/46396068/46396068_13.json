{"test_class": {"identifier": "UtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "hbase0.98/hbase-common-0.98/src/test/java/com/kakao/hbase/common/util/UtilTest.java"}, "test_case": {"identifier": "testParseTimestamp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseTimestamp() throws Exception {\n        try {\n            Util.parseTimestamp(\"0\");\n            Assert.fail();\n        } catch (IllegalArgumentException e) {\n            if (!e.getMessage().contains(Constant.MESSAGE_INVALID_DATE_FORMAT)) {\n                throw e;\n            }\n        }\n\n        try {\n            Util.parseTimestamp(\"20200101000000\");\n            Assert.fail();\n        } catch (IllegalArgumentException e) {\n            if (!e.getMessage().contains(Constant.MESSAGE_INVALID_DATE_FORMAT)) {\n                throw e;\n            }\n        }\n\n        Assert.assertEquals(\"20151130102200\",\n            Constant.DATE_FORMAT_ARGS.format(new Date(Util.parseTimestamp(\"20151130102200\"))));\n    }", "signature": "void testParseTimestamp()", "full_signature": "@Test public void testParseTimestamp()", "class_method_signature": "UtilTest.testParseTimestamp()", "testcase": true, "constructor": false, "invocations": ["parseTimestamp", "fail", "contains", "getMessage", "parseTimestamp", "fail", "contains", "getMessage", "assertEquals", "format", "parseTimestamp"]}, "focal_class": {"identifier": "Util", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");", "modifier": "public static final", "type": "SimpleDateFormat", "declarator": "DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")", "var_name": "DATE_FORMAT"}], "methods": [{"identifier": "Util", "parameters": "()", "modifiers": "private", "return": "", "signature": " Util()", "full_signature": "private  Util()", "class_method_signature": "Util.Util()", "testcase": false, "constructor": true}, {"identifier": "setLoggingThreshold", "parameters": "(String loggingLevel)", "modifiers": "public static", "return": "void", "signature": "void setLoggingThreshold(String loggingLevel)", "full_signature": "public static void setLoggingThreshold(String loggingLevel)", "class_method_signature": "Util.setLoggingThreshold(String loggingLevel)", "testcase": false, "constructor": false}, {"identifier": "validateTable", "parameters": "(HBaseAdmin admin, String tableName)", "modifiers": "public static", "return": "void", "signature": "void validateTable(HBaseAdmin admin, String tableName)", "full_signature": "public static void validateTable(HBaseAdmin admin, String tableName)", "class_method_signature": "Util.validateTable(HBaseAdmin admin, String tableName)", "testcase": false, "constructor": false}, {"identifier": "isMoved", "parameters": "(HBaseAdmin admin, String tableName, String regionName, String serverNameTarget)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMoved(HBaseAdmin admin, String tableName, String regionName, String serverNameTarget)", "full_signature": "public static boolean isMoved(HBaseAdmin admin, String tableName, String regionName, String serverNameTarget)", "class_method_signature": "Util.isMoved(HBaseAdmin admin, String tableName, String regionName, String serverNameTarget)", "testcase": false, "constructor": false}, {"identifier": "existsRegion", "parameters": "(String regionName, Set<HRegionInfo> regionLocations)", "modifiers": "public static", "return": "boolean", "signature": "boolean existsRegion(String regionName, Set<HRegionInfo> regionLocations)", "full_signature": "public static boolean existsRegion(String regionName, Set<HRegionInfo> regionLocations)", "class_method_signature": "Util.existsRegion(String regionName, Set<HRegionInfo> regionLocations)", "testcase": false, "constructor": false}, {"identifier": "askProceed", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean askProceed()", "full_signature": "public static boolean askProceed()", "class_method_signature": "Util.askProceed()", "testcase": false, "constructor": false}, {"identifier": "printVerboseMessage", "parameters": "(Args args, String message, long startTimestamp)", "modifiers": "public static", "return": "long", "signature": "long printVerboseMessage(Args args, String message, long startTimestamp)", "full_signature": "public static long printVerboseMessage(Args args, String message, long startTimestamp)", "class_method_signature": "Util.printVerboseMessage(Args args, String message, long startTimestamp)", "testcase": false, "constructor": false}, {"identifier": "printVerboseMessage", "parameters": "(Args args, String message)", "modifiers": "public static", "return": "void", "signature": "void printVerboseMessage(Args args, String message)", "full_signature": "public static void printVerboseMessage(Args args, String message)", "class_method_signature": "Util.printVerboseMessage(Args args, String message)", "testcase": false, "constructor": false}, {"identifier": "printMessage", "parameters": "(String message)", "modifiers": "public static", "return": "void", "signature": "void printMessage(String message)", "full_signature": "public static void printMessage(String message)", "class_method_signature": "Util.printMessage(String message)", "testcase": false, "constructor": false}, {"identifier": "now", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String now()", "full_signature": "private static String now()", "class_method_signature": "Util.now()", "testcase": false, "constructor": false}, {"identifier": "getResource", "parameters": "(String rsc)", "modifiers": "public static", "return": "String", "signature": "String getResource(String rsc)", "full_signature": "public static String getResource(String rsc)", "class_method_signature": "Util.getResource(String rsc)", "testcase": false, "constructor": false}, {"identifier": "readString", "parameters": "(Reader reader)", "modifiers": "private static", "return": "String", "signature": "String readString(Reader reader)", "full_signature": "private static String readString(Reader reader)", "class_method_signature": "Util.readString(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "readFromResource", "parameters": "(String fileName)", "modifiers": "public static", "return": "String", "signature": "String readFromResource(String fileName)", "full_signature": "public static String readFromResource(String fileName)", "class_method_signature": "Util.readFromResource(String fileName)", "testcase": false, "constructor": false}, {"identifier": "readFromFile", "parameters": "(String fileName)", "modifiers": "public static", "return": "String", "signature": "String readFromFile(String fileName)", "full_signature": "public static String readFromFile(String fileName)", "class_method_signature": "Util.readFromFile(String fileName)", "testcase": false, "constructor": false}, {"identifier": "isFile", "parameters": "(String path)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFile(String path)", "full_signature": "public static boolean isFile(String path)", "class_method_signature": "Util.isFile(String path)", "testcase": false, "constructor": false}, {"identifier": "parseTableSet", "parameters": "(HBaseAdmin admin, Args args)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> parseTableSet(HBaseAdmin admin, Args args)", "full_signature": "public static Set<String> parseTableSet(HBaseAdmin admin, Args args)", "class_method_signature": "Util.parseTableSet(HBaseAdmin admin, Args args)", "testcase": false, "constructor": false}, {"identifier": "getRegionInfoString", "parameters": "(HRegionInfo regionA)", "modifiers": "@SuppressWarnings(\"deprecation\") public static", "return": "String", "signature": "String getRegionInfoString(HRegionInfo regionA)", "full_signature": "@SuppressWarnings(\"deprecation\") public static String getRegionInfoString(HRegionInfo regionA)", "class_method_signature": "Util.getRegionInfoString(HRegionInfo regionA)", "testcase": false, "constructor": false}, {"identifier": "sendAlertAfterFailed", "parameters": "(Args args, Class clazz, String message)", "modifiers": "public static", "return": "void", "signature": "void sendAlertAfterFailed(Args args, Class clazz, String message)", "full_signature": "public static void sendAlertAfterFailed(Args args, Class clazz, String message)", "class_method_signature": "Util.sendAlertAfterFailed(Args args, Class clazz, String message)", "testcase": false, "constructor": false}, {"identifier": "sendAlertAfterSuccess", "parameters": "(Args args, Class clazz)", "modifiers": "public static", "return": "void", "signature": "void sendAlertAfterSuccess(Args args, Class clazz)", "full_signature": "public static void sendAlertAfterSuccess(Args args, Class clazz)", "class_method_signature": "Util.sendAlertAfterSuccess(Args args, Class clazz)", "testcase": false, "constructor": false}, {"identifier": "sendAlertAfterSuccess", "parameters": "(Args args, Class clazz, String message)", "modifiers": "public static", "return": "void", "signature": "void sendAlertAfterSuccess(Args args, Class clazz, String message)", "full_signature": "public static void sendAlertAfterSuccess(Args args, Class clazz, String message)", "class_method_signature": "Util.sendAlertAfterSuccess(Args args, Class clazz, String message)", "testcase": false, "constructor": false}, {"identifier": "sendAlertAfterFinish", "parameters": "(Args args, Class clazz, String message, boolean success)", "modifiers": "public static", "return": "void", "signature": "void sendAlertAfterFinish(Args args, Class clazz, String message, boolean success)", "full_signature": "public static void sendAlertAfterFinish(Args args, Class clazz, String message, boolean success)", "class_method_signature": "Util.sendAlertAfterFinish(Args args, Class clazz, String message, boolean success)", "testcase": false, "constructor": false}, {"identifier": "getMethodName", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getMethodName()", "full_signature": "public static String getMethodName()", "class_method_signature": "Util.getMethodName()", "testcase": false, "constructor": false}, {"identifier": "parseTimestamp", "parameters": "(String timestampString)", "modifiers": "public static", "return": "long", "signature": "long parseTimestamp(String timestampString)", "full_signature": "public static long parseTimestamp(String timestampString)", "class_method_signature": "Util.parseTimestamp(String timestampString)", "testcase": false, "constructor": false}, {"identifier": "askProceedInteractively", "parameters": "(Args args, boolean printNewLine)", "modifiers": "public static", "return": "boolean", "signature": "boolean askProceedInteractively(Args args, boolean printNewLine)", "full_signature": "public static boolean askProceedInteractively(Args args, boolean printNewLine)", "class_method_signature": "Util.askProceedInteractively(Args args, boolean printNewLine)", "testcase": false, "constructor": false}], "file": "hbase0.98/hbase-common-0.98/src/main/java/com/kakao/hbase/common/util/Util.java"}, "focal_method": {"identifier": "parseTimestamp", "parameters": "(String timestampString)", "modifiers": "public static", "return": "long", "body": "public static long parseTimestamp(String timestampString) {\n        try {\n            Date date = Constant.DATE_FORMAT_ARGS.parse(timestampString);\n            if (date.compareTo(new Date(System.currentTimeMillis())) > 0)\n                throw new IllegalArgumentException(Constant.MESSAGE_INVALID_DATE_FORMAT);\n            return date.getTime();\n        } catch (ParseException e) {\n            throw new IllegalArgumentException(Constant.MESSAGE_INVALID_DATE_FORMAT);\n        }\n    }", "signature": "long parseTimestamp(String timestampString)", "full_signature": "public static long parseTimestamp(String timestampString)", "class_method_signature": "Util.parseTimestamp(String timestampString)", "testcase": false, "constructor": false, "invocations": ["parse", "compareTo", "currentTimeMillis", "getTime"]}, "repository": {"repo_id": 46396068, "url": "https://github.com/kakao/hbase-tools", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 49, "size": 1758, "license": "licensed"}}