{"test_class": {"identifier": "TestStandardFlowRetrievalService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private C2NiFiRegistryClient clientFactory;", "modifier": "private", "type": "C2NiFiRegistryClient", "declarator": "clientFactory", "var_name": "clientFactory"}, {"original_string": "private NiFiRegistryClient client;", "modifier": "private", "type": "NiFiRegistryClient", "declarator": "client", "var_name": "client"}, {"original_string": "private FlowSnapshotClient flowSnapshotClient;", "modifier": "private", "type": "FlowSnapshotClient", "declarator": "flowSnapshotClient", "var_name": "flowSnapshotClient"}, {"original_string": "private FlowRetrievalService flowRetrievalService;", "modifier": "private", "type": "FlowRetrievalService", "declarator": "flowRetrievalService", "var_name": "flowRetrievalService"}], "file": "efm/efm-c2-protocol/efm-c2-protocol-framework/src/test/java/com/cloudera/cem/efm/service/flow/retrieval/TestStandardFlowRetrievalService.java"}, "test_case": {"identifier": "testRetrieveSpecificWhenVersionsExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRetrieveSpecificWhenVersionsExist() throws IOException, FlowRetrievalException, NiFiRegistryException {\n        final FlowUri flowUri = new FlowUri(\"http://localhost:18080\", UUID.randomUUID().toString(), UUID.randomUUID().toString());\n\n        final int version = 2;\n        final VersionedFlowSnapshot flowSnapshot = FlowTestUtils.createSnapshot(flowUri.getBucketId(), flowUri.getFlowId(), version);\n        when(flowSnapshotClient.get(flowUri.getBucketId(), flowUri.getFlowId(), version)).thenReturn(flowSnapshot);\n\n        final VersionedFlowSnapshot returnedFlowSnapshot = flowRetrievalService.getFlow(flowUri, version);\n        assertNotNull(returnedFlowSnapshot);\n        assertEquals(flowSnapshot.getSnapshotMetadata().getBucketIdentifier(), returnedFlowSnapshot.getSnapshotMetadata().getBucketIdentifier());\n        assertEquals(flowSnapshot.getSnapshotMetadata().getFlowIdentifier(), returnedFlowSnapshot.getSnapshotMetadata().getFlowIdentifier());\n        assertEquals(flowSnapshot.getSnapshotMetadata().getVersion(), returnedFlowSnapshot.getSnapshotMetadata().getVersion());\n    }", "signature": "void testRetrieveSpecificWhenVersionsExist()", "full_signature": "@Test public void testRetrieveSpecificWhenVersionsExist()", "class_method_signature": "TestStandardFlowRetrievalService.testRetrieveSpecificWhenVersionsExist()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "toString", "randomUUID", "createSnapshot", "getBucketId", "getFlowId", "thenReturn", "when", "get", "getBucketId", "getFlowId", "getFlow", "assertNotNull", "assertEquals", "getBucketIdentifier", "getSnapshotMetadata", "getBucketIdentifier", "getSnapshotMetadata", "assertEquals", "getFlowIdentifier", "getSnapshotMetadata", "getFlowIdentifier", "getSnapshotMetadata", "assertEquals", "getVersion", "getSnapshotMetadata", "getVersion", "getSnapshotMetadata"]}, "focal_class": {"identifier": "StandardFlowRetrievalService", "superclass": "", "interfaces": "implements FlowRetrievalService", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(StandardFlowRetrievalService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(StandardFlowRetrievalService.class)", "var_name": "LOGGER"}, {"original_string": "private final C2NiFiRegistryClient clientFactory;", "modifier": "private final", "type": "C2NiFiRegistryClient", "declarator": "clientFactory", "var_name": "clientFactory"}], "methods": [{"identifier": "StandardFlowRetrievalService", "parameters": "(final C2NiFiRegistryClient clientFactory)", "modifiers": "@Autowired public", "return": "", "signature": " StandardFlowRetrievalService(final C2NiFiRegistryClient clientFactory)", "full_signature": "@Autowired public  StandardFlowRetrievalService(final C2NiFiRegistryClient clientFactory)", "class_method_signature": "StandardFlowRetrievalService.StandardFlowRetrievalService(final C2NiFiRegistryClient clientFactory)", "testcase": false, "constructor": true}, {"identifier": "getVersions", "parameters": "(final FlowUri flowUri)", "modifiers": "@Override public", "return": "List<VersionedFlowSnapshotMetadata>", "signature": "List<VersionedFlowSnapshotMetadata> getVersions(final FlowUri flowUri)", "full_signature": "@Override public List<VersionedFlowSnapshotMetadata> getVersions(final FlowUri flowUri)", "class_method_signature": "StandardFlowRetrievalService.getVersions(final FlowUri flowUri)", "testcase": false, "constructor": false}, {"identifier": "getFlow", "parameters": "(final FlowUri flowUri, final int version)", "modifiers": "@Override public", "return": "VersionedFlowSnapshot", "signature": "VersionedFlowSnapshot getFlow(final FlowUri flowUri, final int version)", "full_signature": "@Override public VersionedFlowSnapshot getFlow(final FlowUri flowUri, final int version)", "class_method_signature": "StandardFlowRetrievalService.getFlow(final FlowUri flowUri, final int version)", "testcase": false, "constructor": false}, {"identifier": "getLatestFlow", "parameters": "(final FlowUri flowUri)", "modifiers": "@Override public", "return": "VersionedFlowSnapshot", "signature": "VersionedFlowSnapshot getLatestFlow(final FlowUri flowUri)", "full_signature": "@Override public VersionedFlowSnapshot getLatestFlow(final FlowUri flowUri)", "class_method_signature": "StandardFlowRetrievalService.getLatestFlow(final FlowUri flowUri)", "testcase": false, "constructor": false}], "file": "efm/efm-c2-protocol/efm-c2-protocol-framework/src/main/java/com/cloudera/cem/efm/service/flow/retrieval/StandardFlowRetrievalService.java"}, "focal_method": {"identifier": "getFlow", "parameters": "(final FlowUri flowUri, final int version)", "modifiers": "@Override public", "return": "VersionedFlowSnapshot", "body": "@Override\n    public VersionedFlowSnapshot getFlow(final FlowUri flowUri, final int version)\n            throws IOException, FlowRetrievalException {\n\n        if (flowUri == null) {\n            throw new IllegalArgumentException(\"FlowUri cannot be null\");\n        }\n\n        if (version < 1) {\n            throw new IllegalArgumentException(\"Version must be greater than or equal to 1\");\n        }\n\n        if (LOGGER.isTraceEnabled()) {\n            LOGGER.trace(\"Getting flow for {} with version {}\", new Object[] {flowUri, Integer.valueOf(version)});\n        }\n\n        final NiFiRegistryClient client = clientFactory.getClient();\n        try {\n            return client.getFlowSnapshotClient().get(flowUri.getBucketId(), flowUri.getFlowId(), version);\n        } catch (IOException ioe) {\n            throw ioe;\n        } catch (NiFiRegistryException nre) {\n            throw new FlowRetrievalException(\"Error retrieving flow for \" + flowUri + \": \" + nre.getMessage(), nre);\n        }\n    }", "signature": "VersionedFlowSnapshot getFlow(final FlowUri flowUri, final int version)", "full_signature": "@Override public VersionedFlowSnapshot getFlow(final FlowUri flowUri, final int version)", "class_method_signature": "StandardFlowRetrievalService.getFlow(final FlowUri flowUri, final int version)", "testcase": false, "constructor": false, "invocations": ["isTraceEnabled", "trace", "valueOf", "getClient", "get", "getFlowSnapshotClient", "getBucketId", "getFlowId", "getMessage"]}, "repository": {"repo_id": 181071001, "url": "https://github.com/hortonworks/efm", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 2003, "license": "licensed"}}