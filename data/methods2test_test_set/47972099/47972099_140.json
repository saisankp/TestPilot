{"test_class": {"identifier": "GenericDataSourceBaseTest", "superclass": "", "interfaces": "implements java.io.Serializable", "fields": [], "file": "flink-core/src/test/java/org/apache/flink/api/common/operators/GenericDataSourceBaseTest.java"}, "test_case": {"identifier": "testDataSourcePlain", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDataSourcePlain() {\n\t\ttry {\n\t\t\tTestNonRichInputFormat in = new TestNonRichInputFormat();\n\t\t\tGenericDataSourceBase<String, TestNonRichInputFormat> source =\n\t\t\t\t\tnew GenericDataSourceBase<String, TestNonRichInputFormat>(\n\t\t\t\t\t\t\tin, new OperatorInformation<String>(BasicTypeInfo.STRING_TYPE_INFO), \"testSource\");\n\n\t\t\tExecutionConfig executionConfig = new ExecutionConfig();\n\t\t\texecutionConfig.disableObjectReuse();\n\t\t\tList<String> resultMutableSafe = source.executeOnCollections(null, executionConfig);\n\n\t\t\tin.reset();\n\t\t\texecutionConfig.enableObjectReuse();\n\t\t\tList<String> resultRegular = source.executeOnCollections(null, executionConfig);\n\t\t\tassertEquals(asList(TestIOData.NAMES), resultMutableSafe);\n\t\t\tassertEquals(asList(TestIOData.NAMES), resultRegular);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "signature": "void testDataSourcePlain()", "full_signature": "@Test public void testDataSourcePlain()", "class_method_signature": "GenericDataSourceBaseTest.testDataSourcePlain()", "testcase": true, "constructor": false, "invocations": ["disableObjectReuse", "executeOnCollections", "reset", "enableObjectReuse", "executeOnCollections", "assertEquals", "asList", "assertEquals", "asList", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "GenericDataSourceBase", "superclass": "extends Operator<OUT>", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_NAME = \"<Unnamed Generic Data Source>\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_NAME = \"<Unnamed Generic Data Source>\"", "var_name": "DEFAULT_NAME"}, {"original_string": "protected final UserCodeWrapper<? extends T> formatWrapper;", "modifier": "protected final", "type": "UserCodeWrapper<? extends T>", "declarator": "formatWrapper", "var_name": "formatWrapper"}, {"original_string": "protected String statisticsKey;", "modifier": "protected", "type": "String", "declarator": "statisticsKey", "var_name": "statisticsKey"}, {"original_string": "private SplitDataProperties splitProperties;", "modifier": "private", "type": "SplitDataProperties", "declarator": "splitProperties", "var_name": "splitProperties"}], "methods": [{"identifier": "GenericDataSourceBase", "parameters": "(T format, OperatorInformation<OUT> operatorInfo, String name)", "modifiers": "public", "return": "", "signature": " GenericDataSourceBase(T format, OperatorInformation<OUT> operatorInfo, String name)", "full_signature": "public  GenericDataSourceBase(T format, OperatorInformation<OUT> operatorInfo, String name)", "class_method_signature": "GenericDataSourceBase.GenericDataSourceBase(T format, OperatorInformation<OUT> operatorInfo, String name)", "testcase": false, "constructor": true}, {"identifier": "GenericDataSourceBase", "parameters": "(T format, OperatorInformation<OUT> operatorInfo)", "modifiers": "public", "return": "", "signature": " GenericDataSourceBase(T format, OperatorInformation<OUT> operatorInfo)", "full_signature": "public  GenericDataSourceBase(T format, OperatorInformation<OUT> operatorInfo)", "class_method_signature": "GenericDataSourceBase.GenericDataSourceBase(T format, OperatorInformation<OUT> operatorInfo)", "testcase": false, "constructor": true}, {"identifier": "GenericDataSourceBase", "parameters": "(Class<? extends T> format, OperatorInformation<OUT> operatorInfo, String name)", "modifiers": "public", "return": "", "signature": " GenericDataSourceBase(Class<? extends T> format, OperatorInformation<OUT> operatorInfo, String name)", "full_signature": "public  GenericDataSourceBase(Class<? extends T> format, OperatorInformation<OUT> operatorInfo, String name)", "class_method_signature": "GenericDataSourceBase.GenericDataSourceBase(Class<? extends T> format, OperatorInformation<OUT> operatorInfo, String name)", "testcase": false, "constructor": true}, {"identifier": "GenericDataSourceBase", "parameters": "(Class<? extends T> format, OperatorInformation<OUT> operatorInfo)", "modifiers": "public", "return": "", "signature": " GenericDataSourceBase(Class<? extends T> format, OperatorInformation<OUT> operatorInfo)", "full_signature": "public  GenericDataSourceBase(Class<? extends T> format, OperatorInformation<OUT> operatorInfo)", "class_method_signature": "GenericDataSourceBase.GenericDataSourceBase(Class<? extends T> format, OperatorInformation<OUT> operatorInfo)", "testcase": false, "constructor": true}, {"identifier": "getFormatWrapper", "parameters": "()", "modifiers": "public", "return": "UserCodeWrapper<? extends T>", "signature": "UserCodeWrapper<? extends T> getFormatWrapper()", "full_signature": "public UserCodeWrapper<? extends T> getFormatWrapper()", "class_method_signature": "GenericDataSourceBase.getFormatWrapper()", "testcase": false, "constructor": false}, {"identifier": "getUserCodeWrapper", "parameters": "()", "modifiers": "@Override public", "return": "UserCodeWrapper<? extends T>", "signature": "UserCodeWrapper<? extends T> getUserCodeWrapper()", "full_signature": "@Override public UserCodeWrapper<? extends T> getUserCodeWrapper()", "class_method_signature": "GenericDataSourceBase.getUserCodeWrapper()", "testcase": false, "constructor": false}, {"identifier": "getStatisticsKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStatisticsKey()", "full_signature": "public String getStatisticsKey()", "class_method_signature": "GenericDataSourceBase.getStatisticsKey()", "testcase": false, "constructor": false}, {"identifier": "setStatisticsKey", "parameters": "(String statisticsKey)", "modifiers": "public", "return": "void", "signature": "void setStatisticsKey(String statisticsKey)", "full_signature": "public void setStatisticsKey(String statisticsKey)", "class_method_signature": "GenericDataSourceBase.setStatisticsKey(String statisticsKey)", "testcase": false, "constructor": false}, {"identifier": "setSplitDataProperties", "parameters": "(SplitDataProperties<OUT> splitDataProperties)", "modifiers": "public", "return": "void", "signature": "void setSplitDataProperties(SplitDataProperties<OUT> splitDataProperties)", "full_signature": "public void setSplitDataProperties(SplitDataProperties<OUT> splitDataProperties)", "class_method_signature": "GenericDataSourceBase.setSplitDataProperties(SplitDataProperties<OUT> splitDataProperties)", "testcase": false, "constructor": false}, {"identifier": "getSplitDataProperties", "parameters": "()", "modifiers": "public", "return": "SplitDataProperties<OUT>", "signature": "SplitDataProperties<OUT> getSplitDataProperties()", "full_signature": "public SplitDataProperties<OUT> getSplitDataProperties()", "class_method_signature": "GenericDataSourceBase.getSplitDataProperties()", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(Visitor<Operator<?>> visitor)", "modifiers": "@Override public", "return": "void", "signature": "void accept(Visitor<Operator<?>> visitor)", "full_signature": "@Override public void accept(Visitor<Operator<?>> visitor)", "class_method_signature": "GenericDataSourceBase.accept(Visitor<Operator<?>> visitor)", "testcase": false, "constructor": false}, {"identifier": "executeOnCollections", "parameters": "(RuntimeContext ctx, ExecutionConfig executionConfig)", "modifiers": "protected", "return": "List<OUT>", "signature": "List<OUT> executeOnCollections(RuntimeContext ctx, ExecutionConfig executionConfig)", "full_signature": "protected List<OUT> executeOnCollections(RuntimeContext ctx, ExecutionConfig executionConfig)", "class_method_signature": "GenericDataSourceBase.executeOnCollections(RuntimeContext ctx, ExecutionConfig executionConfig)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "GenericDataSourceBase.toString()", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/api/common/operators/GenericDataSourceBase.java"}, "focal_method": {"identifier": "executeOnCollections", "parameters": "(RuntimeContext ctx, ExecutionConfig executionConfig)", "modifiers": "protected", "return": "List<OUT>", "body": "protected List<OUT> executeOnCollections(RuntimeContext ctx, ExecutionConfig executionConfig) throws Exception {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tInputFormat<OUT, InputSplit> inputFormat = (InputFormat<OUT, InputSplit>) this.formatWrapper.getUserCodeObject();\n\t\tinputFormat.configure(this.parameters);\n\n\t\tif(inputFormat instanceof RichInputFormat){\n\t\t\t((RichInputFormat) inputFormat).setRuntimeContext(ctx);\n\t\t}\n\n\t\tList<OUT> result = new ArrayList<OUT>();\n\t\t\n\t\t// splits\n\t\tInputSplit[] splits = inputFormat.createInputSplits(1);\n\t\tTypeSerializer<OUT> serializer = getOperatorInfo().getOutputType().createSerializer(executionConfig);\n\t\t\n\t\tfor (InputSplit split : splits) {\n\t\t\tinputFormat.open(split);\n\t\t\t\n\t\t\twhile (!inputFormat.reachedEnd()) {\n\t\t\t\tOUT next = inputFormat.nextRecord(serializer.createInstance());\n\t\t\t\tif (next != null) {\n\t\t\t\t\tresult.add(serializer.copy(next));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tinputFormat.close();\n\t\t}\n\t\t\n\t\treturn result;\n\t}", "signature": "List<OUT> executeOnCollections(RuntimeContext ctx, ExecutionConfig executionConfig)", "full_signature": "protected List<OUT> executeOnCollections(RuntimeContext ctx, ExecutionConfig executionConfig)", "class_method_signature": "GenericDataSourceBase.executeOnCollections(RuntimeContext ctx, ExecutionConfig executionConfig)", "testcase": false, "constructor": false, "invocations": ["getUserCodeObject", "configure", "setRuntimeContext", "createInputSplits", "createSerializer", "getOutputType", "getOperatorInfo", "open", "reachedEnd", "nextRecord", "createInstance", "add", "copy", "close"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}