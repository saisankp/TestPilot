{"test_class": {"identifier": "IntegerUnionTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/core-jdbc/src/test/java/org/orbisgis/corejdbc/common/IntegerUnionTest.java"}, "test_case": {"identifier": "testAdd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n        public void testAdd() {\n                IntegerUnion mergeTool = new IntegerUnion(15, 50);\n\n                Assert.assertTrue(mergeTool.add(51));\n                check(mergeTool, new Integer[]{15, 51});\n                Assert.assertTrue(mergeTool.add(14));\n                check(mergeTool, new Integer[]{14, 51});\n                Assert.assertTrue(mergeTool.add(53));\n                check(mergeTool, new Integer[]{14, 51, 53, 53});\n                Assert.assertTrue(mergeTool.add(52));\n                check(mergeTool, new Integer[]{14, 53});\n                Assert.assertFalse(mergeTool.add(14));\n                check(mergeTool, new Integer[]{14, 53});\n                Assert.assertFalse(mergeTool.add(53));\n                check(mergeTool, new Integer[]{14, 53});\n                Assert.assertFalse(mergeTool.add(15));\n                Assert.assertFalse(mergeTool.add(52));\n                check(mergeTool, new Integer[]{14, 53});\n                Assert.assertTrue(mergeTool.add(12));\n                check(mergeTool, new Integer[]{12, 12, 14, 53});\n        }", "signature": "void testAdd()", "full_signature": "@Test public void testAdd()", "class_method_signature": "IntegerUnionTest.testAdd()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "add", "check", "assertTrue", "add", "check", "assertTrue", "add", "check", "assertTrue", "add", "check", "assertFalse", "add", "check", "assertFalse", "add", "check", "assertFalse", "add", "assertFalse", "add", "check", "assertTrue", "add", "check"]}, "focal_class": {"identifier": "IntegerUnion", "superclass": "", "interfaces": "implements NumberUnion<Integer>", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "protected List<Integer> intervals;", "modifier": "protected", "type": "List<Integer>", "declarator": "intervals", "var_name": "intervals"}], "methods": [{"identifier": "IntegerUnion", "parameters": "(int value)", "modifiers": "public", "return": "", "signature": " IntegerUnion(int value)", "full_signature": "public  IntegerUnion(int value)", "class_method_signature": "IntegerUnion.IntegerUnion(int value)", "testcase": false, "constructor": true}, {"identifier": "IntegerUnion", "parameters": "(int valueBegin, int valueEnd)", "modifiers": "public", "return": "", "signature": " IntegerUnion(int valueBegin, int valueEnd)", "full_signature": "public  IntegerUnion(int valueBegin, int valueEnd)", "class_method_signature": "IntegerUnion.IntegerUnion(int valueBegin, int valueEnd)", "testcase": false, "constructor": true}, {"identifier": "IntegerUnion", "parameters": "()", "modifiers": "public", "return": "", "signature": " IntegerUnion()", "full_signature": "public  IntegerUnion()", "class_method_signature": "IntegerUnion.IntegerUnion()", "testcase": false, "constructor": true}, {"identifier": "IntegerUnion", "parameters": "(int[] externalArray)", "modifiers": "public", "return": "", "signature": " IntegerUnion(int[] externalArray)", "full_signature": "public  IntegerUnion(int[] externalArray)", "class_method_signature": "IntegerUnion.IntegerUnion(int[] externalArray)", "testcase": false, "constructor": true}, {"identifier": "IntegerUnion", "parameters": "(IntegerUnion externalSet)", "modifiers": "public", "return": "", "signature": " IntegerUnion(IntegerUnion externalSet)", "full_signature": "public  IntegerUnion(IntegerUnion externalSet)", "class_method_signature": "IntegerUnion.IntegerUnion(IntegerUnion externalSet)", "testcase": false, "constructor": true}, {"identifier": "IntegerUnion", "parameters": "(Collection<Integer> externalCollection)", "modifiers": "public", "return": "", "signature": " IntegerUnion(Collection<Integer> externalCollection)", "full_signature": "public  IntegerUnion(Collection<Integer> externalCollection)", "class_method_signature": "IntegerUnion.IntegerUnion(Collection<Integer> externalCollection)", "testcase": false, "constructor": true}, {"identifier": "IntegerUnion", "parameters": "(Iterator<Integer> valueIterator)", "modifiers": "public", "return": "", "signature": " IntegerUnion(Iterator<Integer> valueIterator)", "full_signature": "public  IntegerUnion(Iterator<Integer> valueIterator)", "class_method_signature": "IntegerUnion.IntegerUnion(Iterator<Integer> valueIterator)", "testcase": false, "constructor": true}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "IntegerUnion.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "IntegerUnion.hashCode()", "testcase": false, "constructor": false}, {"identifier": "copyExternalIntegerUnion", "parameters": "(IntegerUnion externalSet)", "modifiers": "private", "return": "void", "signature": "void copyExternalIntegerUnion(IntegerUnion externalSet)", "full_signature": "private void copyExternalIntegerUnion(IntegerUnion externalSet)", "class_method_signature": "IntegerUnion.copyExternalIntegerUnion(IntegerUnion externalSet)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "IntegerUnion.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "IntegerUnion.toString()", "testcase": false, "constructor": false}, {"identifier": "internalRemove", "parameters": "(int value)", "modifiers": "protected final", "return": "boolean", "signature": "boolean internalRemove(int value)", "full_signature": "protected final boolean internalRemove(int value)", "class_method_signature": "IntegerUnion.internalRemove(int value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(Object o)", "full_signature": "@Override public boolean remove(Object o)", "class_method_signature": "IntegerUnion.remove(Object o)", "testcase": false, "constructor": false}, {"identifier": "internalAdd", "parameters": "(int value)", "modifiers": "protected final", "return": "boolean", "signature": "boolean internalAdd(int value)", "full_signature": "protected final boolean internalAdd(int value)", "class_method_signature": "IntegerUnion.internalAdd(int value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Integer value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(Integer value)", "full_signature": "@Override public boolean add(Integer value)", "class_method_signature": "IntegerUnion.add(Integer value)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Integer>", "signature": "Iterator<Integer> iterator()", "full_signature": "@Override public Iterator<Integer> iterator()", "class_method_signature": "IntegerUnion.iterator()", "testcase": false, "constructor": false}, {"identifier": "getValueRanges", "parameters": "()", "modifiers": "public", "return": "List<Integer>", "signature": "List<Integer> getValueRanges()", "full_signature": "public List<Integer> getValueRanges()", "class_method_signature": "IntegerUnion.getValueRanges()", "testcase": false, "constructor": false}, {"identifier": "comparator", "parameters": "()", "modifiers": "@Override public", "return": "Comparator<? super Integer>", "signature": "Comparator<? super Integer> comparator()", "full_signature": "@Override public Comparator<? super Integer> comparator()", "class_method_signature": "IntegerUnion.comparator()", "testcase": false, "constructor": false}, {"identifier": "subSet", "parameters": "(Integer e, Integer e1)", "modifiers": "@Override public", "return": "SortedSet<Integer>", "signature": "SortedSet<Integer> subSet(Integer e, Integer e1)", "full_signature": "@Override public SortedSet<Integer> subSet(Integer e, Integer e1)", "class_method_signature": "IntegerUnion.subSet(Integer e, Integer e1)", "testcase": false, "constructor": false}, {"identifier": "headSet", "parameters": "(Integer e)", "modifiers": "@Override public", "return": "SortedSet<Integer>", "signature": "SortedSet<Integer> headSet(Integer e)", "full_signature": "@Override public SortedSet<Integer> headSet(Integer e)", "class_method_signature": "IntegerUnion.headSet(Integer e)", "testcase": false, "constructor": false}, {"identifier": "tailSet", "parameters": "(Integer e)", "modifiers": "@Override public", "return": "SortedSet<Integer>", "signature": "SortedSet<Integer> tailSet(Integer e)", "full_signature": "@Override public SortedSet<Integer> tailSet(Integer e)", "class_method_signature": "IntegerUnion.tailSet(Integer e)", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer first()", "full_signature": "@Override public Integer first()", "class_method_signature": "IntegerUnion.first()", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer last()", "full_signature": "@Override public Integer last()", "class_method_signature": "IntegerUnion.last()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "IntegerUnion.size()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Object o)", "full_signature": "@Override public boolean contains(Object o)", "class_method_signature": "IntegerUnion.contains(Object o)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] toArray()", "full_signature": "@Override public Object[] toArray()", "class_method_signature": "IntegerUnion.toArray()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(T[] ts)", "modifiers": "@Override public", "return": "T[]", "signature": "T[] toArray(T[] ts)", "full_signature": "@Override public T[] toArray(T[] ts)", "class_method_signature": "IntegerUnion.toArray(T[] ts)", "testcase": false, "constructor": false}, {"identifier": "containsAll", "parameters": "(Collection<?> clctn)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsAll(Collection<?> clctn)", "full_signature": "@Override public boolean containsAll(Collection<?> clctn)", "class_method_signature": "IntegerUnion.containsAll(Collection<?> clctn)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Collection<? extends Integer> clctn)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAll(Collection<? extends Integer> clctn)", "full_signature": "@Override public boolean addAll(Collection<? extends Integer> clctn)", "class_method_signature": "IntegerUnion.addAll(Collection<? extends Integer> clctn)", "testcase": false, "constructor": false}, {"identifier": "retainAll", "parameters": "(Collection<?> clctn)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean retainAll(Collection<?> clctn)", "full_signature": "@Override public boolean retainAll(Collection<?> clctn)", "class_method_signature": "IntegerUnion.retainAll(Collection<?> clctn)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(Collection<?> clctn)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAll(Collection<?> clctn)", "full_signature": "@Override public boolean removeAll(Collection<?> clctn)", "class_method_signature": "IntegerUnion.removeAll(Collection<?> clctn)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "IntegerUnion.clear()", "testcase": false, "constructor": false}, {"identifier": "listIterator", "parameters": "()", "modifiers": "public", "return": "ListIterator<Integer>", "signature": "ListIterator<Integer> listIterator()", "full_signature": "public ListIterator<Integer> listIterator()", "class_method_signature": "IntegerUnion.listIterator()", "testcase": false, "constructor": false}, {"identifier": "listIterator", "parameters": "(int from)", "modifiers": "public", "return": "ListIterator<Integer>", "signature": "ListIterator<Integer> listIterator(int from)", "full_signature": "public ListIterator<Integer> listIterator(int from)", "class_method_signature": "IntegerUnion.listIterator(int from)", "testcase": false, "constructor": false}], "file": "bundles/core-jdbc/src/main/java/org/orbisgis/corejdbc/common/IntegerUnion.java"}, "focal_method": {"identifier": "add", "parameters": "(Integer value)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n        public boolean add(Integer value) {\n                return internalAdd(value);\n        }", "signature": "boolean add(Integer value)", "full_signature": "@Override public boolean add(Integer value)", "class_method_signature": "IntegerUnion.add(Integer value)", "testcase": false, "constructor": false, "invocations": ["internalAdd"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}