{"test_class": {"identifier": "FEELParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/parser/feel11/FEELParserTest.java"}, "test_case": {"identifier": "testExternalFunctionDefinition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExternalFunctionDefinition() {\n        String inputExpression = \"{ trigonometric cosine : function( angle ) external {\"\n                       + \"    java : {\"\n                       + \"        class : \\\"java.lang.Math\\\",\"\n                       + \"        method signature : \\\"cos(double)\\\"\"\n                       + \"    }\"\n                       + \"}}\";\n        BaseNode ctxbase = parse( inputExpression );\n\n        assertThat( ctxbase, is( instanceOf( ContextNode.class ) ) );\n        assertThat( ctxbase.getText(), is( inputExpression ) );\n\n        ContextNode ctx = (ContextNode) ctxbase;\n        assertThat( ctx.getEntries().size(), is( 1 ) );\n\n        ContextEntryNode entry = ctx.getEntries().get( 0 );\n        assertThat( entry.getName(), is( instanceOf( NameDefNode.class ) ) );\n        NameDefNode name = (NameDefNode) entry.getName();\n        assertThat( name.getText(), is(\"trigonometric cosine\") );\n        assertThat( entry.getValue(), is( instanceOf( FunctionDefNode.class ) ) );\n        assertThat( entry.getValue().getText(), is(\"function( angle ) external {\"\n                                                 + \"    java : {\"\n                                                 + \"        class : \\\"java.lang.Math\\\",\"\n                                                 + \"        method signature : \\\"cos(double)\\\"\"\n                                                 + \"    }\"\n                                                 + \"}\" ) );\n\n        FunctionDefNode cos = (FunctionDefNode) entry.getValue();\n        assertThat( cos.getFormalParameters().size(), is( 1 ) );\n        assertThat( cos.getFormalParameters().get( 0 ).getText(), is( \"angle\" ) );\n        assertThat( cos.isExternal(), is( true ) );\n        assertThat( cos.getBody(), is( instanceOf( ContextNode.class ) ) );\n\n        ContextNode body = (ContextNode) cos.getBody();\n        assertThat( body.getEntries().size(), is( 1 ) );\n        ContextEntryNode java = body.getEntries().get( 0 );\n        assertThat( java.getName().getText(), is( \"java\" ) );\n        assertThat( java.getValue(), is( instanceOf( ContextNode.class ) ) );\n\n        ContextNode def = (ContextNode) java.getValue();\n        assertThat( def.getEntries().size(), is( 2 ) );\n        assertThat( def.getEntries().get( 0 ).getName().getText(), is( \"class\" ) );\n        assertThat( def.getEntries().get( 0 ).getValue(), is( instanceOf( StringNode.class ) ) );\n        assertThat( def.getEntries().get( 0 ).getValue().getText(), is( \"\\\"java.lang.Math\\\"\" ) );\n        assertThat( def.getEntries().get( 1 ).getName().getText(), is( \"method signature\" ) );\n        assertThat( def.getEntries().get( 1 ).getValue(), is( instanceOf( StringNode.class ) ) );\n        assertThat( def.getEntries().get( 1 ).getValue().getText(), is( \"\\\"cos(double)\\\"\" ) );\n    }", "signature": "void testExternalFunctionDefinition()", "full_signature": "@Test public void testExternalFunctionDefinition()", "class_method_signature": "FEELParserTest.testExternalFunctionDefinition()", "testcase": true, "constructor": false, "invocations": ["parse", "assertThat", "is", "instanceOf", "assertThat", "getText", "is", "assertThat", "size", "getEntries", "is", "get", "getEntries", "assertThat", "getName", "is", "instanceOf", "getName", "assertThat", "getText", "is", "assertThat", "getValue", "is", "instanceOf", "assertThat", "getText", "getValue", "is", "getValue", "assertThat", "size", "getFormalParameters", "is", "assertThat", "getText", "get", "getFormalParameters", "is", "assertThat", "isExternal", "is", "assertThat", "getBody", "is", "instanceOf", "getBody", "assertThat", "size", "getEntries", "is", "get", "getEntries", "assertThat", "getText", "getName", "is", "assertThat", "getValue", "is", "instanceOf", "getValue", "assertThat", "size", "getEntries", "is", "assertThat", "getText", "getName", "get", "getEntries", "is", "assertThat", "getValue", "get", "getEntries", "is", "instanceOf", "assertThat", "getText", "getValue", "get", "getEntries", "is", "assertThat", "getText", "getName", "get", "getEntries", "is", "assertThat", "getValue", "get", "getEntries", "is", "instanceOf", "assertThat", "getText", "getValue", "get", "getEntries", "is"]}, "focal_class": {"identifier": "FEELParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<String> REUSABLE_KEYWORDS = Arrays.asList(\n            \"for\", \"return\", \"if\", \"then\", \"else\", \"some\", \"every\", \"satisfies\", \"instance\", \"of\",\n            \"function\", \"external\", \"or\", \"and\", \"between\", \"not\", \"null\", \"true\", \"false\"\n    );", "modifier": "private static final", "type": "List<String>", "declarator": "REUSABLE_KEYWORDS = Arrays.asList(\n            \"for\", \"return\", \"if\", \"then\", \"else\", \"some\", \"every\", \"satisfies\", \"instance\", \"of\",\n            \"function\", \"external\", \"or\", \"and\", \"between\", \"not\", \"null\", \"true\", \"false\"\n    )", "var_name": "REUSABLE_KEYWORDS"}, {"original_string": "private static final Pattern DIGITS_PATTERN = Pattern.compile( \"[0-9]*\" );", "modifier": "private static final", "type": "Pattern", "declarator": "DIGITS_PATTERN = Pattern.compile( \"[0-9]*\" )", "var_name": "DIGITS_PATTERN"}], "methods": [{"identifier": "parse", "parameters": "(FEELEventListenersManager eventsManager, String source, Map<String, Type> inputVariableTypes, Map<String, Object> inputVariables, Collection<FEELFunction> additionalFunctions, List<FEELProfile> profiles, FEELTypeRegistry typeRegistry)", "modifiers": "public static", "return": "FEEL_1_1Parser", "signature": "FEEL_1_1Parser parse(FEELEventListenersManager eventsManager, String source, Map<String, Type> inputVariableTypes, Map<String, Object> inputVariables, Collection<FEELFunction> additionalFunctions, List<FEELProfile> profiles, FEELTypeRegistry typeRegistry)", "full_signature": "public static FEEL_1_1Parser parse(FEELEventListenersManager eventsManager, String source, Map<String, Type> inputVariableTypes, Map<String, Object> inputVariables, Collection<FEELFunction> additionalFunctions, List<FEELProfile> profiles, FEELTypeRegistry typeRegistry)", "class_method_signature": "FEELParser.parse(FEELEventListenersManager eventsManager, String source, Map<String, Type> inputVariableTypes, Map<String, Object> inputVariables, Collection<FEELFunction> additionalFunctions, List<FEELProfile> profiles, FEELTypeRegistry typeRegistry)", "testcase": false, "constructor": false}, {"identifier": "isVariableNamePartValid", "parameters": "( String namePart, Scope scope )", "modifiers": "public static", "return": "boolean", "signature": "boolean isVariableNamePartValid( String namePart, Scope scope )", "full_signature": "public static boolean isVariableNamePartValid( String namePart, Scope scope )", "class_method_signature": "FEELParser.isVariableNamePartValid( String namePart, Scope scope )", "testcase": false, "constructor": false}, {"identifier": "isVariableNameValid", "parameters": "( String source )", "modifiers": "public static", "return": "boolean", "signature": "boolean isVariableNameValid( String source )", "full_signature": "public static boolean isVariableNameValid( String source )", "class_method_signature": "FEELParser.isVariableNameValid( String source )", "testcase": false, "constructor": false}, {"identifier": "checkVariableName", "parameters": "( String source )", "modifiers": "public static", "return": "List<FEELEvent>", "signature": "List<FEELEvent> checkVariableName( String source )", "full_signature": "public static List<FEELEvent> checkVariableName( String source )", "class_method_signature": "FEELParser.checkVariableName( String source )", "testcase": false, "constructor": false}, {"identifier": "defineVariables", "parameters": "(Map<String, Type> inputVariableTypes, Map<String, Object> inputVariables, FEEL_1_1Parser parser)", "modifiers": "public static", "return": "void", "signature": "void defineVariables(Map<String, Type> inputVariableTypes, Map<String, Object> inputVariables, FEEL_1_1Parser parser)", "full_signature": "public static void defineVariables(Map<String, Type> inputVariableTypes, Map<String, Object> inputVariables, FEEL_1_1Parser parser)", "class_method_signature": "FEELParser.defineVariables(Map<String, Type> inputVariableTypes, Map<String, Object> inputVariables, FEEL_1_1Parser parser)", "testcase": false, "constructor": false}, {"identifier": "toList", "parameters": "(IntervalSet intervals, Vocabulary vocabulary)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> toList(IntervalSet intervals, Vocabulary vocabulary)", "full_signature": "private static List<String> toList(IntervalSet intervals, Vocabulary vocabulary)", "class_method_signature": "FEELParser.toList(IntervalSet intervals, Vocabulary vocabulary)", "testcase": false, "constructor": false}, {"identifier": "elementName", "parameters": "(Vocabulary vocabulary, int a)", "modifiers": "private static", "return": "String", "signature": "String elementName(Vocabulary vocabulary, int a)", "full_signature": "private static String elementName(Vocabulary vocabulary, int a)", "class_method_signature": "FEELParser.elementName(Vocabulary vocabulary, int a)", "testcase": false, "constructor": false}, {"identifier": "generateInvalidVariableError", "parameters": "(Object offendingSymbol, int line, int charPositionInLine, RecognitionException e, CommonToken token)", "modifiers": "private static", "return": "SyntaxErrorEvent", "signature": "SyntaxErrorEvent generateInvalidVariableError(Object offendingSymbol, int line, int charPositionInLine, RecognitionException e, CommonToken token)", "full_signature": "private static SyntaxErrorEvent generateInvalidVariableError(Object offendingSymbol, int line, int charPositionInLine, RecognitionException e, CommonToken token)", "class_method_signature": "FEELParser.generateInvalidVariableError(Object offendingSymbol, int line, int charPositionInLine, RecognitionException e, CommonToken token)", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/parser/feel11/FEELParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(FEELEventListenersManager eventsManager, String source, Map<String, Type> inputVariableTypes, Map<String, Object> inputVariables, Collection<FEELFunction> additionalFunctions, List<FEELProfile> profiles, FEELTypeRegistry typeRegistry)", "modifiers": "public static", "return": "FEEL_1_1Parser", "body": "public static FEEL_1_1Parser parse(FEELEventListenersManager eventsManager, String source, Map<String, Type> inputVariableTypes, Map<String, Object> inputVariables, Collection<FEELFunction> additionalFunctions, List<FEELProfile> profiles, FEELTypeRegistry typeRegistry) {\n        CharStream input = CharStreams.fromString(source);\n        FEEL_1_1Lexer lexer = new FEEL_1_1Lexer( input );\n        CommonTokenStream tokens = new CommonTokenStream( lexer );\n        FEEL_1_1Parser parser = new FEEL_1_1Parser( tokens );\n\n        ParserHelper parserHelper = new ParserHelper(eventsManager);\n        additionalFunctions.forEach(f -> parserHelper.getSymbolTable().getBuiltInScope().define(f.getSymbol()));\n        parser.setHelper(parserHelper);\n        parser.setErrorHandler( new FEELErrorHandler() );\n        parser.removeErrorListeners(); // removes the error listener that prints to the console\n        parser.addErrorListener( new FEELParserErrorListener( eventsManager ) );\n\n        // pre-loads the parser with symbols\n        defineVariables( inputVariableTypes, inputVariables, parser );\n        \n        if (typeRegistry != null) {\n            parserHelper.setTypeRegistry(typeRegistry);\n        }\n\n        return parser;\n    }", "signature": "FEEL_1_1Parser parse(FEELEventListenersManager eventsManager, String source, Map<String, Type> inputVariableTypes, Map<String, Object> inputVariables, Collection<FEELFunction> additionalFunctions, List<FEELProfile> profiles, FEELTypeRegistry typeRegistry)", "full_signature": "public static FEEL_1_1Parser parse(FEELEventListenersManager eventsManager, String source, Map<String, Type> inputVariableTypes, Map<String, Object> inputVariables, Collection<FEELFunction> additionalFunctions, List<FEELProfile> profiles, FEELTypeRegistry typeRegistry)", "class_method_signature": "FEELParser.parse(FEELEventListenersManager eventsManager, String source, Map<String, Type> inputVariableTypes, Map<String, Object> inputVariables, Collection<FEELFunction> additionalFunctions, List<FEELProfile> profiles, FEELTypeRegistry typeRegistry)", "testcase": false, "constructor": false, "invocations": ["fromString", "forEach", "define", "getBuiltInScope", "getSymbolTable", "getSymbol", "setHelper", "setErrorHandler", "removeErrorListeners", "addErrorListener", "defineVariables", "setTypeRegistry"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}