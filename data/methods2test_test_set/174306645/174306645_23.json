{"test_class": {"identifier": "VertxJobsServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String CALLBACK_URL = \"http://localhost\";", "modifier": "public static final", "type": "String", "declarator": "CALLBACK_URL = \"http://localhost\"", "var_name": "CALLBACK_URL"}, {"original_string": "public static final String JOB_SERVICE_URL = \"http://localhost:8085\";", "modifier": "public static final", "type": "String", "declarator": "JOB_SERVICE_URL = \"http://localhost:8085\"", "var_name": "JOB_SERVICE_URL"}, {"original_string": "private VertxJobsService tested;", "modifier": "private", "type": "VertxJobsService", "declarator": "tested", "var_name": "tested"}, {"original_string": "private ExecutorService executor = Executors.newSingleThreadExecutor();", "modifier": "private", "type": "ExecutorService", "declarator": "executor = Executors.newSingleThreadExecutor()", "var_name": "executor"}, {"original_string": "@Mock\n    private Vertx vertx;", "modifier": "@Mock\n    private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "@Mock\n    private WebClient webClient;", "modifier": "@Mock\n    private", "type": "WebClient", "declarator": "webClient", "var_name": "webClient"}, {"original_string": "@Mock\n    private Instance instance;", "modifier": "@Mock\n    private", "type": "Instance", "declarator": "instance", "var_name": "instance"}], "file": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java"}, "test_case": {"identifier": "testInitialize", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testInitialize() {\n        reset(instance);\n        when(instance.isResolvable()).thenReturn(false);\n        tested = new VertxJobsService(JOB_SERVICE_URL, CALLBACK_URL, vertx, instance);\n        tested.initialize();\n        verify(instance, never()).get();\n    }", "signature": "void testInitialize()", "full_signature": "@Test void testInitialize()", "class_method_signature": "VertxJobsServiceTest.testInitialize()", "testcase": true, "constructor": false, "invocations": ["reset", "thenReturn", "when", "isResolvable", "initialize", "get", "verify", "never"]}, "focal_class": {"identifier": "VertxJobsService", "superclass": "extends RestJobsService", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(VertxJobsService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(VertxJobsService.class)", "var_name": "LOGGER"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private Instance<WebClient> providedWebClient;", "modifier": "private", "type": "Instance<WebClient>", "declarator": "providedWebClient", "var_name": "providedWebClient"}, {"original_string": "private WebClient client;", "modifier": "private", "type": "WebClient", "declarator": "client", "var_name": "client"}], "methods": [{"identifier": "VertxJobsService", "parameters": "(@ConfigProperty(name = \"kogito.jobs-service.url\") String jobServiceUrl,\n                            @ConfigProperty(name = \"kogito.service.url\") String callbackEndpoint,\n                            Vertx vertx,\n                            Instance<WebClient> providedWebClient)", "modifiers": "@Inject public", "return": "", "signature": " VertxJobsService(@ConfigProperty(name = \"kogito.jobs-service.url\") String jobServiceUrl,\n                            @ConfigProperty(name = \"kogito.service.url\") String callbackEndpoint,\n                            Vertx vertx,\n                            Instance<WebClient> providedWebClient)", "full_signature": "@Inject public  VertxJobsService(@ConfigProperty(name = \"kogito.jobs-service.url\") String jobServiceUrl,\n                            @ConfigProperty(name = \"kogito.service.url\") String callbackEndpoint,\n                            Vertx vertx,\n                            Instance<WebClient> providedWebClient)", "class_method_signature": "VertxJobsService.VertxJobsService(@ConfigProperty(name = \"kogito.jobs-service.url\") String jobServiceUrl,\n                            @ConfigProperty(name = \"kogito.service.url\") String callbackEndpoint,\n                            Vertx vertx,\n                            Instance<WebClient> providedWebClient)", "testcase": false, "constructor": true}, {"identifier": "VertxJobsService", "parameters": "()", "modifiers": "", "return": "", "signature": " VertxJobsService()", "full_signature": "  VertxJobsService()", "class_method_signature": "VertxJobsService.VertxJobsService()", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "@PostConstruct", "return": "void", "signature": "void initialize()", "full_signature": "@PostConstruct void initialize()", "class_method_signature": "VertxJobsService.initialize()", "testcase": false, "constructor": false}, {"identifier": "scheduleProcessJob", "parameters": "(ProcessJobDescription description)", "modifiers": "@Override public", "return": "String", "signature": "String scheduleProcessJob(ProcessJobDescription description)", "full_signature": "@Override public String scheduleProcessJob(ProcessJobDescription description)", "class_method_signature": "VertxJobsService.scheduleProcessJob(ProcessJobDescription description)", "testcase": false, "constructor": false}, {"identifier": "scheduleProcessInstanceJob", "parameters": "(ProcessInstanceJobDescription description)", "modifiers": "@Override public", "return": "String", "signature": "String scheduleProcessInstanceJob(ProcessInstanceJobDescription description)", "full_signature": "@Override public String scheduleProcessInstanceJob(ProcessInstanceJobDescription description)", "class_method_signature": "VertxJobsService.scheduleProcessInstanceJob(ProcessInstanceJobDescription description)", "testcase": false, "constructor": false}, {"identifier": "cancelJob", "parameters": "(String id)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean cancelJob(String id)", "full_signature": "@Override public boolean cancelJob(String id)", "class_method_signature": "VertxJobsService.cancelJob(String id)", "testcase": false, "constructor": false}, {"identifier": "getScheduledTime", "parameters": "(String id)", "modifiers": "@Override public", "return": "ZonedDateTime", "signature": "ZonedDateTime getScheduledTime(String id)", "full_signature": "@Override public ZonedDateTime getScheduledTime(String id)", "class_method_signature": "VertxJobsService.getScheduledTime(String id)", "testcase": false, "constructor": false}], "file": "addons/jobs/jobs-management-quarkus-addon/src/main/java/org/kie/kogito/jobs/management/quarkus/VertxJobsService.java"}, "focal_method": {"identifier": "initialize", "parameters": "()", "modifiers": "@PostConstruct", "return": "void", "body": "@PostConstruct\n    void initialize() {\n        DatabindCodec.mapper().disable(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE);\n        DatabindCodec.mapper().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);             \n        DatabindCodec.mapper().registerModule(new JavaTimeModule());\n        DatabindCodec.mapper().findAndRegisterModules();\n        \n        DatabindCodec.prettyMapper().registerModule(new JavaTimeModule());\n        DatabindCodec.prettyMapper().findAndRegisterModules();\n        DatabindCodec.prettyMapper().disable(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE);\n        DatabindCodec.prettyMapper().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n\n        if (providedWebClient.isResolvable()) {\n            this.client = providedWebClient.get();\n            LOGGER.debug(\"Using provided web client instance\");\n        } else {\n            final URI jobServiceURL = getJobsServiceUri();\n            this.client = WebClient.create(vertx,\n                                           new WebClientOptions()\n                                                   .setDefaultHost(jobServiceURL.getHost())\n                                                   .setDefaultPort(jobServiceURL.getPort()));\n            LOGGER.debug(\"Creating new instance of web client for host {} and port {}\", jobServiceURL.getHost(), jobServiceURL.getPort());\n        }\n    }", "signature": "void initialize()", "full_signature": "@PostConstruct void initialize()", "class_method_signature": "VertxJobsService.initialize()", "testcase": false, "constructor": false, "invocations": ["disable", "mapper", "disable", "mapper", "registerModule", "mapper", "findAndRegisterModules", "mapper", "registerModule", "prettyMapper", "findAndRegisterModules", "prettyMapper", "disable", "prettyMapper", "disable", "prettyMapper", "isResolvable", "get", "debug", "getJobsServiceUri", "create", "setDefaultPort", "setDefaultHost", "getHost", "getPort", "debug", "getHost", "getPort"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}