{"test_class": {"identifier": "TestBasicChannelSemantics", "superclass": "extends AbstractBasicChannelSemanticsTest", "interfaces": "", "fields": [], "file": "flume-ng-core/src/test/java/org/apache/flume/channel/TestBasicChannelSemantics.java"}, "test_case": {"identifier": "testCommit2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCommit2() throws Exception {\n    final Transaction transaction = channel.getTransaction();\n\n    transaction.begin();\n    transaction.rollback();\n\n    testIllegalState(new Runnable() {\n        @Override\n        public void run() {\n          transaction.commit();\n        }\n      });\n\n    transaction.close();\n\n    testIllegalState(new Runnable() {\n        @Override\n        public void run() {\n          transaction.commit();\n        }\n      });\n  }", "signature": "void testCommit2()", "full_signature": "@Test public void testCommit2()", "class_method_signature": "TestBasicChannelSemantics.testCommit2()", "testcase": true, "constructor": false, "invocations": ["getTransaction", "begin", "rollback", "testIllegalState", "commit", "close", "testIllegalState", "commit"]}, "focal_class": {"identifier": "BasicChannelSemantics", "superclass": "extends AbstractChannel", "interfaces": "", "fields": [{"original_string": "private ThreadLocal<BasicTransactionSemantics> currentTransaction\n      = new ThreadLocal<BasicTransactionSemantics>();", "modifier": "private", "type": "ThreadLocal<BasicTransactionSemantics>", "declarator": "currentTransaction\n      = new ThreadLocal<BasicTransactionSemantics>()", "var_name": "currentTransaction"}, {"original_string": "private boolean initialized = false;", "modifier": "private", "type": "boolean", "declarator": "initialized = false", "var_name": "initialized"}], "methods": [{"identifier": "initialize", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void initialize()", "full_signature": "protected void initialize()", "class_method_signature": "BasicChannelSemantics.initialize()", "testcase": false, "constructor": false}, {"identifier": "createTransaction", "parameters": "()", "modifiers": "protected abstract", "return": "BasicTransactionSemantics", "signature": "BasicTransactionSemantics createTransaction()", "full_signature": "protected abstract BasicTransactionSemantics createTransaction()", "class_method_signature": "BasicChannelSemantics.createTransaction()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Event event)", "modifiers": "@Override public", "return": "void", "signature": "void put(Event event)", "full_signature": "@Override public void put(Event event)", "class_method_signature": "BasicChannelSemantics.put(Event event)", "testcase": false, "constructor": false}, {"identifier": "take", "parameters": "()", "modifiers": "@Override public", "return": "Event", "signature": "Event take()", "full_signature": "@Override public Event take()", "class_method_signature": "BasicChannelSemantics.take()", "testcase": false, "constructor": false}, {"identifier": "getTransaction", "parameters": "()", "modifiers": "@Override public", "return": "Transaction", "signature": "Transaction getTransaction()", "full_signature": "@Override public Transaction getTransaction()", "class_method_signature": "BasicChannelSemantics.getTransaction()", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/channel/BasicChannelSemantics.java"}, "focal_method": {"identifier": "getTransaction", "parameters": "()", "modifiers": "@Override public", "return": "Transaction", "body": "@Override\n  public Transaction getTransaction() {\n\n    if (!initialized) {\n      synchronized (this) {\n        if (!initialized) {\n          initialize();\n          initialized = true;\n        }\n      }\n    }\n\n    BasicTransactionSemantics transaction = currentTransaction.get();\n    if (transaction == null || transaction.getState().equals(\n            BasicTransactionSemantics.State.CLOSED)) {\n      transaction = createTransaction();\n      currentTransaction.set(transaction);\n    }\n    return transaction;\n  }", "signature": "Transaction getTransaction()", "full_signature": "@Override public Transaction getTransaction()", "class_method_signature": "BasicChannelSemantics.getTransaction()", "testcase": false, "constructor": false, "invocations": ["initialize", "get", "equals", "getState", "createTransaction", "set"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}