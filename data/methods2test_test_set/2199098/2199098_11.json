{"test_class": {"identifier": "DefaultReferenceEntityReferenceResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EntityReferenceResolver<EntityReference> resolver;", "modifier": "private", "type": "EntityReferenceResolver<EntityReference>", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private ModelConfiguration mockModelConfiguration;", "modifier": "private", "type": "ModelConfiguration", "declarator": "mockModelConfiguration", "var_name": "mockModelConfiguration"}, {"original_string": "private Mockery mockery = new Mockery();", "modifier": "private", "type": "Mockery", "declarator": "mockery = new Mockery()", "var_name": "mockery"}], "file": "xwiki-model-backport/tags/xwiki-core-model-backport-1.0/src/test/java/org/xwiki/model/internal/reference/DefaultReferenceEntityReferenceResolverTest.java"}, "test_case": {"identifier": "testResolveDocumentReferenceWhenMissingParents", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResolveDocumentReferenceWhenMissingParents()\n    {\n        EntityReference reference = resolver.resolve(new EntityReference(\"page\", EntityType.DOCUMENT),\n            EntityType.DOCUMENT);\n        Assert.assertEquals(\"defspace\", reference.getParent().getName());\n        Assert.assertEquals(EntityType.SPACE, reference.getParent().getType());\n        Assert.assertEquals(\"defwiki\", reference.getParent().getParent().getName());\n        Assert.assertEquals(EntityType.WIKI, reference.getParent().getParent().getType()); \n    }", "signature": "void testResolveDocumentReferenceWhenMissingParents()", "full_signature": "@Test public void testResolveDocumentReferenceWhenMissingParents()", "class_method_signature": "DefaultReferenceEntityReferenceResolverTest.testResolveDocumentReferenceWhenMissingParents()", "testcase": true, "constructor": false, "invocations": ["resolve", "assertEquals", "getName", "getParent", "assertEquals", "getType", "getParent", "assertEquals", "getName", "getParent", "getParent", "assertEquals", "getType", "getParent", "getParent"]}, "focal_class": {"identifier": "DefaultReferenceEntityReferenceResolver", "superclass": "", "interfaces": "implements EntityReferenceResolver<EntityReference>", "fields": [{"original_string": "@Requirement\n    private ModelConfiguration configuration;", "modifier": "@Requirement\n    private", "type": "ModelConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private Map<EntityType, List<EntityType>> nextAllowedEntityTypes = new HashMap<EntityType, List<EntityType>>() {{\n        put(EntityType.ATTACHMENT, Arrays.asList(EntityType.DOCUMENT));\n        put(EntityType.DOCUMENT, Arrays.asList(EntityType.SPACE));\n        put(EntityType.SPACE, Arrays.asList(EntityType.WIKI, EntityType.SPACE));\n        put(EntityType.WIKI, Collections.<EntityType>emptyList());\n        put(EntityType.OBJECT, Arrays.asList(EntityType.DOCUMENT));\n        put(EntityType.OBJECT_PROPERTY, Arrays.asList(EntityType.OBJECT));        \n    }};", "modifier": "private", "type": "Map<EntityType, List<EntityType>>", "declarator": "nextAllowedEntityTypes = new HashMap<EntityType, List<EntityType>>() {{\n        put(EntityType.ATTACHMENT, Arrays.asList(EntityType.DOCUMENT));\n        put(EntityType.DOCUMENT, Arrays.asList(EntityType.SPACE));\n        put(EntityType.SPACE, Arrays.asList(EntityType.WIKI, EntityType.SPACE));\n        put(EntityType.WIKI, Collections.<EntityType>emptyList());\n        put(EntityType.OBJECT, Arrays.asList(EntityType.DOCUMENT));\n        put(EntityType.OBJECT_PROPERTY, Arrays.asList(EntityType.OBJECT));        \n    }}", "var_name": "nextAllowedEntityTypes"}], "methods": [{"identifier": "resolve", "parameters": "(EntityReference referenceToResolve, EntityType type)", "modifiers": "public", "return": "EntityReference", "signature": "EntityReference resolve(EntityReference referenceToResolve, EntityType type)", "full_signature": "public EntityReference resolve(EntityReference referenceToResolve, EntityType type)", "class_method_signature": "DefaultReferenceEntityReferenceResolver.resolve(EntityReference referenceToResolve, EntityType type)", "testcase": false, "constructor": false}, {"identifier": "getDefaultValue", "parameters": "(EntityType type)", "modifiers": "protected", "return": "String", "signature": "String getDefaultValue(EntityType type)", "full_signature": "protected String getDefaultValue(EntityType type)", "class_method_signature": "DefaultReferenceEntityReferenceResolver.getDefaultValue(EntityType type)", "testcase": false, "constructor": false}], "file": "xwiki-model-backport/tags/xwiki-core-model-backport-1.0/src/main/java/org/xwiki/model/internal/reference/DefaultReferenceEntityReferenceResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(EntityReference referenceToResolve, EntityType type)", "modifiers": "public", "return": "EntityReference", "body": "public EntityReference resolve(EntityReference referenceToResolve, EntityType type)\n    {\n        EntityReference normalizedReference;\n\n        // If the passed type is a supertype of the reference to resolve's type then we need to insert a top level\n        // reference.\n        if (type.ordinal() > referenceToResolve.getType().ordinal()) {\n            normalizedReference = new EntityReference(getDefaultValue(type), type, referenceToResolve.clone());\n        } else {\n            normalizedReference = referenceToResolve.clone();\n        }\n\n        // Check all references and parent references which have a NULL name and replace them with default values.\n        // In addition insert references where needed.\n        EntityReference reference = normalizedReference;\n        while (reference != null) {\n            List<EntityType> types = this.nextAllowedEntityTypes.get(reference.getType());\n            if (reference.getParent() != null && !types.isEmpty() && !types.contains(reference.getParent().getType())) {\n                // The parent reference isn't the allowed parent: insert an allowed reference\n                EntityReference newReference = new EntityReference(\n                    getDefaultValue(types.get(0)), types.get(0), reference.getParent());\n                reference.setParent(newReference);\n            } else if (reference.getParent() == null && !types.isEmpty()) {\n                // The top reference isn't the allowed top level reference, add a parent reference\n                EntityReference newReference = new EntityReference(\n                    getDefaultValue(types.get(0)), types.get(0));\n                reference.setParent(newReference);\n            } else if (reference.getParent() != null && types.isEmpty()) {\n                // There's a parent but not of the correct type... it means the reference is invalid\n                throw new InvalidEntityReferenceException(\"Invalid reference [\" + referenceToResolve + \"]\");\n            }\n            reference = reference.getParent();\n        }\n\n        // If the passed type is a subtype of the reference to resolve's type then we extract the reference.\n        if (type.ordinal() < referenceToResolve.getType().ordinal()) {\n            normalizedReference = normalizedReference.extractReference(type);\n        }\n\n        return normalizedReference;\n    }", "signature": "EntityReference resolve(EntityReference referenceToResolve, EntityType type)", "full_signature": "public EntityReference resolve(EntityReference referenceToResolve, EntityType type)", "class_method_signature": "DefaultReferenceEntityReferenceResolver.resolve(EntityReference referenceToResolve, EntityType type)", "testcase": false, "constructor": false, "invocations": ["ordinal", "ordinal", "getType", "getDefaultValue", "clone", "clone", "get", "getType", "getParent", "isEmpty", "contains", "getType", "getParent", "getDefaultValue", "get", "get", "getParent", "setParent", "getParent", "isEmpty", "getDefaultValue", "get", "get", "setParent", "getParent", "isEmpty", "getParent", "ordinal", "ordinal", "getType", "extractReference"]}, "repository": {"repo_id": 2199098, "url": "https://github.com/xwiki-contrib/sandbox", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 8, "size": 14798, "license": "licensed"}}