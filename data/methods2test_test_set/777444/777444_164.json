{"test_class": {"identifier": "ExecHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExecHandler handler;", "modifier": "private", "type": "ExecHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "private ObjectName oName;", "modifier": "private", "type": "ObjectName", "declarator": "oName", "var_name": "oName"}], "file": "agent/core/src/test/java/org/jolokia/handler/ExecHandlerTest.java"}, "test_case": {"identifier": "simple", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void simple() throws MalformedObjectNameException, InstanceNotFoundException, IOException, ReflectionException, MBeanException, AttributeNotFoundException, NotChangedException {\n        JmxExecRequest request = new JmxRequestBuilder(EXEC, oName).\n                operation(\"simple\").\n                build();\n        assertEquals(handler.getType(), EXEC);\n        Object res = handler.handleRequest(getMBeanServer(),request);\n        assertNull(res);\n    }", "signature": "void simple()", "full_signature": "@Test public void simple()", "class_method_signature": "ExecHandlerTest.simple()", "testcase": true, "constructor": false, "invocations": ["build", "operation", "assertEquals", "getType", "handleRequest", "getMBeanServer", "assertNull"]}, "focal_class": {"identifier": "ExecHandler", "superclass": "extends JsonRequestHandler<JmxExecRequest>", "interfaces": "", "fields": [{"original_string": "private Converters converters;", "modifier": "private", "type": "Converters", "declarator": "converters", "var_name": "converters"}], "methods": [{"identifier": "ExecHandler", "parameters": "(Restrictor pRestrictor, Converters pConverters)", "modifiers": "public", "return": "", "signature": " ExecHandler(Restrictor pRestrictor, Converters pConverters)", "full_signature": "public  ExecHandler(Restrictor pRestrictor, Converters pConverters)", "class_method_signature": "ExecHandler.ExecHandler(Restrictor pRestrictor, Converters pConverters)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "RequestType", "signature": "RequestType getType()", "full_signature": "@Override public RequestType getType()", "class_method_signature": "ExecHandler.getType()", "testcase": false, "constructor": false}, {"identifier": "checkForRestriction", "parameters": "(JmxExecRequest pRequest)", "modifiers": "@Override protected", "return": "void", "signature": "void checkForRestriction(JmxExecRequest pRequest)", "full_signature": "@Override protected void checkForRestriction(JmxExecRequest pRequest)", "class_method_signature": "ExecHandler.checkForRestriction(JmxExecRequest pRequest)", "testcase": false, "constructor": false}, {"identifier": "doHandleRequest", "parameters": "(MBeanServerConnection server, JmxExecRequest request)", "modifiers": "@Override public", "return": "Object", "signature": "Object doHandleRequest(MBeanServerConnection server, JmxExecRequest request)", "full_signature": "@Override public Object doHandleRequest(MBeanServerConnection server, JmxExecRequest request)", "class_method_signature": "ExecHandler.doHandleRequest(MBeanServerConnection server, JmxExecRequest request)", "testcase": false, "constructor": false}, {"identifier": "verifyArguments", "parameters": "(JmxExecRequest request, OperationAndParamType pTypes, int pNrParams, List<Object> pArgs)", "modifiers": "private", "return": "void", "signature": "void verifyArguments(JmxExecRequest request, OperationAndParamType pTypes, int pNrParams, List<Object> pArgs)", "full_signature": "private void verifyArguments(JmxExecRequest request, OperationAndParamType pTypes, int pNrParams, List<Object> pArgs)", "class_method_signature": "ExecHandler.verifyArguments(JmxExecRequest request, OperationAndParamType pTypes, int pNrParams, List<Object> pArgs)", "testcase": false, "constructor": false}, {"identifier": "extractOperationTypes", "parameters": "(MBeanServerConnection pServer, JmxExecRequest pRequest)", "modifiers": "private", "return": "OperationAndParamType", "signature": "OperationAndParamType extractOperationTypes(MBeanServerConnection pServer, JmxExecRequest pRequest)", "full_signature": "private OperationAndParamType extractOperationTypes(MBeanServerConnection pServer, JmxExecRequest pRequest)", "class_method_signature": "ExecHandler.extractOperationTypes(MBeanServerConnection pServer, JmxExecRequest pRequest)", "testcase": false, "constructor": false}, {"identifier": "extractMBeanParameterInfos", "parameters": "(MBeanServerConnection pServer, JmxExecRequest pRequest,\n                                                                  String pOperation)", "modifiers": "private", "return": "List<MBeanParameterInfo[]>", "signature": "List<MBeanParameterInfo[]> extractMBeanParameterInfos(MBeanServerConnection pServer, JmxExecRequest pRequest,\n                                                                  String pOperation)", "full_signature": "private List<MBeanParameterInfo[]> extractMBeanParameterInfos(MBeanServerConnection pServer, JmxExecRequest pRequest,\n                                                                  String pOperation)", "class_method_signature": "ExecHandler.extractMBeanParameterInfos(MBeanServerConnection pServer, JmxExecRequest pRequest,\n                                                                  String pOperation)", "testcase": false, "constructor": false}, {"identifier": "getMatchingSignature", "parameters": "(List<String> pTypes, List<MBeanParameterInfo[]> pParamInfos)", "modifiers": "private", "return": "MBeanParameterInfo[]", "signature": "MBeanParameterInfo[] getMatchingSignature(List<String> pTypes, List<MBeanParameterInfo[]> pParamInfos)", "full_signature": "private MBeanParameterInfo[] getMatchingSignature(List<String> pTypes, List<MBeanParameterInfo[]> pParamInfos)", "class_method_signature": "ExecHandler.getMatchingSignature(List<String> pTypes, List<MBeanParameterInfo[]> pParamInfos)", "testcase": false, "constructor": false}, {"identifier": "splitOperation", "parameters": "(String pOperation)", "modifiers": "private", "return": "List<String>", "signature": "List<String> splitOperation(String pOperation)", "full_signature": "private List<String> splitOperation(String pOperation)", "class_method_signature": "ExecHandler.splitOperation(String pOperation)", "testcase": false, "constructor": false}, {"identifier": "getErrorMessageForMissingSignature", "parameters": "(JmxExecRequest pRequest, String pOperation, List<MBeanParameterInfo[]> pParamInfos)", "modifiers": "private", "return": "String", "signature": "String getErrorMessageForMissingSignature(JmxExecRequest pRequest, String pOperation, List<MBeanParameterInfo[]> pParamInfos)", "full_signature": "private String getErrorMessageForMissingSignature(JmxExecRequest pRequest, String pOperation, List<MBeanParameterInfo[]> pParamInfos)", "class_method_signature": "ExecHandler.getErrorMessageForMissingSignature(JmxExecRequest pRequest, String pOperation, List<MBeanParameterInfo[]> pParamInfos)", "testcase": false, "constructor": false}, {"identifier": "signatureToString", "parameters": "(List<MBeanParameterInfo[]> pParamInfos)", "modifiers": "private", "return": "String", "signature": "String signatureToString(List<MBeanParameterInfo[]> pParamInfos)", "full_signature": "private String signatureToString(List<MBeanParameterInfo[]> pParamInfos)", "class_method_signature": "ExecHandler.signatureToString(List<MBeanParameterInfo[]> pParamInfos)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/handler/ExecHandler.java"}, "focal_method": {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "RequestType", "body": "@Override\n    public RequestType getType() {\n        return RequestType.EXEC;\n    }", "signature": "RequestType getType()", "full_signature": "@Override public RequestType getType()", "class_method_signature": "ExecHandler.getType()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}