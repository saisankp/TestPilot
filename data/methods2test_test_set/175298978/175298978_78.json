{"test_class": {"identifier": "JDBCProjectQueriesTest", "superclass": "extends PostgresTestCase", "interfaces": "", "fields": [{"original_string": "private ProjectQueries queries;", "modifier": "private", "type": "ProjectQueries", "declarator": "queries", "var_name": "queries"}], "file": "SmellTracker/src/test/java/fr/inria/sniffer/tracker/analysis/persistence/queries/JDBCProjectQueriesTest.java"}, "test_case": {"identifier": "testIdFromNameQuery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIdFromNameQuery() {\n        List<Map<String, Object>> result;\n        String name = \"projectName\";\n        String anotherProject = \"anotherProject\";\n        String url = \"my/url\";\n\n        result = persistence.query(queries.idFromNameQuery(name));\n        assertTrue(result.isEmpty());\n\n        executeSuccess(queries.projectInsertStatement(name, url));\n\n        // Another project name means no result\n        result = persistence.query(queries.idFromNameQuery(anotherProject));\n        assertTrue(result.isEmpty());\n\n        // We can query our project\n        result = persistence.query(queries.idFromNameQuery(name));\n        assertFalse(result.isEmpty());\n        assertEquals(1, result.get(0).get(\"id\"));\n\n        // We can insert any other project.\n        executeSuccess(queries.projectInsertStatement(anotherProject, null));\n        result = persistence.query(queries.idFromNameQuery(anotherProject));\n        assertFalse(result.isEmpty());\n        assertEquals(2, result.get(0).get(\"id\"));\n    }", "signature": "void testIdFromNameQuery()", "full_signature": "@Test public void testIdFromNameQuery()", "class_method_signature": "JDBCProjectQueriesTest.testIdFromNameQuery()", "testcase": true, "constructor": false, "invocations": ["query", "idFromNameQuery", "assertTrue", "isEmpty", "executeSuccess", "projectInsertStatement", "query", "idFromNameQuery", "assertTrue", "isEmpty", "query", "idFromNameQuery", "assertFalse", "isEmpty", "assertEquals", "get", "get", "executeSuccess", "projectInsertStatement", "query", "idFromNameQuery", "assertFalse", "isEmpty", "assertEquals", "get", "get"]}, "focal_class": {"identifier": "JDBCProjectQueries", "superclass": "", "interfaces": "implements ProjectQueries", "fields": [], "methods": [{"identifier": "projectInsertStatement", "parameters": "(String projectName, String url)", "modifiers": "@Override public", "return": "String", "signature": "String projectInsertStatement(String projectName, String url)", "full_signature": "@Override public String projectInsertStatement(String projectName, String url)", "class_method_signature": "JDBCProjectQueries.projectInsertStatement(String projectName, String url)", "testcase": false, "constructor": false}, {"identifier": "idFromNameQuery", "parameters": "(String name)", "modifiers": "@Override public", "return": "String", "signature": "String idFromNameQuery(String name)", "full_signature": "@Override public String idFromNameQuery(String name)", "class_method_signature": "JDBCProjectQueries.idFromNameQuery(String name)", "testcase": false, "constructor": false}], "file": "SmellTracker/src/main/java/fr/inria/sniffer/tracker/analysis/persistence/queries/JDBCProjectQueries.java"}, "focal_method": {"identifier": "idFromNameQuery", "parameters": "(String name)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String idFromNameQuery(String name) {\n        return \"SELECT id FROM project WHERE name = '\" + name + \"'\";\n    }", "signature": "String idFromNameQuery(String name)", "full_signature": "@Override public String idFromNameQuery(String name)", "class_method_signature": "JDBCProjectQueries.idFromNameQuery(String name)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 175298978, "url": "https://github.com/HabchiSarra/Sniffer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 587, "license": "licensed"}}