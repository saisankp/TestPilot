{"test_class": {"identifier": "IdmNotificationAttachmentControllerTest", "superclass": "extends AbstractReadWriteDtoControllerRestTest<IdmNotificationAttachmentDto>", "interfaces": "", "fields": [{"original_string": "@Autowired private IdmNotificationAttachmentController controller;", "modifier": "@Autowired private", "type": "IdmNotificationAttachmentController", "declarator": "controller", "var_name": "controller"}, {"original_string": "@Autowired private IdmNotificationLogService notificationLogService;", "modifier": "@Autowired private", "type": "IdmNotificationLogService", "declarator": "notificationLogService", "var_name": "notificationLogService"}, {"original_string": "@Autowired private AttachmentManager attachmentManager;", "modifier": "@Autowired private", "type": "AttachmentManager", "declarator": "attachmentManager", "var_name": "attachmentManager"}, {"original_string": "@Autowired private IdmNotificationAttachmentService notificationAttachmentService;", "modifier": "@Autowired private", "type": "IdmNotificationAttachmentService", "declarator": "notificationAttachmentService", "var_name": "notificationAttachmentService"}, {"original_string": "@Autowired private NotificationManager notificationManager;", "modifier": "@Autowired private", "type": "NotificationManager", "declarator": "notificationManager", "var_name": "notificationManager"}, {"original_string": "@Autowired private IdmNotificationTemplateService notificationTemplateService;", "modifier": "@Autowired private", "type": "IdmNotificationTemplateService", "declarator": "notificationTemplateService", "var_name": "notificationTemplateService"}, {"original_string": "@Autowired private IdmNotificationConfigurationService notificationConfigurationService;", "modifier": "@Autowired private", "type": "IdmNotificationConfigurationService", "declarator": "notificationConfigurationService", "var_name": "notificationConfigurationService"}], "file": "Realization/backend/core/core-impl/src/test/java/eu/bcvsolutions/idm/core/notification/rest/impl/IdmNotificationAttachmentControllerTest.java"}, "test_case": {"identifier": "testFindByNotification", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFindByNotification() {\n\t\tIdmNotificationAttachmentDto attachmentOne = createDto();\n\t\tcreateDto(); // other\n\t\t//\n\t\tIdmNotificationAttachmentFilter filter = new IdmNotificationAttachmentFilter();\n\t\tfilter.setNotification(attachmentOne.getNotification());\n\t\tList<IdmNotificationAttachmentDto> attachments = find(filter);\n\t\tAssert.assertEquals(1, attachments.size());\n\t\tAssert.assertTrue(attachments.stream().anyMatch(r -> r.getId().equals(attachmentOne.getId())));\n\t}", "signature": "void testFindByNotification()", "full_signature": "@Test public void testFindByNotification()", "class_method_signature": "IdmNotificationAttachmentControllerTest.testFindByNotification()", "testcase": true, "constructor": false, "invocations": ["createDto", "createDto", "setNotification", "getNotification", "find", "assertEquals", "size", "assertTrue", "anyMatch", "stream", "equals", "getId", "getId"]}, "focal_class": {"identifier": "IdmNotificationAttachmentController", "superclass": "extends AbstractReadWriteDtoController<IdmNotificationAttachmentDto, IdmNotificationAttachmentFilter>", "interfaces": "", "fields": [{"original_string": "protected static final String TAG = \"Notification attachments\";", "modifier": "protected static final", "type": "String", "declarator": "TAG = \"Notification attachments\"", "var_name": "TAG"}, {"original_string": "@Autowired private AttachmentManager attachmentManager;", "modifier": "@Autowired private", "type": "AttachmentManager", "declarator": "attachmentManager", "var_name": "attachmentManager"}], "methods": [{"identifier": "IdmNotificationAttachmentController", "parameters": "(IdmNotificationAttachmentService service)", "modifiers": "@Autowired public", "return": "", "signature": " IdmNotificationAttachmentController(IdmNotificationAttachmentService service)", "full_signature": "@Autowired public  IdmNotificationAttachmentController(IdmNotificationAttachmentService service)", "class_method_signature": "IdmNotificationAttachmentController.IdmNotificationAttachmentController(IdmNotificationAttachmentService service)", "testcase": false, "constructor": true}, {"identifier": "find", "parameters": "(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters, \n\t\t\t@PageableDefault Pageable pageable)", "modifiers": "@Override @ResponseBody @RequestMapping(method = RequestMethod.GET) @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @ApiOperation( value = \"Search notification attachments (/search/quick alias)\", nickname = \"searchNotificationAttachments\", tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public", "return": "Resources<?>", "signature": "Resources<?> find(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters, \n\t\t\t@PageableDefault Pageable pageable)", "full_signature": "@Override @ResponseBody @RequestMapping(method = RequestMethod.GET) @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @ApiOperation( value = \"Search notification attachments (/search/quick alias)\", nickname = \"searchNotificationAttachments\", tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public Resources<?> find(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters, \n\t\t\t@PageableDefault Pageable pageable)", "class_method_signature": "IdmNotificationAttachmentController.find(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters, \n\t\t\t@PageableDefault Pageable pageable)", "testcase": false, "constructor": false}, {"identifier": "findQuick", "parameters": "(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters,\n\t\t\t@PageableDefault Pageable pageable)", "modifiers": "@ResponseBody @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @RequestMapping(value = \"/search/quick\", method = RequestMethod.GET) @ApiOperation( value = \"Search notification attachments\", nickname = \"searchQuickNotificationAttachments\", tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public", "return": "Resources<?>", "signature": "Resources<?> findQuick(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters,\n\t\t\t@PageableDefault Pageable pageable)", "full_signature": "@ResponseBody @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @RequestMapping(value = \"/search/quick\", method = RequestMethod.GET) @ApiOperation( value = \"Search notification attachments\", nickname = \"searchQuickNotificationAttachments\", tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public Resources<?> findQuick(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters,\n\t\t\t@PageableDefault Pageable pageable)", "class_method_signature": "IdmNotificationAttachmentController.findQuick(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters,\n\t\t\t@PageableDefault Pageable pageable)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(@RequestParam(required = false) MultiValueMap<String, Object> parameters)", "modifiers": "@Override @ResponseBody @RequestMapping(value = \"/search/count\", method = RequestMethod.GET) @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_COUNT + \"')\") @ApiOperation( value = \"The number of entities that match the filter\", nickname = \"countNotificationAttachments\", tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_COUNT, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_COUNT, description = \"\") }) }) public", "return": "long", "signature": "long count(@RequestParam(required = false) MultiValueMap<String, Object> parameters)", "full_signature": "@Override @ResponseBody @RequestMapping(value = \"/search/count\", method = RequestMethod.GET) @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_COUNT + \"')\") @ApiOperation( value = \"The number of entities that match the filter\", nickname = \"countNotificationAttachments\", tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_COUNT, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_COUNT, description = \"\") }) }) public long count(@RequestParam(required = false) MultiValueMap<String, Object> parameters)", "class_method_signature": "IdmNotificationAttachmentController.count(@RequestParam(required = false) MultiValueMap<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable @NotNull String backendId)", "modifiers": "@Override @ResponseBody @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @RequestMapping(value = \"/{backendId}\", method = RequestMethod.GET) @ApiOperation( value = \"Notification attachment detail\", nickname = \"getNotificationAttachment\", response = IdmNotificationAttachmentDto.class, tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public", "return": "ResponseEntity<?>", "signature": "ResponseEntity<?> get(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable @NotNull String backendId)", "full_signature": "@Override @ResponseBody @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @RequestMapping(value = \"/{backendId}\", method = RequestMethod.GET) @ApiOperation( value = \"Notification attachment detail\", nickname = \"getNotificationAttachment\", response = IdmNotificationAttachmentDto.class, tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public ResponseEntity<?> get(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable @NotNull String backendId)", "class_method_signature": "IdmNotificationAttachmentController.get(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable @NotNull String backendId)", "testcase": false, "constructor": false}, {"identifier": "getPermissions", "parameters": "(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable @NotNull String backendId)", "modifiers": "@Override @ResponseBody @RequestMapping(value = \"/{backendId}/permissions\", method = RequestMethod.GET) @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @ApiOperation( value = \"What logged identity can do with given record\", nickname = \"getPermissionsOnNotificationAttachment\", tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\")}), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\")}) }) public", "return": "Set<String>", "signature": "Set<String> getPermissions(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable @NotNull String backendId)", "full_signature": "@Override @ResponseBody @RequestMapping(value = \"/{backendId}/permissions\", method = RequestMethod.GET) @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @ApiOperation( value = \"What logged identity can do with given record\", nickname = \"getPermissionsOnNotificationAttachment\", tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\")}), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\")}) }) public Set<String> getPermissions(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable @NotNull String backendId)", "class_method_signature": "IdmNotificationAttachmentController.getPermissions(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable @NotNull String backendId)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable String backendId)", "modifiers": "@RequestMapping(value = \"/{backendId}/download\", method = RequestMethod.GET) @ResponseBody @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @ApiOperation( value = \"Download notification attachment\", nickname = \"downloadNotificationAttachment\", tags = { IdmNotificationAttachmentController.TAG }, notes = \"Returns input stream to notification attachment.\", authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public", "return": "ResponseEntity<InputStreamResource>", "signature": "ResponseEntity<InputStreamResource> download(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable String backendId)", "full_signature": "@RequestMapping(value = \"/{backendId}/download\", method = RequestMethod.GET) @ResponseBody @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @ApiOperation( value = \"Download notification attachment\", nickname = \"downloadNotificationAttachment\", tags = { IdmNotificationAttachmentController.TAG }, notes = \"Returns input stream to notification attachment.\", authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public ResponseEntity<InputStreamResource> download(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable String backendId)", "class_method_signature": "IdmNotificationAttachmentController.download(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable String backendId)", "testcase": false, "constructor": false}, {"identifier": "toFilter", "parameters": "(MultiValueMap<String, Object> parameters)", "modifiers": "@Override protected", "return": "IdmNotificationAttachmentFilter", "signature": "IdmNotificationAttachmentFilter toFilter(MultiValueMap<String, Object> parameters)", "full_signature": "@Override protected IdmNotificationAttachmentFilter toFilter(MultiValueMap<String, Object> parameters)", "class_method_signature": "IdmNotificationAttachmentController.toFilter(MultiValueMap<String, Object> parameters)", "testcase": false, "constructor": false}], "file": "Realization/backend/core/core-impl/src/main/java/eu/bcvsolutions/idm/core/notification/rest/impl/IdmNotificationAttachmentController.java"}, "focal_method": {"identifier": "find", "parameters": "(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters, \n\t\t\t@PageableDefault Pageable pageable)", "modifiers": "@Override @ResponseBody @RequestMapping(method = RequestMethod.GET) @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @ApiOperation( value = \"Search notification attachments (/search/quick alias)\", nickname = \"searchNotificationAttachments\", tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public", "return": "Resources<?>", "body": "@Override\n\t@ResponseBody\n\t@RequestMapping(method = RequestMethod.GET)\n\t@PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\")\n\t@ApiOperation(\n\t\t\tvalue = \"Search notification attachments (/search/quick alias)\", \n\t\t\tnickname = \"searchNotificationAttachments\", \n\t\t\ttags = { IdmNotificationAttachmentController.TAG }, \n\t\t\tauthorizations = {\n\t\t\t\t@Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { \n\t\t\t\t\t\t@AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }),\n\t\t\t\t@Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { \n\t\t\t\t\t\t@AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") })\n\t\t\t\t})\n\tpublic Resources<?> find(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters, \n\t\t\t@PageableDefault Pageable pageable) {\n\t\treturn super.find(parameters, pageable);\n\t}", "signature": "Resources<?> find(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters, \n\t\t\t@PageableDefault Pageable pageable)", "full_signature": "@Override @ResponseBody @RequestMapping(method = RequestMethod.GET) @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @ApiOperation( value = \"Search notification attachments (/search/quick alias)\", nickname = \"searchNotificationAttachments\", tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public Resources<?> find(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters, \n\t\t\t@PageableDefault Pageable pageable)", "class_method_signature": "IdmNotificationAttachmentController.find(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters, \n\t\t\t@PageableDefault Pageable pageable)", "testcase": false, "constructor": false, "invocations": ["find"]}, "repository": {"repo_id": 61879415, "url": "https://github.com/bcvsolutions/CzechIdMng", "stars": 25, "created": "6/24/2016 11:18:23 AM +00:00", "updates": "2020-01-27T15:14:40+00:00", "fork": "False", "license": "licensed"}}