{"test_class": {"identifier": "ZuulFiltersModuleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    AbstractConfiguration configuration;", "modifier": "@Mock", "type": "AbstractConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "ZuulFiltersModule module = new ZuulFiltersModule();", "modifier": "", "type": "ZuulFiltersModule", "declarator": "module = new ZuulFiltersModule()", "var_name": "module"}], "file": "zuul2-core/src/test/java/com/netflix/zuul/init/ZuulFiltersModuleTest.java"}, "test_case": {"identifier": "testEmptyClassNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmptyClassNames() {\n        when(configuration.getString(eq(\"zuul.filters.classes\"), anyString())).thenReturn(\"  \");\n        when(configuration.getString(eq(\"zuul.filters.packages\"), anyString())).thenReturn(\"  \");\n\n        String[] classNames = module.findClassNames(configuration);\n\n        assertThat(classNames.length, equalTo(0));\n    }", "signature": "void testEmptyClassNames()", "full_signature": "@Test public void testEmptyClassNames()", "class_method_signature": "ZuulFiltersModuleTest.testEmptyClassNames()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getString", "eq", "anyString", "thenReturn", "when", "getString", "eq", "anyString", "findClassNames", "assertThat", "equalTo"]}, "focal_class": {"identifier": "ZuulFiltersModule", "superclass": "extends AbstractModule", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ZuulFiltersModule.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ZuulFiltersModule.class)", "var_name": "LOG"}, {"original_string": "private static Predicate<String> blank = String::isEmpty;", "modifier": "private static", "type": "Predicate<String>", "declarator": "blank = String::isEmpty", "var_name": "blank"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void configure()", "full_signature": "@Override protected void configure()", "class_method_signature": "ZuulFiltersModule.configure()", "testcase": false, "constructor": false}, {"identifier": "provideFilterFileManagerConfig", "parameters": "()", "modifiers": "@Provides", "return": "FilterFileManagerConfig", "signature": "FilterFileManagerConfig provideFilterFileManagerConfig()", "full_signature": "@Provides FilterFileManagerConfig provideFilterFileManagerConfig()", "class_method_signature": "ZuulFiltersModule.provideFilterFileManagerConfig()", "testcase": false, "constructor": false}, {"identifier": "findClassNames", "parameters": "(AbstractConfiguration config)", "modifiers": "@VisibleForTesting", "return": "String[]", "signature": "String[] findClassNames(AbstractConfiguration config)", "full_signature": "@VisibleForTesting String[] findClassNames(AbstractConfiguration config)", "class_method_signature": "ZuulFiltersModule.findClassNames(AbstractConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "findFilterLocations", "parameters": "(AbstractConfiguration config)", "modifiers": "@VisibleForTesting", "return": "String[]", "signature": "String[] findFilterLocations(AbstractConfiguration config)", "full_signature": "@VisibleForTesting String[] findFilterLocations(AbstractConfiguration config)", "class_method_signature": "ZuulFiltersModule.findFilterLocations(AbstractConfiguration config)", "testcase": false, "constructor": false}], "file": "zuul2-core/src/main/java/com/netflix/zuul/init/ZuulFiltersModule.java"}, "focal_method": {"identifier": "findClassNames", "parameters": "(AbstractConfiguration config)", "modifiers": "@VisibleForTesting", "return": "String[]", "body": "@VisibleForTesting\n    String[] findClassNames(AbstractConfiguration config) {\n\n        // Find individually-specified filter classes.\n        String filterClassNamesStr = config.getString(\"zuul.filters.classes\", \"\").trim();\n        Stream<String> classNameStream = Pattern.compile(\",\")\n                .splitAsStream(filterClassNamesStr)\n                .map(String::trim)\n                .filter(blank.negate());\n\n        // Find filter classes in specified packages.\n        String packageNamesStr = config.getString(\"zuul.filters.packages\", \"\").trim();\n        ClassPath cp;\n        try {\n            cp = ClassPath.from(this.getClass().getClassLoader());\n        } catch (IOException e) {\n            throw new RuntimeException(\"Error attempting to read classpath to find filters!\", e);\n        }\n        Stream<String> packageStream = Pattern.compile(\",\")\n                .splitAsStream(packageNamesStr)\n                .map(String::trim)\n                .filter(blank.negate())\n                .flatMap( packageName -> cp.getTopLevelClasses(packageName).stream())\n                .map(ClassPath.ClassInfo::load)\n                .filter(ZuulFilter.class::isAssignableFrom)\n                .map(Class::getCanonicalName);\n\n\n        String[] filterClassNames = Stream.concat(classNameStream, packageStream).toArray(String[]::new);\n        if (filterClassNames.length != 0) {\n            LOG.info(\"Using filter classnames: \");\n            for (String location : filterClassNames) {\n                LOG.info(\"  \" + location);\n            }\n        }\n\n        return filterClassNames;\n    }", "signature": "String[] findClassNames(AbstractConfiguration config)", "full_signature": "@VisibleForTesting String[] findClassNames(AbstractConfiguration config)", "class_method_signature": "ZuulFiltersModule.findClassNames(AbstractConfiguration config)", "testcase": false, "constructor": false, "invocations": ["trim", "getString", "filter", "map", "splitAsStream", "compile", "negate", "trim", "getString", "from", "getClassLoader", "getClass", "map", "filter", "map", "flatMap", "filter", "map", "splitAsStream", "compile", "negate", "stream", "getTopLevelClasses", "toArray", "concat", "info", "info"]}, "repository": {"repo_id": 117949407, "url": "https://github.com/linking12/zuul2", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 10, "size": 302, "license": "licensed"}}