{"test_class": {"identifier": "OntologyLoaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "phenol-io/src/test/java/org/monarchinitiative/phenol/io/OntologyLoaderTest.java"}, "test_case": {"identifier": "testLoadEctoAll", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testLoadEctoAll() {\n    Path ectoPath = Paths.get(\"src/test/resources/ecto.obo\");\n\n    // ECTO isn't mapped in the default Curie mappings, so we need to add it here\n    //CurieUtil curieUtil = CurieUtilBuilder.withDefaultsAnd(ImmutableMap.of(\"ECTO\", \"http://http://purl.obolibrary.org/obo/ECTO_\"));\n    //Ontology permissiveOntology = OntologyLoader.loadOntology(ectoPath.toFile(), curieUtil);\n    Ontology permissiveOntology = OntologyLoader.loadOntology(ectoPath.toFile());\n\n    assertEquals(TermId.of(\"owl:Thing\"), permissiveOntology.getRootTermId());\n    assertEquals(8343, permissiveOntology.countNonObsoleteTerms());\n    assertEquals(4, permissiveOntology.countAlternateTermIds());\n\n    Set<String> prefixes = permissiveOntology.getAllTermIds()\n      .stream()\n      .map(TermId::getPrefix)\n      .collect(toSet());\n\n    assertTrue(prefixes.contains(\"NCIT\"));\n    assertTrue(prefixes.contains(\"CHEBI\"));\n    assertTrue(prefixes.contains(\"GO\"));\n\n    // Only a subset of the terms are ECTO\n    // $ grep 'id: ECTO' phenol/phenol-io/src/test/resources/ecto.obo | wc -l\n    // 2270\n   long ectoTermCount = permissiveOntology.getTermMap().values().\n                        stream().\n                        filter(term -> term.getId().getPrefix().equals(\"ECTO\")).\n                        count();\n   assertEquals(2270, ectoTermCount);\n  }", "signature": "void testLoadEctoAll()", "full_signature": "@Test void testLoadEctoAll()", "class_method_signature": "OntologyLoaderTest.testLoadEctoAll()", "testcase": true, "constructor": false, "invocations": ["get", "loadOntology", "toFile", "assertEquals", "of", "getRootTermId", "assertEquals", "countNonObsoleteTerms", "assertEquals", "countAlternateTermIds", "collect", "map", "stream", "getAllTermIds", "toSet", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "count", "filter", "stream", "values", "getTermMap", "equals", "getPrefix", "getId", "assertEquals"]}, "focal_class": {"identifier": "OntologyLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(OntologyLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(OntologyLoader.class)", "var_name": "logger"}], "methods": [{"identifier": "OntologyLoader", "parameters": "()", "modifiers": "private", "return": "", "signature": " OntologyLoader()", "full_signature": "private  OntologyLoader()", "class_method_signature": "OntologyLoader.OntologyLoader()", "testcase": false, "constructor": true}, {"identifier": "loadOntology", "parameters": "(File file)", "modifiers": "public static", "return": "Ontology", "signature": "Ontology loadOntology(File file)", "full_signature": "public static Ontology loadOntology(File file)", "class_method_signature": "OntologyLoader.loadOntology(File file)", "testcase": false, "constructor": false}, {"identifier": "loadOntology", "parameters": "(File file, String... termIdPrefixes)", "modifiers": "public static", "return": "Ontology", "signature": "Ontology loadOntology(File file, String... termIdPrefixes)", "full_signature": "public static Ontology loadOntology(File file, String... termIdPrefixes)", "class_method_signature": "OntologyLoader.loadOntology(File file, String... termIdPrefixes)", "testcase": false, "constructor": false}, {"identifier": "loadOntology", "parameters": "(File file, CurieUtil curieUtil, String... termIdPrefixes)", "modifiers": "public static", "return": "Ontology", "signature": "Ontology loadOntology(File file, CurieUtil curieUtil, String... termIdPrefixes)", "full_signature": "public static Ontology loadOntology(File file, CurieUtil curieUtil, String... termIdPrefixes)", "class_method_signature": "OntologyLoader.loadOntology(File file, CurieUtil curieUtil, String... termIdPrefixes)", "testcase": false, "constructor": false}, {"identifier": "loadOntology", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "Ontology", "signature": "Ontology loadOntology(InputStream inputStream)", "full_signature": "public static Ontology loadOntology(InputStream inputStream)", "class_method_signature": "OntologyLoader.loadOntology(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "loadOntology", "parameters": "(InputStream inputStream, String... termIdPrefixes)", "modifiers": "public static", "return": "Ontology", "signature": "Ontology loadOntology(InputStream inputStream, String... termIdPrefixes)", "full_signature": "public static Ontology loadOntology(InputStream inputStream, String... termIdPrefixes)", "class_method_signature": "OntologyLoader.loadOntology(InputStream inputStream, String... termIdPrefixes)", "testcase": false, "constructor": false}, {"identifier": "loadOntology", "parameters": "(InputStream inputStream, CurieUtil curieUtil, String... termIdPrefixes)", "modifiers": "public static", "return": "Ontology", "signature": "Ontology loadOntology(InputStream inputStream, CurieUtil curieUtil, String... termIdPrefixes)", "full_signature": "public static Ontology loadOntology(InputStream inputStream, CurieUtil curieUtil, String... termIdPrefixes)", "class_method_signature": "OntologyLoader.loadOntology(InputStream inputStream, CurieUtil curieUtil, String... termIdPrefixes)", "testcase": false, "constructor": false}, {"identifier": "loadOntology", "parameters": "(GraphDocument graphDocument, CurieUtil curieUtil, String... termIdPrefixes)", "modifiers": "public static", "return": "Ontology", "signature": "Ontology loadOntology(GraphDocument graphDocument, CurieUtil curieUtil, String... termIdPrefixes)", "full_signature": "public static Ontology loadOntology(GraphDocument graphDocument, CurieUtil curieUtil, String... termIdPrefixes)", "class_method_signature": "OntologyLoader.loadOntology(GraphDocument graphDocument, CurieUtil curieUtil, String... termIdPrefixes)", "testcase": false, "constructor": false}, {"identifier": "loadGraphDocument", "parameters": "(File file)", "modifiers": "private static", "return": "GraphDocument", "signature": "GraphDocument loadGraphDocument(File file)", "full_signature": "private static GraphDocument loadGraphDocument(File file)", "class_method_signature": "OntologyLoader.loadGraphDocument(File file)", "testcase": false, "constructor": false}, {"identifier": "loadGraphDocument", "parameters": "(InputStream inputStream)", "modifiers": "private static", "return": "GraphDocument", "signature": "GraphDocument loadGraphDocument(InputStream inputStream)", "full_signature": "private static GraphDocument loadGraphDocument(InputStream inputStream)", "class_method_signature": "OntologyLoader.loadGraphDocument(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "readBytes", "parameters": "(InputStream bufferedStream, int readlimit)", "modifiers": "private static", "return": "String", "signature": "String readBytes(InputStream bufferedStream, int readlimit)", "full_signature": "private static String readBytes(InputStream bufferedStream, int readlimit)", "class_method_signature": "OntologyLoader.readBytes(InputStream bufferedStream, int readlimit)", "testcase": false, "constructor": false}, {"identifier": "isJsonGraphDoc", "parameters": "(String firstBytes)", "modifiers": "private static", "return": "boolean", "signature": "boolean isJsonGraphDoc(String firstBytes)", "full_signature": "private static boolean isJsonGraphDoc(String firstBytes)", "class_method_signature": "OntologyLoader.isJsonGraphDoc(String firstBytes)", "testcase": false, "constructor": false}], "file": "phenol-io/src/main/java/org/monarchinitiative/phenol/io/OntologyLoader.java"}, "focal_method": {"identifier": "loadOntology", "parameters": "(File file)", "modifiers": "public static", "return": "Ontology", "body": "public static Ontology loadOntology(File file) {\n    return loadOntology(file, CurieUtilBuilder.defaultCurieUtil());\n  }", "signature": "Ontology loadOntology(File file)", "full_signature": "public static Ontology loadOntology(File file)", "class_method_signature": "OntologyLoader.loadOntology(File file)", "testcase": false, "constructor": false, "invocations": ["loadOntology", "defaultCurieUtil"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}