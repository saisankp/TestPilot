{"test_class": {"identifier": "BinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LayoutInflater inflater;", "modifier": "private", "type": "LayoutInflater", "declarator": "inflater", "var_name": "inflater"}], "file": "clara/src/test/java/org/vaadin/teemu/clara/binder/BinderTest.java"}, "test_case": {"identifier": "getAlreadyAssignedFields_yieldFieldFromClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAlreadyAssignedFields_yieldFieldFromClass() {\n        ControllerWithFieldBinding controller = new ControllerWithFieldBinding(\n                new Button(\"myButton\"));\n        Binder binder = new Binder();\n        Map<String, Component> assignedFields = binder\n                .getAlreadyAssignedFields(controller);\n        assertEquals(1, assignedFields.size());\n    }", "signature": "void getAlreadyAssignedFields_yieldFieldFromClass()", "full_signature": "@Test public void getAlreadyAssignedFields_yieldFieldFromClass()", "class_method_signature": "BinderTest.getAlreadyAssignedFields_yieldFieldFromClass()", "testcase": true, "constructor": false, "invocations": ["getAlreadyAssignedFields", "assertEquals", "size"]}, "focal_class": {"identifier": "Binder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String idPrefix;", "modifier": "private final", "type": "String", "declarator": "idPrefix", "var_name": "idPrefix"}], "methods": [{"identifier": "Binder", "parameters": "()", "modifiers": "public", "return": "", "signature": " Binder()", "full_signature": "public  Binder()", "class_method_signature": "Binder.Binder()", "testcase": false, "constructor": true}, {"identifier": "Binder", "parameters": "(String idPrefix)", "modifiers": "public", "return": "", "signature": " Binder(String idPrefix)", "full_signature": "public  Binder(String idPrefix)", "class_method_signature": "Binder.Binder(String idPrefix)", "testcase": false, "constructor": true}, {"identifier": "getLogger", "parameters": "()", "modifiers": "protected", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "protected Logger getLogger()", "class_method_signature": "Binder.getLogger()", "testcase": false, "constructor": false}, {"identifier": "bind", "parameters": "(Component componentRoot, Object controller)", "modifiers": "public", "return": "void", "signature": "void bind(Component componentRoot, Object controller)", "full_signature": "public void bind(Component componentRoot, Object controller)", "class_method_signature": "Binder.bind(Component componentRoot, Object controller)", "testcase": false, "constructor": false}, {"identifier": "getAlreadyAssignedFields", "parameters": "(Object controller)", "modifiers": "public", "return": "Map<String, Component>", "signature": "Map<String, Component> getAlreadyAssignedFields(Object controller)", "full_signature": "public Map<String, Component> getAlreadyAssignedFields(Object controller)", "class_method_signature": "Binder.getAlreadyAssignedFields(Object controller)", "testcase": false, "constructor": false}, {"identifier": "bindFields", "parameters": "(Component componentRoot, Object controller,\n            Class<?> clazz)", "modifiers": "private", "return": "void", "signature": "void bindFields(Component componentRoot, Object controller,\n            Class<?> clazz)", "full_signature": "private void bindFields(Component componentRoot, Object controller,\n            Class<?> clazz)", "class_method_signature": "Binder.bindFields(Component componentRoot, Object controller,\n            Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "bindMethods", "parameters": "(Component componentRoot, Object controller)", "modifiers": "private", "return": "void", "signature": "void bindMethods(Component componentRoot, Object controller)", "full_signature": "private void bindMethods(Component componentRoot, Object controller)", "class_method_signature": "Binder.bindMethods(Component componentRoot, Object controller)", "testcase": false, "constructor": false}, {"identifier": "bindField", "parameters": "(Component componentRoot, Object controller,\n            Field field)", "modifiers": "private", "return": "void", "signature": "void bindField(Component componentRoot, Object controller,\n            Field field)", "full_signature": "private void bindField(Component componentRoot, Object controller,\n            Field field)", "class_method_signature": "Binder.bindField(Component componentRoot, Object controller,\n            Field field)", "testcase": false, "constructor": false}, {"identifier": "extractComponentId", "parameters": "(Field field)", "modifiers": "private", "return": "String", "signature": "String extractComponentId(Field field)", "full_signature": "private String extractComponentId(Field field)", "class_method_signature": "Binder.extractComponentId(Field field)", "testcase": false, "constructor": false}, {"identifier": "bindEventHandler", "parameters": "(Component componentRoot, Object controller,\n            Method method)", "modifiers": "private", "return": "void", "signature": "void bindEventHandler(Component componentRoot, Object controller,\n            Method method)", "full_signature": "private void bindEventHandler(Component componentRoot, Object controller,\n            Method method)", "class_method_signature": "Binder.bindEventHandler(Component componentRoot, Object controller,\n            Method method)", "testcase": false, "constructor": false}, {"identifier": "createListenerProxy", "parameters": "(Class<?> listenerClass,\n            final Class<?> eventClass, final Method listenerMethod,\n            final Object controller)", "modifiers": "private", "return": "Object", "signature": "Object createListenerProxy(Class<?> listenerClass,\n            final Class<?> eventClass, final Method listenerMethod,\n            final Object controller)", "full_signature": "private Object createListenerProxy(Class<?> listenerClass,\n            final Class<?> eventClass, final Method listenerMethod,\n            final Object controller)", "class_method_signature": "Binder.createListenerProxy(Class<?> listenerClass,\n            final Class<?> eventClass, final Method listenerMethod,\n            final Object controller)", "testcase": false, "constructor": false}, {"identifier": "getAddListenerMethod", "parameters": "(\n            Class<? extends Component> componentClass, Class<?> eventClass)", "modifiers": "private", "return": "Method", "signature": "Method getAddListenerMethod(\n            Class<? extends Component> componentClass, Class<?> eventClass)", "full_signature": "private Method getAddListenerMethod(\n            Class<? extends Component> componentClass, Class<?> eventClass)", "class_method_signature": "Binder.getAddListenerMethod(\n            Class<? extends Component> componentClass, Class<?> eventClass)", "testcase": false, "constructor": false}, {"identifier": "bindDataSource", "parameters": "(Component componentRoot, Object controller,\n            Method method)", "modifiers": "private", "return": "void", "signature": "void bindDataSource(Component componentRoot, Object controller,\n            Method method)", "full_signature": "private void bindDataSource(Component componentRoot, Object controller,\n            Method method)", "class_method_signature": "Binder.bindDataSource(Component componentRoot, Object controller,\n            Method method)", "testcase": false, "constructor": false}, {"identifier": "tryToFindComponentById", "parameters": "(Component root, String id)", "modifiers": "private", "return": "Component", "signature": "Component tryToFindComponentById(Component root, String id)", "full_signature": "private Component tryToFindComponentById(Component root, String id)", "class_method_signature": "Binder.tryToFindComponentById(Component root, String id)", "testcase": false, "constructor": false}, {"identifier": "isContainer", "parameters": "(Class<?> dataSourceClass)", "modifiers": "private", "return": "boolean", "signature": "boolean isContainer(Class<?> dataSourceClass)", "full_signature": "private boolean isContainer(Class<?> dataSourceClass)", "class_method_signature": "Binder.isContainer(Class<?> dataSourceClass)", "testcase": false, "constructor": false}, {"identifier": "isItem", "parameters": "(Class<?> dataSourceClass)", "modifiers": "private", "return": "boolean", "signature": "boolean isItem(Class<?> dataSourceClass)", "full_signature": "private boolean isItem(Class<?> dataSourceClass)", "class_method_signature": "Binder.isItem(Class<?> dataSourceClass)", "testcase": false, "constructor": false}, {"identifier": "isProperty", "parameters": "(Class<?> dataSourceClass)", "modifiers": "private", "return": "boolean", "signature": "boolean isProperty(Class<?> dataSourceClass)", "full_signature": "private boolean isProperty(Class<?> dataSourceClass)", "class_method_signature": "Binder.isProperty(Class<?> dataSourceClass)", "testcase": false, "constructor": false}], "file": "clara/src/main/java/org/vaadin/teemu/clara/binder/Binder.java"}, "focal_method": {"identifier": "getAlreadyAssignedFields", "parameters": "(Object controller)", "modifiers": "public", "return": "Map<String, Component>", "body": "public Map<String, Component> getAlreadyAssignedFields(Object controller) {\n        if (controller == null) {\n            return Collections.emptyMap();\n        }\n\n        Map<String, Component> assignedFields = new HashMap<String, Component>();\n        for (Field field : ReflectionUtils.getAllDeclaredFieldsAnnotatedWith(\n                controller.getClass(), UiField.class)) {\n            try {\n                field.setAccessible(true);\n                Object value = field.get(controller);\n                if (value instanceof Component) {\n                    // We are intentionally not using the idPrefix here\n                    // The specific use in the inflater doesn't need the\n                    // prefix\n                    assignedFields.put(extractComponentId(field),\n                            (Component) value);\n                }\n            } catch (IllegalAccessException e) {\n                getLogger().log(Level.WARNING,\n                        \"Exception while accessing controller object fields.\",\n                        e);\n            }\n        }\n        return assignedFields;\n    }", "signature": "Map<String, Component> getAlreadyAssignedFields(Object controller)", "full_signature": "public Map<String, Component> getAlreadyAssignedFields(Object controller)", "class_method_signature": "Binder.getAlreadyAssignedFields(Object controller)", "testcase": false, "constructor": false, "invocations": ["emptyMap", "getAllDeclaredFieldsAnnotatedWith", "getClass", "setAccessible", "get", "put", "extractComponentId", "log", "getLogger"]}, "repository": {"repo_id": 4384653, "url": "https://github.com/tehapo/Clara", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 38, "size": 7395, "license": "licensed"}}