{"test_class": {"identifier": "PipelineEventListenerTest", "superclass": "extends PipelineBaseTest", "interfaces": "", "fields": [], "file": "blueocean-events/src/test/java/io/jenkins/blueocean/events/PipelineEventListenerTest.java"}, "test_case": {"identifier": "testParentNodesOrder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParentNodesOrder() throws Exception {\n        String script = \"node {\\n\" +\n                \"    stage('one') {\\n\" +\n                \"        sh \\\"echo 42\\\"        \\n\" +\n                \"        parallel('branch1':{\\n\" +\n                \"          sh 'echo \\\"branch1\\\"'\\n\" +\n                \"        }, 'branch2': {\\n\" +\n                \"          sh 'echo \\\"branch2\\\"'\\n\" +\n                \"        })\\n\" +\n                \"    }\\n\" +\n                \"\\n\" +\n                \"}\";\n        WorkflowJob job1 = j.jenkins.createProject(WorkflowJob.class, \"pipeline1\");\n        job1.setDefinition(new CpsFlowDefinition(script));\n        WorkflowRun b1 = job1.scheduleBuild2(0).get();\n        j.assertBuildStatus(Result.SUCCESS, b1);\n\n        List<FlowNode> parallels = getParallelNodes(NodeGraphBuilder.NodeGraphBuilderFactory.getInstance(b1));\n        Assert.assertEquals(\"10\", parallels.get(0).getId());\n        Assert.assertEquals(\"Branch: branch1\", parallels.get(0).getDisplayName());\n\n        Assert.assertEquals(Lists.newArrayList(\"2\",\"3\",\"4\",\"5\",\"6\",\"8\"),\n                new PipelineEventListener().getBranch(parallels.get(0)));\n    }", "signature": "void testParentNodesOrder()", "full_signature": "@Test public void testParentNodesOrder()", "class_method_signature": "PipelineEventListenerTest.testParentNodesOrder()", "testcase": true, "constructor": false, "invocations": ["createProject", "setDefinition", "get", "scheduleBuild2", "assertBuildStatus", "getParallelNodes", "getInstance", "assertEquals", "getId", "get", "assertEquals", "getDisplayName", "get", "assertEquals", "newArrayList", "getBranch", "get"]}, "focal_class": {"identifier": "PipelineEventListener", "superclass": "", "interfaces": "implements GraphListener", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(PipelineEventListener.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(PipelineEventListener.class.getName())", "var_name": "LOGGER"}, {"original_string": "private final Cache<FlowExecution, String> currentStageNameCache = CacheBuilder.newBuilder()\n                                                                    .weakKeys()\n                                                                    .build();", "modifier": "private final", "type": "Cache<FlowExecution, String>", "declarator": "currentStageNameCache = CacheBuilder.newBuilder()\n                                                                    .weakKeys()\n                                                                    .build()", "var_name": "currentStageNameCache"}, {"original_string": "private final Cache<FlowExecution, String> currentStageIdCache = CacheBuilder.newBuilder()\n                                                                    .weakKeys()\n                                                                    .build();", "modifier": "private final", "type": "Cache<FlowExecution, String>", "declarator": "currentStageIdCache = CacheBuilder.newBuilder()\n                                                                    .weakKeys()\n                                                                    .build()", "var_name": "currentStageIdCache"}, {"original_string": "private final ConcurrentMap<FlowExecution, String> currentStageName = currentStageNameCache.asMap();", "modifier": "private final", "type": "ConcurrentMap<FlowExecution, String>", "declarator": "currentStageName = currentStageNameCache.asMap()", "var_name": "currentStageName"}, {"original_string": "private final ConcurrentMap<FlowExecution, String> currentStageId = currentStageIdCache.asMap();", "modifier": "private final", "type": "ConcurrentMap<FlowExecution, String>", "declarator": "currentStageId = currentStageIdCache.asMap()", "var_name": "currentStageId"}], "methods": [{"identifier": "onNewHead", "parameters": "(FlowNode flowNode)", "modifiers": "@Override public", "return": "void", "signature": "void onNewHead(FlowNode flowNode)", "full_signature": "@Override public void onNewHead(FlowNode flowNode)", "class_method_signature": "PipelineEventListener.onNewHead(FlowNode flowNode)", "testcase": false, "constructor": false}, {"identifier": "getBranch", "parameters": "(FlowNode flowNode)", "modifiers": "", "return": "List<String>", "signature": "List<String> getBranch(FlowNode flowNode)", "full_signature": " List<String> getBranch(FlowNode flowNode)", "class_method_signature": "PipelineEventListener.getBranch(FlowNode flowNode)", "testcase": false, "constructor": false}, {"identifier": "toPath", "parameters": "(Collection<String> branch)", "modifiers": "private", "return": "String", "signature": "String toPath(Collection<String> branch)", "full_signature": "private String toPath(Collection<String> branch)", "class_method_signature": "PipelineEventListener.toPath(Collection<String> branch)", "testcase": false, "constructor": false}, {"identifier": "runFor", "parameters": "(FlowExecution exec)", "modifiers": "private static @CheckForNull", "return": "Run<?, ?>", "signature": "Run<?, ?> runFor(FlowExecution exec)", "full_signature": "private static @CheckForNull Run<?, ?> runFor(FlowExecution exec)", "class_method_signature": "PipelineEventListener.runFor(FlowExecution exec)", "testcase": false, "constructor": false}, {"identifier": "newMessage", "parameters": "(PipelineEventChannel.Event event, FlowExecution exec)", "modifiers": "private static", "return": "Message", "signature": "Message newMessage(PipelineEventChannel.Event event, FlowExecution exec)", "full_signature": "private static Message newMessage(PipelineEventChannel.Event event, FlowExecution exec)", "class_method_signature": "PipelineEventListener.newMessage(PipelineEventChannel.Event event, FlowExecution exec)", "testcase": false, "constructor": false}, {"identifier": "newMessage", "parameters": "(PipelineEventChannel.Event event, FlowNode flowNode, Collection<String> branch)", "modifiers": "private", "return": "Message", "signature": "Message newMessage(PipelineEventChannel.Event event, FlowNode flowNode, Collection<String> branch)", "full_signature": "private Message newMessage(PipelineEventChannel.Event event, FlowNode flowNode, Collection<String> branch)", "class_method_signature": "PipelineEventListener.newMessage(PipelineEventChannel.Event event, FlowNode flowNode, Collection<String> branch)", "testcase": false, "constructor": false}, {"identifier": "publishEvent", "parameters": "(Message message)", "modifiers": "private static", "return": "void", "signature": "void publishEvent(Message message)", "full_signature": "private static void publishEvent(Message message)", "class_method_signature": "PipelineEventListener.publishEvent(Message message)", "testcase": false, "constructor": false}, {"identifier": "publishJobEvent", "parameters": "(@Nonnull Run<?,?> run, @Nonnull Events.JobChannel event)", "modifiers": "private static", "return": "void", "signature": "void publishJobEvent(@Nonnull Run<?,?> run, @Nonnull Events.JobChannel event)", "full_signature": "private static void publishJobEvent(@Nonnull Run<?,?> run, @Nonnull Events.JobChannel event)", "class_method_signature": "PipelineEventListener.publishJobEvent(@Nonnull Run<?,?> run, @Nonnull Events.JobChannel event)", "testcase": false, "constructor": false}], "file": "blueocean-events/src/main/java/io/jenkins/blueocean/events/PipelineEventListener.java"}, "focal_method": {"identifier": "getBranch", "parameters": "(FlowNode flowNode)", "modifiers": "", "return": "List<String>", "body": "List<String> getBranch(FlowNode flowNode) {\n        return Lists.reverse(flowNode.getAllEnclosingIds());\n    }", "signature": "List<String> getBranch(FlowNode flowNode)", "full_signature": " List<String> getBranch(FlowNode flowNode)", "class_method_signature": "PipelineEventListener.getBranch(FlowNode flowNode)", "testcase": false, "constructor": false, "invocations": ["reverse", "getAllEnclosingIds"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}