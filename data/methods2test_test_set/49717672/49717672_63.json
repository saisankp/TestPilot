{"test_class": {"identifier": "CryptTest", "superclass": "extends HexTestTools", "interfaces": "", "fields": [], "file": "app/src/test/java/com/eveningoutpost/dexdrip/cgm/medtrum/CryptTest.java"}, "test_case": {"identifier": "codeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void codeTest() {\n\n        final byte[] referenceResult1 = tolerantHexStringToByteArray(\"29 88 28 0C 3D BB D4 8B\");\n        final byte[] referenceResult2 = tolerantHexStringToByteArray(\"12 34 56 78  06 07 AA FF\");\n        final byte[] referenceResult3 = tolerantHexStringToByteArray(\"E7 AD D8 43  F3 9E 24 C4\");\n        final byte[] workingData = tolerantHexStringToByteArray(\"12 34 56 78  06 07 AA FF\");\n\n        code(workingData, 12345678L);\n        assertWithMessage(\"cipher results enc 1\").that(workingData).isEqualTo(referenceResult1);\n        code(workingData, 12345678L);\n        assertWithMessage(\"cipher results dec 1\").that(workingData).isEqualTo(referenceResult2);\n        code(workingData, 0L);\n        assertWithMessage(\"cipher results enc 2\").that(workingData).isEqualTo(referenceResult3);\n\n    }", "signature": "void codeTest()", "full_signature": "@Test public void codeTest()", "class_method_signature": "CryptTest.codeTest()", "testcase": true, "constructor": false, "invocations": ["tolerantHexStringToByteArray", "tolerantHexStringToByteArray", "tolerantHexStringToByteArray", "tolerantHexStringToByteArray", "code", "isEqualTo", "that", "assertWithMessage", "code", "isEqualTo", "that", "assertWithMessage", "code", "isEqualTo", "that", "assertWithMessage"]}, "focal_class": {"identifier": "Crypt", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final byte[] rijndaelSbox = {\n            0x63, 0x7c, 0x77, 0x7b, (byte) 0xf2, 0x6b, 0x6f, (byte) 0xc5, 0x30, 0x1, 0x67, 0x2b, (byte) 0xfe,\n            (byte) 0xd7, (byte) 0xab, 0x76, (byte) 0xca, (byte) 0x82, (byte) 0xc9, 0x7d, (byte) 0xfa, 0x59,\n            0x47, (byte) 0xf0, (byte) 0xad, (byte) 0xd4, (byte) 0xa2, (byte) 0xaf, (byte) 0x9c, (byte) 0xa4,\n            0x72, (byte) 0xc0, (byte) 0xb7, (byte) 0xfd, (byte) 0x93, 0x26, 0x36, 0x3f, (byte) 0xf7,\n            (byte) 0xcc, 0x34, (byte) 0xa5, (byte) 0xe5, (byte) 0xf1, 0x71, (byte) 0xd8, 0x31, 0x15, 0x4,\n            (byte) 0xc7, 0x23, (byte) 0xc3, 0x18, (byte) 0x96, 0x5, (byte) 0x9a, 0x7, 0x12, (byte) 0x80,\n            (byte) 0xe2, (byte) 0xeb, 0x27, (byte) 0xb2, 0x75, 0x9, (byte) 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a,\n            (byte) 0xa0, 0x52, 0x3b, (byte) 0xd6, (byte) 0xb3, 0x29, (byte) 0xe3, 0x2f, (byte) 0x84, 0x53,\n            (byte) 0xd1, 0x0, (byte) 0xed, 0x20, (byte) 0xfc, (byte) 0xb1, 0x5b, 0x6a, (byte) 0xcb,\n            (byte) 0xbe, 0x39, 0x4a, 0x4c, 0x58, (byte) 0xcf, (byte) 0xd0, (byte) 0xef, (byte) 0xaa,\n            (byte) 0xfb, 0x43, 0x4d, 0x33, (byte) 0x85, 0x45, (byte) 0xf9, 0x2, 0x7f, 0x50, 0x3c, (byte) 0x9f,\n            (byte) 0xa8, 0x51, (byte) 0xa3, 0x40, (byte) 0x8f, (byte) 0x92, (byte) 0x9d, 0x38, (byte) 0xf5,\n            (byte) 0xbc, (byte) 0xb6, (byte) 0xda, 0x21, 0x10, (byte) 0xff, (byte) 0xf3, (byte) 0xd2,\n            (byte) 0xcd, 0xc, 0x13, (byte) 0xec, 0x5f, (byte) 0x97, 0x44, 0x17, (byte) 0xc4, (byte) 0xa7, 0x7e,\n            0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, (byte) 0x81, 0x4f, (byte) 0xdc, 0x22, 0x2a, (byte) 0x90,\n            (byte) 0x88, 0x46, (byte) 0xee, (byte) 0xb8, 0x14, (byte) 0xde, 0x5e, 0xb, (byte) 0xdb,\n            (byte) 0xe0, 0x32, 0x3a, 0xa, 0x49, 0x6, 0x24, 0x5c, (byte) 0xc2, (byte) 0xd3, (byte) 0xac, 0x62,\n            (byte) 0x91, (byte) 0x95, (byte) 0xe4, 0x79, (byte) 0xe7, (byte) 0xc8, 0x37, 0x6d, (byte) 0x8d,\n            (byte) 0xd5, 0x4e, (byte) 0xa9, 0x6c, 0x56, (byte) 0xf4, (byte) 0xea, 0x65, 0x7a, (byte) 0xae, 0x8,\n            (byte) 0xba, 0x78, 0x25, 0x2e, 0x1c, (byte) 0xa6, (byte) 0xb4, (byte) 0xc6, (byte) 0xe8,\n            (byte) 0xdd, 0x74, 0x1f, 0x4b, (byte) 0xbd, (byte) 0x8b, (byte) 0x8a, 0x70, 0x3e, (byte) 0xb5,\n            0x66, 0x48, 0x3, (byte) 0xf6, 0xe, 0x61, 0x35, 0x57, (byte) 0xb9, (byte) 0x86, (byte) 0xc1, 0x1d,\n            (byte) 0x9e, (byte) 0xe1, (byte) 0xf8, (byte) 0x98, 0x11, 0x69, (byte) 0xd9, (byte) 0x8e,\n            (byte) 0x94, (byte) 0x9b, 0x1e, (byte) 0x87, (byte) 0xe9, (byte) 0xce, 0x55, 0x28, (byte) 0xdf,\n            (byte) 0x8c, (byte) 0xa1, (byte) 0x89, 0xd, (byte) 0xbf, (byte) 0xe6, 0x42, 0x68, 0x41,\n            (byte) 0x99, 0x2d, 0xf, (byte) 0xb0, 0x54, (byte) 0xbb, 0x16\n    };", "modifier": "private static final", "type": "byte[]", "declarator": "rijndaelSbox = {\n            0x63, 0x7c, 0x77, 0x7b, (byte) 0xf2, 0x6b, 0x6f, (byte) 0xc5, 0x30, 0x1, 0x67, 0x2b, (byte) 0xfe,\n            (byte) 0xd7, (byte) 0xab, 0x76, (byte) 0xca, (byte) 0x82, (byte) 0xc9, 0x7d, (byte) 0xfa, 0x59,\n            0x47, (byte) 0xf0, (byte) 0xad, (byte) 0xd4, (byte) 0xa2, (byte) 0xaf, (byte) 0x9c, (byte) 0xa4,\n            0x72, (byte) 0xc0, (byte) 0xb7, (byte) 0xfd, (byte) 0x93, 0x26, 0x36, 0x3f, (byte) 0xf7,\n            (byte) 0xcc, 0x34, (byte) 0xa5, (byte) 0xe5, (byte) 0xf1, 0x71, (byte) 0xd8, 0x31, 0x15, 0x4,\n            (byte) 0xc7, 0x23, (byte) 0xc3, 0x18, (byte) 0x96, 0x5, (byte) 0x9a, 0x7, 0x12, (byte) 0x80,\n            (byte) 0xe2, (byte) 0xeb, 0x27, (byte) 0xb2, 0x75, 0x9, (byte) 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a,\n            (byte) 0xa0, 0x52, 0x3b, (byte) 0xd6, (byte) 0xb3, 0x29, (byte) 0xe3, 0x2f, (byte) 0x84, 0x53,\n            (byte) 0xd1, 0x0, (byte) 0xed, 0x20, (byte) 0xfc, (byte) 0xb1, 0x5b, 0x6a, (byte) 0xcb,\n            (byte) 0xbe, 0x39, 0x4a, 0x4c, 0x58, (byte) 0xcf, (byte) 0xd0, (byte) 0xef, (byte) 0xaa,\n            (byte) 0xfb, 0x43, 0x4d, 0x33, (byte) 0x85, 0x45, (byte) 0xf9, 0x2, 0x7f, 0x50, 0x3c, (byte) 0x9f,\n            (byte) 0xa8, 0x51, (byte) 0xa3, 0x40, (byte) 0x8f, (byte) 0x92, (byte) 0x9d, 0x38, (byte) 0xf5,\n            (byte) 0xbc, (byte) 0xb6, (byte) 0xda, 0x21, 0x10, (byte) 0xff, (byte) 0xf3, (byte) 0xd2,\n            (byte) 0xcd, 0xc, 0x13, (byte) 0xec, 0x5f, (byte) 0x97, 0x44, 0x17, (byte) 0xc4, (byte) 0xa7, 0x7e,\n            0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, (byte) 0x81, 0x4f, (byte) 0xdc, 0x22, 0x2a, (byte) 0x90,\n            (byte) 0x88, 0x46, (byte) 0xee, (byte) 0xb8, 0x14, (byte) 0xde, 0x5e, 0xb, (byte) 0xdb,\n            (byte) 0xe0, 0x32, 0x3a, 0xa, 0x49, 0x6, 0x24, 0x5c, (byte) 0xc2, (byte) 0xd3, (byte) 0xac, 0x62,\n            (byte) 0x91, (byte) 0x95, (byte) 0xe4, 0x79, (byte) 0xe7, (byte) 0xc8, 0x37, 0x6d, (byte) 0x8d,\n            (byte) 0xd5, 0x4e, (byte) 0xa9, 0x6c, 0x56, (byte) 0xf4, (byte) 0xea, 0x65, 0x7a, (byte) 0xae, 0x8,\n            (byte) 0xba, 0x78, 0x25, 0x2e, 0x1c, (byte) 0xa6, (byte) 0xb4, (byte) 0xc6, (byte) 0xe8,\n            (byte) 0xdd, 0x74, 0x1f, 0x4b, (byte) 0xbd, (byte) 0x8b, (byte) 0x8a, 0x70, 0x3e, (byte) 0xb5,\n            0x66, 0x48, 0x3, (byte) 0xf6, 0xe, 0x61, 0x35, 0x57, (byte) 0xb9, (byte) 0x86, (byte) 0xc1, 0x1d,\n            (byte) 0x9e, (byte) 0xe1, (byte) 0xf8, (byte) 0x98, 0x11, 0x69, (byte) 0xd9, (byte) 0x8e,\n            (byte) 0x94, (byte) 0x9b, 0x1e, (byte) 0x87, (byte) 0xe9, (byte) 0xce, 0x55, 0x28, (byte) 0xdf,\n            (byte) 0x8c, (byte) 0xa1, (byte) 0x89, 0xd, (byte) 0xbf, (byte) 0xe6, 0x42, 0x68, 0x41,\n            (byte) 0x99, 0x2d, 0xf, (byte) 0xb0, 0x54, (byte) 0xbb, 0x16\n    }", "var_name": "rijndaelSbox"}], "methods": [{"identifier": "schrageRandomInt", "parameters": "(long ix)", "modifiers": "static", "return": "long", "signature": "long schrageRandomInt(long ix)", "full_signature": "static long schrageRandomInt(long ix)", "class_method_signature": "Crypt.schrageRandomInt(long ix)", "testcase": false, "constructor": false}, {"identifier": "doubleSchrage", "parameters": "(long ix)", "modifiers": "public static", "return": "long", "signature": "long doubleSchrage(long ix)", "full_signature": "public static long doubleSchrage(long ix)", "class_method_signature": "Crypt.doubleSchrage(long ix)", "testcase": false, "constructor": false}, {"identifier": "doubleSchrageSbox", "parameters": "(final long ix)", "modifiers": "public static", "return": "long", "signature": "long doubleSchrageSbox(final long ix)", "full_signature": "public static long doubleSchrageSbox(final long ix)", "class_method_signature": "Crypt.doubleSchrageSbox(final long ix)", "testcase": false, "constructor": false}, {"identifier": "getCodeBook", "parameters": "(long serial)", "modifiers": "static", "return": "byte[]", "signature": "byte[] getCodeBook(long serial)", "full_signature": "static byte[] getCodeBook(long serial)", "class_method_signature": "Crypt.getCodeBook(long serial)", "testcase": false, "constructor": false}, {"identifier": "codeBookProcess", "parameters": "(byte[] data, byte[] book)", "modifiers": "static", "return": "void", "signature": "void codeBookProcess(byte[] data, byte[] book)", "full_signature": "static void codeBookProcess(byte[] data, byte[] book)", "class_method_signature": "Crypt.codeBookProcess(byte[] data, byte[] book)", "testcase": false, "constructor": false}, {"identifier": "code", "parameters": "(byte[] data, long serial)", "modifiers": "public static", "return": "void", "signature": "void code(byte[] data, long serial)", "full_signature": "public static void code(byte[] data, long serial)", "class_method_signature": "Crypt.code(byte[] data, long serial)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/eveningoutpost/dexdrip/cgm/medtrum/Crypt.java"}, "focal_method": {"identifier": "code", "parameters": "(byte[] data, long serial)", "modifiers": "public static", "return": "void", "body": "public static void code(byte[] data, long serial) {\n        codeBookProcess(data, getCodeBook(serial));\n    }", "signature": "void code(byte[] data, long serial)", "full_signature": "public static void code(byte[] data, long serial)", "class_method_signature": "Crypt.code(byte[] data, long serial)", "testcase": false, "constructor": false, "invocations": ["codeBookProcess", "getCodeBook"]}, "repository": {"repo_id": 49717672, "url": "https://github.com/jamorham/xDrip-plus", "stars": 199, "created": "1/15/2016 12:31:22 PM +00:00", "updates": "2020-01-26T20:46:33+00:00", "fork": "False", "license": "licensed"}}