{"test_class": {"identifier": "UdfAnalyzerTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-java/src/test/java/org/apache/flink/api/java/sca/UdfAnalyzerTest.java"}, "test_case": {"identifier": "testFilterModificationException2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFilterModificationException2() {\n\t\ttry {\n\t\t\tfinal UdfAnalyzer ua = new UdfAnalyzer(FilterFunction.class, FilterMod2.class, \"operator\",\n\t\t\t\t\tTypeInfoParser.parse(\"Tuple2<String, String>\"), null, null, null, null, true);\n\t\t\tua.analyze();\n\t\t\tAssert.fail();\n\t\t}\n\t\tcatch (CodeErrorException e) {\n\t\t\t// ok\n\t\t}\n\t}", "signature": "void testFilterModificationException2()", "full_signature": "@Test public void testFilterModificationException2()", "class_method_signature": "UdfAnalyzerTest.testFilterModificationException2()", "testcase": true, "constructor": false, "invocations": ["parse", "analyze", "fail"]}, "focal_class": {"identifier": "UdfAnalyzer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MAX_NESTING = 20;", "modifier": "private static final", "type": "int", "declarator": "MAX_NESTING = 20", "var_name": "MAX_NESTING"}, {"original_string": "private final Method baseClassMethod;", "modifier": "private final", "type": "Method", "declarator": "baseClassMethod", "var_name": "baseClassMethod"}, {"original_string": "private final boolean hasCollector;", "modifier": "private final", "type": "boolean", "declarator": "hasCollector", "var_name": "hasCollector"}, {"original_string": "private final boolean isBinary;", "modifier": "private final", "type": "boolean", "declarator": "isBinary", "var_name": "isBinary"}, {"original_string": "private final boolean isIterableInput;", "modifier": "private final", "type": "boolean", "declarator": "isIterableInput", "var_name": "isIterableInput"}, {"original_string": "private final boolean isReduceFunction;", "modifier": "private final", "type": "boolean", "declarator": "isReduceFunction", "var_name": "isReduceFunction"}, {"original_string": "private final boolean isFilterFunction;", "modifier": "private final", "type": "boolean", "declarator": "isFilterFunction", "var_name": "isFilterFunction"}, {"original_string": "private final Class<?> udfClass;", "modifier": "private final", "type": "Class<?>", "declarator": "udfClass", "var_name": "udfClass"}, {"original_string": "private final String externalUdfName;", "modifier": "private final", "type": "String", "declarator": "externalUdfName", "var_name": "externalUdfName"}, {"original_string": "private final String internalUdfClassName;", "modifier": "private final", "type": "String", "declarator": "internalUdfClassName", "var_name": "internalUdfClassName"}, {"original_string": "private final TypeInformation<?> in1Type;", "modifier": "private final", "type": "TypeInformation<?>", "declarator": "in1Type", "var_name": "in1Type"}, {"original_string": "private final TypeInformation<?> in2Type;", "modifier": "private final", "type": "TypeInformation<?>", "declarator": "in2Type", "var_name": "in2Type"}, {"original_string": "private final TypeInformation<?> outType;", "modifier": "private final", "type": "TypeInformation<?>", "declarator": "outType", "var_name": "outType"}, {"original_string": "private final Keys<?> keys1;", "modifier": "private final", "type": "Keys<?>", "declarator": "keys1", "var_name": "keys1"}, {"original_string": "private final Keys<?> keys2;", "modifier": "private final", "type": "Keys<?>", "declarator": "keys2", "var_name": "keys2"}, {"original_string": "private final boolean throwErrorExceptions;", "modifier": "private final", "type": "boolean", "declarator": "throwErrorExceptions", "var_name": "throwErrorExceptions"}, {"original_string": "private final List<TaggedValue> collectorValues;", "modifier": "private final", "type": "List<TaggedValue>", "declarator": "collectorValues", "var_name": "collectorValues"}, {"original_string": "private final List<String> hints;", "modifier": "private final", "type": "List<String>", "declarator": "hints", "var_name": "hints"}, {"original_string": "private boolean warning = false;", "modifier": "private", "type": "boolean", "declarator": "warning = false", "var_name": "warning"}, {"original_string": "private int state = STATE_CAPTURE_RETURN;", "modifier": "private", "type": "int", "declarator": "state = STATE_CAPTURE_RETURN", "var_name": "state"}, {"original_string": "static final int STATE_CAPTURE_RETURN = 0;", "modifier": "static final", "type": "int", "declarator": "STATE_CAPTURE_RETURN = 0", "var_name": "STATE_CAPTURE_RETURN"}, {"original_string": "static final int STATE_CAPTURE_THIS = 1;", "modifier": "static final", "type": "int", "declarator": "STATE_CAPTURE_THIS = 1", "var_name": "STATE_CAPTURE_THIS"}, {"original_string": "static final int STATE_CAPTURE_INPUT1 = 2;", "modifier": "static final", "type": "int", "declarator": "STATE_CAPTURE_INPUT1 = 2", "var_name": "STATE_CAPTURE_INPUT1"}, {"original_string": "static final int STATE_CAPTURE_INPUT2 = 3;", "modifier": "static final", "type": "int", "declarator": "STATE_CAPTURE_INPUT2 = 3", "var_name": "STATE_CAPTURE_INPUT2"}, {"original_string": "static final int STATE_CAPTURE_COLLECTOR = 4;", "modifier": "static final", "type": "int", "declarator": "STATE_CAPTURE_COLLECTOR = 4", "var_name": "STATE_CAPTURE_COLLECTOR"}, {"original_string": "static final int STATE_END_OF_CAPTURING = 5;", "modifier": "static final", "type": "int", "declarator": "STATE_END_OF_CAPTURING = 5", "var_name": "STATE_END_OF_CAPTURING"}, {"original_string": "static final int STATE_END_OF_ANALYZING = 6;", "modifier": "static final", "type": "int", "declarator": "STATE_END_OF_ANALYZING = 6", "var_name": "STATE_END_OF_ANALYZING"}, {"original_string": "private boolean iteratorTrueAssumptionApplied;", "modifier": "private", "type": "boolean", "declarator": "iteratorTrueAssumptionApplied", "var_name": "iteratorTrueAssumptionApplied"}, {"original_string": "private TaggedValue returnValue;", "modifier": "private", "type": "TaggedValue", "declarator": "returnValue", "var_name": "returnValue"}, {"original_string": "private int newOperationCounterOverall;", "modifier": "private", "type": "int", "declarator": "newOperationCounterOverall", "var_name": "newOperationCounterOverall"}, {"original_string": "private int newOperationCounterTopLevel;", "modifier": "private", "type": "int", "declarator": "newOperationCounterTopLevel", "var_name": "newOperationCounterTopLevel"}, {"original_string": "private TaggedValue filterInputCopy;", "modifier": "private", "type": "TaggedValue", "declarator": "filterInputCopy", "var_name": "filterInputCopy"}, {"original_string": "private TaggedValue filterInputRef;", "modifier": "private", "type": "TaggedValue", "declarator": "filterInputRef", "var_name": "filterInputRef"}], "methods": [{"identifier": "UdfAnalyzer", "parameters": "(Class<?> baseClass, Class<?> udfClass, String externalUdfName,\n\t\t\tTypeInformation<?> in1Type, TypeInformation<?> in2Type,\n\t\t\tTypeInformation<?> outType, Keys<?> keys1, Keys<?> keys2,\n\t\t\tboolean throwErrorExceptions)", "modifiers": "public", "return": "", "signature": " UdfAnalyzer(Class<?> baseClass, Class<?> udfClass, String externalUdfName,\n\t\t\tTypeInformation<?> in1Type, TypeInformation<?> in2Type,\n\t\t\tTypeInformation<?> outType, Keys<?> keys1, Keys<?> keys2,\n\t\t\tboolean throwErrorExceptions)", "full_signature": "public  UdfAnalyzer(Class<?> baseClass, Class<?> udfClass, String externalUdfName,\n\t\t\tTypeInformation<?> in1Type, TypeInformation<?> in2Type,\n\t\t\tTypeInformation<?> outType, Keys<?> keys1, Keys<?> keys2,\n\t\t\tboolean throwErrorExceptions)", "class_method_signature": "UdfAnalyzer.UdfAnalyzer(Class<?> baseClass, Class<?> udfClass, String externalUdfName,\n\t\t\tTypeInformation<?> in1Type, TypeInformation<?> in2Type,\n\t\t\tTypeInformation<?> outType, Keys<?> keys1, Keys<?> keys2,\n\t\t\tboolean throwErrorExceptions)", "testcase": false, "constructor": true}, {"identifier": "getState", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getState()", "full_signature": "public int getState()", "class_method_signature": "UdfAnalyzer.getState()", "testcase": false, "constructor": false}, {"identifier": "setState", "parameters": "(int state)", "modifiers": "public", "return": "void", "signature": "void setState(int state)", "full_signature": "public void setState(int state)", "class_method_signature": "UdfAnalyzer.setState(int state)", "testcase": false, "constructor": false}, {"identifier": "isUdfBinary", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUdfBinary()", "full_signature": "public boolean isUdfBinary()", "class_method_signature": "UdfAnalyzer.isUdfBinary()", "testcase": false, "constructor": false}, {"identifier": "isIteratorTrueAssumptionApplied", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIteratorTrueAssumptionApplied()", "full_signature": "public boolean isIteratorTrueAssumptionApplied()", "class_method_signature": "UdfAnalyzer.isIteratorTrueAssumptionApplied()", "testcase": false, "constructor": false}, {"identifier": "applyIteratorTrueAssumption", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void applyIteratorTrueAssumption()", "full_signature": "public void applyIteratorTrueAssumption()", "class_method_signature": "UdfAnalyzer.applyIteratorTrueAssumption()", "testcase": false, "constructor": false}, {"identifier": "incrNewOperationCounters", "parameters": "(boolean topLevel)", "modifiers": "public", "return": "void", "signature": "void incrNewOperationCounters(boolean topLevel)", "full_signature": "public void incrNewOperationCounters(boolean topLevel)", "class_method_signature": "UdfAnalyzer.incrNewOperationCounters(boolean topLevel)", "testcase": false, "constructor": false}, {"identifier": "hasUdfCollector", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasUdfCollector()", "full_signature": "public boolean hasUdfCollector()", "class_method_signature": "UdfAnalyzer.hasUdfCollector()", "testcase": false, "constructor": false}, {"identifier": "hasUdfIterableInput", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasUdfIterableInput()", "full_signature": "public boolean hasUdfIterableInput()", "class_method_signature": "UdfAnalyzer.hasUdfIterableInput()", "testcase": false, "constructor": false}, {"identifier": "isUdfReduceFunction", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUdfReduceFunction()", "full_signature": "public boolean isUdfReduceFunction()", "class_method_signature": "UdfAnalyzer.isUdfReduceFunction()", "testcase": false, "constructor": false}, {"identifier": "getInternalUdfClassName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInternalUdfClassName()", "full_signature": "public String getInternalUdfClassName()", "class_method_signature": "UdfAnalyzer.getInternalUdfClassName()", "testcase": false, "constructor": false}, {"identifier": "getCollectorValues", "parameters": "()", "modifiers": "public", "return": "List<TaggedValue>", "signature": "List<TaggedValue> getCollectorValues()", "full_signature": "public List<TaggedValue> getCollectorValues()", "class_method_signature": "UdfAnalyzer.getCollectorValues()", "testcase": false, "constructor": false}, {"identifier": "analyze", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean analyze()", "full_signature": "public boolean analyze()", "class_method_signature": "UdfAnalyzer.analyze()", "testcase": false, "constructor": false}, {"identifier": "getSemanticProperties", "parameters": "()", "modifiers": "public", "return": "SemanticProperties", "signature": "SemanticProperties getSemanticProperties()", "full_signature": "public SemanticProperties getSemanticProperties()", "class_method_signature": "UdfAnalyzer.getSemanticProperties()", "testcase": false, "constructor": false}, {"identifier": "addSemanticPropertiesHints", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void addSemanticPropertiesHints()", "full_signature": "public void addSemanticPropertiesHints()", "class_method_signature": "UdfAnalyzer.addSemanticPropertiesHints()", "testcase": false, "constructor": false}, {"identifier": "printToLogger", "parameters": "(Logger log)", "modifiers": "public", "return": "void", "signature": "void printToLogger(Logger log)", "full_signature": "public void printToLogger(Logger log)", "class_method_signature": "UdfAnalyzer.printToLogger(Logger log)", "testcase": false, "constructor": false}, {"identifier": "getInput1AsTaggedValue", "parameters": "()", "modifiers": "public", "return": "TaggedValue", "signature": "TaggedValue getInput1AsTaggedValue()", "full_signature": "public TaggedValue getInput1AsTaggedValue()", "class_method_signature": "UdfAnalyzer.getInput1AsTaggedValue()", "testcase": false, "constructor": false}, {"identifier": "getInput2AsTaggedValue", "parameters": "()", "modifiers": "public", "return": "TaggedValue", "signature": "TaggedValue getInput2AsTaggedValue()", "full_signature": "public TaggedValue getInput2AsTaggedValue()", "class_method_signature": "UdfAnalyzer.getInput2AsTaggedValue()", "testcase": false, "constructor": false}, {"identifier": "addHintOrThrowException", "parameters": "(String msg)", "modifiers": "private", "return": "void", "signature": "void addHintOrThrowException(String msg)", "full_signature": "private void addHintOrThrowException(String msg)", "class_method_signature": "UdfAnalyzer.addHintOrThrowException(String msg)", "testcase": false, "constructor": false}, {"identifier": "handleNullReturn", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void handleNullReturn()", "full_signature": "public void handleNullReturn()", "class_method_signature": "UdfAnalyzer.handleNullReturn()", "testcase": false, "constructor": false}, {"identifier": "handlePutStatic", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void handlePutStatic()", "full_signature": "public void handlePutStatic()", "class_method_signature": "UdfAnalyzer.handlePutStatic()", "testcase": false, "constructor": false}, {"identifier": "handleInvalidTupleAccess", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void handleInvalidTupleAccess()", "full_signature": "public void handleInvalidTupleAccess()", "class_method_signature": "UdfAnalyzer.handleInvalidTupleAccess()", "testcase": false, "constructor": false}], "file": "flink-java/src/main/java/org/apache/flink/api/java/sca/UdfAnalyzer.java"}, "focal_method": {"identifier": "analyze", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean analyze() throws CodeAnalyzerException {\n\t\tif (state == STATE_END_OF_ANALYZING) {\n\t\t\tthrow new IllegalStateException(\"Analyzing is already done.\");\n\t\t}\n\t\t\n\t\tboolean discardReturnValues = false;\n\n\t\tif (isIterableInput) {\n\t\t\tif (keys1 == null || (keys2 == null && isBinary)) {\n\t\t\t\tthrow new IllegalArgumentException(\"This type of function requires key information for analysis.\");\n\t\t\t}\n\t\t\telse if (!(keys1 instanceof ExpressionKeys) || (!(keys2 instanceof ExpressionKeys) && isBinary)) {\n\t\t\t\t// TODO currently only ExpressionKeys are supported as keys\n\t\t\t\tdiscardReturnValues = true;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tfinal Object[] mn = findMethodNode(internalUdfClassName, baseClassMethod);\n\t\t\tfinal NestedMethodAnalyzer nma = new NestedMethodAnalyzer(this, (String) mn[1],\n\t\t\t\t\t(MethodNode) mn[0], null, MAX_NESTING, true);\n\t\t\tfinal TaggedValue result = nma.analyze();\n\t\t\tsetState(STATE_END_OF_ANALYZING);\n\n\t\t\t// special case: FilterFunction\n\t\t\tif (isFilterFunction) {\n\t\t\t\tdiscardReturnValues = true;\n\t\t\t\t// check for input modification\n\t\t\t\tif (!filterInputCopy.equals(filterInputRef)) {\n\t\t\t\t\taddHintOrThrowException(\"Function modifies the input. This can lead to unexpected behaviour during runtime.\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!discardReturnValues) {\n\t\t\t\t// merge return values of a collector\n\t\t\t\tif (hasCollector) {\n\t\t\t\t\treturnValue = mergeReturnValues(collectorValues);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturnValue = result;\n\t\t\t\t}\n\t\t\t\t// remove ungrouped inputs from result if UDF has iterators\n\t\t\t\t// or is a reduce function\n\t\t\t\tif ((isIterableInput || isReduceFunction) && returnValue != null) {\n\t\t\t\t\tif (returnValue.canContainFields()) {\n\t\t\t\t\t\tremoveUngroupedInputsFromContainer(returnValue);\n\t\t\t\t\t}\n\t\t\t\t\telse if (returnValue.isInput() && !returnValue.isGrouped()) {\n\t\t\t\t\t\treturnValue = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// any return value is invalid\n\t\t\telse {\n\t\t\t\treturnValue = null;\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tThrowable cause = e.getCause();\n\t\t\twhile (cause != null && !(cause instanceof CodeErrorException)) {\n\t\t\t\tcause = cause.getCause();\n\t\t\t}\n\t\t\tif ((cause != null && cause instanceof CodeErrorException) || e instanceof CodeErrorException) {\n\t\t\t\tthrow new CodeErrorException(\"Function code contains obvious errors. \" +\n\t\t\t\t\t\t\"If you think the code analysis is wrong at this point you can \" +\n\t\t\t\t\t\t\"disable the entire code analyzer in ExecutionConfig or add\" +\n\t\t\t\t\t\t\" @SkipCodeAnalysis to your function to disable the analysis.\",\n\t\t\t\t\t\t(cause != null)? cause : e);\n\t\t\t}\n\t\t\tthrow new CodeAnalyzerException(\"Exception occurred during code analysis.\", e);\n\t\t}\n\t\treturn true;\n\t}", "signature": "boolean analyze()", "full_signature": "public boolean analyze()", "class_method_signature": "UdfAnalyzer.analyze()", "testcase": false, "constructor": false, "invocations": ["findMethodNode", "analyze", "setState", "equals", "addHintOrThrowException", "mergeReturnValues", "canContainFields", "removeUngroupedInputsFromContainer", "isInput", "isGrouped", "getCause", "getCause"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}