{"test_class": {"identifier": "DXHTTPRequestTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper mapper = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}], "file": "src/java/src/test/java/com/dnanexus/DXHTTPRequestTest.java"}, "test_case": {"identifier": "testRetryDisabledDoesNotAffectError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRetryDisabledDoesNotAffectError() throws IOException {\n        // Create environment that disables retry logic with 4xx error\n        DXEnvironment env = DXEnvironment.Builder.fromDefaults().disableRetry().setBearerToken(\"BOGUS\").build();\n\n        // Check that retry really is disabled\n        Assert.assertTrue(env.isRetryDisabled());\n\n        boolean thrown = false;\n        long startTime = System.currentTimeMillis();\n\n        // Tests deserialization of InvalidAuthentication\n        DXHTTPRequest c = new DXHTTPRequest(env);\n        try {\n            c.request(\"/system/findDataObjects\", DXJSON.parseJson(\"{}\"),\n                    RetryStrategy.SAFE_TO_RETRY);\n            Assert.fail(\"Expected findDataObjects to fail with InvalidAuthentication\");\n        } catch (InvalidAuthenticationException e) {\n            thrown = true;\n            long timeElapsed = System.currentTimeMillis() - startTime;\n            Assert.assertTrue(timeElapsed < 2500);\n\n            // Error message should be something like\n            // \"the token could not be found\"\n            Assert.assertTrue(e.toString().contains(\"token\"));\n            Assert.assertEquals(401, e.getStatusCode());\n        }\n\n        Assert.assertTrue(thrown);\n    }", "signature": "void testRetryDisabledDoesNotAffectError()", "full_signature": "@Test public void testRetryDisabledDoesNotAffectError()", "class_method_signature": "DXHTTPRequestTest.testRetryDisabledDoesNotAffectError()", "testcase": true, "constructor": false, "invocations": ["build", "setBearerToken", "disableRetry", "fromDefaults", "assertTrue", "isRetryDisabled", "currentTimeMillis", "request", "parseJson", "fail", "currentTimeMillis", "assertTrue", "assertTrue", "contains", "toString", "assertEquals", "getStatusCode", "assertTrue"]}, "focal_class": {"identifier": "DXHTTPRequest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final JsonNode securityContext;", "modifier": "private final", "type": "JsonNode", "declarator": "securityContext", "var_name": "securityContext"}, {"original_string": "private final String apiserver;", "modifier": "private final", "type": "String", "declarator": "apiserver", "var_name": "apiserver"}, {"original_string": "protected final HttpClient httpclient;", "modifier": "protected final", "type": "HttpClient", "declarator": "httpclient", "var_name": "httpclient"}, {"original_string": "private final boolean disableRetry;", "modifier": "private final", "type": "boolean", "declarator": "disableRetry", "var_name": "disableRetry"}, {"original_string": "private static final int NUM_RETRIES = 6;", "modifier": "private static final", "type": "int", "declarator": "NUM_RETRIES = 6", "var_name": "NUM_RETRIES"}, {"original_string": "private static final DXEnvironment defaultEnv = DXEnvironment.create();", "modifier": "private static final", "type": "DXEnvironment", "declarator": "defaultEnv = DXEnvironment.create()", "var_name": "defaultEnv"}, {"original_string": "private static final String USER_AGENT = DXUserAgent.getUserAgent();", "modifier": "private static final", "type": "String", "declarator": "USER_AGENT = DXUserAgent.getUserAgent()", "var_name": "USER_AGENT"}], "methods": [{"identifier": "sleep", "parameters": "(int seconds)", "modifiers": "private static", "return": "void", "signature": "void sleep(int seconds)", "full_signature": "private static void sleep(int seconds)", "class_method_signature": "DXHTTPRequest.sleep(int seconds)", "testcase": false, "constructor": false}, {"identifier": "errorMessage", "parameters": "(String method, String resource, String errorString,\n            int retryWait, int nextRetryNum, int maxRetries)", "modifiers": "private static", "return": "String", "signature": "String errorMessage(String method, String resource, String errorString,\n            int retryWait, int nextRetryNum, int maxRetries)", "full_signature": "private static String errorMessage(String method, String resource, String errorString,\n            int retryWait, int nextRetryNum, int maxRetries)", "class_method_signature": "DXHTTPRequest.errorMessage(String method, String resource, String errorString,\n            int retryWait, int nextRetryNum, int maxRetries)", "testcase": false, "constructor": false}, {"identifier": "logError", "parameters": "(String msg)", "modifiers": "private static", "return": "void", "signature": "void logError(String msg)", "full_signature": "private static void logError(String msg)", "class_method_signature": "DXHTTPRequest.logError(String msg)", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "(HttpResponse response, String headerName)", "modifiers": "private static", "return": "String", "signature": "String getHeader(HttpResponse response, String headerName)", "full_signature": "private static String getHeader(HttpResponse response, String headerName)", "class_method_signature": "DXHTTPRequest.getHeader(HttpResponse response, String headerName)", "testcase": false, "constructor": false}, {"identifier": "DXHTTPRequest", "parameters": "()", "modifiers": "public", "return": "", "signature": " DXHTTPRequest()", "full_signature": "public  DXHTTPRequest()", "class_method_signature": "DXHTTPRequest.DXHTTPRequest()", "testcase": false, "constructor": true}, {"identifier": "DXHTTPRequest", "parameters": "(DXEnvironment env)", "modifiers": "public", "return": "", "signature": " DXHTTPRequest(DXEnvironment env)", "full_signature": "public  DXHTTPRequest(DXEnvironment env)", "class_method_signature": "DXHTTPRequest.DXHTTPRequest(DXEnvironment env)", "testcase": false, "constructor": true}, {"identifier": "getHttpClient", "parameters": "()", "modifiers": "protected", "return": "HttpClient", "signature": "HttpClient getHttpClient()", "full_signature": "protected HttpClient getHttpClient()", "class_method_signature": "DXHTTPRequest.getHttpClient()", "testcase": false, "constructor": false}, {"identifier": "getHttpContext", "parameters": "()", "modifiers": "protected", "return": "HttpContext", "signature": "HttpContext getHttpContext()", "full_signature": "protected HttpContext getHttpContext()", "class_method_signature": "DXHTTPRequest.getHttpContext()", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(String resource, JsonNode data)", "modifiers": "@Deprecated public", "return": "JsonNode", "signature": "JsonNode request(String resource, JsonNode data)", "full_signature": "@Deprecated public JsonNode request(String resource, JsonNode data)", "class_method_signature": "DXHTTPRequest.request(String resource, JsonNode data)", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(String resource, JsonNode data, RetryStrategy retryStrategy)", "modifiers": "public", "return": "JsonNode", "signature": "JsonNode request(String resource, JsonNode data, RetryStrategy retryStrategy)", "full_signature": "public JsonNode request(String resource, JsonNode data, RetryStrategy retryStrategy)", "class_method_signature": "DXHTTPRequest.request(String resource, JsonNode data, RetryStrategy retryStrategy)", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(String resource, String data)", "modifiers": "@Deprecated public", "return": "String", "signature": "String request(String resource, String data)", "full_signature": "@Deprecated public String request(String resource, String data)", "class_method_signature": "DXHTTPRequest.request(String resource, String data)", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(String resource, String data, RetryStrategy retryStrategy)", "modifiers": "public", "return": "String", "signature": "String request(String resource, String data, RetryStrategy retryStrategy)", "full_signature": "public String request(String resource, String data, RetryStrategy retryStrategy)", "class_method_signature": "DXHTTPRequest.request(String resource, String data, RetryStrategy retryStrategy)", "testcase": false, "constructor": false}, {"identifier": "requestImpl", "parameters": "(String resource, String data, boolean parseResponse,\n            RetryStrategy retryStrategy)", "modifiers": "private", "return": "ParsedResponse", "signature": "ParsedResponse requestImpl(String resource, String data, boolean parseResponse,\n            RetryStrategy retryStrategy)", "full_signature": "private ParsedResponse requestImpl(String resource, String data, boolean parseResponse,\n            RetryStrategy retryStrategy)", "class_method_signature": "DXHTTPRequest.requestImpl(String resource, String data, boolean parseResponse,\n            RetryStrategy retryStrategy)", "testcase": false, "constructor": false}], "file": "src/java/src/main/java/com/dnanexus/DXHTTPRequest.java"}, "focal_method": {"identifier": "request", "parameters": "(String resource, JsonNode data)", "modifiers": "@Deprecated public", "return": "JsonNode", "body": "@Deprecated\n    public JsonNode request(String resource, JsonNode data) {\n        return request(resource, data, RetryStrategy.SAFE_TO_RETRY);\n    }", "signature": "JsonNode request(String resource, JsonNode data)", "full_signature": "@Deprecated public JsonNode request(String resource, JsonNode data)", "class_method_signature": "DXHTTPRequest.request(String resource, JsonNode data)", "testcase": false, "constructor": false, "invocations": ["request"]}, "repository": {"repo_id": 4802269, "url": "https://github.com/dnanexus/dx-toolkit", "stars": 59, "created": "6/27/2012 12:23:47 AM +00:00", "updates": "2020-01-21T16:35:18+00:00", "fork": "False", "license": "licensed"}}