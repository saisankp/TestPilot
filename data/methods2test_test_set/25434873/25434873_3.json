{"test_class": {"identifier": "ConvertersTest", "superclass": "", "interfaces": "", "fields": [], "file": "zuchini-runner/src/test/java/org/zuchini/runner/ConvertersTest.java"}, "test_case": {"identifier": "shouldConvertNullableParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldConvertNullableParameter() {\n        final Scope scope = new EmptyScope();\n        final Converter<Integer> converter = Converters.getConverter(scope, Integer.class);\n\n        Integer value = converter.convert(null);\n\n        Assert.assertNull(\"should support null value\", value);\n    }", "signature": "void shouldConvertNullableParameter()", "full_signature": "@Test public void shouldConvertNullableParameter()", "class_method_signature": "ConvertersTest.shouldConvertNullableParameter()", "testcase": true, "constructor": false, "invocations": ["getConverter", "convert", "assertNull"]}, "focal_class": {"identifier": "Converters", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Annotation[] EMPTY_ANNOTATIONS = new Annotation[0];", "modifier": "private static final", "type": "Annotation[]", "declarator": "EMPTY_ANNOTATIONS = new Annotation[0]", "var_name": "EMPTY_ANNOTATIONS"}, {"original_string": "private static final Map<Class<?>, Converter<?>> DEFAULT_CONVERTERS;", "modifier": "private static final", "type": "Map<Class<?>, Converter<?>>", "declarator": "DEFAULT_CONVERTERS", "var_name": "DEFAULT_CONVERTERS"}], "methods": [{"identifier": "Converters", "parameters": "()", "modifiers": "private", "return": "", "signature": " Converters()", "full_signature": "private  Converters()", "class_method_signature": "Converters.Converters()", "testcase": false, "constructor": true}, {"identifier": "getConverter", "parameters": "(Scope scope, Class<T> parameterType)", "modifiers": "static", "return": "Converter<T>", "signature": "Converter<T> getConverter(Scope scope, Class<T> parameterType)", "full_signature": "static Converter<T> getConverter(Scope scope, Class<T> parameterType)", "class_method_signature": "Converters.getConverter(Scope scope, Class<T> parameterType)", "testcase": false, "constructor": false}, {"identifier": "getConverter", "parameters": "(Scope scope, Class<T> parameterType, Annotation[] parameterAnnotations)", "modifiers": "static", "return": "Converter<T>", "signature": "Converter<T> getConverter(Scope scope, Class<T> parameterType, Annotation[] parameterAnnotations)", "full_signature": "static Converter<T> getConverter(Scope scope, Class<T> parameterType, Annotation[] parameterAnnotations)", "class_method_signature": "Converters.getConverter(Scope scope, Class<T> parameterType, Annotation[] parameterAnnotations)", "testcase": false, "constructor": false}, {"identifier": "newEnumConverter", "parameters": "(Class<?> parameterType)", "modifiers": "@SuppressWarnings(\"unchecked\") static", "return": "Converter<T>", "signature": "Converter<T> newEnumConverter(Class<?> parameterType)", "full_signature": "@SuppressWarnings(\"unchecked\") static Converter<T> newEnumConverter(Class<?> parameterType)", "class_method_signature": "Converters.newEnumConverter(Class<?> parameterType)", "testcase": false, "constructor": false}, {"identifier": "cast", "parameters": "(Class<T> parameterType, Converter<?> converter)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "Converter<T>", "signature": "Converter<T> cast(Class<T> parameterType, Converter<?> converter)", "full_signature": "@SuppressWarnings(\"unchecked\") private static Converter<T> cast(Class<T> parameterType, Converter<?> converter)", "class_method_signature": "Converters.cast(Class<T> parameterType, Converter<?> converter)", "testcase": false, "constructor": false}], "file": "zuchini-runner/src/main/java/org/zuchini/runner/Converters.java"}, "focal_method": {"identifier": "getConverter", "parameters": "(Scope scope, Class<T> parameterType)", "modifiers": "static", "return": "Converter<T>", "body": "static <T> Converter<T> getConverter(Scope scope, Class<T> parameterType) {\n        return getConverter(scope, parameterType, EMPTY_ANNOTATIONS);\n    }", "signature": "Converter<T> getConverter(Scope scope, Class<T> parameterType)", "full_signature": "static Converter<T> getConverter(Scope scope, Class<T> parameterType)", "class_method_signature": "Converters.getConverter(Scope scope, Class<T> parameterType)", "testcase": false, "constructor": false, "invocations": ["getConverter"]}, "repository": {"repo_id": 25434873, "url": "https://github.com/jhorstmann/zuchini", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 339, "license": "licensed"}}