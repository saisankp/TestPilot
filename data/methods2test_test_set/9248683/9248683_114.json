{"test_class": {"identifier": "SolrQueryTranslatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PropertyResolver resolver = new SimplePropertyResolver();", "modifier": "private final", "type": "PropertyResolver", "declarator": "resolver = new SimplePropertyResolver()", "var_name": "resolver"}, {"original_string": "private final SolrQueryTranslator translator = new SolrQueryTranslator(resolver);", "modifier": "private final", "type": "SolrQueryTranslator", "declarator": "translator = new SolrQueryTranslator(resolver)", "var_name": "translator"}, {"original_string": "private final String property = \"propertyName\";", "modifier": "private final", "type": "String", "declarator": "property = \"propertyName\"", "var_name": "property"}, {"original_string": "private final String value = \"test property value\";", "modifier": "private final", "type": "String", "declarator": "value = \"test property value\"", "var_name": "value"}, {"original_string": "private final Integer from = 1;", "modifier": "private final", "type": "Integer", "declarator": "from = 1", "var_name": "from"}, {"original_string": "private final Integer to = 10;", "modifier": "private final", "type": "Integer", "declarator": "to = 10", "var_name": "to"}, {"original_string": "private final String[] values = { \"test\", \"value\", \"array\" };", "modifier": "private final", "type": "String[]", "declarator": "values = { \"test\", \"value\", \"array\" }", "var_name": "values"}, {"original_string": "private final double x = 1.0;", "modifier": "private final", "type": "double", "declarator": "x = 1.0", "var_name": "x"}, {"original_string": "private final double y = 2.0;", "modifier": "private final", "type": "double", "declarator": "y = 2.0", "var_name": "y"}, {"original_string": "private final double distance = 3.5;", "modifier": "private final", "type": "double", "declarator": "distance = 3.5", "var_name": "distance"}, {"original_string": "private final String opTO =  \" \" + SolrOperator.TO + \" \";", "modifier": "private final", "type": "String", "declarator": "opTO =  \" \" + SolrOperator.TO + \" \"", "var_name": "opTO"}, {"original_string": "private final String opOR =  \" \" + SolrOperator.OR + \" \";", "modifier": "private final", "type": "String", "declarator": "opOR =  \" \" + SolrOperator.OR + \" \"", "var_name": "opOR"}, {"original_string": "private final String opAND =  \" \" + SolrOperator.AND + \" \";", "modifier": "private final", "type": "String", "declarator": "opAND =  \" \" + SolrOperator.AND + \" \"", "var_name": "opAND"}, {"original_string": "private final String opALL =  \"[* TO *]\";", "modifier": "private final", "type": "String", "declarator": "opALL =  \"[* TO *]\"", "var_name": "opALL"}], "file": "seeking-solr/src/test/java/com/eharmony/matching/seeking/translator/solr/SolrQueryTranslatorTest.java"}, "test_case": {"identifier": "or_one", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void or_one() {\n        assertEquals(\"\", translator.or());\n    }", "signature": "void or_one()", "full_signature": "@Test public void or_one()", "class_method_signature": "SolrQueryTranslatorTest.or_one()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "or"]}, "focal_class": {"identifier": "SolrQueryTranslator", "superclass": "extends\n        AbstractQueryTranslator<String, SolrOrderings, List<String>>", "interfaces": "implements\n        QueryTranslator<String, SolrOrderings, List<String>>", "fields": [{"original_string": "public static final String TIMESTAMP_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss'Z'\";", "modifier": "public static final", "type": "String", "declarator": "TIMESTAMP_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss'Z'\"", "var_name": "TIMESTAMP_FORMAT"}, {"original_string": "private final DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(TIMESTAMP_FORMAT);", "modifier": "private final", "type": "DateTimeFormatter", "declarator": "dateFormatter = DateTimeFormat.forPattern(TIMESTAMP_FORMAT)", "var_name": "dateFormatter"}, {"original_string": "private final Function<Object, String> toString = new Function<Object, String>() {\n        @Override\n        public String apply(Object o) {\n            return string(o);\n        }\n    };", "modifier": "private final", "type": "Function<Object, String>", "declarator": "toString = new Function<Object, String>() {\n        @Override\n        public String apply(Object o) {\n            return string(o);\n        }\n    }", "var_name": "toString"}], "methods": [{"identifier": "SolrQueryTranslator", "parameters": "(PropertyResolver propertyResolver)", "modifiers": "public", "return": "", "signature": " SolrQueryTranslator(PropertyResolver propertyResolver)", "full_signature": "public  SolrQueryTranslator(PropertyResolver propertyResolver)", "class_method_signature": "SolrQueryTranslator.SolrQueryTranslator(PropertyResolver propertyResolver)", "testcase": false, "constructor": true}, {"identifier": "string", "parameters": "(Object o)", "modifiers": "protected", "return": "String", "signature": "String string(Object o)", "full_signature": "protected String string(Object o)", "class_method_signature": "SolrQueryTranslator.string(Object o)", "testcase": false, "constructor": false}, {"identifier": "fq", "parameters": "(String fieldName, String value)", "modifiers": "protected", "return": "String", "signature": "String fq(String fieldName, String value)", "full_signature": "protected String fq(String fieldName, String value)", "class_method_signature": "SolrQueryTranslator.fq(String fieldName, String value)", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "(String query)", "modifiers": "protected", "return": "String", "signature": "String negate(String query)", "full_signature": "protected String negate(String query)", "class_method_signature": "SolrQueryTranslator.negate(String query)", "testcase": false, "constructor": false}, {"identifier": "range", "parameters": "(String from, String to, boolean fromInclusive, boolean toInclusive)", "modifiers": "protected", "return": "String", "signature": "String range(String from, String to, boolean fromInclusive, boolean toInclusive)", "full_signature": "protected String range(String from, String to, boolean fromInclusive, boolean toInclusive)", "class_method_signature": "SolrQueryTranslator.range(String from, String to, boolean fromInclusive, boolean toInclusive)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(\n            Distance2dExpression<N> e, Class<T> entityClass)", "modifiers": "@Override protected", "return": "String", "signature": "String translate(\n            Distance2dExpression<N> e, Class<T> entityClass)", "full_signature": "@Override protected String translate(\n            Distance2dExpression<N> e, Class<T> entityClass)", "class_method_signature": "SolrQueryTranslator.translate(\n            Distance2dExpression<N> e, Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(NativeExpression e, Class<T> entityClass)", "modifiers": "@Override protected", "return": "String", "signature": "String translate(NativeExpression e, Class<T> entityClass)", "full_signature": "@Override protected String translate(NativeExpression e, Class<T> entityClass)", "class_method_signature": "SolrQueryTranslator.translate(NativeExpression e, Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "eq", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "String", "signature": "String eq(String fieldName, Object value)", "full_signature": "@Override public String eq(String fieldName, Object value)", "class_method_signature": "SolrQueryTranslator.eq(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "ne", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "String", "signature": "String ne(String fieldName, Object value)", "full_signature": "@Override public String ne(String fieldName, Object value)", "class_method_signature": "SolrQueryTranslator.ne(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "lt", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "String", "signature": "String lt(String fieldName, Object value)", "full_signature": "@Override public String lt(String fieldName, Object value)", "class_method_signature": "SolrQueryTranslator.lt(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "lte", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "String", "signature": "String lte(String fieldName, Object value)", "full_signature": "@Override public String lte(String fieldName, Object value)", "class_method_signature": "SolrQueryTranslator.lte(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "gt", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "String", "signature": "String gt(String fieldName, Object value)", "full_signature": "@Override public String gt(String fieldName, Object value)", "class_method_signature": "SolrQueryTranslator.gt(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "gte", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "String", "signature": "String gte(String fieldName, Object value)", "full_signature": "@Override public String gte(String fieldName, Object value)", "class_method_signature": "SolrQueryTranslator.gte(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "between", "parameters": "(String fieldName, Object from, Object to)", "modifiers": "@Override public", "return": "String", "signature": "String between(String fieldName, Object from, Object to)", "full_signature": "@Override public String between(String fieldName, Object from, Object to)", "class_method_signature": "SolrQueryTranslator.between(String fieldName, Object from, Object to)", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "(String fieldName, Object[] values)", "modifiers": "@Override public", "return": "String", "signature": "String in(String fieldName, Object[] values)", "full_signature": "@Override public String in(String fieldName, Object[] values)", "class_method_signature": "SolrQueryTranslator.in(String fieldName, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "notIn", "parameters": "(String fieldName, Object[] values)", "modifiers": "@Override public", "return": "String", "signature": "String notIn(String fieldName, Object[] values)", "full_signature": "@Override public String notIn(String fieldName, Object[] values)", "class_method_signature": "SolrQueryTranslator.notIn(String fieldName, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String fieldName, Object[] values)", "modifiers": "@Override public", "return": "String", "signature": "String contains(String fieldName, Object[] values)", "full_signature": "@Override public String contains(String fieldName, Object[] values)", "class_method_signature": "SolrQueryTranslator.contains(String fieldName, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "(String fieldName)", "modifiers": "@Override public", "return": "String", "signature": "String isNull(String fieldName)", "full_signature": "@Override public String isNull(String fieldName)", "class_method_signature": "SolrQueryTranslator.isNull(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "notNull", "parameters": "(String fieldName)", "modifiers": "@Override public", "return": "String", "signature": "String notNull(String fieldName)", "full_signature": "@Override public String notNull(String fieldName)", "class_method_signature": "SolrQueryTranslator.notNull(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(String fieldName)", "modifiers": "@Override public", "return": "String", "signature": "String isEmpty(String fieldName)", "full_signature": "@Override public String isEmpty(String fieldName)", "class_method_signature": "SolrQueryTranslator.isEmpty(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(String fieldName)", "modifiers": "@Override public", "return": "String", "signature": "String notEmpty(String fieldName)", "full_signature": "@Override public String notEmpty(String fieldName)", "class_method_signature": "SolrQueryTranslator.notEmpty(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "within", "parameters": "(String fieldName,\n            Point<N> center, Number distance)", "modifiers": "@Override public", "return": "String", "signature": "String within(String fieldName,\n            Point<N> center, Number distance)", "full_signature": "@Override public String within(String fieldName,\n            Point<N> center, Number distance)", "class_method_signature": "SolrQueryTranslator.within(String fieldName,\n            Point<N> center, Number distance)", "testcase": false, "constructor": false}, {"identifier": "getSpatialQuery", "parameters": "(Query<T, R> query)", "modifiers": "public", "return": "SolrSpatialQuery", "signature": "SolrSpatialQuery getSpatialQuery(Query<T, R> query)", "full_signature": "public SolrSpatialQuery getSpatialQuery(Query<T, R> query)", "class_method_signature": "SolrQueryTranslator.getSpatialQuery(Query<T, R> query)", "testcase": false, "constructor": false}, {"identifier": "findGeospatialCriterion", "parameters": "(\n            Criterion c)", "modifiers": "protected", "return": "Distance2dExpression<?>", "signature": "Distance2dExpression<?> findGeospatialCriterion(\n            Criterion c)", "full_signature": "protected Distance2dExpression<?> findGeospatialCriterion(\n            Criterion c)", "class_method_signature": "SolrQueryTranslator.findGeospatialCriterion(\n            Criterion c)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(String... subqueries)", "modifiers": "@Override public", "return": "String", "signature": "String and(String... subqueries)", "full_signature": "@Override public String and(String... subqueries)", "class_method_signature": "SolrQueryTranslator.and(String... subqueries)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(String... subqueries)", "modifiers": "@Override public", "return": "String", "signature": "String or(String... subqueries)", "full_signature": "@Override public String or(String... subqueries)", "class_method_signature": "SolrQueryTranslator.or(String... subqueries)", "testcase": false, "constructor": false}, {"identifier": "junction", "parameters": "(SolrOperator operator, String... subqueries)", "modifiers": "protected", "return": "String", "signature": "String junction(SolrOperator operator, String... subqueries)", "full_signature": "protected String junction(SolrOperator operator, String... subqueries)", "class_method_signature": "SolrQueryTranslator.junction(SolrOperator operator, String... subqueries)", "testcase": false, "constructor": false}, {"identifier": "fieldJunction", "parameters": "(SolrOperator operator, Object... values)", "modifiers": "protected", "return": "String", "signature": "String fieldJunction(SolrOperator operator, Object... values)", "full_signature": "protected String fieldJunction(SolrOperator operator, Object... values)", "class_method_signature": "SolrQueryTranslator.fieldJunction(SolrOperator operator, Object... values)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "(String fieldName, Order o)", "modifiers": "@Override public", "return": "SolrOrderings", "signature": "SolrOrderings order(String fieldName, Order o)", "full_signature": "@Override public SolrOrderings order(String fieldName, Order o)", "class_method_signature": "SolrQueryTranslator.order(String fieldName, Order o)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "(SolrOrderings... orderings)", "modifiers": "@Override public", "return": "SolrOrderings", "signature": "SolrOrderings order(SolrOrderings... orderings)", "full_signature": "@Override public SolrOrderings order(SolrOrderings... orderings)", "class_method_signature": "SolrQueryTranslator.order(SolrOrderings... orderings)", "testcase": false, "constructor": false}, {"identifier": "translateProjection", "parameters": "(Query<T, R> query)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> translateProjection(Query<T, R> query)", "full_signature": "@Override public List<String> translateProjection(Query<T, R> query)", "class_method_signature": "SolrQueryTranslator.translateProjection(Query<T, R> query)", "testcase": false, "constructor": false}], "file": "seeking-solr/src/main/java/com/eharmony/matching/seeking/translator/solr/SolrQueryTranslator.java"}, "focal_method": {"identifier": "or", "parameters": "(String... subqueries)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String or(String... subqueries) {\n        return junction(SolrOperator.OR, subqueries);\n    }", "signature": "String or(String... subqueries)", "full_signature": "@Override public String or(String... subqueries)", "class_method_signature": "SolrQueryTranslator.or(String... subqueries)", "testcase": false, "constructor": false, "invocations": ["junction"]}, "repository": {"repo_id": 9248683, "url": "https://github.com/eHarmony/seeking", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 194, "license": "licensed"}}