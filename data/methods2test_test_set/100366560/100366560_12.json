{"test_class": {"identifier": "OptionalTypeFixtureConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "FixtureConverter converter = new DefaultFixtureMapper(new ConverterFactory()).getFixtureConverter();", "modifier": "", "type": "FixtureConverter", "declarator": "converter = new DefaultFixtureMapper(new ConverterFactory()).getFixtureConverter()", "var_name": "converter"}], "file": "beanmother-guava-converter/src/test/java/io/beanmother/guava/converter/OptionalTypeFixtureConverterTest.java"}, "test_case": {"identifier": "testOptionalMapping", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOptionalMapping() {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"simple\", 1);\n        map.put(\"optionalString\", \"testString\");\n\n        Map<String, String> beanMap = new HashMap<>();\n        beanMap.put(\"name\", \"testName\");\n        map.put(\"optionalBean\", beanMap);\n\n        FixtureTemplate fixture = FixtureTemplateWrapper.wrap(map, null, null);\n\n        OptionalTest result = (OptionalTest) converter.convert(fixture, TypeToken.of(OptionalTest.class));\n\n        assertEquals(1, result.simple.get());\n        assertEquals(\"testString\", result.optionalString.get());\n        assertEquals(\"testName\", result.optionalBean.get().name.get());\n    }", "signature": "void testOptionalMapping()", "full_signature": "@Test public void testOptionalMapping()", "class_method_signature": "OptionalTypeFixtureConverterTest.testOptionalMapping()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "wrap", "convert", "of", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "get"]}, "focal_class": {"identifier": "OptionalTypeFixtureConverter", "superclass": "", "interfaces": "implements FixtureConverter", "fields": [{"original_string": "private FixtureConverter fixtureConverter;", "modifier": "private", "type": "FixtureConverter", "declarator": "fixtureConverter", "var_name": "fixtureConverter"}], "methods": [{"identifier": "OptionalTypeFixtureConverter", "parameters": "(FixtureConverter converter)", "modifiers": "public", "return": "", "signature": " OptionalTypeFixtureConverter(FixtureConverter converter)", "full_signature": "public  OptionalTypeFixtureConverter(FixtureConverter converter)", "class_method_signature": "OptionalTypeFixtureConverter.OptionalTypeFixtureConverter(FixtureConverter converter)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(FixtureTemplate fixtureTemplate, TypeToken typeToken)", "modifiers": "@Override public", "return": "Object", "signature": "Object convert(FixtureTemplate fixtureTemplate, TypeToken typeToken)", "full_signature": "@Override public Object convert(FixtureTemplate fixtureTemplate, TypeToken typeToken)", "class_method_signature": "OptionalTypeFixtureConverter.convert(FixtureTemplate fixtureTemplate, TypeToken typeToken)", "testcase": false, "constructor": false}], "file": "beanmother-guava-converter/src/main/java/io/beanmother/guava/converter/OptionalTypeFixtureConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(FixtureTemplate fixtureTemplate, TypeToken typeToken)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object convert(FixtureTemplate fixtureTemplate, TypeToken typeToken) {\n        if (typeToken.getRawType() != Optional.class) {\n            return fixtureConverter.convert(fixtureTemplate, typeToken);\n        }\n        List<TypeToken<?>> types = TypeTokenUtils.extractGenericTypeTokens(typeToken);\n        if (types.isEmpty()) {\n            if (fixtureTemplate instanceof FixtureValue) {\n                Object value = ((FixtureValue) fixtureTemplate).getValue();\n                return Optional.of(value);\n            }\n            return null;\n        } else {\n            return Optional.of(fixtureConverter.convert(fixtureTemplate, types.get(0)));\n        }\n    }", "signature": "Object convert(FixtureTemplate fixtureTemplate, TypeToken typeToken)", "full_signature": "@Override public Object convert(FixtureTemplate fixtureTemplate, TypeToken typeToken)", "class_method_signature": "OptionalTypeFixtureConverter.convert(FixtureTemplate fixtureTemplate, TypeToken typeToken)", "testcase": false, "constructor": false, "invocations": ["getRawType", "convert", "extractGenericTypeTokens", "isEmpty", "getValue", "of", "of", "convert", "get"]}, "repository": {"repo_id": 100366560, "url": "https://github.com/keepcosmos/beanmother", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 95, "size": 688, "license": "licensed"}}