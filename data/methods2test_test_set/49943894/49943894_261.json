{"test_class": {"identifier": "PasswordGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "utils/src/test/java/com/cloud/utils/PasswordGeneratorTest.java"}, "test_case": {"identifier": "generateRandomPassword", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void generateRandomPassword() {\n        // actual length is requested length, minimum length is 3\n        Assert.assertTrue(PasswordGenerator.generateRandomPassword(0).length() == 3);\n        Assert.assertTrue(PasswordGenerator.generateRandomPassword(1).length() == 3);\n        Assert.assertTrue(PasswordGenerator.generateRandomPassword(5).length() == 5);\n        String password = PasswordGenerator.generateRandomPassword(8);\n\n        Assert.assertTrue(containsDigit(password));\n        Assert.assertTrue(containsLowercase(password));\n        Assert.assertTrue(containsUppercase(password));\n    }", "signature": "void generateRandomPassword()", "full_signature": "@Test public void generateRandomPassword()", "class_method_signature": "PasswordGeneratorTest.generateRandomPassword()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "length", "generateRandomPassword", "assertTrue", "length", "generateRandomPassword", "assertTrue", "length", "generateRandomPassword", "generateRandomPassword", "assertTrue", "containsDigit", "assertTrue", "containsLowercase", "assertTrue", "containsUppercase"]}, "focal_class": {"identifier": "PasswordGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "static private char[] lowerCase = new char[] {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'm', 'n', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};", "modifier": "static private", "type": "char[]", "declarator": "lowerCase = new char[] {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'm', 'n', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}", "var_name": "lowerCase"}, {"original_string": "static private char[] upperCase = new char[] {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};", "modifier": "static private", "type": "char[]", "declarator": "upperCase = new char[] {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'}", "var_name": "upperCase"}, {"original_string": "static private char[] numeric = new char[] {'2', '3', '4', '5', '6', '7', '8', '9'};", "modifier": "static private", "type": "char[]", "declarator": "numeric = new char[] {'2', '3', '4', '5', '6', '7', '8', '9'}", "var_name": "numeric"}, {"original_string": "static private char[] alphaNumeric = new char[] {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',\n        'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'm', 'n', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '2', '3', '4', '5', '6', '7', '8', '9'};", "modifier": "static private", "type": "char[]", "declarator": "alphaNumeric = new char[] {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',\n        'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'm', 'n', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '2', '3', '4', '5', '6', '7', '8', '9'}", "var_name": "alphaNumeric"}, {"original_string": "static private int minLength = 3;", "modifier": "static private", "type": "int", "declarator": "minLength = 3", "var_name": "minLength"}], "methods": [{"identifier": "generateRandomPassword", "parameters": "(int num)", "modifiers": "public static", "return": "String", "signature": "String generateRandomPassword(int num)", "full_signature": "public static String generateRandomPassword(int num)", "class_method_signature": "PasswordGenerator.generateRandomPassword(int num)", "testcase": false, "constructor": false}, {"identifier": "generateLowercaseChar", "parameters": "(Random r)", "modifiers": "private static", "return": "char", "signature": "char generateLowercaseChar(Random r)", "full_signature": "private static char generateLowercaseChar(Random r)", "class_method_signature": "PasswordGenerator.generateLowercaseChar(Random r)", "testcase": false, "constructor": false}, {"identifier": "generateDigit", "parameters": "(Random r)", "modifiers": "private static", "return": "char", "signature": "char generateDigit(Random r)", "full_signature": "private static char generateDigit(Random r)", "class_method_signature": "PasswordGenerator.generateDigit(Random r)", "testcase": false, "constructor": false}, {"identifier": "generateUppercaseChar", "parameters": "(Random r)", "modifiers": "private static", "return": "char", "signature": "char generateUppercaseChar(Random r)", "full_signature": "private static char generateUppercaseChar(Random r)", "class_method_signature": "PasswordGenerator.generateUppercaseChar(Random r)", "testcase": false, "constructor": false}, {"identifier": "generateAlphaNumeric", "parameters": "(Random r)", "modifiers": "private static", "return": "char", "signature": "char generateAlphaNumeric(Random r)", "full_signature": "private static char generateAlphaNumeric(Random r)", "class_method_signature": "PasswordGenerator.generateAlphaNumeric(Random r)", "testcase": false, "constructor": false}, {"identifier": "generatePresharedKey", "parameters": "(int numChars)", "modifiers": "public static", "return": "String", "signature": "String generatePresharedKey(int numChars)", "full_signature": "public static String generatePresharedKey(int numChars)", "class_method_signature": "PasswordGenerator.generatePresharedKey(int numChars)", "testcase": false, "constructor": false}], "file": "utils/src/main/java/com/cloud/utils/PasswordGenerator.java"}, "focal_method": {"identifier": "generateRandomPassword", "parameters": "(int num)", "modifiers": "public static", "return": "String", "body": "public static String generateRandomPassword(int num) {\n        Random r = new SecureRandom();\n        StringBuilder password = new StringBuilder();\n\n        //Guard for num < minLength\n        if (num < minLength) {\n            //Add alphanumeric chars at random\n            for (int i = 0; i < minLength; i++) {\n                password.append(generateAlphaNumeric(r));\n            }\n        } else {\n            List<Character> passwordChars = new ArrayList<Character>();\n            passwordChars.add(generateLowercaseChar(r));\n            passwordChars.add(generateUppercaseChar(r));\n            passwordChars.add(generateDigit(r));\n\n            for (int i = passwordChars.size(); i < num; i++) {\n                passwordChars.add(generateAlphaNumeric(r));\n            }\n\n            Collections.shuffle(passwordChars, new SecureRandom());\n\n            for (char c : passwordChars) {\n                password.append(c);\n            }\n        }\n\n        return password.toString();\n    }", "signature": "String generateRandomPassword(int num)", "full_signature": "public static String generateRandomPassword(int num)", "class_method_signature": "PasswordGenerator.generateRandomPassword(int num)", "testcase": false, "constructor": false, "invocations": ["append", "generateAlphaNumeric", "add", "generateLowercaseChar", "add", "generateUppercaseChar", "add", "generateDigit", "size", "add", "generateAlphaNumeric", "shuffle", "append", "toString"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}