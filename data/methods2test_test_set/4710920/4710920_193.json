{"test_class": {"identifier": "ContextFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Filter contextFilter = new ContextFilter();", "modifier": "", "type": "Filter", "declarator": "contextFilter = new ContextFilter()", "var_name": "contextFilter"}, {"original_string": "Invoker<DemoService> invoker;", "modifier": "", "type": "Invoker<DemoService>", "declarator": "invoker", "var_name": "invoker"}, {"original_string": "Invocation invocation;", "modifier": "", "type": "Invocation", "declarator": "invocation", "var_name": "invocation"}], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/ContextFilterTest.java"}, "test_case": {"identifier": "testWithAttachments", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithAttachments() {\n        URL url = URL.valueOf(\"test://test:11/test?group=dubbo&version=1.1\");\n        Invoker<DemoService> invoker = new MyInvoker<DemoService>(url);\n        Invocation invocation = new MockInvocation();\n        Result result = contextFilter.invoke(invoker, invocation);\n        assertNull(RpcContext.getContext().getInvoker());\n    }", "signature": "void testWithAttachments()", "full_signature": "@Test public void testWithAttachments()", "class_method_signature": "ContextFilterTest.testWithAttachments()", "testcase": true, "constructor": false, "invocations": ["valueOf", "invoke", "assertNull", "getInvoker", "getContext"]}, "focal_class": {"identifier": "ContextFilter", "superclass": "", "interfaces": "implements Filter, Filter.Listener", "fields": [{"original_string": "private static final String TAG_KEY = \"dubbo.tag\";", "modifier": "private static final", "type": "String", "declarator": "TAG_KEY = \"dubbo.tag\"", "var_name": "TAG_KEY"}, {"original_string": "private static final Set<String> UNLOADING_KEYS;", "modifier": "private static final", "type": "Set<String>", "declarator": "UNLOADING_KEYS", "var_name": "UNLOADING_KEYS"}], "methods": [{"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ContextFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "onResponse", "parameters": "(Result appResponse, Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "void", "signature": "void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ContextFilter.onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t, Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable t, Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public void onError(Throwable t, Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ContextFilter.onError(Throwable t, Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ContextFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        Map<String, Object> attachments = invocation.getObjectAttachments();\n        if (attachments != null) {\n            Map<String, Object> newAttach = new HashMap<>(attachments.size());\n            for (Map.Entry<String, Object> entry : attachments.entrySet()) {\n                String key = entry.getKey();\n                if (!UNLOADING_KEYS.contains(key)) {\n                    newAttach.put(key, entry.getValue());\n                }\n            }\n            attachments = newAttach;\n        }\n\n        RpcContext context = RpcContext.getContext();\n        context.setInvoker(invoker)\n                .setInvocation(invocation)\n//                .setAttachments(attachments)  // merged from dubbox\n                .setLocalAddress(invoker.getUrl().getHost(), invoker.getUrl().getPort());\n        String remoteApplication = (String) invocation.getAttachment(REMOTE_APPLICATION_KEY);\n        if (StringUtils.isNotEmpty(remoteApplication)) {\n            context.setRemoteApplicationName(remoteApplication);\n        } else {\n            context.setRemoteApplicationName((String) context.getAttachment(REMOTE_APPLICATION_KEY));\n        }\n\n        long timeout = RpcUtils.getTimeout(invocation, -1);\n        if (timeout != -1) {\n            context.set(TIME_COUNTDOWN_KEY, TimeoutCountDown.newCountDown(timeout, TimeUnit.MILLISECONDS));\n        }\n\n        // merged from dubbox\n        // we may already added some attachments into RpcContext before this filter (e.g. in rest protocol)\n        if (attachments != null) {\n            if (context.getObjectAttachments() != null) {\n                context.getObjectAttachments().putAll(attachments);\n            } else {\n                context.setObjectAttachments(attachments);\n            }\n        }\n\n        if (invocation instanceof RpcInvocation) {\n            ((RpcInvocation) invocation).setInvoker(invoker);\n        }\n\n        try {\n            context.clearAfterEachInvoke(false);\n            return invoker.invoke(invocation);\n        } finally {\n            context.clearAfterEachInvoke(true);\n            // IMPORTANT! For async scenario, we must remove context from current thread, so we always create a new RpcContext for the next invoke for the same thread.\n            RpcContext.removeContext(true);\n            RpcContext.removeServerContext();\n        }\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ContextFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["getObjectAttachments", "size", "entrySet", "getKey", "contains", "put", "getValue", "getContext", "setLocalAddress", "setInvocation", "setInvoker", "getHost", "getUrl", "getPort", "getUrl", "getAttachment", "isNotEmpty", "setRemoteApplicationName", "setRemoteApplicationName", "getAttachment", "getTimeout", "set", "newCountDown", "getObjectAttachments", "putAll", "getObjectAttachments", "setObjectAttachments", "setInvoker", "clearAfterEachInvoke", "invoke", "clearAfterEachInvoke", "removeContext", "removeServerContext"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}