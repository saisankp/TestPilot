{"test_class": {"identifier": "NormedXYSeriesTest", "superclass": "extends AndroidplotTest", "interfaces": "", "fields": [{"original_string": "private static final double DELTA = 0.0000001;", "modifier": "private static final", "type": "double", "declarator": "DELTA = 0.0000001", "var_name": "DELTA"}], "file": "androidplot-core/src/test/java/com/androidplot/xy/NormedXYSeriesTest.java"}, "test_case": {"identifier": "testConstructor_withNoOffset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConstructor_withNoOffset() {\n        XYSeries rawData = new SimpleXYSeries(SimpleXYSeries.ArrayFormat.Y_VALS_ONLY, \"s1\", 0, 2, 4, 6, 8, 10);\n        NormedXYSeries normedData = new NormedXYSeries(rawData,\n                new NormedXYSeries.Norm(null),\n                new NormedXYSeries.Norm(null));\n\n        assertEquals(0d, normedData.getY(0).doubleValue(), DELTA);\n        assertEquals(0.2d, normedData.getY(1).doubleValue(), DELTA);\n        assertEquals(0.4d, normedData.getY(2).doubleValue(), DELTA);\n        assertEquals(0.6d, normedData.getY(3).doubleValue(), DELTA);\n        assertEquals(0.8d, normedData.getY(4).doubleValue(), DELTA);\n        assertEquals(1.0d, normedData.getY(5).doubleValue(), DELTA);\n    }", "signature": "void testConstructor_withNoOffset()", "full_signature": "@Test public void testConstructor_withNoOffset()", "class_method_signature": "NormedXYSeriesTest.testConstructor_withNoOffset()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "doubleValue", "getY", "assertEquals", "doubleValue", "getY", "assertEquals", "doubleValue", "getY", "assertEquals", "doubleValue", "getY", "assertEquals", "doubleValue", "getY", "assertEquals", "doubleValue", "getY"]}, "focal_class": {"identifier": "NormedXYSeries", "superclass": "", "interfaces": "implements XYSeries", "fields": [{"original_string": "private XYSeries rawData;", "modifier": "private", "type": "XYSeries", "declarator": "rawData", "var_name": "rawData"}, {"original_string": "private Region minMaxX;", "modifier": "private", "type": "Region", "declarator": "minMaxX", "var_name": "minMaxX"}, {"original_string": "private Region minMaxY;", "modifier": "private", "type": "Region", "declarator": "minMaxY", "var_name": "minMaxY"}, {"original_string": "private Region transformX;", "modifier": "private", "type": "Region", "declarator": "transformX", "var_name": "transformX"}, {"original_string": "private Region transformY;", "modifier": "private", "type": "Region", "declarator": "transformY", "var_name": "transformY"}], "methods": [{"identifier": "NormedXYSeries", "parameters": "(XYSeries rawData)", "modifiers": "public", "return": "", "signature": " NormedXYSeries(XYSeries rawData)", "full_signature": "public  NormedXYSeries(XYSeries rawData)", "class_method_signature": "NormedXYSeries.NormedXYSeries(XYSeries rawData)", "testcase": false, "constructor": true}, {"identifier": "NormedXYSeries", "parameters": "(XYSeries rawData, Norm x, Norm y)", "modifiers": "public", "return": "", "signature": " NormedXYSeries(XYSeries rawData, Norm x, Norm y)", "full_signature": "public  NormedXYSeries(XYSeries rawData, Norm x, Norm y)", "class_method_signature": "NormedXYSeries.NormedXYSeries(XYSeries rawData, Norm x, Norm y)", "testcase": false, "constructor": true}, {"identifier": "normalize", "parameters": "(Norm x, Norm y)", "modifiers": "protected", "return": "void", "signature": "void normalize(Norm x, Norm y)", "full_signature": "protected void normalize(Norm x, Norm y)", "class_method_signature": "NormedXYSeries.normalize(Norm x, Norm y)", "testcase": false, "constructor": false}, {"identifier": "calculateTransform", "parameters": "(Norm norm)", "modifiers": "protected", "return": "Region", "signature": "Region calculateTransform(Norm norm)", "full_signature": "protected Region calculateTransform(Norm norm)", "class_method_signature": "NormedXYSeries.calculateTransform(Norm norm)", "testcase": false, "constructor": false}, {"identifier": "getTitle", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getTitle()", "full_signature": "@Override public String getTitle()", "class_method_signature": "NormedXYSeries.getTitle()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "NormedXYSeries.size()", "testcase": false, "constructor": false}, {"identifier": "denormalizeXVal", "parameters": "(Number xVal)", "modifiers": "public", "return": "Number", "signature": "Number denormalizeXVal(Number xVal)", "full_signature": "public Number denormalizeXVal(Number xVal)", "class_method_signature": "NormedXYSeries.denormalizeXVal(Number xVal)", "testcase": false, "constructor": false}, {"identifier": "denormalizeYVal", "parameters": "(Number yVal)", "modifiers": "public", "return": "Number", "signature": "Number denormalizeYVal(Number yVal)", "full_signature": "public Number denormalizeYVal(Number yVal)", "class_method_signature": "NormedXYSeries.denormalizeYVal(Number yVal)", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "(int index)", "modifiers": "@Override public", "return": "Number", "signature": "Number getX(int index)", "full_signature": "@Override public Number getX(int index)", "class_method_signature": "NormedXYSeries.getX(int index)", "testcase": false, "constructor": false}, {"identifier": "getY", "parameters": "(int index)", "modifiers": "@Override public", "return": "Number", "signature": "Number getY(int index)", "full_signature": "@Override public Number getY(int index)", "class_method_signature": "NormedXYSeries.getY(int index)", "testcase": false, "constructor": false}], "file": "androidplot-core/src/main/java/com/androidplot/xy/NormedXYSeries.java"}, "focal_method": {"identifier": "getY", "parameters": "(int index)", "modifiers": "@Override public", "return": "Number", "body": "@Override\n    public Number getY(int index) {\n        final Number yVal = rawData.getY(index);\n        if(yVal != null && transformY != null) {\n            return minMaxY.transform(yVal.doubleValue(), transformY);\n        }\n        return yVal;\n    }", "signature": "Number getY(int index)", "full_signature": "@Override public Number getY(int index)", "class_method_signature": "NormedXYSeries.getY(int index)", "testcase": false, "constructor": false, "invocations": ["getY", "transform", "doubleValue"]}, "repository": {"repo_id": 1424783, "url": "https://github.com/halfhp/androidplot", "language": "Java", "is_fork": false, "fork_count": 129, "stargazer_count": 369, "size": 7178, "license": "licensed"}}