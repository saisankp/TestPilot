{"test_class": {"identifier": "DataSetComparatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TABLE_1_NAME = \"TABLE_1\";", "modifier": "private static final", "type": "String", "declarator": "TABLE_1_NAME = \"TABLE_1\"", "var_name": "TABLE_1_NAME"}, {"original_string": "private static final int TABLE_1_ENTRIES = 2;", "modifier": "private static final", "type": "int", "declarator": "TABLE_1_ENTRIES = 2", "var_name": "TABLE_1_ENTRIES"}, {"original_string": "private static final Column TABLE_1_COLUMN_1 = new Column(\"t1col1\", DataType.VARCHAR);", "modifier": "private static final", "type": "Column", "declarator": "TABLE_1_COLUMN_1 = new Column(\"t1col1\", DataType.VARCHAR)", "var_name": "TABLE_1_COLUMN_1"}, {"original_string": "private static final Column TABLE_1_COLUMN_2 = new Column(\"t1col2\", DataType.VARCHAR);", "modifier": "private static final", "type": "Column", "declarator": "TABLE_1_COLUMN_2 = new Column(\"t1col2\", DataType.VARCHAR)", "var_name": "TABLE_1_COLUMN_2"}, {"original_string": "private static final String TABLE_2_NAME = \"TABLE_2\";", "modifier": "private static final", "type": "String", "declarator": "TABLE_2_NAME = \"TABLE_2\"", "var_name": "TABLE_2_NAME"}, {"original_string": "private static final int TABLE_2_ENTRIES = 3;", "modifier": "private static final", "type": "int", "declarator": "TABLE_2_ENTRIES = 3", "var_name": "TABLE_2_ENTRIES"}, {"original_string": "private static final Column TABLE_2_COLUMN_1 = new Column(\"t2col1\", DataType.VARCHAR);", "modifier": "private static final", "type": "Column", "declarator": "TABLE_2_COLUMN_1 = new Column(\"t2col1\", DataType.VARCHAR)", "var_name": "TABLE_2_COLUMN_1"}, {"original_string": "private static final Column TABLE_2_COLUMN_2 = new Column(\"t2col2\", DataType.VARCHAR);", "modifier": "private static final", "type": "Column", "declarator": "TABLE_2_COLUMN_2 = new Column(\"t2col2\", DataType.VARCHAR)", "var_name": "TABLE_2_COLUMN_2"}, {"original_string": "private static final Column TABLE_2_COLUMN_3 = new Column(\"t2col3\", DataType.VARCHAR);", "modifier": "private static final", "type": "Column", "declarator": "TABLE_2_COLUMN_3 = new Column(\"t2col3\", DataType.VARCHAR)", "var_name": "TABLE_2_COLUMN_3"}, {"original_string": "private static final String TABLE_3_NAME = \"TABLE_3\";", "modifier": "private static final", "type": "String", "declarator": "TABLE_3_NAME = \"TABLE_3\"", "var_name": "TABLE_3_NAME"}, {"original_string": "private static final int TABLE_3_ENTRIES = 4;", "modifier": "private static final", "type": "int", "declarator": "TABLE_3_ENTRIES = 4", "var_name": "TABLE_3_ENTRIES"}, {"original_string": "private static final Column TABLE_3_COLUMN_1 = new Column(\"t3col1\", DataType.VARCHAR);", "modifier": "private static final", "type": "Column", "declarator": "TABLE_3_COLUMN_1 = new Column(\"t3col1\", DataType.VARCHAR)", "var_name": "TABLE_3_COLUMN_1"}, {"original_string": "private static final Column TABLE_3_COLUMN_2 = new Column(\"t3col2\", DataType.VARCHAR);", "modifier": "private static final", "type": "Column", "declarator": "TABLE_3_COLUMN_2 = new Column(\"t3col2\", DataType.VARCHAR)", "var_name": "TABLE_3_COLUMN_2"}, {"original_string": "private static final Column TABLE_3_COLUMN_3 = new Column(\"t3col3\", DataType.VARCHAR);", "modifier": "private static final", "type": "Column", "declarator": "TABLE_3_COLUMN_3 = new Column(\"t3col3\", DataType.VARCHAR)", "var_name": "TABLE_3_COLUMN_3"}, {"original_string": "private static final Column TABLE_3_COLUMN_4 = new Column(\"t3col4\", DataType.VARCHAR);", "modifier": "private static final", "type": "Column", "declarator": "TABLE_3_COLUMN_4 = new Column(\"t3col4\", DataType.VARCHAR)", "var_name": "TABLE_3_COLUMN_4"}, {"original_string": "private static final Column TABLE_4_COLUMN_1 = new Column(\"t1col1\", DataType.DOUBLE);", "modifier": "private static final", "type": "Column", "declarator": "TABLE_4_COLUMN_1 = new Column(\"t1col1\", DataType.DOUBLE)", "var_name": "TABLE_4_COLUMN_1"}, {"original_string": "private static final Column TABLE_4_COLUMN_2 = new Column(\"t1col2\", DataType.VARCHAR);", "modifier": "private static final", "type": "Column", "declarator": "TABLE_4_COLUMN_2 = new Column(\"t1col2\", DataType.VARCHAR)", "var_name": "TABLE_4_COLUMN_2"}, {"original_string": "@Mock\n    private IDataSet currentDataSet;", "modifier": "@Mock\n    private", "type": "IDataSet", "declarator": "currentDataSet", "var_name": "currentDataSet"}, {"original_string": "@Mock\n    private IDataSet expectedDataSet;", "modifier": "@Mock\n    private", "type": "IDataSet", "declarator": "expectedDataSet", "var_name": "expectedDataSet"}, {"original_string": "@Mock\n    private ITable table1;", "modifier": "@Mock\n    private", "type": "ITable", "declarator": "table1", "var_name": "table1"}, {"original_string": "@Mock\n    private ITable table2;", "modifier": "@Mock\n    private", "type": "ITable", "declarator": "table2", "var_name": "table2"}, {"original_string": "@Mock\n    private ITable table3;", "modifier": "@Mock\n    private", "type": "ITable", "declarator": "table3", "var_name": "table3"}, {"original_string": "@Mock\n    private ITable table4;", "modifier": "@Mock\n    private", "type": "ITable", "declarator": "table4", "var_name": "table4"}, {"original_string": "@Mock\n    private ITableMetaData table1MetaData;", "modifier": "@Mock\n    private", "type": "ITableMetaData", "declarator": "table1MetaData", "var_name": "table1MetaData"}, {"original_string": "@Mock\n    private ITableMetaData table2MetaData;", "modifier": "@Mock\n    private", "type": "ITableMetaData", "declarator": "table2MetaData", "var_name": "table2MetaData"}, {"original_string": "@Mock\n    private ITableMetaData table3MetaData;", "modifier": "@Mock\n    private", "type": "ITableMetaData", "declarator": "table3MetaData", "var_name": "table3MetaData"}, {"original_string": "@Mock\n    private ITableMetaData table4MetaData;", "modifier": "@Mock\n    private", "type": "ITableMetaData", "declarator": "table4MetaData", "var_name": "table4MetaData"}, {"original_string": "private AssertionErrorCollector errorCollector;", "modifier": "private", "type": "AssertionErrorCollector", "declarator": "errorCollector", "var_name": "errorCollector"}], "file": "rdbms/src/test/java/eu/drus/jpa/unit/sql/dbunit/DataSetComparatorTest.java"}, "test_case": {"identifier": "testCurrentDataSetAndExpectedDataSetDifferInTableRecords", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCurrentDataSetAndExpectedDataSetDifferInTableRecords() throws Exception {\n        // GIVEN\n        final String[] orderBy = new String[] {};\n        final String[] toExclude = new String[] {};\n        final Set<Class<? extends IColumnFilter>> columnFilters = Collections.emptySet();\n        final DataSetComparator comparator = new DataSetComparator(orderBy, toExclude, false, columnFilters);\n\n        when(expectedDataSet.getTableNames()).thenReturn(new String[] {\n                TABLE_1_NAME\n        });\n        when(expectedDataSet.getTable(any(String.class))).thenAnswer((final InvocationOnMock invocation) -> {\n            final String tableName = (String) invocation.getArguments()[0];\n            if (tableName == TABLE_1_NAME) {\n                return table1;\n            } else {\n                throw new NoSuchTableException(tableName);\n            }\n        });\n        when(table1.getValue(eq(0), eq(TABLE_1_COLUMN_1.getColumnName()))).thenReturn(\"col1_value1\");\n        when(table1.getValue(eq(1), eq(TABLE_1_COLUMN_1.getColumnName()))).thenReturn(\"col1_value2\");\n        when(table1.getValue(eq(0), eq(TABLE_1_COLUMN_2.getColumnName()))).thenReturn(\"col2_value1\");\n        when(table1.getValue(eq(1), eq(TABLE_1_COLUMN_2.getColumnName()))).thenReturn(\"col2_value2\");\n\n        when(currentDataSet.getTableNames()).thenReturn(new String[] {\n                TABLE_1_NAME\n        });\n        when(currentDataSet.getTable(any(String.class))).thenAnswer((final InvocationOnMock invocation) -> {\n            final String tableName = (String) invocation.getArguments()[0];\n            if (tableName == TABLE_1_NAME) {\n                return table4;\n            } else {\n                throw new NoSuchTableException(tableName);\n            }\n        });\n        when(table4.getValue(eq(0), eq(TABLE_1_COLUMN_1.getColumnName()))).thenReturn(\"col1_value1\");\n        when(table4.getValue(eq(1), eq(TABLE_1_COLUMN_1.getColumnName()))).thenReturn(\"col1_value2\");\n        when(table4.getValue(eq(0), eq(TABLE_1_COLUMN_2.getColumnName()))).thenReturn(\"col2_other1\");\n        when(table4.getValue(eq(1), eq(TABLE_1_COLUMN_2.getColumnName()))).thenReturn(\"col2_other2\");\n\n        // WHEN\n        comparator.compare(currentDataSet, expectedDataSet, errorCollector);\n\n        // THEN\n        assertThat(errorCollector.amountOfErrors(), equalTo(2));\n\n        try {\n            errorCollector.report();\n            fail(\"AssertionError expected\");\n        } catch (final AssertionError e) {\n            assertThat(e.getMessage(), containsString(\"failed in 2 cases\"));\n            assertThat(e.getMessage(), containsString(\"\\\"col2_value1\\\" but was \\\"col2_other1\\\"\"));\n            assertThat(e.getMessage(), containsString(\"\\\"col2_value2\\\" but was \\\"col2_other2\\\"\"));\n        }\n    }", "signature": "void testCurrentDataSetAndExpectedDataSetDifferInTableRecords()", "full_signature": "@Test public void testCurrentDataSetAndExpectedDataSetDifferInTableRecords()", "class_method_signature": "DataSetComparatorTest.testCurrentDataSetAndExpectedDataSetDifferInTableRecords()", "testcase": true, "constructor": false, "invocations": ["emptySet", "thenReturn", "when", "getTableNames", "thenAnswer", "when", "getTable", "any", "getArguments", "thenReturn", "when", "getValue", "eq", "eq", "getColumnName", "thenReturn", "when", "getValue", "eq", "eq", "getColumnName", "thenReturn", "when", "getValue", "eq", "eq", "getColumnName", "thenReturn", "when", "getValue", "eq", "eq", "getColumnName", "thenReturn", "when", "getTableNames", "thenAnswer", "when", "getTable", "any", "getArguments", "thenReturn", "when", "getValue", "eq", "eq", "getColumnName", "thenReturn", "when", "getValue", "eq", "eq", "getColumnName", "thenReturn", "when", "getValue", "eq", "eq", "getColumnName", "thenReturn", "when", "getValue", "eq", "eq", "getColumnName", "compare", "assertThat", "amountOfErrors", "equalTo", "report", "fail", "assertThat", "getMessage", "containsString", "assertThat", "getMessage", "containsString", "assertThat", "getMessage", "containsString"]}, "focal_class": {"identifier": "DataSetComparator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Function<String, String> ID_MAPPER = (final String name) -> name;", "modifier": "private static final", "type": "Function<String, String>", "declarator": "ID_MAPPER = (final String name) -> name", "var_name": "ID_MAPPER"}, {"original_string": "private static final String DIFF_ERROR = \"%s | In row %d: expected value of %s \\\"%s\\\" but was \\\"%s\\\".\";", "modifier": "private static final", "type": "String", "declarator": "DIFF_ERROR = \"%s | In row %d: expected value of %s \\\"%s\\\" but was \\\"%s\\\".\"", "var_name": "DIFF_ERROR"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DataSetComparator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DataSetComparator.class)", "var_name": "LOG"}, {"original_string": "private final ColumnsHolder toExclude;", "modifier": "private final", "type": "ColumnsHolder", "declarator": "toExclude", "var_name": "toExclude"}, {"original_string": "private final ColumnsHolder orderBy;", "modifier": "private final", "type": "ColumnsHolder", "declarator": "orderBy", "var_name": "orderBy"}, {"original_string": "private final Set<Class<? extends IColumnFilter>> columnFilters;", "modifier": "private final", "type": "Set<Class<? extends IColumnFilter>>", "declarator": "columnFilters", "var_name": "columnFilters"}, {"original_string": "private boolean isStrict;", "modifier": "private", "type": "boolean", "declarator": "isStrict", "var_name": "isStrict"}], "methods": [{"identifier": "DataSetComparator", "parameters": "(final String[] orderBy, final String[] toExclude, final boolean isStrict,\n            final Set<Class<? extends IColumnFilter>> columnFilters)", "modifiers": "public", "return": "", "signature": " DataSetComparator(final String[] orderBy, final String[] toExclude, final boolean isStrict,\n            final Set<Class<? extends IColumnFilter>> columnFilters)", "full_signature": "public  DataSetComparator(final String[] orderBy, final String[] toExclude, final boolean isStrict,\n            final Set<Class<? extends IColumnFilter>> columnFilters)", "class_method_signature": "DataSetComparator.DataSetComparator(final String[] orderBy, final String[] toExclude, final boolean isStrict,\n            final Set<Class<? extends IColumnFilter>> columnFilters)", "testcase": false, "constructor": true}, {"identifier": "compare", "parameters": "(final IDataSet currentDataSet, final IDataSet expectedDataSet, final AssertionErrorCollector errorCollector)", "modifiers": "public", "return": "void", "signature": "void compare(final IDataSet currentDataSet, final IDataSet expectedDataSet, final AssertionErrorCollector errorCollector)", "full_signature": "public void compare(final IDataSet currentDataSet, final IDataSet expectedDataSet, final AssertionErrorCollector errorCollector)", "class_method_signature": "DataSetComparator.compare(final IDataSet currentDataSet, final IDataSet expectedDataSet, final AssertionErrorCollector errorCollector)", "testcase": false, "constructor": false}, {"identifier": "shouldBeEmpty", "parameters": "(final IDataSet dataSet, final AssertionErrorCollector errorCollector)", "modifiers": "private", "return": "void", "signature": "void shouldBeEmpty(final IDataSet dataSet, final AssertionErrorCollector errorCollector)", "full_signature": "private void shouldBeEmpty(final IDataSet dataSet, final AssertionErrorCollector errorCollector)", "class_method_signature": "DataSetComparator.shouldBeEmpty(final IDataSet dataSet, final AssertionErrorCollector errorCollector)", "testcase": false, "constructor": false}, {"identifier": "compareContent", "parameters": "(final IDataSet currentDataSet, final IDataSet expectedDataSet, final AssertionErrorCollector errorCollector)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void compareContent(final IDataSet currentDataSet, final IDataSet expectedDataSet, final AssertionErrorCollector errorCollector)", "full_signature": "@SuppressWarnings(\"unchecked\") private void compareContent(final IDataSet currentDataSet, final IDataSet expectedDataSet, final AssertionErrorCollector errorCollector)", "class_method_signature": "DataSetComparator.compareContent(final IDataSet currentDataSet, final IDataSet expectedDataSet, final AssertionErrorCollector errorCollector)", "testcase": false, "constructor": false}, {"identifier": "defineColumnsForSorting", "parameters": "(final IDataSet currentDataSet, final IDataSet expectedDataSet, final String tableName)", "modifiers": "private", "return": "List<String>", "signature": "List<String> defineColumnsForSorting(final IDataSet currentDataSet, final IDataSet expectedDataSet, final String tableName)", "full_signature": "private List<String> defineColumnsForSorting(final IDataSet currentDataSet, final IDataSet expectedDataSet, final String tableName)", "class_method_signature": "DataSetComparator.defineColumnsForSorting(final IDataSet currentDataSet, final IDataSet expectedDataSet, final String tableName)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(final ITable table, final List<String> columnsForSorting)", "modifiers": "private", "return": "ITable", "signature": "ITable sort(final ITable table, final List<String> columnsForSorting)", "full_signature": "private ITable sort(final ITable table, final List<String> columnsForSorting)", "class_method_signature": "DataSetComparator.sort(final ITable table, final List<String> columnsForSorting)", "testcase": false, "constructor": false}, {"identifier": "extractColumnsToBeIgnored", "parameters": "(final ITable expectedTableState, final ITable currentTableState)", "modifiers": "private", "return": "List<String>", "signature": "List<String> extractColumnsToBeIgnored(final ITable expectedTableState, final ITable currentTableState)", "full_signature": "private List<String> extractColumnsToBeIgnored(final ITable expectedTableState, final ITable currentTableState)", "class_method_signature": "DataSetComparator.extractColumnsToBeIgnored(final ITable expectedTableState, final ITable currentTableState)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(final ITable table, final String[] columnsToFilter)", "modifiers": "private", "return": "ITable", "signature": "ITable filter(final ITable table, final String[] columnsToFilter)", "full_signature": "private ITable filter(final ITable table, final String[] columnsToFilter)", "class_method_signature": "DataSetComparator.filter(final ITable table, final String[] columnsToFilter)", "testcase": false, "constructor": false}, {"identifier": "collectErrors", "parameters": "(final AssertionErrorCollector errorCollector, final List<Difference> diffs)", "modifiers": "private", "return": "void", "signature": "void collectErrors(final AssertionErrorCollector errorCollector, final List<Difference> diffs)", "full_signature": "private void collectErrors(final AssertionErrorCollector errorCollector, final List<Difference> diffs)", "class_method_signature": "DataSetComparator.collectErrors(final AssertionErrorCollector errorCollector, final List<Difference> diffs)", "testcase": false, "constructor": false}, {"identifier": "additionalColumnsForSorting", "parameters": "(final ITable expectedTableState, final ITable currentTableState)", "modifiers": "private", "return": "List<String>", "signature": "List<String> additionalColumnsForSorting(final ITable expectedTableState, final ITable currentTableState)", "full_signature": "private List<String> additionalColumnsForSorting(final ITable expectedTableState, final ITable currentTableState)", "class_method_signature": "DataSetComparator.additionalColumnsForSorting(final ITable expectedTableState, final ITable currentTableState)", "testcase": false, "constructor": false}, {"identifier": "applyCustomFilters", "parameters": "(final ITable table)", "modifiers": "private", "return": "ITable", "signature": "ITable applyCustomFilters(final ITable table)", "full_signature": "private ITable applyCustomFilters(final ITable table)", "class_method_signature": "DataSetComparator.applyCustomFilters(final ITable table)", "testcase": false, "constructor": false}, {"identifier": "extractColumnNames", "parameters": "(final Column[] columns)", "modifiers": "private", "return": "Collection<String>", "signature": "Collection<String> extractColumnNames(final Column[] columns)", "full_signature": "private Collection<String> extractColumnNames(final Column[] columns)", "class_method_signature": "DataSetComparator.extractColumnNames(final Column[] columns)", "testcase": false, "constructor": false}, {"identifier": "extractNotExpectedColumnNames", "parameters": "(final ITable expectedTable, final ITable currentTable)", "modifiers": "private", "return": "List<String>", "signature": "List<String> extractNotExpectedColumnNames(final ITable expectedTable, final ITable currentTable)", "full_signature": "private List<String> extractNotExpectedColumnNames(final ITable expectedTable, final ITable currentTable)", "class_method_signature": "DataSetComparator.extractNotExpectedColumnNames(final ITable expectedTable, final ITable currentTable)", "testcase": false, "constructor": false}], "file": "rdbms/src/main/java/eu/drus/jpa/unit/sql/dbunit/DataSetComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(final IDataSet currentDataSet, final IDataSet expectedDataSet, final AssertionErrorCollector errorCollector)", "modifiers": "public", "return": "void", "body": "public void compare(final IDataSet currentDataSet, final IDataSet expectedDataSet, final AssertionErrorCollector errorCollector)\n            throws DatabaseUnitException {\n        if (expectedDataSet.getTableNames().length == 0) {\n            shouldBeEmpty(currentDataSet, errorCollector);\n        } else {\n            compareContent(currentDataSet, expectedDataSet, errorCollector);\n        }\n    }", "signature": "void compare(final IDataSet currentDataSet, final IDataSet expectedDataSet, final AssertionErrorCollector errorCollector)", "full_signature": "public void compare(final IDataSet currentDataSet, final IDataSet expectedDataSet, final AssertionErrorCollector errorCollector)", "class_method_signature": "DataSetComparator.compare(final IDataSet currentDataSet, final IDataSet expectedDataSet, final AssertionErrorCollector errorCollector)", "testcase": false, "constructor": false, "invocations": ["getTableNames", "shouldBeEmpty", "compareContent"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}