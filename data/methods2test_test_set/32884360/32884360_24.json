{"test_class": {"identifier": "JoinToParentPKTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LinkedList<AISValidation>validations;", "modifier": "private", "type": "LinkedList<AISValidation>", "declarator": "validations", "var_name": "validations"}, {"original_string": "private NewAISBuilder builder;", "modifier": "private", "type": "NewAISBuilder", "declarator": "builder", "var_name": "builder"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/ais/model/validation/JoinToParentPKTest.java"}, "test_case": {"identifier": "joinNoPKFailed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void joinNoPKFailed() {\n        builder.table(\"j3\").colInt(\"c1\").joinTo(\"t3\").on(\"c1\", \"c1\");\n        Collection<AISValidationFailure> failures = builder.unvalidatedAIS().validate(validations).failures();\n        Assert.assertEquals(1, failures.size());\n        AISValidationFailure fail = failures.iterator().next();\n        Assert.assertEquals(ErrorCode.JOIN_PARENT_NO_PK, fail.errorCode());\n    }", "signature": "void joinNoPKFailed()", "full_signature": "@Test public void joinNoPKFailed()", "class_method_signature": "JoinToParentPKTest.joinNoPKFailed()", "testcase": true, "constructor": false, "invocations": ["on", "joinTo", "colInt", "table", "failures", "validate", "unvalidatedAIS", "assertEquals", "size", "next", "iterator", "assertEquals", "errorCode"]}, "focal_class": {"identifier": "JoinToParentPK", "superclass": "", "interfaces": "implements AISValidation", "fields": [], "methods": [{"identifier": "validate", "parameters": "(AkibanInformationSchema ais, AISValidationOutput output)", "modifiers": "@Override public", "return": "void", "signature": "void validate(AkibanInformationSchema ais, AISValidationOutput output)", "full_signature": "@Override public void validate(AkibanInformationSchema ais, AISValidationOutput output)", "class_method_signature": "JoinToParentPK.validate(AkibanInformationSchema ais, AISValidationOutput output)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/ais/model/validation/JoinToParentPK.java"}, "focal_method": {"identifier": "validate", "parameters": "(AkibanInformationSchema ais, AISValidationOutput output)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(AkibanInformationSchema ais, AISValidationOutput output) {\n        for (Join join : ais.getJoins().values()) {\n            \n            // bug 931258: If parent has no external PK, flag this as an error. \n            if (join.getParent().getPrimaryKey() == null) {\n                output.reportFailure(new AISValidationFailure(\n                        new JoinParentNoExplicitPK (join.getParent().getName())));\n                continue;\n            }\n            TableIndex parentPK= join.getParent().getPrimaryKey().getIndex();\n            if (parentPK.getKeyColumns().size() != join.getJoinColumns().size()) {\n                output.reportFailure(new AISValidationFailure(\n                        new JoinColumnMismatchException (join.getJoinColumns().size(),\n                                join.getChild().getName(),\n                                join.getParent().getName(),\n                                parentPK.getKeyColumns().size())));\n\n                continue;\n            }\n            Iterator<JoinColumn>  joinColumns = join.getJoinColumns().iterator();\n            for (IndexColumn parentPKColumn : parentPK.getKeyColumns()) {\n                JoinColumn joinColumn = joinColumns.next();\n                if (parentPKColumn.getColumn() != joinColumn.getParent()) {\n                    output.reportFailure(new AISValidationFailure (\n                            new JoinToWrongColumnsException (\n                                    join.getChild().getName(), \n                                    joinColumn.getParent().getName(), \n                                    parentPK.getTable().getName(), parentPKColumn.getColumn().getName())));\n                }\n            }\n        }\n    }", "signature": "void validate(AkibanInformationSchema ais, AISValidationOutput output)", "full_signature": "@Override public void validate(AkibanInformationSchema ais, AISValidationOutput output)", "class_method_signature": "JoinToParentPK.validate(AkibanInformationSchema ais, AISValidationOutput output)", "testcase": false, "constructor": false, "invocations": ["values", "getJoins", "getPrimaryKey", "getParent", "reportFailure", "getName", "getParent", "getIndex", "getPrimaryKey", "getParent", "size", "getKeyColumns", "size", "getJoinColumns", "reportFailure", "size", "getJoinColumns", "getName", "getChild", "getName", "getParent", "size", "getKeyColumns", "iterator", "getJoinColumns", "getKeyColumns", "next", "getColumn", "getParent", "reportFailure", "getName", "getChild", "getName", "getParent", "getName", "getTable", "getName", "getColumn"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}