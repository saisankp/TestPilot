{"test_class": {"identifier": "ArgumentPlaceholderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ArgumentPlaceholder underTest = new ArgumentPlaceholder();", "modifier": "private final", "type": "ArgumentPlaceholder", "declarator": "underTest = new ArgumentPlaceholder()", "var_name": "underTest"}], "file": "core/src/test/java/com/tngtech/junit/dataprovider/placeholder/ArgumentPlaceholderTest.java"}, "test_case": {"identifier": "testFormatAllHandlePrimitiveFloatTypeArrayCorrectly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFormatAllHandlePrimitiveFloatTypeArrayCorrectly() {\n        // Given:\n        final List<Object> arguments = list(new float[] { 0.3f, 0.9f, 0.81f, 0.6561f });\n\n        // When:\n        String result = underTest.formatAll(arguments);\n\n        // Then:\n        assertThat(result).isEqualTo(\"[0.3, 0.9, 0.81, 0.6561]\");\n    }", "signature": "void testFormatAllHandlePrimitiveFloatTypeArrayCorrectly()", "full_signature": "@Test public void testFormatAllHandlePrimitiveFloatTypeArrayCorrectly()", "class_method_signature": "ArgumentPlaceholderTest.testFormatAllHandlePrimitiveFloatTypeArrayCorrectly()", "testcase": true, "constructor": false, "invocations": ["list", "formatAll", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ArgumentPlaceholder", "superclass": "extends AbstractArgumentPlaceholder", "interfaces": "", "fields": [], "methods": [{"identifier": "ArgumentPlaceholder", "parameters": "()", "modifiers": "public", "return": "", "signature": " ArgumentPlaceholder()", "full_signature": "public  ArgumentPlaceholder()", "class_method_signature": "ArgumentPlaceholder.ArgumentPlaceholder()", "testcase": false, "constructor": true}, {"identifier": "getReplacementFor", "parameters": "(String placeholder, ReplacementData data)", "modifiers": "@Override protected", "return": "String", "signature": "String getReplacementFor(String placeholder, ReplacementData data)", "full_signature": "@Override protected String getReplacementFor(String placeholder, ReplacementData data)", "class_method_signature": "ArgumentPlaceholder.getReplacementFor(String placeholder, ReplacementData data)", "testcase": false, "constructor": false}, {"identifier": "formatAll", "parameters": "(List<Object> arguments)", "modifiers": "protected", "return": "String", "signature": "String formatAll(List<Object> arguments)", "full_signature": "protected String formatAll(List<Object> arguments)", "class_method_signature": "ArgumentPlaceholder.formatAll(List<Object> arguments)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/tngtech/junit/dataprovider/placeholder/ArgumentPlaceholder.java"}, "focal_method": {"identifier": "formatAll", "parameters": "(List<Object> arguments)", "modifiers": "protected", "return": "String", "body": "protected String formatAll(List<Object> arguments) {\n        StringBuilder stringBuilder = new StringBuilder();\n        for (int i = 0; i < arguments.size(); i++) {\n            stringBuilder.append(format(arguments.get(i)));\n            if (i < arguments.size() - 1) {\n                stringBuilder.append(\", \");\n            }\n        }\n        return stringBuilder.toString();\n    }", "signature": "String formatAll(List<Object> arguments)", "full_signature": "protected String formatAll(List<Object> arguments)", "class_method_signature": "ArgumentPlaceholder.formatAll(List<Object> arguments)", "testcase": false, "constructor": false, "invocations": ["size", "append", "format", "get", "size", "append", "toString"]}, "repository": {"repo_id": 8175611, "url": "https://github.com/TNG/junit-dataprovider", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 215, "size": 1383, "license": "licensed"}}