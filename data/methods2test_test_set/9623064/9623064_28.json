{"test_class": {"identifier": "SpiderMonitorTest", "superclass": "", "interfaces": "", "fields": [], "file": "webmagic-extension/src/test/java/us/codecraft/webmagic/monitor/SpiderMonitorTest.java"}, "test_case": {"identifier": "testInherit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInherit() throws Exception {\n        SpiderMonitor spiderMonitor = new SpiderMonitor(){\n            @Override\n            protected SpiderStatusMXBean getSpiderStatusMBean(Spider spider, MonitorSpiderListener monitorSpiderListener) {\n                return new CustomSpiderStatus(spider, monitorSpiderListener);\n            }\n        };\n\n        Spider zhihuSpider = Spider.create(new ZhihuPageProcessor())\n                .addUrl(\"http://my.oschina.net/flashsword/blog\").thread(2);\n        Spider githubSpider = Spider.create(new GithubRepoPageProcessor())\n                .addUrl(\"https://github.com/code4craft\");\n\n        spiderMonitor.register(zhihuSpider, githubSpider);\n\n    }", "signature": "void testInherit()", "full_signature": "@Test public void testInherit()", "class_method_signature": "SpiderMonitorTest.testInherit()", "testcase": true, "constructor": false, "invocations": ["thread", "addUrl", "create", "addUrl", "create", "register"]}, "focal_class": {"identifier": "SpiderMonitor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static SpiderMonitor INSTANCE = new SpiderMonitor();", "modifier": "private static", "type": "SpiderMonitor", "declarator": "INSTANCE = new SpiderMonitor()", "var_name": "INSTANCE"}, {"original_string": "private AtomicBoolean started = new AtomicBoolean(false);", "modifier": "private", "type": "AtomicBoolean", "declarator": "started = new AtomicBoolean(false)", "var_name": "started"}, {"original_string": "private Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private MBeanServer mbeanServer;", "modifier": "private", "type": "MBeanServer", "declarator": "mbeanServer", "var_name": "mbeanServer"}, {"original_string": "private String jmxServerName;", "modifier": "private", "type": "String", "declarator": "jmxServerName", "var_name": "jmxServerName"}, {"original_string": "private List<SpiderStatusMXBean> spiderStatuses = new ArrayList<SpiderStatusMXBean>();", "modifier": "private", "type": "List<SpiderStatusMXBean>", "declarator": "spiderStatuses = new ArrayList<SpiderStatusMXBean>()", "var_name": "spiderStatuses"}], "methods": [{"identifier": "SpiderMonitor", "parameters": "()", "modifiers": "protected", "return": "", "signature": " SpiderMonitor()", "full_signature": "protected  SpiderMonitor()", "class_method_signature": "SpiderMonitor.SpiderMonitor()", "testcase": false, "constructor": true}, {"identifier": "register", "parameters": "(Spider... spiders)", "modifiers": "public synchronized", "return": "SpiderMonitor", "signature": "SpiderMonitor register(Spider... spiders)", "full_signature": "public synchronized SpiderMonitor register(Spider... spiders)", "class_method_signature": "SpiderMonitor.register(Spider... spiders)", "testcase": false, "constructor": false}, {"identifier": "getSpiderStatusMBean", "parameters": "(Spider spider, MonitorSpiderListener monitorSpiderListener)", "modifiers": "protected", "return": "SpiderStatusMXBean", "signature": "SpiderStatusMXBean getSpiderStatusMBean(Spider spider, MonitorSpiderListener monitorSpiderListener)", "full_signature": "protected SpiderStatusMXBean getSpiderStatusMBean(Spider spider, MonitorSpiderListener monitorSpiderListener)", "class_method_signature": "SpiderMonitor.getSpiderStatusMBean(Spider spider, MonitorSpiderListener monitorSpiderListener)", "testcase": false, "constructor": false}, {"identifier": "instance", "parameters": "()", "modifiers": "public static", "return": "SpiderMonitor", "signature": "SpiderMonitor instance()", "full_signature": "public static SpiderMonitor instance()", "class_method_signature": "SpiderMonitor.instance()", "testcase": false, "constructor": false}, {"identifier": "registerMBean", "parameters": "(SpiderStatusMXBean spiderStatus)", "modifiers": "protected", "return": "void", "signature": "void registerMBean(SpiderStatusMXBean spiderStatus)", "full_signature": "protected void registerMBean(SpiderStatusMXBean spiderStatus)", "class_method_signature": "SpiderMonitor.registerMBean(SpiderStatusMXBean spiderStatus)", "testcase": false, "constructor": false}], "file": "webmagic-extension/src/main/java/us/codecraft/webmagic/monitor/SpiderMonitor.java"}, "focal_method": {"identifier": "register", "parameters": "(Spider... spiders)", "modifiers": "public synchronized", "return": "SpiderMonitor", "body": "public synchronized SpiderMonitor register(Spider... spiders) throws JMException {\n        for (Spider spider : spiders) {\n            MonitorSpiderListener monitorSpiderListener = new MonitorSpiderListener();\n            if (spider.getSpiderListeners() == null) {\n                List<SpiderListener> spiderListeners = new ArrayList<SpiderListener>();\n                spiderListeners.add(monitorSpiderListener);\n                spider.setSpiderListeners(spiderListeners);\n            } else {\n                spider.getSpiderListeners().add(monitorSpiderListener);\n            }\n            SpiderStatusMXBean spiderStatusMBean = getSpiderStatusMBean(spider, monitorSpiderListener);\n            registerMBean(spiderStatusMBean);\n            spiderStatuses.add(spiderStatusMBean);\n        }\n        return this;\n    }", "signature": "SpiderMonitor register(Spider... spiders)", "full_signature": "public synchronized SpiderMonitor register(Spider... spiders)", "class_method_signature": "SpiderMonitor.register(Spider... spiders)", "testcase": false, "constructor": false, "invocations": ["getSpiderListeners", "add", "setSpiderListeners", "add", "getSpiderListeners", "getSpiderStatusMBean", "registerMBean", "add"]}, "repository": {"repo_id": 9623064, "url": "https://github.com/code4craft/webmagic", "language": "Java", "is_fork": false, "fork_count": 3804, "stargazer_count": 9136, "size": 17041, "license": "licensed"}}