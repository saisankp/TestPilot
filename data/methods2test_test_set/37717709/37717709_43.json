{"test_class": {"identifier": "LUISGrammarEvaluatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "org.jvoicexml.interpreter.grammar.luis/src/test/java/org/jvoicexml/interpreter/grammar/luis/LUISGrammarEvaluatorTest.java"}, "test_case": {"identifier": "testGetSemanticInterpretation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSemanticInterpretation()\n            throws URISyntaxException, IOException {\n        final TestProperties properties = new TestProperties();\n        final String subscription = properties.get(\"luis.subscription-key\");\n        final String applicationId = properties\n                .get(\"luis.pizza-application-id\");\n\n        final URI uri = new URI(\n                \"https://westus.api.cognitive.microsoft.com/luis/v2.0/apps/\"\n                        + applicationId);\n        LUISGrammarEvaluator evaluator = new LUISGrammarEvaluator(subscription,\n                uri);\n        DataModel model = new EcmaScriptDataModel();\n        model.createScope();\n        final Object result = evaluator.getSemanticInterpretation(model,\n                \"I want a large pizza with salami\");\n        Assert.assertNotNull(\"interpretation must no be null\", result);\n    }", "signature": "void testGetSemanticInterpretation()", "full_signature": "@Test public void testGetSemanticInterpretation()", "class_method_signature": "LUISGrammarEvaluatorTest.testGetSemanticInterpretation()", "testcase": true, "constructor": false, "invocations": ["get", "get", "createScope", "getSemanticInterpretation", "assertNotNull"]}, "focal_class": {"identifier": "LUISGrammarEvaluator", "superclass": "", "interfaces": "implements GrammarEvaluator", "fields": [{"original_string": "private static final Logger LOGGER = Logger\n            .getLogger(LUISGrammarEvaluator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger\n            .getLogger(LUISGrammarEvaluator.class)", "var_name": "LOGGER"}, {"original_string": "private static final int DEFAULT_PROXY_PORT = 80;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_PROXY_PORT = 80", "var_name": "DEFAULT_PROXY_PORT"}, {"original_string": "private static final String PROXY_HOST;", "modifier": "private static final", "type": "String", "declarator": "PROXY_HOST", "var_name": "PROXY_HOST"}, {"original_string": "private static final int PROXY_PORT;", "modifier": "private static final", "type": "int", "declarator": "PROXY_PORT", "var_name": "PROXY_PORT"}, {"original_string": "private final String subscriptionKey;", "modifier": "private final", "type": "String", "declarator": "subscriptionKey", "var_name": "subscriptionKey"}, {"original_string": "private final URI grammarUri;", "modifier": "private final", "type": "URI", "declarator": "grammarUri", "var_name": "grammarUri"}], "methods": [{"identifier": "LUISGrammarEvaluator", "parameters": "(final String subscription,\n            final URI documentURI)", "modifiers": "public", "return": "", "signature": " LUISGrammarEvaluator(final String subscription,\n            final URI documentURI)", "full_signature": "public  LUISGrammarEvaluator(final String subscription,\n            final URI documentURI)", "class_method_signature": "LUISGrammarEvaluator.LUISGrammarEvaluator(final String subscription,\n            final URI documentURI)", "testcase": false, "constructor": true}, {"identifier": "getURI", "parameters": "()", "modifiers": "@Override public", "return": "URI", "signature": "URI getURI()", "full_signature": "@Override public URI getURI()", "class_method_signature": "LUISGrammarEvaluator.getURI()", "testcase": false, "constructor": false}, {"identifier": "getSemanticInterpretation", "parameters": "(final DataModel model,\n            String utterance)", "modifiers": "@Override public", "return": "Object", "signature": "Object getSemanticInterpretation(final DataModel model,\n            String utterance)", "full_signature": "@Override public Object getSemanticInterpretation(final DataModel model,\n            String utterance)", "class_method_signature": "LUISGrammarEvaluator.getSemanticInterpretation(final DataModel model,\n            String utterance)", "testcase": false, "constructor": false}, {"identifier": "parseLUISResponse", "parameters": "(final DataModel model,\n            final InputStream input)", "modifiers": "private", "return": "Object", "signature": "Object parseLUISResponse(final DataModel model,\n            final InputStream input)", "full_signature": "private Object parseLUISResponse(final DataModel model,\n            final InputStream input)", "class_method_signature": "LUISGrammarEvaluator.parseLUISResponse(final DataModel model,\n            final InputStream input)", "testcase": false, "constructor": false}], "file": "org.jvoicexml.interpreter.grammar.luis/src/main/java/org/jvoicexml/interpreter/grammar/luis/LUISGrammarEvaluator.java"}, "focal_method": {"identifier": "getSemanticInterpretation", "parameters": "(final DataModel model,\n            String utterance)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object getSemanticInterpretation(final DataModel model,\n            String utterance) {\n        final HttpClientBuilder builder = HttpClientBuilder.create();\n        if (PROXY_HOST != null) {\n            HttpHost proxy = new HttpHost(PROXY_HOST, PROXY_PORT);\n            builder.setProxy(proxy);\n        }\n        try (CloseableHttpClient client = builder.build()){\n            final URIBuilder uribuilder = new URIBuilder(grammarUri);\n            uribuilder.addParameter(\"subscription-key\", subscriptionKey);\n            uribuilder.addParameter(\"q\", utterance);\n            final URI uri = uribuilder.build();\n            final HttpGet request = new HttpGet(uri);\n            final HttpResponse response = client.execute(request);\n            final StatusLine statusLine = response.getStatusLine();\n            final int status = statusLine.getStatusCode();\n            if (status != HttpStatus.SC_OK) {\n                final String reasonPhrase = statusLine.getReasonPhrase();\n                LOGGER.error(\"error accessing '\" + uri +\"': \" +\n                        reasonPhrase + \" (HTTP error code \"\n                        + status + \")\");\n                return null;\n            }\n            final HttpEntity entity = response.getEntity();\n            final InputStream input = entity.getContent();\n            final Object interpretation = parseLUISResponse(model, input);\n            return interpretation;\n        } catch (IOException | URISyntaxException | ParseException | SemanticError e) {\n            LOGGER.error(e.getMessage(), e);\n            return null;\n        }\n    }", "signature": "Object getSemanticInterpretation(final DataModel model,\n            String utterance)", "full_signature": "@Override public Object getSemanticInterpretation(final DataModel model,\n            String utterance)", "class_method_signature": "LUISGrammarEvaluator.getSemanticInterpretation(final DataModel model,\n            String utterance)", "testcase": false, "constructor": false, "invocations": ["create", "setProxy", "build", "addParameter", "addParameter", "build", "execute", "getStatusLine", "getStatusCode", "getReasonPhrase", "error", "getEntity", "getContent", "parseLUISResponse", "error", "getMessage"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}