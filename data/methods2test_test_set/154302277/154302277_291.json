{"test_class": {"identifier": "SubscriptionServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DEFAULT_PORT = 11111;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_PORT = 11111", "var_name": "DEFAULT_PORT"}, {"original_string": "private static final String DEFAULT_TOPICS = \"test-default-topics\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_TOPICS = \"test-default-topics\"", "var_name": "DEFAULT_TOPICS"}, {"original_string": "private static final MqttQos DEFAULT_QOS = MqttQos.AT_MOST_ONCE;", "modifier": "private static final", "type": "MqttQos", "declarator": "DEFAULT_QOS = MqttQos.AT_MOST_ONCE", "var_name": "DEFAULT_QOS"}, {"original_string": "private SubscriptionService instance;", "modifier": "private", "type": "SubscriptionService", "declarator": "instance", "var_name": "instance"}, {"original_string": "@Mock\n    private OutboundOsgpCoreResponseMessageSender outboundOsgpCoreResponseMessageSender;", "modifier": "@Mock\n    private", "type": "OutboundOsgpCoreResponseMessageSender", "declarator": "outboundOsgpCoreResponseMessageSender", "var_name": "outboundOsgpCoreResponseMessageSender"}, {"original_string": "@Mock\n    private MqttDeviceRepository mqttDeviceRepository;", "modifier": "@Mock\n    private", "type": "MqttDeviceRepository", "declarator": "mqttDeviceRepository", "var_name": "mqttDeviceRepository"}, {"original_string": "@Mock\n    private MqttClientAdapterFactory mqttClientAdapterFactory;", "modifier": "@Mock\n    private", "type": "MqttClientAdapterFactory", "declarator": "mqttClientAdapterFactory", "var_name": "mqttClientAdapterFactory"}, {"original_string": "@Mock\n    private MessageMetadata messageMetadata;", "modifier": "@Mock\n    private", "type": "MessageMetadata", "declarator": "messageMetadata", "var_name": "messageMetadata"}, {"original_string": "@Captor\n    private ArgumentCaptor<MqttDevice> deviceCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<MqttDevice>", "declarator": "deviceCaptor", "var_name": "deviceCaptor"}, {"original_string": "@Mock\n    private MqttClientAdapter mqttClientAdapter;", "modifier": "@Mock\n    private", "type": "MqttClientAdapter", "declarator": "mqttClientAdapter", "var_name": "mqttClientAdapter"}, {"original_string": "@Captor\n    private ArgumentCaptor<ProtocolResponseMessage> protocolResponseMessageCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<ProtocolResponseMessage>", "declarator": "protocolResponseMessageCaptor", "var_name": "protocolResponseMessageCaptor"}], "file": "osgp/protocol-adapter-mqtt/osgp-protocol-adapter-mqtt/src/test/java/org/opensmartgridplatform/adapter/protocol/mqtt/application/services/SubscriptionServiceTest.java"}, "test_case": {"identifier": "subscribeNewDevice", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void subscribeNewDevice() {\n        // SETUP\n        when(this.messageMetadata.getDeviceIdentification()).thenReturn(\"test-metadata-device-id\");\n        when(this.messageMetadata.getIpAddress()).thenReturn(\"test-metadata-host\");\n        when(this.mqttDeviceRepository.findByDeviceIdentification(\n                this.messageMetadata.getDeviceIdentification())).thenReturn(null);\n        when(this.mqttClientAdapterFactory.create(any(MqttDevice.class), eq(this.messageMetadata),\n                eq(this.instance))).thenReturn(this.mqttClientAdapter);\n\n        // CALL\n        this.instance.subscribe(this.messageMetadata);\n\n        // VERIFY\n        verify(this.mqttDeviceRepository).save(this.deviceCaptor.capture());\n\n        final MqttDevice savedDevice = this.deviceCaptor.getValue();\n        assertEquals(this.messageMetadata.getDeviceIdentification(), savedDevice.getDeviceIdentification());\n        assertEquals(DEFAULT_QOS.name(), savedDevice.getQos());\n        assertEquals(this.messageMetadata.getIpAddress(), savedDevice.getHost());\n        assertEquals(DEFAULT_TOPICS, savedDevice.getTopics());\n        assertEquals(DEFAULT_PORT, savedDevice.getPort());\n\n        verify(this.mqttClientAdapter).connect();\n    }", "signature": "void subscribeNewDevice()", "full_signature": "@Test void subscribeNewDevice()", "class_method_signature": "SubscriptionServiceTest.subscribeNewDevice()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getDeviceIdentification", "thenReturn", "when", "getIpAddress", "thenReturn", "when", "findByDeviceIdentification", "getDeviceIdentification", "thenReturn", "when", "create", "any", "eq", "eq", "subscribe", "save", "verify", "capture", "getValue", "assertEquals", "getDeviceIdentification", "getDeviceIdentification", "assertEquals", "name", "getQos", "assertEquals", "getIpAddress", "getHost", "assertEquals", "getTopics", "assertEquals", "getPort", "connect", "verify"]}, "focal_class": {"identifier": "SubscriptionService", "superclass": "", "interfaces": "implements MqttClientEventHandler", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SubscriptionService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SubscriptionService.class)", "var_name": "LOG"}, {"original_string": "private final MqttDeviceRepository mqttDeviceRepository;", "modifier": "private final", "type": "MqttDeviceRepository", "declarator": "mqttDeviceRepository", "var_name": "mqttDeviceRepository"}, {"original_string": "private final OutboundOsgpCoreResponseMessageSender outboundOsgpCoreResponseMessageSender;", "modifier": "private final", "type": "OutboundOsgpCoreResponseMessageSender", "declarator": "outboundOsgpCoreResponseMessageSender", "var_name": "outboundOsgpCoreResponseMessageSender"}, {"original_string": "private final MqttClientAdapterFactory mqttClientAdapterFactory;", "modifier": "private final", "type": "MqttClientAdapterFactory", "declarator": "mqttClientAdapterFactory", "var_name": "mqttClientAdapterFactory"}, {"original_string": "private final int defaultPort;", "modifier": "private final", "type": "int", "declarator": "defaultPort", "var_name": "defaultPort"}, {"original_string": "private final String defaultTopics;", "modifier": "private final", "type": "String", "declarator": "defaultTopics", "var_name": "defaultTopics"}, {"original_string": "private final String defaultQos;", "modifier": "private final", "type": "String", "declarator": "defaultQos", "var_name": "defaultQos"}], "methods": [{"identifier": "SubscriptionService", "parameters": "(final MqttDeviceRepository mqttDeviceRepository,\n            final MqttClientAdapterFactory mqttClientAdapterFactory,\n            final OutboundOsgpCoreResponseMessageSender outboundOsgpCoreResponseMessageSender,\n            @Value(\"#{new Integer('${mqtt.broker.defaultPort}')}\") final int defaultPort,\n            @Value(\"${mqtt.broker.defaultTopics}\") final String defaultTopics,\n            @Value(\"${mqtt.broker.defaultQos}\") final String defaultQos)", "modifiers": "public", "return": "", "signature": " SubscriptionService(final MqttDeviceRepository mqttDeviceRepository,\n            final MqttClientAdapterFactory mqttClientAdapterFactory,\n            final OutboundOsgpCoreResponseMessageSender outboundOsgpCoreResponseMessageSender,\n            @Value(\"#{new Integer('${mqtt.broker.defaultPort}')}\") final int defaultPort,\n            @Value(\"${mqtt.broker.defaultTopics}\") final String defaultTopics,\n            @Value(\"${mqtt.broker.defaultQos}\") final String defaultQos)", "full_signature": "public  SubscriptionService(final MqttDeviceRepository mqttDeviceRepository,\n            final MqttClientAdapterFactory mqttClientAdapterFactory,\n            final OutboundOsgpCoreResponseMessageSender outboundOsgpCoreResponseMessageSender,\n            @Value(\"#{new Integer('${mqtt.broker.defaultPort}')}\") final int defaultPort,\n            @Value(\"${mqtt.broker.defaultTopics}\") final String defaultTopics,\n            @Value(\"${mqtt.broker.defaultQos}\") final String defaultQos)", "class_method_signature": "SubscriptionService.SubscriptionService(final MqttDeviceRepository mqttDeviceRepository,\n            final MqttClientAdapterFactory mqttClientAdapterFactory,\n            final OutboundOsgpCoreResponseMessageSender outboundOsgpCoreResponseMessageSender,\n            @Value(\"#{new Integer('${mqtt.broker.defaultPort}')}\") final int defaultPort,\n            @Value(\"${mqtt.broker.defaultTopics}\") final String defaultTopics,\n            @Value(\"${mqtt.broker.defaultQos}\") final String defaultQos)", "testcase": false, "constructor": true}, {"identifier": "subscribe", "parameters": "(final MessageMetadata messageMetadata)", "modifiers": "public", "return": "void", "signature": "void subscribe(final MessageMetadata messageMetadata)", "full_signature": "public void subscribe(final MessageMetadata messageMetadata)", "class_method_signature": "SubscriptionService.subscribe(final MessageMetadata messageMetadata)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateDevice", "parameters": "(final MessageMetadata messageMetadata)", "modifiers": "private", "return": "MqttDevice", "signature": "MqttDevice getOrCreateDevice(final MessageMetadata messageMetadata)", "full_signature": "private MqttDevice getOrCreateDevice(final MessageMetadata messageMetadata)", "class_method_signature": "SubscriptionService.getOrCreateDevice(final MessageMetadata messageMetadata)", "testcase": false, "constructor": false}, {"identifier": "onConnect", "parameters": "(final MqttClientAdapter mqttClientAdapter, final Mqtt3ConnAck ack,\n            final Throwable throwable)", "modifiers": "@Override public", "return": "void", "signature": "void onConnect(final MqttClientAdapter mqttClientAdapter, final Mqtt3ConnAck ack,\n            final Throwable throwable)", "full_signature": "@Override public void onConnect(final MqttClientAdapter mqttClientAdapter, final Mqtt3ConnAck ack,\n            final Throwable throwable)", "class_method_signature": "SubscriptionService.onConnect(final MqttClientAdapter mqttClientAdapter, final Mqtt3ConnAck ack,\n            final Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "onConnectSuccess", "parameters": "(final MqttClientAdapter mqttClientAdapter, final Mqtt3ConnAck ack)", "modifiers": "private", "return": "void", "signature": "void onConnectSuccess(final MqttClientAdapter mqttClientAdapter, final Mqtt3ConnAck ack)", "full_signature": "private void onConnectSuccess(final MqttClientAdapter mqttClientAdapter, final Mqtt3ConnAck ack)", "class_method_signature": "SubscriptionService.onConnectSuccess(final MqttClientAdapter mqttClientAdapter, final Mqtt3ConnAck ack)", "testcase": false, "constructor": false}, {"identifier": "getQosOrDefault", "parameters": "(final MqttDevice device)", "modifiers": "private", "return": "MqttQos", "signature": "MqttQos getQosOrDefault(final MqttDevice device)", "full_signature": "private MqttQos getQosOrDefault(final MqttDevice device)", "class_method_signature": "SubscriptionService.getQosOrDefault(final MqttDevice device)", "testcase": false, "constructor": false}, {"identifier": "onSubscribe", "parameters": "(final MqttClientAdapter mqttClientAdapter, final Mqtt3SubAck subAck,\n            final Throwable throwable)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(final MqttClientAdapter mqttClientAdapter, final Mqtt3SubAck subAck,\n            final Throwable throwable)", "full_signature": "@Override public void onSubscribe(final MqttClientAdapter mqttClientAdapter, final Mqtt3SubAck subAck,\n            final Throwable throwable)", "class_method_signature": "SubscriptionService.onSubscribe(final MqttClientAdapter mqttClientAdapter, final Mqtt3SubAck subAck,\n            final Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "onReceive", "parameters": "(final MqttClientAdapter mqttClientAdapter, final byte[] payloadAsBytes)", "modifiers": "@Override public", "return": "void", "signature": "void onReceive(final MqttClientAdapter mqttClientAdapter, final byte[] payloadAsBytes)", "full_signature": "@Override public void onReceive(final MqttClientAdapter mqttClientAdapter, final byte[] payloadAsBytes)", "class_method_signature": "SubscriptionService.onReceive(final MqttClientAdapter mqttClientAdapter, final byte[] payloadAsBytes)", "testcase": false, "constructor": false}], "file": "osgp/protocol-adapter-mqtt/osgp-protocol-adapter-mqtt/src/main/java/org/opensmartgridplatform/adapter/protocol/mqtt/application/services/SubscriptionService.java"}, "focal_method": {"identifier": "subscribe", "parameters": "(final MessageMetadata messageMetadata)", "modifiers": "public", "return": "void", "body": "public void subscribe(final MessageMetadata messageMetadata) {\n        final MqttDevice device = this.getOrCreateDevice(messageMetadata);\n        final MqttClientAdapter mqttClientAdapter = this.mqttClientAdapterFactory.create(device, messageMetadata, this);\n        mqttClientAdapter.connect();\n    }", "signature": "void subscribe(final MessageMetadata messageMetadata)", "full_signature": "public void subscribe(final MessageMetadata messageMetadata)", "class_method_signature": "SubscriptionService.subscribe(final MessageMetadata messageMetadata)", "testcase": false, "constructor": false, "invocations": ["getOrCreateDevice", "create", "connect"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}