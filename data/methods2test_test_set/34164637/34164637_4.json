{"test_class": {"identifier": "DeploymentModuleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DeploymentModuleTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DeploymentModuleTest.class)", "var_name": "LOG"}, {"original_string": "@Mock\n    private Binder mockBinder;", "modifier": "@Mock\n    private", "type": "Binder", "declarator": "mockBinder", "var_name": "mockBinder"}, {"original_string": "@Mock\n    private AnnotatedBindingBuilder mockAnnotatedBindingBuilder;", "modifier": "@Mock\n    private", "type": "AnnotatedBindingBuilder", "declarator": "mockAnnotatedBindingBuilder", "var_name": "mockAnnotatedBindingBuilder"}, {"original_string": "@Mock\n    private LinkedBindingBuilder mockLinkedBindingBuilder;", "modifier": "@Mock\n    private", "type": "LinkedBindingBuilder", "declarator": "mockLinkedBindingBuilder", "var_name": "mockLinkedBindingBuilder"}], "file": "deployment/src/test/java/com/mapcode/services/deployment/DeploymentModuleTest.java"}, "test_case": {"identifier": "testDeploymentModule", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testDeploymentModule() {\n        LOG.info(\"testDeploymentModule\");\n\n        // Initialize Mockito.\n        MockitoAnnotations.initMocks(this);\n        doNothing().when(mockAnnotatedBindingBuilder).asEagerSingleton();\n        doNothing().when(mockLinkedBindingBuilder).asEagerSingleton();\n        doNothing().when(mockLinkedBindingBuilder).toInstance(String.class);\n        when(mockBinder.skipSources(Names.class)).thenReturn(mockBinder);\n        when(mockBinder.bind(any(Key.class))).thenReturn(mockLinkedBindingBuilder);\n        when(mockBinder.bind(any(Class.class))).thenReturn(mockAnnotatedBindingBuilder);\n\n        // Execute start-up check.\n        final DeploymentModule deploymentModule = new DeploymentModule();\n        deploymentModule.configure(mockBinder);\n        Assert.assertNotNull(deploymentModule);\n    }", "signature": "void testDeploymentModule()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testDeploymentModule()", "class_method_signature": "DeploymentModuleTest.testDeploymentModule()", "testcase": true, "constructor": false, "invocations": ["info", "initMocks", "asEagerSingleton", "when", "doNothing", "asEagerSingleton", "when", "doNothing", "toInstance", "when", "doNothing", "thenReturn", "when", "skipSources", "thenReturn", "when", "bind", "any", "thenReturn", "when", "bind", "any", "configure", "assertNotNull"]}, "focal_class": {"identifier": "DeploymentModule", "superclass": "extends GuiceConfigurationModule", "interfaces": "", "fields": [], "methods": [{"identifier": "DeploymentModule", "parameters": "()", "modifiers": "public", "return": "", "signature": " DeploymentModule()", "full_signature": "public  DeploymentModule()", "class_method_signature": "DeploymentModule.DeploymentModule()", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(@Nonnull final Binder binder)", "modifiers": "@Override public", "return": "void", "signature": "void configure(@Nonnull final Binder binder)", "full_signature": "@Override public void configure(@Nonnull final Binder binder)", "class_method_signature": "DeploymentModule.configure(@Nonnull final Binder binder)", "testcase": false, "constructor": false}], "file": "deployment/src/main/java/com/mapcode/services/deployment/DeploymentModule.java"}, "focal_method": {"identifier": "DeploymentModule", "parameters": "()", "modifiers": "public", "return": "", "body": "public DeploymentModule() {\n        super(\n                \"classpath:speedtools.default.properties\",      // Default set required by SpeedTools.\n                \"classpath:mapcode.properties\",                 // Specific for mapcode service.\n                \"classpath:mapcode-secret.properties\");         // Secret properties (not in WAR file).\n    }", "signature": " DeploymentModule()", "full_signature": "public  DeploymentModule()", "class_method_signature": "DeploymentModule.DeploymentModule()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 34164637, "url": "https://github.com/mapcode-foundation/mapcode-rest-service", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 1181, "license": "licensed"}}