{"test_class": {"identifier": "GithubIssueTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public JenkinsRule j = new JenkinsRule();", "modifier": "@Rule\n    public", "type": "JenkinsRule", "declarator": "j = new JenkinsRule()", "var_name": "j"}], "file": "blueocean-github-pipeline/src/test/java/io/jenkins/blueocean/blueocean_github_pipeline/GithubIssueTest.java"}, "test_case": {"identifier": "findIssueKeys", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findIssueKeys() {\n        Assert.assertEquals(\"Find single\", Lists.newArrayList(\"123\"), GithubIssue.findIssueKeys(\"Closed #123\"));\n        Assert.assertEquals(\"Find multiple\", Lists.newArrayList(\"123\", \"143\"), GithubIssue.findIssueKeys(\"Closed #123 and #143\"));\n        Assert.assertEquals(\"Do not find alpha\", Lists.newArrayList(), GithubIssue.findIssueKeys(\"#AAA\"));\n    }", "signature": "void findIssueKeys()", "full_signature": "@Test public void findIssueKeys()", "class_method_signature": "GithubIssueTest.findIssueKeys()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "newArrayList", "findIssueKeys", "assertEquals", "newArrayList", "findIssueKeys", "assertEquals", "newArrayList", "findIssueKeys"]}, "focal_class": {"identifier": "GithubIssue", "superclass": "extends BlueIssue", "interfaces": "", "fields": [{"original_string": "private static final Pattern PATTERN = Pattern.compile(\"((?:[\\\\w-.]+\\\\/[\\\\w-.]+)?#[1-9]\\\\d*)\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN = Pattern.compile(\"((?:[\\\\w-.]+\\\\/[\\\\w-.]+)?#[1-9]\\\\d*)\")", "var_name": "PATTERN"}, {"original_string": "private final String id;", "modifier": "private final", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private final String url;", "modifier": "private final", "type": "String", "declarator": "url", "var_name": "url"}], "methods": [{"identifier": "GithubIssue", "parameters": "(String id, String url)", "modifiers": "public", "return": "", "signature": " GithubIssue(String id, String url)", "full_signature": "public  GithubIssue(String id, String url)", "class_method_signature": "GithubIssue.GithubIssue(String id, String url)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "GithubIssue.getId()", "testcase": false, "constructor": false}, {"identifier": "getURL", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getURL()", "full_signature": "@Override public String getURL()", "class_method_signature": "GithubIssue.getURL()", "testcase": false, "constructor": false}, {"identifier": "findIssueKeys", "parameters": "(String input)", "modifiers": "static", "return": "Collection<String>", "signature": "Collection<String> findIssueKeys(String input)", "full_signature": "static Collection<String> findIssueKeys(String input)", "class_method_signature": "GithubIssue.findIssueKeys(String input)", "testcase": false, "constructor": false}], "file": "blueocean-github-pipeline/src/main/java/io/jenkins/blueocean/blueocean_github_pipeline/GithubIssue.java"}, "focal_method": {"identifier": "findIssueKeys", "parameters": "(String input)", "modifiers": "static", "return": "Collection<String>", "body": "static Collection<String> findIssueKeys(String input) {\n        Collection<String> ids = new ArrayList<>();\n        Matcher m = PATTERN.matcher(input);\n        while (m.find()) {\n            if (m.groupCount() >= 1) {\n                String issue = m.group(1);\n                ids.add(issue.substring(1, issue.length()));\n            }\n        }\n        return ids;\n    }", "signature": "Collection<String> findIssueKeys(String input)", "full_signature": "static Collection<String> findIssueKeys(String input)", "class_method_signature": "GithubIssue.findIssueKeys(String input)", "testcase": false, "constructor": false, "invocations": ["matcher", "find", "groupCount", "group", "add", "substring", "length"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}