{"test_class": {"identifier": "CustomProcessorUploadHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String uuid = UUID.randomUUID().toString();", "modifier": "private final", "type": "String", "declarator": "uuid = UUID.randomUUID().toString()", "var_name": "uuid"}, {"original_string": "private final String uploadWatchDirectory = System.getProperty(\"java.io.tmpdir\") + File.separator + uuid;", "modifier": "private final", "type": "String", "declarator": "uploadWatchDirectory = System.getProperty(\"java.io.tmpdir\") + File.separator + uuid", "var_name": "uploadWatchDirectory"}, {"original_string": "private final String failedUploadMoveDirectory = uploadWatchDirectory + File.separator + \"failure\";", "modifier": "private final", "type": "String", "declarator": "failedUploadMoveDirectory = uploadWatchDirectory + File.separator + \"failure\"", "var_name": "failedUploadMoveDirectory"}, {"original_string": "private final String successfulUploadMoveDirectory = uploadWatchDirectory + File.separator + \"success\";", "modifier": "private final", "type": "String", "declarator": "successfulUploadMoveDirectory = uploadWatchDirectory + File.separator + \"success\"", "var_name": "successfulUploadMoveDirectory"}, {"original_string": "private final String notTarFileName = \"someFile.txt\";", "modifier": "private final", "type": "String", "declarator": "notTarFileName = \"someFile.txt\"", "var_name": "notTarFileName"}, {"original_string": "private final String notTarFilePath = uploadWatchDirectory + File.separator + notTarFileName;", "modifier": "private final", "type": "String", "declarator": "notTarFilePath = uploadWatchDirectory + File.separator + notTarFileName", "var_name": "notTarFilePath"}, {"original_string": "private final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader = Thread.currentThread().getContextClassLoader()", "var_name": "classLoader"}, {"original_string": "private InputStream jarFile;", "modifier": "private", "type": "InputStream", "declarator": "jarFile", "var_name": "jarFile"}, {"original_string": "private final String resourceDirectoryPrefix = \"customprocessorupload/\";", "modifier": "private final", "type": "String", "declarator": "resourceDirectoryPrefix = \"customprocessorupload/\"", "var_name": "resourceDirectoryPrefix"}, {"original_string": "CustomProcessorInfo customProcessorInfo;", "modifier": "", "type": "CustomProcessorInfo", "declarator": "customProcessorInfo", "var_name": "customProcessorInfo"}, {"original_string": "@Injectable private StreamCatalogService catalogService;", "modifier": "@Injectable private", "type": "StreamCatalogService", "declarator": "catalogService", "var_name": "catalogService"}, {"original_string": "private @Tested\n    CustomProcessorUploadHandler customProcessorUploadHandler;", "modifier": "private @Tested", "type": "CustomProcessorUploadHandler", "declarator": "customProcessorUploadHandler", "var_name": "customProcessorUploadHandler"}], "file": "streams/service/src/test/java/com/hortonworks/streamline/streams/service/CustomProcessorUploadHandlerTest.java"}, "test_case": {"identifier": "testSuccessfulUpload", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSuccessfulUpload () throws IOException, ComponentConfigException, NoSuchAlgorithmException {\n        String fileName = \"consolecustomprocessor.tar\";\n        URL url  = classLoader.getResource(resourceDirectoryPrefix + fileName);\n        String consoleCustomProcessorTarString = url.getFile();\n        File consoleCustomProcessorTar = new File(consoleCustomProcessorTarString);\n        FileUtils.copyFileToDirectory(consoleCustomProcessorTar, new File(uploadWatchDirectory), false);\n        this.customProcessorUploadHandler.created(Paths.get(uploadWatchDirectory).resolve(fileName));\n        new VerificationsInOrder() {{\n            InputStream jarFileActual;\n            CustomProcessorInfo actual;\n            catalogService.addCustomProcessorInfoAsBundle(actual = withCapture(), jarFileActual = withCapture());\n            times = 1;\n            Assert.assertTrue(actual.getName().equals(customProcessorInfo.getName()));\n            Assert.assertTrue(IOUtils.contentEquals(jarFileActual, jarFile));\n        }};\n    }", "signature": "void testSuccessfulUpload()", "full_signature": "@Test public void testSuccessfulUpload()", "class_method_signature": "CustomProcessorUploadHandlerTest.testSuccessfulUpload()", "testcase": true, "constructor": false, "invocations": ["getResource", "getFile", "copyFileToDirectory", "created", "resolve", "get", "addCustomProcessorInfoAsBundle", "withCapture", "withCapture", "assertTrue", "equals", "getName", "getName", "assertTrue", "contentEquals"]}, "focal_class": {"identifier": "CustomProcessorUploadHandler", "superclass": "", "interfaces": "implements FileEventHandler", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(CustomProcessorUploadHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(CustomProcessorUploadHandler.class)", "var_name": "LOG"}, {"original_string": "private final String jsonInfoFile = \"info.json\";", "modifier": "private final", "type": "String", "declarator": "jsonInfoFile = \"info.json\"", "var_name": "jsonInfoFile"}, {"original_string": "private final String watchPath;", "modifier": "private final", "type": "String", "declarator": "watchPath", "var_name": "watchPath"}, {"original_string": "private final String uploadFailPath;", "modifier": "private final", "type": "String", "declarator": "uploadFailPath", "var_name": "uploadFailPath"}, {"original_string": "private final String uploadSuccessPath;", "modifier": "private final", "type": "String", "declarator": "uploadSuccessPath", "var_name": "uploadSuccessPath"}, {"original_string": "private final StreamCatalogService catalogService;", "modifier": "private final", "type": "StreamCatalogService", "declarator": "catalogService", "var_name": "catalogService"}], "methods": [{"identifier": "CustomProcessorUploadHandler", "parameters": "(String watchPath, String uploadFailPath, String uploadSuccessPath, StreamCatalogService catalogService)", "modifiers": "public", "return": "", "signature": " CustomProcessorUploadHandler(String watchPath, String uploadFailPath, String uploadSuccessPath, StreamCatalogService catalogService)", "full_signature": "public  CustomProcessorUploadHandler(String watchPath, String uploadFailPath, String uploadSuccessPath, StreamCatalogService catalogService)", "class_method_signature": "CustomProcessorUploadHandler.CustomProcessorUploadHandler(String watchPath, String uploadFailPath, String uploadSuccessPath, StreamCatalogService catalogService)", "testcase": false, "constructor": true}, {"identifier": "getDirectoryToWatch", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDirectoryToWatch()", "full_signature": "@Override public String getDirectoryToWatch()", "class_method_signature": "CustomProcessorUploadHandler.getDirectoryToWatch()", "testcase": false, "constructor": false}, {"identifier": "created", "parameters": "(Path path)", "modifiers": "@Override public", "return": "void", "signature": "void created(Path path)", "full_signature": "@Override public void created(Path path)", "class_method_signature": "CustomProcessorUploadHandler.created(Path path)", "testcase": false, "constructor": false}, {"identifier": "deleted", "parameters": "(Path path)", "modifiers": "@Override public", "return": "void", "signature": "void deleted(Path path)", "full_signature": "@Override public void deleted(Path path)", "class_method_signature": "CustomProcessorUploadHandler.deleted(Path path)", "testcase": false, "constructor": false}, {"identifier": "modified", "parameters": "(Path path)", "modifiers": "@Override public", "return": "void", "signature": "void modified(Path path)", "full_signature": "@Override public void modified(Path path)", "class_method_signature": "CustomProcessorUploadHandler.modified(Path path)", "testcase": false, "constructor": false}, {"identifier": "getCustomProcessorInfo", "parameters": "(File tarFile)", "modifiers": "private", "return": "CustomProcessorInfo", "signature": "CustomProcessorInfo getCustomProcessorInfo(File tarFile)", "full_signature": "private CustomProcessorInfo getCustomProcessorInfo(File tarFile)", "class_method_signature": "CustomProcessorUploadHandler.getCustomProcessorInfo(File tarFile)", "testcase": false, "constructor": false}, {"identifier": "getJarFile", "parameters": "(File tarFile)", "modifiers": "private", "return": "InputStream", "signature": "InputStream getJarFile(File tarFile)", "full_signature": "private InputStream getJarFile(File tarFile)", "class_method_signature": "CustomProcessorUploadHandler.getJarFile(File tarFile)", "testcase": false, "constructor": false}, {"identifier": "getJarFileAsByteArray", "parameters": "(File tarFile)", "modifiers": "private", "return": "byte[]", "signature": "byte[] getJarFileAsByteArray(File tarFile)", "full_signature": "private byte[] getJarFileAsByteArray(File tarFile)", "class_method_signature": "CustomProcessorUploadHandler.getJarFileAsByteArray(File tarFile)", "testcase": false, "constructor": false}, {"identifier": "getFileAsByteArray", "parameters": "(File tarFile, String fileName)", "modifiers": "private", "return": "byte[]", "signature": "byte[] getFileAsByteArray(File tarFile, String fileName)", "full_signature": "private byte[] getFileAsByteArray(File tarFile, String fileName)", "class_method_signature": "CustomProcessorUploadHandler.getFileAsByteArray(File tarFile, String fileName)", "testcase": false, "constructor": false}, {"identifier": "getFileAsByteArray", "parameters": "(File tarFile, Function<String, Boolean> filterFunc)", "modifiers": "private", "return": "byte[]", "signature": "byte[] getFileAsByteArray(File tarFile, Function<String, Boolean> filterFunc)", "full_signature": "private byte[] getFileAsByteArray(File tarFile, Function<String, Boolean> filterFunc)", "class_method_signature": "CustomProcessorUploadHandler.getFileAsByteArray(File tarFile, Function<String, Boolean> filterFunc)", "testcase": false, "constructor": false}, {"identifier": "moveFileToSuccessDirectory", "parameters": "(File fileToMove)", "modifiers": "private", "return": "void", "signature": "void moveFileToSuccessDirectory(File fileToMove)", "full_signature": "private void moveFileToSuccessDirectory(File fileToMove)", "class_method_signature": "CustomProcessorUploadHandler.moveFileToSuccessDirectory(File fileToMove)", "testcase": false, "constructor": false}, {"identifier": "moveFileToFailDirectory", "parameters": "(File fileToMove)", "modifiers": "private", "return": "void", "signature": "void moveFileToFailDirectory(File fileToMove)", "full_signature": "private void moveFileToFailDirectory(File fileToMove)", "class_method_signature": "CustomProcessorUploadHandler.moveFileToFailDirectory(File fileToMove)", "testcase": false, "constructor": false}, {"identifier": "moveFileToDirectory", "parameters": "(File fileToMove, File moveToDirectory)", "modifiers": "private", "return": "void", "signature": "void moveFileToDirectory(File fileToMove, File moveToDirectory)", "full_signature": "private void moveFileToDirectory(File fileToMove, File moveToDirectory)", "class_method_signature": "CustomProcessorUploadHandler.moveFileToDirectory(File fileToMove, File moveToDirectory)", "testcase": false, "constructor": false}], "file": "streams/service/src/main/java/com/hortonworks/streamline/streams/service/CustomProcessorUploadHandler.java"}, "focal_method": {"identifier": "created", "parameters": "(Path path)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void created (Path path) {\n        File createdFile = path.toFile();\n        LOG.info(\"Created called with \" + createdFile);\n        boolean succeeded = false;\n        try {\n            if (createdFile.getName().endsWith(\".tar\")) {\n                LOG.info(\"Processing file at \" + path);\n                CustomProcessorInfo customProcessorInfo = this.getCustomProcessorInfo(createdFile);\n                if (customProcessorInfo == null) {\n                    LOG.warn(\"No information found for CustomProcessorRuntime in \" + createdFile);\n                    return;\n                }\n                InputStream jarFile = this.getJarFile(createdFile);\n                if (jarFile == null) {\n                    LOG.warn(\"No jar file found for CustomProcessorRuntime in \" + createdFile);\n                    return;\n                }\n                this.catalogService.addCustomProcessorInfoAsBundle(customProcessorInfo, jarFile);\n                succeeded = true;\n            } else {\n                LOG.info(\"Failing unsupported file that was received: \" + path);\n            }\n        } catch (IOException e) {\n            LOG.warn(\"Exception occured while processing tar file: \" + createdFile, e);\n        } catch (ComponentConfigException e) {\n            LOG.warn(\"UI specification for custom processor incorrect for custom processor file: \" + createdFile, e);\n        } catch (NoSuchAlgorithmException e) {\n            LOG.warn(\"Got NoSuchAlgorithmException while calculating digest for jar: \" + createdFile, e);\n        } finally {\n            try {\n                if (succeeded) {\n                    LOG.info(\"CustomProcessorRuntime uploaded successfully from  \" + createdFile + \" Moving file to \" + uploadSuccessPath);\n                    moveFileToSuccessDirectory(createdFile);\n                } else {\n                    LOG.warn(\"CustomProcessorRuntime failed to upload from \" + createdFile + \" Moving file to \" + uploadFailPath);\n                    moveFileToFailDirectory(createdFile);\n                }\n            } catch (IOException e1) {\n                LOG.warn(\"Error moving \" + createdFile.getAbsolutePath() + \" to \" + (succeeded ? uploadSuccessPath : uploadFailPath), e1);\n            }\n        }\n    }", "signature": "void created(Path path)", "full_signature": "@Override public void created(Path path)", "class_method_signature": "CustomProcessorUploadHandler.created(Path path)", "testcase": false, "constructor": false, "invocations": ["toFile", "info", "endsWith", "getName", "info", "getCustomProcessorInfo", "warn", "getJarFile", "warn", "addCustomProcessorInfoAsBundle", "info", "warn", "warn", "warn", "info", "moveFileToSuccessDirectory", "warn", "moveFileToFailDirectory", "warn", "getAbsolutePath"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}