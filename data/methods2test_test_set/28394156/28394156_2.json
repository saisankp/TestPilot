{"test_class": {"identifier": "WorkerManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate WorkerManager workerManager;", "modifier": "@Autowired\n\tprivate", "type": "WorkerManager", "declarator": "workerManager", "var_name": "workerManager"}, {"original_string": "@Autowired\n\tprivate WorkerNodeService workerNodeService;", "modifier": "@Autowired\n\tprivate", "type": "WorkerNodeService", "declarator": "workerNodeService", "var_name": "workerNodeService"}, {"original_string": "@Autowired\n\tprivate WorkerRecoveryManager workerRecoveryManager;", "modifier": "@Autowired\n\tprivate", "type": "WorkerRecoveryManager", "declarator": "workerRecoveryManager", "var_name": "workerRecoveryManager"}, {"original_string": "@Autowired\n\tprivate EngineVersionService engineVersionService;", "modifier": "@Autowired\n\tprivate", "type": "EngineVersionService", "declarator": "engineVersionService", "var_name": "engineVersionService"}, {"original_string": "static final String CREDENTIAL_UUID = \"uuid\";", "modifier": "static final", "type": "String", "declarator": "CREDENTIAL_UUID = \"uuid\"", "var_name": "CREDENTIAL_UUID"}], "file": "worker/worker-manager/score-worker-manager-impl/src/test/java/io/cloudslang/worker/management/services/WorkerManagerTest.java"}, "test_case": {"identifier": "testResolveDotnetVersion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testResolveDotnetVersion() {\n\t\tString version = WorkerManager.resolveDotNetVersion();\n\t\tSystem.out.println(\"Dotnet version is: \" + version);\n\t\tassertThat(version).isNotEmpty();\n\t}", "signature": "void testResolveDotnetVersion()", "full_signature": "@Test public void testResolveDotnetVersion()", "class_method_signature": "WorkerManagerTest.testResolveDotnetVersion()", "testcase": true, "constructor": false, "invocations": ["resolveDotNetVersion", "println", "isNotEmpty", "assertThat"]}, "focal_class": {"identifier": "WorkerManager", "superclass": "", "interfaces": "implements ApplicationListener, EndExecutionCallback, WorkerRecoveryListener", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(WorkerManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(WorkerManager.class)", "var_name": "logger"}, {"original_string": "private static final int KEEP_ALIVE_FAIL_LIMIT = 5;", "modifier": "private static final", "type": "int", "declarator": "KEEP_ALIVE_FAIL_LIMIT = 5", "var_name": "KEEP_ALIVE_FAIL_LIMIT"}, {"original_string": "private static final String DOTNET_PATH = System.getenv(\"WINDIR\") + \"/Microsoft.NET/Framework\";", "modifier": "private static final", "type": "String", "declarator": "DOTNET_PATH = System.getenv(\"WINDIR\") + \"/Microsoft.NET/Framework\"", "var_name": "DOTNET_PATH"}, {"original_string": "@Resource\n    private String workerUuid;", "modifier": "@Resource\n    private", "type": "String", "declarator": "workerUuid", "var_name": "workerUuid"}, {"original_string": "@Autowired\n    protected WorkerNodeService workerNodeService;", "modifier": "@Autowired\n    protected", "type": "WorkerNodeService", "declarator": "workerNodeService", "var_name": "workerNodeService"}, {"original_string": "@Autowired\n    private EngineVersionService engineVersionService;", "modifier": "@Autowired\n    private", "type": "EngineVersionService", "declarator": "engineVersionService", "var_name": "engineVersionService"}, {"original_string": "@Autowired\n    protected WorkerConfigurationService workerConfigurationService;", "modifier": "@Autowired\n    protected", "type": "WorkerConfigurationService", "declarator": "workerConfigurationService", "var_name": "workerConfigurationService"}, {"original_string": "@Autowired\n    protected WorkerRecoveryManager recoveryManager;", "modifier": "@Autowired\n    protected", "type": "WorkerRecoveryManager", "declarator": "recoveryManager", "var_name": "recoveryManager"}, {"original_string": "@Autowired\n    protected WorkerVersionService workerVersionService;", "modifier": "@Autowired\n    protected", "type": "WorkerVersionService", "declarator": "workerVersionService", "var_name": "workerVersionService"}, {"original_string": "private BlockingQueue<Runnable> inBuffer;", "modifier": "private", "type": "BlockingQueue<Runnable>", "declarator": "inBuffer", "var_name": "inBuffer"}, {"original_string": "@Autowired\n    @Qualifier(\"numberOfExecutionThreads\")\n    private Integer numberOfThreads;", "modifier": "@Autowired\n    @Qualifier(\"numberOfExecutionThreads\")\n    private", "type": "Integer", "declarator": "numberOfThreads", "var_name": "numberOfThreads"}, {"original_string": "@Autowired(required = false)\n    @Qualifier(\"initStartUpSleep\")\n    private Long initStartUpSleep = 15 * 1000L;", "modifier": "@Autowired(required = false)\n    @Qualifier(\"initStartUpSleep\")\n    private", "type": "Long", "declarator": "initStartUpSleep = 15 * 1000L", "var_name": "initStartUpSleep"}, {"original_string": "@Autowired(required = false)\n    @Qualifier(\"maxStartUpSleep\")\n    private Long maxStartUpSleep = 10 * 60 * 1000L;", "modifier": "@Autowired(required = false)\n    @Qualifier(\"maxStartUpSleep\")\n    private", "type": "Long", "declarator": "maxStartUpSleep = 10 * 60 * 1000L", "var_name": "maxStartUpSleep"}, {"original_string": "@Autowired\n    private WorkerConfigurationUtils workerConfigurationUtils;", "modifier": "@Autowired\n    private", "type": "WorkerConfigurationUtils", "declarator": "workerConfigurationUtils", "var_name": "workerConfigurationUtils"}, {"original_string": "@Autowired\n    @Qualifier(\"inBufferCapacity\")\n    private Integer capacity;", "modifier": "@Autowired\n    @Qualifier(\"inBufferCapacity\")\n    private", "type": "Integer", "declarator": "capacity", "var_name": "capacity"}, {"original_string": "@Autowired\n    private WorkerStateUpdateService workerStateUpdateService;", "modifier": "@Autowired\n    private", "type": "WorkerStateUpdateService", "declarator": "workerStateUpdateService", "var_name": "workerStateUpdateService"}, {"original_string": "private int keepAliveFailCount = 0;", "modifier": "private", "type": "int", "declarator": "keepAliveFailCount = 0", "var_name": "keepAliveFailCount"}, {"original_string": "private ExecutorService executorService;", "modifier": "private", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private ConcurrentMap<Long, Queue<Future>> mapOfRunningTasks;", "modifier": "private", "type": "ConcurrentMap<Long, Queue<Future>>", "declarator": "mapOfRunningTasks", "var_name": "mapOfRunningTasks"}, {"original_string": "private volatile boolean endOfInit = false;", "modifier": "private volatile", "type": "boolean", "declarator": "endOfInit = false", "var_name": "endOfInit"}, {"original_string": "private volatile boolean initStarted = false;", "modifier": "private volatile", "type": "boolean", "declarator": "initStarted = false", "var_name": "initStarted"}, {"original_string": "private boolean up = false;", "modifier": "private", "type": "boolean", "declarator": "up = false", "var_name": "up"}, {"original_string": "private int threadPoolVersion = 0;", "modifier": "private", "type": "int", "declarator": "threadPoolVersion = 0", "var_name": "threadPoolVersion"}, {"original_string": "private boolean newCancelBehaviour;", "modifier": "private", "type": "boolean", "declarator": "newCancelBehaviour", "var_name": "newCancelBehaviour"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct private", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct private void init()", "class_method_signature": "WorkerManager.init()", "testcase": false, "constructor": false}, {"identifier": "addExecution", "parameters": "(long executionId, Runnable runnable)", "modifiers": "public", "return": "void", "signature": "void addExecution(long executionId, Runnable runnable)", "full_signature": "public void addExecution(long executionId, Runnable runnable)", "class_method_signature": "WorkerManager.addExecution(long executionId, Runnable runnable)", "testcase": false, "constructor": false}, {"identifier": "newQueue", "parameters": "(Future future)", "modifiers": "private", "return": "Queue<Future>", "signature": "Queue<Future> newQueue(Future future)", "full_signature": "private Queue<Future> newQueue(Future future)", "class_method_signature": "WorkerManager.newQueue(Future future)", "testcase": false, "constructor": false}, {"identifier": "addLists", "parameters": "(Queue<Future> oldValue, Queue<Future> newValue)", "modifiers": "private", "return": "Queue<Future>", "signature": "Queue<Future> addLists(Queue<Future> oldValue, Queue<Future> newValue)", "full_signature": "private Queue<Future> addLists(Queue<Future> oldValue, Queue<Future> newValue)", "class_method_signature": "WorkerManager.addLists(Queue<Future> oldValue, Queue<Future> newValue)", "testcase": false, "constructor": false}, {"identifier": "endExecution", "parameters": "(long executionId)", "modifiers": "@Override public", "return": "void", "signature": "void endExecution(long executionId)", "full_signature": "@Override public void endExecution(long executionId)", "class_method_signature": "WorkerManager.endExecution(long executionId)", "testcase": false, "constructor": false}, {"identifier": "getInBufferSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getInBufferSize()", "full_signature": "public int getInBufferSize()", "class_method_signature": "WorkerManager.getInBufferSize()", "testcase": false, "constructor": false}, {"identifier": "interruptCanceledExecutions", "parameters": "()", "modifiers": "@SuppressWarnings(\"unused\") // Scheduled in scoreWorkerSchedulerContext.xml public", "return": "void", "signature": "void interruptCanceledExecutions()", "full_signature": "@SuppressWarnings(\"unused\") // Scheduled in scoreWorkerSchedulerContext.xml public void interruptCanceledExecutions()", "class_method_signature": "WorkerManager.interruptCanceledExecutions()", "testcase": false, "constructor": false}, {"identifier": "workerKeepAlive", "parameters": "()", "modifiers": "@SuppressWarnings(\"unused\") // Scheduled in xml public", "return": "void", "signature": "void workerKeepAlive()", "full_signature": "@SuppressWarnings(\"unused\") // Scheduled in xml public void workerKeepAlive()", "class_method_signature": "WorkerManager.workerKeepAlive()", "testcase": false, "constructor": false}, {"identifier": "logStatistics", "parameters": "()", "modifiers": "@SuppressWarnings(\"unused\") // called by scheduler public", "return": "void", "signature": "void logStatistics()", "full_signature": "@SuppressWarnings(\"unused\") // called by scheduler public void logStatistics()", "class_method_signature": "WorkerManager.logStatistics()", "testcase": false, "constructor": false}, {"identifier": "getWorkerUuid", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getWorkerUuid()", "full_signature": "public String getWorkerUuid()", "class_method_signature": "WorkerManager.getWorkerUuid()", "testcase": false, "constructor": false}, {"identifier": "getRunningTasksCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRunningTasksCount()", "full_signature": "public int getRunningTasksCount()", "class_method_signature": "WorkerManager.getRunningTasksCount()", "testcase": false, "constructor": false}, {"identifier": "getExecutionThreadsCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getExecutionThreadsCount()", "full_signature": "public int getExecutionThreadsCount()", "class_method_signature": "WorkerManager.getExecutionThreadsCount()", "testcase": false, "constructor": false}, {"identifier": "onApplicationEvent", "parameters": "(final ApplicationEvent applicationEvent)", "modifiers": "@Override public", "return": "void", "signature": "void onApplicationEvent(final ApplicationEvent applicationEvent)", "full_signature": "@Override public void onApplicationEvent(final ApplicationEvent applicationEvent)", "class_method_signature": "WorkerManager.onApplicationEvent(final ApplicationEvent applicationEvent)", "testcase": false, "constructor": false}, {"identifier": "doStartup", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void doStartup()", "full_signature": "private void doStartup()", "class_method_signature": "WorkerManager.doStartup()", "testcase": false, "constructor": false}, {"identifier": "doShutdown", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void doShutdown()", "full_signature": "private void doShutdown()", "class_method_signature": "WorkerManager.doShutdown()", "testcase": false, "constructor": false}, {"identifier": "resolveDotNetVersion", "parameters": "()", "modifiers": "protected static", "return": "String", "signature": "String resolveDotNetVersion()", "full_signature": "protected static String resolveDotNetVersion()", "class_method_signature": "WorkerManager.resolveDotNetVersion()", "testcase": false, "constructor": false}, {"identifier": "isUp", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUp()", "full_signature": "public boolean isUp()", "class_method_signature": "WorkerManager.isUp()", "testcase": false, "constructor": false}, {"identifier": "isFromCurrentThreadPool", "parameters": "(String threadName)", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean isFromCurrentThreadPool(String threadName)", "full_signature": "public synchronized boolean isFromCurrentThreadPool(String threadName)", "class_method_signature": "WorkerManager.isFromCurrentThreadPool(String threadName)", "testcase": false, "constructor": false}, {"identifier": "doRecovery", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void doRecovery()", "full_signature": "public void doRecovery()", "class_method_signature": "WorkerManager.doRecovery()", "testcase": false, "constructor": false}, {"identifier": "getTreadPoolVersion", "parameters": "()", "modifiers": "private synchronized", "return": "int", "signature": "int getTreadPoolVersion()", "full_signature": "private synchronized int getTreadPoolVersion()", "class_method_signature": "WorkerManager.getTreadPoolVersion()", "testcase": false, "constructor": false}, {"identifier": "incrementAndGetTreadPoolVersion", "parameters": "()", "modifiers": "private synchronized", "return": "int", "signature": "int incrementAndGetTreadPoolVersion()", "full_signature": "private synchronized int incrementAndGetTreadPoolVersion()", "class_method_signature": "WorkerManager.incrementAndGetTreadPoolVersion()", "testcase": false, "constructor": false}], "file": "worker/worker-manager/score-worker-manager-impl/src/main/java/io/cloudslang/worker/management/services/WorkerManager.java"}, "focal_method": {"identifier": "resolveDotNetVersion", "parameters": "()", "modifiers": "protected static", "return": "String", "body": "protected static String resolveDotNetVersion() {\n        File dotNetHome = new File(DOTNET_PATH);\n        if (dotNetHome.isDirectory()) {\n            File[] versionFolders = dotNetHome.listFiles(new FileFilter() {\n\n                @Override\n                public boolean accept(File file) {\n                    return file.isDirectory() && file.getName().startsWith(\"v\");\n                }\n            });\n            if (!ArrayUtils.isEmpty(versionFolders)) {\n                String maxVersion = max(versionFolders, on(File.class).getName()).substring(1);\n                return maxVersion.substring(0, 1) + \".x\";\n            }\n        }\n        return \"N/A\";\n    }", "signature": "String resolveDotNetVersion()", "full_signature": "protected static String resolveDotNetVersion()", "class_method_signature": "WorkerManager.resolveDotNetVersion()", "testcase": false, "constructor": false, "invocations": ["isDirectory", "listFiles", "isDirectory", "startsWith", "getName", "isEmpty", "substring", "max", "getName", "on", "substring"]}, "repository": {"repo_id": 28394156, "url": "https://github.com/CloudSlang/score", "stars": 76, "created": "12/23/2014 11:19:26 AM +00:00", "updates": "2020-01-27T14:36:32+00:00", "fork": "False", "license": "licensed"}}