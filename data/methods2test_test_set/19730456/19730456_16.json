{"test_class": {"identifier": "ECKeyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ECKeyTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ECKeyTest.class)", "var_name": "log"}, {"original_string": "private static final SecureRandom secureRandom = new SecureRandom();", "modifier": "private static final", "type": "SecureRandom", "declarator": "secureRandom = new SecureRandom()", "var_name": "secureRandom"}, {"original_string": "private String privString = \"c85ef7d79691fe79573b1a7064c19c1a9819ebdbd1faaab1a8ec92344438aaf4\";", "modifier": "private", "type": "String", "declarator": "privString = \"c85ef7d79691fe79573b1a7064c19c1a9819ebdbd1faaab1a8ec92344438aaf4\"", "var_name": "privString"}, {"original_string": "private BigInteger privateKey = new BigInteger(privString, 16);", "modifier": "private", "type": "BigInteger", "declarator": "privateKey = new BigInteger(privString, 16)", "var_name": "privateKey"}, {"original_string": "private String pubString = \"040947751e3022ecf3016be03ec77ab0ce3c2662b4843898cb068d74f698ccc8ad75aa17564ae80a20bb044ee7a6d903e8e8df624b089c95d66a0570f051e5a05b\";", "modifier": "private", "type": "String", "declarator": "pubString = \"040947751e3022ecf3016be03ec77ab0ce3c2662b4843898cb068d74f698ccc8ad75aa17564ae80a20bb044ee7a6d903e8e8df624b089c95d66a0570f051e5a05b\"", "var_name": "pubString"}, {"original_string": "private String compressedPubString = \"030947751e3022ecf3016be03ec77ab0ce3c2662b4843898cb068d74f698ccc8ad\";", "modifier": "private", "type": "String", "declarator": "compressedPubString = \"030947751e3022ecf3016be03ec77ab0ce3c2662b4843898cb068d74f698ccc8ad\"", "var_name": "compressedPubString"}, {"original_string": "private byte[] pubKey = Hex.decode(pubString);", "modifier": "private", "type": "byte[]", "declarator": "pubKey = Hex.decode(pubString)", "var_name": "pubKey"}, {"original_string": "private byte[] compressedPubKey = Hex.decode(compressedPubString);", "modifier": "private", "type": "byte[]", "declarator": "compressedPubKey = Hex.decode(compressedPubString)", "var_name": "compressedPubKey"}, {"original_string": "private String address = \"cd2a3d9f938e13cd947ec05abc7fe734df8dd826\";", "modifier": "private", "type": "String", "declarator": "address = \"cd2a3d9f938e13cd947ec05abc7fe734df8dd826\"", "var_name": "address"}, {"original_string": "private String exampleMessage = \"This is an example of a signed message.\";", "modifier": "private", "type": "String", "declarator": "exampleMessage = \"This is an example of a signed message.\"", "var_name": "exampleMessage"}, {"original_string": "private String sigBase64 = \"HNLOSI9Nop5o8iywXKwbGbdd8XChK0rRvdRTG46RFcb7dcH+UKlejM/8u1SCoeQvu91jJBMd/nXDs7f5p8ch7Ms=\";", "modifier": "private", "type": "String", "declarator": "sigBase64 = \"HNLOSI9Nop5o8iywXKwbGbdd8XChK0rRvdRTG46RFcb7dcH+UKlejM/8u1SCoeQvu91jJBMd/nXDs7f5p8ch7Ms=\"", "var_name": "sigBase64"}, {"original_string": "private String signatureHex = \"d2ce488f4da29e68f22cb05cac1b19b75df170a12b4ad1bdd4531b8e9115c6fb75c1fe50a95e8ccffcbb5482a1e42fbbdd6324131dfe75c3b3b7f9a7c721eccb01\";", "modifier": "private", "type": "String", "declarator": "signatureHex = \"d2ce488f4da29e68f22cb05cac1b19b75df170a12b4ad1bdd4531b8e9115c6fb75c1fe50a95e8ccffcbb5482a1e42fbbdd6324131dfe75c3b3b7f9a7c721eccb01\"", "var_name": "signatureHex"}], "file": "ethereumj-core/src/test/java/org/ethereum/crypto/ECKeyTest.java"}, "test_case": {"identifier": "testInvalidSignatureLength", "parameters": "()", "modifiers": "@Test(expected = SignatureException.class) public", "return": "void", "body": "@Test(expected = SignatureException.class)\n    public void testInvalidSignatureLength() throws SignatureException {\n        byte[] messageHash = new byte[32];\n        ECKey.signatureToKey(messageHash, \"abcdefg\");\n        fail(\"Expecting a SignatureException for invalid signature length\");\n    }", "signature": "void testInvalidSignatureLength()", "full_signature": "@Test(expected = SignatureException.class) public void testInvalidSignatureLength()", "class_method_signature": "ECKeyTest.testInvalidSignatureLength()", "testcase": true, "constructor": false, "invocations": ["signatureToKey", "fail"]}, "focal_class": {"identifier": "ECKey", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ECKey.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ECKey.class)", "var_name": "logger"}, {"original_string": "public static final ECDomainParameters CURVE;", "modifier": "public static final", "type": "ECDomainParameters", "declarator": "CURVE", "var_name": "CURVE"}, {"original_string": "public static final ECParameterSpec CURVE_SPEC;", "modifier": "public static final", "type": "ECParameterSpec", "declarator": "CURVE_SPEC", "var_name": "CURVE_SPEC"}, {"original_string": "public static final BigInteger HALF_CURVE_ORDER;", "modifier": "public static final", "type": "BigInteger", "declarator": "HALF_CURVE_ORDER", "var_name": "HALF_CURVE_ORDER"}, {"original_string": "public static final ECKey DUMMY;", "modifier": "public static final", "type": "ECKey", "declarator": "DUMMY", "var_name": "DUMMY"}, {"original_string": "private static final SecureRandom secureRandom;", "modifier": "private static final", "type": "SecureRandom", "declarator": "secureRandom", "var_name": "secureRandom"}, {"original_string": "private static final long serialVersionUID = -728224901792295832L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -728224901792295832L", "var_name": "serialVersionUID"}, {"original_string": "private final PrivateKey privKey;", "modifier": "private final", "type": "PrivateKey", "declarator": "privKey", "var_name": "privKey"}, {"original_string": "protected final ECPoint pub;", "modifier": "protected final", "type": "ECPoint", "declarator": "pub", "var_name": "pub"}, {"original_string": "private final Provider provider;", "modifier": "private final", "type": "Provider", "declarator": "provider", "var_name": "provider"}, {"original_string": "transient private byte[] pubKeyHash;", "modifier": "transient private", "type": "byte[]", "declarator": "pubKeyHash", "var_name": "pubKeyHash"}, {"original_string": "transient private byte[] nodeId;", "modifier": "transient private", "type": "byte[]", "declarator": "nodeId", "var_name": "nodeId"}], "methods": [{"identifier": "ECKey", "parameters": "()", "modifiers": "public", "return": "", "signature": " ECKey()", "full_signature": "public  ECKey()", "class_method_signature": "ECKey.ECKey()", "testcase": false, "constructor": true}, {"identifier": "extractPublicKey", "parameters": "(final ECPublicKey ecPublicKey)", "modifiers": "private static", "return": "ECPoint", "signature": "ECPoint extractPublicKey(final ECPublicKey ecPublicKey)", "full_signature": "private static ECPoint extractPublicKey(final ECPublicKey ecPublicKey)", "class_method_signature": "ECKey.extractPublicKey(final ECPublicKey ecPublicKey)", "testcase": false, "constructor": false}, {"identifier": "ECKey", "parameters": "(Provider provider, SecureRandom secureRandom)", "modifiers": "public", "return": "", "signature": " ECKey(Provider provider, SecureRandom secureRandom)", "full_signature": "public  ECKey(Provider provider, SecureRandom secureRandom)", "class_method_signature": "ECKey.ECKey(Provider provider, SecureRandom secureRandom)", "testcase": false, "constructor": true}, {"identifier": "ECKey", "parameters": "(SecureRandom secureRandom)", "modifiers": "public", "return": "", "signature": " ECKey(SecureRandom secureRandom)", "full_signature": "public  ECKey(SecureRandom secureRandom)", "class_method_signature": "ECKey.ECKey(SecureRandom secureRandom)", "testcase": false, "constructor": true}, {"identifier": "isECPrivateKey", "parameters": "(PrivateKey privKey)", "modifiers": "private static", "return": "boolean", "signature": "boolean isECPrivateKey(PrivateKey privKey)", "full_signature": "private static boolean isECPrivateKey(PrivateKey privKey)", "class_method_signature": "ECKey.isECPrivateKey(PrivateKey privKey)", "testcase": false, "constructor": false}, {"identifier": "ECKey", "parameters": "(Provider provider, @Nullable PrivateKey privKey, ECPoint pub)", "modifiers": "public", "return": "", "signature": " ECKey(Provider provider, @Nullable PrivateKey privKey, ECPoint pub)", "full_signature": "public  ECKey(Provider provider, @Nullable PrivateKey privKey, ECPoint pub)", "class_method_signature": "ECKey.ECKey(Provider provider, @Nullable PrivateKey privKey, ECPoint pub)", "testcase": false, "constructor": true}, {"identifier": "privateKeyFromBigInteger", "parameters": "(BigInteger priv)", "modifiers": "private static", "return": "PrivateKey", "signature": "PrivateKey privateKeyFromBigInteger(BigInteger priv)", "full_signature": "private static PrivateKey privateKeyFromBigInteger(BigInteger priv)", "class_method_signature": "ECKey.privateKeyFromBigInteger(BigInteger priv)", "testcase": false, "constructor": false}, {"identifier": "ECKey", "parameters": "(@Nullable BigInteger priv, ECPoint pub)", "modifiers": "public", "return": "", "signature": " ECKey(@Nullable BigInteger priv, ECPoint pub)", "full_signature": "public  ECKey(@Nullable BigInteger priv, ECPoint pub)", "class_method_signature": "ECKey.ECKey(@Nullable BigInteger priv, ECPoint pub)", "testcase": false, "constructor": true}, {"identifier": "compressPoint", "parameters": "(ECPoint uncompressed)", "modifiers": "public static", "return": "ECPoint", "signature": "ECPoint compressPoint(ECPoint uncompressed)", "full_signature": "public static ECPoint compressPoint(ECPoint uncompressed)", "class_method_signature": "ECKey.compressPoint(ECPoint uncompressed)", "testcase": false, "constructor": false}, {"identifier": "decompressPoint", "parameters": "(ECPoint compressed)", "modifiers": "public static", "return": "ECPoint", "signature": "ECPoint decompressPoint(ECPoint compressed)", "full_signature": "public static ECPoint decompressPoint(ECPoint compressed)", "class_method_signature": "ECKey.decompressPoint(ECPoint compressed)", "testcase": false, "constructor": false}, {"identifier": "fromPrivate", "parameters": "(BigInteger privKey)", "modifiers": "public static", "return": "ECKey", "signature": "ECKey fromPrivate(BigInteger privKey)", "full_signature": "public static ECKey fromPrivate(BigInteger privKey)", "class_method_signature": "ECKey.fromPrivate(BigInteger privKey)", "testcase": false, "constructor": false}, {"identifier": "fromPrivate", "parameters": "(byte[] privKeyBytes)", "modifiers": "public static", "return": "ECKey", "signature": "ECKey fromPrivate(byte[] privKeyBytes)", "full_signature": "public static ECKey fromPrivate(byte[] privKeyBytes)", "class_method_signature": "ECKey.fromPrivate(byte[] privKeyBytes)", "testcase": false, "constructor": false}, {"identifier": "fromPrivateAndPrecalculatedPublic", "parameters": "(BigInteger priv, ECPoint pub)", "modifiers": "public static", "return": "ECKey", "signature": "ECKey fromPrivateAndPrecalculatedPublic(BigInteger priv, ECPoint pub)", "full_signature": "public static ECKey fromPrivateAndPrecalculatedPublic(BigInteger priv, ECPoint pub)", "class_method_signature": "ECKey.fromPrivateAndPrecalculatedPublic(BigInteger priv, ECPoint pub)", "testcase": false, "constructor": false}, {"identifier": "fromPrivateAndPrecalculatedPublic", "parameters": "(byte[] priv, byte[] pub)", "modifiers": "public static", "return": "ECKey", "signature": "ECKey fromPrivateAndPrecalculatedPublic(byte[] priv, byte[] pub)", "full_signature": "public static ECKey fromPrivateAndPrecalculatedPublic(byte[] priv, byte[] pub)", "class_method_signature": "ECKey.fromPrivateAndPrecalculatedPublic(byte[] priv, byte[] pub)", "testcase": false, "constructor": false}, {"identifier": "fromPublicOnly", "parameters": "(ECPoint pub)", "modifiers": "public static", "return": "ECKey", "signature": "ECKey fromPublicOnly(ECPoint pub)", "full_signature": "public static ECKey fromPublicOnly(ECPoint pub)", "class_method_signature": "ECKey.fromPublicOnly(ECPoint pub)", "testcase": false, "constructor": false}, {"identifier": "fromPublicOnly", "parameters": "(byte[] pub)", "modifiers": "public static", "return": "ECKey", "signature": "ECKey fromPublicOnly(byte[] pub)", "full_signature": "public static ECKey fromPublicOnly(byte[] pub)", "class_method_signature": "ECKey.fromPublicOnly(byte[] pub)", "testcase": false, "constructor": false}, {"identifier": "decompress", "parameters": "()", "modifiers": "public", "return": "ECKey", "signature": "ECKey decompress()", "full_signature": "public ECKey decompress()", "class_method_signature": "ECKey.decompress()", "testcase": false, "constructor": false}, {"identifier": "compress", "parameters": "()", "modifiers": "public", "return": "ECKey", "signature": "ECKey compress()", "full_signature": "public ECKey compress()", "class_method_signature": "ECKey.compress()", "testcase": false, "constructor": false}, {"identifier": "isPubKeyOnly", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPubKeyOnly()", "full_signature": "public boolean isPubKeyOnly()", "class_method_signature": "ECKey.isPubKeyOnly()", "testcase": false, "constructor": false}, {"identifier": "hasPrivKey", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasPrivKey()", "full_signature": "public boolean hasPrivKey()", "class_method_signature": "ECKey.hasPrivKey()", "testcase": false, "constructor": false}, {"identifier": "publicKeyFromPrivate", "parameters": "(BigInteger privKey, boolean compressed)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] publicKeyFromPrivate(BigInteger privKey, boolean compressed)", "full_signature": "public static byte[] publicKeyFromPrivate(BigInteger privKey, boolean compressed)", "class_method_signature": "ECKey.publicKeyFromPrivate(BigInteger privKey, boolean compressed)", "testcase": false, "constructor": false}, {"identifier": "computeAddress", "parameters": "(byte[] pubBytes)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] computeAddress(byte[] pubBytes)", "full_signature": "public static byte[] computeAddress(byte[] pubBytes)", "class_method_signature": "ECKey.computeAddress(byte[] pubBytes)", "testcase": false, "constructor": false}, {"identifier": "computeAddress", "parameters": "(ECPoint pubPoint)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] computeAddress(ECPoint pubPoint)", "full_signature": "public static byte[] computeAddress(ECPoint pubPoint)", "class_method_signature": "ECKey.computeAddress(ECPoint pubPoint)", "testcase": false, "constructor": false}, {"identifier": "getAddress", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getAddress()", "full_signature": "public byte[] getAddress()", "class_method_signature": "ECKey.getAddress()", "testcase": false, "constructor": false}, {"identifier": "pubBytesWithoutFormat", "parameters": "(ECPoint pubPoint)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] pubBytesWithoutFormat(ECPoint pubPoint)", "full_signature": "public static byte[] pubBytesWithoutFormat(ECPoint pubPoint)", "class_method_signature": "ECKey.pubBytesWithoutFormat(ECPoint pubPoint)", "testcase": false, "constructor": false}, {"identifier": "getNodeId", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getNodeId()", "full_signature": "public byte[] getNodeId()", "class_method_signature": "ECKey.getNodeId()", "testcase": false, "constructor": false}, {"identifier": "fromNodeId", "parameters": "(byte[] nodeId)", "modifiers": "public static", "return": "ECKey", "signature": "ECKey fromNodeId(byte[] nodeId)", "full_signature": "public static ECKey fromNodeId(byte[] nodeId)", "class_method_signature": "ECKey.fromNodeId(byte[] nodeId)", "testcase": false, "constructor": false}, {"identifier": "getPubKey", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getPubKey()", "full_signature": "public byte[] getPubKey()", "class_method_signature": "ECKey.getPubKey()", "testcase": false, "constructor": false}, {"identifier": "getPubKeyPoint", "parameters": "()", "modifiers": "public", "return": "ECPoint", "signature": "ECPoint getPubKeyPoint()", "full_signature": "public ECPoint getPubKeyPoint()", "class_method_signature": "ECKey.getPubKeyPoint()", "testcase": false, "constructor": false}, {"identifier": "getPrivKey", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getPrivKey()", "full_signature": "public BigInteger getPrivKey()", "class_method_signature": "ECKey.getPrivKey()", "testcase": false, "constructor": false}, {"identifier": "isCompressed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCompressed()", "full_signature": "public boolean isCompressed()", "class_method_signature": "ECKey.isCompressed()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "ECKey.toString()", "testcase": false, "constructor": false}, {"identifier": "toStringWithPrivate", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toStringWithPrivate()", "full_signature": "public String toStringWithPrivate()", "class_method_signature": "ECKey.toStringWithPrivate()", "testcase": false, "constructor": false}, {"identifier": "doSign", "parameters": "(byte[] input)", "modifiers": "public", "return": "ECDSASignature", "signature": "ECDSASignature doSign(byte[] input)", "full_signature": "public ECDSASignature doSign(byte[] input)", "class_method_signature": "ECKey.doSign(byte[] input)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(byte[] messageHash)", "modifiers": "public", "return": "ECDSASignature", "signature": "ECDSASignature sign(byte[] messageHash)", "full_signature": "public ECDSASignature sign(byte[] messageHash)", "class_method_signature": "ECKey.sign(byte[] messageHash)", "testcase": false, "constructor": false}, {"identifier": "signatureToKeyBytes", "parameters": "(byte[] messageHash, String signatureBase64)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] signatureToKeyBytes(byte[] messageHash, String signatureBase64)", "full_signature": "public static byte[] signatureToKeyBytes(byte[] messageHash, String signatureBase64)", "class_method_signature": "ECKey.signatureToKeyBytes(byte[] messageHash, String signatureBase64)", "testcase": false, "constructor": false}, {"identifier": "signatureToKeyBytes", "parameters": "(byte[] messageHash, ECDSASignature sig)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] signatureToKeyBytes(byte[] messageHash, ECDSASignature sig)", "full_signature": "public static byte[] signatureToKeyBytes(byte[] messageHash, ECDSASignature sig)", "class_method_signature": "ECKey.signatureToKeyBytes(byte[] messageHash, ECDSASignature sig)", "testcase": false, "constructor": false}, {"identifier": "signatureToAddress", "parameters": "(byte[] messageHash, String signatureBase64)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] signatureToAddress(byte[] messageHash, String signatureBase64)", "full_signature": "public static byte[] signatureToAddress(byte[] messageHash, String signatureBase64)", "class_method_signature": "ECKey.signatureToAddress(byte[] messageHash, String signatureBase64)", "testcase": false, "constructor": false}, {"identifier": "signatureToAddress", "parameters": "(byte[] messageHash, ECDSASignature sig)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] signatureToAddress(byte[] messageHash, ECDSASignature sig)", "full_signature": "public static byte[] signatureToAddress(byte[] messageHash, ECDSASignature sig)", "class_method_signature": "ECKey.signatureToAddress(byte[] messageHash, ECDSASignature sig)", "testcase": false, "constructor": false}, {"identifier": "signatureToKey", "parameters": "(byte[] messageHash, String signatureBase64)", "modifiers": "public static", "return": "ECKey", "signature": "ECKey signatureToKey(byte[] messageHash, String signatureBase64)", "full_signature": "public static ECKey signatureToKey(byte[] messageHash, String signatureBase64)", "class_method_signature": "ECKey.signatureToKey(byte[] messageHash, String signatureBase64)", "testcase": false, "constructor": false}, {"identifier": "signatureToKey", "parameters": "(byte[] messageHash, ECDSASignature sig)", "modifiers": "public static", "return": "ECKey", "signature": "ECKey signatureToKey(byte[] messageHash, ECDSASignature sig)", "full_signature": "public static ECKey signatureToKey(byte[] messageHash, ECDSASignature sig)", "class_method_signature": "ECKey.signatureToKey(byte[] messageHash, ECDSASignature sig)", "testcase": false, "constructor": false}, {"identifier": "keyAgreement", "parameters": "(ECPoint otherParty)", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger keyAgreement(ECPoint otherParty)", "full_signature": "public BigInteger keyAgreement(ECPoint otherParty)", "class_method_signature": "ECKey.keyAgreement(ECPoint otherParty)", "testcase": false, "constructor": false}, {"identifier": "decryptAES", "parameters": "(byte[] cipher)", "modifiers": "public", "return": "byte[]", "signature": "byte[] decryptAES(byte[] cipher)", "full_signature": "public byte[] decryptAES(byte[] cipher)", "class_method_signature": "ECKey.decryptAES(byte[] cipher)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(byte[] data, ECDSASignature signature, byte[] pub)", "modifiers": "public static", "return": "boolean", "signature": "boolean verify(byte[] data, ECDSASignature signature, byte[] pub)", "full_signature": "public static boolean verify(byte[] data, ECDSASignature signature, byte[] pub)", "class_method_signature": "ECKey.verify(byte[] data, ECDSASignature signature, byte[] pub)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(byte[] data, byte[] signature, byte[] pub)", "modifiers": "public static", "return": "boolean", "signature": "boolean verify(byte[] data, byte[] signature, byte[] pub)", "full_signature": "public static boolean verify(byte[] data, byte[] signature, byte[] pub)", "class_method_signature": "ECKey.verify(byte[] data, byte[] signature, byte[] pub)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(byte[] data, byte[] signature)", "modifiers": "public", "return": "boolean", "signature": "boolean verify(byte[] data, byte[] signature)", "full_signature": "public boolean verify(byte[] data, byte[] signature)", "class_method_signature": "ECKey.verify(byte[] data, byte[] signature)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(byte[] sigHash, ECDSASignature signature)", "modifiers": "public", "return": "boolean", "signature": "boolean verify(byte[] sigHash, ECDSASignature signature)", "full_signature": "public boolean verify(byte[] sigHash, ECDSASignature signature)", "class_method_signature": "ECKey.verify(byte[] sigHash, ECDSASignature signature)", "testcase": false, "constructor": false}, {"identifier": "isPubKeyCanonical", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPubKeyCanonical()", "full_signature": "public boolean isPubKeyCanonical()", "class_method_signature": "ECKey.isPubKeyCanonical()", "testcase": false, "constructor": false}, {"identifier": "isPubKeyCanonical", "parameters": "(byte[] pubkey)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPubKeyCanonical(byte[] pubkey)", "full_signature": "public static boolean isPubKeyCanonical(byte[] pubkey)", "class_method_signature": "ECKey.isPubKeyCanonical(byte[] pubkey)", "testcase": false, "constructor": false}, {"identifier": "recoverPubBytesFromSignature", "parameters": "(int recId, ECDSASignature sig, byte[] messageHash)", "modifiers": "@Nullable public static", "return": "byte[]", "signature": "byte[] recoverPubBytesFromSignature(int recId, ECDSASignature sig, byte[] messageHash)", "full_signature": "@Nullable public static byte[] recoverPubBytesFromSignature(int recId, ECDSASignature sig, byte[] messageHash)", "class_method_signature": "ECKey.recoverPubBytesFromSignature(int recId, ECDSASignature sig, byte[] messageHash)", "testcase": false, "constructor": false}, {"identifier": "recoverAddressFromSignature", "parameters": "(int recId, ECDSASignature sig, byte[] messageHash)", "modifiers": "@Nullable public static", "return": "byte[]", "signature": "byte[] recoverAddressFromSignature(int recId, ECDSASignature sig, byte[] messageHash)", "full_signature": "@Nullable public static byte[] recoverAddressFromSignature(int recId, ECDSASignature sig, byte[] messageHash)", "class_method_signature": "ECKey.recoverAddressFromSignature(int recId, ECDSASignature sig, byte[] messageHash)", "testcase": false, "constructor": false}, {"identifier": "recoverFromSignature", "parameters": "(int recId, ECDSASignature sig, byte[] messageHash)", "modifiers": "@Nullable public static", "return": "ECKey", "signature": "ECKey recoverFromSignature(int recId, ECDSASignature sig, byte[] messageHash)", "full_signature": "@Nullable public static ECKey recoverFromSignature(int recId, ECDSASignature sig, byte[] messageHash)", "class_method_signature": "ECKey.recoverFromSignature(int recId, ECDSASignature sig, byte[] messageHash)", "testcase": false, "constructor": false}, {"identifier": "decompressKey", "parameters": "(BigInteger xBN, boolean yBit)", "modifiers": "private static", "return": "ECPoint", "signature": "ECPoint decompressKey(BigInteger xBN, boolean yBit)", "full_signature": "private static ECPoint decompressKey(BigInteger xBN, boolean yBit)", "class_method_signature": "ECKey.decompressKey(BigInteger xBN, boolean yBit)", "testcase": false, "constructor": false}, {"identifier": "getPrivKeyBytes", "parameters": "()", "modifiers": "@Nullable public", "return": "byte[]", "signature": "byte[] getPrivKeyBytes()", "full_signature": "@Nullable public byte[] getPrivKeyBytes()", "class_method_signature": "ECKey.getPrivKeyBytes()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ECKey.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ECKey.hashCode()", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(boolean test, String message)", "modifiers": "private static", "return": "void", "signature": "void check(boolean test, String message)", "full_signature": "private static void check(boolean test, String message)", "class_method_signature": "ECKey.check(boolean test, String message)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/crypto/ECKey.java"}, "focal_method": {"identifier": "signatureToKey", "parameters": "(byte[] messageHash, String signatureBase64)", "modifiers": "public static", "return": "ECKey", "body": "public static ECKey signatureToKey(byte[] messageHash, String signatureBase64) throws SignatureException {\n        final byte[] keyBytes = signatureToKeyBytes(messageHash, signatureBase64);\n        return ECKey.fromPublicOnly(keyBytes);\n    }", "signature": "ECKey signatureToKey(byte[] messageHash, String signatureBase64)", "full_signature": "public static ECKey signatureToKey(byte[] messageHash, String signatureBase64)", "class_method_signature": "ECKey.signatureToKey(byte[] messageHash, String signatureBase64)", "testcase": false, "constructor": false, "invocations": ["signatureToKeyBytes", "fromPublicOnly"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}