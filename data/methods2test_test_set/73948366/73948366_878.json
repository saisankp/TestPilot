{"test_class": {"identifier": "DynamoDBCertRecordStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private AmazonDynamoDB dbClient;", "modifier": "@Mock private", "type": "AmazonDynamoDB", "declarator": "dbClient", "var_name": "dbClient"}], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreTest.java"}, "test_case": {"identifier": "testEnableNotifications", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEnableNotifications() {\n        DynamoDBCertRecordStore store = new DynamoDBCertRecordStore(dbClient, \"Athenz-ZTS-Table\", \"Athenz-ZTS-Current-Time-Index\",null);\n        boolean isEnabled = store.enableNotifications(null, null, null);\n        assertFalse(isEnabled);\n\n        ZTSClientNotificationSenderImpl ztsClientNotificationSender = new ZTSClientNotificationSenderImpl();\n        store = new DynamoDBCertRecordStore(dbClient, \"Athenz-ZTS-Table\", \"Athenz-ZTS-Current-Time-Index\", ztsClientNotificationSender);\n        isEnabled = store.enableNotifications(null, null, null);\n        assertFalse(isEnabled);\n\n        NotificationManager notificationManager = Mockito.mock(NotificationManager.class);\n        RolesProvider rolesProvider = Mockito.mock(RolesProvider.class);\n        String serverName = \"testServer\";\n        isEnabled = store.enableNotifications(notificationManager, rolesProvider, serverName);\n        assertTrue(isEnabled);\n    }", "signature": "void testEnableNotifications()", "full_signature": "@Test public void testEnableNotifications()", "class_method_signature": "DynamoDBCertRecordStoreTest.testEnableNotifications()", "testcase": true, "constructor": false, "invocations": ["enableNotifications", "assertFalse", "enableNotifications", "assertFalse", "mock", "mock", "enableNotifications", "assertTrue"]}, "focal_class": {"identifier": "DynamoDBCertRecordStore", "superclass": "", "interfaces": "implements CertRecordStore", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DynamoDBCertRecordStore.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DynamoDBCertRecordStore.class)", "var_name": "LOGGER"}, {"original_string": "private static final Logger CERTLOGGER = LoggerFactory.getLogger(\"X509CertLogger\");", "modifier": "private static final", "type": "Logger", "declarator": "CERTLOGGER = LoggerFactory.getLogger(\"X509CertLogger\")", "var_name": "CERTLOGGER"}, {"original_string": "private String tableName;", "modifier": "private", "type": "String", "declarator": "tableName", "var_name": "tableName"}, {"original_string": "private String indexName;", "modifier": "private", "type": "String", "declarator": "indexName", "var_name": "indexName"}, {"original_string": "private DynamoDB dynamoDB;", "modifier": "private", "type": "DynamoDB", "declarator": "dynamoDB", "var_name": "dynamoDB"}, {"original_string": "private ZTSClientNotificationSenderImpl ztsClientNotificationSender;", "modifier": "private", "type": "ZTSClientNotificationSenderImpl", "declarator": "ztsClientNotificationSender", "var_name": "ztsClientNotificationSender"}], "methods": [{"identifier": "DynamoDBCertRecordStore", "parameters": "(AmazonDynamoDB client, final String tableName, final String indexName, ZTSClientNotificationSenderImpl ztsClientNotificationSender)", "modifiers": "public", "return": "", "signature": " DynamoDBCertRecordStore(AmazonDynamoDB client, final String tableName, final String indexName, ZTSClientNotificationSenderImpl ztsClientNotificationSender)", "full_signature": "public  DynamoDBCertRecordStore(AmazonDynamoDB client, final String tableName, final String indexName, ZTSClientNotificationSenderImpl ztsClientNotificationSender)", "class_method_signature": "DynamoDBCertRecordStore.DynamoDBCertRecordStore(AmazonDynamoDB client, final String tableName, final String indexName, ZTSClientNotificationSenderImpl ztsClientNotificationSender)", "testcase": false, "constructor": true}, {"identifier": "getConnection", "parameters": "()", "modifiers": "@Override public", "return": "CertRecordStoreConnection", "signature": "CertRecordStoreConnection getConnection()", "full_signature": "@Override public CertRecordStoreConnection getConnection()", "class_method_signature": "DynamoDBCertRecordStore.getConnection()", "testcase": false, "constructor": false}, {"identifier": "setOperationTimeout", "parameters": "(int opTimeout)", "modifiers": "@Override public", "return": "void", "signature": "void setOperationTimeout(int opTimeout)", "full_signature": "@Override public void setOperationTimeout(int opTimeout)", "class_method_signature": "DynamoDBCertRecordStore.setOperationTimeout(int opTimeout)", "testcase": false, "constructor": false}, {"identifier": "clearConnections", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearConnections()", "full_signature": "@Override public void clearConnections()", "class_method_signature": "DynamoDBCertRecordStore.clearConnections()", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(final Principal principal, final String ip, final String provider,\n                    final String instanceId, final X509Certificate x509Cert)", "modifiers": "@Override public", "return": "void", "signature": "void log(final Principal principal, final String ip, final String provider,\n                    final String instanceId, final X509Certificate x509Cert)", "full_signature": "@Override public void log(final Principal principal, final String ip, final String provider,\n                    final String instanceId, final X509Certificate x509Cert)", "class_method_signature": "DynamoDBCertRecordStore.log(final Principal principal, final String ip, final String provider,\n                    final String instanceId, final X509Certificate x509Cert)", "testcase": false, "constructor": false}, {"identifier": "enableNotifications", "parameters": "(NotificationManager notificationManager, RolesProvider rolesProvider, final String serverName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean enableNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, final String serverName)", "full_signature": "@Override public boolean enableNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, final String serverName)", "class_method_signature": "DynamoDBCertRecordStore.enableNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, final String serverName)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStore.java"}, "focal_method": {"identifier": "enableNotifications", "parameters": "(NotificationManager notificationManager, RolesProvider rolesProvider, final String serverName)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean enableNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, final String serverName) {\n        if (ztsClientNotificationSender != null) {\n            return ztsClientNotificationSender.init(notificationManager, rolesProvider, serverName);\n        } else {\n            LOGGER.warn(\"Can't enable notifications as ZTSClientNotificationSenderImpl wasn't provided in CTOR\");\n            return false;\n        }\n    }", "signature": "boolean enableNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, final String serverName)", "full_signature": "@Override public boolean enableNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, final String serverName)", "class_method_signature": "DynamoDBCertRecordStore.enableNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, final String serverName)", "testcase": false, "constructor": false, "invocations": ["init", "warn"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}