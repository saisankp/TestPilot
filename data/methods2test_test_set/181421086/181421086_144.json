{"test_class": {"identifier": "ACLRuleTest", "superclass": "extends FloodlightTestCase", "interfaces": "", "fields": [], "file": "src/agents/apps/floodlight/floodlight-1.2/src/test/java/net/floodlightcontroller/accesscontrollist/ACLRuleTest.java"}, "test_case": {"identifier": "testMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMatch(){\n\t\t\n\t\tint[] cidr = new int[2];\n\t\tACLRule rule1, rule2;\n\t\t\n\t\t// rule1 & rule2 are the same\n\t\trule1 = new ACLRule();\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.1/32\");\n\t\trule1.setNw_src_prefix(cidr[0]);\n\t\trule1.setNw_src_maskbits(cidr[1]);\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.2/32\");\n\t\trule1.setNw_dst_prefix(cidr[0]);\n\t\trule1.setNw_dst_maskbits(cidr[1]);\n\t\trule1.setNw_proto(6);\n\t\trule1.setTp_dst(80);\n\t\trule2 = new ACLRule();\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.1/32\");\n\t\trule2.setNw_src_prefix(cidr[0]);\n\t\trule2.setNw_src_maskbits(cidr[1]);\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.2/32\");\n\t\trule2.setNw_dst_prefix(cidr[0]);\n\t\trule2.setNw_dst_maskbits(cidr[1]);\n\t\trule2.setNw_proto(6);\n\t\trule2.setTp_dst(80);\n\t\tassertTrue(rule1.match(rule2));\n\t\t\n\t\t// rule1 & rule2 are different in nw_proto\n\t\trule1 = new ACLRule();\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.1/32\");\n\t\trule1.setNw_src_prefix(cidr[0]);\n\t\trule1.setNw_src_maskbits(cidr[1]);\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.2/32\");\n\t\trule1.setNw_dst_prefix(cidr[0]);\n\t\trule1.setNw_dst_maskbits(cidr[1]);\n\t\trule1.setNw_proto(6);\n\t\trule2 = new ACLRule();\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.1/32\");\n\t\trule2.setNw_src_prefix(cidr[0]);\n\t\trule2.setNw_src_maskbits(cidr[1]);\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.2/32\");\n\t\trule2.setNw_dst_prefix(cidr[0]);\n\t\trule2.setNw_dst_maskbits(cidr[1]);\n\t\trule2.setNw_proto(11);\n\t\tassertFalse(rule1.match(rule2));\n\t\t\n\t\t// rule1's nw_src is a subnet of rule2's nw_src\n\t\trule1 = new ACLRule();\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.1/32\");\n\t\trule1.setNw_src_prefix(cidr[0]);\n\t\trule1.setNw_src_maskbits(cidr[1]);\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.2/32\");\n\t\trule1.setNw_dst_prefix(cidr[0]);\n\t\trule1.setNw_dst_maskbits(cidr[1]);\n\t\trule1.setNw_proto(1);\n\t\trule2 = new ACLRule();\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.1/8\");\n\t\trule2.setNw_src_prefix(cidr[0]);\n\t\trule2.setNw_src_maskbits(cidr[1]);\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.2/32\");\n\t\trule2.setNw_dst_prefix(cidr[0]);\n\t\trule2.setNw_dst_maskbits(cidr[1]);\n\t\trule2.setNw_proto(1);\n\t\tassertTrue(rule1.match(rule2));\n\t\t\n\t\t// rule1's nw_dst is a subnet of rule2's nw_dst\n\t\trule1 = new ACLRule();\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.1/32\");\n\t\trule1.setNw_src_prefix(cidr[0]);\n\t\trule1.setNw_src_maskbits(cidr[1]);\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.2/32\");\n\t\trule1.setNw_dst_prefix(cidr[0]);\n\t\trule1.setNw_dst_maskbits(cidr[1]);\n\t\trule1.setNw_proto(1);\n\t\trule2 = new ACLRule();\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.1/32\");\n\t\trule2.setNw_src_prefix(cidr[0]);\n\t\trule2.setNw_src_maskbits(cidr[1]);\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.2/8\");\n\t\trule2.setNw_dst_prefix(cidr[0]);\n\t\trule2.setNw_dst_maskbits(cidr[1]);\n\t\trule2.setNw_proto(1);\n\t\tassertTrue(rule1.match(rule2));\n\t\t\n\t\t// rule1's nw_src is specified while rule2's is not\n\t\trule1 = new ACLRule();\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.1/32\");\n\t\trule1.setNw_src_prefix(cidr[0]);\n\t\trule1.setNw_src_maskbits(cidr[1]);\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.2/32\");\n\t\trule1.setNw_dst_prefix(cidr[0]);\n\t\trule1.setNw_dst_maskbits(cidr[1]);\n\t\trule2 = new ACLRule();\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.2/32\");\n\t\trule2.setNw_dst_prefix(cidr[0]);\n\t\trule2.setNw_dst_maskbits(cidr[1]);\n\t\tassertTrue(rule1.match(rule2));\n\t\t\n\t\t// rule1's nw_dst is specified while rule2's is not\n\t\trule1 = new ACLRule();\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.1/32\");\n\t\trule1.setNw_src_prefix(cidr[0]);\n\t\trule1.setNw_src_maskbits(cidr[1]);\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.2/32\");\n\t\trule1.setNw_dst_prefix(cidr[0]);\n\t\trule1.setNw_dst_maskbits(cidr[1]);\n\t\trule2 = new ACLRule();\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.1/32\");\n\t\trule2.setNw_src_prefix(cidr[0]);\n\t\trule2.setNw_src_maskbits(cidr[1]);\n\t\tassertTrue(rule1.match(rule2));\n\t\t\n\t\t// rule1's nw_proto is specified while rule2's is not\n\t\trule1 = new ACLRule();\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.1/32\");\n\t\trule1.setNw_src_prefix(cidr[0]);\n\t\trule1.setNw_src_maskbits(cidr[1]);\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.2/32\");\n\t\trule1.setNw_dst_prefix(cidr[0]);\n\t\trule1.setNw_dst_maskbits(cidr[1]);\n\t\trule1.setNw_proto(6);\n\t\trule2 = new ACLRule();\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.1/32\");\n\t\trule2.setNw_src_prefix(cidr[0]);\n\t\trule2.setNw_src_maskbits(cidr[1]);\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.2/32\");\n\t\trule2.setNw_dst_prefix(cidr[0]);\n\t\trule2.setNw_dst_maskbits(cidr[1]);\n\t\tassertTrue(rule1.match(rule2));\n\t\t\n\t\t// rule1's tp_dst is specified while rule2's is not\n\t\trule1 = new ACLRule();\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.1/32\");\n\t\trule1.setNw_src_prefix(cidr[0]);\n\t\trule1.setNw_src_maskbits(cidr[1]);\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.2/32\");\n\t\trule1.setNw_dst_prefix(cidr[0]);\n\t\trule1.setNw_dst_maskbits(cidr[1]);\n\t\trule1.setNw_proto(6);\n\t\trule1.setTp_dst(80);\n\t\trule2 = new ACLRule();\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.1/32\");\n\t\trule2.setNw_src_prefix(cidr[0]);\n\t\trule2.setNw_src_maskbits(cidr[1]);\n\t\tcidr = IPAddressUtil.parseCIDR(\"10.0.0.2/32\");\n\t\trule2.setNw_dst_prefix(cidr[0]);\n\t\trule2.setNw_dst_maskbits(cidr[1]);\n\t\trule2.setNw_proto(6);\n\t\tassertTrue(rule1.match(rule2));\n\t}", "signature": "void testMatch()", "full_signature": "@Test public void testMatch()", "class_method_signature": "ACLRuleTest.testMatch()", "testcase": true, "constructor": false, "invocations": ["parseCIDR", "setNw_src_prefix", "setNw_src_maskbits", "parseCIDR", "setNw_dst_prefix", "setNw_dst_maskbits", "setNw_proto", "setTp_dst", "parseCIDR", "setNw_src_prefix", "setNw_src_maskbits", "parseCIDR", "setNw_dst_prefix", "setNw_dst_maskbits", "setNw_proto", "setTp_dst", "assertTrue", "match", "parseCIDR", "setNw_src_prefix", "setNw_src_maskbits", "parseCIDR", "setNw_dst_prefix", "setNw_dst_maskbits", "setNw_proto", "parseCIDR", "setNw_src_prefix", "setNw_src_maskbits", "parseCIDR", "setNw_dst_prefix", "setNw_dst_maskbits", "setNw_proto", "assertFalse", "match", "parseCIDR", "setNw_src_prefix", "setNw_src_maskbits", "parseCIDR", "setNw_dst_prefix", "setNw_dst_maskbits", "setNw_proto", "parseCIDR", "setNw_src_prefix", "setNw_src_maskbits", "parseCIDR", "setNw_dst_prefix", "setNw_dst_maskbits", "setNw_proto", "assertTrue", "match", "parseCIDR", "setNw_src_prefix", "setNw_src_maskbits", "parseCIDR", "setNw_dst_prefix", "setNw_dst_maskbits", "setNw_proto", "parseCIDR", "setNw_src_prefix", "setNw_src_maskbits", "parseCIDR", "setNw_dst_prefix", "setNw_dst_maskbits", "setNw_proto", "assertTrue", "match", "parseCIDR", "setNw_src_prefix", "setNw_src_maskbits", "parseCIDR", "setNw_dst_prefix", "setNw_dst_maskbits", "parseCIDR", "setNw_dst_prefix", "setNw_dst_maskbits", "assertTrue", "match", "parseCIDR", "setNw_src_prefix", "setNw_src_maskbits", "parseCIDR", "setNw_dst_prefix", "setNw_dst_maskbits", "parseCIDR", "setNw_src_prefix", "setNw_src_maskbits", "assertTrue", "match", "parseCIDR", "setNw_src_prefix", "setNw_src_maskbits", "parseCIDR", "setNw_dst_prefix", "setNw_dst_maskbits", "setNw_proto", "parseCIDR", "setNw_src_prefix", "setNw_src_maskbits", "parseCIDR", "setNw_dst_prefix", "setNw_dst_maskbits", "assertTrue", "match", "parseCIDR", "setNw_src_prefix", "setNw_src_maskbits", "parseCIDR", "setNw_dst_prefix", "setNw_dst_maskbits", "setNw_proto", "setTp_dst", "parseCIDR", "setNw_src_prefix", "setNw_src_maskbits", "parseCIDR", "setNw_dst_prefix", "setNw_dst_maskbits", "setNw_proto", "assertTrue", "match"]}, "focal_class": {"identifier": "ACLRule", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int id;", "modifier": "private", "type": "int", "declarator": "id", "var_name": "id"}, {"original_string": "private String nw_src;", "modifier": "private", "type": "String", "declarator": "nw_src", "var_name": "nw_src"}, {"original_string": "private String nw_dst;", "modifier": "private", "type": "String", "declarator": "nw_dst", "var_name": "nw_dst"}, {"original_string": "private int nw_src_prefix;", "modifier": "private", "type": "int", "declarator": "nw_src_prefix", "var_name": "nw_src_prefix"}, {"original_string": "private int nw_src_maskbits;", "modifier": "private", "type": "int", "declarator": "nw_src_maskbits", "var_name": "nw_src_maskbits"}, {"original_string": "private int nw_dst_prefix;", "modifier": "private", "type": "int", "declarator": "nw_dst_prefix", "var_name": "nw_dst_prefix"}, {"original_string": "private int nw_dst_maskbits;", "modifier": "private", "type": "int", "declarator": "nw_dst_maskbits", "var_name": "nw_dst_maskbits"}, {"original_string": "private int nw_proto;", "modifier": "private", "type": "int", "declarator": "nw_proto", "var_name": "nw_proto"}, {"original_string": "private int tp_dst;", "modifier": "private", "type": "int", "declarator": "tp_dst", "var_name": "tp_dst"}, {"original_string": "private Action action;", "modifier": "private", "type": "Action", "declarator": "action", "var_name": "action"}], "methods": [{"identifier": "ACLRule", "parameters": "()", "modifiers": "public", "return": "", "signature": " ACLRule()", "full_signature": "public  ACLRule()", "class_method_signature": "ACLRule.ACLRule()", "testcase": false, "constructor": true}, {"identifier": "match", "parameters": "(ACLRule r)", "modifiers": "public", "return": "boolean", "signature": "boolean match(ACLRule r)", "full_signature": "public boolean match(ACLRule r)", "class_method_signature": "ACLRule.match(ACLRule r)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getId()", "full_signature": "public int getId()", "class_method_signature": "ACLRule.getId()", "testcase": false, "constructor": false}, {"identifier": "setId", "parameters": "(int id)", "modifiers": "public", "return": "void", "signature": "void setId(int id)", "full_signature": "public void setId(int id)", "class_method_signature": "ACLRule.setId(int id)", "testcase": false, "constructor": false}, {"identifier": "setNw_src", "parameters": "(String nw_src)", "modifiers": "public", "return": "void", "signature": "void setNw_src(String nw_src)", "full_signature": "public void setNw_src(String nw_src)", "class_method_signature": "ACLRule.setNw_src(String nw_src)", "testcase": false, "constructor": false}, {"identifier": "getNw_src", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNw_src()", "full_signature": "public String getNw_src()", "class_method_signature": "ACLRule.getNw_src()", "testcase": false, "constructor": false}, {"identifier": "setNw_dst", "parameters": "(String nw_dst)", "modifiers": "public", "return": "void", "signature": "void setNw_dst(String nw_dst)", "full_signature": "public void setNw_dst(String nw_dst)", "class_method_signature": "ACLRule.setNw_dst(String nw_dst)", "testcase": false, "constructor": false}, {"identifier": "getNw_dst", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNw_dst()", "full_signature": "public String getNw_dst()", "class_method_signature": "ACLRule.getNw_dst()", "testcase": false, "constructor": false}, {"identifier": "getNw_src_prefix", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNw_src_prefix()", "full_signature": "public int getNw_src_prefix()", "class_method_signature": "ACLRule.getNw_src_prefix()", "testcase": false, "constructor": false}, {"identifier": "setNw_src_prefix", "parameters": "(int nw_src_prefix)", "modifiers": "public", "return": "void", "signature": "void setNw_src_prefix(int nw_src_prefix)", "full_signature": "public void setNw_src_prefix(int nw_src_prefix)", "class_method_signature": "ACLRule.setNw_src_prefix(int nw_src_prefix)", "testcase": false, "constructor": false}, {"identifier": "getNw_src_maskbits", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNw_src_maskbits()", "full_signature": "public int getNw_src_maskbits()", "class_method_signature": "ACLRule.getNw_src_maskbits()", "testcase": false, "constructor": false}, {"identifier": "setNw_src_maskbits", "parameters": "(int nw_src_maskbits)", "modifiers": "public", "return": "void", "signature": "void setNw_src_maskbits(int nw_src_maskbits)", "full_signature": "public void setNw_src_maskbits(int nw_src_maskbits)", "class_method_signature": "ACLRule.setNw_src_maskbits(int nw_src_maskbits)", "testcase": false, "constructor": false}, {"identifier": "getNw_dst_prefix", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNw_dst_prefix()", "full_signature": "public int getNw_dst_prefix()", "class_method_signature": "ACLRule.getNw_dst_prefix()", "testcase": false, "constructor": false}, {"identifier": "setNw_dst_prefix", "parameters": "(int nw_dst_prefix)", "modifiers": "public", "return": "void", "signature": "void setNw_dst_prefix(int nw_dst_prefix)", "full_signature": "public void setNw_dst_prefix(int nw_dst_prefix)", "class_method_signature": "ACLRule.setNw_dst_prefix(int nw_dst_prefix)", "testcase": false, "constructor": false}, {"identifier": "getNw_dst_maskbits", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNw_dst_maskbits()", "full_signature": "public int getNw_dst_maskbits()", "class_method_signature": "ACLRule.getNw_dst_maskbits()", "testcase": false, "constructor": false}, {"identifier": "setNw_dst_maskbits", "parameters": "(int nw_dst_maskbits)", "modifiers": "public", "return": "void", "signature": "void setNw_dst_maskbits(int nw_dst_maskbits)", "full_signature": "public void setNw_dst_maskbits(int nw_dst_maskbits)", "class_method_signature": "ACLRule.setNw_dst_maskbits(int nw_dst_maskbits)", "testcase": false, "constructor": false}, {"identifier": "getNw_proto", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNw_proto()", "full_signature": "public int getNw_proto()", "class_method_signature": "ACLRule.getNw_proto()", "testcase": false, "constructor": false}, {"identifier": "setNw_proto", "parameters": "(int nw_proto)", "modifiers": "public", "return": "void", "signature": "void setNw_proto(int nw_proto)", "full_signature": "public void setNw_proto(int nw_proto)", "class_method_signature": "ACLRule.setNw_proto(int nw_proto)", "testcase": false, "constructor": false}, {"identifier": "getTp_dst", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTp_dst()", "full_signature": "public int getTp_dst()", "class_method_signature": "ACLRule.getTp_dst()", "testcase": false, "constructor": false}, {"identifier": "setTp_dst", "parameters": "(int tp_dst)", "modifiers": "public", "return": "void", "signature": "void setTp_dst(int tp_dst)", "full_signature": "public void setTp_dst(int tp_dst)", "class_method_signature": "ACLRule.setTp_dst(int tp_dst)", "testcase": false, "constructor": false}, {"identifier": "getAction", "parameters": "()", "modifiers": "public", "return": "Action", "signature": "Action getAction()", "full_signature": "public Action getAction()", "class_method_signature": "ACLRule.getAction()", "testcase": false, "constructor": false}, {"identifier": "setAction", "parameters": "(Action action)", "modifiers": "public", "return": "void", "signature": "void setAction(Action action)", "full_signature": "public void setAction(Action action)", "class_method_signature": "ACLRule.setAction(Action action)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ACLRule.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ACLRule.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ACLRule.equals(Object obj)", "testcase": false, "constructor": false}], "file": "src/agents/apps/floodlight/floodlight-1.2/src/main/java/net/floodlightcontroller/accesscontrollist/ACLRule.java"}, "focal_method": {"identifier": "match", "parameters": "(ACLRule r)", "modifiers": "public", "return": "boolean", "body": "public boolean match(ACLRule r) {\n\t\tif ((this.tp_dst == r.tp_dst || r.tp_dst == 0)\n\t\t\t\t&& (this.nw_proto == r.nw_proto || r.nw_proto == 0)\n\t\t\t\t&& (isSubnet(this.getNw_src(), r.getNw_src()) == true)\n\t\t\t\t&& (isSubnet(this.getNw_dst(), r.getNw_dst()) == true)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}", "signature": "boolean match(ACLRule r)", "full_signature": "public boolean match(ACLRule r)", "class_method_signature": "ACLRule.match(ACLRule r)", "testcase": false, "constructor": false, "invocations": ["isSubnet", "getNw_src", "getNw_src", "isSubnet", "getNw_dst", "getNw_dst"]}, "repository": {"repo_id": 181421086, "url": "https://github.com/seungsoo-lee/DELTA", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 99244, "license": "licensed"}}