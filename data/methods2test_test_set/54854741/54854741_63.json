{"test_class": {"identifier": "ImportFilesServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic final TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n\tpublic final", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}, {"original_string": "private final TransactionsService transactionsService = mock(TransactionsService.class);", "modifier": "private final", "type": "TransactionsService", "declarator": "transactionsService = mock(TransactionsService.class)", "var_name": "transactionsService"}, {"original_string": "private final ImportFilesService service = new ImportFilesService(mock(Window.class), transactionsService);", "modifier": "private final", "type": "ImportFilesService", "declarator": "service = new ImportFilesService(mock(Window.class), transactionsService)", "var_name": "service"}], "file": "services/src/test/java/com/greensopinion/finance/services/ImportFilesServiceTest.java"}, "test_case": {"identifier": "importAvoidsDuplicatesWhenImportingIgnoringDescriptionCase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void importAvoidsDuplicatesWhenImportingIgnoringDescriptionCase() {\n\t\tTransaction txn1 = MockTransaction.create(\"2015-06-12\", \"description\", -1263, \"1234123412341234\");\n\t\tTransaction txn2 = MockTransaction.create(\"2015-06-13\", \"description 2\", -1234, \"1234123412341234\");\n\t\tTransaction txn3 = MockTransaction.create(\"2015-06-12\", \"DESCRiption\", -1263, \"1234123412341234\");\n\t\tTransactions originalTransactions = new Transactions(ImmutableList.of(txn1, txn2));\n\t\tdoReturn(originalTransactions).when(transactionsService).retrieve();\n\n\t\tImportFilesService service = new ImportFilesService(mock(Window.class), transactionsService) {\n\t\t\t@Override\n\t\t\tList<Transaction> importFile(String path) {\n\t\t\t\treturn ImmutableList.of(txn3);\n\t\t\t}\n\t\t};\n\n\t\tservice.importFiles(ImmutableList.of(\"a\"), false);\n\n\t\tArgumentCaptor<Transactions> transactionsCaptor = ArgumentCaptor.forClass(Transactions.class);\n\t\tverify(transactionsService).update(transactionsCaptor.capture());\n\n\t\tTransactions transactions = transactionsCaptor.getValue();\n\t\tassertTransactions(ImmutableList.of(txn1, txn2), transactions.getTransactions());\n\t}", "signature": "void importAvoidsDuplicatesWhenImportingIgnoringDescriptionCase()", "full_signature": "@Test public void importAvoidsDuplicatesWhenImportingIgnoringDescriptionCase()", "class_method_signature": "ImportFilesServiceTest.importAvoidsDuplicatesWhenImportingIgnoringDescriptionCase()", "testcase": true, "constructor": false, "invocations": ["create", "create", "create", "of", "retrieve", "when", "doReturn", "mock", "of", "importFiles", "of", "forClass", "update", "verify", "capture", "getValue", "assertTransactions", "of", "getTransactions"]}, "focal_class": {"identifier": "ImportFilesService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Window window;", "modifier": "private final", "type": "Window", "declarator": "window", "var_name": "window"}, {"original_string": "private final TransactionsService transactionsService;", "modifier": "private final", "type": "TransactionsService", "declarator": "transactionsService", "var_name": "transactionsService"}], "methods": [{"identifier": "ImportFilesService", "parameters": "(Window window, TransactionsService transactionsService)", "modifiers": "@Inject", "return": "", "signature": " ImportFilesService(Window window, TransactionsService transactionsService)", "full_signature": "@Inject  ImportFilesService(Window window, TransactionsService transactionsService)", "class_method_signature": "ImportFilesService.ImportFilesService(Window window, TransactionsService transactionsService)", "testcase": false, "constructor": true}, {"identifier": "selectedFiles", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> selectedFiles()", "full_signature": "public List<String> selectedFiles()", "class_method_signature": "ImportFilesService.selectedFiles()", "testcase": false, "constructor": false}, {"identifier": "importFiles", "parameters": "(List<String> files, boolean deleteAfterImport)", "modifiers": "public", "return": "void", "signature": "void importFiles(List<String> files, boolean deleteAfterImport)", "full_signature": "public void importFiles(List<String> files, boolean deleteAfterImport)", "class_method_signature": "ImportFilesService.importFiles(List<String> files, boolean deleteAfterImport)", "testcase": false, "constructor": false}, {"identifier": "addTransactions", "parameters": "(Transactions transactions, List<Transaction> provided)", "modifiers": "private", "return": "Transactions", "signature": "Transactions addTransactions(Transactions transactions, List<Transaction> provided)", "full_signature": "private Transactions addTransactions(Transactions transactions, List<Transaction> provided)", "class_method_signature": "ImportFilesService.addTransactions(Transactions transactions, List<Transaction> provided)", "testcase": false, "constructor": false}, {"identifier": "deleteFiles", "parameters": "(List<String> files)", "modifiers": "private", "return": "void", "signature": "void deleteFiles(List<String> files)", "full_signature": "private void deleteFiles(List<String> files)", "class_method_signature": "ImportFilesService.deleteFiles(List<String> files)", "testcase": false, "constructor": false}, {"identifier": "overwrite", "parameters": "(File file)", "modifiers": "private", "return": "void", "signature": "void overwrite(File file)", "full_signature": "private void overwrite(File file)", "class_method_signature": "ImportFilesService.overwrite(File file)", "testcase": false, "constructor": false}, {"identifier": "importFile", "parameters": "(String path)", "modifiers": "", "return": "List<Transaction>", "signature": "List<Transaction> importFile(String path)", "full_signature": " List<Transaction> importFile(String path)", "class_method_signature": "ImportFilesService.importFile(String path)", "testcase": false, "constructor": false}, {"identifier": "initialDirectory", "parameters": "()", "modifiers": "private", "return": "File", "signature": "File initialDirectory()", "full_signature": "private File initialDirectory()", "class_method_signature": "ImportFilesService.initialDirectory()", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/greensopinion/finance/services/ImportFilesService.java"}, "focal_method": {"identifier": "importFiles", "parameters": "(List<String> files, boolean deleteAfterImport)", "modifiers": "public", "return": "void", "body": "public void importFiles(List<String> files, boolean deleteAfterImport) {\n\t\tcheckNotNull(files, \"Must provide files\");\n\n\t\tTransactions transactions = transactionsService.retrieve();\n\n\t\tfor (String path : files) {\n\t\t\tList<Transaction> fileTransactions = importFile(path);\n\t\t\ttransactions = addTransactions(transactions, fileTransactions);\n\t\t}\n\t\ttransactionsService.update(transactions);\n\t\tif (deleteAfterImport) {\n\t\t\tdeleteFiles(files);\n\t\t}\n\t}", "signature": "void importFiles(List<String> files, boolean deleteAfterImport)", "full_signature": "public void importFiles(List<String> files, boolean deleteAfterImport)", "class_method_signature": "ImportFilesService.importFiles(List<String> files, boolean deleteAfterImport)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "retrieve", "importFile", "addTransactions", "update", "deleteFiles"]}, "repository": {"repo_id": 54854741, "url": "https://github.com/greensopinion/greenbeans", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 30, "size": 1684, "license": "licensed"}}