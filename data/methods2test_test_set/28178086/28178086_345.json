{"test_class": {"identifier": "DurbinAlgorithmTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/data/DurbinAlgorithmTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() {\n        ArimaModelBuilder builder = new ArimaModelBuilder();\n        int n = 240, m = 10;\n        for (int i = 0; i < m; ++i) {\n            double[] x = builder.generate(builder.createModel(Polynomial.of(new double[]{1, -.7, .5}), Polynomial.ONE, 1), n);\n            DurbinAlgorithm durbin = new DurbinAlgorithm();\n            //Peaks peaks=new Peaks(new TsData(TsFrequency.Monthly, 1980, 0, x, true), 240, false);\n            assertTrue(durbin.solve(new ReadDataBlock(x), 30));\n        }\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "DurbinAlgorithmTest.test()", "testcase": true, "constructor": false, "invocations": ["generate", "createModel", "of", "assertTrue", "solve"]}, "focal_class": {"identifier": "DurbinAlgorithm", "superclass": "", "interfaces": "", "fields": [{"original_string": "private double[] cxx_;", "modifier": "private", "type": "double[]", "declarator": "cxx_", "var_name": "cxx_"}, {"original_string": "private double sd, aic;", "modifier": "private", "type": "double", "declarator": "sd", "var_name": "sd"}, {"original_string": "private double[] x_;", "modifier": "private", "type": "double[]", "declarator": "x_", "var_name": "x_"}, {"original_string": "private double[] a_;", "modifier": "private", "type": "double[]", "declarator": "a_", "var_name": "a_"}, {"original_string": "private static final double SMALL = 1e-9;", "modifier": "private static final", "type": "double", "declarator": "SMALL = 1e-9", "var_name": "SMALL"}, {"original_string": "private boolean mean_ = true;", "modifier": "private", "type": "boolean", "declarator": "mean_ = true", "var_name": "mean_"}, {"original_string": "private ITaper taper_;", "modifier": "private", "type": "ITaper", "declarator": "taper_", "var_name": "taper_"}], "methods": [{"identifier": "getAutocovariance", "parameters": "(int lag)", "modifiers": "public", "return": "double", "signature": "double getAutocovariance(int lag)", "full_signature": "public double getAutocovariance(int lag)", "class_method_signature": "DurbinAlgorithm.getAutocovariance(int lag)", "testcase": false, "constructor": false}, {"identifier": "getMaxLag", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxLag()", "full_signature": "public int getMaxLag()", "class_method_signature": "DurbinAlgorithm.getMaxLag()", "testcase": false, "constructor": false}, {"identifier": "setTaper", "parameters": "(ITaper taper)", "modifiers": "public", "return": "void", "signature": "void setTaper(ITaper taper)", "full_signature": "public void setTaper(ITaper taper)", "class_method_signature": "DurbinAlgorithm.setTaper(ITaper taper)", "testcase": false, "constructor": false}, {"identifier": "getTaper", "parameters": "()", "modifiers": "public", "return": "ITaper", "signature": "ITaper getTaper()", "full_signature": "public ITaper getTaper()", "class_method_signature": "DurbinAlgorithm.getTaper()", "testcase": false, "constructor": false}, {"identifier": "solve", "parameters": "(IReadDataBlock x, int l)", "modifiers": "public", "return": "boolean", "signature": "boolean solve(IReadDataBlock x, int l)", "full_signature": "public boolean solve(IReadDataBlock x, int l)", "class_method_signature": "DurbinAlgorithm.solve(IReadDataBlock x, int l)", "testcase": false, "constructor": false}, {"identifier": "getCoefficients", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getCoefficients()", "full_signature": "public double[] getCoefficients()", "class_method_signature": "DurbinAlgorithm.getCoefficients()", "testcase": false, "constructor": false}, {"identifier": "getAIC", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getAIC()", "full_signature": "public double getAIC()", "class_method_signature": "DurbinAlgorithm.getAIC()", "testcase": false, "constructor": false}, {"identifier": "getInnovationVariance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getInnovationVariance()", "full_signature": "public double getInnovationVariance()", "class_method_signature": "DurbinAlgorithm.getInnovationVariance()", "testcase": false, "constructor": false}, {"identifier": "isMeanCorrection", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMeanCorrection()", "full_signature": "public boolean isMeanCorrection()", "class_method_signature": "DurbinAlgorithm.isMeanCorrection()", "testcase": false, "constructor": false}, {"identifier": "setMeanCorrection", "parameters": "(boolean mean)", "modifiers": "public", "return": "void", "signature": "void setMeanCorrection(boolean mean)", "full_signature": "public void setMeanCorrection(boolean mean)", "class_method_signature": "DurbinAlgorithm.setMeanCorrection(boolean mean)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(int l)", "modifiers": "private", "return": "boolean", "signature": "boolean calc(int l)", "full_signature": "private boolean calc(int l)", "class_method_signature": "DurbinAlgorithm.calc(int l)", "testcase": false, "constructor": false}, {"identifier": "checkMean", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean checkMean()", "full_signature": "private boolean checkMean()", "class_method_signature": "DurbinAlgorithm.checkMean()", "testcase": false, "constructor": false}, {"identifier": "calcCov", "parameters": "(int l)", "modifiers": "private", "return": "boolean", "signature": "boolean calcCov(int l)", "full_signature": "private boolean calcCov(int l)", "class_method_signature": "DurbinAlgorithm.calcCov(int l)", "testcase": false, "constructor": false}, {"identifier": "iterate", "parameters": "(int l)", "modifiers": "private", "return": "void", "signature": "void iterate(int l)", "full_signature": "private void iterate(int l)", "class_method_signature": "DurbinAlgorithm.iterate(int l)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/data/DurbinAlgorithm.java"}, "focal_method": {"identifier": "solve", "parameters": "(IReadDataBlock x, int l)", "modifiers": "public", "return": "boolean", "body": "public boolean solve(IReadDataBlock x, int l) {\n        x_ = new double[x.getLength()];\n        x.copyTo(x_, 0);\n        return calc(l);\n    }", "signature": "boolean solve(IReadDataBlock x, int l)", "full_signature": "public boolean solve(IReadDataBlock x, int l)", "class_method_signature": "DurbinAlgorithm.solve(IReadDataBlock x, int l)", "testcase": false, "constructor": false, "invocations": ["getLength", "copyTo", "calc"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}