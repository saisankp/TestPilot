{"test_class": {"identifier": "OperationsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Configuration<Person> configuration;", "modifier": "private", "type": "Configuration<Person>", "declarator": "configuration", "var_name": "configuration"}], "file": "UniversalFriends-core/src/test/java/me/ironexception/universalfriends/configuration/OperationsTest.java"}, "test_case": {"identifier": "getByAssociation", "parameters": "()", "modifiers": "@Test @DisplayName(\"Get by association\")", "return": "void", "body": "@Test\n    @DisplayName(\"Get by association\")\n    void getByAssociation() {\n        assertEquals(\"baz\", Operations.getByAssociation(configuration, Association.ENEMY).stream().findAny().get().getName());\n    }", "signature": "void getByAssociation()", "full_signature": "@Test @DisplayName(\"Get by association\") void getByAssociation()", "class_method_signature": "OperationsTest.getByAssociation()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getName", "get", "findAny", "stream", "getByAssociation"]}, "focal_class": {"identifier": "Operations", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getByFriendliness", "parameters": "(Configuration<T> configuration, double value)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> getByFriendliness(Configuration<T> configuration, double value)", "full_signature": "public static Set<T> getByFriendliness(Configuration<T> configuration, double value)", "class_method_signature": "Operations.getByFriendliness(Configuration<T> configuration, double value)", "testcase": false, "constructor": false}, {"identifier": "getByAssociation", "parameters": "(Configuration<T> configuration, Association association)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> getByAssociation(Configuration<T> configuration, Association association)", "full_signature": "public static Set<T> getByAssociation(Configuration<T> configuration, Association association)", "class_method_signature": "Operations.getByAssociation(Configuration<T> configuration, Association association)", "testcase": false, "constructor": false}, {"identifier": "getInFriendlinessRange", "parameters": "(Configuration<T> configuration, double rangeLower, double rangeUpper)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> getInFriendlinessRange(Configuration<T> configuration, double rangeLower, double rangeUpper)", "full_signature": "public static Set<T> getInFriendlinessRange(Configuration<T> configuration, double rangeLower, double rangeUpper)", "class_method_signature": "Operations.getInFriendlinessRange(Configuration<T> configuration, double rangeLower, double rangeUpper)", "testcase": false, "constructor": false}, {"identifier": "filterMatchingPersons", "parameters": "(Configuration<T> configuration, Predicate<T> predicate)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> filterMatchingPersons(Configuration<T> configuration, Predicate<T> predicate)", "full_signature": "public static Set<T> filterMatchingPersons(Configuration<T> configuration, Predicate<T> predicate)", "class_method_signature": "Operations.filterMatchingPersons(Configuration<T> configuration, Predicate<T> predicate)", "testcase": false, "constructor": false}, {"identifier": "introduceNewSafe", "parameters": "(Configuration<T> configuration, T person)", "modifiers": "public static", "return": "Configuration<T>", "signature": "Configuration<T> introduceNewSafe(Configuration<T> configuration, T person)", "full_signature": "public static Configuration<T> introduceNewSafe(Configuration<T> configuration, T person)", "class_method_signature": "Operations.introduceNewSafe(Configuration<T> configuration, T person)", "testcase": false, "constructor": false}, {"identifier": "halveFriendlinessValues", "parameters": "(Configuration<T> configuration)", "modifiers": "public static", "return": "Configuration<T>", "signature": "Configuration<T> halveFriendlinessValues(Configuration<T> configuration)", "full_signature": "public static Configuration<T> halveFriendlinessValues(Configuration<T> configuration)", "class_method_signature": "Operations.halveFriendlinessValues(Configuration<T> configuration)", "testcase": false, "constructor": false}, {"identifier": "multiplyFriendlinessValues", "parameters": "(Configuration<T> configuration, double multiplier)", "modifiers": "public static", "return": "Configuration<T>", "signature": "Configuration<T> multiplyFriendlinessValues(Configuration<T> configuration, double multiplier)", "full_signature": "public static Configuration<T> multiplyFriendlinessValues(Configuration<T> configuration, double multiplier)", "class_method_signature": "Operations.multiplyFriendlinessValues(Configuration<T> configuration, double multiplier)", "testcase": false, "constructor": false}, {"identifier": "multiplyFriendlinessValuesInRange", "parameters": "(Configuration<T> configuration, double multiplier, double rangeLower, double rangeUpper)", "modifiers": "public static", "return": "Configuration<T>", "signature": "Configuration<T> multiplyFriendlinessValuesInRange(Configuration<T> configuration, double multiplier, double rangeLower, double rangeUpper)", "full_signature": "public static Configuration<T> multiplyFriendlinessValuesInRange(Configuration<T> configuration, double multiplier, double rangeLower, double rangeUpper)", "class_method_signature": "Operations.multiplyFriendlinessValuesInRange(Configuration<T> configuration, double multiplier, double rangeLower, double rangeUpper)", "testcase": false, "constructor": false}, {"identifier": "consume", "parameters": "(Configuration<T> configuration, Consumer<T> consumer)", "modifiers": "private static", "return": "void", "signature": "void consume(Configuration<T> configuration, Consumer<T> consumer)", "full_signature": "private static void consume(Configuration<T> configuration, Consumer<T> consumer)", "class_method_signature": "Operations.consume(Configuration<T> configuration, Consumer<T> consumer)", "testcase": false, "constructor": false}, {"identifier": "consumeWithFilter", "parameters": "(Configuration<T> configuration, Predicate<T> predicate, Consumer<T> consumer)", "modifiers": "private static", "return": "void", "signature": "void consumeWithFilter(Configuration<T> configuration, Predicate<T> predicate, Consumer<T> consumer)", "full_signature": "private static void consumeWithFilter(Configuration<T> configuration, Predicate<T> predicate, Consumer<T> consumer)", "class_method_signature": "Operations.consumeWithFilter(Configuration<T> configuration, Predicate<T> predicate, Consumer<T> consumer)", "testcase": false, "constructor": false}], "file": "UniversalFriends-core/src/main/java/me/ironexception/universalfriends/configuration/Operations.java"}, "focal_method": {"identifier": "getByAssociation", "parameters": "(Configuration<T> configuration, Association association)", "modifiers": "public static", "return": "Set<T>", "body": "public static <T extends IPerson> Set<T> getByAssociation(Configuration<T> configuration, Association association) {\n        double value = association.getValue();\n        return getByFriendliness(configuration, value);\n    }", "signature": "Set<T> getByAssociation(Configuration<T> configuration, Association association)", "full_signature": "public static Set<T> getByAssociation(Configuration<T> configuration, Association association)", "class_method_signature": "Operations.getByAssociation(Configuration<T> configuration, Association association)", "testcase": false, "constructor": false, "invocations": ["getValue", "getByFriendliness"]}, "repository": {"repo_id": 229560773, "url": "https://github.com/minecraft-initiative/UniversalFriends", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 10, "size": 177, "license": "licensed"}}