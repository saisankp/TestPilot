{"test_class": {"identifier": "ReflectionUtilTest", "superclass": "extends CachedLogger", "interfaces": "", "fields": [], "file": "concurrency/src/test/java/com/baidu/unbiz/common/ReflectionUtilTest.java"}, "test_case": {"identifier": "getAllFieldsOfClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAllFieldsOfClass() {\n        assertNull(ReflectionUtil.getAllFieldsOfClass(null));\n        assertNull(ReflectionUtil.getAllFieldsOfClass(Object.class));\n\n        assertEquals(0, ReflectionUtil.getAllFieldsOfClass(List.class).length);\n        Field[] fields = ReflectionUtil.getAllFieldsOfClass(String.class);\n        assertTrue(fields.length > 0);\n\n        Field[] instancefields = ReflectionUtil.getAllInstanceFields(String.class);\n        assertTrue(instancefields.length > 0);\n\n        assertTrue(fields.length - instancefields.length > 0);\n\n    }", "signature": "void getAllFieldsOfClass()", "full_signature": "@Test public void getAllFieldsOfClass()", "class_method_signature": "ReflectionUtilTest.getAllFieldsOfClass()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getAllFieldsOfClass", "assertNull", "getAllFieldsOfClass", "assertEquals", "getAllFieldsOfClass", "getAllFieldsOfClass", "assertTrue", "getAllInstanceFields", "assertTrue", "assertTrue"]}, "focal_class": {"identifier": "ReflectionUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Method IS_SYNTHETIC;", "modifier": "private static final", "type": "Method", "declarator": "IS_SYNTHETIC", "var_name": "IS_SYNTHETIC"}], "methods": [{"identifier": "getAllMethodsOfClass", "parameters": "(final Class<?> clazz)", "modifiers": "public static", "return": "Method[]", "signature": "Method[] getAllMethodsOfClass(final Class<?> clazz)", "full_signature": "public static Method[] getAllMethodsOfClass(final Class<?> clazz)", "class_method_signature": "ReflectionUtil.getAllMethodsOfClass(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getAllMethodsOfClass", "parameters": "(Class<?> clazz, boolean accessible)", "modifiers": "public static", "return": "Method[]", "signature": "Method[] getAllMethodsOfClass(Class<?> clazz, boolean accessible)", "full_signature": "public static Method[] getAllMethodsOfClass(Class<?> clazz, boolean accessible)", "class_method_signature": "ReflectionUtil.getAllMethodsOfClass(Class<?> clazz, boolean accessible)", "testcase": false, "constructor": false}, {"identifier": "getAllInstanceMethods", "parameters": "(final Class<?> clazz)", "modifiers": "public static", "return": "Method[]", "signature": "Method[] getAllInstanceMethods(final Class<?> clazz)", "full_signature": "public static Method[] getAllInstanceMethods(final Class<?> clazz)", "class_method_signature": "ReflectionUtil.getAllInstanceMethods(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getAllInstanceMethods", "parameters": "(Class<?> clazz, boolean accessible)", "modifiers": "public static", "return": "Method[]", "signature": "Method[] getAllInstanceMethods(Class<?> clazz, boolean accessible)", "full_signature": "public static Method[] getAllInstanceMethods(Class<?> clazz, boolean accessible)", "class_method_signature": "ReflectionUtil.getAllInstanceMethods(Class<?> clazz, boolean accessible)", "testcase": false, "constructor": false}, {"identifier": "findAllMethodAnnotation", "parameters": "(Class<T> clazz, Class<A> annotationType)", "modifiers": "public static", "return": "List<A>", "signature": "List<A> findAllMethodAnnotation(Class<T> clazz, Class<A> annotationType)", "full_signature": "public static List<A> findAllMethodAnnotation(Class<T> clazz, Class<A> annotationType)", "class_method_signature": "ReflectionUtil.findAllMethodAnnotation(Class<T> clazz, Class<A> annotationType)", "testcase": false, "constructor": false}, {"identifier": "getAnnotationMethods", "parameters": "(Class<T> clazz, Class<A> annotationType)", "modifiers": "public static", "return": "List<Method>", "signature": "List<Method> getAnnotationMethods(Class<T> clazz, Class<A> annotationType)", "full_signature": "public static List<Method> getAnnotationMethods(Class<T> clazz, Class<A> annotationType)", "class_method_signature": "ReflectionUtil.getAnnotationMethods(Class<T> clazz, Class<A> annotationType)", "testcase": false, "constructor": false}, {"identifier": "invokeMethod", "parameters": "(Method method, Object target, Object...args)", "modifiers": "public static", "return": "Object", "signature": "Object invokeMethod(Method method, Object target, Object...args)", "full_signature": "public static Object invokeMethod(Method method, Object target, Object...args)", "class_method_signature": "ReflectionUtil.invokeMethod(Method method, Object target, Object...args)", "testcase": false, "constructor": false}, {"identifier": "invokeMethod", "parameters": "(Object object, String methodName, Object[] args, Class<?>...parameterTypes)", "modifiers": "public static", "return": "Object", "signature": "Object invokeMethod(Object object, String methodName, Object[] args, Class<?>...parameterTypes)", "full_signature": "public static Object invokeMethod(Object object, String methodName, Object[] args, Class<?>...parameterTypes)", "class_method_signature": "ReflectionUtil.invokeMethod(Object object, String methodName, Object[] args, Class<?>...parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "invokeStaticMethod", "parameters": "(Class<?> clazz, String methodName, Object[] args, Class<?>...parameterTypes)", "modifiers": "public static", "return": "Object", "signature": "Object invokeStaticMethod(Class<?> clazz, String methodName, Object[] args, Class<?>...parameterTypes)", "full_signature": "public static Object invokeStaticMethod(Class<?> clazz, String methodName, Object[] args, Class<?>...parameterTypes)", "class_method_signature": "ReflectionUtil.invokeStaticMethod(Class<?> clazz, String methodName, Object[] args, Class<?>...parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(Class<?> clazz, String methodName, Class<?>...parameterTypes)", "modifiers": "public static", "return": "Method", "signature": "Method getMethod(Class<?> clazz, String methodName, Class<?>...parameterTypes)", "full_signature": "public static Method getMethod(Class<?> clazz, String methodName, Class<?>...parameterTypes)", "class_method_signature": "ReflectionUtil.getMethod(Class<?> clazz, String methodName, Class<?>...parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(Object object, String methodName, Class<?>...parameterTypes)", "modifiers": "public static", "return": "Method", "signature": "Method getMethod(Object object, String methodName, Class<?>...parameterTypes)", "full_signature": "public static Method getMethod(Object object, String methodName, Class<?>...parameterTypes)", "class_method_signature": "ReflectionUtil.getMethod(Object object, String methodName, Class<?>...parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "getAccessibleMethods", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Method[]", "signature": "Method[] getAccessibleMethods(Class<?> clazz)", "full_signature": "public static Method[] getAccessibleMethods(Class<?> clazz)", "class_method_signature": "ReflectionUtil.getAccessibleMethods(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getAccessibleMethods", "parameters": "(Class<?> clazz, Class<?> limit)", "modifiers": "public static", "return": "Method[]", "signature": "Method[] getAccessibleMethods(Class<?> clazz, Class<?> limit)", "full_signature": "public static Method[] getAccessibleMethods(Class<?> clazz, Class<?> limit)", "class_method_signature": "ReflectionUtil.getAccessibleMethods(Class<?> clazz, Class<?> limit)", "testcase": false, "constructor": false}, {"identifier": "addMethodIfNotExist", "parameters": "(List<Method> allMethods, Method newMethod)", "modifiers": "private static", "return": "void", "signature": "void addMethodIfNotExist(List<Method> allMethods, Method newMethod)", "full_signature": "private static void addMethodIfNotExist(List<Method> allMethods, Method newMethod)", "class_method_signature": "ReflectionUtil.addMethodIfNotExist(List<Method> allMethods, Method newMethod)", "testcase": false, "constructor": false}, {"identifier": "hasAnnotation", "parameters": "(Method method, Class<A> annotationType)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasAnnotation(Method method, Class<A> annotationType)", "full_signature": "public static boolean hasAnnotation(Method method, Class<A> annotationType)", "class_method_signature": "ReflectionUtil.hasAnnotation(Method method, Class<A> annotationType)", "testcase": false, "constructor": false}, {"identifier": "getAllFieldsOfClass", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Field[]", "signature": "Field[] getAllFieldsOfClass(Class<?> clazz)", "full_signature": "public static Field[] getAllFieldsOfClass(Class<?> clazz)", "class_method_signature": "ReflectionUtil.getAllFieldsOfClass(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getAllInstanceFields", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Field[]", "signature": "Field[] getAllInstanceFields(Class<?> clazz)", "full_signature": "public static Field[] getAllInstanceFields(Class<?> clazz)", "class_method_signature": "ReflectionUtil.getAllInstanceFields(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "_getAllInstanceFields", "parameters": "(Class<?> clazz)", "modifiers": "static", "return": "Field[]", "signature": "Field[] _getAllInstanceFields(Class<?> clazz)", "full_signature": "static Field[] _getAllInstanceFields(Class<?> clazz)", "class_method_signature": "ReflectionUtil._getAllInstanceFields(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "_getAllFieldsOfClass", "parameters": "(Class<?> clazz)", "modifiers": "static", "return": "Field[]", "signature": "Field[] _getAllFieldsOfClass(Class<?> clazz)", "full_signature": "static Field[] _getAllFieldsOfClass(Class<?> clazz)", "class_method_signature": "ReflectionUtil._getAllFieldsOfClass(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getAllFieldsOfClass", "parameters": "(Class<?> clazz, boolean accessible)", "modifiers": "public static", "return": "Field[]", "signature": "Field[] getAllFieldsOfClass(Class<?> clazz, boolean accessible)", "full_signature": "public static Field[] getAllFieldsOfClass(Class<?> clazz, boolean accessible)", "class_method_signature": "ReflectionUtil.getAllFieldsOfClass(Class<?> clazz, boolean accessible)", "testcase": false, "constructor": false}, {"identifier": "getAllFieldsOfClass", "parameters": "(Object object)", "modifiers": "public static", "return": "Field[]", "signature": "Field[] getAllFieldsOfClass(Object object)", "full_signature": "public static Field[] getAllFieldsOfClass(Object object)", "class_method_signature": "ReflectionUtil.getAllFieldsOfClass(Object object)", "testcase": false, "constructor": false}, {"identifier": "getAllFieldsOfClass", "parameters": "(Object object, boolean accessible)", "modifiers": "public static", "return": "Field[]", "signature": "Field[] getAllFieldsOfClass(Object object, boolean accessible)", "full_signature": "public static Field[] getAllFieldsOfClass(Object object, boolean accessible)", "class_method_signature": "ReflectionUtil.getAllFieldsOfClass(Object object, boolean accessible)", "testcase": false, "constructor": false}, {"identifier": "getAllInstanceFields", "parameters": "(Class<?> clazz, boolean accessible)", "modifiers": "public static", "return": "Field[]", "signature": "Field[] getAllInstanceFields(Class<?> clazz, boolean accessible)", "full_signature": "public static Field[] getAllInstanceFields(Class<?> clazz, boolean accessible)", "class_method_signature": "ReflectionUtil.getAllInstanceFields(Class<?> clazz, boolean accessible)", "testcase": false, "constructor": false}, {"identifier": "getAllInstanceFields", "parameters": "(Object object)", "modifiers": "public static", "return": "Field[]", "signature": "Field[] getAllInstanceFields(Object object)", "full_signature": "public static Field[] getAllInstanceFields(Object object)", "class_method_signature": "ReflectionUtil.getAllInstanceFields(Object object)", "testcase": false, "constructor": false}, {"identifier": "getAllInstanceFields", "parameters": "(Object object, boolean accessible)", "modifiers": "public static", "return": "Field[]", "signature": "Field[] getAllInstanceFields(Object object, boolean accessible)", "full_signature": "public static Field[] getAllInstanceFields(Object object, boolean accessible)", "class_method_signature": "ReflectionUtil.getAllInstanceFields(Object object, boolean accessible)", "testcase": false, "constructor": false}, {"identifier": "getInstanceFields", "parameters": "(Class<?> clazz, String[] includes)", "modifiers": "public static", "return": "Field[]", "signature": "Field[] getInstanceFields(Class<?> clazz, String[] includes)", "full_signature": "public static Field[] getInstanceFields(Class<?> clazz, String[] includes)", "class_method_signature": "ReflectionUtil.getInstanceFields(Class<?> clazz, String[] includes)", "testcase": false, "constructor": false}, {"identifier": "_getInstanceFields", "parameters": "(Class<?> clazz, String[] includes)", "modifiers": "static", "return": "Field[]", "signature": "Field[] _getInstanceFields(Class<?> clazz, String[] includes)", "full_signature": "static Field[] _getInstanceFields(Class<?> clazz, String[] includes)", "class_method_signature": "ReflectionUtil._getInstanceFields(Class<?> clazz, String[] includes)", "testcase": false, "constructor": false}, {"identifier": "getAnnotationFields", "parameters": "(Class<?> clazz, Class<? extends Annotation> annotationClass)", "modifiers": "public static", "return": "Field[]", "signature": "Field[] getAnnotationFields(Class<?> clazz, Class<? extends Annotation> annotationClass)", "full_signature": "public static Field[] getAnnotationFields(Class<?> clazz, Class<? extends Annotation> annotationClass)", "class_method_signature": "ReflectionUtil.getAnnotationFields(Class<?> clazz, Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(Object object, String fieldName)", "modifiers": "public static", "return": "Field", "signature": "Field getField(Object object, String fieldName)", "full_signature": "public static Field getField(Object object, String fieldName)", "class_method_signature": "ReflectionUtil.getField(Object object, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(Class<?> clazz, String fieldName)", "modifiers": "public static", "return": "Field", "signature": "Field getField(Class<?> clazz, String fieldName)", "full_signature": "public static Field getField(Class<?> clazz, String fieldName)", "class_method_signature": "ReflectionUtil.getField(Class<?> clazz, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "_getField", "parameters": "(Class<?> clazz, String fieldName)", "modifiers": "static", "return": "Field", "signature": "Field _getField(Class<?> clazz, String fieldName)", "full_signature": "static Field _getField(Class<?> clazz, String fieldName)", "class_method_signature": "ReflectionUtil._getField(Class<?> clazz, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getFieldOfClass", "parameters": "(Object object, String fieldName)", "modifiers": "@Deprecated public static", "return": "Field", "signature": "Field getFieldOfClass(Object object, String fieldName)", "full_signature": "@Deprecated public static Field getFieldOfClass(Object object, String fieldName)", "class_method_signature": "ReflectionUtil.getFieldOfClass(Object object, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(Object object, String fieldName, boolean accessible)", "modifiers": "public static", "return": "Field", "signature": "Field getField(Object object, String fieldName, boolean accessible)", "full_signature": "public static Field getField(Object object, String fieldName, boolean accessible)", "class_method_signature": "ReflectionUtil.getField(Object object, String fieldName, boolean accessible)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(Class<?> clazz, String fieldName, boolean accessible)", "modifiers": "public static", "return": "Field", "signature": "Field getField(Class<?> clazz, String fieldName, boolean accessible)", "full_signature": "public static Field getField(Class<?> clazz, String fieldName, boolean accessible)", "class_method_signature": "ReflectionUtil.getField(Class<?> clazz, String fieldName, boolean accessible)", "testcase": false, "constructor": false}, {"identifier": "getFieldOfClass", "parameters": "(Class<?> clazz, String fieldName)", "modifiers": "@Deprecated public static", "return": "Field", "signature": "Field getFieldOfClass(Class<?> clazz, String fieldName)", "full_signature": "@Deprecated public static Field getFieldOfClass(Class<?> clazz, String fieldName)", "class_method_signature": "ReflectionUtil.getFieldOfClass(Class<?> clazz, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getFieldOfClass", "parameters": "(Object object, String fieldName, boolean accessible)", "modifiers": "@Deprecated public static", "return": "Field", "signature": "Field getFieldOfClass(Object object, String fieldName, boolean accessible)", "full_signature": "@Deprecated public static Field getFieldOfClass(Object object, String fieldName, boolean accessible)", "class_method_signature": "ReflectionUtil.getFieldOfClass(Object object, String fieldName, boolean accessible)", "testcase": false, "constructor": false}, {"identifier": "_getFieldOfClass", "parameters": "(Class<?> clazz, String fieldName)", "modifiers": "@Deprecated static", "return": "Field", "signature": "Field _getFieldOfClass(Class<?> clazz, String fieldName)", "full_signature": "@Deprecated static Field _getFieldOfClass(Class<?> clazz, String fieldName)", "class_method_signature": "ReflectionUtil._getFieldOfClass(Class<?> clazz, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getAccessibleFields", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Field[]", "signature": "Field[] getAccessibleFields(Class<?> clazz)", "full_signature": "public static Field[] getAccessibleFields(Class<?> clazz)", "class_method_signature": "ReflectionUtil.getAccessibleFields(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getAccessibleFields", "parameters": "(Class<?> clazz, Class<?> limit)", "modifiers": "public static", "return": "Field[]", "signature": "Field[] getAccessibleFields(Class<?> clazz, Class<?> limit)", "full_signature": "public static Field[] getAccessibleFields(Class<?> clazz, Class<?> limit)", "class_method_signature": "ReflectionUtil.getAccessibleFields(Class<?> clazz, Class<?> limit)", "testcase": false, "constructor": false}, {"identifier": "addFieldIfNotExist", "parameters": "(List<Field> allFields, Field newField)", "modifiers": "private static", "return": "void", "signature": "void addFieldIfNotExist(List<Field> allFields, Field newField)", "full_signature": "private static void addFieldIfNotExist(List<Field> allFields, Field newField)", "class_method_signature": "ReflectionUtil.addFieldIfNotExist(List<Field> allFields, Field newField)", "testcase": false, "constructor": false}, {"identifier": "readField", "parameters": "(Field field, Object target)", "modifiers": "public static", "return": "T", "signature": "T readField(Field field, Object target)", "full_signature": "public static T readField(Field field, Object target)", "class_method_signature": "ReflectionUtil.readField(Field field, Object target)", "testcase": false, "constructor": false}, {"identifier": "_readField", "parameters": "(Field field, Object target)", "modifiers": "static", "return": "Object", "signature": "Object _readField(Field field, Object target)", "full_signature": "static Object _readField(Field field, Object target)", "class_method_signature": "ReflectionUtil._readField(Field field, Object target)", "testcase": false, "constructor": false}, {"identifier": "readField", "parameters": "(String fieldName, Object target)", "modifiers": "public static", "return": "Object", "signature": "Object readField(String fieldName, Object target)", "full_signature": "public static Object readField(String fieldName, Object target)", "class_method_signature": "ReflectionUtil.readField(String fieldName, Object target)", "testcase": false, "constructor": false}, {"identifier": "writeField", "parameters": "(Field field, Object target, Object value)", "modifiers": "public static", "return": "void", "signature": "void writeField(Field field, Object target, Object value)", "full_signature": "public static void writeField(Field field, Object target, Object value)", "class_method_signature": "ReflectionUtil.writeField(Field field, Object target, Object value)", "testcase": false, "constructor": false}, {"identifier": "_writeField", "parameters": "(Field field, Object target, Object value)", "modifiers": "static", "return": "void", "signature": "void _writeField(Field field, Object target, Object value)", "full_signature": "static void _writeField(Field field, Object target, Object value)", "class_method_signature": "ReflectionUtil._writeField(Field field, Object target, Object value)", "testcase": false, "constructor": false}, {"identifier": "writeField", "parameters": "(Object target, String fieldName, Object value)", "modifiers": "public static", "return": "void", "signature": "void writeField(Object target, String fieldName, Object value)", "full_signature": "public static void writeField(Object target, String fieldName, Object value)", "class_method_signature": "ReflectionUtil.writeField(Object target, String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "readStaticField", "parameters": "(Field field)", "modifiers": "public static", "return": "Object", "signature": "Object readStaticField(Field field)", "full_signature": "public static Object readStaticField(Field field)", "class_method_signature": "ReflectionUtil.readStaticField(Field field)", "testcase": false, "constructor": false}, {"identifier": "readStaticField", "parameters": "(Class<?> clazz, String fieldName)", "modifiers": "public static", "return": "Object", "signature": "Object readStaticField(Class<?> clazz, String fieldName)", "full_signature": "public static Object readStaticField(Class<?> clazz, String fieldName)", "class_method_signature": "ReflectionUtil.readStaticField(Class<?> clazz, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "writeStaticField", "parameters": "(Field field, Object value)", "modifiers": "public static", "return": "void", "signature": "void writeStaticField(Field field, Object value)", "full_signature": "public static void writeStaticField(Field field, Object value)", "class_method_signature": "ReflectionUtil.writeStaticField(Field field, Object value)", "testcase": false, "constructor": false}, {"identifier": "writeStaticField", "parameters": "(Class<?> clazz, String fieldName, Object value)", "modifiers": "public static", "return": "void", "signature": "void writeStaticField(Class<?> clazz, String fieldName, Object value)", "full_signature": "public static void writeStaticField(Class<?> clazz, String fieldName, Object value)", "class_method_signature": "ReflectionUtil.writeStaticField(Class<?> clazz, String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "notWriter", "parameters": "(Field field)", "modifiers": "public static", "return": "boolean", "signature": "boolean notWriter(Field field)", "full_signature": "public static boolean notWriter(Field field)", "class_method_signature": "ReflectionUtil.notWriter(Field field)", "testcase": false, "constructor": false}, {"identifier": "isFinal", "parameters": "(Field field)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFinal(Field field)", "full_signature": "public static boolean isFinal(Field field)", "class_method_signature": "ReflectionUtil.isFinal(Field field)", "testcase": false, "constructor": false}, {"identifier": "hasSuperClass", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasSuperClass(Class<?> clazz)", "full_signature": "public static boolean hasSuperClass(Class<?> clazz)", "class_method_signature": "ReflectionUtil.hasSuperClass(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "hasAnnotation", "parameters": "(Field field, Class<A> annotationType)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasAnnotation(Field field, Class<A> annotationType)", "full_signature": "public static boolean hasAnnotation(Field field, Class<A> annotationType)", "class_method_signature": "ReflectionUtil.hasAnnotation(Field field, Class<A> annotationType)", "testcase": false, "constructor": false}, {"identifier": "getComponentType", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getComponentType(Class<?> clazz)", "full_signature": "public static Class<?> getComponentType(Class<?> clazz)", "class_method_signature": "ReflectionUtil.getComponentType(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getComponentType", "parameters": "(Class<?> clazz, int index)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getComponentType(Class<?> clazz, int index)", "full_signature": "public static Class<?> getComponentType(Class<?> clazz, int index)", "class_method_signature": "ReflectionUtil.getComponentType(Class<?> clazz, int index)", "testcase": false, "constructor": false}, {"identifier": "getComponentTypes", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] getComponentTypes(Class<?> clazz)", "full_signature": "public static Class<?>[] getComponentTypes(Class<?> clazz)", "class_method_signature": "ReflectionUtil.getComponentTypes(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getComponentTypesRecursion", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] getComponentTypesRecursion(Class<?> clazz)", "full_signature": "public static Class<?>[] getComponentTypesRecursion(Class<?> clazz)", "class_method_signature": "ReflectionUtil.getComponentTypesRecursion(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getComponentTypeRecursion", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getComponentTypeRecursion(Class<?> clazz)", "full_signature": "public static Class<?> getComponentTypeRecursion(Class<?> clazz)", "class_method_signature": "ReflectionUtil.getComponentTypeRecursion(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getComponentTypeRecursion", "parameters": "(Class<?> clazz, int index)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getComponentTypeRecursion(Class<?> clazz, int index)", "full_signature": "public static Class<?> getComponentTypeRecursion(Class<?> clazz, int index)", "class_method_signature": "ReflectionUtil.getComponentTypeRecursion(Class<?> clazz, int index)", "testcase": false, "constructor": false}, {"identifier": "getComponentType", "parameters": "(Type type)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getComponentType(Type type)", "full_signature": "public static Class<?> getComponentType(Type type)", "class_method_signature": "ReflectionUtil.getComponentType(Type type)", "testcase": false, "constructor": false}, {"identifier": "getComponentType", "parameters": "(Type type, Class<?> implClass)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getComponentType(Type type, Class<?> implClass)", "full_signature": "public static Class<?> getComponentType(Type type, Class<?> implClass)", "class_method_signature": "ReflectionUtil.getComponentType(Type type, Class<?> implClass)", "testcase": false, "constructor": false}, {"identifier": "getComponentTypes", "parameters": "(Type type)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] getComponentTypes(Type type)", "full_signature": "public static Class<?>[] getComponentTypes(Type type)", "class_method_signature": "ReflectionUtil.getComponentTypes(Type type)", "testcase": false, "constructor": false}, {"identifier": "getComponentTypes", "parameters": "(Type type, Class<?> implClass)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] getComponentTypes(Type type, Class<?> implClass)", "full_signature": "public static Class<?>[] getComponentTypes(Type type, Class<?> implClass)", "class_method_signature": "ReflectionUtil.getComponentTypes(Type type, Class<?> implClass)", "testcase": false, "constructor": false}, {"identifier": "getGenericSuperTypes", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] getGenericSuperTypes(Class<?> type)", "full_signature": "public static Class<?>[] getGenericSuperTypes(Class<?> type)", "class_method_signature": "ReflectionUtil.getGenericSuperTypes(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getGenericSuperType", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getGenericSuperType(Class<?> type)", "full_signature": "public static Class<?> getGenericSuperType(Class<?> type)", "class_method_signature": "ReflectionUtil.getGenericSuperType(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getRawType", "parameters": "(Type type)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getRawType(Type type)", "full_signature": "public static Class<?> getRawType(Type type)", "class_method_signature": "ReflectionUtil.getRawType(Type type)", "testcase": false, "constructor": false}, {"identifier": "getRawType", "parameters": "(Type type, Class<?> implClass)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getRawType(Type type, Class<?> implClass)", "full_signature": "public static Class<?> getRawType(Type type, Class<?> implClass)", "class_method_signature": "ReflectionUtil.getRawType(Type type, Class<?> implClass)", "testcase": false, "constructor": false}, {"identifier": "resolveVariable", "parameters": "(TypeVariable<?> variable, final Class<?> implClass)", "modifiers": "public static", "return": "Type", "signature": "Type resolveVariable(TypeVariable<?> variable, final Class<?> implClass)", "full_signature": "public static Type resolveVariable(TypeVariable<?> variable, final Class<?> implClass)", "class_method_signature": "ReflectionUtil.resolveVariable(TypeVariable<?> variable, final Class<?> implClass)", "testcase": false, "constructor": false}, {"identifier": "isAccessible", "parameters": "(Member m)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAccessible(Member m)", "full_signature": "public static boolean isAccessible(Member m)", "class_method_signature": "ReflectionUtil.isAccessible(Member m)", "testcase": false, "constructor": false}, {"identifier": "isSynthetic", "parameters": "(Member m)", "modifiers": "static", "return": "boolean", "signature": "boolean isSynthetic(Member m)", "full_signature": "static boolean isSynthetic(Member m)", "class_method_signature": "ReflectionUtil.isSynthetic(Member m)", "testcase": false, "constructor": false}, {"identifier": "isPublic", "parameters": "(Member m)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPublic(Member m)", "full_signature": "public static boolean isPublic(Member m)", "class_method_signature": "ReflectionUtil.isPublic(Member m)", "testcase": false, "constructor": false}, {"identifier": "forceAccess", "parameters": "(AccessibleObject object)", "modifiers": "public static", "return": "void", "signature": "void forceAccess(AccessibleObject object)", "full_signature": "public static void forceAccess(AccessibleObject object)", "class_method_signature": "ReflectionUtil.forceAccess(AccessibleObject object)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/ReflectionUtil.java"}, "focal_method": {"identifier": "getAllFieldsOfClass", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Field[]", "body": "public static Field[] getAllFieldsOfClass(Class<?> clazz) {\n        if (clazz == null) {\n            return null;\n        }\n\n        return _getAllFieldsOfClass(clazz);\n    }", "signature": "Field[] getAllFieldsOfClass(Class<?> clazz)", "full_signature": "public static Field[] getAllFieldsOfClass(Class<?> clazz)", "class_method_signature": "ReflectionUtil.getAllFieldsOfClass(Class<?> clazz)", "testcase": false, "constructor": false, "invocations": ["_getAllFieldsOfClass"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}