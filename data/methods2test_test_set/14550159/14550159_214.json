{"test_class": {"identifier": "JsonUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/json/JsonUtilsTest.java"}, "test_case": {"identifier": "createsJsonString", "parameters": "(String sourceString, String expectedJsonString)", "modifiers": "@UseDataProvider(\"createJsonStringData\") @Test public", "return": "void", "body": "@UseDataProvider(\"createJsonStringData\")\n    @Test\n    public void createsJsonString(String sourceString, String expectedJsonString) {\n        assertEquals(expectedJsonString, JsonUtils.getJsonString(sourceString));\n    }", "signature": "void createsJsonString(String sourceString, String expectedJsonString)", "full_signature": "@UseDataProvider(\"createJsonStringData\") @Test public void createsJsonString(String sourceString, String expectedJsonString)", "class_method_signature": "JsonUtilsTest.createsJsonString(String sourceString, String expectedJsonString)", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getJsonString"]}, "focal_class": {"identifier": "JsonUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<String, Types> KNOWN_TYPES = new HashMap<>();", "modifier": "private static final", "type": "Map<String, Types>", "declarator": "KNOWN_TYPES = new HashMap<>()", "var_name": "KNOWN_TYPES"}], "methods": [{"identifier": "getJsonString", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String getJsonString(String string)", "full_signature": "public static String getJsonString(String string)", "class_method_signature": "JsonUtils.getJsonString(String string)", "testcase": false, "constructor": false}, {"identifier": "isKnownType", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isKnownType(Class<?> clazz)", "full_signature": "public static boolean isKnownType(Class<?> clazz)", "class_method_signature": "JsonUtils.isKnownType(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(Object o)", "modifiers": "public static", "return": "Types", "signature": "Types getType(Object o)", "full_signature": "public static Types getType(Object o)", "class_method_signature": "JsonUtils.getType(Object o)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Types", "signature": "Types getType(Class<?> clazz)", "full_signature": "public static Types getType(Class<?> clazz)", "class_method_signature": "JsonUtils.getType(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getTransientFields", "parameters": "(Class<?> aClass)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getTransientFields(Class<?> aClass)", "full_signature": "public static Set<String> getTransientFields(Class<?> aClass)", "class_method_signature": "JsonUtils.getTransientFields(Class<?> aClass)", "testcase": false, "constructor": false}, {"identifier": "createProxy", "parameters": "(Class<T> anInterface)", "modifiers": "@SuppressWarnings({\"unchecked\"}) public static", "return": "T", "signature": "T createProxy(Class<T> anInterface)", "full_signature": "@SuppressWarnings({\"unchecked\"}) public static T createProxy(Class<T> anInterface)", "class_method_signature": "JsonUtils.createProxy(Class<T> anInterface)", "testcase": false, "constructor": false}, {"identifier": "getFieldName", "parameters": "(Method method)", "modifiers": "static", "return": "String", "signature": "String getFieldName(Method method)", "full_signature": "static String getFieldName(Method method)", "class_method_signature": "JsonUtils.getFieldName(Method method)", "testcase": false, "constructor": false}, {"identifier": "JsonUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " JsonUtils()", "full_signature": "private  JsonUtils()", "class_method_signature": "JsonUtils.JsonUtils()", "testcase": false, "constructor": true}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/json/JsonUtils.java"}, "focal_method": {"identifier": "getJsonString", "parameters": "(String string)", "modifiers": "public static", "return": "String", "body": "public static String getJsonString(String string) {\n        if (string == null || string.length() == 0) {\n            return \"\\\"\\\"\";\n        }\n        StringBuilder jsonString = new StringBuilder();\n        jsonString.append(\"\\\"\");\n        char[] charArray = string.toCharArray();\n        for (char c : charArray) {\n            switch (c) {\n                case '\\n':\n                    jsonString.append(\"\\\\n\");\n                    break;\n                case '\\r':\n                    jsonString.append(\"\\\\r\");\n                    break;\n                case '\\t':\n                    jsonString.append(\"\\\\t\");\n                    break;\n                case '\\b':\n                    jsonString.append(\"\\\\b\");\n                    break;\n                case '\\f':\n                    jsonString.append(\"\\\\f\");\n                    break;\n                case '\\\\':\n                    jsonString.append(\"\\\\\\\\\");\n                    break;\n                case '\"':\n                    jsonString.append(\"\\\\\\\"\");\n                    break;\n                default:\n                    if (c < '\\u0010') {\n                        jsonString.append(\"\\\\u000\").append(Integer.toHexString(c));\n                    } else if ((c < '\\u0020' && c > '\\u0009') || (c >= '\\u0080' && c < '\\u00a0')) {\n                        jsonString.append(\"\\\\u00\").append(Integer.toHexString(c));\n                    } else if (c >= '\\u2000' && c < '\\u2100') {\n                        jsonString.append(\"\\\\u\").append(Integer.toHexString(c));\n                    } else {\n                        jsonString.append(c);\n                    }\n                    break;\n            }\n        }\n        jsonString.append(\"\\\"\");\n        return jsonString.toString();\n    }", "signature": "String getJsonString(String string)", "full_signature": "public static String getJsonString(String string)", "class_method_signature": "JsonUtils.getJsonString(String string)", "testcase": false, "constructor": false, "invocations": ["length", "append", "toCharArray", "append", "append", "append", "append", "append", "append", "append", "append", "append", "toHexString", "append", "append", "toHexString", "append", "append", "toHexString", "append", "append", "toString"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}