{"test_class": {"identifier": "MetadataSelectorMatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MetadataSelectorMatcher matcher;", "modifier": "private", "type": "MetadataSelectorMatcher", "declarator": "matcher", "var_name": "matcher"}, {"original_string": "private @Mock ConfigDescriptionRegistry configDescriptionRegistry;", "modifier": "private @Mock", "type": "ConfigDescriptionRegistry", "declarator": "configDescriptionRegistry", "var_name": "configDescriptionRegistry"}, {"original_string": "private @Mock MetadataRegistry metadataRegistry;", "modifier": "private @Mock", "type": "MetadataRegistry", "declarator": "metadataRegistry", "var_name": "metadataRegistry"}], "file": "bundles/org.openhab.core.io.rest.core/src/test/java/org/openhab/core/io/rest/core/internal/item/MetadataSelectorMatcherTest.java"}, "test_case": {"identifier": "emptySelectorShouldReturnEmptySet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void emptySelectorShouldReturnEmptySet() {\n        assertThat(matcher.filterNamespaces(\"\", null), is(Collections.emptySet()));\n    }", "signature": "void emptySelectorShouldReturnEmptySet()", "full_signature": "@Test public void emptySelectorShouldReturnEmptySet()", "class_method_signature": "MetadataSelectorMatcherTest.emptySelectorShouldReturnEmptySet()", "testcase": true, "constructor": false, "invocations": ["assertThat", "filterNamespaces", "is", "emptySet"]}, "focal_class": {"identifier": "MetadataSelectorMatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String METADATA_SCHEME = \"metadata\";", "modifier": "private static final", "type": "String", "declarator": "METADATA_SCHEME = \"metadata\"", "var_name": "METADATA_SCHEME"}, {"original_string": "private static final String METADATA_SCHEME_PREFIX = METADATA_SCHEME + \":\";", "modifier": "private static final", "type": "String", "declarator": "METADATA_SCHEME_PREFIX = METADATA_SCHEME + \":\"", "var_name": "METADATA_SCHEME_PREFIX"}, {"original_string": "private final MetadataRegistry metadataRegistry;", "modifier": "private final", "type": "MetadataRegistry", "declarator": "metadataRegistry", "var_name": "metadataRegistry"}, {"original_string": "private final ConfigDescriptionRegistry configDescriptionRegistry;", "modifier": "private final", "type": "ConfigDescriptionRegistry", "declarator": "configDescriptionRegistry", "var_name": "configDescriptionRegistry"}], "methods": [{"identifier": "MetadataSelectorMatcher", "parameters": "(final @Reference MetadataRegistry metadataRegistry,\n            final @Reference ConfigDescriptionRegistry configDescriptionRegistry)", "modifiers": "@Activate public", "return": "", "signature": " MetadataSelectorMatcher(final @Reference MetadataRegistry metadataRegistry,\n            final @Reference ConfigDescriptionRegistry configDescriptionRegistry)", "full_signature": "@Activate public  MetadataSelectorMatcher(final @Reference MetadataRegistry metadataRegistry,\n            final @Reference ConfigDescriptionRegistry configDescriptionRegistry)", "class_method_signature": "MetadataSelectorMatcher.MetadataSelectorMatcher(final @Reference MetadataRegistry metadataRegistry,\n            final @Reference ConfigDescriptionRegistry configDescriptionRegistry)", "testcase": false, "constructor": true}, {"identifier": "filterNamespaces", "parameters": "(@Nullable String namespaceSelector, @Nullable Locale locale)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> filterNamespaces(@Nullable String namespaceSelector, @Nullable Locale locale)", "full_signature": "public Set<String> filterNamespaces(@Nullable String namespaceSelector, @Nullable Locale locale)", "class_method_signature": "MetadataSelectorMatcher.filterNamespaces(@Nullable String namespaceSelector, @Nullable Locale locale)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/item/MetadataSelectorMatcher.java"}, "focal_method": {"identifier": "filterNamespaces", "parameters": "(@Nullable String namespaceSelector, @Nullable Locale locale)", "modifiers": "public", "return": "Set<String>", "body": "public Set<String> filterNamespaces(@Nullable String namespaceSelector, @Nullable Locale locale) {\n        if (namespaceSelector == null || namespaceSelector.isEmpty()) {\n            return Collections.emptySet();\n        } else {\n            Set<String> originalNamespaces = Arrays.stream(namespaceSelector.split(\",\")) //\n                    .filter(n -> !metadataRegistry.isInternalNamespace(n)) //\n                    .map(n -> n.trim()) //\n                    .collect(Collectors.toSet());\n\n            String namespacePattern = originalNamespaces.stream().collect(Collectors.joining(\"|\"));\n\n            Pattern pattern = Pattern.compile(METADATA_SCHEME_PREFIX + \"(\" + namespacePattern + \")$\");\n            Collection<ConfigDescription> configDescriptions = configDescriptionRegistry.getConfigDescriptions(locale);\n\n            Set<String> configNamespaces = configDescriptions.stream()\n                    .filter(cd -> METADATA_SCHEME.equals(cd.getUID().getScheme())).map(cd -> cd.getUID().toString())\n                    .filter(pattern.asPredicate()).map(uri -> uri.substring(METADATA_SCHEME_PREFIX.length()))\n                    .collect(toSet());\n\n            // merge configDescription namespaces and namespaces from the namespace selector:\n            Set<String> result = new HashSet<>(originalNamespaces);\n            result.addAll(configNamespaces);\n\n            // filter all name spaces which do not match the UID segment pattern (this will be the regex tokens):\n            return result.stream().filter(namespace -> namespace.matches(AbstractUID.SEGMENT_PATTERN)).collect(toSet());\n        }\n    }", "signature": "Set<String> filterNamespaces(@Nullable String namespaceSelector, @Nullable Locale locale)", "full_signature": "public Set<String> filterNamespaces(@Nullable String namespaceSelector, @Nullable Locale locale)", "class_method_signature": "MetadataSelectorMatcher.filterNamespaces(@Nullable String namespaceSelector, @Nullable Locale locale)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "emptySet", "collect", "map", "filter", "stream", "split", "isInternalNamespace", "trim", "toSet", "collect", "stream", "joining", "compile", "getConfigDescriptions", "collect", "map", "filter", "map", "filter", "stream", "equals", "getScheme", "getUID", "toString", "getUID", "asPredicate", "substring", "length", "toSet", "addAll", "collect", "filter", "stream", "matches", "toSet"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}