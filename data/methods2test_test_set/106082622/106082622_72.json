{"test_class": {"identifier": "FilterConfigControllerTest", "superclass": "extends AbstractMvcTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private FilterTestTools filterTestTools;", "modifier": "@Autowired\n    private", "type": "FilterTestTools", "declarator": "filterTestTools", "var_name": "filterTestTools"}], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/controller/configuration/filter/FilterConfigControllerTest.java"}, "test_case": {"identifier": "testIndex", "parameters": "()", "modifiers": "@Test @Transactional public", "return": "void", "body": "@Test\n    @Transactional\n    public void testIndex() throws Exception {\n        // Create some dummy filters\n        final Filter filter1 = filterTestTools.createFilter(\"Filter1\");\n        final Filter filter2 = filterTestTools.createFilter(\"Filter2\");\n\n        // Hit index.\n        mockMvc\n            .perform(get(\"/configuration/filter\").with(user(adminUserDetails)))\n            //.andDo(print())\n            .andExpect(status().isOk())\n            // Validate cluster 1\n            .andExpect(content().string(containsString(filter1.getName())))\n            .andExpect(content().string(containsString(filter1.getClasspath())))\n\n            // Validate cluster 2\n            .andExpect(content().string(containsString(filter2.getName())))\n            .andExpect(content().string(containsString(filter2.getClasspath())));\n    }", "signature": "void testIndex()", "full_signature": "@Test @Transactional public void testIndex()", "class_method_signature": "FilterConfigControllerTest.testIndex()", "testcase": true, "constructor": false, "invocations": ["createFilter", "createFilter", "andExpect", "andExpect", "andExpect", "andExpect", "andExpect", "perform", "with", "get", "user", "isOk", "status", "string", "content", "containsString", "getName", "string", "content", "containsString", "getClasspath", "string", "content", "containsString", "getName", "string", "content", "containsString", "getClasspath"]}, "focal_class": {"identifier": "FilterConfigController", "superclass": "extends BaseController", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private UploadManager uploadManager;", "modifier": "@Autowired\n    private", "type": "UploadManager", "declarator": "uploadManager", "var_name": "uploadManager"}, {"original_string": "@Autowired\n    private PluginFactory<RecordFilter> recordFilterPluginFactory;", "modifier": "@Autowired\n    private", "type": "PluginFactory<RecordFilter>", "declarator": "recordFilterPluginFactory", "var_name": "recordFilterPluginFactory"}, {"original_string": "@Autowired\n    private FilterRepository filterRepository;", "modifier": "@Autowired\n    private", "type": "FilterRepository", "declarator": "filterRepository", "var_name": "filterRepository"}, {"original_string": "@Autowired\n    private ViewToFilterEnforcedRepository viewToFilterEnforcedRepository;", "modifier": "@Autowired\n    private", "type": "ViewToFilterEnforcedRepository", "declarator": "viewToFilterEnforcedRepository", "var_name": "viewToFilterEnforcedRepository"}, {"original_string": "@Autowired\n    private ViewToFilterOptionalRepository viewToFilterOptionalRepository;", "modifier": "@Autowired\n    private", "type": "ViewToFilterOptionalRepository", "declarator": "viewToFilterOptionalRepository", "var_name": "viewToFilterOptionalRepository"}], "methods": [{"identifier": "index", "parameters": "(final Model model)", "modifiers": "@RequestMapping(path = \"\", method = RequestMethod.GET) public", "return": "String", "signature": "String index(final Model model)", "full_signature": "@RequestMapping(path = \"\", method = RequestMethod.GET) public String index(final Model model)", "class_method_signature": "FilterConfigController.index(final Model model)", "testcase": false, "constructor": false}, {"identifier": "createFilter", "parameters": "(final FilterForm filterForm, final Model model)", "modifiers": "@RequestMapping(path = \"/create\", method = RequestMethod.GET) public", "return": "String", "signature": "String createFilter(final FilterForm filterForm, final Model model)", "full_signature": "@RequestMapping(path = \"/create\", method = RequestMethod.GET) public String createFilter(final FilterForm filterForm, final Model model)", "class_method_signature": "FilterConfigController.createFilter(final FilterForm filterForm, final Model model)", "testcase": false, "constructor": false}, {"identifier": "editFilter", "parameters": "(\n        @PathVariable final Long id,\n        final FilterForm filterForm,\n        final Model model,\n        final RedirectAttributes redirectAttributes)", "modifiers": "@RequestMapping(path = \"/edit/{id}\", method = RequestMethod.GET) public", "return": "String", "signature": "String editFilter(\n        @PathVariable final Long id,\n        final FilterForm filterForm,\n        final Model model,\n        final RedirectAttributes redirectAttributes)", "full_signature": "@RequestMapping(path = \"/edit/{id}\", method = RequestMethod.GET) public String editFilter(\n        @PathVariable final Long id,\n        final FilterForm filterForm,\n        final Model model,\n        final RedirectAttributes redirectAttributes)", "class_method_signature": "FilterConfigController.editFilter(\n        @PathVariable final Long id,\n        final FilterForm filterForm,\n        final Model model,\n        final RedirectAttributes redirectAttributes)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(\n        @Valid final FilterForm filterForm,\n        final BindingResult bindingResult,\n        final RedirectAttributes redirectAttributes)", "modifiers": "@RequestMapping(path = \"/update\", method = RequestMethod.POST) public", "return": "String", "signature": "String update(\n        @Valid final FilterForm filterForm,\n        final BindingResult bindingResult,\n        final RedirectAttributes redirectAttributes)", "full_signature": "@RequestMapping(path = \"/update\", method = RequestMethod.POST) public String update(\n        @Valid final FilterForm filterForm,\n        final BindingResult bindingResult,\n        final RedirectAttributes redirectAttributes)", "class_method_signature": "FilterConfigController.update(\n        @Valid final FilterForm filterForm,\n        final BindingResult bindingResult,\n        final RedirectAttributes redirectAttributes)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "modifiers": "@RequestMapping(path = \"/delete/{id}\", method = RequestMethod.POST) public", "return": "String", "signature": "String delete(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "full_signature": "@RequestMapping(path = \"/delete/{id}\", method = RequestMethod.POST) public String delete(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "class_method_signature": "FilterConfigController.delete(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "testcase": false, "constructor": false}, {"identifier": "setupBreadCrumbs", "parameters": "(final Model model, final String name, final String url)", "modifiers": "private", "return": "void", "signature": "void setupBreadCrumbs(final Model model, final String name, final String url)", "full_signature": "private void setupBreadCrumbs(final Model model, final String name, final String url)", "class_method_signature": "FilterConfigController.setupBreadCrumbs(final Model model, final String name, final String url)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/controller/configuration/filter/FilterConfigController.java"}, "focal_method": {"identifier": "index", "parameters": "(final Model model)", "modifiers": "@RequestMapping(path = \"\", method = RequestMethod.GET) public", "return": "String", "body": "@RequestMapping(path = \"\", method = RequestMethod.GET)\n    public String index(final Model model) {\n        // Setup breadcrumbs\n        setupBreadCrumbs(model, null, null);\n\n        // Retrieve all message formats\n        final Iterable<Filter> filterList = filterRepository.findAllByOrderByNameAsc();\n        model.addAttribute(\"filters\", filterList);\n\n        return \"configuration/filter/index\";\n    }", "signature": "String index(final Model model)", "full_signature": "@RequestMapping(path = \"\", method = RequestMethod.GET) public String index(final Model model)", "class_method_signature": "FilterConfigController.index(final Model model)", "testcase": false, "constructor": false, "invocations": ["setupBreadCrumbs", "findAllByOrderByNameAsc", "addAttribute"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}