{"test_class": {"identifier": "KaramelizedCookbookTest", "superclass": "", "interfaces": "", "fields": [], "file": "karamel-common/src/test/java/se/kth/karamel/common/cookbookmeta/KaramelizedCookbookTest.java"}, "test_case": {"identifier": "testGetInfoJson", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetInfoJson() throws CookbookUrlException, MetadataParseException, ValidationException, NoKaramelizedCookbookException {\n    Settings.CB_CLASSPATH_MODE = true;\n    KaramelizedCookbook cb = new KaramelizedCookbook(\"testorg/testrepo/tree/master/cookbooks/biobankcloud/hiway-chef\", false);\n    String json = cb.getInfoJson();\n    String expecetdJson = \"{\\n\"\n        + \"  \\\"id\\\": \\\"https://github.com/testorg/testrepo/tree/master/cookbooks/biobankcloud/hiway-chef\\\",\\n\"\n        + \"  \\\"name\\\": \\\"hiway\\\",\\n\"\n        + \"  \\\"description\\\": \\\"Chef recipes for installing Hi-WAY, its dependencies, and several workflows.\\\",\\n\"\n        + \"  \\\"version\\\": \\\"1.0.0\\\",\\n\"\n        + \"  \\\"attributes\\\": [\\n\"\n        + \"    {\\n\"\n        + \"      \\\"name\\\": \\\"hiway/user\\\",\\n\"\n        + \"      \\\"displayName\\\": \\\"Name of the Hi-WAY user\\\",\\n\"\n        + \"      \\\"type\\\": \\\"string\\\",\\n\"\n        + \"      \\\"description\\\": \\\"Name of the Hi-WAY user\\\",\\n\"\n        + \"      \\\"default\\\": \\\"hiway\\\"\\n\"\n        + \"    },\\n\"\n        + \"    {\\n\"\n        + \"      \\\"name\\\": \\\"hiway/data\\\",\\n\"\n        + \"      \\\"displayName\\\": \\\"Data directory\\\",\\n\"\n        + \"      \\\"type\\\": \\\"string\\\",\\n\"\n        + \"      \\\"description\\\": \\\"Directory in which to store large data, e.g., input data of the workflow\\\",\\n\"\n        + \"      \\\"default\\\": \\\"/home/hiway\\\"\\n\"\n        + \"    },\\n\"\n        + \"    {\\n\"\n        + \"      \\\"name\\\": \\\"hiway/release\\\",\\n\"\n        + \"      \\\"displayName\\\": \\\"Release or snaphsot\\\",\\n\"\n        + \"      \\\"type\\\": \\\"string\\\",\\n\"\n        + \"      \\\"description\\\": \\\"Install Hi-WAY release as opposed to the latest snapshot version\\\",\\n\"\n        + \"      \\\"default\\\": \\\"false\\\"\\n\"\n        + \"    },\\n\"\n        + \"    {\\n\"\n        + \"      \\\"name\\\": \\\"hiway/hiway/am/memory_mb\\\",\\n\"\n        + \"      \\\"displayName\\\": \\\"Hi-WAY Application Master Memory in MB\\\",\\n\"\n        + \"      \\\"type\\\": \\\"string\\\",\\n\"\n        + \"      \\\"description\\\": \\\"Amount of memory in MB to be requested to run the application master.\\\",\\n\"\n        + \"      \\\"default\\\": \\\"512\\\"\\n\"\n        + \"    },\\n\"\n        + \"    {\\n\"\n        + \"      \\\"name\\\": \\\"hiway/hiway/am/vcores\\\",\\n\"\n        + \"      \\\"displayName\\\": \\\"Hi-WAY Application Master Number of Virtual Cores\\\",\\n\"\n        + \"      \\\"type\\\": \\\"string\\\",\\n\"\n        + \"      \\\"description\\\": \\\"Hi-WAY Application Master Number of Virtual Cores\\\",\\n\"\n        + \"      \\\"default\\\": \\\"1\\\"\\n\"\n        + \"    },\\n\"\n        + \"    {\\n\"\n        + \"      \\\"name\\\": \\\"hiway/hiway/worker/memory_mb\\\",\\n\"\n        + \"      \\\"displayName\\\": \\\"Hi-WAY Worker Memory in MB\\\",\\n\"\n        + \"      \\\"type\\\": \\\"string\\\",\\n\"\n        + \"      \\\"description\\\": \\\"Hi-WAY Worker Memory in MB\\\",\\n\"\n        + \"      \\\"default\\\": \\\"1024\\\"\\n\"\n        + \"    },\\n\"\n        + \"    {\\n\"\n        + \"      \\\"name\\\": \\\"hiway/hiway/worker/vcores\\\",\\n\"\n        + \"      \\\"displayName\\\": \\\"Hi-WAY Worker Number of Virtual Cores\\\",\\n\"\n        + \"      \\\"type\\\": \\\"string\\\",\\n\"\n        + \"      \\\"description\\\": \\\"Hi-WAY Worker Number of Virtual Cores\\\",\\n\"\n        + \"      \\\"default\\\": \\\"1\\\"\\n\"\n        + \"    },\\n\"\n        + \"    {\\n\"\n        + \"      \\\"name\\\": \\\"hiway/hiway/scheduler\\\",\\n\"\n        + \"      \\\"displayName\\\": \\\"Hi-WAY Scheduler\\\",\\n\"\n        + \"      \\\"type\\\": \\\"string\\\",\\n\"\n        + \"      \\\"description\\\": \\\"valid values: c3po, cloning, conservative, greedyQueue, heft, outlooking, placementAware, staticRoundRobin\\\",\\n\"\n        + \"      \\\"default\\\": \\\"placementAware\\\"\\n\"\n        + \"    },\\n\"\n        + \"    {\\n\"\n        + \"      \\\"name\\\": \\\"hiway/variantcall/reads/sample_id\\\",\\n\"\n        + \"      \\\"displayName\\\": \\\"1000 Genomes Sample Id\\\",\\n\"\n        + \"      \\\"type\\\": \\\"string\\\",\\n\"\n        + \"      \\\"description\\\": \\\"The Sample Id of sequence data from the 1000 Genomes project that is to be aligned\\\",\\n\"\n        + \"      \\\"default\\\": \\\"HG02025\\\"\\n\"\n        + \"    },\\n\"\n        + \"    {\\n\"\n        + \"      \\\"name\\\": \\\"hiway/variantcall/reads/run_ids\\\",\\n\"\n        + \"      \\\"displayName\\\": \\\"1000 Genomes Run Ids\\\",\\n\"\n        + \"      \\\"type\\\": \\\"array\\\",\\n\"\n        + \"      \\\"description\\\": \\\"The Run Ids of sequence data from the 1000 Genomes project that is to be aligned\\\",\\n\"\n        + \"      \\\"default\\\": [\\n\"\n        + \"        \\\"SRR359188\\\",\\n\"\n        + \"        \\\"SRR359195\\\"\\n\"\n        + \"      ]\\n\"\n        + \"    },\\n\"\n        + \"    {\\n\"\n        + \"      \\\"name\\\": \\\"hiway/variantcall/reference/chromosomes\\\",\\n\"\n        + \"      \\\"displayName\\\": \\\"HG38 chromosomes\\\",\\n\"\n        + \"      \\\"type\\\": \\\"array\\\",\\n\"\n        + \"      \\\"description\\\": \\\"The chromosomes of the HG38 reference against which sequence data is to be aligned\\\",\\n\"\n        + \"      \\\"default\\\": [\\n\"\n        + \"        \\\"chr22\\\",\\n\"\n        + \"        \\\"chrY\\\"\\n\"\n        + \"      ]\\n\"\n        + \"    }\\n\"\n        + \"  ],\\n\"\n        + \"  \\\"recipes\\\": [\\n\"\n        + \"    {\\n\"\n        + \"      \\\"name\\\": \\\"hiway::install\\\",\\n\"\n        + \"      \\\"description\\\": \\\"Installs and sets up Hi-WAY\\\",\\n\"\n        + \"      \\\"links\\\": []\\n\"\n        + \"    },\\n\"\n        + \"    {\\n\"\n        + \"      \\\"name\\\": \\\"hiway::hiway_client\\\",\\n\"\n        + \"      \\\"description\\\": \\\"Configures Hadoop to support Hi-WAY on the Client\\\",\\n\"\n        + \"      \\\"links\\\": []\\n\"\n        + \"    }\\n\"\n        + \"  ]\\n\"\n        + \"}\";\n\n    Assert.assertEquals(expecetdJson, json);\n  }", "signature": "void testGetInfoJson()", "full_signature": "@Test public void testGetInfoJson()", "class_method_signature": "KaramelizedCookbookTest.testGetInfoJson()", "testcase": true, "constructor": false, "invocations": ["getInfoJson", "assertEquals"]}, "focal_class": {"identifier": "KaramelizedCookbook", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(KaramelizedCookbook.class);", "modifier": "private static final", "type": "org.apache.log4j.Logger", "declarator": "logger = org.apache.log4j.Logger.getLogger(KaramelizedCookbook.class)", "var_name": "logger"}, {"original_string": "private final CookbookUrls urls;", "modifier": "private final", "type": "CookbookUrls", "declarator": "urls", "var_name": "urls"}, {"original_string": "private final DefaultRb defaultRb;", "modifier": "private final", "type": "DefaultRb", "declarator": "defaultRb", "var_name": "defaultRb"}, {"original_string": "private final MetadataRb metadataRb;", "modifier": "private final", "type": "MetadataRb", "declarator": "metadataRb", "var_name": "metadataRb"}, {"original_string": "private final KaramelFile karamelFile;", "modifier": "private final", "type": "KaramelFile", "declarator": "karamelFile", "var_name": "karamelFile"}, {"original_string": "private final Berksfile berksFile;", "modifier": "private final", "type": "Berksfile", "declarator": "berksFile", "var_name": "berksFile"}, {"original_string": "private final List<ExperimentRecipe> experimentRecipes = new ArrayList<>();", "modifier": "private final", "type": "List<ExperimentRecipe>", "declarator": "experimentRecipes = new ArrayList<>()", "var_name": "experimentRecipes"}, {"original_string": "private final Set<KaramelizedCookbook> dependencies = new HashSet<>();", "modifier": "private final", "type": "Set<KaramelizedCookbook>", "declarator": "dependencies = new HashSet<>()", "var_name": "dependencies"}, {"original_string": "private InstallRecipe installRecipe;", "modifier": "private", "type": "InstallRecipe", "declarator": "installRecipe", "var_name": "installRecipe"}, {"original_string": "private String json;", "modifier": "private", "type": "String", "declarator": "json", "var_name": "json"}, {"original_string": "private boolean reciepsLoaded = false;", "modifier": "private", "type": "boolean", "declarator": "reciepsLoaded = false", "var_name": "reciepsLoaded"}], "methods": [{"identifier": "KaramelizedCookbook", "parameters": "(String homeUrl, boolean local)", "modifiers": "public", "return": "", "signature": " KaramelizedCookbook(String homeUrl, boolean local)", "full_signature": "public  KaramelizedCookbook(String homeUrl, boolean local)", "class_method_signature": "KaramelizedCookbook.KaramelizedCookbook(String homeUrl, boolean local)", "testcase": false, "constructor": true}, {"identifier": "KaramelizedCookbook", "parameters": "(CookbookUrls urls, String defaultRbC, String metadataRbC, String karamelFileC,\n      String berksfileC)", "modifiers": "public", "return": "", "signature": " KaramelizedCookbook(CookbookUrls urls, String defaultRbC, String metadataRbC, String karamelFileC,\n      String berksfileC)", "full_signature": "public  KaramelizedCookbook(CookbookUrls urls, String defaultRbC, String metadataRbC, String karamelFileC,\n      String berksfileC)", "class_method_signature": "KaramelizedCookbook.KaramelizedCookbook(CookbookUrls urls, String defaultRbC, String metadataRbC, String karamelFileC,\n      String berksfileC)", "testcase": false, "constructor": true}, {"identifier": "loadrecipes", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void loadrecipes()", "full_signature": "private synchronized void loadrecipes()", "class_method_signature": "KaramelizedCookbook.loadrecipes()", "testcase": false, "constructor": false}, {"identifier": "getBerksFile", "parameters": "()", "modifiers": "public", "return": "Berksfile", "signature": "Berksfile getBerksFile()", "full_signature": "public Berksfile getBerksFile()", "class_method_signature": "KaramelizedCookbook.getBerksFile()", "testcase": false, "constructor": false}, {"identifier": "getInfoJson", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInfoJson()", "full_signature": "public String getInfoJson()", "class_method_signature": "KaramelizedCookbook.getInfoJson()", "testcase": false, "constructor": false}, {"identifier": "getMetadataRb", "parameters": "()", "modifiers": "public", "return": "MetadataRb", "signature": "MetadataRb getMetadataRb()", "full_signature": "public MetadataRb getMetadataRb()", "class_method_signature": "KaramelizedCookbook.getMetadataRb()", "testcase": false, "constructor": false}, {"identifier": "getKaramelFile", "parameters": "()", "modifiers": "public", "return": "KaramelFile", "signature": "KaramelFile getKaramelFile()", "full_signature": "public KaramelFile getKaramelFile()", "class_method_signature": "KaramelizedCookbook.getKaramelFile()", "testcase": false, "constructor": false}, {"identifier": "getExperimentRecipes", "parameters": "()", "modifiers": "public", "return": "List<ExperimentRecipe>", "signature": "List<ExperimentRecipe> getExperimentRecipes()", "full_signature": "public List<ExperimentRecipe> getExperimentRecipes()", "class_method_signature": "KaramelizedCookbook.getExperimentRecipes()", "testcase": false, "constructor": false}, {"identifier": "getInstallRecipe", "parameters": "()", "modifiers": "public", "return": "InstallRecipe", "signature": "InstallRecipe getInstallRecipe()", "full_signature": "public InstallRecipe getInstallRecipe()", "class_method_signature": "KaramelizedCookbook.getInstallRecipe()", "testcase": false, "constructor": false}, {"identifier": "getDefaultRb", "parameters": "()", "modifiers": "public", "return": "DefaultRb", "signature": "DefaultRb getDefaultRb()", "full_signature": "public DefaultRb getDefaultRb()", "class_method_signature": "KaramelizedCookbook.getDefaultRb()", "testcase": false, "constructor": false}, {"identifier": "getUrls", "parameters": "()", "modifiers": "public", "return": "CookbookUrls", "signature": "CookbookUrls getUrls()", "full_signature": "public CookbookUrls getUrls()", "class_method_signature": "KaramelizedCookbook.getUrls()", "testcase": false, "constructor": false}, {"identifier": "addDependency", "parameters": "(KaramelizedCookbook cookbook)", "modifiers": "public", "return": "void", "signature": "void addDependency(KaramelizedCookbook cookbook)", "full_signature": "public void addDependency(KaramelizedCookbook cookbook)", "class_method_signature": "KaramelizedCookbook.addDependency(KaramelizedCookbook cookbook)", "testcase": false, "constructor": false}, {"identifier": "addDependencies", "parameters": "(Set<KaramelizedCookbook> cookbooks)", "modifiers": "public", "return": "void", "signature": "void addDependencies(Set<KaramelizedCookbook> cookbooks)", "full_signature": "public void addDependencies(Set<KaramelizedCookbook> cookbooks)", "class_method_signature": "KaramelizedCookbook.addDependencies(Set<KaramelizedCookbook> cookbooks)", "testcase": false, "constructor": false}, {"identifier": "getDependencies", "parameters": "()", "modifiers": "public", "return": "Set<KaramelizedCookbook>", "signature": "Set<KaramelizedCookbook> getDependencies()", "full_signature": "public Set<KaramelizedCookbook> getDependencies()", "class_method_signature": "KaramelizedCookbook.getDependencies()", "testcase": false, "constructor": false}], "file": "karamel-common/src/main/java/se/kth/karamel/common/cookbookmeta/KaramelizedCookbook.java"}, "focal_method": {"identifier": "getInfoJson", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getInfoJson() {\n    if (json == null) {\n      CookbookInfoJson cookbookInfoJson = new CookbookInfoJson(urls.id, metadataRb);\n      GsonBuilder builder = new GsonBuilder();\n      builder.disableHtmlEscaping();\n      Gson gson = builder.setPrettyPrinting().create();\n      json = gson.toJson(cookbookInfoJson);\n    }\n    return json;\n  }", "signature": "String getInfoJson()", "full_signature": "public String getInfoJson()", "class_method_signature": "KaramelizedCookbook.getInfoJson()", "testcase": false, "constructor": false, "invocations": ["disableHtmlEscaping", "create", "setPrettyPrinting", "toJson"]}, "repository": {"repo_id": 29383909, "url": "https://github.com/karamelchef/karamel", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 30, "size": 12029, "license": "licensed"}}