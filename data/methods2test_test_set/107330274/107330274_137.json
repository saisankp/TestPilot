{"test_class": {"identifier": "DateTimeExtTest", "superclass": "", "interfaces": "", "fields": [], "file": "titus-common/src/test/java/com/netflix/titus/common/util/DateTimeExtTest.java"}, "test_case": {"identifier": "testTime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTime() {\n        long msDuration = 123;\n        assertThat(toTimeUnitString(msDuration)).isEqualTo(\"123ms\");\n\n        long secDuration = 3 * 1000 + 123;\n        assertThat(toTimeUnitString(secDuration)).isEqualTo(\"3s 123ms\");\n\n        long minDuration = (2 * 60 + 3) * 1000 + 123;\n        assertThat(toTimeUnitString(minDuration)).isEqualTo(\"2min 3s 123ms\");\n\n        long hourDuration = ((1 * 60 + 2) * 60 + 3) * 1000 + 123;\n        assertThat(toTimeUnitString(hourDuration)).isEqualTo(\"1h 2min 3s 123ms\");\n\n        long oneSecond = 1 * 1000;\n        assertThat(toTimeUnitString(oneSecond)).isEqualTo(\"1s\");\n\n        long oneMillis = 1;\n        assertThat(toTimeUnitString(oneMillis)).isEqualTo(\"1ms\");\n\n        long zeroMillis = 0;\n        assertThat(toTimeUnitString(zeroMillis)).isEqualTo(\"0ms\");\n\n        long twoDays = TimeUnit.DAYS.toMillis(2);\n        assertThat(toTimeUnitString(twoDays)).isEqualTo(\"2d\");\n    }", "signature": "void testTime()", "full_signature": "@Test public void testTime()", "class_method_signature": "DateTimeExtTest.testTime()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "toTimeUnitString", "isEqualTo", "assertThat", "toTimeUnitString", "isEqualTo", "assertThat", "toTimeUnitString", "isEqualTo", "assertThat", "toTimeUnitString", "isEqualTo", "assertThat", "toTimeUnitString", "isEqualTo", "assertThat", "toTimeUnitString", "isEqualTo", "assertThat", "toTimeUnitString", "toMillis", "isEqualTo", "assertThat", "toTimeUnitString"]}, "focal_class": {"identifier": "DateTimeExt", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DateTimeFormatter ISO_UTC_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE_TIME.withZone(ZoneId.of(\"UTC\"));", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "ISO_UTC_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE_TIME.withZone(ZoneId.of(\"UTC\"))", "var_name": "ISO_UTC_DATE_TIME_FORMATTER"}, {"original_string": "private static final DateTimeFormatter ISO_LOCAL_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE_TIME.withZone(ZoneId.systemDefault());", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "ISO_LOCAL_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE_TIME.withZone(ZoneId.systemDefault())", "var_name": "ISO_LOCAL_DATE_TIME_FORMATTER"}], "methods": [{"identifier": "DateTimeExt", "parameters": "()", "modifiers": "private", "return": "", "signature": " DateTimeExt()", "full_signature": "private  DateTimeExt()", "class_method_signature": "DateTimeExt.DateTimeExt()", "testcase": false, "constructor": true}, {"identifier": "toZoneId", "parameters": "(String timeZoneName)", "modifiers": "public static", "return": "ZoneId", "signature": "ZoneId toZoneId(String timeZoneName)", "full_signature": "public static ZoneId toZoneId(String timeZoneName)", "class_method_signature": "DateTimeExt.toZoneId(String timeZoneName)", "testcase": false, "constructor": false}, {"identifier": "toZoneOffset", "parameters": "(String timeZoneName)", "modifiers": "public static", "return": "ZoneOffset", "signature": "ZoneOffset toZoneOffset(String timeZoneName)", "full_signature": "public static ZoneOffset toZoneOffset(String timeZoneName)", "class_method_signature": "DateTimeExt.toZoneOffset(String timeZoneName)", "testcase": false, "constructor": false}, {"identifier": "toUtcDateTimeString", "parameters": "(long msSinceEpoch)", "modifiers": "public static", "return": "String", "signature": "String toUtcDateTimeString(long msSinceEpoch)", "full_signature": "public static String toUtcDateTimeString(long msSinceEpoch)", "class_method_signature": "DateTimeExt.toUtcDateTimeString(long msSinceEpoch)", "testcase": false, "constructor": false}, {"identifier": "toLocalDateTimeString", "parameters": "(long msSinceEpoch)", "modifiers": "public static", "return": "String", "signature": "String toLocalDateTimeString(long msSinceEpoch)", "full_signature": "public static String toLocalDateTimeString(long msSinceEpoch)", "class_method_signature": "DateTimeExt.toLocalDateTimeString(long msSinceEpoch)", "testcase": false, "constructor": false}, {"identifier": "toTimeUnitAbbreviation", "parameters": "(TimeUnit timeUnit)", "modifiers": "public static", "return": "String", "signature": "String toTimeUnitAbbreviation(TimeUnit timeUnit)", "full_signature": "public static String toTimeUnitAbbreviation(TimeUnit timeUnit)", "class_method_signature": "DateTimeExt.toTimeUnitAbbreviation(TimeUnit timeUnit)", "testcase": false, "constructor": false}, {"identifier": "toTimeUnitString", "parameters": "(Duration duration)", "modifiers": "public static", "return": "String", "signature": "String toTimeUnitString(Duration duration)", "full_signature": "public static String toTimeUnitString(Duration duration)", "class_method_signature": "DateTimeExt.toTimeUnitString(Duration duration)", "testcase": false, "constructor": false}, {"identifier": "toTimeUnitString", "parameters": "(long timeMs)", "modifiers": "public static", "return": "String", "signature": "String toTimeUnitString(long timeMs)", "full_signature": "public static String toTimeUnitString(long timeMs)", "class_method_signature": "DateTimeExt.toTimeUnitString(long timeMs)", "testcase": false, "constructor": false}, {"identifier": "toRateString", "parameters": "(long interval, long itemsPerInterval, TimeUnit timeUnit, String rateType)", "modifiers": "public static", "return": "String", "signature": "String toRateString(long interval, long itemsPerInterval, TimeUnit timeUnit, String rateType)", "full_signature": "public static String toRateString(long interval, long itemsPerInterval, TimeUnit timeUnit, String rateType)", "class_method_signature": "DateTimeExt.toRateString(long interval, long itemsPerInterval, TimeUnit timeUnit, String rateType)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/DateTimeExt.java"}, "focal_method": {"identifier": "toTimeUnitString", "parameters": "(Duration duration)", "modifiers": "public static", "return": "String", "body": "public static String toTimeUnitString(Duration duration) {\n        return toTimeUnitString(Durations.toMillis(duration));\n    }", "signature": "String toTimeUnitString(Duration duration)", "full_signature": "public static String toTimeUnitString(Duration duration)", "class_method_signature": "DateTimeExt.toTimeUnitString(Duration duration)", "testcase": false, "constructor": false, "invocations": ["toTimeUnitString", "toMillis"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}