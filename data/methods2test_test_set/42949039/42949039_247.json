{"test_class": {"identifier": "VelocityNonStrictHelperTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/VelocityNonStrictHelperTest.java"}, "test_case": {"identifier": "testEvaluateStrict", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEvaluateStrict()\n    {\n        String template = \"${baz}\";\n        Map<String, Object> variables = new HashMap<>();\n        variables.put(\"foo\", \"bar\");\n        String logTag = \"test\";\n\n        try\n        {\n            velocityNonStrictHelper.evaluate(template, variables, logTag);\n            fail();\n        }\n        catch (MethodInvocationException methodInvocationException)\n        {\n            Assert.assertEquals(\"Exception message not equal.\", \"Variable $baz has not been set at test[line 1, column 1]\",\n                methodInvocationException.getMessage());\n        }\n    }", "signature": "void testEvaluateStrict()", "full_signature": "@Test public void testEvaluateStrict()", "class_method_signature": "VelocityNonStrictHelperTest.testEvaluateStrict()", "testcase": true, "constructor": false, "invocations": ["put", "evaluate", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "VelocityNonStrictHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "evaluate", "parameters": "(Reader templateReader, Map<String, Object> variables, String logTag, boolean strict)", "modifiers": "private", "return": "String", "signature": "String evaluate(Reader templateReader, Map<String, Object> variables, String logTag, boolean strict)", "full_signature": "private String evaluate(Reader templateReader, Map<String, Object> variables, String logTag, boolean strict)", "class_method_signature": "VelocityNonStrictHelper.evaluate(Reader templateReader, Map<String, Object> variables, String logTag, boolean strict)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(String template, Map<String, Object> variables, String logTag)", "modifiers": "public", "return": "String", "signature": "String evaluate(String template, Map<String, Object> variables, String logTag)", "full_signature": "public String evaluate(String template, Map<String, Object> variables, String logTag)", "class_method_signature": "VelocityNonStrictHelper.evaluate(String template, Map<String, Object> variables, String logTag)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(String template, Map<String, Object> variables, String logTag, boolean strict)", "modifiers": "public", "return": "String", "signature": "String evaluate(String template, Map<String, Object> variables, String logTag, boolean strict)", "full_signature": "public String evaluate(String template, Map<String, Object> variables, String logTag, boolean strict)", "class_method_signature": "VelocityNonStrictHelper.evaluate(String template, Map<String, Object> variables, String logTag, boolean strict)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/VelocityNonStrictHelper.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(Reader templateReader, Map<String, Object> variables, String logTag, boolean strict)", "modifiers": "private", "return": "String", "body": "private String evaluate(Reader templateReader, Map<String, Object> variables, String logTag, boolean strict)\n    {\n        /*  Get and initialize a velocity engine  */\n        VelocityEngine velocityEngine = new VelocityEngine();\n        velocityEngine.setProperty(RuntimeConstants.RUNTIME_REFERENCES_STRICT, strict);\n        velocityEngine.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, SecureUberspector.class.getName());\n        velocityEngine.init();\n\n        VelocityContext velocityContext = new VelocityContext(variables);\n        StringWriter writer = new StringWriter();\n        if (!velocityEngine.evaluate(velocityContext, writer, logTag, templateReader))\n        {\n            // Although the velocityEngine.evaluate method's Javadoc states that it will return false to indicate a failure when the template couldn't be\n            // processed and to see the Velocity log messages for more details, upon examining the method's implementation, it doesn't look like\n            // it will ever return false. Instead, other RuntimeExceptions will be thrown (e.g. ParseErrorException).\n            // Nonetheless, we'll leave this checking here to honor the method's contract in case the implementation changes in the future.\n            // Having said that, there will be no way to JUnit test this flow.\n            throw new IllegalStateException(\"Error evaluating velocity template. See velocity log message for more details.\");\n        }\n        return writer.toString();\n    }", "signature": "String evaluate(Reader templateReader, Map<String, Object> variables, String logTag, boolean strict)", "full_signature": "private String evaluate(Reader templateReader, Map<String, Object> variables, String logTag, boolean strict)", "class_method_signature": "VelocityNonStrictHelper.evaluate(Reader templateReader, Map<String, Object> variables, String logTag, boolean strict)", "testcase": false, "constructor": false, "invocations": ["setProperty", "setProperty", "getName", "init", "evaluate", "toString"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}