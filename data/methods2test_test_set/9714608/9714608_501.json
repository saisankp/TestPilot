{"test_class": {"identifier": "StandardGISTreeSetTest", "superclass": "extends AbstractGisTest", "interfaces": "", "fields": [{"original_string": "private static final String SHP_RESOURCE = MapElementTreeSetTest.class.getPackage().getName().replaceAll(\"\\\\.\", \"/\") //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t+ \"/test.shp\";", "modifier": "private static final", "type": "String", "declarator": "SHP_RESOURCE = MapElementTreeSetTest.class.getPackage().getName().replaceAll(\"\\\\.\", \"/\") //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t+ \"/test.shp\"", "var_name": "SHP_RESOURCE"}, {"original_string": "private static final int MAX_REFERENCE_SIZE = 5;", "modifier": "private static final", "type": "int", "declarator": "MAX_REFERENCE_SIZE = 5", "var_name": "MAX_REFERENCE_SIZE"}, {"original_string": "private ArrayList<GISPrimitive> reference = null;", "modifier": "private", "type": "ArrayList<GISPrimitive>", "declarator": "reference = null", "var_name": "reference"}, {"original_string": "private Point2d center = null;", "modifier": "private", "type": "Point2d", "declarator": "center = null", "var_name": "center"}, {"original_string": "private Rectangle2d worldBounds = null;", "modifier": "private", "type": "Rectangle2d", "declarator": "worldBounds = null", "var_name": "worldBounds"}], "file": "advanced/gis/giscore/src/test/java/org/arakhne/afc/gis/tree/StandardGISTreeSetTest.java"}, "test_case": {"identifier": "testAddE", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddE() {\n        StandardGISTreeSet<GISPrimitive> test = new StandardGISTreeSet<>(this.worldBounds);\n        assertTrue(test.addAll(this.reference));\n        assertEpsilonEquals(this.reference.size(), test.size());\n\n        String msg;\n        Random rnd = new Random();\n        int testCount = rnd.nextInt(5)+1;\n\n        for(int i=0; i<testCount; ++i) {\n        \tmsg = \"test \"+(i+1)+\"/\"+testCount; //$NON-NLS-1$ //$NON-NLS-2$\n        \tgetLogger().info(msg+\"...\"); //$NON-NLS-1$\n\n\t        // Add an element\n        \tdouble x = this.worldBounds.getMinX() + rnd.nextDouble() * this.worldBounds.getWidth();\n        \tdouble y = this.worldBounds.getMinY() + rnd.nextDouble() * this.worldBounds.getHeight();\n\t        GISPrimitive newElement = new MapPoint(x,y);\n\t        assertTrue(this.reference.add(newElement), msg);\n\t        assertTrue(test.add(newElement), msg);\n\t        assertEquals(this.reference.size(), test.size(), msg);\n\t        assertTrue(test.slowContains(newElement), msg);\n\t    \tassertEpsilonEquals(this.reference.toArray(),test.toArray(), msg);\n\t    \tgetLogger().info(\"done\"); //$NON-NLS-1$\n        }\n\t}", "signature": "void testAddE()", "full_signature": "@Test public void testAddE()", "class_method_signature": "StandardGISTreeSetTest.testAddE()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "addAll", "assertEpsilonEquals", "size", "size", "nextInt", "info", "getLogger", "getMinX", "nextDouble", "getWidth", "getMinY", "nextDouble", "getHeight", "assertTrue", "add", "assertTrue", "add", "assertEquals", "size", "size", "assertTrue", "slowContains", "assertEpsilonEquals", "toArray", "toArray", "info", "getLogger"]}, "focal_class": {"identifier": "StandardGISTreeSet", "superclass": "extends AbstractGISTreeSet<P, GISTreeSetNode<P>>", "interfaces": "implements GISTreeSetNodeFactory<P, GISTreeSetNode<P>>", "fields": [{"original_string": "private GISTreeSetNodeFactory<P, GISTreeSetNode<P>> factory;", "modifier": "private", "type": "GISTreeSetNodeFactory<P, GISTreeSetNode<P>>", "declarator": "factory", "var_name": "factory"}], "methods": [{"identifier": "StandardGISTreeSet", "parameters": "()", "modifiers": "public", "return": "", "signature": " StandardGISTreeSet()", "full_signature": "public  StandardGISTreeSet()", "class_method_signature": "StandardGISTreeSet.StandardGISTreeSet()", "testcase": false, "constructor": true}, {"identifier": "StandardGISTreeSet", "parameters": "(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "modifiers": "public", "return": "", "signature": " StandardGISTreeSet(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "full_signature": "public  StandardGISTreeSet(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "class_method_signature": "StandardGISTreeSet.StandardGISTreeSet(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "testcase": false, "constructor": true}, {"identifier": "StandardGISTreeSet", "parameters": "(double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "modifiers": "public", "return": "", "signature": " StandardGISTreeSet(double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "full_signature": "public  StandardGISTreeSet(double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "class_method_signature": "StandardGISTreeSet.StandardGISTreeSet(double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(P elt)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean add(P elt)", "full_signature": "@Override public final boolean add(P elt)", "class_method_signature": "StandardGISTreeSet.add(P elt)", "testcase": false, "constructor": false}, {"identifier": "setNodeFactory", "parameters": "(GISTreeSetNodeFactory<P, GISTreeSetNode<P>> factory)", "modifiers": "@Override public", "return": "void", "signature": "void setNodeFactory(GISTreeSetNodeFactory<P, GISTreeSetNode<P>> factory)", "full_signature": "@Override public void setNodeFactory(GISTreeSetNodeFactory<P, GISTreeSetNode<P>> factory)", "class_method_signature": "StandardGISTreeSet.setNodeFactory(GISTreeSetNodeFactory<P, GISTreeSetNode<P>> factory)", "testcase": false, "constructor": false}, {"identifier": "getNodeFactory", "parameters": "()", "modifiers": "@Override @Pure public", "return": "GISTreeSetNodeFactory<P, GISTreeSetNode<P>>", "signature": "GISTreeSetNodeFactory<P, GISTreeSetNode<P>> getNodeFactory()", "full_signature": "@Override @Pure public GISTreeSetNodeFactory<P, GISTreeSetNode<P>> getNodeFactory()", "class_method_signature": "StandardGISTreeSet.getNodeFactory()", "testcase": false, "constructor": false}, {"identifier": "newRootNode", "parameters": "(P element)", "modifiers": "@Override @Pure public", "return": "GISTreeSetNode<P>", "signature": "GISTreeSetNode<P> newRootNode(P element)", "full_signature": "@Override @Pure public GISTreeSetNode<P> newRootNode(P element)", "class_method_signature": "StandardGISTreeSet.newRootNode(P element)", "testcase": false, "constructor": false}, {"identifier": "newRootNode", "parameters": "(P element, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "modifiers": "@Override @Pure public", "return": "GISTreeSetNode<P>", "signature": "GISTreeSetNode<P> newRootNode(P element, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "full_signature": "@Override @Pure public GISTreeSetNode<P> newRootNode(P element, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "class_method_signature": "StandardGISTreeSet.newRootNode(P element, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "testcase": false, "constructor": false}, {"identifier": "newNode", "parameters": "(IcosepQuadTreeZone zone, double boundsX, double boundsY,\n\t\t\tdouble boundsWidth, double boundsHeight)", "modifiers": "@Override @Pure public", "return": "GISTreeSetNode<P>", "signature": "GISTreeSetNode<P> newNode(IcosepQuadTreeZone zone, double boundsX, double boundsY,\n\t\t\tdouble boundsWidth, double boundsHeight)", "full_signature": "@Override @Pure public GISTreeSetNode<P> newNode(IcosepQuadTreeZone zone, double boundsX, double boundsY,\n\t\t\tdouble boundsWidth, double boundsHeight)", "class_method_signature": "StandardGISTreeSet.newNode(IcosepQuadTreeZone zone, double boundsX, double boundsY,\n\t\t\tdouble boundsWidth, double boundsHeight)", "testcase": false, "constructor": false}], "file": "advanced/gis/giscore/src/main/java/org/arakhne/afc/gis/tree/StandardGISTreeSet.java"}, "focal_method": {"identifier": "add", "parameters": "(P elt)", "modifiers": "@Override public final", "return": "boolean", "body": "@Override\n\tpublic final boolean add(P elt) {\n\t\treturn GISTreeSetUtil.addInside(this, getTree().getRoot(), elt, this);\n\t}", "signature": "boolean add(P elt)", "full_signature": "@Override public final boolean add(P elt)", "class_method_signature": "StandardGISTreeSet.add(P elt)", "testcase": false, "constructor": false, "invocations": ["addInside", "getRoot", "getTree"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}