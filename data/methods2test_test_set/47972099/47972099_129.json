{"test_class": {"identifier": "DualInputSemanticPropertiesTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-core/src/test/java/org/apache/flink/api/common/operators/DualInputSemanticPropertiesTest.java"}, "test_case": {"identifier": "testAddForwardedFieldsTargetTwice2", "parameters": "()", "modifiers": "@Test(expected = SemanticProperties.InvalidSemanticAnnotationException.class) public", "return": "void", "body": "@Test(expected = SemanticProperties.InvalidSemanticAnnotationException.class)\n\tpublic void testAddForwardedFieldsTargetTwice2() {\n\n\t\tDualInputSemanticProperties sp = new DualInputSemanticProperties();\n\t\tsp.addForwardedField(1, 0, 2);\n\t\tsp.addForwardedField(1, 1, 2);\n\t}", "signature": "void testAddForwardedFieldsTargetTwice2()", "full_signature": "@Test(expected = SemanticProperties.InvalidSemanticAnnotationException.class) public void testAddForwardedFieldsTargetTwice2()", "class_method_signature": "DualInputSemanticPropertiesTest.testAddForwardedFieldsTargetTwice2()", "testcase": true, "constructor": false, "invocations": ["addForwardedField", "addForwardedField"]}, "focal_class": {"identifier": "DualInputSemanticProperties", "superclass": "", "interfaces": "implements SemanticProperties", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private Map<Integer,FieldSet> fieldMapping1;", "modifier": "private", "type": "Map<Integer,FieldSet>", "declarator": "fieldMapping1", "var_name": "fieldMapping1"}, {"original_string": "private Map<Integer,FieldSet> fieldMapping2;", "modifier": "private", "type": "Map<Integer,FieldSet>", "declarator": "fieldMapping2", "var_name": "fieldMapping2"}, {"original_string": "private FieldSet readFields1;", "modifier": "private", "type": "FieldSet", "declarator": "readFields1", "var_name": "readFields1"}, {"original_string": "private FieldSet readFields2;", "modifier": "private", "type": "FieldSet", "declarator": "readFields2", "var_name": "readFields2"}], "methods": [{"identifier": "DualInputSemanticProperties", "parameters": "()", "modifiers": "public", "return": "", "signature": " DualInputSemanticProperties()", "full_signature": "public  DualInputSemanticProperties()", "class_method_signature": "DualInputSemanticProperties.DualInputSemanticProperties()", "testcase": false, "constructor": true}, {"identifier": "getForwardingTargetFields", "parameters": "(int input, int sourceField)", "modifiers": "@Override public", "return": "FieldSet", "signature": "FieldSet getForwardingTargetFields(int input, int sourceField)", "full_signature": "@Override public FieldSet getForwardingTargetFields(int input, int sourceField)", "class_method_signature": "DualInputSemanticProperties.getForwardingTargetFields(int input, int sourceField)", "testcase": false, "constructor": false}, {"identifier": "getForwardingSourceField", "parameters": "(int input, int targetField)", "modifiers": "@Override public", "return": "int", "signature": "int getForwardingSourceField(int input, int targetField)", "full_signature": "@Override public int getForwardingSourceField(int input, int targetField)", "class_method_signature": "DualInputSemanticProperties.getForwardingSourceField(int input, int targetField)", "testcase": false, "constructor": false}, {"identifier": "getReadFields", "parameters": "(int input)", "modifiers": "@Override public", "return": "FieldSet", "signature": "FieldSet getReadFields(int input)", "full_signature": "@Override public FieldSet getReadFields(int input)", "class_method_signature": "DualInputSemanticProperties.getReadFields(int input)", "testcase": false, "constructor": false}, {"identifier": "addForwardedField", "parameters": "(int input, int sourceField, int targetField)", "modifiers": "public", "return": "void", "signature": "void addForwardedField(int input, int sourceField, int targetField)", "full_signature": "public void addForwardedField(int input, int sourceField, int targetField)", "class_method_signature": "DualInputSemanticProperties.addForwardedField(int input, int sourceField, int targetField)", "testcase": false, "constructor": false}, {"identifier": "isTargetFieldPresent", "parameters": "(int targetField, Map<Integer, FieldSet> fieldMapping)", "modifiers": "private", "return": "boolean", "signature": "boolean isTargetFieldPresent(int targetField, Map<Integer, FieldSet> fieldMapping)", "full_signature": "private boolean isTargetFieldPresent(int targetField, Map<Integer, FieldSet> fieldMapping)", "class_method_signature": "DualInputSemanticProperties.isTargetFieldPresent(int targetField, Map<Integer, FieldSet> fieldMapping)", "testcase": false, "constructor": false}, {"identifier": "addReadFields", "parameters": "(int input, FieldSet readFields)", "modifiers": "public", "return": "void", "signature": "void addReadFields(int input, FieldSet readFields)", "full_signature": "public void addReadFields(int input, FieldSet readFields)", "class_method_signature": "DualInputSemanticProperties.addReadFields(int input, FieldSet readFields)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DualInputSemanticProperties.toString()", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/api/common/operators/DualInputSemanticProperties.java"}, "focal_method": {"identifier": "addForwardedField", "parameters": "(int input, int sourceField, int targetField)", "modifiers": "public", "return": "void", "body": "public void addForwardedField(int input, int sourceField, int targetField) {\n\n\t\tMap<Integer, FieldSet> fieldMapping;\n\n\t\tif (input != 0 && input != 1) {\n\t\t\tthrow new IndexOutOfBoundsException();\n\t\t} else if (input == 0) {\n\t\t\tfieldMapping = this.fieldMapping1;\n\t\t} else {\n\t\t\tfieldMapping = this.fieldMapping2;\n\t\t}\n\n\t\tif(isTargetFieldPresent(targetField, fieldMapping)) {\n\t\t\tthrow new InvalidSemanticAnnotationException(\"Target field \"+targetField+\" was added twice to input \"+input);\n\t\t}\n\n\t\tFieldSet targetFields = fieldMapping.get(sourceField);\n\t\tif (targetFields != null) {\n\t\t\tfieldMapping.put(sourceField, targetFields.addField(targetField));\n\t\t} else {\n\t\t\tfieldMapping.put(sourceField, new FieldSet(targetField));\n\t\t}\n\t}", "signature": "void addForwardedField(int input, int sourceField, int targetField)", "full_signature": "public void addForwardedField(int input, int sourceField, int targetField)", "class_method_signature": "DualInputSemanticProperties.addForwardedField(int input, int sourceField, int targetField)", "testcase": false, "constructor": false, "invocations": ["isTargetFieldPresent", "get", "put", "addField", "put"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}