{"test_class": {"identifier": "PlaceholderFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<String, String> HEADERS = new HashMap<>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "HEADERS = new HashMap<>()", "var_name": "HEADERS"}, {"original_string": "private static final String DEVICE_ID = \"device-12345\";", "modifier": "private static final", "type": "String", "declarator": "DEVICE_ID = \"device-12345\"", "var_name": "DEVICE_ID"}, {"original_string": "private static final ThingId THING_ID = ThingId.of(\"eclipse\", \"ditto\");", "modifier": "private static final", "type": "ThingId", "declarator": "THING_ID = ThingId.of(\"eclipse\", \"ditto\")", "var_name": "THING_ID"}, {"original_string": "private static final String KNOWN_NAMESPACE = \"org.eclipse.ditto.test\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_NAMESPACE = \"org.eclipse.ditto.test\"", "var_name": "KNOWN_NAMESPACE"}, {"original_string": "private static final String KNOWN_ID = \"myThing\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_ID = \"myThing\"", "var_name": "KNOWN_ID"}, {"original_string": "private static final String KNOWN_SUBJECT = \"mySubject\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_SUBJECT = \"mySubject\"", "var_name": "KNOWN_SUBJECT"}, {"original_string": "private static final String KNOWN_SUBJECT2 = \"$set.configuration/steps\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_SUBJECT2 = \"$set.configuration/steps\"", "var_name": "KNOWN_SUBJECT2"}, {"original_string": "private static final TopicPath KNOWN_TOPIC_PATH = TopicPath.newBuilder(ThingId.of(KNOWN_NAMESPACE, KNOWN_ID))\n            .twin().things().commands().modify().build();", "modifier": "private static final", "type": "TopicPath", "declarator": "KNOWN_TOPIC_PATH = TopicPath.newBuilder(ThingId.of(KNOWN_NAMESPACE, KNOWN_ID))\n            .twin().things().commands().modify().build()", "var_name": "KNOWN_TOPIC_PATH"}, {"original_string": "private static final TopicPath KNOWN_TOPIC_PATH_SUBJECT1 =\n            TopicPath.newBuilder(ThingId.of(KNOWN_NAMESPACE, KNOWN_ID))\n                    .live().things().messages().subject(KNOWN_SUBJECT).build();", "modifier": "private static final", "type": "TopicPath", "declarator": "KNOWN_TOPIC_PATH_SUBJECT1 =\n            TopicPath.newBuilder(ThingId.of(KNOWN_NAMESPACE, KNOWN_ID))\n                    .live().things().messages().subject(KNOWN_SUBJECT).build()", "var_name": "KNOWN_TOPIC_PATH_SUBJECT1"}, {"original_string": "private static final TopicPath KNOWN_TOPIC_PATH_SUBJECT2 =\n            TopicPath.newBuilder(ThingId.of(KNOWN_NAMESPACE, KNOWN_ID))\n                    .live().things().messages().subject(KNOWN_SUBJECT2).build();", "modifier": "private static final", "type": "TopicPath", "declarator": "KNOWN_TOPIC_PATH_SUBJECT2 =\n            TopicPath.newBuilder(ThingId.of(KNOWN_NAMESPACE, KNOWN_ID))\n                    .live().things().messages().subject(KNOWN_SUBJECT2).build()", "var_name": "KNOWN_TOPIC_PATH_SUBJECT2"}, {"original_string": "private static final HeadersPlaceholder headersPlaceholder = PlaceholderFactory.newHeadersPlaceholder();", "modifier": "private static final", "type": "HeadersPlaceholder", "declarator": "headersPlaceholder = PlaceholderFactory.newHeadersPlaceholder()", "var_name": "headersPlaceholder"}, {"original_string": "private static final ThingPlaceholder thingPlaceholder = PlaceholderFactory.newThingPlaceholder();", "modifier": "private static final", "type": "ThingPlaceholder", "declarator": "thingPlaceholder = PlaceholderFactory.newThingPlaceholder()", "var_name": "thingPlaceholder"}, {"original_string": "private static final TopicPathPlaceholder topicPlaceholder = PlaceholderFactory.newTopicPathPlaceholder();", "modifier": "private static final", "type": "TopicPathPlaceholder", "declarator": "topicPlaceholder = PlaceholderFactory.newTopicPathPlaceholder()", "var_name": "topicPlaceholder"}, {"original_string": "private static final PlaceholderResolver[] filterChain = new PlaceholderResolver[]{\n            PlaceholderFactory.newPlaceholderResolver(headersPlaceholder, HEADERS),\n            PlaceholderFactory.newPlaceholderResolver(thingPlaceholder, THING_ID)\n    };", "modifier": "private static final", "type": "PlaceholderResolver[]", "declarator": "filterChain = new PlaceholderResolver[]{\n            PlaceholderFactory.newPlaceholderResolver(headersPlaceholder, HEADERS),\n            PlaceholderFactory.newPlaceholderResolver(thingPlaceholder, THING_ID)\n    }", "var_name": "filterChain"}, {"original_string": "private static final Placeholder[] placeholders = new Placeholder[]{\n            headersPlaceholder,\n            thingPlaceholder\n    };", "modifier": "private static final", "type": "Placeholder[]", "declarator": "placeholders = new Placeholder[]{\n            headersPlaceholder,\n            thingPlaceholder\n    }", "var_name": "placeholders"}], "file": "model/placeholders/src/test/java/org/eclipse/ditto/model/placeholders/PlaceholderFilterTest.java"}, "test_case": {"identifier": "testValidateAndReplace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateAndReplace() {\n        final String replacement = UUID.randomUUID().toString();\n        // no whitespace\n        assertThat(PlaceholderFilter.validateAndReplace(\"{{thing:namespace}}/{{thing:name}}:{{header:device-id}}\",\n                replacement, placeholders))\n                .isEqualTo(String.format(\"%s/%s:%s\", replacement, replacement, replacement));\n\n        // multi whitespace\n        assertThat(PlaceholderFilter.validateAndReplace(\n                \"{{  thing:namespace  }}/{{  thing:name  }}:{{  header:device-id  }}\", replacement, placeholders))\n                .isEqualTo(String.format(\"%s/%s:%s\", replacement, replacement, replacement));\n\n        // mixed whitespace\n        assertThat(PlaceholderFilter.validateAndReplace(\"{{thing:namespace }}/{{  thing:name }}:{{header:device-id }}\",\n                replacement, placeholders))\n                .isEqualTo(String.format(\"%s/%s:%s\", replacement, replacement, replacement));\n\n        // no separators\n        assertThat(PlaceholderFilter.validateAndReplace(\"{{thing:namespace }}{{  thing:name }}{{header:device-id }}\",\n                replacement, placeholders))\n                .isEqualTo(String.format(\"%s%s%s\", replacement, replacement, replacement));\n\n        // whitespace separators\n        assertThat(\n                PlaceholderFilter.validateAndReplace(\"{{thing:namespace }}  {{  thing:name }}  {{header:device-id }}\",\n                        replacement, placeholders))\n                .isEqualTo(String.format(\"%s  %s  %s\", replacement, replacement, replacement));\n\n        // pre/postfix whitespace\n        assertThat(\n                PlaceholderFilter.validateAndReplace(\"  {{thing:namespace }}{{  thing:name }}{{header:device-id }}  \",\n                        replacement, placeholders))\n                .isEqualTo(String.format(\"  %s%s%s  \", replacement, replacement, replacement));\n\n        // pre/postfix\n        assertThat(PlaceholderFilter.validateAndReplace(\n                \"-----{{thing:namespace }}{{  thing:name }}{{header:device-id }}-----\", replacement, placeholders))\n                .isEqualTo(String.format(\"-----%s%s%s-----\", replacement, replacement, replacement));\n\n        // pre/postfix and separators\n        assertThat(PlaceholderFilter.validateAndReplace(\n                \"-----{{thing:namespace }}///{{  thing:name }}///{{header:device-id }}-----\", replacement,\n                placeholders))\n                .isEqualTo(String.format(\"-----%s///%s///%s-----\", replacement, replacement, replacement));\n    }", "signature": "void testValidateAndReplace()", "full_signature": "@Test public void testValidateAndReplace()", "class_method_signature": "PlaceholderFilterTest.testValidateAndReplace()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "isEqualTo", "assertThat", "validateAndReplace", "format", "isEqualTo", "assertThat", "validateAndReplace", "format", "isEqualTo", "assertThat", "validateAndReplace", "format", "isEqualTo", "assertThat", "validateAndReplace", "format", "isEqualTo", "assertThat", "validateAndReplace", "format", "isEqualTo", "assertThat", "validateAndReplace", "format", "isEqualTo", "assertThat", "validateAndReplace", "format", "isEqualTo", "assertThat", "validateAndReplace", "format"]}, "focal_class": {"identifier": "PlaceholderFilter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "applyHeadersPlaceholderToAuthContext", "parameters": "(\n            final AuthorizationContext authorizationContext,\n            final Map<String, String> headers)", "modifiers": "public static", "return": "AuthorizationContext", "signature": "AuthorizationContext applyHeadersPlaceholderToAuthContext(\n            final AuthorizationContext authorizationContext,\n            final Map<String, String> headers)", "full_signature": "public static AuthorizationContext applyHeadersPlaceholderToAuthContext(\n            final AuthorizationContext authorizationContext,\n            final Map<String, String> headers)", "class_method_signature": "PlaceholderFilter.applyHeadersPlaceholderToAuthContext(\n            final AuthorizationContext authorizationContext,\n            final Map<String, String> headers)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(final String template, final T placeholderSource, final Placeholder<T> placeholder)", "modifiers": "public static", "return": "String", "signature": "String apply(final String template, final T placeholderSource, final Placeholder<T> placeholder)", "full_signature": "public static String apply(final String template, final T placeholderSource, final Placeholder<T> placeholder)", "class_method_signature": "PlaceholderFilter.apply(final String template, final T placeholderSource, final Placeholder<T> placeholder)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(final String template, final ExpressionResolver expressionResolver)", "modifiers": "public static", "return": "String", "signature": "String apply(final String template, final ExpressionResolver expressionResolver)", "full_signature": "public static String apply(final String template, final ExpressionResolver expressionResolver)", "class_method_signature": "PlaceholderFilter.apply(final String template, final ExpressionResolver expressionResolver)", "testcase": false, "constructor": false}, {"identifier": "applyOrElseDelete", "parameters": "(final String template, final ExpressionResolver resolver)", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> applyOrElseDelete(final String template, final ExpressionResolver resolver)", "full_signature": "public static Optional<String> applyOrElseDelete(final String template, final ExpressionResolver resolver)", "class_method_signature": "PlaceholderFilter.applyOrElseDelete(final String template, final ExpressionResolver resolver)", "testcase": false, "constructor": false}, {"identifier": "applyOrElseRetain", "parameters": "(final String template, final ExpressionResolver resolver)", "modifiers": "public static", "return": "String", "signature": "String applyOrElseRetain(final String template, final ExpressionResolver resolver)", "full_signature": "public static String applyOrElseRetain(final String template, final ExpressionResolver resolver)", "class_method_signature": "PlaceholderFilter.applyOrElseRetain(final String template, final ExpressionResolver resolver)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(final String template, final Placeholder<?>... placeholders)", "modifiers": "public static", "return": "void", "signature": "void validate(final String template, final Placeholder<?>... placeholders)", "full_signature": "public static void validate(final String template, final Placeholder<?>... placeholders)", "class_method_signature": "PlaceholderFilter.validate(final String template, final Placeholder<?>... placeholders)", "testcase": false, "constructor": false}, {"identifier": "validateAndReplace", "parameters": "(final String template, final String stringUsedInPlaceholderReplacement,\n            final Placeholder<?>... placeholders)", "modifiers": "public static", "return": "String", "signature": "String validateAndReplace(final String template, final String stringUsedInPlaceholderReplacement,\n            final Placeholder<?>... placeholders)", "full_signature": "public static String validateAndReplace(final String template, final String stringUsedInPlaceholderReplacement,\n            final Placeholder<?>... placeholders)", "class_method_signature": "PlaceholderFilter.validateAndReplace(final String template, final String stringUsedInPlaceholderReplacement,\n            final Placeholder<?>... placeholders)", "testcase": false, "constructor": false}, {"identifier": "doApply", "parameters": "(final String template, final ExpressionResolver expressionResolver)", "modifiers": "private static", "return": "String", "signature": "String doApply(final String template, final ExpressionResolver expressionResolver)", "full_signature": "private static String doApply(final String template, final ExpressionResolver expressionResolver)", "class_method_signature": "PlaceholderFilter.doApply(final String template, final ExpressionResolver expressionResolver)", "testcase": false, "constructor": false}, {"identifier": "PlaceholderFilter", "parameters": "()", "modifiers": "private", "return": "", "signature": " PlaceholderFilter()", "full_signature": "private  PlaceholderFilter()", "class_method_signature": "PlaceholderFilter.PlaceholderFilter()", "testcase": false, "constructor": true}], "file": "model/placeholders/src/main/java/org/eclipse/ditto/model/placeholders/PlaceholderFilter.java"}, "focal_method": {"identifier": "validateAndReplace", "parameters": "(final String template, final String stringUsedInPlaceholderReplacement,\n            final Placeholder<?>... placeholders)", "modifiers": "public static", "return": "String", "body": "public static String validateAndReplace(final String template, final String stringUsedInPlaceholderReplacement,\n            final Placeholder<?>... placeholders) {\n        return doApply(template,\n                PlaceholderFactory.newExpressionResolverForValidation(stringUsedInPlaceholderReplacement, placeholders)\n        );\n    }", "signature": "String validateAndReplace(final String template, final String stringUsedInPlaceholderReplacement,\n            final Placeholder<?>... placeholders)", "full_signature": "public static String validateAndReplace(final String template, final String stringUsedInPlaceholderReplacement,\n            final Placeholder<?>... placeholders)", "class_method_signature": "PlaceholderFilter.validateAndReplace(final String template, final String stringUsedInPlaceholderReplacement,\n            final Placeholder<?>... placeholders)", "testcase": false, "constructor": false, "invocations": ["doApply", "newExpressionResolverForValidation"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}