{"test_class": {"identifier": "ClipProcessTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private SimpleFeatureSource fsMeters;", "modifier": "private", "type": "SimpleFeatureSource", "declarator": "fsMeters", "var_name": "fsMeters"}, {"original_string": "private SimpleFeatureSource fsDegrees;", "modifier": "private", "type": "SimpleFeatureSource", "declarator": "fsDegrees", "var_name": "fsDegrees"}, {"original_string": "private SimpleFeatureSource fsLines;", "modifier": "private", "type": "SimpleFeatureSource", "declarator": "fsLines", "var_name": "fsLines"}, {"original_string": "private SimpleFeatureSource fsCollinear;", "modifier": "private", "type": "SimpleFeatureSource", "declarator": "fsCollinear", "var_name": "fsCollinear"}, {"original_string": "private SimpleFeatureSource fsMultilines;", "modifier": "private", "type": "SimpleFeatureSource", "declarator": "fsMultilines", "var_name": "fsMultilines"}], "file": "modules/unsupported/process-feature/src/test/java/org/geotools/process/vector/ClipProcessTest.java"}, "test_case": {"identifier": "testService", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testService() throws Exception{\n        VectorProcessFactory factory = new VectorProcessFactory();\n        Set<Name> names = factory.getNames(); \n        assertFalse(names.isEmpty());\n        assertTrue(names.contains(new NameImpl(\"vec\", \"Clip\")));\n        \n        SimpleFeatureCollection features = fsLines.getFeatures();\n        \n\n        Map<String, Object> arguments= new HashMap<String, Object>();\n        arguments.put(\"features\", features);\n        arguments.put(\"clip\", new WKTReader().read(\"POLYGON((-10 -10, -10 10, 5000 10, 5000 -10, -10 -10))\"));\n        \n        Map<String, Object> output = factory.create(new NameImpl(\"vec\", \"Clip\")).execute(arguments, null);\n        SimpleFeatureCollection result=(SimpleFeatureCollection) output.get(\"result\");\n        assertEquals(1, result.size());\n       \n        \n    }", "signature": "void testService()", "full_signature": "@Test public void testService()", "class_method_signature": "ClipProcessTest.testService()", "testcase": true, "constructor": false, "invocations": ["getNames", "assertFalse", "isEmpty", "assertTrue", "contains", "getFeatures", "put", "put", "read", "execute", "create", "get", "assertEquals", "size"]}, "focal_class": {"identifier": "ClipProcess", "superclass": "", "interfaces": "implements VectorProcess", "fields": [{"original_string": "static final FilterFactory ff = CommonFactoryFinder.getFilterFactory(GeoTools.getDefaultHints());", "modifier": "static final", "type": "FilterFactory", "declarator": "ff = CommonFactoryFinder.getFilterFactory(GeoTools.getDefaultHints())", "var_name": "ff"}, {"original_string": "static final Logger LOGGER = Logging.getLogger(ClipProcess.class);", "modifier": "static final", "type": "Logger", "declarator": "LOGGER = Logging.getLogger(ClipProcess.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"clip\", description = \"Geometry to use for clipping (in same CRS as input features)\") Geometry clip,\n            @DescribeParameter(name = \"preserveZ\", min=0, description = \"Attempt to preserve Z values from the original geometry (interpolate value for new points)\") Boolean preserveZ)", "modifiers": "@DescribeResult(name = \"result\", description = \"Clipped feature collection\") public", "return": "SimpleFeatureCollection", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"clip\", description = \"Geometry to use for clipping (in same CRS as input features)\") Geometry clip,\n            @DescribeParameter(name = \"preserveZ\", min=0, description = \"Attempt to preserve Z values from the original geometry (interpolate value for new points)\") Boolean preserveZ)", "full_signature": "@DescribeResult(name = \"result\", description = \"Clipped feature collection\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"clip\", description = \"Geometry to use for clipping (in same CRS as input features)\") Geometry clip,\n            @DescribeParameter(name = \"preserveZ\", min=0, description = \"Attempt to preserve Z values from the original geometry (interpolate value for new points)\") Boolean preserveZ)", "class_method_signature": "ClipProcess.execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"clip\", description = \"Geometry to use for clipping (in same CRS as input features)\") Geometry clip,\n            @DescribeParameter(name = \"preserveZ\", min=0, description = \"Attempt to preserve Z values from the original geometry (interpolate value for new points)\") Boolean preserveZ)", "testcase": false, "constructor": false}], "file": "modules/unsupported/process-feature/src/main/java/org/geotools/process/vector/ClipProcess.java"}, "focal_method": {"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"clip\", description = \"Geometry to use for clipping (in same CRS as input features)\") Geometry clip,\n            @DescribeParameter(name = \"preserveZ\", min=0, description = \"Attempt to preserve Z values from the original geometry (interpolate value for new points)\") Boolean preserveZ)", "modifiers": "@DescribeResult(name = \"result\", description = \"Clipped feature collection\") public", "return": "SimpleFeatureCollection", "body": "@DescribeResult(name = \"result\", description = \"Clipped feature collection\")\n    public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"clip\", description = \"Geometry to use for clipping (in same CRS as input features)\") Geometry clip,\n            @DescribeParameter(name = \"preserveZ\", min=0, description = \"Attempt to preserve Z values from the original geometry (interpolate value for new points)\") Boolean preserveZ)\n            throws ProcessException {\n        // only get the geometries in the bbox of the clip\n        Envelope box = clip.getEnvelopeInternal();\n        String srs = null;\n        if(features.getSchema().getCoordinateReferenceSystem() != null) {\n            srs = CRS.toSRS(features.getSchema().getCoordinateReferenceSystem());\n        }\n        BBOX bboxFilter = ff.bbox(\"\", box.getMinX(), box.getMinY(), box.getMaxX(), box.getMaxY(), srs);\n        \n        // default value for preserve Z\n        if(preserveZ == null) {\n            preserveZ = false;\n        }\n        \n        // return dynamic collection clipping geometries on the fly\n        return new ClippingFeatureCollection(features.subCollection(bboxFilter), clip, preserveZ);\n    }", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"clip\", description = \"Geometry to use for clipping (in same CRS as input features)\") Geometry clip,\n            @DescribeParameter(name = \"preserveZ\", min=0, description = \"Attempt to preserve Z values from the original geometry (interpolate value for new points)\") Boolean preserveZ)", "full_signature": "@DescribeResult(name = \"result\", description = \"Clipped feature collection\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"clip\", description = \"Geometry to use for clipping (in same CRS as input features)\") Geometry clip,\n            @DescribeParameter(name = \"preserveZ\", min=0, description = \"Attempt to preserve Z values from the original geometry (interpolate value for new points)\") Boolean preserveZ)", "class_method_signature": "ClipProcess.execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"clip\", description = \"Geometry to use for clipping (in same CRS as input features)\") Geometry clip,\n            @DescribeParameter(name = \"preserveZ\", min=0, description = \"Attempt to preserve Z values from the original geometry (interpolate value for new points)\") Boolean preserveZ)", "testcase": false, "constructor": false, "invocations": ["getEnvelopeInternal", "getCoordinateReferenceSystem", "getSchema", "toSRS", "getCoordinateReferenceSystem", "getSchema", "bbox", "getMinX", "getMinY", "getMaxX", "getMaxY", "subCollection"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}