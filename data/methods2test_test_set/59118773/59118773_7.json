{"test_class": {"identifier": "ReleaseJsonImportTest", "superclass": "extends AbstractMongoTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ReleaseRepository releaseRepository;", "modifier": "@Autowired\n    private", "type": "ReleaseRepository", "declarator": "releaseRepository", "var_name": "releaseRepository"}], "file": "persistence-mongodb/src/test/java/org/devgateway/ocds/persistence/mongo/spring/json/ReleaseJsonImportTest.java"}, "test_case": {"identifier": "importObject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void importObject() throws Exception {\n        final String jsonRelease = \"{\\n\"\n                + \"    tag: [\\\"tender\\\"],\\n\"\n                + \"    planning: {\\n\"\n                + \"        budget: {\\n\"\n                + \"            description: \\\"budget desc...\\\",\\n\"\n                + \"            amount: {\\n\"\n                + \"                amount: 10000.0,\\n\"\n                + \"                currency: \\\"USD\\\"\\n\"\n                + \"            }\\n\"\n                + \"        }\\n\"\n                + \"    }\\n\"\n                + \"}\";\n        final JsonImport releaseJsonImport = new ReleaseJsonImport(releaseRepository, jsonRelease);\n        final Release release = (Release) releaseJsonImport.importObject();\n        final Release releaseById = releaseRepository.findById(release.getId()).get();\n\n        Assert.assertNotNull(\"Check if we have something in the database\", releaseById);\n        Assert.assertEquals(\"Check if the releases are the same\", release, releaseById);\n    }", "signature": "void importObject()", "full_signature": "@Test public void importObject()", "class_method_signature": "ReleaseJsonImportTest.importObject()", "testcase": true, "constructor": false, "invocations": ["importObject", "get", "findById", "getId", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "ReleaseJsonImport", "superclass": "", "interfaces": "implements JsonImport<Release>", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(ReleaseJsonImport.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ReleaseJsonImport.class)", "var_name": "logger"}, {"original_string": "private final ReleaseRepository releaseRepository;", "modifier": "private final", "type": "ReleaseRepository", "declarator": "releaseRepository", "var_name": "releaseRepository"}, {"original_string": "private final JsonToObject releaseJsonToObject;", "modifier": "private final", "type": "JsonToObject", "declarator": "releaseJsonToObject", "var_name": "releaseJsonToObject"}], "methods": [{"identifier": "ReleaseJsonImport", "parameters": "(final ReleaseRepository releaseRepository, final String releaseJsonToObject)", "modifiers": "public", "return": "", "signature": " ReleaseJsonImport(final ReleaseRepository releaseRepository, final String releaseJsonToObject)", "full_signature": "public  ReleaseJsonImport(final ReleaseRepository releaseRepository, final String releaseJsonToObject)", "class_method_signature": "ReleaseJsonImport.ReleaseJsonImport(final ReleaseRepository releaseRepository, final String releaseJsonToObject)", "testcase": false, "constructor": true}, {"identifier": "ReleaseJsonImport", "parameters": "(final ReleaseRepository releaseRepository, final File file)", "modifiers": "public", "return": "", "signature": " ReleaseJsonImport(final ReleaseRepository releaseRepository, final File file)", "full_signature": "public  ReleaseJsonImport(final ReleaseRepository releaseRepository, final File file)", "class_method_signature": "ReleaseJsonImport.ReleaseJsonImport(final ReleaseRepository releaseRepository, final File file)", "testcase": false, "constructor": true}, {"identifier": "importObject", "parameters": "()", "modifiers": "@Override public", "return": "Release", "signature": "Release importObject()", "full_signature": "@Override public Release importObject()", "class_method_signature": "ReleaseJsonImport.importObject()", "testcase": false, "constructor": false}, {"identifier": "logMessage", "parameters": "(final String message)", "modifiers": "@Override public", "return": "void", "signature": "void logMessage(final String message)", "full_signature": "@Override public void logMessage(final String message)", "class_method_signature": "ReleaseJsonImport.logMessage(final String message)", "testcase": false, "constructor": false}], "file": "persistence-mongodb/src/main/java/org/devgateway/ocds/persistence/mongo/spring/json/ReleaseJsonImport.java"}, "focal_method": {"identifier": "importObject", "parameters": "()", "modifiers": "@Override public", "return": "Release", "body": "@Override\n    public Release importObject() throws IOException {\n        Release release = (Release) releaseJsonToObject.toObject();\n        release = releaseRepository.save(release);\n\n        return release;\n    }", "signature": "Release importObject()", "full_signature": "@Override public Release importObject()", "class_method_signature": "ReleaseJsonImport.importObject()", "testcase": false, "constructor": false, "invocations": ["toObject", "save"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}