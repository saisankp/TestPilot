{"test_class": {"identifier": "EdmxDetectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/detect/breakout/algo/edmx/EdmxDetectorTest.java"}, "test_case": {"identifier": "testDetect_whiteNoiseWithBreakout", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDetect_whiteNoiseWithBreakout() throws Exception {\n        val bufferSize = 20;\n\n        val hyperparams = new EdmxHyperparams()\n                .setBufferSize(bufferSize)\n                .setDelta(6)\n                .setNumPerms(199)\n                .setStrongAlpha(0.01)\n                .setWeakAlpha(0.05);\n        val trusted = true;\n        val detectorUnderTest = new EdmxDetector(UUID.randomUUID(), hyperparams, trusted);\n\n        val metricDef = TestObjectMother.metricDefinition();\n        val is = ClassLoader.getSystemResourceAsStream(\"datasets/white-noise-with-breakout-at-row-600.csv\");\n        val metricFrame = MetricFrameLoader.loadCsv(metricDef, is, false);\n        val metricDataList = metricFrame.getMetricData();\n\n        for (int i = 0; i < 700; i++) {\n            val metricData = metricDataList.get(i);\n            val result = (EdmxDetectorResult) detectorUnderTest.detect(metricData);\n            log.trace(\"row={}: {}\", i + 1, result);\n            assertEquals(i < bufferSize - 1, result.isWarmup());\n        }\n    }", "signature": "void testDetect_whiteNoiseWithBreakout()", "full_signature": "@Test public void testDetect_whiteNoiseWithBreakout()", "class_method_signature": "EdmxDetectorTest.testDetect_whiteNoiseWithBreakout()", "testcase": true, "constructor": false, "invocations": ["setWeakAlpha", "setStrongAlpha", "setNumPerms", "setDelta", "setBufferSize", "randomUUID", "metricDefinition", "getSystemResourceAsStream", "loadCsv", "getMetricData", "get", "detect", "trace", "assertEquals", "isWarmup"]}, "focal_class": {"identifier": "EdmxDetector", "superclass": "", "interfaces": "implements BreakoutDetector", "fields": [{"original_string": "private final String NAME = \"edmx\";", "modifier": "private final", "type": "String", "declarator": "NAME = \"edmx\"", "var_name": "NAME"}, {"original_string": "@Getter\n    private UUID uuid;", "modifier": "@Getter\n    private", "type": "UUID", "declarator": "uuid", "var_name": "uuid"}, {"original_string": "@Getter\n    private boolean trusted;", "modifier": "@Getter\n    private", "type": "boolean", "declarator": "trusted", "var_name": "trusted"}, {"original_string": "@Getter\n    private EdmxHyperparams hyperparams;", "modifier": "@Getter\n    private", "type": "EdmxHyperparams", "declarator": "hyperparams", "var_name": "hyperparams"}, {"original_string": "private final EvictingQueue<MetricData> buffer;", "modifier": "private final", "type": "EvictingQueue<MetricData>", "declarator": "buffer", "var_name": "buffer"}], "methods": [{"identifier": "EdmxDetector", "parameters": "(UUID uuid, EdmxHyperparams hyperparams, boolean trusted)", "modifiers": "public", "return": "", "signature": " EdmxDetector(UUID uuid, EdmxHyperparams hyperparams, boolean trusted)", "full_signature": "public  EdmxDetector(UUID uuid, EdmxHyperparams hyperparams, boolean trusted)", "class_method_signature": "EdmxDetector.EdmxDetector(UUID uuid, EdmxHyperparams hyperparams, boolean trusted)", "testcase": false, "constructor": true}, {"identifier": "detect", "parameters": "(MetricData metricData)", "modifiers": "@Override public", "return": "DetectorResult", "signature": "DetectorResult detect(MetricData metricData)", "full_signature": "@Override public DetectorResult detect(MetricData metricData)", "class_method_signature": "EdmxDetector.detect(MetricData metricData)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "EdmxDetector.getName()", "testcase": false, "constructor": false}, {"identifier": "calculateAnomalyLevel", "parameters": "(EdmxEstimate estimate)", "modifiers": "private", "return": "AnomalyLevel", "signature": "AnomalyLevel calculateAnomalyLevel(EdmxEstimate estimate)", "full_signature": "private AnomalyLevel calculateAnomalyLevel(EdmxEstimate estimate)", "class_method_signature": "EdmxDetector.calculateAnomalyLevel(EdmxEstimate estimate)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/detect/breakout/algo/edmx/EdmxDetector.java"}, "focal_method": {"identifier": "detect", "parameters": "(MetricData metricData)", "modifiers": "@Override public", "return": "DetectorResult", "body": "@Override\n    public DetectorResult detect(MetricData metricData) {\n        notNull(metricData, \"metricData can't be null\");\n        buffer.add(metricData);\n\n        val warmup = buffer.remainingCapacity() > 0;\n        val result = new EdmxDetectorResult().setWarmup(warmup);\n        val trusted = isTrusted();\n\n        if (warmup) {\n            log.info(\"EdmxDetector warming up: uuid={}, size={}, toGo={}, metricData={}\",\n                    uuid, buffer.size(), buffer.remainingCapacity(), metricData);\n            return result;\n        }\n\n        val mdValues = buffer.stream().mapToDouble(md -> md.getValue()).toArray();\n        val estimate = EdmxEstimator.estimate(\n                mdValues,\n                hyperparams.getDelta(),\n                hyperparams.getNumPerms());\n\n        val mdList = buffer.stream().collect(Collectors.toList());\n        val location = estimate.getLocation();\n\n        if (location == -1) {\n            return result;\n        }\n\n        val epochSeconds = mdList.get(location).getTimestamp();\n        val instant = epochSecondToInstant(epochSeconds);\n        val anomalyLevel = calculateAnomalyLevel(estimate);\n\n        return result\n                .setTimestamp(instant)\n                .setEdmxEstimate(estimate)\n                .setAnomalyLevel(anomalyLevel)\n                .setTrusted(trusted);\n    }", "signature": "DetectorResult detect(MetricData metricData)", "full_signature": "@Override public DetectorResult detect(MetricData metricData)", "class_method_signature": "EdmxDetector.detect(MetricData metricData)", "testcase": false, "constructor": false, "invocations": ["notNull", "add", "remainingCapacity", "setWarmup", "isTrusted", "info", "size", "remainingCapacity", "toArray", "mapToDouble", "stream", "getValue", "estimate", "getDelta", "getNumPerms", "collect", "stream", "toList", "getLocation", "getTimestamp", "get", "epochSecondToInstant", "calculateAnomalyLevel", "setTrusted", "setAnomalyLevel", "setEdmxEstimate", "setTimestamp"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}