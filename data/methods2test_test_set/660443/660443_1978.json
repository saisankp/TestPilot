{"test_class": {"identifier": "BeamToCDKTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private final", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "private final BeamToCDK          g2c     = new BeamToCDK(builder);", "modifier": "private final", "type": "BeamToCDK", "declarator": "g2c     = new BeamToCDK(builder)", "var_name": "g2c"}], "file": "storage/smiles/src/test/java/org/openscience/cdk/smiles/BeamToCDKTest.java"}, "test_case": {"identifier": "newUnknownAtom", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void newUnknownAtom() {\n        IAtom a = g2c.newCDKAtom(AtomBuilder.aliphatic(Element.Unknown).build());\n        assertThat(a, is(instanceOf(IPseudoAtom.class)));\n        assertThat(((IPseudoAtom) a).getLabel(), is(\"*\"));\n    }", "signature": "void newUnknownAtom()", "full_signature": "@Test public void newUnknownAtom()", "class_method_signature": "BeamToCDKTest.newUnknownAtom()", "testcase": true, "constructor": false, "invocations": ["newCDKAtom", "build", "aliphatic", "assertThat", "is", "instanceOf", "assertThat", "getLabel", "is"]}, "focal_class": {"identifier": "BeamToCDK", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final IChemObjectBuilder builder;", "modifier": "private final", "type": "IChemObjectBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private final IAtom              templateAtom;", "modifier": "private final", "type": "IAtom", "declarator": "templateAtom", "var_name": "templateAtom"}, {"original_string": "private final IBond              templateBond;", "modifier": "private final", "type": "IBond", "declarator": "templateBond", "var_name": "templateBond"}, {"original_string": "private final IAtomContainer     emptyContainer;", "modifier": "private final", "type": "IAtomContainer", "declarator": "emptyContainer", "var_name": "emptyContainer"}], "methods": [{"identifier": "BeamToCDK", "parameters": "(IChemObjectBuilder builder)", "modifiers": "", "return": "", "signature": " BeamToCDK(IChemObjectBuilder builder)", "full_signature": "  BeamToCDK(IChemObjectBuilder builder)", "class_method_signature": "BeamToCDK.BeamToCDK(IChemObjectBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "toAtomContainer", "parameters": "(Graph g, boolean kekule)", "modifiers": "", "return": "IAtomContainer", "signature": "IAtomContainer toAtomContainer(Graph g, boolean kekule)", "full_signature": " IAtomContainer toAtomContainer(Graph g, boolean kekule)", "class_method_signature": "BeamToCDK.toAtomContainer(Graph g, boolean kekule)", "testcase": false, "constructor": false}, {"identifier": "findCumulatedEdge", "parameters": "(Graph g, int v, Edge e)", "modifiers": "private", "return": "Edge", "signature": "Edge findCumulatedEdge(Graph g, int v, Edge e)", "full_signature": "private Edge findCumulatedEdge(Graph g, int v, Edge e)", "class_method_signature": "BeamToCDK.findCumulatedEdge(Graph g, int v, Edge e)", "testcase": false, "constructor": false}, {"identifier": "addDoubleBondStereochemistry", "parameters": "(Graph g, IAtomContainer ac)", "modifiers": "private", "return": "void", "signature": "void addDoubleBondStereochemistry(Graph g, IAtomContainer ac)", "full_signature": "private void addDoubleBondStereochemistry(Graph g, IAtomContainer ac)", "class_method_signature": "BeamToCDK.addDoubleBondStereochemistry(Graph g, IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "findDirectionalEdge", "parameters": "(Graph g, int u)", "modifiers": "private", "return": "Edge", "signature": "Edge findDirectionalEdge(Graph g, int u)", "full_signature": "private Edge findDirectionalEdge(Graph g, int u)", "class_method_signature": "BeamToCDK.findDirectionalEdge(Graph g, int u)", "testcase": false, "constructor": false}, {"identifier": "newTetrahedral", "parameters": "(int u, int[] vs, IAtom[] atoms, Configuration c)", "modifiers": "private", "return": "IStereoElement", "signature": "IStereoElement newTetrahedral(int u, int[] vs, IAtom[] atoms, Configuration c)", "full_signature": "private IStereoElement newTetrahedral(int u, int[] vs, IAtom[] atoms, Configuration c)", "class_method_signature": "BeamToCDK.newTetrahedral(int u, int[] vs, IAtom[] atoms, Configuration c)", "testcase": false, "constructor": false}, {"identifier": "newSquarePlanar", "parameters": "(int u, int[] vs, IAtom[] atoms, Configuration c)", "modifiers": "private", "return": "IStereoElement", "signature": "IStereoElement newSquarePlanar(int u, int[] vs, IAtom[] atoms, Configuration c)", "full_signature": "private IStereoElement newSquarePlanar(int u, int[] vs, IAtom[] atoms, Configuration c)", "class_method_signature": "BeamToCDK.newSquarePlanar(int u, int[] vs, IAtom[] atoms, Configuration c)", "testcase": false, "constructor": false}, {"identifier": "newTrigonalBipyramidal", "parameters": "(int u, int[] vs, IAtom[] atoms, Configuration c)", "modifiers": "private", "return": "IStereoElement", "signature": "IStereoElement newTrigonalBipyramidal(int u, int[] vs, IAtom[] atoms, Configuration c)", "full_signature": "private IStereoElement newTrigonalBipyramidal(int u, int[] vs, IAtom[] atoms, Configuration c)", "class_method_signature": "BeamToCDK.newTrigonalBipyramidal(int u, int[] vs, IAtom[] atoms, Configuration c)", "testcase": false, "constructor": false}, {"identifier": "newOctahedral", "parameters": "(int u, int[] vs, IAtom[] atoms, Configuration c)", "modifiers": "private", "return": "IStereoElement", "signature": "IStereoElement newOctahedral(int u, int[] vs, IAtom[] atoms, Configuration c)", "full_signature": "private IStereoElement newOctahedral(int u, int[] vs, IAtom[] atoms, Configuration c)", "class_method_signature": "BeamToCDK.newOctahedral(int u, int[] vs, IAtom[] atoms, Configuration c)", "testcase": false, "constructor": false}, {"identifier": "getOtherDb", "parameters": "(Graph g, int u, int v)", "modifiers": "private", "return": "int", "signature": "int getOtherDb(Graph g, int u, int v)", "full_signature": "private int getOtherDb(Graph g, int u, int v)", "class_method_signature": "BeamToCDK.getOtherDb(Graph g, int u, int v)", "testcase": false, "constructor": false}, {"identifier": "findExtendedTetrahedralEnds", "parameters": "(Graph g, int focus)", "modifiers": "private", "return": "int[]", "signature": "int[] findExtendedTetrahedralEnds(Graph g, int focus)", "full_signature": "private int[] findExtendedTetrahedralEnds(Graph g, int focus)", "class_method_signature": "BeamToCDK.findExtendedTetrahedralEnds(Graph g, int focus)", "testcase": false, "constructor": false}, {"identifier": "newExtendedTetrahedral", "parameters": "(int u, Graph g, IAtom[] atoms)", "modifiers": "private", "return": "IStereoElement", "signature": "IStereoElement newExtendedTetrahedral(int u, Graph g, IAtom[] atoms)", "full_signature": "private IStereoElement newExtendedTetrahedral(int u, Graph g, IAtom[] atoms)", "class_method_signature": "BeamToCDK.newExtendedTetrahedral(int u, Graph g, IAtom[] atoms)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(int v, int[] vs)", "modifiers": "private static", "return": "int[]", "signature": "int[] insert(int v, int[] vs)", "full_signature": "private static int[] insert(int v, int[] vs)", "class_method_signature": "BeamToCDK.insert(int v, int[] vs)", "testcase": false, "constructor": false}, {"identifier": "toCDKAtom", "parameters": "(Atom beamAtom, int hCount)", "modifiers": "", "return": "IAtom", "signature": "IAtom toCDKAtom(Atom beamAtom, int hCount)", "full_signature": " IAtom toCDKAtom(Atom beamAtom, int hCount)", "class_method_signature": "BeamToCDK.toCDKAtom(Atom beamAtom, int hCount)", "testcase": false, "constructor": false}, {"identifier": "newCDKAtom", "parameters": "(Atom atom)", "modifiers": "", "return": "IAtom", "signature": "IAtom newCDKAtom(Atom atom)", "full_signature": " IAtom newCDKAtom(Atom atom)", "class_method_signature": "BeamToCDK.newCDKAtom(Atom atom)", "testcase": false, "constructor": false}, {"identifier": "emptyContainer", "parameters": "()", "modifiers": "private", "return": "IAtomContainer", "signature": "IAtomContainer emptyContainer()", "full_signature": "private IAtomContainer emptyContainer()", "class_method_signature": "BeamToCDK.emptyContainer()", "testcase": false, "constructor": false}, {"identifier": "createAtom", "parameters": "(Element element)", "modifiers": "private", "return": "IAtom", "signature": "IAtom createAtom(Element element)", "full_signature": "private IAtom createAtom(Element element)", "class_method_signature": "BeamToCDK.createAtom(Element element)", "testcase": false, "constructor": false}], "file": "storage/smiles/src/main/java/org/openscience/cdk/smiles/BeamToCDK.java"}, "focal_method": {"identifier": "newCDKAtom", "parameters": "(Atom atom)", "modifiers": "", "return": "IAtom", "body": "IAtom newCDKAtom(Atom atom) {\n        Element element = atom.element();\n        boolean unknown = element == Element.Unknown;\n        if (unknown) {\n            IPseudoAtom pseudoAtom = builder.newInstance(IPseudoAtom.class, element.symbol());\n            pseudoAtom.setSymbol(element.symbol());\n            pseudoAtom.setLabel(atom.label());\n            return pseudoAtom;\n        }\n        return createAtom(element);\n    }", "signature": "IAtom newCDKAtom(Atom atom)", "full_signature": " IAtom newCDKAtom(Atom atom)", "class_method_signature": "BeamToCDK.newCDKAtom(Atom atom)", "testcase": false, "constructor": false, "invocations": ["element", "newInstance", "symbol", "setSymbol", "symbol", "setLabel", "label", "createAtom"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}