{"test_class": {"identifier": "BundleConditionTest", "superclass": "", "interfaces": "", "fields": [], "file": "lib/src/test/java/com/busybusy/dbc/conditions/BundleConditionTest.java"}, "test_case": {"identifier": "valueIsOfType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void valueIsOfType() throws Exception\n\t{\n\t\tBundle subject = new Bundle();\n\t\tsubject.putString(\"KEY\", \"VALUE\");\n\n\t\tBundleCondition condition = new BundleCondition(subject);\n\t\tcondition.valueIsOfType(\"KEY\", String.class);\n\n\t\tAssertions.assertThatThrownBy(() -> condition.valueIsOfType(\"KEY\", Integer.class))\n\t\t          .isInstanceOf(DbcAssertionError.class)\n\t\t          .hasCauseInstanceOf(IllegalStateException.class);\n\t}", "signature": "void valueIsOfType()", "full_signature": "@Test public void valueIsOfType()", "class_method_signature": "BundleConditionTest.valueIsOfType()", "testcase": true, "constructor": false, "invocations": ["putString", "valueIsOfType", "hasCauseInstanceOf", "isInstanceOf", "assertThatThrownBy", "valueIsOfType"]}, "focal_class": {"identifier": "BundleCondition", "superclass": "extends BasicCondition<Bundle, BundleCondition>", "interfaces": "implements BundleChecks<BundleCondition>", "fields": [], "methods": [{"identifier": "BundleCondition", "parameters": "(Bundle subject)", "modifiers": "public", "return": "", "signature": " BundleCondition(Bundle subject)", "full_signature": "public  BundleCondition(Bundle subject)", "class_method_signature": "BundleCondition.BundleCondition(Bundle subject)", "testcase": false, "constructor": true}, {"identifier": "containsKey", "parameters": "(@NonNull String key)", "modifiers": "@NonNull @Override public", "return": "BundleCondition", "signature": "BundleCondition containsKey(@NonNull String key)", "full_signature": "@NonNull @Override public BundleCondition containsKey(@NonNull String key)", "class_method_signature": "BundleCondition.containsKey(@NonNull String key)", "testcase": false, "constructor": false}, {"identifier": "valueIsOfType", "parameters": "(@NonNull String key, @NonNull Class<?> type)", "modifiers": "@NonNull @Override public", "return": "BundleCondition", "signature": "BundleCondition valueIsOfType(@NonNull String key, @NonNull Class<?> type)", "full_signature": "@NonNull @Override public BundleCondition valueIsOfType(@NonNull String key, @NonNull Class<?> type)", "class_method_signature": "BundleCondition.valueIsOfType(@NonNull String key, @NonNull Class<?> type)", "testcase": false, "constructor": false}], "file": "lib/src/main/java/com/busybusy/dbc/conditions/BundleCondition.java"}, "focal_method": {"identifier": "valueIsOfType", "parameters": "(@NonNull String key, @NonNull Class<?> type)", "modifiers": "@NonNull @Override public", "return": "BundleCondition", "body": "@NonNull\n\t@Override\n\tpublic BundleCondition valueIsOfType(@NonNull String key, @NonNull Class<?> type)\n\t{\n\t\trequire(subject).containsKey(key);\n\n\t\tObject intermediateSubject = subject.get(key);\n\t\tcheck(intermediateSubject).isNotNull();\n\n\t\t//noinspection ConstantConditions\n\t\tif (!type.isAssignableFrom(intermediateSubject.getClass()))\n\t\t{\n\t\t\tDbcAssertionError.throwNew(new IllegalStateException(\"Expected bundle to contain value of type <\" + type + \"> with key <\" + key + \">\"), this.message);\n\t\t}\n\n\t\treturn result();\n\t}", "signature": "BundleCondition valueIsOfType(@NonNull String key, @NonNull Class<?> type)", "full_signature": "@NonNull @Override public BundleCondition valueIsOfType(@NonNull String key, @NonNull Class<?> type)", "class_method_signature": "BundleCondition.valueIsOfType(@NonNull String key, @NonNull Class<?> type)", "testcase": false, "constructor": false, "invocations": ["containsKey", "require", "get", "isNotNull", "check", "isAssignableFrom", "getClass", "throwNew", "result"]}, "repository": {"repo_id": 61247013, "url": "https://github.com/busybusy/DBC-Android", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 203, "license": "licensed"}}