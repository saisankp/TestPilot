{"test_class": {"identifier": "JmxRequestFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProcessingParameters procParams;", "modifier": "private", "type": "ProcessingParameters", "declarator": "procParams", "var_name": "procParams"}], "file": "agent/core/src/test/java/org/jolokia/request/JmxRequestFactoryTest.java"}, "test_case": {"identifier": "simplePostWithMergedMaps", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void simplePostWithMergedMaps() {\n        Map config = new HashMap();\n        config.put(\"maxDepth\",\"10\");\n        Map<String,Object> reqMap = createMap(\n                \"type\",\"read\",\n                \"mbean\",\"java.lang:type=Memory\",\n                \"attribute\",\"HeapMemoryUsage\",\n                \"config\",config);\n        Map param = new HashMap();;\n        param.put(\"maxObjects\",\"100\");\n        JmxReadRequest req = (JmxReadRequest) JmxRequestFactory.createPostRequest(reqMap,new Configuration().getProcessingParameters(param));\n        assertEquals(req.getAttributeName(),\"HeapMemoryUsage\");\n        assertEquals(req.getParameter(ConfigKey.MAX_DEPTH),\"10\");\n        assertEquals(req.getParameterAsInt(ConfigKey.MAX_OBJECTS), 100);\n    }", "signature": "void simplePostWithMergedMaps()", "full_signature": "@Test public void simplePostWithMergedMaps()", "class_method_signature": "JmxRequestFactoryTest.simplePostWithMergedMaps()", "testcase": true, "constructor": false, "invocations": ["put", "createMap", "put", "createPostRequest", "getProcessingParameters", "assertEquals", "getAttributeName", "assertEquals", "getParameter", "assertEquals", "getParameterAsInt"]}, "focal_class": {"identifier": "JmxRequestFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<RequestType,RequestCreator> CREATOR_MAP;", "modifier": "private static final", "type": "Map<RequestType,RequestCreator>", "declarator": "CREATOR_MAP", "var_name": "CREATOR_MAP"}], "methods": [{"identifier": "JmxRequestFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " JmxRequestFactory()", "full_signature": "private  JmxRequestFactory()", "class_method_signature": "JmxRequestFactory.JmxRequestFactory()", "testcase": false, "constructor": true}, {"identifier": "createGetRequest", "parameters": "(String pPathInfo, ProcessingParameters pProcessingParameters)", "modifiers": "public static", "return": "R", "signature": "R createGetRequest(String pPathInfo, ProcessingParameters pProcessingParameters)", "full_signature": "public static R createGetRequest(String pPathInfo, ProcessingParameters pProcessingParameters)", "class_method_signature": "JmxRequestFactory.createGetRequest(String pPathInfo, ProcessingParameters pProcessingParameters)", "testcase": false, "constructor": false}, {"identifier": "createPostRequest", "parameters": "(Map<String, ?> pRequestMap, ProcessingParameters pProcessingParams)", "modifiers": "public static", "return": "R", "signature": "R createPostRequest(Map<String, ?> pRequestMap, ProcessingParameters pProcessingParams)", "full_signature": "public static R createPostRequest(Map<String, ?> pRequestMap, ProcessingParameters pProcessingParams)", "class_method_signature": "JmxRequestFactory.createPostRequest(Map<String, ?> pRequestMap, ProcessingParameters pProcessingParams)", "testcase": false, "constructor": false}, {"identifier": "createPostRequests", "parameters": "(List pJsonRequests, ProcessingParameters pProcessingParams)", "modifiers": "public static", "return": "List<JmxRequest>", "signature": "List<JmxRequest> createPostRequests(List pJsonRequests, ProcessingParameters pProcessingParams)", "full_signature": "public static List<JmxRequest> createPostRequests(List pJsonRequests, ProcessingParameters pProcessingParams)", "class_method_signature": "JmxRequestFactory.createPostRequests(List pJsonRequests, ProcessingParameters pProcessingParams)", "testcase": false, "constructor": false}, {"identifier": "extractPathInfo", "parameters": "(String pPathInfo, ProcessingParameters pProcessingParams)", "modifiers": "private static", "return": "String", "signature": "String extractPathInfo(String pPathInfo, ProcessingParameters pProcessingParams)", "full_signature": "private static String extractPathInfo(String pPathInfo, ProcessingParameters pProcessingParams)", "class_method_signature": "JmxRequestFactory.extractPathInfo(String pPathInfo, ProcessingParameters pProcessingParams)", "testcase": false, "constructor": false}, {"identifier": "normalizePathInfo", "parameters": "(String pPathInfo)", "modifiers": "private static", "return": "String", "signature": "String normalizePathInfo(String pPathInfo)", "full_signature": "private static String normalizePathInfo(String pPathInfo)", "class_method_signature": "JmxRequestFactory.normalizePathInfo(String pPathInfo)", "testcase": false, "constructor": false}, {"identifier": "getCreator", "parameters": "(RequestType pType)", "modifiers": "private static", "return": "RequestCreator", "signature": "RequestCreator getCreator(RequestType pType)", "full_signature": "private static RequestCreator getCreator(RequestType pType)", "class_method_signature": "JmxRequestFactory.getCreator(RequestType pType)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/request/JmxRequestFactory.java"}, "focal_method": {"identifier": "createPostRequest", "parameters": "(Map<String, ?> pRequestMap, ProcessingParameters pProcessingParams)", "modifiers": "public static", "return": "R", "body": "public static <R extends JmxRequest> R createPostRequest(Map<String, ?> pRequestMap, ProcessingParameters pProcessingParams) {\n        try {\n            ProcessingParameters paramsMerged = pProcessingParams.mergedParams((Map<String,String>) pRequestMap.get(\"config\"));\n            RequestType type = RequestType.getTypeByName((String) pRequestMap.get(\"type\"));\n            return (R) getCreator(type).create(pRequestMap, paramsMerged);\n        } catch (MalformedObjectNameException e) {\n            throw new IllegalArgumentException(\"Invalid object name. \" + e.getMessage(),e);\n        }\n    }", "signature": "R createPostRequest(Map<String, ?> pRequestMap, ProcessingParameters pProcessingParams)", "full_signature": "public static R createPostRequest(Map<String, ?> pRequestMap, ProcessingParameters pProcessingParams)", "class_method_signature": "JmxRequestFactory.createPostRequest(Map<String, ?> pRequestMap, ProcessingParameters pProcessingParams)", "testcase": false, "constructor": false, "invocations": ["mergedParams", "get", "getTypeByName", "get", "create", "getCreator", "getMessage"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}