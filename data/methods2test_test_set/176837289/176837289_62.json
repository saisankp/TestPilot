{"test_class": {"identifier": "CloudDatastoreBackendTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/extensions/database/cloud-datastore/src/test/java/com/google/cloud/broker/database/backends/CloudDatastoreBackendTest.java"}, "test_case": {"identifier": "testGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGet() throws DatabaseObjectNotFound {\n        // Create a record in the database\n        Datastore datastore = getService();\n        KeyFactory keyFactory = datastore.newKeyFactory().setKind(\"Foo\");\n        Key key = keyFactory.newKey(\"myid\");\n        Entity.Builder builder = Entity.newBuilder(key);\n        builder.set(\"longVal\", 1564094282994L);\n        builder.set(\"byteVal\", Blob.copyFrom(\"abcd\".getBytes()));\n        builder.set(\"stringList\", \"hello\", \"hi\");\n        Entity entity = builder.build();\n        datastore.put(entity);\n\n        // Check that the record is correctly retrieved\n        CloudDatastoreBackend backend = new CloudDatastoreBackend();\n        Foo foo = (Foo) backend.get(Foo.class, \"myid\");\n        assertEquals(\"myid\", foo.getId());\n        assertEquals(1564094282994L, foo.getLongVal().longValue());\n        assertArrayEquals(\"abcd\".getBytes(), foo.getByteVal());\n        assertEquals(List.of(\"hello\", \"hi\"), foo.getStringList());\n    }", "signature": "void testGet()", "full_signature": "@Test public void testGet()", "class_method_signature": "CloudDatastoreBackendTest.testGet()", "testcase": true, "constructor": false, "invocations": ["getService", "setKind", "newKeyFactory", "newKey", "newBuilder", "set", "set", "copyFrom", "getBytes", "set", "build", "put", "get", "assertEquals", "getId", "assertEquals", "longValue", "getLongVal", "assertArrayEquals", "getBytes", "getByteVal", "assertEquals", "of", "getStringList"]}, "focal_class": {"identifier": "CloudDatastoreBackend", "superclass": "extends AbstractDatabaseBackend", "interfaces": "", "fields": [], "methods": [{"identifier": "getService", "parameters": "()", "modifiers": "private", "return": "Datastore", "signature": "Datastore getService()", "full_signature": "private Datastore getService()", "class_method_signature": "CloudDatastoreBackend.getService()", "testcase": false, "constructor": false}, {"identifier": "convertEntityToModel", "parameters": "(Entity entity, Class modelClass)", "modifiers": "private", "return": "Model", "signature": "Model convertEntityToModel(Entity entity, Class modelClass)", "full_signature": "private Model convertEntityToModel(Entity entity, Class modelClass)", "class_method_signature": "CloudDatastoreBackend.convertEntityToModel(Entity entity, Class modelClass)", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "(Class modelClass)", "modifiers": "@Override public", "return": "List<Model>", "signature": "List<Model> getAll(Class modelClass)", "full_signature": "@Override public List<Model> getAll(Class modelClass)", "class_method_signature": "CloudDatastoreBackend.getAll(Class modelClass)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Class modelClass, String objectId)", "modifiers": "@Override public", "return": "Model", "signature": "Model get(Class modelClass, String objectId)", "full_signature": "@Override public Model get(Class modelClass, String objectId)", "class_method_signature": "CloudDatastoreBackend.get(Class modelClass, String objectId)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Model model)", "modifiers": "public", "return": "void", "signature": "void save(Model model)", "full_signature": "public void save(Model model)", "class_method_signature": "CloudDatastoreBackend.save(Model model)", "testcase": false, "constructor": false}, {"identifier": "objectToValue", "parameters": "(Object object)", "modifiers": "private", "return": "Value<?>", "signature": "Value<?> objectToValue(Object object)", "full_signature": "private Value<?> objectToValue(Object object)", "class_method_signature": "CloudDatastoreBackend.objectToValue(Object object)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Model model)", "modifiers": "@Override public", "return": "void", "signature": "void delete(Model model)", "full_signature": "@Override public void delete(Model model)", "class_method_signature": "CloudDatastoreBackend.delete(Model model)", "testcase": false, "constructor": false}, {"identifier": "deleteExpiredItems", "parameters": "(Class modelClass, String field, Long cutoffTime, Integer numItems)", "modifiers": "@Override public", "return": "int", "signature": "int deleteExpiredItems(Class modelClass, String field, Long cutoffTime, Integer numItems)", "full_signature": "@Override public int deleteExpiredItems(Class modelClass, String field, Long cutoffTime, Integer numItems)", "class_method_signature": "CloudDatastoreBackend.deleteExpiredItems(Class modelClass, String field, Long cutoffTime, Integer numItems)", "testcase": false, "constructor": false}, {"identifier": "initializeDatabase", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initializeDatabase()", "full_signature": "@Override public void initializeDatabase()", "class_method_signature": "CloudDatastoreBackend.initializeDatabase()", "testcase": false, "constructor": false}, {"identifier": "checkConnection", "parameters": "()", "modifiers": "@Override public", "return": "CheckResult", "signature": "CheckResult checkConnection()", "full_signature": "@Override public CheckResult checkConnection()", "class_method_signature": "CloudDatastoreBackend.checkConnection()", "testcase": false, "constructor": false}], "file": "code/extensions/database/cloud-datastore/src/main/java/com/google/cloud/broker/database/backends/CloudDatastoreBackend.java"}, "focal_method": {"identifier": "get", "parameters": "(Class modelClass, String objectId)", "modifiers": "@Override public", "return": "Model", "body": "@Override\n    public Model get(Class modelClass, String objectId) throws DatabaseObjectNotFound {\n        // Load entity from Datastore\n        Datastore datastore = getService();\n        KeyFactory keyFactory = datastore.newKeyFactory().setKind(modelClass.getSimpleName());\n        Key key = keyFactory.newKey(objectId);\n        Entity entity = datastore.get(key);\n\n        // No entity found\n        if (entity == null) {\n            throw new DatabaseObjectNotFound(\n                    String.format(\"%s object not found: %s\", modelClass.getSimpleName(), objectId));\n        }\n\n        return convertEntityToModel(entity, modelClass);\n    }", "signature": "Model get(Class modelClass, String objectId)", "full_signature": "@Override public Model get(Class modelClass, String objectId)", "class_method_signature": "CloudDatastoreBackend.get(Class modelClass, String objectId)", "testcase": false, "constructor": false, "invocations": ["getService", "setKind", "newKeyFactory", "getSimpleName", "newKey", "get", "format", "getSimpleName", "convertEntityToModel"]}, "repository": {"repo_id": 176837289, "url": "https://github.com/GoogleCloudPlatform/gcp-token-broker", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 27, "size": 1700, "license": "licensed"}}