{"test_class": {"identifier": "WeightedDynamicTimeWarpingTest", "superclass": "", "interfaces": "", "fields": [], "file": "JAICore/jaicore-basic/src/test/java/ai/libs/jaicore/basic/metric/WeightedDynamicTimeWarpingTest.java"}, "test_case": {"identifier": "testCorrectnessForDistanceCalculation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCorrectnessForDistanceCalculation() {\n        // Input.\n        double[] timeSeries1 = { 1, 1, 1, 1, 1, 1 };\n        double[] timeSeries2 = { 1, 1, 1, 1, 1, 1 };\n        // Expectation.\n        double expectation = 0;\n\n        double g = 1;\n        double maximumWeight = 1;\n        IScalarDistance d = ScalarDistanceUtil.getSquaredDistance();\n        WeightedDynamicTimeWarping wdtw = new WeightedDynamicTimeWarping(g, maximumWeight, d);\n        double distance = wdtw.distance(timeSeries1, timeSeries2);\n\n        assertEquals(expectation, distance, 1.0E-5);\n    }", "signature": "void testCorrectnessForDistanceCalculation()", "full_signature": "@Test public void testCorrectnessForDistanceCalculation()", "class_method_signature": "WeightedDynamicTimeWarpingTest.testCorrectnessForDistanceCalculation()", "testcase": true, "constructor": false, "invocations": ["getSquaredDistance", "distance", "assertEquals"]}, "focal_class": {"identifier": "WeightedDynamicTimeWarping", "superclass": "", "interfaces": "implements IDistanceMetric", "fields": [{"original_string": "private double g;", "modifier": "private", "type": "double", "declarator": "g", "var_name": "g"}, {"original_string": "private double maximumWeight;", "modifier": "private", "type": "double", "declarator": "maximumWeight", "var_name": "maximumWeight"}, {"original_string": "private IScalarDistance d;", "modifier": "private", "type": "IScalarDistance", "declarator": "d", "var_name": "d"}, {"original_string": "private Map<Integer, double[]> weightMemoization = new HashMap<>();", "modifier": "private", "type": "Map<Integer, double[]>", "declarator": "weightMemoization = new HashMap<>()", "var_name": "weightMemoization"}], "methods": [{"identifier": "WeightedDynamicTimeWarping", "parameters": "(final double g, final double maximumWeight, final IScalarDistance d)", "modifiers": "public", "return": "", "signature": " WeightedDynamicTimeWarping(final double g, final double maximumWeight, final IScalarDistance d)", "full_signature": "public  WeightedDynamicTimeWarping(final double g, final double maximumWeight, final IScalarDistance d)", "class_method_signature": "WeightedDynamicTimeWarping.WeightedDynamicTimeWarping(final double g, final double maximumWeight, final IScalarDistance d)", "testcase": false, "constructor": true}, {"identifier": "distance", "parameters": "(final double[] a, final double[] b)", "modifiers": "@Override public", "return": "double", "signature": "double distance(final double[] a, final double[] b)", "full_signature": "@Override public double distance(final double[] a, final double[] b)", "class_method_signature": "WeightedDynamicTimeWarping.distance(final double[] a, final double[] b)", "testcase": false, "constructor": false}, {"identifier": "calculateWeights", "parameters": "(final int length)", "modifiers": "protected", "return": "double[]", "signature": "double[] calculateWeights(final int length)", "full_signature": "protected double[] calculateWeights(final int length)", "class_method_signature": "WeightedDynamicTimeWarping.calculateWeights(final int length)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-basic/src/main/java/ai/libs/jaicore/basic/metric/WeightedDynamicTimeWarping.java"}, "focal_method": {"identifier": "distance", "parameters": "(final double[] a, final double[] b)", "modifiers": "@Override public", "return": "double", "body": "@Override\n\tpublic double distance(final double[] a, final double[] b) {\n\t\tint n = a.length;\n\t\tint m = b.length;\n\t\tdouble[][] matrix = new double[n + 1][m + 1];\n\n\t\tdouble[] weights = this.calculateWeights(Math.max(n, m));\n\n\t\t// Dynamic Programming initialization.\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tmatrix[i][0] = Double.MAX_VALUE;\n\t\t}\n\t\tfor (int j = 1; j <= m; j++) {\n\t\t\tmatrix[0][j] = Double.MAX_VALUE;\n\t\t}\n\t\tmatrix[0][0] = 0d;\n\n\t\t// Dynamic programming.\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfor (int j = 1; j <= m; j++) {\n\t\t\t\t// Paper: | w[i-j] (a_i - b_j) |^p\n\t\t\t\tdouble cost = weights[Math.abs(i - j)] * this.d.distance(a[i - 1], b[j - 1]);\n\t\t\t\tdouble minimum = Math.min(matrix[i - 1][j], Math.min(matrix[i][j - 1], matrix[i - 1][j - 1]));\n\t\t\t\tmatrix[i][j] = cost + minimum;\n\t\t\t}\n\t\t}\n\t\treturn matrix[n][m];\n\t}", "signature": "double distance(final double[] a, final double[] b)", "full_signature": "@Override public double distance(final double[] a, final double[] b)", "class_method_signature": "WeightedDynamicTimeWarping.distance(final double[] a, final double[] b)", "testcase": false, "constructor": false, "invocations": ["calculateWeights", "max", "abs", "distance", "min", "min"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}