{"test_class": {"identifier": "SHA256UniformMapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/selection/split/mapper/SHA256UniformMapperTest.java"}, "test_case": {"identifier": "testMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMap() {\n        UniformMapper<Integer, Integer> mapper = new SHA256UniformMapper<>(new Random(42));\n\n        int cnt = 0;\n\n        for (int i = 0; i < 100_000; i++) {\n            double pnt = mapper.map(i, i);\n\n            if (pnt < 0.2)\n                cnt++;\n        }\n\n        double err = 1.0 * Math.abs(cnt - 20_000) / 20_000;\n\n        // Hash function should provide a good distribution so that error should be less that 2% in case 10^5 tests.\n        assertTrue(err < 0.02);\n    }", "signature": "void testMap()", "full_signature": "@Test public void testMap()", "class_method_signature": "SHA256UniformMapperTest.testMap()", "testcase": true, "constructor": false, "invocations": ["map", "abs", "assertTrue"]}, "focal_class": {"identifier": "SHA256UniformMapper", "superclass": "", "interfaces": "implements UniformMapper<K,V>", "fields": [{"original_string": "private static final long serialVersionUID = -8179630783617088803L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -8179630783617088803L", "var_name": "serialVersionUID"}, {"original_string": "private static final String HASHING_ALGORITHM = \"SHA-256\";", "modifier": "private static final", "type": "String", "declarator": "HASHING_ALGORITHM = \"SHA-256\"", "var_name": "HASHING_ALGORITHM"}, {"original_string": "private static final ThreadLocal<MessageDigest> digest = new ThreadLocal<>();", "modifier": "private static final", "type": "ThreadLocal<MessageDigest>", "declarator": "digest = new ThreadLocal<>()", "var_name": "digest"}, {"original_string": "private final List<Integer> shuffleStgy = Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7);", "modifier": "private final", "type": "List<Integer>", "declarator": "shuffleStgy = Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7)", "var_name": "shuffleStgy"}], "methods": [{"identifier": "SHA256UniformMapper", "parameters": "()", "modifiers": "public", "return": "", "signature": " SHA256UniformMapper()", "full_signature": "public  SHA256UniformMapper()", "class_method_signature": "SHA256UniformMapper.SHA256UniformMapper()", "testcase": false, "constructor": true}, {"identifier": "SHA256UniformMapper", "parameters": "(Random random)", "modifiers": "public", "return": "", "signature": " SHA256UniformMapper(Random random)", "full_signature": "public  SHA256UniformMapper(Random random)", "class_method_signature": "SHA256UniformMapper.SHA256UniformMapper(Random random)", "testcase": false, "constructor": true}, {"identifier": "map", "parameters": "(K key, V val)", "modifiers": "@Override public", "return": "double", "signature": "double map(K key, V val)", "full_signature": "@Override public double map(K key, V val)", "class_method_signature": "SHA256UniformMapper.map(K key, V val)", "testcase": false, "constructor": false}, {"identifier": "getDigest", "parameters": "()", "modifiers": "private", "return": "MessageDigest", "signature": "MessageDigest getDigest()", "full_signature": "private MessageDigest getDigest()", "class_method_signature": "SHA256UniformMapper.getDigest()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/selection/split/mapper/SHA256UniformMapper.java"}, "focal_method": {"identifier": "map", "parameters": "(K key, V val)", "modifiers": "@Override public", "return": "double", "body": "@Override public double map(K key, V val) {\n        int h = Math.abs(key.hashCode());\n        String str = String.valueOf(key.hashCode());\n\n        byte[] hash = getDigest().digest(str.getBytes(StandardCharsets.UTF_8));\n\n        byte hashByte = hash[h % hash.length];\n\n        byte resByte = 0;\n\n        for (int i = 0; i < 8; i++)\n            resByte = (byte)(resByte << 1 | ((hashByte >> shuffleStgy.get(i)) & 0x1));\n\n        return 1.0 * (resByte & 0xFF) / 256;\n    }", "signature": "double map(K key, V val)", "full_signature": "@Override public double map(K key, V val)", "class_method_signature": "SHA256UniformMapper.map(K key, V val)", "testcase": false, "constructor": false, "invocations": ["abs", "hashCode", "valueOf", "hashCode", "digest", "getDigest", "getBytes", "get"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}