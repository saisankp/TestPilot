{"test_class": {"identifier": "DistanceDatabaseAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int ID = 5;", "modifier": "private static final", "type": "int", "declarator": "ID = 5", "var_name": "ID"}, {"original_string": "private static final int PRIMARY_KEY_ID = 11;", "modifier": "private static final", "type": "int", "declarator": "PRIMARY_KEY_ID = 11", "var_name": "PRIMARY_KEY_ID"}, {"original_string": "private static final int PARENT_ID = 15;", "modifier": "private static final", "type": "int", "declarator": "PARENT_ID = 15", "var_name": "PARENT_ID"}, {"original_string": "private static final double DISTANCE = 12.55d;", "modifier": "private static final", "type": "double", "declarator": "DISTANCE = 12.55d", "var_name": "DISTANCE"}, {"original_string": "private static final String LOCATION = \"Location\";", "modifier": "private static final", "type": "String", "declarator": "LOCATION = \"Location\"", "var_name": "LOCATION"}, {"original_string": "private static final long DATE = 1409703721000L;", "modifier": "private static final", "type": "long", "declarator": "DATE = 1409703721000L", "var_name": "DATE"}, {"original_string": "private static final String TIMEZONE = TimeZone.getDefault().getID();", "modifier": "private static final", "type": "String", "declarator": "TIMEZONE = TimeZone.getDefault().getID()", "var_name": "TIMEZONE"}, {"original_string": "private static final String COMMENT = \"Comment\";", "modifier": "private static final", "type": "String", "declarator": "COMMENT = \"Comment\"", "var_name": "COMMENT"}, {"original_string": "private static final double RATE = 0.33d;", "modifier": "private static final", "type": "double", "declarator": "RATE = 0.33d", "var_name": "RATE"}, {"original_string": "private static final String CURRENCY_CODE = \"USD\";", "modifier": "private static final", "type": "String", "declarator": "CURRENCY_CODE = \"USD\"", "var_name": "CURRENCY_CODE"}, {"original_string": "private static final UUID DIST_UUID = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "DIST_UUID = UUID.randomUUID()", "var_name": "DIST_UUID"}, {"original_string": "private static final int PAYMENT_METHOD_ID = 2;", "modifier": "private static final", "type": "int", "declarator": "PAYMENT_METHOD_ID = 2", "var_name": "PAYMENT_METHOD_ID"}, {"original_string": "private static final UUID PAYMENT_METHOD_UUID = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "PAYMENT_METHOD_UUID = UUID.randomUUID()", "var_name": "PAYMENT_METHOD_UUID"}, {"original_string": "private static final PaymentMethod PAYMENT_METHOD = new PaymentMethod(PAYMENT_METHOD_ID, PAYMENT_METHOD_UUID, \"method\", false);", "modifier": "private static final", "type": "PaymentMethod", "declarator": "PAYMENT_METHOD = new PaymentMethod(PAYMENT_METHOD_ID, PAYMENT_METHOD_UUID, \"method\", false)", "var_name": "PAYMENT_METHOD"}, {"original_string": "private static final boolean LOCATION_HIDDEN_FROM_AUTO_COMPLETE = false;", "modifier": "private static final", "type": "boolean", "declarator": "LOCATION_HIDDEN_FROM_AUTO_COMPLETE = false", "var_name": "LOCATION_HIDDEN_FROM_AUTO_COMPLETE"}, {"original_string": "private static final boolean COMMENT_HIDDEN_FROM_AUTO_COMPLETE = false;", "modifier": "private static final", "type": "boolean", "declarator": "COMMENT_HIDDEN_FROM_AUTO_COMPLETE = false", "var_name": "COMMENT_HIDDEN_FROM_AUTO_COMPLETE"}, {"original_string": "DistanceDatabaseAdapter mDistanceDatabaseAdapter;", "modifier": "", "type": "DistanceDatabaseAdapter", "declarator": "mDistanceDatabaseAdapter", "var_name": "mDistanceDatabaseAdapter"}, {"original_string": "@Mock\n    Table<Trip> mTripsTable;", "modifier": "@Mock", "type": "Table<Trip>", "declarator": "mTripsTable", "var_name": "mTripsTable"}, {"original_string": "@Mock\n    Table<PaymentMethod> mPaymentMethodsTable;", "modifier": "@Mock", "type": "Table<PaymentMethod>", "declarator": "mPaymentMethodsTable", "var_name": "mPaymentMethodsTable"}, {"original_string": "@Mock\n    Trip mTrip;", "modifier": "@Mock", "type": "Trip", "declarator": "mTrip", "var_name": "mTrip"}, {"original_string": "@Mock\n    Cursor mCursor;", "modifier": "@Mock", "type": "Cursor", "declarator": "mCursor", "var_name": "mCursor"}, {"original_string": "@Mock\n    Distance mDistance;", "modifier": "@Mock", "type": "Distance", "declarator": "mDistance", "var_name": "mDistance"}, {"original_string": "@Mock\n    Price mPrice;", "modifier": "@Mock", "type": "Price", "declarator": "mPrice", "var_name": "mPrice"}, {"original_string": "@Mock\n    SyncStateAdapter mSyncStateAdapter;", "modifier": "@Mock", "type": "SyncStateAdapter", "declarator": "mSyncStateAdapter", "var_name": "mSyncStateAdapter"}, {"original_string": "@Mock\n    SyncState mSyncState, mGetSyncState;", "modifier": "@Mock", "type": "SyncState", "declarator": "mSyncState", "var_name": "mSyncState"}, {"original_string": "@Mock\n    AutoCompleteMetadata mAutoCompleteMetadata;", "modifier": "@Mock", "type": "AutoCompleteMetadata", "declarator": "mAutoCompleteMetadata", "var_name": "mAutoCompleteMetadata"}], "file": "app/src/test/java/co/smartreceipts/android/persistence/database/tables/adapters/DistanceDatabaseAdapterTest.java"}, "test_case": {"identifier": "writeUnsynced", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void writeUnsynced() throws Exception {\n        final String sync = \"sync\";\n        final ContentValues syncValues = new ContentValues();\n        syncValues.put(sync, sync);\n        when(mSyncStateAdapter.writeUnsynced(mSyncState)).thenReturn(syncValues);\n\n        final ContentValues contentValues = mDistanceDatabaseAdapter.write(mDistance, new DatabaseOperationMetadata());\n        assertTrue(PARENT_ID == contentValues.getAsInteger(DistanceTable.COLUMN_PARENT_TRIP_ID));\n        assertEquals(DISTANCE, contentValues.getAsDouble(DistanceTable.COLUMN_DISTANCE), 0.0001d);\n        assertEquals(LOCATION, contentValues.getAsString(DistanceTable.COLUMN_LOCATION));\n        assertEquals(DATE, (long) contentValues.getAsLong(DistanceTable.COLUMN_DATE));\n        assertEquals(TIMEZONE, contentValues.getAsString(DistanceTable.COLUMN_TIMEZONE));\n        assertEquals(COMMENT, contentValues.getAsString(DistanceTable.COLUMN_COMMENT));\n        assertEquals(RATE, contentValues.getAsDouble(DistanceTable.COLUMN_RATE), 0.0001d);\n        assertEquals(CURRENCY_CODE, contentValues.getAsString(DistanceTable.COLUMN_RATE_CURRENCY));\n        assertEquals(DIST_UUID.toString(), contentValues.getAsString(DistanceTable.COLUMN_UUID));\n        assertEquals(sync, contentValues.getAsString(sync));\n        assertEquals(PAYMENT_METHOD_ID, (int) contentValues.getAsInteger(DistanceTable.COLUMN_PAYMENT_METHOD_ID));\n        assertEquals(LOCATION_HIDDEN_FROM_AUTO_COMPLETE, contentValues.getAsBoolean(DistanceTable.COLUMN_LOCATION_HIDDEN_AUTO_COMPLETE));\n        assertEquals(COMMENT_HIDDEN_FROM_AUTO_COMPLETE, contentValues.getAsBoolean(DistanceTable.COLUMN_COMMENT_HIDDEN_AUTO_COMPLETE));\n        assertFalse(contentValues.containsKey(DistanceTable.COLUMN_ID));\n    }", "signature": "void writeUnsynced()", "full_signature": "@Test public void writeUnsynced()", "class_method_signature": "DistanceDatabaseAdapterTest.writeUnsynced()", "testcase": true, "constructor": false, "invocations": ["put", "thenReturn", "when", "writeUnsynced", "write", "assertTrue", "getAsInteger", "assertEquals", "getAsDouble", "assertEquals", "getAsString", "assertEquals", "getAsLong", "assertEquals", "getAsString", "assertEquals", "getAsString", "assertEquals", "getAsDouble", "assertEquals", "getAsString", "assertEquals", "toString", "getAsString", "assertEquals", "getAsString", "assertEquals", "getAsInteger", "assertEquals", "getAsBoolean", "assertEquals", "getAsBoolean", "assertFalse", "containsKey"]}, "focal_class": {"identifier": "DistanceDatabaseAdapter", "superclass": "", "interfaces": "implements SelectionBackedDatabaseAdapter<Distance, Trip>", "fields": [{"original_string": "private final Table<Trip> mTripsTable;", "modifier": "private final", "type": "Table<Trip>", "declarator": "mTripsTable", "var_name": "mTripsTable"}, {"original_string": "private final Table<PaymentMethod> mPaymentMethodTable;", "modifier": "private final", "type": "Table<PaymentMethod>", "declarator": "mPaymentMethodTable", "var_name": "mPaymentMethodTable"}, {"original_string": "private final SyncStateAdapter mSyncStateAdapter;", "modifier": "private final", "type": "SyncStateAdapter", "declarator": "mSyncStateAdapter", "var_name": "mSyncStateAdapter"}], "methods": [{"identifier": "DistanceDatabaseAdapter", "parameters": "(@NonNull Table<Trip> tripsTable, @NonNull Table<PaymentMethod> paymentMethodTable)", "modifiers": "public", "return": "", "signature": " DistanceDatabaseAdapter(@NonNull Table<Trip> tripsTable, @NonNull Table<PaymentMethod> paymentMethodTable)", "full_signature": "public  DistanceDatabaseAdapter(@NonNull Table<Trip> tripsTable, @NonNull Table<PaymentMethod> paymentMethodTable)", "class_method_signature": "DistanceDatabaseAdapter.DistanceDatabaseAdapter(@NonNull Table<Trip> tripsTable, @NonNull Table<PaymentMethod> paymentMethodTable)", "testcase": false, "constructor": true}, {"identifier": "DistanceDatabaseAdapter", "parameters": "(@NonNull Table<Trip> tripsTable, @NonNull Table<PaymentMethod> paymentMethodTable,\n                                   @NonNull SyncStateAdapter syncStateAdapter)", "modifiers": "public", "return": "", "signature": " DistanceDatabaseAdapter(@NonNull Table<Trip> tripsTable, @NonNull Table<PaymentMethod> paymentMethodTable,\n                                   @NonNull SyncStateAdapter syncStateAdapter)", "full_signature": "public  DistanceDatabaseAdapter(@NonNull Table<Trip> tripsTable, @NonNull Table<PaymentMethod> paymentMethodTable,\n                                   @NonNull SyncStateAdapter syncStateAdapter)", "class_method_signature": "DistanceDatabaseAdapter.DistanceDatabaseAdapter(@NonNull Table<Trip> tripsTable, @NonNull Table<PaymentMethod> paymentMethodTable,\n                                   @NonNull SyncStateAdapter syncStateAdapter)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "(@NonNull Cursor cursor)", "modifiers": "@NonNull @Override public", "return": "Distance", "signature": "Distance read(@NonNull Cursor cursor)", "full_signature": "@NonNull @Override public Distance read(@NonNull Cursor cursor)", "class_method_signature": "DistanceDatabaseAdapter.read(@NonNull Cursor cursor)", "testcase": false, "constructor": false}, {"identifier": "readForSelection", "parameters": "(@NonNull Cursor cursor, @NonNull Trip trip, boolean isDescending)", "modifiers": "@NonNull @Override public", "return": "Distance", "signature": "Distance readForSelection(@NonNull Cursor cursor, @NonNull Trip trip, boolean isDescending)", "full_signature": "@NonNull @Override public Distance readForSelection(@NonNull Cursor cursor, @NonNull Trip trip, boolean isDescending)", "class_method_signature": "DistanceDatabaseAdapter.readForSelection(@NonNull Cursor cursor, @NonNull Trip trip, boolean isDescending)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(@NonNull Distance distance, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@NonNull @Override public", "return": "ContentValues", "signature": "ContentValues write(@NonNull Distance distance, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@NonNull @Override public ContentValues write(@NonNull Distance distance, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "DistanceDatabaseAdapter.write(@NonNull Distance distance, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(@NonNull Distance distance, int primaryKey, @NonNull UUID uuid,\n                          @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@NonNull @Override public", "return": "Distance", "signature": "Distance build(@NonNull Distance distance, int primaryKey, @NonNull UUID uuid,\n                          @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@NonNull @Override public Distance build(@NonNull Distance distance, int primaryKey, @NonNull UUID uuid,\n                          @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "DistanceDatabaseAdapter.build(@NonNull Distance distance, int primaryKey, @NonNull UUID uuid,\n                          @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/persistence/database/tables/adapters/DistanceDatabaseAdapter.java"}, "focal_method": {"identifier": "write", "parameters": "(@NonNull Distance distance, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@NonNull @Override public", "return": "ContentValues", "body": "@NonNull\n    @Override\n    public ContentValues write(@NonNull Distance distance, @NonNull DatabaseOperationMetadata databaseOperationMetadata) {\n        final ContentValues values = new ContentValues();\n\n        values.put(DistanceTable.COLUMN_PARENT_TRIP_ID, distance.getTrip().getId());\n        values.put(DistanceTable.COLUMN_LOCATION, distance.getLocation().trim());\n        values.put(DistanceTable.COLUMN_DISTANCE, distance.getDistance().doubleValue());\n        values.put(DistanceTable.COLUMN_TIMEZONE, distance.getTimeZone().getID());\n        values.put(DistanceTable.COLUMN_DATE, distance.getDate().getTime());\n        values.put(DistanceTable.COLUMN_RATE, distance.getRate().doubleValue());\n        values.put(DistanceTable.COLUMN_RATE_CURRENCY, distance.getPrice().getCurrencyCode());\n        values.put(DistanceTable.COLUMN_COMMENT, distance.getComment().trim());\n        values.put(DistanceTable.COLUMN_UUID, distance.getUuid().toString());\n        values.put(DistanceTable.COLUMN_PAYMENT_METHOD_ID, distance.getPaymentMethod().getId());\n        values.put(DistanceTable.COLUMN_LOCATION_HIDDEN_AUTO_COMPLETE, distance.getAutoCompleteMetadata().isLocationHiddenFromAutoComplete());\n        values.put(DistanceTable.COLUMN_COMMENT_HIDDEN_AUTO_COMPLETE, distance.getAutoCompleteMetadata().isCommentHiddenFromAutoComplete());\n        if (databaseOperationMetadata.getOperationFamilyType() == OperationFamilyType.Sync) {\n            values.putAll(mSyncStateAdapter.write(distance.getSyncState()));\n        } else {\n            values.putAll(mSyncStateAdapter.writeUnsynced(distance.getSyncState()));\n        }\n\n        return values;\n    }", "signature": "ContentValues write(@NonNull Distance distance, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@NonNull @Override public ContentValues write(@NonNull Distance distance, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "DistanceDatabaseAdapter.write(@NonNull Distance distance, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false, "invocations": ["put", "getId", "getTrip", "put", "trim", "getLocation", "put", "doubleValue", "getDistance", "put", "getID", "getTimeZone", "put", "getTime", "getDate", "put", "doubleValue", "getRate", "put", "getCurrencyCode", "getPrice", "put", "trim", "getComment", "put", "toString", "getUuid", "put", "getId", "getPaymentMethod", "put", "isLocationHiddenFromAutoComplete", "getAutoCompleteMetadata", "put", "isCommentHiddenFromAutoComplete", "getAutoCompleteMetadata", "getOperationFamilyType", "putAll", "write", "getSyncState", "putAll", "writeUnsynced", "getSyncState"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}