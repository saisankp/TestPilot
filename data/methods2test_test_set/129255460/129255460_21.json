{"test_class": {"identifier": "VoteCountjobTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private VoteCountJob voteCountjob;", "modifier": "@Autowired\n    private", "type": "VoteCountJob", "declarator": "voteCountjob", "var_name": "voteCountjob"}], "file": "backend/src/test/java/com/running/coins/job/VoteCountjobTest.java"}, "test_case": {"identifier": "executeVoteCount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void executeVoteCount() {\n       voteCountjob.executeVoteCount();\n    }", "signature": "void executeVoteCount()", "full_signature": "@Test public void executeVoteCount()", "class_method_signature": "VoteCountjobTest.executeVoteCount()", "testcase": true, "constructor": false, "invocations": ["executeVoteCount"]}, "focal_class": {"identifier": "VoteCountJob", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private VoteRecordMapper voteRecordMapper;", "modifier": "@Autowired\n    private", "type": "VoteRecordMapper", "declarator": "voteRecordMapper", "var_name": "voteRecordMapper"}, {"original_string": "@Autowired\n    private RunningRecordMapper runningRecordMapper;", "modifier": "@Autowired\n    private", "type": "RunningRecordMapper", "declarator": "runningRecordMapper", "var_name": "runningRecordMapper"}, {"original_string": "@Autowired\n    private MailService mailService;", "modifier": "@Autowired\n    private", "type": "MailService", "declarator": "mailService", "var_name": "mailService"}, {"original_string": "@Autowired\n    private UserInfoMapper userInfoMapper;", "modifier": "@Autowired\n    private", "type": "UserInfoMapper", "declarator": "userInfoMapper", "var_name": "userInfoMapper"}, {"original_string": "@Autowired\n    private MostVotedJob mostVotedJob;", "modifier": "@Autowired\n    private", "type": "MostVotedJob", "declarator": "mostVotedJob", "var_name": "mostVotedJob"}, {"original_string": "@Autowired\n    private DailyMostVotedRecordMapper dailyMostVotedRecordMapper;", "modifier": "@Autowired\n    private", "type": "DailyMostVotedRecordMapper", "declarator": "dailyMostVotedRecordMapper", "var_name": "dailyMostVotedRecordMapper"}, {"original_string": "@Autowired\n    private MostVotedRecordMapper mostVotedRecordMapper;", "modifier": "@Autowired\n    private", "type": "MostVotedRecordMapper", "declarator": "mostVotedRecordMapper", "var_name": "mostVotedRecordMapper"}], "methods": [{"identifier": "executeVoteCount", "parameters": "()", "modifiers": "@Scheduled(cron = \"00 00 23 * * ?\") public", "return": "void", "signature": "void executeVoteCount()", "full_signature": "@Scheduled(cron = \"00 00 23 * * ?\") public void executeVoteCount()", "class_method_signature": "VoteCountJob.executeVoteCount()", "testcase": false, "constructor": false}], "file": "backend/src/main/java/com/running/coins/job/VoteCountJob.java"}, "focal_method": {"identifier": "executeVoteCount", "parameters": "()", "modifiers": "@Scheduled(cron = \"00 00 23 * * ?\") public", "return": "void", "body": "@Scheduled(cron = \"00 00 23 * * ?\")\n    public void executeVoteCount() {\n\n        System.err.println(\"begin to start Job\");\n        List<RunningRecordWithInfo> runningRecordWithInfos = runningRecordMapper.selectRunningRecordWithInfoScoreIn24hours();\n\n        List<MailBean> mailBeanList = new ArrayList();\n        for (RunningRecordWithInfo runningRecordWithInfo : runningRecordWithInfos) {\n            System.out.println(runningRecordWithInfo);\n\n            MailBean mailBean = new MailBean();\n            mailBean.setDistance(runningRecordWithInfo.getDistance());\n            mailBean.setUsername(runningRecordWithInfo.getUsername());\n            mailBean.setCreationTime(DateUtils.parseForFrontEnd2(runningRecordWithInfo.getCreationTime()));\n\n\n            RunningRecord runningRecord = runningRecordWithInfo;\n            runningRecord.setScore(runningRecordWithInfo.getFinalScore());\n            if (runningRecord.getScore() == null) {\n                runningRecord.setStatus(1);\n                mailBean.setStatus(\"Expired\");\n            } else if (runningRecord.getScore() <= 0) {\n                runningRecord.setStatus(2);\n                mailBean.setStatus(\"Rejected\");\n            } else if (runningRecord.getScore() > 0) {\n                runningRecord.setStatus(3);\n                mailBean.setStatus(\"Passed\");\n                mailBean.setEarnedCoins(runningRecordWithInfo.getEarnedCoins());\n            }\n\n            mailBeanList.add(mailBean);\n            runningRecordMapper.updateByPrimaryKey(runningRecord);\n        }\n\n\n        mostVotedJob.insertDailyVotedCount();\n\n\n        List<DailyVotedCountVo> dailyVotedCountVos = mostVotedRecordMapper.selectByVotedDate(new Date());\n\n        dailyVotedCountVos.stream().sorted((Comparator.comparing(DailyVotedCountVo::getVotedDate)));\n\n        ThisLocalizedWeek thisLocalizedWeek = new ThisLocalizedWeek(Locale.CHINA);\n        List<WeeklyAwardedReportVo> weeklyAwardedReportVos = dailyMostVotedRecordMapper.selectWeeklyAwardedRecord(thisLocalizedWeek.getFirstDay(), thisLocalizedWeek.getLastDay());\n\n        List<UserInfoBatchBean> userInfoBatchBeans = userInfoMapper.selectUserTotalInfo();\n        for (UserInfoBatchBean userInfoBatchBean : userInfoBatchBeans) {\n            UserInfo userInfo = userInfoMapper.selectByOpenId(userInfoBatchBean.getUserOpenId());\n            userInfo.setTotalDistance(userInfoBatchBean.getTotalDistance());\n            userInfo.setCoins(userInfoBatchBean.getTotalCoins());\n            userInfoMapper.updateByPrimaryKey(userInfo);\n        }\n        List<UserInfo> userInfos = userInfoMapper.selectAllUser();\n        try {\n            mailService.sendMessageMail(mailBeanList,userInfos,dailyVotedCountVos,weeklyAwardedReportVos, \"RunningClub Report\", \"message.ftl\");\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        System.err.println(\"send email finished\");\n    }", "signature": "void executeVoteCount()", "full_signature": "@Scheduled(cron = \"00 00 23 * * ?\") public void executeVoteCount()", "class_method_signature": "VoteCountJob.executeVoteCount()", "testcase": false, "constructor": false, "invocations": ["println", "selectRunningRecordWithInfoScoreIn24hours", "println", "setDistance", "getDistance", "setUsername", "getUsername", "setCreationTime", "parseForFrontEnd2", "getCreationTime", "setScore", "getFinalScore", "getScore", "setStatus", "setStatus", "getScore", "setStatus", "setStatus", "getScore", "setStatus", "setStatus", "setEarnedCoins", "getEarnedCoins", "add", "updateByPrimaryKey", "insertDailyVotedCount", "selectByVotedDate", "sorted", "stream", "comparing", "selectWeeklyAwardedRecord", "getFirstDay", "getLastDay", "selectUserTotalInfo", "selectByOpenId", "getUserOpenId", "setTotalDistance", "getTotalDistance", "setCoins", "getTotalCoins", "updateByPrimaryKey", "selectAllUser", "sendMessageMail", "printStackTrace", "println"]}, "repository": {"repo_id": 129255460, "url": "https://github.com/artbite008/running_coin", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 5, "size": 3010, "license": "licensed"}}