{"test_class": {"identifier": "HystrixDashboardStreamTest", "superclass": "extends CommandStreamTest", "interfaces": "", "fields": [{"original_string": "@Rule\n    public HystrixRequestContextRule ctx = new HystrixRequestContextRule();", "modifier": "@Rule\n    public", "type": "HystrixRequestContextRule", "declarator": "ctx = new HystrixRequestContextRule()", "var_name": "ctx"}, {"original_string": "HystrixDashboardStream stream;", "modifier": "", "type": "HystrixDashboardStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "private final static HystrixCommandGroupKey groupKey = HystrixCommandGroupKey.Factory.asKey(\"Dashboard\");", "modifier": "private final static", "type": "HystrixCommandGroupKey", "declarator": "groupKey = HystrixCommandGroupKey.Factory.asKey(\"Dashboard\")", "var_name": "groupKey"}, {"original_string": "private final static HystrixCommandKey commandKey = HystrixCommandKey.Factory.asKey(\"DashboardCommand\");", "modifier": "private final static", "type": "HystrixCommandKey", "declarator": "commandKey = HystrixCommandKey.Factory.asKey(\"DashboardCommand\")", "var_name": "commandKey"}], "file": "hystrix-core/src/test/java/com/netflix/hystrix/metric/consumer/HystrixDashboardStreamTest.java"}, "test_case": {"identifier": "testStreamHasData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStreamHasData() throws Exception {\n        final AtomicBoolean commandShowsUp = new AtomicBoolean(false);\n        final CountDownLatch latch = new CountDownLatch(1);\n        final int NUM = 10;\n\n        for (int i = 0; i < 2; i++) {\n            HystrixCommand<Integer> cmd = Command.from(groupKey, commandKey, HystrixEventType.SUCCESS, 50);\n            cmd.observe();\n        }\n\n        stream.observe().take(NUM).subscribe(\n                new Subscriber<HystrixDashboardStream.DashboardData>() {\n                    @Override\n                    public void onCompleted() {\n                        System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName() + \" OnCompleted\");\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName() + \" OnError : \" + e);\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onNext(HystrixDashboardStream.DashboardData dashboardData) {\n                        System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName() + \" : Received data with : \" + dashboardData.commandMetrics.size() + \" commands\");\n                        for (HystrixCommandMetrics metrics : dashboardData.commandMetrics) {\n                            if (metrics.getCommandKey().equals(commandKey)) {\n                                commandShowsUp.set(true);\n                            }\n                        }\n                    }\n                });\n\n        assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        assertTrue(commandShowsUp.get());\n    }", "signature": "void testStreamHasData()", "full_signature": "@Test public void testStreamHasData()", "class_method_signature": "HystrixDashboardStreamTest.testStreamHasData()", "testcase": true, "constructor": false, "invocations": ["from", "observe", "subscribe", "take", "observe", "println", "currentTimeMillis", "getName", "currentThread", "countDown", "println", "currentTimeMillis", "getName", "currentThread", "countDown", "println", "currentTimeMillis", "getName", "currentThread", "size", "equals", "getCommandKey", "set", "assertTrue", "await", "assertTrue", "get"]}, "focal_class": {"identifier": "HystrixDashboardStream", "superclass": "", "interfaces": "", "fields": [{"original_string": "final int delayInMs;", "modifier": "final", "type": "int", "declarator": "delayInMs", "var_name": "delayInMs"}, {"original_string": "final Observable<DashboardData> singleSource;", "modifier": "final", "type": "Observable<DashboardData>", "declarator": "singleSource", "var_name": "singleSource"}, {"original_string": "final AtomicBoolean isSourceCurrentlySubscribed = new AtomicBoolean(false);", "modifier": "final", "type": "AtomicBoolean", "declarator": "isSourceCurrentlySubscribed = new AtomicBoolean(false)", "var_name": "isSourceCurrentlySubscribed"}, {"original_string": "private static final DynamicIntProperty dataEmissionIntervalInMs =\n            DynamicPropertyFactory.getInstance().getIntProperty(\"hystrix.stream.dashboard.intervalInMilliseconds\", 500);", "modifier": "private static final", "type": "DynamicIntProperty", "declarator": "dataEmissionIntervalInMs =\n            DynamicPropertyFactory.getInstance().getIntProperty(\"hystrix.stream.dashboard.intervalInMilliseconds\", 500)", "var_name": "dataEmissionIntervalInMs"}, {"original_string": "private static final HystrixDashboardStream INSTANCE =\n            new HystrixDashboardStream(dataEmissionIntervalInMs.get());", "modifier": "private static final", "type": "HystrixDashboardStream", "declarator": "INSTANCE =\n            new HystrixDashboardStream(dataEmissionIntervalInMs.get())", "var_name": "INSTANCE"}], "methods": [{"identifier": "HystrixDashboardStream", "parameters": "(int delayInMs)", "modifiers": "private", "return": "", "signature": " HystrixDashboardStream(int delayInMs)", "full_signature": "private  HystrixDashboardStream(int delayInMs)", "class_method_signature": "HystrixDashboardStream.HystrixDashboardStream(int delayInMs)", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "HystrixDashboardStream", "signature": "HystrixDashboardStream getInstance()", "full_signature": "public static HystrixDashboardStream getInstance()", "class_method_signature": "HystrixDashboardStream.getInstance()", "testcase": false, "constructor": false}, {"identifier": "getNonSingletonInstanceOnlyUsedInUnitTests", "parameters": "(int delayInMs)", "modifiers": "static", "return": "HystrixDashboardStream", "signature": "HystrixDashboardStream getNonSingletonInstanceOnlyUsedInUnitTests(int delayInMs)", "full_signature": "static HystrixDashboardStream getNonSingletonInstanceOnlyUsedInUnitTests(int delayInMs)", "class_method_signature": "HystrixDashboardStream.getNonSingletonInstanceOnlyUsedInUnitTests(int delayInMs)", "testcase": false, "constructor": false}, {"identifier": "observe", "parameters": "()", "modifiers": "public", "return": "Observable<DashboardData>", "signature": "Observable<DashboardData> observe()", "full_signature": "public Observable<DashboardData> observe()", "class_method_signature": "HystrixDashboardStream.observe()", "testcase": false, "constructor": false}, {"identifier": "isSourceCurrentlySubscribed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSourceCurrentlySubscribed()", "full_signature": "public boolean isSourceCurrentlySubscribed()", "class_method_signature": "HystrixDashboardStream.isSourceCurrentlySubscribed()", "testcase": false, "constructor": false}], "file": "hystrix-core/src/main/java/com/netflix/hystrix/metric/consumer/HystrixDashboardStream.java"}, "focal_method": {"identifier": "observe", "parameters": "()", "modifiers": "public", "return": "Observable<DashboardData>", "body": "public Observable<DashboardData> observe() {\n        return singleSource;\n    }", "signature": "Observable<DashboardData> observe()", "full_signature": "public Observable<DashboardData> observe()", "class_method_signature": "HystrixDashboardStream.observe()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 6766558, "url": "https://github.com/Netflix/Hystrix", "stars": 19028, "created": "11/19/2012 8:14:46 PM +00:00", "updates": "2020-01-27T17:55:28+00:00", "fork": "False", "license": "licensed"}}