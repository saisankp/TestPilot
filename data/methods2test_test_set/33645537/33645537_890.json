{"test_class": {"identifier": "DefaultBPlusTreeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultBPlusTree<Integer, String> tree;", "modifier": "private", "type": "DefaultBPlusTree<Integer, String>", "declarator": "tree", "var_name": "tree"}], "file": "zava/src/test/java/com/github/NoahShen/jue/bplustree/DefaultBPlusTreeTest.java"}, "test_case": {"identifier": "testTreePut", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testTreePut() {\n\t\tfor (int i = 1; i <= 100; ++i) {\n\t\t\tAssert.assertTrue(tree.put(i, i + \"\"));\n\t\t}\n\t}", "signature": "void testTreePut()", "full_signature": "@Test public void testTreePut()", "class_method_signature": "DefaultBPlusTreeTest.testTreePut()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "put"]}, "focal_class": {"identifier": "DefaultBPlusTree", "superclass": "", "interfaces": "implements BPlusTree<K, V>", "fields": [{"original_string": "private BNode<K, V> rootNode;", "modifier": "private", "type": "BNode<K, V>", "declarator": "rootNode", "var_name": "rootNode"}, {"original_string": "private BNode<K, V> firstLeafNode;", "modifier": "private", "type": "BNode<K, V>", "declarator": "firstLeafNode", "var_name": "firstLeafNode"}, {"original_string": "BNode<K, V> lastLeafNode;", "modifier": "", "type": "BNode<K, V>", "declarator": "lastLeafNode", "var_name": "lastLeafNode"}, {"original_string": "int treeLevel;", "modifier": "", "type": "int", "declarator": "treeLevel", "var_name": "treeLevel"}, {"original_string": "int keySum;", "modifier": "", "type": "int", "declarator": "keySum", "var_name": "keySum"}, {"original_string": "int nodeSum;", "modifier": "", "type": "int", "declarator": "nodeSum", "var_name": "nodeSum"}, {"original_string": "private int m;", "modifier": "private", "type": "int", "declarator": "m", "var_name": "m"}], "methods": [{"identifier": "DefaultBPlusTree", "parameters": "(int m)", "modifiers": "public", "return": "", "signature": " DefaultBPlusTree(int m)", "full_signature": "public  DefaultBPlusTree(int m)", "class_method_signature": "DefaultBPlusTree.DefaultBPlusTree(int m)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "DefaultBPlusTree.init()", "testcase": false, "constructor": false}, {"identifier": "setRootNode", "parameters": "(BNode<K, V> rootNode)", "modifiers": "", "return": "void", "signature": "void setRootNode(BNode<K, V> rootNode)", "full_signature": " void setRootNode(BNode<K, V> rootNode)", "class_method_signature": "DefaultBPlusTree.setRootNode(BNode<K, V> rootNode)", "testcase": false, "constructor": false}, {"identifier": "getM", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getM()", "full_signature": "@Override public int getM()", "class_method_signature": "DefaultBPlusTree.getM()", "testcase": false, "constructor": false}, {"identifier": "getKeySum", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getKeySum()", "full_signature": "@Override public int getKeySum()", "class_method_signature": "DefaultBPlusTree.getKeySum()", "testcase": false, "constructor": false}, {"identifier": "getNodeSum", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNodeSum()", "full_signature": "@Override public int getNodeSum()", "class_method_signature": "DefaultBPlusTree.getNodeSum()", "testcase": false, "constructor": false}, {"identifier": "getTreeLevel", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getTreeLevel()", "full_signature": "@Override public int getTreeLevel()", "class_method_signature": "DefaultBPlusTree.getTreeLevel()", "testcase": false, "constructor": false}, {"identifier": "getRootNode", "parameters": "()", "modifiers": "@Override public", "return": "BNode<K, V>", "signature": "BNode<K, V> getRootNode()", "full_signature": "@Override public BNode<K, V> getRootNode()", "class_method_signature": "DefaultBPlusTree.getRootNode()", "testcase": false, "constructor": false}, {"identifier": "getFirstLeafNode", "parameters": "()", "modifiers": "@Override public", "return": "BNode<K, V>", "signature": "BNode<K, V> getFirstLeafNode()", "full_signature": "@Override public BNode<K, V> getFirstLeafNode()", "class_method_signature": "DefaultBPlusTree.getFirstLeafNode()", "testcase": false, "constructor": false}, {"identifier": "getLastLeafNode", "parameters": "()", "modifiers": "@Override public", "return": "BNode<K, V>", "signature": "BNode<K, V> getLastLeafNode()", "full_signature": "@Override public BNode<K, V> getLastLeafNode()", "class_method_signature": "DefaultBPlusTree.getLastLeafNode()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(K key, V value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean put(K key, V value)", "full_signature": "@Override public boolean put(K key, V value)", "class_method_signature": "DefaultBPlusTree.put(K key, V value)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(K key, V value, TreeCallBack<K, V> callback)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean put(K key, V value, TreeCallBack<K, V> callback)", "full_signature": "@Override public boolean put(K key, V value, TreeCallBack<K, V> callback)", "class_method_signature": "DefaultBPlusTree.put(K key, V value, TreeCallBack<K, V> callback)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(K key)", "modifiers": "@Override public", "return": "V", "signature": "V get(K key)", "full_signature": "@Override public V get(K key)", "class_method_signature": "DefaultBPlusTree.get(K key)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(K key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean delete(K key)", "full_signature": "@Override public boolean delete(K key)", "class_method_signature": "DefaultBPlusTree.delete(K key)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(K key, TreeCallBack<K, V> callback)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean delete(K key, TreeCallBack<K, V> callback)", "full_signature": "@Override public boolean delete(K key, TreeCallBack<K, V> callback)", "class_method_signature": "DefaultBPlusTree.delete(K key, TreeCallBack<K, V> callback)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "DefaultBPlusTree<K, V>", "signature": "DefaultBPlusTree<K, V> clone()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public DefaultBPlusTree<K, V> clone()", "class_method_signature": "DefaultBPlusTree.clone()", "testcase": false, "constructor": false}, {"identifier": "updateNewTree", "parameters": "(DefaultBPlusTree<K, V> newTree, BNode<K, V> newRootNode)", "modifiers": "public", "return": "void", "signature": "void updateNewTree(DefaultBPlusTree<K, V> newTree, BNode<K, V> newRootNode)", "full_signature": "public void updateNewTree(DefaultBPlusTree<K, V> newTree, BNode<K, V> newRootNode)", "class_method_signature": "DefaultBPlusTree.updateNewTree(DefaultBPlusTree<K, V> newTree, BNode<K, V> newRootNode)", "testcase": false, "constructor": false}, {"identifier": "getNodesInfo", "parameters": "(DefaultBPlusTree<K, V> newTree, BNode<K, V> newRootNode)", "modifiers": "private", "return": "TraverseInfo", "signature": "TraverseInfo getNodesInfo(DefaultBPlusTree<K, V> newTree, BNode<K, V> newRootNode)", "full_signature": "private TraverseInfo getNodesInfo(DefaultBPlusTree<K, V> newTree, BNode<K, V> newRootNode)", "class_method_signature": "DefaultBPlusTree.getNodesInfo(DefaultBPlusTree<K, V> newTree, BNode<K, V> newRootNode)", "testcase": false, "constructor": false}, {"identifier": "traverseNode", "parameters": "(BNode<K, V> node, TraverseInfo info, boolean isLeftNode, boolean isRightNode)", "modifiers": "private", "return": "void", "signature": "void traverseNode(BNode<K, V> node, TraverseInfo info, boolean isLeftNode, boolean isRightNode)", "full_signature": "private void traverseNode(BNode<K, V> node, TraverseInfo info, boolean isLeftNode, boolean isRightNode)", "class_method_signature": "DefaultBPlusTree.traverseNode(BNode<K, V> node, TraverseInfo info, boolean isLeftNode, boolean isRightNode)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DefaultBPlusTree.toString()", "testcase": false, "constructor": false}, {"identifier": "traverseAllNodes", "parameters": "(TraverseCallBack<K, V> traverseCallBack)", "modifiers": "@Override public", "return": "void", "signature": "void traverseAllNodes(TraverseCallBack<K, V> traverseCallBack)", "full_signature": "@Override public void traverseAllNodes(TraverseCallBack<K, V> traverseCallBack)", "class_method_signature": "DefaultBPlusTree.traverseAllNodes(TraverseCallBack<K, V> traverseCallBack)", "testcase": false, "constructor": false}, {"identifier": "traverseAllNodesImpl", "parameters": "(BNode<K, V> node, TraverseCallBack<K, V> traverseCallBack)", "modifiers": "public", "return": "void", "signature": "void traverseAllNodesImpl(BNode<K, V> node, TraverseCallBack<K, V> traverseCallBack)", "full_signature": "public void traverseAllNodesImpl(BNode<K, V> node, TraverseCallBack<K, V> traverseCallBack)", "class_method_signature": "DefaultBPlusTree.traverseAllNodesImpl(BNode<K, V> node, TraverseCallBack<K, V> traverseCallBack)", "testcase": false, "constructor": false}, {"identifier": "entryArray", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Entry<K, V>[]", "signature": "Entry<K, V>[] entryArray()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Entry<K, V>[] entryArray()", "class_method_signature": "DefaultBPlusTree.entryArray()", "testcase": false, "constructor": false}], "file": "zava/src/main/java/com/github/NoahShen/jue/bplustree/DefaultBPlusTree.java"}, "focal_method": {"identifier": "put", "parameters": "(K key, V value)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean put(K key, V value) {\n\t\treturn put(key, value, null);\n\t}", "signature": "boolean put(K key, V value)", "full_signature": "@Override public boolean put(K key, V value)", "class_method_signature": "DefaultBPlusTree.put(K key, V value)", "testcase": false, "constructor": false, "invocations": ["put"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}