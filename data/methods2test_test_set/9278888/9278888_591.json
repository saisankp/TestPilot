{"test_class": {"identifier": "JsonEscaperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "byte[] buf = new byte[20];", "modifier": "", "type": "byte[]", "declarator": "buf = new byte[20]", "var_name": "buf"}], "file": "brave/src/test/java/brave/internal/codec/JsonEscaperTest.java"}, "test_case": {"identifier": "testJsonEscapedSizeInBytes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testJsonEscapedSizeInBytes() {\n    assertThat(jsonEscapedSizeInBytes(new String(new char[] {0, 'a', 1})))\n        .isEqualTo(13);\n    assertThat(jsonEscapedSizeInBytes(new String(new char[] {'\"', '\\\\', '\\t', '\\b'})))\n        .isEqualTo(8);\n    assertThat(jsonEscapedSizeInBytes(new String(new char[] {'\\n', '\\r', '\\f'})))\n        .isEqualTo(6);\n    assertThat(jsonEscapedSizeInBytes(\"\\u2028 and \\u2029\"))\n        .isEqualTo(17);\n    assertThat(jsonEscapedSizeInBytes(\"\\\"foo\"))\n        .isEqualTo(5);\n  }", "signature": "void testJsonEscapedSizeInBytes()", "full_signature": "@Test public void testJsonEscapedSizeInBytes()", "class_method_signature": "JsonEscaperTest.testJsonEscapedSizeInBytes()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "jsonEscapedSizeInBytes", "isEqualTo", "assertThat", "jsonEscapedSizeInBytes", "isEqualTo", "assertThat", "jsonEscapedSizeInBytes", "isEqualTo", "assertThat", "jsonEscapedSizeInBytes", "isEqualTo", "assertThat", "jsonEscapedSizeInBytes"]}, "focal_class": {"identifier": "JsonEscaper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String[] REPLACEMENT_CHARS;", "modifier": "private static final", "type": "String[]", "declarator": "REPLACEMENT_CHARS", "var_name": "REPLACEMENT_CHARS"}, {"original_string": "private static final String U2028 = \"\\\\u2028\";", "modifier": "private static final", "type": "String", "declarator": "U2028 = \"\\\\u2028\"", "var_name": "U2028"}, {"original_string": "private static final String U2029 = \"\\\\u2029\";", "modifier": "private static final", "type": "String", "declarator": "U2029 = \"\\\\u2029\"", "var_name": "U2029"}], "methods": [{"identifier": "jsonEscapedSizeInBytes", "parameters": "(CharSequence v)", "modifiers": "public static", "return": "int", "signature": "int jsonEscapedSizeInBytes(CharSequence v)", "full_signature": "public static int jsonEscapedSizeInBytes(CharSequence v)", "class_method_signature": "JsonEscaper.jsonEscapedSizeInBytes(CharSequence v)", "testcase": false, "constructor": false}, {"identifier": "jsonEscape", "parameters": "(CharSequence in, WriteBuffer out)", "modifiers": "public static", "return": "void", "signature": "void jsonEscape(CharSequence in, WriteBuffer out)", "full_signature": "public static void jsonEscape(CharSequence in, WriteBuffer out)", "class_method_signature": "JsonEscaper.jsonEscape(CharSequence in, WriteBuffer out)", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/internal/codec/JsonEscaper.java"}, "focal_method": {"identifier": "jsonEscapedSizeInBytes", "parameters": "(CharSequence v)", "modifiers": "public static", "return": "int", "body": "public static int jsonEscapedSizeInBytes(CharSequence v) {\n    boolean ascii = true;\n    int escapingOverhead = 0;\n    for (int i = 0, length = v.length(); i < length; i++) {\n      char c = v.charAt(i);\n      if (c == '\\u2028' || c == '\\u2029') {\n        escapingOverhead += 5;\n      } else if (c >= 0x80) {\n        ascii = false;\n      } else {\n        String maybeReplacement = REPLACEMENT_CHARS[c];\n        if (maybeReplacement != null) escapingOverhead += maybeReplacement.length() - 1;\n      }\n    }\n    if (ascii) return v.length() + escapingOverhead;\n    return WriteBuffer.utf8SizeInBytes(v) + escapingOverhead;\n  }", "signature": "int jsonEscapedSizeInBytes(CharSequence v)", "full_signature": "public static int jsonEscapedSizeInBytes(CharSequence v)", "class_method_signature": "JsonEscaper.jsonEscapedSizeInBytes(CharSequence v)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "length", "length", "utf8SizeInBytes"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}