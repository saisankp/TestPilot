{"test_class": {"identifier": "TestAbstractEntry", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long MOCKED_BYTE_SIZE = 5000;", "modifier": "private static final", "type": "long", "declarator": "MOCKED_BYTE_SIZE = 5000", "var_name": "MOCKED_BYTE_SIZE"}, {"original_string": "private static final long MOCKED_ID = 1234567890;", "modifier": "private static final", "type": "long", "declarator": "MOCKED_ID = 1234567890", "var_name": "MOCKED_ID"}, {"original_string": "@Mock\n  private StoreImage mockedImg;", "modifier": "@Mock\n  private", "type": "StoreImage", "declarator": "mockedImg", "var_name": "mockedImg"}, {"original_string": "@Mock\n  private StoreImage mockedImgNotEqual;", "modifier": "@Mock\n  private", "type": "StoreImage", "declarator": "mockedImgNotEqual", "var_name": "mockedImgNotEqual"}, {"original_string": "@Mock\n  private AbstractEntry<StoreImage> nullEntry;", "modifier": "@Mock\n  private", "type": "AbstractEntry<StoreImage>", "declarator": "nullEntry", "var_name": "nullEntry"}], "file": "services/tools.descartes.teastore.image/src/test/java/tools/descartes/teastore/image/cache/entry/TestAbstractEntry.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEquals() {\n    AbstractEntryWrapper uut = new AbstractEntryWrapper(mockedImg);\n    AbstractEntryWrapper uut2 = new AbstractEntryWrapper(mockedImgNotEqual);\n    assertTrue(uut.equals(uut));\n    assertFalse(uut.equals(uut2));\n    assertFalse(uut.equals(null));\n    assertFalse(uut.equals(nullEntry));\n  }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "TestAbstractEntry.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertFalse", "equals", "assertFalse", "equals", "assertFalse", "equals"]}, "focal_class": {"identifier": "AbstractEntry", "superclass": "", "interfaces": "implements ICacheEntry<D>", "fields": [{"original_string": "private D data;", "modifier": "private", "type": "D", "declarator": "data", "var_name": "data"}, {"original_string": "private Logger log = LoggerFactory.getLogger(AbstractEntry.class);", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AbstractEntry.class)", "var_name": "log"}], "methods": [{"identifier": "AbstractEntry", "parameters": "(D data)", "modifiers": "public", "return": "", "signature": " AbstractEntry(D data)", "full_signature": "public  AbstractEntry(D data)", "class_method_signature": "AbstractEntry.AbstractEntry(D data)", "testcase": false, "constructor": true}, {"identifier": "getData", "parameters": "()", "modifiers": "@Override public", "return": "D", "signature": "D getData()", "full_signature": "@Override public D getData()", "class_method_signature": "AbstractEntry.getData()", "testcase": false, "constructor": false}, {"identifier": "wasUsed", "parameters": "()", "modifiers": "@Override public abstract", "return": "void", "signature": "void wasUsed()", "full_signature": "@Override public abstract void wasUsed()", "class_method_signature": "AbstractEntry.wasUsed()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getId()", "full_signature": "@Override public long getId()", "class_method_signature": "AbstractEntry.getId()", "testcase": false, "constructor": false}, {"identifier": "getByteSize", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getByteSize()", "full_signature": "@Override public long getByteSize()", "class_method_signature": "AbstractEntry.getByteSize()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AbstractEntry.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "AbstractEntry.equals(Object obj)", "testcase": false, "constructor": false}], "file": "services/tools.descartes.teastore.image/src/main/java/tools/descartes/teastore/image/cache/entry/AbstractEntry.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (getClass() != obj.getClass()) {\n      return false;\n    }\n    AbstractEntry<?> other = (AbstractEntry<?>) obj;\n    if (data == null) {\n      if (other.data != null) {\n        return false;\n      }\n    } else if (!data.equals(other.data)) {\n      return false;\n    }\n    return true;\n  }", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "AbstractEntry.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "equals"]}, "repository": {"repo_id": 100679870, "url": "https://github.com/DescartesResearch/TeaStore", "language": "Java", "is_fork": false, "fork_count": 31, "stargazer_count": 43, "size": 91777, "license": "licensed"}}