{"test_class": {"identifier": "Socks5PairTest", "superclass": "extends Mockito", "interfaces": "", "fields": [{"original_string": "private String hash = \"foo\";", "modifier": "private", "type": "String", "declarator": "hash = \"foo\"", "var_name": "hash"}, {"original_string": "private IoSession target = mock(IoSession.class);", "modifier": "private", "type": "IoSession", "declarator": "target = mock(IoSession.class)", "var_name": "target"}, {"original_string": "private IoSession requester = mock(IoSession.class);", "modifier": "private", "type": "IoSession", "declarator": "requester = mock(IoSession.class)", "var_name": "requester"}, {"original_string": "private Socks5ConnectionsRegistry connectionsRegistry = mock(Socks5ConnectionsRegistry.class);", "modifier": "private", "type": "Socks5ConnectionsRegistry", "declarator": "connectionsRegistry = mock(Socks5ConnectionsRegistry.class)", "var_name": "connectionsRegistry"}], "file": "server/extensions/xep0065-socks/src/test/java/org/apache/vysper/xmpp/extension/xep0065_socks/Socks5PairTest.java"}, "test_case": {"identifier": "getOther", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getOther() {\n        Socks5Pair pair = new Socks5Pair(target, connectionsRegistry, hash);\n        pair.setRequester(requester);\n        \n        Assert.assertEquals(requester, pair.getOther(target));\n        Assert.assertEquals(target, pair.getOther(requester));\n    }", "signature": "void getOther()", "full_signature": "@Test public void getOther()", "class_method_signature": "Socks5PairTest.getOther()", "testcase": true, "constructor": false, "invocations": ["setRequester", "assertEquals", "getOther", "assertEquals", "getOther"]}, "focal_class": {"identifier": "Socks5Pair", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String hash;", "modifier": "private", "type": "String", "declarator": "hash", "var_name": "hash"}, {"original_string": "private Socks5ConnectionsRegistry registry;", "modifier": "private", "type": "Socks5ConnectionsRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private IoSession requester;", "modifier": "private", "type": "IoSession", "declarator": "requester", "var_name": "requester"}, {"original_string": "private IoSession target;", "modifier": "private", "type": "IoSession", "declarator": "target", "var_name": "target"}, {"original_string": "private AtomicBoolean activated = new AtomicBoolean(false);", "modifier": "private", "type": "AtomicBoolean", "declarator": "activated = new AtomicBoolean(false)", "var_name": "activated"}], "methods": [{"identifier": "Socks5Pair", "parameters": "(IoSession target, Socks5ConnectionsRegistry registry, String hash)", "modifiers": "public", "return": "", "signature": " Socks5Pair(IoSession target, Socks5ConnectionsRegistry registry, String hash)", "full_signature": "public  Socks5Pair(IoSession target, Socks5ConnectionsRegistry registry, String hash)", "class_method_signature": "Socks5Pair.Socks5Pair(IoSession target, Socks5ConnectionsRegistry registry, String hash)", "testcase": false, "constructor": true}, {"identifier": "getOther", "parameters": "(IoSession session)", "modifiers": "public synchronized", "return": "IoSession", "signature": "IoSession getOther(IoSession session)", "full_signature": "public synchronized IoSession getOther(IoSession session)", "class_method_signature": "Socks5Pair.getOther(IoSession session)", "testcase": false, "constructor": false}, {"identifier": "getRequester", "parameters": "()", "modifiers": "public synchronized", "return": "IoSession", "signature": "IoSession getRequester()", "full_signature": "public synchronized IoSession getRequester()", "class_method_signature": "Socks5Pair.getRequester()", "testcase": false, "constructor": false}, {"identifier": "setRequester", "parameters": "(IoSession requester)", "modifiers": "public synchronized", "return": "void", "signature": "void setRequester(IoSession requester)", "full_signature": "public synchronized void setRequester(IoSession requester)", "class_method_signature": "Socks5Pair.setRequester(IoSession requester)", "testcase": false, "constructor": false}, {"identifier": "getTarget", "parameters": "()", "modifiers": "public", "return": "IoSession", "signature": "IoSession getTarget()", "full_signature": "public IoSession getTarget()", "class_method_signature": "Socks5Pair.getTarget()", "testcase": false, "constructor": false}, {"identifier": "isActivated", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isActivated()", "full_signature": "public boolean isActivated()", "class_method_signature": "Socks5Pair.isActivated()", "testcase": false, "constructor": false}, {"identifier": "activate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void activate()", "full_signature": "public void activate()", "class_method_signature": "Socks5Pair.activate()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "Socks5Pair.close()", "testcase": false, "constructor": false}], "file": "server/extensions/xep0065-socks/src/main/java/org/apache/vysper/xmpp/extension/xep0065_socks/Socks5Pair.java"}, "focal_method": {"identifier": "getOther", "parameters": "(IoSession session)", "modifiers": "public synchronized", "return": "IoSession", "body": "public synchronized IoSession getOther(IoSession session) {\n        if(requester.equals(session)) {\n            return target;\n        } else {\n            return requester;\n        }\n    }", "signature": "IoSession getOther(IoSession session)", "full_signature": "public synchronized IoSession getOther(IoSession session)", "class_method_signature": "Socks5Pair.getOther(IoSession session)", "testcase": false, "constructor": false, "invocations": ["equals"]}, "repository": {"repo_id": 165370485, "url": "https://github.com/apache/mina-vysper", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 29305, "license": "licensed"}}