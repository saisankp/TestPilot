{"test_class": {"identifier": "DatatypeFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static DatatypeFactory instance;", "modifier": "private static", "type": "DatatypeFactory", "declarator": "instance", "var_name": "instance"}, {"original_string": "private static Configuration saxonConfiguration;", "modifier": "private static", "type": "Configuration", "declarator": "saxonConfiguration", "var_name": "saxonConfiguration"}], "file": "gaulois-pipe/src/test/java/top/marchand/xml/gaulois/config/typing/DatatypeFactoryTest.java"}, "test_case": {"identifier": "getDatatypeDocumentEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getDatatypeDocumentEmpty() throws ValidationException {\n        QName qn = new QName(\"document()?\");\n        Datatype dt = instance.getDatatype(qn);\n        assertTrue(\"Datatype for document()? does not allow empty\", dt.allowsEmpty());\n    }", "signature": "void getDatatypeDocumentEmpty()", "full_signature": "@Test public void getDatatypeDocumentEmpty()", "class_method_signature": "DatatypeFactoryTest.getDatatypeDocumentEmpty()", "testcase": true, "constructor": false, "invocations": ["getDatatype", "assertTrue", "allowsEmpty"]}, "focal_class": {"identifier": "DatatypeFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DatatypeFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DatatypeFactory.class)", "var_name": "LOGGER"}, {"original_string": "public static final String NS_XSD = \"http://www.w3.org/2001/XMLSchema\";", "modifier": "public static final", "type": "String", "declarator": "NS_XSD = \"http://www.w3.org/2001/XMLSchema\"", "var_name": "NS_XSD"}, {"original_string": "public final Datatype XS_STRING;", "modifier": "public final", "type": "Datatype", "declarator": "XS_STRING", "var_name": "XS_STRING"}, {"original_string": "private HashMap<QName,Datatype> constructed = new HashMap<>();", "modifier": "private", "type": "HashMap<QName,Datatype>", "declarator": "constructed = new HashMap<>()", "var_name": "constructed"}, {"original_string": "private final BuiltInAtomicType[] ATOMIC_TYPES = {\n        BuiltInAtomicType.ANY_ATOMIC, BuiltInAtomicType.ANY_URI,\n        BuiltInAtomicType.BASE64_BINARY, BuiltInAtomicType.BOOLEAN,\n        BuiltInAtomicType.BYTE, BuiltInAtomicType.DATE,\n        BuiltInAtomicType.DATE_TIME, BuiltInAtomicType.DATE_TIME_STAMP,\n        BuiltInAtomicType.DAY_TIME_DURATION, BuiltInAtomicType.DECIMAL,\n        BuiltInAtomicType.DOUBLE, BuiltInAtomicType.DURATION,\n        BuiltInAtomicType.ENTITY, BuiltInAtomicType.FLOAT,\n        BuiltInAtomicType.G_DAY, BuiltInAtomicType.G_MONTH,\n        BuiltInAtomicType.G_MONTH_DAY, BuiltInAtomicType.G_YEAR,\n        BuiltInAtomicType.G_YEAR_MONTH, BuiltInAtomicType.HEX_BINARY,\n        BuiltInAtomicType.ID, BuiltInAtomicType.IDREF,\n        BuiltInAtomicType.INT, BuiltInAtomicType.INTEGER,\n        BuiltInAtomicType.LANGUAGE, BuiltInAtomicType.LONG,\n        BuiltInAtomicType.NAME, BuiltInAtomicType.NCNAME,\n        BuiltInAtomicType.NEGATIVE_INTEGER, BuiltInAtomicType.NMTOKEN,\n        BuiltInAtomicType.NON_NEGATIVE_INTEGER, BuiltInAtomicType.NON_POSITIVE_INTEGER,\n        BuiltInAtomicType.NORMALIZED_STRING, BuiltInAtomicType.NOTATION,\n        BuiltInAtomicType.POSITIVE_INTEGER, BuiltInAtomicType.QNAME,\n        BuiltInAtomicType.SHORT, BuiltInAtomicType.STRING,\n        BuiltInAtomicType.TIME, BuiltInAtomicType.TOKEN,\n        BuiltInAtomicType.UNSIGNED_BYTE, BuiltInAtomicType.UNSIGNED_INT,\n        BuiltInAtomicType.UNSIGNED_LONG, BuiltInAtomicType.UNSIGNED_SHORT,\n        BuiltInAtomicType.UNTYPED_ATOMIC, BuiltInAtomicType.YEAR_MONTH_DURATION\n    };", "modifier": "private final", "type": "BuiltInAtomicType[]", "declarator": "ATOMIC_TYPES = {\n        BuiltInAtomicType.ANY_ATOMIC, BuiltInAtomicType.ANY_URI,\n        BuiltInAtomicType.BASE64_BINARY, BuiltInAtomicType.BOOLEAN,\n        BuiltInAtomicType.BYTE, BuiltInAtomicType.DATE,\n        BuiltInAtomicType.DATE_TIME, BuiltInAtomicType.DATE_TIME_STAMP,\n        BuiltInAtomicType.DAY_TIME_DURATION, BuiltInAtomicType.DECIMAL,\n        BuiltInAtomicType.DOUBLE, BuiltInAtomicType.DURATION,\n        BuiltInAtomicType.ENTITY, BuiltInAtomicType.FLOAT,\n        BuiltInAtomicType.G_DAY, BuiltInAtomicType.G_MONTH,\n        BuiltInAtomicType.G_MONTH_DAY, BuiltInAtomicType.G_YEAR,\n        BuiltInAtomicType.G_YEAR_MONTH, BuiltInAtomicType.HEX_BINARY,\n        BuiltInAtomicType.ID, BuiltInAtomicType.IDREF,\n        BuiltInAtomicType.INT, BuiltInAtomicType.INTEGER,\n        BuiltInAtomicType.LANGUAGE, BuiltInAtomicType.LONG,\n        BuiltInAtomicType.NAME, BuiltInAtomicType.NCNAME,\n        BuiltInAtomicType.NEGATIVE_INTEGER, BuiltInAtomicType.NMTOKEN,\n        BuiltInAtomicType.NON_NEGATIVE_INTEGER, BuiltInAtomicType.NON_POSITIVE_INTEGER,\n        BuiltInAtomicType.NORMALIZED_STRING, BuiltInAtomicType.NOTATION,\n        BuiltInAtomicType.POSITIVE_INTEGER, BuiltInAtomicType.QNAME,\n        BuiltInAtomicType.SHORT, BuiltInAtomicType.STRING,\n        BuiltInAtomicType.TIME, BuiltInAtomicType.TOKEN,\n        BuiltInAtomicType.UNSIGNED_BYTE, BuiltInAtomicType.UNSIGNED_INT,\n        BuiltInAtomicType.UNSIGNED_LONG, BuiltInAtomicType.UNSIGNED_SHORT,\n        BuiltInAtomicType.UNTYPED_ATOMIC, BuiltInAtomicType.YEAR_MONTH_DURATION\n    }", "var_name": "ATOMIC_TYPES"}, {"original_string": "private final ConversionRules conversionRules;", "modifier": "private final", "type": "ConversionRules", "declarator": "conversionRules", "var_name": "conversionRules"}], "methods": [{"identifier": "DatatypeFactory", "parameters": "(ConversionRules conversionRules)", "modifiers": "@SuppressWarnings(\"OverridableMethodCallInConstructor\") private", "return": "", "signature": " DatatypeFactory(ConversionRules conversionRules)", "full_signature": "@SuppressWarnings(\"OverridableMethodCallInConstructor\") private  DatatypeFactory(ConversionRules conversionRules)", "class_method_signature": "DatatypeFactory.DatatypeFactory(ConversionRules conversionRules)", "testcase": false, "constructor": true}, {"identifier": "getDatatype", "parameters": "(QName qn)", "modifiers": "public", "return": "Datatype", "signature": "Datatype getDatatype(QName qn)", "full_signature": "public Datatype getDatatype(QName qn)", "class_method_signature": "DatatypeFactory.getDatatype(QName qn)", "testcase": false, "constructor": false}, {"identifier": "constructDatatype", "parameters": "(final QName qn)", "modifiers": "protected", "return": "Datatype", "signature": "Datatype constructDatatype(final QName qn)", "full_signature": "protected Datatype constructDatatype(final QName qn)", "class_method_signature": "DatatypeFactory.constructDatatype(final QName qn)", "testcase": false, "constructor": false}, {"identifier": "constructAtomicDatatype", "parameters": "(final QName qn, final boolean allowsEmpty, final boolean allowsMultiple)", "modifiers": "private", "return": "Datatype", "signature": "Datatype constructAtomicDatatype(final QName qn, final boolean allowsEmpty, final boolean allowsMultiple)", "full_signature": "private Datatype constructAtomicDatatype(final QName qn, final boolean allowsEmpty, final boolean allowsMultiple)", "class_method_signature": "DatatypeFactory.constructAtomicDatatype(final QName qn, final boolean allowsEmpty, final boolean allowsMultiple)", "testcase": false, "constructor": false}, {"identifier": "constructNodeDatatype", "parameters": "(final QName qn, final boolean allowsEmpty, final boolean allowsMultiple)", "modifiers": "private", "return": "Datatype", "signature": "Datatype constructNodeDatatype(final QName qn, final boolean allowsEmpty, final boolean allowsMultiple)", "full_signature": "private Datatype constructNodeDatatype(final QName qn, final boolean allowsEmpty, final boolean allowsMultiple)", "class_method_signature": "DatatypeFactory.constructNodeDatatype(final QName qn, final boolean allowsEmpty, final boolean allowsMultiple)", "testcase": false, "constructor": false}, {"identifier": "constructElementParserDatatype", "parameters": "(final QName qn, final boolean allowsEmpty, final boolean allowsMultiple)", "modifiers": "private", "return": "Datatype", "signature": "Datatype constructElementParserDatatype(final QName qn, final boolean allowsEmpty, final boolean allowsMultiple)", "full_signature": "private Datatype constructElementParserDatatype(final QName qn, final boolean allowsEmpty, final boolean allowsMultiple)", "class_method_signature": "DatatypeFactory.constructElementParserDatatype(final QName qn, final boolean allowsEmpty, final boolean allowsMultiple)", "testcase": false, "constructor": false}, {"identifier": "constructDocumentParserDatatype", "parameters": "(final QName qn, final boolean allowsEmpty, final boolean allowsMultiple)", "modifiers": "private", "return": "Datatype", "signature": "Datatype constructDocumentParserDatatype(final QName qn, final boolean allowsEmpty, final boolean allowsMultiple)", "full_signature": "private Datatype constructDocumentParserDatatype(final QName qn, final boolean allowsEmpty, final boolean allowsMultiple)", "class_method_signature": "DatatypeFactory.constructDocumentParserDatatype(final QName qn, final boolean allowsEmpty, final boolean allowsMultiple)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(Configuration configuration)", "modifiers": "public static", "return": "DatatypeFactory", "signature": "DatatypeFactory getInstance(Configuration configuration)", "full_signature": "public static DatatypeFactory getInstance(Configuration configuration)", "class_method_signature": "DatatypeFactory.getInstance(Configuration configuration)", "testcase": false, "constructor": false}], "file": "gaulois-pipe/src/main/java/top/marchand/xml/gaulois/config/typing/DatatypeFactory.java"}, "focal_method": {"identifier": "getDatatype", "parameters": "(QName qn)", "modifiers": "public", "return": "Datatype", "body": "public Datatype getDatatype(QName qn) throws ValidationException {\n        Datatype ret = constructed.get(qn);\n        if(ret==null) {\n            ret = constructDatatype(qn);\n            constructed.put(qn, ret);\n        }\n        return ret;\n    }", "signature": "Datatype getDatatype(QName qn)", "full_signature": "public Datatype getDatatype(QName qn)", "class_method_signature": "DatatypeFactory.getDatatype(QName qn)", "testcase": false, "constructor": false, "invocations": ["get", "constructDatatype", "put"]}, "repository": {"repo_id": 56587374, "url": "https://github.com/cmarchand/gaulois-pipe", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 506, "license": "licensed"}}