{"test_class": {"identifier": "IntelliJStackTraceGroupTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String STACK_STRING_A =\n    \"com.example.FakeA.func1(FakeA.java:123)\\n\" +\n    \"com.example.FakeA.func2(FakeA.java:456)\\n\" +\n    \"com.example.FakeA.func3(FakeA.java:789)\\n\";", "modifier": "private static final", "type": "String", "declarator": "STACK_STRING_A =\n    \"com.example.FakeA.func1(FakeA.java:123)\\n\" +\n    \"com.example.FakeA.func2(FakeA.java:456)\\n\" +\n    \"com.example.FakeA.func3(FakeA.java:789)\\n\"", "var_name": "STACK_STRING_A"}, {"original_string": "private static final String STACK_STRING_B =\n    \"com.example.FakeB.func1(FakeB.java:123)\\n\" +\n    \"com.example.FakeB.func2(FakeB.java:456)\\n\" +\n    \"com.example.FakeB.func3(FakeB.java:789)\\n\" +\n    \"com.example.FakeB.func4(FakeB.java:1011)\\n\";", "modifier": "private static final", "type": "String", "declarator": "STACK_STRING_B =\n    \"com.example.FakeB.func1(FakeB.java:123)\\n\" +\n    \"com.example.FakeB.func2(FakeB.java:456)\\n\" +\n    \"com.example.FakeB.func3(FakeB.java:789)\\n\" +\n    \"com.example.FakeB.func4(FakeB.java:1011)\\n\"", "var_name": "STACK_STRING_B"}], "file": "profilers-android/testSrc/com/android/tools/idea/profilers/stacktrace/IntelliJStackTraceGroupTest.java"}, "test_case": {"identifier": "canOnlySelectOneStackTraceViewAtATime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void canOnlySelectOneStackTraceViewAtATime() {\n    IntelliJStackTraceGroup group = new IntelliJStackTraceGroup(\n      ProjectStub.getInstance(),\n      ((project, model) -> IntelliJStackTraceViewTest.createStackTraceView(project, model)));\n\n    StackTraceModel model1 = IntelliJStackTraceViewTest.createStackTraceModel();\n    StackTraceModel model2 = IntelliJStackTraceViewTest.createStackTraceModel();\n\n    // IntelliJStackTraceGroup always creates IntelliJStackTraceView instances\n    IntelliJStackTraceView view1 = (IntelliJStackTraceView)group.createStackView(model1);\n    IntelliJStackTraceView view2 = (IntelliJStackTraceView)group.createStackView(model2);\n\n    model1.setStackFrames(STACK_STRING_A);\n    model2.setStackFrames(STACK_STRING_B);\n\n    assertThat(view1.getListView().getSelectedIndex()).isLessThan(0);\n    assertThat(view2.getListView().getSelectedIndex()).isLessThan(0);\n\n    view1.getListView().setSelectedIndex(1);\n\n    assertThat(view1.getListView().getSelectedIndex()).isEqualTo(1);\n    assertThat(view2.getListView().getSelectedIndex()).isLessThan(0);\n\n    view2.getListView().setSelectedIndex(2);\n\n    assertThat(view1.getListView().getSelectedIndex()).isLessThan(0);\n    assertThat(view2.getListView().getSelectedIndex()).isEqualTo(2);\n  }", "signature": "void canOnlySelectOneStackTraceViewAtATime()", "full_signature": "@Test public void canOnlySelectOneStackTraceViewAtATime()", "class_method_signature": "IntelliJStackTraceGroupTest.canOnlySelectOneStackTraceViewAtATime()", "testcase": true, "constructor": false, "invocations": ["getInstance", "createStackTraceView", "createStackTraceModel", "createStackTraceModel", "createStackView", "createStackView", "setStackFrames", "setStackFrames", "isLessThan", "assertThat", "getSelectedIndex", "getListView", "isLessThan", "assertThat", "getSelectedIndex", "getListView", "setSelectedIndex", "getListView", "isEqualTo", "assertThat", "getSelectedIndex", "getListView", "isLessThan", "assertThat", "getSelectedIndex", "getListView", "setSelectedIndex", "getListView", "isLessThan", "assertThat", "getSelectedIndex", "getListView", "isEqualTo", "assertThat", "getSelectedIndex", "getListView"]}, "focal_class": {"identifier": "IntelliJStackTraceGroup", "superclass": "", "interfaces": "implements StackTraceGroup", "fields": [{"original_string": "private final Project myProject;", "modifier": "private final", "type": "Project", "declarator": "myProject", "var_name": "myProject"}, {"original_string": "private final BiFunction<Project, StackTraceModel, IntelliJStackTraceView> myViewGenerator;", "modifier": "private final", "type": "BiFunction<Project, StackTraceModel, IntelliJStackTraceView>", "declarator": "myViewGenerator", "var_name": "myViewGenerator"}, {"original_string": "private final List<IntelliJStackTraceView> myStackTraceViews = new ArrayList<>();", "modifier": "private final", "type": "List<IntelliJStackTraceView>", "declarator": "myStackTraceViews = new ArrayList<>()", "var_name": "myStackTraceViews"}], "methods": [{"identifier": "IntelliJStackTraceGroup", "parameters": "(@NotNull Project project)", "modifiers": "public", "return": "", "signature": " IntelliJStackTraceGroup(@NotNull Project project)", "full_signature": "public  IntelliJStackTraceGroup(@NotNull Project project)", "class_method_signature": "IntelliJStackTraceGroup.IntelliJStackTraceGroup(@NotNull Project project)", "testcase": false, "constructor": true}, {"identifier": "IntelliJStackTraceGroup", "parameters": "(@NotNull Project project,\n                          @NotNull BiFunction<Project, StackTraceModel, IntelliJStackTraceView> viewGenerator)", "modifiers": "@VisibleForTesting", "return": "", "signature": " IntelliJStackTraceGroup(@NotNull Project project,\n                          @NotNull BiFunction<Project, StackTraceModel, IntelliJStackTraceView> viewGenerator)", "full_signature": "@VisibleForTesting  IntelliJStackTraceGroup(@NotNull Project project,\n                          @NotNull BiFunction<Project, StackTraceModel, IntelliJStackTraceView> viewGenerator)", "class_method_signature": "IntelliJStackTraceGroup.IntelliJStackTraceGroup(@NotNull Project project,\n                          @NotNull BiFunction<Project, StackTraceModel, IntelliJStackTraceView> viewGenerator)", "testcase": false, "constructor": true}, {"identifier": "createStackView", "parameters": "(@NotNull StackTraceModel model)", "modifiers": "@Override @NotNull public", "return": "StackTraceView", "signature": "StackTraceView createStackView(@NotNull StackTraceModel model)", "full_signature": "@Override @NotNull public StackTraceView createStackView(@NotNull StackTraceModel model)", "class_method_signature": "IntelliJStackTraceGroup.createStackView(@NotNull StackTraceModel model)", "testcase": false, "constructor": false}], "file": "profilers-android/src/com/android/tools/idea/profilers/stacktrace/IntelliJStackTraceGroup.java"}, "focal_method": {"identifier": "createStackView", "parameters": "(@NotNull StackTraceModel model)", "modifiers": "@Override @NotNull public", "return": "StackTraceView", "body": "@Override\n  @NotNull\n  public StackTraceView createStackView(@NotNull StackTraceModel model) {\n    IntelliJStackTraceView view = myViewGenerator.apply(myProject, model);\n    myStackTraceViews.add(view);\n\n    view.addListSelectionListener(new ListSelectionListener() {\n      @Override\n      public void valueChanged(ListSelectionEvent e) {\n        // Ignore when a view had its selection cleared, since that shouldn't affect other views\n        // in the group (and may have even been externally caused by another one)\n        if (((JList)e.getSource()).getSelectedIndex() < 0) {\n          return;\n        }\n\n        myStackTraceViews.forEach(otherView -> {\n          if (otherView != view) {\n            otherView.clearSelection();\n          }\n        });\n      }\n    });\n\n    return view;\n  }", "signature": "StackTraceView createStackView(@NotNull StackTraceModel model)", "full_signature": "@Override @NotNull public StackTraceView createStackView(@NotNull StackTraceModel model)", "class_method_signature": "IntelliJStackTraceGroup.createStackView(@NotNull StackTraceModel model)", "testcase": false, "constructor": false, "invocations": ["apply", "add", "addListSelectionListener", "getSelectedIndex", "getSource", "forEach", "clearSelection"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}