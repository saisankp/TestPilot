{"test_class": {"identifier": "UserServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CassandraOperation cassandraOperation;", "modifier": "private", "type": "CassandraOperation", "declarator": "cassandraOperation", "var_name": "cassandraOperation"}, {"original_string": "private EncryptionService encryptionService;", "modifier": "private", "type": "EncryptionService", "declarator": "encryptionService", "var_name": "encryptionService"}, {"original_string": "private UserService userService=new UserService();", "modifier": "private", "type": "UserService", "declarator": "userService=new UserService()", "var_name": "userService"}, {"original_string": "private Util.DbInfo userDb = Util.dbInfoMap.get(JsonKey.USER_DB);", "modifier": "private", "type": "Util.DbInfo", "declarator": "userDb = Util.dbInfoMap.get(JsonKey.USER_DB)", "var_name": "userDb"}], "file": "actors/common/src/test/java/org/sunbird/learner/actors/user/service/UserServiceTest.java"}, "test_case": {"identifier": "testCheckKeyUniquenessWhenPhoneValueIsUnique", "parameters": "()", "modifiers": "@Test() public", "return": "void", "body": "@Test()\n    public void testCheckKeyUniquenessWhenPhoneValueIsUnique(){\n        try{\n            Response response=new Response();\n            List<Map<String, Object>> userMapList =new ArrayList<>();\n            response.put(JsonKey.RESPONSE,userMapList);\n            when(encryptionService.encryptData(\"valueUnique\")).thenReturn(\"valueUnique\");\n            when(cassandraOperation.getRecordsByIndexedProperty(userDb.getKeySpace(), userDb.getTableName(), \"phone\", \"valueUnique\")).thenReturn(response);\n            userService.checkKeyUniqueness(\"phone\",\"valueUnique\",true);\n        }catch (Exception e) {\n            Assert.assertTrue(false);\n        }\n    }", "signature": "void testCheckKeyUniquenessWhenPhoneValueIsUnique()", "full_signature": "@Test() public void testCheckKeyUniquenessWhenPhoneValueIsUnique()", "class_method_signature": "UserServiceTest.testCheckKeyUniquenessWhenPhoneValueIsUnique()", "testcase": true, "constructor": false, "invocations": ["put", "thenReturn", "when", "encryptData", "thenReturn", "when", "getRecordsByIndexedProperty", "getKeySpace", "getTableName", "checkKeyUniqueness", "assertTrue"]}, "focal_class": {"identifier": "UserService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DbInfo userDb = Util.dbInfoMap.get(JsonKey.USER_DB);", "modifier": "private", "type": "DbInfo", "declarator": "userDb = Util.dbInfoMap.get(JsonKey.USER_DB)", "var_name": "userDb"}], "methods": [{"identifier": "checkKeyUniqueness", "parameters": "(String key, String value, boolean isEncrypted)", "modifiers": "public", "return": "void", "signature": "void checkKeyUniqueness(String key, String value, boolean isEncrypted)", "full_signature": "public void checkKeyUniqueness(String key, String value, boolean isEncrypted)", "class_method_signature": "UserService.checkKeyUniqueness(String key, String value, boolean isEncrypted)", "testcase": false, "constructor": false}, {"identifier": "getCassandraOperation", "parameters": "()", "modifiers": "private", "return": "CassandraOperation", "signature": "CassandraOperation getCassandraOperation()", "full_signature": "private CassandraOperation getCassandraOperation()", "class_method_signature": "UserService.getCassandraOperation()", "testcase": false, "constructor": false}, {"identifier": "getEncryptionService", "parameters": "()", "modifiers": "private", "return": "EncryptionService", "signature": "EncryptionService getEncryptionService()", "full_signature": "private EncryptionService getEncryptionService()", "class_method_signature": "UserService.getEncryptionService()", "testcase": false, "constructor": false}], "file": "actors/common/src/main/java/org/sunbird/learner/actors/user/service/UserService.java"}, "focal_method": {"identifier": "checkKeyUniqueness", "parameters": "(String key, String value, boolean isEncrypted)", "modifiers": "public", "return": "void", "body": "public void checkKeyUniqueness(String key, String value, boolean isEncrypted) {\n    if (StringUtils.isBlank(key) || StringUtils.isBlank(value)) {\n      ProjectLogger.log(\n          \"UserService:checkKeyUniqueness: Key or value is null. key = \"\n              + key\n              + \" value= \"\n              + value,\n          LoggerEnum.ERROR.name());\n      return;\n    }\n    String val = value;\n    if (isEncrypted) {\n      try {\n        val = getEncryptionService().encryptData(val);\n      } catch (Exception e) {\n        ProjectLogger.log(\n            \"UserService:checkKeyUniqueness: Exception occurred with error message = \"\n                + e.getMessage(),\n            e);\n      }\n    }\n\n    Response result = getCassandraOperation().getRecordsByIndexedProperty(userDb.getKeySpace(), userDb.getTableName(), key, val);\n\n    List<Map<String, Object>> userMapList =\n        (List<Map<String, Object>>) result.get(JsonKey.RESPONSE);\n\n    if (!userMapList.isEmpty()) {\n      ResponseCode responseCode = null;\n      if (JsonKey.EMAIL.equals(key)) {\n        responseCode = ResponseCode.emailInUse;\n      } else if (JsonKey.PHONE.equals(key)) {\n        responseCode = ResponseCode.PhoneNumberInUse;\n      }\n      ProjectCommonException.throwClientErrorException(responseCode, null);\n    }\n  }", "signature": "void checkKeyUniqueness(String key, String value, boolean isEncrypted)", "full_signature": "public void checkKeyUniqueness(String key, String value, boolean isEncrypted)", "class_method_signature": "UserService.checkKeyUniqueness(String key, String value, boolean isEncrypted)", "testcase": false, "constructor": false, "invocations": ["isBlank", "isBlank", "log", "name", "encryptData", "getEncryptionService", "log", "getMessage", "getRecordsByIndexedProperty", "getCassandraOperation", "getKeySpace", "getTableName", "get", "isEmpty", "equals", "equals", "throwClientErrorException"]}, "repository": {"repo_id": 96122408, "url": "https://github.com/project-sunbird/sunbird-lms-mw", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 5, "size": 15380, "license": "licensed"}}