{"test_class": {"identifier": "DenseVectorSummarizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/statistics/basicstatistic/DenseVectorSummarizerTest.java"}, "test_case": {"identifier": "visit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void visit() {\n        DenseVectorSummarizer summarizer = summarizer();\n\n        assertEquals(5, summarizer.count);\n        assertArrayEquals(new double[]{15.0, -15.0, 15.0}, summarizer.sum.getData(), 10e-6);\n        assertArrayEquals(new double[]{55.0, 55.0, 45.0}, summarizer.squareSum.getData(), 10e-6);\n        assertArrayEquals(new double[]{1.0, -5.0, 3.0}, summarizer.min.getData(), 10e-6);\n        assertArrayEquals(new double[]{5.0, -1.0, 3.0}, summarizer.max.getData(), 10e-6);\n        assertArrayEquals(new double[]{15.0, 15.0, 15.0}, summarizer.normL1.getData(), 10e-6);\n    }", "signature": "void visit()", "full_signature": "@Test public void visit()", "class_method_signature": "DenseVectorSummarizerTest.visit()", "testcase": true, "constructor": false, "invocations": ["summarizer", "assertEquals", "assertArrayEquals", "getData", "assertArrayEquals", "getData", "assertArrayEquals", "getData", "assertArrayEquals", "getData", "assertArrayEquals", "getData"]}, "focal_class": {"identifier": "DenseVectorSummarizer", "superclass": "extends BaseVectorSummarizer", "interfaces": "", "fields": [{"original_string": "public DenseVector sum;", "modifier": "public", "type": "DenseVector", "declarator": "sum", "var_name": "sum"}, {"original_string": "public DenseVector squareSum;", "modifier": "public", "type": "DenseVector", "declarator": "squareSum", "var_name": "squareSum"}, {"original_string": "public DenseVector min;", "modifier": "public", "type": "DenseVector", "declarator": "min", "var_name": "min"}, {"original_string": "public DenseVector max;", "modifier": "public", "type": "DenseVector", "declarator": "max", "var_name": "max"}, {"original_string": "public DenseVector normL1;", "modifier": "public", "type": "DenseVector", "declarator": "normL1", "var_name": "normL1"}, {"original_string": "public DenseVector numNonZero;", "modifier": "public", "type": "DenseVector", "declarator": "numNonZero", "var_name": "numNonZero"}], "methods": [{"identifier": "DenseVectorSummarizer", "parameters": "()", "modifiers": "", "return": "", "signature": " DenseVectorSummarizer()", "full_signature": "  DenseVectorSummarizer()", "class_method_signature": "DenseVectorSummarizer.DenseVectorSummarizer()", "testcase": false, "constructor": true}, {"identifier": "DenseVectorSummarizer", "parameters": "(boolean calculateOuterProduction)", "modifiers": "public", "return": "", "signature": " DenseVectorSummarizer(boolean calculateOuterProduction)", "full_signature": "public  DenseVectorSummarizer(boolean calculateOuterProduction)", "class_method_signature": "DenseVectorSummarizer.DenseVectorSummarizer(boolean calculateOuterProduction)", "testcase": false, "constructor": true}, {"identifier": "visit", "parameters": "(Vector vec)", "modifiers": "@Override public", "return": "BaseVectorSummarizer", "signature": "BaseVectorSummarizer visit(Vector vec)", "full_signature": "@Override public BaseVectorSummarizer visit(Vector vec)", "class_method_signature": "DenseVectorSummarizer.visit(Vector vec)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(int n)", "modifiers": "private", "return": "void", "signature": "void init(int n)", "full_signature": "private void init(int n)", "class_method_signature": "DenseVectorSummarizer.init(int n)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DenseVectorSummarizer.toString()", "testcase": false, "constructor": false}, {"identifier": "toSummary", "parameters": "()", "modifiers": "@Override public", "return": "BaseVectorSummary", "signature": "BaseVectorSummary toSummary()", "full_signature": "@Override public BaseVectorSummary toSummary()", "class_method_signature": "DenseVectorSummarizer.toSummary()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "protected", "return": "DenseVectorSummarizer", "signature": "DenseVectorSummarizer copy()", "full_signature": "protected DenseVectorSummarizer copy()", "class_method_signature": "DenseVectorSummarizer.copy()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/statistics/basicstatistic/DenseVectorSummarizer.java"}, "focal_method": {"identifier": "visit", "parameters": "(Vector vec)", "modifiers": "@Override public", "return": "BaseVectorSummarizer", "body": "@Override\n    public BaseVectorSummarizer visit(Vector vec) {\n        if (vec instanceof DenseVector) {\n            DenseVector dv = (DenseVector) vec;\n\n            int n = dv.size();\n\n            if (count == 0) {\n                init(n);\n            }\n\n            count++;\n\n            if (sum.size() >= n) {\n                for (int i = 0; i < n; i++) {\n                    double value = dv.get(i);\n                    if (!Double.isNaN(value)) {\n                        if (value < min.get(i)) {\n                            min.set(i, value);\n                        }\n\n                        if (value > max.get(i)) {\n                            max.set(i, value);\n                        }\n\n                        if (0 != value) {\n                            sum.add(i, value);\n                            normL1.add(i, Math.abs(value));\n                            squareSum.add(i, value * value);\n                            numNonZero.add(i, 1);\n                        }\n                    }\n                }\n\n                if (calculateOuterProduct) {\n                    if (outerProduct == null) {\n                        outerProduct = dv.outer();\n                    } else {\n                        for (int i = 0; i < n; i++) {\n                            for (int j = 0; j < n; j++) {\n                                outerProduct.add(i, j, dv.get(i) * dv.get(j));\n                            }\n                        }\n                    }\n                }\n                return this;\n            } else {\n                DenseVectorSummarizer summarizer = new DenseVectorSummarizer(calculateOuterProduct);\n                summarizer.visit(vec);\n                return VectorSummarizerUtil.merge(summarizer, this);\n            }\n        } else {\n            SparseVectorSummarizer sparseSrt = new SparseVectorSummarizer(calculateOuterProduct);\n            sparseSrt.visit(vec);\n            return VectorSummarizerUtil.merge(sparseSrt, this);\n        }\n    }", "signature": "BaseVectorSummarizer visit(Vector vec)", "full_signature": "@Override public BaseVectorSummarizer visit(Vector vec)", "class_method_signature": "DenseVectorSummarizer.visit(Vector vec)", "testcase": false, "constructor": false, "invocations": ["size", "init", "size", "get", "isNaN", "get", "set", "get", "set", "add", "add", "abs", "add", "add", "outer", "add", "get", "get", "visit", "merge", "visit", "merge"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}