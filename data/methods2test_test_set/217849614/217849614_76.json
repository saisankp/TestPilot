{"test_class": {"identifier": "AbstractBloomFilterConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "filter-service-core/src/test/java/cn/leancloud/filter/service/AbstractBloomFilterConfigTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        final double fpp = ThreadLocalRandom.current().nextDouble(0.0001, 1);\n        final int expectedInsertions = ThreadLocalRandom.current().nextInt(1, Integer.MAX_VALUE);\n        final TestingBloomFilterConfig filterA = new TestingBloomFilterConfig()\n                .setFpp(fpp)\n                .setExpectedInsertions(expectedInsertions);\n\n        final TestingBloomFilterConfig filterB = new TestingBloomFilterConfig()\n                .setFpp(fpp)\n                .setExpectedInsertions(expectedInsertions);\n\n        assertThat(filterA).isEqualTo(filterB);\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "AbstractBloomFilterConfigTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["nextDouble", "current", "nextInt", "current", "setExpectedInsertions", "setFpp", "setExpectedInsertions", "setFpp", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "AbstractBloomFilterConfig", "superclass": "", "interfaces": "implements BloomFilterConfig<T>, Cloneable", "fields": [{"original_string": "private int expectedInsertions;", "modifier": "private", "type": "int", "declarator": "expectedInsertions", "var_name": "expectedInsertions"}, {"original_string": "private double fpp;", "modifier": "private", "type": "double", "declarator": "fpp", "var_name": "fpp"}], "methods": [{"identifier": "AbstractBloomFilterConfig", "parameters": "()", "modifiers": "", "return": "", "signature": " AbstractBloomFilterConfig()", "full_signature": "  AbstractBloomFilterConfig()", "class_method_signature": "AbstractBloomFilterConfig.AbstractBloomFilterConfig()", "testcase": false, "constructor": true}, {"identifier": "AbstractBloomFilterConfig", "parameters": "(int expectedInsertions, double fpp)", "modifiers": "", "return": "", "signature": " AbstractBloomFilterConfig(int expectedInsertions, double fpp)", "full_signature": "  AbstractBloomFilterConfig(int expectedInsertions, double fpp)", "class_method_signature": "AbstractBloomFilterConfig.AbstractBloomFilterConfig(int expectedInsertions, double fpp)", "testcase": false, "constructor": true}, {"identifier": "expectedInsertions", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int expectedInsertions()", "full_signature": "public int expectedInsertions()", "class_method_signature": "AbstractBloomFilterConfig.expectedInsertions()", "testcase": false, "constructor": false}, {"identifier": "fpp", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double fpp()", "full_signature": "public double fpp()", "class_method_signature": "AbstractBloomFilterConfig.fpp()", "testcase": false, "constructor": false}, {"identifier": "setExpectedInsertions", "parameters": "(int expectedInsertions)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "signature": "T setExpectedInsertions(int expectedInsertions)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T setExpectedInsertions(int expectedInsertions)", "class_method_signature": "AbstractBloomFilterConfig.setExpectedInsertions(int expectedInsertions)", "testcase": false, "constructor": false}, {"identifier": "setFpp", "parameters": "(double fpp)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "signature": "T setFpp(double fpp)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T setFpp(double fpp)", "class_method_signature": "AbstractBloomFilterConfig.setFpp(double fpp)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "AbstractBloomFilterConfig.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AbstractBloomFilterConfig.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AbstractBloomFilterConfig.toString()", "testcase": false, "constructor": false}, {"identifier": "self", "parameters": "()", "modifiers": "protected abstract", "return": "T", "signature": "T self()", "full_signature": "protected abstract T self()", "class_method_signature": "AbstractBloomFilterConfig.self()", "testcase": false, "constructor": false}], "file": "filter-service-core/src/main/java/cn/leancloud/filter/service/AbstractBloomFilterConfig.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        final AbstractBloomFilterConfig<?> that = (AbstractBloomFilterConfig<?>) o;\n        return expectedInsertions() == that.expectedInsertions() &&\n                Double.compare(that.fpp(), fpp()) == 0;\n    }", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "AbstractBloomFilterConfig.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "expectedInsertions", "expectedInsertions", "compare", "fpp", "fpp"]}, "repository": {"repo_id": 217849614, "url": "https://github.com/leancloud/filter-service", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 2797, "license": "licensed"}}