{"test_class": {"identifier": "TripsTableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NAME_1 = \"Trip1\";", "modifier": "private static final", "type": "String", "declarator": "NAME_1 = \"Trip1\"", "var_name": "NAME_1"}, {"original_string": "private static final String NAME_2 = \"Trip2\";", "modifier": "private static final", "type": "String", "declarator": "NAME_2 = \"Trip2\"", "var_name": "NAME_2"}, {"original_string": "private static final String NAME_3 = \"Trip3\";", "modifier": "private static final", "type": "String", "declarator": "NAME_3 = \"Trip3\"", "var_name": "NAME_3"}, {"original_string": "private static final long START_DATE_2 = 1409703721000L;", "modifier": "private static final", "type": "long", "declarator": "START_DATE_2 = 1409703721000L", "var_name": "START_DATE_2"}, {"original_string": "private static final long START_DATE_1 = 1409703722000L;", "modifier": "private static final", "type": "long", "declarator": "START_DATE_1 = 1409703722000L", "var_name": "START_DATE_1"}, {"original_string": "private static final long END_DATE_2 = 1409703793000L;", "modifier": "private static final", "type": "long", "declarator": "END_DATE_2 = 1409703793000L", "var_name": "END_DATE_2"}, {"original_string": "private static final long END_DATE_1 = 1409703794000L;", "modifier": "private static final", "type": "long", "declarator": "END_DATE_1 = 1409703794000L", "var_name": "END_DATE_1"}, {"original_string": "private static final long START_DATE_3 = 1409703891000L;", "modifier": "private static final", "type": "long", "declarator": "START_DATE_3 = 1409703891000L", "var_name": "START_DATE_3"}, {"original_string": "private static final long END_DATE_3 = 1409703893000L;", "modifier": "private static final", "type": "long", "declarator": "END_DATE_3 = 1409703893000L", "var_name": "END_DATE_3"}, {"original_string": "private static final String START_TIMEZONE = TimeZone.getAvailableIDs()[0];", "modifier": "private static final", "type": "String", "declarator": "START_TIMEZONE = TimeZone.getAvailableIDs()[0]", "var_name": "START_TIMEZONE"}, {"original_string": "private static final String END_TIMEZONE = TimeZone.getAvailableIDs()[1];", "modifier": "private static final", "type": "String", "declarator": "END_TIMEZONE = TimeZone.getAvailableIDs()[1]", "var_name": "END_TIMEZONE"}, {"original_string": "private static final String COMMENT = \"Comment\";", "modifier": "private static final", "type": "String", "declarator": "COMMENT = \"Comment\"", "var_name": "COMMENT"}, {"original_string": "private static final String COST_CENTER = \"Cost Center\";", "modifier": "private static final", "type": "String", "declarator": "COST_CENTER = \"Cost Center\"", "var_name": "COST_CENTER"}, {"original_string": "private static final String CURRENCY_CODE = \"USD\";", "modifier": "private static final", "type": "String", "declarator": "CURRENCY_CODE = \"USD\"", "var_name": "CURRENCY_CODE"}, {"original_string": "private static final String USER_PREFERENCES_CURRENCY_CODE = \"EUR\";", "modifier": "private static final", "type": "String", "declarator": "USER_PREFERENCES_CURRENCY_CODE = \"EUR\"", "var_name": "USER_PREFERENCES_CURRENCY_CODE"}, {"original_string": "TripsTable mTripsTable;", "modifier": "", "type": "TripsTable", "declarator": "mTripsTable", "var_name": "mTripsTable"}, {"original_string": "@Mock\n    SQLiteDatabase mSQLiteDatabase;", "modifier": "@Mock", "type": "SQLiteDatabase", "declarator": "mSQLiteDatabase", "var_name": "mSQLiteDatabase"}, {"original_string": "@Mock\n    TableDefaultsCustomizer mTableDefaultsCustomizer;", "modifier": "@Mock", "type": "TableDefaultsCustomizer", "declarator": "mTableDefaultsCustomizer", "var_name": "mTableDefaultsCustomizer"}, {"original_string": "@Mock\n    PersistenceManager mPersistenceManager;", "modifier": "@Mock", "type": "PersistenceManager", "declarator": "mPersistenceManager", "var_name": "mPersistenceManager"}, {"original_string": "@Mock\n    StorageManager mStorageManager;", "modifier": "@Mock", "type": "StorageManager", "declarator": "mStorageManager", "var_name": "mStorageManager"}, {"original_string": "@Mock\n    UserPreferenceManager mPreferences;", "modifier": "@Mock", "type": "UserPreferenceManager", "declarator": "mPreferences", "var_name": "mPreferences"}, {"original_string": "@Captor\n    ArgumentCaptor<String> mSqlCaptor;", "modifier": "@Captor", "type": "ArgumentCaptor<String>", "declarator": "mSqlCaptor", "var_name": "mSqlCaptor"}, {"original_string": "SQLiteOpenHelper mSQLiteOpenHelper;", "modifier": "", "type": "SQLiteOpenHelper", "declarator": "mSQLiteOpenHelper", "var_name": "mSQLiteOpenHelper"}, {"original_string": "Trip mTrip1;", "modifier": "", "type": "Trip", "declarator": "mTrip1", "var_name": "mTrip1"}, {"original_string": "Trip mTrip2;", "modifier": "", "type": "Trip", "declarator": "mTrip2", "var_name": "mTrip2"}, {"original_string": "TripBuilderFactory mBuilder;", "modifier": "", "type": "TripBuilderFactory", "declarator": "mBuilder", "var_name": "mBuilder"}], "file": "app/src/test/java/co/smartreceipts/android/persistence/database/tables/TripsTableTest.java"}, "test_case": {"identifier": "onUpgradeFromV11", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onUpgradeFromV11() {\n        final int oldVersion = 11;\n        final int newVersion = DatabaseHelper.DATABASE_VERSION;\n\n        final TableDefaultsCustomizer customizer = mock(TableDefaultsCustomizer.class);\n        mTripsTable.onUpgrade(mSQLiteDatabase, oldVersion, newVersion, customizer);\n        verifyZeroInteractions(customizer);\n        verifyV8Upgrade(never());\n        verifyV10Upgrade(never());\n        verifyV11Upgrade(times(1));\n        verifyV12Upgrade(times(1));\n        verifyV14Upgrade(times(1));\n        verifyV18Upgrade(times(1));\n        verifyV19Upgrade(times(1));\n    }", "signature": "void onUpgradeFromV11()", "full_signature": "@Test public void onUpgradeFromV11()", "class_method_signature": "TripsTableTest.onUpgradeFromV11()", "testcase": true, "constructor": false, "invocations": ["mock", "onUpgrade", "verifyZeroInteractions", "verifyV8Upgrade", "never", "verifyV10Upgrade", "never", "verifyV11Upgrade", "times", "verifyV12Upgrade", "times", "verifyV14Upgrade", "times", "verifyV18Upgrade", "times", "verifyV19Upgrade", "times"]}, "focal_class": {"identifier": "TripsTable", "superclass": "extends AbstractSqlTable<Trip>", "interfaces": "", "fields": [{"original_string": "public static final String TABLE_NAME = \"trips\";", "modifier": "public static final", "type": "String", "declarator": "TABLE_NAME = \"trips\"", "var_name": "TABLE_NAME"}, {"original_string": "public static final String COLUMN_NAME = \"name\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME = \"name\"", "var_name": "COLUMN_NAME"}, {"original_string": "public static final String COLUMN_FROM = \"from_date\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_FROM = \"from_date\"", "var_name": "COLUMN_FROM"}, {"original_string": "public static final String COLUMN_TO = \"to_date\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_TO = \"to_date\"", "var_name": "COLUMN_TO"}, {"original_string": "public static final String COLUMN_FROM_TIMEZONE = \"from_timezone\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_FROM_TIMEZONE = \"from_timezone\"", "var_name": "COLUMN_FROM_TIMEZONE"}, {"original_string": "public static final String COLUMN_TO_TIMEZONE = \"to_timezone\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_TO_TIMEZONE = \"to_timezone\"", "var_name": "COLUMN_TO_TIMEZONE"}, {"original_string": "public static final String COLUMN_MILEAGE = \"miles_new\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_MILEAGE = \"miles_new\"", "var_name": "COLUMN_MILEAGE"}, {"original_string": "public static final String COLUMN_COMMENT = \"trips_comment\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_COMMENT = \"trips_comment\"", "var_name": "COLUMN_COMMENT"}, {"original_string": "public static final String COLUMN_COST_CENTER = \"trips_cost_center\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_COST_CENTER = \"trips_cost_center\"", "var_name": "COLUMN_COST_CENTER"}, {"original_string": "public static final String COLUMN_DEFAULT_CURRENCY = \"trips_default_currency\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_DEFAULT_CURRENCY = \"trips_default_currency\"", "var_name": "COLUMN_DEFAULT_CURRENCY"}, {"original_string": "public static final String COLUMN_FILTERS = \"trips_filters\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_FILTERS = \"trips_filters\"", "var_name": "COLUMN_FILTERS"}, {"original_string": "public static final String COLUMN_PROCESSING_STATUS = \"trip_processing_status\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_PROCESSING_STATUS = \"trip_processing_status\"", "var_name": "COLUMN_PROCESSING_STATUS"}, {"original_string": "public static final String COLUMN_NAME_HIDDEN_AUTO_COMPLETE = \"name_hidden_auto_complete\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_HIDDEN_AUTO_COMPLETE = \"name_hidden_auto_complete\"", "var_name": "COLUMN_NAME_HIDDEN_AUTO_COMPLETE"}, {"original_string": "public static final String COLUMN_COMMENT_HIDDEN_AUTO_COMPLETE = \"comment_hidden_auto_complete\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_COMMENT_HIDDEN_AUTO_COMPLETE = \"comment_hidden_auto_complete\"", "var_name": "COLUMN_COMMENT_HIDDEN_AUTO_COMPLETE"}, {"original_string": "public static final String COLUMN_COSTCENTER_HIDDEN_AUTO_COMPLETE = \"costcenter_hidden_auto_complete\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_COSTCENTER_HIDDEN_AUTO_COMPLETE = \"costcenter_hidden_auto_complete\"", "var_name": "COLUMN_COSTCENTER_HIDDEN_AUTO_COMPLETE"}, {"original_string": "@SuppressWarnings(\"unused\")\n    @Deprecated\n    private static final String COLUMN_PRICE = \"price\";", "modifier": "@SuppressWarnings(\"unused\")\n    @Deprecated\n    private static final", "type": "String", "declarator": "COLUMN_PRICE = \"price\"", "var_name": "COLUMN_PRICE"}], "methods": [{"identifier": "TripsTable", "parameters": "(@NonNull SQLiteOpenHelper sqLiteOpenHelper, @NonNull StorageManager storageManager, @NonNull UserPreferenceManager preferences)", "modifiers": "public", "return": "", "signature": " TripsTable(@NonNull SQLiteOpenHelper sqLiteOpenHelper, @NonNull StorageManager storageManager, @NonNull UserPreferenceManager preferences)", "full_signature": "public  TripsTable(@NonNull SQLiteOpenHelper sqLiteOpenHelper, @NonNull StorageManager storageManager, @NonNull UserPreferenceManager preferences)", "class_method_signature": "TripsTable.TripsTable(@NonNull SQLiteOpenHelper sqLiteOpenHelper, @NonNull StorageManager storageManager, @NonNull UserPreferenceManager preferences)", "testcase": false, "constructor": true}, {"identifier": "onCreate", "parameters": "(@NonNull SQLiteDatabase db, @NonNull TableDefaultsCustomizer customizer)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void onCreate(@NonNull SQLiteDatabase db, @NonNull TableDefaultsCustomizer customizer)", "full_signature": "@Override public synchronized void onCreate(@NonNull SQLiteDatabase db, @NonNull TableDefaultsCustomizer customizer)", "class_method_signature": "TripsTable.onCreate(@NonNull SQLiteDatabase db, @NonNull TableDefaultsCustomizer customizer)", "testcase": false, "constructor": false}, {"identifier": "onUpgrade", "parameters": "(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "full_signature": "@Override public synchronized void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "class_method_signature": "TripsTable.onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/persistence/database/tables/TripsTable.java"}, "focal_method": {"identifier": "onUpgrade", "parameters": "(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n    public synchronized void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer) {\n        super.onUpgrade(db, oldVersion, newVersion, customizer);\n\n        if (oldVersion <= 6) { // Fix the database to replace absolute paths with relative ones\n            Cursor tripsCursor = null;\n            try {\n                tripsCursor = db.query(TripsTable.TABLE_NAME, new String[]{TripsTable.COLUMN_NAME}, null, null, null, null, null);\n                if (tripsCursor != null && tripsCursor.moveToFirst()) {\n                    final int nameIndex = tripsCursor.getColumnIndex(TripsTable.COLUMN_NAME);\n                    do {\n                        String absPath = tripsCursor.getString(nameIndex);\n                        if (absPath.endsWith(File.separator)) {\n                            absPath = absPath.substring(0, absPath.length() - 1);\n                        }\n\n                        final String relPath = absPath.substring(absPath.lastIndexOf(File.separatorChar) + 1, absPath.length());\n                        Logger.debug(\"Updating Abs. Trip Path: {} => {}\", absPath, relPath);\n\n                        final ContentValues tripValues = new ContentValues(1);\n                        tripValues.put(TripsTable.COLUMN_NAME, relPath);\n                        if (db.update(TripsTable.TABLE_NAME, tripValues, TripsTable.COLUMN_NAME + \" = ?\", new String[]{absPath}) == 0) {\n                            Logger.error(this, \"Trip Update Error Occurred\");\n                        }\n                    }\n                    while (tripsCursor.moveToNext());\n                }\n            } finally {\n                if (tripsCursor != null) {\n                    tripsCursor.close();\n                }\n            }\n        }\n\n        if (oldVersion <= 8) { // Added a timezone column to the trips table\n            final String alterTrips1 = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + TripsTable.COLUMN_FROM_TIMEZONE + \" TEXT\";\n            final String alterTrips2 = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + TripsTable.COLUMN_TO_TIMEZONE + \" TEXT\";\n\n            Logger.debug(this, alterTrips1);\n            Logger.debug(this, alterTrips2);\n\n            db.execSQL(alterTrips1);\n            db.execSQL(alterTrips2);\n        }\n\n        if (oldVersion <= 10) {\n            final String alterTrips1 = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + TripsTable.COLUMN_COMMENT + \" TEXT\";\n            final String alterTrips2 = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + TripsTable.COLUMN_DEFAULT_CURRENCY + \" TEXT\";\n\n            Logger.debug(this, alterTrips1);\n            Logger.debug(this, alterTrips2);\n\n            db.execSQL(alterTrips1);\n            db.execSQL(alterTrips2);\n        }\n\n        if (oldVersion <= 11) { // Added trips filters, payment methods, and mileage table\n            final String alterTrips = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + TripsTable.COLUMN_FILTERS + \" TEXT\";\n\n            Logger.debug(this, alterTrips);\n\n            db.execSQL(alterTrips);\n        }\n\n        if (oldVersion <= 12) { //Added better distance tracking, cost center to the trips, and status to trips/receipts\n            final String alterTripsWithCostCenter = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + TripsTable.COLUMN_COST_CENTER + \" TEXT\";\n            final String alterTripsWithProcessingStatus = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + TripsTable.COLUMN_PROCESSING_STATUS + \" TEXT\";\n\n            Logger.debug(this, alterTripsWithCostCenter);\n            Logger.debug(this, alterTripsWithProcessingStatus);\n\n            db.execSQL(alterTripsWithCostCenter);\n            db.execSQL(alterTripsWithProcessingStatus);\n\n        }\n\n        if (oldVersion <= 14) {\n            onUpgradeToAddSyncInformation(db, oldVersion, newVersion);\n        }\n\n        if (oldVersion <= 18) { // v18 => 19 Changed TripsTable pk to id (instead of name), added UUID column\n\n            // adding id column, changing primary key\n            final String copyTable = \"CREATE TABLE \" + getTableName() + \"_copy\" + \" (\"\n                    + COLUMN_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \"\n                    + COLUMN_NAME + \" TEXT UNIQUE, \"\n                    + COLUMN_FROM + \" DATE, \"\n                    + COLUMN_TO + \" DATE, \"\n                    + COLUMN_FROM_TIMEZONE + \" TEXT, \"\n                    + COLUMN_TO_TIMEZONE + \" TEXT, \"\n                    + COLUMN_COMMENT + \" TEXT, \"\n                    + COLUMN_COST_CENTER + \" TEXT, \"\n                    + COLUMN_DEFAULT_CURRENCY + \" TEXT, \"\n                    + COLUMN_PROCESSING_STATUS + \" TEXT, \"\n                    + COLUMN_FILTERS + \" TEXT, \"\n                    + AbstractSqlTable.COLUMN_DRIVE_SYNC_ID + \" TEXT, \"\n                    + AbstractSqlTable.COLUMN_DRIVE_IS_SYNCED + \" BOOLEAN DEFAULT 0, \"\n                    + AbstractSqlTable.COLUMN_DRIVE_MARKED_FOR_DELETION + \" BOOLEAN DEFAULT 0, \"\n                    + AbstractSqlTable.COLUMN_LAST_LOCAL_MODIFICATION_TIME + \" DATE\"\n                    + \");\";\n            Logger.debug(this, copyTable);\n            db.execSQL(copyTable);\n\n            final String baseColumns = TextUtils.join(\", \", new String[]{\n                    COLUMN_NAME, COLUMN_FROM, COLUMN_TO, COLUMN_FROM_TIMEZONE, COLUMN_TO_TIMEZONE, COLUMN_COMMENT,\n                    COLUMN_COST_CENTER, COLUMN_DEFAULT_CURRENCY, COLUMN_PROCESSING_STATUS, COLUMN_FILTERS, COLUMN_DRIVE_SYNC_ID,\n                    COLUMN_DRIVE_IS_SYNCED, COLUMN_DRIVE_MARKED_FOR_DELETION, COLUMN_LAST_LOCAL_MODIFICATION_TIME});\n\n            final String insertData = \"INSERT INTO \" + getTableName() + \"_copy\"\n                    + \" (\" + baseColumns + \") \"\n                    + \"SELECT \" + baseColumns\n                    + \" FROM \" + getTableName() + \";\";\n            Logger.debug(this, insertData);\n            db.execSQL(insertData);\n\n            final String dropOldTable = \"DROP TABLE \" + getTableName() + \";\";\n            Logger.debug(this, dropOldTable);\n            db.execSQL(dropOldTable);\n\n            final String renameTable = \"ALTER TABLE \" + getTableName() + \"_copy\" + \" RENAME TO \" + getTableName() + \";\";\n            Logger.debug(this, renameTable);\n            db.execSQL(renameTable);\n\n            // adding new UUID column\n            onUpgradeToAddUUID(db, oldVersion);\n        }\n\n        if (oldVersion <= 19) {\n            final String alterReceipts = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + COLUMN_NAME_HIDDEN_AUTO_COMPLETE + \" BOOLEAN DEFAULT 0\";\n            final String alterReceipts2 = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + COLUMN_COMMENT_HIDDEN_AUTO_COMPLETE + \" BOOLEAN DEFAULT 0\";\n            final String alterReceipts3 = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + COLUMN_COSTCENTER_HIDDEN_AUTO_COMPLETE + \" BOOLEAN DEFAULT 0\";\n\n            Logger.debug(this, alterReceipts);\n            Logger.debug(this, alterReceipts2);\n            Logger.debug(this, alterReceipts3);\n\n            db.execSQL(alterReceipts);\n            db.execSQL(alterReceipts2);\n            db.execSQL(alterReceipts3);\n        }\n\n    }", "signature": "void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "full_signature": "@Override public synchronized void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "class_method_signature": "TripsTable.onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "testcase": false, "constructor": false, "invocations": ["onUpgrade", "query", "moveToFirst", "getColumnIndex", "getString", "endsWith", "substring", "length", "substring", "lastIndexOf", "length", "debug", "put", "update", "error", "moveToNext", "close", "debug", "debug", "execSQL", "execSQL", "debug", "debug", "execSQL", "execSQL", "debug", "execSQL", "debug", "debug", "execSQL", "execSQL", "onUpgradeToAddSyncInformation", "getTableName", "debug", "execSQL", "join", "getTableName", "getTableName", "debug", "execSQL", "getTableName", "debug", "execSQL", "getTableName", "getTableName", "debug", "execSQL", "onUpgradeToAddUUID", "debug", "debug", "debug", "execSQL", "execSQL", "execSQL"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}