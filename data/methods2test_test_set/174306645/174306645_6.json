{"test_class": {"identifier": "PMMLUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools/kogito-pmml/src/test/java/org/kie/kogito/pmml/utils/PMMLUtilsTest.java"}, "test_case": {"identifier": "getPMMLRequestData", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void getPMMLRequestData() {\n        final String modelName = \"MODEL_NAME\";\n        final Map<String, Object> parameters = getParameters();\n        final PMMLRequestData retrieved = PMMLUtils.getPMMLRequestData(modelName, parameters);\n        assertNotNull(retrieved);\n        assertEquals(modelName,  retrieved.getModelName());\n        final Map<String, ParameterInfo> parameterInfos = retrieved.getMappedRequestParams();\n        assertEquals(parameters.size(), parameterInfos.size());\n        parameters.forEach((key, value) -> {\n            assertTrue(parameterInfos.containsKey(key));\n            ParameterInfo parameterInfo = parameterInfos.get(key);\n            assertEquals(value, parameterInfo.getValue());\n            assertEquals(value.getClass(), parameterInfo.getType());\n        });\n    }", "signature": "void getPMMLRequestData()", "full_signature": "@Test void getPMMLRequestData()", "class_method_signature": "PMMLUtilsTest.getPMMLRequestData()", "testcase": true, "constructor": false, "invocations": ["getParameters", "getPMMLRequestData", "assertNotNull", "assertEquals", "getModelName", "getMappedRequestParams", "assertEquals", "size", "size", "forEach", "assertTrue", "containsKey", "get", "assertEquals", "getValue", "assertEquals", "getClass", "getType"]}, "focal_class": {"identifier": "PMMLUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CORRELATION_ID = \"CORRELATION_ID\";", "modifier": "private static final", "type": "String", "declarator": "CORRELATION_ID = \"CORRELATION_ID\"", "var_name": "CORRELATION_ID"}], "methods": [{"identifier": "PMMLUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " PMMLUtils()", "full_signature": "private  PMMLUtils()", "class_method_signature": "PMMLUtils.PMMLUtils()", "testcase": false, "constructor": true}, {"identifier": "getPMMLRequestData", "parameters": "(String modelName, Map<String, Object> parameters)", "modifiers": "public static", "return": "PMMLRequestData", "signature": "PMMLRequestData getPMMLRequestData(String modelName, Map<String, Object> parameters)", "full_signature": "public static PMMLRequestData getPMMLRequestData(String modelName, Map<String, Object> parameters)", "class_method_signature": "PMMLUtils.getPMMLRequestData(String modelName, Map<String, Object> parameters)", "testcase": false, "constructor": false}], "file": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/utils/PMMLUtils.java"}, "focal_method": {"identifier": "getPMMLRequestData", "parameters": "(String modelName, Map<String, Object> parameters)", "modifiers": "public static", "return": "PMMLRequestData", "body": "public static PMMLRequestData getPMMLRequestData(String modelName, Map<String, Object> parameters) {\n        PMMLRequestDataBuilder pmmlRequestDataBuilder = new PMMLRequestDataBuilder(CORRELATION_ID, modelName);\n        for (Map.Entry<String, Object> entry : parameters.entrySet()) {\n            Object pValue = entry.getValue();\n            Class class1 = pValue.getClass();\n            pmmlRequestDataBuilder.addParameter(entry.getKey(), pValue, class1);\n        }\n        return pmmlRequestDataBuilder.build();\n    }", "signature": "PMMLRequestData getPMMLRequestData(String modelName, Map<String, Object> parameters)", "full_signature": "public static PMMLRequestData getPMMLRequestData(String modelName, Map<String, Object> parameters)", "class_method_signature": "PMMLUtils.getPMMLRequestData(String modelName, Map<String, Object> parameters)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getValue", "getClass", "addParameter", "getKey", "build"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}