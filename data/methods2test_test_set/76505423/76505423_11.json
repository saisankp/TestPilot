{"test_class": {"identifier": "LogicalProgramTransformsTest", "superclass": "", "interfaces": "", "fields": [], "file": "yqlplus_engine/src/test/java/com/yahoo/yqlplus/engine/rules/LogicalProgramTransformsTest.java"}, "test_case": {"identifier": "requireSubqueryReplacement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void requireSubqueryReplacement() throws IOException, RecognitionException {\n        ProgramParser parser = new ProgramParser();\n        OperatorNode<StatementOperator> program = parser.parse(\"program.yql\",\n                \"SELECT * \" +\n                        \"  FROM source1 WHERE id IN (SELECT id2 FROM source2);\"\n        );\n        LogicalProgramTransforms transforms = new LogicalProgramTransforms();\n        OperatorNode<StatementOperator> operator = transforms.apply(program, new ViewRegistry() {\n            @Override\n            public OperatorNode<SequenceOperator> getView(List<String> name) {\n                return null;\n            }\n        });\n        Assert.assertEquals(operator.toString(), \"(PROGRAM L0:0 [(EXECUTE (EXTRACT {rowType=[source2]} (SCAN L53:1 {alias=source2, rowType=[source2]} [source2], []), (READ_FIELD L44:1 {rowType=[source2]} source2, id2)), subquery$0), (EXECUTE L0:1 (FILTER {rowType=[source1]} (SCAN L16:1 {alias=source1, rowType=[source1]} [source1], []), (IN (READ_FIELD L30:1 {rowType=[source1]} source1, id), (VARREF subquery$0))), result1), (OUTPUT L0:1 result1)])\");\n    }", "signature": "void requireSubqueryReplacement()", "full_signature": "@Test public void requireSubqueryReplacement()", "class_method_signature": "LogicalProgramTransformsTest.requireSubqueryReplacement()", "testcase": true, "constructor": false, "invocations": ["parse", "apply", "assertEquals", "toString"]}, "focal_class": {"identifier": "LogicalProgramTransforms", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final LogicalTransforms SEQUENCE_TRANSFORMS = new LogicalTransforms();", "modifier": "private static final", "type": "LogicalTransforms", "declarator": "SEQUENCE_TRANSFORMS = new LogicalTransforms()", "var_name": "SEQUENCE_TRANSFORMS"}], "methods": [{"identifier": "apply", "parameters": "(OperatorNode<StatementOperator> program, ViewRegistry scope)", "modifiers": "public", "return": "OperatorNode<StatementOperator>", "signature": "OperatorNode<StatementOperator> apply(OperatorNode<StatementOperator> program, ViewRegistry scope)", "full_signature": "public OperatorNode<StatementOperator> apply(OperatorNode<StatementOperator> program, ViewRegistry scope)", "class_method_signature": "LogicalProgramTransforms.apply(OperatorNode<StatementOperator> program, ViewRegistry scope)", "testcase": false, "constructor": false}], "file": "yqlplus_engine/src/main/java/com/yahoo/yqlplus/engine/rules/LogicalProgramTransforms.java"}, "focal_method": {"identifier": "apply", "parameters": "(OperatorNode<StatementOperator> program, ViewRegistry scope)", "modifiers": "public", "return": "OperatorNode<StatementOperator>", "body": "public OperatorNode<StatementOperator> apply(OperatorNode<StatementOperator> program, ViewRegistry scope) {\n        List<StatementOperatorTransform> transforms = Lists.newArrayList(\n                new ReplaceSubqueryFilters(),\n                new SequenceTransformer(scope)\n        );\n        for (StatementOperatorTransform transform : transforms) {\n            program = transform.visitStatement(program);\n        }\n        return program;\n    }", "signature": "OperatorNode<StatementOperator> apply(OperatorNode<StatementOperator> program, ViewRegistry scope)", "full_signature": "public OperatorNode<StatementOperator> apply(OperatorNode<StatementOperator> program, ViewRegistry scope)", "class_method_signature": "LogicalProgramTransforms.apply(OperatorNode<StatementOperator> program, ViewRegistry scope)", "testcase": false, "constructor": false, "invocations": ["newArrayList", "visitStatement"]}, "repository": {"repo_id": 76505423, "url": "https://github.com/yahoo/yql-plus", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 30, "size": 1315, "license": "licensed"}}