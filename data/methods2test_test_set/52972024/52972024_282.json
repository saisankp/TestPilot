{"test_class": {"identifier": "LimitTrialCountStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ITaskExecutionState executionState;", "modifier": "private", "type": "ITaskExecutionState", "declarator": "executionState", "var_name": "executionState"}, {"original_string": "private IShutdownAwareTask shutdownAwareTask;", "modifier": "private", "type": "IShutdownAwareTask", "declarator": "shutdownAwareTask", "var_name": "shutdownAwareTask"}], "file": "CoreFeatures/Shutdown/ShutdownTaskProcessingStrategies/src/test/java/info/smart_tools/smartactors/shutdown/shutdown_task_processing_strategies/LimitTrialCountStrategyTest.java"}, "test_case": {"identifier": "Should_NotifyAndExecuteTask", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_NotifyAndExecuteTask()\n            throws Exception {\n        ITaskProcessStrategy strategy = new LimitTrialCountStrategy(4,2);\n\n        strategy.process(executionState);\n        strategy.process(executionState);\n        verify(executionState, times(2)).execute();\n        verify(shutdownAwareTask, times(0)).notifyShuttingDown();\n\n        strategy.process(executionState);\n        strategy.process(executionState);\n        verify(executionState, times(4)).execute();\n        verify(shutdownAwareTask, times(2)).notifyShuttingDown();\n        verify(shutdownAwareTask, times(0)).notifyIgnored();\n\n        strategy.process(executionState);\n        verify(executionState, times(4)).execute();\n        verify(shutdownAwareTask, times(2)).notifyShuttingDown();\n        verify(shutdownAwareTask, times(1)).notifyIgnored();\n    }", "signature": "void Should_NotifyAndExecuteTask()", "full_signature": "@Test public void Should_NotifyAndExecuteTask()", "class_method_signature": "LimitTrialCountStrategyTest.Should_NotifyAndExecuteTask()", "testcase": true, "constructor": false, "invocations": ["process", "process", "execute", "verify", "times", "notifyShuttingDown", "verify", "times", "process", "process", "execute", "verify", "times", "notifyShuttingDown", "verify", "times", "notifyIgnored", "verify", "times", "process", "execute", "verify", "times", "notifyShuttingDown", "verify", "times", "notifyIgnored", "verify", "times"]}, "focal_class": {"identifier": "LimitTrialCountStrategy", "superclass": "", "interfaces": "implements ITaskProcessStrategy", "fields": [{"original_string": "private final int maxTrials, silentTrials;", "modifier": "private final", "type": "int", "declarator": "maxTrials", "var_name": "maxTrials"}], "methods": [{"identifier": "LimitTrialCountStrategy", "parameters": "(final int maxTrials, final int silentTrials)", "modifiers": "public", "return": "", "signature": " LimitTrialCountStrategy(final int maxTrials, final int silentTrials)", "full_signature": "public  LimitTrialCountStrategy(final int maxTrials, final int silentTrials)", "class_method_signature": "LimitTrialCountStrategy.LimitTrialCountStrategy(final int maxTrials, final int silentTrials)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(final ITaskExecutionState state)", "modifiers": "@Override public", "return": "void", "signature": "void process(final ITaskExecutionState state)", "full_signature": "@Override public void process(final ITaskExecutionState state)", "class_method_signature": "LimitTrialCountStrategy.process(final ITaskExecutionState state)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Shutdown/ShutdownTaskProcessingStrategies/src/main/java/info/smart_tools/smartactors/shutdown/shutdown_task_processing_strategies/LimitTrialCountStrategy.java"}, "focal_method": {"identifier": "process", "parameters": "(final ITaskExecutionState state)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void process(final ITaskExecutionState state)\n            throws TaskExecutionException, InvalidArgumentException, TaskProcessException {\n        IShutdownAwareTask shutdownAwareTask = state.getTaskAs(IShutdownAwareTask.class);\n\n        TrialCounter counter = (TrialCounter) shutdownAwareTask.getShutdownStatus();\n\n        if (null == counter) {\n            counter = new TrialCounter();\n            shutdownAwareTask.setShutdownStatus(counter);\n        }\n\n        int counterState = counter.increment();\n\n        try {\n            if (counterState > maxTrials) {\n                shutdownAwareTask.notifyIgnored();\n            } else {\n                if (counterState > silentTrials) {\n                    shutdownAwareTask.notifyShuttingDown();\n                }\n\n                state.execute();\n            }\n        } catch (ShutdownAwareTaskNotificationException e) {\n            throw new TaskProcessException(e);\n        }\n    }", "signature": "void process(final ITaskExecutionState state)", "full_signature": "@Override public void process(final ITaskExecutionState state)", "class_method_signature": "LimitTrialCountStrategy.process(final ITaskExecutionState state)", "testcase": false, "constructor": false, "invocations": ["getTaskAs", "getShutdownStatus", "setShutdownStatus", "increment", "notifyIgnored", "notifyShuttingDown", "execute"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}