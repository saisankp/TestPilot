{"test_class": {"identifier": "CircularFingerprinterTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private static ILoggingTool   logger     = LoggingToolFactory.createLoggingTool(CircularFingerprinterTest.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger     = LoggingToolFactory.createLoggingTool(CircularFingerprinterTest.class)", "var_name": "logger"}, {"original_string": "private static IAtomContainer trivialMol = null;", "modifier": "private static", "type": "IAtomContainer", "declarator": "trivialMol = null", "var_name": "trivialMol"}], "file": "descriptor/fingerprint/src/test/java/org/openscience/cdk/fingerprint/CircularFingerprinterTest.java"}, "test_case": {"identifier": "iminesDetectionDoesntCauseNPE", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void iminesDetectionDoesntCauseNPE() throws Exception {\n        IAtomContainer pyrazole = new AtomContainer(6, 6, 0, 0);\n        pyrazole.addAtom(atom(\"H\", 0, 0));\n        pyrazole.addAtom(atom(\"N\", 0, 0));\n        pyrazole.addAtom(atom(\"C\", 0, 1));\n        pyrazole.addAtom(atom(\"C\", 0, 1));\n        pyrazole.addAtom(atom(\"C\", 0, 1));\n        pyrazole.addAtom(atom(\"N\", 0, 0));\n        pyrazole.addBond(0, 1, IBond.Order.SINGLE);\n        pyrazole.addBond(1, 2, IBond.Order.SINGLE);\n        pyrazole.addBond(2, 3, IBond.Order.DOUBLE);\n        pyrazole.addBond(3, 4, IBond.Order.SINGLE);\n        pyrazole.addBond(4, 5, IBond.Order.DOUBLE);\n        pyrazole.addBond(1, 5, IBond.Order.SINGLE);\n        CircularFingerprinter circ = new CircularFingerprinter(CircularFingerprinter.CLASS_FCFP2);\n        assertNotNull(circ.getBitFingerprint(pyrazole));\n    }", "signature": "void iminesDetectionDoesntCauseNPE()", "full_signature": "@Test public void iminesDetectionDoesntCauseNPE()", "class_method_signature": "CircularFingerprinterTest.iminesDetectionDoesntCauseNPE()", "testcase": true, "constructor": false, "invocations": ["addAtom", "atom", "addAtom", "atom", "addAtom", "atom", "addAtom", "atom", "addAtom", "atom", "addAtom", "atom", "addBond", "addBond", "addBond", "addBond", "addBond", "addBond", "assertNotNull", "getBitFingerprint"]}, "focal_class": {"identifier": "CircularFingerprinter", "superclass": "extends AbstractFingerprinter", "interfaces": "implements IFingerprinter", "fields": [{"original_string": "public static final int CLASS_ECFP0 = 1;", "modifier": "public static final", "type": "int", "declarator": "CLASS_ECFP0 = 1", "var_name": "CLASS_ECFP0"}, {"original_string": "public static final int CLASS_ECFP2 = 2;", "modifier": "public static final", "type": "int", "declarator": "CLASS_ECFP2 = 2", "var_name": "CLASS_ECFP2"}, {"original_string": "public static final int CLASS_ECFP4 = 3;", "modifier": "public static final", "type": "int", "declarator": "CLASS_ECFP4 = 3", "var_name": "CLASS_ECFP4"}, {"original_string": "public static final int CLASS_ECFP6 = 4;", "modifier": "public static final", "type": "int", "declarator": "CLASS_ECFP6 = 4", "var_name": "CLASS_ECFP6"}, {"original_string": "public static final int CLASS_FCFP0 = 5;", "modifier": "public static final", "type": "int", "declarator": "CLASS_FCFP0 = 5", "var_name": "CLASS_FCFP0"}, {"original_string": "public static final int CLASS_FCFP2 = 6;", "modifier": "public static final", "type": "int", "declarator": "CLASS_FCFP2 = 6", "var_name": "CLASS_FCFP2"}, {"original_string": "public static final int CLASS_FCFP4 = 7;", "modifier": "public static final", "type": "int", "declarator": "CLASS_FCFP4 = 7", "var_name": "CLASS_FCFP4"}, {"original_string": "public static final int CLASS_FCFP6 = 8;", "modifier": "public static final", "type": "int", "declarator": "CLASS_FCFP6 = 8", "var_name": "CLASS_FCFP6"}, {"original_string": "private final int      ATOMCLASS_ECFP = 1;", "modifier": "private final", "type": "int", "declarator": "ATOMCLASS_ECFP = 1", "var_name": "ATOMCLASS_ECFP"}, {"original_string": "private final int      ATOMCLASS_FCFP = 2;", "modifier": "private final", "type": "int", "declarator": "ATOMCLASS_FCFP = 2", "var_name": "ATOMCLASS_FCFP"}, {"original_string": "private IAtomContainer mol;", "modifier": "private", "type": "IAtomContainer", "declarator": "mol", "var_name": "mol"}, {"original_string": "private final int      length;", "modifier": "private final", "type": "int", "declarator": "length", "var_name": "length"}, {"original_string": "private int[]          identity;", "modifier": "private", "type": "int[]", "declarator": "identity", "var_name": "identity"}, {"original_string": "private boolean[]      resolvedChiral;", "modifier": "private", "type": "boolean[]", "declarator": "resolvedChiral", "var_name": "resolvedChiral"}, {"original_string": "private int[][]        atomGroup;", "modifier": "private", "type": "int[][]", "declarator": "atomGroup", "var_name": "atomGroup"}, {"original_string": "private CRC32          crc            = new CRC32();", "modifier": "private", "type": "CRC32", "declarator": "crc            = new CRC32()", "var_name": "crc"}, {"original_string": "private ArrayList<FP>  fplist         = new ArrayList<FP>();", "modifier": "private", "type": "ArrayList<FP>", "declarator": "fplist         = new ArrayList<FP>()", "var_name": "fplist"}, {"original_string": "private boolean[]      amask;", "modifier": "private", "type": "boolean[]", "declarator": "amask", "var_name": "amask"}, {"original_string": "private int[]          hcount;", "modifier": "private", "type": "int[]", "declarator": "hcount", "var_name": "hcount"}, {"original_string": "private int[][]        atomAdj, bondAdj;", "modifier": "private", "type": "int[][]", "declarator": "atomAdj", "var_name": "atomAdj"}, {"original_string": "private int[]          ringBlock;", "modifier": "private", "type": "int[]", "declarator": "ringBlock", "var_name": "ringBlock"}, {"original_string": "private int[][]        smallRings;", "modifier": "private", "type": "int[][]", "declarator": "smallRings", "var_name": "smallRings"}, {"original_string": "private int[]          bondOrder;", "modifier": "private", "type": "int[]", "declarator": "bondOrder", "var_name": "bondOrder"}, {"original_string": "private boolean[]      atomArom, bondArom;", "modifier": "private", "type": "boolean[]", "declarator": "atomArom", "var_name": "atomArom"}, {"original_string": "private int[][]        tetra;", "modifier": "private", "type": "int[][]", "declarator": "tetra", "var_name": "tetra"}, {"original_string": "private boolean[]      maskDon, maskAcc, maskPos, maskNeg, maskAro, maskHal;", "modifier": "private", "type": "boolean[]", "declarator": "maskDon", "var_name": "maskDon"}, {"original_string": "private int[]          bondSum;", "modifier": "private", "type": "int[]", "declarator": "bondSum", "var_name": "bondSum"}, {"original_string": "private boolean[]      hasDouble;", "modifier": "private", "type": "boolean[]", "declarator": "hasDouble", "var_name": "hasDouble"}, {"original_string": "private boolean[]      aliphatic;", "modifier": "private", "type": "boolean[]", "declarator": "aliphatic", "var_name": "aliphatic"}, {"original_string": "private boolean[]      isOxide;", "modifier": "private", "type": "boolean[]", "declarator": "isOxide", "var_name": "isOxide"}, {"original_string": "private boolean[]      lonePair;", "modifier": "private", "type": "boolean[]", "declarator": "lonePair", "var_name": "lonePair"}, {"original_string": "private boolean[]      tetrazole;", "modifier": "private", "type": "boolean[]", "declarator": "tetrazole", "var_name": "tetrazole"}, {"original_string": "private int     classType, atomClass;", "modifier": "private", "type": "int", "declarator": "classType", "var_name": "classType"}, {"original_string": "private boolean optPerceiveStereo = false;", "modifier": "private", "type": "boolean", "declarator": "optPerceiveStereo = false", "var_name": "optPerceiveStereo"}], "methods": [{"identifier": "CircularFingerprinter", "parameters": "()", "modifiers": "public", "return": "", "signature": " CircularFingerprinter()", "full_signature": "public  CircularFingerprinter()", "class_method_signature": "CircularFingerprinter.CircularFingerprinter()", "testcase": false, "constructor": true}, {"identifier": "CircularFingerprinter", "parameters": "(int classType)", "modifiers": "public", "return": "", "signature": " CircularFingerprinter(int classType)", "full_signature": "public  CircularFingerprinter(int classType)", "class_method_signature": "CircularFingerprinter.CircularFingerprinter(int classType)", "testcase": false, "constructor": true}, {"identifier": "CircularFingerprinter", "parameters": "(int classType, int len)", "modifiers": "public", "return": "", "signature": " CircularFingerprinter(int classType, int len)", "full_signature": "public  CircularFingerprinter(int classType, int len)", "class_method_signature": "CircularFingerprinter.CircularFingerprinter(int classType, int len)", "testcase": false, "constructor": true}, {"identifier": "setPerceiveStereo", "parameters": "(boolean val)", "modifiers": "public", "return": "void", "signature": "void setPerceiveStereo(boolean val)", "full_signature": "public void setPerceiveStereo(boolean val)", "class_method_signature": "CircularFingerprinter.setPerceiveStereo(boolean val)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override protected", "return": "List<Map.Entry<String, String>>", "signature": "List<Map.Entry<String, String>> getParameters()", "full_signature": "@Override protected List<Map.Entry<String, String>> getParameters()", "class_method_signature": "CircularFingerprinter.getParameters()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer mol)", "modifiers": "public", "return": "void", "signature": "void calculate(IAtomContainer mol)", "full_signature": "public void calculate(IAtomContainer mol)", "class_method_signature": "CircularFingerprinter.calculate(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "getFPCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getFPCount()", "full_signature": "public int getFPCount()", "class_method_signature": "CircularFingerprinter.getFPCount()", "testcase": false, "constructor": false}, {"identifier": "getFP", "parameters": "(int N)", "modifiers": "public", "return": "FP", "signature": "FP getFP(int N)", "full_signature": "public FP getFP(int N)", "class_method_signature": "CircularFingerprinter.getFP(int N)", "testcase": false, "constructor": false}, {"identifier": "getBitFingerprint", "parameters": "(IAtomContainer mol)", "modifiers": "@Override public", "return": "IBitFingerprint", "signature": "IBitFingerprint getBitFingerprint(IAtomContainer mol)", "full_signature": "@Override public IBitFingerprint getBitFingerprint(IAtomContainer mol)", "class_method_signature": "CircularFingerprinter.getBitFingerprint(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "getCountFingerprint", "parameters": "(IAtomContainer mol)", "modifiers": "@Override public", "return": "ICountFingerprint", "signature": "ICountFingerprint getCountFingerprint(IAtomContainer mol)", "full_signature": "@Override public ICountFingerprint getCountFingerprint(IAtomContainer mol)", "class_method_signature": "CircularFingerprinter.getCountFingerprint(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "getRawFingerprint", "parameters": "(IAtomContainer mol)", "modifiers": "@Override public", "return": "Map<String, Integer>", "signature": "Map<String, Integer> getRawFingerprint(IAtomContainer mol)", "full_signature": "@Override public Map<String, Integer> getRawFingerprint(IAtomContainer mol)", "class_method_signature": "CircularFingerprinter.getRawFingerprint(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSize()", "full_signature": "@Override public int getSize()", "class_method_signature": "CircularFingerprinter.getSize()", "testcase": false, "constructor": false}, {"identifier": "initialIdentityECFP", "parameters": "(int aidx)", "modifiers": "private", "return": "int", "signature": "int initialIdentityECFP(int aidx)", "full_signature": "private int initialIdentityECFP(int aidx)", "class_method_signature": "CircularFingerprinter.initialIdentityECFP(int aidx)", "testcase": false, "constructor": false}, {"identifier": "initialIdentityFCFP", "parameters": "(int aidx)", "modifiers": "private", "return": "int", "signature": "int initialIdentityFCFP(int aidx)", "full_signature": "private int initialIdentityFCFP(int aidx)", "class_method_signature": "CircularFingerprinter.initialIdentityFCFP(int aidx)", "testcase": false, "constructor": false}, {"identifier": "circularIterate", "parameters": "(int iter, int atom)", "modifiers": "private", "return": "int", "signature": "int circularIterate(int iter, int atom)", "full_signature": "private int circularIterate(int iter, int atom)", "class_method_signature": "CircularFingerprinter.circularIterate(int iter, int atom)", "testcase": false, "constructor": false}, {"identifier": "growAtoms", "parameters": "(int[] atoms)", "modifiers": "private", "return": "int[]", "signature": "int[] growAtoms(int[] atoms)", "full_signature": "private int[] growAtoms(int[] atoms)", "class_method_signature": "CircularFingerprinter.growAtoms(int[] atoms)", "testcase": false, "constructor": false}, {"identifier": "considerNewFP", "parameters": "(FP newFP)", "modifiers": "private", "return": "void", "signature": "void considerNewFP(FP newFP)", "full_signature": "private void considerNewFP(FP newFP)", "class_method_signature": "CircularFingerprinter.considerNewFP(FP newFP)", "testcase": false, "constructor": false}, {"identifier": "excavateMolecule", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void excavateMolecule()", "full_signature": "private void excavateMolecule()", "class_method_signature": "CircularFingerprinter.excavateMolecule()", "testcase": false, "constructor": false}, {"identifier": "markRingBlocks", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void markRingBlocks()", "full_signature": "private void markRingBlocks()", "class_method_signature": "CircularFingerprinter.markRingBlocks()", "testcase": false, "constructor": false}, {"identifier": "recursiveRingFind", "parameters": "(int[] path, int psize, int capacity, int rblk, ArrayList<int[]> rings)", "modifiers": "private", "return": "void", "signature": "void recursiveRingFind(int[] path, int psize, int capacity, int rblk, ArrayList<int[]> rings)", "full_signature": "private void recursiveRingFind(int[] path, int psize, int capacity, int rblk, ArrayList<int[]> rings)", "class_method_signature": "CircularFingerprinter.recursiveRingFind(int[] path, int psize, int capacity, int rblk, ArrayList<int[]> rings)", "testcase": false, "constructor": false}, {"identifier": "detectStrictAromaticity", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void detectStrictAromaticity()", "full_signature": "private void detectStrictAromaticity()", "class_method_signature": "CircularFingerprinter.detectStrictAromaticity()", "testcase": false, "constructor": false}, {"identifier": "rubricTetrahedralsCdk", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rubricTetrahedralsCdk()", "full_signature": "private void rubricTetrahedralsCdk()", "class_method_signature": "CircularFingerprinter.rubricTetrahedralsCdk()", "testcase": false, "constructor": false}, {"identifier": "rubricTetrahedral", "parameters": "(int aidx)", "modifiers": "private", "return": "int[]", "signature": "int[] rubricTetrahedral(int aidx)", "full_signature": "private int[] rubricTetrahedral(int aidx)", "class_method_signature": "CircularFingerprinter.rubricTetrahedral(int aidx)", "testcase": false, "constructor": false}, {"identifier": "calculateBioTypes", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void calculateBioTypes()", "full_signature": "private void calculateBioTypes()", "class_method_signature": "CircularFingerprinter.calculateBioTypes()", "testcase": false, "constructor": false}, {"identifier": "considerBioTypeAromaticity", "parameters": "(final int[] ring)", "modifiers": "private", "return": "void", "signature": "void considerBioTypeAromaticity(final int[] ring)", "full_signature": "private void considerBioTypeAromaticity(final int[] ring)", "class_method_signature": "CircularFingerprinter.considerBioTypeAromaticity(final int[] ring)", "testcase": false, "constructor": false}, {"identifier": "considerBioTypeTetrazole", "parameters": "(final int[] ring)", "modifiers": "private", "return": "void", "signature": "void considerBioTypeTetrazole(final int[] ring)", "full_signature": "private void considerBioTypeTetrazole(final int[] ring)", "class_method_signature": "CircularFingerprinter.considerBioTypeTetrazole(final int[] ring)", "testcase": false, "constructor": false}, {"identifier": "determineDonor", "parameters": "(int aidx)", "modifiers": "private", "return": "boolean", "signature": "boolean determineDonor(int aidx)", "full_signature": "private boolean determineDonor(int aidx)", "class_method_signature": "CircularFingerprinter.determineDonor(int aidx)", "testcase": false, "constructor": false}, {"identifier": "determineAcceptor", "parameters": "(int aidx)", "modifiers": "private", "return": "boolean", "signature": "boolean determineAcceptor(int aidx)", "full_signature": "private boolean determineAcceptor(int aidx)", "class_method_signature": "CircularFingerprinter.determineAcceptor(int aidx)", "testcase": false, "constructor": false}, {"identifier": "determinePositive", "parameters": "(int aidx)", "modifiers": "private", "return": "boolean", "signature": "boolean determinePositive(int aidx)", "full_signature": "private boolean determinePositive(int aidx)", "class_method_signature": "CircularFingerprinter.determinePositive(int aidx)", "testcase": false, "constructor": false}, {"identifier": "determineNegative", "parameters": "(int aidx)", "modifiers": "private", "return": "boolean", "signature": "boolean determineNegative(int aidx)", "full_signature": "private boolean determineNegative(int aidx)", "class_method_signature": "CircularFingerprinter.determineNegative(int aidx)", "testcase": false, "constructor": false}, {"identifier": "determineHalide", "parameters": "(int aidx)", "modifiers": "private", "return": "boolean", "signature": "boolean determineHalide(int aidx)", "full_signature": "private boolean determineHalide(int aidx)", "class_method_signature": "CircularFingerprinter.determineHalide(int aidx)", "testcase": false, "constructor": false}, {"identifier": "bondOrderBioType", "parameters": "(int bidx)", "modifiers": "private", "return": "int", "signature": "int bondOrderBioType(int bidx)", "full_signature": "private int bondOrderBioType(int bidx)", "class_method_signature": "CircularFingerprinter.bondOrderBioType(int bidx)", "testcase": false, "constructor": false}, {"identifier": "appendInteger", "parameters": "(int[] a, int v)", "modifiers": "private", "return": "int[]", "signature": "int[] appendInteger(int[] a, int v)", "full_signature": "private int[] appendInteger(int[] a, int v)", "class_method_signature": "CircularFingerprinter.appendInteger(int[] a, int v)", "testcase": false, "constructor": false}, {"identifier": "findBond", "parameters": "(int a1, int a2)", "modifiers": "private", "return": "int", "signature": "int findBond(int a1, int a2)", "full_signature": "private int findBond(int a1, int a2)", "class_method_signature": "CircularFingerprinter.findBond(int a1, int a2)", "testcase": false, "constructor": false}], "file": "descriptor/fingerprint/src/main/java/org/openscience/cdk/fingerprint/CircularFingerprinter.java"}, "focal_method": {"identifier": "getBitFingerprint", "parameters": "(IAtomContainer mol)", "modifiers": "@Override public", "return": "IBitFingerprint", "body": "@Override\n    public IBitFingerprint getBitFingerprint(IAtomContainer mol) throws CDKException {\n        calculate(mol);\n        final BitSet bits = new BitSet(length);\n        for (int n = 0; n < fplist.size(); n++) {\n            int i = fplist.get(n).hashCode;\n            long b = i >= 0 ? i : ((i & 0x7FFFFFFF) | (1L << 31));\n            bits.set((int) (b % length));\n        }\n        return new BitSetFingerprint(bits);\n    }", "signature": "IBitFingerprint getBitFingerprint(IAtomContainer mol)", "full_signature": "@Override public IBitFingerprint getBitFingerprint(IAtomContainer mol)", "class_method_signature": "CircularFingerprinter.getBitFingerprint(IAtomContainer mol)", "testcase": false, "constructor": false, "invocations": ["calculate", "size", "get", "set"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}