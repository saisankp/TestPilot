{"test_class": {"identifier": "ObservationManagerFacadeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/jcrfacade/observation/ObservationManagerFacadeTest.java"}, "test_case": {"identifier": "testRORemoveEventListener", "parameters": "()", "modifiers": "@Test(expected = ListenerReadOnlyException.class) public", "return": "void", "body": "@Test(expected = ListenerReadOnlyException.class)\n    public void testRORemoveEventListener() throws Exception {\n        ObservationManagerFacade facade = getFacade(mock(ObservationManager.class));\n        facade.removeEventListener(null);\n    }", "signature": "void testRORemoveEventListener()", "full_signature": "@Test(expected = ListenerReadOnlyException.class) public void testRORemoveEventListener()", "class_method_signature": "ObservationManagerFacadeTest.testRORemoveEventListener()", "testcase": true, "constructor": false, "invocations": ["getFacade", "mock", "removeEventListener"]}, "focal_class": {"identifier": "ObservationManagerFacade", "superclass": "", "interfaces": "implements ObservationManager", "fields": [{"original_string": "private static final EventListenerIterator EMPTY_LISTENER_ITERATOR =\n            new EmptyEventListenerIterator();", "modifier": "private static final", "type": "EventListenerIterator", "declarator": "EMPTY_LISTENER_ITERATOR =\n            new EmptyEventListenerIterator()", "var_name": "EMPTY_LISTENER_ITERATOR"}, {"original_string": "private final @NotNull ObservationManager delegate;", "modifier": "private final @NotNull", "type": "ObservationManager", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "ObservationManagerFacade", "parameters": "(final @NotNull ObservationManager delegate)", "modifiers": "public", "return": "", "signature": " ObservationManagerFacade(final @NotNull ObservationManager delegate)", "full_signature": "public  ObservationManagerFacade(final @NotNull ObservationManager delegate)", "class_method_signature": "ObservationManagerFacade.ObservationManagerFacade(final @NotNull ObservationManager delegate)", "testcase": false, "constructor": true}, {"identifier": "getRegisteredEventListeners", "parameters": "()", "modifiers": "@Override public", "return": "EventListenerIterator", "signature": "EventListenerIterator getRegisteredEventListeners()", "full_signature": "@Override public EventListenerIterator getRegisteredEventListeners()", "class_method_signature": "ObservationManagerFacade.getRegisteredEventListeners()", "testcase": false, "constructor": false}, {"identifier": "getEventJournal", "parameters": "()", "modifiers": "@Override public", "return": "EventJournal", "signature": "EventJournal getEventJournal()", "full_signature": "@Override public EventJournal getEventJournal()", "class_method_signature": "ObservationManagerFacade.getEventJournal()", "testcase": false, "constructor": false}, {"identifier": "getEventJournal", "parameters": "(int eventTypes, String absPath, boolean isDeep,\n                                        String[] uuid, String[] nodeTypeName)", "modifiers": "@Override public", "return": "EventJournal", "signature": "EventJournal getEventJournal(int eventTypes, String absPath, boolean isDeep,\n                                        String[] uuid, String[] nodeTypeName)", "full_signature": "@Override public EventJournal getEventJournal(int eventTypes, String absPath, boolean isDeep,\n                                        String[] uuid, String[] nodeTypeName)", "class_method_signature": "ObservationManagerFacade.getEventJournal(int eventTypes, String absPath, boolean isDeep,\n                                        String[] uuid, String[] nodeTypeName)", "testcase": false, "constructor": false}, {"identifier": "setUserData", "parameters": "(String userData)", "modifiers": "@Override public", "return": "void", "signature": "void setUserData(String userData)", "full_signature": "@Override public void setUserData(String userData)", "class_method_signature": "ObservationManagerFacade.setUserData(String userData)", "testcase": false, "constructor": false}, {"identifier": "addEventListener", "parameters": "(EventListener listener, int eventTypes, String absPath,\n                                 boolean isDeep, String[] uuid, String[] nodeTypeName,\n                                 boolean noLocal)", "modifiers": "@Override public", "return": "void", "signature": "void addEventListener(EventListener listener, int eventTypes, String absPath,\n                                 boolean isDeep, String[] uuid, String[] nodeTypeName,\n                                 boolean noLocal)", "full_signature": "@Override public void addEventListener(EventListener listener, int eventTypes, String absPath,\n                                 boolean isDeep, String[] uuid, String[] nodeTypeName,\n                                 boolean noLocal)", "class_method_signature": "ObservationManagerFacade.addEventListener(EventListener listener, int eventTypes, String absPath,\n                                 boolean isDeep, String[] uuid, String[] nodeTypeName,\n                                 boolean noLocal)", "testcase": false, "constructor": false}, {"identifier": "removeEventListener", "parameters": "(EventListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeEventListener(EventListener listener)", "full_signature": "@Override public void removeEventListener(EventListener listener)", "class_method_signature": "ObservationManagerFacade.removeEventListener(EventListener listener)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/jcrfacade/observation/ObservationManagerFacade.java"}, "focal_method": {"identifier": "removeEventListener", "parameters": "(EventListener listener)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void removeEventListener(EventListener listener) throws RepositoryException {\n        throw new ListenerReadOnlyException();\n    }", "signature": "void removeEventListener(EventListener listener)", "full_signature": "@Override public void removeEventListener(EventListener listener)", "class_method_signature": "ObservationManagerFacade.removeEventListener(EventListener listener)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}