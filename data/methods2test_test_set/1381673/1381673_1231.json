{"test_class": {"identifier": "KiePMMLDescrRulesFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(KiePMMLDescrRulesFactoryTest.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(KiePMMLDescrRulesFactoryTest.class.getName())", "var_name": "logger"}, {"original_string": "private static final String PACKAGE_NAME = \"package\";", "modifier": "private static final", "type": "String", "declarator": "PACKAGE_NAME = \"package\"", "var_name": "PACKAGE_NAME"}, {"original_string": "private PackageDescrBuilder builder;", "modifier": "private", "type": "PackageDescrBuilder", "declarator": "builder", "var_name": "builder"}], "file": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRulesFactoryTest.java"}, "test_case": {"identifier": "declareRule", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void declareRule() {\n        String name = \"NAME\";\n        String statusToSet = \"STATUS_TO_SET\";\n        String patternType = \"TEMPERATURE\";\n        String agendaGroup = \"agendaGroup\";\n        String activationGroup = \"activationGroup\";\n        List<KiePMMLFieldOperatorValue> orConstraints = Arrays.asList(new KiePMMLFieldOperatorValue(patternType, BOOLEAN_OPERATOR.OR, Collections.singletonList(new KiePMMLOperatorValue(OPERATOR.LESS_THAN, 35)), null),\n                                                                      new KiePMMLFieldOperatorValue(patternType, BOOLEAN_OPERATOR.AND, Collections.singletonList(new KiePMMLOperatorValue(OPERATOR.GREATER_THAN, 85)), null));\n        KiePMMLDroolsRule rule = KiePMMLDroolsRule.builder(name, statusToSet, Collections.emptyList())\n                .withAgendaGroup(agendaGroup)\n                .withActivationGroup(activationGroup)\n                .withOrConstraints(orConstraints)\n                .build();\n        KiePMMLDescrRulesFactory.factory(builder).declareRule(rule);\n        assertNotNull(builder.getDescr().getRules());\n        assertEquals(1, builder.getDescr().getRules().size());\n        final RuleDescr retrieved = builder.getDescr().getRules().get(0);\n        assertEquals(name, retrieved.getName());\n        assertEquals(2, retrieved.getAttributes().size());\n        assertTrue(retrieved.getAttributes().containsKey(\"agenda-group\"));\n        assertEquals(agendaGroup, retrieved.getAttributes().get(\"agenda-group\").getValue());\n        assertTrue(retrieved.getAttributes().containsKey(\"activation-group\"));\n        assertEquals(activationGroup, retrieved.getAttributes().get(\"activation-group\").getValue());\n        printGeneratedRules();\n    }", "signature": "void declareRule()", "full_signature": "@Test public void declareRule()", "class_method_signature": "KiePMMLDescrRulesFactoryTest.declareRule()", "testcase": true, "constructor": false, "invocations": ["asList", "singletonList", "singletonList", "build", "withOrConstraints", "withActivationGroup", "withAgendaGroup", "builder", "emptyList", "declareRule", "factory", "assertNotNull", "getRules", "getDescr", "assertEquals", "size", "getRules", "getDescr", "get", "getRules", "getDescr", "assertEquals", "getName", "assertEquals", "size", "getAttributes", "assertTrue", "containsKey", "getAttributes", "assertEquals", "getValue", "get", "getAttributes", "assertTrue", "containsKey", "getAttributes", "assertEquals", "getValue", "get", "getAttributes", "printGeneratedRules"]}, "focal_class": {"identifier": "KiePMMLDescrRulesFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String STATUS_HOLDER = \"$statusHolder\";", "modifier": "public static final", "type": "String", "declarator": "STATUS_HOLDER = \"$statusHolder\"", "var_name": "STATUS_HOLDER"}, {"original_string": "public static final String BREAK_LABEL = \"match\";", "modifier": "public static final", "type": "String", "declarator": "BREAK_LABEL = \"match\"", "var_name": "BREAK_LABEL"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(KiePMMLDescrRulesFactory.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(KiePMMLDescrRulesFactory.class.getName())", "var_name": "logger"}, {"original_string": "final PackageDescrBuilder builder;", "modifier": "final", "type": "PackageDescrBuilder", "declarator": "builder", "var_name": "builder"}], "methods": [{"identifier": "KiePMMLDescrRulesFactory", "parameters": "(final PackageDescrBuilder builder)", "modifiers": "private", "return": "", "signature": " KiePMMLDescrRulesFactory(final PackageDescrBuilder builder)", "full_signature": "private  KiePMMLDescrRulesFactory(final PackageDescrBuilder builder)", "class_method_signature": "KiePMMLDescrRulesFactory.KiePMMLDescrRulesFactory(final PackageDescrBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "factory", "parameters": "(final PackageDescrBuilder builder)", "modifiers": "public static", "return": "KiePMMLDescrRulesFactory", "signature": "KiePMMLDescrRulesFactory factory(final PackageDescrBuilder builder)", "full_signature": "public static KiePMMLDescrRulesFactory factory(final PackageDescrBuilder builder)", "class_method_signature": "KiePMMLDescrRulesFactory.factory(final PackageDescrBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "declareRules", "parameters": "(final List<KiePMMLDroolsRule> rules)", "modifiers": "public", "return": "void", "signature": "void declareRules(final List<KiePMMLDroolsRule> rules)", "full_signature": "public void declareRules(final List<KiePMMLDroolsRule> rules)", "class_method_signature": "KiePMMLDescrRulesFactory.declareRules(final List<KiePMMLDroolsRule> rules)", "testcase": false, "constructor": false}, {"identifier": "declareRule", "parameters": "(final KiePMMLDroolsRule rule)", "modifiers": "protected", "return": "void", "signature": "void declareRule(final KiePMMLDroolsRule rule)", "full_signature": "protected void declareRule(final KiePMMLDroolsRule rule)", "class_method_signature": "KiePMMLDescrRulesFactory.declareRule(final KiePMMLDroolsRule rule)", "testcase": false, "constructor": false}, {"identifier": "declareAgendaGroup", "parameters": "(final RuleDescrBuilder ruleBuilder, final String agendaGroup)", "modifiers": "protected", "return": "void", "signature": "void declareAgendaGroup(final RuleDescrBuilder ruleBuilder, final String agendaGroup)", "full_signature": "protected void declareAgendaGroup(final RuleDescrBuilder ruleBuilder, final String agendaGroup)", "class_method_signature": "KiePMMLDescrRulesFactory.declareAgendaGroup(final RuleDescrBuilder ruleBuilder, final String agendaGroup)", "testcase": false, "constructor": false}, {"identifier": "declareActivationGroup", "parameters": "(final RuleDescrBuilder ruleBuilder, final String activationGroup)", "modifiers": "protected", "return": "void", "signature": "void declareActivationGroup(final RuleDescrBuilder ruleBuilder, final String activationGroup)", "full_signature": "protected void declareActivationGroup(final RuleDescrBuilder ruleBuilder, final String activationGroup)", "class_method_signature": "KiePMMLDescrRulesFactory.declareActivationGroup(final RuleDescrBuilder ruleBuilder, final String activationGroup)", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRulesFactory.java"}, "focal_method": {"identifier": "declareRule", "parameters": "(final KiePMMLDroolsRule rule)", "modifiers": "protected", "return": "void", "body": "protected void declareRule(final KiePMMLDroolsRule rule) {\n        logger.trace(\"declareRule {}\", rule);\n        final RuleDescrBuilder ruleBuilder = builder.newRule().name(rule.getName());\n        if (rule.getAgendaGroup() != null) {\n            declareAgendaGroup(ruleBuilder, rule.getAgendaGroup());\n        }\n        if (rule.getActivationGroup() != null) {\n            declareActivationGroup(ruleBuilder, rule.getActivationGroup());\n        }\n        KiePMMLDescrLhsFactory.factory(ruleBuilder.lhs()).declareLhs(rule);\n        KiePMMLDescrRhsFactory.factory(ruleBuilder).declareRhs(rule);\n    }", "signature": "void declareRule(final KiePMMLDroolsRule rule)", "full_signature": "protected void declareRule(final KiePMMLDroolsRule rule)", "class_method_signature": "KiePMMLDescrRulesFactory.declareRule(final KiePMMLDroolsRule rule)", "testcase": false, "constructor": false, "invocations": ["trace", "name", "newRule", "getName", "getAgendaGroup", "declareAgendaGroup", "getAgendaGroup", "getActivationGroup", "declareActivationGroup", "getActivationGroup", "declareLhs", "factory", "lhs", "declareRhs", "factory"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}