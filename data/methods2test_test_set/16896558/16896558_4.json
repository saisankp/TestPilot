{"test_class": {"identifier": "CompletableFuturesTest", "superclass": "", "interfaces": "", "fields": [], "file": "blog-code/src/test/java/pl/ciruk/blog/fanout/CompletableFuturesTest.java"}, "test_case": {"identifier": "shouldExecuteLongRunningOutliers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldExecuteLongRunningOutliers() throws Exception {\n\t\t// Given\n\t\tCompletableFuture<String> future = CompletableFuture.completedFuture(\"SampleText\");\n\n\t\t// When\n\t\tCompletableFuture<Stream<Integer>> actualFuture = future.thenCompose(\n\t\t\t\tfanOut(ImmutableList.of(\n\t\t\t\t\t\ttext -> 1,\n\t\t\t\t\t\ttext -> 2,\n\t\t\t\t\t\ttext -> {\n\t\t\t\t\t\t\twaitThreeSecond();\n\t\t\t\t\t\t\treturn 4;\n\t\t\t\t\t\t}\n\t\t\t\t))\n\t\t);\n\t\tCompletableFuture<Integer> actualSum = actualFuture.thenApply(\n\t\t\t\tstream -> stream.reduce((a, b) -> a + b).orElse(-1)\n\t\t);\n\n\t\t// Then\n\t\tassertThat(actualSum.get(), is(equalTo(7)));\n\t}", "signature": "void shouldExecuteLongRunningOutliers()", "full_signature": "@Test public void shouldExecuteLongRunningOutliers()", "class_method_signature": "CompletableFuturesTest.shouldExecuteLongRunningOutliers()", "testcase": true, "constructor": false, "invocations": ["completedFuture", "thenCompose", "fanOut", "of", "waitThreeSecond", "thenApply", "orElse", "reduce", "assertThat", "get", "is", "equalTo"]}, "focal_class": {"identifier": "CompletableFutures", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "fanOut", "parameters": "(Collection<Function<F, T>> mappings)", "modifiers": "static", "return": "Function<F, CompletableFuture<Stream<T>>>", "signature": "Function<F, CompletableFuture<Stream<T>>> fanOut(Collection<Function<F, T>> mappings)", "full_signature": "static Function<F, CompletableFuture<Stream<T>>> fanOut(Collection<Function<F, T>> mappings)", "class_method_signature": "CompletableFutures.fanOut(Collection<Function<F, T>> mappings)", "testcase": false, "constructor": false}, {"identifier": "fanOut", "parameters": "(Collection<Function<F, T>> mappings, ExecutorService executorService)", "modifiers": "static", "return": "Function<F, CompletableFuture<Stream<T>>>", "signature": "Function<F, CompletableFuture<Stream<T>>> fanOut(Collection<Function<F, T>> mappings, ExecutorService executorService)", "full_signature": "static Function<F, CompletableFuture<Stream<T>>> fanOut(Collection<Function<F, T>> mappings, ExecutorService executorService)", "class_method_signature": "CompletableFutures.fanOut(Collection<Function<F, T>> mappings, ExecutorService executorService)", "testcase": false, "constructor": false}, {"identifier": "combineUsing", "parameters": "(BiFunction<T, T, T> combiningFunction)", "modifiers": "public static", "return": "BinaryOperator<CompletableFuture<T>>", "signature": "BinaryOperator<CompletableFuture<T>> combineUsing(BiFunction<T, T, T> combiningFunction)", "full_signature": "public static BinaryOperator<CompletableFuture<T>> combineUsing(BiFunction<T, T, T> combiningFunction)", "class_method_signature": "CompletableFutures.combineUsing(BiFunction<T, T, T> combiningFunction)", "testcase": false, "constructor": false}, {"identifier": "combineUsing", "parameters": "(BiFunction<T, T, T> combiningFunction, ExecutorService executorService)", "modifiers": "public static", "return": "BinaryOperator<CompletableFuture<T>>", "signature": "BinaryOperator<CompletableFuture<T>> combineUsing(BiFunction<T, T, T> combiningFunction, ExecutorService executorService)", "full_signature": "public static BinaryOperator<CompletableFuture<T>> combineUsing(BiFunction<T, T, T> combiningFunction, ExecutorService executorService)", "class_method_signature": "CompletableFutures.combineUsing(BiFunction<T, T, T> combiningFunction, ExecutorService executorService)", "testcase": false, "constructor": false}, {"identifier": "CompletableFutures", "parameters": "()", "modifiers": "private", "return": "", "signature": " CompletableFutures()", "full_signature": "private  CompletableFutures()", "class_method_signature": "CompletableFutures.CompletableFutures()", "testcase": false, "constructor": true}], "file": "blog-code/src/main/java/pl/ciruk/blog/fanout/CompletableFutures.java"}, "focal_method": {"identifier": "fanOut", "parameters": "(Collection<Function<F, T>> mappings)", "modifiers": "static", "return": "Function<F, CompletableFuture<Stream<T>>>", "body": "static <F, T> Function<F, CompletableFuture<Stream<T>>> fanOut(Collection<Function<F, T>> mappings) {\n\t\treturn fanOut(mappings, ForkJoinPool.commonPool());\n\t}", "signature": "Function<F, CompletableFuture<Stream<T>>> fanOut(Collection<Function<F, T>> mappings)", "full_signature": "static Function<F, CompletableFuture<Stream<T>>> fanOut(Collection<Function<F, T>> mappings)", "class_method_signature": "CompletableFutures.fanOut(Collection<Function<F, T>> mappings)", "testcase": false, "constructor": false, "invocations": ["fanOut", "commonPool"]}, "repository": {"repo_id": 16896558, "url": "https://github.com/cpiotr/blog", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 7, "size": 49, "license": "licensed"}}