{"test_class": {"identifier": "SQLUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "das-console-manager/src/test/java/com/ppdai/das/console/common/utils/SQLUtilsTest.java"}, "test_case": {"identifier": "testCheckSQLServerInsert", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testCheckSQLServerInsert(){\n        String sql = SQLUtils.checkSql(\"insert into t(id) values(1)\", DatabaseCategory.MySql);\n    }", "signature": "void testCheckSQLServerInsert()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testCheckSQLServerInsert()", "class_method_signature": "SQLUtilsTest.testCheckSQLServerInsert()", "testcase": true, "constructor": false, "invocations": ["checkSql"]}, "focal_class": {"identifier": "SQLUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int LIMIT_MAX = 500;", "modifier": "static final", "type": "int", "declarator": "LIMIT_MAX = 500", "var_name": "LIMIT_MAX"}], "methods": [{"identifier": "checkSql", "parameters": "(String sql, DatabaseCategory category)", "modifiers": "public static", "return": "String", "signature": "String checkSql(String sql, DatabaseCategory category)", "full_signature": "public static String checkSql(String sql, DatabaseCategory category)", "class_method_signature": "SQLUtils.checkSql(String sql, DatabaseCategory category)", "testcase": false, "constructor": false}, {"identifier": "withTableShard", "parameters": "(String sql, String tableShardId, DatabaseCategory category)", "modifiers": "public static", "return": "String", "signature": "String withTableShard(String sql, String tableShardId, DatabaseCategory category)", "full_signature": "public static String withTableShard(String sql, String tableShardId, DatabaseCategory category)", "class_method_signature": "SQLUtils.withTableShard(String sql, String tableShardId, DatabaseCategory category)", "testcase": false, "constructor": false}, {"identifier": "replaceTableName", "parameters": "(SQLExprTableSource x, String tableShardId)", "modifiers": "static", "return": "boolean", "signature": "boolean replaceTableName(SQLExprTableSource x, String tableShardId)", "full_signature": "static boolean replaceTableName(SQLExprTableSource x, String tableShardId)", "class_method_signature": "SQLUtils.replaceTableName(SQLExprTableSource x, String tableShardId)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/common/utils/SQLUtils.java"}, "focal_method": {"identifier": "checkSql", "parameters": "(String sql, DatabaseCategory category)", "modifiers": "public static", "return": "String", "body": "public static String checkSql(String sql, DatabaseCategory category) {\n        final boolean isMySQL = category == DatabaseCategory.MySql;\n\n        List<SQLStatement> sqlStatements = com.alibaba.druid.sql.SQLUtils.parseStatements(sql, isMySQL? JdbcConstants.MYSQL : JdbcConstants.SQL_SERVER);\n        Preconditions.checkArgument(sqlStatements.size() == 1, \"\u8bf7\u4e0d\u8981\u8f93\u5165\u591a\u6761SQL\u8bed\u53e5\");\n        SQLStatement sqlStatement = sqlStatements.get(0);\n        if(isMySQL) {\n            if(sqlStatement instanceof SQLSelectStatement){\n                AtomicInteger offset = new AtomicInteger(0);\n                AtomicInteger count  = new AtomicInteger(-1);\n                sqlStatement.accept(new SQLASTVisitorAdapter() {\n                    @Override public boolean visit(SQLLimit x) {\n                        if(x.getOffset() != null){\n                            offset.set(((SQLIntegerExpr)x.getOffset()).getNumber().intValue());\n                        }\n                        count.set(((SQLIntegerExpr)x.getRowCount()).getNumber().intValue());\n                        return true;\n                    }\n                });\n\n                Preconditions.checkArgument(count.get() <= LIMIT_MAX, \"\u8bf7\u4e0d\u8981\u8f93\u5165 limit > \" + LIMIT_MAX);\n                return PagerUtils.limit(sql, JdbcConstants.MYSQL, offset.get(), count.get() == -1 ? LIMIT_MAX  : count.get());\n            }\n            if (sqlStatement instanceof SQLShowTablesStatement) {\n                return sql;\n            }\n        } else {\n            if(sqlStatement instanceof SQLSelectStatement){\n                AtomicInteger offset = new AtomicInteger(0);\n                AtomicInteger count  = new AtomicInteger(-1);\n                sqlStatement.accept(new SQLServerASTVisitorAdapter() {\n                    @Override public boolean visit(SQLServerTop x) {//Check top\n                        count.set(((SQLIntegerExpr)x.getExpr()).getNumber().intValue());\n                        return true;\n                    }\n                    @Override public boolean visit(SQLServerSelectQueryBlock x) {\n                        SQLLimit limit = x.getLimit();\n                        if(limit != null){\n                            if(limit.getOffset() != null){\n                                offset.set(((SQLIntegerExpr)limit.getOffset()).getNumber().intValue());\n                            }\n                            if(limit.getRowCount() != null) {\n                                count.set(((SQLIntegerExpr) limit.getRowCount()).getNumber().intValue());\n                            }\n                        }\n\n                        return true;\n                    }\n                });\n                Preconditions.checkArgument(count.get() <= LIMIT_MAX, \"\u8bf7\u4e0d\u8981\u8f93\u5165 limit > \" + LIMIT_MAX);\n                return PagerUtils.limit(sql, JdbcConstants.SQL_SERVER, offset.get(), count.get() == -1 ? LIMIT_MAX  : count.get());\n            }\n        }\n        throw new IllegalArgumentException(\"\u53ea\u652f\u6301\u67e5\u8be2SQL\u8bed\u53e5\");\n    }", "signature": "String checkSql(String sql, DatabaseCategory category)", "full_signature": "public static String checkSql(String sql, DatabaseCategory category)", "class_method_signature": "SQLUtils.checkSql(String sql, DatabaseCategory category)", "testcase": false, "constructor": false, "invocations": ["parseStatements", "checkArgument", "size", "get", "accept", "getOffset", "set", "intValue", "getNumber", "getOffset", "set", "intValue", "getNumber", "getRowCount", "checkArgument", "get", "limit", "get", "get", "get", "accept", "set", "intValue", "getNumber", "getExpr", "getLimit", "getOffset", "set", "intValue", "getNumber", "getOffset", "getRowCount", "set", "intValue", "getNumber", "getRowCount", "checkArgument", "get", "limit", "get", "get", "get"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}