{"test_class": {"identifier": "MapElementGridSetTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "private static final String SHP_RESOURCE = MapPolylineGridSetTest.class.getPackage().getName().replaceAll(\"\\\\.\", \"/\") //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t+ \"/test.shp\";", "modifier": "private static final", "type": "String", "declarator": "SHP_RESOURCE = MapPolylineGridSetTest.class.getPackage().getName().replaceAll(\"\\\\.\", \"/\") //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t+ \"/test.shp\"", "var_name": "SHP_RESOURCE"}, {"original_string": "private ArrayList<MapPolyline> reference = null;", "modifier": "private", "type": "ArrayList<MapPolyline>", "declarator": "reference = null", "var_name": "reference"}, {"original_string": "private Rectangle2d bounds = null;", "modifier": "private", "type": "Rectangle2d", "declarator": "bounds = null", "var_name": "bounds"}], "file": "advanced/gis/giscore/src/test/java/org/arakhne/afc/gis/grid/MapElementGridSetTest.java"}, "test_case": {"identifier": "testAddE", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddE() {\n\t\tStandardGISGridSet<GISPrimitive> test = new StandardGISGridSet<>(100,100,this.bounds);\n        assertTrue(test.addAll(this.reference));\n        assertEquals(this.reference.size(), test.size());\n\n        String msg;\n        Random rnd = new Random();\n        int testCount = rnd.nextInt(5)+1;\n\n        for(int i=0; i<testCount; ++i) {\n        \tmsg = \"test \"+(i+1)+\"/\"+testCount; //$NON-NLS-1$ //$NON-NLS-2$\n        \tgetLogger().info(msg+\"...\"); //$NON-NLS-1$\n\n\t        // Add an element\n        \tdouble x = this.bounds.getMinX() + rnd.nextDouble() * this.bounds.getWidth();\n        \tdouble y = this.bounds.getMinY() + rnd.nextDouble() * this.bounds.getHeight();\n\t        MapPolyline newElement = new MapPolyline();\n\t        newElement.addPoint(x, y);\n        \tx = this.bounds.getMinX() + rnd.nextDouble() * this.bounds.getWidth();\n        \ty = this.bounds.getMinY() + rnd.nextDouble() * this.bounds.getHeight();\n\t        newElement.addPoint(x, y);\n\t        assertTrue(this.reference.add(newElement), msg);\n\t        assertTrue(test.add(newElement), msg);\n\t        assertEquals(this.reference.size(), test.size(), msg);\n\t        assertTrue(test.slowContains(newElement), msg);\n\t    \tassertEpsilonEquals(this.reference.toArray(),test.toArray(), msg);\n\t    \tgetLogger().info(\"done\"); //$NON-NLS-1$\n        }\n\t}", "signature": "void testAddE()", "full_signature": "@Test public void testAddE()", "class_method_signature": "MapElementGridSetTest.testAddE()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "addAll", "assertEquals", "size", "size", "nextInt", "info", "getLogger", "getMinX", "nextDouble", "getWidth", "getMinY", "nextDouble", "getHeight", "addPoint", "getMinX", "nextDouble", "getWidth", "getMinY", "nextDouble", "getHeight", "addPoint", "assertTrue", "add", "assertTrue", "add", "assertEquals", "size", "size", "assertTrue", "slowContains", "assertEpsilonEquals", "toArray", "toArray", "info", "getLogger"]}, "focal_class": {"identifier": "MapElementGridSet", "superclass": "extends AbstractGISGridSet<P>", "interfaces": "implements GISElementSet<P>", "fields": [], "methods": [{"identifier": "MapElementGridSet", "parameters": "(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "modifiers": "public", "return": "", "signature": " MapElementGridSet(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "full_signature": "public  MapElementGridSet(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "class_method_signature": "MapElementGridSet.MapElementGridSet(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "testcase": false, "constructor": true}, {"identifier": "MapElementGridSet", "parameters": "(int nRows, int nColumns, Rectangle2d bounds)", "modifiers": "public", "return": "", "signature": " MapElementGridSet(int nRows, int nColumns, Rectangle2d bounds)", "full_signature": "public  MapElementGridSet(int nRows, int nColumns, Rectangle2d bounds)", "class_method_signature": "MapElementGridSet.MapElementGridSet(int nRows, int nColumns, Rectangle2d bounds)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(P point)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(P point)", "full_signature": "@Override public boolean add(P point)", "class_method_signature": "MapElementGridSet.add(P point)", "testcase": false, "constructor": false}, {"identifier": "getNearest", "parameters": "(Point2D<?, ?> position)", "modifiers": "@Override @Pure public final", "return": "P", "signature": "P getNearest(Point2D<?, ?> position)", "full_signature": "@Override @Pure public final P getNearest(Point2D<?, ?> position)", "class_method_signature": "MapElementGridSet.getNearest(Point2D<?, ?> position)", "testcase": false, "constructor": false}, {"identifier": "getNearest", "parameters": "(double x, double y)", "modifiers": "@Override @Pure public final", "return": "P", "signature": "P getNearest(double x, double y)", "full_signature": "@Override @Pure public final P getNearest(double x, double y)", "class_method_signature": "MapElementGridSet.getNearest(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "getNearestData", "parameters": "(double x, double y)", "modifiers": "@Override @Pure public final", "return": "Pair<P, Double>", "signature": "Pair<P, Double> getNearestData(double x, double y)", "full_signature": "@Override @Pure public final Pair<P, Double> getNearestData(double x, double y)", "class_method_signature": "MapElementGridSet.getNearestData(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "getNearestData", "parameters": "(Point2D<?, ?> position)", "modifiers": "@Override @Pure public", "return": "Pair<P, Double>", "signature": "Pair<P, Double> getNearestData(Point2D<?, ?> position)", "full_signature": "@Override @Pure public Pair<P, Double> getNearestData(Point2D<?, ?> position)", "class_method_signature": "MapElementGridSet.getNearestData(Point2D<?, ?> position)", "testcase": false, "constructor": false}], "file": "advanced/gis/giscore/src/main/java/org/arakhne/afc/gis/grid/MapElementGridSet.java"}, "focal_method": {"identifier": "add", "parameters": "(P point)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean add(P point) {\n\t\tif (this.grid.addElement(point)) {\n\t\t\tupdateComponentType(point);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}", "signature": "boolean add(P point)", "full_signature": "@Override public boolean add(P point)", "class_method_signature": "MapElementGridSet.add(P point)", "testcase": false, "constructor": false, "invocations": ["addElement", "updateComponentType"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}