{"test_class": {"identifier": "SequenceIdUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private SequenceDescriptor sequenceDescriptor;", "modifier": "@Mock\n    private", "type": "SequenceDescriptor", "declarator": "sequenceDescriptor", "var_name": "sequenceDescriptor"}, {"original_string": "@Mock\n    private SequenceDescriptorKeyUtil sequenceDescriptorKeyUtil;", "modifier": "@Mock\n    private", "type": "SequenceDescriptorKeyUtil", "declarator": "sequenceDescriptorKeyUtil", "var_name": "sequenceDescriptorKeyUtil"}, {"original_string": "private SequenceIdUtil underTest = new SequenceIdUtil();", "modifier": "private", "type": "SequenceIdUtil", "declarator": "underTest = new SequenceIdUtil()", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-message-sequence/src/test/java/com/epam/wilma/sequence/helper/SequenceIdUtilTest.java"}, "test_case": {"identifier": "testCreateSequenceId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateSequenceId() {\n        //GIVEN\n        String handlerKey = \"Key\";\n        given(sequenceDescriptor.getGroupName()).willReturn(\"groupname\");\n        given(sequenceDescriptor.getName()).willReturn(\"name\");\n        given(sequenceDescriptorKeyUtil.createDescriptorKey(\"groupname\", \"name\")).willReturn(\"groupname_name\");\n        Whitebox.setInternalState(underTest, \"sequenceDescriptorKeyUtil\", sequenceDescriptorKeyUtil);\n        //WHEN\n        String result = underTest.createSequenceId(handlerKey, sequenceDescriptor);\n        //THEN\n        Assert.assertEquals(result, \"groupname_name|Key\");\n    }", "signature": "void testCreateSequenceId()", "full_signature": "@Test public void testCreateSequenceId()", "class_method_signature": "SequenceIdUtilTest.testCreateSequenceId()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getGroupName", "willReturn", "given", "getName", "willReturn", "given", "createDescriptorKey", "setInternalState", "createSequenceId", "assertEquals"]}, "focal_class": {"identifier": "SequenceIdUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ESCAPED_SEQUENCE_ID_SEPARATOR = Pattern.quote(SequenceConstants.SEQUENCE_ID_SEPARATOR.getConstant());", "modifier": "private static final", "type": "String", "declarator": "ESCAPED_SEQUENCE_ID_SEPARATOR = Pattern.quote(SequenceConstants.SEQUENCE_ID_SEPARATOR.getConstant())", "var_name": "ESCAPED_SEQUENCE_ID_SEPARATOR"}, {"original_string": "@Autowired\n    private SequenceDescriptorKeyUtil sequenceDescriptorKeyUtil;", "modifier": "@Autowired\n    private", "type": "SequenceDescriptorKeyUtil", "declarator": "sequenceDescriptorKeyUtil", "var_name": "sequenceDescriptorKeyUtil"}], "methods": [{"identifier": "getDescriptorKey", "parameters": "(final String sequenceId)", "modifiers": "public", "return": "String", "signature": "String getDescriptorKey(final String sequenceId)", "full_signature": "public String getDescriptorKey(final String sequenceId)", "class_method_signature": "SequenceIdUtil.getDescriptorKey(final String sequenceId)", "testcase": false, "constructor": false}, {"identifier": "getHandlerKey", "parameters": "(final String sequenceId)", "modifiers": "public", "return": "String", "signature": "String getHandlerKey(final String sequenceId)", "full_signature": "public String getHandlerKey(final String sequenceId)", "class_method_signature": "SequenceIdUtil.getHandlerKey(final String sequenceId)", "testcase": false, "constructor": false}, {"identifier": "createSequenceId", "parameters": "(final String handlerKey, final SequenceDescriptor sequenceDescriptor)", "modifiers": "public", "return": "String", "signature": "String createSequenceId(final String handlerKey, final SequenceDescriptor sequenceDescriptor)", "full_signature": "public String createSequenceId(final String handlerKey, final SequenceDescriptor sequenceDescriptor)", "class_method_signature": "SequenceIdUtil.createSequenceId(final String handlerKey, final SequenceDescriptor sequenceDescriptor)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-message-sequence/src/main/java/com/epam/wilma/sequence/helper/SequenceIdUtil.java"}, "focal_method": {"identifier": "createSequenceId", "parameters": "(final String handlerKey, final SequenceDescriptor sequenceDescriptor)", "modifiers": "public", "return": "String", "body": "public String createSequenceId(final String handlerKey, final SequenceDescriptor sequenceDescriptor) {\n        StringBuilder sb = new StringBuilder();\n        String descriptorKey = sequenceDescriptorKeyUtil.createDescriptorKey(sequenceDescriptor.getGroupName(), sequenceDescriptor.getName());\n        sb.append(descriptorKey).append(SequenceConstants.SEQUENCE_ID_SEPARATOR.getConstant()).append(handlerKey);\n        return sb.toString();\n    }", "signature": "String createSequenceId(final String handlerKey, final SequenceDescriptor sequenceDescriptor)", "full_signature": "public String createSequenceId(final String handlerKey, final SequenceDescriptor sequenceDescriptor)", "class_method_signature": "SequenceIdUtil.createSequenceId(final String handlerKey, final SequenceDescriptor sequenceDescriptor)", "testcase": false, "constructor": false, "invocations": ["createDescriptorKey", "getGroupName", "getName", "append", "append", "append", "getConstant", "toString"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}