{"test_class": {"identifier": "ExponentialBackoffMsgRetryManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Long TEST_OFFSET = 101L;", "modifier": "private static final", "type": "Long", "declarator": "TEST_OFFSET = 101L", "var_name": "TEST_OFFSET"}, {"original_string": "private static final Long TEST_OFFSET2 = 102L;", "modifier": "private static final", "type": "Long", "declarator": "TEST_OFFSET2 = 102L", "var_name": "TEST_OFFSET2"}], "file": "storm/storm-app/src/test/java/storm/kafka/ExponentialBackoffMsgRetryManagerTest.java"}, "test_case": {"identifier": "testRetryWithoutFail", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n    public void testRetryWithoutFail() throws Exception {\n        ExponentialBackoffMsgRetryManager manager = new ExponentialBackoffMsgRetryManager(0, 0d, 0);\n        manager.retryStarted(TEST_OFFSET);\n    }", "signature": "void testRetryWithoutFail()", "full_signature": "@Test(expected = IllegalStateException.class) public void testRetryWithoutFail()", "class_method_signature": "ExponentialBackoffMsgRetryManagerTest.testRetryWithoutFail()", "testcase": true, "constructor": false, "invocations": ["retryStarted"]}, "focal_class": {"identifier": "ExponentialBackoffMsgRetryManager", "superclass": "", "interfaces": "implements FailedMsgRetryManager", "fields": [{"original_string": "private final long retryInitialDelayMs;", "modifier": "private final", "type": "long", "declarator": "retryInitialDelayMs", "var_name": "retryInitialDelayMs"}, {"original_string": "private final double retryDelayMultiplier;", "modifier": "private final", "type": "double", "declarator": "retryDelayMultiplier", "var_name": "retryDelayMultiplier"}, {"original_string": "private final long retryDelayMaxMs;", "modifier": "private final", "type": "long", "declarator": "retryDelayMaxMs", "var_name": "retryDelayMaxMs"}, {"original_string": "private Queue<MessageRetryRecord> waiting = new PriorityQueue<MessageRetryRecord>(11, new RetryTimeComparator());", "modifier": "private", "type": "Queue<MessageRetryRecord>", "declarator": "waiting = new PriorityQueue<MessageRetryRecord>(11, new RetryTimeComparator())", "var_name": "waiting"}, {"original_string": "private Map<Long,MessageRetryRecord> records = new HashMap<Long,MessageRetryRecord>();", "modifier": "private", "type": "Map<Long,MessageRetryRecord>", "declarator": "records = new HashMap<Long,MessageRetryRecord>()", "var_name": "records"}], "methods": [{"identifier": "ExponentialBackoffMsgRetryManager", "parameters": "(long retryInitialDelayMs, double retryDelayMultiplier, long retryDelayMaxMs)", "modifiers": "public", "return": "", "signature": " ExponentialBackoffMsgRetryManager(long retryInitialDelayMs, double retryDelayMultiplier, long retryDelayMaxMs)", "full_signature": "public  ExponentialBackoffMsgRetryManager(long retryInitialDelayMs, double retryDelayMultiplier, long retryDelayMaxMs)", "class_method_signature": "ExponentialBackoffMsgRetryManager.ExponentialBackoffMsgRetryManager(long retryInitialDelayMs, double retryDelayMultiplier, long retryDelayMaxMs)", "testcase": false, "constructor": true}, {"identifier": "failed", "parameters": "(Long offset)", "modifiers": "@Override public", "return": "void", "signature": "void failed(Long offset)", "full_signature": "@Override public void failed(Long offset)", "class_method_signature": "ExponentialBackoffMsgRetryManager.failed(Long offset)", "testcase": false, "constructor": false}, {"identifier": "acked", "parameters": "(Long offset)", "modifiers": "@Override public", "return": "void", "signature": "void acked(Long offset)", "full_signature": "@Override public void acked(Long offset)", "class_method_signature": "ExponentialBackoffMsgRetryManager.acked(Long offset)", "testcase": false, "constructor": false}, {"identifier": "retryStarted", "parameters": "(Long offset)", "modifiers": "@Override public", "return": "void", "signature": "void retryStarted(Long offset)", "full_signature": "@Override public void retryStarted(Long offset)", "class_method_signature": "ExponentialBackoffMsgRetryManager.retryStarted(Long offset)", "testcase": false, "constructor": false}, {"identifier": "nextFailedMessageToRetry", "parameters": "()", "modifiers": "@Override public", "return": "Long", "signature": "Long nextFailedMessageToRetry()", "full_signature": "@Override public Long nextFailedMessageToRetry()", "class_method_signature": "ExponentialBackoffMsgRetryManager.nextFailedMessageToRetry()", "testcase": false, "constructor": false}, {"identifier": "shouldRetryMsg", "parameters": "(Long offset)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean shouldRetryMsg(Long offset)", "full_signature": "@Override public boolean shouldRetryMsg(Long offset)", "class_method_signature": "ExponentialBackoffMsgRetryManager.shouldRetryMsg(Long offset)", "testcase": false, "constructor": false}], "file": "storm/storm-app/src/main/java/storm/kafka/ExponentialBackoffMsgRetryManager.java"}, "focal_method": {"identifier": "retryStarted", "parameters": "(Long offset)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void retryStarted(Long offset) {\n        MessageRetryRecord record = this.records.get(offset);\n        if (record == null || !this.waiting.contains(record)) {\n            throw new IllegalStateException(\"cannot retry a message that has not failed\");\n        } else {\n            this.waiting.remove(record);\n        }\n    }", "signature": "void retryStarted(Long offset)", "full_signature": "@Override public void retryStarted(Long offset)", "class_method_signature": "ExponentialBackoffMsgRetryManager.retryStarted(Long offset)", "testcase": false, "constructor": false, "invocations": ["get", "contains", "remove"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}