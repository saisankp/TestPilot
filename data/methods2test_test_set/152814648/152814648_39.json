{"test_class": {"identifier": "ModelValidationTest", "superclass": "", "interfaces": "", "fields": [], "file": "plugin/src/test/java/io/jenkins/plugins/analysis/core/util/ModelValidationTest.java"}, "test_case": {"identifier": "shouldContainSingleElementAndPlaceHolder", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldContainSingleElementAndPlaceHolder() {\n        JenkinsFacade jenkins = mock(JenkinsFacade.class);\n        Job<?, ?> job = mock(Job.class);\n        String name = \"Job Name\";\n        when(jenkins.getFullNameOf(job)).thenReturn(name);\n        when(jenkins.getAllJobNames()).thenReturn(Collections.singleton(name));\n\n        ModelValidation model = new ModelValidation(jenkins);\n\n        ComboBoxModel actualModel = model.getAllJobs();\n\n        assertThat(actualModel).hasSize(2);\n        assertThat(actualModel).containsExactly(NO_REFERENCE_JOB, name);\n    }", "signature": "void shouldContainSingleElementAndPlaceHolder()", "full_signature": "@Test void shouldContainSingleElementAndPlaceHolder()", "class_method_signature": "ModelValidationTest.shouldContainSingleElementAndPlaceHolder()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getFullNameOf", "thenReturn", "when", "getAllJobNames", "singleton", "getAllJobs", "hasSize", "assertThat", "containsExactly", "assertThat"]}, "focal_class": {"identifier": "ModelValidation", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<String> ALL_CHARSETS = Charset.availableCharsets().keySet();", "modifier": "private static final", "type": "Set<String>", "declarator": "ALL_CHARSETS = Charset.availableCharsets().keySet()", "var_name": "ALL_CHARSETS"}, {"original_string": "private static final Pattern VALID_ID_PATTERN = Pattern.compile(\"\\\\p{Alnum}[\\\\p{Alnum}-_]*\");", "modifier": "private static final", "type": "Pattern", "declarator": "VALID_ID_PATTERN = Pattern.compile(\"\\\\p{Alnum}[\\\\p{Alnum}-_]*\")", "var_name": "VALID_ID_PATTERN"}, {"original_string": "@VisibleForTesting\n    static final String NO_REFERENCE_JOB = \"-\";", "modifier": "@VisibleForTesting\n    static final", "type": "String", "declarator": "NO_REFERENCE_JOB = \"-\"", "var_name": "NO_REFERENCE_JOB"}, {"original_string": "static final String NO_REFERENCE_BUILD = \"-\";", "modifier": "static final", "type": "String", "declarator": "NO_REFERENCE_BUILD = \"-\"", "var_name": "NO_REFERENCE_BUILD"}, {"original_string": "private final JenkinsFacade jenkins;", "modifier": "private final", "type": "JenkinsFacade", "declarator": "jenkins", "var_name": "jenkins"}], "methods": [{"identifier": "ModelValidation", "parameters": "()", "modifiers": "public", "return": "", "signature": " ModelValidation()", "full_signature": "public  ModelValidation()", "class_method_signature": "ModelValidation.ModelValidation()", "testcase": false, "constructor": true}, {"identifier": "ModelValidation", "parameters": "(final JenkinsFacade jenkins)", "modifiers": "@VisibleForTesting", "return": "", "signature": " ModelValidation(final JenkinsFacade jenkins)", "full_signature": "@VisibleForTesting  ModelValidation(final JenkinsFacade jenkins)", "class_method_signature": "ModelValidation.ModelValidation(final JenkinsFacade jenkins)", "testcase": false, "constructor": true}, {"identifier": "getAllCharsets", "parameters": "()", "modifiers": "public", "return": "ComboBoxModel", "signature": "ComboBoxModel getAllCharsets()", "full_signature": "public ComboBoxModel getAllCharsets()", "class_method_signature": "ModelValidation.getAllCharsets()", "testcase": false, "constructor": false}, {"identifier": "getCharset", "parameters": "(@CheckForNull final String charset)", "modifiers": "public", "return": "Charset", "signature": "Charset getCharset(@CheckForNull final String charset)", "full_signature": "public Charset getCharset(@CheckForNull final String charset)", "class_method_signature": "ModelValidation.getCharset(@CheckForNull final String charset)", "testcase": false, "constructor": false}, {"identifier": "ensureValidId", "parameters": "(final String id)", "modifiers": "public", "return": "void", "signature": "void ensureValidId(final String id)", "full_signature": "public void ensureValidId(final String id)", "class_method_signature": "ModelValidation.ensureValidId(final String id)", "testcase": false, "constructor": false}, {"identifier": "validateId", "parameters": "(final String id)", "modifiers": "public", "return": "FormValidation", "signature": "FormValidation validateId(final String id)", "full_signature": "public FormValidation validateId(final String id)", "class_method_signature": "ModelValidation.validateId(final String id)", "testcase": false, "constructor": false}, {"identifier": "isValidId", "parameters": "(final String id)", "modifiers": "private", "return": "boolean", "signature": "boolean isValidId(final String id)", "full_signature": "private boolean isValidId(final String id)", "class_method_signature": "ModelValidation.isValidId(final String id)", "testcase": false, "constructor": false}, {"identifier": "validateCharset", "parameters": "(final String reportEncoding)", "modifiers": "public", "return": "FormValidation", "signature": "FormValidation validateCharset(final String reportEncoding)", "full_signature": "public FormValidation validateCharset(final String reportEncoding)", "class_method_signature": "ModelValidation.validateCharset(final String reportEncoding)", "testcase": false, "constructor": false}, {"identifier": "getAllSeverityFilters", "parameters": "()", "modifiers": "public", "return": "ListBoxModel", "signature": "ListBoxModel getAllSeverityFilters()", "full_signature": "public ListBoxModel getAllSeverityFilters()", "class_method_signature": "ModelValidation.getAllSeverityFilters()", "testcase": false, "constructor": false}, {"identifier": "getAllTrendChartTypes", "parameters": "()", "modifiers": "public", "return": "ListBoxModel", "signature": "ListBoxModel getAllTrendChartTypes()", "full_signature": "public ListBoxModel getAllTrendChartTypes()", "class_method_signature": "ModelValidation.getAllTrendChartTypes()", "testcase": false, "constructor": false}, {"identifier": "getAllJobs", "parameters": "()", "modifiers": "public", "return": "ComboBoxModel", "signature": "ComboBoxModel getAllJobs()", "full_signature": "public ComboBoxModel getAllJobs()", "class_method_signature": "ModelValidation.getAllJobs()", "testcase": false, "constructor": false}, {"identifier": "validateJob", "parameters": "(final String referenceJobName)", "modifiers": "public", "return": "FormValidation", "signature": "FormValidation validateJob(final String referenceJobName)", "full_signature": "public FormValidation validateJob(final String referenceJobName)", "class_method_signature": "ModelValidation.validateJob(final String referenceJobName)", "testcase": false, "constructor": false}, {"identifier": "createWrongEncodingErrorMessage", "parameters": "()", "modifiers": "@VisibleForTesting static", "return": "String", "signature": "String createWrongEncodingErrorMessage()", "full_signature": "@VisibleForTesting static String createWrongEncodingErrorMessage()", "class_method_signature": "ModelValidation.createWrongEncodingErrorMessage()", "testcase": false, "constructor": false}, {"identifier": "validateThreshold", "parameters": "(@QueryParameter final int threshold)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "FormValidation", "signature": "FormValidation validateThreshold(@QueryParameter final int threshold)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public FormValidation validateThreshold(@QueryParameter final int threshold)", "class_method_signature": "ModelValidation.validateThreshold(@QueryParameter final int threshold)", "testcase": false, "constructor": false}, {"identifier": "validateHealthy", "parameters": "(final int healthy, final int unhealthy)", "modifiers": "public", "return": "FormValidation", "signature": "FormValidation validateHealthy(final int healthy, final int unhealthy)", "full_signature": "public FormValidation validateHealthy(final int healthy, final int unhealthy)", "class_method_signature": "ModelValidation.validateHealthy(final int healthy, final int unhealthy)", "testcase": false, "constructor": false}, {"identifier": "validateUnhealthy", "parameters": "(final int healthy, final int unhealthy)", "modifiers": "public", "return": "FormValidation", "signature": "FormValidation validateUnhealthy(final int healthy, final int unhealthy)", "full_signature": "public FormValidation validateUnhealthy(final int healthy, final int unhealthy)", "class_method_signature": "ModelValidation.validateUnhealthy(final int healthy, final int unhealthy)", "testcase": false, "constructor": false}, {"identifier": "validateHealthReportConstraints", "parameters": "(final int positive,\n            final int healthy, final int unhealthy)", "modifiers": "private", "return": "FormValidation", "signature": "FormValidation validateHealthReportConstraints(final int positive,\n            final int healthy, final int unhealthy)", "full_signature": "private FormValidation validateHealthReportConstraints(final int positive,\n            final int healthy, final int unhealthy)", "class_method_signature": "ModelValidation.validateHealthReportConstraints(final int positive,\n            final int healthy, final int unhealthy)", "testcase": false, "constructor": false}, {"identifier": "doCheckPattern", "parameters": "(@AncestorInPath final AbstractProject<?, ?> project,\n            @QueryParameter final String pattern)", "modifiers": "public", "return": "FormValidation", "signature": "FormValidation doCheckPattern(@AncestorInPath final AbstractProject<?, ?> project,\n            @QueryParameter final String pattern)", "full_signature": "public FormValidation doCheckPattern(@AncestorInPath final AbstractProject<?, ?> project,\n            @QueryParameter final String pattern)", "class_method_signature": "ModelValidation.doCheckPattern(@AncestorInPath final AbstractProject<?, ?> project,\n            @QueryParameter final String pattern)", "testcase": false, "constructor": false}, {"identifier": "validatePatternInWorkspace", "parameters": "(final @QueryParameter String pattern,\n            final FilePath workspace)", "modifiers": "private", "return": "FormValidation", "signature": "FormValidation validatePatternInWorkspace(final @QueryParameter String pattern,\n            final FilePath workspace)", "full_signature": "private FormValidation validatePatternInWorkspace(final @QueryParameter String pattern,\n            final FilePath workspace)", "class_method_signature": "ModelValidation.validatePatternInWorkspace(final @QueryParameter String pattern,\n            final FilePath workspace)", "testcase": false, "constructor": false}, {"identifier": "doCheckSourceDirectory", "parameters": "(@AncestorInPath final AbstractProject<?, ?> project,\n            @QueryParameter final String sourceDirectory)", "modifiers": "public", "return": "FormValidation", "signature": "FormValidation doCheckSourceDirectory(@AncestorInPath final AbstractProject<?, ?> project,\n            @QueryParameter final String sourceDirectory)", "full_signature": "public FormValidation doCheckSourceDirectory(@AncestorInPath final AbstractProject<?, ?> project,\n            @QueryParameter final String sourceDirectory)", "class_method_signature": "ModelValidation.doCheckSourceDirectory(@AncestorInPath final AbstractProject<?, ?> project,\n            @QueryParameter final String sourceDirectory)", "testcase": false, "constructor": false}, {"identifier": "validateRelativePath", "parameters": "(\n            @QueryParameter final String sourceDirectory, final FilePath workspace)", "modifiers": "private", "return": "FormValidation", "signature": "FormValidation validateRelativePath(\n            @QueryParameter final String sourceDirectory, final FilePath workspace)", "full_signature": "private FormValidation validateRelativePath(\n            @QueryParameter final String sourceDirectory, final FilePath workspace)", "class_method_signature": "ModelValidation.validateRelativePath(\n            @QueryParameter final String sourceDirectory, final FilePath workspace)", "testcase": false, "constructor": false}], "file": "plugin/src/main/java/io/jenkins/plugins/analysis/core/util/ModelValidation.java"}, "focal_method": {"identifier": "getAllJobs", "parameters": "()", "modifiers": "public", "return": "ComboBoxModel", "body": "public ComboBoxModel getAllJobs() {\n        ComboBoxModel model = new ComboBoxModel(jenkins.getAllJobNames());\n        model.add(0, NO_REFERENCE_JOB); // make sure that no input is valid\n        return model;\n    }", "signature": "ComboBoxModel getAllJobs()", "full_signature": "public ComboBoxModel getAllJobs()", "class_method_signature": "ModelValidation.getAllJobs()", "testcase": false, "constructor": false, "invocations": ["getAllJobNames", "add"]}, "repository": {"repo_id": 152814648, "url": "https://github.com/jenkinsci/warnings-ng-plugin", "stars": 158, "created": "10/12/2018 10:41:36 PM +00:00", "updates": "2020-01-27T14:00:03+00:00", "fork": "False", "license": "licensed"}}