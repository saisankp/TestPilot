{"test_class": {"identifier": "GammaTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/dstats/GammaTest.java"}, "test_case": {"identifier": "stressTestGamma", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void stressTestGamma() {\n        double s = 0;\n        int N = 10000000;\n        long t0 = System.currentTimeMillis();\n        for (int i = 0; i < N; ++i) {\n            Gamma.gamma(1+i%10);\n        }\n        long t1 = System.currentTimeMillis();\n        System.out.println(\"New gamma\");\n        System.out.println(t1 - t0);\n        t0 = System.currentTimeMillis();\n        for (int i = 0; i < N; ++i) {\n            SpecialFunctions.gamma(1+i%10);\n        }\n        t1 = System.currentTimeMillis();\n        System.out.println(\"Old gamma\");\n        System.out.println(t1 - t0);\n    }", "signature": "void stressTestGamma()", "full_signature": "@Test @Ignore public void stressTestGamma()", "class_method_signature": "GammaTest.stressTestGamma()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "gamma", "currentTimeMillis", "println", "println", "currentTimeMillis", "gamma", "currentTimeMillis", "println", "println"]}, "focal_class": {"identifier": "Gamma", "superclass": "", "interfaces": "implements IContinuousDistribution", "fields": [{"original_string": "public static final double MAXGAM = 171.624376956302725;", "modifier": "public static final", "type": "double", "declarator": "MAXGAM = 171.624376956302725", "var_name": "MAXGAM"}, {"original_string": "private final double alpha, beta;", "modifier": "private final", "type": "double", "declarator": "alpha", "var_name": "alpha"}, {"original_string": "private static final double MAXSTIR = 143.01608;", "modifier": "private static final", "type": "double", "declarator": "MAXSTIR = 143.01608", "var_name": "MAXSTIR"}], "methods": [{"identifier": "Gamma", "parameters": "(double alpha, double beta)", "modifiers": "public", "return": "", "signature": " Gamma(double alpha, double beta)", "full_signature": "public  Gamma(double alpha, double beta)", "class_method_signature": "Gamma.Gamma(double alpha, double beta)", "testcase": false, "constructor": true}, {"identifier": "getDensity", "parameters": "(double x)", "modifiers": "@Override public", "return": "double", "signature": "double getDensity(double x)", "full_signature": "@Override public double getDensity(double x)", "class_method_signature": "Gamma.getDensity(double x)", "testcase": false, "constructor": false}, {"identifier": "getShape", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getShape()", "full_signature": "public double getShape()", "class_method_signature": "Gamma.getShape()", "testcase": false, "constructor": false}, {"identifier": "getScale", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getScale()", "full_signature": "public double getScale()", "class_method_signature": "Gamma.getScale()", "testcase": false, "constructor": false}, {"identifier": "getLeftBound", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getLeftBound()", "full_signature": "@Override public double getLeftBound()", "class_method_signature": "Gamma.getLeftBound()", "testcase": false, "constructor": false}, {"identifier": "getRightBound", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getRightBound()", "full_signature": "@Override public double getRightBound()", "class_method_signature": "Gamma.getRightBound()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "Gamma.getDescription()", "testcase": false, "constructor": false}, {"identifier": "getExpectation", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getExpectation()", "full_signature": "@Override public double getExpectation()", "class_method_signature": "Gamma.getExpectation()", "testcase": false, "constructor": false}, {"identifier": "getProbability", "parameters": "(double x, ProbabilityType pt)", "modifiers": "@Override public", "return": "double", "signature": "double getProbability(double x, ProbabilityType pt)", "full_signature": "@Override public double getProbability(double x, ProbabilityType pt)", "class_method_signature": "Gamma.getProbability(double x, ProbabilityType pt)", "testcase": false, "constructor": false}, {"identifier": "getProbabilityInverse", "parameters": "(double p, ProbabilityType pt)", "modifiers": "@Override public", "return": "double", "signature": "double getProbabilityInverse(double p, ProbabilityType pt)", "full_signature": "@Override public double getProbabilityInverse(double p, ProbabilityType pt)", "class_method_signature": "Gamma.getProbabilityInverse(double p, ProbabilityType pt)", "testcase": false, "constructor": false}, {"identifier": "getVariance", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getVariance()", "full_signature": "@Override public double getVariance()", "class_method_signature": "Gamma.getVariance()", "testcase": false, "constructor": false}, {"identifier": "hasLeftBound", "parameters": "()", "modifiers": "@Override public", "return": "BoundaryType", "signature": "BoundaryType hasLeftBound()", "full_signature": "@Override public BoundaryType hasLeftBound()", "class_method_signature": "Gamma.hasLeftBound()", "testcase": false, "constructor": false}, {"identifier": "hasRightBound", "parameters": "()", "modifiers": "@Override public", "return": "BoundaryType", "signature": "BoundaryType hasRightBound()", "full_signature": "@Override public BoundaryType hasRightBound()", "class_method_signature": "Gamma.hasRightBound()", "testcase": false, "constructor": false}, {"identifier": "isSymmetrical", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSymmetrical()", "full_signature": "@Override public boolean isSymmetrical()", "class_method_signature": "Gamma.isSymmetrical()", "testcase": false, "constructor": false}, {"identifier": "random", "parameters": "(IRandomNumberGenerator rng)", "modifiers": "@Override public", "return": "double", "signature": "double random(IRandomNumberGenerator rng)", "full_signature": "@Override public double random(IRandomNumberGenerator rng)", "class_method_signature": "Gamma.random(IRandomNumberGenerator rng)", "testcase": false, "constructor": false}, {"identifier": "beta", "parameters": "(double a, double b)", "modifiers": "public static", "return": "double", "signature": "double beta(double a, double b)", "full_signature": "public static double beta(double a, double b)", "class_method_signature": "Gamma.beta(double a, double b)", "testcase": false, "constructor": false}, {"identifier": "gamma", "parameters": "(double x)", "modifiers": "public static", "return": "double", "signature": "double gamma(double x)", "full_signature": "public static double gamma(double x)", "class_method_signature": "Gamma.gamma(double x)", "testcase": false, "constructor": false}, {"identifier": "incompleteBeta", "parameters": "(double aa, double bb, double xx)", "modifiers": "public static", "return": "double", "signature": "double incompleteBeta(double aa, double bb, double xx)", "full_signature": "public static double incompleteBeta(double aa, double bb, double xx)", "class_method_signature": "Gamma.incompleteBeta(double aa, double bb, double xx)", "testcase": false, "constructor": false}, {"identifier": "incompleteBetaFraction1", "parameters": "(double a, double b, double x)", "modifiers": "public static", "return": "double", "signature": "double incompleteBetaFraction1(double a, double b, double x)", "full_signature": "public static double incompleteBetaFraction1(double a, double b, double x)", "class_method_signature": "Gamma.incompleteBetaFraction1(double a, double b, double x)", "testcase": false, "constructor": false}, {"identifier": "incompleteBetaFraction2", "parameters": "(double a, double b, double x)", "modifiers": "static", "return": "double", "signature": "double incompleteBetaFraction2(double a, double b, double x)", "full_signature": "static double incompleteBetaFraction2(double a, double b, double x)", "class_method_signature": "Gamma.incompleteBetaFraction2(double a, double b, double x)", "testcase": false, "constructor": false}, {"identifier": "incompleteGamma", "parameters": "(double a, double x)", "modifiers": "public static", "return": "double", "signature": "double incompleteGamma(double a, double x)", "full_signature": "public static double incompleteGamma(double a, double x)", "class_method_signature": "Gamma.incompleteGamma(double a, double x)", "testcase": false, "constructor": false}, {"identifier": "incompleteGammaComplement", "parameters": "(double a, double x)", "modifiers": "public static", "return": "double", "signature": "double incompleteGammaComplement(double a, double x)", "full_signature": "public static double incompleteGammaComplement(double a, double x)", "class_method_signature": "Gamma.incompleteGammaComplement(double a, double x)", "testcase": false, "constructor": false}, {"identifier": "logGamma", "parameters": "(double x)", "modifiers": "public static", "return": "double", "signature": "double logGamma(double x)", "full_signature": "public static double logGamma(double x)", "class_method_signature": "Gamma.logGamma(double x)", "testcase": false, "constructor": false}, {"identifier": "powerSeries", "parameters": "(double a, double b, double x)", "modifiers": "static", "return": "double", "signature": "double powerSeries(double a, double b, double x)", "full_signature": "static double powerSeries(double a, double b, double x)", "class_method_signature": "Gamma.powerSeries(double a, double b, double x)", "testcase": false, "constructor": false}, {"identifier": "stirlingFormula", "parameters": "(double x)", "modifiers": "static", "return": "double", "signature": "double stirlingFormula(double x)", "full_signature": "static double stirlingFormula(double x)", "class_method_signature": "Gamma.stirlingFormula(double x)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/dstats/Gamma.java"}, "focal_method": {"identifier": "Gamma", "parameters": "(double alpha, double beta)", "modifiers": "public", "return": "", "body": "public Gamma(double alpha, double beta) {\n        this.alpha = alpha;\n        this.beta = beta;\n    }", "signature": " Gamma(double alpha, double beta)", "full_signature": "public  Gamma(double alpha, double beta)", "class_method_signature": "Gamma.Gamma(double alpha, double beta)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}