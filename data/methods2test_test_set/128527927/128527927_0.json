{"test_class": {"identifier": "TestGuitarString", "superclass": "", "interfaces": "", "fields": [], "file": "hw1/synthesizer/TestGuitarString.java"}, "test_case": {"identifier": "testTic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTic() {\n        // Create a GuitarString of frequency 11025, which\n        // is an ArrayRingBuffer of length 4. \n        GuitarString s = new GuitarString(11025);\n        s.pluck();\n\n        // Record the front four values, ticcing as we go.\n        double s1 = s.sample();\n        s.tic();\n        double s2 = s.sample();\n        s.tic(); \n        double s3 = s.sample();\n        s.tic();\n        double s4 = s.sample();\n\n        // If we tic once more, it should be equal to 0.996*0.5*(s1 + s2)\n        s.tic();\n\n        double s5 = s.sample();\n        double expected = 0.996 * 0.5 * (s1 + s2);\n\n        // Check that new sample is correct, using tolerance of 0.001.\n        // See JUnit documentation for a description of how tolerances work\n        // for assertEquals(double, double)\n        assertEquals(expected, s5, 0.001);\n\n    }", "signature": "void testTic()", "full_signature": "@Test public void testTic()", "class_method_signature": "TestGuitarString.testTic()", "testcase": true, "constructor": false, "invocations": ["pluck", "sample", "tic", "sample", "tic", "sample", "tic", "sample", "tic", "sample", "assertEquals"]}, "focal_class": {"identifier": "GuitarString", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int SR = 44100;", "modifier": "private static final", "type": "int", "declarator": "SR = 44100", "var_name": "SR"}, {"original_string": "private static final double DECAY = .996;", "modifier": "private static final", "type": "double", "declarator": "DECAY = .996", "var_name": "DECAY"}, {"original_string": "private BoundedQueue<Double> buffer;", "modifier": "private", "type": "BoundedQueue<Double>", "declarator": "buffer", "var_name": "buffer"}], "methods": [{"identifier": "GuitarString", "parameters": "(double frequency)", "modifiers": "public", "return": "", "signature": " GuitarString(double frequency)", "full_signature": "public  GuitarString(double frequency)", "class_method_signature": "GuitarString.GuitarString(double frequency)", "testcase": false, "constructor": true}, {"identifier": "pluck", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void pluck()", "full_signature": "public void pluck()", "class_method_signature": "GuitarString.pluck()", "testcase": false, "constructor": false}, {"identifier": "tic", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void tic()", "full_signature": "public void tic()", "class_method_signature": "GuitarString.tic()", "testcase": false, "constructor": false}, {"identifier": "sample", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double sample()", "full_signature": "public double sample()", "class_method_signature": "GuitarString.sample()", "testcase": false, "constructor": false}], "file": "hw1/synthesizer/GuitarString.java"}, "focal_method": {"identifier": "tic", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void tic() {\n        // TODO: Dequeue the front sample and enqueue a new sample that is\n        //       the average of the two multiplied by the DECAY factor.\n        //       Do not call StdAudio.play().\n        double first = buffer.dequeue();\n        buffer.enqueue((first + buffer.peek()) * DECAY / 2);\n    }", "signature": "void tic()", "full_signature": "public void tic()", "class_method_signature": "GuitarString.tic()", "testcase": false, "constructor": false, "invocations": ["dequeue", "enqueue", "peek"]}, "repository": {"repo_id": 128527927, "url": "https://github.com/shenzheyu/CS61B", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 21, "size": 2766, "license": "licensed"}}