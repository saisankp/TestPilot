{"test_class": {"identifier": "SwingHboxTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "XulRunner runner = null;", "modifier": "", "type": "XulRunner", "declarator": "runner = null", "var_name": "runner"}, {"original_string": "Document doc = null;", "modifier": "", "type": "Document", "declarator": "doc = null", "var_name": "doc"}, {"original_string": "XulDomContainer container;", "modifier": "", "type": "XulDomContainer", "declarator": "container", "var_name": "container"}, {"original_string": "XulHbox hbox;", "modifier": "", "type": "XulHbox", "declarator": "hbox", "var_name": "hbox"}], "file": "swing/src/test/java/org/pentaho/ui/xul/swing/tags/SwingHboxTest.java"}, "test_case": {"identifier": "testReplaceChild", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReplaceChild() throws Exception {\n    XulButton btn = (XulButton) hbox.getElementByXPath( \"button\" );\n\n    XulCheckbox check = (XulCheckbox) hbox.getDocument().createElement( \"checkbox\" );\n\n    hbox.replaceChild( btn, check );\n\n    XulCheckbox check2 = (XulCheckbox) hbox.getDocument().getElementByXPath( \"/window/hbox/checkbox\" );\n\n    assertNotNull( check2 );\n  }", "signature": "void testReplaceChild()", "full_signature": "@Test public void testReplaceChild()", "class_method_signature": "SwingHboxTest.testReplaceChild()", "testcase": true, "constructor": false, "invocations": ["getElementByXPath", "createElement", "getDocument", "replaceChild", "getElementByXPath", "getDocument", "assertNotNull"]}, "focal_class": {"identifier": "SwingHbox", "superclass": "extends AbstractSwingContainer", "interfaces": "implements XulHbox", "fields": [{"original_string": "private static final Log logger = LogFactory.getLog( SwingHbox.class );", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog( SwingHbox.class )", "var_name": "logger"}, {"original_string": "private String background;", "modifier": "private", "type": "String", "declarator": "background", "var_name": "background"}, {"original_string": "private XulDomContainer domContainer;", "modifier": "private", "type": "XulDomContainer", "declarator": "domContainer", "var_name": "domContainer"}], "methods": [{"identifier": "SwingHbox", "parameters": "( Element self, XulComponent parent, XulDomContainer domContainer, String tagName )", "modifiers": "public", "return": "", "signature": " SwingHbox( Element self, XulComponent parent, XulDomContainer domContainer, String tagName )", "full_signature": "public  SwingHbox( Element self, XulComponent parent, XulDomContainer domContainer, String tagName )", "class_method_signature": "SwingHbox.SwingHbox( Element self, XulComponent parent, XulDomContainer domContainer, String tagName )", "testcase": false, "constructor": true}, {"identifier": "removeChild", "parameters": "( Element ele )", "modifiers": "@Override public", "return": "void", "signature": "void removeChild( Element ele )", "full_signature": "@Override public void removeChild( Element ele )", "class_method_signature": "SwingHbox.removeChild( Element ele )", "testcase": false, "constructor": false}, {"identifier": "resetContainer", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resetContainer()", "full_signature": "public void resetContainer()", "class_method_signature": "SwingHbox.resetContainer()", "testcase": false, "constructor": false}, {"identifier": "getOrientation", "parameters": "()", "modifiers": "public", "return": "Orient", "signature": "Orient getOrientation()", "full_signature": "public Orient getOrientation()", "class_method_signature": "SwingHbox.getOrientation()", "testcase": false, "constructor": false}, {"identifier": "replaceChild", "parameters": "( XulComponent oldElement, XulComponent newElement )", "modifiers": "@Override public", "return": "void", "signature": "void replaceChild( XulComponent oldElement, XulComponent newElement )", "full_signature": "@Override public void replaceChild( XulComponent oldElement, XulComponent newElement )", "class_method_signature": "SwingHbox.replaceChild( XulComponent oldElement, XulComponent newElement )", "testcase": false, "constructor": false}, {"identifier": "layout", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void layout()", "full_signature": "@Override public void layout()", "class_method_signature": "SwingHbox.layout()", "testcase": false, "constructor": false}, {"identifier": "getBackground", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBackground()", "full_signature": "public String getBackground()", "class_method_signature": "SwingHbox.getBackground()", "testcase": false, "constructor": false}, {"identifier": "setBackground", "parameters": "( String src )", "modifiers": "public", "return": "void", "signature": "void setBackground( String src )", "full_signature": "public void setBackground( String src )", "class_method_signature": "SwingHbox.setBackground( String src )", "testcase": false, "constructor": false}], "file": "swing/src/main/java/org/pentaho/ui/xul/swing/tags/SwingHbox.java"}, "focal_method": {"identifier": "replaceChild", "parameters": "( XulComponent oldElement, XulComponent newElement )", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void replaceChild( XulComponent oldElement, XulComponent newElement ) throws XulDomException {\n    this.resetContainer();\n    super.replaceChild( oldElement, newElement );\n  }", "signature": "void replaceChild( XulComponent oldElement, XulComponent newElement )", "full_signature": "@Override public void replaceChild( XulComponent oldElement, XulComponent newElement )", "class_method_signature": "SwingHbox.replaceChild( XulComponent oldElement, XulComponent newElement )", "testcase": false, "constructor": false, "invocations": ["resetContainer", "replaceChild"]}, "repository": {"repo_id": 4597349, "url": "https://github.com/pentaho/pentaho-commons-xul", "language": "Java", "is_fork": false, "fork_count": 108, "stargazer_count": 5, "size": 24225, "license": "licensed"}}