{"test_class": {"identifier": "ReScheduleSupportTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "int                            phase         = 0;", "modifier": "", "type": "int", "declarator": "phase         = 0", "var_name": "phase"}, {"original_string": "AtomicInteger                  phase1Counter = new AtomicInteger(0);", "modifier": "", "type": "AtomicInteger", "declarator": "phase1Counter = new AtomicInteger(0)", "var_name": "phase1Counter"}, {"original_string": "AtomicInteger                  phase2Counter = new AtomicInteger(0);", "modifier": "", "type": "AtomicInteger", "declarator": "phase2Counter = new AtomicInteger(0)", "var_name": "phase2Counter"}, {"original_string": "Function<MetricFilter, Object> function      = new Function<MetricFilter, Object>() {\n                                                     @Override\n                                                     public Object apply(MetricFilter o) {\n                                                         if (phase == 0) {\n                                                             System.out.println(\"11111\");\n                                                             phase1Counter.incrementAndGet();\n                                                             return null;//phase1\n                                                         }\n                                                         //phase2\n                                                         System.out.println(\"222\");\n                                                         phase2Counter.incrementAndGet();\n                                                         return null;\n                                                     }\n                                                 };", "modifier": "", "type": "Function<MetricFilter, Object>", "declarator": "function      = new Function<MetricFilter, Object>() {\n                                                     @Override\n                                                     public Object apply(MetricFilter o) {\n                                                         if (phase == 0) {\n                                                             System.out.println(\"11111\");\n                                                             phase1Counter.incrementAndGet();\n                                                             return null;//phase1\n                                                         }\n                                                         //phase2\n                                                         System.out.println(\"222\");\n                                                         phase2Counter.incrementAndGet();\n                                                         return null;\n                                                     }\n                                                 }", "var_name": "function"}], "file": "client/lookout-reg-server/src/test/java/com/alipay/lookout/remote/report/ReScheduleSupportTest.java"}, "test_case": {"identifier": "testReschedule", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReschedule() throws NoSuchFieldException, IllegalAccessException {\n        ScheduledService scheduler = new MeasurableScheduler(NoopRegistry.INSTANCE, \"poller\", 2);\n\n        LookoutConfig lookoutConfig = new LookoutConfig();\n        lookoutConfig.setStepInterval(PRIORITY.HIGH, 1000);\n        lookoutConfig.setStepInterval(PRIORITY.NORMAL, 1000);\n        lookoutConfig.setStepInterval(PRIORITY.LOW, 1000);\n\n        ReScheduleSupport support = new ReScheduleSupport(scheduler, lookoutConfig, Clock.SYSTEM);\n\n        support.reschedulePoll(function);\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        Field field = ReScheduleSupport.class.getDeclaredField(\"taskResults\");\n        field.setAccessible(true);\n        Set<ReScheduleSupport.TaskResult> set = (Set<ReScheduleSupport.TaskResult>) field\n            .get(support);\n\n        phase++;\n        support.reschedulePoll(function); //restart\n\n        //assert\n        for (ReScheduleSupport.TaskResult result : set) {\n            Assert.assertTrue(result.getFuture().isCancelled());\n            Assert.assertFalse(result.getEnable().get());\n        }\n        Assert.assertTrue(phase1Counter.get() > 0);\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        Assert.assertTrue(phase2Counter.get() > 0);\n    }", "signature": "void testReschedule()", "full_signature": "@Test public void testReschedule()", "class_method_signature": "ReScheduleSupportTest.testReschedule()", "testcase": true, "constructor": false, "invocations": ["setStepInterval", "setStepInterval", "setStepInterval", "reschedulePoll", "sleep", "printStackTrace", "getDeclaredField", "setAccessible", "get", "reschedulePoll", "assertTrue", "isCancelled", "getFuture", "assertFalse", "get", "getEnable", "assertTrue", "get", "sleep", "printStackTrace", "assertTrue", "get"]}, "focal_class": {"identifier": "ReScheduleSupport", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger    logger              = LookoutLoggerFactory\n                                                           .getLogger(SchedulerPoller.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger              = LookoutLoggerFactory\n                                                           .getLogger(SchedulerPoller.class)", "var_name": "logger"}, {"original_string": "static final String            THREAD_NAME_SPLITOR = \"-\";", "modifier": "static final", "type": "String", "declarator": "THREAD_NAME_SPLITOR = \"-\"", "var_name": "THREAD_NAME_SPLITOR"}, {"original_string": "private Set<TaskResult>        taskResults;", "modifier": "private", "type": "Set<TaskResult>", "declarator": "taskResults", "var_name": "taskResults"}, {"original_string": "private final ScheduledService scheduler;", "modifier": "private final", "type": "ScheduledService", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private final LookoutConfig    config;", "modifier": "private final", "type": "LookoutConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final Clock            clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "methods": [{"identifier": "ReScheduleSupport", "parameters": "(ScheduledService scheduler, LookoutConfig config, Clock clock)", "modifiers": "public", "return": "", "signature": " ReScheduleSupport(ScheduledService scheduler, LookoutConfig config, Clock clock)", "full_signature": "public  ReScheduleSupport(ScheduledService scheduler, LookoutConfig config, Clock clock)", "class_method_signature": "ReScheduleSupport.ReScheduleSupport(ScheduledService scheduler, LookoutConfig config, Clock clock)", "testcase": false, "constructor": true}, {"identifier": "reschedulePoll", "parameters": "(Function<MetricFilter, Object> function)", "modifiers": "public synchronized", "return": "void", "signature": "void reschedulePoll(Function<MetricFilter, Object> function)", "full_signature": "public synchronized void reschedulePoll(Function<MetricFilter, Object> function)", "class_method_signature": "ReScheduleSupport.reschedulePoll(Function<MetricFilter, Object> function)", "testcase": false, "constructor": false}, {"identifier": "schedulePoll", "parameters": "(final PRIORITY priority, final long stepMillis,\n                                   final MetricFilter metricFilter,\n                                   final Function<MetricFilter, Object> function)", "modifiers": "public", "return": "TaskResult", "signature": "TaskResult schedulePoll(final PRIORITY priority, final long stepMillis,\n                                   final MetricFilter metricFilter,\n                                   final Function<MetricFilter, Object> function)", "full_signature": "public TaskResult schedulePoll(final PRIORITY priority, final long stepMillis,\n                                   final MetricFilter metricFilter,\n                                   final Function<MetricFilter, Object> function)", "class_method_signature": "ReScheduleSupport.schedulePoll(final PRIORITY priority, final long stepMillis,\n                                   final MetricFilter metricFilter,\n                                   final Function<MetricFilter, Object> function)", "testcase": false, "constructor": false}, {"identifier": "getInitialDelay", "parameters": "(long stepSize, Clock clock)", "modifiers": "static", "return": "long", "signature": "long getInitialDelay(long stepSize, Clock clock)", "full_signature": "static long getInitialDelay(long stepSize, Clock clock)", "class_method_signature": "ReScheduleSupport.getInitialDelay(long stepSize, Clock clock)", "testcase": false, "constructor": false}], "file": "client/lookout-reg-server/src/main/java/com/alipay/lookout/remote/report/ReScheduleSupport.java"}, "focal_method": {"identifier": "reschedulePoll", "parameters": "(Function<MetricFilter, Object> function)", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void reschedulePoll(Function<MetricFilter, Object> function) {\n        if (taskResults != null) {\n            //end old schedule tasks\n            for (TaskResult result : taskResults) {\n                result.close();\n            }\n        }\n        //start new schedule tasks\n        Set<TaskResult> tasks = new HashSet<TaskResult>(3);\n        tasks.add(schedulePoll(PRIORITY.NORMAL, config.stepMillis(PRIORITY.NORMAL),\n            new PriorityMetricFilter(PRIORITY.NORMAL), function));\n        tasks.add(schedulePoll(PRIORITY.HIGH, config.stepMillis(PRIORITY.HIGH),\n            new PriorityMetricFilter(PRIORITY.HIGH), function));\n        tasks.add(schedulePoll(PRIORITY.LOW, config.stepMillis(PRIORITY.LOW),\n            new PriorityMetricFilter(PRIORITY.LOW), function));\n        this.taskResults = tasks;\n    }", "signature": "void reschedulePoll(Function<MetricFilter, Object> function)", "full_signature": "public synchronized void reschedulePoll(Function<MetricFilter, Object> function)", "class_method_signature": "ReScheduleSupport.reschedulePoll(Function<MetricFilter, Object> function)", "testcase": false, "constructor": false, "invocations": ["close", "add", "schedulePoll", "stepMillis", "add", "schedulePoll", "stepMillis", "add", "schedulePoll", "stepMillis"]}, "repository": {"repo_id": 133381280, "url": "https://github.com/sofastack/sofa-lookout", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 318, "size": 1394, "license": "licensed"}}