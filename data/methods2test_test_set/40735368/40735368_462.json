{"test_class": {"identifier": "WFSDataStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final QName TYPE1 = new QName(\"http://example.com/1\", \"points\", \"prefix1\");", "modifier": "private static final", "type": "QName", "declarator": "TYPE1 = new QName(\"http://example.com/1\", \"points\", \"prefix1\")", "var_name": "TYPE1"}, {"original_string": "private static final QName TYPE2 = new QName(\"http://example.com/2\", \"points\", \"prefix2\");", "modifier": "private static final", "type": "QName", "declarator": "TYPE2 = new QName(\"http://example.com/2\", \"points\", \"prefix2\")", "var_name": "TYPE2"}, {"original_string": "private static SimpleFeatureType featureType1;", "modifier": "private static", "type": "SimpleFeatureType", "declarator": "featureType1", "var_name": "featureType1"}, {"original_string": "private static SimpleFeatureType featureType2;", "modifier": "private static", "type": "SimpleFeatureType", "declarator": "featureType2", "var_name": "featureType2"}, {"original_string": "private static Name simpleTypeName1;", "modifier": "private static", "type": "Name", "declarator": "simpleTypeName1", "var_name": "simpleTypeName1"}, {"original_string": "private static Name simpleTypeName2;", "modifier": "private static", "type": "Name", "declarator": "simpleTypeName2", "var_name": "simpleTypeName2"}, {"original_string": "private WFSDataStore dataStore;", "modifier": "private", "type": "WFSDataStore", "declarator": "dataStore", "var_name": "dataStore"}, {"original_string": "private WFSClient wfs;", "modifier": "private", "type": "WFSClient", "declarator": "wfs", "var_name": "wfs"}], "file": "modules/unsupported/wfs-ng/src/test/java/org/geotools/data/wfs/WFSDataStoreTest.java"}, "test_case": {"identifier": "testCreateTypeNamesNS", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateTypeNamesNS() throws Exception {\n        final String nsOverride = \"http://geotools.org\";\n        dataStore.setNamespaceURI(nsOverride);\n\n        List<Name> names = dataStore.createTypeNames();\n        assertNotNull(names);\n        assertEquals(2, names.size());\n        assertTrue(names.contains(new NameImpl(nsOverride, simpleTypeName1.getLocalPart())));\n        assertTrue(names.contains(new NameImpl(nsOverride, simpleTypeName2.getLocalPart())));\n    }", "signature": "void testCreateTypeNamesNS()", "full_signature": "@Test public void testCreateTypeNamesNS()", "class_method_signature": "WFSDataStoreTest.testCreateTypeNamesNS()", "testcase": true, "constructor": false, "invocations": ["setNamespaceURI", "createTypeNames", "assertNotNull", "assertEquals", "size", "assertTrue", "contains", "getLocalPart", "assertTrue", "contains", "getLocalPart"]}, "focal_class": {"identifier": "WFSDataStore", "superclass": "extends ContentDataStore", "interfaces": "", "fields": [{"original_string": "public static final String STORED_QUERY_CONFIGURATION_HINT = \"WFS_NG_STORED_QUERY_CONFIGURATION\";", "modifier": "public static final", "type": "String", "declarator": "STORED_QUERY_CONFIGURATION_HINT = \"WFS_NG_STORED_QUERY_CONFIGURATION\"", "var_name": "STORED_QUERY_CONFIGURATION_HINT"}, {"original_string": "private final WFSClient client;", "modifier": "private final", "type": "WFSClient", "declarator": "client", "var_name": "client"}, {"original_string": "private final Map<Name, QName> names;", "modifier": "private final", "type": "Map<Name, QName>", "declarator": "names", "var_name": "names"}, {"original_string": "private final Map<QName, FeatureType> remoteFeatureTypes;", "modifier": "private final", "type": "Map<QName, FeatureType>", "declarator": "remoteFeatureTypes", "var_name": "remoteFeatureTypes"}, {"original_string": "private final Map<String, StoredQueryDescriptionType> storedQueryDescriptionTypes;", "modifier": "private final", "type": "Map<String, StoredQueryDescriptionType>", "declarator": "storedQueryDescriptionTypes", "var_name": "storedQueryDescriptionTypes"}, {"original_string": "private ReadWriteLock storedQueryDescriptionTypesLock;", "modifier": "private", "type": "ReadWriteLock", "declarator": "storedQueryDescriptionTypesLock", "var_name": "storedQueryDescriptionTypesLock"}, {"original_string": "private ListStoredQueriesResponseType remoteStoredQueries;", "modifier": "private", "type": "ListStoredQueriesResponseType", "declarator": "remoteStoredQueries", "var_name": "remoteStoredQueries"}, {"original_string": "protected Map<String, String> configuredStoredQueries =\n            new ConcurrentHashMap<String, String>();", "modifier": "protected", "type": "Map<String, String>", "declarator": "configuredStoredQueries =\n            new ConcurrentHashMap<String, String>()", "var_name": "configuredStoredQueries"}], "methods": [{"identifier": "WFSDataStore", "parameters": "(final WFSClient client)", "modifiers": "public", "return": "", "signature": " WFSDataStore(final WFSClient client)", "full_signature": "public  WFSDataStore(final WFSClient client)", "class_method_signature": "WFSDataStore.WFSDataStore(final WFSClient client)", "testcase": false, "constructor": true}, {"identifier": "getInfo", "parameters": "()", "modifiers": "@Override public", "return": "WFSServiceInfo", "signature": "WFSServiceInfo getInfo()", "full_signature": "@Override public WFSServiceInfo getInfo()", "class_method_signature": "WFSDataStore.getInfo()", "testcase": false, "constructor": false}, {"identifier": "createContentState", "parameters": "(ContentEntry entry)", "modifiers": "@Override protected", "return": "WFSContentState", "signature": "WFSContentState createContentState(ContentEntry entry)", "full_signature": "@Override protected WFSContentState createContentState(ContentEntry entry)", "class_method_signature": "WFSDataStore.createContentState(ContentEntry entry)", "testcase": false, "constructor": false}, {"identifier": "createTypeNames", "parameters": "()", "modifiers": "@Override protected", "return": "List<Name>", "signature": "List<Name> createTypeNames()", "full_signature": "@Override protected List<Name> createTypeNames()", "class_method_signature": "WFSDataStore.createTypeNames()", "testcase": false, "constructor": false}, {"identifier": "createFeatureSource", "parameters": "(final ContentEntry entry)", "modifiers": "@Override protected", "return": "ContentFeatureSource", "signature": "ContentFeatureSource createFeatureSource(final ContentEntry entry)", "full_signature": "@Override protected ContentFeatureSource createFeatureSource(final ContentEntry entry)", "class_method_signature": "WFSDataStore.createFeatureSource(final ContentEntry entry)", "testcase": false, "constructor": false}, {"identifier": "isStoredQuery", "parameters": "(Name name)", "modifiers": "private", "return": "boolean", "signature": "boolean isStoredQuery(Name name)", "full_signature": "private boolean isStoredQuery(Name name)", "class_method_signature": "WFSDataStore.isStoredQuery(Name name)", "testcase": false, "constructor": false}, {"identifier": "getRemoteTypeName", "parameters": "(Name localTypeName)", "modifiers": "public", "return": "QName", "signature": "QName getRemoteTypeName(Name localTypeName)", "full_signature": "public QName getRemoteTypeName(Name localTypeName)", "class_method_signature": "WFSDataStore.getRemoteTypeName(Name localTypeName)", "testcase": false, "constructor": false}, {"identifier": "getStoredQueryListResponse", "parameters": "()", "modifiers": "public", "return": "ListStoredQueriesResponseType", "signature": "ListStoredQueriesResponseType getStoredQueryListResponse()", "full_signature": "public ListStoredQueriesResponseType getStoredQueryListResponse()", "class_method_signature": "WFSDataStore.getStoredQueryListResponse()", "testcase": false, "constructor": false}, {"identifier": "supportsStoredQueries", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean supportsStoredQueries()", "full_signature": "public boolean supportsStoredQueries()", "class_method_signature": "WFSDataStore.supportsStoredQueries()", "testcase": false, "constructor": false}, {"identifier": "getRemoteFeatureType", "parameters": "(final QName remoteTypeName)", "modifiers": "public", "return": "FeatureType", "signature": "FeatureType getRemoteFeatureType(final QName remoteTypeName)", "full_signature": "public FeatureType getRemoteFeatureType(final QName remoteTypeName)", "class_method_signature": "WFSDataStore.getRemoteFeatureType(final QName remoteTypeName)", "testcase": false, "constructor": false}, {"identifier": "getStoredQueryDescriptionType", "parameters": "(String storedQueryId)", "modifiers": "public", "return": "StoredQueryDescriptionType", "signature": "StoredQueryDescriptionType getStoredQueryDescriptionType(String storedQueryId)", "full_signature": "public StoredQueryDescriptionType getStoredQueryDescriptionType(String storedQueryId)", "class_method_signature": "WFSDataStore.getStoredQueryDescriptionType(String storedQueryId)", "testcase": false, "constructor": false}, {"identifier": "getRemoteSimpleFeatureType", "parameters": "(final QName remoteTypeName)", "modifiers": "public", "return": "SimpleFeatureType", "signature": "SimpleFeatureType getRemoteSimpleFeatureType(final QName remoteTypeName)", "full_signature": "public SimpleFeatureType getRemoteSimpleFeatureType(final QName remoteTypeName)", "class_method_signature": "WFSDataStore.getRemoteSimpleFeatureType(final QName remoteTypeName)", "testcase": false, "constructor": false}, {"identifier": "getWfsClient", "parameters": "()", "modifiers": "public", "return": "WFSClient", "signature": "WFSClient getWfsClient()", "full_signature": "public WFSClient getWfsClient()", "class_method_signature": "WFSDataStore.getWfsClient()", "testcase": false, "constructor": false}, {"identifier": "addStoredQuery", "parameters": "(String localName, String storedQueryId)", "modifiers": "public", "return": "Name", "signature": "Name addStoredQuery(String localName, String storedQueryId)", "full_signature": "public Name addStoredQuery(String localName, String storedQueryId)", "class_method_signature": "WFSDataStore.addStoredQuery(String localName, String storedQueryId)", "testcase": false, "constructor": false}, {"identifier": "getStoredQueryReturnType", "parameters": "(String storedQueryId)", "modifiers": "public", "return": "QName", "signature": "QName getStoredQueryReturnType(String storedQueryId)", "full_signature": "public QName getStoredQueryReturnType(String storedQueryId)", "class_method_signature": "WFSDataStore.getStoredQueryReturnType(String storedQueryId)", "testcase": false, "constructor": false}, {"identifier": "getStoredQuerySchema", "parameters": "(String storedQueryId)", "modifiers": "public", "return": "SimpleFeatureType", "signature": "SimpleFeatureType getStoredQuerySchema(String storedQueryId)", "full_signature": "public SimpleFeatureType getStoredQuerySchema(String storedQueryId)", "class_method_signature": "WFSDataStore.getStoredQuerySchema(String storedQueryId)", "testcase": false, "constructor": false}, {"identifier": "getConfiguredStoredQueries", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getConfiguredStoredQueries()", "full_signature": "public Map<String, String> getConfiguredStoredQueries()", "class_method_signature": "WFSDataStore.getConfiguredStoredQueries()", "testcase": false, "constructor": false}, {"identifier": "removeStoredQuery", "parameters": "(String localName)", "modifiers": "public", "return": "void", "signature": "void removeStoredQuery(String localName)", "full_signature": "public void removeStoredQuery(String localName)", "class_method_signature": "WFSDataStore.removeStoredQuery(String localName)", "testcase": false, "constructor": false}], "file": "modules/unsupported/wfs-ng/src/main/java/org/geotools/data/wfs/WFSDataStore.java"}, "focal_method": {"identifier": "createTypeNames", "parameters": "()", "modifiers": "@Override protected", "return": "List<Name>", "body": "@Override\n    protected List<Name> createTypeNames() throws IOException {\n        String namespaceURI = getNamespaceURI();\n\n        Set<QName> remoteTypeNames = client.getRemoteTypeNames();\n        List<Name> names = new ArrayList<Name>(remoteTypeNames.size());\n        for (QName remoteTypeName : remoteTypeNames) {\n            String localTypeName = remoteTypeName.getLocalPart();\n            if (!XMLConstants.DEFAULT_NS_PREFIX.equals(remoteTypeName.getPrefix())) {\n                localTypeName = remoteTypeName.getPrefix() + \"_\" + localTypeName;\n            }\n            Name typeName = new NameImpl(namespaceURI==null? remoteTypeName.getNamespaceURI() : namespaceURI, localTypeName);\n            \n            names.add(typeName);\n            this.names.put(typeName, remoteTypeName);\n        }\n\n        for(Entry<String, String> e : configuredStoredQueries.entrySet()) {\n            String name = e.getKey();\n            String storedQueryId = e.getValue();\n            Name typeName = new NameImpl(namespaceURI, name);\n            names.add(typeName);\n            this.names.put(typeName, getStoredQueryReturnType(storedQueryId));\n        }\n\n        return names;\n    }", "signature": "List<Name> createTypeNames()", "full_signature": "@Override protected List<Name> createTypeNames()", "class_method_signature": "WFSDataStore.createTypeNames()", "testcase": false, "constructor": false, "invocations": ["getNamespaceURI", "getRemoteTypeNames", "size", "getLocalPart", "equals", "getPrefix", "getPrefix", "getNamespaceURI", "add", "put", "entrySet", "getKey", "getValue", "add", "put", "getStoredQueryReturnType"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}