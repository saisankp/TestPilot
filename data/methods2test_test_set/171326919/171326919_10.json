{"test_class": {"identifier": "WeatherServiceTest", "superclass": "", "interfaces": "", "fields": [], "file": "aula35-reactive-model/src/test/java/org/isel/mpd/weather/WeatherServiceTest.java"}, "test_case": {"identifier": "pastWeatherOnSeveralMonths", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void pastWeatherOnSeveralMonths() throws IOException {\n        WeatherService weather = new WeatherService();\n        LocalDate[] from = {LocalDate.of(2018, 12, 7)};\n        LocalDate to = LocalDate.of(2019, 3, 19);\n        Observable<WeatherInfo> infos = weather.pastWeather(37.017, -7.933, from[0], to);\n        System.out.println(Thread.currentThread().getId());\n        CompletableFuture cf = new CompletableFuture();\n        infos.doOnNext(info -> {\n            assertEquals(from[0], info.date);\n            from[0] = from[0].plusDays(1);\n            System.out.println(Thread.currentThread().getId());\n        })\n        .doOnComplete(() -> cf.complete(null))\n        .doOnError(err -> cf.completeExceptionally(err))\n        .subscribe();\n        cf.join();\n        assertEquals(from[0], to.plusDays(1));\n    }", "signature": "void pastWeatherOnSeveralMonths()", "full_signature": "@Test public void pastWeatherOnSeveralMonths()", "class_method_signature": "WeatherServiceTest.pastWeatherOnSeveralMonths()", "testcase": true, "constructor": false, "invocations": ["of", "of", "pastWeather", "println", "getId", "currentThread", "subscribe", "doOnError", "doOnComplete", "doOnNext", "assertEquals", "plusDays", "println", "getId", "currentThread", "complete", "completeExceptionally", "join", "assertEquals", "plusDays"]}, "focal_class": {"identifier": "WeatherService", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "final WeatherWebApi webApi = new WeatherWebApi();", "modifier": "final", "type": "WeatherWebApi", "declarator": "webApi = new WeatherWebApi()", "var_name": "webApi"}], "methods": [{"identifier": "pastWeather", "parameters": "(double lat, double log, LocalDate from, LocalDate to)", "modifiers": "public", "return": "Observable<WeatherInfo>", "signature": "Observable<WeatherInfo> pastWeather(double lat, double log, LocalDate from, LocalDate to)", "full_signature": "public Observable<WeatherInfo> pastWeather(double lat, double log, LocalDate from, LocalDate to)", "class_method_signature": "WeatherService.pastWeather(double lat, double log, LocalDate from, LocalDate to)", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "(LocalDate a, LocalDate b)", "modifiers": "private", "return": "LocalDate", "signature": "LocalDate min(LocalDate a, LocalDate b)", "full_signature": "private LocalDate min(LocalDate a, LocalDate b)", "class_method_signature": "WeatherService.min(LocalDate a, LocalDate b)", "testcase": false, "constructor": false}, {"identifier": "toObservable", "parameters": "(CompletableFuture<T> future)", "modifiers": "public static", "return": "Observable<T>", "signature": "Observable<T> toObservable(CompletableFuture<T> future)", "full_signature": "public static Observable<T> toObservable(CompletableFuture<T> future)", "class_method_signature": "WeatherService.toObservable(CompletableFuture<T> future)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "WeatherService.close()", "testcase": false, "constructor": false}], "file": "aula35-reactive-model/src/main/java/org/isel/mpd/weather/WeatherService.java"}, "focal_method": {"identifier": "pastWeather", "parameters": "(double lat, double log, LocalDate from, LocalDate to)", "modifiers": "public", "return": "Observable<WeatherInfo>", "body": "public Observable<WeatherInfo> pastWeather(double lat, double log, LocalDate from, LocalDate to) {\n        Stream<CompletableFuture<Stream<WeatherInfo>>> cfs = Stream\n            .iterate(from, prev -> prev.withDayOfMonth(1).plusMonths(1))\n            .takeWhile(dt -> dt.isBefore(to)) // Stream<LocalDate>\n            .map(start -> {\n                LocalDate end = min(start.withDayOfMonth(start.lengthOfMonth()), to);\n                return webApi.pastWeather(lat, log, start, end);\n            });// Stream<CF<Stream<WeatherInfo>>>\n\n        return Observable\n            .fromIterable(cfs::iterator)\n            .map(WeatherService::toObservable)\n            .flatMap(Functions.identity())\n            .flatMap(strm -> Observable.fromIterable(strm::iterator));\n    }", "signature": "Observable<WeatherInfo> pastWeather(double lat, double log, LocalDate from, LocalDate to)", "full_signature": "public Observable<WeatherInfo> pastWeather(double lat, double log, LocalDate from, LocalDate to)", "class_method_signature": "WeatherService.pastWeather(double lat, double log, LocalDate from, LocalDate to)", "testcase": false, "constructor": false, "invocations": ["map", "takeWhile", "iterate", "plusMonths", "withDayOfMonth", "isBefore", "min", "withDayOfMonth", "lengthOfMonth", "pastWeather", "flatMap", "flatMap", "map", "fromIterable", "identity", "fromIterable"]}, "repository": {"repo_id": 171326919, "url": "https://github.com/isel-leic-mpd/mpd-2019-i41n", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 13, "size": 404, "license": "licensed"}}