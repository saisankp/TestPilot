{"test_class": {"identifier": "BakedItemListTest", "superclass": "", "interfaces": "", "fields": [], "file": "Projects/Project_10/BakedItemListTest.java"}, "test_case": {"identifier": "generateReportByPrice", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void generateReportByPrice() throws Exception {\n      BakedItemList b = new BakedItemList();\n      b.readItemFile(\"baked_item_data.csv\");\n      String result = \"---------------------------------------\\n\"\n            + \"Report for Auburn's Best Bakery (by Price)\\n\"\n            + \"---------------------------------------\\n\"\n            + \"\\n\"\n            + \"Cookie: Chips Delight - Chocolate Chip   \"\n            + \"Quantity: 12   Price: $4.20\\n\"\n            + \"(Ingredients: flour, sugar, dark chocolate chips, butter, baking\"\n            + \" soda, \\n\"\n            + \"salt)\\n\"\n            + \"\\n\"\n            + \"Cake: Birthday - Chocolate   Quantity: 1   \"\n            + \"Price: $8.00\\n\"\n            + \"(Ingredients: flour, sugar, cocoa powder, vanilla, eggs, \\n\"\n            + \"butter, baking soda, baking powder, salt)\\n\"\n            + \"\\n\"\n            + \"Pie: Weekly Special - Apple   Quantity: 1   \"\n            + \"Price: $12.00\\n\"\n            + \"(Ingredients: flour, sugar, apple, cinnamon, butter, \\n\"\n            + \"baking soda, salt)\\n\"\n            + \"\\n\"\n            + \"Pie: Summer Special - Key Lime   \"\n            + \"Quantity: 1   Price: $14.00\\n\"\n            + \"(Ingredients: flour, sugar, lime juice, lemon juice, graham \"\n            + \"crackers, \\n\"\n            + \"butter, baking soda, salt)\\n\"\n            + \"\\n\"\n            + \"Cake: 2-Layer - Red Velvet   Quantity: 1   \"\n            + \"Price: $16.00\\n\"\n            + \"(Ingredients: flour, sugar, cocoa powder, food coloring, eggs, \"\n            + \"\\nbutter, baking soda, baking powder, salt)\\n\"\n            + \"\\n\"\n            + \"WeddingCake: 3-Layer/3-Tier - Vanilla   \"\n            + \"Quantity: 1   Price: $135.00\\n\"\n            + \"(Ingredients: flour, sugar, buttermilk, coffee, eggs, \\n\"\n            + \"butter, baking soda, baking powder, salt)\\n\"\n            + \"\\n\";\n      Assert.assertEquals(result, b.generateReportByPrice());\n   }", "signature": "void generateReportByPrice()", "full_signature": "@Test public void generateReportByPrice()", "class_method_signature": "BakedItemListTest.generateReportByPrice()", "testcase": true, "constructor": false, "invocations": ["readItemFile", "assertEquals", "generateReportByPrice"]}, "focal_class": {"identifier": "BakedItemList", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String listName;", "modifier": "private", "type": "String", "declarator": "listName", "var_name": "listName"}, {"original_string": "private BakedItem[] itemList = new BakedItem[100];", "modifier": "private", "type": "BakedItem[]", "declarator": "itemList = new BakedItem[100]", "var_name": "itemList"}, {"original_string": "private int itemCount;", "modifier": "private", "type": "int", "declarator": "itemCount", "var_name": "itemCount"}, {"original_string": "private String[] excludedRecords = new String[30];", "modifier": "private", "type": "String[]", "declarator": "excludedRecords = new String[30]", "var_name": "excludedRecords"}, {"original_string": "private int excludedCount;", "modifier": "private", "type": "int", "declarator": "excludedCount", "var_name": "excludedCount"}, {"original_string": "private static int listCount = 0;", "modifier": "private static", "type": "int", "declarator": "listCount = 0", "var_name": "listCount"}], "methods": [{"identifier": "BakedItemList", "parameters": "()", "modifiers": "public", "return": "", "signature": " BakedItemList()", "full_signature": "public  BakedItemList()", "class_method_signature": "BakedItemList.BakedItemList()", "testcase": false, "constructor": true}, {"identifier": "getListName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getListName()", "full_signature": "public String getListName()", "class_method_signature": "BakedItemList.getListName()", "testcase": false, "constructor": false}, {"identifier": "setListName", "parameters": "(String listNamein)", "modifiers": "public", "return": "void", "signature": "void setListName(String listNamein)", "full_signature": "public void setListName(String listNamein)", "class_method_signature": "BakedItemList.setListName(String listNamein)", "testcase": false, "constructor": false}, {"identifier": "getItemList", "parameters": "()", "modifiers": "public", "return": "BakedItem[]", "signature": "BakedItem[] getItemList()", "full_signature": "public BakedItem[] getItemList()", "class_method_signature": "BakedItemList.getItemList()", "testcase": false, "constructor": false}, {"identifier": "setItemList", "parameters": "(BakedItem[] itemListin)", "modifiers": "public", "return": "void", "signature": "void setItemList(BakedItem[] itemListin)", "full_signature": "public void setItemList(BakedItem[] itemListin)", "class_method_signature": "BakedItemList.setItemList(BakedItem[] itemListin)", "testcase": false, "constructor": false}, {"identifier": "getItemCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getItemCount()", "full_signature": "public int getItemCount()", "class_method_signature": "BakedItemList.getItemCount()", "testcase": false, "constructor": false}, {"identifier": "setItemCount", "parameters": "(int itemCountin)", "modifiers": "public", "return": "void", "signature": "void setItemCount(int itemCountin)", "full_signature": "public void setItemCount(int itemCountin)", "class_method_signature": "BakedItemList.setItemCount(int itemCountin)", "testcase": false, "constructor": false}, {"identifier": "getExcludedRecords", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getExcludedRecords()", "full_signature": "public String[] getExcludedRecords()", "class_method_signature": "BakedItemList.getExcludedRecords()", "testcase": false, "constructor": false}, {"identifier": "setExcludedRecords", "parameters": "(String[] excludedRecordsin)", "modifiers": "public", "return": "void", "signature": "void setExcludedRecords(String[] excludedRecordsin)", "full_signature": "public void setExcludedRecords(String[] excludedRecordsin)", "class_method_signature": "BakedItemList.setExcludedRecords(String[] excludedRecordsin)", "testcase": false, "constructor": false}, {"identifier": "getExcludedCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getExcludedCount()", "full_signature": "public int getExcludedCount()", "class_method_signature": "BakedItemList.getExcludedCount()", "testcase": false, "constructor": false}, {"identifier": "setExcludedCount", "parameters": "(int excludedCountin)", "modifiers": "public", "return": "void", "signature": "void setExcludedCount(int excludedCountin)", "full_signature": "public void setExcludedCount(int excludedCountin)", "class_method_signature": "BakedItemList.setExcludedCount(int excludedCountin)", "testcase": false, "constructor": false}, {"identifier": "getListCount", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getListCount()", "full_signature": "public static int getListCount()", "class_method_signature": "BakedItemList.getListCount()", "testcase": false, "constructor": false}, {"identifier": "resetListCount", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void resetListCount()", "full_signature": "public static void resetListCount()", "class_method_signature": "BakedItemList.resetListCount()", "testcase": false, "constructor": false}, {"identifier": "readItemFile", "parameters": "(String fileName)", "modifiers": "public", "return": "void", "signature": "void readItemFile(String fileName)", "full_signature": "public void readItemFile(String fileName)", "class_method_signature": "BakedItemList.readItemFile(String fileName)", "testcase": false, "constructor": false}, {"identifier": "generateReport", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String generateReport()", "full_signature": "public String generateReport()", "class_method_signature": "BakedItemList.generateReport()", "testcase": false, "constructor": false}, {"identifier": "generateReportByClass", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String generateReportByClass()", "full_signature": "public String generateReportByClass()", "class_method_signature": "BakedItemList.generateReportByClass()", "testcase": false, "constructor": false}, {"identifier": "generateReportByPrice", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String generateReportByPrice()", "full_signature": "public String generateReportByPrice()", "class_method_signature": "BakedItemList.generateReportByPrice()", "testcase": false, "constructor": false}, {"identifier": "generateReportByFlavor", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String generateReportByFlavor()", "full_signature": "public String generateReportByFlavor()", "class_method_signature": "BakedItemList.generateReportByFlavor()", "testcase": false, "constructor": false}, {"identifier": "generateExcludedRecordsReport", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String generateExcludedRecordsReport()", "full_signature": "public String generateExcludedRecordsReport()", "class_method_signature": "BakedItemList.generateExcludedRecordsReport()", "testcase": false, "constructor": false}], "file": "Projects/Project_10/BakedItemList.java"}, "focal_method": {"identifier": "generateReportByPrice", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String generateReportByPrice() {\n      BakedItem[] itemListCopy = Arrays.copyOf(itemList, itemCount);\n      Arrays.sort(itemListCopy, new PriceComparator());\n      String result = \"---------------------------------------\\n\"\n            + \"Report for Auburn's Best Bakery (by Price)\\n\"\n            + \"---------------------------------------\\n\\n\";\n      for (int i = 0; i < itemCount; i++) {\n         result += itemListCopy[i].toString() + \"\\n\\n\";\n      }\n      return result;\n   }", "signature": "String generateReportByPrice()", "full_signature": "public String generateReportByPrice()", "class_method_signature": "BakedItemList.generateReportByPrice()", "testcase": false, "constructor": false, "invocations": ["copyOf", "sort", "toString"]}, "repository": {"repo_id": 79497496, "url": "https://github.com/perryBunn/COMP1210", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 6, "size": 15825, "license": "MIT License"}}