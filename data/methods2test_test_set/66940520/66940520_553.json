{"test_class": {"identifier": "SetMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "dhis-2/dhis-api/src/test/java/org/hisp/dhis/common/SetMapTest.java"}, "test_case": {"identifier": "testGetListMapValueMapper", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetListMapValueMapper()\n    {\n        DataElementGroupSet groupSetA = new DataElementGroupSet( \"GroupSetA\" );\n        DataElementGroupSet groupSetB = new DataElementGroupSet( \"GroupSetB\" );\n        DataElementGroupSet groupSetC = new DataElementGroupSet( \"GroupSetC\" );\n        DataElementGroupSet groupSetZ = new DataElementGroupSet( \"GroupSetZ\" );\n        \n        DataElementGroup groupA = new DataElementGroup( \"GroupA\" );\n        DataElementGroup groupB = new DataElementGroup( \"GroupB\" );\n        DataElementGroup groupC = new DataElementGroup( \"GroupC\" );\n        DataElementGroup groupD = new DataElementGroup( \"GroupD\" );\n        DataElementGroup groupE = new DataElementGroup( \"GroupE\" );\n        DataElementGroup groupF = new DataElementGroup( \"GroupF\" );\n        \n        groupA.getGroupSets().add( groupSetA );\n        groupB.getGroupSets().add( groupSetB );\n        groupC.getGroupSets().add( groupSetC );\n        groupD.getGroupSets().add( groupSetA );\n        groupE.getGroupSets().add( groupSetB );\n        groupF.getGroupSets().add( groupSetA );\n        \n        Set<DataElementGroup> groups = Sets.newHashSet( groupA, groupB, groupC, groupD, groupE, groupF );\n                        \n        SetMap<DataElementGroupSet, DataElementGroup> map = SetMap.getSetMap( groups, group -> group.getGroupSets().iterator().next() );\n        \n        assertEquals( Sets.newHashSet( groupA, groupD, groupF ), map.get( groupSetA ) );\n        assertEquals( Sets.newHashSet( groupB, groupE ), map.get( groupSetB ) );\n        assertEquals( Sets.newHashSet( groupC ), map.get( groupSetC ) );\n        assertNull( map.get( groupSetZ ) );\n    }", "signature": "void testGetListMapValueMapper()", "full_signature": "@Test public void testGetListMapValueMapper()", "class_method_signature": "SetMapTest.testGetListMapValueMapper()", "testcase": true, "constructor": false, "invocations": ["add", "getGroupSets", "add", "getGroupSets", "add", "getGroupSets", "add", "getGroupSets", "add", "getGroupSets", "add", "getGroupSets", "newHashSet", "getSetMap", "next", "iterator", "getGroupSets", "assertEquals", "newHashSet", "get", "assertEquals", "newHashSet", "get", "assertEquals", "newHashSet", "get", "assertNull", "get"]}, "focal_class": {"identifier": "SetMap", "superclass": "extends HashMap<T, Set<V>>", "interfaces": "", "fields": [], "methods": [{"identifier": "SetMap", "parameters": "()", "modifiers": "public", "return": "", "signature": " SetMap()", "full_signature": "public  SetMap()", "class_method_signature": "SetMap.SetMap()", "testcase": false, "constructor": true}, {"identifier": "SetMap", "parameters": "( SetMap<T, V> setMap )", "modifiers": "public", "return": "", "signature": " SetMap( SetMap<T, V> setMap )", "full_signature": "public  SetMap( SetMap<T, V> setMap )", "class_method_signature": "SetMap.SetMap( SetMap<T, V> setMap )", "testcase": false, "constructor": true}, {"identifier": "putValue", "parameters": "( T key, V value )", "modifiers": "public", "return": "Set<V>", "signature": "Set<V> putValue( T key, V value )", "full_signature": "public Set<V> putValue( T key, V value )", "class_method_signature": "SetMap.putValue( T key, V value )", "testcase": false, "constructor": false}, {"identifier": "putValues", "parameters": "( T key, Set<V> values )", "modifiers": "public", "return": "Set<V>", "signature": "Set<V> putValues( T key, Set<V> values )", "full_signature": "public Set<V> putValues( T key, Set<V> values )", "class_method_signature": "SetMap.putValues( T key, Set<V> values )", "testcase": false, "constructor": false}, {"identifier": "putValues", "parameters": "( SetMap<T, V> setMap )", "modifiers": "public", "return": "void", "signature": "void putValues( SetMap<T, V> setMap )", "full_signature": "public void putValues( SetMap<T, V> setMap )", "class_method_signature": "SetMap.putValues( SetMap<T, V> setMap )", "testcase": false, "constructor": false}, {"identifier": "getSetMap", "parameters": "( Set<V> values, Function<V, T> keyMapper )", "modifiers": "public static", "return": "SetMap<T, V>", "signature": "SetMap<T, V> getSetMap( Set<V> values, Function<V, T> keyMapper )", "full_signature": "public static SetMap<T, V> getSetMap( Set<V> values, Function<V, T> keyMapper )", "class_method_signature": "SetMap.getSetMap( Set<V> values, Function<V, T> keyMapper )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/SetMap.java"}, "focal_method": {"identifier": "getSetMap", "parameters": "( Set<V> values, Function<V, T> keyMapper )", "modifiers": "public static", "return": "SetMap<T, V>", "body": "public static <T, V> SetMap<T, V> getSetMap( Set<V> values, Function<V, T> keyMapper )\n    {\n        SetMap<T, V> map = new SetMap<>();\n\n        for ( V value : values )\n        {\n            T key = keyMapper.apply( value );\n\n            map.putValue( key, value );\n        }\n\n        return map;\n    }", "signature": "SetMap<T, V> getSetMap( Set<V> values, Function<V, T> keyMapper )", "full_signature": "public static SetMap<T, V> getSetMap( Set<V> values, Function<V, T> keyMapper )", "class_method_signature": "SetMap.getSetMap( Set<V> values, Function<V, T> keyMapper )", "testcase": false, "constructor": false, "invocations": ["apply", "putValue"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}