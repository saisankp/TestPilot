{"test_class": {"identifier": "ArgumentParserTest", "superclass": "extends AbstractCoreTest", "interfaces": "", "fields": [], "file": "herd-code/herd-core/src/test/java/org/finra/herd/core/ArgumentParserTest.java"}, "test_case": {"identifier": "testGetStringValueAsBoolean", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetStringValueAsBoolean() throws ParseException\n    {\n        ArgumentParser argParser = new ArgumentParser(\"\");\n        Option strOpt = argParser.addArgument(\"s\", \"str\", true, \"Some string input parameter to have a boolean value\", false);\n\n        final String shortStrOpt = String.format(\"-%s\", strOpt.getOpt());\n        final String longStrOpt = String.format(\"--%s\", strOpt.getLongOpt());\n\n        // Validate the default value - no option is specified.\n        argParser.parseArguments(new String[] {});\n        assertFalse(argParser.getStringValueAsBoolean(strOpt, false));\n        assertTrue(argParser.getStringValueAsBoolean(strOpt, true));\n\n        // Validate all \"true\" boolean values using both short an long options.\n        for (String inputValue : Arrays\n            .asList(CustomBooleanEditor.VALUE_TRUE, CustomBooleanEditor.VALUE_YES, CustomBooleanEditor.VALUE_ON, CustomBooleanEditor.VALUE_1))\n        {\n            argParser.parseArguments(new String[] {shortStrOpt, inputValue});\n            assertTrue(argParser.getStringValueAsBoolean(strOpt, false));\n            argParser.parseArguments(new String[] {longStrOpt, inputValue});\n            assertTrue(argParser.getStringValueAsBoolean(strOpt, false));\n        }\n\n        // Validate all \"false\" boolean values.\n        for (String inputValue : Arrays\n            .asList(CustomBooleanEditor.VALUE_FALSE, CustomBooleanEditor.VALUE_NO, CustomBooleanEditor.VALUE_OFF, CustomBooleanEditor.VALUE_0))\n        {\n            argParser.parseArguments(new String[] {shortStrOpt, inputValue});\n            assertFalse(argParser.getStringValueAsBoolean(strOpt, true));\n        }\n\n        // Try to parse an invalid boolean value.\n        argParser.parseArguments(new String[] {shortStrOpt, INVALID_BOOLEAN_VALUE});\n        try\n        {\n            argParser.getStringValueAsBoolean(strOpt, false);\n            fail(\"Suppose to throw a ParseException when option has an invalid boolean value.\");\n        }\n        catch (ParseException e)\n        {\n            assertEquals(String.format(\"Invalid boolean value [%s]\", INVALID_BOOLEAN_VALUE), e.getMessage());\n        }\n    }", "signature": "void testGetStringValueAsBoolean()", "full_signature": "@Test public void testGetStringValueAsBoolean()", "class_method_signature": "ArgumentParserTest.testGetStringValueAsBoolean()", "testcase": true, "constructor": false, "invocations": ["addArgument", "format", "getOpt", "format", "getLongOpt", "parseArguments", "assertFalse", "getStringValueAsBoolean", "assertTrue", "getStringValueAsBoolean", "asList", "parseArguments", "assertTrue", "getStringValueAsBoolean", "parseArguments", "assertTrue", "getStringValueAsBoolean", "asList", "parseArguments", "assertFalse", "getStringValueAsBoolean", "parseArguments", "getStringValueAsBoolean", "fail", "assertEquals", "format", "getMessage"]}, "focal_class": {"identifier": "ArgumentParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected String applicationName;", "modifier": "protected", "type": "String", "declarator": "applicationName", "var_name": "applicationName"}, {"original_string": "protected Options options;", "modifier": "protected", "type": "Options", "declarator": "options", "var_name": "options"}, {"original_string": "protected Options optionsIgnoreRequired;", "modifier": "protected", "type": "Options", "declarator": "optionsIgnoreRequired", "var_name": "optionsIgnoreRequired"}, {"original_string": "protected CommandLine commandLine;", "modifier": "protected", "type": "CommandLine", "declarator": "commandLine", "var_name": "commandLine"}], "methods": [{"identifier": "ArgumentParser", "parameters": "(String applicationName)", "modifiers": "public", "return": "", "signature": " ArgumentParser(String applicationName)", "full_signature": "public  ArgumentParser(String applicationName)", "class_method_signature": "ArgumentParser.ArgumentParser(String applicationName)", "testcase": false, "constructor": true}, {"identifier": "getApplicationName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getApplicationName()", "full_signature": "public String getApplicationName()", "class_method_signature": "ArgumentParser.getApplicationName()", "testcase": false, "constructor": false}, {"identifier": "addArgument", "parameters": "(Option option, boolean required)", "modifiers": "public", "return": "Option", "signature": "Option addArgument(Option option, boolean required)", "full_signature": "public Option addArgument(Option option, boolean required)", "class_method_signature": "ArgumentParser.addArgument(Option option, boolean required)", "testcase": false, "constructor": false}, {"identifier": "addArgument", "parameters": "(String opt, String longOpt, boolean hasArg, String description, boolean required)", "modifiers": "public", "return": "Option", "signature": "Option addArgument(String opt, String longOpt, boolean hasArg, String description, boolean required)", "full_signature": "public Option addArgument(String opt, String longOpt, boolean hasArg, String description, boolean required)", "class_method_signature": "ArgumentParser.addArgument(String opt, String longOpt, boolean hasArg, String description, boolean required)", "testcase": false, "constructor": false}, {"identifier": "getConfiguredOptions", "parameters": "()", "modifiers": "public", "return": "Collection", "signature": "Collection getConfiguredOptions()", "full_signature": "public Collection getConfiguredOptions()", "class_method_signature": "ArgumentParser.getConfiguredOptions()", "testcase": false, "constructor": false}, {"identifier": "parseArguments", "parameters": "(String[] args, boolean failOnMissingRequiredOptions)", "modifiers": "public", "return": "void", "signature": "void parseArguments(String[] args, boolean failOnMissingRequiredOptions)", "full_signature": "public void parseArguments(String[] args, boolean failOnMissingRequiredOptions)", "class_method_signature": "ArgumentParser.parseArguments(String[] args, boolean failOnMissingRequiredOptions)", "testcase": false, "constructor": false}, {"identifier": "parseArguments", "parameters": "(String[] args)", "modifiers": "public", "return": "void", "signature": "void parseArguments(String[] args)", "full_signature": "public void parseArguments(String[] args)", "class_method_signature": "ArgumentParser.parseArguments(String[] args)", "testcase": false, "constructor": false}, {"identifier": "getUsageInformation", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUsageInformation()", "full_signature": "public String getUsageInformation()", "class_method_signature": "ArgumentParser.getUsageInformation()", "testcase": false, "constructor": false}, {"identifier": "getBooleanValue", "parameters": "(Option option)", "modifiers": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. A null check is present.\") public", "return": "Boolean", "signature": "Boolean getBooleanValue(Option option)", "full_signature": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. A null check is present.\") public Boolean getBooleanValue(Option option)", "class_method_signature": "ArgumentParser.getBooleanValue(Option option)", "testcase": false, "constructor": false}, {"identifier": "getStringValueAsBoolean", "parameters": "(Option option, Boolean defaultValue)", "modifiers": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. A null check is present.\") public", "return": "Boolean", "signature": "Boolean getStringValueAsBoolean(Option option, Boolean defaultValue)", "full_signature": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. A null check is present.\") public Boolean getStringValueAsBoolean(Option option, Boolean defaultValue)", "class_method_signature": "ArgumentParser.getStringValueAsBoolean(Option option, Boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getStringValue", "parameters": "(Option option)", "modifiers": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. A null check is present.\") public", "return": "String", "signature": "String getStringValue(Option option)", "full_signature": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. A null check is present.\") public String getStringValue(Option option)", "class_method_signature": "ArgumentParser.getStringValue(Option option)", "testcase": false, "constructor": false}, {"identifier": "ensureCommandLineNotNull", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureCommandLineNotNull()", "full_signature": "private void ensureCommandLineNotNull()", "class_method_signature": "ArgumentParser.ensureCommandLineNotNull()", "testcase": false, "constructor": false}, {"identifier": "getStringValue", "parameters": "(Option option, String defaultValue)", "modifiers": "public", "return": "String", "signature": "String getStringValue(Option option, String defaultValue)", "full_signature": "public String getStringValue(Option option, String defaultValue)", "class_method_signature": "ArgumentParser.getStringValue(Option option, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getIntegerValue", "parameters": "(Option option)", "modifiers": "public", "return": "Integer", "signature": "Integer getIntegerValue(Option option)", "full_signature": "public Integer getIntegerValue(Option option)", "class_method_signature": "ArgumentParser.getIntegerValue(Option option)", "testcase": false, "constructor": false}, {"identifier": "getIntegerValue", "parameters": "(Option option, Integer defaultValue)", "modifiers": "public", "return": "Integer", "signature": "Integer getIntegerValue(Option option, Integer defaultValue)", "full_signature": "public Integer getIntegerValue(Option option, Integer defaultValue)", "class_method_signature": "ArgumentParser.getIntegerValue(Option option, Integer defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getIntegerValue", "parameters": "(Option option, Integer defaultValue, Integer minValue, Integer maxValue)", "modifiers": "public", "return": "Integer", "signature": "Integer getIntegerValue(Option option, Integer defaultValue, Integer minValue, Integer maxValue)", "full_signature": "public Integer getIntegerValue(Option option, Integer defaultValue, Integer minValue, Integer maxValue)", "class_method_signature": "ArgumentParser.getIntegerValue(Option option, Integer defaultValue, Integer minValue, Integer maxValue)", "testcase": false, "constructor": false}, {"identifier": "getFileValue", "parameters": "(Option option)", "modifiers": "public", "return": "File", "signature": "File getFileValue(Option option)", "full_signature": "public File getFileValue(Option option)", "class_method_signature": "ArgumentParser.getFileValue(Option option)", "testcase": false, "constructor": false}, {"identifier": "getFileValue", "parameters": "(Option option, File defaultValue)", "modifiers": "public", "return": "File", "signature": "File getFileValue(Option option, File defaultValue)", "full_signature": "public File getFileValue(Option option, File defaultValue)", "class_method_signature": "ArgumentParser.getFileValue(Option option, File defaultValue)", "testcase": false, "constructor": false}], "file": "herd-code/herd-core/src/main/java/org/finra/herd/core/ArgumentParser.java"}, "focal_method": {"identifier": "getStringValueAsBoolean", "parameters": "(Option option, Boolean defaultValue)", "modifiers": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. A null check is present.\") public", "return": "Boolean", "body": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. A null check is present.\")\n    public Boolean getStringValueAsBoolean(Option option, Boolean defaultValue) throws ParseException\n    {\n        Boolean result;\n\n        ensureCommandLineNotNull();\n        String stringValue = getStringValue(option);\n\n        if (StringUtils.isNotBlank(stringValue))\n        {\n            // Use custom boolean editor without allowed empty strings to convert the value of the argument to a boolean value.\n            CustomBooleanEditor customBooleanEditor = new CustomBooleanEditor(false);\n            try\n            {\n                customBooleanEditor.setAsText(stringValue);\n            }\n            catch (IllegalArgumentException e)\n            {\n                ParseException parseException = new ParseException(e.getMessage());\n                parseException.initCause(e);\n                throw parseException;\n            }\n            result = (Boolean) customBooleanEditor.getValue();\n        }\n        else\n        {\n            result = defaultValue;\n        }\n\n        return result;\n    }", "signature": "Boolean getStringValueAsBoolean(Option option, Boolean defaultValue)", "full_signature": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. A null check is present.\") public Boolean getStringValueAsBoolean(Option option, Boolean defaultValue)", "class_method_signature": "ArgumentParser.getStringValueAsBoolean(Option option, Boolean defaultValue)", "testcase": false, "constructor": false, "invocations": ["ensureCommandLineNotNull", "getStringValue", "isNotBlank", "setAsText", "getMessage", "initCause", "getValue"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}