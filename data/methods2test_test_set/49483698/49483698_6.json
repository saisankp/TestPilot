{"test_class": {"identifier": "FilesTest", "superclass": "", "interfaces": "", "fields": [], "file": "jhelper/src/test/java/com/hwangjr/jhelper/FilesTest.java"}, "test_case": {"identifier": "testHexDump", "parameters": "()", "modifiers": "@Ignore(\"Not a unit test\") @Test public", "return": "void", "body": "@Ignore(\"Not a unit test\")\n    @Test\n    public void testHexDump() throws IOException {\n        Files.hexDump(new File(\"test/multi_line_text_file.txt\"), -1);\n    }", "signature": "void testHexDump()", "full_signature": "@Ignore(\"Not a unit test\") @Test public void testHexDump()", "class_method_signature": "FilesTest.testHexDump()", "testcase": true, "constructor": false, "invocations": ["hexDump"]}, "focal_class": {"identifier": "Files", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Comparator<File> FILE_MODIFICATION_TIME_COMPARATOR_ASC = new FileModificationTimeComparatorAsc();", "modifier": "public static final", "type": "Comparator<File>", "declarator": "FILE_MODIFICATION_TIME_COMPARATOR_ASC = new FileModificationTimeComparatorAsc()", "var_name": "FILE_MODIFICATION_TIME_COMPARATOR_ASC"}, {"original_string": "public static final Comparator<File> FILE_MODIFICATION_TIME_COMPARATOR_DESC = new FileModificationTimeComparatorDesc();", "modifier": "public static final", "type": "Comparator<File>", "declarator": "FILE_MODIFICATION_TIME_COMPARATOR_DESC = new FileModificationTimeComparatorDesc()", "var_name": "FILE_MODIFICATION_TIME_COMPARATOR_DESC"}], "methods": [{"identifier": "getNameSortingComparator", "parameters": "(final Locale locale)", "modifiers": "public static", "return": "Comparator<File>", "signature": "Comparator<File> getNameSortingComparator(final Locale locale)", "full_signature": "public static Comparator<File> getNameSortingComparator(final Locale locale)", "class_method_signature": "Files.getNameSortingComparator(final Locale locale)", "testcase": false, "constructor": false}, {"identifier": "getNameSortingComparator", "parameters": "()", "modifiers": "public static", "return": "Comparator<File>", "signature": "Comparator<File> getNameSortingComparator()", "full_signature": "public static Comparator<File> getNameSortingComparator()", "class_method_signature": "Files.getNameSortingComparator()", "testcase": false, "constructor": false}, {"identifier": "extensionFilter", "parameters": "(String... extensions)", "modifiers": "public static", "return": "FileFilter", "signature": "FileFilter extensionFilter(String... extensions)", "full_signature": "public static FileFilter extensionFilter(String... extensions)", "class_method_signature": "Files.extensionFilter(String... extensions)", "testcase": false, "constructor": false}, {"identifier": "Files", "parameters": "()", "modifiers": "private", "return": "", "signature": " Files()", "full_signature": "private  Files()", "class_method_signature": "Files.Files()", "testcase": false, "constructor": true}, {"identifier": "deleteFiles", "parameters": "(File... files)", "modifiers": "public static", "return": "void", "signature": "void deleteFiles(File... files)", "full_signature": "public static void deleteFiles(File... files)", "class_method_signature": "Files.deleteFiles(File... files)", "testcase": false, "constructor": false}, {"identifier": "deleteFilesAndDirs", "parameters": "(File... files)", "modifiers": "public static", "return": "void", "signature": "void deleteFilesAndDirs(File... files)", "full_signature": "public static void deleteFilesAndDirs(File... files)", "class_method_signature": "Files.deleteFilesAndDirs(File... files)", "testcase": false, "constructor": false}, {"identifier": "crawlDirectory", "parameters": "(File dir)", "modifiers": "public static", "return": "List<File>", "signature": "List<File> crawlDirectory(File dir)", "full_signature": "public static List<File> crawlDirectory(File dir)", "class_method_signature": "Files.crawlDirectory(File dir)", "testcase": false, "constructor": false}, {"identifier": "getFilesSorted", "parameters": "(File dir, Comparator<File> comparator)", "modifiers": "public static", "return": "List<File>", "signature": "List<File> getFilesSorted(File dir, Comparator<File> comparator)", "full_signature": "public static List<File> getFilesSorted(File dir, Comparator<File> comparator)", "class_method_signature": "Files.getFilesSorted(File dir, Comparator<File> comparator)", "testcase": false, "constructor": false}, {"identifier": "getFilesSorted", "parameters": "(File dir, Comparator<File> comparator, FileFilter... filters)", "modifiers": "public static", "return": "List<File>", "signature": "List<File> getFilesSorted(File dir, Comparator<File> comparator, FileFilter... filters)", "full_signature": "public static List<File> getFilesSorted(File dir, Comparator<File> comparator, FileFilter... filters)", "class_method_signature": "Files.getFilesSorted(File dir, Comparator<File> comparator, FileFilter... filters)", "testcase": false, "constructor": false}, {"identifier": "crawlDirectory", "parameters": "(File dir, FileFilter... filters)", "modifiers": "public static", "return": "List<File>", "signature": "List<File> crawlDirectory(File dir, FileFilter... filters)", "full_signature": "public static List<File> crawlDirectory(File dir, FileFilter... filters)", "class_method_signature": "Files.crawlDirectory(File dir, FileFilter... filters)", "testcase": false, "constructor": false}, {"identifier": "crawlDirectory", "parameters": "(File dir, boolean recurseSubDirs, FileFilter... filters)", "modifiers": "public static", "return": "List<File>", "signature": "List<File> crawlDirectory(File dir, boolean recurseSubDirs, FileFilter... filters)", "full_signature": "public static List<File> crawlDirectory(File dir, boolean recurseSubDirs, FileFilter... filters)", "class_method_signature": "Files.crawlDirectory(File dir, boolean recurseSubDirs, FileFilter... filters)", "testcase": false, "constructor": false}, {"identifier": "checkExistingDirectory", "parameters": "(File dir)", "modifiers": "private static", "return": "void", "signature": "void checkExistingDirectory(File dir)", "full_signature": "private static void checkExistingDirectory(File dir)", "class_method_signature": "Files.checkExistingDirectory(File dir)", "testcase": false, "constructor": false}, {"identifier": "getDirectories", "parameters": "(File rootDir, boolean recurseSubDirs)", "modifiers": "public static", "return": "List<File>", "signature": "List<File> getDirectories(File rootDir, boolean recurseSubDirs)", "full_signature": "public static List<File> getDirectories(File rootDir, boolean recurseSubDirs)", "class_method_signature": "Files.getDirectories(File rootDir, boolean recurseSubDirs)", "testcase": false, "constructor": false}, {"identifier": "calculateMD5", "parameters": "(File file)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] calculateMD5(File file)", "full_signature": "public static byte[] calculateMD5(File file)", "class_method_signature": "Files.calculateMD5(File file)", "testcase": false, "constructor": false}, {"identifier": "checkIfFileExist", "parameters": "(File file)", "modifiers": "private static", "return": "void", "signature": "void checkIfFileExist(File file)", "full_signature": "private static void checkIfFileExist(File file)", "class_method_signature": "Files.checkIfFileExist(File file)", "testcase": false, "constructor": false}, {"identifier": "copyDirectory", "parameters": "(File srcDir, File dstDir)", "modifiers": "public static", "return": "void", "signature": "void copyDirectory(File srcDir, File dstDir)", "full_signature": "public static void copyDirectory(File srcDir, File dstDir)", "class_method_signature": "Files.copyDirectory(File srcDir, File dstDir)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(File src, File dst)", "modifiers": "public static", "return": "void", "signature": "void copy(File src, File dst)", "full_signature": "public static void copy(File src, File dst)", "class_method_signature": "Files.copy(File src, File dst)", "testcase": false, "constructor": false}, {"identifier": "contentEquals", "parameters": "(File file1, File file2)", "modifiers": "public static", "return": "boolean", "signature": "boolean contentEquals(File file1, File file2)", "full_signature": "public static boolean contentEquals(File file1, File file2)", "class_method_signature": "Files.contentEquals(File file1, File file2)", "testcase": false, "constructor": false}, {"identifier": "containsUTF8Bom", "parameters": "(File file)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsUTF8Bom(File file)", "full_signature": "public static boolean containsUTF8Bom(File file)", "class_method_signature": "Files.containsUTF8Bom(File file)", "testcase": false, "constructor": false}, {"identifier": "appendFiles", "parameters": "(File target, File... filesToAppend)", "modifiers": "public static", "return": "void", "signature": "void appendFiles(File target, File... filesToAppend)", "full_signature": "public static void appendFiles(File target, File... filesToAppend)", "class_method_signature": "Files.appendFiles(File target, File... filesToAppend)", "testcase": false, "constructor": false}, {"identifier": "appendFiles", "parameters": "(OutputStream os, File... filesToAppend)", "modifiers": "public static", "return": "void", "signature": "void appendFiles(OutputStream os, File... filesToAppend)", "full_signature": "public static void appendFiles(OutputStream os, File... filesToAppend)", "class_method_signature": "Files.appendFiles(OutputStream os, File... filesToAppend)", "testcase": false, "constructor": false}, {"identifier": "hexDump", "parameters": "(File f, long amount)", "modifiers": "public static", "return": "void", "signature": "void hexDump(File f, long amount)", "full_signature": "public static void hexDump(File f, long amount)", "class_method_signature": "Files.hexDump(File f, long amount)", "testcase": false, "constructor": false}, {"identifier": "hexDump", "parameters": "(File f, File out, long amount)", "modifiers": "public static", "return": "void", "signature": "void hexDump(File f, File out, long amount)", "full_signature": "public static void hexDump(File f, File out, long amount)", "class_method_signature": "Files.hexDump(File f, File out, long amount)", "testcase": false, "constructor": false}], "file": "jhelper/src/main/java/com/hwangjr/jhelper/Files.java"}, "focal_method": {"identifier": "hexDump", "parameters": "(File f, long amount)", "modifiers": "public static", "return": "void", "body": "public static void hexDump(File f, long amount) throws IOException {\n        Dumper.hexDump(new FileInputStream(f), System.out, 20, amount);\n    }", "signature": "void hexDump(File f, long amount)", "full_signature": "public static void hexDump(File f, long amount)", "class_method_signature": "Files.hexDump(File f, long amount)", "testcase": false, "constructor": false, "invocations": ["hexDump"]}, "repository": {"repo_id": 49483698, "url": "https://github.com/AndroidKnife/RecordHelper", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 10, "size": 185, "license": "licensed"}}