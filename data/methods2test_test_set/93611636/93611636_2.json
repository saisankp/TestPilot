{"test_class": {"identifier": "FibonacciRestEndpointTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final long expected = Randomness.nextLong();", "modifier": "private final", "type": "long", "declarator": "expected = Randomness.nextLong()", "var_name": "expected"}, {"original_string": "private final int term = Randomness.nextInt();", "modifier": "private final", "type": "int", "declarator": "term = Randomness.nextInt()", "var_name": "term"}, {"original_string": "@MockBean\n  private FibonacciService fibonacciService;", "modifier": "@MockBean\n  private", "type": "FibonacciService", "declarator": "fibonacciService", "var_name": "fibonacciService"}, {"original_string": "@Autowired\n  private MockMvc mockMvc;", "modifier": "@Autowired\n  private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}], "file": "worker/src/test/java/io/servicecomb/company/worker/FibonacciRestEndpointTest.java"}, "test_case": {"identifier": "returnsTokenOfAuthenticatedUser", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void returnsTokenOfAuthenticatedUser() throws Exception {\n    when(fibonacciService.term(term)).thenReturn(expected);\n\n    mockMvc.perform(\n        get(\"/fibonacci/term\")\n            .param(\"n\", String.valueOf(term)))\n        .andExpect(status().isOk())\n        .andExpect(content().string(String.valueOf(expected)));\n  }", "signature": "void returnsTokenOfAuthenticatedUser()", "full_signature": "@Test public void returnsTokenOfAuthenticatedUser()", "class_method_signature": "FibonacciRestEndpointTest.returnsTokenOfAuthenticatedUser()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "term", "andExpect", "andExpect", "perform", "param", "get", "valueOf", "isOk", "status", "string", "content", "valueOf"]}, "focal_class": {"identifier": "FibonacciRestEndpoint", "superclass": "", "interfaces": "implements FibonacciEndpoint", "fields": [{"original_string": "private final FibonacciService fibonacciService;", "modifier": "private final", "type": "FibonacciService", "declarator": "fibonacciService", "var_name": "fibonacciService"}], "methods": [{"identifier": "FibonacciRestEndpoint", "parameters": "(FibonacciService fibonacciService)", "modifiers": "@Autowired", "return": "", "signature": " FibonacciRestEndpoint(FibonacciService fibonacciService)", "full_signature": "@Autowired  FibonacciRestEndpoint(FibonacciService fibonacciService)", "class_method_signature": "FibonacciRestEndpoint.FibonacciRestEndpoint(FibonacciService fibonacciService)", "testcase": false, "constructor": true}, {"identifier": "term", "parameters": "(int n)", "modifiers": "@Override @RequestMapping(value = \"/term\", method = RequestMethod.GET) @ResponseBody public", "return": "long", "signature": "long term(int n)", "full_signature": "@Override @RequestMapping(value = \"/term\", method = RequestMethod.GET) @ResponseBody public long term(int n)", "class_method_signature": "FibonacciRestEndpoint.term(int n)", "testcase": false, "constructor": false}], "file": "worker/src/main/java/io/servicecomb/company/worker/FibonacciRestEndpoint.java"}, "focal_method": {"identifier": "term", "parameters": "(int n)", "modifiers": "@Override @RequestMapping(value = \"/term\", method = RequestMethod.GET) @ResponseBody public", "return": "long", "body": "@Override\n  @RequestMapping(value = \"/term\", method = RequestMethod.GET)\n  @ResponseBody\n  public long term(int n) {\n    return fibonacciService.term(n);\n  }", "signature": "long term(int n)", "full_signature": "@Override @RequestMapping(value = \"/term\", method = RequestMethod.GET) @ResponseBody public long term(int n)", "class_method_signature": "FibonacciRestEndpoint.term(int n)", "testcase": false, "constructor": false, "invocations": ["term"]}, "repository": {"repo_id": 93611636, "url": "https://github.com/huaweicse/ServiceComb-Company-WorkShop", "language": "Java", "is_fork": false, "fork_count": 49, "stargazer_count": 79, "size": 1350, "license": "licensed"}}