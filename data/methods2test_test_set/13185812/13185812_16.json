{"test_class": {"identifier": "TestResponseReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  SerialPort serialPort;", "modifier": "@Mock", "type": "SerialPort", "declarator": "serialPort", "var_name": "serialPort"}], "file": "dexcom-receiver/src/test/java/org/glukit/dexcom/sync/TestResponseReader.java"}, "test_case": {"identifier": "readGlucoseDataDatabasePagesShouldSucceed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void readGlucoseDataDatabasePagesShouldSucceed() throws Exception {\n    when(serialPort.readBytes(HEADER_SIZE)).thenReturn(fromHexString(\"01 46 08 01\"));\n    byte[] payload = fromHexString(\"76 D9 00 00 26 00 00 00 04 02 B9 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 9F 39 C3 71 D6 08 79 0F D6 08 2F 00 14 CE 1F EF 72 D6 08 A5 10 D6 08 33 00 14 32 0D 1B 74 D6 08 D1 11 D6 08 38 00 14 04 ED 47 75 D6 08 FD 12 D6 08 3C 00 14 DD 4E 73 76 D6 08 29 14 D6 08 45 00 13 25 6A 9F 77 D6 08 55 15 D6 08 4D 00 13 A7 AB CB 78 D6 08 81 16 D6 08 54 00 13 03 2E F6 79 D6 08 AC 17 D6 08 57 00 13 8D 0D 22 7B D6 08 D8 18 D6 08 59 00 14 40 F1 4E 7C D6 08 04 1A D6 08 5A 00 14 C9 31 7A 7D D6 08 30 1B D6 08 5A 00 14 67 2D A6 7E D6 08 5C 1C D6 08 5A 00 14 13 DE D2 7F D6 08 88 1D D6 08 5B 00 14 BB A9 FE 80 D6 08 B4 1E D6 08 5C 00 14 9A DD 2A 82 D6 08 E0 1F D6 08 5C 00 14 E4 A4 56 83 D6 08 0C 21 D6 08 5A 00 94 75 45 82 84 D6 08 38 22 D6 08 5A 00 94 21 C6 83 84 D6 08 39 22 D6 08 5B 80 14 29 1B AE 85 D6 08 64 23 D6 08 59 00 14 53 C5 DA 86 D6 08 90 24 D6 08 58 00 14 66 8F 06 88 D6 08 BC 25 D6 08 55 00 14 75 E6 32 89 D6 08 E8 26 D6 08 55 00 24 D2 F4 5E 8A D6 08 14 28 D6 08 4E 00 24 B9 16 8A 8B D6 08 40 29 D6 08 47 00 25 B8 50 B6 8C D6 08 6C 2A D6 08 41 00 25 11 00 E2 8D D6 08 98 2B D6 08 3E 00 25 3C 70 0E 8F D6 08 C4 2C D6 08 3E 00 24 E6 5A 3A 90 D6 08 F0 2D D6 08 3E 00 24 2A EB 66 91 D6 08 1C 2F D6 08 3E 00 24 86 A7 92 92 D6 08 48 30 D6 08 3F 00 24 D0 B6 BE 93 D6 08 74 31 D6 08 51 00 A4 82 DF EA 94 D6 08 A0 32 D6 08 50 00 B8 12 29 EA 94 D6 08 A0 32 D6 08 5D 80 38 53 E1 16 96 D6 08 CC 33 D6 08 5C 00 38 51 76 42 97 D6 08 F8 34 D6 08 61 00 38 45 8E 6E 98 D6 08 24 36 D6 08 6B 00 38 C3 DE 9A 99 D6 08 50 37 D6 08 79 00 23 A7 5C C6 9A D6 08 7C 38 D6 08 85 00 38 BE C3 FF FF FF FF FF FF 9C D9 00 00 26 00 00 00 04 02 BA 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 D2 E3 F2 9B D6 08 A8 39 D6 08 8A 00 38 C2 EB 1E 9D D6 08 D4 3A D6 08 76 00 B8 E0 13 4A 9E D6 08 00 3C D6 08 74 00 B8 A9 81 4A 9E D6 08 00 3C D6 08 75 80 38 89 3C 76 9F D6 08 2C 3D D6 08 77 00 38 87 53 A2 A0 D6 08 58 3E D6 08 7D 00 38 2E 2D CE A1 D6 08 84 3F D6 08 81 00 38 9B 9F FA A2 D6 08 B0 40 D6 08 81 00 38 80 98 26 A4 D6 08 DC 41 D6 08 7E 00 38 06 EB 52 A5 D6 08 08 43 D6 08 79 00 38 EE E0 7E A6 D6 08 34 44 D6 08 75 00 24 E9 6D AA A7 D6 08 60 45 D6 08 72 00 24 C8 20 D6 A8 D6 08 8C 46 D6 08 70 00 24 2A D4 02 AA D6 08 B8 47 D6 08 6B 00 14 8F 9B 2E AB D6 08 E4 48 D6 08 69 00 14 E6 BE 5A AC D6 08 10 4A D6 08 66 00 14 E6 01 86 AD D6 08 3C 4B D6 08 63 00 14 E5 97 B2 AE D6 08 68 4C D6 08 61 00 14 5A 05 DE AF D6 08 94 4D D6 08 5F 00 14 8E 91 0A B1 D6 08 C0 4E D6 08 5D 00 14 38 7E 36 B2 D6 08 EC 4F D6 08 5C 00 14 74 8D 62 B3 D6 08 18 51 D6 08 59 00 14 17 3D 8E B4 D6 08 44 52 D6 08 58 00 14 0D F4 BA B5 D6 08 70 53 D6 08 56 00 14 A2 F3 E6 B6 D6 08 9C 54 D6 08 54 00 14 E5 4C 12 B8 D6 08 C8 55 D6 08 51 00 14 6F 93 3E B9 D6 08 F4 56 D6 08 4E 00 14 CD 0F 6A BA D6 08 20 58 D6 08 4D 00 14 F6 A7 96 BB D6 08 4C 59 D6 08 4C 00 14 A3 9A C2 BC D6 08 78 5A D6 08 4A 00 14 FD 22 EE BD D6 08 A4 5B D6 08 49 00 14 FE 1B 1A BF D6 08 D0 5C D6 08 47 00 14 EC 30 46 C0 D6 08 FC 5D D6 08 47 00 14 C0 22 72 C1 D6 08 28 5F D6 08 46 00 14 5D DF 9E C2 D6 08 54 60 D6 08 45 00 14 8B 9F CA C3 D6 08 80 61 D6 08 44 00 14 59 42 F6 C4 D6 08 AC 62 D6 08 43 00 14 C0 25 22 C6 D6 08 D8 63 D6 08 43 00 14 48 32 FF FF FF FF FF FF C2 D9 00 00 26 00 00 00 04 02 BB 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6D 4B 4E C7 D6 08 04 65 D6 08 42 00 14 BF E9 7A C8 D6 08 30 66 D6 08 40 00 14 C5 29 A6 C9 D6 08 5C 67 D6 08 40 00 14 DA 89 D2 CA D6 08 88 68 D6 08 3F 00 14 52 63 FE CB D6 08 B4 69 D6 08 3E 00 14 D2 2C 2A CD D6 08 E0 6A D6 08 3C 00 14 B9 1D 56 CE D6 08 0C 6C D6 08 3C 00 14 44 23 82 CF D6 08 38 6D D6 08 3C 00 14 EF 58 AE D0 D6 08 64 6E D6 08 3C 00 14 67 B5 DA D1 D6 08 90 6F D6 08 3C 00 14 09 9B 06 D3 D6 08 BC 70 D6 08 37 00 14 E3 3D 32 D4 D6 08 E8 71 D6 08 37 00 14 E8 E1 5E D5 D6 08 14 73 D6 08 35 00 14 18 0B 8A D6 D6 08 40 74 D6 08 39 00 14 A3 E5 B6 D7 D6 08 6C 75 D6 08 3B 00 14 35 91 E2 D8 D6 08 98 76 D6 08 3B 00 14 95 A7 0E DA D6 08 C4 77 D6 08 39 00 24 BC 48 3A DB D6 08 F0 78 D6 08 39 00 24 B1 D4 66 DC D6 08 1C 7A D6 08 3A 00 24 F2 B2 92 DD D6 08 48 7B D6 08 3B 00 24 09 E7 BE DE D6 08 74 7C D6 08 3E 00 24 22 27 EA DF D6 08 A0 7D D6 08 3E 00 24 C0 CD 16 E1 D6 08 CC 7E D6 08 3D 00 24 9F EE 42 E2 D6 08 F8 7F D6 08 3C 00 14 77 C3 6E E3 D6 08 24 81 D6 08 40 00 14 F2 5A 9A E4 D6 08 50 82 D6 08 43 00 14 60 F7 C6 E5 D6 08 7C 83 D6 08 43 00 14 39 03 F2 E6 D6 08 A8 84 D6 08 42 00 14 2F 63 1E E8 D6 08 D4 85 D6 08 40 00 14 DD 33 4A E9 D6 08 00 87 D6 08 3F 00 14 E6 E3 76 EA D6 08 2C 88 D6 08 3E 00 14 09 90 A2 EB D6 08 58 89 D6 08 3D 00 14 1E 6F CD EC D6 08 84 8A D6 08 3C 00 14 AD FC FA ED D6 08 B0 8B D6 08 3B 00 14 69 1D 25 EF D6 08 DB 8C D6 08 3A 00 14 D6 D7 51 F0 D6 08 07 8E D6 08 3B 00 14 51 50 7D F1 D6 08 33 8F D6 08 3D 00 14 EC 09 A9 F2 D6 08 5F 90 D6 08 41 00 14 B9 E2 FF FF FF FF FF FF E8 D9 00 00 26 00 00 00 04 02 BC 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08 96 D5 F3 D6 08 8B 91 D6 08 42 00 14 FF 59 01 F5 D6 08 B7 92 D6 08 42 00 14 43 26 2D F6 D6 08 E3 93 D6 08 42 00 14 CE A0 59 F7 D6 08 0F 95 D6 08 44 00 14 97 50 85 F8 D6 08 3B 96 D6 08 46 00 14 66 55 B1 F9 D6 08 67 97 D6 08 47 00 14 4F 5E DE FA D6 08 94 98 D6 08 48 00 14 34 94 09 FC D6 08 BF 99 D6 08 48 00 14 0D 36 35 FD D6 08 EB 9A D6 08 47 00 14 46 9C 61 FE D6 08 17 9C D6 08 47 00 14 34 9D 8D FF D6 08 43 9D D6 08 48 00 14 7D 24 B9 00 D7 08 6F 9E D6 08 47 00 14 16 D2 E5 01 D7 08 9B 9F D6 08 47 00 14 8C F4 12 03 D7 08 C8 A0 D6 08 47 00 14 19 E9 3D 04 D7 08 F3 A1 D6 08 48 00 14 99 AF 69 05 D7 08 1F A3 D6 08 48 00 14 BB 41 95 06 D7 08 4B A4 D6 08 47 00 14 A4 FE C1 07 D7 08 77 A5 D6 08 46 00 14 38 A8 ED 08 D7 08 A3 A6 D6 08 46 00 14 72 E9 19 0A D7 08 CF A7 D6 08 45 00 14 06 A9 45 0B D7 08 FB A8 D6 08 44 00 14 1A 4E 71 0C D7 08 27 AA D6 08 44 00 14 A5 64 9D 0D D7 08 53 AB D6 08 45 00 14 1B A8 C9 0E D7 08 7F AC D6 08 45 00 14 A7 AD F5 0F D7 08 AB AD D6 08 44 00 14 54 3C 21 11 D7 08 D7 AE D6 08 43 00 14 49 C5 4D 12 D7 08 03 B0 D6 08 43 00 14 6F 73 79 13 D7 08 2F B1 D6 08 3F 00 94 F6 F7 79 13 D7 08 2F B1 D6 08 40 80 14 DF 89 A5 14 D7 08 5B B2 D6 08 3E 00 14 78 AD D1 15 D7 08 87 B3 D6 08 3C 00 14 2D 10 FD 16 D7 08 B3 B4 D6 08 3B 00 14 CB 2D 2B 18 D7 08 E1 B5 D6 08 05 00 58 B1 E5 55 19 D7 08 0B B7 D6 08 05 00 58 F1 02 81 1A D7 08 37 B8 D6 08 05 00 58 DE B4 AD 1B D7 08 63 B9 D6 08 05 00 58 D9 EC D9 1C D7 08 8F BA D6 08 05 00 58 9E 9E 05 1E D7 08 BB BB D6 08 05 00 58 74 F6 FF FF FF FF FF FF\");\n    when(serialPort.readBytes(payload.length)).thenReturn(payload);\n    when(serialPort.readBytes(TRAILER_SIZE)).thenReturn(fromHexString(\"16 8F\"));\n\n    ResponseReader responseReader = new ResponseReader(new LittleEndianDataInputFactory());\n    GlucoseReadsDatabasePagesResponse pagesResponse =\n            responseReader.read(GlucoseReadsDatabasePagesResponse.class, this.serialPort);\n\n    assertThat(pagesResponse, not(nullValue()));\n    assertThat(pagesResponse.getRecords().size(), is(152));\n  }", "signature": "void readGlucoseDataDatabasePagesShouldSucceed()", "full_signature": "@Test public void readGlucoseDataDatabasePagesShouldSucceed()", "class_method_signature": "TestResponseReader.readGlucoseDataDatabasePagesShouldSucceed()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "readBytes", "fromHexString", "fromHexString", "thenReturn", "when", "readBytes", "thenReturn", "when", "readBytes", "fromHexString", "read", "assertThat", "not", "nullValue", "assertThat", "size", "getRecords", "is"]}, "focal_class": {"identifier": "ResponseReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger LOGGER = LoggerFactory.getLogger(ResponseReader.class);", "modifier": "private static", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ResponseReader.class)", "var_name": "LOGGER"}, {"original_string": "static final int HEADER_SIZE = 4;", "modifier": "static final", "type": "int", "declarator": "HEADER_SIZE = 4", "var_name": "HEADER_SIZE"}, {"original_string": "public static final int TRAILER_SIZE = 2;", "modifier": "public static final", "type": "int", "declarator": "TRAILER_SIZE = 2", "var_name": "TRAILER_SIZE"}, {"original_string": "private DataInputFactory dataInputFactory;", "modifier": "private", "type": "DataInputFactory", "declarator": "dataInputFactory", "var_name": "dataInputFactory"}], "methods": [{"identifier": "ResponseReader", "parameters": "(DataInputFactory dataInputFactory)", "modifiers": "@Inject public", "return": "", "signature": " ResponseReader(DataInputFactory dataInputFactory)", "full_signature": "@Inject public  ResponseReader(DataInputFactory dataInputFactory)", "class_method_signature": "ResponseReader.ResponseReader(DataInputFactory dataInputFactory)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "(Class<T> type, SerialPort serialPort)", "modifiers": "public", "return": "T", "signature": "T read(Class<T> type, SerialPort serialPort)", "full_signature": "public T read(Class<T> type, SerialPort serialPort)", "class_method_signature": "ResponseReader.read(Class<T> type, SerialPort serialPort)", "testcase": false, "constructor": false}, {"identifier": "validateCrc", "parameters": "(byte[] packet, byte[] crcBytes)", "modifiers": "private", "return": "void", "signature": "void validateCrc(byte[] packet, byte[] crcBytes)", "full_signature": "private void validateCrc(byte[] packet, byte[] crcBytes)", "class_method_signature": "ResponseReader.validateCrc(byte[] packet, byte[] crcBytes)", "testcase": false, "constructor": false}, {"identifier": "readHeader", "parameters": "(byte[] headerBytes)", "modifiers": "private", "return": "ResponseHeader", "signature": "ResponseHeader readHeader(byte[] headerBytes)", "full_signature": "private ResponseHeader readHeader(byte[] headerBytes)", "class_method_signature": "ResponseReader.readHeader(byte[] headerBytes)", "testcase": false, "constructor": false}], "file": "dexcom-receiver/src/main/java/org/glukit/dexcom/sync/ResponseReader.java"}, "focal_method": {"identifier": "read", "parameters": "(Class<T> type, SerialPort serialPort)", "modifiers": "public", "return": "T", "body": "public <T extends Response> T read(Class<T> type, SerialPort serialPort) {\n    try {\n      T response = type.getConstructor(DataInputFactory.class).newInstance(this.dataInputFactory);\n      byte[] header = serialPort.readBytes(HEADER_SIZE);\n      LOGGER.debug(format(\"Read header from port: %s\", toHexString(header)));\n      ResponseHeader responseHeader = readHeader(header);\n\n      int expectedPayloadSize = responseHeader.getPacketSize() - (HEADER_SIZE + TRAILER_SIZE);\n      LOGGER.debug(format(\"Expected payload of [%d] bytes\", expectedPayloadSize));\n\n      byte[] payload = new byte[0];\n      if (expectedPayloadSize > 0) {\n        payload = serialPort.readBytes(expectedPayloadSize);\n        LOGGER.debug(format(\"Read payload from port: %s\", toHexString(payload)));\n        response.fromBytes(payload);\n      } else {\n        LOGGER.debug(\"No payload expected, skipping to trailer...\");\n      }\n\n      byte[] crc16 = serialPort.readBytes(TRAILER_SIZE);\n      LOGGER.debug(format(\"Read crc16 from port: %s\", toHexString(crc16)));\n      validateCrc(Bytes.concat(header, payload, crc16), crc16);\n\n      return response;\n    } catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n  }", "signature": "T read(Class<T> type, SerialPort serialPort)", "full_signature": "public T read(Class<T> type, SerialPort serialPort)", "class_method_signature": "ResponseReader.read(Class<T> type, SerialPort serialPort)", "testcase": false, "constructor": false, "invocations": ["newInstance", "getConstructor", "readBytes", "debug", "format", "toHexString", "readHeader", "getPacketSize", "debug", "format", "readBytes", "debug", "format", "toHexString", "fromBytes", "debug", "readBytes", "debug", "format", "toHexString", "validateCrc", "concat", "propagate"]}, "repository": {"repo_id": 13185812, "url": "https://github.com/alexandre-normand/blood-shepherd", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 408, "license": "licensed"}}