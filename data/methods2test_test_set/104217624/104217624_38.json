{"test_class": {"identifier": "BgpRisDownloaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private BgpRisDownloader bgpRisDownloader;", "modifier": "@Autowired\n    private", "type": "BgpRisDownloader", "declarator": "bgpRisDownloader", "var_name": "bgpRisDownloader"}], "file": "rpki-validator/src/test/java/net/ripe/rpki/validator3/api/bgp/BgpRisDownloaderTest.java"}, "test_case": {"identifier": "download_ipv4", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void download_ipv4() {\n        BgpRisDump<BgpRisEntry> dump = bgpRisDownloader.fetch(\n                BgpRisDump.of(\"http://www.ris.ripe.net/dumps/riswhoisdump.IPv4.gz\", null, Optional.empty()),\n                Stream::of\n        );\n        assertThat(dump.getEntries()).hasValueSatisfying(entries -> assertThat(entries.size()).isGreaterThan(800_000));\n    }", "signature": "void download_ipv4()", "full_signature": "@Test public void download_ipv4()", "class_method_signature": "BgpRisDownloaderTest.download_ipv4()", "testcase": true, "constructor": false, "invocations": ["fetch", "of", "empty", "hasValueSatisfying", "assertThat", "getEntries", "isGreaterThan", "assertThat", "size"]}, "focal_class": {"identifier": "BgpRisDownloader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final HttpClientMetricsService httpMetrics;", "modifier": "private final", "type": "HttpClientMetricsService", "declarator": "httpMetrics", "var_name": "httpMetrics"}, {"original_string": "private HttpClient httpClient;", "modifier": "private", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "private static Pattern regexp = Pattern.compile(\"^\\\\s*([0-9]+)\\\\s+([0-9a-fA-F.:/]+)\\\\s+([0-9]+)\\\\s*$\");", "modifier": "private static", "type": "Pattern", "declarator": "regexp = Pattern.compile(\"^\\\\s*([0-9]+)\\\\s+([0-9a-fA-F.:/]+)\\\\s+([0-9]+)\\\\s*$\")", "var_name": "regexp"}], "methods": [{"identifier": "BgpRisDownloader", "parameters": "(HttpClientMetricsService httpMetrics, HttpClient httpClient)", "modifiers": "@Autowired public", "return": "", "signature": " BgpRisDownloader(HttpClientMetricsService httpMetrics, HttpClient httpClient)", "full_signature": "@Autowired public  BgpRisDownloader(HttpClientMetricsService httpMetrics, HttpClient httpClient)", "class_method_signature": "BgpRisDownloader.BgpRisDownloader(HttpClientMetricsService httpMetrics, HttpClient httpClient)", "testcase": false, "constructor": true}, {"identifier": "fetch", "parameters": "(@NotNull BgpRisDump dump, Function<BgpRisEntry, Stream<T>> mapper)", "modifiers": "public", "return": "BgpRisDump<T>", "signature": "BgpRisDump<T> fetch(@NotNull BgpRisDump dump, Function<BgpRisEntry, Stream<T>> mapper)", "full_signature": "public BgpRisDump<T> fetch(@NotNull BgpRisDump dump, Function<BgpRisEntry, Stream<T>> mapper)", "class_method_signature": "BgpRisDownloader.fetch(@NotNull BgpRisDump dump, Function<BgpRisEntry, Stream<T>> mapper)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final InputStream is)", "modifiers": "public static", "return": "Stream<BgpRisEntry>", "signature": "Stream<BgpRisEntry> parse(final InputStream is)", "full_signature": "public static Stream<BgpRisEntry> parse(final InputStream is)", "class_method_signature": "BgpRisDownloader.parse(final InputStream is)", "testcase": false, "constructor": false}, {"identifier": "parseLine", "parameters": "(final String line)", "modifiers": "private static", "return": "BgpRisEntry", "signature": "BgpRisEntry parseLine(final String line)", "full_signature": "private static BgpRisEntry parseLine(final String line)", "class_method_signature": "BgpRisDownloader.parseLine(final String line)", "testcase": false, "constructor": false}, {"identifier": "formatAsRFC2616", "parameters": "(DateTime d)", "modifiers": "private", "return": "String", "signature": "String formatAsRFC2616(DateTime d)", "full_signature": "private String formatAsRFC2616(DateTime d)", "class_method_signature": "BgpRisDownloader.formatAsRFC2616(DateTime d)", "testcase": false, "constructor": false}], "file": "rpki-validator/src/main/java/net/ripe/rpki/validator3/api/bgp/BgpRisDownloader.java"}, "focal_method": {"identifier": "fetch", "parameters": "(@NotNull BgpRisDump dump, Function<BgpRisEntry, Stream<T>> mapper)", "modifiers": "public", "return": "BgpRisDump<T>", "body": "public <T> BgpRisDump<T> fetch(@NotNull BgpRisDump dump, Function<BgpRisEntry, Stream<T>> mapper) {\n        log.info(\"attempting to download new BGP RIS preview dump from {}\", dump.url);\n        long before = System.currentTimeMillis();\n        String statusDescription = \"200\";\n\n        final Supplier<Request> requestSupplier = () -> {\n            final Request request = httpClient.newRequest(dump.url);\n            if (dump.lastModified != null) {\n                log.debug(\"Adding 'If-Modified-Since' equals to {}\", formatAsRFC2616(dump.lastModified));\n                request.header(\"If-Modified-Since\", formatAsRFC2616(dump.lastModified));\n            }\n            return request;\n        };\n        final BiFunction<InputStream, Long, BgpRisDump> streamReader = (stream, lastModified) -> {\n            try {\n                Stream<BgpRisEntry> entries = parse(new GZIPInputStream(stream));\n                // Collect the stream to a list here to avoid closing the HTTP stream before\n                // all entries have been parsed.\n                ImmutableList.Builder<T> builder = ImmutableList.builder();\n                entries.flatMap(mapper).forEach(builder::add);\n                return BgpRisDump.of(dump.url, new DateTime(lastModified), Optional.of(builder.build()));\n            } catch (Exception e) {\n                log.error(\"Error downloading RIS dump: \" + dump.url);\n                return dump;\n            }\n        };\n\n        try {\n            return  HttpStreaming.readStream(requestSupplier, streamReader);\n        } catch (HttpStreaming.NotModifiedException n) {\n            statusDescription = \"302\";\n            return dump;\n        } catch (Exception e) {\n            statusDescription = HttpClientMetricsService.unwrapExceptionString(e);\n            throw e;\n        } finally {\n            httpMetrics.update(dump.url, statusDescription, System.currentTimeMillis() - before);\n        }\n    }", "signature": "BgpRisDump<T> fetch(@NotNull BgpRisDump dump, Function<BgpRisEntry, Stream<T>> mapper)", "full_signature": "public BgpRisDump<T> fetch(@NotNull BgpRisDump dump, Function<BgpRisEntry, Stream<T>> mapper)", "class_method_signature": "BgpRisDownloader.fetch(@NotNull BgpRisDump dump, Function<BgpRisEntry, Stream<T>> mapper)", "testcase": false, "constructor": false, "invocations": ["info", "currentTimeMillis", "newRequest", "debug", "formatAsRFC2616", "header", "formatAsRFC2616", "parse", "builder", "forEach", "flatMap", "of", "of", "build", "error", "readStream", "unwrapExceptionString", "update", "currentTimeMillis"]}, "repository": {"repo_id": 104217624, "url": "https://github.com/RIPE-NCC/rpki-validator-3", "stars": 32, "created": "9/20/2017 1:15:05 PM +00:00", "updates": "2020-01-27T10:48:38+00:00", "fork": "False", "license": "licensed"}}