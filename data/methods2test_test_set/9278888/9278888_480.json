{"test_class": {"identifier": "RealSpanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "TestSpanHandler spans = new TestSpanHandler();", "modifier": "", "type": "TestSpanHandler", "declarator": "spans = new TestSpanHandler()", "var_name": "spans"}, {"original_string": "Tracing tracing = Tracing.newBuilder().addSpanHandler(spans).build();", "modifier": "", "type": "Tracing", "declarator": "tracing = Tracing.newBuilder().addSpanHandler(spans).build()", "var_name": "tracing"}, {"original_string": "TraceContext context = tracing.tracer().newTrace().context();", "modifier": "", "type": "TraceContext", "declarator": "context = tracing.tracer().newTrace().context()", "var_name": "context"}, {"original_string": "TraceContext context2 = tracing.tracer().newTrace().context();", "modifier": "", "type": "TraceContext", "declarator": "context2 = tracing.tracer().newTrace().context()", "var_name": "context2"}, {"original_string": "Span span = tracing.tracer().newTrace();", "modifier": "", "type": "Span", "declarator": "span = tracing.tracer().newTrace()", "var_name": "span"}], "file": "brave/src/test/java/brave/RealSpanTest.java"}, "test_case": {"identifier": "finished_server_annotation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void finished_server_annotation() {\n    finish(\"sr\", \"ss\", Kind.SERVER);\n  }", "signature": "void finished_server_annotation()", "full_signature": "@Test public void finished_server_annotation()", "class_method_signature": "RealSpanTest.finished_server_annotation()", "testcase": true, "constructor": false, "invocations": ["finish"]}, "focal_class": {"identifier": "RealSpan", "superclass": "extends Span", "interfaces": "", "fields": [{"original_string": "final TraceContext context;", "modifier": "final", "type": "TraceContext", "declarator": "context", "var_name": "context"}, {"original_string": "final PendingSpans pendingSpans;", "modifier": "final", "type": "PendingSpans", "declarator": "pendingSpans", "var_name": "pendingSpans"}, {"original_string": "final MutableSpan state;", "modifier": "final", "type": "MutableSpan", "declarator": "state", "var_name": "state"}, {"original_string": "final Clock clock;", "modifier": "final", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "methods": [{"identifier": "RealSpan", "parameters": "(TraceContext context,\n    PendingSpans pendingSpans,\n    MutableSpan state,\n    Clock clock\n  )", "modifiers": "", "return": "", "signature": " RealSpan(TraceContext context,\n    PendingSpans pendingSpans,\n    MutableSpan state,\n    Clock clock\n  )", "full_signature": "  RealSpan(TraceContext context,\n    PendingSpans pendingSpans,\n    MutableSpan state,\n    Clock clock\n  )", "class_method_signature": "RealSpan.RealSpan(TraceContext context,\n    PendingSpans pendingSpans,\n    MutableSpan state,\n    Clock clock\n  )", "testcase": false, "constructor": true}, {"identifier": "isNoop", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isNoop()", "full_signature": "@Override public boolean isNoop()", "class_method_signature": "RealSpan.isNoop()", "testcase": false, "constructor": false}, {"identifier": "context", "parameters": "()", "modifiers": "@Override public", "return": "TraceContext", "signature": "TraceContext context()", "full_signature": "@Override public TraceContext context()", "class_method_signature": "RealSpan.context()", "testcase": false, "constructor": false}, {"identifier": "customizer", "parameters": "()", "modifiers": "@Override public", "return": "SpanCustomizer", "signature": "SpanCustomizer customizer()", "full_signature": "@Override public SpanCustomizer customizer()", "class_method_signature": "RealSpan.customizer()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "Span", "signature": "Span start()", "full_signature": "@Override public Span start()", "class_method_signature": "RealSpan.start()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(long timestamp)", "modifiers": "@Override public", "return": "Span", "signature": "Span start(long timestamp)", "full_signature": "@Override public Span start(long timestamp)", "class_method_signature": "RealSpan.start(long timestamp)", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "(String name)", "modifiers": "@Override public", "return": "Span", "signature": "Span name(String name)", "full_signature": "@Override public Span name(String name)", "class_method_signature": "RealSpan.name(String name)", "testcase": false, "constructor": false}, {"identifier": "kind", "parameters": "(Kind kind)", "modifiers": "@Override public", "return": "Span", "signature": "Span kind(Kind kind)", "full_signature": "@Override public Span kind(Kind kind)", "class_method_signature": "RealSpan.kind(Kind kind)", "testcase": false, "constructor": false}, {"identifier": "annotate", "parameters": "(String value)", "modifiers": "@Override public", "return": "Span", "signature": "Span annotate(String value)", "full_signature": "@Override public Span annotate(String value)", "class_method_signature": "RealSpan.annotate(String value)", "testcase": false, "constructor": false}, {"identifier": "annotate", "parameters": "(long timestamp, String value)", "modifiers": "@Override public", "return": "Span", "signature": "Span annotate(long timestamp, String value)", "full_signature": "@Override public Span annotate(long timestamp, String value)", "class_method_signature": "RealSpan.annotate(long timestamp, String value)", "testcase": false, "constructor": false}, {"identifier": "tag", "parameters": "(String key, String value)", "modifiers": "@Override public", "return": "Span", "signature": "Span tag(String key, String value)", "full_signature": "@Override public Span tag(String key, String value)", "class_method_signature": "RealSpan.tag(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(Throwable throwable)", "modifiers": "@Override public", "return": "Span", "signature": "Span error(Throwable throwable)", "full_signature": "@Override public Span error(Throwable throwable)", "class_method_signature": "RealSpan.error(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "remoteServiceName", "parameters": "(String remoteServiceName)", "modifiers": "@Override public", "return": "Span", "signature": "Span remoteServiceName(String remoteServiceName)", "full_signature": "@Override public Span remoteServiceName(String remoteServiceName)", "class_method_signature": "RealSpan.remoteServiceName(String remoteServiceName)", "testcase": false, "constructor": false}, {"identifier": "remoteIpAndPort", "parameters": "(String remoteIp, int remotePort)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remoteIpAndPort(String remoteIp, int remotePort)", "full_signature": "@Override public boolean remoteIpAndPort(String remoteIp, int remotePort)", "class_method_signature": "RealSpan.remoteIpAndPort(String remoteIp, int remotePort)", "testcase": false, "constructor": false}, {"identifier": "finish", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void finish()", "full_signature": "@Override public void finish()", "class_method_signature": "RealSpan.finish()", "testcase": false, "constructor": false}, {"identifier": "finish", "parameters": "(long timestamp)", "modifiers": "@Override public", "return": "void", "signature": "void finish(long timestamp)", "full_signature": "@Override public void finish(long timestamp)", "class_method_signature": "RealSpan.finish(long timestamp)", "testcase": false, "constructor": false}, {"identifier": "abandon", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void abandon()", "full_signature": "@Override public void abandon()", "class_method_signature": "RealSpan.abandon()", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flush()", "full_signature": "@Override public void flush()", "class_method_signature": "RealSpan.flush()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RealSpan.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "RealSpan.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "isEqualToRealOrLazySpan", "parameters": "(TraceContext context, Object o)", "modifiers": "static", "return": "boolean", "signature": "boolean isEqualToRealOrLazySpan(TraceContext context, Object o)", "full_signature": "static boolean isEqualToRealOrLazySpan(TraceContext context, Object o)", "class_method_signature": "RealSpan.isEqualToRealOrLazySpan(TraceContext context, Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RealSpan.hashCode()", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/RealSpan.java"}, "focal_method": {"identifier": "finish", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override public void finish() {\n    finish(0L);\n  }", "signature": "void finish()", "full_signature": "@Override public void finish()", "class_method_signature": "RealSpan.finish()", "testcase": false, "constructor": false, "invocations": ["finish"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}