{"test_class": {"identifier": "ReflectionUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/vmutils/src/test/java/org/arakhne/afc/vmutil/ReflectionUtilTest.java"}, "test_case": {"identifier": "matchesParametersClassObjectArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void matchesParametersClassObjectArray() {\n\t\tassertTrue(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[0],\n\t\t\t\tnew Object[0]));\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[0],\n\t\t\t\tnew Object[] { 1 }));\n\t\t\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class },\n\t\t\t\tnew Object[0]));\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class },\n\t\t\t\tnew Object[] { 'c' }));\n\t\tassertTrue(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class },\n\t\t\t\tnew Object[] { 3. }));\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class },\n\t\t\t\tnew Object[] { 4f }));\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class },\n\t\t\t\tnew Object[] { 1 }));\n\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class },\n\t\t\t\tnew Object[0]));\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class },\n\t\t\t\tnew Object[] { 'c' }));\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class },\n\t\t\t\tnew Object[] { 3. }));\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class },\n\t\t\t\tnew Object[] { 4. }));\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class },\n\t\t\t\tnew Object[] { 1 }));\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class },\n\t\t\t\tnew Object[] { 'c', \"a\" }));  //$NON-NLS-1$\n\t\tassertTrue(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class },\n\t\t\t\tnew Object[] { 3., \"a\" }));  //$NON-NLS-1$\n\t\tassertTrue(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class },\n\t\t\t\tnew Object[] { 4., \"a\" }));  //$NON-NLS-1$\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class },\n\t\t\t\tnew Object[] { 1, \"a\" }));  //$NON-NLS-1$\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class },\n\t\t\t\tnew Object[] { 'c', true }));\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class },\n\t\t\t\tnew Object[] { 3., true }));\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class },\n\t\t\t\tnew Object[] { 4., true }));\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class },\n\t\t\t\tnew Object[] { 1, true }));\n\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class, Array.class },\n\t\t\t\tnew Object[0]));\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class, Array.class },\n\t\t\t\tnew Object[] { 1. }));\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class, Array.class },\n\t\t\t\tnew Object[] { 1., \"a\" }));  //$NON-NLS-1$\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class, Array.class },\n\t\t\t\tnew Object[] { 1., \"a\", null }));  //$NON-NLS-1$\n\t\tassertFalse(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class, Array.class },\n\t\t\t\tnew Object[] { 1., \"a\", new int[0] }));  //$NON-NLS-1$\n\t\tassertTrue(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Double.class, String.class, int[].class },\n\t\t\t\tnew Object[] { 1., \"a\", new int[0] }));  //$NON-NLS-1$\n\n\t\tassertTrue(ReflectionUtil.matchesParameters(\n\t\t\t\tnew Class<?>[] { Number.class, String.class, int[].class },\n\t\t\t\tnew Object[] { 1., \"a\", new int[0] }));  //$NON-NLS-1$\n\t}", "signature": "void matchesParametersClassObjectArray()", "full_signature": "@Test public void matchesParametersClassObjectArray()", "class_method_signature": "ReflectionUtilTest.matchesParametersClassObjectArray()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "matchesParameters", "assertFalse", "matchesParameters", "assertFalse", "matchesParameters", "assertFalse", "matchesParameters", "assertTrue", "matchesParameters", "assertFalse", "matchesParameters", "assertFalse", "matchesParameters", "assertFalse", "matchesParameters", "assertFalse", "matchesParameters", "assertFalse", "matchesParameters", "assertFalse", "matchesParameters", "assertFalse", "matchesParameters", "assertFalse", "matchesParameters", "assertTrue", "matchesParameters", "assertTrue", "matchesParameters", "assertFalse", "matchesParameters", "assertFalse", "matchesParameters", "assertFalse", "matchesParameters", "assertFalse", "matchesParameters", "assertFalse", "matchesParameters", "assertFalse", "matchesParameters", "assertFalse", "matchesParameters", "assertFalse", "matchesParameters", "assertFalse", "matchesParameters", "assertFalse", "matchesParameters", "assertTrue", "matchesParameters", "assertTrue", "matchesParameters"]}, "focal_class": {"identifier": "ReflectionUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ReflectionUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ReflectionUtil()", "full_signature": "private  ReflectionUtil()", "class_method_signature": "ReflectionUtil.ReflectionUtil()", "testcase": false, "constructor": true}, {"identifier": "isInstance", "parameters": "(Class<?> type, Object obj)", "modifiers": "@Pure @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:cyclomaticcomplexity\", \"checkstyle:returncount\"}) public static", "return": "boolean", "signature": "boolean isInstance(Class<?> type, Object obj)", "full_signature": "@Pure @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:cyclomaticcomplexity\", \"checkstyle:returncount\"}) public static boolean isInstance(Class<?> type, Object obj)", "class_method_signature": "ReflectionUtil.isInstance(Class<?> type, Object obj)", "testcase": false, "constructor": false}, {"identifier": "isAssignableFrom", "parameters": "(Class<?> assignementTarget, Class<?> assignementSource)", "modifiers": "@Pure public static", "return": "boolean", "signature": "boolean isAssignableFrom(Class<?> assignementTarget, Class<?> assignementSource)", "full_signature": "@Pure public static boolean isAssignableFrom(Class<?> assignementTarget, Class<?> assignementSource)", "class_method_signature": "ReflectionUtil.isAssignableFrom(Class<?> assignementTarget, Class<?> assignementSource)", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String name)", "modifiers": "@Pure @SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:npathcomplexity\"}) public static", "return": "Class<?>", "signature": "Class<?> forName(String name)", "full_signature": "@Pure @SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:npathcomplexity\"}) public static Class<?> forName(String name)", "class_method_signature": "ReflectionUtil.forName(String name)", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String name, ClassLoader loader)", "modifiers": "@Pure @Inline(value = \"ReflectionUtil.forName(($1), true, ($2))\", imported = {ReflectionUtil.class}) public static", "return": "Class<?>", "signature": "Class<?> forName(String name, ClassLoader loader)", "full_signature": "@Pure @Inline(value = \"ReflectionUtil.forName(($1), true, ($2))\", imported = {ReflectionUtil.class}) public static Class<?> forName(String name, ClassLoader loader)", "class_method_signature": "ReflectionUtil.forName(String name, ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String name, boolean typeInitialization, ClassLoader loader)", "modifiers": "@Pure @SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:npathcomplexity\"}) public static", "return": "Class<?>", "signature": "Class<?> forName(String name, boolean typeInitialization, ClassLoader loader)", "full_signature": "@Pure @SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:npathcomplexity\"}) public static Class<?> forName(String name, boolean typeInitialization, ClassLoader loader)", "class_method_signature": "ReflectionUtil.forName(String name, boolean typeInitialization, ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "getPackageClasses", "parameters": "(Package pkg)", "modifiers": "@Pure @Inline(value = \"ReflectionUtil.getPackageClasses(($1).getName())\", imported = {ReflectionUtil.class}) public static", "return": "Collection<Class<?>>", "signature": "Collection<Class<?>> getPackageClasses(Package pkg)", "full_signature": "@Pure @Inline(value = \"ReflectionUtil.getPackageClasses(($1).getName())\", imported = {ReflectionUtil.class}) public static Collection<Class<?>> getPackageClasses(Package pkg)", "class_method_signature": "ReflectionUtil.getPackageClasses(Package pkg)", "testcase": false, "constructor": false}, {"identifier": "getPackageClasses", "parameters": "(String packageName)", "modifiers": "@Pure public static", "return": "Collection<Class<?>>", "signature": "Collection<Class<?>> getPackageClasses(String packageName)", "full_signature": "@Pure public static Collection<Class<?>> getPackageClasses(String packageName)", "class_method_signature": "ReflectionUtil.getPackageClasses(String packageName)", "testcase": false, "constructor": false}, {"identifier": "basename", "parameters": "(String name)", "modifiers": "private static", "return": "String", "signature": "String basename(String name)", "full_signature": "private static String basename(String name)", "class_method_signature": "ReflectionUtil.basename(String name)", "testcase": false, "constructor": false}, {"identifier": "filename", "parameters": "(String name)", "modifiers": "private static", "return": "String", "signature": "String filename(String name)", "full_signature": "private static String filename(String name)", "class_method_signature": "ReflectionUtil.filename(String name)", "testcase": false, "constructor": false}, {"identifier": "getPackageClassesFromJar", "parameters": "(Collection<Class<?>> classes, String jarFilename, String packageName)", "modifiers": "private static", "return": "void", "signature": "void getPackageClassesFromJar(Collection<Class<?>> classes, String jarFilename, String packageName)", "full_signature": "private static void getPackageClassesFromJar(Collection<Class<?>> classes, String jarFilename, String packageName)", "class_method_signature": "ReflectionUtil.getPackageClassesFromJar(Collection<Class<?>> classes, String jarFilename, String packageName)", "testcase": false, "constructor": false}, {"identifier": "getPackageClassesFromFileSystem", "parameters": "(Collection<Class<?>> classes, String directory, String packageName)", "modifiers": "private static", "return": "void", "signature": "void getPackageClassesFromFileSystem(Collection<Class<?>> classes, String directory, String packageName)", "full_signature": "private static void getPackageClassesFromFileSystem(Collection<Class<?>> classes, String directory, String packageName)", "class_method_signature": "ReflectionUtil.getPackageClassesFromFileSystem(Collection<Class<?>> classes, String directory, String packageName)", "testcase": false, "constructor": false}, {"identifier": "getSubClasses", "parameters": "(Class<T> className)", "modifiers": "@Pure @Inline(\"getSubClasses($1, null)\") public static", "return": "Collection<Class<? extends T>>", "signature": "Collection<Class<? extends T>> getSubClasses(Class<T> className)", "full_signature": "@Pure @Inline(\"getSubClasses($1, null)\") public static Collection<Class<? extends T>> getSubClasses(Class<T> className)", "class_method_signature": "ReflectionUtil.getSubClasses(Class<T> className)", "testcase": false, "constructor": false}, {"identifier": "getSubClasses", "parameters": "(Class<T> className, DynamicURLClassLoader classLoader)", "modifiers": "@Pure public static", "return": "Collection<Class<? extends T>>", "signature": "Collection<Class<? extends T>> getSubClasses(Class<T> className, DynamicURLClassLoader classLoader)", "full_signature": "@Pure public static Collection<Class<? extends T>> getSubClasses(Class<T> className, DynamicURLClassLoader classLoader)", "class_method_signature": "ReflectionUtil.getSubClasses(Class<T> className, DynamicURLClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "getSubClasses", "parameters": "(Class<T> className, boolean allowAbstract, boolean allowInterface,\n\t\t\tboolean allowEnum, Collection<Class<? extends T>> result)", "modifiers": "public static", "return": "void", "signature": "void getSubClasses(Class<T> className, boolean allowAbstract, boolean allowInterface,\n\t\t\tboolean allowEnum, Collection<Class<? extends T>> result)", "full_signature": "public static void getSubClasses(Class<T> className, boolean allowAbstract, boolean allowInterface,\n\t\t\tboolean allowEnum, Collection<Class<? extends T>> result)", "class_method_signature": "ReflectionUtil.getSubClasses(Class<T> className, boolean allowAbstract, boolean allowInterface,\n\t\t\tboolean allowEnum, Collection<Class<? extends T>> result)", "testcase": false, "constructor": false}, {"identifier": "getSubClasses", "parameters": "(Class<T> className, boolean allowAbstract, boolean allowInterface,\n\t\t\tboolean allowEnum, Collection<Class<? extends T>> result, DynamicURLClassLoader classLoader)", "modifiers": "public static", "return": "void", "signature": "void getSubClasses(Class<T> className, boolean allowAbstract, boolean allowInterface,\n\t\t\tboolean allowEnum, Collection<Class<? extends T>> result, DynamicURLClassLoader classLoader)", "full_signature": "public static void getSubClasses(Class<T> className, boolean allowAbstract, boolean allowInterface,\n\t\t\tboolean allowEnum, Collection<Class<? extends T>> result, DynamicURLClassLoader classLoader)", "class_method_signature": "ReflectionUtil.getSubClasses(Class<T> className, boolean allowAbstract, boolean allowInterface,\n\t\t\tboolean allowEnum, Collection<Class<? extends T>> result, DynamicURLClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "getSubClassesFromJar", "parameters": "(Collection<Class<? extends T>> classes, String jarFilename,\n\t\t\tClass<T> className, boolean allowAbstract, boolean allowInterface, boolean allowEnum,\n\t\t\tDynamicURLClassLoader classLoader)", "modifiers": "@SuppressWarnings({\"unchecked\", \"checkstyle:magicnumber\"}) private static", "return": "void", "signature": "void getSubClassesFromJar(Collection<Class<? extends T>> classes, String jarFilename,\n\t\t\tClass<T> className, boolean allowAbstract, boolean allowInterface, boolean allowEnum,\n\t\t\tDynamicURLClassLoader classLoader)", "full_signature": "@SuppressWarnings({\"unchecked\", \"checkstyle:magicnumber\"}) private static void getSubClassesFromJar(Collection<Class<? extends T>> classes, String jarFilename,\n\t\t\tClass<T> className, boolean allowAbstract, boolean allowInterface, boolean allowEnum,\n\t\t\tDynamicURLClassLoader classLoader)", "class_method_signature": "ReflectionUtil.getSubClassesFromJar(Collection<Class<? extends T>> classes, String jarFilename,\n\t\t\tClass<T> className, boolean allowAbstract, boolean allowInterface, boolean allowEnum,\n\t\t\tDynamicURLClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "getSubClassesFromFileSystem", "parameters": "(Collection<Class<? extends T>> classes, String directory,\n\t\t\tClass<T> className, boolean allowAbstract, boolean allowInterface, boolean allowEnum,\n\t\t\tDynamicURLClassLoader classLoader)", "modifiers": "@SuppressWarnings({\"unchecked\", \"checkstyle:cyclomaticcomplexity\"}) private static", "return": "void", "signature": "void getSubClassesFromFileSystem(Collection<Class<? extends T>> classes, String directory,\n\t\t\tClass<T> className, boolean allowAbstract, boolean allowInterface, boolean allowEnum,\n\t\t\tDynamicURLClassLoader classLoader)", "full_signature": "@SuppressWarnings({\"unchecked\", \"checkstyle:cyclomaticcomplexity\"}) private static void getSubClassesFromFileSystem(Collection<Class<? extends T>> classes, String directory,\n\t\t\tClass<T> className, boolean allowAbstract, boolean allowInterface, boolean allowEnum,\n\t\t\tDynamicURLClassLoader classLoader)", "class_method_signature": "ReflectionUtil.getSubClassesFromFileSystem(Collection<Class<? extends T>> classes, String directory,\n\t\t\tClass<T> className, boolean allowAbstract, boolean allowInterface, boolean allowEnum,\n\t\t\tDynamicURLClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "getAllDirectInterfaces", "parameters": "(Class<? extends T> lowestType,\n\t\t\tClass<T> highestType, Class<I> interfaceType)", "modifiers": "@Pure @SuppressWarnings(\"unchecked\") public static", "return": "Set<Class<? extends I>>", "signature": "Set<Class<? extends I>> getAllDirectInterfaces(Class<? extends T> lowestType,\n\t\t\tClass<T> highestType, Class<I> interfaceType)", "full_signature": "@Pure @SuppressWarnings(\"unchecked\") public static Set<Class<? extends I>> getAllDirectInterfaces(Class<? extends T> lowestType,\n\t\t\tClass<T> highestType, Class<I> interfaceType)", "class_method_signature": "ReflectionUtil.getAllDirectInterfaces(Class<? extends T> lowestType,\n\t\t\tClass<T> highestType, Class<I> interfaceType)", "testcase": false, "constructor": false}, {"identifier": "getAllDirectInterfaces", "parameters": "(Class<? extends T> lowestType, Class<T> highestType)", "modifiers": "public static", "return": "Set<Class<?>>", "signature": "Set<Class<?>> getAllDirectInterfaces(Class<? extends T> lowestType, Class<T> highestType)", "full_signature": "public static Set<Class<?>> getAllDirectInterfaces(Class<? extends T> lowestType, Class<T> highestType)", "class_method_signature": "ReflectionUtil.getAllDirectInterfaces(Class<? extends T> lowestType, Class<T> highestType)", "testcase": false, "constructor": false}, {"identifier": "getSuperClasses", "parameters": "(Class<T> className)", "modifiers": "@Pure public static", "return": "Collection<Class<? super T>>", "signature": "Collection<Class<? super T>> getSuperClasses(Class<T> className)", "full_signature": "@Pure public static Collection<Class<? super T>> getSuperClasses(Class<T> className)", "class_method_signature": "ReflectionUtil.getSuperClasses(Class<T> className)", "testcase": false, "constructor": false}, {"identifier": "getCommonType", "parameters": "(Class<?> type1, Class<?> type2)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getCommonType(Class<?> type1, Class<?> type2)", "full_signature": "public static Class<?> getCommonType(Class<?> type1, Class<?> type2)", "class_method_signature": "ReflectionUtil.getCommonType(Class<?> type1, Class<?> type2)", "testcase": false, "constructor": false}, {"identifier": "getCommonType", "parameters": "(Object instance1, Object instance2)", "modifiers": "@Pure public static", "return": "Class<?>", "signature": "Class<?> getCommonType(Object instance1, Object instance2)", "full_signature": "@Pure public static Class<?> getCommonType(Object instance1, Object instance2)", "class_method_signature": "ReflectionUtil.getCommonType(Object instance1, Object instance2)", "testcase": false, "constructor": false}, {"identifier": "getOutboxingType", "parameters": "(Class<?> type)", "modifiers": "@Pure @SuppressWarnings({\"checkstyle:returncount\", \"npathcomplexity\"}) public static", "return": "Class<?>", "signature": "Class<?> getOutboxingType(Class<?> type)", "full_signature": "@Pure @SuppressWarnings({\"checkstyle:returncount\", \"npathcomplexity\"}) public static Class<?> getOutboxingType(Class<?> type)", "class_method_signature": "ReflectionUtil.getOutboxingType(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getInboxingType", "parameters": "(Class<?> type)", "modifiers": "@Pure @SuppressWarnings({\"checkstyle:returncount\", \"npathcomplexity\"}) public static", "return": "Class<?>", "signature": "Class<?> getInboxingType(Class<?> type)", "full_signature": "@Pure @SuppressWarnings({\"checkstyle:returncount\", \"npathcomplexity\"}) public static Class<?> getInboxingType(Class<?> type)", "class_method_signature": "ReflectionUtil.getInboxingType(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "matchesParameters", "parameters": "(Class<?>[] formalParameters, Object... parameterValues)", "modifiers": "@Pure public static", "return": "boolean", "signature": "boolean matchesParameters(Class<?>[] formalParameters, Object... parameterValues)", "full_signature": "@Pure public static boolean matchesParameters(Class<?>[] formalParameters, Object... parameterValues)", "class_method_signature": "ReflectionUtil.matchesParameters(Class<?>[] formalParameters, Object... parameterValues)", "testcase": false, "constructor": false}, {"identifier": "matchesParameters", "parameters": "(Method method, Object... parameters)", "modifiers": "@Pure @Inline(value = \"ReflectionUtil.matchesParameters(($1).getParameterTypes(), ($2))\", imported = {ReflectionUtil.class}) public static", "return": "boolean", "signature": "boolean matchesParameters(Method method, Object... parameters)", "full_signature": "@Pure @Inline(value = \"ReflectionUtil.matchesParameters(($1).getParameterTypes(), ($2))\", imported = {ReflectionUtil.class}) public static boolean matchesParameters(Method method, Object... parameters)", "class_method_signature": "ReflectionUtil.matchesParameters(Method method, Object... parameters)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Object object)", "modifiers": "public static", "return": "String", "signature": "String toString(Object object)", "full_signature": "public static String toString(Object object)", "class_method_signature": "ReflectionUtil.toString(Object object)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(Object object, JsonBuffer output)", "modifiers": "public static", "return": "void", "signature": "void toJson(Object object, JsonBuffer output)", "full_signature": "public static void toJson(Object object, JsonBuffer output)", "class_method_signature": "ReflectionUtil.toJson(Object object, JsonBuffer output)", "testcase": false, "constructor": false}, {"identifier": "makeName", "parameters": "(String value, int first)", "modifiers": "private static", "return": "String", "signature": "String makeName(String value, int first)", "full_signature": "private static String makeName(String value, int first)", "class_method_signature": "ReflectionUtil.makeName(String value, int first)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Class<T> type, Object... arguments)", "modifiers": "public static", "return": "T", "signature": "T newInstance(Class<T> type, Object... arguments)", "full_signature": "public static T newInstance(Class<T> type, Object... arguments)", "class_method_signature": "ReflectionUtil.newInstance(Class<T> type, Object... arguments)", "testcase": false, "constructor": false}], "file": "core/vmutils/src/main/java/org/arakhne/afc/vmutil/ReflectionUtil.java"}, "focal_method": {"identifier": "matchesParameters", "parameters": "(Class<?>[] formalParameters, Object... parameterValues)", "modifiers": "@Pure public static", "return": "boolean", "body": "@Pure\n\tpublic static boolean matchesParameters(Class<?>[] formalParameters, Object... parameterValues) {\n\t\tif (formalParameters == null) {\n\t\t\treturn parameterValues == null;\n\t\t}\n\t\tif (parameterValues != null && formalParameters.length == parameterValues.length) {\n\t\t\tfor (int i = 0; i < formalParameters.length; ++i) {\n\t\t\t\tif (!isInstance(formalParameters[i], parameterValues[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}", "signature": "boolean matchesParameters(Class<?>[] formalParameters, Object... parameterValues)", "full_signature": "@Pure public static boolean matchesParameters(Class<?>[] formalParameters, Object... parameterValues)", "class_method_signature": "ReflectionUtil.matchesParameters(Class<?>[] formalParameters, Object... parameterValues)", "testcase": false, "constructor": false, "invocations": ["isInstance"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}