{"test_class": {"identifier": "BitSetGrayCodeBinaryRepresentationTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "protected BitSetGrayCodeBinaryRepresentation representation;", "modifier": "protected", "type": "BitSetGrayCodeBinaryRepresentation", "declarator": "representation", "var_name": "representation"}, {"original_string": "protected SimpleBinaryGenomeDescriptor descriptor;", "modifier": "protected", "type": "SimpleBinaryGenomeDescriptor", "declarator": "descriptor", "var_name": "descriptor"}], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/representations/genotype/BitSetGrayCodeBinaryRepresentationTest.java"}, "test_case": {"identifier": "testDecodeGenomeToBinary1", "parameters": "()", "modifiers": "@Test //tests correct conversion of multiple gray variables into binary notation public", "return": "void", "body": "@Test\n    //tests correct conversion of multiple gray variables into binary notation\n    public void testDecodeGenomeToBinary1(){\n        boolean[] gray = new boolean[]{\n                true, true, true, true, true, true,\n                true, true,\n                true, false, false, false,\n                false, false, false, true, false, true, false, true, false, true\n        };\n        assertEquals((6+2+4+10), gray.length);\n        for (int idx = 0; idx < gray.length; idx++){\n            this.representation.setGeneAt(idx, gray[idx]);\n        }\n        assertEquals(gray.length, this.representation.genomeLength);\n        BitSet result = this.representation.decodeGenomeToBinary();\n\n        assertTrue((6+2+4+10) >=  result.length());\n        boolean[] binary = new boolean[]{\n                true, false, true, false, true, false,\n                true, false,\n                true, true, true, true,\n                false, false, false, true, true, false, false, true, true, false\n        };\n        assertTrue(binary.length >=result.length());\n        // Assert does not have assertArrayEquals for boolean[]...\n        for (int i = 0; i < binary.length; i++){\n            Assert.assertEquals(\"in step \" + i, binary[i], result.get(i) );\n        }\n    }", "signature": "void testDecodeGenomeToBinary1()", "full_signature": "@Test //tests correct conversion of multiple gray variables into binary notation public void testDecodeGenomeToBinary1()", "class_method_signature": "BitSetGrayCodeBinaryRepresentationTest.testDecodeGenomeToBinary1()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "setGeneAt", "assertEquals", "decodeGenomeToBinary", "assertTrue", "length", "assertTrue", "length", "assertEquals", "get"]}, "focal_class": {"identifier": "BitSetGrayCodeBinaryRepresentation", "superclass": "extends BitSetBinaryRepresentation", "interfaces": "", "fields": [], "methods": [{"identifier": "BitSetGrayCodeBinaryRepresentation", "parameters": "(SimpleBinaryGenomeDescriptor descriptor)", "modifiers": "public", "return": "", "signature": " BitSetGrayCodeBinaryRepresentation(SimpleBinaryGenomeDescriptor descriptor)", "full_signature": "public  BitSetGrayCodeBinaryRepresentation(SimpleBinaryGenomeDescriptor descriptor)", "class_method_signature": "BitSetGrayCodeBinaryRepresentation.BitSetGrayCodeBinaryRepresentation(SimpleBinaryGenomeDescriptor descriptor)", "testcase": false, "constructor": true}, {"identifier": "BitSetGrayCodeBinaryRepresentation", "parameters": "(BitSetGrayCodeBinaryRepresentation second)", "modifiers": "public", "return": "", "signature": " BitSetGrayCodeBinaryRepresentation(BitSetGrayCodeBinaryRepresentation second)", "full_signature": "public  BitSetGrayCodeBinaryRepresentation(BitSetGrayCodeBinaryRepresentation second)", "class_method_signature": "BitSetGrayCodeBinaryRepresentation.BitSetGrayCodeBinaryRepresentation(BitSetGrayCodeBinaryRepresentation second)", "testcase": false, "constructor": true}, {"identifier": "decodeGenomeToBinary", "parameters": "()", "modifiers": "@Override protected", "return": "BitSet", "signature": "BitSet decodeGenomeToBinary()", "full_signature": "@Override protected BitSet decodeGenomeToBinary()", "class_method_signature": "BitSetGrayCodeBinaryRepresentation.decodeGenomeToBinary()", "testcase": false, "constructor": false}, {"identifier": "encodeBinaryGenome", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void encodeBinaryGenome()", "full_signature": "@Override protected void encodeBinaryGenome()", "class_method_signature": "BitSetGrayCodeBinaryRepresentation.encodeBinaryGenome()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "@Override public", "return": "Representation", "signature": "Representation copy()", "full_signature": "@Override public Representation copy()", "class_method_signature": "BitSetGrayCodeBinaryRepresentation.copy()", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/representations/genotype/BitSetGrayCodeBinaryRepresentation.java"}, "focal_method": {"identifier": "decodeGenomeToBinary", "parameters": "()", "modifiers": "@Override protected", "return": "BitSet", "body": "@Override\n    protected BitSet decodeGenomeToBinary() {\n        BitSet binaryGenome = new BitSet(this.genomeLength);\n        int index = 0; // index in entire genome; stored from MSB to LSB\n        for (int variable = 0; variable < this.descriptor.numVariables; variable++){\n            binaryGenome.set(index, this.genome.get(index++)); // MSB bit of every variable is preserved\n            for (int i = 1; i < this.descriptor.variablesLengths[variable]; i++){\n                binaryGenome.set(index, binaryGenome.get(index-1) ^ this.genome.get(index++));\n            }\n        }\n        return binaryGenome;\n    }", "signature": "BitSet decodeGenomeToBinary()", "full_signature": "@Override protected BitSet decodeGenomeToBinary()", "class_method_signature": "BitSetGrayCodeBinaryRepresentation.decodeGenomeToBinary()", "testcase": false, "constructor": false, "invocations": ["set", "get", "set", "get", "get"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}