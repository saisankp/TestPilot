{"test_class": {"identifier": "DefaultSimilarNamesPolicyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultSimilarNamesPolicy policy;", "modifier": "private", "type": "DefaultSimilarNamesPolicy", "declarator": "policy", "var_name": "policy"}], "file": "geoclient-service/src/test/java/gov/nyc/doitt/gis/geoclient/service/search/policy/DefaultSimilarNamesPolicyTest.java"}, "test_case": {"identifier": "testClean", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClean() {\n        assertThat(policy.clean(\"\")).isEqualTo(\"\");\n        assertThat(policy.clean(\" \")).isEqualTo(\" \");\n        assertThat(policy.clean(\"a\")).isEqualTo(\"A\");\n        assertThat(policy.clean(\"a \")).isEqualTo(\"A\");\n        assertThat(policy.clean(\" a \")).isEqualTo(\"A\");\n        assertThat(policy.clean(\" ave a \")).isEqualTo(\"A\");\n        assertThat(policy.clean(\"St Marks\")).isEqualTo(\"MARKS\");\n    }", "signature": "void testClean()", "full_signature": "@Test public void testClean()", "class_method_signature": "DefaultSimilarNamesPolicyTest.testClean()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "clean", "isEqualTo", "assertThat", "clean", "isEqualTo", "assertThat", "clean", "isEqualTo", "assertThat", "clean", "isEqualTo", "assertThat", "clean", "isEqualTo", "assertThat", "clean", "isEqualTo", "assertThat", "clean"]}, "focal_class": {"identifier": "DefaultSimilarNamesPolicy", "superclass": "extends AbstractPolicy", "interfaces": "implements SimilarNamesPolicy", "fields": [{"original_string": "public static final int DEFAULT_SIMILAR_NAMES_DISTANCE = 8;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_SIMILAR_NAMES_DISTANCE = 8", "var_name": "DEFAULT_SIMILAR_NAMES_DISTANCE"}, {"original_string": "private int similarNamesDistance = DEFAULT_SIMILAR_NAMES_DISTANCE;", "modifier": "private", "type": "int", "declarator": "similarNamesDistance = DEFAULT_SIMILAR_NAMES_DISTANCE", "var_name": "similarNamesDistance"}, {"original_string": "private LevenshteinDistance levenshteinDistance = new LevenshteinDistance(DEFAULT_SIMILAR_NAMES_DISTANCE);", "modifier": "private", "type": "LevenshteinDistance", "declarator": "levenshteinDistance = new LevenshteinDistance(DEFAULT_SIMILAR_NAMES_DISTANCE)", "var_name": "levenshteinDistance"}], "methods": [{"identifier": "getSimilarNamesDistance", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSimilarNamesDistance()", "full_signature": "public int getSimilarNamesDistance()", "class_method_signature": "DefaultSimilarNamesPolicy.getSimilarNamesDistance()", "testcase": false, "constructor": false}, {"identifier": "setSimilarNamesDistance", "parameters": "(int similarNamesDistance)", "modifiers": "public", "return": "void", "signature": "void setSimilarNamesDistance(int similarNamesDistance)", "full_signature": "public void setSimilarNamesDistance(int similarNamesDistance)", "class_method_signature": "DefaultSimilarNamesPolicy.setSimilarNamesDistance(int similarNamesDistance)", "testcase": false, "constructor": false}, {"identifier": "isSimilarName", "parameters": "(String original, String proposed)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSimilarName(String original, String proposed)", "full_signature": "@Override public boolean isSimilarName(String original, String proposed)", "class_method_signature": "DefaultSimilarNamesPolicy.isSimilarName(String original, String proposed)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "DefaultSimilarNamesPolicy.getDescription()", "testcase": false, "constructor": false}, {"identifier": "clean", "parameters": "(String string)", "modifiers": "", "return": "String", "signature": "String clean(String string)", "full_signature": " String clean(String string)", "class_method_signature": "DefaultSimilarNamesPolicy.clean(String string)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DefaultSimilarNamesPolicy.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DefaultSimilarNamesPolicy.equals(Object obj)", "testcase": false, "constructor": false}], "file": "geoclient-service/src/main/java/gov/nyc/doitt/gis/geoclient/service/search/policy/DefaultSimilarNamesPolicy.java"}, "focal_method": {"identifier": "clean", "parameters": "(String string)", "modifiers": "", "return": "String", "body": "String clean(String string)\n    {\n        String clean = string.toUpperCase();\n        // TODO need more stuff!\n        clean = clean.replaceAll(\"(\\\\bSTREET\\\\b|\\\\bST\\\\b)\", \"\");\n        clean = clean.replaceAll(\"(\\\\bAVENUE\\\\b|\\\\bAVE\\\\b)\", \"\");\n        clean = clean.replaceAll(\"(\\\\bBOULEVARD\\\\b|\\\\bBLVD\\\\b|\\\\bBL\\\\b)\", \"\");\n        clean = clean.replaceAll(\"(\\\\bPLACE\\\\b|\\\\bPL\\\\b)\", \"\");\n        clean = clean.replaceAll(\"(\\\\bNORTH\\\\b|\\\\bSOUTH\\\\b|\\\\bEAST\\\\b|\\\\bWEST\\\\b)\", \"\");\n        clean = clean.replaceAll(\"(\\\\bPARKWAY\\\\b|\\\\bPKWY\\\\b)\", \"\");\n        clean = clean.trim();\n        if (clean.isEmpty()) {\n            // Screw it, return the original\n            return string;\n        }\n        return clean;\n    }", "signature": "String clean(String string)", "full_signature": " String clean(String string)", "class_method_signature": "DefaultSimilarNamesPolicy.clean(String string)", "testcase": false, "constructor": false, "invocations": ["toUpperCase", "replaceAll", "replaceAll", "replaceAll", "replaceAll", "replaceAll", "replaceAll", "trim", "isEmpty"]}, "repository": {"repo_id": 49475567, "url": "https://github.com/CityOfNewYork/geoclient", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 42, "size": 9801, "license": "licensed"}}