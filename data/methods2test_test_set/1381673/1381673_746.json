{"test_class": {"identifier": "BRLRuleModelTest", "superclass": "extends BaseBRLTest", "interfaces": "", "fields": [{"original_string": "private BRLRuleModel rm;", "modifier": "private", "type": "BRLRuleModel", "declarator": "rm", "var_name": "rm"}], "file": "drools-workbench-models/drools-workbench-models-guided-dtable/src/test/java/org/drools/workbench/models/guided/dtable/shared/model/BRLRuleModelTest.java"}, "test_case": {"identifier": "getAllLHSVariables", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAllLHSVariables() {\n        final Pattern52 p = whenThereIsAPattern(\"Applicant\",\n                                                \"$a1\");\n        whenPatternHasAField(p,\n                             \"field1\",\n                             DataType.TYPE_STRING,\n                             \"$f1\");\n\n        final BRLConditionColumn brl1 = whenThereIsABRLFactPattern(\"Applicant\",\n                                                                   \"$a2\");\n        whenBRLFactPatternHasAField(brl1,\n                                    \"field1\",\n                                    DataType.TYPE_STRING,\n                                    \"$f2\");\n\n        final BRLConditionColumn brl2 = whenThereIsABRLFromCompositeFactPattern(\"Applicant\",\n                                                                                \"$a3\");\n        whenBRLFromCompositeFactPatternHasAField(brl2,\n                                                 \"field1\",\n                                                 DataType.TYPE_STRING,\n                                                 \"$f3\");\n\n        assertLHSBindings(\"$a1\",\n                          \"$a2\",\n                          \"$a3\",\n                          \"$f1\",\n                          \"$f2\",\n                          \"$f3\");\n    }", "signature": "void getAllLHSVariables()", "full_signature": "@Test public void getAllLHSVariables()", "class_method_signature": "BRLRuleModelTest.getAllLHSVariables()", "testcase": true, "constructor": false, "invocations": ["whenThereIsAPattern", "whenPatternHasAField", "whenThereIsABRLFactPattern", "whenBRLFactPatternHasAField", "whenThereIsABRLFromCompositeFactPattern", "whenBRLFromCompositeFactPatternHasAField", "assertLHSBindings"]}, "focal_class": {"identifier": "BRLRuleModel", "superclass": "extends RuleModel", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 540l;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 540l", "var_name": "serialVersionUID"}, {"original_string": "private GuidedDecisionTable52 dtable;", "modifier": "private", "type": "GuidedDecisionTable52", "declarator": "dtable", "var_name": "dtable"}], "methods": [{"identifier": "BRLRuleModel", "parameters": "()", "modifiers": "public", "return": "", "signature": " BRLRuleModel()", "full_signature": "public  BRLRuleModel()", "class_method_signature": "BRLRuleModel.BRLRuleModel()", "testcase": false, "constructor": true}, {"identifier": "BRLRuleModel", "parameters": "(final GuidedDecisionTable52 dtable)", "modifiers": "public", "return": "", "signature": " BRLRuleModel(final GuidedDecisionTable52 dtable)", "full_signature": "public  BRLRuleModel(final GuidedDecisionTable52 dtable)", "class_method_signature": "BRLRuleModel.BRLRuleModel(final GuidedDecisionTable52 dtable)", "testcase": false, "constructor": true}, {"identifier": "getLHSBoundFacts", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getLHSBoundFacts()", "full_signature": "@Override public List<String> getLHSBoundFacts()", "class_method_signature": "BRLRuleModel.getLHSBoundFacts()", "testcase": false, "constructor": false}, {"identifier": "getLHSBoundFact", "parameters": "(final String var)", "modifiers": "@Override public", "return": "FactPattern", "signature": "FactPattern getLHSBoundFact(final String var)", "full_signature": "@Override public FactPattern getLHSBoundFact(final String var)", "class_method_signature": "BRLRuleModel.getLHSBoundFact(final String var)", "testcase": false, "constructor": false}, {"identifier": "getLHSBoundField", "parameters": "(final String var)", "modifiers": "@Override public", "return": "SingleFieldConstraint", "signature": "SingleFieldConstraint getLHSBoundField(final String var)", "full_signature": "@Override public SingleFieldConstraint getLHSBoundField(final String var)", "class_method_signature": "BRLRuleModel.getLHSBoundField(final String var)", "testcase": false, "constructor": false}, {"identifier": "getLHSBindingType", "parameters": "(final String var)", "modifiers": "@Override public", "return": "String", "signature": "String getLHSBindingType(final String var)", "full_signature": "@Override public String getLHSBindingType(final String var)", "class_method_signature": "BRLRuleModel.getLHSBindingType(final String var)", "testcase": false, "constructor": false}, {"identifier": "getLHSParentFactPatternForBinding", "parameters": "(final String var)", "modifiers": "@Override public", "return": "FactPattern", "signature": "FactPattern getLHSParentFactPatternForBinding(final String var)", "full_signature": "@Override public FactPattern getLHSParentFactPatternForBinding(final String var)", "class_method_signature": "BRLRuleModel.getLHSParentFactPatternForBinding(final String var)", "testcase": false, "constructor": false}, {"identifier": "getAllVariables", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getAllVariables()", "full_signature": "@Override public List<String> getAllVariables()", "class_method_signature": "BRLRuleModel.getAllVariables()", "testcase": false, "constructor": false}, {"identifier": "getAllLHSVariables", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getAllLHSVariables()", "full_signature": "@Override public List<String> getAllLHSVariables()", "class_method_signature": "BRLRuleModel.getAllLHSVariables()", "testcase": false, "constructor": false}, {"identifier": "getLHSPatternVariables", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getLHSPatternVariables()", "full_signature": "@Override public List<String> getLHSPatternVariables()", "class_method_signature": "BRLRuleModel.getLHSPatternVariables()", "testcase": false, "constructor": false}, {"identifier": "getLHSVariables", "parameters": "(final boolean includePatterns,\n                                        final boolean includeFields)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getLHSVariables(final boolean includePatterns,\n                                        final boolean includeFields)", "full_signature": "@Override public List<String> getLHSVariables(final boolean includePatterns,\n                                        final boolean includeFields)", "class_method_signature": "BRLRuleModel.getLHSVariables(final boolean includePatterns,\n                                        final boolean includeFields)", "testcase": false, "constructor": false}, {"identifier": "getAllRHSVariables", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getAllRHSVariables()", "full_signature": "@Override public List<String> getAllRHSVariables()", "class_method_signature": "BRLRuleModel.getAllRHSVariables()", "testcase": false, "constructor": false}, {"identifier": "isBoundFactUsed", "parameters": "(final String binding)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isBoundFactUsed(final String binding)", "full_signature": "@Override public boolean isBoundFactUsed(final String binding)", "class_method_signature": "BRLRuleModel.isBoundFactUsed(final String binding)", "testcase": false, "constructor": false}, {"identifier": "getBoundVariablesInScope", "parameters": "(final BaseSingleFieldConstraint con)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getBoundVariablesInScope(final BaseSingleFieldConstraint con)", "full_signature": "@Override public List<String> getBoundVariablesInScope(final BaseSingleFieldConstraint con)", "class_method_signature": "BRLRuleModel.getBoundVariablesInScope(final BaseSingleFieldConstraint con)", "testcase": false, "constructor": false}, {"identifier": "isVariableNameUsed", "parameters": "(String s)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isVariableNameUsed(String s)", "full_signature": "@Override public boolean isVariableNameUsed(String s)", "class_method_signature": "BRLRuleModel.isVariableNameUsed(String s)", "testcase": false, "constructor": false}, {"identifier": "getRHSBoundFacts", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getRHSBoundFacts()", "full_signature": "@Override public List<String> getRHSBoundFacts()", "class_method_signature": "BRLRuleModel.getRHSBoundFacts()", "testcase": false, "constructor": false}, {"identifier": "getRHSBoundFact", "parameters": "(final String var)", "modifiers": "@Override public", "return": "ActionInsertFact", "signature": "ActionInsertFact getRHSBoundFact(final String var)", "full_signature": "@Override public ActionInsertFact getRHSBoundFact(final String var)", "class_method_signature": "BRLRuleModel.getRHSBoundFact(final String var)", "testcase": false, "constructor": false}], "file": "drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/BRLRuleModel.java"}, "focal_method": {"identifier": "getAllLHSVariables", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "body": "@Override\n    public List<String> getAllLHSVariables() {\n        return getLHSVariables(true,\n                               true);\n    }", "signature": "List<String> getAllLHSVariables()", "full_signature": "@Override public List<String> getAllLHSVariables()", "class_method_signature": "BRLRuleModel.getAllLHSVariables()", "testcase": false, "constructor": false, "invocations": ["getLHSVariables"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}