{"test_class": {"identifier": "ArrayRandomAccessSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "byte[] data;", "modifier": "", "type": "byte[]", "declarator": "data", "var_name": "data"}], "file": "itext/src/test/java/com/itextpdf/text/io/ArrayRandomAccessSourceTest.java"}, "test_case": {"identifier": "testGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGet() throws Exception {\n\t\tArrayRandomAccessSource s = new ArrayRandomAccessSource(data);\n\t\ttry{\n\t\t\tfor(int i = 0; i < data.length; i++){\n\t\t\t\tint ch = s.get(i);\n\t\t\t\tAssert.assertFalse(ch == -1);\n\t\t\t\tAssert.assertEquals(\"Position \" + i, data[i], (byte)ch);\n\t\t\t}\n\t\t\tAssert.assertEquals(-1, s.get(data.length));\n\t\t} finally {\n\t\t\ts.close();\n\t\t}\n\t}", "signature": "void testGet()", "full_signature": "@Test public void testGet()", "class_method_signature": "ArrayRandomAccessSourceTest.testGet()", "testcase": true, "constructor": false, "invocations": ["get", "assertFalse", "assertEquals", "assertEquals", "get", "close"]}, "focal_class": {"identifier": "ArrayRandomAccessSource", "superclass": "", "interfaces": "implements RandomAccessSource", "fields": [{"original_string": "private byte[] array;", "modifier": "private", "type": "byte[]", "declarator": "array", "var_name": "array"}], "methods": [{"identifier": "ArrayRandomAccessSource", "parameters": "(byte[] array)", "modifiers": "public", "return": "", "signature": " ArrayRandomAccessSource(byte[] array)", "full_signature": "public  ArrayRandomAccessSource(byte[] array)", "class_method_signature": "ArrayRandomAccessSource.ArrayRandomAccessSource(byte[] array)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(long offset)", "modifiers": "public", "return": "int", "signature": "int get(long offset)", "full_signature": "public int get(long offset)", "class_method_signature": "ArrayRandomAccessSource.get(long offset)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(long offset, byte[] bytes, int off, int len)", "modifiers": "public", "return": "int", "signature": "int get(long offset, byte[] bytes, int off, int len)", "full_signature": "public int get(long offset, byte[] bytes, int off, int len)", "class_method_signature": "ArrayRandomAccessSource.get(long offset, byte[] bytes, int off, int len)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long length()", "full_signature": "public long length()", "class_method_signature": "ArrayRandomAccessSource.length()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ArrayRandomAccessSource.close()", "testcase": false, "constructor": false}], "file": "itext/src/main/java/com/itextpdf/text/io/ArrayRandomAccessSource.java"}, "focal_method": {"identifier": "get", "parameters": "(long offset)", "modifiers": "public", "return": "int", "body": "public int get(long offset) {\n\t\tif (offset >= array.length) return -1;\n\t\treturn 0xff & array[(int)offset];\n\t}", "signature": "int get(long offset)", "full_signature": "public int get(long offset)", "class_method_signature": "ArrayRandomAccessSource.get(long offset)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}