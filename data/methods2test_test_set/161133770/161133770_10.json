{"test_class": {"identifier": "BZip2DecompressorTest", "superclass": "", "interfaces": "", "fields": [], "file": "ingestion/src/test/java/feast/ingestion/options/BZip2DecompressorTest.java"}, "test_case": {"identifier": "shouldDecompressBZip2Stream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldDecompressBZip2Stream() throws IOException {\n    BZip2Decompressor<String> decompressor =\n        new BZip2Decompressor<>(\n            inputStream -> {\n              BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n              String output = reader.readLine();\n              reader.close();\n              return output;\n            });\n\n    String originalString = \"abc\";\n    ByteArrayOutputStream compressedStream = new ByteArrayOutputStream();\n    try (BZip2CompressorOutputStream bzip2Output =\n        new BZip2CompressorOutputStream(compressedStream)) {\n      bzip2Output.write(originalString.getBytes());\n    }\n\n    String decompressedString = decompressor.decompress(compressedStream.toByteArray());\n    assertEquals(originalString, decompressedString);\n  }", "signature": "void shouldDecompressBZip2Stream()", "full_signature": "@Test public void shouldDecompressBZip2Stream()", "class_method_signature": "BZip2DecompressorTest.shouldDecompressBZip2Stream()", "testcase": true, "constructor": false, "invocations": ["readLine", "close", "write", "getBytes", "decompress", "toByteArray", "assertEquals"]}, "focal_class": {"identifier": "BZip2Decompressor", "superclass": "", "interfaces": "implements OptionDecompressor<T>", "fields": [{"original_string": "private final InputStreamConverter<T> inputStreamConverter;", "modifier": "private final", "type": "InputStreamConverter<T>", "declarator": "inputStreamConverter", "var_name": "inputStreamConverter"}], "methods": [{"identifier": "BZip2Decompressor", "parameters": "(InputStreamConverter<T> inputStreamConverter)", "modifiers": "public", "return": "", "signature": " BZip2Decompressor(InputStreamConverter<T> inputStreamConverter)", "full_signature": "public  BZip2Decompressor(InputStreamConverter<T> inputStreamConverter)", "class_method_signature": "BZip2Decompressor.BZip2Decompressor(InputStreamConverter<T> inputStreamConverter)", "testcase": false, "constructor": true}, {"identifier": "decompress", "parameters": "(byte[] compressed)", "modifiers": "@Override public", "return": "T", "signature": "T decompress(byte[] compressed)", "full_signature": "@Override public T decompress(byte[] compressed)", "class_method_signature": "BZip2Decompressor.decompress(byte[] compressed)", "testcase": false, "constructor": false}], "file": "ingestion/src/main/java/feast/ingestion/options/BZip2Decompressor.java"}, "focal_method": {"identifier": "decompress", "parameters": "(byte[] compressed)", "modifiers": "@Override public", "return": "T", "body": "@Override\n  public T decompress(byte[] compressed) throws IOException {\n    try (ByteArrayInputStream inputStream = new ByteArrayInputStream(compressed);\n        BZip2CompressorInputStream bzip2Input = new BZip2CompressorInputStream(inputStream)) {\n      return inputStreamConverter.readStream(bzip2Input);\n    }\n  }", "signature": "T decompress(byte[] compressed)", "full_signature": "@Override public T decompress(byte[] compressed)", "class_method_signature": "BZip2Decompressor.decompress(byte[] compressed)", "testcase": false, "constructor": false, "invocations": ["readStream"]}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}