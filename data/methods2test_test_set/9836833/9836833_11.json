{"test_class": {"identifier": "DefaultMutableMessagesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}], "file": "restx-i18n/src/test/java/restx/i18n/DefaultMutableMessagesTest.java"}, "test_case": {"identifier": "should_update_bundle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_update_bundle() throws Exception {\n        final File file = folder.newFile();\n        Files.copy(new File(\"src/test/resources/restx/i18n/test.properties\"), file);\n\n        DefaultMutableMessages m = new DefaultMutableMessages(\"restx.i18n.mtest\") {\n            @Override\n            protected URL getResource(String resourceName) {\n                try {\n                    return file.toURI().toURL();\n                } catch (MalformedURLException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        };\n\n        assertThat(m.getMessage(\"key1\", Locale.ENGLISH)).isEqualTo(\"Hello!\");\n        m.setMessageTemplate(\"key1\", \"Greetings!\", Locale.ENGLISH);\n        assertThat(m.getMessage(\"key1\", Locale.ENGLISH)).isEqualTo(\"Greetings!\");\n\n        assertThat(file).hasContent(\"key1=Greetings!\\nkey2=Hello {{who}}!\");\n    }", "signature": "void should_update_bundle()", "full_signature": "@Test public void should_update_bundle()", "class_method_signature": "DefaultMutableMessagesTest.should_update_bundle()", "testcase": true, "constructor": false, "invocations": ["newFile", "copy", "toURL", "toURI", "isEqualTo", "assertThat", "getMessage", "setMessageTemplate", "isEqualTo", "assertThat", "getMessage", "hasContent", "assertThat"]}, "focal_class": {"identifier": "DefaultMutableMessages", "superclass": "extends DefaultMessages", "interfaces": "implements MutableMessages", "fields": [], "methods": [{"identifier": "DefaultMutableMessages", "parameters": "(String baseName)", "modifiers": "public", "return": "", "signature": " DefaultMutableMessages(String baseName)", "full_signature": "public  DefaultMutableMessages(String baseName)", "class_method_signature": "DefaultMutableMessages.DefaultMutableMessages(String baseName)", "testcase": false, "constructor": true}, {"identifier": "DefaultMutableMessages", "parameters": "(String baseName, Charset charset)", "modifiers": "public", "return": "", "signature": " DefaultMutableMessages(String baseName, Charset charset)", "full_signature": "public  DefaultMutableMessages(String baseName, Charset charset)", "class_method_signature": "DefaultMutableMessages.DefaultMutableMessages(String baseName, Charset charset)", "testcase": false, "constructor": true}, {"identifier": "setMessageTemplate", "parameters": "(String key, String messageTemplate, Locale locale)", "modifiers": "@Override public", "return": "MutableMessages", "signature": "MutableMessages setMessageTemplate(String key, String messageTemplate, Locale locale)", "full_signature": "@Override public MutableMessages setMessageTemplate(String key, String messageTemplate, Locale locale)", "class_method_signature": "DefaultMutableMessages.setMessageTemplate(String key, String messageTemplate, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "newResourceBundle", "parameters": "(final URL resource, Reader input)", "modifiers": "@Override protected", "return": "PropertyResourceBundle", "signature": "PropertyResourceBundle newResourceBundle(final URL resource, Reader input)", "full_signature": "@Override protected PropertyResourceBundle newResourceBundle(final URL resource, Reader input)", "class_method_signature": "DefaultMutableMessages.newResourceBundle(final URL resource, Reader input)", "testcase": false, "constructor": false}, {"identifier": "getTimeToLive", "parameters": "()", "modifiers": "protected", "return": "long", "signature": "long getTimeToLive()", "full_signature": "protected long getTimeToLive()", "class_method_signature": "DefaultMutableMessages.getTimeToLive()", "testcase": false, "constructor": false}, {"identifier": "getResource", "parameters": "(String resourceName)", "modifiers": "protected", "return": "URL", "signature": "URL getResource(String resourceName)", "full_signature": "protected URL getResource(String resourceName)", "class_method_signature": "DefaultMutableMessages.getResource(String resourceName)", "testcase": false, "constructor": false}, {"identifier": "updateProperties", "parameters": "(File file, Charset charset, ImmutableMap<String, String> properties)", "modifiers": "private static", "return": "void", "signature": "void updateProperties(File file, Charset charset, ImmutableMap<String, String> properties)", "full_signature": "private static void updateProperties(File file, Charset charset, ImmutableMap<String, String> properties)", "class_method_signature": "DefaultMutableMessages.updateProperties(File file, Charset charset, ImmutableMap<String, String> properties)", "testcase": false, "constructor": false}], "file": "restx-i18n/src/main/java/restx/i18n/DefaultMutableMessages.java"}, "focal_method": {"identifier": "setMessageTemplate", "parameters": "(String key, String messageTemplate, Locale locale)", "modifiers": "@Override public", "return": "MutableMessages", "body": "@Override\n    public MutableMessages setMessageTemplate(String key, String messageTemplate, Locale locale) throws IOException {\n        Optional<ResourceBundle> b = getBundle(locale);\n        if (!b.isPresent()) {\n            throw new IllegalStateException(\"bundle not found: \" + getBaseName() + \" - \" + locale);\n        }\n        MutablePropertyResourceBundle bundle = (MutablePropertyResourceBundle) b.get();\n        bundle.setMessageTemplate(key, messageTemplate);\n        invalidateCachedKeysFor(locale);\n        return this;\n    }", "signature": "MutableMessages setMessageTemplate(String key, String messageTemplate, Locale locale)", "full_signature": "@Override public MutableMessages setMessageTemplate(String key, String messageTemplate, Locale locale)", "class_method_signature": "DefaultMutableMessages.setMessageTemplate(String key, String messageTemplate, Locale locale)", "testcase": false, "constructor": false, "invocations": ["getBundle", "isPresent", "getBaseName", "get", "setMessageTemplate", "invalidateCachedKeysFor"]}, "repository": {"repo_id": 9836833, "url": "https://github.com/restx/restx", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 433, "size": 7896, "license": "licensed"}}