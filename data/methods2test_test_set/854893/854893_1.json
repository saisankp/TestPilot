{"test_class": {"identifier": "VariableLengthByteArrayCodecTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private BitBuffer buffer;", "modifier": "@Mock\n    private", "type": "BitBuffer", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "@Mock\n    private Resolver resolver;", "modifier": "@Mock\n    private", "type": "Resolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "@Mock\n    private Builder builder;", "modifier": "@Mock\n    private", "type": "Builder", "declarator": "builder", "var_name": "builder"}], "file": "preon-samples/preon-sample-varlength-encoding/src/test/java/org/codehaus/preon/sample/varlength/VariableLengthByteArrayCodecTest.java"}, "test_case": {"identifier": "shouldDecodeMultipleBytes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldDecodeMultipleBytes() throws DecodingException {\n        VariableLengthByteArrayCodec codec = new VariableLengthByteArrayCodec();\n        when(buffer.readAsByte(8)).thenReturn((byte) 0xff).thenReturn((byte) 0x0f);\n        byte[] decoded = codec.decode(buffer, resolver, builder);\n        assertThat(decoded, is(not(nullValue())));\n        assertThat(decoded.length, is(2));\n        verify(buffer, times(2)).readAsByte(8);\n        verifyNoMoreInteractions(buffer, resolver, builder);\n    }", "signature": "void shouldDecodeMultipleBytes()", "full_signature": "@Test public void shouldDecodeMultipleBytes()", "class_method_signature": "VariableLengthByteArrayCodecTest.shouldDecodeMultipleBytes()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "thenReturn", "when", "readAsByte", "decode", "assertThat", "is", "not", "nullValue", "assertThat", "is", "readAsByte", "verify", "times", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "VariableLengthByteArrayCodec", "superclass": "", "interfaces": "implements Codec<byte[]>", "fields": [], "methods": [{"identifier": "decode", "parameters": "(BitBuffer buffer, Resolver resolver, Builder builder)", "modifiers": "public", "return": "byte[]", "signature": "byte[] decode(BitBuffer buffer, Resolver resolver, Builder builder)", "full_signature": "public byte[] decode(BitBuffer buffer, Resolver resolver, Builder builder)", "class_method_signature": "VariableLengthByteArrayCodec.decode(BitBuffer buffer, Resolver resolver, Builder builder)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(byte[] value, BitChannel channel, Resolver resolver)", "modifiers": "public", "return": "void", "signature": "void encode(byte[] value, BitChannel channel, Resolver resolver)", "full_signature": "public void encode(byte[] value, BitChannel channel, Resolver resolver)", "class_method_signature": "VariableLengthByteArrayCodec.encode(byte[] value, BitChannel channel, Resolver resolver)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "Expression<Integer, Resolver>", "signature": "Expression<Integer, Resolver> getSize()", "full_signature": "public Expression<Integer, Resolver> getSize()", "class_method_signature": "VariableLengthByteArrayCodec.getSize()", "testcase": false, "constructor": false}, {"identifier": "getCodecDescriptor", "parameters": "()", "modifiers": "public", "return": "CodecDescriptor", "signature": "CodecDescriptor getCodecDescriptor()", "full_signature": "public CodecDescriptor getCodecDescriptor()", "class_method_signature": "VariableLengthByteArrayCodec.getCodecDescriptor()", "testcase": false, "constructor": false}, {"identifier": "getTypes", "parameters": "()", "modifiers": "public", "return": "Class<?>[]", "signature": "Class<?>[] getTypes()", "full_signature": "public Class<?>[] getTypes()", "class_method_signature": "VariableLengthByteArrayCodec.getTypes()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getType()", "full_signature": "public Class<?> getType()", "class_method_signature": "VariableLengthByteArrayCodec.getType()", "testcase": false, "constructor": false}], "file": "preon-samples/preon-sample-varlength-encoding/src/main/java/org/codehaus/preon/sample/varlength/VariableLengthByteArrayCodec.java"}, "focal_method": {"identifier": "decode", "parameters": "(BitBuffer buffer, Resolver resolver, Builder builder)", "modifiers": "public", "return": "byte[]", "body": "public byte[] decode(BitBuffer buffer, Resolver resolver, Builder builder) throws DecodingException {\n        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        boolean cont = true;\n        while (cont) {\n            byte b = buffer.readAsByte(8);\n            bout.write(b);\n            cont = (b & (1 << 7)) > 0;\n        }\n        return bout.toByteArray();\n    }", "signature": "byte[] decode(BitBuffer buffer, Resolver resolver, Builder builder)", "full_signature": "public byte[] decode(BitBuffer buffer, Resolver resolver, Builder builder)", "class_method_signature": "VariableLengthByteArrayCodec.decode(BitBuffer buffer, Resolver resolver, Builder builder)", "testcase": false, "constructor": false, "invocations": ["readAsByte", "write", "toByteArray"]}, "repository": {"repo_id": 854893, "url": "https://github.com/preon/preon", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 155, "size": 2459, "license": "licensed"}}