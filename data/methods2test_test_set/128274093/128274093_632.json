{"test_class": {"identifier": "ParallelFlowableTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/parallel/ParallelFlowableTest.java"}, "test_case": {"identifier": "doOnSubscribe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doOnSubscribe() {\n        final int[] count = { 0 };\n\n        Flowable.range(1, 5)\n        .parallel(2)\n        .doOnSubscribe(new Consumer<Subscription>() {\n            @Override\n            public void accept(Subscription s) throws Exception {\n                count[0]++;\n            }\n        })\n        .sequential()\n        .test()\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(2, count[0]);\n    }", "signature": "void doOnSubscribe()", "full_signature": "@Test public void doOnSubscribe()", "class_method_signature": "ParallelFlowableTest.doOnSubscribe()", "testcase": true, "constructor": false, "invocations": ["assertResult", "test", "sequential", "doOnSubscribe", "parallel", "range", "assertEquals"]}, "focal_class": {"identifier": "ParallelFlowable", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "subscribe", "parameters": "(@NonNull Subscriber<? super T>[] subscribers)", "modifiers": "public abstract", "return": "void", "signature": "void subscribe(@NonNull Subscriber<? super T>[] subscribers)", "full_signature": "public abstract void subscribe(@NonNull Subscriber<? super T>[] subscribers)", "class_method_signature": "ParallelFlowable.subscribe(@NonNull Subscriber<? super T>[] subscribers)", "testcase": false, "constructor": false}, {"identifier": "parallelism", "parameters": "()", "modifiers": "public abstract", "return": "int", "signature": "int parallelism()", "full_signature": "public abstract int parallelism()", "class_method_signature": "ParallelFlowable.parallelism()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(@NonNull Subscriber<?>[] subscribers)", "modifiers": "protected final", "return": "boolean", "signature": "boolean validate(@NonNull Subscriber<?>[] subscribers)", "full_signature": "protected final boolean validate(@NonNull Subscriber<?>[] subscribers)", "class_method_signature": "ParallelFlowable.validate(@NonNull Subscriber<?>[] subscribers)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(@NonNull Publisher<? extends T> source)", "modifiers": "@CheckReturnValue public static", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> from(@NonNull Publisher<? extends T> source)", "full_signature": "@CheckReturnValue public static ParallelFlowable<T> from(@NonNull Publisher<? extends T> source)", "class_method_signature": "ParallelFlowable.from(@NonNull Publisher<? extends T> source)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(@NonNull Publisher<? extends T> source, int parallelism)", "modifiers": "@CheckReturnValue public static", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> from(@NonNull Publisher<? extends T> source, int parallelism)", "full_signature": "@CheckReturnValue public static ParallelFlowable<T> from(@NonNull Publisher<? extends T> source, int parallelism)", "class_method_signature": "ParallelFlowable.from(@NonNull Publisher<? extends T> source, int parallelism)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(@NonNull Publisher<? extends T> source,\n            int parallelism, int prefetch)", "modifiers": "@CheckReturnValue @NonNull public static", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> from(@NonNull Publisher<? extends T> source,\n            int parallelism, int prefetch)", "full_signature": "@CheckReturnValue @NonNull public static ParallelFlowable<T> from(@NonNull Publisher<? extends T> source,\n            int parallelism, int prefetch)", "class_method_signature": "ParallelFlowable.from(@NonNull Publisher<? extends T> source,\n            int parallelism, int prefetch)", "testcase": false, "constructor": false}, {"identifier": "as", "parameters": "(@NonNull ParallelFlowableConverter<T, R> converter)", "modifiers": "@Experimental @CheckReturnValue @NonNull public final", "return": "R", "signature": "R as(@NonNull ParallelFlowableConverter<T, R> converter)", "full_signature": "@Experimental @CheckReturnValue @NonNull public final R as(@NonNull ParallelFlowableConverter<T, R> converter)", "class_method_signature": "ParallelFlowable.as(@NonNull ParallelFlowableConverter<T, R> converter)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(@NonNull Function<? super T, ? extends R> mapper)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<R>", "signature": "ParallelFlowable<R> map(@NonNull Function<? super T, ? extends R> mapper)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<R> map(@NonNull Function<? super T, ? extends R> mapper)", "class_method_signature": "ParallelFlowable.map(@NonNull Function<? super T, ? extends R> mapper)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(@NonNull Function<? super T, ? extends R> mapper, @NonNull ParallelFailureHandling errorHandler)", "modifiers": "@CheckReturnValue @Experimental @NonNull public final", "return": "ParallelFlowable<R>", "signature": "ParallelFlowable<R> map(@NonNull Function<? super T, ? extends R> mapper, @NonNull ParallelFailureHandling errorHandler)", "full_signature": "@CheckReturnValue @Experimental @NonNull public final ParallelFlowable<R> map(@NonNull Function<? super T, ? extends R> mapper, @NonNull ParallelFailureHandling errorHandler)", "class_method_signature": "ParallelFlowable.map(@NonNull Function<? super T, ? extends R> mapper, @NonNull ParallelFailureHandling errorHandler)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(@NonNull Function<? super T, ? extends R> mapper, @NonNull BiFunction<? super Long, ? super Throwable, ParallelFailureHandling> errorHandler)", "modifiers": "@CheckReturnValue @Experimental @NonNull public final", "return": "ParallelFlowable<R>", "signature": "ParallelFlowable<R> map(@NonNull Function<? super T, ? extends R> mapper, @NonNull BiFunction<? super Long, ? super Throwable, ParallelFailureHandling> errorHandler)", "full_signature": "@CheckReturnValue @Experimental @NonNull public final ParallelFlowable<R> map(@NonNull Function<? super T, ? extends R> mapper, @NonNull BiFunction<? super Long, ? super Throwable, ParallelFailureHandling> errorHandler)", "class_method_signature": "ParallelFlowable.map(@NonNull Function<? super T, ? extends R> mapper, @NonNull BiFunction<? super Long, ? super Throwable, ParallelFailureHandling> errorHandler)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(@NonNull Predicate<? super T> predicate)", "modifiers": "@CheckReturnValue public final", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> filter(@NonNull Predicate<? super T> predicate)", "full_signature": "@CheckReturnValue public final ParallelFlowable<T> filter(@NonNull Predicate<? super T> predicate)", "class_method_signature": "ParallelFlowable.filter(@NonNull Predicate<? super T> predicate)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(@NonNull Predicate<? super T> predicate, @NonNull ParallelFailureHandling errorHandler)", "modifiers": "@CheckReturnValue @Experimental public final", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> filter(@NonNull Predicate<? super T> predicate, @NonNull ParallelFailureHandling errorHandler)", "full_signature": "@CheckReturnValue @Experimental public final ParallelFlowable<T> filter(@NonNull Predicate<? super T> predicate, @NonNull ParallelFailureHandling errorHandler)", "class_method_signature": "ParallelFlowable.filter(@NonNull Predicate<? super T> predicate, @NonNull ParallelFailureHandling errorHandler)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(@NonNull Predicate<? super T> predicate, @NonNull BiFunction<? super Long, ? super Throwable, ParallelFailureHandling> errorHandler)", "modifiers": "@CheckReturnValue @Experimental public final", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> filter(@NonNull Predicate<? super T> predicate, @NonNull BiFunction<? super Long, ? super Throwable, ParallelFailureHandling> errorHandler)", "full_signature": "@CheckReturnValue @Experimental public final ParallelFlowable<T> filter(@NonNull Predicate<? super T> predicate, @NonNull BiFunction<? super Long, ? super Throwable, ParallelFailureHandling> errorHandler)", "class_method_signature": "ParallelFlowable.filter(@NonNull Predicate<? super T> predicate, @NonNull BiFunction<? super Long, ? super Throwable, ParallelFailureHandling> errorHandler)", "testcase": false, "constructor": false}, {"identifier": "runOn", "parameters": "(@NonNull Scheduler scheduler)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> runOn(@NonNull Scheduler scheduler)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<T> runOn(@NonNull Scheduler scheduler)", "class_method_signature": "ParallelFlowable.runOn(@NonNull Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "runOn", "parameters": "(@NonNull Scheduler scheduler, int prefetch)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> runOn(@NonNull Scheduler scheduler, int prefetch)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<T> runOn(@NonNull Scheduler scheduler, int prefetch)", "class_method_signature": "ParallelFlowable.runOn(@NonNull Scheduler scheduler, int prefetch)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(@NonNull BiFunction<T, T, T> reducer)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "Flowable<T>", "signature": "Flowable<T> reduce(@NonNull BiFunction<T, T, T> reducer)", "full_signature": "@CheckReturnValue @NonNull public final Flowable<T> reduce(@NonNull BiFunction<T, T, T> reducer)", "class_method_signature": "ParallelFlowable.reduce(@NonNull BiFunction<T, T, T> reducer)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(@NonNull Callable<R> initialSupplier, @NonNull BiFunction<R, ? super T, R> reducer)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<R>", "signature": "ParallelFlowable<R> reduce(@NonNull Callable<R> initialSupplier, @NonNull BiFunction<R, ? super T, R> reducer)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<R> reduce(@NonNull Callable<R> initialSupplier, @NonNull BiFunction<R, ? super T, R> reducer)", "class_method_signature": "ParallelFlowable.reduce(@NonNull Callable<R> initialSupplier, @NonNull BiFunction<R, ? super T, R> reducer)", "testcase": false, "constructor": false}, {"identifier": "sequential", "parameters": "()", "modifiers": "@BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) @CheckReturnValue public final", "return": "Flowable<T>", "signature": "Flowable<T> sequential()", "full_signature": "@BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) @CheckReturnValue public final Flowable<T> sequential()", "class_method_signature": "ParallelFlowable.sequential()", "testcase": false, "constructor": false}, {"identifier": "sequential", "parameters": "(int prefetch)", "modifiers": "@BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) @CheckReturnValue @NonNull public final", "return": "Flowable<T>", "signature": "Flowable<T> sequential(int prefetch)", "full_signature": "@BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) @CheckReturnValue @NonNull public final Flowable<T> sequential(int prefetch)", "class_method_signature": "ParallelFlowable.sequential(int prefetch)", "testcase": false, "constructor": false}, {"identifier": "sequentialDelayError", "parameters": "()", "modifiers": "@BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) @CheckReturnValue @Experimental @NonNull public final", "return": "Flowable<T>", "signature": "Flowable<T> sequentialDelayError()", "full_signature": "@BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) @CheckReturnValue @Experimental @NonNull public final Flowable<T> sequentialDelayError()", "class_method_signature": "ParallelFlowable.sequentialDelayError()", "testcase": false, "constructor": false}, {"identifier": "sequentialDelayError", "parameters": "(int prefetch)", "modifiers": "@BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) @CheckReturnValue @NonNull public final", "return": "Flowable<T>", "signature": "Flowable<T> sequentialDelayError(int prefetch)", "full_signature": "@BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) @CheckReturnValue @NonNull public final Flowable<T> sequentialDelayError(int prefetch)", "class_method_signature": "ParallelFlowable.sequentialDelayError(int prefetch)", "testcase": false, "constructor": false}, {"identifier": "sorted", "parameters": "(@NonNull Comparator<? super T> comparator)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "Flowable<T>", "signature": "Flowable<T> sorted(@NonNull Comparator<? super T> comparator)", "full_signature": "@CheckReturnValue @NonNull public final Flowable<T> sorted(@NonNull Comparator<? super T> comparator)", "class_method_signature": "ParallelFlowable.sorted(@NonNull Comparator<? super T> comparator)", "testcase": false, "constructor": false}, {"identifier": "sorted", "parameters": "(@NonNull Comparator<? super T> comparator, int capacityHint)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "Flowable<T>", "signature": "Flowable<T> sorted(@NonNull Comparator<? super T> comparator, int capacityHint)", "full_signature": "@CheckReturnValue @NonNull public final Flowable<T> sorted(@NonNull Comparator<? super T> comparator, int capacityHint)", "class_method_signature": "ParallelFlowable.sorted(@NonNull Comparator<? super T> comparator, int capacityHint)", "testcase": false, "constructor": false}, {"identifier": "toSortedList", "parameters": "(@NonNull Comparator<? super T> comparator)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "Flowable<List<T>>", "signature": "Flowable<List<T>> toSortedList(@NonNull Comparator<? super T> comparator)", "full_signature": "@CheckReturnValue @NonNull public final Flowable<List<T>> toSortedList(@NonNull Comparator<? super T> comparator)", "class_method_signature": "ParallelFlowable.toSortedList(@NonNull Comparator<? super T> comparator)", "testcase": false, "constructor": false}, {"identifier": "toSortedList", "parameters": "(@NonNull Comparator<? super T> comparator, int capacityHint)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "Flowable<List<T>>", "signature": "Flowable<List<T>> toSortedList(@NonNull Comparator<? super T> comparator, int capacityHint)", "full_signature": "@CheckReturnValue @NonNull public final Flowable<List<T>> toSortedList(@NonNull Comparator<? super T> comparator, int capacityHint)", "class_method_signature": "ParallelFlowable.toSortedList(@NonNull Comparator<? super T> comparator, int capacityHint)", "testcase": false, "constructor": false}, {"identifier": "doOnNext", "parameters": "(@NonNull Consumer<? super T> onNext)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> doOnNext(@NonNull Consumer<? super T> onNext)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<T> doOnNext(@NonNull Consumer<? super T> onNext)", "class_method_signature": "ParallelFlowable.doOnNext(@NonNull Consumer<? super T> onNext)", "testcase": false, "constructor": false}, {"identifier": "doOnNext", "parameters": "(@NonNull Consumer<? super T> onNext, @NonNull ParallelFailureHandling errorHandler)", "modifiers": "@CheckReturnValue @Experimental @NonNull public final", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> doOnNext(@NonNull Consumer<? super T> onNext, @NonNull ParallelFailureHandling errorHandler)", "full_signature": "@CheckReturnValue @Experimental @NonNull public final ParallelFlowable<T> doOnNext(@NonNull Consumer<? super T> onNext, @NonNull ParallelFailureHandling errorHandler)", "class_method_signature": "ParallelFlowable.doOnNext(@NonNull Consumer<? super T> onNext, @NonNull ParallelFailureHandling errorHandler)", "testcase": false, "constructor": false}, {"identifier": "doOnNext", "parameters": "(@NonNull Consumer<? super T> onNext, @NonNull BiFunction<? super Long, ? super Throwable, ParallelFailureHandling> errorHandler)", "modifiers": "@CheckReturnValue @Experimental @NonNull public final", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> doOnNext(@NonNull Consumer<? super T> onNext, @NonNull BiFunction<? super Long, ? super Throwable, ParallelFailureHandling> errorHandler)", "full_signature": "@CheckReturnValue @Experimental @NonNull public final ParallelFlowable<T> doOnNext(@NonNull Consumer<? super T> onNext, @NonNull BiFunction<? super Long, ? super Throwable, ParallelFailureHandling> errorHandler)", "class_method_signature": "ParallelFlowable.doOnNext(@NonNull Consumer<? super T> onNext, @NonNull BiFunction<? super Long, ? super Throwable, ParallelFailureHandling> errorHandler)", "testcase": false, "constructor": false}, {"identifier": "doAfterNext", "parameters": "(@NonNull Consumer<? super T> onAfterNext)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> doAfterNext(@NonNull Consumer<? super T> onAfterNext)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<T> doAfterNext(@NonNull Consumer<? super T> onAfterNext)", "class_method_signature": "ParallelFlowable.doAfterNext(@NonNull Consumer<? super T> onAfterNext)", "testcase": false, "constructor": false}, {"identifier": "doOnError", "parameters": "(@NonNull Consumer<Throwable> onError)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> doOnError(@NonNull Consumer<Throwable> onError)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<T> doOnError(@NonNull Consumer<Throwable> onError)", "class_method_signature": "ParallelFlowable.doOnError(@NonNull Consumer<Throwable> onError)", "testcase": false, "constructor": false}, {"identifier": "doOnComplete", "parameters": "(@NonNull Action onComplete)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> doOnComplete(@NonNull Action onComplete)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<T> doOnComplete(@NonNull Action onComplete)", "class_method_signature": "ParallelFlowable.doOnComplete(@NonNull Action onComplete)", "testcase": false, "constructor": false}, {"identifier": "doAfterTerminated", "parameters": "(@NonNull Action onAfterTerminate)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> doAfterTerminated(@NonNull Action onAfterTerminate)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<T> doAfterTerminated(@NonNull Action onAfterTerminate)", "class_method_signature": "ParallelFlowable.doAfterTerminated(@NonNull Action onAfterTerminate)", "testcase": false, "constructor": false}, {"identifier": "doOnSubscribe", "parameters": "(@NonNull Consumer<? super Subscription> onSubscribe)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> doOnSubscribe(@NonNull Consumer<? super Subscription> onSubscribe)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<T> doOnSubscribe(@NonNull Consumer<? super Subscription> onSubscribe)", "class_method_signature": "ParallelFlowable.doOnSubscribe(@NonNull Consumer<? super Subscription> onSubscribe)", "testcase": false, "constructor": false}, {"identifier": "doOnRequest", "parameters": "(@NonNull LongConsumer onRequest)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> doOnRequest(@NonNull LongConsumer onRequest)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<T> doOnRequest(@NonNull LongConsumer onRequest)", "class_method_signature": "ParallelFlowable.doOnRequest(@NonNull LongConsumer onRequest)", "testcase": false, "constructor": false}, {"identifier": "doOnCancel", "parameters": "(@NonNull Action onCancel)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> doOnCancel(@NonNull Action onCancel)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<T> doOnCancel(@NonNull Action onCancel)", "class_method_signature": "ParallelFlowable.doOnCancel(@NonNull Action onCancel)", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(@NonNull Callable<? extends C> collectionSupplier, @NonNull BiConsumer<? super C, ? super T> collector)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<C>", "signature": "ParallelFlowable<C> collect(@NonNull Callable<? extends C> collectionSupplier, @NonNull BiConsumer<? super C, ? super T> collector)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<C> collect(@NonNull Callable<? extends C> collectionSupplier, @NonNull BiConsumer<? super C, ? super T> collector)", "class_method_signature": "ParallelFlowable.collect(@NonNull Callable<? extends C> collectionSupplier, @NonNull BiConsumer<? super C, ? super T> collector)", "testcase": false, "constructor": false}, {"identifier": "fromArray", "parameters": "(@NonNull Publisher<T>... publishers)", "modifiers": "@CheckReturnValue @NonNull public static", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> fromArray(@NonNull Publisher<T>... publishers)", "full_signature": "@CheckReturnValue @NonNull public static ParallelFlowable<T> fromArray(@NonNull Publisher<T>... publishers)", "class_method_signature": "ParallelFlowable.fromArray(@NonNull Publisher<T>... publishers)", "testcase": false, "constructor": false}, {"identifier": "to", "parameters": "(@NonNull Function<? super ParallelFlowable<T>, U> converter)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "U", "signature": "U to(@NonNull Function<? super ParallelFlowable<T>, U> converter)", "full_signature": "@CheckReturnValue @NonNull public final U to(@NonNull Function<? super ParallelFlowable<T>, U> converter)", "class_method_signature": "ParallelFlowable.to(@NonNull Function<? super ParallelFlowable<T>, U> converter)", "testcase": false, "constructor": false}, {"identifier": "compose", "parameters": "(@NonNull ParallelTransformer<T, U> composer)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<U>", "signature": "ParallelFlowable<U> compose(@NonNull ParallelTransformer<T, U> composer)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<U> compose(@NonNull ParallelTransformer<T, U> composer)", "class_method_signature": "ParallelFlowable.compose(@NonNull ParallelTransformer<T, U> composer)", "testcase": false, "constructor": false}, {"identifier": "flatMap", "parameters": "(@NonNull Function<? super T, ? extends Publisher<? extends R>> mapper)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<R>", "signature": "ParallelFlowable<R> flatMap(@NonNull Function<? super T, ? extends Publisher<? extends R>> mapper)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<R> flatMap(@NonNull Function<? super T, ? extends Publisher<? extends R>> mapper)", "class_method_signature": "ParallelFlowable.flatMap(@NonNull Function<? super T, ? extends Publisher<? extends R>> mapper)", "testcase": false, "constructor": false}, {"identifier": "flatMap", "parameters": "(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper, boolean delayError)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<R>", "signature": "ParallelFlowable<R> flatMap(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper, boolean delayError)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<R> flatMap(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper, boolean delayError)", "class_method_signature": "ParallelFlowable.flatMap(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper, boolean delayError)", "testcase": false, "constructor": false}, {"identifier": "flatMap", "parameters": "(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper, boolean delayError, int maxConcurrency)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<R>", "signature": "ParallelFlowable<R> flatMap(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper, boolean delayError, int maxConcurrency)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<R> flatMap(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper, boolean delayError, int maxConcurrency)", "class_method_signature": "ParallelFlowable.flatMap(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper, boolean delayError, int maxConcurrency)", "testcase": false, "constructor": false}, {"identifier": "flatMap", "parameters": "(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,\n            boolean delayError, int maxConcurrency, int prefetch)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<R>", "signature": "ParallelFlowable<R> flatMap(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,\n            boolean delayError, int maxConcurrency, int prefetch)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<R> flatMap(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,\n            boolean delayError, int maxConcurrency, int prefetch)", "class_method_signature": "ParallelFlowable.flatMap(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,\n            boolean delayError, int maxConcurrency, int prefetch)", "testcase": false, "constructor": false}, {"identifier": "concatMap", "parameters": "(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<R>", "signature": "ParallelFlowable<R> concatMap(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<R> concatMap(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper)", "class_method_signature": "ParallelFlowable.concatMap(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper)", "testcase": false, "constructor": false}, {"identifier": "concatMap", "parameters": "(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,\n                    int prefetch)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<R>", "signature": "ParallelFlowable<R> concatMap(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,\n                    int prefetch)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<R> concatMap(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,\n                    int prefetch)", "class_method_signature": "ParallelFlowable.concatMap(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,\n                    int prefetch)", "testcase": false, "constructor": false}, {"identifier": "concatMapDelayError", "parameters": "(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,\n                    boolean tillTheEnd)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<R>", "signature": "ParallelFlowable<R> concatMapDelayError(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,\n                    boolean tillTheEnd)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<R> concatMapDelayError(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,\n                    boolean tillTheEnd)", "class_method_signature": "ParallelFlowable.concatMapDelayError(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,\n                    boolean tillTheEnd)", "testcase": false, "constructor": false}, {"identifier": "concatMapDelayError", "parameters": "(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,\n                    int prefetch, boolean tillTheEnd)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<R>", "signature": "ParallelFlowable<R> concatMapDelayError(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,\n                    int prefetch, boolean tillTheEnd)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<R> concatMapDelayError(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,\n                    int prefetch, boolean tillTheEnd)", "class_method_signature": "ParallelFlowable.concatMapDelayError(\n            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,\n                    int prefetch, boolean tillTheEnd)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/parallel/ParallelFlowable.java"}, "focal_method": {"identifier": "doOnSubscribe", "parameters": "(@NonNull Consumer<? super Subscription> onSubscribe)", "modifiers": "@CheckReturnValue @NonNull public final", "return": "ParallelFlowable<T>", "body": "@CheckReturnValue\n    @NonNull\n    public final ParallelFlowable<T> doOnSubscribe(@NonNull Consumer<? super Subscription> onSubscribe) {\n        ObjectHelper.requireNonNull(onSubscribe, \"onSubscribe is null\");\n        return RxJavaPlugins.onAssembly(new ParallelPeek<T>(this,\n                Functions.emptyConsumer(),\n                Functions.emptyConsumer(),\n                Functions.emptyConsumer(),\n                Functions.EMPTY_ACTION,\n                Functions.EMPTY_ACTION,\n                onSubscribe,\n                Functions.EMPTY_LONG_CONSUMER,\n                Functions.EMPTY_ACTION\n                ));\n    }", "signature": "ParallelFlowable<T> doOnSubscribe(@NonNull Consumer<? super Subscription> onSubscribe)", "full_signature": "@CheckReturnValue @NonNull public final ParallelFlowable<T> doOnSubscribe(@NonNull Consumer<? super Subscription> onSubscribe)", "class_method_signature": "ParallelFlowable.doOnSubscribe(@NonNull Consumer<? super Subscription> onSubscribe)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "onAssembly", "emptyConsumer", "emptyConsumer", "emptyConsumer"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}