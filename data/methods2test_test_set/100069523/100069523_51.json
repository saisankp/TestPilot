{"test_class": {"identifier": "MicroSvgParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "com.sandpolis.viewer.lifegem/src/test/java/com/sandpolis/viewer/lifegem/common/MicroSvgParserTest.java"}, "test_case": {"identifier": "readSvg_1", "parameters": "()", "modifiers": "@Test @DisplayName(\"Test a simple SVG\")", "return": "void", "body": "@Test\n\t@DisplayName(\"Test a simple SVG\")\n\tvoid readSvg_1() throws Exception {\n\t\tInputStream in = new ByteArrayInputStream(\n\t\t\t\t\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\"><g>\\n        <path fill=\\\"none\\\" d=\\\"M0 0h24v24H0z\\\"/>\\n        <path d=\\\"M3 4h18v2H3V4zm0 7h18v2H3v-2zm0 7h18v2H3v-2z\\\"/>\\n    </g>\\n</svg>\"\n\t\t\t\t\t\t.getBytes());\n\n\t\tGroup svg = readSvg(in, new SimpleDoubleProperty(64), new SimpleDoubleProperty(64),\n\t\t\t\tnew SimpleObjectProperty<Paint>(null));\n\n\t\tassertNotNull(svg);\n\t\tassertEquals(64, svg.getBoundsInParent().getWidth());\n\t\tassertEquals(64, svg.getBoundsInParent().getHeight());\n\t\tassertEquals(2, svg.getChildren().size());\n\t\tassertEquals(\"M0 0h24v24H0z\", ((SVGPath) svg.getChildren().get(0)).getContent());\n\t\tassertEquals(\"M3 4h18v2H3V4zm0 7h18v2H3v-2zm0 7h18v2H3v-2z\", ((SVGPath) svg.getChildren().get(1)).getContent());\n\t}", "signature": "void readSvg_1()", "full_signature": "@Test @DisplayName(\"Test a simple SVG\") void readSvg_1()", "class_method_signature": "MicroSvgParserTest.readSvg_1()", "testcase": true, "constructor": false, "invocations": ["getBytes", "readSvg", "assertNotNull", "assertEquals", "getWidth", "getBoundsInParent", "assertEquals", "getHeight", "getBoundsInParent", "assertEquals", "size", "getChildren", "assertEquals", "getContent", "get", "getChildren", "assertEquals", "getContent", "get", "getChildren"]}, "focal_class": {"identifier": "MicroSvgParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(MicroSvgParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(MicroSvgParser.class)", "var_name": "log"}], "methods": [{"identifier": "getSvg", "parameters": "(String url, DoubleProperty svgWidth, DoubleProperty svgHeight,\n\t\t\tObjectProperty<Paint> svgFill)", "modifiers": "public static", "return": "Node", "signature": "Node getSvg(String url, DoubleProperty svgWidth, DoubleProperty svgHeight,\n\t\t\tObjectProperty<Paint> svgFill)", "full_signature": "public static Node getSvg(String url, DoubleProperty svgWidth, DoubleProperty svgHeight,\n\t\t\tObjectProperty<Paint> svgFill)", "class_method_signature": "MicroSvgParser.getSvg(String url, DoubleProperty svgWidth, DoubleProperty svgHeight,\n\t\t\tObjectProperty<Paint> svgFill)", "testcase": false, "constructor": false}, {"identifier": "readSvg", "parameters": "(InputStream in, DoubleProperty svgWidth, DoubleProperty svgHeight,\n\t\t\tObjectProperty<Paint> svgFill)", "modifiers": "static", "return": "Group", "signature": "Group readSvg(InputStream in, DoubleProperty svgWidth, DoubleProperty svgHeight,\n\t\t\tObjectProperty<Paint> svgFill)", "full_signature": "static Group readSvg(InputStream in, DoubleProperty svgWidth, DoubleProperty svgHeight,\n\t\t\tObjectProperty<Paint> svgFill)", "class_method_signature": "MicroSvgParser.readSvg(InputStream in, DoubleProperty svgWidth, DoubleProperty svgHeight,\n\t\t\tObjectProperty<Paint> svgFill)", "testcase": false, "constructor": false}], "file": "com.sandpolis.viewer.lifegem/src/main/java/com/sandpolis/viewer/lifegem/common/MicroSvgParser.java"}, "focal_method": {"identifier": "readSvg", "parameters": "(InputStream in, DoubleProperty svgWidth, DoubleProperty svgHeight,\n\t\t\tObjectProperty<Paint> svgFill)", "modifiers": "static", "return": "Group", "body": "static Group readSvg(InputStream in, DoubleProperty svgWidth, DoubleProperty svgHeight,\n\t\t\tObjectProperty<Paint> svgFill) throws Exception {\n\n\t\tNodeList paths = (NodeList) XPathFactory.newDefaultInstance().newXPath().evaluate(\"/svg/g/path\",\n\t\t\t\tDocumentBuilderFactory.newInstance().newDocumentBuilder().parse(in), XPathConstants.NODESET);\n\n\t\tGroup group = new Group();\n\t\tfor (int i = 0; i < paths.getLength(); i++) {\n\t\t\tNamedNodeMap attributes = paths.item(i).getAttributes();\n\n\t\t\tSVGPath path = new SVGPath();\n\n\t\t\tvar fill = attributes.getNamedItem(\"fill\");\n\t\t\tif (fill != null)\n\t\t\t\tpath.setFill(fill.getTextContent().equals(\"none\") ? Color.TRANSPARENT\n\t\t\t\t\t\t: Paint.valueOf(fill.getTextContent()));\n\t\t\telse if (svgFill.get() != null)\n\t\t\t\tpath.setFill(svgFill.get());\n\n\t\t\tvar fillRule = attributes.getNamedItem(\"fill-rule\");\n\t\t\tif (fillRule != null)\n\t\t\t\tswitch (fillRule.getTextContent()) {\n\t\t\t\tcase \"evenodd\":\n\t\t\t\t\tpath.setFillRule(FillRule.EVEN_ODD);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"nonzero\":\n\t\t\t\t\tpath.setFillRule(FillRule.NON_ZERO);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlog.warn(\"Unknown fill-rule: \" + fillRule.getTextContent());\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\tvar d = attributes.getNamedItem(\"d\");\n\t\t\tif (d != null)\n\t\t\t\tpath.setContent(d.getTextContent());\n\n\t\t\tvar style = attributes.getNamedItem(\"style\");\n\t\t\tif (style != null)\n\t\t\t\tpath.setStyle(style.getTextContent());\n\n\t\t\tgroup.getChildren().add(path);\n\t\t}\n\n\t\tgroup.scaleXProperty().bind(Bindings.divide(svgWidth, group.getBoundsInParent().getWidth()));\n\t\tgroup.scaleYProperty().bind(Bindings.divide(svgHeight, group.getBoundsInParent().getHeight()));\n\n\t\treturn group;\n\t}", "signature": "Group readSvg(InputStream in, DoubleProperty svgWidth, DoubleProperty svgHeight,\n\t\t\tObjectProperty<Paint> svgFill)", "full_signature": "static Group readSvg(InputStream in, DoubleProperty svgWidth, DoubleProperty svgHeight,\n\t\t\tObjectProperty<Paint> svgFill)", "class_method_signature": "MicroSvgParser.readSvg(InputStream in, DoubleProperty svgWidth, DoubleProperty svgHeight,\n\t\t\tObjectProperty<Paint> svgFill)", "testcase": false, "constructor": false, "invocations": ["evaluate", "newXPath", "newDefaultInstance", "parse", "newDocumentBuilder", "newInstance", "getLength", "getAttributes", "item", "getNamedItem", "setFill", "equals", "getTextContent", "valueOf", "getTextContent", "get", "setFill", "get", "getNamedItem", "getTextContent", "setFillRule", "setFillRule", "warn", "getTextContent", "getNamedItem", "setContent", "getTextContent", "getNamedItem", "setStyle", "getTextContent", "add", "getChildren", "bind", "scaleXProperty", "divide", "getWidth", "getBoundsInParent", "bind", "scaleYProperty", "divide", "getHeight", "getBoundsInParent"]}, "repository": {"repo_id": 100069523, "url": "https://github.com/Subterranean-Security/Sandpolis", "stars": 25, "created": "8/11/2017 8:55:30 PM +00:00", "updates": "2020-01-27T01:41:01+00:00", "fork": "False", "license": "licensed"}}