{"test_class": {"identifier": "ValueWrapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/runner/model/ValueWrapperTest.java"}, "test_case": {"identifier": "orElseGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void orElseGet() {\n        assertEquals((Integer) 1, ValueWrapper.of(1).orElseGet(() -> 3));\n        assertEquals(3, ValueWrapper.errorWithValidValue(null, null).orElseGet(() -> 3));\n        assertNull(ValueWrapper.of(null).orElseGet(() -> 3));\n    }", "signature": "void orElseGet()", "full_signature": "@Test public void orElseGet()", "class_method_signature": "ValueWrapperTest.orElseGet()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "orElseGet", "of", "assertEquals", "orElseGet", "errorWithValidValue", "assertNull", "orElseGet", "of"]}, "focal_class": {"identifier": "ValueWrapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final boolean valid;", "modifier": "private final", "type": "boolean", "declarator": "valid", "var_name": "valid"}, {"original_string": "private final T value;", "modifier": "private final", "type": "T", "declarator": "value", "var_name": "value"}, {"original_string": "private final T expected;", "modifier": "private final", "type": "T", "declarator": "expected", "var_name": "expected"}, {"original_string": "private final String errorMessage;", "modifier": "private final", "type": "String", "declarator": "errorMessage", "var_name": "errorMessage"}], "methods": [{"identifier": "ValueWrapper", "parameters": "(T value, T expected, boolean valid, String errorMessage)", "modifiers": "private", "return": "", "signature": " ValueWrapper(T value, T expected, boolean valid, String errorMessage)", "full_signature": "private  ValueWrapper(T value, T expected, boolean valid, String errorMessage)", "class_method_signature": "ValueWrapper.ValueWrapper(T value, T expected, boolean valid, String errorMessage)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(T value)", "modifiers": "public static", "return": "ValueWrapper<T>", "signature": "ValueWrapper<T> of(T value)", "full_signature": "public static ValueWrapper<T> of(T value)", "class_method_signature": "ValueWrapper.of(T value)", "testcase": false, "constructor": false}, {"identifier": "errorWithValidValue", "parameters": "(T value, T expected)", "modifiers": "public static", "return": "ValueWrapper<T>", "signature": "ValueWrapper<T> errorWithValidValue(T value, T expected)", "full_signature": "public static ValueWrapper<T> errorWithValidValue(T value, T expected)", "class_method_signature": "ValueWrapper.errorWithValidValue(T value, T expected)", "testcase": false, "constructor": false}, {"identifier": "errorWithMessage", "parameters": "(String message)", "modifiers": "public static", "return": "ValueWrapper<T>", "signature": "ValueWrapper<T> errorWithMessage(String message)", "full_signature": "public static ValueWrapper<T> errorWithMessage(String message)", "class_method_signature": "ValueWrapper.errorWithMessage(String message)", "testcase": false, "constructor": false}, {"identifier": "errorEmptyMessage", "parameters": "()", "modifiers": "public static", "return": "ValueWrapper<T>", "signature": "ValueWrapper<T> errorEmptyMessage()", "full_signature": "public static ValueWrapper<T> errorEmptyMessage()", "class_method_signature": "ValueWrapper.errorEmptyMessage()", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isValid()", "full_signature": "public boolean isValid()", "class_method_signature": "ValueWrapper.isValid()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T getValue()", "full_signature": "public T getValue()", "class_method_signature": "ValueWrapper.getValue()", "testcase": false, "constructor": false}, {"identifier": "getExpected", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T getExpected()", "full_signature": "public T getExpected()", "class_method_signature": "ValueWrapper.getExpected()", "testcase": false, "constructor": false}, {"identifier": "getErrorMessage", "parameters": "()", "modifiers": "public", "return": "Optional<String>", "signature": "Optional<String> getErrorMessage()", "full_signature": "public Optional<String> getErrorMessage()", "class_method_signature": "ValueWrapper.getErrorMessage()", "testcase": false, "constructor": false}, {"identifier": "orElse", "parameters": "(T defaultValue)", "modifiers": "public", "return": "T", "signature": "T orElse(T defaultValue)", "full_signature": "public T orElse(T defaultValue)", "class_method_signature": "ValueWrapper.orElse(T defaultValue)", "testcase": false, "constructor": false}, {"identifier": "orElseGet", "parameters": "(Supplier<T> defaultSupplier)", "modifiers": "public", "return": "T", "signature": "T orElseGet(Supplier<T> defaultSupplier)", "full_signature": "public T orElseGet(Supplier<T> defaultSupplier)", "class_method_signature": "ValueWrapper.orElseGet(Supplier<T> defaultSupplier)", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/runner/model/ValueWrapper.java"}, "focal_method": {"identifier": "orElseGet", "parameters": "(Supplier<T> defaultSupplier)", "modifiers": "public", "return": "T", "body": "public T orElseGet(Supplier<T> defaultSupplier) {\n        return valid ? value : defaultSupplier.get();\n    }", "signature": "T orElseGet(Supplier<T> defaultSupplier)", "full_signature": "public T orElseGet(Supplier<T> defaultSupplier)", "class_method_signature": "ValueWrapper.orElseGet(Supplier<T> defaultSupplier)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}