{"test_class": {"identifier": "JdbcEventAnalyticsTableManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private IdentifiableObjectManager idObjectManager;", "modifier": "@Mock\n    private", "type": "IdentifiableObjectManager", "declarator": "idObjectManager", "var_name": "idObjectManager"}, {"original_string": "@Mock\n    private OrganisationUnitService organisationUnitService;", "modifier": "@Mock\n    private", "type": "OrganisationUnitService", "declarator": "organisationUnitService", "var_name": "organisationUnitService"}, {"original_string": "@Mock\n    private CategoryService categoryService;", "modifier": "@Mock\n    private", "type": "CategoryService", "declarator": "categoryService", "var_name": "categoryService"}, {"original_string": "private StatementBuilder statementBuilder;", "modifier": "private", "type": "StatementBuilder", "declarator": "statementBuilder", "var_name": "statementBuilder"}, {"original_string": "@Mock\n    private SystemSettingManager systemSettingManager;", "modifier": "@Mock\n    private", "type": "SystemSettingManager", "declarator": "systemSettingManager", "var_name": "systemSettingManager"}, {"original_string": "@Mock\n    private DatabaseInfo databaseInfo;", "modifier": "@Mock\n    private", "type": "DatabaseInfo", "declarator": "databaseInfo", "var_name": "databaseInfo"}, {"original_string": "@Mock\n    private JdbcTemplate jdbcTemplate;", "modifier": "@Mock\n    private", "type": "JdbcTemplate", "declarator": "jdbcTemplate", "var_name": "jdbcTemplate"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "private JdbcEventAnalyticsTableManager subject;", "modifier": "private", "type": "JdbcEventAnalyticsTableManager", "declarator": "subject", "var_name": "subject"}, {"original_string": "private BeanRandomizer rnd = new BeanRandomizer();", "modifier": "private", "type": "BeanRandomizer", "declarator": "rnd = new BeanRandomizer()", "var_name": "rnd"}, {"original_string": "private Date today;", "modifier": "private", "type": "Date", "declarator": "today", "var_name": "today"}, {"original_string": "private static final Date START_TIME = new DateTime( 2019, 8, 1, 0, 0 ).toDate();", "modifier": "private static final", "type": "Date", "declarator": "START_TIME = new DateTime( 2019, 8, 1, 0, 0 ).toDate()", "var_name": "START_TIME"}, {"original_string": "private final static String TABLE_PREFIX = \"analytics_event_\";", "modifier": "private final static", "type": "String", "declarator": "TABLE_PREFIX = \"analytics_event_\"", "var_name": "TABLE_PREFIX"}, {"original_string": "private static final String FROM_CLAUSE = \"from programstageinstance where programstageinstanceid=psi.programstageinstanceid\";", "modifier": "private static final", "type": "String", "declarator": "FROM_CLAUSE = \"from programstageinstance where programstageinstanceid=psi.programstageinstanceid\"", "var_name": "FROM_CLAUSE"}, {"original_string": "private List<AnalyticsTableColumn> periodColumns = PeriodType.getAvailablePeriodTypes().stream().map( pt -> {\n        String column = quote( pt.getName().toLowerCase() );\n        return new AnalyticsTableColumn( column, TEXT, \"dps\" + \".\" + column );\n    } ).collect( Collectors.toList() );", "modifier": "private", "type": "List<AnalyticsTableColumn>", "declarator": "periodColumns = PeriodType.getAvailablePeriodTypes().stream().map( pt -> {\n        String column = quote( pt.getName().toLowerCase() );\n        return new AnalyticsTableColumn( column, TEXT, \"dps\" + \".\" + column );\n    } ).collect( Collectors.toList() )", "var_name": "periodColumns"}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/table/JdbcEventAnalyticsTableManagerTest.java"}, "test_case": {"identifier": "verifyTableType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyTableType()\n    {\n        assertThat( subject.getAnalyticsTableType(), is( AnalyticsTableType.EVENT ) );\n    }", "signature": "void verifyTableType()", "full_signature": "@Test public void verifyTableType()", "class_method_signature": "JdbcEventAnalyticsTableManagerTest.verifyTableType()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getAnalyticsTableType", "is"]}, "focal_class": {"identifier": "JdbcEventAnalyticsTableManager", "superclass": "extends AbstractEventJdbcTableManager", "interfaces": "", "fields": [{"original_string": "private static final ImmutableSet<ValueType> NO_INDEX_VAL_TYPES = ImmutableSet.of( ValueType.TEXT, ValueType.LONG_TEXT );", "modifier": "private static final", "type": "ImmutableSet<ValueType>", "declarator": "NO_INDEX_VAL_TYPES = ImmutableSet.of( ValueType.TEXT, ValueType.LONG_TEXT )", "var_name": "NO_INDEX_VAL_TYPES"}, {"original_string": "public static final String OU_NAME_COL_SUFFIX = \"_name\";", "modifier": "public static final", "type": "String", "declarator": "OU_NAME_COL_SUFFIX = \"_name\"", "var_name": "OU_NAME_COL_SUFFIX"}, {"original_string": "public static final String OU_GEOMETRY_COL_SUFFIX = \"_geom\";", "modifier": "public static final", "type": "String", "declarator": "OU_GEOMETRY_COL_SUFFIX = \"_geom\"", "var_name": "OU_GEOMETRY_COL_SUFFIX"}, {"original_string": "private static final List<AnalyticsTableColumn> FIXED_COLS = Lists.newArrayList(\n        new AnalyticsTableColumn( quote( \"psi\" ), CHARACTER_11, NOT_NULL, \"psi.uid\" ),\n        new AnalyticsTableColumn( quote( \"pi\" ), CHARACTER_11, NOT_NULL, \"pi.uid\" ),\n        new AnalyticsTableColumn( quote( \"ps\" ), CHARACTER_11, NOT_NULL, \"ps.uid\" ),\n        new AnalyticsTableColumn( quote( \"ao\" ), CHARACTER_11, NOT_NULL, \"ao.uid\" ),\n        new AnalyticsTableColumn( quote( \"enrollmentdate\" ), TIMESTAMP, \"pi.enrollmentdate\" ),\n        new AnalyticsTableColumn( quote( \"incidentdate\" ), TIMESTAMP, \"pi.incidentdate\" ),\n        new AnalyticsTableColumn( quote( \"executiondate\" ), TIMESTAMP, \"psi.executiondate\" ),\n        new AnalyticsTableColumn( quote( \"duedate\" ),TIMESTAMP, \"psi.duedate\" ),\n        new AnalyticsTableColumn( quote( \"completeddate\" ), TIMESTAMP, \"psi.completeddate\" ),\n        new AnalyticsTableColumn( quote( \"created\" ), TIMESTAMP, \"psi.created\" ),\n        new AnalyticsTableColumn( quote( \"lastupdated\" ), TIMESTAMP, \"psi.lastupdated\" ),\n        new AnalyticsTableColumn( quote( \"pistatus\" ), CHARACTER_50, \"pi.status\" ),\n        new AnalyticsTableColumn( quote( \"psistatus\" ), CHARACTER_50, \"psi.status\" ),\n        new AnalyticsTableColumn( quote( \"psigeometry\" ), GEOMETRY, \"psi.geometry\" ).withIndexType( GEOMETRY_INDEX_TYPE ),\n        // TODO latitude and longitude deprecated in 2.30, should be removed after 2.33\n        new AnalyticsTableColumn( quote( \"longitude\" ), DOUBLE, \"CASE WHEN 'POINT' = GeometryType(psi.geometry) THEN ST_X(psi.geometry) ELSE null END\" ),\n        new AnalyticsTableColumn( quote( \"latitude\" ), DOUBLE, \"CASE WHEN 'POINT' = GeometryType(psi.geometry) THEN ST_Y(psi.geometry) ELSE null END\" ),\n        new AnalyticsTableColumn( quote( \"ou\" ), CHARACTER_11, NOT_NULL, \"ou.uid\" ),\n        new AnalyticsTableColumn( quote( \"ouname\" ), TEXT, NOT_NULL, \"ou.name\" ),\n        new AnalyticsTableColumn( quote( \"oucode\" ), TEXT, \"ou.code\" )\n    );", "modifier": "private static final", "type": "List<AnalyticsTableColumn>", "declarator": "FIXED_COLS = Lists.newArrayList(\n        new AnalyticsTableColumn( quote( \"psi\" ), CHARACTER_11, NOT_NULL, \"psi.uid\" ),\n        new AnalyticsTableColumn( quote( \"pi\" ), CHARACTER_11, NOT_NULL, \"pi.uid\" ),\n        new AnalyticsTableColumn( quote( \"ps\" ), CHARACTER_11, NOT_NULL, \"ps.uid\" ),\n        new AnalyticsTableColumn( quote( \"ao\" ), CHARACTER_11, NOT_NULL, \"ao.uid\" ),\n        new AnalyticsTableColumn( quote( \"enrollmentdate\" ), TIMESTAMP, \"pi.enrollmentdate\" ),\n        new AnalyticsTableColumn( quote( \"incidentdate\" ), TIMESTAMP, \"pi.incidentdate\" ),\n        new AnalyticsTableColumn( quote( \"executiondate\" ), TIMESTAMP, \"psi.executiondate\" ),\n        new AnalyticsTableColumn( quote( \"duedate\" ),TIMESTAMP, \"psi.duedate\" ),\n        new AnalyticsTableColumn( quote( \"completeddate\" ), TIMESTAMP, \"psi.completeddate\" ),\n        new AnalyticsTableColumn( quote( \"created\" ), TIMESTAMP, \"psi.created\" ),\n        new AnalyticsTableColumn( quote( \"lastupdated\" ), TIMESTAMP, \"psi.lastupdated\" ),\n        new AnalyticsTableColumn( quote( \"pistatus\" ), CHARACTER_50, \"pi.status\" ),\n        new AnalyticsTableColumn( quote( \"psistatus\" ), CHARACTER_50, \"psi.status\" ),\n        new AnalyticsTableColumn( quote( \"psigeometry\" ), GEOMETRY, \"psi.geometry\" ).withIndexType( GEOMETRY_INDEX_TYPE ),\n        // TODO latitude and longitude deprecated in 2.30, should be removed after 2.33\n        new AnalyticsTableColumn( quote( \"longitude\" ), DOUBLE, \"CASE WHEN 'POINT' = GeometryType(psi.geometry) THEN ST_X(psi.geometry) ELSE null END\" ),\n        new AnalyticsTableColumn( quote( \"latitude\" ), DOUBLE, \"CASE WHEN 'POINT' = GeometryType(psi.geometry) THEN ST_Y(psi.geometry) ELSE null END\" ),\n        new AnalyticsTableColumn( quote( \"ou\" ), CHARACTER_11, NOT_NULL, \"ou.uid\" ),\n        new AnalyticsTableColumn( quote( \"ouname\" ), TEXT, NOT_NULL, \"ou.name\" ),\n        new AnalyticsTableColumn( quote( \"oucode\" ), TEXT, \"ou.code\" )\n    )", "var_name": "FIXED_COLS"}], "methods": [{"identifier": "JdbcEventAnalyticsTableManager", "parameters": "( IdentifiableObjectManager idObjectManager,\n        OrganisationUnitService organisationUnitService, CategoryService categoryService,\n        SystemSettingManager systemSettingManager, DataApprovalLevelService dataApprovalLevelService,\n        ResourceTableService resourceTableService, AnalyticsTableHookService tableHookService,\n        StatementBuilder statementBuilder, PartitionManager partitionManager, DatabaseInfo databaseInfo,\n        JdbcTemplate jdbcTemplate )", "modifiers": "public", "return": "", "signature": " JdbcEventAnalyticsTableManager( IdentifiableObjectManager idObjectManager,\n        OrganisationUnitService organisationUnitService, CategoryService categoryService,\n        SystemSettingManager systemSettingManager, DataApprovalLevelService dataApprovalLevelService,\n        ResourceTableService resourceTableService, AnalyticsTableHookService tableHookService,\n        StatementBuilder statementBuilder, PartitionManager partitionManager, DatabaseInfo databaseInfo,\n        JdbcTemplate jdbcTemplate )", "full_signature": "public  JdbcEventAnalyticsTableManager( IdentifiableObjectManager idObjectManager,\n        OrganisationUnitService organisationUnitService, CategoryService categoryService,\n        SystemSettingManager systemSettingManager, DataApprovalLevelService dataApprovalLevelService,\n        ResourceTableService resourceTableService, AnalyticsTableHookService tableHookService,\n        StatementBuilder statementBuilder, PartitionManager partitionManager, DatabaseInfo databaseInfo,\n        JdbcTemplate jdbcTemplate )", "class_method_signature": "JdbcEventAnalyticsTableManager.JdbcEventAnalyticsTableManager( IdentifiableObjectManager idObjectManager,\n        OrganisationUnitService organisationUnitService, CategoryService categoryService,\n        SystemSettingManager systemSettingManager, DataApprovalLevelService dataApprovalLevelService,\n        ResourceTableService resourceTableService, AnalyticsTableHookService tableHookService,\n        StatementBuilder statementBuilder, PartitionManager partitionManager, DatabaseInfo databaseInfo,\n        JdbcTemplate jdbcTemplate )", "testcase": false, "constructor": true}, {"identifier": "getAnalyticsTableType", "parameters": "()", "modifiers": "@Override public", "return": "AnalyticsTableType", "signature": "AnalyticsTableType getAnalyticsTableType()", "full_signature": "@Override public AnalyticsTableType getAnalyticsTableType()", "class_method_signature": "JdbcEventAnalyticsTableManager.getAnalyticsTableType()", "testcase": false, "constructor": false}, {"identifier": "getAnalyticsTables", "parameters": "( AnalyticsTableUpdateParams params )", "modifiers": "@Override @Transactional public", "return": "List<AnalyticsTable>", "signature": "List<AnalyticsTable> getAnalyticsTables( AnalyticsTableUpdateParams params )", "full_signature": "@Override @Transactional public List<AnalyticsTable> getAnalyticsTables( AnalyticsTableUpdateParams params )", "class_method_signature": "JdbcEventAnalyticsTableManager.getAnalyticsTables( AnalyticsTableUpdateParams params )", "testcase": false, "constructor": false}, {"identifier": "getRegularAnalyticsTables", "parameters": "( AnalyticsTableUpdateParams params )", "modifiers": "private", "return": "List<AnalyticsTable>", "signature": "List<AnalyticsTable> getRegularAnalyticsTables( AnalyticsTableUpdateParams params )", "full_signature": "private List<AnalyticsTable> getRegularAnalyticsTables( AnalyticsTableUpdateParams params )", "class_method_signature": "JdbcEventAnalyticsTableManager.getRegularAnalyticsTables( AnalyticsTableUpdateParams params )", "testcase": false, "constructor": false}, {"identifier": "getLatestAnalyticsTables", "parameters": "( AnalyticsTableUpdateParams params )", "modifiers": "private", "return": "List<AnalyticsTable>", "signature": "List<AnalyticsTable> getLatestAnalyticsTables( AnalyticsTableUpdateParams params )", "full_signature": "private List<AnalyticsTable> getLatestAnalyticsTables( AnalyticsTableUpdateParams params )", "class_method_signature": "JdbcEventAnalyticsTableManager.getLatestAnalyticsTables( AnalyticsTableUpdateParams params )", "testcase": false, "constructor": false}, {"identifier": "hasUpdatedLatestData", "parameters": "( Date startDate, Date endDate, Program program )", "modifiers": "private", "return": "boolean", "signature": "boolean hasUpdatedLatestData( Date startDate, Date endDate, Program program )", "full_signature": "private boolean hasUpdatedLatestData( Date startDate, Date endDate, Program program )", "class_method_signature": "JdbcEventAnalyticsTableManager.hasUpdatedLatestData( Date startDate, Date endDate, Program program )", "testcase": false, "constructor": false}, {"identifier": "removeUpdatedData", "parameters": "( AnalyticsTableUpdateParams params, List<AnalyticsTable> tables )", "modifiers": "@Override public", "return": "void", "signature": "void removeUpdatedData( AnalyticsTableUpdateParams params, List<AnalyticsTable> tables )", "full_signature": "@Override public void removeUpdatedData( AnalyticsTableUpdateParams params, List<AnalyticsTable> tables )", "class_method_signature": "JdbcEventAnalyticsTableManager.removeUpdatedData( AnalyticsTableUpdateParams params, List<AnalyticsTable> tables )", "testcase": false, "constructor": false}, {"identifier": "getFixedColumns", "parameters": "()", "modifiers": "@Override public", "return": "List<AnalyticsTableColumn>", "signature": "List<AnalyticsTableColumn> getFixedColumns()", "full_signature": "@Override public List<AnalyticsTableColumn> getFixedColumns()", "class_method_signature": "JdbcEventAnalyticsTableManager.getFixedColumns()", "testcase": false, "constructor": false}, {"identifier": "getPartitionChecks", "parameters": "( AnalyticsTablePartition partition )", "modifiers": "@Override protected", "return": "List<String>", "signature": "List<String> getPartitionChecks( AnalyticsTablePartition partition )", "full_signature": "@Override protected List<String> getPartitionChecks( AnalyticsTablePartition partition )", "class_method_signature": "JdbcEventAnalyticsTableManager.getPartitionChecks( AnalyticsTablePartition partition )", "testcase": false, "constructor": false}, {"identifier": "populateTable", "parameters": "( AnalyticsTableUpdateParams params, AnalyticsTablePartition partition )", "modifiers": "@Override protected", "return": "void", "signature": "void populateTable( AnalyticsTableUpdateParams params, AnalyticsTablePartition partition )", "full_signature": "@Override protected void populateTable( AnalyticsTableUpdateParams params, AnalyticsTablePartition partition )", "class_method_signature": "JdbcEventAnalyticsTableManager.populateTable( AnalyticsTableUpdateParams params, AnalyticsTablePartition partition )", "testcase": false, "constructor": false}, {"identifier": "getDimensionColumns", "parameters": "( Program program )", "modifiers": "private", "return": "List<AnalyticsTableColumn>", "signature": "List<AnalyticsTableColumn> getDimensionColumns( Program program )", "full_signature": "private List<AnalyticsTableColumn> getDimensionColumns( Program program )", "class_method_signature": "JdbcEventAnalyticsTableManager.getDimensionColumns( Program program )", "testcase": false, "constructor": false}, {"identifier": "getColumnFromTrackedEntityAttribute", "parameters": "( TrackedEntityAttribute attribute,\n        String numericClause, String dateClause, boolean withLegendSet)", "modifiers": "private", "return": "List<AnalyticsTableColumn>", "signature": "List<AnalyticsTableColumn> getColumnFromTrackedEntityAttribute( TrackedEntityAttribute attribute,\n        String numericClause, String dateClause, boolean withLegendSet)", "full_signature": "private List<AnalyticsTableColumn> getColumnFromTrackedEntityAttribute( TrackedEntityAttribute attribute,\n        String numericClause, String dateClause, boolean withLegendSet)", "class_method_signature": "JdbcEventAnalyticsTableManager.getColumnFromTrackedEntityAttribute( TrackedEntityAttribute attribute,\n        String numericClause, String dateClause, boolean withLegendSet)", "testcase": false, "constructor": false}, {"identifier": "getColumnFromTrackedEntityAttributeWithLegendSet", "parameters": "(\n        TrackedEntityAttribute attribute, String numericClause )", "modifiers": "private", "return": "List<AnalyticsTableColumn>", "signature": "List<AnalyticsTableColumn> getColumnFromTrackedEntityAttributeWithLegendSet(\n        TrackedEntityAttribute attribute, String numericClause )", "full_signature": "private List<AnalyticsTableColumn> getColumnFromTrackedEntityAttributeWithLegendSet(\n        TrackedEntityAttribute attribute, String numericClause )", "class_method_signature": "JdbcEventAnalyticsTableManager.getColumnFromTrackedEntityAttributeWithLegendSet(\n        TrackedEntityAttribute attribute, String numericClause )", "testcase": false, "constructor": false}, {"identifier": "getColumnFromDataElement", "parameters": "( DataElement dataElement, boolean withLegendSet )", "modifiers": "private", "return": "List<AnalyticsTableColumn>", "signature": "List<AnalyticsTableColumn> getColumnFromDataElement( DataElement dataElement, boolean withLegendSet )", "full_signature": "private List<AnalyticsTableColumn> getColumnFromDataElement( DataElement dataElement, boolean withLegendSet )", "class_method_signature": "JdbcEventAnalyticsTableManager.getColumnFromDataElement( DataElement dataElement, boolean withLegendSet )", "testcase": false, "constructor": false}, {"identifier": "selectForInsert", "parameters": "( DataElement dataElement, String fromType, String dataClause )", "modifiers": "private", "return": "String", "signature": "String selectForInsert( DataElement dataElement, String fromType, String dataClause )", "full_signature": "private String selectForInsert( DataElement dataElement, String fromType, String dataClause )", "class_method_signature": "JdbcEventAnalyticsTableManager.selectForInsert( DataElement dataElement, String fromType, String dataClause )", "testcase": false, "constructor": false}, {"identifier": "selectForInsert", "parameters": "( TrackedEntityAttribute attribute, String fromType, String dataClause )", "modifiers": "private", "return": "String", "signature": "String selectForInsert( TrackedEntityAttribute attribute, String fromType, String dataClause )", "full_signature": "private String selectForInsert( TrackedEntityAttribute attribute, String fromType, String dataClause )", "class_method_signature": "JdbcEventAnalyticsTableManager.selectForInsert( TrackedEntityAttribute attribute, String fromType, String dataClause )", "testcase": false, "constructor": false}, {"identifier": "getColumnFromDataElementWithLegendSet", "parameters": "( DataElement dataElement, String select,\n        String dataClause )", "modifiers": "private", "return": "List<AnalyticsTableColumn>", "signature": "List<AnalyticsTableColumn> getColumnFromDataElementWithLegendSet( DataElement dataElement, String select,\n        String dataClause )", "full_signature": "private List<AnalyticsTableColumn> getColumnFromDataElementWithLegendSet( DataElement dataElement, String select,\n        String dataClause )", "class_method_signature": "JdbcEventAnalyticsTableManager.getColumnFromDataElementWithLegendSet( DataElement dataElement, String select,\n        String dataClause )", "testcase": false, "constructor": false}, {"identifier": "getDataClause", "parameters": "( String uid, ValueType valueType )", "modifiers": "private", "return": "String", "signature": "String getDataClause( String uid, ValueType valueType )", "full_signature": "private String getDataClause( String uid, ValueType valueType )", "class_method_signature": "JdbcEventAnalyticsTableManager.getDataClause( String uid, ValueType valueType )", "testcase": false, "constructor": false}, {"identifier": "getDataYears", "parameters": "( AnalyticsTableUpdateParams params, Program program )", "modifiers": "private", "return": "List<Integer>", "signature": "List<Integer> getDataYears( AnalyticsTableUpdateParams params, Program program )", "full_signature": "private List<Integer> getDataYears( AnalyticsTableUpdateParams params, Program program )", "class_method_signature": "JdbcEventAnalyticsTableManager.getDataYears( AnalyticsTableUpdateParams params, Program program )", "testcase": false, "constructor": false}, {"identifier": "toCharColumn", "parameters": "( String name, String prefix, Date created )", "modifiers": "private", "return": "AnalyticsTableColumn", "signature": "AnalyticsTableColumn toCharColumn( String name, String prefix, Date created )", "full_signature": "private AnalyticsTableColumn toCharColumn( String name, String prefix, Date created )", "class_method_signature": "JdbcEventAnalyticsTableManager.toCharColumn( String name, String prefix, Date created )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/table/JdbcEventAnalyticsTableManager.java"}, "focal_method": {"identifier": "getAnalyticsTableType", "parameters": "()", "modifiers": "@Override public", "return": "AnalyticsTableType", "body": "@Override\n    public AnalyticsTableType getAnalyticsTableType()\n    {\n        return AnalyticsTableType.EVENT;\n    }", "signature": "AnalyticsTableType getAnalyticsTableType()", "full_signature": "@Override public AnalyticsTableType getAnalyticsTableType()", "class_method_signature": "JdbcEventAnalyticsTableManager.getAnalyticsTableType()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}