{"test_class": {"identifier": "NewsViewModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();", "modifier": "@Rule\n\tpublic", "type": "InstantTaskExecutorRule", "declarator": "instantTaskExecutorRule = new InstantTaskExecutorRule()", "var_name": "instantTaskExecutorRule"}, {"original_string": "@Mock\n\tGetNewsUseCase<NewsUI> usecase;", "modifier": "@Mock", "type": "GetNewsUseCase<NewsUI>", "declarator": "usecase", "var_name": "usecase"}, {"original_string": "@Mock\n\tPagedList<NewsUI> pagedList;", "modifier": "@Mock", "type": "PagedList<NewsUI>", "declarator": "pagedList", "var_name": "pagedList"}, {"original_string": "private NewsViewModel viewModel;", "modifier": "private", "type": "NewsViewModel", "declarator": "viewModel", "var_name": "viewModel"}], "file": "presentation/src/test/java/com/ezz/presentation/viewmodel/news/NewsViewModelTest.java"}, "test_case": {"identifier": "verify_create_paged_list_called_only_once_in_success", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void verify_create_paged_list_called_only_once_in_success() throws InterruptedException {\n\t\twhen(usecase.getNewsPagedList()).thenReturn(Observable.just(pagedList));\n\t\tverify(usecase, times(0)).getNewsPagedList();\n\t\tviewModel.createNewsPagedList();\n\t\tverify(usecase, times(1)).getNewsPagedList();\n\t\tviewModel.createNewsPagedList();\n\t\tverify(usecase, times(1)).getNewsPagedList();\n\t}", "signature": "void verify_create_paged_list_called_only_once_in_success()", "full_signature": "@Test public void verify_create_paged_list_called_only_once_in_success()", "class_method_signature": "NewsViewModelTest.verify_create_paged_list_called_only_once_in_success()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getNewsPagedList", "just", "getNewsPagedList", "verify", "times", "createNewsPagedList", "getNewsPagedList", "verify", "times", "createNewsPagedList", "getNewsPagedList", "verify", "times"]}, "focal_class": {"identifier": "NewsViewModel", "superclass": "extends BaseViewModel", "interfaces": "", "fields": [{"original_string": "private GetNewsUseCase<NewsUI> newsUseCase;", "modifier": "private", "type": "GetNewsUseCase<NewsUI>", "declarator": "newsUseCase", "var_name": "newsUseCase"}, {"original_string": "private PagingState pagingState;", "modifier": "private", "type": "PagingState", "declarator": "pagingState", "var_name": "pagingState"}, {"original_string": "private MutableLiveData<PagedList<NewsUI>> newsPagedListLiveData = new MutableLiveData<>();", "modifier": "private", "type": "MutableLiveData<PagedList<NewsUI>>", "declarator": "newsPagedListLiveData = new MutableLiveData<>()", "var_name": "newsPagedListLiveData"}, {"original_string": "private SingleLiveEvent<DataStatus> loadNewsStats = new SingleLiveEvent<>();", "modifier": "private", "type": "SingleLiveEvent<DataStatus>", "declarator": "loadNewsStats = new SingleLiveEvent<>()", "var_name": "loadNewsStats"}, {"original_string": "private MutableLiveData<DataStatus> pagingDataStatus = new MutableLiveData<>();", "modifier": "private", "type": "MutableLiveData<DataStatus>", "declarator": "pagingDataStatus = new MutableLiveData<>()", "var_name": "pagingDataStatus"}], "methods": [{"identifier": "NewsViewModel", "parameters": "(@Named(value = IO_SCHEDULER) Scheduler subscribeOn, @Named(value = MAIN_THREAD_SCHEDULER) Scheduler observeOn, GetNewsUseCase<NewsUI> newsUsecase, PagingState pagingState)", "modifiers": "@Inject", "return": "", "signature": " NewsViewModel(@Named(value = IO_SCHEDULER) Scheduler subscribeOn, @Named(value = MAIN_THREAD_SCHEDULER) Scheduler observeOn, GetNewsUseCase<NewsUI> newsUsecase, PagingState pagingState)", "full_signature": "@Inject  NewsViewModel(@Named(value = IO_SCHEDULER) Scheduler subscribeOn, @Named(value = MAIN_THREAD_SCHEDULER) Scheduler observeOn, GetNewsUseCase<NewsUI> newsUsecase, PagingState pagingState)", "class_method_signature": "NewsViewModel.NewsViewModel(@Named(value = IO_SCHEDULER) Scheduler subscribeOn, @Named(value = MAIN_THREAD_SCHEDULER) Scheduler observeOn, GetNewsUseCase<NewsUI> newsUsecase, PagingState pagingState)", "testcase": false, "constructor": true}, {"identifier": "createNewsPagedList", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void createNewsPagedList()", "full_signature": "public void createNewsPagedList()", "class_method_signature": "NewsViewModel.createNewsPagedList()", "testcase": false, "constructor": false}, {"identifier": "loadNews", "parameters": "(int pageNumber)", "modifiers": "public", "return": "void", "signature": "void loadNews(int pageNumber)", "full_signature": "public void loadNews(int pageNumber)", "class_method_signature": "NewsViewModel.loadNews(int pageNumber)", "testcase": false, "constructor": false}, {"identifier": "getNewsPagedListLiveData", "parameters": "()", "modifiers": "public", "return": "LiveData<PagedList<NewsUI>>", "signature": "LiveData<PagedList<NewsUI>> getNewsPagedListLiveData()", "full_signature": "public LiveData<PagedList<NewsUI>> getNewsPagedListLiveData()", "class_method_signature": "NewsViewModel.getNewsPagedListLiveData()", "testcase": false, "constructor": false}, {"identifier": "getLoadNewsStats", "parameters": "()", "modifiers": "public", "return": "SingleLiveEvent<DataStatus>", "signature": "SingleLiveEvent<DataStatus> getLoadNewsStats()", "full_signature": "public SingleLiveEvent<DataStatus> getLoadNewsStats()", "class_method_signature": "NewsViewModel.getLoadNewsStats()", "testcase": false, "constructor": false}, {"identifier": "getPagingDataStatus", "parameters": "()", "modifiers": "public", "return": "LiveData<DataStatus>", "signature": "LiveData<DataStatus> getPagingDataStatus()", "full_signature": "public LiveData<DataStatus> getPagingDataStatus()", "class_method_signature": "NewsViewModel.getPagingDataStatus()", "testcase": false, "constructor": false}, {"identifier": "getPagingState", "parameters": "()", "modifiers": "public", "return": "PagingState", "signature": "PagingState getPagingState()", "full_signature": "public PagingState getPagingState()", "class_method_signature": "NewsViewModel.getPagingState()", "testcase": false, "constructor": false}], "file": "presentation/src/main/java/com/ezz/presentation/viewmodel/news/NewsViewModel.java"}, "focal_method": {"identifier": "createNewsPagedList", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void createNewsPagedList() {\n\t\tif (newsPagedListLiveData.getValue() == null){\n\t\t\texecute(\n\t\t\tdisposable -> pagingDataStatus.postValue(DataStatus.LOADING),\n\t\t\tnewsUIPagedList -> {\n\t\t\t\tnewsPagedListLiveData.postValue(newsUIPagedList);\n\t\t\t\tpagingDataStatus.setValue(DataStatus.SUCCESS);\n\t\t\t},\n\t\t\tthrowable -> pagingDataStatus.postValue(DataStatus.ERROR),\n\t\t\tnewsUseCase.getNewsPagedList()\n\t\t\t);\n\t\t}\n\t}", "signature": "void createNewsPagedList()", "full_signature": "public void createNewsPagedList()", "class_method_signature": "NewsViewModel.createNewsPagedList()", "testcase": false, "constructor": false, "invocations": ["getValue", "execute", "postValue", "postValue", "setValue", "postValue", "getNewsPagedList"]}, "repository": {"repo_id": 173924701, "url": "https://github.com/EzzWaleed/Journals", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 7, "size": 582, "license": "licensed"}}