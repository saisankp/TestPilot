{"test_class": {"identifier": "NFACompilerTest", "superclass": "extends TestLogger", "interfaces": "", "fields": [], "file": "flink-libraries/flink-cep/src/test/java/org/apache/flink/cep/nfa/compiler/NFACompilerTest.java"}, "test_case": {"identifier": "testNFACompilerWithSimplePattern", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNFACompilerWithSimplePattern() {\n\t\tPattern<Event, Event> pattern = Pattern.<Event>begin(\"start\").where(new FilterFunction<Event>() {\n\t\t\tprivate static final long serialVersionUID = 3314714776170474221L;\n\n\t\t\t@Override\n\t\t\tpublic boolean filter(Event value) throws Exception {\n\t\t\t\treturn value.getPrice() > 2;\n\t\t\t}\n\t\t})\n\t\t.followedBy(\"middle\").subtype(SubEvent.class)\n\t\t.next(\"end\").where(new FilterFunction<Event>() {\n\t\t\t\tprivate static final long serialVersionUID = 3990995859716364087L;\n\n\t\t\t\t@Override\n\t\t\tpublic boolean filter(Event value) throws Exception {\n\t\t\t\treturn value.getName().equals(\"end\");\n\t\t\t}\n\t\t});\n\n\t\tTypeInformation<Event> typeInformation = (TypeInformation<Event>) TypeExtractor.createTypeInfo(Event.class);\n\n\t\tNFA<Event> nfa = NFACompiler.<Event>compile(pattern, typeInformation.createSerializer(new ExecutionConfig()));\n\n\t\tSet<State<Event>> states = nfa.getStates();\n\n\t\tassertEquals(4, states.size());\n\n\t\tMap<String, State<Event>> stateMap = new HashMap<>();\n\n\t\tfor (State<Event> state: states) {\n\t\t\tstateMap.put(state.getName(), state);\n\t\t}\n\n\t\tassertTrue(stateMap.containsKey(NFACompiler.BEGINNING_STATE_NAME));\n\t\tState<Event> beginningState = stateMap.get(NFACompiler.BEGINNING_STATE_NAME);\n\n\t\tassertTrue(beginningState.isStart());\n\n\t\tassertTrue(stateMap.containsKey(\"start\"));\n\t\tState<Event> startState = stateMap.get(\"start\");\n\n\t\tCollection<StateTransition<Event>> startTransitions = startState.getStateTransitions();\n\t\tMap<String, StateTransition<Event>> startTransitionMap = new HashMap<>();\n\n\t\tfor (StateTransition<Event> transition: startTransitions) {\n\t\t\tstartTransitionMap.put(transition.getTargetState().getName(), transition);\n\t\t}\n\n\t\tassertEquals(2, startTransitionMap.size());\n\t\tassertTrue(startTransitionMap.containsKey(\"start\"));\n\n\t\tStateTransition<Event> reflexiveTransition = startTransitionMap.get(\"start\");\n\t\tassertEquals(StateTransitionAction.IGNORE, reflexiveTransition.getAction());\n\n\t\tassertTrue(startTransitionMap.containsKey(\"middle\"));\n\t\tStateTransition<Event> startMiddleTransition = startTransitionMap.get(\"middle\");\n\t\tassertEquals(StateTransitionAction.TAKE, startMiddleTransition.getAction());\n\n\t\tassertTrue(stateMap.containsKey(\"middle\"));\n\t\tState<Event> middleState = stateMap.get(\"middle\");\n\n\t\tMap<String, StateTransition<Event>> middleTransitionMap = new HashMap<>();\n\n\t\tfor (StateTransition<Event> transition: middleState.getStateTransitions()) {\n\t\t\tmiddleTransitionMap.put(transition.getTargetState().getName(), transition);\n\t\t}\n\n\t\tassertEquals(1, middleTransitionMap.size());\n\n\t\tassertTrue(middleTransitionMap.containsKey(\"end\"));\n\t\tStateTransition<Event> middleEndTransition = middleTransitionMap.get(\"end\");\n\n\t\tassertEquals(StateTransitionAction.TAKE, middleEndTransition.getAction());\n\n\t\tassertTrue(stateMap.containsKey(\"end\"));\n\t\tState<Event> endState = stateMap.get(\"end\");\n\n\t\tassertTrue(endState.isFinal());\n\t\tassertEquals(0, endState.getStateTransitions().size());\n\t}", "signature": "void testNFACompilerWithSimplePattern()", "full_signature": "@Test public void testNFACompilerWithSimplePattern()", "class_method_signature": "NFACompilerTest.testNFACompilerWithSimplePattern()", "testcase": true, "constructor": false, "invocations": ["where", "next", "subtype", "followedBy", "where", "begin", "getPrice", "equals", "getName", "createTypeInfo", "compile", "createSerializer", "getStates", "assertEquals", "size", "put", "getName", "assertTrue", "containsKey", "get", "assertTrue", "isStart", "assertTrue", "containsKey", "get", "getStateTransitions", "put", "getName", "getTargetState", "assertEquals", "size", "assertTrue", "containsKey", "get", "assertEquals", "getAction", "assertTrue", "containsKey", "get", "assertEquals", "getAction", "assertTrue", "containsKey", "get", "getStateTransitions", "put", "getName", "getTargetState", "assertEquals", "size", "assertTrue", "containsKey", "get", "assertEquals", "getAction", "assertTrue", "containsKey", "get", "assertTrue", "isFinal", "assertEquals", "size", "getStateTransitions"]}, "focal_class": {"identifier": "NFACompiler", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final static String BEGINNING_STATE_NAME = \"$beginningState$\";", "modifier": "protected final static", "type": "String", "declarator": "BEGINNING_STATE_NAME = \"$beginningState$\"", "var_name": "BEGINNING_STATE_NAME"}], "methods": [{"identifier": "compile", "parameters": "(Pattern<T, ?> pattern, TypeSerializer<T> inputTypeSerializer)", "modifiers": "public static", "return": "NFA<T>", "signature": "NFA<T> compile(Pattern<T, ?> pattern, TypeSerializer<T> inputTypeSerializer)", "full_signature": "public static NFA<T> compile(Pattern<T, ?> pattern, TypeSerializer<T> inputTypeSerializer)", "class_method_signature": "NFACompiler.compile(Pattern<T, ?> pattern, TypeSerializer<T> inputTypeSerializer)", "testcase": false, "constructor": false}, {"identifier": "compileFactory", "parameters": "(Pattern<T, ?> pattern, TypeSerializer<T> inputTypeSerializer)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "NFAFactory<T>", "signature": "NFAFactory<T> compileFactory(Pattern<T, ?> pattern, TypeSerializer<T> inputTypeSerializer)", "full_signature": "@SuppressWarnings(\"unchecked\") public static NFAFactory<T> compileFactory(Pattern<T, ?> pattern, TypeSerializer<T> inputTypeSerializer)", "class_method_signature": "NFACompiler.compileFactory(Pattern<T, ?> pattern, TypeSerializer<T> inputTypeSerializer)", "testcase": false, "constructor": false}], "file": "flink-libraries/flink-cep/src/main/java/org/apache/flink/cep/nfa/compiler/NFACompiler.java"}, "focal_method": {"identifier": "compile", "parameters": "(Pattern<T, ?> pattern, TypeSerializer<T> inputTypeSerializer)", "modifiers": "public static", "return": "NFA<T>", "body": "public static <T> NFA<T> compile(Pattern<T, ?> pattern, TypeSerializer<T> inputTypeSerializer) {\n\t\tNFAFactory<T> factory = compileFactory(pattern, inputTypeSerializer);\n\n\t\treturn factory.createNFA();\n\t}", "signature": "NFA<T> compile(Pattern<T, ?> pattern, TypeSerializer<T> inputTypeSerializer)", "full_signature": "public static NFA<T> compile(Pattern<T, ?> pattern, TypeSerializer<T> inputTypeSerializer)", "class_method_signature": "NFACompiler.compile(Pattern<T, ?> pattern, TypeSerializer<T> inputTypeSerializer)", "testcase": false, "constructor": false, "invocations": ["compileFactory", "createNFA"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}