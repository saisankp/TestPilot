{"test_class": {"identifier": "WarInitializerTest", "superclass": "", "interfaces": "", "fields": [], "file": "herd-code/herd-app/src/test/java/org/finra/herd/app/WarInitializerTest.java"}, "test_case": {"identifier": "testOnStartup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnStartup() throws Exception\n    {\n        WarInitializer warInitializer = new WarInitializer();\n\n        // Create a mock servlet context.\n        ServletContext servletContext = new ExtendedMockServletContext();\n\n        // Call the various init methods of the WAR initializer to make sure they don't throw exceptions.\n        // Since everything is mocked that the WAR initializer modifies, there's no real way to validate it so we'll consider the methods not throwing\n        // an exception a successful test case.\n\n        // Note that we are NOT calling the initContextLoaderListener method because the application JUnits will set the application context for us.\n        // If we re-initialize it here, other JUnits could fail.\n        warInitializer.initDispatchServlet(servletContext);\n        warInitializer.initDelegatingFilterProxy(servletContext);\n        warInitializer.initLog4JMdcLoggingFilter(servletContext);\n        warInitializer.initCharacterEncodingFilter(servletContext);\n        warInitializer.initRequestLoggingFilter(servletContext);\n        warInitializer.initServletMapping(servletContext);\n    }", "signature": "void testOnStartup()", "full_signature": "@Test public void testOnStartup()", "class_method_signature": "WarInitializerTest.testOnStartup()", "testcase": true, "constructor": false, "invocations": ["initDispatchServlet", "initDelegatingFilterProxy", "initLog4JMdcLoggingFilter", "initCharacterEncodingFilter", "initRequestLoggingFilter", "initServletMapping"]}, "focal_class": {"identifier": "WarInitializer", "superclass": "", "interfaces": "implements WebApplicationInitializer", "fields": [], "methods": [{"identifier": "onStartup", "parameters": "(ServletContext servletContext)", "modifiers": "@Override public", "return": "void", "signature": "void onStartup(ServletContext servletContext)", "full_signature": "@Override public void onStartup(ServletContext servletContext)", "class_method_signature": "WarInitializer.onStartup(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "initContextLoaderListener", "parameters": "(ServletContext servletContext)", "modifiers": "protected", "return": "void", "signature": "void initContextLoaderListener(ServletContext servletContext)", "full_signature": "protected void initContextLoaderListener(ServletContext servletContext)", "class_method_signature": "WarInitializer.initContextLoaderListener(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "initDispatchServlet", "parameters": "(ServletContext servletContext)", "modifiers": "protected", "return": "void", "signature": "void initDispatchServlet(ServletContext servletContext)", "full_signature": "protected void initDispatchServlet(ServletContext servletContext)", "class_method_signature": "WarInitializer.initDispatchServlet(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "initDelegatingFilterProxy", "parameters": "(ServletContext servletContext)", "modifiers": "protected", "return": "void", "signature": "void initDelegatingFilterProxy(ServletContext servletContext)", "full_signature": "protected void initDelegatingFilterProxy(ServletContext servletContext)", "class_method_signature": "WarInitializer.initDelegatingFilterProxy(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "initLog4JMdcLoggingFilter", "parameters": "(ServletContext servletContext)", "modifiers": "protected", "return": "void", "signature": "void initLog4JMdcLoggingFilter(ServletContext servletContext)", "full_signature": "protected void initLog4JMdcLoggingFilter(ServletContext servletContext)", "class_method_signature": "WarInitializer.initLog4JMdcLoggingFilter(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "initCharacterEncodingFilter", "parameters": "(ServletContext servletContext)", "modifiers": "protected", "return": "void", "signature": "void initCharacterEncodingFilter(ServletContext servletContext)", "full_signature": "protected void initCharacterEncodingFilter(ServletContext servletContext)", "class_method_signature": "WarInitializer.initCharacterEncodingFilter(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "initRequestLoggingFilter", "parameters": "(ServletContext servletContext)", "modifiers": "protected", "return": "void", "signature": "void initRequestLoggingFilter(ServletContext servletContext)", "full_signature": "protected void initRequestLoggingFilter(ServletContext servletContext)", "class_method_signature": "WarInitializer.initRequestLoggingFilter(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "initServletMapping", "parameters": "(ServletContext servletContext)", "modifiers": "protected", "return": "void", "signature": "void initServletMapping(ServletContext servletContext)", "full_signature": "protected void initServletMapping(ServletContext servletContext)", "class_method_signature": "WarInitializer.initServletMapping(ServletContext servletContext)", "testcase": false, "constructor": false}], "file": "herd-code/herd-app/src/main/java/org/finra/herd/app/WarInitializer.java"}, "focal_method": {"identifier": "onStartup", "parameters": "(ServletContext servletContext)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onStartup(ServletContext servletContext) throws ServletException\n    {\n        // Initialize all the parts individually so an extending class can override individual methods as needed.\n        initContextLoaderListener(servletContext);\n        initDispatchServlet(servletContext);\n        initDelegatingFilterProxy(servletContext);\n        initLog4JMdcLoggingFilter(servletContext);\n        initCharacterEncodingFilter(servletContext);\n        initRequestLoggingFilter(servletContext);\n        initServletMapping(servletContext);\n    }", "signature": "void onStartup(ServletContext servletContext)", "full_signature": "@Override public void onStartup(ServletContext servletContext)", "class_method_signature": "WarInitializer.onStartup(ServletContext servletContext)", "testcase": false, "constructor": false, "invocations": ["initContextLoaderListener", "initDispatchServlet", "initDelegatingFilterProxy", "initLog4JMdcLoggingFilter", "initCharacterEncodingFilter", "initRequestLoggingFilter", "initServletMapping"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}