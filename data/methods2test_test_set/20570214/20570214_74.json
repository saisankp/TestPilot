{"test_class": {"identifier": "JwtHmacTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/jwt/JwtHmacTest.java"}, "test_case": {"identifier": "verifyCompact_rfc7515TestVector_shouldThrow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void verifyCompact_rfc7515TestVector_shouldThrow() throws Exception {\n    String key =\n        \"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\";\n    // The sample token has expired since 2011-03-22.\n    String compact =\n        \"eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9.\"\n            + \"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlfQ.\"\n            + \"dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk\";\n\n    String algo = \"HS256\";\n    SecretKey secretKey = new SecretKeySpec(Base64.urlSafeDecode(key), \"HMAC\");\n    JwtHmac mac = new JwtHmac(algo, secretKey);\n    JwtValidator validator = new JwtValidator.Builder().build();\n\n    assertThrows(JwtExpiredException.class, () -> mac.verifyCompact(compact, validator));\n  }", "signature": "void verifyCompact_rfc7515TestVector_shouldThrow()", "full_signature": "@Test public void verifyCompact_rfc7515TestVector_shouldThrow()", "class_method_signature": "JwtHmacTest.verifyCompact_rfc7515TestVector_shouldThrow()", "testcase": true, "constructor": false, "invocations": ["urlSafeDecode", "build", "assertThrows", "verifyCompact"]}, "focal_class": {"identifier": "JwtHmac", "superclass": "", "interfaces": "implements JwtMac", "fields": [{"original_string": "private static final Charset ASCII = Charset.forName(\"US-ASCII\");", "modifier": "private static final", "type": "Charset", "declarator": "ASCII = Charset.forName(\"US-ASCII\")", "var_name": "ASCII"}, {"original_string": "private static final int MIN_KEY_SIZE_IN_BYTES = 32;", "modifier": "private static final", "type": "int", "declarator": "MIN_KEY_SIZE_IN_BYTES = 32", "var_name": "MIN_KEY_SIZE_IN_BYTES"}, {"original_string": "@SuppressWarnings(\"Immutable\") // We do not mutate the mac.\n  private final Mac mac;", "modifier": "@SuppressWarnings(\"Immutable\") // We do not mutate the mac.\n  private final", "type": "Mac", "declarator": "mac", "var_name": "mac"}, {"original_string": "private final String algo;", "modifier": "private final", "type": "String", "declarator": "algo", "var_name": "algo"}], "methods": [{"identifier": "JwtHmac", "parameters": "(String algo, java.security.Key key)", "modifiers": "public", "return": "", "signature": " JwtHmac(String algo, java.security.Key key)", "full_signature": "public  JwtHmac(String algo, java.security.Key key)", "class_method_signature": "JwtHmac.JwtHmac(String algo, java.security.Key key)", "testcase": false, "constructor": true}, {"identifier": "createCompact", "parameters": "(ToBeSignedJwt token)", "modifiers": "@Override public", "return": "String", "signature": "String createCompact(ToBeSignedJwt token)", "full_signature": "@Override public String createCompact(ToBeSignedJwt token)", "class_method_signature": "JwtHmac.createCompact(ToBeSignedJwt token)", "testcase": false, "constructor": false}, {"identifier": "verifyCompact", "parameters": "(String compact, JwtValidator validator)", "modifiers": "@Override public", "return": "Jwt", "signature": "Jwt verifyCompact(String compact, JwtValidator validator)", "full_signature": "@Override public Jwt verifyCompact(String compact, JwtValidator validator)", "class_method_signature": "JwtHmac.verifyCompact(String compact, JwtValidator validator)", "testcase": false, "constructor": false}, {"identifier": "getHmacAlgo", "parameters": "(String algo)", "modifiers": "private static", "return": "String", "signature": "String getHmacAlgo(String algo)", "full_signature": "private static String getHmacAlgo(String algo)", "class_method_signature": "JwtHmac.getHmacAlgo(String algo)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/jwt/JwtHmac.java"}, "focal_method": {"identifier": "verifyCompact", "parameters": "(String compact, JwtValidator validator)", "modifiers": "@Override public", "return": "Jwt", "body": "@Override\n  public Jwt verifyCompact(String compact, JwtValidator validator) throws GeneralSecurityException {\n    String[] parts = compact.split(\"\\\\.\", -1);\n    if (parts.length != 3) {\n      throw new JwtInvalidException(\n          \"only tokens in JWS compact serialization format are supported\");\n    }\n\n    String input = parts[0] + \".\" + parts[1];\n    byte[] expectedTag = Base64.urlSafeDecode(parts[2]);\n    mac.verifyMac(expectedTag, input.getBytes(ASCII));\n\n    ToBeSignedJwt token = new ToBeSignedJwt.Builder(input).build();\n    return validator.validate(this.algo, token);\n  }", "signature": "Jwt verifyCompact(String compact, JwtValidator validator)", "full_signature": "@Override public Jwt verifyCompact(String compact, JwtValidator validator)", "class_method_signature": "JwtHmac.verifyCompact(String compact, JwtValidator validator)", "testcase": false, "constructor": false, "invocations": ["split", "urlSafeDecode", "verifyMac", "getBytes", "build", "validate"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}