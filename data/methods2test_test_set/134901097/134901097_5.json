{"test_class": {"identifier": "AbstractBearerTokenExtractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String AUTHORIZATION = \"Authorization\";", "modifier": "private static final", "type": "String", "declarator": "AUTHORIZATION = \"Authorization\"", "var_name": "AUTHORIZATION"}, {"original_string": "private static final String COOKIE = \"Cookie\";", "modifier": "private static final", "type": "String", "declarator": "COOKIE = \"Cookie\"", "var_name": "COOKIE"}, {"original_string": "private static final List<String> BEARER_SCHEME = Collections.singletonList(\"Bearer\");", "modifier": "private static final", "type": "List<String>", "declarator": "BEARER_SCHEME = Collections.singletonList(\"Bearer\")", "var_name": "BEARER_SCHEME"}, {"original_string": "@Mock\n    JWTAuthContextInfo authContextInfo;", "modifier": "@Mock", "type": "JWTAuthContextInfo", "declarator": "authContextInfo", "var_name": "authContextInfo"}, {"original_string": "AbstractBearerTokenExtractor target;", "modifier": "", "type": "AbstractBearerTokenExtractor", "declarator": "target", "var_name": "target"}], "file": "implementation/src/test/java/io/smallrye/jwt/auth/AbstractBearerTokenExtractorTest.java"}, "test_case": {"identifier": "testGetBearerTokenOtherSchemeAuthorizationHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetBearerTokenOtherSchemeAuthorizationHeader() {\n        when(authContextInfo.getTokenHeader()).thenReturn(AUTHORIZATION);\n        when(authContextInfo.getTokenSchemes()).thenReturn(BEARER_SCHEME);\n        AbstractBearerTokenExtractor target = newTarget(h -> \"Basic Not_a_JWT\", c -> null);\n        String bearerToken = target.getBearerToken();\n        assertNull(bearerToken);\n    }", "signature": "void testGetBearerTokenOtherSchemeAuthorizationHeader()", "full_signature": "@Test public void testGetBearerTokenOtherSchemeAuthorizationHeader()", "class_method_signature": "AbstractBearerTokenExtractorTest.testGetBearerTokenOtherSchemeAuthorizationHeader()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getTokenHeader", "thenReturn", "when", "getTokenSchemes", "newTarget", "getBearerToken", "assertNull"]}, "focal_class": {"identifier": "AbstractBearerTokenExtractor", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String AUTHORIZATION_HEADER = \"Authorization\";", "modifier": "protected static final", "type": "String", "declarator": "AUTHORIZATION_HEADER = \"Authorization\"", "var_name": "AUTHORIZATION_HEADER"}, {"original_string": "protected static final String COOKIE_HEADER = \"Cookie\";", "modifier": "protected static final", "type": "String", "declarator": "COOKIE_HEADER = \"Cookie\"", "var_name": "COOKIE_HEADER"}, {"original_string": "protected static final String BEARER = \"Bearer\";", "modifier": "protected static final", "type": "String", "declarator": "BEARER = \"Bearer\"", "var_name": "BEARER"}, {"original_string": "protected static final String BEARER_SCHEME_PREFIX = BEARER + ' ';", "modifier": "protected static final", "type": "String", "declarator": "BEARER_SCHEME_PREFIX = BEARER + ' '", "var_name": "BEARER_SCHEME_PREFIX"}, {"original_string": "private final JWTAuthContextInfo authContextInfo;", "modifier": "private final", "type": "JWTAuthContextInfo", "declarator": "authContextInfo", "var_name": "authContextInfo"}], "methods": [{"identifier": "AbstractBearerTokenExtractor", "parameters": "(JWTAuthContextInfo authContextInfo)", "modifiers": "protected", "return": "", "signature": " AbstractBearerTokenExtractor(JWTAuthContextInfo authContextInfo)", "full_signature": "protected  AbstractBearerTokenExtractor(JWTAuthContextInfo authContextInfo)", "class_method_signature": "AbstractBearerTokenExtractor.AbstractBearerTokenExtractor(JWTAuthContextInfo authContextInfo)", "testcase": false, "constructor": true}, {"identifier": "getBearerToken", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBearerToken()", "full_signature": "public String getBearerToken()", "class_method_signature": "AbstractBearerTokenExtractor.getBearerToken()", "testcase": false, "constructor": false}, {"identifier": "getBearerTokenCookie", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getBearerTokenCookie()", "full_signature": "private String getBearerTokenCookie()", "class_method_signature": "AbstractBearerTokenExtractor.getBearerTokenCookie()", "testcase": false, "constructor": false}, {"identifier": "getBearerTokenAuthHeader", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getBearerTokenAuthHeader()", "full_signature": "private String getBearerTokenAuthHeader()", "class_method_signature": "AbstractBearerTokenExtractor.getBearerTokenAuthHeader()", "testcase": false, "constructor": false}, {"identifier": "getTokenWithConfiguredScheme", "parameters": "(String tokenHeader)", "modifiers": "private", "return": "String", "signature": "String getTokenWithConfiguredScheme(String tokenHeader)", "full_signature": "private String getTokenWithConfiguredScheme(String tokenHeader)", "class_method_signature": "AbstractBearerTokenExtractor.getTokenWithConfiguredScheme(String tokenHeader)", "testcase": false, "constructor": false}, {"identifier": "isTokenScheme", "parameters": "(String headerValue, String schemePrefix)", "modifiers": "private static", "return": "boolean", "signature": "boolean isTokenScheme(String headerValue, String schemePrefix)", "full_signature": "private static boolean isTokenScheme(String headerValue, String schemePrefix)", "class_method_signature": "AbstractBearerTokenExtractor.isTokenScheme(String headerValue, String schemePrefix)", "testcase": false, "constructor": false}, {"identifier": "getHeaderValue", "parameters": "(String headerName)", "modifiers": "protected abstract", "return": "String", "signature": "String getHeaderValue(String headerName)", "full_signature": "protected abstract String getHeaderValue(String headerName)", "class_method_signature": "AbstractBearerTokenExtractor.getHeaderValue(String headerName)", "testcase": false, "constructor": false}, {"identifier": "getCookieValue", "parameters": "(String cookieName)", "modifiers": "protected abstract", "return": "String", "signature": "String getCookieValue(String cookieName)", "full_signature": "protected abstract String getCookieValue(String cookieName)", "class_method_signature": "AbstractBearerTokenExtractor.getCookieValue(String cookieName)", "testcase": false, "constructor": false}], "file": "implementation/src/main/java/io/smallrye/jwt/auth/AbstractBearerTokenExtractor.java"}, "focal_method": {"identifier": "getBearerToken", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getBearerToken() {\n        final String tokenHeaderName = authContextInfo.getTokenHeader();\n        final boolean fallbackToHeader = authContextInfo.isAlwaysCheckAuthorization();\n        AuthLogging.log.tokenHeaderName(tokenHeaderName);\n\n        final String bearerValue;\n\n        if (COOKIE_HEADER.equals(tokenHeaderName)) {\n            String intermediateBearerValue = getBearerTokenCookie();\n            if (intermediateBearerValue == null && fallbackToHeader) {\n                bearerValue = getBearerTokenAuthHeader();\n            } else {\n                bearerValue = intermediateBearerValue;\n            }\n        } else if (AUTHORIZATION_HEADER.equals(tokenHeaderName)) {\n            bearerValue = getBearerTokenAuthHeader();\n        } else {\n            String customHeaderValue = getHeaderValue(tokenHeaderName);\n\n            if (customHeaderValue == null) {\n                AuthLogging.log.headerIsNull(tokenHeaderName);\n            } else {\n                String customHeaderSchemeValue = getTokenWithConfiguredScheme(customHeaderValue);\n                if (customHeaderSchemeValue != null) {\n                    customHeaderValue = customHeaderSchemeValue;\n                }\n            }\n            bearerValue = customHeaderValue;\n        }\n\n        return bearerValue;\n    }", "signature": "String getBearerToken()", "full_signature": "public String getBearerToken()", "class_method_signature": "AbstractBearerTokenExtractor.getBearerToken()", "testcase": false, "constructor": false, "invocations": ["getTokenHeader", "isAlwaysCheckAuthorization", "tokenHeaderName", "equals", "getBearerTokenCookie", "getBearerTokenAuthHeader", "equals", "getBearerTokenAuthHeader", "getHeaderValue", "headerIsNull", "getTokenWithConfiguredScheme"]}, "repository": {"repo_id": 134901097, "url": "https://github.com/smallrye/smallrye-jwt", "stars": 19, "created": "5/25/2018 8:19:37 PM +00:00", "updates": "2020-01-23T18:42:37+00:00", "fork": "False", "license": "licensed"}}