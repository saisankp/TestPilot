{"test_class": {"identifier": "MessageBusSectionProcessingStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IQueue<ITask> taskQueue;", "modifier": "private", "type": "IQueue<ITask>", "declarator": "taskQueue", "var_name": "taskQueue"}, {"original_string": "private Object mapId;", "modifier": "private", "type": "Object", "declarator": "mapId", "var_name": "mapId"}, {"original_string": "private IChainStorage chainStorage;", "modifier": "private", "type": "IChainStorage", "declarator": "chainStorage", "var_name": "chainStorage"}, {"original_string": "private IReceiverChain receiverChain;", "modifier": "private", "type": "IReceiverChain", "declarator": "receiverChain", "var_name": "receiverChain"}, {"original_string": "private IAction responseAction;", "modifier": "private", "type": "IAction", "declarator": "responseAction", "var_name": "responseAction"}, {"original_string": "private IResponseStrategy nullResponseStrategy;", "modifier": "private", "type": "IResponseStrategy", "declarator": "nullResponseStrategy", "var_name": "nullResponseStrategy"}, {"original_string": "private IResponseStrategy mbResponseStrategy;", "modifier": "private", "type": "IResponseStrategy", "declarator": "mbResponseStrategy", "var_name": "mbResponseStrategy"}], "file": "Starters/MessageBusServiceStarter/MessageBusStarter/src/test/java/info/smart_tools/smartactors/message_bus_service_starter/message_bus_starter/MessageBusSectionProcessingStrategyTest.java"}, "test_case": {"identifier": "testLoadingConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadingConfig()\n            throws Exception {\n        IResolveDependencyStrategy sequenceStrategy = mock(IResolveDependencyStrategy.class);\n        IOC.register(\n                IOC.resolve(IOC.getKeyForKeyStorage(), \"info.smart_tools.smartactors.message_processing_interfaces.message_processing.IMessageProcessingSequence\"),\n                sequenceStrategy\n        );\n        IResolveDependencyStrategy messageProcessorStrategy = mock(IResolveDependencyStrategy.class);\n        IOC.register(\n                IOC.resolve(IOC.getKeyForKeyStorage(), \"info.smart_tools.smartactors.message_processing_interfaces.message_processing.IMessageProcessor\"),\n                messageProcessorStrategy\n        );\n        IOC.register(\n                IOC.resolve(IOC.getKeyForKeyStorage(), \"info.smart_tools.smartactors.iobject.iobject.IObject\"),\n                new ApplyFunctionToArgumentsStrategy(\n                        (args) -> {\n                            return new DSObject();\n                        }\n                )\n        );\n\n        when(chainStorage.resolve(mapId)).thenReturn(receiverChain);\n        DSObject config = new DSObject(\"\\n\" +\n                \"     {\\n\" +\n                \"         \\\"messageBus\\\": \\n\" +\n                \"             {\\n\" +\n                \"                 \\\"routingChain\\\": \\\"mainChain\\\",\\n\" +\n                \"                 \\\"stackDepth\\\": 5\\n\" +\n                \"             }\\n\" +\n                \"         \\n\" +\n                \"     }\");\n        MessageBusSectionProcessingStrategy strategy = new MessageBusSectionProcessingStrategy();\n        strategy.onLoadConfig(config);\n\n        IMessageProcessingSequence sequence = mock(IMessageProcessingSequence.class);\n        when(sequenceStrategy.resolve(5, this.receiverChain)).thenReturn(sequence);\n        IMessageProcessor processor = mock(IMessageProcessor.class);\n        when(messageProcessorStrategy.resolve(this.taskQueue, sequence)).thenReturn(processor);\n        IObject result = new DSObject();\n        doAnswer(new Answer() {\n            @Override\n            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                result.setValue(new FieldName(\"message\"), invocationOnMock.getArguments()[0]);\n                result.setValue(new FieldName(\"context\"), invocationOnMock.getArguments()[1]);\n                return null;\n            }\n        }).when(processor).process(any(IObject.class), any(IObject.class));\n\n        IMessageBusHandler handler = (IMessageBusHandler) ScopeProvider.getCurrentScope().getValue(MessageBus.getMessageBusKey());\n        assertNotNull(handler);\n        Object replyToChainName = mock(Object.class);\n        IObject message = mock(IObject.class);\n        handler.handleForReply(message, replyToChainName);\n        assertSame(result.getValue(new FieldName(\"message\")), message);\n        IObject resultContext = (IObject) result.getValue(new FieldName(\"context\"));\n        List<IAction> actions = (List<IAction>) resultContext.getValue(new FieldName(\"finalActions\"));\n        assertEquals(actions.size(), 1);\n        IAction<IObject> action = actions.get(0);\n        IObject env = new DSObject();\n        IObject messageForReply = new DSObject();\n        env.setValue(new FieldName(\"message\"), messageForReply);\n        env.setValue(new FieldName(\"context\"), resultContext);\n        action.execute(env);\n        verify(responseAction, times(1)).execute(env);\n    }", "signature": "void testLoadingConfig()", "full_signature": "@Test public void testLoadingConfig()", "class_method_signature": "MessageBusSectionProcessingStrategyTest.testLoadingConfig()", "testcase": true, "constructor": false, "invocations": ["mock", "register", "resolve", "getKeyForKeyStorage", "mock", "register", "resolve", "getKeyForKeyStorage", "register", "resolve", "getKeyForKeyStorage", "thenReturn", "when", "resolve", "onLoadConfig", "mock", "thenReturn", "when", "resolve", "mock", "thenReturn", "when", "resolve", "process", "when", "doAnswer", "setValue", "getArguments", "setValue", "getArguments", "any", "any", "getValue", "getCurrentScope", "getMessageBusKey", "assertNotNull", "mock", "mock", "handleForReply", "assertSame", "getValue", "getValue", "getValue", "assertEquals", "size", "get", "setValue", "setValue", "execute", "execute", "verify", "times"]}, "focal_class": {"identifier": "MessageBusSectionProcessingStrategy", "superclass": "", "interfaces": "implements ISectionStrategy", "fields": [{"original_string": "private final IFieldName name;", "modifier": "private final", "type": "IFieldName", "declarator": "name", "var_name": "name"}, {"original_string": "private final IFieldName startChainNameFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "startChainNameFieldName", "var_name": "startChainNameFieldName"}, {"original_string": "private final IFieldName stackDepthFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "stackDepthFieldName", "var_name": "stackDepthFieldName"}], "methods": [{"identifier": "MessageBusSectionProcessingStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " MessageBusSectionProcessingStrategy()", "full_signature": "public  MessageBusSectionProcessingStrategy()", "class_method_signature": "MessageBusSectionProcessingStrategy.MessageBusSectionProcessingStrategy()", "testcase": false, "constructor": true}, {"identifier": "onLoadConfig", "parameters": "(final IObject config)", "modifiers": "@Override public", "return": "void", "signature": "void onLoadConfig(final IObject config)", "full_signature": "@Override public void onLoadConfig(final IObject config)", "class_method_signature": "MessageBusSectionProcessingStrategy.onLoadConfig(final IObject config)", "testcase": false, "constructor": false}, {"identifier": "getSectionName", "parameters": "()", "modifiers": "@Override public", "return": "IFieldName", "signature": "IFieldName getSectionName()", "full_signature": "@Override public IFieldName getSectionName()", "class_method_signature": "MessageBusSectionProcessingStrategy.getSectionName()", "testcase": false, "constructor": false}], "file": "Starters/MessageBusServiceStarter/MessageBusStarter/src/main/java/info/smart_tools/smartactors/message_bus_service_starter/message_bus_starter/MessageBusSectionProcessingStrategy.java"}, "focal_method": {"identifier": "onLoadConfig", "parameters": "(final IObject config)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onLoadConfig(final IObject config) throws ConfigurationProcessingException {\n        try {\n            IObject messageBusObject = (IObject) config.getValue(name);\n\n            IQueue<ITask> queue = IOC.resolve(Keys.getOrAdd(\"task_queue\"));\n\n            Integer stackDepth = Integer.valueOf(String.valueOf(messageBusObject.getValue(stackDepthFieldName)));\n\n            IChainStorage chainStorage = IOC.resolve(IOC.resolve(IOC.getKeyForKeyStorage(),\n                    IChainStorage.class.getCanonicalName()));\n            String startChainName = (String) messageBusObject.getValue(startChainNameFieldName);\n            Object mapId = IOC.resolve(Keys.getOrAdd(\"chain_id_from_map_name\"), startChainName);\n            IReceiverChain chain = chainStorage.resolve(mapId);\n\n            IAction<IObject> finalAction = IOC.resolve(Keys.getOrAdd(\"send response action\"));\n\n            IMessageBusHandler handler = new MessageBusHandler(queue, stackDepth, chain, finalAction);\n\n            ScopeProvider.getCurrentScope().setValue(MessageBus.getMessageBusKey(), handler);\n        } catch (ReadValueException | InvalidArgumentException | ScopeProviderException | ScopeException e) {\n            throw new ConfigurationProcessingException(\"Error occurred loading \\\"client\\\" configuration section.\", e);\n        } catch (ResolutionException e) {\n            throw new ConfigurationProcessingException(\"Error occurred resolving \\\"client\\\".\", e);\n        } catch (ChainNotFoundException e) {\n            throw new ConfigurationProcessingException(\"Error occurred resolving \\\"chain\\\".\", e);\n        }\n    }", "signature": "void onLoadConfig(final IObject config)", "full_signature": "@Override public void onLoadConfig(final IObject config)", "class_method_signature": "MessageBusSectionProcessingStrategy.onLoadConfig(final IObject config)", "testcase": false, "constructor": false, "invocations": ["getValue", "resolve", "getOrAdd", "valueOf", "valueOf", "getValue", "resolve", "resolve", "getKeyForKeyStorage", "getCanonicalName", "getValue", "resolve", "getOrAdd", "resolve", "resolve", "getOrAdd", "setValue", "getCurrentScope", "getMessageBusKey"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}