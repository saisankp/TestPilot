{"test_class": {"identifier": "RuleTest", "superclass": "", "interfaces": "", "fields": [], "file": "api/src/test/java/net/adamcin/oakpal/api/RuleTest.java"}, "test_case": {"identifier": "testHashCode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHashCode() {\n        final Rule newAllow = new Rule(Rules.DEFAULT_ALLOW.getType(), Rules.DEFAULT_ALLOW.getPattern());\n        assertEquals(\"hashCode(): DEFAULT_ALLOW should equal new rule with same params as DEFAULT_ALLOW\",\n                Rules.DEFAULT_ALLOW.hashCode(), newAllow.hashCode());\n        assertNotEquals(\"hashCode(): DEFAULT_ALLOW should not equal new ALLOW rule with different pattern\",\n                Rules.DEFAULT_ALLOW.hashCode(), new Rule(Rules.DEFAULT_ALLOW.getType(), Pattern.compile(\"foo\")).hashCode());\n        assertNotEquals(\"hashCode(): DEFAULT_DENY should not equal new ALLOW rule with same params as DEFAULT_ALLOW\",\n                Rules.DEFAULT_DENY.hashCode(), newAllow.hashCode());\n        assertNotEquals(\"hashCode(): DEFAULT_INCLUDE should not equal new ALLOW rule with same params as DEFAULT_ALLOW\",\n                Rules.DEFAULT_INCLUDE.hashCode(), newAllow.hashCode());\n    }", "signature": "void testHashCode()", "full_signature": "@Test public void testHashCode()", "class_method_signature": "RuleTest.testHashCode()", "testcase": true, "constructor": false, "invocations": ["getType", "getPattern", "assertEquals", "hashCode", "hashCode", "assertNotEquals", "hashCode", "hashCode", "getType", "compile", "assertNotEquals", "hashCode", "hashCode", "assertNotEquals", "hashCode", "hashCode"]}, "focal_class": {"identifier": "Rule", "superclass": "", "interfaces": "implements JsonObjectConvertible", "fields": [{"original_string": "private static final JsonKeys KEYS = new JsonKeys() {\n        @Override\n        public String type() {\n            return \"type\";\n        }\n\n        @Override\n        public String pattern() {\n            return \"pattern\";\n        }\n    };", "modifier": "private static final", "type": "JsonKeys", "declarator": "KEYS = new JsonKeys() {\n        @Override\n        public String type() {\n            return \"type\";\n        }\n\n        @Override\n        public String pattern() {\n            return \"pattern\";\n        }\n    }", "var_name": "KEYS"}, {"original_string": "private final RuleType type;", "modifier": "private final", "type": "RuleType", "declarator": "type", "var_name": "type"}, {"original_string": "private final Pattern pattern;", "modifier": "private final", "type": "Pattern", "declarator": "pattern", "var_name": "pattern"}], "methods": [{"identifier": "keys", "parameters": "()", "modifiers": "@NotNull public static", "return": "JsonKeys", "signature": "JsonKeys keys()", "full_signature": "@NotNull public static JsonKeys keys()", "class_method_signature": "Rule.keys()", "testcase": false, "constructor": false}, {"identifier": "Rule", "parameters": "(final RuleType type, final Pattern pattern)", "modifiers": "public", "return": "", "signature": " Rule(final RuleType type, final Pattern pattern)", "full_signature": "public  Rule(final RuleType type, final Pattern pattern)", "class_method_signature": "Rule.Rule(final RuleType type, final Pattern pattern)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "RuleType", "signature": "RuleType getType()", "full_signature": "public RuleType getType()", "class_method_signature": "Rule.getType()", "testcase": false, "constructor": false}, {"identifier": "getPattern", "parameters": "()", "modifiers": "public", "return": "Pattern", "signature": "Pattern getPattern()", "full_signature": "public Pattern getPattern()", "class_method_signature": "Rule.getPattern()", "testcase": false, "constructor": false}, {"identifier": "isInclude", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInclude()", "full_signature": "public boolean isInclude()", "class_method_signature": "Rule.isInclude()", "testcase": false, "constructor": false}, {"identifier": "isExclude", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isExclude()", "full_signature": "public boolean isExclude()", "class_method_signature": "Rule.isExclude()", "testcase": false, "constructor": false}, {"identifier": "isAllow", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAllow()", "full_signature": "public boolean isAllow()", "class_method_signature": "Rule.isAllow()", "testcase": false, "constructor": false}, {"identifier": "isDeny", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDeny()", "full_signature": "public boolean isDeny()", "class_method_signature": "Rule.isDeny()", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(String value)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(String value)", "full_signature": "public boolean matches(String value)", "class_method_signature": "Rule.matches(String value)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "()", "modifiers": "@Override public", "return": "JsonObject", "signature": "JsonObject toJson()", "full_signature": "@Override public JsonObject toJson()", "class_method_signature": "Rule.toJson()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Rule.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "Rule.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Rule.hashCode()", "testcase": false, "constructor": false}], "file": "api/src/main/java/net/adamcin/oakpal/api/Rule.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int hashCode() {\n        return Objects.hash(type, pattern.pattern());\n    }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Rule.hashCode()", "testcase": false, "constructor": false, "invocations": ["hash", "pattern"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}