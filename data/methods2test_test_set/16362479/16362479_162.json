{"test_class": {"identifier": "RaftActorTest", "superclass": "extends AbstractActorTest", "interfaces": "", "fields": [{"original_string": "static final Logger TEST_LOG = LoggerFactory.getLogger(RaftActorTest.class);", "modifier": "static final", "type": "Logger", "declarator": "TEST_LOG = LoggerFactory.getLogger(RaftActorTest.class)", "var_name": "TEST_LOG"}, {"original_string": "private TestActorFactory factory;", "modifier": "private", "type": "TestActorFactory", "declarator": "factory", "var_name": "factory"}], "file": "opendaylight/md-sal/sal-akka-raft/src/test/java/org/opendaylight/controller/cluster/raft/RaftActorTest.java"}, "test_case": {"identifier": "testApplyJournalEntriesCallsDataPersistence", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testApplyJournalEntriesCallsDataPersistence() throws Exception {\n        String persistenceId = factory.generateActorId(\"leader-\");\n\n        DefaultConfigParamsImpl config = new DefaultConfigParamsImpl();\n\n        config.setHeartBeatInterval(new FiniteDuration(1, TimeUnit.DAYS));\n\n        DataPersistenceProvider dataPersistenceProvider = mock(DataPersistenceProvider.class);\n\n        TestActorRef<MockRaftActor> mockActorRef = factory.createTestActor(MockRaftActor.props(persistenceId,\n                Collections.<String, String>emptyMap(), config, dataPersistenceProvider), persistenceId);\n\n        MockRaftActor mockRaftActor = mockActorRef.underlyingActor();\n\n        mockRaftActor.waitForInitializeBehaviorComplete();\n\n        mockRaftActor.waitUntilLeader();\n\n        mockRaftActor.handleCommand(new ApplyJournalEntries(10));\n\n        verify(dataPersistenceProvider).persistAsync(any(ApplyJournalEntries.class), any(Procedure.class));\n    }", "signature": "void testApplyJournalEntriesCallsDataPersistence()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testApplyJournalEntriesCallsDataPersistence()", "class_method_signature": "RaftActorTest.testApplyJournalEntriesCallsDataPersistence()", "testcase": true, "constructor": false, "invocations": ["generateActorId", "setHeartBeatInterval", "mock", "createTestActor", "props", "emptyMap", "underlyingActor", "waitForInitializeBehaviorComplete", "waitUntilLeader", "handleCommand", "persistAsync", "verify", "any", "any"]}, "focal_class": {"identifier": "RaftActor", "superclass": "extends AbstractUntypedPersistentActor", "interfaces": "", "fields": [{"original_string": "private static final long APPLY_STATE_DELAY_THRESHOLD_IN_NANOS = TimeUnit.MILLISECONDS.toNanos(50L);", "modifier": "private static final", "type": "long", "declarator": "APPLY_STATE_DELAY_THRESHOLD_IN_NANOS = TimeUnit.MILLISECONDS.toNanos(50L)", "var_name": "APPLY_STATE_DELAY_THRESHOLD_IN_NANOS"}, {"original_string": "private final RaftActorContextImpl context;", "modifier": "private final", "type": "RaftActorContextImpl", "declarator": "context", "var_name": "context"}, {"original_string": "private final DelegatingPersistentDataProvider delegatingPersistenceProvider;", "modifier": "private final", "type": "DelegatingPersistentDataProvider", "declarator": "delegatingPersistenceProvider", "var_name": "delegatingPersistenceProvider"}, {"original_string": "private final PersistentDataProvider persistentProvider;", "modifier": "private final", "type": "PersistentDataProvider", "declarator": "persistentProvider", "var_name": "persistentProvider"}, {"original_string": "private final BehaviorStateTracker behaviorStateTracker = new BehaviorStateTracker();", "modifier": "private final", "type": "BehaviorStateTracker", "declarator": "behaviorStateTracker = new BehaviorStateTracker()", "var_name": "behaviorStateTracker"}, {"original_string": "private RaftActorRecoverySupport raftRecovery;", "modifier": "private", "type": "RaftActorRecoverySupport", "declarator": "raftRecovery", "var_name": "raftRecovery"}, {"original_string": "private RaftActorSnapshotMessageSupport snapshotSupport;", "modifier": "private", "type": "RaftActorSnapshotMessageSupport", "declarator": "snapshotSupport", "var_name": "snapshotSupport"}, {"original_string": "private RaftActorServerConfigurationSupport serverConfigurationSupport;", "modifier": "private", "type": "RaftActorServerConfigurationSupport", "declarator": "serverConfigurationSupport", "var_name": "serverConfigurationSupport"}, {"original_string": "private boolean shuttingDown;", "modifier": "private", "type": "boolean", "declarator": "shuttingDown", "var_name": "shuttingDown"}], "methods": [{"identifier": "RaftActor", "parameters": "(final String id, final Map<String, String> peerAddresses,\n         final Optional<ConfigParams> configParams, final short payloadVersion)", "modifiers": "protected", "return": "", "signature": " RaftActor(final String id, final Map<String, String> peerAddresses,\n         final Optional<ConfigParams> configParams, final short payloadVersion)", "full_signature": "protected  RaftActor(final String id, final Map<String, String> peerAddresses,\n         final Optional<ConfigParams> configParams, final short payloadVersion)", "class_method_signature": "RaftActor.RaftActor(final String id, final Map<String, String> peerAddresses,\n         final Optional<ConfigParams> configParams, final short payloadVersion)", "testcase": false, "constructor": true}, {"identifier": "preStart", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void preStart()", "full_signature": "@Override public void preStart()", "class_method_signature": "RaftActor.preStart()", "testcase": false, "constructor": false}, {"identifier": "postStop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void postStop()", "full_signature": "@Override public void postStop()", "class_method_signature": "RaftActor.postStop()", "testcase": false, "constructor": false}, {"identifier": "handleRecover", "parameters": "(final Object message)", "modifiers": "@Override protected", "return": "void", "signature": "void handleRecover(final Object message)", "full_signature": "@Override protected void handleRecover(final Object message)", "class_method_signature": "RaftActor.handleRecover(final Object message)", "testcase": false, "constructor": false}, {"identifier": "newRaftActorRecoverySupport", "parameters": "()", "modifiers": "protected", "return": "RaftActorRecoverySupport", "signature": "RaftActorRecoverySupport newRaftActorRecoverySupport()", "full_signature": "protected RaftActorRecoverySupport newRaftActorRecoverySupport()", "class_method_signature": "RaftActor.newRaftActorRecoverySupport()", "testcase": false, "constructor": false}, {"identifier": "initializeBehavior", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void initializeBehavior()", "full_signature": "@VisibleForTesting void initializeBehavior()", "class_method_signature": "RaftActor.initializeBehavior()", "testcase": false, "constructor": false}, {"identifier": "changeCurrentBehavior", "parameters": "(final RaftActorBehavior newBehavior)", "modifiers": "@VisibleForTesting @SuppressWarnings(\"checkstyle:IllegalCatch\") protected", "return": "void", "signature": "void changeCurrentBehavior(final RaftActorBehavior newBehavior)", "full_signature": "@VisibleForTesting @SuppressWarnings(\"checkstyle:IllegalCatch\") protected void changeCurrentBehavior(final RaftActorBehavior newBehavior)", "class_method_signature": "RaftActor.changeCurrentBehavior(final RaftActorBehavior newBehavior)", "testcase": false, "constructor": false}, {"identifier": "handleNonRaftCommand", "parameters": "(final Object message)", "modifiers": "protected", "return": "void", "signature": "void handleNonRaftCommand(final Object message)", "full_signature": "protected void handleNonRaftCommand(final Object message)", "class_method_signature": "RaftActor.handleNonRaftCommand(final Object message)", "testcase": false, "constructor": false}, {"identifier": "handleCommand", "parameters": "(final Object message)", "modifiers": "@Deprecated @Override // FIXME: make this method final once our unit tests do not need to override it protected", "return": "void", "signature": "void handleCommand(final Object message)", "full_signature": "@Deprecated @Override // FIXME: make this method final once our unit tests do not need to override it protected void handleCommand(final Object message)", "class_method_signature": "RaftActor.handleCommand(final Object message)", "testcase": false, "constructor": false}, {"identifier": "onRequestLeadership", "parameters": "(final RequestLeadership message)", "modifiers": "private", "return": "void", "signature": "void onRequestLeadership(final RequestLeadership message)", "full_signature": "private void onRequestLeadership(final RequestLeadership message)", "class_method_signature": "RaftActor.onRequestLeadership(final RequestLeadership message)", "testcase": false, "constructor": false}, {"identifier": "possiblyHandleBehaviorMessage", "parameters": "(final Object message)", "modifiers": "private", "return": "boolean", "signature": "boolean possiblyHandleBehaviorMessage(final Object message)", "full_signature": "private boolean possiblyHandleBehaviorMessage(final Object message)", "class_method_signature": "RaftActor.possiblyHandleBehaviorMessage(final Object message)", "testcase": false, "constructor": false}, {"identifier": "initiateLeadershipTransfer", "parameters": "(final RaftActorLeadershipTransferCohort.OnComplete onComplete,\n            final @Nullable String followerId, final long newLeaderTimeoutInMillis)", "modifiers": "private", "return": "void", "signature": "void initiateLeadershipTransfer(final RaftActorLeadershipTransferCohort.OnComplete onComplete,\n            final @Nullable String followerId, final long newLeaderTimeoutInMillis)", "full_signature": "private void initiateLeadershipTransfer(final RaftActorLeadershipTransferCohort.OnComplete onComplete,\n            final @Nullable String followerId, final long newLeaderTimeoutInMillis)", "class_method_signature": "RaftActor.initiateLeadershipTransfer(final RaftActorLeadershipTransferCohort.OnComplete onComplete,\n            final @Nullable String followerId, final long newLeaderTimeoutInMillis)", "testcase": false, "constructor": false}, {"identifier": "onShutDown", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void onShutDown()", "full_signature": "private void onShutDown()", "class_method_signature": "RaftActor.onShutDown()", "testcase": false, "constructor": false}, {"identifier": "onLeaderTransitioning", "parameters": "(final LeaderTransitioning leaderTransitioning)", "modifiers": "private", "return": "void", "signature": "void onLeaderTransitioning(final LeaderTransitioning leaderTransitioning)", "full_signature": "private void onLeaderTransitioning(final LeaderTransitioning leaderTransitioning)", "class_method_signature": "RaftActor.onLeaderTransitioning(final LeaderTransitioning leaderTransitioning)", "testcase": false, "constructor": false}, {"identifier": "switchBehavior", "parameters": "(final SwitchBehavior message)", "modifiers": "private", "return": "void", "signature": "void switchBehavior(final SwitchBehavior message)", "full_signature": "private void switchBehavior(final SwitchBehavior message)", "class_method_signature": "RaftActor.switchBehavior(final SwitchBehavior message)", "testcase": false, "constructor": false}, {"identifier": "switchBehavior", "parameters": "(final BehaviorState oldBehaviorState, final RaftActorBehavior nextBehavior)", "modifiers": "private", "return": "void", "signature": "void switchBehavior(final BehaviorState oldBehaviorState, final RaftActorBehavior nextBehavior)", "full_signature": "private void switchBehavior(final BehaviorState oldBehaviorState, final RaftActorBehavior nextBehavior)", "class_method_signature": "RaftActor.switchBehavior(final BehaviorState oldBehaviorState, final RaftActorBehavior nextBehavior)", "testcase": false, "constructor": false}, {"identifier": "newRaftActorSnapshotMessageSupport", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "RaftActorSnapshotMessageSupport", "signature": "RaftActorSnapshotMessageSupport newRaftActorSnapshotMessageSupport()", "full_signature": "@VisibleForTesting RaftActorSnapshotMessageSupport newRaftActorSnapshotMessageSupport()", "class_method_signature": "RaftActor.newRaftActorSnapshotMessageSupport()", "testcase": false, "constructor": false}, {"identifier": "onGetOnDemandRaftStats", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void onGetOnDemandRaftStats()", "full_signature": "private void onGetOnDemandRaftStats()", "class_method_signature": "RaftActor.onGetOnDemandRaftStats()", "testcase": false, "constructor": false}, {"identifier": "newOnDemandRaftStateBuilder", "parameters": "()", "modifiers": "protected", "return": "OnDemandRaftState.AbstractBuilder<?, ?>", "signature": "OnDemandRaftState.AbstractBuilder<?, ?> newOnDemandRaftStateBuilder()", "full_signature": "protected OnDemandRaftState.AbstractBuilder<?, ?> newOnDemandRaftStateBuilder()", "class_method_signature": "RaftActor.newOnDemandRaftStateBuilder()", "testcase": false, "constructor": false}, {"identifier": "handleBehaviorChange", "parameters": "(final BehaviorState oldBehaviorState, final RaftActorBehavior currentBehavior)", "modifiers": "private", "return": "void", "signature": "void handleBehaviorChange(final BehaviorState oldBehaviorState, final RaftActorBehavior currentBehavior)", "full_signature": "private void handleBehaviorChange(final BehaviorState oldBehaviorState, final RaftActorBehavior currentBehavior)", "class_method_signature": "RaftActor.handleBehaviorChange(final BehaviorState oldBehaviorState, final RaftActorBehavior currentBehavior)", "testcase": false, "constructor": false}, {"identifier": "handleApplyState", "parameters": "(final ApplyState applyState)", "modifiers": "private", "return": "void", "signature": "void handleApplyState(final ApplyState applyState)", "full_signature": "private void handleApplyState(final ApplyState applyState)", "class_method_signature": "RaftActor.handleApplyState(final ApplyState applyState)", "testcase": false, "constructor": false}, {"identifier": "newLeaderStateChanged", "parameters": "(final String memberId, final String leaderId,\n            final short leaderPayloadVersion)", "modifiers": "protected", "return": "LeaderStateChanged", "signature": "LeaderStateChanged newLeaderStateChanged(final String memberId, final String leaderId,\n            final short leaderPayloadVersion)", "full_signature": "protected LeaderStateChanged newLeaderStateChanged(final String memberId, final String leaderId,\n            final short leaderPayloadVersion)", "class_method_signature": "RaftActor.newLeaderStateChanged(final String memberId, final String leaderId,\n            final short leaderPayloadVersion)", "testcase": false, "constructor": false}, {"identifier": "snapshotSequenceNr", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long snapshotSequenceNr()", "full_signature": "@Override public long snapshotSequenceNr()", "class_method_signature": "RaftActor.snapshotSequenceNr()", "testcase": false, "constructor": false}, {"identifier": "persistData", "parameters": "(final ActorRef clientActor, final Identifier identifier, final Payload data,\n            final boolean batchHint)", "modifiers": "protected final", "return": "void", "signature": "void persistData(final ActorRef clientActor, final Identifier identifier, final Payload data,\n            final boolean batchHint)", "full_signature": "protected final void persistData(final ActorRef clientActor, final Identifier identifier, final Payload data,\n            final boolean batchHint)", "class_method_signature": "RaftActor.persistData(final ActorRef clientActor, final Identifier identifier, final Payload data,\n            final boolean batchHint)", "testcase": false, "constructor": false}, {"identifier": "replicatedLog", "parameters": "()", "modifiers": "private", "return": "ReplicatedLog", "signature": "ReplicatedLog replicatedLog()", "full_signature": "private ReplicatedLog replicatedLog()", "class_method_signature": "RaftActor.replicatedLog()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getId()", "full_signature": "protected String getId()", "class_method_signature": "RaftActor.getId()", "testcase": false, "constructor": false}, {"identifier": "setCurrentBehavior", "parameters": "(final RaftActorBehavior behavior)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setCurrentBehavior(final RaftActorBehavior behavior)", "full_signature": "@VisibleForTesting void setCurrentBehavior(final RaftActorBehavior behavior)", "class_method_signature": "RaftActor.setCurrentBehavior(final RaftActorBehavior behavior)", "testcase": false, "constructor": false}, {"identifier": "getCurrentBehavior", "parameters": "()", "modifiers": "protected", "return": "RaftActorBehavior", "signature": "RaftActorBehavior getCurrentBehavior()", "full_signature": "protected RaftActorBehavior getCurrentBehavior()", "class_method_signature": "RaftActor.getCurrentBehavior()", "testcase": false, "constructor": false}, {"identifier": "isLeader", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isLeader()", "full_signature": "protected boolean isLeader()", "class_method_signature": "RaftActor.isLeader()", "testcase": false, "constructor": false}, {"identifier": "isLeaderActive", "parameters": "()", "modifiers": "protected final", "return": "boolean", "signature": "boolean isLeaderActive()", "full_signature": "protected final boolean isLeaderActive()", "class_method_signature": "RaftActor.isLeaderActive()", "testcase": false, "constructor": false}, {"identifier": "isLeadershipTransferInProgress", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isLeadershipTransferInProgress()", "full_signature": "protected boolean isLeadershipTransferInProgress()", "class_method_signature": "RaftActor.isLeadershipTransferInProgress()", "testcase": false, "constructor": false}, {"identifier": "getLeader", "parameters": "()", "modifiers": "public", "return": "ActorSelection", "signature": "ActorSelection getLeader()", "full_signature": "public ActorSelection getLeader()", "class_method_signature": "RaftActor.getLeader()", "testcase": false, "constructor": false}, {"identifier": "getLeaderId", "parameters": "()", "modifiers": "protected final", "return": "String", "signature": "String getLeaderId()", "full_signature": "protected final String getLeaderId()", "class_method_signature": "RaftActor.getLeaderId()", "testcase": false, "constructor": false}, {"identifier": "getRaftState", "parameters": "()", "modifiers": "@VisibleForTesting protected final", "return": "RaftState", "signature": "RaftState getRaftState()", "full_signature": "@VisibleForTesting protected final RaftState getRaftState()", "class_method_signature": "RaftActor.getRaftState()", "testcase": false, "constructor": false}, {"identifier": "getCurrentTerm", "parameters": "()", "modifiers": "protected", "return": "Long", "signature": "Long getCurrentTerm()", "full_signature": "protected Long getCurrentTerm()", "class_method_signature": "RaftActor.getCurrentTerm()", "testcase": false, "constructor": false}, {"identifier": "getRaftActorContext", "parameters": "()", "modifiers": "protected", "return": "RaftActorContext", "signature": "RaftActorContext getRaftActorContext()", "full_signature": "protected RaftActorContext getRaftActorContext()", "class_method_signature": "RaftActor.getRaftActorContext()", "testcase": false, "constructor": false}, {"identifier": "updateConfigParams", "parameters": "(final ConfigParams configParams)", "modifiers": "protected", "return": "void", "signature": "void updateConfigParams(final ConfigParams configParams)", "full_signature": "protected void updateConfigParams(final ConfigParams configParams)", "class_method_signature": "RaftActor.updateConfigParams(final ConfigParams configParams)", "testcase": false, "constructor": false}, {"identifier": "persistence", "parameters": "()", "modifiers": "public final", "return": "DataPersistenceProvider", "signature": "DataPersistenceProvider persistence()", "full_signature": "public final DataPersistenceProvider persistence()", "class_method_signature": "RaftActor.persistence()", "testcase": false, "constructor": false}, {"identifier": "setPersistence", "parameters": "(final DataPersistenceProvider provider)", "modifiers": "public", "return": "void", "signature": "void setPersistence(final DataPersistenceProvider provider)", "full_signature": "public void setPersistence(final DataPersistenceProvider provider)", "class_method_signature": "RaftActor.setPersistence(final DataPersistenceProvider provider)", "testcase": false, "constructor": false}, {"identifier": "setPersistence", "parameters": "(final boolean persistent)", "modifiers": "protected", "return": "void", "signature": "void setPersistence(final boolean persistent)", "full_signature": "protected void setPersistence(final boolean persistent)", "class_method_signature": "RaftActor.setPersistence(final boolean persistent)", "testcase": false, "constructor": false}, {"identifier": "setPeerAddress", "parameters": "(final String peerId, final String peerAddress)", "modifiers": "protected", "return": "void", "signature": "void setPeerAddress(final String peerId, final String peerAddress)", "full_signature": "protected void setPeerAddress(final String peerId, final String peerAddress)", "class_method_signature": "RaftActor.setPeerAddress(final String peerId, final String peerAddress)", "testcase": false, "constructor": false}, {"identifier": "applyState", "parameters": "(ActorRef clientActor, Identifier identifier, Object data)", "modifiers": "protected abstract", "return": "void", "signature": "void applyState(ActorRef clientActor, Identifier identifier, Object data)", "full_signature": "protected abstract void applyState(ActorRef clientActor, Identifier identifier, Object data)", "class_method_signature": "RaftActor.applyState(ActorRef clientActor, Identifier identifier, Object data)", "testcase": false, "constructor": false}, {"identifier": "getRaftActorRecoveryCohort", "parameters": "()", "modifiers": "protected abstract @NonNull", "return": "RaftActorRecoveryCohort", "signature": "RaftActorRecoveryCohort getRaftActorRecoveryCohort()", "full_signature": "protected abstract @NonNull RaftActorRecoveryCohort getRaftActorRecoveryCohort()", "class_method_signature": "RaftActor.getRaftActorRecoveryCohort()", "testcase": false, "constructor": false}, {"identifier": "onRecoveryComplete", "parameters": "()", "modifiers": "protected abstract", "return": "void", "signature": "void onRecoveryComplete()", "full_signature": "protected abstract void onRecoveryComplete()", "class_method_signature": "RaftActor.onRecoveryComplete()", "testcase": false, "constructor": false}, {"identifier": "getRaftActorSnapshotCohort", "parameters": "()", "modifiers": "protected abstract @NonNull", "return": "RaftActorSnapshotCohort", "signature": "RaftActorSnapshotCohort getRaftActorSnapshotCohort()", "full_signature": "protected abstract @NonNull RaftActorSnapshotCohort getRaftActorSnapshotCohort()", "class_method_signature": "RaftActor.getRaftActorSnapshotCohort()", "testcase": false, "constructor": false}, {"identifier": "onStateChanged", "parameters": "()", "modifiers": "protected abstract", "return": "void", "signature": "void onStateChanged()", "full_signature": "protected abstract void onStateChanged()", "class_method_signature": "RaftActor.onStateChanged()", "testcase": false, "constructor": false}, {"identifier": "getRoleChangeNotifier", "parameters": "()", "modifiers": "protected abstract", "return": "Optional<ActorRef>", "signature": "Optional<ActorRef> getRoleChangeNotifier()", "full_signature": "protected abstract Optional<ActorRef> getRoleChangeNotifier()", "class_method_signature": "RaftActor.getRoleChangeNotifier()", "testcase": false, "constructor": false}, {"identifier": "onVotingStateChangeComplete", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void onVotingStateChangeComplete()", "full_signature": "protected void onVotingStateChangeComplete()", "class_method_signature": "RaftActor.onVotingStateChangeComplete()", "testcase": false, "constructor": false}, {"identifier": "pauseLeader", "parameters": "(final Runnable operation)", "modifiers": "protected", "return": "void", "signature": "void pauseLeader(final Runnable operation)", "full_signature": "protected void pauseLeader(final Runnable operation)", "class_method_signature": "RaftActor.pauseLeader(final Runnable operation)", "testcase": false, "constructor": false}, {"identifier": "unpauseLeader", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void unpauseLeader()", "full_signature": "protected void unpauseLeader()", "class_method_signature": "RaftActor.unpauseLeader()", "testcase": false, "constructor": false}, {"identifier": "onLeaderChanged", "parameters": "(final String oldLeader, final String newLeader)", "modifiers": "protected", "return": "void", "signature": "void onLeaderChanged(final String oldLeader, final String newLeader)", "full_signature": "protected void onLeaderChanged(final String oldLeader, final String newLeader)", "class_method_signature": "RaftActor.onLeaderChanged(final String oldLeader, final String newLeader)", "testcase": false, "constructor": false}, {"identifier": "getLeaderAddress", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getLeaderAddress()", "full_signature": "private String getLeaderAddress()", "class_method_signature": "RaftActor.getLeaderAddress()", "testcase": false, "constructor": false}, {"identifier": "hasFollowers", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean hasFollowers()", "full_signature": "protected boolean hasFollowers()", "class_method_signature": "RaftActor.hasFollowers()", "testcase": false, "constructor": false}, {"identifier": "captureSnapshot", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void captureSnapshot()", "full_signature": "private void captureSnapshot()", "class_method_signature": "RaftActor.captureSnapshot()", "testcase": false, "constructor": false}, {"identifier": "becomeNonVoting", "parameters": "()", "modifiers": "", "return": "void", "signature": "void becomeNonVoting()", "full_signature": " void becomeNonVoting()", "class_method_signature": "RaftActor.becomeNonVoting()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/RaftActor.java"}, "focal_method": {"identifier": "handleCommand", "parameters": "(final Object message)", "modifiers": "@Deprecated @Override // FIXME: make this method final once our unit tests do not need to override it protected", "return": "void", "body": "@Deprecated\n    @Override\n    // FIXME: make this method final once our unit tests do not need to override it\n    protected void handleCommand(final Object message) {\n        if (serverConfigurationSupport.handleMessage(message, getSender())) {\n            return;\n        }\n        if (snapshotSupport.handleSnapshotMessage(message, getSender())) {\n            return;\n        }\n        if (message instanceof ApplyState) {\n            ApplyState applyState = (ApplyState) message;\n\n            if (!hasFollowers()) {\n                // for single node, the capture should happen after the apply state\n                // as we delete messages from the persistent journal which have made it to the snapshot\n                // capturing the snapshot before applying makes the persistent journal and snapshot out of sync\n                // and recovery shows data missing\n                context.getReplicatedLog().captureSnapshotIfReady(applyState.getReplicatedLogEntry());\n\n                context.getSnapshotManager().trimLog(context.getLastApplied());\n            }\n\n            possiblyHandleBehaviorMessage(message);\n        } else if (message instanceof ApplyJournalEntries) {\n            ApplyJournalEntries applyEntries = (ApplyJournalEntries) message;\n            LOG.debug(\"{}: Persisting ApplyJournalEntries with index={}\", persistenceId(), applyEntries.getToIndex());\n\n            persistence().persistAsync(applyEntries, NoopProcedure.instance());\n\n        } else if (message instanceof FindLeader) {\n            getSender().tell(\n                new FindLeaderReply(getLeaderAddress()),\n                getSelf()\n            );\n        } else if (message instanceof GetOnDemandRaftState) {\n            onGetOnDemandRaftStats();\n        } else if (message instanceof InitiateCaptureSnapshot) {\n            captureSnapshot();\n        } else if (message instanceof SwitchBehavior) {\n            switchBehavior((SwitchBehavior) message);\n        } else if (message instanceof LeaderTransitioning) {\n            onLeaderTransitioning((LeaderTransitioning)message);\n        } else if (message instanceof Shutdown) {\n            onShutDown();\n        } else if (message instanceof Runnable) {\n            ((Runnable)message).run();\n        } else if (message instanceof NoopPayload) {\n            persistData(null, null, (NoopPayload) message, false);\n        } else if (message instanceof RequestLeadership) {\n            onRequestLeadership((RequestLeadership) message);\n        } else if (!possiblyHandleBehaviorMessage(message)) {\n            handleNonRaftCommand(message);\n        }\n    }", "signature": "void handleCommand(final Object message)", "full_signature": "@Deprecated @Override // FIXME: make this method final once our unit tests do not need to override it protected void handleCommand(final Object message)", "class_method_signature": "RaftActor.handleCommand(final Object message)", "testcase": false, "constructor": false, "invocations": ["handleMessage", "getSender", "handleSnapshotMessage", "getSender", "hasFollowers", "captureSnapshotIfReady", "getReplicatedLog", "getReplicatedLogEntry", "trimLog", "getSnapshotManager", "getLastApplied", "possiblyHandleBehaviorMessage", "debug", "persistenceId", "getToIndex", "persistAsync", "persistence", "instance", "tell", "getSender", "getLeaderAddress", "getSelf", "onGetOnDemandRaftStats", "captureSnapshot", "switchBehavior", "onLeaderTransitioning", "onShutDown", "run", "persistData", "onRequestLeadership", "possiblyHandleBehaviorMessage", "handleNonRaftCommand"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}