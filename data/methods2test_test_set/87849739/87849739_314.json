{"test_class": {"identifier": "ConnectivityProxyActorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ThingId KNOWN_THING_ID = ThingId.of(\"ditto\", \"myThing\");", "modifier": "private static final", "type": "ThingId", "declarator": "KNOWN_THING_ID = ThingId.of(\"ditto\", \"myThing\")", "var_name": "KNOWN_THING_ID"}, {"original_string": "private static ActorSystem actorSystem;", "modifier": "private static", "type": "ActorSystem", "declarator": "actorSystem", "var_name": "actorSystem"}], "file": "services/connectivity/messaging/src/test/java/org/eclipse/ditto/services/connectivity/messaging/ConnectivityProxyActorTest.java"}, "test_case": {"identifier": "testRetrieveThings", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRetrieveThings() {\n        new TestKit(actorSystem) {{\n            final Props props = ConnectivityProxyActor.props(getRef());\n            final ActorRef proxy = actorSystem.actorOf(props);\n\n            final List<Thing> thingList = IntStream.range(0, 10)\n                    .mapToObj(i -> ThingId.of(KNOWN_THING_ID.getNamespace(), KNOWN_THING_ID.getName() + \"-\" + i))\n                    .map(id -> Thing.newBuilder().setId(id).build())\n                    .collect(Collectors.toList());\n            final ThingId[] thingIdsArray =\n                    thingList.stream().map(Thing::getEntityId).map(Optional::get).toArray(ThingId[]::new);\n\n            final String correlationId = UUID.randomUUID().toString();\n            final DittoHeaders headers =\n                    DittoHeaders.newBuilder().correlationId(correlationId).contentType(\"application/json\").build();\n            final RetrieveThings retrieveThings =\n                    RetrieveThings.getBuilder(thingIdsArray).dittoHeaders(headers).build();\n\n            // WHEN: RetrieveThings is sent to proxy actor\n            proxy.tell(retrieveThings, getRef());\n\n            // THEN: command is forwarded to concierge\n            expectMsg(retrieveThings);\n\n            // WHEN: concierge responds with SourceRef of things\n            final SourceRef<RetrieveThingResponse> retrieveThingResponseSourceRef =\n                    Source.from(retrieveThings.getThingEntityIds())\n                            .map(thingId -> Thing.newBuilder().setId(thingId).build())\n                            .map(thing -> RetrieveThingResponse.\n                                    of(thing.getEntityId().orElseThrow(), thing, DittoHeaders.empty()))\n                            .runWith(StreamRefs.sourceRef(), actorSystem);\n\n            getLastSender().tell(retrieveThingResponseSourceRef, ActorRef.noSender());\n\n            // THEN: original sender receives\n            final RetrieveThingsResponse retrieveThingsResponse = expectMsgClass(RetrieveThingsResponse.class);\n\n            assertThat(retrieveThingsResponse.getThings()).containsExactlyElementsOf(thingList);\n        }};\n    }", "signature": "void testRetrieveThings()", "full_signature": "@Test public void testRetrieveThings()", "class_method_signature": "ConnectivityProxyActorTest.testRetrieveThings()", "testcase": true, "constructor": false, "invocations": ["props", "getRef", "actorOf", "collect", "map", "mapToObj", "range", "of", "getNamespace", "getName", "build", "setId", "newBuilder", "toList", "toArray", "map", "map", "stream", "toString", "randomUUID", "build", "contentType", "correlationId", "newBuilder", "build", "dittoHeaders", "getBuilder", "tell", "getRef", "expectMsg", "runWith", "map", "map", "from", "getThingEntityIds", "build", "setId", "newBuilder", "of", "orElseThrow", "getEntityId", "empty", "sourceRef", "tell", "getLastSender", "noSender", "expectMsgClass", "containsExactlyElementsOf", "assertThat", "getThings"]}, "focal_class": {"identifier": "ConnectivityProxyActor", "superclass": "extends AbstractActor", "interfaces": "", "fields": [{"original_string": "public static final String ACTOR_NAME = \"connectivityProxyActor\";", "modifier": "public static final", "type": "String", "declarator": "ACTOR_NAME = \"connectivityProxyActor\"", "var_name": "ACTOR_NAME"}, {"original_string": "private final DittoDiagnosticLoggingAdapter log = getDiagnosticLoggingAdapter(this);", "modifier": "private final", "type": "DittoDiagnosticLoggingAdapter", "declarator": "log = getDiagnosticLoggingAdapter(this)", "var_name": "log"}, {"original_string": "private final ActorRef conciergeForwarder;", "modifier": "private final", "type": "ActorRef", "declarator": "conciergeForwarder", "var_name": "conciergeForwarder"}, {"original_string": "private final ActorRef aggregatorProxyActor;", "modifier": "private final", "type": "ActorRef", "declarator": "aggregatorProxyActor", "var_name": "aggregatorProxyActor"}], "methods": [{"identifier": "ConnectivityProxyActor", "parameters": "(final ActorRef conciergeForwarder)", "modifiers": "private", "return": "", "signature": " ConnectivityProxyActor(final ActorRef conciergeForwarder)", "full_signature": "private  ConnectivityProxyActor(final ActorRef conciergeForwarder)", "class_method_signature": "ConnectivityProxyActor.ConnectivityProxyActor(final ActorRef conciergeForwarder)", "testcase": false, "constructor": true}, {"identifier": "props", "parameters": "(final ActorRef conciergeForwarder)", "modifiers": "public static", "return": "Props", "signature": "Props props(final ActorRef conciergeForwarder)", "full_signature": "public static Props props(final ActorRef conciergeForwarder)", "class_method_signature": "ConnectivityProxyActor.props(final ActorRef conciergeForwarder)", "testcase": false, "constructor": false}, {"identifier": "createReceive", "parameters": "()", "modifiers": "@Override public", "return": "Receive", "signature": "Receive createReceive()", "full_signature": "@Override public Receive createReceive()", "class_method_signature": "ConnectivityProxyActor.createReceive()", "testcase": false, "constructor": false}], "file": "services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/ConnectivityProxyActor.java"}, "focal_method": {"identifier": "props", "parameters": "(final ActorRef conciergeForwarder)", "modifiers": "public static", "return": "Props", "body": "public static Props props(final ActorRef conciergeForwarder) {\n        return Props.create(ConnectivityProxyActor.class, conciergeForwarder);\n    }", "signature": "Props props(final ActorRef conciergeForwarder)", "full_signature": "public static Props props(final ActorRef conciergeForwarder)", "class_method_signature": "ConnectivityProxyActor.props(final ActorRef conciergeForwarder)", "testcase": false, "constructor": false, "invocations": ["create"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}