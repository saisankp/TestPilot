{"test_class": {"identifier": "GCDExecutorServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ExecutorService fixture;", "modifier": "", "type": "ExecutorService", "declarator": "fixture", "var_name": "fixture"}], "file": "rococoa/rococoa-contrib/src/test/java/org/rococoa/contrib/dispatch/GCDExecutorServiceTest.java"}, "test_case": {"identifier": "testShutdownNow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShutdownNow() throws InterruptedException {\n        Object lock = new Object();\n        int count = 100;\n        queueUpSomeTasks(lock, count);\n        List<Runnable> outstandingTasks = fixture.shutdownNow();\n        assertEquals(count, outstandingTasks.size());\n        assertTrue(fixture.isShutdown());\n        synchronized(lock) {\n            lock.notifyAll();\n        }\n        assertTrue(fixture.awaitTermination(10, TimeUnit.SECONDS));\n    }", "signature": "void testShutdownNow()", "full_signature": "@Test public void testShutdownNow()", "class_method_signature": "GCDExecutorServiceTest.testShutdownNow()", "testcase": true, "constructor": false, "invocations": ["queueUpSomeTasks", "shutdownNow", "assertEquals", "size", "assertTrue", "isShutdown", "notifyAll", "assertTrue", "awaitTermination"]}, "focal_class": {"identifier": "GCDExecutorService", "superclass": "extends AbstractExecutorService", "interfaces": "", "fields": [{"original_string": "private static final Selector RUN_SELECTOR = Foundation.selector(\"run\");", "modifier": "private static final", "type": "Selector", "declarator": "RUN_SELECTOR = Foundation.selector(\"run\")", "var_name": "RUN_SELECTOR"}, {"original_string": "private static final RuntimePermission shutdownPerm = new RuntimePermission(\"modifyThread\");", "modifier": "private static final", "type": "RuntimePermission", "declarator": "shutdownPerm = new RuntimePermission(\"modifyThread\")", "var_name": "shutdownPerm"}, {"original_string": "private final NSOperationQueue queue;", "modifier": "private final", "type": "NSOperationQueue", "declarator": "queue", "var_name": "queue"}, {"original_string": "private volatile State state = State.RUNNING;", "modifier": "private volatile", "type": "State", "declarator": "state = State.RUNNING", "var_name": "state"}, {"original_string": "private final ReentrantLock shutdownLock = new ReentrantLock();", "modifier": "private final", "type": "ReentrantLock", "declarator": "shutdownLock = new ReentrantLock()", "var_name": "shutdownLock"}, {"original_string": "private final Condition shutdownCondition = shutdownLock.newCondition();", "modifier": "private final", "type": "Condition", "declarator": "shutdownCondition = shutdownLock.newCondition()", "var_name": "shutdownCondition"}, {"original_string": "private final Map<ID, InvocationFutureTask<?>> tasks = new ConcurrentHashMap<ID, InvocationFutureTask<?>>();", "modifier": "private final", "type": "Map<ID, InvocationFutureTask<?>>", "declarator": "tasks = new ConcurrentHashMap<ID, InvocationFutureTask<?>>()", "var_name": "tasks"}], "methods": [{"identifier": "GCDExecutorService", "parameters": "()", "modifiers": "public", "return": "", "signature": " GCDExecutorService()", "full_signature": "public  GCDExecutorService()", "class_method_signature": "GCDExecutorService.GCDExecutorService()", "testcase": false, "constructor": true}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "GCDExecutorService.shutdown()", "testcase": false, "constructor": false}, {"identifier": "shutdownNow", "parameters": "()", "modifiers": "public", "return": "List<Runnable>", "signature": "List<Runnable> shutdownNow()", "full_signature": "public List<Runnable> shutdownNow()", "class_method_signature": "GCDExecutorService.shutdownNow()", "testcase": false, "constructor": false}, {"identifier": "isShutdown", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isShutdown()", "full_signature": "public boolean isShutdown()", "class_method_signature": "GCDExecutorService.isShutdown()", "testcase": false, "constructor": false}, {"identifier": "isTerminated", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTerminated()", "full_signature": "public boolean isTerminated()", "class_method_signature": "GCDExecutorService.isTerminated()", "testcase": false, "constructor": false}, {"identifier": "awaitTermination", "parameters": "(long timeout, TimeUnit unit)", "modifiers": "public", "return": "boolean", "signature": "boolean awaitTermination(long timeout, TimeUnit unit)", "full_signature": "public boolean awaitTermination(long timeout, TimeUnit unit)", "class_method_signature": "GCDExecutorService.awaitTermination(long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Runnable command)", "modifiers": "public", "return": "void", "signature": "void execute(Runnable command)", "full_signature": "public void execute(Runnable command)", "class_method_signature": "GCDExecutorService.execute(Runnable command)", "testcase": false, "constructor": false}, {"identifier": "newTaskFor", "parameters": "(Runnable runnable, T value)", "modifiers": "@Override protected", "return": "RunnableFuture<T>", "signature": "RunnableFuture<T> newTaskFor(Runnable runnable, T value)", "full_signature": "@Override protected RunnableFuture<T> newTaskFor(Runnable runnable, T value)", "class_method_signature": "GCDExecutorService.newTaskFor(Runnable runnable, T value)", "testcase": false, "constructor": false}, {"identifier": "newTaskFor", "parameters": "(Callable<T> callable)", "modifiers": "@Override protected", "return": "RunnableFuture<T>", "signature": "RunnableFuture<T> newTaskFor(Callable<T> callable)", "full_signature": "@Override protected RunnableFuture<T> newTaskFor(Callable<T> callable)", "class_method_signature": "GCDExecutorService.newTaskFor(Callable<T> callable)", "testcase": false, "constructor": false}, {"identifier": "terminateIfDone", "parameters": "(boolean queueEmpty)", "modifiers": "private", "return": "void", "signature": "void terminateIfDone(boolean queueEmpty)", "full_signature": "private void terminateIfDone(boolean queueEmpty)", "class_method_signature": "GCDExecutorService.terminateIfDone(boolean queueEmpty)", "testcase": false, "constructor": false}, {"identifier": "doWithAutoreleasePool", "parameters": "(Callable<R> callable)", "modifiers": "private static", "return": "R", "signature": "R doWithAutoreleasePool(Callable<R> callable)", "full_signature": "private static R doWithAutoreleasePool(Callable<R> callable)", "class_method_signature": "GCDExecutorService.doWithAutoreleasePool(Callable<R> callable)", "testcase": false, "constructor": false}], "file": "rococoa/rococoa-contrib/src/main/java/org/rococoa/contrib/dispatch/GCDExecutorService.java"}, "focal_method": {"identifier": "shutdownNow", "parameters": "()", "modifiers": "public", "return": "List<Runnable>", "body": "public List<Runnable> shutdownNow() {\n        SecurityManager sm = System.getSecurityManager();\n\tif ( sm != null ) {\n            sm.checkPermission(shutdownPerm);\n        }\n        return doWithAutoreleasePool(new Callable<List<Runnable>>() {\n            public List<Runnable> call() {\n                try {\n                    shutdownLock.lock();\n                    state = State.SHUTDOWN;\n                    NSArray queuedTasks = queue.operations();\n                    List<Runnable> result = new ArrayList<Runnable>(queuedTasks.count());\n                    for (int i = 0; i < queuedTasks.count(); i++) {\n                        NSOperation o = Rococoa.cast(queuedTasks.objectAtIndex(i), NSOperation.class);\n                        InvocationFutureTask<?> task = tasks.get(o.id());\n                        if ( task != null && !(o.isFinished() || o.isCancelled()) ) {\n                            result.add(task.getOriginalRunnable());\n                        }\n                    }\n                    queue.cancelAllOperations();\n                    tasks.clear();\n                    terminateIfDone(queue.operationCount().intValue() == 0);\n                    return result;\n                } finally {\n                    shutdownLock.unlock();\n                }\n            }\n        });\n    }", "signature": "List<Runnable> shutdownNow()", "full_signature": "public List<Runnable> shutdownNow()", "class_method_signature": "GCDExecutorService.shutdownNow()", "testcase": false, "constructor": false, "invocations": ["getSecurityManager", "checkPermission", "doWithAutoreleasePool", "lock", "operations", "count", "count", "cast", "objectAtIndex", "get", "id", "isFinished", "isCancelled", "add", "getOriginalRunnable", "cancelAllOperations", "clear", "terminateIfDone", "intValue", "operationCount", "unlock"]}, "repository": {"repo_id": 32143635, "url": "https://github.com/iterate-ch/rococoa", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 17, "size": 2377, "license": "licensed"}}