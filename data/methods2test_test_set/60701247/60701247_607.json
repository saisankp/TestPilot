{"test_class": {"identifier": "MemoryClassSetViewTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long MOCK_CLASS_ID = 1;", "modifier": "private static final", "type": "long", "declarator": "MOCK_CLASS_ID = 1", "var_name": "MOCK_CLASS_ID"}, {"original_string": "private static final String MOCK_CLASS_NAME = \"MockClass\";", "modifier": "private static final", "type": "String", "declarator": "MOCK_CLASS_NAME = \"MockClass\"", "var_name": "MOCK_CLASS_NAME"}, {"original_string": "private final FakeTimer myTimer = new FakeTimer();", "modifier": "private final", "type": "FakeTimer", "declarator": "myTimer = new FakeTimer()", "var_name": "myTimer"}, {"original_string": "@NotNull private final FakeMemoryService myMemoryService = new FakeMemoryService();", "modifier": "@NotNull private final", "type": "FakeMemoryService", "declarator": "myMemoryService = new FakeMemoryService()", "var_name": "myMemoryService"}, {"original_string": "@NotNull private final FakeIdeProfilerComponents myFakeIdeProfilerComponents = new FakeIdeProfilerComponents();", "modifier": "@NotNull private final", "type": "FakeIdeProfilerComponents", "declarator": "myFakeIdeProfilerComponents = new FakeIdeProfilerComponents()", "var_name": "myFakeIdeProfilerComponents"}, {"original_string": "@Rule public final FakeGrpcChannel myGrpcChannel =\n    new FakeGrpcChannel(\"MemoryInstanceViewTestGrpc\", new FakeTransportService(myTimer), new FakeProfilerService(myTimer), myMemoryService);", "modifier": "@Rule public final", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel =\n    new FakeGrpcChannel(\"MemoryInstanceViewTestGrpc\", new FakeTransportService(myTimer), new FakeProfilerService(myTimer), myMemoryService)", "var_name": "myGrpcChannel"}, {"original_string": "private MemoryProfilerStage myStage;", "modifier": "private", "type": "MemoryProfilerStage", "declarator": "myStage", "var_name": "myStage"}, {"original_string": "private MemoryClassSetView myClassSetView;", "modifier": "private", "type": "MemoryClassSetView", "declarator": "myClassSetView", "var_name": "myClassSetView"}, {"original_string": "private JTree myClassSetTree;", "modifier": "private", "type": "JTree", "declarator": "myClassSetTree", "var_name": "myClassSetTree"}, {"original_string": "private FakeCaptureObject myCaptureObject;", "modifier": "private", "type": "FakeCaptureObject", "declarator": "myCaptureObject", "var_name": "myCaptureObject"}, {"original_string": "private List<InstanceObject> myInstanceObjects;", "modifier": "private", "type": "List<InstanceObject>", "declarator": "myInstanceObjects", "var_name": "myInstanceObjects"}, {"original_string": "private MemoryObjectTreeNode<HeapSet> myClassifierSetHeapNode;", "modifier": "private", "type": "MemoryObjectTreeNode<HeapSet>", "declarator": "myClassifierSetHeapNode", "var_name": "myClassifierSetHeapNode"}, {"original_string": "private MemoryObjectTreeNode<MemoryObject> myClassSetRootNode;", "modifier": "private", "type": "MemoryObjectTreeNode<MemoryObject>", "declarator": "myClassSetRootNode", "var_name": "myClassSetRootNode"}, {"original_string": "private MemoryProfilerStageView myStageView;", "modifier": "private", "type": "MemoryProfilerStageView", "declarator": "myStageView", "var_name": "myStageView"}, {"original_string": "private JTree myClassifierSetTree;", "modifier": "private", "type": "JTree", "declarator": "myClassifierSetTree", "var_name": "myClassifierSetTree"}], "file": "profilers-ui/testSrc/com/android/tools/profilers/memory/MemoryClassSetViewTest.java"}, "test_case": {"identifier": "fieldSelectionAndNavigationTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void fieldSelectionAndNavigationTest() {\n    final long TEST_CLASS_ID = 1, TEST_FIELD_ID = 2;\n    final String TEST_CLASS_NAME = \"com.Foo\";\n    final String TEST_FIELD_NAME = \"com.Field\";\n\n    MemoryAspectObserver aspectObserver = new MemoryAspectObserver(myStage.getAspect());\n\n    CodeLocation codeLocationFoo = new CodeLocation.Builder(\"Foo\").setMethodName(\"fooMethod1\").setLineNumber(5).build();\n    CodeLocation codeLocationBar = new CodeLocation.Builder(\"Bar\").setMethodName(\"barMethod1\").setLineNumber(20).build();\n\n    //noinspection ConstantConditions\n    AllocationStack callstackFoo = AllocationStack.newBuilder()\n      .setFullStack(\n        AllocationStack.StackFrameWrapper.newBuilder()\n          .addFrames(\n            AllocationStack.StackFrame.newBuilder()\n              .setClassName(codeLocationFoo.getClassName())\n              .setMethodName(codeLocationFoo.getMethodName())\n              .setLineNumber(codeLocationFoo.getLineNumber() + 1)))\n      .build();\n    //noinspection ConstantConditions\n    AllocationStack callstackBar = AllocationStack.newBuilder()\n      .setFullStack(\n        AllocationStack.StackFrameWrapper.newBuilder()\n          .addFrames(\n            AllocationStack.StackFrame.newBuilder()\n              .setClassName(codeLocationBar.getClassName())\n              .setMethodName(codeLocationBar.getMethodName())\n              .setLineNumber(codeLocationBar.getLineNumber() + 1)))\n      .build();\n\n    FakeCaptureObject captureObject = new FakeCaptureObject.Builder().build();\n    FakeInstanceObject instanceFooField =\n      new FakeInstanceObject.Builder(captureObject, TEST_FIELD_ID, TEST_FIELD_NAME).setName(\"instanceFooField\").build();\n    FakeInstanceObject instanceBarField =\n      new FakeInstanceObject.Builder(captureObject, TEST_FIELD_ID, TEST_FIELD_NAME).setName(\"instanceBarField\").build();\n    FakeFieldObject fieldFoo = new FakeFieldObject(\"fieldFoo\", OBJECT, instanceFooField);\n    FakeFieldObject fieldBar = new FakeFieldObject(\"fieldBar\", OBJECT, instanceBarField);\n\n    FakeInstanceObject instanceFoo =\n      new FakeInstanceObject.Builder(captureObject, TEST_CLASS_ID, TEST_CLASS_NAME).setName(\"instanceFoo\").setAllocationStack(callstackFoo)\n        .setFields(Collections.singletonList(fieldFoo.getFieldName())).build();\n    instanceFoo.setFieldValue(fieldFoo.getFieldName(), fieldFoo.getValueType(), instanceFooField);\n    FakeInstanceObject instanceBar =\n      new FakeInstanceObject.Builder(captureObject, TEST_CLASS_ID, TEST_CLASS_NAME).setName(\"instanceBar\").setAllocationStack(callstackBar)\n        .setFields(Collections.singletonList(fieldBar.getFieldName())).build();\n    instanceBar.setFieldValue(fieldBar.getFieldName(), fieldBar.getValueType(), instanceBarField);\n\n    Set<InstanceObject> instanceObjects = new HashSet<>(Arrays.asList(instanceFoo, instanceBar, instanceFooField, instanceBarField));\n    captureObject.addInstanceObjects(instanceObjects);\n    myStage\n      .selectCaptureDuration(new CaptureDurationData<>(1, false, false, new CaptureEntry<CaptureObject>(new Object(), () -> captureObject)),\n                             null);\n\n    assertThat(myStage.getConfiguration().getClassGrouping()).isEqualTo(ARRANGE_BY_CLASS);\n    assertThat(myStage.getSelectedHeapSet()).isNotNull();\n    assertThat(myStage.getSelectedHeapSet().getId()).isEqualTo(FakeCaptureObject.DEFAULT_HEAP_ID);\n    myStage.selectClassSet(findChildClassSetWithName(myStage.getSelectedHeapSet(), TEST_CLASS_NAME));\n    myStage.selectInstanceObject(instanceFoo);\n    myStage.selectFieldObjectPath(Collections.singletonList(fieldFoo));\n    aspectObserver.assertAndResetCounts(0, 1, 1, 0, 2, 2, 1, 1);\n\n    myStage.getConfiguration().setClassGrouping(ARRANGE_BY_CALLSTACK);\n    aspectObserver.assertAndResetCounts(0, 0, 0, 1, 0, 1, 2, 2);\n    assertThat(myStage.getSelectedInstanceObject()).isEqualTo(instanceFoo);\n    assertThat(myStage.getSelectedFieldObjectPath()).isEqualTo(Collections.singletonList(fieldFoo));\n\n    myClassSetTree = myClassSetView.getTree();\n    assertThat(myClassSetTree).isNotNull();\n    Object classSetRoot = myClassSetTree.getModel().getRoot();\n    assertThat(classSetRoot).isInstanceOf(MemoryObjectTreeNode.class);\n    assertThat(((MemoryObjectTreeNode)classSetRoot).getAdapter()).isInstanceOf(ClassSet.class);\n    //noinspection unchecked\n    myClassSetRootNode = (MemoryObjectTreeNode<MemoryObject>)classSetRoot;\n    findChildWithPredicate(findChildWithPredicate(myClassSetRootNode, instance -> instance == instanceFoo),\n                           field -> Objects.equals(field, fieldFoo));\n\n    myStage.getConfiguration().setClassGrouping(ARRANGE_BY_PACKAGE);\n    aspectObserver.assertAndResetCounts(0, 0, 0, 1, 0, 1, 2, 2);\n    assertThat(myStage.getSelectedInstanceObject()).isEqualTo(instanceFoo);\n    assertThat(myStage.getSelectedFieldObjectPath()).isEqualTo(Collections.singletonList(fieldFoo));\n\n    Supplier<CodeLocation> codeLocationSupplier = myFakeIdeProfilerComponents.getCodeLocationSupplier(myClassSetTree);\n\n    assertThat(codeLocationSupplier).isNotNull();\n    CodeLocation codeLocation = codeLocationSupplier.get();\n    assertThat(codeLocation).isNotNull();\n    String codeLocationClassName = codeLocation.getClassName();\n    assertThat(codeLocationClassName).isEqualTo(TEST_FIELD_NAME);\n\n    myStage.getStudioProfilers().getIdeServices().getCodeNavigator().addListener(myStage); // manually add, since we didn't enter stage\n    myStage.getStudioProfilers().getIdeServices().getCodeNavigator().navigate(codeLocation);\n    myStage.getStudioProfilers().getIdeServices().getCodeNavigator().removeListener(myStage);\n    assertThat(myStage.getProfilerMode()).isEqualTo(ProfilerMode.NORMAL);\n  }", "signature": "void fieldSelectionAndNavigationTest()", "full_signature": "@Test public void fieldSelectionAndNavigationTest()", "class_method_signature": "MemoryClassSetViewTest.fieldSelectionAndNavigationTest()", "testcase": true, "constructor": false, "invocations": ["getAspect", "build", "setLineNumber", "setMethodName", "build", "setLineNumber", "setMethodName", "build", "setFullStack", "newBuilder", "addFrames", "newBuilder", "setLineNumber", "setMethodName", "setClassName", "newBuilder", "getClassName", "getMethodName", "getLineNumber", "build", "setFullStack", "newBuilder", "addFrames", "newBuilder", "setLineNumber", "setMethodName", "setClassName", "newBuilder", "getClassName", "getMethodName", "getLineNumber", "build", "build", "setName", "build", "setName", "build", "setFields", "setAllocationStack", "setName", "singletonList", "getFieldName", "setFieldValue", "getFieldName", "getValueType", "build", "setFields", "setAllocationStack", "setName", "singletonList", "getFieldName", "setFieldValue", "getFieldName", "getValueType", "asList", "addInstanceObjects", "selectCaptureDuration", "isEqualTo", "assertThat", "getClassGrouping", "getConfiguration", "isNotNull", "assertThat", "getSelectedHeapSet", "isEqualTo", "assertThat", "getId", "getSelectedHeapSet", "selectClassSet", "findChildClassSetWithName", "getSelectedHeapSet", "selectInstanceObject", "selectFieldObjectPath", "singletonList", "assertAndResetCounts", "setClassGrouping", "getConfiguration", "assertAndResetCounts", "isEqualTo", "assertThat", "getSelectedInstanceObject", "isEqualTo", "assertThat", "getSelectedFieldObjectPath", "singletonList", "getTree", "isNotNull", "assertThat", "getRoot", "getModel", "isInstanceOf", "assertThat", "isInstanceOf", "assertThat", "getAdapter", "findChildWithPredicate", "findChildWithPredicate", "equals", "setClassGrouping", "getConfiguration", "assertAndResetCounts", "isEqualTo", "assertThat", "getSelectedInstanceObject", "isEqualTo", "assertThat", "getSelectedFieldObjectPath", "singletonList", "getCodeLocationSupplier", "isNotNull", "assertThat", "get", "isNotNull", "assertThat", "getClassName", "isEqualTo", "assertThat", "addListener", "getCodeNavigator", "getIdeServices", "getStudioProfilers", "navigate", "getCodeNavigator", "getIdeServices", "getStudioProfilers", "removeListener", "getCodeNavigator", "getIdeServices", "getStudioProfilers", "isEqualTo", "assertThat", "getProfilerMode"]}, "focal_class": {"identifier": "MemoryClassSetView", "superclass": "extends AspectObserver", "interfaces": "", "fields": [{"original_string": "private static final int LABEL_COLUMN_WIDTH = 500;", "modifier": "private static final", "type": "int", "declarator": "LABEL_COLUMN_WIDTH = 500", "var_name": "LABEL_COLUMN_WIDTH"}, {"original_string": "private static final int DEFAULT_COLUMN_WIDTH = 80;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_COLUMN_WIDTH = 80", "var_name": "DEFAULT_COLUMN_WIDTH"}, {"original_string": "@NotNull private final MemoryProfilerStage myStage;", "modifier": "@NotNull private final", "type": "MemoryProfilerStage", "declarator": "myStage", "var_name": "myStage"}, {"original_string": "@NotNull private final StreamingTimeline myTimeline;", "modifier": "@NotNull private final", "type": "StreamingTimeline", "declarator": "myTimeline", "var_name": "myTimeline"}, {"original_string": "@NotNull private final ContextMenuInstaller myContextMenuInstaller;", "modifier": "@NotNull private final", "type": "ContextMenuInstaller", "declarator": "myContextMenuInstaller", "var_name": "myContextMenuInstaller"}, {"original_string": "@NotNull private final Map<InstanceAttribute, AttributeColumn<MemoryObject>> myAttributeColumns = new HashMap<>();", "modifier": "@NotNull private final", "type": "Map<InstanceAttribute, AttributeColumn<MemoryObject>>", "declarator": "myAttributeColumns = new HashMap<>()", "var_name": "myAttributeColumns"}, {"original_string": "@NotNull private final JPanel myInstancesPanel = new JPanel(new BorderLayout());", "modifier": "@NotNull private final", "type": "JPanel", "declarator": "myInstancesPanel = new JPanel(new BorderLayout())", "var_name": "myInstancesPanel"}, {"original_string": "@Nullable private JComponent myColumnTree;", "modifier": "@Nullable private", "type": "JComponent", "declarator": "myColumnTree", "var_name": "myColumnTree"}, {"original_string": "@Nullable private JTree myTree;", "modifier": "@Nullable private", "type": "JTree", "declarator": "myTree", "var_name": "myTree"}, {"original_string": "@Nullable private DefaultTreeModel myTreeModel;", "modifier": "@Nullable private", "type": "DefaultTreeModel", "declarator": "myTreeModel", "var_name": "myTreeModel"}, {"original_string": "@Nullable private LazyMemoryObjectTreeNode<MemoryObject> myTreeRoot;", "modifier": "@Nullable private", "type": "LazyMemoryObjectTreeNode<MemoryObject>", "declarator": "myTreeRoot", "var_name": "myTreeRoot"}, {"original_string": "@Nullable private Comparator<MemoryObjectTreeNode<MemoryObject>> myInitialComparator;", "modifier": "@Nullable private", "type": "Comparator<MemoryObjectTreeNode<MemoryObject>>", "declarator": "myInitialComparator", "var_name": "myInitialComparator"}, {"original_string": "@Nullable private CaptureObject myCaptureObject;", "modifier": "@Nullable private", "type": "CaptureObject", "declarator": "myCaptureObject", "var_name": "myCaptureObject"}, {"original_string": "@Nullable private ClassSet myClassSet;", "modifier": "@Nullable private", "type": "ClassSet", "declarator": "myClassSet", "var_name": "myClassSet"}, {"original_string": "@Nullable private InstanceObject myInstanceObject;", "modifier": "@Nullable private", "type": "InstanceObject", "declarator": "myInstanceObject", "var_name": "myInstanceObject"}, {"original_string": "@Nullable private List<FieldObject> myFieldObjectPath;", "modifier": "@Nullable private", "type": "List<FieldObject>", "declarator": "myFieldObjectPath", "var_name": "myFieldObjectPath"}], "methods": [{"identifier": "MemoryClassSetView", "parameters": "(@NotNull MemoryProfilerStage stage, @NotNull IdeProfilerComponents ideProfilerComponents)", "modifiers": "", "return": "", "signature": " MemoryClassSetView(@NotNull MemoryProfilerStage stage, @NotNull IdeProfilerComponents ideProfilerComponents)", "full_signature": "  MemoryClassSetView(@NotNull MemoryProfilerStage stage, @NotNull IdeProfilerComponents ideProfilerComponents)", "class_method_signature": "MemoryClassSetView.MemoryClassSetView(@NotNull MemoryProfilerStage stage, @NotNull IdeProfilerComponents ideProfilerComponents)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "MemoryClassSetView.reset()", "testcase": false, "constructor": false}, {"identifier": "getComponent", "parameters": "()", "modifiers": "@NotNull", "return": "JComponent", "signature": "JComponent getComponent()", "full_signature": "@NotNull JComponent getComponent()", "class_method_signature": "MemoryClassSetView.getComponent()", "testcase": false, "constructor": false}, {"identifier": "getTree", "parameters": "()", "modifiers": "@VisibleForTesting @Nullable", "return": "JTree", "signature": "JTree getTree()", "full_signature": "@VisibleForTesting @Nullable JTree getTree()", "class_method_signature": "MemoryClassSetView.getTree()", "testcase": false, "constructor": false}, {"identifier": "getColumnTree", "parameters": "()", "modifiers": "@VisibleForTesting @Nullable", "return": "JComponent", "signature": "JComponent getColumnTree()", "full_signature": "@VisibleForTesting @Nullable JComponent getColumnTree()", "class_method_signature": "MemoryClassSetView.getColumnTree()", "testcase": false, "constructor": false}, {"identifier": "initializeTree", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeTree()", "full_signature": "private void initializeTree()", "class_method_signature": "MemoryClassSetView.initializeTree()", "testcase": false, "constructor": false}, {"identifier": "installTreeContextMenus", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void installTreeContextMenus()", "full_signature": "private void installTreeContextMenus()", "class_method_signature": "MemoryClassSetView.installTreeContextMenus()", "testcase": false, "constructor": false}, {"identifier": "populateTreeContents", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateTreeContents()", "full_signature": "private void populateTreeContents()", "class_method_signature": "MemoryClassSetView.populateTreeContents()", "testcase": false, "constructor": false}, {"identifier": "refreshCaptureObject", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshCaptureObject()", "full_signature": "private void refreshCaptureObject()", "class_method_signature": "MemoryClassSetView.refreshCaptureObject()", "testcase": false, "constructor": false}, {"identifier": "refreshClassSet", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshClassSet()", "full_signature": "private void refreshClassSet()", "class_method_signature": "MemoryClassSetView.refreshClassSet()", "testcase": false, "constructor": false}, {"identifier": "refreshSelectedInstance", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshSelectedInstance()", "full_signature": "private void refreshSelectedInstance()", "class_method_signature": "MemoryClassSetView.refreshSelectedInstance()", "testcase": false, "constructor": false}, {"identifier": "refreshAllInstances", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshAllInstances()", "full_signature": "private void refreshAllInstances()", "class_method_signature": "MemoryClassSetView.refreshAllInstances()", "testcase": false, "constructor": false}, {"identifier": "refreshFieldPath", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshFieldPath()", "full_signature": "private void refreshFieldPath()", "class_method_signature": "MemoryClassSetView.refreshFieldPath()", "testcase": false, "constructor": false}, {"identifier": "findSelectedInstanceNode", "parameters": "()", "modifiers": "@Nullable private", "return": "MemoryObjectTreeNode<MemoryObject>", "signature": "MemoryObjectTreeNode<MemoryObject> findSelectedInstanceNode()", "full_signature": "@Nullable private MemoryObjectTreeNode<MemoryObject> findSelectedInstanceNode()", "class_method_signature": "MemoryClassSetView.findSelectedInstanceNode()", "testcase": false, "constructor": false}, {"identifier": "selectPath", "parameters": "(@NotNull MemoryObjectTreeNode<MemoryObject> targetNode)", "modifiers": "private", "return": "void", "signature": "void selectPath(@NotNull MemoryObjectTreeNode<MemoryObject> targetNode)", "full_signature": "private void selectPath(@NotNull MemoryObjectTreeNode<MemoryObject> targetNode)", "class_method_signature": "MemoryClassSetView.selectPath(@NotNull MemoryObjectTreeNode<MemoryObject> targetNode)", "testcase": false, "constructor": false}, {"identifier": "findLeafNodesForFieldPath", "parameters": "(@NotNull MemoryObjectTreeNode<MemoryObject> parentNode,\n                                                                                    @NotNull List<FieldObject> fieldPath)", "modifiers": "@NotNull private static", "return": "List<MemoryObjectTreeNode<MemoryObject>>", "signature": "List<MemoryObjectTreeNode<MemoryObject>> findLeafNodesForFieldPath(@NotNull MemoryObjectTreeNode<MemoryObject> parentNode,\n                                                                                    @NotNull List<FieldObject> fieldPath)", "full_signature": "@NotNull private static List<MemoryObjectTreeNode<MemoryObject>> findLeafNodesForFieldPath(@NotNull MemoryObjectTreeNode<MemoryObject> parentNode,\n                                                                                    @NotNull List<FieldObject> fieldPath)", "class_method_signature": "MemoryClassSetView.findLeafNodesForFieldPath(@NotNull MemoryObjectTreeNode<MemoryObject> parentNode,\n                                                                                    @NotNull List<FieldObject> fieldPath)", "testcase": false, "constructor": false}], "file": "profilers-ui/src/com/android/tools/profilers/memory/MemoryClassSetView.java"}, "focal_method": {"identifier": "getTree", "parameters": "()", "modifiers": "@VisibleForTesting @Nullable", "return": "JTree", "body": "@VisibleForTesting\n  @Nullable\n  JTree getTree() {\n    return myTree;\n  }", "signature": "JTree getTree()", "full_signature": "@VisibleForTesting @Nullable JTree getTree()", "class_method_signature": "MemoryClassSetView.getTree()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}