{"test_class": {"identifier": "NettyConnectionTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/transport/netty/NettyConnectionTest.java"}, "test_case": {"identifier": "getLdapURL", "parameters": "()", "modifiers": "@Test(groups = \"netty\") public", "return": "void", "body": "@Test(groups = \"netty\")\n  public void getLdapURL()\n    throws Exception\n  {\n    final SimpleNettyServer server = new SimpleNettyServer();\n    try {\n      final InetSocketAddress address = server.start();\n      final NettyConnection conn = new NettyConnection(\n        ConnectionConfig.builder()\n          .url(\n            \"ldap://\" + address.getHostName() + \":\" + address.getPort() + \"/dc=ldaptive,dc=org?cn,sn?one?(uid=dfisher)\")\n          .build(),\n        NioSocketChannel.class,\n        new NioEventLoopGroup(\n          0,\n          new ThreadPerTaskExecutor(new DefaultThreadFactory(NettyConnectionTest.class, true, Thread.NORM_PRIORITY))),\n        null,\n        true);\n      try {\n        conn.open();\n        Assert.assertNotNull(conn.getLdapURL());\n        Assert.assertEquals(conn.getLdapURL().getScheme(), \"ldap\");\n        Assert.assertEquals(conn.getLdapURL().getHostname(), address.getHostName());\n        Assert.assertEquals(conn.getLdapURL().getPort(), address.getPort());\n        Assert.assertFalse(conn.getLdapURL().isDefaultBaseDn());\n        Assert.assertEquals(conn.getLdapURL().getBaseDn(), \"dc=ldaptive,dc=org\");\n        Assert.assertFalse(conn.getLdapURL().isDefaultAttributes());\n        Assert.assertEquals(conn.getLdapURL().getAttributes(), new String[] {\"cn\", \"sn\"});\n        Assert.assertFalse(conn.getLdapURL().isDefaultScope());\n        Assert.assertEquals(conn.getLdapURL().getScope(), SearchScope.ONELEVEL);\n        Assert.assertFalse(conn.getLdapURL().isDefaultFilter());\n        Assert.assertEquals(conn.getLdapURL().getFilter(), \"(uid=dfisher)\");\n      } finally {\n        conn.close();\n        Assert.assertFalse(conn.isOpen());\n      }\n    } finally {\n      server.stop();\n    }\n  }", "signature": "void getLdapURL()", "full_signature": "@Test(groups = \"netty\") public void getLdapURL()", "class_method_signature": "NettyConnectionTest.getLdapURL()", "testcase": true, "constructor": false, "invocations": ["start", "build", "url", "builder", "getHostName", "getPort", "open", "assertNotNull", "getLdapURL", "assertEquals", "getScheme", "getLdapURL", "assertEquals", "getHostname", "getLdapURL", "getHostName", "assertEquals", "getPort", "getLdapURL", "getPort", "assertFalse", "isDefaultBaseDn", "getLdapURL", "assertEquals", "getBaseDn", "getLdapURL", "assertFalse", "isDefaultAttributes", "getLdapURL", "assertEquals", "getAttributes", "getLdapURL", "assertFalse", "isDefaultScope", "getLdapURL", "assertEquals", "getScope", "getLdapURL", "assertFalse", "isDefaultFilter", "getLdapURL", "assertEquals", "getFilter", "getLdapURL", "close", "assertFalse", "isOpen", "stop"]}, "focal_class": {"identifier": "NettyConnection", "superclass": "extends TransportConnection", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(NettyConnection.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(NettyConnection.class)", "var_name": "LOGGER"}, {"original_string": "private static final RequestEncoder REQUEST_ENCODER = new RequestEncoder();", "modifier": "private static final", "type": "RequestEncoder", "declarator": "REQUEST_ENCODER = new RequestEncoder()", "var_name": "REQUEST_ENCODER"}, {"original_string": "private static final AutoReadEventHandler READ_NEXT_MESSAGE = new AutoReadEventHandler();", "modifier": "private static final", "type": "AutoReadEventHandler", "declarator": "READ_NEXT_MESSAGE = new AutoReadEventHandler()", "var_name": "READ_NEXT_MESSAGE"}, {"original_string": "private final Class<? extends Channel> channelType;", "modifier": "private final", "type": "Class<? extends Channel>", "declarator": "channelType", "var_name": "channelType"}, {"original_string": "private final EventLoopGroup ioWorkerGroup;", "modifier": "private final", "type": "EventLoopGroup", "declarator": "ioWorkerGroup", "var_name": "ioWorkerGroup"}, {"original_string": "private final EventLoopGroup messageWorkerGroup;", "modifier": "private final", "type": "EventLoopGroup", "declarator": "messageWorkerGroup", "var_name": "messageWorkerGroup"}, {"original_string": "private boolean shutdownOnClose;", "modifier": "private", "type": "boolean", "declarator": "shutdownOnClose", "var_name": "shutdownOnClose"}, {"original_string": "private final Map<ChannelOption, Object> channelOptions;", "modifier": "private final", "type": "Map<ChannelOption, Object>", "declarator": "channelOptions", "var_name": "channelOptions"}, {"original_string": "private final HandleMap pendingResponses;", "modifier": "private final", "type": "HandleMap", "declarator": "pendingResponses", "var_name": "pendingResponses"}, {"original_string": "private final CloseFutureListener closeListener = new CloseFutureListener();", "modifier": "private final", "type": "CloseFutureListener", "declarator": "closeListener = new CloseFutureListener()", "var_name": "closeListener"}, {"original_string": "private final AtomicInteger messageID = new AtomicInteger(1);", "modifier": "private final", "type": "AtomicInteger", "declarator": "messageID = new AtomicInteger(1)", "var_name": "messageID"}, {"original_string": "private final ReentrantReadWriteLock reconnectLock = new ReentrantReadWriteLock();", "modifier": "private final", "type": "ReentrantReadWriteLock", "declarator": "reconnectLock = new ReentrantReadWriteLock()", "var_name": "reconnectLock"}, {"original_string": "private final ReentrantReadWriteLock bindLock = new ReentrantReadWriteLock();", "modifier": "private final", "type": "ReentrantReadWriteLock", "declarator": "bindLock = new ReentrantReadWriteLock()", "var_name": "bindLock"}, {"original_string": "private ExecutorService connectionExecutor;", "modifier": "private", "type": "ExecutorService", "declarator": "connectionExecutor", "var_name": "connectionExecutor"}, {"original_string": "private LdapURL ldapURL;", "modifier": "private", "type": "LdapURL", "declarator": "ldapURL", "var_name": "ldapURL"}, {"original_string": "private Channel channel;", "modifier": "private", "type": "Channel", "declarator": "channel", "var_name": "channel"}, {"original_string": "private Instant connectTime;", "modifier": "private", "type": "Instant", "declarator": "connectTime", "var_name": "connectTime"}, {"original_string": "private Throwable inboundException;", "modifier": "private", "type": "Throwable", "declarator": "inboundException", "var_name": "inboundException"}], "methods": [{"identifier": "NettyConnection", "parameters": "(\n    final ConnectionConfig config,\n    final Class<? extends Channel> type,\n    final EventLoopGroup ioGroup,\n    final EventLoopGroup messageGroup,\n    final boolean shutdownGroups)", "modifiers": "public", "return": "", "signature": " NettyConnection(\n    final ConnectionConfig config,\n    final Class<? extends Channel> type,\n    final EventLoopGroup ioGroup,\n    final EventLoopGroup messageGroup,\n    final boolean shutdownGroups)", "full_signature": "public  NettyConnection(\n    final ConnectionConfig config,\n    final Class<? extends Channel> type,\n    final EventLoopGroup ioGroup,\n    final EventLoopGroup messageGroup,\n    final boolean shutdownGroups)", "class_method_signature": "NettyConnection.NettyConnection(\n    final ConnectionConfig config,\n    final Class<? extends Channel> type,\n    final EventLoopGroup ioGroup,\n    final EventLoopGroup messageGroup,\n    final boolean shutdownGroups)", "testcase": false, "constructor": true}, {"identifier": "convertChannelOption", "parameters": "(final String value)", "modifiers": "private", "return": "Object", "signature": "Object convertChannelOption(final String value)", "full_signature": "private Object convertChannelOption(final String value)", "class_method_signature": "NettyConnection.convertChannelOption(final String value)", "testcase": false, "constructor": false}, {"identifier": "createBootstrap", "parameters": "(final ClientInitializer initializer)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Bootstrap", "signature": "Bootstrap createBootstrap(final ClientInitializer initializer)", "full_signature": "@SuppressWarnings(\"unchecked\") private Bootstrap createBootstrap(final ClientInitializer initializer)", "class_method_signature": "NettyConnection.createBootstrap(final ClientInitializer initializer)", "testcase": false, "constructor": false}, {"identifier": "test", "parameters": "(final LdapURL url)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean test(final LdapURL url)", "full_signature": "@Override protected boolean test(final LdapURL url)", "class_method_signature": "NettyConnection.test(final LdapURL url)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(final LdapURL url)", "modifiers": "@Override protected", "return": "void", "signature": "void open(final LdapURL url)", "full_signature": "@Override protected void open(final LdapURL url)", "class_method_signature": "NettyConnection.open(final LdapURL url)", "testcase": false, "constructor": false}, {"identifier": "getLdapURL", "parameters": "()", "modifiers": "@Override public", "return": "LdapURL", "signature": "LdapURL getLdapURL()", "full_signature": "@Override public LdapURL getLdapURL()", "class_method_signature": "NettyConnection.getLdapURL()", "testcase": false, "constructor": false}, {"identifier": "connectInternal", "parameters": "()", "modifiers": "private", "return": "Channel", "signature": "Channel connectInternal()", "full_signature": "private Channel connectInternal()", "class_method_signature": "NettyConnection.connectInternal()", "testcase": false, "constructor": false}, {"identifier": "createSslHandler", "parameters": "(final ConnectionConfig config)", "modifiers": "private", "return": "SslHandler", "signature": "SslHandler createSslHandler(final ConnectionConfig config)", "full_signature": "private SslHandler createSslHandler(final ConnectionConfig config)", "class_method_signature": "NettyConnection.createSslHandler(final ConnectionConfig config)", "testcase": false, "constructor": false}, {"identifier": "waitForSSLHandshake", "parameters": "(final Channel ch)", "modifiers": "private", "return": "void", "signature": "void waitForSSLHandshake(final Channel ch)", "full_signature": "private void waitForSSLHandshake(final Channel ch)", "class_method_signature": "NettyConnection.waitForSSLHandshake(final Channel ch)", "testcase": false, "constructor": false}, {"identifier": "operation", "parameters": "(final StartTLSRequest request)", "modifiers": "", "return": "Result", "signature": "Result operation(final StartTLSRequest request)", "full_signature": " Result operation(final StartTLSRequest request)", "class_method_signature": "NettyConnection.operation(final StartTLSRequest request)", "testcase": false, "constructor": false}, {"identifier": "operation", "parameters": "(final UnbindRequest request)", "modifiers": "@Override protected", "return": "void", "signature": "void operation(final UnbindRequest request)", "full_signature": "@Override protected void operation(final UnbindRequest request)", "class_method_signature": "NettyConnection.operation(final UnbindRequest request)", "testcase": false, "constructor": false}, {"identifier": "operation", "parameters": "(final SaslClientRequest request)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "BindResponse", "signature": "BindResponse operation(final SaslClientRequest request)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public BindResponse operation(final SaslClientRequest request)", "class_method_signature": "NettyConnection.operation(final SaslClientRequest request)", "testcase": false, "constructor": false}, {"identifier": "operation", "parameters": "(final DefaultSaslClientRequest request)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "BindResponse", "signature": "BindResponse operation(final DefaultSaslClientRequest request)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public BindResponse operation(final DefaultSaslClientRequest request)", "class_method_signature": "NettyConnection.operation(final DefaultSaslClientRequest request)", "testcase": false, "constructor": false}, {"identifier": "operation", "parameters": "(final AbandonRequest request)", "modifiers": "@Override public", "return": "void", "signature": "void operation(final AbandonRequest request)", "full_signature": "@Override public void operation(final AbandonRequest request)", "class_method_signature": "NettyConnection.operation(final AbandonRequest request)", "testcase": false, "constructor": false}, {"identifier": "operation", "parameters": "(final AddRequest request)", "modifiers": "@Override public", "return": "DefaultOperationHandle<AddRequest, AddResponse>", "signature": "DefaultOperationHandle<AddRequest, AddResponse> operation(final AddRequest request)", "full_signature": "@Override public DefaultOperationHandle<AddRequest, AddResponse> operation(final AddRequest request)", "class_method_signature": "NettyConnection.operation(final AddRequest request)", "testcase": false, "constructor": false}, {"identifier": "operation", "parameters": "(final BindRequest request)", "modifiers": "@Override public", "return": "BindOperationHandle", "signature": "BindOperationHandle operation(final BindRequest request)", "full_signature": "@Override public BindOperationHandle operation(final BindRequest request)", "class_method_signature": "NettyConnection.operation(final BindRequest request)", "testcase": false, "constructor": false}, {"identifier": "operation", "parameters": "(final CompareRequest request)", "modifiers": "@Override public", "return": "DefaultCompareOperationHandle", "signature": "DefaultCompareOperationHandle operation(final CompareRequest request)", "full_signature": "@Override public DefaultCompareOperationHandle operation(final CompareRequest request)", "class_method_signature": "NettyConnection.operation(final CompareRequest request)", "testcase": false, "constructor": false}, {"identifier": "operation", "parameters": "(final DeleteRequest request)", "modifiers": "@Override public", "return": "DefaultOperationHandle<DeleteRequest, DeleteResponse>", "signature": "DefaultOperationHandle<DeleteRequest, DeleteResponse> operation(final DeleteRequest request)", "full_signature": "@Override public DefaultOperationHandle<DeleteRequest, DeleteResponse> operation(final DeleteRequest request)", "class_method_signature": "NettyConnection.operation(final DeleteRequest request)", "testcase": false, "constructor": false}, {"identifier": "operation", "parameters": "(final ExtendedRequest request)", "modifiers": "@Override public", "return": "DefaultExtendedOperationHandle", "signature": "DefaultExtendedOperationHandle operation(final ExtendedRequest request)", "full_signature": "@Override public DefaultExtendedOperationHandle operation(final ExtendedRequest request)", "class_method_signature": "NettyConnection.operation(final ExtendedRequest request)", "testcase": false, "constructor": false}, {"identifier": "operation", "parameters": "(final ModifyRequest request)", "modifiers": "@Override public", "return": "DefaultOperationHandle<ModifyRequest, ModifyResponse>", "signature": "DefaultOperationHandle<ModifyRequest, ModifyResponse> operation(final ModifyRequest request)", "full_signature": "@Override public DefaultOperationHandle<ModifyRequest, ModifyResponse> operation(final ModifyRequest request)", "class_method_signature": "NettyConnection.operation(final ModifyRequest request)", "testcase": false, "constructor": false}, {"identifier": "operation", "parameters": "(final ModifyDnRequest request)", "modifiers": "@Override public", "return": "DefaultOperationHandle<ModifyDnRequest, ModifyDnResponse>", "signature": "DefaultOperationHandle<ModifyDnRequest, ModifyDnResponse> operation(final ModifyDnRequest request)", "full_signature": "@Override public DefaultOperationHandle<ModifyDnRequest, ModifyDnResponse> operation(final ModifyDnRequest request)", "class_method_signature": "NettyConnection.operation(final ModifyDnRequest request)", "testcase": false, "constructor": false}, {"identifier": "operation", "parameters": "(final SearchRequest request)", "modifiers": "@Override public", "return": "DefaultSearchOperationHandle", "signature": "DefaultSearchOperationHandle operation(final SearchRequest request)", "full_signature": "@Override public DefaultSearchOperationHandle operation(final SearchRequest request)", "class_method_signature": "NettyConnection.operation(final SearchRequest request)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(final DefaultOperationHandle handle)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") protected", "return": "void", "signature": "void write(final DefaultOperationHandle handle)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") protected void write(final DefaultOperationHandle handle)", "class_method_signature": "NettyConnection.write(final DefaultOperationHandle handle)", "testcase": false, "constructor": false}, {"identifier": "complete", "parameters": "(final DefaultOperationHandle handle)", "modifiers": "@Override protected", "return": "void", "signature": "void complete(final DefaultOperationHandle handle)", "full_signature": "@Override protected void complete(final DefaultOperationHandle handle)", "class_method_signature": "NettyConnection.complete(final DefaultOperationHandle handle)", "testcase": false, "constructor": false}, {"identifier": "getAndIncrementMessageID", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getAndIncrementMessageID()", "full_signature": " int getAndIncrementMessageID()", "class_method_signature": "NettyConnection.getAndIncrementMessageID()", "testcase": false, "constructor": false}, {"identifier": "getMessageID", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getMessageID()", "full_signature": " int getMessageID()", "class_method_signature": "NettyConnection.getMessageID()", "testcase": false, "constructor": false}, {"identifier": "setMessageID", "parameters": "(final int i)", "modifiers": "", "return": "void", "signature": "void setMessageID(final int i)", "full_signature": " void setMessageID(final int i)", "class_method_signature": "NettyConnection.setMessageID(final int i)", "testcase": false, "constructor": false}, {"identifier": "getChannelOptions", "parameters": "()", "modifiers": "", "return": "Map<ChannelOption, Object>", "signature": "Map<ChannelOption, Object> getChannelOptions()", "full_signature": " Map<ChannelOption, Object> getChannelOptions()", "class_method_signature": "NettyConnection.getChannelOptions()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(final RequestControl... controls)", "modifiers": "@Override public", "return": "void", "signature": "void close(final RequestControl... controls)", "full_signature": "@Override public void close(final RequestControl... controls)", "class_method_signature": "NettyConnection.close(final RequestControl... controls)", "testcase": false, "constructor": false}, {"identifier": "notifyOperationHandlesOfClose", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void notifyOperationHandlesOfClose()", "full_signature": "protected void notifyOperationHandlesOfClose()", "class_method_signature": "NettyConnection.notifyOperationHandlesOfClose()", "testcase": false, "constructor": false}, {"identifier": "reconnect", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void reconnect()", "full_signature": "protected void reconnect()", "class_method_signature": "NettyConnection.reconnect()", "testcase": false, "constructor": false}, {"identifier": "isOpen", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOpen()", "full_signature": "public boolean isOpen()", "class_method_signature": "NettyConnection.isOpen()", "testcase": false, "constructor": false}, {"identifier": "isOpening", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isOpening()", "full_signature": "private boolean isOpening()", "class_method_signature": "NettyConnection.isOpening()", "testcase": false, "constructor": false}, {"identifier": "isClosing", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isClosing()", "full_signature": "private boolean isClosing()", "class_method_signature": "NettyConnection.isClosing()", "testcase": false, "constructor": false}, {"identifier": "throwIfClosed", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void throwIfClosed()", "full_signature": "private void throwIfClosed()", "class_method_signature": "NettyConnection.throwIfClosed()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "NettyConnection.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/transport/netty/NettyConnection.java"}, "focal_method": {"identifier": "getLdapURL", "parameters": "()", "modifiers": "@Override public", "return": "LdapURL", "body": "@Override\n  public LdapURL getLdapURL()\n  {\n    return ldapURL;\n  }", "signature": "LdapURL getLdapURL()", "full_signature": "@Override public LdapURL getLdapURL()", "class_method_signature": "NettyConnection.getLdapURL()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}