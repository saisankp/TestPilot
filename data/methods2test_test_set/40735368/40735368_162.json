{"test_class": {"identifier": "EmfAppSchemaReaderTest", "superclass": "extends AppSchemaTestSupport", "interfaces": "", "fields": [{"original_string": "private static final String NS_URI = \"http://online.socialchange.net.au\";", "modifier": "private static final", "type": "String", "declarator": "NS_URI = \"http://online.socialchange.net.au\"", "var_name": "NS_URI"}], "file": "modules/extension/app-schema/app-schema/src/test/java/org/geotools/data/complex/config/EmfAppSchemaReaderTest.java"}, "test_case": {"identifier": "testNonGMLConfiguration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNonGMLConfiguration() {\n\t\tSchemaCatalog catalog = SchemaCatalog.build(getClass()\n\t\t\t\t.getResource(\"/test-data/mappedPolygons.oasis.xml\"));\n\t\tAppSchemaConfiguration configuration = new AppSchemaConfiguration(\n\t\t\t\t\"http://www.opengis.net/swe/2.0\",\n\t\t\t\t\"http://schemas.opengis.net/sweCommon/2.0/swe.xsd\",\n\t\t\t\tnew SchemaResolver(catalog));\n\t\tConfiguration gmlConfiguration = EmfAppSchemaReader\n\t\t\t\t.findGmlConfiguration(configuration);\n\t\t// Null should be returned, not exception\n\t\t// Warning message should be in the log\n\t\tAssert.assertNull(gmlConfiguration);\n\t}", "signature": "void testNonGMLConfiguration()", "full_signature": "@Test public void testNonGMLConfiguration()", "class_method_signature": "EmfAppSchemaReaderTest.testNonGMLConfiguration()", "testcase": true, "constructor": false, "invocations": ["build", "getResource", "getClass", "findGmlConfiguration", "assertNull"]}, "focal_class": {"identifier": "EmfAppSchemaReader", "superclass": "extends EmfComplexFeatureReader", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"serial\")\n    private static final Map<QName, Class<? extends Configuration>> SUPPORTED_GML_KNOWN_TYPE_TO_CONFIGURATION_MAP //\n    = new LinkedHashMap<QName, Class<? extends Configuration>>() {\n        {\n            // GML 3.1\n            put(GML.AbstractFeatureType, GMLConfiguration.class);\n            // GML 3.2\n            put(org.geotools.gml3.v3_2.GML.AbstractFeatureType,\n                    org.geotools.gml3.v3_2.GMLConfiguration.class);\n        }\n    };", "modifier": "@SuppressWarnings(\"serial\")\n    private static final", "type": "Map<QName, Class<? extends Configuration>>", "declarator": "SUPPORTED_GML_KNOWN_TYPE_TO_CONFIGURATION_MAP //\n    = new LinkedHashMap<QName, Class<? extends Configuration>>() {\n        {\n            // GML 3.1\n            put(GML.AbstractFeatureType, GMLConfiguration.class);\n            // GML 3.2\n            put(org.geotools.gml3.v3_2.GML.AbstractFeatureType,\n                    org.geotools.gml3.v3_2.GMLConfiguration.class);\n        }\n    }", "var_name": "SUPPORTED_GML_KNOWN_TYPE_TO_CONFIGURATION_MAP"}], "methods": [{"identifier": "EmfAppSchemaReader", "parameters": "()", "modifiers": "private", "return": "", "signature": " EmfAppSchemaReader()", "full_signature": "private  EmfAppSchemaReader()", "class_method_signature": "EmfAppSchemaReader.EmfAppSchemaReader()", "testcase": false, "constructor": true}, {"identifier": "newInstance", "parameters": "()", "modifiers": "public static", "return": "EmfAppSchemaReader", "signature": "EmfAppSchemaReader newInstance()", "full_signature": "public static EmfAppSchemaReader newInstance()", "class_method_signature": "EmfAppSchemaReader.newInstance()", "testcase": false, "constructor": false}, {"identifier": "findGmlConfiguration", "parameters": "(AppSchemaConfiguration configuration)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration findGmlConfiguration(AppSchemaConfiguration configuration)", "full_signature": "public static Configuration findGmlConfiguration(AppSchemaConfiguration configuration)", "class_method_signature": "EmfAppSchemaReader.findGmlConfiguration(AppSchemaConfiguration configuration)", "testcase": false, "constructor": false}], "file": "modules/extension/app-schema/app-schema/src/main/java/org/geotools/data/complex/config/EmfAppSchemaReader.java"}, "focal_method": {"identifier": "findGmlConfiguration", "parameters": "(AppSchemaConfiguration configuration)", "modifiers": "public static", "return": "Configuration", "body": "public static Configuration findGmlConfiguration(AppSchemaConfiguration configuration) {\n        SchemaIndex index = null;\n        try {\n            index = Schemas.findSchemas(configuration);\n            for (QName name : SUPPORTED_GML_KNOWN_TYPE_TO_CONFIGURATION_MAP.keySet()) {\n                XSDTypeDefinition type = index.getTypeDefinition(name);\n                if (type != null) {\n                    try {\n                        return SUPPORTED_GML_KNOWN_TYPE_TO_CONFIGURATION_MAP.get(name)\n                                .newInstance();\n                    } catch (Exception e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            }\n            for (XSDSchema schema : index.getSchemas()) {\n                String ns = schema.getTargetNamespace();\n                if (ns != null && ns.startsWith(\"http://www.opengis.net/gml\")) {\n                    throw new RuntimeException(\"Unsupported GML version for schema at \"\n                            + configuration.getSchemaLocation());\n                }\n            }\n        } finally {\n            if (index != null) {\n                index.destroy();\n            }\n        }\n        return null;\n    }", "signature": "Configuration findGmlConfiguration(AppSchemaConfiguration configuration)", "full_signature": "public static Configuration findGmlConfiguration(AppSchemaConfiguration configuration)", "class_method_signature": "EmfAppSchemaReader.findGmlConfiguration(AppSchemaConfiguration configuration)", "testcase": false, "constructor": false, "invocations": ["findSchemas", "keySet", "getTypeDefinition", "newInstance", "get", "getSchemas", "getTargetNamespace", "startsWith", "getSchemaLocation", "destroy"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}