{"test_class": {"identifier": "RowDataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TypesTranslator typesTranslator = MTypesTranslator.INSTANCE;", "modifier": "private final", "type": "TypesTranslator", "declarator": "typesTranslator = MTypesTranslator.INSTANCE", "var_name": "typesTranslator"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/server/rowdata/RowDataTest.java"}, "test_case": {"identifier": "reallocateOnBind", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void reallocateOnBind() throws ClassNotFoundException {\n        AkibanInformationSchema ais = AISBBasedBuilder.create(typesTranslator)\n                .table(\"myschema\", \"mytable\")\n                .colInt(\"id\", false)\n                .colInt(\"int_0\", true)\n                .colInt(\"int_1\", true)\n                .colInt(\"int_2\", true)\n                .colInt(\"int_3\", true)\n                .colInt(\"int_4\", true)\n                .colString(\"bigstring\", 500)\n                .colString(\"smallstring\", 2)\n                .ais();\n\n        List<?> values = Arrays.asList(\n                1L, // id\n                null, null, null, null, null, // int_x's\n                Strings.repeat(\"a\", 476), // bigstring\n                \"hi\" // smallstring\n        );\n        Object[] valuesArray = values.toArray(new Object[values.size()]);\n        RowData rowData = new RowData(new byte[500]);\n\n        new SchemaFactory().buildRowDefs(ais);\n        RowDef rowDef = ais.getTable(\"myschema\", \"mytable\").rowDef();\n        assertNotNull(\"RowDef\", rowDef);\n\n        try {\n            rowData.createRow(rowDef, valuesArray, false);\n            fail(\"expected ArrayIndexOutOfBoundsException\");\n        } catch (ArrayIndexOutOfBoundsException e) {\n            boolean foundInBind = false;\n            for (StackTraceElement frame : e.getStackTrace()) {\n                Class<?> frameClass = Class.forName(frame.getClassName());\n                if (RowDataTarget.class.isAssignableFrom(frameClass) && \"bind\".equals(frame.getMethodName())) {\n                    foundInBind = true;\n                    break;\n                }\n            }\n            assertTrue(\"stack trace didn't include RowDataTarget.bind\", foundInBind);\n        }\n    }", "signature": "void reallocateOnBind()", "full_signature": "@Test public void reallocateOnBind()", "class_method_signature": "RowDataTest.reallocateOnBind()", "testcase": true, "constructor": false, "invocations": ["ais", "colString", "colString", "colInt", "colInt", "colInt", "colInt", "colInt", "colInt", "table", "create", "asList", "repeat", "toArray", "size", "buildRowDefs", "rowDef", "getTable", "assertNotNull", "createRow", "fail", "getStackTrace", "forName", "getClassName", "isAssignableFrom", "equals", "getMethodName", "assertTrue"]}, "focal_class": {"identifier": "RowData", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static int O_LENGTH_A = 0;", "modifier": "public final static", "type": "int", "declarator": "O_LENGTH_A = 0", "var_name": "O_LENGTH_A"}, {"original_string": "public final static int O_SIGNATURE_A = 4;", "modifier": "public final static", "type": "int", "declarator": "O_SIGNATURE_A = 4", "var_name": "O_SIGNATURE_A"}, {"original_string": "public final static int O_FIELD_COUNT = 6;", "modifier": "public final static", "type": "int", "declarator": "O_FIELD_COUNT = 6", "var_name": "O_FIELD_COUNT"}, {"original_string": "public final static int O_ROW_DEF_ID = 8;", "modifier": "public final static", "type": "int", "declarator": "O_ROW_DEF_ID = 8", "var_name": "O_ROW_DEF_ID"}, {"original_string": "public final static int O_NULL_MAP = 12;", "modifier": "public final static", "type": "int", "declarator": "O_NULL_MAP = 12", "var_name": "O_NULL_MAP"}, {"original_string": "public final static int O_SIGNATURE_B = -6;", "modifier": "public final static", "type": "int", "declarator": "O_SIGNATURE_B = -6", "var_name": "O_SIGNATURE_B"}, {"original_string": "public final static int O_LENGTH_B = -4;", "modifier": "public final static", "type": "int", "declarator": "O_LENGTH_B = -4", "var_name": "O_LENGTH_B"}, {"original_string": "public final static int MINIMUM_RECORD_LENGTH = 18;", "modifier": "public final static", "type": "int", "declarator": "MINIMUM_RECORD_LENGTH = 18", "var_name": "MINIMUM_RECORD_LENGTH"}, {"original_string": "public final static int MAXIMUM_RECORD_LENGTH = 8 * 1024 * 1024;", "modifier": "public final static", "type": "int", "declarator": "MAXIMUM_RECORD_LENGTH = 8 * 1024 * 1024", "var_name": "MAXIMUM_RECORD_LENGTH"}, {"original_string": "public final static char SIGNATURE_A = (char) ('A' + ('B' << 8));", "modifier": "public final static", "type": "char", "declarator": "SIGNATURE_A = (char) ('A' + ('B' << 8))", "var_name": "SIGNATURE_A"}, {"original_string": "public final static char SIGNATURE_B = (char) ('B' + ('A' << 8));", "modifier": "public final static", "type": "char", "declarator": "SIGNATURE_B = (char) ('B' + ('A' << 8))", "var_name": "SIGNATURE_B"}, {"original_string": "public final static int ENVELOPE_SIZE = 12;", "modifier": "public final static", "type": "int", "declarator": "ENVELOPE_SIZE = 12", "var_name": "ENVELOPE_SIZE"}, {"original_string": "public final static int LEFT_ENVELOPE_SIZE = 6;", "modifier": "public final static", "type": "int", "declarator": "LEFT_ENVELOPE_SIZE = 6", "var_name": "LEFT_ENVELOPE_SIZE"}, {"original_string": "public final static int RIGHT_ENVELOPE_SIZE = 6;", "modifier": "public final static", "type": "int", "declarator": "RIGHT_ENVELOPE_SIZE = 6", "var_name": "RIGHT_ENVELOPE_SIZE"}, {"original_string": "public final static int CREATE_ROW_INITIAL_SIZE = 500;", "modifier": "public final static", "type": "int", "declarator": "CREATE_ROW_INITIAL_SIZE = 500", "var_name": "CREATE_ROW_INITIAL_SIZE"}, {"original_string": "private byte[] bytes;", "modifier": "private", "type": "byte[]", "declarator": "bytes", "var_name": "bytes"}, {"original_string": "private int bufferStart;", "modifier": "private", "type": "int", "declarator": "bufferStart", "var_name": "bufferStart"}, {"original_string": "private int bufferEnd;", "modifier": "private", "type": "int", "declarator": "bufferEnd", "var_name": "bufferEnd"}, {"original_string": "private int rowStart;", "modifier": "private", "type": "int", "declarator": "rowStart", "var_name": "rowStart"}, {"original_string": "private int rowEnd;", "modifier": "private", "type": "int", "declarator": "rowEnd", "var_name": "rowEnd"}], "methods": [{"identifier": "RowData", "parameters": "()", "modifiers": "public", "return": "", "signature": " RowData()", "full_signature": "public  RowData()", "class_method_signature": "RowData.RowData()", "testcase": false, "constructor": true}, {"identifier": "RowData", "parameters": "(final byte[] bytes)", "modifiers": "public", "return": "", "signature": " RowData(final byte[] bytes)", "full_signature": "public  RowData(final byte[] bytes)", "class_method_signature": "RowData.RowData(final byte[] bytes)", "testcase": false, "constructor": true}, {"identifier": "RowData", "parameters": "(final byte[] bytes, final int offset, final int length)", "modifiers": "public", "return": "", "signature": " RowData(final byte[] bytes, final int offset, final int length)", "full_signature": "public  RowData(final byte[] bytes, final int offset, final int length)", "class_method_signature": "RowData.RowData(final byte[] bytes, final int offset, final int length)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "(final int offset, final int length)", "modifiers": "public", "return": "void", "signature": "void reset(final int offset, final int length)", "full_signature": "public void reset(final int offset, final int length)", "class_method_signature": "RowData.reset(final int offset, final int length)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "(final byte[] bytes)", "modifiers": "public", "return": "void", "signature": "void reset(final byte[] bytes)", "full_signature": "public void reset(final byte[] bytes)", "class_method_signature": "RowData.reset(final byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "(final byte[] bytes, final int offset, final int length)", "modifiers": "public", "return": "void", "signature": "void reset(final byte[] bytes, final int offset, final int length)", "full_signature": "public void reset(final byte[] bytes, final int offset, final int length)", "class_method_signature": "RowData.reset(final byte[] bytes, final int offset, final int length)", "testcase": false, "constructor": false}, {"identifier": "prepareRow", "parameters": "(final int offset)", "modifiers": "public", "return": "boolean", "signature": "boolean prepareRow(final int offset)", "full_signature": "public boolean prepareRow(final int offset)", "class_method_signature": "RowData.prepareRow(final int offset)", "testcase": false, "constructor": false}, {"identifier": "validateRow", "parameters": "(final int offset)", "modifiers": "public", "return": "void", "signature": "void validateRow(final int offset)", "full_signature": "public void validateRow(final int offset)", "class_method_signature": "RowData.validateRow(final int offset)", "testcase": false, "constructor": false}, {"identifier": "getBufferStart", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBufferStart()", "full_signature": "public int getBufferStart()", "class_method_signature": "RowData.getBufferStart()", "testcase": false, "constructor": false}, {"identifier": "getBufferLength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBufferLength()", "full_signature": "public int getBufferLength()", "class_method_signature": "RowData.getBufferLength()", "testcase": false, "constructor": false}, {"identifier": "getBufferEnd", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBufferEnd()", "full_signature": "public int getBufferEnd()", "class_method_signature": "RowData.getBufferEnd()", "testcase": false, "constructor": false}, {"identifier": "getRowStart", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRowStart()", "full_signature": "public int getRowStart()", "class_method_signature": "RowData.getRowStart()", "testcase": false, "constructor": false}, {"identifier": "getRowStartData", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRowStartData()", "full_signature": "public int getRowStartData()", "class_method_signature": "RowData.getRowStartData()", "testcase": false, "constructor": false}, {"identifier": "getRowEnd", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRowEnd()", "full_signature": "public int getRowEnd()", "class_method_signature": "RowData.getRowEnd()", "testcase": false, "constructor": false}, {"identifier": "getRowSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRowSize()", "full_signature": "public int getRowSize()", "class_method_signature": "RowData.getRowSize()", "testcase": false, "constructor": false}, {"identifier": "getInnerStart", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getInnerStart()", "full_signature": "public int getInnerStart()", "class_method_signature": "RowData.getInnerStart()", "testcase": false, "constructor": false}, {"identifier": "getInnerSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getInnerSize()", "full_signature": "public int getInnerSize()", "class_method_signature": "RowData.getInnerSize()", "testcase": false, "constructor": false}, {"identifier": "getFieldCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getFieldCount()", "full_signature": "public int getFieldCount()", "class_method_signature": "RowData.getFieldCount()", "testcase": false, "constructor": false}, {"identifier": "getRowDefId", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRowDefId()", "full_signature": "public int getRowDefId()", "class_method_signature": "RowData.getRowDefId()", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getBytes()", "full_signature": "public byte[] getBytes()", "class_method_signature": "RowData.getBytes()", "testcase": false, "constructor": false}, {"identifier": "getColumnMapByte", "parameters": "(final int offset)", "modifiers": "public", "return": "int", "signature": "int getColumnMapByte(final int offset)", "full_signature": "public int getColumnMapByte(final int offset)", "class_method_signature": "RowData.getColumnMapByte(final int offset)", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "(final int fieldIndex)", "modifiers": "public", "return": "boolean", "signature": "boolean isNull(final int fieldIndex)", "full_signature": "public boolean isNull(final int fieldIndex)", "class_method_signature": "RowData.isNull(final int fieldIndex)", "testcase": false, "constructor": false}, {"identifier": "getIntegerValue", "parameters": "(final int offset, final int width)", "modifiers": "public", "return": "long", "signature": "long getIntegerValue(final int offset, final int width)", "full_signature": "public long getIntegerValue(final int offset, final int width)", "class_method_signature": "RowData.getIntegerValue(final int offset, final int width)", "testcase": false, "constructor": false}, {"identifier": "getUnsignedIntegerValue", "parameters": "(final int offset, final int width)", "modifiers": "public", "return": "long", "signature": "long getUnsignedIntegerValue(final int offset, final int width)", "full_signature": "public long getUnsignedIntegerValue(final int offset, final int width)", "class_method_signature": "RowData.getUnsignedIntegerValue(final int offset, final int width)", "testcase": false, "constructor": false}, {"identifier": "getStringValue", "parameters": "(final int offset, final int width, final FieldDef fieldDef)", "modifiers": "public", "return": "String", "signature": "String getStringValue(final int offset, final int width, final FieldDef fieldDef)", "full_signature": "public String getStringValue(final int offset, final int width, final FieldDef fieldDef)", "class_method_signature": "RowData.getStringValue(final int offset, final int width, final FieldDef fieldDef)", "testcase": false, "constructor": false}, {"identifier": "checkOffsetAndWidth", "parameters": "(int offset, int width)", "modifiers": "private", "return": "void", "signature": "void checkOffsetAndWidth(int offset, int width)", "full_signature": "private void checkOffsetAndWidth(int offset, int width)", "class_method_signature": "RowData.checkOffsetAndWidth(int offset, int width)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "public", "return": "RowData", "signature": "RowData copy()", "full_signature": "public RowData copy()", "class_method_signature": "RowData.copy()", "testcase": false, "constructor": false}, {"identifier": "createRow", "parameters": "(final RowDef rowDef, final Object[] values, boolean growBuffer)", "modifiers": "public", "return": "void", "signature": "void createRow(final RowDef rowDef, final Object[] values, boolean growBuffer)", "full_signature": "public void createRow(final RowDef rowDef, final Object[] values, boolean growBuffer)", "class_method_signature": "RowData.createRow(final RowDef rowDef, final Object[] values, boolean growBuffer)", "testcase": false, "constructor": false}, {"identifier": "createRow", "parameters": "(final RowDef rowDef, final Object[] values)", "modifiers": "public", "return": "void", "signature": "void createRow(final RowDef rowDef, final Object[] values)", "full_signature": "public void createRow(final RowDef rowDef, final Object[] values)", "class_method_signature": "RowData.createRow(final RowDef rowDef, final Object[] values)", "testcase": false, "constructor": false}, {"identifier": "updateNonNullLong", "parameters": "(FieldDef fieldDef, long rowId)", "modifiers": "public", "return": "void", "signature": "void updateNonNullLong(FieldDef fieldDef, long rowId)", "full_signature": "public void updateNonNullLong(FieldDef fieldDef, long rowId)", "class_method_signature": "RowData.updateNonNullLong(FieldDef fieldDef, long rowId)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RowData.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(AkibanInformationSchema ais)", "modifiers": "public", "return": "String", "signature": "String toString(AkibanInformationSchema ais)", "full_signature": "public String toString(AkibanInformationSchema ais)", "class_method_signature": "RowData.toString(AkibanInformationSchema ais)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(final RowDef rowDef)", "modifiers": "public", "return": "String", "signature": "String toString(final RowDef rowDef)", "full_signature": "public String toString(final RowDef rowDef)", "class_method_signature": "RowData.toString(final RowDef rowDef)", "testcase": false, "constructor": false}, {"identifier": "toStringWithoutRowDef", "parameters": "(String missingRowDefExplanation)", "modifiers": "public", "return": "String", "signature": "String toStringWithoutRowDef(String missingRowDefExplanation)", "full_signature": "public String toStringWithoutRowDef(String missingRowDefExplanation)", "class_method_signature": "RowData.toStringWithoutRowDef(String missingRowDefExplanation)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/server/rowdata/RowData.java"}, "focal_method": {"identifier": "createRow", "parameters": "(final RowDef rowDef, final Object[] values, boolean growBuffer)", "modifiers": "public", "return": "void", "body": "public void createRow(final RowDef rowDef, final Object[] values, boolean growBuffer)\n    {\n        if (growBuffer && !(bufferStart == 0 && bufferEnd == bytes.length)) {\n            // This RowData is embedded in a larger buffer. Can't grow it safely.\n            throw new CannotGrowBufferException();\n        }\n        RuntimeException exception = null;\n        do {\n            try {\n                exception = null;\n                createRow(rowDef, values);\n            } catch (ArrayIndexOutOfBoundsException e) {\n                exception = e;\n            } catch (EncodingException e) {\n                if (e.getCause() instanceof ArrayIndexOutOfBoundsException) {\n                    exception = e;\n                } else {\n                    throw e;\n                }\n            }\n            if (exception != null && growBuffer) {\n                int newSize = bytes.length == 0 ? CREATE_ROW_INITIAL_SIZE : bytes.length * 2;\n                reset(new byte[newSize]);\n            }\n        } while (growBuffer && exception != null);\n        if (exception != null) {\n            throw exception;\n        }\n    }", "signature": "void createRow(final RowDef rowDef, final Object[] values, boolean growBuffer)", "full_signature": "public void createRow(final RowDef rowDef, final Object[] values, boolean growBuffer)", "class_method_signature": "RowData.createRow(final RowDef rowDef, final Object[] values, boolean growBuffer)", "testcase": false, "constructor": false, "invocations": ["createRow", "getCause", "reset"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}