{"test_class": {"identifier": "EventBusSinkTest", "superclass": "extends EventbusTestBase", "interfaces": "", "fields": [{"original_string": "private WeldContainer container;", "modifier": "private", "type": "WeldContainer", "declarator": "container", "var_name": "container"}], "file": "smallrye-reactive-messaging-vertx-eventbus/src/test/java/io/smallrye/reactive/messaging/eventbus/EventBusSinkTest.java"}, "test_case": {"identifier": "testExpectReply", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"unchecked\") public", "return": "void", "body": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testExpectReply() {\n        String topic = UUID.randomUUID().toString();\n\n        List<Integer> integers = new ArrayList<>();\n        AtomicReference<io.vertx.mutiny.core.eventbus.Message<Integer>> last = new AtomicReference<>();\n        vertx.eventBus().<Integer> consumer(topic, m -> {\n            last.set(m);\n            if (m.body() < 8) {\n                integers.add(m.body());\n                m.replyAndForget(\"foo\");\n            }\n        });\n\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"address\", topic);\n        config.put(\"expect-reply\", true);\n        EventBusSink sink = new EventBusSink(vertx,\n                new VertxEventBusConnectorOutgoingConfiguration(new MapBasedConfig(config)));\n\n        SubscriberBuilder<? extends Message<?>, Void> subscriber = sink.sink();\n        Multi.createFrom().range(0, 10)\n                .map(Message::of)\n                .subscribe((Subscriber<Message<?>>) subscriber.build());\n\n        await().until(() -> integers.size() == 8 && last.get().body() == 8);\n        last.get().replyAndForget(\"bar\");\n        await().until(() -> last.get().body() == 9);\n        assertThat(last.get().body()).isEqualTo(9);\n        last.get().replyAndForget(\"baz\");\n    }", "signature": "void testExpectReply()", "full_signature": "@Test @SuppressWarnings(\"unchecked\") public void testExpectReply()", "class_method_signature": "EventBusSinkTest.testExpectReply()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "consumer", "eventBus", "set", "body", "add", "body", "replyAndForget", "put", "put", "sink", "subscribe", "map", "range", "createFrom", "build", "until", "await", "size", "body", "get", "replyAndForget", "get", "until", "await", "body", "get", "isEqualTo", "assertThat", "body", "get", "replyAndForget", "get"]}, "focal_class": {"identifier": "EventBusSink", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String address;", "modifier": "private final", "type": "String", "declarator": "address", "var_name": "address"}, {"original_string": "private final Vertx vertx;", "modifier": "private final", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private final boolean publish;", "modifier": "private final", "type": "boolean", "declarator": "publish", "var_name": "publish"}, {"original_string": "private final boolean expectReply;", "modifier": "private final", "type": "boolean", "declarator": "expectReply", "var_name": "expectReply"}, {"original_string": "private final String codec;", "modifier": "private final", "type": "String", "declarator": "codec", "var_name": "codec"}, {"original_string": "private final long timeout;", "modifier": "private final", "type": "long", "declarator": "timeout", "var_name": "timeout"}], "methods": [{"identifier": "EventBusSink", "parameters": "(Vertx vertx, VertxEventBusConnectorOutgoingConfiguration config)", "modifiers": "", "return": "", "signature": " EventBusSink(Vertx vertx, VertxEventBusConnectorOutgoingConfiguration config)", "full_signature": "  EventBusSink(Vertx vertx, VertxEventBusConnectorOutgoingConfiguration config)", "class_method_signature": "EventBusSink.EventBusSink(Vertx vertx, VertxEventBusConnectorOutgoingConfiguration config)", "testcase": false, "constructor": true}, {"identifier": "sink", "parameters": "()", "modifiers": "", "return": "SubscriberBuilder<? extends Message<?>, Void>", "signature": "SubscriberBuilder<? extends Message<?>, Void> sink()", "full_signature": " SubscriberBuilder<? extends Message<?>, Void> sink()", "class_method_signature": "EventBusSink.sink()", "testcase": false, "constructor": false}], "file": "smallrye-reactive-messaging-vertx-eventbus/src/main/java/io/smallrye/reactive/messaging/eventbus/EventBusSink.java"}, "focal_method": {"identifier": "sink", "parameters": "()", "modifiers": "", "return": "SubscriberBuilder<? extends Message<?>, Void>", "body": "SubscriberBuilder<? extends Message<?>, Void> sink() {\n        DeliveryOptions options = new DeliveryOptions();\n        if (this.codec != null) {\n            options.setCodecName(this.codec);\n        }\n        if (this.timeout != -1) {\n            options.setSendTimeout(this.timeout);\n        }\n\n        return ReactiveStreams.<Message<?>> builder()\n                .flatMapCompletionStage(msg -> {\n                    // TODO support getting an EventBusMessage as message.\n                    if (!this.publish) {\n                        if (expectReply) {\n                            return vertx.eventBus().request(address, msg.getPayload(), options).subscribeAsCompletionStage()\n                                    .thenApply(m -> msg);\n                        } else {\n                            vertx.eventBus().sendAndForget(address, msg.getPayload(), options);\n                            return CompletableFuture.completedFuture(msg);\n                        }\n                    } else {\n                        vertx.eventBus().publish(address, msg.getPayload(), options);\n                        return CompletableFuture.completedFuture(msg);\n                    }\n                })\n                .ignore();\n    }", "signature": "SubscriberBuilder<? extends Message<?>, Void> sink()", "full_signature": " SubscriberBuilder<? extends Message<?>, Void> sink()", "class_method_signature": "EventBusSink.sink()", "testcase": false, "constructor": false, "invocations": ["setCodecName", "setSendTimeout", "ignore", "flatMapCompletionStage", "builder", "thenApply", "subscribeAsCompletionStage", "request", "eventBus", "getPayload", "sendAndForget", "eventBus", "getPayload", "completedFuture", "publish", "eventBus", "getPayload", "completedFuture"]}, "repository": {"repo_id": 153155267, "url": "https://github.com/smallrye/smallrye-reactive-messaging", "stars": 45, "created": "10/15/2018 5:36:05 PM +00:00", "updates": "2020-01-26T16:55:44+00:00", "fork": "False", "license": "licensed"}}