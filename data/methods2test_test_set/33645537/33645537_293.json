{"test_class": {"identifier": "MergeBinaryNumbersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MergeBinaryNumbers mergeBinaryNumbers;", "modifier": "private", "type": "MergeBinaryNumbers", "declarator": "mergeBinaryNumbers", "var_name": "mergeBinaryNumbers"}], "file": "algs/src/test/java/com/github/pedrovgs/problem67/MergeBinaryNumbersTest.java"}, "test_case": {"identifier": "shouldMergeBinaryNumbersUsingPointers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldMergeBinaryNumbersUsingPointers() {\n    int n = 1024; //10000000000\n    int m = 19; //10011\n\n    int result = mergeBinaryNumbers.merge(n, m, 2, 6);\n\n    int expectedResult = 1100; //10001001100\n    assertEquals(expectedResult, result);\n  }", "signature": "void shouldMergeBinaryNumbersUsingPointers()", "full_signature": "@Test public void shouldMergeBinaryNumbersUsingPointers()", "class_method_signature": "MergeBinaryNumbersTest.shouldMergeBinaryNumbersUsingPointers()", "testcase": true, "constructor": false, "invocations": ["merge", "assertEquals"]}, "focal_class": {"identifier": "MergeBinaryNumbers", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "merge", "parameters": "(int n, int m, int i, int j)", "modifiers": "public", "return": "int", "signature": "int merge(int n, int m, int i, int j)", "full_signature": "public int merge(int n, int m, int i, int j)", "class_method_signature": "MergeBinaryNumbers.merge(int n, int m, int i, int j)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem67/MergeBinaryNumbers.java"}, "focal_method": {"identifier": "merge", "parameters": "(int n, int m, int i, int j)", "modifiers": "public", "return": "int", "body": "public int merge(int n, int m, int i, int j) {\n    int maskFullOfOnes = ~0;\n\n    int fullOfOnesBeforeJ = maskFullOfOnes << (j + 1);\n    int fullOfOnesAfterI = ((1 << i) - 1);\n\n    int allOnesExceptIandJ = fullOfOnesBeforeJ | fullOfOnesAfterI;\n\n    int clearBitsBetweenIandJ = n & allOnesExceptIandJ;\n    int moveMToTheCorrectPosition = m << i;\n\n    return clearBitsBetweenIandJ | moveMToTheCorrectPosition;\n  }", "signature": "int merge(int n, int m, int i, int j)", "full_signature": "public int merge(int n, int m, int i, int j)", "class_method_signature": "MergeBinaryNumbers.merge(int n, int m, int i, int j)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}