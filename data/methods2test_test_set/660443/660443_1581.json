{"test_class": {"identifier": "SpiroAtomCountDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [{"original_string": "static SmilesParser sp;", "modifier": "static", "type": "SmilesParser", "declarator": "sp", "var_name": "sp"}], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/SpiroAtomCountDescriptorTest.java"}, "test_case": {"identifier": "testDiSpiroPentane", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDiSpiroPentane() throws Exception {\n        IAtomContainer mol = sp.parseSmiles(\"CC1C[C]11(CC1)[C]123CC1.C2C3\"); // ethanol\n        DescriptorValue value = descriptor.calculate(mol);\n        Assert.assertEquals(2, ((IntegerResult) value.getValue()).intValue());\n    }", "signature": "void testDiSpiroPentane()", "full_signature": "@Test public void testDiSpiroPentane()", "class_method_signature": "SpiroAtomCountDescriptorTest.testDiSpiroPentane()", "testcase": true, "constructor": false, "invocations": ["parseSmiles", "calculate", "assertEquals", "intValue", "getValue"]}, "focal_class": {"identifier": "SpiroAtomCountDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private final static String[] NAMES = {\"nSpiroAtoms\"};", "modifier": "private final static", "type": "String[]", "declarator": "NAMES = {\"nSpiroAtoms\"}", "var_name": "NAMES"}], "methods": [{"identifier": "SpiroAtomCountDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " SpiroAtomCountDescriptor()", "full_signature": "public  SpiroAtomCountDescriptor()", "class_method_signature": "SpiroAtomCountDescriptor.SpiroAtomCountDescriptor()", "testcase": false, "constructor": true}, {"identifier": "initialise", "parameters": "(IChemObjectBuilder builder)", "modifiers": "@Override public", "return": "void", "signature": "void initialise(IChemObjectBuilder builder)", "full_signature": "@Override public void initialise(IChemObjectBuilder builder)", "class_method_signature": "SpiroAtomCountDescriptor.initialise(IChemObjectBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "SpiroAtomCountDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "SpiroAtomCountDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "SpiroAtomCountDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "SpiroAtomCountDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "traverseRings", "parameters": "(IAtomContainer mol, IAtom atom, IBond prev)", "modifiers": "private static", "return": "void", "signature": "void traverseRings(IAtomContainer mol, IAtom atom, IBond prev)", "full_signature": "private static void traverseRings(IAtomContainer mol, IAtom atom, IBond prev)", "class_method_signature": "SpiroAtomCountDescriptor.traverseRings(IAtomContainer mol, IAtom atom, IBond prev)", "testcase": false, "constructor": false}, {"identifier": "getSpiroDegree", "parameters": "(IAtomContainer mol, IAtom atom)", "modifiers": "private static", "return": "int", "signature": "int getSpiroDegree(IAtomContainer mol, IAtom atom)", "full_signature": "private static int getSpiroDegree(IAtomContainer mol, IAtom atom)", "class_method_signature": "SpiroAtomCountDescriptor.getSpiroDegree(IAtomContainer mol, IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "SpiroAtomCountDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "SpiroAtomCountDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "SpiroAtomCountDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "SpiroAtomCountDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception exception)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception exception)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception exception)", "class_method_signature": "SpiroAtomCountDescriptor.getDummyDescriptorValue(Exception exception)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/SpiroAtomCountDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer atomContainer) {\n        int nSpiro = 0;\n\n        try {\n            IAtomContainer local = atomContainer.clone();\n            Cycles.markRingAtomsAndBonds(local);\n            for (IAtom atom : local.atoms()) {\n                if (getSpiroDegree(local, atom) != 0)\n                    nSpiro++;\n            }\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(),\n                    new IntegerResult(nSpiro), getDescriptorNames());\n        } catch (CloneNotSupportedException e) {\n            return getDummyDescriptorValue(e);\n        }\n    }", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "SpiroAtomCountDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["clone", "markRingAtomsAndBonds", "atoms", "getSpiroDegree", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "getDummyDescriptorValue"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}