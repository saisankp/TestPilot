{"test_class": {"identifier": "JVMUtilTest", "superclass": "extends CachedLogger", "interfaces": "", "fields": [{"original_string": "private static final String classpath = ClassLoaderUtil.getClasspath();", "modifier": "private static final", "type": "String", "declarator": "classpath = ClassLoaderUtil.getClasspath()", "var_name": "classpath"}], "file": "concurrency/src/test/java/com/baidu/unbiz/common/JVMUtilTest.java"}, "test_case": {"identifier": "getJavaRuntimeInfo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getJavaRuntimeInfo() {\n        String arch = JVMUtil.getJavaRuntimeInfo().getSunArchDataModel();\n        assertTrue(\"32\".equals(arch) || \"64\".equals(arch));\n\n        String boot = JVMUtil.getJavaRuntimeInfo().getSunBootClassPath();\n\n        try {\n\n            File[] classpathes = JVMUtil.getClasspath();\n            boolean flag = false;\n            for (File classpath : classpathes) {\n                if (classpath.getAbsolutePath().equals(boot)) {\n                    flag = true;\n                    break;\n                }\n            }\n            assertTrue(flag);\n\n        } catch (Exception e) {\n            assertEquals(\"JVMUtil.getManifestFromJar Error\", e.getMessage());\n            assertEquals(RuntimeException.class, e.getClass());\n            assertEquals(\"error in opening zip file\", e.getCause().getMessage());\n            assertEquals(java.util.zip.ZipException.class, e.getCause().getClass());\n        }\n\n    }", "signature": "void getJavaRuntimeInfo()", "full_signature": "@Test public void getJavaRuntimeInfo()", "class_method_signature": "JVMUtilTest.getJavaRuntimeInfo()", "testcase": true, "constructor": false, "invocations": ["getSunArchDataModel", "getJavaRuntimeInfo", "assertTrue", "equals", "equals", "getSunBootClassPath", "getJavaRuntimeInfo", "getClasspath", "equals", "getAbsolutePath", "assertTrue", "assertEquals", "getMessage", "assertEquals", "getClass", "assertEquals", "getMessage", "getCause", "assertEquals", "getClass", "getCause"]}, "focal_class": {"identifier": "JVMUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String[] MANIFESTS = { \"Manifest.mf\", \"manifest.mf\", \"MANIFEST.MF\" };", "modifier": "private static final", "type": "String[]", "declarator": "MANIFESTS = { \"Manifest.mf\", \"manifest.mf\", \"MANIFEST.MF\" }", "var_name": "MANIFESTS"}, {"original_string": "private static final JavaRuntimeInfo JAVA_RUNTIME_INFO = new JavaRuntimeInfo();", "modifier": "private static final", "type": "JavaRuntimeInfo", "declarator": "JAVA_RUNTIME_INFO = new JavaRuntimeInfo()", "var_name": "JAVA_RUNTIME_INFO"}], "methods": [{"identifier": "appendToClassPath", "parameters": "(String name)", "modifiers": "public static", "return": "boolean", "signature": "boolean appendToClassPath(String name)", "full_signature": "public static boolean appendToClassPath(String name)", "class_method_signature": "JVMUtil.appendToClassPath(String name)", "testcase": false, "constructor": false}, {"identifier": "addAllJarsToClassPath", "parameters": "(String dirName)", "modifiers": "public static", "return": "String[]", "signature": "String[] addAllJarsToClassPath(String dirName)", "full_signature": "public static String[] addAllJarsToClassPath(String dirName)", "class_method_signature": "JVMUtil.addAllJarsToClassPath(String dirName)", "testcase": false, "constructor": false}, {"identifier": "getManifestFromFile", "parameters": "(File classpathItem)", "modifiers": "private static", "return": "Manifest", "signature": "Manifest getManifestFromFile(File classpathItem)", "full_signature": "private static Manifest getManifestFromFile(File classpathItem)", "class_method_signature": "JVMUtil.getManifestFromFile(File classpathItem)", "testcase": false, "constructor": false}, {"identifier": "getAndClose", "parameters": "(File manifestFile)", "modifiers": "private static", "return": "Manifest", "signature": "Manifest getAndClose(File manifestFile)", "full_signature": "private static Manifest getAndClose(File manifestFile)", "class_method_signature": "JVMUtil.getAndClose(File manifestFile)", "testcase": false, "constructor": false}, {"identifier": "getManifestFromJar", "parameters": "(File classpathItem)", "modifiers": "private static", "return": "Manifest", "signature": "Manifest getManifestFromJar(File classpathItem)", "full_signature": "private static Manifest getManifestFromJar(File classpathItem)", "class_method_signature": "JVMUtil.getManifestFromJar(File classpathItem)", "testcase": false, "constructor": false}, {"identifier": "getManifest", "parameters": "(File classpathItem)", "modifiers": "public static", "return": "Manifest", "signature": "Manifest getManifest(File classpathItem)", "full_signature": "public static Manifest getManifest(File classpathItem)", "class_method_signature": "JVMUtil.getManifest(File classpathItem)", "testcase": false, "constructor": false}, {"identifier": "getClasspathItemBaseDir", "parameters": "(File classpathItem)", "modifiers": "private static", "return": "String", "signature": "String getClasspathItemBaseDir(File classpathItem)", "full_signature": "private static String getClasspathItemBaseDir(File classpathItem)", "class_method_signature": "JVMUtil.getClasspathItemBaseDir(File classpathItem)", "testcase": false, "constructor": false}, {"identifier": "getClasspath", "parameters": "()", "modifiers": "public static", "return": "File[]", "signature": "File[] getClasspath()", "full_signature": "public static File[] getClasspath()", "class_method_signature": "JVMUtil.getClasspath()", "testcase": false, "constructor": false}, {"identifier": "getClasspath", "parameters": "(ClassLoader classLoader)", "modifiers": "public static", "return": "File[]", "signature": "File[] getClasspath(ClassLoader classLoader)", "full_signature": "public static File[] getClasspath(ClassLoader classLoader)", "class_method_signature": "JVMUtil.getClasspath(ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "addInnerClasspathItems", "parameters": "(Set<File> classpaths, File item)", "modifiers": "private static", "return": "void", "signature": "void addInnerClasspathItems(Set<File> classpaths, File item)", "full_signature": "private static void addInnerClasspathItems(Set<File> classpaths, File item)", "class_method_signature": "JVMUtil.addInnerClasspathItems(Set<File> classpaths, File item)", "testcase": false, "constructor": false}, {"identifier": "getJavaRuntimeInfo", "parameters": "()", "modifiers": "public static final", "return": "JavaRuntimeInfo", "signature": "JavaRuntimeInfo getJavaRuntimeInfo()", "full_signature": "public static final JavaRuntimeInfo getJavaRuntimeInfo()", "class_method_signature": "JVMUtil.getJavaRuntimeInfo()", "testcase": false, "constructor": false}, {"identifier": "getSystemProperty", "parameters": "(String name, boolean quiet)", "modifiers": "private static", "return": "String", "signature": "String getSystemProperty(String name, boolean quiet)", "full_signature": "private static String getSystemProperty(String name, boolean quiet)", "class_method_signature": "JVMUtil.getSystemProperty(String name, boolean quiet)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/JVMUtil.java"}, "focal_method": {"identifier": "getJavaRuntimeInfo", "parameters": "()", "modifiers": "public static final", "return": "JavaRuntimeInfo", "body": "public static final JavaRuntimeInfo getJavaRuntimeInfo() {\n        return JAVA_RUNTIME_INFO;\n    }", "signature": "JavaRuntimeInfo getJavaRuntimeInfo()", "full_signature": "public static final JavaRuntimeInfo getJavaRuntimeInfo()", "class_method_signature": "JVMUtil.getJavaRuntimeInfo()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}