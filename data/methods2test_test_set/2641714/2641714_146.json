{"test_class": {"identifier": "BasicPatternDefinitionResolverTest", "superclass": "", "interfaces": "", "fields": [], "file": "tiles-core/src/test/java/org/apache/tiles/definition/pattern/BasicPatternDefinitionResolverTest.java"}, "test_case": {"identifier": "testAddDefinitionsAsPatternMatchers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddDefinitionsAsPatternMatchers() {\n        DefinitionPatternMatcherFactory factory = createMock(DefinitionPatternMatcherFactory.class);\n        PatternRecognizer recognizer = createMock(PatternRecognizer.class);\n        DefinitionPatternMatcher firstMatcher = createMock(DefinitionPatternMatcher.class);\n        DefinitionPatternMatcher thirdMatcher = createMock(DefinitionPatternMatcher.class);\n\n        expect(recognizer.isPatternRecognized(\"first\")).andReturn(true);\n        expect(recognizer.isPatternRecognized(\"second\")).andReturn(false);\n        expect(recognizer.isPatternRecognized(\"third\")).andReturn(true);\n\n        Definition firstDefinition = new Definition(\"first\", (Attribute) null,\n                null);\n        Definition secondDefinition = new Definition(\"second\",\n                (Attribute) null, null);\n        Definition thirdDefinition = new Definition(\"third\", (Attribute) null,\n                null);\n\n        expect(factory.createDefinitionPatternMatcher(\"first\", firstDefinition))\n                .andReturn(firstMatcher);\n        expect(factory.createDefinitionPatternMatcher(\"third\", thirdDefinition))\n                .andReturn(thirdMatcher);\n\n        replay(factory, recognizer, firstMatcher, thirdMatcher);\n        BasicPatternDefinitionResolver<Integer> resolver = new BasicPatternDefinitionResolver<Integer>(\n                factory, recognizer);\n        Map<String, Definition> localeDefsMap = new LinkedHashMap<String, Definition>();\n        localeDefsMap.put(\"first\", firstDefinition);\n        localeDefsMap.put(\"second\", secondDefinition);\n        localeDefsMap.put(\"third\", thirdDefinition);\n        List<DefinitionPatternMatcher> matchers = new ArrayList<DefinitionPatternMatcher>();\n        resolver.addDefinitionsAsPatternMatchers(matchers, localeDefsMap);\n        assertEquals(2, matchers.size());\n        assertEquals(firstMatcher, matchers.get(0));\n        assertEquals(thirdMatcher, matchers.get(1));\n        verify(factory, recognizer, firstMatcher, thirdMatcher);\n    }", "signature": "void testAddDefinitionsAsPatternMatchers()", "full_signature": "@Test public void testAddDefinitionsAsPatternMatchers()", "class_method_signature": "BasicPatternDefinitionResolverTest.testAddDefinitionsAsPatternMatchers()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "createMock", "andReturn", "expect", "isPatternRecognized", "andReturn", "expect", "isPatternRecognized", "andReturn", "expect", "isPatternRecognized", "andReturn", "expect", "createDefinitionPatternMatcher", "andReturn", "expect", "createDefinitionPatternMatcher", "replay", "put", "put", "put", "addDefinitionsAsPatternMatchers", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "verify"]}, "focal_class": {"identifier": "BasicPatternDefinitionResolver", "superclass": "extends\n        AbstractPatternDefinitionResolver<T>", "interfaces": "", "fields": [{"original_string": "private DefinitionPatternMatcherFactory definitionPatternMatcherFactory;", "modifier": "private", "type": "DefinitionPatternMatcherFactory", "declarator": "definitionPatternMatcherFactory", "var_name": "definitionPatternMatcherFactory"}, {"original_string": "private PatternRecognizer patternRecognizer;", "modifier": "private", "type": "PatternRecognizer", "declarator": "patternRecognizer", "var_name": "patternRecognizer"}], "methods": [{"identifier": "BasicPatternDefinitionResolver", "parameters": "(DefinitionPatternMatcherFactory definitionPatternMatcherFactory,\n            PatternRecognizer patternRecognizer)", "modifiers": "public", "return": "", "signature": " BasicPatternDefinitionResolver(DefinitionPatternMatcherFactory definitionPatternMatcherFactory,\n            PatternRecognizer patternRecognizer)", "full_signature": "public  BasicPatternDefinitionResolver(DefinitionPatternMatcherFactory definitionPatternMatcherFactory,\n            PatternRecognizer patternRecognizer)", "class_method_signature": "BasicPatternDefinitionResolver.BasicPatternDefinitionResolver(DefinitionPatternMatcherFactory definitionPatternMatcherFactory,\n            PatternRecognizer patternRecognizer)", "testcase": false, "constructor": true}, {"identifier": "addDefinitionsAsPatternMatchers", "parameters": "(List<DefinitionPatternMatcher> matchers,\n            Map<String, Definition> defsMap)", "modifiers": "@Override protected", "return": "Map<String, Definition>", "signature": "Map<String, Definition> addDefinitionsAsPatternMatchers(List<DefinitionPatternMatcher> matchers,\n            Map<String, Definition> defsMap)", "full_signature": "@Override protected Map<String, Definition> addDefinitionsAsPatternMatchers(List<DefinitionPatternMatcher> matchers,\n            Map<String, Definition> defsMap)", "class_method_signature": "BasicPatternDefinitionResolver.addDefinitionsAsPatternMatchers(List<DefinitionPatternMatcher> matchers,\n            Map<String, Definition> defsMap)", "testcase": false, "constructor": false}], "file": "tiles-core/src/main/java/org/apache/tiles/definition/pattern/BasicPatternDefinitionResolver.java"}, "focal_method": {"identifier": "addDefinitionsAsPatternMatchers", "parameters": "(List<DefinitionPatternMatcher> matchers,\n            Map<String, Definition> defsMap)", "modifiers": "@Override protected", "return": "Map<String, Definition>", "body": "@Override\n    protected Map<String, Definition> addDefinitionsAsPatternMatchers(List<DefinitionPatternMatcher> matchers,\n            Map<String, Definition> defsMap) {\n        Set<String> excludedKeys = new LinkedHashSet<String>();\n        for (Map.Entry<String, Definition> de : defsMap.entrySet()) {\n            String key = de.getKey();\n            if (patternRecognizer.isPatternRecognized(key)) {\n                matchers.add(definitionPatternMatcherFactory\n                        .createDefinitionPatternMatcher(key, de.getValue()));\n            } else {\n                excludedKeys.add(key);\n            }\n        }\n        return PatternUtil.createExtractedMap(defsMap, excludedKeys);\n    }", "signature": "Map<String, Definition> addDefinitionsAsPatternMatchers(List<DefinitionPatternMatcher> matchers,\n            Map<String, Definition> defsMap)", "full_signature": "@Override protected Map<String, Definition> addDefinitionsAsPatternMatchers(List<DefinitionPatternMatcher> matchers,\n            Map<String, Definition> defsMap)", "class_method_signature": "BasicPatternDefinitionResolver.addDefinitionsAsPatternMatchers(List<DefinitionPatternMatcher> matchers,\n            Map<String, Definition> defsMap)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getKey", "isPatternRecognized", "add", "createDefinitionPatternMatcher", "getValue", "add", "createExtractedMap"]}, "repository": {"repo_id": 2641714, "url": "https://github.com/apache/tiles", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 99, "size": 12554, "license": "licensed"}}