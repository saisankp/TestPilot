{"test_class": {"identifier": "TestDigestScheme", "superclass": "", "interfaces": "", "fields": [], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/impl/auth/TestDigestScheme.java"}, "test_case": {"identifier": "testDigestAuthenticationWithNoRealm", "parameters": "()", "modifiers": "@Test(expected=MalformedChallengeException.class) public", "return": "void", "body": "@Test(expected=MalformedChallengeException.class)\n    public void testDigestAuthenticationWithNoRealm() throws Exception {\n        Header authChallenge = new BasicHeader(AUTH.WWW_AUTH, \"Digest\");\n        AuthScheme authscheme = new DigestScheme();\n        authscheme.processChallenge(authChallenge);\n    }", "signature": "void testDigestAuthenticationWithNoRealm()", "full_signature": "@Test(expected=MalformedChallengeException.class) public void testDigestAuthenticationWithNoRealm()", "class_method_signature": "TestDigestScheme.testDigestAuthenticationWithNoRealm()", "testcase": true, "constructor": false, "invocations": ["processChallenge"]}, "focal_class": {"identifier": "DigestScheme", "superclass": "extends RFC2617Scheme", "interfaces": "", "fields": [{"original_string": "private static final char[] HEXADECIMAL = {\n        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd',\n        'e', 'f'\n    };", "modifier": "private static final", "type": "char[]", "declarator": "HEXADECIMAL = {\n        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd',\n        'e', 'f'\n    }", "var_name": "HEXADECIMAL"}, {"original_string": "private boolean complete;", "modifier": "private", "type": "boolean", "declarator": "complete", "var_name": "complete"}, {"original_string": "private static final int QOP_MISSING = 0;", "modifier": "private static final", "type": "int", "declarator": "QOP_MISSING = 0", "var_name": "QOP_MISSING"}, {"original_string": "private static final int QOP_AUTH_INT = 1;", "modifier": "private static final", "type": "int", "declarator": "QOP_AUTH_INT = 1", "var_name": "QOP_AUTH_INT"}, {"original_string": "private static final int QOP_AUTH = 2;", "modifier": "private static final", "type": "int", "declarator": "QOP_AUTH = 2", "var_name": "QOP_AUTH"}, {"original_string": "private int qopVariant = QOP_MISSING;", "modifier": "private", "type": "int", "declarator": "qopVariant = QOP_MISSING", "var_name": "qopVariant"}, {"original_string": "private String lastNonce;", "modifier": "private", "type": "String", "declarator": "lastNonce", "var_name": "lastNonce"}, {"original_string": "private long nounceCount;", "modifier": "private", "type": "long", "declarator": "nounceCount", "var_name": "nounceCount"}, {"original_string": "private String cnonce;", "modifier": "private", "type": "String", "declarator": "cnonce", "var_name": "cnonce"}, {"original_string": "private String nc;", "modifier": "private", "type": "String", "declarator": "nc", "var_name": "nc"}], "methods": [{"identifier": "DigestScheme", "parameters": "()", "modifiers": "public", "return": "", "signature": " DigestScheme()", "full_signature": "public  DigestScheme()", "class_method_signature": "DigestScheme.DigestScheme()", "testcase": false, "constructor": true}, {"identifier": "processChallenge", "parameters": "(\n            final Header header)", "modifiers": "@Override public", "return": "void", "signature": "void processChallenge(\n            final Header header)", "full_signature": "@Override public void processChallenge(\n            final Header header)", "class_method_signature": "DigestScheme.processChallenge(\n            final Header header)", "testcase": false, "constructor": false}, {"identifier": "isComplete", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isComplete()", "full_signature": "public boolean isComplete()", "class_method_signature": "DigestScheme.isComplete()", "testcase": false, "constructor": false}, {"identifier": "getSchemeName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSchemeName()", "full_signature": "public String getSchemeName()", "class_method_signature": "DigestScheme.getSchemeName()", "testcase": false, "constructor": false}, {"identifier": "isConnectionBased", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConnectionBased()", "full_signature": "public boolean isConnectionBased()", "class_method_signature": "DigestScheme.isConnectionBased()", "testcase": false, "constructor": false}, {"identifier": "overrideParamter", "parameters": "(final String name, final String value)", "modifiers": "public", "return": "void", "signature": "void overrideParamter(final String name, final String value)", "full_signature": "public void overrideParamter(final String name, final String value)", "class_method_signature": "DigestScheme.overrideParamter(final String name, final String value)", "testcase": false, "constructor": false}, {"identifier": "getCnonce", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getCnonce()", "full_signature": "private String getCnonce()", "class_method_signature": "DigestScheme.getCnonce()", "testcase": false, "constructor": false}, {"identifier": "getNc", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getNc()", "full_signature": "private String getNc()", "class_method_signature": "DigestScheme.getNc()", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(\n            final Credentials credentials,\n            final HttpRequest request)", "modifiers": "public", "return": "Header", "signature": "Header authenticate(\n            final Credentials credentials,\n            final HttpRequest request)", "full_signature": "public Header authenticate(\n            final Credentials credentials,\n            final HttpRequest request)", "class_method_signature": "DigestScheme.authenticate(\n            final Credentials credentials,\n            final HttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "createMessageDigest", "parameters": "(\n            final String digAlg)", "modifiers": "private static", "return": "MessageDigest", "signature": "MessageDigest createMessageDigest(\n            final String digAlg)", "full_signature": "private static MessageDigest createMessageDigest(\n            final String digAlg)", "class_method_signature": "DigestScheme.createMessageDigest(\n            final String digAlg)", "testcase": false, "constructor": false}, {"identifier": "createDigest", "parameters": "(final Credentials credentials)", "modifiers": "private", "return": "String", "signature": "String createDigest(final Credentials credentials)", "full_signature": "private String createDigest(final Credentials credentials)", "class_method_signature": "DigestScheme.createDigest(final Credentials credentials)", "testcase": false, "constructor": false}, {"identifier": "createDigestHeader", "parameters": "(\n            final Credentials credentials,\n            final String digest)", "modifiers": "private", "return": "Header", "signature": "Header createDigestHeader(\n            final Credentials credentials,\n            final String digest)", "full_signature": "private Header createDigestHeader(\n            final Credentials credentials,\n            final String digest)", "class_method_signature": "DigestScheme.createDigestHeader(\n            final Credentials credentials,\n            final String digest)", "testcase": false, "constructor": false}, {"identifier": "getQopVariantString", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getQopVariantString()", "full_signature": "private String getQopVariantString()", "class_method_signature": "DigestScheme.getQopVariantString()", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(byte[] binaryData)", "modifiers": "private static", "return": "String", "signature": "String encode(byte[] binaryData)", "full_signature": "private static String encode(byte[] binaryData)", "class_method_signature": "DigestScheme.encode(byte[] binaryData)", "testcase": false, "constructor": false}, {"identifier": "createCnonce", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String createCnonce()", "full_signature": "public static String createCnonce()", "class_method_signature": "DigestScheme.createCnonce()", "testcase": false, "constructor": false}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/impl/auth/DigestScheme.java"}, "focal_method": {"identifier": "processChallenge", "parameters": "(\n            final Header header)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void processChallenge(\n            final Header header) throws MalformedChallengeException {\n        super.processChallenge(header);\n\n        if (getParameter(\"realm\") == null) {\n            throw new MalformedChallengeException(\"missing realm in challange\");\n        }\n        if (getParameter(\"nonce\") == null) {\n            throw new MalformedChallengeException(\"missing nonce in challange\");\n        }\n\n        boolean unsupportedQop = false;\n        // qop parsing\n        String qop = getParameter(\"qop\");\n        if (qop != null) {\n            StringTokenizer tok = new StringTokenizer(qop,\",\");\n            while (tok.hasMoreTokens()) {\n                String variant = tok.nextToken().trim();\n                if (variant.equals(\"auth\")) {\n                    qopVariant = QOP_AUTH;\n                    break; //that's our favourite, because auth-int is unsupported\n                } else if (variant.equals(\"auth-int\")) {\n                    qopVariant = QOP_AUTH_INT;\n                } else {\n                    unsupportedQop = true;\n                }\n            }\n        }\n\n        if (unsupportedQop && (qopVariant == QOP_MISSING)) {\n            throw new MalformedChallengeException(\"None of the qop methods is supported\");\n        }\n        this.complete = true;\n    }", "signature": "void processChallenge(\n            final Header header)", "full_signature": "@Override public void processChallenge(\n            final Header header)", "class_method_signature": "DigestScheme.processChallenge(\n            final Header header)", "testcase": false, "constructor": false, "invocations": ["processChallenge", "getParameter", "getParameter", "getParameter", "hasMoreTokens", "trim", "nextToken", "equals", "equals"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}