{"test_class": {"identifier": "ClassUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ClassUtilTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ClassUtilTest.class)", "var_name": "logger"}], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/ClassUtilTest.java"}, "test_case": {"identifier": "findEnumConstant", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findEnumConstant() throws Exception {\n        // non-enum classes should just return null\n        Assert.assertEquals(null, ClassUtil.findEnumConstant(this.getClass(), \"One\", true));\n        Assert.assertEquals(TestEnum.ONE, ClassUtil.findEnumConstant(TestEnum.class, \"ONE\", true));\n        Assert.assertEquals(TestEnum.ONE, ClassUtil.findEnumConstant(TestEnum.class, \"ONE\", false));\n        // case sensitive search should fail\n        Assert.assertEquals(null, ClassUtil.findEnumConstant(TestEnum.class, \"One\", true));\n        Assert.assertEquals(TestEnum.ONE, ClassUtil.findEnumConstant(TestEnum.class, \"one\", false));\n        Assert.assertEquals(TestEnum.Two, ClassUtil.findEnumConstant(TestEnum.class, \"Two\", true));\n        Assert.assertEquals(TestEnum.Two, ClassUtil.findEnumConstant(TestEnum.class, \"two\", false));\n        Assert.assertEquals(null, ClassUtil.findEnumConstant(TestEnum.class, \"two\", true));\n    }", "signature": "void findEnumConstant()", "full_signature": "@Test public void findEnumConstant()", "class_method_signature": "ClassUtilTest.findEnumConstant()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "findEnumConstant", "getClass", "assertEquals", "findEnumConstant", "assertEquals", "findEnumConstant", "assertEquals", "findEnumConstant", "assertEquals", "findEnumConstant", "assertEquals", "findEnumConstant", "assertEquals", "findEnumConstant", "assertEquals", "findEnumConstant"]}, "focal_class": {"identifier": "ClassUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "findEnumConstant", "parameters": "(Class<?> type, String constantName)", "modifiers": "public static", "return": "Object", "signature": "Object findEnumConstant(Class<?> type, String constantName)", "full_signature": "public static Object findEnumConstant(Class<?> type, String constantName)", "class_method_signature": "ClassUtil.findEnumConstant(Class<?> type, String constantName)", "testcase": false, "constructor": false}, {"identifier": "findEnumConstant", "parameters": "(Class<?> type, String constantName, boolean caseSensitive)", "modifiers": "public static", "return": "Object", "signature": "Object findEnumConstant(Class<?> type, String constantName, boolean caseSensitive)", "full_signature": "public static Object findEnumConstant(Class<?> type, String constantName, boolean caseSensitive)", "class_method_signature": "ClassUtil.findEnumConstant(Class<?> type, String constantName, boolean caseSensitive)", "testcase": false, "constructor": false}, {"identifier": "getClassHierarchy", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] getClassHierarchy(Class<?> type)", "full_signature": "public static Class<?>[] getClassHierarchy(Class<?> type)", "class_method_signature": "ClassUtil.getClassHierarchy(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "hasBeanMethods", "parameters": "(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasBeanMethods(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "full_signature": "public static boolean hasBeanMethods(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "class_method_signature": "ClassUtil.hasBeanMethods(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "testcase": false, "constructor": false}, {"identifier": "getBeanMethods", "parameters": "(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "modifiers": "public static", "return": "Method[]", "signature": "Method[] getBeanMethods(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "full_signature": "public static Method[] getBeanMethods(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "class_method_signature": "ClassUtil.getBeanMethods(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(Class<?> type, String name, Class<?> returnType, Class<?> paramType, boolean caseSensitive)", "modifiers": "public static", "return": "Method", "signature": "Method getMethod(Class<?> type, String name, Class<?> returnType, Class<?> paramType, boolean caseSensitive)", "full_signature": "public static Method getMethod(Class<?> type, String name, Class<?> returnType, Class<?> paramType, boolean caseSensitive)", "class_method_signature": "ClassUtil.getMethod(Class<?> type, String name, Class<?> returnType, Class<?> paramType, boolean caseSensitive)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/ClassUtil.java"}, "focal_method": {"identifier": "findEnumConstant", "parameters": "(Class<?> type, String constantName)", "modifiers": "public static", "return": "Object", "body": "public static Object findEnumConstant(Class<?> type, String constantName) {\n        return findEnumConstant(type, constantName, true);\n    }", "signature": "Object findEnumConstant(Class<?> type, String constantName)", "full_signature": "public static Object findEnumConstant(Class<?> type, String constantName)", "class_method_signature": "ClassUtil.findEnumConstant(Class<?> type, String constantName)", "testcase": false, "constructor": false, "invocations": ["findEnumConstant"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}