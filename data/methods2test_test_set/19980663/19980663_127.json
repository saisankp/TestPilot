{"test_class": {"identifier": "GroupActionTest", "superclass": "extends ActionTest", "interfaces": "", "fields": [], "file": "foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/actions/GroupActionTest.java"}, "test_case": {"identifier": "testGroupActionSingleFieldSpecialCharactersNoFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGroupActionSingleFieldSpecialCharactersNoFilter() throws FoxtrotException, JsonProcessingException {\n        GroupRequest groupRequest = new GroupRequest();\n        groupRequest.setTable(TestUtils.TEST_TABLE_NAME);\n        groupRequest.setNesting(Arrays.asList(\"\"));\n\n        try {\n            getQueryExecutor().execute(groupRequest);\n            fail();\n        } catch (FoxtrotException ex) {\n            ex.printStackTrace();\n            assertEquals(ErrorCode.MALFORMED_QUERY, ex.getCode());\n        }\n    }", "signature": "void testGroupActionSingleFieldSpecialCharactersNoFilter()", "full_signature": "@Test public void testGroupActionSingleFieldSpecialCharactersNoFilter()", "class_method_signature": "GroupActionTest.testGroupActionSingleFieldSpecialCharactersNoFilter()", "testcase": true, "constructor": false, "invocations": ["setTable", "setNesting", "asList", "execute", "getQueryExecutor", "fail", "printStackTrace", "assertEquals", "getCode"]}, "focal_class": {"identifier": "GroupAction", "superclass": "extends Action<GroupRequest>", "interfaces": "", "fields": [{"original_string": "private static final long MAX_CARDINALITY = 50000;", "modifier": "private static final", "type": "long", "declarator": "MAX_CARDINALITY = 50000", "var_name": "MAX_CARDINALITY"}, {"original_string": "private static final long MIN_ESTIMATION_THRESHOLD = 1000;", "modifier": "private static final", "type": "long", "declarator": "MIN_ESTIMATION_THRESHOLD = 1000", "var_name": "MIN_ESTIMATION_THRESHOLD"}, {"original_string": "private static final double PROBABILITY_CUT_OFF = 0.5;", "modifier": "private static final", "type": "double", "declarator": "PROBABILITY_CUT_OFF = 0.5", "var_name": "PROBABILITY_CUT_OFF"}, {"original_string": "private final ElasticsearchTuningConfig elasticsearchTuningConfig;", "modifier": "private final", "type": "ElasticsearchTuningConfig", "declarator": "elasticsearchTuningConfig", "var_name": "elasticsearchTuningConfig"}], "methods": [{"identifier": "GroupAction", "parameters": "(GroupRequest parameter, AnalyticsLoader analyticsLoader)", "modifiers": "public", "return": "", "signature": " GroupAction(GroupRequest parameter, AnalyticsLoader analyticsLoader)", "full_signature": "public  GroupAction(GroupRequest parameter, AnalyticsLoader analyticsLoader)", "class_method_signature": "GroupAction.GroupAction(GroupRequest parameter, AnalyticsLoader analyticsLoader)", "testcase": false, "constructor": true}, {"identifier": "preprocess", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void preprocess()", "full_signature": "@Override public void preprocess()", "class_method_signature": "GroupAction.preprocess()", "testcase": false, "constructor": false}, {"identifier": "getMetricKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMetricKey()", "full_signature": "@Override public String getMetricKey()", "class_method_signature": "GroupAction.getMetricKey()", "testcase": false, "constructor": false}, {"identifier": "getRequestCacheKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRequestCacheKey()", "full_signature": "@Override public String getRequestCacheKey()", "class_method_signature": "GroupAction.getRequestCacheKey()", "testcase": false, "constructor": false}, {"identifier": "validateImpl", "parameters": "(GroupRequest parameter)", "modifiers": "@Override public", "return": "void", "signature": "void validateImpl(GroupRequest parameter)", "full_signature": "@Override public void validateImpl(GroupRequest parameter)", "class_method_signature": "GroupAction.validateImpl(GroupRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(GroupRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse execute(GroupRequest parameter)", "full_signature": "@Override public ActionResponse execute(GroupRequest parameter)", "class_method_signature": "GroupAction.execute(GroupRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getRequestBuilder", "parameters": "(GroupRequest parameter)", "modifiers": "@Override public", "return": "SearchRequestBuilder", "signature": "SearchRequestBuilder getRequestBuilder(GroupRequest parameter)", "full_signature": "@Override public SearchRequestBuilder getRequestBuilder(GroupRequest parameter)", "class_method_signature": "GroupAction.getRequestBuilder(GroupRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getResponse", "parameters": "(org.elasticsearch.action.ActionResponse response, GroupRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse getResponse(org.elasticsearch.action.ActionResponse response, GroupRequest parameter)", "full_signature": "@Override public ActionResponse getResponse(org.elasticsearch.action.ActionResponse response, GroupRequest parameter)", "class_method_signature": "GroupAction.getResponse(org.elasticsearch.action.ActionResponse response, GroupRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "estimateProbability", "parameters": "(TableFieldMapping tableFieldMapping, GroupRequest parameter)", "modifiers": "private", "return": "double", "signature": "double estimateProbability(TableFieldMapping tableFieldMapping, GroupRequest parameter)", "full_signature": "private double estimateProbability(TableFieldMapping tableFieldMapping, GroupRequest parameter)", "class_method_signature": "GroupAction.estimateProbability(TableFieldMapping tableFieldMapping, GroupRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "estimateDocCountBasedOnTime", "parameters": "(\n            long currentDocCount, GroupRequest parameter, TableMetadataManager tableMetadataManager,\n            String table)", "modifiers": "private", "return": "long", "signature": "long estimateDocCountBasedOnTime(\n            long currentDocCount, GroupRequest parameter, TableMetadataManager tableMetadataManager,\n            String table)", "full_signature": "private long estimateDocCountBasedOnTime(\n            long currentDocCount, GroupRequest parameter, TableMetadataManager tableMetadataManager,\n            String table)", "class_method_signature": "GroupAction.estimateDocCountBasedOnTime(\n            long currentDocCount, GroupRequest parameter, TableMetadataManager tableMetadataManager,\n            String table)", "testcase": false, "constructor": false}, {"identifier": "extractMaxDocCount", "parameters": "(Map<String, FieldMetadata> metaMap)", "modifiers": "private", "return": "long", "signature": "long extractMaxDocCount(Map<String, FieldMetadata> metaMap)", "full_signature": "private long extractMaxDocCount(Map<String, FieldMetadata> metaMap)", "class_method_signature": "GroupAction.extractMaxDocCount(Map<String, FieldMetadata> metaMap)", "testcase": false, "constructor": false}, {"identifier": "estimateDocCountWithFilters", "parameters": "(\n            long currentDocCount,\n            Map<String, FieldMetadata> metaMap,\n            List<Filter> filters)", "modifiers": "private", "return": "long", "signature": "long estimateDocCountWithFilters(\n            long currentDocCount,\n            Map<String, FieldMetadata> metaMap,\n            List<Filter> filters)", "full_signature": "private long estimateDocCountWithFilters(\n            long currentDocCount,\n            Map<String, FieldMetadata> metaMap,\n            List<Filter> filters)", "class_method_signature": "GroupAction.estimateDocCountWithFilters(\n            long currentDocCount,\n            Map<String, FieldMetadata> metaMap,\n            List<Filter> filters)", "testcase": false, "constructor": false}, {"identifier": "getDocCountWithFilterEstimationDataVisitor", "parameters": "(Filter filter, String cacheKey)", "modifiers": "private", "return": "EstimationDataVisitor<Double>", "signature": "EstimationDataVisitor<Double> getDocCountWithFilterEstimationDataVisitor(Filter filter, String cacheKey)", "full_signature": "private EstimationDataVisitor<Double> getDocCountWithFilterEstimationDataVisitor(Filter filter, String cacheKey)", "class_method_signature": "GroupAction.getDocCountWithFilterEstimationDataVisitor(Filter filter, String cacheKey)", "testcase": false, "constructor": false}, {"identifier": "getFixedFilterVisitorAdapter", "parameters": "(FixedEstimationData fixedEstimationData)", "modifiers": "private", "return": "FilterVisitorAdapter<Double>", "signature": "FilterVisitorAdapter<Double> getFixedFilterVisitorAdapter(FixedEstimationData fixedEstimationData)", "full_signature": "private FilterVisitorAdapter<Double> getFixedFilterVisitorAdapter(FixedEstimationData fixedEstimationData)", "class_method_signature": "GroupAction.getFixedFilterVisitorAdapter(FixedEstimationData fixedEstimationData)", "testcase": false, "constructor": false}, {"identifier": "getPercentileFilterVisitorAdapter", "parameters": "(\n            double[] percentiles,\n            String cacheKey,\n            long numMatches)", "modifiers": "private", "return": "FilterVisitorAdapter<Double>", "signature": "FilterVisitorAdapter<Double> getPercentileFilterVisitorAdapter(\n            double[] percentiles,\n            String cacheKey,\n            long numMatches)", "full_signature": "private FilterVisitorAdapter<Double> getPercentileFilterVisitorAdapter(\n            double[] percentiles,\n            String cacheKey,\n            long numMatches)", "class_method_signature": "GroupAction.getPercentileFilterVisitorAdapter(\n            double[] percentiles,\n            String cacheKey,\n            long numMatches)", "testcase": false, "constructor": false}, {"identifier": "getCardinalityFilterVisitorAdapter", "parameters": "(CardinalityEstimationData cardinalityEstimationData)", "modifiers": "private", "return": "FilterVisitorAdapter<Double>", "signature": "FilterVisitorAdapter<Double> getCardinalityFilterVisitorAdapter(CardinalityEstimationData cardinalityEstimationData)", "full_signature": "private FilterVisitorAdapter<Double> getCardinalityFilterVisitorAdapter(CardinalityEstimationData cardinalityEstimationData)", "class_method_signature": "GroupAction.getCardinalityFilterVisitorAdapter(CardinalityEstimationData cardinalityEstimationData)", "testcase": false, "constructor": false}, {"identifier": "getTermHistogramFilterVisitorAdapter", "parameters": "(\n            TermHistogramEstimationData termEstimationData,\n            long totalCount)", "modifiers": "private", "return": "FilterVisitorAdapter<Double>", "signature": "FilterVisitorAdapter<Double> getTermHistogramFilterVisitorAdapter(\n            TermHistogramEstimationData termEstimationData,\n            long totalCount)", "full_signature": "private FilterVisitorAdapter<Double> getTermHistogramFilterVisitorAdapter(\n            TermHistogramEstimationData termEstimationData,\n            long totalCount)", "class_method_signature": "GroupAction.getTermHistogramFilterVisitorAdapter(\n            TermHistogramEstimationData termEstimationData,\n            long totalCount)", "testcase": false, "constructor": false}, {"identifier": "isObjectInstanceOfString", "parameters": "(List<Object> objects)", "modifiers": "private", "return": "boolean", "signature": "boolean isObjectInstanceOfString(List<Object> objects)", "full_signature": "private boolean isObjectInstanceOfString(List<Object> objects)", "class_method_signature": "GroupAction.isObjectInstanceOfString(List<Object> objects)", "testcase": false, "constructor": false}, {"identifier": "getValidCount", "parameters": "(Long count)", "modifiers": "private", "return": "Long", "signature": "Long getValidCount(Long count)", "full_signature": "private Long getValidCount(Long count)", "class_method_signature": "GroupAction.getValidCount(Long count)", "testcase": false, "constructor": false}, {"identifier": "buildAggregation", "parameters": "(GroupRequest parameter)", "modifiers": "private", "return": "AbstractAggregationBuilder", "signature": "AbstractAggregationBuilder buildAggregation(GroupRequest parameter)", "full_signature": "private AbstractAggregationBuilder buildAggregation(GroupRequest parameter)", "class_method_signature": "GroupAction.buildAggregation(GroupRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getMap", "parameters": "(List<String> fields, Aggregations aggregations)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> getMap(List<String> fields, Aggregations aggregations)", "full_signature": "private Map<String, Object> getMap(List<String> fields, Aggregations aggregations)", "class_method_signature": "GroupAction.getMap(List<String> fields, Aggregations aggregations)", "testcase": false, "constructor": false}, {"identifier": "validateCardinality", "parameters": "(GroupRequest parameter)", "modifiers": "private", "return": "void", "signature": "void validateCardinality(GroupRequest parameter)", "full_signature": "private void validateCardinality(GroupRequest parameter)", "class_method_signature": "GroupAction.validateCardinality(GroupRequest parameter)", "testcase": false, "constructor": false}], "file": "foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/actions/GroupAction.java"}, "focal_method": {"identifier": "execute", "parameters": "(GroupRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "body": "@Override\n    public ActionResponse execute(GroupRequest parameter) {\n        SearchRequestBuilder query = getRequestBuilder(parameter);\n        try {\n            SearchResponse response = query.execute()\n                    .actionGet(getGetQueryTimeout());\n            return getResponse(response, parameter);\n        }\n        catch (ElasticsearchException e) {\n            throw FoxtrotExceptions.createQueryExecutionException(parameter, e);\n        }\n    }", "signature": "ActionResponse execute(GroupRequest parameter)", "full_signature": "@Override public ActionResponse execute(GroupRequest parameter)", "class_method_signature": "GroupAction.execute(GroupRequest parameter)", "testcase": false, "constructor": false, "invocations": ["getRequestBuilder", "actionGet", "execute", "getGetQueryTimeout", "getResponse", "createQueryExecutionException"]}, "repository": {"repo_id": 19980663, "url": "https://github.com/Flipkart/foxtrot", "stars": 22, "created": "5/20/2014 12:52:55 PM +00:00", "updates": "2020-01-07T07:05:03+00:00", "fork": "False", "license": "licensed"}}