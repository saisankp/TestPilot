{"test_class": {"identifier": "HelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/eu/quelltext/mundraub/common/HelperTest.java"}, "test_case": {"identifier": "testMetersToDegrees", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMetersToDegrees(){\n        assertEquals(Helper.metersToDegrees(123.25),0.0011034613797355577, 0);\n    }", "signature": "void testMetersToDegrees()", "full_signature": "@Test public void testMetersToDegrees()", "class_method_signature": "HelperTest.testMetersToDegrees()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "metersToDegrees"]}, "focal_class": {"identifier": "Helper", "superclass": "extends ErrorAware", "interfaces": "", "fields": [{"original_string": "private static final double EARTH_RADIUS_METERS = 6399594.;", "modifier": "private static final", "type": "double", "declarator": "EARTH_RADIUS_METERS = 6399594.", "var_name": "EARTH_RADIUS_METERS"}, {"original_string": "private static int[] DIRECTIONS = new int[]{\n            R.string.direction_north, R.string.direction_north_east, R.string.direction_east,\n            R.string.direction_south_east, R.string.direction_south, R.string.direction_south_west,\n            R.string.direction_west, R.string.direction_north_west\n    };", "modifier": "private static", "type": "int[]", "declarator": "DIRECTIONS = new int[]{\n            R.string.direction_north, R.string.direction_north_east, R.string.direction_east,\n            R.string.direction_south_east, R.string.direction_south, R.string.direction_south_west,\n            R.string.direction_west, R.string.direction_north_west\n    }", "var_name": "DIRECTIONS"}, {"original_string": "private static double DEG_TO_RAD = Math.PI / 180;", "modifier": "private static", "type": "double", "declarator": "DEG_TO_RAD = Math.PI / 180", "var_name": "DEG_TO_RAD"}], "methods": [{"identifier": "deleteDir", "parameters": "(File file)", "modifiers": "public static", "return": "void", "signature": "void deleteDir(File file)", "full_signature": "public static void deleteDir(File file)", "class_method_signature": "Helper.deleteDir(File file)", "testcase": false, "constructor": false}, {"identifier": "folderSize", "parameters": "(File directory)", "modifiers": "public static", "return": "long", "signature": "long folderSize(File directory)", "full_signature": "public static long folderSize(File directory)", "class_method_signature": "Helper.folderSize(File directory)", "testcase": false, "constructor": false}, {"identifier": "getResultString", "parameters": "(HttpURLConnection http)", "modifiers": "public static", "return": "String", "signature": "String getResultString(HttpURLConnection http)", "full_signature": "public static String getResultString(HttpURLConnection http)", "class_method_signature": "Helper.getResultString(HttpURLConnection http)", "testcase": false, "constructor": false}, {"identifier": "saveUrlToFile", "parameters": "(String url, File file)", "modifiers": "public static", "return": "boolean", "signature": "boolean saveUrlToFile(String url, File file)", "full_signature": "public static boolean saveUrlToFile(String url, File file)", "class_method_signature": "Helper.saveUrlToFile(String url, File file)", "testcase": false, "constructor": false}, {"identifier": "doubleTo15DigitString", "parameters": "(double d)", "modifiers": "public static", "return": "String", "signature": "String doubleTo15DigitString(double d)", "full_signature": "public static String doubleTo15DigitString(double d)", "class_method_signature": "Helper.doubleTo15DigitString(double d)", "testcase": false, "constructor": false}, {"identifier": "getAlertBuilder", "parameters": "(Context context)", "modifiers": "public static", "return": "AlertDialog.Builder", "signature": "AlertDialog.Builder getAlertBuilder(Context context)", "full_signature": "public static AlertDialog.Builder getAlertBuilder(Context context)", "class_method_signature": "Helper.getAlertBuilder(Context context)", "testcase": false, "constructor": false}, {"identifier": "setBitmapFromFileOrNull", "parameters": "(File file, ImageView imageView)", "modifiers": "public static", "return": "boolean", "signature": "boolean setBitmapFromFileOrNull(File file, ImageView imageView)", "full_signature": "public static boolean setBitmapFromFileOrNull(File file, ImageView imageView)", "class_method_signature": "Helper.setBitmapFromFileOrNull(File file, ImageView imageView)", "testcase": false, "constructor": false}, {"identifier": "metersToDegrees", "parameters": "(double distanceInMeters)", "modifiers": "public static", "return": "double", "signature": "double metersToDegrees(double distanceInMeters)", "full_signature": "public static double metersToDegrees(double distanceInMeters)", "class_method_signature": "Helper.metersToDegrees(double distanceInMeters)", "testcase": false, "constructor": false}, {"identifier": "directionFromPositionToPositionAsResourceId", "parameters": "(IPosition me, IPosition other)", "modifiers": "public static", "return": "int", "signature": "int directionFromPositionToPositionAsResourceId(IPosition me, IPosition other)", "full_signature": "public static int directionFromPositionToPositionAsResourceId(IPosition me, IPosition other)", "class_method_signature": "Helper.directionFromPositionToPositionAsResourceId(IPosition me, IPosition other)", "testcase": false, "constructor": false}, {"identifier": "directionFromPositionToPositionAsResourceId", "parameters": "(\n            double fromLongitude, double fromLatitude, double toLongitude, double toLatitude)", "modifiers": "public static", "return": "int", "signature": "int directionFromPositionToPositionAsResourceId(\n            double fromLongitude, double fromLatitude, double toLongitude, double toLatitude)", "full_signature": "public static int directionFromPositionToPositionAsResourceId(\n            double fromLongitude, double fromLatitude, double toLongitude, double toLatitude)", "class_method_signature": "Helper.directionFromPositionToPositionAsResourceId(\n            double fromLongitude, double fromLatitude, double toLongitude, double toLatitude)", "testcase": false, "constructor": false}, {"identifier": "deg2rad", "parameters": "(double degrees)", "modifiers": "private static", "return": "double", "signature": "double deg2rad(double degrees)", "full_signature": "private static double deg2rad(double degrees)", "class_method_signature": "Helper.deg2rad(double degrees)", "testcase": false, "constructor": false}, {"identifier": "distanceInMetersBetween", "parameters": "(double longitude1, double latitude1, double longitude2, double latitude2)", "modifiers": "public static", "return": "double", "signature": "double distanceInMetersBetween(double longitude1, double latitude1, double longitude2, double latitude2)", "full_signature": "public static double distanceInMetersBetween(double longitude1, double latitude1, double longitude2, double latitude2)", "class_method_signature": "Helper.distanceInMetersBetween(double longitude1, double latitude1, double longitude2, double latitude2)", "testcase": false, "constructor": false}, {"identifier": "trustAllConnections", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void trustAllConnections()", "full_signature": "public static void trustAllConnections()", "class_method_signature": "Helper.trustAllConnections()", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(long a , long b)", "modifiers": "public static", "return": "int", "signature": "int compare(long a , long b)", "full_signature": "public static int compare(long a , long b)", "class_method_signature": "Helper.compare(long a , long b)", "testcase": false, "constructor": false}, {"identifier": "splitQuery", "parameters": "(String query)", "modifiers": "public static", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> splitQuery(String query)", "full_signature": "public static Map<String, List<String>> splitQuery(String query)", "class_method_signature": "Helper.splitQuery(String query)", "testcase": false, "constructor": false}], "file": "app/src/main/java/eu/quelltext/mundraub/common/Helper.java"}, "focal_method": {"identifier": "metersToDegrees", "parameters": "(double distanceInMeters)", "modifiers": "public static", "return": "double", "body": "public static double metersToDegrees(double distanceInMeters) {\n        return distanceInMeters / EARTH_RADIUS_METERS / DEG_TO_RAD;\n    }", "signature": "double metersToDegrees(double distanceInMeters)", "full_signature": "public static double metersToDegrees(double distanceInMeters)", "class_method_signature": "Helper.metersToDegrees(double distanceInMeters)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 143054055, "url": "https://github.com/niccokunzmann/mundraub-android", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 26, "size": 20909, "license": "licensed"}}