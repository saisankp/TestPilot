{"test_class": {"identifier": "SQLExecutePrepareTemplateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SQLExecutePrepareTemplate sqlExecutePrepareTemplate;", "modifier": "private", "type": "SQLExecutePrepareTemplate", "declarator": "sqlExecutePrepareTemplate", "var_name": "sqlExecutePrepareTemplate"}, {"original_string": "@Mock\n    private SQLExecutePrepareCallback callback;", "modifier": "@Mock\n    private", "type": "SQLExecutePrepareCallback", "declarator": "callback", "var_name": "callback"}], "file": "zebra/zebra-thirdparty/sharding-core-execute/src/test/java/org/apache/shardingsphere/core/execute/sql/prepare/SQLExecutePrepareTemplateTest.java"}, "test_case": {"identifier": "assertGetExecuteUnitGroupForMultiShardConnectionStrictly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void assertGetExecuteUnitGroupForMultiShardConnectionStrictly() throws SQLException {\n        mockConnections(callback, ConnectionMode.CONNECTION_STRICTLY, 1);\n        sqlExecutePrepareTemplate = new SQLExecutePrepareTemplate(1);\n        Collection<ShardingExecuteGroup<StatementExecuteUnit>> actual = sqlExecutePrepareTemplate.getExecuteUnitGroups(mockShardRouteUnit(10, 2), callback);\n        assertThat(actual.size(), is(10));\n        for (ShardingExecuteGroup<StatementExecuteUnit> each : actual) {\n            assertThat(each.getInputs().size(), is(2));\n        }\n    }", "signature": "void assertGetExecuteUnitGroupForMultiShardConnectionStrictly()", "full_signature": "@Test public void assertGetExecuteUnitGroupForMultiShardConnectionStrictly()", "class_method_signature": "SQLExecutePrepareTemplateTest.assertGetExecuteUnitGroupForMultiShardConnectionStrictly()", "testcase": true, "constructor": false, "invocations": ["mockConnections", "getExecuteUnitGroups", "mockShardRouteUnit", "assertThat", "size", "is", "assertThat", "size", "getInputs", "is"]}, "focal_class": {"identifier": "SQLExecutePrepareTemplate", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int maxConnectionsSizePerQuery;", "modifier": "private final", "type": "int", "declarator": "maxConnectionsSizePerQuery", "var_name": "maxConnectionsSizePerQuery"}], "methods": [{"identifier": "getExecuteUnitGroups", "parameters": "(final Collection<RouteUnit> routeUnits, final SQLExecutePrepareCallback callback)", "modifiers": "public", "return": "Collection<ShardingExecuteGroup<StatementExecuteUnit>>", "signature": "Collection<ShardingExecuteGroup<StatementExecuteUnit>> getExecuteUnitGroups(final Collection<RouteUnit> routeUnits, final SQLExecutePrepareCallback callback)", "full_signature": "public Collection<ShardingExecuteGroup<StatementExecuteUnit>> getExecuteUnitGroups(final Collection<RouteUnit> routeUnits, final SQLExecutePrepareCallback callback)", "class_method_signature": "SQLExecutePrepareTemplate.getExecuteUnitGroups(final Collection<RouteUnit> routeUnits, final SQLExecutePrepareCallback callback)", "testcase": false, "constructor": false}, {"identifier": "getSynchronizedExecuteUnitGroups", "parameters": "(\n            final Collection<RouteUnit> routeUnits, final SQLExecutePrepareCallback callback)", "modifiers": "private", "return": "Collection<ShardingExecuteGroup<StatementExecuteUnit>>", "signature": "Collection<ShardingExecuteGroup<StatementExecuteUnit>> getSynchronizedExecuteUnitGroups(\n            final Collection<RouteUnit> routeUnits, final SQLExecutePrepareCallback callback)", "full_signature": "private Collection<ShardingExecuteGroup<StatementExecuteUnit>> getSynchronizedExecuteUnitGroups(\n            final Collection<RouteUnit> routeUnits, final SQLExecutePrepareCallback callback)", "class_method_signature": "SQLExecutePrepareTemplate.getSynchronizedExecuteUnitGroups(\n            final Collection<RouteUnit> routeUnits, final SQLExecutePrepareCallback callback)", "testcase": false, "constructor": false}, {"identifier": "getSQLUnitGroups", "parameters": "(final Collection<RouteUnit> routeUnits)", "modifiers": "private", "return": "Map<String, List<SQLUnit>>", "signature": "Map<String, List<SQLUnit>> getSQLUnitGroups(final Collection<RouteUnit> routeUnits)", "full_signature": "private Map<String, List<SQLUnit>> getSQLUnitGroups(final Collection<RouteUnit> routeUnits)", "class_method_signature": "SQLExecutePrepareTemplate.getSQLUnitGroups(final Collection<RouteUnit> routeUnits)", "testcase": false, "constructor": false}, {"identifier": "getSQLExecuteGroups", "parameters": "(\n            final String dataSourceName, final List<SQLUnit> sqlUnits, final SQLExecutePrepareCallback callback)", "modifiers": "private", "return": "List<ShardingExecuteGroup<StatementExecuteUnit>>", "signature": "List<ShardingExecuteGroup<StatementExecuteUnit>> getSQLExecuteGroups(\n            final String dataSourceName, final List<SQLUnit> sqlUnits, final SQLExecutePrepareCallback callback)", "full_signature": "private List<ShardingExecuteGroup<StatementExecuteUnit>> getSQLExecuteGroups(\n            final String dataSourceName, final List<SQLUnit> sqlUnits, final SQLExecutePrepareCallback callback)", "class_method_signature": "SQLExecutePrepareTemplate.getSQLExecuteGroups(\n            final String dataSourceName, final List<SQLUnit> sqlUnits, final SQLExecutePrepareCallback callback)", "testcase": false, "constructor": false}, {"identifier": "getSQLExecuteGroup", "parameters": "(final ConnectionMode connectionMode, final Connection connection, \n                                                                          final String dataSourceName, final List<SQLUnit> sqlUnitGroup, final SQLExecutePrepareCallback callback)", "modifiers": "private", "return": "ShardingExecuteGroup<StatementExecuteUnit>", "signature": "ShardingExecuteGroup<StatementExecuteUnit> getSQLExecuteGroup(final ConnectionMode connectionMode, final Connection connection, \n                                                                          final String dataSourceName, final List<SQLUnit> sqlUnitGroup, final SQLExecutePrepareCallback callback)", "full_signature": "private ShardingExecuteGroup<StatementExecuteUnit> getSQLExecuteGroup(final ConnectionMode connectionMode, final Connection connection, \n                                                                          final String dataSourceName, final List<SQLUnit> sqlUnitGroup, final SQLExecutePrepareCallback callback)", "class_method_signature": "SQLExecutePrepareTemplate.getSQLExecuteGroup(final ConnectionMode connectionMode, final Connection connection, \n                                                                          final String dataSourceName, final List<SQLUnit> sqlUnitGroup, final SQLExecutePrepareCallback callback)", "testcase": false, "constructor": false}], "file": "zebra/zebra-thirdparty/sharding-core-execute/src/main/java/org/apache/shardingsphere/core/execute/sql/prepare/SQLExecutePrepareTemplate.java"}, "focal_method": {"identifier": "getExecuteUnitGroups", "parameters": "(final Collection<RouteUnit> routeUnits, final SQLExecutePrepareCallback callback)", "modifiers": "public", "return": "Collection<ShardingExecuteGroup<StatementExecuteUnit>>", "body": "public Collection<ShardingExecuteGroup<StatementExecuteUnit>> getExecuteUnitGroups(final Collection<RouteUnit> routeUnits, final SQLExecutePrepareCallback callback) throws SQLException {\n        return getSynchronizedExecuteUnitGroups(routeUnits, callback);\n    }", "signature": "Collection<ShardingExecuteGroup<StatementExecuteUnit>> getExecuteUnitGroups(final Collection<RouteUnit> routeUnits, final SQLExecutePrepareCallback callback)", "full_signature": "public Collection<ShardingExecuteGroup<StatementExecuteUnit>> getExecuteUnitGroups(final Collection<RouteUnit> routeUnits, final SQLExecutePrepareCallback callback)", "class_method_signature": "SQLExecutePrepareTemplate.getExecuteUnitGroups(final Collection<RouteUnit> routeUnits, final SQLExecutePrepareCallback callback)", "testcase": false, "constructor": false, "invocations": ["getSynchronizedExecuteUnitGroups"]}, "repository": {"repo_id": 227543326, "url": "https://github.com/gszebra/zebra", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 15, "size": 2223, "license": "licensed"}}