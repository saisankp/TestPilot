{"test_class": {"identifier": "DataBlockTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/data/DataBlockTest.java"}, "test_case": {"identifier": "testBshift", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBshift(){\n        DataBlock x=new DataBlock(10);\n        x.set(i->i+1);\n        x.bshift(3);\n        assertTrue(x.get(6)==10 && x.get(0)==4);\n    }", "signature": "void testBshift()", "full_signature": "@Test public void testBshift()", "class_method_signature": "DataBlockTest.testBshift()", "testcase": true, "constructor": false, "invocations": ["set", "bshift", "assertTrue", "get", "get"]}, "focal_class": {"identifier": "DataBlock", "superclass": "", "interfaces": "implements IDataBlock, Cloneable", "fields": [{"original_string": "public static final DataBlock EMPTY = new DataBlock(null, 0, 0, 0);", "modifier": "public static final", "type": "DataBlock", "declarator": "EMPTY = new DataBlock(null, 0, 0, 0)", "var_name": "EMPTY"}, {"original_string": "private static final IRandomNumberGenerator RNG = JdkRNG.newRandom();", "modifier": "private static final", "type": "IRandomNumberGenerator", "declarator": "RNG = JdkRNG.newRandom()", "var_name": "RNG"}, {"original_string": "final double[] src;", "modifier": "final", "type": "double[]", "declarator": "src", "var_name": "src"}, {"original_string": "final int inc;", "modifier": "final", "type": "int", "declarator": "inc", "var_name": "inc"}, {"original_string": "int beg, end;", "modifier": "", "type": "int", "declarator": "beg", "var_name": "beg"}, {"original_string": "public static final double ZERO = 0.0;", "modifier": "public static final", "type": "double", "declarator": "ZERO = 0.0", "var_name": "ZERO"}, {"original_string": "public static final double ONE = 1.0;", "modifier": "public static final", "type": "double", "declarator": "ONE = 1.0", "var_name": "ONE"}, {"original_string": "public static final double EPSILON = 1e-15;", "modifier": "public static final", "type": "double", "declarator": "EPSILON = 1e-15", "var_name": "EPSILON"}], "methods": [{"identifier": "random", "parameters": "(final int len)", "modifiers": "public static", "return": "DataBlock", "signature": "DataBlock random(final int len)", "full_signature": "public static DataBlock random(final int len)", "class_method_signature": "DataBlock.random(final int len)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(IReadDataBlock data)", "modifiers": "public static", "return": "DataBlock", "signature": "DataBlock of(IReadDataBlock data)", "full_signature": "public static DataBlock of(IReadDataBlock data)", "class_method_signature": "DataBlock.of(IReadDataBlock data)", "testcase": false, "constructor": false}, {"identifier": "DataBlock", "parameters": "(final double[] data)", "modifiers": "public", "return": "", "signature": " DataBlock(final double[] data)", "full_signature": "public  DataBlock(final double[] data)", "class_method_signature": "DataBlock.DataBlock(final double[] data)", "testcase": false, "constructor": true}, {"identifier": "DataBlock", "parameters": "(final double[] data, final int beg, final int end, final int inc)", "modifiers": "public", "return": "", "signature": " DataBlock(final double[] data, final int beg, final int end, final int inc)", "full_signature": "public  DataBlock(final double[] data, final int beg, final int end, final int inc)", "class_method_signature": "DataBlock.DataBlock(final double[] data, final int beg, final int end, final int inc)", "testcase": false, "constructor": true}, {"identifier": "DataBlock", "parameters": "(final int n)", "modifiers": "public", "return": "", "signature": " DataBlock(final int n)", "full_signature": "public  DataBlock(final int n)", "class_method_signature": "DataBlock.DataBlock(final int n)", "testcase": false, "constructor": true}, {"identifier": "DataBlock", "parameters": "(final IReadDataBlock data)", "modifiers": "public", "return": "", "signature": " DataBlock(final IReadDataBlock data)", "full_signature": "public  DataBlock(final IReadDataBlock data)", "class_method_signature": "DataBlock.DataBlock(final IReadDataBlock data)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(final double[] data, final int istart, final int len, final int inc)", "modifiers": "public static", "return": "DataBlock", "signature": "DataBlock create(final double[] data, final int istart, final int len, final int inc)", "full_signature": "public static DataBlock create(final double[] data, final int istart, final int len, final int inc)", "class_method_signature": "DataBlock.create(final double[] data, final int istart, final int len, final int inc)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final int n)", "modifiers": "public static", "return": "DataBlock", "signature": "DataBlock create(final int n)", "full_signature": "public static DataBlock create(final int n)", "class_method_signature": "DataBlock.create(final int n)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(IReadDataBlock data, boolean[] sel)", "modifiers": "public static", "return": "DataBlock", "signature": "DataBlock select(IReadDataBlock data, boolean[] sel)", "full_signature": "public static DataBlock select(IReadDataBlock data, boolean[] sel)", "class_method_signature": "DataBlock.select(IReadDataBlock data, boolean[] sel)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(IReadDataBlock data, int[] isel)", "modifiers": "public static", "return": "DataBlock", "signature": "DataBlock select(IReadDataBlock data, int[] isel)", "full_signature": "public static DataBlock select(IReadDataBlock data, int[] isel)", "class_method_signature": "DataBlock.select(IReadDataBlock data, int[] isel)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final double[] data, final int istart, final int len)", "modifiers": "public static", "return": "DataBlock", "signature": "DataBlock create(final double[] data, final int istart, final int len)", "full_signature": "public static DataBlock create(final double[] data, final int istart, final int len)", "class_method_signature": "DataBlock.create(final double[] data, final int istart, final int len)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final DataBlock r)", "modifiers": "public", "return": "void", "signature": "void add(final DataBlock r)", "full_signature": "public void add(final DataBlock r)", "class_method_signature": "DataBlock.add(final DataBlock r)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final double d)", "modifiers": "public", "return": "void", "signature": "void add(final double d)", "full_signature": "public void add(final double d)", "class_method_signature": "DataBlock.add(final double d)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int idx, double d)", "modifiers": "public", "return": "void", "signature": "void add(int idx, double d)", "full_signature": "public void add(int idx, double d)", "class_method_signature": "DataBlock.add(int idx, double d)", "testcase": false, "constructor": false}, {"identifier": "addAY", "parameters": "(double a, DataBlock y)", "modifiers": "public", "return": "void", "signature": "void addAY(double a, DataBlock y)", "full_signature": "public void addAY(double a, DataBlock y)", "class_method_signature": "DataBlock.addAY(double a, DataBlock y)", "testcase": false, "constructor": false}, {"identifier": "addAXY", "parameters": "(double a, DataBlock x, DataBlock y)", "modifiers": "public", "return": "void", "signature": "void addAXY(double a, DataBlock x, DataBlock y)", "full_signature": "public void addAXY(double a, DataBlock x, DataBlock y)", "class_method_signature": "DataBlock.addAXY(double a, DataBlock x, DataBlock y)", "testcase": false, "constructor": false}, {"identifier": "setAY", "parameters": "(double a, DataBlock y)", "modifiers": "public", "return": "void", "signature": "void setAY(double a, DataBlock y)", "full_signature": "public void setAY(double a, DataBlock y)", "class_method_signature": "DataBlock.setAY(double a, DataBlock y)", "testcase": false, "constructor": false}, {"identifier": "bshift", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void bshift()", "full_signature": "private void bshift()", "class_method_signature": "DataBlock.bshift()", "testcase": false, "constructor": false}, {"identifier": "bshift", "parameters": "(ShiftOption option)", "modifiers": "public", "return": "void", "signature": "void bshift(ShiftOption option)", "full_signature": "public void bshift(ShiftOption option)", "class_method_signature": "DataBlock.bshift(ShiftOption option)", "testcase": false, "constructor": false}, {"identifier": "chs", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void chs()", "full_signature": "public void chs()", "class_method_signature": "DataBlock.chs()", "testcase": false, "constructor": false}, {"identifier": "sqrt", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void sqrt()", "full_signature": "public void sqrt()", "class_method_signature": "DataBlock.sqrt()", "testcase": false, "constructor": false}, {"identifier": "inv", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void inv()", "full_signature": "public void inv()", "class_method_signature": "DataBlock.inv()", "testcase": false, "constructor": false}, {"identifier": "square", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void square()", "full_signature": "public void square()", "class_method_signature": "DataBlock.square()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "DataBlock", "signature": "DataBlock clone()", "full_signature": "@Override public DataBlock clone()", "class_method_signature": "DataBlock.clone()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(DataBlock data)", "modifiers": "public", "return": "void", "signature": "void copy(DataBlock data)", "full_signature": "public void copy(DataBlock data)", "class_method_signature": "DataBlock.copy(DataBlock data)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(IReadDataBlock data)", "modifiers": "public", "return": "void", "signature": "void copy(IReadDataBlock data)", "full_signature": "public void copy(IReadDataBlock data)", "class_method_signature": "DataBlock.copy(IReadDataBlock data)", "testcase": false, "constructor": false}, {"identifier": "copyFrom", "parameters": "(double[] buffer, int start)", "modifiers": "@Override public", "return": "void", "signature": "void copyFrom(double[] buffer, int start)", "full_signature": "@Override public void copyFrom(double[] buffer, int start)", "class_method_signature": "DataBlock.copyFrom(double[] buffer, int start)", "testcase": false, "constructor": false}, {"identifier": "copyTo", "parameters": "(double[] buffer, int start)", "modifiers": "@Override public", "return": "void", "signature": "void copyTo(double[] buffer, int start)", "full_signature": "@Override public void copyTo(double[] buffer, int start)", "class_method_signature": "DataBlock.copyTo(double[] buffer, int start)", "testcase": false, "constructor": false}, {"identifier": "cumul", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cumul()", "full_signature": "public void cumul()", "class_method_signature": "DataBlock.cumul()", "testcase": false, "constructor": false}, {"identifier": "cumul", "parameters": "(double c)", "modifiers": "public", "return": "void", "signature": "void cumul(double c)", "full_signature": "public void cumul(double c)", "class_method_signature": "DataBlock.cumul(double c)", "testcase": false, "constructor": false}, {"identifier": "cumul", "parameters": "(double c, int lag)", "modifiers": "public", "return": "void", "signature": "void cumul(double c, int lag)", "full_signature": "public void cumul(double c, int lag)", "class_method_signature": "DataBlock.cumul(double c, int lag)", "testcase": false, "constructor": false}, {"identifier": "deepClone", "parameters": "()", "modifiers": "public", "return": "DataBlock", "signature": "DataBlock deepClone()", "full_signature": "public DataBlock deepClone()", "class_method_signature": "DataBlock.deepClone()", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void difference()", "full_signature": "public void difference()", "class_method_signature": "DataBlock.difference()", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(DataBlock l, DataBlock r)", "modifiers": "public", "return": "void", "signature": "void difference(DataBlock l, DataBlock r)", "full_signature": "public void difference(DataBlock l, DataBlock r)", "class_method_signature": "DataBlock.difference(DataBlock l, DataBlock r)", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(double delta)", "modifiers": "public", "return": "void", "signature": "void difference(double delta)", "full_signature": "public void difference(double delta)", "class_method_signature": "DataBlock.difference(double delta)", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(double c, int lag)", "modifiers": "public", "return": "void", "signature": "void difference(double c, int lag)", "full_signature": "public void difference(double c, int lag)", "class_method_signature": "DataBlock.difference(double c, int lag)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(DataBlock data)", "modifiers": "public", "return": "double", "signature": "double distance(DataBlock data)", "full_signature": "public double distance(DataBlock data)", "class_method_signature": "DataBlock.distance(DataBlock data)", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(DataBlock data)", "modifiers": "public", "return": "double", "signature": "double dot(DataBlock data)", "full_signature": "public double dot(DataBlock data)", "class_method_signature": "DataBlock.dot(DataBlock data)", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(double[] data)", "modifiers": "public", "return": "double", "signature": "double dot(double[] data)", "full_signature": "public double dot(double[] data)", "class_method_signature": "DataBlock.dot(double[] data)", "testcase": false, "constructor": false}, {"identifier": "jdot", "parameters": "(int p, DataBlock data)", "modifiers": "public", "return": "double", "signature": "double jdot(int p, DataBlock data)", "full_signature": "public double jdot(int p, DataBlock data)", "class_method_signature": "DataBlock.jdot(int p, DataBlock data)", "testcase": false, "constructor": false}, {"identifier": "dotReverse", "parameters": "(DataBlock data)", "modifiers": "public", "return": "double", "signature": "double dotReverse(DataBlock data)", "full_signature": "public double dotReverse(DataBlock data)", "class_method_signature": "DataBlock.dotReverse(DataBlock data)", "testcase": false, "constructor": false}, {"identifier": "dotReverse", "parameters": "(double[] data)", "modifiers": "public", "return": "double", "signature": "double dotReverse(double[] data)", "full_signature": "public double dotReverse(double[] data)", "class_method_signature": "DataBlock.dotReverse(double[] data)", "testcase": false, "constructor": false}, {"identifier": "reverseDot", "parameters": "(double[] data)", "modifiers": "public", "return": "double", "signature": "double reverseDot(double[] data)", "full_signature": "public double reverseDot(double[] data)", "class_method_signature": "DataBlock.reverseDot(double[] data)", "testcase": false, "constructor": false}, {"identifier": "drop", "parameters": "(int nbeg, int nend)", "modifiers": "public", "return": "DataBlock", "signature": "DataBlock drop(int nbeg, int nend)", "full_signature": "public DataBlock drop(int nbeg, int nend)", "class_method_signature": "DataBlock.drop(int nbeg, int nend)", "testcase": false, "constructor": false}, {"identifier": "bshrink", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean bshrink()", "full_signature": "public boolean bshrink()", "class_method_signature": "DataBlock.bshrink()", "testcase": false, "constructor": false}, {"identifier": "eshrink", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean eshrink()", "full_signature": "public boolean eshrink()", "class_method_signature": "DataBlock.eshrink()", "testcase": false, "constructor": false}, {"identifier": "shrink", "parameters": "(int nbeg, int nend)", "modifiers": "public", "return": "boolean", "signature": "boolean shrink(int nbeg, int nend)", "full_signature": "public boolean shrink(int nbeg, int nend)", "class_method_signature": "DataBlock.shrink(int nbeg, int nend)", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "(int nbeg, int nend)", "modifiers": "public", "return": "boolean", "signature": "boolean expand(int nbeg, int nend)", "full_signature": "public boolean expand(int nbeg, int nend)", "class_method_signature": "DataBlock.expand(int nbeg, int nend)", "testcase": false, "constructor": false}, {"identifier": "extend", "parameters": "(int nbeg, int nend)", "modifiers": "public", "return": "DataBlock", "signature": "DataBlock extend(int nbeg, int nend)", "full_signature": "public DataBlock extend(int nbeg, int nend)", "class_method_signature": "DataBlock.extend(int nbeg, int nend)", "testcase": false, "constructor": false}, {"identifier": "extract", "parameters": "(int start, int count)", "modifiers": "@Override public", "return": "DataBlock", "signature": "DataBlock extract(int start, int count)", "full_signature": "@Override public DataBlock extract(int start, int count)", "class_method_signature": "DataBlock.extract(int start, int count)", "testcase": false, "constructor": false}, {"identifier": "extract", "parameters": "(int start, int count, int inc)", "modifiers": "public", "return": "DataBlock", "signature": "DataBlock extract(int start, int count, int inc)", "full_signature": "public DataBlock extract(int start, int count, int inc)", "class_method_signature": "DataBlock.extract(int start, int count, int inc)", "testcase": false, "constructor": false}, {"identifier": "fshift", "parameters": "(int n)", "modifiers": "public", "return": "void", "signature": "void fshift(int n)", "full_signature": "public void fshift(int n)", "class_method_signature": "DataBlock.fshift(int n)", "testcase": false, "constructor": false}, {"identifier": "bshift", "parameters": "(int n)", "modifiers": "public", "return": "void", "signature": "void bshift(int n)", "full_signature": "public void bshift(int n)", "class_method_signature": "DataBlock.bshift(int n)", "testcase": false, "constructor": false}, {"identifier": "fshift", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fshift()", "full_signature": "private void fshift()", "class_method_signature": "DataBlock.fshift()", "testcase": false, "constructor": false}, {"identifier": "fshift", "parameters": "(ShiftOption option)", "modifiers": "public", "return": "void", "signature": "void fshift(ShiftOption option)", "full_signature": "public void fshift(ShiftOption option)", "class_method_signature": "DataBlock.fshift(ShiftOption option)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int idx)", "modifiers": "@Override public", "return": "double", "signature": "double get(int idx)", "full_signature": "@Override public double get(int idx)", "class_method_signature": "DataBlock.get(int idx)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getData()", "full_signature": "public double[] getData()", "class_method_signature": "DataBlock.getData()", "testcase": false, "constructor": false}, {"identifier": "getEndPosition", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getEndPosition()", "full_signature": "public int getEndPosition()", "class_method_signature": "DataBlock.getEndPosition()", "testcase": false, "constructor": false}, {"identifier": "getLastPosition", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLastPosition()", "full_signature": "public int getLastPosition()", "class_method_signature": "DataBlock.getLastPosition()", "testcase": false, "constructor": false}, {"identifier": "getLastIndex", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLastIndex()", "full_signature": "public int getLastIndex()", "class_method_signature": "DataBlock.getLastIndex()", "testcase": false, "constructor": false}, {"identifier": "getEndIndex", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getEndIndex()", "full_signature": "public int getEndIndex()", "class_method_signature": "DataBlock.getEndIndex()", "testcase": false, "constructor": false}, {"identifier": "getIncrement", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getIncrement()", "full_signature": "public int getIncrement()", "class_method_signature": "DataBlock.getIncrement()", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getLength()", "full_signature": "@Override public int getLength()", "class_method_signature": "DataBlock.getLength()", "testcase": false, "constructor": false}, {"identifier": "getStartPosition", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getStartPosition()", "full_signature": "public int getStartPosition()", "class_method_signature": "DataBlock.getStartPosition()", "testcase": false, "constructor": false}, {"identifier": "isConstant", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConstant()", "full_signature": "public boolean isConstant()", "class_method_signature": "DataBlock.isConstant()", "testcase": false, "constructor": false}, {"identifier": "isConstant", "parameters": "(double c)", "modifiers": "public", "return": "boolean", "signature": "boolean isConstant(double c)", "full_signature": "public boolean isConstant(double c)", "class_method_signature": "DataBlock.isConstant(double c)", "testcase": false, "constructor": false}, {"identifier": "getMissingCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMissingCount()", "full_signature": "public int getMissingCount()", "class_method_signature": "DataBlock.getMissingCount()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "DataBlock.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isZero()", "full_signature": "public boolean isZero()", "class_method_signature": "DataBlock.isZero()", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "(int del)", "modifiers": "public", "return": "void", "signature": "void move(int del)", "full_signature": "public void move(int del)", "class_method_signature": "DataBlock.move(int del)", "testcase": false, "constructor": false}, {"identifier": "mul", "parameters": "(double d)", "modifiers": "public", "return": "void", "signature": "void mul(double d)", "full_signature": "public void mul(double d)", "class_method_signature": "DataBlock.mul(double d)", "testcase": false, "constructor": false}, {"identifier": "mul", "parameters": "(DataBlock data)", "modifiers": "public", "return": "void", "signature": "void mul(DataBlock data)", "full_signature": "public void mul(DataBlock data)", "class_method_signature": "DataBlock.mul(DataBlock data)", "testcase": false, "constructor": false}, {"identifier": "div", "parameters": "(DataBlock data)", "modifiers": "public", "return": "void", "signature": "void div(DataBlock data)", "full_signature": "public void div(DataBlock data)", "class_method_signature": "DataBlock.div(DataBlock data)", "testcase": false, "constructor": false}, {"identifier": "div", "parameters": "(double d)", "modifiers": "public", "return": "void", "signature": "void div(double d)", "full_signature": "public void div(double d)", "class_method_signature": "DataBlock.div(double d)", "testcase": false, "constructor": false}, {"identifier": "mul", "parameters": "(int idx, double d)", "modifiers": "public", "return": "void", "signature": "void mul(int idx, double d)", "full_signature": "public void mul(int idx, double d)", "class_method_signature": "DataBlock.mul(int idx, double d)", "testcase": false, "constructor": false}, {"identifier": "nrm2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double nrm2()", "full_signature": "public double nrm2()", "class_method_signature": "DataBlock.nrm2()", "testcase": false, "constructor": false}, {"identifier": "nrmInf", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double nrmInf()", "full_signature": "public double nrmInf()", "class_method_signature": "DataBlock.nrmInf()", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double min()", "full_signature": "public double min()", "class_method_signature": "DataBlock.min()", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double max()", "full_signature": "public double max()", "class_method_signature": "DataBlock.max()", "testcase": false, "constructor": false}, {"identifier": "product", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double product()", "full_signature": "public double product()", "class_method_signature": "DataBlock.product()", "testcase": false, "constructor": false}, {"identifier": "product", "parameters": "(DataBlock row, DataBlockIterator cols)", "modifiers": "public", "return": "void", "signature": "void product(DataBlock row, DataBlockIterator cols)", "full_signature": "public void product(DataBlock row, DataBlockIterator cols)", "class_method_signature": "DataBlock.product(DataBlock row, DataBlockIterator cols)", "testcase": false, "constructor": false}, {"identifier": "addProduct", "parameters": "(DataBlock row, DataBlockIterator cols)", "modifiers": "public", "return": "void", "signature": "void addProduct(DataBlock row, DataBlockIterator cols)", "full_signature": "public void addProduct(DataBlock row, DataBlockIterator cols)", "class_method_signature": "DataBlock.addProduct(DataBlock row, DataBlockIterator cols)", "testcase": false, "constructor": false}, {"identifier": "product", "parameters": "(DataBlock l, double d)", "modifiers": "public", "return": "void", "signature": "void product(DataBlock l, double d)", "full_signature": "public void product(DataBlock l, double d)", "class_method_signature": "DataBlock.product(DataBlock l, double d)", "testcase": false, "constructor": false}, {"identifier": "product", "parameters": "(DataBlockIterator rows, DataBlock col)", "modifiers": "public", "return": "void", "signature": "void product(DataBlockIterator rows, DataBlock col)", "full_signature": "public void product(DataBlockIterator rows, DataBlock col)", "class_method_signature": "DataBlock.product(DataBlockIterator rows, DataBlock col)", "testcase": false, "constructor": false}, {"identifier": "addProduct", "parameters": "(DataBlockIterator rows, DataBlock col)", "modifiers": "public", "return": "void", "signature": "void addProduct(DataBlockIterator rows, DataBlock col)", "full_signature": "public void addProduct(DataBlockIterator rows, DataBlock col)", "class_method_signature": "DataBlock.addProduct(DataBlockIterator rows, DataBlock col)", "testcase": false, "constructor": false}, {"identifier": "range", "parameters": "(int c0, int c1)", "modifiers": "public", "return": "DataBlock", "signature": "DataBlock range(int c0, int c1)", "full_signature": "public DataBlock range(int c0, int c1)", "class_method_signature": "DataBlock.range(int c0, int c1)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "()", "modifiers": "public", "return": "DataBlock", "signature": "DataBlock reverse()", "full_signature": "public DataBlock reverse()", "class_method_signature": "DataBlock.reverse()", "testcase": false, "constructor": false}, {"identifier": "rextract", "parameters": "(int start, int count)", "modifiers": "@Override public", "return": "DataBlock", "signature": "DataBlock rextract(int start, int count)", "full_signature": "@Override public DataBlock rextract(int start, int count)", "class_method_signature": "DataBlock.rextract(int start, int count)", "testcase": false, "constructor": false}, {"identifier": "sbshift", "parameters": "()", "modifiers": "private", "return": "double", "signature": "double sbshift()", "full_signature": "private double sbshift()", "class_method_signature": "DataBlock.sbshift()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(double d)", "modifiers": "public", "return": "void", "signature": "void set(double d)", "full_signature": "public void set(double d)", "class_method_signature": "DataBlock.set(double d)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int idx, double value)", "modifiers": "@Override public", "return": "void", "signature": "void set(int idx, double value)", "full_signature": "@Override public void set(int idx, double value)", "class_method_signature": "DataBlock.set(int idx, double value)", "testcase": false, "constructor": false}, {"identifier": "sfshift", "parameters": "()", "modifiers": "private", "return": "double", "signature": "double sfshift()", "full_signature": "private double sfshift()", "class_method_signature": "DataBlock.sfshift()", "testcase": false, "constructor": false}, {"identifier": "slide", "parameters": "(int del)", "modifiers": "public", "return": "void", "signature": "void slide(int del)", "full_signature": "public void slide(int del)", "class_method_signature": "DataBlock.slide(int del)", "testcase": false, "constructor": false}, {"identifier": "ssq", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double ssq()", "full_signature": "@Override public double ssq()", "class_method_signature": "DataBlock.ssq()", "testcase": false, "constructor": false}, {"identifier": "ssqc", "parameters": "(double m)", "modifiers": "public", "return": "double", "signature": "double ssqc(double m)", "full_signature": "public double ssqc(double m)", "class_method_signature": "DataBlock.ssqc(double m)", "testcase": false, "constructor": false}, {"identifier": "sub", "parameters": "(DataBlock data)", "modifiers": "public", "return": "void", "signature": "void sub(DataBlock data)", "full_signature": "public void sub(DataBlock data)", "class_method_signature": "DataBlock.sub(DataBlock data)", "testcase": false, "constructor": false}, {"identifier": "sub", "parameters": "(double d)", "modifiers": "public", "return": "void", "signature": "void sub(double d)", "full_signature": "public void sub(double d)", "class_method_signature": "DataBlock.sub(double d)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double sum()", "full_signature": "@Override public double sum()", "class_method_signature": "DataBlock.sum()", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "(DataBlock l, DataBlock r)", "modifiers": "public", "return": "void", "signature": "void sum(DataBlock l, DataBlock r)", "full_signature": "public void sum(DataBlock l, DataBlock r)", "class_method_signature": "DataBlock.sum(DataBlock l, DataBlock r)", "testcase": false, "constructor": false}, {"identifier": "sumLog", "parameters": "()", "modifiers": "public", "return": "LogSign", "signature": "LogSign sumLog()", "full_signature": "public LogSign sumLog()", "class_method_signature": "DataBlock.sumLog()", "testcase": false, "constructor": false}, {"identifier": "hypot", "parameters": "(double a, double b)", "modifiers": "public static", "return": "double", "signature": "double hypot(double a, double b)", "full_signature": "public static double hypot(double a, double b)", "class_method_signature": "DataBlock.hypot(double a, double b)", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(final int ndec)", "modifiers": "public", "return": "void", "signature": "void round(final int ndec)", "full_signature": "public void round(final int ndec)", "class_method_signature": "DataBlock.round(final int ndec)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DataBlock.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(String fmt)", "modifiers": "public", "return": "String", "signature": "String toString(String fmt)", "full_signature": "public String toString(String fmt)", "class_method_signature": "DataBlock.toString(String fmt)", "testcase": false, "constructor": false}, {"identifier": "randomize", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void randomize()", "full_signature": "public void randomize()", "class_method_signature": "DataBlock.randomize()", "testcase": false, "constructor": false}, {"identifier": "randomize", "parameters": "(int seed)", "modifiers": "public", "return": "void", "signature": "void randomize(int seed)", "full_signature": "public void randomize(int seed)", "class_method_signature": "DataBlock.randomize(int seed)", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "(double zero)", "modifiers": "public", "return": "boolean", "signature": "boolean isZero(double zero)", "full_signature": "public boolean isZero(double zero)", "class_method_signature": "DataBlock.isZero(double zero)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(int nitems)", "modifiers": "public", "return": "void", "signature": "void next(int nitems)", "full_signature": "public void next(int nitems)", "class_method_signature": "DataBlock.next(int nitems)", "testcase": false, "constructor": false}, {"identifier": "previous", "parameters": "(int nitems)", "modifiers": "public", "return": "void", "signature": "void previous(int nitems)", "full_signature": "public void previous(int nitems)", "class_method_signature": "DataBlock.previous(int nitems)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "DataBlock", "signature": "DataBlock start()", "full_signature": "public DataBlock start()", "class_method_signature": "DataBlock.start()", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "()", "modifiers": "public", "return": "DataBlock", "signature": "DataBlock end()", "full_signature": "public DataBlock end()", "class_method_signature": "DataBlock.end()", "testcase": false, "constructor": false}, {"identifier": "computeRecursively", "parameters": "(final double initial, DoubleBinaryOperator fn)", "modifiers": "@Override public", "return": "double", "signature": "double computeRecursively(final double initial, DoubleBinaryOperator fn)", "full_signature": "@Override public double computeRecursively(final double initial, DoubleBinaryOperator fn)", "class_method_signature": "DataBlock.computeRecursively(final double initial, DoubleBinaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(DoubleUnaryOperator fn)", "modifiers": "@Override public", "return": "void", "signature": "void apply(DoubleUnaryOperator fn)", "full_signature": "@Override public void apply(DoubleUnaryOperator fn)", "class_method_signature": "DataBlock.apply(DoubleUnaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "applyIf", "parameters": "(DoublePredicate pred, DoubleUnaryOperator fn)", "modifiers": "@Override public", "return": "void", "signature": "void applyIf(DoublePredicate pred, DoubleUnaryOperator fn)", "full_signature": "@Override public void applyIf(DoublePredicate pred, DoubleUnaryOperator fn)", "class_method_signature": "DataBlock.applyIf(DoublePredicate pred, DoubleUnaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "applyRecursively", "parameters": "(final double initial, DoubleBinaryOperator fn)", "modifiers": "@Override public", "return": "void", "signature": "void applyRecursively(final double initial, DoubleBinaryOperator fn)", "full_signature": "@Override public void applyRecursively(final double initial, DoubleBinaryOperator fn)", "class_method_signature": "DataBlock.applyRecursively(final double initial, DoubleBinaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(DoublePredicate pred)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean check(DoublePredicate pred)", "full_signature": "@Override public boolean check(DoublePredicate pred)", "class_method_signature": "DataBlock.check(DoublePredicate pred)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(DoublePredicate pred)", "modifiers": "@Override public", "return": "int", "signature": "int count(DoublePredicate pred)", "full_signature": "@Override public int count(DoublePredicate pred)", "class_method_signature": "DataBlock.count(DoublePredicate pred)", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "(DoublePredicate pred)", "modifiers": "@Override public", "return": "int", "signature": "int first(DoublePredicate pred)", "full_signature": "@Override public int first(DoublePredicate pred)", "class_method_signature": "DataBlock.first(DoublePredicate pred)", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "(DoublePredicate pred)", "modifiers": "@Override public", "return": "int", "signature": "int last(DoublePredicate pred)", "full_signature": "@Override public int last(DoublePredicate pred)", "class_method_signature": "DataBlock.last(DoublePredicate pred)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(DoubleBinaryOperator fn, DataBlock x)", "modifiers": "public", "return": "void", "signature": "void apply(DoubleBinaryOperator fn, DataBlock x)", "full_signature": "public void apply(DoubleBinaryOperator fn, DataBlock x)", "class_method_signature": "DataBlock.apply(DoubleBinaryOperator fn, DataBlock x)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(IReadDataBlock x, DoubleBinaryOperator fn)", "modifiers": "@Override public", "return": "void", "signature": "void apply(IReadDataBlock x, DoubleBinaryOperator fn)", "full_signature": "@Override public void apply(IReadDataBlock x, DoubleBinaryOperator fn)", "class_method_signature": "DataBlock.apply(IReadDataBlock x, DoubleBinaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(DoubleSupplier fn)", "modifiers": "@Override public", "return": "void", "signature": "void set(DoubleSupplier fn)", "full_signature": "@Override public void set(DoubleSupplier fn)", "class_method_signature": "DataBlock.set(DoubleSupplier fn)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(IntToDoubleFunction fn)", "modifiers": "@Override public", "return": "void", "signature": "void set(IntToDoubleFunction fn)", "full_signature": "@Override public void set(IntToDoubleFunction fn)", "class_method_signature": "DataBlock.set(IntToDoubleFunction fn)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(DoubleUnaryOperator fn, DataBlock x)", "modifiers": "public", "return": "void", "signature": "void set(DoubleUnaryOperator fn, DataBlock x)", "full_signature": "public void set(DoubleUnaryOperator fn, DataBlock x)", "class_method_signature": "DataBlock.set(DoubleUnaryOperator fn, DataBlock x)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(IReadDataBlock x, DoubleUnaryOperator fn)", "modifiers": "@Override public", "return": "void", "signature": "void set(IReadDataBlock x, DoubleUnaryOperator fn)", "full_signature": "@Override public void set(IReadDataBlock x, DoubleUnaryOperator fn)", "class_method_signature": "DataBlock.set(IReadDataBlock x, DoubleUnaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "setIf", "parameters": "(DoublePredicate pred, DoubleSupplier fn)", "modifiers": "@Override public", "return": "void", "signature": "void setIf(DoublePredicate pred, DoubleSupplier fn)", "full_signature": "@Override public void setIf(DoublePredicate pred, DoubleSupplier fn)", "class_method_signature": "DataBlock.setIf(DoublePredicate pred, DoubleSupplier fn)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(DataBlock x, DataBlock y, DoubleBinaryOperator fn)", "modifiers": "public", "return": "void", "signature": "void set(DataBlock x, DataBlock y, DoubleBinaryOperator fn)", "full_signature": "public void set(DataBlock x, DataBlock y, DoubleBinaryOperator fn)", "class_method_signature": "DataBlock.set(DataBlock x, DataBlock y, DoubleBinaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(IReadDataBlock x, IReadDataBlock y, DoubleBinaryOperator fn)", "modifiers": "@Override public", "return": "void", "signature": "void set(IReadDataBlock x, IReadDataBlock y, DoubleBinaryOperator fn)", "full_signature": "@Override public void set(IReadDataBlock x, IReadDataBlock y, DoubleBinaryOperator fn)", "class_method_signature": "DataBlock.set(IReadDataBlock x, IReadDataBlock y, DoubleBinaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(DoublePredicate pred)", "modifiers": "public", "return": "DataBlock", "signature": "DataBlock select(DoublePredicate pred)", "full_signature": "public DataBlock select(DoublePredicate pred)", "class_method_signature": "DataBlock.select(DoublePredicate pred)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(IReadDataBlock data, DoublePredicate pred)", "modifiers": "public static", "return": "DataBlock", "signature": "DataBlock select(IReadDataBlock data, DoublePredicate pred)", "full_signature": "public static DataBlock select(IReadDataBlock data, DoublePredicate pred)", "class_method_signature": "DataBlock.select(IReadDataBlock data, DoublePredicate pred)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/data/DataBlock.java"}, "focal_method": {"identifier": "bshift", "parameters": "()", "modifiers": "private", "return": "void", "body": "private void bshift() {\n        int imax = end - inc;\n        if (inc == 1) {\n            for (int i = beg; i < imax; ++i) {\n                src[i] = src[i + 1];\n            }\n        } else {\n            for (int i = beg; i != imax; i += inc) {\n                src[i] = src[i + inc];\n            }\n        }\n    }", "signature": "void bshift()", "full_signature": "private void bshift()", "class_method_signature": "DataBlock.bshift()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}