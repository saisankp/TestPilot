{"test_class": {"identifier": "FileDataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FileData fileData = null;", "modifier": "private", "type": "FileData", "declarator": "fileData = null", "var_name": "fileData"}, {"original_string": "private static final String DB_PATH = \"/TextData.db\";", "modifier": "private static final", "type": "String", "declarator": "DB_PATH = \"/TextData.db\"", "var_name": "DB_PATH"}], "file": "exposure-engine/auth-manager/src/test/java/com/alu/e3/auth/access/file/FileDataTest.java"}, "test_case": {"identifier": "test1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test1() throws Exception {\n\t\tApi api = new Api();\n\t\tapi.setId(\"test\");\n\n\t\tfileData = new FileData(\"/notAValidFile.db\");\n\t\tassertNotNull(fileData);\n\t\tassertNull(fileData.checkAllowed(api, \"test\").getAuthIdentity());\n\t}", "signature": "void test1()", "full_signature": "@Test public void test1()", "class_method_signature": "FileDataTest.test1()", "testcase": true, "constructor": false, "invocations": ["setId", "assertNotNull", "assertNull", "getAuthIdentity", "checkAllowed"]}, "focal_class": {"identifier": "FileData", "superclass": "", "interfaces": "implements IAuthDataAccess", "fields": [{"original_string": "private static final CategoryLogger logger = CategoryLoggerFactory.getLogger(FileData.class, Category.AUTH);", "modifier": "private static final", "type": "CategoryLogger", "declarator": "logger = CategoryLoggerFactory.getLogger(FileData.class, Category.AUTH)", "var_name": "logger"}, {"original_string": "File fData = null;", "modifier": "", "type": "File", "declarator": "fData = null", "var_name": "fData"}, {"original_string": "boolean bUseOptimized = true;", "modifier": "", "type": "boolean", "declarator": "bUseOptimized = true", "var_name": "bUseOptimized"}, {"original_string": "Hashtable<String, Set<String>> hashTable = null;", "modifier": "", "type": "Hashtable<String, Set<String>>", "declarator": "hashTable = null", "var_name": "hashTable"}], "methods": [{"identifier": "FileData", "parameters": "(String filePath)", "modifiers": "public", "return": "", "signature": " FileData(String filePath)", "full_signature": "public  FileData(String filePath)", "class_method_signature": "FileData.FileData(String filePath)", "testcase": false, "constructor": true}, {"identifier": "checkAllowed", "parameters": "(Api api, String authKey)", "modifiers": "@Override public", "return": "AuthReport", "signature": "AuthReport checkAllowed(Api api, String authKey)", "full_signature": "@Override public AuthReport checkAllowed(Api api, String authKey)", "class_method_signature": "FileData.checkAllowed(Api api, String authKey)", "testcase": false, "constructor": false}, {"identifier": "checkAllowed", "parameters": "(Api api, String username, String password)", "modifiers": "@Override public", "return": "AuthReport", "signature": "AuthReport checkAllowed(Api api, String username, String password)", "full_signature": "@Override public AuthReport checkAllowed(Api api, String username, String password)", "class_method_signature": "FileData.checkAllowed(Api api, String username, String password)", "testcase": false, "constructor": false}, {"identifier": "checkAllowed", "parameters": "(Api api, String username, String passwordDigest, boolean isPasswordText, String nonce, String created)", "modifiers": "@Override public", "return": "AuthReport", "signature": "AuthReport checkAllowed(Api api, String username, String passwordDigest, boolean isPasswordText, String nonce, String created)", "full_signature": "@Override public AuthReport checkAllowed(Api api, String username, String passwordDigest, boolean isPasswordText, String nonce, String created)", "class_method_signature": "FileData.checkAllowed(Api api, String username, String passwordDigest, boolean isPasswordText, String nonce, String created)", "testcase": false, "constructor": false}, {"identifier": "checkAllowed", "parameters": "(Api api, CanonicalizedIpAddress ipCanonicalized)", "modifiers": "@Override public", "return": "AuthReport", "signature": "AuthReport checkAllowed(Api api, CanonicalizedIpAddress ipCanonicalized)", "full_signature": "@Override public AuthReport checkAllowed(Api api, CanonicalizedIpAddress ipCanonicalized)", "class_method_signature": "FileData.checkAllowed(Api api, CanonicalizedIpAddress ipCanonicalized)", "testcase": false, "constructor": false}, {"identifier": "checkAllowed", "parameters": "(Api api)", "modifiers": "@Override public", "return": "AuthReport", "signature": "AuthReport checkAllowed(Api api)", "full_signature": "@Override public AuthReport checkAllowed(Api api)", "class_method_signature": "FileData.checkAllowed(Api api)", "testcase": false, "constructor": false}, {"identifier": "checkOAuthAllowed", "parameters": "(Api api, String clientId, String clientSecret)", "modifiers": "@Override public", "return": "AuthReport", "signature": "AuthReport checkOAuthAllowed(Api api, String clientId, String clientSecret)", "full_signature": "@Override public AuthReport checkOAuthAllowed(Api api, String clientId, String clientSecret)", "class_method_signature": "FileData.checkOAuthAllowed(Api api, String clientId, String clientSecret)", "testcase": false, "constructor": false}, {"identifier": "findString", "parameters": "(String key, String value)", "modifiers": "", "return": "String", "signature": "String findString(String key, String value)", "full_signature": " String findString(String key, String value)", "class_method_signature": "FileData.findString(String key, String value)", "testcase": false, "constructor": false}], "file": "exposure-engine/auth-manager/src/main/java/com/alu/e3/auth/access/file/FileData.java"}, "focal_method": {"identifier": "checkAllowed", "parameters": "(Api api, String authKey)", "modifiers": "@Override public", "return": "AuthReport", "body": "@Override \n\tpublic AuthReport checkAllowed(Api api, String authKey) {\n\n\t\tAuthReport authReport = new AuthReport();\n\t\tif(logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Lookup if AuthKey:\" + authKey + \" is associated with appId:\" + api.getId());\n\t\t}\n\t\t\n\t\tString appId = findString(api.getId(), authKey);\n\t\t\n\t\tif(appId != null) {\n\t\t\t\n\t\t\tAuthIdentityHelper authIdentityHelper = new AuthIdentityHelper();\n\t\t\t\n\t\t\tauthIdentityHelper.setApi(api.getId());\n\t\t\tauthIdentityHelper.setAppId(appId);\n\t\t\tauthIdentityHelper.setAuth(authKey);\n\t\t\t\n\t\t\tauthReport.setAuthIdentity( authIdentityHelper.getAuthIdentity());\n\t\t\tauthReport.setApiActive(true);\n\t\t\t\n\t\t} else {\n\t\t\tauthReport.setNotAuthorized(true);\n\t\t}\n\t\t\n\t\treturn authReport;\n\t}", "signature": "AuthReport checkAllowed(Api api, String authKey)", "full_signature": "@Override public AuthReport checkAllowed(Api api, String authKey)", "class_method_signature": "FileData.checkAllowed(Api api, String authKey)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "getId", "findString", "getId", "setApi", "getId", "setAppId", "setAuth", "setAuthIdentity", "getAuthIdentity", "setApiActive", "setNotAuthorized"]}, "repository": {"repo_id": 5239065, "url": "https://github.com/apigrove/apigrove", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 118, "size": 215144, "license": "licensed"}}