{"test_class": {"identifier": "MigrationContainerTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "private static final Migration MIGRATION_12 = new Migration(1, 2) {\n        @Override\n        public void migrate(SQLiteDatabase database) {\n\n        }\n    };", "modifier": "private static final", "type": "Migration", "declarator": "MIGRATION_12 = new Migration(1, 2) {\n        @Override\n        public void migrate(SQLiteDatabase database) {\n\n        }\n    }", "var_name": "MIGRATION_12"}, {"original_string": "private static final Migration MIGRATION_23 = new Migration(2, 3) {\n        @Override\n        public void migrate(SQLiteDatabase database) {\n\n        }\n    };", "modifier": "private static final", "type": "Migration", "declarator": "MIGRATION_23 = new Migration(2, 3) {\n        @Override\n        public void migrate(SQLiteDatabase database) {\n\n        }\n    }", "var_name": "MIGRATION_23"}, {"original_string": "private static final Migration MIGRATION_34 = new Migration(3, 4) {\n        @Override\n        public void migrate(SQLiteDatabase database) {\n\n        }\n    };", "modifier": "private static final", "type": "Migration", "declarator": "MIGRATION_34 = new Migration(3, 4) {\n        @Override\n        public void migrate(SQLiteDatabase database) {\n\n        }\n    }", "var_name": "MIGRATION_34"}, {"original_string": "private static final Migration MIGRATION_14 = new Migration(1, 4) {\n        @Override\n        public void migrate(SQLiteDatabase database) {\n\n        }\n    };", "modifier": "private static final", "type": "Migration", "declarator": "MIGRATION_14 = new Migration(1, 4) {\n        @Override\n        public void migrate(SQLiteDatabase database) {\n\n        }\n    }", "var_name": "MIGRATION_14"}, {"original_string": "private static final Migration MIGRATION_12_2 = new Migration(1, 2) {\n        @Override\n        public void migrate(SQLiteDatabase database) {\n\n        }\n    };", "modifier": "private static final", "type": "Migration", "declarator": "MIGRATION_12_2 = new Migration(1, 2) {\n        @Override\n        public void migrate(SQLiteDatabase database) {\n\n        }\n    }", "var_name": "MIGRATION_12_2"}, {"original_string": "private static final Migration MIGRATION_41 = new Migration(4, 1) {\n        @Override\n        public void migrate(SQLiteDatabase database) {\n\n        }\n    };", "modifier": "private static final", "type": "Migration", "declarator": "MIGRATION_41 = new Migration(4, 1) {\n        @Override\n        public void migrate(SQLiteDatabase database) {\n\n        }\n    }", "var_name": "MIGRATION_41"}], "file": "reactiveandroid/src/test/java/com/reactiveandroid/internal/database/migration/MigrationContainerTest.java"}, "test_case": {"identifier": "testFindMigrationPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindMigrationPath() {\n        MigrationContainer migrationContainer = new MigrationContainer();\n        migrationContainer.addMigrations(MIGRATION_12, MIGRATION_23, MIGRATION_34);\n\n        assertEquals(MIGRATION_12, migrationContainer.findMigrationPath(1, 2).get(0));\n        assertEquals(MIGRATION_23, migrationContainer.findMigrationPath(2, 3).get(0));\n        assertEquals(MIGRATION_34, migrationContainer.findMigrationPath(3, 4).get(0));\n\n        assertEquals(0, migrationContainer.findMigrationPath(1, 1).size());\n        assertEquals(1, migrationContainer.findMigrationPath(1, 2).size());\n        assertEquals(2, migrationContainer.findMigrationPath(1, 3).size());\n        assertEquals(3, migrationContainer.findMigrationPath(1, 4).size());\n    }", "signature": "void testFindMigrationPath()", "full_signature": "@Test public void testFindMigrationPath()", "class_method_signature": "MigrationContainerTest.testFindMigrationPath()", "testcase": true, "constructor": false, "invocations": ["addMigrations", "assertEquals", "get", "findMigrationPath", "assertEquals", "get", "findMigrationPath", "assertEquals", "get", "findMigrationPath", "assertEquals", "size", "findMigrationPath", "assertEquals", "size", "findMigrationPath", "assertEquals", "size", "findMigrationPath", "assertEquals", "size", "findMigrationPath"]}, "focal_class": {"identifier": "MigrationContainer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SparseArray<SparseArray<Migration>> migrations = new SparseArray<>();", "modifier": "private", "type": "SparseArray<SparseArray<Migration>>", "declarator": "migrations = new SparseArray<>()", "var_name": "migrations"}], "methods": [{"identifier": "addMigrations", "parameters": "(Migration... migrations)", "modifiers": "public", "return": "void", "signature": "void addMigrations(Migration... migrations)", "full_signature": "public void addMigrations(Migration... migrations)", "class_method_signature": "MigrationContainer.addMigrations(Migration... migrations)", "testcase": false, "constructor": false}, {"identifier": "addMigration", "parameters": "(@NonNull Migration migration)", "modifiers": "private", "return": "void", "signature": "void addMigration(@NonNull Migration migration)", "full_signature": "private void addMigration(@NonNull Migration migration)", "class_method_signature": "MigrationContainer.addMigration(@NonNull Migration migration)", "testcase": false, "constructor": false}, {"identifier": "findMigrationPath", "parameters": "(int start, int end)", "modifiers": "@Nullable public", "return": "List<Migration>", "signature": "List<Migration> findMigrationPath(int start, int end)", "full_signature": "@Nullable public List<Migration> findMigrationPath(int start, int end)", "class_method_signature": "MigrationContainer.findMigrationPath(int start, int end)", "testcase": false, "constructor": false}, {"identifier": "findUpMigrationPath", "parameters": "(List<Migration> result, boolean upgrade,\n                                                int start, int end)", "modifiers": "private", "return": "List<Migration>", "signature": "List<Migration> findUpMigrationPath(List<Migration> result, boolean upgrade,\n                                                int start, int end)", "full_signature": "private List<Migration> findUpMigrationPath(List<Migration> result, boolean upgrade,\n                                                int start, int end)", "class_method_signature": "MigrationContainer.findUpMigrationPath(List<Migration> result, boolean upgrade,\n                                                int start, int end)", "testcase": false, "constructor": false}], "file": "reactiveandroid/src/main/java/com/reactiveandroid/internal/database/migration/MigrationContainer.java"}, "focal_method": {"identifier": "findMigrationPath", "parameters": "(int start, int end)", "modifiers": "@Nullable public", "return": "List<Migration>", "body": "@Nullable\n    public List<Migration> findMigrationPath(int start, int end) {\n        if (start == end) {\n            return Collections.emptyList();\n        }\n        boolean migrateUp = end > start;\n        List<Migration> result = new ArrayList<>();\n        return findUpMigrationPath(result, migrateUp, start, end);\n    }", "signature": "List<Migration> findMigrationPath(int start, int end)", "full_signature": "@Nullable public List<Migration> findMigrationPath(int start, int end)", "class_method_signature": "MigrationContainer.findMigrationPath(int start, int end)", "testcase": false, "constructor": false, "invocations": ["emptyList", "findUpMigrationPath"]}, "repository": {"repo_id": 108579191, "url": "https://github.com/ImangazalievM/ReActiveAndroid", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 101, "size": 572, "license": "licensed"}}