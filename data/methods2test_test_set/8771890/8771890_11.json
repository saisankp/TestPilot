{"test_class": {"identifier": "SystemAccountAuthenticatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Connection con;", "modifier": "private static", "type": "Connection", "declarator": "con", "var_name": "con"}, {"original_string": "private static PasswordEncryptor encryptor = getEncryptor();", "modifier": "private static", "type": "PasswordEncryptor", "declarator": "encryptor = getEncryptor()", "var_name": "encryptor"}, {"original_string": "private static final String COMPONENT_BASE_PATH = \"com/nablarch/example/app/web/common/authentication/\";", "modifier": "private static final", "type": "String", "declarator": "COMPONENT_BASE_PATH = \"com/nablarch/example/app/web/common/authentication/\"", "var_name": "COMPONENT_BASE_PATH"}], "file": "examples/nablarch/src/test/java/com/nablarch/example/app/web/common/authentication/SystemAccountAuthenticatorTest.java"}, "test_case": {"identifier": "testLoginSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoginSuccess() throws Exception {\n\n        //**********************************************************************\n        // \u696d\u52d9\u65e5\u4ed8\u304c\u30e6\u30fc\u30b6\u306e\u6709\u52b9\u671f\u9650\uff08\u958b\u59cb\u65e5\uff09\u3068\u540c\u65e5\n        //**********************************************************************\n        createPasswordAuthenticator(\"20130802\").authenticate(\"active user2\", \"pass!!!\");\n\n        PreparedStatement statement = con.prepareStatement(\"select * from system_account where user_id = ?\");\n        statement.setString(1, \"5\");\n        ResultSet resultSet = statement.executeQuery();\n        assertThat(resultSet.next(), is(true));\n        assertThat(\"\u30e6\u30fc\u30b6\u306f\u30ed\u30c3\u30af\u4e2d\u306e\u307e\u307e\", resultSet.getString(\"USER_ID_LOCKED\"), is(\"FALSE\"));\n        assertThat(\"\u5931\u6557\u56de\u6570\u306f\u5909\u308f\u3089\u306a\u3044\", resultSet.getInt(\"FAILED_COUNT\"), is(0));\n        assertThat(\"\u6700\u7d42\u30ed\u30b0\u30a4\u30f3\u65e5\u6642\u304c\u66f4\u65b0\u3055\u308c\u308b\u3053\u3068\", resultSet.getTimestamp(\"LAST_LOGIN_DATE_TIME\"),\n                is(Timestamp.valueOf(\"2013-08-02 00:11:22.000\")));\n\n        //**********************************************************************\n        // \u696d\u52d9\u65e5\u4ed8\u304c\u30e6\u30fc\u30b6\u306e\u6709\u52b9\u671f\u9650\uff08\u7d42\u4e86\u65e5\uff09\u3068\u540c\u65e5\n        //**********************************************************************\n        createPasswordAuthenticator(\"20130805\").authenticate(\"active user2\", \"pass!!!\");\n    }", "signature": "void testLoginSuccess()", "full_signature": "@Test public void testLoginSuccess()", "class_method_signature": "SystemAccountAuthenticatorTest.testLoginSuccess()", "testcase": true, "constructor": false, "invocations": ["authenticate", "createPasswordAuthenticator", "prepareStatement", "setString", "executeQuery", "assertThat", "next", "is", "assertThat", "KED\"), is", "", "assertThat", "\"), is", "", "assertThat", "ME\"),", "is", "valueOf", "authenticate", "createPasswordAuthenticator"]}, "focal_class": {"identifier": "SystemAccountAuthenticator", "superclass": "", "interfaces": "implements PasswordAuthenticator", "fields": [{"original_string": "private int failedCountToLock;", "modifier": "private", "type": "int", "declarator": "failedCountToLock", "var_name": "failedCountToLock"}, {"original_string": "private PasswordEncryptor passwordEncryptor;", "modifier": "private", "type": "PasswordEncryptor", "declarator": "passwordEncryptor", "var_name": "passwordEncryptor"}, {"original_string": "private SimpleDbTransactionManager dbManager;", "modifier": "private", "type": "SimpleDbTransactionManager", "declarator": "dbManager", "var_name": "dbManager"}, {"original_string": "private static final String SQL_ID_PREFIX = SystemAccountAuthenticator.class.getName() + '#';", "modifier": "private static final", "type": "String", "declarator": "SQL_ID_PREFIX = SystemAccountAuthenticator.class.getName() + '#'", "var_name": "SQL_ID_PREFIX"}], "methods": [{"identifier": "SystemAccountAuthenticator", "parameters": "()", "modifiers": "public", "return": "", "signature": " SystemAccountAuthenticator()", "full_signature": "public  SystemAccountAuthenticator()", "class_method_signature": "SystemAccountAuthenticator.SystemAccountAuthenticator()", "testcase": false, "constructor": true}, {"identifier": "setFailedCountToLock", "parameters": "(int failedCountToLock)", "modifiers": "public", "return": "void", "signature": "void setFailedCountToLock(int failedCountToLock)", "full_signature": "public void setFailedCountToLock(int failedCountToLock)", "class_method_signature": "SystemAccountAuthenticator.setFailedCountToLock(int failedCountToLock)", "testcase": false, "constructor": false}, {"identifier": "setPasswordEncryptor", "parameters": "(PasswordEncryptor passwordEncryptor)", "modifiers": "public", "return": "void", "signature": "void setPasswordEncryptor(PasswordEncryptor passwordEncryptor)", "full_signature": "public void setPasswordEncryptor(PasswordEncryptor passwordEncryptor)", "class_method_signature": "SystemAccountAuthenticator.setPasswordEncryptor(PasswordEncryptor passwordEncryptor)", "testcase": false, "constructor": false}, {"identifier": "setDbManager", "parameters": "(SimpleDbTransactionManager dbManager)", "modifiers": "public", "return": "void", "signature": "void setDbManager(SimpleDbTransactionManager dbManager)", "full_signature": "public void setDbManager(SimpleDbTransactionManager dbManager)", "class_method_signature": "SystemAccountAuthenticator.setDbManager(SimpleDbTransactionManager dbManager)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(final String userId, final String password)", "modifiers": "public", "return": "void", "signature": "void authenticate(final String userId, final String password)", "full_signature": "public void authenticate(final String userId, final String password)", "class_method_signature": "SystemAccountAuthenticator.authenticate(final String userId, final String password)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(SystemAccount account, String password, Date businessDate)", "modifiers": "private", "return": "void", "signature": "void authenticate(SystemAccount account, String password, Date businessDate)", "full_signature": "private void authenticate(SystemAccount account, String password, Date businessDate)", "class_method_signature": "SystemAccountAuthenticator.authenticate(SystemAccount account, String password, Date businessDate)", "testcase": false, "constructor": false}, {"identifier": "expiredPassword", "parameters": "(SystemAccount account, Date businessDate)", "modifiers": "private", "return": "boolean", "signature": "boolean expiredPassword(SystemAccount account, Date businessDate)", "full_signature": "private boolean expiredPassword(SystemAccount account, Date businessDate)", "class_method_signature": "SystemAccountAuthenticator.expiredPassword(SystemAccount account, Date businessDate)", "testcase": false, "constructor": false}, {"identifier": "isChecksFailedCount", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isChecksFailedCount()", "full_signature": "private boolean isChecksFailedCount()", "class_method_signature": "SystemAccountAuthenticator.isChecksFailedCount()", "testcase": false, "constructor": false}, {"identifier": "updateAuthenticationSucceed", "parameters": "(final Integer id)", "modifiers": "private", "return": "void", "signature": "void updateAuthenticationSucceed(final Integer id)", "full_signature": "private void updateAuthenticationSucceed(final Integer id)", "class_method_signature": "SystemAccountAuthenticator.updateAuthenticationSucceed(final Integer id)", "testcase": false, "constructor": false}, {"identifier": "updateAuthenticationFailed", "parameters": "(final Integer id, final Short failedCount)", "modifiers": "private", "return": "void", "signature": "void updateAuthenticationFailed(final Integer id, final Short failedCount)", "full_signature": "private void updateAuthenticationFailed(final Integer id, final Short failedCount)", "class_method_signature": "SystemAccountAuthenticator.updateAuthenticationFailed(final Integer id, final Short failedCount)", "testcase": false, "constructor": false}], "file": "examples/nablarch/src/main/java/com/nablarch/example/app/web/common/authentication/SystemAccountAuthenticator.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(final String userId, final String password)", "modifiers": "public", "return": "void", "body": "public void authenticate(final String userId, final String password)\n        throws AuthenticationFailedException, UserIdLockedException, PasswordExpiredException {\n\n        if (userId == null || password == null) {\n            throw new AuthenticationFailedException(userId);\n        }\n\n        // \u6709\u52b9\u671f\u9650\u306f\u65e5\u4ed8\u5358\u4f4d\u3067\u7ba1\u7406\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u73fe\u5728\u65e5\u6642\u304b\u3089\u6642\u9593\u3092\u5207\u308a\u6368\u3066\u305f\u65e5\u4ed8\u3092\u4f7f\u7528\u3059\u308b\u3002\n        Date sysDate = new Timestamp(DateUtil.getDate(SystemTimeUtil.getDateString()).getTime());\n        final SystemAccount account;\n        try {\n            account = UniversalDao.findBySqlFile(\n                    SystemAccount.class,\n                    \"FIND_SYSTEM_ACCOUNT\", new Object[]{userId, sysDate});\n        } catch (NoDataException e) {\n            // \u30e6\u30fc\u30b6ID\u306b\u4e00\u81f4\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\n            throw new AuthenticationFailedException(userId);\n        }\n\n        authenticate(account, password, sysDate);\n    }", "signature": "void authenticate(final String userId, final String password)", "full_signature": "public void authenticate(final String userId, final String password)", "class_method_signature": "SystemAccountAuthenticator.authenticate(final String userId, final String password)", "testcase": false, "constructor": false, "invocations": ["getTime", "getDate", "getDateString", "findBySqlFile", "authenticate"]}, "repository": {"repo_id": 8771890, "url": "https://github.com/kawasima/waitt", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 15, "size": 1108, "license": "licensed"}}