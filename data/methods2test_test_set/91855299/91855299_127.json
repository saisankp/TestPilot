{"test_class": {"identifier": "HostParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final HostParser parser = new HostParser();", "modifier": "private final", "type": "HostParser", "declarator": "parser = new HostParser()", "var_name": "parser"}], "file": "plugins/networktables/src/test/java/edu/wpi/first/shuffleboard/plugin/networktables/HostParserTest.java"}, "test_case": {"identifier": "testIpAddress", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIpAddress() {\n    var hostInfo = parser.parse(\"10.2.46.2\").get();\n    assertEquals(\"10.2.46.2\", hostInfo.getHost());\n    assertEquals(HostParser.DEFAULT_PORT, hostInfo.getPort());\n  }", "signature": "void testIpAddress()", "full_signature": "@Test public void testIpAddress()", "class_method_signature": "HostParserTest.testIpAddress()", "testcase": true, "constructor": false, "invocations": ["get", "parse", "assertEquals", "getHost", "assertEquals", "getPort"]}, "focal_class": {"identifier": "HostParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(HostParser.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(HostParser.class.getName())", "var_name": "log"}, {"original_string": "public static final int DEFAULT_PORT = NetworkTableInstance.kDefaultPort;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_PORT = NetworkTableInstance.kDefaultPort", "var_name": "DEFAULT_PORT"}], "methods": [{"identifier": "parse", "parameters": "(String rawHost)", "modifiers": "public", "return": "Optional<NtHostInfo>", "signature": "Optional<NtHostInfo> parse(String rawHost)", "full_signature": "public Optional<NtHostInfo> parse(String rawHost)", "class_method_signature": "HostParser.parse(String rawHost)", "testcase": false, "constructor": false}], "file": "plugins/networktables/src/main/java/edu/wpi/first/shuffleboard/plugin/networktables/HostParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String rawHost)", "modifiers": "public", "return": "Optional<NtHostInfo>", "body": "public Optional<NtHostInfo> parse(String rawHost) {\n    try {\n      // Make sure the URI starts with http:// or https// so the URI constructor can parse it\n      String str = rawHost.startsWith(\"http://\") || rawHost.startsWith(\"https://\") ? rawHost : \"http://\" + rawHost;\n\n      URI uri = new URI(str);\n      String host = uri.getHost();\n\n      if (host == null) {\n        log.warning(\"No host or invalid host specified: '\" + rawHost + \"'\");\n        return Optional.empty();\n      }\n\n      int port = uri.getPort();\n\n      if (port == -1) {\n        return Optional.of(NtHostInfo.onDefaultPort(host));\n      } else {\n        return Optional.of(new NtHostInfo(host, port));\n      }\n    } catch (URISyntaxException e) {\n      log.log(Level.WARNING, \"Invalid NetworkTables host: \" + rawHost, e);\n      return Optional.empty();\n    }\n  }", "signature": "Optional<NtHostInfo> parse(String rawHost)", "full_signature": "public Optional<NtHostInfo> parse(String rawHost)", "class_method_signature": "HostParser.parse(String rawHost)", "testcase": false, "constructor": false, "invocations": ["startsWith", "startsWith", "getHost", "warning", "empty", "getPort", "of", "onDefaultPort", "of", "log", "empty"]}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}