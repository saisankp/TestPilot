{"test_class": {"identifier": "TestClusterCheckpointPersistenceProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Logger LOG = Logger.getLogger(TestClusterCheckpointPersistenceProvider.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(TestClusterCheckpointPersistenceProvider.class)", "var_name": "LOG"}, {"original_string": "static int localZkPort = Utils.getAvailablePort(2193);", "modifier": "static", "type": "int", "declarator": "localZkPort = Utils.getAvailablePort(2193)", "var_name": "localZkPort"}, {"original_string": "static final String zkAddr = \"localhost:\" + localZkPort;", "modifier": "static final", "type": "String", "declarator": "zkAddr = \"localhost:\" + localZkPort", "var_name": "zkAddr"}, {"original_string": "static final String clusterName = \"test-databus-cluster-cp\";", "modifier": "static final", "type": "String", "declarator": "clusterName = \"test-databus-cluster-cp\"", "var_name": "clusterName"}, {"original_string": "static List<ZkServer> _localZkServers = null;", "modifier": "static", "type": "List<ZkServer>", "declarator": "_localZkServers = null", "var_name": "_localZkServers"}], "file": "databus-client/databus-client-api/src/test/java/com/linkedin/databus/client/pub/TestClusterCheckpointPersistenceProvider.java"}, "test_case": {"identifier": "testMultipleClusterCheckpointPersistence", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMultipleClusterCheckpointPersistence()\n  {\n    try\n    {\n      String[] partitionIds = { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\" };\n      String[] clusters = { \"tcluster1\", \"tcluster2\", \"tcluster3\" };\n      ArrayList<CheckpointRW> cpRws = new ArrayList<TestClusterCheckpointPersistenceProvider.CheckpointRW>();\n      for (String c : clusters)\n      {\n        // create clusters;\n        ClusterCheckpointPersistenceProvider.createCluster(zkAddr, c);\n        for (String p : partitionIds)\n        {\n          cpRws.add(new CheckpointRW(c, p, RngUtils\n              .randomPositiveLong()));\n        }\n      }\n      for (CheckpointRW cpRW : cpRws)\n      {\n        cpRW.start();\n      }\n      for (CheckpointRW cpRW : cpRws)\n      {\n        cpRW.join(10000);\n        Assert.assertFalse(cpRW.hasError());\n      }\n    }\n    catch (Exception e)\n    {\n      Assert.assertTrue(false);\n    }\n  }", "signature": "void testMultipleClusterCheckpointPersistence()", "full_signature": "@Test public void testMultipleClusterCheckpointPersistence()", "class_method_signature": "TestClusterCheckpointPersistenceProvider.testMultipleClusterCheckpointPersistence()", "testcase": true, "constructor": false, "invocations": ["createCluster", "add", "randomPositiveLong", "start", "join", "assertFalse", "hasError", "assertTrue"]}, "focal_class": {"identifier": "ClusterCheckpointPersistenceProvider", "superclass": "extends\n        CheckpointPersistenceProviderAbstract", "interfaces": "", "fields": [{"original_string": "protected static final Logger LOG = Logger\n            .getLogger(ClusterCheckpointPersistenceProvider.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOG = Logger\n            .getLogger(ClusterCheckpointPersistenceProvider.class)", "var_name": "LOG"}, {"original_string": "protected static final String KEY_CHECKPOINT=\"c\";", "modifier": "protected static final", "type": "String", "declarator": "KEY_CHECKPOINT=\"c\"", "var_name": "KEY_CHECKPOINT"}, {"original_string": "protected static final String KEY_SOURCES=\"s\";", "modifier": "protected static final", "type": "String", "declarator": "KEY_SOURCES=\"s\"", "var_name": "KEY_SOURCES"}, {"original_string": "private final String _id;", "modifier": "private final", "type": "String", "declarator": "_id", "var_name": "_id"}, {"original_string": "private HelixPropertyStore<ZNRecord> _propertyStore = null;", "modifier": "private", "type": "HelixPropertyStore<ZNRecord>", "declarator": "_propertyStore = null", "var_name": "_propertyStore"}, {"original_string": "private final long _checkpointIntervalMs;", "modifier": "private final", "type": "long", "declarator": "_checkpointIntervalMs", "var_name": "_checkpointIntervalMs"}, {"original_string": "private long _numWritesSkipped = 0;", "modifier": "private", "type": "long", "declarator": "_numWritesSkipped = 0", "var_name": "_numWritesSkipped"}, {"original_string": "private long _lastTimeWrittenMs = 0;", "modifier": "private", "type": "long", "declarator": "_lastTimeWrittenMs = 0", "var_name": "_lastTimeWrittenMs"}, {"original_string": "private final static HelixConnectionManager _helixConnManager = new HelixConnectionManager();", "modifier": "private final static", "type": "HelixConnectionManager", "declarator": "_helixConnManager = new HelixConnectionManager()", "var_name": "_helixConnManager"}], "methods": [{"identifier": "ClusterCheckpointPersistenceProvider", "parameters": "(long id)", "modifiers": "public", "return": "", "signature": " ClusterCheckpointPersistenceProvider(long id)", "full_signature": "public  ClusterCheckpointPersistenceProvider(long id)", "class_method_signature": "ClusterCheckpointPersistenceProvider.ClusterCheckpointPersistenceProvider(long id)", "testcase": false, "constructor": true}, {"identifier": "ClusterCheckpointPersistenceProvider", "parameters": "(String id)", "modifiers": "public", "return": "", "signature": " ClusterCheckpointPersistenceProvider(String id)", "full_signature": "public  ClusterCheckpointPersistenceProvider(String id)", "class_method_signature": "ClusterCheckpointPersistenceProvider.ClusterCheckpointPersistenceProvider(String id)", "testcase": false, "constructor": true}, {"identifier": "ClusterCheckpointPersistenceProvider", "parameters": "(long id, Config config)", "modifiers": "public", "return": "", "signature": " ClusterCheckpointPersistenceProvider(long id, Config config)", "full_signature": "public  ClusterCheckpointPersistenceProvider(long id, Config config)", "class_method_signature": "ClusterCheckpointPersistenceProvider.ClusterCheckpointPersistenceProvider(long id, Config config)", "testcase": false, "constructor": true}, {"identifier": "ClusterCheckpointPersistenceProvider", "parameters": "(String id, Config config)", "modifiers": "public", "return": "", "signature": " ClusterCheckpointPersistenceProvider(String id, Config config)", "full_signature": "public  ClusterCheckpointPersistenceProvider(String id, Config config)", "class_method_signature": "ClusterCheckpointPersistenceProvider.ClusterCheckpointPersistenceProvider(String id, Config config)", "testcase": false, "constructor": true}, {"identifier": "ClusterCheckpointPersistenceProvider", "parameters": "(long id, StaticConfig config)", "modifiers": "public", "return": "", "signature": " ClusterCheckpointPersistenceProvider(long id, StaticConfig config)", "full_signature": "public  ClusterCheckpointPersistenceProvider(long id, StaticConfig config)", "class_method_signature": "ClusterCheckpointPersistenceProvider.ClusterCheckpointPersistenceProvider(long id, StaticConfig config)", "testcase": false, "constructor": true}, {"identifier": "ClusterCheckpointPersistenceProvider", "parameters": "(String id, StaticConfig config)", "modifiers": "public", "return": "", "signature": " ClusterCheckpointPersistenceProvider(String id, StaticConfig config)", "full_signature": "public  ClusterCheckpointPersistenceProvider(String id, StaticConfig config)", "class_method_signature": "ClusterCheckpointPersistenceProvider.ClusterCheckpointPersistenceProvider(String id, StaticConfig config)", "testcase": false, "constructor": true}, {"identifier": "createCluster", "parameters": "(String zkAddr, String clusterName)", "modifiers": "static public", "return": "boolean", "signature": "boolean createCluster(String zkAddr, String clusterName)", "full_signature": "static public boolean createCluster(String zkAddr, String clusterName)", "class_method_signature": "ClusterCheckpointPersistenceProvider.createCluster(String zkAddr, String clusterName)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(String clusterName)", "modifiers": "static public", "return": "void", "signature": "void close(String clusterName)", "full_signature": "static public void close(String clusterName)", "class_method_signature": "ClusterCheckpointPersistenceProvider.close(String clusterName)", "testcase": false, "constructor": false}, {"identifier": "makeKey", "parameters": "(List<String> srcs)", "modifiers": "protected", "return": "String", "signature": "String makeKey(List<String> srcs)", "full_signature": "protected String makeKey(List<String> srcs)", "class_method_signature": "ClusterCheckpointPersistenceProvider.makeKey(List<String> srcs)", "testcase": false, "constructor": false}, {"identifier": "makeKeyOld", "parameters": "(List<String> srcs)", "modifiers": "protected", "return": "String", "signature": "String makeKeyOld(List<String> srcs)", "full_signature": "protected String makeKeyOld(List<String> srcs)", "class_method_signature": "ClusterCheckpointPersistenceProvider.makeKeyOld(List<String> srcs)", "testcase": false, "constructor": false}, {"identifier": "storeCheckpointLegacy", "parameters": "(List<String> sourceNames,\n            Checkpoint checkpoint)", "modifiers": "@Deprecated /** * * @param sourceNames * @param checkpoint * Persist a checkpoint in legacy location * @throws IOException */ public", "return": "void", "signature": "void storeCheckpointLegacy(List<String> sourceNames,\n            Checkpoint checkpoint)", "full_signature": "@Deprecated /** * * @param sourceNames * @param checkpoint * Persist a checkpoint in legacy location * @throws IOException */ public void storeCheckpointLegacy(List<String> sourceNames,\n            Checkpoint checkpoint)", "class_method_signature": "ClusterCheckpointPersistenceProvider.storeCheckpointLegacy(List<String> sourceNames,\n            Checkpoint checkpoint)", "testcase": false, "constructor": false}, {"identifier": "storeCheckpoint", "parameters": "(List<String> sourceNames, Checkpoint checkpoint)", "modifiers": "@Override public", "return": "void", "signature": "void storeCheckpoint(List<String> sourceNames, Checkpoint checkpoint)", "full_signature": "@Override public void storeCheckpoint(List<String> sourceNames, Checkpoint checkpoint)", "class_method_signature": "ClusterCheckpointPersistenceProvider.storeCheckpoint(List<String> sourceNames, Checkpoint checkpoint)", "testcase": false, "constructor": false}, {"identifier": "storeZkRecord", "parameters": "(List<String> sourceNames, Checkpoint checkpoint)", "modifiers": "protected", "return": "void", "signature": "void storeZkRecord(List<String> sourceNames, Checkpoint checkpoint)", "full_signature": "protected void storeZkRecord(List<String> sourceNames, Checkpoint checkpoint)", "class_method_signature": "ClusterCheckpointPersistenceProvider.storeZkRecord(List<String> sourceNames, Checkpoint checkpoint)", "testcase": false, "constructor": false}, {"identifier": "loadCheckpointLegacy", "parameters": "(List<String> sources)", "modifiers": "@Deprecated /** * read legacy checkpoint without migration * * @param sources * @return checkpoint if found or null otherwise */ public", "return": "Checkpoint", "signature": "Checkpoint loadCheckpointLegacy(List<String> sources)", "full_signature": "@Deprecated /** * read legacy checkpoint without migration * * @param sources * @return checkpoint if found or null otherwise */ public Checkpoint loadCheckpointLegacy(List<String> sources)", "class_method_signature": "ClusterCheckpointPersistenceProvider.loadCheckpointLegacy(List<String> sources)", "testcase": false, "constructor": false}, {"identifier": "getCheckpoint", "parameters": "(String key)", "modifiers": "private", "return": "Checkpoint", "signature": "Checkpoint getCheckpoint(String key)", "full_signature": "private Checkpoint getCheckpoint(String key)", "class_method_signature": "ClusterCheckpointPersistenceProvider.getCheckpoint(String key)", "testcase": false, "constructor": false}, {"identifier": "loadCheckpoint", "parameters": "(List<String> sourceNames)", "modifiers": "@Override public", "return": "Checkpoint", "signature": "Checkpoint loadCheckpoint(List<String> sourceNames)", "full_signature": "@Override public Checkpoint loadCheckpoint(List<String> sourceNames)", "class_method_signature": "ClusterCheckpointPersistenceProvider.loadCheckpoint(List<String> sourceNames)", "testcase": false, "constructor": false}, {"identifier": "getSourceNames", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getSourceNames()", "full_signature": "public Set<String> getSourceNames()", "class_method_signature": "ClusterCheckpointPersistenceProvider.getSourceNames()", "testcase": false, "constructor": false}, {"identifier": "removeCheckpoint", "parameters": "(String key)", "modifiers": "private", "return": "void", "signature": "void removeCheckpoint(String key)", "full_signature": "private void removeCheckpoint(String key)", "class_method_signature": "ClusterCheckpointPersistenceProvider.removeCheckpoint(String key)", "testcase": false, "constructor": false}, {"identifier": "removeCheckpointLegacy", "parameters": "(List<String> sourceNames)", "modifiers": "public", "return": "void", "signature": "void removeCheckpointLegacy(List<String> sourceNames)", "full_signature": "public void removeCheckpointLegacy(List<String> sourceNames)", "class_method_signature": "ClusterCheckpointPersistenceProvider.removeCheckpointLegacy(List<String> sourceNames)", "testcase": false, "constructor": false}, {"identifier": "removeCheckpoint", "parameters": "(List<String> sourceNames)", "modifiers": "@Override public", "return": "void", "signature": "void removeCheckpoint(List<String> sourceNames)", "full_signature": "@Override public void removeCheckpoint(List<String> sourceNames)", "class_method_signature": "ClusterCheckpointPersistenceProvider.removeCheckpoint(List<String> sourceNames)", "testcase": false, "constructor": false}, {"identifier": "getNumWritesSkipped", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getNumWritesSkipped()", "full_signature": "public long getNumWritesSkipped()", "class_method_signature": "ClusterCheckpointPersistenceProvider.getNumWritesSkipped()", "testcase": false, "constructor": false}], "file": "databus-client/databus-client-api/src/main/java/com/linkedin/databus/client/pub/ClusterCheckpointPersistenceProvider.java"}, "focal_method": {"identifier": "createCluster", "parameters": "(String zkAddr, String clusterName)", "modifiers": "static public", "return": "boolean", "body": "static public boolean createCluster(String zkAddr, String clusterName)\n    {\n        boolean created = false;\n        ZkClient zkClient = null;\n        try\n        {\n             zkClient = new ZkClient(zkAddr,\n                    ZkClient.DEFAULT_SESSION_TIMEOUT,\n                    ZkClient.DEFAULT_CONNECTION_TIMEOUT, new ZNRecordSerializer());\n            ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n            admin.addCluster(clusterName, false);\n            created=true;\n        }\n        catch (HelixException e)\n        {\n            LOG.warn(\"Warn! Cluster might already exist! \" + clusterName);\n            created=false;\n        }\n        finally\n        {\n            // close this connection\n            if (zkClient != null)\n            {\n                zkClient.close();\n            }\n        }\n        return created;\n    }", "signature": "boolean createCluster(String zkAddr, String clusterName)", "full_signature": "static public boolean createCluster(String zkAddr, String clusterName)", "class_method_signature": "ClusterCheckpointPersistenceProvider.createCluster(String zkAddr, String clusterName)", "testcase": false, "constructor": false, "invocations": ["addCluster", "warn", "close"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}