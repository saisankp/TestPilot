{"test_class": {"identifier": "TestThemisCpUtil", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "themis-coprocessor/src/test/java/org/apache/hadoop/hbase/themis/cp/TestThemisCpUtil.java"}, "test_case": {"identifier": "testSeperateLockAndWriteKvs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSeperateLockAndWriteKvs() {\n    List<KeyValue> kvs = new ArrayList<KeyValue>();\n    kvs.add(KEYVALUE);\n    kvs.add(getLockKv(KEYVALUE));\n    kvs.add(getPutKv(KEYVALUE));\n    Column column = ColumnUtil.getDeleteColumn(new Column(FAMILY, QUALIFIER));\n    KeyValue deleteKv = new KeyValue(ROW, column.getFamily(), column.getQualifier(), PREWRITE_TS, Type.Put, VALUE);\n    kvs.add(deleteKv);\n    Pair<List<KeyValue>, List<KeyValue>> result = ThemisCpUtil.seperateLockAndWriteKvs(kvs);\n    Assert.assertEquals(1, result.getFirst().size());\n    Assert.assertTrue(getLockKv(KEYVALUE).equals(result.getFirst().get(0)));\n    Assert.assertEquals(2, result.getSecond().size());\n    Assert.assertTrue(getPutKv(KEYVALUE).equals(result.getSecond().get(0)));\n    Assert.assertTrue(deleteKv.equals(result.getSecond().get(1)));\n    \n    result = ThemisCpUtil.seperateLockAndWriteKvs(null);\n    Assert.assertEquals(0, result.getFirst().size());\n    Assert.assertEquals(0, result.getSecond().size());\n  }", "signature": "void testSeperateLockAndWriteKvs()", "full_signature": "@Test public void testSeperateLockAndWriteKvs()", "class_method_signature": "TestThemisCpUtil.testSeperateLockAndWriteKvs()", "testcase": true, "constructor": false, "invocations": ["add", "add", "getLockKv", "add", "getPutKv", "getDeleteColumn", "getFamily", "getQualifier", "add", "seperateLockAndWriteKvs", "assertEquals", "size", "getFirst", "assertTrue", "equals", "getLockKv", "get", "getFirst", "assertEquals", "size", "getSecond", "assertTrue", "equals", "getPutKv", "get", "getSecond", "assertTrue", "equals", "get", "getSecond", "seperateLockAndWriteKvs", "assertEquals", "size", "getFirst", "assertEquals", "size", "getSecond"]}, "focal_class": {"identifier": "ThemisCpUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static Set<Class<? extends Filter>> ALLOWED_ROWKEY_FILTER_CLASSES = new HashSet<Class<? extends Filter>>();", "modifier": "public static", "type": "Set<Class<? extends Filter>>", "declarator": "ALLOWED_ROWKEY_FILTER_CLASSES = new HashSet<Class<? extends Filter>>()", "var_name": "ALLOWED_ROWKEY_FILTER_CLASSES"}, {"original_string": "public static Set<Class<? extends Filter>> DISALLOWD_FILTERS = new HashSet<Class<? extends Filter>>();", "modifier": "public static", "type": "Set<Class<? extends Filter>>", "declarator": "DISALLOWD_FILTERS = new HashSet<Class<? extends Filter>>()", "var_name": "DISALLOWD_FILTERS"}, {"original_string": "private static String disallowedFilterClassNameString = null;", "modifier": "private static", "type": "String", "declarator": "disallowedFilterClassNameString = null", "var_name": "disallowedFilterClassNameString"}], "methods": [{"identifier": "getDisallowedFilterClassNameString", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getDisallowedFilterClassNameString()", "full_signature": "public static String getDisallowedFilterClassNameString()", "class_method_signature": "ThemisCpUtil.getDisallowedFilterClassNameString()", "testcase": false, "constructor": false}, {"identifier": "processFilters", "parameters": "(Filter filter, FilterCallable callable)", "modifiers": "public static", "return": "void", "signature": "void processFilters(Filter filter, FilterCallable callable)", "full_signature": "public static void processFilters(Filter filter, FilterCallable callable)", "class_method_signature": "ThemisCpUtil.processFilters(Filter filter, FilterCallable callable)", "testcase": false, "constructor": false}, {"identifier": "moveRowkeyFiltersForWriteGet", "parameters": "(Get sourceGet, Get destGet)", "modifiers": "public static", "return": "void", "signature": "void moveRowkeyFiltersForWriteGet(Get sourceGet, Get destGet)", "full_signature": "public static void moveRowkeyFiltersForWriteGet(Get sourceGet, Get destGet)", "class_method_signature": "ThemisCpUtil.moveRowkeyFiltersForWriteGet(Get sourceGet, Get destGet)", "testcase": false, "constructor": false}, {"identifier": "moveRowkeyFiltersForWriteScan", "parameters": "(Scan sourceScan, Scan destScan)", "modifiers": "public static", "return": "void", "signature": "void moveRowkeyFiltersForWriteScan(Scan sourceScan, Scan destScan)", "full_signature": "public static void moveRowkeyFiltersForWriteScan(Scan sourceScan, Scan destScan)", "class_method_signature": "ThemisCpUtil.moveRowkeyFiltersForWriteScan(Scan sourceScan, Scan destScan)", "testcase": false, "constructor": false}, {"identifier": "addLockAndWriteColumnToGet", "parameters": "(Get userGet, Get internalGet, long startTs)", "modifiers": "public static", "return": "void", "signature": "void addLockAndWriteColumnToGet(Get userGet, Get internalGet, long startTs)", "full_signature": "public static void addLockAndWriteColumnToGet(Get userGet, Get internalGet, long startTs)", "class_method_signature": "ThemisCpUtil.addLockAndWriteColumnToGet(Get userGet, Get internalGet, long startTs)", "testcase": false, "constructor": false}, {"identifier": "removeNotRequiredLockColumns", "parameters": "(Map<byte[], NavigableSet<byte[]>> familyMap,\n      Result result)", "modifiers": "public static", "return": "Result", "signature": "Result removeNotRequiredLockColumns(Map<byte[], NavigableSet<byte[]>> familyMap,\n      Result result)", "full_signature": "public static Result removeNotRequiredLockColumns(Map<byte[], NavigableSet<byte[]>> familyMap,\n      Result result)", "class_method_signature": "ThemisCpUtil.removeNotRequiredLockColumns(Map<byte[], NavigableSet<byte[]>> familyMap,\n      Result result)", "testcase": false, "constructor": false}, {"identifier": "constructLockAndWriteGet", "parameters": "(Get userGet, long startTs)", "modifiers": "public static", "return": "Get", "signature": "Get constructLockAndWriteGet(Get userGet, long startTs)", "full_signature": "public static Get constructLockAndWriteGet(Get userGet, long startTs)", "class_method_signature": "ThemisCpUtil.constructLockAndWriteGet(Get userGet, long startTs)", "testcase": false, "constructor": false}, {"identifier": "prepareGet", "parameters": "(Get get, Collection<HColumnDescriptor> families)", "modifiers": "public static", "return": "void", "signature": "void prepareGet(Get get, Collection<HColumnDescriptor> families)", "full_signature": "public static void prepareGet(Get get, Collection<HColumnDescriptor> families)", "class_method_signature": "ThemisCpUtil.prepareGet(Get get, Collection<HColumnDescriptor> families)", "testcase": false, "constructor": false}, {"identifier": "prepareScan", "parameters": "(Scan scan, Collection<HColumnDescriptor> families)", "modifiers": "public static", "return": "void", "signature": "void prepareScan(Scan scan, Collection<HColumnDescriptor> families)", "full_signature": "public static void prepareScan(Scan scan, Collection<HColumnDescriptor> families)", "class_method_signature": "ThemisCpUtil.prepareScan(Scan scan, Collection<HColumnDescriptor> families)", "testcase": false, "constructor": false}, {"identifier": "constructLockAndWriteScan", "parameters": "(Scan userScan, long startTs)", "modifiers": "public static", "return": "Scan", "signature": "Scan constructLockAndWriteScan(Scan userScan, long startTs)", "full_signature": "public static Scan constructLockAndWriteScan(Scan userScan, long startTs)", "class_method_signature": "ThemisCpUtil.constructLockAndWriteScan(Scan userScan, long startTs)", "testcase": false, "constructor": false}, {"identifier": "addLockAndWriteColumnToScan", "parameters": "(Column column, Scan scan)", "modifiers": "public static", "return": "void", "signature": "void addLockAndWriteColumnToScan(Column column, Scan scan)", "full_signature": "public static void addLockAndWriteColumnToScan(Column column, Scan scan)", "class_method_signature": "ThemisCpUtil.addLockAndWriteColumnToScan(Column column, Scan scan)", "testcase": false, "constructor": false}, {"identifier": "constructDataGetByPutKvs", "parameters": "(List<KeyValue> putKvs, Filter filter)", "modifiers": "public static", "return": "Get", "signature": "Get constructDataGetByPutKvs(List<KeyValue> putKvs, Filter filter)", "full_signature": "public static Get constructDataGetByPutKvs(List<KeyValue> putKvs, Filter filter)", "class_method_signature": "ThemisCpUtil.constructDataGetByPutKvs(List<KeyValue> putKvs, Filter filter)", "testcase": false, "constructor": false}, {"identifier": "getPutKvs", "parameters": "(List<KeyValue> writeKvs)", "modifiers": "protected static", "return": "List<KeyValue>", "signature": "List<KeyValue> getPutKvs(List<KeyValue> writeKvs)", "full_signature": "protected static List<KeyValue> getPutKvs(List<KeyValue> writeKvs)", "class_method_signature": "ThemisCpUtil.getPutKvs(List<KeyValue> writeKvs)", "testcase": false, "constructor": false}, {"identifier": "getPutKvsForCommitDifferentFamily", "parameters": "(List<KeyValue> writeKvs)", "modifiers": "protected static", "return": "List<KeyValue>", "signature": "List<KeyValue> getPutKvsForCommitDifferentFamily(List<KeyValue> writeKvs)", "full_signature": "protected static List<KeyValue> getPutKvsForCommitDifferentFamily(List<KeyValue> writeKvs)", "class_method_signature": "ThemisCpUtil.getPutKvsForCommitDifferentFamily(List<KeyValue> writeKvs)", "testcase": false, "constructor": false}, {"identifier": "addWriteColumnToGet", "parameters": "(Column column, Get get)", "modifiers": "public static", "return": "void", "signature": "void addWriteColumnToGet(Column column, Get get)", "full_signature": "public static void addWriteColumnToGet(Column column, Get get)", "class_method_signature": "ThemisCpUtil.addWriteColumnToGet(Column column, Get get)", "testcase": false, "constructor": false}, {"identifier": "isLockResult", "parameters": "(Result result)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLockResult(Result result)", "full_signature": "public static boolean isLockResult(Result result)", "class_method_signature": "ThemisCpUtil.isLockResult(Result result)", "testcase": false, "constructor": false}, {"identifier": "seperateLockAndWriteKvs", "parameters": "(List<KeyValue> kvs)", "modifiers": "public static", "return": "Pair<List<KeyValue>, List<KeyValue>>", "signature": "Pair<List<KeyValue>, List<KeyValue>> seperateLockAndWriteKvs(List<KeyValue> kvs)", "full_signature": "public static Pair<List<KeyValue>, List<KeyValue>> seperateLockAndWriteKvs(List<KeyValue> kvs)", "class_method_signature": "ThemisCpUtil.seperateLockAndWriteKvs(List<KeyValue> kvs)", "testcase": false, "constructor": false}], "file": "themis-coprocessor/src/main/java/org/apache/hadoop/hbase/themis/cp/ThemisCpUtil.java"}, "focal_method": {"identifier": "seperateLockAndWriteKvs", "parameters": "(List<KeyValue> kvs)", "modifiers": "public static", "return": "Pair<List<KeyValue>, List<KeyValue>>", "body": "public static Pair<List<KeyValue>, List<KeyValue>> seperateLockAndWriteKvs(List<KeyValue> kvs) {\n    List<KeyValue> lockKvs = new ArrayList<KeyValue>();\n    List<KeyValue> writeKvs = new ArrayList<KeyValue>();\n    if (kvs != null) {\n      for (KeyValue kv : kvs) {\n        if (ColumnUtil.isLockColumn(kv.getFamily(), kv.getQualifier())) {\n          lockKvs.add(kv);\n        } else if (ColumnUtil.isWriteColumn(kv.getFamily(), kv.getQualifier())) {\n          writeKvs.add(kv);\n        }\n      }\n    }\n    return new Pair<List<KeyValue>, List<KeyValue>>(lockKvs, writeKvs);\n  }", "signature": "Pair<List<KeyValue>, List<KeyValue>> seperateLockAndWriteKvs(List<KeyValue> kvs)", "full_signature": "public static Pair<List<KeyValue>, List<KeyValue>> seperateLockAndWriteKvs(List<KeyValue> kvs)", "class_method_signature": "ThemisCpUtil.seperateLockAndWriteKvs(List<KeyValue> kvs)", "testcase": false, "constructor": false, "invocations": ["isLockColumn", "getFamily", "getQualifier", "add", "isWriteColumn", "getFamily", "getQualifier", "add"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}