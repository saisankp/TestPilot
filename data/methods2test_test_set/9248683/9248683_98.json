{"test_class": {"identifier": "SolrjPropertyResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SolrjPropertyResolver resolver = new SolrjPropertyResolver();", "modifier": "private final", "type": "SolrjPropertyResolver", "declarator": "resolver = new SolrjPropertyResolver()", "var_name": "resolver"}], "file": "seeking-solr/src/test/java/com/eharmony/matching/seeking/translator/solr/SolrjPropertyResolverTest.java"}, "test_case": {"identifier": "resolve_thisProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void resolve_thisProperty() {\n        assertEquals(\"thatProperty\",\n                resolver.resolve(\"thisProperty\", TestMappedClass.class));\n    }", "signature": "void resolve_thisProperty()", "full_signature": "@Test public void resolve_thisProperty()", "class_method_signature": "SolrjPropertyResolverTest.resolve_thisProperty()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "resolve"]}, "focal_class": {"identifier": "SolrjPropertyResolver", "superclass": "", "interfaces": "implements PropertyResolver", "fields": [{"original_string": "private static final Log log = LogFactoryImpl.getLog(SolrjPropertyResolver.class);", "modifier": "private static final", "type": "Log", "declarator": "log = LogFactoryImpl.getLog(SolrjPropertyResolver.class)", "var_name": "log"}], "methods": [{"identifier": "resolve", "parameters": "(String fieldName, Class<?> entityClass)", "modifiers": "@Override public", "return": "String", "signature": "String resolve(String fieldName, Class<?> entityClass)", "full_signature": "@Override public String resolve(String fieldName, Class<?> entityClass)", "class_method_signature": "SolrjPropertyResolver.resolve(String fieldName, Class<?> entityClass)", "testcase": false, "constructor": false}], "file": "seeking-solr/src/main/java/com/eharmony/matching/seeking/translator/solr/SolrjPropertyResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(String fieldName, Class<?> entityClass)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String resolve(String fieldName, Class<?> entityClass) {\n        try {\n            java.lang.reflect.Field field = entityClass.getDeclaredField(fieldName);\n            if (field.isAnnotationPresent(Field.class)) {\n                return field.getAnnotation(Field.class).value();\n            }\n        } catch (Exception e) {\n            log.warn(\"Unabled to resolve name for field: \" + fieldName, e);\n        }\n        return fieldName;\n    }", "signature": "String resolve(String fieldName, Class<?> entityClass)", "full_signature": "@Override public String resolve(String fieldName, Class<?> entityClass)", "class_method_signature": "SolrjPropertyResolver.resolve(String fieldName, Class<?> entityClass)", "testcase": false, "constructor": false, "invocations": ["getDeclaredField", "isAnnotationPresent", "value", "getAnnotation", "warn"]}, "repository": {"repo_id": 9248683, "url": "https://github.com/eHarmony/seeking", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 194, "license": "licensed"}}