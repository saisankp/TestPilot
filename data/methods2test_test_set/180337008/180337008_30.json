{"test_class": {"identifier": "ModulesServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ModulesService modulesService;", "modifier": "@Autowired\n    private", "type": "ModulesService", "declarator": "modulesService", "var_name": "modulesService"}, {"original_string": "@MockBean\n    private EurekaClient discoveryClient;", "modifier": "@MockBean\n    private", "type": "EurekaClient", "declarator": "discoveryClient", "var_name": "discoveryClient"}, {"original_string": "@MockBean\n    private DiscoveryUtils discoveryUtils;", "modifier": "@MockBean\n    private", "type": "DiscoveryUtils", "declarator": "discoveryUtils", "var_name": "discoveryUtils"}, {"original_string": "@Mock\n    private InstanceInfo instanceInfo;", "modifier": "@Mock\n    private", "type": "InstanceInfo", "declarator": "instanceInfo", "var_name": "instanceInfo"}, {"original_string": "@Mock\n    private Application application;", "modifier": "@Mock\n    private", "type": "Application", "declarator": "application", "var_name": "application"}, {"original_string": "@Rule\n    public WireMockRule wireMockRule = new WireMockRule(8089);", "modifier": "@Rule\n    public", "type": "WireMockRule", "declarator": "wireMockRule = new WireMockRule(8089)", "var_name": "wireMockRule"}], "file": "api-gateway/src/test/java/fr/sictiam/stela/apigateway/service/ModulesServiceTest.java"}, "test_case": {"identifier": "moduleHaveInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void moduleHaveInstance() {\n        ReflectionTestUtils.setField(this.instanceInfo, \"appName\", \"pes-service\");\n\n        List<InstanceInfo> instances = new ArrayList<>();\n        instances.add(this.instanceInfo);\n\n        given(discoveryClient.getApplication(matches(\"PES-SERVICE\"))).willReturn(application);\n        given(application.getInstances()).willReturn(instances);\n        boolean moduleHaveInstance = modulesService.moduleHaveInstance(\"pes\");\n\n        Assert.assertTrue(moduleHaveInstance);\n    }", "signature": "void moduleHaveInstance()", "full_signature": "@Test public void moduleHaveInstance()", "class_method_signature": "ModulesServiceTest.moduleHaveInstance()", "testcase": true, "constructor": false, "invocations": ["setField", "add", "willReturn", "given", "getApplication", "matches", "willReturn", "given", "getInstances", "moduleHaveInstance", "assertTrue"]}, "focal_class": {"identifier": "ModulesService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final EurekaClient discoveryClient;", "modifier": "private final", "type": "EurekaClient", "declarator": "discoveryClient", "var_name": "discoveryClient"}], "methods": [{"identifier": "ModulesService", "parameters": "(EurekaClient discoveryClient)", "modifiers": "public", "return": "", "signature": " ModulesService(EurekaClient discoveryClient)", "full_signature": "public  ModulesService(EurekaClient discoveryClient)", "class_method_signature": "ModulesService.ModulesService(EurekaClient discoveryClient)", "testcase": false, "constructor": true}, {"identifier": "moduleHaveInstance", "parameters": "(String moduleName)", "modifiers": "public", "return": "boolean", "signature": "boolean moduleHaveInstance(String moduleName)", "full_signature": "public boolean moduleHaveInstance(String moduleName)", "class_method_signature": "ModulesService.moduleHaveInstance(String moduleName)", "testcase": false, "constructor": false}, {"identifier": "activeBusinessApplications", "parameters": "()", "modifiers": "public", "return": "List<Application>", "signature": "List<Application> activeBusinessApplications()", "full_signature": "public List<Application> activeBusinessApplications()", "class_method_signature": "ModulesService.activeBusinessApplications()", "testcase": false, "constructor": false}, {"identifier": "extractServiceName", "parameters": "(String serviceName)", "modifiers": "public", "return": "String", "signature": "String extractServiceName(String serviceName)", "full_signature": "public String extractServiceName(String serviceName)", "class_method_signature": "ModulesService.extractServiceName(String serviceName)", "testcase": false, "constructor": false}], "file": "api-gateway/src/main/java/fr/sictiam/stela/apigateway/service/ModulesService.java"}, "focal_method": {"identifier": "moduleHaveInstance", "parameters": "(String moduleName)", "modifiers": "public", "return": "boolean", "body": "public boolean moduleHaveInstance(String moduleName) {\n        Application application = discoveryClient.getApplication(moduleName.concat(\"-service\").toUpperCase());\n        return application != null && !application.getInstances().isEmpty();\n    }", "signature": "boolean moduleHaveInstance(String moduleName)", "full_signature": "public boolean moduleHaveInstance(String moduleName)", "class_method_signature": "ModulesService.moduleHaveInstance(String moduleName)", "testcase": false, "constructor": false, "invocations": ["getApplication", "toUpperCase", "concat", "isEmpty", "getInstances"]}, "repository": {"repo_id": 180337008, "url": "https://github.com/SICTIAM/stela", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 7714, "license": "licensed"}}