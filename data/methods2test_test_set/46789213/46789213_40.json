{"test_class": {"identifier": "TestCompUInt128", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final BigInteger two = BigInteger.valueOf(2);", "modifier": "private final", "type": "BigInteger", "declarator": "two = BigInteger.valueOf(2)", "var_name": "two"}, {"original_string": "private final BigInteger twoTo32 = BigInteger.ONE.shiftLeft(32);", "modifier": "private final", "type": "BigInteger", "declarator": "twoTo32 = BigInteger.ONE.shiftLeft(32)", "var_name": "twoTo32"}, {"original_string": "private final BigInteger twoTo64 = BigInteger.ONE.shiftLeft(64);", "modifier": "private final", "type": "BigInteger", "declarator": "twoTo64 = BigInteger.ONE.shiftLeft(64)", "var_name": "twoTo64"}, {"original_string": "private final BigInteger twoTo128 = BigInteger.ONE.shiftLeft(128);", "modifier": "private final", "type": "BigInteger", "declarator": "twoTo128 = BigInteger.ONE.shiftLeft(128)", "var_name": "twoTo128"}], "file": "suite/spdz2k/src/test/java/dk/alexandra/fresco/suite/spdz2k/datatypes/TestCompUInt128.java"}, "test_case": {"identifier": "testAdd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAdd() {\n    assertEquals(\n        BigInteger.ZERO,\n        new CompUInt128(0).add(new CompUInt128(0)).toBigInteger()\n    );\n    assertEquals(\n        two,\n        new CompUInt128(1).add(new CompUInt128(1)).toBigInteger()\n    );\n    assertEquals(\n        twoTo32,\n        new CompUInt128(twoTo32).add(new CompUInt128(0)).toBigInteger()\n    );\n    assertEquals(\n        twoTo32.add(BigInteger.ONE),\n        new CompUInt128(twoTo32).add(new CompUInt128(1)).toBigInteger()\n    );\n    assertEquals(\n        twoTo64,\n        new CompUInt128(twoTo64).add(new CompUInt128(0)).toBigInteger()\n    );\n    assertEquals(\n        twoTo64.add(BigInteger.ONE),\n        new CompUInt128(twoTo64).add(new CompUInt128(1)).toBigInteger()\n    );\n    assertEquals(\n        twoTo128.subtract(BigInteger.ONE),\n        new CompUInt128(twoTo128.subtract(BigInteger.ONE)).add(new CompUInt128(0))\n            .toBigInteger()\n    );\n    assertEquals(\n        BigInteger.ZERO,\n        new CompUInt128(twoTo128.subtract(BigInteger.ONE))\n            .add(new CompUInt128(BigInteger.ONE)).toBigInteger()\n    );\n    assertEquals(\n        twoTo128.subtract(new BigInteger(\"10000000\")).add(twoTo32.add(twoTo64)).mod(twoTo128),\n        new CompUInt128(twoTo128.subtract(new BigInteger(\"10000000\")))\n            .add(new CompUInt128(twoTo32.add(twoTo64))).toBigInteger()\n    );\n    assertEquals(\n        twoTo32.add(twoTo64).mod(twoTo128),\n        new CompUInt128(twoTo32).add(new CompUInt128(twoTo64)).toBigInteger()\n    );\n  }", "signature": "void testAdd()", "full_signature": "@Test public void testAdd()", "class_method_signature": "TestCompUInt128.testAdd()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toBigInteger", "add", "assertEquals", "toBigInteger", "add", "assertEquals", "toBigInteger", "add", "assertEquals", "add", "toBigInteger", "add", "assertEquals", "toBigInteger", "add", "assertEquals", "add", "toBigInteger", "add", "assertEquals", "subtract", "toBigInteger", "add", "subtract", "assertEquals", "toBigInteger", "add", "subtract", "assertEquals", "mod", "add", "subtract", "add", "toBigInteger", "add", "subtract", "add", "assertEquals", "mod", "add", "toBigInteger", "add"]}, "focal_class": {"identifier": "CompUInt128", "superclass": "", "interfaces": "implements CompUInt<UInt64, UInt64, CompUInt128>", "fields": [{"original_string": "private static final CompUInt128 ONE = new CompUInt128(1);", "modifier": "private static final", "type": "CompUInt128", "declarator": "ONE = new CompUInt128(1)", "var_name": "ONE"}, {"original_string": "private final long high;", "modifier": "private final", "type": "long", "declarator": "high", "var_name": "high"}, {"original_string": "private final int mid;", "modifier": "private final", "type": "int", "declarator": "mid", "var_name": "mid"}, {"original_string": "private final int low;", "modifier": "private final", "type": "int", "declarator": "low", "var_name": "low"}], "methods": [{"identifier": "CompUInt128", "parameters": "(byte[] bytes)", "modifiers": "public", "return": "", "signature": " CompUInt128(byte[] bytes)", "full_signature": "public  CompUInt128(byte[] bytes)", "class_method_signature": "CompUInt128.CompUInt128(byte[] bytes)", "testcase": false, "constructor": true}, {"identifier": "CompUInt128", "parameters": "(byte[] bytes, boolean requiresPadding)", "modifiers": "public", "return": "", "signature": " CompUInt128(byte[] bytes, boolean requiresPadding)", "full_signature": "public  CompUInt128(byte[] bytes, boolean requiresPadding)", "class_method_signature": "CompUInt128.CompUInt128(byte[] bytes, boolean requiresPadding)", "testcase": false, "constructor": true}, {"identifier": "CompUInt128", "parameters": "(BigInteger value)", "modifiers": "public", "return": "", "signature": " CompUInt128(BigInteger value)", "full_signature": "public  CompUInt128(BigInteger value)", "class_method_signature": "CompUInt128.CompUInt128(BigInteger value)", "testcase": false, "constructor": true}, {"identifier": "CompUInt128", "parameters": "(long high, int mid, int low)", "modifiers": "", "return": "", "signature": " CompUInt128(long high, int mid, int low)", "full_signature": "  CompUInt128(long high, int mid, int low)", "class_method_signature": "CompUInt128.CompUInt128(long high, int mid, int low)", "testcase": false, "constructor": true}, {"identifier": "CompUInt128", "parameters": "(UInt64 value)", "modifiers": "", "return": "", "signature": " CompUInt128(UInt64 value)", "full_signature": "  CompUInt128(UInt64 value)", "class_method_signature": "CompUInt128.CompUInt128(UInt64 value)", "testcase": false, "constructor": true}, {"identifier": "CompUInt128", "parameters": "(long value)", "modifiers": "", "return": "", "signature": " CompUInt128(long value)", "full_signature": "  CompUInt128(long value)", "class_method_signature": "CompUInt128.CompUInt128(long value)", "testcase": false, "constructor": true}, {"identifier": "CompUInt128", "parameters": "(CompUInt128 other)", "modifiers": "", "return": "", "signature": " CompUInt128(CompUInt128 other)", "full_signature": "  CompUInt128(CompUInt128 other)", "class_method_signature": "CompUInt128.CompUInt128(CompUInt128 other)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(CompUInt128 other)", "modifiers": "@Override public", "return": "CompUInt128", "signature": "CompUInt128 add(CompUInt128 other)", "full_signature": "@Override public CompUInt128 add(CompUInt128 other)", "class_method_signature": "CompUInt128.add(CompUInt128 other)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(CompUInt128 other)", "modifiers": "@Override public", "return": "CompUInt128", "signature": "CompUInt128 multiply(CompUInt128 other)", "full_signature": "@Override public CompUInt128 multiply(CompUInt128 other)", "class_method_signature": "CompUInt128.multiply(CompUInt128 other)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(CompUInt128 other)", "modifiers": "@Override public", "return": "CompUInt128", "signature": "CompUInt128 subtract(CompUInt128 other)", "full_signature": "@Override public CompUInt128 subtract(CompUInt128 other)", "class_method_signature": "CompUInt128.subtract(CompUInt128 other)", "testcase": false, "constructor": false}, {"identifier": "negateUInt", "parameters": "()", "modifiers": "@Override public", "return": "CompUInt128", "signature": "CompUInt128 negateUInt()", "full_signature": "@Override public CompUInt128 negateUInt()", "class_method_signature": "CompUInt128.negateUInt()", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isZero()", "full_signature": "@Override public boolean isZero()", "class_method_signature": "CompUInt128.isZero()", "testcase": false, "constructor": false}, {"identifier": "toBigInteger", "parameters": "()", "modifiers": "@Override public", "return": "BigInteger", "signature": "BigInteger toBigInteger()", "full_signature": "@Override public BigInteger toBigInteger()", "class_method_signature": "CompUInt128.toBigInteger()", "testcase": false, "constructor": false}, {"identifier": "getLeastSignificant", "parameters": "()", "modifiers": "@Override public", "return": "UInt64", "signature": "UInt64 getLeastSignificant()", "full_signature": "@Override public UInt64 getLeastSignificant()", "class_method_signature": "CompUInt128.getLeastSignificant()", "testcase": false, "constructor": false}, {"identifier": "getMostSignificant", "parameters": "()", "modifiers": "@Override public", "return": "UInt64", "signature": "UInt64 getMostSignificant()", "full_signature": "@Override public UInt64 getMostSignificant()", "class_method_signature": "CompUInt128.getMostSignificant()", "testcase": false, "constructor": false}, {"identifier": "getLeastSignificantAsHigh", "parameters": "()", "modifiers": "@Override public", "return": "UInt64", "signature": "UInt64 getLeastSignificantAsHigh()", "full_signature": "@Override public UInt64 getLeastSignificantAsHigh()", "class_method_signature": "CompUInt128.getLeastSignificantAsHigh()", "testcase": false, "constructor": false}, {"identifier": "toLong", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long toLong()", "full_signature": "@Override public long toLong()", "class_method_signature": "CompUInt128.toLong()", "testcase": false, "constructor": false}, {"identifier": "toInt", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int toInt()", "full_signature": "@Override public int toInt()", "class_method_signature": "CompUInt128.toInt()", "testcase": false, "constructor": false}, {"identifier": "shiftLowIntoHigh", "parameters": "()", "modifiers": "@Override public", "return": "CompUInt128", "signature": "CompUInt128 shiftLowIntoHigh()", "full_signature": "@Override public CompUInt128 shiftLowIntoHigh()", "class_method_signature": "CompUInt128.shiftLowIntoHigh()", "testcase": false, "constructor": false}, {"identifier": "getLowBitLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getLowBitLength()", "full_signature": "@Override public int getLowBitLength()", "class_method_signature": "CompUInt128.getLowBitLength()", "testcase": false, "constructor": false}, {"identifier": "getHighBitLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getHighBitLength()", "full_signature": "@Override public int getHighBitLength()", "class_method_signature": "CompUInt128.getHighBitLength()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CompUInt128.toString()", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] toByteArray()", "full_signature": "@Override public byte[] toByteArray()", "class_method_signature": "CompUInt128.toByteArray()", "testcase": false, "constructor": false}, {"identifier": "extractValue", "parameters": "(FieldElement element)", "modifiers": "static", "return": "BigInteger", "signature": "BigInteger extractValue(FieldElement element)", "full_signature": "static BigInteger extractValue(FieldElement element)", "class_method_signature": "CompUInt128.extractValue(FieldElement element)", "testcase": false, "constructor": false}, {"identifier": "toByteArrayLong", "parameters": "(byte[] bytes, int start, long value)", "modifiers": "private", "return": "void", "signature": "void toByteArrayLong(byte[] bytes, int start, long value)", "full_signature": "private void toByteArrayLong(byte[] bytes, int start, long value)", "class_method_signature": "CompUInt128.toByteArrayLong(byte[] bytes, int start, long value)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(byte[] bytes, int start, int value)", "modifiers": "private", "return": "void", "signature": "void toByteArray(byte[] bytes, int start, int value)", "full_signature": "private void toByteArray(byte[] bytes, int start, int value)", "class_method_signature": "CompUInt128.toByteArray(byte[] bytes, int start, int value)", "testcase": false, "constructor": false}, {"identifier": "toLong", "parameters": "(byte[] bytes, int start)", "modifiers": "private static", "return": "long", "signature": "long toLong(byte[] bytes, int start)", "full_signature": "private static long toLong(byte[] bytes, int start)", "class_method_signature": "CompUInt128.toLong(byte[] bytes, int start)", "testcase": false, "constructor": false}, {"identifier": "toInt", "parameters": "(byte[] bytes, int start)", "modifiers": "private static", "return": "int", "signature": "int toInt(byte[] bytes, int start)", "full_signature": "private static int toInt(byte[] bytes, int start)", "class_method_signature": "CompUInt128.toInt(byte[] bytes, int start)", "testcase": false, "constructor": false}], "file": "suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/datatypes/CompUInt128.java"}, "focal_method": {"identifier": "add", "parameters": "(CompUInt128 other)", "modifiers": "@Override public", "return": "CompUInt128", "body": "@Override\n  public CompUInt128 add(CompUInt128 other) {\n    long newLow = Integer.toUnsignedLong(this.low) + Integer.toUnsignedLong(other.low);\n    long lowOverflow = newLow >>> 32;\n    long newMid = Integer.toUnsignedLong(this.mid)\n        + Integer.toUnsignedLong(other.mid)\n        + lowOverflow;\n    long midOverflow = newMid >>> 32;\n    long newHigh = this.high + other.high + midOverflow;\n    return new CompUInt128(newHigh, (int) newMid, (int) newLow);\n  }", "signature": "CompUInt128 add(CompUInt128 other)", "full_signature": "@Override public CompUInt128 add(CompUInt128 other)", "class_method_signature": "CompUInt128.add(CompUInt128 other)", "testcase": false, "constructor": false, "invocations": ["toUnsignedLong", "toUnsignedLong", "toUnsignedLong", "toUnsignedLong"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}