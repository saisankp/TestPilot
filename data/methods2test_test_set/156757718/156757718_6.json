{"test_class": {"identifier": "ItemMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper mapper = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private List<Aggregation> aggregations = Arrays.asList(\n            new Aggregation(1000L, \"2008-02-20 10:15:00\", 1L, null, 1L),\n            new Aggregation(1000L, \"2008-02-20 10:15:00.000\", 1L, 1L, null)\n    );", "modifier": "private", "type": "List<Aggregation>", "declarator": "aggregations = Arrays.asList(\n            new Aggregation(1000L, \"2008-02-20 10:15:00\", 1L, null, 1L),\n            new Aggregation(1000L, \"2008-02-20 10:15:00.000\", 1L, 1L, null)\n    )", "var_name": "aggregations"}, {"original_string": "private ItemMapper itemMapper = new ItemMapper();", "modifier": "private", "type": "ItemMapper", "declarator": "itemMapper = new ItemMapper()", "var_name": "itemMapper"}], "file": "fds-common-dynamodb/src/test/java/com/provectus/fds/dynamodb/ItemMapperTest.java"}, "test_case": {"identifier": "mergeItem", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mergeItem() throws Exception {\n        Aggregation aggregation1 = aggregations.get(0);\n        Aggregation aggregation2 = aggregations.get(1);\n        Item aggregation1_item = itemMapper.fromByteBuffer(serialize(aggregation1));\n        Item aggregation2_item = itemMapper.fromByteBuffer(serialize(aggregation2));\n        Item resultItem = itemMapper.mergeItem(itemMapper.primaryKey(aggregation1_item), aggregation1_item, aggregation2_item);\n        assertEquals(itemMapper.primaryKey(aggregation2_item), itemMapper.primaryKey(resultItem));\n        assertEquals(aggregation1.getClicks() + aggregation2.getClicks(), resultItem.getLong(\"clicks\"));\n        assertEquals(aggregation1.getBids() + aggregation2.getBids(), resultItem.getLong(\"bids\"));\n        assertEquals(aggregation1.getImps() + aggregation2.getImps(), resultItem.getLong(\"imps\"));\n    }", "signature": "void mergeItem()", "full_signature": "@Test public void mergeItem()", "class_method_signature": "ItemMapperTest.mergeItem()", "testcase": true, "constructor": false, "invocations": ["get", "get", "fromByteBuffer", "serialize", "fromByteBuffer", "serialize", "mergeItem", "primaryKey", "assertEquals", "primaryKey", "primaryKey", "assertEquals", "getClicks", "getClicks", "getLong", "assertEquals", "getBids", "getBids", "getLong", "assertEquals", "getImps", "getImps", "getLong"]}, "focal_class": {"identifier": "ItemMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String CAMPAIGN_TABLE_HASH_KEY = \"campaign_item_id\";", "modifier": "public static final", "type": "String", "declarator": "CAMPAIGN_TABLE_HASH_KEY = \"campaign_item_id\"", "var_name": "CAMPAIGN_TABLE_HASH_KEY"}, {"original_string": "public static final String PERIOD_TABLE_RANGE_KEY = \"period\";", "modifier": "public static final", "type": "String", "declarator": "PERIOD_TABLE_RANGE_KEY = \"period\"", "var_name": "PERIOD_TABLE_RANGE_KEY"}, {"original_string": "private final ObjectMapper objectMapper = new ObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper = new ObjectMapper()", "var_name": "objectMapper"}, {"original_string": "private static final DateTimeFormatter AWS_DATE =\n            new DateTimeFormatterBuilder().appendValue(YEAR, 4, 10,SignStyle.EXCEEDS_PAD)\n                    .appendLiteral('-')\n                    .appendValue(MONTH_OF_YEAR, 2)\n                    .appendLiteral('-')\n                    .appendValue(DAY_OF_MONTH, 2)\n                    .toFormatter(Locale.ENGLISH)\n                    .withZone(ZoneOffset.UTC);", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "AWS_DATE =\n            new DateTimeFormatterBuilder().appendValue(YEAR, 4, 10,SignStyle.EXCEEDS_PAD)\n                    .appendLiteral('-')\n                    .appendValue(MONTH_OF_YEAR, 2)\n                    .appendLiteral('-')\n                    .appendValue(DAY_OF_MONTH, 2)\n                    .toFormatter(Locale.ENGLISH)\n                    .withZone(ZoneOffset.UTC)", "var_name": "AWS_DATE"}, {"original_string": "private static final DateTimeFormatter AWS_DATE_TIME =\n            new DateTimeFormatterBuilder().appendValue(YEAR, 4, 10,SignStyle.EXCEEDS_PAD)\n                .appendLiteral('-')\n                .appendValue(MONTH_OF_YEAR, 2)\n                .appendLiteral('-')\n                .appendValue(DAY_OF_MONTH, 2)\n                .appendLiteral(' ')\n                .appendValue(HOUR_OF_DAY, 2)\n                .appendLiteral(':')\n                .appendValue(MINUTE_OF_HOUR, 2)\n                .appendLiteral(':')\n                .appendValue(SECOND_OF_MINUTE, 2)\n                .optionalStart()\n                .appendLiteral('.')\n                .appendValue(MILLI_OF_SECOND, 3)\n                .optionalEnd()\n                .toFormatter(Locale.ENGLISH)\n                .withZone(ZoneOffset.UTC);", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "AWS_DATE_TIME =\n            new DateTimeFormatterBuilder().appendValue(YEAR, 4, 10,SignStyle.EXCEEDS_PAD)\n                .appendLiteral('-')\n                .appendValue(MONTH_OF_YEAR, 2)\n                .appendLiteral('-')\n                .appendValue(DAY_OF_MONTH, 2)\n                .appendLiteral(' ')\n                .appendValue(HOUR_OF_DAY, 2)\n                .appendLiteral(':')\n                .appendValue(MINUTE_OF_HOUR, 2)\n                .appendLiteral(':')\n                .appendValue(SECOND_OF_MINUTE, 2)\n                .optionalStart()\n                .appendLiteral('.')\n                .appendValue(MILLI_OF_SECOND, 3)\n                .optionalEnd()\n                .toFormatter(Locale.ENGLISH)\n                .withZone(ZoneOffset.UTC)", "var_name": "AWS_DATE_TIME"}], "methods": [{"identifier": "key", "parameters": "(ByteBuffer byteBuffer)", "modifiers": "public", "return": "PrimaryKey", "signature": "PrimaryKey key(ByteBuffer byteBuffer)", "full_signature": "public PrimaryKey key(ByteBuffer byteBuffer)", "class_method_signature": "ItemMapper.key(ByteBuffer byteBuffer)", "testcase": false, "constructor": false}, {"identifier": "key", "parameters": "(JsonNode node)", "modifiers": "public", "return": "PrimaryKey", "signature": "PrimaryKey key(JsonNode node)", "full_signature": "public PrimaryKey key(JsonNode node)", "class_method_signature": "ItemMapper.key(JsonNode node)", "testcase": false, "constructor": false}, {"identifier": "primaryKey", "parameters": "(Item item)", "modifiers": "public", "return": "PrimaryKey", "signature": "PrimaryKey primaryKey(Item item)", "full_signature": "public PrimaryKey primaryKey(Item item)", "class_method_signature": "ItemMapper.primaryKey(Item item)", "testcase": false, "constructor": false}, {"identifier": "mergeItems", "parameters": "(List<ByteBuffer> list)", "modifiers": "public", "return": "Map<PrimaryKey, Item>", "signature": "Map<PrimaryKey, Item> mergeItems(List<ByteBuffer> list)", "full_signature": "public Map<PrimaryKey, Item> mergeItems(List<ByteBuffer> list)", "class_method_signature": "ItemMapper.mergeItems(List<ByteBuffer> list)", "testcase": false, "constructor": false}, {"identifier": "mergeItems", "parameters": "(Collection<Item> created, Collection<Item> read)", "modifiers": "public", "return": "List<Item>", "signature": "List<Item> mergeItems(Collection<Item> created, Collection<Item> read)", "full_signature": "public List<Item> mergeItems(Collection<Item> created, Collection<Item> read)", "class_method_signature": "ItemMapper.mergeItems(Collection<Item> created, Collection<Item> read)", "testcase": false, "constructor": false}, {"identifier": "mergeItem", "parameters": "(PrimaryKey primaryKey, Item newItem, Item oldItem)", "modifiers": "public", "return": "Item", "signature": "Item mergeItem(PrimaryKey primaryKey, Item newItem, Item oldItem)", "full_signature": "public Item mergeItem(PrimaryKey primaryKey, Item newItem, Item oldItem)", "class_method_signature": "ItemMapper.mergeItem(PrimaryKey primaryKey, Item newItem, Item oldItem)", "testcase": false, "constructor": false}, {"identifier": "mergeOneWay", "parameters": "(Item newItem, Item oldItem, Item resultItem, Set<String> visited)", "modifiers": "private", "return": "void", "signature": "void mergeOneWay(Item newItem, Item oldItem, Item resultItem, Set<String> visited)", "full_signature": "private void mergeOneWay(Item newItem, Item oldItem, Item resultItem, Set<String> visited)", "class_method_signature": "ItemMapper.mergeOneWay(Item newItem, Item oldItem, Item resultItem, Set<String> visited)", "testcase": false, "constructor": false}, {"identifier": "mergeValue", "parameters": "(Object newObject, Object oldValue)", "modifiers": "public", "return": "Object", "signature": "Object mergeValue(Object newObject, Object oldValue)", "full_signature": "public Object mergeValue(Object newObject, Object oldValue)", "class_method_signature": "ItemMapper.mergeValue(Object newObject, Object oldValue)", "testcase": false, "constructor": false}, {"identifier": "fromByteBuffer", "parameters": "(ByteBuffer byteBuffer)", "modifiers": "public", "return": "Item", "signature": "Item fromByteBuffer(ByteBuffer byteBuffer)", "full_signature": "public Item fromByteBuffer(ByteBuffer byteBuffer)", "class_method_signature": "ItemMapper.fromByteBuffer(ByteBuffer byteBuffer)", "testcase": false, "constructor": false}], "file": "fds-common-dynamodb/src/main/java/com/provectus/fds/dynamodb/ItemMapper.java"}, "focal_method": {"identifier": "mergeItem", "parameters": "(PrimaryKey primaryKey, Item newItem, Item oldItem)", "modifiers": "public", "return": "Item", "body": "public Item mergeItem(PrimaryKey primaryKey, Item newItem, Item oldItem) {\n        Item resultItem = new Item().withPrimaryKey(primaryKey);\n        Set<String> visited = new HashSet<>();\n        visited.add(CAMPAIGN_TABLE_HASH_KEY);\n        visited.add(PERIOD_TABLE_RANGE_KEY);\n\n        mergeOneWay(newItem, oldItem, resultItem, visited);\n        mergeOneWay(oldItem, newItem, resultItem, visited);\n\n        return resultItem;\n    }", "signature": "Item mergeItem(PrimaryKey primaryKey, Item newItem, Item oldItem)", "full_signature": "public Item mergeItem(PrimaryKey primaryKey, Item newItem, Item oldItem)", "class_method_signature": "ItemMapper.mergeItem(PrimaryKey primaryKey, Item newItem, Item oldItem)", "testcase": false, "constructor": false, "invocations": ["withPrimaryKey", "add", "add", "mergeOneWay", "mergeOneWay"]}, "repository": {"repo_id": 156757718, "url": "https://github.com/provectus/streaming-data-platform", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 12, "size": 616, "license": "licensed"}}