{"test_class": {"identifier": "WordChunkUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "10000sentencesapp/src/test/java/info/puzz/a10000sentences/utils/WordChunkUtilsTest.java"}, "test_case": {"identifier": "testSpaceBeforeQuestionMark", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSpaceBeforeQuestionMark() {\n        String sentence = \"Je li ?\";\n        List<WordChunk> chunks = WordChunkUtils.getWordChunks(sentence);\n        Assert.assertEquals(2, chunks.size());\n        Assert.assertEquals(\"Je\", chunks.get(0).word);\n        Assert.assertEquals(\"Je\", chunks.get(0).chunk);\n        Assert.assertEquals(\"li\", chunks.get(1).word);\n        Assert.assertEquals(\"li?\", chunks.get(1).chunk);\n    }", "signature": "void testSpaceBeforeQuestionMark()", "full_signature": "@Test public void testSpaceBeforeQuestionMark()", "class_method_signature": "WordChunkUtilsTest.testSpaceBeforeQuestionMark()", "testcase": true, "constructor": false, "invocations": ["getWordChunks", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "WordChunkUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SENTENCE_ENDING_INTERPUNCTIONS = \".?!\";", "modifier": "private static final", "type": "String", "declarator": "SENTENCE_ENDING_INTERPUNCTIONS = \".?!\"", "var_name": "SENTENCE_ENDING_INTERPUNCTIONS"}], "methods": [{"identifier": "WordChunkUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " WordChunkUtils()", "full_signature": "private  WordChunkUtils()", "class_method_signature": "WordChunkUtils.WordChunkUtils()", "testcase": false, "constructor": true}, {"identifier": "getWordChunks", "parameters": "(String string)", "modifiers": "public static", "return": "List<WordChunk>", "signature": "List<WordChunk> getWordChunks(String string)", "full_signature": "public static List<WordChunk> getWordChunks(String string)", "class_method_signature": "WordChunkUtils.getWordChunks(String string)", "testcase": false, "constructor": false}, {"identifier": "getWord", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String getWord(String str)", "full_signature": "public static String getWord(String str)", "class_method_signature": "WordChunkUtils.getWord(String str)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "WordChunkUtils.main(String[] args)", "testcase": false, "constructor": false}], "file": "10000sentencesapp/src/main/java/info/puzz/a10000sentences/utils/WordChunkUtils.java"}, "focal_method": {"identifier": "getWordChunks", "parameters": "(String string)", "modifiers": "public static", "return": "List<WordChunk>", "body": "public static List<WordChunk> getWordChunks(String string) {\n        string = string.replaceAll(\"\\\\s+\", \" \");\n\n        for (char c : SENTENCE_ENDING_INTERPUNCTIONS.toCharArray()) {\n            string = string.replace(\" \" + c, \"\" + c);\n        }\n\n        ArrayList<WordChunk> res = new ArrayList<>();\n        String[] parts = string.split(\"\\\\s+\");\n\n        for (int i = 0; i < parts.length; i++) {\n            String part = parts[i];\n            String word = getWord(part);\n            if (res.size() > 0 && StringUtils.isEmpty(word)) {\n                res.get(res.size() - 1).chunk += \" \" + part;\n            } else {\n                res.add(new WordChunk(part, word));\n            }\n        }\n\n        WordChunk firstChunk = res.get(0);\n        if (res.size() > 1 && StringUtils.isEmpty(firstChunk.word)) {\n            res.remove(0);\n            res.get(0).chunk = firstChunk.chunk + \" \" + res.get(0).chunk;\n        }\n\n        return res;\n    }", "signature": "List<WordChunk> getWordChunks(String string)", "full_signature": "public static List<WordChunk> getWordChunks(String string)", "class_method_signature": "WordChunkUtils.getWordChunks(String string)", "testcase": false, "constructor": false, "invocations": ["replaceAll", "toCharArray", "replace", "split", "getWord", "size", "isEmpty", "get", "size", "add", "get", "size", "isEmpty", "remove", "get", "get"]}, "repository": {"repo_id": 75375279, "url": "https://github.com/tkrajina/10000sentences", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 53, "size": 2233, "license": "licensed"}}