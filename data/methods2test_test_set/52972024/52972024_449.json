{"test_class": {"identifier": "PostgresFieldPathTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/Database-postgresql/PostgresSchema/src/test/java/info/smart_tools/smartactors/database_postgresql/postgres_schema/search/PostgresFieldPathTest.java"}, "test_case": {"identifier": "should_ThrowsException", "parameters": "()", "modifiers": "@Test(expected = QueryBuildException.class) public", "return": "void", "body": "@Test(expected = QueryBuildException.class)\n    public void should_ThrowsException() throws QueryBuildException {\n        String path = \"tes!t#%Incorrect_Path@#%$\";\n        PostgresFieldPath.fromString(path);\n    }", "signature": "void should_ThrowsException()", "full_signature": "@Test(expected = QueryBuildException.class) public void should_ThrowsException()", "class_method_signature": "PostgresFieldPathTest.should_ThrowsException()", "testcase": true, "constructor": false, "invocations": ["fromString"]}, "focal_class": {"identifier": "PostgresFieldPath", "superclass": "", "interfaces": "implements FieldPath", "fields": [{"original_string": "private String path;", "modifier": "private", "type": "String", "declarator": "path", "var_name": "path"}], "methods": [{"identifier": "PostgresFieldPath", "parameters": "(final String[] parts)", "modifiers": "private", "return": "", "signature": " PostgresFieldPath(final String[] parts)", "full_signature": "private  PostgresFieldPath(final String[] parts)", "class_method_signature": "PostgresFieldPath.PostgresFieldPath(final String[] parts)", "testcase": false, "constructor": true}, {"identifier": "PostgresFieldPath", "parameters": "(final String column, final String castFunction)", "modifiers": "private", "return": "", "signature": " PostgresFieldPath(final String column, final String castFunction)", "full_signature": "private  PostgresFieldPath(final String column, final String castFunction)", "class_method_signature": "PostgresFieldPath.PostgresFieldPath(final String column, final String castFunction)", "testcase": false, "constructor": true}, {"identifier": "toSQL", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toSQL()", "full_signature": "public String toSQL()", "class_method_signature": "PostgresFieldPath.toSQL()", "testcase": false, "constructor": false}, {"identifier": "fromString", "parameters": "(final String path)", "modifiers": "public static", "return": "PostgresFieldPath", "signature": "PostgresFieldPath fromString(final String path)", "full_signature": "public static PostgresFieldPath fromString(final String path)", "class_method_signature": "PostgresFieldPath.fromString(final String path)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Database-postgresql/PostgresSchema/src/main/java/info/smart_tools/smartactors/database_postgresql/postgres_schema/search/PostgresFieldPath.java"}, "focal_method": {"identifier": "fromString", "parameters": "(final String path)", "modifiers": "public static", "return": "PostgresFieldPath", "body": "public static PostgresFieldPath fromString(final String path)\n            throws QueryBuildException {\n        if (!FieldPath.isValid(path)) {\n            throw new QueryBuildException(\"Invalid field path: \" + path);\n        }\n\n        // TODO: add a special support for ID column (it depends on collection name)\n//        if (path.equals(\"id\")) {\n//            return new PostgresFieldPath(PostgresSchema.ID_COLUMN, Schema.ID_TO_JSONB_CAST_FUNCTION);\n//        }\n\n        return new PostgresFieldPath(FieldPath.splitParts(path));\n    }", "signature": "PostgresFieldPath fromString(final String path)", "full_signature": "public static PostgresFieldPath fromString(final String path)", "class_method_signature": "PostgresFieldPath.fromString(final String path)", "testcase": false, "constructor": false, "invocations": ["isValid", "splitParts"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}