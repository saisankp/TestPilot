{"test_class": {"identifier": "CollectionsUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "geoxygene-util/src/test/java/fr/ign/cogit/geoxygene/util/CollectionsUtilTest.java"}, "test_case": {"identifier": "testGetJaroWinklerDistance2Lists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetJaroWinklerDistance2Lists() {\n    List<Integer> list1 = new ArrayList<Integer>();\n    list1.add(1);\n    list1.add(2);\n    list1.add(3);\n    List<Integer> list2 = new ArrayList<Integer>();\n    list2.add(1);\n    list2.add(2);\n    list2.add(3);\n    List<Integer> list3 = new ArrayList<Integer>();\n    list3.add(2);\n    list3.add(2);\n    list3.add(3);\n    List<Integer> list4 = new ArrayList<Integer>();\n    list4.add(2);\n    list4.add(1);\n    list4.add(3);\n    List<Integer> list5 = new ArrayList<Integer>();\n    list5.add(2);\n    list5.add(1);\n    list5.add(2);\n\n    Assert.assertTrue(\n        CollectionsUtil.getJaroWinklerDistance2Lists(list1, list2, 0.1) == 0.0);\n    Assert.assertTrue(CollectionsUtil.getJaroWinklerDistance2Lists(list1, list3,\n        0.1) == 0.22222222222222232);\n    Assert.assertTrue(CollectionsUtil.getJaroWinklerDistance2Lists(list1, list4,\n        0.1) == 0.44444444444444453);\n    Assert.assertTrue(\n        CollectionsUtil.getJaroWinklerDistance2Lists(list1, list5, 0.1) == 1.0);\n  }", "signature": "void testGetJaroWinklerDistance2Lists()", "full_signature": "@Test public void testGetJaroWinklerDistance2Lists()", "class_method_signature": "CollectionsUtilTest.testGetJaroWinklerDistance2Lists()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "assertTrue", "getJaroWinklerDistance2Lists", "assertTrue", "getJaroWinklerDistance2Lists", "assertTrue", "getJaroWinklerDistance2Lists", "assertTrue", "getJaroWinklerDistance2Lists"]}, "focal_class": {"identifier": "CollectionsUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "sortByValue", "parameters": "(\n      Map<K, V> map)", "modifiers": "public static", "return": "LinkedHashMap<K, V>", "signature": "LinkedHashMap<K, V> sortByValue(\n      Map<K, V> map)", "full_signature": "public static LinkedHashMap<K, V> sortByValue(\n      Map<K, V> map)", "class_method_signature": "CollectionsUtil.sortByValue(\n      Map<K, V> map)", "testcase": false, "constructor": false}, {"identifier": "sortByValueDescending", "parameters": "(\n      Map<K, V> map)", "modifiers": "public static", "return": "LinkedHashMap<K, V>", "signature": "LinkedHashMap<K, V> sortByValueDescending(\n      Map<K, V> map)", "full_signature": "public static LinkedHashMap<K, V> sortByValueDescending(\n      Map<K, V> map)", "class_method_signature": "CollectionsUtil.sortByValueDescending(\n      Map<K, V> map)", "testcase": false, "constructor": false}, {"identifier": "getHammingDistance2Lists", "parameters": "(List<? extends Object> list1,\n      List<? extends Object> list2)", "modifiers": "public static", "return": "int", "signature": "int getHammingDistance2Lists(List<? extends Object> list1,\n      List<? extends Object> list2)", "full_signature": "public static int getHammingDistance2Lists(List<? extends Object> list1,\n      List<? extends Object> list2)", "class_method_signature": "CollectionsUtil.getHammingDistance2Lists(List<? extends Object> list1,\n      List<? extends Object> list2)", "testcase": false, "constructor": false}, {"identifier": "getHammingDistance2DiffLists", "parameters": "(List<? extends Object> list1,\n      List<? extends Object> list2)", "modifiers": "public static", "return": "int", "signature": "int getHammingDistance2DiffLists(List<? extends Object> list1,\n      List<? extends Object> list2)", "full_signature": "public static int getHammingDistance2DiffLists(List<? extends Object> list1,\n      List<? extends Object> list2)", "class_method_signature": "CollectionsUtil.getHammingDistance2DiffLists(List<? extends Object> list1,\n      List<? extends Object> list2)", "testcase": false, "constructor": false}, {"identifier": "getEditDistance2Lists", "parameters": "(List<? extends Object> list1,\n      List<? extends Object> list2)", "modifiers": "public static", "return": "int", "signature": "int getEditDistance2Lists(List<? extends Object> list1,\n      List<? extends Object> list2)", "full_signature": "public static int getEditDistance2Lists(List<? extends Object> list1,\n      List<? extends Object> list2)", "class_method_signature": "CollectionsUtil.getEditDistance2Lists(List<? extends Object> list1,\n      List<? extends Object> list2)", "testcase": false, "constructor": false}, {"identifier": "getJaroWinklerDistance2Lists", "parameters": "(\n      List<? extends Object> list1, List<? extends Object> list2,\n      double scalingFactor)", "modifiers": "public static", "return": "double", "signature": "double getJaroWinklerDistance2Lists(\n      List<? extends Object> list1, List<? extends Object> list2,\n      double scalingFactor)", "full_signature": "public static double getJaroWinklerDistance2Lists(\n      List<? extends Object> list1, List<? extends Object> list2,\n      double scalingFactor)", "class_method_signature": "CollectionsUtil.getJaroWinklerDistance2Lists(\n      List<? extends Object> list1, List<? extends Object> list2,\n      double scalingFactor)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(List<? extends Object> list1,\n      List<? extends Object> list2)", "modifiers": "private static", "return": "int[]", "signature": "int[] matches(List<? extends Object> list1,\n      List<? extends Object> list2)", "full_signature": "private static int[] matches(List<? extends Object> list1,\n      List<? extends Object> list2)", "class_method_signature": "CollectionsUtil.matches(List<? extends Object> list1,\n      List<? extends Object> list2)", "testcase": false, "constructor": false}], "file": "geoxygene-util/src/main/java/fr/ign/cogit/geoxygene/util/CollectionsUtil.java"}, "focal_method": {"identifier": "getJaroWinklerDistance2Lists", "parameters": "(\n      List<? extends Object> list1, List<? extends Object> list2,\n      double scalingFactor)", "modifiers": "public static", "return": "double", "body": "public static double getJaroWinklerDistance2Lists(\n      List<? extends Object> list1, List<? extends Object> list2,\n      double scalingFactor) {\n    if (list1 == null || list2 == null) {\n      throw new IllegalArgumentException(\"Lists must not be null\");\n    }\n\n    final int[] mtp = matches(list1, list2);\n    final double m = mtp[0];\n    if (m == 0) {\n      return 1D;\n    }\n    final double j = ((m / list1.size() + m / list2.size() + (m - mtp[1]) / m))\n        / 3;\n    final double jw = j < 0.7D ? j\n        : j + Math.min(scalingFactor, 1D / mtp[3]) * mtp[2] * (1D - j);\n    return 1 - jw;\n  }", "signature": "double getJaroWinklerDistance2Lists(\n      List<? extends Object> list1, List<? extends Object> list2,\n      double scalingFactor)", "full_signature": "public static double getJaroWinklerDistance2Lists(\n      List<? extends Object> list1, List<? extends Object> list2,\n      double scalingFactor)", "class_method_signature": "CollectionsUtil.getJaroWinklerDistance2Lists(\n      List<? extends Object> list1, List<? extends Object> list2,\n      double scalingFactor)", "testcase": false, "constructor": false, "invocations": ["matches", "size", "size", "min"]}, "repository": {"repo_id": 56582318, "url": "https://github.com/IGNF/geoxygene", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 22, "size": 323511, "license": "licensed"}}