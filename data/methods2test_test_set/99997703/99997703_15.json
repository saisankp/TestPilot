{"test_class": {"identifier": "CubicRootFinderTest", "superclass": "", "interfaces": "implements UtilityClassTest", "fields": [], "file": "OcavaCore/src/test/java/com/ocadotechnology/maths/CubicRootFinderTest.java"}, "test_case": {"identifier": "find_whenGivenQuadraticEquation_thenReturnsCorrectRoots", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void find_whenGivenQuadraticEquation_thenReturnsCorrectRoots() {\n        ImmutableList<Complex> roots = CubicRootFinder.find(0, 1, 2, 1);\n\n        ImmutableList<Pair<Double, Double>> expectedRoots = ImmutableList.of(\n                Pair.of(-1.0, 0.0),\n                Pair.of(-1.0, 0.0)\n        );\n        assertEquals(expectedRoots, roots);\n    }", "signature": "void find_whenGivenQuadraticEquation_thenReturnsCorrectRoots()", "full_signature": "@Test void find_whenGivenQuadraticEquation_thenReturnsCorrectRoots()", "class_method_signature": "CubicRootFinderTest.find_whenGivenQuadraticEquation_thenReturnsCorrectRoots()", "testcase": true, "constructor": false, "invocations": ["find", "of", "of", "of", "assertEquals"]}, "focal_class": {"identifier": "CubicRootFinder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "CubicRootFinder", "parameters": "()", "modifiers": "private", "return": "", "signature": " CubicRootFinder()", "full_signature": "private  CubicRootFinder()", "class_method_signature": "CubicRootFinder.CubicRootFinder()", "testcase": false, "constructor": true}, {"identifier": "find", "parameters": "(double a, double b, double c, double d)", "modifiers": "public static", "return": "ImmutableList<Complex>", "signature": "ImmutableList<Complex> find(double a, double b, double c, double d)", "full_signature": "public static ImmutableList<Complex> find(double a, double b, double c, double d)", "class_method_signature": "CubicRootFinder.find(double a, double b, double c, double d)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/maths/CubicRootFinder.java"}, "focal_method": {"identifier": "find", "parameters": "(double a, double b, double c, double d)", "modifiers": "public static", "return": "ImmutableList<Complex>", "body": "public static ImmutableList<Complex> find(double a, double b, double c, double d) {\n        if (a == 0) {\n            return QuadraticRootFinder.find(b, c, d);\n        }\n\n        ImmutableList.Builder<Complex> builder = ImmutableList.builder();\n\n        double f = ((3 * c / a) - (Math.pow(b, 2) / Math.pow(a, 2))) / 3d;\n        double g = ((2 * Math.pow(b, 3))/ Math.pow(a, 3) - (9 * b * c) / Math.pow(a, 2) + (27 * d / a)) / 27;\n        double h = (Math.pow(g, 2)/4) + (Math.pow(f, 3)/27);\n\n        if ( h > 0 ) {\n\n            double R = -(g/2) + Math.sqrt(h);\n            double S = Math.cbrt(R);\n            double T = -(g/2) - Math.sqrt(h);\n            double U = Math.cbrt(T);\n\n            Complex root1 = new Complex(S + U - (b / (3 * a)), 0d);\n            Complex root2 = new Complex(-(S + U)/2 - (b / (3 * a)), ((S-U) * Math.sqrt(3))/2d);\n            Complex root3 = new Complex(-(S + U)/2 - (b / (3 * a)), - ((S - U) * Math.sqrt(3))/2d);\n            return builder.add(root1).add(root2).add(root3).build();\n        }\n\n        if (f == 0 && g == 0 && h == 0) {\n            Complex root = new Complex(-Math.cbrt(d/a), 0d);\n            return builder.add(root).add(root).add(root).build();\n        }\n\n        double i = Math.sqrt(((Math.pow(g, 2)/4) - h));\n        double j = Math.cbrt(i);\n        double k = Math.acos(- (g / (2 * i)));\n        double l = - j;\n        double m = Math.cos(k /3);\n        double n = Math.sqrt(3) * Math.sin(k / 3);\n        double p =  -(b / (3 * a));\n\n        double rootOne = 2 * j * Math.cos(k/3) - (b/ (3 *a));\n        double rootTwo = l * (m + n) + p;\n        double rootThree = l * (m - n) + p;\n        return builder.add(new Complex(rootOne, 0d)).add(new Complex(rootTwo, 0d)).add(new Complex(rootThree, 0d)).build();\n    }", "signature": "ImmutableList<Complex> find(double a, double b, double c, double d)", "full_signature": "public static ImmutableList<Complex> find(double a, double b, double c, double d)", "class_method_signature": "CubicRootFinder.find(double a, double b, double c, double d)", "testcase": false, "constructor": false, "invocations": ["find", "builder", "pow", "pow", "pow", "pow", "pow", "pow", "pow", "sqrt", "cbrt", "sqrt", "cbrt", "sqrt", "sqrt", "build", "add", "add", "add", "cbrt", "build", "add", "add", "add", "sqrt", "pow", "cbrt", "acos", "cos", "sqrt", "sin", "cos", "build", "add", "add", "add"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}