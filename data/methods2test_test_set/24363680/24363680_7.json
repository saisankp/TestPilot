{"test_class": {"identifier": "BitcoinURITest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BitcoinURI testObject = null;", "modifier": "private", "type": "BitcoinURI", "declarator": "testObject = null", "var_name": "testObject"}, {"original_string": "private static final String MAINNET_GOOD_ADDRESS = CoinDefinition.UNITTEST_ADDRESS;", "modifier": "private static final", "type": "String", "declarator": "MAINNET_GOOD_ADDRESS = CoinDefinition.UNITTEST_ADDRESS", "var_name": "MAINNET_GOOD_ADDRESS"}], "file": "core/src/test/java/com/google/bitcoin/uri/BitcoinURITest.java"}, "test_case": {"identifier": "testBad_IncorrectAddressType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBad_IncorrectAddressType() {\n        try {\n            testObject = new BitcoinURI(TestNet3Params.get(), BitcoinURI.BITCOIN_SCHEME + \":\" + MAINNET_GOOD_ADDRESS);\n            fail(\"Expecting BitcoinURIParseException\");\n        } catch (BitcoinURIParseException e) {\n            assertTrue(e.getMessage().contains(\"Bad address\"));\n        }\n    }", "signature": "void testBad_IncorrectAddressType()", "full_signature": "@Test public void testBad_IncorrectAddressType()", "class_method_signature": "BitcoinURITest.testBad_IncorrectAddressType()", "testcase": true, "constructor": false, "invocations": ["get", "fail", "assertTrue", "contains", "getMessage"]}, "focal_class": {"identifier": "BitcoinURI", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(BitcoinURI.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(BitcoinURI.class)", "var_name": "log"}, {"original_string": "public static final String FIELD_MESSAGE = \"message\";", "modifier": "public static final", "type": "String", "declarator": "FIELD_MESSAGE = \"message\"", "var_name": "FIELD_MESSAGE"}, {"original_string": "public static final String FIELD_LABEL = \"label\";", "modifier": "public static final", "type": "String", "declarator": "FIELD_LABEL = \"label\"", "var_name": "FIELD_LABEL"}, {"original_string": "public static final String FIELD_AMOUNT = \"amount\";", "modifier": "public static final", "type": "String", "declarator": "FIELD_AMOUNT = \"amount\"", "var_name": "FIELD_AMOUNT"}, {"original_string": "public static final String FIELD_ADDRESS = \"address\";", "modifier": "public static final", "type": "String", "declarator": "FIELD_ADDRESS = \"address\"", "var_name": "FIELD_ADDRESS"}, {"original_string": "public static final String FIELD_PAYMENT_REQUEST_URL = \"r\";", "modifier": "public static final", "type": "String", "declarator": "FIELD_PAYMENT_REQUEST_URL = \"r\"", "var_name": "FIELD_PAYMENT_REQUEST_URL"}, {"original_string": "public static final String BITCOIN_SCHEME = CoinDefinition.coinURIScheme;", "modifier": "public static final", "type": "String", "declarator": "BITCOIN_SCHEME = CoinDefinition.coinURIScheme", "var_name": "BITCOIN_SCHEME"}, {"original_string": "private static final String ENCODED_SPACE_CHARACTER = \"%20\";", "modifier": "private static final", "type": "String", "declarator": "ENCODED_SPACE_CHARACTER = \"%20\"", "var_name": "ENCODED_SPACE_CHARACTER"}, {"original_string": "private static final String AMPERSAND_SEPARATOR = \"&\";", "modifier": "private static final", "type": "String", "declarator": "AMPERSAND_SEPARATOR = \"&\"", "var_name": "AMPERSAND_SEPARATOR"}, {"original_string": "private static final String QUESTION_MARK_SEPARATOR = \"?\";", "modifier": "private static final", "type": "String", "declarator": "QUESTION_MARK_SEPARATOR = \"?\"", "var_name": "QUESTION_MARK_SEPARATOR"}, {"original_string": "private final Map<String, Object> parameterMap = new LinkedHashMap<String, Object>();", "modifier": "private final", "type": "Map<String, Object>", "declarator": "parameterMap = new LinkedHashMap<String, Object>()", "var_name": "parameterMap"}], "methods": [{"identifier": "BitcoinURI", "parameters": "(String uri)", "modifiers": "public", "return": "", "signature": " BitcoinURI(String uri)", "full_signature": "public  BitcoinURI(String uri)", "class_method_signature": "BitcoinURI.BitcoinURI(String uri)", "testcase": false, "constructor": true}, {"identifier": "BitcoinURI", "parameters": "(@Nullable NetworkParameters params, String input)", "modifiers": "public", "return": "", "signature": " BitcoinURI(@Nullable NetworkParameters params, String input)", "full_signature": "public  BitcoinURI(@Nullable NetworkParameters params, String input)", "class_method_signature": "BitcoinURI.BitcoinURI(@Nullable NetworkParameters params, String input)", "testcase": false, "constructor": true}, {"identifier": "parseParameters", "parameters": "(@Nullable NetworkParameters params, String addressToken, String[] nameValuePairTokens)", "modifiers": "private", "return": "void", "signature": "void parseParameters(@Nullable NetworkParameters params, String addressToken, String[] nameValuePairTokens)", "full_signature": "private void parseParameters(@Nullable NetworkParameters params, String addressToken, String[] nameValuePairTokens)", "class_method_signature": "BitcoinURI.parseParameters(@Nullable NetworkParameters params, String addressToken, String[] nameValuePairTokens)", "testcase": false, "constructor": false}, {"identifier": "putWithValidation", "parameters": "(String key, Object value)", "modifiers": "private", "return": "void", "signature": "void putWithValidation(String key, Object value)", "full_signature": "private void putWithValidation(String key, Object value)", "class_method_signature": "BitcoinURI.putWithValidation(String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "getAddress", "parameters": "()", "modifiers": "@Nullable public", "return": "Address", "signature": "Address getAddress()", "full_signature": "@Nullable public Address getAddress()", "class_method_signature": "BitcoinURI.getAddress()", "testcase": false, "constructor": false}, {"identifier": "getAmount", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getAmount()", "full_signature": "public BigInteger getAmount()", "class_method_signature": "BitcoinURI.getAmount()", "testcase": false, "constructor": false}, {"identifier": "getLabel", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLabel()", "full_signature": "public String getLabel()", "class_method_signature": "BitcoinURI.getLabel()", "testcase": false, "constructor": false}, {"identifier": "getMessage", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMessage()", "full_signature": "public String getMessage()", "class_method_signature": "BitcoinURI.getMessage()", "testcase": false, "constructor": false}, {"identifier": "getPaymentRequestUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPaymentRequestUrl()", "full_signature": "public String getPaymentRequestUrl()", "class_method_signature": "BitcoinURI.getPaymentRequestUrl()", "testcase": false, "constructor": false}, {"identifier": "getParameterByName", "parameters": "(String name)", "modifiers": "public", "return": "Object", "signature": "Object getParameterByName(String name)", "full_signature": "public Object getParameterByName(String name)", "class_method_signature": "BitcoinURI.getParameterByName(String name)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BitcoinURI.toString()", "testcase": false, "constructor": false}, {"identifier": "convertToBitcoinURI", "parameters": "(Address address, BigInteger amount, String label, String message)", "modifiers": "public static", "return": "String", "signature": "String convertToBitcoinURI(Address address, BigInteger amount, String label, String message)", "full_signature": "public static String convertToBitcoinURI(Address address, BigInteger amount, String label, String message)", "class_method_signature": "BitcoinURI.convertToBitcoinURI(Address address, BigInteger amount, String label, String message)", "testcase": false, "constructor": false}, {"identifier": "convertToBitcoinURI", "parameters": "(String address, @Nullable BigInteger amount, @Nullable String label,\n                                             @Nullable String message)", "modifiers": "public static", "return": "String", "signature": "String convertToBitcoinURI(String address, @Nullable BigInteger amount, @Nullable String label,\n                                             @Nullable String message)", "full_signature": "public static String convertToBitcoinURI(String address, @Nullable BigInteger amount, @Nullable String label,\n                                             @Nullable String message)", "class_method_signature": "BitcoinURI.convertToBitcoinURI(String address, @Nullable BigInteger amount, @Nullable String label,\n                                             @Nullable String message)", "testcase": false, "constructor": false}, {"identifier": "encodeURLString", "parameters": "(String stringToEncode)", "modifiers": "static", "return": "String", "signature": "String encodeURLString(String stringToEncode)", "full_signature": "static String encodeURLString(String stringToEncode)", "class_method_signature": "BitcoinURI.encodeURLString(String stringToEncode)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/google/bitcoin/uri/BitcoinURI.java"}, "focal_method": {"identifier": "getMessage", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getMessage() {\n        return (String) parameterMap.get(FIELD_MESSAGE);\n    }", "signature": "String getMessage()", "full_signature": "public String getMessage()", "class_method_signature": "BitcoinURI.getMessage()", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 24363680, "url": "https://github.com/cannabiscoindev/cannabiscoinj", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 10126, "license": "licensed"}}