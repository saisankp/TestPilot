{"test_class": {"identifier": "JwtValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/jwt/JwtValidatorTest.java"}, "test_case": {"identifier": "validate_audience_success", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void validate_audience_success() throws Exception {\n    ToBeSignedJwt unverified =\n        new ToBeSignedJwt.Builder().setAlgorithm(\"HS256\").addAudience(\"foo\").build();\n    JwtValidator validator = new JwtValidator.Builder().setAudience(\"foo\").build();\n    Jwt token = validator.validate(\"HS256\", unverified);\n\n    assertThat(token.getAudiences()).containsExactly(\"foo\");\n  }", "signature": "void validate_audience_success()", "full_signature": "@Test public void validate_audience_success()", "class_method_signature": "JwtValidatorTest.validate_audience_success()", "testcase": true, "constructor": false, "invocations": ["build", "addAudience", "setAlgorithm", "build", "setAudience", "validate", "containsExactly", "assertThat", "getAudiences"]}, "focal_class": {"identifier": "JwtValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Duration MAX_CLOCK_SKEW = Duration.ofMinutes(10);", "modifier": "private static final", "type": "Duration", "declarator": "MAX_CLOCK_SKEW = Duration.ofMinutes(10)", "var_name": "MAX_CLOCK_SKEW"}, {"original_string": "@SuppressWarnings(\"Immutable\") // We do not mutate the header.\n  private final JSONObject header;", "modifier": "@SuppressWarnings(\"Immutable\") // We do not mutate the header.\n  private final", "type": "JSONObject", "declarator": "header", "var_name": "header"}, {"original_string": "@SuppressWarnings(\"Immutable\") // We do not mutate the payload.\n  private final JSONObject payload;", "modifier": "@SuppressWarnings(\"Immutable\") // We do not mutate the payload.\n  private final", "type": "JSONObject", "declarator": "payload", "var_name": "payload"}, {"original_string": "@SuppressWarnings(\"Immutable\") // We do not mutate the clock.\n  private final Clock clock;", "modifier": "@SuppressWarnings(\"Immutable\") // We do not mutate the clock.\n  private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private final Duration clockSkew;", "modifier": "private final", "type": "Duration", "declarator": "clockSkew", "var_name": "clockSkew"}], "methods": [{"identifier": "JwtValidator", "parameters": "(Builder builder)", "modifiers": "private", "return": "", "signature": " JwtValidator(Builder builder)", "full_signature": "private  JwtValidator(Builder builder)", "class_method_signature": "JwtValidator.JwtValidator(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "getHeader", "parameters": "(String name)", "modifiers": "private", "return": "String", "signature": "String getHeader(String name)", "full_signature": "private String getHeader(String name)", "class_method_signature": "JwtValidator.getHeader(String name)", "testcase": false, "constructor": false}, {"identifier": "getClaim", "parameters": "(String name)", "modifiers": "private", "return": "Object", "signature": "Object getClaim(String name)", "full_signature": "private Object getClaim(String name)", "class_method_signature": "JwtValidator.getClaim(String name)", "testcase": false, "constructor": false}, {"identifier": "getClock", "parameters": "()", "modifiers": "", "return": "Clock", "signature": "Clock getClock()", "full_signature": " Clock getClock()", "class_method_signature": "JwtValidator.getClock()", "testcase": false, "constructor": false}, {"identifier": "getClockSkew", "parameters": "()", "modifiers": "", "return": "Duration", "signature": "Duration getClockSkew()", "full_signature": " Duration getClockSkew()", "class_method_signature": "JwtValidator.getClockSkew()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(String algorithm, ToBeSignedJwt target)", "modifiers": "", "return": "Jwt", "signature": "Jwt validate(String algorithm, ToBeSignedJwt target)", "full_signature": " Jwt validate(String algorithm, ToBeSignedJwt target)", "class_method_signature": "JwtValidator.validate(String algorithm, ToBeSignedJwt target)", "testcase": false, "constructor": false}, {"identifier": "validateTimestampClaims", "parameters": "(ToBeSignedJwt target)", "modifiers": "private", "return": "void", "signature": "void validateTimestampClaims(ToBeSignedJwt target)", "full_signature": "private void validateTimestampClaims(ToBeSignedJwt target)", "class_method_signature": "JwtValidator.validateTimestampClaims(ToBeSignedJwt target)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/jwt/JwtValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(String algorithm, ToBeSignedJwt target)", "modifiers": "", "return": "Jwt", "body": "Jwt validate(String algorithm, ToBeSignedJwt target)\n      throws InvalidAlgorithmParameterException, JwtExpiredException, JwtNotBeforeException,\n          JwtInvalidException {\n    validateTimestampClaims(target);\n\n    if (!target.getAlgorithm().equals(algorithm)) {\n      throw new InvalidAlgorithmParameterException(\n          String.format(\n              \"invalid algorithm; expected %s, got %s\", algorithm, target.getAlgorithm()));\n    }\n\n    @SuppressWarnings(\"unchecked\") // keys() returns Iterator, not Iterator<String>\n    Iterator<String> headerIterator = this.header.keys();\n    while (headerIterator.hasNext()) {\n      String name = headerIterator.next();\n      if (name.equals(JwtNames.HEADER_ALGORITHM)) {\n        continue;\n      }\n      String value = target.getHeader(name);\n      if (value == null || !value.equals(this.getHeader(name))) {\n        throw new JwtInvalidException(\n            String.format(\n                \"invalid JWT; expected header '%s' with value %s, but got %s\",\n                name, value, this.getHeader(name)));\n      }\n    }\n\n    @SuppressWarnings(\"unchecked\") // keys() returns Iterator, not Iterator<String>\n    Iterator<String> payloadIterator = this.payload.keys();\n    while (payloadIterator.hasNext()) {\n      String name = payloadIterator.next();\n      if (name.equals(JwtNames.CLAIM_AUDIENCE)) {\n        // This is checked below.\n        continue;\n      }\n      Object value = target.getClaim(name);\n      if (value == null || !value.equals(this.getClaim(name))) {\n        throw new JwtInvalidException(\n            String.format(\n                \"invalid JWT; expected claim '%s' with value %s, but got %s\",\n                name, value, this.getClaim(name)));\n      }\n    }\n\n    // Check that the validator's audience is in the list of claimed audiences.\n    List<String> audiences = target.getAudiences();\n    String audience = (String) this.getClaim(JwtNames.CLAIM_AUDIENCE);\n    if ((audiences == null && audience != null)\n        || (audiences != null && !audiences.contains(audience))) {\n      throw new JwtInvalidException(\n          String.format(\n              \"invalid JWT; cannot find the expected audience %s in claimed audiences %s\",\n              audience, audiences));\n    }\n\n    return new Jwt(target.getHeader(), target.getPayload(), this.clock, this.clockSkew);\n  }", "signature": "Jwt validate(String algorithm, ToBeSignedJwt target)", "full_signature": " Jwt validate(String algorithm, ToBeSignedJwt target)", "class_method_signature": "JwtValidator.validate(String algorithm, ToBeSignedJwt target)", "testcase": false, "constructor": false, "invocations": ["validateTimestampClaims", "equals", "getAlgorithm", "format", "getAlgorithm", "keys", "hasNext", "next", "equals", "getHeader", "equals", "getHeader", "format", "getHeader", "keys", "hasNext", "next", "equals", "getClaim", "equals", "getClaim", "format", "getClaim", "getAudiences", "getClaim", "contains", "format", "getHeader", "getPayload"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}