{"test_class": {"identifier": "RedisProtocolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();", "modifier": "private", "type": "Protocol", "declarator": "protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension()", "var_name": "protocol"}, {"original_string": "private ProxyFactory proxy = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();", "modifier": "private", "type": "ProxyFactory", "declarator": "proxy = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension()", "var_name": "proxy"}, {"original_string": "private RedisServer redisServer;", "modifier": "private", "type": "RedisServer", "declarator": "redisServer", "var_name": "redisServer"}, {"original_string": "private URL registryUrl;", "modifier": "private", "type": "URL", "declarator": "registryUrl", "var_name": "registryUrl"}, {"original_string": "@Rule\n    public TestName name = new TestName();", "modifier": "@Rule\n    public", "type": "TestName", "declarator": "name = new TestName()", "var_name": "name"}], "file": "dubbo-rpc/dubbo-rpc-redis/src/test/java/com/alibaba/dubbo/rpc/protocol/redis/RedisProtocolTest.java"}, "test_case": {"identifier": "testExport", "parameters": "()", "modifiers": "@Test(expected = UnsupportedOperationException.class) public", "return": "void", "body": "@Test(expected = UnsupportedOperationException.class)\n    public void testExport() {\n        protocol.export(protocol.refer(IDemoService.class, registryUrl));\n    }", "signature": "void testExport()", "full_signature": "@Test(expected = UnsupportedOperationException.class) public void testExport()", "class_method_signature": "RedisProtocolTest.testExport()", "testcase": true, "constructor": false, "invocations": ["export", "refer"]}, "focal_class": {"identifier": "RedisProtocol", "superclass": "extends AbstractProtocol", "interfaces": "", "fields": [{"original_string": "public static final int DEFAULT_PORT = 6379;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_PORT = 6379", "var_name": "DEFAULT_PORT"}], "methods": [{"identifier": "getDefaultPort", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDefaultPort()", "full_signature": "@Override public int getDefaultPort()", "class_method_signature": "RedisProtocol.getDefaultPort()", "testcase": false, "constructor": false}, {"identifier": "export", "parameters": "(final Invoker<T> invoker)", "modifiers": "@Override public", "return": "Exporter<T>", "signature": "Exporter<T> export(final Invoker<T> invoker)", "full_signature": "@Override public Exporter<T> export(final Invoker<T> invoker)", "class_method_signature": "RedisProtocol.export(final Invoker<T> invoker)", "testcase": false, "constructor": false}, {"identifier": "getSerialization", "parameters": "(URL url)", "modifiers": "private", "return": "Serialization", "signature": "Serialization getSerialization(URL url)", "full_signature": "private Serialization getSerialization(URL url)", "class_method_signature": "RedisProtocol.getSerialization(URL url)", "testcase": false, "constructor": false}, {"identifier": "refer", "parameters": "(final Class<T> type, final URL url)", "modifiers": "@Override public", "return": "Invoker<T>", "signature": "Invoker<T> refer(final Class<T> type, final URL url)", "full_signature": "@Override public Invoker<T> refer(final Class<T> type, final URL url)", "class_method_signature": "RedisProtocol.refer(final Class<T> type, final URL url)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-redis/src/main/java/com/alibaba/dubbo/rpc/protocol/redis/RedisProtocol.java"}, "focal_method": {"identifier": "export", "parameters": "(final Invoker<T> invoker)", "modifiers": "@Override public", "return": "Exporter<T>", "body": "@Override\n    public <T> Exporter<T> export(final Invoker<T> invoker) throws RpcException {\n        throw new UnsupportedOperationException(\"Unsupported export redis service. url: \" + invoker.getUrl());\n    }", "signature": "Exporter<T> export(final Invoker<T> invoker)", "full_signature": "@Override public Exporter<T> export(final Invoker<T> invoker)", "class_method_signature": "RedisProtocol.export(final Invoker<T> invoker)", "testcase": false, "constructor": false, "invocations": ["getUrl"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}