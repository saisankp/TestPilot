{"test_class": {"identifier": "MongoQueryExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ID_PROPERTY_NAME = \"id\";", "modifier": "private static final", "type": "String", "declarator": "ID_PROPERTY_NAME = \"id\"", "var_name": "ID_PROPERTY_NAME"}, {"original_string": "private static final String NAME_PROPERTY_NAME = \"name\";", "modifier": "private static final", "type": "String", "declarator": "NAME_PROPERTY_NAME = \"name\"", "var_name": "NAME_PROPERTY_NAME"}, {"original_string": "private final Class<TestClass> entityClass = TestClass.class;", "modifier": "private final", "type": "Class<TestClass>", "declarator": "entityClass = TestClass.class", "var_name": "entityClass"}, {"original_string": "private final DB db = mock(DB.class);", "modifier": "private final", "type": "DB", "declarator": "db = mock(DB.class)", "var_name": "db"}, {"original_string": "private final DBCollection collection = mock(DBCollection.class);", "modifier": "private final", "type": "DBCollection", "declarator": "collection = mock(DBCollection.class)", "var_name": "collection"}, {"original_string": "private final DBDecoderFactory dbDecoderFactory = mock(DBDecoderFactory.class);", "modifier": "private final", "type": "DBDecoderFactory", "declarator": "dbDecoderFactory = mock(DBDecoderFactory.class)", "var_name": "dbDecoderFactory"}, {"original_string": "private final DatastoreImpl datastore = mock(DatastoreImpl.class);", "modifier": "private final", "type": "DatastoreImpl", "declarator": "datastore = mock(DatastoreImpl.class)", "var_name": "datastore"}, {"original_string": "private final MongoQueryTranslator queryTranslator = mock(MongoQueryTranslator.class);", "modifier": "private final", "type": "MongoQueryTranslator", "declarator": "queryTranslator = mock(MongoQueryTranslator.class)", "var_name": "queryTranslator"}, {"original_string": "private final EntityResolver entityResolver = mock(EntityResolver.class);", "modifier": "private final", "type": "EntityResolver", "declarator": "entityResolver = mock(EntityResolver.class)", "var_name": "entityResolver"}, {"original_string": "private final TestMongoQueryExecutor executor = new TestMongoQueryExecutor(\n            db, queryTranslator, entityResolver);", "modifier": "private final", "type": "TestMongoQueryExecutor", "declarator": "executor = new TestMongoQueryExecutor(\n            db, queryTranslator, entityResolver)", "var_name": "executor"}, {"original_string": "private final static WriteResult writeResult = mock(WriteResult.class);", "modifier": "private final static", "type": "WriteResult", "declarator": "writeResult = mock(WriteResult.class)", "var_name": "writeResult"}, {"original_string": "private final static CommandResult lastError = mock(CommandResult.class);", "modifier": "private final static", "type": "CommandResult", "declarator": "lastError = mock(CommandResult.class)", "var_name": "lastError"}, {"original_string": "private final Query<TestClass, TestClass> query = QueryBuilder\n            .builderFor(this.entityClass)\n            .add(Restrictions.eq(NAME_PROPERTY_NAME, \"test\"))\n            .build();", "modifier": "private final", "type": "Query<TestClass, TestClass>", "declarator": "query = QueryBuilder\n            .builderFor(this.entityClass)\n            .add(Restrictions.eq(NAME_PROPERTY_NAME, \"test\"))\n            .build()", "var_name": "query"}, {"original_string": "private final DBObject queryObject = new BasicDBObject();", "modifier": "private final", "type": "DBObject", "declarator": "queryObject = new BasicDBObject()", "var_name": "queryObject"}, {"original_string": "private final Query<TestClass, Long> idQuery = QueryBuilder\n            .builderFor(entityClass, Long.class, ID_PROPERTY_NAME)\n            .build();", "modifier": "private final", "type": "Query<TestClass, Long>", "declarator": "idQuery = QueryBuilder\n            .builderFor(entityClass, Long.class, ID_PROPERTY_NAME)\n            .build()", "var_name": "idQuery"}, {"original_string": "private final DBObject idQueryObject = new BasicDBObject();", "modifier": "private final", "type": "DBObject", "declarator": "idQueryObject = new BasicDBObject()", "var_name": "idQueryObject"}, {"original_string": "private final Query<TestClass, TestClassTuple> tupleQuery = QueryBuilder\n            .builderFor(entityClass, TestClassTuple.class, ID_PROPERTY_NAME)\n            .build();", "modifier": "private final", "type": "Query<TestClass, TestClassTuple>", "declarator": "tupleQuery = QueryBuilder\n            .builderFor(entityClass, TestClassTuple.class, ID_PROPERTY_NAME)\n            .build()", "var_name": "tupleQuery"}, {"original_string": "private final DBObject tupleQueryObject = new BasicDBObject();", "modifier": "private final", "type": "DBObject", "declarator": "tupleQueryObject = new BasicDBObject()", "var_name": "tupleQueryObject"}, {"original_string": "private final Query<TestClass, TestClassTuple2> tuple2Query = QueryBuilder\n            .builderFor(entityClass, TestClassTuple2.class, ID_PROPERTY_NAME)\n            .build();", "modifier": "private final", "type": "Query<TestClass, TestClassTuple2>", "declarator": "tuple2Query = QueryBuilder\n            .builderFor(entityClass, TestClassTuple2.class, ID_PROPERTY_NAME)\n            .build()", "var_name": "tuple2Query"}, {"original_string": "private final DBObject tuple2QueryObject = new BasicDBObject();", "modifier": "private final", "type": "DBObject", "declarator": "tuple2QueryObject = new BasicDBObject()", "var_name": "tuple2QueryObject"}, {"original_string": "private final TestClass t1 = new TestClass(1L, \"test1\", 1, 2);", "modifier": "private final", "type": "TestClass", "declarator": "t1 = new TestClass(1L, \"test1\", 1, 2)", "var_name": "t1"}, {"original_string": "private final TestClass[] tests = {\n            new TestClass(1L, \"test1\", 1, 2),\n            new TestClass(2L, \"test2\", 3, 4),\n            new TestClass(3L, \"test3\", 5, 6),\n            new TestClass(4L, \"test4\", 7, 8),\n            new TestClass(5L, \"test5\", 9, 0),\n            new TestClass(6L, \"test6\", 1, 2),\n    };", "modifier": "private final", "type": "TestClass[]", "declarator": "tests = {\n            new TestClass(1L, \"test1\", 1, 2),\n            new TestClass(2L, \"test2\", 3, 4),\n            new TestClass(3L, \"test3\", 5, 6),\n            new TestClass(4L, \"test4\", 7, 8),\n            new TestClass(5L, \"test5\", 9, 0),\n            new TestClass(6L, \"test6\", 1, 2),\n    }", "var_name": "tests"}, {"original_string": "private final Long[] ids = new Long[tests.length];", "modifier": "private final", "type": "Long[]", "declarator": "ids = new Long[tests.length]", "var_name": "ids"}], "file": "seeking-mongo/src/test/java/com/eharmony/matching/seeking/executor/mongodb/MongoQueryExecutorTest.java"}, "test_case": {"identifier": "save", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void save() {\n        final TestClass saved = executor.save(t1);\n        assertEquals(t1, saved);\n    }", "signature": "void save()", "full_signature": "@Test public void save()", "class_method_signature": "MongoQueryExecutorTest.save()", "testcase": true, "constructor": false, "invocations": ["save", "assertEquals"]}, "focal_class": {"identifier": "MongoQueryExecutor", "superclass": "", "interfaces": "implements QueryExecutor", "fields": [{"original_string": "private static final Log log = LogFactoryImpl.getLog(MongoQueryExecutor.class);", "modifier": "private static final", "type": "Log", "declarator": "log = LogFactoryImpl.getLog(MongoQueryExecutor.class)", "var_name": "log"}, {"original_string": "private static final int DEFAULT_MONGODB_BATCH_SIZE = 0;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_MONGODB_BATCH_SIZE = 0", "var_name": "DEFAULT_MONGODB_BATCH_SIZE"}, {"original_string": "private final MongoQueryTranslator queryTranslator;", "modifier": "private final", "type": "MongoQueryTranslator", "declarator": "queryTranslator", "var_name": "queryTranslator"}, {"original_string": "private final Mapper mapper;", "modifier": "private final", "type": "Mapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private final EntityCache cache;", "modifier": "private final", "type": "EntityCache", "declarator": "cache", "var_name": "cache"}, {"original_string": "private final DB db;", "modifier": "private final", "type": "DB", "declarator": "db", "var_name": "db"}, {"original_string": "private final EntityResolver entityResolver;", "modifier": "private final", "type": "EntityResolver", "declarator": "entityResolver", "var_name": "entityResolver"}, {"original_string": "private final Map<Class<?>,DBCollection> collections;", "modifier": "private final", "type": "Map<Class<?>,DBCollection>", "declarator": "collections", "var_name": "collections"}, {"original_string": "private final WriteConcern writeConcern;", "modifier": "private final", "type": "WriteConcern", "declarator": "writeConcern", "var_name": "writeConcern"}, {"original_string": "private final Set<Class<?>> mappedClasses = Sets.newHashSet();", "modifier": "private final", "type": "Set<Class<?>>", "declarator": "mappedClasses = Sets.newHashSet()", "var_name": "mappedClasses"}, {"original_string": "private final int batchSize;", "modifier": "private final", "type": "int", "declarator": "batchSize", "var_name": "batchSize"}], "methods": [{"identifier": "MongoQueryExecutor", "parameters": "(\n            DB db,\n            WriteConcern writeConcern,\n            MongoQueryTranslator queryTranslator,\n            EntityResolver entityResolver,\n            final int batchSize)", "modifiers": "public", "return": "", "signature": " MongoQueryExecutor(\n            DB db,\n            WriteConcern writeConcern,\n            MongoQueryTranslator queryTranslator,\n            EntityResolver entityResolver,\n            final int batchSize)", "full_signature": "public  MongoQueryExecutor(\n            DB db,\n            WriteConcern writeConcern,\n            MongoQueryTranslator queryTranslator,\n            EntityResolver entityResolver,\n            final int batchSize)", "class_method_signature": "MongoQueryExecutor.MongoQueryExecutor(\n            DB db,\n            WriteConcern writeConcern,\n            MongoQueryTranslator queryTranslator,\n            EntityResolver entityResolver,\n            final int batchSize)", "testcase": false, "constructor": true}, {"identifier": "MongoQueryExecutor", "parameters": "(\n            DB db,\n            WriteConcern writeConcern,\n            MongoQueryTranslator queryTranslator,\n            EntityResolver entityResolver)", "modifiers": "public", "return": "", "signature": " MongoQueryExecutor(\n            DB db,\n            WriteConcern writeConcern,\n            MongoQueryTranslator queryTranslator,\n            EntityResolver entityResolver)", "full_signature": "public  MongoQueryExecutor(\n            DB db,\n            WriteConcern writeConcern,\n            MongoQueryTranslator queryTranslator,\n            EntityResolver entityResolver)", "class_method_signature": "MongoQueryExecutor.MongoQueryExecutor(\n            DB db,\n            WriteConcern writeConcern,\n            MongoQueryTranslator queryTranslator,\n            EntityResolver entityResolver)", "testcase": false, "constructor": true}, {"identifier": "MongoQueryExecutor", "parameters": "(\n            Mongo mongo,\n            String database,\n            WriteConcern writeConcern,\n            MongoQueryTranslator queryTranslator,\n            EntityResolver entityResolver)", "modifiers": "public", "return": "", "signature": " MongoQueryExecutor(\n            Mongo mongo,\n            String database,\n            WriteConcern writeConcern,\n            MongoQueryTranslator queryTranslator,\n            EntityResolver entityResolver)", "full_signature": "public  MongoQueryExecutor(\n            Mongo mongo,\n            String database,\n            WriteConcern writeConcern,\n            MongoQueryTranslator queryTranslator,\n            EntityResolver entityResolver)", "class_method_signature": "MongoQueryExecutor.MongoQueryExecutor(\n            Mongo mongo,\n            String database,\n            WriteConcern writeConcern,\n            MongoQueryTranslator queryTranslator,\n            EntityResolver entityResolver)", "testcase": false, "constructor": true}, {"identifier": "MongoQueryExecutor", "parameters": "(\n            Mongo mongo,\n            String database,\n            WriteConcern writeConcern,\n            MongoQueryTranslator queryTranslator,\n            EntityResolver entityResolver,\n            final int batchSize)", "modifiers": "public", "return": "", "signature": " MongoQueryExecutor(\n            Mongo mongo,\n            String database,\n            WriteConcern writeConcern,\n            MongoQueryTranslator queryTranslator,\n            EntityResolver entityResolver,\n            final int batchSize)", "full_signature": "public  MongoQueryExecutor(\n            Mongo mongo,\n            String database,\n            WriteConcern writeConcern,\n            MongoQueryTranslator queryTranslator,\n            EntityResolver entityResolver,\n            final int batchSize)", "class_method_signature": "MongoQueryExecutor.MongoQueryExecutor(\n            Mongo mongo,\n            String database,\n            WriteConcern writeConcern,\n            MongoQueryTranslator queryTranslator,\n            EntityResolver entityResolver,\n            final int batchSize)", "testcase": false, "constructor": true}, {"identifier": "getDB", "parameters": "()", "modifiers": "public", "return": "DB", "signature": "DB getDB()", "full_signature": "public DB getDB()", "class_method_signature": "MongoQueryExecutor.getDB()", "testcase": false, "constructor": false}, {"identifier": "getCollection", "parameters": "(Class<?> entityClass)", "modifiers": "public", "return": "DBCollection", "signature": "DBCollection getCollection(Class<?> entityClass)", "full_signature": "public DBCollection getCollection(Class<?> entityClass)", "class_method_signature": "MongoQueryExecutor.getCollection(Class<?> entityClass)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Query<T, R> query)", "modifiers": "public", "return": "void", "signature": "void remove(Query<T, R> query)", "full_signature": "public void remove(Query<T, R> query)", "class_method_signature": "MongoQueryExecutor.remove(Query<T, R> query)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(Class<?> entityClass)", "modifiers": "public", "return": "void", "signature": "void removeAll(Class<?> entityClass)", "full_signature": "public void removeAll(Class<?> entityClass)", "class_method_signature": "MongoQueryExecutor.removeAll(Class<?> entityClass)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(Query<T, R> query)", "modifiers": "private", "return": "DBCursor", "signature": "DBCursor translate(Query<T, R> query)", "full_signature": "private DBCursor translate(Query<T, R> query)", "class_method_signature": "MongoQueryExecutor.translate(Query<T, R> query)", "testcase": false, "constructor": false}, {"identifier": "mapClasses", "parameters": "(Class<?>... classes)", "modifiers": "private", "return": "void", "signature": "void mapClasses(Class<?>... classes)", "full_signature": "private void mapClasses(Class<?>... classes)", "class_method_signature": "MongoQueryExecutor.mapClasses(Class<?>... classes)", "testcase": false, "constructor": false}, {"identifier": "fetch", "parameters": "(DBCursor cursor, Query<T, R> query)", "modifiers": "private", "return": "MongoResults<R>", "signature": "MongoResults<R> fetch(DBCursor cursor, Query<T, R> query)", "full_signature": "private MongoResults<R> fetch(DBCursor cursor, Query<T, R> query)", "class_method_signature": "MongoQueryExecutor.fetch(DBCursor cursor, Query<T, R> query)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(DBCollection collection, DBObject query, DBObject fields)", "modifiers": "@VisibleForTesting protected", "return": "DBCursor", "signature": "DBCursor find(DBCollection collection, DBObject query, DBObject fields)", "full_signature": "@VisibleForTesting protected DBCursor find(DBCollection collection, DBObject query, DBObject fields)", "class_method_signature": "MongoQueryExecutor.find(DBCollection collection, DBObject query, DBObject fields)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(DBCollection collection, DBObject entity)", "modifiers": "@VisibleForTesting protected", "return": "WriteResult", "signature": "WriteResult save(DBCollection collection, DBObject entity)", "full_signature": "@VisibleForTesting protected WriteResult save(DBCollection collection, DBObject entity)", "class_method_signature": "MongoQueryExecutor.save(DBCollection collection, DBObject entity)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(Query<T, R> query)", "modifiers": "@Override public", "return": "Iterable<R>", "signature": "Iterable<R> find(Query<T, R> query)", "full_signature": "@Override public Iterable<R> find(Query<T, R> query)", "class_method_signature": "MongoQueryExecutor.find(Query<T, R> query)", "testcase": false, "constructor": false}, {"identifier": "findOne", "parameters": "(Query<T, R> query)", "modifiers": "@Override public", "return": "R", "signature": "R findOne(Query<T, R> query)", "full_signature": "@Override public R findOne(Query<T, R> query)", "class_method_signature": "MongoQueryExecutor.findOne(Query<T, R> query)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(T entity)", "modifiers": "@Override public", "return": "T", "signature": "T save(T entity)", "full_signature": "@Override public T save(T entity)", "class_method_signature": "MongoQueryExecutor.save(T entity)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Iterable<T> entities)", "modifiers": "@Override public", "return": "Iterable<T>", "signature": "Iterable<T> save(Iterable<T> entities)", "full_signature": "@Override public Iterable<T> save(Iterable<T> entities)", "class_method_signature": "MongoQueryExecutor.save(Iterable<T> entities)", "testcase": false, "constructor": false}], "file": "seeking-mongo/src/main/java/com/eharmony/matching/seeking/executor/mongodb/MongoQueryExecutor.java"}, "focal_method": {"identifier": "save", "parameters": "(DBCollection collection, DBObject entity)", "modifiers": "@VisibleForTesting protected", "return": "WriteResult", "body": "@VisibleForTesting\n    protected WriteResult save(DBCollection collection, DBObject entity) {\n        return collection.save(entity, this.writeConcern);\n    }", "signature": "WriteResult save(DBCollection collection, DBObject entity)", "full_signature": "@VisibleForTesting protected WriteResult save(DBCollection collection, DBObject entity)", "class_method_signature": "MongoQueryExecutor.save(DBCollection collection, DBObject entity)", "testcase": false, "constructor": false, "invocations": ["save"]}, "repository": {"repo_id": 9248683, "url": "https://github.com/eHarmony/seeking", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 194, "license": "licensed"}}