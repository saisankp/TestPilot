{"test_class": {"identifier": "DeviceMessageCleanupJobTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@TempDir\n    Path folder;", "modifier": "@TempDir", "type": "Path", "declarator": "folder", "var_name": "folder"}, {"original_string": "@InjectMocks\n    private DeviceMessageCleanupJob deviceMessageCleanupJob;", "modifier": "@InjectMocks\n    private", "type": "DeviceMessageCleanupJob", "declarator": "deviceMessageCleanupJob", "var_name": "deviceMessageCleanupJob"}, {"original_string": "@Mock\n    private TransactionalDeviceLogItemService transactionalDeviceLogItemService;", "modifier": "@Mock\n    private", "type": "TransactionalDeviceLogItemService", "declarator": "transactionalDeviceLogItemService", "var_name": "transactionalDeviceLogItemService"}, {"original_string": "private final String filePrefix = \"junit-mocked-csv-file-\";", "modifier": "private final", "type": "String", "declarator": "filePrefix = \"junit-mocked-csv-file-\"", "var_name": "filePrefix"}, {"original_string": "private static final String JUST_A_FILE = \"file.csv\";", "modifier": "private static final", "type": "String", "declarator": "JUST_A_FILE = \"file.csv\"", "var_name": "JUST_A_FILE"}], "file": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/tasks/DeviceMessageCleanupJobTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() throws IOException {\n        // Arrange\n        final List<DeviceLogItem> deviceLogItems = this.createDeviceLogItems();\n        Mockito.when(this.transactionalDeviceLogItemService.findDeviceLogItemsBeforeDate(any(Date.class),\n                any(Integer.class))).thenReturn(deviceLogItems);\n\n        // Act\n        this.deviceMessageCleanupJob.execute(null);\n\n        // Assert\n\n        // Example path:\n        // /tmp/junit7318456469288690301/junit-mocked-csv-file-20190416-112237.csv.zip\n        final String path = this.folder.resolve(JUST_A_FILE).getParent().toString();\n\n        final File zipFile = FileUtils.findFileInFolderUsingFilePrefix(path, this.filePrefix);\n        assertThat(zipFile.exists()).isTrue();\n        assertThat(zipFile).hasExtension(\"zip\");\n        assertThat(zipFile.length()).isNotZero();\n\n        ZipFileReader.extractZipFile(zipFile.getAbsolutePath(), path);\n        zipFile.delete();\n\n        final File csvFile = FileUtils.findFileInFolderUsingFilePrefix(path, this.filePrefix);\n        assertThat(csvFile.exists()).isTrue();\n        assertThat(csvFile).hasExtension(\"csv\");\n        assertThat(csvFile.length()).isNotZero();\n\n        final long numberOfLines = FileUtils.countNumberOfLinesInFile(csvFile);\n        assertThat(numberOfLines).isEqualTo(2l);\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "DeviceMessageCleanupJobTest.test()", "testcase": true, "constructor": false, "invocations": ["createDeviceLogItems", "thenReturn", "when", "findDeviceLogItemsBeforeDate", "any", "any", "execute", "toString", "getParent", "resolve", "findFileInFolderUsingFilePrefix", "isTrue", "assertThat", "exists", "hasExtension", "assertThat", "isNotZero", "assertThat", "length", "extractZipFile", "getAbsolutePath", "delete", "findFileInFolderUsingFilePrefix", "isTrue", "assertThat", "exists", "hasExtension", "assertThat", "isNotZero", "assertThat", "length", "countNumberOfLinesInFile", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "DeviceMessageCleanupJob", "superclass": "", "interfaces": "implements Job", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DeviceMessageCleanupJob.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DeviceMessageCleanupJob.class)", "var_name": "LOGGER"}, {"original_string": "@Value(\"${osgp.scheduling.job.database.cleanup.device.message.retention}\")\n    private int deviceMessageRetentionPeriodInMonths;", "modifier": "@Value(\"${osgp.scheduling.job.database.cleanup.device.message.retention}\")\n    private", "type": "int", "declarator": "deviceMessageRetentionPeriodInMonths", "var_name": "deviceMessageRetentionPeriodInMonths"}, {"original_string": "@Value(\"${osgp.scheduling.job.database.cleanup.device.message.csv.file.location}\")\n    private String csvFileLocation;", "modifier": "@Value(\"${osgp.scheduling.job.database.cleanup.device.message.csv.file.location}\")\n    private", "type": "String", "declarator": "csvFileLocation", "var_name": "csvFileLocation"}, {"original_string": "@Value(\"${osgp.scheduling.job.database.cleanup.device.message.csv.file.prefix}\")\n    private String csvFilePrefix;", "modifier": "@Value(\"${osgp.scheduling.job.database.cleanup.device.message.csv.file.prefix}\")\n    private", "type": "String", "declarator": "csvFilePrefix", "var_name": "csvFilePrefix"}, {"original_string": "@Value(\"${osgp.scheduling.job.database.cleanup.device.message.csv.file.compression.enabled}\")\n    private boolean csvFileCompressionEnabled;", "modifier": "@Value(\"${osgp.scheduling.job.database.cleanup.device.message.csv.file.compression.enabled}\")\n    private", "type": "boolean", "declarator": "csvFileCompressionEnabled", "var_name": "csvFileCompressionEnabled"}, {"original_string": "@Value(\"${osgp.scheduling.job.database.cleanup.device.message.page.size}\")\n    private int deviceMessagePageSize;", "modifier": "@Value(\"${osgp.scheduling.job.database.cleanup.device.message.page.size}\")\n    private", "type": "int", "declarator": "deviceMessagePageSize", "var_name": "deviceMessagePageSize"}, {"original_string": "@Autowired\n    private TransactionalDeviceLogItemService transactionalDeviceLogItemService;", "modifier": "@Autowired\n    private", "type": "TransactionalDeviceLogItemService", "declarator": "transactionalDeviceLogItemService", "var_name": "transactionalDeviceLogItemService"}], "methods": [{"identifier": "execute", "parameters": "(final JobExecutionContext context)", "modifiers": "@Override public", "return": "void", "signature": "void execute(final JobExecutionContext context)", "full_signature": "@Override public void execute(final JobExecutionContext context)", "class_method_signature": "DeviceMessageCleanupJob.execute(final JobExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "calculateRetentionDate", "parameters": "()", "modifiers": "private", "return": "Date", "signature": "Date calculateRetentionDate()", "full_signature": "private Date calculateRetentionDate()", "class_method_signature": "DeviceMessageCleanupJob.calculateRetentionDate()", "testcase": false, "constructor": false}, {"identifier": "saveDeviceMessagesToCsvFile", "parameters": "(final List<DeviceLogItem> deviceMessages)", "modifiers": "private", "return": "void", "signature": "void saveDeviceMessagesToCsvFile(final List<DeviceLogItem> deviceMessages)", "full_signature": "private void saveDeviceMessagesToCsvFile(final List<DeviceLogItem> deviceMessages)", "class_method_signature": "DeviceMessageCleanupJob.saveDeviceMessagesToCsvFile(final List<DeviceLogItem> deviceMessages)", "testcase": false, "constructor": false}], "file": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/application/tasks/DeviceMessageCleanupJob.java"}, "focal_method": {"identifier": "execute", "parameters": "(final JobExecutionContext context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(final JobExecutionContext context) {\n        LOGGER.info(\"Quartz triggered cleanup of database - device message records.\");\n        final DateTime start = DateTime.now();\n\n        try {\n            final Date retention = this.calculateRetentionDate();\n            final List<DeviceLogItem> oldDeviceMessages = this.transactionalDeviceLogItemService\n                    .findDeviceLogItemsBeforeDate(retention, this.deviceMessagePageSize);\n            if (!oldDeviceMessages.isEmpty()) {\n                this.saveDeviceMessagesToCsvFile(oldDeviceMessages);\n\n                LOGGER.info(\"Deleting device messages...\");\n                this.transactionalDeviceLogItemService.deleteDeviceLogItems(oldDeviceMessages);\n            }\n        } catch (final Exception e) {\n            LOGGER.error(\"Exception during CSV file creation, compression or device message deletion.\", e);\n        }\n\n        final DateTime end = DateTime.now();\n        LOGGER.info(\"Start: {}, end: {}, duration: {} milliseconds.\", start, end, end.getMillis() - start.getMillis());\n    }", "signature": "void execute(final JobExecutionContext context)", "full_signature": "@Override public void execute(final JobExecutionContext context)", "class_method_signature": "DeviceMessageCleanupJob.execute(final JobExecutionContext context)", "testcase": false, "constructor": false, "invocations": ["info", "now", "calculateRetentionDate", "findDeviceLogItemsBeforeDate", "isEmpty", "saveDeviceMessagesToCsvFile", "info", "deleteDeviceLogItems", "error", "now", "info", "getMillis", "getMillis"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}