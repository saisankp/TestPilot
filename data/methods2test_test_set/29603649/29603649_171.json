{"test_class": {"identifier": "JsonPathCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EXPECTED_KEY = \"expected\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_KEY = \"expected\"", "var_name": "EXPECTED_KEY"}, {"original_string": "private static final String JSONPATH_KEY = \"jsonPath\";", "modifier": "private static final", "type": "String", "declarator": "JSONPATH_KEY = \"jsonPath\"", "var_name": "JSONPATH_KEY"}, {"original_string": "private WilmaHttpRequest request;", "modifier": "private", "type": "WilmaHttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private ParameterList parameters;", "modifier": "private", "type": "ParameterList", "declarator": "parameters", "var_name": "parameters"}, {"original_string": "private JsonPathChecker underTest;", "modifier": "private", "type": "JsonPathChecker", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-stub-configuration-support/src/test/java/com/epam/wilma/stubconfig/condition/checker/json/JsonPathCheckerTest.java"}, "test_case": {"identifier": "testCheckConditionShouldPassWhenJsonHasProperParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckConditionShouldPassWhenJsonHasProperParameter() throws Exception {\n        givenExpectations(\"Wilma\", \"$.name\");\n        givenWilmaRequest(\"{\\\"name\\\":\\\"Wilma\\\",\\\"age\\\":\\\"20\\\"}\");\n\n        boolean matches = underTest.checkCondition(request, parameters);\n\n        assertTrue(matches);\n    }", "signature": "void testCheckConditionShouldPassWhenJsonHasProperParameter()", "full_signature": "@Test public void testCheckConditionShouldPassWhenJsonHasProperParameter()", "class_method_signature": "JsonPathCheckerTest.testCheckConditionShouldPassWhenJsonHasProperParameter()", "testcase": true, "constructor": false, "invocations": ["givenExpectations", "givenWilmaRequest", "checkCondition", "assertTrue"]}, "focal_class": {"identifier": "JsonPathChecker", "superclass": "", "interfaces": "implements ConditionChecker", "fields": [{"original_string": "private static final String EXPECTED_KEY = \"expected\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_KEY = \"expected\"", "var_name": "EXPECTED_KEY"}, {"original_string": "private static final String JSONPATH_KEY = \"jsonPath\";", "modifier": "private static final", "type": "String", "declarator": "JSONPATH_KEY = \"jsonPath\"", "var_name": "JSONPATH_KEY"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(JsonPathChecker.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JsonPathChecker.class)", "var_name": "logger"}], "methods": [{"identifier": "checkCondition", "parameters": "(final WilmaHttpRequest request, final ParameterList parameters)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameters)", "full_signature": "@Override public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameters)", "class_method_signature": "JsonPathChecker.checkCondition(final WilmaHttpRequest request, final ParameterList parameters)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(final String expected, final String actualValue)", "modifiers": "protected", "return": "boolean", "signature": "boolean evaluate(final String expected, final String actualValue)", "full_signature": "protected boolean evaluate(final String expected, final String actualValue)", "class_method_signature": "JsonPathChecker.evaluate(final String expected, final String actualValue)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-support/src/main/java/com/epam/wilma/stubconfig/condition/checker/json/JsonPathChecker.java"}, "focal_method": {"identifier": "checkCondition", "parameters": "(final WilmaHttpRequest request, final ParameterList parameters)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameters) {\n        String expected = parameters.get(EXPECTED_KEY);\n        String path = parameters.get(JSONPATH_KEY);\n        boolean equals;\n        try {\n            String actualValue = JsonPath.read(request.getBody(), path);\n            equals = evaluate(expected, actualValue);\n        } catch (Exception e) {\n            logger.debug(\"Request body isn't of JSON format, message:\" + request.getWilmaMessageLoggerId(), e);\n            equals = false;\n        }\n        return equals;\n    }", "signature": "boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameters)", "full_signature": "@Override public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameters)", "class_method_signature": "JsonPathChecker.checkCondition(final WilmaHttpRequest request, final ParameterList parameters)", "testcase": false, "constructor": false, "invocations": ["get", "get", "read", "getBody", "evaluate", "debug", "getWilmaMessageLoggerId"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}