{"test_class": {"identifier": "MDEDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/MDEDescriptorTest.java"}, "test_case": {"identifier": "testMDE1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMDE1() throws ClassNotFoundException, CDKException, Exception {\n        String filename = \"data/mdl/mdeotest.sdf\";\n        InputStream ins = this.getClass().getClassLoader().getResourceAsStream(filename);\n        ISimpleChemObjectReader reader = new MDLV2000Reader(ins);\n        ChemFile content = (ChemFile) reader.read(new ChemFile());\n        List cList = ChemFileManipulator.getAllAtomContainers(content);\n        IAtomContainer ac = (IAtomContainer) cList.get(0);\n\n        DoubleArrayResult result = (DoubleArrayResult) descriptor.calculate(ac).getValue();\n\n        Assert.assertEquals(0.0000, result.get(MDEDescriptor.MDEO11), 0.0001);\n        Assert.assertEquals(1.1547, result.get(MDEDescriptor.MDEO12), 0.0001);\n        Assert.assertEquals(2.9416, result.get(MDEDescriptor.MDEO22), 0.0001);\n    }", "signature": "void testMDE1()", "full_signature": "@Test public void testMDE1()", "class_method_signature": "MDEDescriptorTest.testMDE1()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "getClass", "read", "getAllAtomContainers", "get", "getValue", "calculate", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "MDEDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private static final String[] NAMES  = {\"MDEC-11\", \"MDEC-12\", \"MDEC-13\", \"MDEC-14\", \"MDEC-22\", \"MDEC-23\",\n            \"MDEC-24\", \"MDEC-33\", \"MDEC-34\", \"MDEC-44\", \"MDEO-11\", \"MDEO-12\", \"MDEO-22\", \"MDEN-11\", \"MDEN-12\",\n            \"MDEN-13\", \"MDEN-22\", \"MDEN-23\", \"MDEN-33\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES  = {\"MDEC-11\", \"MDEC-12\", \"MDEC-13\", \"MDEC-14\", \"MDEC-22\", \"MDEC-23\",\n            \"MDEC-24\", \"MDEC-33\", \"MDEC-34\", \"MDEC-44\", \"MDEO-11\", \"MDEO-12\", \"MDEO-22\", \"MDEN-11\", \"MDEN-12\",\n            \"MDEN-13\", \"MDEN-22\", \"MDEN-23\", \"MDEN-33\"}", "var_name": "NAMES"}, {"original_string": "public static final int       MDEC11 = 0;", "modifier": "public static final", "type": "int", "declarator": "MDEC11 = 0", "var_name": "MDEC11"}, {"original_string": "public static final int       MDEC12 = 1;", "modifier": "public static final", "type": "int", "declarator": "MDEC12 = 1", "var_name": "MDEC12"}, {"original_string": "public static final int       MDEC13 = 2;", "modifier": "public static final", "type": "int", "declarator": "MDEC13 = 2", "var_name": "MDEC13"}, {"original_string": "public static final int       MDEC14 = 3;", "modifier": "public static final", "type": "int", "declarator": "MDEC14 = 3", "var_name": "MDEC14"}, {"original_string": "public static final int       MDEC22 = 4;", "modifier": "public static final", "type": "int", "declarator": "MDEC22 = 4", "var_name": "MDEC22"}, {"original_string": "public static final int       MDEC23 = 5;", "modifier": "public static final", "type": "int", "declarator": "MDEC23 = 5", "var_name": "MDEC23"}, {"original_string": "public static final int       MDEC24 = 6;", "modifier": "public static final", "type": "int", "declarator": "MDEC24 = 6", "var_name": "MDEC24"}, {"original_string": "public static final int       MDEC33 = 7;", "modifier": "public static final", "type": "int", "declarator": "MDEC33 = 7", "var_name": "MDEC33"}, {"original_string": "public static final int       MDEC34 = 8;", "modifier": "public static final", "type": "int", "declarator": "MDEC34 = 8", "var_name": "MDEC34"}, {"original_string": "public static final int       MDEC44 = 9;", "modifier": "public static final", "type": "int", "declarator": "MDEC44 = 9", "var_name": "MDEC44"}, {"original_string": "public static final int       MDEO11 = 10;", "modifier": "public static final", "type": "int", "declarator": "MDEO11 = 10", "var_name": "MDEO11"}, {"original_string": "public static final int       MDEO12 = 11;", "modifier": "public static final", "type": "int", "declarator": "MDEO12 = 11", "var_name": "MDEO12"}, {"original_string": "public static final int       MDEO22 = 12;", "modifier": "public static final", "type": "int", "declarator": "MDEO22 = 12", "var_name": "MDEO22"}, {"original_string": "public static final int       MDEN11 = 13;", "modifier": "public static final", "type": "int", "declarator": "MDEN11 = 13", "var_name": "MDEN11"}, {"original_string": "public static final int       MDEN12 = 14;", "modifier": "public static final", "type": "int", "declarator": "MDEN12 = 14", "var_name": "MDEN12"}, {"original_string": "public static final int       MDEN13 = 15;", "modifier": "public static final", "type": "int", "declarator": "MDEN13 = 15", "var_name": "MDEN13"}, {"original_string": "public static final int       MDEN22 = 16;", "modifier": "public static final", "type": "int", "declarator": "MDEN22 = 16", "var_name": "MDEN22"}, {"original_string": "public static final int       MDEN23 = 17;", "modifier": "public static final", "type": "int", "declarator": "MDEN23 = 17", "var_name": "MDEN23"}, {"original_string": "public static final int       MDEN33 = 18;", "modifier": "public static final", "type": "int", "declarator": "MDEN33 = 18", "var_name": "MDEN33"}, {"original_string": "private static final int      C_1    = 1;", "modifier": "private static final", "type": "int", "declarator": "C_1    = 1", "var_name": "C_1"}, {"original_string": "private static final int      C_2    = 2;", "modifier": "private static final", "type": "int", "declarator": "C_2    = 2", "var_name": "C_2"}, {"original_string": "private static final int      C_3    = 3;", "modifier": "private static final", "type": "int", "declarator": "C_3    = 3", "var_name": "C_3"}, {"original_string": "private static final int      C_4    = 4;", "modifier": "private static final", "type": "int", "declarator": "C_4    = 4", "var_name": "C_4"}, {"original_string": "private static final int      O_1    = 1;", "modifier": "private static final", "type": "int", "declarator": "O_1    = 1", "var_name": "O_1"}, {"original_string": "private static final int      O_2    = 2;", "modifier": "private static final", "type": "int", "declarator": "O_2    = 2", "var_name": "O_2"}, {"original_string": "private static final int      N_1    = 1;", "modifier": "private static final", "type": "int", "declarator": "N_1    = 1", "var_name": "N_1"}, {"original_string": "private static final int      N_2    = 2;", "modifier": "private static final", "type": "int", "declarator": "N_2    = 2", "var_name": "N_2"}, {"original_string": "private static final int      N_3    = 3;", "modifier": "private static final", "type": "int", "declarator": "N_3    = 3", "var_name": "N_3"}], "methods": [{"identifier": "MDEDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " MDEDescriptor()", "full_signature": "public  MDEDescriptor()", "class_method_signature": "MDEDescriptor.MDEDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "MDEDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "MDEDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "MDEDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "MDEDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "MDEDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "MDEDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "dedge", "parameters": "(IAtomContainer atomContainer, int which)", "modifiers": "private", "return": "double", "signature": "double dedge(IAtomContainer atomContainer, int which)", "full_signature": "private double dedge(IAtomContainer atomContainer, int which)", "class_method_signature": "MDEDescriptor.dedge(IAtomContainer atomContainer, int which)", "testcase": false, "constructor": false}, {"identifier": "evalATable", "parameters": "(IAtomContainer atomContainer, int atomicNum)", "modifiers": "private", "return": "int[][]", "signature": "int[][] evalATable(IAtomContainer atomContainer, int atomicNum)", "full_signature": "private int[][] evalATable(IAtomContainer atomContainer, int atomicNum)", "class_method_signature": "MDEDescriptor.evalATable(IAtomContainer atomContainer, int atomicNum)", "testcase": false, "constructor": false}, {"identifier": "evalCValue", "parameters": "(int[][] distmat, int[][] codemat, int type1, int type2)", "modifiers": "private", "return": "double", "signature": "double evalCValue(int[][] distmat, int[][] codemat, int type1, int type2)", "full_signature": "private double evalCValue(int[][] distmat, int[][] codemat, int type1, int type2)", "class_method_signature": "MDEDescriptor.evalCValue(int[][] distmat, int[][] codemat, int type1, int type2)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "MDEDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "MDEDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/MDEDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer container) {\n\n        IAtomContainer local = AtomContainerManipulator.removeHydrogens(container);\n\n        DoubleArrayResult retval = new DoubleArrayResult(19);\n        for (int i = 0; i < 19; i++) {\n            retval.add(dedge(local, i));\n        }\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), retval,\n                getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "MDEDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["removeHydrogens", "add", "dedge", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}