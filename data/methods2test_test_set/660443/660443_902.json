{"test_class": {"identifier": "PartialFilledStructureMergerTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "tool/structgen/src/test/java/org/openscience/cdk/structgen/stochastic/PartialFilledStructureMergerTest.java"}, "test_case": {"identifier": "testPartialFilledStructureMerger3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPartialFilledStructureMerger3() throws Exception {\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainerSet acs = DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainerSet.class);\n        acs.addAtomContainer(sp.parseSmiles(\"[CH2]CCC[CH2]\"));\n        acs.addAtomContainer(sp.parseSmiles(\"[CH2]C[CH2]\"));\n        acs.addAtomContainer(sp.parseSmiles(\"[CH2][CH2]\"));\n        PartialFilledStructureMerger pfsm = new PartialFilledStructureMerger();\n        IAtomContainer result = pfsm.generate(acs);\n        Assert.assertTrue(ConnectivityChecker.isConnected(result));\n        Assert.assertTrue(new SaturationChecker().allSaturated(result));\n    }", "signature": "void testPartialFilledStructureMerger3()", "full_signature": "@Test public void testPartialFilledStructureMerger3()", "class_method_signature": "PartialFilledStructureMergerTest.testPartialFilledStructureMerger3()", "testcase": true, "constructor": false, "invocations": ["getInstance", "newInstance", "getInstance", "addAtomContainer", "parseSmiles", "addAtomContainer", "parseSmiles", "addAtomContainer", "parseSmiles", "generate", "assertTrue", "isConnected", "assertTrue", "allSaturated"]}, "focal_class": {"identifier": "PartialFilledStructureMerger", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ILoggingTool logger = LoggingToolFactory.createLoggingTool(PartialFilledStructureMerger.class);", "modifier": "private", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(PartialFilledStructureMerger.class)", "var_name": "logger"}, {"original_string": "SaturationChecker    satCheck;", "modifier": "", "type": "SaturationChecker", "declarator": "satCheck", "var_name": "satCheck"}], "methods": [{"identifier": "PartialFilledStructureMerger", "parameters": "()", "modifiers": "public", "return": "", "signature": " PartialFilledStructureMerger()", "full_signature": "public  PartialFilledStructureMerger()", "class_method_signature": "PartialFilledStructureMerger.PartialFilledStructureMerger()", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "(IAtomContainerSet atomContainers)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer generate(IAtomContainerSet atomContainers)", "full_signature": "public IAtomContainer generate(IAtomContainerSet atomContainers)", "class_method_signature": "PartialFilledStructureMerger.generate(IAtomContainerSet atomContainers)", "testcase": false, "constructor": false}, {"identifier": "getAnotherUnsaturatedNode", "parameters": "(IAtom exclusionAtom,\n                                            IAtomContainer exclusionAtomContainer,\n                                            IAtomContainerSet atomContainers)", "modifiers": "private", "return": "IAtom", "signature": "IAtom getAnotherUnsaturatedNode(IAtom exclusionAtom,\n                                            IAtomContainer exclusionAtomContainer,\n                                            IAtomContainerSet atomContainers)", "full_signature": "private IAtom getAnotherUnsaturatedNode(IAtom exclusionAtom,\n                                            IAtomContainer exclusionAtomContainer,\n                                            IAtomContainerSet atomContainers)", "class_method_signature": "PartialFilledStructureMerger.getAnotherUnsaturatedNode(IAtom exclusionAtom,\n                                            IAtomContainer exclusionAtomContainer,\n                                            IAtomContainerSet atomContainers)", "testcase": false, "constructor": false}], "file": "tool/structgen/src/main/java/org/openscience/cdk/structgen/stochastic/PartialFilledStructureMerger.java"}, "focal_method": {"identifier": "generate", "parameters": "(IAtomContainerSet atomContainers)", "modifiers": "public", "return": "IAtomContainer", "body": "public IAtomContainer generate(IAtomContainerSet atomContainers) throws CDKException {\n        int iteration = 0;\n        boolean structureFound = false;\n        do {\n            iteration++;\n            boolean bondFormed;\n            do {\n                bondFormed = false;\n                for (IAtomContainer ac : atomContainers.atomContainers()) {\n                    for (IAtom atom : AtomContainerManipulator.getAtomArray(ac)) {\n                        if (!satCheck.isSaturated(atom, ac)) {\n                            IAtom partner = getAnotherUnsaturatedNode(atom, ac, atomContainers);\n                            if (partner != null) {\n                                IAtomContainer toadd = AtomContainerSetManipulator.getRelevantAtomContainer(\n                                        atomContainers, partner);\n                                double cmax1 = satCheck.getCurrentMaxBondOrder(atom, ac);\n                                double cmax2 = satCheck.getCurrentMaxBondOrder(partner, toadd);\n                                double max = Math.min(cmax1, cmax2);\n                                double order = Math.min(Math.max(1.0, max), 3.0);//(double)Math.round(Math.random() * max)\n                                logger.debug(\"cmax1, cmax2, max, order: \" + cmax1 + \", \" + cmax2 + \", \" + max + \", \"\n                                        + order);\n                                if (toadd != ac) {\n                                    atomContainers.removeAtomContainer(toadd);\n                                    ac.add(toadd);\n                                }\n                                ac.addBond(ac.getBuilder().newInstance(IBond.class, atom, partner,\n                                        BondManipulator.createBondOrder(order)));\n                                bondFormed = true;\n                            }\n                        }\n                    }\n                }\n            } while (bondFormed);\n            if (atomContainers.getAtomContainerCount() == 1\n                    && satCheck.allSaturated(atomContainers.getAtomContainer(0))) {\n                structureFound = true;\n            }\n        } while (!structureFound && iteration < 5);\n        if (atomContainers.getAtomContainerCount() == 1 && satCheck.allSaturated(atomContainers.getAtomContainer(0))) {\n            structureFound = true;\n        }\n        if (!structureFound)\n            throw new CDKException(\"Could not combine the fragments to combine a valid, satured structure\");\n        return atomContainers.getAtomContainer(0);\n    }", "signature": "IAtomContainer generate(IAtomContainerSet atomContainers)", "full_signature": "public IAtomContainer generate(IAtomContainerSet atomContainers)", "class_method_signature": "PartialFilledStructureMerger.generate(IAtomContainerSet atomContainers)", "testcase": false, "constructor": false, "invocations": ["atomContainers", "getAtomArray", "isSaturated", "getAnotherUnsaturatedNode", "getRelevantAtomContainer", "getCurrentMaxBondOrder", "getCurrentMaxBondOrder", "min", "min", "max", "debug", "removeAtomContainer", "add", "addBond", "newInstance", "getBuilder", "createBondOrder", "getAtomContainerCount", "allSaturated", "getAtomContainer", "getAtomContainerCount", "allSaturated", "getAtomContainer", "getAtomContainer"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}