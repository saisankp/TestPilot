{"test_class": {"identifier": "DateTimePeriodDataUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/time/DateTimePeriodDataUtilTest.java"}, "test_case": {"identifier": "fill", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fill() throws Exception {\n        //\n        // create a period of 4 hours\n        //\n        DateTime start = new DateTime(2009, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC);\n        DateTimePeriod period = new DateTimeHour(start, start.plusHours(4));\n\n        // fill an empty map\n        TreeMap<DateTime, SampleData> emptyMap = new TreeMap<DateTime, SampleData>();\n        DateTimePeriodDataUtil.fill(SampleData.class, emptyMap, period.toHours());\n\n        SampleData[] result0 = emptyMap.values().toArray(new SampleData[0]);\n        Assert.assertArrayEquals(new SampleData[] {\n            new SampleData(DateTimePeriod.createHour(2009, 1, 1, 0, DateTimeZone.UTC), null),\n            new SampleData(DateTimePeriod.createHour(2009, 1, 1, 1, DateTimeZone.UTC), null),\n            new SampleData(DateTimePeriod.createHour(2009, 1, 1, 2, DateTimeZone.UTC), null),\n            new SampleData(DateTimePeriod.createHour(2009, 1, 1, 3, DateTimeZone.UTC), null)\n        }, result0);\n\n        // fill a partially completed map\n        SampleData hour0 = new SampleData(DateTimePeriod.createHour(2009, 1, 1, 0, DateTimeZone.UTC), \"hour0\");\n        SampleData hour2 = new SampleData(DateTimePeriod.createHour(2009, 1, 1, 2, DateTimeZone.UTC), \"hour2\");\n        TreeMap<DateTime, SampleData> partialMap = new TreeMap<DateTime, SampleData>();\n        partialMap.put(hour0.getPeriod().getStart(), hour0);\n        partialMap.put(hour2.getPeriod().getStart(), hour2);\n        DateTimePeriodDataUtil.fill(SampleData.class, partialMap, period.toHours());\n\n        result0 = partialMap.values().toArray(new SampleData[0]);\n        Assert.assertArrayEquals(new SampleData[] {\n            new SampleData(DateTimePeriod.createHour(2009, 1, 1, 0, DateTimeZone.UTC), \"hour0\"),\n            new SampleData(DateTimePeriod.createHour(2009, 1, 1, 1, DateTimeZone.UTC), null),\n            new SampleData(DateTimePeriod.createHour(2009, 1, 1, 2, DateTimeZone.UTC), \"hour2\"),\n            new SampleData(DateTimePeriod.createHour(2009, 1, 1, 3, DateTimeZone.UTC), null)\n        }, result0);\n\n    }", "signature": "void fill()", "full_signature": "@Test public void fill()", "class_method_signature": "DateTimePeriodDataUtilTest.fill()", "testcase": true, "constructor": false, "invocations": ["plusHours", "fill", "toHours", "toArray", "values", "assertArrayEquals", "createHour", "createHour", "createHour", "createHour", "createHour", "createHour", "put", "getStart", "getPeriod", "put", "getStart", "getPeriod", "fill", "toHours", "toArray", "values", "assertArrayEquals", "createHour", "createHour", "createHour", "createHour"]}, "focal_class": {"identifier": "DateTimePeriodDataUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "DateTimePeriodDataUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " DateTimePeriodDataUtil()", "full_signature": "private  DateTimePeriodDataUtil()", "class_method_signature": "DateTimePeriodDataUtil.DateTimePeriodDataUtil()", "testcase": false, "constructor": true}, {"identifier": "fill", "parameters": "(Class<T> type, Map<DateTime,T> dataset, List<DateTimePeriod> periods)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "void", "signature": "void fill(Class<T> type, Map<DateTime,T> dataset, List<DateTimePeriod> periods)", "full_signature": "@SuppressWarnings(\"unchecked\") public static void fill(Class<T> type, Map<DateTime,T> dataset, List<DateTimePeriod> periods)", "class_method_signature": "DateTimePeriodDataUtil.fill(Class<T> type, Map<DateTime,T> dataset, List<DateTimePeriod> periods)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/time/DateTimePeriodDataUtil.java"}, "focal_method": {"identifier": "fill", "parameters": "(Class<T> type, Map<DateTime,T> dataset, List<DateTimePeriod> periods)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    public static <T extends DateTimePeriodData> void fill(Class<T> type, Map<DateTime,T> dataset, List<DateTimePeriod> periods) {\n        // loop thru every period, check its it starting time exists in the dataset\n        for (DateTimePeriod period : periods) {\n            if (dataset.containsKey(period.getStart())) {\n                // do nothing\n            } else {\n                // add a default entry\n                try {\n                    Constructor ctor = type.getConstructor(DateTimePeriod.class);\n                    T data = (T)ctor.newInstance(period);\n                    dataset.put(period.getStart(), data);\n                } catch (Exception e) {\n                    throw new RuntimeException(\"Failed to create default dataset entry\", e);\n                }\n            }\n        }\n    }", "signature": "void fill(Class<T> type, Map<DateTime,T> dataset, List<DateTimePeriod> periods)", "full_signature": "@SuppressWarnings(\"unchecked\") public static void fill(Class<T> type, Map<DateTime,T> dataset, List<DateTimePeriod> periods)", "class_method_signature": "DateTimePeriodDataUtil.fill(Class<T> type, Map<DateTime,T> dataset, List<DateTimePeriod> periods)", "testcase": false, "constructor": false, "invocations": ["containsKey", "getStart", "getConstructor", "newInstance", "put", "getStart"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}