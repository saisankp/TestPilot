{"test_class": {"identifier": "SubstructureFingerprinterTest", "superclass": "extends AbstractFixedLengthFingerprinterTest", "interfaces": "", "fields": [], "file": "descriptor/fingerprint/src/test/java/org/openscience/cdk/fingerprint/SubstructureFingerprinterTest.java"}, "test_case": {"identifier": "testCountableMACCSBinary2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCountableMACCSBinary2() throws Exception {\n        SmilesParser parser = new SmilesParser(SilentChemObjectBuilder.getInstance());\n        IFingerprinter printer = new SubstructureFingerprinter(StandardSubstructureSets.getCountableMACCSSMARTS());\n        IAtomContainer mol;\n        BitSet bs;\n\n        // Test molecule 1\n        mol = parser.parseSmiles(\"C([S](O)(=O)=O)C1=C(C=CC=C1)CCCC[N+](=O)[O-]\");\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol);\n        Aromaticity.cdkLegacy().apply(mol);\n\n        bs = printer.getBitFingerprint(mol).asBitSet();\n\n        Assert.assertTrue(bs.get(46));\n        Assert.assertTrue(bs.get(27));\n        Assert.assertTrue(bs.get(59));\n        Assert.assertTrue(bs.get(49));\n        Assert.assertTrue(bs.get(111));\n        Assert.assertTrue(bs.get(129));\n        Assert.assertTrue(bs.get(115));\n        Assert.assertTrue(bs.get(120));\n        Assert.assertTrue(bs.get(41));\n\n        Assert.assertFalse(bs.get(93));\n        Assert.assertFalse(bs.get(91));\n        Assert.assertFalse(bs.get(24));\n\n        // Test molecule 2: Diatrizoic acid\n        mol = parser.parseSmiles(\"CC(=O)NC1=C(C(=C(C(=C1I)C(=O)O)I)NC(=O)C)I\");\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol);\n        Aromaticity.cdkLegacy().apply(mol);\n        bs = printer.getBitFingerprint(mol).asBitSet();\n\n        Assert.assertTrue(bs.get(15));\n        Assert.assertTrue(bs.get(135));\n        Assert.assertTrue(bs.get(139));\n        Assert.assertTrue(bs.get(93));\n        Assert.assertTrue(bs.get(73));\n\n        Assert.assertFalse(bs.get(91));\n    }", "signature": "void testCountableMACCSBinary2()", "full_signature": "@Test public void testCountableMACCSBinary2()", "class_method_signature": "SubstructureFingerprinterTest.testCountableMACCSBinary2()", "testcase": true, "constructor": false, "invocations": ["getInstance", "getCountableMACCSSMARTS", "parseSmiles", "percieveAtomTypesAndConfigureAtoms", "apply", "cdkLegacy", "asBitSet", "getBitFingerprint", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertFalse", "get", "assertFalse", "get", "assertFalse", "get", "parseSmiles", "percieveAtomTypesAndConfigureAtoms", "apply", "cdkLegacy", "asBitSet", "getBitFingerprint", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertFalse", "get"]}, "focal_class": {"identifier": "SubstructureFingerprinter", "superclass": "extends AbstractFingerprinter", "interfaces": "implements IFingerprinter", "fields": [{"original_string": "private List<Key> keys = new ArrayList<>();", "modifier": "private", "type": "List<Key>", "declarator": "keys = new ArrayList<>()", "var_name": "keys"}], "methods": [{"identifier": "SubstructureFingerprinter", "parameters": "(String[] smarts)", "modifiers": "public", "return": "", "signature": " SubstructureFingerprinter(String[] smarts)", "full_signature": "public  SubstructureFingerprinter(String[] smarts)", "class_method_signature": "SubstructureFingerprinter.SubstructureFingerprinter(String[] smarts)", "testcase": false, "constructor": true}, {"identifier": "SubstructureFingerprinter", "parameters": "()", "modifiers": "public", "return": "", "signature": " SubstructureFingerprinter()", "full_signature": "public  SubstructureFingerprinter()", "class_method_signature": "SubstructureFingerprinter.SubstructureFingerprinter()", "testcase": false, "constructor": true}, {"identifier": "setSmarts", "parameters": "(String[] smarts)", "modifiers": "private", "return": "void", "signature": "void setSmarts(String[] smarts)", "full_signature": "private void setSmarts(String[] smarts)", "class_method_signature": "SubstructureFingerprinter.setSmarts(String[] smarts)", "testcase": false, "constructor": false}, {"identifier": "getBitFingerprint", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "IBitFingerprint", "signature": "IBitFingerprint getBitFingerprint(IAtomContainer atomContainer)", "full_signature": "@Override public IBitFingerprint getBitFingerprint(IAtomContainer atomContainer)", "class_method_signature": "SubstructureFingerprinter.getBitFingerprint(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getCountFingerprint", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "ICountFingerprint", "signature": "ICountFingerprint getCountFingerprint(IAtomContainer atomContainer)", "full_signature": "@Override public ICountFingerprint getCountFingerprint(IAtomContainer atomContainer)", "class_method_signature": "SubstructureFingerprinter.getCountFingerprint(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getRawFingerprint", "parameters": "(IAtomContainer iAtomContainer)", "modifiers": "@Override public", "return": "Map<String, Integer>", "signature": "Map<String, Integer> getRawFingerprint(IAtomContainer iAtomContainer)", "full_signature": "@Override public Map<String, Integer> getRawFingerprint(IAtomContainer iAtomContainer)", "class_method_signature": "SubstructureFingerprinter.getRawFingerprint(IAtomContainer iAtomContainer)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSize()", "full_signature": "@Override public int getSize()", "class_method_signature": "SubstructureFingerprinter.getSize()", "testcase": false, "constructor": false}, {"identifier": "getSubstructure", "parameters": "(int bitIndex)", "modifiers": "public", "return": "String", "signature": "String getSubstructure(int bitIndex)", "full_signature": "public String getSubstructure(int bitIndex)", "class_method_signature": "SubstructureFingerprinter.getSubstructure(int bitIndex)", "testcase": false, "constructor": false}], "file": "descriptor/fingerprint/src/main/java/org/openscience/cdk/fingerprint/SubstructureFingerprinter.java"}, "focal_method": {"identifier": "getBitFingerprint", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "IBitFingerprint", "body": "@Override\n    public IBitFingerprint getBitFingerprint(IAtomContainer atomContainer) throws CDKException {\n        if (keys.isEmpty()) {\n            throw new CDKException(\"No substructures were defined\");\n        }\n\n        SmartsPattern.prepare(atomContainer);\n        BitSet fingerPrint = new BitSet(keys.size());\n        for (int i = 0; i < keys.size(); i++) {\n            if (keys.get(i).pattern.matches(atomContainer))\n                fingerPrint.set(i, true);\n        }\n        return new BitSetFingerprint(fingerPrint);\n    }", "signature": "IBitFingerprint getBitFingerprint(IAtomContainer atomContainer)", "full_signature": "@Override public IBitFingerprint getBitFingerprint(IAtomContainer atomContainer)", "class_method_signature": "SubstructureFingerprinter.getBitFingerprint(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "prepare", "size", "size", "matches", "get", "set"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}