{"test_class": {"identifier": "ZookeeperCheckpointManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String SRC_CLUSTER_ZK = ZkStarter.DEFAULT_ZK_STR + \"/\" + TestUtils.SRC_CLUSTER;", "modifier": "private final", "type": "String", "declarator": "SRC_CLUSTER_ZK = ZkStarter.DEFAULT_ZK_STR + \"/\" + TestUtils.SRC_CLUSTER", "var_name": "SRC_CLUSTER_ZK"}, {"original_string": "private final String TEST_TOPIC_PREFIX = \"testZookeeperCheckpointManager\";", "modifier": "private final", "type": "String", "declarator": "TEST_TOPIC_PREFIX = \"testZookeeperCheckpointManager\"", "var_name": "TEST_TOPIC_PREFIX"}, {"original_string": "private Map<TopicPartition, Long> offsetCommitMap = new HashMap<>();", "modifier": "private", "type": "Map<TopicPartition, Long>", "declarator": "offsetCommitMap = new HashMap<>()", "var_name": "offsetCommitMap"}], "file": "uReplicator-Worker-3.0/src/test/java/com/uber/stream/ureplicator/worker/ZookeeperCheckpointManagerTest.java"}, "test_case": {"identifier": "testZookeeperCheckpointManager", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testZookeeperCheckpointManager() {\n    CustomizedConsumerConfig consumerConfig = new CustomizedConsumerConfig(new Properties());\n    consumerConfig.setProperty(\"commit.zookeeper.connect\", SRC_CLUSTER_ZK);\n    String groupId = \"ureplicator-cluster1-cluster2\";\n    ZookeeperCheckpointManager checkpointManager = new ZookeeperCheckpointManager(consumerConfig,\n        groupId);\n\n\n    for (TopicPartition topicPartition : offsetCommitMap.keySet()) {\n      Long offset = checkpointManager.fetchOffset(topicPartition);\n      Assert.assertEquals(offset, Long.valueOf(-1));\n    }\n    checkpointManager.commitOffset(offsetCommitMap);\n\n    for (Map.Entry<TopicPartition, Long> entry : offsetCommitMap.entrySet()) {\n      Long offset = checkpointManager.fetchOffset(entry.getKey());\n      Assert.assertEquals(offset, entry.getValue());\n    }\n  }", "signature": "void testZookeeperCheckpointManager()", "full_signature": "@Test public void testZookeeperCheckpointManager()", "class_method_signature": "ZookeeperCheckpointManagerTest.testZookeeperCheckpointManager()", "testcase": true, "constructor": false, "invocations": ["setProperty", "keySet", "fetchOffset", "assertEquals", "valueOf", "commitOffset", "entrySet", "fetchOffset", "getKey", "assertEquals", "getValue"]}, "focal_class": {"identifier": "ZookeeperCheckpointManager", "superclass": "", "interfaces": "implements ICheckPointManager", "fields": [{"original_string": "private final Executor commitExecutor;", "modifier": "private final", "type": "Executor", "declarator": "commitExecutor", "var_name": "commitExecutor"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ZookeeperCheckpointManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ZookeeperCheckpointManager.class)", "var_name": "LOGGER"}, {"original_string": "private final Map<TopicPartition, Long> offsetCheckpoints = new ConcurrentHashMap();", "modifier": "private final", "type": "Map<TopicPartition, Long>", "declarator": "offsetCheckpoints = new ConcurrentHashMap()", "var_name": "offsetCheckpoints"}, {"original_string": "private final ZkClient commitZkClient;", "modifier": "private final", "type": "ZkClient", "declarator": "commitZkClient", "var_name": "commitZkClient"}, {"original_string": "private final String groupId;", "modifier": "private final", "type": "String", "declarator": "groupId", "var_name": "groupId"}, {"original_string": "protected Meter commitFailure = new Meter();", "modifier": "protected", "type": "Meter", "declarator": "commitFailure = new Meter()", "var_name": "commitFailure"}, {"original_string": "private static final String COMMIT_FAILURE_METER_NAME = \"commitFailure\";", "modifier": "private static final", "type": "String", "declarator": "COMMIT_FAILURE_METER_NAME = \"commitFailure\"", "var_name": "COMMIT_FAILURE_METER_NAME"}], "methods": [{"identifier": "ZookeeperCheckpointManager", "parameters": "(CustomizedConsumerConfig config, String groupId)", "modifiers": "public", "return": "", "signature": " ZookeeperCheckpointManager(CustomizedConsumerConfig config, String groupId)", "full_signature": "public  ZookeeperCheckpointManager(CustomizedConsumerConfig config, String groupId)", "class_method_signature": "ZookeeperCheckpointManager.ZookeeperCheckpointManager(CustomizedConsumerConfig config, String groupId)", "testcase": false, "constructor": true}, {"identifier": "commitOffset", "parameters": "(Map<TopicPartition, Long> topicPartitionOffsets)", "modifiers": "public", "return": "void", "signature": "void commitOffset(Map<TopicPartition, Long> topicPartitionOffsets)", "full_signature": "public void commitOffset(Map<TopicPartition, Long> topicPartitionOffsets)", "class_method_signature": "ZookeeperCheckpointManager.commitOffset(Map<TopicPartition, Long> topicPartitionOffsets)", "testcase": false, "constructor": false}, {"identifier": "commitOffsetToZookeeper", "parameters": "(TopicPartition topicPartition, long offset)", "modifiers": "private", "return": "void", "signature": "void commitOffsetToZookeeper(TopicPartition topicPartition, long offset)", "full_signature": "private void commitOffsetToZookeeper(TopicPartition topicPartition, long offset)", "class_method_signature": "ZookeeperCheckpointManager.commitOffsetToZookeeper(TopicPartition topicPartition, long offset)", "testcase": false, "constructor": false}, {"identifier": "fetchOffset", "parameters": "(TopicPartition topicPartition)", "modifiers": "public", "return": "Long", "signature": "Long fetchOffset(TopicPartition topicPartition)", "full_signature": "public Long fetchOffset(TopicPartition topicPartition)", "class_method_signature": "ZookeeperCheckpointManager.fetchOffset(TopicPartition topicPartition)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "ZookeeperCheckpointManager.shutdown()", "testcase": false, "constructor": false}], "file": "uReplicator-Worker-3.0/src/main/java/com/uber/stream/ureplicator/worker/ZookeeperCheckpointManager.java"}, "focal_method": {"identifier": "ZookeeperCheckpointManager", "parameters": "(CustomizedConsumerConfig config, String groupId)", "modifiers": "public", "return": "", "body": "public ZookeeperCheckpointManager(CustomizedConsumerConfig config, String groupId) {\n    this.commitZkClient = ZkUtils.createZkClient(\n        config.getProperty(Constants.COMMIT_ZOOKEEPER_SERVER_CONFIG),\n        config.getInt(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, 10000),\n        config.getInt(ConsumerConfig.REQUEST_TIMEOUT_MS_CONFIG, 10000));\n    this.groupId = groupId;\n    this.commitExecutor = Executors.newFixedThreadPool(10);\n    KafkaUReplicatorMetricsReporter.get().registerMetric(COMMIT_FAILURE_METER_NAME, commitFailure);\n  }", "signature": " ZookeeperCheckpointManager(CustomizedConsumerConfig config, String groupId)", "full_signature": "public  ZookeeperCheckpointManager(CustomizedConsumerConfig config, String groupId)", "class_method_signature": "ZookeeperCheckpointManager.ZookeeperCheckpointManager(CustomizedConsumerConfig config, String groupId)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 60201162, "url": "https://github.com/uber/uReplicator", "language": "Java", "is_fork": false, "fork_count": 148, "stargazer_count": 652, "size": 2223, "license": "licensed"}}