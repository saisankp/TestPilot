{"test_class": {"identifier": "JDBCCertRecordStoreTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/impl/JDBCCertRecordStoreTest.java"}, "test_case": {"identifier": "testGetConnection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetConnection() throws SQLException {\n        PoolableDataSource mockDataSrc = Mockito.mock(PoolableDataSource.class);\n        Connection mockConn = Mockito.mock(Connection.class);\n        Mockito.doReturn(mockConn).when(mockDataSrc).getConnection();\n        JDBCCertRecordStore store = new JDBCCertRecordStore(mockDataSrc);\n        assertNotNull(store.getConnection());\n        store.clearConnections();\n    }", "signature": "void testGetConnection()", "full_signature": "@Test public void testGetConnection()", "class_method_signature": "JDBCCertRecordStoreTest.testGetConnection()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "getConnection", "when", "doReturn", "assertNotNull", "getConnection", "clearConnections"]}, "focal_class": {"identifier": "JDBCCertRecordStore", "superclass": "", "interfaces": "implements CertRecordStore", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(JDBCCertRecordStore.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(JDBCCertRecordStore.class)", "var_name": "LOGGER"}, {"original_string": "private static final Logger CERTLOGGER = LoggerFactory.getLogger(\"X509CertLogger\");", "modifier": "private static final", "type": "Logger", "declarator": "CERTLOGGER = LoggerFactory.getLogger(\"X509CertLogger\")", "var_name": "CERTLOGGER"}, {"original_string": "PoolableDataSource src;", "modifier": "", "type": "PoolableDataSource", "declarator": "src", "var_name": "src"}, {"original_string": "private int opTimeout = 10;", "modifier": "private", "type": "int", "declarator": "opTimeout = 10", "var_name": "opTimeout"}], "methods": [{"identifier": "JDBCCertRecordStore", "parameters": "(PoolableDataSource src)", "modifiers": "public", "return": "", "signature": " JDBCCertRecordStore(PoolableDataSource src)", "full_signature": "public  JDBCCertRecordStore(PoolableDataSource src)", "class_method_signature": "JDBCCertRecordStore.JDBCCertRecordStore(PoolableDataSource src)", "testcase": false, "constructor": true}, {"identifier": "getConnection", "parameters": "()", "modifiers": "@Override public", "return": "CertRecordStoreConnection", "signature": "CertRecordStoreConnection getConnection()", "full_signature": "@Override public CertRecordStoreConnection getConnection()", "class_method_signature": "JDBCCertRecordStore.getConnection()", "testcase": false, "constructor": false}, {"identifier": "setOperationTimeout", "parameters": "(int opTimeout)", "modifiers": "@Override public", "return": "void", "signature": "void setOperationTimeout(int opTimeout)", "full_signature": "@Override public void setOperationTimeout(int opTimeout)", "class_method_signature": "JDBCCertRecordStore.setOperationTimeout(int opTimeout)", "testcase": false, "constructor": false}, {"identifier": "clearConnections", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearConnections()", "full_signature": "@Override public void clearConnections()", "class_method_signature": "JDBCCertRecordStore.clearConnections()", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(final Principal principal, final String ip, final String provider,\n                    final String instanceId, final X509Certificate x509Cert)", "modifiers": "@Override public", "return": "void", "signature": "void log(final Principal principal, final String ip, final String provider,\n                    final String instanceId, final X509Certificate x509Cert)", "full_signature": "@Override public void log(final Principal principal, final String ip, final String provider,\n                    final String instanceId, final X509Certificate x509Cert)", "class_method_signature": "JDBCCertRecordStore.log(final Principal principal, final String ip, final String provider,\n                    final String instanceId, final X509Certificate x509Cert)", "testcase": false, "constructor": false}, {"identifier": "enableNotifications", "parameters": "(NotificationManager notificationManager, RolesProvider rolesProvider, final String serverName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean enableNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, final String serverName)", "full_signature": "@Override public boolean enableNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, final String serverName)", "class_method_signature": "JDBCCertRecordStore.enableNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, final String serverName)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/JDBCCertRecordStore.java"}, "focal_method": {"identifier": "getConnection", "parameters": "()", "modifiers": "@Override public", "return": "CertRecordStoreConnection", "body": "@Override\n    public CertRecordStoreConnection getConnection() {\n        try {\n            JDBCCertRecordStoreConnection jdbcConn = new JDBCCertRecordStoreConnection(src.getConnection());\n            jdbcConn.setOperationTimeout(opTimeout);\n            return jdbcConn;\n        } catch (SQLException ex) {\n            LOGGER.error(\"getConnection: {}\", ex.getMessage());\n            throw new ResourceException(ResourceException.SERVICE_UNAVAILABLE, ex.getMessage());\n        }\n    }", "signature": "CertRecordStoreConnection getConnection()", "full_signature": "@Override public CertRecordStoreConnection getConnection()", "class_method_signature": "JDBCCertRecordStore.getConnection()", "testcase": false, "constructor": false, "invocations": ["getConnection", "setOperationTimeout", "error", "getMessage", "getMessage"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}