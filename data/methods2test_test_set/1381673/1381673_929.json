{"test_class": {"identifier": "RuleSheetParserUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-decisiontables/src/test/java/org/drools/decisiontable/parser/RuleSheetParserUtilTest.java"}, "test_case": {"identifier": "testListImports", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testListImports() {\n        List<String> cellVals = null;\n\n        List<Import> list = RuleSheetParserUtil.getImportList( cellVals );\n        assertNotNull( list );\n        assertEquals( 0, list.size() );\n\n        cellVals = new ArrayList<String>();\n        cellVals.add( \"\" );\n        assertEquals( 0, RuleSheetParserUtil.getImportList( cellVals ).size() );\n\n        cellVals.add( 0, \"com.something.Yeah, com.something.No,com.something.yeah.*\" );\n        list = RuleSheetParserUtil.getImportList( cellVals );\n        assertEquals( 3, list.size() );\n        assertEquals( \"com.something.Yeah\",   (list.get( 0 )).getClassName() );\n        assertEquals( \"com.something.No\",     (list.get( 1 )).getClassName() );\n        assertEquals( \"com.something.yeah.*\", (list.get( 2 )).getClassName() );\n    }", "signature": "void testListImports()", "full_signature": "@Test public void testListImports()", "class_method_signature": "RuleSheetParserUtilTest.testListImports()", "testcase": true, "constructor": false, "invocations": ["getImportList", "assertNotNull", "assertEquals", "size", "add", "assertEquals", "size", "getImportList", "add", "getImportList", "assertEquals", "size", "assertEquals", "getClassName", "get", "assertEquals", "getClassName", "get", "assertEquals", "getClassName", "get"]}, "focal_class": {"identifier": "RuleSheetParserUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "RuleSheetParserUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " RuleSheetParserUtil()", "full_signature": "private  RuleSheetParserUtil()", "class_method_signature": "RuleSheetParserUtil.RuleSheetParserUtil()", "testcase": false, "constructor": true}, {"identifier": "getRuleName", "parameters": "(final String ruleRow)", "modifiers": "public static", "return": "String", "signature": "String getRuleName(final String ruleRow)", "full_signature": "public static String getRuleName(final String ruleRow)", "class_method_signature": "RuleSheetParserUtil.getRuleName(final String ruleRow)", "testcase": false, "constructor": false}, {"identifier": "invalidRuleTableDef", "parameters": "(final String ruleRow)", "modifiers": "private static", "return": "void", "signature": "void invalidRuleTableDef(final String ruleRow)", "full_signature": "private static void invalidRuleTableDef(final String ruleRow)", "class_method_signature": "RuleSheetParserUtil.invalidRuleTableDef(final String ruleRow)", "testcase": false, "constructor": false}, {"identifier": "getImportList", "parameters": "(final List<String> importCells)", "modifiers": "public static", "return": "List<Import>", "signature": "List<Import> getImportList(final List<String> importCells)", "full_signature": "public static List<Import> getImportList(final List<String> importCells)", "class_method_signature": "RuleSheetParserUtil.getImportList(final List<String> importCells)", "testcase": false, "constructor": false}, {"identifier": "getVariableList", "parameters": "( final List<String> variableCells )", "modifiers": "public static", "return": "List<Global>", "signature": "List<Global> getVariableList( final List<String> variableCells )", "full_signature": "public static List<Global> getVariableList( final List<String> variableCells )", "class_method_signature": "RuleSheetParserUtil.getVariableList( final List<String> variableCells )", "testcase": false, "constructor": false}, {"identifier": "isStringMeaningTrue", "parameters": "(String property)", "modifiers": "public static", "return": "boolean", "signature": "boolean isStringMeaningTrue(String property)", "full_signature": "public static boolean isStringMeaningTrue(String property)", "class_method_signature": "RuleSheetParserUtil.isStringMeaningTrue(String property)", "testcase": false, "constructor": false}, {"identifier": "rc2name", "parameters": "( int row, int col )", "modifiers": "public static", "return": "String", "signature": "String rc2name( int row, int col )", "full_signature": "public static String rc2name( int row, int col )", "class_method_signature": "RuleSheetParserUtil.rc2name( int row, int col )", "testcase": false, "constructor": false}], "file": "drools-decisiontables/src/main/java/org/drools/decisiontable/parser/RuleSheetParserUtil.java"}, "focal_method": {"identifier": "getImportList", "parameters": "(final List<String> importCells)", "modifiers": "public static", "return": "List<Import>", "body": "public static List<Import> getImportList(final List<String> importCells) {\n        final List<Import> importList = new ArrayList<Import>();\n        if ( importCells == null ) return importList;\n\n        for( String importCell: importCells ){\n            final StringTokenizer tokens = new StringTokenizer( importCell, \",\" );\n            while ( tokens.hasMoreTokens() ) {\n                final Import imp = new Import();\n                imp.setClassName( tokens.nextToken().trim() );\n                importList.add( imp );\n            }\n        }\n        return importList;\n    }", "signature": "List<Import> getImportList(final List<String> importCells)", "full_signature": "public static List<Import> getImportList(final List<String> importCells)", "class_method_signature": "RuleSheetParserUtil.getImportList(final List<String> importCells)", "testcase": false, "constructor": false, "invocations": ["hasMoreTokens", "setClassName", "trim", "nextToken", "add"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}