{"test_class": {"identifier": "FeatureHasherMapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/feature/FeatureHasherMapperTest.java"}, "test_case": {"identifier": "test3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test3() throws Exception {\n        TableSchema schema = new TableSchema(new String[] {\"double\", \"bool\", \"number\", \"str\"},\n            new TypeInformation<?>[] {Types.DOUBLE(), Types.BOOLEAN(), Types.STRING(), Types.STRING()});\n\n        Params params = new Params()\n            .set(FeatureHasherParams.SELECTED_COLS, new String[] {\"double\", \"bool\", \"number\", \"str\"})\n            .set(FeatureHasherParams.OUTPUT_COL, \"output\")\n            .set(FeatureHasherParams.NUM_FEATURES, 10)\n            .set(FeatureHasherParams.CATEGORICAL_COLS, new String[] {\"double\"});\n\n        FeatureHasherMapper mapper = new FeatureHasherMapper(schema, params);\n\n        assertEquals(mapper.map(Row.of(1.1, true, \"2\", \"A\")).getField(4),\n            new SparseVector(10, new int[]{0, 5, 9}, new double[]{1.0, 2.0, 1.0}));\n        assertEquals(mapper.map(Row.of(2.1, true, \"1\", \"B\")).getField(4),\n            new SparseVector(10, new int[]{1, 5, 6}, new double[]{2.0, 1.0, 1.0}));\n    }", "signature": "void test3()", "full_signature": "@Test public void test3()", "class_method_signature": "FeatureHasherMapperTest.test3()", "testcase": true, "constructor": false, "invocations": ["DOUBLE", "BOOLEAN", "STRING", "STRING", "set", "set", "set", "set", "assertEquals", "getField", "map", "of", "assertEquals", "getField", "map", "of"]}, "focal_class": {"identifier": "FeatureHasherMapper", "superclass": "extends Mapper", "interfaces": "", "fields": [{"original_string": "private int[] numericColIndexes, categoricalColIndexes;", "modifier": "private", "type": "int[]", "declarator": "numericColIndexes", "var_name": "numericColIndexes"}, {"original_string": "private OutputColsHelper outputColsHelper;", "modifier": "private", "type": "OutputColsHelper", "declarator": "outputColsHelper", "var_name": "outputColsHelper"}, {"original_string": "private static final HashFunction HASH = murmur3_32(0);", "modifier": "private static final", "type": "HashFunction", "declarator": "HASH = murmur3_32(0)", "var_name": "HASH"}, {"original_string": "private int numFeature;", "modifier": "private", "type": "int", "declarator": "numFeature", "var_name": "numFeature"}, {"original_string": "private String[] colNames;", "modifier": "private", "type": "String[]", "declarator": "colNames", "var_name": "colNames"}], "methods": [{"identifier": "FeatureHasherMapper", "parameters": "(TableSchema dataSchema, Params params)", "modifiers": "public", "return": "", "signature": " FeatureHasherMapper(TableSchema dataSchema, Params params)", "full_signature": "public  FeatureHasherMapper(TableSchema dataSchema, Params params)", "class_method_signature": "FeatureHasherMapper.FeatureHasherMapper(TableSchema dataSchema, Params params)", "testcase": false, "constructor": true}, {"identifier": "getOutputSchema", "parameters": "()", "modifiers": "@Override public", "return": "TableSchema", "signature": "TableSchema getOutputSchema()", "full_signature": "@Override public TableSchema getOutputSchema()", "class_method_signature": "FeatureHasherMapper.getOutputSchema()", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(Row row)", "modifiers": "@Override public", "return": "Row", "signature": "Row map(Row row)", "full_signature": "@Override public Row map(Row row)", "class_method_signature": "FeatureHasherMapper.map(Row row)", "testcase": false, "constructor": false}, {"identifier": "updateMap", "parameters": "(String s, double value, TreeMap<Integer, Double> feature, int numFeature)", "modifiers": "private static", "return": "void", "signature": "void updateMap(String s, double value, TreeMap<Integer, Double> feature, int numFeature)", "full_signature": "private static void updateMap(String s, double value, TreeMap<Integer, Double> feature, int numFeature)", "class_method_signature": "FeatureHasherMapper.updateMap(String s, double value, TreeMap<Integer, Double> feature, int numFeature)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/feature/FeatureHasherMapper.java"}, "focal_method": {"identifier": "map", "parameters": "(Row row)", "modifiers": "@Override public", "return": "Row", "body": "@Override\n    public Row map(Row row) {\n        TreeMap<Integer, Double> feature = new TreeMap<>();\n        for (int key : numericColIndexes) {\n            if (null != row.getField(key)) {\n                double value = ((Number)row.getField(key)).doubleValue();\n                String colName = colNames[key];\n                updateMap(colName, value, feature, numFeature);\n            }\n        }\n        for (int key : categoricalColIndexes) {\n            if (null != row.getField(key)) {\n                String colName = colNames[key];\n                updateMap(colName + \"=\" + row.getField(key).toString(), 1.0, feature, numFeature);\n            }\n        }\n\n        return outputColsHelper.getResultRow(row, Row.of(new SparseVector(numFeature, feature)));\n    }", "signature": "Row map(Row row)", "full_signature": "@Override public Row map(Row row)", "class_method_signature": "FeatureHasherMapper.map(Row row)", "testcase": false, "constructor": false, "invocations": ["getField", "doubleValue", "getField", "updateMap", "getField", "updateMap", "toString", "getField", "getResultRow", "of"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}