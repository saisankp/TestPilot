{"test_class": {"identifier": "TracingCommandListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final BsonDocument findCommand = BsonDocument\n      .parse(\"{'find': 'test-collection', 'batchSize': 20}\");", "modifier": "private static final", "type": "BsonDocument", "declarator": "findCommand = BsonDocument\n      .parse(\"{'find': 'test-collection', 'batchSize': 20}\")", "var_name": "findCommand"}, {"original_string": "private static final CommandStartedEvent findStartEvent = new CommandStartedEvent(1, null,\n      \"test-database\", \"find\", findCommand);", "modifier": "private static final", "type": "CommandStartedEvent", "declarator": "findStartEvent = new CommandStartedEvent(1, null,\n      \"test-database\", \"find\", findCommand)", "var_name": "findStartEvent"}, {"original_string": "private static final CommandSucceededEvent findSucceededEvent = new CommandSucceededEvent(1, null,\n      \"find\", new BsonDocument(), 150);", "modifier": "private static final", "type": "CommandSucceededEvent", "declarator": "findSucceededEvent = new CommandSucceededEvent(1, null,\n      \"find\", new BsonDocument(), 150)", "var_name": "findSucceededEvent"}, {"original_string": "private static final CommandFailedEvent findFailedEvent = new CommandFailedEvent(1, null, \"find\",\n      125, new Throwable(\"Error!\"));", "modifier": "private static final", "type": "CommandFailedEvent", "declarator": "findFailedEvent = new CommandFailedEvent(1, null, \"find\",\n      125, new Throwable(\"Error!\"))", "var_name": "findFailedEvent"}, {"original_string": "private static final BsonDocument createCommand = BsonDocument\n      .parse(\"{'create': 'test-collection2'}\");", "modifier": "private static final", "type": "BsonDocument", "declarator": "createCommand = BsonDocument\n      .parse(\"{'create': 'test-collection2'}\")", "var_name": "createCommand"}, {"original_string": "private static final CommandStartedEvent createStartEvent = new CommandStartedEvent(2, null,\n      \"test-database\", \"create\", createCommand);", "modifier": "private static final", "type": "CommandStartedEvent", "declarator": "createStartEvent = new CommandStartedEvent(2, null,\n      \"test-database\", \"create\", createCommand)", "var_name": "createStartEvent"}, {"original_string": "private TestTracer tracer;", "modifier": "private", "type": "TestTracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "private TracingCommandListener commandListener;", "modifier": "private", "type": "TracingCommandListener", "declarator": "commandListener", "var_name": "commandListener"}], "file": "mongodb/src/test/java/com/google/cloud/trace/mongodb/TracingCommandListenerTest.java"}, "test_case": {"identifier": "testCommandStarted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCommandStarted() {\n    commandListener.commandStarted(findStartEvent);\n    assertThat(tracer.startSpanEvents).hasSize(1);\n    StartSpanEvent startSpanEvent = tracer.startSpanEvents.get(0);\n    assertThat(startSpanEvent.getName()).isEqualTo(\"find\");\n    assertThat(startSpanEvent.getOptions()).isEqualTo(null);\n    assertThat(tracer.annotateEvents).hasSize(1);\n    AnnotateEvent annotateEvent = tracer.annotateEvents.get(0);\n    assertThat(annotateEvent.getLabels().getLabels()).containsAllOf(\n        new Label(\"/mongodb/commandName\", \"find\"),\n        new Label(\"/mongodb/databaseName\", \"test-database\"),\n        new Label(\"/mongodb/collectionName\", \"test-collection\"),\n        new Label(\"/mongodb/requestId\", \"1\"),\n        new Label(\"/mongodb/batchSize\", \"20\")\n    );\n    assertThat(annotateEvent.getTraceContext()).isEqualTo(startSpanEvent.getTraceContext());\n  }", "signature": "void testCommandStarted()", "full_signature": "@Test public void testCommandStarted()", "class_method_signature": "TracingCommandListenerTest.testCommandStarted()", "testcase": true, "constructor": false, "invocations": ["commandStarted", "hasSize", "assertThat", "get", "isEqualTo", "assertThat", "getName", "isEqualTo", "assertThat", "getOptions", "hasSize", "assertThat", "get", "containsAllOf", "assertThat", "getLabels", "getLabels", "isEqualTo", "assertThat", "getTraceContext", "getTraceContext"]}, "focal_class": {"identifier": "TracingCommandListener", "superclass": "", "interfaces": "implements CommandListener", "fields": [{"original_string": "private final Tracer tracer;", "modifier": "private final", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "private static final Map<String, String> collectionKeyByCommand = new HashMap<String, String>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "collectionKeyByCommand = new HashMap<String, String>()", "var_name": "collectionKeyByCommand"}, {"original_string": "private static final ThreadLocal<MongoDBCommandTraceContext> contexts =\n      new ThreadLocal<MongoDBCommandTraceContext>();", "modifier": "private static final", "type": "ThreadLocal<MongoDBCommandTraceContext>", "declarator": "contexts =\n      new ThreadLocal<MongoDBCommandTraceContext>()", "var_name": "contexts"}], "methods": [{"identifier": "TracingCommandListener", "parameters": "()", "modifiers": "public", "return": "", "signature": " TracingCommandListener()", "full_signature": "public  TracingCommandListener()", "class_method_signature": "TracingCommandListener.TracingCommandListener()", "testcase": false, "constructor": true}, {"identifier": "TracingCommandListener", "parameters": "(Tracer tracer)", "modifiers": "public", "return": "", "signature": " TracingCommandListener(Tracer tracer)", "full_signature": "public  TracingCommandListener(Tracer tracer)", "class_method_signature": "TracingCommandListener.TracingCommandListener(Tracer tracer)", "testcase": false, "constructor": true}, {"identifier": "commandStarted", "parameters": "(CommandStartedEvent event)", "modifiers": "public", "return": "void", "signature": "void commandStarted(CommandStartedEvent event)", "full_signature": "public void commandStarted(CommandStartedEvent event)", "class_method_signature": "TracingCommandListener.commandStarted(CommandStartedEvent event)", "testcase": false, "constructor": false}, {"identifier": "commandSucceeded", "parameters": "(CommandSucceededEvent event)", "modifiers": "public", "return": "void", "signature": "void commandSucceeded(CommandSucceededEvent event)", "full_signature": "public void commandSucceeded(CommandSucceededEvent event)", "class_method_signature": "TracingCommandListener.commandSucceeded(CommandSucceededEvent event)", "testcase": false, "constructor": false}, {"identifier": "commandFailed", "parameters": "(CommandFailedEvent event)", "modifiers": "public", "return": "void", "signature": "void commandFailed(CommandFailedEvent event)", "full_signature": "public void commandFailed(CommandFailedEvent event)", "class_method_signature": "TracingCommandListener.commandFailed(CommandFailedEvent event)", "testcase": false, "constructor": false}], "file": "mongodb/src/main/java/com/google/cloud/trace/mongodb/TracingCommandListener.java"}, "focal_method": {"identifier": "commandStarted", "parameters": "(CommandStartedEvent event)", "modifiers": "public", "return": "void", "body": "public void commandStarted(CommandStartedEvent event) {\n    BsonDocument document = event.getCommand();\n    Labels.Builder labels = Labels.builder();\n    String commandName = event.getCommandName();\n    labels.add(MongoLabels.COMMAND_NAME, commandName);\n    String databaseName = event.getDatabaseName();\n    labels.add(MongoLabels.DATABASE_NAME, databaseName);\n    labels.add(MongoLabels.REQUEST_ID, Integer.toString(event.getRequestId()));\n    if (document.containsKey(\"batchSize\")) {\n      int batchSize = document.getInt32(\"batchSize\").getValue();\n      labels.add(MongoLabels.BATCH_SIZE, Integer.toString(batchSize));\n    }\n    String collectionKey = collectionKeyByCommand.get(commandName);\n    if (collectionKey != null && document.containsKey(collectionKey)) {\n      String collectionName = document.getString(collectionKey).getValue();\n      labels.add(MongoLabels.COLLECTION_NAME, collectionName);\n    }\n\n    TraceContext context = tracer.startSpan(commandName);\n    tracer.annotateSpan(context, labels.build());\n    contexts.set(new MongoDBCommandTraceContext(context, event.getRequestId()));\n  }", "signature": "void commandStarted(CommandStartedEvent event)", "full_signature": "public void commandStarted(CommandStartedEvent event)", "class_method_signature": "TracingCommandListener.commandStarted(CommandStartedEvent event)", "testcase": false, "constructor": false, "invocations": ["getCommand", "builder", "getCommandName", "add", "getDatabaseName", "add", "add", "toString", "getRequestId", "containsKey", "getValue", "getInt32", "add", "toString", "get", "containsKey", "getValue", "getString", "add", "startSpan", "annotateSpan", "build", "set", "getRequestId"]}, "repository": {"repo_id": 74059585, "url": "https://github.com/GoogleCloudPlatform/cloud-trace-java-instrumentation", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 10, "size": 141, "license": "licensed"}}