{"test_class": {"identifier": "TimeZoneUtilityTest", "superclass": "", "interfaces": "", "fields": [], "file": "Plan/common/src/test/java/com/djrapitops/plan/settings/config/TimeZoneUtilityTest.java"}, "test_case": {"identifier": "serverReturnsServerTimeZone", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void serverReturnsServerTimeZone() {\n        Optional<TimeZone> result = TimeZoneUtility.parseTimeZone(\"server\");\n        assertTrue(result.isPresent());\n        assertEquals(TimeZone.getDefault(), result.get());\n    }", "signature": "void serverReturnsServerTimeZone()", "full_signature": "@Test void serverReturnsServerTimeZone()", "class_method_signature": "TimeZoneUtilityTest.serverReturnsServerTimeZone()", "testcase": true, "constructor": false, "invocations": ["parseTimeZone", "assertTrue", "isPresent", "assertEquals", "getDefault", "get"]}, "focal_class": {"identifier": "TimeZoneUtility", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "TimeZoneUtility", "parameters": "()", "modifiers": "private", "return": "", "signature": " TimeZoneUtility()", "full_signature": "private  TimeZoneUtility()", "class_method_signature": "TimeZoneUtility.TimeZoneUtility()", "testcase": false, "constructor": true}, {"identifier": "parseTimeZone", "parameters": "(String value)", "modifiers": "public static", "return": "Optional<TimeZone>", "signature": "Optional<TimeZone> parseTimeZone(String value)", "full_signature": "public static Optional<TimeZone> parseTimeZone(String value)", "class_method_signature": "TimeZoneUtility.parseTimeZone(String value)", "testcase": false, "constructor": false}], "file": "Plan/common/src/main/java/com/djrapitops/plan/settings/config/TimeZoneUtility.java"}, "focal_method": {"identifier": "parseTimeZone", "parameters": "(String value)", "modifiers": "public static", "return": "Optional<TimeZone>", "body": "public static Optional<TimeZone> parseTimeZone(String value) {\n        if (\"server\".equalsIgnoreCase(value)) return Optional.of(TimeZone.getDefault());\n\n        try {\n            ZoneId zoneId = ZoneId.of(value);\n            return Optional.of(TimeZone.getTimeZone(zoneId));\n        } catch (DateTimeException notFound) {\n            return Optional.empty();\n        }\n    }", "signature": "Optional<TimeZone> parseTimeZone(String value)", "full_signature": "public static Optional<TimeZone> parseTimeZone(String value)", "class_method_signature": "TimeZoneUtility.parseTimeZone(String value)", "testcase": false, "constructor": false, "invocations": ["equalsIgnoreCase", "of", "getDefault", "of", "of", "getTimeZone", "empty"]}, "repository": {"repo_id": 75960287, "url": "https://github.com/plan-player-analytics/Plan", "stars": 172, "created": "12/8/2016 5:34:11 PM +00:00", "updates": "2020-01-27T14:34:49+00:00", "fork": "False", "license": "licensed"}}