{"test_class": {"identifier": "CheckLastTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/modelling/arima/CheckLastTest.java"}, "test_case": {"identifier": "testSO", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSO() {\n        TramoSpecification spec = TramoSpecification.TRfull.clone();\n        spec.getOutliers().add(OutlierType.SO);\n        spec.getOutliers().setCriticalValue(3);\n        CheckLast cl=new CheckLast(spec.build());\n        assertTrue(cl.check(Data.P));\n    }", "signature": "void testSO()", "full_signature": "@Test public void testSO()", "class_method_signature": "CheckLastTest.testSO()", "testcase": true, "constructor": false, "invocations": ["clone", "add", "getOutliers", "setCriticalValue", "getOutliers", "build", "assertTrue", "check"]}, "focal_class": {"identifier": "CheckLast", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final IPreprocessor preprocessor_;", "modifier": "private final", "type": "IPreprocessor", "declarator": "preprocessor_", "var_name": "preprocessor_"}, {"original_string": "private PreprocessingModel model_;", "modifier": "private", "type": "PreprocessingModel", "declarator": "model_", "var_name": "model_"}, {"original_string": "private InformationSet info_;", "modifier": "private", "type": "InformationSet", "declarator": "info_", "var_name": "info_"}, {"original_string": "private Forecasts forecasts_;", "modifier": "private", "type": "Forecasts", "declarator": "forecasts_", "var_name": "forecasts_"}, {"original_string": "private TsData y_, fy_, ofcasts_;", "modifier": "private", "type": "TsData", "declarator": "y_", "var_name": "y_"}, {"original_string": "private int nback_ = 1;", "modifier": "private", "type": "int", "declarator": "nback_ = 1", "var_name": "nback_"}, {"original_string": "public final static int MAX_REPEAT_COUNT = 80, MAX_MISSING_COUNT = 33;", "modifier": "public final static", "type": "int", "declarator": "MAX_REPEAT_COUNT = 80", "var_name": "MAX_REPEAT_COUNT"}], "methods": [{"identifier": "CheckLast", "parameters": "(IPreprocessor preprocessor)", "modifiers": "public", "return": "", "signature": " CheckLast(IPreprocessor preprocessor)", "full_signature": "public  CheckLast(IPreprocessor preprocessor)", "class_method_signature": "CheckLast.CheckLast(IPreprocessor preprocessor)", "testcase": false, "constructor": true}, {"identifier": "check", "parameters": "(TsData data)", "modifiers": "public", "return": "boolean", "signature": "boolean check(TsData data)", "full_signature": "public boolean check(TsData data)", "class_method_signature": "CheckLast.check(TsData data)", "testcase": false, "constructor": false}, {"identifier": "getForecast", "parameters": "()", "modifiers": "public", "return": "Forecasts", "signature": "Forecasts getForecast()", "full_signature": "public Forecasts getForecast()", "class_method_signature": "CheckLast.getForecast()", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getValues()", "full_signature": "public double[] getValues()", "class_method_signature": "CheckLast.getValues()", "testcase": false, "constructor": false}, {"identifier": "getActualValues", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getActualValues()", "full_signature": "public double[] getActualValues()", "class_method_signature": "CheckLast.getActualValues()", "testcase": false, "constructor": false}, {"identifier": "getAbsoluteErrors", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getAbsoluteErrors()", "full_signature": "public double[] getAbsoluteErrors()", "class_method_signature": "CheckLast.getAbsoluteErrors()", "testcase": false, "constructor": false}, {"identifier": "getAbsoluteError", "parameters": "(int i)", "modifiers": "public", "return": "double", "signature": "double getAbsoluteError(int i)", "full_signature": "public double getAbsoluteError(int i)", "class_method_signature": "CheckLast.getAbsoluteError(int i)", "testcase": false, "constructor": false}, {"identifier": "getForecastsValues", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getForecastsValues()", "full_signature": "public double[] getForecastsValues()", "class_method_signature": "CheckLast.getForecastsValues()", "testcase": false, "constructor": false}, {"identifier": "getScores", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getScores()", "full_signature": "public double[] getScores()", "class_method_signature": "CheckLast.getScores()", "testcase": false, "constructor": false}, {"identifier": "getRelativeErrors", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getRelativeErrors()", "full_signature": "public double[] getRelativeErrors()", "class_method_signature": "CheckLast.getRelativeErrors()", "testcase": false, "constructor": false}, {"identifier": "getScore", "parameters": "(int i)", "modifiers": "public", "return": "double", "signature": "double getScore(int i)", "full_signature": "public double getScore(int i)", "class_method_signature": "CheckLast.getScore(int i)", "testcase": false, "constructor": false}, {"identifier": "getRelativeError", "parameters": "(int i)", "modifiers": "public", "return": "double", "signature": "double getRelativeError(int i)", "full_signature": "public double getRelativeError(int i)", "class_method_signature": "CheckLast.getRelativeError(int i)", "testcase": false, "constructor": false}, {"identifier": "getInformation", "parameters": "()", "modifiers": "public", "return": "InformationSet", "signature": "InformationSet getInformation()", "full_signature": "public InformationSet getInformation()", "class_method_signature": "CheckLast.getInformation()", "testcase": false, "constructor": false}, {"identifier": "getBackCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBackCount()", "full_signature": "public int getBackCount()", "class_method_signature": "CheckLast.getBackCount()", "testcase": false, "constructor": false}, {"identifier": "setBackCount", "parameters": "(int n)", "modifiers": "public", "return": "void", "signature": "void setBackCount(int n)", "full_signature": "public void setBackCount(int n)", "class_method_signature": "CheckLast.setBackCount(int n)", "testcase": false, "constructor": false}, {"identifier": "getEstimatedModel", "parameters": "()", "modifiers": "public", "return": "PreprocessingModel", "signature": "PreprocessingModel getEstimatedModel()", "full_signature": "public PreprocessingModel getEstimatedModel()", "class_method_signature": "CheckLast.getEstimatedModel()", "testcase": false, "constructor": false}, {"identifier": "testSeries", "parameters": "(final TsData y)", "modifiers": "public", "return": "boolean", "signature": "boolean testSeries(final TsData y)", "full_signature": "public boolean testSeries(final TsData y)", "class_method_signature": "CheckLast.testSeries(final TsData y)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void clear()", "full_signature": "private void clear()", "class_method_signature": "CheckLast.clear()", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/modelling/arima/CheckLast.java"}, "focal_method": {"identifier": "check", "parameters": "(TsData data)", "modifiers": "public", "return": "boolean", "body": "public boolean check(TsData data) {\n\n        clear();\n        if (!testSeries(data)) {\n            return false;\n        }\n        ModellingContext context = new ModellingContext();\n        model_ = preprocessor_.process(data.drop(0, nback_), context);\n        if (model_ == null) {\n            return false;\n        }\n\n        info_ = context.information;\n        TsVariableList vars = model_.description.buildRegressionVariables();\n        TsDomain fdomain = new TsDomain(model_.description.getSeriesDomain().getEnd(), nback_);\n        List<DataBlock> x = vars.all().data(fdomain);\n\n        forecasts_ = new Forecasts();\n\n        RegArimaEstimation<SarimaModel> estimation\n                = new RegArimaEstimation<>(model_.estimation.getRegArima(), model_.estimation.getLikelihood());\n\n        try {\n            forecasts_.calcForecast(estimation, x, nback_, model_.description.getArimaComponent().getFreeParametersCount());\n        } catch (RuntimeException err) {\n            return false;\n        }\n\n        y_ = data.fittoDomain(fdomain);\n        fy_ = y_.clone();\n        ofcasts_ = new TsData(fdomain);\n        for (int i = 0; i < ofcasts_.getLength(); ++i) {\n            ofcasts_.set(i, forecasts_.forecast(i));\n        }\n        model_.backTransform(ofcasts_, true, true);\n\n        List<ITsDataTransformation> transformations = model_.description.transformations();\n        for (ITsDataTransformation tr : transformations) {\n            tr.transform(fy_, null);\n        }\n\n        return true;\n    }", "signature": "boolean check(TsData data)", "full_signature": "public boolean check(TsData data)", "class_method_signature": "CheckLast.check(TsData data)", "testcase": false, "constructor": false, "invocations": ["clear", "testSeries", "process", "drop", "buildRegressionVariables", "getEnd", "getSeriesDomain", "data", "all", "getRegArima", "getLikelihood", "calcForecast", "getFreeParametersCount", "getArimaComponent", "fittoDomain", "clone", "getLength", "set", "forecast", "backTransform", "transformations", "transform"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}