{"test_class": {"identifier": "FilePrivateKeyStoreTest", "superclass": "", "interfaces": "", "fields": [], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/impl/FilePrivateKeyStoreTest.java"}, "test_case": {"identifier": "testRetrieveECPrivateKeyValid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRetrieveECPrivateKeyValid() {\n\n        FilePrivateKeyStoreFactory factory = new FilePrivateKeyStoreFactory();\n        PrivateKeyStore store = factory.create();\n\n        String saveProp = System.getProperty(FilePrivateKeyStore.ATHENZ_PROP_PRIVATE_EC_KEY);\n        System.setProperty(FilePrivateKeyStore.ATHENZ_PROP_PRIVATE_EC_KEY,\n                \"src/test/resources/unit_test_ec_private.key\");\n\n        ServerPrivateKey privKey = store.getPrivateKey(\"zms\", \"localhost\", \"us-east-1\", \"ec\");\n        assertNotNull(privKey);\n\n        if (saveProp == null) {\n            System.clearProperty(FilePrivateKeyStore.ATHENZ_PROP_PRIVATE_EC_KEY);\n        } else {\n            System.setProperty(FilePrivateKeyStore.ATHENZ_PROP_PRIVATE_EC_KEY, saveProp);\n        }\n    }", "signature": "void testRetrieveECPrivateKeyValid()", "full_signature": "@Test public void testRetrieveECPrivateKeyValid()", "class_method_signature": "FilePrivateKeyStoreTest.testRetrieveECPrivateKeyValid()", "testcase": true, "constructor": false, "invocations": ["create", "getProperty", "setProperty", "getPrivateKey", "assertNotNull", "clearProperty", "setProperty"]}, "focal_class": {"identifier": "FilePrivateKeyStore", "superclass": "", "interfaces": "implements PrivateKeyStore", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FilePrivateKeyStore.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FilePrivateKeyStore.class)", "var_name": "LOG"}, {"original_string": "public static final String ATHENZ_PROP_PRIVATE_KEY = \"athenz.auth.private_key_store.private_key\";", "modifier": "public static final", "type": "String", "declarator": "ATHENZ_PROP_PRIVATE_KEY = \"athenz.auth.private_key_store.private_key\"", "var_name": "ATHENZ_PROP_PRIVATE_KEY"}, {"original_string": "public static final String ATHENZ_PROP_PRIVATE_KEY_ID = \"athenz.auth.private_key_store.private_key_id\";", "modifier": "public static final", "type": "String", "declarator": "ATHENZ_PROP_PRIVATE_KEY_ID = \"athenz.auth.private_key_store.private_key_id\"", "var_name": "ATHENZ_PROP_PRIVATE_KEY_ID"}, {"original_string": "public static final String ATHENZ_PROP_PRIVATE_EC_KEY = \"athenz.auth.private_key_store.private_ec_key\";", "modifier": "public static final", "type": "String", "declarator": "ATHENZ_PROP_PRIVATE_EC_KEY = \"athenz.auth.private_key_store.private_ec_key\"", "var_name": "ATHENZ_PROP_PRIVATE_EC_KEY"}, {"original_string": "public static final String ATHENZ_PROP_PRIVATE_EC_KEY_ID = \"athenz.auth.private_key_store.private_ec_key_id\";", "modifier": "public static final", "type": "String", "declarator": "ATHENZ_PROP_PRIVATE_EC_KEY_ID = \"athenz.auth.private_key_store.private_ec_key_id\"", "var_name": "ATHENZ_PROP_PRIVATE_EC_KEY_ID"}, {"original_string": "public static final String ATHENZ_PROP_PRIVATE_RSA_KEY = \"athenz.auth.private_key_store.private_rsa_key\";", "modifier": "public static final", "type": "String", "declarator": "ATHENZ_PROP_PRIVATE_RSA_KEY = \"athenz.auth.private_key_store.private_rsa_key\"", "var_name": "ATHENZ_PROP_PRIVATE_RSA_KEY"}, {"original_string": "public static final String ATHENZ_PROP_PRIVATE_RSA_KEY_ID = \"athenz.auth.private_key_store.private_rsa_key_id\";", "modifier": "public static final", "type": "String", "declarator": "ATHENZ_PROP_PRIVATE_RSA_KEY_ID = \"athenz.auth.private_key_store.private_rsa_key_id\"", "var_name": "ATHENZ_PROP_PRIVATE_RSA_KEY_ID"}, {"original_string": "private static final String ZMS_SERVICE = \"zms\";", "modifier": "private static final", "type": "String", "declarator": "ZMS_SERVICE = \"zms\"", "var_name": "ZMS_SERVICE"}, {"original_string": "private static final String ZTS_SERVICE = \"zts\";", "modifier": "private static final", "type": "String", "declarator": "ZTS_SERVICE = \"zts\"", "var_name": "ZTS_SERVICE"}, {"original_string": "private static final String ALGO_RSA = \"RSA\";", "modifier": "private static final", "type": "String", "declarator": "ALGO_RSA = \"RSA\"", "var_name": "ALGO_RSA"}, {"original_string": "private static final String ALGO_EC = \"EC\";", "modifier": "private static final", "type": "String", "declarator": "ALGO_EC = \"EC\"", "var_name": "ALGO_EC"}], "methods": [{"identifier": "FilePrivateKeyStore", "parameters": "()", "modifiers": "public", "return": "", "signature": " FilePrivateKeyStore()", "full_signature": "public  FilePrivateKeyStore()", "class_method_signature": "FilePrivateKeyStore.FilePrivateKeyStore()", "testcase": false, "constructor": true}, {"identifier": "getPrivateKey", "parameters": "(String service, String serverHostName,\n            String serverRegion, String algorithm)", "modifiers": "@Override public", "return": "ServerPrivateKey", "signature": "ServerPrivateKey getPrivateKey(String service, String serverHostName,\n            String serverRegion, String algorithm)", "full_signature": "@Override public ServerPrivateKey getPrivateKey(String service, String serverHostName,\n            String serverRegion, String algorithm)", "class_method_signature": "FilePrivateKeyStore.getPrivateKey(String service, String serverHostName,\n            String serverRegion, String algorithm)", "testcase": false, "constructor": false}, {"identifier": "getPrivateKey", "parameters": "(String service, String serverHostName,\n            StringBuilder privateKeyId)", "modifiers": "@Override public", "return": "PrivateKey", "signature": "PrivateKey getPrivateKey(String service, String serverHostName,\n            StringBuilder privateKeyId)", "full_signature": "@Override public PrivateKey getPrivateKey(String service, String serverHostName,\n            StringBuilder privateKeyId)", "class_method_signature": "FilePrivateKeyStore.getPrivateKey(String service, String serverHostName,\n            StringBuilder privateKeyId)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/FilePrivateKeyStore.java"}, "focal_method": {"identifier": "getPrivateKey", "parameters": "(String service, String serverHostName,\n            String serverRegion, String algorithm)", "modifiers": "@Override public", "return": "ServerPrivateKey", "body": "@Override\n    public ServerPrivateKey getPrivateKey(String service, String serverHostName,\n            String serverRegion, String algorithm) {\n\n        // validate our service and algorithm values\n\n        if (!ZMS_SERVICE.equalsIgnoreCase(service) && !ZTS_SERVICE.equalsIgnoreCase(service)) {\n            LOG.error(\"FilePrivateKeyStore: unknown service: {}\", service);\n            return null;\n        }\n\n        if (!ALGO_RSA.equalsIgnoreCase(algorithm) && !ALGO_EC.equalsIgnoreCase(algorithm)) {\n            LOG.error(\"FilePrivateKeyStore: unknown algorithm: {}\", algorithm);\n            return null;\n        }\n\n        String privKeyName;\n        String privKeyId;\n        if (ALGO_RSA.equalsIgnoreCase(algorithm)) {\n            privKeyName = System.getProperty(ATHENZ_PROP_PRIVATE_RSA_KEY);\n            privKeyId = System.getProperty(ATHENZ_PROP_PRIVATE_RSA_KEY_ID, \"0\");\n        } else {\n            privKeyName = System.getProperty(ATHENZ_PROP_PRIVATE_EC_KEY);\n            privKeyId = System.getProperty(ATHENZ_PROP_PRIVATE_EC_KEY_ID, \"0\");\n        }\n\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"FilePrivateKeyStore: private key file: {}, id: {}\", privKeyName, privKeyId);\n        }\n\n        if (privKeyName == null) {\n            return null;\n        }\n\n        // check to see if this is running in dev mode and thus it's\n        // a resource in our jar file\n\n        File privKeyFile = new File(privKeyName);\n        PrivateKey pkey = Crypto.loadPrivateKey(privKeyFile);\n\n        ServerPrivateKey privateKey = null;\n        if (pkey != null) {\n            privateKey = new ServerPrivateKey(pkey, privKeyId);\n        }\n        return privateKey;\n    }", "signature": "ServerPrivateKey getPrivateKey(String service, String serverHostName,\n            String serverRegion, String algorithm)", "full_signature": "@Override public ServerPrivateKey getPrivateKey(String service, String serverHostName,\n            String serverRegion, String algorithm)", "class_method_signature": "FilePrivateKeyStore.getPrivateKey(String service, String serverHostName,\n            String serverRegion, String algorithm)", "testcase": false, "constructor": false, "invocations": ["equalsIgnoreCase", "equalsIgnoreCase", "error", "equalsIgnoreCase", "equalsIgnoreCase", "error", "equalsIgnoreCase", "getProperty", "getProperty", "getProperty", "getProperty", "isDebugEnabled", "debug", "loadPrivateKey"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}