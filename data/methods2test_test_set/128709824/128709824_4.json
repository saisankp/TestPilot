{"test_class": {"identifier": "BufferRecyclerTest", "superclass": "", "interfaces": "", "fields": [], "file": "codec/codec-api/src/test/java/com/alipay/sofa/rpc/codec/snappy/BufferRecyclerTest.java"}, "test_case": {"identifier": "allocDecodeBuffer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void allocDecodeBuffer() {\n\n        byte[] b = BufferRecycler.instance().allocDecodeBuffer(10);\n        Assert.assertEquals(10, b.length);\n\n        BufferRecycler.instance().releaseDecodeBuffer(b);\n    }", "signature": "void allocDecodeBuffer()", "full_signature": "@Test public void allocDecodeBuffer()", "class_method_signature": "BufferRecyclerTest.allocDecodeBuffer()", "testcase": true, "constructor": false, "invocations": ["allocDecodeBuffer", "instance", "assertEquals", "releaseDecodeBuffer", "instance"]}, "focal_class": {"identifier": "BufferRecycler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static int                                          MIN_ENCODING_BUFFER = 4000;", "modifier": "private final static", "type": "int", "declarator": "MIN_ENCODING_BUFFER = 4000", "var_name": "MIN_ENCODING_BUFFER"}, {"original_string": "private final static int                                          MIN_OUTPUT_BUFFER   = 8000;", "modifier": "private final static", "type": "int", "declarator": "MIN_OUTPUT_BUFFER   = 8000", "var_name": "MIN_OUTPUT_BUFFER"}, {"original_string": "final protected static ThreadLocal<SoftReference<BufferRecycler>> recyclerRef         = new ThreadLocal<SoftReference<BufferRecycler>>();", "modifier": "final protected static", "type": "ThreadLocal<SoftReference<BufferRecycler>>", "declarator": "recyclerRef         = new ThreadLocal<SoftReference<BufferRecycler>>()", "var_name": "recyclerRef"}, {"original_string": "private byte[]                                                    inputBuffer;", "modifier": "private", "type": "byte[]", "declarator": "inputBuffer", "var_name": "inputBuffer"}, {"original_string": "private byte[]                                                    outputBuffer;", "modifier": "private", "type": "byte[]", "declarator": "outputBuffer", "var_name": "outputBuffer"}, {"original_string": "private byte[]                                                    decodingBuffer;", "modifier": "private", "type": "byte[]", "declarator": "decodingBuffer", "var_name": "decodingBuffer"}, {"original_string": "private byte[]                                                    encodingBuffer;", "modifier": "private", "type": "byte[]", "declarator": "encodingBuffer", "var_name": "encodingBuffer"}, {"original_string": "private short[]                                                   encodingHash;", "modifier": "private", "type": "short[]", "declarator": "encodingHash", "var_name": "encodingHash"}], "methods": [{"identifier": "instance", "parameters": "()", "modifiers": "public static", "return": "BufferRecycler", "signature": "BufferRecycler instance()", "full_signature": "public static BufferRecycler instance()", "class_method_signature": "BufferRecycler.instance()", "testcase": false, "constructor": false}, {"identifier": "allocEncodingBuffer", "parameters": "(int minSize)", "modifiers": "public", "return": "byte[]", "signature": "byte[] allocEncodingBuffer(int minSize)", "full_signature": "public byte[] allocEncodingBuffer(int minSize)", "class_method_signature": "BufferRecycler.allocEncodingBuffer(int minSize)", "testcase": false, "constructor": false}, {"identifier": "releaseEncodeBuffer", "parameters": "(byte[] buffer)", "modifiers": "public", "return": "void", "signature": "void releaseEncodeBuffer(byte[] buffer)", "full_signature": "public void releaseEncodeBuffer(byte[] buffer)", "class_method_signature": "BufferRecycler.releaseEncodeBuffer(byte[] buffer)", "testcase": false, "constructor": false}, {"identifier": "allocOutputBuffer", "parameters": "(int minSize)", "modifiers": "public", "return": "byte[]", "signature": "byte[] allocOutputBuffer(int minSize)", "full_signature": "public byte[] allocOutputBuffer(int minSize)", "class_method_signature": "BufferRecycler.allocOutputBuffer(int minSize)", "testcase": false, "constructor": false}, {"identifier": "releaseOutputBuffer", "parameters": "(byte[] buffer)", "modifiers": "public", "return": "void", "signature": "void releaseOutputBuffer(byte[] buffer)", "full_signature": "public void releaseOutputBuffer(byte[] buffer)", "class_method_signature": "BufferRecycler.releaseOutputBuffer(byte[] buffer)", "testcase": false, "constructor": false}, {"identifier": "allocEncodingHash", "parameters": "(int suggestedSize)", "modifiers": "public", "return": "short[]", "signature": "short[] allocEncodingHash(int suggestedSize)", "full_signature": "public short[] allocEncodingHash(int suggestedSize)", "class_method_signature": "BufferRecycler.allocEncodingHash(int suggestedSize)", "testcase": false, "constructor": false}, {"identifier": "releaseEncodingHash", "parameters": "(short[] buffer)", "modifiers": "public", "return": "void", "signature": "void releaseEncodingHash(short[] buffer)", "full_signature": "public void releaseEncodingHash(short[] buffer)", "class_method_signature": "BufferRecycler.releaseEncodingHash(short[] buffer)", "testcase": false, "constructor": false}, {"identifier": "allocInputBuffer", "parameters": "(int minSize)", "modifiers": "public", "return": "byte[]", "signature": "byte[] allocInputBuffer(int minSize)", "full_signature": "public byte[] allocInputBuffer(int minSize)", "class_method_signature": "BufferRecycler.allocInputBuffer(int minSize)", "testcase": false, "constructor": false}, {"identifier": "releaseInputBuffer", "parameters": "(byte[] buffer)", "modifiers": "public", "return": "void", "signature": "void releaseInputBuffer(byte[] buffer)", "full_signature": "public void releaseInputBuffer(byte[] buffer)", "class_method_signature": "BufferRecycler.releaseInputBuffer(byte[] buffer)", "testcase": false, "constructor": false}, {"identifier": "allocDecodeBuffer", "parameters": "(int size)", "modifiers": "public", "return": "byte[]", "signature": "byte[] allocDecodeBuffer(int size)", "full_signature": "public byte[] allocDecodeBuffer(int size)", "class_method_signature": "BufferRecycler.allocDecodeBuffer(int size)", "testcase": false, "constructor": false}, {"identifier": "releaseDecodeBuffer", "parameters": "(byte[] buffer)", "modifiers": "public", "return": "void", "signature": "void releaseDecodeBuffer(byte[] buffer)", "full_signature": "public void releaseDecodeBuffer(byte[] buffer)", "class_method_signature": "BufferRecycler.releaseDecodeBuffer(byte[] buffer)", "testcase": false, "constructor": false}], "file": "codec/codec-api/src/main/java/com/alipay/sofa/rpc/codec/snappy/BufferRecycler.java"}, "focal_method": {"identifier": "allocDecodeBuffer", "parameters": "(int size)", "modifiers": "public", "return": "byte[]", "body": "public byte[] allocDecodeBuffer(int size) {\n        byte[] buf = decodingBuffer;\n        if (buf == null || buf.length < size) {\n            buf = new byte[size];\n        } else {\n            decodingBuffer = null;\n        }\n        return buf;\n    }", "signature": "byte[] allocDecodeBuffer(int size)", "full_signature": "public byte[] allocDecodeBuffer(int size)", "class_method_signature": "BufferRecycler.allocDecodeBuffer(int size)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}