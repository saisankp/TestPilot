{"test_class": {"identifier": "CollectionTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/web3j/utils/CollectionTest.java"}, "test_case": {"identifier": "testJoinWithFunction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testJoinWithFunction() {\n        final List<FakeSpec> specs1 = Arrays.asList(\n                new FakeSpec(\"a\"),\n                new FakeSpec(\"b\"),\n                new FakeSpec(\"c\"));\n        assertThat(join(specs1, \",\", new Function<FakeSpec, String>() {\n            @Override\n            public String apply(FakeSpec fakeSpec) {\n                return fakeSpec.getName();\n            }\n        }), is(\"a,b,c\"));\n\n        final List<FakeSpec> specs2 = Arrays.asList(\n                new FakeSpec(\"a\"),\n                new FakeSpec(\"b\"),\n                new FakeSpec(\"c\"));\n        assertThat(join(specs2, \", \", new Function<FakeSpec, String>() {\n            @Override\n            public String apply(FakeSpec fakeSpec) {\n                return fakeSpec.getName();\n            }\n        }), is(\"a, b, c\"));\n\n        final List<FakeSpec> specs3 = Arrays.asList(\n                new FakeSpec(\" a\"),\n                new FakeSpec(\"b  \"),\n                new FakeSpec(\" c \"));\n        assertThat(join(specs3, \",\", new Function<FakeSpec, String>() {\n            @Override\n            public String apply(FakeSpec fakeSpec) {\n                return fakeSpec.getName();\n            }\n        }), is(\"a,b,c\"));\n\n        final List<FakeSpec> specs4 = Arrays.asList(\n                new FakeSpec(\" a\"),\n                new FakeSpec(\"b  \"),\n                new FakeSpec(\" c \"));\n        assertThat(join(specs4, \", \", new Function<FakeSpec, String>() {\n            @Override\n            public String apply(FakeSpec fakeSpec) {\n                return fakeSpec.getName();\n            }\n        }), is(\"a, b, c\"));\n    }", "signature": "void testJoinWithFunction()", "full_signature": "@Test public void testJoinWithFunction()", "class_method_signature": "CollectionTest.testJoinWithFunction()", "testcase": true, "constructor": false, "invocations": ["asList", "assertThat", "join", "getName", "is", "asList", "assertThat", "join", "getName", "is", "asList", "assertThat", "join", "getName", "is", "asList", "assertThat", "join", "getName", "is"]}, "focal_class": {"identifier": "Collection", "superclass": "", "interfaces": "", "fields": [{"original_string": "static String[] EMPTY_STRING_ARRAY = { };", "modifier": "static", "type": "String[]", "declarator": "EMPTY_STRING_ARRAY = { }", "var_name": "EMPTY_STRING_ARRAY"}], "methods": [{"identifier": "Collection", "parameters": "()", "modifiers": "private", "return": "", "signature": " Collection()", "full_signature": "private  Collection()", "class_method_signature": "Collection.Collection()", "testcase": false, "constructor": true}, {"identifier": "tail", "parameters": "(String[] args)", "modifiers": "public static", "return": "String[]", "signature": "String[] tail(String[] args)", "full_signature": "public static String[] tail(String[] args)", "class_method_signature": "Collection.tail(String[] args)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(T... args)", "modifiers": "@SafeVarargs public static", "return": "T[]", "signature": "T[] create(T... args)", "full_signature": "@SafeVarargs public static T[] create(T... args)", "class_method_signature": "Collection.create(T... args)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(List<T> list, String separator, Function<T, String> function)", "modifiers": "public static", "return": "String", "signature": "String join(List<T> list, String separator, Function<T, String> function)", "full_signature": "public static String join(List<T> list, String separator, Function<T, String> function)", "class_method_signature": "Collection.join(List<T> list, String separator, Function<T, String> function)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(List<String> list, String separator)", "modifiers": "public static", "return": "String", "signature": "String join(List<String> list, String separator)", "full_signature": "public static String join(List<String> list, String separator)", "class_method_signature": "Collection.join(List<String> list, String separator)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/web3j/utils/Collection.java"}, "focal_method": {"identifier": "join", "parameters": "(List<T> list, String separator, Function<T, String> function)", "modifiers": "public static", "return": "String", "body": "public static <T> String join(List<T> list, String separator, Function<T, String> function) {\n        String result = \"\";\n        for (int i = 0; i < list.size(); i++) {\n            result += function.apply(list.get(i)).trim();\n            if (i + 1 < list.size()) {\n                result += separator;\n            }\n        }\n        return result;\n    }", "signature": "String join(List<T> list, String separator, Function<T, String> function)", "full_signature": "public static String join(List<T> list, String separator, Function<T, String> function)", "class_method_signature": "Collection.join(List<T> list, String separator, Function<T, String> function)", "testcase": false, "constructor": false, "invocations": ["size", "trim", "apply", "get", "size"]}, "repository": {"repo_id": 149736342, "url": "https://github.com/BrahmaOS/brahmaos-web3j", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 1779, "license": "licensed"}}