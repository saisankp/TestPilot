{"test_class": {"identifier": "WebSocketConsumersManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private WebKafkaConsumerFactory mockConsumerFactory;", "modifier": "private", "type": "WebKafkaConsumerFactory", "declarator": "mockConsumerFactory", "var_name": "mockConsumerFactory"}, {"original_string": "private SimpMessagingTemplate mockMessagingTemplate;", "modifier": "private", "type": "SimpMessagingTemplate", "declarator": "mockMessagingTemplate", "var_name": "mockMessagingTemplate"}, {"original_string": "private ThreadPoolExecutor mockThreadPoolExecutor;", "modifier": "private", "type": "ThreadPoolExecutor", "declarator": "mockThreadPoolExecutor", "var_name": "mockThreadPoolExecutor"}, {"original_string": "private SocketKafkaConsumer mockSocketKafkaConsumer;", "modifier": "private", "type": "SocketKafkaConsumer", "declarator": "mockSocketKafkaConsumer", "var_name": "mockSocketKafkaConsumer"}, {"original_string": "private WebSocketConsumersManager manager;", "modifier": "private", "type": "WebSocketConsumersManager", "declarator": "manager", "var_name": "manager"}], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/manager/socket/WebSocketConsumersManagerTest.java"}, "test_case": {"identifier": "testRemoveConsumersForSessionHash", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemoveConsumersForSessionHash() {\n        final long userId = 1212L;\n        final String sessionId1 = \"abc123\";\n        final String sessionId2 = \"123abc\";\n        final long viewId = 5454L;\n\n        // Sanity test, manager should have no consumers.\n        Assert.assertTrue(\"Manager should start empty\", manager.getConsumers().isEmpty());\n\n        // Define consumer inputs.\n        final View view = new View();\n        view.setId(viewId);\n\n        final Collection<FilterDefinition> filters = new ArrayList<>();\n        final StartingPosition startingPosition = StartingPosition.newHeadPosition();\n        final SessionIdentifier sessionIdentifier1 = SessionIdentifier.newStreamIdentifier(userId, sessionId1);\n        final SessionIdentifier sessionIdentifier2 = SessionIdentifier.newStreamIdentifier(userId, sessionId2);\n\n        final SocketKafkaConsumer mockSocketKafkaConsumer1 = mock(SocketKafkaConsumer.class);\n        final SocketKafkaConsumer mockSocketKafkaConsumer2 = mock(SocketKafkaConsumer.class);\n\n        // Configure mocks\n        when(mockConsumerFactory.createWebSocketClient(view, filters, startingPosition, sessionIdentifier1))\n            .thenReturn(mockSocketKafkaConsumer1);\n\n        when(mockConsumerFactory.createWebSocketClient(view, filters, startingPosition, sessionIdentifier2))\n            .thenReturn(mockSocketKafkaConsumer2);\n\n        // Add consumer once\n        manager.addNewConsumer(view, filters, startingPosition, sessionIdentifier1);\n\n        // Add another consumer, with different sessionIdentifier.\n        manager.addNewConsumer(view, filters, startingPosition, sessionIdentifier2);\n\n        // Ask for consumers\n        final Collection<StreamConsumerDetails> consumers = manager.getConsumers();\n        Assert.assertFalse(\"Should not be empty\", consumers.isEmpty());\n        Assert.assertEquals(2, consumers.size());\n\n        // Ask to remove by sessionId\n        boolean result = manager.removeConsumersForSessionHash(Sha1Tools.sha1(sessionId1));\n        Assert.assertTrue(result);\n\n        // Verify it requested the consumer to stop.\n        verify(mockSocketKafkaConsumer1, times(1)).requestStop();\n        verify(mockSocketKafkaConsumer2, times(0)).requestStop();\n\n        // Now ask for a random hash\n        result = manager.removeConsumersForSessionHash(\"made up\");\n        Assert.assertFalse(result);\n    }", "signature": "void testRemoveConsumersForSessionHash()", "full_signature": "@Test public void testRemoveConsumersForSessionHash()", "class_method_signature": "WebSocketConsumersManagerTest.testRemoveConsumersForSessionHash()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isEmpty", "getConsumers", "setId", "newHeadPosition", "newStreamIdentifier", "newStreamIdentifier", "mock", "mock", "thenReturn", "when", "createWebSocketClient", "thenReturn", "when", "createWebSocketClient", "addNewConsumer", "addNewConsumer", "getConsumers", "assertFalse", "isEmpty", "assertEquals", "size", "removeConsumersForSessionHash", "sha1", "assertTrue", "requestStop", "verify", "times", "requestStop", "verify", "times", "removeConsumersForSessionHash", "assertFalse"]}, "focal_class": {"identifier": "WebSocketConsumersManager", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(WebSocketConsumersManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(WebSocketConsumersManager.class)", "var_name": "logger"}, {"original_string": "private final Map<ConsumerKey, ConsumerEntry> consumers = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<ConsumerKey, ConsumerEntry>", "declarator": "consumers = new ConcurrentHashMap<>()", "var_name": "consumers"}, {"original_string": "private final WebKafkaConsumerFactory webKafkaConsumerFactory;", "modifier": "private final", "type": "WebKafkaConsumerFactory", "declarator": "webKafkaConsumerFactory", "var_name": "webKafkaConsumerFactory"}, {"original_string": "private final SimpMessagingTemplate simpMessagingTemplate;", "modifier": "private final", "type": "SimpMessagingTemplate", "declarator": "simpMessagingTemplate", "var_name": "simpMessagingTemplate"}, {"original_string": "private final ThreadPoolExecutor threadPoolExecutor;", "modifier": "private final", "type": "ThreadPoolExecutor", "declarator": "threadPoolExecutor", "var_name": "threadPoolExecutor"}], "methods": [{"identifier": "WebSocketConsumersManager", "parameters": "(\n        final WebKafkaConsumerFactory webKafkaConsumerFactory,\n        final SimpMessagingTemplate messagingTemplate,\n        final int maxConcurrentConsumers\n    )", "modifiers": "public", "return": "", "signature": " WebSocketConsumersManager(\n        final WebKafkaConsumerFactory webKafkaConsumerFactory,\n        final SimpMessagingTemplate messagingTemplate,\n        final int maxConcurrentConsumers\n    )", "full_signature": "public  WebSocketConsumersManager(\n        final WebKafkaConsumerFactory webKafkaConsumerFactory,\n        final SimpMessagingTemplate messagingTemplate,\n        final int maxConcurrentConsumers\n    )", "class_method_signature": "WebSocketConsumersManager.WebSocketConsumersManager(\n        final WebKafkaConsumerFactory webKafkaConsumerFactory,\n        final SimpMessagingTemplate messagingTemplate,\n        final int maxConcurrentConsumers\n    )", "testcase": false, "constructor": true}, {"identifier": "WebSocketConsumersManager", "parameters": "(\n        final WebKafkaConsumerFactory webKafkaConsumerFactory,\n        final SimpMessagingTemplate messagingTemplate,\n        final ThreadPoolExecutor threadPoolExecutor\n    )", "modifiers": "public", "return": "", "signature": " WebSocketConsumersManager(\n        final WebKafkaConsumerFactory webKafkaConsumerFactory,\n        final SimpMessagingTemplate messagingTemplate,\n        final ThreadPoolExecutor threadPoolExecutor\n    )", "full_signature": "public  WebSocketConsumersManager(\n        final WebKafkaConsumerFactory webKafkaConsumerFactory,\n        final SimpMessagingTemplate messagingTemplate,\n        final ThreadPoolExecutor threadPoolExecutor\n    )", "class_method_signature": "WebSocketConsumersManager.WebSocketConsumersManager(\n        final WebKafkaConsumerFactory webKafkaConsumerFactory,\n        final SimpMessagingTemplate messagingTemplate,\n        final ThreadPoolExecutor threadPoolExecutor\n    )", "testcase": false, "constructor": true}, {"identifier": "addNewConsumer", "parameters": "(\n        final View view,\n        final Collection<FilterDefinition> filters,\n        final StartingPosition startingPosition,\n        final SessionIdentifier sessionIdentifier\n    )", "modifiers": "public", "return": "void", "signature": "void addNewConsumer(\n        final View view,\n        final Collection<FilterDefinition> filters,\n        final StartingPosition startingPosition,\n        final SessionIdentifier sessionIdentifier\n    )", "full_signature": "public void addNewConsumer(\n        final View view,\n        final Collection<FilterDefinition> filters,\n        final StartingPosition startingPosition,\n        final SessionIdentifier sessionIdentifier\n    )", "class_method_signature": "WebSocketConsumersManager.addNewConsumer(\n        final View view,\n        final Collection<FilterDefinition> filters,\n        final StartingPosition startingPosition,\n        final SessionIdentifier sessionIdentifier\n    )", "testcase": false, "constructor": false}, {"identifier": "removeConsumersForSessionId", "parameters": "(final String sessionId)", "modifiers": "public", "return": "void", "signature": "void removeConsumersForSessionId(final String sessionId)", "full_signature": "public void removeConsumersForSessionId(final String sessionId)", "class_method_signature": "WebSocketConsumersManager.removeConsumersForSessionId(final String sessionId)", "testcase": false, "constructor": false}, {"identifier": "removeConsumersForSessionHash", "parameters": "(final String sessionHash)", "modifiers": "public", "return": "boolean", "signature": "boolean removeConsumersForSessionHash(final String sessionHash)", "full_signature": "public boolean removeConsumersForSessionHash(final String sessionHash)", "class_method_signature": "WebSocketConsumersManager.removeConsumersForSessionHash(final String sessionHash)", "testcase": false, "constructor": false}, {"identifier": "pauseConsumer", "parameters": "(final long viewId, final SessionIdentifier sessionIdentifier)", "modifiers": "public", "return": "void", "signature": "void pauseConsumer(final long viewId, final SessionIdentifier sessionIdentifier)", "full_signature": "public void pauseConsumer(final long viewId, final SessionIdentifier sessionIdentifier)", "class_method_signature": "WebSocketConsumersManager.pauseConsumer(final long viewId, final SessionIdentifier sessionIdentifier)", "testcase": false, "constructor": false}, {"identifier": "resumeConsumer", "parameters": "(final long viewId, final SessionIdentifier sessionIdentifier)", "modifiers": "public", "return": "void", "signature": "void resumeConsumer(final long viewId, final SessionIdentifier sessionIdentifier)", "full_signature": "public void resumeConsumer(final long viewId, final SessionIdentifier sessionIdentifier)", "class_method_signature": "WebSocketConsumersManager.resumeConsumer(final long viewId, final SessionIdentifier sessionIdentifier)", "testcase": false, "constructor": false}, {"identifier": "getConsumers", "parameters": "()", "modifiers": "public", "return": "Collection<StreamConsumerDetails>", "signature": "Collection<StreamConsumerDetails> getConsumers()", "full_signature": "public Collection<StreamConsumerDetails> getConsumers()", "class_method_signature": "WebSocketConsumersManager.getConsumers()", "testcase": false, "constructor": false}, {"identifier": "countActiveConsumers", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int countActiveConsumers()", "full_signature": "public int countActiveConsumers()", "class_method_signature": "WebSocketConsumersManager.countActiveConsumers()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "WebSocketConsumersManager.run()", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/manager/socket/WebSocketConsumersManager.java"}, "focal_method": {"identifier": "removeConsumersForSessionHash", "parameters": "(final String sessionHash)", "modifiers": "public", "return": "boolean", "body": "public boolean removeConsumersForSessionHash(final String sessionHash) {\n        synchronized (consumers) {\n            for (final Map.Entry<ConsumerKey, ConsumerEntry> entry : consumers.entrySet()) {\n                if (! entry.getKey().getSessionHash().equals(sessionHash)) {\n                    continue;\n                }\n                entry.getValue().requestStop();\n                return true;\n            }\n        }\n        return false;\n    }", "signature": "boolean removeConsumersForSessionHash(final String sessionHash)", "full_signature": "public boolean removeConsumersForSessionHash(final String sessionHash)", "class_method_signature": "WebSocketConsumersManager.removeConsumersForSessionHash(final String sessionHash)", "testcase": false, "constructor": false, "invocations": ["entrySet", "equals", "getSessionHash", "getKey", "requestStop", "getValue"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}