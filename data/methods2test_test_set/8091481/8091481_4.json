{"test_class": {"identifier": "RelatednessTest", "superclass": "", "interfaces": "", "fields": [], "file": "dexter-core/src/test/java/it/cnr/isti/hpc/dexter/relatedness/RelatednessTest.java"}, "test_case": {"identifier": "testIntersection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIntersection() {\n\t\tint[] a = new int[] { 1,3,5,10,12};\n\t\tint[] b = new int[] {1,12,20};\n\t\tint[] inter = new int[] {1,12};\n\t\tint[] union = new int[] {1,3,5,10,12,20};\n\t\t\n\t\tAssert.assertArrayEquals(inter, Relatedness.intersection(a, b, 5, 3));\n\t\tAssert.assertArrayEquals(union, Relatedness.sortedunion(a, b, 5, 3));\n\t\t\n\t}", "signature": "void testIntersection()", "full_signature": "@Test public void testIntersection()", "class_method_signature": "RelatednessTest.testIntersection()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "intersection", "assertArrayEquals", "sortedunion"]}, "focal_class": {"identifier": "Relatedness", "superclass": "", "interfaces": "implements Comparable<Relatedness>", "fields": [{"original_string": "protected int x;", "modifier": "protected", "type": "int", "declarator": "x", "var_name": "x"}, {"original_string": "protected int y;", "modifier": "protected", "type": "int", "declarator": "y", "var_name": "y"}, {"original_string": "protected double score;", "modifier": "protected", "type": "double", "declarator": "score", "var_name": "score"}, {"original_string": "private static DexterParams params = DexterParams.getInstance();", "modifier": "private static", "type": "DexterParams", "declarator": "params = DexterParams.getInstance()", "var_name": "params"}, {"original_string": "private static IntList list = new IntArrayList();", "modifier": "private static", "type": "IntList", "declarator": "list = new IntArrayList()", "var_name": "list"}, {"original_string": "private IncomingNodes in;", "modifier": "private", "type": "IncomingNodes", "declarator": "in", "var_name": "in"}, {"original_string": "private OutcomingNodes out;", "modifier": "private", "type": "OutcomingNodes", "declarator": "out", "var_name": "out"}, {"original_string": "private static final int CACHE_SIZE = params.getCacheSize(\"relatedness\");", "modifier": "private static final", "type": "int", "declarator": "CACHE_SIZE = params.getCacheSize(\"relatedness\")", "var_name": "CACHE_SIZE"}, {"original_string": "private final static boolean CACHE_ENABLED = CACHE_SIZE > 0;", "modifier": "private final static", "type": "boolean", "declarator": "CACHE_ENABLED = CACHE_SIZE > 0", "var_name": "CACHE_ENABLED"}, {"original_string": "private static LRUCache<Couple, Double> cache = new LRUCache<Couple, Double>(\n\t\t\tCACHE_SIZE);", "modifier": "private static", "type": "LRUCache<Couple, Double>", "declarator": "cache = new LRUCache<Couple, Double>(\n\t\t\tCACHE_SIZE)", "var_name": "cache"}], "methods": [{"identifier": "Relatedness", "parameters": "()", "modifiers": "public", "return": "", "signature": " Relatedness()", "full_signature": "public  Relatedness()", "class_method_signature": "Relatedness.Relatedness()", "testcase": false, "constructor": true}, {"identifier": "Relatedness", "parameters": "(int x, int y)", "modifiers": "protected", "return": "", "signature": " Relatedness(int x, int y)", "full_signature": "protected  Relatedness(int x, int y)", "class_method_signature": "Relatedness.Relatedness(int x, int y)", "testcase": false, "constructor": true}, {"identifier": "set", "parameters": "(int x, int y)", "modifiers": "public", "return": "void", "signature": "void set(int x, int y)", "full_signature": "public void set(int x, int y)", "class_method_signature": "Relatedness.set(int x, int y)", "testcase": false, "constructor": false}, {"identifier": "setScore", "parameters": "(double score)", "modifiers": "public", "return": "void", "signature": "void setScore(double score)", "full_signature": "public void setScore(double score)", "class_method_signature": "Relatedness.setScore(double score)", "testcase": false, "constructor": false}, {"identifier": "score", "parameters": "()", "modifiers": "protected abstract", "return": "double", "signature": "double score()", "full_signature": "protected abstract double score()", "class_method_signature": "Relatedness.score()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Relatedness r)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(Relatedness r)", "full_signature": "@Override public int compareTo(Relatedness r)", "class_method_signature": "Relatedness.compareTo(Relatedness r)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getName()", "full_signature": "public abstract String getName()", "class_method_signature": "Relatedness.getName()", "testcase": false, "constructor": false}, {"identifier": "hasNegativeScores", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasNegativeScores()", "full_signature": "public boolean hasNegativeScores()", "class_method_signature": "Relatedness.hasNegativeScores()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "public abstract", "return": "Relatedness", "signature": "Relatedness copy()", "full_signature": "public abstract Relatedness copy()", "class_method_signature": "Relatedness.copy()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Relatedness.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Relatedness.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getScore", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getScore()", "full_signature": "public double getScore()", "class_method_signature": "Relatedness.getScore()", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getX()", "full_signature": "public int getX()", "class_method_signature": "Relatedness.getX()", "testcase": false, "constructor": false}, {"identifier": "setX", "parameters": "(int x)", "modifiers": "public", "return": "void", "signature": "void setX(int x)", "full_signature": "public void setX(int x)", "class_method_signature": "Relatedness.setX(int x)", "testcase": false, "constructor": false}, {"identifier": "getY", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getY()", "full_signature": "public int getY()", "class_method_signature": "Relatedness.getY()", "testcase": false, "constructor": false}, {"identifier": "setY", "parameters": "(int y)", "modifiers": "public", "return": "void", "signature": "void setY(int y)", "full_signature": "public void setY(int y)", "class_method_signature": "Relatedness.setY(int y)", "testcase": false, "constructor": false}, {"identifier": "outX", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] outX()", "full_signature": "public int[] outX()", "class_method_signature": "Relatedness.outX()", "testcase": false, "constructor": false}, {"identifier": "outY", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] outY()", "full_signature": "public int[] outY()", "class_method_signature": "Relatedness.outY()", "testcase": false, "constructor": false}, {"identifier": "inIntersection", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] inIntersection()", "full_signature": "public int[] inIntersection()", "class_method_signature": "Relatedness.inIntersection()", "testcase": false, "constructor": false}, {"identifier": "outIntersection", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] outIntersection()", "full_signature": "public int[] outIntersection()", "class_method_signature": "Relatedness.outIntersection()", "testcase": false, "constructor": false}, {"identifier": "inoutX", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] inoutX()", "full_signature": "public int[] inoutX()", "class_method_signature": "Relatedness.inoutX()", "testcase": false, "constructor": false}, {"identifier": "inoutY", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] inoutY()", "full_signature": "public int[] inoutY()", "class_method_signature": "Relatedness.inoutY()", "testcase": false, "constructor": false}, {"identifier": "removeDuplicates", "parameters": "(int[] array)", "modifiers": "private static", "return": "int[]", "signature": "int[] removeDuplicates(int[] array)", "full_signature": "private static int[] removeDuplicates(int[] array)", "class_method_signature": "Relatedness.removeDuplicates(int[] array)", "testcase": false, "constructor": false}, {"identifier": "sortedunion", "parameters": "(int[] a, int[] b, int aSize, int bSize)", "modifiers": "public static", "return": "int[]", "signature": "int[] sortedunion(int[] a, int[] b, int aSize, int bSize)", "full_signature": "public static int[] sortedunion(int[] a, int[] b, int aSize, int bSize)", "class_method_signature": "Relatedness.sortedunion(int[] a, int[] b, int aSize, int bSize)", "testcase": false, "constructor": false}, {"identifier": "intersection", "parameters": "(int[] a, int[] b, int aSize, int bSize)", "modifiers": "public static", "return": "int[]", "signature": "int[] intersection(int[] a, int[] b, int aSize, int bSize)", "full_signature": "public static int[] intersection(int[] a, int[] b, int aSize, int bSize)", "class_method_signature": "Relatedness.intersection(int[] a, int[] b, int aSize, int bSize)", "testcase": false, "constructor": false}, {"identifier": "intersectionSize", "parameters": "(int[] a, int[] b, int aSize, int bSize)", "modifiers": "public static", "return": "int", "signature": "int intersectionSize(int[] a, int[] b, int aSize, int bSize)", "full_signature": "public static int intersectionSize(int[] a, int[] b, int aSize, int bSize)", "class_method_signature": "Relatedness.intersectionSize(int[] a, int[] b, int aSize, int bSize)", "testcase": false, "constructor": false}, {"identifier": "unionSize", "parameters": "(int[] a, int[] b, int aSize, int bSize)", "modifiers": "public static", "return": "int", "signature": "int unionSize(int[] a, int[] b, int aSize, int bSize)", "full_signature": "public static int unionSize(int[] a, int[] b, int aSize, int bSize)", "class_method_signature": "Relatedness.unionSize(int[] a, int[] b, int aSize, int bSize)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Relatedness.toString()", "testcase": false, "constructor": false}, {"identifier": "getNames", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNames()", "full_signature": "public String getNames()", "class_method_signature": "Relatedness.getNames()", "testcase": false, "constructor": false}], "file": "dexter-core/src/main/java/it/cnr/isti/hpc/dexter/relatedness/Relatedness.java"}, "focal_method": {"identifier": "intersection", "parameters": "(int[] a, int[] b, int aSize, int bSize)", "modifiers": "public static", "return": "int[]", "body": "public static int[] intersection(int[] a, int[] b, int aSize, int bSize) {\n\t\tint i = 0, j = 0;\n\t\tlist.clear();\n\t\twhile ((i < aSize) && (j < bSize)) {\n\t\t\tif (a[i] < b[j]) {\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (a[i] > b[j]) {\n\t\t\t\tj++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// => (a[i] == a[j])\n\t\t\tlist.add(a[i]);\n\t\t\ti++;\n\t\t\tj++;\n\n\t\t}\n\t\treturn list.toIntArray();\n\t}", "signature": "int[] intersection(int[] a, int[] b, int aSize, int bSize)", "full_signature": "public static int[] intersection(int[] a, int[] b, int aSize, int bSize)", "class_method_signature": "Relatedness.intersection(int[] a, int[] b, int aSize, int bSize)", "testcase": false, "constructor": false, "invocations": ["clear", "add", "toIntArray"]}, "repository": {"repo_id": 8091481, "url": "https://github.com/dexter/dexter", "language": "Java", "is_fork": false, "fork_count": 52, "stargazer_count": 196, "size": 17631, "license": "licensed"}}