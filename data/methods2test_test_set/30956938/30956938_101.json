{"test_class": {"identifier": "AddXMLSplitterEditTest", "superclass": "", "interfaces": "implements LocationConstants", "fields": [{"original_string": "private static final JsonNodeFactory JSON_NODE_FACTORY = JsonNodeFactory.instance;", "modifier": "private static final", "type": "JsonNodeFactory", "declarator": "JSON_NODE_FACTORY = JsonNodeFactory.instance", "var_name": "JSON_NODE_FACTORY"}, {"original_string": "private WSDLActivity activity;", "modifier": "private", "type": "WSDLActivity", "declarator": "activity", "var_name": "activity"}, {"original_string": "private DataflowImpl dataflow;", "modifier": "private", "type": "DataflowImpl", "declarator": "dataflow", "var_name": "dataflow"}, {"original_string": "private ObjectNode configBean;", "modifier": "private", "type": "ObjectNode", "declarator": "configBean", "var_name": "configBean"}, {"original_string": "private static ObjectNode operationConfigBean;", "modifier": "private static", "type": "ObjectNode", "declarator": "operationConfigBean", "var_name": "operationConfigBean"}, {"original_string": "private String wsdlLocation = WSDL_TEST_BASE\n\t+ \"eutils/eutils_lite.wsdl\";", "modifier": "private", "type": "String", "declarator": "wsdlLocation = WSDL_TEST_BASE\n\t+ \"eutils/eutils_lite.wsdl\"", "var_name": "wsdlLocation"}, {"original_string": "private Edits edits;", "modifier": "private", "type": "Edits", "declarator": "edits", "var_name": "edits"}], "file": "taverna-wsdl-activity/src/test/java/org/apache/taverna/activities/wsdl/xmlsplitter/AddXMLSplitterEditTest.java"}, "test_case": {"identifier": "testUndo", "parameters": "()", "modifiers": "@Ignore(\"Integration test\") @Test public", "return": "void", "body": "@Ignore(\"Integration test\")\n\t@Test\n\tpublic void testUndo() throws Exception {\n\t\tAddXMLSplitterEdit edit = new AddXMLSplitterEdit(dataflow,activity,\"parameters\",false, new EditsImpl());\n\t\tedit.doEdit();\n\t\tedit.undo();\n\t\tassertEquals(\"There should be only 1 processor\",1,dataflow.getProcessors().size());\n\t\tassertEquals(\"The processor should be called run_eInfo\",\"run_eInfo\",dataflow.getProcessors().get(0).getLocalName());\n\t\tassertEquals(\"There should be no datalinks\",0,dataflow.getLinks().size());\n\t}", "signature": "void testUndo()", "full_signature": "@Ignore(\"Integration test\") @Test public void testUndo()", "class_method_signature": "AddXMLSplitterEditTest.testUndo()", "testcase": true, "constructor": false, "invocations": ["doEdit", "undo", "assertEquals", "size", "getProcessors", "assertEquals", "getLocalName", "get", "getProcessors", "assertEquals", "size", "getLinks"]}, "focal_class": {"identifier": "AddXMLSplitterEdit", "superclass": "", "interfaces": "implements Edit<Dataflow>", "fields": [{"original_string": "private final Edits edits;", "modifier": "private final", "type": "Edits", "declarator": "edits", "var_name": "edits"}, {"original_string": "private final Activity<?> activity;", "modifier": "private final", "type": "Activity<?>", "declarator": "activity", "var_name": "activity"}, {"original_string": "private final String portName;", "modifier": "private final", "type": "String", "declarator": "portName", "var_name": "portName"}, {"original_string": "private final boolean isInput;", "modifier": "private final", "type": "boolean", "declarator": "isInput", "var_name": "isInput"}, {"original_string": "private CompoundEdit compoundEdit1 = null;", "modifier": "private", "type": "CompoundEdit", "declarator": "compoundEdit1 = null", "var_name": "compoundEdit1"}, {"original_string": "private Edit<?> linkUpEdit;", "modifier": "private", "type": "Edit<?>", "declarator": "linkUpEdit", "var_name": "linkUpEdit"}, {"original_string": "private final Dataflow dataflow;", "modifier": "private final", "type": "Dataflow", "declarator": "dataflow", "var_name": "dataflow"}, {"original_string": "private boolean applied = false;", "modifier": "private", "type": "boolean", "declarator": "applied = false", "var_name": "applied"}], "methods": [{"identifier": "AddXMLSplitterEdit", "parameters": "(Dataflow dataflow, Activity<?> activity,\n\t\t\tString portName, boolean isInput, Edits edits)", "modifiers": "public", "return": "", "signature": " AddXMLSplitterEdit(Dataflow dataflow, Activity<?> activity,\n\t\t\tString portName, boolean isInput, Edits edits)", "full_signature": "public  AddXMLSplitterEdit(Dataflow dataflow, Activity<?> activity,\n\t\t\tString portName, boolean isInput, Edits edits)", "class_method_signature": "AddXMLSplitterEdit.AddXMLSplitterEdit(Dataflow dataflow, Activity<?> activity,\n\t\t\tString portName, boolean isInput, Edits edits)", "testcase": false, "constructor": true}, {"identifier": "doEdit", "parameters": "()", "modifiers": "@Override public", "return": "Dataflow", "signature": "Dataflow doEdit()", "full_signature": "@Override public Dataflow doEdit()", "class_method_signature": "AddXMLSplitterEdit.doEdit()", "testcase": false, "constructor": false}, {"identifier": "getSinkPort", "parameters": "(Processor processor, Activity<?> activity,\n\t\t\tString portName, List<Edit<?>> editList)", "modifiers": "private", "return": "EventHandlingInputPort", "signature": "EventHandlingInputPort getSinkPort(Processor processor, Activity<?> activity,\n\t\t\tString portName, List<Edit<?>> editList)", "full_signature": "private EventHandlingInputPort getSinkPort(Processor processor, Activity<?> activity,\n\t\t\tString portName, List<Edit<?>> editList)", "class_method_signature": "AddXMLSplitterEdit.getSinkPort(Processor processor, Activity<?> activity,\n\t\t\tString portName, List<Edit<?>> editList)", "testcase": false, "constructor": false}, {"identifier": "getSourcePort", "parameters": "(Processor processor, Activity<?> activity,\n\t\t\tString portName, List<Edit<?>> editList)", "modifiers": "private", "return": "EventForwardingOutputPort", "signature": "EventForwardingOutputPort getSourcePort(Processor processor, Activity<?> activity,\n\t\t\tString portName, List<Edit<?>> editList)", "full_signature": "private EventForwardingOutputPort getSourcePort(Processor processor, Activity<?> activity,\n\t\t\tString portName, List<Edit<?>> editList)", "class_method_signature": "AddXMLSplitterEdit.getSourcePort(Processor processor, Activity<?> activity,\n\t\t\tString portName, List<Edit<?>> editList)", "testcase": false, "constructor": false}, {"identifier": "undo", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void undo()", "full_signature": "@Override public void undo()", "class_method_signature": "AddXMLSplitterEdit.undo()", "testcase": false, "constructor": false}, {"identifier": "isApplied", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isApplied()", "full_signature": "@Override public boolean isApplied()", "class_method_signature": "AddXMLSplitterEdit.isApplied()", "testcase": false, "constructor": false}, {"identifier": "findProcessorForActivity", "parameters": "(Dataflow dataflow,\n\t\t\tActivity<?> activity)", "modifiers": "private", "return": "Processor", "signature": "Processor findProcessorForActivity(Dataflow dataflow,\n\t\t\tActivity<?> activity)", "full_signature": "private Processor findProcessorForActivity(Dataflow dataflow,\n\t\t\tActivity<?> activity)", "class_method_signature": "AddXMLSplitterEdit.findProcessorForActivity(Dataflow dataflow,\n\t\t\tActivity<?> activity)", "testcase": false, "constructor": false}, {"identifier": "getSubject", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object getSubject()", "full_signature": "@Override public Object getSubject()", "class_method_signature": "AddXMLSplitterEdit.getSubject()", "testcase": false, "constructor": false}], "file": "taverna-wsdl-activity/src/main/java/org/apache/taverna/activities/wsdl/xmlsplitter/AddXMLSplitterEdit.java"}, "focal_method": {"identifier": "undo", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void undo() {\n\t\tif (!applied) {\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"Attempt to undo edit that was never applied\");\n\t\t}\n\t\tif (linkUpEdit.isApplied())\n\t\t\tlinkUpEdit.undo();\n\t\tif (compoundEdit1.isApplied())\n\t\t\tcompoundEdit1.undo();\n\t\tapplied = false;\n\t}", "signature": "void undo()", "full_signature": "@Override public void undo()", "class_method_signature": "AddXMLSplitterEdit.undo()", "testcase": false, "constructor": false, "invocations": ["isApplied", "undo", "isApplied", "undo"]}, "repository": {"repo_id": 30956938, "url": "https://github.com/apache/incubator-taverna-common-activities", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 5696, "license": "licensed"}}