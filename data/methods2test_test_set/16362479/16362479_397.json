{"test_class": {"identifier": "AbstractProxyTransactionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final TransactionIdentifier TRANSACTION_ID = TestUtils.TRANSACTION_ID;", "modifier": "protected static final", "type": "TransactionIdentifier", "declarator": "TRANSACTION_ID = TestUtils.TRANSACTION_ID", "var_name": "TRANSACTION_ID"}, {"original_string": "private static final ClientIdentifier CLIENT_ID = TestUtils.CLIENT_ID;", "modifier": "private static final", "type": "ClientIdentifier", "declarator": "CLIENT_ID = TestUtils.CLIENT_ID", "var_name": "CLIENT_ID"}, {"original_string": "private static final LocalHistoryIdentifier HISTORY_ID = TestUtils.HISTORY_ID;", "modifier": "private static final", "type": "LocalHistoryIdentifier", "declarator": "HISTORY_ID = TestUtils.HISTORY_ID", "var_name": "HISTORY_ID"}, {"original_string": "protected static final YangInstanceIdentifier PATH_1 = YangInstanceIdentifier.builder()\n            .node(QName.create(\"ns-1\", \"node-1\"))\n            .build();", "modifier": "protected static final", "type": "YangInstanceIdentifier", "declarator": "PATH_1 = YangInstanceIdentifier.builder()\n            .node(QName.create(\"ns-1\", \"node-1\"))\n            .build()", "var_name": "PATH_1"}, {"original_string": "protected static final YangInstanceIdentifier PATH_2 = YangInstanceIdentifier.builder()\n            .node(QName.create(\"ns-1\", \"node-2\"))\n            .build();", "modifier": "protected static final", "type": "YangInstanceIdentifier", "declarator": "PATH_2 = YangInstanceIdentifier.builder()\n            .node(QName.create(\"ns-1\", \"node-2\"))\n            .build()", "var_name": "PATH_2"}, {"original_string": "protected static final YangInstanceIdentifier PATH_3 = YangInstanceIdentifier.builder()\n            .node(QName.create(\"ns-1\", \"node-3\"))\n            .build();", "modifier": "protected static final", "type": "YangInstanceIdentifier", "declarator": "PATH_3 = YangInstanceIdentifier.builder()\n            .node(QName.create(\"ns-1\", \"node-3\"))\n            .build()", "var_name": "PATH_3"}, {"original_string": "protected static final ContainerNode DATA_1 = Builders.containerBuilder()\n            .withNodeIdentifier(new YangInstanceIdentifier.NodeIdentifier(PATH_1.getLastPathArgument().getNodeType()))\n            .build();", "modifier": "protected static final", "type": "ContainerNode", "declarator": "DATA_1 = Builders.containerBuilder()\n            .withNodeIdentifier(new YangInstanceIdentifier.NodeIdentifier(PATH_1.getLastPathArgument().getNodeType()))\n            .build()", "var_name": "DATA_1"}, {"original_string": "protected static final ContainerNode DATA_2 = Builders.containerBuilder()\n            .withNodeIdentifier(new YangInstanceIdentifier.NodeIdentifier(PATH_2.getLastPathArgument().getNodeType()))\n            .build();", "modifier": "protected static final", "type": "ContainerNode", "declarator": "DATA_2 = Builders.containerBuilder()\n            .withNodeIdentifier(new YangInstanceIdentifier.NodeIdentifier(PATH_2.getLastPathArgument().getNodeType()))\n            .build()", "var_name": "DATA_2"}, {"original_string": "protected static final String PERSISTENCE_ID = \"per-1\";", "modifier": "protected static final", "type": "String", "declarator": "PERSISTENCE_ID = \"per-1\"", "var_name": "PERSISTENCE_ID"}, {"original_string": "@Mock\n    private DataTreeSnapshot snapshot;", "modifier": "@Mock\n    private", "type": "DataTreeSnapshot", "declarator": "snapshot", "var_name": "snapshot"}, {"original_string": "@Mock\n    private AbstractClientHistory history;", "modifier": "@Mock\n    private", "type": "AbstractClientHistory", "declarator": "history", "var_name": "history"}, {"original_string": "private ActorSystem system;", "modifier": "private", "type": "ActorSystem", "declarator": "system", "var_name": "system"}, {"original_string": "private TestProbe backendProbe;", "modifier": "private", "type": "TestProbe", "declarator": "backendProbe", "var_name": "backendProbe"}, {"original_string": "private TestProbe clientContextProbe;", "modifier": "private", "type": "TestProbe", "declarator": "clientContextProbe", "var_name": "clientContextProbe"}, {"original_string": "private TransactionTester<T> tester;", "modifier": "private", "type": "TransactionTester<T>", "declarator": "tester", "var_name": "tester"}, {"original_string": "protected ClientActorContext context;", "modifier": "protected", "type": "ClientActorContext", "declarator": "context", "var_name": "context"}, {"original_string": "protected T transaction;", "modifier": "protected", "type": "T", "declarator": "transaction", "var_name": "transaction"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/databroker/actors/dds/AbstractProxyTransactionTest.java"}, "test_case": {"identifier": "testExists", "parameters": "()", "modifiers": "@Test public abstract", "return": "void", "body": "@Test\n    public abstract void testExists() throws Exception;", "signature": "void testExists()", "full_signature": "@Test public abstract void testExists()", "class_method_signature": "AbstractProxyTransactionTest.testExists()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "AbstractProxyTransaction", "superclass": "", "interfaces": "implements Identifiable<TransactionIdentifier>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AbstractProxyTransaction.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AbstractProxyTransaction.class)", "var_name": "LOG"}, {"original_string": "private static final AtomicIntegerFieldUpdater<AbstractProxyTransaction> SEALED_UPDATER =\n            AtomicIntegerFieldUpdater.newUpdater(AbstractProxyTransaction.class, \"sealed\");", "modifier": "private static final", "type": "AtomicIntegerFieldUpdater<AbstractProxyTransaction>", "declarator": "SEALED_UPDATER =\n            AtomicIntegerFieldUpdater.newUpdater(AbstractProxyTransaction.class, \"sealed\")", "var_name": "SEALED_UPDATER"}, {"original_string": "private static final AtomicReferenceFieldUpdater<AbstractProxyTransaction, State> STATE_UPDATER =\n            AtomicReferenceFieldUpdater.newUpdater(AbstractProxyTransaction.class, State.class, \"state\");", "modifier": "private static final", "type": "AtomicReferenceFieldUpdater<AbstractProxyTransaction, State>", "declarator": "STATE_UPDATER =\n            AtomicReferenceFieldUpdater.newUpdater(AbstractProxyTransaction.class, State.class, \"state\")", "var_name": "STATE_UPDATER"}, {"original_string": "private static final State OPEN = new State(\"OPEN\");", "modifier": "private static final", "type": "State", "declarator": "OPEN = new State(\"OPEN\")", "var_name": "OPEN"}, {"original_string": "private static final State SEALED = new State(\"SEALED\");", "modifier": "private static final", "type": "State", "declarator": "SEALED = new State(\"SEALED\")", "var_name": "SEALED"}, {"original_string": "private static final State FLUSHED = new State(\"FLUSHED\");", "modifier": "private static final", "type": "State", "declarator": "FLUSHED = new State(\"FLUSHED\")", "var_name": "FLUSHED"}, {"original_string": "private static final State DONE = new State(\"DONE\");", "modifier": "private static final", "type": "State", "declarator": "DONE = new State(\"DONE\")", "var_name": "DONE"}, {"original_string": "private final Deque<Object> successfulRequests = new ArrayDeque<>();", "modifier": "private final", "type": "Deque<Object>", "declarator": "successfulRequests = new ArrayDeque<>()", "var_name": "successfulRequests"}, {"original_string": "private final ProxyHistory parent;", "modifier": "private final", "type": "ProxyHistory", "declarator": "parent", "var_name": "parent"}, {"original_string": "private long sequence;", "modifier": "private", "type": "long", "declarator": "sequence", "var_name": "sequence"}, {"original_string": "private volatile int sealed;", "modifier": "private volatile", "type": "int", "declarator": "sealed", "var_name": "sealed"}, {"original_string": "private volatile State state;", "modifier": "private volatile", "type": "State", "declarator": "state", "var_name": "state"}], "methods": [{"identifier": "AbstractProxyTransaction", "parameters": "(final ProxyHistory parent, final boolean isDone)", "modifiers": "", "return": "", "signature": " AbstractProxyTransaction(final ProxyHistory parent, final boolean isDone)", "full_signature": "  AbstractProxyTransaction(final ProxyHistory parent, final boolean isDone)", "class_method_signature": "AbstractProxyTransaction.AbstractProxyTransaction(final ProxyHistory parent, final boolean isDone)", "testcase": false, "constructor": true}, {"identifier": "executeInActor", "parameters": "(final Runnable command)", "modifiers": "final", "return": "void", "signature": "void executeInActor(final Runnable command)", "full_signature": "final void executeInActor(final Runnable command)", "class_method_signature": "AbstractProxyTransaction.executeInActor(final Runnable command)", "testcase": false, "constructor": false}, {"identifier": "localActor", "parameters": "()", "modifiers": "final", "return": "ActorRef", "signature": "ActorRef localActor()", "full_signature": "final ActorRef localActor()", "class_method_signature": "AbstractProxyTransaction.localActor()", "testcase": false, "constructor": false}, {"identifier": "incrementSequence", "parameters": "(final long delta)", "modifiers": "final", "return": "void", "signature": "void incrementSequence(final long delta)", "full_signature": "final void incrementSequence(final long delta)", "class_method_signature": "AbstractProxyTransaction.incrementSequence(final long delta)", "testcase": false, "constructor": false}, {"identifier": "nextSequence", "parameters": "()", "modifiers": "final", "return": "long", "signature": "long nextSequence()", "full_signature": "final long nextSequence()", "class_method_signature": "AbstractProxyTransaction.nextSequence()", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "final", "return": "void", "signature": "void delete(final YangInstanceIdentifier path)", "full_signature": "final void delete(final YangInstanceIdentifier path)", "class_method_signature": "AbstractProxyTransaction.delete(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "final", "return": "void", "signature": "void merge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "final void merge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "AbstractProxyTransaction.merge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "final", "return": "void", "signature": "void write(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "final void write(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "AbstractProxyTransaction.write(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "final", "return": "FluentFuture<Boolean>", "signature": "FluentFuture<Boolean> exists(final YangInstanceIdentifier path)", "full_signature": "final FluentFuture<Boolean> exists(final YangInstanceIdentifier path)", "class_method_signature": "AbstractProxyTransaction.exists(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "final", "return": "FluentFuture<Optional<NormalizedNode<?, ?>>>", "signature": "FluentFuture<Optional<NormalizedNode<?, ?>>> read(final YangInstanceIdentifier path)", "full_signature": "final FluentFuture<Optional<NormalizedNode<?, ?>>> read(final YangInstanceIdentifier path)", "class_method_signature": "AbstractProxyTransaction.read(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "enqueueRequest", "parameters": "(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "modifiers": "final", "return": "void", "signature": "void enqueueRequest(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "full_signature": "final void enqueueRequest(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "class_method_signature": "AbstractProxyTransaction.enqueueRequest(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "testcase": false, "constructor": false}, {"identifier": "sendRequest", "parameters": "(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback)", "modifiers": "final", "return": "void", "signature": "void sendRequest(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback)", "full_signature": "final void sendRequest(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback)", "class_method_signature": "AbstractProxyTransaction.sendRequest(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback)", "testcase": false, "constructor": false}, {"identifier": "seal", "parameters": "()", "modifiers": "final", "return": "void", "signature": "void seal()", "full_signature": "final void seal()", "class_method_signature": "AbstractProxyTransaction.seal()", "testcase": false, "constructor": false}, {"identifier": "sealSuccessor", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void sealSuccessor()", "full_signature": "private void sealSuccessor()", "class_method_signature": "AbstractProxyTransaction.sealSuccessor()", "testcase": false, "constructor": false}, {"identifier": "predecessorSealed", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void predecessorSealed()", "full_signature": "private void predecessorSealed()", "class_method_signature": "AbstractProxyTransaction.predecessorSealed()", "testcase": false, "constructor": false}, {"identifier": "sealOnly", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean sealOnly()", "full_signature": " boolean sealOnly()", "class_method_signature": "AbstractProxyTransaction.sealOnly()", "testcase": false, "constructor": false}, {"identifier": "sealAndSend", "parameters": "(final OptionalLong enqueuedTicks)", "modifiers": "", "return": "boolean", "signature": "boolean sealAndSend(final OptionalLong enqueuedTicks)", "full_signature": " boolean sealAndSend(final OptionalLong enqueuedTicks)", "class_method_signature": "AbstractProxyTransaction.sealAndSend(final OptionalLong enqueuedTicks)", "testcase": false, "constructor": false}, {"identifier": "sealState", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean sealState()", "full_signature": "private boolean sealState()", "class_method_signature": "AbstractProxyTransaction.sealState()", "testcase": false, "constructor": false}, {"identifier": "markSealed", "parameters": "()", "modifiers": "final", "return": "boolean", "signature": "boolean markSealed()", "full_signature": "final boolean markSealed()", "class_method_signature": "AbstractProxyTransaction.markSealed()", "testcase": false, "constructor": false}, {"identifier": "checkNotSealed", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkNotSealed()", "full_signature": "private void checkNotSealed()", "class_method_signature": "AbstractProxyTransaction.checkNotSealed()", "testcase": false, "constructor": false}, {"identifier": "checkSealed", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkSealed()", "full_signature": "private void checkSealed()", "class_method_signature": "AbstractProxyTransaction.checkSealed()", "testcase": false, "constructor": false}, {"identifier": "getSuccessorState", "parameters": "()", "modifiers": "private", "return": "SuccessorState", "signature": "SuccessorState getSuccessorState()", "full_signature": "private SuccessorState getSuccessorState()", "class_method_signature": "AbstractProxyTransaction.getSuccessorState()", "testcase": false, "constructor": false}, {"identifier": "checkReadWrite", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkReadWrite()", "full_signature": "private void checkReadWrite()", "class_method_signature": "AbstractProxyTransaction.checkReadWrite()", "testcase": false, "constructor": false}, {"identifier": "recordSuccessfulRequest", "parameters": "(final @NonNull TransactionRequest<?> req)", "modifiers": "final", "return": "void", "signature": "void recordSuccessfulRequest(final @NonNull TransactionRequest<?> req)", "full_signature": "final void recordSuccessfulRequest(final @NonNull TransactionRequest<?> req)", "class_method_signature": "AbstractProxyTransaction.recordSuccessfulRequest(final @NonNull TransactionRequest<?> req)", "testcase": false, "constructor": false}, {"identifier": "recordFinishedRequest", "parameters": "(final Response<?, ?> response)", "modifiers": "final", "return": "void", "signature": "void recordFinishedRequest(final Response<?, ?> response)", "full_signature": "final void recordFinishedRequest(final Response<?, ?> response)", "class_method_signature": "AbstractProxyTransaction.recordFinishedRequest(final Response<?, ?> response)", "testcase": false, "constructor": false}, {"identifier": "abort", "parameters": "()", "modifiers": "final", "return": "void", "signature": "void abort()", "full_signature": "final void abort()", "class_method_signature": "AbstractProxyTransaction.abort()", "testcase": false, "constructor": false}, {"identifier": "abort", "parameters": "(final VotingFuture<Void> ret)", "modifiers": "final", "return": "void", "signature": "void abort(final VotingFuture<Void> ret)", "full_signature": "final void abort(final VotingFuture<Void> ret)", "class_method_signature": "AbstractProxyTransaction.abort(final VotingFuture<Void> ret)", "testcase": false, "constructor": false}, {"identifier": "enqueueAbort", "parameters": "(final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "modifiers": "final", "return": "void", "signature": "void enqueueAbort(final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "full_signature": "final void enqueueAbort(final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "class_method_signature": "AbstractProxyTransaction.enqueueAbort(final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "testcase": false, "constructor": false}, {"identifier": "enqueueDoAbort", "parameters": "(final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "modifiers": "final", "return": "void", "signature": "void enqueueDoAbort(final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "full_signature": "final void enqueueDoAbort(final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "class_method_signature": "AbstractProxyTransaction.enqueueDoAbort(final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "testcase": false, "constructor": false}, {"identifier": "sendDoAbort", "parameters": "(final Consumer<Response<?, ?>> callback)", "modifiers": "final", "return": "void", "signature": "void sendDoAbort(final Consumer<Response<?, ?>> callback)", "full_signature": "final void sendDoAbort(final Consumer<Response<?, ?>> callback)", "class_method_signature": "AbstractProxyTransaction.sendDoAbort(final Consumer<Response<?, ?>> callback)", "testcase": false, "constructor": false}, {"identifier": "directCommit", "parameters": "()", "modifiers": "final", "return": "ListenableFuture<Boolean>", "signature": "ListenableFuture<Boolean> directCommit()", "full_signature": "final ListenableFuture<Boolean> directCommit()", "class_method_signature": "AbstractProxyTransaction.directCommit()", "testcase": false, "constructor": false}, {"identifier": "canCommit", "parameters": "(final VotingFuture<?> ret)", "modifiers": "final", "return": "void", "signature": "void canCommit(final VotingFuture<?> ret)", "full_signature": "final void canCommit(final VotingFuture<?> ret)", "class_method_signature": "AbstractProxyTransaction.canCommit(final VotingFuture<?> ret)", "testcase": false, "constructor": false}, {"identifier": "awaitSuccessor", "parameters": "()", "modifiers": "private", "return": "AbstractProxyTransaction", "signature": "AbstractProxyTransaction awaitSuccessor()", "full_signature": "private AbstractProxyTransaction awaitSuccessor()", "class_method_signature": "AbstractProxyTransaction.awaitSuccessor()", "testcase": false, "constructor": false}, {"identifier": "preCommit", "parameters": "(final VotingFuture<?> ret)", "modifiers": "final", "return": "void", "signature": "void preCommit(final VotingFuture<?> ret)", "full_signature": "final void preCommit(final VotingFuture<?> ret)", "class_method_signature": "AbstractProxyTransaction.preCommit(final VotingFuture<?> ret)", "testcase": false, "constructor": false}, {"identifier": "onPreCommitComplete", "parameters": "(final TransactionRequest<?> req)", "modifiers": "private", "return": "void", "signature": "void onPreCommitComplete(final TransactionRequest<?> req)", "full_signature": "private void onPreCommitComplete(final TransactionRequest<?> req)", "class_method_signature": "AbstractProxyTransaction.onPreCommitComplete(final TransactionRequest<?> req)", "testcase": false, "constructor": false}, {"identifier": "doCommit", "parameters": "(final VotingFuture<?> ret)", "modifiers": "final", "return": "void", "signature": "void doCommit(final VotingFuture<?> ret)", "full_signature": "final void doCommit(final VotingFuture<?> ret)", "class_method_signature": "AbstractProxyTransaction.doCommit(final VotingFuture<?> ret)", "testcase": false, "constructor": false}, {"identifier": "enqueuePurge", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void enqueuePurge()", "full_signature": "private void enqueuePurge()", "class_method_signature": "AbstractProxyTransaction.enqueuePurge()", "testcase": false, "constructor": false}, {"identifier": "enqueuePurge", "parameters": "(final Consumer<Response<?, ?>> callback)", "modifiers": "final", "return": "void", "signature": "void enqueuePurge(final Consumer<Response<?, ?>> callback)", "full_signature": "final void enqueuePurge(final Consumer<Response<?, ?>> callback)", "class_method_signature": "AbstractProxyTransaction.enqueuePurge(final Consumer<Response<?, ?>> callback)", "testcase": false, "constructor": false}, {"identifier": "enqueuePurge", "parameters": "(final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "modifiers": "final", "return": "void", "signature": "void enqueuePurge(final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "full_signature": "final void enqueuePurge(final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "class_method_signature": "AbstractProxyTransaction.enqueuePurge(final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "testcase": false, "constructor": false}, {"identifier": "startReconnect", "parameters": "()", "modifiers": "final synchronized", "return": "void", "signature": "void startReconnect()", "full_signature": "final synchronized void startReconnect()", "class_method_signature": "AbstractProxyTransaction.startReconnect()", "testcase": false, "constructor": false}, {"identifier": "replayMessages", "parameters": "(final ProxyHistory successorHistory, final Iterable<ConnectionEntry> enqueuedEntries)", "modifiers": "final", "return": "void", "signature": "void replayMessages(final ProxyHistory successorHistory, final Iterable<ConnectionEntry> enqueuedEntries)", "full_signature": "final void replayMessages(final ProxyHistory successorHistory, final Iterable<ConnectionEntry> enqueuedEntries)", "class_method_signature": "AbstractProxyTransaction.replayMessages(final ProxyHistory successorHistory, final Iterable<ConnectionEntry> enqueuedEntries)", "testcase": false, "constructor": false}, {"identifier": "doReplayRequest", "parameters": "(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "modifiers": "private", "return": "void", "signature": "void doReplayRequest(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "full_signature": "private void doReplayRequest(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "class_method_signature": "AbstractProxyTransaction.doReplayRequest(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "testcase": false, "constructor": false}, {"identifier": "finishReconnect", "parameters": "()", "modifiers": "final", "return": "void", "signature": "void finishReconnect()", "full_signature": "final void finishReconnect()", "class_method_signature": "AbstractProxyTransaction.finishReconnect()", "testcase": false, "constructor": false}, {"identifier": "forwardRequest", "parameters": "(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback)", "modifiers": "final", "return": "void", "signature": "void forwardRequest(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback)", "full_signature": "final void forwardRequest(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback)", "class_method_signature": "AbstractProxyTransaction.forwardRequest(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback)", "testcase": false, "constructor": false}, {"identifier": "forwardToSuccessor", "parameters": "(final AbstractProxyTransaction successor, final TransactionRequest<?> request,\n            final Consumer<Response<?, ?>> callback)", "modifiers": "final", "return": "void", "signature": "void forwardToSuccessor(final AbstractProxyTransaction successor, final TransactionRequest<?> request,\n            final Consumer<Response<?, ?>> callback)", "full_signature": "final void forwardToSuccessor(final AbstractProxyTransaction successor, final TransactionRequest<?> request,\n            final Consumer<Response<?, ?>> callback)", "class_method_signature": "AbstractProxyTransaction.forwardToSuccessor(final AbstractProxyTransaction successor, final TransactionRequest<?> request,\n            final Consumer<Response<?, ?>> callback)", "testcase": false, "constructor": false}, {"identifier": "replayRequest", "parameters": "(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "modifiers": "final", "return": "void", "signature": "void replayRequest(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "full_signature": "final void replayRequest(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "class_method_signature": "AbstractProxyTransaction.replayRequest(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "testcase": false, "constructor": false}, {"identifier": "isSnapshotOnly", "parameters": "()", "modifiers": "abstract", "return": "boolean", "signature": "boolean isSnapshotOnly()", "full_signature": "abstract boolean isSnapshotOnly()", "class_method_signature": "AbstractProxyTransaction.isSnapshotOnly()", "testcase": false, "constructor": false}, {"identifier": "doDelete", "parameters": "(YangInstanceIdentifier path)", "modifiers": "abstract", "return": "void", "signature": "void doDelete(YangInstanceIdentifier path)", "full_signature": "abstract void doDelete(YangInstanceIdentifier path)", "class_method_signature": "AbstractProxyTransaction.doDelete(YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "doMerge", "parameters": "(YangInstanceIdentifier path, NormalizedNode<?, ?> data)", "modifiers": "abstract", "return": "void", "signature": "void doMerge(YangInstanceIdentifier path, NormalizedNode<?, ?> data)", "full_signature": "abstract void doMerge(YangInstanceIdentifier path, NormalizedNode<?, ?> data)", "class_method_signature": "AbstractProxyTransaction.doMerge(YangInstanceIdentifier path, NormalizedNode<?, ?> data)", "testcase": false, "constructor": false}, {"identifier": "doWrite", "parameters": "(YangInstanceIdentifier path, NormalizedNode<?, ?> data)", "modifiers": "abstract", "return": "void", "signature": "void doWrite(YangInstanceIdentifier path, NormalizedNode<?, ?> data)", "full_signature": "abstract void doWrite(YangInstanceIdentifier path, NormalizedNode<?, ?> data)", "class_method_signature": "AbstractProxyTransaction.doWrite(YangInstanceIdentifier path, NormalizedNode<?, ?> data)", "testcase": false, "constructor": false}, {"identifier": "doExists", "parameters": "(YangInstanceIdentifier path)", "modifiers": "abstract", "return": "FluentFuture<Boolean>", "signature": "FluentFuture<Boolean> doExists(YangInstanceIdentifier path)", "full_signature": "abstract FluentFuture<Boolean> doExists(YangInstanceIdentifier path)", "class_method_signature": "AbstractProxyTransaction.doExists(YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "doRead", "parameters": "(YangInstanceIdentifier path)", "modifiers": "abstract", "return": "FluentFuture<Optional<NormalizedNode<?, ?>>>", "signature": "FluentFuture<Optional<NormalizedNode<?, ?>>> doRead(YangInstanceIdentifier path)", "full_signature": "abstract FluentFuture<Optional<NormalizedNode<?, ?>>> doRead(YangInstanceIdentifier path)", "class_method_signature": "AbstractProxyTransaction.doRead(YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "flushState", "parameters": "()", "modifiers": "@GuardedBy(\"this\") abstract", "return": "Optional<ModifyTransactionRequest>", "signature": "Optional<ModifyTransactionRequest> flushState()", "full_signature": "@GuardedBy(\"this\") abstract Optional<ModifyTransactionRequest> flushState()", "class_method_signature": "AbstractProxyTransaction.flushState()", "testcase": false, "constructor": false}, {"identifier": "abortRequest", "parameters": "()", "modifiers": "abstract", "return": "TransactionRequest<?>", "signature": "TransactionRequest<?> abortRequest()", "full_signature": "abstract TransactionRequest<?> abortRequest()", "class_method_signature": "AbstractProxyTransaction.abortRequest()", "testcase": false, "constructor": false}, {"identifier": "commitRequest", "parameters": "(boolean coordinated)", "modifiers": "abstract", "return": "TransactionRequest<?>", "signature": "TransactionRequest<?> commitRequest(boolean coordinated)", "full_signature": "abstract TransactionRequest<?> commitRequest(boolean coordinated)", "class_method_signature": "AbstractProxyTransaction.commitRequest(boolean coordinated)", "testcase": false, "constructor": false}, {"identifier": "forwardToRemote", "parameters": "(RemoteProxyTransaction successor, TransactionRequest<?> request,\n            Consumer<Response<?, ?>> callback)", "modifiers": "abstract", "return": "void", "signature": "void forwardToRemote(RemoteProxyTransaction successor, TransactionRequest<?> request,\n            Consumer<Response<?, ?>> callback)", "full_signature": "abstract void forwardToRemote(RemoteProxyTransaction successor, TransactionRequest<?> request,\n            Consumer<Response<?, ?>> callback)", "class_method_signature": "AbstractProxyTransaction.forwardToRemote(RemoteProxyTransaction successor, TransactionRequest<?> request,\n            Consumer<Response<?, ?>> callback)", "testcase": false, "constructor": false}, {"identifier": "forwardToLocal", "parameters": "(LocalProxyTransaction successor, TransactionRequest<?> request,\n            Consumer<Response<?, ?>> callback)", "modifiers": "abstract", "return": "void", "signature": "void forwardToLocal(LocalProxyTransaction successor, TransactionRequest<?> request,\n            Consumer<Response<?, ?>> callback)", "full_signature": "abstract void forwardToLocal(LocalProxyTransaction successor, TransactionRequest<?> request,\n            Consumer<Response<?, ?>> callback)", "class_method_signature": "AbstractProxyTransaction.forwardToLocal(LocalProxyTransaction successor, TransactionRequest<?> request,\n            Consumer<Response<?, ?>> callback)", "testcase": false, "constructor": false}, {"identifier": "handleReplayedLocalRequest", "parameters": "(AbstractLocalTransactionRequest<?> request,\n            @Nullable Consumer<Response<?, ?>> callback, long enqueuedTicks)", "modifiers": "abstract", "return": "void", "signature": "void handleReplayedLocalRequest(AbstractLocalTransactionRequest<?> request,\n            @Nullable Consumer<Response<?, ?>> callback, long enqueuedTicks)", "full_signature": "abstract void handleReplayedLocalRequest(AbstractLocalTransactionRequest<?> request,\n            @Nullable Consumer<Response<?, ?>> callback, long enqueuedTicks)", "class_method_signature": "AbstractProxyTransaction.handleReplayedLocalRequest(AbstractLocalTransactionRequest<?> request,\n            @Nullable Consumer<Response<?, ?>> callback, long enqueuedTicks)", "testcase": false, "constructor": false}, {"identifier": "handleReplayedRemoteRequest", "parameters": "(TransactionRequest<?> request,\n            @Nullable Consumer<Response<?, ?>> callback, long enqueuedTicks)", "modifiers": "abstract", "return": "void", "signature": "void handleReplayedRemoteRequest(TransactionRequest<?> request,\n            @Nullable Consumer<Response<?, ?>> callback, long enqueuedTicks)", "full_signature": "abstract void handleReplayedRemoteRequest(TransactionRequest<?> request,\n            @Nullable Consumer<Response<?, ?>> callback, long enqueuedTicks)", "class_method_signature": "AbstractProxyTransaction.handleReplayedRemoteRequest(TransactionRequest<?> request,\n            @Nullable Consumer<Response<?, ?>> callback, long enqueuedTicks)", "testcase": false, "constructor": false}, {"identifier": "unhandledResponseException", "parameters": "(final Response<?, ?> resp)", "modifiers": "private static", "return": "IllegalStateException", "signature": "IllegalStateException unhandledResponseException(final Response<?, ?> resp)", "full_signature": "private static IllegalStateException unhandledResponseException(final Response<?, ?> resp)", "class_method_signature": "AbstractProxyTransaction.unhandledResponseException(final Response<?, ?> resp)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String toString()", "full_signature": "@Override public final String toString()", "class_method_signature": "AbstractProxyTransaction.toString()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/databroker/actors/dds/AbstractProxyTransaction.java"}, "focal_method": {"identifier": "exists", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "final", "return": "FluentFuture<Boolean>", "body": "final FluentFuture<Boolean> exists(final YangInstanceIdentifier path) {\n        checkNotSealed();\n        return doExists(path);\n    }", "signature": "FluentFuture<Boolean> exists(final YangInstanceIdentifier path)", "full_signature": "final FluentFuture<Boolean> exists(final YangInstanceIdentifier path)", "class_method_signature": "AbstractProxyTransaction.exists(final YangInstanceIdentifier path)", "testcase": false, "constructor": false, "invocations": ["checkNotSealed", "doExists"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}