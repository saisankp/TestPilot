{"test_class": {"identifier": "AbstractUseDataProviderArgumentProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AbstractUseDataProviderArgumentProvider<Annotation, Annotation> underTest;", "modifier": "private", "type": "AbstractUseDataProviderArgumentProvider<Annotation, Annotation>", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "private final Annotation dataProviderAnnotation = () -> Annotation.class;", "modifier": "private final", "type": "Annotation", "declarator": "dataProviderAnnotation = () -> Annotation.class", "var_name": "dataProviderAnnotation"}, {"original_string": "@SuppressWarnings(\"unchecked\")\n    private final Class<Annotation> dataProviderAnnotationClass = (Class<Annotation>) dataProviderAnnotation.getClass();", "modifier": "@SuppressWarnings(\"unchecked\")\n    private final", "type": "Class<Annotation>", "declarator": "dataProviderAnnotationClass = (Class<Annotation>) dataProviderAnnotation.getClass()", "var_name": "dataProviderAnnotationClass"}, {"original_string": "@Mock\n    private DataConverter dataConverter;", "modifier": "@Mock\n    private", "type": "DataConverter", "declarator": "dataConverter", "var_name": "dataConverter"}, {"original_string": "@Mock\n    private ExtensionContext extensionContext;", "modifier": "@Mock\n    private", "type": "ExtensionContext", "declarator": "extensionContext", "var_name": "extensionContext"}, {"original_string": "@Mock\n    private DataProviderResolverContext dataProviderResolverContext;", "modifier": "@Mock\n    private", "type": "DataProviderResolverContext", "declarator": "dataProviderResolverContext", "var_name": "dataProviderResolverContext"}, {"original_string": "@Mock\n    private ConverterContext converterContext;", "modifier": "@Mock\n    private", "type": "ConverterContext", "declarator": "converterContext", "var_name": "converterContext"}, {"original_string": "@Mock\n    private Store store;", "modifier": "@Mock\n    private", "type": "Store", "declarator": "store", "var_name": "store"}], "file": "junit-jupiter-params/src/test/java/com/tngtech/junit/dataprovider/AbstractUseDataProviderArgumentProviderTest.java"}, "test_case": {"identifier": "testInvokeDataProviderMethodToRetrieveDataShouldThrowParameterResolutionExceptionIfDataProviderInvocationThrows", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testInvokeDataProviderMethodToRetrieveDataShouldThrowParameterResolutionExceptionIfDataProviderInvocationThrows()\n            throws Exception {\n        // Given:\n        Method dataProviderMethod = this.getClass().getDeclaredMethod(\n                \"testInvokeDataProviderMethodToRetrieveDataShouldThrowParameterResolutionExceptionIfDataProviderInvocationThrows\");\n\n        when(extensionContext.getRoot()).thenReturn(extensionContext);\n        when(extensionContext.getStore(any(Namespace.class))).thenReturn(store);\n\n        // When:\n        Exception result = assertThrows(ParameterResolutionException.class,\n                () -> underTest.invokeDataProviderMethodToRetrieveData(dataProviderMethod, true, extensionContext));\n\n        // Then:\n        assertThat(result).hasMessageMatching(\"Exception while invoking dataprovider method '.*': .*\");\n    }", "signature": "void testInvokeDataProviderMethodToRetrieveDataShouldThrowParameterResolutionExceptionIfDataProviderInvocationThrows()", "full_signature": "@Test void testInvokeDataProviderMethodToRetrieveDataShouldThrowParameterResolutionExceptionIfDataProviderInvocationThrows()", "class_method_signature": "AbstractUseDataProviderArgumentProviderTest.testInvokeDataProviderMethodToRetrieveDataShouldThrowParameterResolutionExceptionIfDataProviderInvocationThrows()", "testcase": true, "constructor": false, "invocations": ["getDeclaredMethod", "getClass", "thenReturn", "when", "getRoot", "thenReturn", "when", "getStore", "any", "assertThrows", "invokeDataProviderMethodToRetrieveData", "hasMessageMatching", "assertThat"]}, "focal_class": {"identifier": "AbstractUseDataProviderArgumentProvider", "superclass": "extends AbstractDataProviderArgumentProvider<SOURCE_ANNOTATION>", "interfaces": "", "fields": [{"original_string": "private static final ExecutableInvoker executableInvoker = new ExecutableInvoker();", "modifier": "private static final", "type": "ExecutableInvoker", "declarator": "executableInvoker = new ExecutableInvoker()", "var_name": "executableInvoker"}, {"original_string": "protected static final Namespace NAMESPACE_USE_DATAPROVIDER = Namespace\n            .create(AbstractUseDataProviderArgumentProvider.class, \"dataCache\");", "modifier": "protected static final", "type": "Namespace", "declarator": "NAMESPACE_USE_DATAPROVIDER = Namespace\n            .create(AbstractUseDataProviderArgumentProvider.class, \"dataCache\")", "var_name": "NAMESPACE_USE_DATAPROVIDER"}, {"original_string": "private final Class<DATAPROVIDER_ANNOTATION> dataProviderAnnotationClass;", "modifier": "private final", "type": "Class<DATAPROVIDER_ANNOTATION>", "declarator": "dataProviderAnnotationClass", "var_name": "dataProviderAnnotationClass"}], "methods": [{"identifier": "AbstractUseDataProviderArgumentProvider", "parameters": "(Class<DATAPROVIDER_ANNOTATION> dataProviderAnnotationClass,\n            DataConverter dataConverter)", "modifiers": "protected", "return": "", "signature": " AbstractUseDataProviderArgumentProvider(Class<DATAPROVIDER_ANNOTATION> dataProviderAnnotationClass,\n            DataConverter dataConverter)", "full_signature": "protected  AbstractUseDataProviderArgumentProvider(Class<DATAPROVIDER_ANNOTATION> dataProviderAnnotationClass,\n            DataConverter dataConverter)", "class_method_signature": "AbstractUseDataProviderArgumentProvider.AbstractUseDataProviderArgumentProvider(Class<DATAPROVIDER_ANNOTATION> dataProviderAnnotationClass,\n            DataConverter dataConverter)", "testcase": false, "constructor": true}, {"identifier": "AbstractUseDataProviderArgumentProvider", "parameters": "(Class<DATAPROVIDER_ANNOTATION> dataProviderAnnotationClass)", "modifiers": "protected", "return": "", "signature": " AbstractUseDataProviderArgumentProvider(Class<DATAPROVIDER_ANNOTATION> dataProviderAnnotationClass)", "full_signature": "protected  AbstractUseDataProviderArgumentProvider(Class<DATAPROVIDER_ANNOTATION> dataProviderAnnotationClass)", "class_method_signature": "AbstractUseDataProviderArgumentProvider.AbstractUseDataProviderArgumentProvider(Class<DATAPROVIDER_ANNOTATION> dataProviderAnnotationClass)", "testcase": false, "constructor": true}, {"identifier": "provideArguments", "parameters": "(ExtensionContext context)", "modifiers": "@Override public", "return": "Stream<? extends Arguments>", "signature": "Stream<? extends Arguments> provideArguments(ExtensionContext context)", "full_signature": "@Override public Stream<? extends Arguments> provideArguments(ExtensionContext context)", "class_method_signature": "AbstractUseDataProviderArgumentProvider.provideArguments(ExtensionContext context)", "testcase": false, "constructor": false}, {"identifier": "getDataProviderResolverContext", "parameters": "(ExtensionContext extensionContext,\n            SOURCE_ANNOTATION testAnnotation)", "modifiers": "protected abstract", "return": "DataProviderResolverContext", "signature": "DataProviderResolverContext getDataProviderResolverContext(ExtensionContext extensionContext,\n            SOURCE_ANNOTATION testAnnotation)", "full_signature": "protected abstract DataProviderResolverContext getDataProviderResolverContext(ExtensionContext extensionContext,\n            SOURCE_ANNOTATION testAnnotation)", "class_method_signature": "AbstractUseDataProviderArgumentProvider.getDataProviderResolverContext(ExtensionContext extensionContext,\n            SOURCE_ANNOTATION testAnnotation)", "testcase": false, "constructor": false}, {"identifier": "getConverterContext", "parameters": "(DATAPROVIDER_ANNOTATION dataProvider)", "modifiers": "protected abstract", "return": "ConverterContext", "signature": "ConverterContext getConverterContext(DATAPROVIDER_ANNOTATION dataProvider)", "full_signature": "protected abstract ConverterContext getConverterContext(DATAPROVIDER_ANNOTATION dataProvider)", "class_method_signature": "AbstractUseDataProviderArgumentProvider.getConverterContext(DATAPROVIDER_ANNOTATION dataProvider)", "testcase": false, "constructor": false}, {"identifier": "cacheDataProviderResult", "parameters": "(\n            @SuppressWarnings(\"unused\") DATAPROVIDER_ANNOTATION dataProviderAnnotation)", "modifiers": "protected", "return": "boolean", "signature": "boolean cacheDataProviderResult(\n            @SuppressWarnings(\"unused\") DATAPROVIDER_ANNOTATION dataProviderAnnotation)", "full_signature": "protected boolean cacheDataProviderResult(\n            @SuppressWarnings(\"unused\") DATAPROVIDER_ANNOTATION dataProviderAnnotation)", "class_method_signature": "AbstractUseDataProviderArgumentProvider.cacheDataProviderResult(\n            @SuppressWarnings(\"unused\") DATAPROVIDER_ANNOTATION dataProviderAnnotation)", "testcase": false, "constructor": false}, {"identifier": "invokeDataProviderMethodToRetrieveData", "parameters": "(Method dataProviderMethod, ExtensionContext context)", "modifiers": "@Deprecated protected", "return": "Object", "signature": "Object invokeDataProviderMethodToRetrieveData(Method dataProviderMethod, ExtensionContext context)", "full_signature": "@Deprecated protected Object invokeDataProviderMethodToRetrieveData(Method dataProviderMethod, ExtensionContext context)", "class_method_signature": "AbstractUseDataProviderArgumentProvider.invokeDataProviderMethodToRetrieveData(Method dataProviderMethod, ExtensionContext context)", "testcase": false, "constructor": false}, {"identifier": "invokeDataProviderMethodToRetrieveData", "parameters": "(Method dataProviderMethod, boolean cacheDataProviderResult,\n            ExtensionContext context)", "modifiers": "protected", "return": "Object", "signature": "Object invokeDataProviderMethodToRetrieveData(Method dataProviderMethod, boolean cacheDataProviderResult,\n            ExtensionContext context)", "full_signature": "protected Object invokeDataProviderMethodToRetrieveData(Method dataProviderMethod, boolean cacheDataProviderResult,\n            ExtensionContext context)", "class_method_signature": "AbstractUseDataProviderArgumentProvider.invokeDataProviderMethodToRetrieveData(Method dataProviderMethod, boolean cacheDataProviderResult,\n            ExtensionContext context)", "testcase": false, "constructor": false}, {"identifier": "emptyConfigurationParameters", "parameters": "()", "modifiers": "private", "return": "ConfigurationParameters", "signature": "ConfigurationParameters emptyConfigurationParameters()", "full_signature": "private ConfigurationParameters emptyConfigurationParameters()", "class_method_signature": "AbstractUseDataProviderArgumentProvider.emptyConfigurationParameters()", "testcase": false, "constructor": false}], "file": "junit-jupiter-params/src/main/java/com/tngtech/junit/dataprovider/AbstractUseDataProviderArgumentProvider.java"}, "focal_method": {"identifier": "invokeDataProviderMethodToRetrieveData", "parameters": "(Method dataProviderMethod, ExtensionContext context)", "modifiers": "@Deprecated protected", "return": "Object", "body": "@Deprecated\n    protected Object invokeDataProviderMethodToRetrieveData(Method dataProviderMethod, ExtensionContext context) {\n        return invokeDataProviderMethodToRetrieveData(dataProviderMethod, true, context);\n    }", "signature": "Object invokeDataProviderMethodToRetrieveData(Method dataProviderMethod, ExtensionContext context)", "full_signature": "@Deprecated protected Object invokeDataProviderMethodToRetrieveData(Method dataProviderMethod, ExtensionContext context)", "class_method_signature": "AbstractUseDataProviderArgumentProvider.invokeDataProviderMethodToRetrieveData(Method dataProviderMethod, ExtensionContext context)", "testcase": false, "constructor": false, "invocations": ["invokeDataProviderMethodToRetrieveData"]}, "repository": {"repo_id": 8175611, "url": "https://github.com/TNG/junit-dataprovider", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 215, "size": 1383, "license": "licensed"}}