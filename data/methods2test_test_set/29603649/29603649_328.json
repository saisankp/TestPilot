{"test_class": {"identifier": "SequenceDescriptorEvaluatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private DialogDescriptor dialogDescriptor;", "modifier": "@Mock\n    private", "type": "DialogDescriptor", "declarator": "dialogDescriptor", "var_name": "dialogDescriptor"}, {"original_string": "@Mock\n    private ConditionDescriptor conditionDescriptor;", "modifier": "@Mock\n    private", "type": "ConditionDescriptor", "declarator": "conditionDescriptor", "var_name": "conditionDescriptor"}, {"original_string": "@Mock\n    private Condition condition;", "modifier": "@Mock\n    private", "type": "Condition", "declarator": "condition", "var_name": "condition"}, {"original_string": "@Mock\n    private WilmaHttpRequest clonedRequest;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "clonedRequest", "var_name": "clonedRequest"}, {"original_string": "@Mock\n    private ConditionEvaluator conditionEvaluator;", "modifier": "@Mock\n    private", "type": "ConditionEvaluator", "declarator": "conditionEvaluator", "var_name": "conditionEvaluator"}, {"original_string": "@Mock\n    private WilmaHttpRequestCloner requestCloner;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequestCloner", "declarator": "requestCloner", "var_name": "requestCloner"}, {"original_string": "@Mock\n    private DialogDescriptorService dialogDescriptorService;", "modifier": "@Mock\n    private", "type": "DialogDescriptorService", "declarator": "dialogDescriptorService", "var_name": "dialogDescriptorService"}, {"original_string": "@Mock\n    private WilmaHttpRequest request;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private SequenceDescriptor sequenceDescriptor;", "modifier": "@Mock\n    private", "type": "SequenceDescriptor", "declarator": "sequenceDescriptor", "var_name": "sequenceDescriptor"}, {"original_string": "@Mock\n    private Logger logger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Mock\n    private SequenceDescriptorKeyUtil sequenceDescriptorKeyUtil;", "modifier": "@Mock\n    private", "type": "SequenceDescriptorKeyUtil", "declarator": "sequenceDescriptorKeyUtil", "var_name": "sequenceDescriptorKeyUtil"}, {"original_string": "@InjectMocks\n    private SequenceDescriptorEvaluator underTest;", "modifier": "@InjectMocks\n    private", "type": "SequenceDescriptorEvaluator", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-message-sequence/src/test/java/com/epam/wilma/sequence/evaluator/SequenceDescriptorEvaluatorTest.java"}, "test_case": {"identifier": "testEvaluateWhenADialogDescriptorIsTrue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEvaluateWhenADialogDescriptorIsTrue() {\n        //GIVEN\n        given(dialogDescriptor.getConditionDescriptor()).willReturn(conditionDescriptor);\n        given(conditionDescriptor.getCondition()).willReturn(condition);\n        given(conditionEvaluator.evaluate(condition, clonedRequest)).willReturn(false).willReturn(true);\n\n        List<ConditionDescriptor> cds = new ArrayList<>();\n        cds.add(conditionDescriptor);\n        given(sequenceDescriptor.getConditionDescriptors()).willReturn(cds);\n        List<DialogDescriptor> dds = new ArrayList<>();\n        dds.add(dialogDescriptor);\n        given(sequenceDescriptor.getDialogDescriptors()).willReturn(dds);\n        //WHEN\n        boolean result = underTest.evaluate(request, sequenceDescriptor);\n        //THEN\n        Assert.assertTrue(result);\n    }", "signature": "void testEvaluateWhenADialogDescriptorIsTrue()", "full_signature": "@Test public void testEvaluateWhenADialogDescriptorIsTrue()", "class_method_signature": "SequenceDescriptorEvaluatorTest.testEvaluateWhenADialogDescriptorIsTrue()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getConditionDescriptor", "willReturn", "given", "getCondition", "willReturn", "willReturn", "given", "evaluate", "add", "willReturn", "given", "getConditionDescriptors", "add", "willReturn", "given", "getDialogDescriptors", "evaluate", "assertTrue"]}, "focal_class": {"identifier": "SequenceDescriptorEvaluator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(SequenceDescriptorEvaluator.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SequenceDescriptorEvaluator.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private ConditionEvaluator conditionEvaluator;", "modifier": "@Autowired\n    private", "type": "ConditionEvaluator", "declarator": "conditionEvaluator", "var_name": "conditionEvaluator"}, {"original_string": "@Autowired\n    private WilmaHttpRequestCloner requestCloner;", "modifier": "@Autowired\n    private", "type": "WilmaHttpRequestCloner", "declarator": "requestCloner", "var_name": "requestCloner"}, {"original_string": "@Autowired\n    private DialogDescriptorService dialogDescriptorService;", "modifier": "@Autowired\n    private", "type": "DialogDescriptorService", "declarator": "dialogDescriptorService", "var_name": "dialogDescriptorService"}, {"original_string": "@Autowired\n    private SequenceDescriptorKeyUtil sequenceDescriptorKeyUtil;", "modifier": "@Autowired\n    private", "type": "SequenceDescriptorKeyUtil", "declarator": "sequenceDescriptorKeyUtil", "var_name": "sequenceDescriptorKeyUtil"}], "methods": [{"identifier": "evaluate", "parameters": "(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "modifiers": "public", "return": "boolean", "signature": "boolean evaluate(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "full_signature": "public boolean evaluate(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "class_method_signature": "SequenceDescriptorEvaluator.evaluate(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "testcase": false, "constructor": false}, {"identifier": "checkConditions", "parameters": "(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor, final boolean state)", "modifiers": "private", "return": "boolean", "signature": "boolean checkConditions(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor, final boolean state)", "full_signature": "private boolean checkConditions(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor, final boolean state)", "class_method_signature": "SequenceDescriptorEvaluator.checkConditions(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor, final boolean state)", "testcase": false, "constructor": false}, {"identifier": "checkDialogDescriptors", "parameters": "(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor, final boolean state)", "modifiers": "private", "return": "boolean", "signature": "boolean checkDialogDescriptors(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor, final boolean state)", "full_signature": "private boolean checkDialogDescriptors(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor, final boolean state)", "class_method_signature": "SequenceDescriptorEvaluator.checkDialogDescriptors(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor, final boolean state)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-message-sequence/src/main/java/com/epam/wilma/sequence/evaluator/SequenceDescriptorEvaluator.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "modifiers": "public", "return": "boolean", "body": "public boolean evaluate(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor) {\n        boolean result = false;\n        result = checkConditions(request, sequenceDescriptor, result);\n        if (!result) {\n            result = checkDialogDescriptors(request, sequenceDescriptor, result);\n        }\n        return result;\n    }", "signature": "boolean evaluate(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "full_signature": "public boolean evaluate(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "class_method_signature": "SequenceDescriptorEvaluator.evaluate(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "testcase": false, "constructor": false, "invocations": ["checkConditions", "checkDialogDescriptors"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}