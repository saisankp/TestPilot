{"test_class": {"identifier": "ReflectionAssertionsTest", "superclass": "", "interfaces": "", "fields": [], "file": "reflection-assert/src/test/java/com/github/reflectionassert/ReflectionAssertionsTest.java"}, "test_case": {"identifier": "lenientDatesEquals", "parameters": "()", "modifiers": "@TestFactory @DisplayName(\"Lenient Dates Equals\")", "return": "Stream<? extends DynamicNode>", "body": "@TestFactory\n  @DisplayName(\"Lenient Dates Equals\")\n  Stream<? extends DynamicNode> lenientDatesEquals() {\n    return Stream.<Generator>of(\n        this::nulls,\n        this::simple,\n        this::equivalence,\n        this::overriddenEquals,\n        this::collections,\n        this::optionals,\n        this::differentClasses,\n        this::lenientOldDates,\n        this::lenientJava8Dates\n    ).map(generator -> generator.generate(\n        sample -> assertReflective().withLenientDates()\n            .that(sample.actual)\n            .isEqualTo(sample.expected),\n        sample -> assertFailing(\n            () -> assertReflective().withLenientDates()\n                .that(sample.actual)\n                .isEqualTo(sample.expected)\n        )\n    ));\n  }", "signature": "Stream<? extends DynamicNode> lenientDatesEquals()", "full_signature": "@TestFactory @DisplayName(\"Lenient Dates Equals\") Stream<? extends DynamicNode> lenientDatesEquals()", "class_method_signature": "ReflectionAssertionsTest.lenientDatesEquals()", "testcase": true, "constructor": false, "invocations": ["map", "of", "generate", "isEqualTo", "that", "withLenientDates", "assertReflective", "assertFailing", "isEqualTo", "that", "withLenientDates", "assertReflective"]}, "focal_class": {"identifier": "ReflectionAssertions", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "assertReflective", "parameters": "()", "modifiers": "public static", "return": "ModePhase", "signature": "ModePhase assertReflective()", "full_signature": "public static ModePhase assertReflective()", "class_method_signature": "ReflectionAssertions.assertReflective()", "testcase": false, "constructor": false}, {"identifier": "assertReflectiveThat", "parameters": "(Object actual)", "modifiers": "public static", "return": "OperationPhase", "signature": "OperationPhase assertReflectiveThat(Object actual)", "full_signature": "public static OperationPhase assertReflectiveThat(Object actual)", "class_method_signature": "ReflectionAssertions.assertReflectiveThat(Object actual)", "testcase": false, "constructor": false}, {"identifier": "assertLenientThat", "parameters": "(Object actual)", "modifiers": "public static", "return": "OperationPhase", "signature": "OperationPhase assertLenientThat(Object actual)", "full_signature": "public static OperationPhase assertLenientThat(Object actual)", "class_method_signature": "ReflectionAssertions.assertLenientThat(Object actual)", "testcase": false, "constructor": false}], "file": "reflection-assert/src/main/java/com/github/reflectionassert/ReflectionAssertions.java"}, "focal_method": {"identifier": "assertReflective", "parameters": "()", "modifiers": "public static", "return": "ModePhase", "body": "public static ModePhase assertReflective() {\n    return new ModePhase();\n  }", "signature": "ModePhase assertReflective()", "full_signature": "public static ModePhase assertReflective()", "class_method_signature": "ReflectionAssertions.assertReflective()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 112121863, "url": "https://github.com/hpple/reflection-assert", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 7, "size": 223, "license": "licensed"}}