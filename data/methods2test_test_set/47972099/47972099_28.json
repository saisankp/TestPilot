{"test_class": {"identifier": "AbstractIDTest", "superclass": "extends TestLogger", "interfaces": "", "fields": [], "file": "flink-core/src/test/java/org/apache/flink/util/AbstractIDTest.java"}, "test_case": {"identifier": "testCompare", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCompare() {\n\t\ttry {\n\t\t\tAbstractID id1 = new AbstractID(0, 0);\n\t\t\tAbstractID id2 = new AbstractID(1, 0);\n\t\t\tAbstractID id3 = new AbstractID(0, 1);\n\t\t\tAbstractID id4 = new AbstractID(-1, 0);\n\t\t\tAbstractID id5 = new AbstractID(0, -1);\n\t\t\tAbstractID id6 = new AbstractID(-1, -1);\n\t\t\t\n\t\t\tAbstractID id7 = new AbstractID(Long.MAX_VALUE, Long.MAX_VALUE);\n\t\t\tAbstractID id8 = new AbstractID(Long.MIN_VALUE, Long.MIN_VALUE);\n\t\t\tAbstractID id9 = new AbstractID(Long.MAX_VALUE, Long.MIN_VALUE);\n\t\t\tAbstractID id10 = new AbstractID(Long.MIN_VALUE, Long.MAX_VALUE);\n\t\t\t\n\t\t\t// test self equality\n\t\t\tassertEquals(0, id1.compareTo(CommonTestUtils.createCopyWritable(id1)));\n\t\t\tassertEquals(0, id2.compareTo(CommonTestUtils.createCopyWritable(id2)));\n\t\t\tassertEquals(0, id3.compareTo(CommonTestUtils.createCopyWritable(id3)));\n\t\t\tassertEquals(0, id4.compareTo(CommonTestUtils.createCopyWritable(id4)));\n\t\t\tassertEquals(0, id5.compareTo(CommonTestUtils.createCopyWritable(id5)));\n\t\t\tassertEquals(0, id6.compareTo(CommonTestUtils.createCopyWritable(id6)));\n\t\t\tassertEquals(0, id7.compareTo(CommonTestUtils.createCopyWritable(id7)));\n\t\t\tassertEquals(0, id8.compareTo(CommonTestUtils.createCopyWritable(id8)));\n\t\t\tassertEquals(0, id9.compareTo(CommonTestUtils.createCopyWritable(id9)));\n\t\t\tassertEquals(0, id10.compareTo(CommonTestUtils.createCopyWritable(id10)));\n\t\t\t\n\t\t\t// test order\n\t\t\tassertCompare(id1, id2, -1);\n\t\t\tassertCompare(id1, id3, -1);\n\t\t\tassertCompare(id1, id4, 1);\n\t\t\tassertCompare(id1, id5, 1);\n\t\t\tassertCompare(id1, id6, 1);\n\t\t\tassertCompare(id2, id5, 1);\n\t\t\tassertCompare(id3, id5, 1);\n\t\t\tassertCompare(id2, id6, 1);\n\t\t\tassertCompare(id3, id6, 1);\n\t\t\tassertCompare(id1, id7, -1);\n\t\t\tassertCompare(id1, id8, 1);\n\t\t\tassertCompare(id7, id8, 1);\n\t\t\tassertCompare(id9, id10, -1);\n\t\t\tassertCompare(id7, id9, 1);\n\t\t\tassertCompare(id7, id10, 1);\n\t\t\tassertCompare(id8, id9, -1);\n\t\t\tassertCompare(id8, id10, -1);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "signature": "void testCompare()", "full_signature": "@Test public void testCompare()", "class_method_signature": "AbstractIDTest.testCompare()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "compareTo", "createCopyWritable", "assertEquals", "compareTo", "createCopyWritable", "assertEquals", "compareTo", "createCopyWritable", "assertEquals", "compareTo", "createCopyWritable", "assertEquals", "compareTo", "createCopyWritable", "assertEquals", "compareTo", "createCopyWritable", "assertEquals", "compareTo", "createCopyWritable", "assertEquals", "compareTo", "createCopyWritable", "assertEquals", "compareTo", "createCopyWritable", "assertEquals", "compareTo", "createCopyWritable", "assertCompare", "assertCompare", "assertCompare", "assertCompare", "assertCompare", "assertCompare", "assertCompare", "assertCompare", "assertCompare", "assertCompare", "assertCompare", "assertCompare", "assertCompare", "assertCompare", "assertCompare", "assertCompare", "assertCompare", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "AbstractID", "superclass": "", "interfaces": "implements IOReadableWritable, Comparable<AbstractID>, java.io.Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private static final Random RND = new Random();", "modifier": "private static final", "type": "Random", "declarator": "RND = new Random()", "var_name": "RND"}, {"original_string": "private static final int SIZE_OF_LONG = 8;", "modifier": "private static final", "type": "int", "declarator": "SIZE_OF_LONG = 8", "var_name": "SIZE_OF_LONG"}, {"original_string": "public static final int SIZE = 2 * SIZE_OF_LONG;", "modifier": "public static final", "type": "int", "declarator": "SIZE = 2 * SIZE_OF_LONG", "var_name": "SIZE"}, {"original_string": "protected long upperPart;", "modifier": "protected", "type": "long", "declarator": "upperPart", "var_name": "upperPart"}, {"original_string": "protected long lowerPart;", "modifier": "protected", "type": "long", "declarator": "lowerPart", "var_name": "lowerPart"}, {"original_string": "private String toString;", "modifier": "private", "type": "String", "declarator": "toString", "var_name": "toString"}], "methods": [{"identifier": "AbstractID", "parameters": "(byte[] bytes)", "modifiers": "public", "return": "", "signature": " AbstractID(byte[] bytes)", "full_signature": "public  AbstractID(byte[] bytes)", "class_method_signature": "AbstractID.AbstractID(byte[] bytes)", "testcase": false, "constructor": true}, {"identifier": "AbstractID", "parameters": "(long lowerPart, long upperPart)", "modifiers": "public", "return": "", "signature": " AbstractID(long lowerPart, long upperPart)", "full_signature": "public  AbstractID(long lowerPart, long upperPart)", "class_method_signature": "AbstractID.AbstractID(long lowerPart, long upperPart)", "testcase": false, "constructor": true}, {"identifier": "AbstractID", "parameters": "(AbstractID id)", "modifiers": "public", "return": "", "signature": " AbstractID(AbstractID id)", "full_signature": "public  AbstractID(AbstractID id)", "class_method_signature": "AbstractID.AbstractID(AbstractID id)", "testcase": false, "constructor": true}, {"identifier": "AbstractID", "parameters": "()", "modifiers": "public", "return": "", "signature": " AbstractID()", "full_signature": "public  AbstractID()", "class_method_signature": "AbstractID.AbstractID()", "testcase": false, "constructor": true}, {"identifier": "getLowerPart", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLowerPart()", "full_signature": "public long getLowerPart()", "class_method_signature": "AbstractID.getLowerPart()", "testcase": false, "constructor": false}, {"identifier": "getUpperPart", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getUpperPart()", "full_signature": "public long getUpperPart()", "class_method_signature": "AbstractID.getUpperPart()", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getBytes()", "full_signature": "public byte[] getBytes()", "class_method_signature": "AbstractID.getBytes()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(DataInputView in)", "modifiers": "@Override public", "return": "void", "signature": "void read(DataInputView in)", "full_signature": "@Override public void read(DataInputView in)", "class_method_signature": "AbstractID.read(DataInputView in)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataOutputView out)", "modifiers": "@Override public", "return": "void", "signature": "void write(DataOutputView out)", "full_signature": "@Override public void write(DataOutputView out)", "class_method_signature": "AbstractID.write(DataOutputView out)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "AbstractID.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AbstractID.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AbstractID.toString()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(AbstractID o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(AbstractID o)", "full_signature": "@Override public int compareTo(AbstractID o)", "class_method_signature": "AbstractID.compareTo(AbstractID o)", "testcase": false, "constructor": false}, {"identifier": "byteArrayToLong", "parameters": "(byte[] ba, int offset)", "modifiers": "private static", "return": "long", "signature": "long byteArrayToLong(byte[] ba, int offset)", "full_signature": "private static long byteArrayToLong(byte[] ba, int offset)", "class_method_signature": "AbstractID.byteArrayToLong(byte[] ba, int offset)", "testcase": false, "constructor": false}, {"identifier": "longToByteArray", "parameters": "(long l, byte[] ba, int offset)", "modifiers": "private static", "return": "void", "signature": "void longToByteArray(long l, byte[] ba, int offset)", "full_signature": "private static void longToByteArray(long l, byte[] ba, int offset)", "class_method_signature": "AbstractID.longToByteArray(long l, byte[] ba, int offset)", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/util/AbstractID.java"}, "focal_method": {"identifier": "compareTo", "parameters": "(AbstractID o)", "modifiers": "@Override public", "return": "int", "body": "@Override\n\tpublic int compareTo(AbstractID o) {\n\t\tint diff1 = (this.upperPart < o.upperPart) ? -1 : ((this.upperPart == o.upperPart) ? 0 : 1);\n\t\tint diff2 = (this.lowerPart < o.lowerPart) ? -1 : ((this.lowerPart == o.lowerPart) ? 0 : 1);\n\t\treturn diff1 == 0 ? diff2 : diff1;\n\t}", "signature": "int compareTo(AbstractID o)", "full_signature": "@Override public int compareTo(AbstractID o)", "class_method_signature": "AbstractID.compareTo(AbstractID o)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}