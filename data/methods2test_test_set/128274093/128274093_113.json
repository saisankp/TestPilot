{"test_class": {"identifier": "ReplaySubjectTest", "superclass": "extends SubjectTest<Integer>", "interfaces": "", "fields": [{"original_string": "private final Throwable testException = new Throwable();", "modifier": "private final", "type": "Throwable", "declarator": "testException = new Throwable()", "var_name": "testException"}], "file": "rxjava/src/test/java/io/reactivex/subjects/ReplaySubjectTest.java"}, "test_case": {"identifier": "createWithTimeAndSizeInvalidCapacity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createWithTimeAndSizeInvalidCapacity() {\n        try {\n            ReplaySubject.createWithTimeAndSize(1, TimeUnit.DAYS, Schedulers.computation(), -99);\n            fail(\"Didn't throw IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"maxSize > 0 required but it was -99\", ex.getMessage());\n        }\n    }", "signature": "void createWithTimeAndSizeInvalidCapacity()", "full_signature": "@Test public void createWithTimeAndSizeInvalidCapacity()", "class_method_signature": "ReplaySubjectTest.createWithTimeAndSizeInvalidCapacity()", "testcase": true, "constructor": false, "invocations": ["createWithTimeAndSize", "computation", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "ReplaySubject", "superclass": "extends Subject<T>", "interfaces": "", "fields": [{"original_string": "final ReplayBuffer<T> buffer;", "modifier": "final", "type": "ReplayBuffer<T>", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "final AtomicReference<ReplayDisposable<T>[]> observers;", "modifier": "final", "type": "AtomicReference<ReplayDisposable<T>[]>", "declarator": "observers", "var_name": "observers"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    static final ReplayDisposable[] EMPTY = new ReplayDisposable[0];", "modifier": "@SuppressWarnings(\"rawtypes\")\n    static final", "type": "ReplayDisposable[]", "declarator": "EMPTY = new ReplayDisposable[0]", "var_name": "EMPTY"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    static final ReplayDisposable[] TERMINATED = new ReplayDisposable[0];", "modifier": "@SuppressWarnings(\"rawtypes\")\n    static final", "type": "ReplayDisposable[]", "declarator": "TERMINATED = new ReplayDisposable[0]", "var_name": "TERMINATED"}, {"original_string": "boolean done;", "modifier": "", "type": "boolean", "declarator": "done", "var_name": "done"}, {"original_string": "private static final Object[] EMPTY_ARRAY = new Object[0];", "modifier": "private static final", "type": "Object[]", "declarator": "EMPTY_ARRAY = new Object[0]", "var_name": "EMPTY_ARRAY"}], "methods": [{"identifier": "create", "parameters": "()", "modifiers": "@CheckReturnValue @NonNull public static", "return": "ReplaySubject<T>", "signature": "ReplaySubject<T> create()", "full_signature": "@CheckReturnValue @NonNull public static ReplaySubject<T> create()", "class_method_signature": "ReplaySubject.create()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(int capacityHint)", "modifiers": "@CheckReturnValue @NonNull public static", "return": "ReplaySubject<T>", "signature": "ReplaySubject<T> create(int capacityHint)", "full_signature": "@CheckReturnValue @NonNull public static ReplaySubject<T> create(int capacityHint)", "class_method_signature": "ReplaySubject.create(int capacityHint)", "testcase": false, "constructor": false}, {"identifier": "createWithSize", "parameters": "(int maxSize)", "modifiers": "@CheckReturnValue @NonNull public static", "return": "ReplaySubject<T>", "signature": "ReplaySubject<T> createWithSize(int maxSize)", "full_signature": "@CheckReturnValue @NonNull public static ReplaySubject<T> createWithSize(int maxSize)", "class_method_signature": "ReplaySubject.createWithSize(int maxSize)", "testcase": false, "constructor": false}, {"identifier": "createUnbounded", "parameters": "()", "modifiers": "static", "return": "ReplaySubject<T>", "signature": "ReplaySubject<T> createUnbounded()", "full_signature": "static ReplaySubject<T> createUnbounded()", "class_method_signature": "ReplaySubject.createUnbounded()", "testcase": false, "constructor": false}, {"identifier": "createWithTime", "parameters": "(long maxAge, TimeUnit unit, Scheduler scheduler)", "modifiers": "@CheckReturnValue @NonNull public static", "return": "ReplaySubject<T>", "signature": "ReplaySubject<T> createWithTime(long maxAge, TimeUnit unit, Scheduler scheduler)", "full_signature": "@CheckReturnValue @NonNull public static ReplaySubject<T> createWithTime(long maxAge, TimeUnit unit, Scheduler scheduler)", "class_method_signature": "ReplaySubject.createWithTime(long maxAge, TimeUnit unit, Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "createWithTimeAndSize", "parameters": "(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize)", "modifiers": "@CheckReturnValue @NonNull public static", "return": "ReplaySubject<T>", "signature": "ReplaySubject<T> createWithTimeAndSize(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize)", "full_signature": "@CheckReturnValue @NonNull public static ReplaySubject<T> createWithTimeAndSize(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize)", "class_method_signature": "ReplaySubject.createWithTimeAndSize(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize)", "testcase": false, "constructor": false}, {"identifier": "ReplaySubject", "parameters": "(ReplayBuffer<T> buffer)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "", "signature": " ReplaySubject(ReplayBuffer<T> buffer)", "full_signature": "@SuppressWarnings(\"unchecked\")  ReplaySubject(ReplayBuffer<T> buffer)", "class_method_signature": "ReplaySubject.ReplaySubject(ReplayBuffer<T> buffer)", "testcase": false, "constructor": true}, {"identifier": "subscribeActual", "parameters": "(Observer<? super T> observer)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(Observer<? super T> observer)", "full_signature": "@Override protected void subscribeActual(Observer<? super T> observer)", "class_method_signature": "ReplaySubject.subscribeActual(Observer<? super T> observer)", "testcase": false, "constructor": false}, {"identifier": "onSubscribe", "parameters": "(Disposable s)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Disposable s)", "full_signature": "@Override public void onSubscribe(Disposable s)", "class_method_signature": "ReplaySubject.onSubscribe(Disposable s)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "ReplaySubject.onNext(T t)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable t)", "full_signature": "@Override public void onError(Throwable t)", "class_method_signature": "ReplaySubject.onError(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@Override public void onComplete()", "class_method_signature": "ReplaySubject.onComplete()", "testcase": false, "constructor": false}, {"identifier": "hasObservers", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasObservers()", "full_signature": "@Override public boolean hasObservers()", "class_method_signature": "ReplaySubject.hasObservers()", "testcase": false, "constructor": false}, {"identifier": "observerCount", "parameters": "()", "modifiers": "", "return": "int", "signature": "int observerCount()", "full_signature": " int observerCount()", "class_method_signature": "ReplaySubject.observerCount()", "testcase": false, "constructor": false}, {"identifier": "getThrowable", "parameters": "()", "modifiers": "@Override @Nullable public", "return": "Throwable", "signature": "Throwable getThrowable()", "full_signature": "@Override @Nullable public Throwable getThrowable()", "class_method_signature": "ReplaySubject.getThrowable()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Nullable public", "return": "T", "signature": "T getValue()", "full_signature": "@Nullable public T getValue()", "class_method_signature": "ReplaySubject.getValue()", "testcase": false, "constructor": false}, {"identifier": "cleanupBuffer", "parameters": "()", "modifiers": "@Experimental public", "return": "void", "signature": "void cleanupBuffer()", "full_signature": "@Experimental public void cleanupBuffer()", "class_method_signature": "ReplaySubject.cleanupBuffer()", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "public", "return": "Object[]", "signature": "Object[] getValues()", "full_signature": "public Object[] getValues()", "class_method_signature": "ReplaySubject.getValues()", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "(T[] array)", "modifiers": "public", "return": "T[]", "signature": "T[] getValues(T[] array)", "full_signature": "public T[] getValues(T[] array)", "class_method_signature": "ReplaySubject.getValues(T[] array)", "testcase": false, "constructor": false}, {"identifier": "hasComplete", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasComplete()", "full_signature": "@Override public boolean hasComplete()", "class_method_signature": "ReplaySubject.hasComplete()", "testcase": false, "constructor": false}, {"identifier": "hasThrowable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasThrowable()", "full_signature": "@Override public boolean hasThrowable()", "class_method_signature": "ReplaySubject.hasThrowable()", "testcase": false, "constructor": false}, {"identifier": "hasValue", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasValue()", "full_signature": "public boolean hasValue()", "class_method_signature": "ReplaySubject.hasValue()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "", "return": "int", "signature": "int size()", "full_signature": " int size()", "class_method_signature": "ReplaySubject.size()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(ReplayDisposable<T> rs)", "modifiers": "", "return": "boolean", "signature": "boolean add(ReplayDisposable<T> rs)", "full_signature": " boolean add(ReplayDisposable<T> rs)", "class_method_signature": "ReplaySubject.add(ReplayDisposable<T> rs)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(ReplayDisposable<T> rs)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "void", "signature": "void remove(ReplayDisposable<T> rs)", "full_signature": "@SuppressWarnings(\"unchecked\") void remove(ReplayDisposable<T> rs)", "class_method_signature": "ReplaySubject.remove(ReplayDisposable<T> rs)", "testcase": false, "constructor": false}, {"identifier": "terminate", "parameters": "(Object terminalValue)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "ReplayDisposable<T>[]", "signature": "ReplayDisposable<T>[] terminate(Object terminalValue)", "full_signature": "@SuppressWarnings(\"unchecked\") ReplayDisposable<T>[] terminate(Object terminalValue)", "class_method_signature": "ReplaySubject.terminate(Object terminalValue)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java"}, "focal_method": {"identifier": "createWithTimeAndSize", "parameters": "(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize)", "modifiers": "@CheckReturnValue @NonNull public static", "return": "ReplaySubject<T>", "body": "@CheckReturnValue\n    @NonNull\n    public static <T> ReplaySubject<T> createWithTimeAndSize(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize) {\n        return new ReplaySubject<T>(new SizeAndTimeBoundReplayBuffer<T>(maxSize, maxAge, unit, scheduler));\n    }", "signature": "ReplaySubject<T> createWithTimeAndSize(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize)", "full_signature": "@CheckReturnValue @NonNull public static ReplaySubject<T> createWithTimeAndSize(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize)", "class_method_signature": "ReplaySubject.createWithTimeAndSize(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}