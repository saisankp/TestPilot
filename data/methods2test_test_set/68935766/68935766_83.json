{"test_class": {"identifier": "SpigotMapTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String PREFIX = \"prefix\";", "modifier": "static final", "type": "String", "declarator": "PREFIX = \"prefix\"", "var_name": "PREFIX"}, {"original_string": "Plugin plugin = mock(Plugin.class);", "modifier": "", "type": "Plugin", "declarator": "plugin = mock(Plugin.class)", "var_name": "plugin"}, {"original_string": "CraftCommandMap craftmap = spy(new CraftCommandMap(mock(Server.class)));", "modifier": "", "type": "CraftCommandMap", "declarator": "craftmap = spy(new CraftCommandMap(mock(Server.class)))", "var_name": "craftmap"}, {"original_string": "CommandDispatcher<CommandSender> dispatcher = mock(CommandDispatcher.class);", "modifier": "", "type": "CommandDispatcher<CommandSender>", "declarator": "dispatcher = mock(CommandDispatcher.class)", "var_name": "dispatcher"}, {"original_string": "SpigotMap map;", "modifier": "", "type": "SpigotMap", "declarator": "map", "var_name": "map"}, {"original_string": "Literal<CommandSender> literal = Literal.of(\"literal\").alias(\"l\").build();", "modifier": "", "type": "Literal<CommandSender>", "declarator": "literal = Literal.of(\"literal\").alias(\"l\").build()", "var_name": "literal"}, {"original_string": "LiteralCommandNode<CommandSender> node = mock(LiteralCommandNode.class);", "modifier": "", "type": "LiteralCommandNode<CommandSender>", "declarator": "node = mock(LiteralCommandNode.class)", "var_name": "node"}], "file": "commons/src/test/java/com/karuslabs/commons/command/dispatcher/SpigotMapTest.java"}, "test_case": {"identifier": "register_already_exists", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void register_already_exists() {\n        craftmap.getKnownCommands().put(\"literal\", mock(Command.class));\n        \n        assertNull(map.register(literal));\n        verify(craftmap, times(0)).register(eq(PREFIX), any(Command.class));\n    }", "signature": "void register_already_exists()", "full_signature": "@Test void register_already_exists()", "class_method_signature": "SpigotMapTest.register_already_exists()", "testcase": true, "constructor": false, "invocations": ["put", "getKnownCommands", "mock", "assertNull", "register", "register", "verify", "times", "eq", "any"]}, "focal_class": {"identifier": "SpigotMap", "superclass": "", "interfaces": "implements PlatformMap", "fields": [{"original_string": "String prefix;", "modifier": "", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "Plugin plugin;", "modifier": "", "type": "Plugin", "declarator": "plugin", "var_name": "plugin"}, {"original_string": "CraftCommandMap map;", "modifier": "", "type": "CraftCommandMap", "declarator": "map", "var_name": "map"}, {"original_string": "@Nullable CommandDispatcher<CommandSender> dispatcher;", "modifier": "@Nullable", "type": "CommandDispatcher<CommandSender>", "declarator": "dispatcher", "var_name": "dispatcher"}], "methods": [{"identifier": "SpigotMap", "parameters": "(String prefix, Plugin plugin, CraftCommandMap map)", "modifiers": "", "return": "", "signature": " SpigotMap(String prefix, Plugin plugin, CraftCommandMap map)", "full_signature": "  SpigotMap(String prefix, Plugin plugin, CraftCommandMap map)", "class_method_signature": "SpigotMap.SpigotMap(String prefix, Plugin plugin, CraftCommandMap map)", "testcase": false, "constructor": true}, {"identifier": "register", "parameters": "(LiteralCommandNode<CommandSender> command)", "modifiers": "@Override public @Nullable", "return": "DispatcherCommand", "signature": "DispatcherCommand register(LiteralCommandNode<CommandSender> command)", "full_signature": "@Override public @Nullable DispatcherCommand register(LiteralCommandNode<CommandSender> command)", "class_method_signature": "SpigotMap.register(LiteralCommandNode<CommandSender> command)", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "(String name)", "modifiers": "@Override public @Nullable", "return": "DispatcherCommand", "signature": "DispatcherCommand unregister(String name)", "full_signature": "@Override public @Nullable DispatcherCommand unregister(String name)", "class_method_signature": "SpigotMap.unregister(String name)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(LiteralCommandNode<CommandSender> command)", "modifiers": "", "return": "DispatcherCommand", "signature": "DispatcherCommand wrap(LiteralCommandNode<CommandSender> command)", "full_signature": " DispatcherCommand wrap(LiteralCommandNode<CommandSender> command)", "class_method_signature": "SpigotMap.wrap(LiteralCommandNode<CommandSender> command)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/command/dispatcher/SpigotMap.java"}, "focal_method": {"identifier": "register", "parameters": "(LiteralCommandNode<CommandSender> command)", "modifiers": "@Override public @Nullable", "return": "DispatcherCommand", "body": "@Override\n    public @Nullable DispatcherCommand register(LiteralCommandNode<CommandSender> command) {\n        // We don't need to check if map contains \"prefix:command_name\" since Spigot will\n        // always override it\n        if (map.getKnownCommands().containsKey(command.getName())) {\n            return null;\n        }\n        \n        var wrapped = wrap(command);\n        map.register(prefix, wrapped);\n        return wrapped;\n    }", "signature": "DispatcherCommand register(LiteralCommandNode<CommandSender> command)", "full_signature": "@Override public @Nullable DispatcherCommand register(LiteralCommandNode<CommandSender> command)", "class_method_signature": "SpigotMap.register(LiteralCommandNode<CommandSender> command)", "testcase": false, "constructor": false, "invocations": ["containsKey", "getKnownCommands", "getName", "wrap", "register"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}