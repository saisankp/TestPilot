{"test_class": {"identifier": "TestRegexExtractorInterceptor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Builder fixtureBuilder;", "modifier": "private", "type": "Builder", "declarator": "fixtureBuilder", "var_name": "fixtureBuilder"}], "file": "flume-ng-core/src/test/java/org/apache/flume/interceptor/TestRegexExtractorInterceptor.java"}, "test_case": {"identifier": "shouldExtractAddHeadersForAllMatchGroupsIgnoringMissingIds", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldExtractAddHeadersForAllMatchGroupsIgnoringMissingIds()\n      throws Exception {\n    String body = \"2012-10-17 14:34:44,338\";\n    Context context = new Context();\n    // Skip the second group\n    context.put(RegexExtractorInterceptor.REGEX,\n        \"^(\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d\\\\s\\\\d\\\\d:\\\\d\\\\d)(:\\\\d\\\\d,\\\\d\\\\d\\\\d)\");\n    context.put(RegexExtractorInterceptor.SERIALIZERS, \"s1\");\n    context\n        .put(RegexExtractorInterceptor.SERIALIZERS + \".s1.name\", \"timestamp\");\n\n    fixtureBuilder.configure(context);\n    Interceptor fixture = fixtureBuilder.build();\n\n    Event event = EventBuilder.withBody(body, Charsets.UTF_8);\n    Event expected = EventBuilder.withBody(body, Charsets.UTF_8);\n    expected.getHeaders().put(\"timestamp\", \"2012-10-17 14:34\");\n\n    Event actual = fixture.intercept(event);\n\n    Assert.assertArrayEquals(expected.getBody(), actual.getBody());\n    Assert.assertEquals(expected.getHeaders(), actual.getHeaders());\n\n  }", "signature": "void shouldExtractAddHeadersForAllMatchGroupsIgnoringMissingIds()", "full_signature": "@Test public void shouldExtractAddHeadersForAllMatchGroupsIgnoringMissingIds()", "class_method_signature": "TestRegexExtractorInterceptor.shouldExtractAddHeadersForAllMatchGroupsIgnoringMissingIds()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "configure", "build", "withBody", "withBody", "put", "getHeaders", "intercept", "assertArrayEquals", "getBody", "getBody", "assertEquals", "getHeaders", "getHeaders"]}, "focal_class": {"identifier": "RegexExtractorInterceptor", "superclass": "", "interfaces": "implements Interceptor", "fields": [{"original_string": "static final String REGEX = \"regex\";", "modifier": "static final", "type": "String", "declarator": "REGEX = \"regex\"", "var_name": "REGEX"}, {"original_string": "static final String SERIALIZERS = \"serializers\";", "modifier": "static final", "type": "String", "declarator": "SERIALIZERS = \"serializers\"", "var_name": "SERIALIZERS"}, {"original_string": "private static final Logger logger = LoggerFactory\n      .getLogger(RegexExtractorInterceptor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory\n      .getLogger(RegexExtractorInterceptor.class)", "var_name": "logger"}, {"original_string": "private final Pattern regex;", "modifier": "private final", "type": "Pattern", "declarator": "regex", "var_name": "regex"}, {"original_string": "private final List<NameAndSerializer> serializers;", "modifier": "private final", "type": "List<NameAndSerializer>", "declarator": "serializers", "var_name": "serializers"}], "methods": [{"identifier": "RegexExtractorInterceptor", "parameters": "(Pattern regex,\n      List<NameAndSerializer> serializers)", "modifiers": "private", "return": "", "signature": " RegexExtractorInterceptor(Pattern regex,\n      List<NameAndSerializer> serializers)", "full_signature": "private  RegexExtractorInterceptor(Pattern regex,\n      List<NameAndSerializer> serializers)", "class_method_signature": "RegexExtractorInterceptor.RegexExtractorInterceptor(Pattern regex,\n      List<NameAndSerializer> serializers)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "RegexExtractorInterceptor.initialize()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "RegexExtractorInterceptor.close()", "testcase": false, "constructor": false}, {"identifier": "intercept", "parameters": "(Event event)", "modifiers": "@Override public", "return": "Event", "signature": "Event intercept(Event event)", "full_signature": "@Override public Event intercept(Event event)", "class_method_signature": "RegexExtractorInterceptor.intercept(Event event)", "testcase": false, "constructor": false}, {"identifier": "intercept", "parameters": "(List<Event> events)", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> intercept(List<Event> events)", "full_signature": "@Override public List<Event> intercept(List<Event> events)", "class_method_signature": "RegexExtractorInterceptor.intercept(List<Event> events)", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/interceptor/RegexExtractorInterceptor.java"}, "focal_method": {"identifier": "intercept", "parameters": "(Event event)", "modifiers": "@Override public", "return": "Event", "body": "@Override\n  public Event intercept(Event event) {\n    Matcher matcher = regex.matcher(\n        new String(event.getBody(), Charsets.UTF_8));\n    Map<String, String> headers = event.getHeaders();\n    if (matcher.find()) {\n      for (int group = 0, count = matcher.groupCount(); group < count; group++) {\n        int groupIndex = group + 1;\n        if (groupIndex > serializers.size()) {\n          if (logger.isDebugEnabled()) {\n            logger.debug(\"Skipping group {} to {} due to missing serializer\",\n                group, count);\n          }\n          break;\n        }\n        NameAndSerializer serializer = serializers.get(group);\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Serializing {} using {}\", serializer.headerName,\n              serializer.serializer);\n        }\n        headers.put(serializer.headerName,\n            serializer.serializer.serialize(matcher.group(groupIndex)));\n      }\n    }\n    return event;\n  }", "signature": "Event intercept(Event event)", "full_signature": "@Override public Event intercept(Event event)", "class_method_signature": "RegexExtractorInterceptor.intercept(Event event)", "testcase": false, "constructor": false, "invocations": ["matcher", "getBody", "getHeaders", "find", "groupCount", "size", "isDebugEnabled", "debug", "get", "isDebugEnabled", "debug", "put", "serialize", "group"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}