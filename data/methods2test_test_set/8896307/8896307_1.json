{"test_class": {"identifier": "LoaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "loader/src/test/java/com/chiralbehaviors/CoRE/loader/LoaderTest.java"}, "test_case": {"identifier": "testLoader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoader() throws Exception {\n        ObjectMapper mapper = new ObjectMapper(new YAMLFactory());\n        DbaConfiguration config = mapper.readValue(getClass().getResourceAsStream(\"/loader.yml\"),\n                                                   DbaConfiguration.class);\n        try (Connection dbaConnection = config.getDbaConnection()) {\n            dbaConnection.setAutoCommit(true);\n            dbaConnection.prepareStatement(\"DROP DATABASE IF EXISTS testme\")\n                         .execute();\n            dbaConnection.prepareStatement(\"DROP ROLE IF EXISTS scott\")\n                         .execute();\n        }\n        config.dropDatabase = true;\n        Loader loader = new Loader(config);\n        try {\n            loader.execute();\n            loader.execute();\n            loader.clear();\n            loader.rollback();\n        } finally {\n            loader.dropDatabase();\n        }\n    }", "signature": "void testLoader()", "full_signature": "@Test public void testLoader()", "class_method_signature": "LoaderTest.testLoader()", "testcase": true, "constructor": false, "invocations": ["readValue", "getResourceAsStream", "getClass", "getDbaConnection", "setAutoCommit", "execute", "prepareStatement", "execute", "prepareStatement", "execute", "execute", "clear", "rollback", "dropDatabase"]}, "focal_class": {"identifier": "Loader", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String     INITIAL_DATABASE_CREATE_TEMPLATE               = \"initial-database-create-%s\";", "modifier": "public static final", "type": "String", "declarator": "INITIAL_DATABASE_CREATE_TEMPLATE               = \"initial-database-create-%s\"", "var_name": "INITIAL_DATABASE_CREATE_TEMPLATE"}, {"original_string": "public static final String     MODEL_COM_CHIRALBEHAVIORS_CORE_SCHEMA_CORE_XML = \"com/chiralbehaviors/CoRE/schema/core.xml\";", "modifier": "public static final", "type": "String", "declarator": "MODEL_COM_CHIRALBEHAVIORS_CORE_SCHEMA_CORE_XML = \"com/chiralbehaviors/CoRE/schema/core.xml\"", "var_name": "MODEL_COM_CHIRALBEHAVIORS_CORE_SCHEMA_CORE_XML"}, {"original_string": "private static final String    CREATE_DATABASE_XML                            = \"create-database.xml\";", "modifier": "private static final", "type": "String", "declarator": "CREATE_DATABASE_XML                            = \"create-database.xml\"", "var_name": "CREATE_DATABASE_XML"}, {"original_string": "private static final String    INITIALIZE_XML                                 = \"initialize.xml\";", "modifier": "private static final", "type": "String", "declarator": "INITIALIZE_XML                                 = \"initialize.xml\"", "var_name": "INITIALIZE_XML"}, {"original_string": "private static final Logger    log                                            = LoggerFactory.getLogger(Loader.class);", "modifier": "private static final", "type": "Logger", "declarator": "log                                            = LoggerFactory.getLogger(Loader.class)", "var_name": "log"}, {"original_string": "private final DbaConfiguration configuration;", "modifier": "private final", "type": "DbaConfiguration", "declarator": "configuration", "var_name": "configuration"}], "methods": [{"identifier": "Loader", "parameters": "(DbaConfiguration configuration)", "modifiers": "public", "return": "", "signature": " Loader(DbaConfiguration configuration)", "full_signature": "public  Loader(DbaConfiguration configuration)", "class_method_signature": "Loader.Loader(DbaConfiguration configuration)", "testcase": false, "constructor": true}, {"identifier": "bootstrap", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void bootstrap()", "full_signature": "public void bootstrap()", "class_method_signature": "Loader.bootstrap()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "Loader.clear()", "testcase": false, "constructor": false}, {"identifier": "prepareDb", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void prepareDb()", "full_signature": "public void prepareDb()", "class_method_signature": "Loader.prepareDb()", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void rollback()", "full_signature": "public void rollback()", "class_method_signature": "Loader.rollback()", "testcase": false, "constructor": false}, {"identifier": "createDatabase", "parameters": "()", "modifiers": "public", "return": "Loader", "signature": "Loader createDatabase()", "full_signature": "public Loader createDatabase()", "class_method_signature": "Loader.createDatabase()", "testcase": false, "constructor": false}, {"identifier": "dropDatabase", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void dropDatabase()", "full_signature": "public void dropDatabase()", "class_method_signature": "Loader.dropDatabase()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void execute()", "full_signature": "public void execute()", "class_method_signature": "Loader.execute()", "testcase": false, "constructor": false}, {"identifier": "bootstrapCoRE", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void bootstrapCoRE()", "full_signature": "private void bootstrapCoRE()", "class_method_signature": "Loader.bootstrapCoRE()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initialize()", "full_signature": "private void initialize()", "class_method_signature": "Loader.initialize()", "testcase": false, "constructor": false}, {"identifier": "initializeParameters", "parameters": "(Liquibase liquibase)", "modifiers": "private", "return": "void", "signature": "void initializeParameters(Liquibase liquibase)", "full_signature": "private void initializeParameters(Liquibase liquibase)", "class_method_signature": "Loader.initializeParameters(Liquibase liquibase)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(String changeLog,\n                      Connection connection)", "modifiers": "private", "return": "void", "signature": "void load(String changeLog,\n                      Connection connection)", "full_signature": "private void load(String changeLog,\n                      Connection connection)", "class_method_signature": "Loader.load(String changeLog,\n                      Connection connection)", "testcase": false, "constructor": false}, {"identifier": "loadModel", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadModel()", "full_signature": "private void loadModel()", "class_method_signature": "Loader.loadModel()", "testcase": false, "constructor": false}], "file": "loader/src/main/java/com/chiralbehaviors/CoRE/loader/Loader.java"}, "focal_method": {"identifier": "Loader", "parameters": "(DbaConfiguration configuration)", "modifiers": "public", "return": "", "body": "public Loader(DbaConfiguration configuration) throws Exception {\n        this.configuration = configuration;\n    }", "signature": " Loader(DbaConfiguration configuration)", "full_signature": "public  Loader(DbaConfiguration configuration)", "class_method_signature": "Loader.Loader(DbaConfiguration configuration)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 8896307, "url": "https://github.com/ChiralBehaviors/Ultrastructure", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 22985, "license": "licensed"}}