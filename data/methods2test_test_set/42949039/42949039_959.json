{"test_class": {"identifier": "RetentionExpirationExporterControllerTest", "superclass": "extends AbstractExporterTest", "interfaces": "", "fields": [], "file": "herd-code/herd-tools/herd-retention-expiration-exporter/src/test/java/org/finra/herd/tools/retention/exporter/RetentionExpirationExporterControllerTest.java"}, "test_case": {"identifier": "testPerformDownloadOutputFileAlreadyExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPerformDownloadOutputFileAlreadyExist() throws Exception\n    {\n        File outputFile = new File(LOCAL_OUTPUT_FILE);\n\n        // Create an output file to test file already exists.\n        assertTrue(outputFile.createNewFile());\n\n        // Try to perform the retention expiration export.\n        try\n        {\n            retentionExpirationExporterController\n                .performRetentionExpirationExport(NAMESPACE, BUSINESS_OBJECT_DEFINITION_NAME, outputFile, new RegServerAccessParamsDto(), UDC_SERVICE_HOSTNAME);\n            fail();\n        }\n        catch (IllegalArgumentException e)\n        {\n            assertEquals(String.format(\"The specified local output file \\\"%s\\\" already exists.\", outputFile.toString()), e.getMessage());\n        }\n    }", "signature": "void testPerformDownloadOutputFileAlreadyExist()", "full_signature": "@Test public void testPerformDownloadOutputFileAlreadyExist()", "class_method_signature": "RetentionExpirationExporterControllerTest.testPerformDownloadOutputFileAlreadyExist()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "createNewFile", "performRetentionExpirationExport", "fail", "assertEquals", "format", "toString", "getMessage"]}, "focal_class": {"identifier": "RetentionExpirationExporterController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(RetentionExpirationExporterController.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RetentionExpirationExporterController.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private RetentionExpirationExporterWebClient retentionExpirationExporterWebClient;", "modifier": "@Autowired\n    private", "type": "RetentionExpirationExporterWebClient", "declarator": "retentionExpirationExporterWebClient", "var_name": "retentionExpirationExporterWebClient"}], "methods": [{"identifier": "performRetentionExpirationExport", "parameters": "(String namespace, String businessObjectDefinitionName, File localOutputFile,\n        RegServerAccessParamsDto regServerAccessParamsDto, String udcServerHost)", "modifiers": "", "return": "void", "signature": "void performRetentionExpirationExport(String namespace, String businessObjectDefinitionName, File localOutputFile,\n        RegServerAccessParamsDto regServerAccessParamsDto, String udcServerHost)", "full_signature": " void performRetentionExpirationExport(String namespace, String businessObjectDefinitionName, File localOutputFile,\n        RegServerAccessParamsDto regServerAccessParamsDto, String udcServerHost)", "class_method_signature": "RetentionExpirationExporterController.performRetentionExpirationExport(String namespace, String businessObjectDefinitionName, File localOutputFile,\n        RegServerAccessParamsDto regServerAccessParamsDto, String udcServerHost)", "testcase": false, "constructor": false}, {"identifier": "getBusinessObjectDefinitionDisplayName", "parameters": "(BusinessObjectDefinition businessObjectDefinition)", "modifiers": "", "return": "String", "signature": "String getBusinessObjectDefinitionDisplayName(BusinessObjectDefinition businessObjectDefinition)", "full_signature": " String getBusinessObjectDefinitionDisplayName(BusinessObjectDefinition businessObjectDefinition)", "class_method_signature": "RetentionExpirationExporterController.getBusinessObjectDefinitionDisplayName(BusinessObjectDefinition businessObjectDefinition)", "testcase": false, "constructor": false}, {"identifier": "getBusinessObjectDefinitionUdcUri", "parameters": "(String udcServerHost, String namespace, String businessObjectDefinitionName)", "modifiers": "", "return": "String", "signature": "String getBusinessObjectDefinitionUdcUri(String udcServerHost, String namespace, String businessObjectDefinitionName)", "full_signature": " String getBusinessObjectDefinitionUdcUri(String udcServerHost, String namespace, String businessObjectDefinitionName)", "class_method_signature": "RetentionExpirationExporterController.getBusinessObjectDefinitionUdcUri(String udcServerHost, String namespace, String businessObjectDefinitionName)", "testcase": false, "constructor": false}, {"identifier": "applyCsvFormatting", "parameters": "(String value)", "modifiers": "private", "return": "String", "signature": "String applyCsvFormatting(String value)", "full_signature": "private String applyCsvFormatting(String value)", "class_method_signature": "RetentionExpirationExporterController.applyCsvFormatting(String value)", "testcase": false, "constructor": false}, {"identifier": "writeLine", "parameters": "(Writer writer, List<String> values)", "modifiers": "private", "return": "void", "signature": "void writeLine(Writer writer, List<String> values)", "full_signature": "private void writeLine(Writer writer, List<String> values)", "class_method_signature": "RetentionExpirationExporterController.writeLine(Writer writer, List<String> values)", "testcase": false, "constructor": false}, {"identifier": "writeToCsvFile", "parameters": "(File localOutputFile, String namespace, String businessObjectDefinitionName, String businessObjectDefinitionDisplayName,\n        String udcServerHost, List<BusinessObjectData> businessObjectDataList)", "modifiers": "private", "return": "void", "signature": "void writeToCsvFile(File localOutputFile, String namespace, String businessObjectDefinitionName, String businessObjectDefinitionDisplayName,\n        String udcServerHost, List<BusinessObjectData> businessObjectDataList)", "full_signature": "private void writeToCsvFile(File localOutputFile, String namespace, String businessObjectDefinitionName, String businessObjectDefinitionDisplayName,\n        String udcServerHost, List<BusinessObjectData> businessObjectDataList)", "class_method_signature": "RetentionExpirationExporterController.writeToCsvFile(File localOutputFile, String namespace, String businessObjectDefinitionName, String businessObjectDefinitionDisplayName,\n        String udcServerHost, List<BusinessObjectData> businessObjectDataList)", "testcase": false, "constructor": false}], "file": "herd-code/herd-tools/herd-retention-expiration-exporter/src/main/java/org/finra/herd/tools/retention/exporter/RetentionExpirationExporterController.java"}, "focal_method": {"identifier": "performRetentionExpirationExport", "parameters": "(String namespace, String businessObjectDefinitionName, File localOutputFile,\n        RegServerAccessParamsDto regServerAccessParamsDto, String udcServerHost)", "modifiers": "", "return": "void", "body": "void performRetentionExpirationExport(String namespace, String businessObjectDefinitionName, File localOutputFile,\n        RegServerAccessParamsDto regServerAccessParamsDto, String udcServerHost) throws Exception\n    {\n        // Fail if local output file already exists.\n        if (localOutputFile.exists())\n        {\n            throw new IllegalArgumentException(String.format(\"The specified local output file \\\"%s\\\" already exists.\", localOutputFile.toString()));\n        }\n\n        // Initialize the web client.\n        retentionExpirationExporterWebClient.setRegServerAccessParamsDto(regServerAccessParamsDto);\n\n        // Validate that specified business object definition exists.\n        BusinessObjectDefinition businessObjectDefinition =\n            retentionExpirationExporterWebClient.getBusinessObjectDefinition(namespace, businessObjectDefinitionName);\n\n        // Get business object display name.\n        String businessObjectDefinitionDisplayName = getBusinessObjectDefinitionDisplayName(businessObjectDefinition);\n\n        // Create a search request for business object data with the filter on retention expiration option.\n        BusinessObjectDataSearchKey businessObjectDataSearchKey = new BusinessObjectDataSearchKey();\n        businessObjectDataSearchKey.setNamespace(namespace);\n        businessObjectDataSearchKey.setBusinessObjectDefinitionName(businessObjectDefinitionName);\n        businessObjectDataSearchKey.setFilterOnRetentionExpiration(true);\n        List<BusinessObjectDataSearchKey> businessObjectDataSearchKeys = new ArrayList<>();\n        businessObjectDataSearchKeys.add(businessObjectDataSearchKey);\n        BusinessObjectDataSearchFilter businessObjectDataSearchFilter = new BusinessObjectDataSearchFilter(businessObjectDataSearchKeys);\n        BusinessObjectDataSearchRequest request = new BusinessObjectDataSearchRequest(Collections.singletonList(businessObjectDataSearchFilter));\n\n        // Create a result list for business object data.\n        List<BusinessObjectData> businessObjectDataList = new ArrayList<>();\n\n        // Fetch business object data from server until no records found.\n        int pageNumber = 1;\n        BusinessObjectDataSearchResult businessObjectDataSearchResult = retentionExpirationExporterWebClient.searchBusinessObjectData(request, pageNumber);\n        while (CollectionUtils.isNotEmpty(businessObjectDataSearchResult.getBusinessObjectDataElements()))\n        {\n            LOGGER.info(\"Fetched {} business object data records from the registration server.\",\n                CollectionUtils.size(businessObjectDataSearchResult.getBusinessObjectDataElements()));\n            businessObjectDataList.addAll(businessObjectDataSearchResult.getBusinessObjectDataElements());\n            pageNumber++;\n            businessObjectDataSearchResult = retentionExpirationExporterWebClient.searchBusinessObjectData(request, pageNumber);\n        }\n\n        // Write business object data to the output CSV file.\n        writeToCsvFile(localOutputFile, businessObjectDefinition.getNamespace(), businessObjectDefinition.getBusinessObjectDefinitionName(),\n            businessObjectDefinitionDisplayName, udcServerHost, businessObjectDataList);\n    }", "signature": "void performRetentionExpirationExport(String namespace, String businessObjectDefinitionName, File localOutputFile,\n        RegServerAccessParamsDto regServerAccessParamsDto, String udcServerHost)", "full_signature": " void performRetentionExpirationExport(String namespace, String businessObjectDefinitionName, File localOutputFile,\n        RegServerAccessParamsDto regServerAccessParamsDto, String udcServerHost)", "class_method_signature": "RetentionExpirationExporterController.performRetentionExpirationExport(String namespace, String businessObjectDefinitionName, File localOutputFile,\n        RegServerAccessParamsDto regServerAccessParamsDto, String udcServerHost)", "testcase": false, "constructor": false, "invocations": ["exists", "format", "toString", "setRegServerAccessParamsDto", "getBusinessObjectDefinition", "getBusinessObjectDefinitionDisplayName", "setNamespace", "setBusinessObjectDefinitionName", "setFilterOnRetentionExpiration", "add", "singletonList", "searchBusinessObjectData", "isNotEmpty", "getBusinessObjectDataElements", "info", "size", "getBusinessObjectDataElements", "addAll", "getBusinessObjectDataElements", "searchBusinessObjectData", "writeToCsvFile", "getNamespace", "getBusinessObjectDefinitionName"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}