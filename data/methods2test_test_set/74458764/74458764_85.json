{"test_class": {"identifier": "TestNotificationExpirationManagement", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RedisSessionRepository redisSession;", "modifier": "private", "type": "RedisSessionRepository", "declarator": "redisSession", "var_name": "redisSession"}, {"original_string": "private RedisFacade redis;", "modifier": "private", "type": "RedisFacade", "declarator": "redis", "var_name": "redis"}, {"original_string": "private SessionData session;", "modifier": "private", "type": "SessionData", "declarator": "session", "var_name": "session"}, {"original_string": "private NotificationExpirationManagement expiration;", "modifier": "private", "type": "NotificationExpirationManagement", "declarator": "expiration", "var_name": "expiration"}], "file": "session-replacement/src/test/java/com/amadeus/session/repository/redis/TestNotificationExpirationManagement.java"}, "test_case": {"identifier": "testSessionTouchedNotNewSession", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSessionTouchedNotNewSession() {\n    session = new SessionData(\"1\", 100, 10);\n    session.setNew(false);\n    expiration.sessionTouched(session);\n    verify(redis, never()).srem(any(byte[].class), any(byte[].class));\n  }", "signature": "void testSessionTouchedNotNewSession()", "full_signature": "@Test public void testSessionTouchedNotNewSession()", "class_method_signature": "TestNotificationExpirationManagement.testSessionTouchedNotNewSession()", "testcase": true, "constructor": false, "invocations": ["setNew", "sessionTouched", "srem", "verify", "never", "any", "any"]}, "focal_class": {"identifier": "NotificationExpirationManagement", "superclass": "", "interfaces": "implements RedisExpirationStrategy", "fields": [{"original_string": "static Logger logger = LoggerFactory.getLogger(NotificationExpirationManagement.class);", "modifier": "static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(NotificationExpirationManagement.class)", "var_name": "logger"}, {"original_string": "private static final long ONE_MINUTE = TimeUnit.MINUTES.toSeconds(1);", "modifier": "private static final", "type": "long", "declarator": "ONE_MINUTE = TimeUnit.MINUTES.toSeconds(1)", "var_name": "ONE_MINUTE"}, {"original_string": "private static final int SPOP_BULK_SIZE = 1000;", "modifier": "private static final", "type": "int", "declarator": "SPOP_BULK_SIZE = 1000", "var_name": "SPOP_BULK_SIZE"}, {"original_string": "static final int SESSION_PERSISTENCE_SAFETY_MARGIN = 300;", "modifier": "static final", "type": "int", "declarator": "SESSION_PERSISTENCE_SAFETY_MARGIN = 300", "var_name": "SESSION_PERSISTENCE_SAFETY_MARGIN"}, {"original_string": "private static final byte[] EMPTY_STRING = encode(\"\");", "modifier": "private static final", "type": "byte[]", "declarator": "EMPTY_STRING = encode(\"\")", "var_name": "EMPTY_STRING"}, {"original_string": "static final String DEFAULT_SESSION_EXPIRE_PREFIX = \"com.amadeus.session:expire:\";", "modifier": "static final", "type": "String", "declarator": "DEFAULT_SESSION_EXPIRE_PREFIX = \"com.amadeus.session:expire:\"", "var_name": "DEFAULT_SESSION_EXPIRE_PREFIX"}, {"original_string": "static final byte[] DEFAULT_SESSION_EXPIRE_PREFIX_BUF = encode(DEFAULT_SESSION_EXPIRE_PREFIX);", "modifier": "static final", "type": "byte[]", "declarator": "DEFAULT_SESSION_EXPIRE_PREFIX_BUF = encode(DEFAULT_SESSION_EXPIRE_PREFIX)", "var_name": "DEFAULT_SESSION_EXPIRE_PREFIX_BUF"}, {"original_string": "private static final long RESET_RETRY_THRESHOLD = SECONDS.toMillis(377);", "modifier": "private static final", "type": "long", "declarator": "RESET_RETRY_THRESHOLD = SECONDS.toMillis(377)", "var_name": "RESET_RETRY_THRESHOLD"}, {"original_string": "private static final int[] FIBONACCI_DELAY_PATTERN = new int[] { 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233 };", "modifier": "private static final", "type": "int[]", "declarator": "FIBONACCI_DELAY_PATTERN = new int[] { 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233 }", "var_name": "FIBONACCI_DELAY_PATTERN"}, {"original_string": "private static final int MAX_CONNECTION_ERRORS = FIBONACCI_DELAY_PATTERN.length;", "modifier": "private static final", "type": "int", "declarator": "MAX_CONNECTION_ERRORS = FIBONACCI_DELAY_PATTERN.length", "var_name": "MAX_CONNECTION_ERRORS"}, {"original_string": "private final RedisFacade redis;", "modifier": "private final", "type": "RedisFacade", "declarator": "redis", "var_name": "redis"}, {"original_string": "private final RedisSessionRepository repository;", "modifier": "private final", "type": "RedisSessionRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private final String keyExpirePrefix;", "modifier": "private final", "type": "String", "declarator": "keyExpirePrefix", "var_name": "keyExpirePrefix"}, {"original_string": "private final String expirationsPrefix;", "modifier": "private final", "type": "String", "declarator": "expirationsPrefix", "var_name": "expirationsPrefix"}, {"original_string": "private final String forcedExpirationsPrefix;", "modifier": "private final", "type": "String", "declarator": "forcedExpirationsPrefix", "var_name": "forcedExpirationsPrefix"}, {"original_string": "private final String namespace;", "modifier": "private final", "type": "String", "declarator": "namespace", "var_name": "namespace"}, {"original_string": "private final String owner;", "modifier": "private final", "type": "String", "declarator": "owner", "var_name": "owner"}, {"original_string": "private final boolean sticky;", "modifier": "private final", "type": "boolean", "declarator": "sticky", "var_name": "sticky"}, {"original_string": "private ExpirationListener expirationListener;", "modifier": "private", "type": "ExpirationListener", "declarator": "expirationListener", "var_name": "expirationListener"}, {"original_string": "private ScheduledFuture<?> cleanupFuture;", "modifier": "private", "type": "ScheduledFuture<?>", "declarator": "cleanupFuture", "var_name": "cleanupFuture"}, {"original_string": "private ScheduledFuture<?> forceCleanupFuture;", "modifier": "private", "type": "ScheduledFuture<?>", "declarator": "forceCleanupFuture", "var_name": "forceCleanupFuture"}], "methods": [{"identifier": "NotificationExpirationManagement", "parameters": "(RedisFacade redis, RedisSessionRepository redisSession, String namespace,\n      String owner, String keyPrefix, boolean sticky)", "modifiers": "", "return": "", "signature": " NotificationExpirationManagement(RedisFacade redis, RedisSessionRepository redisSession, String namespace,\n      String owner, String keyPrefix, boolean sticky)", "full_signature": "  NotificationExpirationManagement(RedisFacade redis, RedisSessionRepository redisSession, String namespace,\n      String owner, String keyPrefix, boolean sticky)", "class_method_signature": "NotificationExpirationManagement.NotificationExpirationManagement(RedisFacade redis, RedisSessionRepository redisSession, String namespace,\n      String owner, String keyPrefix, boolean sticky)", "testcase": false, "constructor": true}, {"identifier": "constructKeyExpirePrefix", "parameters": "(String sessionOwner)", "modifiers": "private", "return": "String", "signature": "String constructKeyExpirePrefix(String sessionOwner)", "full_signature": "private String constructKeyExpirePrefix(String sessionOwner)", "class_method_signature": "NotificationExpirationManagement.constructKeyExpirePrefix(String sessionOwner)", "testcase": false, "constructor": false}, {"identifier": "sessionDeleted", "parameters": "(SessionData session)", "modifiers": "@Override public", "return": "void", "signature": "void sessionDeleted(SessionData session)", "full_signature": "@Override public void sessionDeleted(SessionData session)", "class_method_signature": "NotificationExpirationManagement.sessionDeleted(SessionData session)", "testcase": false, "constructor": false}, {"identifier": "sessionTouched", "parameters": "(SessionData session)", "modifiers": "@Override public", "return": "void", "signature": "void sessionTouched(SessionData session)", "full_signature": "@Override public void sessionTouched(SessionData session)", "class_method_signature": "NotificationExpirationManagement.sessionTouched(SessionData session)", "testcase": false, "constructor": false}, {"identifier": "roundUpToNextMinute", "parameters": "(long timeInMs)", "modifiers": "private static", "return": "long", "signature": "long roundUpToNextMinute(long timeInMs)", "full_signature": "private static long roundUpToNextMinute(long timeInMs)", "class_method_signature": "NotificationExpirationManagement.roundUpToNextMinute(long timeInMs)", "testcase": false, "constructor": false}, {"identifier": "roundDownMinute", "parameters": "(long timeInMs)", "modifiers": "static", "return": "long", "signature": "long roundDownMinute(long timeInMs)", "full_signature": "static long roundDownMinute(long timeInMs)", "class_method_signature": "NotificationExpirationManagement.roundDownMinute(long timeInMs)", "testcase": false, "constructor": false}, {"identifier": "startExpiredSessionsTask", "parameters": "(final SessionManager sessionManager)", "modifiers": "@Override public", "return": "void", "signature": "void startExpiredSessionsTask(final SessionManager sessionManager)", "full_signature": "@Override public void startExpiredSessionsTask(final SessionManager sessionManager)", "class_method_signature": "NotificationExpirationManagement.startExpiredSessionsTask(final SessionManager sessionManager)", "testcase": false, "constructor": false}, {"identifier": "getKeysToExpire", "parameters": "(byte[] key)", "modifiers": "", "return": "Set<byte[]>", "signature": "Set<byte[]> getKeysToExpire(byte[] key)", "full_signature": " Set<byte[]> getKeysToExpire(byte[] key)", "class_method_signature": "NotificationExpirationManagement.getKeysToExpire(byte[] key)", "testcase": false, "constructor": false}, {"identifier": "smembersAndDel", "parameters": "(final byte[] key)", "modifiers": "static", "return": "TransactionRunner<Set<byte[]>>", "signature": "TransactionRunner<Set<byte[]>> smembersAndDel(final byte[] key)", "full_signature": "static TransactionRunner<Set<byte[]>> smembersAndDel(final byte[] key)", "class_method_signature": "NotificationExpirationManagement.smembersAndDel(final byte[] key)", "testcase": false, "constructor": false}, {"identifier": "getSessionExpireKey", "parameters": "(String id)", "modifiers": "", "return": "byte[]", "signature": "byte[] getSessionExpireKey(String id)", "full_signature": " byte[] getSessionExpireKey(String id)", "class_method_signature": "NotificationExpirationManagement.getSessionExpireKey(String id)", "testcase": false, "constructor": false}, {"identifier": "getSessionExpireKey", "parameters": "(String owner, String id)", "modifiers": "", "return": "byte[]", "signature": "byte[] getSessionExpireKey(String owner, String id)", "full_signature": " byte[] getSessionExpireKey(String owner, String id)", "class_method_signature": "NotificationExpirationManagement.getSessionExpireKey(String owner, String id)", "testcase": false, "constructor": false}, {"identifier": "getExpirationsKey", "parameters": "(long instant)", "modifiers": "private", "return": "byte[]", "signature": "byte[] getExpirationsKey(long instant)", "full_signature": "private byte[] getExpirationsKey(long instant)", "class_method_signature": "NotificationExpirationManagement.getExpirationsKey(long instant)", "testcase": false, "constructor": false}, {"identifier": "getForcedExpirationsKey", "parameters": "(long instant)", "modifiers": "private", "return": "byte[]", "signature": "byte[] getForcedExpirationsKey(long instant)", "full_signature": "private byte[] getForcedExpirationsKey(long instant)", "class_method_signature": "NotificationExpirationManagement.getForcedExpirationsKey(long instant)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "NotificationExpirationManagement.close()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "NotificationExpirationManagement.reset()", "testcase": false, "constructor": false}, {"identifier": "sessionIdChange", "parameters": "(SessionData session)", "modifiers": "@Override public", "return": "void", "signature": "void sessionIdChange(SessionData session)", "full_signature": "@Override public void sessionIdChange(SessionData session)", "class_method_signature": "NotificationExpirationManagement.sessionIdChange(SessionData session)", "testcase": false, "constructor": false}], "file": "session-replacement/src/main/java/com/amadeus/session/repository/redis/NotificationExpirationManagement.java"}, "focal_method": {"identifier": "sessionTouched", "parameters": "(SessionData session)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void sessionTouched(SessionData session) {\n    new ExpirationManagement().manageExpiration(session);\n  }", "signature": "void sessionTouched(SessionData session)", "full_signature": "@Override public void sessionTouched(SessionData session)", "class_method_signature": "NotificationExpirationManagement.sessionTouched(SessionData session)", "testcase": false, "constructor": false, "invocations": ["manageExpiration"]}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}