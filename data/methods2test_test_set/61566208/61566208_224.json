{"test_class": {"identifier": "HddInfoHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger( HddInfoHelperTest.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger( HddInfoHelperTest.class )", "var_name": "logger"}], "file": "modules/hms-inband/src/test/java/com/vmware/vrack/hms/boardservice/ib/api/HddInfoHelperTest.java"}, "test_case": {"identifier": "testSmartDataThreshold4", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSmartDataThreshold4()\n    {\n        logger.info( \"Testing hms-inband HddInfoHelperTest::isSmartDataBeyondThreshold4\" );\n\n        try\n        {\n            HddSMARTData hddSMARTData = new HddSMARTData();\n            hddSMARTData.setParameter( \"Raw Read Error Rate\" );\n            hddSMARTData.setValue( \"N/A\" );\n            hddSMARTData.setThreshold( \"N/A\" );\n            hddSMARTData.setWorst( \"0\" );\n\n            boolean isDataConcerning = HddInfoHelper.isSmartDataBeyondThreshold( hddSMARTData, false );\n            // System.out.println(\"isDataConcerning4: \" + isDataConcerning);\n            assertFalse( isDataConcerning );\n        }\n        catch ( Exception e )\n        {\n            logger.info( \"Test hms-inband HddInfoHelperTest::isSmartDataBeyondThreshold4 Failed\" );\n            e.printStackTrace();\n        }\n    }", "signature": "void testSmartDataThreshold4()", "full_signature": "@Test public void testSmartDataThreshold4()", "class_method_signature": "HddInfoHelperTest.testSmartDataThreshold4()", "testcase": true, "constructor": false, "invocations": ["info", "setParameter", "setValue", "setThreshold", "setWorst", "isSmartDataBeyondThreshold", "assertFalse", "info", "printStackTrace"]}, "focal_class": {"identifier": "HddInfoHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger( HddInfoHelper.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( HddInfoHelper.class )", "var_name": "logger"}, {"original_string": "private static final String UNAVAILABLE = \"unavailable\";", "modifier": "private static final", "type": "String", "declarator": "UNAVAILABLE = \"unavailable\"", "var_name": "UNAVAILABLE"}, {"original_string": "private static final String COLON = \":\";", "modifier": "private static final", "type": "String", "declarator": "COLON = \":\"", "var_name": "COLON"}, {"original_string": "private static final String CHANNEL = \"Channel \";", "modifier": "private static final", "type": "String", "declarator": "CHANNEL = \"Channel \"", "var_name": "CHANNEL"}, {"original_string": "private static final String TARGET = \"Target \";", "modifier": "private static final", "type": "String", "declarator": "TARGET = \"Target \"", "var_name": "TARGET"}, {"original_string": "private static final String LUN = \"LUN \";", "modifier": "private static final", "type": "String", "declarator": "LUN = \"LUN \"", "var_name": "LUN"}, {"original_string": "private static final String DEVICE_CHANNEL = \"C\";", "modifier": "private static final", "type": "String", "declarator": "DEVICE_CHANNEL = \"C\"", "var_name": "DEVICE_CHANNEL"}, {"original_string": "private static final String DEVICE_TARGET = \"T\";", "modifier": "private static final", "type": "String", "declarator": "DEVICE_TARGET = \"T\"", "var_name": "DEVICE_TARGET"}, {"original_string": "private static final String DEVICE_LUN = \"L\";", "modifier": "private static final", "type": "String", "declarator": "DEVICE_LUN = \"L\"", "var_name": "DEVICE_LUN"}, {"original_string": "private static final String IS_CAPACITY_FLASH = \"IsCapacityFlash\";", "modifier": "private static final", "type": "String", "declarator": "IS_CAPACITY_FLASH = \"IsCapacityFlash\"", "var_name": "IS_CAPACITY_FLASH"}, {"original_string": "private static final List<StatusEnum> opStates =\n        new ArrayList<StatusEnum>( Arrays.asList( StatusEnum.OK, StatusEnum.DEGRADED, StatusEnum.UNKNOWNSTATE ) );", "modifier": "private static final", "type": "List<StatusEnum>", "declarator": "opStates =\n        new ArrayList<StatusEnum>( Arrays.asList( StatusEnum.OK, StatusEnum.DEGRADED, StatusEnum.UNKNOWNSTATE ) )", "var_name": "opStates"}], "methods": [{"identifier": "getHddInfo", "parameters": "( HostSystem hostSystem, VsphereClient client, ServiceServerNode node )", "modifiers": "public static", "return": "List<HddInfo>", "signature": "List<HddInfo> getHddInfo( HostSystem hostSystem, VsphereClient client, ServiceServerNode node )", "full_signature": "public static List<HddInfo> getHddInfo( HostSystem hostSystem, VsphereClient client, ServiceServerNode node )", "class_method_signature": "HddInfoHelper.getHddInfo( HostSystem hostSystem, VsphereClient client, ServiceServerNode node )", "testcase": false, "constructor": false}, {"identifier": "findIsCapacityDisk", "parameters": "( String deviceCanonicalName, Session session, String nodeId,\n                                              String diskType )", "modifiers": "public static", "return": "boolean", "signature": "boolean findIsCapacityDisk( String deviceCanonicalName, Session session, String nodeId,\n                                              String diskType )", "full_signature": "public static boolean findIsCapacityDisk( String deviceCanonicalName, Session session, String nodeId,\n                                              String diskType )", "class_method_signature": "HddInfoHelper.findIsCapacityDisk( String deviceCanonicalName, Session session, String nodeId,\n                                              String diskType )", "testcase": false, "constructor": false}, {"identifier": "getHddSmartDataInfo", "parameters": "( String diskName, Session session )", "modifiers": "public static", "return": "List<HddSMARTData>", "signature": "List<HddSMARTData> getHddSmartDataInfo( String diskName, Session session )", "full_signature": "public static List<HddSMARTData> getHddSmartDataInfo( String diskName, Session session )", "class_method_signature": "HddInfoHelper.getHddSmartDataInfo( String diskName, Session session )", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "( ServiceServerNode node )", "modifiers": "public static", "return": "Session", "signature": "Session getSession( ServiceServerNode node )", "full_signature": "public static Session getSession( ServiceServerNode node )", "class_method_signature": "HddInfoHelper.getSession( ServiceServerNode node )", "testcase": false, "constructor": false}, {"identifier": "destroySession", "parameters": "( Session session )", "modifiers": "public static", "return": "void", "signature": "void destroySession( Session session )", "full_signature": "public static void destroySession( Session session )", "class_method_signature": "HddInfoHelper.destroySession( Session session )", "testcase": false, "constructor": false}, {"identifier": "getHddSensor", "parameters": "( ServiceHmsNode serviceNode, ServerComponent component,\n                                                           InbandServiceImpl inbandServiceImpl )", "modifiers": "public static", "return": "List<ServerComponentEvent>", "signature": "List<ServerComponentEvent> getHddSensor( ServiceHmsNode serviceNode, ServerComponent component,\n                                                           InbandServiceImpl inbandServiceImpl )", "full_signature": "public static List<ServerComponentEvent> getHddSensor( ServiceHmsNode serviceNode, ServerComponent component,\n                                                           InbandServiceImpl inbandServiceImpl )", "class_method_signature": "HddInfoHelper.getHddSensor( ServiceHmsNode serviceNode, ServerComponent component,\n                                                           InbandServiceImpl inbandServiceImpl )", "testcase": false, "constructor": false}, {"identifier": "getHddOperationalStateEvents", "parameters": "( List<HddInfo> hddInfoList,\n                                                                           ServiceHmsNode serviceNode )", "modifiers": "public static", "return": "List<ServerComponentEvent>", "signature": "List<ServerComponentEvent> getHddOperationalStateEvents( List<HddInfo> hddInfoList,\n                                                                           ServiceHmsNode serviceNode )", "full_signature": "public static List<ServerComponentEvent> getHddOperationalStateEvents( List<HddInfo> hddInfoList,\n                                                                           ServiceHmsNode serviceNode )", "class_method_signature": "HddInfoHelper.getHddOperationalStateEvents( List<HddInfo> hddInfoList,\n                                                                           ServiceHmsNode serviceNode )", "testcase": false, "constructor": false}, {"identifier": "isSmartDataBeyondThreshold", "parameters": "( HddSMARTData hddSMARTData,\n                                                      boolean isValueGreaterThanThresholdConcerning )", "modifiers": "public static", "return": "boolean", "signature": "boolean isSmartDataBeyondThreshold( HddSMARTData hddSMARTData,\n                                                      boolean isValueGreaterThanThresholdConcerning )", "full_signature": "public static boolean isSmartDataBeyondThreshold( HddSMARTData hddSMARTData,\n                                                      boolean isValueGreaterThanThresholdConcerning )", "class_method_signature": "HddInfoHelper.isSmartDataBeyondThreshold( HddSMARTData hddSMARTData,\n                                                      boolean isValueGreaterThanThresholdConcerning )", "testcase": false, "constructor": false}], "file": "modules/hms-inband/src/main/java/com/vmware/vrack/hms/boardservice/ib/api/HddInfoHelper.java"}, "focal_method": {"identifier": "isSmartDataBeyondThreshold", "parameters": "( HddSMARTData hddSMARTData,\n                                                      boolean isValueGreaterThanThresholdConcerning )", "modifiers": "public static", "return": "boolean", "body": "public static boolean isSmartDataBeyondThreshold( HddSMARTData hddSMARTData,\n                                                      boolean isValueGreaterThanThresholdConcerning )\n    {\n        boolean isDataConcerning = false;\n\n        if ( hddSMARTData != null )\n        {\n            String thresholdString = hddSMARTData.getThreshold();\n            String valueString = hddSMARTData.getValue();\n\n            if ( valueString != null )\n            {\n                if ( thresholdString != null )\n                {\n                    Integer value = null;\n                    Integer threshold = null;\n\n                    try\n                    {\n                        value = Integer.parseInt( valueString );\n                        threshold = Integer.parseInt( thresholdString );\n                    }\n                    catch ( Exception e )\n                    {\n                        return false;\n                    }\n\n                    // Check if value lower than threshold is concerning or the opposite of it.\n                    // If isValueLowerTheBetter is true,\n                    // it means that if value exceeds the defined threshold, the data is concerning.\n                    if ( isValueGreaterThanThresholdConcerning )\n                    {\n                        if ( value >= threshold && threshold != 0 )\n                        {\n                            isDataConcerning = true;\n                        }\n                    }\n                    else\n                    {\n                        // threshold 0 means that the attribute the threshold is associated to should be considered only\n                        // informational\n                        // and that it has no direct influence over reliability\n                        // If the threshold was set by the device manufacturer to 0, it means this is an informational\n                        // attribute.\n                        // Please refer: http://www.almico.com/sfarticle.php?id=2\n                        if ( value <= threshold && threshold != 0 )\n                        {\n                            isDataConcerning = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return isDataConcerning;\n    }", "signature": "boolean isSmartDataBeyondThreshold( HddSMARTData hddSMARTData,\n                                                      boolean isValueGreaterThanThresholdConcerning )", "full_signature": "public static boolean isSmartDataBeyondThreshold( HddSMARTData hddSMARTData,\n                                                      boolean isValueGreaterThanThresholdConcerning )", "class_method_signature": "HddInfoHelper.isSmartDataBeyondThreshold( HddSMARTData hddSMARTData,\n                                                      boolean isValueGreaterThanThresholdConcerning )", "testcase": false, "constructor": false, "invocations": ["getThreshold", "getValue", "parseInt", "parseInt"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}