{"test_class": {"identifier": "MDLV3000ReaderTest", "superclass": "extends SimpleChemObjectReaderTest", "interfaces": "", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(MDLV3000ReaderTest.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(MDLV3000ReaderTest.class)", "var_name": "logger"}], "file": "storage/ctab/src/test/java/org/openscience/cdk/io/MDLV3000ReaderTest.java"}, "test_case": {"identifier": "positionalVariation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void positionalVariation() throws Exception {\n        try (MDLV3000Reader reader = new MDLV3000Reader(getClass().getResourceAsStream(\"multicenterBond.mol\"))) {\n            IAtomContainer container = reader.read(new org.openscience.cdk.AtomContainer(0, 0, 0, 0));\n            assertThat(container.getBondCount(), is(8));\n            List<Sgroup> sgroups = container.getProperty(CDKConstants.CTAB_SGROUPS);\n            assertNotNull(sgroups);\n            assertThat(sgroups.size(), is(1));\n            assertThat(sgroups.get(0).getType(), is(SgroupType.ExtMulticenter));\n        }\n    }", "signature": "void positionalVariation()", "full_signature": "@Test public void positionalVariation()", "class_method_signature": "MDLV3000ReaderTest.positionalVariation()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "read", "assertThat", "getBondCount", "is", "getProperty", "assertNotNull", "assertThat", "size", "is", "assertThat", "getType", "get", "is"]}, "focal_class": {"identifier": "MDLV3000Reader", "superclass": "extends DefaultChemObjectReader", "interfaces": "", "fields": [{"original_string": "BufferedReader              input  = null;", "modifier": "", "type": "BufferedReader", "declarator": "input  = null", "var_name": "input"}, {"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(MDLV3000Reader.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(MDLV3000Reader.class)", "var_name": "logger"}, {"original_string": "private Pattern             keyValueTuple;", "modifier": "private", "type": "Pattern", "declarator": "keyValueTuple", "var_name": "keyValueTuple"}, {"original_string": "private Pattern             keyValueTuple2;", "modifier": "private", "type": "Pattern", "declarator": "keyValueTuple2", "var_name": "keyValueTuple2"}, {"original_string": "private int                 lineNumber;", "modifier": "private", "type": "int", "declarator": "lineNumber", "var_name": "lineNumber"}], "methods": [{"identifier": "MDLV3000Reader", "parameters": "(Reader in)", "modifiers": "public", "return": "", "signature": " MDLV3000Reader(Reader in)", "full_signature": "public  MDLV3000Reader(Reader in)", "class_method_signature": "MDLV3000Reader.MDLV3000Reader(Reader in)", "testcase": false, "constructor": true}, {"identifier": "MDLV3000Reader", "parameters": "(Reader in, Mode mode)", "modifiers": "public", "return": "", "signature": " MDLV3000Reader(Reader in, Mode mode)", "full_signature": "public  MDLV3000Reader(Reader in, Mode mode)", "class_method_signature": "MDLV3000Reader.MDLV3000Reader(Reader in, Mode mode)", "testcase": false, "constructor": true}, {"identifier": "MDLV3000Reader", "parameters": "(InputStream input)", "modifiers": "public", "return": "", "signature": " MDLV3000Reader(InputStream input)", "full_signature": "public  MDLV3000Reader(InputStream input)", "class_method_signature": "MDLV3000Reader.MDLV3000Reader(InputStream input)", "testcase": false, "constructor": true}, {"identifier": "MDLV3000Reader", "parameters": "(InputStream input, Mode mode)", "modifiers": "public", "return": "", "signature": " MDLV3000Reader(InputStream input, Mode mode)", "full_signature": "public  MDLV3000Reader(InputStream input, Mode mode)", "class_method_signature": "MDLV3000Reader.MDLV3000Reader(InputStream input, Mode mode)", "testcase": false, "constructor": true}, {"identifier": "MDLV3000Reader", "parameters": "()", "modifiers": "public", "return": "", "signature": " MDLV3000Reader()", "full_signature": "public  MDLV3000Reader()", "class_method_signature": "MDLV3000Reader.MDLV3000Reader()", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "IResourceFormat", "signature": "IResourceFormat getFormat()", "full_signature": "@Override public IResourceFormat getFormat()", "class_method_signature": "MDLV3000Reader.getFormat()", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(Reader input)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(Reader input)", "full_signature": "@Override public void setReader(Reader input)", "class_method_signature": "MDLV3000Reader.setReader(Reader input)", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(InputStream input)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(InputStream input)", "full_signature": "@Override public void setReader(InputStream input)", "class_method_signature": "MDLV3000Reader.setReader(InputStream input)", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> classObject)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accepts(Class<? extends IChemObject> classObject)", "full_signature": "@Override public boolean accepts(Class<? extends IChemObject> classObject)", "class_method_signature": "MDLV3000Reader.accepts(Class<? extends IChemObject> classObject)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(T object)", "modifiers": "@Override public", "return": "T", "signature": "T read(T object)", "full_signature": "@Override public T read(T object)", "class_method_signature": "MDLV3000Reader.read(T object)", "testcase": false, "constructor": false}, {"identifier": "readMolecule", "parameters": "(IChemObjectBuilder builder)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer readMolecule(IChemObjectBuilder builder)", "full_signature": "public IAtomContainer readMolecule(IChemObjectBuilder builder)", "class_method_signature": "MDLV3000Reader.readMolecule(IChemObjectBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "readConnectionTable", "parameters": "(IChemObjectBuilder builder)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer readConnectionTable(IChemObjectBuilder builder)", "full_signature": "public IAtomContainer readConnectionTable(IChemObjectBuilder builder)", "class_method_signature": "MDLV3000Reader.readConnectionTable(IChemObjectBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "readHeader", "parameters": "(IAtomContainer readData)", "modifiers": "public", "return": "String", "signature": "String readHeader(IAtomContainer readData)", "full_signature": "public String readHeader(IAtomContainer readData)", "class_method_signature": "MDLV3000Reader.readHeader(IAtomContainer readData)", "testcase": false, "constructor": false}, {"identifier": "readAtomBlock", "parameters": "(IAtomContainer readData)", "modifiers": "public", "return": "void", "signature": "void readAtomBlock(IAtomContainer readData)", "full_signature": "public void readAtomBlock(IAtomContainer readData)", "class_method_signature": "MDLV3000Reader.readAtomBlock(IAtomContainer readData)", "testcase": false, "constructor": false}, {"identifier": "readBondBlock", "parameters": "(IAtomContainer readData)", "modifiers": "public", "return": "void", "signature": "void readBondBlock(IAtomContainer readData)", "full_signature": "public void readBondBlock(IAtomContainer readData)", "class_method_signature": "MDLV3000Reader.readBondBlock(IAtomContainer readData)", "testcase": false, "constructor": false}, {"identifier": "readSGroup", "parameters": "(IAtomContainer readData)", "modifiers": "public", "return": "void", "signature": "void readSGroup(IAtomContainer readData)", "full_signature": "public void readSGroup(IAtomContainer readData)", "class_method_signature": "MDLV3000Reader.readSGroup(IAtomContainer readData)", "testcase": false, "constructor": false}, {"identifier": "readCommand", "parameters": "(String line)", "modifiers": "private", "return": "String", "signature": "String readCommand(String line)", "full_signature": "private String readCommand(String line)", "class_method_signature": "MDLV3000Reader.readCommand(String line)", "testcase": false, "constructor": false}, {"identifier": "parseOptions", "parameters": "(String string)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> parseOptions(String string)", "full_signature": "private Map<String, String> parseOptions(String string)", "class_method_signature": "MDLV3000Reader.parseOptions(String string)", "testcase": false, "constructor": false}, {"identifier": "exhaustStringTokenizer", "parameters": "(StringTokenizer tokenizer)", "modifiers": "public", "return": "String", "signature": "String exhaustStringTokenizer(StringTokenizer tokenizer)", "full_signature": "public String exhaustStringTokenizer(StringTokenizer tokenizer)", "class_method_signature": "MDLV3000Reader.exhaustStringTokenizer(StringTokenizer tokenizer)", "testcase": false, "constructor": false}, {"identifier": "readLine", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String readLine()", "full_signature": "public String readLine()", "class_method_signature": "MDLV3000Reader.readLine()", "testcase": false, "constructor": false}, {"identifier": "isReady", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isReady()", "full_signature": "public boolean isReady()", "class_method_signature": "MDLV3000Reader.isReady()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "MDLV3000Reader.close()", "testcase": false, "constructor": false}, {"identifier": "initIOSettings", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initIOSettings()", "full_signature": "private void initIOSettings()", "class_method_signature": "MDLV3000Reader.initIOSettings()", "testcase": false, "constructor": false}, {"identifier": "applyMDLValenceModel", "parameters": "(IAtom atom, int explicitValence, int unpaired)", "modifiers": "private", "return": "void", "signature": "void applyMDLValenceModel(IAtom atom, int explicitValence, int unpaired)", "full_signature": "private void applyMDLValenceModel(IAtom atom, int explicitValence, int unpaired)", "class_method_signature": "MDLV3000Reader.applyMDLValenceModel(IAtom atom, int explicitValence, int unpaired)", "testcase": false, "constructor": false}], "file": "storage/ctab/src/main/java/org/openscience/cdk/io/MDLV3000Reader.java"}, "focal_method": {"identifier": "read", "parameters": "(T object)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T extends IChemObject> T read(T object) throws CDKException {\n        if (object instanceof IAtomContainer) {\n            return (T) readMolecule(object.getBuilder());\n        }\n        throw new CDKException(\"Only supports AtomContainer objects.\");\n    }", "signature": "T read(T object)", "full_signature": "@Override public T read(T object)", "class_method_signature": "MDLV3000Reader.read(T object)", "testcase": false, "constructor": false, "invocations": ["readMolecule", "getBuilder"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}