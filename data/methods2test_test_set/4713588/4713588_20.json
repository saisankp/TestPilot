{"test_class": {"identifier": "ConditionCohortDefinitionEvaluatorTest", "superclass": "extends BaseModuleContextSensitiveTest", "interfaces": "", "fields": [{"original_string": "protected static final String CONDITION_TEST_DATASET = \"org/openmrs/module/reporting/include/ConditionCohortDefinitionEvaluatorTestDataSet.xml\";", "modifier": "protected static final", "type": "String", "declarator": "CONDITION_TEST_DATASET = \"org/openmrs/module/reporting/include/ConditionCohortDefinitionEvaluatorTestDataSet.xml\"", "var_name": "CONDITION_TEST_DATASET"}, {"original_string": "private ConditionCohortDefinition cd;", "modifier": "private", "type": "ConditionCohortDefinition", "declarator": "cd", "var_name": "cd"}], "file": "api-2.2/src/test/java/org/openmrs/module/reporting/cohort/definition/evaluator/ConditionCohortDefinitionEvaluatorTest.java"}, "test_case": {"identifier": "evaluateShouldFilterPatientsWithConcept", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void evaluateShouldFilterPatientsWithConcept() throws Exception {\n\t\tConcept concept = Context.getConceptService().getConcept(409);\n\t\tcd.setConditionCoded(concept);\n\t\tCohort cohort = Context.getService(CohortDefinitionService.class).evaluate(cd, null);\n\t\tAssert.assertTrue(cohort.contains(1));\n\t\tAssert.assertTrue(cohort.contains(2));\n\t\tAssert.assertTrue(cohort.contains(3));\n\t\tAssert.assertTrue(cohort.contains(4));\n\t\tAssert.assertEquals(4, cohort.size());\n\t}", "signature": "void evaluateShouldFilterPatientsWithConcept()", "full_signature": "@Test public void evaluateShouldFilterPatientsWithConcept()", "class_method_signature": "ConditionCohortDefinitionEvaluatorTest.evaluateShouldFilterPatientsWithConcept()", "testcase": true, "constructor": false, "invocations": ["getConcept", "getConceptService", "setConditionCoded", "evaluate", "getService", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertEquals", "size"]}, "focal_class": {"identifier": "ConditionCohortDefinitionEvaluator", "superclass": "", "interfaces": "implements CohortDefinitionEvaluator", "fields": [{"original_string": "@Autowired\n\tEvaluationService evaluationService;", "modifier": "@Autowired", "type": "EvaluationService", "declarator": "evaluationService", "var_name": "evaluationService"}], "methods": [{"identifier": "evaluate", "parameters": "(CohortDefinition cohortDefinition, EvaluationContext context)", "modifiers": "@Override public", "return": "EvaluatedCohort", "signature": "EvaluatedCohort evaluate(CohortDefinition cohortDefinition, EvaluationContext context)", "full_signature": "@Override public EvaluatedCohort evaluate(CohortDefinition cohortDefinition, EvaluationContext context)", "class_method_signature": "ConditionCohortDefinitionEvaluator.evaluate(CohortDefinition cohortDefinition, EvaluationContext context)", "testcase": false, "constructor": false}], "file": "api-2.2/src/main/java/org/openmrs/module/reporting/cohort/definition/evaluator/ConditionCohortDefinitionEvaluator.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(CohortDefinition cohortDefinition, EvaluationContext context)", "modifiers": "@Override public", "return": "EvaluatedCohort", "body": "@Override\n\tpublic EvaluatedCohort evaluate(CohortDefinition cohortDefinition, EvaluationContext context) {\n\t\t\n\t\tConditionCohortDefinition cd = (ConditionCohortDefinition) cohortDefinition;\n\t\t\n\t\tHqlQueryBuilder query = new HqlQueryBuilder();\n\t\tquery.select(\"c.patient.patientId\")\n\t\t\t\t.from(Condition.class, \"c\")\n\t\t\t\t.wherePatientIn(\"c.patient.patientId\", context)\n\t\t        .whereEqual(\"c.condition.coded\", cd.getConditionCoded())\n\t\t        .whereEqual(\"c.condition.nonCoded\", cd.getConditionNonCoded())\n\t\t        .whereGreaterOrEqualTo(\"c.dateCreated\", cd.getCreatedOnOrAfter())\n\t\t        .whereLessOrEqualTo(\"c.dateCreated\", cd.getCreatedOnOrBefore())\n\t\t        .whereGreaterOrEqualTo(\"c.onsetDate\", cd.getOnsetDateOnOrAfter())\n\t\t        .whereLessOrEqualTo(\"c.onsetDate\", cd.getOnsetDateOnOrBefore())\n\t\t        .whereGreaterOrEqualTo(\"c.endDate\", cd.getEndDateOnOrAfter())\n\t\t        .whereLessOrEqualTo(\"c.endDate\", cd.getEndDateOnOrBefore())\n\t\t\t\t.whereGreaterOrEqualTo(\"c.endDate\", cd.getActiveOnDate())\n\t\t\t\t.whereLessOrEqualTo(\"c.onsetDate\", cd.getActiveOnDate());\t\n\t\tList<Integer> patientIds = evaluationService.evaluateToList(query, Integer.class, context);\n\t\tCohort cohort = new Cohort(patientIds);\n\t\treturn new EvaluatedCohort(cohort, cd, context);\n\t}", "signature": "EvaluatedCohort evaluate(CohortDefinition cohortDefinition, EvaluationContext context)", "full_signature": "@Override public EvaluatedCohort evaluate(CohortDefinition cohortDefinition, EvaluationContext context)", "class_method_signature": "ConditionCohortDefinitionEvaluator.evaluate(CohortDefinition cohortDefinition, EvaluationContext context)", "testcase": false, "constructor": false, "invocations": ["whereLessOrEqualTo", "whereGreaterOrEqualTo", "whereLessOrEqualTo", "whereGreaterOrEqualTo", "whereLessOrEqualTo", "whereGreaterOrEqualTo", "whereLessOrEqualTo", "whereGreaterOrEqualTo", "whereEqual", "whereEqual", "wherePatientIn", "from", "select", "getConditionCoded", "getConditionNonCoded", "getCreatedOnOrAfter", "getCreatedOnOrBefore", "getOnsetDateOnOrAfter", "getOnsetDateOnOrBefore", "getEndDateOnOrAfter", "getEndDateOnOrBefore", "getActiveOnDate", "getActiveOnDate", "evaluateToList"]}, "repository": {"repo_id": 4713588, "url": "https://github.com/openmrs/openmrs-module-reporting", "language": "Java", "is_fork": false, "fork_count": 206, "stargazer_count": 15, "size": 58709, "license": "licensed"}}