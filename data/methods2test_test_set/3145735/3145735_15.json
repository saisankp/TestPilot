{"test_class": {"identifier": "JSONResultParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JSONResultParser parser;", "modifier": "private", "type": "JSONResultParser", "declarator": "parser", "var_name": "parser"}], "file": "adaptors/pronom-adaptor/src/test/java/eu/scape_project/watch/adaptor/pronom/common/JSONResultParserTest.java"}, "test_case": {"identifier": "onNonValidResponse", "parameters": "()", "modifiers": "@Test(expected = JSONException.class) public", "return": "void", "body": "@Test(expected = JSONException.class)\n  public void onNonValidResponse() throws Exception {\n    final String response = this.getResponse(false);\n\n    this.parser.parse(response);\n\n    Assert.fail(\"This code should not have been reached\");\n  }", "signature": "void onNonValidResponse()", "full_signature": "@Test(expected = JSONException.class) public void onNonValidResponse()", "class_method_signature": "JSONResultParserTest.onNonValidResponse()", "testcase": true, "constructor": false, "invocations": ["getResponse", "parse", "fail"]}, "focal_class": {"identifier": "JSONResultParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(JSONResultParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JSONResultParser.class)", "var_name": "LOG"}, {"original_string": "private ResultProcessingDispatcher processDispatcher;", "modifier": "private", "type": "ResultProcessingDispatcher", "declarator": "processDispatcher", "var_name": "processDispatcher"}, {"original_string": "private boolean valuesExisted;", "modifier": "private", "type": "boolean", "declarator": "valuesExisted", "var_name": "valuesExisted"}], "methods": [{"identifier": "JSONResultParser", "parameters": "(final ResultProcessingDispatcher dispatcher)", "modifiers": "public", "return": "", "signature": " JSONResultParser(final ResultProcessingDispatcher dispatcher)", "full_signature": "public  JSONResultParser(final ResultProcessingDispatcher dispatcher)", "class_method_signature": "JSONResultParser.JSONResultParser(final ResultProcessingDispatcher dispatcher)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(final String json)", "modifiers": "public", "return": "List<PropertyValue>", "signature": "List<PropertyValue> parse(final String json)", "full_signature": "public List<PropertyValue> parse(final String json)", "class_method_signature": "JSONResultParser.parse(final String json)", "testcase": false, "constructor": false}, {"identifier": "shouldContinueCrawl", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean shouldContinueCrawl()", "full_signature": "public boolean shouldContinueCrawl()", "class_method_signature": "JSONResultParser.shouldContinueCrawl()", "testcase": false, "constructor": false}, {"identifier": "addResult", "parameters": "(final List<PropertyValue> resultList, final PropertyValue result)", "modifiers": "private", "return": "void", "signature": "void addResult(final List<PropertyValue> resultList, final PropertyValue result)", "full_signature": "private void addResult(final List<PropertyValue> resultList, final PropertyValue result)", "class_method_signature": "JSONResultParser.addResult(final List<PropertyValue> resultList, final PropertyValue result)", "testcase": false, "constructor": false}, {"identifier": "updateEntityName", "parameters": "(Entity format, String mime, String version)", "modifiers": "private", "return": "void", "signature": "void updateEntityName(Entity format, String mime, String version)", "full_signature": "private void updateEntityName(Entity format, String mime, String version)", "class_method_signature": "JSONResultParser.updateEntityName(Entity format, String mime, String version)", "testcase": false, "constructor": false}, {"identifier": "getPropertyValue", "parameters": "(JSONObject binding, String name, EntityType et)", "modifiers": "private", "return": "PropertyValue", "signature": "PropertyValue getPropertyValue(JSONObject binding, String name, EntityType et)", "full_signature": "private PropertyValue getPropertyValue(JSONObject binding, String name, EntityType et)", "class_method_signature": "JSONResultParser.getPropertyValue(JSONObject binding, String name, EntityType et)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(String v, PropertyValue pv, DataType dt)", "modifiers": "private", "return": "void", "signature": "void setValue(String v, PropertyValue pv, DataType dt)", "full_signature": "private void setValue(String v, PropertyValue pv, DataType dt)", "class_method_signature": "JSONResultParser.setValue(String v, PropertyValue pv, DataType dt)", "testcase": false, "constructor": false}, {"identifier": "getDataType", "parameters": "(JSONObject var, String type)", "modifiers": "private", "return": "DataType", "signature": "DataType getDataType(JSONObject var, String type)", "full_signature": "private DataType getDataType(JSONObject var, String type)", "class_method_signature": "JSONResultParser.getDataType(JSONObject var, String type)", "testcase": false, "constructor": false}], "file": "adaptors/pronom-adaptor/src/main/java/eu/scape_project/watch/adaptor/pronom/common/JSONResultParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(final String json)", "modifiers": "public", "return": "List<PropertyValue>", "body": "public List<PropertyValue> parse(final String json) {\n    LOG.trace(\"Parsing json: {}\", json);\n    final List<PropertyValue> result = new ArrayList<PropertyValue>();\n    final List<PropertyValue> tmp = new ArrayList<PropertyValue>();\n    final JSONObject obj = (JSONObject) JSONSerializer.toJSON(json);\n    final JSONObject head = obj.getJSONObject(\"head\");\n    final JSONArray vars = head.getJSONArray(\"vars\");\n    final JSONArray bindings = obj.getJSONObject(\"results\").getJSONArray(\"bindings\");\n    final EntityType formattype = new EntityType(\"format\", \"Represents a file format\");\n\n    if (bindings.size() == 0) {\n      this.valuesExisted = false;\n    } else {\n      this.valuesExisted = true;\n    }\n\n    int newFormats = 0;\n\n    for (int i = 0; i < bindings.size(); i++) {\n      final JSONObject binding = bindings.getJSONObject(i);\n      final boolean process = this.processDispatcher.process(binding.toString());\n\n      if (process) {\n        String entityName = binding.getJSONObject(vars.getString(0)).getString(\"value\");\n        String mime = null;\n        String version = null;\n        newFormats++;\n\n        LOG.trace(\"parsing values for format: '{}'\", entityName);\n        final Entity format = new Entity(formattype, entityName);\n\n        for (int j = 1; j < vars.size(); j++) {\n          final String name = vars.getString(j);\n          final PropertyValue value = this.getPropertyValue(binding, name, formattype);\n          if (value != null) {\n            LOG.trace(\"parsed value for property '{}': '{}'\", value.getProperty().getName(), value.getValue());\n            value.setEntity(format);\n            tmp.add(value);\n\n            if (value.getProperty().getName().equals(\"mime\")) {\n              mime = (String) value.getValue();\n            }\n\n            if (value.getProperty().getName().equals(\"version\")) {\n              version = (String) value.getValue();\n            }\n          }\n        }\n        this.updateEntityName(format, mime, version);\n        for (PropertyValue pv : tmp) {\n          this.addResult(result, pv);\n        }\n        tmp.clear();\n      }\n    }\n\n    LOG.debug(\"Processed {} new json bindings\", newFormats);\n\n    return result;\n  }", "signature": "List<PropertyValue> parse(final String json)", "full_signature": "public List<PropertyValue> parse(final String json)", "class_method_signature": "JSONResultParser.parse(final String json)", "testcase": false, "constructor": false, "invocations": ["trace", "toJSON", "getJSONObject", "getJSONArray", "getJSONArray", "getJSONObject", "size", "size", "getJSONObject", "process", "toString", "getString", "getJSONObject", "getString", "trace", "size", "getString", "getPropertyValue", "trace", "getName", "getProperty", "getValue", "setEntity", "add", "equals", "getName", "getProperty", "getValue", "equals", "getName", "getProperty", "getValue", "updateEntityName", "addResult", "clear", "debug"]}, "repository": {"repo_id": 3145735, "url": "https://github.com/openpreserve/scout", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 13, "size": 74687, "license": "licensed"}}