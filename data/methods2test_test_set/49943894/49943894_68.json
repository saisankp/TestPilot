{"test_class": {"identifier": "ModuleBasedContextFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Collection<ModuleDefinition> defs;", "modifier": "", "type": "Collection<ModuleDefinition>", "declarator": "defs", "var_name": "defs"}], "file": "framework/spring/module/src/test/java/org/apache/cloudstack/spring/module/factory/ModuleBasedContextFactoryTest.java"}, "test_case": {"identifier": "testOverride", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOverride() throws IOException {\n\n        InitTest.initted = false;\n\n        ModuleBasedContextFactory factory = new ModuleBasedContextFactory();\n\n        ModuleDefinitionSet set = factory.loadModules(defs, \"base\");\n\n        assertTrue(!InitTest.initted);\n        assertEquals(\"a string\", set.getApplicationContext(\"child1\").getBean(\"override\", String.class));\n    }", "signature": "void testOverride()", "full_signature": "@Test public void testOverride()", "class_method_signature": "ModuleBasedContextFactoryTest.testOverride()", "testcase": true, "constructor": false, "invocations": ["loadModules", "assertTrue", "assertEquals", "getBean", "getApplicationContext"]}, "focal_class": {"identifier": "ModuleBasedContextFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "loadModules", "parameters": "(Collection<ModuleDefinition> defs, String root)", "modifiers": "public", "return": "ModuleDefinitionSet", "signature": "ModuleDefinitionSet loadModules(Collection<ModuleDefinition> defs, String root)", "full_signature": "public ModuleDefinitionSet loadModules(Collection<ModuleDefinition> defs, String root)", "class_method_signature": "ModuleBasedContextFactory.loadModules(Collection<ModuleDefinition> defs, String root)", "testcase": false, "constructor": false}, {"identifier": "wireUpModules", "parameters": "(String root, Collection<ModuleDefinition> defs)", "modifiers": "protected", "return": "Map<String, ModuleDefinition>", "signature": "Map<String, ModuleDefinition> wireUpModules(String root, Collection<ModuleDefinition> defs)", "full_signature": "protected Map<String, ModuleDefinition> wireUpModules(String root, Collection<ModuleDefinition> defs)", "class_method_signature": "ModuleBasedContextFactory.wireUpModules(String root, Collection<ModuleDefinition> defs)", "testcase": false, "constructor": false}, {"identifier": "traverse", "parameters": "(ModuleDefinition base, Map<String, ModuleDefinition> result)", "modifiers": "protected", "return": "Map<String, ModuleDefinition>", "signature": "Map<String, ModuleDefinition> traverse(ModuleDefinition base, Map<String, ModuleDefinition> result)", "full_signature": "protected Map<String, ModuleDefinition> traverse(ModuleDefinition base, Map<String, ModuleDefinition> result)", "class_method_signature": "ModuleBasedContextFactory.traverse(ModuleDefinition base, Map<String, ModuleDefinition> result)", "testcase": false, "constructor": false}], "file": "framework/spring/module/src/main/java/org/apache/cloudstack/spring/module/factory/ModuleBasedContextFactory.java"}, "focal_method": {"identifier": "loadModules", "parameters": "(Collection<ModuleDefinition> defs, String root)", "modifiers": "public", "return": "ModuleDefinitionSet", "body": "public ModuleDefinitionSet loadModules(Collection<ModuleDefinition> defs, String root) throws IOException {\n\n        Map<String, ModuleDefinition> modules = wireUpModules(root, defs);\n\n        DefaultModuleDefinitionSet moduleSet = new DefaultModuleDefinitionSet(modules, root);\n        moduleSet.load();\n\n        return moduleSet;\n    }", "signature": "ModuleDefinitionSet loadModules(Collection<ModuleDefinition> defs, String root)", "full_signature": "public ModuleDefinitionSet loadModules(Collection<ModuleDefinition> defs, String root)", "class_method_signature": "ModuleBasedContextFactory.loadModules(Collection<ModuleDefinition> defs, String root)", "testcase": false, "constructor": false, "invocations": ["wireUpModules", "load"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}