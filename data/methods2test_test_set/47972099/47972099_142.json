{"test_class": {"identifier": "AverageAccumulatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-core/src/test/java/org/apache/flink/api/common/accumulators/AverageAccumulatorTest.java"}, "test_case": {"identifier": "testGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGet() {\n\t\tAverageAccumulator average = new AverageAccumulator();\n\t\tassertEquals(0.0, average.getLocalValue(), 0.0);\n\t}", "signature": "void testGet()", "full_signature": "@Test public void testGet()", "class_method_signature": "AverageAccumulatorTest.testGet()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getLocalValue"]}, "focal_class": {"identifier": "AverageAccumulator", "superclass": "", "interfaces": "implements SimpleAccumulator<Double>", "fields": [{"original_string": "private static final long serialVersionUID = 3672555084179165255L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 3672555084179165255L", "var_name": "serialVersionUID"}, {"original_string": "private double localValue;", "modifier": "private", "type": "double", "declarator": "localValue", "var_name": "localValue"}, {"original_string": "private long count;", "modifier": "private", "type": "long", "declarator": "count", "var_name": "count"}], "methods": [{"identifier": "add", "parameters": "(Double value)", "modifiers": "@Override public", "return": "void", "signature": "void add(Double value)", "full_signature": "@Override public void add(Double value)", "class_method_signature": "AverageAccumulator.add(Double value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void add(double value)", "full_signature": "public void add(double value)", "class_method_signature": "AverageAccumulator.add(double value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(long value)", "modifiers": "public", "return": "void", "signature": "void add(long value)", "full_signature": "public void add(long value)", "class_method_signature": "AverageAccumulator.add(long value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int value)", "modifiers": "public", "return": "void", "signature": "void add(int value)", "full_signature": "public void add(int value)", "class_method_signature": "AverageAccumulator.add(int value)", "testcase": false, "constructor": false}, {"identifier": "getLocalValue", "parameters": "()", "modifiers": "@Override public", "return": "Double", "signature": "Double getLocalValue()", "full_signature": "@Override public Double getLocalValue()", "class_method_signature": "AverageAccumulator.getLocalValue()", "testcase": false, "constructor": false}, {"identifier": "resetLocal", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void resetLocal()", "full_signature": "@Override public void resetLocal()", "class_method_signature": "AverageAccumulator.resetLocal()", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(Accumulator<Double, Double> other)", "modifiers": "@Override public", "return": "void", "signature": "void merge(Accumulator<Double, Double> other)", "full_signature": "@Override public void merge(Accumulator<Double, Double> other)", "class_method_signature": "AverageAccumulator.merge(Accumulator<Double, Double> other)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "AverageAccumulator", "signature": "AverageAccumulator clone()", "full_signature": "@Override public AverageAccumulator clone()", "class_method_signature": "AverageAccumulator.clone()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AverageAccumulator.toString()", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/api/common/accumulators/AverageAccumulator.java"}, "focal_method": {"identifier": "getLocalValue", "parameters": "()", "modifiers": "@Override public", "return": "Double", "body": "@Override\n\tpublic Double getLocalValue() {\n\t\tif (this.count == 0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn this.localValue / (double)this.count;\n\t}", "signature": "Double getLocalValue()", "full_signature": "@Override public Double getLocalValue()", "class_method_signature": "AverageAccumulator.getLocalValue()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}