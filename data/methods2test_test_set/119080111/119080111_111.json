{"test_class": {"identifier": "IndividualCompleterModuleTest", "superclass": "", "interfaces": "", "fields": [], "file": "opt4j-core/src/test/java/org/opt4j/core/common/completer/IndividualCompleterModuleTest.java"}, "test_case": {"identifier": "configParallel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void configParallel() {\n\t\tIndividualCompleterModule module = new IndividualCompleterModule();\n\t\tmodule.setType(Type.PARALLEL);\n\n\t\tInjector injector = Guice.createInjector(new MockProblemModule(), module);\n\t\tIndividualCompleter completer = injector.getInstance(IndividualCompleter.class);\n\n\t\tAssert.assertEquals(ParallelIndividualCompleter.class, completer.getClass());\n\t}", "signature": "void configParallel()", "full_signature": "@Test public void configParallel()", "class_method_signature": "IndividualCompleterModuleTest.configParallel()", "testcase": true, "constructor": false, "invocations": ["setType", "createInjector", "getInstance", "assertEquals", "getClass"]}, "focal_class": {"identifier": "IndividualCompleterModule", "superclass": "extends Opt4JModule", "interfaces": "", "fields": [{"original_string": "@Info(\"Sets the type of the individual completer.\")\n\tprotected Type type = Type.SEQUENTIAL;", "modifier": "@Info(\"Sets the type of the individual completer.\")\n\tprotected", "type": "Type", "declarator": "type = Type.SEQUENTIAL", "var_name": "type"}, {"original_string": "@Info(\"Sets the number of parallel processes.\")\n\t@Required(property = \"type\", elements = { \"PARALLEL\" })\n\t@Constant(value = \"maxThreads\", namespace = ParallelIndividualCompleter.class)\n\tprotected int threads = 4;", "modifier": "@Info(\"Sets the number of parallel processes.\")\n\t@Required(property = \"type\", elements = { \"PARALLEL\" })\n\t@Constant(value = \"maxThreads\", namespace = ParallelIndividualCompleter.class)\n\tprotected", "type": "int", "declarator": "threads = 4", "var_name": "threads"}], "methods": [{"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Type", "signature": "Type getType()", "full_signature": "public Type getType()", "class_method_signature": "IndividualCompleterModule.getType()", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "(Type type)", "modifiers": "public", "return": "void", "signature": "void setType(Type type)", "full_signature": "public void setType(Type type)", "class_method_signature": "IndividualCompleterModule.setType(Type type)", "testcase": false, "constructor": false}, {"identifier": "getThreads", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getThreads()", "full_signature": "public int getThreads()", "class_method_signature": "IndividualCompleterModule.getThreads()", "testcase": false, "constructor": false}, {"identifier": "setThreads", "parameters": "(int threads)", "modifiers": "public", "return": "void", "signature": "void setThreads(int threads)", "full_signature": "public void setThreads(int threads)", "class_method_signature": "IndividualCompleterModule.setThreads(int threads)", "testcase": false, "constructor": false}, {"identifier": "config", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void config()", "full_signature": "@Override public void config()", "class_method_signature": "IndividualCompleterModule.config()", "testcase": false, "constructor": false}], "file": "opt4j-core/src/main/java/org/opt4j/core/common/completer/IndividualCompleterModule.java"}, "focal_method": {"identifier": "setType", "parameters": "(Type type)", "modifiers": "public", "return": "void", "body": "public void setType(Type type) {\n\t\tthis.type = type;\n\t}", "signature": "void setType(Type type)", "full_signature": "public void setType(Type type)", "class_method_signature": "IndividualCompleterModule.setType(Type type)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}