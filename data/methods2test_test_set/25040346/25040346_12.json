{"test_class": {"identifier": "PushDataCommandHandlerTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "domain/src/test/java/org/m4m/domain/pipeline/PushDataCommandHandlerTest.java"}, "test_case": {"identifier": "shouldSkipEof", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldSkipEof() throws RuntimeException {\n        IOutput twoFilesMediaSource = create.multipleMediaSource()\n                .with(create.mediaSource().with(1).frame(1, 1, 1))\n                .with(create.mediaSource().with(1).frame(2, 2, 2))\n                .construct();\n        ByteBuffer decoderInputBuffer = create.byteBuffer(0, 0, 0);\n        IMediaCodec mediaCodec = create.mediaCodec().construct();\n        when(mediaCodec.getInputBuffers()).thenReturn(new ByteBuffer[]{decoderInputBuffer});\n        VideoDecoder decoder = create.videoDecoder().with(mediaCodec).construct();\n        twoFilesMediaSource.start();\n        decoder.start();\n        decoder.fillCommandQueues();\n\n        PushDataCommandHandler pushDataCommandHandler = new PushDataCommandHandler(twoFilesMediaSource, decoder, decoder);\n        pushDataCommandHandler.handle();\n        pushDataCommandHandler.handle();\n\n        assertEquals(create.byteBuffer(2, 2, 2), decoderInputBuffer);\n    }", "signature": "void shouldSkipEof()", "full_signature": "@Test public void shouldSkipEof()", "class_method_signature": "PushDataCommandHandlerTest.shouldSkipEof()", "testcase": true, "constructor": false, "invocations": ["construct", "with", "with", "multipleMediaSource", "frame", "with", "mediaSource", "frame", "with", "mediaSource", "byteBuffer", "construct", "mediaCodec", "thenReturn", "when", "getInputBuffers", "construct", "with", "videoDecoder", "start", "start", "fillCommandQueues", "handle", "handle", "assertEquals", "byteBuffer"]}, "focal_class": {"identifier": "PushDataCommandHandler", "superclass": "", "interfaces": "implements ICommandHandler", "fields": [{"original_string": "protected IOutput output;", "modifier": "protected", "type": "IOutput", "declarator": "output", "var_name": "output"}, {"original_string": "protected Plugin plugin;", "modifier": "protected", "type": "Plugin", "declarator": "plugin", "var_name": "plugin"}, {"original_string": "private IFrameAllocator inputWithAllocator;", "modifier": "private", "type": "IFrameAllocator", "declarator": "inputWithAllocator", "var_name": "inputWithAllocator"}], "methods": [{"identifier": "PushDataCommandHandler", "parameters": "(IOutput output, Plugin plugin, IFrameAllocator frameAllocator)", "modifiers": "public", "return": "", "signature": " PushDataCommandHandler(IOutput output, Plugin plugin, IFrameAllocator frameAllocator)", "full_signature": "public  PushDataCommandHandler(IOutput output, Plugin plugin, IFrameAllocator frameAllocator)", "class_method_signature": "PushDataCommandHandler.PushDataCommandHandler(IOutput output, Plugin plugin, IFrameAllocator frameAllocator)", "testcase": false, "constructor": true}, {"identifier": "handle", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void handle()", "full_signature": "@Override public void handle()", "class_method_signature": "PushDataCommandHandler.handle()", "testcase": false, "constructor": false}, {"identifier": "restoreCommands", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void restoreCommands()", "full_signature": "private void restoreCommands()", "class_method_signature": "PushDataCommandHandler.restoreCommands()", "testcase": false, "constructor": false}], "file": "domain/src/main/java/org/m4m/domain/pipeline/PushDataCommandHandler.java"}, "focal_method": {"identifier": "handle", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void handle() {\n        Frame frame = inputWithAllocator.findFreeFrame();\n\n        if (frame == null) {\n            //log.info(\"Decoder has no free input buffers\");\n            restoreCommands();\n            return;\n        }\n\n        output.pull(frame);\n        plugin.push(frame);\n        plugin.checkIfOutputQueueHasData();\n    }", "signature": "void handle()", "full_signature": "@Override public void handle()", "class_method_signature": "PushDataCommandHandler.handle()", "testcase": false, "constructor": false, "invocations": ["findFreeFrame", "restoreCommands", "pull", "push", "checkIfOutputQueueHasData"]}, "repository": {"repo_id": 25040346, "url": "https://github.com/INDExOS/media-for-mobile", "language": "Java", "is_fork": false, "fork_count": 167, "stargazer_count": 416, "size": 619, "license": "licensed"}}