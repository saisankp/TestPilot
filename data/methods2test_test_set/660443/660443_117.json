{"test_class": {"identifier": "BasicBondGeneratorTest", "superclass": "extends AbstractGeneratorTest", "interfaces": "", "fields": [{"original_string": "private BasicBondGenerator generator;", "modifier": "private", "type": "BasicBondGenerator", "declarator": "generator", "var_name": "generator"}], "file": "display/renderbasic/src/test/java/org/openscience/cdk/renderer/generators/BasicBondGeneratorTest.java"}, "test_case": {"identifier": "testSquare", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSquare() {\n        IAtomContainer square = makeSquare();\n\n        // generate all four bonds\n        IRenderingElement root = generator.generate(square, model);\n        List<IRenderingElement> elements = elementUtil.getAllSimpleElements(root);\n        Assert.assertEquals(4, elements.size());\n\n        // test that the center is at the origin\n        Assert.assertEquals(new Point2d(0, 0), center(elements));\n    }", "signature": "void testSquare()", "full_signature": "@Test public void testSquare()", "class_method_signature": "BasicBondGeneratorTest.testSquare()", "testcase": true, "constructor": false, "invocations": ["makeSquare", "generate", "getAllSimpleElements", "assertEquals", "size", "assertEquals", "center"]}, "focal_class": {"identifier": "BasicBondGenerator", "superclass": "", "interfaces": "implements IGenerator<IAtomContainer>", "fields": [{"original_string": "private IGeneratorParameter<Double> bondWidth = new BondWidth();", "modifier": "private", "type": "IGeneratorParameter<Double>", "declarator": "bondWidth = new BondWidth()", "var_name": "bondWidth"}, {"original_string": "private IGeneratorParameter<Double> bondDistance = new BondDistance();", "modifier": "private", "type": "IGeneratorParameter<Double>", "declarator": "bondDistance = new BondDistance()", "var_name": "bondDistance"}, {"original_string": "private IGeneratorParameter<Color> defaultBondColor = new DefaultBondColor();", "modifier": "private", "type": "IGeneratorParameter<Color>", "declarator": "defaultBondColor = new DefaultBondColor()", "var_name": "defaultBondColor"}, {"original_string": "private IGeneratorParameter<Double> wedgeWidth = new WedgeWidth();", "modifier": "private", "type": "IGeneratorParameter<Double>", "declarator": "wedgeWidth = new WedgeWidth()", "var_name": "wedgeWidth"}, {"original_string": "private IGeneratorParameter<Double> ringCenterProportion = new TowardsRingCenterProportion();", "modifier": "private", "type": "IGeneratorParameter<Double>", "declarator": "ringCenterProportion = new TowardsRingCenterProportion()", "var_name": "ringCenterProportion"}, {"original_string": "private ILoggingTool                logger               = LoggingToolFactory\n                                                                     .createLoggingTool(BasicBondGenerator.class);", "modifier": "private", "type": "ILoggingTool", "declarator": "logger               = LoggingToolFactory\n                                                                     .createLoggingTool(BasicBondGenerator.class)", "var_name": "logger"}, {"original_string": "protected IRingSet                  ringSet;", "modifier": "protected", "type": "IRingSet", "declarator": "ringSet", "var_name": "ringSet"}, {"original_string": "private Color                       overrideColor        = null;", "modifier": "private", "type": "Color", "declarator": "overrideColor        = null", "var_name": "overrideColor"}, {"original_string": "private double                      overrideBondWidth    = -1;", "modifier": "private", "type": "double", "declarator": "overrideBondWidth    = -1", "var_name": "overrideBondWidth"}, {"original_string": "private int                         IDEAL_RINGSIZE       = 6;", "modifier": "private", "type": "int", "declarator": "IDEAL_RINGSIZE       = 6", "var_name": "IDEAL_RINGSIZE"}, {"original_string": "private double                      MIN_RINGSIZE_FACTOR  = 2.5;", "modifier": "private", "type": "double", "declarator": "MIN_RINGSIZE_FACTOR  = 2.5", "var_name": "MIN_RINGSIZE_FACTOR"}], "methods": [{"identifier": "BasicBondGenerator", "parameters": "()", "modifiers": "public", "return": "", "signature": " BasicBondGenerator()", "full_signature": "public  BasicBondGenerator()", "class_method_signature": "BasicBondGenerator.BasicBondGenerator()", "testcase": false, "constructor": true}, {"identifier": "setOverrideColor", "parameters": "(Color color)", "modifiers": "public", "return": "void", "signature": "void setOverrideColor(Color color)", "full_signature": "public void setOverrideColor(Color color)", "class_method_signature": "BasicBondGenerator.setOverrideColor(Color color)", "testcase": false, "constructor": false}, {"identifier": "setOverrideBondWidth", "parameters": "(double bondWidth)", "modifiers": "public", "return": "void", "signature": "void setOverrideBondWidth(double bondWidth)", "full_signature": "public void setOverrideBondWidth(double bondWidth)", "class_method_signature": "BasicBondGenerator.setOverrideBondWidth(double bondWidth)", "testcase": false, "constructor": false}, {"identifier": "getRingSet", "parameters": "(IAtomContainer atomContainer)", "modifiers": "protected", "return": "IRingSet", "signature": "IRingSet getRingSet(IAtomContainer atomContainer)", "full_signature": "protected IRingSet getRingSet(IAtomContainer atomContainer)", "class_method_signature": "BasicBondGenerator.getRingSet(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getColorForBond", "parameters": "(IBond bond, RendererModel model)", "modifiers": "public", "return": "Color", "signature": "Color getColorForBond(IBond bond, RendererModel model)", "full_signature": "public Color getColorForBond(IBond bond, RendererModel model)", "class_method_signature": "BasicBondGenerator.getColorForBond(IBond bond, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "getWidthForBond", "parameters": "(IBond bond, RendererModel model)", "modifiers": "public", "return": "double", "signature": "double getWidthForBond(IBond bond, RendererModel model)", "full_signature": "public double getWidthForBond(IBond bond, RendererModel model)", "class_method_signature": "BasicBondGenerator.getWidthForBond(IBond bond, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(IAtomContainer container, RendererModel model)", "modifiers": "@Override public", "return": "IRenderingElement", "signature": "IRenderingElement generate(IAtomContainer container, RendererModel model)", "full_signature": "@Override public IRenderingElement generate(IAtomContainer container, RendererModel model)", "class_method_signature": "BasicBondGenerator.generate(IAtomContainer container, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(IBond currentBond, RendererModel model)", "modifiers": "public", "return": "IRenderingElement", "signature": "IRenderingElement generate(IBond currentBond, RendererModel model)", "full_signature": "public IRenderingElement generate(IBond currentBond, RendererModel model)", "class_method_signature": "BasicBondGenerator.generate(IBond currentBond, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "generateBondElement", "parameters": "(IBond bond, RendererModel model)", "modifiers": "public", "return": "IRenderingElement", "signature": "IRenderingElement generateBondElement(IBond bond, RendererModel model)", "full_signature": "public IRenderingElement generateBondElement(IBond bond, RendererModel model)", "class_method_signature": "BasicBondGenerator.generateBondElement(IBond bond, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "generateBondElement", "parameters": "(IBond bond, IBond.Order type, RendererModel model)", "modifiers": "public", "return": "IRenderingElement", "signature": "IRenderingElement generateBondElement(IBond bond, IBond.Order type, RendererModel model)", "full_signature": "public IRenderingElement generateBondElement(IBond bond, IBond.Order type, RendererModel model)", "class_method_signature": "BasicBondGenerator.generateBondElement(IBond bond, IBond.Order type, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "createLines", "parameters": "(Point2d point1, Point2d point2, double width, double dist, Color color, ElementGroup group)", "modifiers": "private", "return": "void", "signature": "void createLines(Point2d point1, Point2d point2, double width, double dist, Color color, ElementGroup group)", "full_signature": "private void createLines(Point2d point1, Point2d point2, double width, double dist, Color color, ElementGroup group)", "class_method_signature": "BasicBondGenerator.createLines(Point2d point1, Point2d point2, double width, double dist, Color color, ElementGroup group)", "testcase": false, "constructor": false}, {"identifier": "generateDistanceData", "parameters": "(Point2d point1, Point2d point2, double dist)", "modifiers": "private", "return": "double[]", "signature": "double[] generateDistanceData(Point2d point1, Point2d point2, double dist)", "full_signature": "private double[] generateDistanceData(Point2d point1, Point2d point2, double dist)", "class_method_signature": "BasicBondGenerator.generateDistanceData(Point2d point1, Point2d point2, double dist)", "testcase": false, "constructor": false}, {"identifier": "generateRingElements", "parameters": "(IBond bond, IRing ring, RendererModel model)", "modifiers": "public", "return": "IRenderingElement", "signature": "IRenderingElement generateRingElements(IBond bond, IRing ring, RendererModel model)", "full_signature": "public IRenderingElement generateRingElements(IBond bond, IRing ring, RendererModel model)", "class_method_signature": "BasicBondGenerator.generateRingElements(IBond bond, IRing ring, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "generateInnerElement", "parameters": "(IBond bond, IRing ring, RendererModel model)", "modifiers": "public", "return": "LineElement", "signature": "LineElement generateInnerElement(IBond bond, IRing ring, RendererModel model)", "full_signature": "public LineElement generateInnerElement(IBond bond, IRing ring, RendererModel model)", "class_method_signature": "BasicBondGenerator.generateInnerElement(IBond bond, IRing ring, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "generateStereoElement", "parameters": "(IBond bond, RendererModel model)", "modifiers": "private", "return": "IRenderingElement", "signature": "IRenderingElement generateStereoElement(IBond bond, RendererModel model)", "full_signature": "private IRenderingElement generateStereoElement(IBond bond, RendererModel model)", "class_method_signature": "BasicBondGenerator.generateStereoElement(IBond bond, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "isDouble", "parameters": "(IBond bond)", "modifiers": "private", "return": "boolean", "signature": "boolean isDouble(IBond bond)", "full_signature": "private boolean isDouble(IBond bond)", "class_method_signature": "BasicBondGenerator.isDouble(IBond bond)", "testcase": false, "constructor": false}, {"identifier": "isSingle", "parameters": "(IBond bond)", "modifiers": "private", "return": "boolean", "signature": "boolean isSingle(IBond bond)", "full_signature": "private boolean isSingle(IBond bond)", "class_method_signature": "BasicBondGenerator.isSingle(IBond bond)", "testcase": false, "constructor": false}, {"identifier": "isStereoBond", "parameters": "(IBond bond)", "modifiers": "private", "return": "boolean", "signature": "boolean isStereoBond(IBond bond)", "full_signature": "private boolean isStereoBond(IBond bond)", "class_method_signature": "BasicBondGenerator.isStereoBond(IBond bond)", "testcase": false, "constructor": false}, {"identifier": "bindsHydrogen", "parameters": "(IBond bond)", "modifiers": "protected", "return": "boolean", "signature": "boolean bindsHydrogen(IBond bond)", "full_signature": "protected boolean bindsHydrogen(IBond bond)", "class_method_signature": "BasicBondGenerator.bindsHydrogen(IBond bond)", "testcase": false, "constructor": false}, {"identifier": "generateBond", "parameters": "(IBond bond, RendererModel model)", "modifiers": "public", "return": "IRenderingElement", "signature": "IRenderingElement generateBond(IBond bond, RendererModel model)", "full_signature": "public IRenderingElement generateBond(IBond bond, RendererModel model)", "class_method_signature": "BasicBondGenerator.generateBond(IBond bond, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "List<IGeneratorParameter<?>>", "signature": "List<IGeneratorParameter<?>> getParameters()", "full_signature": "@Override public List<IGeneratorParameter<?>> getParameters()", "class_method_signature": "BasicBondGenerator.getParameters()", "testcase": false, "constructor": false}], "file": "display/renderbasic/src/main/java/org/openscience/cdk/renderer/generators/BasicBondGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(IAtomContainer container, RendererModel model)", "modifiers": "@Override public", "return": "IRenderingElement", "body": "@Override\n    public IRenderingElement generate(IAtomContainer container, RendererModel model) {\n        ElementGroup group = new ElementGroup();\n        this.ringSet = this.getRingSet(container);\n\n        //Sort the ringSet consistently to ensure consistent rendering.\n        //If this is omitted, the bonds may 'tremble'.\n        ringSet.sortAtomContainers(new AtomContainerComparatorBy2DCenter());\n\n        for (IBond bond : container.bonds()) {\n            group.add(MarkedElement.markupBond(this.generate(bond, model), bond));\n        }\n        return group;\n    }", "signature": "IRenderingElement generate(IAtomContainer container, RendererModel model)", "full_signature": "@Override public IRenderingElement generate(IAtomContainer container, RendererModel model)", "class_method_signature": "BasicBondGenerator.generate(IAtomContainer container, RendererModel model)", "testcase": false, "constructor": false, "invocations": ["getRingSet", "sortAtomContainers", "bonds", "add", "markupBond", "generate"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}