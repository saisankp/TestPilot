{"test_class": {"identifier": "JVMViewCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Gateway gateway;", "modifier": "private", "type": "Gateway", "declarator": "gateway", "var_name": "gateway"}, {"original_string": "private JVMViewCommand command;", "modifier": "private", "type": "JVMViewCommand", "declarator": "command", "var_name": "command"}, {"original_string": "private BufferedWriter writer;", "modifier": "private", "type": "BufferedWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "private StringWriter sWriter;", "modifier": "private", "type": "StringWriter", "declarator": "sWriter", "var_name": "sWriter"}], "file": "py4j-java/src/test/java/py4j/commands/JVMViewCommandTest.java"}, "test_case": {"identifier": "testSubCommands", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSubCommands() {\n\t\tString inputCommand1 = JVMViewCommand.CREATE_VIEW_SUB_COMMAND_NAME + \"\\n\" + \"custom\" + \"\\ne\\n\";\n\t\tString inputCommand2 = JVMViewCommand.IMPORT_SUB_COMMAND_NAME + \"\\nro0\\n\" + \"java.util.*\" + \"\\ne\\n\";\n\t\tString inputCommand3 = JVMViewCommand.IMPORT_SUB_COMMAND_NAME + \"\\nro0\\n\" + \"java.io.File\" + \"\\ne\\n\";\n\t\tString inputCommand4 = JVMViewCommand.REMOVE_IMPORT_SUB_COMMAND_NAME + \"\\nro0\\n\" + \"java.io.File\" + \"\\ne\\n\";\n\t\tString inputCommand5 = JVMViewCommand.REMOVE_IMPORT_SUB_COMMAND_NAME + \"\\nro0\\n\" + \"java.lang.*\" + \"\\ne\\n\";\n\t\tString inputCommand6 = JVMViewCommand.IMPORT_SUB_COMMAND_NAME + \"\\nrj\\n\" + \"java.util.*\" + \"\\ne\\n\";\n\t\ttry {\n\t\t\tcommand.execute(\"r\", new BufferedReader(new StringReader(inputCommand1)), writer);\n\t\t\tassertEquals(\"!yro0\\n\", sWriter.toString());\n\t\t\tJVMView view = (JVMView) gateway.getObject(\"o0\");\n\n\t\t\tcommand.execute(\"r\", new BufferedReader(new StringReader(inputCommand2)), writer);\n\t\t\tassertEquals(\"!yro0\\n!yv\\n\", sWriter.toString());\n\t\t\tassertEquals(2, view.getStarImports().size()); // 1 for java.lang, 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// for java.util\n\t\t\tassertTrue(view.getStarImports().contains(\"java.util\"));\n\n\t\t\tcommand.execute(\"r\", new BufferedReader(new StringReader(inputCommand3)), writer);\n\t\t\tassertEquals(\"!yro0\\n!yv\\n!yv\\n\", sWriter.toString());\n\t\t\tassertTrue(view.getSingleImportsMap().containsKey(\"File\"));\n\t\t\tassertEquals(1, view.getSingleImportsMap().size()); // 1 for\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// java.io.File\n\n\t\t\t// Duplicate\n\t\t\tcommand.execute(\"r\", new BufferedReader(new StringReader(inputCommand2)), writer);\n\t\t\tassertEquals(\"!yro0\\n!yv\\n!yv\\n!yv\\n\", sWriter.toString());\n\t\t\tassertEquals(2, view.getStarImports().size());\n\n\t\t\tcommand.execute(\"r\", new BufferedReader(new StringReader(inputCommand3)), writer);\n\t\t\tassertEquals(\"!yro0\\n!yv\\n!yv\\n!yv\\n!yv\\n\", sWriter.toString());\n\t\t\tassertTrue(view.getSingleImportsMap().containsKey(\"File\"));\n\t\t\tassertEquals(1, view.getSingleImportsMap().size()); // 1 for\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// java.io.File\n\n\t\t\tcommand.execute(\"r\", new BufferedReader(new StringReader(inputCommand4)), writer);\n\t\t\tassertEquals(\"!yro0\\n!yv\\n!yv\\n!yv\\n!yv\\n!ybtrue\\n\", sWriter.toString());\n\t\t\tassertFalse(view.getSingleImportsMap().containsKey(\"File\"));\n\t\t\tassertEquals(0, view.getSingleImportsMap().size()); // 1 for\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// java.io.File\n\n\t\t\tcommand.execute(\"r\", new BufferedReader(new StringReader(inputCommand4)), writer);\n\t\t\tassertEquals(\"!yro0\\n!yv\\n!yv\\n!yv\\n!yv\\n!ybtrue\\n!ybfalse\\n\", sWriter.toString());\n\t\t\tassertFalse(view.getSingleImportsMap().containsKey(\"File\"));\n\t\t\tassertEquals(0, view.getSingleImportsMap().size()); // 1 for\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// java.io.File\n\n\t\t\tcommand.execute(\"r\", new BufferedReader(new StringReader(inputCommand5)), writer);\n\t\t\tassertEquals(\"!yro0\\n!yv\\n!yv\\n!yv\\n!yv\\n!ybtrue\\n!ybfalse\\n!ybtrue\\n\", sWriter.toString());\n\t\t\tassertFalse(view.getStarImports().contains(\"java.lang.*\"));\n\t\t\tassertEquals(1, view.getStarImports().size()); // 1 for java.io.File\n\n\t\t\tcommand.execute(\"r\", new BufferedReader(new StringReader(inputCommand5)), writer);\n\t\t\tassertEquals(\"!yro0\\n!yv\\n!yv\\n!yv\\n!yv\\n!ybtrue\\n!ybfalse\\n!ybtrue\\n!ybfalse\\n\", sWriter.toString());\n\t\t\tassertFalse(view.getStarImports().contains(\"java.lang.*\"));\n\t\t\tassertEquals(1, view.getStarImports().size()); // 1 for java.io.File\n\n\t\t\tcommand.execute(\"r\", new BufferedReader(new StringReader(inputCommand6)), writer);\n\t\t\tassertEquals(\"!yro0\\n!yv\\n!yv\\n!yv\\n!yv\\n!ybtrue\\n!ybfalse\\n!ybtrue\\n!ybfalse\\n!yv\\n\", sWriter.toString());\n\t\t\tassertFalse(gateway.getDefaultJVMView().getStarImports().contains(\"java.util.*\"));\n\t\t\tassertEquals(2, gateway.getDefaultJVMView().getStarImports().size()); // 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// for\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// java.io.File\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail();\n\t\t}\n\t}", "signature": "void testSubCommands()", "full_signature": "@Test public void testSubCommands()", "class_method_signature": "JVMViewCommandTest.testSubCommands()", "testcase": true, "constructor": false, "invocations": ["execute", "assertEquals", "toString", "getObject", "execute", "assertEquals", "toString", "assertEquals", "size", "getStarImports", "assertTrue", "contains", "getStarImports", "execute", "assertEquals", "toString", "assertTrue", "containsKey", "getSingleImportsMap", "assertEquals", "size", "getSingleImportsMap", "execute", "assertEquals", "toString", "assertEquals", "size", "getStarImports", "execute", "assertEquals", "toString", "assertTrue", "containsKey", "getSingleImportsMap", "assertEquals", "size", "getSingleImportsMap", "execute", "assertEquals", "toString", "assertFalse", "containsKey", "getSingleImportsMap", "assertEquals", "size", "getSingleImportsMap", "execute", "assertEquals", "toString", "assertFalse", "containsKey", "getSingleImportsMap", "assertEquals", "size", "getSingleImportsMap", "execute", "assertEquals", "toString", "assertFalse", "contains", "getStarImports", "assertEquals", "size", "getStarImports", "execute", "assertEquals", "toString", "assertFalse", "contains", "getStarImports", "assertEquals", "size", "getStarImports", "execute", "assertEquals", "toString", "assertFalse", "contains", "getStarImports", "getDefaultJVMView", "assertEquals", "size", "getStarImports", "getDefaultJVMView", "printStackTrace", "fail"]}, "focal_class": {"identifier": "JVMViewCommand", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "private final Logger logger = Logger.getLogger(JVMViewCommand.class.getName());", "modifier": "private final", "type": "Logger", "declarator": "logger = Logger.getLogger(JVMViewCommand.class.getName())", "var_name": "logger"}, {"original_string": "public final static char CREATE_VIEW_SUB_COMMAND_NAME = 'c';", "modifier": "public final static", "type": "char", "declarator": "CREATE_VIEW_SUB_COMMAND_NAME = 'c'", "var_name": "CREATE_VIEW_SUB_COMMAND_NAME"}, {"original_string": "public final static char IMPORT_SUB_COMMAND_NAME = 'i';", "modifier": "public final static", "type": "char", "declarator": "IMPORT_SUB_COMMAND_NAME = 'i'", "var_name": "IMPORT_SUB_COMMAND_NAME"}, {"original_string": "public final static char REMOVE_IMPORT_SUB_COMMAND_NAME = 'r';", "modifier": "public final static", "type": "char", "declarator": "REMOVE_IMPORT_SUB_COMMAND_NAME = 'r'", "var_name": "REMOVE_IMPORT_SUB_COMMAND_NAME"}, {"original_string": "public final static char SEARCH_SUB_COMMAND_NAME = 's';", "modifier": "public final static", "type": "char", "declarator": "SEARCH_SUB_COMMAND_NAME = 's'", "var_name": "SEARCH_SUB_COMMAND_NAME"}, {"original_string": "public static final String JVMVIEW_COMMAND_NAME = \"j\";", "modifier": "public static final", "type": "String", "declarator": "JVMVIEW_COMMAND_NAME = \"j\"", "var_name": "JVMVIEW_COMMAND_NAME"}, {"original_string": "protected ReflectionEngine rEngine;", "modifier": "protected", "type": "ReflectionEngine", "declarator": "rEngine", "var_name": "rEngine"}], "methods": [{"identifier": "JVMViewCommand", "parameters": "()", "modifiers": "public", "return": "", "signature": " JVMViewCommand()", "full_signature": "public  JVMViewCommand()", "class_method_signature": "JVMViewCommand.JVMViewCommand()", "testcase": false, "constructor": true}, {"identifier": "createJVMView", "parameters": "(BufferedReader reader)", "modifiers": "private", "return": "String", "signature": "String createJVMView(BufferedReader reader)", "full_signature": "private String createJVMView(BufferedReader reader)", "class_method_signature": "JVMViewCommand.createJVMView(BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "doImport", "parameters": "(BufferedReader reader)", "modifiers": "private", "return": "String", "signature": "String doImport(BufferedReader reader)", "full_signature": "private String doImport(BufferedReader reader)", "class_method_signature": "JVMViewCommand.doImport(BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String commandName, BufferedReader reader, BufferedWriter writer)", "modifiers": "@Override public", "return": "void", "signature": "void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "full_signature": "@Override public void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "class_method_signature": "JVMViewCommand.execute(String commandName, BufferedReader reader, BufferedWriter writer)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Gateway gateway, Py4JServerConnection connection)", "modifiers": "@Override public", "return": "void", "signature": "void init(Gateway gateway, Py4JServerConnection connection)", "full_signature": "@Override public void init(Gateway gateway, Py4JServerConnection connection)", "class_method_signature": "JVMViewCommand.init(Gateway gateway, Py4JServerConnection connection)", "testcase": false, "constructor": false}, {"identifier": "removeImport", "parameters": "(BufferedReader reader)", "modifiers": "private", "return": "String", "signature": "String removeImport(BufferedReader reader)", "full_signature": "private String removeImport(BufferedReader reader)", "class_method_signature": "JVMViewCommand.removeImport(BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(BufferedReader reader)", "modifiers": "private", "return": "String", "signature": "String search(BufferedReader reader)", "full_signature": "private String search(BufferedReader reader)", "class_method_signature": "JVMViewCommand.search(BufferedReader reader)", "testcase": false, "constructor": false}], "file": "py4j-java/src/main/java/py4j/commands/JVMViewCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(String commandName, BufferedReader reader, BufferedWriter writer)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(String commandName, BufferedReader reader, BufferedWriter writer)\n\t\t\tthrows Py4JException, IOException {\n\t\tchar subCommand = safeReadLine(reader).charAt(0);\n\t\tString returnCommand = null;\n\n\t\tif (subCommand == CREATE_VIEW_SUB_COMMAND_NAME) {\n\t\t\treturnCommand = createJVMView(reader);\n\t\t} else if (subCommand == IMPORT_SUB_COMMAND_NAME) {\n\t\t\treturnCommand = doImport(reader);\n\t\t} else if (subCommand == REMOVE_IMPORT_SUB_COMMAND_NAME) {\n\t\t\treturnCommand = removeImport(reader);\n\t\t} else if (subCommand == SEARCH_SUB_COMMAND_NAME) {\n\t\t\treturnCommand = search(reader);\n\t\t} else {\n\t\t\treturnCommand = Protocol.getOutputErrorCommand(\"Unknown JVM View SubCommand Name: \" + subCommand);\n\t\t}\n\t\tlogger.finest(\"Returning command: \" + returnCommand);\n\t\twriter.write(returnCommand);\n\t\twriter.flush();\n\t}", "signature": "void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "full_signature": "@Override public void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "class_method_signature": "JVMViewCommand.execute(String commandName, BufferedReader reader, BufferedWriter writer)", "testcase": false, "constructor": false, "invocations": ["charAt", "safeReadLine", "createJVMView", "doImport", "removeImport", "search", "getOutputErrorCommand", "finest", "write", "flush"]}, "repository": {"repo_id": 1045976, "url": "https://github.com/bartdag/py4j", "language": "Java", "is_fork": false, "fork_count": 141, "stargazer_count": 737, "size": 16415, "license": "licensed"}}