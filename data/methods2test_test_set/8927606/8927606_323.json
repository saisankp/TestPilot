{"test_class": {"identifier": "RhinoPipeTest", "superclass": "extends PipeTestBase<RhinoPipe>", "interfaces": "", "fields": [{"original_string": "private String fileName = \"/Pipes/javascript/rhino-test.js\";", "modifier": "private", "type": "String", "declarator": "fileName = \"/Pipes/javascript/rhino-test.js\"", "var_name": "fileName"}], "file": "core/src/test/java/nl/nn/adapterframework/pipes/RhinoPipeTest.java"}, "test_case": {"identifier": "testDoPipe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDoPipe() throws Exception {\n        pipe.setFileName(fileName);\n        pipe.setjsfunctionName(\"giveNumber\");\n        pipe.setjsfunctionArguments(\"3\");\n        pipe.configure();\n        PipeRunResult res = doPipe(pipe, \"3\", session);\n        assertEquals(\"9\", res.getResult().asString());\n    }", "signature": "void testDoPipe()", "full_signature": "@Test public void testDoPipe()", "class_method_signature": "RhinoPipeTest.testDoPipe()", "testcase": true, "constructor": false, "invocations": ["setFileName", "setjsfunctionName", "setjsfunctionArguments", "configure", "doPipe", "assertEquals", "asString", "getResult"]}, "focal_class": {"identifier": "RhinoPipe", "superclass": "extends FixedForwardPipe", "interfaces": "", "fields": [{"original_string": "private String fileName;", "modifier": "private", "type": "String", "declarator": "fileName", "var_name": "fileName"}, {"original_string": "private String fileInput;", "modifier": "private", "type": "String", "declarator": "fileInput", "var_name": "fileInput"}, {"original_string": "private String inputString;", "modifier": "private", "type": "String", "declarator": "inputString", "var_name": "inputString"}, {"original_string": "private String paramsInput;", "modifier": "private", "type": "String", "declarator": "paramsInput", "var_name": "paramsInput"}, {"original_string": "private String jsfunctionName;", "modifier": "private", "type": "String", "declarator": "jsfunctionName", "var_name": "jsfunctionName"}, {"original_string": "private String jsfunctionArguments;", "modifier": "private", "type": "String", "declarator": "jsfunctionArguments", "var_name": "jsfunctionArguments"}, {"original_string": "private String sessionKey = null;", "modifier": "private", "type": "String", "declarator": "sessionKey = null", "var_name": "sessionKey"}, {"original_string": "private boolean lookupAtRuntime = false;", "modifier": "private", "type": "boolean", "declarator": "lookupAtRuntime = false", "var_name": "lookupAtRuntime"}, {"original_string": "private boolean debug=false;", "modifier": "private", "type": "boolean", "declarator": "debug=false", "var_name": "debug"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "RhinoPipe.configure()", "testcase": false, "constructor": false}, {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "RhinoPipe.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "setDebug", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"when set <code>true</code> or set to something else then \\\"true\\\", (even set to the empty string), the debugging is not active\", \"true\"}) public", "return": "void", "signature": "void setDebug(boolean b)", "full_signature": "@IbisDoc({\"when set <code>true</code> or set to something else then \\\"true\\\", (even set to the empty string), the debugging is not active\", \"true\"}) public void setDebug(boolean b)", "class_method_signature": "RhinoPipe.setDebug(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isDebug", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDebug()", "full_signature": "public boolean isDebug()", "class_method_signature": "RhinoPipe.isDebug()", "testcase": false, "constructor": false}, {"identifier": "setFileName", "parameters": "(String fileName)", "modifiers": "@IbisDoc({\"name of the file containing the Java-script Functions as base input\", \"\"}) public", "return": "void", "signature": "void setFileName(String fileName)", "full_signature": "@IbisDoc({\"name of the file containing the Java-script Functions as base input\", \"\"}) public void setFileName(String fileName)", "class_method_signature": "RhinoPipe.setFileName(String fileName)", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFileName()", "full_signature": "public String getFileName()", "class_method_signature": "RhinoPipe.getFileName()", "testcase": false, "constructor": false}, {"identifier": "setjsfunctionName", "parameters": "(String jsfunctionName)", "modifiers": "@IbisDoc({\"The name of the function in the java-script library to run\", \"\"}) public", "return": "void", "signature": "void setjsfunctionName(String jsfunctionName)", "full_signature": "@IbisDoc({\"The name of the function in the java-script library to run\", \"\"}) public void setjsfunctionName(String jsfunctionName)", "class_method_signature": "RhinoPipe.setjsfunctionName(String jsfunctionName)", "testcase": false, "constructor": false}, {"identifier": "getjsfunctionName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getjsfunctionName()", "full_signature": "public String getjsfunctionName()", "class_method_signature": "RhinoPipe.getjsfunctionName()", "testcase": false, "constructor": false}, {"identifier": "setjsfunctionArguments", "parameters": "(String jsfunctionArguments)", "modifiers": "@IbisDoc({\"The arguments to run the function in the java-script library to run\", \"\"}) public", "return": "void", "signature": "void setjsfunctionArguments(String jsfunctionArguments)", "full_signature": "@IbisDoc({\"The arguments to run the function in the java-script library to run\", \"\"}) public void setjsfunctionArguments(String jsfunctionArguments)", "class_method_signature": "RhinoPipe.setjsfunctionArguments(String jsfunctionArguments)", "testcase": false, "constructor": false}, {"identifier": "getjsfunctionArguments", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getjsfunctionArguments()", "full_signature": "public String getjsfunctionArguments()", "class_method_signature": "RhinoPipe.getjsfunctionArguments()", "testcase": false, "constructor": false}, {"identifier": "setLookupAtRuntime", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"when set <code>true</code>, the lookup of the file will be done at runtime instead of at configuration time\", \"false\"}) public", "return": "void", "signature": "void setLookupAtRuntime(boolean b)", "full_signature": "@IbisDoc({\"when set <code>true</code>, the lookup of the file will be done at runtime instead of at configuration time\", \"false\"}) public void setLookupAtRuntime(boolean b)", "class_method_signature": "RhinoPipe.setLookupAtRuntime(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isLookupAtRuntime", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLookupAtRuntime()", "full_signature": "public boolean isLookupAtRuntime()", "class_method_signature": "RhinoPipe.isLookupAtRuntime()", "testcase": false, "constructor": false}, {"identifier": "setSessionKey", "parameters": "(String newSessionKey)", "modifiers": "public", "return": "void", "signature": "void setSessionKey(String newSessionKey)", "full_signature": "public void setSessionKey(String newSessionKey)", "class_method_signature": "RhinoPipe.setSessionKey(String newSessionKey)", "testcase": false, "constructor": false}, {"identifier": "getSessionKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSessionKey()", "full_signature": "public String getSessionKey()", "class_method_signature": "RhinoPipe.getSessionKey()", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/pipes/RhinoPipe.java"}, "focal_method": {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "body": "@Override\n\tpublic PipeRunResult doPipe(Message message, IPipeLineSession session) throws PipeRunException {\n\t\t//INIT\n\t\tString eol = System.getProperty(\"line.separator\");\n\t\tif (message==null || message.isEmpty()) {\n\t\t\t//No input from previous pipes. We will use filename and or string input.\n\t        if ((StringUtils.isEmpty(fileInput)) && inputString==null && isLookupAtRuntime()) {  // No input from file or input string. Nowhere to GO!\n\t\t\t\tthrow new PipeRunException(this,getLogPrefix(session)+\"No input specified anywhere. No string input, no file input and no previous pipe input\");\n\t        }\n\t\t}\n\t\t\n\t\t\n\t\t//Default console bindings. Used to map javascript commands to java commands as CONSTANT\n\t\t//Console bindings do not work in Rhino. To print from jslib use java.lang.System.out.print(\"hello world!\");\n\t\t\n\t\t//Get the input from the file at Run Time\n\t\tif (StringUtils.isNotEmpty(getFileName()) && isLookupAtRuntime()) {\n\t\t\tURL resource = null;\n\t\t\ttry {\n\t\t\t\tresource = ClassUtils.getResourceURL(getConfigurationClassLoader(), getFileName());\n\t\t\t} catch (Throwable e) {\n\t\t\t\tthrow new PipeRunException(this,getLogPrefix(session)+\"got exception searching for [\"+getFileName()+\"]\", e);\n\t\t\t}\n\t\t\tif (resource==null) {\n\t\t\t\tthrow new PipeRunException(this,getLogPrefix(session)+\"cannot find resource [\"+getFileName()+\"]\");\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tfileInput = Misc.resourceToString(resource, SystemUtils.LINE_SEPARATOR);\n\t\t\t} catch (Throwable e) {\n\t\t\t\tthrow new PipeRunException(this,getLogPrefix(session)+\"got exception loading [\"+getFileName()+\"]\", e);\n\t\t\t}\n\t\t}\n\t\t//Get all params as input\n\t\tif (getParameterList()!=null) {\n\t\t\tParameterValueList pvl;\n\t\t\ttry {\n\t\t\t\tpvl = getParameterList().getValues(message, session);\n\t\t\t} catch (ParameterException e) {\n\t\t\t\tthrow new PipeRunException(this,getLogPrefix(session)+\"exception extracting parameters\",e);\n\t\t\t}\n\t\t\tfor (int i=0; i<pvl.size(); i++) {\n\t\t\t\tParameterValue pv = pvl.getParameterValue(i);\n\t\t\t\tparamsInput = pv.asStringValue(\"\") + eol + paramsInput ;\n\t\t\t}\n\t\t}\n\n\t\tString javascriptcode = \"Packages.java;\" + eol;\n\t\tif (fileInput != null) {\n\t\t\tjavascriptcode = javascriptcode + fileInput;\n\t\t}\n\t\tif (paramsInput != null) {\n\t\t\tjavascriptcode = paramsInput + eol + javascriptcode;\n\t\t}\n\t\tString stringResult = (String) javascriptcode;\n\t\tstringResult = \"INPUTSTREAM used in case of ERROR\" + eol + \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\" + eol + stringResult;\n\t\t// Start your engines\n\t\t// Rhino engine Ok.\n\t\tContext cx = Context.enter();\n\t\tScriptable scope = cx.initStandardObjects();\n\t\tif(isDebug()) {\n\t\t\tlog.debug(\"debug active\");\n\t\t\tcx.setLanguageVersion(Context.VERSION_1_2);\n\t\t\tcx.setGeneratingDebug(true);\n\t\t}\n\t\t\n\t\t// Load javascript factory with javascript functions from file, stringinput and paraminput\n\t\tString jsResult = \"\";\n\t\ttry {\n\n\t\t\tcx.evaluateString(scope, javascriptcode, \"jsScript\", 1, null);\n\t\t\tFunction fct = (Function) scope.get(jsfunctionName, scope);\n\t\t\t// Object result = fct.call(cx, scope, scope, new\n\t\t\t// Object[]{jsfunctionArguments});\n\t\t\tObject result = fct.call(cx, scope, scope, new Object[] { message.asObject() });\n\n\t\t\tjsResult = (String) Context.jsToJava(result, String.class);\n\t\t\tif (isDebug() && log.isDebugEnabled()) {\n\t\t\t\tlog.debug(getLogPrefix(session)+\"jsResult [\"+ jsResult+\"]\");\n\t\t\t}\n\n\n\t\t} catch (EcmaError ex) {\n\t\t\tthrow new PipeRunException(this, \"org.mozilla.javascript.EcmaError -> \", ex);\n\t\t} finally {\n\t\t\tContext.exit();\n\t\t}\n\t\t// Use the result\n\t\tif ( jsResult != null) {\n\t\t\tstringResult =jsResult;\n\t\t}\n\t\tif (StringUtils.isEmpty(getSessionKey())) {\n\t\t\treturn new PipeRunResult(getForward(), stringResult);\n\t\t} else {\n\t\t\tsession.put(getSessionKey(), stringResult);\n\t\t\treturn new PipeRunResult(getForward(), message);\n\t\t}\n\t}", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "RhinoPipe.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false, "invocations": ["getProperty", "isEmpty", "isEmpty", "isLookupAtRuntime", "getLogPrefix", "isNotEmpty", "getFileName", "isLookupAtRuntime", "getResourceURL", "getConfigurationClassLoader", "getFileName", "getLogPrefix", "getFileName", "getLogPrefix", "getFileName", "resourceToString", "getLogPrefix", "getFileName", "getParameterList", "getValues", "getParameterList", "getLogPrefix", "size", "getParameterValue", "asStringValue", "enter", "initStandardObjects", "isDebug", "debug", "setLanguageVersion", "setGeneratingDebug", "evaluateString", "get", "call", "asObject", "jsToJava", "isDebug", "isDebugEnabled", "debug", "getLogPrefix", "exit", "isEmpty", "getSessionKey", "getForward", "put", "getSessionKey", "getForward"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}