{"test_class": {"identifier": "RangeSelectionComponentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DELTA = 1e-3;", "modifier": "private static final", "type": "double", "declarator": "DELTA = 1e-3", "var_name": "DELTA"}], "file": "adt-ui/src/test/java/com/android/tools/adtui/RangeSelectionComponentTest.java"}, "test_case": {"identifier": "componentIsNotDrawnIfInvisible", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void componentIsNotDrawnIfInvisible() {\n    Range selectionRange = new Range (60, 70);\n    Range viewRange = new Range(30, 50);\n    RangeSelectionComponent component = new RangeSelectionComponent(new RangeSelectionModel(selectionRange), viewRange);\n    Dimension dimension = new Dimension(100, 100);\n    component.setSize(dimension);\n    Graphics2D graphics = mock(Graphics2D.class);\n    component.draw(graphics, dimension);\n    Mockito.verifyZeroInteractions(graphics);\n    selectionRange.set(10, 20);\n    component.draw(graphics, dimension);\n    Mockito.verifyZeroInteractions(graphics);\n    selectionRange.set(0, -1);\n    component.draw(graphics, dimension);\n    Mockito.verifyZeroInteractions(graphics);\n  }", "signature": "void componentIsNotDrawnIfInvisible()", "full_signature": "@Test public void componentIsNotDrawnIfInvisible()", "class_method_signature": "RangeSelectionComponentTest.componentIsNotDrawnIfInvisible()", "testcase": true, "constructor": false, "invocations": ["setSize", "mock", "draw", "verifyZeroInteractions", "set", "draw", "verifyZeroInteractions", "set", "draw", "verifyZeroInteractions"]}, "focal_class": {"identifier": "RangeSelectionComponent", "superclass": "extends AnimatedComponent", "interfaces": "", "fields": [{"original_string": "private static final Color DRAG_BAR_COLOR = new JBColor(new Color(0x260478DA, true), new Color(0x3374B7FF, true));", "modifier": "private static final", "type": "Color", "declarator": "DRAG_BAR_COLOR = new JBColor(new Color(0x260478DA, true), new Color(0x3374B7FF, true))", "var_name": "DRAG_BAR_COLOR"}, {"original_string": "private static final int DEFAULT_DRAG_BAR_HEIGHT = 26;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_DRAG_BAR_HEIGHT = 26", "var_name": "DEFAULT_DRAG_BAR_HEIGHT"}, {"original_string": "private static final float HANDLE_WIDTH = 3.0f;", "modifier": "private static final", "type": "float", "declarator": "HANDLE_WIDTH = 3.0f", "var_name": "HANDLE_WIDTH"}, {"original_string": "@VisibleForTesting\n  static final float HANDLE_HITBOX_WIDTH = 10.0f;", "modifier": "@VisibleForTesting\n  static final", "type": "float", "declarator": "HANDLE_HITBOX_WIDTH = 10.0f", "var_name": "HANDLE_HITBOX_WIDTH"}, {"original_string": "private static final float MIN_HANDLE_DISTANCE = 2.0f;", "modifier": "private static final", "type": "float", "declarator": "MIN_HANDLE_DISTANCE = 2.0f", "var_name": "MIN_HANDLE_DISTANCE"}, {"original_string": "private static final double SELECTION_MOVE_PERCENT = 0.01;", "modifier": "private static final", "type": "double", "declarator": "SELECTION_MOVE_PERCENT = 0.01", "var_name": "SELECTION_MOVE_PERCENT"}, {"original_string": "public static final double CLICK_RANGE_RATIO = 0.003;", "modifier": "public static final", "type": "double", "declarator": "CLICK_RANGE_RATIO = 0.003", "var_name": "CLICK_RANGE_RATIO"}, {"original_string": "private int myMousePressed;", "modifier": "private", "type": "int", "declarator": "myMousePressed", "var_name": "myMousePressed"}, {"original_string": "private int myMouseMovedX;", "modifier": "private", "type": "int", "declarator": "myMouseMovedX", "var_name": "myMouseMovedX"}, {"original_string": "private Mode myMode;", "modifier": "private", "type": "Mode", "declarator": "myMode", "var_name": "myMode"}, {"original_string": "@NotNull\n  private final RangeSelectionModel myModel;", "modifier": "@NotNull\n  private final", "type": "RangeSelectionModel", "declarator": "myModel", "var_name": "myModel"}, {"original_string": "@NotNull\n  private final Range myViewRange;", "modifier": "@NotNull\n  private final", "type": "Range", "declarator": "myViewRange", "var_name": "myViewRange"}, {"original_string": "private boolean myIsMouseOverComponent;", "modifier": "private", "type": "boolean", "declarator": "myIsMouseOverComponent", "var_name": "myIsMouseOverComponent"}, {"original_string": "private boolean myIsPointSelectionReplaced;", "modifier": "private", "type": "boolean", "declarator": "myIsPointSelectionReplaced", "var_name": "myIsPointSelectionReplaced"}, {"original_string": "private int myDragBarHeight = DEFAULT_DRAG_BAR_HEIGHT;", "modifier": "private", "type": "int", "declarator": "myDragBarHeight = DEFAULT_DRAG_BAR_HEIGHT", "var_name": "myDragBarHeight"}], "methods": [{"identifier": "RangeSelectionComponent", "parameters": "(@NotNull RangeSelectionModel model, @NotNull Range viewRange)", "modifiers": "public", "return": "", "signature": " RangeSelectionComponent(@NotNull RangeSelectionModel model, @NotNull Range viewRange)", "full_signature": "public  RangeSelectionComponent(@NotNull RangeSelectionModel model, @NotNull Range viewRange)", "class_method_signature": "RangeSelectionComponent.RangeSelectionComponent(@NotNull RangeSelectionModel model, @NotNull Range viewRange)", "testcase": false, "constructor": true}, {"identifier": "RangeSelectionComponent", "parameters": "(@NotNull RangeSelectionModel model, @NotNull Range viewRange, boolean isPointSelectionReplaced)", "modifiers": "public", "return": "", "signature": " RangeSelectionComponent(@NotNull RangeSelectionModel model, @NotNull Range viewRange, boolean isPointSelectionReplaced)", "full_signature": "public  RangeSelectionComponent(@NotNull RangeSelectionModel model, @NotNull Range viewRange, boolean isPointSelectionReplaced)", "class_method_signature": "RangeSelectionComponent.RangeSelectionComponent(@NotNull RangeSelectionModel model, @NotNull Range viewRange, boolean isPointSelectionReplaced)", "testcase": false, "constructor": true}, {"identifier": "initListeners", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initListeners()", "full_signature": "private void initListeners()", "class_method_signature": "RangeSelectionComponent.initListeners()", "testcase": false, "constructor": false}, {"identifier": "shiftModel", "parameters": "(ShiftDirection direction, boolean zeroMin, boolean zeroMax)", "modifiers": "private", "return": "void", "signature": "void shiftModel(ShiftDirection direction, boolean zeroMin, boolean zeroMax)", "full_signature": "private void shiftModel(ShiftDirection direction, boolean zeroMin, boolean zeroMax)", "class_method_signature": "RangeSelectionComponent.shiftModel(ShiftDirection direction, boolean zeroMin, boolean zeroMax)", "testcase": false, "constructor": false}, {"identifier": "xToRange", "parameters": "(int x)", "modifiers": "private", "return": "double", "signature": "double xToRange(int x)", "full_signature": "private double xToRange(int x)", "class_method_signature": "RangeSelectionComponent.xToRange(int x)", "testcase": false, "constructor": false}, {"identifier": "rangeToX", "parameters": "(double value, Dimension dim)", "modifiers": "private", "return": "float", "signature": "float rangeToX(double value, Dimension dim)", "full_signature": "private float rangeToX(double value, Dimension dim)", "class_method_signature": "RangeSelectionComponent.rangeToX(double value, Dimension dim)", "testcase": false, "constructor": false}, {"identifier": "getModeAtCurrentPosition", "parameters": "(int x, int y)", "modifiers": "private", "return": "Mode", "signature": "Mode getModeAtCurrentPosition(int x, int y)", "full_signature": "private Mode getModeAtCurrentPosition(int x, int y)", "class_method_signature": "RangeSelectionComponent.getModeAtCurrentPosition(int x, int y)", "testcase": false, "constructor": false}, {"identifier": "updateCursor", "parameters": "(Mode newMode, int newX)", "modifiers": "private", "return": "void", "signature": "void updateCursor(Mode newMode, int newX)", "full_signature": "private void updateCursor(Mode newMode, int newX)", "class_method_signature": "RangeSelectionComponent.updateCursor(Mode newMode, int newX)", "testcase": false, "constructor": false}, {"identifier": "addSelectionUpdatedListener", "parameters": "(final Consumer<Range> listener)", "modifiers": "public", "return": "void", "signature": "void addSelectionUpdatedListener(final Consumer<Range> listener)", "full_signature": "public void addSelectionUpdatedListener(final Consumer<Range> listener)", "class_method_signature": "RangeSelectionComponent.addSelectionUpdatedListener(final Consumer<Range> listener)", "testcase": false, "constructor": false}, {"identifier": "getMode", "parameters": "()", "modifiers": "@NotNull public", "return": "Mode", "signature": "Mode getMode()", "full_signature": "@NotNull public Mode getMode()", "class_method_signature": "RangeSelectionComponent.getMode()", "testcase": false, "constructor": false}, {"identifier": "shouldShowSeekComponent", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean shouldShowSeekComponent()", "full_signature": "public boolean shouldShowSeekComponent()", "class_method_signature": "RangeSelectionComponent.shouldShowSeekComponent()", "testcase": false, "constructor": false}, {"identifier": "setDragBarHeight", "parameters": "(int dragBarHeight)", "modifiers": "public", "return": "void", "signature": "void setDragBarHeight(int dragBarHeight)", "full_signature": "public void setDragBarHeight(int dragBarHeight)", "class_method_signature": "RangeSelectionComponent.setDragBarHeight(int dragBarHeight)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g, Dimension dim)", "modifiers": "@Override protected", "return": "void", "signature": "void draw(Graphics2D g, Dimension dim)", "full_signature": "@Override protected void draw(Graphics2D g, Dimension dim)", "class_method_signature": "RangeSelectionComponent.draw(Graphics2D g, Dimension dim)", "testcase": false, "constructor": false}], "file": "adt-ui/src/main/java/com/android/tools/adtui/RangeSelectionComponent.java"}, "focal_method": {"identifier": "draw", "parameters": "(Graphics2D g, Dimension dim)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n  protected void draw(Graphics2D g, Dimension dim) {\n    // Draws if the selection range is fully visible or partially visible; and hide if it is empty or not visible.\n    Range selectionRange = myModel.getSelectionRange();\n    if (selectionRange.isEmpty() || selectionRange.getMin() > myViewRange.getMax() || selectionRange.getMax() < myViewRange.getMin()) {\n      return;\n    }\n    float startXPos = rangeToX(selectionRange.getMin(), dim);\n    float endXPos = rangeToX(selectionRange.getMax(), dim);\n    float handleDistance = endXPos - startXPos - HANDLE_WIDTH * 2;\n    if (handleDistance < MIN_HANDLE_DISTANCE) {\n      // When handles are too close to each other, keep a minimum distance and adjust handle position from the mid-point.\n      // |h|<-min->|h|\n      // s           e\n      //\n      // s: start\n      // e: end\n      // h: handle length\n      // min: min distance between handles\n      handleDistance = MIN_HANDLE_DISTANCE;\n      startXPos = (startXPos + endXPos) / 2 - HANDLE_WIDTH - MIN_HANDLE_DISTANCE / 2;\n      endXPos = startXPos + HANDLE_WIDTH * 2 + MIN_HANDLE_DISTANCE;\n    }\n\n    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n\n    // Draw selection area.\n    g.setColor(StudioColorsKt.getContentSelectionBackground());\n    Rectangle2D.Float rect = new Rectangle2D.Float(startXPos + HANDLE_WIDTH, 0, handleDistance, dim.height);\n    g.fill(rect);\n\n    if (myMouseMovedX > startXPos && myMouseMovedX < endXPos && myIsMouseOverComponent) {\n      g.setColor(DRAG_BAR_COLOR);\n      g.fill(new Rectangle2D.Float(startXPos + HANDLE_WIDTH, 0, handleDistance, myDragBarHeight));\n    }\n\n    // Draw handles.\n    g.setColor(StudioColorsKt.getSelectionBackground());\n    g.fill(new Rectangle2D.Float(startXPos, 0, HANDLE_WIDTH, dim.height));\n    g.fill(new Rectangle2D.Float(endXPos - HANDLE_WIDTH, 0, HANDLE_WIDTH, dim.height));\n  }", "signature": "void draw(Graphics2D g, Dimension dim)", "full_signature": "@Override protected void draw(Graphics2D g, Dimension dim)", "class_method_signature": "RangeSelectionComponent.draw(Graphics2D g, Dimension dim)", "testcase": false, "constructor": false, "invocations": ["getSelectionRange", "isEmpty", "getMin", "getMax", "getMax", "getMin", "rangeToX", "getMin", "rangeToX", "getMax", "setRenderingHint", "setColor", "getContentSelectionBackground", "fill", "setColor", "fill", "setColor", "getSelectionBackground", "fill", "fill"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}