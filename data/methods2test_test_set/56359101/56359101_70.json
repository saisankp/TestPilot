{"test_class": {"identifier": "AllocationAlgorithmBaseTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AllocationAlgorithmBase spyAlgorithm;", "modifier": "private", "type": "AllocationAlgorithmBase", "declarator": "spyAlgorithm", "var_name": "spyAlgorithm"}], "file": "autonomic-allocation-algorithms/src/test/java/br/com/autonomiccs/autonomic/allocation/algorithms/impl/AllocationAlgorithmBaseTest.java"}, "test_case": {"identifier": "cloneListOfHostsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void cloneListOfHostsTest() {\n        List<HostResources> hosts = new ArrayList<HostResources>();\n        HostResources host = Mockito.mock(HostResources.class);\n        hosts.add(host);\n\n        List<HostResources> clonedHosts = spyAlgorithm.cloneListOfHosts(hosts);\n\n        Assert.assertNotNull(clonedHosts);\n        Assert.assertEquals(1, clonedHosts.size());\n        Assert.assertEquals(hosts, clonedHosts);\n        Assert.assertEquals(host, clonedHosts.get(0));\n    }", "signature": "void cloneListOfHostsTest()", "full_signature": "@Test public void cloneListOfHostsTest()", "class_method_signature": "AllocationAlgorithmBaseTest.cloneListOfHostsTest()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "cloneListOfHosts", "assertNotNull", "assertEquals", "size", "assertEquals", "assertEquals", "get"]}, "focal_class": {"identifier": "AllocationAlgorithmBase", "superclass": "", "interfaces": "implements AllocationAlgorithm", "fields": [], "methods": [{"identifier": "cloneListOfClusters", "parameters": "(List<ClusterResourcesAvailableToStart> clusters)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "List<ClusterResourcesAvailableToStart>", "signature": "List<ClusterResourcesAvailableToStart> cloneListOfClusters(List<ClusterResourcesAvailableToStart> clusters)", "full_signature": "@SuppressWarnings(\"unchecked\") protected List<ClusterResourcesAvailableToStart> cloneListOfClusters(List<ClusterResourcesAvailableToStart> clusters)", "class_method_signature": "AllocationAlgorithmBase.cloneListOfClusters(List<ClusterResourcesAvailableToStart> clusters)", "testcase": false, "constructor": false}, {"identifier": "cloneListOfHosts", "parameters": "(List<HostResources> hosts)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "List<HostResources>", "signature": "List<HostResources> cloneListOfHosts(List<HostResources> hosts)", "full_signature": "@SuppressWarnings(\"unchecked\") protected List<HostResources> cloneListOfHosts(List<HostResources> hosts)", "class_method_signature": "AllocationAlgorithmBase.cloneListOfHosts(List<HostResources> hosts)", "testcase": false, "constructor": false}, {"identifier": "rankClustersToAllocation", "parameters": "(List<ClusterResourcesAvailableToStart> clusters)", "modifiers": "@Override public", "return": "List<ClusterResourcesAvailableToStart>", "signature": "List<ClusterResourcesAvailableToStart> rankClustersToAllocation(List<ClusterResourcesAvailableToStart> clusters)", "full_signature": "@Override public List<ClusterResourcesAvailableToStart> rankClustersToAllocation(List<ClusterResourcesAvailableToStart> clusters)", "class_method_signature": "AllocationAlgorithmBase.rankClustersToAllocation(List<ClusterResourcesAvailableToStart> clusters)", "testcase": false, "constructor": false}, {"identifier": "needsToActivateHost", "parameters": "(CloudResources cloudCapacity)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean needsToActivateHost(CloudResources cloudCapacity)", "full_signature": "@Override public boolean needsToActivateHost(CloudResources cloudCapacity)", "class_method_signature": "AllocationAlgorithmBase.needsToActivateHost(CloudResources cloudCapacity)", "testcase": false, "constructor": false}, {"identifier": "rankHostsToStart", "parameters": "(List<HostResources> hostsResources)", "modifiers": "@Override public", "return": "List<HostResources>", "signature": "List<HostResources> rankHostsToStart(List<HostResources> hostsResources)", "full_signature": "@Override public List<HostResources> rankHostsToStart(List<HostResources> hostsResources)", "class_method_signature": "AllocationAlgorithmBase.rankHostsToStart(List<HostResources> hostsResources)", "testcase": false, "constructor": false}], "file": "autonomic-allocation-algorithms/src/main/java/br/com/autonomiccs/autonomic/allocation/algorithms/impl/AllocationAlgorithmBase.java"}, "focal_method": {"identifier": "cloneListOfHosts", "parameters": "(List<HostResources> hosts)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "List<HostResources>", "body": "@SuppressWarnings(\"unchecked\")\n    protected List<HostResources> cloneListOfHosts(List<HostResources> hosts) {\n        return (List<HostResources>) ((ArrayList<HostResources>) hosts).clone();\n    }", "signature": "List<HostResources> cloneListOfHosts(List<HostResources> hosts)", "full_signature": "@SuppressWarnings(\"unchecked\") protected List<HostResources> cloneListOfHosts(List<HostResources> hosts)", "class_method_signature": "AllocationAlgorithmBase.cloneListOfHosts(List<HostResources> hosts)", "testcase": false, "constructor": false, "invocations": ["clone"]}, "repository": {"repo_id": 56359101, "url": "https://github.com/Autonomiccs/autonomiccs-platform", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 944, "license": "licensed"}}