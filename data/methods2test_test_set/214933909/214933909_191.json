{"test_class": {"identifier": "PermissionServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private PermissionService permissionService;", "modifier": "@Mock\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/service/PermissionServiceTest.java"}, "test_case": {"identifier": "isManagerByIdTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isManagerByIdTest() throws Exception {\n        Assert.assertTrue(permissionService.isManagerById(1L));\n    }", "signature": "void isManagerByIdTest()", "full_signature": "@Test public void isManagerByIdTest()", "class_method_signature": "PermissionServiceTest.isManagerByIdTest()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isManagerById"]}, "focal_class": {"identifier": "PermissionService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Getter\n    private static final String ADMIN_NAME = \"admin\";", "modifier": "@Getter\n    private static final", "type": "String", "declarator": "ADMIN_NAME = \"admin\"", "var_name": "ADMIN_NAME"}, {"original_string": "@Getter\n    private static final Long SUPERID = 1L;", "modifier": "@Getter\n    private static final", "type": "Long", "declarator": "SUPERID = 1L", "var_name": "SUPERID"}, {"original_string": "@Getter\n    private static final Long ADMINGROUPID = 1L;", "modifier": "@Getter\n    private static final", "type": "Long", "declarator": "ADMINGROUPID = 1L", "var_name": "ADMINGROUPID"}, {"original_string": "@Autowired\n    private LoginUserDao loginUserDao;", "modifier": "@Autowired\n    private", "type": "LoginUserDao", "declarator": "loginUserDao", "var_name": "loginUserDao"}, {"original_string": "@Autowired\n    private PermissionDao permissionDao;", "modifier": "@Autowired\n    private", "type": "PermissionDao", "declarator": "permissionDao", "var_name": "permissionDao"}], "methods": [{"identifier": "isSuperManagerById", "parameters": "(Long id)", "modifiers": "public", "return": "boolean", "signature": "boolean isSuperManagerById(Long id)", "full_signature": "public boolean isSuperManagerById(Long id)", "class_method_signature": "PermissionService.isSuperManagerById(Long id)", "testcase": false, "constructor": false}, {"identifier": "isSuperManagerByUserNo", "parameters": "(String userNo)", "modifiers": "public", "return": "boolean", "signature": "boolean isSuperManagerByUserNo(String userNo)", "full_signature": "public boolean isSuperManagerByUserNo(String userNo)", "class_method_signature": "PermissionService.isSuperManagerByUserNo(String userNo)", "testcase": false, "constructor": false}, {"identifier": "isNormalSuperManagerById", "parameters": "(Long userId)", "modifiers": "public", "return": "boolean", "signature": "boolean isNormalSuperManagerById(Long userId)", "full_signature": "public boolean isNormalSuperManagerById(Long userId)", "class_method_signature": "PermissionService.isNormalSuperManagerById(Long userId)", "testcase": false, "constructor": false}, {"identifier": "isManagerById", "parameters": "(Long id)", "modifiers": "public", "return": "boolean", "signature": "boolean isManagerById(Long id)", "full_signature": "public boolean isManagerById(Long id)", "class_method_signature": "PermissionService.isManagerById(Long id)", "testcase": false, "constructor": false}, {"identifier": "isGroupManagerById", "parameters": "(Long groupId, Long userId)", "modifiers": "public", "return": "boolean", "signature": "boolean isGroupManagerById(Long groupId, Long userId)", "full_signature": "public boolean isGroupManagerById(Long groupId, Long userId)", "class_method_signature": "PermissionService.isGroupManagerById(Long groupId, Long userId)", "testcase": false, "constructor": false}, {"identifier": "isNormalManagerById", "parameters": "(Long groupId, Long userId)", "modifiers": "public", "return": "boolean", "signature": "boolean isNormalManagerById(Long groupId, Long userId)", "full_signature": "public boolean isNormalManagerById(Long groupId, Long userId)", "class_method_signature": "PermissionService.isNormalManagerById(Long groupId, Long userId)", "testcase": false, "constructor": false}, {"identifier": "isProjectPermission", "parameters": "(Long projectId, Long userId)", "modifiers": "public", "return": "boolean", "signature": "boolean isProjectPermission(Long projectId, Long userId)", "full_signature": "public boolean isProjectPermission(Long projectId, Long userId)", "class_method_signature": "PermissionService.isProjectPermission(Long projectId, Long userId)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/service/PermissionService.java"}, "focal_method": {"identifier": "isManagerById", "parameters": "(Long id)", "modifiers": "public", "return": "boolean", "body": "public boolean isManagerById(Long id) throws SQLException {\n        return isSuperManagerById(id) || isNormalSuperManagerById(id);\n    }", "signature": "boolean isManagerById(Long id)", "full_signature": "public boolean isManagerById(Long id)", "class_method_signature": "PermissionService.isManagerById(Long id)", "testcase": false, "constructor": false, "invocations": ["isSuperManagerById", "isNormalSuperManagerById"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}