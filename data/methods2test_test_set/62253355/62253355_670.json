{"test_class": {"identifier": "MobiOntologyIRIMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MobiOntologyIRIMapper mapper;", "modifier": "private", "type": "MobiOntologyIRIMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private ValueFactory vf = SimpleValueFactory.getInstance();", "modifier": "private", "type": "ValueFactory", "declarator": "vf = SimpleValueFactory.getInstance()", "var_name": "vf"}, {"original_string": "private com.mobi.rdf.api.IRI matIRI = vf.createIRI(\"https://test.com/ontology\");", "modifier": "private", "type": "com.mobi.rdf.api.IRI", "declarator": "matIRI = vf.createIRI(\"https://test.com/ontology\")", "var_name": "matIRI"}, {"original_string": "private IRI owlIRI = IRI.create(\"https://test.com/ontology\");", "modifier": "private", "type": "IRI", "declarator": "owlIRI = IRI.create(\"https://test.com/ontology\")", "var_name": "owlIRI"}, {"original_string": "@Mock\n    private OntologyManager ontologyManager;", "modifier": "@Mock\n    private", "type": "OntologyManager", "declarator": "ontologyManager", "var_name": "ontologyManager"}], "file": "com.mobi.ontology.impl.owlapi/src/test/java/com/mobi/ontology/impl/owlapi/MobiOntologyIRIMapperTest.java"}, "test_case": {"identifier": "getDocumentIRIThatExistsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getDocumentIRIThatExistsTest() throws Exception {\n        // Setup:\n        String recordIRI = \"https://mobi.com/records/test\";\n        when(ontologyManager.getOntologyRecordResource(any(Resource.class))).thenReturn(Optional.of(vf.createIRI(recordIRI)));\n\n        IRI result = mapper.getDocumentIRI(owlIRI);\n        assertNotNull(result);\n        assertEquals(recordIRI.replace(\"https:\", MobiOntologyIRIMapper.protocol), result.getIRIString());\n    }", "signature": "void getDocumentIRIThatExistsTest()", "full_signature": "@Test public void getDocumentIRIThatExistsTest()", "class_method_signature": "MobiOntologyIRIMapperTest.getDocumentIRIThatExistsTest()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getOntologyRecordResource", "any", "of", "createIRI", "getDocumentIRI", "assertNotNull", "assertEquals", "replace", "getIRIString"]}, "focal_class": {"identifier": "MobiOntologyIRIMapper", "superclass": "", "interfaces": "implements OWLOntologyIRIMapper", "fields": [{"original_string": "private OntologyManager manager;", "modifier": "private", "type": "OntologyManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "public static final String protocol = \"mobi:\";", "modifier": "public static final", "type": "String", "declarator": "protocol = \"mobi:\"", "var_name": "protocol"}, {"original_string": "public static final String standardProtocol = \"https:\";", "modifier": "public static final", "type": "String", "declarator": "standardProtocol = \"https:\"", "var_name": "standardProtocol"}], "methods": [{"identifier": "MobiOntologyIRIMapper", "parameters": "(OntologyManager manager)", "modifiers": "public", "return": "", "signature": " MobiOntologyIRIMapper(OntologyManager manager)", "full_signature": "public  MobiOntologyIRIMapper(OntologyManager manager)", "class_method_signature": "MobiOntologyIRIMapper.MobiOntologyIRIMapper(OntologyManager manager)", "testcase": false, "constructor": true}, {"identifier": "getDocumentIRI", "parameters": "(IRI ontologyIRI)", "modifiers": "@Nullable @Override public", "return": "IRI", "signature": "IRI getDocumentIRI(IRI ontologyIRI)", "full_signature": "@Nullable @Override public IRI getDocumentIRI(IRI ontologyIRI)", "class_method_signature": "MobiOntologyIRIMapper.getDocumentIRI(IRI ontologyIRI)", "testcase": false, "constructor": false}], "file": "com.mobi.ontology.impl.owlapi/src/main/java/com/mobi/ontology/impl/owlapi/MobiOntologyIRIMapper.java"}, "focal_method": {"identifier": "getDocumentIRI", "parameters": "(IRI ontologyIRI)", "modifiers": "@Nullable @Override public", "return": "IRI", "body": "@Nullable\n    @Override\n    public IRI getDocumentIRI(IRI ontologyIRI) {\n        Optional<Resource> recordId = manager.getOntologyRecordResource(SimpleOntologyValues.mobiIRI(ontologyIRI));\n        return recordId.map(resource -> IRI.create(resource.stringValue().replace(standardProtocol, protocol))).orElse(null);\n    }", "signature": "IRI getDocumentIRI(IRI ontologyIRI)", "full_signature": "@Nullable @Override public IRI getDocumentIRI(IRI ontologyIRI)", "class_method_signature": "MobiOntologyIRIMapper.getDocumentIRI(IRI ontologyIRI)", "testcase": false, "constructor": false, "invocations": ["getOntologyRecordResource", "mobiIRI", "orElse", "map", "create", "replace", "stringValue"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}