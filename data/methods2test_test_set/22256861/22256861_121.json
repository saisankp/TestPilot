{"test_class": {"identifier": "ValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-slstr-pdu-stitching/src/test/java/org/esa/s3tbx/slstr/pdu/stitching/ValidatorTest.java"}, "test_case": {"identifier": "testValidateOrbitReference_UpdatedOrbitReference", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateOrbitReference_UpdatedOrbitReference() throws ParserConfigurationException, IOException, SAXException {\n        String orbitRef =\n                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                        \"          <sentinel-safe:orbitReference>\\n\" +\n                        \"            <sentinel-safe:orbitNumber groundTrackDirection=\\\"descending\\\" type=\\\"start\\\">30480</sentinel-safe:orbitNumber>\\n\" +\n                        \"            <sentinel-safe:orbitNumber groundTrackDirection=\\\"descending\\\" type=\\\"stop\\\">30480</sentinel-safe:orbitNumber>\\n\" +\n                        \"            <sentinel-safe:relativeOrbitNumber groundTrackDirection=\\\"descending\\\" type=\\\"start\\\">366</sentinel-safe:relativeOrbitNumber>\\n\" +\n                        \"            <sentinel-safe:relativeOrbitNumber groundTrackDirection=\\\"descending\\\" type=\\\"stop\\\">366</sentinel-safe:relativeOrbitNumber>\\n\" +\n                        \"            <sentinel-safe:passNumber groundTrackDirection=\\\"descending\\\" type=\\\"start\\\">60960</sentinel-safe:passNumber>\\n\" +\n                        \"            <sentinel-safe:passNumber groundTrackDirection=\\\"descending\\\" type=\\\"stop\\\">60960</sentinel-safe:passNumber>\\n\" +\n                        \"            <sentinel-safe:relativePassNumber groundTrackDirection=\\\"descending\\\" type=\\\"start\\\">732</sentinel-safe:relativePassNumber>\\n\" +\n                        \"            <sentinel-safe:relativePassNumber groundTrackDirection=\\\"descending\\\" type=\\\"stop\\\">732</sentinel-safe:relativePassNumber>\\n\" +\n                        \"            <sentinel-safe:cycleNumber>64</sentinel-safe:cycleNumber>\\n\" +\n                        \"            <sentinel-safe:phaseIdentifier>2</sentinel-safe:phaseIdentifier>\\n\" +\n                        \"            <sentinel-safe:elementSet>\\n\" +\n                        \"              <sentinel-safe:ephemeris>\\n\" +\n                        \"                <sentinel-safe:epoch type=\\\"UTC\\\">2007-12-29T09:58:03.535647Z</sentinel-safe:epoch>\\n\" +\n                        \"                <sentinel-safe:epoch type=\\\"UT1\\\">2007-12-29T09:58:04.146807</sentinel-safe:epoch>\\n\" +\n                        \"                <sentinel-safe:epoch type=\\\"TAI\\\">2007-12-29T09:57:31.535647</sentinel-safe:epoch>\\n\" +\n                        \"                <sentinel-safe:position>\\n\" +\n                        \"                  <sentinel-safe:x>-7165034.298974</sentinel-safe:x>\\n\" +\n                        \"                  <sentinel-safe:y>-61030.468280</sentinel-safe:y>\\n\" +\n                        \"                  <sentinel-safe:z>-0.002899</sentinel-safe:z>\\n\" +\n                        \"                </sentinel-safe:position>\\n\" +\n                        \"                <sentinel-safe:velocity>\\n\" +\n                        \"                  <sentinel-safe:x>-5.201120</sentinel-safe:x>\\n\" +\n                        \"                  <sentinel-safe:y>1630.872964</sentinel-safe:y>\\n\" +\n                        \"                  <sentinel-safe:z>7377.385722</sentinel-safe:z>\\n\" +\n                        \"                </sentinel-safe:velocity>\\n\" +\n                        \"              </sentinel-safe:ephemeris>\\n\" +\n                        \"              <sentinel-safe:ephemeris>\\n\" +\n                        \"                <sentinel-safe:epoch type=\\\"UTC\\\">2007-12-29T11:38:39.463791Z</sentinel-safe:epoch>\\n\" +\n                        \"                <sentinel-safe:epoch type=\\\"UT1\\\">2007-12-29T11:38:40.074951</sentinel-safe:epoch>\\n\" +\n                        \"                <sentinel-safe:epoch type=\\\"TAI\\\">2007-12-29T11:38:07.463791</sentinel-safe:epoch>\\n\" +\n                        \"                <sentinel-safe:position>\\n\" +\n                        \"                  <sentinel-safe:x>-6511729.587356</sentinel-safe:x>\\n\" +\n                        \"                  <sentinel-safe:y>2989785.779058</sentinel-safe:y>\\n\" +\n                        \"                  <sentinel-safe:z>-0.000870</sentinel-safe:z>\\n\" +\n                        \"                </sentinel-safe:position>\\n\" +\n                        \"                <sentinel-safe:velocity>\\n\" +\n                        \"                  <sentinel-safe:x>688.388148</sentinel-safe:x>\\n\" +\n                        \"                  <sentinel-safe:y>1478.477404</sentinel-safe:y>\\n\" +\n                        \"                  <sentinel-safe:z>7377.385722</sentinel-safe:z>\\n\" +\n                        \"                </sentinel-safe:velocity>\\n\" +\n                        \"              </sentinel-safe:ephemeris>\\n\" +\n                        \"            </sentinel-safe:elementSet>\\n\" +\n                        \"          </sentinel-safe:orbitReference>\";\n        Document[] manifests = new Document[2];\n        final DocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n        manifests[0] = documentBuilder.parse(new InputSource(new ByteArrayInputStream(orbitRef.getBytes(\"utf-8\"))));\n        manifests[1] = documentBuilder.parse(new InputSource(new ByteArrayInputStream(orbitRef.getBytes(\"utf-8\"))));\n        try {\n            Validator.validateOrbitReference(manifests);\n        } catch (PDUStitchingException e) {\n            fail(\"No exception expected\");\n        }\n    }", "signature": "void testValidateOrbitReference_UpdatedOrbitReference()", "full_signature": "@Test public void testValidateOrbitReference_UpdatedOrbitReference()", "class_method_signature": "ValidatorTest.testValidateOrbitReference_UpdatedOrbitReference()", "testcase": true, "constructor": false, "invocations": ["newDocumentBuilder", "newInstance", "parse", "getBytes", "parse", "getBytes", "validateOrbitReference", "fail"]}, "focal_class": {"identifier": "Validator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SLSTR_L1B_NAME_PATTERN = \"S3.?_SL_1_RBT_.*(.SEN3)?\";", "modifier": "private static final", "type": "String", "declarator": "SLSTR_L1B_NAME_PATTERN = \"S3.?_SL_1_RBT_.*(.SEN3)?\"", "var_name": "SLSTR_L1B_NAME_PATTERN"}], "methods": [{"identifier": "validate", "parameters": "(File[] manifestFiles)", "modifiers": "public static", "return": "void", "signature": "void validate(File[] manifestFiles)", "full_signature": "public static void validate(File[] manifestFiles)", "class_method_signature": "Validator.validate(File[] manifestFiles)", "testcase": false, "constructor": false}, {"identifier": "validateSlstrProductFiles", "parameters": "(File[] slstrProductFiles)", "modifiers": "static", "return": "void", "signature": "void validateSlstrProductFiles(File[] slstrProductFiles)", "full_signature": "static void validateSlstrProductFiles(File[] slstrProductFiles)", "class_method_signature": "Validator.validateSlstrProductFiles(File[] slstrProductFiles)", "testcase": false, "constructor": false}, {"identifier": "validateOrbitReference", "parameters": "(Document[] manifests)", "modifiers": "static", "return": "void", "signature": "void validateOrbitReference(Document[] manifests)", "full_signature": "static void validateOrbitReference(Document[] manifests)", "class_method_signature": "Validator.validateOrbitReference(Document[] manifests)", "testcase": false, "constructor": false}, {"identifier": "validateAdjacency", "parameters": "(Document[] manifests)", "modifiers": "static", "return": "void", "signature": "void validateAdjacency(Document[] manifests)", "full_signature": "static void validateAdjacency(Document[] manifests)", "class_method_signature": "Validator.validateAdjacency(Document[] manifests)", "testcase": false, "constructor": false}], "file": "s3tbx-slstr-pdu-stitching/src/main/java/org/esa/s3tbx/slstr/pdu/stitching/Validator.java"}, "focal_method": {"identifier": "validateOrbitReference", "parameters": "(Document[] manifests)", "modifiers": "static", "return": "void", "body": "static void validateOrbitReference(Document[] manifests) throws PDUStitchingException {\n        if (manifests.length < 2) {\n            return;\n        }\n        String[] tagNames = new String[]{\"sentinel-safe:orbitNumber\", \"sentinel-safe:relativeOrbitNumber\",\n                \"sentinel-safe:passNumber\", \"sentinel-safe:relativePassNumber\",\n                \"sentinel-safe:cycleNumber\", \"sentinel-safe:phaseIdentifier\",\n                \"sentinel-safe:epoch\", \"sentinel-safe:x\", \"sentinel-safe:y\", \"sentinel-safe:z\"\n        };\n        for (String tagName : tagNames) {\n            final NodeList referenceNodes = manifests[0].getElementsByTagName(tagName);\n            for (int j = 1; j < manifests.length; j++) {\n                final NodeList testNodes = manifests[j].getElementsByTagName(tagName);\n                if (referenceNodes.getLength() != testNodes.getLength()) {\n                    throw new PDUStitchingException(\"Invalid orbit reference due to different element \" + tagName);\n                }\n                for (int k = 0; k < referenceNodes.getLength(); k++) {\n                    referenceNodes.item(k).normalize();\n                    testNodes.item(k).normalize();\n                    if (!referenceNodes.item(k).isEqualNode(testNodes.item(k))) {\n                        throw new PDUStitchingException(\"Invalid orbit reference due to different element \" + tagName);\n                    }\n                }\n            }\n        }\n    }", "signature": "void validateOrbitReference(Document[] manifests)", "full_signature": "static void validateOrbitReference(Document[] manifests)", "class_method_signature": "Validator.validateOrbitReference(Document[] manifests)", "testcase": false, "constructor": false, "invocations": ["getElementsByTagName", "getElementsByTagName", "getLength", "getLength", "getLength", "normalize", "item", "normalize", "item", "isEqualNode", "item", "item"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}