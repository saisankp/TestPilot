{"test_class": {"identifier": "KStreamBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private KStreamTestDriver driver = null;", "modifier": "private", "type": "KStreamTestDriver", "declarator": "driver = null", "var_name": "driver"}], "file": "streams/src/test/java/org/apache/kafka/streams/kstream/KStreamBuilderTest.java"}, "test_case": {"identifier": "testMerge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMerge() {\n        String topic1 = \"topic-1\";\n        String topic2 = \"topic-2\";\n\n        KStreamBuilder builder = new KStreamBuilder();\n\n        KStream<String, String> source1 = builder.stream(topic1);\n        KStream<String, String> source2 = builder.stream(topic2);\n        KStream<String, String> merged = builder.merge(source1, source2);\n\n        MockProcessorSupplier<String, String> processorSupplier = new MockProcessorSupplier<>();\n        merged.process(processorSupplier);\n\n        driver = new KStreamTestDriver(builder);\n        driver.setTime(0L);\n\n        driver.process(topic1, \"A\", \"aa\");\n        driver.process(topic2, \"B\", \"bb\");\n        driver.process(topic2, \"C\", \"cc\");\n        driver.process(topic1, \"D\", \"dd\");\n\n        assertEquals(Utils.mkList(\"A:aa\", \"B:bb\", \"C:cc\", \"D:dd\"), processorSupplier.processed);\n    }", "signature": "void testMerge()", "full_signature": "@Test public void testMerge()", "class_method_signature": "KStreamBuilderTest.testMerge()", "testcase": true, "constructor": false, "invocations": ["stream", "stream", "merge", "process", "setTime", "process", "process", "process", "process", "assertEquals", "mkList"]}, "focal_class": {"identifier": "KStreamBuilder", "superclass": "extends TopologyBuilder", "interfaces": "", "fields": [{"original_string": "private final AtomicInteger index = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "index = new AtomicInteger(0)", "var_name": "index"}], "methods": [{"identifier": "KStreamBuilder", "parameters": "()", "modifiers": "public", "return": "", "signature": " KStreamBuilder()", "full_signature": "public  KStreamBuilder()", "class_method_signature": "KStreamBuilder.KStreamBuilder()", "testcase": false, "constructor": true}, {"identifier": "stream", "parameters": "(String... topics)", "modifiers": "public", "return": "KStream<K, V>", "signature": "KStream<K, V> stream(String... topics)", "full_signature": "public KStream<K, V> stream(String... topics)", "class_method_signature": "KStreamBuilder.stream(String... topics)", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "(Serde<K> keySerde, Serde<V> valSerde, String... topics)", "modifiers": "public", "return": "KStream<K, V>", "signature": "KStream<K, V> stream(Serde<K> keySerde, Serde<V> valSerde, String... topics)", "full_signature": "public KStream<K, V> stream(Serde<K> keySerde, Serde<V> valSerde, String... topics)", "class_method_signature": "KStreamBuilder.stream(Serde<K> keySerde, Serde<V> valSerde, String... topics)", "testcase": false, "constructor": false}, {"identifier": "table", "parameters": "(String topic)", "modifiers": "public", "return": "KTable<K, V>", "signature": "KTable<K, V> table(String topic)", "full_signature": "public KTable<K, V> table(String topic)", "class_method_signature": "KStreamBuilder.table(String topic)", "testcase": false, "constructor": false}, {"identifier": "table", "parameters": "(Serde<K> keySerde, Serde<V> valSerde, String topic)", "modifiers": "public", "return": "KTable<K, V>", "signature": "KTable<K, V> table(Serde<K> keySerde, Serde<V> valSerde, String topic)", "full_signature": "public KTable<K, V> table(Serde<K> keySerde, Serde<V> valSerde, String topic)", "class_method_signature": "KStreamBuilder.table(Serde<K> keySerde, Serde<V> valSerde, String topic)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(KStream<K, V>... streams)", "modifiers": "public", "return": "KStream<K, V>", "signature": "KStream<K, V> merge(KStream<K, V>... streams)", "full_signature": "public KStream<K, V> merge(KStream<K, V>... streams)", "class_method_signature": "KStreamBuilder.merge(KStream<K, V>... streams)", "testcase": false, "constructor": false}, {"identifier": "newName", "parameters": "(String prefix)", "modifiers": "public", "return": "String", "signature": "String newName(String prefix)", "full_signature": "public String newName(String prefix)", "class_method_signature": "KStreamBuilder.newName(String prefix)", "testcase": false, "constructor": false}], "file": "streams/src/main/java/org/apache/kafka/streams/kstream/KStreamBuilder.java"}, "focal_method": {"identifier": "merge", "parameters": "(KStream<K, V>... streams)", "modifiers": "public", "return": "KStream<K, V>", "body": "public <K, V> KStream<K, V> merge(KStream<K, V>... streams) {\n        return KStreamImpl.merge(this, streams);\n    }", "signature": "KStream<K, V> merge(KStream<K, V>... streams)", "full_signature": "public KStream<K, V> merge(KStream<K, V>... streams)", "class_method_signature": "KStreamBuilder.merge(KStream<K, V>... streams)", "testcase": false, "constructor": false, "invocations": ["merge"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}