{"test_class": {"identifier": "StringTemplateFunctionTest", "superclass": "extends SEFunctionTestBase", "interfaces": "", "fields": [{"original_string": "private Literal fallback;", "modifier": "private", "type": "Literal", "declarator": "fallback", "var_name": "fallback"}], "file": "modules/library/main/src/test/java/org/geotools/filter/function/StringTemplateFunctionTest.java"}, "test_case": {"identifier": "testConcatenate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConcatenate() {\n        parameters.add(ff2.literal(\"123\"));\n        parameters.add(ff2.literal(\".*\"));\n        parameters.add(ff2.literal(\"start${0}end\"));\n\n        Function fn = finder.findFunction(\"stringTemplate\", parameters, fallback);\n        Object result = fn.evaluate(null);\n\n        assertEquals(\"start123end\", result);\n    }", "signature": "void testConcatenate()", "full_signature": "@Test public void testConcatenate()", "class_method_signature": "StringTemplateFunctionTest.testConcatenate()", "testcase": true, "constructor": false, "invocations": ["add", "literal", "add", "literal", "add", "literal", "findFunction", "evaluate", "assertEquals"]}, "focal_class": {"identifier": "StringTemplateFunction", "superclass": "", "interfaces": "implements Function", "fields": [{"original_string": "private final List<Expression> parameters;", "modifier": "private final", "type": "List<Expression>", "declarator": "parameters", "var_name": "parameters"}, {"original_string": "private Pattern staticPattern;", "modifier": "private", "type": "Pattern", "declarator": "staticPattern", "var_name": "staticPattern"}, {"original_string": "private final Literal fallback;", "modifier": "private final", "type": "Literal", "declarator": "fallback", "var_name": "fallback"}, {"original_string": "volatile Object[] convertedValues;", "modifier": "volatile", "type": "Object[]", "declarator": "convertedValues", "var_name": "convertedValues"}, {"original_string": "public static final FunctionName NAME = new FunctionNameImpl(\"stringTemplate\", \"input\",\n            \"pattern\", \"template\", \"defaultValue\");", "modifier": "public static final", "type": "FunctionName", "declarator": "NAME = new FunctionNameImpl(\"stringTemplate\", \"input\",\n            \"pattern\", \"template\", \"defaultValue\")", "var_name": "NAME"}], "methods": [{"identifier": "StringTemplateFunction", "parameters": "()", "modifiers": "public", "return": "", "signature": " StringTemplateFunction()", "full_signature": "public  StringTemplateFunction()", "class_method_signature": "StringTemplateFunction.StringTemplateFunction()", "testcase": false, "constructor": true}, {"identifier": "StringTemplateFunction", "parameters": "(List<Expression> parameters, Literal fallback)", "modifiers": "public", "return": "", "signature": " StringTemplateFunction(List<Expression> parameters, Literal fallback)", "full_signature": "public  StringTemplateFunction(List<Expression> parameters, Literal fallback)", "class_method_signature": "StringTemplateFunction.StringTemplateFunction(List<Expression> parameters, Literal fallback)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "StringTemplateFunction.getName()", "testcase": false, "constructor": false}, {"identifier": "getFunctionName", "parameters": "()", "modifiers": "public", "return": "FunctionName", "signature": "FunctionName getFunctionName()", "full_signature": "public FunctionName getFunctionName()", "class_method_signature": "StringTemplateFunction.getFunctionName()", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "public", "return": "List<Expression>", "signature": "List<Expression> getParameters()", "full_signature": "public List<Expression> getParameters()", "class_method_signature": "StringTemplateFunction.getParameters()", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(ExpressionVisitor visitor, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object accept(ExpressionVisitor visitor, Object extraData)", "full_signature": "public Object accept(ExpressionVisitor visitor, Object extraData)", "class_method_signature": "StringTemplateFunction.accept(ExpressionVisitor visitor, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Object object)", "modifiers": "public", "return": "Object", "signature": "Object evaluate(Object object)", "full_signature": "public Object evaluate(Object object)", "class_method_signature": "StringTemplateFunction.evaluate(Object object)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Object object, Class<T> context)", "modifiers": "public", "return": "T", "signature": "T evaluate(Object object, Class<T> context)", "full_signature": "public T evaluate(Object object, Class<T> context)", "class_method_signature": "StringTemplateFunction.evaluate(Object object, Class<T> context)", "testcase": false, "constructor": false}, {"identifier": "applyTemplate", "parameters": "(String template, Matcher matcher)", "modifiers": "private", "return": "String", "signature": "String applyTemplate(String template, Matcher matcher)", "full_signature": "private String applyTemplate(String template, Matcher matcher)", "class_method_signature": "StringTemplateFunction.applyTemplate(String template, Matcher matcher)", "testcase": false, "constructor": false}, {"identifier": "getPattern", "parameters": "(Object object)", "modifiers": "private", "return": "Pattern", "signature": "Pattern getPattern(Object object)", "full_signature": "private Pattern getPattern(Object object)", "class_method_signature": "StringTemplateFunction.getPattern(Object object)", "testcase": false, "constructor": false}, {"identifier": "getFallbackValue", "parameters": "()", "modifiers": "public", "return": "Literal", "signature": "Literal getFallbackValue()", "full_signature": "public Literal getFallbackValue()", "class_method_signature": "StringTemplateFunction.getFallbackValue()", "testcase": false, "constructor": false}], "file": "modules/library/main/src/main/java/org/geotools/filter/function/StringTemplateFunction.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(Object object)", "modifiers": "public", "return": "Object", "body": "public Object evaluate(Object object) {\n        return evaluate(object, Object.class);\n    }", "signature": "Object evaluate(Object object)", "full_signature": "public Object evaluate(Object object)", "class_method_signature": "StringTemplateFunction.evaluate(Object object)", "testcase": false, "constructor": false, "invocations": ["evaluate"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}