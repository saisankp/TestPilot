{"test_class": {"identifier": "RequestBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "crescent_core_web/src/test/java/com/tistory/devyongsik/crescent/search/entity/RequestBuilderTest.java"}, "test_case": {"identifier": "searchField", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void searchField() throws Exception {\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\trequest.setParameter(\"search_field\", \"title, contents\");\n\t\t\n\t\tRequestBuilder<SearchRequest> builder = new RequestBuilder<SearchRequest>();\n\t\tSearchRequest searchRequest = builder.mappingRequestParam(request, SearchRequest.class);\n\t\t\n\t\tAssert.assertEquals(\"title, contents\", searchRequest.getSearchField());\n\t}", "signature": "void searchField()", "full_signature": "@Test public void searchField()", "class_method_signature": "RequestBuilderTest.searchField()", "testcase": true, "constructor": false, "invocations": ["setParameter", "mappingRequestParam", "assertEquals", "getSearchField"]}, "focal_class": {"identifier": "RequestBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(RequestBuilder.class);", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RequestBuilder.class)", "var_name": "logger"}], "methods": [{"identifier": "mappingRequestParam", "parameters": "(HttpServletRequest request, Class<T> clazz)", "modifiers": "public", "return": "T", "signature": "T mappingRequestParam(HttpServletRequest request, Class<T> clazz)", "full_signature": "public T mappingRequestParam(HttpServletRequest request, Class<T> clazz)", "class_method_signature": "RequestBuilder.mappingRequestParam(HttpServletRequest request, Class<T> clazz)", "testcase": false, "constructor": false}], "file": "crescent_core_web/src/main/java/com/tistory/devyongsik/crescent/search/entity/RequestBuilder.java"}, "focal_method": {"identifier": "mappingRequestParam", "parameters": "(HttpServletRequest request, Class<T> clazz)", "modifiers": "public", "return": "T", "body": "public T mappingRequestParam(HttpServletRequest request, Class<T> clazz) throws Exception {\n\t\t\n\t\tT returnObject = clazz.newInstance();\n\t\t\n\t\tField[] fields = clazz.getDeclaredFields();\n\t\t\n\t\tBeanWrapperImpl beanWrapperImpl = new BeanWrapperImpl(returnObject);\n\t\t\n\t\tfor(Field field : fields) {\n\t\t\t\n\t\t\tRequestParamName requestParamName = field.getAnnotation(RequestParamName.class);\n\t\t\t\n\t\t\tString paramName = null;\n\t\t\tString paramValue = null;\n\t\t\t\n\t\t\tif(requestParamName != null) {\n\t\t\t\tparamName = requestParamName.name();\n\t\t\t\t\n\t\t\t\tparamValue = request.getParameter(paramName);\n\t\t\t\t\n\t\t\t\tif(paramValue == null) {\n\t\t\t\t\tparamValue = requestParamName.defaultValue();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tparamValue = URLDecoder.decode(paramValue, \"utf-8\");\n\t\t\t}\n\t\t\t\n\t\t\tlogger.debug(\"field name : {}, paramName : {}, defaultValue : {}\", new Object[]{field.getName(), paramName, paramValue});\n\t\t\t\n\t\t\tbeanWrapperImpl.setPropertyValue(field.getName(), paramValue);\n\t\t}\n\t\t\n\t\tbeanWrapperImpl.setPropertyValue(\"userIp\", request.getRemoteAddr());\n\t\t\n\t\treturn returnObject;\n\t}", "signature": "T mappingRequestParam(HttpServletRequest request, Class<T> clazz)", "full_signature": "public T mappingRequestParam(HttpServletRequest request, Class<T> clazz)", "class_method_signature": "RequestBuilder.mappingRequestParam(HttpServletRequest request, Class<T> clazz)", "testcase": false, "constructor": false, "invocations": ["newInstance", "getDeclaredFields", "getAnnotation", "name", "getParameter", "defaultValue", "decode", "debug", "getName", "setPropertyValue", "getName", "setPropertyValue", "getRemoteAddr"]}, "repository": {"repo_id": 5426789, "url": "https://github.com/need4spd/crescent", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 15, "size": 50982, "license": "licensed"}}