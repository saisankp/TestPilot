{"test_class": {"identifier": "DSpaceConfigurationServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DSpaceConfigurationService configurationService;", "modifier": "", "type": "DSpaceConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "int numPropsLoaded;", "modifier": "", "type": "int", "declarator": "numPropsLoaded", "var_name": "numPropsLoaded"}], "file": "dspace-services/src/test/java/org/dspace/servicemanager/config/DSpaceConfigurationServiceTest.java"}, "test_case": {"identifier": "testGetPropertyAsTypeStringClassOfT", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPropertyAsTypeStringClassOfT() {\n        String prop = configurationService.getPropertyAsType(\"service.name\", String.class);\n        assertNotNull(prop);\n        assertEquals(\"DSpace\", prop);\n\n        String[] array = configurationService.getPropertyAsType(\"sample.array\", String[].class);\n        assertNotNull(array);\n        assertEquals(\"itemA\", array[0]);\n        assertEquals(\"itemB\", array[1]);\n        assertEquals(\"itemC\", array[2]);\n        Integer number = configurationService.getPropertyAsType(\"sample.number\", Integer.class);\n        assertNotNull(number);\n        assertEquals(new Integer(123), number);\n\n        Boolean bool = configurationService.getPropertyAsType(\"sample.boolean\", Boolean.class);\n        assertNotNull(bool);\n        assertEquals(Boolean.TRUE, bool);\n\n        Boolean bool2 = configurationService.getPropertyAsType(\"INVALID.PROPERTY\", Boolean.class);\n        assertNotNull(bool2);\n        assertEquals(Boolean.FALSE, bool2);\n\n        boolean bool3 = configurationService.getPropertyAsType(\"INVALID.PROPERTY\", boolean.class);\n        assertNotNull(bool3);\n        assertEquals(false, bool3);\n\n        assertEquals(123, (int) configurationService.getPropertyAsType(\"sample.number\", int.class) );\n        assertEquals(true, (boolean) configurationService.getPropertyAsType(\"sample.boolean\", boolean.class) );\n\n        prop = configurationService.getPropertyAsType(\"XXXXX\", String.class);\n        assertNull(prop);\n        prop = null;\n    }", "signature": "void testGetPropertyAsTypeStringClassOfT()", "full_signature": "@Test public void testGetPropertyAsTypeStringClassOfT()", "class_method_signature": "DSpaceConfigurationServiceTest.testGetPropertyAsTypeStringClassOfT()", "testcase": true, "constructor": false, "invocations": ["getPropertyAsType", "assertNotNull", "assertEquals", "getPropertyAsType", "assertNotNull", "assertEquals", "assertEquals", "assertEquals", "getPropertyAsType", "assertNotNull", "assertEquals", "getPropertyAsType", "assertNotNull", "assertEquals", "getPropertyAsType", "assertNotNull", "assertEquals", "getPropertyAsType", "assertNotNull", "assertEquals", "assertEquals", "getPropertyAsType", "assertEquals", "getPropertyAsType", "getPropertyAsType", "assertNull"]}, "focal_class": {"identifier": "DSpaceConfigurationService", "superclass": "", "interfaces": "implements ConfigurationService", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DSpaceConfigurationService.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DSpaceConfigurationService.class)", "var_name": "log"}, {"original_string": "public static final String DSPACE = \"dspace\";", "modifier": "public static final", "type": "String", "declarator": "DSPACE = \"dspace\"", "var_name": "DSPACE"}, {"original_string": "public static final String EXT_CONFIG = \"cfg\";", "modifier": "public static final", "type": "String", "declarator": "EXT_CONFIG = \"cfg\"", "var_name": "EXT_CONFIG"}, {"original_string": "public static final String DOT_CONFIG = \".\" + EXT_CONFIG;", "modifier": "public static final", "type": "String", "declarator": "DOT_CONFIG = \".\" + EXT_CONFIG", "var_name": "DOT_CONFIG"}, {"original_string": "public static final String DSPACE_HOME = DSPACE + \".dir\";", "modifier": "public static final", "type": "String", "declarator": "DSPACE_HOME = DSPACE + \".dir\"", "var_name": "DSPACE_HOME"}, {"original_string": "public static final String DEFAULT_CONFIG_DIR = \"config\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_CONFIG_DIR = \"config\"", "var_name": "DEFAULT_CONFIG_DIR"}, {"original_string": "public static final String DEFAULT_CONFIG_DEFINITION_FILE = \"config-definition.xml\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_CONFIG_DEFINITION_FILE = \"config-definition.xml\"", "var_name": "DEFAULT_CONFIG_DEFINITION_FILE"}, {"original_string": "public static final String DSPACE_CONFIG_DEFINITION_PATH = DEFAULT_CONFIG_DIR + File.separatorChar + DEFAULT_CONFIG_DEFINITION_FILE;", "modifier": "public static final", "type": "String", "declarator": "DSPACE_CONFIG_DEFINITION_PATH = DEFAULT_CONFIG_DIR + File.separatorChar + DEFAULT_CONFIG_DEFINITION_FILE", "var_name": "DSPACE_CONFIG_DEFINITION_PATH"}, {"original_string": "public static final String DSPACE_CONFIG_PATH = DEFAULT_CONFIG_DIR + File.separatorChar + DSPACE + DOT_CONFIG;", "modifier": "public static final", "type": "String", "declarator": "DSPACE_CONFIG_PATH = DEFAULT_CONFIG_DIR + File.separatorChar + DSPACE + DOT_CONFIG", "var_name": "DSPACE_CONFIG_PATH"}, {"original_string": "public static final String DSPACE_SERVER_ID = \"serverId\";", "modifier": "public static final", "type": "String", "declarator": "DSPACE_SERVER_ID = \"serverId\"", "var_name": "DSPACE_SERVER_ID"}, {"original_string": "private DefaultConfigurationBuilder configurationBuilder = null;", "modifier": "private", "type": "DefaultConfigurationBuilder", "declarator": "configurationBuilder = null", "var_name": "configurationBuilder"}, {"original_string": "private Configuration configuration = null;", "modifier": "private", "type": "Configuration", "declarator": "configuration = null", "var_name": "configuration"}, {"original_string": "private String homePath = null;", "modifier": "private", "type": "String", "declarator": "homePath = null", "var_name": "homePath"}], "methods": [{"identifier": "DSpaceConfigurationService", "parameters": "()", "modifiers": "public", "return": "", "signature": " DSpaceConfigurationService()", "full_signature": "public  DSpaceConfigurationService()", "class_method_signature": "DSpaceConfigurationService.DSpaceConfigurationService()", "testcase": false, "constructor": true}, {"identifier": "DSpaceConfigurationService", "parameters": "(String providedHome)", "modifiers": "public", "return": "", "signature": " DSpaceConfigurationService(String providedHome)", "full_signature": "public  DSpaceConfigurationService(String providedHome)", "class_method_signature": "DSpaceConfigurationService.DSpaceConfigurationService(String providedHome)", "testcase": false, "constructor": true}, {"identifier": "getProperties", "parameters": "()", "modifiers": "@Override public", "return": "Properties", "signature": "Properties getProperties()", "full_signature": "@Override public Properties getProperties()", "class_method_signature": "DSpaceConfigurationService.getProperties()", "testcase": false, "constructor": false}, {"identifier": "getPropertyKeys", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getPropertyKeys()", "full_signature": "@Override public List<String> getPropertyKeys()", "class_method_signature": "DSpaceConfigurationService.getPropertyKeys()", "testcase": false, "constructor": false}, {"identifier": "getPropertyKeys", "parameters": "(String prefix)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getPropertyKeys(String prefix)", "full_signature": "@Override public List<String> getPropertyKeys(String prefix)", "class_method_signature": "DSpaceConfigurationService.getPropertyKeys(String prefix)", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "@Override public", "return": "Configuration", "signature": "Configuration getConfiguration()", "full_signature": "@Override public Configuration getConfiguration()", "class_method_signature": "DSpaceConfigurationService.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getPropertyValue", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getPropertyValue(String name)", "full_signature": "@Override public Object getPropertyValue(String name)", "class_method_signature": "DSpaceConfigurationService.getPropertyValue(String name)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(String name)", "modifiers": "@Override public", "return": "String", "signature": "String getProperty(String name)", "full_signature": "@Override public String getProperty(String name)", "class_method_signature": "DSpaceConfigurationService.getProperty(String name)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(String name, String defaultValue)", "modifiers": "@Override public", "return": "String", "signature": "String getProperty(String name, String defaultValue)", "full_signature": "@Override public String getProperty(String name, String defaultValue)", "class_method_signature": "DSpaceConfigurationService.getProperty(String name, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getArrayProperty", "parameters": "(String name)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getArrayProperty(String name)", "full_signature": "@Override public String[] getArrayProperty(String name)", "class_method_signature": "DSpaceConfigurationService.getArrayProperty(String name)", "testcase": false, "constructor": false}, {"identifier": "getArrayProperty", "parameters": "(String name, String[] defaultValue)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getArrayProperty(String name, String[] defaultValue)", "full_signature": "@Override public String[] getArrayProperty(String name, String[] defaultValue)", "class_method_signature": "DSpaceConfigurationService.getArrayProperty(String name, String[] defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getBooleanProperty", "parameters": "(String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getBooleanProperty(String name)", "full_signature": "@Override public boolean getBooleanProperty(String name)", "class_method_signature": "DSpaceConfigurationService.getBooleanProperty(String name)", "testcase": false, "constructor": false}, {"identifier": "getBooleanProperty", "parameters": "(String name, boolean defaultValue)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getBooleanProperty(String name, boolean defaultValue)", "full_signature": "@Override public boolean getBooleanProperty(String name, boolean defaultValue)", "class_method_signature": "DSpaceConfigurationService.getBooleanProperty(String name, boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getIntProperty", "parameters": "(String name)", "modifiers": "@Override public", "return": "int", "signature": "int getIntProperty(String name)", "full_signature": "@Override public int getIntProperty(String name)", "class_method_signature": "DSpaceConfigurationService.getIntProperty(String name)", "testcase": false, "constructor": false}, {"identifier": "getIntProperty", "parameters": "(String name, int defaultValue)", "modifiers": "@Override public", "return": "int", "signature": "int getIntProperty(String name, int defaultValue)", "full_signature": "@Override public int getIntProperty(String name, int defaultValue)", "class_method_signature": "DSpaceConfigurationService.getIntProperty(String name, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getLongProperty", "parameters": "(String name)", "modifiers": "@Override public", "return": "long", "signature": "long getLongProperty(String name)", "full_signature": "@Override public long getLongProperty(String name)", "class_method_signature": "DSpaceConfigurationService.getLongProperty(String name)", "testcase": false, "constructor": false}, {"identifier": "getLongProperty", "parameters": "(String name, long defaultValue)", "modifiers": "@Override public", "return": "long", "signature": "long getLongProperty(String name, long defaultValue)", "full_signature": "@Override public long getLongProperty(String name, long defaultValue)", "class_method_signature": "DSpaceConfigurationService.getLongProperty(String name, long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getPropertyAsType", "parameters": "(String name, Class<T> type)", "modifiers": "@Override public", "return": "T", "signature": "T getPropertyAsType(String name, Class<T> type)", "full_signature": "@Override public T getPropertyAsType(String name, Class<T> type)", "class_method_signature": "DSpaceConfigurationService.getPropertyAsType(String name, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getPropertyAsType", "parameters": "(String name, T defaultValue)", "modifiers": "@Override public", "return": "T", "signature": "T getPropertyAsType(String name, T defaultValue)", "full_signature": "@Override public T getPropertyAsType(String name, T defaultValue)", "class_method_signature": "DSpaceConfigurationService.getPropertyAsType(String name, T defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getPropertyAsType", "parameters": "(String name, T defaultValue, boolean setDefaultIfNotFound)", "modifiers": "@Override public", "return": "T", "signature": "T getPropertyAsType(String name, T defaultValue, boolean setDefaultIfNotFound)", "full_signature": "@Override public T getPropertyAsType(String name, T defaultValue, boolean setDefaultIfNotFound)", "class_method_signature": "DSpaceConfigurationService.getPropertyAsType(String name, T defaultValue, boolean setDefaultIfNotFound)", "testcase": false, "constructor": false}, {"identifier": "hasProperty", "parameters": "(String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasProperty(String name)", "full_signature": "@Override public boolean hasProperty(String name)", "class_method_signature": "DSpaceConfigurationService.hasProperty(String name)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(String name, Object value)", "modifiers": "@Override public synchronized", "return": "boolean", "signature": "boolean setProperty(String name, Object value)", "full_signature": "@Override public synchronized boolean setProperty(String name, Object value)", "class_method_signature": "DSpaceConfigurationService.setProperty(String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "loadConfiguration", "parameters": "(Map<String, Object> properties)", "modifiers": "public", "return": "String[]", "signature": "String[] loadConfiguration(Map<String, Object> properties)", "full_signature": "public String[] loadConfiguration(Map<String, Object> properties)", "class_method_signature": "DSpaceConfigurationService.loadConfiguration(Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "loadConfig", "parameters": "(String key, Object value)", "modifiers": "public", "return": "boolean", "signature": "boolean loadConfig(String key, Object value)", "full_signature": "public boolean loadConfig(String key, Object value)", "class_method_signature": "DSpaceConfigurationService.loadConfig(String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "DSpaceConfigurationService.clear()", "testcase": false, "constructor": false}, {"identifier": "clearConfig", "parameters": "(String key)", "modifiers": "public", "return": "void", "signature": "void clearConfig(String key)", "full_signature": "public void clearConfig(String key)", "class_method_signature": "DSpaceConfigurationService.clearConfig(String key)", "testcase": false, "constructor": false}, {"identifier": "loadInitialConfig", "parameters": "(String providedHome)", "modifiers": "private", "return": "void", "signature": "void loadInitialConfig(String providedHome)", "full_signature": "private void loadInitialConfig(String providedHome)", "class_method_signature": "DSpaceConfigurationService.loadInitialConfig(String providedHome)", "testcase": false, "constructor": false}, {"identifier": "reloadConfig", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void reloadConfig()", "full_signature": "@Override public synchronized void reloadConfig()", "class_method_signature": "DSpaceConfigurationService.reloadConfig()", "testcase": false, "constructor": false}, {"identifier": "setDynamicProperties", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setDynamicProperties()", "full_signature": "private void setDynamicProperties()", "class_method_signature": "DSpaceConfigurationService.setDynamicProperties()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DSpaceConfigurationService.toString()", "testcase": false, "constructor": false}, {"identifier": "getDSpaceHome", "parameters": "(String providedHome)", "modifiers": "protected", "return": "String", "signature": "String getDSpaceHome(String providedHome)", "full_signature": "protected String getDSpaceHome(String providedHome)", "class_method_signature": "DSpaceConfigurationService.getDSpaceHome(String providedHome)", "testcase": false, "constructor": false}, {"identifier": "isValidDSpaceHome", "parameters": "(String path)", "modifiers": "protected", "return": "boolean", "signature": "boolean isValidDSpaceHome(String path)", "full_signature": "protected boolean isValidDSpaceHome(String path)", "class_method_signature": "DSpaceConfigurationService.isValidDSpaceHome(String path)", "testcase": false, "constructor": false}, {"identifier": "getCatalina", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getCatalina()", "full_signature": "protected String getCatalina()", "class_method_signature": "DSpaceConfigurationService.getCatalina()", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(String name, Class<T> type)", "modifiers": "private", "return": "T", "signature": "T convert(String name, Class<T> type)", "full_signature": "private T convert(String name, Class<T> type)", "class_method_signature": "DSpaceConfigurationService.convert(String name, Class<T> type)", "testcase": false, "constructor": false}], "file": "dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java"}, "focal_method": {"identifier": "getPropertyAsType", "parameters": "(String name, Class<T> type)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T getPropertyAsType(String name, Class<T> type) {\n        return convert(name, type);\n    }", "signature": "T getPropertyAsType(String name, Class<T> type)", "full_signature": "@Override public T getPropertyAsType(String name, Class<T> type)", "class_method_signature": "DSpaceConfigurationService.getPropertyAsType(String name, Class<T> type)", "testcase": false, "constructor": false, "invocations": ["convert"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}