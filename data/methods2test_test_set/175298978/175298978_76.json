{"test_class": {"identifier": "JDBCDeveloperQueriesTest", "superclass": "extends PostgresTestCase", "interfaces": "", "fields": [{"original_string": "private DeveloperQueries queries;", "modifier": "private", "type": "DeveloperQueries", "declarator": "queries", "var_name": "queries"}, {"original_string": "private ProjectQueries projectQueries;", "modifier": "private", "type": "ProjectQueries", "declarator": "projectQueries", "var_name": "projectQueries"}, {"original_string": "private int projectId;", "modifier": "private", "type": "int", "declarator": "projectId", "var_name": "projectId"}], "file": "SmellTracker/src/test/java/fr/inria/sniffer/tracker/analysis/persistence/queries/JDBCDeveloperQueriesTest.java"}, "test_case": {"identifier": "testInsertDeveloper", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInsertDeveloper() {\n        long count = 0;\n        String name = \"dev@name.com\";\n\n        // We can insert any developer.\n        executeSuccess(queries.developerInsertStatement(name));\n        assertEquals(++count, getDevelopersCount());\n\n        // We can insert another developer\n        executeSuccess(queries.developerInsertStatement(\"another@dev.net\"));\n        assertEquals(++count, getDevelopersCount());\n\n        // We can't insert the same name two times\n        executeNothinhDone(queries.developerInsertStatement(name));\n        assertEquals(count, getDevelopersCount());\n    }", "signature": "void testInsertDeveloper()", "full_signature": "@Test public void testInsertDeveloper()", "class_method_signature": "JDBCDeveloperQueriesTest.testInsertDeveloper()", "testcase": true, "constructor": false, "invocations": ["executeSuccess", "developerInsertStatement", "assertEquals", "getDevelopersCount", "executeSuccess", "developerInsertStatement", "assertEquals", "getDevelopersCount", "executeNothinhDone", "developerInsertStatement", "assertEquals", "getDevelopersCount"]}, "focal_class": {"identifier": "JDBCDeveloperQueries", "superclass": "extends JDBCQueriesHelper", "interfaces": "implements DeveloperQueries", "fields": [], "methods": [{"identifier": "developerInsertStatement", "parameters": "(String developerName)", "modifiers": "@Override public", "return": "String", "signature": "String developerInsertStatement(String developerName)", "full_signature": "@Override public String developerInsertStatement(String developerName)", "class_method_signature": "JDBCDeveloperQueries.developerInsertStatement(String developerName)", "testcase": false, "constructor": false}, {"identifier": "projectDeveloperInsertStatement", "parameters": "(int projectId, String developerName)", "modifiers": "@Override public", "return": "String", "signature": "String projectDeveloperInsertStatement(int projectId, String developerName)", "full_signature": "@Override public String projectDeveloperInsertStatement(int projectId, String developerName)", "class_method_signature": "JDBCDeveloperQueries.projectDeveloperInsertStatement(int projectId, String developerName)", "testcase": false, "constructor": false}, {"identifier": "idFromEmailQuery", "parameters": "(String email)", "modifiers": "@Override public", "return": "String", "signature": "String idFromEmailQuery(String email)", "full_signature": "@Override public String idFromEmailQuery(String email)", "class_method_signature": "JDBCDeveloperQueries.idFromEmailQuery(String email)", "testcase": false, "constructor": false}, {"identifier": "projectDeveloperQuery", "parameters": "(int projectId, String email)", "modifiers": "@Override public", "return": "String", "signature": "String projectDeveloperQuery(int projectId, String email)", "full_signature": "@Override public String projectDeveloperQuery(int projectId, String email)", "class_method_signature": "JDBCDeveloperQueries.projectDeveloperQuery(int projectId, String email)", "testcase": false, "constructor": false}], "file": "SmellTracker/src/main/java/fr/inria/sniffer/tracker/analysis/persistence/queries/JDBCDeveloperQueries.java"}, "focal_method": {"identifier": "developerInsertStatement", "parameters": "(String developerName)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String developerInsertStatement(String developerName) {\n        return \"INSERT INTO developer (username) VALUES ($$\" + escapeStringEntry(developerName) + \"$$) ON CONFLICT DO NOTHING;\";\n    }", "signature": "String developerInsertStatement(String developerName)", "full_signature": "@Override public String developerInsertStatement(String developerName)", "class_method_signature": "JDBCDeveloperQueries.developerInsertStatement(String developerName)", "testcase": false, "constructor": false, "invocations": ["escapeStringEntry"]}, "repository": {"repo_id": 175298978, "url": "https://github.com/HabchiSarra/Sniffer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 587, "license": "licensed"}}