{"test_class": {"identifier": "BlockingOperatorToIteratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/internal/operators/BlockingOperatorToIteratorTest.java"}, "test_case": {"identifier": "testToIteratorWithException", "parameters": "()", "modifiers": "@Test(expected = TestException.class) public", "return": "void", "body": "@Test(expected = TestException.class)\n    public void testToIteratorWithException() {\n        Observable<String> obs = Observable.create(new OnSubscribe<String>() {\n\n            @Override\n            public void call(Subscriber<? super String> observer) {\n                observer.onNext(\"one\");\n                observer.onError(new TestException());\n            }\n        });\n\n        Iterator<String> it = toIterator(obs);\n\n        assertEquals(true, it.hasNext());\n        assertEquals(\"one\", it.next());\n\n        assertEquals(true, it.hasNext());\n        it.next();\n    }", "signature": "void testToIteratorWithException()", "full_signature": "@Test(expected = TestException.class) public void testToIteratorWithException()", "class_method_signature": "BlockingOperatorToIteratorTest.testToIteratorWithException()", "testcase": true, "constructor": false, "invocations": ["create", "onNext", "onError", "toIterator", "assertEquals", "hasNext", "assertEquals", "next", "assertEquals", "hasNext", "next"]}, "focal_class": {"identifier": "BlockingOperatorToIterator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "BlockingOperatorToIterator", "parameters": "()", "modifiers": "private", "return": "", "signature": " BlockingOperatorToIterator()", "full_signature": "private  BlockingOperatorToIterator()", "class_method_signature": "BlockingOperatorToIterator.BlockingOperatorToIterator()", "testcase": false, "constructor": true}, {"identifier": "toIterator", "parameters": "(Observable<? extends T> source)", "modifiers": "public static", "return": "Iterator<T>", "signature": "Iterator<T> toIterator(Observable<? extends T> source)", "full_signature": "public static Iterator<T> toIterator(Observable<? extends T> source)", "class_method_signature": "BlockingOperatorToIterator.toIterator(Observable<? extends T> source)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/internal/operators/BlockingOperatorToIterator.java"}, "focal_method": {"identifier": "toIterator", "parameters": "(Observable<? extends T> source)", "modifiers": "public static", "return": "Iterator<T>", "body": "public static <T> Iterator<T> toIterator(Observable<? extends T> source) {\n        final BlockingQueue<Notification<? extends T>> notifications = new LinkedBlockingQueue<Notification<? extends T>>();\n\n        // using subscribe instead of unsafeSubscribe since this is a BlockingObservable \"final subscribe\"\n        final Subscription subscription = source.materialize().subscribe(new Subscriber<Notification<? extends T>>() {\n            @Override\n            public void onCompleted() {\n                // ignore\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                notifications.offer(Notification.<T>createOnError(e));\n            }\n\n            @Override\n            public void onNext(Notification<? extends T> args) {\n                notifications.offer(args);\n            }\n        });\n\n        return new Iterator<T>() {\n            private Notification<? extends T> buf;\n\n            @Override\n            public boolean hasNext() {\n                if (buf == null) {\n                    buf = take();\n                }\n                if (buf.isOnError()) {\n                    throw Exceptions.propagate(buf.getThrowable());\n                }\n                return !buf.isOnCompleted();\n            }\n\n            @Override\n            public T next() {\n                if (hasNext()) {\n                    T result = buf.getValue();\n                    buf = null;\n                    return result;\n                }\n                throw new NoSuchElementException();\n            }\n\n            private Notification<? extends T> take() {\n                try {\n                    return notifications.take();\n                } catch (InterruptedException e) {\n                    subscription.unsubscribe();\n                    throw Exceptions.propagate(e);\n                }\n            }\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"Read-only iterator\");\n            }\n        };\n    }", "signature": "Iterator<T> toIterator(Observable<? extends T> source)", "full_signature": "public static Iterator<T> toIterator(Observable<? extends T> source)", "class_method_signature": "BlockingOperatorToIterator.toIterator(Observable<? extends T> source)", "testcase": false, "constructor": false, "invocations": ["subscribe", "materialize", "offer", "createOnError", "offer", "take", "isOnError", "propagate", "getThrowable", "isOnCompleted", "hasNext", "getValue", "take", "unsubscribe", "propagate"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}