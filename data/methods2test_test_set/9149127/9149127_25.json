{"test_class": {"identifier": "PathUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "mycontainer-components/mycontainer-commons/src/test/java/com/googlecode/mycontainer/commons/file/PathUtilTest.java"}, "test_case": {"identifier": "testGetName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetName() {\n\t\tassertEquals(\"xyz.txt\", PathUtil.getName(\"xyz.txt\"));\n\t\tassertEquals(\"xyz.txt\", PathUtil.getName(\"/xyz.txt\"));\n\t\tassertEquals(\"xyz.txt\", PathUtil.getName(\"/abc/fff/xyz.txt\"));\n\n\t\tassertEquals(\"xyz.txt\", PathUtil.getName(\"xyz.txt/\"));\n\t\tassertEquals(\"xyz.txt\", PathUtil.getName(\"/xyz.txt/\"));\n\t\tassertEquals(\"xyz.txt\", PathUtil.getName(\"/abc/fff/xyz.txt/\"));\n\n\t\tassertEquals(\"/\", PathUtil.getName(\"/\"));\n\n\t\tassertEquals(\"xyz.txt\", PathUtil.getName(\"///abc////fff///xyz.txt///\"));\n\t}", "signature": "void testGetName()", "full_signature": "@Test public void testGetName()", "class_method_signature": "PathUtilTest.testGetName()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getName", "assertEquals", "getName", "assertEquals", "getName", "assertEquals", "getName", "assertEquals", "getName", "assertEquals", "getName", "assertEquals", "getName", "assertEquals", "getName"]}, "focal_class": {"identifier": "PathUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern PATTERN_EXT = Pattern\n\t\t\t.compile(\"^.*\\\\.(([^/\\\\.]*))?\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_EXT = Pattern\n\t\t\t.compile(\"^.*\\\\.(([^/\\\\.]*))?\")", "var_name": "PATTERN_EXT"}], "methods": [{"identifier": "parentPath", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String parentPath(String path)", "full_signature": "public static String parentPath(String path)", "class_method_signature": "PathUtil.parentPath(String path)", "testcase": false, "constructor": false}, {"identifier": "fix", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String fix(String path)", "full_signature": "public static String fix(String path)", "class_method_signature": "PathUtil.fix(String path)", "testcase": false, "constructor": false}, {"identifier": "getExtention", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String getExtention(String path)", "full_signature": "public static String getExtention(String path)", "class_method_signature": "PathUtil.getExtention(String path)", "testcase": false, "constructor": false}, {"identifier": "concatPath", "parameters": "(String path, String child)", "modifiers": "public static", "return": "String", "signature": "String concatPath(String path, String child)", "full_signature": "public static String concatPath(String path, String child)", "class_method_signature": "PathUtil.concatPath(String path, String child)", "testcase": false, "constructor": false}, {"identifier": "removeExtention", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String removeExtention(String path)", "full_signature": "public static String removeExtention(String path)", "class_method_signature": "PathUtil.removeExtention(String path)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String getName(String path)", "full_signature": "public static String getName(String path)", "class_method_signature": "PathUtil.getName(String path)", "testcase": false, "constructor": false}, {"identifier": "toUrl", "parameters": "(URL resource)", "modifiers": "public static", "return": "String", "signature": "String toUrl(URL resource)", "full_signature": "public static String toUrl(URL resource)", "class_method_signature": "PathUtil.toUrl(URL resource)", "testcase": false, "constructor": false}, {"identifier": "toUrl", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String toUrl(String url)", "full_signature": "public static String toUrl(String url)", "class_method_signature": "PathUtil.toUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String path)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> split(String path)", "full_signature": "public static List<String> split(String path)", "class_method_signature": "PathUtil.split(String path)", "testcase": false, "constructor": false}], "file": "mycontainer-components/mycontainer-commons/src/main/java/com/googlecode/mycontainer/commons/file/PathUtil.java"}, "focal_method": {"identifier": "getName", "parameters": "(String path)", "modifiers": "public static", "return": "String", "body": "public static String getName(String path) {\n\t\tif (path == \"/\") {\n\t\t\treturn \"/\";\n\t\t}\n\t\tList<String> groups = RegexUtil.groups(\"^/*(([^/]+))/*$\", path);\n\t\tif (groups.size() > 1) {\n\t\t\treturn groups.get(1);\n\t\t}\n\n\t\tgroups = RegexUtil.groups(\"^.*/+(([^/]+))/*$\", path);\n\t\treturn groups.get(1);\n\t}", "signature": "String getName(String path)", "full_signature": "public static String getName(String path)", "class_method_signature": "PathUtil.getName(String path)", "testcase": false, "constructor": false, "invocations": ["groups", "size", "get", "groups", "get"]}, "repository": {"repo_id": 9149127, "url": "https://github.com/murer/mycontainer", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 13, "size": 1353, "license": "licensed"}}