{"test_class": {"identifier": "GroupMemberControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private WebApplicationContext webApplicationContext;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "@MockBean\n    private UserLoginInterceptor userLoginInterceptor;", "modifier": "@MockBean\n    private", "type": "UserLoginInterceptor", "declarator": "userLoginInterceptor", "var_name": "userLoginInterceptor"}, {"original_string": "@MockBean\n    private CommStatusInterceptor commStatusInterceptor;", "modifier": "@MockBean\n    private", "type": "CommStatusInterceptor", "declarator": "commStatusInterceptor", "var_name": "commStatusInterceptor"}, {"original_string": "@MockBean\n    private Message message;", "modifier": "@MockBean\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@MockBean\n    private UserGroupDao userGroupDao;", "modifier": "@MockBean\n    private", "type": "UserGroupDao", "declarator": "userGroupDao", "var_name": "userGroupDao"}, {"original_string": "@MockBean\n    private GroupMemberService groupMemberService;", "modifier": "@MockBean\n    private", "type": "GroupMemberService", "declarator": "groupMemberService", "var_name": "groupMemberService"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "private String requestJson;", "modifier": "private", "type": "String", "declarator": "requestJson", "var_name": "requestJson"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/controller/GroupMemberControllerTest.java"}, "test_case": {"identifier": "update", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void update() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.put(\"/member/update\")\n                .contentType(MediaType.APPLICATION_JSON_UTF8)\n                .content(requestJson)\n                .accept(MediaType.APPLICATION_JSON_UTF8))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andDo(MockMvcResultHandlers.print());\n    }", "signature": "void update()", "full_signature": "@Test public void update()", "class_method_signature": "GroupMemberControllerTest.update()", "testcase": true, "constructor": false, "invocations": ["andDo", "andExpect", "perform", "accept", "content", "contentType", "put", "isOk", "status", "print"]}, "focal_class": {"identifier": "GroupMemberController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Resource\n    private Message message;", "modifier": "@Resource\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Autowired\n    private UserGroupDao userGroupDao;", "modifier": "@Autowired\n    private", "type": "UserGroupDao", "declarator": "userGroupDao", "var_name": "userGroupDao"}, {"original_string": "@Resource\n    private GroupMemberService groupMemberService;", "modifier": "@Resource\n    private", "type": "GroupMemberService", "declarator": "groupMemberService", "var_name": "groupMemberService"}], "methods": [{"identifier": "getUsers", "parameters": "(@RequestParam(value = \"name\", defaultValue = \"\") String name)", "modifiers": "@RequestMapping(value = \"/users\") public", "return": "ServiceResult<List<MemberView>>", "signature": "ServiceResult<List<MemberView>> getUsers(@RequestParam(value = \"name\", defaultValue = \"\") String name)", "full_signature": "@RequestMapping(value = \"/users\") public ServiceResult<List<MemberView>> getUsers(@RequestParam(value = \"name\", defaultValue = \"\") String name)", "class_method_signature": "GroupMemberController.getUsers(@RequestParam(value = \"name\", defaultValue = \"\") String name)", "testcase": false, "constructor": false}, {"identifier": "getGroupUsers", "parameters": "(@RequestBody Paging<UserGroup> paging)", "modifiers": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public", "return": "ServiceResult<ListResult<MemberView>>", "signature": "ServiceResult<ListResult<MemberView>> getGroupUsers(@RequestBody Paging<UserGroup> paging)", "full_signature": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public ServiceResult<ListResult<MemberView>> getGroupUsers(@RequestBody Paging<UserGroup> paging)", "class_method_signature": "GroupMemberController.getGroupUsers(@RequestBody Paging<UserGroup> paging)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@Validated(AddMember.class) @RequestBody UserGroup userGroup, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> add(@Validated(AddMember.class) @RequestBody UserGroup userGroup, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public ServiceResult<String> add(@Validated(AddMember.class) @RequestBody UserGroup userGroup, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "GroupMemberController.add(@Validated(AddMember.class) @RequestBody UserGroup userGroup, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@Validated(DeleteMember.class) @RequestBody UserGroup userGroup, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> delete(@Validated(DeleteMember.class) @RequestBody UserGroup userGroup, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public ServiceResult<String> delete(@Validated(DeleteMember.class) @RequestBody UserGroup userGroup, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "GroupMemberController.delete(@Validated(DeleteMember.class) @RequestBody UserGroup userGroup, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@Validated(UpdateMember.class) @RequestBody UserGroup userGroup, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> update(@Validated(UpdateMember.class) @RequestBody UserGroup userGroup, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public ServiceResult<String> update(@Validated(UpdateMember.class) @RequestBody UserGroup userGroup, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "GroupMemberController.update(@Validated(UpdateMember.class) @RequestBody UserGroup userGroup, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/controller/GroupMemberController.java"}, "focal_method": {"identifier": "update", "parameters": "(@Validated(UpdateMember.class) @RequestBody UserGroup userGroup, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public", "return": "ServiceResult<String>", "body": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT)\n    public ServiceResult<String> update(@Validated(UpdateMember.class) @RequestBody UserGroup userGroup, @CurrentUser LoginUser user, Errors errors) throws Exception {\n        userGroup.setUpdate_user_no(user.getUserNo());\n        ValidateResult validateRes = groupMemberService.validatePermisionUpdateAndDelete(user, userGroup, errors)\n                .addAssert(() -> userGroupDao.updateUserPersimion(userGroup) > 0, message.db_message_update_operation_failed).validate();\n        if (!validateRes.isValid()) {\n            return ServiceResult.fail(validateRes.getSummarize());\n        }\n        return ServiceResult.success();\n    }", "signature": "ServiceResult<String> update(@Validated(UpdateMember.class) @RequestBody UserGroup userGroup, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public ServiceResult<String> update(@Validated(UpdateMember.class) @RequestBody UserGroup userGroup, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "GroupMemberController.update(@Validated(UpdateMember.class) @RequestBody UserGroup userGroup, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false, "invocations": ["setUpdate_user_no", "getUserNo", "validate", "addAssert", "validatePermisionUpdateAndDelete", "updateUserPersimion", "isValid", "fail", "getSummarize", "success"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}