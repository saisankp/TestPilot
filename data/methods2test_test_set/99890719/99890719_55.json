{"test_class": {"identifier": "AlternativePatternInstancePredicateTest", "superclass": "", "interfaces": "", "fields": [], "file": "mubench/src/test/java/de/tu_darmstadt/stg/mudetect/AlternativePatternInstancePredicateTest.java"}, "test_case": {"identifier": "filtersViolation_isInstanceOfRelatedPatternAndViolationOverlapInInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void filtersViolation_isInstanceOfRelatedPatternAndViolationOverlapInInstance() {\n        final TestAUGBuilder target = buildAUG().withActionNodes(\"a\", \"c\");\n        final TestAUGBuilder violatedPattern = buildAUG().withActionNodes(\"a\", \"b\");\n        final TestAUGBuilder satisfiedPattern = buildAUG().withActionNodes(\"a\", \"c\");\n        final Overlap violation = buildOverlap(violatedPattern, target).withNode(\"a\").build();\n        final Overlap instance = buildOverlap(satisfiedPattern, target).withNodes(\"a\", \"c\").build();\n        final AlternativePatternInstancePredicate filter = new AlternativePatternInstancePredicate();\n\n        assertTrue(filter.test(violation, Collections.singleton(instance)));\n    }", "signature": "void filtersViolation_isInstanceOfRelatedPatternAndViolationOverlapInInstance()", "full_signature": "@Test public void filtersViolation_isInstanceOfRelatedPatternAndViolationOverlapInInstance()", "class_method_signature": "AlternativePatternInstancePredicateTest.filtersViolation_isInstanceOfRelatedPatternAndViolationOverlapInInstance()", "testcase": true, "constructor": false, "invocations": ["withActionNodes", "buildAUG", "withActionNodes", "buildAUG", "withActionNodes", "buildAUG", "build", "withNode", "buildOverlap", "build", "withNodes", "buildOverlap", "assertTrue", "test", "singleton"]}, "focal_class": {"identifier": "AlternativePatternInstancePredicate", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "test", "parameters": "(Overlap violation, Collection<Overlap> instances)", "modifiers": "public", "return": "boolean", "signature": "boolean test(Overlap violation, Collection<Overlap> instances)", "full_signature": "public boolean test(Overlap violation, Collection<Overlap> instances)", "class_method_signature": "AlternativePatternInstancePredicate.test(Overlap violation, Collection<Overlap> instances)", "testcase": false, "constructor": false}], "file": "mubench/src/main/java/de/tu_darmstadt/stg/mudetect/AlternativePatternInstancePredicate.java"}, "focal_method": {"identifier": "test", "parameters": "(Overlap violation, Collection<Overlap> instances)", "modifiers": "public", "return": "boolean", "body": "public boolean test(Overlap violation, Collection<Overlap> instances) {\n        for (Overlap instance : instances) {\n            if (violation.isInTargetOverlap(instance)) {\n                return true;\n            }\n        }\n        return false;\n    }", "signature": "boolean test(Overlap violation, Collection<Overlap> instances)", "full_signature": "public boolean test(Overlap violation, Collection<Overlap> instances)", "class_method_signature": "AlternativePatternInstancePredicate.test(Overlap violation, Collection<Overlap> instances)", "testcase": false, "constructor": false, "invocations": ["isInTargetOverlap"]}, "repository": {"repo_id": 99890719, "url": "https://github.com/stg-tud/MUDetect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 5, "size": 11835, "license": "licensed"}}