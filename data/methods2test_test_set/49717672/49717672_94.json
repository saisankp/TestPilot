{"test_class": {"identifier": "SpannableSerializerTest", "superclass": "extends RobolectricTestWithConfig", "interfaces": "", "fields": [], "file": "app/src/test/java/com/eveningoutpost/dexdrip/adapters/SpannableSerializerTest.java"}, "test_case": {"identifier": "serializeSpannableStringTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void serializeSpannableStringTest() {\n\n        // TODO this is also testing that Span.colorSpan() output is as originally defined - really this test should not be dependent on that\n        val span = Span.colorSpan(\"abc\", Color.RED);\n        span.setSpan(new ForegroundColorSpan(Color.GREEN), 1, 2, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n        val result = serializeSpannableString(span);\n        assertWithMessage(\"span serialize template 1\").that(result).isEqualTo(\"{\\\"mText\\\":\\\" abc \\\",\\\"bgc\\\":[{\\\"c\\\":-65536,\\\"s\\\":0,\\\"e\\\":5}],\\\"fgc\\\":[{\\\"c\\\":-16711936,\\\"s\\\":1,\\\"e\\\":2}]}\");\n        val reformedResult = serializeSpannableString(unserializeSpannableString(serializeSpannableString(span)));\n        assertWithMessage(\"span serialize reformed matches\").that(reformedResult).isEqualTo(result);\n        //System.out.println(reformedResult);\n\n    }", "signature": "void serializeSpannableStringTest()", "full_signature": "@Test public void serializeSpannableStringTest()", "class_method_signature": "SpannableSerializerTest.serializeSpannableStringTest()", "testcase": true, "constructor": false, "invocations": ["colorSpan", "setSpan", "serializeSpannableString", "isEqualTo", "that", "assertWithMessage", "serializeSpannableString", "unserializeSpannableString", "serializeSpannableString", "isEqualTo", "that", "assertWithMessage"]}, "focal_class": {"identifier": "SpannableSerializer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "serializeSpannableString", "parameters": "(final SpannableString ss)", "modifiers": "public static", "return": "String", "signature": "String serializeSpannableString(final SpannableString ss)", "full_signature": "public static String serializeSpannableString(final SpannableString ss)", "class_method_signature": "SpannableSerializer.serializeSpannableString(final SpannableString ss)", "testcase": false, "constructor": false}, {"identifier": "unserializeSpannableString", "parameters": "(final String str)", "modifiers": "public static", "return": "SpannableString", "signature": "SpannableString unserializeSpannableString(final String str)", "full_signature": "public static SpannableString unserializeSpannableString(final String str)", "class_method_signature": "SpannableSerializer.unserializeSpannableString(final String str)", "testcase": false, "constructor": false}, {"identifier": "extractClass", "parameters": "(final SpannableString ss, final Class<? extends CharacterStyle> clz)", "modifiers": "private static", "return": "JSONArray", "signature": "JSONArray extractClass(final SpannableString ss, final Class<? extends CharacterStyle> clz)", "full_signature": "private static JSONArray extractClass(final SpannableString ss, final Class<? extends CharacterStyle> clz)", "class_method_signature": "SpannableSerializer.extractClass(final SpannableString ss, final Class<? extends CharacterStyle> clz)", "testcase": false, "constructor": false}, {"identifier": "pushSpanColor", "parameters": "(final JSONArray array, final SpannableString ss, final int type)", "modifiers": "private static", "return": "void", "signature": "void pushSpanColor(final JSONArray array, final SpannableString ss, final int type)", "full_signature": "private static void pushSpanColor(final JSONArray array, final SpannableString ss, final int type)", "class_method_signature": "SpannableSerializer.pushSpanColor(final JSONArray array, final SpannableString ss, final int type)", "testcase": false, "constructor": false}, {"identifier": "pullSpanColor", "parameters": "(final SpannableString ss, final CharacterStyle spans, final int colour, final JSONArray array)", "modifiers": "private static", "return": "void", "signature": "void pullSpanColor(final SpannableString ss, final CharacterStyle spans, final int colour, final JSONArray array)", "full_signature": "private static void pullSpanColor(final SpannableString ss, final CharacterStyle spans, final int colour, final JSONArray array)", "class_method_signature": "SpannableSerializer.pullSpanColor(final SpannableString ss, final CharacterStyle spans, final int colour, final JSONArray array)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/eveningoutpost/dexdrip/adapters/SpannableSerializer.java"}, "focal_method": {"identifier": "serializeSpannableString", "parameters": "(final SpannableString ss)", "modifiers": "public static", "return": "String", "body": "public static String serializeSpannableString(final SpannableString ss) {\n        val json = new JSONObject();\n        try {\n            json.put(\"mText\", ss.toString());\n            json.put(\"bgc\", extractClass(ss, BackgroundColorSpan.class));\n            json.put(\"fgc\", extractClass(ss, ForegroundColorSpan.class));\n\n        } catch (JSONException e) {\n            // we're done for if we hit here\n        }\n        return json.toString();\n    }", "signature": "String serializeSpannableString(final SpannableString ss)", "full_signature": "public static String serializeSpannableString(final SpannableString ss)", "class_method_signature": "SpannableSerializer.serializeSpannableString(final SpannableString ss)", "testcase": false, "constructor": false, "invocations": ["put", "toString", "put", "extractClass", "put", "extractClass", "toString"]}, "repository": {"repo_id": 49717672, "url": "https://github.com/jamorham/xDrip-plus", "stars": 199, "created": "1/15/2016 12:31:22 PM +00:00", "updates": "2020-01-26T20:46:33+00:00", "fork": "False", "license": "licensed"}}