{"test_class": {"identifier": "SimpleCatalogManagerTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private SimpleCatalogManager manager;", "modifier": "private", "type": "SimpleCatalogManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private OrmFactory<Catalog> catalogFactory = getRequiredOrmFactory(Catalog.class);", "modifier": "private", "type": "OrmFactory<Catalog>", "declarator": "catalogFactory = getRequiredOrmFactory(Catalog.class)", "var_name": "catalogFactory"}, {"original_string": "private OrmFactory<Record> recordFactory = getRequiredOrmFactory(Record.class);", "modifier": "private", "type": "OrmFactory<Record>", "declarator": "recordFactory = getRequiredOrmFactory(Record.class)", "var_name": "recordFactory"}, {"original_string": "private OrmFactory<UnversionedRecord> unversionedRecordFactory = getRequiredOrmFactory(UnversionedRecord.class);", "modifier": "private", "type": "OrmFactory<UnversionedRecord>", "declarator": "unversionedRecordFactory = getRequiredOrmFactory(UnversionedRecord.class)", "var_name": "unversionedRecordFactory"}, {"original_string": "private OrmFactory<VersionedRecord> versionedRecordFactory = getRequiredOrmFactory(VersionedRecord.class);", "modifier": "private", "type": "OrmFactory<VersionedRecord>", "declarator": "versionedRecordFactory = getRequiredOrmFactory(VersionedRecord.class)", "var_name": "versionedRecordFactory"}, {"original_string": "private OrmFactory<VersionedRDFRecord> versionedRDFRecordFactory = getRequiredOrmFactory(VersionedRDFRecord.class);", "modifier": "private", "type": "OrmFactory<VersionedRDFRecord>", "declarator": "versionedRDFRecordFactory = getRequiredOrmFactory(VersionedRDFRecord.class)", "var_name": "versionedRDFRecordFactory"}, {"original_string": "private OrmFactory<Distribution> distributionFactory = getRequiredOrmFactory(Distribution.class);", "modifier": "private", "type": "OrmFactory<Distribution>", "declarator": "distributionFactory = getRequiredOrmFactory(Distribution.class)", "var_name": "distributionFactory"}, {"original_string": "private OrmFactory<Branch> branchFactory = getRequiredOrmFactory(Branch.class);", "modifier": "private", "type": "OrmFactory<Branch>", "declarator": "branchFactory = getRequiredOrmFactory(Branch.class)", "var_name": "branchFactory"}, {"original_string": "private OrmFactory<InProgressCommit> inProgressCommitFactory = getRequiredOrmFactory(InProgressCommit.class);", "modifier": "private", "type": "OrmFactory<InProgressCommit>", "declarator": "inProgressCommitFactory = getRequiredOrmFactory(InProgressCommit.class)", "var_name": "inProgressCommitFactory"}, {"original_string": "private OrmFactory<Commit> commitFactory = getRequiredOrmFactory(Commit.class);", "modifier": "private", "type": "OrmFactory<Commit>", "declarator": "commitFactory = getRequiredOrmFactory(Commit.class)", "var_name": "commitFactory"}, {"original_string": "private OrmFactory<Revision> revisionFactory = getRequiredOrmFactory(Revision.class);", "modifier": "private", "type": "OrmFactory<Revision>", "declarator": "revisionFactory = getRequiredOrmFactory(Revision.class)", "var_name": "revisionFactory"}, {"original_string": "private OrmFactory<Version> versionFactory = getRequiredOrmFactory(Version.class);", "modifier": "private", "type": "OrmFactory<Version>", "declarator": "versionFactory = getRequiredOrmFactory(Version.class)", "var_name": "versionFactory"}, {"original_string": "private OrmFactory<Tag> tagFactory = getRequiredOrmFactory(Tag.class);", "modifier": "private", "type": "OrmFactory<Tag>", "declarator": "tagFactory = getRequiredOrmFactory(Tag.class)", "var_name": "tagFactory"}, {"original_string": "private OrmFactory<UserBranch> userBranchFactory = getRequiredOrmFactory(UserBranch.class);", "modifier": "private", "type": "OrmFactory<UserBranch>", "declarator": "userBranchFactory = getRequiredOrmFactory(UserBranch.class)", "var_name": "userBranchFactory"}, {"original_string": "private OrmFactory<User> userFactory = getRequiredOrmFactory(User.class);", "modifier": "private", "type": "OrmFactory<User>", "declarator": "userFactory = getRequiredOrmFactory(User.class)", "var_name": "userFactory"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private IRI distributedCatalogId;", "modifier": "private", "type": "IRI", "declarator": "distributedCatalogId", "var_name": "distributedCatalogId"}, {"original_string": "private IRI localCatalogId;", "modifier": "private", "type": "IRI", "declarator": "localCatalogId", "var_name": "localCatalogId"}, {"original_string": "private List<Commit> testCommits;", "modifier": "private", "type": "List<Commit>", "declarator": "testCommits", "var_name": "testCommits"}, {"original_string": "private final IRI typeIRI = VALUE_FACTORY.createIRI(com.mobi.ontologies.rdfs.Resource.type_IRI);", "modifier": "private final", "type": "IRI", "declarator": "typeIRI = VALUE_FACTORY.createIRI(com.mobi.ontologies.rdfs.Resource.type_IRI)", "var_name": "typeIRI"}, {"original_string": "private final IRI titleIRI = VALUE_FACTORY.createIRI(_Thing.title_IRI);", "modifier": "private final", "type": "IRI", "declarator": "titleIRI = VALUE_FACTORY.createIRI(_Thing.title_IRI)", "var_name": "titleIRI"}, {"original_string": "private final IRI descriptionIRI = VALUE_FACTORY.createIRI(_Thing.description_IRI);", "modifier": "private final", "type": "IRI", "declarator": "descriptionIRI = VALUE_FACTORY.createIRI(_Thing.description_IRI)", "var_name": "descriptionIRI"}, {"original_string": "private final IRI modifiedIRI = VALUE_FACTORY.createIRI(_Thing.modified_IRI);", "modifier": "private final", "type": "IRI", "declarator": "modifiedIRI = VALUE_FACTORY.createIRI(_Thing.modified_IRI)", "var_name": "modifiedIRI"}, {"original_string": "private final IRI issuedIRI = VALUE_FACTORY.createIRI(_Thing.issued_IRI);", "modifier": "private final", "type": "IRI", "declarator": "issuedIRI = VALUE_FACTORY.createIRI(_Thing.issued_IRI)", "var_name": "issuedIRI"}, {"original_string": "private final IRI EMPTY_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test#empty\");", "modifier": "private final", "type": "IRI", "declarator": "EMPTY_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test#empty\")", "var_name": "EMPTY_IRI"}, {"original_string": "private final IRI NEW_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test#new\");", "modifier": "private final", "type": "IRI", "declarator": "NEW_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test#new\")", "var_name": "NEW_IRI"}, {"original_string": "private final IRI USER_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test#user\");", "modifier": "private final", "type": "IRI", "declarator": "USER_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test#user\")", "var_name": "USER_IRI"}, {"original_string": "private final IRI RECORD_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#record\");", "modifier": "private final", "type": "IRI", "declarator": "RECORD_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#record\")", "var_name": "RECORD_IRI"}, {"original_string": "private final IRI UNVERSIONED_RECORD_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#unversioned-record\");", "modifier": "private final", "type": "IRI", "declarator": "UNVERSIONED_RECORD_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#unversioned-record\")", "var_name": "UNVERSIONED_RECORD_IRI"}, {"original_string": "private final IRI VERSIONED_RECORD_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-record\");", "modifier": "private final", "type": "IRI", "declarator": "VERSIONED_RECORD_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-record\")", "var_name": "VERSIONED_RECORD_IRI"}, {"original_string": "private final IRI VERSIONED_RDF_RECORD_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-rdf-record\");", "modifier": "private final", "type": "IRI", "declarator": "VERSIONED_RDF_RECORD_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-rdf-record\")", "var_name": "VERSIONED_RDF_RECORD_IRI"}, {"original_string": "private final IRI DISTRIBUTION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/distributions#distribution\");", "modifier": "private final", "type": "IRI", "declarator": "DISTRIBUTION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/distributions#distribution\")", "var_name": "DISTRIBUTION_IRI"}, {"original_string": "private final IRI LATEST_VERSION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/versions#latest-version\");", "modifier": "private final", "type": "IRI", "declarator": "LATEST_VERSION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/versions#latest-version\")", "var_name": "LATEST_VERSION_IRI"}, {"original_string": "private final IRI VERSION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/versions#version\");", "modifier": "private final", "type": "IRI", "declarator": "VERSION_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/versions#version\")", "var_name": "VERSION_IRI"}, {"original_string": "private final IRI TAG_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/versions#tag\");", "modifier": "private final", "type": "IRI", "declarator": "TAG_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/versions#tag\")", "var_name": "TAG_IRI"}, {"original_string": "private final IRI MASTER_BRANCH_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/branches#master\");", "modifier": "private final", "type": "IRI", "declarator": "MASTER_BRANCH_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/branches#master\")", "var_name": "MASTER_BRANCH_IRI"}, {"original_string": "private final IRI BRANCH_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/branches#branch\");", "modifier": "private final", "type": "IRI", "declarator": "BRANCH_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/branches#branch\")", "var_name": "BRANCH_IRI"}, {"original_string": "private final IRI USER_BRANCH_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/branches#user-branch\");", "modifier": "private final", "type": "IRI", "declarator": "USER_BRANCH_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/branches#user-branch\")", "var_name": "USER_BRANCH_IRI"}, {"original_string": "private final IRI COMMIT_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/commits#commit\");", "modifier": "private final", "type": "IRI", "declarator": "COMMIT_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/commits#commit\")", "var_name": "COMMIT_IRI"}, {"original_string": "private final IRI IN_PROGRESS_COMMIT_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/commits#in-progress-commit\");", "modifier": "private final", "type": "IRI", "declarator": "IN_PROGRESS_COMMIT_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/commits#in-progress-commit\")", "var_name": "IN_PROGRESS_COMMIT_IRI"}, {"original_string": "private static final String COMMITS = \"http://mobi.com/test/commits#\";", "modifier": "private static final", "type": "String", "declarator": "COMMITS = \"http://mobi.com/test/commits#\"", "var_name": "COMMITS"}, {"original_string": "private static final String RECORDS = \"http://mobi.com/test/records#\";", "modifier": "private static final", "type": "String", "declarator": "RECORDS = \"http://mobi.com/test/records#\"", "var_name": "RECORDS"}, {"original_string": "private static final String[] COMMIT_IRIS = new String[] {\n            \"http://mobi.com/commits/0\",\n            \"http://mobi.com/commits/1\",\n            \"http://mobi.com/commits/2\"\n    };", "modifier": "private static final", "type": "String[]", "declarator": "COMMIT_IRIS = new String[] {\n            \"http://mobi.com/commits/0\",\n            \"http://mobi.com/commits/1\",\n            \"http://mobi.com/commits/2\"\n    }", "var_name": "COMMIT_IRIS"}, {"original_string": "private static final int TOTAL_SIZE = 9;", "modifier": "private static final", "type": "int", "declarator": "TOTAL_SIZE = 9", "var_name": "TOTAL_SIZE"}, {"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "@Mock\n    private CatalogConfigProvider configProvider;", "modifier": "@Mock\n    private", "type": "CatalogConfigProvider", "declarator": "configProvider", "var_name": "configProvider"}, {"original_string": "@Mock\n    private CatalogUtilsService utilsService;", "modifier": "@Mock\n    private", "type": "CatalogUtilsService", "declarator": "utilsService", "var_name": "utilsService"}, {"original_string": "@Mock\n    private RecordService<Record> recordService;", "modifier": "@Mock\n    private", "type": "RecordService<Record>", "declarator": "recordService", "var_name": "recordService"}, {"original_string": "@Mock\n    private RecordService<VersionedRDFRecord> versionedRDFRecordService;", "modifier": "@Mock\n    private", "type": "RecordService<VersionedRDFRecord>", "declarator": "versionedRDFRecordService", "var_name": "versionedRDFRecordService"}, {"original_string": "@Mock\n    private RecordService<VersionedRecord> versionedRecordService;", "modifier": "@Mock\n    private", "type": "RecordService<VersionedRecord>", "declarator": "versionedRecordService", "var_name": "versionedRecordService"}, {"original_string": "@Mock\n    private RecordService<UnversionedRecord> unversionedRecordService;", "modifier": "@Mock\n    private", "type": "RecordService<UnversionedRecord>", "declarator": "unversionedRecordService", "var_name": "unversionedRecordService"}, {"original_string": "@Mock\n    private MergeRequestManager mergeRequestManager;", "modifier": "@Mock\n    private", "type": "MergeRequestManager", "declarator": "mergeRequestManager", "var_name": "mergeRequestManager"}, {"original_string": "@Mock\n    private Conflict conflict;", "modifier": "@Mock\n    private", "type": "Conflict", "declarator": "conflict", "var_name": "conflict"}], "file": "com.mobi.catalog.impl/src/test/java/com/mobi/catalog/impl/SimpleCatalogManagerTest.java"}, "test_case": {"identifier": "testGetVersionedDistributions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetVersionedDistributions() throws Exception {\n        // Setup:\n        Version version = versionFactory.createNew(VERSION_IRI);\n        Distribution dist = distributionFactory.createNew(DISTRIBUTION_IRI);\n        version.setVersionedDistribution(Collections.singleton(dist));\n        doReturn(version).when(utilsService).getVersion(eq(distributedCatalogId), eq(VERSIONED_RECORD_IRI), eq(VERSION_IRI), eq(versionFactory), any(RepositoryConnection.class));\n\n        Set<Distribution> distributions = manager.getVersionedDistributions(distributedCatalogId, VERSIONED_RECORD_IRI, VERSION_IRI);\n        verify(utilsService).getVersion(eq(distributedCatalogId), eq(VERSIONED_RECORD_IRI), eq(VERSION_IRI), eq(versionFactory), any(RepositoryConnection.class));\n        version.getVersionedDistribution_resource().forEach(resource -> verify(utilsService).getExpectedObject(eq(resource), eq(distributionFactory), any(RepositoryConnection.class)));\n        assertEquals(1, distributions.size());\n    }", "signature": "void testGetVersionedDistributions()", "full_signature": "@Test public void testGetVersionedDistributions()", "class_method_signature": "SimpleCatalogManagerTest.testGetVersionedDistributions()", "testcase": true, "constructor": false, "invocations": ["createNew", "createNew", "setVersionedDistribution", "singleton", "getVersion", "when", "doReturn", "eq", "eq", "eq", "eq", "any", "getVersionedDistributions", "getVersion", "verify", "eq", "eq", "eq", "eq", "any", "forEach", "getVersionedDistribution_resource", "getExpectedObject", "verify", "eq", "eq", "any", "assertEquals", "size"]}, "focal_class": {"identifier": "SimpleCatalogManager", "superclass": "", "interfaces": "implements CatalogManager", "fields": [{"original_string": "static final String COMPONENT_NAME = \"com.mobi.catalog.api.CatalogManager\";", "modifier": "static final", "type": "String", "declarator": "COMPONENT_NAME = \"com.mobi.catalog.api.CatalogManager\"", "var_name": "COMPONENT_NAME"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(SimpleCatalogManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SimpleCatalogManager.class)", "var_name": "log"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private ModelFactory mf;", "modifier": "private", "type": "ModelFactory", "declarator": "mf", "var_name": "mf"}, {"original_string": "private CatalogConfigProvider configProvider;", "modifier": "private", "type": "CatalogConfigProvider", "declarator": "configProvider", "var_name": "configProvider"}, {"original_string": "private CatalogUtilsService utils;", "modifier": "private", "type": "CatalogUtilsService", "declarator": "utils", "var_name": "utils"}, {"original_string": "private MergeRequestManager mergeRequestManager;", "modifier": "private", "type": "MergeRequestManager", "declarator": "mergeRequestManager", "var_name": "mergeRequestManager"}, {"original_string": "private CatalogFactory catalogFactory;", "modifier": "private", "type": "CatalogFactory", "declarator": "catalogFactory", "var_name": "catalogFactory"}, {"original_string": "private RecordFactory recordFactory;", "modifier": "private", "type": "RecordFactory", "declarator": "recordFactory", "var_name": "recordFactory"}, {"original_string": "private DistributionFactory distributionFactory;", "modifier": "private", "type": "DistributionFactory", "declarator": "distributionFactory", "var_name": "distributionFactory"}, {"original_string": "private BranchFactory branchFactory;", "modifier": "private", "type": "BranchFactory", "declarator": "branchFactory", "var_name": "branchFactory"}, {"original_string": "private InProgressCommitFactory inProgressCommitFactory;", "modifier": "private", "type": "InProgressCommitFactory", "declarator": "inProgressCommitFactory", "var_name": "inProgressCommitFactory"}, {"original_string": "private CommitFactory commitFactory;", "modifier": "private", "type": "CommitFactory", "declarator": "commitFactory", "var_name": "commitFactory"}, {"original_string": "private OrmFactoryRegistry factoryRegistry;", "modifier": "private", "type": "OrmFactoryRegistry", "declarator": "factoryRegistry", "var_name": "factoryRegistry"}, {"original_string": "private RevisionFactory revisionFactory;", "modifier": "private", "type": "RevisionFactory", "declarator": "revisionFactory", "var_name": "revisionFactory"}, {"original_string": "private VersionedRDFRecordFactory versionedRDFRecordFactory;", "modifier": "private", "type": "VersionedRDFRecordFactory", "declarator": "versionedRDFRecordFactory", "var_name": "versionedRDFRecordFactory"}, {"original_string": "private VersionedRecordFactory versionedRecordFactory;", "modifier": "private", "type": "VersionedRecordFactory", "declarator": "versionedRecordFactory", "var_name": "versionedRecordFactory"}, {"original_string": "private UnversionedRecordFactory unversionedRecordFactory;", "modifier": "private", "type": "UnversionedRecordFactory", "declarator": "unversionedRecordFactory", "var_name": "unversionedRecordFactory"}, {"original_string": "private VersionFactory versionFactory;", "modifier": "private", "type": "VersionFactory", "declarator": "versionFactory", "var_name": "versionFactory"}, {"original_string": "private TagFactory tagFactory;", "modifier": "private", "type": "TagFactory", "declarator": "tagFactory", "var_name": "tagFactory"}, {"original_string": "private Map<com.mobi.rdf.api.Resource, String> sortingOptions = new HashMap<>();", "modifier": "private", "type": "Map<com.mobi.rdf.api.Resource, String>", "declarator": "sortingOptions = new HashMap<>()", "var_name": "sortingOptions"}, {"original_string": "private Map<Class, RecordService> recordServices = new HashMap<>();", "modifier": "private", "type": "Map<Class, RecordService>", "declarator": "recordServices = new HashMap<>()", "var_name": "recordServices"}, {"original_string": "private static final String PROV_AT_TIME = \"http://www.w3.org/ns/prov#atTime\";", "modifier": "private static final", "type": "String", "declarator": "PROV_AT_TIME = \"http://www.w3.org/ns/prov#atTime\"", "var_name": "PROV_AT_TIME"}, {"original_string": "private static final String FIND_RECORDS_QUERY;", "modifier": "private static final", "type": "String", "declarator": "FIND_RECORDS_QUERY", "var_name": "FIND_RECORDS_QUERY"}, {"original_string": "private static final String COUNT_RECORDS_QUERY;", "modifier": "private static final", "type": "String", "declarator": "COUNT_RECORDS_QUERY", "var_name": "COUNT_RECORDS_QUERY"}, {"original_string": "private static final String RECORD_BINDING = \"record\";", "modifier": "private static final", "type": "String", "declarator": "RECORD_BINDING = \"record\"", "var_name": "RECORD_BINDING"}, {"original_string": "private static final String CATALOG_BINDING = \"catalog\";", "modifier": "private static final", "type": "String", "declarator": "CATALOG_BINDING = \"catalog\"", "var_name": "CATALOG_BINDING"}, {"original_string": "private static final String RECORD_COUNT_BINDING = \"record_count\";", "modifier": "private static final", "type": "String", "declarator": "RECORD_COUNT_BINDING = \"record_count\"", "var_name": "RECORD_COUNT_BINDING"}, {"original_string": "private static final String TYPE_FILTER_BINDING = \"type_filter\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_FILTER_BINDING = \"type_filter\"", "var_name": "TYPE_FILTER_BINDING"}, {"original_string": "private static final String SEARCH_BINDING = \"search_text\";", "modifier": "private static final", "type": "String", "declarator": "SEARCH_BINDING = \"search_text\"", "var_name": "SEARCH_BINDING"}], "methods": [{"identifier": "getRecordService", "parameters": "(Class<T> clazz)", "modifiers": "private", "return": "RecordService<T>", "signature": "RecordService<T> getRecordService(Class<T> clazz)", "full_signature": "private RecordService<T> getRecordService(Class<T> clazz)", "class_method_signature": "SimpleCatalogManager.getRecordService(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "SimpleCatalogManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " SimpleCatalogManager()", "full_signature": "public  SimpleCatalogManager()", "class_method_signature": "SimpleCatalogManager.SimpleCatalogManager()", "testcase": false, "constructor": true}, {"identifier": "setValueFactory", "parameters": "(ValueFactory valueFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setValueFactory(ValueFactory valueFactory)", "full_signature": "@Reference void setValueFactory(ValueFactory valueFactory)", "class_method_signature": "SimpleCatalogManager.setValueFactory(ValueFactory valueFactory)", "testcase": false, "constructor": false}, {"identifier": "setModelFactory", "parameters": "(ModelFactory modelFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setModelFactory(ModelFactory modelFactory)", "full_signature": "@Reference void setModelFactory(ModelFactory modelFactory)", "class_method_signature": "SimpleCatalogManager.setModelFactory(ModelFactory modelFactory)", "testcase": false, "constructor": false}, {"identifier": "setConfigProvider", "parameters": "(CatalogConfigProvider configProvider)", "modifiers": "@Reference", "return": "void", "signature": "void setConfigProvider(CatalogConfigProvider configProvider)", "full_signature": "@Reference void setConfigProvider(CatalogConfigProvider configProvider)", "class_method_signature": "SimpleCatalogManager.setConfigProvider(CatalogConfigProvider configProvider)", "testcase": false, "constructor": false}, {"identifier": "setUtils", "parameters": "(CatalogUtilsService utils)", "modifiers": "@Reference", "return": "void", "signature": "void setUtils(CatalogUtilsService utils)", "full_signature": "@Reference void setUtils(CatalogUtilsService utils)", "class_method_signature": "SimpleCatalogManager.setUtils(CatalogUtilsService utils)", "testcase": false, "constructor": false}, {"identifier": "setMergeRequestManager", "parameters": "(MergeRequestManager mergeRequestManager)", "modifiers": "@Reference", "return": "void", "signature": "void setMergeRequestManager(MergeRequestManager mergeRequestManager)", "full_signature": "@Reference void setMergeRequestManager(MergeRequestManager mergeRequestManager)", "class_method_signature": "SimpleCatalogManager.setMergeRequestManager(MergeRequestManager mergeRequestManager)", "testcase": false, "constructor": false}, {"identifier": "setCatalogFactory", "parameters": "(CatalogFactory catalogFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setCatalogFactory(CatalogFactory catalogFactory)", "full_signature": "@Reference void setCatalogFactory(CatalogFactory catalogFactory)", "class_method_signature": "SimpleCatalogManager.setCatalogFactory(CatalogFactory catalogFactory)", "testcase": false, "constructor": false}, {"identifier": "setRecordFactory", "parameters": "(RecordFactory recordFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setRecordFactory(RecordFactory recordFactory)", "full_signature": "@Reference void setRecordFactory(RecordFactory recordFactory)", "class_method_signature": "SimpleCatalogManager.setRecordFactory(RecordFactory recordFactory)", "testcase": false, "constructor": false}, {"identifier": "setDistributionFactory", "parameters": "(DistributionFactory distributionFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setDistributionFactory(DistributionFactory distributionFactory)", "full_signature": "@Reference void setDistributionFactory(DistributionFactory distributionFactory)", "class_method_signature": "SimpleCatalogManager.setDistributionFactory(DistributionFactory distributionFactory)", "testcase": false, "constructor": false}, {"identifier": "setBranchFactory", "parameters": "(BranchFactory branchFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setBranchFactory(BranchFactory branchFactory)", "full_signature": "@Reference void setBranchFactory(BranchFactory branchFactory)", "class_method_signature": "SimpleCatalogManager.setBranchFactory(BranchFactory branchFactory)", "testcase": false, "constructor": false}, {"identifier": "setInProgressCommitFactory", "parameters": "(InProgressCommitFactory inProgressCommitFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setInProgressCommitFactory(InProgressCommitFactory inProgressCommitFactory)", "full_signature": "@Reference void setInProgressCommitFactory(InProgressCommitFactory inProgressCommitFactory)", "class_method_signature": "SimpleCatalogManager.setInProgressCommitFactory(InProgressCommitFactory inProgressCommitFactory)", "testcase": false, "constructor": false}, {"identifier": "setCommitFactory", "parameters": "(CommitFactory commitFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setCommitFactory(CommitFactory commitFactory)", "full_signature": "@Reference void setCommitFactory(CommitFactory commitFactory)", "class_method_signature": "SimpleCatalogManager.setCommitFactory(CommitFactory commitFactory)", "testcase": false, "constructor": false}, {"identifier": "setRevisionFactory", "parameters": "(RevisionFactory revisionFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setRevisionFactory(RevisionFactory revisionFactory)", "full_signature": "@Reference void setRevisionFactory(RevisionFactory revisionFactory)", "class_method_signature": "SimpleCatalogManager.setRevisionFactory(RevisionFactory revisionFactory)", "testcase": false, "constructor": false}, {"identifier": "setVersionedRDFRecordFactory", "parameters": "(VersionedRDFRecordFactory versionedRDFRecordFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setVersionedRDFRecordFactory(VersionedRDFRecordFactory versionedRDFRecordFactory)", "full_signature": "@Reference void setVersionedRDFRecordFactory(VersionedRDFRecordFactory versionedRDFRecordFactory)", "class_method_signature": "SimpleCatalogManager.setVersionedRDFRecordFactory(VersionedRDFRecordFactory versionedRDFRecordFactory)", "testcase": false, "constructor": false}, {"identifier": "setVersionedRecordFactory", "parameters": "(VersionedRecordFactory versionedRecordFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setVersionedRecordFactory(VersionedRecordFactory versionedRecordFactory)", "full_signature": "@Reference void setVersionedRecordFactory(VersionedRecordFactory versionedRecordFactory)", "class_method_signature": "SimpleCatalogManager.setVersionedRecordFactory(VersionedRecordFactory versionedRecordFactory)", "testcase": false, "constructor": false}, {"identifier": "setUnversionedRecordFactory", "parameters": "(UnversionedRecordFactory unversionedRecordFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setUnversionedRecordFactory(UnversionedRecordFactory unversionedRecordFactory)", "full_signature": "@Reference void setUnversionedRecordFactory(UnversionedRecordFactory unversionedRecordFactory)", "class_method_signature": "SimpleCatalogManager.setUnversionedRecordFactory(UnversionedRecordFactory unversionedRecordFactory)", "testcase": false, "constructor": false}, {"identifier": "setVersionFactory", "parameters": "(VersionFactory versionFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setVersionFactory(VersionFactory versionFactory)", "full_signature": "@Reference void setVersionFactory(VersionFactory versionFactory)", "class_method_signature": "SimpleCatalogManager.setVersionFactory(VersionFactory versionFactory)", "testcase": false, "constructor": false}, {"identifier": "setTagFactory", "parameters": "(TagFactory tagFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setTagFactory(TagFactory tagFactory)", "full_signature": "@Reference void setTagFactory(TagFactory tagFactory)", "class_method_signature": "SimpleCatalogManager.setTagFactory(TagFactory tagFactory)", "testcase": false, "constructor": false}, {"identifier": "setFactoryRegistry", "parameters": "(OrmFactoryRegistry factoryRegistry)", "modifiers": "@Reference", "return": "void", "signature": "void setFactoryRegistry(OrmFactoryRegistry factoryRegistry)", "full_signature": "@Reference void setFactoryRegistry(OrmFactoryRegistry factoryRegistry)", "class_method_signature": "SimpleCatalogManager.setFactoryRegistry(OrmFactoryRegistry factoryRegistry)", "testcase": false, "constructor": false}, {"identifier": "addRecordService", "parameters": "(RecordService<? extends Record> recordService)", "modifiers": "@Reference(type = '*', dynamic = true)", "return": "void", "signature": "void addRecordService(RecordService<? extends Record> recordService)", "full_signature": "@Reference(type = '*', dynamic = true) void addRecordService(RecordService<? extends Record> recordService)", "class_method_signature": "SimpleCatalogManager.addRecordService(RecordService<? extends Record> recordService)", "testcase": false, "constructor": false}, {"identifier": "removeRecordService", "parameters": "(RecordService<? extends Record> recordService)", "modifiers": "", "return": "void", "signature": "void removeRecordService(RecordService<? extends Record> recordService)", "full_signature": " void removeRecordService(RecordService<? extends Record> recordService)", "class_method_signature": "SimpleCatalogManager.removeRecordService(RecordService<? extends Record> recordService)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Activate protected", "return": "void", "signature": "void start()", "full_signature": "@Activate protected void start()", "class_method_signature": "SimpleCatalogManager.start()", "testcase": false, "constructor": false}, {"identifier": "modified", "parameters": "()", "modifiers": "@Modified protected", "return": "void", "signature": "void modified()", "full_signature": "@Modified protected void modified()", "class_method_signature": "SimpleCatalogManager.modified()", "testcase": false, "constructor": false}, {"identifier": "getDistributedCatalog", "parameters": "()", "modifiers": "@Override public", "return": "Catalog", "signature": "Catalog getDistributedCatalog()", "full_signature": "@Override public Catalog getDistributedCatalog()", "class_method_signature": "SimpleCatalogManager.getDistributedCatalog()", "testcase": false, "constructor": false}, {"identifier": "getLocalCatalog", "parameters": "()", "modifiers": "@Override public", "return": "Catalog", "signature": "Catalog getLocalCatalog()", "full_signature": "@Override public Catalog getLocalCatalog()", "class_method_signature": "SimpleCatalogManager.getLocalCatalog()", "testcase": false, "constructor": false}, {"identifier": "findRecord", "parameters": "(Resource catalogId, PaginatedSearchParams searchParams)", "modifiers": "@Override public", "return": "PaginatedSearchResults<Record>", "signature": "PaginatedSearchResults<Record> findRecord(Resource catalogId, PaginatedSearchParams searchParams)", "full_signature": "@Override public PaginatedSearchResults<Record> findRecord(Resource catalogId, PaginatedSearchParams searchParams)", "class_method_signature": "SimpleCatalogManager.findRecord(Resource catalogId, PaginatedSearchParams searchParams)", "testcase": false, "constructor": false}, {"identifier": "getRecordIds", "parameters": "(Resource catalogId)", "modifiers": "@Override public", "return": "Set<Resource>", "signature": "Set<Resource> getRecordIds(Resource catalogId)", "full_signature": "@Override public Set<Resource> getRecordIds(Resource catalogId)", "class_method_signature": "SimpleCatalogManager.getRecordIds(Resource catalogId)", "testcase": false, "constructor": false}, {"identifier": "createRecord", "parameters": "(User user, RecordOperationConfig config, Class<T> recordClass)", "modifiers": "@Override public", "return": "T", "signature": "T createRecord(User user, RecordOperationConfig config, Class<T> recordClass)", "full_signature": "@Override public T createRecord(User user, RecordOperationConfig config, Class<T> recordClass)", "class_method_signature": "SimpleCatalogManager.createRecord(User user, RecordOperationConfig config, Class<T> recordClass)", "testcase": false, "constructor": false}, {"identifier": "createRecord", "parameters": "(RecordConfig config, OrmFactory<T> factory)", "modifiers": "@Override public", "return": "T", "signature": "T createRecord(RecordConfig config, OrmFactory<T> factory)", "full_signature": "@Override public T createRecord(RecordConfig config, OrmFactory<T> factory)", "class_method_signature": "SimpleCatalogManager.createRecord(RecordConfig config, OrmFactory<T> factory)", "testcase": false, "constructor": false}, {"identifier": "addRecord", "parameters": "(Resource catalogId, T record)", "modifiers": "@Override public", "return": "void", "signature": "void addRecord(Resource catalogId, T record)", "full_signature": "@Override public void addRecord(Resource catalogId, T record)", "class_method_signature": "SimpleCatalogManager.addRecord(Resource catalogId, T record)", "testcase": false, "constructor": false}, {"identifier": "updateRecord", "parameters": "(Resource catalogId, T newRecord)", "modifiers": "@Override public", "return": "void", "signature": "void updateRecord(Resource catalogId, T newRecord)", "full_signature": "@Override public void updateRecord(Resource catalogId, T newRecord)", "class_method_signature": "SimpleCatalogManager.updateRecord(Resource catalogId, T newRecord)", "testcase": false, "constructor": false}, {"identifier": "removeRecord", "parameters": "(Resource catalogId, Resource recordId, OrmFactory<T> factory)", "modifiers": "@Override public", "return": "T", "signature": "T removeRecord(Resource catalogId, Resource recordId, OrmFactory<T> factory)", "full_signature": "@Override public T removeRecord(Resource catalogId, Resource recordId, OrmFactory<T> factory)", "class_method_signature": "SimpleCatalogManager.removeRecord(Resource catalogId, Resource recordId, OrmFactory<T> factory)", "testcase": false, "constructor": false}, {"identifier": "deleteRecord", "parameters": "(User user, Resource recordId, Class<T> recordClass)", "modifiers": "@Override public", "return": "T", "signature": "T deleteRecord(User user, Resource recordId, Class<T> recordClass)", "full_signature": "@Override public T deleteRecord(User user, Resource recordId, Class<T> recordClass)", "class_method_signature": "SimpleCatalogManager.deleteRecord(User user, Resource recordId, Class<T> recordClass)", "testcase": false, "constructor": false}, {"identifier": "getRecord", "parameters": "(Resource catalogId, Resource recordId, OrmFactory<T> factory)", "modifiers": "@Override public", "return": "Optional<T>", "signature": "Optional<T> getRecord(Resource catalogId, Resource recordId, OrmFactory<T> factory)", "full_signature": "@Override public Optional<T> getRecord(Resource catalogId, Resource recordId, OrmFactory<T> factory)", "class_method_signature": "SimpleCatalogManager.getRecord(Resource catalogId, Resource recordId, OrmFactory<T> factory)", "testcase": false, "constructor": false}, {"identifier": "getUnversionedDistributions", "parameters": "(Resource catalogId, Resource unversionedRecordId)", "modifiers": "@Override public", "return": "Set<Distribution>", "signature": "Set<Distribution> getUnversionedDistributions(Resource catalogId, Resource unversionedRecordId)", "full_signature": "@Override public Set<Distribution> getUnversionedDistributions(Resource catalogId, Resource unversionedRecordId)", "class_method_signature": "SimpleCatalogManager.getUnversionedDistributions(Resource catalogId, Resource unversionedRecordId)", "testcase": false, "constructor": false}, {"identifier": "createDistribution", "parameters": "(DistributionConfig config)", "modifiers": "@Override public", "return": "Distribution", "signature": "Distribution createDistribution(DistributionConfig config)", "full_signature": "@Override public Distribution createDistribution(DistributionConfig config)", "class_method_signature": "SimpleCatalogManager.createDistribution(DistributionConfig config)", "testcase": false, "constructor": false}, {"identifier": "addUnversionedDistribution", "parameters": "(Resource catalogId, Resource unversionedRecordId,\n                                           Distribution distribution)", "modifiers": "@Override public", "return": "void", "signature": "void addUnversionedDistribution(Resource catalogId, Resource unversionedRecordId,\n                                           Distribution distribution)", "full_signature": "@Override public void addUnversionedDistribution(Resource catalogId, Resource unversionedRecordId,\n                                           Distribution distribution)", "class_method_signature": "SimpleCatalogManager.addUnversionedDistribution(Resource catalogId, Resource unversionedRecordId,\n                                           Distribution distribution)", "testcase": false, "constructor": false}, {"identifier": "updateUnversionedDistribution", "parameters": "(Resource catalogId, Resource unversionedRecordId,\n                                              Distribution newDistribution)", "modifiers": "@Override public", "return": "void", "signature": "void updateUnversionedDistribution(Resource catalogId, Resource unversionedRecordId,\n                                              Distribution newDistribution)", "full_signature": "@Override public void updateUnversionedDistribution(Resource catalogId, Resource unversionedRecordId,\n                                              Distribution newDistribution)", "class_method_signature": "SimpleCatalogManager.updateUnversionedDistribution(Resource catalogId, Resource unversionedRecordId,\n                                              Distribution newDistribution)", "testcase": false, "constructor": false}, {"identifier": "removeUnversionedDistribution", "parameters": "(Resource catalogId, Resource unversionedRecordId,\n                                              Resource distributionId)", "modifiers": "@Override public", "return": "void", "signature": "void removeUnversionedDistribution(Resource catalogId, Resource unversionedRecordId,\n                                              Resource distributionId)", "full_signature": "@Override public void removeUnversionedDistribution(Resource catalogId, Resource unversionedRecordId,\n                                              Resource distributionId)", "class_method_signature": "SimpleCatalogManager.removeUnversionedDistribution(Resource catalogId, Resource unversionedRecordId,\n                                              Resource distributionId)", "testcase": false, "constructor": false}, {"identifier": "getUnversionedDistribution", "parameters": "(Resource catalogId, Resource unversionedRecordId,\n                                                             Resource distributionId)", "modifiers": "@Override public", "return": "Optional<Distribution>", "signature": "Optional<Distribution> getUnversionedDistribution(Resource catalogId, Resource unversionedRecordId,\n                                                             Resource distributionId)", "full_signature": "@Override public Optional<Distribution> getUnversionedDistribution(Resource catalogId, Resource unversionedRecordId,\n                                                             Resource distributionId)", "class_method_signature": "SimpleCatalogManager.getUnversionedDistribution(Resource catalogId, Resource unversionedRecordId,\n                                                             Resource distributionId)", "testcase": false, "constructor": false}, {"identifier": "getVersions", "parameters": "(Resource catalogId, Resource versionedRecordId)", "modifiers": "@Override public", "return": "Set<Version>", "signature": "Set<Version> getVersions(Resource catalogId, Resource versionedRecordId)", "full_signature": "@Override public Set<Version> getVersions(Resource catalogId, Resource versionedRecordId)", "class_method_signature": "SimpleCatalogManager.getVersions(Resource catalogId, Resource versionedRecordId)", "testcase": false, "constructor": false}, {"identifier": "createVersion", "parameters": "(@Nonnull String title, String description, OrmFactory<T> factory)", "modifiers": "@Override public", "return": "T", "signature": "T createVersion(@Nonnull String title, String description, OrmFactory<T> factory)", "full_signature": "@Override public T createVersion(@Nonnull String title, String description, OrmFactory<T> factory)", "class_method_signature": "SimpleCatalogManager.createVersion(@Nonnull String title, String description, OrmFactory<T> factory)", "testcase": false, "constructor": false}, {"identifier": "addVersion", "parameters": "(Resource catalogId, Resource versionedRecordId, T version)", "modifiers": "@Override public", "return": "void", "signature": "void addVersion(Resource catalogId, Resource versionedRecordId, T version)", "full_signature": "@Override public void addVersion(Resource catalogId, Resource versionedRecordId, T version)", "class_method_signature": "SimpleCatalogManager.addVersion(Resource catalogId, Resource versionedRecordId, T version)", "testcase": false, "constructor": false}, {"identifier": "updateVersion", "parameters": "(Resource catalogId, Resource versionedRecordId, T newVersion)", "modifiers": "@Override public", "return": "void", "signature": "void updateVersion(Resource catalogId, Resource versionedRecordId, T newVersion)", "full_signature": "@Override public void updateVersion(Resource catalogId, Resource versionedRecordId, T newVersion)", "class_method_signature": "SimpleCatalogManager.updateVersion(Resource catalogId, Resource versionedRecordId, T newVersion)", "testcase": false, "constructor": false}, {"identifier": "removeVersion", "parameters": "(Resource catalogId, Resource versionedRecordId, Resource versionId)", "modifiers": "@Override public", "return": "void", "signature": "void removeVersion(Resource catalogId, Resource versionedRecordId, Resource versionId)", "full_signature": "@Override public void removeVersion(Resource catalogId, Resource versionedRecordId, Resource versionId)", "class_method_signature": "SimpleCatalogManager.removeVersion(Resource catalogId, Resource versionedRecordId, Resource versionId)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "(Resource catalogId, Resource versionedRecordId,\n                                                      Resource versionId, OrmFactory<T> factory)", "modifiers": "@Override public", "return": "Optional<T>", "signature": "Optional<T> getVersion(Resource catalogId, Resource versionedRecordId,\n                                                      Resource versionId, OrmFactory<T> factory)", "full_signature": "@Override public Optional<T> getVersion(Resource catalogId, Resource versionedRecordId,\n                                                      Resource versionId, OrmFactory<T> factory)", "class_method_signature": "SimpleCatalogManager.getVersion(Resource catalogId, Resource versionedRecordId,\n                                                      Resource versionId, OrmFactory<T> factory)", "testcase": false, "constructor": false}, {"identifier": "getLatestVersion", "parameters": "(Resource catalogId, Resource versionedRecordId,\n                                                            OrmFactory<T> factory)", "modifiers": "@Override public", "return": "Optional<T>", "signature": "Optional<T> getLatestVersion(Resource catalogId, Resource versionedRecordId,\n                                                            OrmFactory<T> factory)", "full_signature": "@Override public Optional<T> getLatestVersion(Resource catalogId, Resource versionedRecordId,\n                                                            OrmFactory<T> factory)", "class_method_signature": "SimpleCatalogManager.getLatestVersion(Resource catalogId, Resource versionedRecordId,\n                                                            OrmFactory<T> factory)", "testcase": false, "constructor": false}, {"identifier": "getTaggedCommit", "parameters": "(Resource catalogId, Resource versionedRecordId, Resource versionId)", "modifiers": "@Override public", "return": "Commit", "signature": "Commit getTaggedCommit(Resource catalogId, Resource versionedRecordId, Resource versionId)", "full_signature": "@Override public Commit getTaggedCommit(Resource catalogId, Resource versionedRecordId, Resource versionId)", "class_method_signature": "SimpleCatalogManager.getTaggedCommit(Resource catalogId, Resource versionedRecordId, Resource versionId)", "testcase": false, "constructor": false}, {"identifier": "getVersionedDistributions", "parameters": "(Resource catalogId, Resource versionedRecordId,\n                                                       Resource versionId)", "modifiers": "@Override public", "return": "Set<Distribution>", "signature": "Set<Distribution> getVersionedDistributions(Resource catalogId, Resource versionedRecordId,\n                                                       Resource versionId)", "full_signature": "@Override public Set<Distribution> getVersionedDistributions(Resource catalogId, Resource versionedRecordId,\n                                                       Resource versionId)", "class_method_signature": "SimpleCatalogManager.getVersionedDistributions(Resource catalogId, Resource versionedRecordId,\n                                                       Resource versionId)", "testcase": false, "constructor": false}, {"identifier": "addVersionedDistribution", "parameters": "(Resource catalogId, Resource versionedRecordId, Resource versionId,\n                                         Distribution distribution)", "modifiers": "@Override public", "return": "void", "signature": "void addVersionedDistribution(Resource catalogId, Resource versionedRecordId, Resource versionId,\n                                         Distribution distribution)", "full_signature": "@Override public void addVersionedDistribution(Resource catalogId, Resource versionedRecordId, Resource versionId,\n                                         Distribution distribution)", "class_method_signature": "SimpleCatalogManager.addVersionedDistribution(Resource catalogId, Resource versionedRecordId, Resource versionId,\n                                         Distribution distribution)", "testcase": false, "constructor": false}, {"identifier": "updateVersionedDistribution", "parameters": "(Resource catalogId, Resource versionedRecordId, Resource versionId,\n                                            Distribution newDistribution)", "modifiers": "@Override public", "return": "void", "signature": "void updateVersionedDistribution(Resource catalogId, Resource versionedRecordId, Resource versionId,\n                                            Distribution newDistribution)", "full_signature": "@Override public void updateVersionedDistribution(Resource catalogId, Resource versionedRecordId, Resource versionId,\n                                            Distribution newDistribution)", "class_method_signature": "SimpleCatalogManager.updateVersionedDistribution(Resource catalogId, Resource versionedRecordId, Resource versionId,\n                                            Distribution newDistribution)", "testcase": false, "constructor": false}, {"identifier": "removeVersionedDistribution", "parameters": "(Resource catalogId, Resource versionedRecordId, Resource versionId,\n                                            Resource distributionId)", "modifiers": "@Override public", "return": "void", "signature": "void removeVersionedDistribution(Resource catalogId, Resource versionedRecordId, Resource versionId,\n                                            Resource distributionId)", "full_signature": "@Override public void removeVersionedDistribution(Resource catalogId, Resource versionedRecordId, Resource versionId,\n                                            Resource distributionId)", "class_method_signature": "SimpleCatalogManager.removeVersionedDistribution(Resource catalogId, Resource versionedRecordId, Resource versionId,\n                                            Resource distributionId)", "testcase": false, "constructor": false}, {"identifier": "getVersionedDistribution", "parameters": "(Resource catalogId, Resource recordId, Resource versionId,\n                                                           Resource distributionId)", "modifiers": "@Override public", "return": "Optional<Distribution>", "signature": "Optional<Distribution> getVersionedDistribution(Resource catalogId, Resource recordId, Resource versionId,\n                                                           Resource distributionId)", "full_signature": "@Override public Optional<Distribution> getVersionedDistribution(Resource catalogId, Resource recordId, Resource versionId,\n                                                           Resource distributionId)", "class_method_signature": "SimpleCatalogManager.getVersionedDistribution(Resource catalogId, Resource recordId, Resource versionId,\n                                                           Resource distributionId)", "testcase": false, "constructor": false}, {"identifier": "getBranches", "parameters": "(Resource catalogId, Resource versionedRDFRecordId)", "modifiers": "@Override public", "return": "Set<Branch>", "signature": "Set<Branch> getBranches(Resource catalogId, Resource versionedRDFRecordId)", "full_signature": "@Override public Set<Branch> getBranches(Resource catalogId, Resource versionedRDFRecordId)", "class_method_signature": "SimpleCatalogManager.getBranches(Resource catalogId, Resource versionedRDFRecordId)", "testcase": false, "constructor": false}, {"identifier": "createBranch", "parameters": "(@Nonnull String title, String description, OrmFactory<T> factory)", "modifiers": "@Override public", "return": "T", "signature": "T createBranch(@Nonnull String title, String description, OrmFactory<T> factory)", "full_signature": "@Override public T createBranch(@Nonnull String title, String description, OrmFactory<T> factory)", "class_method_signature": "SimpleCatalogManager.createBranch(@Nonnull String title, String description, OrmFactory<T> factory)", "testcase": false, "constructor": false}, {"identifier": "addBranch", "parameters": "(Resource catalogId, Resource versionedRDFRecordId, T branch)", "modifiers": "@Override public", "return": "void", "signature": "void addBranch(Resource catalogId, Resource versionedRDFRecordId, T branch)", "full_signature": "@Override public void addBranch(Resource catalogId, Resource versionedRDFRecordId, T branch)", "class_method_signature": "SimpleCatalogManager.addBranch(Resource catalogId, Resource versionedRDFRecordId, T branch)", "testcase": false, "constructor": false}, {"identifier": "addMasterBranch", "parameters": "(Resource catalogId, Resource versionedRDFRecordId)", "modifiers": "@Override public", "return": "void", "signature": "void addMasterBranch(Resource catalogId, Resource versionedRDFRecordId)", "full_signature": "@Override public void addMasterBranch(Resource catalogId, Resource versionedRDFRecordId)", "class_method_signature": "SimpleCatalogManager.addMasterBranch(Resource catalogId, Resource versionedRDFRecordId)", "testcase": false, "constructor": false}, {"identifier": "addMasterBranch", "parameters": "(VersionedRDFRecord record, RepositoryConnection conn)", "modifiers": "private", "return": "void", "signature": "void addMasterBranch(VersionedRDFRecord record, RepositoryConnection conn)", "full_signature": "private void addMasterBranch(VersionedRDFRecord record, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogManager.addMasterBranch(VersionedRDFRecord record, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "updateBranch", "parameters": "(Resource catalogId, Resource versionedRDFRecordId, T newBranch)", "modifiers": "@Override public", "return": "void", "signature": "void updateBranch(Resource catalogId, Resource versionedRDFRecordId, T newBranch)", "full_signature": "@Override public void updateBranch(Resource catalogId, Resource versionedRDFRecordId, T newBranch)", "class_method_signature": "SimpleCatalogManager.updateBranch(Resource catalogId, Resource versionedRDFRecordId, T newBranch)", "testcase": false, "constructor": false}, {"identifier": "updateHead", "parameters": "(Resource catalogId, Resource versionedRDFRecordId, Resource branchId, Resource commitId)", "modifiers": "@Override public", "return": "void", "signature": "void updateHead(Resource catalogId, Resource versionedRDFRecordId, Resource branchId, Resource commitId)", "full_signature": "@Override public void updateHead(Resource catalogId, Resource versionedRDFRecordId, Resource branchId, Resource commitId)", "class_method_signature": "SimpleCatalogManager.updateHead(Resource catalogId, Resource versionedRDFRecordId, Resource branchId, Resource commitId)", "testcase": false, "constructor": false}, {"identifier": "removeBranch", "parameters": "(Resource catalogId, Resource versionedRDFRecordId, Resource branchId)", "modifiers": "@Override public", "return": "List<Resource>", "signature": "List<Resource> removeBranch(Resource catalogId, Resource versionedRDFRecordId, Resource branchId)", "full_signature": "@Override public List<Resource> removeBranch(Resource catalogId, Resource versionedRDFRecordId, Resource branchId)", "class_method_signature": "SimpleCatalogManager.removeBranch(Resource catalogId, Resource versionedRDFRecordId, Resource branchId)", "testcase": false, "constructor": false}, {"identifier": "getBranch", "parameters": "(Resource catalogId, Resource versionedRDFRecordId,\n                                                    Resource branchId, OrmFactory<T> factory)", "modifiers": "@Override public", "return": "Optional<T>", "signature": "Optional<T> getBranch(Resource catalogId, Resource versionedRDFRecordId,\n                                                    Resource branchId, OrmFactory<T> factory)", "full_signature": "@Override public Optional<T> getBranch(Resource catalogId, Resource versionedRDFRecordId,\n                                                    Resource branchId, OrmFactory<T> factory)", "class_method_signature": "SimpleCatalogManager.getBranch(Resource catalogId, Resource versionedRDFRecordId,\n                                                    Resource branchId, OrmFactory<T> factory)", "testcase": false, "constructor": false}, {"identifier": "getMasterBranch", "parameters": "(Resource catalogId, Resource versionedRDFRecordId)", "modifiers": "@Override public", "return": "Branch", "signature": "Branch getMasterBranch(Resource catalogId, Resource versionedRDFRecordId)", "full_signature": "@Override public Branch getMasterBranch(Resource catalogId, Resource versionedRDFRecordId)", "class_method_signature": "SimpleCatalogManager.getMasterBranch(Resource catalogId, Resource versionedRDFRecordId)", "testcase": false, "constructor": false}, {"identifier": "createCommit", "parameters": "(@Nonnull InProgressCommit inProgressCommit, @Nonnull String message, Commit baseCommit,\n                               Commit auxCommit)", "modifiers": "@Override public", "return": "Commit", "signature": "Commit createCommit(@Nonnull InProgressCommit inProgressCommit, @Nonnull String message, Commit baseCommit,\n                               Commit auxCommit)", "full_signature": "@Override public Commit createCommit(@Nonnull InProgressCommit inProgressCommit, @Nonnull String message, Commit baseCommit,\n                               Commit auxCommit)", "class_method_signature": "SimpleCatalogManager.createCommit(@Nonnull InProgressCommit inProgressCommit, @Nonnull String message, Commit baseCommit,\n                               Commit auxCommit)", "testcase": false, "constructor": false}, {"identifier": "createInProgressCommit", "parameters": "(User user)", "modifiers": "@Override public", "return": "InProgressCommit", "signature": "InProgressCommit createInProgressCommit(User user)", "full_signature": "@Override public InProgressCommit createInProgressCommit(User user)", "class_method_signature": "SimpleCatalogManager.createInProgressCommit(User user)", "testcase": false, "constructor": false}, {"identifier": "updateInProgressCommit", "parameters": "(Resource catalogId, Resource versionedRDFRecordId, Resource commitId,\n                                       @Nullable Model additions, @Nullable Model deletions)", "modifiers": "@Override public", "return": "void", "signature": "void updateInProgressCommit(Resource catalogId, Resource versionedRDFRecordId, Resource commitId,\n                                       @Nullable Model additions, @Nullable Model deletions)", "full_signature": "@Override public void updateInProgressCommit(Resource catalogId, Resource versionedRDFRecordId, Resource commitId,\n                                       @Nullable Model additions, @Nullable Model deletions)", "class_method_signature": "SimpleCatalogManager.updateInProgressCommit(Resource catalogId, Resource versionedRDFRecordId, Resource commitId,\n                                       @Nullable Model additions, @Nullable Model deletions)", "testcase": false, "constructor": false}, {"identifier": "updateInProgressCommit", "parameters": "(Resource catalogId, Resource versionedRDFRecordId, User user,\n                                       @Nullable Model additions, @Nullable Model deletions)", "modifiers": "@Override public", "return": "void", "signature": "void updateInProgressCommit(Resource catalogId, Resource versionedRDFRecordId, User user,\n                                       @Nullable Model additions, @Nullable Model deletions)", "full_signature": "@Override public void updateInProgressCommit(Resource catalogId, Resource versionedRDFRecordId, User user,\n                                       @Nullable Model additions, @Nullable Model deletions)", "class_method_signature": "SimpleCatalogManager.updateInProgressCommit(Resource catalogId, Resource versionedRDFRecordId, User user,\n                                       @Nullable Model additions, @Nullable Model deletions)", "testcase": false, "constructor": false}, {"identifier": "addInProgressCommit", "parameters": "(Resource catalogId, Resource versionedRDFRecordId,\n                                    InProgressCommit inProgressCommit)", "modifiers": "@Override public", "return": "void", "signature": "void addInProgressCommit(Resource catalogId, Resource versionedRDFRecordId,\n                                    InProgressCommit inProgressCommit)", "full_signature": "@Override public void addInProgressCommit(Resource catalogId, Resource versionedRDFRecordId,\n                                    InProgressCommit inProgressCommit)", "class_method_signature": "SimpleCatalogManager.addInProgressCommit(Resource catalogId, Resource versionedRDFRecordId,\n                                    InProgressCommit inProgressCommit)", "testcase": false, "constructor": false}, {"identifier": "getCommit", "parameters": "(Resource commitId)", "modifiers": "@Override public", "return": "Optional<Commit>", "signature": "Optional<Commit> getCommit(Resource commitId)", "full_signature": "@Override public Optional<Commit> getCommit(Resource commitId)", "class_method_signature": "SimpleCatalogManager.getCommit(Resource commitId)", "testcase": false, "constructor": false}, {"identifier": "getCommit", "parameters": "(Resource catalogId, Resource versionedRDFRecordId, Resource branchId,\n                                      Resource commitId)", "modifiers": "@Override public", "return": "Optional<Commit>", "signature": "Optional<Commit> getCommit(Resource catalogId, Resource versionedRDFRecordId, Resource branchId,\n                                      Resource commitId)", "full_signature": "@Override public Optional<Commit> getCommit(Resource catalogId, Resource versionedRDFRecordId, Resource branchId,\n                                      Resource commitId)", "class_method_signature": "SimpleCatalogManager.getCommit(Resource catalogId, Resource versionedRDFRecordId, Resource branchId,\n                                      Resource commitId)", "testcase": false, "constructor": false}, {"identifier": "getHeadCommit", "parameters": "(Resource catalogId, Resource versionedRDFRecordId, Resource branchId)", "modifiers": "@Override public", "return": "Commit", "signature": "Commit getHeadCommit(Resource catalogId, Resource versionedRDFRecordId, Resource branchId)", "full_signature": "@Override public Commit getHeadCommit(Resource catalogId, Resource versionedRDFRecordId, Resource branchId)", "class_method_signature": "SimpleCatalogManager.getHeadCommit(Resource catalogId, Resource versionedRDFRecordId, Resource branchId)", "testcase": false, "constructor": false}, {"identifier": "getInProgressCommit", "parameters": "(Resource catalogId, Resource versionedRDFRecordId,\n                                                          User user)", "modifiers": "@Override public", "return": "Optional<InProgressCommit>", "signature": "Optional<InProgressCommit> getInProgressCommit(Resource catalogId, Resource versionedRDFRecordId,\n                                                          User user)", "full_signature": "@Override public Optional<InProgressCommit> getInProgressCommit(Resource catalogId, Resource versionedRDFRecordId,\n                                                          User user)", "class_method_signature": "SimpleCatalogManager.getInProgressCommit(Resource catalogId, Resource versionedRDFRecordId,\n                                                          User user)", "testcase": false, "constructor": false}, {"identifier": "getInProgressCommit", "parameters": "(Resource catalogId, Resource versionedRDFRecordId,\n                                                          Resource inProgressCommitId)", "modifiers": "@Override public", "return": "Optional<InProgressCommit>", "signature": "Optional<InProgressCommit> getInProgressCommit(Resource catalogId, Resource versionedRDFRecordId,\n                                                          Resource inProgressCommitId)", "full_signature": "@Override public Optional<InProgressCommit> getInProgressCommit(Resource catalogId, Resource versionedRDFRecordId,\n                                                          Resource inProgressCommitId)", "class_method_signature": "SimpleCatalogManager.getInProgressCommit(Resource catalogId, Resource versionedRDFRecordId,\n                                                          Resource inProgressCommitId)", "testcase": false, "constructor": false}, {"identifier": "getRevision", "parameters": "(Resource commitId)", "modifiers": "@Override public", "return": "Revision", "signature": "Revision getRevision(Resource commitId)", "full_signature": "@Override public Revision getRevision(Resource commitId)", "class_method_signature": "SimpleCatalogManager.getRevision(Resource commitId)", "testcase": false, "constructor": false}, {"identifier": "getRevisionChanges", "parameters": "(Resource commitId)", "modifiers": "@Override public", "return": "Difference", "signature": "Difference getRevisionChanges(Resource commitId)", "full_signature": "@Override public Difference getRevisionChanges(Resource commitId)", "class_method_signature": "SimpleCatalogManager.getRevisionChanges(Resource commitId)", "testcase": false, "constructor": false}, {"identifier": "getCommitDifference", "parameters": "(Resource commitId)", "modifiers": "@Override public", "return": "Difference", "signature": "Difference getCommitDifference(Resource commitId)", "full_signature": "@Override public Difference getCommitDifference(Resource commitId)", "class_method_signature": "SimpleCatalogManager.getCommitDifference(Resource commitId)", "testcase": false, "constructor": false}, {"identifier": "removeInProgressCommit", "parameters": "(Resource catalogId, Resource versionedRDFRecordId,\n                                       Resource inProgressCommitId)", "modifiers": "@Override public", "return": "void", "signature": "void removeInProgressCommit(Resource catalogId, Resource versionedRDFRecordId,\n                                       Resource inProgressCommitId)", "full_signature": "@Override public void removeInProgressCommit(Resource catalogId, Resource versionedRDFRecordId,\n                                       Resource inProgressCommitId)", "class_method_signature": "SimpleCatalogManager.removeInProgressCommit(Resource catalogId, Resource versionedRDFRecordId,\n                                       Resource inProgressCommitId)", "testcase": false, "constructor": false}, {"identifier": "removeInProgressCommit", "parameters": "(Resource catalogId, Resource versionedRDFRecordId, User user)", "modifiers": "@Override public", "return": "void", "signature": "void removeInProgressCommit(Resource catalogId, Resource versionedRDFRecordId, User user)", "full_signature": "@Override public void removeInProgressCommit(Resource catalogId, Resource versionedRDFRecordId, User user)", "class_method_signature": "SimpleCatalogManager.removeInProgressCommit(Resource catalogId, Resource versionedRDFRecordId, User user)", "testcase": false, "constructor": false}, {"identifier": "applyInProgressCommit", "parameters": "(Resource inProgressCommitId, Model entity)", "modifiers": "@Override public", "return": "Model", "signature": "Model applyInProgressCommit(Resource inProgressCommitId, Model entity)", "full_signature": "@Override public Model applyInProgressCommit(Resource inProgressCommitId, Model entity)", "class_method_signature": "SimpleCatalogManager.applyInProgressCommit(Resource inProgressCommitId, Model entity)", "testcase": false, "constructor": false}, {"identifier": "getCommitChain", "parameters": "(Resource commitId)", "modifiers": "@Override public", "return": "List<Commit>", "signature": "List<Commit> getCommitChain(Resource commitId)", "full_signature": "@Override public List<Commit> getCommitChain(Resource commitId)", "class_method_signature": "SimpleCatalogManager.getCommitChain(Resource commitId)", "testcase": false, "constructor": false}, {"identifier": "getCommitChain", "parameters": "(Resource commitId, Resource targetId)", "modifiers": "@Override public", "return": "List<Commit>", "signature": "List<Commit> getCommitChain(Resource commitId, Resource targetId)", "full_signature": "@Override public List<Commit> getCommitChain(Resource commitId, Resource targetId)", "class_method_signature": "SimpleCatalogManager.getCommitChain(Resource commitId, Resource targetId)", "testcase": false, "constructor": false}, {"identifier": "getCommitChain", "parameters": "(Resource catalogId, Resource versionedRDFRecordId, Resource branchId)", "modifiers": "@Override public", "return": "List<Commit>", "signature": "List<Commit> getCommitChain(Resource catalogId, Resource versionedRDFRecordId, Resource branchId)", "full_signature": "@Override public List<Commit> getCommitChain(Resource catalogId, Resource versionedRDFRecordId, Resource branchId)", "class_method_signature": "SimpleCatalogManager.getCommitChain(Resource catalogId, Resource versionedRDFRecordId, Resource branchId)", "testcase": false, "constructor": false}, {"identifier": "getCommitChain", "parameters": "(Resource catalogId, Resource versionedRDFRecordId, Resource branchId,\n                                       final Resource targetBranchId)", "modifiers": "@Override public", "return": "List<Commit>", "signature": "List<Commit> getCommitChain(Resource catalogId, Resource versionedRDFRecordId, Resource branchId,\n                                       final Resource targetBranchId)", "full_signature": "@Override public List<Commit> getCommitChain(Resource catalogId, Resource versionedRDFRecordId, Resource branchId,\n                                       final Resource targetBranchId)", "class_method_signature": "SimpleCatalogManager.getCommitChain(Resource catalogId, Resource versionedRDFRecordId, Resource branchId,\n                                       final Resource targetBranchId)", "testcase": false, "constructor": false}, {"identifier": "getCommitEntityChain", "parameters": "(Resource commitId, Resource entityId)", "modifiers": "@Override public", "return": "List<Commit>", "signature": "List<Commit> getCommitEntityChain(Resource commitId, Resource entityId)", "full_signature": "@Override public List<Commit> getCommitEntityChain(Resource commitId, Resource entityId)", "class_method_signature": "SimpleCatalogManager.getCommitEntityChain(Resource commitId, Resource entityId)", "testcase": false, "constructor": false}, {"identifier": "getCommitEntityChain", "parameters": "(Resource commitId, Resource targetId, Resource entityId)", "modifiers": "@Override public", "return": "List<Commit>", "signature": "List<Commit> getCommitEntityChain(Resource commitId, Resource targetId, Resource entityId)", "full_signature": "@Override public List<Commit> getCommitEntityChain(Resource commitId, Resource targetId, Resource entityId)", "class_method_signature": "SimpleCatalogManager.getCommitEntityChain(Resource commitId, Resource targetId, Resource entityId)", "testcase": false, "constructor": false}, {"identifier": "getCompiledResource", "parameters": "(Resource commitId)", "modifiers": "@Override public", "return": "Model", "signature": "Model getCompiledResource(Resource commitId)", "full_signature": "@Override public Model getCompiledResource(Resource commitId)", "class_method_signature": "SimpleCatalogManager.getCompiledResource(Resource commitId)", "testcase": false, "constructor": false}, {"identifier": "getCompiledResource", "parameters": "(List<Commit> commitList)", "modifiers": "@Override public", "return": "Model", "signature": "Model getCompiledResource(List<Commit> commitList)", "full_signature": "@Override public Model getCompiledResource(List<Commit> commitList)", "class_method_signature": "SimpleCatalogManager.getCompiledResource(List<Commit> commitList)", "testcase": false, "constructor": false}, {"identifier": "getCompiledResource", "parameters": "(Resource versionedRDFRecordId, Resource branchId, Resource commitId)", "modifiers": "@Override public", "return": "Model", "signature": "Model getCompiledResource(Resource versionedRDFRecordId, Resource branchId, Resource commitId)", "full_signature": "@Override public Model getCompiledResource(Resource versionedRDFRecordId, Resource branchId, Resource commitId)", "class_method_signature": "SimpleCatalogManager.getCompiledResource(Resource versionedRDFRecordId, Resource branchId, Resource commitId)", "testcase": false, "constructor": false}, {"identifier": "getDifference", "parameters": "(Resource sourceCommitId, Resource targetCommitId)", "modifiers": "@Override public", "return": "Difference", "signature": "Difference getDifference(Resource sourceCommitId, Resource targetCommitId)", "full_signature": "@Override public Difference getDifference(Resource sourceCommitId, Resource targetCommitId)", "class_method_signature": "SimpleCatalogManager.getDifference(Resource sourceCommitId, Resource targetCommitId)", "testcase": false, "constructor": false}, {"identifier": "getConflicts", "parameters": "(Resource leftId, Resource rightId)", "modifiers": "@Override public", "return": "Set<Conflict>", "signature": "Set<Conflict> getConflicts(Resource leftId, Resource rightId)", "full_signature": "@Override public Set<Conflict> getConflicts(Resource leftId, Resource rightId)", "class_method_signature": "SimpleCatalogManager.getConflicts(Resource leftId, Resource rightId)", "testcase": false, "constructor": false}, {"identifier": "getDiff", "parameters": "(Model original, Model changed)", "modifiers": "@Override public", "return": "Difference", "signature": "Difference getDiff(Model original, Model changed)", "full_signature": "@Override public Difference getDiff(Model original, Model changed)", "class_method_signature": "SimpleCatalogManager.getDiff(Model original, Model changed)", "testcase": false, "constructor": false}, {"identifier": "export", "parameters": "(Resource recordIRI, RecordOperationConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void export(Resource recordIRI, RecordOperationConfig config)", "full_signature": "@Override public void export(Resource recordIRI, RecordOperationConfig config)", "class_method_signature": "SimpleCatalogManager.export(Resource recordIRI, RecordOperationConfig config)", "testcase": false, "constructor": false}, {"identifier": "export", "parameters": "(List<Resource> recordIRIs, RecordOperationConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void export(List<Resource> recordIRIs, RecordOperationConfig config)", "full_signature": "@Override public void export(List<Resource> recordIRIs, RecordOperationConfig config)", "class_method_signature": "SimpleCatalogManager.export(List<Resource> recordIRIs, RecordOperationConfig config)", "testcase": false, "constructor": false}, {"identifier": "getFactory", "parameters": "(Resource recordId, RepositoryConnection conn, boolean exactOnly)", "modifiers": "private", "return": "OrmFactory<? extends Record>", "signature": "OrmFactory<? extends Record> getFactory(Resource recordId, RepositoryConnection conn, boolean exactOnly)", "full_signature": "private OrmFactory<? extends Record> getFactory(Resource recordId, RepositoryConnection conn, boolean exactOnly)", "class_method_signature": "SimpleCatalogManager.getFactory(Resource recordId, RepositoryConnection conn, boolean exactOnly)", "testcase": false, "constructor": false}, {"identifier": "createSortingOptions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createSortingOptions()", "full_signature": "private void createSortingOptions()", "class_method_signature": "SimpleCatalogManager.createSortingOptions()", "testcase": false, "constructor": false}, {"identifier": "addPropertiesToRecord", "parameters": "(T record, RecordConfig config, OffsetDateTime issued,\n                                                       OffsetDateTime modified)", "modifiers": "private", "return": "T", "signature": "T addPropertiesToRecord(T record, RecordConfig config, OffsetDateTime issued,\n                                                       OffsetDateTime modified)", "full_signature": "private T addPropertiesToRecord(T record, RecordConfig config, OffsetDateTime issued,\n                                                       OffsetDateTime modified)", "class_method_signature": "SimpleCatalogManager.addPropertiesToRecord(T record, RecordConfig config, OffsetDateTime issued,\n                                                       OffsetDateTime modified)", "testcase": false, "constructor": false}, {"identifier": "removeUnversionedRecord", "parameters": "(Record record, RepositoryConnection conn)", "modifiers": "private", "return": "void", "signature": "void removeUnversionedRecord(Record record, RepositoryConnection conn)", "full_signature": "private void removeUnversionedRecord(Record record, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogManager.removeUnversionedRecord(Record record, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "removeVersionedRecord", "parameters": "(Record record, RepositoryConnection conn)", "modifiers": "private", "return": "void", "signature": "void removeVersionedRecord(Record record, RepositoryConnection conn)", "full_signature": "private void removeVersionedRecord(Record record, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogManager.removeVersionedRecord(Record record, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "removeVersionedRDFRecord", "parameters": "(Record record, RepositoryConnection conn)", "modifiers": "private", "return": "void", "signature": "void removeVersionedRDFRecord(Record record, RepositoryConnection conn)", "full_signature": "private void removeVersionedRDFRecord(Record record, RepositoryConnection conn)", "class_method_signature": "SimpleCatalogManager.removeVersionedRDFRecord(Record record, RepositoryConnection conn)", "testcase": false, "constructor": false}], "file": "com.mobi.catalog.impl/src/main/java/com/mobi/catalog/impl/SimpleCatalogManager.java"}, "focal_method": {"identifier": "getVersionedDistributions", "parameters": "(Resource catalogId, Resource versionedRecordId,\n                                                       Resource versionId)", "modifiers": "@Override public", "return": "Set<Distribution>", "body": "@Override\n    public Set<Distribution> getVersionedDistributions(Resource catalogId, Resource versionedRecordId,\n                                                       Resource versionId) {\n        try (RepositoryConnection conn = configProvider.getRepository().getConnection()) {\n            Version version = utils.getVersion(catalogId, versionedRecordId, versionId, versionFactory, conn);\n            return version.getVersionedDistribution_resource().stream()\n                    .map(resource -> utils.getExpectedObject(resource, distributionFactory, conn))\n                    .collect(Collectors.toSet());\n        }\n    }", "signature": "Set<Distribution> getVersionedDistributions(Resource catalogId, Resource versionedRecordId,\n                                                       Resource versionId)", "full_signature": "@Override public Set<Distribution> getVersionedDistributions(Resource catalogId, Resource versionedRecordId,\n                                                       Resource versionId)", "class_method_signature": "SimpleCatalogManager.getVersionedDistributions(Resource catalogId, Resource versionedRecordId,\n                                                       Resource versionId)", "testcase": false, "constructor": false, "invocations": ["getConnection", "getRepository", "getVersion", "collect", "map", "stream", "getVersionedDistribution_resource", "getExpectedObject", "toSet"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}