{"test_class": {"identifier": "EventMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EventMapper mapper;", "modifier": "private", "type": "EventMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "@Mock\n    HandicapGroupSetMapper handicapGroupSetMapper;", "modifier": "@Mock", "type": "HandicapGroupSetMapper", "declarator": "handicapGroupSetMapper", "var_name": "handicapGroupSetMapper"}, {"original_string": "@Mock\n    HandicapGroupSetService handicapGroupSetService;", "modifier": "@Mock", "type": "HandicapGroupSetService", "declarator": "handicapGroupSetService", "var_name": "handicapGroupSetService"}, {"original_string": "@Mock\n    CompetitionGroupSetMapper competitionGroupSetMapper;", "modifier": "@Mock", "type": "CompetitionGroupSetMapper", "declarator": "competitionGroupSetMapper", "var_name": "competitionGroupSetMapper"}, {"original_string": "@Mock\n    CompetitionGroupSetService competitionGroupSetService;", "modifier": "@Mock", "type": "CompetitionGroupSetService", "declarator": "competitionGroupSetService", "var_name": "competitionGroupSetService"}, {"original_string": "@Mock\n    HandicapGroupSet handicapGroupSetDomainEntity;", "modifier": "@Mock", "type": "HandicapGroupSet", "declarator": "handicapGroupSetDomainEntity", "var_name": "handicapGroupSetDomainEntity"}, {"original_string": "@Mock\n    CompetitionGroupSet competitionGroupSetDomainEntity;", "modifier": "@Mock", "type": "CompetitionGroupSet", "declarator": "competitionGroupSetDomainEntity", "var_name": "competitionGroupSetDomainEntity"}], "file": "service/src/test/java/org/coner/core/mapper/EventMapperTest.java"}, "test_case": {"identifier": "whenToDomainAddPayloadFromApiAddRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void whenToDomainAddPayloadFromApiAddRequest() throws EntityNotFoundException {\n        AddEventRequest apiAddRequest = ApiRequestTestUtils.fullAddEvent();\n        EventAddPayload expected = DomainPayloadTestUtils.fullEventAdd();\n        expected.setHandicapGroupSet(handicapGroupSetDomainEntity);\n        expected.setCompetitionGroupSet(competitionGroupSetDomainEntity);\n        when(handicapGroupSetService.getById(TestConstants.HANDICAP_GROUP_SET_ID))\n                .thenReturn(handicapGroupSetDomainEntity);\n        when(competitionGroupSetService.getById(TestConstants.COMPETITION_GROUP_SET_ID))\n                .thenReturn(competitionGroupSetDomainEntity);\n\n        EventAddPayload actual = mapper.toDomainAddPayload(apiAddRequest);\n\n        assertThat(actual).isEqualTo(expected);\n    }", "signature": "void whenToDomainAddPayloadFromApiAddRequest()", "full_signature": "@Test public void whenToDomainAddPayloadFromApiAddRequest()", "class_method_signature": "EventMapperTest.whenToDomainAddPayloadFromApiAddRequest()", "testcase": true, "constructor": false, "invocations": ["fullAddEvent", "fullEventAdd", "setHandicapGroupSet", "setCompetitionGroupSet", "thenReturn", "when", "getById", "thenReturn", "when", "getById", "toDomainAddPayload", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "EventMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EventDao dao;", "modifier": "private", "type": "EventDao", "declarator": "dao", "var_name": "dao"}, {"original_string": "private HandicapGroupSetMapper handicapGroupSetMapper;", "modifier": "private", "type": "HandicapGroupSetMapper", "declarator": "handicapGroupSetMapper", "var_name": "handicapGroupSetMapper"}, {"original_string": "private HandicapGroupSetService handicapGroupSetService;", "modifier": "private", "type": "HandicapGroupSetService", "declarator": "handicapGroupSetService", "var_name": "handicapGroupSetService"}, {"original_string": "private CompetitionGroupSetMapper competitionGroupSetMapper;", "modifier": "private", "type": "CompetitionGroupSetMapper", "declarator": "competitionGroupSetMapper", "var_name": "competitionGroupSetMapper"}, {"original_string": "private CompetitionGroupSetService competitionGroupSetService;", "modifier": "private", "type": "CompetitionGroupSetService", "declarator": "competitionGroupSetService", "var_name": "competitionGroupSetService"}], "methods": [{"identifier": "toDomainAddPayload", "parameters": "(AddEventRequest apiAddRequest)", "modifiers": "@Mappings({ @Mapping(source = \"apiAddRequest.handicapGroupSetId\", target = \"handicapGroupSet\"), @Mapping(source = \"apiAddRequest.competitionGroupSetId\", target = \"competitionGroupSet\") }) public abstract", "return": "EventAddPayload", "signature": "EventAddPayload toDomainAddPayload(AddEventRequest apiAddRequest)", "full_signature": "@Mappings({ @Mapping(source = \"apiAddRequest.handicapGroupSetId\", target = \"handicapGroupSet\"), @Mapping(source = \"apiAddRequest.competitionGroupSetId\", target = \"competitionGroupSet\") }) public abstract EventAddPayload toDomainAddPayload(AddEventRequest apiAddRequest)", "class_method_signature": "EventMapper.toDomainAddPayload(AddEventRequest apiAddRequest)", "testcase": false, "constructor": false}, {"identifier": "toApiEntity", "parameters": "(Event domainEntity)", "modifiers": "@Mappings({ @Mapping(source = \"domainEntity.handicapGroupSet.id\", target = \"handicapGroupSetId\"), @Mapping(source = \"domainEntity.competitionGroupSet.id\", target = \"competitionGroupSetId\") }) public abstract", "return": "EventApiEntity", "signature": "EventApiEntity toApiEntity(Event domainEntity)", "full_signature": "@Mappings({ @Mapping(source = \"domainEntity.handicapGroupSet.id\", target = \"handicapGroupSetId\"), @Mapping(source = \"domainEntity.competitionGroupSet.id\", target = \"competitionGroupSetId\") }) public abstract EventApiEntity toApiEntity(Event domainEntity)", "class_method_signature": "EventMapper.toApiEntity(Event domainEntity)", "testcase": false, "constructor": false}, {"identifier": "toApiEntityList", "parameters": "(List<Event> domainEntityList)", "modifiers": "public abstract", "return": "List<EventApiEntity>", "signature": "List<EventApiEntity> toApiEntityList(List<Event> domainEntityList)", "full_signature": "public abstract List<EventApiEntity> toApiEntityList(List<Event> domainEntityList)", "class_method_signature": "EventMapper.toApiEntityList(List<Event> domainEntityList)", "testcase": false, "constructor": false}, {"identifier": "toHibernateEntity", "parameters": "(EventAddPayload domainAddPayload)", "modifiers": "public abstract", "return": "EventHibernateEntity", "signature": "EventHibernateEntity toHibernateEntity(EventAddPayload domainAddPayload)", "full_signature": "public abstract EventHibernateEntity toHibernateEntity(EventAddPayload domainAddPayload)", "class_method_signature": "EventMapper.toHibernateEntity(EventAddPayload domainAddPayload)", "testcase": false, "constructor": false}, {"identifier": "toHibernateEntity", "parameters": "(Event domainEntity)", "modifiers": "public", "return": "EventHibernateEntity", "signature": "EventHibernateEntity toHibernateEntity(Event domainEntity)", "full_signature": "public EventHibernateEntity toHibernateEntity(Event domainEntity)", "class_method_signature": "EventMapper.toHibernateEntity(Event domainEntity)", "testcase": false, "constructor": false}, {"identifier": "updateHibernateEntity", "parameters": "(\n            Event domainEntity,\n            @MappingTarget EventHibernateEntity hibernateEntity\n    )", "modifiers": "public abstract", "return": "void", "signature": "void updateHibernateEntity(\n            Event domainEntity,\n            @MappingTarget EventHibernateEntity hibernateEntity\n    )", "full_signature": "public abstract void updateHibernateEntity(\n            Event domainEntity,\n            @MappingTarget EventHibernateEntity hibernateEntity\n    )", "class_method_signature": "EventMapper.updateHibernateEntity(\n            Event domainEntity,\n            @MappingTarget EventHibernateEntity hibernateEntity\n    )", "testcase": false, "constructor": false}, {"identifier": "toDomainEntity", "parameters": "(EventHibernateEntity hibernateEntity)", "modifiers": "public abstract", "return": "Event", "signature": "Event toDomainEntity(EventHibernateEntity hibernateEntity)", "full_signature": "public abstract Event toDomainEntity(EventHibernateEntity hibernateEntity)", "class_method_signature": "EventMapper.toDomainEntity(EventHibernateEntity hibernateEntity)", "testcase": false, "constructor": false}, {"identifier": "toDomainEntityList", "parameters": "(List<EventHibernateEntity> hibernateEntityList)", "modifiers": "public abstract", "return": "List<Event>", "signature": "List<Event> toDomainEntityList(List<EventHibernateEntity> hibernateEntityList)", "full_signature": "public abstract List<Event> toDomainEntityList(List<EventHibernateEntity> hibernateEntityList)", "class_method_signature": "EventMapper.toDomainEntityList(List<EventHibernateEntity> hibernateEntityList)", "testcase": false, "constructor": false}, {"identifier": "toDomainHandicapGroupSet", "parameters": "(String handicapGroupSetId)", "modifiers": "public", "return": "HandicapGroupSet", "signature": "HandicapGroupSet toDomainHandicapGroupSet(String handicapGroupSetId)", "full_signature": "public HandicapGroupSet toDomainHandicapGroupSet(String handicapGroupSetId)", "class_method_signature": "EventMapper.toDomainHandicapGroupSet(String handicapGroupSetId)", "testcase": false, "constructor": false}, {"identifier": "toDomainCompetitionGroupSet", "parameters": "(String competitionGroupSetId)", "modifiers": "public", "return": "CompetitionGroupSet", "signature": "CompetitionGroupSet toDomainCompetitionGroupSet(String competitionGroupSetId)", "full_signature": "public CompetitionGroupSet toDomainCompetitionGroupSet(String competitionGroupSetId)", "class_method_signature": "EventMapper.toDomainCompetitionGroupSet(String competitionGroupSetId)", "testcase": false, "constructor": false}, {"identifier": "toHibernateEntity", "parameters": "(HandicapGroupSet domainEntity)", "modifiers": "public", "return": "HandicapGroupSetHibernateEntity", "signature": "HandicapGroupSetHibernateEntity toHibernateEntity(HandicapGroupSet domainEntity)", "full_signature": "public HandicapGroupSetHibernateEntity toHibernateEntity(HandicapGroupSet domainEntity)", "class_method_signature": "EventMapper.toHibernateEntity(HandicapGroupSet domainEntity)", "testcase": false, "constructor": false}, {"identifier": "toHibernateEntity", "parameters": "(CompetitionGroupSet domainEntity)", "modifiers": "public", "return": "CompetitionGroupSetHibernateEntity", "signature": "CompetitionGroupSetHibernateEntity toHibernateEntity(CompetitionGroupSet domainEntity)", "full_signature": "public CompetitionGroupSetHibernateEntity toHibernateEntity(CompetitionGroupSet domainEntity)", "class_method_signature": "EventMapper.toHibernateEntity(CompetitionGroupSet domainEntity)", "testcase": false, "constructor": false}, {"identifier": "toDomainEntity", "parameters": "(HandicapGroupSetHibernateEntity hibernateEntity)", "modifiers": "public", "return": "HandicapGroupSet", "signature": "HandicapGroupSet toDomainEntity(HandicapGroupSetHibernateEntity hibernateEntity)", "full_signature": "public HandicapGroupSet toDomainEntity(HandicapGroupSetHibernateEntity hibernateEntity)", "class_method_signature": "EventMapper.toDomainEntity(HandicapGroupSetHibernateEntity hibernateEntity)", "testcase": false, "constructor": false}, {"identifier": "toDomainEntity", "parameters": "(CompetitionGroupSetHibernateEntity hibernateEntity)", "modifiers": "public", "return": "CompetitionGroupSet", "signature": "CompetitionGroupSet toDomainEntity(CompetitionGroupSetHibernateEntity hibernateEntity)", "full_signature": "public CompetitionGroupSet toDomainEntity(CompetitionGroupSetHibernateEntity hibernateEntity)", "class_method_signature": "EventMapper.toDomainEntity(CompetitionGroupSetHibernateEntity hibernateEntity)", "testcase": false, "constructor": false}, {"identifier": "setDao", "parameters": "(EventDao dao)", "modifiers": "public", "return": "void", "signature": "void setDao(EventDao dao)", "full_signature": "public void setDao(EventDao dao)", "class_method_signature": "EventMapper.setDao(EventDao dao)", "testcase": false, "constructor": false}, {"identifier": "setHandicapGroupSetMapper", "parameters": "(HandicapGroupSetMapper handicapGroupSetMapper)", "modifiers": "public", "return": "void", "signature": "void setHandicapGroupSetMapper(HandicapGroupSetMapper handicapGroupSetMapper)", "full_signature": "public void setHandicapGroupSetMapper(HandicapGroupSetMapper handicapGroupSetMapper)", "class_method_signature": "EventMapper.setHandicapGroupSetMapper(HandicapGroupSetMapper handicapGroupSetMapper)", "testcase": false, "constructor": false}, {"identifier": "setHandicapGroupSetService", "parameters": "(HandicapGroupSetService handicapGroupSetService)", "modifiers": "public", "return": "void", "signature": "void setHandicapGroupSetService(HandicapGroupSetService handicapGroupSetService)", "full_signature": "public void setHandicapGroupSetService(HandicapGroupSetService handicapGroupSetService)", "class_method_signature": "EventMapper.setHandicapGroupSetService(HandicapGroupSetService handicapGroupSetService)", "testcase": false, "constructor": false}, {"identifier": "setCompetitionGroupSetMapper", "parameters": "(CompetitionGroupSetMapper competitionGroupSetMapper)", "modifiers": "public", "return": "void", "signature": "void setCompetitionGroupSetMapper(CompetitionGroupSetMapper competitionGroupSetMapper)", "full_signature": "public void setCompetitionGroupSetMapper(CompetitionGroupSetMapper competitionGroupSetMapper)", "class_method_signature": "EventMapper.setCompetitionGroupSetMapper(CompetitionGroupSetMapper competitionGroupSetMapper)", "testcase": false, "constructor": false}, {"identifier": "setCompetitionGroupSetService", "parameters": "(CompetitionGroupSetService competitionGroupSetService)", "modifiers": "public", "return": "void", "signature": "void setCompetitionGroupSetService(CompetitionGroupSetService competitionGroupSetService)", "full_signature": "public void setCompetitionGroupSetService(CompetitionGroupSetService competitionGroupSetService)", "class_method_signature": "EventMapper.setCompetitionGroupSetService(CompetitionGroupSetService competitionGroupSetService)", "testcase": false, "constructor": false}], "file": "service/src/main/java/org/coner/core/mapper/EventMapper.java"}, "focal_method": {"identifier": "toDomainAddPayload", "parameters": "(AddEventRequest apiAddRequest)", "modifiers": "@Mappings({ @Mapping(source = \"apiAddRequest.handicapGroupSetId\", target = \"handicapGroupSet\"), @Mapping(source = \"apiAddRequest.competitionGroupSetId\", target = \"competitionGroupSet\") }) public abstract", "return": "EventAddPayload", "body": "@Mappings({\n            @Mapping(source = \"apiAddRequest.handicapGroupSetId\", target = \"handicapGroupSet\"),\n            @Mapping(source = \"apiAddRequest.competitionGroupSetId\", target = \"competitionGroupSet\")\n    })\n    public abstract EventAddPayload toDomainAddPayload(AddEventRequest apiAddRequest);", "signature": "EventAddPayload toDomainAddPayload(AddEventRequest apiAddRequest)", "full_signature": "@Mappings({ @Mapping(source = \"apiAddRequest.handicapGroupSetId\", target = \"handicapGroupSet\"), @Mapping(source = \"apiAddRequest.competitionGroupSetId\", target = \"competitionGroupSet\") }) public abstract EventAddPayload toDomainAddPayload(AddEventRequest apiAddRequest)", "class_method_signature": "EventMapper.toDomainAddPayload(AddEventRequest apiAddRequest)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28649714, "url": "https://github.com/caeos/coner-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 1027, "license": "licensed"}}