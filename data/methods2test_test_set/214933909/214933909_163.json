{"test_class": {"identifier": "ProjectServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ProjectService projectService;", "modifier": "@Mock\n    private", "type": "ProjectService", "declarator": "projectService", "var_name": "projectService"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/service/ProjectServiceTest.java"}, "test_case": {"identifier": "deleteProjectTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void deleteProjectTest() throws SQLException {\n        Project project = Project.builder().id(1L).name(\"name\").build();\n        Assert.assertTrue(projectService.deleteProject(project).getCode() == ServiceResult.SUCCESS);\n    }", "signature": "void deleteProjectTest()", "full_signature": "@Test public void deleteProjectTest()", "class_method_signature": "ProjectServiceTest.deleteProjectTest()", "testcase": true, "constructor": false, "invocations": ["build", "name", "id", "builder", "assertTrue", "getCode", "deleteProject"]}, "focal_class": {"identifier": "ProjectService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ProjectDao projectDao;", "modifier": "@Autowired\n    private", "type": "ProjectDao", "declarator": "projectDao", "var_name": "projectDao"}, {"original_string": "@Autowired\n    private UserProjectDao userProjectDao;", "modifier": "@Autowired\n    private", "type": "UserProjectDao", "declarator": "userProjectDao", "var_name": "userProjectDao"}, {"original_string": "@Autowired\n    private ProjectDbsetRelationDao projectDbsetRelationDao;", "modifier": "@Autowired\n    private", "type": "ProjectDbsetRelationDao", "declarator": "projectDbsetRelationDao", "var_name": "projectDbsetRelationDao"}, {"original_string": "@Autowired\n    private SelectEntityDao selectEntityDao;", "modifier": "@Autowired\n    private", "type": "SelectEntityDao", "declarator": "selectEntityDao", "var_name": "selectEntityDao"}, {"original_string": "@Autowired\n    private Message message;", "modifier": "@Autowired\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Autowired\n    private PermissionService permissionService;", "modifier": "@Autowired\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}, {"original_string": "@Autowired\n    private DeleteCheckDao deleteCheckDao;", "modifier": "@Autowired\n    private", "type": "DeleteCheckDao", "declarator": "deleteCheckDao", "var_name": "deleteCheckDao"}, {"original_string": "@Autowired\n    private ProjectConfiguration projectConfiguration;", "modifier": "@Autowired\n    private", "type": "ProjectConfiguration", "declarator": "projectConfiguration", "var_name": "projectConfiguration"}, {"original_string": "@Autowired\n    private DefaultConfiguration defaultConfiguration;", "modifier": "@Autowired\n    private", "type": "DefaultConfiguration", "declarator": "defaultConfiguration", "var_name": "defaultConfiguration"}], "methods": [{"identifier": "validatePermision", "parameters": "(LoginUser user, Project project, Errors errors)", "modifiers": "public", "return": "ValidatorChain", "signature": "ValidatorChain validatePermision(LoginUser user, Project project, Errors errors)", "full_signature": "public ValidatorChain validatePermision(LoginUser user, Project project, Errors errors)", "class_method_signature": "ProjectService.validatePermision(LoginUser user, Project project, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "validatePermision", "parameters": "(Long userId, Long groupId, Errors errors)", "modifiers": "private", "return": "ValidatorChain", "signature": "ValidatorChain validatePermision(Long userId, Long groupId, Errors errors)", "full_signature": "private ValidatorChain validatePermision(Long userId, Long groupId, Errors errors)", "class_method_signature": "ProjectService.validatePermision(Long userId, Long groupId, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "insertProject", "parameters": "(Project project)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> insertProject(Project project)", "full_signature": "public ServiceResult<String> insertProject(Project project)", "class_method_signature": "ProjectService.insertProject(Project project)", "testcase": false, "constructor": false}, {"identifier": "updateProject", "parameters": "(Project project)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> updateProject(Project project)", "full_signature": "public ServiceResult<String> updateProject(Project project)", "class_method_signature": "ProjectService.updateProject(Project project)", "testcase": false, "constructor": false}, {"identifier": "deleteCheck", "parameters": "(Long projectId)", "modifiers": "public", "return": "ServiceResult", "signature": "ServiceResult deleteCheck(Long projectId)", "full_signature": "public ServiceResult deleteCheck(Long projectId)", "class_method_signature": "ProjectService.deleteCheck(Long projectId)", "testcase": false, "constructor": false}, {"identifier": "deleteProject", "parameters": "(Project project)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> deleteProject(Project project)", "full_signature": "public ServiceResult<String> deleteProject(Project project)", "class_method_signature": "ProjectService.deleteProject(Project project)", "testcase": false, "constructor": false}, {"identifier": "findProjectPageList", "parameters": "(Paging<ProjectModel> paging)", "modifiers": "public", "return": "ListResult<ProjectView>", "signature": "ListResult<ProjectView> findProjectPageList(Paging<ProjectModel> paging)", "full_signature": "public ListResult<ProjectView> findProjectPageList(Paging<ProjectModel> paging)", "class_method_signature": "ProjectService.findProjectPageList(Paging<ProjectModel> paging)", "testcase": false, "constructor": false}, {"identifier": "isExistByAppId", "parameters": "(String appid)", "modifiers": "public", "return": "boolean", "signature": "boolean isExistByAppId(String appid)", "full_signature": "public boolean isExistByAppId(String appid)", "class_method_signature": "ProjectService.isExistByAppId(String appid)", "testcase": false, "constructor": false}, {"identifier": "isNotExistByAppId", "parameters": "(Project project)", "modifiers": "public", "return": "boolean", "signature": "boolean isNotExistByAppId(Project project)", "full_signature": "public boolean isNotExistByAppId(Project project)", "class_method_signature": "ProjectService.isNotExistByAppId(Project project)", "testcase": false, "constructor": false}, {"identifier": "isNotExistByName", "parameters": "(Project project)", "modifiers": "public", "return": "boolean", "signature": "boolean isNotExistByName(Project project)", "full_signature": "public boolean isNotExistByName(Project project)", "class_method_signature": "ProjectService.isNotExistByName(Project project)", "testcase": false, "constructor": false}, {"identifier": "toProjectDbsetRelations", "parameters": "(Project project)", "modifiers": "private", "return": "List<ProjectDbsetRelation>", "signature": "List<ProjectDbsetRelation> toProjectDbsetRelations(Project project)", "full_signature": "private List<ProjectDbsetRelation> toProjectDbsetRelations(Project project)", "class_method_signature": "ProjectService.toProjectDbsetRelations(Project project)", "testcase": false, "constructor": false}, {"identifier": "toProjectDbsetRelations", "parameters": "(Project project, Set<Long> addDbsetIds)", "modifiers": "private", "return": "List<ProjectDbsetRelation>", "signature": "List<ProjectDbsetRelation> toProjectDbsetRelations(Project project, Set<Long> addDbsetIds)", "full_signature": "private List<ProjectDbsetRelation> toProjectDbsetRelations(Project project, Set<Long> addDbsetIds)", "class_method_signature": "ProjectService.toProjectDbsetRelations(Project project, Set<Long> addDbsetIds)", "testcase": false, "constructor": false}, {"identifier": "toUserProjects", "parameters": "(Project project)", "modifiers": "private", "return": "List<UserProject>", "signature": "List<UserProject> toUserProjects(Project project)", "full_signature": "private List<UserProject> toUserProjects(Project project)", "class_method_signature": "ProjectService.toUserProjects(Project project)", "testcase": false, "constructor": false}, {"identifier": "toUserProjects", "parameters": "(Project project, Set<Long> addUserIds)", "modifiers": "private", "return": "List<UserProject>", "signature": "List<UserProject> toUserProjects(Project project, Set<Long> addUserIds)", "full_signature": "private List<UserProject> toUserProjects(Project project, Set<Long> addUserIds)", "class_method_signature": "ProjectService.toUserProjects(Project project, Set<Long> addUserIds)", "testcase": false, "constructor": false}, {"identifier": "generateProjectXml", "parameters": "(LoginUser user, Long projectId, String codeGenFilePath)", "modifiers": "public", "return": "ServiceResult", "signature": "ServiceResult generateProjectXml(LoginUser user, Long projectId, String codeGenFilePath)", "full_signature": "public ServiceResult generateProjectXml(LoginUser user, Long projectId, String codeGenFilePath)", "class_method_signature": "ProjectService.generateProjectXml(LoginUser user, Long projectId, String codeGenFilePath)", "testcase": false, "constructor": false}, {"identifier": "addDataCenter", "parameters": "(LoginUser user, Project project)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> addDataCenter(LoginUser user, Project project)", "full_signature": "public ServiceResult<String> addDataCenter(LoginUser user, Project project)", "class_method_signature": "ProjectService.addDataCenter(LoginUser user, Project project)", "testcase": false, "constructor": false}, {"identifier": "updateDataCenter", "parameters": "(LoginUser user, Project oldProject, ProjectView oldProjectView, Project newProject)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> updateDataCenter(LoginUser user, Project oldProject, ProjectView oldProjectView, Project newProject)", "full_signature": "public ServiceResult<String> updateDataCenter(LoginUser user, Project oldProject, ProjectView oldProjectView, Project newProject)", "class_method_signature": "ProjectService.updateDataCenter(LoginUser user, Project oldProject, ProjectView oldProjectView, Project newProject)", "testcase": false, "constructor": false}, {"identifier": "deleteDataCenter", "parameters": "(LoginUser user, Project projec)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> deleteDataCenter(LoginUser user, Project projec)", "full_signature": "public ServiceResult<String> deleteDataCenter(LoginUser user, Project projec)", "class_method_signature": "ProjectService.deleteDataCenter(LoginUser user, Project projec)", "testcase": false, "constructor": false}, {"identifier": "syncProject", "parameters": "(LoginUser user, Project project)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> syncProject(LoginUser user, Project project)", "full_signature": "public ServiceResult<String> syncProject(LoginUser user, Project project)", "class_method_signature": "ProjectService.syncProject(LoginUser user, Project project)", "testcase": false, "constructor": false}, {"identifier": "getCheckData", "parameters": "(LoginUser user, Project project)", "modifiers": "public", "return": "ConfigCkeckResult<List<ConfigDataResponse>>", "signature": "ConfigCkeckResult<List<ConfigDataResponse>> getCheckData(LoginUser user, Project project)", "full_signature": "public ConfigCkeckResult<List<ConfigDataResponse>> getCheckData(LoginUser user, Project project)", "class_method_signature": "ProjectService.getCheckData(LoginUser user, Project project)", "testcase": false, "constructor": false}, {"identifier": "getProjectButton", "parameters": "(LoginUser user)", "modifiers": "public", "return": "ServiceResult", "signature": "ServiceResult getProjectButton(LoginUser user)", "full_signature": "public ServiceResult getProjectButton(LoginUser user)", "class_method_signature": "ProjectService.getProjectButton(LoginUser user)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/service/ProjectService.java"}, "focal_method": {"identifier": "deleteProject", "parameters": "(Project project)", "modifiers": "public", "return": "ServiceResult<String>", "body": "public ServiceResult<String> deleteProject(Project project) throws SQLException {\n        boolean isSussess = projectDao.getDasClient().execute(() -> {\n            int id = projectDao.deleteProject(project);\n            if (id <= 0) {\n                throw new TransactionException(message.db_message_delete_operation_failed);\n            }\n            id = selectEntityDao.deleteByProjectId(project.getId());\n            if (id < 0) {\n                throw new TransactionException(message.db_message_delete_operation_failed);\n            }\n            id = selectEntityDao.deleteByProjectId(project.getId());\n            if (id < 0) {\n                throw new TransactionException(message.db_message_delete_operation_failed);\n            }\n            id = projectDbsetRelationDao.deleteByProjectId(project.getId());\n            if (id < 0) {\n                throw new TransactionException(message.db_message_delete_operation_failed);\n            }\n            return true;\n        });\n        if (isSussess) {\n            return ServiceResult.success();\n        }\n        return ServiceResult.fail(\"deleteProject fail : \" + project.toString());\n    }", "signature": "ServiceResult<String> deleteProject(Project project)", "full_signature": "public ServiceResult<String> deleteProject(Project project)", "class_method_signature": "ProjectService.deleteProject(Project project)", "testcase": false, "constructor": false, "invocations": ["execute", "getDasClient", "deleteProject", "deleteByProjectId", "getId", "deleteByProjectId", "getId", "deleteByProjectId", "getId", "success", "fail", "toString"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}