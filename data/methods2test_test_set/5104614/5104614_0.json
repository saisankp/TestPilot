{"test_class": {"identifier": "JellyHyperlinkProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Document doc;", "modifier": "private", "type": "Document", "declarator": "doc", "var_name": "doc"}], "file": "stapler-plugin/src/test/java/org/kohsuke/stapler/netbeans/plugin/JellyHyperlinkProviderTest.java"}, "test_case": {"identifier": "getHyperlinkSpan", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void getHyperlinkSpan() throws Exception {\n        assertEquals(\"f:entry\", textFrom(JellyHyperlinkProvider.hyperlinkSpan(doc, offsetOf(\"ntry title=\\\"${\"))));\n        assertEquals(\"f:repeatableDeleteButton\", textFrom(JellyHyperlinkProvider.hyperlinkSpan(doc, offsetOf(\"peatableD\"))));\n        assertEquals(\"f:textbox\", textFrom(JellyHyperlinkProvider.hyperlinkSpan(doc, offsetOf(\"f:textbox\"))));\n        assertEquals(\"p:config-trigger\", textFrom(JellyHyperlinkProvider.hyperlinkSpan(doc, offsetOf(\"ig-tr\"))));\n    }", "signature": "void getHyperlinkSpan()", "full_signature": "@Test public void getHyperlinkSpan()", "class_method_signature": "JellyHyperlinkProviderTest.getHyperlinkSpan()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "textFrom", "hyperlinkSpan", "offsetOf", "assertEquals", "textFrom", "hyperlinkSpan", "offsetOf", "assertEquals", "textFrom", "hyperlinkSpan", "offsetOf", "assertEquals", "textFrom", "hyperlinkSpan", "offsetOf"]}, "focal_class": {"identifier": "JellyHyperlinkProvider", "superclass": "", "interfaces": "implements HyperlinkProviderExt", "fields": [{"original_string": "private static final Pattern OPEN_TAG = Pattern.compile(\"<((\\\\w+):([\\\\w-]+))[> \\n/]\");", "modifier": "private static final", "type": "Pattern", "declarator": "OPEN_TAG = Pattern.compile(\"<((\\\\w+):([\\\\w-]+))[> \\n/]\")", "var_name": "OPEN_TAG"}], "methods": [{"identifier": "getSupportedHyperlinkTypes", "parameters": "()", "modifiers": "@Override public", "return": "Set<HyperlinkType>", "signature": "Set<HyperlinkType> getSupportedHyperlinkTypes()", "full_signature": "@Override public Set<HyperlinkType> getSupportedHyperlinkTypes()", "class_method_signature": "JellyHyperlinkProvider.getSupportedHyperlinkTypes()", "testcase": false, "constructor": false}, {"identifier": "isHyperlinkPoint", "parameters": "(Document doc, int offset, HyperlinkType type)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isHyperlinkPoint(Document doc, int offset, HyperlinkType type)", "full_signature": "@Override public boolean isHyperlinkPoint(Document doc, int offset, HyperlinkType type)", "class_method_signature": "JellyHyperlinkProvider.isHyperlinkPoint(Document doc, int offset, HyperlinkType type)", "testcase": false, "constructor": false}, {"identifier": "getHyperlinkSpan", "parameters": "(Document doc, int offset, HyperlinkType type)", "modifiers": "@Override public", "return": "int[]", "signature": "int[] getHyperlinkSpan(Document doc, int offset, HyperlinkType type)", "full_signature": "@Override public int[] getHyperlinkSpan(Document doc, int offset, HyperlinkType type)", "class_method_signature": "JellyHyperlinkProvider.getHyperlinkSpan(Document doc, int offset, HyperlinkType type)", "testcase": false, "constructor": false}, {"identifier": "performClickAction", "parameters": "(Document doc, int offset, HyperlinkType type)", "modifiers": "@Override public", "return": "void", "signature": "void performClickAction(Document doc, int offset, HyperlinkType type)", "full_signature": "@Override public void performClickAction(Document doc, int offset, HyperlinkType type)", "class_method_signature": "JellyHyperlinkProvider.performClickAction(Document doc, int offset, HyperlinkType type)", "testcase": false, "constructor": false}, {"identifier": "getTooltipText", "parameters": "(Document doc, int offset, HyperlinkType type)", "modifiers": "@Override public", "return": "String", "signature": "String getTooltipText(Document doc, int offset, HyperlinkType type)", "full_signature": "@Override public String getTooltipText(Document doc, int offset, HyperlinkType type)", "class_method_signature": "JellyHyperlinkProvider.getTooltipText(Document doc, int offset, HyperlinkType type)", "testcase": false, "constructor": false}, {"identifier": "hyperlinkSpan", "parameters": "(Document doc, int offset)", "modifiers": "static", "return": "int[]", "signature": "int[] hyperlinkSpan(Document doc, int offset)", "full_signature": "static int[] hyperlinkSpan(Document doc, int offset)", "class_method_signature": "JellyHyperlinkProvider.hyperlinkSpan(Document doc, int offset)", "testcase": false, "constructor": false}, {"identifier": "correspondingJellyResource", "parameters": "(Document doc, int offset)", "modifiers": "static @CheckForNull", "return": "String", "signature": "String correspondingJellyResource(Document doc, int offset)", "full_signature": "static @CheckForNull String correspondingJellyResource(Document doc, int offset)", "class_method_signature": "JellyHyperlinkProvider.correspondingJellyResource(Document doc, int offset)", "testcase": false, "constructor": false}], "file": "stapler-plugin/src/main/java/org/kohsuke/stapler/netbeans/plugin/JellyHyperlinkProvider.java"}, "focal_method": {"identifier": "getHyperlinkSpan", "parameters": "(Document doc, int offset, HyperlinkType type)", "modifiers": "@Override public", "return": "int[]", "body": "@Override public int[] getHyperlinkSpan(Document doc, int offset, HyperlinkType type) {\n        return hyperlinkSpan(doc, offset);\n    }", "signature": "int[] getHyperlinkSpan(Document doc, int offset, HyperlinkType type)", "full_signature": "@Override public int[] getHyperlinkSpan(Document doc, int offset, HyperlinkType type)", "class_method_signature": "JellyHyperlinkProvider.getHyperlinkSpan(Document doc, int offset, HyperlinkType type)", "testcase": false, "constructor": false, "invocations": ["hyperlinkSpan"]}, "repository": {"repo_id": 5104614, "url": "https://github.com/stapler/netbeans-stapler-plugin", "stars": 13, "created": "7/19/2012 2:41:47 AM +00:00", "updates": "2018-12-24T23:01:47+00:00", "fork": "False", "license": "licensed"}}