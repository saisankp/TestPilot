{"test_class": {"identifier": "StreamHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String BOUNDARY = \"someboundary\";", "modifier": "public static final", "type": "String", "declarator": "BOUNDARY = \"someboundary\"", "var_name": "BOUNDARY"}, {"original_string": "public static final String CONTENT_TYPE = \"application/pdf\";", "modifier": "public static final", "type": "String", "declarator": "CONTENT_TYPE = \"application/pdf\"", "var_name": "CONTENT_TYPE"}, {"original_string": "public static final int TOTAL_LENGTH = 0;", "modifier": "public static final", "type": "int", "declarator": "TOTAL_LENGTH = 0", "var_name": "TOTAL_LENGTH"}, {"original_string": "public static final String NEW_LINE = \"\\r\\n\";", "modifier": "public static final", "type": "String", "declarator": "NEW_LINE = \"\\r\\n\"", "var_name": "NEW_LINE"}, {"original_string": "private ByteArrayInputStream inputStream;", "modifier": "private", "type": "ByteArrayInputStream", "declarator": "inputStream", "var_name": "inputStream"}, {"original_string": "private ByteArrayOutputStream outputStream;", "modifier": "private", "type": "ByteArrayOutputStream", "declarator": "outputStream", "var_name": "outputStream"}, {"original_string": "private byte[] inputBytes;", "modifier": "private", "type": "byte[]", "declarator": "inputBytes", "var_name": "inputBytes"}, {"original_string": "private final RangeHelper rangeHelper = new RangeHelper();", "modifier": "private final", "type": "RangeHelper", "declarator": "rangeHelper = new RangeHelper()", "var_name": "rangeHelper"}, {"original_string": "private final RangePartHeaderSerializer rangePartHeaderSerializer = new RangePartHeaderSerializer();", "modifier": "private final", "type": "RangePartHeaderSerializer", "declarator": "rangePartHeaderSerializer = new RangePartHeaderSerializer()", "var_name": "rangePartHeaderSerializer"}, {"original_string": "private final StreamHelper streamHelper = new StreamHelper(rangeHelper, rangePartHeaderSerializer);", "modifier": "private final", "type": "StreamHelper", "declarator": "streamHelper = new StreamHelper(rangeHelper, rangePartHeaderSerializer)", "var_name": "streamHelper"}, {"original_string": "private final SliceHelper sliceHelper = new SliceHelper();", "modifier": "private final", "type": "SliceHelper", "declarator": "sliceHelper = new SliceHelper()", "var_name": "sliceHelper"}], "file": "http/src/test/java/ro/polak/http/servlet/helper/StreamHelperTest.java"}, "test_case": {"identifier": "shouldServeTheSameBytesForMultipleRangeGreaterThanTheBuffer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldServeTheSameBytesForMultipleRangeGreaterThanTheBuffer() throws IOException {\n        List<Range> ranges = new ArrayList<>();\n        ranges.add(new Range(0, 550));\n        ranges.add(new Range(1024, 1623));\n\n        byte[] inputBytesSliced = sliceHelper.getSliceForRanges(inputBytes, ranges);\n\n\n        streamHelper.serveMultiRangeStream(inputStream, outputStream, ranges, BOUNDARY, CONTENT_TYPE, TOTAL_LENGTH);\n\n        byte[] out = outputStream.toByteArray();\n\n        assertThat(out.length, is(equalTo(inputBytesSliced.length)));\n        assertThat(out, equalTo(inputBytesSliced));\n    }", "signature": "void shouldServeTheSameBytesForMultipleRangeGreaterThanTheBuffer()", "full_signature": "@Test public void shouldServeTheSameBytesForMultipleRangeGreaterThanTheBuffer()", "class_method_signature": "StreamHelperTest.shouldServeTheSameBytesForMultipleRangeGreaterThanTheBuffer()", "testcase": true, "constructor": false, "invocations": ["add", "add", "getSliceForRanges", "serveMultiRangeStream", "toByteArray", "assertThat", "is", "equalTo", "assertThat", "equalTo"]}, "focal_class": {"identifier": "StreamHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int BUFFER_SIZE = 512;", "modifier": "private static final", "type": "int", "declarator": "BUFFER_SIZE = 512", "var_name": "BUFFER_SIZE"}, {"original_string": "private static final String NEW_LINE = \"\\r\\n\";", "modifier": "private static final", "type": "String", "declarator": "NEW_LINE = \"\\r\\n\"", "var_name": "NEW_LINE"}, {"original_string": "private final RangeHelper rangeHelper;", "modifier": "private final", "type": "RangeHelper", "declarator": "rangeHelper", "var_name": "rangeHelper"}, {"original_string": "private final RangePartHeaderSerializer rangePartHeaderSerializer;", "modifier": "private final", "type": "RangePartHeaderSerializer", "declarator": "rangePartHeaderSerializer", "var_name": "rangePartHeaderSerializer"}], "methods": [{"identifier": "StreamHelper", "parameters": "(final RangeHelper rangeHelper,\n                        final RangePartHeaderSerializer rangePartHeaderSerializer)", "modifiers": "public", "return": "", "signature": " StreamHelper(final RangeHelper rangeHelper,\n                        final RangePartHeaderSerializer rangePartHeaderSerializer)", "full_signature": "public  StreamHelper(final RangeHelper rangeHelper,\n                        final RangePartHeaderSerializer rangePartHeaderSerializer)", "class_method_signature": "StreamHelper.StreamHelper(final RangeHelper rangeHelper,\n                        final RangePartHeaderSerializer rangePartHeaderSerializer)", "testcase": false, "constructor": true}, {"identifier": "serveMultiRangeStream", "parameters": "(final InputStream inputStream, final OutputStream outputStream)", "modifiers": "public", "return": "void", "signature": "void serveMultiRangeStream(final InputStream inputStream, final OutputStream outputStream)", "full_signature": "public void serveMultiRangeStream(final InputStream inputStream, final OutputStream outputStream)", "class_method_signature": "StreamHelper.serveMultiRangeStream(final InputStream inputStream, final OutputStream outputStream)", "testcase": false, "constructor": false}, {"identifier": "doServeRangeStream", "parameters": "(final InputStream inputStream, final OutputStream outputStream, final Range range)", "modifiers": "private", "return": "void", "signature": "void doServeRangeStream(final InputStream inputStream, final OutputStream outputStream, final Range range)", "full_signature": "private void doServeRangeStream(final InputStream inputStream, final OutputStream outputStream, final Range range)", "class_method_signature": "StreamHelper.doServeRangeStream(final InputStream inputStream, final OutputStream outputStream, final Range range)", "testcase": false, "constructor": false}, {"identifier": "serveMultiRangeStream", "parameters": "(final InputStream inputStream,\n                                      final OutputStream outputStream,\n                                      final List<Range> rangeList,\n                                      final String boundary,\n                                      final String contentType,\n                                      final long totalLength)", "modifiers": "public", "return": "void", "signature": "void serveMultiRangeStream(final InputStream inputStream,\n                                      final OutputStream outputStream,\n                                      final List<Range> rangeList,\n                                      final String boundary,\n                                      final String contentType,\n                                      final long totalLength)", "full_signature": "public void serveMultiRangeStream(final InputStream inputStream,\n                                      final OutputStream outputStream,\n                                      final List<Range> rangeList,\n                                      final String boundary,\n                                      final String contentType,\n                                      final long totalLength)", "class_method_signature": "StreamHelper.serveMultiRangeStream(final InputStream inputStream,\n                                      final OutputStream outputStream,\n                                      final List<Range> rangeList,\n                                      final String boundary,\n                                      final String contentType,\n                                      final long totalLength)", "testcase": false, "constructor": false}, {"identifier": "doServeRangePartHeader", "parameters": "(final OutputStream outputStream,\n                                        final String boundary,\n                                        final String contentType,\n                                        final long totalLength,\n                                        final Range range)", "modifiers": "private", "return": "void", "signature": "void doServeRangePartHeader(final OutputStream outputStream,\n                                        final String boundary,\n                                        final String contentType,\n                                        final long totalLength,\n                                        final Range range)", "full_signature": "private void doServeRangePartHeader(final OutputStream outputStream,\n                                        final String boundary,\n                                        final String contentType,\n                                        final long totalLength,\n                                        final Range range)", "class_method_signature": "StreamHelper.doServeRangePartHeader(final OutputStream outputStream,\n                                        final String boundary,\n                                        final String contentType,\n                                        final long totalLength,\n                                        final Range range)", "testcase": false, "constructor": false}, {"identifier": "serveMultiRangeStream", "parameters": "(final InputStream inputStream,\n                                      final OutputStream outputStream,\n                                      final Range range)", "modifiers": "public", "return": "void", "signature": "void serveMultiRangeStream(final InputStream inputStream,\n                                      final OutputStream outputStream,\n                                      final Range range)", "full_signature": "public void serveMultiRangeStream(final InputStream inputStream,\n                                      final OutputStream outputStream,\n                                      final Range range)", "class_method_signature": "StreamHelper.serveMultiRangeStream(final InputStream inputStream,\n                                      final OutputStream outputStream,\n                                      final Range range)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/servlet/helper/StreamHelper.java"}, "focal_method": {"identifier": "serveMultiRangeStream", "parameters": "(final InputStream inputStream, final OutputStream outputStream)", "modifiers": "public", "return": "void", "body": "public void serveMultiRangeStream(final InputStream inputStream, final OutputStream outputStream)\n            throws IOException {\n        int numberOfBufferReadBytes;\n        byte[] buffer = new byte[BUFFER_SIZE];\n\n        while ((numberOfBufferReadBytes = inputStream.read(buffer)) != -1) {\n            outputStream.write(buffer, 0, numberOfBufferReadBytes);\n            outputStream.flush();\n\n            Statistics.addBytesSent(numberOfBufferReadBytes);\n        }\n    }", "signature": "void serveMultiRangeStream(final InputStream inputStream, final OutputStream outputStream)", "full_signature": "public void serveMultiRangeStream(final InputStream inputStream, final OutputStream outputStream)", "class_method_signature": "StreamHelper.serveMultiRangeStream(final InputStream inputStream, final OutputStream outputStream)", "testcase": false, "constructor": false, "invocations": ["read", "write", "flush", "addBytesSent"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}