{"test_class": {"identifier": "RMQSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RMQSource<String> source;", "modifier": "private", "type": "RMQSource<String>", "declarator": "source", "var_name": "source"}, {"original_string": "private Configuration config = new Configuration();", "modifier": "private", "type": "Configuration", "declarator": "config = new Configuration()", "var_name": "config"}, {"original_string": "private Thread sourceThread;", "modifier": "private", "type": "Thread", "declarator": "sourceThread", "var_name": "sourceThread"}, {"original_string": "private volatile long messageId;", "modifier": "private volatile", "type": "long", "declarator": "messageId", "var_name": "messageId"}, {"original_string": "private boolean generateCorrelationIds;", "modifier": "private", "type": "boolean", "declarator": "generateCorrelationIds", "var_name": "generateCorrelationIds"}, {"original_string": "private volatile Exception exception;", "modifier": "private volatile", "type": "Exception", "declarator": "exception", "var_name": "exception"}], "file": "flink-streaming-connectors/flink-connector-rabbitmq/src/test/java/org/apache/flink/streaming/connectors/rabbitmq/RMQSourceTest.java"}, "test_case": {"identifier": "testConstructorParams", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testConstructorParams() {\n\t\t// verify construction params\n\t\tConstructorTestClass testObj = new ConstructorTestClass(\n\t\t\t\"hostTest\", 999, \"userTest\", \"passTest\",\n\t\t\t\"queueTest\", false, new StringDeserializationScheme());\n\n\t\ttry {\n\t\t\ttestObj.open(new Configuration());\n\t\t} catch (Exception e) {\n\t\t\t// connection fails but check if args have been passed correctly\n\t\t}\n\n\t\tassertEquals(\"hostTest\", testObj.getFactory().getHost());\n\t\tassertEquals(999, testObj.getFactory().getPort());\n\t\tassertEquals(\"userTest\", testObj.getFactory().getUsername());\n\t\tassertEquals(\"passTest\", testObj.getFactory().getPassword());\n\t}", "signature": "void testConstructorParams()", "full_signature": "@Test public void testConstructorParams()", "class_method_signature": "RMQSourceTest.testConstructorParams()", "testcase": true, "constructor": false, "invocations": ["open", "assertEquals", "getHost", "getFactory", "assertEquals", "getPort", "getFactory", "assertEquals", "getUsername", "getFactory", "assertEquals", "getPassword", "getFactory"]}, "focal_class": {"identifier": "RMQSource", "superclass": "extends MultipleIdsMessageAcknowledgingSourceBase<OUT, String, Long>", "interfaces": "implements ResultTypeQueryable<OUT>", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RMQSource.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RMQSource.class)", "var_name": "LOG"}, {"original_string": "private final String hostName;", "modifier": "private final", "type": "String", "declarator": "hostName", "var_name": "hostName"}, {"original_string": "private final Integer port;", "modifier": "private final", "type": "Integer", "declarator": "port", "var_name": "port"}, {"original_string": "private final String username;", "modifier": "private final", "type": "String", "declarator": "username", "var_name": "username"}, {"original_string": "private final String password;", "modifier": "private final", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "private final String queueName;", "modifier": "private final", "type": "String", "declarator": "queueName", "var_name": "queueName"}, {"original_string": "private final boolean usesCorrelationId;", "modifier": "private final", "type": "boolean", "declarator": "usesCorrelationId", "var_name": "usesCorrelationId"}, {"original_string": "protected DeserializationSchema<OUT> schema;", "modifier": "protected", "type": "DeserializationSchema<OUT>", "declarator": "schema", "var_name": "schema"}, {"original_string": "protected transient Connection connection;", "modifier": "protected transient", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "protected transient Channel channel;", "modifier": "protected transient", "type": "Channel", "declarator": "channel", "var_name": "channel"}, {"original_string": "protected transient QueueingConsumer consumer;", "modifier": "protected transient", "type": "QueueingConsumer", "declarator": "consumer", "var_name": "consumer"}, {"original_string": "protected transient boolean autoAck;", "modifier": "protected transient", "type": "boolean", "declarator": "autoAck", "var_name": "autoAck"}, {"original_string": "private transient volatile boolean running;", "modifier": "private transient volatile", "type": "boolean", "declarator": "running", "var_name": "running"}], "methods": [{"identifier": "RMQSource", "parameters": "(String hostName, String queueName,\n\t\t\t\tDeserializationSchema<OUT> deserializationSchema)", "modifiers": "public", "return": "", "signature": " RMQSource(String hostName, String queueName,\n\t\t\t\tDeserializationSchema<OUT> deserializationSchema)", "full_signature": "public  RMQSource(String hostName, String queueName,\n\t\t\t\tDeserializationSchema<OUT> deserializationSchema)", "class_method_signature": "RMQSource.RMQSource(String hostName, String queueName,\n\t\t\t\tDeserializationSchema<OUT> deserializationSchema)", "testcase": false, "constructor": true}, {"identifier": "RMQSource", "parameters": "(String hostName, String queueName, boolean usesCorrelationId,\n\t\t\t\tDeserializationSchema<OUT> deserializationSchema)", "modifiers": "public", "return": "", "signature": " RMQSource(String hostName, String queueName, boolean usesCorrelationId,\n\t\t\t\tDeserializationSchema<OUT> deserializationSchema)", "full_signature": "public  RMQSource(String hostName, String queueName, boolean usesCorrelationId,\n\t\t\t\tDeserializationSchema<OUT> deserializationSchema)", "class_method_signature": "RMQSource.RMQSource(String hostName, String queueName, boolean usesCorrelationId,\n\t\t\t\tDeserializationSchema<OUT> deserializationSchema)", "testcase": false, "constructor": true}, {"identifier": "RMQSource", "parameters": "(String hostName, Integer port,\n\t\t\t\tString queueName, boolean usesCorrelationId,\n\t\t\t\tDeserializationSchema<OUT> deserializationSchema)", "modifiers": "public", "return": "", "signature": " RMQSource(String hostName, Integer port,\n\t\t\t\tString queueName, boolean usesCorrelationId,\n\t\t\t\tDeserializationSchema<OUT> deserializationSchema)", "full_signature": "public  RMQSource(String hostName, Integer port,\n\t\t\t\tString queueName, boolean usesCorrelationId,\n\t\t\t\tDeserializationSchema<OUT> deserializationSchema)", "class_method_signature": "RMQSource.RMQSource(String hostName, Integer port,\n\t\t\t\tString queueName, boolean usesCorrelationId,\n\t\t\t\tDeserializationSchema<OUT> deserializationSchema)", "testcase": false, "constructor": true}, {"identifier": "RMQSource", "parameters": "(String hostName, Integer port, String username, String password,\n\t\t\t\tString queueName, boolean usesCorrelationId,\n\t\t\t\tDeserializationSchema<OUT> deserializationSchema)", "modifiers": "public", "return": "", "signature": " RMQSource(String hostName, Integer port, String username, String password,\n\t\t\t\tString queueName, boolean usesCorrelationId,\n\t\t\t\tDeserializationSchema<OUT> deserializationSchema)", "full_signature": "public  RMQSource(String hostName, Integer port, String username, String password,\n\t\t\t\tString queueName, boolean usesCorrelationId,\n\t\t\t\tDeserializationSchema<OUT> deserializationSchema)", "class_method_signature": "RMQSource.RMQSource(String hostName, Integer port, String username, String password,\n\t\t\t\tString queueName, boolean usesCorrelationId,\n\t\t\t\tDeserializationSchema<OUT> deserializationSchema)", "testcase": false, "constructor": true}, {"identifier": "setupConnectionFactory", "parameters": "()", "modifiers": "protected", "return": "ConnectionFactory", "signature": "ConnectionFactory setupConnectionFactory()", "full_signature": "protected ConnectionFactory setupConnectionFactory()", "class_method_signature": "RMQSource.setupConnectionFactory()", "testcase": false, "constructor": false}, {"identifier": "initializeConnection", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeConnection()", "full_signature": "private void initializeConnection()", "class_method_signature": "RMQSource.initializeConnection()", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(Configuration config)", "modifiers": "@Override public", "return": "void", "signature": "void open(Configuration config)", "full_signature": "@Override public void open(Configuration config)", "class_method_signature": "RMQSource.open(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "RMQSource.close()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(SourceContext<OUT> ctx)", "modifiers": "@Override public", "return": "void", "signature": "void run(SourceContext<OUT> ctx)", "full_signature": "@Override public void run(SourceContext<OUT> ctx)", "class_method_signature": "RMQSource.run(SourceContext<OUT> ctx)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "RMQSource.cancel()", "testcase": false, "constructor": false}, {"identifier": "acknowledgeSessionIDs", "parameters": "(List<Long> sessionIds)", "modifiers": "@Override protected", "return": "void", "signature": "void acknowledgeSessionIDs(List<Long> sessionIds)", "full_signature": "@Override protected void acknowledgeSessionIDs(List<Long> sessionIds)", "class_method_signature": "RMQSource.acknowledgeSessionIDs(List<Long> sessionIds)", "testcase": false, "constructor": false}, {"identifier": "getProducedType", "parameters": "()", "modifiers": "@Override public", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getProducedType()", "full_signature": "@Override public TypeInformation<OUT> getProducedType()", "class_method_signature": "RMQSource.getProducedType()", "testcase": false, "constructor": false}], "file": "flink-streaming-connectors/flink-connector-rabbitmq/src/main/java/org/apache/flink/streaming/connectors/rabbitmq/RMQSource.java"}, "focal_method": {"identifier": "open", "parameters": "(Configuration config)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void open(Configuration config) throws Exception {\n\t\tsuper.open(config);\n\t\tinitializeConnection();\n\t\trunning = true;\n\t}", "signature": "void open(Configuration config)", "full_signature": "@Override public void open(Configuration config)", "class_method_signature": "RMQSource.open(Configuration config)", "testcase": false, "constructor": false, "invocations": ["open", "initializeConnection"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}