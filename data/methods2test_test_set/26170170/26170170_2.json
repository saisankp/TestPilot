{"test_class": {"identifier": "GuestAtomFeedTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private GuestService guestService;", "modifier": "@Mock\n    private", "type": "GuestService", "declarator": "guestService", "var_name": "guestService"}, {"original_string": "@Mock\n    private Abdera abdera;", "modifier": "@Mock\n    private", "type": "Abdera", "declarator": "abdera", "var_name": "abdera"}, {"original_string": "@Mock\n    private UriInfo uriInfo;", "modifier": "@Mock\n    private", "type": "UriInfo", "declarator": "uriInfo", "var_name": "uriInfo"}], "file": "guest/src/test/java/org/koenighotze/jee7hotel/guest/business/GuestAtomFeedTest.java"}, "test_case": {"identifier": "the_feed_exposes_the_publicid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void the_feed_exposes_the_publicid() {\n        Guest guest = new Guest(\"123\", \"foo\", \"foo@bar.de\");\n        guest.setLastUpdate(now());\n        when(abdera.newFeed()).thenReturn(new FOMFeed());\n        when(uriInfo.getBaseUri()).thenReturn(create(\"http://localhost/\"));\n        when(guestService.getAllGuests()).thenReturn(singletonList(guest));\n\n        GuestAtomFeed guestAtomFeed = new GuestAtomFeed(guestService, abdera);\n        Feed guestFeed = guestAtomFeed.getGuestFeed(uriInfo);\n        List<Entry> entries = guestFeed.getEntries();\n\n        assertThat(entries).isNotEmpty();\n        Entry entry = entries.get(0);\n        assertThat(entry.getLinks().get(0).getHref().toASCIIString()).endsWith(\"/guests/123\");\n    }", "signature": "void the_feed_exposes_the_publicid()", "full_signature": "@Test public void the_feed_exposes_the_publicid()", "class_method_signature": "GuestAtomFeedTest.the_feed_exposes_the_publicid()", "testcase": true, "constructor": false, "invocations": ["setLastUpdate", "now", "thenReturn", "when", "newFeed", "thenReturn", "when", "getBaseUri", "create", "thenReturn", "when", "getAllGuests", "singletonList", "getGuestFeed", "getEntries", "isNotEmpty", "assertThat", "get", "endsWith", "assertThat", "toASCIIString", "getHref", "get", "getLinks"]}, "focal_class": {"identifier": "GuestAtomFeed", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(GuestAtomFeed.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(GuestAtomFeed.class.getName())", "var_name": "LOGGER"}, {"original_string": "private Abdera abdera;", "modifier": "private", "type": "Abdera", "declarator": "abdera", "var_name": "abdera"}, {"original_string": "private GuestService guestService;", "modifier": "private", "type": "GuestService", "declarator": "guestService", "var_name": "guestService"}], "methods": [{"identifier": "GuestAtomFeed", "parameters": "()", "modifiers": "public", "return": "", "signature": " GuestAtomFeed()", "full_signature": "public  GuestAtomFeed()", "class_method_signature": "GuestAtomFeed.GuestAtomFeed()", "testcase": false, "constructor": true}, {"identifier": "GuestAtomFeed", "parameters": "(GuestService guestService, Abdera abdera)", "modifiers": "@Inject public", "return": "", "signature": " GuestAtomFeed(GuestService guestService, Abdera abdera)", "full_signature": "@Inject public  GuestAtomFeed(GuestService guestService, Abdera abdera)", "class_method_signature": "GuestAtomFeed.GuestAtomFeed(GuestService guestService, Abdera abdera)", "testcase": false, "constructor": true}, {"identifier": "getGuestFeed", "parameters": "(@Context UriInfo uriInfo)", "modifiers": "@GET @Produces(MediaType.APPLICATION_ATOM_XML) public", "return": "Feed", "signature": "Feed getGuestFeed(@Context UriInfo uriInfo)", "full_signature": "@GET @Produces(MediaType.APPLICATION_ATOM_XML) public Feed getGuestFeed(@Context UriInfo uriInfo)", "class_method_signature": "GuestAtomFeed.getGuestFeed(@Context UriInfo uriInfo)", "testcase": false, "constructor": false}], "file": "guest/src/main/java/org/koenighotze/jee7hotel/guest/business/GuestAtomFeed.java"}, "focal_method": {"identifier": "getGuestFeed", "parameters": "(@Context UriInfo uriInfo)", "modifiers": "@GET @Produces(MediaType.APPLICATION_ATOM_XML) public", "return": "Feed", "body": "@GET\n    @Produces(MediaType.APPLICATION_ATOM_XML)\n    public Feed getGuestFeed(@Context UriInfo uriInfo) {\n        Feed feed = abdera.newFeed();\n\n        feed.setId(\"tag:koenighotze.org,2015:/guest\");\n        feed.setTitle(\"Guests\");\n        feed.setUpdated(new Date());\n\n        final String baseUri = uriInfo.getBaseUri().toString();\n        feed.addLink(baseUri + \"feed\", \"self\"); // todo self ref\n        guestService.getAllGuests().stream().forEach(guest -> {\n            Entry entry = feed.addEntry();\n            entry.setId(guest.getId() + \"\");\n            entry.setUpdated(from(guest.getLastUpdate().toInstant(UTC)));\n            entry.setAttributeValue(\"Version\", guest.getVersion() + \"\");\n            entry.addLink(baseUri + \"guests/\" + guest.getPublicId());\n        });\n\n        return feed;\n    }", "signature": "Feed getGuestFeed(@Context UriInfo uriInfo)", "full_signature": "@GET @Produces(MediaType.APPLICATION_ATOM_XML) public Feed getGuestFeed(@Context UriInfo uriInfo)", "class_method_signature": "GuestAtomFeed.getGuestFeed(@Context UriInfo uriInfo)", "testcase": false, "constructor": false, "invocations": ["newFeed", "setId", "setTitle", "setUpdated", "toString", "getBaseUri", "addLink", "forEach", "stream", "getAllGuests", "addEntry", "setId", "getId", "setUpdated", "from", "toInstant", "getLastUpdate", "setAttributeValue", "getVersion", "addLink", "getPublicId"]}, "repository": {"repo_id": 26170170, "url": "https://github.com/koenighotze/Hotel-Reservation-Tool", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 1659, "license": "licensed"}}