{"test_class": {"identifier": "HttpObserverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static HttpPost httpPost;", "modifier": "static", "type": "HttpPost", "declarator": "httpPost", "var_name": "httpPost"}], "file": "client/lookout-reg-server/src/test/java/com/alipay/lookout/remote/report/HttpObserverTest.java"}, "test_case": {"identifier": "testReportSnappy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReportSnappy() {\n        LookoutConfig config = new LookoutConfig();\n        AddressService addressService = new DefaultAddressService();\n        Registry registry = new DefaultRegistry();\n\n        HttpObserver observer = new HttpObserver(config, addressService, registry,\n            new TestHttpRequestProcessor());\n        observer.reportSnappy2Agent(new Address(\"localhost\"), \"hellohello\", null);\n        Assert.assertEquals(12, httpPost.getEntity().getContentLength());\n    }", "signature": "void testReportSnappy()", "full_signature": "@Test public void testReportSnappy()", "class_method_signature": "HttpObserverTest.testReportSnappy()", "testcase": true, "constructor": false, "invocations": ["reportSnappy2Agent", "assertEquals", "getContentLength", "getEntity"]}, "focal_class": {"identifier": "HttpObserver", "superclass": "", "interfaces": "implements MetricObserver<LookoutMeasurement>", "fields": [{"original_string": "private static final Logger        logger                     = LookoutLoggerFactory\n                                                                      .getLogger(HttpObserver.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger                     = LookoutLoggerFactory\n                                                                      .getLogger(HttpObserver.class)", "var_name": "logger"}, {"original_string": "public static final String         UTF_8                      = \"utf-8\";", "modifier": "public static final", "type": "String", "declarator": "UTF_8                      = \"utf-8\"", "var_name": "UTF_8"}, {"original_string": "static final String                AGENT_URL_PATTERN          = \"http://%s:%d/datas\";", "modifier": "static final", "type": "String", "declarator": "AGENT_URL_PATTERN          = \"http://%s:%d/datas\"", "var_name": "AGENT_URL_PATTERN"}, {"original_string": "public static final String         APPLICATION_OCTET_STREAM   = \"application/octet-stream\";", "modifier": "public static final", "type": "String", "declarator": "APPLICATION_OCTET_STREAM   = \"application/octet-stream\"", "var_name": "APPLICATION_OCTET_STREAM"}, {"original_string": "public static final String         SNAPPY                     = \"snappy\";", "modifier": "public static final", "type": "String", "declarator": "SNAPPY                     = \"snappy\"", "var_name": "SNAPPY"}, {"original_string": "static final String                TEXT_MEDIATYPE             = \"text/plain\";", "modifier": "static final", "type": "String", "declarator": "TEXT_MEDIATYPE             = \"text/plain\"", "var_name": "TEXT_MEDIATYPE"}, {"original_string": "private static final char          MSG_SPLITOR                = '\\t';", "modifier": "private static final", "type": "char", "declarator": "MSG_SPLITOR                = '\\t'", "var_name": "MSG_SPLITOR"}, {"original_string": "private final AddressService       addressService;", "modifier": "private final", "type": "AddressService", "declarator": "addressService", "var_name": "addressService"}, {"original_string": "private final LookoutConfig        lookoutConfig;", "modifier": "private final", "type": "LookoutConfig", "declarator": "lookoutConfig", "var_name": "lookoutConfig"}, {"original_string": "private final HttpRequestProcessor httpRequestProcessor;", "modifier": "private final", "type": "HttpRequestProcessor", "declarator": "httpRequestProcessor", "var_name": "httpRequestProcessor"}, {"original_string": "private int                        innerAgentPort             = -1;", "modifier": "private", "type": "int", "declarator": "innerAgentPort             = -1", "var_name": "innerAgentPort"}, {"original_string": "private volatile boolean           enableReportAlreadyLogged  = false;", "modifier": "private volatile", "type": "boolean", "declarator": "enableReportAlreadyLogged  = false", "var_name": "enableReportAlreadyLogged"}, {"original_string": "private volatile boolean           disableReportAlreadyLogged = false;", "modifier": "private volatile", "type": "boolean", "declarator": "disableReportAlreadyLogged = false", "var_name": "disableReportAlreadyLogged"}, {"original_string": "private Registry                   reg;", "modifier": "private", "type": "Registry", "declarator": "reg", "var_name": "reg"}], "methods": [{"identifier": "HttpObserver", "parameters": "(LookoutConfig lookoutConfig, AddressService addrService)", "modifiers": "public", "return": "", "signature": " HttpObserver(LookoutConfig lookoutConfig, AddressService addrService)", "full_signature": "public  HttpObserver(LookoutConfig lookoutConfig, AddressService addrService)", "class_method_signature": "HttpObserver.HttpObserver(LookoutConfig lookoutConfig, AddressService addrService)", "testcase": false, "constructor": true}, {"identifier": "HttpObserver", "parameters": "(LookoutConfig lookoutConfig, AddressService addrService, Registry registry)", "modifiers": "public", "return": "", "signature": " HttpObserver(LookoutConfig lookoutConfig, AddressService addrService, Registry registry)", "full_signature": "public  HttpObserver(LookoutConfig lookoutConfig, AddressService addrService, Registry registry)", "class_method_signature": "HttpObserver.HttpObserver(LookoutConfig lookoutConfig, AddressService addrService, Registry registry)", "testcase": false, "constructor": true}, {"identifier": "HttpObserver", "parameters": "(LookoutConfig lookoutConfig, AddressService addrService, Registry registry,\n                        HttpRequestProcessor requestProcessor)", "modifiers": "public", "return": "", "signature": " HttpObserver(LookoutConfig lookoutConfig, AddressService addrService, Registry registry,\n                        HttpRequestProcessor requestProcessor)", "full_signature": "public  HttpObserver(LookoutConfig lookoutConfig, AddressService addrService, Registry registry,\n                        HttpRequestProcessor requestProcessor)", "class_method_signature": "HttpObserver.HttpObserver(LookoutConfig lookoutConfig, AddressService addrService, Registry registry,\n                        HttpRequestProcessor requestProcessor)", "testcase": false, "constructor": true}, {"identifier": "registry", "parameters": "()", "modifiers": "private", "return": "Registry", "signature": "Registry registry()", "full_signature": "private Registry registry()", "class_method_signature": "HttpObserver.registry()", "testcase": false, "constructor": false}, {"identifier": "isEnable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEnable()", "full_signature": "@Override public boolean isEnable()", "class_method_signature": "HttpObserver.isEnable()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(List<LookoutMeasurement> measures, Map<String, String> metadata)", "modifiers": "@Override public", "return": "void", "signature": "void update(List<LookoutMeasurement> measures, Map<String, String> metadata)", "full_signature": "@Override public void update(List<LookoutMeasurement> measures, Map<String, String> metadata)", "class_method_signature": "HttpObserver.update(List<LookoutMeasurement> measures, Map<String, String> metadata)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(List<LookoutMeasurement> measures)", "modifiers": "private", "return": "List<LookoutMeasurement>", "signature": "List<LookoutMeasurement> filter(List<LookoutMeasurement> measures)", "full_signature": "private List<LookoutMeasurement> filter(List<LookoutMeasurement> measures)", "class_method_signature": "HttpObserver.filter(List<LookoutMeasurement> measures)", "testcase": false, "constructor": false}, {"identifier": "getBatches", "parameters": "(List<LookoutMeasurement> ms, int batchSize)", "modifiers": "public", "return": "List<List<LookoutMeasurement>>", "signature": "List<List<LookoutMeasurement>> getBatches(List<LookoutMeasurement> ms, int batchSize)", "full_signature": "public List<List<LookoutMeasurement>> getBatches(List<LookoutMeasurement> ms, int batchSize)", "class_method_signature": "HttpObserver.getBatches(List<LookoutMeasurement> ms, int batchSize)", "testcase": false, "constructor": false}, {"identifier": "reportBatch", "parameters": "(List<LookoutMeasurement> measures, Map<String, String> metadata,\n                             Address address)", "modifiers": "private", "return": "void", "signature": "void reportBatch(List<LookoutMeasurement> measures, Map<String, String> metadata,\n                             Address address)", "full_signature": "private void reportBatch(List<LookoutMeasurement> measures, Map<String, String> metadata,\n                             Address address)", "class_method_signature": "HttpObserver.reportBatch(List<LookoutMeasurement> measures, Map<String, String> metadata,\n                             Address address)", "testcase": false, "constructor": false}, {"identifier": "buildReportText", "parameters": "(List<LookoutMeasurement> measures)", "modifiers": "", "return": "String", "signature": "String buildReportText(List<LookoutMeasurement> measures)", "full_signature": " String buildReportText(List<LookoutMeasurement> measures)", "class_method_signature": "HttpObserver.buildReportText(List<LookoutMeasurement> measures)", "testcase": false, "constructor": false}, {"identifier": "reportSnappy2Agent", "parameters": "(Address agentAddress, String msg, Map<String, String> metadata)", "modifiers": "", "return": "void", "signature": "void reportSnappy2Agent(Address agentAddress, String msg, Map<String, String> metadata)", "full_signature": " void reportSnappy2Agent(Address agentAddress, String msg, Map<String, String> metadata)", "class_method_signature": "HttpObserver.reportSnappy2Agent(Address agentAddress, String msg, Map<String, String> metadata)", "testcase": false, "constructor": false}, {"identifier": "report2Agent", "parameters": "(Address agentAddress, String msg, Map<String, String> metadata)", "modifiers": "", "return": "void", "signature": "void report2Agent(Address agentAddress, String msg, Map<String, String> metadata)", "full_signature": " void report2Agent(Address agentAddress, String msg, Map<String, String> metadata)", "class_method_signature": "HttpObserver.report2Agent(Address agentAddress, String msg, Map<String, String> metadata)", "testcase": false, "constructor": false}, {"identifier": "sendHttpDataSilently", "parameters": "(HttpRequest httpRequest, Map<String, String> metadata)", "modifiers": "", "return": "void", "signature": "void sendHttpDataSilently(HttpRequest httpRequest, Map<String, String> metadata)", "full_signature": " void sendHttpDataSilently(HttpRequest httpRequest, Map<String, String> metadata)", "class_method_signature": "HttpObserver.sendHttpDataSilently(HttpRequest httpRequest, Map<String, String> metadata)", "testcase": false, "constructor": false}, {"identifier": "buildRealAgentServerURL", "parameters": "(Address agentAddress)", "modifiers": "", "return": "String", "signature": "String buildRealAgentServerURL(Address agentAddress)", "full_signature": " String buildRealAgentServerURL(Address agentAddress)", "class_method_signature": "HttpObserver.buildRealAgentServerURL(Address agentAddress)", "testcase": false, "constructor": false}], "file": "client/lookout-reg-server/src/main/java/com/alipay/lookout/remote/report/HttpObserver.java"}, "focal_method": {"identifier": "reportSnappy2Agent", "parameters": "(Address agentAddress, String msg, Map<String, String> metadata)", "modifiers": "", "return": "void", "body": "void reportSnappy2Agent(Address agentAddress, String msg, Map<String, String> metadata) {\n        HttpPost httpPost = new HttpPost(buildRealAgentServerURL(agentAddress));\n        httpPost.setHeader(HttpHeaders.CONTENT_TYPE, APPLICATION_OCTET_STREAM);\n        httpPost.setHeader(HttpHeaders.CONTENT_ENCODING, SNAPPY);\n        byte[] compressed = new byte[0];\n        try {\n            compressed = Snappy.compress(msg, Charset.forName(UTF_8));\n        } catch (IOException e) {\n            logger.info(\">>WARNING: snappy compress report msg err:{}\", e.getMessage());\n            return;\n        }\n        httpPost.setEntity(new ByteArrayEntity(compressed));\n        sendHttpDataSilently(httpPost, metadata);\n    }", "signature": "void reportSnappy2Agent(Address agentAddress, String msg, Map<String, String> metadata)", "full_signature": " void reportSnappy2Agent(Address agentAddress, String msg, Map<String, String> metadata)", "class_method_signature": "HttpObserver.reportSnappy2Agent(Address agentAddress, String msg, Map<String, String> metadata)", "testcase": false, "constructor": false, "invocations": ["buildRealAgentServerURL", "setHeader", "setHeader", "compress", "forName", "info", "getMessage", "setEntity", "sendHttpDataSilently"]}, "repository": {"repo_id": 133381280, "url": "https://github.com/sofastack/sofa-lookout", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 318, "size": 1394, "license": "licensed"}}