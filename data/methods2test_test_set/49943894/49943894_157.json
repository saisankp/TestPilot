{"test_class": {"identifier": "UrlEncoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "utils/src/test/java/com/cloud/utils/encoding/UrlEncoderTest.java"}, "test_case": {"identifier": "encode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void encode() {\n        Assert.assertEquals(\"%2Ftmp%2F\", new URLEncoder().encode(\"/tmp/\"));\n        Assert.assertEquals(\"%20\", new URLEncoder().encode(\" \"));\n        Assert.assertEquals(\"%5F\", new URLEncoder().encode(\"_\"));\n        Assert.assertEquals(\"%25\", new URLEncoder().encode(\"%\"));\n    }", "signature": "void encode()", "full_signature": "@Test public void encode()", "class_method_signature": "UrlEncoderTest.encode()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "encode", "assertEquals", "encode", "assertEquals", "encode", "assertEquals", "encode"]}, "focal_class": {"identifier": "URLEncoder", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final char[] hexadecimal = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};", "modifier": "protected static final", "type": "char[]", "declarator": "hexadecimal = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}", "var_name": "hexadecimal"}, {"original_string": "static CharsetEncoder asciiEncoder = Charset.forName(\"US-ASCII\").newEncoder();", "modifier": "static", "type": "CharsetEncoder", "declarator": "asciiEncoder = Charset.forName(\"US-ASCII\").newEncoder()", "var_name": "asciiEncoder"}, {"original_string": "protected BitSet safeCharacters = new BitSet(256);", "modifier": "protected", "type": "BitSet", "declarator": "safeCharacters = new BitSet(256)", "var_name": "safeCharacters"}], "methods": [{"identifier": "URLEncoder", "parameters": "()", "modifiers": "public", "return": "", "signature": " URLEncoder()", "full_signature": "public  URLEncoder()", "class_method_signature": "URLEncoder.URLEncoder()", "testcase": false, "constructor": true}, {"identifier": "addSafeCharacter", "parameters": "(char c)", "modifiers": "private", "return": "void", "signature": "void addSafeCharacter(char c)", "full_signature": "private void addSafeCharacter(char c)", "class_method_signature": "URLEncoder.addSafeCharacter(char c)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(String path)", "modifiers": "public", "return": "String", "signature": "String encode(String path)", "full_signature": "public String encode(String path)", "class_method_signature": "URLEncoder.encode(String path)", "testcase": false, "constructor": false}, {"identifier": "isPureAscii", "parameters": "(Character v)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPureAscii(Character v)", "full_signature": "public static boolean isPureAscii(Character v)", "class_method_signature": "URLEncoder.isPureAscii(Character v)", "testcase": false, "constructor": false}], "file": "utils/src/main/java/com/cloud/utils/encoding/URLEncoder.java"}, "focal_method": {"identifier": "encode", "parameters": "(String path)", "modifiers": "public", "return": "String", "body": "public String encode(String path) {\n        int maxBytesPerChar = 10;\n        StringBuffer rewrittenPath = new StringBuffer(path.length());\n        ByteArrayOutputStream buf = new ByteArrayOutputStream(maxBytesPerChar);\n        OutputStreamWriter writer = null;\n        try {\n            writer = new OutputStreamWriter(buf, \"UTF8\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            writer = new OutputStreamWriter(buf);\n        }\n\n        for (int i = 0; i < path.length(); i++) {\n            int c = path.charAt(i);\n            // NOTICE - !isPureAscii(path.charAt(i)) check was added by\n            // CloudStack\n            if (safeCharacters.get(c) || !isPureAscii(path.charAt(i))) {\n                rewrittenPath.append((char)c);\n            } else {\n                // convert to external encoding before hex conversion\n                try {\n                    writer.write((char)c);\n                    writer.flush();\n                } catch (IOException e) {\n                    buf.reset();\n                    continue;\n                }\n                byte[] ba = buf.toByteArray();\n                for (int j = 0; j < ba.length; j++) {\n                    // Converting each byte in the buffer\n                    byte toEncode = ba[j];\n                    rewrittenPath.append('%');\n                    int low = toEncode & 0x0f;\n                    int high = (toEncode & 0xf0) >> 4;\n                    rewrittenPath.append(hexadecimal[high]);\n                    rewrittenPath.append(hexadecimal[low]);\n                }\n                buf.reset();\n            }\n        }\n        return rewrittenPath.toString();\n    }", "signature": "String encode(String path)", "full_signature": "public String encode(String path)", "class_method_signature": "URLEncoder.encode(String path)", "testcase": false, "constructor": false, "invocations": ["length", "printStackTrace", "length", "charAt", "get", "isPureAscii", "charAt", "append", "write", "flush", "reset", "toByteArray", "append", "append", "append", "reset", "toString"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}