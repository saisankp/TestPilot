{"test_class": {"identifier": "RegistryEciesAeadHkdfDemHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Charset UTF_8 = Charset.forName(\"UTF-8\");", "modifier": "private static final", "type": "Charset", "declarator": "UTF_8 = Charset.forName(\"UTF-8\")", "var_name": "UTF_8"}, {"original_string": "private KeyTemplate[] keyTemplates;", "modifier": "private", "type": "KeyTemplate[]", "declarator": "keyTemplates", "var_name": "keyTemplates"}], "file": "java_src/src/test/java/com/google/crypto/tink/hybrid/RegistryEciesAeadHkdfDemHelperTest.java"}, "test_case": {"identifier": "testConstructorWith256BitCiphers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConstructorWith256BitCiphers() throws Exception {\n    if (Cipher.getMaxAllowedKeyLength(\"AES\") < 256) {\n      System.out.println(\n          \"Unlimited Strength Jurisdiction Policy Files are required\"\n              + \" but not installed. Skip tests with keys larger than 128 bits.\");\n      return;\n    }\n    // Supported templates.\n    RegistryEciesAeadHkdfDemHelper helper =\n        new RegistryEciesAeadHkdfDemHelper(AeadKeyTemplates.AES256_GCM);\n    assertEquals(32, helper.getSymmetricKeySizeInBytes());\n    helper = new RegistryEciesAeadHkdfDemHelper(AeadKeyTemplates.AES256_CTR_HMAC_SHA256);\n    assertEquals(64, helper.getSymmetricKeySizeInBytes());\n  }", "signature": "void testConstructorWith256BitCiphers()", "full_signature": "@Test public void testConstructorWith256BitCiphers()", "class_method_signature": "RegistryEciesAeadHkdfDemHelperTest.testConstructorWith256BitCiphers()", "testcase": true, "constructor": false, "invocations": ["getMaxAllowedKeyLength", "println", "assertEquals", "getSymmetricKeySizeInBytes", "assertEquals", "getSymmetricKeySizeInBytes"]}, "focal_class": {"identifier": "RegistryEciesAeadHkdfDemHelper", "superclass": "", "interfaces": "implements EciesAeadHkdfDemHelper", "fields": [{"original_string": "private final String demKeyTypeUrl;", "modifier": "private final", "type": "String", "declarator": "demKeyTypeUrl", "var_name": "demKeyTypeUrl"}, {"original_string": "private final int symmetricKeySize;", "modifier": "private final", "type": "int", "declarator": "symmetricKeySize", "var_name": "symmetricKeySize"}, {"original_string": "private AesGcmKey aesGcmKey;", "modifier": "private", "type": "AesGcmKey", "declarator": "aesGcmKey", "var_name": "aesGcmKey"}, {"original_string": "private AesCtrHmacAeadKey aesCtrHmacAeadKey;", "modifier": "private", "type": "AesCtrHmacAeadKey", "declarator": "aesCtrHmacAeadKey", "var_name": "aesCtrHmacAeadKey"}, {"original_string": "private int aesCtrKeySize;", "modifier": "private", "type": "int", "declarator": "aesCtrKeySize", "var_name": "aesCtrKeySize"}], "methods": [{"identifier": "RegistryEciesAeadHkdfDemHelper", "parameters": "(KeyTemplate demTemplate)", "modifiers": "", "return": "", "signature": " RegistryEciesAeadHkdfDemHelper(KeyTemplate demTemplate)", "full_signature": "  RegistryEciesAeadHkdfDemHelper(KeyTemplate demTemplate)", "class_method_signature": "RegistryEciesAeadHkdfDemHelper.RegistryEciesAeadHkdfDemHelper(KeyTemplate demTemplate)", "testcase": false, "constructor": true}, {"identifier": "getSymmetricKeySizeInBytes", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSymmetricKeySizeInBytes()", "full_signature": "@Override public int getSymmetricKeySizeInBytes()", "class_method_signature": "RegistryEciesAeadHkdfDemHelper.getSymmetricKeySizeInBytes()", "testcase": false, "constructor": false}, {"identifier": "getAead", "parameters": "(final byte[] symmetricKeyValue)", "modifiers": "@Override public", "return": "Aead", "signature": "Aead getAead(final byte[] symmetricKeyValue)", "full_signature": "@Override public Aead getAead(final byte[] symmetricKeyValue)", "class_method_signature": "RegistryEciesAeadHkdfDemHelper.getAead(final byte[] symmetricKeyValue)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/hybrid/RegistryEciesAeadHkdfDemHelper.java"}, "focal_method": {"identifier": "getSymmetricKeySizeInBytes", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int getSymmetricKeySizeInBytes() {\n    return symmetricKeySize;\n  }", "signature": "int getSymmetricKeySizeInBytes()", "full_signature": "@Override public int getSymmetricKeySizeInBytes()", "class_method_signature": "RegistryEciesAeadHkdfDemHelper.getSymmetricKeySizeInBytes()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}