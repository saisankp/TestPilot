{"test_class": {"identifier": "FileUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/utils/FileUtilsTest.java"}, "test_case": {"identifier": "getBaseDirName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getBaseDirName() throws Exception {\n        Assert.assertNotNull(FileUtils.getBaseDirName());\n    }", "signature": "void getBaseDirName()", "full_signature": "@Test public void getBaseDirName()", "class_method_signature": "FileUtilsTest.getBaseDirName()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "getBaseDirName"]}, "focal_class": {"identifier": "FileUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String LINE_SEPARATOR = System.getProperty(\"line.separator\");", "modifier": "public static final", "type": "String", "declarator": "LINE_SEPARATOR = System.getProperty(\"line.separator\")", "var_name": "LINE_SEPARATOR"}], "methods": [{"identifier": "getBaseDirName", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getBaseDirName()", "full_signature": "public static String getBaseDirName()", "class_method_signature": "FileUtils.getBaseDirName()", "testcase": false, "constructor": false}, {"identifier": "getUserHomeDir", "parameters": "(String base)", "modifiers": "public static", "return": "String", "signature": "String getUserHomeDir(String base)", "full_signature": "public static String getUserHomeDir(String base)", "class_method_signature": "FileUtils.getUserHomeDir(String base)", "testcase": false, "constructor": false}, {"identifier": "file2String", "parameters": "(File file)", "modifiers": "public static", "return": "String", "signature": "String file2String(File file)", "full_signature": "public static String file2String(File file)", "class_method_signature": "FileUtils.file2String(File file)", "testcase": false, "constructor": false}, {"identifier": "file2String", "parameters": "(Class clazz, String relativePath, String encoding)", "modifiers": "public static", "return": "String", "signature": "String file2String(Class clazz, String relativePath, String encoding)", "full_signature": "public static String file2String(Class clazz, String relativePath, String encoding)", "class_method_signature": "FileUtils.file2String(Class clazz, String relativePath, String encoding)", "testcase": false, "constructor": false}, {"identifier": "readLines", "parameters": "(File file)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> readLines(File file)", "full_signature": "public static List<String> readLines(File file)", "class_method_signature": "FileUtils.readLines(File file)", "testcase": false, "constructor": false}, {"identifier": "string2File", "parameters": "(File file, String data)", "modifiers": "public static", "return": "boolean", "signature": "boolean string2File(File file, String data)", "full_signature": "public static boolean string2File(File file, String data)", "class_method_signature": "FileUtils.string2File(File file, String data)", "testcase": false, "constructor": false}, {"identifier": "cleanDirectory", "parameters": "(File dir)", "modifiers": "public static", "return": "boolean", "signature": "boolean cleanDirectory(File dir)", "full_signature": "public static boolean cleanDirectory(File dir)", "class_method_signature": "FileUtils.cleanDirectory(File dir)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/utils/FileUtils.java"}, "focal_method": {"identifier": "getBaseDirName", "parameters": "()", "modifiers": "public static", "return": "String", "body": "public static String getBaseDirName() {\n        String fileName = null;\n        // \u5148\u53d6classes\n        java.net.URL url1 = FileUtils.class.getResource(\"/\");\n        if (url1 != null) {\n            fileName = url1.getFile();\n        } else {\n            // \u53d6\u4e0d\u5230\u518d\u53d6lib\n            String jarpath = ReflectUtils.getCodeBase(FileUtils.class);\n            if (jarpath != null) {\n                int sofaidx = jarpath.lastIndexOf(\"sofa\");\n                if (sofaidx > -1) { // \u5982\u679c\u6709sofa\u5f00\u5934\u7684jar\u5305\n                    fileName = jarpath.substring(0, sofaidx);\n                } else {\n                    int sepidx = jarpath.lastIndexOf(File.separator);\n                    if (sepidx > -1) {\n                        fileName = jarpath.substring(0, sepidx + 1);\n                    }\n                }\n            }\n        }\n        // \u5c06\u5192\u53f7\u53bb\u6389 \u201c/\u201d\u6362\u6210\u201c-\u201d\n        if (fileName != null) {\n            fileName = fileName.replace(\":\", \"\").replace(File.separator, \"/\")\n                .replace(\"/\", \"-\");\n            if (fileName.startsWith(\"-\")) {\n                fileName = fileName.substring(1);\n            }\n        } else {\n            // LOGGER.warn(\"can not parse webapp baseDir path\");\n            fileName = \"UNKNOW_\";\n        }\n        return fileName;\n    }", "signature": "String getBaseDirName()", "full_signature": "public static String getBaseDirName()", "class_method_signature": "FileUtils.getBaseDirName()", "testcase": false, "constructor": false, "invocations": ["getResource", "getFile", "getCodeBase", "lastIndexOf", "substring", "lastIndexOf", "substring", "replace", "replace", "replace", "startsWith", "substring"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}