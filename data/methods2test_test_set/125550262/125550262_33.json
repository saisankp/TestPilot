{"test_class": {"identifier": "UpdateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String tableName = \"Logical_Switch\";", "modifier": "private final", "type": "String", "declarator": "tableName = \"Logical_Switch\"", "var_name": "tableName"}, {"original_string": "private final UUID uuid = UUID.randomUUID();", "modifier": "private final", "type": "UUID", "declarator": "uuid = UUID.randomUUID()", "var_name": "uuid"}, {"original_string": "private final Row row = new Row(ImmutableMap.of(\"name\", Atom.string(\"ls2\"),\n      \"tunnel_key\", Atom.integer(5002)\n  ));", "modifier": "private final", "type": "Row", "declarator": "row = new Row(ImmutableMap.of(\"name\", Atom.string(\"ls2\"),\n      \"tunnel_key\", Atom.integer(5002)\n  ))", "var_name": "row"}, {"original_string": "private final Update update = new Update(tableName, row)\n      .where(\"string_column\", Function.INCLUDES, \"A string\")\n      .where(\"integer_column\", Function.LESS_THAN, 42)\n      .where(\"bool_column\", Function.EQUALS, true)\n      .where(\"uuid_column\", Function.NOT_EQUALS, Uuid.of(uuid))\n      .where(\"named-uuid_column\", Function.EXCLUDES, new NamedUuid(\"uuid-name\"))\n      .where(\"map_column\", Function.GREATER_THAN_OR_EQUALS, ImmutableMap.of(\"key\", \"value\"))\n      .where(\"set_column\", Function.LESS_THAN_OR_EQUALS, ImmutableSet.of(\"value1\", \"value2\"));", "modifier": "private final", "type": "Update", "declarator": "update = new Update(tableName, row)\n      .where(\"string_column\", Function.INCLUDES, \"A string\")\n      .where(\"integer_column\", Function.LESS_THAN, 42)\n      .where(\"bool_column\", Function.EQUALS, true)\n      .where(\"uuid_column\", Function.NOT_EQUALS, Uuid.of(uuid))\n      .where(\"named-uuid_column\", Function.EXCLUDES, new NamedUuid(\"uuid-name\"))\n      .where(\"map_column\", Function.GREATER_THAN_OR_EQUALS, ImmutableMap.of(\"key\", \"value\"))\n      .where(\"set_column\", Function.LESS_THAN_OR_EQUALS, ImmutableSet.of(\"value1\", \"value2\"))", "var_name": "update"}], "file": "ovsdb-client/src/test/java/com/vmware/ovsdb/protocol/operation/UpdateTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEquals() {\n    List<Condition> conditions = Stream.of(\n        new Condition(\"string_column\", Function.INCLUDES, Atom.string(\"A string\")),\n        new Condition(\"integer_column\", Function.LESS_THAN, Atom.integer(42)),\n        new Condition(\"bool_column\", Function.EQUALS, Atom.bool(true)),\n        new Condition(\"uuid_column\", Function.NOT_EQUALS, Atom.uuid(uuid)),\n        new Condition(\"named-uuid_column\", Function.EXCLUDES, Atom.namedUuid(\"uuid-name\")),\n        new Condition(\"map_column\", Function.GREATER_THAN_OR_EQUALS,\n            new Map<>(ImmutableList.of(new Pair<>(Atom.string(\"key\"), Atom.string(\"value\"))))\n        ),\n        new Condition(\"set_column\", Function.LESS_THAN_OR_EQUALS,\n            new Set(ImmutableSet.of(Atom.string(\"value1\"), Atom.string(\"value2\")))\n        )\n    ).collect(Collectors.toList());\n    new EqualsTester()\n        .addEqualityGroup(update, new Update(tableName, conditions, row))\n        .testEquals();\n  }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "UpdateTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["collect", "of", "string", "integer", "bool", "uuid", "namedUuid", "of", "string", "string", "of", "string", "string", "toList", "testEquals", "addEqualityGroup"]}, "focal_class": {"identifier": "Update", "superclass": "extends Operation", "interfaces": "", "fields": [{"original_string": "private final String table;", "modifier": "private final", "type": "String", "declarator": "table", "var_name": "table"}, {"original_string": "@JsonProperty(value = WHERE)\n  private List<Condition> conditions;", "modifier": "@JsonProperty(value = WHERE)\n  private", "type": "List<Condition>", "declarator": "conditions", "var_name": "conditions"}, {"original_string": "private Row row;", "modifier": "private", "type": "Row", "declarator": "row", "var_name": "row"}], "methods": [{"identifier": "Update", "parameters": "(String table, List<Condition> conditions, Row row)", "modifiers": "public", "return": "", "signature": " Update(String table, List<Condition> conditions, Row row)", "full_signature": "public  Update(String table, List<Condition> conditions, Row row)", "class_method_signature": "Update.Update(String table, List<Condition> conditions, Row row)", "testcase": false, "constructor": true}, {"identifier": "Update", "parameters": "(String table, Row row)", "modifiers": "public", "return": "", "signature": " Update(String table, Row row)", "full_signature": "public  Update(String table, Row row)", "class_method_signature": "Update.Update(String table, Row row)", "testcase": false, "constructor": true}, {"identifier": "where", "parameters": "(String column, Function function, Value value)", "modifiers": "public", "return": "Update", "signature": "Update where(String column, Function function, Value value)", "full_signature": "public Update where(String column, Function function, Value value)", "class_method_signature": "Update.where(String column, Function function, Value value)", "testcase": false, "constructor": false}, {"identifier": "where", "parameters": "(String column, Function function, String string)", "modifiers": "public", "return": "Update", "signature": "Update where(String column, Function function, String string)", "full_signature": "public Update where(String column, Function function, String string)", "class_method_signature": "Update.where(String column, Function function, String string)", "testcase": false, "constructor": false}, {"identifier": "where", "parameters": "(String column, Function function, long integer)", "modifiers": "public", "return": "Update", "signature": "Update where(String column, Function function, long integer)", "full_signature": "public Update where(String column, Function function, long integer)", "class_method_signature": "Update.where(String column, Function function, long integer)", "testcase": false, "constructor": false}, {"identifier": "where", "parameters": "(String column, Function function, boolean bool)", "modifiers": "public", "return": "Update", "signature": "Update where(String column, Function function, boolean bool)", "full_signature": "public Update where(String column, Function function, boolean bool)", "class_method_signature": "Update.where(String column, Function function, boolean bool)", "testcase": false, "constructor": false}, {"identifier": "where", "parameters": "(String column, Function function, Uuid uuid)", "modifiers": "public", "return": "Update", "signature": "Update where(String column, Function function, Uuid uuid)", "full_signature": "public Update where(String column, Function function, Uuid uuid)", "class_method_signature": "Update.where(String column, Function function, Uuid uuid)", "testcase": false, "constructor": false}, {"identifier": "where", "parameters": "(String column, Function function, NamedUuid namedUuid)", "modifiers": "public", "return": "Update", "signature": "Update where(String column, Function function, NamedUuid namedUuid)", "full_signature": "public Update where(String column, Function function, NamedUuid namedUuid)", "class_method_signature": "Update.where(String column, Function function, NamedUuid namedUuid)", "testcase": false, "constructor": false}, {"identifier": "where", "parameters": "(\n      String column, Function function, java.util.Map<K, V> map\n  )", "modifiers": "public", "return": "Update", "signature": "Update where(\n      String column, Function function, java.util.Map<K, V> map\n  )", "full_signature": "public Update where(\n      String column, Function function, java.util.Map<K, V> map\n  )", "class_method_signature": "Update.where(\n      String column, Function function, java.util.Map<K, V> map\n  )", "testcase": false, "constructor": false}, {"identifier": "where", "parameters": "(\n      String column, Function function, java.util.Set<T> set\n  )", "modifiers": "public", "return": "Update", "signature": "Update where(\n      String column, Function function, java.util.Set<T> set\n  )", "full_signature": "public Update where(\n      String column, Function function, java.util.Set<T> set\n  )", "class_method_signature": "Update.where(\n      String column, Function function, java.util.Set<T> set\n  )", "testcase": false, "constructor": false}, {"identifier": "getTable", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTable()", "full_signature": "public String getTable()", "class_method_signature": "Update.getTable()", "testcase": false, "constructor": false}, {"identifier": "getWhere", "parameters": "()", "modifiers": "public", "return": "List<Condition>", "signature": "List<Condition> getWhere()", "full_signature": "public List<Condition> getWhere()", "class_method_signature": "Update.getWhere()", "testcase": false, "constructor": false}, {"identifier": "getRow", "parameters": "()", "modifiers": "public", "return": "Row", "signature": "Row getRow()", "full_signature": "public Row getRow()", "class_method_signature": "Update.getRow()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "Update.equals(Object other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Update.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Update.toString()", "testcase": false, "constructor": false}], "file": "ovsdb-client/src/main/java/com/vmware/ovsdb/protocol/operation/Update.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean equals(Object other) {\n    if (this == other) {\n      return true;\n    }\n    if (!(other instanceof Update)) {\n      return false;\n    }\n    Update that = (Update) other;\n    return Objects.equals(table, that.getTable())\n        && Objects.equals(conditions, that.getWhere())\n        && Objects.equals(row, that.getRow());\n  }", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "Update.equals(Object other)", "testcase": false, "constructor": false, "invocations": ["equals", "getTable", "equals", "getWhere", "equals", "getRow"]}, "repository": {"repo_id": 125550262, "url": "https://github.com/vmware/ovsdb-client-library", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 12, "size": 288, "license": "licensed"}}