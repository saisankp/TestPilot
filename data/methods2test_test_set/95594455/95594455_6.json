{"test_class": {"identifier": "GaugeMethodBeanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String GAUGE_NAME = MetricRegistry.name(GaugeMethodBean.class, \"gaugeMethod\");", "modifier": "private final static", "type": "String", "declarator": "GAUGE_NAME = MetricRegistry.name(GaugeMethodBean.class, \"gaugeMethod\")", "var_name": "GAUGE_NAME"}, {"original_string": "private static MetricID gaugeMID;", "modifier": "private static", "type": "MetricID", "declarator": "gaugeMID", "var_name": "gaugeMID"}, {"original_string": "@Inject\n    private MetricRegistry registry;", "modifier": "@Inject\n    private", "type": "MetricRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "@Inject\n    private GaugeMethodBean bean;", "modifier": "@Inject\n    private", "type": "GaugeMethodBean", "declarator": "bean", "var_name": "bean"}], "file": "tck/api/src/main/java/org/eclipse/microprofile/metrics/tck/metrics/GaugeMethodBeanTest.java"}, "test_case": {"identifier": "gaugeCalledWithDefaultValue", "parameters": "()", "modifiers": "@Test @InSequence(1) public", "return": "void", "body": "@Test\n    @InSequence(1)\n    public void gaugeCalledWithDefaultValue() {\n        @SuppressWarnings(\"unchecked\")\n        Gauge<Long> gauge = (Gauge<Long>) registry.getGauge(gaugeMID);\n        assertThat(\"Gauge is not registered correctly\", gauge, notNullValue());\n\n        // Make sure that the gauge has the expected value\n        assertThat(\"Gauge value is incorrect\", gauge.getValue(), is(equalTo(0L)));\n    }", "signature": "void gaugeCalledWithDefaultValue()", "full_signature": "@Test @InSequence(1) public void gaugeCalledWithDefaultValue()", "class_method_signature": "GaugeMethodBeanTest.gaugeCalledWithDefaultValue()", "testcase": true, "constructor": false, "invocations": ["getGauge", "assertThat", "notNullValue", "assertThat", "getValue", "is", "equalTo"]}, "focal_class": {"identifier": "GaugeMethodBean", "superclass": "", "interfaces": "", "fields": [{"original_string": "private long gauge;", "modifier": "private", "type": "long", "declarator": "gauge", "var_name": "gauge"}], "methods": [{"identifier": "getGauge", "parameters": "()", "modifiers": "@Gauge(name = \"gaugeMethod\", unit=MetricUnits.NONE) public", "return": "long", "signature": "long getGauge()", "full_signature": "@Gauge(name = \"gaugeMethod\", unit=MetricUnits.NONE) public long getGauge()", "class_method_signature": "GaugeMethodBean.getGauge()", "testcase": false, "constructor": false}, {"identifier": "setGauge", "parameters": "(long gauge)", "modifiers": "public", "return": "void", "signature": "void setGauge(long gauge)", "full_signature": "public void setGauge(long gauge)", "class_method_signature": "GaugeMethodBean.setGauge(long gauge)", "testcase": false, "constructor": false}], "file": "tck/api/src/main/java/org/eclipse/microprofile/metrics/tck/metrics/GaugeMethodBean.java"}, "focal_method": {"identifier": "getGauge", "parameters": "()", "modifiers": "@Gauge(name = \"gaugeMethod\", unit=MetricUnits.NONE) public", "return": "long", "body": "@Gauge(name = \"gaugeMethod\", unit=MetricUnits.NONE)\n    public long getGauge() {\n        return gauge;\n    }", "signature": "long getGauge()", "full_signature": "@Gauge(name = \"gaugeMethod\", unit=MetricUnits.NONE) public long getGauge()", "class_method_signature": "GaugeMethodBean.getGauge()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 95594455, "url": "https://github.com/eclipse/microprofile-metrics", "stars": 57, "created": "6/27/2017 7:44:21 PM +00:00", "updates": "2020-01-24T22:21:48+00:00", "fork": "False", "license": "licensed"}}