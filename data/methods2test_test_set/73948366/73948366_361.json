{"test_class": {"identifier": "UserAuthorityTest", "superclass": "", "interfaces": "", "fields": [], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/impl/UserAuthorityTest.java"}, "test_case": {"identifier": "testGetPAM", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPAM() throws PAMException {\n        UserAuthority userAuthority = new UserAuthority();\n        assertNotNull(userAuthority.getPAM());\n    }", "signature": "void testGetPAM()", "full_signature": "@Test public void testGetPAM()", "class_method_signature": "UserAuthorityTest.testGetPAM()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "getPAM"]}, "focal_class": {"identifier": "UserAuthority", "superclass": "", "interfaces": "implements Authority", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(UserAuthority.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(UserAuthority.class)", "var_name": "LOG"}, {"original_string": "static final String ATHENZ_PROP_PAM_SERVICE_NAME = \"athenz.auth.user.pam_service_name\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_PROP_PAM_SERVICE_NAME = \"athenz.auth.user.pam_service_name\"", "var_name": "ATHENZ_PROP_PAM_SERVICE_NAME"}, {"original_string": "public static final String ATHENZ_AUTH_CHALLENGE = \"Basic realm=\\\"athenz\\\"\";", "modifier": "public static final", "type": "String", "declarator": "ATHENZ_AUTH_CHALLENGE = \"Basic realm=\\\"athenz\\\"\"", "var_name": "ATHENZ_AUTH_CHALLENGE"}, {"original_string": "String serviceName;", "modifier": "", "type": "String", "declarator": "serviceName", "var_name": "serviceName"}, {"original_string": "private PAM pam = null;", "modifier": "private", "type": "PAM", "declarator": "pam = null", "var_name": "pam"}], "methods": [{"identifier": "UserAuthority", "parameters": "()", "modifiers": "public", "return": "", "signature": " UserAuthority()", "full_signature": "public  UserAuthority()", "class_method_signature": "UserAuthority.UserAuthority()", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "UserAuthority.initialize()", "testcase": false, "constructor": false}, {"identifier": "getID", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getID()", "full_signature": "@Override public String getID()", "class_method_signature": "UserAuthority.getID()", "testcase": false, "constructor": false}, {"identifier": "getDomain", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDomain()", "full_signature": "@Override public String getDomain()", "class_method_signature": "UserAuthority.getDomain()", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getHeader()", "full_signature": "@Override public String getHeader()", "class_method_signature": "UserAuthority.getHeader()", "testcase": false, "constructor": false}, {"identifier": "getAuthenticateChallenge", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getAuthenticateChallenge()", "full_signature": "@Override public String getAuthenticateChallenge()", "class_method_signature": "UserAuthority.getAuthenticateChallenge()", "testcase": false, "constructor": false}, {"identifier": "allowAuthorization", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean allowAuthorization()", "full_signature": "@Override public boolean allowAuthorization()", "class_method_signature": "UserAuthority.allowAuthorization()", "testcase": false, "constructor": false}, {"identifier": "setPAM", "parameters": "(PAM pam)", "modifiers": "", "return": "void", "signature": "void setPAM(PAM pam)", "full_signature": " void setPAM(PAM pam)", "class_method_signature": "UserAuthority.setPAM(PAM pam)", "testcase": false, "constructor": false}, {"identifier": "getPAM", "parameters": "()", "modifiers": "", "return": "PAM", "signature": "PAM getPAM()", "full_signature": " PAM getPAM()", "class_method_signature": "UserAuthority.getPAM()", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(String creds, String remoteAddr, String httpMethod, StringBuilder errMsg)", "modifiers": "@Override public", "return": "Principal", "signature": "Principal authenticate(String creds, String remoteAddr, String httpMethod, StringBuilder errMsg)", "full_signature": "@Override public Principal authenticate(String creds, String remoteAddr, String httpMethod, StringBuilder errMsg)", "class_method_signature": "UserAuthority.authenticate(String creds, String remoteAddr, String httpMethod, StringBuilder errMsg)", "testcase": false, "constructor": false}, {"identifier": "getSimplePrincipal", "parameters": "(String name, String creds, long issueTime)", "modifiers": "", "return": "SimplePrincipal", "signature": "SimplePrincipal getSimplePrincipal(String name, String creds, long issueTime)", "full_signature": " SimplePrincipal getSimplePrincipal(String name, String creds, long issueTime)", "class_method_signature": "UserAuthority.getSimplePrincipal(String name, String creds, long issueTime)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/UserAuthority.java"}, "focal_method": {"identifier": "getPAM", "parameters": "()", "modifiers": "", "return": "PAM", "body": "PAM getPAM() throws PAMException {\n        if (pam != null) {\n            return pam;\n        }\n        return new PAM(serviceName);\n    }", "signature": "PAM getPAM()", "full_signature": " PAM getPAM()", "class_method_signature": "UserAuthority.getPAM()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}