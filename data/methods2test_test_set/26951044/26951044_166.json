{"test_class": {"identifier": "FloatConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/core/src/test/java/org/apache/tamaya/core/internal/converters/FloatConverterTest.java"}, "test_case": {"identifier": "callToConvertAddsMoreSupportedFormatsToTheContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void callToConvertAddsMoreSupportedFormatsToTheContext() throws Exception {\n        ConversionContext context = new ConversionContext.Builder(TypeLiteral.of(Float.class)).build();\n\n        FloatConverter converter = new FloatConverter();\n        converter.convert(\"\", context);\n\n        assertThat(context.getSupportedFormats()).contains(\"<float> (FloatConverter)\",\n                \"MIN_VALUE (FloatConverter)\", \"MAX_VALUE (FloatConverter)\");\n    }", "signature": "void callToConvertAddsMoreSupportedFormatsToTheContext()", "full_signature": "@Test public void callToConvertAddsMoreSupportedFormatsToTheContext()", "class_method_signature": "FloatConverterTest.callToConvertAddsMoreSupportedFormatsToTheContext()", "testcase": true, "constructor": false, "invocations": ["build", "of", "convert", "contains", "assertThat", "getSupportedFormats"]}, "focal_class": {"identifier": "FloatConverter", "superclass": "", "interfaces": "implements PropertyConverter<Float>", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(FloatConverter.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(FloatConverter.class.getName())", "var_name": "LOG"}, {"original_string": "private final IntegerConverter integerConverter = new IntegerConverter();", "modifier": "private final", "type": "IntegerConverter", "declarator": "integerConverter = new IntegerConverter()", "var_name": "integerConverter"}], "methods": [{"identifier": "convert", "parameters": "(String value, ConversionContext ctx)", "modifiers": "@Override public", "return": "Float", "signature": "Float convert(String value, ConversionContext ctx)", "full_signature": "@Override public Float convert(String value, ConversionContext ctx)", "class_method_signature": "FloatConverter.convert(String value, ConversionContext ctx)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "FloatConverter.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "FloatConverter.hashCode()", "testcase": false, "constructor": false}], "file": "code/core/src/main/java/org/apache/tamaya/core/internal/converters/FloatConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(String value, ConversionContext ctx)", "modifiers": "@Override public", "return": "Float", "body": "@Override\n    public Float convert(String value, ConversionContext ctx) {\n        ctx.addSupportedFormats(getClass(), \"<float>\", \"MIN\", \"MIN_VALUE\", \"MAX\", \"MAX_VALUE\",\n                        \"POSITIVE_INFINITY\", \"NEGATIVE_INFINITY\", \"NAN\");\n        if(value==null){\n            return null;\n        }\n        String trimmed = value.trim();\n        switch(trimmed.toUpperCase(Locale.ENGLISH)){\n            case \"POSITIVE_INFINITY\":\n                return Float.POSITIVE_INFINITY;\n            case \"NEGATIVE_INFINITY\":\n                return Float.NEGATIVE_INFINITY;\n            case \"NAN\":\n                return Float.NaN;\n            case \"MIN_VALUE\":\n            case \"MIN\":\n                return Float.MIN_VALUE;\n            case \"MAX_VALUE\":\n            case \"MAX\":\n                return Float.MAX_VALUE;\n            default:\n                try {\n                    return Float.valueOf(trimmed);\n                } catch(Exception e){\n                    // OK perhaps we have an integral number that must be converted to the double type...\n                    LOG.finest(\"Parsing of float as floating number failed, trying parsing integral\" +\n                            \" number/hex instead...\");\n                }\n                Integer val = integerConverter.convert(trimmed, ctx);\n                if(val!=null) {\n                    return val.floatValue();\n                }\n                LOG.finest(\"Unparseable float createValue: \" + trimmed);\n                return null;\n        }\n    }", "signature": "Float convert(String value, ConversionContext ctx)", "full_signature": "@Override public Float convert(String value, ConversionContext ctx)", "class_method_signature": "FloatConverter.convert(String value, ConversionContext ctx)", "testcase": false, "constructor": false, "invocations": ["addSupportedFormats", "getClass", "trim", "toUpperCase", "valueOf", "finest", "convert", "floatValue", "finest"]}, "repository": {"repo_id": 26951044, "url": "https://github.com/apache/incubator-tamaya", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 44, "size": 7630, "license": "licensed"}}