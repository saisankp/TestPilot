{"test_class": {"identifier": "CheckMojoTest", "superclass": "", "interfaces": "", "fields": [], "file": "qulice-maven-plugin/src/test/java/com/qulice/maven/CheckMojoTest.java"}, "test_case": {"identifier": "validatesUsingAllProvidedValidators", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validatesUsingAllProvidedValidators() throws Exception {\n        final CheckMojo mojo = new CheckMojo();\n        final Validator external = Mockito.mock(Validator.class);\n        Mockito.when(external.name()).thenReturn(\"somename\");\n        final ResourceValidator rexternal =\n            Mockito.mock(ResourceValidator.class);\n        Mockito.when(rexternal.name()).thenReturn(\"other\");\n        final MavenValidator internal = Mockito.mock(MavenValidator.class);\n        final ValidatorsProvider provider = new ValidatorsProviderMocker()\n            .withInternal(internal)\n            .withExternal(external)\n            .withExternalResource(rexternal)\n            .mock();\n        mojo.setValidatorsProvider(provider);\n        final MavenProject project = Mockito.mock(MavenProject.class);\n        mojo.setProject(project);\n        mojo.setLog(Mockito.mock(Log.class));\n        final String license = \"file:./some-file.txt\";\n        mojo.setLicense(license);\n        final Context context = Mockito.mock(Context.class);\n        mojo.contextualize(context);\n        mojo.execute();\n        Mockito.verify(internal).validate(Mockito.any(MavenEnvironment.class));\n        Mockito.verify(external).validate(Mockito.any(Environment.class));\n        Mockito.verify(rexternal, Mockito.atLeastOnce())\n            .validate(Mockito.anyCollection());\n    }", "signature": "void validatesUsingAllProvidedValidators()", "full_signature": "@Test public void validatesUsingAllProvidedValidators()", "class_method_signature": "CheckMojoTest.validatesUsingAllProvidedValidators()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "name", "mock", "thenReturn", "when", "name", "mock", "mock", "withExternalResource", "withExternal", "withInternal", "setValidatorsProvider", "mock", "setProject", "setLog", "mock", "setLicense", "mock", "contextualize", "execute", "validate", "verify", "any", "validate", "verify", "any", "validate", "verify", "atLeastOnce", "anyCollection"]}, "focal_class": {"identifier": "CheckMojo", "superclass": "extends AbstractQuliceMojo", "interfaces": "", "fields": [{"original_string": "private final ExecutorService executors =\n        Executors.newFixedThreadPool(Tv.FIVE);", "modifier": "private final", "type": "ExecutorService", "declarator": "executors =\n        Executors.newFixedThreadPool(Tv.FIVE)", "var_name": "executors"}, {"original_string": "private ValidatorsProvider provider =\n        new DefaultValidatorsProvider(this.env());", "modifier": "private", "type": "ValidatorsProvider", "declarator": "provider =\n        new DefaultValidatorsProvider(this.env())", "var_name": "provider"}], "methods": [{"identifier": "doExecute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void doExecute()", "full_signature": "@Override public void doExecute()", "class_method_signature": "CheckMojo.doExecute()", "testcase": false, "constructor": false}, {"identifier": "setValidatorsProvider", "parameters": "(final ValidatorsProvider prov)", "modifiers": "public", "return": "void", "signature": "void setValidatorsProvider(final ValidatorsProvider prov)", "full_signature": "public void setValidatorsProvider(final ValidatorsProvider prov)", "class_method_signature": "CheckMojo.setValidatorsProvider(final ValidatorsProvider prov)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void run()", "full_signature": "private void run()", "class_method_signature": "CheckMojo.run()", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "(\n        final MavenEnvironment env, final Collection<File> files,\n        final Collection<ResourceValidator> validators)", "modifiers": "@SuppressWarnings(\"PMD.AvoidInstantiatingObjectsInLoops\") private", "return": "Collection<Future<Collection<Violation>>>", "signature": "Collection<Future<Collection<Violation>>> submit(\n        final MavenEnvironment env, final Collection<File> files,\n        final Collection<ResourceValidator> validators)", "full_signature": "@SuppressWarnings(\"PMD.AvoidInstantiatingObjectsInLoops\") private Collection<Future<Collection<Violation>>> submit(\n        final MavenEnvironment env, final Collection<File> files,\n        final Collection<ResourceValidator> validators)", "class_method_signature": "CheckMojo.submit(\n        final MavenEnvironment env, final Collection<File> files,\n        final Collection<ResourceValidator> validators)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(final MavenEnvironment env,\n        final Collection<File> files, final ResourceValidator validator)", "modifiers": "private static", "return": "Collection<File>", "signature": "Collection<File> filter(final MavenEnvironment env,\n        final Collection<File> files, final ResourceValidator validator)", "full_signature": "private static Collection<File> filter(final MavenEnvironment env,\n        final Collection<File> files, final ResourceValidator validator)", "class_method_signature": "CheckMojo.filter(final MavenEnvironment env,\n        final Collection<File> files, final ResourceValidator validator)", "testcase": false, "constructor": false}], "file": "qulice-maven-plugin/src/main/java/com/qulice/maven/CheckMojo.java"}, "focal_method": {"identifier": "setValidatorsProvider", "parameters": "(final ValidatorsProvider prov)", "modifiers": "public", "return": "void", "body": "public void setValidatorsProvider(final ValidatorsProvider prov) {\n        this.provider = prov;\n    }", "signature": "void setValidatorsProvider(final ValidatorsProvider prov)", "full_signature": "public void setValidatorsProvider(final ValidatorsProvider prov)", "class_method_signature": "CheckMojo.setValidatorsProvider(final ValidatorsProvider prov)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9580168, "url": "https://github.com/teamed/qulice", "language": "Java", "is_fork": false, "fork_count": 87, "stargazer_count": 240, "size": 17854, "license": "licensed"}}