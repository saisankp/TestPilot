{"test_class": {"identifier": "ReadThroughAssignCacheAdviceTest", "superclass": "extends AbstractCacheTest<ReadThroughAssignCacheAdvice>", "interfaces": "", "fields": [{"original_string": "private static final String NS = \"TEST-NS\";", "modifier": "private static final", "type": "String", "declarator": "NS = \"TEST-NS\"", "var_name": "NS"}, {"original_string": "private static final int EXPIRATION = 220;", "modifier": "private static final", "type": "int", "declarator": "EXPIRATION = 220", "var_name": "EXPIRATION"}, {"original_string": "private final Object expectedValue;", "modifier": "private final", "type": "Object", "declarator": "expectedValue", "var_name": "expectedValue"}], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/aop/ReadThroughAssignCacheAdviceTest.java"}, "test_case": {"identifier": "invalid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invalid() throws Throwable {\n        Assume.assumeThat(isValid, CoreMatchers.is(false));\n\n        when(pjp.proceed()).thenReturn(expectedValue);\n\n        assertEquals(expectedValue, advice.cacheSingleAssign(pjp));\n\n        verify(cache, never()).get(anyString(), any(SerializationType.class));\n        verify(cache, never()).set(anyString(), anyInt(), any(), any(SerializationType.class));\n        verify(pjp).proceed();\n    }", "signature": "void invalid()", "full_signature": "@Test public void invalid()", "class_method_signature": "ReadThroughAssignCacheAdviceTest.invalid()", "testcase": true, "constructor": false, "invocations": ["assumeThat", "is", "thenReturn", "when", "proceed", "assertEquals", "cacheSingleAssign", "get", "verify", "never", "anyString", "any", "set", "verify", "never", "anyString", "anyInt", "any", "any", "proceed", "verify"]}, "focal_class": {"identifier": "ReadThroughAssignCacheAdvice", "superclass": "extends SingleReadCacheAdvice<ReadThroughAssignCache>", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ReadThroughAssignCacheAdvice.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ReadThroughAssignCacheAdvice.class)", "var_name": "LOG"}], "methods": [{"identifier": "ReadThroughAssignCacheAdvice", "parameters": "()", "modifiers": "public", "return": "", "signature": " ReadThroughAssignCacheAdvice()", "full_signature": "public  ReadThroughAssignCacheAdvice()", "class_method_signature": "ReadThroughAssignCacheAdvice.ReadThroughAssignCacheAdvice()", "testcase": false, "constructor": true}, {"identifier": "getSingleAssign", "parameters": "()", "modifiers": "@Pointcut(\"@annotation(com.google.code.ssm.api.ReadThroughAssignCache)\") public", "return": "void", "signature": "void getSingleAssign()", "full_signature": "@Pointcut(\"@annotation(com.google.code.ssm.api.ReadThroughAssignCache)\") public void getSingleAssign()", "class_method_signature": "ReadThroughAssignCacheAdvice.getSingleAssign()", "testcase": false, "constructor": false}, {"identifier": "cacheSingleAssign", "parameters": "(final ProceedingJoinPoint pjp)", "modifiers": "@Around(\"getSingleAssign()\") public", "return": "Object", "signature": "Object cacheSingleAssign(final ProceedingJoinPoint pjp)", "full_signature": "@Around(\"getSingleAssign()\") public Object cacheSingleAssign(final ProceedingJoinPoint pjp)", "class_method_signature": "ReadThroughAssignCacheAdvice.cacheSingleAssign(final ProceedingJoinPoint pjp)", "testcase": false, "constructor": false}, {"identifier": "getCacheKey", "parameters": "(final AnnotationData data, final Object[] args, final String methodDesc)", "modifiers": "@Override protected", "return": "String", "signature": "String getCacheKey(final AnnotationData data, final Object[] args, final String methodDesc)", "full_signature": "@Override protected String getCacheKey(final AnnotationData data, final Object[] args, final String methodDesc)", "class_method_signature": "ReadThroughAssignCacheAdvice.getCacheKey(final AnnotationData data, final Object[] args, final String methodDesc)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "@Override protected", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "@Override protected Logger getLogger()", "class_method_signature": "ReadThroughAssignCacheAdvice.getLogger()", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/aop/ReadThroughAssignCacheAdvice.java"}, "focal_method": {"identifier": "cacheSingleAssign", "parameters": "(final ProceedingJoinPoint pjp)", "modifiers": "@Around(\"getSingleAssign()\") public", "return": "Object", "body": "@Around(\"getSingleAssign()\")\n    public Object cacheSingleAssign(final ProceedingJoinPoint pjp) throws Throwable {\n        return cache(pjp);\n    }", "signature": "Object cacheSingleAssign(final ProceedingJoinPoint pjp)", "full_signature": "@Around(\"getSingleAssign()\") public Object cacheSingleAssign(final ProceedingJoinPoint pjp)", "class_method_signature": "ReadThroughAssignCacheAdvice.cacheSingleAssign(final ProceedingJoinPoint pjp)", "testcase": false, "constructor": false, "invocations": ["cache"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}