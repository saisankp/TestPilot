{"test_class": {"identifier": "AppSchemaDataAccessConfiguratorTest", "superclass": "extends AppSchemaTestSupport", "interfaces": "", "fields": [], "file": "modules/extension/app-schema/app-schema/src/test/java/org/geotools/data/complex/config/AppSchemaDataAccessConfiguratorTest.java"}, "test_case": {"identifier": "testJoiningTrue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testJoiningTrue() {\n        // test joining set to true\n        AppSchemaDataAccessRegistry.getAppSchemaProperties().setProperty(\n                AppSchemaDataAccessConfigurator.PROPERTY_JOINING, \"true\");\n        boolean joining = AppSchemaDataAccessConfigurator.isJoining();\n        assertTrue(joining);\n        AppSchemaDataAccessRegistry.clearAppSchemaProperties();\n    }", "signature": "void testJoiningTrue()", "full_signature": "@Test public void testJoiningTrue()", "class_method_signature": "AppSchemaDataAccessConfiguratorTest.testJoiningTrue()", "testcase": true, "constructor": false, "invocations": ["setProperty", "getAppSchemaProperties", "isJoining", "assertTrue", "clearAppSchemaProperties"]}, "focal_class": {"identifier": "AppSchemaDataAccessConfigurator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = org.geotools.util.logging.Logging\n            .getLogger(AppSchemaDataAccessConfigurator.class.getPackage().getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging\n            .getLogger(AppSchemaDataAccessConfigurator.class.getPackage().getName())", "var_name": "LOGGER"}, {"original_string": "public static String PROPERTY_JOINING = \"app-schema.joining\";", "modifier": "public static", "type": "String", "declarator": "PROPERTY_JOINING = \"app-schema.joining\"", "var_name": "PROPERTY_JOINING"}, {"original_string": "private AppSchemaDataAccessDTO config;", "modifier": "private", "type": "AppSchemaDataAccessDTO", "declarator": "config", "var_name": "config"}, {"original_string": "private AppSchemaFeatureTypeRegistry typeRegistry;", "modifier": "private", "type": "AppSchemaFeatureTypeRegistry", "declarator": "typeRegistry", "var_name": "typeRegistry"}, {"original_string": "private FilterFactory ff = new FilterFactoryImplReportInvalidProperty();", "modifier": "private", "type": "FilterFactory", "declarator": "ff = new FilterFactoryImplReportInvalidProperty()", "var_name": "ff"}, {"original_string": "private NamespaceSupport namespaces;", "modifier": "private", "type": "NamespaceSupport", "declarator": "namespaces", "var_name": "namespaces"}, {"original_string": "private Map schemaURIs;", "modifier": "private", "type": "Map", "declarator": "schemaURIs", "var_name": "schemaURIs"}, {"original_string": "@SuppressWarnings(\"serial\")\n    private static final List<String> SAFE_DATASTORE_PARAMS = Collections\n            .unmodifiableList(new ArrayList<String>() {\n                {\n                    add(\"url\"); // shapefile\n                    add(\"directory\"); // propertyfile\n                    add(\"namespace\"); // just about everything\n                    add(\"dbtype\"); // jdbc\n                    add(\"jndiReferenceName\"); // jdni\n                    // these are all various jdbc options\n                    add(\"host\");\n                    add(\"port\");\n                    add(\"database\");\n                    add(\"schema\");\n                    add(\"user\");\n                }\n            });", "modifier": "@SuppressWarnings(\"serial\")\n    private static final", "type": "List<String>", "declarator": "SAFE_DATASTORE_PARAMS = Collections\n            .unmodifiableList(new ArrayList<String>() {\n                {\n                    add(\"url\"); // shapefile\n                    add(\"directory\"); // propertyfile\n                    add(\"namespace\"); // just about everything\n                    add(\"dbtype\"); // jdbc\n                    add(\"jndiReferenceName\"); // jdni\n                    // these are all various jdbc options\n                    add(\"host\");\n                    add(\"port\");\n                    add(\"database\");\n                    add(\"schema\");\n                    add(\"user\");\n                }\n            })", "var_name": "SAFE_DATASTORE_PARAMS"}], "methods": [{"identifier": "isJoining", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isJoining()", "full_signature": "public static boolean isJoining()", "class_method_signature": "AppSchemaDataAccessConfigurator.isJoining()", "testcase": false, "constructor": false}, {"identifier": "isJoiningSet", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isJoiningSet()", "full_signature": "public static boolean isJoiningSet()", "class_method_signature": "AppSchemaDataAccessConfigurator.isJoiningSet()", "testcase": false, "constructor": false}, {"identifier": "AppSchemaDataAccessConfigurator", "parameters": "(AppSchemaDataAccessDTO config)", "modifiers": "private", "return": "", "signature": " AppSchemaDataAccessConfigurator(AppSchemaDataAccessDTO config)", "full_signature": "private  AppSchemaDataAccessConfigurator(AppSchemaDataAccessDTO config)", "class_method_signature": "AppSchemaDataAccessConfigurator.AppSchemaDataAccessConfigurator(AppSchemaDataAccessDTO config)", "testcase": false, "constructor": true}, {"identifier": "buildMappings", "parameters": "(AppSchemaDataAccessDTO config)", "modifiers": "public static", "return": "Set<FeatureTypeMapping>", "signature": "Set<FeatureTypeMapping> buildMappings(AppSchemaDataAccessDTO config)", "full_signature": "public static Set<FeatureTypeMapping> buildMappings(AppSchemaDataAccessDTO config)", "class_method_signature": "AppSchemaDataAccessConfigurator.buildMappings(AppSchemaDataAccessDTO config)", "testcase": false, "constructor": false}, {"identifier": "buildMappings", "parameters": "()", "modifiers": "private", "return": "Set<FeatureTypeMapping>", "signature": "Set<FeatureTypeMapping> buildMappings()", "full_signature": "private Set<FeatureTypeMapping> buildMappings()", "class_method_signature": "AppSchemaDataAccessConfigurator.buildMappings()", "testcase": false, "constructor": false}, {"identifier": "disposeUnusedSourceDataStores", "parameters": "(\n            Map<String, DataAccess<FeatureType, Feature>> sourceDataStores,\n            Set<FeatureTypeMapping> featureTypeMappings)", "modifiers": "private", "return": "void", "signature": "void disposeUnusedSourceDataStores(\n            Map<String, DataAccess<FeatureType, Feature>> sourceDataStores,\n            Set<FeatureTypeMapping> featureTypeMappings)", "full_signature": "private void disposeUnusedSourceDataStores(\n            Map<String, DataAccess<FeatureType, Feature>> sourceDataStores,\n            Set<FeatureTypeMapping> featureTypeMappings)", "class_method_signature": "AppSchemaDataAccessConfigurator.disposeUnusedSourceDataStores(\n            Map<String, DataAccess<FeatureType, Feature>> sourceDataStores,\n            Set<FeatureTypeMapping> featureTypeMappings)", "testcase": false, "constructor": false}, {"identifier": "createFeatureTypeMappings", "parameters": "(\n            Map<String, DataAccess<FeatureType, Feature>> sourceDataStores)", "modifiers": "private", "return": "Set<FeatureTypeMapping>", "signature": "Set<FeatureTypeMapping> createFeatureTypeMappings(\n            Map<String, DataAccess<FeatureType, Feature>> sourceDataStores)", "full_signature": "private Set<FeatureTypeMapping> createFeatureTypeMappings(\n            Map<String, DataAccess<FeatureType, Feature>> sourceDataStores)", "class_method_signature": "AppSchemaDataAccessConfigurator.createFeatureTypeMappings(\n            Map<String, DataAccess<FeatureType, Feature>> sourceDataStores)", "testcase": false, "constructor": false}, {"identifier": "getTargetDescriptor", "parameters": "(TypeMapping dto, CoordinateReferenceSystem crs)", "modifiers": "private", "return": "AttributeDescriptor", "signature": "AttributeDescriptor getTargetDescriptor(TypeMapping dto, CoordinateReferenceSystem crs)", "full_signature": "private AttributeDescriptor getTargetDescriptor(TypeMapping dto, CoordinateReferenceSystem crs)", "class_method_signature": "AppSchemaDataAccessConfigurator.getTargetDescriptor(TypeMapping dto, CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "getAttributeMappings", "parameters": "(final AttributeDescriptor root, final List attDtos,\n            String itemXpath, CoordinateReferenceSystem crs, boolean isJDBC)", "modifiers": "private", "return": "List", "signature": "List getAttributeMappings(final AttributeDescriptor root, final List attDtos,\n            String itemXpath, CoordinateReferenceSystem crs, boolean isJDBC)", "full_signature": "private List getAttributeMappings(final AttributeDescriptor root, final List attDtos,\n            String itemXpath, CoordinateReferenceSystem crs, boolean isJDBC)", "class_method_signature": "AppSchemaDataAccessConfigurator.getAttributeMappings(final AttributeDescriptor root, final List attDtos,\n            String itemXpath, CoordinateReferenceSystem crs, boolean isJDBC)", "testcase": false, "constructor": false}, {"identifier": "validateConfiguredNamespaces", "parameters": "(StepList targetXPathSteps)", "modifiers": "private", "return": "void", "signature": "void validateConfiguredNamespaces(StepList targetXPathSteps)", "full_signature": "private void validateConfiguredNamespaces(StepList targetXPathSteps)", "class_method_signature": "AppSchemaDataAccessConfigurator.validateConfiguredNamespaces(StepList targetXPathSteps)", "testcase": false, "constructor": false}, {"identifier": "parseOgcCqlExpression", "parameters": "(String sourceExpr)", "modifiers": "private", "return": "Expression", "signature": "Expression parseOgcCqlExpression(String sourceExpr)", "full_signature": "private Expression parseOgcCqlExpression(String sourceExpr)", "class_method_signature": "AppSchemaDataAccessConfigurator.parseOgcCqlExpression(String sourceExpr)", "testcase": false, "constructor": false}, {"identifier": "getClientProperties", "parameters": "(org.geotools.data.complex.config.AttributeMapping dto)", "modifiers": "private", "return": "Map", "signature": "Map getClientProperties(org.geotools.data.complex.config.AttributeMapping dto)", "full_signature": "private Map getClientProperties(org.geotools.data.complex.config.AttributeMapping dto)", "class_method_signature": "AppSchemaDataAccessConfigurator.getClientProperties(org.geotools.data.complex.config.AttributeMapping dto)", "testcase": false, "constructor": false}, {"identifier": "getFeatureSource", "parameters": "(TypeMapping dto,\n            Map<String, DataAccess<FeatureType, Feature>> sourceDataStores)", "modifiers": "private", "return": "FeatureSource<FeatureType, Feature>", "signature": "FeatureSource<FeatureType, Feature> getFeatureSource(TypeMapping dto,\n            Map<String, DataAccess<FeatureType, Feature>> sourceDataStores)", "full_signature": "private FeatureSource<FeatureType, Feature> getFeatureSource(TypeMapping dto,\n            Map<String, DataAccess<FeatureType, Feature>> sourceDataStores)", "class_method_signature": "AppSchemaDataAccessConfigurator.getFeatureSource(TypeMapping dto,\n            Map<String, DataAccess<FeatureType, Feature>> sourceDataStores)", "testcase": false, "constructor": false}, {"identifier": "parseGmlSchemas", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void parseGmlSchemas()", "full_signature": "private void parseGmlSchemas()", "class_method_signature": "AppSchemaDataAccessConfigurator.parseGmlSchemas()", "testcase": false, "constructor": false}, {"identifier": "buildCatalog", "parameters": "()", "modifiers": "private", "return": "SchemaCatalog", "signature": "SchemaCatalog buildCatalog()", "full_signature": "private SchemaCatalog buildCatalog()", "class_method_signature": "AppSchemaDataAccessConfigurator.buildCatalog()", "testcase": false, "constructor": false}, {"identifier": "buildCache", "parameters": "()", "modifiers": "private", "return": "SchemaCache", "signature": "SchemaCache buildCache()", "full_signature": "private SchemaCache buildCache()", "class_method_signature": "AppSchemaDataAccessConfigurator.buildCache()", "testcase": false, "constructor": false}, {"identifier": "buildResolver", "parameters": "()", "modifiers": "private", "return": "SchemaResolver", "signature": "SchemaResolver buildResolver()", "full_signature": "private SchemaResolver buildResolver()", "class_method_signature": "AppSchemaDataAccessConfigurator.buildResolver()", "testcase": false, "constructor": false}, {"identifier": "resolveResourceLocation", "parameters": "(final URL baseUrl, String schemaLocation)", "modifiers": "private", "return": "URL", "signature": "URL resolveResourceLocation(final URL baseUrl, String schemaLocation)", "full_signature": "private URL resolveResourceLocation(final URL baseUrl, String schemaLocation)", "class_method_signature": "AppSchemaDataAccessConfigurator.resolveResourceLocation(final URL baseUrl, String schemaLocation)", "testcase": false, "constructor": false}, {"identifier": "acquireSourceDatastores", "parameters": "()", "modifiers": "private", "return": "Map<String, DataAccess<FeatureType, Feature>>", "signature": "Map<String, DataAccess<FeatureType, Feature>> acquireSourceDatastores()", "full_signature": "private Map<String, DataAccess<FeatureType, Feature>> acquireSourceDatastores()", "class_method_signature": "AppSchemaDataAccessConfigurator.acquireSourceDatastores()", "testcase": false, "constructor": false}, {"identifier": "filterDatastoreParams", "parameters": "(Map datastoreParams)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Map", "signature": "Map filterDatastoreParams(Map datastoreParams)", "full_signature": "@SuppressWarnings(\"unchecked\") private Map filterDatastoreParams(Map datastoreParams)", "class_method_signature": "AppSchemaDataAccessConfigurator.filterDatastoreParams(Map datastoreParams)", "testcase": false, "constructor": false}, {"identifier": "resolveRelativePaths", "parameters": "(\n            final Map<String, Serializable> datastoreParams)", "modifiers": "private", "return": "Map<String, Serializable>", "signature": "Map<String, Serializable> resolveRelativePaths(\n            final Map<String, Serializable> datastoreParams)", "full_signature": "private Map<String, Serializable> resolveRelativePaths(\n            final Map<String, Serializable> datastoreParams)", "class_method_signature": "AppSchemaDataAccessConfigurator.resolveRelativePaths(\n            final Map<String, Serializable> datastoreParams)", "testcase": false, "constructor": false}], "file": "modules/extension/app-schema/app-schema/src/main/java/org/geotools/data/complex/config/AppSchemaDataAccessConfigurator.java"}, "focal_method": {"identifier": "isJoining", "parameters": "()", "modifiers": "public static", "return": "boolean", "body": "public static boolean isJoining() {\n        String s=AppSchemaDataAccessRegistry.getAppSchemaProperties().getProperty(PROPERTY_JOINING);\n        return s==null || s.equalsIgnoreCase(\"true\");\n    }", "signature": "boolean isJoining()", "full_signature": "public static boolean isJoining()", "class_method_signature": "AppSchemaDataAccessConfigurator.isJoining()", "testcase": false, "constructor": false, "invocations": ["getProperty", "getAppSchemaProperties", "equalsIgnoreCase"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}