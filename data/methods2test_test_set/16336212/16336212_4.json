{"test_class": {"identifier": "AlertingServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String AGENT_ID = \"\";", "modifier": "private static final", "type": "String", "declarator": "AGENT_ID = \"\"", "var_name": "AGENT_ID"}, {"original_string": "private static final AlertConfig TRANSACTION_X_PERCENTILE_ALERT_CONFIG;", "modifier": "private static final", "type": "AlertConfig", "declarator": "TRANSACTION_X_PERCENTILE_ALERT_CONFIG", "var_name": "TRANSACTION_X_PERCENTILE_ALERT_CONFIG"}, {"original_string": "private static final AlertConfig UPPER_BOUND_GAUGE_ALERT_CONFIG;", "modifier": "private static final", "type": "AlertConfig", "declarator": "UPPER_BOUND_GAUGE_ALERT_CONFIG", "var_name": "UPPER_BOUND_GAUGE_ALERT_CONFIG"}, {"original_string": "private static final AlertConfig LOWER_BOUND_GAUGE_ALERT_CONFIG;", "modifier": "private static final", "type": "AlertConfig", "declarator": "LOWER_BOUND_GAUGE_ALERT_CONFIG", "var_name": "LOWER_BOUND_GAUGE_ALERT_CONFIG"}, {"original_string": "private static final LazySecretKey LAZY_SECRET_KEY;", "modifier": "private static final", "type": "LazySecretKey", "declarator": "LAZY_SECRET_KEY", "var_name": "LAZY_SECRET_KEY"}, {"original_string": "private static final SmtpConfig SMTP_CONFIG;", "modifier": "private static final", "type": "SmtpConfig", "declarator": "SMTP_CONFIG", "var_name": "SMTP_CONFIG"}, {"original_string": "private static final HttpProxyConfig HTTP_PROXY_CONFIG;", "modifier": "private static final", "type": "HttpProxyConfig", "declarator": "HTTP_PROXY_CONFIG", "var_name": "HTTP_PROXY_CONFIG"}, {"original_string": "private ConfigRepository configRepository;", "modifier": "private", "type": "ConfigRepository", "declarator": "configRepository", "var_name": "configRepository"}, {"original_string": "private IncidentRepository incidentRepository;", "modifier": "private", "type": "IncidentRepository", "declarator": "incidentRepository", "var_name": "incidentRepository"}, {"original_string": "private AggregateRepository aggregateRepository;", "modifier": "private", "type": "AggregateRepository", "declarator": "aggregateRepository", "var_name": "aggregateRepository"}, {"original_string": "private GaugeValueRepository gaugeValueRepository;", "modifier": "private", "type": "GaugeValueRepository", "declarator": "gaugeValueRepository", "var_name": "gaugeValueRepository"}, {"original_string": "private TraceRepository traceRepository;", "modifier": "private", "type": "TraceRepository", "declarator": "traceRepository", "var_name": "traceRepository"}, {"original_string": "private RollupLevelService rollupLevelService;", "modifier": "private", "type": "RollupLevelService", "declarator": "rollupLevelService", "var_name": "rollupLevelService"}, {"original_string": "private MockMailService mailService;", "modifier": "private", "type": "MockMailService", "declarator": "mailService", "var_name": "mailService"}, {"original_string": "private HttpClient httpClient;", "modifier": "private", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}], "file": "common2/src/test/java/org/glowroot/common2/repo/util/AlertingServiceTest.java"}, "test_case": {"identifier": "shouldSendMailForLowerBoundGaugeAlert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldSendMailForLowerBoundGaugeAlert() throws Exception {\n        // given\n        setupForGauge(500);\n        AlertingService alertingService = new AlertingService(configRepository,\n                incidentRepository, aggregateRepository, gaugeValueRepository, traceRepository,\n                rollupLevelService, mailService, httpClient, newLockSet(),\n                newLockSet(),\n                Clock.systemClock());\n        // when\n        alertingService.checkMetricAlert(\"\", \"\", \"\", LOWER_BOUND_GAUGE_ALERT_CONFIG,\n                LOWER_BOUND_GAUGE_ALERT_CONFIG.getCondition().getMetricCondition(), 120000);\n        // then\n        assertThat(mailService.getMessage()).isNotNull();\n        assertThat(((String) mailService.getMessage().getContent()).trim())\n                .isEqualTo(\"Average over the last 1 minute is less than or equal to the alert\"\n                        + \" threshold of 500 milliseconds per second.\");\n    }", "signature": "void shouldSendMailForLowerBoundGaugeAlert()", "full_signature": "@Test public void shouldSendMailForLowerBoundGaugeAlert()", "class_method_signature": "AlertingServiceTest.shouldSendMailForLowerBoundGaugeAlert()", "testcase": true, "constructor": false, "invocations": ["setupForGauge", "newLockSet", "newLockSet", "systemClock", "checkMetricAlert", "getMetricCondition", "getCondition", "isNotNull", "assertThat", "getMessage", "isEqualTo", "assertThat", "trim", "getContent", "getMessage"]}, "focal_class": {"identifier": "AlertingService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AlertingService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AlertingService.class)", "var_name": "logger"}, {"original_string": "private final ConfigRepository configRepository;", "modifier": "private final", "type": "ConfigRepository", "declarator": "configRepository", "var_name": "configRepository"}, {"original_string": "private final IncidentRepository incidentRepository;", "modifier": "private final", "type": "IncidentRepository", "declarator": "incidentRepository", "var_name": "incidentRepository"}, {"original_string": "private final MailService mailService;", "modifier": "private final", "type": "MailService", "declarator": "mailService", "var_name": "mailService"}, {"original_string": "private final HttpClient httpClient;", "modifier": "private final", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "private final LockSet<IncidentKey> openingIncidentLockSet;", "modifier": "private final", "type": "LockSet<IncidentKey>", "declarator": "openingIncidentLockSet", "var_name": "openingIncidentLockSet"}, {"original_string": "private final LockSet<IncidentKey> resolvingIncidentLockSet;", "modifier": "private final", "type": "LockSet<IncidentKey>", "declarator": "resolvingIncidentLockSet", "var_name": "resolvingIncidentLockSet"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private final MetricService metricService;", "modifier": "private final", "type": "MetricService", "declarator": "metricService", "var_name": "metricService"}, {"original_string": "private final RateLimiter smtpHostWarningRateLimiter = RateLimiter.create(1.0 / 3600);", "modifier": "private final", "type": "RateLimiter", "declarator": "smtpHostWarningRateLimiter = RateLimiter.create(1.0 / 3600)", "var_name": "smtpHostWarningRateLimiter"}, {"original_string": "private final ScheduledExecutorService pagerDutyRetryExecutor;", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "pagerDutyRetryExecutor", "var_name": "pagerDutyRetryExecutor"}, {"original_string": "private volatile boolean closed;", "modifier": "private volatile", "type": "boolean", "declarator": "closed", "var_name": "closed"}], "methods": [{"identifier": "AlertingService", "parameters": "(ConfigRepository configRepository, IncidentRepository incidentRepository,\n            AggregateRepository aggregateRepository, GaugeValueRepository gaugeValueRepository,\n            TraceRepository traceRepository, RollupLevelService rollupLevelService,\n            MailService mailService, HttpClient httpClient,\n            LockSet<IncidentKey> openingIncidentLockSet,\n            LockSet<IncidentKey> resolvingIncidentLockSet, Clock clock)", "modifiers": "public", "return": "", "signature": " AlertingService(ConfigRepository configRepository, IncidentRepository incidentRepository,\n            AggregateRepository aggregateRepository, GaugeValueRepository gaugeValueRepository,\n            TraceRepository traceRepository, RollupLevelService rollupLevelService,\n            MailService mailService, HttpClient httpClient,\n            LockSet<IncidentKey> openingIncidentLockSet,\n            LockSet<IncidentKey> resolvingIncidentLockSet, Clock clock)", "full_signature": "public  AlertingService(ConfigRepository configRepository, IncidentRepository incidentRepository,\n            AggregateRepository aggregateRepository, GaugeValueRepository gaugeValueRepository,\n            TraceRepository traceRepository, RollupLevelService rollupLevelService,\n            MailService mailService, HttpClient httpClient,\n            LockSet<IncidentKey> openingIncidentLockSet,\n            LockSet<IncidentKey> resolvingIncidentLockSet, Clock clock)", "class_method_signature": "AlertingService.AlertingService(ConfigRepository configRepository, IncidentRepository incidentRepository,\n            AggregateRepository aggregateRepository, GaugeValueRepository gaugeValueRepository,\n            TraceRepository traceRepository, RollupLevelService rollupLevelService,\n            MailService mailService, HttpClient httpClient,\n            LockSet<IncidentKey> openingIncidentLockSet,\n            LockSet<IncidentKey> resolvingIncidentLockSet, Clock clock)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "AlertingService.close()", "testcase": false, "constructor": false}, {"identifier": "checkForDeletedAlerts", "parameters": "(String agentRollupId)", "modifiers": "public", "return": "void", "signature": "void checkForDeletedAlerts(String agentRollupId)", "full_signature": "public void checkForDeletedAlerts(String agentRollupId)", "class_method_signature": "AlertingService.checkForDeletedAlerts(String agentRollupId)", "testcase": false, "constructor": false}, {"identifier": "checkForAllDeletedAlerts", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void checkForAllDeletedAlerts()", "full_signature": "public void checkForAllDeletedAlerts()", "class_method_signature": "AlertingService.checkForAllDeletedAlerts()", "testcase": false, "constructor": false}, {"identifier": "checkMetricAlert", "parameters": "(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime)", "modifiers": "public", "return": "void", "signature": "void checkMetricAlert(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime)", "full_signature": "public void checkMetricAlert(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime)", "class_method_signature": "AlertingService.checkMetricAlert(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime)", "testcase": false, "constructor": false}, {"identifier": "openIncident", "parameters": "(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime, AlertCondition alertCondition)", "modifiers": "private", "return": "void", "signature": "void openIncident(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime, AlertCondition alertCondition)", "full_signature": "private void openIncident(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime, AlertCondition alertCondition)", "class_method_signature": "AlertingService.openIncident(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime, AlertCondition alertCondition)", "testcase": false, "constructor": false}, {"identifier": "resolveIncident", "parameters": "(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime, AlertCondition alertCondition, OpenIncident openIncident)", "modifiers": "private", "return": "void", "signature": "void resolveIncident(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime, AlertCondition alertCondition, OpenIncident openIncident)", "full_signature": "private void resolveIncident(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime, AlertCondition alertCondition, OpenIncident openIncident)", "class_method_signature": "AlertingService.resolveIncident(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime, AlertCondition alertCondition, OpenIncident openIncident)", "testcase": false, "constructor": false}, {"identifier": "isDeletedAlert", "parameters": "(OpenIncident openIncident)", "modifiers": "private", "return": "boolean", "signature": "boolean isDeletedAlert(OpenIncident openIncident)", "full_signature": "private boolean isDeletedAlert(OpenIncident openIncident)", "class_method_signature": "AlertingService.isDeletedAlert(OpenIncident openIncident)", "testcase": false, "constructor": false}, {"identifier": "getAlertConfigsLeniently", "parameters": "(String agentRollupId)", "modifiers": "private", "return": "List<AlertConfig>", "signature": "List<AlertConfig> getAlertConfigsLeniently(String agentRollupId)", "full_signature": "private List<AlertConfig> getAlertConfigsLeniently(String agentRollupId)", "class_method_signature": "AlertingService.getAlertConfigsLeniently(String agentRollupId)", "testcase": false, "constructor": false}, {"identifier": "sendMetricAlert", "parameters": "(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime, boolean ok)", "modifiers": "private", "return": "void", "signature": "void sendMetricAlert(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime, boolean ok)", "full_signature": "private void sendMetricAlert(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime, boolean ok)", "class_method_signature": "AlertingService.sendMetricAlert(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime, boolean ok)", "testcase": false, "constructor": false}, {"identifier": "sendNotification", "parameters": "(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, long endTime, String subject,\n            String messageText, boolean ok)", "modifiers": "public", "return": "void", "signature": "void sendNotification(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, long endTime, String subject,\n            String messageText, boolean ok)", "full_signature": "public void sendNotification(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, long endTime, String subject,\n            String messageText, boolean ok)", "class_method_signature": "AlertingService.sendNotification(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, long endTime, String subject,\n            String messageText, boolean ok)", "testcase": false, "constructor": false}, {"identifier": "sendPagerDutyWithRetry", "parameters": "(String agentRollupId, String agentRollupDisplay,\n            AlertConfig alertConfig, PagerDutyNotification pagerDutyNotification,\n            long endTime, String subject, String messageText, boolean ok)", "modifiers": "private", "return": "void", "signature": "void sendPagerDutyWithRetry(String agentRollupId, String agentRollupDisplay,\n            AlertConfig alertConfig, PagerDutyNotification pagerDutyNotification,\n            long endTime, String subject, String messageText, boolean ok)", "full_signature": "private void sendPagerDutyWithRetry(String agentRollupId, String agentRollupDisplay,\n            AlertConfig alertConfig, PagerDutyNotification pagerDutyNotification,\n            long endTime, String subject, String messageText, boolean ok)", "class_method_signature": "AlertingService.sendPagerDutyWithRetry(String agentRollupId, String agentRollupDisplay,\n            AlertConfig alertConfig, PagerDutyNotification pagerDutyNotification,\n            long endTime, String subject, String messageText, boolean ok)", "testcase": false, "constructor": false}, {"identifier": "sendSlackWithRetry", "parameters": "(String centralDisplay, String agentRollupDisplay,\n            String slackWebhookUrl, String slackChannel, long endTime, String subject,\n            String messageText, boolean ok)", "modifiers": "private", "return": "void", "signature": "void sendSlackWithRetry(String centralDisplay, String agentRollupDisplay,\n            String slackWebhookUrl, String slackChannel, long endTime, String subject,\n            String messageText, boolean ok)", "full_signature": "private void sendSlackWithRetry(String centralDisplay, String agentRollupDisplay,\n            String slackWebhookUrl, String slackChannel, long endTime, String subject,\n            String messageText, boolean ok)", "class_method_signature": "AlertingService.sendSlackWithRetry(String centralDisplay, String agentRollupDisplay,\n            String slackWebhookUrl, String slackChannel, long endTime, String subject,\n            String messageText, boolean ok)", "testcase": false, "constructor": false}, {"identifier": "sendEmail", "parameters": "(String centralDisplay, String agentRollupDisplay, String subject,\n            List<String> emailAddresses, String messageText, SmtpConfig smtpConfig,\n            @Nullable String passwordOverride, LazySecretKey lazySecretKey, MailService mailService)", "modifiers": "public static", "return": "void", "signature": "void sendEmail(String centralDisplay, String agentRollupDisplay, String subject,\n            List<String> emailAddresses, String messageText, SmtpConfig smtpConfig,\n            @Nullable String passwordOverride, LazySecretKey lazySecretKey, MailService mailService)", "full_signature": "public static void sendEmail(String centralDisplay, String agentRollupDisplay, String subject,\n            List<String> emailAddresses, String messageText, SmtpConfig smtpConfig,\n            @Nullable String passwordOverride, LazySecretKey lazySecretKey, MailService mailService)", "class_method_signature": "AlertingService.sendEmail(String centralDisplay, String agentRollupDisplay, String subject,\n            List<String> emailAddresses, String messageText, SmtpConfig smtpConfig,\n            @Nullable String passwordOverride, LazySecretKey lazySecretKey, MailService mailService)", "testcase": false, "constructor": false}, {"identifier": "getPreUpperBoundText", "parameters": "(boolean ok)", "modifiers": "public static", "return": "String", "signature": "String getPreUpperBoundText(boolean ok)", "full_signature": "public static String getPreUpperBoundText(boolean ok)", "class_method_signature": "AlertingService.getPreUpperBoundText(boolean ok)", "testcase": false, "constructor": false}, {"identifier": "getGaugeThresholdText", "parameters": "(double threshold, String gaugeUnit)", "modifiers": "public static", "return": "String", "signature": "String getGaugeThresholdText(double threshold, String gaugeUnit)", "full_signature": "public static String getGaugeThresholdText(double threshold, String gaugeUnit)", "class_method_signature": "AlertingService.getGaugeThresholdText(double threshold, String gaugeUnit)", "testcase": false, "constructor": false}, {"identifier": "getOverTheLastMinutesText", "parameters": "(int timePeriodSeconds)", "modifiers": "public static", "return": "String", "signature": "String getOverTheLastMinutesText(int timePeriodSeconds)", "full_signature": "public static String getOverTheLastMinutesText(int timePeriodSeconds)", "class_method_signature": "AlertingService.getOverTheLastMinutesText(int timePeriodSeconds)", "testcase": false, "constructor": false}, {"identifier": "getWithUnit", "parameters": "(double val, String unit)", "modifiers": "public static", "return": "String", "signature": "String getWithUnit(double val, String unit)", "full_signature": "public static String getWithUnit(double val, String unit)", "class_method_signature": "AlertingService.getWithUnit(double val, String unit)", "testcase": false, "constructor": false}, {"identifier": "hasTransactionTypeAndName", "parameters": "(String metric)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasTransactionTypeAndName(String metric)", "full_signature": "public static boolean hasTransactionTypeAndName(String metric)", "class_method_signature": "AlertingService.hasTransactionTypeAndName(String metric)", "testcase": false, "constructor": false}, {"identifier": "hasMinTransactionCount", "parameters": "(String metric)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasMinTransactionCount(String metric)", "full_signature": "public static boolean hasMinTransactionCount(String metric)", "class_method_signature": "AlertingService.hasMinTransactionCount(String metric)", "testcase": false, "constructor": false}, {"identifier": "hasErrorMessageFilter", "parameters": "(String metric)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasErrorMessageFilter(String metric)", "full_signature": "public static boolean hasErrorMessageFilter(String metric)", "class_method_signature": "AlertingService.hasErrorMessageFilter(String metric)", "testcase": false, "constructor": false}, {"identifier": "getPreLowerBoundText", "parameters": "(boolean ok)", "modifiers": "private static", "return": "String", "signature": "String getPreLowerBoundText(boolean ok)", "full_signature": "private static String getPreLowerBoundText(boolean ok)", "class_method_signature": "AlertingService.getPreLowerBoundText(boolean ok)", "testcase": false, "constructor": false}, {"identifier": "createMailSession", "parameters": "(SmtpConfig smtpConfig,\n            @Nullable String passwordOverride, LazySecretKey lazySecretKey)", "modifiers": "private static", "return": "Session", "signature": "Session createMailSession(SmtpConfig smtpConfig,\n            @Nullable String passwordOverride, LazySecretKey lazySecretKey)", "full_signature": "private static Session createMailSession(SmtpConfig smtpConfig,\n            @Nullable String passwordOverride, LazySecretKey lazySecretKey)", "class_method_signature": "AlertingService.createMailSession(SmtpConfig smtpConfig,\n            @Nullable String passwordOverride, LazySecretKey lazySecretKey)", "testcase": false, "constructor": false}, {"identifier": "getPassword", "parameters": "(SmtpConfig smtpConfig, @Nullable String passwordOverride,\n            LazySecretKey lazySecretKey)", "modifiers": "private static", "return": "String", "signature": "String getPassword(SmtpConfig smtpConfig, @Nullable String passwordOverride,\n            LazySecretKey lazySecretKey)", "full_signature": "private static String getPassword(SmtpConfig smtpConfig, @Nullable String passwordOverride,\n            LazySecretKey lazySecretKey)", "class_method_signature": "AlertingService.getPassword(SmtpConfig smtpConfig, @Nullable String passwordOverride,\n            LazySecretKey lazySecretKey)", "testcase": false, "constructor": false}], "file": "common2/src/main/java/org/glowroot/common2/repo/util/AlertingService.java"}, "focal_method": {"identifier": "checkMetricAlert", "parameters": "(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime)", "modifiers": "public", "return": "void", "body": "public void checkMetricAlert(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime) throws Exception {\n        long startTime = endTime - SECONDS.toMillis(metricCondition.getTimePeriodSeconds());\n        Number value =\n                metricService.getMetricValue(agentRollupId, metricCondition, startTime, endTime);\n        if (value == null) {\n            // cannot calculate due to no data, e.g. error rate (but not error count, which can be\n            // calculated - zero - when no data)\n            return;\n        }\n        boolean currentlyTriggered;\n        if (metricCondition.getLowerBoundThreshold()) {\n            currentlyTriggered = value.doubleValue() <= metricCondition.getThreshold();\n        } else {\n            currentlyTriggered = value.doubleValue() >= metricCondition.getThreshold();\n        }\n        AlertCondition alertCondition = alertConfig.getCondition();\n        OpenIncident openIncident = incidentRepository.readOpenIncident(agentRollupId,\n                alertCondition, alertConfig.getSeverity());\n        if (openIncident != null && !currentlyTriggered) {\n            // TODO don't close if no data and no heartbeat?\n            resolveIncident(centralDisplay, agentRollupId, agentRollupDisplay, alertConfig,\n                    metricCondition, endTime, alertCondition, openIncident);\n        } else if (openIncident == null && currentlyTriggered) {\n            // don't open if min transaction count is not met\n            if (hasMinTransactionCount(metricCondition.getMetric())) {\n                long minTransactionCount = metricCondition.getMinTransactionCount();\n                if (minTransactionCount != 0) {\n                    long transactionCount = metricService.getTransactionCount(agentRollupId,\n                            metricCondition.getTransactionType(),\n                            Strings.emptyToNull(metricCondition.getTransactionName()), startTime,\n                            endTime);\n                    if (transactionCount < minTransactionCount) {\n                        return;\n                    }\n                }\n            }\n            openIncident(centralDisplay, agentRollupId, agentRollupDisplay, alertConfig,\n                    metricCondition, endTime, alertCondition);\n        }\n    }", "signature": "void checkMetricAlert(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime)", "full_signature": "public void checkMetricAlert(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime)", "class_method_signature": "AlertingService.checkMetricAlert(String centralDisplay, String agentRollupId,\n            String agentRollupDisplay, AlertConfig alertConfig, MetricCondition metricCondition,\n            long endTime)", "testcase": false, "constructor": false, "invocations": ["toMillis", "getTimePeriodSeconds", "getMetricValue", "getLowerBoundThreshold", "doubleValue", "getThreshold", "doubleValue", "getThreshold", "getCondition", "readOpenIncident", "getSeverity", "resolveIncident", "hasMinTransactionCount", "getMetric", "getMinTransactionCount", "getTransactionCount", "getTransactionType", "emptyToNull", "getTransactionName", "openIncident"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}