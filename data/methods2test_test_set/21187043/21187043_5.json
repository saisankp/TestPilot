{"test_class": {"identifier": "UtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "fit/src/test/java/jp/yokomark/fit/UtilsTest.java"}, "test_case": {"identifier": "getAnnotatedMethods", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAnnotatedMethods() throws Exception {\n        assertEquals(1, Utils.getAnnotatedMethods(MockVersionModule.class, VersionCode.class).size());\n        assertEquals(\"foo\", Utils.getAnnotatedMethods(MockVersionModule.class, VersionCode.class).get(0).getName());\n    }", "signature": "void getAnnotatedMethods()", "full_signature": "@Test public void getAnnotatedMethods()", "class_method_signature": "UtilsTest.getAnnotatedMethods()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "size", "getAnnotatedMethods", "assertEquals", "getName", "get", "getAnnotatedMethods"]}, "focal_class": {"identifier": "Utils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String TAG = Utils.class.getSimpleName();", "modifier": "public static final", "type": "String", "declarator": "TAG = Utils.class.getSimpleName()", "var_name": "TAG"}], "methods": [{"identifier": "Utils", "parameters": "()", "modifiers": "private", "return": "", "signature": " Utils()", "full_signature": "private  Utils()", "class_method_signature": "Utils.Utils()", "testcase": false, "constructor": true}, {"identifier": "getCurrentVersionCode", "parameters": "(Context context)", "modifiers": "public static", "return": "int", "signature": "int getCurrentVersionCode(Context context)", "full_signature": "public static int getCurrentVersionCode(Context context)", "class_method_signature": "Utils.getCurrentVersionCode(Context context)", "testcase": false, "constructor": false}, {"identifier": "getDefaultSharedPreferences", "parameters": "(Context context, String prefName)", "modifiers": "public static", "return": "SharedPreferences", "signature": "SharedPreferences getDefaultSharedPreferences(Context context, String prefName)", "full_signature": "public static SharedPreferences getDefaultSharedPreferences(Context context, String prefName)", "class_method_signature": "Utils.getDefaultSharedPreferences(Context context, String prefName)", "testcase": false, "constructor": false}, {"identifier": "getAnnotatedMethods", "parameters": "(Class<?> clazz, Class<? extends Annotation> ann)", "modifiers": "public static", "return": "List<Method>", "signature": "List<Method> getAnnotatedMethods(Class<?> clazz, Class<? extends Annotation> ann)", "full_signature": "public static List<Method> getAnnotatedMethods(Class<?> clazz, Class<? extends Annotation> ann)", "class_method_signature": "Utils.getAnnotatedMethods(Class<?> clazz, Class<? extends Annotation> ann)", "testcase": false, "constructor": false}, {"identifier": "hasAnnotatedMethods", "parameters": "(Class<?> clazz, Class<? extends Annotation> ann)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasAnnotatedMethods(Class<?> clazz, Class<? extends Annotation> ann)", "full_signature": "public static boolean hasAnnotatedMethods(Class<?> clazz, Class<? extends Annotation> ann)", "class_method_signature": "Utils.hasAnnotatedMethods(Class<?> clazz, Class<? extends Annotation> ann)", "testcase": false, "constructor": false}, {"identifier": "dispatch", "parameters": "(VersionModule module, Method method)", "modifiers": "public static", "return": "void", "signature": "void dispatch(VersionModule module, Method method)", "full_signature": "public static void dispatch(VersionModule module, Method method)", "class_method_signature": "Utils.dispatch(VersionModule module, Method method)", "testcase": false, "constructor": false}, {"identifier": "containsValueInRange", "parameters": "(int[] values, int min, int max)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsValueInRange(int[] values, int min, int max)", "full_signature": "public static boolean containsValueInRange(int[] values, int min, int max)", "class_method_signature": "Utils.containsValueInRange(int[] values, int min, int max)", "testcase": false, "constructor": false}, {"identifier": "isNewInstall", "parameters": "(int baseCode)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNewInstall(int baseCode)", "full_signature": "public static boolean isNewInstall(int baseCode)", "class_method_signature": "Utils.isNewInstall(int baseCode)", "testcase": false, "constructor": false}], "file": "fit/src/main/java/jp/yokomark/fit/Utils.java"}, "focal_method": {"identifier": "getAnnotatedMethods", "parameters": "(Class<?> clazz, Class<? extends Annotation> ann)", "modifiers": "public static", "return": "List<Method>", "body": "public static List<Method> getAnnotatedMethods(Class<?> clazz, Class<? extends Annotation> ann) {\n        List<Method> methods = new ArrayList<>();\n        Method[] declared = clazz.getDeclaredMethods();\n        for (Method method : declared) {\n            if (method.getAnnotation(ann) != null) {\n                methods.add(method);\n            }\n        }\n        return methods;\n    }", "signature": "List<Method> getAnnotatedMethods(Class<?> clazz, Class<? extends Annotation> ann)", "full_signature": "public static List<Method> getAnnotatedMethods(Class<?> clazz, Class<? extends Annotation> ann)", "class_method_signature": "Utils.getAnnotatedMethods(Class<?> clazz, Class<? extends Annotation> ann)", "testcase": false, "constructor": false, "invocations": ["getDeclaredMethods", "getAnnotation", "add"]}, "repository": {"repo_id": 21187043, "url": "https://github.com/KeithYokoma/Fit", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 57, "size": 140, "license": "licensed"}}