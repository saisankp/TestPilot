{"test_class": {"identifier": "CollectdReporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static Receiver receiver = new Receiver(25826);", "modifier": "@ClassRule\n    public static", "type": "Receiver", "declarator": "receiver = new Receiver(25826)", "var_name": "receiver"}, {"original_string": "private final MetricRegistry registry = new MetricRegistry();", "modifier": "private final", "type": "MetricRegistry", "declarator": "registry = new MetricRegistry()", "var_name": "registry"}, {"original_string": "private CollectdReporter reporter;", "modifier": "private", "type": "CollectdReporter", "declarator": "reporter", "var_name": "reporter"}], "file": "metrics-collectd/src/test/java/com/codahale/metrics/collectd/CollectdReporterTest.java"}, "test_case": {"identifier": "reportsHistograms", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void reportsHistograms() throws Exception {\n        Histogram histogram = mock(Histogram.class);\n        Snapshot snapshot = mock(Snapshot.class);\n        when(histogram.getCount()).thenReturn(1L);\n        when(histogram.getSnapshot()).thenReturn(snapshot);\n        when(snapshot.getMax()).thenReturn(2L);\n        when(snapshot.getMean()).thenReturn(3.0);\n        when(snapshot.getMin()).thenReturn(4L);\n        when(snapshot.getStdDev()).thenReturn(5.0);\n        when(snapshot.getMedian()).thenReturn(6.0);\n        when(snapshot.get75thPercentile()).thenReturn(7.0);\n        when(snapshot.get95thPercentile()).thenReturn(8.0);\n        when(snapshot.get98thPercentile()).thenReturn(9.0);\n        when(snapshot.get99thPercentile()).thenReturn(10.0);\n        when(snapshot.get999thPercentile()).thenReturn(11.0);\n\n        reporter.report(\n                map(),\n                map(),\n                map(\"histogram\", histogram),\n                map(),\n                map());\n\n        for (int i = 1; i <= 11; i++) {\n            assertThat(nextValues(receiver)).containsExactly((double) i);\n        }\n    }", "signature": "void reportsHistograms()", "full_signature": "@Test public void reportsHistograms()", "class_method_signature": "CollectdReporterTest.reportsHistograms()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getCount", "thenReturn", "when", "getSnapshot", "thenReturn", "when", "getMax", "thenReturn", "when", "getMean", "thenReturn", "when", "getMin", "thenReturn", "when", "getStdDev", "thenReturn", "when", "getMedian", "thenReturn", "when", "get75thPercentile", "thenReturn", "when", "get95thPercentile", "thenReturn", "when", "get98thPercentile", "thenReturn", "when", "get99thPercentile", "thenReturn", "when", "get999thPercentile", "report", "map", "map", "map", "map", "map", "containsExactly", "assertThat", "nextValues"]}, "focal_class": {"identifier": "CollectdReporter", "superclass": "extends ScheduledReporter", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(CollectdReporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(CollectdReporter.class)", "var_name": "LOG"}, {"original_string": "private static final String REPORTER_NAME = \"collectd-reporter\";", "modifier": "private static final", "type": "String", "declarator": "REPORTER_NAME = \"collectd-reporter\"", "var_name": "REPORTER_NAME"}, {"original_string": "private static final String FALLBACK_HOST_NAME = \"localhost\";", "modifier": "private static final", "type": "String", "declarator": "FALLBACK_HOST_NAME = \"localhost\"", "var_name": "FALLBACK_HOST_NAME"}, {"original_string": "private static final String COLLECTD_TYPE_GAUGE = \"gauge\";", "modifier": "private static final", "type": "String", "declarator": "COLLECTD_TYPE_GAUGE = \"gauge\"", "var_name": "COLLECTD_TYPE_GAUGE"}, {"original_string": "private String hostName;", "modifier": "private", "type": "String", "declarator": "hostName", "var_name": "hostName"}, {"original_string": "private final Sender sender;", "modifier": "private final", "type": "Sender", "declarator": "sender", "var_name": "sender"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private long period;", "modifier": "private", "type": "long", "declarator": "period", "var_name": "period"}, {"original_string": "private final PacketWriter writer;", "modifier": "private final", "type": "PacketWriter", "declarator": "writer", "var_name": "writer"}], "methods": [{"identifier": "forRegistry", "parameters": "(MetricRegistry registry)", "modifiers": "public static", "return": "Builder", "signature": "Builder forRegistry(MetricRegistry registry)", "full_signature": "public static Builder forRegistry(MetricRegistry registry)", "class_method_signature": "CollectdReporter.forRegistry(MetricRegistry registry)", "testcase": false, "constructor": false}, {"identifier": "CollectdReporter", "parameters": "(MetricRegistry registry,\n            String hostname, Sender sender,\n            ScheduledExecutorService executor, boolean shutdownExecutorOnStop,\n            Clock clock, TimeUnit rateUnit, TimeUnit durationUnit,\n            MetricFilter filter, Set<MetricAttribute> disabledMetricAttributes,\n            String username, String password,\n            SecurityLevel securityLevel)", "modifiers": "private", "return": "", "signature": " CollectdReporter(MetricRegistry registry,\n            String hostname, Sender sender,\n            ScheduledExecutorService executor, boolean shutdownExecutorOnStop,\n            Clock clock, TimeUnit rateUnit, TimeUnit durationUnit,\n            MetricFilter filter, Set<MetricAttribute> disabledMetricAttributes,\n            String username, String password,\n            SecurityLevel securityLevel)", "full_signature": "private  CollectdReporter(MetricRegistry registry,\n            String hostname, Sender sender,\n            ScheduledExecutorService executor, boolean shutdownExecutorOnStop,\n            Clock clock, TimeUnit rateUnit, TimeUnit durationUnit,\n            MetricFilter filter, Set<MetricAttribute> disabledMetricAttributes,\n            String username, String password,\n            SecurityLevel securityLevel)", "class_method_signature": "CollectdReporter.CollectdReporter(MetricRegistry registry,\n            String hostname, Sender sender,\n            ScheduledExecutorService executor, boolean shutdownExecutorOnStop,\n            Clock clock, TimeUnit rateUnit, TimeUnit durationUnit,\n            MetricFilter filter, Set<MetricAttribute> disabledMetricAttributes,\n            String username, String password,\n            SecurityLevel securityLevel)", "testcase": false, "constructor": true}, {"identifier": "resolveHostName", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String resolveHostName()", "full_signature": "private String resolveHostName()", "class_method_signature": "CollectdReporter.resolveHostName()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(long period, TimeUnit unit)", "modifiers": "@Override public", "return": "void", "signature": "void start(long period, TimeUnit unit)", "full_signature": "@Override public void start(long period, TimeUnit unit)", "class_method_signature": "CollectdReporter.start(long period, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "report", "parameters": "(SortedMap<String, Gauge> gauges, SortedMap<String, Counter> counters,\n            SortedMap<String, Histogram> histograms, SortedMap<String, Meter> meters, SortedMap<String, Timer> timers)", "modifiers": "@Override @SuppressWarnings(\"rawtypes\") public", "return": "void", "signature": "void report(SortedMap<String, Gauge> gauges, SortedMap<String, Counter> counters,\n            SortedMap<String, Histogram> histograms, SortedMap<String, Meter> meters, SortedMap<String, Timer> timers)", "full_signature": "@Override @SuppressWarnings(\"rawtypes\") public void report(SortedMap<String, Gauge> gauges, SortedMap<String, Counter> counters,\n            SortedMap<String, Histogram> histograms, SortedMap<String, Meter> meters, SortedMap<String, Timer> timers)", "class_method_signature": "CollectdReporter.report(SortedMap<String, Gauge> gauges, SortedMap<String, Counter> counters,\n            SortedMap<String, Histogram> histograms, SortedMap<String, Meter> meters, SortedMap<String, Timer> timers)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(Sender sender)", "modifiers": "private", "return": "void", "signature": "void connect(Sender sender)", "full_signature": "private void connect(Sender sender)", "class_method_signature": "CollectdReporter.connect(Sender sender)", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "(Sender sender)", "modifiers": "private", "return": "void", "signature": "void disconnect(Sender sender)", "full_signature": "private void disconnect(Sender sender)", "class_method_signature": "CollectdReporter.disconnect(Sender sender)", "testcase": false, "constructor": false}, {"identifier": "writeValue", "parameters": "(MetaData.Builder metaData, MetricAttribute attribute, Number value)", "modifiers": "private", "return": "void", "signature": "void writeValue(MetaData.Builder metaData, MetricAttribute attribute, Number value)", "full_signature": "private void writeValue(MetaData.Builder metaData, MetricAttribute attribute, Number value)", "class_method_signature": "CollectdReporter.writeValue(MetaData.Builder metaData, MetricAttribute attribute, Number value)", "testcase": false, "constructor": false}, {"identifier": "writeRate", "parameters": "(MetaData.Builder metaData, MetricAttribute attribute, double rate)", "modifiers": "private", "return": "void", "signature": "void writeRate(MetaData.Builder metaData, MetricAttribute attribute, double rate)", "full_signature": "private void writeRate(MetaData.Builder metaData, MetricAttribute attribute, double rate)", "class_method_signature": "CollectdReporter.writeRate(MetaData.Builder metaData, MetricAttribute attribute, double rate)", "testcase": false, "constructor": false}, {"identifier": "writeDuration", "parameters": "(MetaData.Builder metaData, MetricAttribute attribute, double duration)", "modifiers": "private", "return": "void", "signature": "void writeDuration(MetaData.Builder metaData, MetricAttribute attribute, double duration)", "full_signature": "private void writeDuration(MetaData.Builder metaData, MetricAttribute attribute, double duration)", "class_method_signature": "CollectdReporter.writeDuration(MetaData.Builder metaData, MetricAttribute attribute, double duration)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(MetaData metaData, Number value)", "modifiers": "private", "return": "void", "signature": "void write(MetaData metaData, Number value)", "full_signature": "private void write(MetaData metaData, Number value)", "class_method_signature": "CollectdReporter.write(MetaData metaData, Number value)", "testcase": false, "constructor": false}, {"identifier": "serializeGauge", "parameters": "(MetaData.Builder metaData, Gauge metric)", "modifiers": "@SuppressWarnings(\"rawtypes\") private", "return": "void", "signature": "void serializeGauge(MetaData.Builder metaData, Gauge metric)", "full_signature": "@SuppressWarnings(\"rawtypes\") private void serializeGauge(MetaData.Builder metaData, Gauge metric)", "class_method_signature": "CollectdReporter.serializeGauge(MetaData.Builder metaData, Gauge metric)", "testcase": false, "constructor": false}, {"identifier": "serializeMeter", "parameters": "(MetaData.Builder metaData, Meter metric)", "modifiers": "private", "return": "void", "signature": "void serializeMeter(MetaData.Builder metaData, Meter metric)", "full_signature": "private void serializeMeter(MetaData.Builder metaData, Meter metric)", "class_method_signature": "CollectdReporter.serializeMeter(MetaData.Builder metaData, Meter metric)", "testcase": false, "constructor": false}, {"identifier": "serializeCounter", "parameters": "(MetaData.Builder metaData, Counter metric)", "modifiers": "private", "return": "void", "signature": "void serializeCounter(MetaData.Builder metaData, Counter metric)", "full_signature": "private void serializeCounter(MetaData.Builder metaData, Counter metric)", "class_method_signature": "CollectdReporter.serializeCounter(MetaData.Builder metaData, Counter metric)", "testcase": false, "constructor": false}, {"identifier": "serializeHistogram", "parameters": "(MetaData.Builder metaData, Histogram metric)", "modifiers": "private", "return": "void", "signature": "void serializeHistogram(MetaData.Builder metaData, Histogram metric)", "full_signature": "private void serializeHistogram(MetaData.Builder metaData, Histogram metric)", "class_method_signature": "CollectdReporter.serializeHistogram(MetaData.Builder metaData, Histogram metric)", "testcase": false, "constructor": false}, {"identifier": "serializeTimer", "parameters": "(MetaData.Builder metaData, Timer metric)", "modifiers": "private", "return": "void", "signature": "void serializeTimer(MetaData.Builder metaData, Timer metric)", "full_signature": "private void serializeTimer(MetaData.Builder metaData, Timer metric)", "class_method_signature": "CollectdReporter.serializeTimer(MetaData.Builder metaData, Timer metric)", "testcase": false, "constructor": false}], "file": "metrics-collectd/src/main/java/com/codahale/metrics/collectd/CollectdReporter.java"}, "focal_method": {"identifier": "report", "parameters": "(SortedMap<String, Gauge> gauges, SortedMap<String, Counter> counters,\n            SortedMap<String, Histogram> histograms, SortedMap<String, Meter> meters, SortedMap<String, Timer> timers)", "modifiers": "@Override @SuppressWarnings(\"rawtypes\") public", "return": "void", "body": "@Override\n    @SuppressWarnings(\"rawtypes\")\n    public void report(SortedMap<String, Gauge> gauges, SortedMap<String, Counter> counters,\n            SortedMap<String, Histogram> histograms, SortedMap<String, Meter> meters, SortedMap<String, Timer> timers) {\n        MetaData.Builder metaData = new MetaData.Builder(hostName, clock.getTime() / 1000, period)\n                .type(COLLECTD_TYPE_GAUGE);\n        try {\n            connect(sender);\n            for (Map.Entry<String, Gauge> entry : gauges.entrySet()) {\n                serializeGauge(metaData.plugin(entry.getKey()), entry.getValue());\n            }\n            for (Map.Entry<String, Counter> entry : counters.entrySet()) {\n                serializeCounter(metaData.plugin(entry.getKey()), entry.getValue());\n            }\n            for (Map.Entry<String, Histogram> entry : histograms.entrySet()) {\n                serializeHistogram(metaData.plugin(entry.getKey()), entry.getValue());\n            }\n            for (Map.Entry<String, Meter> entry : meters.entrySet()) {\n                serializeMeter(metaData.plugin(entry.getKey()), entry.getValue());\n            }\n            for (Map.Entry<String, Timer> entry : timers.entrySet()) {\n                serializeTimer(metaData.plugin(entry.getKey()), entry.getValue());\n            }\n        } catch (IOException e) {\n            LOG.warn(\"Unable to report to Collectd\", e);\n        } finally {\n            disconnect(sender);\n        }\n    }", "signature": "void report(SortedMap<String, Gauge> gauges, SortedMap<String, Counter> counters,\n            SortedMap<String, Histogram> histograms, SortedMap<String, Meter> meters, SortedMap<String, Timer> timers)", "full_signature": "@Override @SuppressWarnings(\"rawtypes\") public void report(SortedMap<String, Gauge> gauges, SortedMap<String, Counter> counters,\n            SortedMap<String, Histogram> histograms, SortedMap<String, Meter> meters, SortedMap<String, Timer> timers)", "class_method_signature": "CollectdReporter.report(SortedMap<String, Gauge> gauges, SortedMap<String, Counter> counters,\n            SortedMap<String, Histogram> histograms, SortedMap<String, Meter> meters, SortedMap<String, Timer> timers)", "testcase": false, "constructor": false, "invocations": ["type", "getTime", "connect", "entrySet", "serializeGauge", "plugin", "getKey", "getValue", "entrySet", "serializeCounter", "plugin", "getKey", "getValue", "entrySet", "serializeHistogram", "plugin", "getKey", "getValue", "entrySet", "serializeMeter", "plugin", "getKey", "getValue", "entrySet", "serializeTimer", "plugin", "getKey", "getValue", "warn", "disconnect"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}