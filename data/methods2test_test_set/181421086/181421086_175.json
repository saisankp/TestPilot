{"test_class": {"identifier": "VirtualNetworkFilterTest", "superclass": "extends FloodlightTestCase", "interfaces": "", "fields": [{"original_string": "protected VirtualNetworkFilter vns;", "modifier": "protected", "type": "VirtualNetworkFilter", "declarator": "vns", "var_name": "vns"}, {"original_string": "protected MockDeviceManager deviceService;", "modifier": "protected", "type": "MockDeviceManager", "declarator": "deviceService", "var_name": "deviceService"}, {"original_string": "protected static String guid1 = \"guid1\";", "modifier": "protected static", "type": "String", "declarator": "guid1 = \"guid1\"", "var_name": "guid1"}, {"original_string": "protected static String net1 = \"net1\";", "modifier": "protected static", "type": "String", "declarator": "net1 = \"net1\"", "var_name": "net1"}, {"original_string": "protected static String gw1 = \"1.1.1.1\";", "modifier": "protected static", "type": "String", "declarator": "gw1 = \"1.1.1.1\"", "var_name": "gw1"}, {"original_string": "protected static String guid2 = \"guid2\";", "modifier": "protected static", "type": "String", "declarator": "guid2 = \"guid2\"", "var_name": "guid2"}, {"original_string": "protected static String net2 = \"net2\";", "modifier": "protected static", "type": "String", "declarator": "net2 = \"net2\"", "var_name": "net2"}, {"original_string": "protected static String guid3 = \"guid3\";", "modifier": "protected static", "type": "String", "declarator": "guid3 = \"guid3\"", "var_name": "guid3"}, {"original_string": "protected static String net3 = \"net3\";", "modifier": "protected static", "type": "String", "declarator": "net3 = \"net3\"", "var_name": "net3"}, {"original_string": "protected static String gw2 = \"2.2.2.2\";", "modifier": "protected static", "type": "String", "declarator": "gw2 = \"2.2.2.2\"", "var_name": "gw2"}, {"original_string": "protected static MacAddress mac1 = MacAddress.of(\"00:11:22:33:44:55\");", "modifier": "protected static", "type": "MacAddress", "declarator": "mac1 = MacAddress.of(\"00:11:22:33:44:55\")", "var_name": "mac1"}, {"original_string": "protected static MacAddress mac2 = MacAddress.of(\"00:11:22:33:44:66\");", "modifier": "protected static", "type": "MacAddress", "declarator": "mac2 = MacAddress.of(\"00:11:22:33:44:66\")", "var_name": "mac2"}, {"original_string": "protected static MacAddress mac3 = MacAddress.of(\"00:11:22:33:44:77\");", "modifier": "protected static", "type": "MacAddress", "declarator": "mac3 = MacAddress.of(\"00:11:22:33:44:77\")", "var_name": "mac3"}, {"original_string": "protected static MacAddress mac4 = MacAddress.of(\"00:11:22:33:44:88\");", "modifier": "protected static", "type": "MacAddress", "declarator": "mac4 = MacAddress.of(\"00:11:22:33:44:88\")", "var_name": "mac4"}, {"original_string": "protected static String hostPort1 = \"port1\";", "modifier": "protected static", "type": "String", "declarator": "hostPort1 = \"port1\"", "var_name": "hostPort1"}, {"original_string": "protected static String hostPort2 = \"port2\";", "modifier": "protected static", "type": "String", "declarator": "hostPort2 = \"port2\"", "var_name": "hostPort2"}, {"original_string": "protected static String hostPort3 = \"port3\";", "modifier": "protected static", "type": "String", "declarator": "hostPort3 = \"port3\"", "var_name": "hostPort3"}, {"original_string": "protected static String hostPort4 = \"port4\";", "modifier": "protected static", "type": "String", "declarator": "hostPort4 = \"port4\"", "var_name": "hostPort4"}, {"original_string": "protected IOFSwitch sw1;", "modifier": "protected", "type": "IOFSwitch", "declarator": "sw1", "var_name": "sw1"}, {"original_string": "protected FloodlightContext cntx;", "modifier": "protected", "type": "FloodlightContext", "declarator": "cntx", "var_name": "cntx"}, {"original_string": "protected OFPacketIn mac1ToMac2PacketIn;", "modifier": "protected", "type": "OFPacketIn", "declarator": "mac1ToMac2PacketIn", "var_name": "mac1ToMac2PacketIn"}, {"original_string": "protected IPacket mac1ToMac2PacketIntestPacket;", "modifier": "protected", "type": "IPacket", "declarator": "mac1ToMac2PacketIntestPacket", "var_name": "mac1ToMac2PacketIntestPacket"}, {"original_string": "protected byte[] mac1ToMac2PacketIntestPacketSerialized;", "modifier": "protected", "type": "byte[]", "declarator": "mac1ToMac2PacketIntestPacketSerialized", "var_name": "mac1ToMac2PacketIntestPacketSerialized"}, {"original_string": "protected OFPacketIn mac1ToMac4PacketIn;", "modifier": "protected", "type": "OFPacketIn", "declarator": "mac1ToMac4PacketIn", "var_name": "mac1ToMac4PacketIn"}, {"original_string": "protected IPacket mac1ToMac4PacketIntestPacket;", "modifier": "protected", "type": "IPacket", "declarator": "mac1ToMac4PacketIntestPacket", "var_name": "mac1ToMac4PacketIntestPacket"}, {"original_string": "protected byte[] mac1ToMac4PacketIntestPacketSerialized;", "modifier": "protected", "type": "byte[]", "declarator": "mac1ToMac4PacketIntestPacketSerialized", "var_name": "mac1ToMac4PacketIntestPacketSerialized"}, {"original_string": "protected OFPacketIn mac1ToGwPacketIn;", "modifier": "protected", "type": "OFPacketIn", "declarator": "mac1ToGwPacketIn", "var_name": "mac1ToGwPacketIn"}, {"original_string": "protected IPacket mac1ToGwPacketIntestPacket;", "modifier": "protected", "type": "IPacket", "declarator": "mac1ToGwPacketIntestPacket", "var_name": "mac1ToGwPacketIntestPacket"}, {"original_string": "protected byte[] mac1ToGwPacketIntestPacketSerialized;", "modifier": "protected", "type": "byte[]", "declarator": "mac1ToGwPacketIntestPacketSerialized", "var_name": "mac1ToGwPacketIntestPacketSerialized"}, {"original_string": "protected OFPacketIn packetInDHCPDiscoveryRequest;", "modifier": "protected", "type": "OFPacketIn", "declarator": "packetInDHCPDiscoveryRequest", "var_name": "packetInDHCPDiscoveryRequest"}, {"original_string": "private MockSyncService mockSyncService;", "modifier": "private", "type": "MockSyncService", "declarator": "mockSyncService", "var_name": "mockSyncService"}], "file": "src/agents/apps/floodlight/floodlight-1.2/src/test/java/net/floodlightcontroller/virtualnetwork/VirtualNetworkFilterTest.java"}, "test_case": {"identifier": "testDefaultGateway", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDefaultGateway() {\n        testAddHost();\n        IOFMessageListener listener = getVirtualNetworkListener();\n        cntx = new FloodlightContext();\n        IFloodlightProviderService.bcStore.put(cntx,\n                           IFloodlightProviderService.CONTEXT_PI_PAYLOAD,\n                               (Ethernet)mac1ToGwPacketIntestPacket);\n        deviceService.learnEntity(((Ethernet)mac1ToGwPacketIntestPacket).getDestinationMACAddress(),\n        \t\tVlanVid.ZERO, IPv4Address.of(gw1), IPv6Address.NONE, DatapathId.NONE, OFPort.ZERO);\n        Command ret = listener.receive(sw1, mac1ToGwPacketIn, cntx);\n        assertTrue(ret == Command.CONTINUE);\n    }", "signature": "void testDefaultGateway()", "full_signature": "@Test public void testDefaultGateway()", "class_method_signature": "VirtualNetworkFilterTest.testDefaultGateway()", "testcase": true, "constructor": false, "invocations": ["testAddHost", "getVirtualNetworkListener", "put", "learnEntity", "getDestinationMACAddress", "of", "receive", "assertTrue"]}, "focal_class": {"identifier": "VirtualNetworkFilter", "superclass": "", "interfaces": "implements IFloodlightModule, IVirtualNetworkService, IOFMessageListener", "fields": [{"original_string": "protected static Logger log = LoggerFactory.getLogger(VirtualNetworkFilter.class);", "modifier": "protected static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(VirtualNetworkFilter.class)", "var_name": "log"}, {"original_string": "private static final short APP_ID = 20;", "modifier": "private static final", "type": "short", "declarator": "APP_ID = 20", "var_name": "APP_ID"}, {"original_string": "IFloodlightProviderService floodlightProviderService;", "modifier": "", "type": "IFloodlightProviderService", "declarator": "floodlightProviderService", "var_name": "floodlightProviderService"}, {"original_string": "IRestApiService restApiService;", "modifier": "", "type": "IRestApiService", "declarator": "restApiService", "var_name": "restApiService"}, {"original_string": "IDeviceService deviceService;", "modifier": "", "type": "IDeviceService", "declarator": "deviceService", "var_name": "deviceService"}, {"original_string": "protected Map<String, VirtualNetwork> vNetsByGuid;", "modifier": "protected", "type": "Map<String, VirtualNetwork>", "declarator": "vNetsByGuid", "var_name": "vNetsByGuid"}, {"original_string": "protected Map<String, String> nameToGuid;", "modifier": "protected", "type": "Map<String, String>", "declarator": "nameToGuid", "var_name": "nameToGuid"}, {"original_string": "protected Map<String, IPv4Address> guidToGateway;", "modifier": "protected", "type": "Map<String, IPv4Address>", "declarator": "guidToGateway", "var_name": "guidToGateway"}, {"original_string": "protected Map<IPv4Address, Set<String>> gatewayToGuid;", "modifier": "protected", "type": "Map<IPv4Address, Set<String>>", "declarator": "gatewayToGuid", "var_name": "gatewayToGuid"}, {"original_string": "protected Map<MacAddress, IPv4Address> macToGateway;", "modifier": "protected", "type": "Map<MacAddress, IPv4Address>", "declarator": "macToGateway", "var_name": "macToGateway"}, {"original_string": "protected Map<MacAddress, String> macToGuid;", "modifier": "protected", "type": "Map<MacAddress, String>", "declarator": "macToGuid", "var_name": "macToGuid"}, {"original_string": "protected Map<String, MacAddress> portToMac;", "modifier": "protected", "type": "Map<String, MacAddress>", "declarator": "portToMac", "var_name": "portToMac"}, {"original_string": "protected DeviceListenerImpl deviceListener;", "modifier": "protected", "type": "DeviceListenerImpl", "declarator": "deviceListener", "var_name": "deviceListener"}], "methods": [{"identifier": "addGateway", "parameters": "(String guid, IPv4Address ip)", "modifiers": "protected", "return": "void", "signature": "void addGateway(String guid, IPv4Address ip)", "full_signature": "protected void addGateway(String guid, IPv4Address ip)", "class_method_signature": "VirtualNetworkFilter.addGateway(String guid, IPv4Address ip)", "testcase": false, "constructor": false}, {"identifier": "deleteGateway", "parameters": "(String guid)", "modifiers": "protected", "return": "void", "signature": "void deleteGateway(String guid)", "full_signature": "protected void deleteGateway(String guid)", "class_method_signature": "VirtualNetworkFilter.deleteGateway(String guid)", "testcase": false, "constructor": false}, {"identifier": "createNetwork", "parameters": "(String guid, String network, IPv4Address gateway)", "modifiers": "@Override public", "return": "void", "signature": "void createNetwork(String guid, String network, IPv4Address gateway)", "full_signature": "@Override public void createNetwork(String guid, String network, IPv4Address gateway)", "class_method_signature": "VirtualNetworkFilter.createNetwork(String guid, String network, IPv4Address gateway)", "testcase": false, "constructor": false}, {"identifier": "deleteNetwork", "parameters": "(String guid)", "modifiers": "@Override public", "return": "void", "signature": "void deleteNetwork(String guid)", "full_signature": "@Override public void deleteNetwork(String guid)", "class_method_signature": "VirtualNetworkFilter.deleteNetwork(String guid)", "testcase": false, "constructor": false}, {"identifier": "addHost", "parameters": "(MacAddress mac, String guid, String port)", "modifiers": "@Override public", "return": "void", "signature": "void addHost(MacAddress mac, String guid, String port)", "full_signature": "@Override public void addHost(MacAddress mac, String guid, String port)", "class_method_signature": "VirtualNetworkFilter.addHost(MacAddress mac, String guid, String port)", "testcase": false, "constructor": false}, {"identifier": "deleteHost", "parameters": "(MacAddress mac, String port)", "modifiers": "@Override public", "return": "void", "signature": "void deleteHost(MacAddress mac, String port)", "full_signature": "@Override public void deleteHost(MacAddress mac, String port)", "class_method_signature": "VirtualNetworkFilter.deleteHost(MacAddress mac, String port)", "testcase": false, "constructor": false}, {"identifier": "getModuleServices", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleServices()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleServices()", "class_method_signature": "VirtualNetworkFilter.getModuleServices()", "testcase": false, "constructor": false}, {"identifier": "getServiceImpls", "parameters": "()", "modifiers": "@Override public", "return": "Map<Class<? extends IFloodlightService>, IFloodlightService>", "signature": "Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "full_signature": "@Override public Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "class_method_signature": "VirtualNetworkFilter.getServiceImpls()", "testcase": false, "constructor": false}, {"identifier": "getModuleDependencies", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "class_method_signature": "VirtualNetworkFilter.getModuleDependencies()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void init(FloodlightModuleContext context)", "full_signature": "@Override public void init(FloodlightModuleContext context)", "class_method_signature": "VirtualNetworkFilter.init(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "startUp", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void startUp(FloodlightModuleContext context)", "full_signature": "@Override public void startUp(FloodlightModuleContext context)", "class_method_signature": "VirtualNetworkFilter.startUp(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "VirtualNetworkFilter.getName()", "testcase": false, "constructor": false}, {"identifier": "isCallbackOrderingPrereq", "parameters": "(OFType type, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCallbackOrderingPrereq(OFType type, String name)", "full_signature": "@Override public boolean isCallbackOrderingPrereq(OFType type, String name)", "class_method_signature": "VirtualNetworkFilter.isCallbackOrderingPrereq(OFType type, String name)", "testcase": false, "constructor": false}, {"identifier": "isCallbackOrderingPostreq", "parameters": "(OFType type, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCallbackOrderingPostreq(OFType type, String name)", "full_signature": "@Override public boolean isCallbackOrderingPostreq(OFType type, String name)", "class_method_signature": "VirtualNetworkFilter.isCallbackOrderingPostreq(OFType type, String name)", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "modifiers": "@Override public", "return": "Command", "signature": "Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "full_signature": "@Override public Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "class_method_signature": "VirtualNetworkFilter.receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "isDefaultGateway", "parameters": "(Ethernet frame)", "modifiers": "protected", "return": "boolean", "signature": "boolean isDefaultGateway(Ethernet frame)", "full_signature": "protected boolean isDefaultGateway(Ethernet frame)", "class_method_signature": "VirtualNetworkFilter.isDefaultGateway(Ethernet frame)", "testcase": false, "constructor": false}, {"identifier": "oneSameNetwork", "parameters": "(MacAddress m1, MacAddress m2)", "modifiers": "protected", "return": "boolean", "signature": "boolean oneSameNetwork(MacAddress m1, MacAddress m2)", "full_signature": "protected boolean oneSameNetwork(MacAddress m1, MacAddress m2)", "class_method_signature": "VirtualNetworkFilter.oneSameNetwork(MacAddress m1, MacAddress m2)", "testcase": false, "constructor": false}, {"identifier": "isDhcpPacket", "parameters": "(Ethernet frame)", "modifiers": "protected", "return": "boolean", "signature": "boolean isDhcpPacket(Ethernet frame)", "full_signature": "protected boolean isDhcpPacket(Ethernet frame)", "class_method_signature": "VirtualNetworkFilter.isDhcpPacket(Ethernet frame)", "testcase": false, "constructor": false}, {"identifier": "processPacketIn", "parameters": "(IOFSwitch sw, OFPacketIn msg, FloodlightContext cntx)", "modifiers": "protected", "return": "Command", "signature": "Command processPacketIn(IOFSwitch sw, OFPacketIn msg, FloodlightContext cntx)", "full_signature": "protected Command processPacketIn(IOFSwitch sw, OFPacketIn msg, FloodlightContext cntx)", "class_method_signature": "VirtualNetworkFilter.processPacketIn(IOFSwitch sw, OFPacketIn msg, FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "doDropFlow", "parameters": "(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx)", "modifiers": "protected", "return": "void", "signature": "void doDropFlow(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx)", "full_signature": "protected void doDropFlow(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx)", "class_method_signature": "VirtualNetworkFilter.doDropFlow(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "listNetworks", "parameters": "()", "modifiers": "@Override public", "return": "Collection <VirtualNetwork>", "signature": "Collection <VirtualNetwork> listNetworks()", "full_signature": "@Override public Collection <VirtualNetwork> listNetworks()", "class_method_signature": "VirtualNetworkFilter.listNetworks()", "testcase": false, "constructor": false}], "file": "src/agents/apps/floodlight/floodlight-1.2/src/main/java/net/floodlightcontroller/virtualnetwork/VirtualNetworkFilter.java"}, "focal_method": {"identifier": "receive", "parameters": "(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "modifiers": "@Override public", "return": "Command", "body": "@Override\n\tpublic Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx) {\n\t\tswitch (msg.getType()) {\n\t\tcase PACKET_IN:\n\t\t\treturn processPacketIn(sw, (OFPacketIn)msg, cntx);\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\tlog.warn(\"Received unexpected message {}\", msg);\n\t\treturn Command.CONTINUE;\n\t}", "signature": "Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "full_signature": "@Override public Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "class_method_signature": "VirtualNetworkFilter.receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "testcase": false, "constructor": false, "invocations": ["getType", "processPacketIn", "warn"]}, "repository": {"repo_id": 181421086, "url": "https://github.com/seungsoo-lee/DELTA", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 99244, "license": "licensed"}}