{"test_class": {"identifier": "ImplicitToExplicitTest", "superclass": "", "interfaces": "", "fields": [], "file": "func/src/test/java/uk/ac/ebi/beam/ImplicitToExplicitTest.java"}, "test_case": {"identifier": "kekuleBenzene", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void kekuleBenzene() throws Exception {\n        Graph g = new Graph(6);\n        g.addAtom(AtomImpl.AliphaticSubset.Carbon);\n        g.addAtom(AtomImpl.AliphaticSubset.Carbon);\n        g.addAtom(AtomImpl.AliphaticSubset.Carbon);\n        g.addAtom(AtomImpl.AliphaticSubset.Carbon);\n        g.addAtom(AtomImpl.AliphaticSubset.Carbon);\n        g.addAtom(AtomImpl.AliphaticSubset.Carbon);\n        g.addEdge(new Edge(0, 1, IMPLICIT));\n        g.addEdge(new Edge(1, 2, DOUBLE));\n        g.addEdge(new Edge(2, 3, IMPLICIT));\n        g.addEdge(new Edge(3, 4, DOUBLE));\n        g.addEdge(new Edge(4, 5, IMPLICIT));\n        g.addEdge(new Edge(5, 0, DOUBLE));\n\n        Graph h = new ImplicitToExplicit().apply(g);\n\n        Assert.assertThat(g, CoreMatchers.is(CoreMatchers.not(CoreMatchers\n                                                                      .sameInstance(h))));\n\n\n        Assert.assertThat(h.edges(0), CoreMatchers\n                .hasItems(new Edge(0, 1, SINGLE),\n                          new Edge(0, 5, DOUBLE)));\n        Assert.assertThat(h.edges(1), CoreMatchers\n                .hasItems(new Edge(1, 0, SINGLE),\n                          new Edge(1, 2, DOUBLE)));\n        Assert.assertThat(h.edges(2), CoreMatchers\n                .hasItems(new Edge(2, 1, DOUBLE),\n                          new Edge(2, 3, SINGLE)));\n        Assert.assertThat(h.edges(3), CoreMatchers\n                .hasItems(new Edge(3, 2, SINGLE),\n                          new Edge(3, 4, DOUBLE)));\n        Assert.assertThat(h.edges(4), CoreMatchers\n                .hasItems(new Edge(4, 3, DOUBLE),\n                          new Edge(4, 5, SINGLE)));\n        Assert.assertThat(h.edges(5), CoreMatchers\n                .hasItems(new Edge(5, 0, DOUBLE),\n                          new Edge(5, 4, SINGLE)));\n    }", "signature": "void kekuleBenzene()", "full_signature": "@Test public void kekuleBenzene()", "class_method_signature": "ImplicitToExplicitTest.kekuleBenzene()", "testcase": true, "constructor": false, "invocations": ["addAtom", "addAtom", "addAtom", "addAtom", "addAtom", "addAtom", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "apply", "assertThat", "is", "not", "sameInstance", "assertThat", "edges", "hasItems", "assertThat", "edges", "hasItems", "assertThat", "edges", "hasItems", "assertThat", "edges", "hasItems", "assertThat", "edges", "hasItems", "assertThat", "edges", "hasItems"]}, "focal_class": {"identifier": "ImplicitToExplicit", "superclass": "extends AbstractFunction<Graph,Graph>", "interfaces": "", "fields": [], "methods": [{"identifier": "apply", "parameters": "(final Graph g)", "modifiers": "public", "return": "Graph", "signature": "Graph apply(final Graph g)", "full_signature": "public Graph apply(final Graph g)", "class_method_signature": "ImplicitToExplicit.apply(final Graph g)", "testcase": false, "constructor": false}, {"identifier": "toExplicitEdge", "parameters": "(final Graph g, final Edge e)", "modifiers": "static", "return": "Edge", "signature": "Edge toExplicitEdge(final Graph g, final Edge e)", "full_signature": "static Edge toExplicitEdge(final Graph g, final Edge e)", "class_method_signature": "ImplicitToExplicit.toExplicitEdge(final Graph g, final Edge e)", "testcase": false, "constructor": false}, {"identifier": "type", "parameters": "(Atom u, Atom v)", "modifiers": "static", "return": "Bond", "signature": "Bond type(Atom u, Atom v)", "full_signature": "static Bond type(Atom u, Atom v)", "class_method_signature": "ImplicitToExplicit.type(Atom u, Atom v)", "testcase": false, "constructor": false}], "file": "func/src/main/java/uk/ac/ebi/beam/ImplicitToExplicit.java"}, "focal_method": {"identifier": "apply", "parameters": "(final Graph g)", "modifiers": "public", "return": "Graph", "body": "public Graph apply(final Graph g) {\n\n        Graph h = new Graph(g.order());\n\n        // copy atom/topology information\n        for (int u = 0; u < g.order(); u++) {\n            h.addAtom(g.atom(u));\n            h.addTopology(g.topologyOf(u));\n        }\n\n        // apply edges\n        for (int u = 0; u < g.order(); u++) {\n            for (final Edge e : g.edges(u)) {\n                if (e.other(u) > u)\n                    h.addEdge(toExplicitEdge(g, e));\n            }\n        }\n\n        return h;\n    }", "signature": "Graph apply(final Graph g)", "full_signature": "public Graph apply(final Graph g)", "class_method_signature": "ImplicitToExplicit.apply(final Graph g)", "testcase": false, "constructor": false, "invocations": ["order", "order", "addAtom", "atom", "addTopology", "topologyOf", "order", "edges", "other", "addEdge", "toExplicitEdge"]}, "repository": {"repo_id": 12061606, "url": "https://github.com/johnmay/beam", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 19, "size": 825, "license": "licensed"}}