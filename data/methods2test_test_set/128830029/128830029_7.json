{"test_class": {"identifier": "PerPlayerMenuItemTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private MenuSession menuSession;", "modifier": "@Mock\n    private", "type": "MenuSession", "declarator": "menuSession", "var_name": "menuSession"}, {"original_string": "@Mock\n    private Player player;", "modifier": "@Mock\n    private", "type": "Player", "declarator": "player", "var_name": "player"}, {"original_string": "@Mock\n    private MenuIcon icon;", "modifier": "@Mock\n    private", "type": "MenuIcon", "declarator": "icon", "var_name": "icon"}, {"original_string": "@Spy\n    Function<IconRequest, MenuIcon> iconRequestConsumer = new Function<IconRequest, MenuIcon>() {\n        @Override\n        public MenuIcon apply(IconRequest iconRequest) {\n            return icon;\n        }\n    };", "modifier": "@Spy", "type": "Function<IconRequest, MenuIcon>", "declarator": "iconRequestConsumer = new Function<IconRequest, MenuIcon>() {\n        @Override\n        public MenuIcon apply(IconRequest iconRequest) {\n            return icon;\n        }\n    }", "var_name": "iconRequestConsumer"}, {"original_string": "@Spy\n    Predicate<IconRequest> availableListener = new Predicate<IconRequest>() {\n        @Override\n        public boolean test(IconRequest iconRequest) {\n            return true;\n        }\n    };", "modifier": "@Spy", "type": "Predicate<IconRequest>", "declarator": "availableListener = new Predicate<IconRequest>() {\n        @Override\n        public boolean test(IconRequest iconRequest) {\n            return true;\n        }\n    }", "var_name": "availableListener"}, {"original_string": "private PerPlayerMenuItem menuItem = new PerPlayerMenuItem(click -> {\n    }, iconRequestConsumer, availableListener);", "modifier": "private", "type": "PerPlayerMenuItem", "declarator": "menuItem = new PerPlayerMenuItem(click -> {\n    }, iconRequestConsumer, availableListener)", "var_name": "menuItem"}], "file": "menu-api/src/test/java/ru/hyndo/sightmenu/PerPlayerMenuItemTest.java"}, "test_case": {"identifier": "getIcon", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getIcon() {\n        IconRequest request = new IconRequest(player, menuSession);\n        MenuIcon icon = menuItem.getIcon(request);\n        assertEquals(this.icon, icon);\n    }", "signature": "void getIcon()", "full_signature": "@Test public void getIcon()", "class_method_signature": "PerPlayerMenuItemTest.getIcon()", "testcase": true, "constructor": false, "invocations": ["getIcon", "assertEquals"]}, "focal_class": {"identifier": "PerPlayerMenuItem", "superclass": "extends AbstractMenuItem", "interfaces": "", "fields": [{"original_string": "private Function<IconRequest, MenuIcon> iconRequestConsumer;", "modifier": "private", "type": "Function<IconRequest, MenuIcon>", "declarator": "iconRequestConsumer", "var_name": "iconRequestConsumer"}], "methods": [{"identifier": "PerPlayerMenuItem", "parameters": "(Consumer<MenuItemClick> itemClickConsumer, Function<IconRequest, MenuIcon> iconRequestConsumer,\n                      Predicate<IconRequest> available)", "modifiers": "", "return": "", "signature": " PerPlayerMenuItem(Consumer<MenuItemClick> itemClickConsumer, Function<IconRequest, MenuIcon> iconRequestConsumer,\n                      Predicate<IconRequest> available)", "full_signature": "  PerPlayerMenuItem(Consumer<MenuItemClick> itemClickConsumer, Function<IconRequest, MenuIcon> iconRequestConsumer,\n                      Predicate<IconRequest> available)", "class_method_signature": "PerPlayerMenuItem.PerPlayerMenuItem(Consumer<MenuItemClick> itemClickConsumer, Function<IconRequest, MenuIcon> iconRequestConsumer,\n                      Predicate<IconRequest> available)", "testcase": false, "constructor": true}, {"identifier": "getIcon", "parameters": "(IconRequest iconRequest)", "modifiers": "@Override public", "return": "MenuIcon", "signature": "MenuIcon getIcon(IconRequest iconRequest)", "full_signature": "@Override public MenuIcon getIcon(IconRequest iconRequest)", "class_method_signature": "PerPlayerMenuItem.getIcon(IconRequest iconRequest)", "testcase": false, "constructor": false}], "file": "menu-api/src/main/java/ru/hyndo/sightmenu/PerPlayerMenuItem.java"}, "focal_method": {"identifier": "getIcon", "parameters": "(IconRequest iconRequest)", "modifiers": "@Override public", "return": "MenuIcon", "body": "@Override\n    public MenuIcon getIcon(IconRequest iconRequest) {\n        return iconRequestConsumer.apply(iconRequest);\n    }", "signature": "MenuIcon getIcon(IconRequest iconRequest)", "full_signature": "@Override public MenuIcon getIcon(IconRequest iconRequest)", "class_method_signature": "PerPlayerMenuItem.getIcon(IconRequest iconRequest)", "testcase": false, "constructor": false, "invocations": ["apply"]}, "repository": {"repo_id": 128830029, "url": "https://github.com/hyndor/SightMenu", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 130, "license": "licensed"}}