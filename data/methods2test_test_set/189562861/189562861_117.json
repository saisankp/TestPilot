{"test_class": {"identifier": "TpsLimitFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TpsLimitFilter filter = new TpsLimitFilter();", "modifier": "private", "type": "TpsLimitFilter", "declarator": "filter = new TpsLimitFilter()", "var_name": "filter"}], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/com/alibaba/dubbo/rpc/filter/TpsLimitFilterTest.java"}, "test_case": {"identifier": "testFail", "parameters": "()", "modifiers": "@Test(expected = RpcException.class) public", "return": "void", "body": "@Test(expected = RpcException.class)\n    public void testFail() throws Exception {\n        URL url = URL.valueOf(\"test://test\");\n        url = url.addParameter(Constants.INTERFACE_KEY,\n                \"com.alibaba.dubbo.rpc.file.TpsService\");\n        url = url.addParameter(Constants.TPS_LIMIT_RATE_KEY, 5);\n        Invoker<TpsLimitFilterTest> invoker = new MyInvoker<TpsLimitFilterTest>(url);\n        Invocation invocation = new MockInvocation();\n        for (int i = 0; i < 10; i++) {\n            try {\n                filter.invoke(invoker, invocation);\n            } catch (Exception e) {\n                assertTrue(i >= 5);\n                throw e;\n            }\n        }\n    }", "signature": "void testFail()", "full_signature": "@Test(expected = RpcException.class) public void testFail()", "class_method_signature": "TpsLimitFilterTest.testFail()", "testcase": true, "constructor": false, "invocations": ["valueOf", "addParameter", "addParameter", "invoke", "assertTrue"]}, "focal_class": {"identifier": "TpsLimitFilter", "superclass": "", "interfaces": "implements Filter", "fields": [{"original_string": "private final TPSLimiter tpsLimiter = new DefaultTPSLimiter();", "modifier": "private final", "type": "TPSLimiter", "declarator": "tpsLimiter = new DefaultTPSLimiter()", "var_name": "tpsLimiter"}], "methods": [{"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "TpsLimitFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/filter/TpsLimitFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n\n        if (!tpsLimiter.isAllowable(invoker.getUrl(), invocation)) {\n            throw new RpcException(\n                    \"Failed to invoke service \" +\n                            invoker.getInterface().getName() +\n                            \".\" +\n                            invocation.getMethodName() +\n                            \" because exceed max service tps.\");\n        }\n\n        return invoker.invoke(invocation);\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "TpsLimitFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["isAllowable", "getUrl", "getName", "getInterface", "getMethodName", "invoke"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}