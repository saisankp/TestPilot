{"test_class": {"identifier": "CryptoFactoryBeanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CryptoFactoryBean factoryBean;", "modifier": "private", "type": "CryptoFactoryBean", "declarator": "factoryBean", "var_name": "factoryBean"}], "file": "spring-ws-security/src/test/java/org/springframework/ws/soap/security/wss4j2/support/CryptoFactoryBeanTest.java"}, "test_case": {"identifier": "testSetConfiguration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSetConfiguration() throws Exception {\n\t\tProperties configuration = new Properties();\n\t\tconfiguration.setProperty(\"org.apache.ws.security.crypto.provider\",\n\t\t\t\t\"org.apache.ws.security.components.crypto.Merlin\");\n\t\tconfiguration.setProperty(\"org.apache.ws.security.crypto.merlin.keystore.type\", \"jceks\");\n\t\tconfiguration.setProperty(\"org.apache.ws.security.crypto.merlin.keystore.password\", \"123456\");\n\t\tconfiguration.setProperty(\"org.apache.ws.security.crypto.merlin.file\", \"private.jks\");\n\n\t\tfactoryBean.setConfiguration(configuration);\n\t\tfactoryBean.afterPropertiesSet();\n\n\t\tObject result = factoryBean.getObject();\n\t\tAssert.assertNotNull(\"No result\", result);\n\t\tAssert.assertTrue(\"Not a Merlin instance\", result instanceof Merlin);\n\t}", "signature": "void testSetConfiguration()", "full_signature": "@Test public void testSetConfiguration()", "class_method_signature": "CryptoFactoryBeanTest.testSetConfiguration()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "setProperty", "setProperty", "setConfiguration", "afterPropertiesSet", "getObject", "assertNotNull", "assertTrue"]}, "focal_class": {"identifier": "CryptoFactoryBean", "superclass": "", "interfaces": "implements FactoryBean<Crypto>, InitializingBean", "fields": [{"original_string": "private Properties configuration = new Properties();", "modifier": "private", "type": "Properties", "declarator": "configuration = new Properties()", "var_name": "configuration"}, {"original_string": "private Crypto crypto;", "modifier": "private", "type": "Crypto", "declarator": "crypto", "var_name": "crypto"}, {"original_string": "private static final String CRYPTO_PROVIDER_PROPERTY = \"org.apache.wss4j.crypto.provider\";", "modifier": "private static final", "type": "String", "declarator": "CRYPTO_PROVIDER_PROPERTY = \"org.apache.wss4j.crypto.provider\"", "var_name": "CRYPTO_PROVIDER_PROPERTY"}], "methods": [{"identifier": "setConfiguration", "parameters": "(Properties properties)", "modifiers": "public", "return": "void", "signature": "void setConfiguration(Properties properties)", "full_signature": "public void setConfiguration(Properties properties)", "class_method_signature": "CryptoFactoryBean.setConfiguration(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "setCryptoProvider", "parameters": "(Class<? extends Crypto> cryptoProviderClass)", "modifiers": "public", "return": "void", "signature": "void setCryptoProvider(Class<? extends Crypto> cryptoProviderClass)", "full_signature": "public void setCryptoProvider(Class<? extends Crypto> cryptoProviderClass)", "class_method_signature": "CryptoFactoryBean.setCryptoProvider(Class<? extends Crypto> cryptoProviderClass)", "testcase": false, "constructor": false}, {"identifier": "setKeyStoreLocation", "parameters": "(Resource location)", "modifiers": "public", "return": "void", "signature": "void setKeyStoreLocation(Resource location)", "full_signature": "public void setKeyStoreLocation(Resource location)", "class_method_signature": "CryptoFactoryBean.setKeyStoreLocation(Resource location)", "testcase": false, "constructor": false}, {"identifier": "getResourcePath", "parameters": "(Resource resource)", "modifiers": "private", "return": "String", "signature": "String getResourcePath(Resource resource)", "full_signature": "private String getResourcePath(Resource resource)", "class_method_signature": "CryptoFactoryBean.getResourcePath(Resource resource)", "testcase": false, "constructor": false}, {"identifier": "setKeyStoreProvider", "parameters": "(String provider)", "modifiers": "public", "return": "void", "signature": "void setKeyStoreProvider(String provider)", "full_signature": "public void setKeyStoreProvider(String provider)", "class_method_signature": "CryptoFactoryBean.setKeyStoreProvider(String provider)", "testcase": false, "constructor": false}, {"identifier": "setKeyStorePassword", "parameters": "(String password)", "modifiers": "public", "return": "void", "signature": "void setKeyStorePassword(String password)", "full_signature": "public void setKeyStorePassword(String password)", "class_method_signature": "CryptoFactoryBean.setKeyStorePassword(String password)", "testcase": false, "constructor": false}, {"identifier": "setKeyStoreType", "parameters": "(String type)", "modifiers": "public", "return": "void", "signature": "void setKeyStoreType(String type)", "full_signature": "public void setKeyStoreType(String type)", "class_method_signature": "CryptoFactoryBean.setKeyStoreType(String type)", "testcase": false, "constructor": false}, {"identifier": "setTrustStorePassword", "parameters": "(String password)", "modifiers": "public", "return": "void", "signature": "void setTrustStorePassword(String password)", "full_signature": "public void setTrustStorePassword(String password)", "class_method_signature": "CryptoFactoryBean.setTrustStorePassword(String password)", "testcase": false, "constructor": false}, {"identifier": "setDefaultX509Alias", "parameters": "(String defaultX509Alias)", "modifiers": "public", "return": "void", "signature": "void setDefaultX509Alias(String defaultX509Alias)", "full_signature": "public void setDefaultX509Alias(String defaultX509Alias)", "class_method_signature": "CryptoFactoryBean.setDefaultX509Alias(String defaultX509Alias)", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "CryptoFactoryBean.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "getObjectType", "parameters": "()", "modifiers": "@Override public", "return": "Class<Crypto>", "signature": "Class<Crypto> getObjectType()", "full_signature": "@Override public Class<Crypto> getObjectType()", "class_method_signature": "CryptoFactoryBean.getObjectType()", "testcase": false, "constructor": false}, {"identifier": "isSingleton", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSingleton()", "full_signature": "@Override public boolean isSingleton()", "class_method_signature": "CryptoFactoryBean.isSingleton()", "testcase": false, "constructor": false}, {"identifier": "getObject", "parameters": "()", "modifiers": "@Override public", "return": "Crypto", "signature": "Crypto getObject()", "full_signature": "@Override public Crypto getObject()", "class_method_signature": "CryptoFactoryBean.getObject()", "testcase": false, "constructor": false}], "file": "spring-ws-security/src/main/java/org/springframework/ws/soap/security/wss4j2/support/CryptoFactoryBean.java"}, "focal_method": {"identifier": "setConfiguration", "parameters": "(Properties properties)", "modifiers": "public", "return": "void", "body": "public void setConfiguration(Properties properties) {\n\t\tAssert.notNull(properties, \"'properties' must not be null\");\n\t\tthis.configuration.putAll(properties);\n\t}", "signature": "void setConfiguration(Properties properties)", "full_signature": "public void setConfiguration(Properties properties)", "class_method_signature": "CryptoFactoryBean.setConfiguration(Properties properties)", "testcase": false, "constructor": false, "invocations": ["notNull", "putAll"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}