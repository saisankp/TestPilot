{"test_class": {"identifier": "PdfCleanUpProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String INPUT_PATH = \"./src/test/resources/com/itextpdf/text/pdf/pdfcleanup/\";", "modifier": "private static final", "type": "String", "declarator": "INPUT_PATH = \"./src/test/resources/com/itextpdf/text/pdf/pdfcleanup/\"", "var_name": "INPUT_PATH"}, {"original_string": "private static final String OUTPUT_PATH = \"./target/test/com/itextpdf/text/pdf/pdfcleanup/\";", "modifier": "private static final", "type": "String", "declarator": "OUTPUT_PATH = \"./target/test/com/itextpdf/text/pdf/pdfcleanup/\"", "var_name": "OUTPUT_PATH"}, {"original_string": "private String input;", "modifier": "private", "type": "String", "declarator": "input", "var_name": "input"}, {"original_string": "private String output;", "modifier": "private", "type": "String", "declarator": "output", "var_name": "output"}, {"original_string": "private String cmp;", "modifier": "private", "type": "String", "declarator": "cmp", "var_name": "cmp"}, {"original_string": "private List<PdfCleanUpLocation> cleanUpLocations;", "modifier": "private", "type": "List<PdfCleanUpLocation>", "declarator": "cleanUpLocations", "var_name": "cleanUpLocations"}], "file": "xtra/src/test/java/com/itextpdf/text/pdf/pdfcleanup/PdfCleanUpProcessorTest.java"}, "test_case": {"identifier": "cleanUp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void cleanUp() throws IOException, DocumentException, InterruptedException {\n        cleanUp(input, output, cleanUpLocations);\n        compareByContent(cmp, output, OUTPUT_PATH, \"diff\");\n\n    }", "signature": "void cleanUp()", "full_signature": "@Test public void cleanUp()", "class_method_signature": "PdfCleanUpProcessorTest.cleanUp()", "testcase": true, "constructor": false, "invocations": ["cleanUp", "compareByContent"]}, "focal_class": {"identifier": "PdfCleanUpProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static double floatMultiplier = Math.pow(10, 14);", "modifier": "public static", "type": "double", "declarator": "floatMultiplier = Math.pow(10, 14)", "var_name": "floatMultiplier"}, {"original_string": "public static boolean fillCleanedArea = true;", "modifier": "public static", "type": "boolean", "declarator": "fillCleanedArea = true", "var_name": "fillCleanedArea"}, {"original_string": "public static double arcTolerance = 0.0025;", "modifier": "public static", "type": "double", "declarator": "arcTolerance = 0.0025", "var_name": "arcTolerance"}, {"original_string": "private static final String XOBJ_NAME_PREFIX = \"Fm\";", "modifier": "private static final", "type": "String", "declarator": "XOBJ_NAME_PREFIX = \"Fm\"", "var_name": "XOBJ_NAME_PREFIX"}, {"original_string": "private static final String STROKE_COLOR = \"StrokeColor\";", "modifier": "private static final", "type": "String", "declarator": "STROKE_COLOR = \"StrokeColor\"", "var_name": "STROKE_COLOR"}, {"original_string": "private static final String FILL_COLOR = \"FillColor\";", "modifier": "private static final", "type": "String", "declarator": "FILL_COLOR = \"FillColor\"", "var_name": "FILL_COLOR"}, {"original_string": "private int currentXObjNum = 0;", "modifier": "private", "type": "int", "declarator": "currentXObjNum = 0", "var_name": "currentXObjNum"}, {"original_string": "private PdfStamper pdfStamper;", "modifier": "private", "type": "PdfStamper", "declarator": "pdfStamper", "var_name": "pdfStamper"}, {"original_string": "private Map<Integer, List<PdfCleanUpLocation>> pdfCleanUpLocations;", "modifier": "private", "type": "Map<Integer, List<PdfCleanUpLocation>>", "declarator": "pdfCleanUpLocations", "var_name": "pdfCleanUpLocations"}, {"original_string": "private Map<Integer, Set<String>> redactAnnotIndirRefs;", "modifier": "private", "type": "Map<Integer, Set<String>>", "declarator": "redactAnnotIndirRefs", "var_name": "redactAnnotIndirRefs"}, {"original_string": "private Map<Integer, List<Rectangle>> clippingRects;", "modifier": "private", "type": "Map<Integer, List<Rectangle>>", "declarator": "clippingRects", "var_name": "clippingRects"}], "methods": [{"identifier": "PdfCleanUpProcessor", "parameters": "(List<PdfCleanUpLocation> pdfCleanUpLocations, PdfStamper pdfStamper)", "modifiers": "public", "return": "", "signature": " PdfCleanUpProcessor(List<PdfCleanUpLocation> pdfCleanUpLocations, PdfStamper pdfStamper)", "full_signature": "public  PdfCleanUpProcessor(List<PdfCleanUpLocation> pdfCleanUpLocations, PdfStamper pdfStamper)", "class_method_signature": "PdfCleanUpProcessor.PdfCleanUpProcessor(List<PdfCleanUpLocation> pdfCleanUpLocations, PdfStamper pdfStamper)", "testcase": false, "constructor": true}, {"identifier": "PdfCleanUpProcessor", "parameters": "(PdfStamper pdfStamper)", "modifiers": "public", "return": "", "signature": " PdfCleanUpProcessor(PdfStamper pdfStamper)", "full_signature": "public  PdfCleanUpProcessor(PdfStamper pdfStamper)", "class_method_signature": "PdfCleanUpProcessor.PdfCleanUpProcessor(PdfStamper pdfStamper)", "testcase": false, "constructor": true}, {"identifier": "cleanUp", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cleanUp()", "full_signature": "public void cleanUp()", "class_method_signature": "PdfCleanUpProcessor.cleanUp()", "testcase": false, "constructor": false}, {"identifier": "cleanUpPage", "parameters": "(int pageNum, List<PdfCleanUpLocation> cleanUpLocations)", "modifiers": "private", "return": "void", "signature": "void cleanUpPage(int pageNum, List<PdfCleanUpLocation> cleanUpLocations)", "full_signature": "private void cleanUpPage(int pageNum, List<PdfCleanUpLocation> cleanUpLocations)", "class_method_signature": "PdfCleanUpProcessor.cleanUpPage(int pageNum, List<PdfCleanUpLocation> cleanUpLocations)", "testcase": false, "constructor": false}, {"identifier": "createFilter", "parameters": "(List<PdfCleanUpLocation> cleanUpLocations)", "modifiers": "private", "return": "PdfCleanUpRegionFilter", "signature": "PdfCleanUpRegionFilter createFilter(List<PdfCleanUpLocation> cleanUpLocations)", "full_signature": "private PdfCleanUpRegionFilter createFilter(List<PdfCleanUpLocation> cleanUpLocations)", "class_method_signature": "PdfCleanUpProcessor.createFilter(List<PdfCleanUpLocation> cleanUpLocations)", "testcase": false, "constructor": false}, {"identifier": "colorCleanedLocations", "parameters": "(PdfContentByte canvas, List<PdfCleanUpLocation> cleanUpLocations)", "modifiers": "private", "return": "void", "signature": "void colorCleanedLocations(PdfContentByte canvas, List<PdfCleanUpLocation> cleanUpLocations)", "full_signature": "private void colorCleanedLocations(PdfContentByte canvas, List<PdfCleanUpLocation> cleanUpLocations)", "class_method_signature": "PdfCleanUpProcessor.colorCleanedLocations(PdfContentByte canvas, List<PdfCleanUpLocation> cleanUpLocations)", "testcase": false, "constructor": false}, {"identifier": "addColoredRectangle", "parameters": "(PdfContentByte canvas, PdfCleanUpLocation cleanUpLocation)", "modifiers": "private", "return": "void", "signature": "void addColoredRectangle(PdfContentByte canvas, PdfCleanUpLocation cleanUpLocation)", "full_signature": "private void addColoredRectangle(PdfContentByte canvas, PdfCleanUpLocation cleanUpLocation)", "class_method_signature": "PdfCleanUpProcessor.addColoredRectangle(PdfContentByte canvas, PdfCleanUpLocation cleanUpLocation)", "testcase": false, "constructor": false}, {"identifier": "organizeLocationsByPage", "parameters": "(Collection<PdfCleanUpLocation> pdfCleanUpLocations)", "modifiers": "private", "return": "Map<Integer, List<PdfCleanUpLocation>>", "signature": "Map<Integer, List<PdfCleanUpLocation>> organizeLocationsByPage(Collection<PdfCleanUpLocation> pdfCleanUpLocations)", "full_signature": "private Map<Integer, List<PdfCleanUpLocation>> organizeLocationsByPage(Collection<PdfCleanUpLocation> pdfCleanUpLocations)", "class_method_signature": "PdfCleanUpProcessor.organizeLocationsByPage(Collection<PdfCleanUpLocation> pdfCleanUpLocations)", "testcase": false, "constructor": false}, {"identifier": "extractLocationsFromRedactAnnots", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void extractLocationsFromRedactAnnots()", "full_signature": "private void extractLocationsFromRedactAnnots()", "class_method_signature": "PdfCleanUpProcessor.extractLocationsFromRedactAnnots()", "testcase": false, "constructor": false}, {"identifier": "extractLocationsFromRedactAnnots", "parameters": "(int page, PdfDictionary pageDict)", "modifiers": "private", "return": "List<PdfCleanUpLocation>", "signature": "List<PdfCleanUpLocation> extractLocationsFromRedactAnnots(int page, PdfDictionary pageDict)", "full_signature": "private List<PdfCleanUpLocation> extractLocationsFromRedactAnnots(int page, PdfDictionary pageDict)", "class_method_signature": "PdfCleanUpProcessor.extractLocationsFromRedactAnnots(int page, PdfDictionary pageDict)", "testcase": false, "constructor": false}, {"identifier": "saveRedactAnnotIndirRef", "parameters": "(int page, String indRefStr)", "modifiers": "private", "return": "void", "signature": "void saveRedactAnnotIndirRef(int page, String indRefStr)", "full_signature": "private void saveRedactAnnotIndirRef(int page, String indRefStr)", "class_method_signature": "PdfCleanUpProcessor.saveRedactAnnotIndirRef(int page, String indRefStr)", "testcase": false, "constructor": false}, {"identifier": "extractLocationsFromRedactAnnot", "parameters": "(int page, int annotIndex, PdfDictionary annotDict)", "modifiers": "private", "return": "List<PdfCleanUpLocation>", "signature": "List<PdfCleanUpLocation> extractLocationsFromRedactAnnot(int page, int annotIndex, PdfDictionary annotDict)", "full_signature": "private List<PdfCleanUpLocation> extractLocationsFromRedactAnnot(int page, int annotIndex, PdfDictionary annotDict)", "class_method_signature": "PdfCleanUpProcessor.extractLocationsFromRedactAnnot(int page, int annotIndex, PdfDictionary annotDict)", "testcase": false, "constructor": false}, {"identifier": "translateQuadPointsToRectangles", "parameters": "(PdfArray quadPoints)", "modifiers": "private", "return": "List<Rectangle>", "signature": "List<Rectangle> translateQuadPointsToRectangles(PdfArray quadPoints)", "full_signature": "private List<Rectangle> translateQuadPointsToRectangles(PdfArray quadPoints)", "class_method_signature": "PdfCleanUpProcessor.translateQuadPointsToRectangles(PdfArray quadPoints)", "testcase": false, "constructor": false}, {"identifier": "deleteRedactAnnots", "parameters": "(int pageNum)", "modifiers": "private", "return": "void", "signature": "void deleteRedactAnnots(int pageNum)", "full_signature": "private void deleteRedactAnnots(int pageNum)", "class_method_signature": "PdfCleanUpProcessor.deleteRedactAnnots(int pageNum)", "testcase": false, "constructor": false}, {"identifier": "insertFormXObj", "parameters": "(PdfContentByte canvas, PdfDictionary pageDict, PdfStream formXObj, List<Rectangle> clippingRects, Rectangle annotRect)", "modifiers": "private", "return": "void", "signature": "void insertFormXObj(PdfContentByte canvas, PdfDictionary pageDict, PdfStream formXObj, List<Rectangle> clippingRects, Rectangle annotRect)", "full_signature": "private void insertFormXObj(PdfContentByte canvas, PdfDictionary pageDict, PdfStream formXObj, List<Rectangle> clippingRects, Rectangle annotRect)", "class_method_signature": "PdfCleanUpProcessor.insertFormXObj(PdfContentByte canvas, PdfDictionary pageDict, PdfStream formXObj, List<Rectangle> clippingRects, Rectangle annotRect)", "testcase": false, "constructor": false}, {"identifier": "drawOverlayText", "parameters": "(PdfContentByte canvas, List<Rectangle> textRectangles, PdfString overlayText,\n                                 PdfString otDA, PdfNumber otQ, PdfBoolean otRepeat)", "modifiers": "private", "return": "void", "signature": "void drawOverlayText(PdfContentByte canvas, List<Rectangle> textRectangles, PdfString overlayText,\n                                 PdfString otDA, PdfNumber otQ, PdfBoolean otRepeat)", "full_signature": "private void drawOverlayText(PdfContentByte canvas, List<Rectangle> textRectangles, PdfString overlayText,\n                                 PdfString otDA, PdfNumber otQ, PdfBoolean otRepeat)", "class_method_signature": "PdfCleanUpProcessor.drawOverlayText(PdfContentByte canvas, List<Rectangle> textRectangles, PdfString overlayText,\n                                 PdfString otDA, PdfNumber otQ, PdfBoolean otRepeat)", "testcase": false, "constructor": false}, {"identifier": "retrieveFontFromAcroForm", "parameters": "(PdfName fontName, PdfNumber size)", "modifiers": "private", "return": "Font", "signature": "Font retrieveFontFromAcroForm(PdfName fontName, PdfNumber size)", "full_signature": "private Font retrieveFontFromAcroForm(PdfName fontName, PdfNumber size)", "class_method_signature": "PdfCleanUpProcessor.retrieveFontFromAcroForm(PdfName fontName, PdfNumber size)", "testcase": false, "constructor": false}, {"identifier": "parseDAParam", "parameters": "(PdfString DA)", "modifiers": "", "return": "Map<String, List>", "signature": "Map<String, List> parseDAParam(PdfString DA)", "full_signature": " Map<String, List> parseDAParam(PdfString DA)", "class_method_signature": "PdfCleanUpProcessor.parseDAParam(PdfString DA)", "testcase": false, "constructor": false}, {"identifier": "getParentIndRefStr", "parameters": "(PdfDictionary dict)", "modifiers": "private", "return": "String", "signature": "String getParentIndRefStr(PdfDictionary dict)", "full_signature": "private String getParentIndRefStr(PdfDictionary dict)", "class_method_signature": "PdfCleanUpProcessor.getParentIndRefStr(PdfDictionary dict)", "testcase": false, "constructor": false}, {"identifier": "generateNameForXObj", "parameters": "(PdfDictionary pageDict)", "modifiers": "private", "return": "PdfName", "signature": "PdfName generateNameForXObj(PdfDictionary pageDict)", "full_signature": "private PdfName generateNameForXObj(PdfDictionary pageDict)", "class_method_signature": "PdfCleanUpProcessor.generateNameForXObj(PdfDictionary pageDict)", "testcase": false, "constructor": false}, {"identifier": "getXObjNum", "parameters": "(PdfName xobjName)", "modifiers": "private", "return": "int", "signature": "int getXObjNum(PdfName xobjName)", "full_signature": "private int getXObjNum(PdfName xobjName)", "class_method_signature": "PdfCleanUpProcessor.getXObjNum(PdfName xobjName)", "testcase": false, "constructor": false}, {"identifier": "setFillColor", "parameters": "(PdfContentByte canvas, List fillColorArgs)", "modifiers": "private", "return": "void", "signature": "void setFillColor(PdfContentByte canvas, List fillColorArgs)", "full_signature": "private void setFillColor(PdfContentByte canvas, List fillColorArgs)", "class_method_signature": "PdfCleanUpProcessor.setFillColor(PdfContentByte canvas, List fillColorArgs)", "testcase": false, "constructor": false}, {"identifier": "setStrokeColor", "parameters": "(PdfContentByte canvas, List strokeColorArgs)", "modifiers": "private", "return": "void", "signature": "void setStrokeColor(PdfContentByte canvas, List strokeColorArgs)", "full_signature": "private void setStrokeColor(PdfContentByte canvas, List strokeColorArgs)", "class_method_signature": "PdfCleanUpProcessor.setStrokeColor(PdfContentByte canvas, List strokeColorArgs)", "testcase": false, "constructor": false}], "file": "xtra/src/main/java/com/itextpdf/text/pdf/pdfcleanup/PdfCleanUpProcessor.java"}, "focal_method": {"identifier": "cleanUp", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void cleanUp() throws IOException, DocumentException {\n        for (Map.Entry<Integer, List<PdfCleanUpLocation>> entry : pdfCleanUpLocations.entrySet()) {\n            cleanUpPage(entry.getKey(), entry.getValue());\n        }\n\n        pdfStamper.getReader().removeUnusedObjects();\n    }", "signature": "void cleanUp()", "full_signature": "public void cleanUp()", "class_method_signature": "PdfCleanUpProcessor.cleanUp()", "testcase": false, "constructor": false, "invocations": ["entrySet", "cleanUpPage", "getKey", "getValue", "removeUnusedObjects", "getReader"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}