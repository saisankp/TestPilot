{"test_class": {"identifier": "TestInMemoryRepository", "superclass": "", "interfaces": "", "fields": [{"original_string": "private InMemoryRepository repository;", "modifier": "private", "type": "InMemoryRepository", "declarator": "repository", "var_name": "repository"}], "file": "session-replacement/src/test/java/com/amadeus/session/repository/inmemory/TestInMemoryRepository.java"}, "test_case": {"identifier": "testPrepareRemove", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPrepareRemove() {\n    SessionData sessionData = new SessionData(\"test\", 1000, 10);\n    repository.storeSessionData(sessionData);\n    repository.prepareRemove(sessionData);\n    assertThat(repository.getOwnedSessionIds(), not(hasItem(\"test\")));\n  }", "signature": "void testPrepareRemove()", "full_signature": "@Test public void testPrepareRemove()", "class_method_signature": "TestInMemoryRepository.testPrepareRemove()", "testcase": true, "constructor": false, "invocations": ["storeSessionData", "prepareRemove", "assertThat", "getOwnedSessionIds", "not", "hasItem"]}, "focal_class": {"identifier": "InMemoryRepository", "superclass": "", "interfaces": "implements SessionRepository", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(InMemoryRepository.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(InMemoryRepository.class)", "var_name": "logger"}, {"original_string": "ConcurrentHashMap<String, SessionData> sessionDataCache = new ConcurrentHashMap<>();", "modifier": "", "type": "ConcurrentHashMap<String, SessionData>", "declarator": "sessionDataCache = new ConcurrentHashMap<>()", "var_name": "sessionDataCache"}, {"original_string": "ConcurrentHashMap<String, Map<String, Object>> sessionAttributeCache = new ConcurrentHashMap<>();", "modifier": "", "type": "ConcurrentHashMap<String, Map<String, Object>>", "declarator": "sessionAttributeCache = new ConcurrentHashMap<>()", "var_name": "sessionAttributeCache"}, {"original_string": "private SessionManager sessionManager;", "modifier": "private", "type": "SessionManager", "declarator": "sessionManager", "var_name": "sessionManager"}, {"original_string": "private final String namespace;", "modifier": "private final", "type": "String", "declarator": "namespace", "var_name": "namespace"}, {"original_string": "private ScheduledFuture<?> cleanupFuture;", "modifier": "private", "type": "ScheduledFuture<?>", "declarator": "cleanupFuture", "var_name": "cleanupFuture"}], "methods": [{"identifier": "InMemoryRepository", "parameters": "(String namespace)", "modifiers": "public", "return": "", "signature": " InMemoryRepository(String namespace)", "full_signature": "public  InMemoryRepository(String namespace)", "class_method_signature": "InMemoryRepository.InMemoryRepository(String namespace)", "testcase": false, "constructor": true}, {"identifier": "remove", "parameters": "(String sessionId)", "modifiers": "private", "return": "void", "signature": "void remove(String sessionId)", "full_signature": "private void remove(String sessionId)", "class_method_signature": "InMemoryRepository.remove(String sessionId)", "testcase": false, "constructor": false}, {"identifier": "id", "parameters": "(String id)", "modifiers": "private", "return": "String", "signature": "String id(String id)", "full_signature": "private String id(String id)", "class_method_signature": "InMemoryRepository.id(String id)", "testcase": false, "constructor": false}, {"identifier": "getSessionData", "parameters": "(String id)", "modifiers": "@Override public", "return": "SessionData", "signature": "SessionData getSessionData(String id)", "full_signature": "@Override public SessionData getSessionData(String id)", "class_method_signature": "InMemoryRepository.getSessionData(String id)", "testcase": false, "constructor": false}, {"identifier": "storeSessionData", "parameters": "(SessionData sessionData)", "modifiers": "@Override public", "return": "void", "signature": "void storeSessionData(SessionData sessionData)", "full_signature": "@Override public void storeSessionData(SessionData sessionData)", "class_method_signature": "InMemoryRepository.storeSessionData(SessionData sessionData)", "testcase": false, "constructor": false}, {"identifier": "getAllKeys", "parameters": "(SessionData session)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getAllKeys(SessionData session)", "full_signature": "@Override public Set<String> getAllKeys(SessionData session)", "class_method_signature": "InMemoryRepository.getAllKeys(SessionData session)", "testcase": false, "constructor": false}, {"identifier": "getSessionAttribute", "parameters": "(SessionData session, String attribute)", "modifiers": "@Override public", "return": "Object", "signature": "Object getSessionAttribute(SessionData session, String attribute)", "full_signature": "@Override public Object getSessionAttribute(SessionData session, String attribute)", "class_method_signature": "InMemoryRepository.getSessionAttribute(SessionData session, String attribute)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(SessionData session)", "modifiers": "@Override public", "return": "void", "signature": "void remove(SessionData session)", "full_signature": "@Override public void remove(SessionData session)", "class_method_signature": "InMemoryRepository.remove(SessionData session)", "testcase": false, "constructor": false}, {"identifier": "prepareRemove", "parameters": "(SessionData session)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean prepareRemove(SessionData session)", "full_signature": "@Override public boolean prepareRemove(SessionData session)", "class_method_signature": "InMemoryRepository.prepareRemove(SessionData session)", "testcase": false, "constructor": false}, {"identifier": "startCommit", "parameters": "(SessionData session)", "modifiers": "@Override public", "return": "SessionRepository.CommitTransaction", "signature": "SessionRepository.CommitTransaction startCommit(SessionData session)", "full_signature": "@Override public SessionRepository.CommitTransaction startCommit(SessionData session)", "class_method_signature": "InMemoryRepository.startCommit(SessionData session)", "testcase": false, "constructor": false}, {"identifier": "setSessionManager", "parameters": "(final SessionManager sessionManager)", "modifiers": "@Override public", "return": "void", "signature": "void setSessionManager(final SessionManager sessionManager)", "full_signature": "@Override public void setSessionManager(final SessionManager sessionManager)", "class_method_signature": "InMemoryRepository.setSessionManager(final SessionManager sessionManager)", "testcase": false, "constructor": false}, {"identifier": "requestFinished", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void requestFinished()", "full_signature": "@Override public void requestFinished()", "class_method_signature": "InMemoryRepository.requestFinished()", "testcase": false, "constructor": false}, {"identifier": "setSessionAttribute", "parameters": "(SessionData session, String name, Object value)", "modifiers": "@Override public", "return": "void", "signature": "void setSessionAttribute(SessionData session, String name, Object value)", "full_signature": "@Override public void setSessionAttribute(SessionData session, String name, Object value)", "class_method_signature": "InMemoryRepository.setSessionAttribute(SessionData session, String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "getAttributeMap", "parameters": "(String sessionId)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> getAttributeMap(String sessionId)", "full_signature": "private Map<String, Object> getAttributeMap(String sessionId)", "class_method_signature": "InMemoryRepository.getAttributeMap(String sessionId)", "testcase": false, "constructor": false}, {"identifier": "removeSessionAttribute", "parameters": "(SessionData session, String name)", "modifiers": "@Override public", "return": "void", "signature": "void removeSessionAttribute(SessionData session, String name)", "full_signature": "@Override public void removeSessionAttribute(SessionData session, String name)", "class_method_signature": "InMemoryRepository.removeSessionAttribute(SessionData session, String name)", "testcase": false, "constructor": false}, {"identifier": "cleanSessionsOnShutdown", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean cleanSessionsOnShutdown()", "full_signature": "@Override public boolean cleanSessionsOnShutdown()", "class_method_signature": "InMemoryRepository.cleanSessionsOnShutdown()", "testcase": false, "constructor": false}, {"identifier": "getOwnedSessionIds", "parameters": "()", "modifiers": "@Override public", "return": "Collection<String>", "signature": "Collection<String> getOwnedSessionIds()", "full_signature": "@Override public Collection<String> getOwnedSessionIds()", "class_method_signature": "InMemoryRepository.getOwnedSessionIds()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "InMemoryRepository.close()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "InMemoryRepository.reset()", "testcase": false, "constructor": false}, {"identifier": "sessionIdChange", "parameters": "(SessionData sessionData)", "modifiers": "@Override public", "return": "void", "signature": "void sessionIdChange(SessionData sessionData)", "full_signature": "@Override public void sessionIdChange(SessionData sessionData)", "class_method_signature": "InMemoryRepository.sessionIdChange(SessionData sessionData)", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "@Override public boolean isConnected()", "class_method_signature": "InMemoryRepository.isConnected()", "testcase": false, "constructor": false}], "file": "session-replacement/src/main/java/com/amadeus/session/repository/inmemory/InMemoryRepository.java"}, "focal_method": {"identifier": "prepareRemove", "parameters": "(SessionData session)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean prepareRemove(SessionData session) {\n    sessionDataCache.remove(id(session.getId()));\n    return true;\n  }", "signature": "boolean prepareRemove(SessionData session)", "full_signature": "@Override public boolean prepareRemove(SessionData session)", "class_method_signature": "InMemoryRepository.prepareRemove(SessionData session)", "testcase": false, "constructor": false, "invocations": ["remove", "id", "getId"]}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}