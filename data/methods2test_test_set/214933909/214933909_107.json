{"test_class": {"identifier": "TransactionServerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TransactionServer transactionServer;", "modifier": "private", "type": "TransactionServer", "declarator": "transactionServer", "var_name": "transactionServer"}], "file": "das-client/src/test/java/com/ppdai/das/core/TransactionServerTest.java"}, "test_case": {"identifier": "testCommit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCommit() throws Exception {\n        TransactionId transactionId = transactionServer.start(\"das-test\", \"MySqlSimple\", Hints.hints());\n        Assert.assertEquals(1, transactionServer.getCurrentCount());\n        String r = transactionServer.doInTransaction(transactionId.getUniqueId(),()->\"OK\");\n        Assert.assertEquals(\"OK\", r);\n        transactionServer.commit(transactionId.getUniqueId());\n        Assert.assertNotNull(transactionId);\n    }", "signature": "void testCommit()", "full_signature": "@Test public void testCommit()", "class_method_signature": "TransactionServerTest.testCommit()", "testcase": true, "constructor": false, "invocations": ["start", "hints", "assertEquals", "getCurrentCount", "doInTransaction", "getUniqueId", "assertEquals", "commit", "getUniqueId", "assertNotNull"]}, "focal_class": {"identifier": "TransactionServer", "superclass": "", "interfaces": "implements DataSourceConfigureConstants", "fields": [{"original_string": "private static final Map<String, DalTransaction> transactionMap = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "Map<String, DalTransaction>", "declarator": "transactionMap = new ConcurrentHashMap<>()", "var_name": "transactionMap"}, {"original_string": "private ScheduledExecutorService cleanupTimer = new ScheduledThreadPoolExecutor(1,\n            new ThreadFactoryBuilder()\n                    .setNameFormat(\"DAS Server Transaction Cleanup Timer\")\n                    .setDaemon(true)\n                    .build());", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "cleanupTimer = new ScheduledThreadPoolExecutor(1,\n            new ThreadFactoryBuilder()\n                    .setNameFormat(\"DAS Server Transaction Cleanup Timer\")\n                    .setDaemon(true)\n                    .build())", "var_name": "cleanupTimer"}, {"original_string": "private TransactionIdGenerator generator;", "modifier": "private", "type": "TransactionIdGenerator", "declarator": "generator", "var_name": "generator"}, {"original_string": "private final String hostAddress;", "modifier": "private final", "type": "String", "declarator": "hostAddress", "var_name": "hostAddress"}, {"original_string": "private final String workId;", "modifier": "private final", "type": "String", "declarator": "workId", "var_name": "workId"}, {"original_string": "private static final long SECOND = 1000;", "modifier": "private static final", "type": "long", "declarator": "SECOND = 1000", "var_name": "SECOND"}, {"original_string": "private static final long INITIAL_DELAY = 1 * SECOND;", "modifier": "private static final", "type": "long", "declarator": "INITIAL_DELAY = 1 * SECOND", "var_name": "INITIAL_DELAY"}, {"original_string": "public static final long CLEAN_UP_INTERVAL = 10 * SECOND;", "modifier": "public static final", "type": "long", "declarator": "CLEAN_UP_INTERVAL = 10 * SECOND", "var_name": "CLEAN_UP_INTERVAL"}, {"original_string": "public static final double REMOVE_SCALE = 1.1;", "modifier": "public static final", "type": "double", "declarator": "REMOVE_SCALE = 1.1", "var_name": "REMOVE_SCALE"}], "methods": [{"identifier": "TransactionServer", "parameters": "(String hostAddress, String workId)", "modifiers": "public", "return": "", "signature": " TransactionServer(String hostAddress, String workId)", "full_signature": "public  TransactionServer(String hostAddress, String workId)", "class_method_signature": "TransactionServer.TransactionServer(String hostAddress, String workId)", "testcase": false, "constructor": true}, {"identifier": "getCurrentCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCurrentCount()", "full_signature": "public int getCurrentCount()", "class_method_signature": "TransactionServer.getCurrentCount()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(String appId, String logicDb, Hints hints)", "modifiers": "public", "return": "TransactionId", "signature": "TransactionId start(String appId, String logicDb, Hints hints)", "full_signature": "public TransactionId start(String appId, String logicDb, Hints hints)", "class_method_signature": "TransactionServer.start(String appId, String logicDb, Hints hints)", "testcase": false, "constructor": false}, {"identifier": "locateConnectionManager", "parameters": "(String appId, String logicDb, Hints hints)", "modifiers": "private", "return": "DalConnectionManager", "signature": "DalConnectionManager locateConnectionManager(String appId, String logicDb, Hints hints)", "full_signature": "private DalConnectionManager locateConnectionManager(String appId, String logicDb, Hints hints)", "class_method_signature": "TransactionServer.locateConnectionManager(String appId, String logicDb, Hints hints)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(String transactionId)", "modifiers": "public", "return": "void", "signature": "void commit(String transactionId)", "full_signature": "public void commit(String transactionId)", "class_method_signature": "TransactionServer.commit(String transactionId)", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "(String transactionId)", "modifiers": "public", "return": "void", "signature": "void rollback(String transactionId)", "full_signature": "public void rollback(String transactionId)", "class_method_signature": "TransactionServer.rollback(String transactionId)", "testcase": false, "constructor": false}, {"identifier": "doInTransaction", "parameters": "(String transactionId, Callable<T> transaction)", "modifiers": "public", "return": "T", "signature": "T doInTransaction(String transactionId, Callable<T> transaction)", "full_signature": "public T doInTransaction(String transactionId, Callable<T> transaction)", "class_method_signature": "TransactionServer.doInTransaction(String transactionId, Callable<T> transaction)", "testcase": false, "constructor": false}, {"identifier": "prepareTransaction", "parameters": "(String transactionId)", "modifiers": "private", "return": "void", "signature": "void prepareTransaction(String transactionId)", "full_signature": "private void prepareTransaction(String transactionId)", "class_method_signature": "TransactionServer.prepareTransaction(String transactionId)", "testcase": false, "constructor": false}, {"identifier": "clearTransaction", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void clearTransaction()", "full_signature": "private void clearTransaction()", "class_method_signature": "TransactionServer.clearTransaction()", "testcase": false, "constructor": false}], "file": "das-client/src/main/java/com/ppdai/das/core/TransactionServer.java"}, "focal_method": {"identifier": "commit", "parameters": "(String transactionId)", "modifiers": "public", "return": "void", "body": "public void commit(String transactionId) throws SQLException {\n       DalTransaction transaction = transactionMap.get(transactionId);\n        \n        if(transaction == null) {\n            throw new SQLException(\"calling endTransaction with empty ConnectionCache\");\n        }\n\n        try {\n            transaction.endTransaction(0);//always 0\n        }finally{\n            transactionMap.remove(transactionId);\n        }\n    }", "signature": "void commit(String transactionId)", "full_signature": "public void commit(String transactionId)", "class_method_signature": "TransactionServer.commit(String transactionId)", "testcase": false, "constructor": false, "invocations": ["get", "endTransaction", "remove"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}