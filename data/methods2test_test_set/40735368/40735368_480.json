{"test_class": {"identifier": "WFSFeatureStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final QName TYPE1 = new QName(\"http://www.census.gov\", \"poi\", \"tiger\");", "modifier": "private static final", "type": "QName", "declarator": "TYPE1 = new QName(\"http://www.census.gov\", \"poi\", \"tiger\")", "var_name": "TYPE1"}, {"original_string": "private static SimpleFeatureType featureType1;", "modifier": "private static", "type": "SimpleFeatureType", "declarator": "featureType1", "var_name": "featureType1"}, {"original_string": "private static Name simpleTypeName1;", "modifier": "private static", "type": "Name", "declarator": "simpleTypeName1", "var_name": "simpleTypeName1"}, {"original_string": "private WFSDataStore dataStore;", "modifier": "private", "type": "WFSDataStore", "declarator": "dataStore", "var_name": "dataStore"}, {"original_string": "private IntegrationTestWFSClient wfs;", "modifier": "private", "type": "IntegrationTestWFSClient", "declarator": "wfs", "var_name": "wfs"}], "file": "modules/unsupported/wfs-ng/src/test/java/org/geotools/data/wfs/WFSFeatureStoreTest.java"}, "test_case": {"identifier": "testUpdateFeaturesAutoCommit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUpdateFeaturesAutoCommit() throws Exception {\n\n        FilterFactory2 filterfac = CommonFactoryFinder.getFilterFactory2();\n        \n        ContentFeatureSource source = (ContentFeatureSource) dataStore.getFeatureSource(simpleTypeName1);\n        \n        WFSFeatureStore store = (WFSFeatureStore) source;\n        \n        Filter filter = filterfac.id(filterfac.featureId(\"poi.2\"));\n        \n        store.modifyFeatures(\"NAME\", \"blah\", filter);\n        \n        ContentFeatureCollection coll = store.getFeatures( new Query(simpleTypeName1.getLocalPart(), filter) );\n        assertEquals(1, coll.size());\n\n        SimpleFeature feature = coll.features().next();\n        assertEquals(\"blah\", feature.getAttribute(\"NAME\"));\n    }", "signature": "void testUpdateFeaturesAutoCommit()", "full_signature": "@Test public void testUpdateFeaturesAutoCommit()", "class_method_signature": "WFSFeatureStoreTest.testUpdateFeaturesAutoCommit()", "testcase": true, "constructor": false, "invocations": ["getFilterFactory2", "getFeatureSource", "id", "featureId", "modifyFeatures", "getFeatures", "getLocalPart", "assertEquals", "size", "next", "features", "assertEquals", "getAttribute"]}, "focal_class": {"identifier": "WFSFeatureStore", "superclass": "extends ContentFeatureStore", "interfaces": "", "fields": [{"original_string": "private WFSFeatureSource delegate;", "modifier": "private", "type": "WFSFeatureSource", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "WFSFeatureStore", "parameters": "(WFSFeatureSource source)", "modifiers": "public", "return": "", "signature": " WFSFeatureStore(WFSFeatureSource source)", "full_signature": "public  WFSFeatureStore(WFSFeatureSource source)", "class_method_signature": "WFSFeatureStore.WFSFeatureStore(WFSFeatureSource source)", "testcase": false, "constructor": true}, {"identifier": "canReproject", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canReproject()", "full_signature": "@Override public boolean canReproject()", "class_method_signature": "WFSFeatureStore.canReproject()", "testcase": false, "constructor": false}, {"identifier": "canLock", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canLock()", "full_signature": "@Override public boolean canLock()", "class_method_signature": "WFSFeatureStore.canLock()", "testcase": false, "constructor": false}, {"identifier": "canEvent", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean canEvent()", "full_signature": "@Override protected boolean canEvent()", "class_method_signature": "WFSFeatureStore.canEvent()", "testcase": false, "constructor": false}, {"identifier": "getDataStore", "parameters": "()", "modifiers": "@Override public", "return": "WFSDataStore", "signature": "WFSDataStore getDataStore()", "full_signature": "@Override public WFSDataStore getDataStore()", "class_method_signature": "WFSFeatureStore.getDataStore()", "testcase": false, "constructor": false}, {"identifier": "getEntry", "parameters": "()", "modifiers": "@Override public", "return": "ContentEntry", "signature": "ContentEntry getEntry()", "full_signature": "@Override public ContentEntry getEntry()", "class_method_signature": "WFSFeatureStore.getEntry()", "testcase": false, "constructor": false}, {"identifier": "getInfo", "parameters": "()", "modifiers": "@Override public", "return": "ResourceInfo", "signature": "ResourceInfo getInfo()", "full_signature": "@Override public ResourceInfo getInfo()", "class_method_signature": "WFSFeatureStore.getInfo()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "Name", "signature": "Name getName()", "full_signature": "@Override public Name getName()", "class_method_signature": "WFSFeatureStore.getName()", "testcase": false, "constructor": false}, {"identifier": "getQueryCapabilities", "parameters": "()", "modifiers": "@Override public", "return": "QueryCapabilities", "signature": "QueryCapabilities getQueryCapabilities()", "full_signature": "@Override public QueryCapabilities getQueryCapabilities()", "class_method_signature": "WFSFeatureStore.getQueryCapabilities()", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "@Override public", "return": "WFSContentState", "signature": "WFSContentState getState()", "full_signature": "@Override public WFSContentState getState()", "class_method_signature": "WFSFeatureStore.getState()", "testcase": false, "constructor": false}, {"identifier": "getTransaction", "parameters": "()", "modifiers": "@Override public", "return": "Transaction", "signature": "Transaction getTransaction()", "full_signature": "@Override public Transaction getTransaction()", "class_method_signature": "WFSFeatureStore.getTransaction()", "testcase": false, "constructor": false}, {"identifier": "buildFeatureType", "parameters": "()", "modifiers": "@Override protected", "return": "SimpleFeatureType", "signature": "SimpleFeatureType buildFeatureType()", "full_signature": "@Override protected SimpleFeatureType buildFeatureType()", "class_method_signature": "WFSFeatureStore.buildFeatureType()", "testcase": false, "constructor": false}, {"identifier": "getCountInternal", "parameters": "(Query query)", "modifiers": "@Override protected", "return": "int", "signature": "int getCountInternal(Query query)", "full_signature": "@Override protected int getCountInternal(Query query)", "class_method_signature": "WFSFeatureStore.getCountInternal(Query query)", "testcase": false, "constructor": false}, {"identifier": "getBoundsInternal", "parameters": "(Query query)", "modifiers": "@Override protected", "return": "ReferencedEnvelope", "signature": "ReferencedEnvelope getBoundsInternal(Query query)", "full_signature": "@Override protected ReferencedEnvelope getBoundsInternal(Query query)", "class_method_signature": "WFSFeatureStore.getBoundsInternal(Query query)", "testcase": false, "constructor": false}, {"identifier": "canFilter", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean canFilter()", "full_signature": "@Override protected boolean canFilter()", "class_method_signature": "WFSFeatureStore.canFilter()", "testcase": false, "constructor": false}, {"identifier": "canSort", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean canSort()", "full_signature": "@Override protected boolean canSort()", "class_method_signature": "WFSFeatureStore.canSort()", "testcase": false, "constructor": false}, {"identifier": "canRetype", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean canRetype()", "full_signature": "@Override protected boolean canRetype()", "class_method_signature": "WFSFeatureStore.canRetype()", "testcase": false, "constructor": false}, {"identifier": "canLimit", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean canLimit()", "full_signature": "@Override protected boolean canLimit()", "class_method_signature": "WFSFeatureStore.canLimit()", "testcase": false, "constructor": false}, {"identifier": "canOffset", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean canOffset()", "full_signature": "@Override protected boolean canOffset()", "class_method_signature": "WFSFeatureStore.canOffset()", "testcase": false, "constructor": false}, {"identifier": "canTransact", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean canTransact()", "full_signature": "@Override protected boolean canTransact()", "class_method_signature": "WFSFeatureStore.canTransact()", "testcase": false, "constructor": false}, {"identifier": "getReaderInternal", "parameters": "(Query query)", "modifiers": "@Override protected", "return": "FeatureReader<SimpleFeatureType, SimpleFeature>", "signature": "FeatureReader<SimpleFeatureType, SimpleFeature> getReaderInternal(Query query)", "full_signature": "@Override protected FeatureReader<SimpleFeatureType, SimpleFeature> getReaderInternal(Query query)", "class_method_signature": "WFSFeatureStore.getReaderInternal(Query query)", "testcase": false, "constructor": false}, {"identifier": "handleVisitor", "parameters": "(Query query, FeatureVisitor visitor)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean handleVisitor(Query query, FeatureVisitor visitor)", "full_signature": "@Override protected boolean handleVisitor(Query query, FeatureVisitor visitor)", "class_method_signature": "WFSFeatureStore.handleVisitor(Query query, FeatureVisitor visitor)", "testcase": false, "constructor": false}, {"identifier": "setTransaction", "parameters": "(Transaction transaction)", "modifiers": "@Override public", "return": "void", "signature": "void setTransaction(Transaction transaction)", "full_signature": "@Override public void setTransaction(Transaction transaction)", "class_method_signature": "WFSFeatureStore.setTransaction(Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "getWriterInternal", "parameters": "(Query query, final int flags)", "modifiers": "@Override protected", "return": "WFSFeatureWriter", "signature": "WFSFeatureWriter getWriterInternal(Query query, final int flags)", "full_signature": "@Override protected WFSFeatureWriter getWriterInternal(Query query, final int flags)", "class_method_signature": "WFSFeatureStore.getWriterInternal(Query query, final int flags)", "testcase": false, "constructor": false}, {"identifier": "modifyFeatures", "parameters": "(Name[] properties, Object[] values, Filter filter)", "modifiers": "@Override public", "return": "void", "signature": "void modifyFeatures(Name[] properties, Object[] values, Filter filter)", "full_signature": "@Override public void modifyFeatures(Name[] properties, Object[] values, Filter filter)", "class_method_signature": "WFSFeatureStore.modifyFeatures(Name[] properties, Object[] values, Filter filter)", "testcase": false, "constructor": false}], "file": "modules/unsupported/wfs-ng/src/main/java/org/geotools/data/wfs/WFSFeatureStore.java"}, "focal_method": {"identifier": "modifyFeatures", "parameters": "(Name[] properties, Object[] values, Filter filter)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void modifyFeatures(Name[] properties, Object[] values, Filter filter)\n            throws IOException {\n        if (filter == null) {\n            throw new IllegalArgumentException(\"filter is null\");\n        }\n\n        filter = resolvePropertyNames(filter);\n\n        {\n            QName typeName = getDataStore().getRemoteTypeName(getName());\n            WFSClient wfsClient = getDataStore().getWfsClient();\n            Filter[] splitFilters = wfsClient.splitFilters(typeName, filter);\n            Filter unsupported = splitFilters[1];\n\n            if (!Filter.INCLUDE.equals(unsupported)) {\n                // Filter not fully supported, lets modify one by one\n                super.modifyFeatures(properties, values, filter);\n                return;\n            }\n        }\n\n        // Filter fully supported, lets batch modify\n        final ContentState contentState = getState();\n\n        ReferencedEnvelope affectedBounds = new ReferencedEnvelope(getInfo().getCRS());\n        if (contentState.hasListener()) {\n            // gather bounds before modification\n            ReferencedEnvelope before = getBounds(new Query(getSchema().getTypeName(), filter));\n            if (before != null && !before.isEmpty()) {\n                affectedBounds = before;\n            }\n        }\n        final Transaction transaction = getTransaction();\n\n        FeatureReader<SimpleFeatureType, SimpleFeature> oldFeatures = getReader(filter);\n        try {\n            if (!oldFeatures.hasNext()) {\n                // don't bother\n                oldFeatures.close();\n                return;\n            }\n        } catch (IOException e) {\n            oldFeatures.close();\n            throw e;\n        } catch (RuntimeException e) {\n            oldFeatures.close();\n            throw e;\n        }\n\n        if (Transaction.AUTO_COMMIT.equals(transaction)) {\n            // we're in auto commit. Do a batch update and commit right away\n            WFSLocalTransactionState localState = getState().getLocalTransactionState();\n            WFSRemoteTransactionState committingState = new WFSRemoteTransactionState(\n                    getDataStore());\n            committingState.watch(localState.getState());\n\n            WFSDiff diff = localState.getDiff();\n\n            ReferencedEnvelope bounds;\n            bounds = diff.batchModify(properties, values, filter, oldFeatures, contentState);\n            affectedBounds.expandToInclude(bounds);\n            committingState.commit();\n\n        } else {\n            // we're in a transaction, record to local state and wait for commit to be called\n            WFSLocalTransactionState localState;\n            localState = (WFSLocalTransactionState) transaction.getState(getEntry());\n            WFSDiff diff = localState.getDiff();\n\n            ReferencedEnvelope bounds;\n            bounds = diff.batchModify(properties, values, filter, oldFeatures, contentState);\n            affectedBounds.expandToInclude(bounds);\n        }\n\n        if (contentState.hasListener()) {\n            // issue notificaiton\n            FeatureEvent event = new FeatureEvent(this, Type.CHANGED, affectedBounds, filter);\n            contentState.fireFeatureEvent(event);\n        }\n\n    }", "signature": "void modifyFeatures(Name[] properties, Object[] values, Filter filter)", "full_signature": "@Override public void modifyFeatures(Name[] properties, Object[] values, Filter filter)", "class_method_signature": "WFSFeatureStore.modifyFeatures(Name[] properties, Object[] values, Filter filter)", "testcase": false, "constructor": false, "invocations": ["resolvePropertyNames", "getRemoteTypeName", "getDataStore", "getName", "getWfsClient", "getDataStore", "splitFilters", "equals", "modifyFeatures", "getState", "getCRS", "getInfo", "hasListener", "getBounds", "getTypeName", "getSchema", "isEmpty", "getTransaction", "getReader", "hasNext", "close", "close", "close", "equals", "getLocalTransactionState", "getState", "getDataStore", "watch", "getState", "getDiff", "batchModify", "expandToInclude", "commit", "getState", "getEntry", "getDiff", "batchModify", "expandToInclude", "hasListener", "fireFeatureEvent"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}