{"test_class": {"identifier": "ServiceDecoratorBundleListenerTest", "superclass": "", "interfaces": "", "fields": [], "file": "decorator/src/test/java/org/apache/cxf/dosgi/dsw/decorator/ServiceDecoratorBundleListenerTest.java"}, "test_case": {"identifier": "testBundleListener", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBundleListener() {\n        BundleContext bc = EasyMock.createMock(BundleContext.class);\n        EasyMock.replay(bc);\n\n        final List<String> called = new ArrayList<>();\n        ServiceDecoratorImpl serviceDecorator = new ServiceDecoratorImpl() {\n            @Override\n            void addDecorations(Bundle bundle) {\n                called.add(\"addDecorations\");\n            }\n\n            @Override\n            void removeDecorations(Bundle bundle) {\n                called.add(\"removeDecorations\");\n            }\n        };\n\n        Bundle b = EasyMock.createMock(Bundle.class);\n        EasyMock.replay(b);\n\n        ServiceDecoratorBundleListener listener = new ServiceDecoratorBundleListener(serviceDecorator);\n\n        assertEquals(\"Precondition failed\", 0, called.size());\n        listener.bundleChanged(new BundleEvent(BundleEvent.INSTALLED, b));\n        assertEquals(0, called.size());\n\n        listener.bundleChanged(new BundleEvent(BundleEvent.STARTED, b));\n        assertEquals(Arrays.asList(\"addDecorations\"), called);\n\n        listener.bundleChanged(new BundleEvent(BundleEvent.STOPPING, b));\n        assertEquals(Arrays.asList(\"addDecorations\", \"removeDecorations\"), called);\n\n    }", "signature": "void testBundleListener()", "full_signature": "@Test public void testBundleListener()", "class_method_signature": "ServiceDecoratorBundleListenerTest.testBundleListener()", "testcase": true, "constructor": false, "invocations": ["createMock", "replay", "add", "add", "createMock", "replay", "assertEquals", "size", "bundleChanged", "assertEquals", "size", "bundleChanged", "assertEquals", "asList", "bundleChanged", "assertEquals", "asList"]}, "focal_class": {"identifier": "ServiceDecoratorBundleListener", "superclass": "", "interfaces": "implements BundleListener", "fields": [{"original_string": "private final ServiceDecoratorImpl serviceDecorator;", "modifier": "private final", "type": "ServiceDecoratorImpl", "declarator": "serviceDecorator", "var_name": "serviceDecorator"}], "methods": [{"identifier": "ServiceDecoratorBundleListener", "parameters": "(ServiceDecoratorImpl serviceDecorator)", "modifiers": "public", "return": "", "signature": " ServiceDecoratorBundleListener(ServiceDecoratorImpl serviceDecorator)", "full_signature": "public  ServiceDecoratorBundleListener(ServiceDecoratorImpl serviceDecorator)", "class_method_signature": "ServiceDecoratorBundleListener.ServiceDecoratorBundleListener(ServiceDecoratorImpl serviceDecorator)", "testcase": false, "constructor": true}, {"identifier": "bundleChanged", "parameters": "(BundleEvent be)", "modifiers": "@Override public", "return": "void", "signature": "void bundleChanged(BundleEvent be)", "full_signature": "@Override public void bundleChanged(BundleEvent be)", "class_method_signature": "ServiceDecoratorBundleListener.bundleChanged(BundleEvent be)", "testcase": false, "constructor": false}], "file": "decorator/src/main/java/org/apache/cxf/dosgi/dsw/decorator/ServiceDecoratorBundleListener.java"}, "focal_method": {"identifier": "bundleChanged", "parameters": "(BundleEvent be)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void bundleChanged(BundleEvent be) {\n        switch(be.getType()) {\n        case BundleEvent.STARTED:\n            this.serviceDecorator.addDecorations(be.getBundle());\n            break;\n        case BundleEvent.STOPPING:\n            this.serviceDecorator.removeDecorations(be.getBundle());\n            break;\n        default:\n        }\n    }", "signature": "void bundleChanged(BundleEvent be)", "full_signature": "@Override public void bundleChanged(BundleEvent be)", "class_method_signature": "ServiceDecoratorBundleListener.bundleChanged(BundleEvent be)", "testcase": false, "constructor": false, "invocations": ["getType", "addDecorations", "getBundle", "removeDecorations", "getBundle"]}, "repository": {"repo_id": 17537835, "url": "https://github.com/apache/cxf-dosgi", "language": "Java", "is_fork": false, "fork_count": 27, "stargazer_count": 26, "size": 3444, "license": "licensed"}}