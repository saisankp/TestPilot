{"test_class": {"identifier": "GraphNameTest", "superclass": "extends AbstractRosTest", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(GraphNameTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(GraphNameTest.class)", "var_name": "logger"}], "file": "rcljava/src/test/java/org/ros2/rcljava/namespace/GraphNameTest.java"}, "test_case": {"identifier": "testIsTopicName", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testIsTopicName() {\n        // @see http://design.ros2.org/articles/topic_and_service_names.html\n        logger.debug(new Object(){}.getClass().getEnclosingMethod().getName());\n\n        // must not be empty\n        Assert.assertFalse(\"Topic must not be null.\", GraphName.isValidTopic(null));\n        Assert.assertFalse(\"Topic must not be empty.\", GraphName.isValidTopic(\"\"));\n\n        // may contain alphanumeric characters ([0-9|a-z|A-Z]), underscores (_), or forward slashes (/)\n//        Assert.assertFalse(\"Topic can be contains valid charactere.\", GraphName.isValidTopic(\"&\u00e9'(-\u00e8\u00e7\u00e0)=#[|\\^@]^$\u00f9*,;:!\u00a3%\u00b5?.\u00a7\"));\n        Assert.assertTrue(\"Topic may contains valid charactere.\", GraphName.isValidTopic(\"~/_foo\"));\n        Assert.assertTrue(\"Topic may contains valid charactere.\", GraphName.isValidTopic(\"azertyuiopqsdfghjklmwxcvbn1234567890\"));\n\n        // may use balanced curly braces ({}) for substitutions\n        Assert.assertTrue(\"Topic may use balanced curly braces.\", GraphName.isValidTopic(\"{bar}\"));\n\n        // may start with a tilde (~), the private namespace substitution character\n        Assert.assertTrue(\"Topic may start with a tilde (~)\", GraphName.isValidTopic(\"~/foo\"));\n        Assert.assertFalse(\"Topic may start with a tilde (~).\", GraphName.isValidTopic(\"foo~\"));\n\n        // must not start with a numeric character ([0-9])\n        Assert.assertFalse(\"Topic must not start with a numeric character ([0-9]).\", GraphName.isValidTopic(\"8foo\"));\n\n        // must not contain any number of repeated underscores (_)\n        Assert.assertFalse(\"Topic must not contain any number of repeated underscores (_).\", GraphName.isValidTopic(\"foo__bar\"));\n\n        // must not end with an underscore (_)\n        Assert.assertFalse(\"Topic must not end with an underscore (_).\", GraphName.isValidTopic(\"foo_\"));\n\n        // must not have an underscore (_) followed by a forward slash (/), i.e. _/\n        Assert.assertFalse(\"Topic must not have an underscore (_) followed by a forward slash.\", GraphName.isValidTopic(\"foo_/bar\"));\n\n        // must not end with a forward slash (/)\n        Assert.assertFalse(\"Topic must not end with a forward slash (/).\", GraphName.isValidTopic(\"foo/bar/\"));\n\n        // must not contain any number of repeated forward slashes (/)\n        Assert.assertFalse(\"Topic must not contain any number of repeated forward slashes (/).\", GraphName.isValidTopic(\"foo//bar\"));\n\n        // must separate a tilde (~) from the rest of the name with a forward slash (/), i.e. ~/foo not ~foo\n        Assert.assertFalse(\"Topic must separate a tilde (~) from the rest of the name with a forward slash (/).\", GraphName.isValidTopic(\"~foo\"));\n\n        // must have balanced curly braces ({}) when used, i.e. {sub}/foo but not {sub/foo nor /foo}\n        Assert.assertTrue(\"Topic must have balanced curly braces ({}) when used.\", GraphName.isValidTopic(\"~/foo\"));\n\n        // Test case Valid\n        Assert.assertTrue(GraphName.isValidTopic(\"foo\"));\n        Assert.assertTrue(GraphName.isValidTopic(\"abc123\"));\n        Assert.assertTrue(GraphName.isValidTopic(\"_foo\"));\n        Assert.assertTrue(GraphName.isValidTopic(\"Foo\"));\n        Assert.assertTrue(GraphName.isValidTopic(\"BAR\"));\n        Assert.assertTrue(GraphName.isValidTopic(\"~\"));\n        Assert.assertTrue(GraphName.isValidTopic(\"foo/bar\"));\n        Assert.assertTrue(GraphName.isValidTopic(\"~/foo\"));\n        Assert.assertTrue(GraphName.isValidTopic(\"{foo}_bar\"));\n        Assert.assertTrue(GraphName.isValidTopic(\"foo/{ping}/bar\"));\n        Assert.assertTrue(GraphName.isValidTopic(Topics.SCHEME + \"/foo\"));\n        Assert.assertTrue(GraphName.isValidTopic(Topics.SCHEME + \"foo/bar\"));\n\n        // Test case not valid\n        Assert.assertFalse(GraphName.isValidTopic(\"123abc\"));\n        Assert.assertFalse(GraphName.isValidTopic(\"123\"));\n        Assert.assertFalse(GraphName.isValidTopic(\"__foo\"));\n        Assert.assertFalse(GraphName.isValidTopic(\"foo__bar\"));\n        Assert.assertFalse(GraphName.isValidTopic(\"foo bar\"));\n        Assert.assertFalse(GraphName.isValidTopic(\"foo__\"));\n        Assert.assertFalse(GraphName.isValidTopic(\" \"));\n        Assert.assertFalse(GraphName.isValidTopic(\"foo_\"));\n        Assert.assertFalse(GraphName.isValidTopic(\"foo//bar\"));\n        Assert.assertFalse(GraphName.isValidTopic(\"foo/\"));\n        Assert.assertFalse(GraphName.isValidTopic(\"foo_/bar\t\"));\n        Assert.assertFalse(GraphName.isValidTopic(\"~foo\"));\n        Assert.assertFalse(GraphName.isValidTopic(\"foo~\"));\n        Assert.assertFalse(GraphName.isValidTopic(\"foo~/bar\"));\n        Assert.assertFalse(GraphName.isValidTopic(\"foo/~bar\"));\n        Assert.assertFalse(GraphName.isValidTopic(\"/_/bar\"));\n        Assert.assertFalse(GraphName.isValidTopic(\"_\"));\n        Assert.assertFalse(GraphName.isValidTopic(\"_/_bar\"));\n        Assert.assertFalse(GraphName.isValidTopic(\"/~\"));\n        Assert.assertFalse(GraphName.isValidTopic(\"foo/~/bar\"));\n    }", "signature": "void testIsTopicName()", "full_signature": "@Test public final void testIsTopicName()", "class_method_signature": "GraphNameTest.testIsTopicName()", "testcase": true, "constructor": false, "invocations": ["debug", "getName", "getEnclosingMethod", "getClass", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertTrue", "isValidTopic", "assertTrue", "isValidTopic", "assertTrue", "isValidTopic", "assertTrue", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertTrue", "isValidTopic", "assertTrue", "isValidTopic", "assertTrue", "isValidTopic", "assertTrue", "isValidTopic", "assertTrue", "isValidTopic", "assertTrue", "isValidTopic", "assertTrue", "isValidTopic", "assertTrue", "isValidTopic", "assertTrue", "isValidTopic", "assertTrue", "isValidTopic", "assertTrue", "isValidTopic", "assertTrue", "isValidTopic", "assertTrue", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic", "assertFalse", "isValidTopic"]}, "focal_class": {"identifier": "GraphName", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EMPTY = \"\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY = \"\"", "var_name": "EMPTY"}, {"original_string": "private static final String PRIVATE = \"_\";", "modifier": "private static final", "type": "String", "declarator": "PRIVATE = \"_\"", "var_name": "PRIVATE"}, {"original_string": "private static final String SEPARATOR = \"/\";", "modifier": "private static final", "type": "String", "declarator": "SEPARATOR = \"/\"", "var_name": "SEPARATOR"}, {"original_string": "private static final String RELATIVE = \"~\";", "modifier": "private static final", "type": "String", "declarator": "RELATIVE = \"~\"", "var_name": "RELATIVE"}, {"original_string": "private static final String PARAMETER = \"{}\";", "modifier": "private static final", "type": "String", "declarator": "PARAMETER = \"{}\"", "var_name": "PARAMETER"}, {"original_string": "private static final String RELATIVE_TOPIC = RELATIVE + SEPARATOR;", "modifier": "private static final", "type": "String", "declarator": "RELATIVE_TOPIC = RELATIVE + SEPARATOR", "var_name": "RELATIVE_TOPIC"}, {"original_string": "private static final String FORMAT_TOPIC = \"%s\" + SEPARATOR + \"%s\";", "modifier": "private static final", "type": "String", "declarator": "FORMAT_TOPIC = \"%s\" + SEPARATOR + \"%s\"", "var_name": "FORMAT_TOPIC"}, {"original_string": "private static Queue<Node> nodes = new LinkedBlockingQueue<Node>();", "modifier": "private static", "type": "Queue<Node>", "declarator": "nodes = new LinkedBlockingQueue<Node>()", "var_name": "nodes"}], "methods": [{"identifier": "GraphName", "parameters": "()", "modifiers": "private", "return": "", "signature": " GraphName()", "full_signature": "private  GraphName()", "class_method_signature": "GraphName.GraphName()", "testcase": false, "constructor": true}, {"identifier": "addNode", "parameters": "(final Node node)", "modifiers": "public static", "return": "void", "signature": "void addNode(final Node node)", "full_signature": "public static void addNode(final Node node)", "class_method_signature": "GraphName.addNode(final Node node)", "testcase": false, "constructor": false}, {"identifier": "removeNode", "parameters": "(final Node node)", "modifiers": "public static", "return": "void", "signature": "void removeNode(final Node node)", "full_signature": "public static void removeNode(final Node node)", "class_method_signature": "GraphName.removeNode(final Node node)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void dispose()", "full_signature": "public static void dispose()", "class_method_signature": "GraphName.dispose()", "testcase": false, "constructor": false}, {"identifier": "removeSheme", "parameters": "(final String url)", "modifiers": "private static", "return": "String", "signature": "String removeSheme(final String url)", "full_signature": "private static String removeSheme(final String url)", "class_method_signature": "GraphName.removeSheme(final String url)", "testcase": false, "constructor": false}, {"identifier": "getFullName", "parameters": "(final String nameSpace, final String nodeName)", "modifiers": "public static", "return": "String", "signature": "String getFullName(final String nameSpace, final String nodeName)", "full_signature": "public static String getFullName(final String nameSpace, final String nodeName)", "class_method_signature": "GraphName.getFullName(final String nameSpace, final String nodeName)", "testcase": false, "constructor": false}, {"identifier": "getFullName", "parameters": "(final Node node, final String name, final List<String> options)", "modifiers": "public static", "return": "String", "signature": "String getFullName(final Node node, final String name, final List<String> options)", "full_signature": "public static String getFullName(final Node node, final String name, final List<String> options)", "class_method_signature": "GraphName.getFullName(final Node node, final String name, final List<String> options)", "testcase": false, "constructor": false}, {"identifier": "isValidTopic", "parameters": "(final String name)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidTopic(final String name)", "full_signature": "public static boolean isValidTopic(final String name)", "class_method_signature": "GraphName.isValidTopic(final String name)", "testcase": false, "constructor": false}, {"identifier": "isValidSubstitution", "parameters": "(final String substitution)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidSubstitution(final String substitution)", "full_signature": "public static boolean isValidSubstitution(final String substitution)", "class_method_signature": "GraphName.isValidSubstitution(final String substitution)", "testcase": false, "constructor": false}, {"identifier": "isValidFQDN", "parameters": "(final String fqn)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidFQDN(final String fqn)", "full_signature": "public static boolean isValidFQDN(final String fqn)", "class_method_signature": "GraphName.isValidFQDN(final String fqn)", "testcase": false, "constructor": false}], "file": "rcljava/src/main/java/org/ros2/rcljava/namespace/GraphName.java"}, "focal_method": {"identifier": "isValidTopic", "parameters": "(final String name)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isValidTopic(final String name) {\n        // Delete sample Regex : https://regex101.com/delete/7qMZiThwlEla6eAKIIee3251\n        boolean result = name != null;\n\n        if (result) {\n            final String topicName = GraphName.removeSheme(name);\n\n            result =\n                    topicName != null &&\n                    topicName.length() > 0 &&\n                    topicName.matches(\"^(?!.*(//|__|_/))[~A-Za-z/_{}][_A-Za-z0-9/{}]*$\") &&\n                    !topicName.endsWith(PRIVATE) &&\n                    !topicName.endsWith(SEPARATOR)\n            ;\n\n            if (result && topicName.startsWith(RELATIVE) && topicName.length() > 1) {\n                result = topicName.startsWith(RELATIVE_TOPIC);\n            }\n        }\n\n        return result;\n    }", "signature": "boolean isValidTopic(final String name)", "full_signature": "public static boolean isValidTopic(final String name)", "class_method_signature": "GraphName.isValidTopic(final String name)", "testcase": false, "constructor": false, "invocations": ["removeSheme", "length", "matches", "endsWith", "endsWith", "startsWith", "length", "startsWith"]}, "repository": {"repo_id": 63545071, "url": "https://github.com/ros2java-alfred/ros2_java", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 1035, "license": "licensed"}}