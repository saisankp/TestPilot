{"test_class": {"identifier": "HeaderMixinTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Context mContext;", "modifier": "private", "type": "Context", "declarator": "mContext", "var_name": "mContext"}, {"original_string": "private TemplateLayout mTemplateLayout;", "modifier": "private", "type": "TemplateLayout", "declarator": "mTemplateLayout", "var_name": "mTemplateLayout"}, {"original_string": "private TextView mHeaderTextView;", "modifier": "private", "type": "TextView", "declarator": "mHeaderTextView", "var_name": "mHeaderTextView"}], "file": "com/android/setupwizardlib/template/HeaderMixinTest.java"}, "test_case": {"identifier": "testGetTextView", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetTextView() {\n        HeaderMixin mixin = new HeaderMixin(mTemplateLayout, null, 0);\n        assertSame(mHeaderTextView, mixin.getTextView());\n    }", "signature": "void testGetTextView()", "full_signature": "@Test public void testGetTextView()", "class_method_signature": "HeaderMixinTest.testGetTextView()", "testcase": true, "constructor": false, "invocations": ["assertSame", "getTextView"]}, "focal_class": {"identifier": "HeaderMixin", "superclass": "", "interfaces": "implements Mixin", "fields": [{"original_string": "private TemplateLayout mTemplateLayout;", "modifier": "private", "type": "TemplateLayout", "declarator": "mTemplateLayout", "var_name": "mTemplateLayout"}], "methods": [{"identifier": "HeaderMixin", "parameters": "(@NonNull TemplateLayout layout, @Nullable AttributeSet attrs,\n            @AttrRes int defStyleAttr)", "modifiers": "public", "return": "", "signature": " HeaderMixin(@NonNull TemplateLayout layout, @Nullable AttributeSet attrs,\n            @AttrRes int defStyleAttr)", "full_signature": "public  HeaderMixin(@NonNull TemplateLayout layout, @Nullable AttributeSet attrs,\n            @AttrRes int defStyleAttr)", "class_method_signature": "HeaderMixin.HeaderMixin(@NonNull TemplateLayout layout, @Nullable AttributeSet attrs,\n            @AttrRes int defStyleAttr)", "testcase": false, "constructor": true}, {"identifier": "getTextView", "parameters": "()", "modifiers": "public", "return": "TextView", "signature": "TextView getTextView()", "full_signature": "public TextView getTextView()", "class_method_signature": "HeaderMixin.getTextView()", "testcase": false, "constructor": false}, {"identifier": "setText", "parameters": "(int title)", "modifiers": "public", "return": "void", "signature": "void setText(int title)", "full_signature": "public void setText(int title)", "class_method_signature": "HeaderMixin.setText(int title)", "testcase": false, "constructor": false}, {"identifier": "setText", "parameters": "(CharSequence title)", "modifiers": "public", "return": "void", "signature": "void setText(CharSequence title)", "full_signature": "public void setText(CharSequence title)", "class_method_signature": "HeaderMixin.setText(CharSequence title)", "testcase": false, "constructor": false}, {"identifier": "getText", "parameters": "()", "modifiers": "public", "return": "CharSequence", "signature": "CharSequence getText()", "full_signature": "public CharSequence getText()", "class_method_signature": "HeaderMixin.getText()", "testcase": false, "constructor": false}], "file": "com/android/setupwizardlib/template/HeaderMixin.java"}, "focal_method": {"identifier": "getTextView", "parameters": "()", "modifiers": "public", "return": "TextView", "body": "public TextView getTextView() {\n        return (TextView) mTemplateLayout.findManagedViewById(R.id.suw_layout_title);\n    }", "signature": "TextView getTextView()", "full_signature": "public TextView getTextView()", "class_method_signature": "HeaderMixin.getTextView()", "testcase": false, "constructor": false, "invocations": ["findManagedViewById"]}, "repository": {"repo_id": 109116423, "url": "https://github.com/AndroidSDKSources/android-sdk-sources-for-api-level-26", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 29147, "license": "licensed"}}