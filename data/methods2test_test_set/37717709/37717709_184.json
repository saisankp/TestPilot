{"test_class": {"identifier": "TestVoiceXmlInterpreter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private VoiceXmlInterpreter interpreter;", "modifier": "private", "type": "VoiceXmlInterpreter", "declarator": "interpreter", "var_name": "interpreter"}, {"original_string": "private Configuration configuration;", "modifier": "private", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}], "file": "org.jvoicexml/src/test/java/org/jvoicexml/interpreter/TestVoiceXmlInterpreter.java"}, "test_case": {"identifier": "testSetDocument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetDocument() throws Exception {\n        final VoiceXmlDocument document = new VoiceXmlDocument();\n        final Vxml vxml = document.getVxml();\n        final Form form = vxml.appendChild(Form.class);\n        final String id = \"hurz\";\n        form.setId(id);\n        interpreter.setDocument(document, null, configuration);\n        final Dialog dialog = interpreter.getNextDialog();\n\n        Assert.assertEquals(id, dialog.getId());\n    }", "signature": "void testSetDocument()", "full_signature": "@Test public void testSetDocument()", "class_method_signature": "TestVoiceXmlInterpreter.testSetDocument()", "testcase": true, "constructor": false, "invocations": ["getVxml", "appendChild", "setId", "setDocument", "getNextDialog", "assertEquals", "getId"]}, "focal_class": {"identifier": "VoiceXmlInterpreter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LogManager\n            .getLogger(VoiceXmlInterpreter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager\n            .getLogger(VoiceXmlInterpreter.class)", "var_name": "LOGGER"}, {"original_string": "private final VoiceXmlInterpreterContext context;", "modifier": "private final", "type": "VoiceXmlInterpreterContext", "declarator": "context", "var_name": "context"}, {"original_string": "private FormInterpretationAlgorithm fia;", "modifier": "private", "type": "FormInterpretationAlgorithm", "declarator": "fia", "var_name": "fia"}, {"original_string": "private VoiceXmlDocument document;", "modifier": "private", "type": "VoiceXmlDocument", "declarator": "document", "var_name": "document"}, {"original_string": "private Locale documentLocale;", "modifier": "private", "type": "Locale", "declarator": "documentLocale", "var_name": "documentLocale"}, {"original_string": "private Collection<Dialog> dialogs;", "modifier": "private", "type": "Collection<Dialog>", "declarator": "dialogs", "var_name": "dialogs"}, {"original_string": "private Dialog nextDialog;", "modifier": "private", "type": "Dialog", "declarator": "nextDialog", "var_name": "nextDialog"}, {"original_string": "private InterpreterState state;", "modifier": "private", "type": "InterpreterState", "declarator": "state", "var_name": "state"}, {"original_string": "private boolean finalProcessingState;", "modifier": "private", "type": "boolean", "declarator": "finalProcessingState", "var_name": "finalProcessingState"}], "methods": [{"identifier": "VoiceXmlInterpreter", "parameters": "(final VoiceXmlInterpreterContext ctx)", "modifiers": "public", "return": "", "signature": " VoiceXmlInterpreter(final VoiceXmlInterpreterContext ctx)", "full_signature": "public  VoiceXmlInterpreter(final VoiceXmlInterpreterContext ctx)", "class_method_signature": "VoiceXmlInterpreter.VoiceXmlInterpreter(final VoiceXmlInterpreterContext ctx)", "testcase": false, "constructor": true}, {"identifier": "getFormInterpretationAlgorithm", "parameters": "()", "modifiers": "public", "return": "FormInterpretationAlgorithm", "signature": "FormInterpretationAlgorithm getFormInterpretationAlgorithm()", "full_signature": "public FormInterpretationAlgorithm getFormInterpretationAlgorithm()", "class_method_signature": "VoiceXmlInterpreter.getFormInterpretationAlgorithm()", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "public", "return": "InterpreterState", "signature": "InterpreterState getState()", "full_signature": "public InterpreterState getState()", "class_method_signature": "VoiceXmlInterpreter.getState()", "testcase": false, "constructor": false}, {"identifier": "setState", "parameters": "(final InterpreterState newState)", "modifiers": "public", "return": "void", "signature": "void setState(final InterpreterState newState)", "full_signature": "public void setState(final InterpreterState newState)", "class_method_signature": "VoiceXmlInterpreter.setState(final InterpreterState newState)", "testcase": false, "constructor": false}, {"identifier": "setDocument", "parameters": "(final VoiceXmlDocument doc, final String startDialog,\n            final Configuration configuration)", "modifiers": "", "return": "void", "signature": "void setDocument(final VoiceXmlDocument doc, final String startDialog,\n            final Configuration configuration)", "full_signature": " void setDocument(final VoiceXmlDocument doc, final String startDialog,\n            final Configuration configuration)", "class_method_signature": "VoiceXmlInterpreter.setDocument(final VoiceXmlDocument doc, final String startDialog,\n            final Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "getNextDialog", "parameters": "()", "modifiers": "public", "return": "Dialog", "signature": "Dialog getNextDialog()", "full_signature": "public Dialog getNextDialog()", "class_method_signature": "VoiceXmlInterpreter.getNextDialog()", "testcase": false, "constructor": false}, {"identifier": "getDialog", "parameters": "(final String id)", "modifiers": "public", "return": "Dialog", "signature": "Dialog getDialog(final String id)", "full_signature": "public Dialog getDialog(final String id)", "class_method_signature": "VoiceXmlInterpreter.getDialog(final String id)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(final Dialog dialog,\n            final Map<String, Object> parameters)", "modifiers": "public", "return": "void", "signature": "void process(final Dialog dialog,\n            final Map<String, Object> parameters)", "full_signature": "public void process(final Dialog dialog,\n            final Map<String, Object> parameters)", "class_method_signature": "VoiceXmlInterpreter.process(final Dialog dialog,\n            final Map<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "enterFinalProcessingState", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void enterFinalProcessingState()", "full_signature": "public void enterFinalProcessingState()", "class_method_signature": "VoiceXmlInterpreter.enterFinalProcessingState()", "testcase": false, "constructor": false}, {"identifier": "isInFinalProcessingState", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInFinalProcessingState()", "full_signature": "public boolean isInFinalProcessingState()", "class_method_signature": "VoiceXmlInterpreter.isInFinalProcessingState()", "testcase": false, "constructor": false}, {"identifier": "getLanguage", "parameters": "()", "modifiers": "public", "return": "Locale", "signature": "Locale getLanguage()", "full_signature": "public Locale getLanguage()", "class_method_signature": "VoiceXmlInterpreter.getLanguage()", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/interpreter/VoiceXmlInterpreter.java"}, "focal_method": {"identifier": "setDocument", "parameters": "(final VoiceXmlDocument doc, final String startDialog,\n            final Configuration configuration)", "modifiers": "", "return": "void", "body": "void setDocument(final VoiceXmlDocument doc, final String startDialog,\n            final Configuration configuration) throws ConfigurationException {\n        if (doc == null) {\n            document = null;\n            return;\n        }\n        document = doc;\n\n        final Vxml vxml = document.getVxml();\n        if (vxml == null) {\n            LOGGER.warn(\"no vxml tag found in '\" + doc + \"'\");\n            return;\n        }\n\n        // Determine all dialogs of the current document.\n        final DialogFactory factory = configuration\n                .loadObject(DialogFactory.class);\n        dialogs = factory.getDialogs(vxml);\n\n        if (startDialog == null) {\n            // Check if there is at least one dialog and take this one as the\n            // next dialog.\n            final Iterator<Dialog> iterator = dialogs.iterator();\n            if (iterator.hasNext()) {\n                nextDialog = iterator.next();\n            }\n        } else {\n            nextDialog = getDialog(startDialog);\n        }\n        if (nextDialog == null) {\n            if (startDialog == null) {\n                LOGGER.info(\"the document does not contain any dialogs\");\n            } else {\n                LOGGER.warn(\"start dialog '\" + startDialog\n                        + \"' not found in document!\");\n            }\n        } else {\n            LOGGER.info(\"interpreter starts with dialog '\" + nextDialog.getId()\n                    + \"'\");\n        }\n    }", "signature": "void setDocument(final VoiceXmlDocument doc, final String startDialog,\n            final Configuration configuration)", "full_signature": " void setDocument(final VoiceXmlDocument doc, final String startDialog,\n            final Configuration configuration)", "class_method_signature": "VoiceXmlInterpreter.setDocument(final VoiceXmlDocument doc, final String startDialog,\n            final Configuration configuration)", "testcase": false, "constructor": false, "invocations": ["getVxml", "warn", "loadObject", "getDialogs", "iterator", "hasNext", "next", "getDialog", "info", "warn", "info", "getId"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}