{"test_class": {"identifier": "SelectMapGenotypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "opt4j-core/src/test/java/org/opt4j/core/genotype/SelectMapGenotypeTest.java"}, "test_case": {"identifier": "testSetValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSetValue() {\n\t\tInputs inputs = new Inputs();\n\t\tSelectMapGenotype<Integer, Integer> genotype = new SelectMapGenotype<>(inputs.list, inputs.map);\n\t\tgenotype.init(new Random());\n\t\tgenotype.setValue(2, 3);\n\t\tassertEquals(3, (long) genotype.getValue(2));\n\t\tgenotype.setValue(2, 4);\n\t\tassertEquals(4, (long) genotype.getValue(2));\n\t}", "signature": "void testSetValue()", "full_signature": "@Test public void testSetValue()", "class_method_signature": "SelectMapGenotypeTest.testSetValue()", "testcase": true, "constructor": false, "invocations": ["init", "setValue", "assertEquals", "getValue", "setValue", "assertEquals", "getValue"]}, "focal_class": {"identifier": "SelectMapGenotype", "superclass": "extends IntegerGenotype", "interfaces": "implements MapGenotype<K, V>", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "protected final List<K> keys;", "modifier": "protected final", "type": "List<K>", "declarator": "keys", "var_name": "keys"}, {"original_string": "protected final Map<K, List<V>> values;", "modifier": "protected final", "type": "Map<K, List<V>>", "declarator": "values", "var_name": "values"}], "methods": [{"identifier": "SelectMapGenotype", "parameters": "(List<K> keys, Map<K, List<V>> values)", "modifiers": "public", "return": "", "signature": " SelectMapGenotype(List<K> keys, Map<K, List<V>> values)", "full_signature": "public  SelectMapGenotype(List<K> keys, Map<K, List<V>> values)", "class_method_signature": "SelectMapGenotype.SelectMapGenotype(List<K> keys, Map<K, List<V>> values)", "testcase": false, "constructor": true}, {"identifier": "toMap", "parameters": "(List<K> keys, List<V> values)", "modifiers": "private static", "return": "Map<K, List<V>>", "signature": "Map<K, List<V>> toMap(List<K> keys, List<V> values)", "full_signature": "private static Map<K, List<V>> toMap(List<K> keys, List<V> values)", "class_method_signature": "SelectMapGenotype.toMap(List<K> keys, List<V> values)", "testcase": false, "constructor": false}, {"identifier": "SelectMapGenotype", "parameters": "(List<K> keys, List<V> values)", "modifiers": "public", "return": "", "signature": " SelectMapGenotype(List<K> keys, List<V> values)", "full_signature": "public  SelectMapGenotype(List<K> keys, List<V> values)", "class_method_signature": "SelectMapGenotype.SelectMapGenotype(List<K> keys, List<V> values)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(Random random)", "modifiers": "public", "return": "void", "signature": "void init(Random random)", "full_signature": "public void init(Random random)", "class_method_signature": "SelectMapGenotype.init(Random random)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Random random, int n)", "modifiers": "@Override public", "return": "void", "signature": "void init(Random random, int n)", "full_signature": "@Override public void init(Random random, int n)", "class_method_signature": "SelectMapGenotype.init(Random random, int n)", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(K key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsKey(K key)", "full_signature": "@Override public boolean containsKey(K key)", "class_method_signature": "SelectMapGenotype.containsKey(K key)", "testcase": false, "constructor": false}, {"identifier": "getIndexOf", "parameters": "(K key)", "modifiers": "@Override public", "return": "int", "signature": "int getIndexOf(K key)", "full_signature": "@Override public int getIndexOf(K key)", "class_method_signature": "SelectMapGenotype.getIndexOf(K key)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(K key)", "modifiers": "@Override public", "return": "V", "signature": "V getValue(K key)", "full_signature": "@Override public V getValue(K key)", "class_method_signature": "SelectMapGenotype.getValue(K key)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(K key, V value)", "modifiers": "@Override public", "return": "void", "signature": "void setValue(K key, V value)", "full_signature": "@Override public void setValue(K key, V value)", "class_method_signature": "SelectMapGenotype.setValue(K key, V value)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "()", "modifiers": "@Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public", "return": "G", "signature": "G newInstance()", "full_signature": "@Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public G newInstance()", "class_method_signature": "SelectMapGenotype.newInstance()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SelectMapGenotype.toString()", "testcase": false, "constructor": false}, {"identifier": "getKeys", "parameters": "()", "modifiers": "@Override public", "return": "Collection<K>", "signature": "Collection<K> getKeys()", "full_signature": "@Override public Collection<K> getKeys()", "class_method_signature": "SelectMapGenotype.getKeys()", "testcase": false, "constructor": false}], "file": "opt4j-core/src/main/java/org/opt4j/core/genotype/SelectMapGenotype.java"}, "focal_method": {"identifier": "setValue", "parameters": "(K key, V value)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void setValue(K key, V value) {\n\t\tint i = getIndexOf(key);\n\t\twhile (size() <= i) {\n\t\t\tadd(bounds.getLowerBound(i));\n\t\t}\n\t\tList<V> valueList = values.get(key);\n\t\tif (!valueList.contains(value)) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"The list provided for key \" + key + \" does not contain the value \" + value);\n\t\t}\n\t\tint v = valueList.indexOf(value);\n\t\tset(i, v);\n\t}", "signature": "void setValue(K key, V value)", "full_signature": "@Override public void setValue(K key, V value)", "class_method_signature": "SelectMapGenotype.setValue(K key, V value)", "testcase": false, "constructor": false, "invocations": ["getIndexOf", "size", "add", "getLowerBound", "get", "contains", "indexOf", "set"]}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}