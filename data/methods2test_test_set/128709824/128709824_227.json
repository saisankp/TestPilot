{"test_class": {"identifier": "ClassTypeUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Object anonymous = new Comparable<String>() {\n                         @Override\n                         public int compareTo(String o) {\n                             return 0;\n                         }\n                     };", "modifier": "", "type": "Object", "declarator": "anonymous = new Comparable<String>() {\n                         @Override\n                         public int compareTo(String o) {\n                             return 0;\n                         }\n                     }", "var_name": "anonymous"}], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/utils/ClassTypeUtilsTest.java"}, "test_case": {"identifier": "testGetTypeStr", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetTypeStr() {\n\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(String.class), \"java.lang.String\");\n\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(boolean.class), \"boolean\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(byte.class), \"byte\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(char.class), \"char\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(double.class), \"double\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(float.class), \"float\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(int.class), \"int\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(long.class), \"long\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(short.class), \"short\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(void.class), \"void\");\n\n        // \u672c\u5730\u7c7b\n        class LocalType {\n\n        }\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(anonymous.getClass()),\n            \"com.alipay.sofa.rpc.common.utils.ClassTypeUtilsTest$1\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(LocalType.class),\n            \"com.alipay.sofa.rpc.common.utils.ClassTypeUtilsTest$2LocalType\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(MemberClass.class),\n            \"com.alipay.sofa.rpc.common.utils.ClassTypeUtilsTest$MemberClass\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(StaticClass.class),\n            \"com.alipay.sofa.rpc.common.utils.StaticClass\");\n\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(String[][][].class), \"java.lang.String[][][]\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(boolean[].class), \"boolean[]\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(byte[].class), \"byte[]\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(char[].class), \"char[]\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(double[].class), \"double[]\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(float[].class), \"float[]\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(int[].class), \"int[]\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(long[].class), \"long[]\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(short[].class), \"short[]\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(Array.newInstance(anonymous.getClass(), 2, 3).getClass()),\n            \"com.alipay.sofa.rpc.common.utils.ClassTypeUtilsTest$1[][]\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(LocalType[][].class),\n            \"com.alipay.sofa.rpc.common.utils.ClassTypeUtilsTest$2LocalType[][]\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(MemberClass[].class),\n            \"com.alipay.sofa.rpc.common.utils.ClassTypeUtilsTest$MemberClass[]\");\n        Assert.assertEquals(ClassTypeUtils.getTypeStr(StaticClass[].class),\n            \"com.alipay.sofa.rpc.common.utils.StaticClass[]\");\n\n        Assert.assertArrayEquals(ClassTypeUtils.getTypeStrs(new Class[] { String[].class }),\n            new String[] { \"java.lang.String[]\" });\n        Assert.assertArrayEquals(ClassTypeUtils.getTypeStrs(new Class[] { String[].class }, false),\n            new String[] { \"java.lang.String[]\" });\n        Assert.assertArrayEquals(ClassTypeUtils.getTypeStrs(new Class[] { String[].class }, true),\n            new String[] { String[].class.getName() });\n\n    }", "signature": "void testGetTypeStr()", "full_signature": "@Test public void testGetTypeStr()", "class_method_signature": "ClassTypeUtilsTest.testGetTypeStr()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "getClass", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "getClass", "newInstance", "getClass", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertEquals", "getTypeStr", "assertArrayEquals", "getTypeStrs", "assertArrayEquals", "getTypeStrs", "assertArrayEquals", "getTypeStrs", "getName"]}, "focal_class": {"identifier": "ClassTypeUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getClasses", "parameters": "(String[] typeStrs)", "modifiers": "public static", "return": "Class[]", "signature": "Class[] getClasses(String[] typeStrs)", "full_signature": "public static Class[] getClasses(String[] typeStrs)", "class_method_signature": "ClassTypeUtils.getClasses(String[] typeStrs)", "testcase": false, "constructor": false}, {"identifier": "getClass", "parameters": "(String typeStr)", "modifiers": "public static", "return": "Class", "signature": "Class getClass(String typeStr)", "full_signature": "public static Class getClass(String typeStr)", "class_method_signature": "ClassTypeUtils.getClass(String typeStr)", "testcase": false, "constructor": false}, {"identifier": "canonicalNameToJvmName", "parameters": "(String canonicalName)", "modifiers": "public static", "return": "String", "signature": "String canonicalNameToJvmName(String canonicalName)", "full_signature": "public static String canonicalNameToJvmName(String canonicalName)", "class_method_signature": "ClassTypeUtils.canonicalNameToJvmName(String canonicalName)", "testcase": false, "constructor": false}, {"identifier": "getTypeStrs", "parameters": "(Class[] types)", "modifiers": "public static", "return": "String[]", "signature": "String[] getTypeStrs(Class[] types)", "full_signature": "public static String[] getTypeStrs(Class[] types)", "class_method_signature": "ClassTypeUtils.getTypeStrs(Class[] types)", "testcase": false, "constructor": false}, {"identifier": "getTypeStrs", "parameters": "(Class[] types, boolean javaStyle)", "modifiers": "public static", "return": "String[]", "signature": "String[] getTypeStrs(Class[] types, boolean javaStyle)", "full_signature": "public static String[] getTypeStrs(Class[] types, boolean javaStyle)", "class_method_signature": "ClassTypeUtils.getTypeStrs(Class[] types, boolean javaStyle)", "testcase": false, "constructor": false}, {"identifier": "getTypeStr", "parameters": "(Class clazz)", "modifiers": "public static", "return": "String", "signature": "String getTypeStr(Class clazz)", "full_signature": "public static String getTypeStr(Class clazz)", "class_method_signature": "ClassTypeUtils.getTypeStr(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "jvmNameToCanonicalName", "parameters": "(String jvmName)", "modifiers": "public static", "return": "String", "signature": "String jvmNameToCanonicalName(String jvmName)", "full_signature": "public static String jvmNameToCanonicalName(String jvmName)", "class_method_signature": "ClassTypeUtils.jvmNameToCanonicalName(String jvmName)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/utils/ClassTypeUtils.java"}, "focal_method": {"identifier": "getTypeStr", "parameters": "(Class clazz)", "modifiers": "public static", "return": "String", "body": "public static String getTypeStr(Class clazz) {\n        String typeStr = ReflectCache.getTypeStrCache(clazz);\n        if (typeStr == null) {\n            if (clazz.isArray()) {\n                String name = clazz.getName(); // \u539f\u59cb\u540d\u5b57\uff1a[Ljava.lang.String;\n                typeStr = jvmNameToCanonicalName(name); // java.lang.String[]\n            } else {\n                typeStr = clazz.getName();\n            }\n            ReflectCache.putTypeStrCache(clazz, typeStr);\n        }\n        return typeStr;\n    }", "signature": "String getTypeStr(Class clazz)", "full_signature": "public static String getTypeStr(Class clazz)", "class_method_signature": "ClassTypeUtils.getTypeStr(Class clazz)", "testcase": false, "constructor": false, "invocations": ["getTypeStrCache", "isArray", "getName", "jvmNameToCanonicalName", "getName", "putTypeStrCache"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}