{"test_class": {"identifier": "ArtifactImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "blueocean-rest-impl/src/test/java/io/jenkins/blueocean/service/embedded/rest/ArtifactImplTest.java"}, "test_case": {"identifier": "findUniqueArtifactsWithSameName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findUniqueArtifactsWithSameName() throws IllegalAccessException {\n        //mock artifacts\n        Run.Artifact artifact1 = mock(Run.Artifact.class);\n        Run.Artifact artifact2 = mock(Run.Artifact.class);\n        //artifact1 mocks\n        when(artifact1.getFileName()).thenReturn(\"test-suite.log\");\n        MemberModifier.field(Run.Artifact.class, \"relativePath\").set(artifact1, \"path1/test-suite.log\");\n        when(artifact1.getHref()).thenReturn(\"path1/test-suite.log\");\n        //artifact2 mocks\n        when(artifact2.getFileName()).thenReturn(\"test-suite.log\");\n        MemberModifier.field(Run.Artifact.class, \"relativePath\").set(artifact2, \"path2/test-suite.log\");\n        when(artifact2.getHref()).thenReturn(\"path2/test-suite.log\");\n        //list of artifacts\n        ArrayList artifactList = new ArrayList();\n        artifactList.add(artifact1);\n        artifactList.add(artifact2);\n        //mock run\n        Run run = mock(Run.class);\n        when(run.getUrl()).thenReturn(\"job/myfolder/job/myjob/1/\");\n        when(run.getArtifacts()).thenReturn(artifactList);\n\n        Link parentLink = mock(Link.class);\n\n        ArtifactImpl a1 = new ArtifactImpl(run, artifact1, parentLink);\n        ArtifactImpl a2 = new ArtifactImpl(run, artifact2, parentLink);\n        assertThat(a1.getId(), is(not(a2.getId())));\n    }", "signature": "void findUniqueArtifactsWithSameName()", "full_signature": "@Test public void findUniqueArtifactsWithSameName()", "class_method_signature": "ArtifactImplTest.findUniqueArtifactsWithSameName()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getFileName", "set", "field", "thenReturn", "when", "getHref", "thenReturn", "when", "getFileName", "set", "field", "thenReturn", "when", "getHref", "add", "add", "mock", "thenReturn", "when", "getUrl", "thenReturn", "when", "getArtifacts", "mock", "assertThat", "getId", "is", "not", "getId"]}, "focal_class": {"identifier": "ArtifactImpl", "superclass": "extends BlueArtifact", "interfaces": "", "fields": [{"original_string": "final private Run run;", "modifier": "final private", "type": "Run", "declarator": "run", "var_name": "run"}, {"original_string": "final private Run.Artifact artifact;", "modifier": "final private", "type": "Run.Artifact", "declarator": "artifact", "var_name": "artifact"}], "methods": [{"identifier": "ArtifactImpl", "parameters": "(Run run, Run.Artifact artifact, Link parent)", "modifiers": "public", "return": "", "signature": " ArtifactImpl(Run run, Run.Artifact artifact, Link parent)", "full_signature": "public  ArtifactImpl(Run run, Run.Artifact artifact, Link parent)", "class_method_signature": "ArtifactImpl.ArtifactImpl(Run run, Run.Artifact artifact, Link parent)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "ArtifactImpl.getName()", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPath()", "full_signature": "@Override public String getPath()", "class_method_signature": "ArtifactImpl.getPath()", "testcase": false, "constructor": false}, {"identifier": "getUrl", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getUrl()", "full_signature": "@Override public String getUrl()", "class_method_signature": "ArtifactImpl.getUrl()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getSize()", "full_signature": "@Override public long getSize()", "class_method_signature": "ArtifactImpl.getSize()", "testcase": false, "constructor": false}, {"identifier": "isDownloadable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDownloadable()", "full_signature": "@Override public boolean isDownloadable()", "class_method_signature": "ArtifactImpl.isDownloadable()", "testcase": false, "constructor": false}], "file": "blueocean-rest-impl/src/main/java/io/jenkins/blueocean/service/embedded/rest/ArtifactImpl.java"}, "focal_method": {"identifier": "getUrl", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getUrl() {\n        return String.format(\"/%sartifact/%s\", run.getUrl(), artifact.getHref());\n    }", "signature": "String getUrl()", "full_signature": "@Override public String getUrl()", "class_method_signature": "ArtifactImpl.getUrl()", "testcase": false, "constructor": false, "invocations": ["format", "getUrl", "getHref"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}