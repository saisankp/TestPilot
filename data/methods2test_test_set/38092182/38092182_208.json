{"test_class": {"identifier": "AdFetcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AdFetcher subject;", "modifier": "private", "type": "AdFetcher", "declarator": "subject", "var_name": "subject"}, {"original_string": "private AdViewController adViewController;", "modifier": "private", "type": "AdViewController", "declarator": "adViewController", "var_name": "adViewController"}, {"original_string": "private MoPubView moPubView;", "modifier": "private", "type": "MoPubView", "declarator": "moPubView", "var_name": "moPubView"}, {"original_string": "private HttpResponse response;", "modifier": "private", "type": "HttpResponse", "declarator": "response", "var_name": "response"}], "file": "MoPubAd/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java"}, "test_case": {"identifier": "fetchAdForUrl_shouldRouteMillennialInterstitialToCustomEventHandling", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fetchAdForUrl_shouldRouteMillennialInterstitialToCustomEventHandling() throws Exception {\n        AdViewController interstitialAdViewController = mock(AdViewController.class);\n        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);\n        stub(interstitialAdViewController.getMoPubView()).toReturn(moPubInterstitialView);\n        stub(interstitialAdViewController.getAdConfiguration()).toReturn(mock(AdConfiguration.class));\n        subject = new AdFetcher(interstitialAdViewController, \"expected userAgent\");\n\n        String json = \"{\\\"adWidth\\\": 320, \\\"adHeight\\\": 480, \\\"adUnitID\\\": \\\"44310\\\"}\";\n        response.addHeader(AD_TYPE.getKey(), \"interstitial\");\n        response.addHeader(FULL_AD_TYPE.getKey(), \"millennial_full\");\n        response.addHeader(NATIVE_PARAMS.getKey(), json);\n        Robolectric.addPendingHttpResponse(response);\n\n        subject.fetchAdForUrl(\"ignored_url\");\n\n        Map<String, String> paramsMap = new HashMap<String, String>();\n        paramsMap.put(CUSTOM_EVENT_NAME.getKey(), \"com.mopub.mobileads.MillennialInterstitial\");\n        paramsMap.put(CUSTOM_EVENT_DATA.getKey(), json);\n\n        verify(moPubInterstitialView).loadCustomEvent(eq(paramsMap));\n    }", "signature": "void fetchAdForUrl_shouldRouteMillennialInterstitialToCustomEventHandling()", "full_signature": "@Test public void fetchAdForUrl_shouldRouteMillennialInterstitialToCustomEventHandling()", "class_method_signature": "AdFetcherTest.fetchAdForUrl_shouldRouteMillennialInterstitialToCustomEventHandling()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "toReturn", "stub", "getMoPubView", "toReturn", "stub", "getAdConfiguration", "mock", "addHeader", "getKey", "addHeader", "getKey", "addHeader", "getKey", "addPendingHttpResponse", "fetchAdForUrl", "put", "getKey", "put", "getKey", "loadCustomEvent", "verify", "eq"]}, "focal_class": {"identifier": "AdFetcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String HTML_RESPONSE_BODY_KEY = \"Html-Response-Body\";", "modifier": "public static final", "type": "String", "declarator": "HTML_RESPONSE_BODY_KEY = \"Html-Response-Body\"", "var_name": "HTML_RESPONSE_BODY_KEY"}, {"original_string": "public static final String REDIRECT_URL_KEY = \"Redirect-Url\";", "modifier": "public static final", "type": "String", "declarator": "REDIRECT_URL_KEY = \"Redirect-Url\"", "var_name": "REDIRECT_URL_KEY"}, {"original_string": "public static final String CLICKTHROUGH_URL_KEY = \"Clickthrough-Url\";", "modifier": "public static final", "type": "String", "declarator": "CLICKTHROUGH_URL_KEY = \"Clickthrough-Url\"", "var_name": "CLICKTHROUGH_URL_KEY"}, {"original_string": "public static final String SCROLLABLE_KEY = \"Scrollable\";", "modifier": "public static final", "type": "String", "declarator": "SCROLLABLE_KEY = \"Scrollable\"", "var_name": "SCROLLABLE_KEY"}, {"original_string": "public static final String AD_CONFIGURATION_KEY = \"Ad-Configuration\";", "modifier": "public static final", "type": "String", "declarator": "AD_CONFIGURATION_KEY = \"Ad-Configuration\"", "var_name": "AD_CONFIGURATION_KEY"}, {"original_string": "private int mTimeoutMilliseconds = 10000;", "modifier": "private", "type": "int", "declarator": "mTimeoutMilliseconds = 10000", "var_name": "mTimeoutMilliseconds"}, {"original_string": "private AdViewController mAdViewController;", "modifier": "private", "type": "AdViewController", "declarator": "mAdViewController", "var_name": "mAdViewController"}, {"original_string": "private AdFetchTask mCurrentTask;", "modifier": "private", "type": "AdFetchTask", "declarator": "mCurrentTask", "var_name": "mCurrentTask"}, {"original_string": "private String mUserAgent;", "modifier": "private", "type": "String", "declarator": "mUserAgent", "var_name": "mUserAgent"}, {"original_string": "private final TaskTracker mTaskTracker;", "modifier": "private final", "type": "TaskTracker", "declarator": "mTaskTracker", "var_name": "mTaskTracker"}], "methods": [{"identifier": "AdFetcher", "parameters": "(AdViewController adview, String userAgent)", "modifiers": "public", "return": "", "signature": " AdFetcher(AdViewController adview, String userAgent)", "full_signature": "public  AdFetcher(AdViewController adview, String userAgent)", "class_method_signature": "AdFetcher.AdFetcher(AdViewController adview, String userAgent)", "testcase": false, "constructor": true}, {"identifier": "fetchAdForUrl", "parameters": "(String url)", "modifiers": "public", "return": "void", "signature": "void fetchAdForUrl(String url)", "full_signature": "public void fetchAdForUrl(String url)", "class_method_signature": "AdFetcher.fetchAdForUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "cancelFetch", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cancelFetch()", "full_signature": "public void cancelFetch()", "class_method_signature": "AdFetcher.cancelFetch()", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "", "return": "void", "signature": "void cleanup()", "full_signature": " void cleanup()", "class_method_signature": "AdFetcher.cleanup()", "testcase": false, "constructor": false}, {"identifier": "setTimeout", "parameters": "(int milliseconds)", "modifiers": "protected", "return": "void", "signature": "void setTimeout(int milliseconds)", "full_signature": "protected void setTimeout(int milliseconds)", "class_method_signature": "AdFetcher.setTimeout(int milliseconds)", "testcase": false, "constructor": false}, {"identifier": "getCurrentTaskId", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getCurrentTaskId()", "full_signature": "private long getCurrentTaskId()", "class_method_signature": "AdFetcher.getCurrentTaskId()", "testcase": false, "constructor": false}], "file": "MoPubAd/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java"}, "focal_method": {"identifier": "fetchAdForUrl", "parameters": "(String url)", "modifiers": "public", "return": "void", "body": "public void fetchAdForUrl(String url) {\n        mTaskTracker.newTaskStarted();\n        MoPubLog.i(\"Fetching ad for task #\" + getCurrentTaskId());\n\n        if (mCurrentTask != null) {\n            mCurrentTask.cancel(true);\n        }\n\n        mCurrentTask = AdFetchTaskFactory.create(mTaskTracker, mAdViewController, mUserAgent, mTimeoutMilliseconds);\n\n        try {\n            AsyncTasks.safeExecuteOnExecutor(mCurrentTask, url);\n        } catch (Exception exception) {\n            MoPubLog.d(\"Error executing AdFetchTask\", exception);\n        }\n    }", "signature": "void fetchAdForUrl(String url)", "full_signature": "public void fetchAdForUrl(String url)", "class_method_signature": "AdFetcher.fetchAdForUrl(String url)", "testcase": false, "constructor": false, "invocations": ["newTaskStarted", "i", "getCurrentTaskId", "cancel", "create", "safeExecuteOnExecutor", "d"]}, "repository": {"repo_id": 38092182, "url": "https://github.com/harshalbenake/hbworkspace2-100", "language": "Java", "is_fork": false, "fork_count": 160, "stargazer_count": 191, "size": 307516, "license": "licensed"}}