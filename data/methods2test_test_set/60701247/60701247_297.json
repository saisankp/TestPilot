{"test_class": {"identifier": "InstantAppUrlFinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final ExpectedException myException = ExpectedException.none();", "modifier": "@Rule\n  public final", "type": "ExpectedException", "declarator": "myException = ExpectedException.none()", "var_name": "myException"}, {"original_string": "@Mock InstantAppUrlFinder.AttributesResolver myResolver;", "modifier": "@Mock", "type": "InstantAppUrlFinder.AttributesResolver", "declarator": "myResolver", "var_name": "myResolver"}], "file": "android/testSrc/com/android/tools/idea/instantapp/InstantAppUrlFinderTest.java"}, "test_case": {"identifier": "testUrlDataMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testUrlDataMatch() {\n    assertTrue(urlDataFromStrings(\"http\", \"example.com\", \"\", \"\", \"\").matchesUrl(\"http://example.com\"));\n    assertTrue(urlDataFromStrings(\"http\", \"example.com\", \"\", \"\", \"\").matchesUrl(\"http://example.com/\"));\n    assertFalse(urlDataFromStrings(\"http\", \"example.com\", \"/test\", \"\", \"\").matchesUrl(\"http://example.com\"));\n    assertTrue(urlDataFromStrings(\"http\", \"example.com\", \"/test\", \"\", \"\").matchesUrl(\"http://example.com/test\"));\n    assertFalse(urlDataFromStrings(\"http\", \"example.com\", \"/test\", \"/*\", \"\").matchesUrl(\"http://example.com\"));\n    assertTrue(urlDataFromStrings(\"http\", \"example.com\", \"\", \"/test\", \"\").matchesUrl(\"http://example.com/test/other\"));\n    assertFalse(urlDataFromStrings(\"http\", \"example.com\", \"\", \"/test\", \"\").matchesUrl(\"http://example.com/other\"));\n    assertTrue(urlDataFromStrings(\"http\", \"example.com\", \"\", \"/test\", \"/.*\").matchesUrl(\"http://example.com/other\"));\n    assertTrue(urlDataFromStrings(\"http\", \"example.com\", \"\", \"\", \"/.*\").matchesUrl(\"http://example.com/anything\"));\n    assertTrue(urlDataFromStrings(\"http\", \"example.com\", \"\", \"\", \"/.*\").matchesUrl(\"http://example.com/any/thing\"));\n    assertFalse(urlDataFromStrings(\"http\", \"example.com\", \"\", \"\", \"/test/.*\").matchesUrl(\"http://example.com/any/thing\"));\n  }", "signature": "void testUrlDataMatch()", "full_signature": "@Test public void testUrlDataMatch()", "class_method_signature": "InstantAppUrlFinderTest.testUrlDataMatch()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "matchesUrl", "urlDataFromStrings", "assertTrue", "matchesUrl", "urlDataFromStrings", "assertFalse", "matchesUrl", "urlDataFromStrings", "assertTrue", "matchesUrl", "urlDataFromStrings", "assertFalse", "matchesUrl", "urlDataFromStrings", "assertTrue", "matchesUrl", "urlDataFromStrings", "assertFalse", "matchesUrl", "urlDataFromStrings", "assertTrue", "matchesUrl", "urlDataFromStrings", "assertTrue", "matchesUrl", "urlDataFromStrings", "assertTrue", "matchesUrl", "urlDataFromStrings", "assertFalse", "matchesUrl", "urlDataFromStrings"]}, "focal_class": {"identifier": "InstantAppUrlFinder", "superclass": "", "interfaces": "", "fields": [{"original_string": "@NotNull private final Collection<Element> myActivities;", "modifier": "@NotNull private final", "type": "Collection<Element>", "declarator": "myActivities", "var_name": "myActivities"}, {"original_string": "@NotNull private final AttributesResolver myResolver;", "modifier": "@NotNull private final", "type": "AttributesResolver", "declarator": "myResolver", "var_name": "myResolver"}], "methods": [{"identifier": "InstantAppUrlFinder", "parameters": "(@NotNull Module module)", "modifiers": "public", "return": "", "signature": " InstantAppUrlFinder(@NotNull Module module)", "full_signature": "public  InstantAppUrlFinder(@NotNull Module module)", "class_method_signature": "InstantAppUrlFinder.InstantAppUrlFinder(@NotNull Module module)", "testcase": false, "constructor": true}, {"identifier": "InstantAppUrlFinder", "parameters": "(@NotNull AttributesResolver resolver, @NotNull Collection<Element> activities)", "modifiers": "@VisibleForTesting", "return": "", "signature": " InstantAppUrlFinder(@NotNull AttributesResolver resolver, @NotNull Collection<Element> activities)", "full_signature": "@VisibleForTesting  InstantAppUrlFinder(@NotNull AttributesResolver resolver, @NotNull Collection<Element> activities)", "class_method_signature": "InstantAppUrlFinder.InstantAppUrlFinder(@NotNull AttributesResolver resolver, @NotNull Collection<Element> activities)", "testcase": false, "constructor": true}, {"identifier": "getAllUrls", "parameters": "()", "modifiers": "@NotNull public", "return": "ImmutableCollection<String>", "signature": "ImmutableCollection<String> getAllUrls()", "full_signature": "@NotNull public ImmutableCollection<String> getAllUrls()", "class_method_signature": "InstantAppUrlFinder.getAllUrls()", "testcase": false, "constructor": false}, {"identifier": "getDefaultUrl", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "signature": "String getDefaultUrl()", "full_signature": "@NotNull public String getDefaultUrl()", "class_method_signature": "InstantAppUrlFinder.getDefaultUrl()", "testcase": false, "constructor": false}, {"identifier": "matchesUrl", "parameters": "(@NotNull String url)", "modifiers": "public", "return": "boolean", "signature": "boolean matchesUrl(@NotNull String url)", "full_signature": "public boolean matchesUrl(@NotNull String url)", "class_method_signature": "InstantAppUrlFinder.matchesUrl(@NotNull String url)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/instantapp/InstantAppUrlFinder.java"}, "focal_method": {"identifier": "matchesUrl", "parameters": "(@NotNull String url)", "modifiers": "public", "return": "boolean", "body": "public boolean matchesUrl(@NotNull String url) {\n    for (Element activity : myActivities) {\n      Node node = activity.getFirstChild();\n      while (node != null) {\n        InstantAppIntentFilterWrapper wrapper = new InstantAppIntentFilterWrapper(myResolver, node);\n        if (wrapper.matchesUrl(url)) {\n          return true;\n        }\n        node = node.getNextSibling();\n      }\n    }\n    return false;\n  }", "signature": "boolean matchesUrl(@NotNull String url)", "full_signature": "public boolean matchesUrl(@NotNull String url)", "class_method_signature": "InstantAppUrlFinder.matchesUrl(@NotNull String url)", "testcase": false, "constructor": false, "invocations": ["getFirstChild", "matchesUrl", "getNextSibling"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}