{"test_class": {"identifier": "PaymentMethodDatabaseAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int ID = 5;", "modifier": "private static final", "type": "int", "declarator": "ID = 5", "var_name": "ID"}, {"original_string": "private static final String METHOD = \"abcd\";", "modifier": "private static final", "type": "String", "declarator": "METHOD = \"abcd\"", "var_name": "METHOD"}, {"original_string": "private static final long CUSTOM_ORDER = 8;", "modifier": "private static final", "type": "long", "declarator": "CUSTOM_ORDER = 8", "var_name": "CUSTOM_ORDER"}, {"original_string": "private static final UUID PM_UUID = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "PM_UUID = UUID.randomUUID()", "var_name": "PM_UUID"}, {"original_string": "PaymentMethodDatabaseAdapter mPaymentMethodDatabaseAdapter;", "modifier": "", "type": "PaymentMethodDatabaseAdapter", "declarator": "mPaymentMethodDatabaseAdapter", "var_name": "mPaymentMethodDatabaseAdapter"}, {"original_string": "@Mock\n    Cursor mCursor;", "modifier": "@Mock", "type": "Cursor", "declarator": "mCursor", "var_name": "mCursor"}, {"original_string": "@Mock\n    PaymentMethod mPaymentMethod;", "modifier": "@Mock", "type": "PaymentMethod", "declarator": "mPaymentMethod", "var_name": "mPaymentMethod"}, {"original_string": "@Mock\n    SyncStateAdapter mSyncStateAdapter;", "modifier": "@Mock", "type": "SyncStateAdapter", "declarator": "mSyncStateAdapter", "var_name": "mSyncStateAdapter"}, {"original_string": "@Mock\n    SyncState mSyncState, mGetSyncState;", "modifier": "@Mock", "type": "SyncState", "declarator": "mSyncState", "var_name": "mSyncState"}], "file": "app/src/test/java/co/smartreceipts/android/persistence/database/tables/adapters/PaymentMethodDatabaseAdapterTest.java"}, "test_case": {"identifier": "writeUnsynced", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void writeUnsynced() throws Exception {\n        final String sync = \"sync\";\n        final ContentValues syncValues = new ContentValues();\n        syncValues.put(sync, sync);\n        when(mSyncStateAdapter.writeUnsynced(mSyncState)).thenReturn(syncValues);\n\n        final ContentValues contentValues = mPaymentMethodDatabaseAdapter.write(mPaymentMethod, new DatabaseOperationMetadata());\n        assertEquals(METHOD, contentValues.getAsString(\"method\"));\n        assertEquals(sync, contentValues.getAsString(sync));\n        assertEquals(CUSTOM_ORDER, (int) contentValues.getAsInteger(\"custom_order_id\"));\n        assertEquals(PM_UUID.toString(), contentValues.getAsString(\"entity_uuid\"));\n        assertFalse(contentValues.containsKey(\"id\"));\n    }", "signature": "void writeUnsynced()", "full_signature": "@Test public void writeUnsynced()", "class_method_signature": "PaymentMethodDatabaseAdapterTest.writeUnsynced()", "testcase": true, "constructor": false, "invocations": ["put", "thenReturn", "when", "writeUnsynced", "write", "assertEquals", "getAsString", "assertEquals", "getAsString", "assertEquals", "getAsInteger", "assertEquals", "toString", "getAsString", "assertFalse", "containsKey"]}, "focal_class": {"identifier": "PaymentMethodDatabaseAdapter", "superclass": "", "interfaces": "implements DatabaseAdapter<PaymentMethod>", "fields": [{"original_string": "private final SyncStateAdapter mSyncStateAdapter;", "modifier": "private final", "type": "SyncStateAdapter", "declarator": "mSyncStateAdapter", "var_name": "mSyncStateAdapter"}], "methods": [{"identifier": "PaymentMethodDatabaseAdapter", "parameters": "()", "modifiers": "public", "return": "", "signature": " PaymentMethodDatabaseAdapter()", "full_signature": "public  PaymentMethodDatabaseAdapter()", "class_method_signature": "PaymentMethodDatabaseAdapter.PaymentMethodDatabaseAdapter()", "testcase": false, "constructor": true}, {"identifier": "PaymentMethodDatabaseAdapter", "parameters": "(@NonNull SyncStateAdapter syncStateAdapter)", "modifiers": "public", "return": "", "signature": " PaymentMethodDatabaseAdapter(@NonNull SyncStateAdapter syncStateAdapter)", "full_signature": "public  PaymentMethodDatabaseAdapter(@NonNull SyncStateAdapter syncStateAdapter)", "class_method_signature": "PaymentMethodDatabaseAdapter.PaymentMethodDatabaseAdapter(@NonNull SyncStateAdapter syncStateAdapter)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "(@NonNull Cursor cursor)", "modifiers": "@NonNull @Override public", "return": "PaymentMethod", "signature": "PaymentMethod read(@NonNull Cursor cursor)", "full_signature": "@NonNull @Override public PaymentMethod read(@NonNull Cursor cursor)", "class_method_signature": "PaymentMethodDatabaseAdapter.read(@NonNull Cursor cursor)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(@NonNull PaymentMethod paymentMethod, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@NonNull @Override public", "return": "ContentValues", "signature": "ContentValues write(@NonNull PaymentMethod paymentMethod, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@NonNull @Override public ContentValues write(@NonNull PaymentMethod paymentMethod, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "PaymentMethodDatabaseAdapter.write(@NonNull PaymentMethod paymentMethod, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(@NonNull PaymentMethod paymentMethod, int primaryKey,\n                               @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@NonNull @Override public", "return": "PaymentMethod", "signature": "PaymentMethod build(@NonNull PaymentMethod paymentMethod, int primaryKey,\n                               @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@NonNull @Override public PaymentMethod build(@NonNull PaymentMethod paymentMethod, int primaryKey,\n                               @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "PaymentMethodDatabaseAdapter.build(@NonNull PaymentMethod paymentMethod, int primaryKey,\n                               @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/persistence/database/tables/adapters/PaymentMethodDatabaseAdapter.java"}, "focal_method": {"identifier": "write", "parameters": "(@NonNull PaymentMethod paymentMethod, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@NonNull @Override public", "return": "ContentValues", "body": "@NonNull\n    @Override\n    public ContentValues write(@NonNull PaymentMethod paymentMethod, @NonNull DatabaseOperationMetadata databaseOperationMetadata) {\n        final ContentValues values = new ContentValues();\n        values.put(PaymentMethodsTable.COLUMN_METHOD, paymentMethod.getMethod());\n        values.put(PaymentMethodsTable.COLUMN_CUSTOM_ORDER_ID, paymentMethod.getCustomOrderId());\n        values.put(PaymentMethodsTable.COLUMN_UUID, paymentMethod.getUuid().toString());\n        values.put(PaymentMethodsTable.COLUMN_REIMBURSABLE, paymentMethod.isReimbursable());\n        if (databaseOperationMetadata.getOperationFamilyType() == OperationFamilyType.Sync) {\n            values.putAll(mSyncStateAdapter.write(paymentMethod.getSyncState()));\n        } else {\n            values.putAll(mSyncStateAdapter.writeUnsynced(paymentMethod.getSyncState()));\n        }\n        return values;\n    }", "signature": "ContentValues write(@NonNull PaymentMethod paymentMethod, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@NonNull @Override public ContentValues write(@NonNull PaymentMethod paymentMethod, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "PaymentMethodDatabaseAdapter.write(@NonNull PaymentMethod paymentMethod, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false, "invocations": ["put", "getMethod", "put", "getCustomOrderId", "put", "toString", "getUuid", "put", "isReimbursable", "getOperationFamilyType", "putAll", "write", "getSyncState", "putAll", "writeUnsynced", "getSyncState"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}