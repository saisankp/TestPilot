{"test_class": {"identifier": "TEWMATest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String message = \"272\";", "modifier": "static final", "type": "String", "declarator": "message = \"272\"", "var_name": "message"}, {"original_string": "static final int[] correctIdx = new int[]{9754050, 11917035, 12238481, 14522717, 5947587, 1548765, 7212604, 12309647, 16066215, 1232510, 10694178, 14271239, 4784036, 15510045, 304956, 5224878};", "modifier": "static final", "type": "int[]", "declarator": "correctIdx = new int[]{9754050, 11917035, 12238481, 14522717, 5947587, 1548765, 7212604, 12309647, 16066215, 1232510, 10694178, 14271239, 4784036, 15510045, 304956, 5224878}", "var_name": "correctIdx"}, {"original_string": "static final String correctHash = \"C2D594EBD6B591BEBA5D99DDC3C05ADDA1173C0E\";", "modifier": "static final", "type": "String", "declarator": "correctHash = \"C2D594EBD6B591BEBA5D99DDC3C05ADDA1173C0E\"", "var_name": "correctHash"}], "file": "ml/streaminer/src/test/java/org/streaminer/stream/avg/TEWMATest.java"}, "test_case": {"identifier": "testAdd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAdd() {\n        System.out.println(\"testAdd\");\n        TEWMA tewma = new TEWMA(16, 24, 0.3, 10);\n        \n        double value = tewma.add(272, 1, System.currentTimeMillis()/1000);\n        System.out.println(\"Value: \" + value);\n        \n        assertEquals(Math.ceil(1.203972), Math.ceil(value), 0);\n    }", "signature": "void testAdd()", "full_signature": "@Test public void testAdd()", "class_method_signature": "TEWMATest.testAdd()", "testcase": true, "constructor": false, "invocations": ["println", "add", "currentTimeMillis", "println", "assertEquals", "ceil", "ceil"]}, "focal_class": {"identifier": "TEWMA", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char[] hexArray = \"0123456789ABCDEF\".toCharArray();", "modifier": "private static final", "type": "char[]", "declarator": "hexArray = \"0123456789ABCDEF\".toCharArray()", "var_name": "hexArray"}, {"original_string": "private MessageDigest sha1;", "modifier": "private", "type": "MessageDigest", "declarator": "sha1", "var_name": "sha1"}, {"original_string": "private double beta;", "modifier": "private", "type": "double", "declarator": "beta", "var_name": "beta"}, {"original_string": "private double logBeta;", "modifier": "private", "type": "double", "declarator": "logBeta", "var_name": "logBeta"}, {"original_string": "private int nhash;", "modifier": "private", "type": "int", "declarator": "nhash", "var_name": "nhash"}, {"original_string": "private int shash;", "modifier": "private", "type": "int", "declarator": "shash", "var_name": "shash"}, {"original_string": "private double w;", "modifier": "private", "type": "double", "declarator": "w", "var_name": "w"}, {"original_string": "private int digest;", "modifier": "private", "type": "int", "declarator": "digest", "var_name": "digest"}, {"original_string": "private double[] counters;", "modifier": "private", "type": "double[]", "declarator": "counters", "var_name": "counters"}, {"original_string": "private long[] timers;", "modifier": "private", "type": "long[]", "declarator": "timers", "var_name": "timers"}], "methods": [{"identifier": "TEWMA", "parameters": "(int nhash, int shash, double beta, double w)", "modifiers": "public", "return": "", "signature": " TEWMA(int nhash, int shash, double beta, double w)", "full_signature": "public  TEWMA(int nhash, int shash, double beta, double w)", "class_method_signature": "TEWMA.TEWMA(int nhash, int shash, double beta, double w)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(Object item, double quantity, long timestamp)", "modifiers": "public", "return": "double", "signature": "double add(Object item, double quantity, long timestamp)", "full_signature": "public double add(Object item, double quantity, long timestamp)", "class_method_signature": "TEWMA.add(Object item, double quantity, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(Object item, long timestamp)", "modifiers": "public", "return": "double", "signature": "double check(Object item, long timestamp)", "full_signature": "public double check(Object item, long timestamp)", "class_method_signature": "TEWMA.check(Object item, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "getMinCounter", "parameters": "(int[] idx, long timestamp)", "modifiers": "protected", "return": "double", "signature": "double getMinCounter(int[] idx, long timestamp)", "full_signature": "protected double getMinCounter(int[] idx, long timestamp)", "class_method_signature": "TEWMA.getMinCounter(int[] idx, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "indexes", "parameters": "(Object o)", "modifiers": "protected", "return": "int[]", "signature": "int[] indexes(Object o)", "full_signature": "protected int[] indexes(Object o)", "class_method_signature": "TEWMA.indexes(Object o)", "testcase": false, "constructor": false}, {"identifier": "bytesToHex", "parameters": "(byte[] bytes)", "modifiers": "protected", "return": "String", "signature": "String bytesToHex(byte[] bytes)", "full_signature": "protected String bytesToHex(byte[] bytes)", "class_method_signature": "TEWMA.bytesToHex(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "toSHA1", "parameters": "(Object o)", "modifiers": "protected", "return": "byte[]", "signature": "byte[] toSHA1(Object o)", "full_signature": "protected byte[] toSHA1(Object o)", "class_method_signature": "TEWMA.toSHA1(Object o)", "testcase": false, "constructor": false}, {"identifier": "toSHA1", "parameters": "(byte[] in)", "modifiers": "protected", "return": "byte[]", "signature": "byte[] toSHA1(byte[] in)", "full_signature": "protected byte[] toSHA1(byte[] in)", "class_method_signature": "TEWMA.toSHA1(byte[] in)", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/avg/TEWMA.java"}, "focal_method": {"identifier": "add", "parameters": "(Object item, double quantity, long timestamp)", "modifiers": "public", "return": "double", "body": "public double add(Object item, double quantity, long timestamp) {\n        // compute the hash functions\n        int[] idx = indexes(item);\n        \n        double minCounter = getMinCounter(idx, timestamp);\n        \n        // compute the new value including the insertion and update \n\t// the filter by waterfilling the new counter array bins\n        double newCounter = minCounter + quantity * logBeta;\n        \n        if (newCounter > 1.0e99)\n            throw new AssertionError(\"newCounter shouldn't be greater than 1.0e99.\");\n        \n        for (int i=0; i<nhash; i++)\n            if (counters[idx[i]] < newCounter)\n                counters[idx[i]] = newCounter;\n        \n        return newCounter;\n    }", "signature": "double add(Object item, double quantity, long timestamp)", "full_signature": "public double add(Object item, double quantity, long timestamp)", "class_method_signature": "TEWMA.add(Object item, double quantity, long timestamp)", "testcase": false, "constructor": false, "invocations": ["indexes", "getMinCounter"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}