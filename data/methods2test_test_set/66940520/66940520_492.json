{"test_class": {"identifier": "EventAnalyticsUtilsTest", "superclass": "extends DhisConvenienceTest", "interfaces": "", "fields": [], "file": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/event/EventAnalyticsUtilsTest.java"}, "test_case": {"identifier": "testGenerateEventDataPermutations", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerateEventDataPermutations()\n    {\n        Map<String, List<EventAnalyticsDimensionalItem>> tableRows = new LinkedHashMap<>();\n\n        Grid grid = new ListGrid( );\n\n        DataElement deA = createDataElement( 'A' );\n        deA.setValueType( ValueType.BOOLEAN );\n\n        grid.addMetaData( deA.getUid(), deA );\n\n        TrackedEntityAttribute trackedEntityAttribute = createTrackedEntityAttribute( 'B' );\n        OptionSet optionSet = new OptionSet( );\n        optionSet.addOption( new Option( \"name\", \"code\" ) );\n        trackedEntityAttribute.setOptionSet( optionSet );\n\n        grid.addMetaData( trackedEntityAttribute.getUid(), trackedEntityAttribute );\n\n        List<EventAnalyticsDimensionalItem> objects = new ArrayList<>( );\n        Option t = new Option();\n        t.setCode( \"1\" );\n        t.setName( \"Yes\" );\n\n        Option f = new Option();\n        f.setCode( \"0\" );\n        f.setName( \"No\" );\n\n        objects.add( new EventAnalyticsDimensionalItem( t, deA.getUid() ) );\n        objects.add( new EventAnalyticsDimensionalItem( f, deA.getUid() ) );\n\n        objects.add( new EventAnalyticsDimensionalItem( new Option( \"name\", \"code\" ), trackedEntityAttribute.getUid() ) );\n\n        tableRows.put( deA.getUid(), objects );\n        tableRows.put( trackedEntityAttribute.getDimensionItem(), objects);\n\n        List<Map<String, EventAnalyticsDimensionalItem>> rowPermutations = EventAnalyticsUtils.generateEventDataPermutations( tableRows );\n\n        assertEquals( 9, rowPermutations.size() );\n    }", "signature": "void testGenerateEventDataPermutations()", "full_signature": "@Test public void testGenerateEventDataPermutations()", "class_method_signature": "EventAnalyticsUtilsTest.testGenerateEventDataPermutations()", "testcase": true, "constructor": false, "invocations": ["createDataElement", "setValueType", "addMetaData", "getUid", "createTrackedEntityAttribute", "addOption", "setOptionSet", "addMetaData", "getUid", "setCode", "setName", "setCode", "setName", "add", "getUid", "add", "getUid", "add", "getUid", "put", "getUid", "put", "getDimensionItem", "generateEventDataPermutations", "assertEquals", "size"]}, "focal_class": {"identifier": "EventAnalyticsUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getCombinations", "parameters": "( Map<String, List<EventAnalyticsDimensionalItem>> map,\n        List<Map<String, EventAnalyticsDimensionalItem>> list )", "modifiers": "private static", "return": "void", "signature": "void getCombinations( Map<String, List<EventAnalyticsDimensionalItem>> map,\n        List<Map<String, EventAnalyticsDimensionalItem>> list )", "full_signature": "private static void getCombinations( Map<String, List<EventAnalyticsDimensionalItem>> map,\n        List<Map<String, EventAnalyticsDimensionalItem>> list )", "class_method_signature": "EventAnalyticsUtils.getCombinations( Map<String, List<EventAnalyticsDimensionalItem>> map,\n        List<Map<String, EventAnalyticsDimensionalItem>> list )", "testcase": false, "constructor": false}, {"identifier": "recurse", "parameters": "( Map<String, List<EventAnalyticsDimensionalItem>> map, ListIterator<String> iter,\n        TreeMap<String, EventAnalyticsDimensionalItem> cur, List<Map<String, EventAnalyticsDimensionalItem>> list )", "modifiers": "public static", "return": "void", "signature": "void recurse( Map<String, List<EventAnalyticsDimensionalItem>> map, ListIterator<String> iter,\n        TreeMap<String, EventAnalyticsDimensionalItem> cur, List<Map<String, EventAnalyticsDimensionalItem>> list )", "full_signature": "public static void recurse( Map<String, List<EventAnalyticsDimensionalItem>> map, ListIterator<String> iter,\n        TreeMap<String, EventAnalyticsDimensionalItem> cur, List<Map<String, EventAnalyticsDimensionalItem>> list )", "class_method_signature": "EventAnalyticsUtils.recurse( Map<String, List<EventAnalyticsDimensionalItem>> map, ListIterator<String> iter,\n        TreeMap<String, EventAnalyticsDimensionalItem> cur, List<Map<String, EventAnalyticsDimensionalItem>> list )", "testcase": false, "constructor": false}, {"identifier": "generateEventDataPermutations", "parameters": "(\n        Map<String, List<EventAnalyticsDimensionalItem>> dataOptionMap )", "modifiers": "public static", "return": "List<Map<String, EventAnalyticsDimensionalItem>>", "signature": "List<Map<String, EventAnalyticsDimensionalItem>> generateEventDataPermutations(\n        Map<String, List<EventAnalyticsDimensionalItem>> dataOptionMap )", "full_signature": "public static List<Map<String, EventAnalyticsDimensionalItem>> generateEventDataPermutations(\n        Map<String, List<EventAnalyticsDimensionalItem>> dataOptionMap )", "class_method_signature": "EventAnalyticsUtils.generateEventDataPermutations(\n        Map<String, List<EventAnalyticsDimensionalItem>> dataOptionMap )", "testcase": false, "constructor": false}, {"identifier": "getAggregatedEventDataMapping", "parameters": "( Grid grid )", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> getAggregatedEventDataMapping( Grid grid )", "full_signature": "public static Map<String, Object> getAggregatedEventDataMapping( Grid grid )", "class_method_signature": "EventAnalyticsUtils.getAggregatedEventDataMapping( Grid grid )", "testcase": false, "constructor": false}, {"identifier": "addValues", "parameters": "( List<List<String>> ids, Grid grid, Grid outputGrid )", "modifiers": "public static", "return": "void", "signature": "void addValues( List<List<String>> ids, Grid grid, Grid outputGrid )", "full_signature": "public static void addValues( List<List<String>> ids, Grid grid, Grid outputGrid )", "class_method_signature": "EventAnalyticsUtils.addValues( List<List<String>> ids, Grid grid, Grid outputGrid )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/event/EventAnalyticsUtils.java"}, "focal_method": {"identifier": "generateEventDataPermutations", "parameters": "(\n        Map<String, List<EventAnalyticsDimensionalItem>> dataOptionMap )", "modifiers": "public static", "return": "List<Map<String, EventAnalyticsDimensionalItem>>", "body": "public static List<Map<String, EventAnalyticsDimensionalItem>> generateEventDataPermutations(\n        Map<String, List<EventAnalyticsDimensionalItem>> dataOptionMap )\n    {\n        List<Map<String, EventAnalyticsDimensionalItem>> list = new LinkedList<>();\n        getCombinations( dataOptionMap, list );\n        return list;\n    }", "signature": "List<Map<String, EventAnalyticsDimensionalItem>> generateEventDataPermutations(\n        Map<String, List<EventAnalyticsDimensionalItem>> dataOptionMap )", "full_signature": "public static List<Map<String, EventAnalyticsDimensionalItem>> generateEventDataPermutations(\n        Map<String, List<EventAnalyticsDimensionalItem>> dataOptionMap )", "class_method_signature": "EventAnalyticsUtils.generateEventDataPermutations(\n        Map<String, List<EventAnalyticsDimensionalItem>> dataOptionMap )", "testcase": false, "constructor": false, "invocations": ["getCombinations"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}