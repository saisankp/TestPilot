{"test_class": {"identifier": "ListActivitiCommandTest", "superclass": "extends ActivitiTestCase", "interfaces": "", "fields": [], "file": "activiti/commands/src/test/java/org/activiti/karaf/commands/ListActivitiCommandTest.java"}, "test_case": {"identifier": "testListCommand", "parameters": "()", "modifiers": "@Test @Deployment(resources = {\"diagrams/test-bpm-1.bpmn20.xml\", \"diagrams/test-bpm-2.bpmn20.xml\", \"diagrams/test-bpm-3.bpmn20.xml\"}) public", "return": "void", "body": "@Test\n    @Deployment(resources = {\"diagrams/test-bpm-1.bpmn20.xml\", \"diagrams/test-bpm-2.bpmn20.xml\",\n        \"diagrams/test-bpm-3.bpmn20.xml\"})\n    public void testListCommand() throws Exception {\n        ListActivitiCommand command = new ListActivitiCommand();\n\n        command.setProcessEngine(getProcessEngine());\n        command.setOut(getOut());\n        command.setErr(getErr());\n\n        command.doExecute();\n\n        assertThat(collectStdOutput())\n            .contains(\"[diagrams/test-bpm-2.bpmn20.xml]\")\n            .contains(\"[diagrams/test-bpm-3.bpmn20.xml]\")\n            .contains(\"[diagrams/test-bpm-1.bpmn20.xml]\")\n            .contains(\"[ListActivitiCommandTest.testListCommand]\");\n    }", "signature": "void testListCommand()", "full_signature": "@Test @Deployment(resources = {\"diagrams/test-bpm-1.bpmn20.xml\", \"diagrams/test-bpm-2.bpmn20.xml\", \"diagrams/test-bpm-3.bpmn20.xml\"}) public void testListCommand()", "class_method_signature": "ListActivitiCommandTest.testListCommand()", "testcase": true, "constructor": false, "invocations": ["setProcessEngine", "getProcessEngine", "setOut", "getOut", "setErr", "getErr", "doExecute", "contains", "contains", "contains", "contains", "assertThat", "collectStdOutput"]}, "focal_class": {"identifier": "ListActivitiCommand", "superclass": "extends ActivitiCommand", "interfaces": "", "fields": [{"original_string": "@Option(name = \"-pi\", aliases = \"--active\", description = \"Display information about all active process instances\")\n    private boolean active;", "modifier": "@Option(name = \"-pi\", aliases = \"--active\", description = \"Display information about all active process instances\")\n    private", "type": "boolean", "declarator": "active", "var_name": "active"}, {"original_string": "@Option(name = \"-pd\", aliases = \"--definitions\", description = \"Display information about all process definitions\")\n    private boolean definitions;", "modifier": "@Option(name = \"-pd\", aliases = \"--definitions\", description = \"Display information about all process definitions\")\n    private", "type": "boolean", "declarator": "definitions", "var_name": "definitions"}, {"original_string": "@Option(name = \"-h\", aliases = \"--history\", description = \"Display information about history of all process instances\")\n    private boolean history;", "modifier": "@Option(name = \"-h\", aliases = \"--history\", description = \"Display information about history of all process instances\")\n    private", "type": "boolean", "declarator": "history", "var_name": "history"}, {"original_string": "@Option(name = \"-d\", aliases = \"--deployments\", description = \"Display information about all Activiti deployments\")\n    private boolean deployments;", "modifier": "@Option(name = \"-d\", aliases = \"--deployments\", description = \"Display information about all Activiti deployments\")\n    private", "type": "boolean", "declarator": "deployments", "var_name": "deployments"}], "methods": [{"identifier": "doExecute", "parameters": "()", "modifiers": "@Override protected", "return": "Object", "signature": "Object doExecute()", "full_signature": "@Override protected Object doExecute()", "class_method_signature": "ListActivitiCommand.doExecute()", "testcase": false, "constructor": false}, {"identifier": "formatDate", "parameters": "(Date date)", "modifiers": "private", "return": "String", "signature": "String formatDate(Date date)", "full_signature": "private String formatDate(Date date)", "class_method_signature": "ListActivitiCommand.formatDate(Date date)", "testcase": false, "constructor": false}, {"identifier": "formatBpmResource", "parameters": "(String bpmResource)", "modifiers": "private", "return": "String", "signature": "String formatBpmResource(String bpmResource)", "full_signature": "private String formatBpmResource(String bpmResource)", "class_method_signature": "ListActivitiCommand.formatBpmResource(String bpmResource)", "testcase": false, "constructor": false}, {"identifier": "printDeployments", "parameters": "(PrintWriter out, RepositoryService repo)", "modifiers": "private", "return": "void", "signature": "void printDeployments(PrintWriter out, RepositoryService repo)", "full_signature": "private void printDeployments(PrintWriter out, RepositoryService repo)", "class_method_signature": "ListActivitiCommand.printDeployments(PrintWriter out, RepositoryService repo)", "testcase": false, "constructor": false}, {"identifier": "printProcessDefinitions", "parameters": "(PrintWriter out, RepositoryService repo)", "modifiers": "private", "return": "void", "signature": "void printProcessDefinitions(PrintWriter out, RepositoryService repo)", "full_signature": "private void printProcessDefinitions(PrintWriter out, RepositoryService repo)", "class_method_signature": "ListActivitiCommand.printProcessDefinitions(PrintWriter out, RepositoryService repo)", "testcase": false, "constructor": false}, {"identifier": "getExecutions", "parameters": "(RuntimeService rt, String pi)", "modifiers": "private", "return": "String", "signature": "String getExecutions(RuntimeService rt, String pi)", "full_signature": "private String getExecutions(RuntimeService rt, String pi)", "class_method_signature": "ListActivitiCommand.getExecutions(RuntimeService rt, String pi)", "testcase": false, "constructor": false}, {"identifier": "printActiveProcessInstances", "parameters": "(PrintWriter out, RuntimeService rt)", "modifiers": "private", "return": "void", "signature": "void printActiveProcessInstances(PrintWriter out, RuntimeService rt)", "full_signature": "private void printActiveProcessInstances(PrintWriter out, RuntimeService rt)", "class_method_signature": "ListActivitiCommand.printActiveProcessInstances(PrintWriter out, RuntimeService rt)", "testcase": false, "constructor": false}, {"identifier": "printHistoricProcessInstances", "parameters": "(PrintWriter out, HistoryService his, boolean printActive)", "modifiers": "private", "return": "void", "signature": "void printHistoricProcessInstances(PrintWriter out, HistoryService his, boolean printActive)", "full_signature": "private void printHistoricProcessInstances(PrintWriter out, HistoryService his, boolean printActive)", "class_method_signature": "ListActivitiCommand.printHistoricProcessInstances(PrintWriter out, HistoryService his, boolean printActive)", "testcase": false, "constructor": false}], "file": "activiti/commands/src/main/java/org/activiti/karaf/commands/ListActivitiCommand.java"}, "focal_method": {"identifier": "doExecute", "parameters": "()", "modifiers": "@Override protected", "return": "Object", "body": "@Override\n    protected Object doExecute() throws Exception {\n        ProcessEngine pe = this.getProcessEngine();\n\n        if (pe == null) {\n            out().println(\"Process Engine NOT Found!\");\n            return null;\n        }\n\n        if (!(this.active || this.definitions || this.history || this.deployments)) {\n            // none of them set, display everything \n            // set all to true;\n            this.active = this.definitions = this.history = this.deployments = true;\n        }\n\n        if (this.deployments) {\n            RepositoryService repo = pe.getRepositoryService();\n            printDeployments(out(), repo);\n        }\n\n        if (this.definitions) {\n            RepositoryService repo = pe.getRepositoryService();\n            printProcessDefinitions(out(), repo);\n        }\n\n        if (this.history) {\n            HistoryService his = pe.getHistoryService();\n            boolean printActive = !this.active; // if we show active process, dont print then in history \n            printHistoricProcessInstances(out(), his, printActive);\n        }\n\n        if (this.active) {\n            RuntimeService rt = pe.getRuntimeService();\n            printActiveProcessInstances(out(), rt);\n        }\n\n\n        return null;\n    }", "signature": "Object doExecute()", "full_signature": "@Override protected Object doExecute()", "class_method_signature": "ListActivitiCommand.doExecute()", "testcase": false, "constructor": false, "invocations": ["getProcessEngine", "println", "out", "getRepositoryService", "printDeployments", "out", "getRepositoryService", "printProcessDefinitions", "out", "getHistoryService", "printHistoricProcessInstances", "out", "getRuntimeService", "printActiveProcessInstances", "out"]}, "repository": {"repo_id": 6035195, "url": "https://github.com/axemblr/axemblr-provisionr", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 30, "size": 3329, "license": "licensed"}}