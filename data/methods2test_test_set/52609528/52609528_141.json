{"test_class": {"identifier": "KafkaHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private KafkaProducerRepository repository;", "modifier": "private", "type": "KafkaProducerRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private KafkaMessageSender kafkaMessageSender;", "modifier": "private", "type": "KafkaMessageSender", "declarator": "kafkaMessageSender", "var_name": "kafkaMessageSender"}, {"original_string": "private ConfigurationResourceManager configurationResourceManager;", "modifier": "private", "type": "ConfigurationResourceManager", "declarator": "configurationResourceManager", "var_name": "configurationResourceManager"}, {"original_string": "private KafkaHandler handler;", "modifier": "private", "type": "KafkaHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "private MockResourceStorage storage;", "modifier": "private", "type": "MockResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final String configResourceUri = \"/kafka/topicsConfig\";", "modifier": "private final", "type": "String", "declarator": "configResourceUri = \"/kafka/topicsConfig\"", "var_name": "configResourceUri"}, {"original_string": "private final String streamingPath = \"/kafka/streaming/\";", "modifier": "private final", "type": "String", "declarator": "streamingPath = \"/kafka/streaming/\"", "var_name": "streamingPath"}, {"original_string": "private final String CONFIG_RESOURCE = ResourcesUtils.loadResource(\"testresource_valid_kafka_topic_configuration\", true);", "modifier": "private final", "type": "String", "declarator": "CONFIG_RESOURCE = ResourcesUtils.loadResource(\"testresource_valid_kafka_topic_configuration\", true)", "var_name": "CONFIG_RESOURCE"}, {"original_string": "private final String CONFIG_WILDCARD_RESOURCE = ResourcesUtils.loadResource(\"testresource_wildcard_kafka_topic_configuration\", true);", "modifier": "private final", "type": "String", "declarator": "CONFIG_WILDCARD_RESOURCE = ResourcesUtils.loadResource(\"testresource_wildcard_kafka_topic_configuration\", true)", "var_name": "CONFIG_WILDCARD_RESOURCE"}], "file": "gateleen-kafka/src/test/java/org/swisspush/gateleen/kafka/KafkaHandlerTest.java"}, "test_case": {"identifier": "resourceRemovedTriggersCloseAllProducers", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void resourceRemovedTriggersCloseAllProducers(TestContext context){\n        Async async = context.async();\n        handler.initialize().setHandler(event -> {\n            JsonObject object = new JsonObject();\n            object.put(\"requestUri\", configResourceUri);\n            object.put(\"type\", \"remove\");\n            vertx.eventBus().publish(CONFIG_RESOURCE_CHANGED_ADDRESS, object);\n            verify(repository, timeout(100).times(1)).closeAll();\n            verifyZeroInteractions(kafkaMessageSender);\n            async.complete();\n        });\n    }", "signature": "void resourceRemovedTriggersCloseAllProducers(TestContext context)", "full_signature": "@Test public void resourceRemovedTriggersCloseAllProducers(TestContext context)", "class_method_signature": "KafkaHandlerTest.resourceRemovedTriggersCloseAllProducers(TestContext context)", "testcase": true, "constructor": false, "invocations": ["async", "setHandler", "initialize", "put", "put", "publish", "eventBus", "closeAll", "verify", "times", "timeout", "verifyZeroInteractions", "complete"]}, "focal_class": {"identifier": "KafkaHandler", "superclass": "extends ConfigurationResourceConsumer", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(KafkaHandler.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(KafkaHandler.class)", "var_name": "log"}, {"original_string": "private final String streamingPath;", "modifier": "private final", "type": "String", "declarator": "streamingPath", "var_name": "streamingPath"}, {"original_string": "private final KafkaProducerRepository repository;", "modifier": "private final", "type": "KafkaProducerRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private final KafkaTopicExtractor topicExtractor;", "modifier": "private final", "type": "KafkaTopicExtractor", "declarator": "topicExtractor", "var_name": "topicExtractor"}, {"original_string": "private final KafkaMessageSender kafkaMessageSender;", "modifier": "private final", "type": "KafkaMessageSender", "declarator": "kafkaMessageSender", "var_name": "kafkaMessageSender"}, {"original_string": "private final Map<String, Object> properties;", "modifier": "private final", "type": "Map<String, Object>", "declarator": "properties", "var_name": "properties"}, {"original_string": "private boolean initialized = false;", "modifier": "private", "type": "boolean", "declarator": "initialized = false", "var_name": "initialized"}], "methods": [{"identifier": "KafkaHandler", "parameters": "(ConfigurationResourceManager configurationResourceManager, KafkaProducerRepository repository,\n                        KafkaMessageSender kafkaMessageSender, String configResourceUri, String streamingPath)", "modifiers": "public", "return": "", "signature": " KafkaHandler(ConfigurationResourceManager configurationResourceManager, KafkaProducerRepository repository,\n                        KafkaMessageSender kafkaMessageSender, String configResourceUri, String streamingPath)", "full_signature": "public  KafkaHandler(ConfigurationResourceManager configurationResourceManager, KafkaProducerRepository repository,\n                        KafkaMessageSender kafkaMessageSender, String configResourceUri, String streamingPath)", "class_method_signature": "KafkaHandler.KafkaHandler(ConfigurationResourceManager configurationResourceManager, KafkaProducerRepository repository,\n                        KafkaMessageSender kafkaMessageSender, String configResourceUri, String streamingPath)", "testcase": false, "constructor": true}, {"identifier": "KafkaHandler", "parameters": "(ConfigurationResourceManager configurationResourceManager, KafkaProducerRepository repository,\n    KafkaMessageSender kafkaMessageSender, String configResourceUri, String streamingPath, Map<String, Object> properties)", "modifiers": "public", "return": "", "signature": " KafkaHandler(ConfigurationResourceManager configurationResourceManager, KafkaProducerRepository repository,\n    KafkaMessageSender kafkaMessageSender, String configResourceUri, String streamingPath, Map<String, Object> properties)", "full_signature": "public  KafkaHandler(ConfigurationResourceManager configurationResourceManager, KafkaProducerRepository repository,\n    KafkaMessageSender kafkaMessageSender, String configResourceUri, String streamingPath, Map<String, Object> properties)", "class_method_signature": "KafkaHandler.KafkaHandler(ConfigurationResourceManager configurationResourceManager, KafkaProducerRepository repository,\n    KafkaMessageSender kafkaMessageSender, String configResourceUri, String streamingPath, Map<String, Object> properties)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "public", "return": "Future<Void>", "signature": "Future<Void> initialize()", "full_signature": "public Future<Void> initialize()", "class_method_signature": "KafkaHandler.initialize()", "testcase": false, "constructor": false}, {"identifier": "isInitialized", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInitialized()", "full_signature": "public boolean isInitialized()", "class_method_signature": "KafkaHandler.isInitialized()", "testcase": false, "constructor": false}, {"identifier": "initializeKafkaConfiguration", "parameters": "(Buffer configuration)", "modifiers": "private", "return": "Future<Void>", "signature": "Future<Void> initializeKafkaConfiguration(Buffer configuration)", "full_signature": "private Future<Void> initializeKafkaConfiguration(Buffer configuration)", "class_method_signature": "KafkaHandler.initializeKafkaConfiguration(Buffer configuration)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(final HttpServerRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean handle(final HttpServerRequest request)", "full_signature": "public boolean handle(final HttpServerRequest request)", "class_method_signature": "KafkaHandler.handle(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "resourceChanged", "parameters": "(String resourceUri, Buffer resource)", "modifiers": "@Override public", "return": "void", "signature": "void resourceChanged(String resourceUri, Buffer resource)", "full_signature": "@Override public void resourceChanged(String resourceUri, Buffer resource)", "class_method_signature": "KafkaHandler.resourceChanged(String resourceUri, Buffer resource)", "testcase": false, "constructor": false}, {"identifier": "resourceRemoved", "parameters": "(String resourceUri)", "modifiers": "@Override public", "return": "void", "signature": "void resourceRemoved(String resourceUri)", "full_signature": "@Override public void resourceRemoved(String resourceUri)", "class_method_signature": "KafkaHandler.resourceRemoved(String resourceUri)", "testcase": false, "constructor": false}, {"identifier": "respondWith", "parameters": "(StatusCode statusCode, String responseMessage, HttpServerRequest request)", "modifiers": "private", "return": "void", "signature": "void respondWith(StatusCode statusCode, String responseMessage, HttpServerRequest request)", "full_signature": "private void respondWith(StatusCode statusCode, String responseMessage, HttpServerRequest request)", "class_method_signature": "KafkaHandler.respondWith(StatusCode statusCode, String responseMessage, HttpServerRequest request)", "testcase": false, "constructor": false}], "file": "gateleen-kafka/src/main/java/org/swisspush/gateleen/kafka/KafkaHandler.java"}, "focal_method": {"identifier": "initialize", "parameters": "()", "modifiers": "public", "return": "Future<Void>", "body": "public Future<Void> initialize() {\n        Future<Void> future = Future.future();\n        configurationResourceManager().getRegisteredResource(configResourceUri()).setHandler(event -> {\n            if (event.succeeded() && event.result().isPresent()) {\n                initializeKafkaConfiguration(event.result().get()).setHandler(event1 -> future.complete());\n            } else {\n                log.warn(\"No kafka configuration resource with uri '{}' found. Unable to setup kafka configuration correctly\", configResourceUri());\n                future.complete();\n            }\n        });\n        return future;\n    }", "signature": "Future<Void> initialize()", "full_signature": "public Future<Void> initialize()", "class_method_signature": "KafkaHandler.initialize()", "testcase": false, "constructor": false, "invocations": ["future", "setHandler", "getRegisteredResource", "configurationResourceManager", "configResourceUri", "succeeded", "isPresent", "result", "setHandler", "initializeKafkaConfiguration", "get", "result", "complete", "warn", "configResourceUri", "complete"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}