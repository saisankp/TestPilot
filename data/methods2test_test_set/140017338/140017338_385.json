{"test_class": {"identifier": "CsvAnalyzerTest", "superclass": "extends AntennaTestWithMockedContext", "interfaces": "", "fields": [{"original_string": "private IProject project;", "modifier": "private", "type": "IProject", "declarator": "project", "var_name": "project"}, {"original_string": "private CsvAnalyzer analyzer;", "modifier": "private", "type": "CsvAnalyzer", "declarator": "analyzer", "var_name": "analyzer"}, {"original_string": "private License license1, license2;", "modifier": "private", "type": "License", "declarator": "license1", "var_name": "license1"}], "file": "core/core-workflow-steps/src/test/java/org/eclipse/sw360/antenna/workflow/analyzers/CsvAnalyzerTest.java"}, "test_case": {"identifier": "testCsvAnalyzer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCsvAnalyzer() throws URISyntaxException {\n        configureAnalyzer(\"dependencies.csv\", \",\");\n\n        Set<Artifact> artifacts = analyzer.yield().getArtifacts();\n\n        assertThat(artifacts).hasSize(7);\n\n        Collection<String> typesToTest = new ArrayList<>();\n        typesToTest.add(Coordinate.Types.MAVEN);\n        typesToTest.add(Coordinate.Types.P2);\n        typesToTest.add(Coordinate.Types.NPM);\n        typesToTest.add(Coordinate.Types.NUGET);\n        typesToTest.add(Coordinate.Types.GENERIC);\n\n        assertThat(typesToTest.stream()\n                .filter(type -> artifacts.stream().anyMatch(\n                        artifact -> artifact.getCoordinateForType(type).isPresent()\n                )).count())\n                .isEqualTo(typesToTest.size());\n    }", "signature": "void testCsvAnalyzer()", "full_signature": "@Test public void testCsvAnalyzer()", "class_method_signature": "CsvAnalyzerTest.testCsvAnalyzer()", "testcase": true, "constructor": false, "invocations": ["configureAnalyzer", "getArtifacts", "yield", "hasSize", "assertThat", "add", "add", "add", "add", "add", "isEqualTo", "assertThat", "count", "filter", "stream", "anyMatch", "stream", "isPresent", "getCoordinateForType", "size"]}, "focal_class": {"identifier": "CsvAnalyzer", "superclass": "extends ManualAnalyzer", "interfaces": "", "fields": [{"original_string": "private static final String DELIMITER = \"delimiter\";", "modifier": "private static final", "type": "String", "declarator": "DELIMITER = \"delimiter\"", "var_name": "DELIMITER"}, {"original_string": "private Character rowDelimiter = ',';", "modifier": "private", "type": "Character", "declarator": "rowDelimiter = ','", "var_name": "rowDelimiter"}], "methods": [{"identifier": "CsvAnalyzer", "parameters": "()", "modifiers": "public", "return": "", "signature": " CsvAnalyzer()", "full_signature": "public  CsvAnalyzer()", "class_method_signature": "CsvAnalyzer.CsvAnalyzer()", "testcase": false, "constructor": true}, {"identifier": "yield", "parameters": "()", "modifiers": "@Override public", "return": "WorkflowStepResult", "signature": "WorkflowStepResult yield()", "full_signature": "@Override public WorkflowStepResult yield()", "class_method_signature": "CsvAnalyzer.yield()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Map<String, String> configMap)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Map<String, String> configMap)", "full_signature": "@Override public void configure(Map<String, String> configMap)", "class_method_signature": "CsvAnalyzer.configure(Map<String, String> configMap)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "CsvAnalyzer.getName()", "testcase": false, "constructor": false}], "file": "core/core-workflow-steps/src/main/java/org/eclipse/sw360/antenna/workflow/analyzers/CsvAnalyzer.java"}, "focal_method": {"identifier": "CsvAnalyzer", "parameters": "()", "modifiers": "public", "return": "", "body": "public CsvAnalyzer() {\n        this.workflowStepOrder = 500;\n    }", "signature": " CsvAnalyzer()", "full_signature": "public  CsvAnalyzer()", "class_method_signature": "CsvAnalyzer.CsvAnalyzer()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}