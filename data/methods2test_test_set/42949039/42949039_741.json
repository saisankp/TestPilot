{"test_class": {"identifier": "CredStashHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@Mock\n    private AwsHelper awsHelper;", "modifier": "@Mock\n    private", "type": "AwsHelper", "declarator": "awsHelper", "var_name": "awsHelper"}, {"original_string": "@Mock\n    private ConfigurationHelper configurationHelper;", "modifier": "@Mock\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Mock\n    private CredStashFactory credStashFactory;", "modifier": "@Mock\n    private", "type": "CredStashFactory", "declarator": "credStashFactory", "var_name": "credStashFactory"}, {"original_string": "@InjectMocks\n    private CredStashHelper credStashHelper;", "modifier": "@InjectMocks\n    private", "type": "CredStashHelper", "declarator": "credStashHelper", "var_name": "credStashHelper"}, {"original_string": "@Mock\n    private JsonHelper jsonHelper;", "modifier": "@Mock\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}], "file": "herd-code/herd-dao/src/test/java/org/finra/herd/dao/helper/CredStashHelperTest.java"}, "test_case": {"identifier": "testGetCredentialFromCredStash", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCredentialFromCredStash() throws Exception\n    {\n        // Build AWS parameters.\n        AwsParamsDto awsParamsDto =\n            new AwsParamsDto(NO_AWS_ACCESS_KEY, NO_AWS_SECRET_KEY, NO_SESSION_TOKEN, HTTP_PROXY_HOST, HTTP_PROXY_PORT, NO_AWS_REGION_NAME);\n\n        // Build AWS client configuration.\n        ClientConfiguration clientConfiguration = new ClientConfiguration();\n\n        // Create CredStash encryption context map.\n        Map<String, String> credStashEncryptionContextMap = new HashMap<>();\n        credStashEncryptionContextMap.put(KEY, VALUE);\n\n        // Mock the CredStash.\n        CredStash credStash = mock(CredStash.class);\n        when(credStash.getCredential(USER_CREDENTIAL_NAME, credStashEncryptionContextMap)).thenReturn(PASSWORD);\n\n        // Mock the external calls.\n        when(configurationHelper.getProperty(ConfigurationValue.CREDSTASH_AWS_REGION_NAME)).thenReturn(AWS_REGION_NAME);\n        when(configurationHelper.getProperty(ConfigurationValue.CREDSTASH_TABLE_NAME)).thenReturn(TABLE_NAME);\n        when(awsHelper.getAwsParamsDto()).thenReturn(awsParamsDto);\n        when(awsHelper.getClientConfiguration(awsParamsDto)).thenReturn(clientConfiguration);\n        when(credStashFactory.getCredStash(AWS_REGION_NAME, TABLE_NAME, clientConfiguration)).thenReturn(credStash);\n        when(jsonHelper.unmarshallJsonToObject(Map.class, CREDSTASH_ENCRYPTION_CONTEXT)).thenReturn(credStashEncryptionContextMap);\n\n        // Call the method under test.\n        String result = credStashHelper.getCredentialFromCredStash(CREDSTASH_ENCRYPTION_CONTEXT, USER_CREDENTIAL_NAME);\n\n        // Verify the external calls.\n        verify(configurationHelper).getProperty(ConfigurationValue.CREDSTASH_AWS_REGION_NAME);\n        verify(configurationHelper).getProperty(ConfigurationValue.CREDSTASH_TABLE_NAME);\n        verify(awsHelper).getAwsParamsDto();\n        verify(awsHelper).getClientConfiguration(awsParamsDto);\n        verify(credStashFactory).getCredStash(AWS_REGION_NAME, TABLE_NAME, clientConfiguration);\n        verify(jsonHelper).unmarshallJsonToObject(Map.class, CREDSTASH_ENCRYPTION_CONTEXT);\n        verify(credStash).getCredential(USER_CREDENTIAL_NAME, credStashEncryptionContextMap);\n        verifyNoMoreInteractions(credStash);\n        verifyNoMoreInteractionsHelper();\n\n        // Validate the results.\n        assertEquals(PASSWORD, result);\n    }", "signature": "void testGetCredentialFromCredStash()", "full_signature": "@Test public void testGetCredentialFromCredStash()", "class_method_signature": "CredStashHelperTest.testGetCredentialFromCredStash()", "testcase": true, "constructor": false, "invocations": ["put", "mock", "thenReturn", "when", "getCredential", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "thenReturn", "when", "getAwsParamsDto", "thenReturn", "when", "getClientConfiguration", "thenReturn", "when", "getCredStash", "thenReturn", "when", "unmarshallJsonToObject", "getCredentialFromCredStash", "getProperty", "verify", "getProperty", "verify", "getAwsParamsDto", "verify", "getClientConfiguration", "verify", "getCredStash", "verify", "unmarshallJsonToObject", "verify", "getCredential", "verify", "verifyNoMoreInteractions", "verifyNoMoreInteractionsHelper", "assertEquals"]}, "focal_class": {"identifier": "CredStashHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CredStashHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CredStashHelper.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private AwsHelper awsHelper;", "modifier": "@Autowired\n    private", "type": "AwsHelper", "declarator": "awsHelper", "var_name": "awsHelper"}, {"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private CredStashFactory credStashFactory;", "modifier": "@Autowired\n    private", "type": "CredStashFactory", "declarator": "credStashFactory", "var_name": "credStashFactory"}, {"original_string": "@Autowired\n    private JsonHelper jsonHelper;", "modifier": "@Autowired\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}], "methods": [{"identifier": "getCredentialFromCredStash", "parameters": "(String credStashEncryptionContext, String credentialName)", "modifiers": "@Retryable(maxAttempts = 3, value = CredStashGetCredentialFailedException.class, backoff = @Backoff(delay = 5000, multiplier = 2)) @Cacheable(DaoSpringModuleConfig.HERD_CACHE_NAME) public", "return": "String", "signature": "String getCredentialFromCredStash(String credStashEncryptionContext, String credentialName)", "full_signature": "@Retryable(maxAttempts = 3, value = CredStashGetCredentialFailedException.class, backoff = @Backoff(delay = 5000, multiplier = 2)) @Cacheable(DaoSpringModuleConfig.HERD_CACHE_NAME) public String getCredentialFromCredStash(String credStashEncryptionContext, String credentialName)", "class_method_signature": "CredStashHelper.getCredentialFromCredStash(String credStashEncryptionContext, String credentialName)", "testcase": false, "constructor": false}], "file": "herd-code/herd-dao/src/main/java/org/finra/herd/dao/helper/CredStashHelper.java"}, "focal_method": {"identifier": "getCredentialFromCredStash", "parameters": "(String credStashEncryptionContext, String credentialName)", "modifiers": "@Retryable(maxAttempts = 3, value = CredStashGetCredentialFailedException.class, backoff = @Backoff(delay = 5000, multiplier = 2)) @Cacheable(DaoSpringModuleConfig.HERD_CACHE_NAME) public", "return": "String", "body": "@Retryable(maxAttempts = 3, value = CredStashGetCredentialFailedException.class, backoff = @Backoff(delay = 5000, multiplier = 2))\n    @Cacheable(DaoSpringModuleConfig.HERD_CACHE_NAME)\n    public String getCredentialFromCredStash(String credStashEncryptionContext, String credentialName) throws CredStashGetCredentialFailedException\n    {\n        // Get AWS region and table name for the credstash.\n        String credStashAwsRegion = configurationHelper.getProperty(ConfigurationValue.CREDSTASH_AWS_REGION_NAME);\n        String credStashTableName = configurationHelper.getProperty(ConfigurationValue.CREDSTASH_TABLE_NAME);\n\n        // Log configuration values and input parameters.\n        LOGGER.info(\"credStashAwsRegion={} credStashTableName={} credStashEncryptionContext={} credentialName={}\", credStashAwsRegion, credStashTableName,\n            credStashEncryptionContext, credentialName);\n\n        // Get the AWS client configuration.\n        ClientConfiguration clientConfiguration = awsHelper.getClientConfiguration(awsHelper.getAwsParamsDto());\n\n        // Get the credstash interface for getting a credential from credstash.\n        CredStash credstash = credStashFactory.getCredStash(credStashAwsRegion, credStashTableName, clientConfiguration);\n\n        // Try to obtain the credential from credstash.\n        String password = null;\n        String errorMessage = null;\n        try\n        {\n            // Convert the JSON config file version of the encryption context to a Java Map class.\n            @SuppressWarnings(\"unchecked\")\n            Map<String, String> credstashEncryptionContextMap = jsonHelper.unmarshallJsonToObject(Map.class, credStashEncryptionContext);\n            // Get password value from the credstash.\n            password = credstash.getCredential(credentialName, credstashEncryptionContextMap);\n        }\n        catch (Exception exception)\n        {\n            LOGGER.error(\"Caught exception when attempting to get a credential value from CredStash.\", exception);\n            errorMessage = exception.getMessage();\n        }\n\n        // If password value is empty and could not be obtained as credential from the credstash, then throw a CredStashGetCredentialFailedException.\n        if (StringUtils.isEmpty(password))\n        {\n            throw new CredStashGetCredentialFailedException(String.format(\"Failed to obtain credential from credstash.%s \" +\n                    \"credStashAwsRegion=%s credStashTableName=%s credStashEncryptionContext=%s credentialName=%s\",\n                StringUtils.isNotBlank(errorMessage) ? \" Reason: \" + errorMessage : \"\", credStashAwsRegion, credStashTableName, credStashEncryptionContext,\n                credentialName));\n        }\n\n        // Return the retrieved password value.\n        return password;\n    }", "signature": "String getCredentialFromCredStash(String credStashEncryptionContext, String credentialName)", "full_signature": "@Retryable(maxAttempts = 3, value = CredStashGetCredentialFailedException.class, backoff = @Backoff(delay = 5000, multiplier = 2)) @Cacheable(DaoSpringModuleConfig.HERD_CACHE_NAME) public String getCredentialFromCredStash(String credStashEncryptionContext, String credentialName)", "class_method_signature": "CredStashHelper.getCredentialFromCredStash(String credStashEncryptionContext, String credentialName)", "testcase": false, "constructor": false, "invocations": ["getProperty", "getProperty", "info", "getClientConfiguration", "getAwsParamsDto", "getCredStash", "unmarshallJsonToObject", "getCredential", "error", "getMessage", "isEmpty", "format", "isNotBlank"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}