{"test_class": {"identifier": "HandleIdentifierProviderTest", "superclass": "extends AbstractDSpaceTest", "interfaces": "", "fields": [{"original_string": "private static final String BEAN_NAME = \"test-HandleIdentifierProvider\";", "modifier": "private static final", "type": "String", "declarator": "BEAN_NAME = \"test-HandleIdentifierProvider\"", "var_name": "BEAN_NAME"}, {"original_string": "private static AnnotationConfigApplicationContext applicationContext;", "modifier": "private static", "type": "AnnotationConfigApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}], "file": "dspace-api/src/test/java/org/dspace/identifier/HandleIdentifierProviderTest.java"}, "test_case": {"identifier": "testSupports_String", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSupports_String()\n    {\n        System.out.println(\"supports(String)\");\n\n        DSpaceServicesFactory.getInstance().getConfigurationService().setProperty(\"handle.prefix\", \"123456789\");\n        DSpaceServicesFactory.getInstance().getConfigurationService().setProperty(\"handle.additional.prefixes\", \"123456789.1,123456789.2\");\n        \n        // We have to get Spring to instantiate the provider as a Bean, because\n        // the bean class has autowired fields.\n        HandleIdentifierProvider instance = new HandleIdentifierProvider();\n        applicationContext.getAutowireCapableBeanFactory().autowireBeanProperties(\n                instance, AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true);\n\n        // Load the test cases\n        Properties forms = new Properties();\n        try {\n            forms.load(this.getClass().getResourceAsStream(\"handle-forms.properties\"));\n        } catch (IOException e) {\n            System.err.format(\"Could not load handle-forms.properties:  %s%n\", e.getMessage());\n            return;\n        }\n\n        // Test each case\n        for (Map.Entry<Object, Object> entry : forms.entrySet())\n        {\n            String identifier = (String)entry.getKey();\n            boolean expResult = Boolean.parseBoolean((String)entry.getValue());\n            boolean result = instance.supports(identifier);\n            String message = expResult ?\n                    \"This provider should support \" + identifier :\n                    \"This provider should not support \" + identifier;\n            assertEquals(message, expResult, result);\n        }\n    }", "signature": "void testSupports_String()", "full_signature": "@Test public void testSupports_String()", "class_method_signature": "HandleIdentifierProviderTest.testSupports_String()", "testcase": true, "constructor": false, "invocations": ["println", "setProperty", "getConfigurationService", "getInstance", "setProperty", "getConfigurationService", "getInstance", "autowireBeanProperties", "getAutowireCapableBeanFactory", "load", "getResourceAsStream", "getClass", "format", "getMessage", "entrySet", "getKey", "parseBoolean", "getValue", "supports", "assertEquals"]}, "focal_class": {"identifier": "HandleIdentifierProvider", "superclass": "extends IdentifierProvider", "interfaces": "", "fields": [{"original_string": "private static Logger log = Logger.getLogger(HandleIdentifierProvider.class);", "modifier": "private static", "type": "Logger", "declarator": "log = Logger.getLogger(HandleIdentifierProvider.class)", "var_name": "log"}, {"original_string": "protected static final String EXAMPLE_PREFIX = \"123456789\";", "modifier": "protected static final", "type": "String", "declarator": "EXAMPLE_PREFIX = \"123456789\"", "var_name": "EXAMPLE_PREFIX"}, {"original_string": "@Autowired(required = true)\n    protected HandleService handleService;", "modifier": "@Autowired(required = true)\n    protected", "type": "HandleService", "declarator": "handleService", "var_name": "handleService"}, {"original_string": "@Autowired(required = true)\n    protected ItemService itemService;", "modifier": "@Autowired(required = true)\n    protected", "type": "ItemService", "declarator": "itemService", "var_name": "itemService"}], "methods": [{"identifier": "supports", "parameters": "(Class<? extends Identifier> identifier)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supports(Class<? extends Identifier> identifier)", "full_signature": "@Override public boolean supports(Class<? extends Identifier> identifier)", "class_method_signature": "HandleIdentifierProvider.supports(Class<? extends Identifier> identifier)", "testcase": false, "constructor": false}, {"identifier": "supports", "parameters": "(String identifier)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supports(String identifier)", "full_signature": "@Override public boolean supports(String identifier)", "class_method_signature": "HandleIdentifierProvider.supports(String identifier)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Context context, DSpaceObject dso)", "modifiers": "@Override public", "return": "String", "signature": "String register(Context context, DSpaceObject dso)", "full_signature": "@Override public String register(Context context, DSpaceObject dso)", "class_method_signature": "HandleIdentifierProvider.register(Context context, DSpaceObject dso)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Context context, DSpaceObject dso, String identifier)", "modifiers": "@Override public", "return": "void", "signature": "void register(Context context, DSpaceObject dso, String identifier)", "full_signature": "@Override public void register(Context context, DSpaceObject dso, String identifier)", "class_method_signature": "HandleIdentifierProvider.register(Context context, DSpaceObject dso, String identifier)", "testcase": false, "constructor": false}, {"identifier": "reserve", "parameters": "(Context context, DSpaceObject dso, String identifier)", "modifiers": "@Override public", "return": "void", "signature": "void reserve(Context context, DSpaceObject dso, String identifier)", "full_signature": "@Override public void reserve(Context context, DSpaceObject dso, String identifier)", "class_method_signature": "HandleIdentifierProvider.reserve(Context context, DSpaceObject dso, String identifier)", "testcase": false, "constructor": false}, {"identifier": "mint", "parameters": "(Context context, DSpaceObject dso)", "modifiers": "@Override public", "return": "String", "signature": "String mint(Context context, DSpaceObject dso)", "full_signature": "@Override public String mint(Context context, DSpaceObject dso)", "class_method_signature": "HandleIdentifierProvider.mint(Context context, DSpaceObject dso)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(Context context, String identifier, String... attributes)", "modifiers": "@Override public", "return": "DSpaceObject", "signature": "DSpaceObject resolve(Context context, String identifier, String... attributes)", "full_signature": "@Override public DSpaceObject resolve(Context context, String identifier, String... attributes)", "class_method_signature": "HandleIdentifierProvider.resolve(Context context, String identifier, String... attributes)", "testcase": false, "constructor": false}, {"identifier": "lookup", "parameters": "(Context context, DSpaceObject dso)", "modifiers": "@Override public", "return": "String", "signature": "String lookup(Context context, DSpaceObject dso)", "full_signature": "@Override public String lookup(Context context, DSpaceObject dso)", "class_method_signature": "HandleIdentifierProvider.lookup(Context context, DSpaceObject dso)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Context context, DSpaceObject dso, String identifier)", "modifiers": "@Override public", "return": "void", "signature": "void delete(Context context, DSpaceObject dso, String identifier)", "full_signature": "@Override public void delete(Context context, DSpaceObject dso, String identifier)", "class_method_signature": "HandleIdentifierProvider.delete(Context context, DSpaceObject dso, String identifier)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Context context, DSpaceObject dso)", "modifiers": "@Override public", "return": "void", "signature": "void delete(Context context, DSpaceObject dso)", "full_signature": "@Override public void delete(Context context, DSpaceObject dso)", "class_method_signature": "HandleIdentifierProvider.delete(Context context, DSpaceObject dso)", "testcase": false, "constructor": false}, {"identifier": "retrieveHandleOutOfUrl", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String retrieveHandleOutOfUrl(String url)", "full_signature": "public static String retrieveHandleOutOfUrl(String url)", "class_method_signature": "HandleIdentifierProvider.retrieveHandleOutOfUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "getPrefix", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getPrefix()", "full_signature": "public static String getPrefix()", "class_method_signature": "HandleIdentifierProvider.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "populateHandleMetadata", "parameters": "(Context context, Item item, String handle)", "modifiers": "protected", "return": "void", "signature": "void populateHandleMetadata(Context context, Item item, String handle)", "full_signature": "protected void populateHandleMetadata(Context context, Item item, String handle)", "class_method_signature": "HandleIdentifierProvider.populateHandleMetadata(Context context, Item item, String handle)", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/identifier/HandleIdentifierProvider.java"}, "focal_method": {"identifier": "supports", "parameters": "(Class<? extends Identifier> identifier)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean supports(Class<? extends Identifier> identifier) {\n        return Handle.class.isAssignableFrom(identifier);\n    }", "signature": "boolean supports(Class<? extends Identifier> identifier)", "full_signature": "@Override public boolean supports(Class<? extends Identifier> identifier)", "class_method_signature": "HandleIdentifierProvider.supports(Class<? extends Identifier> identifier)", "testcase": false, "constructor": false, "invocations": ["isAssignableFrom"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}