{"test_class": {"identifier": "DMNFeelExpressionEvaluatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DMNFeelExpressionEvaluator expressionEvaluator = new DMNFeelExpressionEvaluator(this.getClass().getClassLoader());", "modifier": "", "type": "DMNFeelExpressionEvaluator", "declarator": "expressionEvaluator = new DMNFeelExpressionEvaluator(this.getClass().getClassLoader())", "var_name": "expressionEvaluator"}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java"}, "test_case": {"identifier": "listenerTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void listenerTest() {\n        FEELEvent syntaxErrorEvent = new SyntaxErrorEvent(Severity.ERROR, \"test\", null, 0, 0, null);\n        FEELEvent genericError = new FEELEventBase(Severity.ERROR, \"error\", null);\n        FEELEvent notError = new FEELEventBase(Severity.INFO, \"info\", null);\n\n        AtomicReference<FEELEvent> error = new AtomicReference<>();\n        FEEL feel = expressionEvaluator.newFeelEvaluator(error);\n\n        // Only a single error of type syntax\n        applyEvents(Collections.singletonList(syntaxErrorEvent), feel);\n        assertEquals(syntaxErrorEvent, error.get());\n\n        error.set(null);\n\n        // Syntax error as second\n        applyEvents(Arrays.asList(genericError, syntaxErrorEvent), feel);\n        assertEquals(syntaxErrorEvent, error.get());\n\n        error.set(null);\n\n        // Syntax error as first\n        applyEvents(Arrays.asList(syntaxErrorEvent, genericError), feel);\n        assertEquals(syntaxErrorEvent, error.get());\n\n        error.set(null);\n\n        // Not error\n        applyEvents(Collections.singletonList(notError), feel);\n        assertNull(error.get());\n    }", "signature": "void listenerTest()", "full_signature": "@Test public void listenerTest()", "class_method_signature": "DMNFeelExpressionEvaluatorTest.listenerTest()", "testcase": true, "constructor": false, "invocations": ["newFeelEvaluator", "applyEvents", "singletonList", "assertEquals", "get", "set", "applyEvents", "asList", "assertEquals", "get", "set", "applyEvents", "asList", "assertEquals", "get", "set", "applyEvents", "singletonList", "assertNull", "get"]}, "focal_class": {"identifier": "DMNFeelExpressionEvaluator", "superclass": "extends AbstractExpressionEvaluator", "interfaces": "", "fields": [{"original_string": "private final ClassLoader classLoader;", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}, {"original_string": "private final CodeFunction codeFunction = new CodeFunction();", "modifier": "private final", "type": "CodeFunction", "declarator": "codeFunction = new CodeFunction()", "var_name": "codeFunction"}], "methods": [{"identifier": "DMNFeelExpressionEvaluator", "parameters": "(ClassLoader classLoader)", "modifiers": "public", "return": "", "signature": " DMNFeelExpressionEvaluator(ClassLoader classLoader)", "full_signature": "public  DMNFeelExpressionEvaluator(ClassLoader classLoader)", "class_method_signature": "DMNFeelExpressionEvaluator.DMNFeelExpressionEvaluator(ClassLoader classLoader)", "testcase": false, "constructor": true}, {"identifier": "fromObjectToExpression", "parameters": "(Object value)", "modifiers": "@Override public", "return": "String", "signature": "String fromObjectToExpression(Object value)", "full_signature": "@Override public String fromObjectToExpression(Object value)", "class_method_signature": "DMNFeelExpressionEvaluator.fromObjectToExpression(Object value)", "testcase": false, "constructor": false}, {"identifier": "newEvaluationContext", "parameters": "()", "modifiers": "protected", "return": "EvaluationContext", "signature": "EvaluationContext newEvaluationContext()", "full_signature": "protected EvaluationContext newEvaluationContext()", "class_method_signature": "DMNFeelExpressionEvaluator.newEvaluationContext()", "testcase": false, "constructor": false}, {"identifier": "newFeelEvaluator", "parameters": "(AtomicReference<FEELEvent> errorHolder)", "modifiers": "protected", "return": "FEEL", "signature": "FEEL newFeelEvaluator(AtomicReference<FEELEvent> errorHolder)", "full_signature": "protected FEEL newFeelEvaluator(AtomicReference<FEELEvent> errorHolder)", "class_method_signature": "DMNFeelExpressionEvaluator.newFeelEvaluator(AtomicReference<FEELEvent> errorHolder)", "testcase": false, "constructor": false}, {"identifier": "internalLiteralEvaluation", "parameters": "(String raw, String className)", "modifiers": "@Override protected", "return": "Object", "signature": "Object internalLiteralEvaluation(String raw, String className)", "full_signature": "@Override protected Object internalLiteralEvaluation(String raw, String className)", "class_method_signature": "DMNFeelExpressionEvaluator.internalLiteralEvaluation(String raw, String className)", "testcase": false, "constructor": false}, {"identifier": "internalUnaryEvaluation", "parameters": "(String rawExpression, Object resultValue, Class<?> resultClass, boolean skipEmptyString)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean internalUnaryEvaluation(String rawExpression, Object resultValue, Class<?> resultClass, boolean skipEmptyString)", "full_signature": "@Override protected boolean internalUnaryEvaluation(String rawExpression, Object resultValue, Class<?> resultClass, boolean skipEmptyString)", "class_method_signature": "DMNFeelExpressionEvaluator.internalUnaryEvaluation(String rawExpression, Object resultValue, Class<?> resultClass, boolean skipEmptyString)", "testcase": false, "constructor": false}, {"identifier": "executeAndVerifyErrors", "parameters": "(Function<FEEL, T> command)", "modifiers": "protected", "return": "T", "signature": "T executeAndVerifyErrors(Function<FEEL, T> command)", "full_signature": "protected T executeAndVerifyErrors(Function<FEEL, T> command)", "class_method_signature": "DMNFeelExpressionEvaluator.executeAndVerifyErrors(Function<FEEL, T> command)", "testcase": false, "constructor": false}, {"identifier": "extractFieldValue", "parameters": "(Object result, String fieldName)", "modifiers": "@Override protected", "return": "Object", "signature": "Object extractFieldValue(Object result, String fieldName)", "full_signature": "@Override protected Object extractFieldValue(Object result, String fieldName)", "class_method_signature": "DMNFeelExpressionEvaluator.extractFieldValue(Object result, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "createObject", "parameters": "(String className, List<String> genericClasses)", "modifiers": "@Override protected", "return": "Object", "signature": "Object createObject(String className, List<String> genericClasses)", "full_signature": "@Override protected Object createObject(String className, List<String> genericClasses)", "class_method_signature": "DMNFeelExpressionEvaluator.createObject(String className, List<String> genericClasses)", "testcase": false, "constructor": false}, {"identifier": "setField", "parameters": "(Object toReturn, String fieldName, Object fieldValue)", "modifiers": "@Override protected", "return": "void", "signature": "void setField(Object toReturn, String fieldName, Object fieldValue)", "full_signature": "@Override protected void setField(Object toReturn, String fieldName, Object fieldValue)", "class_method_signature": "DMNFeelExpressionEvaluator.setField(Object toReturn, String fieldName, Object fieldValue)", "testcase": false, "constructor": false}, {"identifier": "isStructuredResult", "parameters": "(Class<?> resultClass)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isStructuredResult(Class<?> resultClass)", "full_signature": "@Override protected boolean isStructuredResult(Class<?> resultClass)", "class_method_signature": "DMNFeelExpressionEvaluator.isStructuredResult(Class<?> resultClass)", "testcase": false, "constructor": false}, {"identifier": "isStructuredInput", "parameters": "(String className)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isStructuredInput(String className)", "full_signature": "@Override protected boolean isStructuredInput(String className)", "class_method_signature": "DMNFeelExpressionEvaluator.isStructuredInput(String className)", "testcase": false, "constructor": false}, {"identifier": "getFieldClassNameAndGenerics", "parameters": "(Object element, String fieldName, String className, List<String> genericClasses)", "modifiers": "@Override protected", "return": "Map.Entry<String, List<String>>", "signature": "Map.Entry<String, List<String>> getFieldClassNameAndGenerics(Object element, String fieldName, String className, List<String> genericClasses)", "full_signature": "@Override protected Map.Entry<String, List<String>> getFieldClassNameAndGenerics(Object element, String fieldName, String className, List<String> genericClasses)", "class_method_signature": "DMNFeelExpressionEvaluator.getFieldClassNameAndGenerics(Object element, String fieldName, String className, List<String> genericClasses)", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluator.java"}, "focal_method": {"identifier": "newFeelEvaluator", "parameters": "(AtomicReference<FEELEvent> errorHolder)", "modifiers": "protected", "return": "FEEL", "body": "protected FEEL newFeelEvaluator(AtomicReference<FEELEvent> errorHolder) {\n        // cleanup existing error\n        errorHolder.set(null);\n        FEEL feel = FEEL.newInstance(singletonList(new ExtendedDMNProfile()));\n        feel.addListener(event -> {\n            FEELEvent feelEvent = errorHolder.get();\n            if (!(feelEvent instanceof SyntaxErrorEvent) &&\n                    ERROR.equals(event.getSeverity())) {\n                errorHolder.set(event);\n            }\n        });\n        return feel;\n    }", "signature": "FEEL newFeelEvaluator(AtomicReference<FEELEvent> errorHolder)", "full_signature": "protected FEEL newFeelEvaluator(AtomicReference<FEELEvent> errorHolder)", "class_method_signature": "DMNFeelExpressionEvaluator.newFeelEvaluator(AtomicReference<FEELEvent> errorHolder)", "testcase": false, "constructor": false, "invocations": ["set", "newInstance", "singletonList", "addListener", "get", "equals", "getSeverity", "set"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}