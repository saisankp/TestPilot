{"test_class": {"identifier": "IgIndexResponseParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FILE_MARKET_SEARCH_TERM_RESPONSE = \"marketsSearchTermResponse.json\";", "modifier": "private static final", "type": "String", "declarator": "FILE_MARKET_SEARCH_TERM_RESPONSE = \"marketsSearchTermResponse.json\"", "var_name": "FILE_MARKET_SEARCH_TERM_RESPONSE"}, {"original_string": "private static final String FILE_MARKET_EPIC_RESPONSE = \"marketsEpicResponse.json\";", "modifier": "private static final", "type": "String", "declarator": "FILE_MARKET_EPIC_RESPONSE = \"marketsEpicResponse.json\"", "var_name": "FILE_MARKET_EPIC_RESPONSE"}], "file": "onplan-connectors/onplan-connector-igindex/src/test/java/com/onplan/connector/igindex/client/IgIndexResponseParserTest.java"}, "test_case": {"identifier": "testCreateInstrumentInfoList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreateInstrumentInfoList() throws IOException {\n    InputStream fileMarketSearchTermResponse =\n        ClassLoader.getSystemResourceAsStream(FILE_MARKET_SEARCH_TERM_RESPONSE);\n    List<InstrumentInfo> result = IgIndexResponseParser.createInstrumentInfoList(\n        IOUtils.toString(fileMarketSearchTermResponse));\n    fileMarketSearchTermResponse.close();\n\n    assertNotNull(result);\n    assertTrue(result.size() == 50);\n    List<String> instrumentIds = Lists.newArrayList();\n    for (InstrumentInfo instrumentInfo : result) {\n      assertInstrumentInfo(instrumentInfo);\n      // Assert instrumentId uniqueness.\n      assertTrue(!instrumentIds.contains(instrumentInfo.getInstrumentId()));\n      instrumentIds.add(instrumentInfo.getInstrumentId());\n    }\n  }", "signature": "void testCreateInstrumentInfoList()", "full_signature": "@Test public void testCreateInstrumentInfoList()", "class_method_signature": "IgIndexResponseParserTest.testCreateInstrumentInfoList()", "testcase": true, "constructor": false, "invocations": ["getSystemResourceAsStream", "createInstrumentInfoList", "toString", "close", "assertNotNull", "assertTrue", "size", "newArrayList", "assertInstrumentInfo", "assertTrue", "contains", "getInstrumentId", "add", "getInstrumentId"]}, "focal_class": {"identifier": "IgIndexResponseParser", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createConnectionCredentials", "parameters": "(\n      String apiKey, HttpClientResponse httpClientResponse)", "modifiers": "public static", "return": "IgIndexConnectionCredentials", "signature": "IgIndexConnectionCredentials createConnectionCredentials(\n      String apiKey, HttpClientResponse httpClientResponse)", "full_signature": "public static IgIndexConnectionCredentials createConnectionCredentials(\n      String apiKey, HttpClientResponse httpClientResponse)", "class_method_signature": "IgIndexResponseParser.createConnectionCredentials(\n      String apiKey, HttpClientResponse httpClientResponse)", "testcase": false, "constructor": false}, {"identifier": "createInstrumentInfoList", "parameters": "(String json)", "modifiers": "public static", "return": "List<InstrumentInfo>", "signature": "List<InstrumentInfo> createInstrumentInfoList(String json)", "full_signature": "public static List<InstrumentInfo> createInstrumentInfoList(String json)", "class_method_signature": "IgIndexResponseParser.createInstrumentInfoList(String json)", "testcase": false, "constructor": false}, {"identifier": "createInstrumentInfo", "parameters": "(String json)", "modifiers": "public static", "return": "InstrumentInfo", "signature": "InstrumentInfo createInstrumentInfo(String json)", "full_signature": "public static InstrumentInfo createInstrumentInfo(String json)", "class_method_signature": "IgIndexResponseParser.createInstrumentInfo(String json)", "testcase": false, "constructor": false}, {"identifier": "createInstrumentInfoForList", "parameters": "(JsonNode jsonNode)", "modifiers": "private static", "return": "InstrumentInfo", "signature": "InstrumentInfo createInstrumentInfoForList(JsonNode jsonNode)", "full_signature": "private static InstrumentInfo createInstrumentInfoForList(JsonNode jsonNode)", "class_method_signature": "IgIndexResponseParser.createInstrumentInfoForList(JsonNode jsonNode)", "testcase": false, "constructor": false}, {"identifier": "getHeaderValue", "parameters": "(HttpClientResponse httpClientResponse, String key)", "modifiers": "private static", "return": "String", "signature": "String getHeaderValue(HttpClientResponse httpClientResponse, String key)", "full_signature": "private static String getHeaderValue(HttpClientResponse httpClientResponse, String key)", "class_method_signature": "IgIndexResponseParser.getHeaderValue(HttpClientResponse httpClientResponse, String key)", "testcase": false, "constructor": false}, {"identifier": "getBodyPropertyValue", "parameters": "(HttpClientResponse httpClientResponse, String key)", "modifiers": "private static", "return": "String", "signature": "String getBodyPropertyValue(HttpClientResponse httpClientResponse, String key)", "full_signature": "private static String getBodyPropertyValue(HttpClientResponse httpClientResponse, String key)", "class_method_signature": "IgIndexResponseParser.getBodyPropertyValue(HttpClientResponse httpClientResponse, String key)", "testcase": false, "constructor": false}], "file": "onplan-connectors/onplan-connector-igindex/src/main/java/com/onplan/connector/igindex/client/IgIndexResponseParser.java"}, "focal_method": {"identifier": "createInstrumentInfoList", "parameters": "(String json)", "modifiers": "public static", "return": "List<InstrumentInfo>", "body": "public static List<InstrumentInfo> createInstrumentInfoList(String json) throws IOException {\n    checkNotNull(json);\n    ImmutableList.Builder result = ImmutableList.builder();\n    JsonNode node = (new ObjectMapper()).readTree(json).get(TAG_MARKETS);\n    checkNotNull(node, String.format(\"Tag [%s] not found in JSON text.\", TAG_MARKETS));\n    for (int i = 0; i < node.size(); i++) {\n      result.add(createInstrumentInfoForList(node.get(i)));\n    }\n    return result.build();\n  }", "signature": "List<InstrumentInfo> createInstrumentInfoList(String json)", "full_signature": "public static List<InstrumentInfo> createInstrumentInfoList(String json)", "class_method_signature": "IgIndexResponseParser.createInstrumentInfoList(String json)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "builder", "get", "readTree", "checkNotNull", "format", "size", "add", "createInstrumentInfoForList", "get", "build"]}, "repository": {"repo_id": 29186921, "url": "https://github.com/melphi/onplan", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 732, "license": "licensed"}}