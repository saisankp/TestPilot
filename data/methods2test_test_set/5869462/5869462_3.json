{"test_class": {"identifier": "HttpDhis2ServerTest", "superclass": "extends BaseModuleContextSensitiveTest", "interfaces": "", "fields": [], "file": "api/src/test/java/org/openmrs/module/dhisreport/api/dhis/HttpDhis2ServerTest.java"}, "test_case": {"identifier": "postAdxReportTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void postAdxReportTest() throws DatatypeConfigurationException,\n\t\t\tMalformedURLException, DHIS2ReportingException {\n\t\tHttpDhis2Server server = mock(HttpDhis2Server.class);\n\t\tObjectFactory of = new ObjectFactory();\n\n\t\tAdxType adxt = of.createAdxType();\n\n\t\tXMLGregorianCalendar date3 = null;\n\t\tdate3 = DatatypeFactory.newInstance().newXMLGregorianCalendar(\n\t\t\t\tnew GregorianCalendar(2016, 06, 14));\n\t\tadxt.setExported(date3);\n\t\tGroupType group = of.createGroupType();\n\t\tgroup.setOrgUnit(\"OU_559\");\n\t\tgroup.setPeriod(\"2015-06-01/P1M\");\n\t\tMap<QName, String> hm1 = group.getOtherAttributes();\n\t\tQName qn2 = new QName(\"idScheme\");\n\t\thm1.put(qn2, \"Code\");\n\n\t\tList<GroupType> groups = adxt.getGroup();\n\n\t\tList<DataValueType> dvt = group.getDataValue();\n\t\tDataValueType dv = new DataValueType();\n\t\tdv.setDataElement(\"DE_98454\");\n\t\tBigDecimal bd = new BigDecimal(32.0);\n\t\tdv.setValue(bd);\n\n\t\tdvt.add(dv);\n\t\tgroups.add(group);\n\n\t\tURL url = new URL(\"http://localhost:8089/dhis\");\n\t\tserver.setUrl(url);\n\t\tserver.setPassword(\"district\");\n\t\tserver.setUsername(\"admin2\");\n\n\t\tAdxImportSummary summary = new AdxImportSummary();\n\t\tsummary.setStatus(\"SUCCESS\");\n\t\twhen(server.postAdxReport(adxt)).thenReturn(summary);\n\t\tAdxImportSummary summaries = server.postAdxReport(adxt);\n\n\t\tassertEquals(summaries.getStatus(), \"SUCCESS\");\n\t}", "signature": "void postAdxReportTest()", "full_signature": "@Test public void postAdxReportTest()", "class_method_signature": "HttpDhis2ServerTest.postAdxReportTest()", "testcase": true, "constructor": false, "invocations": ["mock", "createAdxType", "newXMLGregorianCalendar", "newInstance", "setExported", "createGroupType", "setOrgUnit", "setPeriod", "getOtherAttributes", "put", "getGroup", "getDataValue", "setDataElement", "setValue", "add", "add", "setUrl", "setPassword", "setUsername", "setStatus", "thenReturn", "when", "postAdxReport", "postAdxReport", "assertEquals", "getStatus"]}, "focal_class": {"identifier": "HttpDhis2Server", "superclass": "", "interfaces": "implements Dhis2Server", "fields": [{"original_string": "private static Log log = LogFactory.getLog(HttpDhis2Server.class);", "modifier": "private static", "type": "Log", "declarator": "log = LogFactory.getLog(HttpDhis2Server.class)", "var_name": "log"}, {"original_string": "public static final String REPORTS_METADATA_PATH = \"/api/forms.xml\";", "modifier": "public static final", "type": "String", "declarator": "REPORTS_METADATA_PATH = \"/api/forms.xml\"", "var_name": "REPORTS_METADATA_PATH"}, {"original_string": "public static final String DATAVALUESET_PATH = \"/api/dataValueSets?dataElementIdScheme=CODE&orgUnitIdScheme=CODE&idScheme=CODE\";", "modifier": "public static final", "type": "String", "declarator": "DATAVALUESET_PATH = \"/api/dataValueSets?dataElementIdScheme=CODE&orgUnitIdScheme=CODE&idScheme=CODE\"", "var_name": "DATAVALUESET_PATH"}, {"original_string": "private URL url;", "modifier": "private", "type": "URL", "declarator": "url", "var_name": "url"}, {"original_string": "private String username;", "modifier": "private", "type": "String", "declarator": "username", "var_name": "username"}, {"original_string": "private String password;", "modifier": "private", "type": "String", "declarator": "password", "var_name": "password"}], "methods": [{"identifier": "getUrl", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL getUrl()", "full_signature": "public URL getUrl()", "class_method_signature": "HttpDhis2Server.getUrl()", "testcase": false, "constructor": false}, {"identifier": "setUrl", "parameters": "(URL url)", "modifiers": "public", "return": "void", "signature": "void setUrl(URL url)", "full_signature": "public void setUrl(URL url)", "class_method_signature": "HttpDhis2Server.setUrl(URL url)", "testcase": false, "constructor": false}, {"identifier": "getPassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPassword()", "full_signature": "public String getPassword()", "class_method_signature": "HttpDhis2Server.getPassword()", "testcase": false, "constructor": false}, {"identifier": "setPassword", "parameters": "(String password)", "modifiers": "public", "return": "void", "signature": "void setPassword(String password)", "full_signature": "public void setPassword(String password)", "class_method_signature": "HttpDhis2Server.setPassword(String password)", "testcase": false, "constructor": false}, {"identifier": "getUsername", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUsername()", "full_signature": "public String getUsername()", "class_method_signature": "HttpDhis2Server.getUsername()", "testcase": false, "constructor": false}, {"identifier": "setUsername", "parameters": "(String username)", "modifiers": "public", "return": "void", "signature": "void setUsername(String username)", "full_signature": "public void setUsername(String username)", "class_method_signature": "HttpDhis2Server.setUsername(String username)", "testcase": false, "constructor": false}, {"identifier": "HttpDhis2Server", "parameters": "()", "modifiers": "public", "return": "", "signature": " HttpDhis2Server()", "full_signature": "public  HttpDhis2Server()", "class_method_signature": "HttpDhis2Server.HttpDhis2Server()", "testcase": false, "constructor": true}, {"identifier": "isConfigured", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConfigured()", "full_signature": "@Override public boolean isConfigured()", "class_method_signature": "HttpDhis2Server.isConfigured()", "testcase": false, "constructor": false}, {"identifier": "postReport", "parameters": "(DataValueSet report)", "modifiers": "@Override public", "return": "ImportSummary", "signature": "ImportSummary postReport(DataValueSet report)", "full_signature": "@Override public ImportSummary postReport(DataValueSet report)", "class_method_signature": "HttpDhis2Server.postReport(DataValueSet report)", "testcase": false, "constructor": false}, {"identifier": "postAdxReport", "parameters": "(AdxType report)", "modifiers": "@Override public", "return": "AdxImportSummary", "signature": "AdxImportSummary postAdxReport(AdxType report)", "full_signature": "@Override public AdxImportSummary postAdxReport(AdxType report)", "class_method_signature": "HttpDhis2Server.postAdxReport(AdxType report)", "testcase": false, "constructor": false}, {"identifier": "fetchReportTemplates", "parameters": "()", "modifiers": "@Override public", "return": "ReportDefinition", "signature": "ReportDefinition fetchReportTemplates()", "full_signature": "@Override public ReportDefinition fetchReportTemplates()", "class_method_signature": "HttpDhis2Server.fetchReportTemplates()", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/openmrs/module/dhisreport/api/dhis/HttpDhis2Server.java"}, "focal_method": {"identifier": "postAdxReport", "parameters": "(AdxType report)", "modifiers": "@Override public", "return": "AdxImportSummary", "body": "@Override\n\tpublic AdxImportSummary postAdxReport(AdxType report)\n\t\t\tthrows DHIS2ReportingException {\n\t\tlog.debug(\"Posting A report\");\n\t\tAdxImportSummary summaries = null;\n\n\t\tStringWriter xmlReport = new StringWriter();\n\t\ttry {\n\t\t\tJAXBContext jaxbDataValueSetContext = JAXBContext\n\t\t\t\t\t.newInstance(AdxType.class);\n\n\t\t\tMarshaller adxTypeMarshaller = jaxbDataValueSetContext\n\t\t\t\t\t.createMarshaller();\n\t\t\t// output pretty printed\n\t\t\tadxTypeMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,\n\t\t\t\t\ttrue);\n\t\t\tadxTypeMarshaller.marshal(report, xmlReport);\n\t\t} catch (JAXBException ex) {\n\t\t\tthrow new Dxf2Exception(\"Problem marshalling adxtype\", ex);\n\t\t}\n\n\t\t//System.out.print( \"URL-\" + url );\n\n\t\tString host = url.getHost();\n\t\tint port = url.getPort();\n\n\t\t//System.out.print( \"URL-\" + url + \":host-\" + host + \":port-\" );\n\t\t// System.out.println( port );\n\n\t\tHttpHost targetHost = new HttpHost(host, port, url.getProtocol());\n\t\tDefaultHttpClient httpclient = new DefaultHttpClient();\n\t\tBasicHttpContext localcontext = new BasicHttpContext();\n\n\t\ttry {\n\t\t\tHttpPost httpPost = new HttpPost(url.getPath() + DATAVALUESET_PATH);\n\t\t\tCredentials creds = new UsernamePasswordCredentials(username,\n\t\t\t\t\tpassword);\n\t\t\tHeader bs = new BasicScheme().authenticate(creds, httpPost,\n\t\t\t\t\tlocalcontext);\n\t\t\thttpPost.addHeader(\"Authorization\", bs.getValue());\n\t\t\thttpPost.addHeader(\"Content-Type\", \"application/adx+xml\");\n\t\t\thttpPost.addHeader(\"Accept\", \"application/xml\");\n\n\t\t\thttpPost.setEntity(new StringEntity(xmlReport.toString()));\n\t\t\tHttpResponse response = httpclient.execute(targetHost, httpPost,\n\t\t\t\t\tlocalcontext);\n\t\t\tHttpEntity entity = response.getEntity();\n\n\t\t\tif (response.getStatusLine().getStatusCode() != 200) {\n\t\t\t\tthrow new Dhis2Exception(this, response.getStatusLine()\n\t\t\t\t\t\t.getReasonPhrase(), null);\n\t\t\t}\n\n\t\t\tif (entity != null) {\n\t\t\t\tJAXBContext jaxbImportSummaryContext = JAXBContext\n\t\t\t\t\t\t.newInstance(AdxImportSummary.class);\n\t\t\t\tUnmarshaller importSummaryUnMarshaller = jaxbImportSummaryContext\n\t\t\t\t\t\t.createUnmarshaller();\n\t\t\t\tsummaries = (AdxImportSummary) importSummaryUnMarshaller\n\t\t\t\t\t\t.unmarshal(entity.getContent());\n\t\t\t} else {\n\t\t\t\tsummaries = new AdxImportSummary();\n\t\t\t}\n\t\t\t// EntityUtils.consume( entity );\n\n\t\t\t// TODO: fix these catches ...\n\t\t} catch (JAXBException ex) {\n\t\t\tthrow new Dhis2Exception(this,\n\t\t\t\t\t\"Problem unmarshalling AdxImportSummary\", ex);\n\t\t} catch (AuthenticationException ex) {\n\t\t\tthrow new Dhis2Exception(this,\n\t\t\t\t\t\"Problem authenticating to DHIS2 server\", ex);\n\t\t} catch (IOException ex) {\n\t\t\tthrow new Dhis2Exception(this, \"Problem accessing DHIS2 server\", ex);\n\t\t} finally {\n\t\t\thttpclient.getConnectionManager().shutdown();\n\t\t}\n\t\treturn summaries;\n\t}", "signature": "AdxImportSummary postAdxReport(AdxType report)", "full_signature": "@Override public AdxImportSummary postAdxReport(AdxType report)", "class_method_signature": "HttpDhis2Server.postAdxReport(AdxType report)", "testcase": false, "constructor": false, "invocations": ["debug", "newInstance", "createMarshaller", "setProperty", "marshal", "getHost", "getPort", "getProtocol", "getPath", "authenticate", "addHeader", "getValue", "addHeader", "addHeader", "setEntity", "toString", "execute", "getEntity", "getStatusCode", "getStatusLine", "getReasonPhrase", "getStatusLine", "newInstance", "createUnmarshaller", "unmarshal", "getContent", "shutdown", "getConnectionManager"]}, "repository": {"repo_id": 5869462, "url": "https://github.com/openmrs/openmrs-module-dhisreport", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 9, "size": 1862, "license": "licensed"}}