{"test_class": {"identifier": "ClassUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CodecUtilsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CodecUtilsTest.class)", "var_name": "LOGGER"}, {"original_string": "private static ClassLoader loader;", "modifier": "private static", "type": "ClassLoader", "declarator": "loader", "var_name": "loader"}], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/utils/ClassUtilsTest.java"}, "test_case": {"identifier": "testNewInstanceWithArgs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNewInstanceWithArgs() throws Exception {\n        Assert.assertNotNull(ClassUtils.newInstanceWithArgs(TestMemberClass3.class, null, null));\n        Assert.assertNotNull(ClassUtils.newInstanceWithArgs(TestMemberClass3.class,\n            new Class[] { String.class }, new Object[] { \"2222\" }));\n        Assert.assertNotNull(ClassUtils.newInstanceWithArgs(TestMemberClass6.class, null, null));\n        Assert.assertNotNull(ClassUtils.newInstanceWithArgs(TestMemberClass6.class,\n            new Class[] { int.class }, new Object[] { 222 }));\n        Assert.assertNotNull(ClassUtils.newInstanceWithArgs(TestClass3.class, null, null));\n        Assert.assertNotNull(ClassUtils.newInstanceWithArgs(TestClass3.class,\n            new Class[] { String.class, int.class }, new Object[] { \"xxx\", 222 }));\n    }", "signature": "void testNewInstanceWithArgs()", "full_signature": "@Test public void testNewInstanceWithArgs()", "class_method_signature": "ClassUtilsTest.testNewInstanceWithArgs()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "newInstanceWithArgs", "assertNotNull", "newInstanceWithArgs", "assertNotNull", "newInstanceWithArgs", "assertNotNull", "newInstanceWithArgs", "assertNotNull", "newInstanceWithArgs", "assertNotNull", "newInstanceWithArgs"]}, "focal_class": {"identifier": "ClassUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "forName", "parameters": "(String className)", "modifiers": "public static", "return": "Class", "signature": "Class forName(String className)", "full_signature": "public static Class forName(String className)", "class_method_signature": "ClassUtils.forName(String className)", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String className, boolean initialize)", "modifiers": "public static", "return": "Class", "signature": "Class forName(String className, boolean initialize)", "full_signature": "public static Class forName(String className, boolean initialize)", "class_method_signature": "ClassUtils.forName(String className, boolean initialize)", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String className, ClassLoader cl)", "modifiers": "public static", "return": "Class", "signature": "Class forName(String className, ClassLoader cl)", "full_signature": "public static Class forName(String className, ClassLoader cl)", "class_method_signature": "ClassUtils.forName(String className, ClassLoader cl)", "testcase": false, "constructor": false}, {"identifier": "getAllMethods", "parameters": "(Class clazz)", "modifiers": "public static", "return": "List<Method>", "signature": "List<Method> getAllMethods(Class clazz)", "full_signature": "public static List<Method> getAllMethods(Class clazz)", "class_method_signature": "ClassUtils.getAllMethods(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "getAllFields", "parameters": "(Class clazz)", "modifiers": "public static", "return": "List<Field>", "signature": "List<Field> getAllFields(Class clazz)", "full_signature": "public static List<Field> getAllFields(Class clazz)", "class_method_signature": "ClassUtils.getAllFields(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T newInstance(Class<T> clazz)", "full_signature": "public static T newInstance(Class<T> clazz)", "class_method_signature": "ClassUtils.newInstance(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "newInstanceWithArgs", "parameters": "(Class<T> clazz, Class<?>[] argTypes, Object[] args)", "modifiers": "public static", "return": "T", "signature": "T newInstanceWithArgs(Class<T> clazz, Class<?>[] argTypes, Object[] args)", "full_signature": "public static T newInstanceWithArgs(Class<T> clazz, Class<?>[] argTypes, Object[] args)", "class_method_signature": "ClassUtils.newInstanceWithArgs(Class<T> clazz, Class<?>[] argTypes, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "getDefaultPrimitiveValue", "parameters": "(Class clazz)", "modifiers": "public static", "return": "Object", "signature": "Object getDefaultPrimitiveValue(Class clazz)", "full_signature": "public static Object getDefaultPrimitiveValue(Class clazz)", "class_method_signature": "ClassUtils.getDefaultPrimitiveValue(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "getDefaultWrapperValue", "parameters": "(Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T getDefaultWrapperValue(Class<T> clazz)", "full_signature": "public static T getDefaultWrapperValue(Class<T> clazz)", "class_method_signature": "ClassUtils.getDefaultWrapperValue(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getMethodKey", "parameters": "(String interfaceName, String methodName)", "modifiers": "public static", "return": "String", "signature": "String getMethodKey(String interfaceName, String methodName)", "full_signature": "public static String getMethodKey(String interfaceName, String methodName)", "class_method_signature": "ClassUtils.getMethodKey(String interfaceName, String methodName)", "testcase": false, "constructor": false}, {"identifier": "isAssignableFrom", "parameters": "(Class<?> interfaceClass, Class<?> implementClass)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAssignableFrom(Class<?> interfaceClass, Class<?> implementClass)", "full_signature": "public static boolean isAssignableFrom(Class<?> interfaceClass, Class<?> implementClass)", "class_method_signature": "ClassUtils.isAssignableFrom(Class<?> interfaceClass, Class<?> implementClass)", "testcase": false, "constructor": false}, {"identifier": "isImplementOrSubclass", "parameters": "(String interfaceName, Class<?> implementClass)", "modifiers": "private static", "return": "boolean", "signature": "boolean isImplementOrSubclass(String interfaceName, Class<?> implementClass)", "full_signature": "private static boolean isImplementOrSubclass(String interfaceName, Class<?> implementClass)", "class_method_signature": "ClassUtils.isImplementOrSubclass(String interfaceName, Class<?> implementClass)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/utils/ClassUtils.java"}, "focal_method": {"identifier": "newInstanceWithArgs", "parameters": "(Class<T> clazz, Class<?>[] argTypes, Object[] args)", "modifiers": "public static", "return": "T", "body": "public static <T> T newInstanceWithArgs(Class<T> clazz, Class<?>[] argTypes, Object[] args)\n        throws SofaRpcRuntimeException {\n        if (CommonUtils.isEmpty(argTypes)) {\n            return newInstance(clazz);\n        }\n        try {\n            if (!(clazz.isMemberClass() && !Modifier.isStatic(clazz.getModifiers()))) {\n                Constructor<T> constructor = clazz.getDeclaredConstructor(argTypes);\n                constructor.setAccessible(true);\n                return constructor.newInstance(args);\n            } else {\n                Constructor<T>[] constructors = (Constructor<T>[]) clazz.getDeclaredConstructors();\n                if (constructors == null || constructors.length == 0) {\n                    throw new SofaRpcRuntimeException(\"The \" + clazz.getCanonicalName()\n                        + \" has no constructor with argTypes :\" + Arrays.toString(argTypes));\n                }\n                Constructor<T> constructor = null;\n                for (Constructor<T> c : constructors) {\n                    Class[] ps = c.getParameterTypes();\n                    if (ps.length == argTypes.length + 1) { // \u957f\u5ea6\u591a\u4e00\n                        boolean allMath = true;\n                        for (int i = 1; i < ps.length; i++) { // \u800c\u4e14\u7b2c\u4e8c\u4e2a\u5f00\u59cb\u7684\u53c2\u6570\u7c7b\u578b\u5339\u914d\n                            if (ps[i] != argTypes[i - 1]) {\n                                allMath = false;\n                                break;\n                            }\n                        }\n                        if (allMath) {\n                            constructor = c;\n                            break;\n                        }\n                    }\n                }\n                if (constructor == null) {\n                    throw new SofaRpcRuntimeException(\"The \" + clazz.getCanonicalName()\n                        + \" has no constructor with argTypes :\" + Arrays.toString(argTypes));\n                } else {\n                    constructor.setAccessible(true);\n                    Object[] newArgs = new Object[args.length + 1];\n                    System.arraycopy(args, 0, newArgs, 1, args.length);\n                    return constructor.newInstance(newArgs);\n                }\n            }\n        } catch (SofaRpcRuntimeException e) {\n            throw e;\n        } catch (Throwable e) {\n            throw new SofaRpcRuntimeException(e.getMessage(), e);\n        }\n    }", "signature": "T newInstanceWithArgs(Class<T> clazz, Class<?>[] argTypes, Object[] args)", "full_signature": "public static T newInstanceWithArgs(Class<T> clazz, Class<?>[] argTypes, Object[] args)", "class_method_signature": "ClassUtils.newInstanceWithArgs(Class<T> clazz, Class<?>[] argTypes, Object[] args)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "newInstance", "isMemberClass", "isStatic", "getModifiers", "getDeclaredConstructor", "setAccessible", "newInstance", "getDeclaredConstructors", "getCanonicalName", "toString", "getParameterTypes", "getCanonicalName", "toString", "setAccessible", "arraycopy", "newInstance", "getMessage"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}