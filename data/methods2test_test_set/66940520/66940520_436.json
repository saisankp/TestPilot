{"test_class": {"identifier": "JdbcAnalyticsTableManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private SystemSettingManager systemSettingManager;", "modifier": "@Mock\n    private", "type": "SystemSettingManager", "declarator": "systemSettingManager", "var_name": "systemSettingManager"}, {"original_string": "@Mock\n    private JdbcTemplate jdbcTemplate;", "modifier": "@Mock\n    private", "type": "JdbcTemplate", "declarator": "jdbcTemplate", "var_name": "jdbcTemplate"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "private AnalyticsTableManager subject;", "modifier": "private", "type": "AnalyticsTableManager", "declarator": "subject", "var_name": "subject"}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/table/JdbcAnalyticsTableManagerTest.java"}, "test_case": {"identifier": "testGetRegularAnalyticsTable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetRegularAnalyticsTable()\n    {\n        Date startTime = new DateTime( 2019, 3, 1, 10, 0 ).toDate();\n        List<Integer> dataYears = Lists.newArrayList( 2018, 2019 );\n\n        AnalyticsTableUpdateParams params = AnalyticsTableUpdateParams.newBuilder()\n            .withStartTime( startTime )\n            .build();\n\n        when( jdbcTemplate.queryForList( Mockito.anyString(), ArgumentMatchers.<Class<Integer>>any() ) ).thenReturn( dataYears );\n\n        List<AnalyticsTable> tables = subject.getAnalyticsTables( params );\n\n        assertEquals( 1, tables.size() );\n\n        AnalyticsTable table = tables.get( 0 );\n\n        assertNotNull( table );\n        assertNotNull( table.getTablePartitions() );\n        assertEquals( 2, table.getTablePartitions().size() );\n\n        AnalyticsTablePartition partitionA = table.getTablePartitions().get( 0 );\n        AnalyticsTablePartition partitionB = table.getTablePartitions().get( 1 );\n\n        assertNotNull( partitionA );\n        assertNotNull( partitionA.getStartDate() );\n        assertNotNull( partitionA.getEndDate() );\n        assertEquals( partitionA.getYear().intValue(), new DateTime( partitionA.getStartDate() ).getYear() );\n\n        assertNotNull( partitionB );\n        assertNotNull( partitionB.getStartDate() );\n        assertNotNull( partitionB.getEndDate() );\n        assertEquals( partitionB.getYear().intValue(), new DateTime( partitionB.getStartDate() ).getYear() );\n    }", "signature": "void testGetRegularAnalyticsTable()", "full_signature": "@Test public void testGetRegularAnalyticsTable()", "class_method_signature": "JdbcAnalyticsTableManagerTest.testGetRegularAnalyticsTable()", "testcase": true, "constructor": false, "invocations": ["toDate", "newArrayList", "build", "withStartTime", "newBuilder", "thenReturn", "when", "queryForList", "anyString", "any", "getAnalyticsTables", "assertEquals", "size", "get", "assertNotNull", "assertNotNull", "getTablePartitions", "assertEquals", "size", "getTablePartitions", "get", "getTablePartitions", "get", "getTablePartitions", "assertNotNull", "assertNotNull", "getStartDate", "assertNotNull", "getEndDate", "assertEquals", "intValue", "getYear", "getYear", "getStartDate", "assertNotNull", "assertNotNull", "getStartDate", "assertNotNull", "getEndDate", "assertEquals", "intValue", "getYear", "getYear", "getStartDate"]}, "focal_class": {"identifier": "JdbcAnalyticsTableManager", "superclass": "extends AbstractJdbcTableManager", "interfaces": "", "fields": [{"original_string": "private static final List<AnalyticsTableColumn> FIXED_COLS = Lists.newArrayList(\n        new AnalyticsTableColumn( quote( \"dx\" ), CHARACTER_11, NOT_NULL, \"de.uid\" ),\n        new AnalyticsTableColumn( quote( \"co\" ), CHARACTER_11, NOT_NULL, \"co.uid\" )\n            .withIndexColumns( newArrayList( quote( \"dx\" ), quote( \"co\" ) ) ),\n        new AnalyticsTableColumn( quote( \"ao\" ), CHARACTER_11, NOT_NULL, \"ao.uid\" )\n            .withIndexColumns( newArrayList( quote( \"dx\" ), quote( \"ao\" ) ) ),\n        new AnalyticsTableColumn( quote( \"pestartdate\" ), TIMESTAMP, \"pe.startdate\" ),\n        new AnalyticsTableColumn( quote( \"peenddate\" ), TIMESTAMP, \"pe.enddate\" ),\n        new AnalyticsTableColumn( quote( \"year\" ), INTEGER, NOT_NULL, \"ps.year\" ),\n        new AnalyticsTableColumn( quote( \"pe\" ), TEXT, NOT_NULL, \"ps.iso\" ),\n        new AnalyticsTableColumn( quote( \"ou\" ), CHARACTER_11, NOT_NULL, \"ou.uid\" ),\n        new AnalyticsTableColumn( quote( \"level\" ), INTEGER, \"ous.level\" ) );", "modifier": "private static final", "type": "List<AnalyticsTableColumn>", "declarator": "FIXED_COLS = Lists.newArrayList(\n        new AnalyticsTableColumn( quote( \"dx\" ), CHARACTER_11, NOT_NULL, \"de.uid\" ),\n        new AnalyticsTableColumn( quote( \"co\" ), CHARACTER_11, NOT_NULL, \"co.uid\" )\n            .withIndexColumns( newArrayList( quote( \"dx\" ), quote( \"co\" ) ) ),\n        new AnalyticsTableColumn( quote( \"ao\" ), CHARACTER_11, NOT_NULL, \"ao.uid\" )\n            .withIndexColumns( newArrayList( quote( \"dx\" ), quote( \"ao\" ) ) ),\n        new AnalyticsTableColumn( quote( \"pestartdate\" ), TIMESTAMP, \"pe.startdate\" ),\n        new AnalyticsTableColumn( quote( \"peenddate\" ), TIMESTAMP, \"pe.enddate\" ),\n        new AnalyticsTableColumn( quote( \"year\" ), INTEGER, NOT_NULL, \"ps.year\" ),\n        new AnalyticsTableColumn( quote( \"pe\" ), TEXT, NOT_NULL, \"ps.iso\" ),\n        new AnalyticsTableColumn( quote( \"ou\" ), CHARACTER_11, NOT_NULL, \"ou.uid\" ),\n        new AnalyticsTableColumn( quote( \"level\" ), INTEGER, \"ous.level\" ) )", "var_name": "FIXED_COLS"}], "methods": [{"identifier": "JdbcAnalyticsTableManager", "parameters": "( IdentifiableObjectManager idObjectManager,\n        OrganisationUnitService organisationUnitService, CategoryService categoryService,\n        SystemSettingManager systemSettingManager, DataApprovalLevelService dataApprovalLevelService,\n        ResourceTableService resourceTableService, AnalyticsTableHookService tableHookService,\n        StatementBuilder statementBuilder, PartitionManager partitionManager, DatabaseInfo databaseInfo,\n        JdbcTemplate jdbcTemplate )", "modifiers": "public", "return": "", "signature": " JdbcAnalyticsTableManager( IdentifiableObjectManager idObjectManager,\n        OrganisationUnitService organisationUnitService, CategoryService categoryService,\n        SystemSettingManager systemSettingManager, DataApprovalLevelService dataApprovalLevelService,\n        ResourceTableService resourceTableService, AnalyticsTableHookService tableHookService,\n        StatementBuilder statementBuilder, PartitionManager partitionManager, DatabaseInfo databaseInfo,\n        JdbcTemplate jdbcTemplate )", "full_signature": "public  JdbcAnalyticsTableManager( IdentifiableObjectManager idObjectManager,\n        OrganisationUnitService organisationUnitService, CategoryService categoryService,\n        SystemSettingManager systemSettingManager, DataApprovalLevelService dataApprovalLevelService,\n        ResourceTableService resourceTableService, AnalyticsTableHookService tableHookService,\n        StatementBuilder statementBuilder, PartitionManager partitionManager, DatabaseInfo databaseInfo,\n        JdbcTemplate jdbcTemplate )", "class_method_signature": "JdbcAnalyticsTableManager.JdbcAnalyticsTableManager( IdentifiableObjectManager idObjectManager,\n        OrganisationUnitService organisationUnitService, CategoryService categoryService,\n        SystemSettingManager systemSettingManager, DataApprovalLevelService dataApprovalLevelService,\n        ResourceTableService resourceTableService, AnalyticsTableHookService tableHookService,\n        StatementBuilder statementBuilder, PartitionManager partitionManager, DatabaseInfo databaseInfo,\n        JdbcTemplate jdbcTemplate )", "testcase": false, "constructor": true}, {"identifier": "getAnalyticsTableType", "parameters": "()", "modifiers": "@Override public", "return": "AnalyticsTableType", "signature": "AnalyticsTableType getAnalyticsTableType()", "full_signature": "@Override public AnalyticsTableType getAnalyticsTableType()", "class_method_signature": "JdbcAnalyticsTableManager.getAnalyticsTableType()", "testcase": false, "constructor": false}, {"identifier": "getAnalyticsTables", "parameters": "( AnalyticsTableUpdateParams params )", "modifiers": "@Override @Transactional public", "return": "List<AnalyticsTable>", "signature": "List<AnalyticsTable> getAnalyticsTables( AnalyticsTableUpdateParams params )", "full_signature": "@Override @Transactional public List<AnalyticsTable> getAnalyticsTables( AnalyticsTableUpdateParams params )", "class_method_signature": "JdbcAnalyticsTableManager.getAnalyticsTables( AnalyticsTableUpdateParams params )", "testcase": false, "constructor": false}, {"identifier": "validState", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String validState()", "full_signature": "@Override public String validState()", "class_method_signature": "JdbcAnalyticsTableManager.validState()", "testcase": false, "constructor": false}, {"identifier": "hasUpdatedLatestData", "parameters": "( Date startDate, Date endDate )", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean hasUpdatedLatestData( Date startDate, Date endDate )", "full_signature": "@Override protected boolean hasUpdatedLatestData( Date startDate, Date endDate )", "class_method_signature": "JdbcAnalyticsTableManager.hasUpdatedLatestData( Date startDate, Date endDate )", "testcase": false, "constructor": false}, {"identifier": "preCreateTables", "parameters": "( AnalyticsTableUpdateParams params )", "modifiers": "@Override public", "return": "void", "signature": "void preCreateTables( AnalyticsTableUpdateParams params )", "full_signature": "@Override public void preCreateTables( AnalyticsTableUpdateParams params )", "class_method_signature": "JdbcAnalyticsTableManager.preCreateTables( AnalyticsTableUpdateParams params )", "testcase": false, "constructor": false}, {"identifier": "removeUpdatedData", "parameters": "( AnalyticsTableUpdateParams params, List<AnalyticsTable> tables )", "modifiers": "@Override public", "return": "void", "signature": "void removeUpdatedData( AnalyticsTableUpdateParams params, List<AnalyticsTable> tables )", "full_signature": "@Override public void removeUpdatedData( AnalyticsTableUpdateParams params, List<AnalyticsTable> tables )", "class_method_signature": "JdbcAnalyticsTableManager.removeUpdatedData( AnalyticsTableUpdateParams params, List<AnalyticsTable> tables )", "testcase": false, "constructor": false}, {"identifier": "getPartitionChecks", "parameters": "( AnalyticsTablePartition partition )", "modifiers": "@Override protected", "return": "List<String>", "signature": "List<String> getPartitionChecks( AnalyticsTablePartition partition )", "full_signature": "@Override protected List<String> getPartitionChecks( AnalyticsTablePartition partition )", "class_method_signature": "JdbcAnalyticsTableManager.getPartitionChecks( AnalyticsTablePartition partition )", "testcase": false, "constructor": false}, {"identifier": "populateTable", "parameters": "( AnalyticsTableUpdateParams params, AnalyticsTablePartition partition )", "modifiers": "@Override protected", "return": "void", "signature": "void populateTable( AnalyticsTableUpdateParams params, AnalyticsTablePartition partition )", "full_signature": "@Override protected void populateTable( AnalyticsTableUpdateParams params, AnalyticsTablePartition partition )", "class_method_signature": "JdbcAnalyticsTableManager.populateTable( AnalyticsTableUpdateParams params, AnalyticsTablePartition partition )", "testcase": false, "constructor": false}, {"identifier": "populateTable", "parameters": "( AnalyticsTableUpdateParams params, AnalyticsTablePartition partition,\n        String valueExpression, String textValueExpression, Set<ValueType> valueTypes, String whereClause )", "modifiers": "private", "return": "void", "signature": "void populateTable( AnalyticsTableUpdateParams params, AnalyticsTablePartition partition,\n        String valueExpression, String textValueExpression, Set<ValueType> valueTypes, String whereClause )", "full_signature": "private void populateTable( AnalyticsTableUpdateParams params, AnalyticsTablePartition partition,\n        String valueExpression, String textValueExpression, Set<ValueType> valueTypes, String whereClause )", "class_method_signature": "JdbcAnalyticsTableManager.populateTable( AnalyticsTableUpdateParams params, AnalyticsTablePartition partition,\n        String valueExpression, String textValueExpression, Set<ValueType> valueTypes, String whereClause )", "testcase": false, "constructor": false}, {"identifier": "getApprovalJoinClause", "parameters": "( Integer year )", "modifiers": "private", "return": "String", "signature": "String getApprovalJoinClause( Integer year )", "full_signature": "private String getApprovalJoinClause( Integer year )", "class_method_signature": "JdbcAnalyticsTableManager.getApprovalJoinClause( Integer year )", "testcase": false, "constructor": false}, {"identifier": "getDimensionColumns", "parameters": "()", "modifiers": "private", "return": "List<AnalyticsTableColumn>", "signature": "List<AnalyticsTableColumn> getDimensionColumns()", "full_signature": "private List<AnalyticsTableColumn> getDimensionColumns()", "class_method_signature": "JdbcAnalyticsTableManager.getDimensionColumns()", "testcase": false, "constructor": false}, {"identifier": "getDimensionColumns", "parameters": "( Integer year )", "modifiers": "private", "return": "List<AnalyticsTableColumn>", "signature": "List<AnalyticsTableColumn> getDimensionColumns( Integer year )", "full_signature": "private List<AnalyticsTableColumn> getDimensionColumns( Integer year )", "class_method_signature": "JdbcAnalyticsTableManager.getDimensionColumns( Integer year )", "testcase": false, "constructor": false}, {"identifier": "getValueColumns", "parameters": "()", "modifiers": "private", "return": "List<AnalyticsTableColumn>", "signature": "List<AnalyticsTableColumn> getValueColumns()", "full_signature": "private List<AnalyticsTableColumn> getValueColumns()", "class_method_signature": "JdbcAnalyticsTableManager.getValueColumns()", "testcase": false, "constructor": false}, {"identifier": "getDataYears", "parameters": "( AnalyticsTableUpdateParams params )", "modifiers": "private", "return": "List<Integer>", "signature": "List<Integer> getDataYears( AnalyticsTableUpdateParams params )", "full_signature": "private List<Integer> getDataYears( AnalyticsTableUpdateParams params )", "class_method_signature": "JdbcAnalyticsTableManager.getDataYears( AnalyticsTableUpdateParams params )", "testcase": false, "constructor": false}, {"identifier": "applyAggregationLevels", "parameters": "( ConcurrentLinkedQueue<AnalyticsTablePartition> partitions, Collection<String> dataElements, int aggregationLevel )", "modifiers": "@Override @Async public", "return": "Future<?>", "signature": "Future<?> applyAggregationLevels( ConcurrentLinkedQueue<AnalyticsTablePartition> partitions, Collection<String> dataElements, int aggregationLevel )", "full_signature": "@Override @Async public Future<?> applyAggregationLevels( ConcurrentLinkedQueue<AnalyticsTablePartition> partitions, Collection<String> dataElements, int aggregationLevel )", "class_method_signature": "JdbcAnalyticsTableManager.applyAggregationLevels( ConcurrentLinkedQueue<AnalyticsTablePartition> partitions, Collection<String> dataElements, int aggregationLevel )", "testcase": false, "constructor": false}, {"identifier": "vacuumTablesAsync", "parameters": "( ConcurrentLinkedQueue<AnalyticsTablePartition> partitions )", "modifiers": "@Override @Async public", "return": "Future<?>", "signature": "Future<?> vacuumTablesAsync( ConcurrentLinkedQueue<AnalyticsTablePartition> partitions )", "full_signature": "@Override @Async public Future<?> vacuumTablesAsync( ConcurrentLinkedQueue<AnalyticsTablePartition> partitions )", "class_method_signature": "JdbcAnalyticsTableManager.vacuumTablesAsync( ConcurrentLinkedQueue<AnalyticsTablePartition> partitions )", "testcase": false, "constructor": false}, {"identifier": "getFixedColumns", "parameters": "()", "modifiers": "@Override public", "return": "List<AnalyticsTableColumn>", "signature": "List<AnalyticsTableColumn> getFixedColumns()", "full_signature": "@Override public List<AnalyticsTableColumn> getFixedColumns()", "class_method_signature": "JdbcAnalyticsTableManager.getFixedColumns()", "testcase": false, "constructor": false}, {"identifier": "isApprovalEnabled", "parameters": "( Integer year )", "modifiers": "private", "return": "boolean", "signature": "boolean isApprovalEnabled( Integer year )", "full_signature": "private boolean isApprovalEnabled( Integer year )", "class_method_signature": "JdbcAnalyticsTableManager.isApprovalEnabled( Integer year )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/table/JdbcAnalyticsTableManager.java"}, "focal_method": {"identifier": "getAnalyticsTables", "parameters": "( AnalyticsTableUpdateParams params )", "modifiers": "@Override @Transactional public", "return": "List<AnalyticsTable>", "body": "@Override\n    @Transactional\n    public List<AnalyticsTable> getAnalyticsTables( AnalyticsTableUpdateParams params )\n    {\n        AnalyticsTable table = params.isLatestUpdate() ?\n            getLatestAnalyticsTable( params, getDimensionColumns(), getValueColumns() ) :\n            getRegularAnalyticsTable( params, getDataYears( params ), getDimensionColumns(), getValueColumns() );\n\n        return table.hasPartitionTables() ? newArrayList( table ) : newArrayList();\n    }", "signature": "List<AnalyticsTable> getAnalyticsTables( AnalyticsTableUpdateParams params )", "full_signature": "@Override @Transactional public List<AnalyticsTable> getAnalyticsTables( AnalyticsTableUpdateParams params )", "class_method_signature": "JdbcAnalyticsTableManager.getAnalyticsTables( AnalyticsTableUpdateParams params )", "testcase": false, "constructor": false, "invocations": ["isLatestUpdate", "getLatestAnalyticsTable", "getDimensionColumns", "getValueColumns", "getRegularAnalyticsTable", "getDataYears", "getDimensionColumns", "getValueColumns", "hasPartitionTables", "newArrayList", "newArrayList"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}