{"test_class": {"identifier": "CacheBasedDatasetBuilderTest", "superclass": "extends GridCommonAbstractTest", "interfaces": "", "fields": [{"original_string": "private static final int NODE_COUNT = 10;", "modifier": "private static final", "type": "int", "declarator": "NODE_COUNT = 10", "var_name": "NODE_COUNT"}, {"original_string": "private Ignite ignite;", "modifier": "private", "type": "Ignite", "declarator": "ignite", "var_name": "ignite"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/dataset/impl/cache/CacheBasedDatasetBuilderTest.java"}, "test_case": {"identifier": "testBuildWithPredicate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildWithPredicate() {\n        CacheConfiguration<Integer, Integer> upstreamCacheConfiguration = new CacheConfiguration<>();\n        upstreamCacheConfiguration.setAffinity(new RendezvousAffinityFunction(false, 1));\n        upstreamCacheConfiguration.setName(UUID.randomUUID().toString());\n\n        IgniteCache<Integer, Integer> upstreamCache = ignite.createCache(upstreamCacheConfiguration);\n        upstreamCache.put(1, 1);\n        upstreamCache.put(2, 2);\n\n        CacheBasedDatasetBuilder<Integer, Integer> builder = new CacheBasedDatasetBuilder<>(\n            ignite,\n            upstreamCache,\n            (k, v) -> k % 2 == 0\n        );\n\n        CacheBasedDataset<Integer, Integer, Long, AutoCloseable> dataset = builder.build(\n            TestUtils.testEnvBuilder(),\n            (env, upstream, upstreamSize) -> {\n                UpstreamEntry<Integer, Integer> entry = upstream.next();\n                assertEquals(Integer.valueOf(2), entry.getKey());\n                assertEquals(Integer.valueOf(2), entry.getValue());\n                assertFalse(upstream.hasNext());\n                return 0L;\n            },\n            (env, upstream, upstreamSize, ctx) -> {\n                UpstreamEntry<Integer, Integer> entry = upstream.next();\n                assertEquals(Integer.valueOf(2), entry.getKey());\n                assertEquals(Integer.valueOf(2), entry.getValue());\n                assertFalse(upstream.hasNext());\n                return null;\n            },\n            TestUtils.testEnvBuilder().buildForTrainer()\n        );\n\n        dataset.compute(data -> {});\n    }", "signature": "void testBuildWithPredicate()", "full_signature": "@Test public void testBuildWithPredicate()", "class_method_signature": "CacheBasedDatasetBuilderTest.testBuildWithPredicate()", "testcase": true, "constructor": false, "invocations": ["setAffinity", "setName", "toString", "randomUUID", "createCache", "put", "put", "build", "testEnvBuilder", "next", "assertEquals", "valueOf", "getKey", "assertEquals", "valueOf", "getValue", "assertFalse", "hasNext", "next", "assertEquals", "valueOf", "getKey", "assertEquals", "valueOf", "getValue", "assertFalse", "hasNext", "buildForTrainer", "testEnvBuilder", "compute"]}, "focal_class": {"identifier": "CacheBasedDatasetBuilder", "superclass": "", "interfaces": "implements DatasetBuilder<K, V>", "fields": [{"original_string": "public static final int DEFAULT_NUMBER_OF_RETRIES = 15 * 60;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_NUMBER_OF_RETRIES = 15 * 60", "var_name": "DEFAULT_NUMBER_OF_RETRIES"}, {"original_string": "private static final int RETRY_INTERVAL = 1000;", "modifier": "private static final", "type": "int", "declarator": "RETRY_INTERVAL = 1000", "var_name": "RETRY_INTERVAL"}, {"original_string": "private static final String DATASET_CACHE_TEMPLATE = \"%s_DATASET_%s\";", "modifier": "private static final", "type": "String", "declarator": "DATASET_CACHE_TEMPLATE = \"%s_DATASET_%s\"", "var_name": "DATASET_CACHE_TEMPLATE"}, {"original_string": "private final Ignite ignite;", "modifier": "private final", "type": "Ignite", "declarator": "ignite", "var_name": "ignite"}, {"original_string": "private final IgniteCache<K, V> upstreamCache;", "modifier": "private final", "type": "IgniteCache<K, V>", "declarator": "upstreamCache", "var_name": "upstreamCache"}, {"original_string": "private final IgniteBiPredicate<K, V> filter;", "modifier": "private final", "type": "IgniteBiPredicate<K, V>", "declarator": "filter", "var_name": "filter"}, {"original_string": "private final UpstreamTransformerBuilder transformerBuilder;", "modifier": "private final", "type": "UpstreamTransformerBuilder", "declarator": "transformerBuilder", "var_name": "transformerBuilder"}, {"original_string": "private final boolean upstreamKeepBinary;", "modifier": "private final", "type": "boolean", "declarator": "upstreamKeepBinary", "var_name": "upstreamKeepBinary"}, {"original_string": "private final int retries;", "modifier": "private final", "type": "int", "declarator": "retries", "var_name": "retries"}], "methods": [{"identifier": "CacheBasedDatasetBuilder", "parameters": "(Ignite ignite, IgniteCache<K, V> upstreamCache)", "modifiers": "public", "return": "", "signature": " CacheBasedDatasetBuilder(Ignite ignite, IgniteCache<K, V> upstreamCache)", "full_signature": "public  CacheBasedDatasetBuilder(Ignite ignite, IgniteCache<K, V> upstreamCache)", "class_method_signature": "CacheBasedDatasetBuilder.CacheBasedDatasetBuilder(Ignite ignite, IgniteCache<K, V> upstreamCache)", "testcase": false, "constructor": true}, {"identifier": "CacheBasedDatasetBuilder", "parameters": "(Ignite ignite, IgniteCache<K, V> upstreamCache, IgniteBiPredicate<K, V> filter)", "modifiers": "public", "return": "", "signature": " CacheBasedDatasetBuilder(Ignite ignite, IgniteCache<K, V> upstreamCache, IgniteBiPredicate<K, V> filter)", "full_signature": "public  CacheBasedDatasetBuilder(Ignite ignite, IgniteCache<K, V> upstreamCache, IgniteBiPredicate<K, V> filter)", "class_method_signature": "CacheBasedDatasetBuilder.CacheBasedDatasetBuilder(Ignite ignite, IgniteCache<K, V> upstreamCache, IgniteBiPredicate<K, V> filter)", "testcase": false, "constructor": true}, {"identifier": "CacheBasedDatasetBuilder", "parameters": "(Ignite ignite,\n        IgniteCache<K, V> upstreamCache,\n        IgniteBiPredicate<K, V> filter,\n        UpstreamTransformerBuilder transformerBuilder)", "modifiers": "public", "return": "", "signature": " CacheBasedDatasetBuilder(Ignite ignite,\n        IgniteCache<K, V> upstreamCache,\n        IgniteBiPredicate<K, V> filter,\n        UpstreamTransformerBuilder transformerBuilder)", "full_signature": "public  CacheBasedDatasetBuilder(Ignite ignite,\n        IgniteCache<K, V> upstreamCache,\n        IgniteBiPredicate<K, V> filter,\n        UpstreamTransformerBuilder transformerBuilder)", "class_method_signature": "CacheBasedDatasetBuilder.CacheBasedDatasetBuilder(Ignite ignite,\n        IgniteCache<K, V> upstreamCache,\n        IgniteBiPredicate<K, V> filter,\n        UpstreamTransformerBuilder transformerBuilder)", "testcase": false, "constructor": true}, {"identifier": "CacheBasedDatasetBuilder", "parameters": "(Ignite ignite,\n        IgniteCache<K, V> upstreamCache,\n        IgniteBiPredicate<K, V> filter,\n        UpstreamTransformerBuilder transformerBuilder,\n        Boolean isKeepBinary,\n        int retries)", "modifiers": "public", "return": "", "signature": " CacheBasedDatasetBuilder(Ignite ignite,\n        IgniteCache<K, V> upstreamCache,\n        IgniteBiPredicate<K, V> filter,\n        UpstreamTransformerBuilder transformerBuilder,\n        Boolean isKeepBinary,\n        int retries)", "full_signature": "public  CacheBasedDatasetBuilder(Ignite ignite,\n        IgniteCache<K, V> upstreamCache,\n        IgniteBiPredicate<K, V> filter,\n        UpstreamTransformerBuilder transformerBuilder,\n        Boolean isKeepBinary,\n        int retries)", "class_method_signature": "CacheBasedDatasetBuilder.CacheBasedDatasetBuilder(Ignite ignite,\n        IgniteCache<K, V> upstreamCache,\n        IgniteBiPredicate<K, V> filter,\n        UpstreamTransformerBuilder transformerBuilder,\n        Boolean isKeepBinary,\n        int retries)", "testcase": false, "constructor": true}, {"identifier": "build", "parameters": "(\n        LearningEnvironmentBuilder envBuilder,\n        PartitionContextBuilder<K, V, C> partCtxBuilder,\n        PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment localLearningEnv)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "CacheBasedDataset<K, V, C, D>", "signature": "CacheBasedDataset<K, V, C, D> build(\n        LearningEnvironmentBuilder envBuilder,\n        PartitionContextBuilder<K, V, C> partCtxBuilder,\n        PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment localLearningEnv)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public CacheBasedDataset<K, V, C, D> build(\n        LearningEnvironmentBuilder envBuilder,\n        PartitionContextBuilder<K, V, C> partCtxBuilder,\n        PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment localLearningEnv)", "class_method_signature": "CacheBasedDatasetBuilder.build(\n        LearningEnvironmentBuilder envBuilder,\n        PartitionContextBuilder<K, V, C> partCtxBuilder,\n        PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment localLearningEnv)", "testcase": false, "constructor": false}, {"identifier": "withUpstreamTransformer", "parameters": "(UpstreamTransformerBuilder builder)", "modifiers": "@Override public", "return": "DatasetBuilder<K, V>", "signature": "DatasetBuilder<K, V> withUpstreamTransformer(UpstreamTransformerBuilder builder)", "full_signature": "@Override public DatasetBuilder<K, V> withUpstreamTransformer(UpstreamTransformerBuilder builder)", "class_method_signature": "CacheBasedDatasetBuilder.withUpstreamTransformer(UpstreamTransformerBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "withFilter", "parameters": "(IgniteBiPredicate<K, V> filterToAdd)", "modifiers": "@Override public", "return": "DatasetBuilder<K, V>", "signature": "DatasetBuilder<K, V> withFilter(IgniteBiPredicate<K, V> filterToAdd)", "full_signature": "@Override public DatasetBuilder<K, V> withFilter(IgniteBiPredicate<K, V> filterToAdd)", "class_method_signature": "CacheBasedDatasetBuilder.withFilter(IgniteBiPredicate<K, V> filterToAdd)", "testcase": false, "constructor": false}, {"identifier": "withKeepBinary", "parameters": "(boolean isKeepBinary)", "modifiers": "public", "return": "CacheBasedDatasetBuilder<K, V>", "signature": "CacheBasedDatasetBuilder<K, V> withKeepBinary(boolean isKeepBinary)", "full_signature": "public CacheBasedDatasetBuilder<K, V> withKeepBinary(boolean isKeepBinary)", "class_method_signature": "CacheBasedDatasetBuilder.withKeepBinary(boolean isKeepBinary)", "testcase": false, "constructor": false}, {"identifier": "withRetriesNumber", "parameters": "(int retries)", "modifiers": "public", "return": "CacheBasedDatasetBuilder<K, V>", "signature": "CacheBasedDatasetBuilder<K, V> withRetriesNumber(int retries)", "full_signature": "public CacheBasedDatasetBuilder<K, V> withRetriesNumber(int retries)", "class_method_signature": "CacheBasedDatasetBuilder.withRetriesNumber(int retries)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/dataset/impl/cache/CacheBasedDatasetBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "(\n        LearningEnvironmentBuilder envBuilder,\n        PartitionContextBuilder<K, V, C> partCtxBuilder,\n        PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment localLearningEnv)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "CacheBasedDataset<K, V, C, D>", "body": "@SuppressWarnings(\"unchecked\")\n    @Override public <C extends Serializable, D extends AutoCloseable> CacheBasedDataset<K, V, C, D> build(\n        LearningEnvironmentBuilder envBuilder,\n        PartitionContextBuilder<K, V, C> partCtxBuilder,\n        PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment localLearningEnv) {\n\n        UUID datasetId = UUID.randomUUID();\n\n        // Retrieves affinity function of the upstream Ignite Cache.\n        CacheConfiguration<K, V> upstreamCacheConfiguration = upstreamCache.getConfiguration(CacheConfiguration.class);\n        AffinityFunction upstreamCacheAffinity = upstreamCacheConfiguration.getAffinity();\n\n        // Creates dataset cache configuration with affinity function that mimics to affinity function of the upstream\n        // cache.\n        CacheConfiguration<Integer, C> datasetCacheConfiguration = new CacheConfiguration<>();\n        datasetCacheConfiguration.setName(String.format(DATASET_CACHE_TEMPLATE, upstreamCache.getName(), datasetId));\n        datasetCacheConfiguration.setAffinity(new DatasetAffinityFunctionWrapper(upstreamCacheAffinity));\n\n        IgniteCache<Integer, C> datasetCache = ignite.createCache(datasetCacheConfiguration);\n\n        ComputeUtils.initContext(\n            ignite,\n            upstreamCache.getName(),\n            transformerBuilder,\n            filter,\n            datasetCache.getName(),\n            partCtxBuilder,\n            envBuilder,\n            retries,\n            RETRY_INTERVAL,\n            upstreamKeepBinary,\n            localLearningEnv.deployingContext()\n        );\n\n        return new CacheBasedDataset<>(ignite, upstreamCache, filter, transformerBuilder, datasetCache, envBuilder, partDataBuilder, datasetId, upstreamKeepBinary, localLearningEnv, retries);\n    }", "signature": "CacheBasedDataset<K, V, C, D> build(\n        LearningEnvironmentBuilder envBuilder,\n        PartitionContextBuilder<K, V, C> partCtxBuilder,\n        PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment localLearningEnv)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public CacheBasedDataset<K, V, C, D> build(\n        LearningEnvironmentBuilder envBuilder,\n        PartitionContextBuilder<K, V, C> partCtxBuilder,\n        PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment localLearningEnv)", "class_method_signature": "CacheBasedDatasetBuilder.build(\n        LearningEnvironmentBuilder envBuilder,\n        PartitionContextBuilder<K, V, C> partCtxBuilder,\n        PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment localLearningEnv)", "testcase": false, "constructor": false, "invocations": ["randomUUID", "getConfiguration", "getAffinity", "setName", "format", "getName", "setAffinity", "createCache", "initContext", "getName", "getName", "deployingContext"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}