{"test_class": {"identifier": "JcrValueTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExecutionContext context;", "modifier": "private", "type": "ExecutionContext", "declarator": "context", "var_name": "context"}, {"original_string": "private ValueFactories factories;", "modifier": "private", "type": "ValueFactories", "declarator": "factories", "var_name": "factories"}, {"original_string": "private JcrValue value;", "modifier": "private", "type": "JcrValue", "declarator": "value", "var_name": "value"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/JcrValueTest.java"}, "test_case": {"identifier": "shouldNotProvideBooleanForDate", "parameters": "()", "modifiers": "@Test( expected = ValueFormatException.class ) public", "return": "void", "body": "@Test( expected = ValueFormatException.class )\n    public void shouldNotProvideBooleanForDate() throws Exception {\n        new JcrValue(factories, PropertyType.DATE, new Date()).getBoolean();\n    }", "signature": "void shouldNotProvideBooleanForDate()", "full_signature": "@Test( expected = ValueFormatException.class ) public void shouldNotProvideBooleanForDate()", "class_method_signature": "JcrValueTest.shouldNotProvideBooleanForDate()", "testcase": true, "constructor": false, "invocations": ["getBoolean"]}, "focal_class": {"identifier": "JcrValue", "superclass": "", "interfaces": "implements javax.jcr.Value", "fields": [{"original_string": "private final ValueFactories factories;", "modifier": "private final", "type": "ValueFactories", "declarator": "factories", "var_name": "factories"}, {"original_string": "private final int type;", "modifier": "private final", "type": "int", "declarator": "type", "var_name": "type"}, {"original_string": "private final Object value;", "modifier": "private final", "type": "Object", "declarator": "value", "var_name": "value"}, {"original_string": "private InputStream asStream = null;", "modifier": "private", "type": "InputStream", "declarator": "asStream = null", "var_name": "asStream"}], "methods": [{"identifier": "JcrValue", "parameters": "( ValueFactories factories,\n              int type,\n              Object value )", "modifiers": "", "return": "", "signature": " JcrValue( ValueFactories factories,\n              int type,\n              Object value )", "full_signature": "  JcrValue( ValueFactories factories,\n              int type,\n              Object value )", "class_method_signature": "JcrValue.JcrValue( ValueFactories factories,\n              int type,\n              Object value )", "testcase": false, "constructor": true}, {"identifier": "JcrValue", "parameters": "( ValueFactories factories,\n              Value value )", "modifiers": "", "return": "", "signature": " JcrValue( ValueFactories factories,\n              Value value )", "full_signature": "  JcrValue( ValueFactories factories,\n              Value value )", "class_method_signature": "JcrValue.JcrValue( ValueFactories factories,\n              Value value )", "testcase": false, "constructor": true}, {"identifier": "createValueFormatException", "parameters": "( Class<?> type )", "modifiers": "private", "return": "ValueFormatException", "signature": "ValueFormatException createValueFormatException( Class<?> type )", "full_signature": "private ValueFormatException createValueFormatException( Class<?> type )", "class_method_signature": "JcrValue.createValueFormatException( Class<?> type )", "testcase": false, "constructor": false}, {"identifier": "createValueFormatException", "parameters": "( org.modeshape.jcr.value.ValueFormatException vfe )", "modifiers": "private", "return": "ValueFormatException", "signature": "ValueFormatException createValueFormatException( org.modeshape.jcr.value.ValueFormatException vfe )", "full_signature": "private ValueFormatException createValueFormatException( org.modeshape.jcr.value.ValueFormatException vfe )", "class_method_signature": "JcrValue.createValueFormatException( org.modeshape.jcr.value.ValueFormatException vfe )", "testcase": false, "constructor": false}, {"identifier": "factories", "parameters": "()", "modifiers": "final", "return": "ValueFactories", "signature": "ValueFactories factories()", "full_signature": "final ValueFactories factories()", "class_method_signature": "JcrValue.factories()", "testcase": false, "constructor": false}, {"identifier": "value", "parameters": "()", "modifiers": "final", "return": "Object", "signature": "Object value()", "full_signature": "final Object value()", "class_method_signature": "JcrValue.value()", "testcase": false, "constructor": false}, {"identifier": "getBoolean", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getBoolean()", "full_signature": "@Override public boolean getBoolean()", "class_method_signature": "JcrValue.getBoolean()", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "()", "modifiers": "@Override public", "return": "Calendar", "signature": "Calendar getDate()", "full_signature": "@Override public Calendar getDate()", "class_method_signature": "JcrValue.getDate()", "testcase": false, "constructor": false}, {"identifier": "getDecimal", "parameters": "()", "modifiers": "@Override public", "return": "BigDecimal", "signature": "BigDecimal getDecimal()", "full_signature": "@Override public BigDecimal getDecimal()", "class_method_signature": "JcrValue.getDecimal()", "testcase": false, "constructor": false}, {"identifier": "getDouble", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getDouble()", "full_signature": "@Override public double getDouble()", "class_method_signature": "JcrValue.getDouble()", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getLength()", "full_signature": " long getLength()", "class_method_signature": "JcrValue.getLength()", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getLong()", "full_signature": "@Override public long getLong()", "class_method_signature": "JcrValue.getLong()", "testcase": false, "constructor": false}, {"identifier": "getStream", "parameters": "()", "modifiers": "@Override @SuppressWarnings(\"deprecation\") public", "return": "InputStream", "signature": "InputStream getStream()", "full_signature": "@Override @SuppressWarnings(\"deprecation\") public InputStream getStream()", "class_method_signature": "JcrValue.getStream()", "testcase": false, "constructor": false}, {"identifier": "getBinary", "parameters": "()", "modifiers": "@Override public", "return": "BinaryValue", "signature": "BinaryValue getBinary()", "full_signature": "@Override public BinaryValue getBinary()", "class_method_signature": "JcrValue.getBinary()", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getString()", "full_signature": "@Override public String getString()", "class_method_signature": "JcrValue.getString()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getType()", "full_signature": "@Override public int getType()", "class_method_signature": "JcrValue.getType()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "JcrValue.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( Object obj )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals( Object obj )", "full_signature": "@Override public boolean equals( Object obj )", "class_method_signature": "JcrValue.equals( Object obj )", "testcase": false, "constructor": false}, {"identifier": "withTypeAndValue", "parameters": "( int type,\n                                       Object value )", "modifiers": "private", "return": "JcrValue", "signature": "JcrValue withTypeAndValue( int type,\n                                       Object value )", "full_signature": "private JcrValue withTypeAndValue( int type,\n                                       Object value )", "class_method_signature": "JcrValue.withTypeAndValue( int type,\n                                       Object value )", "testcase": false, "constructor": false}, {"identifier": "asType", "parameters": "( int type )", "modifiers": "final", "return": "JcrValue", "signature": "JcrValue asType( int type )", "full_signature": "final JcrValue asType( int type )", "class_method_signature": "JcrValue.asType( int type )", "testcase": false, "constructor": false}, {"identifier": "asType", "parameters": "( int type,\n                           boolean force )", "modifiers": "final", "return": "JcrValue", "signature": "JcrValue asType( int type,\n                           boolean force )", "full_signature": "final JcrValue asType( int type,\n                           boolean force )", "class_method_signature": "JcrValue.asType( int type,\n                           boolean force )", "testcase": false, "constructor": false}, {"identifier": "valueToType", "parameters": "( int type,\n                                  Value value )", "modifiers": "protected", "return": "Object", "signature": "Object valueToType( int type,\n                                  Value value )", "full_signature": "protected Object valueToType( int type,\n                                  Value value )", "class_method_signature": "JcrValue.valueToType( int type,\n                                  Value value )", "testcase": false, "constructor": false}, {"identifier": "convertToType", "parameters": "( int type,\n                                    Object value )", "modifiers": "protected", "return": "Object", "signature": "Object convertToType( int type,\n                                    Object value )", "full_signature": "protected Object convertToType( int type,\n                                    Object value )", "class_method_signature": "JcrValue.convertToType( int type,\n                                    Object value )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "JcrValue.toString()", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/JcrValue.java"}, "focal_method": {"identifier": "getBoolean", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean getBoolean() throws ValueFormatException {\n        try {\n            boolean convertedValue = factories().getBooleanFactory().create(value);\n            return convertedValue;\n        } catch (RuntimeException error) {\n            throw createValueFormatException(boolean.class);\n        }\n    }", "signature": "boolean getBoolean()", "full_signature": "@Override public boolean getBoolean()", "class_method_signature": "JcrValue.getBoolean()", "testcase": false, "constructor": false, "invocations": ["create", "getBooleanFactory", "factories", "createValueFormatException"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}