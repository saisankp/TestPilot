{"test_class": {"identifier": "ConstraintTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final AddressTemplate TEMPLATE = AddressTemplate.of(\"j/l/p\");", "modifier": "private static final", "type": "AddressTemplate", "declarator": "TEMPLATE = AddressTemplate.of(\"j/l/p\")", "var_name": "TEMPLATE"}, {"original_string": "private static final String OPERATION = \"engage\";", "modifier": "private static final", "type": "String", "declarator": "OPERATION = \"engage\"", "var_name": "OPERATION"}, {"original_string": "private static final String ATTRIBUTE = \"NCC-1701-D\";", "modifier": "private static final", "type": "String", "declarator": "ATTRIBUTE = \"NCC-1701-D\"", "var_name": "ATTRIBUTE"}, {"original_string": "private static final String ENGAGE_DATA = \"executable(j/l/p:engage)\";", "modifier": "private static final", "type": "String", "declarator": "ENGAGE_DATA = \"executable(j/l/p:engage)\"", "var_name": "ENGAGE_DATA"}, {"original_string": "private static final String NCC_DATA = \"writable(j/l/p@NCC-1701-D)\";", "modifier": "private static final", "type": "String", "declarator": "NCC_DATA = \"writable(j/l/p@NCC-1701-D)\"", "var_name": "NCC_DATA"}, {"original_string": "private Constraint ex, wr;", "modifier": "private", "type": "Constraint", "declarator": "ex", "var_name": "ex"}], "file": "meta/src/test/java/org/jboss/hal/meta/security/ConstraintTest.java"}, "test_case": {"identifier": "parseNull", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void parseNull() {\n        Constraint.parse(null);\n    }", "signature": "void parseNull()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void parseNull()", "class_method_signature": "ConstraintTest.parseNull()", "testcase": true, "constructor": false, "invocations": ["parse"]}, "focal_class": {"identifier": "Constraint", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final RegExp CONSTRAINT_REGEX = RegExp.compile(\n            \"^(readable|writable|executable)\\\\(([\\\\w{}=*\\\\-\\\\/\\\\.]+)(:|@)([\\\\w\\\\-]+)\\\\)$\");", "modifier": "private static final", "type": "RegExp", "declarator": "CONSTRAINT_REGEX = RegExp.compile(\n            \"^(readable|writable|executable)\\\\(([\\\\w{}=*\\\\-\\\\/\\\\.]+)(:|@)([\\\\w\\\\-]+)\\\\)$\")", "var_name": "CONSTRAINT_REGEX"}, {"original_string": "private final AddressTemplate template;", "modifier": "private final", "type": "AddressTemplate", "declarator": "template", "var_name": "template"}, {"original_string": "private final Target target;", "modifier": "private final", "type": "Target", "declarator": "target", "var_name": "target"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final Permission permission;", "modifier": "private final", "type": "Permission", "declarator": "permission", "var_name": "permission"}], "methods": [{"identifier": "executable", "parameters": "(AddressTemplate template, String operation)", "modifiers": "public static", "return": "Constraint", "signature": "Constraint executable(AddressTemplate template, String operation)", "full_signature": "public static Constraint executable(AddressTemplate template, String operation)", "class_method_signature": "Constraint.executable(AddressTemplate template, String operation)", "testcase": false, "constructor": false}, {"identifier": "writable", "parameters": "(AddressTemplate template, String attribute)", "modifiers": "public static", "return": "Constraint", "signature": "Constraint writable(AddressTemplate template, String attribute)", "full_signature": "public static Constraint writable(AddressTemplate template, String attribute)", "class_method_signature": "Constraint.writable(AddressTemplate template, String attribute)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String input)", "modifiers": "@SuppressWarnings(\"DuplicateStringLiteralInspection\") public static", "return": "Constraint", "signature": "Constraint parse(String input)", "full_signature": "@SuppressWarnings(\"DuplicateStringLiteralInspection\") public static Constraint parse(String input)", "class_method_signature": "Constraint.parse(String input)", "testcase": false, "constructor": false}, {"identifier": "Constraint", "parameters": "(AddressTemplate template, String name, Target target, Permission permission)", "modifiers": "private", "return": "", "signature": " Constraint(AddressTemplate template, String name, Target target, Permission permission)", "full_signature": "private  Constraint(AddressTemplate template, String name, Target target, Permission permission)", "class_method_signature": "Constraint.Constraint(AddressTemplate template, String name, Target target, Permission permission)", "testcase": false, "constructor": true}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Constraint.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Constraint.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Constraint.toString()", "testcase": false, "constructor": false}, {"identifier": "data", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String data()", "full_signature": "public String data()", "class_method_signature": "Constraint.data()", "testcase": false, "constructor": false}, {"identifier": "getTemplate", "parameters": "()", "modifiers": "public", "return": "AddressTemplate", "signature": "AddressTemplate getTemplate()", "full_signature": "public AddressTemplate getTemplate()", "class_method_signature": "Constraint.getTemplate()", "testcase": false, "constructor": false}, {"identifier": "getTarget", "parameters": "()", "modifiers": "public", "return": "Target", "signature": "Target getTarget()", "full_signature": "public Target getTarget()", "class_method_signature": "Constraint.getTarget()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "Constraint.getName()", "testcase": false, "constructor": false}, {"identifier": "getPermission", "parameters": "()", "modifiers": "public", "return": "Permission", "signature": "Permission getPermission()", "full_signature": "public Permission getPermission()", "class_method_signature": "Constraint.getPermission()", "testcase": false, "constructor": false}], "file": "meta/src/main/java/org/jboss/hal/meta/security/Constraint.java"}, "focal_method": {"identifier": "parse", "parameters": "(String input)", "modifiers": "@SuppressWarnings(\"DuplicateStringLiteralInspection\") public static", "return": "Constraint", "body": "@SuppressWarnings(\"DuplicateStringLiteralInspection\")\n    public static Constraint parse(String input) throws IllegalArgumentException {\n        if (!CONSTRAINT_REGEX.test(input)) {\n            throw new IllegalArgumentException(\"Invalid constraint: \" + input);\n        }\n        MatchResult result = CONSTRAINT_REGEX.exec(input);\n        if (result.getGroupCount() != 5) {\n            throw new IllegalArgumentException(\"Invalid constraint: \" + input);\n        }\n        return new Constraint(AddressTemplate.of(result.getGroup(2)), result.getGroup(4),\n                Target.parse(result.getGroup(3)), Permission.valueOf(result.getGroup(1).toUpperCase()));\n    }", "signature": "Constraint parse(String input)", "full_signature": "@SuppressWarnings(\"DuplicateStringLiteralInspection\") public static Constraint parse(String input)", "class_method_signature": "Constraint.parse(String input)", "testcase": false, "constructor": false, "invocations": ["test", "exec", "getGroupCount", "of", "getGroup", "getGroup", "parse", "getGroup", "valueOf", "toUpperCase", "getGroup"]}, "repository": {"repo_id": 38317187, "url": "https://github.com/hal/console", "stars": 34, "created": "6/30/2015 3:26:19 PM +00:00", "updates": "2020-01-26T16:25:43+00:00", "fork": "False", "license": "licensed"}}