{"test_class": {"identifier": "DataTreeTest", "superclass": "extends ZKTestCase", "interfaces": "", "fields": [{"original_string": "protected static final Logger LOG = LoggerFactory.getLogger(DataTreeTest.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DataTreeTest.class)", "var_name": "LOG"}, {"original_string": "private DataTree dt;", "modifier": "private", "type": "DataTree", "declarator": "dt", "var_name": "dt"}], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java"}, "test_case": {"identifier": "testDumpEphemerals", "parameters": "()", "modifiers": "@Test(timeout = 60000) public", "return": "void", "body": "@Test(timeout = 60000)\n    public void testDumpEphemerals() throws Exception {\n        int count = 1000;\n        long session = 1000;\n        long zxid = 2000;\n        final DataTree dataTree = new DataTree();\n        LOG.info(\"Create {} zkclient sessions and its ephemeral nodes\", count);\n        createEphemeralNode(session, dataTree, count);\n        final AtomicBoolean exceptionDuringDumpEphemerals = new AtomicBoolean(\n                false);\n        final AtomicBoolean running = new AtomicBoolean(true);\n        Thread thread = new Thread() {\n            public void run() {\n                PrintWriter pwriter = new PrintWriter(new StringWriter());\n                try {\n                    while (running.get()) {\n                        dataTree.dumpEphemerals(pwriter);\n                    }\n                } catch (Exception e) {\n                    LOG.error(\"Received exception while dumpEphemerals!\", e);\n                    exceptionDuringDumpEphemerals.set(true);\n                }\n            };\n        };\n        thread.start();\n        LOG.debug(\"Killing {} zkclient sessions and its ephemeral nodes\", count);\n        killZkClientSession(session, zxid, dataTree, count);\n        running.set(false);\n        thread.join();\n        Assert.assertFalse(\"Should have got exception while dumpEphemerals!\",\n                exceptionDuringDumpEphemerals.get());\n    }", "signature": "void testDumpEphemerals()", "full_signature": "@Test(timeout = 60000) public void testDumpEphemerals()", "class_method_signature": "DataTreeTest.testDumpEphemerals()", "testcase": true, "constructor": false, "invocations": ["info", "createEphemeralNode", "get", "dumpEphemerals", "error", "set", "start", "debug", "killZkClientSession", "set", "join", "assertFalse", "get"]}, "focal_class": {"identifier": "DataTree", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DataTree.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DataTree.class)", "var_name": "LOG"}, {"original_string": "private final ConcurrentHashMap<String, DataNode> nodes =\n        new ConcurrentHashMap<String, DataNode>();", "modifier": "private final", "type": "ConcurrentHashMap<String, DataNode>", "declarator": "nodes =\n        new ConcurrentHashMap<String, DataNode>()", "var_name": "nodes"}, {"original_string": "private final WatchManager dataWatches = new WatchManager();", "modifier": "private final", "type": "WatchManager", "declarator": "dataWatches = new WatchManager()", "var_name": "dataWatches"}, {"original_string": "private final WatchManager childWatches = new WatchManager();", "modifier": "private final", "type": "WatchManager", "declarator": "childWatches = new WatchManager()", "var_name": "childWatches"}, {"original_string": "private static final String rootZookeeper = \"/\";", "modifier": "private static final", "type": "String", "declarator": "rootZookeeper = \"/\"", "var_name": "rootZookeeper"}, {"original_string": "private static final String procZookeeper = Quotas.procZookeeper;", "modifier": "private static final", "type": "String", "declarator": "procZookeeper = Quotas.procZookeeper", "var_name": "procZookeeper"}, {"original_string": "private static final String procChildZookeeper = procZookeeper.substring(1);", "modifier": "private static final", "type": "String", "declarator": "procChildZookeeper = procZookeeper.substring(1)", "var_name": "procChildZookeeper"}, {"original_string": "private static final String quotaZookeeper = Quotas.quotaZookeeper;", "modifier": "private static final", "type": "String", "declarator": "quotaZookeeper = Quotas.quotaZookeeper", "var_name": "quotaZookeeper"}, {"original_string": "private static final String quotaChildZookeeper = quotaZookeeper\n            .substring(procZookeeper.length() + 1);", "modifier": "private static final", "type": "String", "declarator": "quotaChildZookeeper = quotaZookeeper\n            .substring(procZookeeper.length() + 1)", "var_name": "quotaChildZookeeper"}, {"original_string": "private static final String configZookeeper = ZooDefs.CONFIG_NODE;", "modifier": "private static final", "type": "String", "declarator": "configZookeeper = ZooDefs.CONFIG_NODE", "var_name": "configZookeeper"}, {"original_string": "private static final String configChildZookeeper = configZookeeper\n            .substring(procZookeeper.length() + 1);", "modifier": "private static final", "type": "String", "declarator": "configChildZookeeper = configZookeeper\n            .substring(procZookeeper.length() + 1)", "var_name": "configChildZookeeper"}, {"original_string": "private final PathTrie pTrie = new PathTrie();", "modifier": "private final", "type": "PathTrie", "declarator": "pTrie = new PathTrie()", "var_name": "pTrie"}, {"original_string": "private final Map<Long, HashSet<String>> ephemerals =\n        new ConcurrentHashMap<Long, HashSet<String>>();", "modifier": "private final", "type": "Map<Long, HashSet<String>>", "declarator": "ephemerals =\n        new ConcurrentHashMap<Long, HashSet<String>>()", "var_name": "ephemerals"}, {"original_string": "private final Set<String> containers =\n            Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());", "modifier": "private final", "type": "Set<String>", "declarator": "containers =\n            Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>())", "var_name": "containers"}, {"original_string": "private final Set<String> ttls =\n            Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());", "modifier": "private final", "type": "Set<String>", "declarator": "ttls =\n            Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>())", "var_name": "ttls"}, {"original_string": "private final ReferenceCountedACLCache aclCache = new ReferenceCountedACLCache();", "modifier": "private final", "type": "ReferenceCountedACLCache", "declarator": "aclCache = new ReferenceCountedACLCache()", "var_name": "aclCache"}, {"original_string": "private DataNode root = new DataNode(new byte[0], -1L, new StatPersisted());", "modifier": "private", "type": "DataNode", "declarator": "root = new DataNode(new byte[0], -1L, new StatPersisted())", "var_name": "root"}, {"original_string": "private final DataNode procDataNode = new DataNode(new byte[0], -1L, new StatPersisted());", "modifier": "private final", "type": "DataNode", "declarator": "procDataNode = new DataNode(new byte[0], -1L, new StatPersisted())", "var_name": "procDataNode"}, {"original_string": "private final DataNode quotaDataNode = new DataNode(new byte[0], -1L, new StatPersisted());", "modifier": "private final", "type": "DataNode", "declarator": "quotaDataNode = new DataNode(new byte[0], -1L, new StatPersisted())", "var_name": "quotaDataNode"}, {"original_string": "public volatile long lastProcessedZxid = 0;", "modifier": "public volatile", "type": "long", "declarator": "lastProcessedZxid = 0", "var_name": "lastProcessedZxid"}], "methods": [{"identifier": "getEphemerals", "parameters": "(long sessionId)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Set<String>", "signature": "Set<String> getEphemerals(long sessionId)", "full_signature": "@SuppressWarnings(\"unchecked\") public Set<String> getEphemerals(long sessionId)", "class_method_signature": "DataTree.getEphemerals(long sessionId)", "testcase": false, "constructor": false}, {"identifier": "getContainers", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getContainers()", "full_signature": "public Set<String> getContainers()", "class_method_signature": "DataTree.getContainers()", "testcase": false, "constructor": false}, {"identifier": "getTtls", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getTtls()", "full_signature": "public Set<String> getTtls()", "class_method_signature": "DataTree.getTtls()", "testcase": false, "constructor": false}, {"identifier": "getSessions", "parameters": "()", "modifiers": "public", "return": "Collection<Long>", "signature": "Collection<Long> getSessions()", "full_signature": "public Collection<Long> getSessions()", "class_method_signature": "DataTree.getSessions()", "testcase": false, "constructor": false}, {"identifier": "getNode", "parameters": "(String path)", "modifiers": "public", "return": "DataNode", "signature": "DataNode getNode(String path)", "full_signature": "public DataNode getNode(String path)", "class_method_signature": "DataTree.getNode(String path)", "testcase": false, "constructor": false}, {"identifier": "getNodeCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNodeCount()", "full_signature": "public int getNodeCount()", "class_method_signature": "DataTree.getNodeCount()", "testcase": false, "constructor": false}, {"identifier": "getWatchCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getWatchCount()", "full_signature": "public int getWatchCount()", "class_method_signature": "DataTree.getWatchCount()", "testcase": false, "constructor": false}, {"identifier": "getEphemeralsCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getEphemeralsCount()", "full_signature": "public int getEphemeralsCount()", "class_method_signature": "DataTree.getEphemeralsCount()", "testcase": false, "constructor": false}, {"identifier": "approximateDataSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long approximateDataSize()", "full_signature": "public long approximateDataSize()", "class_method_signature": "DataTree.approximateDataSize()", "testcase": false, "constructor": false}, {"identifier": "DataTree", "parameters": "()", "modifiers": "public", "return": "", "signature": " DataTree()", "full_signature": "public  DataTree()", "class_method_signature": "DataTree.DataTree()", "testcase": false, "constructor": true}, {"identifier": "addConfigNode", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void addConfigNode()", "full_signature": "public void addConfigNode()", "class_method_signature": "DataTree.addConfigNode()", "testcase": false, "constructor": false}, {"identifier": "isSpecialPath", "parameters": "(String path)", "modifiers": "", "return": "boolean", "signature": "boolean isSpecialPath(String path)", "full_signature": " boolean isSpecialPath(String path)", "class_method_signature": "DataTree.isSpecialPath(String path)", "testcase": false, "constructor": false}, {"identifier": "copyStatPersisted", "parameters": "(StatPersisted from, StatPersisted to)", "modifiers": "static public", "return": "void", "signature": "void copyStatPersisted(StatPersisted from, StatPersisted to)", "full_signature": "static public void copyStatPersisted(StatPersisted from, StatPersisted to)", "class_method_signature": "DataTree.copyStatPersisted(StatPersisted from, StatPersisted to)", "testcase": false, "constructor": false}, {"identifier": "copyStat", "parameters": "(Stat from, Stat to)", "modifiers": "static public", "return": "void", "signature": "void copyStat(Stat from, Stat to)", "full_signature": "static public void copyStat(Stat from, Stat to)", "class_method_signature": "DataTree.copyStat(Stat from, Stat to)", "testcase": false, "constructor": false}, {"identifier": "updateCount", "parameters": "(String lastPrefix, int diff)", "modifiers": "public", "return": "void", "signature": "void updateCount(String lastPrefix, int diff)", "full_signature": "public void updateCount(String lastPrefix, int diff)", "class_method_signature": "DataTree.updateCount(String lastPrefix, int diff)", "testcase": false, "constructor": false}, {"identifier": "updateBytes", "parameters": "(String lastPrefix, long diff)", "modifiers": "public", "return": "void", "signature": "void updateBytes(String lastPrefix, long diff)", "full_signature": "public void updateBytes(String lastPrefix, long diff)", "class_method_signature": "DataTree.updateBytes(String lastPrefix, long diff)", "testcase": false, "constructor": false}, {"identifier": "createNode", "parameters": "(final String path, byte data[], List<ACL> acl,\n            long ephemeralOwner, int parentCVersion, long zxid, long time)", "modifiers": "public", "return": "void", "signature": "void createNode(final String path, byte data[], List<ACL> acl,\n            long ephemeralOwner, int parentCVersion, long zxid, long time)", "full_signature": "public void createNode(final String path, byte data[], List<ACL> acl,\n            long ephemeralOwner, int parentCVersion, long zxid, long time)", "class_method_signature": "DataTree.createNode(final String path, byte data[], List<ACL> acl,\n            long ephemeralOwner, int parentCVersion, long zxid, long time)", "testcase": false, "constructor": false}, {"identifier": "createNode", "parameters": "(final String path, byte data[], List<ACL> acl,\n            long ephemeralOwner, int parentCVersion, long zxid, long time, Stat outputStat)", "modifiers": "public", "return": "void", "signature": "void createNode(final String path, byte data[], List<ACL> acl,\n            long ephemeralOwner, int parentCVersion, long zxid, long time, Stat outputStat)", "full_signature": "public void createNode(final String path, byte data[], List<ACL> acl,\n            long ephemeralOwner, int parentCVersion, long zxid, long time, Stat outputStat)", "class_method_signature": "DataTree.createNode(final String path, byte data[], List<ACL> acl,\n            long ephemeralOwner, int parentCVersion, long zxid, long time, Stat outputStat)", "testcase": false, "constructor": false}, {"identifier": "deleteNode", "parameters": "(String path, long zxid)", "modifiers": "public", "return": "void", "signature": "void deleteNode(String path, long zxid)", "full_signature": "public void deleteNode(String path, long zxid)", "class_method_signature": "DataTree.deleteNode(String path, long zxid)", "testcase": false, "constructor": false}, {"identifier": "setData", "parameters": "(String path, byte data[], int version, long zxid,\n            long time)", "modifiers": "public", "return": "Stat", "signature": "Stat setData(String path, byte data[], int version, long zxid,\n            long time)", "full_signature": "public Stat setData(String path, byte data[], int version, long zxid,\n            long time)", "class_method_signature": "DataTree.setData(String path, byte data[], int version, long zxid,\n            long time)", "testcase": false, "constructor": false}, {"identifier": "getMaxPrefixWithQuota", "parameters": "(String path)", "modifiers": "public", "return": "String", "signature": "String getMaxPrefixWithQuota(String path)", "full_signature": "public String getMaxPrefixWithQuota(String path)", "class_method_signature": "DataTree.getMaxPrefixWithQuota(String path)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(String path, Stat stat, Watcher watcher)", "modifiers": "public", "return": "byte[]", "signature": "byte[] getData(String path, Stat stat, Watcher watcher)", "full_signature": "public byte[] getData(String path, Stat stat, Watcher watcher)", "class_method_signature": "DataTree.getData(String path, Stat stat, Watcher watcher)", "testcase": false, "constructor": false}, {"identifier": "statNode", "parameters": "(String path, Watcher watcher)", "modifiers": "public", "return": "Stat", "signature": "Stat statNode(String path, Watcher watcher)", "full_signature": "public Stat statNode(String path, Watcher watcher)", "class_method_signature": "DataTree.statNode(String path, Watcher watcher)", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "(String path, Stat stat, Watcher watcher)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getChildren(String path, Stat stat, Watcher watcher)", "full_signature": "public List<String> getChildren(String path, Stat stat, Watcher watcher)", "class_method_signature": "DataTree.getChildren(String path, Stat stat, Watcher watcher)", "testcase": false, "constructor": false}, {"identifier": "setACL", "parameters": "(String path, List<ACL> acl, int version)", "modifiers": "public", "return": "Stat", "signature": "Stat setACL(String path, List<ACL> acl, int version)", "full_signature": "public Stat setACL(String path, List<ACL> acl, int version)", "class_method_signature": "DataTree.setACL(String path, List<ACL> acl, int version)", "testcase": false, "constructor": false}, {"identifier": "getACL", "parameters": "(String path, Stat stat)", "modifiers": "public", "return": "List<ACL>", "signature": "List<ACL> getACL(String path, Stat stat)", "full_signature": "public List<ACL> getACL(String path, Stat stat)", "class_method_signature": "DataTree.getACL(String path, Stat stat)", "testcase": false, "constructor": false}, {"identifier": "getACL", "parameters": "(DataNode node)", "modifiers": "public", "return": "List<ACL>", "signature": "List<ACL> getACL(DataNode node)", "full_signature": "public List<ACL> getACL(DataNode node)", "class_method_signature": "DataTree.getACL(DataNode node)", "testcase": false, "constructor": false}, {"identifier": "aclCacheSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int aclCacheSize()", "full_signature": "public int aclCacheSize()", "class_method_signature": "DataTree.aclCacheSize()", "testcase": false, "constructor": false}, {"identifier": "processTxn", "parameters": "(TxnHeader header, Record txn)", "modifiers": "public", "return": "ProcessTxnResult", "signature": "ProcessTxnResult processTxn(TxnHeader header, Record txn)", "full_signature": "public ProcessTxnResult processTxn(TxnHeader header, Record txn)", "class_method_signature": "DataTree.processTxn(TxnHeader header, Record txn)", "testcase": false, "constructor": false}, {"identifier": "processTxn", "parameters": "(TxnHeader header, Record txn, boolean isSubTxn)", "modifiers": "public", "return": "ProcessTxnResult", "signature": "ProcessTxnResult processTxn(TxnHeader header, Record txn, boolean isSubTxn)", "full_signature": "public ProcessTxnResult processTxn(TxnHeader header, Record txn, boolean isSubTxn)", "class_method_signature": "DataTree.processTxn(TxnHeader header, Record txn, boolean isSubTxn)", "testcase": false, "constructor": false}, {"identifier": "killSession", "parameters": "(long session, long zxid)", "modifiers": "", "return": "void", "signature": "void killSession(long session, long zxid)", "full_signature": " void killSession(long session, long zxid)", "class_method_signature": "DataTree.killSession(long session, long zxid)", "testcase": false, "constructor": false}, {"identifier": "getCounts", "parameters": "(String path, Counts counts)", "modifiers": "private", "return": "void", "signature": "void getCounts(String path, Counts counts)", "full_signature": "private void getCounts(String path, Counts counts)", "class_method_signature": "DataTree.getCounts(String path, Counts counts)", "testcase": false, "constructor": false}, {"identifier": "updateQuotaForPath", "parameters": "(String path)", "modifiers": "private", "return": "void", "signature": "void updateQuotaForPath(String path)", "full_signature": "private void updateQuotaForPath(String path)", "class_method_signature": "DataTree.updateQuotaForPath(String path)", "testcase": false, "constructor": false}, {"identifier": "traverseNode", "parameters": "(String path)", "modifiers": "private", "return": "void", "signature": "void traverseNode(String path)", "full_signature": "private void traverseNode(String path)", "class_method_signature": "DataTree.traverseNode(String path)", "testcase": false, "constructor": false}, {"identifier": "setupQuota", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setupQuota()", "full_signature": "private void setupQuota()", "class_method_signature": "DataTree.setupQuota()", "testcase": false, "constructor": false}, {"identifier": "serializeNode", "parameters": "(OutputArchive oa, StringBuilder path)", "modifiers": "", "return": "void", "signature": "void serializeNode(OutputArchive oa, StringBuilder path)", "full_signature": " void serializeNode(OutputArchive oa, StringBuilder path)", "class_method_signature": "DataTree.serializeNode(OutputArchive oa, StringBuilder path)", "testcase": false, "constructor": false}, {"identifier": "serializeNodeData", "parameters": "(OutputArchive oa, String path, DataNode node)", "modifiers": "public", "return": "void", "signature": "void serializeNodeData(OutputArchive oa, String path, DataNode node)", "full_signature": "public void serializeNodeData(OutputArchive oa, String path, DataNode node)", "class_method_signature": "DataTree.serializeNodeData(OutputArchive oa, String path, DataNode node)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(OutputArchive oa, String tag)", "modifiers": "public", "return": "void", "signature": "void serialize(OutputArchive oa, String tag)", "full_signature": "public void serialize(OutputArchive oa, String tag)", "class_method_signature": "DataTree.serialize(OutputArchive oa, String tag)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(InputArchive ia, String tag)", "modifiers": "public", "return": "void", "signature": "void deserialize(InputArchive ia, String tag)", "full_signature": "public void deserialize(InputArchive ia, String tag)", "class_method_signature": "DataTree.deserialize(InputArchive ia, String tag)", "testcase": false, "constructor": false}, {"identifier": "dumpWatchesSummary", "parameters": "(PrintWriter pwriter)", "modifiers": "public synchronized", "return": "void", "signature": "void dumpWatchesSummary(PrintWriter pwriter)", "full_signature": "public synchronized void dumpWatchesSummary(PrintWriter pwriter)", "class_method_signature": "DataTree.dumpWatchesSummary(PrintWriter pwriter)", "testcase": false, "constructor": false}, {"identifier": "dumpWatches", "parameters": "(PrintWriter pwriter, boolean byPath)", "modifiers": "public synchronized", "return": "void", "signature": "void dumpWatches(PrintWriter pwriter, boolean byPath)", "full_signature": "public synchronized void dumpWatches(PrintWriter pwriter, boolean byPath)", "class_method_signature": "DataTree.dumpWatches(PrintWriter pwriter, boolean byPath)", "testcase": false, "constructor": false}, {"identifier": "getWatches", "parameters": "()", "modifiers": "public synchronized", "return": "WatchesReport", "signature": "WatchesReport getWatches()", "full_signature": "public synchronized WatchesReport getWatches()", "class_method_signature": "DataTree.getWatches()", "testcase": false, "constructor": false}, {"identifier": "getWatchesByPath", "parameters": "()", "modifiers": "public synchronized", "return": "WatchesPathReport", "signature": "WatchesPathReport getWatchesByPath()", "full_signature": "public synchronized WatchesPathReport getWatchesByPath()", "class_method_signature": "DataTree.getWatchesByPath()", "testcase": false, "constructor": false}, {"identifier": "getWatchesSummary", "parameters": "()", "modifiers": "public synchronized", "return": "WatchesSummary", "signature": "WatchesSummary getWatchesSummary()", "full_signature": "public synchronized WatchesSummary getWatchesSummary()", "class_method_signature": "DataTree.getWatchesSummary()", "testcase": false, "constructor": false}, {"identifier": "dumpEphemerals", "parameters": "(PrintWriter pwriter)", "modifiers": "public", "return": "void", "signature": "void dumpEphemerals(PrintWriter pwriter)", "full_signature": "public void dumpEphemerals(PrintWriter pwriter)", "class_method_signature": "DataTree.dumpEphemerals(PrintWriter pwriter)", "testcase": false, "constructor": false}, {"identifier": "getEphemerals", "parameters": "()", "modifiers": "public", "return": "Map<Long, Set<String>>", "signature": "Map<Long, Set<String>> getEphemerals()", "full_signature": "public Map<Long, Set<String>> getEphemerals()", "class_method_signature": "DataTree.getEphemerals()", "testcase": false, "constructor": false}, {"identifier": "removeCnxn", "parameters": "(Watcher watcher)", "modifiers": "public", "return": "void", "signature": "void removeCnxn(Watcher watcher)", "full_signature": "public void removeCnxn(Watcher watcher)", "class_method_signature": "DataTree.removeCnxn(Watcher watcher)", "testcase": false, "constructor": false}, {"identifier": "setWatches", "parameters": "(long relativeZxid, List<String> dataWatches,\n            List<String> existWatches, List<String> childWatches,\n            Watcher watcher)", "modifiers": "public", "return": "void", "signature": "void setWatches(long relativeZxid, List<String> dataWatches,\n            List<String> existWatches, List<String> childWatches,\n            Watcher watcher)", "full_signature": "public void setWatches(long relativeZxid, List<String> dataWatches,\n            List<String> existWatches, List<String> childWatches,\n            Watcher watcher)", "class_method_signature": "DataTree.setWatches(long relativeZxid, List<String> dataWatches,\n            List<String> existWatches, List<String> childWatches,\n            Watcher watcher)", "testcase": false, "constructor": false}, {"identifier": "setCversionPzxid", "parameters": "(String path, int newCversion, long zxid)", "modifiers": "public", "return": "void", "signature": "void setCversionPzxid(String path, int newCversion, long zxid)", "full_signature": "public void setCversionPzxid(String path, int newCversion, long zxid)", "class_method_signature": "DataTree.setCversionPzxid(String path, int newCversion, long zxid)", "testcase": false, "constructor": false}, {"identifier": "containsWatcher", "parameters": "(String path, WatcherType type, Watcher watcher)", "modifiers": "public", "return": "boolean", "signature": "boolean containsWatcher(String path, WatcherType type, Watcher watcher)", "full_signature": "public boolean containsWatcher(String path, WatcherType type, Watcher watcher)", "class_method_signature": "DataTree.containsWatcher(String path, WatcherType type, Watcher watcher)", "testcase": false, "constructor": false}, {"identifier": "removeWatch", "parameters": "(String path, WatcherType type, Watcher watcher)", "modifiers": "public", "return": "boolean", "signature": "boolean removeWatch(String path, WatcherType type, Watcher watcher)", "full_signature": "public boolean removeWatch(String path, WatcherType type, Watcher watcher)", "class_method_signature": "DataTree.removeWatch(String path, WatcherType type, Watcher watcher)", "testcase": false, "constructor": false}, {"identifier": "getReferenceCountedAclCache", "parameters": "()", "modifiers": "public", "return": "ReferenceCountedACLCache", "signature": "ReferenceCountedACLCache getReferenceCountedAclCache()", "full_signature": "public ReferenceCountedACLCache getReferenceCountedAclCache()", "class_method_signature": "DataTree.getReferenceCountedAclCache()", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java"}, "focal_method": {"identifier": "dumpEphemerals", "parameters": "(PrintWriter pwriter)", "modifiers": "public", "return": "void", "body": "public void dumpEphemerals(PrintWriter pwriter) {\n        pwriter.println(\"Sessions with Ephemerals (\"\n                + ephemerals.keySet().size() + \"):\");\n        for (Entry<Long, HashSet<String>> entry : ephemerals.entrySet()) {\n            pwriter.print(\"0x\" + Long.toHexString(entry.getKey()));\n            pwriter.println(\":\");\n            HashSet<String> tmp = entry.getValue();\n            if (tmp != null) {\n                synchronized (tmp) {\n                    for (String path : tmp) {\n                        pwriter.println(\"\\t\" + path);\n                    }\n                }\n            }\n        }\n    }", "signature": "void dumpEphemerals(PrintWriter pwriter)", "full_signature": "public void dumpEphemerals(PrintWriter pwriter)", "class_method_signature": "DataTree.dumpEphemerals(PrintWriter pwriter)", "testcase": false, "constructor": false, "invocations": ["println", "size", "keySet", "entrySet", "print", "toHexString", "getKey", "println", "getValue", "println"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}