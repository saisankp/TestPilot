{"test_class": {"identifier": "ScreenViewLayerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int SCREEN_VIEW_WIDTH = 200;", "modifier": "public static final", "type": "int", "declarator": "SCREEN_VIEW_WIDTH = 200", "var_name": "SCREEN_VIEW_WIDTH"}, {"original_string": "public static final int SCREEN_VIEW_HEIGHT = 200;", "modifier": "public static final", "type": "int", "declarator": "SCREEN_VIEW_HEIGHT = 200", "var_name": "SCREEN_VIEW_HEIGHT"}, {"original_string": "public static final int IMAGE_WIDTH = 500;", "modifier": "public static final", "type": "int", "declarator": "IMAGE_WIDTH = 500", "var_name": "IMAGE_WIDTH"}, {"original_string": "public static final int IMAGE_HEIGHT = 500;", "modifier": "public static final", "type": "int", "declarator": "IMAGE_HEIGHT = 500", "var_name": "IMAGE_HEIGHT"}, {"original_string": "public static final double SCALE = SCREEN_VIEW_HEIGHT / (double)IMAGE_HEIGHT;", "modifier": "public static final", "type": "double", "declarator": "SCALE = SCREEN_VIEW_HEIGHT / (double)IMAGE_HEIGHT", "var_name": "SCALE"}, {"original_string": "private static final Rectangle FULL_SIZE = new Rectangle(IMAGE_WIDTH, IMAGE_HEIGHT);", "modifier": "private static final", "type": "Rectangle", "declarator": "FULL_SIZE = new Rectangle(IMAGE_WIDTH, IMAGE_HEIGHT)", "var_name": "FULL_SIZE"}, {"original_string": "private Disposable myDisposable =  Disposer.newDisposable();", "modifier": "private", "type": "Disposable", "declarator": "myDisposable =  Disposer.newDisposable()", "var_name": "myDisposable"}], "file": "designer/testSrc/com/android/tools/idea/uibuilder/surface/ScreenViewLayerTest.java"}, "test_case": {"identifier": "cancelPreviewTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void cancelPreviewTest() {\n    VirtualTimeScheduler timeScheduler = new VirtualTimeScheduler();\n    Ref<Rectangle> screenViewSize = new Ref<>(scaleRectangle(FULL_SIZE, SCALE));\n\n    // Create a high quality image bigger than the screenView that will be scaled.\n    ImagePool.Image imageHQ = getTestImage(IMAGE_WIDTH, IMAGE_HEIGHT);\n    ImagePool.Image imageNoScale = getTestImage(SCREEN_VIEW_WIDTH, SCREEN_VIEW_HEIGHT);\n\n    ScreenView screenView = createScreenViewMock(screenViewSize, createRenderResultMock(imageHQ), createRenderResultMock(imageNoScale));\n    ScreenViewLayer layer = new ScreenViewLayer(screenView, timeScheduler);\n\n    //noinspection UndesirableClassUsage\n    BufferedImage output = new BufferedImage(SCREEN_VIEW_WIDTH, SCREEN_VIEW_HEIGHT, BufferedImage.TYPE_INT_ARGB);\n    Graphics2D g = createGraphicsAndClean(output, screenViewSize.get());\n    layer.paint(g);\n\n    // This has scheduled a task to resize the image\n    assertEquals(1, timeScheduler.getActionsQueued());\n    // Advance time without triggering the debounce timeout\n    timeScheduler.advanceBy(30, TimeUnit.MILLISECONDS);\n    assertEquals(1, timeScheduler.getActionsQueued());\n\n    // Get a new image that does not need resizing so it will cancel the existing timer\n    layer.paint(g);\n    assertEquals(0, timeScheduler.getActionsQueued());\n  }", "signature": "void cancelPreviewTest()", "full_signature": "@Test public void cancelPreviewTest()", "class_method_signature": "ScreenViewLayerTest.cancelPreviewTest()", "testcase": true, "constructor": false, "invocations": ["scaleRectangle", "getTestImage", "getTestImage", "createScreenViewMock", "createRenderResultMock", "createRenderResultMock", "createGraphicsAndClean", "get", "paint", "assertEquals", "getActionsQueued", "advanceBy", "assertEquals", "getActionsQueued", "paint", "assertEquals", "getActionsQueued"]}, "focal_class": {"identifier": "ScreenViewLayer", "superclass": "extends Layer", "interfaces": "", "fields": [{"original_string": "public final static Map<RenderingHints.Key, Object> HQ_RENDERING_HINTS = ImmutableMap.of(\n    RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON,\n    RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY,\n    RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR\n  );", "modifier": "public final static", "type": "Map<RenderingHints.Key, Object>", "declarator": "HQ_RENDERING_HINTS = ImmutableMap.of(\n    RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON,\n    RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY,\n    RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR\n  )", "var_name": "HQ_RENDERING_HINTS"}, {"original_string": "public static final int REQUEST_SCALE_DEBOUNCE_TIME_IN_MS = 300;", "modifier": "public static final", "type": "int", "declarator": "REQUEST_SCALE_DEBOUNCE_TIME_IN_MS = 300", "var_name": "REQUEST_SCALE_DEBOUNCE_TIME_IN_MS"}, {"original_string": "private final ScreenView myScreenView;", "modifier": "private final", "type": "ScreenView", "declarator": "myScreenView", "var_name": "myScreenView"}, {"original_string": "@Nullable private BufferedImage myCachedVisibleImage;", "modifier": "@Nullable private", "type": "BufferedImage", "declarator": "myCachedVisibleImage", "var_name": "myCachedVisibleImage"}, {"original_string": "@Nullable private RenderResult myLastRenderResult;", "modifier": "@Nullable private", "type": "RenderResult", "declarator": "myLastRenderResult", "var_name": "myLastRenderResult"}, {"original_string": "private final ScheduledExecutorService myScheduledExecutorService;", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "myScheduledExecutorService", "var_name": "myScheduledExecutorService"}, {"original_string": "private final RescaleRunnable myRescaleRunnable = new RescaleRunnable(this::onScaledResultReady);", "modifier": "private final", "type": "RescaleRunnable", "declarator": "myRescaleRunnable = new RescaleRunnable(this::onScaledResultReady)", "var_name": "myRescaleRunnable"}, {"original_string": "@Nullable private ScheduledFuture<?> myScheduledFuture;", "modifier": "@Nullable private", "type": "ScheduledFuture<?>", "declarator": "myScheduledFuture", "var_name": "myScheduledFuture"}, {"original_string": "private final Rectangle myScreenViewVisibleRect = new Rectangle();", "modifier": "private final", "type": "Rectangle", "declarator": "myScreenViewVisibleRect = new Rectangle()", "var_name": "myScreenViewVisibleRect"}, {"original_string": "private final Dimension myScreenViewSize = new Dimension();", "modifier": "private final", "type": "Dimension", "declarator": "myScreenViewSize = new Dimension()", "var_name": "myScreenViewSize"}, {"original_string": "private final Rectangle myCachedScreenViewDisplayRect = new Rectangle();", "modifier": "private final", "type": "Rectangle", "declarator": "myCachedScreenViewDisplayRect = new Rectangle()", "var_name": "myCachedScreenViewDisplayRect"}, {"original_string": "private double myLastScale;", "modifier": "private", "type": "double", "declarator": "myLastScale", "var_name": "myLastScale"}, {"original_string": "private static final Color CLEAR_BACKGROUND = new Color(255, 255, 255, 0);", "modifier": "private static final", "type": "Color", "declarator": "CLEAR_BACKGROUND = new Color(255, 255, 255, 0)", "var_name": "CLEAR_BACKGROUND"}], "methods": [{"identifier": "ScreenViewLayer", "parameters": "(@NotNull ScreenView screenView)", "modifiers": "public", "return": "", "signature": " ScreenViewLayer(@NotNull ScreenView screenView)", "full_signature": "public  ScreenViewLayer(@NotNull ScreenView screenView)", "class_method_signature": "ScreenViewLayer.ScreenViewLayer(@NotNull ScreenView screenView)", "testcase": false, "constructor": true}, {"identifier": "ScreenViewLayer", "parameters": "(@NotNull ScreenView screenView, @Nullable ScheduledExecutorService executor)", "modifiers": "@VisibleForTesting", "return": "", "signature": " ScreenViewLayer(@NotNull ScreenView screenView, @Nullable ScheduledExecutorService executor)", "full_signature": "@VisibleForTesting  ScreenViewLayer(@NotNull ScreenView screenView, @Nullable ScheduledExecutorService executor)", "class_method_signature": "ScreenViewLayer.ScreenViewLayer(@NotNull ScreenView screenView, @Nullable ScheduledExecutorService executor)", "testcase": false, "constructor": true}, {"identifier": "getPreviewImage", "parameters": "(@NotNull GraphicsConfiguration configuration,\n                                               @NotNull BufferedImage renderedImage,\n                                               int screenViewX, int screenViewY,\n                                               @NotNull Rectangle screenViewVisibleSize,\n                                               double xScaleFactor, double yScaleFactor,\n                                               @Nullable BufferedImage existingBuffer,\n                                               boolean screenViewHasBorderLayer)", "modifiers": "@NotNull private static", "return": "BufferedImage", "signature": "BufferedImage getPreviewImage(@NotNull GraphicsConfiguration configuration,\n                                               @NotNull BufferedImage renderedImage,\n                                               int screenViewX, int screenViewY,\n                                               @NotNull Rectangle screenViewVisibleSize,\n                                               double xScaleFactor, double yScaleFactor,\n                                               @Nullable BufferedImage existingBuffer,\n                                               boolean screenViewHasBorderLayer)", "full_signature": "@NotNull private static BufferedImage getPreviewImage(@NotNull GraphicsConfiguration configuration,\n                                               @NotNull BufferedImage renderedImage,\n                                               int screenViewX, int screenViewY,\n                                               @NotNull Rectangle screenViewVisibleSize,\n                                               double xScaleFactor, double yScaleFactor,\n                                               @Nullable BufferedImage existingBuffer,\n                                               boolean screenViewHasBorderLayer)", "class_method_signature": "ScreenViewLayer.getPreviewImage(@NotNull GraphicsConfiguration configuration,\n                                               @NotNull BufferedImage renderedImage,\n                                               int screenViewX, int screenViewY,\n                                               @NotNull Rectangle screenViewVisibleSize,\n                                               double xScaleFactor, double yScaleFactor,\n                                               @Nullable BufferedImage existingBuffer,\n                                               boolean screenViewHasBorderLayer)", "testcase": false, "constructor": false}, {"identifier": "paint", "parameters": "(@NotNull Graphics2D graphics2D)", "modifiers": "@Override public", "return": "void", "signature": "void paint(@NotNull Graphics2D graphics2D)", "full_signature": "@Override public void paint(@NotNull Graphics2D graphics2D)", "class_method_signature": "ScreenViewLayer.paint(@NotNull Graphics2D graphics2D)", "testcase": false, "constructor": false}, {"identifier": "setLastRenderResult", "parameters": "(@Nullable RenderResult result)", "modifiers": "protected", "return": "void", "signature": "void setLastRenderResult(@Nullable RenderResult result)", "full_signature": "protected void setLastRenderResult(@Nullable RenderResult result)", "class_method_signature": "ScreenViewLayer.setLastRenderResult(@Nullable RenderResult result)", "testcase": false, "constructor": false}, {"identifier": "newRenderImageAvailable", "parameters": "(@Nullable RenderResult renderResult)", "modifiers": "private", "return": "boolean", "signature": "boolean newRenderImageAvailable(@Nullable RenderResult renderResult)", "full_signature": "private boolean newRenderImageAvailable(@Nullable RenderResult renderResult)", "class_method_signature": "ScreenViewLayer.newRenderImageAvailable(@Nullable RenderResult renderResult)", "testcase": false, "constructor": false}, {"identifier": "cancelHighQualityScaleRequests", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void cancelHighQualityScaleRequests()", "full_signature": "private void cancelHighQualityScaleRequests()", "class_method_signature": "ScreenViewLayer.cancelHighQualityScaleRequests()", "testcase": false, "constructor": false}, {"identifier": "requestHighQualityScaledImage", "parameters": "(@NotNull ScaleContext ctx)", "modifiers": "private", "return": "void", "signature": "void requestHighQualityScaledImage(@NotNull ScaleContext ctx)", "full_signature": "private void requestHighQualityScaledImage(@NotNull ScaleContext ctx)", "class_method_signature": "ScreenViewLayer.requestHighQualityScaledImage(@NotNull ScaleContext ctx)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "ScreenViewLayer.dispose()", "testcase": false, "constructor": false}, {"identifier": "getRetinaScaledImage", "parameters": "(@NotNull BufferedImage original,\n                                                    double scaleX,\n                                                    double scaleY,\n                                                    @NotNull ScaleContext ctx,\n                                                    boolean fastScaling)", "modifiers": "@Nullable private static", "return": "BufferedImage", "signature": "BufferedImage getRetinaScaledImage(@NotNull BufferedImage original,\n                                                    double scaleX,\n                                                    double scaleY,\n                                                    @NotNull ScaleContext ctx,\n                                                    boolean fastScaling)", "full_signature": "@Nullable private static BufferedImage getRetinaScaledImage(@NotNull BufferedImage original,\n                                                    double scaleX,\n                                                    double scaleY,\n                                                    @NotNull ScaleContext ctx,\n                                                    boolean fastScaling)", "class_method_signature": "ScreenViewLayer.getRetinaScaledImage(@NotNull BufferedImage original,\n                                                    double scaleX,\n                                                    double scaleY,\n                                                    @NotNull ScaleContext ctx,\n                                                    boolean fastScaling)", "testcase": false, "constructor": false}, {"identifier": "scaleOriginalImage", "parameters": "(@NotNull BufferedImage source,\n                                          double xScaleFactor,\n                                          double yScaleFactor,\n                                          @NotNull ScaleContext ctx)", "modifiers": "@VisibleForTesting @NotNull static", "return": "BufferedImage", "signature": "BufferedImage scaleOriginalImage(@NotNull BufferedImage source,\n                                          double xScaleFactor,\n                                          double yScaleFactor,\n                                          @NotNull ScaleContext ctx)", "full_signature": "@VisibleForTesting @NotNull static BufferedImage scaleOriginalImage(@NotNull BufferedImage source,\n                                          double xScaleFactor,\n                                          double yScaleFactor,\n                                          @NotNull ScaleContext ctx)", "class_method_signature": "ScreenViewLayer.scaleOriginalImage(@NotNull BufferedImage source,\n                                          double xScaleFactor,\n                                          double yScaleFactor,\n                                          @NotNull ScaleContext ctx)", "testcase": false, "constructor": false}, {"identifier": "onScaledResultReady", "parameters": "(BufferedImage result)", "modifiers": "private", "return": "void", "signature": "void onScaledResultReady(BufferedImage result)", "full_signature": "private void onScaledResultReady(BufferedImage result)", "class_method_signature": "ScreenViewLayer.onScaledResultReady(BufferedImage result)", "testcase": false, "constructor": false}], "file": "designer/src/com/android/tools/idea/uibuilder/surface/ScreenViewLayer.java"}, "focal_method": {"identifier": "paint", "parameters": "(@NotNull Graphics2D graphics2D)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void paint(@NotNull Graphics2D graphics2D) {\n    myScreenView.getSize(myScreenViewSize);\n    // Calculate the portion of the screen view that it's visible\n    myScreenViewVisibleRect.setBounds(myScreenView.getX(), myScreenView.getY(),\n                                      myScreenViewSize.width, myScreenViewSize.height);\n    Rectangle2D clipBounds = graphics2D.getClipBounds();\n    if (!myScreenViewVisibleRect.intersects(clipBounds)) {\n      return;\n    }\n\n    // When the screen view visible rect is bigger than the current viewport, we limit the visible rect to the viewport.\n    // We will never be painting an image bigger than the viewport.\n    if (myScreenViewVisibleRect.width > clipBounds.getWidth() || myScreenViewVisibleRect.height > clipBounds.getHeight()) {\n      Rectangle2D.intersect(myScreenViewVisibleRect, clipBounds, myScreenViewVisibleRect);\n    }\n\n    // In some cases, we will try to re-use the previous image to paint on top of it, assuming that it still matches the right dimensions.\n    // This way we can save the allocation.\n    BufferedImage previousVisibleImage = myCachedVisibleImage;\n    RenderResult renderResult = myScreenView.getResult();\n    boolean drawNewImg = false;\n    if (newRenderImageAvailable(renderResult)) {\n      setLastRenderResult(renderResult);\n      myScreenView.getScene().needsRebuildList();\n      drawNewImg = true;\n    }\n\n    Graphics2D g = (Graphics2D) graphics2D.create();\n    BufferedImage cachedVisibleImage = drawNewImg ? null : previousVisibleImage;\n    double currentScale = myScreenView.getScale();\n    //noinspection FloatingPointEquality\n    if (drawNewImg || currentScale != myLastScale || !myScreenViewVisibleRect.equals(myCachedScreenViewDisplayRect)) {\n      if (myLastRenderResult != null && myLastRenderResult.hasImage()) {\n        BufferedImage renderedImage = myLastRenderResult.getRenderedImage().getCopy();\n        if (renderedImage != null) {\n          int resultImageWidth = renderedImage.getWidth();\n          int resultImageHeight = renderedImage.getHeight();\n\n          myCachedScreenViewDisplayRect.setBounds(myScreenViewVisibleRect);\n          // Obtain the factors to convert from screen view coordinates to our result image coordinates\n          double xScaleFactor = (double)resultImageWidth / myScreenViewSize.width;\n          double yScaleFactor = (double)resultImageHeight / myScreenViewSize.height;\n          cancelHighQualityScaleRequests();\n          if (xScaleFactor > 1.2 && yScaleFactor > 1.2) {\n            // This means that the result image is bigger than the ScreenView by more than a 20%. For this cases, we need to scale down the\n            // result image to make it fit in the ScreenView and we use a higher quality (but slow) process. We will issue a request to obtain\n            // the high quality version but paint the low quality version below. Once it's ready, we'll repaint.\n\n            requestHighQualityScaledImage(ScaleContext.create(g));\n          }\n\n          cachedVisibleImage = getPreviewImage(g.getDeviceConfiguration(), renderedImage,\n                                               myScreenView.getX(), myScreenView.getY(),\n                                               myScreenViewVisibleRect, xScaleFactor, yScaleFactor,\n                                               previousVisibleImage, myScreenView.hasBorderLayer());\n          myCachedVisibleImage = cachedVisibleImage;\n          myLastScale = currentScale;\n        }\n      }\n    }\n\n    if (cachedVisibleImage != null) {\n      Shape screenShape = myScreenView.getScreenShape();\n      if (screenShape != null) {\n        g.clip(screenShape);\n      }\n      UIUtil.drawImage(g, cachedVisibleImage, myScreenViewVisibleRect.x, myScreenViewVisibleRect.y, null);\n    }\n    g.dispose();\n  }", "signature": "void paint(@NotNull Graphics2D graphics2D)", "full_signature": "@Override public void paint(@NotNull Graphics2D graphics2D)", "class_method_signature": "ScreenViewLayer.paint(@NotNull Graphics2D graphics2D)", "testcase": false, "constructor": false, "invocations": ["getSize", "setBounds", "getX", "getY", "getClipBounds", "intersects", "getWidth", "getHeight", "intersect", "getResult", "newRenderImageAvailable", "setLastRenderResult", "needsRebuildList", "getScene", "create", "getScale", "equals", "hasImage", "getCopy", "getRenderedImage", "getWidth", "getHeight", "setBounds", "cancelHighQualityScaleRequests", "requestHighQualityScaledImage", "create", "getPreviewImage", "getDeviceConfiguration", "getX", "getY", "hasBorderLayer", "getScreenShape", "clip", "drawImage", "dispose"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}