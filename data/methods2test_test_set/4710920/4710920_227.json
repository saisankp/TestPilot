{"test_class": {"identifier": "MulticastRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String service = \"org.apache.dubbo.test.injvmServie\";", "modifier": "private", "type": "String", "declarator": "service = \"org.apache.dubbo.test.injvmServie\"", "var_name": "service"}, {"original_string": "private URL registryUrl = URL.valueOf(\"multicast://239.239.239.239/\");", "modifier": "private", "type": "URL", "declarator": "registryUrl = URL.valueOf(\"multicast://239.239.239.239/\")", "var_name": "registryUrl"}, {"original_string": "private URL serviceUrl = URL.valueOf(\"dubbo://\" + NetUtils.getLocalHost() + \"/\" + service\n            + \"?methods=test1,test2\");", "modifier": "private", "type": "URL", "declarator": "serviceUrl = URL.valueOf(\"dubbo://\" + NetUtils.getLocalHost() + \"/\" + service\n            + \"?methods=test1,test2\")", "var_name": "serviceUrl"}, {"original_string": "private URL adminUrl = URL.valueOf(\"dubbo://\" + NetUtils.getLocalHost() + \"/*\");", "modifier": "private", "type": "URL", "declarator": "adminUrl = URL.valueOf(\"dubbo://\" + NetUtils.getLocalHost() + \"/*\")", "var_name": "adminUrl"}, {"original_string": "private URL consumerUrl = URL.valueOf(\"subscribe://\" + NetUtils.getLocalHost() + \"/\" + service + \"?arg1=1&arg2=2\");", "modifier": "private", "type": "URL", "declarator": "consumerUrl = URL.valueOf(\"subscribe://\" + NetUtils.getLocalHost() + \"/\" + service + \"?arg1=1&arg2=2\")", "var_name": "consumerUrl"}, {"original_string": "private MulticastRegistry registry = new MulticastRegistry(registryUrl);", "modifier": "private", "type": "MulticastRegistry", "declarator": "registry = new MulticastRegistry(registryUrl)", "var_name": "registry"}], "file": "dubbo-registry/dubbo-registry-multicast/src/test/java/org/apache/dubbo/registry/multicast/MulticastRegistryTest.java"}, "test_case": {"identifier": "testSubscribe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSubscribe() {\n        // verify listener\n        final URL[] notifyUrl = new URL[1];\n        for (int i = 0; i < 10; i++) {\n            registry.register(serviceUrl);\n            registry.subscribe(consumerUrl, urls -> {\n                notifyUrl[0] = urls.get(0);\n\n                Map<URL, Set<NotifyListener>> subscribed = registry.getSubscribed();\n                assertEquals(consumerUrl, subscribed.keySet().iterator().next());\n            });\n            if (!EMPTY_PROTOCOL.equalsIgnoreCase(notifyUrl[0].getProtocol())) {\n                break;\n            }\n        }\n        assertEquals(serviceUrl.toFullString(), notifyUrl[0].toFullString());\n    }", "signature": "void testSubscribe()", "full_signature": "@Test public void testSubscribe()", "class_method_signature": "MulticastRegistryTest.testSubscribe()", "testcase": true, "constructor": false, "invocations": ["register", "subscribe", "get", "getSubscribed", "assertEquals", "next", "iterator", "keySet", "equalsIgnoreCase", "getProtocol", "assertEquals", "toFullString", "toFullString"]}, "focal_class": {"identifier": "MulticastRegistry", "superclass": "extends FailbackRegistry", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(MulticastRegistry.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MulticastRegistry.class)", "var_name": "logger"}, {"original_string": "private static final int DEFAULT_MULTICAST_PORT = 1234;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_MULTICAST_PORT = 1234", "var_name": "DEFAULT_MULTICAST_PORT"}, {"original_string": "private final InetAddress multicastAddress;", "modifier": "private final", "type": "InetAddress", "declarator": "multicastAddress", "var_name": "multicastAddress"}, {"original_string": "private final MulticastSocket multicastSocket;", "modifier": "private final", "type": "MulticastSocket", "declarator": "multicastSocket", "var_name": "multicastSocket"}, {"original_string": "private final int multicastPort;", "modifier": "private final", "type": "int", "declarator": "multicastPort", "var_name": "multicastPort"}, {"original_string": "private final ConcurrentMap<URL, Set<URL>> received = new ConcurrentHashMap<URL, Set<URL>>();", "modifier": "private final", "type": "ConcurrentMap<URL, Set<URL>>", "declarator": "received = new ConcurrentHashMap<URL, Set<URL>>()", "var_name": "received"}, {"original_string": "private final ScheduledExecutorService cleanExecutor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(\"DubboMulticastRegistryCleanTimer\", true));", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "cleanExecutor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(\"DubboMulticastRegistryCleanTimer\", true))", "var_name": "cleanExecutor"}, {"original_string": "private final ScheduledFuture<?> cleanFuture;", "modifier": "private final", "type": "ScheduledFuture<?>", "declarator": "cleanFuture", "var_name": "cleanFuture"}, {"original_string": "private final int cleanPeriod;", "modifier": "private final", "type": "int", "declarator": "cleanPeriod", "var_name": "cleanPeriod"}, {"original_string": "private volatile boolean admin = false;", "modifier": "private volatile", "type": "boolean", "declarator": "admin = false", "var_name": "admin"}], "methods": [{"identifier": "MulticastRegistry", "parameters": "(URL url)", "modifiers": "public", "return": "", "signature": " MulticastRegistry(URL url)", "full_signature": "public  MulticastRegistry(URL url)", "class_method_signature": "MulticastRegistry.MulticastRegistry(URL url)", "testcase": false, "constructor": true}, {"identifier": "checkMulticastAddress", "parameters": "(InetAddress multicastAddress)", "modifiers": "private", "return": "void", "signature": "void checkMulticastAddress(InetAddress multicastAddress)", "full_signature": "private void checkMulticastAddress(InetAddress multicastAddress)", "class_method_signature": "MulticastRegistry.checkMulticastAddress(InetAddress multicastAddress)", "testcase": false, "constructor": false}, {"identifier": "clean", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void clean()", "full_signature": "private void clean()", "class_method_signature": "MulticastRegistry.clean()", "testcase": false, "constructor": false}, {"identifier": "isExpired", "parameters": "(URL url)", "modifiers": "private", "return": "boolean", "signature": "boolean isExpired(URL url)", "full_signature": "private boolean isExpired(URL url)", "class_method_signature": "MulticastRegistry.isExpired(URL url)", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "(String msg, InetSocketAddress remoteAddress)", "modifiers": "private", "return": "void", "signature": "void receive(String msg, InetSocketAddress remoteAddress)", "full_signature": "private void receive(String msg, InetSocketAddress remoteAddress)", "class_method_signature": "MulticastRegistry.receive(String msg, InetSocketAddress remoteAddress)", "testcase": false, "constructor": false}, {"identifier": "multicast", "parameters": "(String msg)", "modifiers": "private", "return": "void", "signature": "void multicast(String msg)", "full_signature": "private void multicast(String msg)", "class_method_signature": "MulticastRegistry.multicast(String msg)", "testcase": false, "constructor": false}, {"identifier": "unicast", "parameters": "(String msg, String host)", "modifiers": "private", "return": "void", "signature": "void unicast(String msg, String host)", "full_signature": "private void unicast(String msg, String host)", "class_method_signature": "MulticastRegistry.unicast(String msg, String host)", "testcase": false, "constructor": false}, {"identifier": "doRegister", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void doRegister(URL url)", "full_signature": "@Override public void doRegister(URL url)", "class_method_signature": "MulticastRegistry.doRegister(URL url)", "testcase": false, "constructor": false}, {"identifier": "doUnregister", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void doUnregister(URL url)", "full_signature": "@Override public void doUnregister(URL url)", "class_method_signature": "MulticastRegistry.doUnregister(URL url)", "testcase": false, "constructor": false}, {"identifier": "doSubscribe", "parameters": "(URL url, final NotifyListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void doSubscribe(URL url, final NotifyListener listener)", "full_signature": "@Override public void doSubscribe(URL url, final NotifyListener listener)", "class_method_signature": "MulticastRegistry.doSubscribe(URL url, final NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "doUnsubscribe", "parameters": "(URL url, NotifyListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void doUnsubscribe(URL url, NotifyListener listener)", "full_signature": "@Override public void doUnsubscribe(URL url, NotifyListener listener)", "class_method_signature": "MulticastRegistry.doUnsubscribe(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "isAvailable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAvailable()", "full_signature": "@Override public boolean isAvailable()", "class_method_signature": "MulticastRegistry.isAvailable()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "MulticastRegistry.destroy()", "testcase": false, "constructor": false}, {"identifier": "registered", "parameters": "(URL url)", "modifiers": "protected", "return": "void", "signature": "void registered(URL url)", "full_signature": "protected void registered(URL url)", "class_method_signature": "MulticastRegistry.registered(URL url)", "testcase": false, "constructor": false}, {"identifier": "unregistered", "parameters": "(URL url)", "modifiers": "protected", "return": "void", "signature": "void unregistered(URL url)", "full_signature": "protected void unregistered(URL url)", "class_method_signature": "MulticastRegistry.unregistered(URL url)", "testcase": false, "constructor": false}, {"identifier": "subscribed", "parameters": "(URL url, NotifyListener listener)", "modifiers": "protected", "return": "void", "signature": "void subscribed(URL url, NotifyListener listener)", "full_signature": "protected void subscribed(URL url, NotifyListener listener)", "class_method_signature": "MulticastRegistry.subscribed(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "toList", "parameters": "(Set<URL> urls)", "modifiers": "private", "return": "List<URL>", "signature": "List<URL> toList(Set<URL> urls)", "full_signature": "private List<URL> toList(Set<URL> urls)", "class_method_signature": "MulticastRegistry.toList(Set<URL> urls)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void register(URL url)", "full_signature": "@Override public void register(URL url)", "class_method_signature": "MulticastRegistry.register(URL url)", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void unregister(URL url)", "full_signature": "@Override public void unregister(URL url)", "class_method_signature": "MulticastRegistry.unregister(URL url)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(URL url, NotifyListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void subscribe(URL url, NotifyListener listener)", "full_signature": "@Override public void subscribe(URL url, NotifyListener listener)", "class_method_signature": "MulticastRegistry.subscribe(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "(URL url, NotifyListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void unsubscribe(URL url, NotifyListener listener)", "full_signature": "@Override public void unsubscribe(URL url, NotifyListener listener)", "class_method_signature": "MulticastRegistry.unsubscribe(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "lookup", "parameters": "(URL url)", "modifiers": "@Override public", "return": "List<URL>", "signature": "List<URL> lookup(URL url)", "full_signature": "@Override public List<URL> lookup(URL url)", "class_method_signature": "MulticastRegistry.lookup(URL url)", "testcase": false, "constructor": false}, {"identifier": "getMulticastSocket", "parameters": "()", "modifiers": "public", "return": "MulticastSocket", "signature": "MulticastSocket getMulticastSocket()", "full_signature": "public MulticastSocket getMulticastSocket()", "class_method_signature": "MulticastRegistry.getMulticastSocket()", "testcase": false, "constructor": false}, {"identifier": "getReceived", "parameters": "()", "modifiers": "public", "return": "Map<URL, Set<URL>>", "signature": "Map<URL, Set<URL>> getReceived()", "full_signature": "public Map<URL, Set<URL>> getReceived()", "class_method_signature": "MulticastRegistry.getReceived()", "testcase": false, "constructor": false}], "file": "dubbo-registry/dubbo-registry-multicast/src/main/java/org/apache/dubbo/registry/multicast/MulticastRegistry.java"}, "focal_method": {"identifier": "subscribe", "parameters": "(URL url, NotifyListener listener)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void subscribe(URL url, NotifyListener listener) {\n        super.subscribe(url, listener);\n        subscribed(url, listener);\n    }", "signature": "void subscribe(URL url, NotifyListener listener)", "full_signature": "@Override public void subscribe(URL url, NotifyListener listener)", "class_method_signature": "MulticastRegistry.subscribe(URL url, NotifyListener listener)", "testcase": false, "constructor": false, "invocations": ["subscribe", "subscribed"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}