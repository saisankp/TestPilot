{"test_class": {"identifier": "NMEATest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/com/platypii/baseline/location/NMEATest.java"}, "test_case": {"identifier": "nmeaChecksum", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void nmeaChecksum() {\n        assertTrue(validate(\"$GPATT,45.781233,10.862333,1796.3,45.0,2.6,2.6,*72\"));\n        assertFalse(validate(\"$GPATT,45.781233,10.862333,1796.3,45.0,2.6,2.6,*99\"));\n    }", "signature": "void nmeaChecksum()", "full_signature": "@Test public void nmeaChecksum()", "class_method_signature": "NMEATest.nmeaChecksum()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "validate", "assertFalse", "validate"]}, "focal_class": {"identifier": "NMEA", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"NMEA\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"NMEA\"", "var_name": "TAG"}, {"original_string": "private static final Calendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));", "modifier": "private static final", "type": "Calendar", "declarator": "cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"))", "var_name": "cal"}], "methods": [{"identifier": "parseDegreesMinutes", "parameters": "(@NonNull String dm, @NonNull String nsew)", "modifiers": "static", "return": "double", "signature": "double parseDegreesMinutes(@NonNull String dm, @NonNull String nsew)", "full_signature": "static double parseDegreesMinutes(@NonNull String dm, @NonNull String nsew)", "class_method_signature": "NMEA.parseDegreesMinutes(@NonNull String dm, @NonNull String nsew)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(@Nullable String date)", "modifiers": "static", "return": "long", "signature": "long parseDate(@Nullable String date)", "full_signature": "static long parseDate(@Nullable String date)", "class_method_signature": "NMEA.parseDate(@Nullable String date)", "testcase": false, "constructor": false}, {"identifier": "parseTime", "parameters": "(@Nullable String time)", "modifiers": "static", "return": "long", "signature": "long parseTime(@Nullable String time)", "full_signature": "static long parseTime(@Nullable String time)", "class_method_signature": "NMEA.parseTime(@Nullable String time)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(@NonNull String nmea)", "modifiers": "static", "return": "boolean", "signature": "boolean validate(@NonNull String nmea)", "full_signature": "static boolean validate(@NonNull String nmea)", "class_method_signature": "NMEA.validate(@NonNull String nmea)", "testcase": false, "constructor": false}, {"identifier": "parsePowerLevel", "parameters": "(@NonNull String[] split)", "modifiers": "static", "return": "float", "signature": "float parsePowerLevel(@NonNull String[] split)", "full_signature": "static float parsePowerLevel(@NonNull String[] split)", "class_method_signature": "NMEA.parsePowerLevel(@NonNull String[] split)", "testcase": false, "constructor": false}, {"identifier": "cleanNmea", "parameters": "(@NonNull String nmea)", "modifiers": "@NonNull static", "return": "String", "signature": "String cleanNmea(@NonNull String nmea)", "full_signature": "@NonNull static String cleanNmea(@NonNull String nmea)", "class_method_signature": "NMEA.cleanNmea(@NonNull String nmea)", "testcase": false, "constructor": false}, {"identifier": "splitNmea", "parameters": "(@NonNull String nmea)", "modifiers": "@NonNull static", "return": "String[]", "signature": "String[] splitNmea(@NonNull String nmea)", "full_signature": "@NonNull static String[] splitNmea(@NonNull String nmea)", "class_method_signature": "NMEA.splitNmea(@NonNull String nmea)", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/platypii/baseline/location/NMEA.java"}, "focal_method": {"identifier": "validate", "parameters": "(@NonNull String nmea)", "modifiers": "static", "return": "boolean", "body": "static boolean validate(@NonNull String nmea) {\n        final int starIndex = nmea.lastIndexOf('*');\n        final int length = nmea.length();\n        // Ensure that:\n        // - string is long enough\n        // - starts with $\n        // - ends with checksum\n        // Could use regex ^\\\\$.*\\\\*[0-9a-fA-F]{2} but this is faster:\n        if (length < 8 || nmea.charAt(0) != '$' || starIndex != length - 3) {\n            Log.e(TAG, \"Invalid NMEA sentence: \" + nmea);\n            return false;\n        }\n        // Special commands that don't checksum\n        if (nmea.startsWith(\"$AIDSTAT\") && nmea.endsWith(\"*00\")) return false;\n        if (nmea.startsWith(\"$ENGINESTATE\") && nmea.endsWith(\"*00\")) return false;\n\n        // Compute checksum\n        short checksum1 = 0;\n        for (int i = 1; i < starIndex; i++) {\n            checksum1 ^= nmea.charAt(i);\n        }\n        final short checksum2 = Short.parseShort(nmea.substring(starIndex + 1), 16);\n        if (checksum1 != checksum2) {\n            Log.e(TAG, String.format(Locale.US, \"Invalid NMEA checksum: %02X != %02X for sentence: %s\", checksum1, checksum2, nmea));\n            return false;\n        }\n        return true;\n    }", "signature": "boolean validate(@NonNull String nmea)", "full_signature": "static boolean validate(@NonNull String nmea)", "class_method_signature": "NMEA.validate(@NonNull String nmea)", "testcase": false, "constructor": false, "invocations": ["lastIndexOf", "length", "charAt", "e", "startsWith", "endsWith", "startsWith", "endsWith", "charAt", "parseShort", "substring", "e", "format"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}