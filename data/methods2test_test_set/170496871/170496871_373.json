{"test_class": {"identifier": "ZookeeperClientTest", "superclass": "extends GridCommonAbstractTest", "interfaces": "", "fields": [{"original_string": "private static final int SES_TIMEOUT = 60_000;", "modifier": "private static final", "type": "int", "declarator": "SES_TIMEOUT = 60_000", "var_name": "SES_TIMEOUT"}, {"original_string": "private TestingCluster zkCluster;", "modifier": "private", "type": "TestingCluster", "declarator": "zkCluster", "var_name": "zkCluster"}], "file": "modules/zookeeper/src/test/java/org/apache/ignite/spi/discovery/zk/internal/ZookeeperClientTest.java"}, "test_case": {"identifier": "testReconnect4", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReconnect4() throws Exception {\n        startZK(3);\n\n        ZookeeperClient client = new ZookeeperClient(log,\n            zkCluster.getServers().get(2).getInstanceSpec().getConnectString(),\n            60_000,\n            null);\n\n        client.createIfNeeded(\"/apacheIgnite1\", null, CreateMode.PERSISTENT);\n\n        zkCluster.getServers().get(0).stop();\n        zkCluster.getServers().get(1).stop();\n\n        IgniteInternalFuture fut = GridTestUtils.runAsync(new Callable<Void>() {\n            @Override public Void call() throws Exception {\n                U.sleep(2000);\n\n                info(\"Restart zookeeper server\");\n\n                zkCluster.getServers().get(0).restart();\n\n                info(\"Zookeeper server restarted\");\n\n                return null;\n            }\n        }, \"start-zk\");\n\n        client.createIfNeeded(\"/apacheIgnite2\", null, CreateMode.PERSISTENT);\n\n        fut.get();\n    }", "signature": "void testReconnect4()", "full_signature": "@Test public void testReconnect4()", "class_method_signature": "ZookeeperClientTest.testReconnect4()", "testcase": true, "constructor": false, "invocations": ["startZK", "getConnectString", "getInstanceSpec", "get", "getServers", "createIfNeeded", "stop", "get", "getServers", "stop", "get", "getServers", "runAsync", "sleep", "info", "restart", "get", "getServers", "info", "createIfNeeded", "get"]}, "focal_class": {"identifier": "ZookeeperClient", "superclass": "", "interfaces": "implements Watcher", "fields": [{"original_string": "private static final int DFLT_RETRY_TIMEOUT = 2000;", "modifier": "private static final", "type": "int", "declarator": "DFLT_RETRY_TIMEOUT = 2000", "var_name": "DFLT_RETRY_TIMEOUT"}, {"original_string": "private static final int DFLT_MAX_RETRY_COUNT = 10;", "modifier": "private static final", "type": "int", "declarator": "DFLT_MAX_RETRY_COUNT = 10", "var_name": "DFLT_MAX_RETRY_COUNT"}, {"original_string": "private static final boolean PINGER_ENABLED =\n        IgniteSystemProperties.getBoolean(\"IGNITE_ZOOKEEPER_DISCOVERY_PINGER_ENABLED\", false);", "modifier": "private static final", "type": "boolean", "declarator": "PINGER_ENABLED =\n        IgniteSystemProperties.getBoolean(\"IGNITE_ZOOKEEPER_DISCOVERY_PINGER_ENABLED\", false)", "var_name": "PINGER_ENABLED"}, {"original_string": "private final AtomicInteger retryCount = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "retryCount = new AtomicInteger()", "var_name": "retryCount"}, {"original_string": "private static final int MAX_REQ_SIZE = 1048528;", "modifier": "private static final", "type": "int", "declarator": "MAX_REQ_SIZE = 1048528", "var_name": "MAX_REQ_SIZE"}, {"original_string": "private static final List<ACL> ZK_ACL = ZooDefs.Ids.OPEN_ACL_UNSAFE;", "modifier": "private static final", "type": "List<ACL>", "declarator": "ZK_ACL = ZooDefs.Ids.OPEN_ACL_UNSAFE", "var_name": "ZK_ACL"}, {"original_string": "private static final byte[] EMPTY_BYTES = {};", "modifier": "private static final", "type": "byte[]", "declarator": "EMPTY_BYTES = {}", "var_name": "EMPTY_BYTES"}, {"original_string": "private final ZooKeeper zk;", "modifier": "private final", "type": "ZooKeeper", "declarator": "zk", "var_name": "zk"}, {"original_string": "private final IgniteLogger log;", "modifier": "private final", "type": "IgniteLogger", "declarator": "log", "var_name": "log"}, {"original_string": "private ConnectionState state = ConnectionState.Disconnected;", "modifier": "private", "type": "ConnectionState", "declarator": "state = ConnectionState.Disconnected", "var_name": "state"}, {"original_string": "private long connLossTimeout;", "modifier": "private", "type": "long", "declarator": "connLossTimeout", "var_name": "connLossTimeout"}, {"original_string": "private volatile long connStartTime;", "modifier": "private volatile", "type": "long", "declarator": "connStartTime", "var_name": "connStartTime"}, {"original_string": "private final Object stateMux = new Object();", "modifier": "private final", "type": "Object", "declarator": "stateMux = new Object()", "var_name": "stateMux"}, {"original_string": "private final IgniteRunnable connLostC;", "modifier": "private final", "type": "IgniteRunnable", "declarator": "connLostC", "var_name": "connLostC"}, {"original_string": "private final Timer connTimer;", "modifier": "private final", "type": "Timer", "declarator": "connTimer", "var_name": "connTimer"}, {"original_string": "private final ArrayDeque<ZkAsyncOperation> retryQ = new ArrayDeque<>();", "modifier": "private final", "type": "ArrayDeque<ZkAsyncOperation>", "declarator": "retryQ = new ArrayDeque<>()", "var_name": "retryQ"}, {"original_string": "private volatile boolean closing;", "modifier": "private volatile", "type": "boolean", "declarator": "closing", "var_name": "closing"}, {"original_string": "private volatile ZkPinger pinger;", "modifier": "private volatile", "type": "ZkPinger", "declarator": "pinger", "var_name": "pinger"}], "methods": [{"identifier": "ZookeeperClient", "parameters": "(IgniteLogger log, String connectString, int sesTimeout, IgniteRunnable connLostC)", "modifiers": "", "return": "", "signature": " ZookeeperClient(IgniteLogger log, String connectString, int sesTimeout, IgniteRunnable connLostC)", "full_signature": "  ZookeeperClient(IgniteLogger log, String connectString, int sesTimeout, IgniteRunnable connLostC)", "class_method_signature": "ZookeeperClient.ZookeeperClient(IgniteLogger log, String connectString, int sesTimeout, IgniteRunnable connLostC)", "testcase": false, "constructor": true}, {"identifier": "ZookeeperClient", "parameters": "(String igniteInstanceName,\n        IgniteLogger log,\n        String connectString,\n        int sesTimeout,\n        IgniteRunnable connLostC)", "modifiers": "", "return": "", "signature": " ZookeeperClient(String igniteInstanceName,\n        IgniteLogger log,\n        String connectString,\n        int sesTimeout,\n        IgniteRunnable connLostC)", "full_signature": "  ZookeeperClient(String igniteInstanceName,\n        IgniteLogger log,\n        String connectString,\n        int sesTimeout,\n        IgniteRunnable connLostC)", "class_method_signature": "ZookeeperClient.ZookeeperClient(String igniteInstanceName,\n        IgniteLogger log,\n        String connectString,\n        int sesTimeout,\n        IgniteRunnable connLostC)", "testcase": false, "constructor": true}, {"identifier": "zk", "parameters": "()", "modifiers": "", "return": "ZooKeeper", "signature": "ZooKeeper zk()", "full_signature": " ZooKeeper zk()", "class_method_signature": "ZookeeperClient.zk()", "testcase": false, "constructor": false}, {"identifier": "connected", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean connected()", "full_signature": " boolean connected()", "class_method_signature": "ZookeeperClient.connected()", "testcase": false, "constructor": false}, {"identifier": "pingerEnabled", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean pingerEnabled()", "full_signature": " boolean pingerEnabled()", "class_method_signature": "ZookeeperClient.pingerEnabled()", "testcase": false, "constructor": false}, {"identifier": "state", "parameters": "()", "modifiers": "", "return": "String", "signature": "String state()", "full_signature": " String state()", "class_method_signature": "ZookeeperClient.state()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(WatchedEvent evt)", "modifiers": "@Override public", "return": "void", "signature": "void process(WatchedEvent evt)", "full_signature": "@Override public void process(WatchedEvent evt)", "class_method_signature": "ZookeeperClient.process(WatchedEvent evt)", "testcase": false, "constructor": false}, {"identifier": "notifyConnectionLost", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void notifyConnectionLost()", "full_signature": "private void notifyConnectionLost()", "class_method_signature": "ZookeeperClient.notifyConnectionLost()", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(String path)", "modifiers": "", "return": "boolean", "signature": "boolean exists(String path)", "full_signature": " boolean exists(String path)", "class_method_signature": "ZookeeperClient.exists(String path)", "testcase": false, "constructor": false}, {"identifier": "createAll", "parameters": "(List<String> paths, CreateMode createMode)", "modifiers": "", "return": "void", "signature": "void createAll(List<String> paths, CreateMode createMode)", "full_signature": " void createAll(List<String> paths, CreateMode createMode)", "class_method_signature": "ZookeeperClient.createAll(List<String> paths, CreateMode createMode)", "testcase": false, "constructor": false}, {"identifier": "needSplitNodeData", "parameters": "(String path, byte[] data, int overhead)", "modifiers": "", "return": "boolean", "signature": "boolean needSplitNodeData(String path, byte[] data, int overhead)", "full_signature": " boolean needSplitNodeData(String path, byte[] data, int overhead)", "class_method_signature": "ZookeeperClient.needSplitNodeData(String path, byte[] data, int overhead)", "testcase": false, "constructor": false}, {"identifier": "splitNodeData", "parameters": "(String path, byte[] data, int overhead)", "modifiers": "", "return": "List<byte[]>", "signature": "List<byte[]> splitNodeData(String path, byte[] data, int overhead)", "full_signature": " List<byte[]> splitNodeData(String path, byte[] data, int overhead)", "class_method_signature": "ZookeeperClient.splitNodeData(String path, byte[] data, int overhead)", "testcase": false, "constructor": false}, {"identifier": "requestOverhead", "parameters": "(String path)", "modifiers": "private", "return": "int", "signature": "int requestOverhead(String path)", "full_signature": "private int requestOverhead(String path)", "class_method_signature": "ZookeeperClient.requestOverhead(String path)", "testcase": false, "constructor": false}, {"identifier": "createIfNeeded", "parameters": "(String path, byte[] data, CreateMode createMode)", "modifiers": "", "return": "String", "signature": "String createIfNeeded(String path, byte[] data, CreateMode createMode)", "full_signature": " String createIfNeeded(String path, byte[] data, CreateMode createMode)", "class_method_signature": "ZookeeperClient.createIfNeeded(String path, byte[] data, CreateMode createMode)", "testcase": false, "constructor": false}, {"identifier": "createSequential", "parameters": "(String checkPrefix, String parentPath, String path, byte[] data, CreateMode createMode)", "modifiers": "", "return": "String", "signature": "String createSequential(String checkPrefix, String parentPath, String path, byte[] data, CreateMode createMode)", "full_signature": " String createSequential(String checkPrefix, String parentPath, String path, byte[] data, CreateMode createMode)", "class_method_signature": "ZookeeperClient.createSequential(String checkPrefix, String parentPath, String path, byte[] data, CreateMode createMode)", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "(String path)", "modifiers": "", "return": "List<String>", "signature": "List<String> getChildren(String path)", "full_signature": " List<String> getChildren(String path)", "class_method_signature": "ZookeeperClient.getChildren(String path)", "testcase": false, "constructor": false}, {"identifier": "getChildrenPaths", "parameters": "(String path)", "modifiers": "", "return": "List<String>", "signature": "List<String> getChildrenPaths(String path)", "full_signature": " List<String> getChildrenPaths(String path)", "class_method_signature": "ZookeeperClient.getChildrenPaths(String path)", "testcase": false, "constructor": false}, {"identifier": "existsNoRetry", "parameters": "(String path)", "modifiers": "", "return": "boolean", "signature": "boolean existsNoRetry(String path)", "full_signature": " boolean existsNoRetry(String path)", "class_method_signature": "ZookeeperClient.existsNoRetry(String path)", "testcase": false, "constructor": false}, {"identifier": "deleteIfExistsNoRetry", "parameters": "(String path, int ver)", "modifiers": "", "return": "void", "signature": "void deleteIfExistsNoRetry(String path, int ver)", "full_signature": " void deleteIfExistsNoRetry(String path, int ver)", "class_method_signature": "ZookeeperClient.deleteIfExistsNoRetry(String path, int ver)", "testcase": false, "constructor": false}, {"identifier": "deleteIfExists", "parameters": "(String path, int ver)", "modifiers": "", "return": "void", "signature": "void deleteIfExists(String path, int ver)", "full_signature": " void deleteIfExists(String path, int ver)", "class_method_signature": "ZookeeperClient.deleteIfExists(String path, int ver)", "testcase": false, "constructor": false}, {"identifier": "deleteAll", "parameters": "(List<String> paths, int ver)", "modifiers": "", "return": "void", "signature": "void deleteAll(List<String> paths, int ver)", "full_signature": " void deleteAll(List<String> paths, int ver)", "class_method_signature": "ZookeeperClient.deleteAll(List<String> paths, int ver)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String path, int ver)", "modifiers": "private", "return": "void", "signature": "void delete(String path, int ver)", "full_signature": "private void delete(String path, int ver)", "class_method_signature": "ZookeeperClient.delete(String path, int ver)", "testcase": false, "constructor": false}, {"identifier": "setData", "parameters": "(String path, byte[] data, int ver)", "modifiers": "", "return": "void", "signature": "void setData(String path, byte[] data, int ver)", "full_signature": " void setData(String path, byte[] data, int ver)", "class_method_signature": "ZookeeperClient.setData(String path, byte[] data, int ver)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(String path, @Nullable Stat stat)", "modifiers": "", "return": "byte[]", "signature": "byte[] getData(String path, @Nullable Stat stat)", "full_signature": " byte[] getData(String path, @Nullable Stat stat)", "class_method_signature": "ZookeeperClient.getData(String path, @Nullable Stat stat)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(String path)", "modifiers": "", "return": "byte[]", "signature": "byte[] getData(String path)", "full_signature": " byte[] getData(String path)", "class_method_signature": "ZookeeperClient.getData(String path)", "testcase": false, "constructor": false}, {"identifier": "deleteIfExistsAsync", "parameters": "(String path)", "modifiers": "", "return": "void", "signature": "void deleteIfExistsAsync(String path)", "full_signature": " void deleteIfExistsAsync(String path)", "class_method_signature": "ZookeeperClient.deleteIfExistsAsync(String path)", "testcase": false, "constructor": false}, {"identifier": "existsAsync", "parameters": "(String path, Watcher watcher, AsyncCallback.StatCallback cb)", "modifiers": "", "return": "void", "signature": "void existsAsync(String path, Watcher watcher, AsyncCallback.StatCallback cb)", "full_signature": " void existsAsync(String path, Watcher watcher, AsyncCallback.StatCallback cb)", "class_method_signature": "ZookeeperClient.existsAsync(String path, Watcher watcher, AsyncCallback.StatCallback cb)", "testcase": false, "constructor": false}, {"identifier": "getChildrenAsync", "parameters": "(String path, Watcher watcher, AsyncCallback.Children2Callback cb)", "modifiers": "", "return": "void", "signature": "void getChildrenAsync(String path, Watcher watcher, AsyncCallback.Children2Callback cb)", "full_signature": " void getChildrenAsync(String path, Watcher watcher, AsyncCallback.Children2Callback cb)", "class_method_signature": "ZookeeperClient.getChildrenAsync(String path, Watcher watcher, AsyncCallback.Children2Callback cb)", "testcase": false, "constructor": false}, {"identifier": "getDataAsync", "parameters": "(String path, Watcher watcher, AsyncCallback.DataCallback cb)", "modifiers": "", "return": "void", "signature": "void getDataAsync(String path, Watcher watcher, AsyncCallback.DataCallback cb)", "full_signature": " void getDataAsync(String path, Watcher watcher, AsyncCallback.DataCallback cb)", "class_method_signature": "ZookeeperClient.getDataAsync(String path, Watcher watcher, AsyncCallback.DataCallback cb)", "testcase": false, "constructor": false}, {"identifier": "createAsync", "parameters": "(String path, byte[] data, CreateMode createMode, AsyncCallback.StringCallback cb)", "modifiers": "private", "return": "void", "signature": "void createAsync(String path, byte[] data, CreateMode createMode, AsyncCallback.StringCallback cb)", "full_signature": "private void createAsync(String path, byte[] data, CreateMode createMode, AsyncCallback.StringCallback cb)", "class_method_signature": "ZookeeperClient.createAsync(String path, byte[] data, CreateMode createMode, AsyncCallback.StringCallback cb)", "testcase": false, "constructor": false}, {"identifier": "onCloseStart", "parameters": "()", "modifiers": "", "return": "void", "signature": "void onCloseStart()", "full_signature": " void onCloseStart()", "class_method_signature": "ZookeeperClient.onCloseStart()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ZookeeperClient.close()", "testcase": false, "constructor": false}, {"identifier": "onZookeeperError", "parameters": "(long prevConnStartTime, Exception e)", "modifiers": "private", "return": "void", "signature": "void onZookeeperError(long prevConnStartTime, Exception e)", "full_signature": "private void onZookeeperError(long prevConnStartTime, Exception e)", "class_method_signature": "ZookeeperClient.onZookeeperError(long prevConnStartTime, Exception e)", "testcase": false, "constructor": false}, {"identifier": "needRetry", "parameters": "(int code)", "modifiers": "private", "return": "boolean", "signature": "boolean needRetry(int code)", "full_signature": "private boolean needRetry(int code)", "class_method_signature": "ZookeeperClient.needRetry(int code)", "testcase": false, "constructor": false}, {"identifier": "closeClient", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void closeClient()", "full_signature": "private void closeClient()", "class_method_signature": "ZookeeperClient.closeClient()", "testcase": false, "constructor": false}, {"identifier": "scheduleConnectionCheck", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void scheduleConnectionCheck()", "full_signature": "private void scheduleConnectionCheck()", "class_method_signature": "ZookeeperClient.scheduleConnectionCheck()", "testcase": false, "constructor": false}, {"identifier": "attachPinger", "parameters": "(ZkPinger pinger)", "modifiers": "", "return": "void", "signature": "void attachPinger(ZkPinger pinger)", "full_signature": " void attachPinger(ZkPinger pinger)", "class_method_signature": "ZookeeperClient.attachPinger(ZkPinger pinger)", "testcase": false, "constructor": false}], "file": "modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/zk/internal/ZookeeperClient.java"}, "focal_method": {"identifier": "createIfNeeded", "parameters": "(String path, byte[] data, CreateMode createMode)", "modifiers": "", "return": "String", "body": "String createIfNeeded(String path, byte[] data, CreateMode createMode)\n        throws ZookeeperClientFailedException, InterruptedException\n    {\n        assert !createMode.isSequential() : createMode;\n\n        if (data == null)\n            data = EMPTY_BYTES;\n\n        for (;;) {\n            long connStartTime = this.connStartTime;\n\n            try {\n                return zk.create(path, data, ZK_ACL, createMode);\n            }\n            catch (KeeperException.NodeExistsException e) {\n                if (log.isDebugEnabled())\n                    log.debug(\"Node already exists: \" + path);\n\n                return path;\n            }\n            catch (Exception e) {\n                onZookeeperError(connStartTime, e);\n            }\n        }\n    }", "signature": "String createIfNeeded(String path, byte[] data, CreateMode createMode)", "full_signature": " String createIfNeeded(String path, byte[] data, CreateMode createMode)", "class_method_signature": "ZookeeperClient.createIfNeeded(String path, byte[] data, CreateMode createMode)", "testcase": false, "constructor": false, "invocations": ["isSequential", "create", "isDebugEnabled", "debug", "onZookeeperError"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}