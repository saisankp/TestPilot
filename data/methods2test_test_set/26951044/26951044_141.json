{"test_class": {"identifier": "CurrencyConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BGL = \"BGL\";", "modifier": "private static final", "type": "String", "declarator": "BGL = \"BGL\"", "var_name": "BGL"}, {"original_string": "private static final String CHF = \"CHF\";", "modifier": "private static final", "type": "String", "declarator": "CHF = \"CHF\"", "var_name": "CHF"}, {"original_string": "private static final String EUR = \"EUR\";", "modifier": "private static final", "type": "String", "declarator": "EUR = \"EUR\"", "var_name": "EUR"}, {"original_string": "private static final String JPY = \"JPY\";", "modifier": "private static final", "type": "String", "declarator": "JPY = \"JPY\"", "var_name": "JPY"}], "file": "code/core/src/test/java/org/apache/tamaya/core/internal/converters/CurrencyConverterTest.java"}, "test_case": {"identifier": "callToConvertAddsMoreSupportedFormatsToTheContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void callToConvertAddsMoreSupportedFormatsToTheContext() throws Exception {\n        ConversionContext context = new ConversionContext.Builder(TypeLiteral.of(Currency.class)).build();\n\n        CurrencyConverter converter = new CurrencyConverter();\n        converter.convert(\"\", context);\n\n        assertThat(context.getSupportedFormats()).contains(\"<numericValue> (CurrencyConverter)\",\n                \"<locale> (CurrencyConverter)\", \"<currencyCode>, using Locale.ENGLISH (CurrencyConverter)\");\n    }", "signature": "void callToConvertAddsMoreSupportedFormatsToTheContext()", "full_signature": "@Test public void callToConvertAddsMoreSupportedFormatsToTheContext()", "class_method_signature": "CurrencyConverterTest.callToConvertAddsMoreSupportedFormatsToTheContext()", "testcase": true, "constructor": false, "invocations": ["build", "of", "convert", "contains", "assertThat", "getSupportedFormats"]}, "focal_class": {"identifier": "CurrencyConverter", "superclass": "", "interfaces": "implements PropertyConverter<Currency>", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(CurrencyConverter.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(CurrencyConverter.class.getName())", "var_name": "LOG"}], "methods": [{"identifier": "convert", "parameters": "(String value, ConversionContext ctx)", "modifiers": "@Override public", "return": "Currency", "signature": "Currency convert(String value, ConversionContext ctx)", "full_signature": "@Override public Currency convert(String value, ConversionContext ctx)", "class_method_signature": "CurrencyConverter.convert(String value, ConversionContext ctx)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "CurrencyConverter.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "CurrencyConverter.hashCode()", "testcase": false, "constructor": false}], "file": "code/core/src/main/java/org/apache/tamaya/core/internal/converters/CurrencyConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(String value, ConversionContext ctx)", "modifiers": "@Override public", "return": "Currency", "body": "@Override\n    public Currency convert(String value, ConversionContext ctx) {\n        ctx.addSupportedFormats(getClass(), \"<currencyCode>, using Locale.ENGLISH\", \"<numericValue>\",\n                \"<locale>\");\n        if(value==null){\n            return null;\n        }\n        String trimmed = value.trim();\n        try {\n            return Currency.getInstance(trimmed.toUpperCase(Locale.ENGLISH));\n        } catch (Exception e) {\n            LOG.log(Level.FINEST, \"Not a valid textual currency code: \" + trimmed + \", checking for numeric...\", e);\n        }\n        try {\n            // Check for numeric code\n            Integer numCode = Integer.parseInt(trimmed);\n            for (Currency currency : Currency.getAvailableCurrencies()) {\n                if (currency.getNumericCode() == numCode) {\n                    return currency;\n                }\n            }\n        } catch (Exception e) {\n            LOG.log(Level.FINEST, \"Not a valid numeric currency code: \" + trimmed + \", checking for locale...\", e);\n        }\n        try {\n            // Check for numeric code\n            String[] parts = trimmed.split(\"\\\\_\");\n            Locale locale;\n            switch (parts.length) {\n                case 1:\n                    locale = new Locale(\"\", parts[0]);\n                    break;\n                case 2:\n                    locale = new Locale(parts[0], parts[1]);\n                    break;\n                case 3:\n                    locale = new Locale(parts[0], parts[1], parts[2]);\n                    break;\n                default:\n                    locale = null;\n            }\n            if (locale != null) {\n                return Currency.getInstance(locale);\n            }\n            LOG.finest(\"Not a valid currency: \" + trimmed + \", giving up...\");\n        } catch (Exception e) {\n            LOG.log(Level.FINEST, \"Not a valid country locale for currency: \" + trimmed + \", giving up...\", e);\n        }\n        return null;\n    }", "signature": "Currency convert(String value, ConversionContext ctx)", "full_signature": "@Override public Currency convert(String value, ConversionContext ctx)", "class_method_signature": "CurrencyConverter.convert(String value, ConversionContext ctx)", "testcase": false, "constructor": false, "invocations": ["addSupportedFormats", "getClass", "trim", "getInstance", "toUpperCase", "log", "parseInt", "getAvailableCurrencies", "getNumericCode", "log", "split", "getInstance", "finest", "log"]}, "repository": {"repo_id": 26951044, "url": "https://github.com/apache/incubator-tamaya", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 44, "size": 7630, "license": "licensed"}}