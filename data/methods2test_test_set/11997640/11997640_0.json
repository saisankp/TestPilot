{"test_class": {"identifier": "AutoKeeperCollectorTest", "superclass": "extends BaseOtterTest", "interfaces": "", "fields": [{"original_string": "@SpringBeanByName\n    private AutoKeeperCollector   autoKeeperCollector;", "modifier": "@SpringBeanByName\n    private", "type": "AutoKeeperCollector", "declarator": "autoKeeperCollector", "var_name": "autoKeeperCollector"}, {"original_string": "@SpringBeanByName\n    private AutoKeeperStatService autoKeeperStatService;", "modifier": "@SpringBeanByName\n    private", "type": "AutoKeeperStatService", "declarator": "autoKeeperStatService", "var_name": "autoKeeperStatService"}, {"original_string": "private final static String   ADDRESS = \"127.0.0.1:2181\";", "modifier": "private final static", "type": "String", "declarator": "ADDRESS = \"127.0.0.1:2181\"", "var_name": "ADDRESS"}], "file": "manager/biz/src/test/java/com/alibaba/otter/manager/biz/autokeeper/impl/AutoKeeperCollectorTest.java"}, "test_case": {"identifier": "testCollectorServerStat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCollectorServerStat() {\n        autoKeeperCollector.collectorServerStat(ADDRESS);\n        autoKeeperCollector.collectorConnectionStat(ADDRESS);\n        autoKeeperCollector.collectorWatchStat(ADDRESS);\n        autoKeeperCollector.collectorEphemeralStat(ADDRESS);\n        AutoKeeperServerStat stat = autoKeeperStatService.findServerStat(ADDRESS);\n        Set<AutoKeeperConnectionStat> conns = stat.getConnectionStats();\n        for (AutoKeeperConnectionStat autoKeeperConnectionStat : conns) {\n            autoKeeperStatService.findConnectionBySessionId(autoKeeperConnectionStat.getSessionId());\n            autoKeeperStatService.findServerStatBySessionId(autoKeeperConnectionStat.getSessionId());\n            String path = autoKeeperConnectionStat.getClientAddress();\n            System.out.println(path);\n        }\n    }", "signature": "void testCollectorServerStat()", "full_signature": "@Test public void testCollectorServerStat()", "class_method_signature": "AutoKeeperCollectorTest.testCollectorServerStat()", "testcase": true, "constructor": false, "invocations": ["collectorServerStat", "collectorConnectionStat", "collectorWatchStat", "collectorEphemeralStat", "findServerStat", "getConnectionStats", "findConnectionBySessionId", "getSessionId", "findServerStatBySessionId", "getSessionId", "getClientAddress", "println"]}, "focal_class": {"identifier": "AutoKeeperCollector", "superclass": "", "interfaces": "implements InitializingBean", "fields": [{"original_string": "@Resource(name = \"autoKeeperClusterService\")\n    private AutoKeeperClusterService autoKeeperClusterService;", "modifier": "@Resource(name = \"autoKeeperClusterService\")\n    private", "type": "AutoKeeperClusterService", "declarator": "autoKeeperClusterService", "var_name": "autoKeeperClusterService"}, {"original_string": "private static final String      MODE_FOLLOWER            = \"Mode: follower\";", "modifier": "private static final", "type": "String", "declarator": "MODE_FOLLOWER            = \"Mode: follower\"", "var_name": "MODE_FOLLOWER"}, {"original_string": "private static final String      MODE_LEADERER            = \"Mode: leader\";", "modifier": "private static final", "type": "String", "declarator": "MODE_LEADERER            = \"Mode: leader\"", "var_name": "MODE_LEADERER"}, {"original_string": "private static final String      MODE_OBSERVER            = \"Mode: observer\";", "modifier": "private static final", "type": "String", "declarator": "MODE_OBSERVER            = \"Mode: observer\"", "var_name": "MODE_OBSERVER"}, {"original_string": "private static final String      MODE_STANDALONE          = \"Mode: standalone\";", "modifier": "private static final", "type": "String", "declarator": "MODE_STANDALONE          = \"Mode: standalone\"", "var_name": "MODE_STANDALONE"}, {"original_string": "private static final String      NODE_COUNT               = \"Node count:\";", "modifier": "private static final", "type": "String", "declarator": "NODE_COUNT               = \"Node count:\"", "var_name": "NODE_COUNT"}, {"original_string": "private static final String      STRING_LATENCY           = \"Latency min/avg/max:\";", "modifier": "private static final", "type": "String", "declarator": "STRING_LATENCY           = \"Latency min/avg/max:\"", "var_name": "STRING_LATENCY"}, {"original_string": "private static final String      STRING_SENT              = \"Sent:\";", "modifier": "private static final", "type": "String", "declarator": "STRING_SENT              = \"Sent:\"", "var_name": "STRING_SENT"}, {"original_string": "private static final String      STRING_RECEIVED          = \"Received:\";", "modifier": "private static final", "type": "String", "declarator": "STRING_RECEIVED          = \"Received:\"", "var_name": "STRING_RECEIVED"}, {"original_string": "private static final String      STRING_OUTSTANDING       = \"Outstanding:\";", "modifier": "private static final", "type": "String", "declarator": "STRING_OUTSTANDING       = \"Outstanding:\"", "var_name": "STRING_OUTSTANDING"}, {"original_string": "private static final String      COMMA                    = \",\";", "modifier": "private static final", "type": "String", "declarator": "COMMA                    = \",\"", "var_name": "COMMA"}, {"original_string": "private static final String      BRACKETS                 = \")\";", "modifier": "private static final", "type": "String", "declarator": "BRACKETS                 = \")\"", "var_name": "BRACKETS"}, {"original_string": "private static final String      COLON                    = \":\";", "modifier": "private static final", "type": "String", "declarator": "COLON                    = \":\"", "var_name": "COLON"}, {"original_string": "private static final String      WRAP                     = \"\\n\";", "modifier": "private static final", "type": "String", "declarator": "WRAP                     = \"\\n\"", "var_name": "WRAP"}, {"original_string": "private static final String      CMD_STAT                 = \"echo stat | nc %s %s\";", "modifier": "private static final", "type": "String", "declarator": "CMD_STAT                 = \"echo stat | nc %s %s\"", "var_name": "CMD_STAT"}, {"original_string": "private static final String      CMD_CONS                 = \"echo cons | nc %s %s\";", "modifier": "private static final", "type": "String", "declarator": "CMD_CONS                 = \"echo cons | nc %s %s\"", "var_name": "CMD_CONS"}, {"original_string": "private static final String      CMD_DUMP                 = \"echo dump | nc %s %s\";", "modifier": "private static final", "type": "String", "declarator": "CMD_DUMP                 = \"echo dump | nc %s %s\"", "var_name": "CMD_DUMP"}, {"original_string": "private static final String      CMD_WCHC                 = \"echo wchc | nc %s %s\";", "modifier": "private static final", "type": "String", "declarator": "CMD_WCHC                 = \"echo wchc | nc %s %s\"", "var_name": "CMD_WCHC"}, {"original_string": "private static final long        DEFAULT_COLLECT_INTERVAL = 300;", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_COLLECT_INTERVAL = 300", "var_name": "DEFAULT_COLLECT_INTERVAL"}, {"original_string": "private long                     delay                    = 1;", "modifier": "private", "type": "long", "declarator": "delay                    = 1", "var_name": "delay"}, {"original_string": "private int                      singleSize               = 1;", "modifier": "private", "type": "int", "declarator": "singleSize               = 1", "var_name": "singleSize"}, {"original_string": "private long                     collectInterval          = DEFAULT_COLLECT_INTERVAL;", "modifier": "private", "type": "long", "declarator": "collectInterval          = DEFAULT_COLLECT_INTERVAL", "var_name": "collectInterval"}, {"original_string": "private AutoKeeperData           autoKeeperData;", "modifier": "private", "type": "AutoKeeperData", "declarator": "autoKeeperData", "var_name": "autoKeeperData"}, {"original_string": "private ScheduledExecutorService collectorExecutor;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "collectorExecutor", "var_name": "collectorExecutor"}], "methods": [{"identifier": "collectorConnectionStat", "parameters": "(String address)", "modifiers": "public", "return": "void", "signature": "void collectorConnectionStat(String address)", "full_signature": "public void collectorConnectionStat(String address)", "class_method_signature": "AutoKeeperCollector.collectorConnectionStat(String address)", "testcase": false, "constructor": false}, {"identifier": "collectorServerStat", "parameters": "(String address)", "modifiers": "public", "return": "void", "signature": "void collectorServerStat(String address)", "full_signature": "public void collectorServerStat(String address)", "class_method_signature": "AutoKeeperCollector.collectorServerStat(String address)", "testcase": false, "constructor": false}, {"identifier": "collectorEphemeralStat", "parameters": "(String address)", "modifiers": "public", "return": "void", "signature": "void collectorEphemeralStat(String address)", "full_signature": "public void collectorEphemeralStat(String address)", "class_method_signature": "AutoKeeperCollector.collectorEphemeralStat(String address)", "testcase": false, "constructor": false}, {"identifier": "collectorWatchStat", "parameters": "(String address)", "modifiers": "public", "return": "void", "signature": "void collectorWatchStat(String address)", "full_signature": "public void collectorWatchStat(String address)", "class_method_signature": "AutoKeeperCollector.collectorWatchStat(String address)", "testcase": false, "constructor": false}, {"identifier": "collector", "parameters": "(String[] command)", "modifiers": "public static", "return": "String", "signature": "String collector(String[] command)", "full_signature": "public static String collector(String[] command)", "class_method_signature": "AutoKeeperCollector.collector(String[] command)", "testcase": false, "constructor": false}, {"identifier": "splitAddress", "parameters": "(String address)", "modifiers": "private", "return": "List<String>", "signature": "List<String> splitAddress(String address)", "full_signature": "private List<String> splitAddress(String address)", "class_method_signature": "AutoKeeperCollector.splitAddress(String address)", "testcase": false, "constructor": false}, {"identifier": "groupSessionPath", "parameters": "(String cmdresult)", "modifiers": "private", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> groupSessionPath(String cmdresult)", "full_signature": "private Map<String, List<String>> groupSessionPath(String cmdresult)", "class_method_signature": "AutoKeeperCollector.groupSessionPath(String cmdresult)", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "AutoKeeperCollector.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "startCollect", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void startCollect()", "full_signature": "private void startCollect()", "class_method_signature": "AutoKeeperCollector.startCollect()", "testcase": false, "constructor": false}, {"identifier": "setAutoKeeperClusterService", "parameters": "(AutoKeeperClusterService autoKeeperClusterService)", "modifiers": "public", "return": "void", "signature": "void setAutoKeeperClusterService(AutoKeeperClusterService autoKeeperClusterService)", "full_signature": "public void setAutoKeeperClusterService(AutoKeeperClusterService autoKeeperClusterService)", "class_method_signature": "AutoKeeperCollector.setAutoKeeperClusterService(AutoKeeperClusterService autoKeeperClusterService)", "testcase": false, "constructor": false}, {"identifier": "setAutoKeeperData", "parameters": "(AutoKeeperData autoKeeperData)", "modifiers": "public", "return": "void", "signature": "void setAutoKeeperData(AutoKeeperData autoKeeperData)", "full_signature": "public void setAutoKeeperData(AutoKeeperData autoKeeperData)", "class_method_signature": "AutoKeeperCollector.setAutoKeeperData(AutoKeeperData autoKeeperData)", "testcase": false, "constructor": false}, {"identifier": "setCollectInterval", "parameters": "(long collectInterval)", "modifiers": "public", "return": "void", "signature": "void setCollectInterval(long collectInterval)", "full_signature": "public void setCollectInterval(long collectInterval)", "class_method_signature": "AutoKeeperCollector.setCollectInterval(long collectInterval)", "testcase": false, "constructor": false}], "file": "manager/biz/src/main/java/com/alibaba/otter/manager/biz/autokeeper/impl/AutoKeeperCollector.java"}, "focal_method": {"identifier": "collectorServerStat", "parameters": "(String address)", "modifiers": "public", "return": "void", "body": "public void collectorServerStat(String address) {\n        List<String> netAddress = splitAddress(address);\n        if (netAddress.isEmpty()) {\n            return;\n        }\n        String ip = netAddress.get(0);\n        String port = netAddress.get(1);\n        String[] cmd = { \"/bin/bash\", \"-c\", String.format(CMD_STAT, ip, port) };\n        String cmdresult = collector(cmd);\n        String[] result = cmdresult.split(WRAP);\n        AutoKeeperServerStat summary = new AutoKeeperServerStat();\n        summary.setOriginalContent(cmdresult);\n        for (String line : result) {\n\n            if (line.contains(MODE_FOLLOWER)) {\n                summary.setQuorumType(AutoKeeperQuorumType.FOLLOWER);\n            } else if (line.contains(MODE_LEADERER)) {\n                summary.setQuorumType(AutoKeeperQuorumType.LEADER);\n            } else if (line.contains(MODE_STANDALONE)) {\n                summary.setQuorumType(AutoKeeperQuorumType.STANDALONE);\n            } else if (line.contains(MODE_OBSERVER)) {\n                summary.setQuorumType(AutoKeeperQuorumType.OBSERVER);\n            } else if (line.contains(STRING_LATENCY)) {\n                List<String> latency = Arrays.asList(StringUtils.trimToEmpty(line.replace(STRING_LATENCY,\n                                                                                          StringUtils.EMPTY)).split(\"/\"));\n                summary.setMinLatency(Long.parseLong(latency.get(0)));\n                summary.setAvgLatency(Long.parseLong(latency.get(1)));\n                summary.setMaxLatency(Long.parseLong(latency.get(2)));\n            } else if (line.contains(STRING_OUTSTANDING)) {\n                summary.setQueued(Long.parseLong(StringUtils.trimToEmpty(line.replace(STRING_OUTSTANDING,\n                                                                                      StringUtils.EMPTY))));\n            } else if (line.contains(NODE_COUNT)) {\n                summary.setNodeCount(Long.parseLong(StringUtils.trimToEmpty(line.replace(NODE_COUNT, StringUtils.EMPTY))));\n            } else if (line.contains(STRING_SENT)) {\n                summary.setSent(Long.parseLong(StringUtils.trimToEmpty(line.replace(STRING_SENT, StringUtils.EMPTY))));\n            } else if (line.contains(STRING_RECEIVED)) {\n                summary.setRecved(Long.parseLong(StringUtils.trimToEmpty(line.replace(STRING_RECEIVED,\n                                                                                      StringUtils.EMPTY))));\n            }\n        }\n\n        autoKeeperData.joinServer(address, summary);\n    }", "signature": "void collectorServerStat(String address)", "full_signature": "public void collectorServerStat(String address)", "class_method_signature": "AutoKeeperCollector.collectorServerStat(String address)", "testcase": false, "constructor": false, "invocations": ["splitAddress", "isEmpty", "get", "get", "format", "collector", "split", "setOriginalContent", "contains", "setQuorumType", "contains", "setQuorumType", "contains", "setQuorumType", "contains", "setQuorumType", "contains", "asList", "split", "trimToEmpty", "replace", "setMinLatency", "parseLong", "get", "setAvgLatency", "parseLong", "get", "setMaxLatency", "parseLong", "get", "contains", "setQueued", "parseLong", "trimToEmpty", "replace", "contains", "setNodeCount", "parseLong", "trimToEmpty", "replace", "contains", "setSent", "parseLong", "trimToEmpty", "replace", "contains", "setRecved", "parseLong", "trimToEmpty", "replace", "joinServer"]}, "repository": {"repo_id": 11997640, "url": "https://github.com/alibaba/otter", "language": "Java", "is_fork": false, "fork_count": 2159, "stargazer_count": 6015, "size": 12017, "license": "licensed"}}