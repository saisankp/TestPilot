{"test_class": {"identifier": "TestFairScheduler", "superclass": "extends FairSchedulerTestBase", "interfaces": "", "fields": [{"original_string": "private final static String ALLOC_FILE =\n      new File(TEST_DIR, \"test-queues\").getAbsolutePath();", "modifier": "private final static", "type": "String", "declarator": "ALLOC_FILE =\n      new File(TEST_DIR, \"test-queues\").getAbsolutePath()", "var_name": "ALLOC_FILE"}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFairScheduler.java"}, "test_case": {"identifier": "testGetAppsInQueue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetAppsInQueue() throws Exception {\n    scheduler.init(conf);\n    scheduler.start();\n    scheduler.reinitialize(conf, resourceManager.getRMContext());\n\n    ApplicationAttemptId appAttId1 =\n        createSchedulingRequest(1024, 1, \"queue1.subqueue1\", \"user1\");\n    ApplicationAttemptId appAttId2 =\n        createSchedulingRequest(1024, 1, \"queue1.subqueue2\", \"user1\");\n    ApplicationAttemptId appAttId3 =\n        createSchedulingRequest(1024, 1, \"default\", \"user1\");\n    \n    List<ApplicationAttemptId> apps =\n        scheduler.getAppsInQueue(\"queue1.subqueue1\");\n    assertEquals(1, apps.size());\n    assertEquals(appAttId1, apps.get(0));\n    // with and without root prefix should work\n    apps = scheduler.getAppsInQueue(\"root.queue1.subqueue1\");\n    assertEquals(1, apps.size());\n    assertEquals(appAttId1, apps.get(0));\n    \n    apps = scheduler.getAppsInQueue(\"user1\");\n    assertEquals(1, apps.size());\n    assertEquals(appAttId3, apps.get(0));\n    // with and without root prefix should work\n    apps = scheduler.getAppsInQueue(\"root.user1\");\n    assertEquals(1, apps.size());\n    assertEquals(appAttId3, apps.get(0));\n\n    // apps in subqueues should be included\n    apps = scheduler.getAppsInQueue(\"queue1\");\n    Assert.assertEquals(2, apps.size());\n    Set<ApplicationAttemptId> appAttIds = Sets.newHashSet(apps.get(0), apps.get(1));\n    assertTrue(appAttIds.contains(appAttId1));\n    assertTrue(appAttIds.contains(appAttId2));\n  }", "signature": "void testGetAppsInQueue()", "full_signature": "@Test public void testGetAppsInQueue()", "class_method_signature": "TestFairScheduler.testGetAppsInQueue()", "testcase": true, "constructor": false, "invocations": ["init", "start", "reinitialize", "getRMContext", "createSchedulingRequest", "createSchedulingRequest", "createSchedulingRequest", "getAppsInQueue", "assertEquals", "size", "assertEquals", "get", "getAppsInQueue", "assertEquals", "size", "assertEquals", "get", "getAppsInQueue", "assertEquals", "size", "assertEquals", "get", "getAppsInQueue", "assertEquals", "size", "assertEquals", "get", "getAppsInQueue", "assertEquals", "size", "newHashSet", "get", "get", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "FairScheduler", "superclass": "extends\n    AbstractYarnScheduler<FSAppAttempt, FSSchedulerNode>", "interfaces": "", "fields": [{"original_string": "private FairSchedulerConfiguration conf;", "modifier": "private", "type": "FairSchedulerConfiguration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private Resource incrAllocation;", "modifier": "private", "type": "Resource", "declarator": "incrAllocation", "var_name": "incrAllocation"}, {"original_string": "private QueueManager queueMgr;", "modifier": "private", "type": "QueueManager", "declarator": "queueMgr", "var_name": "queueMgr"}, {"original_string": "private volatile Clock clock;", "modifier": "private volatile", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private boolean usePortForNodeName;", "modifier": "private", "type": "boolean", "declarator": "usePortForNodeName", "var_name": "usePortForNodeName"}, {"original_string": "private static final Log LOG = LogFactory.getLog(FairScheduler.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(FairScheduler.class)", "var_name": "LOG"}, {"original_string": "private static final ResourceCalculator RESOURCE_CALCULATOR =\n      new DefaultResourceCalculator();", "modifier": "private static final", "type": "ResourceCalculator", "declarator": "RESOURCE_CALCULATOR =\n      new DefaultResourceCalculator()", "var_name": "RESOURCE_CALCULATOR"}, {"original_string": "private static final ResourceCalculator DOMINANT_RESOURCE_CALCULATOR =\n      new DominantResourceCalculator();", "modifier": "private static final", "type": "ResourceCalculator", "declarator": "DOMINANT_RESOURCE_CALCULATOR =\n      new DominantResourceCalculator()", "var_name": "DOMINANT_RESOURCE_CALCULATOR"}, {"original_string": "public static final Resource CONTAINER_RESERVED = Resources.createResource(-1);", "modifier": "public static final", "type": "Resource", "declarator": "CONTAINER_RESERVED = Resources.createResource(-1)", "var_name": "CONTAINER_RESERVED"}, {"original_string": "protected long updateInterval;", "modifier": "protected", "type": "long", "declarator": "updateInterval", "var_name": "updateInterval"}, {"original_string": "private final int UPDATE_DEBUG_FREQUENCY = 5;", "modifier": "private final", "type": "int", "declarator": "UPDATE_DEBUG_FREQUENCY = 5", "var_name": "UPDATE_DEBUG_FREQUENCY"}, {"original_string": "private int updatesToSkipForDebug = UPDATE_DEBUG_FREQUENCY;", "modifier": "private", "type": "int", "declarator": "updatesToSkipForDebug = UPDATE_DEBUG_FREQUENCY", "var_name": "updatesToSkipForDebug"}, {"original_string": "@VisibleForTesting\n  Thread updateThread;", "modifier": "@VisibleForTesting", "type": "Thread", "declarator": "updateThread", "var_name": "updateThread"}, {"original_string": "@VisibleForTesting\n  Thread schedulingThread;", "modifier": "@VisibleForTesting", "type": "Thread", "declarator": "schedulingThread", "var_name": "schedulingThread"}, {"original_string": "protected final long THREAD_JOIN_TIMEOUT_MS = 1000;", "modifier": "protected final", "type": "long", "declarator": "THREAD_JOIN_TIMEOUT_MS = 1000", "var_name": "THREAD_JOIN_TIMEOUT_MS"}, {"original_string": "FSQueueMetrics rootMetrics;", "modifier": "", "type": "FSQueueMetrics", "declarator": "rootMetrics", "var_name": "rootMetrics"}, {"original_string": "FSOpDurations fsOpDurations;", "modifier": "", "type": "FSOpDurations", "declarator": "fsOpDurations", "var_name": "fsOpDurations"}, {"original_string": "protected long lastPreemptionUpdateTime;", "modifier": "protected", "type": "long", "declarator": "lastPreemptionUpdateTime", "var_name": "lastPreemptionUpdateTime"}, {"original_string": "private long lastPreemptCheckTime;", "modifier": "private", "type": "long", "declarator": "lastPreemptCheckTime", "var_name": "lastPreemptCheckTime"}, {"original_string": "protected boolean preemptionEnabled;", "modifier": "protected", "type": "boolean", "declarator": "preemptionEnabled", "var_name": "preemptionEnabled"}, {"original_string": "protected float preemptionUtilizationThreshold;", "modifier": "protected", "type": "float", "declarator": "preemptionUtilizationThreshold", "var_name": "preemptionUtilizationThreshold"}, {"original_string": "protected long preemptionInterval;", "modifier": "protected", "type": "long", "declarator": "preemptionInterval", "var_name": "preemptionInterval"}, {"original_string": "protected long waitTimeBeforeKill;", "modifier": "protected", "type": "long", "declarator": "waitTimeBeforeKill", "var_name": "waitTimeBeforeKill"}, {"original_string": "private List<RMContainer> warnedContainers = new ArrayList<RMContainer>();", "modifier": "private", "type": "List<RMContainer>", "declarator": "warnedContainers = new ArrayList<RMContainer>()", "var_name": "warnedContainers"}, {"original_string": "protected boolean sizeBasedWeight;", "modifier": "protected", "type": "boolean", "declarator": "sizeBasedWeight", "var_name": "sizeBasedWeight"}, {"original_string": "protected WeightAdjuster weightAdjuster;", "modifier": "protected", "type": "WeightAdjuster", "declarator": "weightAdjuster", "var_name": "weightAdjuster"}, {"original_string": "protected boolean continuousSchedulingEnabled;", "modifier": "protected", "type": "boolean", "declarator": "continuousSchedulingEnabled", "var_name": "continuousSchedulingEnabled"}, {"original_string": "protected int continuousSchedulingSleepMs;", "modifier": "protected", "type": "int", "declarator": "continuousSchedulingSleepMs", "var_name": "continuousSchedulingSleepMs"}, {"original_string": "private Comparator<NodeId> nodeAvailableResourceComparator =\n          new NodeAvailableResourceComparator();", "modifier": "private", "type": "Comparator<NodeId>", "declarator": "nodeAvailableResourceComparator =\n          new NodeAvailableResourceComparator()", "var_name": "nodeAvailableResourceComparator"}, {"original_string": "protected double nodeLocalityThreshold;", "modifier": "protected", "type": "double", "declarator": "nodeLocalityThreshold", "var_name": "nodeLocalityThreshold"}, {"original_string": "protected double rackLocalityThreshold;", "modifier": "protected", "type": "double", "declarator": "rackLocalityThreshold", "var_name": "rackLocalityThreshold"}, {"original_string": "protected long nodeLocalityDelayMs;", "modifier": "protected", "type": "long", "declarator": "nodeLocalityDelayMs", "var_name": "nodeLocalityDelayMs"}, {"original_string": "protected long rackLocalityDelayMs;", "modifier": "protected", "type": "long", "declarator": "rackLocalityDelayMs", "var_name": "rackLocalityDelayMs"}, {"original_string": "private FairSchedulerEventLog eventLog;", "modifier": "private", "type": "FairSchedulerEventLog", "declarator": "eventLog", "var_name": "eventLog"}, {"original_string": "protected boolean assignMultiple;", "modifier": "protected", "type": "boolean", "declarator": "assignMultiple", "var_name": "assignMultiple"}, {"original_string": "protected int maxAssign;", "modifier": "protected", "type": "int", "declarator": "maxAssign", "var_name": "maxAssign"}, {"original_string": "@VisibleForTesting\n  final MaxRunningAppsEnforcer maxRunningEnforcer;", "modifier": "@VisibleForTesting\n  final", "type": "MaxRunningAppsEnforcer", "declarator": "maxRunningEnforcer", "var_name": "maxRunningEnforcer"}, {"original_string": "private AllocationFileLoaderService allocsLoader;", "modifier": "private", "type": "AllocationFileLoaderService", "declarator": "allocsLoader", "var_name": "allocsLoader"}, {"original_string": "@VisibleForTesting\n  AllocationConfiguration allocConf;", "modifier": "@VisibleForTesting", "type": "AllocationConfiguration", "declarator": "allocConf", "var_name": "allocConf"}], "methods": [{"identifier": "FairScheduler", "parameters": "()", "modifiers": "public", "return": "", "signature": " FairScheduler()", "full_signature": "public  FairScheduler()", "class_method_signature": "FairScheduler.FairScheduler()", "testcase": false, "constructor": true}, {"identifier": "validateConf", "parameters": "(Configuration conf)", "modifiers": "private", "return": "void", "signature": "void validateConf(Configuration conf)", "full_signature": "private void validateConf(Configuration conf)", "class_method_signature": "FairScheduler.validateConf(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getConf", "parameters": "()", "modifiers": "public", "return": "FairSchedulerConfiguration", "signature": "FairSchedulerConfiguration getConf()", "full_signature": "public FairSchedulerConfiguration getConf()", "class_method_signature": "FairScheduler.getConf()", "testcase": false, "constructor": false}, {"identifier": "getQueueManager", "parameters": "()", "modifiers": "public", "return": "QueueManager", "signature": "QueueManager getQueueManager()", "full_signature": "public QueueManager getQueueManager()", "class_method_signature": "FairScheduler.getQueueManager()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "()", "modifiers": "protected synchronized", "return": "void", "signature": "void update()", "full_signature": "protected synchronized void update()", "class_method_signature": "FairScheduler.update()", "testcase": false, "constructor": false}, {"identifier": "updateStarvationStats", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateStarvationStats()", "full_signature": "private void updateStarvationStats()", "class_method_signature": "FairScheduler.updateStarvationStats()", "testcase": false, "constructor": false}, {"identifier": "preemptTasksIfNecessary", "parameters": "()", "modifiers": "protected synchronized", "return": "void", "signature": "void preemptTasksIfNecessary()", "full_signature": "protected synchronized void preemptTasksIfNecessary()", "class_method_signature": "FairScheduler.preemptTasksIfNecessary()", "testcase": false, "constructor": false}, {"identifier": "preemptResources", "parameters": "(Resource toPreempt)", "modifiers": "protected", "return": "void", "signature": "void preemptResources(Resource toPreempt)", "full_signature": "protected void preemptResources(Resource toPreempt)", "class_method_signature": "FairScheduler.preemptResources(Resource toPreempt)", "testcase": false, "constructor": false}, {"identifier": "warnOrKillContainer", "parameters": "(RMContainer container)", "modifiers": "protected", "return": "void", "signature": "void warnOrKillContainer(RMContainer container)", "full_signature": "protected void warnOrKillContainer(RMContainer container)", "class_method_signature": "FairScheduler.warnOrKillContainer(RMContainer container)", "testcase": false, "constructor": false}, {"identifier": "resToPreempt", "parameters": "(FSLeafQueue sched, long curTime)", "modifiers": "protected", "return": "Resource", "signature": "Resource resToPreempt(FSLeafQueue sched, long curTime)", "full_signature": "protected Resource resToPreempt(FSLeafQueue sched, long curTime)", "class_method_signature": "FairScheduler.resToPreempt(FSLeafQueue sched, long curTime)", "testcase": false, "constructor": false}, {"identifier": "getContainerTokenSecretManager", "parameters": "()", "modifiers": "public synchronized", "return": "RMContainerTokenSecretManager", "signature": "RMContainerTokenSecretManager getContainerTokenSecretManager()", "full_signature": "public synchronized RMContainerTokenSecretManager getContainerTokenSecretManager()", "class_method_signature": "FairScheduler.getContainerTokenSecretManager()", "testcase": false, "constructor": false}, {"identifier": "getAppWeight", "parameters": "(FSAppAttempt app)", "modifiers": "public synchronized", "return": "ResourceWeights", "signature": "ResourceWeights getAppWeight(FSAppAttempt app)", "full_signature": "public synchronized ResourceWeights getAppWeight(FSAppAttempt app)", "class_method_signature": "FairScheduler.getAppWeight(FSAppAttempt app)", "testcase": false, "constructor": false}, {"identifier": "getIncrementResourceCapability", "parameters": "()", "modifiers": "public", "return": "Resource", "signature": "Resource getIncrementResourceCapability()", "full_signature": "public Resource getIncrementResourceCapability()", "class_method_signature": "FairScheduler.getIncrementResourceCapability()", "testcase": false, "constructor": false}, {"identifier": "getFSSchedulerNode", "parameters": "(NodeId nodeId)", "modifiers": "private", "return": "FSSchedulerNode", "signature": "FSSchedulerNode getFSSchedulerNode(NodeId nodeId)", "full_signature": "private FSSchedulerNode getFSSchedulerNode(NodeId nodeId)", "class_method_signature": "FairScheduler.getFSSchedulerNode(NodeId nodeId)", "testcase": false, "constructor": false}, {"identifier": "getNodeLocalityThreshold", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getNodeLocalityThreshold()", "full_signature": "public double getNodeLocalityThreshold()", "class_method_signature": "FairScheduler.getNodeLocalityThreshold()", "testcase": false, "constructor": false}, {"identifier": "getRackLocalityThreshold", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRackLocalityThreshold()", "full_signature": "public double getRackLocalityThreshold()", "class_method_signature": "FairScheduler.getRackLocalityThreshold()", "testcase": false, "constructor": false}, {"identifier": "getNodeLocalityDelayMs", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getNodeLocalityDelayMs()", "full_signature": "public long getNodeLocalityDelayMs()", "class_method_signature": "FairScheduler.getNodeLocalityDelayMs()", "testcase": false, "constructor": false}, {"identifier": "getRackLocalityDelayMs", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getRackLocalityDelayMs()", "full_signature": "public long getRackLocalityDelayMs()", "class_method_signature": "FairScheduler.getRackLocalityDelayMs()", "testcase": false, "constructor": false}, {"identifier": "isContinuousSchedulingEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isContinuousSchedulingEnabled()", "full_signature": "public boolean isContinuousSchedulingEnabled()", "class_method_signature": "FairScheduler.isContinuousSchedulingEnabled()", "testcase": false, "constructor": false}, {"identifier": "getContinuousSchedulingSleepMs", "parameters": "()", "modifiers": "public synchronized", "return": "int", "signature": "int getContinuousSchedulingSleepMs()", "full_signature": "public synchronized int getContinuousSchedulingSleepMs()", "class_method_signature": "FairScheduler.getContinuousSchedulingSleepMs()", "testcase": false, "constructor": false}, {"identifier": "getClock", "parameters": "()", "modifiers": "public", "return": "Clock", "signature": "Clock getClock()", "full_signature": "public Clock getClock()", "class_method_signature": "FairScheduler.getClock()", "testcase": false, "constructor": false}, {"identifier": "setClock", "parameters": "(Clock clock)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setClock(Clock clock)", "full_signature": "@VisibleForTesting void setClock(Clock clock)", "class_method_signature": "FairScheduler.setClock(Clock clock)", "testcase": false, "constructor": false}, {"identifier": "getEventLog", "parameters": "()", "modifiers": "public", "return": "FairSchedulerEventLog", "signature": "FairSchedulerEventLog getEventLog()", "full_signature": "public FairSchedulerEventLog getEventLog()", "class_method_signature": "FairScheduler.getEventLog()", "testcase": false, "constructor": false}, {"identifier": "addApplication", "parameters": "(ApplicationId applicationId,\n      String queueName, String user, boolean isAppRecovering)", "modifiers": "protected synchronized", "return": "void", "signature": "void addApplication(ApplicationId applicationId,\n      String queueName, String user, boolean isAppRecovering)", "full_signature": "protected synchronized void addApplication(ApplicationId applicationId,\n      String queueName, String user, boolean isAppRecovering)", "class_method_signature": "FairScheduler.addApplication(ApplicationId applicationId,\n      String queueName, String user, boolean isAppRecovering)", "testcase": false, "constructor": false}, {"identifier": "addApplicationAttempt", "parameters": "(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering)", "modifiers": "protected synchronized", "return": "void", "signature": "void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering)", "full_signature": "protected synchronized void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering)", "class_method_signature": "FairScheduler.addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering)", "testcase": false, "constructor": false}, {"identifier": "assignToQueue", "parameters": "(RMApp rmApp, String queueName, String user)", "modifiers": "@VisibleForTesting", "return": "FSLeafQueue", "signature": "FSLeafQueue assignToQueue(RMApp rmApp, String queueName, String user)", "full_signature": "@VisibleForTesting FSLeafQueue assignToQueue(RMApp rmApp, String queueName, String user)", "class_method_signature": "FairScheduler.assignToQueue(RMApp rmApp, String queueName, String user)", "testcase": false, "constructor": false}, {"identifier": "removeApplication", "parameters": "(ApplicationId applicationId,\n      RMAppState finalState)", "modifiers": "private synchronized", "return": "void", "signature": "void removeApplication(ApplicationId applicationId,\n      RMAppState finalState)", "full_signature": "private synchronized void removeApplication(ApplicationId applicationId,\n      RMAppState finalState)", "class_method_signature": "FairScheduler.removeApplication(ApplicationId applicationId,\n      RMAppState finalState)", "testcase": false, "constructor": false}, {"identifier": "removeApplicationAttempt", "parameters": "(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers)", "modifiers": "private synchronized", "return": "void", "signature": "void removeApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers)", "full_signature": "private synchronized void removeApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers)", "class_method_signature": "FairScheduler.removeApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers)", "testcase": false, "constructor": false}, {"identifier": "completedContainer", "parameters": "(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event)", "modifiers": "@Override protected synchronized", "return": "void", "signature": "void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event)", "full_signature": "@Override protected synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event)", "class_method_signature": "FairScheduler.completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event)", "testcase": false, "constructor": false}, {"identifier": "addNode", "parameters": "(RMNode node)", "modifiers": "private synchronized", "return": "void", "signature": "void addNode(RMNode node)", "full_signature": "private synchronized void addNode(RMNode node)", "class_method_signature": "FairScheduler.addNode(RMNode node)", "testcase": false, "constructor": false}, {"identifier": "removeNode", "parameters": "(RMNode rmNode)", "modifiers": "private synchronized", "return": "void", "signature": "void removeNode(RMNode rmNode)", "full_signature": "private synchronized void removeNode(RMNode rmNode)", "class_method_signature": "FairScheduler.removeNode(RMNode rmNode)", "testcase": false, "constructor": false}, {"identifier": "allocate", "parameters": "(ApplicationAttemptId appAttemptId,\n      List<ResourceRequest> ask, List<ContainerId> release,\n      List<String> blacklistAdditions, List<String> blacklistRemovals)", "modifiers": "@Override public", "return": "Allocation", "signature": "Allocation allocate(ApplicationAttemptId appAttemptId,\n      List<ResourceRequest> ask, List<ContainerId> release,\n      List<String> blacklistAdditions, List<String> blacklistRemovals)", "full_signature": "@Override public Allocation allocate(ApplicationAttemptId appAttemptId,\n      List<ResourceRequest> ask, List<ContainerId> release,\n      List<String> blacklistAdditions, List<String> blacklistRemovals)", "class_method_signature": "FairScheduler.allocate(ApplicationAttemptId appAttemptId,\n      List<ResourceRequest> ask, List<ContainerId> release,\n      List<String> blacklistAdditions, List<String> blacklistRemovals)", "testcase": false, "constructor": false}, {"identifier": "nodeUpdate", "parameters": "(RMNode nm)", "modifiers": "private synchronized", "return": "void", "signature": "void nodeUpdate(RMNode nm)", "full_signature": "private synchronized void nodeUpdate(RMNode nm)", "class_method_signature": "FairScheduler.nodeUpdate(RMNode nm)", "testcase": false, "constructor": false}, {"identifier": "continuousSchedulingAttempt", "parameters": "()", "modifiers": "", "return": "void", "signature": "void continuousSchedulingAttempt()", "full_signature": " void continuousSchedulingAttempt()", "class_method_signature": "FairScheduler.continuousSchedulingAttempt()", "testcase": false, "constructor": false}, {"identifier": "attemptScheduling", "parameters": "(FSSchedulerNode node)", "modifiers": "@VisibleForTesting synchronized", "return": "void", "signature": "void attemptScheduling(FSSchedulerNode node)", "full_signature": "@VisibleForTesting synchronized void attemptScheduling(FSSchedulerNode node)", "class_method_signature": "FairScheduler.attemptScheduling(FSSchedulerNode node)", "testcase": false, "constructor": false}, {"identifier": "fitsInMaxShare", "parameters": "(FSQueue queue, Resource\n      additionalResource)", "modifiers": "static", "return": "boolean", "signature": "boolean fitsInMaxShare(FSQueue queue, Resource\n      additionalResource)", "full_signature": "static boolean fitsInMaxShare(FSQueue queue, Resource\n      additionalResource)", "class_method_signature": "FairScheduler.fitsInMaxShare(FSQueue queue, Resource\n      additionalResource)", "testcase": false, "constructor": false}, {"identifier": "getSchedulerApp", "parameters": "(ApplicationAttemptId appAttemptId)", "modifiers": "public", "return": "FSAppAttempt", "signature": "FSAppAttempt getSchedulerApp(ApplicationAttemptId appAttemptId)", "full_signature": "public FSAppAttempt getSchedulerApp(ApplicationAttemptId appAttemptId)", "class_method_signature": "FairScheduler.getSchedulerApp(ApplicationAttemptId appAttemptId)", "testcase": false, "constructor": false}, {"identifier": "getResourceCalculator", "parameters": "()", "modifiers": "@Override public", "return": "ResourceCalculator", "signature": "ResourceCalculator getResourceCalculator()", "full_signature": "@Override public ResourceCalculator getResourceCalculator()", "class_method_signature": "FairScheduler.getResourceCalculator()", "testcase": false, "constructor": false}, {"identifier": "updateRootQueueMetrics", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateRootQueueMetrics()", "full_signature": "private void updateRootQueueMetrics()", "class_method_signature": "FairScheduler.updateRootQueueMetrics()", "testcase": false, "constructor": false}, {"identifier": "shouldAttemptPreemption", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean shouldAttemptPreemption()", "full_signature": "private boolean shouldAttemptPreemption()", "class_method_signature": "FairScheduler.shouldAttemptPreemption()", "testcase": false, "constructor": false}, {"identifier": "getRootQueueMetrics", "parameters": "()", "modifiers": "@Override public", "return": "QueueMetrics", "signature": "QueueMetrics getRootQueueMetrics()", "full_signature": "@Override public QueueMetrics getRootQueueMetrics()", "class_method_signature": "FairScheduler.getRootQueueMetrics()", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(SchedulerEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void handle(SchedulerEvent event)", "full_signature": "@Override public void handle(SchedulerEvent event)", "class_method_signature": "FairScheduler.handle(SchedulerEvent event)", "testcase": false, "constructor": false}, {"identifier": "resolveReservationQueueName", "parameters": "(String queueName,\n      ApplicationId applicationId, ReservationId reservationID)", "modifiers": "private synchronized", "return": "String", "signature": "String resolveReservationQueueName(String queueName,\n      ApplicationId applicationId, ReservationId reservationID)", "full_signature": "private synchronized String resolveReservationQueueName(String queueName,\n      ApplicationId applicationId, ReservationId reservationID)", "class_method_signature": "FairScheduler.resolveReservationQueueName(String queueName,\n      ApplicationId applicationId, ReservationId reservationID)", "testcase": false, "constructor": false}, {"identifier": "getDefaultQueueForPlanQueue", "parameters": "(String queueName)", "modifiers": "private", "return": "String", "signature": "String getDefaultQueueForPlanQueue(String queueName)", "full_signature": "private String getDefaultQueueForPlanQueue(String queueName)", "class_method_signature": "FairScheduler.getDefaultQueueForPlanQueue(String queueName)", "testcase": false, "constructor": false}, {"identifier": "recover", "parameters": "(RMState state)", "modifiers": "@Override public", "return": "void", "signature": "void recover(RMState state)", "full_signature": "@Override public void recover(RMState state)", "class_method_signature": "FairScheduler.recover(RMState state)", "testcase": false, "constructor": false}, {"identifier": "setRMContext", "parameters": "(RMContext rmContext)", "modifiers": "public synchronized", "return": "void", "signature": "void setRMContext(RMContext rmContext)", "full_signature": "public synchronized void setRMContext(RMContext rmContext)", "class_method_signature": "FairScheduler.setRMContext(RMContext rmContext)", "testcase": false, "constructor": false}, {"identifier": "initScheduler", "parameters": "(Configuration conf)", "modifiers": "private", "return": "void", "signature": "void initScheduler(Configuration conf)", "full_signature": "private void initScheduler(Configuration conf)", "class_method_signature": "FairScheduler.initScheduler(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "startSchedulerThreads", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void startSchedulerThreads()", "full_signature": "private synchronized void startSchedulerThreads()", "class_method_signature": "FairScheduler.startSchedulerThreads()", "testcase": false, "constructor": false}, {"identifier": "serviceInit", "parameters": "(Configuration conf)", "modifiers": "@Override public", "return": "void", "signature": "void serviceInit(Configuration conf)", "full_signature": "@Override public void serviceInit(Configuration conf)", "class_method_signature": "FairScheduler.serviceInit(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "serviceStart", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void serviceStart()", "full_signature": "@Override public void serviceStart()", "class_method_signature": "FairScheduler.serviceStart()", "testcase": false, "constructor": false}, {"identifier": "serviceStop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void serviceStop()", "full_signature": "@Override public void serviceStop()", "class_method_signature": "FairScheduler.serviceStop()", "testcase": false, "constructor": false}, {"identifier": "reinitialize", "parameters": "(Configuration conf, RMContext rmContext)", "modifiers": "@Override public", "return": "void", "signature": "void reinitialize(Configuration conf, RMContext rmContext)", "full_signature": "@Override public void reinitialize(Configuration conf, RMContext rmContext)", "class_method_signature": "FairScheduler.reinitialize(Configuration conf, RMContext rmContext)", "testcase": false, "constructor": false}, {"identifier": "getQueueInfo", "parameters": "(String queueName, boolean includeChildQueues,\n      boolean recursive)", "modifiers": "@Override public", "return": "QueueInfo", "signature": "QueueInfo getQueueInfo(String queueName, boolean includeChildQueues,\n      boolean recursive)", "full_signature": "@Override public QueueInfo getQueueInfo(String queueName, boolean includeChildQueues,\n      boolean recursive)", "class_method_signature": "FairScheduler.getQueueInfo(String queueName, boolean includeChildQueues,\n      boolean recursive)", "testcase": false, "constructor": false}, {"identifier": "getQueueUserAclInfo", "parameters": "()", "modifiers": "@Override public", "return": "List<QueueUserACLInfo>", "signature": "List<QueueUserACLInfo> getQueueUserAclInfo()", "full_signature": "@Override public List<QueueUserACLInfo> getQueueUserAclInfo()", "class_method_signature": "FairScheduler.getQueueUserAclInfo()", "testcase": false, "constructor": false}, {"identifier": "getNumClusterNodes", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNumClusterNodes()", "full_signature": "@Override public int getNumClusterNodes()", "class_method_signature": "FairScheduler.getNumClusterNodes()", "testcase": false, "constructor": false}, {"identifier": "checkAccess", "parameters": "(UserGroupInformation callerUGI,\n      QueueACL acl, String queueName)", "modifiers": "@Override public synchronized", "return": "boolean", "signature": "boolean checkAccess(UserGroupInformation callerUGI,\n      QueueACL acl, String queueName)", "full_signature": "@Override public synchronized boolean checkAccess(UserGroupInformation callerUGI,\n      QueueACL acl, String queueName)", "class_method_signature": "FairScheduler.checkAccess(UserGroupInformation callerUGI,\n      QueueACL acl, String queueName)", "testcase": false, "constructor": false}, {"identifier": "getAllocationConfiguration", "parameters": "()", "modifiers": "public", "return": "AllocationConfiguration", "signature": "AllocationConfiguration getAllocationConfiguration()", "full_signature": "public AllocationConfiguration getAllocationConfiguration()", "class_method_signature": "FairScheduler.getAllocationConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getAppsInQueue", "parameters": "(String queueName)", "modifiers": "@Override public", "return": "List<ApplicationAttemptId>", "signature": "List<ApplicationAttemptId> getAppsInQueue(String queueName)", "full_signature": "@Override public List<ApplicationAttemptId> getAppsInQueue(String queueName)", "class_method_signature": "FairScheduler.getAppsInQueue(String queueName)", "testcase": false, "constructor": false}, {"identifier": "moveApplication", "parameters": "(ApplicationId appId,\n      String queueName)", "modifiers": "@Override public synchronized", "return": "String", "signature": "String moveApplication(ApplicationId appId,\n      String queueName)", "full_signature": "@Override public synchronized String moveApplication(ApplicationId appId,\n      String queueName)", "class_method_signature": "FairScheduler.moveApplication(ApplicationId appId,\n      String queueName)", "testcase": false, "constructor": false}, {"identifier": "verifyMoveDoesNotViolateConstraints", "parameters": "(FSAppAttempt app,\n      FSLeafQueue oldQueue, FSLeafQueue targetQueue)", "modifiers": "private", "return": "void", "signature": "void verifyMoveDoesNotViolateConstraints(FSAppAttempt app,\n      FSLeafQueue oldQueue, FSLeafQueue targetQueue)", "full_signature": "private void verifyMoveDoesNotViolateConstraints(FSAppAttempt app,\n      FSLeafQueue oldQueue, FSLeafQueue targetQueue)", "class_method_signature": "FairScheduler.verifyMoveDoesNotViolateConstraints(FSAppAttempt app,\n      FSLeafQueue oldQueue, FSLeafQueue targetQueue)", "testcase": false, "constructor": false}, {"identifier": "executeMove", "parameters": "(SchedulerApplication<FSAppAttempt> app,\n      FSAppAttempt attempt, FSLeafQueue oldQueue, FSLeafQueue newQueue)", "modifiers": "private", "return": "void", "signature": "void executeMove(SchedulerApplication<FSAppAttempt> app,\n      FSAppAttempt attempt, FSLeafQueue oldQueue, FSLeafQueue newQueue)", "full_signature": "private void executeMove(SchedulerApplication<FSAppAttempt> app,\n      FSAppAttempt attempt, FSLeafQueue oldQueue, FSLeafQueue newQueue)", "class_method_signature": "FairScheduler.executeMove(SchedulerApplication<FSAppAttempt> app,\n      FSAppAttempt attempt, FSLeafQueue oldQueue, FSLeafQueue newQueue)", "testcase": false, "constructor": false}, {"identifier": "findLowestCommonAncestorQueue", "parameters": "(FSQueue queue1, FSQueue queue2)", "modifiers": "@VisibleForTesting", "return": "FSQueue", "signature": "FSQueue findLowestCommonAncestorQueue(FSQueue queue1, FSQueue queue2)", "full_signature": "@VisibleForTesting FSQueue findLowestCommonAncestorQueue(FSQueue queue1, FSQueue queue2)", "class_method_signature": "FairScheduler.findLowestCommonAncestorQueue(FSQueue queue1, FSQueue queue2)", "testcase": false, "constructor": false}, {"identifier": "updateNodeResource", "parameters": "(RMNode nm, \n      ResourceOption resourceOption)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void updateNodeResource(RMNode nm, \n      ResourceOption resourceOption)", "full_signature": "@Override public synchronized void updateNodeResource(RMNode nm, \n      ResourceOption resourceOption)", "class_method_signature": "FairScheduler.updateNodeResource(RMNode nm, \n      ResourceOption resourceOption)", "testcase": false, "constructor": false}, {"identifier": "getSchedulingResourceTypes", "parameters": "()", "modifiers": "@Override public", "return": "EnumSet<SchedulerResourceTypes>", "signature": "EnumSet<SchedulerResourceTypes> getSchedulingResourceTypes()", "full_signature": "@Override public EnumSet<SchedulerResourceTypes> getSchedulingResourceTypes()", "class_method_signature": "FairScheduler.getSchedulingResourceTypes()", "testcase": false, "constructor": false}, {"identifier": "getPlanQueues", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getPlanQueues()", "full_signature": "@Override public Set<String> getPlanQueues()", "class_method_signature": "FairScheduler.getPlanQueues()", "testcase": false, "constructor": false}, {"identifier": "setEntitlement", "parameters": "(String queueName,\n      QueueEntitlement entitlement)", "modifiers": "@Override public", "return": "void", "signature": "void setEntitlement(String queueName,\n      QueueEntitlement entitlement)", "full_signature": "@Override public void setEntitlement(String queueName,\n      QueueEntitlement entitlement)", "class_method_signature": "FairScheduler.setEntitlement(String queueName,\n      QueueEntitlement entitlement)", "testcase": false, "constructor": false}, {"identifier": "removeQueue", "parameters": "(String queueName)", "modifiers": "@Override public", "return": "void", "signature": "void removeQueue(String queueName)", "full_signature": "@Override public void removeQueue(String queueName)", "class_method_signature": "FairScheduler.removeQueue(String queueName)", "testcase": false, "constructor": false}, {"identifier": "handleMoveToPlanQueue", "parameters": "(String targetQueueName)", "modifiers": "private", "return": "String", "signature": "String handleMoveToPlanQueue(String targetQueueName)", "full_signature": "private String handleMoveToPlanQueue(String targetQueueName)", "class_method_signature": "FairScheduler.handleMoveToPlanQueue(String targetQueueName)", "testcase": false, "constructor": false}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java"}, "focal_method": {"identifier": "getAppsInQueue", "parameters": "(String queueName)", "modifiers": "@Override public", "return": "List<ApplicationAttemptId>", "body": "@Override\n  public List<ApplicationAttemptId> getAppsInQueue(String queueName) {\n    FSQueue queue = queueMgr.getQueue(queueName);\n    if (queue == null) {\n      return null;\n    }\n    List<ApplicationAttemptId> apps = new ArrayList<ApplicationAttemptId>();\n    queue.collectSchedulerApplications(apps);\n    return apps;\n  }", "signature": "List<ApplicationAttemptId> getAppsInQueue(String queueName)", "full_signature": "@Override public List<ApplicationAttemptId> getAppsInQueue(String queueName)", "class_method_signature": "FairScheduler.getAppsInQueue(String queueName)", "testcase": false, "constructor": false, "invocations": ["getQueue", "collectSchedulerApplications"]}, "repository": {"repo_id": 195808004, "url": "https://github.com/mouzwang/hadoop-2.7.2", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 24927, "license": "licensed"}}