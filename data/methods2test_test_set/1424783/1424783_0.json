{"test_class": {"identifier": "FastNumberTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Number[] NUMBERS = new Number[]{\n            new Integer(0),\n            new Integer(1),\n            new Integer(-1),\n            new Integer(Integer.MAX_VALUE),\n            new Integer(Integer.MIN_VALUE),\n\n            new Long(0),\n            new Long(1),\n            new Long(-1),\n            new Long(Long.MAX_VALUE),\n            new Long(Long.MIN_VALUE),\n\n            new Double(0),\n            new Double(1),\n            new Double(-1),\n            new Double(87654321.12345d),\n            new Double(0.0002f),\n            new Double(Double.MAX_VALUE),\n            new Double(Double.MIN_VALUE),\n\n            new Float(0),\n            new Float(1.0f),\n            new Float(-1.0f),\n            new Float(8765.4321f),\n            new Float(1098.576f),\n            new Float(Float.MIN_VALUE),\n            new Float(Float.MAX_VALUE),\n    };", "modifier": "private static final", "type": "Number[]", "declarator": "NUMBERS = new Number[]{\n            new Integer(0),\n            new Integer(1),\n            new Integer(-1),\n            new Integer(Integer.MAX_VALUE),\n            new Integer(Integer.MIN_VALUE),\n\n            new Long(0),\n            new Long(1),\n            new Long(-1),\n            new Long(Long.MAX_VALUE),\n            new Long(Long.MIN_VALUE),\n\n            new Double(0),\n            new Double(1),\n            new Double(-1),\n            new Double(87654321.12345d),\n            new Double(0.0002f),\n            new Double(Double.MAX_VALUE),\n            new Double(Double.MIN_VALUE),\n\n            new Float(0),\n            new Float(1.0f),\n            new Float(-1.0f),\n            new Float(8765.4321f),\n            new Float(1098.576f),\n            new Float(Float.MIN_VALUE),\n            new Float(Float.MAX_VALUE),\n    }", "var_name": "NUMBERS"}, {"original_string": "private static final Number[] NUMBERS_CLONE = new Number[]{\n            new Integer(0),\n            new Integer(1),\n            new Integer(-1),\n            new Integer(Integer.MAX_VALUE),\n            new Integer(Integer.MIN_VALUE),\n\n            new Long(0),\n            new Long(1),\n            new Long(-1),\n            new Long(Long.MAX_VALUE),\n            new Long(Long.MIN_VALUE),\n\n            new Double(0),\n            new Double(1),\n            new Double(-1),\n            new Double(87654321.12345d),\n            new Double(0.0002f),\n            new Double(Double.MAX_VALUE),\n            new Double(Double.MIN_VALUE),\n\n            new Float(0),\n            new Float(1.0f),\n            new Float(-1.0f),\n            new Float(8765.4321f),\n            new Float(1098.576f),\n            new Float(Float.MIN_VALUE),\n            new Float(Float.MAX_VALUE),\n    };", "modifier": "private static final", "type": "Number[]", "declarator": "NUMBERS_CLONE = new Number[]{\n            new Integer(0),\n            new Integer(1),\n            new Integer(-1),\n            new Integer(Integer.MAX_VALUE),\n            new Integer(Integer.MIN_VALUE),\n\n            new Long(0),\n            new Long(1),\n            new Long(-1),\n            new Long(Long.MAX_VALUE),\n            new Long(Long.MIN_VALUE),\n\n            new Double(0),\n            new Double(1),\n            new Double(-1),\n            new Double(87654321.12345d),\n            new Double(0.0002f),\n            new Double(Double.MAX_VALUE),\n            new Double(Double.MIN_VALUE),\n\n            new Float(0),\n            new Float(1.0f),\n            new Float(-1.0f),\n            new Float(8765.4321f),\n            new Float(1098.576f),\n            new Float(Float.MIN_VALUE),\n            new Float(Float.MAX_VALUE),\n    }", "var_name": "NUMBERS_CLONE"}], "file": "androidplot-core/src/test/java/com/androidplot/util/FastNumberTest.java"}, "test_case": {"identifier": "orNull_returnsNull_ifNullNumber", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void orNull_returnsNull_ifNullNumber() {\n        //noinspection ConstantConditions\n        assertNull(FastNumber.orNull(null));\n    }", "signature": "void orNull_returnsNull_ifNullNumber()", "full_signature": "@Test public void orNull_returnsNull_ifNullNumber()", "class_method_signature": "FastNumberTest.orNull_returnsNull_ifNullNumber()", "testcase": true, "constructor": false, "invocations": ["assertNull", "orNull"]}, "focal_class": {"identifier": "FastNumber", "superclass": "extends Number", "interfaces": "", "fields": [{"original_string": "@NonNull private final Number number;", "modifier": "@NonNull private final", "type": "Number", "declarator": "number", "var_name": "number"}, {"original_string": "private boolean hasDoublePrimitive;", "modifier": "private", "type": "boolean", "declarator": "hasDoublePrimitive", "var_name": "hasDoublePrimitive"}, {"original_string": "private boolean hasFloatPrimitive;", "modifier": "private", "type": "boolean", "declarator": "hasFloatPrimitive", "var_name": "hasFloatPrimitive"}, {"original_string": "private boolean hasIntPrimitive;", "modifier": "private", "type": "boolean", "declarator": "hasIntPrimitive", "var_name": "hasIntPrimitive"}, {"original_string": "private double doublePrimitive;", "modifier": "private", "type": "double", "declarator": "doublePrimitive", "var_name": "doublePrimitive"}, {"original_string": "private float floatPrimitive;", "modifier": "private", "type": "float", "declarator": "floatPrimitive", "var_name": "floatPrimitive"}, {"original_string": "private int intPrimitive;", "modifier": "private", "type": "int", "declarator": "intPrimitive", "var_name": "intPrimitive"}], "methods": [{"identifier": "orNull", "parameters": "(@NonNull Number number)", "modifiers": "public static", "return": "FastNumber", "signature": "FastNumber orNull(@NonNull Number number)", "full_signature": "public static FastNumber orNull(@NonNull Number number)", "class_method_signature": "FastNumber.orNull(@NonNull Number number)", "testcase": false, "constructor": false}, {"identifier": "FastNumber", "parameters": "(@NonNull Number number)", "modifiers": "private", "return": "", "signature": " FastNumber(@NonNull Number number)", "full_signature": "private  FastNumber(@NonNull Number number)", "class_method_signature": "FastNumber.FastNumber(@NonNull Number number)", "testcase": false, "constructor": true}, {"identifier": "intValue", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int intValue()", "full_signature": "@Override public int intValue()", "class_method_signature": "FastNumber.intValue()", "testcase": false, "constructor": false}, {"identifier": "longValue", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long longValue()", "full_signature": "@Override public long longValue()", "class_method_signature": "FastNumber.longValue()", "testcase": false, "constructor": false}, {"identifier": "floatValue", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float floatValue()", "full_signature": "@Override public float floatValue()", "class_method_signature": "FastNumber.floatValue()", "testcase": false, "constructor": false}, {"identifier": "doubleValue", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double doubleValue()", "full_signature": "@Override public double doubleValue()", "class_method_signature": "FastNumber.doubleValue()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(@Nullable Object o)", "full_signature": "@Override public boolean equals(@Nullable Object o)", "class_method_signature": "FastNumber.equals(@Nullable Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "FastNumber.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@NonNull @Override public", "return": "String", "signature": "String toString()", "full_signature": "@NonNull @Override public String toString()", "class_method_signature": "FastNumber.toString()", "testcase": false, "constructor": false}], "file": "androidplot-core/src/main/java/com/androidplot/util/FastNumber.java"}, "focal_method": {"identifier": "orNull", "parameters": "(@NonNull Number number)", "modifiers": "public static", "return": "FastNumber", "body": "public static FastNumber orNull(@NonNull Number number) {\n        if(number == null) {\n            return null;\n        } else {\n            return new FastNumber(number);\n        }\n    }", "signature": "FastNumber orNull(@NonNull Number number)", "full_signature": "public static FastNumber orNull(@NonNull Number number)", "class_method_signature": "FastNumber.orNull(@NonNull Number number)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1424783, "url": "https://github.com/halfhp/androidplot", "language": "Java", "is_fork": false, "fork_count": 129, "stargazer_count": 369, "size": 7178, "license": "licensed"}}