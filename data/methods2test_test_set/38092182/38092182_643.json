{"test_class": {"identifier": "ServerPositioningSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock DownloadTaskProvider mockDownloadTaskProvider;", "modifier": "@Mock", "type": "DownloadTaskProvider", "declarator": "mockDownloadTaskProvider", "var_name": "mockDownloadTaskProvider"}, {"original_string": "@Mock DownloadTaskListener mockDownloadTaskListener;", "modifier": "@Mock", "type": "DownloadTaskListener", "declarator": "mockDownloadTaskListener", "var_name": "mockDownloadTaskListener"}, {"original_string": "@Mock DownloadTask mockDownloadTask;", "modifier": "@Mock", "type": "DownloadTask", "declarator": "mockDownloadTask", "var_name": "mockDownloadTask"}, {"original_string": "@Mock PositioningListener mockPositioningListener;", "modifier": "@Mock", "type": "PositioningListener", "declarator": "mockPositioningListener", "var_name": "mockPositioningListener"}, {"original_string": "@Captor ArgumentCaptor<DownloadTaskListener> taskListenerCaptor;", "modifier": "@Captor", "type": "ArgumentCaptor<DownloadTaskListener>", "declarator": "taskListenerCaptor", "var_name": "taskListenerCaptor"}, {"original_string": "@Mock DownloadResponse mockValidResponse;", "modifier": "@Mock", "type": "DownloadResponse", "declarator": "mockValidResponse", "var_name": "mockValidResponse"}, {"original_string": "@Mock DownloadResponse mockNotFoundResponse;", "modifier": "@Mock", "type": "DownloadResponse", "declarator": "mockNotFoundResponse", "var_name": "mockNotFoundResponse"}, {"original_string": "@Mock DownloadResponse mockInvalidJsonResponse;", "modifier": "@Mock", "type": "DownloadResponse", "declarator": "mockInvalidJsonResponse", "var_name": "mockInvalidJsonResponse"}, {"original_string": "@Mock DownloadResponse mockWarmingUpJsonResponse;", "modifier": "@Mock", "type": "DownloadResponse", "declarator": "mockWarmingUpJsonResponse", "var_name": "mockWarmingUpJsonResponse"}, {"original_string": "@Captor ArgumentCaptor<MoPubClientPositioning> positioningCaptor;", "modifier": "@Captor", "type": "ArgumentCaptor<MoPubClientPositioning>", "declarator": "positioningCaptor", "var_name": "positioningCaptor"}, {"original_string": "ServerPositioningSource subject;", "modifier": "", "type": "ServerPositioningSource", "declarator": "subject", "var_name": "subject"}], "file": "MoPubAd/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java"}, "test_case": {"identifier": "parseJsonResponse_oneFixedPosition_shouldReturnValidPositioning", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseJsonResponse_oneFixedPosition_shouldReturnValidPositioning()\n            throws JSONException {\n        MoPubClientPositioning positioning = subject.parseJsonResponse(\n                \"{fixed: [{position: 2}]}\");\n        assertThat(positioning.getFixedPositions()).containsOnly(2);\n        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubClientPositioning.NO_REPEAT);\n    }", "signature": "void parseJsonResponse_oneFixedPosition_shouldReturnValidPositioning()", "full_signature": "@Test public void parseJsonResponse_oneFixedPosition_shouldReturnValidPositioning()", "class_method_signature": "ServerPositioningSourceTest.parseJsonResponse_oneFixedPosition_shouldReturnValidPositioning()", "testcase": true, "constructor": false, "invocations": ["parseJsonResponse", "containsOnly", "assertThat", "getFixedPositions", "isEqualTo", "assertThat", "getRepeatingInterval"]}, "focal_class": {"identifier": "ServerPositioningSource", "superclass": "", "interfaces": "implements PositioningSource", "fields": [{"original_string": "private static final double DEFAULT_RETRY_TIME_MILLISECONDS = 1000;", "modifier": "private static final", "type": "double", "declarator": "DEFAULT_RETRY_TIME_MILLISECONDS = 1000", "var_name": "DEFAULT_RETRY_TIME_MILLISECONDS"}, {"original_string": "private static final double EXPONENTIAL_BACKOFF_FACTOR = 2;", "modifier": "private static final", "type": "double", "declarator": "EXPONENTIAL_BACKOFF_FACTOR = 2", "var_name": "EXPONENTIAL_BACKOFF_FACTOR"}, {"original_string": "@VisibleForTesting\n    static int MAXIMUM_RETRY_TIME_MILLISECONDS = 5 * 60 * 1000;", "modifier": "@VisibleForTesting\n    static", "type": "int", "declarator": "MAXIMUM_RETRY_TIME_MILLISECONDS = 5 * 60 * 1000", "var_name": "MAXIMUM_RETRY_TIME_MILLISECONDS"}, {"original_string": "private static final String FIXED_KEY = \"fixed\";", "modifier": "private static final", "type": "String", "declarator": "FIXED_KEY = \"fixed\"", "var_name": "FIXED_KEY"}, {"original_string": "private static final String SECTION_KEY = \"section\";", "modifier": "private static final", "type": "String", "declarator": "SECTION_KEY = \"section\"", "var_name": "SECTION_KEY"}, {"original_string": "private static final String POSITION_KEY = \"position\";", "modifier": "private static final", "type": "String", "declarator": "POSITION_KEY = \"position\"", "var_name": "POSITION_KEY"}, {"original_string": "private static final String REPEATING_KEY = \"repeating\";", "modifier": "private static final", "type": "String", "declarator": "REPEATING_KEY = \"repeating\"", "var_name": "REPEATING_KEY"}, {"original_string": "private static final String INTERVAL_KEY = \"interval\";", "modifier": "private static final", "type": "String", "declarator": "INTERVAL_KEY = \"interval\"", "var_name": "INTERVAL_KEY"}, {"original_string": "private static final int MAX_VALUE = 1 << 16;", "modifier": "private static final", "type": "int", "declarator": "MAX_VALUE = 1 << 16", "var_name": "MAX_VALUE"}, {"original_string": "@NonNull private final Context mContext;", "modifier": "@NonNull private final", "type": "Context", "declarator": "mContext", "var_name": "mContext"}, {"original_string": "@NonNull private final DownloadTaskProvider mDownloadTaskProvider;", "modifier": "@NonNull private final", "type": "DownloadTaskProvider", "declarator": "mDownloadTaskProvider", "var_name": "mDownloadTaskProvider"}, {"original_string": "@NonNull private final Handler mRetryHandler;", "modifier": "@NonNull private final", "type": "Handler", "declarator": "mRetryHandler", "var_name": "mRetryHandler"}, {"original_string": "@NonNull private final Runnable mRetryRunnable;", "modifier": "@NonNull private final", "type": "Runnable", "declarator": "mRetryRunnable", "var_name": "mRetryRunnable"}, {"original_string": "@Nullable private DownloadTask mDownloadTask;", "modifier": "@Nullable private", "type": "DownloadTask", "declarator": "mDownloadTask", "var_name": "mDownloadTask"}, {"original_string": "@Nullable private PositioningListener mListener;", "modifier": "@Nullable private", "type": "PositioningListener", "declarator": "mListener", "var_name": "mListener"}, {"original_string": "private int mRetryCount;", "modifier": "private", "type": "int", "declarator": "mRetryCount", "var_name": "mRetryCount"}, {"original_string": "@Nullable private String mRetryUrl;", "modifier": "@Nullable private", "type": "String", "declarator": "mRetryUrl", "var_name": "mRetryUrl"}, {"original_string": "@NonNull\n    @VisibleForTesting\n    DownloadTaskListener mTaskListener = new DownloadTask.DownloadTaskListener() {\n        @Override\n        public void onComplete(@Nullable final String url,\n                @Nullable final DownloadResponse downloadResponse) {\n            mDownloadTask = null;\n            if (downloadResponse == null || downloadResponse.getStatusCode() != HttpStatus.SC_OK) {\n                MoPubLog.e(\"Invalid positioning download response\");\n                handleFailure();\n                return;\n            }\n\n            String responseText = HttpResponses.asResponseString(downloadResponse);\n            MoPubClientPositioning positioning;\n            try {\n                positioning = parseJsonResponse(responseText);\n            } catch (JSONException exception) {\n                MoPubLog.e(\"Error parsing JSON: \", exception);\n                MoPubEvents.log(new Event.Builder(\"\", \"\").build());\n                handleFailure();\n                return;\n            }\n\n            handleSuccess(positioning);\n        }\n    };", "modifier": "@NonNull\n    @VisibleForTesting", "type": "DownloadTaskListener", "declarator": "mTaskListener = new DownloadTask.DownloadTaskListener() {\n        @Override\n        public void onComplete(@Nullable final String url,\n                @Nullable final DownloadResponse downloadResponse) {\n            mDownloadTask = null;\n            if (downloadResponse == null || downloadResponse.getStatusCode() != HttpStatus.SC_OK) {\n                MoPubLog.e(\"Invalid positioning download response\");\n                handleFailure();\n                return;\n            }\n\n            String responseText = HttpResponses.asResponseString(downloadResponse);\n            MoPubClientPositioning positioning;\n            try {\n                positioning = parseJsonResponse(responseText);\n            } catch (JSONException exception) {\n                MoPubLog.e(\"Error parsing JSON: \", exception);\n                MoPubEvents.log(new Event.Builder(\"\", \"\").build());\n                handleFailure();\n                return;\n            }\n\n            handleSuccess(positioning);\n        }\n    }", "var_name": "mTaskListener"}], "methods": [{"identifier": "ServerPositioningSource", "parameters": "(@NonNull final Context context)", "modifiers": "", "return": "", "signature": " ServerPositioningSource(@NonNull final Context context)", "full_signature": "  ServerPositioningSource(@NonNull final Context context)", "class_method_signature": "ServerPositioningSource.ServerPositioningSource(@NonNull final Context context)", "testcase": false, "constructor": true}, {"identifier": "ServerPositioningSource", "parameters": "(@NonNull final Context context,\n            @NonNull final DownloadTaskProvider downloadTaskProvider)", "modifiers": "@VisibleForTesting", "return": "", "signature": " ServerPositioningSource(@NonNull final Context context,\n            @NonNull final DownloadTaskProvider downloadTaskProvider)", "full_signature": "@VisibleForTesting  ServerPositioningSource(@NonNull final Context context,\n            @NonNull final DownloadTaskProvider downloadTaskProvider)", "class_method_signature": "ServerPositioningSource.ServerPositioningSource(@NonNull final Context context,\n            @NonNull final DownloadTaskProvider downloadTaskProvider)", "testcase": false, "constructor": true}, {"identifier": "loadPositions", "parameters": "(@NonNull String adUnitId, @NonNull PositioningListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void loadPositions(@NonNull String adUnitId, @NonNull PositioningListener listener)", "full_signature": "@Override public void loadPositions(@NonNull String adUnitId, @NonNull PositioningListener listener)", "class_method_signature": "ServerPositioningSource.loadPositions(@NonNull String adUnitId, @NonNull PositioningListener listener)", "testcase": false, "constructor": false}, {"identifier": "requestPositioningInternal", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void requestPositioningInternal()", "full_signature": "private void requestPositioningInternal()", "class_method_signature": "ServerPositioningSource.requestPositioningInternal()", "testcase": false, "constructor": false}, {"identifier": "handleSuccess", "parameters": "(@NonNull MoPubClientPositioning positioning)", "modifiers": "private", "return": "void", "signature": "void handleSuccess(@NonNull MoPubClientPositioning positioning)", "full_signature": "private void handleSuccess(@NonNull MoPubClientPositioning positioning)", "class_method_signature": "ServerPositioningSource.handleSuccess(@NonNull MoPubClientPositioning positioning)", "testcase": false, "constructor": false}, {"identifier": "handleFailure", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void handleFailure()", "full_signature": "private void handleFailure()", "class_method_signature": "ServerPositioningSource.handleFailure()", "testcase": false, "constructor": false}, {"identifier": "parseJsonResponse", "parameters": "(@Nullable String json)", "modifiers": "@NonNull @VisibleForTesting", "return": "MoPubClientPositioning", "signature": "MoPubClientPositioning parseJsonResponse(@Nullable String json)", "full_signature": "@NonNull @VisibleForTesting MoPubClientPositioning parseJsonResponse(@Nullable String json)", "class_method_signature": "ServerPositioningSource.parseJsonResponse(@Nullable String json)", "testcase": false, "constructor": false}, {"identifier": "parseFixedJson", "parameters": "(@NonNull final JSONArray fixed,\n            @NonNull final MoPubClientPositioning positioning)", "modifiers": "private", "return": "void", "signature": "void parseFixedJson(@NonNull final JSONArray fixed,\n            @NonNull final MoPubClientPositioning positioning)", "full_signature": "private void parseFixedJson(@NonNull final JSONArray fixed,\n            @NonNull final MoPubClientPositioning positioning)", "class_method_signature": "ServerPositioningSource.parseFixedJson(@NonNull final JSONArray fixed,\n            @NonNull final MoPubClientPositioning positioning)", "testcase": false, "constructor": false}, {"identifier": "parseRepeatingJson", "parameters": "(@NonNull final JSONObject repeatingObject,\n            @NonNull final MoPubClientPositioning positioning)", "modifiers": "private", "return": "void", "signature": "void parseRepeatingJson(@NonNull final JSONObject repeatingObject,\n            @NonNull final MoPubClientPositioning positioning)", "full_signature": "private void parseRepeatingJson(@NonNull final JSONObject repeatingObject,\n            @NonNull final MoPubClientPositioning positioning)", "class_method_signature": "ServerPositioningSource.parseRepeatingJson(@NonNull final JSONObject repeatingObject,\n            @NonNull final MoPubClientPositioning positioning)", "testcase": false, "constructor": false}], "file": "MoPubAd/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java"}, "focal_method": {"identifier": "parseJsonResponse", "parameters": "(@Nullable String json)", "modifiers": "@NonNull @VisibleForTesting", "return": "MoPubClientPositioning", "body": "@NonNull\n    @VisibleForTesting\n    MoPubClientPositioning parseJsonResponse(@Nullable String json) throws JSONException {\n        if (json == null || json.equals(\"\")) {\n            throw new JSONException(\"Empty response\");\n        }\n\n        // If the server returns an error explicitly, throw an error with the message.\n        JSONObject jsonObject = new JSONObject(json);\n        String error = jsonObject.optString(\"error\", null);\n        if (error != null) {\n            throw new JSONException(error);\n        }\n\n        // Parse fixed and repeating rules.\n        JSONArray fixed = jsonObject.optJSONArray(FIXED_KEY);\n        JSONObject repeating = jsonObject.optJSONObject(REPEATING_KEY);\n        MoPubClientPositioning positioning = new MoPubClientPositioning();\n        if (fixed == null && repeating == null) {\n            throw new JSONException(\"Must contain fixed or repeating positions\");\n        }\n        if (fixed != null) {\n            parseFixedJson(fixed, positioning);\n        }\n        if (repeating != null) {\n            parseRepeatingJson(repeating, positioning);\n        }\n        return positioning;\n    }", "signature": "MoPubClientPositioning parseJsonResponse(@Nullable String json)", "full_signature": "@NonNull @VisibleForTesting MoPubClientPositioning parseJsonResponse(@Nullable String json)", "class_method_signature": "ServerPositioningSource.parseJsonResponse(@Nullable String json)", "testcase": false, "constructor": false, "invocations": ["equals", "optString", "optJSONArray", "optJSONObject", "parseFixedJson", "parseRepeatingJson"]}, "repository": {"repo_id": 38092182, "url": "https://github.com/harshalbenake/hbworkspace2-100", "language": "Java", "is_fork": false, "fork_count": 160, "stargazer_count": 191, "size": 307516, "license": "licensed"}}