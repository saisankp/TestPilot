{"test_class": {"identifier": "ReadThroughSingleCacheAdviceTest", "superclass": "extends AbstractCacheTest<ReadThroughSingleCacheAdvice>", "interfaces": "", "fields": [{"original_string": "private static final String NS = \"TEST_NS\";", "modifier": "private static final", "type": "String", "declarator": "NS = \"TEST_NS\"", "var_name": "NS"}, {"original_string": "private static final int EXPIRATION = 110;", "modifier": "private static final", "type": "int", "declarator": "EXPIRATION = 110", "var_name": "EXPIRATION"}, {"original_string": "private final Object expectedValue;", "modifier": "private final", "type": "Object", "declarator": "expectedValue", "var_name": "expectedValue"}], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/aop/ReadThroughSingleCacheAdviceTest.java"}, "test_case": {"identifier": "validCacheHit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validCacheHit() throws Throwable {\n        Assume.assumeTrue(isValid);\n\n        when(cache.get(eq(cacheKey), any(SerializationType.class))).thenReturn(expectedValue);\n\n        assertEquals(expectedValue, advice.cacheGetSingle(pjp));\n\n        verify(cache).get(eq(cacheKey), any(SerializationType.class));\n        verify(cache, never()).set(anyString(), anyInt(), any(), any(SerializationType.class));\n        verify(pjp, never()).proceed();\n    }", "signature": "void validCacheHit()", "full_signature": "@Test public void validCacheHit()", "class_method_signature": "ReadThroughSingleCacheAdviceTest.validCacheHit()", "testcase": true, "constructor": false, "invocations": ["assumeTrue", "thenReturn", "when", "get", "eq", "any", "assertEquals", "cacheGetSingle", "get", "verify", "eq", "any", "set", "verify", "never", "anyString", "anyInt", "any", "any", "proceed", "verify", "never"]}, "focal_class": {"identifier": "ReadThroughSingleCacheAdvice", "superclass": "extends SingleReadCacheAdvice<ReadThroughSingleCache>", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ReadThroughSingleCacheAdvice.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ReadThroughSingleCacheAdvice.class)", "var_name": "LOG"}], "methods": [{"identifier": "ReadThroughSingleCacheAdvice", "parameters": "()", "modifiers": "public", "return": "", "signature": " ReadThroughSingleCacheAdvice()", "full_signature": "public  ReadThroughSingleCacheAdvice()", "class_method_signature": "ReadThroughSingleCacheAdvice.ReadThroughSingleCacheAdvice()", "testcase": false, "constructor": true}, {"identifier": "getSingle", "parameters": "()", "modifiers": "@Pointcut(\"@annotation(com.google.code.ssm.api.ReadThroughSingleCache)\") public", "return": "void", "signature": "void getSingle()", "full_signature": "@Pointcut(\"@annotation(com.google.code.ssm.api.ReadThroughSingleCache)\") public void getSingle()", "class_method_signature": "ReadThroughSingleCacheAdvice.getSingle()", "testcase": false, "constructor": false}, {"identifier": "cacheGetSingle", "parameters": "(final ProceedingJoinPoint pjp)", "modifiers": "@Around(\"getSingle()\") public", "return": "Object", "signature": "Object cacheGetSingle(final ProceedingJoinPoint pjp)", "full_signature": "@Around(\"getSingle()\") public Object cacheGetSingle(final ProceedingJoinPoint pjp)", "class_method_signature": "ReadThroughSingleCacheAdvice.cacheGetSingle(final ProceedingJoinPoint pjp)", "testcase": false, "constructor": false}, {"identifier": "getCacheKey", "parameters": "(final AnnotationData data, final Object[] args, final String methodDesc)", "modifiers": "@Override protected", "return": "String", "signature": "String getCacheKey(final AnnotationData data, final Object[] args, final String methodDesc)", "full_signature": "@Override protected String getCacheKey(final AnnotationData data, final Object[] args, final String methodDesc)", "class_method_signature": "ReadThroughSingleCacheAdvice.getCacheKey(final AnnotationData data, final Object[] args, final String methodDesc)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "@Override protected", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "@Override protected Logger getLogger()", "class_method_signature": "ReadThroughSingleCacheAdvice.getLogger()", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/aop/ReadThroughSingleCacheAdvice.java"}, "focal_method": {"identifier": "cacheGetSingle", "parameters": "(final ProceedingJoinPoint pjp)", "modifiers": "@Around(\"getSingle()\") public", "return": "Object", "body": "@Around(\"getSingle()\")\n    public Object cacheGetSingle(final ProceedingJoinPoint pjp) throws Throwable {\n        return cache(pjp);\n    }", "signature": "Object cacheGetSingle(final ProceedingJoinPoint pjp)", "full_signature": "@Around(\"getSingle()\") public Object cacheGetSingle(final ProceedingJoinPoint pjp)", "class_method_signature": "ReadThroughSingleCacheAdvice.cacheGetSingle(final ProceedingJoinPoint pjp)", "testcase": false, "constructor": false, "invocations": ["cache"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}