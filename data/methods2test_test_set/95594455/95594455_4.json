{"test_class": {"identifier": "HistogramFieldBeanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String HISTOGRAM_NAME = MetricRegistry.name(HistogramFieldBean.class, \"histogramName\");", "modifier": "private final static", "type": "String", "declarator": "HISTOGRAM_NAME = MetricRegistry.name(HistogramFieldBean.class, \"histogramName\")", "var_name": "HISTOGRAM_NAME"}, {"original_string": "private static MetricID histogramMID;", "modifier": "private static", "type": "MetricID", "declarator": "histogramMID", "var_name": "histogramMID"}, {"original_string": "@Inject\n    private MetricRegistry registry;", "modifier": "@Inject\n    private", "type": "MetricRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "@Inject\n    private HistogramFieldBean bean;", "modifier": "@Inject\n    private", "type": "HistogramFieldBean", "declarator": "bean", "var_name": "bean"}], "file": "tck/api/src/main/java/org/eclipse/microprofile/metrics/tck/metrics/HistogramFieldBeanTest.java"}, "test_case": {"identifier": "updateHistogramField", "parameters": "()", "modifiers": "@Test @InSequence(2) public", "return": "void", "body": "@Test\n    @InSequence(2)\n    public void updateHistogramField() {\n        Histogram histogram = registry.getHistogram(histogramMID);\n        assertThat(\"Histogram is not registered correctly\", histogram, notNullValue());\n\n        // Call the update method and assert the histogram is up-to-date\n        long value = Math.round(Math.random() * Long.MAX_VALUE);\n        bean.update(value);\n        assertThat(\"Histogram count is incorrect\", histogram.getCount(), is(equalTo(1L)));\n        assertThat(\"Histogram size is incorrect\", histogram.getSnapshot().size(), is(equalTo(1)));\n        assertThat(\"Histogram min value is incorrect\", histogram.getSnapshot().getMin(), is(equalTo(value)));\n        assertThat(\"Histogram max value is incorrect\", histogram.getSnapshot().getMax(), is(equalTo(value)));\n    }", "signature": "void updateHistogramField()", "full_signature": "@Test @InSequence(2) public void updateHistogramField()", "class_method_signature": "HistogramFieldBeanTest.updateHistogramField()", "testcase": true, "constructor": false, "invocations": ["getHistogram", "assertThat", "notNullValue", "round", "random", "update", "assertThat", "getCount", "is", "equalTo", "assertThat", "size", "getSnapshot", "is", "equalTo", "assertThat", "getMin", "getSnapshot", "is", "equalTo", "assertThat", "getMax", "getSnapshot", "is", "equalTo"]}, "focal_class": {"identifier": "HistogramFieldBean", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    @Metric(name = \"histogramName\")\n    private Histogram histogram;", "modifier": "@Inject\n    @Metric(name = \"histogramName\")\n    private", "type": "Histogram", "declarator": "histogram", "var_name": "histogram"}], "methods": [{"identifier": "update", "parameters": "(long n)", "modifiers": "public", "return": "void", "signature": "void update(long n)", "full_signature": "public void update(long n)", "class_method_signature": "HistogramFieldBean.update(long n)", "testcase": false, "constructor": false}], "file": "tck/api/src/main/java/org/eclipse/microprofile/metrics/tck/metrics/HistogramFieldBean.java"}, "focal_method": {"identifier": "update", "parameters": "(long n)", "modifiers": "public", "return": "void", "body": "public void update(long n) {\n        histogram.update(n);\n    }", "signature": "void update(long n)", "full_signature": "public void update(long n)", "class_method_signature": "HistogramFieldBean.update(long n)", "testcase": false, "constructor": false, "invocations": ["update"]}, "repository": {"repo_id": 95594455, "url": "https://github.com/eclipse/microprofile-metrics", "stars": 57, "created": "6/27/2017 7:44:21 PM +00:00", "updates": "2020-01-24T22:21:48+00:00", "fork": "False", "license": "licensed"}}