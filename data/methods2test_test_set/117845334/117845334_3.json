{"test_class": {"identifier": "TaskScheduerTest", "superclass": "", "interfaces": "", "fields": [], "file": "rocket-core/src/test/java/cn/hikyson/rocket/task/TaskScheduerTest.java"}, "test_case": {"identifier": "schedule4", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void schedule4() throws Exception {\n        final Executor executor = Executors.newCachedThreadPool();\n        LaunchTask task0 = TaskFactory.create(\"task0\", 1000, Collections.singletonList(\"task2\"), executor, new TestTaskCallback() {\n            @Override\n            public void taskStart() {\n            }\n\n            @Override\n            public void taskEnd() {\n            }\n        });\n        LaunchTask task1 = TaskFactory.create(\"task1\", 1000, Collections.singletonList(\"task0\"), executor, new TestTaskCallback() {\n            @Override\n            public void taskStart() {\n            }\n\n            @Override\n            public void taskEnd() {\n            }\n        });\n        LaunchTask task2 = TaskFactory.create(\"task2\", 1000, Collections.singletonList(\"task1\"), executor, new TestTaskCallback() {\n            @Override\n            public void taskStart() {\n            }\n\n            @Override\n            public void taskEnd() {\n            }\n        });\n        try {\n            new TaskScheduer(Arrays.asList(task2, task1, task0)).schedule(null, 0, null);\n        } catch (Throwable throwable) {\n            Assert.assertTrue(throwable instanceof IllegalStateException);\n            Assert.assertTrue(throwable.getLocalizedMessage().equals(\"Exists a cycle in the graph\"));\n            return;\n        }\n        Assert.assertTrue(false);\n    }", "signature": "void schedule4()", "full_signature": "@Test public void schedule4()", "class_method_signature": "TaskScheduerTest.schedule4()", "testcase": true, "constructor": false, "invocations": ["newCachedThreadPool", "create", "singletonList", "create", "singletonList", "create", "singletonList", "schedule", "asList", "assertTrue", "assertTrue", "equals", "getLocalizedMessage", "assertTrue"]}, "focal_class": {"identifier": "TaskScheduer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<LaunchTask> mTasks;", "modifier": "private", "type": "List<LaunchTask>", "declarator": "mTasks", "var_name": "mTasks"}], "methods": [{"identifier": "TaskScheduer", "parameters": "(List<LaunchTask> originTasks)", "modifiers": "public", "return": "", "signature": " TaskScheduer(List<LaunchTask> originTasks)", "full_signature": "public  TaskScheduer(List<LaunchTask> originTasks)", "class_method_signature": "TaskScheduer.TaskScheduer(List<LaunchTask> originTasks)", "testcase": false, "constructor": true}, {"identifier": "schedule", "parameters": "(final IErrorHandler iErrorHandler, long timeout, ITimeoutHandler iTimeoutHandler, final ITasksFinishCallback iTasksFinishCallback)", "modifiers": "public", "return": "void", "signature": "void schedule(final IErrorHandler iErrorHandler, long timeout, ITimeoutHandler iTimeoutHandler, final ITasksFinishCallback iTasksFinishCallback)", "full_signature": "public void schedule(final IErrorHandler iErrorHandler, long timeout, ITimeoutHandler iTimeoutHandler, final ITasksFinishCallback iTasksFinishCallback)", "class_method_signature": "TaskScheduer.schedule(final IErrorHandler iErrorHandler, long timeout, ITimeoutHandler iTimeoutHandler, final ITasksFinishCallback iTasksFinishCallback)", "testcase": false, "constructor": false}, {"identifier": "topologicalSort", "parameters": "(List<LaunchTask> originTasks)", "modifiers": "private synchronized", "return": "List<LaunchTask>", "signature": "List<LaunchTask> topologicalSort(List<LaunchTask> originTasks)", "full_signature": "private synchronized List<LaunchTask> topologicalSort(List<LaunchTask> originTasks)", "class_method_signature": "TaskScheduer.topologicalSort(List<LaunchTask> originTasks)", "testcase": false, "constructor": false}, {"identifier": "getIndexOfTask", "parameters": "(List<LaunchTask> originTasks, String taskName)", "modifiers": "private", "return": "int", "signature": "int getIndexOfTask(List<LaunchTask> originTasks, String taskName)", "full_signature": "private int getIndexOfTask(List<LaunchTask> originTasks, String taskName)", "class_method_signature": "TaskScheduer.getIndexOfTask(List<LaunchTask> originTasks, String taskName)", "testcase": false, "constructor": false}], "file": "rocket-core/src/main/java/cn/hikyson/rocket/task/TaskScheduer.java"}, "focal_method": {"identifier": "schedule", "parameters": "(final IErrorHandler iErrorHandler, long timeout, ITimeoutHandler iTimeoutHandler, final ITasksFinishCallback iTasksFinishCallback)", "modifiers": "public", "return": "void", "body": "public void schedule(final IErrorHandler iErrorHandler, long timeout, ITimeoutHandler iTimeoutHandler, final ITasksFinishCallback iTasksFinishCallback) {\n        final AtomicInteger taskDoneCounter = new AtomicInteger(0);\n        final int taskCount = mTasks.size();\n        for (final LaunchTask task : mTasks) {\n            task.runOn().execute(new Worker(iErrorHandler, task, mTasks, new Worker.TaskDoneCallback() {\n                @Override\n                public void onTaskDone() {\n                    if (taskDoneCounter.addAndGet(1) == taskCount && iTasksFinishCallback != null) {\n                        iTasksFinishCallback.onTasksFinished();\n                    }\n                }\n            }));\n        }\n        TaskDelayChecker.delayCheckTaskAlive(mTasks, timeout, iTimeoutHandler);\n    }", "signature": "void schedule(final IErrorHandler iErrorHandler, long timeout, ITimeoutHandler iTimeoutHandler, final ITasksFinishCallback iTasksFinishCallback)", "full_signature": "public void schedule(final IErrorHandler iErrorHandler, long timeout, ITimeoutHandler iTimeoutHandler, final ITasksFinishCallback iTasksFinishCallback)", "class_method_signature": "TaskScheduer.schedule(final IErrorHandler iErrorHandler, long timeout, ITimeoutHandler iTimeoutHandler, final ITasksFinishCallback iTasksFinishCallback)", "testcase": false, "constructor": false, "invocations": ["size", "execute", "runOn", "addAndGet", "onTasksFinished", "delayCheckTaskAlive"]}, "repository": {"repo_id": 117845334, "url": "https://github.com/JamesLiAndroid/Rocket", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 36, "size": 1228, "license": "licensed"}}