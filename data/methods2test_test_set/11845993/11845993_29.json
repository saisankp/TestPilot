{"test_class": {"identifier": "RequestMonitorTest", "superclass": "extends AbstractRequestMonitorTest", "interfaces": "", "fields": [], "file": "stagemonitor-tracing/src/test/java/org/stagemonitor/tracing/RequestMonitorTest.java"}, "test_case": {"identifier": "testInternalMetricsActive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testInternalMetricsActive() throws Exception {\n\t\tdoReturn(true).when(corePlugin).isInternalMonitoringActive();\n\n\t\trequestMonitor.monitor(createMonitoredRequest());\n\t\tverify(registry).timer(name(\"internal_overhead_request_monitor\").build());\n\t}", "signature": "void testInternalMetricsActive()", "full_signature": "@Test public void testInternalMetricsActive()", "class_method_signature": "RequestMonitorTest.testInternalMetricsActive()", "testcase": true, "constructor": false, "invocations": ["isInternalMonitoringActive", "when", "doReturn", "monitor", "createMonitoredRequest", "timer", "verify", "build", "name"]}, "focal_class": {"identifier": "RequestMonitor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MetricName internalOverheadMetricName = name(\"internal_overhead_request_monitor\").build();", "modifier": "private final", "type": "MetricName", "declarator": "internalOverheadMetricName = name(\"internal_overhead_request_monitor\").build()", "var_name": "internalOverheadMetricName"}, {"original_string": "private Metric2Registry metricRegistry;", "modifier": "private", "type": "Metric2Registry", "declarator": "metricRegistry", "var_name": "metricRegistry"}, {"original_string": "private CorePlugin corePlugin;", "modifier": "private", "type": "CorePlugin", "declarator": "corePlugin", "var_name": "corePlugin"}, {"original_string": "private TracingPlugin tracingPlugin;", "modifier": "private", "type": "TracingPlugin", "declarator": "tracingPlugin", "var_name": "tracingPlugin"}, {"original_string": "private static final ThreadLocal<Map<Span, Scope>> currentScopeMapThreadLocal = new ThreadLocal<Map<Span, Scope>>();", "modifier": "private static final", "type": "ThreadLocal<Map<Span, Scope>>", "declarator": "currentScopeMapThreadLocal = new ThreadLocal<Map<Span, Scope>>()", "var_name": "currentScopeMapThreadLocal"}], "methods": [{"identifier": "RequestMonitor", "parameters": "(ConfigurationRegistry configuration, Metric2Registry registry)", "modifiers": "public", "return": "", "signature": " RequestMonitor(ConfigurationRegistry configuration, Metric2Registry registry)", "full_signature": "public  RequestMonitor(ConfigurationRegistry configuration, Metric2Registry registry)", "class_method_signature": "RequestMonitor.RequestMonitor(ConfigurationRegistry configuration, Metric2Registry registry)", "testcase": false, "constructor": true}, {"identifier": "RequestMonitor", "parameters": "(ConfigurationRegistry configuration, Metric2Registry registry, TracingPlugin tracingPlugin)", "modifiers": "private", "return": "", "signature": " RequestMonitor(ConfigurationRegistry configuration, Metric2Registry registry, TracingPlugin tracingPlugin)", "full_signature": "private  RequestMonitor(ConfigurationRegistry configuration, Metric2Registry registry, TracingPlugin tracingPlugin)", "class_method_signature": "RequestMonitor.RequestMonitor(ConfigurationRegistry configuration, Metric2Registry registry, TracingPlugin tracingPlugin)", "testcase": false, "constructor": true}, {"identifier": "monitorStart", "parameters": "(MonitoredRequest monitoredRequest)", "modifiers": "public", "return": "SpanContextInformation", "signature": "SpanContextInformation monitorStart(MonitoredRequest monitoredRequest)", "full_signature": "public SpanContextInformation monitorStart(MonitoredRequest monitoredRequest)", "class_method_signature": "RequestMonitor.monitorStart(MonitoredRequest monitoredRequest)", "testcase": false, "constructor": false}, {"identifier": "monitorStart", "parameters": "(MonitoredRequest monitoredRequest, boolean activateSpan)", "modifiers": "private", "return": "SpanContextInformation", "signature": "SpanContextInformation monitorStart(MonitoredRequest monitoredRequest, boolean activateSpan)", "full_signature": "private SpanContextInformation monitorStart(MonitoredRequest monitoredRequest, boolean activateSpan)", "class_method_signature": "RequestMonitor.monitorStart(MonitoredRequest monitoredRequest, boolean activateSpan)", "testcase": false, "constructor": false}, {"identifier": "getSpanContextInformation", "parameters": "(long start, Span span)", "modifiers": "private", "return": "SpanContextInformation", "signature": "SpanContextInformation getSpanContextInformation(long start, Span span)", "full_signature": "private SpanContextInformation getSpanContextInformation(long start, Span span)", "class_method_signature": "RequestMonitor.getSpanContextInformation(long start, Span span)", "testcase": false, "constructor": false}, {"identifier": "monitorStop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void monitorStop()", "full_signature": "public void monitorStop()", "class_method_signature": "RequestMonitor.monitorStop()", "testcase": false, "constructor": false}, {"identifier": "monitorStop", "parameters": "(Scope scope, Span span)", "modifiers": "private", "return": "void", "signature": "void monitorStop(Scope scope, Span span)", "full_signature": "private void monitorStop(Scope scope, Span span)", "class_method_signature": "RequestMonitor.monitorStop(Scope scope, Span span)", "testcase": false, "constructor": false}, {"identifier": "monitor", "parameters": "(MonitoredRequest monitoredRequest)", "modifiers": "public", "return": "SpanContextInformation", "signature": "SpanContextInformation monitor(MonitoredRequest monitoredRequest)", "full_signature": "public SpanContextInformation monitor(MonitoredRequest monitoredRequest)", "class_method_signature": "RequestMonitor.monitor(MonitoredRequest monitoredRequest)", "testcase": false, "constructor": false}, {"identifier": "recordException", "parameters": "(Exception e)", "modifiers": "public", "return": "void", "signature": "void recordException(Exception e)", "full_signature": "public void recordException(Exception e)", "class_method_signature": "RequestMonitor.recordException(Exception e)", "testcase": false, "constructor": false}, {"identifier": "trackOverhead", "parameters": "(long overhead1, long overhead2)", "modifiers": "private", "return": "void", "signature": "void trackOverhead(long overhead1, long overhead2)", "full_signature": "private void trackOverhead(long overhead1, long overhead2)", "class_method_signature": "RequestMonitor.trackOverhead(long overhead1, long overhead2)", "testcase": false, "constructor": false}], "file": "stagemonitor-tracing/src/main/java/org/stagemonitor/tracing/RequestMonitor.java"}, "focal_method": {"identifier": "monitor", "parameters": "(MonitoredRequest monitoredRequest)", "modifiers": "public", "return": "SpanContextInformation", "body": "public SpanContextInformation monitor(MonitoredRequest monitoredRequest) throws Exception {\n\t\tif (corePlugin.isStagemonitorActive()) {\n\t\t\tfinal long start = System.nanoTime();\n\t\t\tfinal Span span = monitoredRequest.createSpan();\n\t\t\tfinal Scope scope = tracingPlugin.getTracer().scopeManager().activate(span);\n\t\t\ttry {\n\t\t\t\tfinal SpanContextInformation info = getSpanContextInformation(start, span);\n\t\t\t\tmonitoredRequest.execute();\n\t\t\t\treturn info;\n\t\t\t} catch (Exception e) {\n\t\t\t\trecordException(e);\n\t\t\t\tthrow e;\n\t\t\t} finally {\n\t\t\t\tmonitorStop(scope, span);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "signature": "SpanContextInformation monitor(MonitoredRequest monitoredRequest)", "full_signature": "public SpanContextInformation monitor(MonitoredRequest monitoredRequest)", "class_method_signature": "RequestMonitor.monitor(MonitoredRequest monitoredRequest)", "testcase": false, "constructor": false, "invocations": ["isStagemonitorActive", "nanoTime", "createSpan", "activate", "scopeManager", "getTracer", "getSpanContextInformation", "execute", "recordException", "monitorStop"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}