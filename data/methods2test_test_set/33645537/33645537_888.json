{"test_class": {"identifier": "JueTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String testFile = \"/tmp/jueTestFile.jue\";", "modifier": "private", "type": "String", "declarator": "testFile = \"/tmp/jueTestFile.jue\"", "var_name": "testFile"}, {"original_string": "private Jue jue;", "modifier": "private", "type": "Jue", "declarator": "jue", "var_name": "jue"}], "file": "zava/src/test/java/com/github/NoahShen/jue/JueTest.java"}, "test_case": {"identifier": "testJue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testJue() {\n\t\tFileConfig config = new FileConfig();\n\t\tconfig.setKeyTreeMin(10);\n\t\tconfig.setValueRevTreeMin(10);\n\t\tconfig.setValueCompressed(true);\n\t\tconfig.setCompressionType(FileConfig.ZLIB);\n\t\tconfig.setCacheCapacity(10);\n\t\tconfig.setDataBufferSize(AODataSyncFile.DEFAULT_MAX_DATA_BUFFER_SIZE);\n\t\tjue = new Jue(testFile, config);\n\t\t\n\t\t//put\n\t\tint propertycount = 10;\n\t\tDocObject docObj = new DocObject();\n\t\tfor (int i = 0; i < propertycount; i++) {\n\t\t\tdocObj.put(\"property\" + i, true);\n\t\t}\n\t\tjue.put(\"key\", docObj, -1, true);\n\t\t\n\t\t//get\n\t\tDocObject obj = jue.get(\"key\", -1);\n\t\tAssert.assertEquals(true, obj.getBoolean(\"property1\"));\n\t\tSystem.out.println(obj);\n\t\t\n\t\t//merge\n\t\tDocObject docObjMerge = new DocObject();\n\t\tdocObjMerge.put(\"property\" + propertycount, true);\n\t\tjue.put(\"key\", docObjMerge, -1, true);\n\t\t\n\t\tDocObject obj2 = jue.get(\"key\", -1);\n\t\tAssert.assertEquals(true, obj2.getBoolean(\"property1\"));\n\t\tAssert.assertEquals(true, obj2.getBoolean(\"property2\"));\n\t\tSystem.out.println(obj2);\n\t\t\n\t\t//not merge\n\t\tDocObject docObjNotMerge = new DocObject();\n\t\tdocObjNotMerge.put(\"property\" + propertycount, true);\n\t\tjue.put(\"key\", docObjNotMerge, -1, false);\n\t\t\n\t\tDocObject obj3 = jue.get(\"key\", -1);\n\t\tAssert.assertEquals(false, obj3.has(\"property1\"));\n\t\tAssert.assertEquals(false, obj3.has(\"property2\"));\n\t\tAssert.assertEquals(true, obj3.getBoolean(\"property\" + propertycount));\n\t\tSystem.out.println(obj3);\n\t\t\n\t\t\n\t\t//compact\n\t\tjue.compact(-1);\n\t\t\n\t\tjue.close();\n\t}", "signature": "void testJue()", "full_signature": "@Test public void testJue()", "class_method_signature": "JueTest.testJue()", "testcase": true, "constructor": false, "invocations": ["setKeyTreeMin", "setValueRevTreeMin", "setValueCompressed", "setCompressionType", "setCacheCapacity", "setDataBufferSize", "put", "put", "get", "assertEquals", "getBoolean", "println", "put", "put", "get", "assertEquals", "getBoolean", "assertEquals", "getBoolean", "println", "put", "put", "get", "assertEquals", "has", "assertEquals", "has", "assertEquals", "getBoolean", "println", "compact", "close"]}, "focal_class": {"identifier": "Jue", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int MAX_KEY_LENGTH = 1 << 16;", "modifier": "public static final", "type": "int", "declarator": "MAX_KEY_LENGTH = 1 << 16", "var_name": "MAX_KEY_LENGTH"}, {"original_string": "public static final int COMPACT_BUFFER_SIZE = 1 << 26;", "modifier": "public static final", "type": "int", "declarator": "COMPACT_BUFFER_SIZE = 1 << 26", "var_name": "COMPACT_BUFFER_SIZE"}, {"original_string": "private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();", "modifier": "private final", "type": "ReentrantReadWriteLock", "declarator": "lock = new ReentrantReadWriteLock()", "var_name": "lock"}, {"original_string": "private final ReadLock readLock = lock.readLock();", "modifier": "private final", "type": "ReadLock", "declarator": "readLock = lock.readLock()", "var_name": "readLock"}, {"original_string": "private final WriteLock writeLock = lock.writeLock();", "modifier": "private final", "type": "WriteLock", "declarator": "writeLock = lock.writeLock()", "var_name": "writeLock"}, {"original_string": "private final ConcurrentLRUCache<String, CacheObject> cache = new ConcurrentLRUCache<String, CacheObject>();", "modifier": "private final", "type": "ConcurrentLRUCache<String, CacheObject>", "declarator": "cache = new ConcurrentLRUCache<String, CacheObject>()", "var_name": "cache"}, {"original_string": "private CopyOnWriteBPlusTree<String, Long> keyTree;", "modifier": "private", "type": "CopyOnWriteBPlusTree<String, Long>", "declarator": "keyTree", "var_name": "keyTree"}, {"original_string": "private FileHeader fileHeader;", "modifier": "private", "type": "FileHeader", "declarator": "fileHeader", "var_name": "fileHeader"}, {"original_string": "private FileTail fileTail;", "modifier": "private", "type": "FileTail", "declarator": "fileTail", "var_name": "fileTail"}, {"original_string": "private DropTransfer dropTransfer;", "modifier": "private", "type": "DropTransfer", "declarator": "dropTransfer", "var_name": "dropTransfer"}, {"original_string": "private AODataSyncFile aodataSyncFile;", "modifier": "private", "type": "AODataSyncFile", "declarator": "aodataSyncFile", "var_name": "aodataSyncFile"}, {"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private boolean closed;", "modifier": "private", "type": "boolean", "declarator": "closed", "var_name": "closed"}, {"original_string": "private Map<Byte, DataCompress> compresses = new HashMap<Byte, DataCompress>();", "modifier": "private", "type": "Map<Byte, DataCompress>", "declarator": "compresses = new HashMap<Byte, DataCompress>()", "var_name": "compresses"}], "methods": [{"identifier": "Jue", "parameters": "(String filePath)", "modifiers": "public", "return": "", "signature": " Jue(String filePath)", "full_signature": "public  Jue(String filePath)", "class_method_signature": "Jue.Jue(String filePath)", "testcase": false, "constructor": true}, {"identifier": "Jue", "parameters": "(String filePath, FileConfig config)", "modifiers": "public", "return": "", "signature": " Jue(String filePath, FileConfig config)", "full_signature": "public  Jue(String filePath, FileConfig config)", "class_method_signature": "Jue.Jue(String filePath, FileConfig config)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(String filePath, FileConfig config)", "modifiers": "private", "return": "void", "signature": "void init(String filePath, FileConfig config)", "full_signature": "private void init(String filePath, FileConfig config)", "class_method_signature": "Jue.init(String filePath, FileConfig config)", "testcase": false, "constructor": false}, {"identifier": "readHeader", "parameters": "(File file, FileConfig config)", "modifiers": "private", "return": "FileHeader", "signature": "FileHeader readHeader(File file, FileConfig config)", "full_signature": "private FileHeader readHeader(File file, FileConfig config)", "class_method_signature": "Jue.readHeader(File file, FileConfig config)", "testcase": false, "constructor": false}, {"identifier": "initTree", "parameters": "(int keyTreeMin, long rootNodeAddr)", "modifiers": "private", "return": "void", "signature": "void initTree(int keyTreeMin, long rootNodeAddr)", "full_signature": "private void initTree(int keyTreeMin, long rootNodeAddr)", "class_method_signature": "Jue.initTree(int keyTreeMin, long rootNodeAddr)", "testcase": false, "constructor": false}, {"identifier": "createKeyBNode", "parameters": "(long nodePosition, int keyTreeMin)", "modifiers": "private", "return": "BNode<String, Long>", "signature": "BNode<String, Long> createKeyBNode(long nodePosition, int keyTreeMin)", "full_signature": "private BNode<String, Long> createKeyBNode(long nodePosition, int keyTreeMin)", "class_method_signature": "Jue.createKeyBNode(long nodePosition, int keyTreeMin)", "testcase": false, "constructor": false}, {"identifier": "createEmptyFile", "parameters": "(File file, FileConfig config)", "modifiers": "private", "return": "FileHeader", "signature": "FileHeader createEmptyFile(File file, FileConfig config)", "full_signature": "private FileHeader createEmptyFile(File file, FileConfig config)", "class_method_signature": "Jue.createEmptyFile(File file, FileConfig config)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String key, DocObject docObj)", "modifiers": "public", "return": "int", "signature": "int put(String key, DocObject docObj)", "full_signature": "public int put(String key, DocObject docObj)", "class_method_signature": "Jue.put(String key, DocObject docObj)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String key, DocObject docObj, boolean merge)", "modifiers": "public", "return": "int", "signature": "int put(String key, DocObject docObj, boolean merge)", "full_signature": "public int put(String key, DocObject docObj, boolean merge)", "class_method_signature": "Jue.put(String key, DocObject docObj, boolean merge)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String key, DocObject docObj, int requireRev)", "modifiers": "public", "return": "int", "signature": "int put(String key, DocObject docObj, int requireRev)", "full_signature": "public int put(String key, DocObject docObj, int requireRev)", "class_method_signature": "Jue.put(String key, DocObject docObj, int requireRev)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String key, DocObject docObj, int requireRev, boolean merge)", "modifiers": "public", "return": "int", "signature": "int put(String key, DocObject docObj, int requireRev, boolean merge)", "full_signature": "public int put(String key, DocObject docObj, int requireRev, boolean merge)", "class_method_signature": "Jue.put(String key, DocObject docObj, int requireRev, boolean merge)", "testcase": false, "constructor": false}, {"identifier": "putImpl", "parameters": "(String key, byte[] keyBytes, DocObject docObj, boolean deleted, int rev)", "modifiers": "private", "return": "int", "signature": "int putImpl(String key, byte[] keyBytes, DocObject docObj, boolean deleted, int rev)", "full_signature": "private int putImpl(String key, byte[] keyBytes, DocObject docObj, boolean deleted, int rev)", "class_method_signature": "Jue.putImpl(String key, byte[] keyBytes, DocObject docObj, boolean deleted, int rev)", "testcase": false, "constructor": false}, {"identifier": "getRevTree", "parameters": "(String key)", "modifiers": "private", "return": "BPlusTree<Integer, Long>", "signature": "BPlusTree<Integer, Long> getRevTree(String key)", "full_signature": "private BPlusTree<Integer, Long> getRevTree(String key)", "class_method_signature": "Jue.getRevTree(String key)", "testcase": false, "constructor": false}, {"identifier": "getRevTree", "parameters": "(long revRootNodePos)", "modifiers": "private", "return": "BPlusTree<Integer, Long>", "signature": "BPlusTree<Integer, Long> getRevTree(long revRootNodePos)", "full_signature": "private BPlusTree<Integer, Long> getRevTree(long revRootNodePos)", "class_method_signature": "Jue.getRevTree(long revRootNodePos)", "testcase": false, "constructor": false}, {"identifier": "createValueRevNode", "parameters": "(long nodePos, int revTreeMin)", "modifiers": "private", "return": "BNode<Integer, Long>", "signature": "BNode<Integer, Long> createValueRevNode(long nodePos, int revTreeMin)", "full_signature": "private BNode<Integer, Long> createValueRevNode(long nodePos, int revTreeMin)", "class_method_signature": "Jue.createValueRevNode(long nodePos, int revTreeMin)", "testcase": false, "constructor": false}, {"identifier": "getCurrentRev", "parameters": "(String key)", "modifiers": "private", "return": "int", "signature": "int getCurrentRev(String key)", "full_signature": "private int getCurrentRev(String key)", "class_method_signature": "Jue.getCurrentRev(String key)", "testcase": false, "constructor": false}, {"identifier": "getKeyRecord", "parameters": "(String key)", "modifiers": "private", "return": "KeyRecord", "signature": "KeyRecord getKeyRecord(String key)", "full_signature": "private KeyRecord getKeyRecord(String key)", "class_method_signature": "Jue.getKeyRecord(String key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key, int requireRev)", "modifiers": "public", "return": "DocObject", "signature": "DocObject get(String key, int requireRev)", "full_signature": "public DocObject get(String key, int requireRev)", "class_method_signature": "Jue.get(String key, int requireRev)", "testcase": false, "constructor": false}, {"identifier": "readDocObj", "parameters": "(long valuePos)", "modifiers": "private", "return": "DocObject", "signature": "DocObject readDocObj(long valuePos)", "full_signature": "private DocObject readDocObj(long valuePos)", "class_method_signature": "Jue.readDocObj(long valuePos)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String key)", "modifiers": "public", "return": "int", "signature": "int remove(String key)", "full_signature": "public int remove(String key)", "class_method_signature": "Jue.remove(String key)", "testcase": false, "constructor": false}, {"identifier": "compact", "parameters": "(int lastRev)", "modifiers": "public", "return": "void", "signature": "void compact(int lastRev)", "full_signature": "public void compact(int lastRev)", "class_method_signature": "Jue.compact(int lastRev)", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "public boolean isClosed()", "class_method_signature": "Jue.isClosed()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "Jue.close()", "testcase": false, "constructor": false}, {"identifier": "lock", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void lock()", "full_signature": "private void lock()", "class_method_signature": "Jue.lock()", "testcase": false, "constructor": false}, {"identifier": "unlock", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void unlock()", "full_signature": "private void unlock()", "class_method_signature": "Jue.unlock()", "testcase": false, "constructor": false}], "file": "zava/src/main/java/com/github/NoahShen/jue/Jue.java"}, "focal_method": {"identifier": "Jue", "parameters": "(String filePath)", "modifiers": "public", "return": "", "body": "public Jue(String filePath) {\n\t\tthis(filePath, new FileConfig());\n\t}", "signature": " Jue(String filePath)", "full_signature": "public  Jue(String filePath)", "class_method_signature": "Jue.Jue(String filePath)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}