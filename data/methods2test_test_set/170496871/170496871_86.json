{"test_class": {"identifier": "CollectPartitionKeysByRecheckRequestTaskTest", "superclass": "extends CollectPartitionInfoAbstractTest", "interfaces": "", "fields": [], "file": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/checker/tasks/CollectPartitionKeysByRecheckRequestTaskTest.java"}, "test_case": {"identifier": "testShouldReturnAllRequiredKeys", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShouldReturnAllRequiredKeys() throws Exception {\n        IgniteEx node = startGrids(2);\n\n        node.cluster().active(true);\n\n        IgniteInternalCache<Object, Object> cache = node.cachex(DEFAULT_CACHE_NAME);\n        cache.put(1, 1);\n        cache.put(2, 2);\n\n        CacheObjectContext ctx = cache.context().cacheObjectContext();\n\n        Collection<ClusterNode> nodes = node.affinity(DEFAULT_CACHE_NAME)\n            .mapPartitionToPrimaryAndBackups(FIRST_PARTITION);\n\n        List<KeyCacheObject> recheckKeys = new ArrayList<>();\n        recheckKeys.add(key(1, ctx));\n        recheckKeys.add(key(2, ctx));\n\n        Map<KeyCacheObject, Map<UUID, VersionedValue>> res = node.compute(group(node, nodes)).execute(\n            CollectPartitionKeysByRecheckRequestTask.class,\n            new RecheckRequest(ReconciliationExecutionContext.IGNORE_JOB_PERMITS_SESSION_ID, UUID.randomUUID(),\n                recheckKeys, DEFAULT_CACHE_NAME, FIRST_PARTITION, lastTopologyVersion(node))\n        ).result();\n\n        assertEquals(2, res.size());\n        assertTrue(res.keySet().containsAll(recheckKeys));\n    }", "signature": "void testShouldReturnAllRequiredKeys()", "full_signature": "@Test public void testShouldReturnAllRequiredKeys()", "class_method_signature": "CollectPartitionKeysByRecheckRequestTaskTest.testShouldReturnAllRequiredKeys()", "testcase": true, "constructor": false, "invocations": ["startGrids", "active", "cluster", "cachex", "put", "put", "cacheObjectContext", "context", "mapPartitionToPrimaryAndBackups", "affinity", "add", "key", "add", "key", "result", "execute", "compute", "group", "randomUUID", "lastTopologyVersion", "assertEquals", "size", "assertTrue", "containsAll", "keySet"]}, "focal_class": {"identifier": "CollectPartitionKeysByRecheckRequestTask", "superclass": "extends ComputeTaskAdapter<RecheckRequest, ExecutionResult<Map<KeyCacheObject, Map<UUID, VersionedValue>>>>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 0L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 0L", "var_name": "serialVersionUID"}, {"original_string": "@LoggerResource\n    private IgniteLogger log;", "modifier": "@LoggerResource\n    private", "type": "IgniteLogger", "declarator": "log", "var_name": "log"}, {"original_string": "@IgniteInstanceResource\n    private IgniteEx ignite;", "modifier": "@IgniteInstanceResource\n    private", "type": "IgniteEx", "declarator": "ignite", "var_name": "ignite"}, {"original_string": "private RecheckRequest recheckReq;", "modifier": "private", "type": "RecheckRequest", "declarator": "recheckReq", "var_name": "recheckReq"}], "methods": [{"identifier": "map", "parameters": "(List<ClusterNode> subgrid,\n        RecheckRequest arg)", "modifiers": "@Override public", "return": "Map<? extends ComputeJob, ClusterNode>", "signature": "Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid,\n        RecheckRequest arg)", "full_signature": "@Override public Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid,\n        RecheckRequest arg)", "class_method_signature": "CollectPartitionKeysByRecheckRequestTask.map(List<ClusterNode> subgrid,\n        RecheckRequest arg)", "testcase": false, "constructor": false}, {"identifier": "result", "parameters": "(ComputeJobResult res, List<ComputeJobResult> rcvd)", "modifiers": "@Override public", "return": "ComputeJobResultPolicy", "signature": "ComputeJobResultPolicy result(ComputeJobResult res, List<ComputeJobResult> rcvd)", "full_signature": "@Override public ComputeJobResultPolicy result(ComputeJobResult res, List<ComputeJobResult> rcvd)", "class_method_signature": "CollectPartitionKeysByRecheckRequestTask.result(ComputeJobResult res, List<ComputeJobResult> rcvd)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(\n        List<ComputeJobResult> results)", "modifiers": "@Override public", "return": "ExecutionResult<Map<KeyCacheObject, Map<UUID, VersionedValue>>>", "signature": "ExecutionResult<Map<KeyCacheObject, Map<UUID, VersionedValue>>> reduce(\n        List<ComputeJobResult> results)", "full_signature": "@Override public ExecutionResult<Map<KeyCacheObject, Map<UUID, VersionedValue>>> reduce(\n        List<ComputeJobResult> results)", "class_method_signature": "CollectPartitionKeysByRecheckRequestTask.reduce(\n        List<ComputeJobResult> results)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/checker/tasks/CollectPartitionKeysByRecheckRequestTask.java"}, "focal_method": {"identifier": "result", "parameters": "(ComputeJobResult res, List<ComputeJobResult> rcvd)", "modifiers": "@Override public", "return": "ComputeJobResultPolicy", "body": "@Override public ComputeJobResultPolicy result(ComputeJobResult res, List<ComputeJobResult> rcvd) {\n        ComputeJobResultPolicy superRes = super.result(res, rcvd);\n\n        // Deny failover.\n        if (superRes == ComputeJobResultPolicy.FAILOVER) {\n            superRes = ComputeJobResultPolicy.WAIT;\n\n            log.warning(\"CollectPartitionEntryHashesJob failed on node \" +\n                \"[consistentId=\" + res.getNode().consistentId() + \"]\", res.getException());\n        }\n\n        return superRes;\n    }", "signature": "ComputeJobResultPolicy result(ComputeJobResult res, List<ComputeJobResult> rcvd)", "full_signature": "@Override public ComputeJobResultPolicy result(ComputeJobResult res, List<ComputeJobResult> rcvd)", "class_method_signature": "CollectPartitionKeysByRecheckRequestTask.result(ComputeJobResult res, List<ComputeJobResult> rcvd)", "testcase": false, "constructor": false, "invocations": ["result", "warning", "consistentId", "getNode", "getException"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}